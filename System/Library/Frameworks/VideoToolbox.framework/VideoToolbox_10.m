uint64_t vtcg_createDeferredImageProviderWithIOSurface(__IOSurface *a1, const void *a2, OSType *a3, size_t *a4, CGDataProviderRef *a5)
{
  size_t Width;
  size_t v11;
  size_t Height;
  size_t v13;
  OSType PixelFormat;
  __IOSurface **v15;
  __IOSurface **v16;
  size_t BytesPerRow;
  __IOSurface *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  CGDataProviderRef v23;
  uint64_t v24;
  CGDataProviderDirectCallbacks v26;

  v26 = *(CGDataProviderDirectCallbacks *)byte_1EE4EE488;
  if (!a1
    || !a5
    || (Width = IOSurfaceGetWidth(a1)) == 0
    || (v11 = Width, (Height = IOSurfaceGetHeight(a1)) == 0)
    || (v13 = Height,
        PixelFormat = IOSurfaceGetPixelFormat(a1),
        (v15 = (__IOSurface **)malloc_type_calloc(1uLL, 0x20uLL, 0x10600408D5616BCuLL)) == 0))
  {
    v24 = FigSignalErrorAt();
    goto LABEL_25;
  }
  v16 = v15;
  if (PixelFormat == 32 || PixelFormat == 1111970369 || PixelFormat == 1380411457)
  {
    BytesPerRow = IOSurfaceGetBytesPerRow(a1);
    if (a2)
    {
LABEL_10:
      v18 = (__IOSurface *)CFRetain(a2);
      goto LABEL_19;
    }
  }
  else
  {
    v19 = 4 * v11;
    v20 = rowAlignment_bytesPerRowAlignment;
    if (rowAlignment_bytesPerRowAlignment)
    {
      v21 = (v19 + rowAlignment_bytesPerRowAlignment - 1) / (unint64_t)rowAlignment_bytesPerRowAlignment;
    }
    else
    {
      FigGetAlignmentForIOSurfaceOutputToDisplayService(0, 0, &rowAlignment_bytesPerRowAlignment);
      v20 = rowAlignment_bytesPerRowAlignment;
      v22 = v19 + rowAlignment_bytesPerRowAlignment - 1;
      if (rowAlignment_bytesPerRowAlignment)
      {
        v21 = v22 / rowAlignment_bytesPerRowAlignment;
      }
      else
      {
        FigGetAlignmentForIOSurfaceOutputToDisplayService(0, 0, &rowAlignment_bytesPerRowAlignment);
        v20 = rowAlignment_bytesPerRowAlignment;
        v21 = v22 / rowAlignment_bytesPerRowAlignment;
        if (!rowAlignment_bytesPerRowAlignment)
        {
          FigGetAlignmentForIOSurfaceOutputToDisplayService(0, 0, &rowAlignment_bytesPerRowAlignment);
          v20 = rowAlignment_bytesPerRowAlignment;
        }
      }
    }
    BytesPerRow = v21 * v20;
    PixelFormat = 1111970369;
    if (a2) {
      goto LABEL_10;
    }
  }
  v18 = 0;
LABEL_19:
  v16[2] = v18;
  CFRetain(a1);
  IOSurfaceIncrementUseCount(a1);
  *v16 = a1;
  v16[3] = (__IOSurface *)BytesPerRow;
  v23 = CGDataProviderCreateDirect(v16, BytesPerRow * v13, &v26);
  if (v23)
  {
    if (a3) {
      *a3 = PixelFormat;
    }
    if (a4) {
      *a4 = BytesPerRow;
    }
    v24 = 0;
    *a5 = v23;
  }
  else
  {
    v24 = FigSignalErrorAt();
    _releaseInfoFromIOSurface((CFTypeRef *)v16);
  }
LABEL_25:
  CGDataProviderRelease(0);
  return v24;
}

void *_getImageBytePointerFromPixelBuffer(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (!a1)
  {
    FigSignalErrorAt();
    return 0;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    goto LABEL_14;
  }
  v3 = *(__CVBuffer **)(a1 + 8);
  if (!v3)
  {
    v4 = *(__CVBuffer **)a1;
    if (!*(void *)a1) {
      goto LABEL_14;
    }
    if (vtcg_createCGCompatiblePixelBuffer(*(__CVBuffer **)a1, v2, (CVPixelBufferRef *)&cf)
      || vtcg_convertPixelBuffer(v4, (__CVBuffer *)cf))
    {
      goto LABEL_15;
    }
    v3 = (__CVBuffer *)cf;
  }
  if (CVPixelBufferLockBaseAddress(v3, 1uLL))
  {
LABEL_15:
    result = (void *)cf;
    if (!cf) {
      return result;
    }
    CFRelease(cf);
    return 0;
  }
  result = CVPixelBufferGetBaseAddress(v3);
  if (!result)
  {
LABEL_14:
    FigSignalErrorAt();
    goto LABEL_15;
  }
  if (cf) {
    *(void *)(a1 + 8) = v3;
  }
  return result;
}

__CVBuffer *_releaseImageBytePointerFromPixelBuffer(__CVBuffer *result, uint64_t a2)
{
  if (result && a2)
  {
    result = (__CVBuffer *)*((void *)result + 1);
    if (result) {
      return (__CVBuffer *)CVPixelBufferUnlockBaseAddress(result, 1uLL);
    }
  }
  return result;
}

void _releaseInfoFromPixelBuffer(const void **a1)
{
  if (a1)
  {
    unint64_t v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    v3 = a1[1];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

uint64_t vtcg_getCGCompatiblePixelFormat(__CVBuffer *a1)
{
  uint64_t v1 = 1111970369;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  CFDictionaryRef v3 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], PixelFormatType);
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    if (CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E4F24E20]))
    {
      if (FigCFNumberGetUInt64() <= 9) {
        uint64_t v1 = 1111970369;
      }
      else {
        uint64_t v1 = 1380411457;
      }
    }
    CFRelease(v4);
  }
  return v1;
}

unint64_t calculateBytesPerRow(int a1, uint64_t a2)
{
  uint64_t v2 = rowAlignment_bytesPerRowAlignment;
  if (a1 == 1380411457)
  {
    uint64_t v3 = 8 * a2;
    if (!rowAlignment_bytesPerRowAlignment) {
      goto LABEL_3;
    }
LABEL_6:
    unint64_t v5 = (v3 + rowAlignment_bytesPerRowAlignment - 1) / (unint64_t)rowAlignment_bytesPerRowAlignment;
    return v5 * v2;
  }
  uint64_t v3 = 4 * a2;
  if (rowAlignment_bytesPerRowAlignment) {
    goto LABEL_6;
  }
LABEL_3:
  FigGetAlignmentForIOSurfaceOutputToDisplayService(0, 0, &rowAlignment_bytesPerRowAlignment);
  uint64_t v2 = rowAlignment_bytesPerRowAlignment;
  unint64_t v4 = v3 + rowAlignment_bytesPerRowAlignment - 1;
  if (rowAlignment_bytesPerRowAlignment)
  {
    unint64_t v5 = v4 / rowAlignment_bytesPerRowAlignment;
  }
  else
  {
    FigGetAlignmentForIOSurfaceOutputToDisplayService(0, 0, &rowAlignment_bytesPerRowAlignment);
    uint64_t v2 = rowAlignment_bytesPerRowAlignment;
    unint64_t v5 = v4 / rowAlignment_bytesPerRowAlignment;
    if (!rowAlignment_bytesPerRowAlignment)
    {
      FigGetAlignmentForIOSurfaceOutputToDisplayService(0, 0, &rowAlignment_bytesPerRowAlignment);
      uint64_t v2 = rowAlignment_bytesPerRowAlignment;
    }
  }
  return v5 * v2;
}

__IOSurface *_getImageBytePointerFromIOSurface(uint64_t a1)
{
  CFTypeRef v8 = 0;
  CFTypeRef cf = 0;
  if (!a1) {
    goto LABEL_25;
  }
  BaseAddress = *(__IOSurface **)a1;
  if (!*(void *)a1) {
    goto LABEL_27;
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (!v3
    || (unint64_t v4 = *(__CVBuffer **)(a1 + 8), v5 = *(const __CFDictionary **)(a1 + 16), !IOSurfaceGetWidth(*(IOSurfaceRef *)a1))
    || !IOSurfaceGetHeight(BaseAddress))
  {
LABEL_25:
    FigSignalErrorAt();
    goto LABEL_26;
  }
  OSType PixelFormat = IOSurfaceGetPixelFormat(BaseAddress);
  if (PixelFormat == 32 || PixelFormat == 1111970369 || PixelFormat == 1380411457)
  {
    if (!IOSurfaceLock(BaseAddress, 1u, 0))
    {
      BaseAddress = (__IOSurface *)IOSurfaceGetBaseAddress(BaseAddress);
      if (BaseAddress) {
        goto LABEL_11;
      }
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (!v4)
  {
    if (CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E4F1CF80], BaseAddress, v5, (CVPixelBufferRef *)&cf)|| vtcg_createCGCompatiblePixelBuffer((__CVBuffer *)cf, v3, (CVPixelBufferRef *)&v8)|| vtcg_convertPixelBuffer((__CVBuffer *)cf, (__CVBuffer *)v8))
    {
      goto LABEL_26;
    }
    unint64_t v4 = (__CVBuffer *)v8;
  }
  if (CVPixelBufferLockBaseAddress(v4, 1uLL))
  {
LABEL_26:
    BaseAddress = 0;
    goto LABEL_11;
  }
  BaseAddress = (__IOSurface *)CVPixelBufferGetBaseAddress(v4);
  if (!BaseAddress)
  {
LABEL_27:
    FigSignalErrorAt();
    goto LABEL_11;
  }
  if (v8)
  {
    *(void *)(a1 + 8) = v8;
    CFTypeRef v8 = 0;
  }
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  return BaseAddress;
}

CVPixelBufferRef *_releaseImageBytePointerFromIOSurface(CVPixelBufferRef *result, uint64_t a2)
{
  if (result && a2)
  {
    if (result[1])
    {
      return (CVPixelBufferRef *)CVPixelBufferUnlockBaseAddress(result[1], 1uLL);
    }
    else
    {
      result = (CVPixelBufferRef *)*result;
      if (result) {
        return (CVPixelBufferRef *)IOSurfaceUnlock((IOSurfaceRef)result, 1u, 0);
      }
    }
  }
  return result;
}

void _releaseInfoFromIOSurface(CFTypeRef *a1)
{
  if (a1)
  {
    uint64_t v2 = (__IOSurface *)*a1;
    if (v2)
    {
      IOSurfaceDecrementUseCount(v2);
      if (*a1)
      {
        CFRelease(*a1);
        *a1 = 0;
      }
    }
    CFTypeRef v3 = a1[2];
    if (v3)
    {
      CFRelease(v3);
      a1[2] = 0;
    }
    CFTypeRef v4 = a1[1];
    if (v4) {
      CFRelease(v4);
    }
    free(a1);
  }
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD(float32x2_t *result, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7, double a8, double a9, int16x4_t a10)
{
  uint64_t v16 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v17 = 2 * result->u8[0];
  unint64_t v18 = v16 * a2 / v17;
  unint64_t v19 = (v16 + v16 * a2) / v17;
  if (2 * v19 != 2 * v18)
  {
    unint64_t v20 = 0;
    size_t v21 = *(size_t *)((char *)&result[2] + 4);
    uint64_t v22 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v23 = *(void *)((char *)&result[5] + 4) + 2 * v18;
    unint64_t v24 = 2 * v19 - 2 * v18;
    float32x2_t v25 = result[14];
    v26 = (void *)result[16];
    uint64_t v27 = *(void *)&result[15] + 2 * (*(void *)&result[13] * a2 / v17);
    uint64_t v28 = (float32x2_t *)result[19];
    uint64_t v29 = (void *)result[7];
    uint64_t v30 = (uint64_t *)result[8];
    uint64_t v31 = (uint64_t *)result[17];
    uint64_t v32 = *v30;
    uint64_t v33 = v30[1];
    uint64_t v406 = v30[2];
    uint64_t v34 = *v31;
    uint64_t v35 = v31[1];
    uint64_t v408 = v31[2];
    uint64_t v409 = v26[2];
    uint64_t v410 = v29[2];
    LODWORD(v31) = v28[17].u16[2];
    LODWORD(v30) = v28[17].u16[3];
    a3.f32[0] = (float)v31;
    float v477 = (float)v31;
    *(short float *)a3.i16 = (short float)v31;
    unsigned int v36 = v28[18].u16[0];
    float v474 = v28[5].f32[1];
    LODWORD(v31) = v28[18].u16[1];
    float v40 = (float)v30;
    short float v41 = (short float)v30;
    LODWORD(v30) = v28[18].u16[2];
    float v42 = (float)v36;
    *(short float *)a10.i16 = (short float)v36;
    unsigned int v43 = v28[18].u16[3];
    float v44 = (float)v31;
    *(short float *)v14.i16 = (short float)v31;
    LODWORD(v31) = v28[19].u16[0];
    _S15 = v28[5].i32[0];
    float v473 = v28[4].f32[1];
    float v448 = (float)v30;
    *(float *)v11.i32 = (float)v43;
    float v478 = (float)v43;
    float v46 = (float)v31;
    *(short float *)v11.i16 = (short float)v30;
    *(short float *)v12.i16 = (short float)v43;
    *(short float *)v13.i16 = (short float)v31;
    unsigned int v47 = v28[15].u8[4];
    if (v47 >= 0x11) {
      unsigned __int8 v48 = 0;
    }
    else {
      unsigned __int8 v48 = 16 - v47;
    }
    if (v27 >= 0) {
      uint64_t v49 = v27;
    }
    else {
      uint64_t v49 = v27 + 1;
    }
    v50 = (char *)&v28[2068] + 4;
    uint64_t v405 = v29[2] + v406 * v23 + 2 * v22;
    v407 = (unsigned char *)(v409 + v408 * v27 + *(void *)&v25);
    a4.f32[0] = 8191.0 / (float)v28[16].u32[0];
    _S26 = a4.f32[0] * v28->f32[0];
    uint64_t v52 = *v26 + v34 * v27;
    result = (float32x2_t *)((char *)v28 + 164);
    float16x8_t v53 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)a3.f32, 0);
    a5.i32[1] = v28[1].i32[0];
    a5.i32[0] = v28[3].i32[1];
    *(float32x2_t *)a3.f32 = vmul_n_f32(*(float32x2_t *)a5.f32, a4.f32[0]);
    unint64_t v472 = a3.i64[0];
    float16x8_t v54 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    *(float32x2_t *)a4.f32 = vmul_n_f32(v28[2], a4.f32[0]);
    unint64_t v471 = a4.i64[0];
    float16x8_t v55 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    float16x8_t v56 = vmulq_n_f16(v54, -v41);
    __asm { FMOV            V1.2S, #0.25 }
    v37.i32[1] = v28[7].i32[1];
    v37.i32[0] = v28[6].i32[0];
    *(float32x2_t *)a5.f32 = vmul_f32(v37, _D1);
    unint64_t v470 = a5.i64[0];
    float32x4_t v62 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v463 = (float16x8_t)v62;
    v38.i32[1] = v28[8].i32[0];
    v38.i32[0] = v28[6].i32[1];
    *(float32x2_t *)v62.f32 = vmul_f32(v38, _D1);
    uint64_t v469 = v62.i64[0];
    int32x4_t v63 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v62), 0);
    v39.i32[1] = v28[8].i32[1];
    v39.i32[0] = v28[7].i32[0];
    *(float32x2_t *)v15.f32 = vmul_f32(v39, _D1);
    int32x4_t v468 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v15), 0);
    int16x8_t v64 = vdupq_lane_s16(v14, 0);
    int16x8_t v65 = vdupq_lane_s16(v11, 0);
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(a10, 0);
    float16x8_t v459 = (float16x8_t)vdupq_lane_s16(v12, 0);
    float16x8_t v460 = (float16x8_t)v65;
    float16x8_t v67 = vmulq_n_f16(v55, -v41);
    float16x8_t v457 = (float16x8_t)vdupq_lane_s16(v13, 0);
    v68 = (unsigned char *)(v26[1] + v35 * (v49 >> 1) + *(void *)&v25);
    v69 = (int8x8_t *)(v52 + *(void *)&v25);
    if (v23 >= 0) {
      uint64_t v70 = v23;
    }
    else {
      uint64_t v70 = v23 + 1;
    }
    uint16x8_t v71 = (uint16x8_t)vdupq_n_s16(-v48);
    v72 = (char *)&v28[4116] + 4;
    uint64_t v73 = v29[1] + v33 * (v70 >> 1) + 2 * v22;
    v74 = (uint16x8_t *)(*v29 + v32 * v23 + 2 * v22);
    unsigned __int8 v75 = v48;
    size_t v414 = v21 & 0xFFFFFFF8;
    LODWORD(_Q14) = v28[10].i32[1];
    _S16 = v28[14].f32[0];
    __asm { FCVT            H8, S26 }
    short float v413 = _H8;
    _S5 = v28[4].i32[1];
    __asm { FCVT            H8, S5 }
    float v467 = v28[5].f32[0];
    __asm { FCVT            H5, S15 }
    short float v438 = *(short float *)&_S5;
    int16x8_t v80 = v64;
    _S5 = v28[5].i32[1];
    __asm { FCVT            H5, S5 }
    short float v482 = *(short float *)&_S5;
    float16x8_t v82 = (float16x8_t)v63;
    float v450 = v28[13].f32[1];
    __asm
    {
      FCVT            H1, S1
      FCVT            H5, S16
    }
    float v444 = v28[14].f32[1];
    __asm { FCVT            H2, S2 }
    float v441 = v28[15].f32[0];
    __asm { FCVT            H3, S3 }
    float v455 = v28[9].f32[0];
    __asm { FCVT            H6, S21 }
    short float v433 = _H6;
    float v454 = v28[9].f32[1];
    __asm { FCVT            H6, S22 }
    float16x8_t v88 = (float16x8_t)v80;
    float v453 = v28[10].f32[0];
    __asm { FCVT            H10, S10 }
    float v451 = *(float *)&_Q14;
    __asm { FCVT            H14, S14 }
    short float v430 = *(short float *)&_Q14;
    float v449 = v28[11].f32[0];
    __asm { FCVT            H14, S19 }
    float16x8_t v90 = v54;
    float v91 = v477;
    short float v429 = *(short float *)&_Q14;
    float v446 = v28[11].f32[1];
    __asm { FCVT            H14, S17 }
    short float v428 = *(short float *)&_Q14;
    float v443 = v28[12].f32[0];
    __asm { FCVT            H14, S25 }
    long long v427 = _Q14;
    float v440 = v28[12].f32[1];
    __asm { FCVT            H14, S18 }
    long long v481 = _Q14;
    float v452 = v28[13].f32[0];
    __asm { FCVT            H12, S12 }
    float16x8_t v93 = (float16x8_t)v468;
    uint64_t v94 = v15.i64[0];
    float16x8_t v95 = 0uLL;
    v96.i64[0] = 0x9000900090009000;
    v96.i64[1] = 0x9000900090009000;
    float16x8_t v458 = v67;
    uint16x8_t v483 = v71;
    short float v437 = _H1;
    short float v434 = _H3;
    short float v435 = _H2;
    unint64_t v420 = v24;
    size_t v421 = v21;
    uint64_t v418 = v33;
    uint64_t v419 = v32;
    uint64_t v416 = v35;
    uint64_t v417 = v34;
    float16x8_t v465 = v55;
    float16x8_t v466 = v90;
    float16x8_t v464 = v53;
    float16x8_t v462 = v66;
    float v461 = _S26;
    int v456 = v21 - 7;
    unsigned __int8 v415 = v48;
    float v476 = v40;
    float16x8_t v447 = (float16x8_t)v80;
    float16x8_t v445 = v56;
    float16x8_t v442 = v82;
    short float v439 = _H8;
    short float v436 = *(short float *)&_S5;
    short float v431 = _H10;
    short float v432 = _H6;
    short float v426 = _H12;
    float v411 = v46;
    float v412 = v44;
    do
    {
      v97 = &v74->i8[v32];
      v98 = (char *)v69 + v34;
      if ((int)v21 < 8)
      {
        size_t v266 = 0;
        v265 = v68;
        v102 = (int8x8_t *)((char *)v69 + v34);
        v101 = (uint16x8_t *)v73;
        v100 = (uint16x8_t *)((char *)v74 + v32);
      }
      else
      {
        uint64_t v424 = v73;
        unint64_t v425 = v20;
        uint64_t v99 = 0;
        v422 = &v74->i8[v32];
        v423 = (char *)v69 + v34;
        v100 = (uint16x8_t *)((char *)v74 + v32);
        v101 = (uint16x8_t *)v73;
        v102 = (int8x8_t *)((char *)v69 + v34);
        v475 = v68;
        do
        {
          v480 = v69;
          uint16x8_t v103 = *v101++;
          float16x8_t v104 = vcvtq_f16_u16(vshlq_u16(v103, v71));
          int8x16_t v105 = (int8x16_t)vmlaq_f16(v56, v90, v104);
          int8x16_t v106 = (int8x16_t)vmlaq_f16(v458, v55, v104);
          v104.i64[0] = vextq_s8(v105, v105, 8uLL).u64[0];
          *(int16x4_t *)v107.i8 = vuzp1_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v104.i8);
          *(int16x4_t *)v104.i8 = vuzp2_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v104.i8);
          v104.i64[1] = v104.i64[0];
          v107.i64[1] = v104.i64[0];
          v105.i64[0] = vextq_s8(v106, v106, 8uLL).u64[0];
          float16x8_t v108 = (float16x8_t)vzip1q_s16((int16x8_t)v104, (int16x8_t)v104);
          *(float16x4_t *)v104.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v105.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v105.i8));
          v104.i64[1] = v104.i64[0];
          float16x8_t v109 = (float16x8_t)vzip1q_s16(v107, v107);
          v479 = v74 + 1;
          uint16x8_t v110 = *v100++;
          float16x8_t v111 = (float16x8_t)vzip1q_s16((int16x8_t)v104, (int16x8_t)v104);
          float16x8_t v112 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(*v74, v71)), v53);
          float16x8_t v113 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v110, v71)), v53);
          float16x8_t v114 = vmlaq_n_f16(v108, v112, v413);
          float16x8_t v115 = vmlaq_n_f16(v108, v113, v413);
          float16x8_t v116 = vmlaq_n_f16(v111, v112, v413);
          float16x8_t v117 = vmlaq_n_f16(v111, v113, v413);
          float16x8_t v118 = vmlaq_n_f16(v109, v112, v413);
          float16x8_t v119 = vmlaq_n_f16(v109, v113, v413);
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, v95), v96));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          uint64_t v123 = v122.u32[1];
          uint64_t v124 = v122.u32[3];
          v125.i16[0] = result->i16[v122.u32[0]];
          uint64_t v126 = v121.u32[1];
          uint64_t v127 = v121.u32[3];
          v128 = (__int16 *)result + v122.u32[2];
          uint64_t v129 = v121.u32[2];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, v95), v96));
          v131 = (__int16 *)result + v121.u32[0];
          float16x8_t v132 = (float16x8_t)vmovl_high_u16(v130);
          v133.i64[0] = v132.u32[2];
          v133.i64[1] = v132.u32[3];
          float16x8_t v134 = v133;
          v133.i64[0] = v132.u32[0];
          v133.i64[1] = v132.u32[1];
          float16x8_t v135 = v133;
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v130.i8);
          v133.i64[0] = v136.u32[2];
          v137.i64[1] = v136.u32[3];
          v138 = (__int16 *)result + v129;
          uint64_t v139 = v136.u32[1];
          v132.i16[0] = result->i16[v136.u32[0]];
          v140 = (__int16 *)result + v134.i64[0];
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, v95), v96));
          uint32x4_t v142 = vmovl_high_u16(v141);
          v143 = (__int16 *)result + v124;
          uint32x4_t v144 = vmovl_u16(*(uint16x4_t *)v141.i8);
          v145 = (__int16 *)result + v126;
          v134.i16[0] = result->i16[v144.u32[0]];
          v146 = (__int16 *)result + v127;
          v147 = (__int16 *)result + v144.u32[1];
          v125.i16[1] = result->i16[v123];
          v148 = (__int16 *)result + v144.u32[2];
          v149 = (__int16 *)result + v144.u32[3];
          v150 = (__int16 *)result + v142.u32[0];
          v151 = (__int16 *)result + v142.u32[1];
          v152 = (__int16 *)result + v142.u32[2];
          v153 = (__int16 *)result + v142.u32[3];
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, v95), v96));
          uint32x4_t v155 = vmovl_high_u16(v154);
          uint32x4_t v156 = vmovl_u16(*(uint16x4_t *)v154.i8);
          v157 = (__int16 *)result + v134.i64[1];
          v134.i16[1] = *v147;
          v115.i16[0] = result->i16[v156.u32[0]];
          v125.i16[2] = *v128;
          v132.i16[1] = result->i16[v139];
          v134.i16[2] = *v148;
          v115.i16[1] = result->i16[v156.u32[1]];
          v125.i16[3] = *v143;
          v158 = (__int16 *)result + v155.u32[1];
          v159 = (__int16 *)result + v155.u32[2];
          v160 = (__int16 *)result + v155.u32[3];
          v132.i16[2] = result->i16[v133.i64[0]];
          v115.i16[2] = result->i16[v156.u32[2]];
          v115.i16[3] = result->i16[v156.u32[3]];
          v134.i16[3] = *v149;
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, v95), v96));
          float16x8_t v162 = (float16x8_t)vmovl_high_u16(v161);
          v115.i16[4] = result->i16[v155.u32[0]];
          v133.i64[0] = v162.u32[2];
          v133.i64[1] = v162.u32[3];
          float16x8_t v163 = v133;
          v133.i64[0] = v162.u32[0];
          v133.i64[1] = v162.u32[1];
          uint32x4_t v164 = vmovl_u16(*(uint16x4_t *)v161.i8);
          v125.i16[4] = *v131;
          v132.i16[3] = result->i16[v137.i64[1]];
          v162.i16[0] = result->i16[v164.u32[0]];
          v134.i16[4] = *v150;
          v115.i16[5] = *v158;
          v125.i16[5] = *v145;
          v132.i16[4] = result->i16[v135.i64[0]];
          v165 = (__int16 *)result + v163.i64[0];
          v166 = (__int16 *)result + v163.i64[1];
          v162.i16[1] = result->i16[v164.u32[1]];
          v134.i16[5] = *v151;
          v162.i16[2] = result->i16[v164.u32[2]];
          v162.i16[3] = result->i16[v164.u32[3]];
          v115.i16[6] = *v159;
          v162.i16[4] = result->i16[v133.i64[0]];
          v162.i16[5] = result->i16[v133.i64[1]];
          v125.i16[6] = *v138;
          uint16x8_t v167 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, v95), v96));
          float16x8_t v168 = (float16x8_t)vmovl_high_u16(v167);
          v132.i16[5] = result->i16[v135.i64[1]];
          v133.i64[0] = v168.u32[2];
          v133.i64[1] = v168.u32[3];
          float16x8_t v169 = v133;
          v133.i64[0] = v168.u32[0];
          v133.i64[1] = v168.u32[1];
          uint32x4_t v170 = vmovl_u16(*(uint16x4_t *)v167.i8);
          v134.i16[6] = *v152;
          v115.i16[7] = *v160;
          v168.i16[0] = result->i16[v170.u32[0]];
          v162.i16[6] = *v165;
          v125.i16[7] = *v146;
          v132.i16[6] = *v140;
          v134.i16[7] = *v153;
          v168.i16[1] = result->i16[v170.u32[1]];
          v132.i16[7] = *v157;
          v168.i16[2] = result->i16[v170.u32[2]];
          v168.i16[3] = result->i16[v170.u32[3]];
          v162.i16[7] = *v166;
          v168.i16[4] = result->i16[v133.i64[0]];
          v168.i16[5] = result->i16[v133.i64[1]];
          v168.i16[6] = result->i16[v169.i64[0]];
          v168.i16[7] = result->i16[v169.i64[1]];
          uint16x8_t v171 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v437), v132, v436), v134, v435), vmaxq_f16(vmaxq_f16(v125, v132), v134), v434), v95), v96));
          uint32x4_t v172 = vmovl_high_u16(v171);
          uint32x4_t v173 = vmovl_u16(*(uint16x4_t *)v171.i8);
          uint64_t v174 = v173.u32[1];
          uint64_t v175 = v173.u32[0];
          v133.i64[0] = v172.u32[2];
          v133.i64[1] = v172.u32[3];
          uint64_t v176 = v173.u32[3];
          uint64_t v177 = v172.u32[1];
          uint64_t v178 = v173.u32[2];
          uint64_t v179 = v172.u32[0];
          uint16x8_t v180 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v115, v437), v162, v436), v168, v435), vmaxq_f16(vmaxq_f16(v115, v162), v168), v434), v95), v96));
          float16x8_t v181 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v180.i8);
          v137.i16[0] = *(_WORD *)&v50[2 * v175];
          v182 = (__int16 *)&v50[2 * v133.i64[1]];
          v137.i16[1] = *(_WORD *)&v50[2 * v174];
          uint32x4_t v183 = vmovl_high_u16(v180);
          v137.i16[2] = *(_WORD *)&v50[2 * v178];
          uint64_t v184 = v183.u32[1];
          v137.i16[3] = *(_WORD *)&v50[2 * v176];
          v133.i64[1] = v183.u32[3];
          v181.i16[0] = *(_WORD *)&v50[2 * v181.u32[0]];
          v137.i16[4] = *(_WORD *)&v50[2 * v179];
          v137.i16[5] = *(_WORD *)&v50[2 * v177];
          v137.i16[6] = *(_WORD *)&v50[2 * v133.i64[0]];
          v181.i16[1] = *(_WORD *)&v50[2 * v181.u32[1]];
          v181.i16[2] = *(_WORD *)&v50[2 * v181.u32[2]];
          v137.i16[7] = *v182;
          v185 = (__int16 *)&v50[2 * v183.u32[2]];
          v181.i16[3] = *(_WORD *)&v50[2 * v181.u32[3]];
          v181.i16[4] = *(_WORD *)&v50[2 * v183.u32[0]];
          float16x8_t v186 = vmulq_f16(v125, v137);
          v181.i16[5] = *(_WORD *)&v50[2 * v184];
          v181.i16[6] = *v185;
          float16x8_t v187 = vmulq_f16(v132, v137);
          v181.i16[7] = *(_WORD *)&v50[2 * v133.i64[1]];
          float16x8_t v188 = v90;
          float16x8_t v189 = vmulq_f16(v115, v181);
          v190.i64[0] = 0x9000900090009000;
          v190.i64[1] = 0x9000900090009000;
          float16x8_t v191 = vmulq_f16(v162, v181);
          float16x8_t v192 = v88;
          float16x8_t v193 = vmulq_f16(v168, v181);
          float16x8_t v194 = vmulq_f16(v134, v137);
          float16x8_t v195 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v186, v433), v187, v432), v194, v431);
          float16x8_t v196 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v186, v430), v187, v429), v194, v428);
          float16x8_t v197 = vmlaq_n_f16(vmulq_n_f16(v194, v426), v187, *(short float *)&v481);
          float16x8_t v198 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v189, v433), v191, v432), v193, v431);
          float16x8_t v199 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v189, v430), v191, v429), v193, v428);
          v119.i16[7] = HIWORD(v427);
          float16x8_t v200 = vmulq_n_f16(v193, v426);
          float16x8_t v88 = v192;
          v125.i16[7] = HIWORD(v481);
          float16x8_t v201 = vmlaq_n_f16(vmlaq_n_f16(v200, v191, *(short float *)&v481), v189, *(short float *)&v427);
          float16x8_t v202 = vmlaq_n_f16(v197, v186, *(short float *)&v427);
          uint16x8_t v203 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v195, v95), v190));
          uint32x4_t v204 = vmovl_high_u16(v203);
          v187.i64[0] = v204.u32[2];
          uint32x4_t v205 = vmovl_u16(*(uint16x4_t *)v203.i8);
          uint64_t v206 = v205.u32[1];
          uint64_t v207 = v205.u32[0];
          uint64_t v208 = v205.u32[3];
          uint64_t v209 = v205.u32[2];
          uint64_t v210 = v204.u32[1];
          uint64_t v211 = v204.u32[0];
          uint16x8_t v212 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v196, v95), v190));
          float16x8_t v213 = (float16x8_t)vmovl_high_u16(v212);
          uint64_t v214 = v204.u32[3];
          v133.i64[0] = v213.u32[2];
          v133.i64[1] = v213.u32[3];
          float16x8_t v215 = v133;
          v133.i64[0] = v213.u32[0];
          v133.i64[1] = v213.u32[1];
          float16x8_t v216 = v133;
          uint32x4_t v217 = vmovl_u16(*(uint16x4_t *)v212.i8);
          uint64_t v218 = v187.i64[0];
          uint64_t v219 = v217.u32[1];
          uint64_t v220 = v217.u32[3];
          v213.i16[0] = *(_WORD *)&v72[2 * v207];
          uint64_t v221 = v217.u32[2];
          v96.i64[0] = 0x9000900090009000;
          v96.i64[1] = 0x9000900090009000;
          v222 = (__int16 *)&v72[2 * v209];
          uint64_t v223 = v215.i64[1];
          uint64_t v224 = v215.i64[0];
          v125.i16[0] = *(_WORD *)&v72[2 * v217.u32[0]];
          uint16x8_t v225 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v202, v95), v96));
          uint32x4_t v226 = vmovl_high_u16(v225);
          v133.i64[0] = v226.u32[2];
          v133.i64[1] = v226.u32[3];
          float16x8_t v227 = v133;
          v133.i64[0] = v226.u32[0];
          v133.i64[1] = v226.u32[1];
          float16x8_t v228 = v133;
          v229 = (__int16 *)&v72[2 * v221];
          uint32x4_t v230 = vmovl_u16(*(uint16x4_t *)v225.i8);
          v133.i64[0] = v230.u32[2];
          v133.i64[1] = v230.u32[3];
          float16x8_t v231 = v133;
          v133.i64[1] = v230.u32[1];
          v232 = (__int16 *)&v72[2 * v206];
          v119.i16[0] = *(_WORD *)&v72[2 * v230.u32[0]];
          v233 = (__int16 *)&v72[2 * v208];
          uint64_t v234 = v228.i64[1];
          uint64_t v235 = v228.i64[0];
          uint64_t v236 = v227.i64[1];
          uint64_t v237 = v227.i64[0];
          uint16x8_t v238 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v198, v95), v96));
          uint32x4_t v239 = vmovl_high_u16(v238);
          uint32x4_t v240 = vmovl_u16(*(uint16x4_t *)v238.i8);
          v213.i16[1] = *v232;
          v125.i16[1] = *(_WORD *)&v72[2 * v219];
          v198.i16[0] = *(_WORD *)&v72[2 * v240.u32[0]];
          v119.i16[1] = *(_WORD *)&v72[2 * v133.i64[1]];
          v213.i16[2] = *v222;
          v198.i16[1] = *(_WORD *)&v72[2 * v240.u32[1]];
          v125.i16[2] = *v229;
          v241 = (__int16 *)&v72[2 * v240.u32[3]];
          v198.i16[2] = *(_WORD *)&v72[2 * v240.u32[2]];
          v119.i16[2] = *(_WORD *)&v72[2 * v231.i64[0]];
          uint16x8_t v242 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v199, v95), v96));
          uint32x4_t v243 = vmovl_u16(*(uint16x4_t *)v242.i8);
          v198.i16[3] = *v241;
          v199.i16[7] = (unint64_t)v243.u32[1] >> 48;
          v213.i16[3] = *v233;
          v199.i16[0] = *(_WORD *)&v72[2 * v243.u32[0]];
          v125.i16[3] = *(_WORD *)&v72[2 * v220];
          v119.i16[3] = *(_WORD *)&v72[2 * v231.i64[1]];
          v198.i16[4] = *(_WORD *)&v72[2 * v239.u32[0]];
          v133.i64[1] = v239.u32[3];
          v213.i16[4] = *(_WORD *)&v72[2 * v211];
          uint32x4_t v244 = vmovl_high_u16(v242);
          v125.i16[4] = *(_WORD *)&v72[2 * v216.i64[0]];
          v199.i16[1] = *(_WORD *)&v72[2 * v243.u32[1]];
          v119.i16[4] = *(_WORD *)&v72[2 * v235];
          v198.i16[5] = *(_WORD *)&v72[2 * v239.u32[1]];
          v199.i16[2] = *(_WORD *)&v72[2 * v243.u32[2]];
          v213.i16[5] = *(_WORD *)&v72[2 * v210];
          v199.i16[3] = *(_WORD *)&v72[2 * v243.u32[3]];
          v125.i16[5] = *(_WORD *)&v72[2 * v216.i64[1]];
          v199.i16[4] = *(_WORD *)&v72[2 * v244.u32[0]];
          v119.i16[5] = *(_WORD *)&v72[2 * v234];
          v68 = v475;
          v198.i16[6] = *(_WORD *)&v72[2 * v239.u32[2]];
          v199.i16[5] = *(_WORD *)&v72[2 * v244.u32[1]];
          v213.i16[6] = *(_WORD *)&v72[2 * v218];
          v125.i16[6] = *(_WORD *)&v72[2 * v224];
          v74 = v479;
          v199.i16[6] = *(_WORD *)&v72[2 * v244.u32[2]];
          v245 = (__int16 *)&v72[2 * v244.u32[3]];
          v119.i16[6] = *(_WORD *)&v72[2 * v237];
          uint16x8_t v246 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v201, v95), v96));
          uint32x4_t v247 = vmovl_high_u16(v246);
          int16x8_t v248 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v246.i8);
          float16x8_t v249 = (float16x8_t)vuzp1q_s16((int16x8_t)v198, (int16x8_t)v199);
          v198.i16[7] = *(_WORD *)&v72[2 * v133.i64[1]];
          v133.i64[0] = v247.u32[0];
          v133.i64[1] = v247.u32[1];
          float16x8_t v250 = v133;
          v133.i64[1] = v248.u32[3];
          v248.i16[7] = (unint64_t)v248.u32[3] >> 48;
          v248.i16[0] = *(_WORD *)&v72[2 * v248.u32[0]];
          uint64_t v251 = v250.i64[1];
          v199.i16[7] = *v245;
          v248.i16[1] = *(_WORD *)&v72[2 * v248.u32[1]];
          uint64_t v252 = v250.i64[0];
          float16x8_t v253 = (float16x8_t)vuzp1q_s16((int16x8_t)v213, (int16x8_t)v125);
          v213.i16[7] = *(_WORD *)&v72[2 * v214];
          v254 = (__int16 *)&v72[2 * v252];
          v248.i16[2] = *(_WORD *)&v72[2 * v248.u32[2]];
          uint64_t v255 = v247.u32[3];
          v248.i16[3] = *(_WORD *)&v72[2 * v133.i64[1]];
          v125.i16[7] = *(_WORD *)&v72[2 * v223];
          v256 = (__int16 *)&v72[2 * v247.u32[2]];
          v248.i16[4] = *v254;
          float16x8_t v257 = vmlaq_n_f16(vmlaq_n_f16(v66, v213, v439), v125, v438);
          float16x8_t v258 = vmlaq_n_f16(vmlaq_n_f16(v66, v198, v439), v199, v438);
          float16x8_t v259 = (float16x8_t)vuzp2q_s16((int16x8_t)v198, (int16x8_t)v199);
          float16x8_t v260 = v119;
          v248.i16[5] = *(_WORD *)&v72[2 * v251];
          v248.i16[6] = *v256;
          v260.i16[7] = *(_WORD *)&v72[2 * v236];
          float16x8_t v261 = vaddq_f16(v253, (float16x8_t)vuzp2q_s16((int16x8_t)v213, (int16x8_t)v125));
          float16x8_t v262 = (float16x8_t)v248;
          v262.i16[7] = *(_WORD *)&v72[2 * v255];
          int8x8_t *v480 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v257, v260, v482), v66), v460)));
          v69 = v480 + 1;
          int16x8_t v263 = (int16x8_t)vaddq_f16(vaddq_f16(v261, v249), v259);
          float16x8_t v90 = v188;
          *v102++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v258, v262, v482), v66), v460)));
          float16x8_t v264 = (float16x8_t)vtrn2q_s16((int16x8_t)v262, (int16x8_t)v262);
          uint16x8_t v71 = v483;
          *(int8x8_t *)&v475[v99] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v192, v463, (float16x8_t)vzip1q_s16(v263, v263)), v82, (float16x8_t)vzip2q_s16(v263, v263)), v93, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v119, (int16x8_t)v119), (float16x8_t)vtrn2q_s16((int16x8_t)v260,
                                                                                      (int16x8_t)v260)),
                                                                     (float16x8_t)vtrn1q_s16(v248, v248)),
                                                                   v264)),
                                                               v459),
                                                             v457)));
          v99 += 8;
        }
        while ((int)v99 < v456);
        v265 = &v475[v99];
        size_t v266 = v414;
        unint64_t v24 = v420;
        size_t v21 = v421;
        uint64_t v73 = v424;
        unint64_t v20 = v425;
        uint64_t v33 = v418;
        uint64_t v32 = v419;
        uint64_t v35 = v416;
        uint64_t v34 = v417;
        unsigned __int8 v75 = v415;
        v97 = v422;
        v98 = v423;
        float v46 = v411;
        float v44 = v412;
        float v40 = v476;
        float v91 = v477;
      }
      for (; v21 > v266; float16x8_t v95 = 0uLL)
      {
        float v267 = (float)(v101->u16[1] >> v75) - v40;
        float v268 = *((float *)&v472 + 1) * v267;
        float v269 = _S26 * (float)((float)(v74->u16[0] >> v75) - v91);
        float v270 = (float)(*((float *)&v472 + 1) * v267) + v269;
        float v271 = 8191.0;
        if (v270 <= 8191.0)
        {
          float v271 = (float)(*((float *)&v472 + 1) * v267) + v269;
          if (v270 < 0.0) {
            float v271 = 0.0;
          }
        }
        float v272 = (float)(v101->u16[0] >> v75) - v40;
        float v273 = (float)(*((float *)&v471 + 1) * v267) + (float)(v272 * *(float *)&v471);
        float v274 = 8191.0;
        if ((float)(v269 + v273) <= 8191.0)
        {
          float v274 = v269 + v273;
          if ((float)(v269 + v273) < 0.0) {
            float v274 = 0.0;
          }
        }
        float v275 = *(float *)&v472 * v272;
        float v276 = v275 + v269;
        float v277 = 8191.0;
        if (v276 <= 8191.0)
        {
          float v277 = v276;
          if (v276 < 0.0) {
            float v277 = 0.0;
          }
        }
        float v278 = _S26 * (float)((float)(v74->u16[1] >> v75) - v91);
        float v279 = 8191.0;
        if ((float)(v268 + v278) <= 8191.0)
        {
          float v279 = v268 + v278;
          if ((float)(v268 + v278) < 0.0) {
            float v279 = 0.0;
          }
        }
        float v280 = 8191.0;
        if ((float)(v273 + v278) <= 8191.0)
        {
          float v280 = v273 + v278;
          if ((float)(v273 + v278) < 0.0) {
            float v280 = 0.0;
          }
        }
        float v281 = v275 + v278;
        float v282 = 8191.0;
        if (v281 <= 8191.0)
        {
          float v282 = v281;
          if (v281 < 0.0) {
            float v282 = 0.0;
          }
        }
        float v283 = _S26 * (float)((float)(v100->u16[0] >> v75) - v91);
        float v284 = 8191.0;
        if ((float)(v268 + v283) <= 8191.0)
        {
          float v284 = v268 + v283;
          if ((float)(v268 + v283) < 0.0) {
            float v284 = 0.0;
          }
        }
        float v285 = 8191.0;
        if ((float)(v273 + v283) <= 8191.0)
        {
          float v285 = v273 + v283;
          if ((float)(v273 + v283) < 0.0) {
            float v285 = 0.0;
          }
        }
        float v286 = v275 + v283;
        float v287 = 8191.0;
        if (v286 <= 8191.0)
        {
          float v287 = v286;
          if (v286 < 0.0) {
            float v287 = 0.0;
          }
        }
        float v288 = _S26 * (float)((float)(v100->u16[1] >> v75) - v91);
        float v289 = v268 + v288;
        BOOL v290 = (float)(v268 + v288) <= 8191.0;
        float v291 = 8191.0;
        if (v290)
        {
          float v291 = v289;
          if (v289 < 0.0) {
            float v291 = 0.0;
          }
        }
        float v292 = v273 + v288;
        BOOL v290 = (float)(v273 + v288) <= 8191.0;
        float v293 = 8191.0;
        if (v290)
        {
          float v293 = v292;
          if (v292 < 0.0) {
            float v293 = 0.0;
          }
        }
        float v294 = v275 + v288;
        float v295 = 8191.0;
        if (v294 <= 8191.0)
        {
          float v295 = v294;
          if (v294 < 0.0) {
            float v295 = 0.0;
          }
        }
        _H2 = result->i16[llroundf(fminf(fmaxf(v271, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H1 = result->i16[llroundf(fminf(fmaxf(v274, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H3 = result->i16[llroundf(fminf(fmaxf(v277, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H12 = result->i16[llroundf(fminf(fmaxf(v279, 0.0), 8191.0))];
        _H22 = result->i16[llroundf(fminf(fmaxf(v280, 0.0), 8191.0))];
        _H15 = result->i16[llroundf(fminf(fmaxf(v282, 0.0), 8191.0))];
        _H18 = result->i16[llroundf(fminf(fmaxf(v284, 0.0), 8191.0))];
        _H19 = result->i16[llroundf(fminf(fmaxf(v285, 0.0), 8191.0))];
        _H8 = result->i16[llroundf(fminf(fmaxf(v287, 0.0), 8191.0))];
        _H5 = result->i16[llroundf(fminf(fmaxf(v291, 0.0), 8191.0))];
        _H6 = result->i16[llroundf(fminf(fmaxf(v293, 0.0), 8191.0))];
        _H0 = result->i16[llroundf(fminf(fmaxf(v295, 0.0), 8191.0))];
        float v311 = (float)((float)((float)(_S16 * _S1) + (float)(v450 * _S2)) + (float)(v444 * _S3))
             + (float)(v441 * fmaxf(_S2, fmaxf(_S1, _S3)));
        float v312 = 8191.0;
        if (v311 <= 8191.0)
        {
          float v312 = v311;
          if (v311 < 0.0) {
            float v312 = 0.0;
          }
        }
        float v313 = v46;
        float v314 = v44;
        __asm
        {
          FCVT            S10, H12
          FCVT            S12, H22
          FCVT            S14, H15
        }
        _H22 = *(_WORD *)&v50[2 * llroundf(v312)];
        float v319 = (float)((float)((float)(_S16 * _S12) + (float)(v450 * _S10)) + (float)(v444 * _S14))
             + (float)(v441 * fmaxf(_S10, fmaxf(_S12, _S14)));
        float v320 = 8191.0;
        if (v319 <= 8191.0)
        {
          float v320 = v319;
          if (v319 < 0.0) {
            float v320 = 0.0;
          }
        }
        __asm
        {
          FCVT            S24, H18
          FCVT            S27, H19
          FCVT            S23, H8
        }
        _H29 = *(_WORD *)&v50[2 * llroundf(v320)];
        float v325 = (float)((float)((float)(_S16 * _S27) + (float)(v450 * _S24)) + (float)(v444 * _S23))
             + (float)(v441 * fmaxf(_S24, fmaxf(_S27, _S23)));
        float v326 = 8191.0;
        if (v325 <= 8191.0)
        {
          float v326 = v325;
          if (v325 < 0.0) {
            float v326 = 0.0;
          }
        }
        __asm
        {
          FCVT            S8, H5
          FCVT            S15, H6
          FCVT            S21, H0
          FCVT            S0, H22
        }
        float v331 = _S2 * _S0;
        float v332 = _S1 * _S0;
        float v333 = _S3 * _S0;
        __asm { FCVT            S0, H29 }
        float v335 = _S10 * _S0;
        float v336 = _S12 * _S0;
        float v337 = _S14 * _S0;
        LOWORD(_S0) = *(_WORD *)&v50[2 * llroundf(v326)];
        __asm { FCVT            S1, H0 }
        float v339 = _S24 * _S1;
        float v340 = _S27 * _S1;
        float v341 = _S23 * _S1;
        float v342 = (float)((float)((float)(_S16 * _S15) + (float)(v450 * _S8)) + (float)(v444 * _S21))
             + (float)(v441 * fmaxf(_S8, fmaxf(_S15, _S21)));
        float v343 = 8191.0;
        if (v342 <= 8191.0)
        {
          float v343 = v342;
          if (v342 < 0.0) {
            float v343 = 0.0;
          }
        }
        _H7 = *(_WORD *)&v50[2 * llroundf(v343)];
        __asm { FCVT            S7, H7 }
        _S23 = _S8 * _S7;
        float v347 = _S15 * _S7;
        float v348 = _S21 * _S7;
        float v349 = (float)((float)(v454 * v332) + (float)(v331 * v455)) + (float)(v333 * v453);
        float v350 = (float)((float)(v449 * v332) + (float)(v331 * v451)) + (float)(v333 * v446);
        _S18 = (float)((float)(v440 * v332) + (float)(v331 * v443)) + (float)(v333 * v452);
        _S19 = (float)((float)(v454 * v336) + (float)(v335 * v455)) + (float)(v337 * v453);
        _S22 = (float)((float)(v449 * v336) + (float)(v335 * v451)) + (float)(v337 * v446);
        _S6 = (float)((float)(v440 * v336) + (float)(v335 * v443)) + (float)(v337 * v452);
        float v355 = (float)((float)(v454 * v340) + (float)(v339 * v455)) + (float)(v341 * v453);
        float v356 = (float)((float)(v449 * v340) + (float)(v339 * v451)) + (float)(v341 * v446);
        float v357 = (float)((float)(v440 * v340) + (float)(v339 * v443)) + (float)(v341 * v452);
        float v358 = (float)((float)(v454 * v347) + (float)(_S23 * v455)) + (float)(v348 * v453);
        float v359 = (float)((float)(v449 * v347) + (float)(_S23 * v451)) + (float)(v348 * v446);
        _S7 = (float)((float)(v440 * v347) + (float)(_S23 * v443)) + (float)(v348 * v452);
        _H0 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v349, 0.0), 8191.0))];
        __asm { FCVT            S3, H0 }
        _H0 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v350, 0.0), 8191.0))];
        __asm { FCVT            S1, H0 }
        _H0 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0))];
        __asm { FCVT            S2, H0 }
        _H0 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0))];
        __asm { FCVT            S5, H0 }
        _H0 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0))];
        LOWORD(_S6) = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0))];
        __asm
        {
          FCVT            S0, H0
          FCVT            S6, H6
        }
        LOWORD(_S18) = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v355, 0.0), 8191.0))];
        __asm { FCVT            S21, H18 }
        LOWORD(_S18) = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v356, 0.0), 8191.0))];
        __asm { FCVT            S18, H18 }
        LOWORD(_S19) = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v357, 0.0), 8191.0))];
        __asm { FCVT            S19, H19 }
        LOWORD(_S22) = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v358, 0.0), 8191.0))];
        __asm { FCVT            S22, H22 }
        LOWORD(_S23) = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v359, 0.0), 8191.0))];
        LOWORD(_S7) = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0))];
        __asm
        {
          FCVT            S23, H23
          FCVT            S7, H7
        }
        float v378 = (float)((float)((float)(v467 * _S1) + (float)(v473 * _S3)) + (float)(v474 * _S2)) + v42;
        if (v378 < v42) {
          float v379 = v42;
        }
        else {
          float v379 = (float)((float)((float)(v467 * _S1) + (float)(v473 * _S3)) + (float)(v474 * _S2)) + v42;
        }
        BOOL v290 = v378 <= v448;
        float v380 = (float)((float)((float)(v467 * _S0) + (float)(v473 * _S5)) + (float)(v474 * _S6)) + v42;
        if (!v290) {
          float v379 = v448;
        }
        __int8 v381 = llroundf(v379);
        if (v380 < v42) {
          float v382 = v42;
        }
        else {
          float v382 = (float)((float)((float)(v467 * _S0) + (float)(v473 * _S5)) + (float)(v474 * _S6)) + v42;
        }
        BOOL v290 = v380 <= v448;
        float v383 = (float)((float)((float)(v467 * _S18) + (float)(v473 * _S21)) + (float)(v474 * _S19)) + v42;
        if (!v290) {
          float v382 = v448;
        }
        __int8 v384 = llroundf(v382);
        if (v383 < v42) {
          float v385 = v42;
        }
        else {
          float v385 = (float)((float)((float)(v467 * _S18) + (float)(v473 * _S21)) + (float)(v474 * _S19)) + v42;
        }
        BOOL v290 = v383 <= v448;
        float v386 = (float)((float)((float)(v467 * _S23) + (float)(v473 * _S22)) + (float)(v474 * _S7)) + v42;
        if (!v290) {
          float v385 = v448;
        }
        __int8 v387 = llroundf(v385);
        if (v386 < v42) {
          float v388 = v42;
        }
        else {
          float v388 = (float)((float)((float)(v467 * _S23) + (float)(v473 * _S22)) + (float)(v474 * _S7)) + v42;
        }
        if (v386 <= v448) {
          float v389 = v388;
        }
        else {
          float v389 = v448;
        }
        float v390 = (float)((float)(_S3 + _S5) + _S21) + _S22;
        float v391 = (float)((float)(_S1 + _S0) + _S18) + _S23;
        v69->i8[0] = v381;
        v69->i8[1] = v384;
        v102->i8[0] = v387;
        v102->i8[1] = llroundf(v389);
        float v44 = v314;
        float v392 = (float)((float)(_S2 + _S6) + _S19) + _S7;
        float v393 = (float)((float)(v314 + (float)(v390 * *(float *)&v470)) + (float)(v391 * *(float *)&v469))
             + (float)(v392 * *(float *)&v94);
        float v46 = v313;
        float v394 = v313;
        if (v393 <= v313)
        {
          float v394 = (float)((float)(v314 + (float)(v390 * *(float *)&v470)) + (float)(v391 * *(float *)&v469))
               + (float)(v392 * *(float *)&v94);
          if (v393 < v478) {
            float v394 = v478;
          }
        }
        float v395 = (float)((float)(v314 + (float)(v390 * *((float *)&v470 + 1))) + (float)(v391 * *((float *)&v469 + 1)))
             + (float)(v392 * *((float *)&v94 + 1));
        unsigned char *v265 = llroundf(v394);
        float v396 = v313;
        float v91 = v477;
        float16x8_t v90 = v466;
        float16x8_t v56 = v445;
        float16x8_t v82 = v442;
        float16x8_t v88 = v447;
        uint16x8_t v71 = v483;
        v96.i64[0] = 0x9000900090009000;
        v96.i64[1] = 0x9000900090009000;
        if (v395 <= v313)
        {
          float v396 = v395;
          if (v395 < v478) {
            float v396 = v478;
          }
        }
        v266 += 2;
        v101 = (uint16x8_t *)((char *)v101 + 4);
        v74 = (uint16x8_t *)((char *)v74 + 4);
        v100 = (uint16x8_t *)((char *)v100 + 4);
        v265[1] = llroundf(v396);
        v69 = (int8x8_t *)((char *)v69 + 2);
        v102 = (int8x8_t *)((char *)v102 + 2);
        v265 += 2;
        float v40 = v476;
        _S26 = v461;
        float16x8_t v53 = v464;
        float16x8_t v55 = v465;
        float16x8_t v93 = (float16x8_t)v468;
        float16x8_t v66 = v462;
      }
      v74 = (uint16x8_t *)&v97[v32];
      v73 += v33;
      v69 = (int8x8_t *)&v98[v34];
      v68 += v35;
      v20 += 2;
    }
    while (v24 > v20);
    if (v410 && v409)
    {
      uint64_t v397 = 0;
      v398 = v407;
      v399 = (unsigned __int16 *)v405;
      do
      {
        if (v21)
        {
          size_t v400 = v21;
          v401 = v398;
          v402 = v399;
          do
          {
            unsigned int v403 = *v402++;
            *v401++ = llroundf((float)v403 * 0.0038911);
            --v400;
          }
          while (v400);
        }
        v399 = (unsigned __int16 *)((char *)v399 + v406);
        v398 += v408;
        ++v397;
      }
      while (v397 != v24);
    }
    else
    {
      v404 = v407;
      if (v409)
      {
        do
        {
          if (v21) {
            result = (float32x2_t *)memset(v404, 255, v21);
          }
          v404 += v408;
          --v24;
        }
        while (v24);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    uint64_t v13 = *(void *)((char *)result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (void *)result[16];
    uint64_t v17 = result[15] + 2 * (result[13] * a2 / v7);
    uint64_t v18 = result[19];
    uint64_t v19 = (void *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v200 = v19[2];
    uint64_t v25 = v200 + v24 * v13 + 2 * v12;
    uint64_t v26 = *v21;
    uint64_t v27 = v21[1];
    uint64_t v28 = v21[2];
    uint64_t v29 = v16[2];
    uint64_t v30 = (unsigned char *)(v29 + v28 * v17 + v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v32 = (float)LODWORD(a5);
    float v33 = (float)LODWORD(a6);
    float v34 = v31 * *(float *)v18;
    float v225 = v31 * *(float *)(v18 + 16);
    float v226 = v31 * *(float *)(v18 + 8);
    float v35 = v31 * *(float *)(v18 + 20);
    *(float *)&unsigned int v36 = v31 * *(float *)(v18 + 28);
    float v223 = *(float *)&v36;
    float v224 = v35;
    LOWORD(v36) = *(_WORD *)(v18 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 150);
    float v40 = (float)v36;
    float v230 = v40;
    float v219 = *(float *)(v18 + 40);
    float v220 = *(float *)(v18 + 36);
    float v217 = *(float *)(v18 + 48) * 0.25;
    float v218 = *(float *)(v18 + 44);
    float v215 = *(float *)(v18 + 56) * 0.25;
    float v216 = *(float *)(v18 + 52) * 0.25;
    float v213 = *(float *)(v18 + 64) * 0.25;
    float v214 = *(float *)(v18 + 60) * 0.25;
    float v211 = *(float *)(v18 + 68) * 0.25;
    float v212 = *(float *)(v18 + 72);
    float v209 = *(float *)(v18 + 80);
    float v210 = *(float *)(v18 + 76);
    float v207 = *(float *)(v18 + 88);
    float v208 = *(float *)(v18 + 84);
    float v205 = *(float *)(v18 + 96);
    float v206 = *(float *)(v18 + 92);
    float v203 = *(float *)(v18 + 104);
    float v204 = *(float *)(v18 + 100);
    uint64_t v41 = v18 + 164;
    result = (void *)(v18 + 16548);
    uint64_t v42 = v18 + 32932;
    unsigned int v43 = *(unsigned __int8 *)(v18 + 124);
    uint64_t v44 = v16[1];
    v45 = (unsigned char *)(*v16 + v26 * v17 + v15);
    if (v43 >= 0x11) {
      char v46 = 0;
    }
    else {
      char v46 = 16 - v43;
    }
    uint64_t v47 = v44 + v27 * (v17 / 2);
    uint64_t v48 = v19[1];
    uint64_t v49 = (char *)(*v19 + v22 * v13 + 2 * v12);
    uint64_t v50 = v47 + v15;
    uint64_t v51 = v48 + v23 * (v13 / 2) + 2 * v12;
    char v52 = v46;
    float v53 = *(float *)(v18 + 108);
    float v54 = *(float *)(v18 + 112);
    float v55 = *(float *)(v18 + 116);
    float v56 = *(float *)(v18 + 120);
    float v228 = (float)LODWORD(a6);
    float v229 = (float)LODWORD(a5);
    float v227 = v34;
    LOWORD(v40) = *(_WORD *)(v18 + 152);
    float v221 = (float)LODWORD(v40);
    float v222 = v38;
    float v201 = v55;
    float v202 = v54;
    do
    {
      v57 = &v49[v22];
      v58 = &v45[v26];
      if (v11)
      {
        size_t v59 = 0;
        v60 = &v49[v22];
        v61 = &v45[v26];
        do
        {
          float32x4_t v62 = (unsigned __int16 *)(v51 + 2 * v59);
          float v63 = (float)(v62[1] >> v52) - v33;
          float v64 = v226 * v63;
          float v65 = v34 * (float)((float)(*(unsigned __int16 *)v49 >> v52) - v32);
          float v66 = (float)(v226 * v63) + v65;
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = (float)(v226 * v63) + v65;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = (float)(*v62 >> v52) - v33;
          float v69 = (float)(v224 * v63) + (float)(v68 * v225);
          float v70 = 8191.0;
          if ((float)(v65 + v69) <= 8191.0)
          {
            float v70 = v65 + v69;
            if ((float)(v65 + v69) < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v223 * v68;
          float v72 = (float)(v223 * v68) + v65;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v34 * (float)((float)(*((unsigned __int16 *)v49 + 1) >> v52) - v32);
          float v75 = 8191.0;
          if ((float)(v64 + v74) <= 8191.0)
          {
            float v75 = v64 + v74;
            if ((float)(v64 + v74) < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = 8191.0;
          if ((float)(v69 + v74) <= 8191.0)
          {
            float v76 = v69 + v74;
            if ((float)(v69 + v74) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v71 + v74;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v34 * (float)((float)(*(unsigned __int16 *)v60 >> v52) - v32);
          float v80 = 8191.0;
          if ((float)(v64 + v79) <= 8191.0)
          {
            float v80 = v64 + v79;
            if ((float)(v64 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = 8191.0;
          if ((float)(v69 + v79) <= 8191.0)
          {
            float v81 = v69 + v79;
            if ((float)(v69 + v79) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v71 + v79;
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v34 * (float)((float)(*((unsigned __int16 *)v60 + 1) >> v52) - v32);
          float v85 = v64 + v84;
          BOOL v86 = (float)(v64 + v84) <= 8191.0;
          float v87 = 8191.0;
          if (v86)
          {
            float v87 = v85;
            if (v85 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v69 + v84;
          BOOL v86 = (float)(v69 + v84) <= 8191.0;
          float v89 = 8191.0;
          if (v86)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v71 + v84;
          float v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          _H19 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S24, H20 }
          _H20 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S25, H20 }
          _H28 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          float v111 = (float)((float)((float)(v54 * _S24) + (float)(v53 * _S19)) + (float)(v55 * _S25))
               + (float)(v56 * fmaxf(_S19, fmaxf(_S24, _S25)));
          float v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            float v112 = v111;
            if (v111 < 0.0) {
              float v112 = 0.0;
            }
          }
          __asm
          {
            FCVT            S27, H28
            FCVT            S28, H23
            FCVT            S30, H20
          }
          _H22 = *((_WORD *)result + llroundf(v112));
          float v117 = (float)((float)((float)(v54 * _S28) + (float)(v53 * _S27)) + (float)(v55 * _S30))
               + (float)(v56 * fmaxf(_S27, fmaxf(_S28, _S30)));
          float v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            float v118 = v117;
            if (v117 < 0.0) {
              float v118 = 0.0;
            }
          }
          __asm
          {
            FCVT            S8, H17
            FCVT            S9, H26
            FCVT            S10, H21
          }
          _H17 = *((_WORD *)result + llroundf(v118));
          float v123 = fmaxf(_S8, fmaxf(_S9, _S10));
          float v124 = (float)((float)((float)(v54 * _S9) + (float)(v53 * _S8)) + (float)(v55 * _S10)) + (float)(v56 * v123);
          float v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            float v125 = (float)((float)((float)(v54 * _S9) + (float)(v53 * _S8)) + (float)(v55 * _S10)) + (float)(v56 * v123);
            if (v124 < 0.0) {
              float v125 = 0.0;
            }
          }
          __asm
          {
            FCVT            S26, H1
            FCVT            S29, H2
            FCVT            S31, H3
            FCVT            S1, H22
          }
          float v130 = _S19 * _S1;
          float v131 = _S24 * _S1;
          float v132 = _S25 * _S1;
          __asm { FCVT            S1, H17 }
          float v134 = _S27 * _S1;
          float v135 = _S28 * _S1;
          float v136 = _S30 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v125));
          __asm { FCVT            S2, H1 }
          float v138 = _S8 * _S2;
          float v139 = _S9 * _S2;
          float v140 = _S10 * _S2;
          float v141 = (float)((float)((float)(v54 * _S29) + (float)(v53 * _S26)) + (float)(v55 * _S31))
               + (float)(v56 * fmaxf(_S26, fmaxf(_S29, _S31)));
          float v142 = 8191.0;
          if (v141 <= 8191.0)
          {
            float v142 = v141;
            if (v141 < 0.0) {
              float v142 = 0.0;
            }
          }
          _H24 = *((_WORD *)result + llroundf(v142));
          __asm { FCVT            S24, H24 }
          float v145 = _S26 * _S24;
          float v146 = _S29 * _S24;
          float v147 = _S31 * _S24;
          float v148 = (float)((float)(v210 * v131) + (float)(v130 * v212)) + (float)(v132 * v209);
          float v149 = (float)((float)(v207 * v131) + (float)(v130 * v208)) + (float)(v132 * v206);
          _S20 = (float)((float)(v204 * v131) + (float)(v130 * v205)) + (float)(v132 * v203);
          _S22 = (float)((float)(v210 * v135) + (float)(v134 * v212)) + (float)(v136 * v209);
          _S23 = (float)((float)(v207 * v135) + (float)(v134 * v208)) + (float)(v136 * v206);
          _S19 = (float)((float)(v204 * v135) + (float)(v134 * v205)) + (float)(v136 * v203);
          float v154 = (float)((float)(v210 * v139) + (float)(v138 * v212)) + (float)(v140 * v209);
          float v155 = (float)((float)(v207 * v139) + (float)(v138 * v208)) + (float)(v140 * v206);
          float v156 = (float)((float)(v204 * v139) + (float)(v138 * v205)) + (float)(v140 * v203);
          float v157 = (float)((float)(v210 * v146) + (float)(v145 * v212)) + (float)(v147 * v209);
          float v158 = (float)((float)(v207 * v146) + (float)(v145 * v208)) + (float)(v147 * v206);
          _S26 = (float)((float)(v204 * v146) + (float)(v145 * v205)) + (float)(v147 * v203);
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          __asm { FCVT            S3, H1 }
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H17 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H20
            FCVT            S19, H19
          }
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          __asm { FCVT            S24, H22 }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S26, H26
          }
          float v176 = (float)((float)((float)(v219 * _S1) + (float)(v220 * _S3)) + (float)(v218 * _S2)) + v37;
          if (v176 < v37) {
            float v177 = v37;
          }
          else {
            float v177 = (float)((float)((float)(v219 * _S1) + (float)(v220 * _S3)) + (float)(v218 * _S2)) + v37;
          }
          BOOL v86 = v176 <= v39;
          float v178 = (float)((float)((float)(v219 * _S21) + (float)(v220 * _S17)) + (float)(v218 * _S19)) + v37;
          if (!v86) {
            float v177 = v39;
          }
          char v179 = llroundf(v177);
          if (v178 < v37) {
            float v180 = v37;
          }
          else {
            float v180 = (float)((float)((float)(v219 * _S21) + (float)(v220 * _S17)) + (float)(v218 * _S19)) + v37;
          }
          BOOL v86 = v178 <= v39;
          float v181 = (float)((float)((float)(v219 * _S24) + (float)(v220 * _S20)) + (float)(v218 * _S25)) + v37;
          if (!v86) {
            float v180 = v39;
          }
          char v182 = llroundf(v180);
          if (v181 < v37) {
            float v183 = v37;
          }
          else {
            float v183 = (float)((float)((float)(v219 * _S24) + (float)(v220 * _S20)) + (float)(v218 * _S25)) + v37;
          }
          BOOL v86 = v181 <= v39;
          float v184 = (float)((float)((float)(v219 * _S23) + (float)(v220 * _S22)) + (float)(v218 * _S26)) + v37;
          if (!v86) {
            float v183 = v39;
          }
          char v185 = llroundf(v183);
          if (v184 < v37) {
            float v186 = v37;
          }
          else {
            float v186 = (float)((float)((float)(v219 * _S23) + (float)(v220 * _S22)) + (float)(v218 * _S26)) + v37;
          }
          if (v184 <= v39) {
            float v187 = v186;
          }
          else {
            float v187 = v39;
          }
          float v188 = (float)((float)(_S3 + _S17) + _S20) + _S22;
          float v189 = (float)((float)(_S1 + _S21) + _S24) + _S23;
          unsigned char *v45 = v179;
          v45[1] = v182;
          unsigned char *v61 = v185;
          v61[1] = llroundf(v187);
          float v190 = (float)((float)(_S2 + _S19) + _S25) + _S26;
          float v191 = (float)((float)(v222 + (float)(v188 * v217)) + (float)(v189 * v216)) + (float)(v190 * v215);
          float v192 = v221;
          if (v191 <= v221)
          {
            float v192 = (float)((float)(v222 + (float)(v188 * v217)) + (float)(v189 * v216)) + (float)(v190 * v215);
            if (v191 < v230) {
              float v192 = v230;
            }
          }
          float v193 = (float)((float)(v222 + (float)(v188 * v214)) + (float)(v189 * v213)) + (float)(v190 * v211);
          *(unsigned char *)(v50 + v59) = llroundf(v192);
          float v194 = v221;
          float v32 = v229;
          float v34 = v227;
          if (v193 <= v221)
          {
            float v194 = v193;
            if (v193 < v230) {
              float v194 = v230;
            }
          }
          v49 += 4;
          v60 += 4;
          v45 += 2;
          v61 += 2;
          *(unsigned char *)(v50 + v59 + 1) = llroundf(v194);
          v59 += 2;
          float v33 = v228;
          float v55 = v201;
          float v54 = v202;
        }
        while (v11 > v59);
      }
      uint64_t v49 = &v57[v22];
      v51 += v23;
      v45 = &v58[v26];
      v50 += v27;
      v10 += 2;
    }
    while (v14 > v10);
    if (v200 && v29)
    {
      uint64_t v195 = 0;
      do
      {
        if (v11)
        {
          size_t v196 = v11;
          float16x8_t v197 = v30;
          float16x8_t v198 = (unsigned __int16 *)v25;
          do
          {
            unsigned int v199 = *v198++;
            *v197++ = llroundf((float)v199 * 0.0038911);
            --v196;
          }
          while (v196);
        }
        v25 += v24;
        v30 += v28;
        ++v195;
      }
      while (v195 != v14);
    }
    else if (v29)
    {
      do
      {
        if (v11) {
          result = memset(v30, 255, v11);
        }
        v30 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_TRC_Mat_TRC_420vf_neon_fp16_GCD(unint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, float32x4_t a7, double a8, double a9)
{
  uint64_t v18 = *(void *)(result + 28);
  unint64_t v19 = 2 * *(unsigned __int8 *)result;
  unint64_t v20 = v18 * a2 / v19;
  unint64_t v21 = (v18 + v18 * a2) / v19;
  if (2 * v21 != 2 * v20)
  {
    unint64_t v22 = 0;
    size_t v23 = *(void *)(result + 20);
    uint64_t v24 = *(void *)(result + 36);
    uint64_t v25 = *(void *)(result + 44) + 2 * v20;
    unint64_t v26 = 2 * v21 - 2 * v20;
    uint64_t v27 = *(void *)(result + 112);
    uint64_t v28 = *(void **)(result + 128);
    uint64_t v29 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v19);
    uint64_t v30 = *(float32x2_t **)(result + 152);
    uint64_t v31 = *(uint64_t **)(result + 56);
    uint64_t v32 = *(uint64_t **)(result + 64);
    uint64_t v33 = *(uint64_t **)(result + 136);
    uint64_t v34 = *v32;
    uint64_t v35 = v32[1];
    uint64_t v356 = v32[2];
    uint64_t v360 = v31[2];
    uint64_t v36 = *v33;
    uint64_t v37 = v33[1];
    uint64_t v38 = v33[2];
    LODWORD(v33) = v30[17].u16[2];
    LODWORD(v32) = v30[17].u16[3];
    LODWORD(a3) = 1174403072;
    float v39 = (float)v33;
    *(short float *)v12.i16 = (short float)v33;
    unsigned int v40 = v30[18].u16[0];
    float v419 = v30[5].f32[1];
    LODWORD(v33) = v30[18].u16[1];
    float v45 = (float)v32;
    short float v46 = (short float)v32;
    LODWORD(v32) = v30[18].u16[2];
    float v47 = (float)v40;
    *(short float *)v15.i16 = (short float)v40;
    unsigned int v48 = v30[18].u16[3];
    float v398 = (float)v33;
    *(short float *)v13.i16 = (short float)v33;
    LODWORD(v33) = v30[19].u16[0];
    *(float *)&a9 = (float)v32;
    float v394 = (float)v32;
    float v424 = (float)v48;
    float v49 = (float)v33;
    *(short float *)&a9 = (short float)v32;
    *(short float *)v11.i16 = (short float)v48;
    *(short float *)v17.i16 = (short float)v33;
    unsigned int v50 = v30[15].u8[4];
    if (v50 >= 0x11) {
      unsigned __int8 v51 = 0;
    }
    else {
      unsigned __int8 v51 = 16 - v50;
    }
    if (v29 >= 0) {
      uint64_t v52 = v29;
    }
    else {
      uint64_t v52 = v29 + 1;
    }
    uint64_t v358 = v38;
    uint64_t v359 = v28[2];
    _S7 = v30[4].i32[1];
    _S5 = v30[5].i32[0];
    float v357 = (unsigned char *)(v359 + v38 * v29 + v27);
    a7.f32[0] = 8191.0 / (float)v30[16].u32[0];
    _S19 = a7.f32[0] * v30->f32[0];
    int16x8_t v56 = vdupq_lane_s16(v12, 0);
    v41.i32[1] = v30[1].i32[0];
    v41.i32[0] = v30[3].i32[1];
    *(float32x2_t *)v14.f32 = vmul_n_f32(v41, a7.f32[0]);
    float16x8_t v57 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v14), 0);
    *(float32x2_t *)a7.f32 = vmul_n_f32(v30[2], a7.f32[0]);
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    float16x8_t v427 = v58;
    short float v59 = -v46;
    float16x8_t v60 = vmulq_n_f16(v57, v59);
    float16x8_t v61 = vmulq_n_f16(v58, v59);
    __asm { FMOV            V1.2S, #0.25 }
    v42.i32[1] = v30[7].i32[1];
    v42.i32[0] = v30[6].i32[0];
    *(float32x2_t *)v58.i8 = vmul_f32(v42, _D1);
    uint64_t v418 = v58.i64[0];
    int32x4_t v67 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v58), 0);
    v43.i32[1] = v30[8].i32[0];
    v43.i32[0] = v30[6].i32[1];
    *(float32x2_t *)v16.f32 = vmul_f32(v43, _D1);
    int32x4_t v68 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v16), 0);
    v44.i32[1] = v30[8].i32[1];
    v44.i32[0] = v30[7].i32[0];
    *(float32x2_t *)v10.f32 = vmul_f32(v44, _D1);
    int32x4_t v417 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float v69 = (unsigned char *)(v28[1] + v37 * (v52 >> 1) + v27);
    float v70 = (int8x8_t *)(*v28 + v36 * v29 + v27);
    if (v25 >= 0) {
      uint64_t v71 = v25;
    }
    else {
      uint64_t v71 = v25 + 1;
    }
    uint64_t v72 = *v31;
    uint64_t v73 = v31[1] + v35 * (v71 >> 1);
    float v74 = (char *)&v30[20] + 4;
    uint64_t v355 = v360 + v356 * v25 + 2 * v24;
    uint64_t v75 = v72 + v34 * v25;
    float v76 = (char *)&v30[2068] + 4;
    int16x8_t v416 = vdupq_lane_s16(v15, 0);
    float16x8_t v77 = (float16x8_t)vdupq_lane_s16(v13, 0);
    float16x8_t v78 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    float16x8_t v405 = (float16x8_t)vdupq_lane_s16(v17, 0);
    float16x8_t v79 = (float16x8_t)vdupq_lane_s16(v11, 0);
    float16x8_t v80 = (float16x8_t)v68;
    float v81 = (uint16x8_t *)(v73 + 2 * v24);
    float v82 = (uint16x8_t *)(v75 + 2 * v24);
    result = (v23 - 7);
    unsigned __int8 v83 = v51;
    size_t v363 = v23 & 0xFFFFFFF8;
    LODWORD(_Q13) = v30[11].i32[0];
    __asm { FCVT            H1, S19 }
    short float v415 = _H1;
    float v414 = v30[4].f32[1];
    __asm { FCVT            H7, S7 }
    short float v388 = _H7;
    float v413 = v30[5].f32[0];
    __asm { FCVT            H7, S5 }
    _S1 = v30[5].i32[1];
    __asm { FCVT            H1, S1 }
    short float v386 = *(short float *)&_S1;
    float v402 = v30[9].f32[0];
    __asm { FCVT            H1, S3 }
    float v401 = v30[9].f32[1];
    __asm { FCVT            H3, S18 }
    float16x8_t v89 = (float16x8_t)v67;
    float v400 = v30[10].f32[0];
    __asm { FCVT            H2, S31 }
    short float v383 = _H2;
    float v399 = v30[10].f32[1];
    __asm { FCVT            H2, S10 }
    float v397 = *(float *)&_Q13;
    __asm { FCVT            H10, S13 }
    float v395 = v30[11].f32[1];
    __asm { FCVT            H13, S16 }
    float v393 = v30[12].f32[0];
    __asm { FCVT            H6, S6 }
    short float v379 = _H6;
    float v392 = v30[12].f32[1];
    __asm { FCVT            H5, S17 }
    float16x8_t v95 = v427;
    short float v378 = _H5;
    float v390 = v30[13].f32[0];
    __asm { FCVT            H5, S20 }
    float v411 = a7.f32[0];
    float v412 = v14.f32[0];
    float v375 = a7.f32[1];
    float v376 = v14.f32[1];
    short float v97 = v415;
    float16x8_t v98 = (float16x8_t)v416;
    float16x8_t v99 = (float16x8_t)v417;
    float v409 = v10.f32[0];
    uint64_t v100 = v16.i64[0];
    uint16x8_t v403 = (uint16x8_t)vdupq_n_s16(-v51);
    short float v384 = _H3;
    short float v385 = *(short float *)&_S1;
    short float v382 = _H2;
    short float v377 = _H5;
    unint64_t v369 = v26;
    size_t v370 = v23;
    uint64_t v367 = v35;
    uint64_t v368 = v34;
    uint64_t v365 = v37;
    uint64_t v366 = v36;
    float16x8_t v410 = v89;
    float v423 = v45;
    float16x8_t v407 = v78;
    float16x8_t v408 = v77;
    float16x8_t v406 = v79;
    int v404 = v23 - 7;
    unsigned __int8 v364 = v51;
    float16x8_t v396 = v61;
    float16x8_t v391 = v60;
    float16x8_t v389 = v57;
    short float v387 = _H7;
    long long v380 = _Q13;
    short float v381 = _H10;
    float16x8_t v421 = v80;
    float16x8_t v422 = (float16x8_t)v56;
    float v361 = _S19;
    float v362 = v39;
    do
    {
      v101 = &v82->i8[v34];
      v102 = (char *)v70 + v36;
      if ((int)v23 < 8)
      {
        size_t v245 = 0;
        uint32x4_t v244 = v69;
        int8x16_t v106 = (int8x8_t *)((char *)v70 + v36);
        int8x16_t v105 = v81;
        float16x8_t v104 = (uint16x8_t *)((char *)v82 + v34);
        float16x8_t v246 = v80;
      }
      else
      {
        v373 = v81;
        unint64_t v374 = v22;
        uint64_t v103 = 0;
        v371 = &v82->i8[v34];
        v372 = (char *)v70 + v36;
        float16x8_t v104 = (uint16x8_t *)((char *)v82 + v34);
        int8x16_t v105 = v81;
        int8x16_t v106 = (int8x8_t *)((char *)v70 + v36);
        v107.i64[0] = 0x9000900090009000;
        v107.i64[1] = 0x9000900090009000;
        unint64_t v420 = v69;
        do
        {
          short float v426 = v70;
          uint16x8_t v108 = *v105++;
          float16x8_t v109 = vcvtq_f16_u16(vshlq_u16(v108, v403));
          int8x16_t v110 = (int8x16_t)vmlaq_f16(v60, v57, v109);
          int8x16_t v111 = (int8x16_t)vmlaq_f16(v61, v95, v109);
          v109.i64[0] = vextq_s8(v110, v110, 8uLL).u64[0];
          *(int16x4_t *)v112.i8 = vuzp1_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v109.i8);
          *(int16x4_t *)v109.i8 = vuzp2_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v109.i8);
          *(double *)&v109.i64[1] = a3;
          *(double *)&v112.i64[1] = a3;
          v110.i64[0] = vextq_s8(v111, v111, 8uLL).u64[0];
          float16x4_t v113 = (float16x4_t)vuzp1_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v110.i8);
          *(int16x4_t *)v110.i8 = vuzp2_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v110.i8);
          float16x8_t v114 = (float16x8_t)vzip1q_s16((int16x8_t)v109, (int16x8_t)v109);
          *(float16x4_t *)v109.i8 = vadd_f16(v113, *(float16x4_t *)v110.i8);
          *(double *)&v109.i64[1] = a3;
          uint16x8_t v115 = *v82++;
          float16x8_t v116 = (float16x8_t)vzip1q_s16(v112, v112);
          float16x8_t v117 = vcvtq_f16_u16(vshlq_u16(v115, v403));
          uint16x8_t v118 = *v104++;
          float16x8_t v119 = vsubq_f16(v117, v422);
          float16x8_t v120 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v118, v403)), v422);
          float16x8_t v121 = vmlaq_n_f16(v114, v119, v97);
          float16x8_t v122 = vmlaq_n_f16(v114, v120, v97);
          float16x8_t v123 = (float16x8_t)vzip1q_s16((int16x8_t)v109, (int16x8_t)v109);
          float16x8_t v124 = vmlaq_n_f16(v123, v120, v97);
          float16x8_t v125 = vmlaq_n_f16(v116, v119, v97);
          float16x8_t v126 = vmlaq_n_f16(v116, v120, v97);
          float16x8_t v127 = vmlaq_n_f16(v123, v119, v97);
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v107));
          uint32x4_t v129 = vmovl_high_u16(v128);
          v130.i64[0] = v129.u32[2];
          v130.i64[1] = v129.u32[3];
          float16x8_t v131 = v130;
          v130.i64[0] = v129.u32[0];
          v130.i64[1] = v129.u32[1];
          float16x8_t v132 = v130;
          uint32x4_t v133 = vmovl_u16(*(uint16x4_t *)v128.i8);
          v130.i64[0] = v133.u32[2];
          v130.i64[1] = v133.u32[3];
          uint64_t v134 = v133.u32[1];
          v135.i16[0] = *(_WORD *)&v74[2 * v133.u32[0]];
          uint64_t v136 = v132.i64[1];
          float16x8_t v137 = (__int16 *)&v74[2 * v132.i64[0]];
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, (float16x8_t)0), v107));
          float16x8_t v139 = (float16x8_t)vmovl_high_u16(v138);
          float v140 = (__int16 *)&v74[2 * v131.i64[0]];
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v138.i8);
          uint64_t v142 = v141.u32[1];
          uint64_t v143 = v141.u32[3];
          v144.i16[0] = *(_WORD *)&v74[2 * v141.u32[0]];
          float v145 = (__int16 *)&v74[2 * v141.u32[2]];
          uint64_t v146 = v139.u32[1];
          float v147 = (__int16 *)&v74[2 * v139.u32[0]];
          unint64_t v425 = (__int16 *)&v74[2 * v139.u32[2]];
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v107));
          uint32x4_t v149 = vmovl_high_u16(v148);
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v148.i8);
          v131.i16[0] = *(_WORD *)&v74[2 * v150.u32[0]];
          v151 = (__int16 *)&v74[2 * v131.i64[1]];
          v152 = (__int16 *)&v74[2 * v150.u32[1]];
          v153 = (__int16 *)&v74[2 * v150.u32[2]];
          float v154 = (__int16 *)&v74[2 * v150.u32[3]];
          v135.i16[1] = *(_WORD *)&v74[2 * v134];
          float v155 = (__int16 *)&v74[2 * v149.u32[0]];
          float v156 = (__int16 *)&v74[2 * v149.u32[1]];
          float v157 = (__int16 *)&v74[2 * v142];
          float v158 = (__int16 *)&v74[2 * v149.u32[2]];
          v159 = (__int16 *)&v74[2 * v149.u32[3]];
          uint16x8_t v160 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v107));
          uint32x4_t v161 = vmovl_high_u16(v160);
          uint32x4_t v162 = vmovl_u16(*(uint16x4_t *)v160.i8);
          float16x8_t v163 = (__int16 *)&v74[2 * v139.u32[3]];
          v139.i16[0] = *(_WORD *)&v74[2 * v162.u32[0]];
          v131.i16[1] = *v152;
          v135.i16[2] = *(_WORD *)&v74[2 * v130.i64[0]];
          v144.i16[1] = *v157;
          uint32x4_t v164 = (__int16 *)&v74[2 * v161.u32[0]];
          v131.i16[2] = *v153;
          v165 = (__int16 *)&v74[2 * v161.u32[1]];
          v139.i16[1] = *(_WORD *)&v74[2 * v162.u32[1]];
          v135.i16[3] = *(_WORD *)&v74[2 * v130.i64[1]];
          v166 = (__int16 *)&v74[2 * v161.u32[2]];
          uint16x8_t v167 = (__int16 *)&v74[2 * v161.u32[3]];
          v139.i16[2] = *(_WORD *)&v74[2 * v162.u32[2]];
          v144.i16[2] = *v145;
          v139.i16[3] = *(_WORD *)&v74[2 * v162.u32[3]];
          v131.i16[3] = *v154;
          uint16x8_t v168 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v107));
          float16x8_t v169 = (float16x8_t)vmovl_high_u16(v168);
          v130.i64[0] = v169.u32[2];
          v130.i64[1] = v169.u32[3];
          float16x8_t v170 = v130;
          v130.i64[0] = v169.u32[0];
          v130.i64[1] = v169.u32[1];
          v139.i16[4] = *v164;
          uint32x4_t v171 = vmovl_u16(*(uint16x4_t *)v168.i8);
          v135.i16[4] = *v137;
          v169.i16[0] = *(_WORD *)&v74[2 * v171.u32[0]];
          v144.i16[3] = *(_WORD *)&v74[2 * v143];
          v131.i16[4] = *v155;
          v139.i16[5] = *v165;
          v135.i16[5] = *(_WORD *)&v74[2 * v136];
          uint32x4_t v172 = (__int16 *)&v74[2 * v170.i64[0]];
          uint32x4_t v173 = (__int16 *)&v74[2 * v170.i64[1]];
          v144.i16[4] = *v147;
          v169.i16[1] = *(_WORD *)&v74[2 * v171.u32[1]];
          v169.i16[2] = *(_WORD *)&v74[2 * v171.u32[2]];
          v131.i16[5] = *v156;
          v169.i16[3] = *(_WORD *)&v74[2 * v171.u32[3]];
          v169.i16[4] = *(_WORD *)&v74[2 * v130.i64[0]];
          v139.i16[6] = *v166;
          v169.i16[5] = *(_WORD *)&v74[2 * v130.i64[1]];
          v135.i16[6] = *v140;
          uint16x8_t v174 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, (float16x8_t)0), v107));
          uint32x4_t v175 = vmovl_high_u16(v174);
          v144.i16[5] = *(_WORD *)&v74[2 * v146];
          uint32x4_t v176 = vmovl_u16(*(uint16x4_t *)v174.i8);
          v131.i16[6] = *v158;
          v177.i16[0] = *(_WORD *)&v74[2 * v176.u32[0]];
          v139.i16[7] = *v167;
          v169.i16[6] = *v172;
          v135.i16[7] = *v151;
          v144.i16[6] = *v425;
          v131.i16[7] = *v159;
          v177.i16[1] = *(_WORD *)&v74[2 * v176.u32[1]];
          v177.i16[2] = *(_WORD *)&v74[2 * v176.u32[2]];
          v144.i16[7] = *v163;
          v177.i16[3] = *(_WORD *)&v74[2 * v176.u32[3]];
          v177.i16[4] = *(_WORD *)&v74[2 * v175.u32[0]];
          v169.i16[7] = *v173;
          v177.i16[5] = *(_WORD *)&v74[2 * v175.u32[1]];
          v177.i16[6] = *(_WORD *)&v74[2 * v175.u32[2]];
          v177.i16[7] = *(_WORD *)&v74[2 * v175.u32[3]];
          float16x8_t v178 = v89;
          float16x8_t v179 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v135, v385), v144, v384), v131, v383);
          v124.i16[7] = HIWORD(v380);
          float16x8_t v180 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v135, v382), v144, v381), v131, *(short float *)&v380);
          float16x8_t v181 = vmlaq_n_f16(vmulq_n_f16(v131, v377), v144, v378);
          float16x8_t v182 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v139, v385), v169, v384), v177, v383);
          float16x8_t v183 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v139, v382), v169, v381), v177, *(short float *)&v380);
          float16x8_t v184 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v177, v377), v169, v378), v139, v379);
          float16x8_t v185 = vmlaq_n_f16(v181, v135, v379);
          uint16x8_t v186 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v179, (float16x8_t)0), v107));
          uint32x4_t v187 = vmovl_high_u16(v186);
          v130.i64[0] = v187.u32[2];
          v130.i64[1] = v187.u32[3];
          float16x8_t v188 = v130;
          uint32x4_t v189 = vmovl_u16(*(uint16x4_t *)v186.i8);
          uint64_t v190 = v189.u32[1];
          uint64_t v191 = v189.u32[0];
          uint64_t v192 = v189.u32[3];
          uint64_t v193 = v189.u32[2];
          uint64_t v194 = v187.u32[1];
          uint64_t v195 = v187.u32[0];
          uint16x8_t v196 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v180, (float16x8_t)0), v107));
          uint32x4_t v197 = vmovl_high_u16(v196);
          v130.i64[0] = v197.u32[2];
          v130.i64[1] = v197.u32[3];
          float16x8_t v198 = v130;
          v130.i64[0] = v197.u32[0];
          v130.i64[1] = v197.u32[1];
          float16x8_t v199 = v130;
          uint32x4_t v200 = vmovl_u16(*(uint16x4_t *)v196.i8);
          v130.i64[0] = v200.u32[2];
          v130.i64[1] = v200.u32[3];
          float16x8_t v201 = v130;
          uint64_t v202 = v200.u32[1];
          v135.i16[0] = *(_WORD *)&v76[2 * v191];
          uint64_t v203 = v199.i64[1];
          uint64_t v204 = v199.i64[0];
          float v205 = (__int16 *)&v76[2 * v193];
          uint64_t v206 = v198.i64[1];
          uint64_t v207 = v198.i64[0];
          v144.i16[0] = *(_WORD *)&v76[2 * v200.u32[0]];
          uint16x8_t v208 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v185, (float16x8_t)0), v107));
          uint32x4_t v209 = vmovl_high_u16(v208);
          v130.i64[0] = v209.u32[2];
          v130.i64[1] = v209.u32[3];
          float16x8_t v210 = v130;
          v130.i64[0] = v209.u32[0];
          v130.i64[1] = v209.u32[1];
          float16x8_t v211 = v130;
          uint32x4_t v212 = vmovl_u16(*(uint16x4_t *)v208.i8);
          v130.i64[0] = v212.u32[2];
          v130.i64[1] = v212.u32[3];
          float16x8_t v213 = v130;
          v130.i64[1] = v212.u32[1];
          float v214 = (__int16 *)&v76[2 * v190];
          v124.i16[0] = *(_WORD *)&v76[2 * v212.u32[0]];
          float v215 = (__int16 *)&v76[2 * v192];
          uint64_t v216 = v211.i64[1];
          uint64_t v217 = v211.i64[0];
          uint64_t v218 = v210.i64[1];
          uint64_t v219 = v210.i64[0];
          uint16x8_t v220 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v182, (float16x8_t)0), v107));
          uint32x4_t v221 = vmovl_high_u16(v220);
          float16x8_t v222 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v220.i8);
          v135.i16[1] = *v214;
          v144.i16[1] = *(_WORD *)&v76[2 * v202];
          v182.i16[0] = *(_WORD *)&v76[2 * v222.u32[0]];
          v124.i16[1] = *(_WORD *)&v76[2 * v130.i64[1]];
          v135.i16[2] = *v205;
          v182.i16[1] = *(_WORD *)&v76[2 * v222.u32[1]];
          v144.i16[2] = *(_WORD *)&v76[2 * v201.i64[0]];
          v182.i16[2] = *(_WORD *)&v76[2 * v222.u32[2]];
          v124.i16[2] = *(_WORD *)&v76[2 * v213.i64[0]];
          uint16x8_t v223 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v183, (float16x8_t)0), v107));
          uint32x4_t v224 = vmovl_u16(*(uint16x4_t *)v223.i8);
          v182.i16[3] = *(_WORD *)&v76[2 * v222.u32[3]];
          v222.i16[7] = (unint64_t)v224.u32[1] >> 48;
          v135.i16[3] = *v215;
          v222.i16[0] = *(_WORD *)&v76[2 * v224.u32[0]];
          v144.i16[3] = *(_WORD *)&v76[2 * v201.i64[1]];
          v124.i16[3] = *(_WORD *)&v76[2 * v213.i64[1]];
          v182.i16[4] = *(_WORD *)&v76[2 * v221.u32[0]];
          v130.i64[1] = v221.u32[3];
          v135.i16[4] = *(_WORD *)&v76[2 * v195];
          uint32x4_t v225 = vmovl_high_u16(v223);
          result = v404;
          v144.i16[4] = *(_WORD *)&v76[2 * v204];
          v222.i16[1] = *(_WORD *)&v76[2 * v224.u32[1]];
          v124.i16[4] = *(_WORD *)&v76[2 * v217];
          v182.i16[5] = *(_WORD *)&v76[2 * v221.u32[1]];
          v222.i16[2] = *(_WORD *)&v76[2 * v224.u32[2]];
          v135.i16[5] = *(_WORD *)&v76[2 * v194];
          v222.i16[3] = *(_WORD *)&v76[2 * v224.u32[3]];
          v144.i16[5] = *(_WORD *)&v76[2 * v203];
          v222.i16[4] = *(_WORD *)&v76[2 * v225.u32[0]];
          v124.i16[5] = *(_WORD *)&v76[2 * v216];
          v182.i16[6] = *(_WORD *)&v76[2 * v221.u32[2]];
          v222.i16[5] = *(_WORD *)&v76[2 * v225.u32[1]];
          v135.i16[6] = *(_WORD *)&v76[2 * v188.i64[0]];
          v144.i16[6] = *(_WORD *)&v76[2 * v207];
          v222.i16[6] = *(_WORD *)&v76[2 * v225.u32[2]];
          float v226 = (__int16 *)&v76[2 * v225.u32[3]];
          v124.i16[6] = *(_WORD *)&v76[2 * v219];
          uint16x8_t v227 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v184, (float16x8_t)0), v107));
          uint32x4_t v228 = vmovl_high_u16(v227);
          int16x8_t v229 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v227.i8);
          float16x8_t v230 = (float16x8_t)vuzp1q_s16((int16x8_t)v182, (int16x8_t)v222);
          v182.i16[7] = *(_WORD *)&v76[2 * v130.i64[1]];
          v130.i64[0] = v228.u32[0];
          v130.i64[1] = v228.u32[1];
          float16x8_t v231 = v130;
          v130.i64[1] = v229.u32[3];
          v229.i16[7] = (unint64_t)v229.u32[3] >> 48;
          v229.i16[0] = *(_WORD *)&v76[2 * v229.u32[0]];
          uint64_t v232 = v231.i64[1];
          v222.i16[7] = *v226;
          v229.i16[1] = *(_WORD *)&v76[2 * v229.u32[1]];
          uint64_t v233 = v231.i64[0];
          float16x8_t v234 = (float16x8_t)vuzp1q_s16((int16x8_t)v135, (int16x8_t)v144);
          v135.i16[7] = *(_WORD *)&v76[2 * v188.i64[1]];
          v229.i16[2] = *(_WORD *)&v76[2 * v229.u32[2]];
          v229.i16[3] = *(_WORD *)&v76[2 * v130.i64[1]];
          v144.i16[7] = *(_WORD *)&v76[2 * v206];
          v229.i16[4] = *(_WORD *)&v76[2 * v233];
          float16x8_t v235 = vmlaq_n_f16(vmlaq_n_f16(v98, v182, v388), v222, v387);
          float16x8_t v236 = (float16x8_t)vuzp2q_s16((int16x8_t)v182, (int16x8_t)v222);
          float16x8_t v237 = v124;
          v229.i16[5] = *(_WORD *)&v76[2 * v232];
          v229.i16[6] = *(_WORD *)&v76[2 * v228.u32[2]];
          v237.i16[7] = *(_WORD *)&v76[2 * v218];
          float v69 = v420;
          float16x8_t v238 = (float16x8_t)v229;
          v238.i16[7] = *(_WORD *)&v76[2 * v228.u32[3]];
          *short float v426 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v98, v135, v388), v144, v387), v237, v386), v98), v78)));
          float v70 = v426 + 1;
          int16x8_t v239 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v234, (float16x8_t)vuzp2q_s16((int16x8_t)v135, (int16x8_t)v144)), v230), v236);
          float16x8_t v240 = vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v124, (int16x8_t)v124), (float16x8_t)vtrn2q_s16((int16x8_t)v237, (int16x8_t)v237));
          float16x8_t v241 = vmaxq_f16(vmlaq_n_f16(v235, v238, v386), v98);
          float16x8_t v89 = v178;
          *v106++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(v241, v78)));
          float16x8_t v242 = vaddq_f16(v240, (float16x8_t)vtrn1q_s16(v229, v229));
          float16x8_t v243 = (float16x8_t)vtrn2q_s16((int16x8_t)v238, (int16x8_t)v238);
          float16x8_t v95 = v427;
          *(int8x8_t *)&v420[v103] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v77, v178, (float16x8_t)vzip1q_s16(v239, v239)), v421, (float16x8_t)vzip2q_s16(v239, v239)), v99, vaddq_f16(v242, v243)), v79), v405)));
          v103 += 8;
        }
        while ((int)v103 < v404);
        uint32x4_t v244 = &v420[v103];
        size_t v245 = v363;
        unint64_t v26 = v369;
        size_t v23 = v370;
        float v81 = v373;
        unint64_t v22 = v374;
        uint64_t v35 = v367;
        uint64_t v34 = v368;
        uint64_t v37 = v365;
        uint64_t v36 = v366;
        unsigned __int8 v83 = v364;
        v101 = v371;
        v102 = v372;
        float16x8_t v246 = v421;
        int16x8_t v56 = (int16x8_t)v422;
        float v45 = v423;
        _S19 = v361;
        float v39 = v362;
      }
      for (; v23 > v245; float16x8_t v79 = v406)
      {
        float v247 = (float)(v105->u16[1] >> v83) - v45;
        float v248 = v376 * v247;
        float v249 = _S19 * (float)((float)(v82->u16[0] >> v83) - v39);
        float v250 = (float)(v376 * v247) + v249;
        float v251 = 8191.0;
        if (v250 <= 8191.0)
        {
          float v251 = (float)(v376 * v247) + v249;
          if (v250 < 0.0) {
            float v251 = 0.0;
          }
        }
        float v252 = (float)(v105->u16[0] >> v83) - v45;
        float v253 = (float)(v375 * v247) + (float)(v252 * v411);
        float v254 = 8191.0;
        if ((float)(v249 + v253) <= 8191.0)
        {
          float v254 = v249 + v253;
          if ((float)(v249 + v253) < 0.0) {
            float v254 = 0.0;
          }
        }
        float v255 = v412 * v252;
        float v256 = v255 + v249;
        float v257 = 8191.0;
        if (v256 <= 8191.0)
        {
          float v257 = v256;
          if (v256 < 0.0) {
            float v257 = 0.0;
          }
        }
        float v258 = _S19 * (float)((float)(v82->u16[1] >> v83) - v39);
        float v259 = 8191.0;
        if ((float)(v248 + v258) <= 8191.0)
        {
          float v259 = v248 + v258;
          if ((float)(v248 + v258) < 0.0) {
            float v259 = 0.0;
          }
        }
        float v260 = 8191.0;
        if ((float)(v253 + v258) <= 8191.0)
        {
          float v260 = v253 + v258;
          if ((float)(v253 + v258) < 0.0) {
            float v260 = 0.0;
          }
        }
        float v261 = v255 + v258;
        float v262 = 8191.0;
        if (v261 <= 8191.0)
        {
          float v262 = v261;
          if (v261 < 0.0) {
            float v262 = 0.0;
          }
        }
        float v263 = _S19 * (float)((float)(v104->u16[0] >> v83) - v39);
        float v264 = 8191.0;
        if ((float)(v248 + v263) <= 8191.0)
        {
          float v264 = v248 + v263;
          if ((float)(v248 + v263) < 0.0) {
            float v264 = 0.0;
          }
        }
        float v265 = 8191.0;
        if ((float)(v253 + v263) <= 8191.0)
        {
          float v265 = v253 + v263;
          if ((float)(v253 + v263) < 0.0) {
            float v265 = 0.0;
          }
        }
        float v266 = v255 + v263;
        BOOL v267 = (float)(v255 + v263) <= 8191.0;
        float v268 = 8191.0;
        if (v267)
        {
          float v268 = v266;
          if (v266 < 0.0) {
            float v268 = 0.0;
          }
        }
        float v269 = _S19 * (float)((float)(v104->u16[1] >> v83) - v39);
        float v270 = v248 + v269;
        float v271 = 8191.0;
        if (v270 <= 8191.0)
        {
          float v271 = v270;
          if (v270 < 0.0) {
            float v271 = 0.0;
          }
        }
        float v272 = v253 + v269;
        BOOL v267 = (float)(v253 + v269) <= 8191.0;
        float v273 = 8191.0;
        if (v267)
        {
          float v273 = v272;
          if (v272 < 0.0) {
            float v273 = 0.0;
          }
        }
        float16x8_t v274 = v246;
        int16x8_t v275 = v56;
        float v276 = _S19;
        float v277 = v39;
        float v278 = v255 + v269;
        BOOL v267 = (float)(v255 + v269) <= 8191.0;
        float v279 = 8191.0;
        if (v267)
        {
          float v279 = v278;
          if (v278 < 0.0) {
            float v279 = 0.0;
          }
        }
        _H3 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v251, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H7 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v254, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H17 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v257, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        _H20 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v259, 0.0), 8191.0))];
        __asm { FCVT            S20, H20 }
        _H25 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v260, 0.0), 8191.0))];
        _H10 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v262, 0.0), 8191.0))];
        __asm
        {
          FCVT            S25, H25
          FCVT            S10, H10
        }
        _H1 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v264, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v265, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H16 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v268, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        _H18 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v271, 0.0), 8191.0))];
        __asm { FCVT            S18, H18 }
        _H11 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v273, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v279, 0.0), 8191.0))];
        __asm
        {
          FCVT            S11, H11
          FCVT            S5, H5
        }
        float v304 = (float)((float)(v401 * _S7) + (float)(_S3 * v402)) + (float)(_S17 * v400);
        float v305 = (float)((float)(v397 * _S7) + (float)(_S3 * v399)) + (float)(_S17 * v395);
        _S7 = (float)((float)(v392 * _S7) + (float)(_S3 * v393)) + (float)(_S17 * v390);
        _S17 = (float)((float)(v401 * _S25) + (float)(_S20 * v402)) + (float)(_S10 * v400);
        _S19 = (float)((float)(v397 * _S25) + (float)(_S20 * v399)) + (float)(_S10 * v395);
        float v309 = (float)((float)(v392 * _S25) + (float)(_S20 * v393)) + (float)(_S10 * v390);
        float v310 = (float)((float)(v401 * _S2) + (float)(_S1 * v402)) + (float)(_S16 * v400);
        float v311 = (float)((float)(v397 * _S2) + (float)(_S1 * v399)) + (float)(_S16 * v395);
        float v312 = (float)((float)(v392 * _S2) + (float)(_S1 * v393)) + (float)(_S16 * v390);
        float v313 = (float)((float)(v401 * _S11) + (float)(_S18 * v402)) + (float)(_S5 * v400);
        _S21 = (float)((float)(v397 * _S11) + (float)(_S18 * v399)) + (float)(_S5 * v395);
        _S18 = (float)((float)(v392 * _S11) + (float)(_S18 * v393)) + (float)(_S5 * v390);
        LOWORD(_S1) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v304, 0.0), 8191.0))];
        __asm { FCVT            S3, H1 }
        LOWORD(_S1) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v305, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        LOWORD(_S2) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        LOWORD(_S5) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        LOWORD(_S7) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0))];
        LOWORD(_S17) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v309, 0.0), 8191.0))];
        __asm
        {
          FCVT            S16, H7
          FCVT            S7, H17
        }
        LOWORD(_S17) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v310, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        LOWORD(_S19) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v311, 0.0), 8191.0))];
        __asm { FCVT            S20, H19 }
        LOWORD(_S19) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v312, 0.0), 8191.0))];
        __asm { FCVT            S25, H19 }
        LOWORD(_S19) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v313, 0.0), 8191.0))];
        __asm { FCVT            S19, H19 }
        LOWORD(_S21) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
        LOWORD(_S18) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0))];
        __asm
        {
          FCVT            S21, H21
          FCVT            S18, H18
        }
        float v328 = (float)((float)((float)(v413 * _S1) + (float)(v414 * _S3)) + (float)(v419 * _S2)) + v47;
        if (v328 < v47) {
          float v329 = v47;
        }
        else {
          float v329 = (float)((float)((float)(v413 * _S1) + (float)(v414 * _S3)) + (float)(v419 * _S2)) + v47;
        }
        BOOL v267 = v328 <= v394;
        float v330 = (float)((float)((float)(v413 * _S16) + (float)(v414 * _S5)) + (float)(v419 * _S7)) + v47;
        if (!v267) {
          float v329 = v394;
        }
        __int8 v331 = llroundf(v329);
        if (v330 < v47) {
          float v332 = v47;
        }
        else {
          float v332 = (float)((float)((float)(v413 * _S16) + (float)(v414 * _S5)) + (float)(v419 * _S7)) + v47;
        }
        BOOL v267 = v330 <= v394;
        float v333 = (float)((float)((float)(v413 * _S20) + (float)(v414 * _S17)) + (float)(v419 * _S25)) + v47;
        if (!v267) {
          float v332 = v394;
        }
        __int8 v334 = llroundf(v332);
        if (v333 < v47) {
          float v335 = v47;
        }
        else {
          float v335 = (float)((float)((float)(v413 * _S20) + (float)(v414 * _S17)) + (float)(v419 * _S25)) + v47;
        }
        BOOL v267 = v333 <= v394;
        float v336 = (float)((float)((float)(v413 * _S21) + (float)(v414 * _S19)) + (float)(v419 * _S18)) + v47;
        if (!v267) {
          float v335 = v394;
        }
        __int8 v337 = llroundf(v335);
        if (v336 < v47) {
          float v338 = v47;
        }
        else {
          float v338 = (float)((float)((float)(v413 * _S21) + (float)(v414 * _S19)) + (float)(v419 * _S18)) + v47;
        }
        if (v336 <= v394) {
          float v339 = v338;
        }
        else {
          float v339 = v394;
        }
        float v340 = (float)((float)(_S3 + _S5) + _S17) + _S19;
        float v341 = (float)((float)(_S1 + _S16) + _S20) + _S21;
        v70->i8[0] = v331;
        v70->i8[1] = v334;
        v106->i8[0] = v337;
        v106->i8[1] = llroundf(v339);
        float v342 = (float)((float)(_S2 + _S7) + _S25) + _S18;
        float v343 = (float)((float)(v398 + (float)(v340 * *(float *)&v418)) + (float)(v341 * *(float *)&v100))
             + (float)(v342 * v409);
        float v344 = v49;
        if (v343 <= v49)
        {
          float v344 = (float)((float)(v398 + (float)(v340 * *(float *)&v418)) + (float)(v341 * *(float *)&v100))
               + (float)(v342 * v409);
          if (v343 < v424) {
            float v344 = v424;
          }
        }
        float v345 = (float)((float)(v398 + (float)(v340 * *((float *)&v418 + 1))) + (float)(v341 * *((float *)&v100 + 1)))
             + (float)(v342 * v10.f32[1]);
        *uint32x4_t v244 = llroundf(v344);
        float v346 = v49;
        float v39 = v277;
        float v45 = v423;
        _S19 = v276;
        int16x8_t v56 = v275;
        float16x8_t v95 = v427;
        float16x8_t v246 = v274;
        short float v97 = v415;
        if (v345 <= v49)
        {
          float v346 = v345;
          if (v345 < v424) {
            float v346 = v424;
          }
        }
        v245 += 2;
        int8x16_t v105 = (uint16x8_t *)((char *)v105 + 4);
        float v82 = (uint16x8_t *)((char *)v82 + 4);
        float16x8_t v104 = (uint16x8_t *)((char *)v104 + 4);
        v244[1] = llroundf(v346);
        float v70 = (int8x8_t *)((char *)v70 + 2);
        int8x16_t v106 = (int8x8_t *)((char *)v106 + 2);
        v244 += 2;
        float16x8_t v57 = v389;
        float16x8_t v60 = v391;
        float16x8_t v61 = v396;
        float16x8_t v89 = v410;
        float16x8_t v98 = (float16x8_t)v416;
        float16x8_t v99 = (float16x8_t)v417;
        float16x8_t v78 = v407;
        float16x8_t v77 = v408;
      }
      float16x8_t v80 = v246;
      float v82 = (uint16x8_t *)&v101[v34];
      float v81 = (uint16x8_t *)((char *)v81 + v35);
      float v70 = (int8x8_t *)&v102[v36];
      v69 += v37;
      v22 += 2;
    }
    while (v26 > v22);
    if (v360 && v359)
    {
      uint64_t v347 = 0;
      float v348 = v357;
      float v349 = (unsigned __int16 *)v355;
      do
      {
        if (v23)
        {
          size_t v350 = v23;
          v351 = v348;
          v352 = v349;
          do
          {
            unsigned int v353 = *v352++;
            *v351++ = llroundf((float)v353 * 0.0038911);
            --v350;
          }
          while (v350);
        }
        float v349 = (unsigned __int16 *)((char *)v349 + v356);
        v348 += v358;
        ++v347;
      }
      while (v347 != v26);
    }
    else
    {
      v354 = v357;
      if (v359)
      {
        do
        {
          if (v23) {
            result = (unint64_t)memset(v354, 255, v23);
          }
          v354 += v358;
          --v26;
        }
        while (v26);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Mat_TRC_420vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    uint64_t v13 = *(void *)((char *)result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = result[14];
    unint64_t v16 = result[13] * a2 / v7;
    uint64_t v17 = (void *)result[16];
    uint64_t v18 = result[15] + 2 * v16;
    uint64_t v19 = result[19];
    uint64_t v20 = (void *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    uint64_t v27 = v26 + v25 * v13 + 2 * v12;
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    uint64_t v32 = (unsigned char *)(v31 + v30 * v18 + v15);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v19;
    float v188 = v33 * *(float *)(v19 + 16);
    float v189 = v33 * *(float *)(v19 + 8);
    float v37 = v33 * *(float *)(v19 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v19 + 28);
    float v186 = *(float *)&v38;
    float v187 = v37;
    LOWORD(v38) = *(_WORD *)(v19 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 150);
    float v42 = (float)v38;
    float v191 = v42;
    LOWORD(v42) = *(_WORD *)(v19 + 152);
    float v182 = *(float *)(v19 + 40);
    float v183 = *(float *)(v19 + 36);
    float v180 = *(float *)(v19 + 48) * 0.25;
    float v181 = *(float *)(v19 + 44);
    float v178 = *(float *)(v19 + 56) * 0.25;
    float v179 = *(float *)(v19 + 52) * 0.25;
    float v176 = *(float *)(v19 + 64) * 0.25;
    float v177 = *(float *)(v19 + 60) * 0.25;
    float v43 = *(float *)(v19 + 72);
    float v175 = *(float *)(v19 + 68) * 0.25;
    float v45 = *(float *)(v19 + 76);
    float v44 = *(float *)(v19 + 80);
    float v46 = *(float *)(v19 + 84);
    float v47 = *(float *)(v19 + 88);
    float v48 = *(float *)(v19 + 92);
    float v49 = *(float *)(v19 + 96);
    float v50 = *(float *)(v19 + 100);
    float v51 = *(float *)(v19 + 104);
    uint64_t v52 = v19 + 164;
    result = (void *)(v19 + 16548);
    uint64_t v53 = v17[1];
    float v54 = (unsigned char *)(*v17 + v28 * v18 + v15);
    unsigned int v55 = *(unsigned __int8 *)(v19 + 124);
    uint64_t v56 = v20[1];
    float16x8_t v57 = (char *)(*v20 + v23 * v13 + 2 * v12);
    if (v55 >= 0x11) {
      char v58 = 0;
    }
    else {
      char v58 = 16 - v55;
    }
    uint64_t v59 = v53 + v29 * (v18 / 2) + v15;
    uint64_t v60 = v56 + v24 * (v13 / 2) + 2 * v12;
    char v61 = v58;
    float v190 = v36;
    float v184 = (float)LODWORD(v42);
    float v185 = v40;
    do
    {
      float32x4_t v62 = &v57[v23];
      float v63 = &v54[v28];
      if (v11)
      {
        size_t v64 = 0;
        float v65 = &v57[v23];
        float v66 = &v54[v28];
        do
        {
          int32x4_t v67 = (unsigned __int16 *)(v60 + 2 * v64);
          float v68 = (float)(v67[1] >> v61) - v35;
          float v69 = v189 * v68;
          float v70 = v36 * (float)((float)(*(unsigned __int16 *)v57 >> v61) - v34);
          float v71 = (float)(v189 * v68) + v70;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = (float)(v189 * v68) + v70;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = (float)(*v67 >> v61) - v35;
          float v74 = (float)(v187 * v68) + (float)(v73 * v188);
          float v75 = 8191.0;
          if ((float)(v70 + v74) <= 8191.0)
          {
            float v75 = v70 + v74;
            if ((float)(v70 + v74) < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v186 * v73;
          float v77 = (float)(v186 * v73) + v70;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v36 * (float)((float)(*((unsigned __int16 *)v57 + 1) >> v61) - v34);
          float v80 = 8191.0;
          if ((float)(v69 + v79) <= 8191.0)
          {
            float v80 = v69 + v79;
            if ((float)(v69 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = 8191.0;
          if ((float)(v74 + v79) <= 8191.0)
          {
            float v81 = v74 + v79;
            if ((float)(v74 + v79) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v76 + v79;
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v36 * (float)((float)(*(unsigned __int16 *)v65 >> v61) - v34);
          float v85 = 8191.0;
          if ((float)(v69 + v84) <= 8191.0)
          {
            float v85 = v69 + v84;
            if ((float)(v69 + v84) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = 8191.0;
          if ((float)(v74 + v84) <= 8191.0)
          {
            float v86 = v74 + v84;
            if ((float)(v74 + v84) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v76 + v84;
          BOOL v88 = (float)(v76 + v84) <= 8191.0;
          float v89 = 8191.0;
          if (v88)
          {
            float v89 = v87;
            if (v87 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v36 * (float)((float)(*((unsigned __int16 *)v65 + 1) >> v61) - v34);
          float v91 = v69 + v90;
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v74 + v90;
          BOOL v88 = (float)(v74 + v90) <= 8191.0;
          float v94 = 8191.0;
          if (v88)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v35;
          float v96 = v76 + v90;
          BOOL v88 = (float)(v76 + v90) <= 8191.0;
          float v97 = 8191.0;
          if (v88)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H17 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S24, H24
          }
          _H27 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          unsigned int v115 = llroundf(fminf(fmaxf(v86, 0.0), 8191.0));
          __asm { FCVT            S19, H27 }
          _H27 = *(_WORD *)(v52 + 2 * v115);
          __asm { FCVT            S27, H27 }
          _H2 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H1 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H25 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H25
            FCVT            S26, H26
          }
          float v127 = (float)((float)(v45 * _S5) + (float)(_S4 * v43)) + (float)(_S6 * v44);
          float v128 = (float)((float)(v47 * _S5) + (float)(_S4 * v46)) + (float)(_S6 * v48);
          _S4 = (float)((float)(v50 * _S5) + (float)(_S4 * v49)) + (float)(_S6 * v51);
          _S6 = (float)((float)(v45 * _S17) + (float)(_S7 * v43)) + (float)(_S24 * v44);
          _S3 = (float)((float)(v47 * _S17) + (float)(_S7 * v46)) + (float)(_S24 * v48);
          _S7 = (float)((float)(v50 * _S17) + (float)(_S7 * v49)) + (float)(_S24 * v51);
          _S17 = (float)((float)(v45 * _S27) + (float)(_S19 * v43)) + (float)(_S2 * v44);
          float v134 = (float)((float)(v47 * _S27) + (float)(_S19 * v46)) + (float)(_S2 * v48);
          float v135 = (float)((float)(v50 * _S27) + (float)(_S19 * v49)) + (float)(_S2 * v51);
          _S21 = (float)((float)(v45 * _S25) + (float)(_S1 * v43)) + (float)(_S26 * v44);
          float v137 = (float)((float)(v47 * _S25) + (float)(_S1 * v46)) + (float)(_S26 * v48);
          _S1 = (float)((float)(v50 * _S25) + (float)(_S1 * v49)) + (float)(_S26 * v51);
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H3
            FCVT            S7, H7
          }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          __asm { FCVT            S24, H17 }
          LOWORD(_S17) = *((_WORD *)result + llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          __asm { FCVT            S25, H17 }
          LOWORD(_S17) = *((_WORD *)result + llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S21) = *((_WORD *)result + llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H21
            FCVT            S1, H1
          }
          float v151 = (float)((float)((float)(v182 * _S2) + (float)(v183 * _S5)) + (float)(v181 * _S4)) + v39;
          if (v151 < v39) {
            float v152 = v39;
          }
          else {
            float v152 = (float)((float)((float)(v182 * _S2) + (float)(v183 * _S5)) + (float)(v181 * _S4)) + v39;
          }
          BOOL v88 = v151 <= v41;
          float v153 = (float)((float)((float)(v182 * _S19) + (float)(v183 * _S6)) + (float)(v181 * _S7)) + v39;
          if (!v88) {
            float v152 = v41;
          }
          char v154 = llroundf(v152);
          if (v153 < v39) {
            float v155 = v39;
          }
          else {
            float v155 = (float)((float)((float)(v182 * _S19) + (float)(v183 * _S6)) + (float)(v181 * _S7)) + v39;
          }
          BOOL v88 = v153 <= v41;
          float v156 = (float)((float)((float)(v182 * _S24) + (float)(v183 * _S3)) + (float)(v181 * _S25)) + v39;
          if (!v88) {
            float v155 = v41;
          }
          char v157 = llroundf(v155);
          if (v156 < v39) {
            float v158 = v39;
          }
          else {
            float v158 = (float)((float)((float)(v182 * _S24) + (float)(v183 * _S3)) + (float)(v181 * _S25)) + v39;
          }
          BOOL v88 = v156 <= v41;
          float v159 = (float)((float)((float)(v182 * _S21) + (float)(v183 * _S17)) + (float)(v181 * _S1)) + v39;
          if (!v88) {
            float v158 = v41;
          }
          char v160 = llroundf(v158);
          if (v159 < v39) {
            float v161 = v39;
          }
          else {
            float v161 = (float)((float)((float)(v182 * _S21) + (float)(v183 * _S17)) + (float)(v181 * _S1)) + v39;
          }
          if (v159 <= v41) {
            float v162 = v161;
          }
          else {
            float v162 = v41;
          }
          float v163 = (float)((float)(_S5 + _S6) + _S3) + _S17;
          float v164 = (float)((float)(_S2 + _S19) + _S24) + _S21;
          *float v54 = v154;
          v54[1] = v157;
          *float v66 = v160;
          v66[1] = llroundf(v162);
          float v165 = (float)((float)(_S4 + _S7) + _S25) + _S1;
          float v166 = (float)((float)(v185 + (float)(v163 * v180)) + (float)(v164 * v179)) + (float)(v165 * v178);
          float v167 = v184;
          if (v166 <= v184)
          {
            float v167 = (float)((float)(v185 + (float)(v163 * v180)) + (float)(v164 * v179)) + (float)(v165 * v178);
            if (v166 < v191) {
              float v167 = v191;
            }
          }
          float v168 = (float)((float)(v185 + (float)(v163 * v177)) + (float)(v164 * v176)) + (float)(v165 * v175);
          *(unsigned char *)(v59 + v64) = llroundf(v167);
          float v169 = v184;
          float v35 = v95;
          if (v168 <= v184)
          {
            float v169 = v168;
            if (v168 < v191) {
              float v169 = v191;
            }
          }
          v57 += 4;
          v65 += 4;
          v54 += 2;
          v66 += 2;
          *(unsigned char *)(v59 + v64 + 1) = llroundf(v169);
          v64 += 2;
          float v36 = v190;
        }
        while (v11 > v64);
      }
      float16x8_t v57 = &v62[v23];
      v60 += v24;
      float v54 = &v63[v28];
      v59 += v29;
      v10 += 2;
    }
    while (v14 > v10);
    if (v26 && v31)
    {
      uint64_t v170 = 0;
      do
      {
        if (v11)
        {
          size_t v171 = v11;
          uint32x4_t v172 = v32;
          uint32x4_t v173 = (unsigned __int16 *)v27;
          do
          {
            unsigned int v174 = *v173++;
            *v172++ = llroundf((float)v174 * 0.0038911);
            --v171;
          }
          while (v171);
        }
        v27 += v25;
        v32 += v30;
        ++v170;
      }
      while (v170 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11) {
          result = memset(v32, 255, v11);
        }
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_420vf_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_420vf_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, int16x4_t _D0)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (uint64_t *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = (float32x2_t *)*((void *)result + 19);
    uint64_t v18 = (uint64_t *)*((void *)result + 7);
    uint64_t v19 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = *v20;
    uint64_t v25 = v20[1];
    uint64_t v26 = v20[2];
    uint64_t v162 = v15[2];
    uint64_t v163 = v18[2];
    _D0.i32[0] = v17[17].i32[0];
    float v27 = (float)_D0.u32[0];
    LODWORD(v20) = v17[17].u16[2];
    unsigned int v28 = v17[17].u16[3];
    v29.i32[0] = v17[3].i32[1];
    unsigned int v30 = v17[18].u16[0];
    unsigned int v31 = v17[18].u16[1];
    unsigned int v32 = v17[18].u16[2];
    unsigned int v33 = v17[18].u16[3];
    unsigned int v34 = v17[19].u16[0];
    _S19 = v17[4].f32[1];
    _S1 = v17[5].f32[0];
    _S2 = v17[5].f32[1];
    v38.i32[0] = v17[6].i32[0];
    v40.i32[0] = v17[6].i32[1];
    v39.i32[0] = v17[7].i32[0];
    float v41 = (float)v20;
    *(short float *)_D0.i16 = (short float)v20;
    float v166 = (float)v28;
    uint64_t v42 = v163 + v23 * v12 + 2 * v11;
    float v43 = (unsigned char *)(v162 + v26 * v16 + v14);
    v4.f32[0] = v27 / (float)v17[16].u32[0];
    _S5 = v4.f32[0] * v17->f32[0];
    float v45 = (float)v30;
    float v165 = (float)v31;
    float v46 = (float)v32;
    float v183 = (float)v33;
    float v47 = (float)v34;
    int16x8_t v48 = vdupq_lane_s16(_D0, 0);
    __asm { FCVT            H8, S5 }
    short float v54 = -(short float)v28;
    v29.i32[1] = v17[1].i32[0];
    *(float32x2_t *)v3.f32 = vmul_n_f32(v29, v4.f32[0]);
    *(float32x2_t *)v4.f32 = vmul_n_f32(v17[2], v4.f32[0]);
    float16x8_t v182 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float32x4_t v57 = (float32x4_t)vmulq_n_f16(v182, v54);
    float16x8_t v164 = (float16x8_t)v57;
    float16x8_t v180 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v55 = vmulq_n_f16(v180, v54);
    v38.i32[1] = v17[7].i32[1];
    __asm { FMOV            V18.2S, #0.25 }
    *(float32x2_t *)v57.f32 = vmul_f32(v38, _D18);
    *(int16x4_t *)&v59.u32[2] = _D0;
    int32x4_t v58 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v57), 0);
    v40.i32[1] = v17[8].i32[0];
    *(float32x2_t *)v59.f32 = vmul_f32(v40, _D18);
    *(int16x4_t *)&v61.u32[2] = _D0;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v59), 0);
    v39.i32[1] = v17[8].i32[1];
    *(float32x2_t *)v61.f32 = vmul_f32(v39, _D18);
    int16x4_t v62 = (int16x4_t)vcvt_f16_f32(v61);
    __asm { FCVT            H12, S19 }
    float16x8_t v64 = (float16x8_t)vdupq_lane_s32((int32x2_t)v62, 0);
    *(short float *)v62.i16 = (short float)v30;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v31;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v32;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v33;
    int16x8_t v68 = vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v34;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(v62, 0);
    __asm { FCVT            H11, S1 }
    unsigned int v71 = v17[15].u8[4];
    if (v71 >= 0x11) {
      unsigned __int8 v72 = 0;
    }
    else {
      unsigned __int8 v72 = 16 - v71;
    }
    if (v16 >= 0) {
      uint64_t v73 = v16;
    }
    else {
      uint64_t v73 = v16 + 1;
    }
    uint64_t v74 = *v15;
    float v75 = (unsigned char *)(v15[1] + v25 * (v73 >> 1) + v14);
    result = (unsigned __int8 *)(v74 + v24 * v16 + v14);
    if (v12 >= 0) {
      uint64_t v76 = v12;
    }
    else {
      uint64_t v76 = v12 + 1;
    }
    uint64_t v77 = *v18;
    uint64_t v78 = v18[1] + v22 * (v76 >> 1) + 2 * v11;
    float v79 = (uint16x8_t *)(v77 + v21 * v12 + 2 * v11);
    unsigned __int8 v80 = v72;
    uint16x8_t v81 = (uint16x8_t)vdupq_n_s16(-v72);
    __asm { FCVT            H0, S2 }
    uint64_t v82 = v3.i64[0];
    float v181 = v4.f32[0];
    uint64_t v83 = v57.i64[0];
    float v179 = v59.f32[0];
    float16x8_t v178 = (float16x8_t)v68;
    uint64_t v84 = v61.i64[0];
    int32x4_t v176 = v58;
    float16x8_t v177 = v55;
    float16x8_t v174 = v64;
    float16x8_t v175 = v60;
    int16x8_t v172 = v48;
    float16x8_t v173 = v66;
    float16x8_t v170 = v67;
    short float v171 = _H12;
    short float v168 = _H11;
    float16x8_t v169 = v69;
    int16x4_t v167 = _D0;
    do
    {
      float v85 = &v79->i8[v21];
      float v86 = &result[v24];
      if ((int)v10 < 8)
      {
        size_t v116 = 0;
        unsigned int v115 = v75;
        float v90 = (int8x8_t *)&result[v24];
        float v89 = (uint16x8_t *)v78;
        BOOL v88 = (uint16x8_t *)((char *)v79 + v21);
      }
      else
      {
        uint64_t v87 = 0;
        BOOL v88 = (uint16x8_t *)((char *)v79 + v21);
        float v89 = (uint16x8_t *)v78;
        float v90 = (int8x8_t *)&result[v24];
        float16x8_t v91 = (float16x8_t)v48;
        do
        {
          uint16x8_t v92 = *v89++;
          float16x8_t v93 = vcvtq_f16_u16(vshlq_u16(v92, v81));
          float16x8_t v94 = v55;
          int16x8_t v95 = (int16x8_t)vmlaq_f16(v164, v182, v93);
          int8x16_t v96 = (int8x16_t)vmlaq_f16(v55, v180, v93);
          v93.i64[0] = vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).u64[0];
          *(int16x4_t *)v97.i8 = vuzp1_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v93.i8);
          *(int16x4_t *)v93.i8 = vuzp2_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v93.i8);
          v93.u64[1] = (unint64_t)_D0;
          v97.u64[1] = (unint64_t)_D0;
          v95.i64[0] = vextq_s8(v96, v96, 8uLL).u64[0];
          float16x8_t v98 = (float16x8_t)v58;
          *(float16x4_t *)v95.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v95.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v95.i8));
          v95.u64[1] = (unint64_t)_D0;
          uint16x8_t v99 = *v79++;
          float16x8_t v100 = (float16x8_t)vzip1q_s16(v95, v95);
          float16x8_t v101 = vcvtq_f16_u16(vshlq_u16(v99, v81));
          uint16x8_t v102 = *v88++;
          float16x8_t v103 = (float16x8_t)vzip1q_s16(v97, v97);
          float16x8_t v104 = vsubq_f16(v101, v91);
          float16x8_t v105 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v102, v81)), v91);
          float16x8_t v106 = (float16x8_t)vzip1q_s16((int16x8_t)v93, (int16x8_t)v93);
          float16x8_t v107 = vmlaq_n_f16(v106, v105, _H8);
          float16x8_t v108 = vmlaq_n_f16(v106, v104, _H8);
          float16x8_t v109 = vmlaq_n_f16(v100, v104, _H8);
          float16x8_t v110 = vmlaq_n_f16(v103, v104, _H8);
          float16x8_t v111 = vmlaq_n_f16(v103, v105, _H8);
          float16x8_t v112 = vmlaq_n_f16(v100, v105, _H8);
          float16x8_t v113 = vmlaq_n_f16(vmlaq_n_f16(v65, v108, _H12), v109, _H11);
          int16x8_t v114 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v107, (int16x8_t)v112), vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v107, (int16x8_t)v112), vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v108, (int16x8_t)v109), (float16x8_t)vuzp2q_s16((int16x8_t)v108, (int16x8_t)v109))));
          int32x4_t v58 = (int32x4_t)v98;
          *(int8x8_t *)result = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v113, v110, *(short float *)_D0.i16), v65), v67)));
          result += 8;
          float16x8_t v55 = v94;
          *v90++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v107, _H12), v112, _H11), v111, *(short float *)_D0.i16), v65), v67)));
          *(int8x8_t *)&v75[v87] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v66, v98, (float16x8_t)vzip1q_s16(v114, v114)), v60, (float16x8_t)vzip2q_s16(v114, v114)), v64, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v111, (int16x8_t)v111), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v110,
                                                                                     (int16x8_t)v110),
                                                                      (float16x8_t)vtrn2q_s16((int16x8_t)v110, (int16x8_t)v110)), (float16x8_t)vtrn1q_s16((int16x8_t)v111, (int16x8_t)v111)))), v178), v69)));
          v87 += 8;
        }
        while ((int)v87 < (int)v10 - 7);
        unsigned int v115 = &v75[v87];
        size_t v116 = v10 & 0xFFFFFFF8;
      }
      while (v10 > v116)
      {
        float v117 = (float)(v89->u16[0] >> v80) - v166;
        float v118 = (float)(v89->u16[1] >> v80) - v166;
        float v119 = *((float *)&v82 + 1) * v118;
        float v120 = (float)(v4.f32[1] * v118) + (float)(v117 * v181);
        float v121 = *(float *)&v82 * v117;
        float v122 = _S5 * (float)((float)(v79->u16[0] >> v80) - v41);
        float v123 = _S5 * (float)((float)(v79->u16[1] >> v80) - v41);
        float v124 = _S5 * (float)((float)(v88->u16[0] >> v80) - v41);
        float v125 = _S5 * (float)((float)(v88->u16[1] >> v80) - v41);
        float v126 = v119 + v122;
        float v127 = v122 + v120;
        float v128 = v121 + v122;
        float v129 = v119 + v123;
        float v130 = v120 + v123;
        float v131 = v121 + v123;
        float v132 = v119 + v124;
        float v133 = v120 + v124;
        float v134 = v121 + v124;
        float v135 = v119 + v125;
        float v136 = v120 + v125;
        float v137 = v121 + v125;
        float v138 = (float)((float)((float)(_S1 * v127) + (float)(_S19 * v126)) + (float)(_S2 * v128)) + v45;
        if (v138 < v45) {
          float v139 = v45;
        }
        else {
          float v139 = (float)((float)((float)(_S1 * v127) + (float)(_S19 * v126)) + (float)(_S2 * v128)) + v45;
        }
        BOOL v140 = v138 <= v46;
        float v141 = (float)((float)((float)(_S1 * v130) + (float)(_S19 * v129)) + (float)(_S2 * v131)) + v45;
        if (!v140) {
          float v139 = v46;
        }
        unsigned __int8 v142 = llroundf(v139);
        if (v141 < v45) {
          float v143 = v45;
        }
        else {
          float v143 = (float)((float)((float)(_S1 * v130) + (float)(_S19 * v129)) + (float)(_S2 * v131)) + v45;
        }
        BOOL v140 = v141 <= v46;
        float v144 = (float)((float)((float)(_S1 * v133) + (float)(_S19 * v132)) + (float)(_S2 * v134)) + v45;
        if (!v140) {
          float v143 = v46;
        }
        unsigned __int8 v145 = llroundf(v143);
        if (v144 < v45) {
          float v146 = v45;
        }
        else {
          float v146 = (float)((float)((float)(_S1 * v133) + (float)(_S19 * v132)) + (float)(_S2 * v134)) + v45;
        }
        BOOL v140 = v144 <= v46;
        float v147 = (float)((float)((float)(_S1 * v136) + (float)(_S19 * v135)) + (float)(_S2 * v137)) + v45;
        if (!v140) {
          float v146 = v46;
        }
        __int8 v148 = llroundf(v146);
        if (v147 < v45) {
          float v149 = v45;
        }
        else {
          float v149 = (float)((float)((float)(_S1 * v136) + (float)(_S19 * v135)) + (float)(_S2 * v137)) + v45;
        }
        if (v147 > v46) {
          float v149 = v46;
        }
        float v150 = (float)((float)(v126 + v129) + v132) + v135;
        float v151 = (float)((float)(v127 + v130) + v133) + v136;
        void *result = v142;
        result[1] = v145;
        v90->i8[0] = v148;
        v90->i8[1] = llroundf(v149);
        float v152 = (float)((float)(v128 + v131) + v134) + v137;
        float v153 = (float)((float)(v165 + (float)(v150 * *(float *)&v83)) + (float)(v151 * v179))
             + (float)(v152 * *(float *)&v84);
        float v154 = v47;
        if (v153 <= v47)
        {
          float v154 = (float)((float)(v165 + (float)(v150 * *(float *)&v83)) + (float)(v151 * v179))
               + (float)(v152 * *(float *)&v84);
          if (v153 < v183) {
            float v154 = v183;
          }
        }
        float v155 = (float)((float)(v165 + (float)(v150 * *((float *)&v83 + 1))) + (float)(v151 * v59.f32[1]))
             + (float)(v152 * *((float *)&v84 + 1));
        *unsigned int v115 = llroundf(v154);
        float v156 = v47;
        if (v155 <= v47)
        {
          float v156 = v155;
          if (v155 < v183) {
            float v156 = v183;
          }
        }
        v116 += 2;
        float v89 = (uint16x8_t *)((char *)v89 + 4);
        float v79 = (uint16x8_t *)((char *)v79 + 4);
        BOOL v88 = (uint16x8_t *)((char *)v88 + 4);
        v115[1] = llroundf(v156);
        result += 2;
        float v90 = (int8x8_t *)((char *)v90 + 2);
        v115 += 2;
      }
      float v79 = (uint16x8_t *)&v85[v21];
      v78 += v22;
      result = &v86[v24];
      v75 += v25;
      v9 += 2;
      int32x4_t v58 = v176;
      float16x8_t v55 = v177;
      float16x8_t v64 = v174;
      float16x8_t v60 = v175;
      int16x8_t v48 = v172;
      float16x8_t v66 = v173;
      float16x8_t v67 = v170;
      _H12 = v171;
      _H11 = v168;
      float16x8_t v69 = v169;
      _D0 = v167;
    }
    while (v13 > v9);
    if (v163 && v162)
    {
      uint64_t v157 = 0;
      do
      {
        if (v10)
        {
          size_t v158 = v10;
          float v159 = v43;
          char v160 = (unsigned __int16 *)v42;
          do
          {
            unsigned int v161 = *v160++;
            *v159++ = llroundf((float)v161 * 0.0038911);
            --v158;
          }
          while (v158);
        }
        v42 += v23;
        v43 += v26;
        ++v157;
      }
      while (v157 != v13);
    }
    else if (v162)
    {
      do
      {
        if (v10) {
          result = (unsigned __int8 *)memset(v43, 255, v10);
        }
        v43 += v26;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_420vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_420vf_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    size_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 36);
    uint64_t v13 = *(void *)(result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = *((void *)result + 14);
    uint64_t v16 = (void *)*((void *)result + 16);
    uint64_t v17 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7);
    uint64_t v18 = *((void *)result + 19);
    uint64_t v19 = (uint64_t *)*((void *)result + 7);
    uint64_t v20 = (uint64_t *)*((void *)result + 8);
    uint64_t v21 = (uint64_t *)*((void *)result + 17);
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = v25 + v24 * v13 + 2 * v12;
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (unsigned char *)(v30 + v29 * v17 + v15);
    *(float *)&unsigned int v32 = (float)*(unsigned int *)(v18 + 128);
    *(float *)&unsigned int v33 = (float)*(unsigned int *)(v18 + 136);
    float v34 = *(float *)&v33 / *(float *)&v32;
    LOWORD(v32) = *(_WORD *)(v18 + 140);
    float v35 = (float)v32;
    LOWORD(v33) = *(_WORD *)(v18 + 142);
    float v36 = (float)v33;
    float v37 = v34 * *(float *)v18;
    float v118 = v34 * *(float *)(v18 + 16);
    float v119 = v34 * *(float *)(v18 + 8);
    float v117 = v34 * *(float *)(v18 + 20);
    float v38 = *(float *)(v18 + 28);
    float v39 = v34 * v38;
    LOWORD(v38) = *(_WORD *)(v18 + 144);
    float v40 = (float)LODWORD(v38);
    LOWORD(v2) = *(_WORD *)(v18 + 146);
    float v41 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v18 + 148);
    float v42 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v18 + 150);
    float v43 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v18 + 152);
    float v44 = (float)v5;
    float v45 = *(float *)(v18 + 36);
    float v46 = *(float *)(v18 + 40);
    float v47 = *(float *)(v18 + 44);
    float v48 = *(float *)(v18 + 48) * 0.25;
    float v49 = *(float *)(v18 + 52) * 0.25;
    float v50 = *(float *)(v18 + 56) * 0.25;
    float v51 = *(float *)(v18 + 60) * 0.25;
    float v52 = *(float *)(v18 + 64) * 0.25;
    float v53 = *(float *)(v18 + 68) * 0.25;
    uint64_t v54 = v16[1];
    float16x8_t v55 = (unsigned char *)(*v16 + v27 * v17 + v15);
    unsigned int v56 = *(unsigned __int8 *)(v18 + 124);
    char v57 = 16 - v56;
    BOOL v58 = v56 >= 0x11;
    uint64_t v59 = *v19;
    uint64_t v60 = v19[1];
    result = (unsigned __int8 *)(v59 + v22 * v13 + 2 * v12);
    if (v58) {
      char v57 = 0;
    }
    uint64_t v61 = v54 + v28 * (v17 / 2) + v15;
    uint64_t v62 = v60 + v23 * (v13 / 2) + 2 * v12;
    char v63 = v57;
    do
    {
      float16x8_t v64 = &result[v22];
      float16x8_t v65 = &v55[v27];
      if (v11)
      {
        size_t v66 = 0;
        float16x8_t v67 = &result[v22];
        int16x8_t v68 = &v55[v27];
        do
        {
          float16x8_t v69 = (unsigned __int16 *)(v62 + 2 * v66);
          float v70 = (float)(*v69 >> v63) - v36;
          float v71 = (float)(v69[1] >> v63) - v36;
          float v72 = v119 * v71;
          float v73 = (float)(v117 * v71) + (float)(v70 * v118);
          float v74 = v39 * v70;
          float v75 = v37 * (float)((float)(*(unsigned __int16 *)result >> v63) - v35);
          float v76 = v37 * (float)((float)(*((unsigned __int16 *)result + 1) >> v63) - v35);
          float v77 = v37 * (float)((float)(*(unsigned __int16 *)v67 >> v63) - v35);
          float v78 = v37 * (float)((float)(*((unsigned __int16 *)v67 + 1) >> v63) - v35);
          float v79 = v72 + v75;
          float v80 = v75 + v73;
          float v81 = v74 + v75;
          float v82 = v72 + v76;
          float v83 = v73 + v76;
          float v84 = v74 + v76;
          float v85 = v72 + v77;
          float v86 = v73 + v77;
          float v87 = v74 + v77;
          float v88 = v72 + v78;
          float v89 = v73 + v78;
          float v90 = v74 + v78;
          float v91 = (float)((float)((float)(v46 * v80) + (float)(v45 * v79)) + (float)(v47 * v81)) + v40;
          if (v91 < v40) {
            float v92 = v40;
          }
          else {
            float v92 = (float)((float)((float)(v46 * v80) + (float)(v45 * v79)) + (float)(v47 * v81)) + v40;
          }
          BOOL v93 = v91 <= v42;
          float v94 = (float)((float)((float)(v46 * v83) + (float)(v45 * v82)) + (float)(v47 * v84)) + v40;
          if (!v93) {
            float v92 = v42;
          }
          char v95 = llroundf(v92);
          if (v94 < v40) {
            float v96 = v40;
          }
          else {
            float v96 = (float)((float)((float)(v46 * v83) + (float)(v45 * v82)) + (float)(v47 * v84)) + v40;
          }
          BOOL v93 = v94 <= v42;
          float v97 = (float)((float)((float)(v46 * v86) + (float)(v45 * v85)) + (float)(v47 * v87)) + v40;
          if (!v93) {
            float v96 = v42;
          }
          char v98 = llroundf(v96);
          if (v97 < v40) {
            float v99 = v40;
          }
          else {
            float v99 = (float)((float)((float)(v46 * v86) + (float)(v45 * v85)) + (float)(v47 * v87)) + v40;
          }
          BOOL v93 = v97 <= v42;
          float v100 = (float)((float)((float)(v46 * v89) + (float)(v45 * v88)) + (float)(v47 * v90)) + v40;
          if (!v93) {
            float v99 = v42;
          }
          char v101 = llroundf(v99);
          if (v100 < v40) {
            float v102 = v40;
          }
          else {
            float v102 = (float)((float)((float)(v46 * v89) + (float)(v45 * v88)) + (float)(v47 * v90)) + v40;
          }
          if (v100 > v42) {
            float v102 = v42;
          }
          float v103 = (float)((float)(v79 + v82) + v85) + v88;
          float v104 = (float)((float)(v80 + v83) + v86) + v89;
          *float16x8_t v55 = v95;
          v55[1] = v98;
          unsigned char *v68 = v101;
          v68[1] = llroundf(v102);
          float v105 = (float)(v41 + (float)(v103 * v48)) + (float)(v104 * v49);
          float v106 = (float)((float)(v81 + v84) + v87) + v90;
          float v107 = v105 + (float)(v106 * v50);
          float v108 = v44;
          if (v107 <= v44)
          {
            float v108 = v105 + (float)(v106 * v50);
            if (v107 < v43) {
              float v108 = v43;
            }
          }
          float v109 = (float)(v41 + (float)(v103 * v51)) + (float)(v104 * v52);
          float v110 = v109 + (float)(v106 * v53);
          *(unsigned char *)(v61 + v66) = llroundf(v108);
          float v111 = v44;
          if (v110 <= v44)
          {
            float v111 = v109 + (float)(v106 * v53);
            if (v110 < v43) {
              float v111 = v43;
            }
          }
          result += 4;
          v67 += 4;
          v55 += 2;
          v68 += 2;
          *(unsigned char *)(v61 + v66 + 1) = llroundf(v111);
          v66 += 2;
        }
        while (v11 > v66);
      }
      result = &v64[v22];
      v62 += v23;
      float16x8_t v55 = &v65[v27];
      v61 += v28;
      v10 += 2;
    }
    while (v14 > v10);
    if (v25 && v30)
    {
      uint64_t v112 = 0;
      do
      {
        if (v11)
        {
          size_t v113 = v11;
          int16x8_t v114 = v31;
          unsigned int v115 = (unsigned __int16 *)v26;
          do
          {
            unsigned int v116 = *v115++;
            *v114++ = llroundf((float)v116 * 0.0038911);
            --v113;
          }
          while (v113);
        }
        v26 += v24;
        v31 += v29;
        ++v112;
      }
      while (v112 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          result = (unsigned __int8 *)memset(v31, 255, v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float32x4_t a5, float32x4_t a6, double a7, double a8, int16x4_t a9)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = 2 * *result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (2 * v17 != 2 * v16)
  {
    unint64_t v18 = 0;
    unint64_t v19 = *(void *)(result + 20);
    uint64_t v20 = *(void *)(result + 36);
    uint64_t v21 = *(void *)(result + 44) + 2 * v16;
    unint64_t v22 = 2 * v17 - 2 * v16;
    uint64_t v23 = *((void *)result + 14);
    uint64_t v24 = (uint64_t *)*((void *)result + 16);
    uint64_t v25 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v15);
    uint64_t v26 = (float32x2_t *)*((void *)result + 19);
    uint64_t v27 = (uint64_t *)*((void *)result + 7);
    uint64_t v28 = (uint64_t *)*((void *)result + 8);
    uint64_t v29 = (uint64_t *)*((void *)result + 17);
    uint64_t v31 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v354 = v28[2];
    uint64_t v357 = v27[2];
    uint64_t v32 = *v29;
    uint64_t v33 = v24[2];
    uint64_t v355 = v29[2];
    uint64_t v356 = v33;
    unsigned int v34 = v26[17].u16[2];
    unsigned int v35 = v26[17].u16[3];
    unsigned int v36 = v26[18].u16[0];
    float v37 = (float)v34;
    *(short float *)v13.i16 = (short float)v34;
    unsigned int v38 = v26[18].u16[1];
    float v413 = v26[5].f32[1];
    unsigned int v42 = v26[18].u16[2];
    float v415 = (float)v35;
    *(short float *)a5.i16 = (short float)v35;
    unsigned int v43 = v26[18].u16[3];
    *(float *)&a3 = (float)v36;
    float v364 = (float)v36;
    *(short float *)&a3 = (short float)v36;
    unsigned int v44 = v26[19].u16[0];
    _S7 = v26[4].i32[1];
    _S15 = v26[5].i32[0];
    float v47 = (float)v38;
    float v390 = (float)v42;
    *(float *)&a8 = (float)v43;
    float v416 = (float)v43;
    float v48 = (float)v44;
    *(short float *)&a8 = (short float)v38;
    *(short float *)a9.i16 = (short float)v42;
    *(short float *)v11.i16 = (short float)v43;
    *(short float *)v12.i16 = (short float)v44;
    unsigned int v49 = v26[16].u8[4];
    unsigned __int8 v50 = 16 - v49;
    if (v49 >= 0x11) {
      unsigned __int8 v50 = 0;
    }
    unsigned int v51 = v26[15].u8[4];
    if (v51 >= 0x11) {
      unsigned __int8 v52 = 0;
    }
    else {
      unsigned __int8 v52 = 16 - v51;
    }
    if (v25 >= 0) {
      uint64_t v53 = v25;
    }
    else {
      uint64_t v53 = v25 + 1;
    }
    uint64_t v54 = *v24;
    uint64_t v362 = v29[1];
    uint64_t v55 = v24[1] + v362 * (v53 >> 1);
    unsigned int v56 = (char *)&v26[2068] + 4;
    char v57 = (char *)(v357 + v354 * v21 + 2 * v20);
    BOOL v58 = (char *)(v33 + v29[2] * v25 + 2 * v23);
    float v59 = 8191.0 / (float)v26[16].u32[0];
    _S4 = v59 * v26->f32[0];
    uint64_t v61 = v54 + v32 * v25;
    uint64_t v62 = (char *)&v26[20] + 4;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(v13, 0);
    *(short float *)a5.i16 = -*(short float *)a5.i16;
    a6.i32[1] = v26[1].i32[0];
    a6.i32[0] = v26[3].i32[1];
    *(float32x2_t *)a6.f32 = vmul_n_f32(*(float32x2_t *)a6.f32, v59);
    unint64_t v412 = a6.i64[0];
    float16x8_t v64 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    *(float32x2_t *)v10.f32 = vmul_n_f32(v26[2], v59);
    *(double *)&v65.i64[1] = a3;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v67 = vmulq_n_f16(v64, *(short float *)a5.i16);
    float16x8_t v68 = vmulq_n_f16(v66, *(short float *)a5.i16);
    __asm { FMOV            V1.2S, #0.25 }
    v39.i32[1] = v26[7].i32[1];
    v39.i32[0] = v26[6].i32[0];
    *(float32x2_t *)a5.f32 = vmul_f32(v39, _D1);
    unint64_t v411 = a5.i64[0];
    int32x4_t v74 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    v40.i32[1] = v26[8].i32[0];
    v40.i32[0] = v26[6].i32[1];
    *(float32x2_t *)v9.f32 = vmul_f32(v40, _D1);
    int32x4_t v410 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    v41.i32[1] = v26[8].i32[1];
    v41.i32[0] = v26[7].i32[0];
    *(float32x2_t *)v65.f32 = vmul_f32(v41, _D1);
    uint64_t v409 = v65.i64[0];
    float16x8_t v365 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v65), 0);
    int16x8_t v75 = vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    int16x8_t v408 = vdupq_lane_s16(*(int16x4_t *)&a8, 0);
    float16x8_t v399 = (float16x8_t)vdupq_lane_s16(v11, 0);
    float16x8_t v400 = (float16x8_t)vdupq_lane_s16(a9, 0);
    float v76 = (_WORD *)(v55 + 2 * v23);
    result = (unsigned __int8 *)(v61 + 2 * v23);
    if (v21 >= 0) {
      uint64_t v77 = v21;
    }
    else {
      uint64_t v77 = v21 + 1;
    }
    uint16x8_t v78 = (uint16x8_t)vdupq_n_s16(-v52);
    uint64_t v79 = *v27;
    uint64_t v80 = v27[1];
    uint64_t v363 = v30;
    float16x8_t v398 = (float16x8_t)vdupq_lane_s16(v12, 0);
    float v81 = (char *)&v26[4116] + 4;
    uint64_t v82 = v80 + v30 * (v77 >> 1) + 2 * v20;
    float v83 = (uint16x8_t *)(v79 + v31 * v21 + 2 * v20);
    __asm { FCVT            H9, S4 }
    short float v382 = _H9;
    float v407 = v26[4].f32[1];
    __asm { FCVT            H9, S7 }
    float v406 = v26[5].f32[0];
    __asm { FCVT            H5, S15 }
    short float v380 = _H5;
    _S5 = v26[5].i32[1];
    __asm { FCVT            H5, S5 }
    float v386 = v26[13].f32[1];
    __asm { FCVT            H0, S0 }
    float v385 = v26[14].f32[0];
    __asm { FCVT            H1, S1 }
    float v384 = v26[14].f32[1];
    __asm { FCVT            H2, S2 }
    float v383 = v26[15].f32[0];
    __asm { FCVT            H3, S3 }
    float v397 = v26[9].f32[0];
    __asm { FCVT            H7, S18 }
    short float v374 = _H7;
    float v396 = v26[9].f32[1];
    __asm { FCVT            H7, S19 }
    float16x8_t v94 = (float16x8_t)v74;
    float v95 = v415;
    float v395 = v26[10].f32[0];
    __asm { FCVT            H10, S10 }
    short float v372 = _H10;
    float v394 = v26[10].f32[1];
    __asm { FCVT            H11, S11 }
    float v393 = v26[11].f32[0];
    __asm { FCVT            H13, S13 }
    float v392 = v26[11].f32[1];
    __asm { FCVT            H10, S17 }
    short float v369 = _H10;
    float v391 = v26[12].f32[0];
    __asm { FCVT            H10, S24 }
    short float v368 = _H10;
    float v389 = v26[12].f32[1];
    __asm { FCVT            H10, S20 }
    short float v367 = _H10;
    float v387 = v26[13].f32[0];
    __asm { FCVT            H10, S28 }
    short float v366 = _H10;
    float16x8_t v103 = (float16x8_t)v75;
    uint16x8_t v418 = (uint16x8_t)vdupq_n_s16(v50);
    float16x8_t v104 = (float16x8_t)v408;
    float16x8_t v105 = (float16x8_t)v410;
    uint16x8_t v417 = v78;
    short float v377 = _H1;
    short float v378 = _H0;
    short float v375 = _H3;
    short float v376 = _H2;
    uint64_t v361 = v31;
    float16x8_t v405 = v64;
    float16x8_t v403 = v68;
    float16x8_t v404 = v66;
    float16x8_t v402 = v94;
    float16x8_t v401 = v67;
    float16x8_t v388 = v63;
    float v414 = _S4;
    short float v381 = _H9;
    short float v379 = *(short float *)&_S5;
    short float v373 = _H7;
    short float v370 = _H13;
    short float v371 = _H11;
    float v359 = v37;
    float v360 = v47;
    float v358 = v48;
    do
    {
      float v106 = &v83->i8[v31];
      float v107 = &result[v32];
      if ((int)v19 < 8)
      {
        unint64_t v221 = 0;
        uint16x8_t v220 = v76;
        float v111 = (uint16x8_t *)&result[v32];
        uint64_t v219 = (unsigned __int16 *)v82;
        float v110 = (uint16x8_t *)((char *)v83 + v31);
      }
      else
      {
        uint64_t v108 = 0;
        int v109 = 0;
        float v110 = (uint16x8_t *)((char *)v83 + v31);
        float v111 = (uint16x8_t *)&result[v32];
        v112.i64[0] = 0x9000900090009000;
        v112.i64[1] = 0x9000900090009000;
        do
        {
          float16x8_t v113 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)(v82 + v108 * 2), v78));
          int8x16_t v114 = (int8x16_t)vmlaq_f16(v67, v64, v113);
          int8x16_t v115 = (int8x16_t)vmlaq_f16(v68, v66, v113);
          v113.i64[0] = vextq_s8(v114, v114, 8uLL).u64[0];
          *(int16x4_t *)v116.i8 = vuzp1_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8);
          *(int16x4_t *)v113.i8 = vuzp2_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8);
          v113.i64[1] = v113.i64[0];
          float16x8_t v117 = (float16x8_t)vzip1q_s16((int16x8_t)v113, (int16x8_t)v113);
          v116.i64[1] = v113.i64[0];
          float16x8_t v118 = (float16x8_t)vzip1q_s16(v116, v116);
          v113.i64[0] = vextq_s8(v115, v115, 8uLL).u64[0];
          *(float16x4_t *)v113.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v113.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v113.i8));
          v113.i64[1] = v113.i64[0];
          uint16x8_t v119 = *v83++;
          float16x8_t v120 = (float16x8_t)vzip1q_s16((int16x8_t)v113, (int16x8_t)v113);
          float16x8_t v121 = vcvtq_f16_u16(vshlq_u16(v119, v78));
          uint16x8_t v122 = *v110++;
          float16x8_t v123 = vsubq_f16(v121, v63);
          float16x8_t v124 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v122, v78)), v63);
          float16x8_t v125 = vmlaq_n_f16(v117, v123, v382);
          float16x8_t v126 = vmlaq_n_f16(v117, v124, v382);
          float16x8_t v127 = vmlaq_n_f16(v120, v123, v382);
          float16x8_t v128 = vmlaq_n_f16(v120, v124, v382);
          float16x8_t v129 = vmlaq_n_f16(v118, v123, v382);
          float16x8_t v130 = vmlaq_n_f16(v118, v124, v382);
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v112));
          float16x8_t v132 = (float16x8_t)vmovl_high_u16(v131);
          *(void *)&long long v133 = v132.u32[2];
          *((void *)&v133 + 1) = v132.u32[3];
          long long v134 = v133;
          *(void *)&long long v133 = v132.u32[0];
          *((void *)&v133 + 1) = v132.u32[1];
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v131.i8);
          v132.i16[0] = *(_WORD *)&v62[2 * v135.u32[0]];
          v132.i16[1] = *(_WORD *)&v62[2 * v135.u32[1]];
          v132.i16[2] = *(_WORD *)&v62[2 * v135.u32[2]];
          v132.i16[3] = *(_WORD *)&v62[2 * v135.u32[3]];
          v132.i16[4] = *(_WORD *)&v62[2 * v133];
          v132.i16[5] = *(_WORD *)&v62[2 * *((void *)&v133 + 1)];
          v132.i16[6] = *(_WORD *)&v62[2 * v134];
          v132.i16[7] = *(_WORD *)&v62[2 * *((void *)&v134 + 1)];
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, (float16x8_t)0), v112));
          uint32x4_t v137 = vmovl_high_u16(v136);
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v136.i8);
          v139.i16[0] = *(_WORD *)&v62[2 * v138.u32[0]];
          v139.i16[1] = *(_WORD *)&v62[2 * v138.u32[1]];
          v139.i16[2] = *(_WORD *)&v62[2 * v138.u32[2]];
          v139.i16[3] = *(_WORD *)&v62[2 * v138.u32[3]];
          v139.i16[4] = *(_WORD *)&v62[2 * v137.u32[0]];
          v139.i16[5] = *(_WORD *)&v62[2 * v137.u32[1]];
          v139.i16[6] = *(_WORD *)&v62[2 * v137.u32[2]];
          v139.i16[7] = *(_WORD *)&v62[2 * v137.u32[3]];
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v112));
          uint32x4_t v141 = vmovl_high_u16(v140);
          uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v140.i8);
          v143.i16[0] = *(_WORD *)&v62[2 * v142.u32[0]];
          v143.i16[1] = *(_WORD *)&v62[2 * v142.u32[1]];
          v143.i16[2] = *(_WORD *)&v62[2 * v142.u32[2]];
          v143.i16[3] = *(_WORD *)&v62[2 * v142.u32[3]];
          v143.i16[4] = *(_WORD *)&v62[2 * v141.u32[0]];
          v143.i16[5] = *(_WORD *)&v62[2 * v141.u32[1]];
          v143.i16[6] = *(_WORD *)&v62[2 * v141.u32[2]];
          v143.i16[7] = *(_WORD *)&v62[2 * v141.u32[3]];
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, (float16x8_t)0), v112));
          float16x8_t v145 = (float16x8_t)vmovl_high_u16(v144);
          *(void *)&long long v133 = v145.u32[2];
          *((void *)&v133 + 1) = v145.u32[3];
          long long v146 = v133;
          *(void *)&long long v133 = v145.u32[0];
          *((void *)&v133 + 1) = v145.u32[1];
          uint32x4_t v147 = vmovl_u16(*(uint16x4_t *)v144.i8);
          v145.i16[0] = *(_WORD *)&v62[2 * v147.u32[0]];
          v145.i16[1] = *(_WORD *)&v62[2 * v147.u32[1]];
          v145.i16[2] = *(_WORD *)&v62[2 * v147.u32[2]];
          v145.i16[3] = *(_WORD *)&v62[2 * v147.u32[3]];
          v145.i16[4] = *(_WORD *)&v62[2 * v133];
          v145.i16[5] = *(_WORD *)&v62[2 * *((void *)&v133 + 1)];
          v145.i16[6] = *(_WORD *)&v62[2 * v146];
          v145.i16[7] = *(_WORD *)&v62[2 * *((void *)&v146 + 1)];
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v112));
          uint32x4_t v149 = vmovl_high_u16(v148);
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v148.i8);
          v128.i16[0] = *(_WORD *)&v62[2 * v150.u32[0]];
          v128.i16[1] = *(_WORD *)&v62[2 * v150.u32[1]];
          v128.i16[2] = *(_WORD *)&v62[2 * v150.u32[2]];
          v128.i16[3] = *(_WORD *)&v62[2 * v150.u32[3]];
          v128.i16[4] = *(_WORD *)&v62[2 * v149.u32[0]];
          v128.i16[5] = *(_WORD *)&v62[2 * v149.u32[1]];
          v128.i16[6] = *(_WORD *)&v62[2 * v149.u32[2]];
          v128.i16[7] = *(_WORD *)&v62[2 * v149.u32[3]];
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, (float16x8_t)0), v112));
          uint32x4_t v152 = vmovl_high_u16(v151);
          uint32x4_t v153 = vmovl_u16(*(uint16x4_t *)v151.i8);
          v130.i16[0] = *(_WORD *)&v62[2 * v153.u32[0]];
          v130.i16[1] = *(_WORD *)&v62[2 * v153.u32[1]];
          v130.i16[2] = *(_WORD *)&v62[2 * v153.u32[2]];
          v130.i16[3] = *(_WORD *)&v62[2 * v153.u32[3]];
          v130.i16[4] = *(_WORD *)&v62[2 * v152.u32[0]];
          v130.i16[5] = *(_WORD *)&v62[2 * v152.u32[1]];
          v130.i16[6] = *(_WORD *)&v62[2 * v152.u32[2]];
          v130.i16[7] = *(_WORD *)&v62[2 * v152.u32[3]];
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v132, v378), v139, v377), v143, v376), vmaxq_f16(vmaxq_f16(v132, v139), v143), v375), (float16x8_t)0), v112));
          uint32x4_t v155 = vmovl_high_u16(v154);
          float16x8_t v156 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v154.i8);
          v156.i16[0] = *(_WORD *)&v56[2 * v156.u32[0]];
          v156.i16[1] = *(_WORD *)&v56[2 * v156.u32[1]];
          v156.i16[2] = *(_WORD *)&v56[2 * v156.u32[2]];
          v156.i16[3] = *(_WORD *)&v56[2 * v156.u32[3]];
          v156.i16[4] = *(_WORD *)&v56[2 * v155.u32[0]];
          v156.i16[5] = *(_WORD *)&v56[2 * v155.u32[1]];
          v156.i16[6] = *(_WORD *)&v56[2 * v155.u32[2]];
          v156.i16[7] = *(_WORD *)&v56[2 * v155.u32[3]];
          float16x8_t v157 = vmulq_f16(v132, v156);
          float16x8_t v158 = vmulq_f16(v139, v156);
          float16x8_t v159 = vmulq_f16(v143, v156);
          uint16x8_t v160 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v145, v378), v128, v377), v130, v376), vmaxq_f16(vmaxq_f16(v145, v128), v130), v375), (float16x8_t)0), v112));
          uint32x4_t v161 = vmovl_high_u16(v160);
          float16x8_t v162 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v160.i8);
          v162.i16[0] = *(_WORD *)&v56[2 * v162.u32[0]];
          v162.i16[1] = *(_WORD *)&v56[2 * v162.u32[1]];
          v162.i16[2] = *(_WORD *)&v56[2 * v162.u32[2]];
          v162.i16[3] = *(_WORD *)&v56[2 * v162.u32[3]];
          v162.i16[4] = *(_WORD *)&v56[2 * v161.u32[0]];
          v162.i16[5] = *(_WORD *)&v56[2 * v161.u32[1]];
          v162.i16[6] = *(_WORD *)&v56[2 * v161.u32[2]];
          v162.i16[7] = *(_WORD *)&v56[2 * v161.u32[3]];
          float16x8_t v163 = vmulq_f16(v145, v162);
          float16x8_t v164 = vmulq_f16(v128, v162);
          float16x8_t v165 = vmulq_f16(v130, v162);
          float16x8_t v166 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v157, v374), v158, v373), v159, v372);
          float16x8_t v167 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v157, v371), v158, v370), v159, v369);
          float16x8_t v168 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v159, v366), v158, v367), v157, v368);
          float16x8_t v169 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v163, v374), v164, v373), v165, v372);
          float16x8_t v170 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v163, v371), v164, v370), v165, v369);
          float16x8_t v171 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v165, v366), v164, v367), v163, v368);
          uint16x8_t v172 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v166, (float16x8_t)0), v112));
          uint32x4_t v173 = vmovl_high_u16(v172);
          v159.i64[1] = v173.u32[3];
          uint32x4_t v174 = vmovl_u16(*(uint16x4_t *)v172.i8);
          v166.i16[0] = *(_WORD *)&v81[2 * v174.u32[0]];
          v166.i16[1] = *(_WORD *)&v81[2 * v174.u32[1]];
          v166.i16[2] = *(_WORD *)&v81[2 * v174.u32[2]];
          v166.i16[3] = *(_WORD *)&v81[2 * v174.u32[3]];
          v166.i16[4] = *(_WORD *)&v81[2 * v173.u32[0]];
          v166.i16[5] = *(_WORD *)&v81[2 * v173.u32[1]];
          v166.i16[6] = *(_WORD *)&v81[2 * v173.u32[2]];
          uint16x8_t v175 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v167, (float16x8_t)0), v112));
          float16x8_t v176 = (float16x8_t)vmovl_high_u16(v175);
          *(void *)&long long v133 = v176.u32[2];
          *((void *)&v133 + 1) = v176.u32[3];
          long long v177 = v133;
          *(void *)&long long v133 = v176.u32[0];
          *((void *)&v133 + 1) = v176.u32[1];
          uint32x4_t v178 = vmovl_u16(*(uint16x4_t *)v175.i8);
          v176.i16[7] = (unint64_t)v178.u32[1] >> 48;
          v176.i16[0] = *(_WORD *)&v81[2 * v178.u32[0]];
          v176.i16[1] = *(_WORD *)&v81[2 * v178.u32[1]];
          uint64_t v179 = *((void *)&v177 + 1);
          v176.i16[2] = *(_WORD *)&v81[2 * v178.u32[2]];
          v176.i16[3] = *(_WORD *)&v81[2 * v178.u32[3]];
          v176.i16[4] = *(_WORD *)&v81[2 * v133];
          v176.i16[5] = *(_WORD *)&v81[2 * *((void *)&v133 + 1)];
          v176.i16[6] = *(_WORD *)&v81[2 * v177];
          float16x8_t v180 = (float16x8_t)vuzp1q_s16((int16x8_t)v166, (int16x8_t)v176);
          v166.i16[7] = *(_WORD *)&v81[2 * v159.i64[1]];
          v176.i16[7] = *(_WORD *)&v81[2 * v179];
          uint16x8_t v181 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v168, (float16x8_t)0), v112));
          int16x8_t v182 = (int16x8_t)vmovl_high_u16(v181);
          *(void *)&long long v133 = v182.u32[2];
          *((void *)&v133 + 1) = v182.u32[3];
          long long v183 = v133;
          *(void *)&long long v133 = v182.u32[0];
          *((void *)&v133 + 1) = v182.u32[1];
          uint32x4_t v184 = vmovl_u16(*(uint16x4_t *)v181.i8);
          float16x8_t v185 = v63;
          float16x8_t v186 = v94;
          v182.i16[0] = *(_WORD *)&v81[2 * v184.u32[0]];
          v182.i16[1] = *(_WORD *)&v81[2 * v184.u32[1]];
          v182.i16[2] = *(_WORD *)&v81[2 * v184.u32[2]];
          v182.i16[3] = *(_WORD *)&v81[2 * v184.u32[3]];
          v182.i16[4] = *(_WORD *)&v81[2 * v133];
          v182.i16[5] = *(_WORD *)&v81[2 * *((void *)&v133 + 1)];
          v182.i16[6] = *(_WORD *)&v81[2 * v183];
          float16x8_t v187 = (float16x8_t)v182;
          v187.i16[7] = *(_WORD *)&v81[2 * *((void *)&v183 + 1)];
          uint16x8_t v188 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v169, (float16x8_t)0), v112));
          uint32x4_t v189 = vmovl_high_u16(v188);
          *(void *)&long long v133 = v189.u32[2];
          *((void *)&v133 + 1) = v189.u32[3];
          long long v190 = v133;
          *(void *)&long long v133 = v189.u32[0];
          *((void *)&v133 + 1) = v189.u32[1];
          long long v191 = v133;
          int16x8_t v192 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v188.i8);
          float16x8_t v193 = v66;
          *((void *)&v133 + 1) = v192.u32[3];
          v192.i16[7] = (unint64_t)v192.u32[1] >> 48;
          v192.i16[0] = *(_WORD *)&v81[2 * v192.u32[0]];
          v192.i16[1] = *(_WORD *)&v81[2 * v192.u32[1]];
          v192.i16[2] = *(_WORD *)&v81[2 * v192.u32[2]];
          v192.i16[3] = *(_WORD *)&v81[2 * *((void *)&v133 + 1)];
          v192.i16[4] = *(_WORD *)&v81[2 * v191];
          v192.i16[5] = *(_WORD *)&v81[2 * *((void *)&v191 + 1)];
          v192.i16[6] = *(_WORD *)&v81[2 * v190];
          float16x8_t v194 = (float16x8_t)v192;
          v194.i16[7] = *(_WORD *)&v81[2 * *((void *)&v190 + 1)];
          uint16x8_t v195 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v170, (float16x8_t)0), v112));
          uint32x4_t v196 = vmovl_high_u16(v195);
          int16x8_t v197 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v195.i8);
          *(void *)&long long v133 = v196.u32[2];
          *((void *)&v133 + 1) = v196.u32[3];
          long long v198 = v133;
          *(void *)&long long v133 = v196.u32[0];
          *((void *)&v133 + 1) = v196.u32[1];
          long long v199 = v133;
          *((void *)&v133 + 1) = v197.u32[3];
          v197.i16[7] = (unint64_t)v197.u32[3] >> 48;
          v197.i16[0] = *(_WORD *)&v81[2 * v197.u32[0]];
          uint64_t v200 = *((void *)&v198 + 1);
          v197.i16[1] = *(_WORD *)&v81[2 * v197.u32[1]];
          v197.i16[2] = *(_WORD *)&v81[2 * v197.u32[2]];
          v197.i16[3] = *(_WORD *)&v81[2 * *((void *)&v133 + 1)];
          v197.i16[4] = *(_WORD *)&v81[2 * v199];
          v197.i16[5] = *(_WORD *)&v81[2 * *((void *)&v199 + 1)];
          v197.i16[6] = *(_WORD *)&v81[2 * v198];
          uint16x8_t v201 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v171, (float16x8_t)0), v112));
          uint32x4_t v202 = vmovl_u16(*(uint16x4_t *)v201.i8);
          uint64_t v203 = v202.u32[1];
          uint64_t v204 = v202.u32[0];
          float16x8_t v205 = (float16x8_t)v197;
          v205.i16[7] = *(_WORD *)&v81[2 * v200];
          int16x8_t v206 = (int16x8_t)vmovl_high_u16(v201);
          uint64_t v207 = v202.u32[3];
          uint64_t v208 = v202.u32[2];
          *(void *)&long long v133 = v206.u32[2];
          *((void *)&v133 + 1) = v206.u32[3];
          long long v209 = v133;
          *(void *)&long long v133 = v206.u32[0];
          v206.i16[7] = (unint64_t)v206.u32[1] >> 48;
          v206.i16[0] = *(_WORD *)&v81[2 * v204];
          float16x8_t v210 = (__int16 *)&v81[2 * v206.u32[1]];
          v206.i16[1] = *(_WORD *)&v81[2 * v203];
          v206.i16[2] = *(_WORD *)&v81[2 * v208];
          v206.i16[3] = *(_WORD *)&v81[2 * v207];
          v206.i16[4] = *(_WORD *)&v81[2 * v133];
          v206.i16[5] = *v210;
          v206.i16[6] = *(_WORD *)&v81[2 * v209];
          float16x8_t v211 = (__int16 *)&v81[2 * *((void *)&v209 + 1)];
          float16x8_t v212 = (float16x8_t)v206;
          v212.i16[7] = *v211;
          float16x8_t v213 = (float16x8_t)vuzp1q_s16(v192, v197);
          *(uint16x8_t *)result = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v103, v166, v381), v176, v380), v187, v379), v103), v400)), v418);
          result += 16;
          *v111++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v103, v194, v381), v205, v380), v212, v379), v103), v400)), v418);
          float16x8_t v214 = (float16x8_t)vuzp2q_s16((int16x8_t)v194, (int16x8_t)v205);
          float16x8_t v66 = v193;
          float16x8_t v215 = vaddq_f16(vaddq_f16(v180, (float16x8_t)vuzp2q_s16((int16x8_t)v166, (int16x8_t)v176)), v213);
          uint16x8_t v78 = v417;
          int16x8_t v216 = (int16x8_t)vaddq_f16(v215, v214);
          float16x8_t v217 = vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v182, v182), (float16x8_t)vtrn2q_s16((int16x8_t)v187, (int16x8_t)v187)), (float16x8_t)vtrn1q_s16(v206, v206));
          float16x8_t v218 = (float16x8_t)vtrn2q_s16((int16x8_t)v212, (int16x8_t)v212);
          float16x8_t v94 = v186;
          float16x8_t v63 = v185;
          *(uint16x8_t *)&v76[v108] = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v104, v94, (float16x8_t)vzip1q_s16(v216, v216)), v105, (float16x8_t)vzip2q_s16(v216, v216)), v365, vaddq_f16(v217, v218)), v399), v398)), v418);
          v109 += 8;
          v108 += 8;
        }
        while (v109 < (int)v19 - 7);
        uint64_t v219 = (unsigned __int16 *)(v82 + v108 * 2);
        uint16x8_t v220 = &v76[v108];
        unint64_t v221 = v19 & 0xFFFFFFF8;
        uint64_t v31 = v361;
        float v37 = v359;
        float v47 = v360;
        float v48 = v358;
        _S4 = v414;
        float v95 = v415;
      }
      for (; v19 > v221; float16x8_t v104 = (float16x8_t)v408)
      {
        float v222 = (float)(v219[1] >> v52) - v95;
        float v223 = *((float *)&v412 + 1) * v222;
        float v224 = _S4 * (float)((float)(v83->u16[0] >> v52) - v37);
        float v225 = (float)(*((float *)&v412 + 1) * v222) + v224;
        float v226 = 8191.0;
        if (v225 <= 8191.0)
        {
          float v226 = (float)(*((float *)&v412 + 1) * v222) + v224;
          if (v225 < 0.0) {
            float v226 = 0.0;
          }
        }
        float v227 = (float)(*v219 >> v52) - v95;
        float v228 = (float)(v10.f32[1] * v222) + (float)(v227 * v10.f32[0]);
        float v229 = 8191.0;
        if ((float)(v224 + v228) <= 8191.0)
        {
          float v229 = v224 + v228;
          if ((float)(v224 + v228) < 0.0) {
            float v229 = 0.0;
          }
        }
        float v230 = *(float *)&v412 * v227;
        float v231 = (float)(*(float *)&v412 * v227) + v224;
        float v232 = 8191.0;
        if (v231 <= 8191.0)
        {
          float v232 = v231;
          if (v231 < 0.0) {
            float v232 = 0.0;
          }
        }
        float v233 = _S4 * (float)((float)(v83->u16[1] >> v52) - v37);
        float v234 = 8191.0;
        if ((float)(v223 + v233) <= 8191.0)
        {
          float v234 = v223 + v233;
          if ((float)(v223 + v233) < 0.0) {
            float v234 = 0.0;
          }
        }
        float v235 = 8191.0;
        if ((float)(v228 + v233) <= 8191.0)
        {
          float v235 = v228 + v233;
          if ((float)(v228 + v233) < 0.0) {
            float v235 = 0.0;
          }
        }
        float v236 = v230 + v233;
        float v237 = 8191.0;
        if (v236 <= 8191.0)
        {
          float v237 = v236;
          if (v236 < 0.0) {
            float v237 = 0.0;
          }
        }
        float v238 = _S4 * (float)((float)(v110->u16[0] >> v52) - v37);
        float v239 = 8191.0;
        if ((float)(v223 + v238) <= 8191.0)
        {
          float v239 = v223 + v238;
          if ((float)(v223 + v238) < 0.0) {
            float v239 = 0.0;
          }
        }
        float v240 = 8191.0;
        if ((float)(v228 + v238) <= 8191.0)
        {
          float v240 = v228 + v238;
          if ((float)(v228 + v238) < 0.0) {
            float v240 = 0.0;
          }
        }
        float v241 = v230 + v238;
        float v242 = 8191.0;
        if (v241 <= 8191.0)
        {
          float v242 = v241;
          if (v241 < 0.0) {
            float v242 = 0.0;
          }
        }
        float v243 = _S4 * (float)((float)(v110->u16[1] >> v52) - v37);
        float v244 = v223 + v243;
        BOOL v245 = (float)(v223 + v243) <= 8191.0;
        float v246 = 8191.0;
        if (v245)
        {
          float v246 = v244;
          if (v244 < 0.0) {
            float v246 = 0.0;
          }
        }
        float v247 = v228 + v243;
        BOOL v245 = (float)(v228 + v243) <= 8191.0;
        float v248 = 8191.0;
        if (v245)
        {
          float v248 = v247;
          if (v247 < 0.0) {
            float v248 = 0.0;
          }
        }
        float v249 = v230 + v243;
        float v250 = 8191.0;
        if (v249 <= 8191.0)
        {
          float v250 = v249;
          if (v249 < 0.0) {
            float v250 = 0.0;
          }
        }
        float v251 = v48;
        _H1 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v226, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v232, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H22 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v234, 0.0), 8191.0))];
        _H11 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v235, 0.0), 8191.0))];
        _H13 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v237, 0.0), 8191.0))];
        _H17 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v239, 0.0), 8191.0))];
        _H15 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v240, 0.0), 8191.0))];
        _H9 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v242, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v246, 0.0), 8191.0))];
        _H6 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v248, 0.0), 8191.0))];
        _H7 = *(_WORD *)&v62[2 * llroundf(fminf(fmaxf(v250, 0.0), 8191.0))];
        float v267 = (float)((float)((float)(v385 * _S2) + (float)(v386 * _S1)) + (float)(v384 * _S3))
             + (float)(v383 * fmaxf(_S1, fmaxf(_S2, _S3)));
        float v268 = 8191.0;
        if (v267 <= 8191.0)
        {
          float v268 = v267;
          if (v267 < 0.0) {
            float v268 = 0.0;
          }
        }
        float v269 = v47;
        float v270 = v37;
        __asm
        {
          FCVT            S18, H22
          FCVT            S11, H11
          FCVT            S13, H13
        }
        _H0 = *(_WORD *)&v56[2 * llroundf(v268)];
        float v275 = (float)((float)((float)(v385 * _S11) + (float)(v386 * _S18)) + (float)(v384 * _S13))
             + (float)(v383 * fmaxf(_S18, fmaxf(_S11, _S13)));
        float v276 = 8191.0;
        if (v275 <= 8191.0)
        {
          float v276 = v275;
          if (v275 < 0.0) {
            float v276 = 0.0;
          }
        }
        __asm
        {
          FCVT            S24, H17
          FCVT            S28, H15
          FCVT            S23, H9
        }
        _H30 = *(_WORD *)&v56[2 * llroundf(v276)];
        float v281 = (float)((float)((float)(v385 * _S28) + (float)(v386 * _S24)) + (float)(v384 * _S23))
             + (float)(v383 * fmaxf(_S24, fmaxf(_S28, _S23)));
        float v282 = 8191.0;
        if (v281 <= 8191.0)
        {
          float v282 = v281;
          if (v281 < 0.0) {
            float v282 = 0.0;
          }
        }
        __asm
        {
          FCVT            S9, H5
          FCVT            S15, H6
          FCVT            S21, H7
          FCVT            S0, H0
        }
        float v287 = _S1 * _S0;
        float v288 = _S2 * _S0;
        float v289 = _S3 * _S0;
        __asm { FCVT            S0, H30 }
        float v291 = _S18 * _S0;
        float v292 = _S11 * _S0;
        float v293 = _S13 * _S0;
        LOWORD(_S0) = *(_WORD *)&v56[2 * llroundf(v282)];
        __asm { FCVT            S1, H0 }
        float v295 = _S24 * _S1;
        float v296 = _S28 * _S1;
        float v297 = _S23 * _S1;
        float v298 = (float)((float)((float)(v385 * _S15) + (float)(v386 * _S9)) + (float)(v384 * _S21))
             + (float)(v383 * fmaxf(_S9, fmaxf(_S15, _S21)));
        float v299 = 8191.0;
        if (v298 <= 8191.0)
        {
          float v299 = v298;
          if (v298 < 0.0) {
            float v299 = 0.0;
          }
        }
        _H18 = *(_WORD *)&v56[2 * llroundf(v299)];
        __asm { FCVT            S18, H18 }
        float v302 = _S9 * _S18;
        float v303 = _S15 * _S18;
        _S18 = _S21 * _S18;
        _S21 = (float)((float)(v396 * v288) + (float)(v287 * v397)) + (float)(v289 * v395);
        float v306 = (float)((float)(v393 * v288) + (float)(v287 * v394)) + (float)(v289 * v392);
        _S7 = (float)((float)(v389 * v288) + (float)(v287 * v391)) + (float)(v289 * v387);
        _S17 = (float)((float)(v396 * v292) + (float)(v291 * v397)) + (float)(v293 * v395);
        _S22 = (float)((float)(v393 * v292) + (float)(v291 * v394)) + (float)(v293 * v392);
        _S6 = (float)((float)(v389 * v292) + (float)(v291 * v391)) + (float)(v293 * v387);
        float v311 = (float)((float)(v396 * v296) + (float)(v295 * v397)) + (float)(v297 * v395);
        float v312 = (float)((float)(v393 * v296) + (float)(v295 * v394)) + (float)(v297 * v392);
        _S0 = (float)((float)(v389 * v296) + (float)(v295 * v391)) + (float)(v297 * v387);
        float v314 = (float)((float)(v396 * v303) + (float)(v302 * v397)) + (float)(_S18 * v395);
        float v315 = (float)((float)(v393 * v303) + (float)(v302 * v394)) + (float)(_S18 * v392);
        float v316 = (float)((float)(v389 * v303) + (float)(v302 * v391)) + (float)(_S18 * v387);
        _H1 = *(_WORD *)&v81[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v81[2 * llroundf(fminf(fmaxf(v306, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v81[2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v81[2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0))];
        __asm
        {
          FCVT            S3, H3
          FCVT            S5, H5
        }
        LOWORD(_S7) = *(_WORD *)&v81[2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        LOWORD(_S6) = *(_WORD *)&v81[2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        LOWORD(_S17) = *(_WORD *)&v81[2 * llroundf(fminf(fmaxf(v311, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        LOWORD(_S18) = *(_WORD *)&v81[2 * llroundf(fminf(fmaxf(v312, 0.0), 8191.0))];
        __asm { FCVT            S18, H18 }
        LOWORD(_S0) = *(_WORD *)&v81[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        LOWORD(_S21) = *(_WORD *)&v81[2 * llroundf(fminf(fmaxf(v314, 0.0), 8191.0))];
        __asm
        {
          FCVT            S0, H0
          FCVT            S21, H21
        }
        LOWORD(_S22) = *(_WORD *)&v81[2 * llroundf(fminf(fmaxf(v315, 0.0), 8191.0))];
        unsigned int v331 = llroundf(fminf(fmaxf(v316, 0.0), 8191.0));
        __asm { FCVT            S19, H22 }
        LOWORD(_S22) = *(_WORD *)&v81[2 * v331];
        __asm { FCVT            S22, H22 }
        float v334 = (float)((float)((float)(v406 * _S2) + (float)(v407 * _S1)) + (float)(v413 * _S3)) + v364;
        if (v334 < v364) {
          float v335 = v364;
        }
        else {
          float v335 = (float)((float)((float)(v406 * _S2) + (float)(v407 * _S1)) + (float)(v413 * _S3)) + v364;
        }
        BOOL v245 = v334 <= v390;
        float v336 = (float)((float)((float)(v406 * _S7) + (float)(v407 * _S5)) + (float)(v413 * _S6)) + v364;
        if (!v245) {
          float v335 = v390;
        }
        unsigned int v337 = llroundf(v335);
        if (v336 < v364) {
          float v338 = v364;
        }
        else {
          float v338 = (float)((float)((float)(v406 * _S7) + (float)(v407 * _S5)) + (float)(v413 * _S6)) + v364;
        }
        BOOL v245 = v336 <= v390;
        float v339 = (float)((float)((float)(v406 * _S18) + (float)(v407 * _S17)) + (float)(v413 * _S0)) + v364;
        if (!v245) {
          float v338 = v390;
        }
        unsigned int v340 = llroundf(v338);
        if (v339 < v364) {
          float v341 = v364;
        }
        else {
          float v341 = (float)((float)((float)(v406 * _S18) + (float)(v407 * _S17)) + (float)(v413 * _S0)) + v364;
        }
        BOOL v245 = v339 <= v390;
        float v342 = (float)((float)((float)(v406 * _S19) + (float)(v407 * _S21)) + (float)(v413 * _S22)) + v364;
        if (!v245) {
          float v341 = v390;
        }
        unsigned int v343 = llroundf(v341);
        if (v342 < v364) {
          float v344 = v364;
        }
        else {
          float v344 = (float)((float)((float)(v406 * _S19) + (float)(v407 * _S21)) + (float)(v413 * _S22)) + v364;
        }
        if (v342 <= v390) {
          float v345 = v344;
        }
        else {
          float v345 = v390;
        }
        float v346 = (float)((float)(_S1 + _S5) + _S17) + _S21;
        float v347 = (float)((float)(_S2 + _S7) + _S18) + _S19;
        *(_WORD *)result = v337 << v50;
        *((_WORD *)result + 1) = v340 << v50;
        v111->i16[0] = v343 << v50;
        v111->i16[1] = llroundf(v345) << v50;
        float v47 = v269;
        float v348 = (float)((float)(_S3 + _S6) + _S0) + _S22;
        float v349 = (float)((float)(v269 + (float)(v346 * *(float *)&v411)) + (float)(v347 * v9.f32[0]))
             + (float)(v348 * *(float *)&v409);
        float v48 = v251;
        float v350 = v251;
        if (v349 <= v251)
        {
          float v350 = v349;
          if (v349 < v416) {
            float v350 = v416;
          }
        }
        float v351 = (float)((float)(v47 + (float)(v346 * *((float *)&v411 + 1))) + (float)(v347 * v9.f32[1]))
             + (float)(v348 * *((float *)&v409 + 1));
        *uint16x8_t v220 = llroundf(v350) << v50;
        float v352 = v251;
        float v37 = v270;
        _S4 = v414;
        float16x8_t v63 = v388;
        float16x8_t v66 = v404;
        float16x8_t v94 = v402;
        uint16x8_t v78 = v417;
        if (v351 <= v48)
        {
          float v352 = v351;
          if (v351 < v416) {
            float v352 = v416;
          }
        }
        v221 += 2;
        v219 += 2;
        float v83 = (uint16x8_t *)((char *)v83 + 4);
        float v110 = (uint16x8_t *)((char *)v110 + 4);
        v220[1] = llroundf(v352) << v50;
        result += 4;
        float v111 = (uint16x8_t *)((char *)v111 + 4);
        v220 += 2;
        float v95 = v415;
        float16x8_t v64 = v405;
        float16x8_t v67 = v401;
        float16x8_t v68 = v403;
        float16x8_t v105 = (float16x8_t)v410;
        float16x8_t v103 = (float16x8_t)v75;
      }
      float v83 = (uint16x8_t *)&v106[v31];
      v82 += v363;
      result = &v107[v32];
      float v76 = (_WORD *)((char *)v76 + v362);
      v18 += 2;
    }
    while (v22 > v18);
    if (v357 && v356)
    {
      size_t v353 = 2 * v19;
      do
      {
        result = (unsigned __int8 *)memcpy(v58, v57, v353);
        v57 += v354;
        v58 += v355;
        --v22;
      }
      while (v22);
    }
    else if (v356)
    {
      do
      {
        if (v19) {
          result = (unsigned __int8 *)memset(v58, 255, 2 * v19);
        }
        v58 += v355;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 36);
    uint64_t v13 = *(void *)(result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = *((void *)result + 14);
    uint64_t v16 = (uint64_t *)*((void *)result + 16);
    uint64_t v17 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7);
    uint64_t v18 = *((void *)result + 19);
    uint64_t v19 = (void *)*((void *)result + 7);
    uint64_t v20 = (uint64_t *)*((void *)result + 8);
    uint64_t v21 = (uint64_t *)*((void *)result + 17);
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v200 = v19[2];
    uint64_t v25 = (char *)(v200 + v24 * v13 + 2 * v12);
    uint64_t v26 = *v21;
    uint64_t v27 = v21[1];
    uint64_t v28 = v21[2];
    uint64_t v199 = v16[2];
    uint64_t v29 = (char *)(v199 + v28 * v17 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    float v30 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v31 = (float)LODWORD(a5);
    float v32 = (float)LODWORD(a6);
    float v33 = v30 * *(float *)v18;
    float v225 = v30 * *(float *)(v18 + 16);
    float v226 = v30 * *(float *)(v18 + 8);
    float v34 = v30 * *(float *)(v18 + 20);
    *(float *)&unsigned int v35 = v30 * *(float *)(v18 + 28);
    float v223 = *(float *)&v35;
    float v224 = v34;
    LOWORD(v35) = *(_WORD *)(v18 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v18 + 150);
    float v39 = (float)v35;
    float v230 = v39;
    float v219 = *(float *)(v18 + 40);
    float v220 = *(float *)(v18 + 36);
    float v217 = *(float *)(v18 + 48) * 0.25;
    float v218 = *(float *)(v18 + 44);
    float v215 = *(float *)(v18 + 56) * 0.25;
    float v216 = *(float *)(v18 + 52) * 0.25;
    float v213 = *(float *)(v18 + 64) * 0.25;
    float v214 = *(float *)(v18 + 60) * 0.25;
    float v211 = *(float *)(v18 + 68) * 0.25;
    float v212 = *(float *)(v18 + 72);
    float v209 = *(float *)(v18 + 80);
    float v210 = *(float *)(v18 + 76);
    float v207 = *(float *)(v18 + 88);
    float v208 = *(float *)(v18 + 84);
    float v205 = *(float *)(v18 + 96);
    float v206 = *(float *)(v18 + 92);
    float v203 = *(float *)(v18 + 104);
    float v204 = *(float *)(v18 + 100);
    uint64_t v40 = v18 + 164;
    uint64_t v41 = v18 + 16548;
    uint64_t v42 = v18 + 32932;
    uint64_t v43 = *v16;
    uint64_t v44 = v16[1];
    result = (unsigned __int8 *)(v43 + *v21 * v17 + 2 * v15);
    unsigned int v45 = *(unsigned __int8 *)(v18 + 132);
    if (v45 >= 0x11) {
      char v46 = 0;
    }
    else {
      char v46 = 16 - v45;
    }
    unsigned int v47 = *(unsigned __int8 *)(v18 + 124);
    char v48 = 16 - v47;
    uint64_t v49 = v19[1];
    unsigned __int8 v50 = (char *)(*v19 + v22 * v13 + 2 * v12);
    if (v47 >= 0x11) {
      char v48 = 0;
    }
    uint64_t v51 = v44 + v21[1] * (v17 / 2) + 2 * v15;
    uint64_t v52 = v49 + v20[1] * (v13 / 2) + 2 * v12;
    char v53 = v48;
    char v54 = v46;
    float v55 = *(float *)(v18 + 108);
    float v56 = *(float *)(v18 + 112);
    float v57 = *(float *)(v18 + 116);
    float v58 = *(float *)(v18 + 120);
    float v228 = (float)LODWORD(a6);
    float v229 = (float)LODWORD(a5);
    float v227 = v33;
    LOWORD(v39) = *(_WORD *)(v18 + 152);
    float v221 = (float)LODWORD(v39);
    float v222 = v37;
    float v201 = v57;
    float v202 = v56;
    do
    {
      float v59 = &v50[v22];
      uint64_t v60 = &result[v26];
      if (v11)
      {
        unint64_t v61 = 0;
        uint64_t v62 = &v50[v22];
        float16x8_t v63 = &result[v26];
        do
        {
          float16x8_t v64 = (unsigned __int16 *)(v52 + 2 * v61);
          float v65 = (float)(v64[1] >> v53) - v32;
          float v66 = v226 * v65;
          float v67 = v33 * (float)((float)(*(unsigned __int16 *)v50 >> v53) - v31);
          float v68 = (float)(v226 * v65) + v67;
          float v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            float v69 = (float)(v226 * v65) + v67;
            if (v68 < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = (float)(*v64 >> v53) - v32;
          float v71 = (float)(v224 * v65) + (float)(v70 * v225);
          float v72 = 8191.0;
          if ((float)(v67 + v71) <= 8191.0)
          {
            float v72 = v67 + v71;
            if ((float)(v67 + v71) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v223 * v70;
          float v74 = (float)(v223 * v70) + v67;
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v33 * (float)((float)(*((unsigned __int16 *)v50 + 1) >> v53) - v31);
          float v77 = 8191.0;
          if ((float)(v66 + v76) <= 8191.0)
          {
            float v77 = v66 + v76;
            if ((float)(v66 + v76) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = 8191.0;
          if ((float)(v71 + v76) <= 8191.0)
          {
            float v78 = v71 + v76;
            if ((float)(v71 + v76) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v73 + v76;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v33 * (float)((float)(*(unsigned __int16 *)v62 >> v53) - v31);
          float v82 = 8191.0;
          if ((float)(v66 + v81) <= 8191.0)
          {
            float v82 = v66 + v81;
            if ((float)(v66 + v81) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = 8191.0;
          if ((float)(v71 + v81) <= 8191.0)
          {
            float v83 = v71 + v81;
            if ((float)(v71 + v81) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v73 + v81;
          float v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v33 * (float)((float)(*((unsigned __int16 *)v62 + 1) >> v53) - v31);
          float v87 = v66 + v86;
          BOOL v88 = (float)(v66 + v86) <= 8191.0;
          float v89 = 8191.0;
          if (v88)
          {
            float v89 = v87;
            if (v87 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v71 + v86;
          BOOL v88 = (float)(v71 + v86) <= 8191.0;
          float v91 = 8191.0;
          if (v88)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v73 + v86;
          float v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          _H19 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S24, H20 }
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S25, H20 }
          _H28 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          float v113 = (float)((float)((float)(v56 * _S24) + (float)(v55 * _S19)) + (float)(v57 * _S25))
               + (float)(v58 * fmaxf(_S19, fmaxf(_S24, _S25)));
          float v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            float v114 = v113;
            if (v113 < 0.0) {
              float v114 = 0.0;
            }
          }
          __asm
          {
            FCVT            S27, H28
            FCVT            S28, H23
            FCVT            S30, H20
          }
          _H22 = *(_WORD *)(v41 + 2 * llroundf(v114));
          float v119 = (float)((float)((float)(v56 * _S28) + (float)(v55 * _S27)) + (float)(v57 * _S30))
               + (float)(v58 * fmaxf(_S27, fmaxf(_S28, _S30)));
          float v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            float v120 = v119;
            if (v119 < 0.0) {
              float v120 = 0.0;
            }
          }
          __asm
          {
            FCVT            S8, H17
            FCVT            S9, H26
            FCVT            S10, H21
          }
          _H17 = *(_WORD *)(v41 + 2 * llroundf(v120));
          float v125 = fmaxf(_S8, fmaxf(_S9, _S10));
          float v126 = (float)((float)((float)(v56 * _S9) + (float)(v55 * _S8)) + (float)(v57 * _S10)) + (float)(v58 * v125);
          float v127 = 8191.0;
          if (v126 <= 8191.0)
          {
            float v127 = (float)((float)((float)(v56 * _S9) + (float)(v55 * _S8)) + (float)(v57 * _S10)) + (float)(v58 * v125);
            if (v126 < 0.0) {
              float v127 = 0.0;
            }
          }
          __asm
          {
            FCVT            S26, H1
            FCVT            S29, H2
            FCVT            S31, H3
            FCVT            S1, H22
          }
          float v132 = _S19 * _S1;
          float v133 = _S24 * _S1;
          float v134 = _S25 * _S1;
          __asm { FCVT            S1, H17 }
          float v136 = _S27 * _S1;
          float v137 = _S28 * _S1;
          float v138 = _S30 * _S1;
          LOWORD(_S1) = *(_WORD *)(v41 + 2 * llroundf(v127));
          __asm { FCVT            S2, H1 }
          float v140 = _S8 * _S2;
          float v141 = _S9 * _S2;
          float v142 = _S10 * _S2;
          float v143 = (float)((float)((float)(v56 * _S29) + (float)(v55 * _S26)) + (float)(v57 * _S31))
               + (float)(v58 * fmaxf(_S26, fmaxf(_S29, _S31)));
          float v144 = 8191.0;
          if (v143 <= 8191.0)
          {
            float v144 = v143;
            if (v143 < 0.0) {
              float v144 = 0.0;
            }
          }
          _H24 = *(_WORD *)(v41 + 2 * llroundf(v144));
          __asm { FCVT            S24, H24 }
          float v147 = _S26 * _S24;
          float v148 = _S29 * _S24;
          float v149 = _S31 * _S24;
          float v150 = (float)((float)(v210 * v133) + (float)(v132 * v212)) + (float)(v134 * v209);
          float v151 = (float)((float)(v207 * v133) + (float)(v132 * v208)) + (float)(v134 * v206);
          _S20 = (float)((float)(v204 * v133) + (float)(v132 * v205)) + (float)(v134 * v203);
          _S22 = (float)((float)(v210 * v137) + (float)(v136 * v212)) + (float)(v138 * v209);
          _S23 = (float)((float)(v207 * v137) + (float)(v136 * v208)) + (float)(v138 * v206);
          _S19 = (float)((float)(v204 * v137) + (float)(v136 * v205)) + (float)(v138 * v203);
          float v156 = (float)((float)(v210 * v141) + (float)(v140 * v212)) + (float)(v142 * v209);
          float v157 = (float)((float)(v207 * v141) + (float)(v140 * v208)) + (float)(v142 * v206);
          float v158 = (float)((float)(v204 * v141) + (float)(v140 * v205)) + (float)(v142 * v203);
          float v159 = (float)((float)(v210 * v148) + (float)(v147 * v212)) + (float)(v149 * v209);
          float v160 = (float)((float)(v207 * v148) + (float)(v147 * v208)) + (float)(v149 * v206);
          float v161 = (float)((float)(v204 * v148) + (float)(v147 * v205)) + (float)(v149 * v203);
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H3 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S17, H17
          }
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S21, H20 }
          LOWORD(_S19) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm { FCVT            S24, H20 }
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          __asm { FCVT            S25, H20 }
          LOWORD(_S20) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H20
            FCVT            S20, H22
          }
          LOWORD(_S22) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          float v178 = (float)((float)((float)(v219 * _S2) + (float)(v220 * _S1)) + (float)(v218 * _S3)) + v36;
          if (v178 < v36) {
            float v179 = v36;
          }
          else {
            float v179 = (float)((float)((float)(v219 * _S2) + (float)(v220 * _S1)) + (float)(v218 * _S3)) + v36;
          }
          BOOL v88 = v178 <= v38;
          float v180 = (float)((float)((float)(v219 * _S21) + (float)(v220 * _S17)) + (float)(v218 * _S19)) + v36;
          if (!v88) {
            float v179 = v38;
          }
          unsigned int v181 = llroundf(v179);
          if (v180 < v36) {
            float v182 = v36;
          }
          else {
            float v182 = (float)((float)((float)(v219 * _S21) + (float)(v220 * _S17)) + (float)(v218 * _S19)) + v36;
          }
          BOOL v88 = v180 <= v38;
          float v183 = (float)((float)((float)(v219 * _S25) + (float)(v220 * _S24)) + (float)(v218 * _S26)) + v36;
          if (!v88) {
            float v182 = v38;
          }
          unsigned int v184 = llroundf(v182);
          if (v183 < v36) {
            float v185 = v36;
          }
          else {
            float v185 = (float)((float)((float)(v219 * _S25) + (float)(v220 * _S24)) + (float)(v218 * _S26)) + v36;
          }
          BOOL v88 = v183 <= v38;
          float v186 = (float)((float)((float)(v219 * _S22) + (float)(v220 * _S20)) + (float)(v218 * _S23)) + v36;
          if (!v88) {
            float v185 = v38;
          }
          unsigned int v187 = llroundf(v185);
          if (v186 < v36) {
            float v188 = v36;
          }
          else {
            float v188 = (float)((float)((float)(v219 * _S22) + (float)(v220 * _S20)) + (float)(v218 * _S23)) + v36;
          }
          if (v186 <= v38) {
            float v189 = v188;
          }
          else {
            float v189 = v38;
          }
          float v190 = (float)((float)(_S1 + _S17) + _S24) + _S20;
          float v191 = (float)((float)(_S2 + _S21) + _S25) + _S22;
          *(_WORD *)result = v181 << v54;
          *((_WORD *)result + 1) = v184 << v54;
          *(_WORD *)float16x8_t v63 = v187 << v54;
          *((_WORD *)v63 + 1) = llroundf(v189) << v54;
          float v192 = (float)((float)(_S3 + _S19) + _S26) + _S23;
          float v193 = (float)((float)(v222 + (float)(v190 * v217)) + (float)(v191 * v216)) + (float)(v192 * v215);
          float v194 = v221;
          if (v193 <= v221)
          {
            float v194 = (float)((float)(v222 + (float)(v190 * v217)) + (float)(v191 * v216)) + (float)(v192 * v215);
            if (v193 < v230) {
              float v194 = v230;
            }
          }
          uint16x8_t v195 = (_WORD *)(v51 + 2 * v61);
          float v196 = (float)((float)(v222 + (float)(v190 * v214)) + (float)(v191 * v213)) + (float)(v192 * v211);
          *uint16x8_t v195 = llroundf(v194) << v54;
          float v197 = v221;
          float v31 = v229;
          float v33 = v227;
          if (v196 <= v221)
          {
            float v197 = v196;
            if (v196 < v230) {
              float v197 = v230;
            }
          }
          v50 += 4;
          v62 += 4;
          result += 4;
          v63 += 4;
          v195[1] = llroundf(v197) << v54;
          v61 += 2;
          float v32 = v228;
          float v57 = v201;
          float v56 = v202;
        }
        while (v11 > v61);
      }
      unsigned __int8 v50 = &v59[v22];
      v52 += v23;
      result = &v60[v26];
      v51 += v27;
      v10 += 2;
    }
    while (v14 > v10);
    if (v200 && v199)
    {
      size_t v198 = 2 * v11;
      do
      {
        result = (unsigned __int8 *)memcpy(v29, v25, v198);
        v25 += v24;
        v29 += v28;
        --v14;
      }
      while (v14);
    }
    else if (v199)
    {
      do
      {
        if (v11) {
          result = (unsigned __int8 *)memset(v29, 255, 2 * v11);
        }
        v29 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_xf420_TRC_Mat_TRC_xf420_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3)
{
  uint64_t v13 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v14 = 2 * result->u8[0];
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (2 * v16 != 2 * v15)
  {
    unint64_t v17 = 0;
    unint64_t v18 = *(unint64_t *)((char *)&result[2] + 4);
    uint64_t v19 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v20 = *(void *)((char *)&result[5] + 4) + 2 * v15;
    unint64_t v21 = 2 * v16 - 2 * v15;
    float32x2_t v22 = result[14];
    uint64_t v23 = (void *)result[16];
    uint64_t v24 = *(void *)&result[15] + 2 * (*(void *)&result[13] * a2 / v14);
    uint64_t v25 = (float32x2_t *)result[19];
    uint64_t v27 = (uint64_t *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v28 = (uint64_t *)result[17];
    uint64_t v29 = *v26;
    uint64_t v30 = v26[1];
    uint64_t v289 = v26[2];
    uint64_t v292 = v27[2];
    uint64_t v31 = *v28;
    uint64_t v32 = v28[1];
    uint64_t v33 = v28[2];
    unsigned int v34 = v25[17].u16[2];
    LODWORD(v28) = v25[17].u16[3];
    LODWORD(a3) = 1174403072;
    unsigned int v35 = v25[18].u16[0];
    float v36 = (float)v34;
    *(short float *)v7.i16 = (short float)v34;
    unsigned int v37 = v25[18].u16[1];
    float v337 = v25[5].f32[1];
    unsigned int v42 = v25[18].u16[2];
    float v43 = (float)v28;
    short float v44 = (short float)v28;
    LODWORD(v28) = v25[18].u16[3];
    float v45 = (float)v35;
    *(short float *)v8.i16 = (short float)v35;
    unsigned int v46 = v25[19].u16[0];
    float v47 = (float)v37;
    float v311 = (float)v42;
    *(float *)v4.i32 = (float)v46;
    float v340 = (float)v28;
    float v341 = (float)v46;
    *(short float *)v4.i16 = (short float)v37;
    *(short float *)v5.i16 = (short float)v42;
    *(short float *)v6.i16 = (short float)v28;
    *(short float *)v3.i16 = (short float)v46;
    LODWORD(v28) = v25[16].u8[4];
    unsigned __int8 v48 = 16 - (_BYTE)v28;
    if (v28 >= 0x11) {
      unsigned __int8 v48 = 0;
    }
    unsigned int v49 = v25[15].u8[4];
    unsigned __int8 v50 = 16 - v49;
    if (v49 >= 0x11) {
      unsigned __int8 v50 = 0;
    }
    if (v24 >= 0) {
      uint64_t v51 = v24;
    }
    else {
      uint64_t v51 = v24 + 1;
    }
    uint64_t v290 = v33;
    uint64_t v291 = v23[2];
    _S9 = v25[4].i32[1];
    _S2 = v25[5].i32[0];
    char v54 = (char *)(v291 + v33 * v24 + 2 * *(void *)&v22);
    float v55 = 8191.0 / (float)v25[16].u32[0];
    _S19 = v55 * v25->f32[0];
    float16x8_t v57 = (float16x8_t)vdupq_lane_s16(v7, 0);
    v38.i32[1] = v25[1].i32[0];
    v38.i32[0] = v25[3].i32[1];
    *(float32x2_t *)v11.f32 = vmul_n_f32(v38, v55);
    short float v58 = -v44;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    *(float32x2_t *)v10.f32 = vmul_n_f32(v25[2], v55);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v331 = v66;
    float16x8_t v339 = vmulq_n_f16(v66, v58);
    __asm { FMOV            V3.2S, #0.25 }
    v39.i32[1] = v25[7].i32[1];
    v39.i32[0] = v25[6].i32[0];
    *(float32x2_t *)v12.f32 = vmul_f32(v39, _D3);
    int32x4_t v65 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    v40.i32[1] = v25[8].i32[0];
    v40.i32[0] = v25[6].i32[1];
    *(float32x2_t *)v66.i8 = vmul_f32(v40, _D3);
    v41.i32[1] = v25[8].i32[1];
    v41.i32[0] = v25[7].i32[0];
    *(float32x2_t *)v9.f32 = vmul_f32(v41, _D3);
    float16x8_t v67 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    int32x4_t v335 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v66), 0);
    int16x8_t v336 = vdupq_lane_s16(v8, 0);
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(v4, 0);
    uint64_t v69 = v23[1] + v32 * (v51 >> 1) + 2 * *(void *)&v22;
    float v70 = (uint16x8_t *)(*v23 + v31 * v24 + 2 * *(void *)&v22);
    if (v20 >= 0) {
      uint64_t v71 = v20;
    }
    else {
      uint64_t v71 = v20 + 1;
    }
    uint64_t v72 = *v27;
    uint64_t v73 = v27[1] + v30 * (v71 >> 1);
    float v74 = (char *)&v25[20] + 4;
    float v75 = (char *)(v292 + v289 * v20 + 2 * v19);
    result = (float32x2_t *)((char *)v25 + 16548);
    float16x8_t v76 = (float16x8_t)vdupq_lane_s16(v5, 0);
    float16x8_t v326 = (float16x8_t)vdupq_lane_s16(v3, 0);
    float16x8_t v330 = v59;
    float16x8_t v77 = vmulq_n_f16(v59, v58);
    float16x8_t v78 = (float16x8_t)v65;
    float16x8_t v79 = (float16x8_t)vdupq_lane_s16(v6, 0);
    float v80 = (unsigned __int16 *)(v73 + 2 * v19);
    float v81 = (uint16x8_t *)(v72 + v29 * v20 + 2 * v19);
    __asm { FCVT            H6, S19 }
    short float v310 = _H6;
    float v334 = v25[4].f32[1];
    __asm { FCVT            H6, S9 }
    float v333 = v25[5].f32[0];
    __asm { FCVT            H9, S2 }
    short float v309 = _H9;
    _S2 = v25[5].i32[1];
    __asm { FCVT            H9, S2 }
    float v323 = v25[9].f32[0];
    __asm { FCVT            H7, S16 }
    short float v307 = _H7;
    float v322 = v25[9].f32[1];
    __asm { FCVT            H7, S17 }
    float v321 = v25[10].f32[0];
    __asm { FCVT            H2, S18 }
    short float v305 = *(short float *)&_S2;
    float v320 = v25[10].f32[1];
    __asm { FCVT            H2, S10 }
    float v318 = v25[11].f32[0];
    __asm { FCVT            H10, S12 }
    float v316 = v25[11].f32[1];
    __asm { FCVT            H12, S13 }
    float v314 = v25[12].f32[0];
    __asm { FCVT            H13, S22 }
    float v313 = v25[12].f32[1];
    __asm { FCVT            H3, S3 }
    float v312 = v25[13].f32[0];
    __asm { FCVT            H5, S5 }
    uint16x8_t v342 = (uint16x8_t)vdupq_n_s16(v48);
    float v332 = v11.f32[0];
    uint64_t v94 = v10.i64[0];
    float v298 = v11.f32[1];
    float16x8_t v95 = v339;
    float16x8_t v96 = (float16x8_t)v336;
    uint64_t v97 = v66.i64[0];
    float16x8_t v98 = v78;
    float16x8_t v99 = (float16x8_t)v335;
    float16x8_t v328 = v57;
    float v329 = v9.f32[0];
    v9.f32[0] = v47;
    float v297 = v9.f32[1];
    uint16x8_t v324 = (uint16x8_t)vdupq_n_s16(-v50);
    float16x8_t v325 = v77;
    short float v306 = _H7;
    short float v304 = *(short float *)&_S2;
    short float v299 = _H5;
    short float v300 = _H3;
    uint64_t v295 = v32;
    uint64_t v296 = v30;
    float16x8_t v327 = v79;
    float v338 = v43;
    float16x8_t v319 = v76;
    float16x8_t v317 = v68;
    float16x8_t v315 = v67;
    short float v308 = _H9;
    short float v302 = _H12;
    short float v303 = _H10;
    short float v301 = _H13;
    float v293 = v36;
    float v294 = v47;
    do
    {
      float v100 = &v81->i8[v29];
      char v101 = &v70->i8[v31];
      if ((int)v18 < 8)
      {
        unint64_t v187 = 0;
        float v186 = (_WORD *)v69;
        float16x8_t v105 = (uint16x8_t *)((char *)v70 + v31);
        float v185 = v80;
        float16x8_t v104 = (uint16x8_t *)((char *)v81 + v29);
      }
      else
      {
        uint64_t v102 = 0;
        int v103 = 0;
        float16x8_t v104 = (uint16x8_t *)((char *)v81 + v29);
        float16x8_t v105 = (uint16x8_t *)((char *)v70 + v31);
        v106.i64[0] = 0x9000900090009000;
        v106.i64[1] = 0x9000900090009000;
        do
        {
          float16x8_t v107 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)&v80[v102], v324));
          int8x16_t v108 = (int8x16_t)vmlaq_f16(v339, v331, v107);
          int8x16_t v109 = (int8x16_t)vmlaq_f16(v325, v330, v107);
          v107.i64[0] = vextq_s8(v108, v108, 8uLL).u64[0];
          *(int16x4_t *)v110.i8 = vuzp1_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v107.i8);
          *(int16x4_t *)v107.i8 = vuzp2_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v107.i8);
          *(double *)&v107.i64[1] = a3;
          float16x8_t v111 = (float16x8_t)vzip1q_s16((int16x8_t)v107, (int16x8_t)v107);
          *(double *)&v110.i64[1] = a3;
          float16x8_t v112 = (float16x8_t)vzip1q_s16(v110, v110);
          v107.i64[0] = vextq_s8(v109, v109, 8uLL).u64[0];
          *(float16x4_t *)v107.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v107.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v107.i8));
          *(double *)&v107.i64[1] = a3;
          float16x8_t v113 = (float16x8_t)vzip1q_s16((int16x8_t)v107, (int16x8_t)v107);
          uint16x8_t v114 = *v81++;
          float16x8_t v115 = vcvtq_f16_u16(vshlq_u16(v114, v324));
          uint16x8_t v116 = *v104++;
          float16x8_t v117 = vsubq_f16(v115, v57);
          float16x8_t v118 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v116, v324)), v57);
          float16x8_t v119 = vmlaq_n_f16(v113, v117, v310);
          float16x8_t v120 = vmlaq_n_f16(v112, v117, v310);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v111, v117, v310), (float16x8_t)0), v106));
          uint32x4_t v122 = vmovl_high_u16(v121);
          uint32x4_t v123 = vmovl_u16(*(uint16x4_t *)v121.i8);
          v110.i16[0] = *(_WORD *)&v74[2 * v123.u32[0]];
          v110.i16[1] = *(_WORD *)&v74[2 * v123.u32[1]];
          v110.i16[2] = *(_WORD *)&v74[2 * v123.u32[2]];
          v110.i16[3] = *(_WORD *)&v74[2 * v123.u32[3]];
          v110.i16[4] = *(_WORD *)&v74[2 * v122.u32[0]];
          v110.i16[5] = *(_WORD *)&v74[2 * v122.u32[1]];
          v110.i16[6] = *(_WORD *)&v74[2 * v122.u32[2]];
          v110.i16[7] = *(_WORD *)&v74[2 * v122.u32[3]];
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v106));
          float16x8_t v125 = (float16x8_t)vmovl_high_u16(v124);
          uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v124.i8);
          v119.i16[0] = *(_WORD *)&v74[2 * v126.u32[0]];
          v119.i16[1] = *(_WORD *)&v74[2 * v126.u32[1]];
          v119.i16[2] = *(_WORD *)&v74[2 * v126.u32[2]];
          v119.i16[3] = *(_WORD *)&v74[2 * v126.u32[3]];
          v119.i16[4] = *(_WORD *)&v74[2 * v125.u32[0]];
          v119.i16[5] = *(_WORD *)&v74[2 * v125.u32[1]];
          v119.i16[6] = *(_WORD *)&v74[2 * v125.u32[2]];
          v119.i16[7] = *(_WORD *)&v74[2 * v125.u32[3]];
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v106));
          uint32x4_t v128 = vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v125.i16[0] = *(_WORD *)&v74[2 * v129.u32[0]];
          v125.i16[1] = *(_WORD *)&v74[2 * v129.u32[1]];
          v125.i16[2] = *(_WORD *)&v74[2 * v129.u32[2]];
          v125.i16[3] = *(_WORD *)&v74[2 * v129.u32[3]];
          v125.i16[4] = *(_WORD *)&v74[2 * v128.u32[0]];
          v125.i16[5] = *(_WORD *)&v74[2 * v128.u32[1]];
          v125.i16[6] = *(_WORD *)&v74[2 * v128.u32[2]];
          v125.i16[7] = *(_WORD *)&v74[2 * v128.u32[3]];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v111, v118, v310), (float16x8_t)0), v106));
          uint32x4_t v131 = vmovl_high_u16(v130);
          uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v130.i8);
          v111.i16[0] = *(_WORD *)&v74[2 * v132.u32[0]];
          v111.i16[1] = *(_WORD *)&v74[2 * v132.u32[1]];
          v111.i16[2] = *(_WORD *)&v74[2 * v132.u32[2]];
          v111.i16[3] = *(_WORD *)&v74[2 * v132.u32[3]];
          v111.i16[4] = *(_WORD *)&v74[2 * v131.u32[0]];
          v111.i16[5] = *(_WORD *)&v74[2 * v131.u32[1]];
          v111.i16[6] = *(_WORD *)&v74[2 * v131.u32[2]];
          v111.i16[7] = *(_WORD *)&v74[2 * v131.u32[3]];
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v113, v118, v310), (float16x8_t)0), v106));
          uint32x4_t v134 = vmovl_high_u16(v133);
          float16x8_t v135 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v133.i8);
          v135.i16[0] = *(_WORD *)&v74[2 * v135.u32[0]];
          v135.i16[1] = *(_WORD *)&v74[2 * v135.u32[1]];
          v135.i16[2] = *(_WORD *)&v74[2 * v135.u32[2]];
          v135.i16[3] = *(_WORD *)&v74[2 * v135.u32[3]];
          v135.i16[4] = *(_WORD *)&v74[2 * v134.u32[0]];
          v135.i16[5] = *(_WORD *)&v74[2 * v134.u32[1]];
          v135.i16[6] = *(_WORD *)&v74[2 * v134.u32[2]];
          v135.i16[7] = *(_WORD *)&v74[2 * v134.u32[3]];
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v112, v118, v310), (float16x8_t)0), v106));
          uint32x4_t v137 = vmovl_high_u16(v136);
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v136.i8);
          v139.i16[0] = *(_WORD *)&v74[2 * v138.u32[0]];
          v139.i16[1] = *(_WORD *)&v74[2 * v138.u32[1]];
          v139.i16[2] = *(_WORD *)&v74[2 * v138.u32[2]];
          v139.i16[3] = *(_WORD *)&v74[2 * v138.u32[3]];
          v139.i16[4] = *(_WORD *)&v74[2 * v137.u32[0]];
          v139.i16[5] = *(_WORD *)&v74[2 * v137.u32[1]];
          v139.i16[6] = *(_WORD *)&v74[2 * v137.u32[2]];
          v139.i16[7] = *(_WORD *)&v74[2 * v137.u32[3]];
          float16x8_t v140 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v110, v307), v119, v306), v125, v305);
          float16x8_t v141 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16((float16x8_t)v110, v304), v119, v303), v125, v302);
          float16x8_t v142 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v299), v119, v300), (float16x8_t)v110, v301);
          float16x8_t v143 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v111, v307), v135, v306), v139, v305);
          float16x8_t v144 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v111, v304), v135, v303), v139, v302);
          float16x8_t v145 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v139, v299), v135, v300), v111, v301);
          uint16x8_t v146 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v140, (float16x8_t)0), v106));
          uint32x4_t v147 = vmovl_high_u16(v146);
          uint32x4_t v148 = vmovl_u16(*(uint16x4_t *)v146.i8);
          v111.i16[0] = result->i16[v148.u32[0]];
          v111.i16[1] = result->i16[v148.u32[1]];
          v111.i16[2] = result->i16[v148.u32[2]];
          v111.i16[3] = result->i16[v148.u32[3]];
          v111.i16[4] = result->i16[v147.u32[0]];
          v111.i16[5] = result->i16[v147.u32[1]];
          v111.i16[6] = result->i16[v147.u32[2]];
          uint16x8_t v149 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v141, (float16x8_t)0), v106));
          uint32x4_t v150 = vmovl_high_u16(v149);
          uint32x4_t v151 = vmovl_u16(*(uint16x4_t *)v149.i8);
          v119.i16[7] = (unint64_t)v151.u32[1] >> 48;
          v119.i16[0] = result->i16[v151.u32[0]];
          v119.i16[1] = result->i16[v151.u32[1]];
          v119.i16[2] = result->i16[v151.u32[2]];
          v119.i16[3] = result->i16[v151.u32[3]];
          v119.i16[4] = result->i16[v150.u32[0]];
          v119.i16[5] = result->i16[v150.u32[1]];
          v119.i16[6] = result->i16[v150.u32[2]];
          float16x8_t v152 = (float16x8_t)vuzp1q_s16((int16x8_t)v111, (int16x8_t)v119);
          v111.i16[7] = result->i16[v147.u32[3]];
          v119.i16[7] = result->i16[v150.u32[3]];
          uint16x8_t v153 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v142, (float16x8_t)0), v106));
          uint32x4_t v154 = vmovl_high_u16(v153);
          *(void *)&long long v155 = v154.u32[2];
          *((void *)&v155 + 1) = v154.u32[3];
          long long v156 = v155;
          *(void *)&long long v155 = v154.u32[0];
          *((void *)&v155 + 1) = v154.u32[1];
          long long v157 = v155;
          int16x8_t v158 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v153.i8);
          *((void *)&v155 + 1) = v158.u32[3];
          v158.i16[7] = (unint64_t)v158.u32[1] >> 48;
          v158.i16[0] = result->i16[v158.u32[0]];
          v158.i16[1] = result->i16[v158.u32[1]];
          v158.i16[2] = result->i16[v158.u32[2]];
          v158.i16[3] = result->i16[*((void *)&v155 + 1)];
          v158.i16[4] = result->i16[v157];
          v158.i16[5] = result->i16[*((void *)&v157 + 1)];
          v158.i16[6] = result->i16[v156];
          float16x8_t v159 = (float16x8_t)v158;
          v159.i16[7] = result->i16[*((void *)&v156 + 1)];
          uint16x8_t v160 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v143, (float16x8_t)0), v106));
          uint32x4_t v161 = vmovl_high_u16(v160);
          *(void *)&long long v155 = v161.u32[2];
          *((void *)&v155 + 1) = v161.u32[3];
          long long v162 = v155;
          *(void *)&long long v155 = v161.u32[0];
          *((void *)&v155 + 1) = v161.u32[1];
          long long v163 = v155;
          int16x8_t v164 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v160.i8);
          *((void *)&v155 + 1) = v164.u32[3];
          v164.i16[7] = (unint64_t)v164.u32[1] >> 48;
          v164.i16[0] = result->i16[v164.u32[0]];
          v164.i16[1] = result->i16[v164.u32[1]];
          v164.i16[2] = result->i16[v164.u32[2]];
          v164.i16[3] = result->i16[*((void *)&v155 + 1)];
          v164.i16[4] = result->i16[v163];
          v164.i16[5] = result->i16[*((void *)&v163 + 1)];
          v164.i16[6] = result->i16[v162];
          float16x8_t v165 = (float16x8_t)v164;
          v165.i16[7] = result->i16[*((void *)&v162 + 1)];
          uint16x8_t v166 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v144, (float16x8_t)0), v106));
          uint32x4_t v167 = vmovl_high_u16(v166);
          int16x8_t v168 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v166.i8);
          *(void *)&long long v155 = v167.u32[2];
          *((void *)&v155 + 1) = v167.u32[3];
          long long v169 = v155;
          *(void *)&long long v155 = v167.u32[0];
          *((void *)&v155 + 1) = v167.u32[1];
          long long v170 = v155;
          *((void *)&v155 + 1) = v168.u32[3];
          v168.i16[7] = (unint64_t)v168.u32[3] >> 48;
          v168.i16[0] = result->i16[v168.u32[0]];
          uint64_t v171 = *((void *)&v169 + 1);
          v168.i16[1] = result->i16[v168.u32[1]];
          v168.i16[2] = result->i16[v168.u32[2]];
          v168.i16[3] = result->i16[*((void *)&v155 + 1)];
          v168.i16[4] = result->i16[v170];
          v168.i16[5] = result->i16[*((void *)&v170 + 1)];
          v168.i16[6] = result->i16[v169];
          uint16x8_t v172 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v145, (float16x8_t)0), v106));
          uint32x4_t v173 = vmovl_u16(*(uint16x4_t *)v172.i8);
          uint64_t v174 = v173.u32[1];
          uint64_t v175 = v173.u32[0];
          float16x8_t v176 = (float16x8_t)v168;
          v176.i16[7] = result->i16[v171];
          int16x8_t v177 = (int16x8_t)vmovl_high_u16(v172);
          uint64_t v178 = v173.u32[3];
          uint64_t v179 = v173.u32[2];
          *(void *)&long long v155 = v177.u32[2];
          *((void *)&v155 + 1) = v177.u32[3];
          long long v180 = v155;
          *(void *)&long long v155 = v177.u32[0];
          v177.i16[7] = (unint64_t)v177.u32[1] >> 48;
          v177.i16[0] = result->i16[v175];
          unsigned int v181 = (__int16 *)result + v177.u32[1];
          v177.i16[1] = result->i16[v174];
          v177.i16[2] = result->i16[v179];
          v177.i16[3] = result->i16[v178];
          v177.i16[4] = result->i16[v155];
          v177.i16[5] = *v181;
          v177.i16[6] = result->i16[v180];
          float v182 = (__int16 *)result + *((void *)&v180 + 1);
          float16x8_t v183 = (float16x8_t)v177;
          v183.i16[7] = *v182;
          *v70++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v96, v111, _H6), v119, v309), v159, v308), v96), v76)), v342);
          *v105++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v96, v165, _H6), v176, v309), v183, v308), v96), v76)), v342);
          int16x8_t v184 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v152, (float16x8_t)vuzp2q_s16((int16x8_t)v111, (int16x8_t)v119)), (float16x8_t)vuzp1q_s16(v164, v168)), (float16x8_t)vuzp2q_s16((int16x8_t)v165, (int16x8_t)v176));
          *(uint16x8_t *)(v69 + v102 * 2) = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v68, v98, (float16x8_t)vzip1q_s16(v184, v184)), v99, (float16x8_t)vzip2q_s16(v184, v184)), v67, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v158, v158), (float16x8_t)vtrn2q_s16((int16x8_t)v159, (int16x8_t)v159)), (float16x8_t)vtrn1q_s16(v177, v177)), (float16x8_t)vtrn2q_s16((int16x8_t)v183, (int16x8_t)v183))), v79), v326)), v342);
          v103 += 8;
          v102 += 8;
        }
        while (v103 < (int)v18 - 7);
        float v185 = &v80[v102];
        float v186 = (_WORD *)(v69 + v102 * 2);
        unint64_t v187 = v18 & 0xFFFFFFF8;
        uint64_t v32 = v295;
        uint64_t v30 = v296;
        float16x8_t v95 = v339;
        float v36 = v293;
        v9.f32[0] = v294;
        float v43 = v338;
      }
      for (; v18 > v187; float16x8_t v76 = v319)
      {
        float v188 = (float)(v185[1] >> v50) - v43;
        float v189 = v298 * v188;
        float v190 = _S19 * (float)((float)(v81->u16[0] >> v50) - v36);
        float v191 = (float)(v298 * v188) + v190;
        float v192 = 8191.0;
        if (v191 <= 8191.0)
        {
          float v192 = (float)(v298 * v188) + v190;
          if (v191 < 0.0) {
            float v192 = 0.0;
          }
        }
        float v193 = (float)(*v185 >> v50) - v43;
        float v194 = (float)(*((float *)&v94 + 1) * v188) + (float)(v193 * *(float *)&v94);
        float v195 = 8191.0;
        if ((float)(v190 + v194) <= 8191.0)
        {
          float v195 = v190 + v194;
          if ((float)(v190 + v194) < 0.0) {
            float v195 = 0.0;
          }
        }
        float v196 = v332 * v193;
        float v197 = (float)(v332 * v193) + v190;
        float v198 = 8191.0;
        if (v197 <= 8191.0)
        {
          float v198 = v197;
          if (v197 < 0.0) {
            float v198 = 0.0;
          }
        }
        float v199 = _S19 * (float)((float)(v81->u16[1] >> v50) - v36);
        float v200 = 8191.0;
        if ((float)(v189 + v199) <= 8191.0)
        {
          float v200 = v189 + v199;
          if ((float)(v189 + v199) < 0.0) {
            float v200 = 0.0;
          }
        }
        float v201 = 8191.0;
        if ((float)(v194 + v199) <= 8191.0)
        {
          float v201 = v194 + v199;
          if ((float)(v194 + v199) < 0.0) {
            float v201 = 0.0;
          }
        }
        float v202 = v196 + v199;
        float v203 = 8191.0;
        if (v202 <= 8191.0)
        {
          float v203 = v202;
          if (v202 < 0.0) {
            float v203 = 0.0;
          }
        }
        float v204 = _S19 * (float)((float)(v104->u16[0] >> v50) - v36);
        float v205 = 8191.0;
        if ((float)(v189 + v204) <= 8191.0)
        {
          float v205 = v189 + v204;
          if ((float)(v189 + v204) < 0.0) {
            float v205 = 0.0;
          }
        }
        float v206 = 8191.0;
        if ((float)(v194 + v204) <= 8191.0)
        {
          float v206 = v194 + v204;
          if ((float)(v194 + v204) < 0.0) {
            float v206 = 0.0;
          }
        }
        float v207 = v196 + v204;
        BOOL v208 = (float)(v196 + v204) <= 8191.0;
        float v209 = 8191.0;
        if (v208)
        {
          float v209 = v207;
          if (v207 < 0.0) {
            float v209 = 0.0;
          }
        }
        float v210 = _S19 * (float)((float)(v104->u16[1] >> v50) - v36);
        float v211 = v189 + v210;
        float v212 = 8191.0;
        if (v211 <= 8191.0)
        {
          float v212 = v211;
          if (v211 < 0.0) {
            float v212 = 0.0;
          }
        }
        float16x8_t v213 = v95;
        float v214 = v194 + v210;
        BOOL v208 = (float)(v194 + v210) <= 8191.0;
        float v215 = 8191.0;
        if (v208)
        {
          float v215 = v214;
          if (v214 < 0.0) {
            float v215 = 0.0;
          }
        }
        float v216 = _S19;
        float v217 = v36;
        float v218 = v196 + v210;
        BOOL v208 = (float)(v196 + v210) <= 8191.0;
        float v219 = 8191.0;
        if (v208)
        {
          float v219 = v218;
          if (v218 < 0.0) {
            float v219 = 0.0;
          }
        }
        _H2 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v192, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v195, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H5 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v198, 0.0), 8191.0))];
        _H7 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v200, 0.0), 8191.0))];
        __asm
        {
          FCVT            S5, H5
          FCVT            S7, H7
        }
        _H17 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v201, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        _H9 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v203, 0.0), 8191.0))];
        __asm { FCVT            S9, H9 }
        _H10 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v205, 0.0), 8191.0))];
        __asm { FCVT            S10, H10 }
        _H1 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H16 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v209, 0.0), 8191.0))];
        _H18 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0))];
        __asm
        {
          FCVT            S16, H16
          FCVT            S18, H18
        }
        _H25 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v215, 0.0), 8191.0))];
        __asm { FCVT            S25, H25 }
        _H12 = *(_WORD *)&v74[2 * llroundf(fminf(fmaxf(v219, 0.0), 8191.0))];
        __asm { FCVT            S12, H12 }
        float v244 = (float)((float)(v322 * _S3) + (float)(_S2 * v323)) + (float)(_S5 * v321);
        float v245 = (float)((float)(v318 * _S3) + (float)(_S2 * v320)) + (float)(_S5 * v316);
        _S3 = (float)((float)(v313 * _S3) + (float)(_S2 * v314)) + (float)(_S5 * v312);
        _S5 = (float)((float)(v322 * _S17) + (float)(_S7 * v323)) + (float)(_S9 * v321);
        _S19 = (float)((float)(v318 * _S17) + (float)(_S7 * v320)) + (float)(_S9 * v316);
        _S7 = (float)((float)(v313 * _S17) + (float)(_S7 * v314)) + (float)(_S9 * v312);
        _S17 = (float)((float)(v322 * _S1) + (float)(_S10 * v323)) + (float)(_S16 * v321);
        float v251 = (float)((float)(v318 * _S1) + (float)(_S10 * v320)) + (float)(_S16 * v316);
        float v252 = (float)((float)(v313 * _S1) + (float)(_S10 * v314)) + (float)(_S16 * v312);
        float v253 = (float)((float)(v322 * _S25) + (float)(_S18 * v323)) + (float)(_S12 * v321);
        float v254 = (float)((float)(v318 * _S25) + (float)(_S18 * v320)) + (float)(_S12 * v316);
        float v255 = (float)((float)(v313 * _S25) + (float)(_S18 * v314)) + (float)(_S12 * v312);
        LOWORD(_S1) = result->i16[llroundf(fminf(fmaxf(v244, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        LOWORD(_S2) = result->i16[llroundf(fminf(fmaxf(v245, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        LOWORD(_S3) = result->i16[llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
        LOWORD(_S5) = result->i16[llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
        __asm
        {
          FCVT            S3, H3
          FCVT            S5, H5
        }
        LOWORD(_S16) = result->i16[llroundf(fminf(fmaxf(_S19, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        LOWORD(_S7) = result->i16[llroundf(fminf(fmaxf(_S7, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        LOWORD(_S17) = result->i16[llroundf(fminf(fmaxf(_S17, 0.0), 8191.0))];
        __asm { FCVT            S25, H17 }
        LOWORD(_S17) = result->i16[llroundf(fminf(fmaxf(v251, 0.0), 8191.0))];
        __asm { FCVT            S9, H17 }
        LOWORD(_S17) = result->i16[llroundf(fminf(fmaxf(v252, 0.0), 8191.0))];
        LOWORD(_S19) = result->i16[llroundf(fminf(fmaxf(v253, 0.0), 8191.0))];
        __asm
        {
          FCVT            S10, H17
          FCVT            S17, H19
        }
        LOWORD(_S19) = result->i16[llroundf(fminf(fmaxf(v254, 0.0), 8191.0))];
        unsigned int v266 = llroundf(fminf(fmaxf(v255, 0.0), 8191.0));
        __asm { FCVT            S18, H19 }
        LOWORD(_S19) = result->i16[v266];
        __asm { FCVT            S19, H19 }
        float v269 = (float)((float)((float)(v333 * _S2) + (float)(v334 * _S1)) + (float)(v337 * _S3)) + v45;
        if (v269 < v45) {
          float v270 = v45;
        }
        else {
          float v270 = (float)((float)((float)(v333 * _S2) + (float)(v334 * _S1)) + (float)(v337 * _S3)) + v45;
        }
        BOOL v208 = v269 <= v311;
        float v271 = (float)((float)((float)(v333 * _S16) + (float)(v334 * _S5)) + (float)(v337 * _S7)) + v45;
        if (!v208) {
          float v270 = v311;
        }
        unsigned int v272 = llroundf(v270);
        if (v271 < v45) {
          float v273 = v45;
        }
        else {
          float v273 = (float)((float)((float)(v333 * _S16) + (float)(v334 * _S5)) + (float)(v337 * _S7)) + v45;
        }
        BOOL v208 = v271 <= v311;
        float v274 = (float)((float)((float)(v333 * _S9) + (float)(v334 * _S25)) + (float)(v337 * _S10)) + v45;
        if (!v208) {
          float v273 = v311;
        }
        unsigned int v275 = llroundf(v273);
        if (v274 < v45) {
          float v276 = v45;
        }
        else {
          float v276 = (float)((float)((float)(v333 * _S9) + (float)(v334 * _S25)) + (float)(v337 * _S10)) + v45;
        }
        BOOL v208 = v274 <= v311;
        float v277 = (float)((float)((float)(v333 * _S18) + (float)(v334 * _S17)) + (float)(v337 * _S19)) + v45;
        if (!v208) {
          float v276 = v311;
        }
        unsigned int v278 = llroundf(v276);
        if (v277 < v45) {
          float v279 = v45;
        }
        else {
          float v279 = (float)((float)((float)(v333 * _S18) + (float)(v334 * _S17)) + (float)(v337 * _S19)) + v45;
        }
        if (v277 <= v311) {
          float v280 = v279;
        }
        else {
          float v280 = v311;
        }
        float v281 = (float)((float)(_S1 + _S5) + _S25) + _S17;
        float v282 = (float)((float)(_S2 + *((float *)&v97 + 1)) + _S9) + _S18;
        v70->i16[0] = v272 << v48;
        v70->i16[1] = v275 << v48;
        v105->i16[0] = v278 << v48;
        v105->i16[1] = llroundf(v280) << v48;
        float v283 = (float)((float)(_S3 + _S7) + _S10) + _S19;
        float v284 = (float)((float)(v9.f32[0] + (float)(v281 * v12.f32[0])) + (float)(v282 * *(float *)&v97))
             + (float)(v283 * v329);
        float v285 = v341;
        if (v284 <= v341)
        {
          float v285 = (float)((float)(v9.f32[0] + (float)(v281 * v12.f32[0])) + (float)(v282 * *(float *)&v97))
               + (float)(v283 * v329);
          if (v284 < v340) {
            float v285 = v340;
          }
        }
        float v286 = (float)((float)(v9.f32[0] + (float)(v281 * v12.f32[1])) + (float)(v282 * *((float *)&v97 + 1)))
             + (float)(v283 * v297);
        *float v186 = llroundf(v285) << v48;
        float v287 = v341;
        float v36 = v217;
        float v43 = v338;
        _S19 = v216;
        float16x8_t v95 = v213;
        if (v286 <= v341)
        {
          float v287 = v286;
          if (v286 < v340) {
            float v287 = v340;
          }
        }
        v187 += 2;
        v185 += 2;
        float v81 = (uint16x8_t *)((char *)v81 + 4);
        float16x8_t v104 = (uint16x8_t *)((char *)v104 + 4);
        v186[1] = llroundf(v287) << v48;
        float v70 = (uint16x8_t *)((char *)v70 + 4);
        float16x8_t v105 = (uint16x8_t *)((char *)v105 + 4);
        v186 += 2;
        float16x8_t v79 = v327;
        float16x8_t v57 = v328;
        float16x8_t v99 = (float16x8_t)v335;
        float16x8_t v96 = (float16x8_t)v336;
        float16x8_t v67 = v315;
        float16x8_t v68 = v317;
      }
      float v81 = (uint16x8_t *)&v100[v29];
      float v80 = (unsigned __int16 *)((char *)v80 + v30);
      float v70 = (uint16x8_t *)&v101[v31];
      v69 += v32;
      v17 += 2;
    }
    while (v21 > v17);
    if (v292 && v291)
    {
      size_t v288 = 2 * v18;
      do
      {
        result = (float32x2_t *)memcpy(v54, v75, v288);
        v75 += v289;
        v54 += v290;
        --v21;
      }
      while (v21);
    }
    else if (v291)
    {
      do
      {
        if (v18) {
          result = (float32x2_t *)memset(v54, 255, 2 * v18);
        }
        v54 += v290;
        --v21;
      }
      while (v21);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_xf420_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 36);
    uint64_t v13 = *(void *)(result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = *((void *)result + 14);
    uint64_t v16 = (void *)*((void *)result + 16);
    uint64_t v17 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7);
    uint64_t v18 = *((void *)result + 19);
    uint64_t v19 = (uint64_t *)*((void *)result + 7);
    uint64_t v20 = (uint64_t *)*((void *)result + 8);
    uint64_t v21 = (uint64_t *)*((void *)result + 17);
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v164 = v19[2];
    uint64_t v25 = (char *)(v164 + v24 * v13 + 2 * v12);
    uint64_t v26 = *v21;
    uint64_t v27 = v21[1];
    uint64_t v28 = v21[2];
    uint64_t v29 = v16[2];
    uint64_t v30 = (char *)(v29 + v28 * v17 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v32 = (float)LODWORD(a5);
    float v33 = (float)LODWORD(a6);
    float v34 = v31 * *(float *)v18;
    float v187 = v31 * *(float *)(v18 + 16);
    float v188 = v31 * *(float *)(v18 + 8);
    float v35 = v31 * *(float *)(v18 + 20);
    *(float *)&unsigned int v36 = v31 * *(float *)(v18 + 28);
    float v185 = *(float *)&v36;
    float v186 = v35;
    LOWORD(v36) = *(_WORD *)(v18 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v18 + 150);
    float v40 = (float)v36;
    float v189 = v40;
    LOWORD(v40) = *(_WORD *)(v18 + 152);
    float v181 = *(float *)(v18 + 40);
    float v182 = *(float *)(v18 + 36);
    float v179 = *(float *)(v18 + 48) * 0.25;
    float v180 = *(float *)(v18 + 44);
    float v177 = *(float *)(v18 + 56) * 0.25;
    float v178 = *(float *)(v18 + 52) * 0.25;
    float v175 = *(float *)(v18 + 64) * 0.25;
    float v176 = *(float *)(v18 + 60) * 0.25;
    float v173 = *(float *)(v18 + 68) * 0.25;
    float v174 = *(float *)(v18 + 72);
    float v171 = *(float *)(v18 + 80);
    float v172 = *(float *)(v18 + 76);
    float v169 = *(float *)(v18 + 88);
    float v170 = *(float *)(v18 + 84);
    float v167 = *(float *)(v18 + 96);
    float v168 = *(float *)(v18 + 92);
    float v165 = *(float *)(v18 + 104);
    float v166 = *(float *)(v18 + 100);
    uint64_t v41 = v18 + 164;
    uint64_t v42 = v18 + 16548;
    uint64_t v43 = v16[1];
    short float v44 = (char *)(*v16 + v26 * v17 + 2 * v15);
    uint64_t v45 = *v19;
    uint64_t v46 = v19[1];
    result = (unsigned __int8 *)(v45 + *v20 * v13 + 2 * v12);
    unsigned int v47 = *(unsigned __int8 *)(v18 + 132);
    _CF = v47 >= 0x11;
    char v49 = 16 - v47;
    if (_CF) {
      char v49 = 0;
    }
    unsigned int v50 = *(unsigned __int8 *)(v18 + 124);
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    else {
      char v51 = 16 - v50;
    }
    uint64_t v52 = v43 + v27 * (v17 / 2) + 2 * v15;
    uint64_t v53 = v46 + v20[1] * (v13 / 2) + 2 * v12;
    char v54 = v51;
    char v55 = v49;
    float v183 = (float)LODWORD(v40);
    float v184 = v38;
    do
    {
      float v56 = &result[v22];
      float16x8_t v57 = &v44[v26];
      if (v11)
      {
        unint64_t v58 = 0;
        float16x8_t v59 = &result[v22];
        uint64_t v60 = &v44[v26];
        do
        {
          unint64_t v61 = (unsigned __int16 *)(v53 + 2 * v58);
          float v62 = (float)(v61[1] >> v54) - v33;
          float v63 = v188 * v62;
          float v64 = v34 * (float)((float)(*(unsigned __int16 *)result >> v54) - v32);
          float v65 = (float)(v188 * v62) + v64;
          float v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            float v66 = (float)(v188 * v62) + v64;
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = (float)(*v61 >> v54) - v33;
          float v68 = (float)(v186 * v62) + (float)(v67 * v187);
          float v69 = 8191.0;
          if ((float)(v64 + v68) <= 8191.0)
          {
            float v69 = v64 + v68;
            if ((float)(v64 + v68) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v185 * v67;
          float v71 = (float)(v185 * v67) + v64;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v34 * (float)((float)(*((unsigned __int16 *)result + 1) >> v54) - v32);
          float v74 = 8191.0;
          if ((float)(v63 + v73) <= 8191.0)
          {
            float v74 = v63 + v73;
            if ((float)(v63 + v73) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = 8191.0;
          if ((float)(v68 + v73) <= 8191.0)
          {
            float v75 = v68 + v73;
            if ((float)(v68 + v73) < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v70 + v73;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v34 * (float)((float)(*(unsigned __int16 *)v59 >> v54) - v32);
          float v79 = 8191.0;
          if ((float)(v63 + v78) <= 8191.0)
          {
            float v79 = v63 + v78;
            if ((float)(v63 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            float v80 = v68 + v78;
            if ((float)(v68 + v78) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v70 + v78;
          BOOL v82 = (float)(v70 + v78) <= 8191.0;
          float v83 = 8191.0;
          if (v82)
          {
            float v83 = v81;
            if (v81 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v34 * (float)((float)(*((unsigned __int16 *)v59 + 1) >> v54) - v32);
          float v85 = v63 + v84;
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v68 + v84;
          BOOL v82 = (float)(v68 + v84) <= 8191.0;
          float v88 = 8191.0;
          if (v82)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v70 + v84;
          BOOL v82 = (float)(v70 + v84) <= 8191.0;
          float v90 = 8191.0;
          if (v82)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S7, H7
          }
          _H17 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H24 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H27 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H19 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H2 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S1, H1
          }
          _H25 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          float v118 = (float)((float)(v172 * _S5) + (float)(_S4 * v174)) + (float)(_S6 * v171);
          float v119 = (float)((float)(v169 * _S5) + (float)(_S4 * v170)) + (float)(_S6 * v168);
          float v120 = (float)((float)(v166 * _S5) + (float)(_S4 * v167)) + (float)(_S6 * v165);
          _S3 = (float)((float)(v172 * _S17) + (float)(_S7 * v174)) + (float)(_S24 * v171);
          float v122 = (float)((float)(v169 * _S17) + (float)(_S7 * v170)) + (float)(_S24 * v168);
          float v123 = (float)((float)(v166 * _S17) + (float)(_S7 * v167)) + (float)(_S24 * v165);
          _S17 = (float)((float)(v172 * _S19) + (float)(_S27 * v174)) + (float)(_S2 * v171);
          float v125 = (float)((float)(v169 * _S19) + (float)(_S27 * v170)) + (float)(_S2 * v168);
          float v126 = (float)((float)(v166 * _S19) + (float)(_S27 * v167)) + (float)(_S2 * v165);
          float v127 = (float)((float)(v172 * _S25) + (float)(_S1 * v174)) + (float)(_S26 * v171);
          float v128 = (float)((float)(v169 * _S25) + (float)(_S1 * v170)) + (float)(_S26 * v168);
          float v129 = (float)((float)(v166 * _S25) + (float)(_S1 * v167)) + (float)(_S26 * v165);
          LOWORD(_S2) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          __asm { FCVT            S4, H2 }
          LOWORD(_S2) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          LOWORD(_S2) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S6, H3
          }
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S24, H3 }
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm { FCVT            S25, H3 }
          LOWORD(_S3) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          LOWORD(_S17) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H3
            FCVT            S3, H17
          }
          LOWORD(_S17) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          unsigned int v140 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          __asm { FCVT            S1, H17 }
          LOWORD(_S17) = *(_WORD *)(v42 + 2 * v140);
          __asm { FCVT            S17, H17 }
          float v143 = (float)((float)((float)(v181 * _S5) + (float)(v182 * _S4)) + (float)(v180 * _S2)) + v37;
          if (v143 < v37) {
            float v144 = v37;
          }
          else {
            float v144 = (float)((float)((float)(v181 * _S5) + (float)(v182 * _S4)) + (float)(v180 * _S2)) + v37;
          }
          BOOL v82 = v143 <= v39;
          float v145 = (float)((float)((float)(v181 * _S19) + (float)(v182 * _S6)) + (float)(v180 * _S7)) + v37;
          if (!v82) {
            float v144 = v39;
          }
          unsigned int v146 = llroundf(v144);
          if (v145 < v37) {
            float v147 = v37;
          }
          else {
            float v147 = (float)((float)((float)(v181 * _S19) + (float)(v182 * _S6)) + (float)(v180 * _S7)) + v37;
          }
          BOOL v82 = v145 <= v39;
          float v148 = (float)((float)((float)(v181 * _S25) + (float)(v182 * _S24)) + (float)(v180 * _S26)) + v37;
          if (!v82) {
            float v147 = v39;
          }
          unsigned int v149 = llroundf(v147);
          if (v148 < v37) {
            float v150 = v37;
          }
          else {
            float v150 = (float)((float)((float)(v181 * _S25) + (float)(v182 * _S24)) + (float)(v180 * _S26)) + v37;
          }
          BOOL v82 = v148 <= v39;
          float v151 = (float)((float)((float)(v181 * _S1) + (float)(v182 * _S3)) + (float)(v180 * _S17)) + v37;
          if (!v82) {
            float v150 = v39;
          }
          unsigned int v152 = llroundf(v150);
          if (v151 < v37) {
            float v153 = v37;
          }
          else {
            float v153 = (float)((float)((float)(v181 * _S1) + (float)(v182 * _S3)) + (float)(v180 * _S17)) + v37;
          }
          if (v151 <= v39) {
            float v154 = v153;
          }
          else {
            float v154 = v39;
          }
          float v155 = (float)((float)(_S4 + _S6) + _S24) + _S3;
          float v156 = (float)((float)(_S5 + _S19) + _S25) + _S1;
          *(_WORD *)short float v44 = v146 << v55;
          *((_WORD *)v44 + 1) = v149 << v55;
          *(_WORD *)uint64_t v60 = v152 << v55;
          *((_WORD *)v60 + 1) = llroundf(v154) << v55;
          float v157 = (float)((float)(_S2 + _S7) + _S26) + _S17;
          float v158 = (float)((float)(v184 + (float)(v155 * v179)) + (float)(v156 * v178)) + (float)(v157 * v177);
          float v159 = v183;
          if (v158 <= v183)
          {
            float v159 = (float)((float)(v184 + (float)(v155 * v179)) + (float)(v156 * v178)) + (float)(v157 * v177);
            if (v158 < v189) {
              float v159 = v189;
            }
          }
          uint16x8_t v160 = (_WORD *)(v52 + 2 * v58);
          float v161 = (float)((float)(v184 + (float)(v155 * v176)) + (float)(v156 * v175)) + (float)(v157 * v173);
          _WORD *v160 = llroundf(v159) << v55;
          float v162 = v183;
          if (v161 <= v183)
          {
            float v162 = v161;
            if (v161 < v189) {
              float v162 = v189;
            }
          }
          result += 4;
          v59 += 4;
          v44 += 4;
          v60 += 4;
          v160[1] = llroundf(v162) << v55;
          v58 += 2;
        }
        while (v11 > v58);
      }
      result = &v56[v22];
      v53 += v23;
      short float v44 = &v57[v26];
      v52 += v27;
      v10 += 2;
    }
    while (v14 > v10);
    if (v164 && v29)
    {
      size_t v163 = 2 * v11;
      do
      {
        result = (unsigned __int8 *)memcpy(v30, v25, v163);
        v25 += v24;
        v30 += v28;
        --v14;
      }
      while (v14);
    }
    else if (v29)
    {
      do
      {
        if (v11) {
          result = (unsigned __int8 *)memset(v30, 255, 2 * v11);
        }
        v30 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_xf420_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_xf420_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = 2 * *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    uint64_t v14 = *(void *)(result + 36);
    uint64_t v15 = *(void *)(result + 44) + 2 * v10;
    unint64_t v16 = 2 * v11 - 2 * v10;
    uint64_t v17 = *((void *)result + 14);
    uint64_t v18 = (uint64_t *)*((void *)result + 16);
    uint64_t v19 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v9);
    uint64_t v20 = (float32x2_t *)*((void *)result + 19);
    size_t v22 = (uint64_t *)*((void *)result + 7);
    uint64_t v21 = (uint64_t *)*((void *)result + 8);
    uint64_t v23 = (uint64_t *)*((void *)result + 17);
    uint64_t v24 = *v21;
    uint64_t v25 = v21[1];
    uint64_t v26 = v21[2];
    uint64_t v170 = v22[2];
    uint64_t v27 = *v23;
    uint64_t v28 = v23[1];
    uint64_t v29 = v23[2];
    uint64_t v169 = v18[2];
    unsigned int v30 = v20[17].u16[2];
    unsigned int v31 = v20[17].u16[3];
    v4.i32[0] = v20[3].i32[1];
    unsigned int v32 = v20[18].u16[0];
    unsigned int v33 = v20[18].u16[1];
    unsigned int v34 = v20[18].u16[2];
    unsigned int v35 = v20[18].u16[3];
    unsigned int v36 = v20[19].u16[0];
    LODWORD(_D0) = v20[4].i32[1];
    _S1 = v20[5].f32[0];
    _S30 = v20[5].f32[1];
    v6.i32[0] = v20[6].i32[0];
    v40.i32[0] = v20[6].i32[1];
    v39.i32[0] = v20[7].i32[0];
    float v175 = (float)v30;
    *(short float *)v5.i16 = (short float)v30;
    uint64_t v41 = (char *)(v170 + v26 * v15 + 2 * v14);
    uint64_t v42 = (char *)(v169 + v29 * v19 + 2 * v17);
    float v43 = (float)v20[17].u32[0] / (float)v20[16].u32[0];
    float v44 = (float)v32;
    float v45 = (float)v33;
    float v46 = (float)v34;
    float v190 = (float)v31;
    float v191 = (float)v35;
    _S17 = v43 * v20->f32[0];
    float v48 = (float)v36;
    __asm { FCVT            H8, S17 }
    float16x8_t v54 = (float16x8_t)vdupq_lane_s16(v5, 0);
    v4.i32[1] = v20[1].i32[0];
    *(float32x2_t *)v4.f32 = vmul_n_f32(*(float32x2_t *)v4.f32, v43);
    short float v55 = -(short float)v31;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    *(float32x2_t *)v7.f32 = vmul_n_f32(v20[2], v43);
    float16x8_t v56 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v7), 0);
    float16x8_t v173 = vmulq_n_f16(v62, v55);
    float16x8_t v174 = v62;
    float16x8_t v57 = vmulq_n_f16(v56, v55);
    float16x8_t v58 = v56;
    float v176 = *(float *)&_D0;
    __asm { FCVT            H9, S0 }
    v6.i32[1] = v20[7].i32[1];
    __asm { FMOV            V4.2S, #0.25 }
    *(float32x2_t *)v6.f32 = vmul_f32(*(float32x2_t *)v6.f32, _D4);
    float16x8_t v61 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    v40.i32[1] = v20[8].i32[0];
    *(float32x2_t *)v62.i8 = vmul_f32(v40, _D4);
    *(double *)&v64.i64[1] = _D0;
    int32x4_t v63 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v62), 0);
    v39.i32[1] = v20[8].i32[1];
    *(float32x2_t *)v64.f32 = vmul_f32(v39, _D4);
    int16x4_t v65 = (int16x4_t)vcvt_f16_f32(v64);
    __asm { FCVT            H15, S1 }
    float16x8_t v66 = (float16x8_t)vdupq_lane_s32((int32x2_t)v65, 0);
    *(short float *)v65.i16 = (short float)v32;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(v65, 0);
    *(short float *)v65.i16 = (short float)v33;
    int16x8_t v68 = vdupq_lane_s16(v65, 0);
    *(short float *)v65.i16 = (short float)v34;
    int16x8_t v69 = vdupq_lane_s16(v65, 0);
    *(short float *)v65.i16 = (short float)v35;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(v65, 0);
    *(short float *)v65.i16 = (short float)v36;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(v65, 0);
    unsigned int v72 = v20[16].u8[4];
    if (v72 >= 0x11) {
      unsigned __int8 v73 = 0;
    }
    else {
      unsigned __int8 v73 = 16 - v72;
    }
    unsigned int v74 = v20[15].u8[4];
    unsigned __int8 v75 = 16 - v74;
    if (v74 >= 0x11) {
      unsigned __int8 v75 = 0;
    }
    if (v19 >= 0) {
      uint64_t v76 = v19;
    }
    else {
      uint64_t v76 = v19 + 1;
    }
    uint64_t v77 = *v18;
    uint64_t v78 = v18[1] + v28 * (v76 >> 1) + 2 * v17;
    float v79 = (uint16x8_t *)(v77 + v27 * v19 + 2 * v17);
    if (v15 >= 0) {
      uint64_t v80 = v15;
    }
    else {
      uint64_t v80 = v15 + 1;
    }
    uint64_t v81 = *v22;
    uint64_t v82 = v22[1] + v25 * (v80 >> 1) + 2 * v14;
    result = (unsigned __int8 *)(v81 + v24 * v15 + 2 * v14);
    unsigned __int8 v83 = v73;
    uint16x8_t v84 = (uint16x8_t)vdupq_n_s16(-v75);
    uint16x8_t v85 = (uint16x8_t)vdupq_n_s16(v73);
    __asm { FCVT            H12, S30 }
    float v188 = v7.f32[0];
    float v189 = v4.f32[0];
    float16x8_t v87 = v57;
    float v187 = v4.f32[1];
    float v186 = v7.f32[1];
    uint64_t v88 = v6.i64[0];
    uint64_t v89 = v62.i64[0];
    float16x8_t v90 = (float16x8_t)v68;
    float v91 = _S30;
    uint64_t v92 = v64.i64[0];
    float16x8_t v184 = v57;
    float16x8_t v185 = v58;
    int32x4_t v182 = v63;
    short float v183 = _H9;
    float16x8_t v180 = v71;
    float16x8_t v181 = v90;
    uint16x8_t v178 = v85;
    uint16x8_t v179 = v84;
    short float v177 = _H12;
    float v171 = _S30;
    float v172 = _S1;
    do
    {
      float v93 = &result[v24];
      uint64_t v94 = &v79->i8[v27];
      if ((int)v13 < 8)
      {
        unint64_t v127 = 0;
        float v126 = (_WORD *)v78;
        float16x8_t v98 = (uint16x8_t *)((char *)v79 + v27);
        float v125 = (unsigned __int16 *)v82;
        uint64_t v97 = (uint16x8_t *)&result[v24];
        float v128 = v176;
      }
      else
      {
        uint64_t v95 = 0;
        int v96 = 0;
        uint64_t v97 = (uint16x8_t *)&result[v24];
        float16x8_t v98 = (uint16x8_t *)((char *)v79 + v27);
        float16x8_t v99 = (float16x8_t)v69;
        do
        {
          float16x8_t v100 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)(v82 + v95), v84));
          int16x8_t v101 = (int16x8_t)vmlaq_f16(v173, v174, v100);
          int8x16_t v102 = (int8x16_t)vmlaq_f16(v87, v58, v100);
          v100.i64[0] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
          *(int16x4_t *)v103.i8 = vuzp1_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
          *(int16x4_t *)v100.i8 = vuzp2_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
          v100.i64[1] = v87.i64[0];
          v103.i64[1] = v87.i64[0];
          float16x8_t v104 = (float16x8_t)vzip1q_s16((int16x8_t)v100, (int16x8_t)v100);
          float16x8_t v105 = (float16x8_t)vzip1q_s16(v103, v103);
          v101.i64[0] = vextq_s8(v102, v102, 8uLL).u64[0];
          float16x8_t v106 = v90;
          *(float16x4_t *)v101.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8));
          v101.i64[1] = v87.i64[0];
          float16x8_t v107 = (float16x8_t)vzip1q_s16(v101, v101);
          uint16x8_t v108 = *(uint16x8_t *)result;
          result += 16;
          float16x8_t v109 = vcvtq_f16_u16(vshlq_u16(v108, v84));
          uint16x8_t v110 = *v97++;
          float16x8_t v111 = vsubq_f16(v109, v54);
          float16x8_t v112 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v110, v84)), v54);
          float16x8_t v113 = vmlaq_n_f16(v104, v111, _H8);
          float16x8_t v114 = vmlaq_n_f16(v104, v112, _H8);
          float16x8_t v115 = vmlaq_n_f16(v107, v111, _H8);
          float16x8_t v116 = vmlaq_n_f16(v107, v112, _H8);
          float16x8_t v117 = (float16x8_t)v63;
          float16x8_t v118 = v58;
          float16x8_t v119 = vmlaq_n_f16(v105, v111, _H8);
          float16x8_t v120 = vmlaq_n_f16(v105, v112, _H8);
          *v79++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v113, _H9), v115, *(short float *)&_Q15), v119, _H12), v67), v99)), v85);
          *v98++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v114, _H9), v116, *(short float *)&_Q15), v120, _H12), v67), v99)), v85);
          int16x8_t v121 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v114, (int16x8_t)v116), vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v114, (int16x8_t)v116), vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v113, (int16x8_t)v115), (float16x8_t)vuzp2q_s16((int16x8_t)v113, (int16x8_t)v115))));
          float16x8_t v122 = (float16x8_t)vtrn2q_s16((int16x8_t)v119, (int16x8_t)v119);
          float16x8_t v123 = (float16x8_t)vtrn1q_s16((int16x8_t)v119, (int16x8_t)v119);
          float16x8_t v58 = v118;
          int32x4_t v63 = (int32x4_t)v117;
          float16x8_t v124 = vaddq_f16(vaddq_f16(v123, v122), (float16x8_t)vtrn1q_s16((int16x8_t)v120, (int16x8_t)v120));
          float16x8_t v90 = v106;
          *(uint16x8_t *)(v78 + v95) = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v106, v61, (float16x8_t)vzip1q_s16(v121, v121)), v117, (float16x8_t)vzip2q_s16(v121, v121)), v66, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v120, (int16x8_t)v120), v124)), v70), v71)), v85);
          v96 += 8;
          v95 += 16;
        }
        while (v96 < (int)v13 - 7);
        float v125 = (unsigned __int16 *)(v82 + v95);
        float v126 = (_WORD *)(v78 + v95);
        unint64_t v127 = v13 & 0xFFFFFFF8;
        int16x8_t v69 = (int16x8_t)v99;
        float v128 = v176;
        float v91 = v171;
        _S1 = v172;
      }
      for (; v13 > v127; float16x8_t v70 = v129)
      {
        float16x8_t v129 = v70;
        float16x8_t v130 = v66;
        long long v131 = _Q15;
        float16x8_t v132 = v61;
        float16x8_t v133 = v54;
        float v134 = (float)(*v125 >> v75) - v190;
        float v135 = (float)(v125[1] >> v75) - v190;
        float v136 = v187 * v135;
        float v137 = (float)(v186 * v135) + (float)(v134 * v188);
        float v138 = v189 * v134;
        float v139 = _S17 * (float)((float)(*(unsigned __int16 *)result >> v75) - v175);
        float v140 = (float)(v187 * v135) + v139;
        float v141 = v139 + v137;
        float v142 = v138 + v139;
        float v143 = (float)((float)((float)(_S1 * (float)(v139 + v137)) + (float)(v128 * v140))
                     + (float)(v91 * (float)(v138 + v139)))
             + v44;
        float v144 = v46;
        if (v143 <= v46)
        {
          float v144 = v143;
          if (v143 < v44) {
            float v144 = v44;
          }
        }
        int16x8_t v145 = v69;
        float v146 = v45;
        float v147 = _S17 * (float)((float)(*((unsigned __int16 *)result + 1) >> v75) - v175);
        unsigned int v148 = v97->u16[0];
        unsigned int v149 = v97->u16[1];
        float v150 = v136 + v147;
        float v151 = v137 + v147;
        float v152 = v138 + v147;
        float v153 = (float)((float)((float)(_S1 * (float)(v137 + v147)) + (float)(v128 * (float)(v136 + v147)))
                     + (float)(v91 * (float)(v138 + v147)))
             + v44;
        v79->i16[0] = llroundf(v144) << v83;
        float v154 = v46;
        if (v153 <= v46)
        {
          float v154 = (float)((float)((float)(_S1 * (float)(v137 + v147)) + (float)(v128 * (float)(v136 + v147)))
                       + (float)(v91 * (float)(v138 + v147)))
               + v44;
          if (v153 < v44) {
            float v154 = v44;
          }
        }
        float v155 = _S17 * (float)((float)(int)(v148 >> v75) - v175);
        float v156 = v136 + v155;
        float v157 = v137 + v155;
        float v158 = v138 + v155;
        float v159 = (float)((float)((float)(_S1 * (float)(v137 + v155)) + (float)(v128 * (float)(v136 + v155)))
                     + (float)(v91 * (float)(v138 + v155)))
             + v44;
        v79->i16[1] = llroundf(v154) << v83;
        float v160 = v46;
        if (v159 <= v46)
        {
          float v160 = v159;
          if (v159 < v44) {
            float v160 = v44;
          }
        }
        float v161 = _S17 * (float)((float)(int)(v149 >> v75) - v175);
        v98->i16[0] = llroundf(v160) << v83;
        v98->i16[1] = llroundf(*((float *)&v89 + 1)) << v83;
        float v162 = (float)((float)(v140 + v150) + v156) + (float)(v136 + v161);
        float v45 = v146;
        float v163 = (float)((float)(v141 + v151) + v157) + (float)(v137 + v161);
        float v164 = (float)((float)(v142 + v152) + v158) + (float)(v138 + v161);
        float v165 = v48;
        _Q15 = v131;
        if ((float)((float)((float)(v146 + (float)(v162 * *(float *)&v88)) + (float)(v163 * *(float *)&v89))
                   + (float)(v164 * *(float *)&v92)) <= v48)
        {
          float v165 = (float)((float)(v146 + (float)(v162 * *(float *)&v88)) + (float)(v163 * *(float *)&v89))
               + (float)(v164 * *(float *)&v92);
          if (*((float *)&v89 + 1) < v191) {
            float v165 = v191;
          }
        }
        float v166 = (float)((float)(v146 + (float)(v162 * *((float *)&v88 + 1))) + (float)(v163 * *((float *)&v89 + 1)))
             + (float)(v164 * *((float *)&v92 + 1));
        *float v126 = llroundf(v165) << v83;
        float v167 = v48;
        float16x8_t v61 = v132;
        float16x8_t v66 = v130;
        int16x8_t v69 = v145;
        if (v166 <= v48)
        {
          float v167 = v166;
          if (v166 < v191) {
            float v167 = v191;
          }
        }
        v127 += 2;
        v125 += 2;
        result += 4;
        uint64_t v97 = (uint16x8_t *)((char *)v97 + 4);
        v126[1] = llroundf(v167) << v83;
        float v79 = (uint16x8_t *)((char *)v79 + 4);
        float16x8_t v98 = (uint16x8_t *)((char *)v98 + 4);
        v126 += 2;
        float16x8_t v54 = v133;
      }
      result = &v93[v24];
      v82 += v25;
      float v79 = (uint16x8_t *)&v94[v27];
      v78 += v28;
      v12 += 2;
      float16x8_t v87 = v184;
      float16x8_t v58 = v185;
      int32x4_t v63 = v182;
      _H9 = v183;
      float16x8_t v71 = v180;
      float16x8_t v90 = v181;
      uint16x8_t v85 = v178;
      uint16x8_t v84 = v179;
      _H12 = v177;
    }
    while (v16 > v12);
    if (v170 && v169)
    {
      size_t v168 = 2 * v13;
      do
      {
        result = (unsigned __int8 *)memcpy(v42, v41, v168);
        v41 += v26;
        v42 += v29;
        --v16;
      }
      while (v16);
    }
    else if (v169)
    {
      do
      {
        if (v13) {
          result = (unsigned __int8 *)memset(v42, 255, 2 * v13);
        }
        v42 += v29;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_xf420_GCD);
  return 0;
}

void *vt_Copy_xf420_rgb_xf420_GCD(void *result, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)result + 28);
  unint64_t v3 = 2 * *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = *(void *)((char *)result + 20);
    uint64_t v8 = *(void *)((char *)result + 36);
    uint64_t v9 = *(void *)((char *)result + 44) + 2 * v4;
    unint64_t v10 = 2 * v5 - 2 * v4;
    uint64_t v11 = result[14];
    uint64_t v12 = (void *)result[16];
    uint64_t v13 = result[15] + 2 * (result[13] * a2 / v3);
    uint64_t v14 = result[19];
    uint64_t v16 = (void *)result[7];
    uint64_t v15 = (uint64_t *)result[8];
    uint64_t v17 = (uint64_t *)result[17];
    uint64_t v18 = *v15;
    uint64_t v19 = v15[1];
    uint64_t v20 = v15[2];
    uint64_t v21 = v16[2];
    size_t v22 = (char *)(v21 + v20 * v9 + 2 * v8);
    uint64_t v23 = *v17;
    uint64_t v24 = v17[1];
    uint64_t v25 = v17[2];
    uint64_t v26 = v12[2];
    uint64_t v27 = (char *)(v26 + v25 * v13 + 2 * v11);
    *(float *)&unsigned int v28 = (float)*(unsigned int *)(v14 + 128);
    *(float *)&unsigned int v29 = (float)*(unsigned int *)(v14 + 136);
    float v30 = *(float *)&v29 / *(float *)&v28;
    LOWORD(v28) = *(_WORD *)(v14 + 140);
    float v31 = (float)v28;
    LOWORD(v29) = *(_WORD *)(v14 + 142);
    float v32 = (float)v29;
    float v33 = v30 * *(float *)v14;
    float v113 = v30 * *(float *)(v14 + 16);
    float v114 = v30 * *(float *)(v14 + 8);
    float v34 = v30 * *(float *)(v14 + 20);
    *(float *)&unsigned int v35 = v30 * *(float *)(v14 + 28);
    float v111 = *(float *)&v35;
    float v112 = v34;
    LOWORD(v35) = *(_WORD *)(v14 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 150);
    float v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 152);
    float v40 = (float)v35;
    float v41 = *(float *)(v14 + 36);
    float v42 = *(float *)(v14 + 40);
    float v43 = *(float *)(v14 + 44);
    float v44 = *(float *)(v14 + 48) * 0.25;
    float v45 = *(float *)(v14 + 52) * 0.25;
    float v46 = *(float *)(v14 + 56) * 0.25;
    float v47 = *(float *)(v14 + 60) * 0.25;
    float v48 = *(float *)(v14 + 64) * 0.25;
    float v49 = *(float *)(v14 + 68) * 0.25;
    uint64_t v50 = v12[1];
    char v51 = (char *)(*v12 + v23 * v13 + 2 * v11);
    uint64_t v52 = v16[1];
    uint64_t v53 = (char *)(*v16 + v18 * v9 + 2 * v8);
    unsigned int v54 = *(unsigned __int8 *)(v14 + 132);
    BOOL v55 = v54 >= 0x11;
    char v56 = 16 - v54;
    if (v55) {
      char v57 = 0;
    }
    else {
      char v57 = v56;
    }
    unsigned int v58 = *(unsigned __int8 *)(v14 + 124);
    char v59 = 16 - v58;
    if (v58 >= 0x11) {
      char v59 = 0;
    }
    if (v13 >= 0) {
      uint64_t v60 = v13;
    }
    else {
      uint64_t v60 = v13 + 1;
    }
    uint64_t v61 = v50 + v24 * (v60 >> 1) + 2 * v11;
    if (v9 >= 0) {
      uint64_t v62 = v9;
    }
    else {
      uint64_t v62 = v9 + 1;
    }
    result = (void *)(v52 + v19 * (v62 >> 1) + 2 * v8);
    char v63 = v59;
    char v64 = v57;
    do
    {
      int16x4_t v65 = &v53[v18];
      float16x8_t v66 = &v51[v23];
      if (v7)
      {
        unint64_t v67 = 0;
        int16x8_t v68 = &v53[v18];
        int16x8_t v69 = &v51[v23];
        do
        {
          float16x8_t v70 = (unsigned __int16 *)result + v67;
          float v71 = (float)(*v70 >> v63) - v32;
          float v72 = (float)(v70[1] >> v63) - v32;
          float v73 = v114 * v72;
          float v74 = (float)(v112 * v72) + (float)(v71 * v113);
          float v75 = v111 * v71;
          float v76 = v33 * (float)((float)(*(unsigned __int16 *)v53 >> v63) - v31);
          float v77 = (float)(v114 * v72) + v76;
          float v78 = v76 + v74;
          float v79 = v75 + v76;
          float v80 = (float)((float)((float)(v42 * (float)(v76 + v74)) + (float)(v41 * v77))
                      + (float)(v43 * (float)(v75 + v76)))
              + v36;
          float v81 = v38;
          if (v80 <= v38)
          {
            float v81 = v80;
            if (v80 < v36) {
              float v81 = v36;
            }
          }
          float v82 = v33 * (float)((float)(*((unsigned __int16 *)v53 + 1) >> v63) - v31);
          unsigned int v83 = *(unsigned __int16 *)v68;
          unsigned int v84 = *((unsigned __int16 *)v68 + 1);
          float v85 = v73 + v82;
          float v86 = v74 + v82;
          float v87 = v75 + v82;
          float v88 = (float)((float)((float)(v42 * (float)(v74 + v82)) + (float)(v41 * (float)(v73 + v82)))
                      + (float)(v43 * (float)(v75 + v82)))
              + v36;
          *(_WORD *)char v51 = llroundf(v81) << v64;
          float v89 = v38;
          if (v88 <= v38)
          {
            float v89 = v88;
            if (v88 < v36) {
              float v89 = v36;
            }
          }
          float v90 = v33 * (float)((float)(int)(v83 >> v63) - v31);
          float v91 = v73 + v90;
          float v92 = v74 + v90;
          float v93 = v75 + v90;
          float v94 = (float)((float)((float)(v42 * (float)(v74 + v90)) + (float)(v41 * (float)(v73 + v90)))
                      + (float)(v43 * (float)(v75 + v90)))
              + v36;
          *((_WORD *)v51 + 1) = llroundf(v89) << v64;
          float v95 = v38;
          if (v94 <= v38)
          {
            float v95 = v94;
            if (v94 < v36) {
              float v95 = v36;
            }
          }
          float v96 = v33 * (float)((float)(int)(v84 >> v63) - v31);
          float v97 = v73 + v96;
          float v98 = v74 + v96;
          float v99 = v75 + v96;
          float v100 = (float)((float)((float)(v42 * v98) + (float)(v41 * v97)) + (float)(v43 * (float)(v75 + v96))) + v36;
          *(_WORD *)int16x8_t v69 = llroundf(v95) << v64;
          float v101 = v38;
          if (v100 <= v38)
          {
            float v101 = v100;
            if (v100 < v36) {
              float v101 = v36;
            }
          }
          *((_WORD *)v69 + 1) = llroundf(v101) << v64;
          float v102 = (float)((float)(v77 + v85) + v91) + v97;
          float v103 = (float)((float)(v78 + v86) + v92) + v98;
          float v104 = (float)((float)(v79 + v87) + v93) + v99;
          float v105 = (float)((float)(v37 + (float)(v102 * v44)) + (float)(v103 * v45)) + (float)(v104 * v46);
          float v106 = v40;
          if (v105 <= v40)
          {
            float v106 = (float)((float)(v37 + (float)(v102 * v44)) + (float)(v103 * v45)) + (float)(v104 * v46);
            if (v105 < v39) {
              float v106 = v39;
            }
          }
          float16x8_t v107 = (_WORD *)(v61 + 2 * v67);
          float v108 = (float)((float)(v37 + (float)(v102 * v47)) + (float)(v103 * v48)) + (float)(v104 * v49);
          *float16x8_t v107 = llroundf(v106) << v64;
          float v109 = v40;
          if (v108 <= v40)
          {
            float v109 = v108;
            if (v108 < v39) {
              float v109 = v39;
            }
          }
          v53 += 4;
          v68 += 4;
          v51 += 4;
          v69 += 4;
          v107[1] = llroundf(v109) << v64;
          v67 += 2;
        }
        while (v7 > v67);
      }
      uint64_t v53 = &v65[v18];
      result = (void *)((char *)result + v19);
      char v51 = &v66[v23];
      v61 += v24;
      v6 += 2;
    }
    while (v10 > v6);
    if (v21 && v26)
    {
      size_t v110 = 2 * v7;
      do
      {
        result = memcpy(v27, v22, v110);
        v22 += v20;
        v27 += v25;
        --v10;
      }
      while (v10);
    }
    else if (v26)
    {
      do
      {
        if (v7) {
          result = memset(v27, 255, 2 * v7);
        }
        v27 += v25;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD(float32x2_t *result, uint64_t a2, float32x4_t a3, float32x4_t a4, double a5, double a6)
{
  uint64_t v11 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v12 = 2 * result->u8[0];
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (2 * v14 != 2 * v13)
  {
    unint64_t v15 = 0;
    size_t v16 = *(size_t *)((char *)&result[2] + 4);
    uint64_t v17 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v18 = *(void *)((char *)&result[5] + 4) + 2 * v13;
    unint64_t v19 = 2 * v14 - 2 * v13;
    float32x2_t v20 = result[14];
    uint64_t v21 = (uint64_t *)result[16];
    uint64_t v22 = *(void *)&result[15] + 2 * (*(void *)&result[13] * a2 / v12);
    uint64_t v23 = (float32x2_t *)result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = (uint64_t *)result[17];
    uint64_t v27 = *v25;
    uint64_t v28 = v25[1];
    uint64_t v415 = v25[2];
    uint64_t v418 = v24[2];
    uint64_t v29 = *v26;
    uint64_t v30 = v26[1];
    uint64_t v419 = v26[2];
    __b = (unsigned char *)(v21[2] + v419 * v22 + *(void *)&v20);
    uint64_t v417 = v21[2];
    unsigned int v31 = v23[17].u16[2];
    unsigned int v32 = v23[17].u16[3];
    a4.i32[0] = v23[3].i32[1];
    unsigned int v33 = v23[18].u16[0];
    LODWORD(v26) = v23[18].u16[1];
    float v34 = (float)v31;
    *(short float *)v9.i16 = (short float)v31;
    unsigned int v35 = v23[18].u16[2];
    float v36 = (float)v32;
    short float v37 = (short float)v32;
    unsigned int v38 = v23[18].u16[3];
    float v478 = v23[5].f32[1];
    a3.i32[0] = v23[6].i32[0];
    v39.i32[0] = v23[6].i32[1];
    v40.i32[0] = v23[7].i32[0];
    a4.i32[1] = v23[1].i32[0];
    a3.i32[1] = v23[7].i32[1];
    v39.i32[1] = v23[8].i32[0];
    v40.i32[1] = v23[8].i32[1];
    LODWORD(v25) = v23[19].u16[0];
    _S7 = v23[4].i32[1];
    float v477 = v23[5].f32[0];
    float v42 = (float)v33;
    *(short float *)v8.i16 = (short float)v33;
    float v43 = (char *)&v23[2068] + 4;
    uint64_t v414 = v418 + v415 * v18 + 2 * v17;
    float v44 = 8191.0 / (float)v23[16].u32[0];
    _S27 = v44 * v23->f32[0];
    float v46 = (float)v26;
    *(float *)&a6 = (float)v35;
    float v451 = (float)v35;
    float v47 = (float)v25;
    *(short float *)&a6 = (short float)v26;
    result = (float32x2_t *)((char *)v23 + 164);
    *(short float *)v10.i16 = (short float)v35;
    float v48 = (char *)&v23[4116] + 4;
    int16x8_t v49 = vdupq_lane_s16(v9, 0);
    *(float32x2_t *)a4.f32 = vmul_n_f32(*(float32x2_t *)a4.f32, v44);
    unint64_t v476 = a4.i64[0];
    int32x2_t v50 = (int32x2_t)vcvt_f16_f32(a4);
    v51.i64[1] = a3.i64[0];
    float16x8_t v52 = (float16x8_t)vdupq_lane_s32(v50, 0);
    *(float32x2_t *)v51.f32 = vmul_n_f32(v23[2], v44);
    uint64_t v475 = v51.i64[0];
    *(float16x4_t *)&_Q1 = vcvt_f16_f32(v51);
    *((void *)&_Q1 + 1) = a3.i64[0];
    float16x8_t v54 = (float16x8_t)vdupq_lane_s32(*(int32x2_t *)&_Q1, 0);
    *(float32x2_t *)a3.f32 = vmul_f32(*(float32x2_t *)a3.f32, (float32x2_t)0x3F0000003F000000);
    unint64_t v474 = a3.i64[0];
    float32x4_t v55 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    float16x8_t v434 = (float16x8_t)v55;
    *(float32x2_t *)v55.f32 = vmul_f32(v39, (float32x2_t)0x3F0000003F000000);
    uint64_t v473 = v55.i64[0];
    *(float16x4_t *)&v55.u32[2] = vcvt_f16_f32(v55);
    float16x8_t v56 = (float16x8_t)vdupq_lane_s32(*(int32x2_t *)&v55.u32[2], 0);
    *(float32x2_t *)v55.f32 = vmul_f32(v40, (float32x2_t)0x3F0000003F000000);
    uint64_t v472 = v55.i64[0];
    *(float16x4_t *)v55.f32 = vcvt_f16_f32(v55);
    int32x4_t v57 = vdupq_lane_s32(*(int32x2_t *)v55.f32, 0);
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(v8, 0);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a6, 0);
    float16x8_t v60 = vmulq_n_f16(v52, -v37);
    *(short float *)v55.i16 = (short float)v38;
    int16x8_t v61 = vdupq_lane_s16(*(int16x4_t *)v55.f32, 0);
    float16x8_t v461 = (float16x8_t)v61;
    float16x8_t v462 = (float16x8_t)vdupq_lane_s16(v10, 0);
    float16x8_t v62 = vmulq_n_f16(v54, -v37);
    *(short float *)v61.i16 = (short float)v25;
    int16x8_t v63 = vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    unsigned int v64 = v23[15].u8[4];
    if (v64 >= 0x11) {
      unsigned __int8 v65 = 0;
    }
    else {
      unsigned __int8 v65 = 16 - v64;
    }
    uint64_t v67 = *v21;
    uint64_t v66 = v21[1];
    _ZF = v66 == 0;
    int16x8_t v69 = (unsigned char *)(v66 + v30 * v22 + *(void *)&v20);
    if (_ZF) {
      float16x8_t v70 = 0;
    }
    else {
      float16x8_t v70 = v69;
    }
    float v71 = (int8x8_t *)(v67 + v29 * v22 + *(void *)&v20);
    if (v18 >= 0) {
      uint64_t v72 = v18;
    }
    else {
      uint64_t v72 = v18 + 1;
    }
    uint16x8_t v73 = (uint16x8_t)vdupq_n_s16(-v65);
    uint64_t v74 = v24[1] + v28 * (v72 >> 1) + 2 * v17;
    float v75 = (uint16x8_t *)(*v24 + v27 * v18 + 2 * v17);
    unsigned __int8 v76 = v65;
    size_t v421 = v16 & 0xFFFFFFF8;
    float v77 = &v70[v30];
    LODWORD(_Q14) = v23[10].i32[0];
    float v471 = v23[12].f32[0];
    float v470 = v23[12].f32[1];
    float v469 = v23[13].f32[0];
    __asm { FCVT            H12, S27 }
    short float v420 = *(short float *)&_Q12;
    float v468 = v23[4].f32[1];
    __asm { FCVT            H12, S7 }
    LODWORD(_Q1) = v23[5].i32[0];
    __asm { FCVT            H7, S1 }
    short float v448 = _H7;
    LODWORD(_Q1) = v23[5].i32[1];
    __asm { FCVT            H7, S1 }
    short float v488 = _H7;
    float v450 = v23[13].f32[1];
    __asm { FCVT            H1, S2 }
    short float v447 = *(short float *)&_Q1;
    float v449 = v23[14].f32[0];
    __asm { FCVT            H3, S3 }
    float v492 = v23[15].f32[0];
    float v493 = v23[14].f32[1];
    __asm
    {
      FCVT            H4, S4
      FCVT            H5, S5
    }
    float v458 = v23[9].f32[0];
    __asm { FCVT            H7, S30 }
    float v457 = v23[9].f32[1];
    __asm { FCVT            H13, S13 }
    float v456 = *(float *)&_Q14;
    __asm { FCVT            H14, S14 }
    float v455 = v23[10].f32[1];
    __asm { FCVT            H1, S0 }
    short float v440 = *(short float *)&_Q1;
    float v454 = v23[11].f32[0];
    __asm { FCVT            H1, S22 }
    float v453 = v23[11].f32[1];
    __asm { FCVT            H0, S15 }
    short float v438 = _H0;
    _S0 = v471;
    __asm { FCVT            H0, S0 }
    _S2 = v470;
    __asm { FCVT            H2, S2 }
    short float v436 = *(short float *)&_S2;
    _S2 = v469;
    __asm { FCVT            H2, S2 }
    v92.i64[0] = 0x9000900090009000;
    v92.i64[1] = 0x9000900090009000;
    float16x8_t v490 = v60;
    float16x8_t v460 = (float16x8_t)v63;
    uint16x8_t v489 = v73;
    short float v446 = _H3;
    long long v439 = _Q1;
    short float v437 = *(short float *)&_S0;
    short float v435 = *(short float *)&_S2;
    unint64_t v427 = v19;
    size_t v428 = v16;
    uint64_t v425 = v28;
    uint64_t v426 = v27;
    uint64_t v423 = v30;
    uint64_t v424 = v29;
    float v467 = (float)v38;
    float16x8_t v465 = v52;
    float16x8_t v466 = v54;
    float16x8_t v491 = (float16x8_t)v57;
    float16x8_t v463 = v59;
    float16x8_t v464 = v58;
    int v459 = v16 - 7;
    unsigned __int8 v422 = v65;
    uint64_t v430 = 2 * v30;
    float v452 = v46;
    float v484 = v36;
    float v483 = v34;
    short float v444 = _H5;
    short float v445 = _H4;
    short float v442 = _H13;
    short float v443 = _H7;
    long long v441 = _Q14;
    float16x8_t v481 = (float16x8_t)v49;
    long long v482 = _Q12;
    do
    {
      float v93 = (uint16x8_t *)((char *)v75 + v27);
      float v94 = (int8x8_t *)((char *)v71 + v29);
      float v95 = &v70[v30];
      short float v432 = (char *)v71 + v29;
      short float v433 = &v70[v30];
      short float v431 = &v75->i8[v27];
      if ((int)v16 < 8)
      {
        size_t v252 = 0;
        float v97 = (uint16x8_t *)v74;
        int16x8_t v253 = v49;
        int32x4_t v254 = v57;
      }
      else
      {
        uint64_t v429 = v74;
        uint64_t v96 = 0;
        float v97 = (uint16x8_t *)v74;
        v480 = v70;
        v479 = v77;
        do
        {
          v487 = v71;
          uint16x8_t v98 = *v97++;
          float16x8_t v99 = vcvtq_f16_u16(vshlq_u16(v98, v73));
          int16x8_t v100 = (int16x8_t)vmlaq_f16(v60, v52, v99);
          int8x16_t v101 = (int8x16_t)vmlaq_f16(v62, v54, v99);
          v99.i64[0] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u64[0];
          *(int16x4_t *)v102.i8 = vuzp1_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          *(int16x4_t *)v99.i8 = vuzp2_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          v99.i64[1] = v99.i64[0];
          v102.i64[1] = v99.i64[0];
          v100.i64[0] = vextq_s8(v101, v101, 8uLL).u64[0];
          *(float16x4_t *)v100.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8));
          v100.i64[1] = v99.i64[0];
          float16x8_t v103 = (float16x8_t)vzip1q_s16((int16x8_t)v99, (int16x8_t)v99);
          v486 = v75 + 1;
          float16x8_t v104 = (float16x8_t)vzip1q_s16(v100, v100);
          v485 = v93 + 1;
          float16x8_t v105 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(*v75, v73)), v481);
          float16x8_t v106 = (float16x8_t)vzip1q_s16(v102, v102);
          float16x8_t v107 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(*v93, v73)), v481);
          float16x8_t v108 = vmlaq_n_f16(v103, v105, v420);
          float16x8_t v109 = vmlaq_n_f16(v104, v105, v420);
          float16x8_t v110 = vmlaq_n_f16(v103, v107, v420);
          float16x8_t v111 = vmlaq_n_f16(v104, v107, v420);
          float16x8_t v112 = vmlaq_n_f16(v106, v105, v420);
          float16x8_t v113 = vmlaq_n_f16(v106, v107, v420);
          uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, (float16x8_t)0), v92));
          uint32x4_t v115 = vmovl_high_u16(v114);
          v116.i64[0] = v115.u32[2];
          v116.i64[1] = v115.u32[3];
          float16x8_t v117 = v116;
          v116.i64[0] = v115.u32[0];
          v116.i64[1] = v115.u32[1];
          float16x8_t v118 = v116;
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v114.i8);
          v116.i64[0] = v119.u32[2];
          v116.i64[1] = v119.u32[3];
          float16x8_t v120 = v116;
          uint64_t v121 = v119.u32[1];
          v122.i16[0] = result->i16[v119.u32[0]];
          uint64_t v123 = v118.i64[1];
          uint64_t v124 = v117.i64[1];
          uint64_t v125 = v117.i64[0];
          float v126 = (__int16 *)result + v118.i64[0];
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v109, (float16x8_t)0), v92));
          uint32x4_t v128 = vmovl_high_u16(v127);
          v116.i64[0] = v128.u32[2];
          v116.i64[1] = v128.u32[3];
          float16x8_t v129 = v116;
          v116.i64[0] = v128.u32[0];
          v116.i64[1] = v128.u32[1];
          float16x8_t v130 = v116;
          long long v131 = (__int16 *)result + v125;
          uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v116.i64[0] = v132.u32[2];
          v109.i64[1] = v132.u32[3];
          uint64_t v133 = v132.u32[1];
          v134.i16[0] = result->i16[v132.u32[0]];
          uint64_t v135 = v130.i64[1];
          float v136 = (__int16 *)result + v130.i64[0];
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, (float16x8_t)0), v92));
          uint32x4_t v138 = vmovl_high_u16(v137);
          uint32x4_t v139 = vmovl_u16(*(uint16x4_t *)v137.i8);
          float v140 = (__int16 *)result + v123;
          float v141 = (__int16 *)result + v124;
          v142.i16[0] = result->i16[v139.u32[0]];
          v122.i16[1] = result->i16[v121];
          float v143 = (__int16 *)result + v139.u32[1];
          float v144 = (__int16 *)result + v139.u32[2];
          int16x8_t v145 = (__int16 *)result + v139.u32[3];
          float v146 = (__int16 *)result + v138.u32[0];
          float v147 = (__int16 *)result + v138.u32[1];
          unsigned int v148 = (__int16 *)result + v138.u32[2];
          unsigned int v149 = (__int16 *)result + v138.u32[3];
          uint16x8_t v150 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v110, (float16x8_t)0), v92));
          uint32x4_t v151 = vmovl_high_u16(v150);
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v150.i8);
          v142.i16[1] = *v143;
          v110.i16[0] = result->i16[v152.u32[0]];
          v122.i16[2] = result->i16[v120.i64[0]];
          v134.i16[1] = result->i16[v133];
          v142.i16[2] = *v144;
          v122.i16[3] = result->i16[v120.i64[1]];
          float v153 = (__int16 *)result + v151.u32[1];
          float v154 = (__int16 *)result + v151.u32[2];
          float v155 = (__int16 *)result + v151.u32[3];
          v134.i16[2] = result->i16[v116.i64[0]];
          v110.i16[1] = result->i16[v152.u32[1]];
          v110.i16[2] = result->i16[v152.u32[2]];
          v142.i16[3] = *v145;
          v110.i16[3] = result->i16[v152.u32[3]];
          v110.i16[4] = result->i16[v151.u32[0]];
          uint16x8_t v156 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, (float16x8_t)0), v92));
          uint32x4_t v157 = vmovl_high_u16(v156);
          v116.i64[0] = v157.u32[2];
          v116.i64[1] = v157.u32[3];
          float16x8_t v158 = v116;
          v122.i16[4] = *v126;
          uint32x4_t v159 = vmovl_u16(*(uint16x4_t *)v156.i8);
          v134.i16[3] = result->i16[v109.i64[1]];
          v111.i16[0] = result->i16[v159.u32[0]];
          v142.i16[4] = *v146;
          v110.i16[5] = *v153;
          v122.i16[5] = *v140;
          v134.i16[4] = *v136;
          v142.i16[5] = *v147;
          v111.i16[1] = result->i16[v159.u32[1]];
          v111.i16[2] = result->i16[v159.u32[2]];
          v110.i16[6] = *v154;
          v111.i16[3] = result->i16[v159.u32[3]];
          v111.i16[4] = result->i16[v157.u32[0]];
          v111.i16[5] = result->i16[v157.u32[1]];
          uint16x8_t v160 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v92));
          float16x8_t v161 = (float16x8_t)vmovl_high_u16(v160);
          v122.i16[6] = *v131;
          v116.i64[0] = v161.u32[2];
          v116.i64[1] = v161.u32[3];
          float16x8_t v162 = v116;
          v116.i64[0] = v161.u32[0];
          v116.i64[1] = v161.u32[1];
          uint32x4_t v163 = vmovl_u16(*(uint16x4_t *)v160.i8);
          v134.i16[5] = result->i16[v135];
          v142.i16[6] = *v148;
          v161.i16[0] = result->i16[v163.u32[0]];
          v110.i16[7] = *v155;
          v111.i16[6] = result->i16[v158.i64[0]];
          v122.i16[7] = *v141;
          v134.i16[6] = result->i16[v129.i64[0]];
          v161.i16[1] = result->i16[v163.u32[1]];
          v111.i16[7] = result->i16[v158.i64[1]];
          v161.i16[2] = result->i16[v163.u32[2]];
          v161.i16[3] = result->i16[v163.u32[3]];
          v134.i16[7] = result->i16[v129.i64[1]];
          v161.i16[4] = result->i16[v116.i64[0]];
          v161.i16[5] = result->i16[v116.i64[1]];
          v142.i16[7] = *v149;
          v161.i16[6] = result->i16[v162.i64[0]];
          v161.i16[7] = result->i16[v162.i64[1]];
          uint16x8_t v164 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v122, v447), v134, v446), v142, v445), vmaxq_f16(vmaxq_f16(v122, v134), v142), v444), (float16x8_t)0), v92));
          uint32x4_t v165 = vmovl_high_u16(v164);
          v116.i64[0] = v165.u32[2];
          v116.i64[1] = v165.u32[3];
          float16x8_t v166 = v116;
          uint32x4_t v167 = vmovl_u16(*(uint16x4_t *)v164.i8);
          v158.i16[0] = *(_WORD *)&v43[2 * v167.u32[0]];
          uint64_t v168 = v165.u32[1];
          uint64_t v169 = (__int16 *)&v43[2 * v167.u32[1]];
          uint64_t v170 = (__int16 *)&v43[2 * v167.u32[2]];
          float v171 = (__int16 *)&v43[2 * v165.u32[0]];
          float v172 = (__int16 *)&v43[2 * v167.u32[3]];
          uint16x8_t v173 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v110, v447), v111, v446), v161, v445), vmaxq_f16(vmaxq_f16(v110, v111), v161), v444), (float16x8_t)0), v92));
          uint32x4_t v174 = vmovl_high_u16(v173);
          float16x8_t v175 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v173.i8);
          v158.i16[1] = *v169;
          v116.i64[1] = v174.u32[3];
          v158.i16[2] = *v170;
          v158.i16[3] = *v172;
          v175.i16[0] = *(_WORD *)&v43[2 * v175.u32[0]];
          v158.i16[4] = *v171;
          v158.i16[5] = *(_WORD *)&v43[2 * v168];
          float v176 = (__int16 *)&v43[2 * v174.u32[0]];
          v158.i16[6] = *(_WORD *)&v43[2 * v166.i64[0]];
          short float v177 = (__int16 *)&v43[2 * v174.u32[1]];
          v175.i16[1] = *(_WORD *)&v43[2 * v175.u32[1]];
          v158.i16[7] = *(_WORD *)&v43[2 * v166.i64[1]];
          uint16x8_t v178 = (__int16 *)&v43[2 * v174.u32[2]];
          v175.i16[2] = *(_WORD *)&v43[2 * v175.u32[2]];
          v175.i16[3] = *(_WORD *)&v43[2 * v175.u32[3]];
          float16x8_t v179 = vmulq_f16(v122, v158);
          v175.i16[4] = *v176;
          v175.i16[5] = *v177;
          float16x8_t v180 = vmulq_f16(v134, v158);
          v175.i16[6] = *v178;
          v175.i16[7] = *(_WORD *)&v43[2 * v116.i64[1]];
          float16x8_t v181 = vmulq_f16(v110, v175);
          float16x8_t v182 = vmulq_f16(v142, v158);
          float16x8_t v183 = vmulq_f16(v111, v175);
          float16x8_t v184 = vmulq_f16(v161, v175);
          v134.i16[7] = HIWORD(v441);
          v142.i16[7] = HIWORD(v439);
          float16x8_t v185 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v179, v440), v180, *(short float *)&v439), v182, v438);
          float16x8_t v186 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v181, v443), v183, v442), v184, *(short float *)&v441);
          float16x8_t v187 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v181, v440), v183, *(short float *)&v439), v184, v438);
          float16x8_t v188 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v182, v435), v180, v436), v179, v437);
          float16x8_t v189 = vmlaq_n_f16(vmulq_n_f16(v184, v435), v183, v436);
          v92.i64[0] = 0x9000900090009000;
          v92.i64[1] = 0x9000900090009000;
          uint16x8_t v190 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v179, v443), v180, v442), v182, *(short float *)&v441), (float16x8_t)0), v92));
          uint32x4_t v191 = vmovl_high_u16(v190);
          v180.i64[0] = v191.u32[2];
          uint32x4_t v192 = vmovl_u16(*(uint16x4_t *)v190.i8);
          uint64_t v193 = v192.u32[1];
          uint64_t v194 = v192.u32[0];
          uint64_t v195 = v192.u32[3];
          uint64_t v196 = v191.u32[1];
          uint64_t v197 = v192.u32[2];
          uint64_t v198 = v191.u32[0];
          uint64_t v199 = v191.u32[3];
          uint16x8_t v200 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v185, (float16x8_t)0), v92));
          int16x8_t v201 = (int16x8_t)vmovl_high_u16(v200);
          v116.i64[0] = v201.u32[2];
          v116.i64[1] = v201.u32[3];
          float16x8_t v202 = v116;
          v116.i64[0] = v201.u32[0];
          uint32x4_t v203 = vmovl_u16(*(uint16x4_t *)v200.i8);
          uint64_t v204 = v180.i64[0];
          v201.i64[1] = v203.u32[3];
          uint64_t v205 = v203.u32[1];
          uint64_t v206 = v203.u32[0];
          uint64_t v207 = v203.u32[2];
          uint64_t v208 = v201.u32[1];
          v201.i16[0] = *(_WORD *)&v48[2 * v194];
          uint64_t v209 = v116.i64[0];
          uint64_t v210 = v202.i64[1];
          uint64_t v211 = v202.i64[0];
          float v212 = (__int16 *)&v48[2 * v197];
          uint16x8_t v213 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v188, (float16x8_t)0), v92));
          uint32x4_t v214 = vmovl_high_u16(v213);
          v116.i64[0] = v214.u32[2];
          v116.i64[1] = v214.u32[3];
          float16x8_t v215 = v116;
          v188.i16[0] = *(_WORD *)&v48[2 * v206];
          uint32x4_t v216 = vmovl_u16(*(uint16x4_t *)v213.i8);
          v116.i64[0] = v216.u32[2];
          v116.i64[1] = v216.u32[3];
          uint64_t v217 = v216.u32[1];
          v134.i16[0] = *(_WORD *)&v48[2 * v216.u32[0]];
          uint64_t v218 = v214.u32[1];
          uint64_t v219 = v214.u32[0];
          uint16x8_t v220 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v186, (float16x8_t)0), v92));
          uint32x4_t v221 = vmovl_u16(*(uint16x4_t *)v220.i8);
          v201.i16[1] = *(_WORD *)&v48[2 * v193];
          v142.i16[0] = *(_WORD *)&v48[2 * v221.u32[0]];
          uint64_t v222 = v215.i64[1];
          v188.i16[1] = *(_WORD *)&v48[2 * v205];
          v134.i16[1] = *(_WORD *)&v48[2 * v217];
          v142.i16[1] = *(_WORD *)&v48[2 * v221.u32[1]];
          v142.i16[2] = *(_WORD *)&v48[2 * v221.u32[2]];
          uint64_t v223 = v215.i64[0];
          uint32x4_t v224 = vmovl_high_u16(v220);
          v201.i16[2] = *v212;
          int16x8_t v225 = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v187, (float16x8_t)0), v92));
          uint32x4_t v226 = vmovl_u16(*(uint16x4_t *)v225.i8);
          v188.i16[2] = *(_WORD *)&v48[2 * v207];
          v187.i16[7] = (unint64_t)v226.u32[1] >> 48;
          v134.i16[2] = *(_WORD *)&v48[2 * v116.i64[0]];
          v187.i16[0] = *(_WORD *)&v48[2 * v226.u32[0]];
          v142.i16[3] = *(_WORD *)&v48[2 * v221.u32[3]];
          v201.i16[3] = *(_WORD *)&v48[2 * v195];
          v188.i16[3] = *(_WORD *)&v48[2 * v201.i64[1]];
          float v227 = (__int16 *)&v48[2 * v208];
          float v75 = v486;
          float v77 = v479;
          v134.i16[3] = *(_WORD *)&v48[2 * v116.i64[1]];
          v142.i16[4] = *(_WORD *)&v48[2 * v224.u32[0]];
          uint32x4_t v228 = vmovl_high_u16((uint16x8_t)v225);
          v201.i16[4] = *(_WORD *)&v48[2 * v198];
          v187.i16[1] = *(_WORD *)&v48[2 * v226.u32[1]];
          v188.i16[4] = *(_WORD *)&v48[2 * v209];
          v134.i16[4] = *(_WORD *)&v48[2 * v219];
          v187.i16[2] = *(_WORD *)&v48[2 * v226.u32[2]];
          v142.i16[5] = *(_WORD *)&v48[2 * v224.u32[1]];
          v187.i16[3] = *(_WORD *)&v48[2 * v226.u32[3]];
          *(__int32 *)((char *)&v201.i32[2] + 2) = *(unsigned __int16 *)&v48[2 * v196];
          v187.i16[4] = *(_WORD *)&v48[2 * v228.u32[0]];
          v188.i16[5] = *v227;
          v134.i16[5] = *(_WORD *)&v48[2 * v218];
          v187.i16[5] = *(_WORD *)&v48[2 * v228.u32[1]];
          uint64_t v229 = v228.u32[3];
          v142.i16[6] = *(_WORD *)&v48[2 * v224.u32[2]];
          v187.i16[6] = *(_WORD *)&v48[2 * v228.u32[2]];
          v201.i16[6] = *(_WORD *)&v48[2 * v204];
          float v230 = (__int16 *)&v48[2 * v224.u32[3]];
          uint16x8_t v231 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v189, v181, v437), (float16x8_t)0), v92));
          v188.i16[6] = *(_WORD *)&v48[2 * v211];
          uint32x4_t v232 = vmovl_high_u16(v231);
          uint32x4_t v233 = vmovl_u16(*(uint16x4_t *)v231.i8);
          v116.i64[1] = v233.u32[3];
          v225.i16[7] = (unint64_t)v233.u32[3] >> 48;
          v134.i16[6] = *(_WORD *)&v48[2 * v223];
          uint64_t v234 = v233.u32[1];
          float16x8_t v235 = v142;
          uint64_t v236 = v233.u32[2];
          v225.i16[0] = *(_WORD *)&v48[2 * v233.u32[0]];
          v235.i16[7] = *v230;
          uint64_t v237 = v232.u32[1];
          uint64_t v238 = v232.u32[0];
          float16x8_t v239 = (float16x8_t)v201;
          v239.i16[7] = *(_WORD *)&v48[2 * v199];
          float16x8_t v240 = (float16x8_t)vuzp1q_s16(v201, (int16x8_t)v188);
          v225.i16[1] = *(_WORD *)&v48[2 * v234];
          uint64_t v241 = v232.u32[3];
          v188.i16[7] = *(_WORD *)&v48[2 * v210];
          uint64_t v242 = v232.u32[2];
          float16x8_t v243 = vmlaq_n_f16(vmlaq_n_f16(v58, v239, *(short float *)&v482), v188, v448);
          float16x8_t v244 = (float16x8_t)vuzp2q_s16((int16x8_t)v239, (int16x8_t)v188);
          float16x8_t v245 = (float16x8_t)vtrn1q_s16((int16x8_t)v134, (int16x8_t)v134);
          v134.i16[7] = *(_WORD *)&v48[2 * v222];
          v225.i16[2] = *(_WORD *)&v48[2 * v236];
          int16x8_t v246 = (int16x8_t)vaddq_f16(v240, v244);
          float16x8_t v247 = v187;
          v225.i16[3] = *(_WORD *)&v48[2 * v116.i64[1]];
          v225.i16[4] = *(_WORD *)&v48[2 * v238];
          v247.i16[7] = *(_WORD *)&v48[2 * v229];
          float v93 = v485;
          v225.i16[5] = *(_WORD *)&v48[2 * v237];
          v225.i16[6] = *(_WORD *)&v48[2 * v242];
          float16x8_t v248 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v59, v434, (float16x8_t)vzip1q_s16(v246, v246)), v56, (float16x8_t)vzip2q_s16(v246, v246)), v491, vaddq_f16(v245, (float16x8_t)vtrn2q_s16((int16x8_t)v134, (int16x8_t)v134)));
          float16x8_t v249 = (float16x8_t)v225;
          v249.i16[7] = *(_WORD *)&v48[2 * v241];
          int8x8_t *v487 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v243, v134, v488), v58), v462)));
          float v71 = v487 + 1;
          float16x8_t v250 = vmaxq_f16(v248, v461);
          float16x8_t v60 = v490;
          *(int8x8_t *)&v480[v96] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(v250, v460)));
          *v94++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v58, v235, *(short float *)&v482), v247, v448), v249, v488), v58), v462)));
          int16x8_t v251 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v142, (int16x8_t)v187), (float16x8_t)vuzp2q_s16((int16x8_t)v235, (int16x8_t)v247));
          uint16x8_t v73 = v489;
          *(int8x8_t *)&v479[v96] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v59, v434, (float16x8_t)vzip1q_s16(v251, v251)), v56, (float16x8_t)vzip2q_s16(v251, v251)), v491, vaddq_f16((float16x8_t)vtrn1q_s16(v225, v225), (float16x8_t)vtrn2q_s16((int16x8_t)v249, (int16x8_t)v249))), v461), v460)));
          v96 += 8;
        }
        while ((int)v96 < v459);
        float16x8_t v70 = &v480[v96];
        float v95 = &v479[v96];
        size_t v252 = v421;
        unint64_t v19 = v427;
        size_t v16 = v428;
        uint64_t v74 = v429;
        uint64_t v28 = v425;
        uint64_t v27 = v426;
        uint64_t v30 = v423;
        uint64_t v29 = v424;
        unsigned __int8 v76 = v422;
        int16x8_t v253 = (int16x8_t)v481;
        _Q12 = v482;
        float v36 = v484;
        int32x4_t v254 = (int32x4_t)v491;
        float v34 = v483;
      }
      for (; v16 > v252; float16x8_t v58 = v464)
      {
        float v255 = (float)(v97->u16[1] >> v76) - v36;
        float v256 = *((float *)&v476 + 1) * v255;
        float v257 = _S27 * (float)((float)(v75->u16[0] >> v76) - v34);
        float v258 = (float)(*((float *)&v476 + 1) * v255) + v257;
        float v259 = 8191.0;
        if (v258 <= 8191.0)
        {
          float v259 = (float)(*((float *)&v476 + 1) * v255) + v257;
          if (v258 < 0.0) {
            float v259 = 0.0;
          }
        }
        float v260 = (float)(v97->u16[0] >> v76) - v36;
        float v261 = (float)(*((float *)&v475 + 1) * v255) + (float)(v260 * *(float *)&v475);
        float v262 = 8191.0;
        if ((float)(v257 + v261) <= 8191.0)
        {
          float v262 = v257 + v261;
          if ((float)(v257 + v261) < 0.0) {
            float v262 = 0.0;
          }
        }
        float v263 = *(float *)&v476 * v260;
        float v264 = (float)(*(float *)&v476 * v260) + v257;
        float v265 = 8191.0;
        if (v264 <= 8191.0)
        {
          float v265 = v264;
          if (v264 < 0.0) {
            float v265 = 0.0;
          }
        }
        float v266 = _S27 * (float)((float)(v75->u16[1] >> v76) - v34);
        float v267 = 8191.0;
        if ((float)(v256 + v266) <= 8191.0)
        {
          float v267 = v256 + v266;
          if ((float)(v256 + v266) < 0.0) {
            float v267 = 0.0;
          }
        }
        float v268 = 8191.0;
        if ((float)(v261 + v266) <= 8191.0)
        {
          float v268 = v261 + v266;
          if ((float)(v261 + v266) < 0.0) {
            float v268 = 0.0;
          }
        }
        float v269 = v263 + v266;
        float v270 = 8191.0;
        if (v269 <= 8191.0)
        {
          float v270 = v269;
          if (v269 < 0.0) {
            float v270 = 0.0;
          }
        }
        float v271 = _S27 * (float)((float)(v93->u16[0] >> v76) - v34);
        float v272 = 8191.0;
        if ((float)(v256 + v271) <= 8191.0)
        {
          float v272 = v256 + v271;
          if ((float)(v256 + v271) < 0.0) {
            float v272 = 0.0;
          }
        }
        float v273 = 8191.0;
        if ((float)(v261 + v271) <= 8191.0)
        {
          float v273 = v261 + v271;
          if ((float)(v261 + v271) < 0.0) {
            float v273 = 0.0;
          }
        }
        float v274 = v263 + v271;
        float v275 = 8191.0;
        if (v274 <= 8191.0)
        {
          float v275 = v274;
          if (v274 < 0.0) {
            float v275 = 0.0;
          }
        }
        float v276 = _S27 * (float)((float)(v93->u16[1] >> v76) - v34);
        float v277 = v256 + v276;
        BOOL v278 = (float)(v256 + v276) <= 8191.0;
        float v279 = 8191.0;
        if (v278)
        {
          float v279 = v277;
          if (v277 < 0.0) {
            float v279 = 0.0;
          }
        }
        float v280 = v261 + v276;
        BOOL v278 = (float)(v261 + v276) <= 8191.0;
        float v281 = 8191.0;
        if (v278)
        {
          float v281 = v280;
          if (v280 < 0.0) {
            float v281 = 0.0;
          }
        }
        float v282 = v263 + v276;
        BOOL v278 = (float)(v263 + v276) <= 8191.0;
        float v283 = 8191.0;
        if (v278)
        {
          float v283 = v282;
          if (v282 < 0.0) {
            float v283 = 0.0;
          }
        }
        float16x8_t v284 = v56;
        int16x8_t v285 = v253;
        _H1 = result->i16[llroundf(fminf(fmaxf(v259, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = result->i16[llroundf(fminf(fmaxf(v262, 0.0), 8191.0))];
        __asm { FCVT            S3, H2 }
        _H2 = result->i16[llroundf(fminf(fmaxf(v265, 0.0), 8191.0))];
        __asm { FCVT            S4, H2 }
        _H24 = result->i16[llroundf(fminf(fmaxf(v267, 0.0), 8191.0))];
        _H21 = result->i16[llroundf(fminf(fmaxf(v268, 0.0), 8191.0))];
        _H23 = result->i16[llroundf(fminf(fmaxf(v270, 0.0), 8191.0))];
        _H31 = result->i16[llroundf(fminf(fmaxf(v272, 0.0), 8191.0))];
        _H13 = result->i16[llroundf(fminf(fmaxf(v273, 0.0), 8191.0))];
        _H22 = result->i16[llroundf(fminf(fmaxf(v275, 0.0), 8191.0))];
        _H5 = result->i16[llroundf(fminf(fmaxf(v279, 0.0), 8191.0))];
        _H7 = result->i16[llroundf(fminf(fmaxf(v281, 0.0), 8191.0))];
        _H0 = result->i16[llroundf(fminf(fmaxf(v283, 0.0), 8191.0))];
        float v301 = (float)((float)((float)(v449 * _S3) + (float)(v450 * _S1)) + (float)(v493 * _S4))
             + (float)(v492 * fmaxf(_S1, fmaxf(_S3, _S4)));
        float v302 = 8191.0;
        if (v301 <= 8191.0)
        {
          float v302 = v301;
          if (v301 < 0.0) {
            float v302 = 0.0;
          }
        }
        long long v303 = _Q12;
        __asm
        {
          FCVT            S29, H24
          FCVT            S14, H21
          FCVT            S15, H23
        }
        _H21 = *(_WORD *)&v43[2 * llroundf(v302)];
        float v308 = (float)((float)((float)(v449 * _S14) + (float)(v450 * _S29)) + (float)(v493 * _S15))
             + (float)(v492 * fmaxf(_S29, fmaxf(_S14, _S15)));
        float v309 = 8191.0;
        if (v308 <= 8191.0)
        {
          float v309 = v308;
          if (v308 < 0.0) {
            float v309 = 0.0;
          }
        }
        __asm
        {
          FCVT            S9, H31
          FCVT            S12, H13
          FCVT            S2, H22
        }
        _H20 = *(_WORD *)&v43[2 * llroundf(v309)];
        float v314 = (float)((float)((float)(v449 * _S12) + (float)(v450 * _S9)) + (float)(v493 * _S2))
             + (float)(v492 * fmaxf(_S9, fmaxf(_S12, _S2)));
        float v315 = 8191.0;
        if (v314 <= 8191.0)
        {
          float v315 = v314;
          if (v314 < 0.0) {
            float v315 = 0.0;
          }
        }
        __asm
        {
          FCVT            S24, H5
          FCVT            S31, H7
          FCVT            S13, H0
          FCVT            S0, H21
        }
        float v320 = _S1 * _S0;
        float v321 = _S3 * _S0;
        float v322 = _S4 * _S0;
        __asm { FCVT            S0, H20 }
        float v324 = _S29 * _S0;
        float v325 = _S14 * _S0;
        float v326 = _S15 * _S0;
        LOWORD(_S0) = *(_WORD *)&v43[2 * llroundf(v315)];
        __asm { FCVT            S1, H0 }
        float v328 = _S9 * _S1;
        float v329 = _S12 * _S1;
        float v330 = _S2 * _S1;
        float v331 = (float)((float)((float)(v449 * _S31) + (float)(v450 * _S24)) + (float)(v493 * _S13))
             + (float)(v492 * fmaxf(_S24, fmaxf(_S31, _S13)));
        float v332 = 8191.0;
        if (v331 <= 8191.0)
        {
          float v332 = v331;
          if (v331 < 0.0) {
            float v332 = 0.0;
          }
        }
        _H2 = *(_WORD *)&v43[2 * llroundf(v332)];
        __asm { FCVT            S2, H2 }
        _S16 = _S24 * _S2;
        float v336 = _S31 * _S2;
        float v337 = _S13 * _S2;
        float v338 = (float)((float)(v457 * v321) + (float)(v320 * v458)) + (float)(v322 * v456);
        float v339 = (float)((float)(v454 * v321) + (float)(v320 * v455)) + (float)(v322 * v453);
        float v340 = (float)((float)(v470 * v321) + (float)(v320 * v471)) + (float)(v322 * v469);
        float v341 = (float)((float)(v457 * v325) + (float)(v324 * v458)) + (float)(v326 * v456);
        float v342 = (float)((float)(v454 * v325) + (float)(v324 * v455)) + (float)(v326 * v453);
        _S4 = (float)((float)(v470 * v325) + (float)(v324 * v471)) + (float)(v326 * v469);
        _S5 = (float)((float)(v457 * v329) + (float)(v328 * v458)) + (float)(v330 * v456);
        _S7 = (float)((float)(v454 * v329) + (float)(v328 * v455)) + (float)(v330 * v453);
        _S0 = (float)((float)(v470 * v329) + (float)(v328 * v471)) + (float)(v330 * v469);
        _S1 = (float)((float)(v457 * v336) + (float)(_S16 * v458)) + (float)(v337 * v456);
        float v348 = (float)((float)(v454 * v336) + (float)(_S16 * v455)) + (float)(v337 * v453);
        float v349 = (float)((float)(v470 * v336) + (float)(_S16 * v471)) + (float)(v337 * v469);
        LOWORD(_S16) = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v338, 0.0), 8191.0))];
        unsigned int v350 = llroundf(fminf(fmaxf(_S4, 0.0), 8191.0));
        LOWORD(_S4) = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v339, 0.0), 8191.0))];
        __asm
        {
          FCVT            S16, H16
          FCVT            S4, H4
        }
        unsigned int v353 = llroundf(fminf(fmaxf(_S5, 0.0), 8191.0));
        LOWORD(_S5) = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v340, 0.0), 8191.0))];
        unsigned int v354 = llroundf(fminf(fmaxf(_S7, 0.0), 8191.0));
        __asm { FCVT            S5, H5 }
        LOWORD(_S7) = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v341, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        unsigned int v357 = llroundf(fminf(fmaxf(_S0, 0.0), 8191.0));
        LOWORD(_S0) = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v342, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        unsigned int v359 = llroundf(fminf(fmaxf(_S1, 0.0), 8191.0));
        LOWORD(_S1) = *(_WORD *)&v48[2 * v350];
        __asm { FCVT            S1, H1 }
        unsigned int v361 = llroundf(fminf(fmaxf(v348, 0.0), 8191.0));
        unsigned int v362 = llroundf(fminf(fmaxf(v349, 0.0), 8191.0));
        float v363 = (float)((float)((float)(v477 * _S4) + (float)(v468 * _S16)) + (float)(v478 * _S5)) + v42;
        if (v363 < v42) {
          float v364 = v42;
        }
        else {
          float v364 = (float)((float)((float)(v477 * _S4) + (float)(v468 * _S16)) + (float)(v478 * _S5)) + v42;
        }
        BOOL v278 = v363 <= v451;
        float v365 = (float)((float)((float)(v477 * _S0) + (float)(v468 * _S7)) + (float)(v478 * _S1)) + v42;
        if (!v278) {
          float v364 = v451;
        }
        __int8 v366 = llroundf(v364);
        if (v365 < v42) {
          float v367 = v42;
        }
        else {
          float v367 = (float)((float)((float)(v477 * _S0) + (float)(v468 * _S7)) + (float)(v478 * _S1)) + v42;
        }
        BOOL v278 = v365 <= v451;
        _H2 = *(_WORD *)&v48[2 * v353];
        if (!v278) {
          float v367 = v451;
        }
        __int8 v369 = llroundf(v367);
        _H3 = *(_WORD *)&v48[2 * v354];
        __asm
        {
          FCVT            S2, H2
          FCVT            S3, H3
        }
        _S7 = _S16 + _S7;
        _H16 = *(_WORD *)&v48[2 * v357];
        __asm { FCVT            S16, H16 }
        float v376 = _S4 + _S0;
        _H4 = *(_WORD *)&v48[2 * v359];
        __asm { FCVT            S4, H4 }
        float v379 = _S5 + _S1;
        float v380 = (float)(v452 + (float)(_S7 * *(float *)&v474)) + (float)(v376 * *(float *)&v473);
        float v381 = (float)(v452 + (float)(_S7 * *((float *)&v474 + 1))) + (float)(v376 * *((float *)&v473 + 1));
        LOWORD(_S7) = *(_WORD *)&v48[2 * v361];
        __asm { FCVT            S7, H7 }
        float v383 = v380 + (float)(v379 * *(float *)&v472);
        float v384 = v381 + (float)(v379 * *((float *)&v472 + 1));
        if (v383 < v467) {
          float v385 = v467;
        }
        else {
          float v385 = v383;
        }
        _H5 = *(_WORD *)&v48[2 * v362];
        __asm { FCVT            S5, H5 }
        if (!(_NF ^ _VF | _ZF)) {
          float v385 = v47;
        }
        char v388 = llroundf(v385);
        if (v384 < v467) {
          float v389 = v467;
        }
        else {
          float v389 = v384;
        }
        if (v384 <= v47) {
          float v390 = v389;
        }
        else {
          float v390 = v47;
        }
        char v391 = llroundf(v390);
        float v392 = (float)((float)((float)(v477 * _S3) + (float)(v468 * _S2)) + (float)(v478 * _S16)) + v42;
        if (v392 < v42) {
          float v393 = v42;
        }
        else {
          float v393 = (float)((float)((float)(v477 * _S3) + (float)(v468 * _S2)) + (float)(v478 * _S16)) + v42;
        }
        BOOL v278 = v392 <= v451;
        float v394 = (float)((float)((float)(v477 * _S7) + (float)(v468 * _S4)) + (float)(v478 * _S5)) + v42;
        if (!v278) {
          float v393 = v451;
        }
        __int8 v395 = llroundf(v393);
        if (v394 < v42) {
          float v396 = v42;
        }
        else {
          float v396 = (float)((float)((float)(v477 * _S7) + (float)(v468 * _S4)) + (float)(v478 * _S5)) + v42;
        }
        if (v394 <= v451) {
          float v397 = v396;
        }
        else {
          float v397 = v451;
        }
        __int8 v398 = llroundf(v397);
        float v399 = _S2 + _S4;
        v71->i8[0] = v366;
        v71->i8[1] = v369;
        *float16x8_t v70 = v388;
        v70[1] = v391;
        v94->i8[0] = v395;
        v94->i8[1] = v398;
        float v400 = _S3 + _S7;
        float v401 = (float)((float)(v452 + (float)((float)(_S2 + _S4) * *(float *)&v474))
                     + (float)((float)(_S3 + _S7) * *(float *)&v473))
             + (float)((float)(_S16 + _S5) * *(float *)&v472);
        float v402 = v47;
        int32x4_t v254 = (int32x4_t)v491;
        if (v401 <= v47)
        {
          float v402 = v401;
          if (v401 < v467) {
            float v402 = v467;
          }
        }
        float v403 = (float)((float)(v452 + (float)(v399 * *((float *)&v474 + 1))) + (float)(v400 * *((float *)&v473 + 1)))
             + (float)((float)(_S16 + _S5) * *((float *)&v472 + 1));
        *float v95 = llroundf(v402);
        float v404 = v47;
        float v34 = v483;
        float v36 = v484;
        int16x8_t v253 = v285;
        float16x8_t v56 = v284;
        uint16x8_t v73 = v489;
        float16x8_t v60 = v490;
        _Q12 = v303;
        v92.i64[0] = 0x9000900090009000;
        v92.i64[1] = 0x9000900090009000;
        if (v403 <= v47)
        {
          float v404 = v403;
          if (v403 < v467) {
            float v404 = v467;
          }
        }
        v252 += 2;
        float v97 = (uint16x8_t *)((char *)v97 + 4);
        float v75 = (uint16x8_t *)((char *)v75 + 4);
        float v93 = (uint16x8_t *)((char *)v93 + 4);
        float v71 = (int8x8_t *)((char *)v71 + 2);
        v95[1] = llroundf(v404);
        v70 += 2;
        float v94 = (int8x8_t *)((char *)v94 + 2);
        v95 += 2;
        float16x8_t v52 = v465;
        float16x8_t v54 = v466;
        float16x8_t v59 = v463;
      }
      int32x4_t v57 = v254;
      int16x8_t v49 = v253;
      float v75 = (uint16x8_t *)&v431[v27];
      v74 += v28;
      float v71 = (int8x8_t *)&v432[v29];
      float16x8_t v70 = &v433[v30];
      v15 += 2;
      v77 += v430;
    }
    while (v19 > v15);
    if (v418 && v417)
    {
      uint64_t v405 = 0;
      float v406 = __b;
      float v407 = (unsigned __int16 *)v414;
      do
      {
        if (v16)
        {
          size_t v408 = v16;
          uint64_t v409 = v406;
          int32x4_t v410 = v407;
          do
          {
            unsigned int v411 = *v410++;
            *v409++ = llroundf((float)v411 * 0.0038911);
            --v408;
          }
          while (v408);
        }
        float v407 = (unsigned __int16 *)((char *)v407 + v415);
        v406 += v419;
        ++v405;
      }
      while (v405 != v19);
    }
    else
    {
      uint64_t v412 = v419;
      float v413 = __b;
      if (v417)
      {
        do
        {
          if (v16)
          {
            result = (float32x2_t *)memset(v413, 255, v16);
            uint64_t v412 = v419;
          }
          v413 += v412;
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = 2 * *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    uint64_t v12 = *(void *)((char *)result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = result[14];
    unint64_t v15 = result[13] * a2 / v6;
    uint64_t v16 = (void *)result[16];
    uint64_t v17 = result[15] + 2 * v15;
    uint64_t v18 = result[19];
    uint64_t v19 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v224 = v20[2];
    uint64_t v227 = v19[2];
    uint64_t v23 = v227 + v224 * v12 + 2 * v11;
    uint64_t v24 = *v21;
    uint64_t v25 = v21[1];
    uint64_t v225 = v21[2];
    uint64_t v226 = v16[2];
    uint64_t v26 = (unsigned char *)(v226 + v225 * v17 + v14);
    float v27 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    float v28 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v29 = (float)LODWORD(a5);
    float v30 = v27 * *(float *)v18;
    float v251 = v27 * *(float *)(v18 + 16);
    float v252 = v27 * *(float *)(v18 + 8);
    float v31 = v27 * *(float *)(v18 + 20);
    *(float *)&unsigned int v32 = v27 * *(float *)(v18 + 28);
    float v249 = *(float *)&v32;
    float v250 = v31;
    LOWORD(v32) = *(_WORD *)(v18 + 144);
    float v33 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v18 + 146);
    float v34 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v18 + 148);
    float v35 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v18 + 150);
    float v36 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v18 + 152);
    float v37 = (float)v32;
    float v246 = *(float *)(v18 + 40);
    float v247 = *(float *)(v18 + 36);
    float v244 = *(float *)(v18 + 48) * 0.5;
    float v245 = *(float *)(v18 + 44);
    float v242 = *(float *)(v18 + 56) * 0.5;
    float v243 = *(float *)(v18 + 52) * 0.5;
    float v38 = *(float *)(v18 + 64) * 0.5;
    float v240 = *(float *)(v18 + 76);
    float v241 = *(float *)(v18 + 72);
    float v238 = *(float *)(v18 + 84);
    float v239 = *(float *)(v18 + 80);
    float v236 = *(float *)(v18 + 92);
    float v237 = *(float *)(v18 + 88);
    float v234 = *(float *)(v18 + 100);
    float v235 = *(float *)(v18 + 96);
    float v233 = *(float *)(v18 + 104);
    uint64_t v39 = v18 + 164;
    result = (void *)(v18 + 16548);
    uint64_t v40 = v16[1];
    float v41 = (unsigned char *)(*v16 + *v21 * v17 + v14);
    uint64_t v42 = v40 + v25 * v17 + v14;
    if (!v40) {
      uint64_t v42 = 0;
    }
    unsigned int v43 = *(unsigned __int8 *)(v18 + 124);
    char v44 = 16 - v43;
    _CF = v43 >= 0x11;
    uint64_t v47 = *v19;
    uint64_t v46 = v19[1];
    uint64_t v48 = v47 + v22 * v12;
    if (_CF) {
      char v44 = 0;
    }
    uint64_t v228 = v20[1];
    uint64_t v49 = v46 + v228 * (v12 / 2);
    uint64_t v50 = v18 + 32932;
    float32x4_t v51 = (char *)(v48 + 2 * v11);
    uint64_t v52 = v49 + 2 * v11;
    char v53 = v44;
    float v54 = *(float *)(v18 + 108);
    float v55 = *(float *)(v18 + 112);
    float v57 = *(float *)(v18 + 116);
    float v56 = *(float *)(v18 + 120);
    float v254 = (float)LODWORD(a5);
    float v255 = v28;
    float v253 = v30;
    float v248 = v34;
    float v231 = v55;
    float v232 = *(float *)(v18 + 60) * 0.5;
    float v229 = *(float *)(v18 + 68) * 0.5;
    float v230 = v54;
    do
    {
      float16x8_t v58 = &v51[v22];
      uint64_t v59 = v42 + v25;
      float16x8_t v60 = &v41[v24];
      if (v10)
      {
        size_t v61 = 0;
        float16x8_t v62 = &v51[v22];
        int16x8_t v63 = &v41[v24];
        do
        {
          unsigned int v64 = (unsigned __int16 *)(v52 + 2 * v61);
          float v65 = (float)(v64[1] >> v53) - v29;
          float v66 = v252 * v65;
          float v67 = v30 * (float)((float)(*(unsigned __int16 *)v51 >> v53) - v28);
          float v68 = (float)(v252 * v65) + v67;
          float v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            float v69 = (float)(v252 * v65) + v67;
            if (v68 < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = (float)(*v64 >> v53) - v29;
          float v71 = (float)(v250 * v65) + (float)(v70 * v251);
          float v72 = 8191.0;
          if ((float)(v67 + v71) <= 8191.0)
          {
            float v72 = v67 + v71;
            if ((float)(v67 + v71) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v249 * v70;
          float v74 = (float)(v249 * v70) + v67;
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v30 * (float)((float)(*((unsigned __int16 *)v51 + 1) >> v53) - v28);
          float v77 = 8191.0;
          if ((float)(v66 + v76) <= 8191.0)
          {
            float v77 = v66 + v76;
            if ((float)(v66 + v76) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = 8191.0;
          if ((float)(v71 + v76) <= 8191.0)
          {
            float v78 = v71 + v76;
            if ((float)(v71 + v76) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v73 + v76;
          BOOL v80 = (float)(v73 + v76) <= 8191.0;
          float v81 = 8191.0;
          if (v80)
          {
            float v81 = v79;
            if (v79 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v30 * (float)((float)(*(unsigned __int16 *)v62 >> v53) - v28);
          float v83 = 8191.0;
          if ((float)(v66 + v82) <= 8191.0)
          {
            float v83 = v66 + v82;
            if ((float)(v66 + v82) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = 8191.0;
          if ((float)(v71 + v82) <= 8191.0)
          {
            float v84 = v71 + v82;
            if ((float)(v71 + v82) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v73 + v82;
          BOOL v80 = (float)(v73 + v82) <= 8191.0;
          float v86 = 8191.0;
          if (v80)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v30 * (float)((float)(*((unsigned __int16 *)v62 + 1) >> v53) - v28);
          float v88 = v66 + v87;
          BOOL v80 = (float)(v66 + v87) <= 8191.0;
          float v89 = 8191.0;
          if (v80)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v71 + v87;
          BOOL v80 = (float)(v71 + v87) <= 8191.0;
          float v91 = 8191.0;
          if (v80)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v73 + v87;
          float v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          float v112 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v113 = (float)((float)((float)(v55 * _S24) + (float)(v54 * _S2)) + (float)(v57 * _S25)) + (float)(v56 * v112);
          float v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            float v114 = (float)((float)((float)(v55 * _S24) + (float)(v54 * _S2)) + (float)(v57 * _S25))
                 + (float)(v56 * v112);
            if (v113 < 0.0) {
              float v114 = 0.0;
            }
          }
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *((_WORD *)result + llroundf(v114));
          float v119 = (float)((float)((float)(v55 * _S28) + (float)(v54 * _S26)) + (float)(v57 * _S30))
               + (float)(v56 * fmaxf(_S26, fmaxf(_S28, _S30)));
          float v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            float v120 = v119;
            if (v119 < 0.0) {
              float v120 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *((_WORD *)result + llroundf(v120));
          float v125 = v56;
          float v126 = (float)((float)((float)(v55 * _S10) + (float)(v54 * _S9)) + (float)(v57 * _S11))
               + (float)(v56 * fmaxf(_S9, fmaxf(_S10, _S11)));
          float v127 = 8191.0;
          if (v126 <= 8191.0)
          {
            float v127 = v126;
            if (v126 < 0.0) {
              float v127 = 0.0;
            }
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          float v132 = _S2 * _S1;
          float v133 = _S24 * _S1;
          float v134 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          float v136 = _S26 * _S1;
          float v137 = _S28 * _S1;
          float v138 = _S30 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v127));
          __asm { FCVT            S2, H1 }
          float v140 = _S9 * _S2;
          float v141 = _S10 * _S2;
          float v142 = _S11 * _S2;
          float v143 = (float)((float)((float)(v55 * _S31) + (float)(v54 * _S29)) + (float)(v57 * _S8))
               + (float)(v125 * fmaxf(_S29, fmaxf(_S31, _S8)));
          float v144 = 8191.0;
          if (v143 <= 8191.0)
          {
            float v144 = v143;
            if (v143 < 0.0) {
              float v144 = 0.0;
            }
          }
          _H25 = *((_WORD *)result + llroundf(v144));
          __asm { FCVT            S25, H25 }
          float v147 = _S29 * _S25;
          float v148 = _S31 * _S25;
          float v149 = _S8 * _S25;
          float v150 = (float)((float)(v240 * v133) + (float)(v132 * v241)) + (float)(v134 * v239);
          float v151 = (float)((float)(v237 * v133) + (float)(v132 * v238)) + (float)(v134 * v236);
          _S23 = (float)((float)(v234 * v133) + (float)(v132 * v235)) + (float)(v134 * v233);
          float v153 = (float)((float)(v237 * v137) + (float)(v136 * v238)) + (float)(v138 * v236);
          unsigned int v154 = llroundf(fminf(fmaxf(_S23, 0.0), 8191.0));
          unsigned int v155 = llroundf(fminf(fmaxf((float)((float)(v240 * v137) + (float)(v136 * v241)) + (float)(v138 * v239), 0.0), 8191.0));
          LOWORD(_S23) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S24, H24
          }
          unsigned int v159 = llroundf(fminf(fmaxf((float)((float)(v234 * v137) + (float)(v136 * v235)) + (float)(v138 * v233), 0.0), 8191.0));
          _H17 = *(_WORD *)(v50 + 2 * v154);
          unsigned int v161 = llroundf(fminf(fmaxf((float)((float)(v240 * v141) + (float)(v140 * v241)) + (float)(v142 * v239), 0.0), 8191.0));
          __asm { FCVT            S17, H17 }
          _H21 = *(_WORD *)(v50 + 2 * v155);
          __asm { FCVT            S21, H21 }
          unsigned int v165 = llroundf(fminf(fmaxf((float)((float)(v237 * v141) + (float)(v140 * v238)) + (float)(v142 * v236), 0.0), 8191.0));
          _H22 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          unsigned int v168 = llroundf(fminf(fmaxf((float)((float)(v234 * v141) + (float)(v140 * v235)) + (float)(v142 * v233), 0.0), 8191.0));
          _H1 = *(_WORD *)(v50 + 2 * v159);
          __asm { FCVT            S1, H1 }
          unsigned int v171 = llroundf(fminf(fmaxf((float)((float)(v240 * v148) + (float)(v147 * v241)) + (float)(v149 * v239), 0.0), 8191.0));
          _H2 = *(_WORD *)(v50 + 2 * v161);
          unsigned int v173 = llroundf(fminf(fmaxf((float)((float)(v237 * v148) + (float)(v147 * v238)) + (float)(v149 * v236), 0.0), 8191.0));
          unsigned int v174 = llroundf(fminf(fmaxf((float)((float)(v234 * v148) + (float)(v147 * v235)) + (float)(v149 * v233), 0.0), 8191.0));
          float v175 = (float)((float)((float)(v246 * _S24) + (float)(v247 * _S23)) + (float)(v245 * _S17)) + v33;
          if (v175 < v33) {
            float v176 = v33;
          }
          else {
            float v176 = (float)((float)((float)(v246 * _S24) + (float)(v247 * _S23)) + (float)(v245 * _S17)) + v33;
          }
          BOOL v80 = v175 <= v35;
          float v177 = (float)((float)((float)(v246 * _S22) + (float)(v247 * _S21)) + (float)(v245 * _S1)) + v33;
          if (!v80) {
            float v176 = v35;
          }
          char v178 = llroundf(v176);
          if (v177 < v33) {
            float v179 = v33;
          }
          else {
            float v179 = (float)((float)((float)(v246 * _S22) + (float)(v247 * _S21)) + (float)(v245 * _S1)) + v33;
          }
          if (v177 <= v35) {
            float v180 = v179;
          }
          else {
            float v180 = v35;
          }
          char v181 = llroundf(v180);
          _H3 = *(_WORD *)(v50 + 2 * v165);
          __asm
          {
            FCVT            S2, H2
            FCVT            S3, H3
          }
          float v185 = _S23 + _S21;
          _H23 = *(_WORD *)(v50 + 2 * v168);
          __asm { FCVT            S23, H23 }
          _S22 = _S24 + _S22;
          _H24 = *(_WORD *)(v50 + 2 * v171);
          __asm { FCVT            S24, H24 }
          float v191 = _S17 + _S1;
          float v192 = (float)(v248 + (float)(v185 * v244)) + (float)(_S22 * v243);
          float v193 = (float)(v248 + (float)(v185 * v232)) + (float)(_S22 * v38);
          LOWORD(_S22) = *(_WORD *)(v50 + 2 * v173);
          __asm { FCVT            S22, H22 }
          float v195 = v192 + (float)(v191 * v242);
          float v196 = v193 + (float)(v191 * v229);
          if (v195 < v36) {
            float v197 = v36;
          }
          else {
            float v197 = v195;
          }
          _H17 = *(_WORD *)(v50 + 2 * v174);
          __asm { FCVT            S17, H17 }
          if (!(_NF ^ _VF | _ZF)) {
            float v197 = v37;
          }
          char v200 = llroundf(v197);
          if (v196 < v36) {
            float v201 = v36;
          }
          else {
            float v201 = v196;
          }
          if (v196 <= v37) {
            float v202 = v201;
          }
          else {
            float v202 = v37;
          }
          char v203 = llroundf(v202);
          float v204 = (float)((float)((float)(v246 * _S3) + (float)(v247 * _S2)) + (float)(v245 * _S23)) + v33;
          if (v204 < v33) {
            float v205 = v33;
          }
          else {
            float v205 = (float)((float)((float)(v246 * _S3) + (float)(v247 * _S2)) + (float)(v245 * _S23)) + v33;
          }
          BOOL v80 = v204 <= v35;
          float v206 = (float)((float)((float)(v246 * _S22) + (float)(v247 * _S24)) + (float)(v245 * _S17)) + v33;
          if (!v80) {
            float v205 = v35;
          }
          char v207 = llroundf(v205);
          if (v206 < v33) {
            float v208 = v33;
          }
          else {
            float v208 = (float)((float)((float)(v246 * _S22) + (float)(v247 * _S24)) + (float)(v245 * _S17)) + v33;
          }
          if (v206 <= v35) {
            float v209 = v208;
          }
          else {
            float v209 = v35;
          }
          char v210 = llroundf(v209);
          float v211 = _S2 + _S24;
          *float v41 = v178;
          v41[1] = v181;
          *(unsigned char *)(v42 + v61 + 1) = v203;
          *(unsigned char *)(v42 + v61) = v200;
          *int16x8_t v63 = v207;
          v63[1] = v210;
          float v212 = _S3 + _S22;
          float v213 = (float)(v248 + (float)(v211 * v244)) + (float)((float)(_S3 + _S22) * v243);
          float v214 = _S23 + _S17;
          float v215 = v213 + (float)((float)(_S23 + _S17) * v242);
          float v216 = v37;
          if (v215 <= v37)
          {
            float v216 = v215;
            if (v215 < v36) {
              float v216 = v36;
            }
          }
          float v217 = (float)((float)(v248 + (float)(v211 * v232)) + (float)(v212 * v38)) + (float)(v214 * v229);
          *(unsigned char *)(v59 + v61) = llroundf(v216);
          float v218 = v37;
          float v28 = v255;
          float v30 = v253;
          if (v217 <= v37)
          {
            float v218 = v217;
            if (v217 < v36) {
              float v218 = v36;
            }
          }
          v51 += 4;
          v62 += 4;
          v41 += 2;
          v63 += 2;
          *(unsigned char *)(v59 + v61 + 1) = llroundf(v218);
          v61 += 2;
          float v29 = v254;
          float v54 = v230;
          float v55 = v231;
          float v56 = v125;
        }
        while (v10 > v61);
      }
      float32x4_t v51 = &v58[v22];
      v52 += v228;
      float v41 = &v60[v24];
      uint64_t v42 = v59 + v25;
      v9 += 2;
    }
    while (v13 > v9);
    if (v227 && v226)
    {
      uint64_t v219 = 0;
      do
      {
        if (v10)
        {
          size_t v220 = v10;
          uint32x4_t v221 = v26;
          uint64_t v222 = (unsigned __int16 *)v23;
          do
          {
            unsigned int v223 = *v222++;
            *v221++ = llroundf((float)v223 * 0.0038911);
            --v220;
          }
          while (v220);
        }
        v23 += v224;
        v26 += v225;
        ++v219;
      }
      while (v219 != v13);
    }
    else if (v226)
    {
      do
      {
        if (v10) {
          result = memset(v26, 255, v10);
        }
        v26 += v225;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_xf420_TRC_Mat_TRC_422vf_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, float32x4_t a4, float32x4_t a5, double a6, double a7, double a8, int16x4_t a9, __n128 _Q7)
{
  uint64_t v16 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v17 = 2 * result->u8[0];
  unint64_t v18 = v16 * a2 / v17;
  unint64_t v19 = (v16 + v16 * a2) / v17;
  if (2 * v19 != 2 * v18)
  {
    unint64_t v20 = 0;
    size_t v21 = *(size_t *)((char *)&result[2] + 4);
    uint64_t v22 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v23 = *(void *)((char *)&result[5] + 4) + 2 * v18;
    unint64_t v24 = 2 * v19 - 2 * v18;
    float32x2_t v25 = result[14];
    uint64_t v26 = (uint64_t *)result[16];
    uint64_t v27 = *(void *)&result[15] + 2 * (*(void *)&result[13] * a2 / v17);
    uint64_t v28 = (float32x2_t *)result[19];
    uint64_t v29 = (void *)result[7];
    uint64_t v30 = (uint64_t *)result[8];
    uint64_t v31 = (uint64_t *)result[17];
    uint64_t v32 = *v30;
    uint64_t v33 = v30[1];
    uint64_t v371 = v30[2];
    uint64_t v374 = v29[2];
    uint64_t v34 = *v31;
    uint64_t v35 = v31[1];
    uint64_t v375 = v31[2];
    __b = (unsigned char *)(v26[2] + v375 * v27 + *(void *)&v25);
    uint64_t v373 = v26[2];
    LODWORD(v30) = v28[17].u16[2];
    unsigned int v36 = v28[17].u16[3];
    a5.i32[0] = v28[3].i32[1];
    LODWORD(a3) = 1174403072;
    LODWORD(v31) = v28[18].u16[0];
    float v391 = (float)v30;
    float v37 = (float)v36;
    *(short float *)v11.i16 = (short float)v30;
    unsigned int v38 = v28[18].u16[1];
    short float v39 = (short float)v36;
    unsigned int v40 = v28[18].u16[2];
    _Q7.n128_u32[0] = v28[6].u32[0];
    float v430 = v28[5].f32[1];
    v42.i32[0] = v28[6].i32[1];
    v41.i32[0] = v28[7].i32[0];
    a5.i32[1] = v28[1].i32[0];
    _Q7.n128_u32[1] = v28[7].u32[1];
    v42.i32[1] = v28[8].i32[0];
    v41.i32[1] = v28[8].i32[1];
    LODWORD(v30) = v28[18].u16[3];
    float v43 = (float)v31;
    *(short float *)a9.i16 = (short float)v31;
    LODWORD(v31) = v28[19].u16[0];
    float v429 = v28[4].f32[1];
    float v428 = v28[5].f32[0];
    float v434 = (float)v38;
    *(short float *)v12.i16 = (short float)v38;
    char v44 = (char *)&v28[20] + 4;
    uint64_t v370 = v374 + v371 * v23 + 2 * v22;
    a4.f32[0] = 8191.0 / (float)v28[16].u32[0];
    _S25 = a4.f32[0] * v28->f32[0];
    float v46 = (float)v40;
    *(float *)v10.i32 = (float)v30;
    float v421 = (float)v30;
    float v47 = (float)v31;
    *(short float *)v10.i16 = (short float)v40;
    float16x8_t v48 = (float16x8_t)vdupq_lane_s16(v11, 0);
    *(float32x2_t *)a5.f32 = vmul_n_f32(*(float32x2_t *)a5.f32, a4.f32[0]);
    float16x8_t v49 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    result = (float32x2_t *)((char *)v28 + 16548);
    *(float32x2_t *)a4.f32 = vmul_n_f32(v28[2], a4.f32[0]);
    unint64_t v427 = a4.i64[0];
    float16x8_t v423 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    float16x8_t v424 = vmulq_n_f16(v49, -v39);
    float16x8_t v425 = vmulq_n_f16(v423, -v39);
    *(float32x2_t *)v15.f32 = vmul_f32((float32x2_t)_Q7.n128_u64[0], (float32x2_t)0x3F0000003F000000);
    int32x4_t v426 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v15), 0);
    *(float32x2_t *)v14.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    float16x8_t v50 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v14), 0);
    *(float32x2_t *)v13.f32 = vmul_f32(v41, (float32x2_t)0x3F0000003F000000);
    int16x4_t v51 = (int16x4_t)vcvt_f16_f32(v13);
    float16x8_t v52 = (float16x8_t)vdupq_lane_s32((int32x2_t)v51, 0);
    float16x8_t v53 = (float16x8_t)vdupq_lane_s16(a9, 0);
    int16x8_t v54 = vdupq_lane_s16(v12, 0);
    float16x8_t v55 = v49;
    int16x8_t v56 = vdupq_lane_s16(v10, 0);
    *(short float *)v51.i16 = (short float)v30;
    int16x8_t v57 = vdupq_lane_s16(v51, 0);
    *(short float *)v51.i16 = (short float)v31;
    int16x8_t v58 = vdupq_lane_s16(v51, 0);
    unsigned int v59 = v28[15].u8[4];
    if (v59 >= 0x11) {
      unsigned __int8 v60 = 0;
    }
    else {
      unsigned __int8 v60 = 16 - v59;
    }
    uint64_t v62 = *v26;
    uint64_t v61 = v26[1];
    _ZF = v61 == 0;
    unsigned int v64 = (unsigned char *)(v61 + v35 * v27 + *(void *)&v25);
    if (_ZF) {
      float v65 = 0;
    }
    else {
      float v65 = v64;
    }
    float v66 = (int8x8_t *)(v62 + v34 * v27 + *(void *)&v25);
    if (v23 >= 0) {
      uint64_t v67 = v23;
    }
    else {
      uint64_t v67 = v23 + 1;
    }
    uint64_t v68 = v29[1] + v33 * (v67 >> 1) + 2 * v22;
    float v69 = (uint16x8_t *)(*v29 + v32 * v23 + 2 * v22);
    unsigned __int8 v70 = v60;
    size_t v378 = v21 & 0xFFFFFFF8;
    float v71 = &v65[v35];
    uint64_t v72 = 2 * v35;
    _Q7.n128_u32[0] = v28[11].u32[1];
    __asm { FCVT            H15, S25 }
    _S3 = v28[4].i32[1];
    __asm { FCVT            H3, S3 }
    short float v403 = *(short float *)&_S3;
    _S3 = v28[5].i32[0];
    __asm { FCVT            H3, S3 }
    _S5 = v28[5].i32[1];
    __asm { FCVT            H5, S5 }
    short float v401 = *(short float *)&_S5;
    float v413 = v28[9].f32[0];
    __asm { FCVT            H5, S11 }
    float v412 = v28[9].f32[1];
    __asm { FCVT            H12, S12 }
    float v411 = v28[10].f32[0];
    __asm { FCVT            H13, S13 }
    float v410 = v28[10].f32[1];
    __asm { FCVT            H11, S27 }
    short float v397 = _H11;
    float v408 = v28[11].f32[0];
    __asm { FCVT            H11, S28 }
    short float v396 = _H11;
    float v407 = _Q7.n128_f32[0];
    __asm { FCVT            H7, S7 }
    float v406 = v28[12].f32[0];
    __asm { FCVT            H11, S24 }
    short float v394 = _H11;
    float v405 = v28[12].f32[1];
    __asm { FCVT            H11, S2 }
    short float v393 = _H11;
    float v404 = v28[13].f32[0];
    __asm { FCVT            H11, S26 }
    short float v392 = _H11;
    float16x8_t v88 = v424;
    float16x8_t v87 = v425;
    float16x8_t v89 = (float16x8_t)v426;
    uint64_t v90 = v15.i64[0];
    uint64_t v91 = v14.i64[0];
    uint64_t v92 = v13.i64[0];
    float16x8_t v93 = 0uLL;
    v94.i64[0] = 0x9000900090009000;
    v94.i64[1] = 0x9000900090009000;
    float16x8_t v418 = (float16x8_t)v56;
    float16x8_t v419 = (float16x8_t)v54;
    float16x8_t v416 = (float16x8_t)v58;
    float16x8_t v417 = (float16x8_t)v57;
    uint16x8_t v414 = (uint16x8_t)vdupq_n_s16(-v60);
    short float v402 = *(short float *)&_S3;
    short float v400 = *(short float *)&_S5;
    unint64_t v384 = v24;
    size_t v385 = v21;
    uint64_t v382 = v33;
    uint64_t v383 = v32;
    uint64_t v380 = v35;
    uint64_t v381 = v34;
    float16x8_t v422 = v55;
    float16x8_t v420 = v52;
    float v433 = v37;
    int v415 = v21 - 7;
    unsigned __int8 v379 = v60;
    uint64_t v377 = 2 * v35;
    float16x8_t v409 = v50;
    short float v398 = _H13;
    short float v399 = _H12;
    __n128 v395 = _Q7;
    float v376 = (float)v40;
    do
    {
      float v95 = (uint16x8_t *)((char *)v69 + v32);
      uint64_t v96 = (int8x8_t *)((char *)v66 + v34);
      float v97 = &v65[v35];
      float v389 = (char *)v66 + v34;
      float v390 = &v65[v35];
      char v388 = &v69->i8[v32];
      if ((int)v21 < 8)
      {
        size_t v239 = 0;
        float16x8_t v99 = (uint16x8_t *)v68;
      }
      else
      {
        uint64_t v386 = v68;
        unint64_t v387 = v20;
        uint64_t v98 = 0;
        float16x8_t v99 = (uint16x8_t *)v68;
        short float v431 = v71;
        short float v432 = v65;
        do
        {
          uint16x8_t v100 = *v99++;
          float16x8_t v101 = vcvtq_f16_u16(vshlq_u16(v100, v414));
          int16x8_t v102 = (int16x8_t)vmlaq_f16(v88, v55, v101);
          int8x16_t v103 = (int8x16_t)vmlaq_f16(v87, v423, v101);
          v101.i64[0] = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u64[0];
          *(int16x4_t *)v104.i8 = vuzp1_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8);
          *(int16x4_t *)v101.i8 = vuzp2_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8);
          *(double *)&v101.i64[1] = a3;
          v102.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
          *(double *)&v104.i64[1] = a3;
          *(float16x4_t *)v102.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v102.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v102.i8));
          uint16x8_t v105 = *v69++;
          *(double *)&v102.i64[1] = a3;
          float16x8_t v106 = (float16x8_t)vzip1q_s16((int16x8_t)v101, (int16x8_t)v101);
          float16x8_t v107 = vcvtq_f16_u16(vshlq_u16(v105, v414));
          uint16x8_t v108 = *v95++;
          float16x8_t v109 = (float16x8_t)vzip1q_s16(v102, v102);
          float16x8_t v110 = vsubq_f16(v107, v48);
          float16x8_t v111 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v108, v414)), v48);
          float16x8_t v112 = (float16x8_t)vzip1q_s16(v104, v104);
          float16x8_t v113 = vmlaq_n_f16(v106, v110, _H15);
          float16x8_t v114 = vmlaq_n_f16(v106, v111, _H15);
          float16x8_t v115 = v109;
          float16x8_t v116 = vmlaq_n_f16(v109, v111, _H15);
          float16x8_t v117 = vmlaq_n_f16(v115, v110, _H15);
          float16x8_t v118 = vmlaq_n_f16(v112, v110, _H15);
          float16x8_t v119 = vmlaq_n_f16(v112, v111, _H15);
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, v93), v94));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          uint64_t v123 = v122.u32[1];
          uint64_t v124 = v122.u32[3];
          v125.i16[0] = *(_WORD *)&v44[2 * v122.u32[0]];
          uint64_t v126 = v121.u32[1];
          uint64_t v127 = v121.u32[3];
          uint32x4_t v128 = (__int16 *)&v44[2 * v122.u32[2]];
          uint64_t v129 = v121.u32[2];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, v93), v94));
          long long v131 = (__int16 *)&v44[2 * v121.u32[0]];
          uint32x4_t v132 = vmovl_high_u16(v130);
          v133.i64[0] = v132.u32[2];
          v133.i64[1] = v132.u32[3];
          float16x8_t v134 = v133;
          v133.i64[0] = v132.u32[0];
          v133.i64[1] = v132.u32[1];
          float16x8_t v135 = v133;
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v130.i8);
          v133.i64[0] = v136.u32[2];
          v133.i64[1] = v136.u32[3];
          float16x8_t v137 = v133;
          float v138 = (__int16 *)&v44[2 * v129];
          uint64_t v139 = v136.u32[1];
          v140.i16[0] = *(_WORD *)&v44[2 * v136.u32[0]];
          uint64_t v141 = v135.i64[1];
          float v142 = (__int16 *)&v44[2 * v135.i64[0]];
          uint16x8_t v143 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, v93), v94));
          uint32x4_t v144 = vmovl_high_u16(v143);
          uint32x4_t v145 = vmovl_u16(*(uint16x4_t *)v143.i8);
          float v146 = (__int16 *)&v44[2 * v126];
          v147.i16[0] = *(_WORD *)&v44[2 * v145.u32[0]];
          float v148 = (__int16 *)&v44[2 * v145.u32[1]];
          v125.i16[1] = *(_WORD *)&v44[2 * v123];
          float v149 = (__int16 *)&v44[2 * v145.u32[2]];
          float v150 = (__int16 *)&v44[2 * v145.u32[3]];
          float v151 = (__int16 *)&v44[2 * v139];
          uint32x4_t v152 = (__int16 *)&v44[2 * v144.u32[0]];
          float v153 = (__int16 *)&v44[2 * v144.u32[1]];
          unsigned int v154 = (__int16 *)&v44[2 * v144.u32[2]];
          unsigned int v155 = (__int16 *)&v44[2 * v144.u32[3]];
          uint16x8_t v156 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, v93), v94));
          uint32x4_t v157 = vmovl_high_u16(v156);
          v133.i64[0] = v157.u32[2];
          v133.i64[1] = v157.u32[3];
          float16x8_t v158 = v133;
          v133.i64[0] = v157.u32[0];
          uint32x4_t v159 = vmovl_u16(*(uint16x4_t *)v156.i8);
          v147.i16[1] = *v148;
          v114.i16[0] = *(_WORD *)&v44[2 * v159.u32[0]];
          v125.i16[2] = *v128;
          v140.i16[1] = *v151;
          v147.i16[2] = *v149;
          v114.i16[1] = *(_WORD *)&v44[2 * v159.u32[1]];
          v125.i16[3] = *(_WORD *)&v44[2 * v124];
          uint16x8_t v160 = (__int16 *)&v44[2 * v157.u32[1]];
          unsigned int v161 = (__int16 *)&v44[2 * v158.i64[0]];
          float16x8_t v162 = (__int16 *)&v44[2 * v158.i64[1]];
          v140.i16[2] = *(_WORD *)&v44[2 * v137.i64[0]];
          v114.i16[2] = *(_WORD *)&v44[2 * v159.u32[2]];
          v114.i16[3] = *(_WORD *)&v44[2 * v159.u32[3]];
          v147.i16[3] = *v150;
          uint16x8_t v163 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, v93), v94));
          uint32x4_t v164 = vmovl_high_u16(v163);
          v114.i16[4] = *(_WORD *)&v44[2 * v133.i64[0]];
          uint32x4_t v165 = vmovl_u16(*(uint16x4_t *)v163.i8);
          v125.i16[4] = *v131;
          v140.i16[3] = *(_WORD *)&v44[2 * v137.i64[1]];
          v158.i16[0] = *(_WORD *)&v44[2 * v165.u32[0]];
          v147.i16[4] = *v152;
          v114.i16[5] = *v160;
          v125.i16[5] = *v146;
          v140.i16[4] = *v142;
          float16x8_t v166 = (__int16 *)&v44[2 * v164.u32[2]];
          uint32x4_t v167 = (__int16 *)&v44[2 * v164.u32[3]];
          v158.i16[1] = *(_WORD *)&v44[2 * v165.u32[1]];
          v147.i16[5] = *v153;
          v158.i16[2] = *(_WORD *)&v44[2 * v165.u32[2]];
          v158.i16[3] = *(_WORD *)&v44[2 * v165.u32[3]];
          v114.i16[6] = *v161;
          v158.i16[4] = *(_WORD *)&v44[2 * v164.u32[0]];
          v158.i16[5] = *(_WORD *)&v44[2 * v164.u32[1]];
          uint16x8_t v168 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, v93), v94));
          uint32x4_t v169 = vmovl_high_u16(v168);
          v125.i16[6] = *v138;
          uint32x4_t v170 = vmovl_u16(*(uint16x4_t *)v168.i8);
          v140.i16[5] = *(_WORD *)&v44[2 * v141];
          v137.i16[0] = *(_WORD *)&v44[2 * v170.u32[0]];
          v147.i16[6] = *v154;
          v114.i16[7] = *v162;
          v158.i16[6] = *v166;
          v125.i16[7] = *(_WORD *)&v44[2 * v127];
          v140.i16[6] = *(_WORD *)&v44[2 * v134.i64[0]];
          v137.i16[1] = *(_WORD *)&v44[2 * v170.u32[1]];
          v137.i16[2] = *(_WORD *)&v44[2 * v170.u32[2]];
          v147.i16[7] = *v155;
          v137.i16[3] = *(_WORD *)&v44[2 * v170.u32[3]];
          v137.i16[4] = *(_WORD *)&v44[2 * v169.u32[0]];
          v140.i16[7] = *(_WORD *)&v44[2 * v134.i64[1]];
          v137.i16[5] = *(_WORD *)&v44[2 * v169.u32[1]];
          v137.i16[6] = *(_WORD *)&v44[2 * v169.u32[2]];
          v158.i16[7] = *v167;
          v137.i16[7] = *(_WORD *)&v44[2 * v169.u32[3]];
          float16x8_t v171 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v400), v140, v399), v147, v398);
          float16x8_t v172 = vmlaq_n_f16(vmulq_n_f16(v125, v397), v140, v396);
          v116.i16[7] = v88.i16[7];
          float16x8_t v173 = vmlaq_n_f16(vmulq_n_f16(v147, v392), v140, v393);
          v140.i16[7] = v395.n128_i16[7];
          float16x8_t v174 = vmlaq_n_f16(v172, v147, *(short float *)v395.n128_u16);
          float16x8_t v175 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v400), v158, v399), v137, v398);
          float16x8_t v176 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v397), v158, v396), v137, *(short float *)v395.n128_u16);
          float16x8_t v177 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, v392), v158, v393), v114, v394);
          uint16x8_t v178 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v171, v93), v94));
          uint32x4_t v179 = vmovl_high_u16(v178);
          v133.i64[0] = v179.u32[2];
          v133.i64[1] = v179.u32[3];
          float16x8_t v180 = v133;
          v133.i64[0] = v179.u32[0];
          v133.i64[1] = v179.u32[1];
          float16x8_t v181 = v133;
          uint32x4_t v182 = vmovl_u16(*(uint16x4_t *)v178.i8);
          v133.i64[0] = v182.u32[0];
          v133.i64[1] = v182.u32[1];
          int16x8_t v183 = (int16x8_t)v133;
          uint64_t v184 = v182.u32[1];
          uint64_t v185 = v182.u32[3];
          uint64_t v186 = v181.i64[1];
          uint64_t v187 = v182.u32[2];
          uint64_t v188 = v181.i64[0];
          uint16x8_t v189 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v174, v93), v94));
          uint32x4_t v190 = vmovl_high_u16(v189);
          v133.i64[0] = v190.u32[2];
          v133.i64[1] = v190.u32[3];
          float16x8_t v191 = v133;
          v133.i64[0] = v190.u32[0];
          v133.i64[1] = v190.u32[1];
          float16x8_t v192 = v133;
          uint32x4_t v193 = vmovl_u16(*(uint16x4_t *)v189.i8);
          v133.i64[0] = v193.u32[2];
          v133.i64[1] = v193.u32[3];
          uint64_t v194 = v193.u32[1];
          uint64_t v195 = v193.u32[0];
          uint64_t v196 = v192.i64[1];
          v140.i16[0] = result->i16[v183.i64[0]];
          uint64_t v197 = v192.i64[0];
          uint64_t v198 = v191.i64[1];
          uint64_t v199 = v191.i64[0];
          char v200 = (__int16 *)result + v187;
          uint16x8_t v201 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v173, v125, v394), v93), v94));
          uint32x4_t v202 = vmovl_high_u16(v201);
          v116.i16[0] = result->i16[v195];
          uint32x4_t v203 = vmovl_u16(*(uint16x4_t *)v201.i8);
          uint64_t v204 = v203.u32[1];
          v125.i16[0] = result->i16[v203.u32[0]];
          uint64_t v205 = v203.u32[3];
          float v206 = (__int16 *)result + v203.u32[2];
          uint64_t v207 = v202.u32[1];
          uint64_t v208 = v202.u32[0];
          int16x8_t v209 = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v175, v93), v94));
          uint32x4_t v210 = vmovl_u16(*(uint16x4_t *)v209.i8);
          v140.i16[1] = result->i16[v184];
          v183.i16[0] = result->i16[v210.u32[0]];
          uint64_t v211 = v202.u32[3];
          v116.i16[1] = result->i16[v194];
          v125.i16[1] = result->i16[v204];
          v183.i16[1] = result->i16[v210.u32[1]];
          v183.i16[2] = result->i16[v210.u32[2]];
          uint64_t v212 = v202.u32[2];
          uint32x4_t v213 = vmovl_high_u16((uint16x8_t)v209);
          v140.i16[2] = *v200;
          uint16x8_t v214 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v176, v93), v94));
          uint32x4_t v215 = vmovl_u16(*(uint16x4_t *)v214.i8);
          v116.i16[2] = result->i16[v133.i64[0]];
          v209.i16[7] = (unint64_t)v215.u32[1] >> 48;
          v125.i16[2] = *v206;
          v209.i16[0] = result->i16[v215.u32[0]];
          v183.i16[3] = result->i16[v210.u32[3]];
          v140.i16[3] = result->i16[v185];
          v116.i16[3] = result->i16[v133.i64[1]];
          float v216 = (__int16 *)result + v196;
          float v217 = (__int16 *)result + v199;
          float v218 = (__int16 *)result + v205;
          float v71 = v431;
          v125.i16[3] = *v218;
          v183.i16[4] = result->i16[v213.u32[0]];
          uint32x4_t v219 = vmovl_high_u16(v214);
          v140.i16[4] = result->i16[v188];
          v209.i16[1] = result->i16[v215.u32[1]];
          v116.i16[4] = result->i16[v197];
          v125.i16[4] = result->i16[v208];
          v209.i16[2] = result->i16[v215.u32[2]];
          v183.i16[5] = result->i16[v213.u32[1]];
          v209.i16[3] = result->i16[v215.u32[3]];
          v140.i16[5] = result->i16[v186];
          v209.i16[4] = result->i16[v219.u32[0]];
          v116.i16[5] = *v216;
          v125.i16[5] = result->i16[v207];
          v209.i16[5] = result->i16[v219.u32[1]];
          uint64_t v220 = v219.u32[3];
          v183.i16[6] = result->i16[v213.u32[2]];
          v209.i16[6] = result->i16[v219.u32[2]];
          v140.i16[6] = result->i16[v180.i64[0]];
          uint32x4_t v221 = (__int16 *)result + v213.u32[3];
          uint16x8_t v222 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v177, v93), v94));
          v116.i16[6] = *v217;
          uint32x4_t v223 = vmovl_high_u16(v222);
          int16x8_t v224 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v222.i8);
          v133.i64[1] = v224.u32[3];
          v224.i16[7] = (unint64_t)v224.u32[1] >> 48;
          v125.i16[6] = result->i16[v212];
          float16x8_t v225 = (float16x8_t)v183;
          v224.i16[0] = result->i16[v224.u32[0]];
          v225.i16[7] = *v221;
          uint64_t v226 = v223.u32[1];
          uint64_t v227 = v223.u32[0];
          float16x8_t v228 = v140;
          v228.i16[7] = result->i16[v180.i64[1]];
          float16x8_t v229 = (float16x8_t)vuzp1q_s16((int16x8_t)v140, (int16x8_t)v116);
          v224.i16[1] = result->i16[v224.u32[1]];
          uint64_t v230 = v223.u32[3];
          v116.i16[7] = result->i16[v198];
          uint64_t v231 = v223.u32[2];
          float16x8_t v232 = vmlaq_n_f16(vmlaq_n_f16(v53, v228, v403), v116, v402);
          float16x8_t v233 = (float16x8_t)vtrn1q_s16((int16x8_t)v125, (int16x8_t)v125);
          v125.i16[7] = result->i16[v211];
          v224.i16[2] = result->i16[v224.u32[2]];
          int16x8_t v234 = (int16x8_t)vaddq_f16(v229, (float16x8_t)vuzp2q_s16((int16x8_t)v228, (int16x8_t)v116));
          float16x8_t v235 = (float16x8_t)v209;
          v224.i16[3] = result->i16[v133.i64[1]];
          v224.i16[4] = result->i16[v227];
          v235.i16[7] = result->i16[v220];
          v224.i16[5] = result->i16[v226];
          v224.i16[6] = result->i16[v231];
          float16x8_t v236 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v419, v89, (float16x8_t)vzip1q_s16(v234, v234)), v50, (float16x8_t)vzip2q_s16(v234, v234)), v52, vaddq_f16(v233, (float16x8_t)vtrn2q_s16((int16x8_t)v125, (int16x8_t)v125)));
          float16x8_t v237 = (float16x8_t)v224;
          v237.i16[7] = result->i16[v230];
          *v66++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v232, v125, v401), v53), v418)));
          *(int8x8_t *)&v432[v98] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v236, v417), v416)));
          *v96++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v53, v225, v403), v235, v402), v237, v401), v53), v418)));
          int16x8_t v238 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16(v183, v209), (float16x8_t)vuzp2q_s16((int16x8_t)v225, (int16x8_t)v235));
          *(int8x8_t *)&v431[v98] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v419, v89, (float16x8_t)vzip1q_s16(v238, v238)), v50, (float16x8_t)vzip2q_s16(v238, v238)), v52, vaddq_f16((float16x8_t)vtrn1q_s16(v224, v224), (float16x8_t)vtrn2q_s16((int16x8_t)v237, (int16x8_t)v237))), v417), v416)));
          v98 += 8;
        }
        while ((int)v98 < v415);
        float v65 = &v432[v98];
        float v97 = &v431[v98];
        uint64_t v72 = v377;
        size_t v239 = v378;
        unint64_t v24 = v384;
        size_t v21 = v385;
        uint64_t v68 = v386;
        unint64_t v20 = v387;
        uint64_t v33 = v382;
        uint64_t v32 = v383;
        uint64_t v35 = v380;
        uint64_t v34 = v381;
        unsigned __int8 v70 = v379;
        float v37 = v433;
        float v46 = v376;
      }
      for (; v21 > v239; float16x8_t v52 = v420)
      {
        float v240 = (float)(v99->u16[1] >> v70) - v37;
        float v241 = a5.f32[1] * v240;
        float v242 = _S25 * (float)((float)(v69->u16[0] >> v70) - v391);
        float v243 = (float)(a5.f32[1] * v240) + v242;
        float v244 = 8191.0;
        if (v243 <= 8191.0)
        {
          float v244 = (float)(a5.f32[1] * v240) + v242;
          if (v243 < 0.0) {
            float v244 = 0.0;
          }
        }
        float v245 = (float)(v99->u16[0] >> v70) - v37;
        float v246 = (float)(*((float *)&v427 + 1) * v240) + (float)(v245 * *(float *)&v427);
        float v247 = 8191.0;
        if ((float)(v242 + v246) <= 8191.0)
        {
          float v247 = v242 + v246;
          if ((float)(v242 + v246) < 0.0) {
            float v247 = 0.0;
          }
        }
        float v248 = a5.f32[0] * v245;
        float v249 = (float)(a5.f32[0] * v245) + v242;
        float v250 = 8191.0;
        if (v249 <= 8191.0)
        {
          float v250 = v249;
          if (v249 < 0.0) {
            float v250 = 0.0;
          }
        }
        float v251 = _S25 * (float)((float)(v69->u16[1] >> v70) - v391);
        float v252 = 8191.0;
        if ((float)(v241 + v251) <= 8191.0)
        {
          float v252 = v241 + v251;
          if ((float)(v241 + v251) < 0.0) {
            float v252 = 0.0;
          }
        }
        float v253 = 8191.0;
        if ((float)(v246 + v251) <= 8191.0)
        {
          float v253 = v246 + v251;
          if ((float)(v246 + v251) < 0.0) {
            float v253 = 0.0;
          }
        }
        float v254 = v248 + v251;
        BOOL v255 = (float)(v248 + v251) <= 8191.0;
        float v256 = 8191.0;
        if (v255)
        {
          float v256 = v254;
          if (v254 < 0.0) {
            float v256 = 0.0;
          }
        }
        float v257 = _S25 * (float)((float)(v95->u16[0] >> v70) - v391);
        float v258 = 8191.0;
        if ((float)(v241 + v257) <= 8191.0)
        {
          float v258 = v241 + v257;
          if ((float)(v241 + v257) < 0.0) {
            float v258 = 0.0;
          }
        }
        float v259 = 8191.0;
        if ((float)(v246 + v257) <= 8191.0)
        {
          float v259 = v246 + v257;
          if ((float)(v246 + v257) < 0.0) {
            float v259 = 0.0;
          }
        }
        float v260 = v248 + v257;
        BOOL v255 = (float)(v248 + v257) <= 8191.0;
        float v261 = 8191.0;
        if (v255)
        {
          float v261 = v260;
          if (v260 < 0.0) {
            float v261 = 0.0;
          }
        }
        float v262 = _S25 * (float)((float)(v95->u16[1] >> v70) - v391);
        float v263 = v241 + v262;
        float v264 = 8191.0;
        if (v263 <= 8191.0)
        {
          float v264 = v263;
          if (v263 < 0.0) {
            float v264 = 0.0;
          }
        }
        float v265 = v246 + v262;
        BOOL v255 = (float)(v246 + v262) <= 8191.0;
        float v266 = 8191.0;
        if (v255)
        {
          float v266 = v265;
          if (v265 < 0.0) {
            float v266 = 0.0;
          }
        }
        float v267 = v248 + v262;
        float v268 = 8191.0;
        if (v267 <= 8191.0)
        {
          float v268 = v267;
          if (v267 < 0.0) {
            float v268 = 0.0;
          }
        }
        _H16 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v244, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        _H27 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v247, 0.0), 8191.0))];
        __asm { FCVT            S27, H27 }
        _H30 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v250, 0.0), 8191.0))];
        __asm { FCVT            S30, H30 }
        _H31 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v252, 0.0), 8191.0))];
        __asm { FCVT            S31, H31 }
        _H1 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v253, 0.0), 8191.0))];
        _H3 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v256, 0.0), 8191.0))];
        __asm
        {
          FCVT            S1, H1
          FCVT            S3, H3
        }
        _H5 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v258, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        _H7 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v259, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H6 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v261, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        _H9 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v264, 0.0), 8191.0))];
        __asm { FCVT            S9, H9 }
        _H10 = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v266, 0.0), 8191.0))];
        __asm { FCVT            S10, H10 }
        float v291 = (float)((float)(v412 * _S27) + (float)(_S16 * v413)) + (float)(_S30 * v411);
        float v292 = (float)((float)(v408 * _S27) + (float)(_S16 * v410)) + (float)(_S30 * v407);
        _S16 = (float)((float)(v405 * _S27) + (float)(_S16 * v406)) + (float)(_S30 * v404);
        _S27 = (float)((float)(v412 * _S1) + (float)(_S31 * v413)) + (float)(_S3 * v411);
        float v295 = (float)((float)(v408 * _S1) + (float)(_S31 * v410)) + (float)(_S3 * v407);
        _S1 = (float)((float)(v405 * _S1) + (float)(_S31 * v406)) + (float)(_S3 * v404);
        _S3 = (float)((float)(v412 * _S7) + (float)(_S5 * v413)) + (float)(_S6 * v411);
        float v298 = (float)((float)(v408 * _S7) + (float)(_S5 * v410)) + (float)(_S6 * v407);
        _S5 = (float)((float)(v405 * _S7) + (float)(_S5 * v406)) + (float)(_S6 * v404);
        _S6 = (float)(v412 * _S10) + (float)(_S9 * v413);
        float v301 = (float)(v408 * _S10) + (float)(_S9 * v410);
        float v302 = (float)(v405 * _S10) + (float)(_S9 * v406);
        LOWORD(_S10) = *(_WORD *)&v44[2 * llroundf(fminf(fmaxf(v268, 0.0), 8191.0))];
        __asm { FCVT            S10, H10 }
        unsigned int v304 = llroundf(fminf(fmaxf(_S16, 0.0), 8191.0));
        LOWORD(_S16) = result->i16[llroundf(fminf(fmaxf(v291, 0.0), 8191.0))];
        unsigned int v305 = llroundf(fminf(fmaxf(_S1, 0.0), 8191.0));
        LOWORD(_S1) = result->i16[llroundf(fminf(fmaxf(v292, 0.0), 8191.0))];
        __asm
        {
          FCVT            S16, H16
          FCVT            S1, H1
        }
        unsigned int v308 = llroundf(fminf(fmaxf(_S3, 0.0), 8191.0));
        LOWORD(_S3) = result->i16[v304];
        unsigned int v309 = llroundf(fminf(fmaxf(v298, 0.0), 8191.0));
        __asm { FCVT            S3, H3 }
        LOWORD(_S27) = result->i16[llroundf(fminf(fmaxf(_S27, 0.0), 8191.0))];
        __asm { FCVT            S27, H27 }
        unsigned int v312 = llroundf(fminf(fmaxf(_S5, 0.0), 8191.0));
        LOWORD(_S5) = result->i16[llroundf(fminf(fmaxf(v295, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        unsigned int v314 = llroundf(fminf(fmaxf(_S6 + (float)(_S10 * v411), 0.0), 8191.0));
        LOWORD(_S6) = result->i16[v305];
        __asm { FCVT            S6, H6 }
        unsigned int v316 = llroundf(fminf(fmaxf(v301 + (float)(_S10 * v407), 0.0), 8191.0));
        unsigned int v317 = llroundf(fminf(fmaxf(v302 + (float)(_S10 * v404), 0.0), 8191.0));
        float v318 = (float)((float)((float)(v428 * _S1) + (float)(v429 * _S16)) + (float)(v430 * _S3)) + v43;
        if (v318 < v43) {
          float v319 = v43;
        }
        else {
          float v319 = (float)((float)((float)(v428 * _S1) + (float)(v429 * _S16)) + (float)(v430 * _S3)) + v43;
        }
        BOOL v255 = v318 <= v46;
        float v320 = (float)((float)((float)(v428 * _S5) + (float)(v429 * _S27)) + (float)(v430 * _S6)) + v43;
        if (!v255) {
          float v319 = v46;
        }
        __int8 v321 = llroundf(v319);
        if (v320 < v43) {
          float v322 = v43;
        }
        else {
          float v322 = (float)((float)((float)(v428 * _S5) + (float)(v429 * _S27)) + (float)(v430 * _S6)) + v43;
        }
        BOOL v255 = v320 <= v46;
        _H7 = result->i16[v308];
        if (!v255) {
          float v322 = v46;
        }
        __int8 v324 = llroundf(v322);
        _H30 = result->i16[v309];
        __asm
        {
          FCVT            S7, H7
          FCVT            S30, H30
        }
        _S16 = _S16 + _S27;
        _H27 = result->i16[v312];
        __asm { FCVT            S27, H27 }
        float v331 = _S1 + _S5;
        _H5 = result->i16[v314];
        __asm { FCVT            S5, H5 }
        float v334 = _S3 + _S6;
        float v335 = (float)(v434 + (float)(_S16 * *(float *)&v90)) + (float)(v331 * *(float *)&v91);
        float v336 = (float)(v434 + (float)(_S16 * *((float *)&v90 + 1))) + (float)(v331 * *((float *)&v91 + 1));
        LOWORD(_S16) = result->i16[v316];
        __asm { FCVT            S16, H16 }
        float v338 = v335 + (float)(v334 * *(float *)&v92);
        float v339 = v336 + (float)(v334 * *((float *)&v92 + 1));
        if (v338 < v421) {
          float v340 = v421;
        }
        else {
          float v340 = v338;
        }
        _H6 = result->i16[v317];
        __asm { FCVT            S6, H6 }
        if (!(_NF ^ _VF | _ZF)) {
          float v340 = v47;
        }
        char v343 = llroundf(v340);
        if (v339 < v421) {
          float v344 = v421;
        }
        else {
          float v344 = v339;
        }
        if (v339 <= v47) {
          float v345 = v344;
        }
        else {
          float v345 = v47;
        }
        char v346 = llroundf(v345);
        float v347 = (float)((float)((float)(v428 * _S30) + (float)(v429 * _S7)) + (float)(v430 * _S27)) + v43;
        if (v347 < v43) {
          float v348 = v43;
        }
        else {
          float v348 = (float)((float)((float)(v428 * _S30) + (float)(v429 * _S7)) + (float)(v430 * _S27)) + v43;
        }
        BOOL v255 = v347 <= v46;
        float v349 = (float)((float)((float)(v428 * _S16) + (float)(v429 * _S5)) + (float)(v430 * _S6)) + v43;
        if (!v255) {
          float v348 = v46;
        }
        __int8 v350 = llroundf(v348);
        if (v349 < v43) {
          float v351 = v43;
        }
        else {
          float v351 = (float)((float)((float)(v428 * _S16) + (float)(v429 * _S5)) + (float)(v430 * _S6)) + v43;
        }
        if (v349 <= v46) {
          float v352 = v351;
        }
        else {
          float v352 = v46;
        }
        __int8 v353 = llroundf(v352);
        float v354 = _S7 + _S5;
        v66->i8[0] = v321;
        v66->i8[1] = v324;
        *float v65 = v343;
        v65[1] = v346;
        v96->i8[0] = v350;
        v96->i8[1] = v353;
        float v355 = (float)(v434 + (float)((float)(_S7 + _S5) * *(float *)&v90))
             + (float)((float)(_S30 + _S16) * *(float *)&v91);
        float v356 = _S27 + _S6;
        float v357 = v355 + (float)((float)(_S27 + _S6) * *(float *)&v92);
        float v358 = v47;
        if (v357 <= v47)
        {
          float v358 = v357;
          if (v357 < v421) {
            float v358 = v421;
          }
        }
        float v359 = (float)((float)(v434 + (float)(v354 * *((float *)&v90 + 1)))
                     + (float)((float)(_S30 + _S16) * *((float *)&v91 + 1)))
             + (float)(v356 * *((float *)&v92 + 1));
        unsigned char *v97 = llroundf(v358);
        float v360 = v47;
        float v37 = v433;
        float16x8_t v93 = 0uLL;
        v94.i64[0] = 0x9000900090009000;
        v94.i64[1] = 0x9000900090009000;
        if (v359 <= v47)
        {
          float v360 = v359;
          if (v359 < v421) {
            float v360 = v421;
          }
        }
        v239 += 2;
        float16x8_t v99 = (uint16x8_t *)((char *)v99 + 4);
        float v69 = (uint16x8_t *)((char *)v69 + 4);
        float v95 = (uint16x8_t *)((char *)v95 + 4);
        float v66 = (int8x8_t *)((char *)v66 + 2);
        v97[1] = llroundf(v360);
        v65 += 2;
        uint64_t v96 = (int8x8_t *)((char *)v96 + 2);
        v97 += 2;
        float16x8_t v55 = v422;
        float16x8_t v88 = v424;
        float16x8_t v87 = v425;
        float16x8_t v89 = (float16x8_t)v426;
        float16x8_t v50 = v409;
      }
      float v69 = (uint16x8_t *)&v388[v32];
      v68 += v33;
      float v66 = (int8x8_t *)&v389[v34];
      float v65 = &v390[v35];
      v20 += 2;
      v71 += v72;
    }
    while (v24 > v20);
    if (v374 && v373)
    {
      uint64_t v361 = 0;
      unsigned int v362 = __b;
      float v363 = (unsigned __int16 *)v370;
      do
      {
        if (v21)
        {
          size_t v364 = v21;
          float v365 = v362;
          __int8 v366 = v363;
          do
          {
            unsigned int v367 = *v366++;
            *v365++ = llroundf((float)v367 * 0.0038911);
            --v364;
          }
          while (v364);
        }
        float v363 = (unsigned __int16 *)((char *)v363 + v371);
        v362 += v375;
        ++v361;
      }
      while (v361 != v24);
    }
    else
    {
      uint64_t v368 = v375;
      __int8 v369 = __b;
      if (v373)
      {
        do
        {
          if (v21)
          {
            result = (float32x2_t *)memset(v369, 255, v21);
            uint64_t v368 = v375;
          }
          v369 += v368;
          --v24;
        }
        while (v24);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Mat_TRC_422vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = 2 * *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    uint64_t v12 = *(void *)((char *)result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = result[14];
    unint64_t v15 = result[13] * a2 / v6;
    uint64_t v16 = (void *)result[16];
    uint64_t v17 = result[15] + 2 * v15;
    uint64_t v18 = result[19];
    uint64_t v19 = (void *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v202 = v20[2];
    uint64_t v205 = v19[2];
    uint64_t v24 = v205 + v202 * v12 + 2 * v11;
    uint64_t v25 = *v21;
    uint64_t v26 = v21[1];
    uint64_t v203 = v21[2];
    uint64_t v204 = v16[2];
    uint64_t v27 = (unsigned char *)(v204 + v203 * v17 + v14);
    float v28 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    float v29 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v30 = (float)LODWORD(a5);
    float v31 = v28 * *(float *)v18;
    float v215 = v28 * *(float *)(v18 + 16);
    float v216 = v28 * *(float *)(v18 + 8);
    float v32 = v28 * *(float *)(v18 + 20);
    *(float *)&unsigned int v33 = v28 * *(float *)(v18 + 28);
    float v213 = *(float *)&v33;
    float v214 = v32;
    LOWORD(v33) = *(_WORD *)(v18 + 144);
    float v34 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 146);
    float v35 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 148);
    float v36 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 150);
    float v37 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 152);
    float v38 = (float)v33;
    float v39 = *(float *)(v18 + 44);
    float v210 = *(float *)(v18 + 40);
    float v211 = *(float *)(v18 + 36);
    float v208 = *(float *)(v18 + 52) * 0.5;
    float v209 = *(float *)(v18 + 48) * 0.5;
    float v207 = *(float *)(v18 + 56) * 0.5;
    float v219 = *(float *)(v18 + 64) * 0.5;
    float v220 = *(float *)(v18 + 60) * 0.5;
    float v40 = *(float *)(v18 + 72);
    float v218 = *(float *)(v18 + 68) * 0.5;
    float v42 = *(float *)(v18 + 76);
    float v41 = *(float *)(v18 + 80);
    float v43 = *(float *)(v18 + 84);
    float v44 = *(float *)(v18 + 88);
    float v45 = *(float *)(v18 + 92);
    float v46 = *(float *)(v18 + 96);
    float v47 = *(float *)(v18 + 100);
    float v48 = *(float *)(v18 + 104);
    uint64_t v49 = v18 + 164;
    uint64_t v50 = v16[1];
    int16x4_t v51 = (unsigned char *)(*v16 + *v21 * v17 + v14);
    uint64_t v52 = v50 + v26 * v17 + v14;
    result = (void *)(v18 + 16548);
    if (!v50) {
      uint64_t v52 = 0;
    }
    unsigned int v53 = *(unsigned __int8 *)(v18 + 124);
    uint64_t v54 = v19[1];
    float16x8_t v55 = (char *)(*v19 + v22 * v12 + 2 * v11);
    if (v53 >= 0x11) {
      char v56 = 0;
    }
    else {
      char v56 = 16 - v53;
    }
    uint64_t v57 = v54 + v20[1] * (v12 / 2) + 2 * v11;
    char v58 = v56;
    float v217 = (float)LODWORD(a5);
    float v212 = v35;
    float v206 = v29;
    do
    {
      unsigned int v59 = &v55[v22];
      uint64_t v60 = v52 + v26;
      uint64_t v61 = &v51[v25];
      if (v10)
      {
        size_t v62 = 0;
        int16x8_t v63 = &v55[v22];
        unsigned int v64 = &v51[v25];
        do
        {
          float v65 = (unsigned __int16 *)(v57 + 2 * v62);
          float v66 = (float)(v65[1] >> v58) - v30;
          float v67 = v216 * v66;
          float v68 = v31 * (float)((float)(*(unsigned __int16 *)v55 >> v58) - v29);
          float v69 = (float)(v216 * v66) + v68;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = (float)(v216 * v66) + v68;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = (float)(*v65 >> v58) - v30;
          float v72 = (float)(v214 * v66) + (float)(v71 * v215);
          float v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            float v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v213 * v71;
          float v75 = (float)(v213 * v71) + v68;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v31 * (float)((float)(*((unsigned __int16 *)v55 + 1) >> v58) - v29);
          float v78 = 8191.0;
          if ((float)(v67 + v77) <= 8191.0)
          {
            float v78 = v67 + v77;
            if ((float)(v67 + v77) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            float v79 = v72 + v77;
            if ((float)(v72 + v77) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v74 + v77;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v31 * (float)((float)(*(unsigned __int16 *)v63 >> v58) - v29);
          float v83 = 8191.0;
          if ((float)(v67 + v82) <= 8191.0)
          {
            float v83 = v67 + v82;
            if ((float)(v67 + v82) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = 8191.0;
          if ((float)(v72 + v82) <= 8191.0)
          {
            float v84 = v72 + v82;
            if ((float)(v72 + v82) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v74 + v82;
          BOOL v86 = (float)(v74 + v82) <= 8191.0;
          float v87 = 8191.0;
          if (v86)
          {
            float v87 = v85;
            if (v85 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v31 * (float)((float)(*((unsigned __int16 *)v63 + 1) >> v58) - v29);
          float v89 = v67 + v88;
          float v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v72 + v88;
          BOOL v86 = (float)(v72 + v88) <= 8191.0;
          float v92 = 8191.0;
          if (v86)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v74 + v88;
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S4, H4
          }
          _H5 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          unsigned int v104 = llroundf(fminf(fmaxf(v78, 0.0), 8191.0));
          __asm { FCVT            S2, H5 }
          _H5 = *(_WORD *)(v49 + 2 * v104);
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H26 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H1 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H17 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H24 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v122 = llroundf(fminf(fmaxf(v94, 0.0), 8191.0));
          float v123 = (float)((float)(v42 * _S4) + (float)(_S3 * v40)) + (float)(_S2 * v41);
          float v124 = (float)((float)(v44 * _S4) + (float)(_S3 * v43)) + (float)(_S2 * v45);
          _S2 = (float)((float)(v47 * _S4) + (float)(_S3 * v46)) + (float)(_S2 * v48);
          _S3 = (float)((float)(v42 * _S6) + (float)(_S5 * v40)) + (float)(_S7 * v41);
          _S4 = (float)((float)(v44 * _S6) + (float)(_S5 * v43)) + (float)(_S7 * v45);
          _S5 = (float)((float)(v47 * _S6) + (float)(_S5 * v46)) + (float)(_S7 * v48);
          _S6 = (float)((float)(v42 * _S27) + (float)(_S26 * v40)) + (float)(_S1 * v41);
          float v130 = (float)((float)(v44 * _S27) + (float)(_S26 * v43)) + (float)(_S1 * v45);
          _S1 = (float)((float)(v47 * _S27) + (float)(_S26 * v46)) + (float)(_S1 * v48);
          float v132 = (float)(v42 * _S24) + (float)(_S17 * v40);
          float v133 = (float)(v44 * _S24) + (float)(_S17 * v43);
          float v134 = (float)(v47 * _S24) + (float)(_S17 * v46);
          LOWORD(_S24) = *(_WORD *)(v49 + 2 * v122);
          __asm { FCVT            S24, H24 }
          unsigned int v136 = llroundf(fminf(fmaxf(_S2, 0.0), 8191.0));
          unsigned int v137 = llroundf(fminf(fmaxf(_S3, 0.0), 8191.0));
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          unsigned int v138 = llroundf(fminf(fmaxf(_S4, 0.0), 8191.0));
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S3, H3
          }
          unsigned int v141 = llroundf(fminf(fmaxf(_S5, 0.0), 8191.0));
          LOWORD(_S4) = *((_WORD *)result + v136);
          unsigned int v142 = llroundf(fminf(fmaxf(_S6, 0.0), 8191.0));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *((_WORD *)result + v137);
          __asm { FCVT            S5, H5 }
          unsigned int v145 = llroundf(fminf(fmaxf(v130, 0.0), 8191.0));
          LOWORD(_S6) = *((_WORD *)result + v138);
          __asm { FCVT            S6, H6 }
          unsigned int v147 = llroundf(fminf(fmaxf(_S1, 0.0), 8191.0));
          LOWORD(_S1) = *((_WORD *)result + v141);
          __asm { FCVT            S1, H1 }
          unsigned int v149 = llroundf(fminf(fmaxf(v132 + (float)(_S24 * v41), 0.0), 8191.0));
          _H7 = *((_WORD *)result + v142);
          unsigned int v151 = llroundf(fminf(fmaxf(v133 + (float)(_S24 * v45), 0.0), 8191.0));
          unsigned int v152 = llroundf(fminf(fmaxf(v134 + (float)(_S24 * v48), 0.0), 8191.0));
          float v153 = (float)((float)((float)(v210 * _S3) + (float)(v211 * _S2)) + (float)(v39 * _S4)) + v34;
          if (v153 < v34) {
            float v154 = v34;
          }
          else {
            float v154 = (float)((float)((float)(v210 * _S3) + (float)(v211 * _S2)) + (float)(v39 * _S4)) + v34;
          }
          BOOL v86 = v153 <= v36;
          float v155 = (float)((float)((float)(v210 * _S6) + (float)(v211 * _S5)) + (float)(v39 * _S1)) + v34;
          if (!v86) {
            float v154 = v36;
          }
          char v156 = llroundf(v154);
          if (v155 < v34) {
            float v157 = v34;
          }
          else {
            float v157 = (float)((float)((float)(v210 * _S6) + (float)(v211 * _S5)) + (float)(v39 * _S1)) + v34;
          }
          if (v155 <= v36) {
            float v158 = v157;
          }
          else {
            float v158 = v36;
          }
          char v159 = llroundf(v158);
          _H17 = *((_WORD *)result + v145);
          __asm
          {
            FCVT            S7, H7
            FCVT            S17, H17
          }
          float v163 = _S2 + _S5;
          _H5 = *((_WORD *)result + v147);
          __asm { FCVT            S5, H5 }
          _S3 = _S3 + _S6;
          _H6 = *((_WORD *)result + v149);
          __asm { FCVT            S6, H6 }
          float v169 = _S4 + _S1;
          float v170 = (float)(v212 + (float)(v163 * v209)) + (float)(_S3 * v208);
          float v171 = (float)(v212 + (float)(v163 * v220)) + (float)(_S3 * v219);
          LOWORD(_S3) = *((_WORD *)result + v151);
          __asm { FCVT            S3, H3 }
          float v173 = v170 + (float)(v169 * v207);
          float v174 = v171 + (float)(v169 * v218);
          if (v173 < v37) {
            float v175 = v37;
          }
          else {
            float v175 = v173;
          }
          _H4 = *((_WORD *)result + v152);
          __asm { FCVT            S4, H4 }
          if (!(_NF ^ _VF | _ZF)) {
            float v175 = v38;
          }
          char v178 = llroundf(v175);
          if (v174 < v37) {
            float v179 = v37;
          }
          else {
            float v179 = v174;
          }
          if (v174 <= v38) {
            float v180 = v179;
          }
          else {
            float v180 = v38;
          }
          char v181 = llroundf(v180);
          float v182 = (float)((float)((float)(v210 * _S17) + (float)(v211 * _S7)) + (float)(v39 * _S5)) + v34;
          if (v182 < v34) {
            float v183 = v34;
          }
          else {
            float v183 = (float)((float)((float)(v210 * _S17) + (float)(v211 * _S7)) + (float)(v39 * _S5)) + v34;
          }
          BOOL v86 = v182 <= v36;
          float v184 = (float)((float)((float)(v210 * _S3) + (float)(v211 * _S6)) + (float)(v39 * _S4)) + v34;
          if (!v86) {
            float v183 = v36;
          }
          char v185 = llroundf(v183);
          if (v184 < v34) {
            float v186 = v34;
          }
          else {
            float v186 = (float)((float)((float)(v210 * _S3) + (float)(v211 * _S6)) + (float)(v39 * _S4)) + v34;
          }
          if (v184 <= v36) {
            float v187 = v186;
          }
          else {
            float v187 = v36;
          }
          char v188 = llroundf(v187);
          float v189 = _S7 + _S6;
          *int16x4_t v51 = v156;
          v51[1] = v159;
          *(unsigned char *)(v52 + v62 + 1) = v181;
          *(unsigned char *)(v52 + v62) = v178;
          *unsigned int v64 = v185;
          v64[1] = v188;
          float v190 = _S17 + _S3;
          float v191 = (float)(v212 + (float)((float)(_S7 + _S6) * v209)) + (float)((float)(_S17 + _S3) * v208);
          float v192 = _S5 + _S4;
          float v193 = v191 + (float)((float)(_S5 + _S4) * v207);
          float v194 = v38;
          if (v193 <= v38)
          {
            float v194 = v193;
            if (v193 < v37) {
              float v194 = v37;
            }
          }
          float v195 = (float)((float)(v212 + (float)(v189 * v220)) + (float)(v190 * v219)) + (float)(v192 * v218);
          *(unsigned char *)(v60 + v62) = llroundf(v194);
          float v196 = v38;
          float v29 = v206;
          if (v195 <= v38)
          {
            float v196 = v195;
            if (v195 < v37) {
              float v196 = v37;
            }
          }
          v55 += 4;
          v63 += 4;
          v51 += 2;
          v64 += 2;
          *(unsigned char *)(v60 + v62 + 1) = llroundf(v196);
          v62 += 2;
          float v30 = v217;
        }
        while (v10 > v62);
      }
      float16x8_t v55 = &v59[v22];
      v57 += v23;
      int16x4_t v51 = &v61[v25];
      uint64_t v52 = v60 + v26;
      v9 += 2;
    }
    while (v13 > v9);
    if (v205 && v204)
    {
      uint64_t v197 = 0;
      do
      {
        if (v10)
        {
          size_t v198 = v10;
          uint64_t v199 = v27;
          char v200 = (unsigned __int16 *)v24;
          do
          {
            unsigned int v201 = *v200++;
            *v199++ = llroundf((float)v201 * 0.0038911);
            --v198;
          }
          while (v198);
        }
        v24 += v202;
        v27 += v203;
        ++v197;
      }
      while (v197 != v13);
    }
    else if (v204)
    {
      do
      {
        if (v10) {
          result = memset(v27, 255, v10);
        }
        v27 += v203;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_422vf_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_422vf_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = 2 * *result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    size_t v12 = *(void *)(result + 20);
    uint64_t v13 = *(void *)(result + 36);
    uint64_t v14 = *(void *)(result + 44) + 2 * v9;
    unint64_t v15 = 2 * v10 - 2 * v9;
    uint64_t v16 = *((void *)result + 14);
    uint64_t v17 = (void *)*((void *)result + 16);
    uint64_t v18 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v8);
    uint64_t v19 = (float32x2_t *)*((void *)result + 19);
    uint64_t v20 = (uint64_t *)*((void *)result + 7);
    uint64_t v21 = (uint64_t *)*((void *)result + 8);
    size_t v22 = (uint64_t *)*((void *)result + 17);
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v184 = v21[2];
    uint64_t v186 = v20[2];
    uint64_t v25 = *v22;
    uint64_t v26 = v22[1];
    uint64_t v27 = v22[2];
    uint64_t v185 = v17[2];
    uint64_t v28 = (unsigned char *)(v185 + v27 * v18 + v16);
    LODWORD(v22) = v19[17].u16[2];
    unsigned int v29 = v19[17].u16[3];
    v30.i32[0] = v19[3].i32[1];
    unsigned int v31 = v19[18].u16[0];
    unsigned int v32 = v19[18].u16[1];
    unsigned int v33 = v19[18].u16[2];
    unsigned int v34 = v19[18].u16[3];
    unsigned int v35 = v19[19].u16[0];
    LODWORD(_D0) = v19[4].i32[1];
    _S1 = v19[5].f32[0];
    _S2 = v19[5].f32[1];
    v3.i32[0] = v19[6].i32[0];
    v39.i32[0] = v19[6].i32[1];
    v38.i32[0] = v19[7].i32[0];
    float v40 = (float)v22;
    *(short float *)v4.i16 = (short float)v22;
    float v201 = (float)v29;
    uint64_t v41 = v186 + v184 * v14 + 2 * v13;
    float v42 = (float)v19[17].u32[0] / (float)v19[16].u32[0];
    float v43 = (float)v31;
    float v44 = (float)v32;
    float v45 = (float)v33;
    float v46 = (float)v34;
    _S17 = v42 * v19->f32[0];
    float v48 = (float)v35;
    __asm { FCVT            H8, S17 }
    float16x8_t v54 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v4.f32, 0);
    v30.i32[1] = v19[1].i32[0];
    *(float32x2_t *)v4.f32 = vmul_n_f32(v30, v42);
    short float v55 = -(short float)v29;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    *(float32x2_t *)v5.f32 = vmul_n_f32(v19[2], v42);
    *(double *)&v63.i64[1] = _D0;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v58 = vmulq_n_f16(v56, v55);
    float16x8_t v59 = vmulq_n_f16(v57, v55);
    __asm { FCVT            H14, S0 }
    v3.i32[1] = v19[7].i32[1];
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, (float32x2_t)0x3F0000003F000000);
    float16x8_t v61 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    v39.i32[1] = v19[8].i32[0];
    *(float32x2_t *)v6.f32 = vmul_f32(v39, (float32x2_t)0x3F0000003F000000);
    float16x8_t v62 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    v38.i32[1] = v19[8].i32[1];
    *(float32x2_t *)v63.f32 = vmul_f32(v38, (float32x2_t)0x3F0000003F000000);
    int16x4_t v64 = (int16x4_t)vcvt_f16_f32(v63);
    __asm { FCVT            H9, S1 }
    short float v203 = _H9;
    int32x4_t v66 = vdupq_lane_s32((int32x2_t)v64, 0);
    *(short float *)v64.i16 = (short float)v31;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(v64, 0);
    *(short float *)v64.i16 = (short float)v32;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(v64, 0);
    *(short float *)v64.i16 = (short float)v33;
    int16x8_t v69 = vdupq_lane_s16(v64, 0);
    *(short float *)v64.i16 = (short float)v34;
    int16x8_t v70 = vdupq_lane_s16(v64, 0);
    float16x8_t v198 = (float16x8_t)v70;
    *(short float *)v70.i16 = (short float)v35;
    _Q4 = vdupq_lane_s16(*(int16x4_t *)v70.i8, 0);
    float16x8_t v202 = (float16x8_t)_Q4;
    unsigned int v72 = v19[15].u8[4];
    if (v72 >= 0x11) {
      unsigned __int8 v73 = 0;
    }
    else {
      unsigned __int8 v73 = 16 - v72;
    }
    float v76 = v17;
    uint64_t v75 = *v17;
    uint64_t v74 = v76[1];
    if (v74) {
      result = (unsigned __int8 *)(v74 + v26 * v18 + v16);
    }
    else {
      result = 0;
    }
    float v77 = (int8x8_t *)(v75 + v25 * v18 + v16);
    if (v14 >= 0) {
      uint64_t v78 = v14;
    }
    else {
      uint64_t v78 = v14 + 1;
    }
    uint64_t v79 = *v20;
    uint64_t v80 = v20[1] + v24 * (v78 >> 1) + 2 * v13;
    float v81 = (uint16x8_t *)(v79 + v23 * v14 + 2 * v13);
    unsigned __int8 v82 = v73;
    float v83 = &result[v26];
    uint16x8_t v84 = (uint16x8_t)vdupq_n_s16(-v73);
    __asm { FCVT            H4, S2 }
    float v199 = v5.f32[0];
    float v200 = v4.f32[0];
    float32_t v190 = v5.f32[1];
    uint64_t v85 = v3.i64[0];
    uint64_t v86 = v6.i64[0];
    float v87 = v4.f32[1];
    uint64_t v88 = v63.i64[0];
    short float v196 = _H14;
    float16x8_t v197 = v59;
    float16x8_t v194 = v62;
    float16x8_t v195 = v61;
    float16x8_t v192 = v68;
    int32x4_t v193 = v66;
    int16x8_t v191 = v69;
    float32_t v188 = v4.f32[1];
    int v189 = LODWORD(_D0);
    float v187 = _S1;
    do
    {
      float v89 = &v81->i8[v23];
      float v90 = (char *)v77 + v25;
      float v91 = &result[v26];
      if ((int)v12 < 8)
      {
        size_t v124 = 0;
        float v123 = &result[v26];
        float v95 = (char *)v77 + v25;
        float v94 = (uint16x8_t *)v80;
        float v93 = (uint16x8_t *)((char *)v81 + v23);
        float v125 = v190;
      }
      else
      {
        uint64_t v92 = 0;
        float v93 = (uint16x8_t *)((char *)v81 + v23);
        float v94 = (uint16x8_t *)v80;
        float v95 = (char *)v77 + v25;
        float16x8_t v96 = (float16x8_t)v66;
        float16x8_t v97 = (float16x8_t)v69;
        do
        {
          uint16x8_t v98 = *v94++;
          float16x8_t v99 = vcvtq_f16_u16(vshlq_u16(v98, v84));
          int8x16_t v100 = (int8x16_t)vmlaq_f16(v58, v56, v99);
          int8x16_t v101 = (int8x16_t)vmlaq_f16(v59, v57, v99);
          v99.i64[0] = vextq_s8(v100, v100, 8uLL).u64[0];
          *(int16x4_t *)v102.i8 = vuzp1_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          *(int16x4_t *)v99.i8 = vuzp2_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          v99.i64[1] = _Q4.i64[0];
          v102.i64[1] = _Q4.i64[0];
          int16x4_t v103 = (int16x4_t)vextq_s8(v101, v101, 8uLL).u64[0];
          float16x8_t v104 = (float16x8_t)vzip1q_s16((int16x8_t)v99, (int16x8_t)v99);
          *(float16x4_t *)v99.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v101.i8, v103), (float16x4_t)vuzp2_s16(*(int16x4_t *)v101.i8, v103));
          v99.i64[1] = _Q4.i64[0];
          float16x8_t v105 = (float16x8_t)vzip1q_s16(v102, v102);
          uint16x8_t v106 = *v81++;
          uint16x8_t v107 = vshlq_u16(v106, v84);
          uint16x8_t v108 = *v93++;
          float16x8_t v109 = (float16x8_t)vzip1q_s16((int16x8_t)v99, (int16x8_t)v99);
          float16x8_t v110 = vsubq_f16(vcvtq_f16_u16(v107), v54);
          float16x8_t v111 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v108, v84)), v54);
          float16x8_t v112 = v59;
          float16x8_t v113 = vmlaq_n_f16(v104, v110, _H8);
          float16x8_t v114 = vmlaq_n_f16(v104, v111, _H8);
          float16x8_t v115 = vmlaq_n_f16(v109, v110, _H8);
          float16x8_t v116 = vmlaq_n_f16(v109, v111, _H8);
          float16x8_t v117 = vmlaq_n_f16(v105, v110, _H8);
          float16x8_t v118 = vmlaq_n_f16(v105, v111, _H8);
          int16x8_t v119 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v113, (int16x8_t)v115), (float16x8_t)vuzp2q_s16((int16x8_t)v113, (int16x8_t)v115));
          int16x8_t v120 = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v113, _H14), v115, v203), v117, *(short float *)_Q4.i16), v67), v97));
          float16x8_t v121 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v68, v61, (float16x8_t)vzip1q_s16(v119, v119)), v62, (float16x8_t)vzip2q_s16(v119, v119)), v96, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v117, (int16x8_t)v117), (float16x8_t)vtrn2q_s16((int16x8_t)v117, (int16x8_t)v117)));
          *v77++ = vmovn_s16(v120);
          *(int8x8_t *)v119.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v114, _H14), v116, v203), v118, *(short float *)_Q4.i16), v67), v97)));
          int16x8_t v122 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v114, (int16x8_t)v116), (float16x8_t)vuzp2q_s16((int16x8_t)v114, (int16x8_t)v116));
          *(int8x8_t *)&result[v92] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, v198), v202)));
          float16x8_t v59 = v112;
          *(void *)float v95 = v119.i64[0];
          v95 += 8;
          *(int8x8_t *)&v83[v92] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v68, v61, (float16x8_t)vzip1q_s16(v122, v122)), v62, (float16x8_t)vzip2q_s16(v122, v122)), v96, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v118, (int16x8_t)v118), (float16x8_t)vtrn2q_s16((int16x8_t)v118, (int16x8_t)v118))), v198),
                                                            v202)));
          v92 += 8;
        }
        while ((int)v92 < (int)v12 - 7);
        result += v92;
        float v123 = &v83[v92];
        size_t v124 = v12 & 0xFFFFFFF8;
        float v87 = v188;
        LODWORD(_D0) = v189;
        float v125 = v190;
        _S1 = v187;
      }
      while (v12 > v124)
      {
        float16x8_t v126 = v58;
        float16x8_t v127 = v57;
        float16x8_t v128 = v56;
        float16x8_t v129 = v54;
        float v130 = (float)(v94->u16[0] >> v82) - v201;
        float v131 = (float)(v94->u16[1] >> v82) - v201;
        float v132 = v87 * v131;
        float v133 = (float)(v125 * v131) + (float)(v130 * v199);
        float v134 = v200 * v130;
        float v135 = _S17 * (float)((float)(v81->u16[0] >> v82) - v40);
        float v136 = _S17 * (float)((float)(v81->u16[1] >> v82) - v40);
        float v137 = v132 + v135;
        float v138 = v135 + v133;
        float v139 = v134 + v135;
        float v140 = v132 + v136;
        float v141 = v133 + v136;
        float v142 = v134 + v136;
        float v143 = (float)((float)((float)(_S1 * v138) + (float)(*(float *)&_D0 * v137)) + (float)(_S2 * v139)) + v43;
        if (v143 < v43) {
          float v144 = v43;
        }
        else {
          float v144 = (float)((float)((float)(_S1 * v138) + (float)(*(float *)&_D0 * v137)) + (float)(_S2 * v139)) + v43;
        }
        BOOL v145 = v143 <= v45;
        float v146 = (float)((float)((float)(_S1 * v141) + (float)(*(float *)&_D0 * v140)) + (float)(_S2 * v142)) + v43;
        if (!v145) {
          float v144 = v45;
        }
        __int8 v147 = llroundf(v144);
        if (v146 < v43) {
          float v148 = v43;
        }
        else {
          float v148 = (float)((float)((float)(_S1 * v141) + (float)(*(float *)&_D0 * v140)) + (float)(_S2 * v142)) + v43;
        }
        if (v146 > v45) {
          float v148 = v45;
        }
        __int8 v149 = llroundf(v148);
        float v150 = v137 + v140;
        float v151 = (float)(v93->u16[0] >> v82);
        float v152 = v138 + v141;
        unsigned int v153 = v93->u16[1];
        v77->i8[0] = v147;
        float v154 = _S17 * (float)(v151 - v40);
        float v155 = v139 + v142;
        float v156 = v132 + v154;
        float v157 = (float)((float)(v44 + (float)(v150 * *(float *)&v85)) + (float)(v152 * *(float *)&v86))
             + (float)(v155 * *(float *)&v88);
        float v158 = (float)((float)(v44 + (float)(v150 * *((float *)&v85 + 1))) + (float)(v152 * *((float *)&v86 + 1)))
             + (float)(v155 * *((float *)&v88 + 1));
        if (v157 < v46) {
          float v159 = (float)v34;
        }
        else {
          float v159 = v157;
        }
        BOOL v145 = v157 <= v48;
        float v160 = v133 + v154;
        float v161 = v134 + v154;
        v77->i8[1] = v149;
        if (!v145) {
          float v159 = v48;
        }
        void *result = llroundf(v159);
        if (v158 < v46) {
          float v162 = (float)v34;
        }
        else {
          float v162 = v158;
        }
        if (v158 <= v48) {
          float v163 = v162;
        }
        else {
          float v163 = v48;
        }
        result[1] = llroundf(v163);
        float v164 = (float)((float)((float)(_S1 * v160) + (float)(*(float *)&_D0 * v156)) + (float)(_S2 * v161)) + v43;
        float v165 = v45;
        if (v164 <= v45)
        {
          float v165 = (float)((float)((float)(_S1 * v160) + (float)(*(float *)&_D0 * v156)) + (float)(_S2 * v161)) + v43;
          if (v164 < v43) {
            float v165 = v43;
          }
        }
        float v166 = _S17 * (float)((float)(int)(v153 >> v82) - v40);
        float v167 = v132 + v166;
        float v168 = v133 + v166;
        float v169 = v134 + v166;
        float v170 = (float)((float)((float)(_S1 * v168) + (float)(*(float *)&_D0 * v167)) + (float)(_S2 * v169)) + v43;
        *float v95 = llroundf(v165);
        float v171 = v45;
        if (v170 <= v45)
        {
          float v171 = (float)((float)((float)(_S1 * v168) + (float)(*(float *)&_D0 * v167)) + (float)(_S2 * v169)) + v43;
          if (v170 < v43) {
            float v171 = v43;
          }
        }
        v95[1] = llroundf(v171);
        float v172 = v156 + v167;
        float v173 = v160 + v168;
        float v174 = v161 + v169;
        float v175 = (float)((float)(v44 + (float)((float)(v156 + v167) * *(float *)&v85)) + (float)(v173 * *(float *)&v86))
             + (float)(v174 * *(float *)&v88);
        float v176 = v48;
        float16x8_t v54 = v129;
        float16x8_t v56 = v128;
        float16x8_t v57 = v127;
        if (v175 <= v48)
        {
          float v176 = v175;
          if (v175 < v46) {
            float v176 = (float)v34;
          }
        }
        float v177 = (float)((float)(v44 + (float)(v172 * *((float *)&v85 + 1))) + (float)(v173 * *((float *)&v86 + 1)))
             + (float)(v174 * *((float *)&v88 + 1));
        *float v123 = llroundf(v176);
        float v178 = v48;
        float16x8_t v58 = v126;
        if (v177 <= v48)
        {
          float v178 = v177;
          if (v177 < v46) {
            float v178 = (float)v34;
          }
        }
        v124 += 2;
        float v94 = (uint16x8_t *)((char *)v94 + 4);
        float v81 = (uint16x8_t *)((char *)v81 + 4);
        float v93 = (uint16x8_t *)((char *)v93 + 4);
        float v77 = (int8x8_t *)((char *)v77 + 2);
        v123[1] = llroundf(v178);
        result += 2;
        v95 += 2;
        v123 += 2;
      }
      float v81 = (uint16x8_t *)&v89[v23];
      v80 += v24;
      float v77 = (int8x8_t *)&v90[v25];
      result = &v91[v26];
      v11 += 2;
      v83 += 2 * v26;
      _H14 = v196;
      float16x8_t v59 = v197;
      float16x8_t v62 = v194;
      float16x8_t v61 = v195;
      float16x8_t v68 = v192;
      int32x4_t v66 = v193;
      int16x8_t v69 = v191;
    }
    while (v15 > v11);
    if (v186 && v185)
    {
      uint64_t v179 = 0;
      do
      {
        if (v12)
        {
          size_t v180 = v12;
          char v181 = v28;
          float v182 = (unsigned __int16 *)v41;
          do
          {
            unsigned int v183 = *v182++;
            *v181++ = llroundf((float)v183 * 0.0038911);
            --v180;
          }
          while (v180);
        }
        v41 += v184;
        v28 += v27;
        ++v179;
      }
      while (v179 != v15);
    }
    else if (v185)
    {
      do
      {
        if (v12) {
          result = (unsigned __int8 *)memset(v28, 255, v12);
        }
        v28 += v27;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_422vf_GCD);
  return 0;
}

void *vt_Copy_xf420_rgb_422vf_GCD(void *result, uint64_t a2)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    uint64_t v13 = *(void *)((char *)result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (void *)result[16];
    uint64_t v17 = result[15] + 2 * (result[13] * a2 / v7);
    uint64_t v18 = result[19];
    uint64_t v19 = (void *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = *v21;
    uint64_t v27 = v21[1];
    uint64_t v28 = v21[2];
    uint64_t v29 = v16[1];
    uint64_t v30 = v16[2];
    uint64_t v31 = (unsigned char *)(v30 + v28 * v17 + v15);
    uint64_t v32 = (unsigned char *)(*v16 + v26 * v17 + v15);
    result = (void *)(v29 + v27 * v17 + v15);
    uint64_t v33 = v25 + v24 * v13 + 2 * v12;
    *(float *)&unsigned int v34 = (float)*(unsigned int *)(v18 + 128);
    *(float *)&unsigned int v35 = (float)*(unsigned int *)(v18 + 136);
    float v36 = *(float *)&v35 / *(float *)&v34;
    LOWORD(v34) = *(_WORD *)(v18 + 140);
    float v37 = (float)v34;
    LOWORD(v35) = *(_WORD *)(v18 + 142);
    float v38 = (float)v35;
    float v39 = v36 * *(float *)v18;
    float v40 = v36 * *(float *)(v18 + 8);
    float v41 = v36 * *(float *)(v18 + 16);
    float v42 = v36 * *(float *)(v18 + 20);
    float v43 = *(float *)(v18 + 28);
    float v44 = v36 * v43;
    LOWORD(v43) = *(_WORD *)(v18 + 144);
    float v45 = (float)LODWORD(v43);
    LOWORD(v2) = *(_WORD *)(v18 + 146);
    float v46 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v18 + 148);
    float v47 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v18 + 150);
    float v48 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v18 + 152);
    float v49 = (float)v5;
    float v50 = *(float *)(v18 + 36);
    float v51 = *(float *)(v18 + 40);
    float v52 = *(float *)(v18 + 44);
    float v53 = *(float *)(v18 + 48) * 0.5;
    float v54 = *(float *)(v18 + 52) * 0.5;
    float v55 = *(float *)(v18 + 56) * 0.5;
    float v56 = *(float *)(v18 + 60) * 0.5;
    float v57 = *(float *)(v18 + 64) * 0.5;
    float v58 = *(float *)(v18 + 68) * 0.5;
    if (!v29) {
      result = 0;
    }
    unsigned int v59 = *(unsigned __int8 *)(v18 + 124);
    uint64_t v60 = v19[1];
    float16x8_t v61 = (char *)(*v19 + v22 * v13 + 2 * v12);
    if (v59 >= 0x11) {
      char v62 = 0;
    }
    else {
      char v62 = 16 - v59;
    }
    uint64_t v63 = v60 + v23 * (v13 / 2) + 2 * v12;
    char v64 = v62;
    uint64_t v65 = (uint64_t)result + v27 + 1;
    do
    {
      int32x4_t v66 = &v61[v22];
      float16x8_t v67 = &v32[v26];
      if (v11)
      {
        size_t v68 = 0;
        int16x8_t v69 = &v61[v22];
        int16x8_t v70 = &v32[v26];
        do
        {
          float v71 = (unsigned __int16 *)(v63 + 2 * v68);
          float v72 = (float)(*v71 >> v64) - v38;
          float v73 = (float)(v71[1] >> v64) - v38;
          float v74 = v40 * v73;
          float v75 = (float)(v42 * v73) + (float)(v72 * v41);
          float v76 = v44 * v72;
          float v77 = v39 * (float)((float)(*(unsigned __int16 *)v61 >> v64) - v37);
          float v78 = v39 * (float)((float)(*((unsigned __int16 *)v61 + 1) >> v64) - v37);
          float v79 = v74 + v77;
          float v80 = v77 + v75;
          float v81 = v76 + v77;
          float v82 = v74 + v78;
          float v83 = v75 + v78;
          float v84 = v76 + v78;
          float v85 = (float)((float)((float)(v51 * v80) + (float)(v50 * v79)) + (float)(v52 * v81)) + v45;
          if (v85 < v45) {
            float v86 = v45;
          }
          else {
            float v86 = (float)((float)((float)(v51 * v80) + (float)(v50 * v79)) + (float)(v52 * v81)) + v45;
          }
          BOOL v87 = v85 <= v47;
          float v88 = (float)((float)((float)(v51 * v83) + (float)(v50 * v82)) + (float)(v52 * v84)) + v45;
          if (!v87) {
            float v86 = v47;
          }
          char v89 = llroundf(v86);
          if (v88 < v45) {
            float v90 = v45;
          }
          else {
            float v90 = (float)((float)((float)(v51 * v83) + (float)(v50 * v82)) + (float)(v52 * v84)) + v45;
          }
          if (v88 <= v47) {
            float v91 = v90;
          }
          else {
            float v91 = v47;
          }
          char v92 = llroundf(v91);
          float v93 = v79 + v82;
          float v94 = v80 + v83;
          float v95 = v39 * (float)((float)(*(unsigned __int16 *)v69 >> v64) - v37);
          unsigned int v96 = *((unsigned __int16 *)v69 + 1);
          float v97 = v81 + v84;
          float v98 = (float)(v46 + (float)(v93 * v53)) + (float)(v94 * v54);
          float v99 = (float)(v46 + (float)(v93 * v56)) + (float)(v94 * v57);
          float v100 = v74 + v95;
          float v101 = v98 + (float)(v97 * v55);
          float v102 = v99 + (float)(v97 * v58);
          if (v101 < v48) {
            float v103 = v48;
          }
          else {
            float v103 = v101;
          }
          float v104 = v75 + v95;
          float v105 = v76 + v95;
          *uint64_t v32 = v89;
          v32[1] = v92;
          if (v101 <= v49) {
            float v106 = v103;
          }
          else {
            float v106 = v49;
          }
          *((unsigned char *)result + v68) = llroundf(v106);
          if (v102 < v48) {
            float v107 = v48;
          }
          else {
            float v107 = v102;
          }
          if (v102 > v49) {
            float v107 = v49;
          }
          *((unsigned char *)result + v68 + 1) = llroundf(v107);
          float v108 = (float)((float)((float)(v51 * v104) + (float)(v50 * v100)) + (float)(v52 * v105)) + v45;
          float v109 = v47;
          if (v108 <= v47)
          {
            float v109 = (float)((float)((float)(v51 * v104) + (float)(v50 * v100)) + (float)(v52 * v105)) + v45;
            if (v108 < v45) {
              float v109 = v45;
            }
          }
          float v110 = v39 * (float)((float)(int)(v96 >> v64) - v37);
          float v111 = v74 + v110;
          float v112 = v75 + v110;
          float v113 = v76 + v110;
          float v114 = (float)((float)((float)(v51 * v112) + (float)(v50 * v111)) + (float)(v52 * (float)(v76 + v110))) + v45;
          *int16x8_t v70 = llroundf(v109);
          float v115 = v47;
          if (v114 <= v47)
          {
            float v115 = v114;
            if (v114 < v45) {
              float v115 = v45;
            }
          }
          v70[1] = llroundf(v115);
          float v116 = v100 + v111;
          float v117 = v104 + v112;
          float v118 = v105 + v113;
          float v119 = (float)((float)(v46 + (float)((float)(v100 + v111) * v53)) + (float)(v117 * v54)) + (float)(v118 * v55);
          float v120 = v49;
          if (v119 <= v49)
          {
            float v120 = v119;
            if (v119 < v48) {
              float v120 = v48;
            }
          }
          float v121 = (float)((float)(v46 + (float)(v116 * v56)) + (float)(v117 * v57)) + (float)(v118 * v58);
          *(unsigned char *)(v65 + v68 - 1) = llroundf(v120);
          float v122 = v49;
          if (v121 <= v49)
          {
            float v122 = v121;
            if (v121 < v48) {
              float v122 = v48;
            }
          }
          v61 += 4;
          v69 += 4;
          v32 += 2;
          v70 += 2;
          *(unsigned char *)(v65 + v68) = llroundf(v122);
          v68 += 2;
        }
        while (v11 > v68);
      }
      float16x8_t v61 = &v66[v22];
      v63 += v23;
      uint64_t v32 = &v67[v26];
      result = (void *)((char *)result + v27 + v27);
      v10 += 2;
      v65 += 2 * v27;
    }
    while (v14 > v10);
    if (v25 && v30)
    {
      uint64_t v123 = 0;
      do
      {
        if (v11)
        {
          size_t v124 = v11;
          float v125 = v31;
          float16x8_t v126 = (unsigned __int16 *)v33;
          do
          {
            unsigned int v127 = *v126++;
            *v125++ = llroundf((float)v127 * 0.0038911);
            --v124;
          }
          while (v124);
        }
        v33 += v24;
        v31 += v28;
        ++v123;
      }
      while (v123 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          result = memset(v31, 255, v11);
        }
        v31 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Tone_Mat_TRC_2vuyf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = v6 * a2;
  unint64_t v8 = 2 * *(unsigned __int8 *)result;
  unint64_t v9 = (v6 + v6 * a2) / v8;
  uint64_t v10 = result[14];
  uint64_t v11 = (void *)result[16];
  uint64_t v12 = result[15] + 2 * (result[13] * a2 / v8);
  uint64_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (unsigned char *)(v15 + v14 * v12 + v10);
  unint64_t v17 = v7 / v8;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v10);
  }
  else {
    uint64_t v18 = 0;
  }
  if (2 * v9 != 2 * v17)
  {
    unint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    uint64_t v22 = *(void *)((char *)result + 44) + 2 * v17;
    unint64_t v23 = 2 * v9 - 2 * v17;
    uint64_t v24 = result[19];
    uint64_t v25 = (uint64_t *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v230 = v25[2];
    uint64_t v30 = v230 + v29 * v22 + 2 * v21;
    uint64_t v31 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a6);
    float v35 = v32 * *(float *)v24;
    float v254 = v32 * *(float *)(v24 + 16);
    float v255 = v32 * *(float *)(v24 + 8);
    float v36 = v32 * *(float *)(v24 + 20);
    *(float *)&unsigned int v37 = v32 * *(float *)(v24 + 28);
    float v252 = *(float *)&v37;
    float v253 = v36;
    LOWORD(v37) = *(_WORD *)(v24 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v24 + 48) * 0.5;
    float v44 = *(float *)(v24 + 56) * 0.5;
    float v45 = *(float *)(v24 + 60) * 0.5;
    float v247 = *(float *)(v24 + 72);
    float v244 = *(float *)(v24 + 80);
    float v245 = *(float *)(v24 + 76);
    float v242 = *(float *)(v24 + 88);
    float v243 = *(float *)(v24 + 84);
    float v241 = *(float *)(v24 + 92);
    float v240 = *(float *)(v24 + 96);
    float v238 = *(float *)(v24 + 100);
    float v236 = *(float *)(v24 + 104);
    uint64_t v46 = v24 + 164;
    result = (void *)(v24 + 16548);
    float v47 = (unsigned char *)(*v11 + v31 * v12 + v10);
    unsigned int v48 = *(unsigned __int8 *)(v24 + 124);
    char v49 = 16 - v48;
    _CF = v48 >= 0x11;
    uint64_t v51 = *v25;
    uint64_t v52 = v25[1];
    uint64_t v53 = v51 + v27 * v22;
    if (_CF) {
      char v54 = 0;
    }
    else {
      char v54 = v49;
    }
    if (v22 >= 0) {
      uint64_t v55 = v22;
    }
    else {
      uint64_t v55 = v22 + 1;
    }
    uint64_t v56 = v52 + v28 * (v55 >> 1);
    uint64_t v57 = v24 + 32932;
    float v58 = (char *)(v53 + 2 * v21);
    uint64_t v59 = v56 + 2 * v21;
    char v60 = v54;
    float v62 = *(float *)(v24 + 108);
    float v61 = *(float *)(v24 + 112);
    float v232 = *(float *)(v24 + 120);
    float v233 = *(float *)(v24 + 116);
    float v256 = (float)LODWORD(a6);
    float v250 = (float)LODWORD(a5);
    float v251 = v39;
    float v249 = v35;
    float v248 = *(float *)(v24 + 36);
    float v246 = *(float *)(v24 + 68) * 0.5;
    float v239 = *(float *)(v24 + 52) * 0.5;
    float v237 = *(float *)(v24 + 44);
    float v235 = *(float *)(v24 + 64) * 0.5;
    float v234 = *(float *)(v24 + 40);
    float v231 = v61;
    do
    {
      uint64_t v63 = &v58[v27];
      char v64 = &v47[v31];
      if (v20)
      {
        size_t v65 = 0;
        int32x4_t v66 = &v58[v27];
        float16x8_t v67 = (_WORD *)((char *)v18 + v14);
        size_t v68 = &v47[v31];
        int16x8_t v69 = v18;
        do
        {
          int16x8_t v70 = (unsigned __int16 *)(v59 + 2 * v65);
          float v71 = (float)(v70[1] >> v60) - v34;
          float v72 = v255 * v71;
          float v73 = v35 * (float)((float)(*(unsigned __int16 *)v58 >> v60) - v33);
          float v74 = (float)(v255 * v71) + v73;
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = (float)(v255 * v71) + v73;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = (float)(*v70 >> v60) - v34;
          float v77 = (float)(v253 * v71) + (float)(v76 * v254);
          float v78 = 8191.0;
          if ((float)(v73 + v77) <= 8191.0)
          {
            float v78 = v73 + v77;
            if ((float)(v73 + v77) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v252 * v76;
          float v80 = (float)(v252 * v76) + v73;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v35 * (float)((float)(*((unsigned __int16 *)v58 + 1) >> v60) - v33);
          float v83 = 8191.0;
          if ((float)(v72 + v82) <= 8191.0)
          {
            float v83 = v72 + v82;
            if ((float)(v72 + v82) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = 8191.0;
          if ((float)(v77 + v82) <= 8191.0)
          {
            float v84 = v77 + v82;
            if ((float)(v77 + v82) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v79 + v82;
          BOOL v86 = (float)(v79 + v82) <= 8191.0;
          float v87 = 8191.0;
          if (v86)
          {
            float v87 = v85;
            if (v85 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v35 * (float)((float)(*(unsigned __int16 *)v66 >> v60) - v33);
          float v89 = 8191.0;
          if ((float)(v72 + v88) <= 8191.0)
          {
            float v89 = v72 + v88;
            if ((float)(v72 + v88) < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = 8191.0;
          if ((float)(v77 + v88) <= 8191.0)
          {
            float v90 = v77 + v88;
            if ((float)(v77 + v88) < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v79 + v88;
          BOOL v86 = (float)(v79 + v88) <= 8191.0;
          float v92 = 8191.0;
          if (v86)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v35 * (float)((float)(*((unsigned __int16 *)v66 + 1) >> v60) - v33);
          float v94 = v72 + v93;
          BOOL v86 = (float)(v72 + v93) <= 8191.0;
          float v95 = 8191.0;
          if (v86)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          float v96 = v77 + v93;
          BOOL v86 = (float)(v77 + v93) <= 8191.0;
          float v97 = 8191.0;
          if (v86)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          float v98 = v79 + v93;
          float v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          float v118 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v119 = (float)((float)((float)(v61 * _S24) + (float)(v62 * _S2)) + (float)(v233 * _S25))
               + (float)(v232 * v118);
          float v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            float v120 = (float)((float)((float)(v61 * _S24) + (float)(v62 * _S2)) + (float)(v233 * _S25))
                 + (float)(v232 * v118);
            if (v119 < 0.0) {
              float v120 = 0.0;
            }
          }
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *((_WORD *)result + llroundf(v120));
          float v125 = (float)((float)((float)(v61 * _S28) + (float)(v62 * _S26)) + (float)(v233 * _S30))
               + (float)(v232 * fmaxf(_S26, fmaxf(_S28, _S30)));
          float v126 = 8191.0;
          if (v125 <= 8191.0)
          {
            float v126 = v125;
            if (v125 < 0.0) {
              float v126 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *((_WORD *)result + llroundf(v126));
          float v131 = fmaxf(_S9, fmaxf(_S10, _S11));
          float v132 = (float)((float)((float)(v61 * _S10) + (float)(v62 * _S9)) + (float)(v233 * _S11))
               + (float)(v232 * v131);
          float v133 = 8191.0;
          if (v132 <= 8191.0)
          {
            float v133 = (float)((float)((float)(v61 * _S10) + (float)(v62 * _S9)) + (float)(v233 * _S11))
                 + (float)(v232 * v131);
            if (v132 < 0.0) {
              float v133 = 0.0;
            }
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          float v138 = _S2 * _S1;
          float v139 = _S24 * _S1;
          float v140 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          float v142 = _S26 * _S1;
          float v143 = _S28 * _S1;
          float v144 = _S30 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v133));
          __asm { FCVT            S2, H1 }
          float v146 = _S9 * _S2;
          float v147 = _S10 * _S2;
          float v148 = _S11 * _S2;
          float v149 = (float)((float)((float)(v61 * _S31) + (float)(v62 * _S29)) + (float)(v233 * _S8))
               + (float)(v232 * fmaxf(_S29, fmaxf(_S31, _S8)));
          float v150 = 8191.0;
          if (v149 <= 8191.0)
          {
            float v150 = v149;
            if (v149 < 0.0) {
              float v150 = 0.0;
            }
          }
          _H25 = *((_WORD *)result + llroundf(v150));
          __asm { FCVT            S25, H25 }
          float v153 = _S29 * _S25;
          float v154 = _S31 * _S25;
          float v155 = _S8 * _S25;
          float v156 = (float)((float)(v245 * v139) + (float)(v138 * v247)) + (float)(v140 * v244);
          float v157 = (float)((float)(v242 * v139) + (float)(v138 * v243)) + (float)(v140 * v241);
          float v158 = (float)((float)(v238 * v139) + (float)(v138 * v240)) + (float)(v140 * v236);
          _S24 = (float)((float)(v245 * v143) + (float)(v142 * v247)) + (float)(v144 * v244);
          float v160 = (float)((float)(v242 * v143) + (float)(v142 * v243)) + (float)(v144 * v241);
          _S21 = (float)((float)(v238 * v143) + (float)(v142 * v240)) + (float)(v144 * v236);
          _S22 = (float)((float)(v245 * v147) + (float)(v146 * v247)) + (float)(v148 * v244);
          float v163 = (float)((float)(v242 * v147) + (float)(v146 * v243)) + (float)(v148 * v241);
          float v164 = (float)((float)(v238 * v147) + (float)(v146 * v240)) + (float)(v148 * v236);
          _S3 = (float)(v242 * v154) + (float)(v153 * v243);
          float v166 = (float)(v238 * v154) + (float)(v153 * v240);
          float v167 = (float)((float)(v245 * v154) + (float)(v153 * v247)) + (float)(v155 * v244);
          float v168 = _S3 + (float)(v155 * v241);
          float v169 = v166 + (float)(v155 * v236);
          _H1 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          unsigned int v173 = llroundf(fminf(fmaxf(_S24, 0.0), 8191.0));
          LOWORD(_S24) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          unsigned int v174 = llroundf(fminf(fmaxf(v160, 0.0), 8191.0));
          LOWORD(_S3) = *(_WORD *)(v57 + 2 * v173);
          __asm
          {
            FCVT            S27, H1
            FCVT            S17, H3
          }
          unsigned int v177 = llroundf(fminf(fmaxf(_S21, 0.0), 8191.0));
          LOWORD(_S21) = *(_WORD *)(v57 + 2 * v174);
          unsigned int v178 = llroundf(fminf(fmaxf(_S22, 0.0), 8191.0));
          LOWORD(_S22) = *(_WORD *)(v57 + 2 * v177);
          _H1 = *(_WORD *)(v57 + 2 * v178);
          unsigned int v180 = llroundf(fminf(fmaxf(v164, 0.0), 8191.0));
          _H2 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          unsigned int v182 = llroundf(fminf(fmaxf(v167, 0.0), 8191.0));
          _H3 = *(_WORD *)(v57 + 2 * v180);
          unsigned int v184 = llroundf(fminf(fmaxf(v168, 0.0), 8191.0));
          __asm { FCVT            S23, H21 }
          unsigned int v186 = llroundf(fminf(fmaxf(v169, 0.0), 8191.0));
          float v187 = (float)(v234 * _S27) + (float)(v248 * _S29);
          float v188 = _S27 + _S23;
          float v189 = (float)(v251 + (float)((float)(_S29 + _S17) * v43)) + (float)(v188 * v239);
          float v190 = (float)(v251 + (float)((float)(_S29 + _S17) * v45)) + (float)(v188 * v235);
          _H21 = *(_WORD *)(v57 + 2 * v182);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H22
          }
          float v194 = v187 + (float)(v237 * _S24);
          float v195 = _S24 + _S25;
          float v196 = v189 + (float)((float)(_S24 + _S25) * v44);
          float v197 = v190 + (float)(v195 * v246);
          if (v196 < v41) {
            float v198 = v41;
          }
          else {
            float v198 = v196;
          }
          BOOL v86 = v196 <= v42;
          _H22 = *(_WORD *)(v57 + 2 * v184);
          float v200 = v194 + v38;
          if (!v86) {
            float v198 = v42;
          }
          char v201 = llroundf(v198);
          if (v200 < v38) {
            float v202 = v38;
          }
          else {
            float v202 = v194 + v38;
          }
          BOOL v86 = v200 <= v40;
          _H24 = *(_WORD *)(v57 + 2 * v186);
          *float v47 = v201;
          if (!v86) {
            float v202 = v40;
          }
          v47[1] = llroundf(v202);
          float v204 = v42;
          if (v197 <= v42)
          {
            float v204 = v197;
            if (v197 < v41) {
              float v204 = v41;
            }
          }
          float v205 = (float)((float)((float)(v234 * _S23) + (float)(v248 * _S17)) + (float)(v237 * _S25)) + v38;
          v47[2] = llroundf(v204);
          float v206 = v40;
          float v35 = v249;
          float v33 = v250;
          if (v205 <= v40)
          {
            if (v205 < v38) {
              float v206 = v38;
            }
            else {
              float v206 = v205;
            }
          }
          v47[3] = llroundf(v206);
          if (v69) {
            *v69++ = 0;
          }
          float v61 = v231;
          __asm
          {
            FCVT            S17, H1
            FCVT            S23, H2
            FCVT            S25, H3
            FCVT            S1, H21
            FCVT            S3, H22
            FCVT            S2, H24
          }
          float v213 = (float)((float)((float)(v234 * _S23) + (float)(v248 * _S17)) + (float)(v237 * _S25)) + v38;
          float v214 = _S17 + _S1;
          float v215 = _S23 + _S3;
          float v216 = (float)((float)(v251 + (float)(v214 * v43)) + (float)(v215 * v239))
               + (float)((float)(_S25 + _S2) * v44);
          float v217 = (float)((float)(v251 + (float)(v214 * v45)) + (float)(v215 * v235))
               + (float)((float)(_S25 + _S2) * v246);
          if (v216 < v41) {
            float v218 = v41;
          }
          else {
            float v218 = v216;
          }
          if (v216 <= v42) {
            float v219 = v218;
          }
          else {
            float v219 = v42;
          }
          unsigned char *v68 = llroundf(v219);
          if (v213 < v38) {
            float v220 = v38;
          }
          else {
            float v220 = v213;
          }
          if (v213 <= v40) {
            float v221 = v220;
          }
          else {
            float v221 = v40;
          }
          v68[1] = llroundf(v221);
          float v222 = v42;
          if (v217 <= v42)
          {
            float v222 = v217;
            if (v217 < v41) {
              float v222 = v41;
            }
          }
          float v223 = (float)((float)((float)(v234 * _S3) + (float)(v248 * _S1)) + (float)(v237 * _S2)) + v38;
          v68[2] = llroundf(v222);
          float v224 = v40;
          if (v223 <= v40)
          {
            float v224 = v223;
            if (v223 < v38) {
              float v224 = v38;
            }
          }
          v68[3] = llroundf(v224);
          float v34 = v256;
          if (v67) {
            *v67++ = 0;
          }
          v58 += 4;
          v66 += 4;
          v47 += 4;
          v68 += 4;
          v65 += 2;
        }
        while (v20 > v65);
      }
      float v58 = &v63[v27];
      v59 += v28;
      float v47 = &v64[v31];
      v19 += 2;
    }
    while (v23 > v19);
    if (v230 && v18)
    {
      uint64_t v225 = 0;
      do
      {
        if (v20)
        {
          size_t v226 = v20;
          uint64_t v227 = v16;
          float16x8_t v228 = (unsigned __int16 *)v30;
          do
          {
            unsigned int v229 = *v228++;
            *v227++ = llroundf((float)v229 * 0.0038911);
            --v226;
          }
          while (v226);
        }
        v30 += v29;
        v16 += v14;
        ++v225;
      }
      while (v225 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          result = memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Mat_TRC_2vuyf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = v6 * a2;
  unint64_t v8 = 2 * *(unsigned __int8 *)result;
  unint64_t v9 = (v6 + v6 * a2) / v8;
  uint64_t v10 = result[14];
  uint64_t v11 = (void *)result[16];
  uint64_t v12 = result[15] + 2 * (result[13] * a2 / v8);
  uint64_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (unsigned char *)(v15 + v14 * v12 + v10);
  unint64_t v17 = v7 / v8;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v10);
  }
  else {
    uint64_t v18 = 0;
  }
  if (2 * v9 != 2 * v17)
  {
    unint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    uint64_t v22 = *(void *)((char *)result + 44) + 2 * v17;
    unint64_t v23 = 2 * v9 - 2 * v17;
    uint64_t v24 = result[19];
    uint64_t v25 = (uint64_t *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = v30 + v29 * v22 + 2 * v21;
    uint64_t v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v24;
    float v205 = v33 * *(float *)(v24 + 16);
    float v206 = v33 * *(float *)(v24 + 8);
    float v37 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v24 + 28);
    float v203 = *(float *)&v38;
    float v204 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    float v43 = (float)v38;
    float v44 = *(float *)(v24 + 36);
    float v45 = *(float *)(v24 + 40);
    float v46 = *(float *)(v24 + 52) * 0.5;
    float v47 = *(float *)(v24 + 56) * 0.5;
    float v48 = *(float *)(v24 + 60) * 0.5;
    float v209 = *(float *)(v24 + 64) * 0.5;
    float v202 = *(float *)(v24 + 72);
    float v49 = *(float *)(v24 + 68) * 0.5;
    float v200 = *(float *)(v24 + 80);
    float v201 = *(float *)(v24 + 76);
    float v198 = *(float *)(v24 + 88);
    float v199 = *(float *)(v24 + 84);
    float v197 = *(float *)(v24 + 92);
    float v196 = *(float *)(v24 + 96);
    float v195 = *(float *)(v24 + 100);
    float v193 = *(float *)(v24 + 104);
    uint64_t v50 = v24 + 164;
    result = (void *)(v24 + 16548);
    uint64_t v51 = (unsigned char *)(*v11 + v32 * v12 + v10);
    unsigned int v52 = *(unsigned __int8 *)(v24 + 124);
    char v53 = 16 - v52;
    _CF = v52 >= 0x11;
    uint64_t v55 = *v25;
    uint64_t v56 = v25[1];
    uint64_t v57 = (char *)(v55 + v27 * v22 + 2 * v21);
    if (_CF) {
      char v53 = 0;
    }
    uint64_t v58 = v56 + v28 * (v22 / 2) + 2 * v21;
    float v207 = (float)LODWORD(a6);
    float v208 = (float)LODWORD(a5);
    float v194 = *(float *)(v24 + 44);
    float v192 = *(float *)(v24 + 48) * 0.5;
    do
    {
      uint64_t v59 = &v57[v27];
      char v60 = &v51[v32];
      if (v20)
      {
        size_t v61 = 0;
        float v62 = &v57[v27];
        uint64_t v63 = (_WORD *)((char *)v18 + v14);
        char v64 = &v51[v32];
        size_t v65 = v18;
        do
        {
          int32x4_t v66 = (unsigned __int16 *)(v58 + 2 * v61);
          float v67 = (float)(v66[1] >> v53) - v35;
          float v68 = v206 * v67;
          float v69 = v36 * (float)((float)(*(unsigned __int16 *)v57 >> v53) - v34);
          float v70 = (float)(v206 * v67) + v69;
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = (float)(v206 * v67) + v69;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = (float)(*v66 >> v53) - v35;
          float v73 = (float)(v204 * v67) + (float)(v72 * v205);
          float v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            float v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v203 * v72;
          float v76 = (float)(v203 * v72) + v69;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v36 * (float)((float)(*((unsigned __int16 *)v57 + 1) >> v53) - v34);
          float v79 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            float v79 = v68 + v78;
            if ((float)(v68 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = 8191.0;
          if ((float)(v73 + v78) <= 8191.0)
          {
            float v80 = v73 + v78;
            if ((float)(v73 + v78) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v75 + v78;
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v40;
          float v84 = v36 * (float)((float)(*(unsigned __int16 *)v62 >> v53) - v34);
          float v85 = 8191.0;
          if ((float)(v68 + v84) <= 8191.0)
          {
            float v85 = v68 + v84;
            if ((float)(v68 + v84) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = 8191.0;
          if ((float)(v73 + v84) <= 8191.0)
          {
            float v86 = v73 + v84;
            if ((float)(v73 + v84) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v75 + v84;
          BOOL v88 = (float)(v75 + v84) <= 8191.0;
          float v89 = 8191.0;
          if (v88)
          {
            float v89 = v87;
            if (v87 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v36 * (float)((float)(*((unsigned __int16 *)v62 + 1) >> v53) - v34);
          float v91 = v68 + v90;
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v73 + v90;
          BOOL v88 = (float)(v73 + v90) <= 8191.0;
          float v94 = 8191.0;
          if (v88)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v36;
          float v96 = v75 + v90;
          float v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S26, H26
          }
          _H27 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          unsigned int v116 = llroundf(fminf(fmaxf(v89, 0.0), 8191.0));
          __asm { FCVT            S1, H27 }
          _H27 = *(_WORD *)(v50 + 2 * v116);
          __asm { FCVT            S27, H27 }
          _H17 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H24 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v124 = llroundf(fminf(fmaxf(v97, 0.0), 8191.0));
          _S25 = (float)((float)(v201 * _S4) + (float)(_S3 * v202)) + (float)(_S5 * v200);
          float v126 = (float)((float)(v198 * _S4) + (float)(_S3 * v199)) + (float)(_S5 * v197);
          _S3 = (float)((float)(v195 * _S4) + (float)(_S3 * v196)) + (float)(_S5 * v193);
          _S4 = (float)((float)(v201 * _S6) + (float)(_S2 * v202)) + (float)(_S7 * v200);
          float v129 = (float)((float)(v198 * _S6) + (float)(_S2 * v199)) + (float)(_S7 * v197);
          float v130 = (float)((float)(v195 * _S6) + (float)(_S2 * v196)) + (float)(_S7 * v193);
          float v131 = (float)((float)(v201 * _S1) + (float)(_S26 * v202)) + (float)(_S27 * v200);
          float v132 = (float)((float)(v198 * _S1) + (float)(_S26 * v199)) + (float)(_S27 * v197);
          float v133 = (float)((float)(v195 * _S1) + (float)(_S26 * v196)) + (float)(_S27 * v193);
          _S1 = (float)(v201 * _S24) + (float)(_S17 * v202);
          float v135 = (float)(v198 * _S24) + (float)(_S17 * v199);
          float v136 = (float)(v195 * _S24) + (float)(_S17 * v196);
          LOWORD(_S24) = *(_WORD *)(v50 + 2 * v124);
          __asm { FCVT            S24, H24 }
          float v138 = _S1 + (float)(_S24 * v200);
          float v139 = v135 + (float)(_S24 * v197);
          float v140 = v136 + (float)(_S24 * v193);
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          unsigned int v142 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H1
            FCVT            S5, H4
          }
          LOWORD(_S25) = *((_WORD *)result + v142);
          _H21 = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          unsigned int v148 = llroundf(fminf(fmaxf(v138, 0.0), 8191.0));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          unsigned int v150 = llroundf(fminf(fmaxf(v139, 0.0), 8191.0));
          __asm { FCVT            S25, H25 }
          unsigned int v152 = llroundf(fminf(fmaxf(v140, 0.0), 8191.0));
          float v40 = v83;
          _H6 = *((_WORD *)result + v148);
          __asm
          {
            FCVT            S26, H3
            FCVT            S3, H21
          }
          float v156 = (float)((float)(v45 * _S28) + (float)(v44 * _S24)) + (float)(v194 * _S26);
          float v157 = (float)((float)(v83 + (float)((float)(_S24 + _S5) * v192)) + (float)((float)(_S28 + _S25) * v46))
               + (float)((float)(_S26 + _S3) * v47);
          float v158 = (float)((float)(v83 + (float)((float)(_S24 + _S5) * v48)) + (float)((float)(_S28 + _S25) * v209))
               + (float)((float)(_S26 + _S3) * v49);
          if (v157 < v42) {
            float v159 = v42;
          }
          else {
            float v159 = v157;
          }
          BOOL v88 = v157 <= v43;
          _H7 = *((_WORD *)result + v150);
          float v161 = v156 + v39;
          if (v88) {
            float v162 = v159;
          }
          else {
            float v162 = v43;
          }
          char v163 = llroundf(v162);
          if (v161 < v39) {
            float v164 = v39;
          }
          else {
            float v164 = v161;
          }
          _H24 = *((_WORD *)result + v152);
          *uint64_t v51 = v163;
          if (v161 <= v41) {
            float v166 = v164;
          }
          else {
            float v166 = v41;
          }
          v51[1] = llroundf(v166);
          float v167 = v43;
          if (v158 <= v43)
          {
            float v167 = v158;
            if (v158 < v42) {
              float v167 = v42;
            }
          }
          float v168 = (float)((float)((float)(v45 * _S25) + (float)(v44 * _S5)) + (float)(v194 * _S3)) + v39;
          v51[2] = llroundf(v167);
          float v169 = v41;
          if (v168 <= v41)
          {
            if (v168 < v39) {
              float v169 = v39;
            }
            else {
              float v169 = v168;
            }
          }
          v51[3] = llroundf(v169);
          float v36 = v95;
          if (v65) {
            *v65++ = 0;
          }
          __asm
          {
            FCVT            S3, H1
            FCVT            S5, H2
            FCVT            S17, H4
            FCVT            S1, H6
            FCVT            S4, H7
            FCVT            S2, H24
          }
          float v176 = (float)((float)((float)(v45 * _S5) + (float)(v44 * _S3)) + (float)(v194 * _S17)) + v39;
          float v177 = _S3 + _S1;
          float v178 = _S5 + _S4;
          float v179 = _S17 + _S2;
          float v180 = (float)((float)(v83 + (float)(v177 * v192)) + (float)(v178 * v46)) + (float)(v179 * v47);
          float v181 = (float)((float)(v83 + (float)(v177 * v48)) + (float)(v178 * v209)) + (float)(v179 * v49);
          if (v180 < v42) {
            float v182 = v42;
          }
          else {
            float v182 = v180;
          }
          if (v180 > v43) {
            float v182 = v43;
          }
          *char v64 = llroundf(v182);
          if (v176 < v39) {
            float v183 = v39;
          }
          else {
            float v183 = v176;
          }
          if (v176 > v41) {
            float v183 = v41;
          }
          v64[1] = llroundf(v183);
          float v184 = v43;
          if (v181 <= v43)
          {
            float v184 = v181;
            if (v181 < v42) {
              float v184 = v42;
            }
          }
          float v185 = (float)((float)((float)(v45 * _S4) + (float)(v44 * _S1)) + (float)(v194 * _S2)) + v39;
          v64[2] = llroundf(v184);
          float v186 = v41;
          float v35 = v207;
          float v34 = v208;
          if (v185 <= v41)
          {
            float v186 = v185;
            if (v185 < v39) {
              float v186 = v39;
            }
          }
          v64[3] = llroundf(v186);
          if (v63) {
            *v63++ = 0;
          }
          v57 += 4;
          v62 += 4;
          v51 += 4;
          v64 += 4;
          v61 += 2;
        }
        while (v20 > v61);
      }
      uint64_t v57 = &v59[v27];
      v58 += v28;
      uint64_t v51 = &v60[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      uint64_t v187 = 0;
      do
      {
        if (v20)
        {
          size_t v188 = v20;
          float v189 = v16;
          float v190 = (unsigned __int16 *)v31;
          do
          {
            unsigned int v191 = *v190++;
            *v189++ = llroundf((float)v191 * 0.0038911);
            --v188;
          }
          while (v188);
        }
        v31 += v29;
        v16 += v14;
        ++v187;
      }
      while (v187 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          result = memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_2vuyf_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = v6 * a2;
  unint64_t v8 = 2 * *result;
  unint64_t v9 = (v6 + v6 * a2) / v8;
  uint64_t v10 = *((void *)result + 14);
  uint64_t v11 = (void *)*((void *)result + 16);
  uint64_t v12 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v8);
  uint64_t v13 = (uint64_t *)*((void *)result + 17);
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (unsigned char *)(v15 + v14 * v12 + v10);
  unint64_t v17 = v7 / v8;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v10);
  }
  else {
    uint64_t v18 = 0;
  }
  if (2 * v9 != 2 * v17)
  {
    unint64_t v19 = 0;
    size_t v20 = *(void *)(result + 20);
    uint64_t v21 = *(void *)(result + 36);
    uint64_t v22 = *(void *)(result + 44) + 2 * v17;
    unint64_t v23 = 2 * v9 - 2 * v17;
    uint64_t v24 = *((void *)result + 19);
    uint64_t v25 = (uint64_t *)*((void *)result + 7);
    uint64_t v26 = (uint64_t *)*((void *)result + 8);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = v30 + v29 * v22 + 2 * v21;
    uint64_t v32 = *v13;
    *(float *)&unsigned int v33 = (float)*(unsigned int *)(v24 + 128);
    *(float *)&unsigned int v34 = (float)*(unsigned int *)(v24 + 136);
    float v35 = *(float *)&v34 / *(float *)&v33;
    LOWORD(v33) = *(_WORD *)(v24 + 140);
    float v36 = (float)v33;
    LOWORD(v34) = *(_WORD *)(v24 + 142);
    float v37 = (float)v34;
    float v38 = v35 * *(float *)v24;
    float v127 = v35 * *(float *)(v24 + 8);
    float v39 = v35 * *(float *)(v24 + 16);
    float v40 = v35 * *(float *)(v24 + 20);
    float v41 = *(float *)(v24 + 28);
    float v42 = v35 * v41;
    LOWORD(v41) = *(_WORD *)(v24 + 144);
    float v43 = (float)LODWORD(v41);
    LOWORD(v2) = *(_WORD *)(v24 + 146);
    float v44 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v24 + 148);
    float v45 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v24 + 150);
    float v46 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v24 + 152);
    float v47 = (float)v5;
    float v48 = *(float *)(v24 + 36);
    float v49 = *(float *)(v24 + 40);
    float v50 = *(float *)(v24 + 44);
    float v51 = *(float *)(v24 + 48) * 0.5;
    float v52 = *(float *)(v24 + 52) * 0.5;
    float v53 = *(float *)(v24 + 56) * 0.5;
    float v54 = *(float *)(v24 + 60) * 0.5;
    float v55 = *(float *)(v24 + 64) * 0.5;
    float v56 = *(float *)(v24 + 68) * 0.5;
    uint64_t v57 = (unsigned char *)(*v11 + v32 * v12 + v10);
    unsigned int v58 = *(unsigned __int8 *)(v24 + 124);
    char v59 = 16 - v58;
    BOOL v60 = v58 >= 0x11;
    uint64_t v61 = *v25;
    uint64_t v62 = v25[1];
    result = (unsigned __int8 *)(v61 + v27 * v22 + 2 * v21);
    if (v60) {
      char v59 = 0;
    }
    uint64_t v63 = v62 + v28 * (v22 / 2) + 2 * v21;
    char v64 = v59;
    do
    {
      size_t v65 = &result[v27];
      int32x4_t v66 = &v57[v32];
      if (v20)
      {
        size_t v67 = 0;
        float v68 = &result[v27];
        float v69 = v18;
        float v70 = &v57[v32];
        float v71 = (_WORD *)((char *)v18 + v14);
        do
        {
          float v72 = (unsigned __int16 *)(v63 + 2 * v67);
          float v73 = (float)(*v72 >> v64) - v37;
          float v74 = (float)(v72[1] >> v64) - v37;
          float v75 = v127 * v74;
          float v76 = (float)(v40 * v74) + (float)(v73 * v39);
          float v77 = v42 * v73;
          float v78 = v38 * (float)((float)(*(unsigned __int16 *)result >> v64) - v36);
          float v79 = v38 * (float)((float)(*((unsigned __int16 *)result + 1) >> v64) - v36);
          unsigned int v80 = *(unsigned __int16 *)v68;
          unsigned int v81 = *((unsigned __int16 *)v68 + 1);
          float v82 = v75 + v78;
          float v83 = v78 + v76;
          float v84 = v77 + v78;
          float v85 = v75 + v79;
          float v86 = v76 + v79;
          float v87 = v77 + v79;
          float v88 = (float)((float)((float)(v49 * v83) + (float)(v48 * v82)) + (float)(v50 * v84)) + v43;
          float v89 = v82 + v85;
          float v90 = v83 + v86;
          float v91 = v84 + v87;
          float v92 = (float)((float)(v44 + (float)(v89 * v51)) + (float)(v90 * v52)) + (float)(v91 * v53);
          if (v92 < v46) {
            float v93 = v46;
          }
          else {
            float v93 = (float)((float)(v44 + (float)(v89 * v51)) + (float)(v90 * v52)) + (float)(v91 * v53);
          }
          if (v92 > v47) {
            float v93 = v47;
          }
          unsigned char *v57 = llroundf(v93);
          float v94 = v45;
          if (v88 <= v45)
          {
            float v94 = v88;
            if (v88 < v43) {
              float v94 = v43;
            }
          }
          float v95 = (float)((float)(v44 + (float)(v89 * v54)) + (float)(v90 * v55)) + (float)(v91 * v56);
          v57[1] = llroundf(v94);
          float v96 = v47;
          if (v95 <= v47)
          {
            float v96 = v95;
            if (v95 < v46) {
              float v96 = v46;
            }
          }
          float v97 = (float)((float)((float)(v49 * v86) + (float)(v48 * v85)) + (float)(v50 * v87)) + v43;
          v57[2] = llroundf(v96);
          float v98 = v45;
          if (v97 <= v45)
          {
            if (v97 < v43) {
              float v98 = v43;
            }
            else {
              float v98 = v97;
            }
          }
          v57[3] = llroundf(v98);
          if (v69) {
            *v69++ = 0;
          }
          float v99 = v38 * (float)((float)(int)(v80 >> v64) - v36);
          float v100 = v38 * (float)((float)(int)(v81 >> v64) - v36);
          float v101 = v75 + v99;
          float v102 = v76 + v99;
          float v103 = v77 + v99;
          float v104 = v75 + v100;
          float v105 = v76 + v100;
          float v106 = v77 + v100;
          float v107 = (float)((float)((float)(v49 * v102) + (float)(v48 * v101)) + (float)(v50 * v103)) + v43;
          float v108 = (float)((float)((float)(v49 * v105) + (float)(v48 * v104)) + (float)(v50 * v106)) + v43;
          float v109 = v101 + v104;
          float v110 = v102 + v105;
          float v111 = (float)(v44 + (float)(v109 * v51)) + (float)(v110 * v52);
          float v112 = v103 + v106;
          float v113 = v111 + (float)(v112 * v53);
          float v114 = (float)(v44 + (float)(v109 * v54)) + (float)(v110 * v55);
          if (v113 < v46) {
            float v115 = v46;
          }
          else {
            float v115 = v111 + (float)(v112 * v53);
          }
          if (v113 <= v47) {
            float v116 = v115;
          }
          else {
            float v116 = v47;
          }
          float v117 = v114 + (float)(v112 * v56);
          *float v70 = llroundf(v116);
          if (v107 < v43) {
            float v118 = v43;
          }
          else {
            float v118 = v107;
          }
          if (v107 > v45) {
            float v118 = v45;
          }
          v70[1] = llroundf(v118);
          if (v117 < v46) {
            float v119 = v46;
          }
          else {
            float v119 = v117;
          }
          if (v117 <= v47) {
            float v120 = v119;
          }
          else {
            float v120 = v47;
          }
          v70[2] = llroundf(v120);
          float v121 = v45;
          if (v108 <= v45)
          {
            float v121 = v108;
            if (v108 < v43) {
              float v121 = v43;
            }
          }
          v70[3] = llroundf(v121);
          if (v71) {
            *v71++ = 0;
          }
          result += 4;
          v68 += 4;
          v57 += 4;
          v70 += 4;
          v67 += 2;
        }
        while (v20 > v67);
      }
      result = &v65[v27];
      v63 += v28;
      uint64_t v57 = &v66[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      uint64_t v122 = 0;
      do
      {
        if (v20)
        {
          size_t v123 = v20;
          unsigned int v124 = v16;
          float v125 = (unsigned __int16 *)v31;
          do
          {
            unsigned int v126 = *v125++;
            *v124++ = llroundf((float)v126 * 0.0038911);
            --v123;
          }
          while (v123);
        }
        v31 += v29;
        v16 += v14;
        ++v122;
      }
      while (v122 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          result = (unsigned __int8 *)memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Tone_Mat_TRC_yuvsf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = v6 * a2;
  unint64_t v8 = 2 * *(unsigned __int8 *)result;
  unint64_t v9 = (v6 + v6 * a2) / v8;
  uint64_t v10 = result[14];
  uint64_t v11 = (void *)result[16];
  uint64_t v12 = result[15] + 2 * (result[13] * a2 / v8);
  uint64_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (unsigned char *)(v15 + v14 * v12 + v10);
  unint64_t v17 = v7 / v8;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v10);
  }
  else {
    uint64_t v18 = 0;
  }
  if (2 * v9 != 2 * v17)
  {
    unint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    uint64_t v22 = *(void *)((char *)result + 44) + 2 * v17;
    unint64_t v23 = 2 * v9 - 2 * v17;
    uint64_t v24 = result[19];
    uint64_t v25 = (uint64_t *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = v30 + v29 * v22 + 2 * v21;
    uint64_t v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v24;
    float v242 = v33 * *(float *)(v24 + 16);
    float v243 = v33 * *(float *)(v24 + 8);
    float v37 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v24 + 28);
    float v240 = *(float *)&v38;
    float v241 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    float v43 = (float)v38;
    float v45 = *(float *)(v24 + 36);
    float v44 = *(float *)(v24 + 40);
    float v46 = *(float *)(v24 + 52) * 0.5;
    float v236 = *(float *)(v24 + 72);
    float v233 = *(float *)(v24 + 80);
    float v234 = *(float *)(v24 + 76);
    float v231 = *(float *)(v24 + 88);
    float v232 = *(float *)(v24 + 84);
    float v229 = *(float *)(v24 + 96);
    float v230 = *(float *)(v24 + 92);
    float v228 = *(float *)(v24 + 100);
    float v226 = *(float *)(v24 + 104);
    uint64_t v47 = v24 + 164;
    result = (void *)(v24 + 16548);
    float v48 = (unsigned char *)(*v11 + v32 * v12 + v10);
    unsigned int v49 = *(unsigned __int8 *)(v24 + 124);
    char v50 = 16 - v49;
    _CF = v49 >= 0x11;
    uint64_t v52 = *v25;
    uint64_t v53 = v25[1];
    uint64_t v54 = v52 + v27 * v22;
    if (_CF) {
      char v55 = 0;
    }
    else {
      char v55 = v50;
    }
    if (v22 >= 0) {
      uint64_t v56 = v22;
    }
    else {
      uint64_t v56 = v22 + 1;
    }
    uint64_t v57 = v53 + v28 * (v56 >> 1);
    uint64_t v58 = v24 + 32932;
    char v59 = (char *)(v54 + 2 * v21);
    uint64_t v60 = v57 + 2 * v21;
    char v61 = v55;
    float v63 = *(float *)(v24 + 108);
    float v62 = *(float *)(v24 + 112);
    float v221 = *(float *)(v24 + 120);
    float v222 = *(float *)(v24 + 116);
    float v244 = (float)LODWORD(a6);
    float v245 = (float)LODWORD(a5);
    float v239 = v36;
    float v237 = *(float *)(v24 + 64) * 0.5;
    float v238 = *(float *)(v24 + 60) * 0.5;
    float v235 = *(float *)(v24 + 68) * 0.5;
    float v227 = *(float *)(v24 + 48) * 0.5;
    float v224 = *(float *)(v24 + 44);
    float v225 = v40;
    float v223 = *(float *)(v24 + 56) * 0.5;
    do
    {
      char v64 = &v59[v27];
      size_t v65 = &v48[v32];
      if (v20)
      {
        size_t v66 = 0;
        size_t v67 = &v59[v27];
        float v68 = (_WORD *)((char *)v18 + v14);
        float v69 = &v48[v32];
        float v70 = v18;
        do
        {
          float v71 = (unsigned __int16 *)(v60 + 2 * v66);
          float v72 = (float)(v71[1] >> v61) - v35;
          float v73 = v243 * v72;
          float v74 = v36 * (float)((float)(*(unsigned __int16 *)v59 >> v61) - v34);
          float v75 = (float)(v243 * v72) + v74;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = (float)(v243 * v72) + v74;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = (float)(*v71 >> v61) - v35;
          float v78 = (float)(v241 * v72) + (float)(v77 * v242);
          float v79 = 8191.0;
          if ((float)(v74 + v78) <= 8191.0)
          {
            float v79 = v74 + v78;
            if ((float)(v74 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v240 * v77;
          float v81 = (float)(v240 * v77) + v74;
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v36 * (float)((float)(*((unsigned __int16 *)v59 + 1) >> v61) - v34);
          float v84 = 8191.0;
          if ((float)(v73 + v83) <= 8191.0)
          {
            float v84 = v73 + v83;
            if ((float)(v73 + v83) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            float v85 = v78 + v83;
            if ((float)(v78 + v83) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v80 + v83;
          BOOL v87 = (float)(v80 + v83) <= 8191.0;
          float v88 = 8191.0;
          if (v87)
          {
            float v88 = v86;
            if (v86 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v36 * (float)((float)(*(unsigned __int16 *)v67 >> v61) - v34);
          float v90 = 8191.0;
          if ((float)(v73 + v89) <= 8191.0)
          {
            float v90 = v73 + v89;
            if ((float)(v73 + v89) < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = 8191.0;
          if ((float)(v78 + v89) <= 8191.0)
          {
            float v91 = v78 + v89;
            if ((float)(v78 + v89) < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v80 + v89;
          BOOL v87 = (float)(v80 + v89) <= 8191.0;
          float v93 = 8191.0;
          if (v87)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v36 * (float)((float)(*((unsigned __int16 *)v67 + 1) >> v61) - v34);
          float v95 = v73 + v94;
          BOOL v87 = (float)(v73 + v94) <= 8191.0;
          float v96 = 8191.0;
          if (v87)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v78 + v94;
          BOOL v87 = (float)(v78 + v94) <= 8191.0;
          float v98 = 8191.0;
          if (v87)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          float v99 = v80 + v94;
          float v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            float v100 = v99;
            if (v99 < 0.0) {
              float v100 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          float v119 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v120 = (float)((float)((float)(v62 * _S24) + (float)(v63 * _S2)) + (float)(v222 * _S25))
               + (float)(v221 * v119);
          float v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            float v121 = (float)((float)((float)(v62 * _S24) + (float)(v63 * _S2)) + (float)(v222 * _S25))
                 + (float)(v221 * v119);
            if (v120 < 0.0) {
              float v121 = 0.0;
            }
          }
          float v122 = v44;
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *((_WORD *)result + llroundf(v121));
          float v127 = (float)((float)((float)(v62 * _S28) + (float)(v63 * _S26)) + (float)(v222 * _S30))
               + (float)(v221 * fmaxf(_S26, fmaxf(_S28, _S30)));
          float v128 = 8191.0;
          if (v127 <= 8191.0)
          {
            float v128 = v127;
            if (v127 < 0.0) {
              float v128 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *((_WORD *)result + llroundf(v128));
          float v133 = fmaxf(_S9, fmaxf(_S10, _S11));
          float v134 = (float)((float)((float)(v62 * _S10) + (float)(v63 * _S9)) + (float)(v222 * _S11))
               + (float)(v221 * v133);
          float v135 = 8191.0;
          if (v134 <= 8191.0)
          {
            float v135 = (float)((float)((float)(v62 * _S10) + (float)(v63 * _S9)) + (float)(v222 * _S11))
                 + (float)(v221 * v133);
            if (v134 < 0.0) {
              float v135 = 0.0;
            }
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          float v140 = _S2 * _S1;
          float v141 = _S24 * _S1;
          float v142 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          float v144 = _S26 * _S1;
          float v145 = _S28 * _S1;
          float v146 = _S30 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v135));
          __asm { FCVT            S2, H1 }
          float v148 = _S9 * _S2;
          float v149 = _S10 * _S2;
          float v150 = _S11 * _S2;
          float v151 = (float)((float)((float)(v62 * _S31) + (float)(v63 * _S29)) + (float)(v222 * _S8))
               + (float)(v221 * fmaxf(_S29, fmaxf(_S31, _S8)));
          float v152 = 8191.0;
          if (v151 <= 8191.0)
          {
            float v152 = v151;
            if (v151 < 0.0) {
              float v152 = 0.0;
            }
          }
          _H25 = *((_WORD *)result + llroundf(v152));
          __asm { FCVT            S25, H25 }
          float v155 = _S29 * _S25;
          float v156 = _S31 * _S25;
          float v157 = _S8 * _S25;
          float v158 = (float)((float)(v234 * v141) + (float)(v140 * v236)) + (float)(v142 * v233);
          float v159 = (float)((float)(v231 * v141) + (float)(v140 * v232)) + (float)(v142 * v230);
          float v160 = (float)((float)(v228 * v141) + (float)(v140 * v229)) + (float)(v142 * v226);
          float v161 = (float)((float)(v234 * v145) + (float)(v144 * v236)) + (float)(v146 * v233);
          float v162 = (float)((float)(v231 * v145) + (float)(v144 * v232)) + (float)(v146 * v230);
          float v163 = (float)((float)(v228 * v145) + (float)(v144 * v229)) + (float)(v146 * v226);
          float v164 = (float)((float)(v234 * v149) + (float)(v148 * v236)) + (float)(v150 * v233);
          float v165 = (float)((float)(v231 * v149) + (float)(v148 * v232)) + (float)(v150 * v230);
          float v166 = (float)((float)(v228 * v149) + (float)(v148 * v229)) + (float)(v150 * v226);
          float v167 = (float)((float)(v234 * v156) + (float)(v155 * v236)) + (float)(v157 * v233);
          float v168 = (float)((float)(v231 * v156) + (float)(v155 * v232)) + (float)(v157 * v230);
          float v169 = (float)((float)(v228 * v156) + (float)(v155 * v229)) + (float)(v157 * v226);
          _H1 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H1
            FCVT            S9, H2
          }
          _H1 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          _H1 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S25, H1 }
          _H1 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          _H1 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          float v44 = v122;
          float v188 = (float)((float)((float)(v122 * _S30) + (float)(v45 * _S29)) + (float)(v224 * _S9)) + v39;
          float v189 = _S29 + _S24;
          if (v188 < v39) {
            float v190 = v39;
          }
          else {
            float v190 = (float)((float)((float)(v122 * _S30) + (float)(v45 * _S29)) + (float)(v224 * _S9)) + v39;
          }
          BOOL v87 = v188 <= v41;
          float v191 = _S30 + _S25;
          float v192 = (float)((float)(v225 + (float)(v189 * v227)) + (float)((float)(_S30 + _S25) * v46))
               + (float)((float)(_S9 + _S26) * v223);
          if (!v87) {
            float v190 = v41;
          }
          *float v48 = llroundf(v190);
          float v193 = v43;
          if (v192 <= v43)
          {
            float v193 = v192;
            if (v192 < v42) {
              float v193 = v42;
            }
          }
          float v194 = (float)((float)((float)(v122 * _S25) + (float)(v45 * _S24)) + (float)(v224 * _S26)) + v39;
          v48[1] = llroundf(v193);
          float v195 = v41;
          float v36 = v239;
          if (v194 <= v41)
          {
            float v195 = v194;
            if (v194 < v39) {
              float v195 = v39;
            }
          }
          float v196 = (float)((float)(v225 + (float)(v189 * v238)) + (float)(v191 * v237))
               + (float)((float)(_S9 + _S26) * v235);
          v48[2] = llroundf(v195);
          float v197 = v43;
          float v34 = v245;
          if (v196 <= v43)
          {
            if (v196 < v42) {
              float v197 = v42;
            }
            else {
              float v197 = v196;
            }
          }
          v48[3] = llroundf(v197);
          if (v70) {
            *v70++ = 0;
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
            FCVT            S3, H3
            FCVT            S17, H17
            FCVT            S21, H21
            FCVT            S22, H22
          }
          float v204 = (float)((float)((float)(v122 * _S2) + (float)(v45 * _S1)) + (float)(v224 * _S3)) + v39;
          float v205 = (float)((float)((float)(v122 * _S21) + (float)(v45 * _S17)) + (float)(v224 * _S22)) + v39;
          float v206 = _S1 + _S17;
          float v207 = _S2 + _S21;
          float v208 = _S3 + _S22;
          float v209 = (float)((float)(v225 + (float)(v206 * v227)) + (float)(v207 * v46)) + (float)(v208 * v223);
          float v210 = (float)(v225 + (float)(v206 * v238)) + (float)(v207 * v237);
          if (v204 < v39) {
            float v211 = v39;
          }
          else {
            float v211 = v204;
          }
          if (v204 > v41) {
            float v211 = v41;
          }
          float v212 = v210 + (float)(v208 * v235);
          unsigned char *v69 = llroundf(v211);
          if (v209 < v42) {
            float v213 = v42;
          }
          else {
            float v213 = v209;
          }
          if (v209 > v43) {
            float v213 = v43;
          }
          v69[1] = llroundf(v213);
          if (v205 < v39) {
            float v214 = v39;
          }
          else {
            float v214 = v205;
          }
          if (v205 > v41) {
            float v214 = v41;
          }
          v69[2] = llroundf(v214);
          float v215 = v43;
          if (v212 <= v43)
          {
            float v215 = v212;
            if (v212 < v42) {
              float v215 = v42;
            }
          }
          v69[3] = llroundf(v215);
          float v35 = v244;
          if (v68) {
            *v68++ = 0;
          }
          v59 += 4;
          v67 += 4;
          v48 += 4;
          v69 += 4;
          v66 += 2;
        }
        while (v20 > v66);
      }
      char v59 = &v64[v27];
      v60 += v28;
      float v48 = &v65[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      uint64_t v216 = 0;
      do
      {
        if (v20)
        {
          size_t v217 = v20;
          float v218 = v16;
          float v219 = (unsigned __int16 *)v31;
          do
          {
            unsigned int v220 = *v219++;
            *v218++ = llroundf((float)v220 * 0.0038911);
            --v217;
          }
          while (v217);
        }
        v31 += v29;
        v16 += v14;
        ++v216;
      }
      while (v216 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          result = memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Mat_TRC_yuvsf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = v6 * a2;
  unint64_t v8 = 2 * *(unsigned __int8 *)result;
  unint64_t v9 = (v6 + v6 * a2) / v8;
  uint64_t v10 = result[14];
  uint64_t v11 = (void *)result[16];
  uint64_t v12 = result[15] + 2 * (result[13] * a2 / v8);
  uint64_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (unsigned char *)(v15 + v14 * v12 + v10);
  unint64_t v17 = v7 / v8;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v10);
  }
  else {
    uint64_t v18 = 0;
  }
  if (2 * v9 != 2 * v17)
  {
    unint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    uint64_t v22 = *(void *)((char *)result + 44) + 2 * v17;
    unint64_t v23 = 2 * v9 - 2 * v17;
    uint64_t v24 = result[19];
    uint64_t v25 = (uint64_t *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = v30 + v29 * v22 + 2 * v21;
    uint64_t v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v24;
    float v193 = v33 * *(float *)(v24 + 16);
    float v194 = v33 * *(float *)(v24 + 8);
    float v37 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v24 + 28);
    float v191 = *(float *)&v38;
    float v192 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    float v43 = (float)v38;
    float v201 = *(float *)(v24 + 36);
    float v202 = v40;
    float v199 = *(float *)(v24 + 44);
    float v200 = *(float *)(v24 + 40);
    float v197 = *(float *)(v24 + 52) * 0.5;
    float v198 = *(float *)(v24 + 48) * 0.5;
    float v196 = *(float *)(v24 + 56) * 0.5;
    float v44 = *(float *)(v24 + 72);
    float v46 = *(float *)(v24 + 76);
    float v45 = *(float *)(v24 + 80);
    float v47 = *(float *)(v24 + 84);
    float v48 = *(float *)(v24 + 88);
    float v49 = *(float *)(v24 + 92);
    float v50 = *(float *)(v24 + 96);
    float v51 = *(float *)(v24 + 100);
    float v52 = *(float *)(v24 + 104);
    uint64_t v53 = v24 + 164;
    result = (void *)(v24 + 16548);
    uint64_t v54 = (unsigned char *)(*v11 + v32 * v12 + v10);
    unsigned int v55 = *(unsigned __int8 *)(v24 + 124);
    char v56 = 16 - v55;
    _CF = v55 >= 0x11;
    uint64_t v58 = *v25;
    uint64_t v59 = v25[1];
    uint64_t v60 = (char *)(v58 + v27 * v22 + 2 * v21);
    if (_CF) {
      char v56 = 0;
    }
    uint64_t v61 = v59 + v28 * (v22 / 2) + 2 * v21;
    float v195 = v34;
    float v187 = (float)LODWORD(a6);
    float v188 = *(float *)(v24 + 68) * 0.5;
    float v189 = *(float *)(v24 + 64) * 0.5;
    float v190 = *(float *)(v24 + 60) * 0.5;
    do
    {
      float v62 = &v60[v27];
      float v63 = &v54[v32];
      if (v20)
      {
        size_t v64 = 0;
        size_t v65 = &v60[v27];
        size_t v66 = (_WORD *)((char *)v18 + v14);
        size_t v67 = &v54[v32];
        float v68 = v18;
        do
        {
          float v69 = (unsigned __int16 *)(v61 + 2 * v64);
          float v70 = (float)(v69[1] >> v56) - v35;
          float v71 = v194 * v70;
          float v72 = v36 * (float)((float)(*(unsigned __int16 *)v60 >> v56) - v34);
          float v73 = (float)(v194 * v70) + v72;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = (float)(v194 * v70) + v72;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = (float)(*v69 >> v56) - v35;
          float v76 = (float)(v192 * v70) + (float)(v75 * v193);
          float v77 = 8191.0;
          if ((float)(v72 + v76) <= 8191.0)
          {
            float v77 = v72 + v76;
            if ((float)(v72 + v76) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v191 * v75;
          float v79 = (float)(v191 * v75) + v72;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v36 * (float)((float)(*((unsigned __int16 *)v60 + 1) >> v56) - v34);
          float v82 = 8191.0;
          if ((float)(v71 + v81) <= 8191.0)
          {
            float v82 = v71 + v81;
            if ((float)(v71 + v81) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = 8191.0;
          if ((float)(v76 + v81) <= 8191.0)
          {
            float v83 = v76 + v81;
            if ((float)(v76 + v81) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v78 + v81;
          float v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v36 * (float)((float)(*(unsigned __int16 *)v65 >> v56) - v34);
          float v87 = 8191.0;
          if ((float)(v71 + v86) <= 8191.0)
          {
            float v87 = v71 + v86;
            if ((float)(v71 + v86) < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = 8191.0;
          if ((float)(v76 + v86) <= 8191.0)
          {
            float v88 = v76 + v86;
            if ((float)(v76 + v86) < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v78 + v86;
          BOOL v90 = (float)(v78 + v86) <= 8191.0;
          float v91 = 8191.0;
          if (v90)
          {
            float v91 = v89;
            if (v89 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v36 * (float)((float)(*((unsigned __int16 *)v65 + 1) >> v56) - v34);
          float v93 = v71 + v92;
          BOOL v90 = (float)(v71 + v92) <= 8191.0;
          float v94 = 8191.0;
          if (v90)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v76 + v92;
          BOOL v90 = (float)(v76 + v92) <= 8191.0;
          float v96 = 8191.0;
          if (v90)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v36;
          float v98 = v78 + v92;
          float v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S5, H5
          }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H6 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H20 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          _H26 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S1, H1
          }
          _H7 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v127 = (float)((float)(v46 * _S4) + (float)(_S3 * v44)) + (float)(_S5 * v45);
          float v128 = (float)((float)(v48 * _S4) + (float)(_S3 * v47)) + (float)(_S5 * v49);
          _S3 = (float)((float)(v51 * _S4) + (float)(_S3 * v50)) + (float)(_S5 * v52);
          float v130 = (float)((float)(v46 * _S6) + (float)(_S2 * v44)) + (float)(_S20 * v45);
          float v131 = (float)((float)(v48 * _S6) + (float)(_S2 * v47)) + (float)(_S20 * v49);
          float v132 = (float)((float)(v51 * _S6) + (float)(_S2 * v50)) + (float)(_S20 * v52);
          float v133 = (float)((float)(v46 * _S27) + (float)(_S26 * v44)) + (float)(_S1 * v45);
          float v134 = (float)((float)(v48 * _S27) + (float)(_S26 * v47)) + (float)(_S1 * v49);
          float v135 = (float)((float)(v51 * _S27) + (float)(_S26 * v50)) + (float)(_S1 * v52);
          float v136 = (float)((float)(v46 * _S24) + (float)(_S7 * v44)) + (float)(_S25 * v45);
          float v137 = (float)((float)(v48 * _S24) + (float)(_S7 * v47)) + (float)(_S25 * v49);
          float v138 = (float)((float)(v51 * _S24) + (float)(_S7 * v50)) + (float)(_S25 * v52);
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S28, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H1
            FCVT            S3, H3
          }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S25, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          float v151 = (float)((float)((float)(v200 * _S30) + (float)(v201 * _S28)) + (float)(v199 * _S3)) + v39;
          float v152 = _S28 + _S24;
          if (v151 < v39) {
            float v153 = v39;
          }
          else {
            float v153 = (float)((float)((float)(v200 * _S30) + (float)(v201 * _S28)) + (float)(v199 * _S3)) + v39;
          }
          BOOL v90 = v151 <= v41;
          float v154 = _S30 + _S25;
          float v155 = (float)(v202 + (float)(v152 * v198)) + (float)((float)(_S30 + _S25) * v197);
          float v156 = _S3 + _S26;
          float v157 = v155 + (float)((float)(_S3 + _S26) * v196);
          if (v90) {
            float v158 = v153;
          }
          else {
            float v158 = v41;
          }
          *uint64_t v54 = llroundf(v158);
          float v159 = v43;
          if (v157 <= v43)
          {
            float v159 = v157;
            if (v157 < v42) {
              float v159 = v42;
            }
          }
          float v160 = (float)((float)((float)(v200 * _S25) + (float)(v201 * _S24)) + (float)(v199 * _S26)) + v39;
          v54[1] = llroundf(v159);
          float v161 = v41;
          if (v160 <= v41)
          {
            float v161 = v160;
            if (v160 < v39) {
              float v161 = v39;
            }
          }
          float v162 = (float)((float)(v202 + (float)(v152 * v190)) + (float)(v154 * v189)) + (float)(v156 * v188);
          v54[2] = llroundf(v161);
          float v163 = v43;
          float v36 = v97;
          if (v162 <= v43)
          {
            if (v162 < v42) {
              float v163 = v42;
            }
            else {
              float v163 = (float)((float)(v202 + (float)(v152 * v190)) + (float)(v154 * v189)) + (float)(v156 * v188);
            }
          }
          v54[3] = llroundf(v163);
          if (v68) {
            *v68++ = 0;
          }
          float v35 = v187;
          __asm
          {
            FCVT            S2, H2
            FCVT            S1, H1
            FCVT            S3, H4
            FCVT            S4, H5
            FCVT            S5, H6
            FCVT            S6, H7
          }
          float v170 = (float)((float)((float)(v200 * _S1) + (float)(v201 * _S2)) + (float)(v199 * _S3)) + v39;
          float v171 = (float)((float)((float)(v200 * _S5) + (float)(v201 * _S4)) + (float)(v199 * _S6)) + v39;
          float v172 = _S2 + _S4;
          float v173 = _S1 + _S5;
          float v174 = _S3 + _S6;
          float v175 = (float)((float)(v202 + (float)(v172 * v198)) + (float)(v173 * v197)) + (float)(v174 * v196);
          float v176 = (float)(v202 + (float)(v172 * v190)) + (float)(v173 * v189);
          if (v170 < v39) {
            float v177 = v39;
          }
          else {
            float v177 = v170;
          }
          if (v170 > v41) {
            float v177 = v41;
          }
          float v178 = v176 + (float)(v174 * v188);
          *size_t v67 = llroundf(v177);
          if (v175 < v42) {
            float v179 = v42;
          }
          else {
            float v179 = v175;
          }
          if (v175 > v43) {
            float v179 = v43;
          }
          v67[1] = llroundf(v179);
          if (v171 < v39) {
            float v180 = v39;
          }
          else {
            float v180 = v171;
          }
          if (v171 > v41) {
            float v180 = v41;
          }
          v67[2] = llroundf(v180);
          float v181 = v43;
          if (v178 <= v43)
          {
            float v181 = v178;
            if (v178 < v42) {
              float v181 = v42;
            }
          }
          v67[3] = llroundf(v181);
          float v34 = v195;
          if (v66) {
            *v66++ = 0;
          }
          v60 += 4;
          v65 += 4;
          v54 += 4;
          v67 += 4;
          v64 += 2;
        }
        while (v20 > v64);
      }
      uint64_t v60 = &v62[v27];
      v61 += v28;
      uint64_t v54 = &v63[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      uint64_t v182 = 0;
      do
      {
        if (v20)
        {
          size_t v183 = v20;
          float v184 = v16;
          float v185 = (unsigned __int16 *)v31;
          do
          {
            unsigned int v186 = *v185++;
            *v184++ = llroundf((float)v186 * 0.0038911);
            --v183;
          }
          while (v183);
        }
        v31 += v29;
        v16 += v14;
        ++v182;
      }
      while (v182 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          result = memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_yuvsf_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = v6 * a2;
  unint64_t v8 = 2 * *result;
  unint64_t v9 = (v6 + v6 * a2) / v8;
  uint64_t v10 = *((void *)result + 14);
  uint64_t v11 = (void *)*((void *)result + 16);
  uint64_t v12 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v8);
  uint64_t v13 = (uint64_t *)*((void *)result + 17);
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (unsigned char *)(v15 + v14 * v12 + v10);
  unint64_t v17 = v7 / v8;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v10);
  }
  else {
    uint64_t v18 = 0;
  }
  if (2 * v9 != 2 * v17)
  {
    unint64_t v19 = 0;
    size_t v20 = *(void *)(result + 20);
    uint64_t v21 = *(void *)(result + 36);
    uint64_t v22 = *(void *)(result + 44) + 2 * v17;
    unint64_t v23 = 2 * v9 - 2 * v17;
    uint64_t v24 = *((void *)result + 19);
    uint64_t v25 = (uint64_t *)*((void *)result + 7);
    uint64_t v26 = (uint64_t *)*((void *)result + 8);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = v30 + v29 * v22 + 2 * v21;
    uint64_t v32 = *v13;
    *(float *)&unsigned int v33 = (float)*(unsigned int *)(v24 + 128);
    *(float *)&unsigned int v34 = (float)*(unsigned int *)(v24 + 136);
    float v35 = *(float *)&v34 / *(float *)&v33;
    LOWORD(v33) = *(_WORD *)(v24 + 140);
    float v36 = (float)v33;
    LOWORD(v34) = *(_WORD *)(v24 + 142);
    float v37 = (float)v34;
    float v38 = v35 * *(float *)v24;
    float v123 = v35 * *(float *)(v24 + 8);
    float v39 = v35 * *(float *)(v24 + 16);
    float v40 = v35 * *(float *)(v24 + 20);
    float v41 = *(float *)(v24 + 28);
    float v42 = v35 * v41;
    LOWORD(v41) = *(_WORD *)(v24 + 144);
    float v43 = (float)LODWORD(v41);
    LOWORD(v2) = *(_WORD *)(v24 + 146);
    float v44 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v24 + 148);
    float v45 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v24 + 150);
    float v46 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v24 + 152);
    float v47 = (float)v5;
    float v48 = *(float *)(v24 + 36);
    float v49 = *(float *)(v24 + 40);
    float v50 = *(float *)(v24 + 44);
    float v51 = *(float *)(v24 + 48) * 0.5;
    float v52 = *(float *)(v24 + 52) * 0.5;
    float v53 = *(float *)(v24 + 56) * 0.5;
    float v54 = *(float *)(v24 + 60) * 0.5;
    float v55 = *(float *)(v24 + 64) * 0.5;
    float v56 = *(float *)(v24 + 68) * 0.5;
    uint64_t v57 = (unsigned char *)(*v11 + v32 * v12 + v10);
    unsigned int v58 = *(unsigned __int8 *)(v24 + 124);
    char v59 = 16 - v58;
    BOOL v60 = v58 >= 0x11;
    uint64_t v61 = *v25;
    uint64_t v62 = v25[1];
    result = (unsigned __int8 *)(v61 + v27 * v22 + 2 * v21);
    if (v60) {
      char v59 = 0;
    }
    uint64_t v63 = v62 + v28 * (v22 / 2) + 2 * v21;
    char v64 = v59;
    do
    {
      size_t v65 = &result[v27];
      size_t v66 = &v57[v32];
      if (v20)
      {
        size_t v67 = 0;
        float v68 = &result[v27];
        float v69 = v18;
        float v70 = &v57[v32];
        float v71 = (_WORD *)((char *)v18 + v14);
        do
        {
          float v72 = (unsigned __int16 *)(v63 + 2 * v67);
          float v73 = (float)(*v72 >> v64) - v37;
          float v74 = (float)(v72[1] >> v64) - v37;
          float v75 = v123 * v74;
          float v76 = (float)(v40 * v74) + (float)(v73 * v39);
          float v77 = v42 * v73;
          float v78 = v38 * (float)((float)(*(unsigned __int16 *)result >> v64) - v36);
          float v79 = v38 * (float)((float)(*((unsigned __int16 *)result + 1) >> v64) - v36);
          unsigned int v80 = *(unsigned __int16 *)v68;
          unsigned int v81 = *((unsigned __int16 *)v68 + 1);
          float v82 = v78 + v76;
          float v83 = v77 + v78;
          float v84 = v77 + v79;
          float v85 = (float)((float)((float)(v49 * (float)(v78 + v76)) + (float)(v48 * (float)(v75 + v78)))
                      + (float)(v50 * (float)(v77 + v78)))
              + v43;
          float v86 = (float)((float)((float)(v49 * (float)(v76 + v79)) + (float)(v48 * (float)(v75 + v79)))
                      + (float)(v50 * (float)(v77 + v79)))
              + v43;
          float v87 = (float)(v75 + v78) + (float)(v75 + v79);
          float v88 = v82 + (float)(v76 + v79);
          float v89 = v83 + v84;
          float v90 = (float)((float)(v44 + (float)(v87 * v51)) + (float)(v88 * v52)) + (float)((float)(v83 + v84) * v53);
          if (v85 < v43) {
            float v91 = v43;
          }
          else {
            float v91 = v85;
          }
          if (v85 <= v45) {
            float v92 = v91;
          }
          else {
            float v92 = v45;
          }
          unsigned char *v57 = llroundf(v92);
          if (v90 < v46) {
            float v93 = v46;
          }
          else {
            float v93 = v90;
          }
          if (v90 > v47) {
            float v93 = v47;
          }
          v57[1] = llroundf(v93);
          float v94 = v45;
          if (v86 <= v45)
          {
            float v94 = v86;
            if (v86 < v43) {
              float v94 = v43;
            }
          }
          float v95 = (float)((float)(v44 + (float)(v87 * v54)) + (float)(v88 * v55)) + (float)(v89 * v56);
          v57[2] = llroundf(v94);
          float v96 = v47;
          if (v95 <= v47)
          {
            if (v95 < v46) {
              float v96 = v46;
            }
            else {
              float v96 = v95;
            }
          }
          v57[3] = llroundf(v96);
          if (v69) {
            *v69++ = 0;
          }
          float v97 = v38 * (float)((float)(int)(v80 >> v64) - v36);
          float v98 = v38 * (float)((float)(int)(v81 >> v64) - v36);
          float v99 = v75 + v97;
          float v100 = v76 + v97;
          float v101 = v77 + v97;
          float v102 = v75 + v98;
          float v103 = v76 + v98;
          float v104 = v77 + v98;
          float v105 = (float)((float)((float)(v49 * v100) + (float)(v48 * v99)) + (float)(v50 * v101)) + v43;
          float v106 = (float)((float)((float)(v49 * v103) + (float)(v48 * v102)) + (float)(v50 * v104)) + v43;
          float v107 = v99 + v102;
          float v108 = v100 + v103;
          float v109 = v101 + v104;
          float v110 = (float)((float)(v44 + (float)(v107 * v51)) + (float)(v108 * v52)) + (float)(v109 * v53);
          if (v105 < v43) {
            float v111 = v43;
          }
          else {
            float v111 = v105;
          }
          if (v105 > v45) {
            float v111 = v45;
          }
          *float v70 = llroundf(v111);
          if (v110 < v46) {
            float v112 = v46;
          }
          else {
            float v112 = (float)((float)(v44 + (float)(v107 * v51)) + (float)(v108 * v52)) + (float)(v109 * v53);
          }
          if (v110 <= v47) {
            float v113 = v112;
          }
          else {
            float v113 = v47;
          }
          v70[1] = llroundf(v113);
          float v114 = v45;
          if (v106 <= v45)
          {
            float v114 = v106;
            if (v106 < v43) {
              float v114 = v43;
            }
          }
          float v115 = (float)(v44 + (float)(v107 * v54)) + (float)(v108 * v55);
          float v116 = v115 + (float)(v109 * v56);
          v70[2] = llroundf(v114);
          float v117 = v47;
          if (v116 <= v47)
          {
            float v117 = v115 + (float)(v109 * v56);
            if (v116 < v46) {
              float v117 = v46;
            }
          }
          v70[3] = llroundf(v117);
          if (v71) {
            *v71++ = 0;
          }
          result += 4;
          v68 += 4;
          v57 += 4;
          v70 += 4;
          v67 += 2;
        }
        while (v20 > v67);
      }
      result = &v65[v27];
      v63 += v28;
      uint64_t v57 = &v66[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      uint64_t v118 = 0;
      do
      {
        if (v20)
        {
          size_t v119 = v20;
          float v120 = v16;
          float v121 = (unsigned __int16 *)v31;
          do
          {
            unsigned int v122 = *v121++;
            *v120++ = llroundf((float)v122 * 0.0038911);
            --v119;
          }
          while (v119);
        }
        v31 += v29;
        v16 += v14;
        ++v118;
      }
      while (v118 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          result = (unsigned __int8 *)memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD(void *result, uint64_t a2, float32x4_t a3, float32x4_t a4, double a5, int16x4_t a6)
{
  uint64_t v8 = *(void *)((char *)result + 28);
  unint64_t v9 = 2 * *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)((char *)result + 20);
    uint64_t v14 = *(void *)((char *)result + 36);
    uint64_t v15 = *(void *)((char *)result + 44) + 2 * v10;
    unint64_t v16 = 2 * v11 - 2 * v10;
    uint64_t v17 = result[14];
    unint64_t v18 = result[13] * a2 / v9;
    uint64_t v19 = (void *)result[16];
    uint64_t v20 = result[15] + 2 * v18;
    uint64_t v21 = (float32x2_t *)result[19];
    size_t v22 = (void *)result[7];
    uint64_t v23 = (uint64_t *)result[8];
    uint64_t v24 = (void *)result[17];
    uint64_t v26 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v27 = v23[2];
    uint64_t v421 = v22[2];
    uint64_t v28 = (void *)*v24;
    uint64_t v29 = v24[1];
    uint64_t v30 = v24[2];
    uint64_t v420 = v19[2];
    uint64_t v31 = (char *)(v420 + v30 * v20 + 2 * v17);
    unsigned int v32 = v21[17].u16[2];
    unsigned int v33 = v21[17].u16[3];
    a6.i32[0] = v21->i32[0];
    a4.i32[0] = v21[3].i32[1];
    unsigned int v34 = v21[18].u16[0];
    LODWORD(v24) = v21[18].u16[1];
    unsigned int v35 = v21[18].u16[2];
    float v36 = (float)v32;
    *(short float *)v7.i16 = (short float)v32;
    unsigned int v37 = v21[18].u16[3];
    float v38 = (float)v33;
    short float v39 = (short float)v33;
    unsigned int v40 = v21[19].u16[0];
    _S12 = v21[5].i32[0];
    float v485 = v21[4].f32[1];
    _S27 = v21[5].f32[1];
    v42.i32[0] = v21[6].i32[0];
    v45.i32[0] = v21[6].i32[1];
    v44.i32[0] = v21[7].i32[0];
    a4.i32[1] = v21[1].i32[0];
    v42.i32[1] = v21[7].i32[1];
    v45.i32[1] = v21[8].i32[0];
    v44.i32[1] = v21[8].i32[1];
    float v46 = (char *)&v21[2068] + 4;
    __src = (char *)(v421 + v27 * v15 + 2 * v14);
    a3.f32[0] = 8191.0 / (float)v21[16].u32[0];
    _S20 = a3.f32[0] * v21->f32[0];
    float v484 = (float)v34;
    float v48 = (float)v24;
    float v502 = (float)v35;
    float v482 = (float)v37;
    *(float *)&a5 = (float)v40;
    float v481 = (float)v40;
    *(short float *)&a5 = (short float)v34;
    float v49 = (char *)&v21[20] + 4;
    *(short float *)a6.i16 = (short float)v24;
    float v50 = (char *)&v21[4116] + 4;
    float16x8_t v51 = (float16x8_t)vdupq_lane_s16(v7, 0);
    short float v52 = -v39;
    *(float32x2_t *)a4.f32 = vmul_n_f32(*(float32x2_t *)a4.f32, a3.f32[0]);
    unint64_t v489 = a4.i64[0];
    *(float32x2_t *)a3.f32 = vmul_n_f32(v21[2], a3.f32[0]);
    unint64_t v488 = a3.i64[0];
    float16x8_t v53 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    float32x4_t v54 = (float32x4_t)vmulq_n_f16(v53, -v39);
    float16x8_t v495 = (float16x8_t)v54;
    float16x8_t v55 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    float32x4_t v56 = (float32x4_t)vmulq_n_f16(v55, v52);
    float16x8_t v463 = (float16x8_t)v56;
    *(float32x2_t *)v54.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    uint64_t v501 = v54.i64[0];
    *(float16x4_t *)v54.f32 = vcvt_f16_f32(v54);
    v54.i64[1] = 0x3F0000003F000000;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
    *(float32x2_t *)v54.f32 = vmul_f32(v45, (float32x2_t)0x3F0000003F000000);
    uint64_t v500 = v54.i64[0];
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v54), 0);
    *(float32x2_t *)v56.f32 = vmul_f32(v44, (float32x2_t)0x3F0000003F000000);
    uint64_t v499 = v56.i64[0];
    *(float16x4_t *)v56.f32 = vcvt_f16_f32(v56);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 0);
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a5, 0);
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(a6, 0);
    *(short float *)v56.i16 = (short float)v35;
    int16x8_t v62 = vdupq_lane_s16(*(int16x4_t *)v56.f32, 0);
    *(short float *)v56.i16 = (short float)v37;
    result = v28;
    int16x8_t v63 = vdupq_lane_s16(*(int16x4_t *)v56.f32, 0);
    *(short float *)v56.i16 = (short float)v40;
    int16x8_t v64 = vdupq_lane_s16(*(int16x4_t *)v56.f32, 0);
    unsigned int v65 = v21[16].u8[4];
    if (v65 >= 0x11) {
      unsigned __int8 v66 = 0;
    }
    else {
      unsigned __int8 v66 = 16 - v65;
    }
    unsigned int v67 = v21[15].u8[4];
    unsigned __int8 v68 = 16 - v67;
    if (v67 >= 0x11) {
      unsigned __int8 v68 = 0;
    }
    uint64_t v69 = v19[1];
    _ZF = v69 == 0;
    uint64_t v71 = v69 + v29 * v20 + 2 * v17;
    if (_ZF) {
      float v72 = 0;
    }
    else {
      float v72 = (char *)v71;
    }
    float v73 = (uint16x8_t *)(*v19 + (void)v28 * v20 + 2 * v17);
    if (v15 >= 0) {
      uint64_t v74 = v15;
    }
    else {
      uint64_t v74 = v15 + 1;
    }
    uint64_t v75 = v25;
    uint64_t v76 = v22[1] + v25 * (v74 >> 1) + 2 * v14;
    uint16x8_t v77 = (uint16x8_t)vdupq_n_s16(-v68);
    float v78 = (uint16x8_t *)(*v22 + v26 * v15 + 2 * v14);
    float v79 = v72;
    unsigned __int8 v80 = v68;
    uint64_t v81 = v29;
    unsigned __int8 v82 = v66;
    unint64_t v424 = v13 & 0xFFFFFFF8;
    float v83 = &v72[v29];
    uint64_t v84 = 2 * v29;
    float v487 = v21[11].f32[1];
    LODWORD(_Q14) = v21[12].i32[1];
    float v486 = v21[13].f32[0];
    __asm { FCVT            H6, S20 }
    short float v457 = _H6;
    _S2 = v21[4].i32[1];
    __asm { FCVT            H6, S2 }
    float v440 = v21[5].f32[0];
    __asm { FCVT            H12, S12 }
    short float v455 = _H12;
    __asm { FCVT            H12, S27 }
    short float v454 = _H12;
    float v461 = v21[13].f32[1];
    __asm { FCVT            H0, S0 }
    float v460 = v21[14].f32[0];
    __asm { FCVT            H1, S1 }
    float v459 = v21[14].f32[1];
    __asm { FCVT            H3, S3 }
    float v458 = v21[15].f32[0];
    __asm { FCVT            H4, S4 }
    float v472 = v21[9].f32[0];
    __asm { FCVT            H5, S5 }
    float v471 = v21[9].f32[1];
    __asm { FCVT            H12, S17 }
    short float v448 = _H12;
    float v470 = v21[10].f32[0];
    __asm { FCVT            H12, S16 }
    short float v447 = _H12;
    float v469 = v21[10].f32[1];
    __asm { FCVT            H12, S24 }
    short float v446 = _H12;
    float v468 = v21[11].f32[0];
    __asm { FCVT            H12, S22 }
    short float v445 = _H12;
    _S2 = v487;
    __asm { FCVT            H12, S2 }
    short float v444 = _H12;
    float v465 = v21[12].f32[0];
    __asm { FCVT            H13, S13 }
    float v464 = *(float *)&_Q14;
    __asm { FCVT            H14, S14 }
    _S2 = v486;
    __asm { FCVT            H12, S2 }
    uint16x8_t v441 = (uint16x8_t)vdupq_n_s16(v66);
    float16x8_t v475 = (float16x8_t)v63;
    float16x8_t v476 = (float16x8_t)v62;
    float16x8_t v474 = (float16x8_t)v64;
    short float v452 = _H1;
    short float v453 = _H0;
    short float v450 = _H4;
    short float v451 = _H3;
    short float v449 = _H5;
    unint64_t v434 = v13;
    unint64_t v435 = v16;
    short float v432 = v31;
    uint64_t v433 = v30;
    uint64_t v430 = v26;
    uint64_t v431 = v27;
    float v428 = v28;
    uint64_t v429 = v25;
    uint64_t v427 = v29;
    float16x8_t v483 = v51;
    float16x8_t v479 = v57;
    float16x8_t v480 = v58;
    float16x8_t v477 = v61;
    float16x8_t v478 = v60;
    int v473 = v13 - 7;
    unsigned __int8 v425 = v66;
    unsigned __int8 v426 = v80;
    uint64_t v423 = 2 * v29;
    float v467 = v36;
    float v466 = _S20;
    float16x8_t v462 = v59;
    short float v456 = _H6;
    long long v442 = _Q14;
    short float v443 = _H13;
    float16x8_t v493 = v53;
    float16x8_t v494 = v55;
    float v422 = v38;
    do
    {
      float v107 = (uint16x8_t *)((char *)v78 + v26);
      float v108 = (uint16x8_t *)((char *)result + (void)v73);
      float v109 = &v79[v81];
      short float v438 = &v78->i8[v26];
      long long v439 = (char *)result + (void)v73;
      if ((int)v13 < 8)
      {
        float16x8_t v271 = v58;
        float16x8_t v272 = v51;
        unint64_t v275 = 0;
        float v274 = &v79[v81];
        float v273 = (unsigned __int16 *)v76;
        float16x8_t v276 = v55;
        float16x8_t v277 = v53;
      }
      else
      {
        short float v436 = &v79[v81];
        unint64_t v437 = v12;
        unint64_t v110 = 0;
        int v111 = 0;
        float16x8_t v112 = 0uLL;
        v113.i64[0] = 0x9000900090009000;
        v113.i64[1] = 0x9000900090009000;
        float v492 = v79;
        uint64_t v491 = v76;
        float16x8_t v490 = v83;
        do
        {
          int v496 = v111;
          v498 = v73;
          float16x8_t v114 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)(v76 + v110), v77));
          int16x8_t v115 = (int16x8_t)vmlaq_f16(v495, v493, v114);
          int8x16_t v116 = (int8x16_t)vmlaq_f16(v463, v494, v114);
          v114.i64[0] = vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL).u64[0];
          *(int16x4_t *)v117.i8 = vuzp1_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v114.i8);
          *(int16x4_t *)v114.i8 = vuzp2_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v114.i8);
          v114.i64[1] = v114.i64[0];
          v115.i64[0] = vextq_s8(v116, v116, 8uLL).u64[0];
          v117.i64[1] = v114.i64[0];
          *(float16x4_t *)v115.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8));
          v115.i64[1] = v114.i64[0];
          float16x8_t v118 = (float16x8_t)vzip1q_s16((int16x8_t)v114, (int16x8_t)v114);
          v497 = v78 + 1;
          uint16x8_t v119 = *v107++;
          float16x8_t v120 = (float16x8_t)vzip1q_s16(v115, v115);
          float16x8_t v121 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(*v78, v77)), v51);
          float16x8_t v122 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v119, v77)), v51);
          float16x8_t v123 = (float16x8_t)vzip1q_s16(v117, v117);
          float16x8_t v124 = vmlaq_n_f16(v118, v121, v457);
          float16x8_t v125 = vmlaq_n_f16(v118, v122, v457);
          float16x8_t v126 = vmlaq_n_f16(v120, v121, v457);
          float16x8_t v127 = vmlaq_n_f16(v120, v122, v457);
          float16x8_t v128 = vmlaq_n_f16(v123, v121, v457);
          float16x8_t v129 = vmlaq_n_f16(v123, v122, v457);
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, v112), v113));
          uint32x4_t v131 = vmovl_high_u16(v130);
          uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v130.i8);
          uint64_t v133 = v132.u32[1];
          uint64_t v134 = v132.u32[3];
          v135.i64[0] = 0x9000900090009000;
          v135.i64[1] = 0x9000900090009000;
          v136.i16[0] = *(_WORD *)&v49[2 * v132.u32[0]];
          uint64_t v137 = v131.u32[1];
          float v138 = (__int16 *)&v49[2 * v132.u32[2]];
          uint64_t v139 = v131.u32[3];
          uint64_t v140 = v131.u32[2];
          float v141 = (__int16 *)&v49[2 * v131.u32[0]];
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, (float16x8_t)0), v135));
          uint32x4_t v143 = vmovl_high_u16(v142);
          v144.i64[0] = v143.u32[2];
          v144.i64[1] = v143.u32[3];
          float16x8_t v145 = v144;
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v142.i8);
          v126.i64[1] = v146.u32[3];
          uint64_t v147 = v146.u32[1];
          v126.i16[0] = *(_WORD *)&v49[2 * v146.u32[0]];
          float v148 = (__int16 *)&v49[2 * v146.u32[2]];
          uint16x8_t v149 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v135));
          float v150 = (__int16 *)&v49[2 * v134];
          uint32x4_t v151 = vmovl_high_u16(v149);
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v149.i8);
          v153.i16[0] = *(_WORD *)&v49[2 * v152.u32[0]];
          float v154 = (__int16 *)&v49[2 * v139];
          float v155 = (__int16 *)&v49[2 * v152.u32[1]];
          v136.i16[1] = *(_WORD *)&v49[2 * v133];
          float v156 = (__int16 *)&v49[2 * v152.u32[2]];
          float v157 = (__int16 *)&v49[2 * v152.u32[3]];
          float v158 = (__int16 *)&v49[2 * v151.u32[0]];
          float v159 = (__int16 *)&v49[2 * v151.u32[1]];
          float v160 = (__int16 *)&v49[2 * v151.u32[2]];
          float v161 = (__int16 *)&v49[2 * v151.u32[3]];
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v135));
          float16x8_t v163 = (float16x8_t)vmovl_high_u16(v162);
          v144.i64[0] = v163.u32[2];
          v144.i64[1] = v163.u32[3];
          float16x8_t v164 = v144;
          v144.i64[0] = v163.u32[0];
          uint32x4_t v165 = vmovl_u16(*(uint16x4_t *)v162.i8);
          v153.i16[1] = *v155;
          v163.i16[0] = *(_WORD *)&v49[2 * v165.u32[0]];
          v136.i16[2] = *v138;
          v126.i16[1] = *(_WORD *)&v49[2 * v147];
          v153.i16[2] = *v156;
          float v166 = (__int16 *)&v49[2 * v163.u32[1]];
          v136.i16[3] = *v150;
          float v167 = (__int16 *)&v49[2 * v164.i64[0]];
          v163.i16[1] = *(_WORD *)&v49[2 * v165.u32[1]];
          v126.i16[2] = *v148;
          v163.i16[2] = *(_WORD *)&v49[2 * v165.u32[2]];
          v163.i16[3] = *(_WORD *)&v49[2 * v165.u32[3]];
          v153.i16[3] = *v157;
          float v168 = (__int16 *)&v49[2 * v164.i64[1]];
          uint16x8_t v169 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, (float16x8_t)0), v135));
          v163.i16[4] = *(_WORD *)&v49[2 * v144.i64[0]];
          float16x8_t v170 = (float16x8_t)vmovl_high_u16(v169);
          v144.i64[0] = v170.u32[2];
          v144.i64[1] = v170.u32[3];
          float16x8_t v171 = v144;
          v144.i64[0] = v170.u32[0];
          v144.i64[1] = v170.u32[1];
          uint32x4_t v172 = vmovl_u16(*(uint16x4_t *)v169.i8);
          v136.i16[4] = *v141;
          v126.i16[3] = *(_WORD *)&v49[2 * v126.i64[1]];
          v170.i16[0] = *(_WORD *)&v49[2 * v172.u32[0]];
          v153.i16[4] = *v158;
          v163.i16[5] = *v166;
          v136.i16[5] = *(_WORD *)&v49[2 * v137];
          v126.i16[4] = *(_WORD *)&v49[2 * v143.u32[0]];
          float v173 = (__int16 *)&v49[2 * v171.i64[0]];
          v170.i16[1] = *(_WORD *)&v49[2 * v172.u32[1]];
          v153.i16[5] = *v159;
          v170.i16[2] = *(_WORD *)&v49[2 * v172.u32[2]];
          v170.i16[3] = *(_WORD *)&v49[2 * v172.u32[3]];
          v163.i16[6] = *v167;
          v170.i16[4] = *(_WORD *)&v49[2 * v144.i64[0]];
          v170.i16[5] = *(_WORD *)&v49[2 * v144.i64[1]];
          v136.i16[6] = *(_WORD *)&v49[2 * v140];
          float v174 = (__int16 *)&v49[2 * v171.i64[1]];
          uint16x8_t v175 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v135));
          v126.i16[5] = *(_WORD *)&v49[2 * v143.u32[1]];
          float16x8_t v176 = (float16x8_t)vmovl_high_u16(v175);
          v144.i64[0] = v176.u32[2];
          v144.i64[1] = v176.u32[3];
          float16x8_t v177 = v144;
          v144.i64[0] = v176.u32[0];
          v144.i64[1] = v176.u32[1];
          uint32x4_t v178 = vmovl_u16(*(uint16x4_t *)v175.i8);
          v153.i16[6] = *v160;
          v163.i16[7] = *v168;
          v176.i16[0] = *(_WORD *)&v49[2 * v178.u32[0]];
          v170.i16[6] = *v173;
          v136.i16[7] = *v154;
          v126.i16[6] = *(_WORD *)&v49[2 * v145.i64[0]];
          v153.i16[7] = *v161;
          v176.i16[1] = *(_WORD *)&v49[2 * v178.u32[1]];
          v170.i16[7] = *v174;
          v176.i16[2] = *(_WORD *)&v49[2 * v178.u32[2]];
          v176.i16[3] = *(_WORD *)&v49[2 * v178.u32[3]];
          v126.i16[7] = *(_WORD *)&v49[2 * v145.i64[1]];
          v176.i16[4] = *(_WORD *)&v49[2 * v144.i64[0]];
          v176.i16[5] = *(_WORD *)&v49[2 * v144.i64[1]];
          v176.i16[6] = *(_WORD *)&v49[2 * v177.i64[0]];
          v176.i16[7] = *(_WORD *)&v49[2 * v177.i64[1]];
          uint16x8_t v179 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v136, v453), v126, v452), v153, v451), vmaxq_f16(vmaxq_f16(v136, v126), v153), v450), (float16x8_t)0), v135));
          uint32x4_t v180 = vmovl_high_u16(v179);
          v144.i64[0] = v180.u32[2];
          v144.i64[1] = v180.u32[3];
          uint32x4_t v181 = vmovl_u16(*(uint16x4_t *)v179.i8);
          uint64_t v182 = v181.u32[1];
          uint64_t v183 = v181.u32[0];
          uint64_t v184 = v181.u32[3];
          uint64_t v185 = v181.u32[2];
          uint64_t v186 = v180.u32[1];
          uint16x8_t v187 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v163, v453), v170, v452), v176, v451), vmaxq_f16(vmaxq_f16(v163, v170), v176), v450), (float16x8_t)0), v135));
          uint64_t v188 = v180.u32[0];
          float16x8_t v189 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v187.i8);
          v177.i16[0] = *(_WORD *)&v46[2 * v183];
          v177.i16[1] = *(_WORD *)&v46[2 * v182];
          uint32x4_t v190 = vmovl_high_u16(v187);
          v177.i16[2] = *(_WORD *)&v46[2 * v185];
          uint64_t v191 = v190.u32[1];
          v177.i16[3] = *(_WORD *)&v46[2 * v184];
          float v192 = (__int16 *)&v46[2 * v144.i64[1]];
          v189.i16[0] = *(_WORD *)&v46[2 * v189.u32[0]];
          v177.i16[4] = *(_WORD *)&v46[2 * v188];
          v144.i64[1] = v190.u32[3];
          v177.i16[5] = *(_WORD *)&v46[2 * v186];
          v177.i16[6] = *(_WORD *)&v46[2 * v144.i64[0]];
          v189.i16[1] = *(_WORD *)&v46[2 * v189.u32[1]];
          v189.i16[2] = *(_WORD *)&v46[2 * v189.u32[2]];
          v177.i16[7] = *v192;
          uint64_t v193 = v190.u32[2];
          v189.i16[3] = *(_WORD *)&v46[2 * v189.u32[3]];
          v189.i16[4] = *(_WORD *)&v46[2 * v190.u32[0]];
          float16x8_t v194 = vmulq_f16(v136, v177);
          v189.i16[5] = *(_WORD *)&v46[2 * v191];
          v189.i16[6] = *(_WORD *)&v46[2 * v193];
          float16x8_t v195 = vmulq_f16(v126, v177);
          v189.i16[7] = *(_WORD *)&v46[2 * v144.i64[1]];
          float16x8_t v196 = vmulq_f16(v163, v189);
          float16x8_t v197 = vmulq_f16(v170, v189);
          float16x8_t v198 = vmulq_f16(v153, v177);
          float16x8_t v199 = vmulq_f16(v176, v189);
          float16x8_t v200 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v194, v449), v195, v448), v198, v447);
          v153.i16[7] = HIWORD(v442);
          float16x8_t v201 = vmlaq_n_f16(vmulq_n_f16(v198, _H12), v195, *(short float *)&v442);
          float16x8_t v202 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v196, v449), v197, v448), v199, v447);
          float16x8_t v203 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v194, v446), v195, v445), v198, v444);
          float16x8_t v204 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v196, v446), v197, v445), v199, v444);
          float16x8_t v205 = vmlaq_n_f16(v201, v194, v443);
          float16x8_t v206 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v199, _H12), v197, *(short float *)&v442), v196, v443);
          uint16x8_t v207 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v200, (float16x8_t)0), v135));
          uint32x4_t v208 = vmovl_high_u16(v207);
          v195.i64[0] = v208.u32[2];
          uint32x4_t v209 = vmovl_u16(*(uint16x4_t *)v207.i8);
          uint64_t v210 = v209.u32[1];
          uint64_t v211 = v209.u32[0];
          uint64_t v212 = v209.u32[3];
          uint64_t v213 = v209.u32[2];
          uint64_t v214 = v208.u32[1];
          uint64_t v215 = v208.u32[0];
          uint16x8_t v216 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v203, (float16x8_t)0), v135));
          uint64_t v217 = v208.u32[3];
          float16x8_t v218 = (float16x8_t)vmovl_high_u16(v216);
          v144.i64[0] = v218.u32[2];
          v144.i64[1] = v218.u32[3];
          v218.i64[1] = v218.u32[1];
          uint32x4_t v219 = vmovl_u16(*(uint16x4_t *)v216.i8);
          v196.i64[1] = v219.u32[3];
          uint64_t v220 = v219.u32[1];
          uint64_t v221 = v219.u32[0];
          uint64_t v222 = v219.u32[2];
          uint64_t v223 = v218.u32[0];
          v196.i16[0] = *(_WORD *)&v50[2 * v211];
          uint64_t v224 = v144.i64[1];
          uint64_t v225 = v144.i64[0];
          uint16x8_t v226 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v205, (float16x8_t)0), v135));
          float16x8_t v227 = (float16x8_t)vmovl_high_u16(v226);
          v144.i64[0] = v227.u32[2];
          v144.i64[1] = v227.u32[3];
          float16x8_t v228 = v144;
          v144.i64[0] = v227.u32[0];
          v195.i64[1] = v227.u32[1];
          v227.i16[0] = *(_WORD *)&v50[2 * v221];
          uint32x4_t v229 = vmovl_u16(*(uint16x4_t *)v226.i8);
          uint64_t v230 = v229.u32[1];
          float v231 = (__int16 *)&v50[2 * v222];
          v218.i16[0] = *(_WORD *)&v50[2 * v229.u32[0]];
          uint64_t v232 = v229.u32[3];
          float v233 = (__int16 *)&v50[2 * v210];
          float v234 = (__int16 *)&v50[2 * v229.u32[2]];
          uint64_t v235 = v144.i64[0];
          uint64_t v236 = v228.i64[1];
          uint64_t v237 = v228.i64[0];
          uint16x8_t v238 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v202, (float16x8_t)0), v135));
          uint32x4_t v239 = vmovl_high_u16(v238);
          v144.i64[0] = v239.u32[2];
          v144.i64[1] = v239.u32[3];
          float16x8_t v240 = v144;
          v144.i64[1] = v239.u32[1];
          uint32x4_t v241 = vmovl_u16(*(uint16x4_t *)v238.i8);
          v196.i16[1] = *v233;
          v153.i16[0] = *(_WORD *)&v50[2 * v241.u32[0]];
          v227.i16[1] = *(_WORD *)&v50[2 * v220];
          v218.i16[1] = *(_WORD *)&v50[2 * v230];
          v153.i16[1] = *(_WORD *)&v50[2 * v241.u32[1]];
          v196.i16[2] = *(_WORD *)&v50[2 * v213];
          float v242 = (__int16 *)&v50[2 * v241.u32[3]];
          v153.i16[2] = *(_WORD *)&v50[2 * v241.u32[2]];
          uint64_t v243 = v239.u32[0];
          v227.i16[2] = *v231;
          uint16x8_t v244 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v204, (float16x8_t)0), v135));
          uint32x4_t v245 = vmovl_u16(*(uint16x4_t *)v244.i8);
          v218.i16[2] = *v234;
          v204.i16[7] = (unint64_t)v245.u32[1] >> 48;
          v153.i16[3] = *v242;
          v204.i16[0] = *(_WORD *)&v50[2 * v245.u32[0]];
          v196.i16[3] = *(_WORD *)&v50[2 * v212];
          float v246 = (__int16 *)&v50[2 * v215];
          v227.i16[3] = *(_WORD *)&v50[2 * v196.i64[1]];
          float v247 = (__int16 *)&v50[2 * v217];
          v218.i16[3] = *(_WORD *)&v50[2 * v232];
          float v248 = (__int16 *)&v50[2 * v218.i64[1]];
          v153.i16[4] = *(_WORD *)&v50[2 * v243];
          float v83 = v490;
          v196.i16[4] = *v246;
          uint32x4_t v249 = vmovl_high_u16(v244);
          float v78 = v497;
          v227.i16[4] = *(_WORD *)&v50[2 * v223];
          v204.i16[1] = *(_WORD *)&v50[2 * v245.u32[1]];
          v218.i16[4] = *(_WORD *)&v50[2 * v235];
          v153.i16[5] = *(_WORD *)&v50[2 * v144.i64[1]];
          v204.i16[2] = *(_WORD *)&v50[2 * v245.u32[2]];
          *(__int32 *)((char *)&v196.i32[2] + 2) = *(unsigned __int16 *)&v50[2 * v214];
          v204.i16[3] = *(_WORD *)&v50[2 * v245.u32[3]];
          v227.i16[5] = *v248;
          v204.i16[4] = *(_WORD *)&v50[2 * v249.u32[0]];
          *(__int32 *)((char *)&v218.i32[2] + 2) = *(unsigned __int16 *)&v50[2 * v195.i64[1]];
          uint64_t v250 = v249.u32[3];
          v153.i16[6] = *(_WORD *)&v50[2 * v240.i64[0]];
          v204.i16[5] = *(_WORD *)&v50[2 * v249.u32[1]];
          v204.i16[6] = *(_WORD *)&v50[2 * v249.u32[2]];
          v196.i16[6] = *(_WORD *)&v50[2 * v195.i64[0]];
          v113.i64[0] = 0x9000900090009000;
          v113.i64[1] = 0x9000900090009000;
          float16x8_t v112 = 0uLL;
          uint16x8_t v251 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v206, (float16x8_t)0), v113));
          uint32x4_t v252 = vmovl_high_u16(v251);
          v227.i16[6] = *(_WORD *)&v50[2 * v225];
          uint32x4_t v253 = vmovl_u16(*(uint16x4_t *)v251.i8);
          uint64_t v254 = v253.u32[1];
          v218.i16[6] = *(_WORD *)&v50[2 * v237];
          v144.i64[0] = v253.u32[2];
          uint64_t v255 = v253.u32[0];
          uint64_t v256 = v253.u32[3];
          float16x8_t v257 = (float16x8_t)vuzp1q_s16((int16x8_t)v153, (int16x8_t)v204);
          uint64_t v258 = v252.u32[1];
          v153.i16[7] = *(_WORD *)&v50[2 * v240.i64[1]];
          uint64_t v259 = v252.u32[0];
          float16x8_t v260 = (float16x8_t)vuzp1q_s16((int16x8_t)v196, (int16x8_t)v227);
          v196.i16[7] = *v247;
          uint64_t v261 = v252.u32[3];
          v227.i16[7] = *(_WORD *)&v50[2 * v224];
          uint64_t v262 = v252.u32[2];
          float16x8_t v263 = (float16x8_t)vuzp2q_s16((int16x8_t)v196, (int16x8_t)v227);
          float16x8_t v264 = vmlaq_n_f16(vmlaq_n_f16(v60, v196, v456), v227, v455);
          float16x8_t v265 = (float16x8_t)vtrn1q_s16((int16x8_t)v218, (int16x8_t)v218);
          v218.i16[7] = *(_WORD *)&v50[2 * v236];
          v204.i16[7] = *(_WORD *)&v50[2 * v250];
          int16x8_t v266 = (int16x8_t)vaddq_f16(v260, v263);
          float16x8_t v267 = vmlaq_n_f16(vmlaq_n_f16(v60, v153, v456), v204, v455);
          v196.i16[0] = *(_WORD *)&v50[2 * v255];
          v196.i16[1] = *(_WORD *)&v50[2 * v254];
          v196.i16[2] = *(_WORD *)&v50[2 * v144.i64[0]];
          v196.i16[3] = *(_WORD *)&v50[2 * v256];
          v196.i16[4] = *(_WORD *)&v50[2 * v259];
          v196.i16[5] = *(_WORD *)&v50[2 * v258];
          float v268 = (__int16 *)&v50[2 * v262];
          uint64_t v76 = v491;
          v196.i16[6] = *v268;
          int16x8_t v269 = (int16x8_t)vaddq_f16(v257, (float16x8_t)vuzp2q_s16((int16x8_t)v153, (int16x8_t)v204));
          float16x8_t v270 = (float16x8_t)vtrn1q_s16((int16x8_t)v196, (int16x8_t)v196);
          v196.i16[7] = *(_WORD *)&v50[2 * v261];
          uint16x8_t *v498 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v264, v218, v454), v60), v476)), v441);
          float v73 = v498 + 1;
          *(uint16x8_t *)&v492[v110] = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v61, v57, (float16x8_t)vzip1q_s16(v266, v266)), v58, (float16x8_t)vzip2q_s16(v266, v266)), v59, vaddq_f16(v265, (float16x8_t)vtrn2q_s16((int16x8_t)v218, (int16x8_t)v218))), v475), v474)), v441);
          *v108++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v267, v196, v454), v60), v476)), v441);
          *(uint16x8_t *)&v490[v110] = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v61, v57, (float16x8_t)vzip1q_s16(v269, v269)), v58, (float16x8_t)vzip2q_s16(v269, v269)), v59, vaddq_f16(v270, (float16x8_t)vtrn2q_s16((int16x8_t)v196, (int16x8_t)v196))), v475), v474)), v441);
          int v111 = v496 + 8;
          v110 += 16;
        }
        while (v496 + 8 < v473);
        float16x8_t v271 = v58;
        float16x8_t v272 = v51;
        float v273 = (unsigned __int16 *)(v491 + v110);
        float v79 = &v492[v110];
        float v274 = &v490[v110];
        uint64_t v84 = v423;
        unint64_t v275 = v424;
        unint64_t v13 = v434;
        unint64_t v16 = v435;
        uint64_t v31 = v432;
        uint64_t v30 = v433;
        uint64_t v26 = v430;
        uint64_t v27 = v431;
        float v109 = v436;
        unint64_t v12 = v437;
        result = v428;
        uint64_t v75 = v429;
        uint64_t v81 = v427;
        unsigned __int8 v82 = v425;
        unsigned __int8 v80 = v426;
        float16x8_t v277 = v493;
        float16x8_t v276 = v494;
        float v38 = v422;
      }
      for (; v13 > v275; float16x8_t v61 = v477)
      {
        float v278 = (float)(v273[1] >> v80) - v38;
        float v279 = *((float *)&v489 + 1) * v278;
        float v280 = _S20 * (float)((float)(v78->u16[0] >> v80) - v36);
        float v281 = (float)(*((float *)&v489 + 1) * v278) + v280;
        float v282 = 8191.0;
        if (v281 <= 8191.0)
        {
          float v282 = (float)(*((float *)&v489 + 1) * v278) + v280;
          if (v281 < 0.0) {
            float v282 = 0.0;
          }
        }
        float v283 = (float)(*v273 >> v80) - v38;
        float v284 = (float)(*((float *)&v488 + 1) * v278) + (float)(v283 * *(float *)&v488);
        float v285 = 8191.0;
        if ((float)(v280 + v284) <= 8191.0)
        {
          float v285 = v280 + v284;
          if ((float)(v280 + v284) < 0.0) {
            float v285 = 0.0;
          }
        }
        float v286 = *(float *)&v489 * v283;
        float v287 = (float)(*(float *)&v489 * v283) + v280;
        float v288 = 8191.0;
        if (v287 <= 8191.0)
        {
          float v288 = v287;
          if (v287 < 0.0) {
            float v288 = 0.0;
          }
        }
        float v289 = _S20 * (float)((float)(v78->u16[1] >> v80) - v36);
        float v290 = 8191.0;
        if ((float)(v279 + v289) <= 8191.0)
        {
          float v290 = v279 + v289;
          if ((float)(v279 + v289) < 0.0) {
            float v290 = 0.0;
          }
        }
        float v291 = 8191.0;
        if ((float)(v284 + v289) <= 8191.0)
        {
          float v291 = v284 + v289;
          if ((float)(v284 + v289) < 0.0) {
            float v291 = 0.0;
          }
        }
        float v292 = v286 + v289;
        float v293 = 8191.0;
        if (v292 <= 8191.0)
        {
          float v293 = v292;
          if (v292 < 0.0) {
            float v293 = 0.0;
          }
        }
        float v294 = _S20 * (float)((float)(v107->u16[0] >> v80) - v36);
        float v295 = 8191.0;
        if ((float)(v279 + v294) <= 8191.0)
        {
          float v295 = v279 + v294;
          if ((float)(v279 + v294) < 0.0) {
            float v295 = 0.0;
          }
        }
        float v296 = 8191.0;
        if ((float)(v284 + v294) <= 8191.0)
        {
          float v296 = v284 + v294;
          if ((float)(v284 + v294) < 0.0) {
            float v296 = 0.0;
          }
        }
        float v297 = v286 + v294;
        float v298 = 8191.0;
        if (v297 <= 8191.0)
        {
          float v298 = v297;
          if (v297 < 0.0) {
            float v298 = 0.0;
          }
        }
        float v299 = _S20 * (float)((float)(v107->u16[1] >> v80) - v36);
        float v300 = v279 + v299;
        BOOL v301 = (float)(v279 + v299) <= 8191.0;
        float v302 = 8191.0;
        if (v301)
        {
          float v302 = v300;
          if (v300 < 0.0) {
            float v302 = 0.0;
          }
        }
        float v303 = v284 + v299;
        BOOL v301 = (float)(v284 + v299) <= 8191.0;
        float v304 = 8191.0;
        if (v301)
        {
          float v304 = v303;
          if (v303 < 0.0) {
            float v304 = 0.0;
          }
        }
        float v305 = v38;
        float v306 = v286 + v299;
        BOOL v301 = (float)(v286 + v299) <= 8191.0;
        float v307 = 8191.0;
        if (v301)
        {
          float v307 = v306;
          if (v306 < 0.0) {
            float v307 = 0.0;
          }
        }
        _H1 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v282, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H3 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v285, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H4 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v288, 0.0), 8191.0))];
        __asm { FCVT            S4, H4 }
        _H24 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v290, 0.0), 8191.0))];
        _H6 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v291, 0.0), 8191.0))];
        _H16 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v293, 0.0), 8191.0))];
        _H14 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v295, 0.0), 8191.0))];
        _H15 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v296, 0.0), 8191.0))];
        _H21 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v298, 0.0), 8191.0))];
        _H18 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v302, 0.0), 8191.0))];
        _H22 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v304, 0.0), 8191.0))];
        _H0 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v307, 0.0), 8191.0))];
        float v323 = (float)((float)((float)(v460 * _S3) + (float)(v461 * _S1)) + (float)(v459 * _S4))
             + (float)(v458 * fmaxf(_S1, fmaxf(_S3, _S4)));
        float v324 = 8191.0;
        if (v323 <= 8191.0)
        {
          float v324 = v323;
          if (v323 < 0.0) {
            float v324 = 0.0;
          }
        }
        __asm
        {
          FCVT            S5, H24
          FCVT            S6, H6
          FCVT            S16, H16
        }
        _H13 = *(_WORD *)&v46[2 * llroundf(v324)];
        float v329 = (float)((float)((float)(v460 * _S6) + (float)(v461 * _S5)) + (float)(v459 * _S16))
             + (float)(v458 * fmaxf(_S5, fmaxf(_S6, _S16)));
        float v330 = 8191.0;
        if (v329 <= 8191.0)
        {
          float v330 = v329;
          if (v329 < 0.0) {
            float v330 = 0.0;
          }
        }
        __asm
        {
          FCVT            S14, H14
          FCVT            S15, H15
          FCVT            S21, H21
        }
        _H24 = *(_WORD *)&v46[2 * llroundf(v330)];
        float v335 = fmaxf(_S14, fmaxf(_S15, _S21));
        float v336 = (float)((float)((float)(v460 * _S15) + (float)(v461 * _S14)) + (float)(v459 * _S21))
             + (float)(v458 * v335);
        float v337 = 8191.0;
        if (v336 <= 8191.0)
        {
          float v337 = (float)((float)((float)(v460 * _S15) + (float)(v461 * _S14)) + (float)(v459 * _S21))
               + (float)(v458 * v335);
          if (v336 < 0.0) {
            float v337 = 0.0;
          }
        }
        __asm
        {
          FCVT            S18, H18
          FCVT            S22, H22
          FCVT            S0, H0
        }
        _H23 = *(_WORD *)&v46[2 * llroundf(v337)];
        float v342 = (float)((float)((float)(v460 * _S22) + (float)(v461 * _S18)) + (float)(v459 * _S0))
             + (float)(v458 * fmaxf(_S18, fmaxf(_S22, _S0)));
        float v343 = 8191.0;
        if (v342 <= 8191.0)
        {
          float v343 = v342;
          if (v342 < 0.0) {
            float v343 = 0.0;
          }
        }
        __asm { FCVT            S9, H13 }
        float v345 = _S1 * _S9;
        float v346 = _S3 * _S9;
        float v347 = _S4 * _S9;
        __asm { FCVT            S24, H24 }
        float v349 = _S5 * _S24;
        float v350 = _S6 * _S24;
        float v351 = _S16 * _S24;
        __asm { FCVT            S23, H23 }
        float v353 = _S14 * _S23;
        float v354 = _S15 * _S23;
        float v355 = _S21 * _S23;
        LOWORD(_S23) = *(_WORD *)&v46[2 * llroundf(v343)];
        __asm { FCVT            S23, H23 }
        float v357 = _S18 * _S23;
        float v358 = _S22 * _S23;
        _S0 = _S0 * _S23;
        float v360 = (float)((float)(v471 * v346) + (float)(v345 * v472)) + (float)(v347 * v470);
        float v361 = (float)((float)(v468 * v346) + (float)(v345 * v469)) + (float)(v347 * v487);
        float v362 = (float)((float)(v464 * v346) + (float)(v345 * v465)) + (float)(v347 * v486);
        float v363 = (float)((float)(v471 * v350) + (float)(v349 * v472)) + (float)(v351 * v470);
        float v364 = (float)((float)(v468 * v350) + (float)(v349 * v469)) + (float)(v351 * v487);
        float v365 = (float)((float)(v464 * v350) + (float)(v349 * v465)) + (float)(v351 * v486);
        float v366 = (float)((float)(v471 * v354) + (float)(v353 * v472)) + (float)(v355 * v470);
        float v367 = (float)((float)(v468 * v354) + (float)(v353 * v469)) + (float)(v355 * v487);
        float v368 = (float)((float)(v464 * v354) + (float)(v353 * v465)) + (float)(v355 * v486);
        float v369 = (float)((float)(v471 * v358) + (float)(v357 * v472)) + (float)(_S0 * v470);
        float v370 = (float)((float)(v468 * v358) + (float)(v357 * v469)) + (float)(_S0 * v487);
        unsigned int v371 = llroundf(fminf(fmaxf(v360, 0.0), 8191.0));
        float v372 = (float)((float)(v464 * v358) + (float)(v357 * v465)) + (float)(_S0 * v486);
        LOWORD(_S0) = *(_WORD *)&v50[2 * v371];
        __asm { FCVT            S18, H0 }
        LOWORD(_S0) = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v361, 0.0), 8191.0))];
        __asm { FCVT            S22, H0 }
        LOWORD(_S0) = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v362, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H21 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v363, 0.0), 8191.0))];
        _H24 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v364, 0.0), 8191.0))];
        _H13 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v365, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v366, 0.0), 8191.0))];
        _H6 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v367, 0.0), 8191.0))];
        _H16 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v368, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v369, 0.0), 8191.0))];
        _H3 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v370, 0.0), 8191.0))];
        _H4 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v372, 0.0), 8191.0))];
        float v385 = (float)((float)((float)(v440 * _S22) + (float)(v485 * _S18)) + (float)(_S27 * _S0)) + v484;
        float v386 = v502;
        if (v385 <= v502)
        {
          float v386 = (float)((float)((float)(v440 * _S22) + (float)(v485 * _S18)) + (float)(_S27 * _S0)) + v484;
          if (v385 < v484) {
            float v386 = v484;
          }
        }
        __asm
        {
          FCVT            S14, H21
          FCVT            S23, H24
          FCVT            S21, H13
        }
        float v390 = (float)((float)((float)(v440 * _S23) + (float)(v485 * _S14)) + (float)(_S27 * _S21)) + v484;
        v73->i16[0] = llroundf(v386) << v82;
        float v391 = v502;
        if (v390 <= v502)
        {
          float v391 = (float)((float)((float)(v440 * _S23) + (float)(v485 * _S14)) + (float)(_S27 * _S21)) + v484;
          if (v390 < v484) {
            float v391 = v484;
          }
        }
        v73->i16[1] = llroundf(v391) << v82;
        float v392 = _S18 + _S14;
        float v393 = _S22 + _S23;
        float v394 = _S0 + _S21;
        float v395 = (float)((float)(v48 + (float)(v392 * *(float *)&v501)) + (float)(v393 * *(float *)&v500))
             + (float)(v394 * *(float *)&v499);
        float v396 = v481;
        if (v395 <= v481)
        {
          float v396 = (float)((float)(v48 + (float)(v392 * *(float *)&v501)) + (float)(v393 * *(float *)&v500))
               + (float)(v394 * *(float *)&v499);
          if (v395 < v482) {
            float v396 = v482;
          }
        }
        float v397 = (float)((float)(v48 + (float)(v392 * *((float *)&v501 + 1))) + (float)(v393 * *((float *)&v500 + 1)))
             + (float)(v394 * *((float *)&v499 + 1));
        *(_WORD *)float v79 = llroundf(v396) << v82;
        float v398 = v481;
        float v38 = v305;
        if (v397 <= v481)
        {
          float v398 = v397;
          if (v397 < v482) {
            float v398 = v482;
          }
        }
        __asm
        {
          FCVT            S18, H5
          FCVT            S5, H6
          FCVT            S0, H16
        }
        *((_WORD *)v79 + 1) = llroundf(v398) << v82;
        float v402 = (float)((float)((float)(v440 * _S5) + (float)(v485 * _S18)) + (float)(_S27 * _S0)) + v484;
        float v403 = v502;
        float v36 = v467;
        _S20 = v466;
        float16x8_t v57 = v479;
        if (v402 <= v502)
        {
          float v403 = (float)((float)((float)(v440 * _S5) + (float)(v485 * _S18)) + (float)(_S27 * _S0)) + v484;
          if (v402 < v484) {
            float v403 = v484;
          }
        }
        __asm
        {
          FCVT            S6, H1
          FCVT            S3, H3
          FCVT            S1, H4
        }
        float v407 = (float)((float)((float)(v440 * _S3) + (float)(v485 * _S6)) + (float)(_S27 * _S1)) + v484;
        v108->i16[0] = llroundf(v403) << v82;
        float v408 = v502;
        float16x8_t v272 = v483;
        float16x8_t v271 = v480;
        if (v407 <= v502)
        {
          float v408 = (float)((float)((float)(v440 * _S3) + (float)(v485 * _S6)) + (float)(_S27 * _S1)) + v484;
          if (v407 < v484) {
            float v408 = v484;
          }
        }
        v108->i16[1] = llroundf(v408) << v82;
        float v409 = _S18 + _S6;
        float v410 = v48 + (float)((float)(_S18 + _S6) * *(float *)&v501);
        float v411 = _S5 + _S3;
        float v412 = _S0 + _S1;
        float v413 = (float)(v410 + (float)(v411 * *(float *)&v500)) + (float)(v412 * *(float *)&v499);
        float v414 = v481;
        if (v413 <= v481)
        {
          float v414 = (float)(v410 + (float)(v411 * *(float *)&v500)) + (float)(v412 * *(float *)&v499);
          if (v413 < v482) {
            float v414 = v482;
          }
        }
        float v415 = (float)((float)(v48 + (float)(v409 * *((float *)&v501 + 1))) + (float)(v411 * *((float *)&v500 + 1)))
             + (float)(v412 * *((float *)&v499 + 1));
        *(_WORD *)float v274 = llroundf(v414) << v82;
        float v416 = v481;
        float16x8_t v60 = v478;
        if (v415 <= v481)
        {
          float v416 = v415;
          if (v415 < v482) {
            float v416 = v482;
          }
        }
        v275 += 2;
        v273 += 2;
        float v78 = (uint16x8_t *)((char *)v78 + 4);
        float v107 = (uint16x8_t *)((char *)v107 + 4);
        float v73 = (uint16x8_t *)((char *)v73 + 4);
        *((_WORD *)v274 + 1) = llroundf(v416) << v82;
        v79 += 4;
        float v108 = (uint16x8_t *)((char *)v108 + 4);
        v274 += 4;
        float16x8_t v59 = v462;
      }
      float16x8_t v53 = v277;
      float16x8_t v55 = v276;
      float v78 = (uint16x8_t *)&v438[v26];
      v76 += v75;
      float v73 = (uint16x8_t *)((char *)result + (void)v439);
      float v79 = &v109[v81];
      v12 += 2;
      v83 += v84;
      float16x8_t v51 = v272;
      float16x8_t v58 = v271;
    }
    while (v16 > v12);
    if (v421 && v420)
    {
      size_t v417 = 2 * v13;
      float16x8_t v418 = __src;
      do
      {
        result = memcpy(v31, v418, v417);
        v418 += v27;
        v31 += v30;
        --v16;
      }
      while (v16);
    }
    else if (v420)
    {
      do
      {
        if (v13) {
          result = memset(v31, 255, 2 * v13);
        }
        v31 += v30;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (uint64_t *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v19 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v211 = v18[2];
    uint64_t v24 = (char *)(v211 + v23 * v12 + 2 * v11);
    uint64_t v25 = *v20;
    uint64_t v26 = v20[1];
    uint64_t v27 = v20[2];
    uint64_t v210 = v15[2];
    uint64_t v28 = (char *)(v210 + v27 * v16 + 2 * v14);
    float v29 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    float v30 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = (float)LODWORD(a5);
    float v32 = v29 * *(float *)v17;
    float v234 = v29 * *(float *)(v17 + 16);
    float v235 = v29 * *(float *)(v17 + 8);
    float v33 = v29 * *(float *)(v17 + 20);
    *(float *)&unsigned int v34 = v29 * *(float *)(v17 + 28);
    float v232 = *(float *)&v34;
    float v233 = v33;
    LOWORD(v34) = *(_WORD *)(v17 + 144);
    float v35 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 146);
    float v36 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 148);
    float v37 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 150);
    float v38 = (float)v34;
    LOWORD(v34) = *(_WORD *)(v17 + 152);
    float v39 = (float)v34;
    float v40 = *(float *)(v17 + 48) * 0.5;
    float v41 = *(float *)(v17 + 52) * 0.5;
    float v42 = *(float *)(v17 + 64) * 0.5;
    float v226 = *(float *)(v17 + 72);
    float v43 = *(float *)(v17 + 68) * 0.5;
    float v224 = *(float *)(v17 + 80);
    float v225 = *(float *)(v17 + 76);
    float v222 = *(float *)(v17 + 88);
    float v223 = *(float *)(v17 + 84);
    float v221 = *(float *)(v17 + 92);
    float v220 = *(float *)(v17 + 96);
    float v218 = *(float *)(v17 + 100);
    float v216 = *(float *)(v17 + 104);
    uint64_t v44 = v17 + 164;
    uint64_t v45 = v17 + 16548;
    uint64_t v46 = v17 + 32932;
    uint64_t v48 = *v15;
    uint64_t v47 = v15[1];
    result = (unsigned __int8 *)(v48 + *v20 * v16 + 2 * v14);
    uint64_t v49 = v47 + v26 * v16 + 2 * v14;
    if (!v47) {
      uint64_t v49 = 0;
    }
    unsigned int v50 = *(unsigned __int8 *)(v17 + 132);
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    else {
      char v51 = 16 - v50;
    }
    unsigned int v52 = *(unsigned __int8 *)(v17 + 124);
    char v53 = 16 - v52;
    uint64_t v54 = v18[1];
    float16x8_t v55 = (char *)(*v18 + v21 * v12 + 2 * v11);
    if (v52 >= 0x11) {
      char v53 = 0;
    }
    uint64_t v56 = v54 + v22 * (v12 / 2) + 2 * v11;
    char v57 = v53;
    float16x8_t v58 = (_WORD *)(v49 + 2);
    float v59 = *(float *)(v17 + 108);
    float v60 = *(float *)(v17 + 112);
    float v61 = *(float *)(v17 + 116);
    float v212 = *(float *)(v17 + 120);
    float v213 = v59;
    float v236 = (float)LODWORD(a5);
    float v237 = v30;
    float v230 = v38;
    float v231 = v36;
    float v228 = v32;
    float v229 = *(float *)(v17 + 36);
    float v227 = *(float *)(v17 + 60) * 0.5;
    float v219 = *(float *)(v17 + 44);
    float v217 = *(float *)(v17 + 40);
    float v215 = *(float *)(v17 + 56) * 0.5;
    float v214 = v60;
    do
    {
      int16x8_t v62 = &v55[v21];
      int16x8_t v63 = &result[v25];
      if (v10)
      {
        unint64_t v64 = 0;
        unsigned int v65 = v58;
        unsigned __int8 v66 = &v55[v21];
        unsigned int v67 = &result[v25];
        do
        {
          unsigned __int8 v68 = (unsigned __int16 *)(v56 + 2 * v64);
          float v69 = (float)(v68[1] >> v57) - v31;
          float v70 = v235 * v69;
          float v71 = v32 * (float)((float)(*(unsigned __int16 *)v55 >> v57) - v30);
          float v72 = (float)(v235 * v69) + v71;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = (float)(v235 * v69) + v71;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = (float)(*v68 >> v57) - v31;
          float v75 = (float)(v233 * v69) + (float)(v74 * v234);
          float v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            float v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v232 * v74;
          float v78 = (float)(v232 * v74) + v71;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v32 * (float)((float)(*((unsigned __int16 *)v55 + 1) >> v57) - v30);
          float v81 = 8191.0;
          if ((float)(v70 + v80) <= 8191.0)
          {
            float v81 = v70 + v80;
            if ((float)(v70 + v80) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = 8191.0;
          if ((float)(v75 + v80) <= 8191.0)
          {
            float v82 = v75 + v80;
            if ((float)(v75 + v80) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v77 + v80;
          BOOL v84 = (float)(v77 + v80) <= 8191.0;
          float v85 = 8191.0;
          if (v84)
          {
            float v85 = v83;
            if (v83 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v32 * (float)((float)(*(unsigned __int16 *)v66 >> v57) - v30);
          float v87 = 8191.0;
          if ((float)(v70 + v86) <= 8191.0)
          {
            float v87 = v70 + v86;
            if ((float)(v70 + v86) < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = 8191.0;
          if ((float)(v75 + v86) <= 8191.0)
          {
            float v88 = v75 + v86;
            if ((float)(v75 + v86) < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v77 + v86;
          BOOL v84 = (float)(v77 + v86) <= 8191.0;
          float v90 = 8191.0;
          if (v84)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v32 * (float)((float)(*((unsigned __int16 *)v66 + 1) >> v57) - v30);
          float v92 = v70 + v91;
          BOOL v84 = (float)(v70 + v91) <= 8191.0;
          float v93 = 8191.0;
          if (v84)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v75 + v91;
          BOOL v84 = (float)(v75 + v91) <= 8191.0;
          float v95 = 8191.0;
          if (v84)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          float v96 = v77 + v91;
          float v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S24, H22 }
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          _H27 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          float v117 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v118 = (float)((float)((float)(v60 * _S24) + (float)(v59 * _S2)) + (float)(v61 * _S25)) + (float)(v212 * v117);
          float v119 = 8191.0;
          if (v118 <= 8191.0)
          {
            float v119 = (float)((float)((float)(v60 * _S24) + (float)(v59 * _S2)) + (float)(v61 * _S25))
                 + (float)(v212 * v117);
            if (v118 < 0.0) {
              float v119 = 0.0;
            }
          }
          __asm
          {
            FCVT            S1, H27
            FCVT            S3, H31
            FCVT            S17, H8
          }
          _H27 = *(_WORD *)(v45 + 2 * llroundf(v119));
          float v124 = (float)((float)((float)(v60 * _S3) + (float)(v59 * _S1)) + (float)(v61 * _S17))
               + (float)(v212 * fmaxf(_S1, fmaxf(_S3, _S17)));
          float v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            float v125 = v124;
            if (v124 < 0.0) {
              float v125 = 0.0;
            }
          }
          __asm
          {
            FCVT            S28, H30
            FCVT            S22, H22
            FCVT            S23, H23
          }
          _H29 = *(_WORD *)(v45 + 2 * llroundf(v125));
          float v130 = (float)((float)((float)(v60 * _S22) + (float)(v59 * _S28)) + (float)(v61 * _S23))
               + (float)(v212 * fmaxf(_S28, fmaxf(_S22, _S23)));
          float v131 = 8191.0;
          if (v130 <= 8191.0)
          {
            float v131 = v130;
            if (v130 < 0.0) {
              float v131 = 0.0;
            }
          }
          float v132 = v41;
          __asm
          {
            FCVT            S19, H19
            FCVT            S21, H21
            FCVT            S26, H26
          }
          _H30 = *(_WORD *)(v45 + 2 * llroundf(v131));
          float v137 = (float)((float)((float)(v60 * _S21) + (float)(v59 * _S19)) + (float)(v61 * _S26))
               + (float)(v212 * fmaxf(_S19, fmaxf(_S21, _S26)));
          float v138 = 8191.0;
          if (v137 <= 8191.0)
          {
            float v138 = v137;
            if (v137 < 0.0) {
              float v138 = 0.0;
            }
          }
          __asm { FCVT            S27, H27 }
          float v140 = _S2 * _S27;
          float v141 = _S24 * _S27;
          float v142 = _S25 * _S27;
          __asm { FCVT            S27, H29 }
          float v144 = _S1 * _S27;
          float v145 = _S3 * _S27;
          _S17 = _S17 * _S27;
          __asm { FCVT            S27, H30 }
          float v148 = _S28 * _S27;
          float v149 = _S22 * _S27;
          float v150 = _S23 * _S27;
          LOWORD(_S27) = *(_WORD *)(v45 + 2 * llroundf(v138));
          __asm { FCVT            S27, H27 }
          float v152 = _S19 * _S27;
          float v153 = _S21 * _S27;
          float v154 = _S26 * _S27;
          float v155 = (float)((float)(v225 * v141) + (float)(v140 * v226)) + (float)(v142 * v224);
          float v156 = (float)((float)(v222 * v141) + (float)(v140 * v223)) + (float)(v142 * v221);
          _S2 = (float)((float)(v218 * v141) + (float)(v140 * v220)) + (float)(v142 * v216);
          float v158 = (float)((float)(v225 * v145) + (float)(v144 * v226)) + (float)(_S17 * v224);
          float v159 = (float)((float)(v222 * v145) + (float)(v144 * v223)) + (float)(_S17 * v221);
          float v160 = (float)((float)(v218 * v145) + (float)(v144 * v220)) + (float)(_S17 * v216);
          float v161 = (float)((float)(v225 * v149) + (float)(v148 * v226)) + (float)(v150 * v224);
          float v162 = (float)((float)(v222 * v149) + (float)(v148 * v223)) + (float)(v150 * v221);
          float v163 = (float)((float)(v218 * v149) + (float)(v148 * v220)) + (float)(v150 * v216);
          float v164 = (float)((float)(v225 * v153) + (float)(v152 * v226)) + (float)(v154 * v224);
          float v165 = (float)((float)(v222 * v153) + (float)(v152 * v223)) + (float)(v154 * v221);
          float v166 = (float)((float)(v218 * v153) + (float)(v152 * v220)) + (float)(v154 * v216);
          LOWORD(_S17) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          __asm { FCVT            S21, H17 }
          LOWORD(_S17) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm { FCVT            S25, H17 }
          LOWORD(_S2) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S26, H2 }
          _H22 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          float v179 = (float)((float)((float)(v217 * _S25) + (float)(v229 * _S21)) + (float)(v219 * _S26)) + v35;
          float v180 = v37;
          if (v179 <= v37)
          {
            float v180 = (float)((float)((float)(v217 * _S25) + (float)(v229 * _S21)) + (float)(v219 * _S26)) + v35;
            if (v179 < v35) {
              float v180 = v35;
            }
          }
          __asm
          {
            FCVT            S28, H22
            FCVT            S23, H23
            FCVT            S22, H27
          }
          float v184 = (float)((float)((float)(v217 * _S23) + (float)(v229 * _S28)) + (float)(v219 * _S22)) + v35;
          *(_WORD *)result = llroundf(v180) << v51;
          float v185 = v37;
          float v41 = v132;
          if (v184 <= v37)
          {
            float v185 = (float)((float)((float)(v217 * _S23) + (float)(v229 * _S28)) + (float)(v219 * _S22)) + v35;
            if (v184 < v35) {
              float v185 = v35;
            }
          }
          *((_WORD *)result + 1) = llroundf(v185) << v51;
          float v186 = _S21 + _S28;
          float v187 = _S25 + _S23;
          float v188 = _S26 + _S22;
          float v189 = (float)((float)(v231 + (float)(v186 * v40)) + (float)(v187 * v132)) + (float)(v188 * v215);
          float v190 = v39;
          float v59 = v213;
          if (v189 <= v39)
          {
            float v190 = (float)((float)(v231 + (float)(v186 * v40)) + (float)(v187 * v132)) + (float)(v188 * v215);
            if (v189 < v230) {
              float v190 = v230;
            }
          }
          float v32 = v228;
          float v191 = (float)((float)(v231 + (float)(v186 * v227)) + (float)(v187 * v42)) + (float)(v188 * v43);
          *(v65 - 1) = llroundf(v190) << v51;
          float v192 = v39;
          float v60 = v214;
          if (v191 <= v39)
          {
            float v192 = v191;
            if (v191 < v230) {
              float v192 = v230;
            }
          }
          __asm
          {
            FCVT            S21, H17
            FCVT            S19, H19
            FCVT            S17, H24
          }
          *unsigned int v65 = llroundf(v192) << v51;
          float v196 = (float)((float)((float)(v217 * _S19) + (float)(v229 * _S21)) + (float)(v219 * _S17)) + v35;
          float v197 = v37;
          if (v196 <= v37)
          {
            float v197 = (float)((float)((float)(v217 * _S19) + (float)(v229 * _S21)) + (float)(v219 * _S17)) + v35;
            if (v196 < v35) {
              float v197 = v35;
            }
          }
          __asm
          {
            FCVT            S22, H1
            FCVT            S2, H2
            FCVT            S1, H3
          }
          float v201 = (float)((float)((float)(v217 * _S2) + (float)(v229 * _S22)) + (float)(v219 * _S1)) + v35;
          *(_WORD *)unsigned int v67 = llroundf(v197) << v51;
          float v202 = v37;
          if (v201 <= v37)
          {
            float v202 = (float)((float)((float)(v217 * _S2) + (float)(v229 * _S22)) + (float)(v219 * _S1)) + v35;
            if (v201 < v35) {
              float v202 = v35;
            }
          }
          *((_WORD *)v67 + 1) = llroundf(v202) << v51;
          float v203 = _S19 + _S2;
          float v204 = _S17 + _S1;
          float v205 = (float)((float)(v231 + (float)((float)(_S21 + _S22) * v40)) + (float)(v203 * v132))
               + (float)(v204 * v215);
          float v206 = v39;
          if (v205 <= v39)
          {
            float v206 = (float)((float)(v231 + (float)((float)(_S21 + _S22) * v40)) + (float)(v203 * v132))
                 + (float)(v204 * v215);
            if (v205 < v230) {
              float v206 = v230;
            }
          }
          float v207 = (float)((float)(v231 + (float)((float)(_S21 + _S22) * v227)) + (float)(v203 * v42))
               + (float)(v204 * v43);
          *(_WORD *)((char *)v65 + v26 - 2) = llroundf(v206) << v51;
          float v208 = v39;
          float v30 = v237;
          if (v207 <= v39)
          {
            float v208 = v207;
            if (v207 < v230) {
              float v208 = v230;
            }
          }
          v55 += 4;
          v66 += 4;
          result += 4;
          v67 += 4;
          *(_WORD *)((char *)v65 + v26) = llroundf(v208) << v51;
          v64 += 2;
          v65 += 2;
          float v31 = v236;
        }
        while (v10 > v64);
      }
      float16x8_t v55 = &v62[v21];
      v56 += v22;
      result = &v63[v25];
      v9 += 2;
      v58 += v26;
    }
    while (v13 > v9);
    if (v211 && v210)
    {
      size_t v209 = 2 * v10;
      do
      {
        result = (unsigned __int8 *)memcpy(v28, v24, v209);
        v24 += v23;
        v28 += v27;
        --v13;
      }
      while (v13);
    }
    else if (v210)
    {
      do
      {
        if (v10) {
          result = (unsigned __int8 *)memset(v28, 255, 2 * v10);
        }
        v28 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_xf422_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, float32x4_t a4, double a5, double a6, double a7, double a8, double a9, int16x4_t a10)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = 2 * *result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (2 * v17 != 2 * v16)
  {
    unint64_t v18 = 0;
    unint64_t v19 = *(void *)(result + 20);
    uint64_t v20 = *(void *)(result + 36);
    uint64_t v21 = *(void *)(result + 44) + 2 * v16;
    unint64_t v22 = 2 * v17 - 2 * v16;
    uint64_t v23 = *((void *)result + 14);
    uint64_t v24 = (void *)*((void *)result + 16);
    uint64_t v25 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v15);
    uint64_t v26 = (float32x2_t *)*((void *)result + 19);
    uint64_t v27 = (void *)*((void *)result + 7);
    uint64_t v28 = (uint64_t *)*((void *)result + 8);
    uint64_t v29 = (uint64_t *)*((void *)result + 17);
    uint64_t v30 = *v28;
    uint64_t v31 = v28[1];
    uint64_t v32 = v28[2];
    uint64_t v371 = v27[2];
    uint64_t v34 = *v29;
    uint64_t v33 = v29[1];
    uint64_t v35 = v29[2];
    uint64_t v370 = v24[2];
    uint64_t v36 = (char *)(v370 + v35 * v25 + 2 * v23);
    LODWORD(v28) = v26[17].u16[2];
    unsigned int v37 = v26[17].u16[3];
    a10.i32[0] = v26->i32[0];
    a4.i32[0] = v26[3].i32[1];
    LODWORD(v29) = v26[18].u16[0];
    LODWORD(a3) = 1174403072;
    unsigned int v38 = v26[18].u16[1];
    float v39 = (float)v28;
    float v40 = (float)v37;
    *(short float *)v12.i16 = (short float)v28;
    unsigned int v41 = v26[18].u16[2];
    short float v42 = (short float)v37;
    unsigned int v43 = v26[18].u16[3];
    v44.i32[0] = v26[6].i32[0];
    float v441 = v26[5].f32[1];
    v46.i32[0] = v26[6].i32[1];
    v45.i32[0] = v26[7].i32[0];
    a4.i32[1] = v26[1].i32[0];
    v44.i32[1] = v26[7].i32[1];
    v46.i32[1] = v26[8].i32[0];
    v45.i32[1] = v26[8].i32[1];
    LODWORD(v28) = v26[19].u16[0];
    _S24 = v26[4].i32[1];
    float v442 = v26[5].f32[0];
    float v436 = (float)v29;
    *(short float *)v11.i16 = (short float)v29;
    uint64_t v48 = (char *)&v26[20] + 4;
    __src = (char *)(v371 + v32 * v21 + 2 * v20);
    float v49 = 8191.0 / (float)v26[16].u32[0];
    _S8 = v49 * v26->f32[0];
    float v51 = (float)v38;
    float v52 = (float)v41;
    float v53 = (float)v43;
    float v54 = (float)v28;
    *(short float *)a10.i16 = (short float)v38;
    float16x8_t v55 = (char *)&v26[2068] + 4;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(v12, 0);
    *(float32x2_t *)a4.f32 = vmul_n_f32(*(float32x2_t *)a4.f32, v49);
    unint64_t v428 = a4.i64[0];
    int32x2_t v57 = (int32x2_t)vcvt_f16_f32(a4);
    *(double *)&v58.i64[1] = a3;
    float16x8_t v438 = (float16x8_t)vdupq_lane_s32(v57, 0);
    *(float32x2_t *)v58.f32 = vmul_n_f32(v26[2], v49);
    uint64_t v427 = v58.i64[0];
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v58), 0);
    float16x8_t v393 = vmulq_n_f16(v438, -v42);
    float16x8_t v60 = vmulq_n_f16(v59, -v42);
    *(float32x2_t *)v13.f32 = vmul_f32(v44, (float32x2_t)0x3F0000003F000000);
    float32x4_t v61 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v13), 0);
    float16x8_t v426 = (float16x8_t)v61;
    *(float32x2_t *)v61.f32 = vmul_f32(v46, (float32x2_t)0x3F0000003F000000);
    uint64_t v439 = v61.i64[0];
    float16x8_t v62 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v61), 0);
    float16x8_t v63 = v59;
    *(float32x2_t *)v10.f32 = vmul_f32(v45, (float32x2_t)0x3F0000003F000000);
    float16x8_t v64 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(v11, 0);
    int16x8_t v66 = vdupq_lane_s16(a10, 0);
    float16x8_t v423 = (float16x8_t)v66;
    *(short float *)v66.i16 = (short float)v41;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v66.i8, 0);
    *(short float *)v66.i16 = (short float)v43;
    int16x8_t v68 = vdupq_lane_s16(*(int16x4_t *)v66.i8, 0);
    float16x8_t v421 = (float16x8_t)v68;
    *(short float *)v68.i16 = (short float)v28;
    int16x8_t v69 = vdupq_lane_s16(*(int16x4_t *)v68.i8, 0);
    unsigned int v70 = v26[16].u8[4];
    if (v70 >= 0x11) {
      unsigned __int8 v71 = 0;
    }
    else {
      unsigned __int8 v71 = 16 - v70;
    }
    unsigned int v72 = v26[15].u8[4];
    unsigned __int8 v73 = 16 - v72;
    if (v72 >= 0x11) {
      unsigned __int8 v73 = 0;
    }
    uint64_t v74 = v24[1];
    _ZF = v74 == 0;
    uint64_t v76 = v74 + v33 * v25 + 2 * v23;
    if (_ZF) {
      result = 0;
    }
    else {
      result = (unsigned __int8 *)v76;
    }
    float v77 = (uint16x8_t *)(*v24 + v34 * v25 + 2 * v23);
    if (v21 >= 0) {
      uint64_t v78 = v21;
    }
    else {
      uint64_t v78 = v21 + 1;
    }
    uint64_t v79 = v27[1] + v31 * (v78 >> 1) + 2 * v20;
    float v80 = (uint16x8_t *)(*v27 + v30 * v21 + 2 * v20);
    unsigned __int8 v81 = v73;
    uint16x8_t v82 = (uint16x8_t)vdupq_n_s16(-v73);
    uint64_t v83 = v33;
    unsigned __int8 v84 = v71;
    unint64_t v377 = v19 & 0xFFFFFFF8;
    float v85 = &result[v33];
    uint64_t v86 = 2 * v33;
    float v87 = _S8;
    __asm { FCVT            H8, S8 }
    short float v375 = _H8;
    float v440 = v26[4].f32[1];
    __asm { FCVT            H8, S24 }
    float16x8_t v93 = v426;
    _S3 = v26[5].i32[0];
    __asm { FCVT            H3, S3 }
    short float v404 = *(short float *)&_S3;
    _S3 = v26[5].i32[1];
    __asm { FCVT            H3, S3 }
    float v418 = v26[9].f32[0];
    __asm { FCVT            H4, S30 }
    float16x8_t v97 = v438;
    short float v402 = _H4;
    float v417 = v26[9].f32[1];
    __asm { FCVT            H4, S10 }
    float v416 = v26[10].f32[0];
    __asm { FCVT            H10, S12 }
    float v415 = v26[10].f32[1];
    __asm { FCVT            H13, S13 }
    float v413 = v26[11].f32[0];
    __asm { FCVT            H12, S18 }
    short float v398 = _H12;
    float v411 = v26[11].f32[1];
    __asm { FCVT            H12, S27 }
    short float v397 = _H12;
    float v409 = v26[12].f32[0];
    __asm { FCVT            H5, S5 }
    float v408 = v26[12].f32[1];
    __asm { FCVT            H7, S7 }
    float v406 = v26[13].f32[0];
    __asm { FCVT            H12, S16 }
    uint16x8_t v394 = (uint16x8_t)vdupq_n_s16(v71);
    uint64_t v106 = v13.i64[0];
    float v437 = v10.f32[0];
    float16x8_t v420 = (float16x8_t)v69;
    uint16x8_t v435 = v82;
    short float v403 = *(short float *)&_S3;
    short float v401 = _H4;
    unint64_t v387 = v19;
    unint64_t v388 = v22;
    float v385 = v36;
    uint64_t v386 = v35;
    uint64_t v383 = v30;
    uint64_t v384 = v32;
    uint64_t v381 = v34;
    uint64_t v382 = v31;
    uint64_t v380 = v33;
    float16x8_t v425 = v63;
    float v424 = v53;
    float16x8_t v422 = v67;
    int v419 = v19 - 7;
    unsigned __int8 v378 = v71;
    unsigned __int8 v379 = v81;
    uint64_t v376 = 2 * v33;
    float16x8_t v414 = v65;
    float16x8_t v412 = v62;
    float16x8_t v410 = v64;
    float16x8_t v407 = v56;
    float16x8_t v405 = v60;
    short float v399 = _H13;
    short float v400 = _H10;
    short float v395 = _H7;
    short float v396 = _H5;
    float v373 = v39;
    float v374 = v40;
    float v372 = v87;
    do
    {
      float v107 = (uint16x8_t *)((char *)v80 + v30);
      float v108 = &v77->i8[v34];
      float v109 = &result[v83];
      float v392 = &v80->i8[v30];
      if ((int)v19 < 8)
      {
        unint64_t v257 = 0;
        uint64_t v256 = &result[v83];
        float16x8_t v112 = (uint16x8_t *)((char *)v77 + v34);
        uint64_t v255 = (unsigned __int16 *)v79;
      }
      else
      {
        float v390 = &result[v83];
        unint64_t v391 = v18;
        uint64_t v110 = 0;
        int v111 = 0;
        float v389 = &v77->i8[v34];
        float16x8_t v112 = (uint16x8_t *)((char *)v77 + v34);
        v113.i64[0] = 0x9000900090009000;
        v113.i64[1] = 0x9000900090009000;
        uint64_t v431 = result;
        uint64_t v430 = v79;
        uint64_t v429 = v85;
        do
        {
          int v432 = v111;
          unint64_t v434 = v77;
          float16x8_t v114 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)(v79 + v110), v82));
          int8x16_t v115 = (int8x16_t)vmlaq_f16(v393, v97, v114);
          int8x16_t v116 = (int8x16_t)vmlaq_f16(v405, v63, v114);
          v114.i64[0] = vextq_s8(v115, v115, 8uLL).u64[0];
          *(int16x4_t *)v117.i8 = vuzp1_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v114.i8);
          *(int16x4_t *)v114.i8 = vuzp2_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v114.i8);
          *(double *)&v114.i64[1] = a3;
          *(double *)&v117.i64[1] = a3;
          v115.i64[0] = vextq_s8(v116, v116, 8uLL).u64[0];
          float16x8_t v118 = (float16x8_t)vzip1q_s16((int16x8_t)v114, (int16x8_t)v114);
          *(float16x4_t *)v114.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8));
          *(double *)&v114.i64[1] = a3;
          uint64_t v433 = v80 + 1;
          float16x8_t v119 = (float16x8_t)vzip1q_s16(v117, v117);
          uint16x8_t v120 = *v107++;
          float16x8_t v121 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(*v80, v82)), v56);
          float16x8_t v122 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v120, v82)), v56);
          float16x8_t v123 = vmlaq_n_f16(v118, v121, v375);
          float16x8_t v124 = vmlaq_n_f16(v118, v122, v375);
          float16x8_t v125 = (float16x8_t)vzip1q_s16((int16x8_t)v114, (int16x8_t)v114);
          float16x8_t v126 = vmlaq_n_f16(v125, v122, v375);
          float16x8_t v127 = vmlaq_n_f16(v119, v121, v375);
          float16x8_t v128 = vmlaq_n_f16(v119, v122, v375);
          float16x8_t v129 = vmlaq_n_f16(v125, v121, v375);
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v113));
          uint32x4_t v131 = vmovl_high_u16(v130);
          *(void *)&long long v132 = v131.u32[2];
          *((void *)&v132 + 1) = v131.u32[3];
          long long v133 = v132;
          *(void *)&long long v132 = v131.u32[0];
          *((void *)&v132 + 1) = v131.u32[1];
          long long v134 = v132;
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v130.i8);
          *(void *)&long long v132 = v135.u32[2];
          *((void *)&v132 + 1) = v135.u32[3];
          uint64_t v136 = v135.u32[1];
          v137.i16[0] = *(_WORD *)&v48[2 * v135.u32[0]];
          uint64_t v138 = *((void *)&v134 + 1);
          uint64_t v139 = (__int16 *)&v48[2 * v134];
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v113));
          float16x8_t v141 = (float16x8_t)vmovl_high_u16(v140);
          uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v140.i8);
          uint64_t v143 = v142.u32[1];
          uint64_t v144 = v142.u32[3];
          v145.i16[0] = *(_WORD *)&v48[2 * v142.u32[0]];
          uint32x4_t v146 = (__int16 *)&v48[2 * v142.u32[2]];
          uint64_t v147 = v141.u32[1];
          float v148 = (__int16 *)&v48[2 * v141.u32[0]];
          float v149 = (__int16 *)&v48[2 * v141.u32[2]];
          uint16x8_t v150 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, (float16x8_t)0), v113));
          uint32x4_t v151 = vmovl_high_u16(v150);
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v150.i8);
          float v153 = (__int16 *)&v48[2 * v138];
          v154.i16[0] = *(_WORD *)&v48[2 * v152.u32[0]];
          float v155 = (__int16 *)&v48[2 * v152.u32[1]];
          float v156 = (__int16 *)&v48[2 * v152.u32[2]];
          float v157 = (__int16 *)&v48[2 * v152.u32[3]];
          v137.i16[1] = *(_WORD *)&v48[2 * v136];
          float v158 = (__int16 *)&v48[2 * v151.u32[0]];
          float v159 = (__int16 *)&v48[2 * v151.u32[1]];
          float v160 = (__int16 *)&v48[2 * v151.u32[2]];
          float v161 = (__int16 *)&v48[2 * v151.u32[3]];
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v113));
          uint32x4_t v163 = vmovl_high_u16(v162);
          uint32x4_t v164 = vmovl_u16(*(uint16x4_t *)v162.i8);
          float v165 = (__int16 *)&v48[2 * v141.u32[3]];
          v124.i16[0] = *(_WORD *)&v48[2 * v164.u32[0]];
          v154.i16[1] = *v155;
          v137.i16[2] = *(_WORD *)&v48[2 * v132];
          v145.i16[1] = *(_WORD *)&v48[2 * v143];
          float v166 = (__int16 *)&v48[2 * v163.u32[0]];
          v154.i16[2] = *v156;
          float v167 = (__int16 *)&v48[2 * v163.u32[1]];
          float v168 = (__int16 *)&v48[2 * v163.u32[2]];
          uint16x8_t v169 = (__int16 *)&v48[2 * v163.u32[3]];
          v137.i16[3] = *(_WORD *)&v48[2 * *((void *)&v132 + 1)];
          v124.i16[1] = *(_WORD *)&v48[2 * v164.u32[1]];
          v124.i16[2] = *(_WORD *)&v48[2 * v164.u32[2]];
          v145.i16[2] = *v146;
          v124.i16[3] = *(_WORD *)&v48[2 * v164.u32[3]];
          v154.i16[3] = *v157;
          uint16x8_t v170 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, (float16x8_t)0), v113));
          uint32x4_t v171 = vmovl_high_u16(v170);
          v124.i16[4] = *v166;
          uint32x4_t v172 = vmovl_u16(*(uint16x4_t *)v170.i8);
          v137.i16[4] = *v139;
          v141.i16[0] = *(_WORD *)&v48[2 * v172.u32[0]];
          v145.i16[3] = *(_WORD *)&v48[2 * v144];
          v154.i16[4] = *v158;
          v124.i16[5] = *v167;
          v137.i16[5] = *v153;
          float v173 = (__int16 *)&v48[2 * v171.u32[2]];
          float v174 = (__int16 *)&v48[2 * v171.u32[3]];
          v145.i16[4] = *v148;
          v141.i16[1] = *(_WORD *)&v48[2 * v172.u32[1]];
          v141.i16[2] = *(_WORD *)&v48[2 * v172.u32[2]];
          v154.i16[5] = *v159;
          v141.i16[3] = *(_WORD *)&v48[2 * v172.u32[3]];
          v141.i16[4] = *(_WORD *)&v48[2 * v171.u32[0]];
          v124.i16[6] = *v168;
          v141.i16[5] = *(_WORD *)&v48[2 * v171.u32[1]];
          v137.i16[6] = *(_WORD *)&v48[2 * v133];
          uint16x8_t v175 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v113));
          uint32x4_t v176 = vmovl_high_u16(v175);
          v145.i16[5] = *(_WORD *)&v48[2 * v147];
          uint32x4_t v177 = vmovl_u16(*(uint16x4_t *)v175.i8);
          v154.i16[6] = *v160;
          v129.i16[0] = *(_WORD *)&v48[2 * v177.u32[0]];
          v124.i16[7] = *v169;
          v141.i16[6] = *v173;
          v137.i16[7] = *(_WORD *)&v48[2 * *((void *)&v133 + 1)];
          v145.i16[6] = *v149;
          v154.i16[7] = *v161;
          v129.i16[1] = *(_WORD *)&v48[2 * v177.u32[1]];
          v129.i16[2] = *(_WORD *)&v48[2 * v177.u32[2]];
          v145.i16[7] = *v165;
          v129.i16[3] = *(_WORD *)&v48[2 * v177.u32[3]];
          v129.i16[4] = *(_WORD *)&v48[2 * v176.u32[0]];
          v141.i16[7] = *v174;
          v129.i16[5] = *(_WORD *)&v48[2 * v176.u32[1]];
          v129.i16[6] = *(_WORD *)&v48[2 * v176.u32[2]];
          v129.i16[7] = *(_WORD *)&v48[2 * v176.u32[3]];
          float16x8_t v178 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, v402), v145, v401), v154, v400);
          v126.i16[7] = v56.i16[7];
          float16x8_t v179 = vmlaq_n_f16(vmulq_n_f16(v154, _H12), v145, v395);
          float16x8_t v180 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v402), v141, v401), v129, v400);
          float16x8_t v181 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, v399), v145, v398), v154, v397);
          float16x8_t v182 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v399), v141, v398), v129, v397);
          float16x8_t v183 = vmlaq_n_f16(v179, v137, v396);
          float16x8_t v184 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, _H12), v141, v395), v124, v396);
          uint16x8_t v185 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v178, (float16x8_t)0), v113));
          uint32x4_t v186 = vmovl_high_u16(v185);
          *(void *)&long long v132 = v186.u32[2];
          *((void *)&v132 + 1) = v186.u32[3];
          long long v187 = v132;
          uint32x4_t v188 = vmovl_u16(*(uint16x4_t *)v185.i8);
          uint64_t v189 = v188.u32[1];
          uint64_t v190 = v188.u32[0];
          uint64_t v191 = v188.u32[3];
          uint64_t v192 = v188.u32[2];
          uint64_t v193 = v186.u32[1];
          uint64_t v194 = v186.u32[0];
          uint16x8_t v195 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v181, (float16x8_t)0), v113));
          uint32x4_t v196 = vmovl_high_u16(v195);
          *(void *)&long long v132 = v196.u32[2];
          *((void *)&v132 + 1) = v196.u32[3];
          long long v197 = v132;
          *(void *)&long long v132 = v196.u32[0];
          *((void *)&v132 + 1) = v196.u32[1];
          long long v198 = v132;
          uint32x4_t v199 = vmovl_u16(*(uint16x4_t *)v195.i8);
          *(void *)&long long v132 = v199.u32[2];
          *((void *)&v132 + 1) = v199.u32[3];
          long long v200 = v132;
          uint64_t v201 = v199.u32[1];
          uint64_t v202 = v199.u32[0];
          uint64_t v203 = *((void *)&v198 + 1);
          uint64_t v204 = v198;
          v137.i16[0] = *(_WORD *)&v55[2 * v190];
          uint64_t v205 = *((void *)&v197 + 1);
          uint64_t v206 = v197;
          float v207 = (__int16 *)&v55[2 * v192];
          uint16x8_t v208 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v183, (float16x8_t)0), v113));
          uint32x4_t v209 = vmovl_high_u16(v208);
          *(void *)&long long v132 = v209.u32[2];
          *((void *)&v132 + 1) = v209.u32[3];
          long long v210 = v132;
          *(void *)&long long v132 = v209.u32[0];
          *((void *)&v132 + 1) = v209.u32[1];
          long long v211 = v132;
          v145.i16[0] = *(_WORD *)&v55[2 * v202];
          uint32x4_t v212 = vmovl_u16(*(uint16x4_t *)v208.i8);
          *(void *)&long long v132 = v212.u32[2];
          *((void *)&v132 + 1) = v212.u32[3];
          long long v213 = v132;
          uint64_t v214 = v212.u32[1];
          v126.i16[0] = *(_WORD *)&v55[2 * v212.u32[0]];
          float v215 = (__int16 *)&v55[2 * v189];
          uint64_t v216 = *((void *)&v211 + 1);
          uint64_t v217 = v211;
          uint64_t v218 = *((void *)&v210 + 1);
          uint64_t v219 = v210;
          uint16x8_t v220 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v180, (float16x8_t)0), v113));
          uint32x4_t v221 = vmovl_high_u16(v220);
          *(void *)&long long v132 = v221.u32[2];
          *((void *)&v132 + 1) = v221.u32[3];
          long long v222 = v132;
          *((void *)&v132 + 1) = v221.u32[1];
          float16x8_t v223 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v220.i8);
          v137.i16[1] = *v215;
          v124.i16[0] = *(_WORD *)&v55[2 * v223.u32[0]];
          v145.i16[1] = *(_WORD *)&v55[2 * v201];
          v126.i16[1] = *(_WORD *)&v55[2 * v214];
          v124.i16[1] = *(_WORD *)&v55[2 * v223.u32[1]];
          v137.i16[2] = *v207;
          float v224 = (__int16 *)&v55[2 * v223.u32[3]];
          v124.i16[2] = *(_WORD *)&v55[2 * v223.u32[2]];
          uint64_t v225 = v221.u32[0];
          v145.i16[2] = *(_WORD *)&v55[2 * v200];
          uint16x8_t v226 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v182, (float16x8_t)0), v113));
          uint32x4_t v227 = vmovl_u16(*(uint16x4_t *)v226.i8);
          v126.i16[2] = *(_WORD *)&v55[2 * v213];
          v223.i16[7] = (unint64_t)v227.u32[1] >> 48;
          v124.i16[3] = *v224;
          v223.i16[0] = *(_WORD *)&v55[2 * v227.u32[0]];
          v137.i16[3] = *(_WORD *)&v55[2 * v191];
          float v228 = (__int16 *)&v55[2 * v193];
          v145.i16[3] = *(_WORD *)&v55[2 * *((void *)&v200 + 1)];
          v126.i16[3] = *(_WORD *)&v55[2 * *((void *)&v213 + 1)];
          float v229 = (__int16 *)&v55[2 * v206];
          v124.i16[4] = *(_WORD *)&v55[2 * v225];
          v137.i16[4] = *(_WORD *)&v55[2 * v194];
          float v230 = (__int16 *)&v55[2 * *((void *)&v222 + 1)];
          uint32x4_t v231 = vmovl_high_u16(v226);
          v145.i16[4] = *(_WORD *)&v55[2 * v204];
          v223.i16[1] = *(_WORD *)&v55[2 * v227.u32[1]];
          v126.i16[4] = *(_WORD *)&v55[2 * v217];
          v124.i16[5] = *(_WORD *)&v55[2 * *((void *)&v132 + 1)];
          v223.i16[2] = *(_WORD *)&v55[2 * v227.u32[2]];
          v137.i16[5] = *v228;
          v223.i16[3] = *(_WORD *)&v55[2 * v227.u32[3]];
          v145.i16[5] = *(_WORD *)&v55[2 * v203];
          v223.i16[4] = *(_WORD *)&v55[2 * v231.u32[0]];
          v126.i16[5] = *(_WORD *)&v55[2 * v216];
          uint64_t v232 = v231.u32[3];
          v124.i16[6] = *(_WORD *)&v55[2 * v222];
          float v85 = v429;
          v223.i16[5] = *(_WORD *)&v55[2 * v231.u32[1]];
          v223.i16[6] = *(_WORD *)&v55[2 * v231.u32[2]];
          v137.i16[6] = *(_WORD *)&v55[2 * v187];
          uint16x8_t v233 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v184, (float16x8_t)0), v113));
          uint32x4_t v234 = vmovl_high_u16(v233);
          v145.i16[6] = *v229;
          uint32x4_t v235 = vmovl_u16(*(uint16x4_t *)v233.i8);
          uint64_t v236 = v235.u32[1];
          v126.i16[6] = *(_WORD *)&v55[2 * v219];
          uint64_t v237 = v235.u32[0];
          uint64_t v238 = v235.u32[3];
          float16x8_t v239 = (float16x8_t)vuzp1q_s16((int16x8_t)v124, (int16x8_t)v223);
          uint64_t v240 = v235.u32[2];
          uint64_t v241 = v234.u32[1];
          v124.i16[7] = *v230;
          uint64_t v242 = v234.u32[0];
          float16x8_t v243 = (float16x8_t)vuzp1q_s16((int16x8_t)v137, (int16x8_t)v145);
          v137.i16[7] = *(_WORD *)&v55[2 * *((void *)&v187 + 1)];
          uint64_t v244 = v234.u32[3];
          v145.i16[7] = *(_WORD *)&v55[2 * v205];
          uint64_t v245 = v234.u32[2];
          float16x8_t v246 = (float16x8_t)vtrn1q_s16((int16x8_t)v126, (int16x8_t)v126);
          v126.i16[7] = *(_WORD *)&v55[2 * v218];
          v223.i16[7] = *(_WORD *)&v55[2 * v232];
          float16x8_t v247 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v137, _H8), v145, v404), v126, v403);
          int16x8_t v248 = (int16x8_t)vaddq_f16(v243, (float16x8_t)vuzp2q_s16((int16x8_t)v137, (int16x8_t)v145));
          float16x8_t v249 = (float16x8_t)vtrn2q_s16((int16x8_t)v126, (int16x8_t)v126);
          float16x8_t v97 = v438;
          float16x8_t v250 = vmlaq_n_f16(vmlaq_n_f16(v65, v124, _H8), v223, v404);
          float16x8_t v251 = (float16x8_t)vuzp2q_s16((int16x8_t)v124, (int16x8_t)v223);
          v124.i16[0] = *(_WORD *)&v55[2 * v237];
          v124.i16[1] = *(_WORD *)&v55[2 * v236];
          v124.i16[2] = *(_WORD *)&v55[2 * v240];
          v124.i16[3] = *(_WORD *)&v55[2 * v238];
          uint64_t v79 = v430;
          v124.i16[4] = *(_WORD *)&v55[2 * v242];
          float v80 = v433;
          v124.i16[5] = *(_WORD *)&v55[2 * v241];
          v124.i16[6] = *(_WORD *)&v55[2 * v245];
          int16x8_t v252 = (int16x8_t)vaddq_f16(v239, v251);
          float16x8_t v253 = (float16x8_t)vtrn1q_s16((int16x8_t)v124, (int16x8_t)v124);
          v124.i16[7] = *(_WORD *)&v55[2 * v244];
          *unint64_t v434 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(v247, v65), v67)), v394);
          float v77 = v434 + 1;
          *(uint16x8_t *)&v431[v110] = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v423, v93, (float16x8_t)vzip1q_s16(v248, v248)), v62, (float16x8_t)vzip2q_s16(v248, v248)), v64, vaddq_f16(v246, v249)), v421), v420)), v394);
          float16x8_t v254 = vmaxq_f16(vmlaq_n_f16(v250, v124, v403), v65);
          uint16x8_t v82 = v435;
          *v112++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(v254, v67)), v394);
          *(uint16x8_t *)&v429[v110] = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v423, v93, (float16x8_t)vzip1q_s16(v252, v252)), v62, (float16x8_t)vzip2q_s16(v252, v252)), v64, vaddq_f16(v253, (float16x8_t)vtrn2q_s16((int16x8_t)v124, (int16x8_t)v124))), v421), v420)), v394);
          int v111 = v432 + 8;
          v110 += 16;
        }
        while (v432 + 8 < v419);
        uint64_t v255 = (unsigned __int16 *)(v430 + v110);
        result = &v431[v110];
        uint64_t v256 = &v429[v110];
        uint64_t v86 = v376;
        unint64_t v257 = v377;
        unint64_t v19 = v387;
        unint64_t v22 = v388;
        uint64_t v36 = v385;
        uint64_t v35 = v386;
        uint64_t v30 = v383;
        uint64_t v32 = v384;
        float v109 = v390;
        unint64_t v18 = v391;
        uint64_t v34 = v381;
        uint64_t v31 = v382;
        uint64_t v83 = v380;
        unsigned __int8 v84 = v378;
        unsigned __int8 v81 = v379;
        float v39 = v373;
        float v40 = v374;
        float v108 = v389;
        float v87 = v372;
      }
      while (v19 > v257)
      {
        float v258 = (float)(v255[1] >> v81) - v40;
        float v259 = *((float *)&v428 + 1) * v258;
        float v260 = v87 * (float)((float)(v80->u16[0] >> v81) - v39);
        float v261 = (float)(*((float *)&v428 + 1) * v258) + v260;
        float v262 = 8191.0;
        if (v261 <= 8191.0)
        {
          float v262 = (float)(*((float *)&v428 + 1) * v258) + v260;
          if (v261 < 0.0) {
            float v262 = 0.0;
          }
        }
        float v263 = (float)(*v255 >> v81) - v40;
        float v264 = (float)(*((float *)&v427 + 1) * v258) + (float)(v263 * *(float *)&v427);
        float v265 = 8191.0;
        if ((float)(v260 + v264) <= 8191.0)
        {
          float v265 = v260 + v264;
          if ((float)(v260 + v264) < 0.0) {
            float v265 = 0.0;
          }
        }
        float v266 = *(float *)&v428 * v263;
        float v267 = (float)(*(float *)&v428 * v263) + v260;
        float v268 = 8191.0;
        if (v267 <= 8191.0)
        {
          float v268 = v267;
          if (v267 < 0.0) {
            float v268 = 0.0;
          }
        }
        float v269 = v87 * (float)((float)(v80->u16[1] >> v81) - v39);
        float v270 = 8191.0;
        if ((float)(v259 + v269) <= 8191.0)
        {
          float v270 = v259 + v269;
          if ((float)(v259 + v269) < 0.0) {
            float v270 = 0.0;
          }
        }
        float v271 = 8191.0;
        if ((float)(v264 + v269) <= 8191.0)
        {
          float v271 = v264 + v269;
          if ((float)(v264 + v269) < 0.0) {
            float v271 = 0.0;
          }
        }
        float v272 = v266 + v269;
        BOOL v273 = (float)(v266 + v269) <= 8191.0;
        float v274 = 8191.0;
        if (v273)
        {
          float v274 = v272;
          if (v272 < 0.0) {
            float v274 = 0.0;
          }
        }
        float v275 = v87 * (float)((float)(v107->u16[0] >> v81) - v39);
        float v276 = 8191.0;
        if ((float)(v259 + v275) <= 8191.0)
        {
          float v276 = v259 + v275;
          if ((float)(v259 + v275) < 0.0) {
            float v276 = 0.0;
          }
        }
        float v277 = 8191.0;
        if ((float)(v264 + v275) <= 8191.0)
        {
          float v277 = v264 + v275;
          if ((float)(v264 + v275) < 0.0) {
            float v277 = 0.0;
          }
        }
        float v278 = v266 + v275;
        BOOL v273 = (float)(v266 + v275) <= 8191.0;
        float v279 = 8191.0;
        if (v273)
        {
          float v279 = v278;
          if (v278 < 0.0) {
            float v279 = 0.0;
          }
        }
        float v280 = v87 * (float)((float)(v107->u16[1] >> v81) - v39);
        float v281 = v259 + v280;
        BOOL v273 = (float)(v259 + v280) <= 8191.0;
        float v282 = 8191.0;
        if (v273)
        {
          float v282 = v281;
          if (v281 < 0.0) {
            float v282 = 0.0;
          }
        }
        float v283 = v264 + v280;
        BOOL v273 = (float)(v264 + v280) <= 8191.0;
        float v284 = 8191.0;
        if (v273)
        {
          float v284 = v283;
          if (v283 < 0.0) {
            float v284 = 0.0;
          }
        }
        float v285 = v39;
        float v286 = v266 + v280;
        float v287 = 8191.0;
        if (v286 <= 8191.0)
        {
          float v287 = v286;
          if (v286 < 0.0) {
            float v287 = 0.0;
          }
        }
        _H7 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v262, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H17 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v265, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        _H27 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v268, 0.0), 8191.0))];
        __asm { FCVT            S27, H27 }
        _H18 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v270, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v271, 0.0), 8191.0))];
        __asm
        {
          FCVT            S18, H18
          FCVT            S1, H1
        }
        _H3 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v274, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H4 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v276, 0.0), 8191.0))];
        __asm { FCVT            S4, H4 }
        _H5 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v277, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        _H16 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v279, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        _H29 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v282, 0.0), 8191.0))];
        _H30 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v284, 0.0), 8191.0))];
        __asm
        {
          FCVT            S29, H29
          FCVT            S30, H30
        }
        _H9 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v287, 0.0), 8191.0))];
        __asm { FCVT            S9, H9 }
        float v312 = (float)((float)(v417 * _S17) + (float)(_S7 * v418)) + (float)(_S27 * v416);
        float v313 = (float)((float)(v413 * _S17) + (float)(_S7 * v415)) + (float)(_S27 * v411);
        float v314 = (float)((float)(v408 * _S17) + (float)(_S7 * v409)) + (float)(_S27 * v406);
        float v315 = (float)((float)(v417 * _S1) + (float)(_S18 * v418)) + (float)(_S3 * v416);
        float v316 = (float)((float)(v413 * _S1) + (float)(_S18 * v415)) + (float)(_S3 * v411);
        float v317 = (float)((float)(v408 * _S1) + (float)(_S18 * v409)) + (float)(_S3 * v406);
        float v318 = (float)((float)(v417 * _S5) + (float)(_S4 * v418)) + (float)(_S16 * v416);
        float v319 = (float)((float)(v413 * _S5) + (float)(_S4 * v415)) + (float)(_S16 * v411);
        float v320 = (float)((float)(v408 * _S5) + (float)(_S4 * v409)) + (float)(_S16 * v406);
        float v321 = (float)((float)(v417 * _S30) + (float)(_S29 * v418)) + (float)(_S9 * v416);
        float v322 = (float)((float)(v413 * _S30) + (float)(_S29 * v415)) + (float)(_S9 * v411);
        float v323 = (float)((float)(v408 * _S30) + (float)(_S29 * v409)) + (float)(_S9 * v406);
        LOWORD(_S5) = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v312, 0.0), 8191.0))];
        __asm { FCVT            S27, H5 }
        LOWORD(_S5) = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v313, 0.0), 8191.0))];
        __asm { FCVT            S29, H5 }
        LOWORD(_S5) = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v314, 0.0), 8191.0))];
        __asm { FCVT            S30, H5 }
        _H10 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v315, 0.0), 8191.0))];
        _H13 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v316, 0.0), 8191.0))];
        _H14 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v317, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v318, 0.0), 8191.0))];
        _H18 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v319, 0.0), 8191.0))];
        _H16 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v320, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v321, 0.0), 8191.0))];
        _H3 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v322, 0.0), 8191.0))];
        _H4 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v323, 0.0), 8191.0))];
        float v336 = (float)((float)((float)(v442 * _S29) + (float)(v440 * _S27)) + (float)(v441 * _S30)) + v436;
        float v337 = v52;
        if (v336 <= v52)
        {
          float v337 = (float)((float)((float)(v442 * _S29) + (float)(v440 * _S27)) + (float)(v441 * _S30)) + v436;
          if (v336 < v436) {
            float v337 = v436;
          }
        }
        __asm
        {
          FCVT            S9, H10
          FCVT            S10, H13
          FCVT            S7, H14
        }
        float v341 = (float)((float)((float)(v442 * _S10) + (float)(v440 * _S9)) + (float)(v441 * _S7)) + v436;
        v77->i16[0] = llroundf(v337) << v84;
        float v342 = v52;
        if (v341 <= v52)
        {
          float v342 = (float)((float)((float)(v442 * _S10) + (float)(v440 * _S9)) + (float)(v441 * _S7)) + v436;
          if (v341 < v436) {
            float v342 = v436;
          }
        }
        v77->i16[1] = llroundf(v342) << v84;
        float v343 = _S27 + _S9;
        float v344 = _S29 + _S10;
        float v345 = _S30 + _S7;
        float v346 = (float)((float)(v51 + (float)(v343 * *(float *)&v106)) + (float)(v344 * *(float *)&v439))
             + (float)(v345 * v437);
        float v347 = v54;
        if (v346 <= v54)
        {
          float v347 = (float)((float)(v51 + (float)(v343 * *(float *)&v106)) + (float)(v344 * *(float *)&v439))
               + (float)(v345 * v437);
          if (v346 < v424) {
            float v347 = v424;
          }
        }
        float v348 = (float)((float)(v51 + (float)(v343 * *((float *)&v106 + 1))) + (float)(v344 * *((float *)&v439 + 1)))
             + (float)(v345 * v10.f32[1]);
        *(_WORD *)result = llroundf(v347) << v84;
        float v349 = v54;
        float16x8_t v97 = v438;
        if (v348 <= v54)
        {
          float v349 = v348;
          if (v348 < v424) {
            float v349 = v424;
          }
        }
        __asm
        {
          FCVT            S27, H5
          FCVT            S18, H18
          FCVT            S5, H16
        }
        *((_WORD *)result + 1) = llroundf(v349) << v84;
        float v353 = (float)((float)((float)(v442 * _S18) + (float)(v440 * _S27)) + (float)(v441 * _S5)) + v436;
        float v354 = v52;
        float v39 = v285;
        float16x8_t v56 = v407;
        float16x8_t v64 = v410;
        if (v353 <= v52)
        {
          float v354 = (float)((float)((float)(v442 * _S18) + (float)(v440 * _S27)) + (float)(v441 * _S5)) + v436;
          if (v353 < v436) {
            float v354 = v436;
          }
        }
        __asm
        {
          FCVT            S7, H1
          FCVT            S3, H3
          FCVT            S1, H4
        }
        float v358 = (float)((float)((float)(v442 * _S3) + (float)(v440 * _S7)) + (float)(v441 * _S1)) + v436;
        v112->i16[0] = llroundf(v354) << v84;
        float v359 = v52;
        float16x8_t v93 = v426;
        float16x8_t v65 = v414;
        if (v358 <= v52)
        {
          float v359 = (float)((float)((float)(v442 * _S3) + (float)(v440 * _S7)) + (float)(v441 * _S1)) + v436;
          if (v358 < v436) {
            float v359 = v436;
          }
        }
        v112->i16[1] = llroundf(v359) << v84;
        float v360 = _S27 + _S7;
        float v361 = _S18 + _S3;
        float v362 = _S5 + _S1;
        float v363 = (float)((float)(v51 + (float)((float)(_S27 + _S7) * *(float *)&v106)) + (float)(v361 * *(float *)&v439))
             + (float)(v362 * v437);
        float v364 = v54;
        float16x8_t v63 = v425;
        float16x8_t v62 = v412;
        uint16x8_t v82 = v435;
        if (v363 <= v54)
        {
          float v364 = v363;
          if (v363 < v424) {
            float v364 = v424;
          }
        }
        float v365 = (float)((float)(v51 + (float)(v360 * *((float *)&v106 + 1))) + (float)(v361 * *((float *)&v439 + 1)))
             + (float)(v362 * v10.f32[1]);
        *(_WORD *)uint64_t v256 = llroundf(v364) << v84;
        float v366 = v54;
        float16x8_t v67 = v422;
        if (v365 <= v54)
        {
          float v366 = v365;
          if (v365 < v424) {
            float v366 = v424;
          }
        }
        v257 += 2;
        v255 += 2;
        float v80 = (uint16x8_t *)((char *)v80 + 4);
        float v107 = (uint16x8_t *)((char *)v107 + 4);
        float v77 = (uint16x8_t *)((char *)v77 + 4);
        *((_WORD *)v256 + 1) = llroundf(v366) << v84;
        result += 4;
        float16x8_t v112 = (uint16x8_t *)((char *)v112 + 4);
        v256 += 4;
      }
      float v80 = (uint16x8_t *)&v392[v30];
      v79 += v31;
      float v77 = (uint16x8_t *)&v108[v34];
      result = &v109[v83];
      v18 += 2;
      v85 += v86;
    }
    while (v22 > v18);
    if (v371 && v370)
    {
      size_t v367 = 2 * v19;
      float v368 = __src;
      do
      {
        result = (unsigned __int8 *)memcpy(v36, v368, v367);
        v368 += v32;
        v36 += v35;
        --v22;
      }
      while (v22);
    }
    else if (v370)
    {
      do
      {
        if (v19) {
          result = (unsigned __int8 *)memset(v36, 255, 2 * v19);
        }
        v36 += v35;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_xf422_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (void *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (uint64_t *)*((void *)result + 7);
    uint64_t v19 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v186 = v18[2];
    uint64_t v24 = (char *)(v186 + v23 * v12 + 2 * v11);
    uint64_t v25 = *v20;
    uint64_t v26 = v20[1];
    uint64_t v27 = v20[2];
    uint64_t v28 = v15[2];
    uint64_t v29 = (char *)(v28 + v27 * v16 + 2 * v14);
    float v30 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    float v31 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v32 = (float)LODWORD(a5);
    float v33 = v30 * *(float *)v17;
    float v206 = v30 * *(float *)(v17 + 16);
    float v207 = v30 * *(float *)(v17 + 8);
    float v34 = v30 * *(float *)(v17 + 20);
    *(float *)&unsigned int v35 = v30 * *(float *)(v17 + 28);
    float v204 = *(float *)&v35;
    float v205 = v34;
    LOWORD(v35) = *(_WORD *)(v17 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 150);
    float v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 152);
    float v40 = (float)v35;
    float v42 = *(float *)(v17 + 36);
    float v41 = *(float *)(v17 + 40);
    float v43 = *(float *)(v17 + 44);
    float v44 = *(float *)(v17 + 48) * 0.5;
    float v45 = *(float *)(v17 + 52) * 0.5;
    float v46 = *(float *)(v17 + 56) * 0.5;
    float v47 = *(float *)(v17 + 60) * 0.5;
    float v48 = *(float *)(v17 + 64) * 0.5;
    float v199 = *(float *)(v17 + 72);
    float v49 = *(float *)(v17 + 68) * 0.5;
    float v196 = *(float *)(v17 + 80);
    float v197 = *(float *)(v17 + 76);
    float v194 = *(float *)(v17 + 88);
    float v195 = *(float *)(v17 + 84);
    float v193 = *(float *)(v17 + 92);
    float v192 = *(float *)(v17 + 96);
    float v190 = *(float *)(v17 + 100);
    float v188 = *(float *)(v17 + 104);
    uint64_t v50 = v17 + 164;
    uint64_t v51 = v17 + 16548;
    uint64_t v52 = v15[1];
    float v53 = (char *)(*v15 + v25 * v16 + 2 * v14);
    if (v52) {
      uint64_t v54 = v52 + v26 * v16 + 2 * v14;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v55 = *v18;
    uint64_t v56 = v18[1];
    result = (unsigned __int8 *)(v55 + v21 * v12 + 2 * v11);
    unsigned int v57 = *(unsigned __int8 *)(v17 + 132);
    _CF = v57 >= 0x11;
    char v59 = 16 - v57;
    if (_CF) {
      char v59 = 0;
    }
    unsigned int v60 = *(unsigned __int8 *)(v17 + 124);
    char v61 = 16 - v60;
    if (v60 >= 0x11) {
      char v61 = 0;
    }
    if (v12 >= 0) {
      uint64_t v62 = v12;
    }
    else {
      uint64_t v62 = v12 + 1;
    }
    uint64_t v63 = v56 + v22 * (v62 >> 1) + 2 * v11;
    char v64 = v61;
    char v65 = v59;
    int16x8_t v66 = (_WORD *)(v54 + 2);
    float v208 = (float)LODWORD(a5);
    float v202 = v46;
    float v203 = v45;
    float v200 = v44;
    float v201 = v47;
    float v198 = v31;
    float v191 = v33;
    float v189 = v39;
    float v187 = v37;
    do
    {
      float16x8_t v67 = &result[v21];
      int16x8_t v68 = &v53[v25];
      if (v10)
      {
        unint64_t v69 = 0;
        unsigned int v70 = v66;
        unsigned __int8 v71 = &result[v21];
        unsigned int v72 = &v53[v25];
        do
        {
          unsigned __int8 v73 = (unsigned __int16 *)(v63 + 2 * v69);
          float v74 = (float)(v73[1] >> v64) - v32;
          float v75 = v207 * v74;
          float v76 = v33 * (float)((float)(*(unsigned __int16 *)result >> v64) - v31);
          float v77 = (float)(v207 * v74) + v76;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = (float)(v207 * v74) + v76;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = (float)(*v73 >> v64) - v32;
          float v80 = (float)(v205 * v74) + (float)(v79 * v206);
          float v81 = 8191.0;
          if ((float)(v76 + v80) <= 8191.0)
          {
            float v81 = v76 + v80;
            if ((float)(v76 + v80) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v204 * v79;
          float v83 = (float)(v204 * v79) + v76;
          float v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v84 = (float)(v204 * v79) + v76;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v33 * (float)((float)(*((unsigned __int16 *)result + 1) >> v64) - v31);
          float v86 = 8191.0;
          if ((float)(v75 + v85) <= 8191.0)
          {
            float v86 = v75 + v85;
            if ((float)(v75 + v85) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = 8191.0;
          if ((float)(v80 + v85) <= 8191.0)
          {
            float v87 = v80 + v85;
            if ((float)(v80 + v85) < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = 8191.0;
          if ((float)(v82 + v85) <= 8191.0)
          {
            float v88 = v82 + v85;
            if ((float)(v82 + v85) < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v33 * (float)((float)(*(unsigned __int16 *)v71 >> v64) - v31);
          float v90 = 8191.0;
          if ((float)(v75 + v89) <= 8191.0)
          {
            float v90 = v75 + v89;
            if ((float)(v75 + v89) < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = 8191.0;
          if ((float)(v80 + v89) <= 8191.0)
          {
            float v91 = v80 + v89;
            if ((float)(v80 + v89) < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v82 + v89;
          BOOL v93 = (float)(v82 + v89) <= 8191.0;
          float v94 = 8191.0;
          if (v93)
          {
            float v94 = v92;
            if (v92 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v33 * (float)((float)(*((unsigned __int16 *)v71 + 1) >> v64) - v31);
          float v96 = v75 + v95;
          BOOL v93 = (float)(v75 + v95) <= 8191.0;
          float v97 = 8191.0;
          if (v93)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          float v98 = v80 + v95;
          BOOL v93 = (float)(v80 + v95) <= 8191.0;
          float v99 = 8191.0;
          if (v93)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          float v100 = v42;
          float v101 = v82 + v95;
          float v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            float v102 = v101;
            if (v101 < 0.0) {
              float v102 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H3 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S5, H5
          }
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H18 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H26 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H19 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H7 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v130 = (float)((float)(v197 * _S3) + (float)(_S1 * v199)) + (float)(_S4 * v196);
          float v131 = (float)((float)(v194 * _S3) + (float)(_S1 * v195)) + (float)(_S4 * v193);
          _S1 = (float)((float)(v190 * _S3) + (float)(_S1 * v192)) + (float)(_S4 * v188);
          float v133 = (float)((float)(v197 * _S5) + (float)(_S2 * v199)) + (float)(_S6 * v196);
          float v134 = (float)((float)(v194 * _S5) + (float)(_S2 * v195)) + (float)(_S6 * v193);
          float v135 = (float)((float)(v190 * _S5) + (float)(_S2 * v192)) + (float)(_S6 * v188);
          float v136 = (float)((float)(v197 * _S26) + (float)(_S18 * v199)) + (float)(_S19 * v196);
          float v137 = (float)((float)(v194 * _S26) + (float)(_S18 * v195)) + (float)(_S19 * v193);
          float v138 = (float)((float)(v190 * _S26) + (float)(_S18 * v192)) + (float)(_S19 * v188);
          float v139 = (float)((float)(v197 * _S24) + (float)(_S7 * v199)) + (float)(_S25 * v196);
          float v140 = (float)((float)(v194 * _S24) + (float)(_S7 * v195)) + (float)(_S25 * v193);
          float v141 = (float)((float)(v190 * _S24) + (float)(_S7 * v192)) + (float)(_S25 * v188);
          LOWORD(_S6) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S24, H6 }
          LOWORD(_S6) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S25, H6 }
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          _H27 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          float v42 = v100;
          float v154 = (float)((float)((float)(v41 * _S25) + (float)(v100 * _S24)) + (float)(v43 * _S26)) + v36;
          float v155 = v38;
          if (v154 <= v38)
          {
            float v155 = (float)((float)((float)(v41 * _S25) + (float)(v100 * _S24)) + (float)(v43 * _S26)) + v36;
            if (v154 < v36) {
              float v155 = v36;
            }
          }
          __asm
          {
            FCVT            S3, H27
            FCVT            S27, H28
            FCVT            S1, H30
          }
          float v159 = (float)((float)((float)(v41 * _S27) + (float)(v100 * _S3)) + (float)(v43 * _S1)) + v36;
          *(_WORD *)float v53 = llroundf(v155) << v65;
          float v160 = v38;
          if (v159 <= v38)
          {
            float v160 = (float)((float)((float)(v41 * _S27) + (float)(v100 * _S3)) + (float)(v43 * _S1)) + v36;
            if (v159 < v36) {
              float v160 = v36;
            }
          }
          *((_WORD *)v53 + 1) = llroundf(v160) << v65;
          float v161 = _S24 + _S3;
          float v162 = _S25 + _S27;
          float v163 = _S26 + _S1;
          float v164 = (float)((float)(v187 + (float)(v161 * v200)) + (float)((float)(_S25 + _S27) * v203))
               + (float)(v163 * v202);
          float v165 = v40;
          float v33 = v191;
          if (v164 <= v40)
          {
            float v165 = (float)((float)(v187 + (float)(v161 * v200)) + (float)(v162 * v203)) + (float)(v163 * v202);
            if (v164 < v189) {
              float v165 = v189;
            }
          }
          float v166 = (float)((float)(v187 + (float)(v161 * v201)) + (float)(v162 * v48)) + (float)(v163 * v49);
          *(v70 - 1) = llroundf(v165) << v65;
          float v167 = v40;
          if (v166 <= v40)
          {
            float v167 = v166;
            if (v166 < v189) {
              float v167 = v189;
            }
          }
          __asm
          {
            FCVT            S24, H6
            FCVT            S7, H7
            FCVT            S6, H19
          }
          *unsigned int v70 = llroundf(v167) << v65;
          float v171 = (float)((float)((float)(v41 * _S7) + (float)(v100 * _S24)) + (float)(v43 * _S6)) + v36;
          float v172 = v38;
          if (v171 <= v38)
          {
            float v172 = (float)((float)((float)(v41 * _S7) + (float)(v100 * _S24)) + (float)(v43 * _S6)) + v36;
            if (v171 < v36) {
              float v172 = v36;
            }
          }
          __asm
          {
            FCVT            S3, H2
            FCVT            S2, H4
            FCVT            S1, H5
          }
          float v176 = (float)((float)((float)(v41 * _S2) + (float)(v100 * _S3)) + (float)(v43 * _S1)) + v36;
          *(_WORD *)unsigned int v72 = llroundf(v172) << v65;
          float v177 = v38;
          if (v176 <= v38)
          {
            float v177 = (float)((float)((float)(v41 * _S2) + (float)(v100 * _S3)) + (float)(v43 * _S1)) + v36;
            if (v176 < v36) {
              float v177 = v36;
            }
          }
          *((_WORD *)v72 + 1) = llroundf(v177) << v65;
          float v178 = _S24 + _S3;
          float v179 = _S7 + _S2;
          float v180 = _S6 + _S1;
          float v181 = (float)((float)(v187 + (float)(v178 * v200)) + (float)(v179 * v203)) + (float)(v180 * v202);
          float v182 = v40;
          float v31 = v198;
          if (v181 <= v40)
          {
            float v182 = (float)((float)(v187 + (float)(v178 * v200)) + (float)(v179 * v203)) + (float)(v180 * v202);
            if (v181 < v189) {
              float v182 = v189;
            }
          }
          float v183 = (float)((float)(v187 + (float)(v178 * v201)) + (float)(v179 * v48)) + (float)(v180 * v49);
          *(_WORD *)((char *)v70 + v26 - 2) = llroundf(v182) << v65;
          float v184 = v40;
          if (v183 <= v40)
          {
            float v184 = v183;
            if (v183 < v189) {
              float v184 = v189;
            }
          }
          result += 4;
          v71 += 4;
          v53 += 4;
          v72 += 4;
          *(_WORD *)((char *)v70 + v26) = llroundf(v184) << v65;
          v69 += 2;
          v70 += 2;
          float v32 = v208;
        }
        while (v10 > v69);
      }
      result = &v67[v21];
      v63 += v22;
      float v53 = &v68[v25];
      v9 += 2;
      v66 += v26;
    }
    while (v13 > v9);
    if (v186 && v28)
    {
      size_t v185 = 2 * v10;
      do
      {
        result = (unsigned __int8 *)memcpy(v29, v24, v185);
        v24 += v23;
        v29 += v27;
        --v13;
      }
      while (v13);
    }
    else if (v28)
    {
      do
      {
        if (v10) {
          result = (unsigned __int8 *)memset(v29, 255, 2 * v10);
        }
        v29 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_xf422_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_xf422_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = 2 * *result;
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (2 * v12 != 2 * v11)
  {
    unint64_t v13 = 0;
    unint64_t v14 = *(void *)(result + 20);
    uint64_t v15 = *(void *)(result + 36);
    uint64_t v16 = *(void *)(result + 44) + 2 * v11;
    unint64_t v17 = 2 * v12 - 2 * v11;
    uint64_t v18 = *((void *)result + 14);
    uint64_t v19 = (uint64_t *)*((void *)result + 16);
    uint64_t v20 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v10);
    uint64_t v21 = (float32x2_t *)*((void *)result + 19);
    uint64_t v23 = (uint64_t *)*((void *)result + 7);
    size_t v22 = (uint64_t *)*((void *)result + 8);
    uint64_t v24 = (uint64_t *)*((void *)result + 17);
    uint64_t v25 = *v22;
    uint64_t v26 = v22[1];
    uint64_t v182 = v22[2];
    uint64_t v185 = v23[2];
    uint64_t v27 = *v24;
    uint64_t v28 = v24[1];
    uint64_t v183 = v24[2];
    uint64_t v184 = v19[2];
    uint64_t v29 = (char *)(v184 + v183 * v20 + 2 * v18);
    unsigned int v30 = v21[17].u16[2];
    unsigned int v31 = v21[17].u16[3];
    v32.i32[0] = v21[3].i32[1];
    unsigned int v33 = v21[18].u16[0];
    unsigned int v34 = v21[18].u16[1];
    unsigned int v35 = v21[18].u16[2];
    unsigned int v36 = v21[18].u16[3];
    LODWORD(v24) = v21[19].u16[0];
    LODWORD(_D0) = v21[4].i32[1];
    _S1 = v21[5].f32[0];
    _S2 = v21[5].f32[1];
    v39.i32[0] = v21[6].i32[0];
    v41.i32[0] = v21[6].i32[1];
    v40.i32[0] = v21[7].i32[0];
    float v188 = (float)v30;
    *(short float *)v5.i16 = (short float)v30;
    v32.i32[1] = v21[1].i32[0];
    float v42 = (char *)(v185 + v182 * v16 + 2 * v15);
    v6.f32[0] = (float)v21[17].u32[0] / (float)v21[16].u32[0];
    float v204 = (float)v31;
    float v43 = (float)v33;
    float v44 = (float)v34;
    float v45 = (float)v35;
    float v46 = (float)v36;
    _S17 = v6.f32[0] * v21->f32[0];
    float v48 = (float)v24;
    __asm { FCVT            H8, S17 }
    float16x8_t v54 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v5.f32, 0);
    *(float32x2_t *)v5.f32 = vmul_n_f32(v32, v6.f32[0]);
    float16x8_t v55 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    *(float32x2_t *)v6.f32 = vmul_n_f32(v21[2], v6.f32[0]);
    short float v56 = -(short float)v31;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    float16x8_t v58 = vmulq_n_f16(v55, v56);
    float32x4_t v61 = (float32x4_t)vmulq_n_f16(v57, v56);
    float16x8_t v202 = (float16x8_t)v61;
    float v191 = *(float *)&_D0;
    __asm
    {
      FCVT            H9, S0
      FCVT            H15, S1
    }
    v39.i32[1] = v21[7].i32[1];
    *(float32x2_t *)v7.f32 = vmul_f32(v39, (float32x2_t)0x3F0000003F000000);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v7), 0);
    v41.i32[1] = v21[8].i32[0];
    *(float32x2_t *)v8.f32 = vmul_f32(v41, (float32x2_t)0x3F0000003F000000);
    float16x8_t v60 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v8), 0);
    v40.i32[1] = v21[8].i32[1];
    *(float32x2_t *)v61.f32 = vmul_f32(v40, (float32x2_t)0x3F0000003F000000);
    int16x4_t v62 = (int16x4_t)vcvt_f16_f32(v61);
    float16x8_t v63 = (float16x8_t)vdupq_lane_s32((int32x2_t)v62, 0);
    *(short float *)v62.i16 = (short float)v33;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v34;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v35;
    int16x8_t v66 = vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v36;
    int16x8_t v67 = vdupq_lane_s16(v62, 0);
    *(short float *)v62.i16 = (short float)v24;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(v62, 0);
    LODWORD(v24) = v21[16].u8[4];
    unsigned __int8 v69 = 16 - (_BYTE)v24;
    if (v24 >= 0x11) {
      unsigned __int8 v69 = 0;
    }
    unsigned int v70 = v21[15].u8[4];
    unsigned __int8 v71 = 16 - v70;
    if (v70 >= 0x11) {
      unsigned __int8 v71 = 0;
    }
    uint64_t v73 = *v19;
    uint64_t v72 = v19[1];
    float v74 = (char *)(v72 + v28 * v20 + 2 * v18);
    if (!v72) {
      float v74 = 0;
    }
    float v75 = (uint16x8_t *)(v73 + v27 * v20 + 2 * v18);
    if (v16 >= 0) {
      uint64_t v76 = v16;
    }
    else {
      uint64_t v76 = v16 + 1;
    }
    uint64_t v77 = *v23;
    uint64_t v78 = v23[1] + v26 * (v76 >> 1) + 2 * v15;
    result = (unsigned __int8 *)(v77 + v25 * v16 + 2 * v15);
    unsigned __int8 v79 = v71;
    unsigned int v80 = -v71;
    unsigned int v81 = v69;
    float v82 = &v74[v28];
    uint16x8_t v83 = (uint16x8_t)vdupq_n_s16(v80);
    uint16x8_t v84 = (uint16x8_t)vdupq_n_s16(v81);
    float v189 = _S2;
    __asm { FCVT            H0, S2 }
    float v203 = v5.f32[0];
    float16x8_t v85 = v58;
    float32_t v190 = v5.f32[1];
    uint64_t v86 = v6.i64[0];
    float v206 = v8.f32[0];
    uint64_t v87 = v7.i64[0];
    float v88 = v46;
    float16x8_t v89 = v202;
    float v205 = v8.f32[1];
    uint64_t v90 = v61.i64[0];
    float16x8_t v200 = v58;
    float16x8_t v201 = v57;
    float16x8_t v198 = v60;
    float16x8_t v199 = v59;
    float16x8_t v196 = v65;
    float16x8_t v197 = v63;
    int16x8_t v194 = v67;
    int16x8_t v195 = v66;
    double v192 = _D0;
    float16x8_t v193 = v68;
    float v187 = v88;
    float v186 = _S1;
    do
    {
      float v91 = &result[v25];
      float v92 = &v75->i8[v27];
      BOOL v93 = &v74[v28];
      if ((int)v14 < 8)
      {
        unint64_t v128 = 0;
        float16x8_t v127 = &v74[v28];
        float v97 = (uint16x8_t *)((char *)v75 + v27);
        float16x8_t v126 = (unsigned __int16 *)v78;
        float v96 = (uint16x8_t *)&result[v25];
        float v130 = v190;
        float v129 = v191;
      }
      else
      {
        uint64_t v94 = 0;
        int v95 = 0;
        float v96 = (uint16x8_t *)&result[v25];
        float v97 = (uint16x8_t *)((char *)v75 + v27);
        long long v98 = _Q15;
        long long v99 = _Q9;
        float16x8_t v100 = (float16x8_t)v66;
        float16x8_t v101 = (float16x8_t)v67;
        do
        {
          float16x8_t v102 = vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)(v78 + v94), v83));
          int8x16_t v103 = (int8x16_t)vmlaq_f16(v85, v55, v102);
          int8x16_t v104 = (int8x16_t)vmlaq_f16(v89, v57, v102);
          v102.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
          *(int16x4_t *)v105.i8 = vuzp2_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v102.i8);
          *(double *)&v105.i64[1] = _D0;
          *(int16x4_t *)v102.i8 = vuzp1_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v102.i8);
          float16x8_t v106 = (float16x8_t)vzip1q_s16(v105, v105);
          *(double *)&v102.i64[1] = _D0;
          float16x8_t v107 = (float16x8_t)vzip1q_s16((int16x8_t)v102, (int16x8_t)v102);
          v102.i64[0] = vextq_s8(v104, v104, 8uLL).u64[0];
          *(float16x4_t *)v102.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v102.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v102.i8));
          *(double *)&v102.i64[1] = _D0;
          float16x8_t v108 = (float16x8_t)vzip1q_s16((int16x8_t)v102, (int16x8_t)v102);
          uint16x8_t v109 = *(uint16x8_t *)result;
          result += 16;
          float16x8_t v110 = vcvtq_f16_u16(vshlq_u16(v109, v83));
          uint16x8_t v111 = *v96++;
          float16x8_t v112 = vsubq_f16(v110, v54);
          float16x8_t v113 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v111, v83)), v54);
          float16x8_t v114 = vmlaq_n_f16(v106, v112, _H8);
          float16x8_t v115 = vmlaq_n_f16(v106, v113, _H8);
          float16x8_t v116 = vmlaq_n_f16(v108, v112, _H8);
          float16x8_t v117 = vmlaq_n_f16(v108, v113, _H8);
          uint16x8_t v118 = v83;
          float16x8_t v119 = v57;
          float16x8_t v120 = vmlaq_n_f16(v107, v112, _H8);
          float16x8_t v121 = vmlaq_n_f16(v107, v113, _H8);
          *v75++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v64, v114, *(short float *)&v99), v116, *(short float *)&v98), v120, *(short float *)&_D0), v64), v100)), v84);
          int16x8_t v122 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v114, (int16x8_t)v116), (float16x8_t)vuzp2q_s16((int16x8_t)v114, (int16x8_t)v116));
          float16x8_t v123 = (float16x8_t)vtrn2q_s16((int16x8_t)v120, (int16x8_t)v120);
          float16x8_t v124 = (float16x8_t)vtrn1q_s16((int16x8_t)v120, (int16x8_t)v120);
          float16x8_t v57 = v119;
          uint16x8_t v83 = v118;
          *(uint16x8_t *)&v74[v94] = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v65, v59, (float16x8_t)vzip1q_s16(v122, v122)), v60, (float16x8_t)vzip2q_s16(v122, v122)), v63, vaddq_f16(v124, v123)), v101), v68)), v84);
          *v97++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v64, v115, *(short float *)&v99), v117, *(short float *)&v98), v121, *(short float *)&_D0), v64), v100)), v84);
          int16x8_t v125 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v115, (int16x8_t)v117), (float16x8_t)vuzp2q_s16((int16x8_t)v115, (int16x8_t)v117));
          *(uint16x8_t *)&v82[v94] = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v65, v59, (float16x8_t)vzip1q_s16(v125, v125)), v60, (float16x8_t)vzip2q_s16(v125, v125)), v63, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v121, (int16x8_t)v121), (float16x8_t)vtrn2q_s16((int16x8_t)v121, (int16x8_t)v121))), v101), v68)), v84);
          v95 += 8;
          v94 += 16;
        }
        while (v95 < (int)v14 - 7);
        float16x8_t v126 = (unsigned __int16 *)(v78 + v94);
        v74 += v94;
        float16x8_t v127 = &v82[v94];
        unint64_t v128 = v14 & 0xFFFFFFF8;
        _Q9 = v99;
        _Q15 = v98;
        float v88 = v187;
        float v130 = v190;
        float v129 = v191;
        _S1 = v186;
      }
      while (v14 > v128)
      {
        long long v131 = _Q15;
        long long v132 = _Q9;
        float16x8_t v133 = v55;
        float16x8_t v134 = v54;
        float v135 = (float)(*v126 >> v79) - v204;
        float v136 = (float)(v126[1] >> v79) - v204;
        float v137 = v130 * v136;
        float v138 = (float)(*((float *)&v86 + 1) * v136) + (float)(v135 * *(float *)&v86);
        float v139 = v203 * v135;
        float v140 = _S17 * (float)((float)(*(unsigned __int16 *)result >> v79) - v188);
        float v141 = v137 + v140;
        float v142 = v140 + v138;
        float v143 = v139 + v140;
        float v144 = (float)((float)((float)(_S1 * (float)(v140 + v138)) + (float)(v129 * (float)(v137 + v140)))
                     + (float)(v189 * (float)(v139 + v140)))
             + v43;
        float v145 = v45;
        if (v144 <= v45)
        {
          float v145 = v144;
          if (v144 < v43) {
            float v145 = v43;
          }
        }
        float v146 = _S17 * (float)((float)(*((unsigned __int16 *)result + 1) >> v79) - v188);
        unsigned int v147 = v96->u16[0];
        unsigned int v148 = v96->u16[1];
        float v149 = v137 + v146;
        float v150 = v138 + v146;
        float v151 = v139 + v146;
        float v152 = (float)((float)((float)(_S1 * v150) + (float)(v129 * v149)) + (float)(v189 * v151)) + v43;
        v75->i16[0] = llroundf(v145) << v81;
        float v153 = v45;
        if (v152 <= v45)
        {
          float v153 = (float)((float)((float)(_S1 * v150) + (float)(v129 * v149)) + (float)(v189 * v151)) + v43;
          if (v152 < v43) {
            float v153 = v43;
          }
        }
        v75->i16[1] = llroundf(v153) << v81;
        float v154 = v141 + v149;
        float v155 = v142 + v150;
        float v156 = (float)(v44 + (float)((float)(v141 + v149) * *(float *)&v87)) + (float)(v155 * v206);
        float v157 = v143 + v151;
        float v158 = v156 + (float)((float)(v143 + v151) * *(float *)&v90);
        float v159 = v48;
        if (v158 <= v48)
        {
          float v159 = v158;
          if (v158 < v88) {
            float v159 = v88;
          }
        }
        float v160 = (float)((float)(v44 + (float)(v154 * *((float *)&v87 + 1))) + (float)(v155 * v205))
             + (float)(v157 * *((float *)&v90 + 1));
        *(_WORD *)float v74 = llroundf(v159) << v81;
        float v161 = v48;
        float16x8_t v54 = v134;
        if (v160 <= v48)
        {
          float v161 = v160;
          if (v160 < v88) {
            float v161 = v88;
          }
        }
        float v162 = _S17 * (float)((float)(int)(v147 >> v79) - v188);
        float v163 = v137 + v162;
        float v164 = v138 + v162;
        float v165 = v139 + v162;
        *((_WORD *)v74 + 1) = llroundf(v161) << v81;
        float v166 = (float)((float)((float)(_S1 * (float)(v138 + v162)) + (float)(v129 * (float)(v137 + v162)))
                     + (float)(v189 * (float)(v139 + v162)))
             + v43;
        float v167 = v45;
        if (v166 <= v45)
        {
          float v167 = v166;
          if (v166 < v43) {
            float v167 = v43;
          }
        }
        float v168 = _S17 * (float)((float)(int)(v148 >> v79) - v188);
        float v169 = v137 + v168;
        float v170 = v138 + v168;
        float v171 = v139 + v168;
        float v172 = (float)((float)((float)(_S1 * v170) + (float)(v129 * v169)) + (float)(v189 * (float)(v139 + v168))) + v43;
        v97->i16[0] = llroundf(v167) << v81;
        float v173 = v45;
        if (v172 <= v45)
        {
          float v173 = v172;
          if (v172 < v43) {
            float v173 = v43;
          }
        }
        v97->i16[1] = llroundf(v173) << v81;
        float v174 = v163 + v169;
        float v175 = v164 + v170;
        float v176 = v165 + v171;
        float v177 = (float)((float)(v44 + (float)((float)(v163 + v169) * *(float *)&v87)) + (float)(v175 * v206))
             + (float)(v176 * *(float *)&v90);
        float v178 = v48;
        _Q9 = v132;
        if (v177 <= v48)
        {
          float v178 = v177;
          if (v177 < v88) {
            float v178 = v88;
          }
        }
        float v179 = (float)((float)(v44 + (float)(v174 * *((float *)&v87 + 1))) + (float)(v175 * v205))
             + (float)(v176 * *((float *)&v90 + 1));
        *(_WORD *)float16x8_t v127 = llroundf(v178) << v81;
        float v180 = v48;
        float16x8_t v55 = v133;
        _Q15 = v131;
        if (v179 <= v48)
        {
          float v180 = v179;
          if (v179 < v88) {
            float v180 = v88;
          }
        }
        v128 += 2;
        v126 += 2;
        result += 4;
        float v96 = (uint16x8_t *)((char *)v96 + 4);
        float v75 = (uint16x8_t *)((char *)v75 + 4);
        *((_WORD *)v127 + 1) = llroundf(v180) << v81;
        v74 += 4;
        float v97 = (uint16x8_t *)((char *)v97 + 4);
        v127 += 4;
      }
      result = &v91[v25];
      v78 += v26;
      float v75 = (uint16x8_t *)&v92[v27];
      float v74 = &v93[v28];
      v13 += 2;
      v82 += 2 * v28;
      float16x8_t v85 = v200;
      float16x8_t v57 = v201;
      float16x8_t v89 = v202;
      float16x8_t v60 = v198;
      float16x8_t v59 = v199;
      float16x8_t v65 = v196;
      float16x8_t v63 = v197;
      int16x8_t v67 = v194;
      int16x8_t v66 = v195;
      _D0 = v192;
      float16x8_t v68 = v193;
    }
    while (v17 > v13);
    if (v185 && v184)
    {
      size_t v181 = 2 * v14;
      do
      {
        result = (unsigned __int8 *)memcpy(v29, v42, v181);
        v42 += v182;
        v29 += v183;
        --v17;
      }
      while (v17);
    }
    else if (v184)
    {
      do
      {
        if (v14) {
          result = (unsigned __int8 *)memset(v29, 255, 2 * v14);
        }
        v29 += v183;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_xf422_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 36);
    uint64_t v13 = *(void *)(result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = *(void *)(result + 112);
    uint64_t v16 = *(void **)(result + 128);
    uint64_t v17 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v7);
    uint64_t v18 = *(void *)(result + 152);
    uint64_t v20 = *(void **)(result + 56);
    uint64_t v19 = *(uint64_t **)(result + 64);
    uint64_t v21 = *(uint64_t **)(result + 136);
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    uint64_t v24 = v19[2];
    uint64_t v25 = v20[2];
    uint64_t v26 = (char *)(v25 + v24 * v13 + 2 * v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + 2 * v15);
    *(float *)&unsigned int v32 = (float)*(unsigned int *)(v18 + 128);
    *(float *)&unsigned int v33 = (float)*(unsigned int *)(v18 + 136);
    float v34 = *(float *)&v33 / *(float *)&v32;
    LOWORD(v32) = *(_WORD *)(v18 + 140);
    float v35 = (float)v32;
    LOWORD(v33) = *(_WORD *)(v18 + 142);
    float v36 = (float)v33;
    float v37 = v34 * *(float *)v18;
    float v38 = v34 * *(float *)(v18 + 8);
    float v39 = v34 * *(float *)(v18 + 16);
    float v40 = v34 * *(float *)(v18 + 20);
    float v41 = *(float *)(v18 + 28);
    float v42 = v34 * v41;
    LOWORD(v41) = *(_WORD *)(v18 + 144);
    float v43 = (float)LODWORD(v41);
    LOWORD(v2) = *(_WORD *)(v18 + 146);
    float v44 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v18 + 148);
    float v45 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v18 + 150);
    float v46 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v18 + 152);
    float v47 = (float)v5;
    float v48 = *(float *)(v18 + 36);
    float v49 = *(float *)(v18 + 40);
    float v50 = *(float *)(v18 + 44);
    float v51 = *(float *)(v18 + 48) * 0.5;
    float v52 = *(float *)(v18 + 52) * 0.5;
    float v53 = *(float *)(v18 + 56) * 0.5;
    float v54 = *(float *)(v18 + 60) * 0.5;
    float v55 = *(float *)(v18 + 64) * 0.5;
    float v56 = *(float *)(v18 + 68);
    uint64_t v57 = v16[1];
    float16x8_t v58 = (char *)(*v16 + v27 * v17 + 2 * v15);
    if (v57) {
      uint64_t v59 = v57 + v28 * v17 + 2 * v15;
    }
    else {
      uint64_t v59 = 0;
    }
    uint64_t v60 = v20[1];
    float32x4_t v61 = (char *)(*v20 + v22 * v13 + 2 * v12);
    unsigned int v62 = *(unsigned __int8 *)(v18 + 132);
    BOOL v63 = v62 >= 0x11;
    char v64 = 16 - v62;
    if (v63) {
      char v65 = 0;
    }
    else {
      char v65 = v64;
    }
    LODWORD(result) = *(unsigned __int8 *)(v18 + 124);
    if (result >= 0x11) {
      LOBYTE(result) = 0;
    }
    else {
      LOBYTE(result) = 16 - result;
    }
    if (v13 >= 0) {
      uint64_t v66 = v13;
    }
    else {
      uint64_t v66 = v13 + 1;
    }
    uint64_t v67 = v60 + v23 * (v66 >> 1) + 2 * v12;
    float v68 = v56 * 0.5;
    result = result;
    char v69 = v65;
    unsigned int v70 = (_WORD *)(v59 + 2);
    do
    {
      unsigned __int8 v71 = &v61[v22];
      uint64_t v72 = &v58[v27];
      if (v11)
      {
        unint64_t v73 = 0;
        float v74 = v70;
        float v75 = &v61[v22];
        uint64_t v76 = &v58[v27];
        do
        {
          uint64_t v77 = (unsigned __int16 *)(v67 + 2 * v73);
          float v78 = (float)(*v77 >> result) - v36;
          float v79 = (float)(v77[1] >> result) - v36;
          float v80 = v38 * v79;
          float v81 = (float)(v40 * v79) + (float)(v78 * v39);
          float v82 = v42 * v78;
          float v83 = v37 * (float)((float)(*(unsigned __int16 *)v61 >> result) - v35);
          float v84 = v80 + v83;
          float v85 = v83 + v81;
          float v86 = v82 + v83;
          float v87 = (float)((float)((float)(v49 * v85) + (float)(v48 * v84)) + (float)(v50 * v86)) + v43;
          float v88 = v45;
          if (v87 <= v45)
          {
            float v88 = (float)((float)((float)(v49 * v85) + (float)(v48 * v84)) + (float)(v50 * v86)) + v43;
            if (v87 < v43) {
              float v88 = v43;
            }
          }
          float v89 = v37 * (float)((float)(*((unsigned __int16 *)v61 + 1) >> result) - v35);
          unsigned int v90 = *(unsigned __int16 *)v75;
          unsigned int v91 = *((unsigned __int16 *)v75 + 1);
          float v92 = v80 + v89;
          float v93 = v81 + v89;
          float v94 = v82 + v89;
          float v95 = (float)((float)((float)(v49 * v93) + (float)(v48 * v92)) + (float)(v50 * v94)) + v43;
          *(_WORD *)float16x8_t v58 = llroundf(v88) << v69;
          float v96 = v45;
          if (v95 <= v45)
          {
            float v96 = (float)((float)((float)(v49 * v93) + (float)(v48 * v92)) + (float)(v50 * v94)) + v43;
            if (v95 < v43) {
              float v96 = v43;
            }
          }
          *((_WORD *)v58 + 1) = llroundf(v96) << v69;
          float v97 = v84 + v92;
          float v98 = v85 + v93;
          float v99 = v86 + v94;
          float v100 = (float)((float)(v44 + (float)(v97 * v51)) + (float)(v98 * v52)) + (float)(v99 * v53);
          float v101 = v47;
          if (v100 <= v47)
          {
            float v101 = (float)((float)(v44 + (float)(v97 * v51)) + (float)(v98 * v52)) + (float)(v99 * v53);
            if (v100 < v46) {
              float v101 = v46;
            }
          }
          float v102 = (float)((float)(v44 + (float)(v97 * v54)) + (float)(v98 * v55)) + (float)(v99 * v68);
          *(v74 - 1) = llroundf(v101) << v69;
          float v103 = v47;
          if (v102 <= v47)
          {
            float v103 = v102;
            if (v102 < v46) {
              float v103 = v46;
            }
          }
          float v104 = v37 * (float)((float)(int)(v90 >> result) - v35);
          float v105 = v80 + v104;
          float v106 = v81 + v104;
          float v107 = v82 + v104;
          _WORD *v74 = llroundf(v103) << v69;
          float v108 = (float)((float)((float)(v49 * v106) + (float)(v48 * v105)) + (float)(v50 * v107)) + v43;
          float v109 = v45;
          if (v108 <= v45)
          {
            float v109 = (float)((float)((float)(v49 * v106) + (float)(v48 * v105)) + (float)(v50 * v107)) + v43;
            if (v108 < v43) {
              float v109 = v43;
            }
          }
          float v110 = v37 * (float)((float)(int)(v91 >> result) - v35);
          float v111 = v80 + v110;
          float v112 = v81 + v110;
          float v113 = v82 + v110;
          float v114 = (float)((float)((float)(v49 * v112) + (float)(v48 * v111)) + (float)(v50 * (float)(v82 + v110))) + v43;
          *(_WORD *)uint64_t v76 = llroundf(v109) << v69;
          float v115 = v45;
          if (v114 <= v45)
          {
            float v115 = v114;
            if (v114 < v43) {
              float v115 = v43;
            }
          }
          *((_WORD *)v76 + 1) = llroundf(v115) << v69;
          float v116 = v106 + v112;
          float v117 = v107 + v113;
          float v118 = (float)((float)(v44 + (float)((float)(v105 + v111) * v51)) + (float)(v116 * v52)) + (float)(v117 * v53);
          float v119 = v47;
          if (v118 <= v47)
          {
            float v119 = (float)((float)(v44 + (float)((float)(v105 + v111) * v51)) + (float)(v116 * v52))
                 + (float)(v117 * v53);
            if (v118 < v46) {
              float v119 = v46;
            }
          }
          float v120 = (float)((float)(v44 + (float)((float)(v105 + v111) * v54)) + (float)(v116 * v55)) + (float)(v117 * v68);
          *(_WORD *)((char *)v74 + v28 - 2) = llroundf(v119) << v69;
          float v121 = v47;
          if (v120 <= v47)
          {
            float v121 = v120;
            if (v120 < v46) {
              float v121 = v46;
            }
          }
          v61 += 4;
          v75 += 4;
          v58 += 4;
          v76 += 4;
          *(_WORD *)((char *)v74 + v28) = llroundf(v121) << v69;
          v73 += 2;
          v74 += 2;
        }
        while (v11 > v73);
      }
      float32x4_t v61 = &v71[v22];
      v67 += v23;
      float16x8_t v58 = &v72[v27];
      v10 += 2;
      v70 += v28;
    }
    while (v14 > v10);
    if (v25 && v30)
    {
      size_t v122 = 2 * v11;
      do
      {
        result = (unint64_t)memcpy(v31, v26, v122);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          result = (unint64_t)memset(v31, 255, 2 * v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Tone_Mat_TRC_v216_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = v6 * a2;
  unint64_t v8 = 2 * *(unsigned __int8 *)result;
  unint64_t v9 = (v6 + v6 * a2) / v8;
  uint64_t v10 = result[14];
  uint64_t v11 = (void *)result[16];
  uint64_t v12 = result[15] + 2 * (result[13] * a2 / v8);
  uint64_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (char *)(v15 + v14 * v12 + 2 * v10);
  unint64_t v17 = v7 / v8;
  if (v15) {
    uint64_t v18 = v15 + v14 * v12 + 2 * v10;
  }
  else {
    uint64_t v18 = 0;
  }
  if (2 * v9 != 2 * v17)
  {
    unint64_t v19 = 0;
    unint64_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    uint64_t v22 = *(void *)((char *)result + 44) + 2 * v17;
    unint64_t v23 = 2 * v9 - 2 * v17;
    uint64_t v24 = result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v224 = v25[2];
    uint64_t v30 = (char *)(v224 + v29 * v22 + 2 * v21);
    uint64_t v31 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a6);
    float v35 = v32 * *(float *)v24;
    float v248 = v32 * *(float *)(v24 + 16);
    float v249 = v32 * *(float *)(v24 + 8);
    float v36 = v32 * *(float *)(v24 + 20);
    *(float *)&unsigned int v37 = v32 * *(float *)(v24 + 28);
    float v246 = *(float *)&v37;
    float v247 = v36;
    LOWORD(v37) = *(_WORD *)(v24 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v24 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v24 + 48) * 0.5;
    float v44 = *(float *)(v24 + 56) * 0.5;
    float v45 = *(float *)(v24 + 60) * 0.5;
    float v241 = *(float *)(v24 + 72);
    float v238 = *(float *)(v24 + 80);
    float v239 = *(float *)(v24 + 76);
    float v236 = *(float *)(v24 + 88);
    float v237 = *(float *)(v24 + 84);
    float v235 = *(float *)(v24 + 92);
    float v234 = *(float *)(v24 + 96);
    float v232 = *(float *)(v24 + 100);
    float v230 = *(float *)(v24 + 104);
    uint64_t v46 = v24 + 164;
    uint64_t v47 = v24 + 16548;
    float v48 = (char *)(*v11 + v31 * v12 + 2 * v10);
    unsigned int v49 = *(unsigned __int8 *)(v24 + 124);
    uint64_t v50 = v25[1];
    uint64_t v51 = *v25 + *v26 * v22;
    if (v49 >= 0x11) {
      char v52 = 0;
    }
    else {
      char v52 = 16 - v49;
    }
    if (v22 >= 0) {
      uint64_t v53 = v22;
    }
    else {
      uint64_t v53 = v22 + 1;
    }
    uint64_t v54 = v50 + v28 * (v53 >> 1);
    result = (void *)(v24 + 32932);
    float v55 = (char *)(v51 + 2 * v21);
    uint64_t v56 = v54 + 2 * v21;
    char v57 = v52;
    float v59 = *(float *)(v24 + 108);
    float v58 = *(float *)(v24 + 112);
    float v226 = *(float *)(v24 + 120);
    float v227 = *(float *)(v24 + 116);
    float v250 = (float)LODWORD(a6);
    float v244 = (float)LODWORD(a5);
    float v245 = v39;
    float v243 = v35;
    float v242 = *(float *)(v24 + 36);
    float v240 = *(float *)(v24 + 68) * 0.5;
    float v233 = *(float *)(v24 + 52) * 0.5;
    float v231 = *(float *)(v24 + 44);
    float v229 = *(float *)(v24 + 64) * 0.5;
    float v228 = *(float *)(v24 + 40);
    float v225 = v58;
    do
    {
      uint64_t v60 = &v55[v27];
      float32x4_t v61 = &v48[v31];
      if (v20)
      {
        unint64_t v62 = 0;
        BOOL v63 = &v55[v27];
        char v64 = (_DWORD *)(v18 + v14);
        char v65 = &v48[v31];
        uint64_t v66 = (_DWORD *)v18;
        do
        {
          uint64_t v67 = (unsigned __int16 *)(v56 + 2 * v62);
          float v68 = (float)(v67[1] >> v57) - v34;
          float v69 = v249 * v68;
          float v70 = v35 * (float)((float)(*(unsigned __int16 *)v55 >> v57) - v33);
          float v71 = (float)(v249 * v68) + v70;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = (float)(v249 * v68) + v70;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = (float)(*v67 >> v57) - v34;
          float v74 = (float)(v247 * v68) + (float)(v73 * v248);
          float v75 = 8191.0;
          if ((float)(v70 + v74) <= 8191.0)
          {
            float v75 = v70 + v74;
            if ((float)(v70 + v74) < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v246 * v73;
          float v77 = (float)(v246 * v73) + v70;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v35 * (float)((float)(*((unsigned __int16 *)v55 + 1) >> v57) - v33);
          float v80 = 8191.0;
          if ((float)(v69 + v79) <= 8191.0)
          {
            float v80 = v69 + v79;
            if ((float)(v69 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = 8191.0;
          if ((float)(v74 + v79) <= 8191.0)
          {
            float v81 = v74 + v79;
            if ((float)(v74 + v79) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v76 + v79;
          BOOL v83 = (float)(v76 + v79) <= 8191.0;
          float v84 = 8191.0;
          if (v83)
          {
            float v84 = v82;
            if (v82 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v35 * (float)((float)(*(unsigned __int16 *)v63 >> v57) - v33);
          float v86 = 8191.0;
          if ((float)(v69 + v85) <= 8191.0)
          {
            float v86 = v69 + v85;
            if ((float)(v69 + v85) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = 8191.0;
          if ((float)(v74 + v85) <= 8191.0)
          {
            float v87 = v74 + v85;
            if ((float)(v74 + v85) < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v76 + v85;
          BOOL v83 = (float)(v76 + v85) <= 8191.0;
          float v89 = 8191.0;
          if (v83)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v35 * (float)((float)(*((unsigned __int16 *)v63 + 1) >> v57) - v33);
          float v91 = v69 + v90;
          BOOL v83 = (float)(v69 + v90) <= 8191.0;
          float v92 = 8191.0;
          if (v83)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v74 + v90;
          BOOL v83 = (float)(v74 + v90) <= 8191.0;
          float v94 = 8191.0;
          if (v83)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v76 + v90;
          float v96 = 8191.0;
          if (v95 <= 8191.0)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          float v116 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v117 = (float)((float)((float)(v58 * _S24) + (float)(v59 * _S2)) + (float)(v227 * _S25))
               + (float)(v226 * v116);
          float v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            float v118 = (float)((float)((float)(v58 * _S24) + (float)(v59 * _S2)) + (float)(v227 * _S25))
                 + (float)(v226 * v116);
            if (v117 < 0.0) {
              float v118 = 0.0;
            }
          }
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *(_WORD *)(v47 + 2 * llroundf(v118));
          float v123 = (float)((float)((float)(v58 * _S28) + (float)(v59 * _S26)) + (float)(v227 * _S30))
               + (float)(v226 * fmaxf(_S26, fmaxf(_S28, _S30)));
          float v124 = 8191.0;
          if (v123 <= 8191.0)
          {
            float v124 = v123;
            if (v123 < 0.0) {
              float v124 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *(_WORD *)(v47 + 2 * llroundf(v124));
          float v129 = fmaxf(_S9, fmaxf(_S10, _S11));
          float v130 = (float)((float)((float)(v58 * _S10) + (float)(v59 * _S9)) + (float)(v227 * _S11))
               + (float)(v226 * v129);
          float v131 = 8191.0;
          if (v130 <= 8191.0)
          {
            float v131 = (float)((float)((float)(v58 * _S10) + (float)(v59 * _S9)) + (float)(v227 * _S11))
                 + (float)(v226 * v129);
            if (v130 < 0.0) {
              float v131 = 0.0;
            }
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          float v136 = _S2 * _S1;
          float v137 = _S24 * _S1;
          float v138 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          float v140 = _S26 * _S1;
          float v141 = _S28 * _S1;
          float v142 = _S30 * _S1;
          LOWORD(_S1) = *(_WORD *)(v47 + 2 * llroundf(v131));
          __asm { FCVT            S2, H1 }
          float v144 = _S9 * _S2;
          float v145 = _S10 * _S2;
          float v146 = _S11 * _S2;
          float v147 = (float)((float)((float)(v58 * _S31) + (float)(v59 * _S29)) + (float)(v227 * _S8))
               + (float)(v226 * fmaxf(_S29, fmaxf(_S31, _S8)));
          float v148 = 8191.0;
          if (v147 <= 8191.0)
          {
            float v148 = v147;
            if (v147 < 0.0) {
              float v148 = 0.0;
            }
          }
          _H25 = *(_WORD *)(v47 + 2 * llroundf(v148));
          __asm { FCVT            S25, H25 }
          float v151 = _S29 * _S25;
          float v152 = _S31 * _S25;
          float v153 = _S8 * _S25;
          float v154 = (float)((float)(v239 * v137) + (float)(v136 * v241)) + (float)(v138 * v238);
          float v155 = (float)((float)(v236 * v137) + (float)(v136 * v237)) + (float)(v138 * v235);
          float v156 = (float)((float)(v232 * v137) + (float)(v136 * v234)) + (float)(v138 * v230);
          _S24 = (float)((float)(v239 * v141) + (float)(v140 * v241)) + (float)(v142 * v238);
          float v158 = (float)((float)(v236 * v141) + (float)(v140 * v237)) + (float)(v142 * v235);
          _S21 = (float)((float)(v232 * v141) + (float)(v140 * v234)) + (float)(v142 * v230);
          _S22 = (float)((float)(v239 * v145) + (float)(v144 * v241)) + (float)(v146 * v238);
          float v161 = (float)((float)(v236 * v145) + (float)(v144 * v237)) + (float)(v146 * v235);
          float v162 = (float)((float)(v232 * v145) + (float)(v144 * v234)) + (float)(v146 * v230);
          _S3 = (float)(v236 * v152) + (float)(v151 * v237);
          float v164 = (float)(v232 * v152) + (float)(v151 * v234);
          float v165 = (float)((float)(v239 * v152) + (float)(v151 * v241)) + (float)(v153 * v238);
          float v166 = _S3 + (float)(v153 * v235);
          float v167 = v164 + (float)(v153 * v230);
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          unsigned int v171 = llroundf(fminf(fmaxf(_S24, 0.0), 8191.0));
          LOWORD(_S24) = *((_WORD *)result + llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          unsigned int v172 = llroundf(fminf(fmaxf(v158, 0.0), 8191.0));
          LOWORD(_S3) = *((_WORD *)result + v171);
          __asm
          {
            FCVT            S27, H1
            FCVT            S17, H3
          }
          unsigned int v175 = llroundf(fminf(fmaxf(_S21, 0.0), 8191.0));
          LOWORD(_S21) = *((_WORD *)result + v172);
          unsigned int v176 = llroundf(fminf(fmaxf(_S22, 0.0), 8191.0));
          LOWORD(_S22) = *((_WORD *)result + v175);
          _H1 = *((_WORD *)result + v176);
          unsigned int v178 = llroundf(fminf(fmaxf(v162, 0.0), 8191.0));
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          unsigned int v180 = llroundf(fminf(fmaxf(v165, 0.0), 8191.0));
          _H3 = *((_WORD *)result + v178);
          unsigned int v182 = llroundf(fminf(fmaxf(v166, 0.0), 8191.0));
          __asm { FCVT            S23, H21 }
          unsigned int v184 = llroundf(fminf(fmaxf(v167, 0.0), 8191.0));
          float v185 = (float)(v228 * _S27) + (float)(v242 * _S29);
          float v186 = _S27 + _S23;
          float v187 = (float)(v245 + (float)((float)(_S29 + _S17) * v43)) + (float)(v186 * v233);
          float v188 = (float)(v245 + (float)((float)(_S29 + _S17) * v45)) + (float)(v186 * v229);
          _H21 = *((_WORD *)result + v180);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H22
          }
          float v192 = v185 + (float)(v231 * _S24);
          float v193 = _S24 + _S25;
          float v194 = v187 + (float)((float)(_S24 + _S25) * v44);
          float v195 = v188 + (float)(v193 * v240);
          if (v194 < v38) {
            float v196 = v38;
          }
          else {
            float v196 = v194;
          }
          BOOL v83 = v194 <= v40;
          _H22 = *((_WORD *)result + v182);
          float v198 = v192 + v38;
          if (!v83) {
            float v196 = v40;
          }
          __int16 v199 = llroundf(v196);
          if (v198 < v41) {
            float v200 = v41;
          }
          else {
            float v200 = v192 + v38;
          }
          BOOL v83 = v198 <= v42;
          _H24 = *((_WORD *)result + v184);
          *(_WORD *)float v48 = v199;
          if (!v83) {
            float v200 = v42;
          }
          *((_WORD *)v48 + 1) = llroundf(v200);
          float v202 = v40;
          if (v195 <= v40)
          {
            float v202 = v195;
            if (v195 < v38) {
              float v202 = v38;
            }
          }
          float v203 = (float)((float)((float)(v228 * _S23) + (float)(v242 * _S17)) + (float)(v231 * _S25)) + v38;
          *((_WORD *)v48 + 2) = llroundf(v202);
          float v204 = v42;
          float v35 = v243;
          float v33 = v244;
          if (v203 <= v42)
          {
            if (v203 < v41) {
              float v204 = v41;
            }
            else {
              float v204 = v203;
            }
          }
          *((_WORD *)v48 + 3) = llroundf(v204);
          if (v66) {
            *v66++ = 0;
          }
          float v58 = v225;
          __asm
          {
            FCVT            S17, H1
            FCVT            S23, H2
            FCVT            S25, H3
            FCVT            S1, H21
            FCVT            S3, H22
            FCVT            S2, H24
          }
          float v211 = (float)((float)((float)(v228 * _S23) + (float)(v242 * _S17)) + (float)(v231 * _S25)) + v38;
          float v212 = _S17 + _S1;
          float v213 = _S23 + _S3;
          float v214 = (float)((float)(v245 + (float)(v212 * v43)) + (float)(v213 * v233))
               + (float)((float)(_S25 + _S2) * v44);
          float v215 = (float)((float)(v245 + (float)(v212 * v45)) + (float)(v213 * v229))
               + (float)((float)(_S25 + _S2) * v240);
          if (v214 < v38) {
            float v216 = v38;
          }
          else {
            float v216 = v214;
          }
          if (v214 <= v40) {
            float v217 = v216;
          }
          else {
            float v217 = v40;
          }
          *(_WORD *)char v65 = llroundf(v217);
          if (v211 < v41) {
            float v218 = v41;
          }
          else {
            float v218 = v211;
          }
          if (v211 <= v42) {
            float v219 = v218;
          }
          else {
            float v219 = v42;
          }
          *((_WORD *)v65 + 1) = llroundf(v219);
          float v220 = v40;
          if (v215 <= v40)
          {
            float v220 = v215;
            if (v215 < v38) {
              float v220 = v38;
            }
          }
          float v221 = (float)((float)((float)(v228 * _S3) + (float)(v242 * _S1)) + (float)(v231 * _S2)) + v38;
          *((_WORD *)v65 + 2) = llroundf(v220);
          float v222 = v42;
          if (v221 <= v42)
          {
            float v222 = v221;
            if (v221 < v41) {
              float v222 = v41;
            }
          }
          *((_WORD *)v65 + 3) = llroundf(v222);
          float v34 = v250;
          if (v64) {
            *v64++ = 0;
          }
          v55 += 4;
          v63 += 4;
          v48 += 8;
          v65 += 8;
          v62 += 2;
        }
        while (v20 > v62);
      }
      float v55 = &v60[v27];
      v56 += v28;
      float v48 = &v61[v31];
      v19 += 2;
    }
    while (v23 > v19);
    if (v224 && v18)
    {
      size_t v223 = 2 * v20;
      do
      {
        result = memcpy(v16, v30, v223);
        v30 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          result = memset(v16, 255, 2 * v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = v6 * a2;
  unint64_t v8 = 2 * *result;
  unint64_t v9 = (v6 + v6 * a2) / v8;
  uint64_t v10 = *((void *)result + 14);
  uint64_t v11 = (void *)*((void *)result + 16);
  uint64_t v12 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v8);
  uint64_t v13 = (uint64_t *)*((void *)result + 17);
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (char *)(v15 + v14 * v12 + 2 * v10);
  unint64_t v17 = v7 / v8;
  if (v15) {
    uint64_t v18 = v15 + v14 * v12 + 2 * v10;
  }
  else {
    uint64_t v18 = 0;
  }
  if (2 * v9 != 2 * v17)
  {
    unint64_t v19 = 0;
    unint64_t v20 = *(void *)(result + 20);
    uint64_t v21 = *(void *)(result + 36);
    uint64_t v22 = *(void *)(result + 44) + 2 * v17;
    unint64_t v23 = 2 * v9 - 2 * v17;
    uint64_t v24 = *((void *)result + 19);
    uint64_t v25 = (uint64_t *)*((void *)result + 7);
    uint64_t v26 = (uint64_t *)*((void *)result + 8);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = (char *)(v30 + v29 * v22 + 2 * v21);
    uint64_t v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v24;
    float v201 = v33 * *(float *)(v24 + 16);
    float v202 = v33 * *(float *)(v24 + 8);
    float v37 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v24 + 28);
    float v199 = *(float *)&v38;
    float v200 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    float v43 = (float)v38;
    float v44 = *(float *)(v24 + 36);
    float v45 = *(float *)(v24 + 40);
    float v46 = *(float *)(v24 + 52) * 0.5;
    float v47 = *(float *)(v24 + 56) * 0.5;
    float v48 = *(float *)(v24 + 60) * 0.5;
    float v205 = *(float *)(v24 + 64) * 0.5;
    float v198 = *(float *)(v24 + 72);
    float v49 = *(float *)(v24 + 68) * 0.5;
    float v196 = *(float *)(v24 + 80);
    float v197 = *(float *)(v24 + 76);
    float v194 = *(float *)(v24 + 88);
    float v195 = *(float *)(v24 + 84);
    float v193 = *(float *)(v24 + 92);
    float v192 = *(float *)(v24 + 96);
    float v191 = *(float *)(v24 + 100);
    float v189 = *(float *)(v24 + 104);
    uint64_t v50 = v24 + 164;
    uint64_t v51 = *v11 + v32 * v12;
    uint64_t v52 = v24 + 16548;
    uint64_t v53 = (char *)(v51 + 2 * v10);
    LODWORD(v51) = *(unsigned __int8 *)(v24 + 124);
    char v54 = 16 - v51;
    _CF = v51 >= 0x11;
    uint64_t v56 = *v25;
    uint64_t v57 = v25[1];
    result = (unsigned __int8 *)(v56 + v27 * v22 + 2 * v21);
    if (_CF) {
      char v54 = 0;
    }
    uint64_t v58 = v57 + v28 * (v22 / 2) + 2 * v21;
    float v203 = (float)LODWORD(a6);
    float v204 = (float)LODWORD(a5);
    float v190 = *(float *)(v24 + 44);
    float v188 = *(float *)(v24 + 48) * 0.5;
    do
    {
      float v59 = &result[v27];
      uint64_t v60 = &v53[v32];
      if (v20)
      {
        unint64_t v61 = 0;
        unint64_t v62 = &result[v27];
        BOOL v63 = (_DWORD *)(v18 + v14);
        char v64 = &v53[v32];
        char v65 = (_DWORD *)v18;
        do
        {
          uint64_t v66 = (unsigned __int16 *)(v58 + 2 * v61);
          float v67 = (float)(v66[1] >> v54) - v35;
          float v68 = v202 * v67;
          float v69 = v36 * (float)((float)(*(unsigned __int16 *)result >> v54) - v34);
          float v70 = (float)(v202 * v67) + v69;
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = (float)(v202 * v67) + v69;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = (float)(*v66 >> v54) - v35;
          float v73 = (float)(v200 * v67) + (float)(v72 * v201);
          float v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            float v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v199 * v72;
          float v76 = (float)(v199 * v72) + v69;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v36 * (float)((float)(*((unsigned __int16 *)result + 1) >> v54) - v34);
          float v79 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            float v79 = v68 + v78;
            if ((float)(v68 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = 8191.0;
          if ((float)(v73 + v78) <= 8191.0)
          {
            float v80 = v73 + v78;
            if ((float)(v73 + v78) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v75 + v78;
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v40;
          float v84 = v36 * (float)((float)(*(unsigned __int16 *)v62 >> v54) - v34);
          float v85 = 8191.0;
          if ((float)(v68 + v84) <= 8191.0)
          {
            float v85 = v68 + v84;
            if ((float)(v68 + v84) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = 8191.0;
          if ((float)(v73 + v84) <= 8191.0)
          {
            float v86 = v73 + v84;
            if ((float)(v73 + v84) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v75 + v84;
          BOOL v88 = (float)(v75 + v84) <= 8191.0;
          float v89 = 8191.0;
          if (v88)
          {
            float v89 = v87;
            if (v87 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v36 * (float)((float)(*((unsigned __int16 *)v62 + 1) >> v54) - v34);
          float v91 = v68 + v90;
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v73 + v90;
          BOOL v88 = (float)(v73 + v90) <= 8191.0;
          float v94 = 8191.0;
          if (v88)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v36;
          float v96 = v75 + v90;
          float v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S26, H26
          }
          _H27 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          unsigned int v116 = llroundf(fminf(fmaxf(v89, 0.0), 8191.0));
          __asm { FCVT            S1, H27 }
          _H27 = *(_WORD *)(v50 + 2 * v116);
          __asm { FCVT            S27, H27 }
          _H17 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H24 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v124 = llroundf(fminf(fmaxf(v97, 0.0), 8191.0));
          _S25 = (float)((float)(v197 * _S4) + (float)(_S3 * v198)) + (float)(_S5 * v196);
          float v126 = (float)((float)(v194 * _S4) + (float)(_S3 * v195)) + (float)(_S5 * v193);
          _S3 = (float)((float)(v191 * _S4) + (float)(_S3 * v192)) + (float)(_S5 * v189);
          _S4 = (float)((float)(v197 * _S6) + (float)(_S2 * v198)) + (float)(_S7 * v196);
          float v129 = (float)((float)(v194 * _S6) + (float)(_S2 * v195)) + (float)(_S7 * v193);
          float v130 = (float)((float)(v191 * _S6) + (float)(_S2 * v192)) + (float)(_S7 * v189);
          float v131 = (float)((float)(v197 * _S1) + (float)(_S26 * v198)) + (float)(_S27 * v196);
          float v132 = (float)((float)(v194 * _S1) + (float)(_S26 * v195)) + (float)(_S27 * v193);
          float v133 = (float)((float)(v191 * _S1) + (float)(_S26 * v192)) + (float)(_S27 * v189);
          _S1 = (float)(v197 * _S24) + (float)(_S17 * v198);
          float v135 = (float)(v194 * _S24) + (float)(_S17 * v195);
          float v136 = (float)(v191 * _S24) + (float)(_S17 * v192);
          LOWORD(_S24) = *(_WORD *)(v50 + 2 * v124);
          __asm { FCVT            S24, H24 }
          float v138 = _S1 + (float)(_S24 * v196);
          float v139 = v135 + (float)(_S24 * v193);
          float v140 = v136 + (float)(_S24 * v189);
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          unsigned int v142 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          LOWORD(_S4) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H1
            FCVT            S5, H4
          }
          LOWORD(_S25) = *(_WORD *)(v52 + 2 * v142);
          _H21 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          unsigned int v148 = llroundf(fminf(fmaxf(v138, 0.0), 8191.0));
          _H4 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          unsigned int v150 = llroundf(fminf(fmaxf(v139, 0.0), 8191.0));
          __asm { FCVT            S25, H25 }
          unsigned int v152 = llroundf(fminf(fmaxf(v140, 0.0), 8191.0));
          float v40 = v83;
          _H6 = *(_WORD *)(v52 + 2 * v148);
          __asm
          {
            FCVT            S26, H3
            FCVT            S3, H21
          }
          float v156 = (float)((float)(v45 * _S28) + (float)(v44 * _S24)) + (float)(v190 * _S26);
          float v157 = (float)((float)(v83 + (float)((float)(_S24 + _S5) * v188)) + (float)((float)(_S28 + _S25) * v46))
               + (float)((float)(_S26 + _S3) * v47);
          float v158 = (float)((float)(v83 + (float)((float)(_S24 + _S5) * v48)) + (float)((float)(_S28 + _S25) * v205))
               + (float)((float)(_S26 + _S3) * v49);
          if (v157 < v39) {
            float v159 = v39;
          }
          else {
            float v159 = v157;
          }
          BOOL v88 = v157 <= v41;
          _H7 = *(_WORD *)(v52 + 2 * v150);
          float v161 = v156 + v39;
          if (v88) {
            float v162 = v159;
          }
          else {
            float v162 = v41;
          }
          __int16 v163 = llroundf(v162);
          if (v161 < v42) {
            float v164 = v42;
          }
          else {
            float v164 = v161;
          }
          _H24 = *(_WORD *)(v52 + 2 * v152);
          *(_WORD *)uint64_t v53 = v163;
          if (v161 <= v43) {
            float v166 = v164;
          }
          else {
            float v166 = v43;
          }
          *((_WORD *)v53 + 1) = llroundf(v166);
          float v167 = v41;
          if (v158 <= v41)
          {
            float v167 = v158;
            if (v158 < v39) {
              float v167 = v39;
            }
          }
          float v168 = (float)((float)((float)(v45 * _S25) + (float)(v44 * _S5)) + (float)(v190 * _S3)) + v39;
          *((_WORD *)v53 + 2) = llroundf(v167);
          float v169 = v43;
          if (v168 <= v43)
          {
            if (v168 < v42) {
              float v169 = v42;
            }
            else {
              float v169 = v168;
            }
          }
          *((_WORD *)v53 + 3) = llroundf(v169);
          float v36 = v95;
          if (v65) {
            *v65++ = 0;
          }
          __asm
          {
            FCVT            S3, H1
            FCVT            S5, H2
            FCVT            S17, H4
            FCVT            S1, H6
            FCVT            S4, H7
            FCVT            S2, H24
          }
          float v176 = (float)((float)((float)(v45 * _S5) + (float)(v44 * _S3)) + (float)(v190 * _S17)) + v39;
          float v177 = _S3 + _S1;
          float v178 = _S5 + _S4;
          float v179 = _S17 + _S2;
          float v180 = (float)((float)(v83 + (float)(v177 * v188)) + (float)(v178 * v46)) + (float)(v179 * v47);
          float v181 = (float)((float)(v83 + (float)(v177 * v48)) + (float)(v178 * v205)) + (float)(v179 * v49);
          if (v180 < v39) {
            float v182 = v39;
          }
          else {
            float v182 = v180;
          }
          if (v180 > v41) {
            float v182 = v41;
          }
          *(_WORD *)char v64 = llroundf(v182);
          if (v176 < v42) {
            float v183 = v42;
          }
          else {
            float v183 = v176;
          }
          if (v176 > v43) {
            float v183 = v43;
          }
          *((_WORD *)v64 + 1) = llroundf(v183);
          float v184 = v41;
          if (v181 <= v41)
          {
            float v184 = v181;
            if (v181 < v39) {
              float v184 = v39;
            }
          }
          float v185 = (float)((float)((float)(v45 * _S4) + (float)(v44 * _S1)) + (float)(v190 * _S2)) + v39;
          *((_WORD *)v64 + 2) = llroundf(v184);
          float v186 = v43;
          float v35 = v203;
          float v34 = v204;
          if (v185 <= v43)
          {
            float v186 = v185;
            if (v185 < v42) {
              float v186 = v42;
            }
          }
          *((_WORD *)v64 + 3) = llroundf(v186);
          if (v63) {
            *v63++ = 0;
          }
          result += 4;
          v62 += 4;
          v53 += 8;
          v64 += 8;
          v61 += 2;
        }
        while (v20 > v61);
      }
      result = &v59[v27];
      v58 += v28;
      uint64_t v53 = &v60[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      size_t v187 = 2 * v20;
      do
      {
        result = (unsigned __int8 *)memcpy(v16, v31, v187);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          result = (unsigned __int8 *)memset(v16, 255, 2 * v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_v216_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_v216_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = v6 * a2;
  unint64_t v8 = 2 * *(unsigned __int8 *)result;
  unint64_t v9 = (v6 + v6 * a2) / v8;
  uint64_t v10 = *(void *)(result + 112);
  uint64_t v11 = *(void **)(result + 128);
  uint64_t v12 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v8);
  uint64_t v13 = *(uint64_t **)(result + 136);
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (char *)(v15 + v14 * v12 + 2 * v10);
  unint64_t v17 = v7 / v8;
  if (v15) {
    uint64_t v18 = v15 + v14 * v12 + 2 * v10;
  }
  else {
    uint64_t v18 = 0;
  }
  if (2 * v9 != 2 * v17)
  {
    unint64_t v19 = 0;
    unint64_t v20 = *(void *)(result + 20);
    uint64_t v21 = *(void *)(result + 36);
    uint64_t v22 = *(void *)(result + 44) + 2 * v17;
    unint64_t v23 = 2 * v9 - 2 * v17;
    uint64_t v24 = *(void *)(result + 152);
    uint64_t v26 = *(void **)(result + 56);
    uint64_t v25 = *(uint64_t **)(result + 64);
    uint64_t v27 = *v25;
    uint64_t v28 = v25[1];
    uint64_t v29 = v25[2];
    uint64_t v30 = v26[2];
    uint64_t v31 = (char *)(v30 + v29 * v22 + 2 * v21);
    uint64_t v32 = *v13;
    *(float *)&unsigned int v33 = (float)*(unsigned int *)(v24 + 128);
    *(float *)&unsigned int v34 = (float)*(unsigned int *)(v24 + 136);
    float v35 = *(float *)&v34 / *(float *)&v33;
    LOWORD(v33) = *(_WORD *)(v24 + 140);
    float v36 = (float)v33;
    LOWORD(v34) = *(_WORD *)(v24 + 142);
    float v37 = (float)v34;
    float v38 = v35 * *(float *)v24;
    float v119 = v35 * *(float *)(v24 + 8);
    float v39 = v35 * *(float *)(v24 + 16);
    float v40 = v35 * *(float *)(v24 + 20);
    float v41 = *(float *)(v24 + 28);
    float v42 = v35 * v41;
    LOWORD(v41) = *(_WORD *)(v24 + 144);
    float v43 = (float)LODWORD(v41);
    LOWORD(v2) = *(_WORD *)(v24 + 146);
    float v44 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v24 + 148);
    float v45 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v24 + 150);
    float v46 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v24 + 152);
    float v47 = (float)v5;
    float v48 = *(float *)(v24 + 36);
    float v49 = *(float *)(v24 + 40);
    float v50 = *(float *)(v24 + 44);
    float v51 = *(float *)(v24 + 48) * 0.5;
    float v52 = *(float *)(v24 + 52) * 0.5;
    float v53 = *(float *)(v24 + 56) * 0.5;
    float v54 = *(float *)(v24 + 60) * 0.5;
    float v55 = *(float *)(v24 + 64) * 0.5;
    float v56 = *(float *)(v24 + 68) * 0.5;
    uint64_t v57 = (char *)(*v11 + v32 * v12 + 2 * v10);
    LODWORD(result) = *(unsigned __int8 *)(v24 + 124);
    uint64_t v58 = v26[1];
    float v59 = (char *)(*v26 + v27 * v22 + 2 * v21);
    if (result >= 0x11) {
      LOBYTE(result) = 0;
    }
    else {
      LOBYTE(result) = 16 - result;
    }
    uint64_t v60 = v58 + v28 * (v22 / 2) + 2 * v21;
    result = result;
    do
    {
      unint64_t v61 = &v59[v27];
      unint64_t v62 = &v57[v32];
      if (v20)
      {
        unint64_t v63 = 0;
        char v64 = &v59[v27];
        char v65 = (_DWORD *)v18;
        uint64_t v66 = &v57[v32];
        float v67 = (_DWORD *)(v18 + v14);
        do
        {
          float v68 = (unsigned __int16 *)(v60 + 2 * v63);
          float v69 = (float)(*v68 >> result) - v37;
          float v70 = (float)(v68[1] >> result) - v37;
          float v71 = v119 * v70;
          float v72 = (float)(v40 * v70) + (float)(v69 * v39);
          float v73 = v42 * v69;
          float v74 = v38 * (float)((float)(*(unsigned __int16 *)v59 >> result) - v36);
          float v75 = v38 * (float)((float)(*((unsigned __int16 *)v59 + 1) >> result) - v36);
          unsigned int v76 = *(unsigned __int16 *)v64;
          unsigned int v77 = *((unsigned __int16 *)v64 + 1);
          float v78 = v71 + v74;
          float v79 = v74 + v72;
          float v80 = v73 + v74;
          float v81 = v71 + v75;
          float v82 = v72 + v75;
          float v83 = v73 + v75;
          float v84 = (float)((float)((float)(v49 * v79) + (float)(v48 * v78)) + (float)(v50 * v80)) + v43;
          float v85 = v78 + v81;
          float v86 = v79 + v82;
          float v87 = v80 + v83;
          float v88 = (float)((float)(v44 + (float)(v85 * v51)) + (float)(v86 * v52)) + (float)(v87 * v53);
          if (v88 < v43) {
            float v89 = v43;
          }
          else {
            float v89 = (float)((float)(v44 + (float)(v85 * v51)) + (float)(v86 * v52)) + (float)(v87 * v53);
          }
          if (v88 > v45) {
            float v89 = v45;
          }
          *(_WORD *)uint64_t v57 = llroundf(v89);
          float v90 = v47;
          if (v84 <= v47)
          {
            float v90 = v84;
            if (v84 < v46) {
              float v90 = v46;
            }
          }
          float v91 = (float)((float)(v44 + (float)(v85 * v54)) + (float)(v86 * v55)) + (float)(v87 * v56);
          *((_WORD *)v57 + 1) = llroundf(v90);
          float v92 = v45;
          if (v91 <= v45)
          {
            float v92 = v91;
            if (v91 < v43) {
              float v92 = v43;
            }
          }
          float v93 = (float)((float)((float)(v49 * v82) + (float)(v48 * v81)) + (float)(v50 * v83)) + v43;
          *((_WORD *)v57 + 2) = llroundf(v92);
          float v94 = v47;
          if (v93 <= v47)
          {
            if (v93 < v46) {
              float v94 = v46;
            }
            else {
              float v94 = v93;
            }
          }
          *((_WORD *)v57 + 3) = llroundf(v94);
          if (v65) {
            *v65++ = 0;
          }
          float v95 = v38 * (float)((float)(int)(v76 >> result) - v36);
          float v96 = v38 * (float)((float)(int)(v77 >> result) - v36);
          float v97 = v71 + v95;
          float v98 = v72 + v95;
          float v99 = v73 + v95;
          float v100 = v71 + v96;
          float v101 = v72 + v96;
          float v102 = v73 + v96;
          float v103 = (float)((float)((float)(v49 * v98) + (float)(v48 * v97)) + (float)(v50 * v99)) + v43;
          float v104 = (float)((float)((float)(v49 * v101) + (float)(v48 * v100)) + (float)(v50 * v102)) + v43;
          float v105 = v97 + v100;
          float v106 = v98 + v101;
          float v107 = (float)(v44 + (float)(v105 * v51)) + (float)(v106 * v52);
          float v108 = v99 + v102;
          float v109 = v107 + (float)(v108 * v53);
          float v110 = (float)(v44 + (float)(v105 * v54)) + (float)(v106 * v55);
          if (v109 < v43) {
            float v111 = v43;
          }
          else {
            float v111 = v107 + (float)(v108 * v53);
          }
          if (v109 <= v45) {
            float v112 = v111;
          }
          else {
            float v112 = v45;
          }
          float v113 = v110 + (float)(v108 * v56);
          *(_WORD *)uint64_t v66 = llroundf(v112);
          if (v103 < v46) {
            float v114 = v46;
          }
          else {
            float v114 = v103;
          }
          if (v103 > v47) {
            float v114 = v47;
          }
          *((_WORD *)v66 + 1) = llroundf(v114);
          if (v113 < v43) {
            float v115 = v43;
          }
          else {
            float v115 = v113;
          }
          if (v113 <= v45) {
            float v116 = v115;
          }
          else {
            float v116 = v45;
          }
          *((_WORD *)v66 + 2) = llroundf(v116);
          float v117 = v47;
          if (v104 <= v47)
          {
            float v117 = v104;
            if (v104 < v46) {
              float v117 = v46;
            }
          }
          *((_WORD *)v66 + 3) = llroundf(v117);
          if (v67) {
            *v67++ = 0;
          }
          v59 += 4;
          v64 += 4;
          v57 += 8;
          v66 += 8;
          v63 += 2;
        }
        while (v20 > v63);
      }
      float v59 = &v61[v27];
      v60 += v28;
      uint64_t v57 = &v62[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      size_t v118 = 2 * v20;
      do
      {
        result = (unint64_t)memcpy(v16, v31, v118);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          result = (unint64_t)memset(v16, 255, 2 * v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD(float32x2_t *result, uint64_t a2, float32x4_t a3, int16x4_t a4)
{
  uint64_t v4 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v5 = 2 * result->u8[0];
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    size_t v9 = *(size_t *)((char *)&result[2] + 4);
    uint64_t v10 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v11 = *(void *)((char *)&result[5] + 4) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    float32x2_t v13 = result[14];
    uint64_t v14 = (void *)result[16];
    uint64_t v15 = *(void *)&result[15] + 2 * (*(void *)&result[13] * a2 / v5);
    uint64_t v16 = (float32x2_t *)result[19];
    uint64_t v17 = (uint64_t *)result[7];
    uint64_t v18 = (uint64_t *)result[8];
    uint64_t v19 = (uint64_t *)result[17];
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    uint64_t v355 = v18[2];
    uint64_t v358 = v17[2];
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    uint64_t v356 = v19[2];
    uint64_t v357 = v14[2];
    uint64_t v24 = (unsigned char *)(v357 + v356 * v15 + *(void *)&v13);
    unsigned int v25 = v16[17].u16[2];
    unsigned int v26 = v16[17].u16[3];
    a4.i32[0] = v16->i32[0];
    v27.i32[0] = v16[3].i32[1];
    unsigned int v28 = v16[18].u16[0];
    unsigned int v29 = v16[18].u16[1];
    unsigned int v30 = v16[18].u16[2];
    unsigned int v31 = v16[18].u16[3];
    unsigned int v32 = v16[19].u16[0];
    _S29 = v16[5].i32[0];
    __int32 v411 = v16[4].i32[1];
    _S27 = v16[5].i32[1];
    _S10 = v16[6].i32[0];
    _S23 = v16[6].f32[1];
    _S15 = v16[7].f32[0];
    uint64_t v38 = (char *)&v16[2068] + 4;
    uint64_t v354 = v358 + v355 * v11 + 2 * v10;
    float v39 = (float)v25;
    a3.f32[0] = 8191.0 / (float)v16[16].u32[0];
    float v40 = (float)v26;
    _S31 = a3.f32[0] * v16->f32[0];
    float v42 = (float)v30;
    float v43 = (float)v32;
    *(short float *)a4.i16 = (short float)v25;
    result = (float32x2_t *)((char *)v16 + 164);
    short float v44 = (short float)v26;
    float v45 = (char *)&v16[4116] + 4;
    __asm { FCVT            H6, S31 }
    float32x4_t v51 = (float32x4_t)vdupq_lane_s16(a4, 0);
    float16x8_t v406 = (float16x8_t)v51;
    short float v407 = _H6;
    v27.i32[1] = v16[1].i32[0];
    *(float32x2_t *)v51.f32 = vmul_n_f32(v27, a3.f32[0]);
    uint64_t v413 = v51.i64[0];
    *(float32x2_t *)a3.f32 = vmul_n_f32(v16[2], a3.f32[0]);
    unint64_t v412 = a3.i64[0];
    float16x8_t v404 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    float16x8_t v405 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v51), 0);
    _Q0 = vmulq_n_f16(v404, -v44);
    float16x8_t v402 = _Q0;
    float16x8_t v403 = vmulq_n_f16(v405, -v44);
    __asm
    {
      FCVT            H3, S5
      FCVT            H0, S29
    }
    short float v425 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S27 }
    short float v424 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S10 }
    short float v423 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v28;
    float16x8_t v54 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v29;
    int16x8_t v55 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v30;
    int16x8_t v56 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v31;
    int16x8_t v57 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v421 = (float16x8_t)v57;
    float16x8_t v422 = (float16x8_t)v55;
    *(short float *)v57.i16 = (short float)v32;
    float16x8_t v420 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v57.i8, 0);
    unsigned int v58 = v16[15].u8[4];
    if (v58 >= 0x11) {
      unsigned __int8 v59 = 0;
    }
    else {
      unsigned __int8 v59 = 16 - v58;
    }
    unint64_t v62 = v14;
    uint64_t v60 = *v14;
    uint64_t v61 = v62[1];
    if (v61) {
      unint64_t v63 = (char *)(v61 + v23 * v15 + *(void *)&v13);
    }
    else {
      unint64_t v63 = 0;
    }
    char v64 = (int8x8_t *)(v60 + v22 * v15 + *(void *)&v13);
    if (v11 >= 0) {
      uint64_t v65 = v11;
    }
    else {
      uint64_t v65 = v11 + 1;
    }
    uint64_t v66 = *v17;
    uint64_t v67 = v17[1] + v21 * (v65 >> 1) + 2 * v10;
    float v68 = (uint16x8_t *)(v66 + v20 * v11 + 2 * v10);
    unsigned __int8 v69 = v59;
    __asm { FCVT            H6, S23 }
    short float v419 = _H6;
    __asm { FCVT            H6, S15 }
    short float v418 = _H6;
    float v428 = v16[7].f32[1];
    __asm { FCVT            H1, S1 }
    short float v417 = _H1;
    float v427 = v16[8].f32[0];
    __asm { FCVT            H2, S2 }
    short float v416 = _H2;
    float v426 = v16[8].f32[1];
    __asm { FCVT            H2, S4 }
    short float v415 = _H2;
    float v387 = v16[13].f32[1];
    __asm { FCVT            H2, S14 }
    float v386 = v16[14].f32[0];
    __asm { FCVT            H0, S0 }
    short float v382 = _H0;
    short float v383 = _H2;
    float v385 = v16[14].f32[1];
    __asm { FCVT            H0, S1 }
    short float v381 = _H0;
    float v384 = v16[15].f32[0];
    __asm { FCVT            H0, S6 }
    short float v380 = _H0;
    float v399 = v16[9].f32[0];
    __asm { FCVT            H0, S5 }
    short float v379 = _H0;
    float v398 = v16[9].f32[1];
    __asm { FCVT            H0, S7 }
    short float v378 = _H0;
    float v397 = v16[10].f32[0];
    __asm { FCVT            H0, S16 }
    short float v377 = _H0;
    float v396 = v16[10].f32[1];
    __asm { FCVT            H0, S17 }
    short float v376 = _H0;
    float v395 = v16[11].f32[0];
    __asm { FCVT            H0, S21 }
    short float v375 = _H0;
    float v393 = v16[11].f32[1];
    __asm { FCVT            H0, S8 }
    short float v374 = _H0;
    float v391 = v16[12].f32[0];
    __asm { FCVT            H0, S25 }
    short float v373 = _H0;
    float v390 = v16[12].f32[1];
    __asm { FCVT            H0, S26 }
    short float v372 = _H0;
    uint16x8_t v371 = (uint16x8_t)vdupq_n_s16(-v59);
    float v388 = v16[13].f32[0];
    __asm { FCVT            H0, S11 }
    float32_t v88 = v16[4].f32[1];
    float16x8_t v369 = v54;
    short float v370 = _H0;
    uint64_t v364 = *v19;
    uint64_t v365 = v20;
    unint64_t v362 = v12;
    uint64_t v363 = v19[1];
    uint64_t v361 = v21;
    float v414 = v40;
    float v410 = v16[6].f32[0];
    float v409 = v16[5].f32[1];
    float v408 = v16[5].f32[0];
    float v401 = (float)v29;
    float16x8_t v400 = (float16x8_t)v56;
    float v367 = v39;
    float v368 = v43;
    float v394 = (float)v31;
    float v392 = (float)v28;
    short float v389 = _H3;
    float32_t v359 = v16[7].f32[0];
    float32_t v360 = v16[6].f32[1];
    do
    {
      float v89 = &v68->i8[v20];
      float v90 = (char *)v64 + v22;
      float v91 = &v63[v23];
      float v366 = &v63[v23];
      if ((int)v9 < 8)
      {
        size_t v203 = 0;
        float v95 = (int8x8_t *)((char *)v64 + v22);
        float v94 = (uint16x8_t *)v67;
        float v93 = (uint16x8_t *)((char *)v68 + v20);
      }
      else
      {
        int v92 = 0;
        float v93 = (uint16x8_t *)((char *)v68 + v20);
        float v94 = (uint16x8_t *)v67;
        float v95 = (int8x8_t *)((char *)v64 + v22);
        do
        {
          uint16x8_t v96 = *v94++;
          float16x8_t v97 = vcvtq_f16_u16(vshlq_u16(v96, v371));
          int8x16_t v98 = (int8x16_t)vmlaq_f16(v403, v405, v97);
          int8x16_t v99 = (int8x16_t)vmlaq_f16(v402, v404, v97);
          v97.i64[0] = vextq_s8(v98, v98, 8uLL).u64[0];
          *(int16x4_t *)v100.i8 = vuzp1_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v97.i8);
          *(int16x4_t *)v97.i8 = vuzp2_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v97.i8);
          v97.i64[1] = v97.i64[0];
          v100.i64[1] = v97.i64[0];
          float16x8_t v101 = (float16x8_t)vzip1q_s16((int16x8_t)v97, (int16x8_t)v97);
          float16x8_t v102 = (float16x8_t)vzip1q_s16(v100, v100);
          v97.i64[0] = vextq_s8(v99, v99, 8uLL).u64[0];
          *(float16x4_t *)v97.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v97.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v97.i8));
          v97.i64[1] = v97.i64[0];
          float16x8_t v103 = (float16x8_t)vzip1q_s16((int16x8_t)v97, (int16x8_t)v97);
          uint16x8_t v104 = *v68++;
          float16x8_t v105 = vcvtq_f16_u16(vshlq_u16(v104, v371));
          uint16x8_t v106 = *v93++;
          float16x8_t v107 = vsubq_f16(v105, v406);
          float16x8_t v108 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v106, v371)), v406);
          float16x8_t v109 = vmlaq_n_f16(v101, v107, v407);
          float16x8_t v110 = vmlaq_n_f16(v101, v108, v407);
          float16x8_t v111 = vmlaq_n_f16(v103, v107, v407);
          float16x8_t v112 = vmlaq_n_f16(v103, v108, v407);
          float16x8_t v113 = vmlaq_n_f16(v102, v107, v407);
          float16x8_t v114 = vmlaq_n_f16(v102, v108, v407);
          v115.i64[0] = 0x9000900090009000;
          v115.i64[1] = 0x9000900090009000;
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v109, (float16x8_t)0), v115));
          uint32x4_t v117 = vmovl_high_u16(v116);
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v116.i8);
          v119.i16[0] = result->i16[v118.u32[0]];
          v119.i16[1] = result->i16[v118.u32[1]];
          v119.i16[2] = result->i16[v118.u32[2]];
          v119.i16[3] = result->i16[v118.u32[3]];
          v119.i16[4] = result->i16[v117.u32[0]];
          v119.i16[5] = result->i16[v117.u32[1]];
          v119.i16[6] = result->i16[v117.u32[2]];
          v119.i16[7] = result->i16[v117.u32[3]];
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, (float16x8_t)0), v115));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          v123.i16[0] = result->i16[v122.u32[0]];
          v123.i16[1] = result->i16[v122.u32[1]];
          v123.i16[2] = result->i16[v122.u32[2]];
          v123.i16[3] = result->i16[v122.u32[3]];
          v123.i16[4] = result->i16[v121.u32[0]];
          v123.i16[5] = result->i16[v121.u32[1]];
          v123.i16[6] = result->i16[v121.u32[2]];
          v123.i16[7] = result->i16[v121.u32[3]];
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v115));
          uint32x4_t v125 = vmovl_high_u16(v124);
          float16x8_t v126 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v124.i8);
          v126.i16[0] = result->i16[v126.u32[0]];
          v126.i16[1] = result->i16[v126.u32[1]];
          v126.i16[2] = result->i16[v126.u32[2]];
          v126.i16[3] = result->i16[v126.u32[3]];
          v126.i16[4] = result->i16[v125.u32[0]];
          v126.i16[5] = result->i16[v125.u32[1]];
          v126.i16[6] = result->i16[v125.u32[2]];
          v126.i16[7] = result->i16[v125.u32[3]];
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v110, (float16x8_t)0), v115));
          uint32x4_t v128 = vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v110.i16[0] = result->i16[v129.u32[0]];
          v110.i16[1] = result->i16[v129.u32[1]];
          v110.i16[2] = result->i16[v129.u32[2]];
          v110.i16[3] = result->i16[v129.u32[3]];
          v110.i16[4] = result->i16[v128.u32[0]];
          v110.i16[5] = result->i16[v128.u32[1]];
          v110.i16[6] = result->i16[v128.u32[2]];
          v110.i16[7] = result->i16[v128.u32[3]];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, (float16x8_t)0), v115));
          uint32x4_t v131 = vmovl_high_u16(v130);
          float16x8_t v132 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v130.i8);
          v132.i16[0] = result->i16[v132.u32[0]];
          v132.i16[1] = result->i16[v132.u32[1]];
          v132.i16[2] = result->i16[v132.u32[2]];
          v132.i16[3] = result->i16[v132.u32[3]];
          v132.i16[4] = result->i16[v131.u32[0]];
          v132.i16[5] = result->i16[v131.u32[1]];
          v132.i16[6] = result->i16[v131.u32[2]];
          v132.i16[7] = result->i16[v131.u32[3]];
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v115));
          uint32x4_t v134 = vmovl_high_u16(v133);
          float16x8_t v135 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v133.i8);
          v135.i16[0] = result->i16[v135.u32[0]];
          v135.i16[1] = result->i16[v135.u32[1]];
          v135.i16[2] = result->i16[v135.u32[2]];
          v135.i16[3] = result->i16[v135.u32[3]];
          v135.i16[4] = result->i16[v134.u32[0]];
          v135.i16[5] = result->i16[v134.u32[1]];
          v135.i16[6] = result->i16[v134.u32[2]];
          v135.i16[7] = result->i16[v134.u32[3]];
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v119, v383), v123, v382), v126, v381), vmaxq_f16(vmaxq_f16(v119, v123), v126), v380), (float16x8_t)0), v115));
          uint32x4_t v137 = vmovl_high_u16(v136);
          float16x8_t v138 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v136.i8);
          v138.i16[0] = *(_WORD *)&v38[2 * v138.u32[0]];
          v138.i16[1] = *(_WORD *)&v38[2 * v138.u32[1]];
          v138.i16[2] = *(_WORD *)&v38[2 * v138.u32[2]];
          v138.i16[3] = *(_WORD *)&v38[2 * v138.u32[3]];
          v138.i16[4] = *(_WORD *)&v38[2 * v137.u32[0]];
          v138.i16[5] = *(_WORD *)&v38[2 * v137.u32[1]];
          v138.i16[6] = *(_WORD *)&v38[2 * v137.u32[2]];
          v138.i16[7] = *(_WORD *)&v38[2 * v137.u32[3]];
          float16x8_t v139 = vmulq_f16(v119, v138);
          float16x8_t v140 = vmulq_f16(v123, v138);
          float16x8_t v141 = vmulq_f16(v126, v138);
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v110, v383), v132, v382), v135, v381), vmaxq_f16(vmaxq_f16(v110, v132), v135), v380), (float16x8_t)0), v115));
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v142.i8);
          float16x8_t v144 = (float16x8_t)vmovl_high_u16(v142);
          uint64_t v145 = v144.u32[0];
          v144.i16[0] = *(_WORD *)&v38[2 * v143.u32[0]];
          float v146 = (__int16 *)&v38[2 * v144.u32[1]];
          float v147 = (__int16 *)&v38[2 * v144.u32[2]];
          v144.i16[1] = *(_WORD *)&v38[2 * v143.u32[1]];
          v144.i16[2] = *(_WORD *)&v38[2 * v143.u32[2]];
          v144.i16[3] = *(_WORD *)&v38[2 * v143.u32[3]];
          v144.i16[4] = *(_WORD *)&v38[2 * v145];
          v144.i16[5] = *v146;
          unsigned int v148 = (__int16 *)&v38[2 * v144.u32[3]];
          v144.i16[6] = *v147;
          v144.i16[7] = *v148;
          float16x8_t v149 = vmulq_f16(v110, v144);
          float16x8_t v150 = vmulq_f16(v132, v144);
          float16x8_t v151 = vmulq_f16(v135, v144);
          float16x8_t v152 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v139, v379), v140, v378), v141, v377);
          float16x8_t v153 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v139, v376), v140, v375), v141, v374);
          float16x8_t v154 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v141, v370), v140, v372), v139, v373);
          float16x8_t v155 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v149, v379), v150, v378), v151, v377);
          float16x8_t v156 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v149, v376), v150, v375), v151, v374);
          float16x8_t v157 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v151, v370), v150, v372), v149, v373);
          uint16x8_t v158 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v152, (float16x8_t)0), v115));
          uint32x4_t v159 = vmovl_high_u16(v158);
          uint32x4_t v160 = vmovl_u16(*(uint16x4_t *)v158.i8);
          v161.i16[0] = *(_WORD *)&v45[2 * v160.u32[0]];
          v161.i16[1] = *(_WORD *)&v45[2 * v160.u32[1]];
          v161.i16[2] = *(_WORD *)&v45[2 * v160.u32[2]];
          v161.i16[3] = *(_WORD *)&v45[2 * v160.u32[3]];
          v161.i16[4] = *(_WORD *)&v45[2 * v159.u32[0]];
          v161.i16[5] = *(_WORD *)&v45[2 * v159.u32[1]];
          v161.i16[6] = *(_WORD *)&v45[2 * v159.u32[2]];
          v161.i16[7] = *(_WORD *)&v45[2 * v159.u32[3]];
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v153, (float16x8_t)0), v115));
          uint32x4_t v163 = vmovl_high_u16(v162);
          uint32x4_t v164 = vmovl_u16(*(uint16x4_t *)v162.i8);
          v165.i16[0] = *(_WORD *)&v45[2 * v164.u32[0]];
          v165.i16[1] = *(_WORD *)&v45[2 * v164.u32[1]];
          v165.i16[2] = *(_WORD *)&v45[2 * v164.u32[2]];
          v165.i16[3] = *(_WORD *)&v45[2 * v164.u32[3]];
          v165.i16[4] = *(_WORD *)&v45[2 * v163.u32[0]];
          v165.i16[5] = *(_WORD *)&v45[2 * v163.u32[1]];
          v165.i16[6] = *(_WORD *)&v45[2 * v163.u32[2]];
          v165.i16[7] = *(_WORD *)&v45[2 * v163.u32[3]];
          uint16x8_t v166 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v154, (float16x8_t)0), v115));
          uint32x4_t v167 = vmovl_high_u16(v166);
          uint32x4_t v168 = vmovl_u16(*(uint16x4_t *)v166.i8);
          v149.i64[0] = v167.u32[0];
          v176.i16[0] = *(_WORD *)&v45[2 * v168.u32[0]];
          uint64_t v169 = v167.u32[1];
          uint64_t v170 = v167.u32[3];
          uint64_t v171 = v167.u32[2];
          uint16x8_t v172 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v155, (float16x8_t)0), v115));
          uint32x4_t v173 = vmovl_u16(*(uint16x4_t *)v172.i8);
          uint64_t v174 = v173.u32[1];
          uint64_t v175 = v173.u32[0];
          v176.i16[1] = *(_WORD *)&v45[2 * v168.u32[1]];
          v176.i16[2] = *(_WORD *)&v45[2 * v168.u32[2]];
          v176.i16[3] = *(_WORD *)&v45[2 * v168.u32[3]];
          v176.i16[4] = *(_WORD *)&v45[2 * v149.i64[0]];
          v176.i16[5] = *(_WORD *)&v45[2 * v169];
          v176.i16[6] = *(_WORD *)&v45[2 * v171];
          v176.i16[7] = *(_WORD *)&v45[2 * v170];
          uint32x4_t v177 = vmovl_high_u16(v172);
          uint64_t v178 = v173.u32[3];
          uint64_t v179 = v173.u32[2];
          uint64_t v180 = v177.u32[1];
          uint64_t v181 = v177.u32[0];
          uint64_t v182 = v177.u32[3];
          uint64_t v183 = v177.u32[2];
          uint16x8_t v184 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v156, (float16x8_t)0), v115));
          uint32x4_t v185 = vmovl_u16(*(uint16x4_t *)v184.i8);
          uint64_t v186 = v185.u32[1];
          uint64_t v187 = v185.u32[0];
          v188.i16[0] = *(_WORD *)&v45[2 * v175];
          v188.i16[1] = *(_WORD *)&v45[2 * v174];
          v188.i16[2] = *(_WORD *)&v45[2 * v179];
          v188.i16[3] = *(_WORD *)&v45[2 * v178];
          v188.i16[4] = *(_WORD *)&v45[2 * v181];
          v188.i16[5] = *(_WORD *)&v45[2 * v180];
          v188.i16[6] = *(_WORD *)&v45[2 * v183];
          v188.i16[7] = *(_WORD *)&v45[2 * v182];
          uint32x4_t v189 = vmovl_high_u16(v184);
          uint64_t v190 = v185.u32[3];
          uint64_t v191 = v185.u32[2];
          uint64_t v192 = v189.u32[1];
          uint64_t v193 = v189.u32[0];
          uint64_t v194 = v189.u32[3];
          uint64_t v195 = v189.u32[2];
          uint16x8_t v196 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v157, (float16x8_t)0), v115));
          uint32x4_t v197 = vmovl_u16(*(uint16x4_t *)v196.i8);
          v198.i16[0] = *(_WORD *)&v45[2 * v187];
          v198.i16[1] = *(_WORD *)&v45[2 * v186];
          v198.i16[2] = *(_WORD *)&v45[2 * v191];
          v198.i16[3] = *(_WORD *)&v45[2 * v190];
          v198.i16[4] = *(_WORD *)&v45[2 * v193];
          v198.i16[5] = *(_WORD *)&v45[2 * v192];
          v198.i16[6] = *(_WORD *)&v45[2 * v195];
          v198.i16[7] = *(_WORD *)&v45[2 * v194];
          uint32x4_t v199 = vmovl_high_u16(v196);
          v200.i16[0] = *(_WORD *)&v45[2 * v197.u32[0]];
          v200.i16[1] = *(_WORD *)&v45[2 * v197.u32[1]];
          v200.i16[2] = *(_WORD *)&v45[2 * v197.u32[2]];
          v200.i16[3] = *(_WORD *)&v45[2 * v197.u32[3]];
          v200.i16[4] = *(_WORD *)&v45[2 * v199.u32[0]];
          v200.i16[5] = *(_WORD *)&v45[2 * v199.u32[1]];
          v200.i16[6] = *(_WORD *)&v45[2 * v199.u32[2]];
          v200.i16[7] = *(_WORD *)&v45[2 * v199.u32[3]];
          *v64++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v54, v161, v389), v165, v425), v176, v424), v54), v400)));
          if (v63)
          {
            float16x8_t v201 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v422, v161, v417), v165, v416), v176, v415);
            v430.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v422, v161, v423), v165, v419), v176, v418), v421), v420), v421), v420)));
            v430.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(v201));
            vst2_s8(v63, v430);
            v63 += 16;
          }
          float32_t v88 = *(float *)&v411;
          *v95++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v54, v188, v389), v198, v425), v200, v424), v54), v400)));
          if (v91)
          {
            float16x8_t v202 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v422, v188, v417), v198, v416), v200, v415);
            v429.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v422, v188, v423), v198, v419), v200, v418), v421), v420), v421), v420)));
            v429.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(v202));
            vst2_s8(v91, v429);
            v91 += 16;
          }
          v92 += 8;
        }
        while (v92 < (int)v9 - 7);
        size_t v203 = v9 & 0xFFFFFFF8;
        uint64_t v21 = v361;
        unint64_t v12 = v362;
        _S15 = v359;
        _S23 = v360;
        float v40 = v414;
      }
      while (v9 > v203)
      {
        float v204 = (float)(v94->u16[1] >> v69) - v40;
        float v205 = *((float *)&v413 + 1) * v204;
        float v206 = _S31 * (float)((float)(v68->u16[0] >> v69) - v39);
        float v207 = (float)(*((float *)&v413 + 1) * v204) + v206;
        float v208 = 8191.0;
        if (v207 <= 8191.0)
        {
          float v208 = (float)(*((float *)&v413 + 1) * v204) + v206;
          if (v207 < 0.0) {
            float v208 = 0.0;
          }
        }
        float v209 = (float)(v94->u16[0] >> v69) - v40;
        float v210 = (float)(*((float *)&v412 + 1) * v204) + (float)(v209 * *(float *)&v412);
        float v211 = 8191.0;
        if ((float)(v206 + v210) <= 8191.0)
        {
          float v211 = v206 + v210;
          if ((float)(v206 + v210) < 0.0) {
            float v211 = 0.0;
          }
        }
        float v212 = *(float *)&v413 * v209;
        float v213 = v212 + v206;
        float v214 = 8191.0;
        if (v213 <= 8191.0)
        {
          float v214 = v213;
          if (v213 < 0.0) {
            float v214 = 0.0;
          }
        }
        float v215 = _S31 * (float)((float)(v68->u16[1] >> v69) - v39);
        float v216 = 8191.0;
        if ((float)(v205 + v215) <= 8191.0)
        {
          float v216 = v205 + v215;
          if ((float)(v205 + v215) < 0.0) {
            float v216 = 0.0;
          }
        }
        float v217 = 8191.0;
        if ((float)(v210 + v215) <= 8191.0)
        {
          float v217 = v210 + v215;
          if ((float)(v210 + v215) < 0.0) {
            float v217 = 0.0;
          }
        }
        float v218 = v212 + v215;
        float v219 = 8191.0;
        if (v218 <= 8191.0)
        {
          float v219 = v218;
          if (v218 < 0.0) {
            float v219 = 0.0;
          }
        }
        float v220 = _S31 * (float)((float)(v93->u16[0] >> v69) - v39);
        float v221 = 8191.0;
        if ((float)(v205 + v220) <= 8191.0)
        {
          float v221 = v205 + v220;
          if ((float)(v205 + v220) < 0.0) {
            float v221 = 0.0;
          }
        }
        float v222 = 8191.0;
        if ((float)(v210 + v220) <= 8191.0)
        {
          float v222 = v210 + v220;
          if ((float)(v210 + v220) < 0.0) {
            float v222 = 0.0;
          }
        }
        float v223 = v212 + v220;
        float v224 = 8191.0;
        if (v223 <= 8191.0)
        {
          float v224 = v223;
          if (v223 < 0.0) {
            float v224 = 0.0;
          }
        }
        float v225 = _S31 * (float)((float)(v93->u16[1] >> v69) - v39);
        float v226 = v205 + v225;
        BOOL v227 = (float)(v205 + v225) <= 8191.0;
        float v228 = 8191.0;
        if (v227)
        {
          float v228 = v226;
          if (v226 < 0.0) {
            float v228 = 0.0;
          }
        }
        float v229 = v210 + v225;
        BOOL v227 = (float)(v210 + v225) <= 8191.0;
        float v230 = 8191.0;
        if (v227)
        {
          float v230 = v229;
          if (v229 < 0.0) {
            float v230 = 0.0;
          }
        }
        float v231 = _S23;
        float v232 = v212 + v225;
        float v233 = 8191.0;
        if (v232 <= 8191.0)
        {
          float v233 = v232;
          if (v232 < 0.0) {
            float v233 = 0.0;
          }
        }
        _H0 = result->i16[llroundf(fminf(fmaxf(v208, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H1 = result->i16[llroundf(fminf(fmaxf(v211, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = result->i16[llroundf(fminf(fmaxf(v214, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H21 = result->i16[llroundf(fminf(fmaxf(v216, 0.0), 8191.0))];
        _H16 = result->i16[llroundf(fminf(fmaxf(v217, 0.0), 8191.0))];
        _H23 = result->i16[llroundf(fminf(fmaxf(v219, 0.0), 8191.0))];
        _H30 = result->i16[llroundf(fminf(fmaxf(v221, 0.0), 8191.0))];
        _H29 = result->i16[llroundf(fminf(fmaxf(v222, 0.0), 8191.0))];
        _H12 = result->i16[llroundf(fminf(fmaxf(v224, 0.0), 8191.0))];
        _H25 = result->i16[llroundf(fminf(fmaxf(v228, 0.0), 8191.0))];
        _H26 = result->i16[llroundf(fminf(fmaxf(v230, 0.0), 8191.0))];
        _H6 = result->i16[llroundf(fminf(fmaxf(v233, 0.0), 8191.0))];
        float v249 = fmaxf(_S0, fmaxf(_S1, _S2));
        float v250 = (float)((float)((float)(v386 * _S1) + (float)(v387 * _S0)) + (float)(v385 * _S2)) + (float)(v384 * v249);
        float v251 = 8191.0;
        if (v250 <= 8191.0)
        {
          float v251 = (float)((float)((float)(v386 * _S1) + (float)(v387 * _S0)) + (float)(v385 * _S2))
               + (float)(v384 * v249);
          if (v250 < 0.0) {
            float v251 = 0.0;
          }
        }
        float v252 = v88;
        __asm
        {
          FCVT            S7, H21
          FCVT            S17, H16
          FCVT            S21, H23
        }
        _H28 = *(_WORD *)&v38[2 * llroundf(v251)];
        float v257 = (float)((float)((float)(v386 * _S17) + (float)(v387 * _S7)) + (float)(v385 * _S21))
             + (float)(v384 * fmaxf(_S7, fmaxf(_S17, _S21)));
        float v258 = 8191.0;
        if (v257 <= 8191.0)
        {
          float v258 = v257;
          if (v257 < 0.0) {
            float v258 = 0.0;
          }
        }
        __asm
        {
          FCVT            S30, H30
          FCVT            S29, H29
          FCVT            S12, H12
        }
        _H16 = *(_WORD *)&v38[2 * llroundf(v258)];
        float v263 = fmaxf(_S30, fmaxf(_S29, _S12));
        float v264 = (float)((float)((float)(v386 * _S29) + (float)(v387 * _S30)) + (float)(v385 * _S12))
             + (float)(v384 * v263);
        float v265 = 8191.0;
        if (v264 <= 8191.0)
        {
          float v265 = (float)((float)((float)(v386 * _S29) + (float)(v387 * _S30)) + (float)(v385 * _S12))
               + (float)(v384 * v263);
          if (v264 < 0.0) {
            float v265 = 0.0;
          }
        }
        float v266 = v42;
        __asm
        {
          FCVT            S23, H25
          FCVT            S25, H26
          FCVT            S6, H6
        }
        _H26 = *(_WORD *)&v38[2 * llroundf(v265)];
        float v271 = (float)((float)((float)(v386 * _S25) + (float)(v387 * _S23)) + (float)(v385 * _S6))
             + (float)(v384 * fmaxf(_S23, fmaxf(_S25, _S6)));
        float v272 = 8191.0;
        if (v271 <= 8191.0)
        {
          float v272 = v271;
          if (v271 < 0.0) {
            float v272 = 0.0;
          }
        }
        __asm { FCVT            S28, H28 }
        float v274 = _S0 * _S28;
        float v275 = _S1 * _S28;
        _S2 = _S2 * _S28;
        __asm { FCVT            S16, H16 }
        float v278 = _S7 * _S16;
        float v279 = _S17 * _S16;
        float v280 = _S21 * _S16;
        __asm { FCVT            S21, H26 }
        float v282 = _S30 * _S21;
        float v283 = _S29 * _S21;
        float v284 = _S12 * _S21;
        _H27 = *(_WORD *)&v38[2 * llroundf(v272)];
        __asm { FCVT            S27, H27 }
        float v287 = _S23 * _S27;
        float v288 = _S25 * _S27;
        float v289 = _S6 * _S27;
        float v290 = (float)((float)(v398 * v275) + (float)(v274 * v399)) + (float)(_S2 * v397);
        float v291 = (float)((float)(v395 * v275) + (float)(v274 * v396)) + (float)(_S2 * v393);
        _S0 = (float)((float)(v390 * v275) + (float)(v274 * v391)) + (float)(_S2 * v388);
        float v293 = (float)((float)(v398 * v279) + (float)(v278 * v399)) + (float)(v280 * v397);
        float v294 = (float)((float)(v395 * v279) + (float)(v278 * v396)) + (float)(v280 * v393);
        float v295 = (float)((float)(v390 * v279) + (float)(v278 * v391)) + (float)(v280 * v388);
        float v296 = (float)((float)(v398 * v283) + (float)(v282 * v399)) + (float)(v284 * v397);
        float v297 = (float)((float)(v395 * v283) + (float)(v282 * v396)) + (float)(v284 * v393);
        float v298 = (float)((float)(v390 * v283) + (float)(v282 * v391)) + (float)(v284 * v388);
        float v299 = (float)((float)(v398 * v288) + (float)(v287 * v399)) + (float)(v289 * v397);
        float v300 = (float)((float)(v395 * v288) + (float)(v287 * v396)) + (float)(v289 * v393);
        float v301 = (float)((float)(v390 * v288) + (float)(v287 * v391)) + (float)(v289 * v388);
        LOWORD(_S2) = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v290, 0.0), 8191.0))];
        __asm { FCVT            S6, H2 }
        LOWORD(_S2) = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v291, 0.0), 8191.0))];
        __asm { FCVT            S28, H2 }
        LOWORD(_S0) = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm { FCVT            S30, H0 }
        _H2 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v293, 0.0), 8191.0))];
        _H7 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v294, 0.0), 8191.0))];
        _H17 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v295, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v296, 0.0), 8191.0))];
        _H26 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v297, 0.0), 8191.0))];
        _H14 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v298, 0.0), 8191.0))];
        _H21 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v299, 0.0), 8191.0))];
        _H25 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v300, 0.0), 8191.0))];
        _H0 = *(_WORD *)&v45[2 * llroundf(fminf(fmaxf(v301, 0.0), 8191.0))];
        float32_t v88 = v252;
        float v314 = (float)((float)((float)(v408 * _S28) + (float)(v252 * _S6)) + (float)(v409 * _S30)) + v392;
        float v42 = v266;
        float v315 = v266;
        if (v314 <= v266)
        {
          float v315 = (float)((float)((float)(v408 * _S28) + (float)(v252 * _S6)) + (float)(v409 * _S30)) + v392;
          if (v314 < v392) {
            float v315 = v392;
          }
        }
        v64->i8[0] = llroundf(v315);
        _S23 = v231;
        if (v63)
        {
          float v316 = (float)((float)(v401 + (float)(_S6 * v410)) + (float)(_S28 * v231)) + (float)(_S30 * _S15);
          float v317 = v368;
          float v318 = v368;
          if (v316 <= v368)
          {
            float v318 = (float)((float)(v401 + (float)(_S6 * v410)) + (float)(_S28 * v231)) + (float)(_S30 * _S15);
            if (v316 < v394) {
              float v318 = v394;
            }
          }
          float v319 = (float)((float)(v401 + (float)(_S6 * v428)) + (float)(_S28 * v427)) + (float)(_S30 * v426);
          *unint64_t v63 = llroundf(v318);
          float v320 = v368;
          float v39 = v367;
          float v40 = v414;
          float16x8_t v54 = v369;
          if (v319 <= v368)
          {
            float v320 = v319;
            if (v319 < v394) {
              float v320 = v394;
            }
          }
          v63[1] = llroundf(v320);
          v63 += 2;
          _S23 = v231;
        }
        else
        {
          float v39 = v367;
          float v317 = v368;
          float v40 = v414;
          float16x8_t v54 = v369;
        }
        __asm
        {
          FCVT            S2, H2
          FCVT            S6, H7
          FCVT            S7, H17
        }
        float v324 = (float)((float)((float)(v408 * _S6) + (float)(v252 * _S2)) + (float)(v409 * _S7)) + v392;
        float v325 = v266;
        if (v324 <= v266)
        {
          float v325 = (float)((float)((float)(v408 * _S6) + (float)(v252 * _S2)) + (float)(v409 * _S7)) + v392;
          if (v324 < v392) {
            float v325 = v392;
          }
        }
        v64->i8[1] = llroundf(v325);
        if (v63)
        {
          float v326 = (float)((float)(v401 + (float)(_S2 * v410)) + (float)(_S6 * _S23)) + (float)(_S7 * _S15);
          float v327 = v317;
          if (v326 <= v317)
          {
            float v327 = (float)((float)(v401 + (float)(_S2 * v410)) + (float)(_S6 * _S23)) + (float)(_S7 * _S15);
            if (v326 < v394) {
              float v327 = v394;
            }
          }
          float v328 = (float)((float)(v401 + (float)(_S2 * v428)) + (float)(_S6 * v427)) + (float)(_S7 * v426);
          *unint64_t v63 = llroundf(v327);
          float v329 = v317;
          if (v328 <= v317)
          {
            float v329 = v328;
            if (v328 < v394) {
              float v329 = v394;
            }
          }
          v63[1] = llroundf(v329);
          v63 += 2;
        }
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H26
          FCVT            S6, H14
        }
        float v333 = (float)((float)((float)(v408 * _S2) + (float)(v252 * _S1)) + (float)(v409 * _S6)) + v392;
        float v334 = v266;
        if (v333 <= v266)
        {
          float v334 = (float)((float)((float)(v408 * _S2) + (float)(v252 * _S1)) + (float)(v409 * _S6)) + v392;
          if (v333 < v392) {
            float v334 = v392;
          }
        }
        v95->i8[0] = llroundf(v334);
        if (v91)
        {
          float v335 = (float)((float)(v401 + (float)(_S1 * v410)) + (float)(_S2 * _S23)) + (float)(_S6 * _S15);
          float v336 = v317;
          if (v335 <= v317)
          {
            float v336 = (float)((float)(v401 + (float)(_S1 * v410)) + (float)(_S2 * _S23)) + (float)(_S6 * _S15);
            if (v335 < v394) {
              float v336 = v394;
            }
          }
          float v337 = (float)((float)(v401 + (float)(_S1 * v428)) + (float)(_S2 * v427)) + (float)(_S6 * v426);
          *float v91 = llroundf(v336);
          float v338 = v317;
          if (v337 <= v317)
          {
            float v338 = v337;
            if (v337 < v394) {
              float v338 = v394;
            }
          }
          v91[1] = llroundf(v338);
          v91 += 2;
        }
        __asm
        {
          FCVT            S1, H21
          FCVT            S2, H25
          FCVT            S0, H0
        }
        float v342 = (float)((float)((float)(v408 * _S2) + (float)(v252 * _S1)) + (float)(v409 * _S0)) + v392;
        float v343 = v266;
        if (v342 <= v266)
        {
          float v343 = (float)((float)((float)(v408 * _S2) + (float)(v252 * _S1)) + (float)(v409 * _S0)) + v392;
          if (v342 < v392) {
            float v343 = v392;
          }
        }
        v95->i8[1] = llroundf(v343);
        if (v91)
        {
          float v344 = (float)((float)(v401 + (float)(_S1 * v410)) + (float)(_S2 * _S23)) + (float)(_S0 * _S15);
          float v345 = v317;
          if (v344 <= v317)
          {
            float v345 = (float)((float)(v401 + (float)(_S1 * v410)) + (float)(_S2 * _S23)) + (float)(_S0 * _S15);
            if (v344 < v394) {
              float v345 = v394;
            }
          }
          float v346 = (float)((float)(v401 + (float)(_S1 * v428)) + (float)(_S2 * v427)) + (float)(_S0 * v426);
          *float v91 = llroundf(v345);
          float v347 = v317;
          if (v346 <= v317)
          {
            float v347 = v346;
            if (v346 < v394) {
              float v347 = v394;
            }
          }
          v91[1] = llroundf(v347);
          v91 += 2;
        }
        v203 += 2;
        float v94 = (uint16x8_t *)((char *)v94 + 4);
        float v68 = (uint16x8_t *)((char *)v68 + 4);
        float v93 = (uint16x8_t *)((char *)v93 + 4);
        char v64 = (int8x8_t *)((char *)v64 + 2);
        float v95 = (int8x8_t *)((char *)v95 + 2);
      }
      uint64_t v22 = v364;
      uint64_t v20 = v365;
      float v68 = (uint16x8_t *)&v89[v365];
      v67 += v21;
      char v64 = (int8x8_t *)&v90[v364];
      uint64_t v23 = v363;
      unint64_t v63 = &v366[v363];
      v8 += 2;
    }
    while (v12 > v8);
    if (v358 && v357)
    {
      uint64_t v348 = 0;
      float v349 = (unsigned __int16 *)v354;
      do
      {
        if (v9)
        {
          size_t v350 = v9;
          float v351 = v24;
          float v352 = v349;
          do
          {
            unsigned int v353 = *v352++;
            *v351++ = llroundf((float)v353 * 0.0038911);
            --v350;
          }
          while (v350);
        }
        float v349 = (unsigned __int16 *)((char *)v349 + v355);
        v24 += v356;
        ++v348;
      }
      while (v348 != v12);
    }
    else if (v357)
    {
      do
      {
        if (v9) {
          result = (float32x2_t *)memset(v24, 255, v9);
        }
        v24 += v356;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = 2 * *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    uint64_t v12 = *(void *)((char *)result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = result[14];
    unint64_t v15 = result[13] * a2 / v6;
    uint64_t v16 = (void *)result[16];
    uint64_t v17 = result[15] + 2 * v15;
    uint64_t v18 = result[19];
    uint64_t v19 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v224 = v19[2];
    uint64_t v25 = v224 + v24 * v12 + 2 * v11;
    uint64_t v26 = *v21;
    uint64_t v27 = v21[1];
    uint64_t v28 = v21[2];
    uint64_t v29 = v16[2];
    uint64_t v30 = (unsigned char *)(v29 + v28 * v17 + v14);
    float v31 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    float v32 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v33 = (float)LODWORD(a5);
    float v34 = v31 * *(float *)v18;
    float v249 = v31 * *(float *)(v18 + 16);
    float v250 = v31 * *(float *)(v18 + 8);
    float v35 = v31 * *(float *)(v18 + 20);
    float v39 = v31 * *(float *)(v18 + 28);
    float v247 = v39;
    float v248 = v35;
    LOWORD(v39) = *(_WORD *)(v18 + 144);
    float v36 = (float)LODWORD(v39);
    LOWORD(v39) = *(_WORD *)(v18 + 146);
    float v37 = (float)LODWORD(v39);
    LOWORD(v39) = *(_WORD *)(v18 + 148);
    float v38 = (float)LODWORD(v39);
    LOWORD(v39) = *(_WORD *)(v18 + 150);
    float v40 = *(float *)(v18 + 40);
    float v41 = *(float *)(v18 + 48);
    float v43 = *(float *)(v18 + 52);
    float v42 = *(float *)(v18 + 56);
    float v244 = *(float *)(v18 + 76);
    float v245 = *(float *)(v18 + 72);
    float v242 = *(float *)(v18 + 84);
    float v243 = *(float *)(v18 + 80);
    float v239 = *(float *)(v18 + 92);
    float v240 = *(float *)(v18 + 88);
    float v237 = *(float *)(v18 + 100);
    float v238 = *(float *)(v18 + 96);
    float v236 = *(float *)(v18 + 104);
    uint64_t v44 = v18 + 164;
    result = (void *)(v18 + 16548);
    uint64_t v45 = v16[1];
    float v46 = (unsigned char *)(*v16 + v26 * v17 + v14);
    float v47 = (unsigned char *)(v45 + v27 * v17 + v14);
    if (v45) {
      float v48 = v47;
    }
    else {
      float v48 = 0;
    }
    unsigned int v49 = *(unsigned __int8 *)(v18 + 124);
    char v50 = 16 - v49;
    _CF = v49 >= 0x11;
    uint64_t v53 = *v19;
    uint64_t v52 = v19[1];
    uint64_t v54 = v53 + v22 * v12;
    if (_CF) {
      char v50 = 0;
    }
    uint64_t v55 = v52 + v23 * (v12 / 2);
    uint64_t v56 = v18 + 32932;
    int16x8_t v57 = (char *)(v54 + 2 * v11);
    uint64_t v58 = v55 + 2 * v11;
    char v59 = v50;
    float v60 = *(float *)(v18 + 108);
    float v233 = (float)LODWORD(a5);
    float v234 = *(float *)(v18 + 112);
    float v61 = *(float *)(v18 + 116);
    float v251 = *(float *)(v18 + 120);
    float v231 = v37;
    float v232 = v32;
    float v246 = (float)LODWORD(v39);
    float v229 = *(float *)(v18 + 64);
    float v230 = *(float *)(v18 + 68);
    float v241 = *(float *)(v18 + 36);
    float v227 = v34;
    float v228 = *(float *)(v18 + 60);
    float v235 = *(float *)(v18 + 44);
    LOWORD(v39) = *(_WORD *)(v18 + 152);
    float v225 = (float)LODWORD(v39);
    float v226 = v60;
    do
    {
      unint64_t v62 = &v57[v22];
      unint64_t v63 = &v48[v27];
      char v64 = &v46[v26];
      if (v10)
      {
        size_t v65 = 0;
        uint64_t v66 = &v57[v22];
        uint64_t v67 = &v48[v27];
        float v68 = &v46[v26];
        do
        {
          unsigned __int8 v69 = (unsigned __int16 *)(v58 + 2 * v65);
          float v70 = (float)(v69[1] >> v59) - v33;
          float v71 = v250 * v70;
          float v72 = v34 * (float)((float)(*(unsigned __int16 *)v57 >> v59) - v32);
          float v73 = (float)(v250 * v70) + v72;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = (float)(v250 * v70) + v72;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = (float)(*v69 >> v59) - v33;
          float v76 = (float)(v248 * v70) + (float)(v75 * v249);
          float v77 = 8191.0;
          if ((float)(v72 + v76) <= 8191.0)
          {
            float v77 = v72 + v76;
            if ((float)(v72 + v76) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v247 * v75;
          float v79 = (float)(v247 * v75) + v72;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v34 * (float)((float)(*((unsigned __int16 *)v57 + 1) >> v59) - v32);
          float v82 = 8191.0;
          if ((float)(v71 + v81) <= 8191.0)
          {
            float v82 = v71 + v81;
            if ((float)(v71 + v81) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = 8191.0;
          if ((float)(v76 + v81) <= 8191.0)
          {
            float v83 = v76 + v81;
            if ((float)(v76 + v81) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v78 + v81;
          BOOL v85 = (float)(v78 + v81) <= 8191.0;
          float v86 = 8191.0;
          if (v85)
          {
            float v86 = v84;
            if (v84 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v34 * (float)((float)(*(unsigned __int16 *)v66 >> v59) - v32);
          float v88 = 8191.0;
          if ((float)(v71 + v87) <= 8191.0)
          {
            float v88 = v71 + v87;
            if ((float)(v71 + v87) < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = 8191.0;
          if ((float)(v76 + v87) <= 8191.0)
          {
            float v89 = v76 + v87;
            if ((float)(v76 + v87) < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v78 + v87;
          BOOL v85 = (float)(v78 + v87) <= 8191.0;
          float v91 = 8191.0;
          if (v85)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v34 * (float)((float)(*((unsigned __int16 *)v66 + 1) >> v59) - v32);
          float v93 = v71 + v92;
          BOOL v85 = (float)(v71 + v92) <= 8191.0;
          float v94 = 8191.0;
          if (v85)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v76 + v92;
          BOOL v85 = (float)(v76 + v92) <= 8191.0;
          float v96 = 8191.0;
          if (v85)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v78 + v92;
          float v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H27 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          float v117 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v118 = (float)((float)((float)(v234 * _S24) + (float)(v60 * _S2)) + (float)(v61 * _S25))
               + (float)(v251 * v117);
          float v119 = 8191.0;
          if (v118 <= 8191.0)
          {
            float v119 = (float)((float)((float)(v234 * _S24) + (float)(v60 * _S2)) + (float)(v61 * _S25))
                 + (float)(v251 * v117);
            if (v118 < 0.0) {
              float v119 = 0.0;
            }
          }
          __asm
          {
            FCVT            S1, H27
            FCVT            S3, H19
            FCVT            S19, H8
          }
          _H27 = *((_WORD *)result + llroundf(v119));
          float v124 = (float)((float)((float)(v234 * _S3) + (float)(v60 * _S1)) + (float)(v61 * _S19))
               + (float)(v251 * fmaxf(_S1, fmaxf(_S3, _S19)));
          float v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            float v125 = v124;
            if (v124 < 0.0) {
              float v125 = 0.0;
            }
          }
          __asm
          {
            FCVT            S28, H29
            FCVT            S23, H23
            FCVT            S29, H30
          }
          _H30 = *((_WORD *)result + llroundf(v125));
          float v130 = v61;
          float v131 = (float)((float)((float)(v234 * _S23) + (float)(v60 * _S28)) + (float)(v61 * _S29))
               + (float)(v251 * fmaxf(_S28, fmaxf(_S23, _S29)));
          float v132 = 8191.0;
          if (v131 <= 8191.0)
          {
            float v132 = v131;
            if (v131 < 0.0) {
              float v132 = 0.0;
            }
          }
          float v133 = v40;
          __asm
          {
            FCVT            S21, H21
            FCVT            S22, H22
            FCVT            S26, H26
          }
          _H31 = *((_WORD *)result + llroundf(v132));
          float v138 = (float)((float)((float)(v234 * _S22) + (float)(v60 * _S21)) + (float)(v61 * _S26))
               + (float)(v251 * fmaxf(_S21, fmaxf(_S22, _S26)));
          float v139 = 8191.0;
          if (v138 <= 8191.0)
          {
            float v139 = v138;
            if (v138 < 0.0) {
              float v139 = 0.0;
            }
          }
          __asm { FCVT            S27, H27 }
          float v141 = _S2 * _S27;
          float v142 = _S24 * _S27;
          float v143 = _S25 * _S27;
          __asm { FCVT            S27, H30 }
          _S1 = _S1 * _S27;
          float v146 = _S3 * _S27;
          float v147 = _S19 * _S27;
          __asm { FCVT            S27, H31 }
          float v149 = _S28 * _S27;
          float v150 = _S23 * _S27;
          float v151 = _S29 * _S27;
          _H29 = *((_WORD *)result + llroundf(v139));
          __asm { FCVT            S29, H29 }
          float v154 = _S21 * _S29;
          float v155 = _S22 * _S29;
          float v156 = _S26 * _S29;
          float v157 = (float)((float)(v244 * v142) + (float)(v141 * v245)) + (float)(v143 * v243);
          float v158 = (float)((float)(v240 * v142) + (float)(v141 * v242)) + (float)(v143 * v239);
          float v159 = (float)((float)(v237 * v142) + (float)(v141 * v238)) + (float)(v143 * v236);
          float v160 = (float)((float)(v244 * v146) + (float)(_S1 * v245)) + (float)(v147 * v243);
          float v161 = (float)((float)(v240 * v146) + (float)(_S1 * v242)) + (float)(v147 * v239);
          float v162 = (float)((float)(v237 * v146) + (float)(_S1 * v238)) + (float)(v147 * v236);
          float v163 = (float)((float)(v244 * v150) + (float)(v149 * v245)) + (float)(v151 * v243);
          float v164 = (float)((float)(v240 * v150) + (float)(v149 * v242)) + (float)(v151 * v239);
          float v165 = (float)((float)(v237 * v150) + (float)(v149 * v238)) + (float)(v151 * v236);
          float v166 = (float)((float)(v244 * v155) + (float)(v154 * v245)) + (float)(v156 * v243);
          float v167 = (float)((float)(v240 * v155) + (float)(v154 * v242)) + (float)(v156 * v239);
          float v168 = (float)((float)(v237 * v155) + (float)(v154 * v238)) + (float)(v156 * v236);
          LOWORD(_S1) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          __asm { FCVT            S21, H1 }
          LOWORD(_S1) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S22, H1 }
          LOWORD(_S1) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          float v40 = v133;
          float v181 = (float)((float)((float)(v133 * _S22) + (float)(v241 * _S21)) + (float)(v235 * _S29)) + v36;
          float v182 = v38;
          if (v181 <= v38)
          {
            float v182 = (float)((float)((float)(v133 * _S22) + (float)(v241 * _S21)) + (float)(v235 * _S29)) + v36;
            if (v181 < v36) {
              float v182 = v36;
            }
          }
          *float v46 = llroundf(v182);
          float v61 = v130;
          if (v48)
          {
            float v183 = v231;
            float v184 = (float)((float)(v231 + (float)(_S21 * v41)) + (float)(_S22 * v43)) + (float)(_S29 * v42);
            float v185 = v225;
            float v186 = v225;
            if (v184 <= v225)
            {
              float v186 = (float)((float)(v231 + (float)(_S21 * v41)) + (float)(_S22 * v43)) + (float)(_S29 * v42);
              if (v184 < v246) {
                float v186 = v246;
              }
            }
            float v188 = v228;
            float v187 = v229;
            float v189 = (float)((float)(v231 + (float)(_S21 * v228)) + (float)(_S22 * v229)) + (float)(_S29 * v230);
            float v190 = v230;
            *float v48 = llroundf(v186);
            float v191 = v225;
            float v32 = v232;
            float v60 = v226;
            float v34 = v227;
            if (v189 <= v225)
            {
              float v191 = v189;
              if (v189 < v246) {
                float v191 = v246;
              }
            }
            v48[1] = llroundf(v191);
            v48 += 2;
          }
          else
          {
            float v183 = v231;
            float v32 = v232;
            float v34 = v227;
            float v188 = v228;
            float v187 = v229;
            float v190 = v230;
            float v185 = v225;
            float v60 = v226;
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S3, H3
            FCVT            S19, H19
          }
          float v195 = (float)((float)((float)(v133 * _S3) + (float)(v241 * _S1)) + (float)(v235 * _S19)) + v36;
          float v196 = v38;
          if (v195 <= v38)
          {
            float v196 = (float)((float)((float)(v133 * _S3) + (float)(v241 * _S1)) + (float)(v235 * _S19)) + v36;
            if (v195 < v36) {
              float v196 = v36;
            }
          }
          v46[1] = llroundf(v196);
          if (v48)
          {
            float v197 = (float)((float)(v183 + (float)(_S1 * v41)) + (float)(_S3 * v43)) + (float)(_S19 * v42);
            float v198 = v185;
            if (v197 <= v185)
            {
              float v198 = (float)((float)(v183 + (float)(_S1 * v41)) + (float)(_S3 * v43)) + (float)(_S19 * v42);
              if (v197 < v246) {
                float v198 = v246;
              }
            }
            float v199 = (float)((float)(v183 + (float)(_S1 * v188)) + (float)(_S3 * v187)) + (float)(_S19 * v190);
            *float v48 = llroundf(v198);
            float v200 = v185;
            if (v199 <= v185)
            {
              float v200 = v199;
              if (v199 < v246) {
                float v200 = v246;
              }
            }
            v48[1] = llroundf(v200);
            v48 += 2;
          }
          __asm
          {
            FCVT            S1, H26
            FCVT            S3, H27
            FCVT            S19, H28
          }
          float v204 = (float)((float)((float)(v133 * _S3) + (float)(v241 * _S1)) + (float)(v235 * _S19)) + v36;
          float v205 = v38;
          if (v204 <= v38)
          {
            float v205 = (float)((float)((float)(v133 * _S3) + (float)(v241 * _S1)) + (float)(v235 * _S19)) + v36;
            if (v204 < v36) {
              float v205 = v36;
            }
          }
          unsigned char *v68 = llroundf(v205);
          if (v67)
          {
            float v206 = (float)((float)(v183 + (float)(_S1 * v41)) + (float)(_S3 * v43)) + (float)(_S19 * v42);
            float v207 = v185;
            if (v206 <= v185)
            {
              float v207 = (float)((float)(v183 + (float)(_S1 * v41)) + (float)(_S3 * v43)) + (float)(_S19 * v42);
              if (v206 < v246) {
                float v207 = v246;
              }
            }
            float v208 = (float)((float)(v183 + (float)(_S1 * v188)) + (float)(_S3 * v187)) + (float)(_S19 * v190);
            *uint64_t v67 = llroundf(v207);
            float v209 = v185;
            if (v208 <= v185)
            {
              float v209 = v208;
              if (v208 < v246) {
                float v209 = v246;
              }
            }
            v67[1] = llroundf(v209);
            v67 += 2;
          }
          __asm
          {
            FCVT            S1, H2
            FCVT            S2, H24
            FCVT            S3, H25
          }
          float v213 = (float)((float)((float)(v133 * _S2) + (float)(v241 * _S1)) + (float)(v235 * _S3)) + v36;
          float v214 = v38;
          if (v213 <= v38)
          {
            float v214 = (float)((float)((float)(v133 * _S2) + (float)(v241 * _S1)) + (float)(v235 * _S3)) + v36;
            if (v213 < v36) {
              float v214 = v36;
            }
          }
          v68[1] = llroundf(v214);
          if (v67)
          {
            float v215 = (float)((float)(v183 + (float)(_S1 * v41)) + (float)(_S2 * v43)) + (float)(_S3 * v42);
            float v216 = v185;
            if (v215 <= v185)
            {
              float v216 = (float)((float)(v183 + (float)(_S1 * v41)) + (float)(_S2 * v43)) + (float)(_S3 * v42);
              if (v215 < v246) {
                float v216 = v246;
              }
            }
            float v217 = (float)((float)(v183 + (float)(_S1 * v188)) + (float)(_S2 * v187)) + (float)(_S3 * v190);
            *uint64_t v67 = llroundf(v216);
            float v218 = v185;
            float v33 = v233;
            if (v217 <= v185)
            {
              float v218 = v217;
              if (v217 < v246) {
                float v218 = v246;
              }
            }
            v67[1] = llroundf(v218);
            v67 += 2;
          }
          else
          {
            float v33 = v233;
          }
          v57 += 4;
          v66 += 4;
          v46 += 2;
          v68 += 2;
          v65 += 2;
        }
        while (v10 > v65);
      }
      int16x8_t v57 = &v62[v22];
      v58 += v23;
      float v46 = &v64[v26];
      float v48 = &v63[v27];
      v9 += 2;
    }
    while (v13 > v9);
    if (v224 && v29)
    {
      uint64_t v219 = 0;
      do
      {
        if (v10)
        {
          size_t v220 = v10;
          float v221 = v30;
          float v222 = (unsigned __int16 *)v25;
          do
          {
            unsigned int v223 = *v222++;
            *v221++ = llroundf((float)v223 * 0.0038911);
            --v220;
          }
          while (v220);
        }
        v25 += v24;
        v30 += v28;
        ++v219;
      }
      while (v219 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          result = memset(v30, 255, v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_444vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_xf420_TRC_Mat_TRC_444vf_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, double a4, double a5, float32x4_t a6, int16x4_t a7)
{
  uint64_t v8 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v9 = 2 * result->u8[0];
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    size_t v13 = *(size_t *)((char *)&result[2] + 4);
    uint64_t v14 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v15 = *(void *)((char *)&result[5] + 4) + 2 * v10;
    unint64_t v16 = 2 * v11 - 2 * v10;
    float32x2_t v17 = result[14];
    uint64_t v18 = (void *)result[16];
    uint64_t v19 = *(void *)&result[15] + 2 * (*(void *)&result[13] * a2 / v9);
    uint64_t v20 = (float32x2_t *)result[19];
    uint64_t v21 = (void *)result[7];
    size_t v22 = (uint64_t *)result[8];
    uint64_t v23 = (uint64_t *)result[17];
    uint64_t v24 = *v22;
    uint64_t v25 = v22[1];
    uint64_t v334 = v22[2];
    uint64_t v337 = v21[2];
    uint64_t v26 = *v23;
    uint64_t v27 = v23[1];
    uint64_t v335 = v23[2];
    uint64_t v336 = v18[2];
    uint64_t v28 = (unsigned char *)(v336 + v335 * v19 + *(void *)&v17);
    LODWORD(v23) = v20[17].u16[2];
    unsigned int v29 = v20[17].u16[3];
    a6.i32[0] = v20[3].i32[1];
    unsigned int v30 = v20[18].u16[0];
    unsigned int v31 = v20[18].u16[1];
    unsigned int v32 = v20[18].u16[2];
    unsigned int v33 = v20[18].u16[3];
    LODWORD(a3) = 1174403072;
    unsigned int v34 = v20[19].u16[0];
    _S28 = v20[4].f32[1];
    _S29 = v20[5].f32[0];
    _S30 = v20[5].f32[1];
    _S8 = v20[6].f32[0];
    _S22 = v20[6].i32[1];
    _S9 = v20[7].i32[0];
    _S21 = v20[7].i32[1];
    _S10 = v20[8].i32[0];
    _S15 = v20[8].i32[1];
    _S6 = v20[9].i32[0];
    float v45 = (float)v23;
    *(short float *)a7.i16 = (short float)v23;
    float v46 = (char *)&v20[20] + 4;
    uint64_t v333 = v337 + v334 * v15 + 2 * v14;
    float v47 = 8191.0 / (float)v20[16].u32[0];
    float v393 = (float)v29;
    _S24 = v47 * v20->f32[0];
    float v49 = (float)v30;
    float v50 = (float)v33;
    short float v51 = (short float)v29;
    result = (float32x2_t *)((char *)v20 + 16548);
    __asm { FCVT            H11, S24 }
    float16x8_t v376 = (float16x8_t)vdupq_lane_s16(a7, 0);
    short float v377 = _H11;
    a6.i32[1] = v20[1].i32[0];
    *(float32x2_t *)a6.f32 = vmul_n_f32(*(float32x2_t *)a6.f32, v47);
    short float v57 = -v51;
    *(float32x2_t *)v7.f32 = vmul_n_f32(v20[2], v47);
    float16x8_t v374 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    float16x8_t v58 = vmulq_n_f16(v374, v57);
    float16x8_t v372 = v58;
    *(short float *)v58.i16 = (short float)v30;
    int16x8_t v59 = vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    float16x8_t v392 = (float16x8_t)v59;
    *(short float *)v59.i16 = (short float)v31;
    int16x8_t v60 = vdupq_lane_s16(*(int16x4_t *)v59.i8, 0);
    float16x8_t v386 = (float16x8_t)v60;
    *(short float *)v60.i16 = (short float)v32;
    int16x8_t v61 = vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    float16x8_t v391 = (float16x8_t)v61;
    *(short float *)v61.i16 = (short float)v33;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    *(short float *)v61.i16 = (short float)v34;
    float16x8_t v385 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    float16x8_t v373 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v7), 0);
    float16x8_t v371 = vmulq_n_f16(v373, v57);
    unsigned int v63 = v20[15].u8[4];
    if (v63 >= 0x11) {
      unsigned __int8 v64 = 0;
    }
    else {
      unsigned __int8 v64 = 16 - v63;
    }
    uint64_t v67 = v18;
    uint64_t v65 = *v18;
    uint64_t v66 = v67[1];
    if (v66) {
      float v68 = (char *)(v66 + v27 * v19 + *(void *)&v17);
    }
    else {
      float v68 = 0;
    }
    unsigned __int8 v69 = (int8x8_t *)(v65 + v26 * v19 + *(void *)&v17);
    if (v15 >= 0) {
      uint64_t v70 = v15;
    }
    else {
      uint64_t v70 = v15 + 1;
    }
    uint64_t v71 = v21[1] + v25 * (v70 >> 1) + 2 * v14;
    float v72 = (uint16x8_t *)(*v21 + v24 * v15 + 2 * v14);
    unsigned __int8 v73 = v64;
    __asm { FCVT            H11, S28 }
    short float v390 = _H11;
    __asm { FCVT            H11, S29 }
    short float v389 = _H11;
    __asm { FCVT            H11, S30 }
    short float v388 = _H11;
    __asm { FCVT            H12, S8 }
    short float v384 = _H12;
    __asm { FCVT            H12, S22 }
    short float v383 = _H12;
    __asm { FCVT            H12, S9 }
    short float v382 = _H12;
    __asm { FCVT            H12, S21 }
    short float v381 = _H12;
    __asm { FCVT            H12, S10 }
    short float v380 = _H12;
    __asm { FCVT            H12, S15 }
    short float v379 = _H12;
    float v378 = v20[9].f32[0];
    __asm { FCVT            H6, S6 }
    float v370 = v20[9].f32[1];
    __asm { FCVT            H1, S1 }
    short float v358 = _H1;
    float v369 = v20[10].f32[0];
    __asm { FCVT            H1, S2 }
    short float v357 = _H1;
    float v368 = v20[10].f32[1];
    __asm { FCVT            H1, S7 }
    short float v356 = _H1;
    float v367 = v20[11].f32[0];
    __asm { FCVT            H1, S16 }
    short float v355 = _H1;
    float v365 = v20[11].f32[1];
    __asm { FCVT            H1, S18 }
    short float v354 = _H1;
    float v363 = v20[12].f32[0];
    __asm { FCVT            H1, S19 }
    short float v353 = _H1;
    float v362 = v20[12].f32[1];
    __asm { FCVT            H1, S25 }
    short float v352 = _H1;
    float v360 = v20[13].f32[0];
    __asm { FCVT            H1, S11 }
    short float v350 = _H1;
    uint16x8_t v351 = (uint16x8_t)vdupq_n_s16(-v64);
    float v375 = a6.f32[0];
    uint64_t v92 = v7.i64[0];
    float v349 = a6.f32[1];
    uint64_t v341 = v26;
    uint64_t v342 = *v22;
    unint64_t v339 = v16;
    uint64_t v340 = v27;
    uint64_t v338 = v22[1];
    float v347 = v47 * v20->f32[0];
    float v348 = v20[7].f32[1];
    float v345 = v50;
    float v346 = v20[8].f32[1];
    float v343 = v45;
    float v344 = v20[8].f32[0];
    float v366 = (float)v31;
    float v364 = v20[7].f32[0];
    float v361 = v20[6].f32[1];
    float v359 = (float)v32;
    float v387 = (float)v34;
    do
    {
      float v93 = &v72->i8[v24];
      float v94 = (char *)v69 + v26;
      float v95 = &v68[v27];
      if ((int)v13 < 8)
      {
        size_t v208 = 0;
        int16x8_t v100 = &v68[v27];
        int8x16_t v99 = (int8x8_t *)((char *)v69 + v26);
        float v98 = (uint16x8_t *)v71;
        float v97 = (uint16x8_t *)((char *)v72 + v24);
      }
      else
      {
        int v96 = 0;
        float v97 = (uint16x8_t *)((char *)v72 + v24);
        float v98 = (uint16x8_t *)v71;
        int8x16_t v99 = (int8x8_t *)((char *)v69 + v26);
        int16x8_t v100 = &v68[v27];
        do
        {
          uint16x8_t v101 = *v98++;
          float16x8_t v102 = vcvtq_f16_u16(vshlq_u16(v101, v351));
          int8x16_t v103 = (int8x16_t)vmlaq_f16(v372, v374, v102);
          int8x16_t v104 = (int8x16_t)vmlaq_f16(v371, v373, v102);
          v102.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
          *(int16x4_t *)v105.i8 = vuzp1_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v102.i8);
          *(int16x4_t *)v102.i8 = vuzp2_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v102.i8);
          *(double *)&v102.i64[1] = a3;
          float16x8_t v106 = (float16x8_t)vzip1q_s16((int16x8_t)v102, (int16x8_t)v102);
          *(double *)&v105.i64[1] = a3;
          float16x8_t v107 = (float16x8_t)vzip1q_s16(v105, v105);
          v102.i64[0] = vextq_s8(v104, v104, 8uLL).u64[0];
          *(float16x4_t *)v102.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v102.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v102.i8));
          *(double *)&v102.i64[1] = a3;
          float16x8_t v108 = (float16x8_t)vzip1q_s16((int16x8_t)v102, (int16x8_t)v102);
          uint16x8_t v109 = *v72++;
          uint16x8_t v110 = vshlq_u16(v109, v351);
          uint16x8_t v111 = *v97++;
          float16x8_t v112 = vsubq_f16(vcvtq_f16_u16(v110), v376);
          float16x8_t v113 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v111, v351)), v376);
          float16x8_t v114 = vmlaq_n_f16(v106, v112, v377);
          float16x8_t v115 = vmlaq_n_f16(v106, v113, v377);
          float16x8_t v116 = vmlaq_n_f16(v108, v112, v377);
          float16x8_t v117 = vmlaq_n_f16(v108, v113, v377);
          float16x8_t v118 = vmlaq_n_f16(v107, v112, v377);
          float16x8_t v119 = vmlaq_n_f16(v107, v113, v377);
          WORD4(v120) = 0;
          v121.i64[0] = 0x9000900090009000;
          v121.i64[1] = 0x9000900090009000;
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v121));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v114.i16[0] = *(_WORD *)&v46[2 * v124.u32[0]];
          v114.i16[1] = *(_WORD *)&v46[2 * v124.u32[1]];
          v114.i16[2] = *(_WORD *)&v46[2 * v124.u32[2]];
          v114.i16[3] = *(_WORD *)&v46[2 * v124.u32[3]];
          v114.i16[4] = *(_WORD *)&v46[2 * v123.u32[0]];
          v114.i16[5] = *(_WORD *)&v46[2 * v123.u32[1]];
          v114.i16[6] = *(_WORD *)&v46[2 * v123.u32[2]];
          v114.i16[7] = *(_WORD *)&v46[2 * v123.u32[3]];
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v121));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          v116.i16[0] = *(_WORD *)&v46[2 * v127.u32[0]];
          v116.i16[1] = *(_WORD *)&v46[2 * v127.u32[1]];
          v116.i16[2] = *(_WORD *)&v46[2 * v127.u32[2]];
          v116.i16[3] = *(_WORD *)&v46[2 * v127.u32[3]];
          v116.i16[4] = *(_WORD *)&v46[2 * v126.u32[0]];
          v116.i16[5] = *(_WORD *)&v46[2 * v126.u32[1]];
          v116.i16[6] = *(_WORD *)&v46[2 * v126.u32[2]];
          v116.i16[7] = *(_WORD *)&v46[2 * v126.u32[3]];
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v121));
          uint32x4_t v129 = vmovl_high_u16(v128);
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v128.i8);
          v131.i16[0] = *(_WORD *)&v46[2 * v130.u32[0]];
          v131.i16[1] = *(_WORD *)&v46[2 * v130.u32[1]];
          v131.i16[2] = *(_WORD *)&v46[2 * v130.u32[2]];
          v131.i16[3] = *(_WORD *)&v46[2 * v130.u32[3]];
          v131.i16[4] = *(_WORD *)&v46[2 * v129.u32[0]];
          v131.i16[5] = *(_WORD *)&v46[2 * v129.u32[1]];
          v131.i16[6] = *(_WORD *)&v46[2 * v129.u32[2]];
          v131.i16[7] = *(_WORD *)&v46[2 * v129.u32[3]];
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v121));
          uint32x4_t v133 = vmovl_high_u16(v132);
          uint32x4_t v134 = vmovl_u16(*(uint16x4_t *)v132.i8);
          v135.i16[0] = *(_WORD *)&v46[2 * v134.u32[0]];
          v135.i16[1] = *(_WORD *)&v46[2 * v134.u32[1]];
          v135.i16[2] = *(_WORD *)&v46[2 * v134.u32[2]];
          v135.i16[3] = *(_WORD *)&v46[2 * v134.u32[3]];
          v135.i16[4] = *(_WORD *)&v46[2 * v133.u32[0]];
          v135.i16[5] = *(_WORD *)&v46[2 * v133.u32[1]];
          v135.i16[6] = *(_WORD *)&v46[2 * v133.u32[2]];
          v135.i16[7] = *(_WORD *)&v46[2 * v133.u32[3]];
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), v121));
          float16x8_t v137 = (float16x8_t)vmovl_high_u16(v136);
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v136.i8);
          *(void *)&long long v139 = v137.u32[2];
          *((void *)&v139 + 1) = v137.u32[3];
          long long v140 = v139;
          *(void *)&long long v139 = v137.u32[0];
          v137.i16[0] = *(_WORD *)&v46[2 * v138.u32[0]];
          float v141 = (__int16 *)&v46[2 * v137.u32[1]];
          v137.i16[1] = *(_WORD *)&v46[2 * v138.u32[1]];
          v137.i16[2] = *(_WORD *)&v46[2 * v138.u32[2]];
          v137.i16[3] = *(_WORD *)&v46[2 * v138.u32[3]];
          v137.i16[4] = *(_WORD *)&v46[2 * v139];
          v137.i16[5] = *v141;
          v137.i16[6] = *(_WORD *)&v46[2 * v140];
          v137.i16[7] = *(_WORD *)&v46[2 * *((void *)&v140 + 1)];
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v121));
          uint32x4_t v143 = vmovl_high_u16(v142);
          uint32x4_t v144 = vmovl_u16(*(uint16x4_t *)v142.i8);
          __int16 v145 = *(_WORD *)&v46[2 * v144.u32[0]];
          __int16 v146 = *(_WORD *)&v46[2 * v144.u32[1]];
          __int16 v147 = *(_WORD *)&v46[2 * v144.u32[2]];
          __int16 v148 = *(_WORD *)&v46[2 * v144.u32[3]];
          __int16 v149 = *(_WORD *)&v46[2 * v143.u32[0]];
          __int16 v150 = *(_WORD *)&v46[2 * v143.u32[1]];
          __int16 v151 = *(_WORD *)&v46[2 * v143.u32[2]];
          *(void *)&long long v120 = *(unsigned __int16 *)&v46[2 * v143.u32[3]];
          float16x8_t v152 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, _H6), v116, v358), v131, v357);
          float16x8_t v153 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v356), v116, v355), v131, v354);
          float16x8_t v154 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v131, v350), v116, v352), v114, v353);
          float16x8_t v155 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v135, _H6), v137, v358), *(float16x8_t *)&v145, v357);
          float16x8_t v156 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v135, v356), v137, v355), *(float16x8_t *)&v145, v354);
          float16x8_t v157 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(*(float16x8_t *)&v145, v350), v137, v352), v135, v353);
          uint16x8_t v158 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v152, (float16x8_t)*(unint64_t *)((char *)&v120 + 2)), v121));
          uint32x4_t v159 = vmovl_high_u16(v158);
          uint32x4_t v160 = vmovl_u16(*(uint16x4_t *)v158.i8);
          v161.i16[0] = result->i16[v160.u32[0]];
          v161.i16[1] = result->i16[v160.u32[1]];
          v161.i16[2] = result->i16[v160.u32[2]];
          v161.i16[3] = result->i16[v160.u32[3]];
          v161.i16[4] = result->i16[v159.u32[0]];
          v161.i16[5] = result->i16[v159.u32[1]];
          v161.i16[6] = result->i16[v159.u32[2]];
          v161.i16[7] = result->i16[v159.u32[3]];
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v153, (float16x8_t)*(unint64_t *)((char *)&v120 + 2)), v121));
          uint32x4_t v163 = vmovl_high_u16(v162);
          uint32x4_t v164 = vmovl_u16(*(uint16x4_t *)v162.i8);
          v165.i16[0] = result->i16[v164.u32[0]];
          v165.i16[1] = result->i16[v164.u32[1]];
          v165.i16[2] = result->i16[v164.u32[2]];
          v165.i16[3] = result->i16[v164.u32[3]];
          v165.i16[4] = result->i16[v163.u32[0]];
          v165.i16[5] = result->i16[v163.u32[1]];
          v165.i16[6] = result->i16[v163.u32[2]];
          v165.i16[7] = result->i16[v163.u32[3]];
          uint16x8_t v166 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v154, (float16x8_t)*(unint64_t *)((char *)&v120 + 2)), v121));
          uint32x4_t v167 = vmovl_high_u16(v166);
          uint32x4_t v168 = vmovl_u16(*(uint16x4_t *)v166.i8);
          *(void *)&long long v139 = v168.u32[2];
          *((void *)&v139 + 1) = v168.u32[3];
          uint64_t v169 = v168.u32[1];
          v178.i16[0] = result->i16[v168.u32[0]];
          uint64_t v170 = v167.u32[1];
          uint64_t v171 = v167.u32[0];
          uint64_t v172 = v167.u32[3];
          uint64_t v173 = v167.u32[2];
          uint16x8_t v174 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v155, (float16x8_t)*(unint64_t *)((char *)&v120 + 2)), v121));
          uint32x4_t v175 = vmovl_u16(*(uint16x4_t *)v174.i8);
          uint64_t v176 = v175.u32[1];
          uint64_t v177 = v175.u32[0];
          v178.i16[1] = result->i16[v169];
          v178.i16[2] = result->i16[v139];
          v178.i16[3] = result->i16[*((void *)&v139 + 1)];
          v178.i16[4] = result->i16[v171];
          v178.i16[5] = result->i16[v170];
          v178.i16[6] = result->i16[v173];
          v178.i16[7] = result->i16[v172];
          uint32x4_t v179 = vmovl_high_u16(v174);
          uint64_t v180 = v175.u32[3];
          uint64_t v181 = v175.u32[2];
          uint64_t v182 = v179.u32[1];
          uint64_t v183 = v179.u32[0];
          uint64_t v184 = v179.u32[3];
          uint64_t v185 = v179.u32[2];
          uint16x8_t v186 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v156, (float16x8_t)*(unint64_t *)((char *)&v120 + 2)), v121));
          uint32x4_t v187 = vmovl_u16(*(uint16x4_t *)v186.i8);
          uint64_t v188 = v187.u32[1];
          uint64_t v189 = v187.u32[0];
          v190.i16[0] = result->i16[v177];
          v190.i16[1] = result->i16[v176];
          v190.i16[2] = result->i16[v181];
          v190.i16[3] = result->i16[v180];
          v190.i16[4] = result->i16[v183];
          v190.i16[5] = result->i16[v182];
          v190.i16[6] = result->i16[v185];
          v190.i16[7] = result->i16[v184];
          uint32x4_t v191 = vmovl_high_u16(v186);
          uint64_t v192 = v187.u32[3];
          uint64_t v193 = v187.u32[2];
          uint64_t v194 = v191.u32[1];
          uint64_t v195 = v191.u32[0];
          uint64_t v196 = v191.u32[3];
          uint64_t v197 = v191.u32[2];
          uint16x8_t v198 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v157, (float16x8_t)*(unint64_t *)((char *)&v120 + 2)), v121));
          uint32x4_t v199 = vmovl_u16(*(uint16x4_t *)v198.i8);
          v200.i16[0] = result->i16[v189];
          v200.i16[1] = result->i16[v188];
          v200.i16[2] = result->i16[v193];
          v200.i16[3] = result->i16[v192];
          v200.i16[4] = result->i16[v195];
          v200.i16[5] = result->i16[v194];
          v200.i16[6] = result->i16[v197];
          v200.i16[7] = result->i16[v196];
          uint32x4_t v201 = vmovl_high_u16(v198);
          uint64_t v202 = v201.u32[0];
          v206.i16[0] = result->i16[v199.u32[0]];
          size_t v203 = (__int16 *)result + v201.u32[1];
          float v204 = (__int16 *)result + v201.u32[2];
          float v205 = (__int16 *)result + v201.u32[3];
          v206.i16[1] = result->i16[v199.u32[1]];
          v206.i16[2] = result->i16[v199.u32[2]];
          v206.i16[3] = result->i16[v199.u32[3]];
          v206.i16[4] = result->i16[v202];
          v206.i16[5] = *v203;
          v206.i16[6] = *v204;
          v206.i16[7] = *v205;
          *v69++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v392, v161, v390), v165, v389), v178, v388), v392), v391)));
          if (v68)
          {
            v395.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v386, v161, v384), v165, v383), v178, v382), v62), v385), v62), v385)));
            v395.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v386, v161, v381), v165, v380), v178, v379)));
            vst2_s8(v68, v395);
            v68 += 16;
          }
          *v99++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v392, v190, v390), v200, v389), v206, v388), v392), v391)));
          if (v100)
          {
            float16x8_t v207 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v386, v190, v381), v200, v380), v206, v379);
            v394.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v386, v190, v384), v200, v383), v206, v382), v62), v385), v62), v385)));
            v394.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(v207));
            vst2_s8(v100, v394);
            v100 += 16;
          }
          v96 += 8;
        }
        while (v96 < (int)v13 - 7);
        size_t v208 = v13 & 0xFFFFFFF8;
        uint64_t v25 = v338;
        unint64_t v16 = v339;
      }
      while (v13 > v208)
      {
        float v209 = (float)(v98->u16[1] >> v73) - v393;
        float v210 = v349 * v209;
        float v211 = _S24 * (float)((float)(v72->u16[0] >> v73) - v45);
        float v212 = (float)(v349 * v209) + v211;
        float v213 = 8191.0;
        if (v212 <= 8191.0)
        {
          float v213 = (float)(v349 * v209) + v211;
          if (v212 < 0.0) {
            float v213 = 0.0;
          }
        }
        float v214 = (float)(v98->u16[0] >> v73) - v393;
        float v215 = (float)(*((float *)&v92 + 1) * v209) + (float)(v214 * *(float *)&v92);
        float v216 = 8191.0;
        if ((float)(v211 + v215) <= 8191.0)
        {
          float v216 = v211 + v215;
          if ((float)(v211 + v215) < 0.0) {
            float v216 = 0.0;
          }
        }
        float v217 = v375 * v214;
        float v218 = (float)(v375 * v214) + v211;
        float v219 = 8191.0;
        if (v218 <= 8191.0)
        {
          float v219 = v218;
          if (v218 < 0.0) {
            float v219 = 0.0;
          }
        }
        float v220 = _S24 * (float)((float)(v72->u16[1] >> v73) - v45);
        float v221 = 8191.0;
        if ((float)(v210 + v220) <= 8191.0)
        {
          float v221 = v210 + v220;
          if ((float)(v210 + v220) < 0.0) {
            float v221 = 0.0;
          }
        }
        float v222 = 8191.0;
        if ((float)(v215 + v220) <= 8191.0)
        {
          float v222 = v215 + v220;
          if ((float)(v215 + v220) < 0.0) {
            float v222 = 0.0;
          }
        }
        float v223 = v217 + v220;
        BOOL v224 = (float)(v217 + v220) <= 8191.0;
        float v225 = 8191.0;
        if (v224)
        {
          float v225 = v223;
          if (v223 < 0.0) {
            float v225 = 0.0;
          }
        }
        float v226 = _S24 * (float)((float)(v97->u16[0] >> v73) - v45);
        float v227 = 8191.0;
        if ((float)(v210 + v226) <= 8191.0)
        {
          float v227 = v210 + v226;
          if ((float)(v210 + v226) < 0.0) {
            float v227 = 0.0;
          }
        }
        float v228 = 8191.0;
        if ((float)(v215 + v226) <= 8191.0)
        {
          float v228 = v215 + v226;
          if ((float)(v215 + v226) < 0.0) {
            float v228 = 0.0;
          }
        }
        float v229 = v217 + v226;
        BOOL v224 = (float)(v217 + v226) <= 8191.0;
        float v230 = 8191.0;
        if (v224)
        {
          float v230 = v229;
          if (v229 < 0.0) {
            float v230 = 0.0;
          }
        }
        float v231 = _S24 * (float)((float)(v97->u16[1] >> v73) - v45);
        float v232 = v210 + v231;
        float v233 = 8191.0;
        if (v232 <= 8191.0)
        {
          float v233 = v232;
          if (v232 < 0.0) {
            float v233 = 0.0;
          }
        }
        float v234 = v215 + v231;
        BOOL v224 = (float)(v215 + v231) <= 8191.0;
        float v235 = 8191.0;
        if (v224)
        {
          float v235 = v234;
          if (v234 < 0.0) {
            float v235 = 0.0;
          }
        }
        float v236 = _S30;
        float v237 = _S29;
        float v238 = _S28;
        float v239 = v217 + v231;
        float v240 = 8191.0;
        if (v239 <= 8191.0)
        {
          float v240 = v239;
          if (v239 < 0.0) {
            float v240 = 0.0;
          }
        }
        _H7 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H16 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v216, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        _H17 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v219, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        _H19 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v221, 0.0), 8191.0))];
        _H25 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v222, 0.0), 8191.0))];
        __asm
        {
          FCVT            S19, H19
          FCVT            S25, H25
        }
        _H1 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v227, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H18 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v230, 0.0), 8191.0))];
        __asm { FCVT            S18, H18 }
        _H21 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v233, 0.0), 8191.0))];
        _H11 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v235, 0.0), 8191.0))];
        __asm
        {
          FCVT            S21, H21
          FCVT            S11, H11
        }
        _H12 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v240, 0.0), 8191.0))];
        __asm { FCVT            S12, H12 }
        float v265 = (float)((float)(v370 * _S16) + (float)(_S7 * v378)) + (float)(_S17 * v369);
        float v266 = (float)((float)(v367 * _S16) + (float)(_S7 * v368)) + (float)(_S17 * v365);
        float v267 = (float)((float)(v362 * _S16) + (float)(_S7 * v363)) + (float)(_S17 * v360);
        float v268 = (float)((float)(v370 * _S25) + (float)(_S19 * v378)) + (float)(_S1 * v369);
        float v269 = (float)((float)(v367 * _S25) + (float)(_S19 * v368)) + (float)(_S1 * v365);
        float v270 = (float)((float)(v362 * _S25) + (float)(_S19 * v363)) + (float)(_S1 * v360);
        float v271 = (float)((float)(v370 * _S3) + (float)(_S2 * v378)) + (float)(_S18 * v369);
        float v272 = (float)((float)(v367 * _S3) + (float)(_S2 * v368)) + (float)(_S18 * v365);
        float v273 = (float)((float)(v362 * _S3) + (float)(_S2 * v363)) + (float)(_S18 * v360);
        float v274 = (float)((float)(v370 * _S11) + (float)(_S21 * v378)) + (float)(_S12 * v369);
        float v275 = (float)((float)(v367 * _S11) + (float)(_S21 * v368)) + (float)(_S12 * v365);
        float v276 = (float)((float)(v362 * _S11) + (float)(_S21 * v363)) + (float)(_S12 * v360);
        LOWORD(_S1) = result->i16[llroundf(fminf(fmaxf(v265, 0.0), 8191.0))];
        __asm { FCVT            S18, H1 }
        LOWORD(_S1) = result->i16[llroundf(fminf(fmaxf(v266, 0.0), 8191.0))];
        __asm { FCVT            S25, H1 }
        LOWORD(_S1) = result->i16[llroundf(fminf(fmaxf(v267, 0.0), 8191.0))];
        __asm { FCVT            S12, H1 }
        _H1 = result->i16[llroundf(fminf(fmaxf(v268, 0.0), 8191.0))];
        _H2 = result->i16[llroundf(fminf(fmaxf(v269, 0.0), 8191.0))];
        _H3 = result->i16[llroundf(fminf(fmaxf(v270, 0.0), 8191.0))];
        _H11 = result->i16[llroundf(fminf(fmaxf(v271, 0.0), 8191.0))];
        _H13 = result->i16[llroundf(fminf(fmaxf(v272, 0.0), 8191.0))];
        _H14 = result->i16[llroundf(fminf(fmaxf(v273, 0.0), 8191.0))];
        _H7 = result->i16[llroundf(fminf(fmaxf(v274, 0.0), 8191.0))];
        _H16 = result->i16[llroundf(fminf(fmaxf(v275, 0.0), 8191.0))];
        _H17 = result->i16[llroundf(fminf(fmaxf(v276, 0.0), 8191.0))];
        _S29 = v237;
        _S28 = v238;
        _S30 = v236;
        float v289 = (float)((float)((float)(v237 * _S25) + (float)(v238 * _S18)) + (float)(v236 * _S12)) + v49;
        float v290 = v359;
        if (v289 <= v359)
        {
          float v290 = (float)((float)((float)(v237 * _S25) + (float)(v238 * _S18)) + (float)(v236 * _S12)) + v49;
          if (v289 < v49) {
            float v290 = v49;
          }
        }
        v69->i8[0] = llroundf(v290);
        if (v68)
        {
          float v291 = (float)((float)(v366 + (float)(_S18 * _S8)) + (float)(_S25 * v361)) + (float)(_S12 * v364);
          float v292 = v387;
          float v293 = v345;
          if (v291 <= v387)
          {
            float v292 = (float)((float)(v366 + (float)(_S18 * _S8)) + (float)(_S25 * v361)) + (float)(_S12 * v364);
            if (v291 < v345) {
              float v292 = v345;
            }
          }
          float v294 = v348;
          float v45 = v343;
          float v295 = v344;
          float v296 = v346;
          float v297 = (float)((float)(v366 + (float)(_S18 * v348)) + (float)(_S25 * v344)) + (float)(_S12 * v346);
          char *v68 = llroundf(v292);
          float v298 = v387;
          float v299 = v387;
          if (v297 <= v387)
          {
            float v299 = v297;
            if (v297 < v345) {
              float v299 = v345;
            }
          }
          v68[1] = llroundf(v299);
          v68 += 2;
          _S24 = v347;
        }
        else
        {
          _S24 = v347;
          float v294 = v348;
          float v45 = v343;
          float v295 = v344;
          float v293 = v345;
          float v296 = v346;
          float v298 = v387;
        }
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H2
          FCVT            S3, H3
        }
        float v303 = (float)((float)((float)(_S29 * _S2) + (float)(v238 * _S1)) + (float)(v236 * _S3)) + v49;
        float v304 = v359;
        if (v303 <= v359)
        {
          float v304 = (float)((float)((float)(_S29 * _S2) + (float)(v238 * _S1)) + (float)(v236 * _S3)) + v49;
          if (v303 < v49) {
            float v304 = v49;
          }
        }
        v69->i8[1] = llroundf(v304);
        if (v68)
        {
          float v305 = (float)((float)(v366 + (float)(_S1 * _S8)) + (float)(_S2 * v361)) + (float)(_S3 * v364);
          float v306 = v298;
          if (v305 <= v298)
          {
            float v306 = (float)((float)(v366 + (float)(_S1 * _S8)) + (float)(_S2 * v361)) + (float)(_S3 * v364);
            if (v305 < v293) {
              float v306 = v293;
            }
          }
          float v307 = (float)((float)(v366 + (float)(_S1 * v294)) + (float)(_S2 * v295)) + (float)(_S3 * v296);
          char *v68 = llroundf(v306);
          float v308 = v298;
          if (v307 <= v298)
          {
            float v308 = v307;
            if (v307 < v293) {
              float v308 = v293;
            }
          }
          v68[1] = llroundf(v308);
          v68 += 2;
        }
        __asm
        {
          FCVT            S1, H11
          FCVT            S2, H13
          FCVT            S3, H14
        }
        float v312 = (float)((float)((float)(_S29 * _S2) + (float)(v238 * _S1)) + (float)(v236 * _S3)) + v49;
        float v313 = v359;
        if (v312 <= v359)
        {
          float v313 = (float)((float)((float)(_S29 * _S2) + (float)(v238 * _S1)) + (float)(v236 * _S3)) + v49;
          if (v312 < v49) {
            float v313 = v49;
          }
        }
        v99->i8[0] = llroundf(v313);
        if (v100)
        {
          float v314 = (float)((float)(v366 + (float)(_S1 * _S8)) + (float)(_S2 * v361)) + (float)(_S3 * v364);
          float v315 = v298;
          if (v314 <= v298)
          {
            float v315 = (float)((float)(v366 + (float)(_S1 * _S8)) + (float)(_S2 * v361)) + (float)(_S3 * v364);
            if (v314 < v293) {
              float v315 = v293;
            }
          }
          float v316 = (float)((float)(v366 + (float)(_S1 * v294)) + (float)(_S2 * v295)) + (float)(_S3 * v296);
          char *v100 = llroundf(v315);
          float v317 = v298;
          if (v316 <= v298)
          {
            float v317 = v316;
            if (v316 < v293) {
              float v317 = v293;
            }
          }
          v100[1] = llroundf(v317);
          v100 += 2;
        }
        __asm
        {
          FCVT            S1, H7
          FCVT            S2, H16
          FCVT            S3, H17
        }
        float v321 = (float)((float)((float)(_S29 * _S2) + (float)(v238 * _S1)) + (float)(v236 * _S3)) + v49;
        float v322 = v359;
        if (v321 <= v359)
        {
          float v322 = (float)((float)((float)(_S29 * _S2) + (float)(v238 * _S1)) + (float)(v236 * _S3)) + v49;
          if (v321 < v49) {
            float v322 = v49;
          }
        }
        v99->i8[1] = llroundf(v322);
        if (v100)
        {
          float v323 = (float)((float)(v366 + (float)(_S1 * _S8)) + (float)(_S2 * v361)) + (float)(_S3 * v364);
          float v324 = v298;
          if (v323 <= v298)
          {
            float v324 = (float)((float)(v366 + (float)(_S1 * _S8)) + (float)(_S2 * v361)) + (float)(_S3 * v364);
            if (v323 < v293) {
              float v324 = v293;
            }
          }
          float v325 = (float)((float)(v366 + (float)(_S1 * v294)) + (float)(_S2 * v295)) + (float)(_S3 * v296);
          char *v100 = llroundf(v324);
          float v326 = v298;
          if (v325 <= v298)
          {
            float v326 = v325;
            if (v325 < v293) {
              float v326 = v293;
            }
          }
          v100[1] = llroundf(v326);
          v100 += 2;
        }
        v208 += 2;
        float v98 = (uint16x8_t *)((char *)v98 + 4);
        float v72 = (uint16x8_t *)((char *)v72 + 4);
        float v97 = (uint16x8_t *)((char *)v97 + 4);
        unsigned __int8 v69 = (int8x8_t *)((char *)v69 + 2);
        int8x16_t v99 = (int8x8_t *)((char *)v99 + 2);
      }
      uint64_t v26 = v341;
      uint64_t v24 = v342;
      float v72 = (uint16x8_t *)&v93[v342];
      v71 += v25;
      unsigned __int8 v69 = (int8x8_t *)&v94[v341];
      uint64_t v27 = v340;
      float v68 = &v95[v340];
      v12 += 2;
    }
    while (v16 > v12);
    if (v337 && v336)
    {
      uint64_t v327 = 0;
      float v328 = (unsigned __int16 *)v333;
      do
      {
        if (v13)
        {
          size_t v329 = v13;
          float v330 = v28;
          float v331 = v328;
          do
          {
            unsigned int v332 = *v331++;
            *v330++ = llroundf((float)v332 * 0.0038911);
            --v329;
          }
          while (v329);
        }
        float v328 = (unsigned __int16 *)((char *)v328 + v334);
        v28 += v335;
        ++v327;
      }
      while (v327 != v16);
    }
    else if (v336)
    {
      do
      {
        if (v13) {
          result = (float32x2_t *)memset(v28, 255, v13);
        }
        v28 += v335;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Mat_TRC_444vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = 2 * *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    uint64_t v12 = *(void *)((char *)result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = result[14];
    unint64_t v15 = result[13] * a2 / v6;
    uint64_t v16 = (void *)result[16];
    uint64_t v17 = result[15] + 2 * v15;
    uint64_t v18 = result[19];
    uint64_t v19 = (void *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = v25 + v24 * v12 + 2 * v11;
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (unsigned char *)(v30 + v29 * v17 + v14);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    float v33 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v34 = (float)LODWORD(a5);
    float v35 = v32 * *(float *)v18;
    float v212 = v32 * *(float *)(v18 + 16);
    float v213 = v32 * *(float *)(v18 + 8);
    float v36 = v32 * *(float *)(v18 + 20);
    *(float *)&unsigned int v37 = v32 * *(float *)(v18 + 28);
    float v210 = *(float *)&v37;
    float v211 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v18 + 36);
    float v45 = *(float *)(v18 + 44);
    float v44 = *(float *)(v18 + 48);
    float v215 = *(float *)(v18 + 56);
    float v208 = *(float *)(v18 + 76);
    float v209 = *(float *)(v18 + 72);
    float v206 = *(float *)(v18 + 84);
    float v207 = *(float *)(v18 + 80);
    float v205 = *(float *)(v18 + 88);
    float v203 = *(float *)(v18 + 92);
    float v201 = *(float *)(v18 + 100);
    float v202 = *(float *)(v18 + 96);
    float v200 = *(float *)(v18 + 104);
    uint64_t v46 = v18 + 164;
    uint64_t v47 = v16[1];
    float v48 = (unsigned char *)(*v16 + v27 * v17 + v14);
    float v49 = (unsigned char *)(v47 + v28 * v17 + v14);
    result = (void *)(v18 + 16548);
    if (v47) {
      float v50 = v49;
    }
    else {
      float v50 = 0;
    }
    unsigned int v51 = *(unsigned __int8 *)(v18 + 124);
    uint64_t v52 = v19[1];
    uint64_t v53 = (char *)(*v19 + v22 * v12 + 2 * v11);
    if (v51 >= 0x11) {
      char v54 = 0;
    }
    else {
      char v54 = 16 - v51;
    }
    uint64_t v55 = v52 + v23 * (v12 / 2) + 2 * v11;
    char v56 = v54;
    float v197 = *(float *)(v18 + 60);
    float v198 = (float)LODWORD(a5);
    float v195 = *(float *)(v18 + 68);
    float v196 = *(float *)(v18 + 64);
    float v193 = v35;
    float v194 = v39;
    float v214 = *(float *)(v18 + 40);
    float v204 = *(float *)(v18 + 52);
    float v192 = v33;
    float v199 = v41;
    do
    {
      short float v57 = &v53[v22];
      float16x8_t v58 = &v50[v28];
      int16x8_t v59 = &v48[v27];
      if (v10)
      {
        size_t v60 = 0;
        int16x8_t v61 = &v53[v22];
        float16x8_t v62 = &v50[v28];
        unsigned int v63 = &v48[v27];
        do
        {
          unsigned __int8 v64 = (unsigned __int16 *)(v55 + 2 * v60);
          float v65 = (float)(v64[1] >> v56) - v34;
          float v66 = v213 * v65;
          float v67 = v35 * (float)((float)(*(unsigned __int16 *)v53 >> v56) - v33);
          float v68 = (float)(v213 * v65) + v67;
          float v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            float v69 = (float)(v213 * v65) + v67;
            if (v68 < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = (float)(*v64 >> v56) - v34;
          float v71 = (float)(v211 * v65) + (float)(v70 * v212);
          float v72 = 8191.0;
          if ((float)(v67 + v71) <= 8191.0)
          {
            float v72 = v67 + v71;
            if ((float)(v67 + v71) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v210 * v70;
          float v74 = (float)(v210 * v70) + v67;
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v35 * (float)((float)(*((unsigned __int16 *)v53 + 1) >> v56) - v33);
          float v77 = 8191.0;
          if ((float)(v66 + v76) <= 8191.0)
          {
            float v77 = v66 + v76;
            if ((float)(v66 + v76) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = 8191.0;
          if ((float)(v71 + v76) <= 8191.0)
          {
            float v78 = v71 + v76;
            if ((float)(v71 + v76) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = 8191.0;
          if ((float)(v73 + v76) <= 8191.0)
          {
            float v79 = v73 + v76;
            if ((float)(v73 + v76) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v35 * (float)((float)(*(unsigned __int16 *)v61 >> v56) - v33);
          float v81 = 8191.0;
          if ((float)(v66 + v80) <= 8191.0)
          {
            float v81 = v66 + v80;
            if ((float)(v66 + v80) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = 8191.0;
          if ((float)(v71 + v80) <= 8191.0)
          {
            float v82 = v71 + v80;
            if ((float)(v71 + v80) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v73 + v80;
          BOOL v84 = (float)(v73 + v80) <= 8191.0;
          float v85 = 8191.0;
          if (v84)
          {
            float v85 = v83;
            if (v83 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v35 * (float)((float)(*((unsigned __int16 *)v61 + 1) >> v56) - v33);
          float v87 = v66 + v86;
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v45;
          float v90 = v71 + v86;
          BOOL v84 = (float)(v71 + v86) <= 8191.0;
          float v91 = 8191.0;
          if (v84)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v43;
          float v93 = v73 + v86;
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S6, H6
          }
          _H7 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H26 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H19 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H3 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v123 = (float)((float)(v208 * _S4) + (float)(_S1 * v209)) + (float)(_S5 * v207);
          float v124 = (float)((float)(v205 * _S4) + (float)(_S1 * v206)) + (float)(_S5 * v203);
          _S1 = (float)((float)(v201 * _S4) + (float)(_S1 * v202)) + (float)(_S5 * v200);
          float v126 = (float)((float)(v208 * _S6) + (float)(_S2 * v209)) + (float)(_S7 * v207);
          float v127 = (float)((float)(v205 * _S6) + (float)(_S2 * v206)) + (float)(_S7 * v203);
          float v128 = (float)((float)(v201 * _S6) + (float)(_S2 * v202)) + (float)(_S7 * v200);
          float v129 = (float)((float)(v208 * _S27) + (float)(_S26 * v209)) + (float)(_S19 * v207);
          float v130 = (float)((float)(v205 * _S27) + (float)(_S26 * v206)) + (float)(_S19 * v203);
          float v131 = (float)((float)(v201 * _S27) + (float)(_S26 * v202)) + (float)(_S19 * v200);
          float v132 = (float)((float)(v208 * _S24) + (float)(_S3 * v209)) + (float)(_S25 * v207);
          float v133 = (float)((float)(v205 * _S24) + (float)(_S3 * v206)) + (float)(_S25 * v203);
          float v134 = (float)((float)(v201 * _S24) + (float)(_S3 * v202)) + (float)(_S25 * v200);
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S27, H7 }
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S28, H7 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          _H19 = *((_WORD *)result + llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          float v43 = v92;
          float v147 = (float)(v214 * _S28) + (float)(v92 * _S27);
          float v45 = v89;
          float v148 = (float)(v147 + (float)(v89 * _S29)) + v38;
          float v149 = v40;
          if (v148 <= v40)
          {
            float v149 = v148;
            if (v148 < v38) {
              float v149 = v38;
            }
          }
          *float v48 = llroundf(v149);
          if (v50)
          {
            float v150 = v194;
            float v151 = (float)((float)(v194 + (float)(_S27 * v44)) + (float)(_S28 * v204)) + (float)(_S29 * v215);
            float v152 = v42;
            if (v151 <= v42)
            {
              float v152 = (float)((float)(v194 + (float)(_S27 * v44)) + (float)(_S28 * v204)) + (float)(_S29 * v215);
              if (v151 < v199) {
                float v152 = v199;
              }
            }
            float v154 = v196;
            float v153 = v197;
            float v155 = (float)(v194 + (float)(_S27 * v197)) + (float)(_S28 * v196);
            float v156 = v195;
            float v157 = v155 + (float)(_S29 * v195);
            unsigned char *v50 = llroundf(v152);
            float v158 = v42;
            float v33 = v192;
            float v35 = v193;
            if (v157 <= v42)
            {
              float v158 = v155 + (float)(_S29 * v195);
              if (v157 < v199) {
                float v158 = v199;
              }
            }
            v50[1] = llroundf(v158);
            v50 += 2;
            float v159 = v214;
          }
          else
          {
            float v33 = v192;
            float v35 = v193;
            float v159 = v214;
            float v154 = v196;
            float v153 = v197;
            float v150 = v194;
            float v156 = v195;
          }
          __asm
          {
            FCVT            S25, H25
            FCVT            S19, H19
            FCVT            S26, H26
          }
          float v163 = (float)((float)((float)(v159 * _S19) + (float)(v43 * _S25)) + (float)(v89 * _S26)) + v38;
          float v164 = v40;
          if (v163 <= v40)
          {
            float v164 = (float)((float)((float)(v159 * _S19) + (float)(v43 * _S25)) + (float)(v89 * _S26)) + v38;
            if (v163 < v38) {
              float v164 = v38;
            }
          }
          v48[1] = llroundf(v164);
          if (v50)
          {
            float v165 = (float)((float)(v150 + (float)(_S25 * v44)) + (float)(_S19 * v204)) + (float)(_S26 * v215);
            float v166 = v42;
            if (v165 <= v42)
            {
              float v166 = (float)((float)(v150 + (float)(_S25 * v44)) + (float)(_S19 * v204)) + (float)(_S26 * v215);
              if (v165 < v199) {
                float v166 = v199;
              }
            }
            float v167 = (float)((float)(v150 + (float)(_S25 * v153)) + (float)(_S19 * v154)) + (float)(_S26 * v156);
            unsigned char *v50 = llroundf(v166);
            float v168 = v42;
            if (v167 <= v42)
            {
              float v168 = v167;
              if (v167 < v199) {
                float v168 = v199;
              }
            }
            v50[1] = llroundf(v168);
            v50 += 2;
          }
          __asm
          {
            FCVT            S7, H7
            FCVT            S2, H2
            FCVT            S19, H24
          }
          float v172 = (float)((float)((float)(v159 * _S2) + (float)(v43 * _S7)) + (float)(v89 * _S19)) + v38;
          float v173 = v40;
          if (v172 <= v40)
          {
            float v173 = (float)((float)((float)(v159 * _S2) + (float)(v43 * _S7)) + (float)(v89 * _S19)) + v38;
            if (v172 < v38) {
              float v173 = v38;
            }
          }
          *unsigned int v63 = llroundf(v173);
          if (v62)
          {
            float v174 = (float)((float)(v150 + (float)(_S7 * v44)) + (float)(_S2 * v204)) + (float)(_S19 * v215);
            float v175 = v42;
            if (v174 <= v42)
            {
              float v175 = (float)((float)(v150 + (float)(_S7 * v44)) + (float)(_S2 * v204)) + (float)(_S19 * v215);
              if (v174 < v199) {
                float v175 = v199;
              }
            }
            float v176 = (float)((float)(v150 + (float)(_S7 * v153)) + (float)(_S2 * v154)) + (float)(_S19 * v156);
            *float16x8_t v62 = llroundf(v175);
            float v177 = v42;
            if (v176 <= v42)
            {
              float v177 = v176;
              if (v176 < v199) {
                float v177 = v199;
              }
            }
            v62[1] = llroundf(v177);
            v62 += 2;
          }
          float v34 = v198;
          __asm
          {
            FCVT            S2, H4
            FCVT            S4, H5
            FCVT            S5, H6
          }
          float v181 = (float)((float)((float)(v159 * _S4) + (float)(v43 * _S2)) + (float)(v89 * _S5)) + v38;
          float v182 = v40;
          if (v181 <= v40)
          {
            float v182 = (float)((float)((float)(v159 * _S4) + (float)(v43 * _S2)) + (float)(v89 * _S5)) + v38;
            if (v181 < v38) {
              float v182 = v38;
            }
          }
          v63[1] = llroundf(v182);
          if (v62)
          {
            float v183 = (float)((float)(v150 + (float)(_S2 * v44)) + (float)(_S4 * v204)) + (float)(_S5 * v215);
            float v184 = v42;
            if (v183 <= v42)
            {
              float v184 = (float)((float)(v150 + (float)(_S2 * v44)) + (float)(_S4 * v204)) + (float)(_S5 * v215);
              if (v183 < v199) {
                float v184 = v199;
              }
            }
            float v185 = (float)((float)(v150 + (float)(_S2 * v153)) + (float)(_S4 * v154)) + (float)(_S5 * v156);
            *float16x8_t v62 = llroundf(v184);
            float v186 = v42;
            if (v185 <= v42)
            {
              float v186 = v185;
              if (v185 < v199) {
                float v186 = v199;
              }
            }
            v62[1] = llroundf(v186);
            v62 += 2;
          }
          v53 += 4;
          v61 += 4;
          v48 += 2;
          v63 += 2;
          v60 += 2;
        }
        while (v10 > v60);
      }
      uint64_t v53 = &v57[v22];
      v55 += v23;
      float v48 = &v59[v27];
      float v50 = &v58[v28];
      v9 += 2;
    }
    while (v13 > v9);
    if (v25 && v30)
    {
      uint64_t v187 = 0;
      do
      {
        if (v10)
        {
          size_t v188 = v10;
          uint64_t v189 = v31;
          float16x8_t v190 = (unsigned __int16 *)v26;
          do
          {
            unsigned int v191 = *v190++;
            *v189++ = llroundf((float)v191 * 0.0038911);
            --v188;
          }
          while (v188);
        }
        v26 += v24;
        v31 += v29;
        ++v187;
      }
      while (v187 != v13);
    }
    else if (v30)
    {
      do
      {
        if (v10) {
          result = memset(v31, 255, v10);
        }
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_444vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf420_rgb_444vf_neon_fp16_GCD(void *result, uint64_t a2, double a3)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = 2 * *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    uint64_t v12 = *(void *)((char *)result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (void *)result[16];
    uint64_t v16 = result[15] + 2 * (result[13] * a2 / v6);
    uint64_t v17 = (float32x2_t *)result[19];
    uint64_t v18 = (void *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v168 = v19[2];
    uint64_t v170 = v18[2];
    uint64_t v23 = *v20;
    uint64_t v24 = v20[1];
    uint64_t v25 = v20[2];
    uint64_t v169 = v15[2];
    uint64_t v26 = (unsigned char *)(v169 + v25 * v16 + v14);
    LODWORD(v20) = v17[17].u16[2];
    unsigned int v27 = v17[17].u16[3];
    v3.i32[0] = v17[3].i32[1];
    unsigned int v28 = v17[18].u16[0];
    unsigned int v29 = v17[18].u16[1];
    unsigned int v30 = v17[18].u16[2];
    *(float *)&a3 = (float)v20;
    float v178 = (float)v27;
    *(short float *)v4.i16 = (short float)v20;
    unsigned int v31 = v17[18].u16[3];
    short float v32 = (short float)v27;
    unsigned int v33 = v17[19].u16[0];
    _S2 = v17[4].f32[1];
    _S3 = v17[5].f32[0];
    _S4 = v17[5].f32[1];
    _S5 = v17[6].f32[0];
    _S6 = v17[6].f32[1];
    _S7 = v17[7].f32[0];
    _S16 = v17[7].f32[1];
    _S17 = v17[8].f32[0];
    _S18 = v17[8].f32[1];
    uint64_t v43 = v170 + v168 * v12 + 2 * v11;
    float v44 = (float)v17[17].u32[0] / (float)v17[16].u32[0];
    float v45 = (float)v28;
    float v46 = (float)v29;
    float v47 = (float)v30;
    float v48 = (float)v31;
    _S23 = v44 * v17->f32[0];
    float v50 = (float)v33;
    __asm { FCVT            H8, S23 }
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(v4, 0);
    v3.i32[1] = v17[1].i32[0];
    *(float32x2_t *)v3.f32 = vmul_n_f32(*(float32x2_t *)v3.f32, v44);
    *(double *)&v57.i64[1] = a3;
    *(float32x2_t *)v57.f32 = vmul_n_f32(v17[2], v44);
    float16x8_t v177 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v174 = vmulq_n_f16(v177, -v32);
    float16x8_t v175 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v57), 0);
    _Q1 = vmulq_n_f16(v175, -v32);
    float16x8_t v173 = _Q1;
    __asm { FCVT            H1, S2 }
    short float v188 = *(short float *)_Q1.i16;
    __asm { FCVT            H1, S3 }
    short float v187 = *(short float *)_Q1.i16;
    *(short float *)_Q1.i16 = (short float)v28;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q1.i8, 0);
    *(short float *)_Q1.i16 = (short float)v29;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q1.i8, 0);
    *(short float *)_Q1.i16 = (short float)v30;
    int16x8_t v61 = vdupq_lane_s16(*(int16x4_t *)_Q1.i8, 0);
    float16x8_t v186 = (float16x8_t)v61;
    *(short float *)v61.i16 = (short float)v31;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    *(short float *)v61.i16 = (short float)v33;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    unsigned int v64 = v17[15].u8[4];
    if (v64 >= 0x11) {
      unsigned __int8 v65 = 0;
    }
    else {
      unsigned __int8 v65 = 16 - v64;
    }
    uint64_t v66 = v15[1];
    if (v66) {
      float v67 = (char *)(v66 + v24 * v16 + v14);
    }
    else {
      float v67 = 0;
    }
    float v68 = (int8x8_t *)(*v15 + v23 * v16 + v14);
    if (v12 >= 0) {
      uint64_t v69 = v12;
    }
    else {
      uint64_t v69 = v12 + 1;
    }
    result = (void *)(v18[1] + v22 * (v69 >> 1) + 2 * v11);
    float v70 = (uint16x8_t *)(*v18 + v21 * v12 + 2 * v11);
    unsigned __int8 v71 = v65;
    __asm { FCVT            H1, S4 }
    short float v185 = _H1;
    __asm { FCVT            H1, S5 }
    short float v184 = _H1;
    __asm { FCVT            H1, S6 }
    short float v183 = _H1;
    __asm { FCVT            H1, S7 }
    short float v182 = _H1;
    __asm { FCVT            H1, S16 }
    short float v181 = _H1;
    __asm { FCVT            H1, S17 }
    short float v180 = _H1;
    __asm { FCVT            H1, S18 }
    short float v179 = _H1;
    uint16x8_t v79 = (uint16x8_t)vdupq_n_s16(-v65);
    uint64_t v80 = v3.i64[0];
    float v176 = v57.f32[0];
    float v171 = _S5;
    float v172 = v57.f32[1];
    do
    {
      float v81 = &v70->i8[v21];
      float v82 = (char *)v68 + v23;
      float v83 = &v67[v24];
      if ((int)v10 < 8)
      {
        size_t v113 = 0;
        float v88 = &v67[v24];
        float v87 = (int8x8_t *)((char *)v68 + v23);
        float v86 = (uint16x8_t *)result;
        float v85 = (uint16x8_t *)((char *)v70 + v21);
      }
      else
      {
        int v84 = 0;
        float v85 = (uint16x8_t *)((char *)v70 + v21);
        float v86 = (uint16x8_t *)result;
        float v87 = (int8x8_t *)((char *)v68 + v23);
        float v88 = &v67[v24];
        do
        {
          uint16x8_t v89 = *v86++;
          float16x8_t v90 = vcvtq_f16_u16(vshlq_u16(v89, v79));
          int8x16_t v91 = (int8x16_t)vmlaq_f16(v174, v177, v90);
          int8x16_t v92 = (int8x16_t)vmlaq_f16(v173, v175, v90);
          v90.i64[0] = vextq_s8(v91, v91, 8uLL).u64[0];
          *(int16x4_t *)v93.i8 = vuzp1_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v90.i8);
          *(int16x4_t *)v90.i8 = vuzp2_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v90.i8);
          *(double *)&v90.i64[1] = a3;
          float16x8_t v94 = (float16x8_t)vzip1q_s16((int16x8_t)v90, (int16x8_t)v90);
          *(double *)&v93.i64[1] = a3;
          float16x8_t v95 = (float16x8_t)vzip1q_s16(v93, v93);
          v90.i64[0] = vextq_s8(v92, v92, 8uLL).u64[0];
          *(float16x4_t *)v90.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v90.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v90.i8));
          *(double *)&v90.i64[1] = a3;
          float16x8_t v96 = (float16x8_t)vzip1q_s16((int16x8_t)v90, (int16x8_t)v90);
          uint16x8_t v97 = *v70++;
          uint16x8_t v98 = vshlq_u16(v97, v79);
          uint16x8_t v99 = *v85++;
          uint16x8_t v100 = v99;
          float16x8_t v101 = vsubq_f16(vcvtq_f16_u16(v98), v56);
          float16x8_t v102 = vmlaq_n_f16(v94, v101, _H8);
          float16x8_t v103 = vmlaq_n_f16(v96, v101, _H8);
          float16x8_t v104 = vmlaq_n_f16(v95, v101, _H8);
          *v68++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v102, v188), v103, v187), v104, v185), v59), v186)));
          if (v67)
          {
            float16x8_t v105 = v56;
            float16x8_t v106 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v102, v181), v103, v180), v104, v179);
            v189.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v102, v184), v103, v183), v104, v182), v62), v63), v62), v63)));
            int16x8_t v107 = (int16x8_t)vcvtq_u16_f16(v106);
            float16x8_t v56 = v105;
            v189.val[1] = vmovn_s16(v107);
            vst2_s8(v67, v189);
            v67 += 16;
          }
          float16x8_t v108 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v100, v79)), v56);
          float16x8_t v109 = vmlaq_n_f16(v94, v108, _H8);
          float16x8_t v110 = vmlaq_n_f16(v96, v108, _H8);
          float16x8_t v111 = vmlaq_n_f16(v95, v108, _H8);
          *v87++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v109, v188), v110, v187), v111, v185), v59), v186)));
          if (v88)
          {
            float16x8_t v112 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v109, v181), v110, v180), v111, v179);
            v190.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v109, v184), v110, v183), v111, v182), v62), v63), v62), v63)));
            v190.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(v112));
            vst2_s8(v88, v190);
            v88 += 16;
          }
          _S5 = v171;
          v84 += 8;
        }
        while (v84 < (int)v10 - 7);
        size_t v113 = v10 & 0xFFFFFFF8;
      }
      while (v10 > v113)
      {
        float v114 = (float)(v86->u16[0] >> v71) - v178;
        float v115 = (float)(v86->u16[1] >> v71) - v178;
        float v116 = *((float *)&v80 + 1) * v115;
        float v117 = (float)(v172 * v115) + (float)(v114 * v176);
        float v118 = *(float *)&v80 * v114;
        float v119 = _S23 * (float)((float)(v70->u16[0] >> v71) - *(float *)&a3);
        float v120 = (float)(*((float *)&v80 + 1) * v115) + v119;
        float v121 = v119 + v117;
        float v122 = v118 + v119;
        float v123 = (float)((float)((float)(_S3 * (float)(v119 + v117)) + (float)(_S2 * v120))
                     + (float)(_S4 * (float)(v118 + v119)))
             + v45;
        float v124 = v47;
        if (v123 <= v47)
        {
          float v124 = v123;
          if (v123 < v45) {
            float v124 = v45;
          }
        }
        unsigned int v125 = v70->u16[1];
        unsigned int v126 = v85->u16[0];
        unsigned int v127 = v85->u16[1];
        v68->i8[0] = llroundf(v124);
        if (v67)
        {
          float v128 = (float)((float)(v46 + (float)(v120 * _S5)) + (float)(v121 * _S6)) + (float)(v122 * _S7);
          float v129 = v50;
          if (v128 <= v50)
          {
            float v129 = (float)((float)(v46 + (float)(v120 * _S5)) + (float)(v121 * _S6)) + (float)(v122 * _S7);
            if (v128 < v48) {
              float v129 = v48;
            }
          }
          float v130 = (float)((float)(v46 + (float)(v120 * _S16)) + (float)(v121 * _S17)) + (float)(v122 * _S18);
          *float v67 = llroundf(v129);
          float v131 = v50;
          if (v130 <= v50)
          {
            if (v130 < v48) {
              float v131 = v48;
            }
            else {
              float v131 = v130;
            }
          }
          v67[1] = llroundf(v131);
          v67 += 2;
        }
        float v132 = _S23 * (float)((float)(int)(v125 >> v71) - *(float *)&a3);
        float v133 = v116 + v132;
        float v134 = v117 + v132;
        float v135 = v118 + v132;
        float v136 = (float)((float)((float)(_S3 * (float)(v117 + v132)) + (float)(_S2 * (float)(v116 + v132)))
                     + (float)(_S4 * (float)(v118 + v132)))
             + v45;
        float v137 = v47;
        if (v136 <= v47)
        {
          float v137 = v136;
          if (v136 < v45) {
            float v137 = v45;
          }
        }
        v68->i8[1] = llroundf(v137);
        if (v67)
        {
          float v138 = (float)((float)(v46 + (float)(v133 * _S5)) + (float)(v134 * _S6)) + (float)(v135 * _S7);
          float v139 = v50;
          if (v138 <= v50)
          {
            float v139 = (float)((float)(v46 + (float)(v133 * _S5)) + (float)(v134 * _S6)) + (float)(v135 * _S7);
            if (v138 < v48) {
              float v139 = v48;
            }
          }
          float v140 = (float)((float)(v46 + (float)(v133 * _S16)) + (float)(v134 * _S17)) + (float)(v135 * _S18);
          *float v67 = llroundf(v139);
          float v141 = v50;
          if (v140 <= v50)
          {
            if (v140 < v48) {
              float v141 = v48;
            }
            else {
              float v141 = v140;
            }
          }
          v67[1] = llroundf(v141);
          v67 += 2;
        }
        float v142 = _S23 * (float)((float)(int)(v126 >> v71) - *(float *)&a3);
        float v143 = v116 + v142;
        float v144 = v117 + v142;
        float v145 = v118 + v142;
        float v146 = (float)((float)((float)(_S3 * (float)(v117 + v142)) + (float)(_S2 * (float)(v116 + v142)))
                     + (float)(_S4 * (float)(v118 + v142)))
             + v45;
        float v147 = v47;
        if (v146 <= v47)
        {
          float v147 = v146;
          if (v146 < v45) {
            float v147 = v45;
          }
        }
        v87->i8[0] = llroundf(v147);
        if (v88)
        {
          float v148 = (float)((float)(v46 + (float)(v143 * _S5)) + (float)(v144 * _S6)) + (float)(v145 * _S7);
          float v149 = v50;
          if (v148 <= v50)
          {
            float v149 = (float)((float)(v46 + (float)(v143 * _S5)) + (float)(v144 * _S6)) + (float)(v145 * _S7);
            if (v148 < v48) {
              float v149 = v48;
            }
          }
          float v150 = (float)((float)(v46 + (float)(v143 * _S16)) + (float)(v144 * _S17)) + (float)(v145 * _S18);
          *float v88 = llroundf(v149);
          float v151 = v50;
          if (v150 <= v50)
          {
            if (v150 < v48) {
              float v151 = v48;
            }
            else {
              float v151 = v150;
            }
          }
          v88[1] = llroundf(v151);
          float v152 = v88 + 2;
        }
        else
        {
          float v152 = 0;
        }
        float v153 = _S23 * (float)((float)(int)(v127 >> v71) - *(float *)&a3);
        float v154 = v116 + v153;
        float v155 = v117 + v153;
        float v156 = v118 + v153;
        float v157 = (float)((float)((float)(_S3 * (float)(v117 + v153)) + (float)(_S2 * (float)(v116 + v153)))
                     + (float)(_S4 * v156))
             + v45;
        float v158 = v47;
        if (v157 <= v47)
        {
          float v158 = v157;
          if (v157 < v45) {
            float v158 = v45;
          }
        }
        v87->i8[1] = llroundf(v158);
        if (v152)
        {
          float v159 = (float)((float)(v46 + (float)(v154 * _S5)) + (float)(v155 * _S6)) + (float)(v156 * _S7);
          float v160 = v50;
          if (v159 <= v50)
          {
            float v160 = (float)((float)(v46 + (float)(v154 * _S5)) + (float)(v155 * _S6)) + (float)(v156 * _S7);
            if (v159 < v48) {
              float v160 = v48;
            }
          }
          float v161 = (float)((float)(v46 + (float)(v154 * _S16)) + (float)(v155 * _S17)) + (float)(v156 * _S18);
          unsigned char *v152 = llroundf(v160);
          float v162 = v50;
          if (v161 <= v50)
          {
            float v162 = v161;
            if (v161 < v48) {
              float v162 = v48;
            }
          }
          v152[1] = llroundf(v162);
          float v88 = v152 + 2;
        }
        else
        {
          float v88 = 0;
        }
        v113 += 2;
        float v86 = (uint16x8_t *)((char *)v86 + 4);
        float v70 = (uint16x8_t *)((char *)v70 + 4);
        float v85 = (uint16x8_t *)((char *)v85 + 4);
        float v68 = (int8x8_t *)((char *)v68 + 2);
        float v87 = (int8x8_t *)((char *)v87 + 2);
      }
      float v70 = (uint16x8_t *)&v81[v21];
      result = (void *)((char *)result + v22);
      float v68 = (int8x8_t *)&v82[v23];
      float v67 = &v83[v24];
      v9 += 2;
    }
    while (v13 > v9);
    if (v170 && v169)
    {
      uint64_t v163 = 0;
      do
      {
        if (v10)
        {
          size_t v164 = v10;
          float v165 = v26;
          float v166 = (unsigned __int16 *)v43;
          do
          {
            unsigned int v167 = *v166++;
            *v165++ = llroundf((float)v167 * 0.0038911);
            --v164;
          }
          while (v164);
        }
        v43 += v168;
        v26 += v25;
        ++v163;
      }
      while (v163 != v13);
    }
    else if (v169)
    {
      do
      {
        if (v10) {
          result = memset(v26, 255, v10);
        }
        v26 += v25;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_444vf_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    size_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 36);
    uint64_t v13 = *(void *)(result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = *((void *)result + 14);
    uint64_t v16 = (void *)*((void *)result + 16);
    uint64_t v17 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7);
    uint64_t v18 = *((void *)result + 19);
    uint64_t v19 = (uint64_t *)*((void *)result + 7);
    uint64_t v20 = (uint64_t *)*((void *)result + 8);
    uint64_t v21 = (uint64_t *)*((void *)result + 17);
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = *v21;
    uint64_t v27 = v21[1];
    uint64_t v28 = v21[2];
    uint64_t v29 = v16[1];
    uint64_t v30 = v16[2];
    uint64_t v31 = (unsigned char *)(v30 + v28 * v17 + v15);
    uint64_t v32 = (unsigned char *)(*v16 + v26 * v17 + v15);
    uint64_t v33 = (unsigned char *)(v29 + v27 * v17 + v15);
    uint64_t v34 = v25 + v24 * v13 + 2 * v12;
    *(float *)&unsigned int v35 = (float)*(unsigned int *)(v18 + 128);
    *(float *)&unsigned int v36 = (float)*(unsigned int *)(v18 + 136);
    float v37 = *(float *)&v36 / *(float *)&v35;
    LOWORD(v35) = *(_WORD *)(v18 + 140);
    float v38 = (float)v35;
    LOWORD(v36) = *(_WORD *)(v18 + 142);
    float v39 = (float)v36;
    float v40 = v37 * *(float *)v18;
    float v41 = v37 * *(float *)(v18 + 8);
    float v42 = v37 * *(float *)(v18 + 16);
    float v43 = v37 * *(float *)(v18 + 20);
    float v44 = *(float *)(v18 + 28);
    float v45 = v37 * v44;
    LOWORD(v44) = *(_WORD *)(v18 + 144);
    float v46 = (float)LODWORD(v44);
    LOWORD(v2) = *(_WORD *)(v18 + 146);
    float v47 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v18 + 148);
    float v48 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v18 + 150);
    float v49 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v18 + 152);
    float v50 = (float)v5;
    float v51 = *(float *)(v18 + 36);
    float v52 = *(float *)(v18 + 40);
    float v53 = *(float *)(v18 + 44);
    float v54 = *(float *)(v18 + 48);
    float v55 = *(float *)(v18 + 52);
    float v56 = *(float *)(v18 + 56);
    float v57 = *(float *)(v18 + 60);
    float v58 = *(float *)(v18 + 64);
    float v59 = *(float *)(v18 + 68);
    if (v29) {
      float16x8_t v60 = v33;
    }
    else {
      float16x8_t v60 = 0;
    }
    unsigned int v61 = *(unsigned __int8 *)(v18 + 124);
    char v62 = 16 - v61;
    BOOL v63 = v61 >= 0x11;
    uint64_t v64 = *v19;
    uint64_t v65 = v19[1];
    result = (unsigned __int8 *)(v64 + v22 * v13 + 2 * v12);
    if (v63) {
      char v62 = 0;
    }
    uint64_t v66 = v65 + v23 * (v13 / 2) + 2 * v12;
    char v67 = v62;
    do
    {
      float v68 = &result[v22];
      uint64_t v69 = &v60[v27];
      float v70 = &v32[v26];
      if (v11)
      {
        size_t v71 = 0;
        float v72 = &result[v22];
        float v73 = &v32[v26];
        float v74 = &v60[v27];
        do
        {
          float v75 = (unsigned __int16 *)(v66 + 2 * v71);
          float v76 = (float)(*v75 >> v67) - v39;
          float v77 = (float)(v75[1] >> v67) - v39;
          float v78 = v41 * v77;
          float v79 = (float)(v43 * v77) + (float)(v76 * v42);
          float v80 = v45 * v76;
          float v81 = v40 * (float)((float)(*(unsigned __int16 *)result >> v67) - v38);
          float v82 = v78 + v81;
          float v83 = v81 + v79;
          float v84 = v80 + v81;
          float v85 = (float)((float)((float)(v52 * v83) + (float)(v51 * v82)) + (float)(v53 * v84)) + v46;
          float v86 = v48;
          if (v85 <= v48)
          {
            float v86 = (float)((float)((float)(v52 * v83) + (float)(v51 * v82)) + (float)(v53 * v84)) + v46;
            if (v85 < v46) {
              float v86 = v46;
            }
          }
          unsigned int v87 = *((unsigned __int16 *)result + 1);
          unsigned int v88 = *(unsigned __int16 *)v72;
          unsigned int v89 = *((unsigned __int16 *)v72 + 1);
          *uint64_t v32 = llroundf(v86);
          if (v60)
          {
            float v90 = (float)((float)(v47 + (float)(v82 * v54)) + (float)(v83 * v55)) + (float)(v84 * v56);
            float v91 = v50;
            if (v90 <= v50)
            {
              float v91 = (float)((float)(v47 + (float)(v82 * v54)) + (float)(v83 * v55)) + (float)(v84 * v56);
              if (v90 < v49) {
                float v91 = v49;
              }
            }
            float v92 = (float)((float)(v47 + (float)(v82 * v57)) + (float)(v83 * v58)) + (float)(v84 * v59);
            unsigned char *v60 = llroundf(v91);
            float v93 = v50;
            if (v92 <= v50)
            {
              if (v92 < v49) {
                float v93 = v49;
              }
              else {
                float v93 = v92;
              }
            }
            v60[1] = llroundf(v93);
            v60 += 2;
          }
          float v94 = v40 * (float)((float)(int)(v87 >> v67) - v38);
          float v95 = v78 + v94;
          float v96 = v79 + v94;
          float v97 = v80 + v94;
          float v98 = (float)((float)((float)(v52 * v96) + (float)(v51 * v95)) + (float)(v53 * v97)) + v46;
          float v99 = v48;
          if (v98 <= v48)
          {
            float v99 = (float)((float)((float)(v52 * v96) + (float)(v51 * v95)) + (float)(v53 * v97)) + v46;
            if (v98 < v46) {
              float v99 = v46;
            }
          }
          v32[1] = llroundf(v99);
          if (v60)
          {
            float v100 = (float)((float)(v47 + (float)(v95 * v54)) + (float)(v96 * v55)) + (float)(v97 * v56);
            float v101 = v50;
            if (v100 <= v50)
            {
              float v101 = (float)((float)(v47 + (float)(v95 * v54)) + (float)(v96 * v55)) + (float)(v97 * v56);
              if (v100 < v49) {
                float v101 = v49;
              }
            }
            float v102 = (float)((float)(v47 + (float)(v95 * v57)) + (float)(v96 * v58)) + (float)(v97 * v59);
            unsigned char *v60 = llroundf(v101);
            float v103 = v50;
            if (v102 <= v50)
            {
              if (v102 < v49) {
                float v103 = v49;
              }
              else {
                float v103 = v102;
              }
            }
            v60[1] = llroundf(v103);
            v60 += 2;
          }
          float v104 = v40 * (float)((float)(int)(v88 >> v67) - v38);
          float v105 = v78 + v104;
          float v106 = v79 + v104;
          float v107 = v80 + v104;
          float v108 = (float)((float)((float)(v52 * v106) + (float)(v51 * v105)) + (float)(v53 * v107)) + v46;
          float v109 = v48;
          if (v108 <= v48)
          {
            float v109 = (float)((float)((float)(v52 * v106) + (float)(v51 * v105)) + (float)(v53 * v107)) + v46;
            if (v108 < v46) {
              float v109 = v46;
            }
          }
          *float v73 = llroundf(v109);
          if (v74)
          {
            float v110 = (float)((float)(v47 + (float)(v105 * v54)) + (float)(v106 * v55)) + (float)(v107 * v56);
            float v111 = v50;
            if (v110 <= v50)
            {
              float v111 = (float)((float)(v47 + (float)(v105 * v54)) + (float)(v106 * v55)) + (float)(v107 * v56);
              if (v110 < v49) {
                float v111 = v49;
              }
            }
            float v112 = (float)((float)(v47 + (float)(v105 * v57)) + (float)(v106 * v58)) + (float)(v107 * v59);
            unsigned char *v74 = llroundf(v111);
            float v113 = v50;
            if (v112 <= v50)
            {
              if (v112 < v49) {
                float v113 = v49;
              }
              else {
                float v113 = v112;
              }
            }
            v74[1] = llroundf(v113);
            v74 += 2;
          }
          float v114 = v40 * (float)((float)(int)(v89 >> v67) - v38);
          float v115 = v78 + v114;
          float v116 = v79 + v114;
          float v117 = v80 + v114;
          float v118 = (float)((float)((float)(v52 * v116) + (float)(v51 * v115)) + (float)(v53 * v117)) + v46;
          float v119 = v48;
          if (v118 <= v48)
          {
            float v119 = (float)((float)((float)(v52 * v116) + (float)(v51 * v115)) + (float)(v53 * v117)) + v46;
            if (v118 < v46) {
              float v119 = v46;
            }
          }
          v73[1] = llroundf(v119);
          if (v74)
          {
            float v120 = (float)((float)(v47 + (float)(v115 * v54)) + (float)(v116 * v55)) + (float)(v117 * v56);
            float v121 = v50;
            if (v120 <= v50)
            {
              float v121 = (float)((float)(v47 + (float)(v115 * v54)) + (float)(v116 * v55)) + (float)(v117 * v56);
              if (v120 < v49) {
                float v121 = v49;
              }
            }
            float v122 = (float)((float)(v47 + (float)(v115 * v57)) + (float)(v116 * v58)) + (float)(v117 * v59);
            unsigned char *v74 = llroundf(v121);
            float v123 = v50;
            if (v122 <= v50)
            {
              float v123 = v122;
              if (v122 < v49) {
                float v123 = v49;
              }
            }
            v74[1] = llroundf(v123);
            v74 += 2;
          }
          result += 4;
          v72 += 4;
          v32 += 2;
          v73 += 2;
          v71 += 2;
        }
        while (v11 > v71);
      }
      result = &v68[v22];
      v66 += v23;
      uint64_t v32 = &v70[v26];
      float16x8_t v60 = &v69[v27];
      v10 += 2;
    }
    while (v14 > v10);
    if (v25 && v30)
    {
      uint64_t v124 = 0;
      do
      {
        if (v11)
        {
          size_t v125 = v11;
          unsigned int v126 = v31;
          unsigned int v127 = (unsigned __int16 *)v34;
          do
          {
            unsigned int v128 = *v127++;
            *v126++ = llroundf((float)v128 * 0.0038911);
            --v125;
          }
          while (v125);
        }
        v34 += v24;
        v31 += v28;
        ++v124;
      }
      while (v124 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          result = (unsigned __int8 *)memset(v31, 255, v11);
        }
        v31 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, float32x4_t a3, int16x4_t a4)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = 2 * *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 36);
    uint64_t v11 = *(void *)(result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = *((void *)result + 14);
    uint64_t v14 = (uint64_t *)*((void *)result + 16);
    uint64_t v15 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v5);
    uint64_t v16 = (float32x2_t *)*((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 7);
    uint64_t v18 = (uint64_t *)*((void *)result + 8);
    uint64_t v19 = (uint64_t *)*((void *)result + 17);
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    uint64_t v359 = v18[2];
    uint64_t v362 = v17[2];
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    uint64_t v360 = v19[2];
    uint64_t v361 = v14[2];
    uint64_t v24 = (char *)(v361 + v360 * v15 + 2 * v13);
    unsigned int v25 = v16[17].u16[2];
    unsigned int v26 = v16[17].u16[3];
    a4.i32[0] = v16->i32[0];
    v27.i32[0] = v16[3].i32[1];
    unsigned int v28 = v16[18].u16[0];
    unsigned int v29 = v16[18].u16[1];
    unsigned int v30 = v16[18].u16[2];
    unsigned int v31 = v16[18].u16[3];
    unsigned int v32 = v16[19].u16[0];
    _S4 = v16[4].f32[1];
    _S11 = v16[5].f32[0];
    _S5 = v16[5].f32[1];
    _S15 = v16[6].f32[0];
    _S12 = v16[6].f32[1];
    _S8 = v16[7].f32[0];
    uint64_t v39 = (char *)&v16[2068] + 4;
    __src = (char *)(v362 + v359 * v11 + 2 * v10);
    a3.f32[0] = 8191.0 / (float)v16[16].u32[0];
    float v40 = (float)v25;
    float v41 = (float)v26;
    float v42 = (float)v29;
    float v43 = (float)v30;
    float v44 = (float)v31;
    float v45 = (float)v32;
    _S21 = a3.f32[0] * v16->f32[0];
    *(short float *)a4.i16 = (short float)v25;
    float v47 = (char *)&v16[20] + 4;
    short float v48 = (short float)v26;
    float v49 = (char *)&v16[4116] + 4;
    __asm { FCVT            H7, S21 }
    float32x4_t v55 = (float32x4_t)vdupq_lane_s16(a4, 0);
    float16x8_t v415 = (float16x8_t)v55;
    short float v416 = _H7;
    v27.i32[1] = v16[1].i32[0];
    *(float32x2_t *)v55.f32 = vmul_n_f32(v27, a3.f32[0]);
    uint64_t v419 = v55.i64[0];
    *(float32x2_t *)a3.f32 = vmul_n_f32(v16[2], a3.f32[0]);
    unint64_t v418 = a3.i64[0];
    float16x8_t v413 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    float16x8_t v414 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v55), 0);
    _Q0 = vmulq_n_f16(v413, -v48);
    float16x8_t v411 = _Q0;
    float16x8_t v412 = vmulq_n_f16(v414, -v48);
    __asm { FCVT            H0, S4 }
    short float v432 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S11 }
    short float v431 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S5 }
    short float v430 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v28;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v29;
    int16x8_t v58 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v30;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v31;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v428 = (float16x8_t)_Q0;
    float16x8_t v429 = (float16x8_t)v58;
    __asm { FCVT            H0, S15 }
    short float v427 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v32;
    float16x8_t v426 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    unsigned int v61 = v16[16].u8[4];
    unsigned __int8 v62 = 16 - v61;
    if (v61 >= 0x11) {
      unsigned __int8 v62 = 0;
    }
    unsigned int v63 = v16[15].u8[4];
    unsigned __int8 v64 = 16 - v63;
    if (v63 >= 0x11) {
      unsigned __int8 v64 = 0;
    }
    uint64_t v66 = *v14;
    uint64_t v65 = v14[1];
    char v67 = (__int16 *)(v65 + v23 * v15 + 2 * v13);
    if (!v65) {
      char v67 = 0;
    }
    result = (unsigned __int8 *)(v66 + v22 * v15 + 2 * v13);
    if (v11 >= 0) {
      uint64_t v68 = v11;
    }
    else {
      uint64_t v68 = v11 + 1;
    }
    uint64_t v69 = *v17;
    uint64_t v70 = v17[1] + v21 * (v68 >> 1) + 2 * v10;
    size_t v71 = (uint16x8_t *)(v69 + v20 * v11 + 2 * v10);
    unsigned __int8 v72 = v64;
    unsigned __int8 v73 = v62;
    __asm { FCVT            H0, S12 }
    short float v425 = _H0;
    _S29 = v16[8].f32[0];
    _S30 = v16[8].f32[1];
    float v417 = v16[13].f32[0];
    __asm { FCVT            H2, S8 }
    short float v424 = _H2;
    float v433 = v16[7].f32[1];
    __asm { FCVT            H1, S1 }
    short float v423 = _H1;
    __asm { FCVT            H1, S29 }
    short float v422 = _H1;
    __asm { FCVT            H6, S30 }
    short float v421 = _H6;
    float v401 = v16[13].f32[1];
    __asm { FCVT            H6, S13 }
    float v400 = v16[14].f32[0];
    __asm { FCVT            H0, S0 }
    short float v396 = _H0;
    short float v397 = _H6;
    float v399 = v16[14].f32[1];
    __asm { FCVT            H0, S1 }
    short float v395 = _H0;
    float v398 = v16[15].f32[0];
    __asm { FCVT            H0, S2 }
    short float v394 = _H0;
    float v410 = v16[9].f32[0];
    __asm { FCVT            H0, S27 }
    short float v393 = _H0;
    float v409 = v16[9].f32[1];
    __asm { FCVT            H0, S7 }
    short float v392 = _H0;
    float v408 = v16[10].f32[0];
    __asm { FCVT            H0, S16 }
    short float v391 = _H0;
    float v407 = v16[10].f32[1];
    __asm { FCVT            H0, S20 }
    short float v390 = _H0;
    float v406 = v16[11].f32[0];
    __asm { FCVT            H0, S22 }
    short float v389 = _H0;
    float v405 = v16[11].f32[1];
    __asm { FCVT            H0, S23 }
    short float v388 = _H0;
    float v404 = v16[12].f32[0];
    __asm { FCVT            H0, S25 }
    short float v387 = _H0;
    float v403 = v16[12].f32[1];
    __asm { FCVT            H0, S26 }
    short float v386 = _H0;
    uint16x8_t v384 = (uint16x8_t)vdupq_n_s16(v62);
    uint16x8_t v385 = (uint16x8_t)vdupq_n_s16(-v64);
    _S0 = v417;
    __asm { FCVT            H0, S0 }
    short float v383 = *(short float *)&_S0;
    uint64_t v370 = v22;
    uint64_t v371 = *v18;
    uint64_t v368 = v18[1];
    uint64_t v369 = v23;
    float v420 = v41;
    float v381 = _S21;
    float v382 = (float)v25;
    float16x8_t v379 = v59;
    float16x8_t v380 = v57;
    float v377 = _S30;
    float v378 = _S29;
    float v375 = v42;
    float v376 = v44;
    float v402 = (float)v28;
    float32_t v366 = v16[5].f32[1];
    float32_t v367 = v16[5].f32[0];
    float32_t v364 = v16[6].f32[0];
    float32_t v365 = v16[6].f32[1];
    float32_t v363 = v16[4].f32[1];
    do
    {
      float v94 = (uint16x8_t *)((char *)v71 + v20);
      float v95 = (uint16x8_t *)&result[v22];
      float v96 = (__int16 *)((char *)v67 + v23);
      float16x8_t v373 = &result[v22];
      float16x8_t v374 = (char *)v67 + v23;
      float16x8_t v372 = &v71->i8[v20];
      if ((int)v9 < 8)
      {
        unint64_t v208 = 0;
        float v98 = (uint16x8_t *)v70;
      }
      else
      {
        int v97 = 0;
        float v98 = (uint16x8_t *)v70;
        do
        {
          uint16x8_t v99 = *v98++;
          float16x8_t v100 = vcvtq_f16_u16(vshlq_u16(v99, v385));
          int16x8_t v101 = (int16x8_t)vmlaq_f16(v412, v414, v100);
          int8x16_t v102 = (int8x16_t)vmlaq_f16(v411, v413, v100);
          v100.i64[0] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
          *(int16x4_t *)v103.i8 = vuzp1_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
          *(int16x4_t *)v100.i8 = vuzp2_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
          v100.i64[1] = v100.i64[0];
          v103.i64[1] = v100.i64[0];
          float16x8_t v104 = (float16x8_t)vzip1q_s16((int16x8_t)v100, (int16x8_t)v100);
          float16x8_t v105 = (float16x8_t)vzip1q_s16(v103, v103);
          v101.i64[0] = vextq_s8(v102, v102, 8uLL).u64[0];
          *(float16x4_t *)v101.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8));
          v101.i64[1] = v104.i64[0];
          float16x8_t v106 = (float16x8_t)vzip1q_s16(v101, v101);
          uint16x8_t v107 = *v71++;
          float16x8_t v108 = vcvtq_f16_u16(vshlq_u16(v107, v385));
          uint16x8_t v109 = *v94++;
          float16x8_t v110 = vsubq_f16(v108, v415);
          float16x8_t v111 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v109, v385)), v415);
          float16x8_t v112 = vmlaq_n_f16(v104, v110, v416);
          float16x8_t v113 = vmlaq_n_f16(v104, v111, v416);
          float16x8_t v114 = vmlaq_n_f16(v106, v110, v416);
          float16x8_t v115 = vmlaq_n_f16(v106, v111, v416);
          float16x8_t v116 = vmlaq_n_f16(v105, v110, v416);
          float16x8_t v117 = vmlaq_n_f16(v105, v111, v416);
          WORD4(v118) = 0;
          v119.i64[0] = 0x9000900090009000;
          v119.i64[1] = 0x9000900090009000;
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, (float16x8_t)0), v119));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          __int16 v123 = *(_WORD *)&v47[2 * v122.u32[0]];
          __int16 v124 = *(_WORD *)&v47[2 * v122.u32[1]];
          __int16 v125 = *(_WORD *)&v47[2 * v122.u32[2]];
          __int16 v126 = *(_WORD *)&v47[2 * v122.u32[3]];
          __int16 v127 = *(_WORD *)&v47[2 * v121.u32[0]];
          __int16 v128 = *(_WORD *)&v47[2 * v121.u32[1]];
          __int16 v129 = *(_WORD *)&v47[2 * v121.u32[2]];
          *(void *)&long long v118 = *(unsigned __int16 *)&v47[2 * v121.u32[3]];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          uint32x4_t v131 = vmovl_high_u16(v130);
          uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v130.i8);
          v133.i16[0] = *(_WORD *)&v47[2 * v132.u32[0]];
          v133.i16[1] = *(_WORD *)&v47[2 * v132.u32[1]];
          v133.i16[2] = *(_WORD *)&v47[2 * v132.u32[2]];
          v133.i16[3] = *(_WORD *)&v47[2 * v132.u32[3]];
          v133.i16[4] = *(_WORD *)&v47[2 * v131.u32[0]];
          v133.i16[5] = *(_WORD *)&v47[2 * v131.u32[1]];
          v133.i16[6] = *(_WORD *)&v47[2 * v131.u32[2]];
          v133.i16[7] = *(_WORD *)&v47[2 * v131.u32[3]];
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          uint32x4_t v135 = vmovl_high_u16(v134);
          float16x8_t v136 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v134.i8);
          v136.i16[0] = *(_WORD *)&v47[2 * v136.u32[0]];
          v136.i16[1] = *(_WORD *)&v47[2 * v136.u32[1]];
          v136.i16[2] = *(_WORD *)&v47[2 * v136.u32[2]];
          v136.i16[3] = *(_WORD *)&v47[2 * v136.u32[3]];
          v136.i16[4] = *(_WORD *)&v47[2 * v135.u32[0]];
          v136.i16[5] = *(_WORD *)&v47[2 * v135.u32[1]];
          v136.i16[6] = *(_WORD *)&v47[2 * v135.u32[2]];
          v136.i16[7] = *(_WORD *)&v47[2 * v135.u32[3]];
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          uint32x4_t v138 = vmovl_high_u16(v137);
          float16x8_t v139 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v137.i8);
          v139.i16[0] = *(_WORD *)&v47[2 * v139.u32[0]];
          v139.i16[1] = *(_WORD *)&v47[2 * v139.u32[1]];
          v139.i16[2] = *(_WORD *)&v47[2 * v139.u32[2]];
          v139.i16[3] = *(_WORD *)&v47[2 * v139.u32[3]];
          v139.i16[4] = *(_WORD *)&v47[2 * v138.u32[0]];
          v139.i16[5] = *(_WORD *)&v47[2 * v138.u32[1]];
          v139.i16[6] = *(_WORD *)&v47[2 * v138.u32[2]];
          v139.i16[7] = *(_WORD *)&v47[2 * v138.u32[3]];
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          uint32x4_t v141 = vmovl_high_u16(v140);
          float16x8_t v142 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v140.i8);
          v142.i16[0] = *(_WORD *)&v47[2 * v142.u32[0]];
          v142.i16[1] = *(_WORD *)&v47[2 * v142.u32[1]];
          v142.i16[2] = *(_WORD *)&v47[2 * v142.u32[2]];
          v142.i16[3] = *(_WORD *)&v47[2 * v142.u32[3]];
          v142.i16[4] = *(_WORD *)&v47[2 * v141.u32[0]];
          v142.i16[5] = *(_WORD *)&v47[2 * v141.u32[1]];
          v142.i16[6] = *(_WORD *)&v47[2 * v141.u32[2]];
          v142.i16[7] = *(_WORD *)&v47[2 * v141.u32[3]];
          uint16x8_t v143 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          float16x8_t v144 = (float16x8_t)vmovl_high_u16(v143);
          *(void *)&long long v145 = v144.u32[2];
          *((void *)&v145 + 1) = v144.u32[3];
          long long v146 = v145;
          *(void *)&long long v145 = v144.u32[0];
          *((void *)&v145 + 1) = v144.u32[1];
          uint32x4_t v147 = vmovl_u16(*(uint16x4_t *)v143.i8);
          v144.i16[0] = *(_WORD *)&v47[2 * v147.u32[0]];
          v144.i16[1] = *(_WORD *)&v47[2 * v147.u32[1]];
          v144.i16[2] = *(_WORD *)&v47[2 * v147.u32[2]];
          v144.i16[3] = *(_WORD *)&v47[2 * v147.u32[3]];
          v144.i16[4] = *(_WORD *)&v47[2 * v145];
          v144.i16[5] = *(_WORD *)&v47[2 * *((void *)&v145 + 1)];
          v144.i16[6] = *(_WORD *)&v47[2 * v146];
          v144.i16[7] = *(_WORD *)&v47[2 * *((void *)&v146 + 1)];
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(*(float16x8_t *)((char *)&v118 - 14), v397), v133, v396), v136, v395), vmaxq_f16(vmaxq_f16(*(float16x8_t *)((char *)&v118 - 14), v133), v136), v394), (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          uint32x4_t v149 = vmovl_high_u16(v148);
          float16x8_t v150 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v148.i8);
          v150.i16[0] = *(_WORD *)&v39[2 * v150.u32[0]];
          v150.i16[1] = *(_WORD *)&v39[2 * v150.u32[1]];
          v150.i16[2] = *(_WORD *)&v39[2 * v150.u32[2]];
          v150.i16[3] = *(_WORD *)&v39[2 * v150.u32[3]];
          v150.i16[4] = *(_WORD *)&v39[2 * v149.u32[0]];
          v150.i16[5] = *(_WORD *)&v39[2 * v149.u32[1]];
          v150.i16[6] = *(_WORD *)&v39[2 * v149.u32[2]];
          v150.i16[7] = *(_WORD *)&v39[2 * v149.u32[3]];
          float16x8_t v151 = vmulq_f16(*(float16x8_t *)((char *)&v118 - 14), v150);
          float16x8_t v152 = vmulq_f16(v133, v150);
          float16x8_t v153 = vmulq_f16(v136, v150);
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v139, v397), v142, v396), v144, v395), vmaxq_f16(vmaxq_f16(v139, v142), v144), v394), (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          uint32x4_t v155 = vmovl_u16(*(uint16x4_t *)v154.i8);
          float16x8_t v156 = (float16x8_t)vmovl_high_u16(v154);
          uint64_t v157 = v156.u32[0];
          v156.i16[0] = *(_WORD *)&v39[2 * v155.u32[0]];
          float v158 = (__int16 *)&v39[2 * v156.u32[1]];
          float v159 = (__int16 *)&v39[2 * v156.u32[2]];
          v156.i16[1] = *(_WORD *)&v39[2 * v155.u32[1]];
          v156.i16[2] = *(_WORD *)&v39[2 * v155.u32[2]];
          v156.i16[3] = *(_WORD *)&v39[2 * v155.u32[3]];
          v156.i16[4] = *(_WORD *)&v39[2 * v157];
          v156.i16[5] = *v158;
          float v160 = (__int16 *)&v39[2 * v156.u32[3]];
          v156.i16[6] = *v159;
          v156.i16[7] = *v160;
          float16x8_t v161 = vmulq_f16(v139, v156);
          float16x8_t v162 = vmulq_f16(v142, v156);
          float16x8_t v163 = vmulq_f16(v144, v156);
          *(long long *)((char *)&v118 - 14) = (__int128)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v151, v393), v152, v392), v153, v391);
          float16x8_t v164 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v151, v390), v152, v389), v153, v388);
          float16x8_t v165 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v153, v383), v152, v386), v151, v387);
          float16x8_t v166 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v161, v393), v162, v392), v163, v391);
          float16x8_t v167 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v161, v390), v162, v389), v163, v388);
          float16x8_t v168 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v163, v383), v162, v386), v161, v387);
          uint16x8_t v169 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(*(float16x8_t *)((char *)&v118 - 14), (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          uint32x4_t v170 = vmovl_high_u16(v169);
          uint32x4_t v171 = vmovl_u16(*(uint16x4_t *)v169.i8);
          v172.i16[0] = *(_WORD *)&v49[2 * v171.u32[0]];
          v172.i16[1] = *(_WORD *)&v49[2 * v171.u32[1]];
          v172.i16[2] = *(_WORD *)&v49[2 * v171.u32[2]];
          v172.i16[3] = *(_WORD *)&v49[2 * v171.u32[3]];
          v172.i16[4] = *(_WORD *)&v49[2 * v170.u32[0]];
          v172.i16[5] = *(_WORD *)&v49[2 * v170.u32[1]];
          v172.i16[6] = *(_WORD *)&v49[2 * v170.u32[2]];
          v172.i16[7] = *(_WORD *)&v49[2 * v170.u32[3]];
          uint16x8_t v173 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v164, (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          uint32x4_t v174 = vmovl_high_u16(v173);
          uint32x4_t v175 = vmovl_u16(*(uint16x4_t *)v173.i8);
          v176.i16[0] = *(_WORD *)&v49[2 * v175.u32[0]];
          v176.i16[1] = *(_WORD *)&v49[2 * v175.u32[1]];
          v176.i16[2] = *(_WORD *)&v49[2 * v175.u32[2]];
          v176.i16[3] = *(_WORD *)&v49[2 * v175.u32[3]];
          v176.i16[4] = *(_WORD *)&v49[2 * v174.u32[0]];
          v176.i16[5] = *(_WORD *)&v49[2 * v174.u32[1]];
          v176.i16[6] = *(_WORD *)&v49[2 * v174.u32[2]];
          v176.i16[7] = *(_WORD *)&v49[2 * v174.u32[3]];
          uint16x8_t v177 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v165, (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          uint32x4_t v178 = vmovl_high_u16(v177);
          uint32x4_t v179 = vmovl_u16(*(uint16x4_t *)v177.i8);
          *(void *)&long long v145 = v179.u32[2];
          *((void *)&v145 + 1) = v179.u32[3];
          long long v180 = v145;
          *(void *)&long long v145 = v178.u32[0];
          v188.i16[0] = *(_WORD *)&v49[2 * v179.u32[0]];
          uint64_t v181 = v178.u32[1];
          uint64_t v182 = v178.u32[3];
          uint64_t v183 = v178.u32[2];
          uint16x8_t v184 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v166, (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          uint32x4_t v185 = vmovl_u16(*(uint16x4_t *)v184.i8);
          uint64_t v186 = v185.u32[1];
          uint64_t v187 = v185.u32[0];
          v188.i16[1] = *(_WORD *)&v49[2 * v179.u32[1]];
          v188.i16[2] = *(_WORD *)&v49[2 * v180];
          v188.i16[3] = *(_WORD *)&v49[2 * *((void *)&v180 + 1)];
          v188.i16[4] = *(_WORD *)&v49[2 * v145];
          v188.i16[5] = *(_WORD *)&v49[2 * v181];
          v188.i16[6] = *(_WORD *)&v49[2 * v183];
          v188.i16[7] = *(_WORD *)&v49[2 * v182];
          uint32x4_t v189 = vmovl_high_u16(v184);
          uint64_t v190 = v185.u32[3];
          uint64_t v191 = v185.u32[2];
          uint64_t v192 = v189.u32[1];
          uint64_t v193 = v189.u32[0];
          uint64_t v194 = v189.u32[3];
          uint64_t v195 = v189.u32[2];
          uint16x8_t v196 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v167, (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          uint32x4_t v197 = vmovl_u16(*(uint16x4_t *)v196.i8);
          v198.i16[0] = *(_WORD *)&v49[2 * v187];
          v198.i16[1] = *(_WORD *)&v49[2 * v186];
          v198.i16[2] = *(_WORD *)&v49[2 * v191];
          v198.i16[3] = *(_WORD *)&v49[2 * v190];
          v198.i16[4] = *(_WORD *)&v49[2 * v193];
          v198.i16[5] = *(_WORD *)&v49[2 * v192];
          v198.i16[6] = *(_WORD *)&v49[2 * v195];
          v198.i16[7] = *(_WORD *)&v49[2 * v194];
          uint32x4_t v199 = vmovl_high_u16(v196);
          *((void *)&v145 + 1) = v199.u32[3];
          uint64_t v200 = v199.u32[1];
          uint64_t v201 = v199.u32[0];
          uint64_t v202 = v199.u32[2];
          uint16x8_t v203 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v168, (float16x8_t)*(unint64_t *)((char *)&v118 + 2)), v119));
          uint32x4_t v204 = vmovl_u16(*(uint16x4_t *)v203.i8);
          v205.i16[0] = *(_WORD *)&v49[2 * v197.u32[0]];
          v205.i16[1] = *(_WORD *)&v49[2 * v197.u32[1]];
          v205.i16[2] = *(_WORD *)&v49[2 * v197.u32[2]];
          v205.i16[3] = *(_WORD *)&v49[2 * v197.u32[3]];
          v205.i16[4] = *(_WORD *)&v49[2 * v201];
          v205.i16[5] = *(_WORD *)&v49[2 * v200];
          v205.i16[6] = *(_WORD *)&v49[2 * v202];
          v205.i16[7] = *(_WORD *)&v49[2 * *((void *)&v145 + 1)];
          uint32x4_t v206 = vmovl_high_u16(v203);
          v207.i16[0] = *(_WORD *)&v49[2 * v204.u32[0]];
          v207.i16[1] = *(_WORD *)&v49[2 * v204.u32[1]];
          v207.i16[2] = *(_WORD *)&v49[2 * v204.u32[2]];
          v207.i16[3] = *(_WORD *)&v49[2 * v204.u32[3]];
          v207.i16[4] = *(_WORD *)&v49[2 * v206.u32[0]];
          v207.i16[5] = *(_WORD *)&v49[2 * v206.u32[1]];
          v207.i16[6] = *(_WORD *)&v49[2 * v206.u32[2]];
          v207.i16[7] = *(_WORD *)&v49[2 * v206.u32[3]];
          *(uint16x8_t *)result = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v57, v172, v432), v176, v431), v188, v430), v57), v59)), v384);
          result += 16;
          if (v67)
          {
            v435.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v429, v172, v427), v176, v425), v188, v424), v428), v426), v428), v426)), v384);
            v435.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v429, v172, v423), v176, v422), v188, v421)), v384);
            vst2q_s16(v67, v435);
            v67 += 16;
          }
          *v95++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v57, v198, v432), v205, v431), v207, v430), v57), v59)), v384);
          if (v96)
          {
            v434.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v429, v198, v427), v205, v425), v207, v424), v428), v426), v428), v426)), v384);
            v434.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v429, v198, v423), v205, v422), v207, v421)), v384);
            vst2q_s16(v96, v434);
            v96 += 16;
          }
          v97 += 8;
        }
        while (v97 < (int)v9 - 7);
        unint64_t v208 = v9 & 0xFFFFFFF8;
        uint64_t v21 = v368;
        _S12 = v365;
        _S5 = v366;
        _S11 = v367;
        _S4 = v363;
        _S15 = v364;
        float v41 = v420;
      }
      while (v9 > v208)
      {
        float v209 = (float)(v98->u16[1] >> v72) - v41;
        float v210 = *((float *)&v419 + 1) * v209;
        float v211 = _S21 * (float)((float)(v71->u16[0] >> v72) - v40);
        float v212 = (float)(*((float *)&v419 + 1) * v209) + v211;
        float v213 = 8191.0;
        if (v212 <= 8191.0)
        {
          float v213 = (float)(*((float *)&v419 + 1) * v209) + v211;
          if (v212 < 0.0) {
            float v213 = 0.0;
          }
        }
        float v214 = (float)(v98->u16[0] >> v72) - v41;
        float v215 = (float)(*((float *)&v418 + 1) * v209) + (float)(v214 * *(float *)&v418);
        float v216 = 8191.0;
        if ((float)(v211 + v215) <= 8191.0)
        {
          float v216 = v211 + v215;
          if ((float)(v211 + v215) < 0.0) {
            float v216 = 0.0;
          }
        }
        float v217 = *(float *)&v419 * v214;
        float v218 = v217 + v211;
        BOOL v219 = (float)(v217 + v211) <= 8191.0;
        float v220 = 8191.0;
        if (v219)
        {
          float v220 = v218;
          if (v218 < 0.0) {
            float v220 = 0.0;
          }
        }
        float v221 = _S21 * (float)((float)(v71->u16[1] >> v72) - v40);
        float v222 = 8191.0;
        if ((float)(v210 + v221) <= 8191.0)
        {
          float v222 = v210 + v221;
          if ((float)(v210 + v221) < 0.0) {
            float v222 = 0.0;
          }
        }
        float v223 = 8191.0;
        if ((float)(v215 + v221) <= 8191.0)
        {
          float v223 = v215 + v221;
          if ((float)(v215 + v221) < 0.0) {
            float v223 = 0.0;
          }
        }
        float v224 = v217 + v221;
        float v225 = 8191.0;
        if (v224 <= 8191.0)
        {
          float v225 = v224;
          if (v224 < 0.0) {
            float v225 = 0.0;
          }
        }
        float v226 = _S21 * (float)((float)(v94->u16[0] >> v72) - v40);
        float v227 = 8191.0;
        if ((float)(v210 + v226) <= 8191.0)
        {
          float v227 = v210 + v226;
          if ((float)(v210 + v226) < 0.0) {
            float v227 = 0.0;
          }
        }
        float v228 = 8191.0;
        if ((float)(v215 + v226) <= 8191.0)
        {
          float v228 = v215 + v226;
          if ((float)(v215 + v226) < 0.0) {
            float v228 = 0.0;
          }
        }
        float v229 = v217 + v226;
        float v230 = 8191.0;
        if (v229 <= 8191.0)
        {
          float v230 = v229;
          if (v229 < 0.0) {
            float v230 = 0.0;
          }
        }
        float v231 = _S21 * (float)((float)(v94->u16[1] >> v72) - v40);
        float v232 = v210 + v231;
        float v233 = 8191.0;
        if (v232 <= 8191.0)
        {
          float v233 = v232;
          if (v232 < 0.0) {
            float v233 = 0.0;
          }
        }
        float v234 = v215 + v231;
        BOOL v219 = (float)(v215 + v231) <= 8191.0;
        float v235 = 8191.0;
        if (v219)
        {
          float v235 = v234;
          if (v234 < 0.0) {
            float v235 = 0.0;
          }
        }
        float v236 = _S4;
        float v237 = v217 + v231;
        float v238 = 8191.0;
        if (v237 <= 8191.0)
        {
          float v238 = v237;
          if (v237 < 0.0) {
            float v238 = 0.0;
          }
        }
        _H0 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H1 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v216, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H23 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v222, 0.0), 8191.0))];
        _H22 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        _H9 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0))];
        _H30 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v227, 0.0), 8191.0))];
        _H14 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0))];
        _H16 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v230, 0.0), 8191.0))];
        _H26 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v233, 0.0), 8191.0))];
        _H27 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v235, 0.0), 8191.0))];
        _H28 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v238, 0.0), 8191.0))];
        float v254 = (float)((float)((float)(v400 * _S1) + (float)(v401 * _S0)) + (float)(v399 * _S2))
             + (float)(v398 * fmaxf(_S0, fmaxf(_S1, _S2)));
        float v255 = 8191.0;
        if (v254 <= 8191.0)
        {
          float v255 = v254;
          if (v254 < 0.0) {
            float v255 = 0.0;
          }
        }
        __asm
        {
          FCVT            S7, H23
          FCVT            S20, H22
          FCVT            S22, H9
        }
        _H29 = *(_WORD *)&v39[2 * llroundf(v255)];
        float v260 = (float)((float)((float)(v400 * _S20) + (float)(v401 * _S7)) + (float)(v399 * _S22))
             + (float)(v398 * fmaxf(_S7, fmaxf(_S20, _S22)));
        float v261 = 8191.0;
        if (v260 <= 8191.0)
        {
          float v261 = v260;
          if (v260 < 0.0) {
            float v261 = 0.0;
          }
        }
        __asm
        {
          FCVT            S30, H30
          FCVT            S13, H14
          FCVT            S16, H16
        }
        _H23 = *(_WORD *)&v39[2 * llroundf(v261)];
        float v266 = (float)((float)((float)(v400 * _S13) + (float)(v401 * _S30)) + (float)(v399 * _S16))
             + (float)(v398 * fmaxf(_S30, fmaxf(_S13, _S16)));
        float v267 = 8191.0;
        if (v266 <= 8191.0)
        {
          float v267 = v266;
          if (v266 < 0.0) {
            float v267 = 0.0;
          }
        }
        float v268 = _S12;
        float v269 = _S11;
        __asm
        {
          FCVT            S26, H26
          FCVT            S27, H27
          FCVT            S28, H28
        }
        _H9 = *(_WORD *)&v39[2 * llroundf(v267)];
        float v274 = (float)((float)((float)(v400 * _S27) + (float)(v401 * _S26)) + (float)(v399 * _S28))
             + (float)(v398 * fmaxf(_S26, fmaxf(_S27, _S28)));
        float v275 = 8191.0;
        if (v274 <= 8191.0)
        {
          float v275 = v274;
          if (v274 < 0.0) {
            float v275 = 0.0;
          }
        }
        __asm { FCVT            S29, H29 }
        float v277 = _S0 * _S29;
        float v278 = _S1 * _S29;
        float v279 = _S2 * _S29;
        __asm { FCVT            S23, H23 }
        _S7 = _S7 * _S23;
        float v282 = _S20 * _S23;
        float v283 = _S22 * _S23;
        __asm { FCVT            S23, H9 }
        float v285 = _S30 * _S23;
        float v286 = _S13 * _S23;
        float v287 = _S16 * _S23;
        _H6 = *(_WORD *)&v39[2 * llroundf(v275)];
        __asm { FCVT            S6, H6 }
        float v290 = _S26 * _S6;
        float v291 = _S27 * _S6;
        float v292 = _S28 * _S6;
        float v293 = (float)((float)(v409 * v278) + (float)(v277 * v410)) + (float)(v279 * v408);
        float v294 = (float)((float)(v406 * v278) + (float)(v277 * v407)) + (float)(v279 * v405);
        _S0 = (float)((float)(v403 * v278) + (float)(v277 * v404)) + (float)(v279 * v417);
        float v296 = (float)((float)(v409 * v282) + (float)(_S7 * v410)) + (float)(v283 * v408);
        float v297 = (float)((float)(v406 * v282) + (float)(_S7 * v407)) + (float)(v283 * v405);
        float v298 = (float)((float)(v403 * v282) + (float)(_S7 * v404)) + (float)(v283 * v417);
        float v299 = (float)((float)(v409 * v286) + (float)(v285 * v410)) + (float)(v287 * v408);
        float v300 = (float)((float)(v406 * v286) + (float)(v285 * v407)) + (float)(v287 * v405);
        float v301 = (float)((float)(v403 * v286) + (float)(v285 * v404)) + (float)(v287 * v417);
        float v302 = (float)((float)(v409 * v291) + (float)(v290 * v410)) + (float)(v292 * v408);
        float v303 = (float)((float)(v406 * v291) + (float)(v290 * v407)) + (float)(v292 * v405);
        float v304 = (float)((float)(v403 * v291) + (float)(v290 * v404)) + (float)(v292 * v417);
        LOWORD(_S7) = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v293, 0.0), 8191.0))];
        __asm { FCVT            S28, H7 }
        LOWORD(_S7) = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v294, 0.0), 8191.0))];
        __asm { FCVT            S29, H7 }
        LOWORD(_S0) = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm { FCVT            S30, H0 }
        _H7 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v296, 0.0), 8191.0))];
        _H22 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v297, 0.0), 8191.0))];
        _H27 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v298, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v299, 0.0), 8191.0))];
        _H2 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v300, 0.0), 8191.0))];
        _H13 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v301, 0.0), 8191.0))];
        _H20 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v302, 0.0), 8191.0))];
        _H26 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v303, 0.0), 8191.0))];
        _H0 = *(_WORD *)&v49[2 * llroundf(fminf(fmaxf(v304, 0.0), 8191.0))];
        _S11 = v269;
        float v317 = v269 * _S29;
        _S4 = v236;
        float v318 = (float)((float)(v317 + (float)(v236 * _S28)) + (float)(_S5 * _S30)) + v402;
        float v319 = v43;
        if (v318 <= v43)
        {
          float v319 = v318;
          if (v318 < v402) {
            float v319 = v402;
          }
        }
        *(_WORD *)result = llroundf(v319) << v73;
        _S12 = v268;
        if (v67)
        {
          float v321 = v375;
          float v320 = v376;
          float v322 = (float)((float)(v375 + (float)(_S28 * _S15)) + (float)(_S29 * v268)) + (float)(_S30 * _S8);
          float v323 = v45;
          if (v322 <= v45)
          {
            float v323 = (float)((float)(v375 + (float)(_S28 * _S15)) + (float)(_S29 * v268)) + (float)(_S30 * _S8);
            if (v322 < v376) {
              float v323 = v376;
            }
          }
          float v324 = (float)(v375 + (float)(_S28 * v433)) + (float)(_S29 * v378);
          float v325 = v378;
          float v326 = v324 + (float)(_S30 * v377);
          float v327 = v377;
          *char v67 = llroundf(v323) << v73;
          float v328 = v45;
          _S21 = v381;
          float v40 = v382;
          float16x8_t v57 = v380;
          if (v326 <= v45)
          {
            float v328 = v326;
            if (v326 < v376) {
              float v328 = v376;
            }
          }
          v67[1] = llroundf(v328) << v73;
          v67 += 2;
          float v41 = v420;
          float16x8_t v59 = v379;
        }
        else
        {
          _S21 = v381;
          float v40 = v382;
          float v41 = v420;
          float v321 = v375;
          float v320 = v376;
          float16x8_t v59 = v379;
          float16x8_t v57 = v380;
          float v327 = v377;
          float v325 = v378;
        }
        __asm
        {
          FCVT            S7, H7
          FCVT            S16, H22
          FCVT            S22, H27
        }
        float v332 = (float)((float)((float)(_S11 * _S16) + (float)(_S4 * _S7)) + (float)(_S5 * _S22)) + v402;
        float v333 = v43;
        if (v332 <= v43)
        {
          float v333 = (float)((float)((float)(_S11 * _S16) + (float)(_S4 * _S7)) + (float)(_S5 * _S22)) + v402;
          if (v332 < v402) {
            float v333 = v402;
          }
        }
        *((_WORD *)result + 1) = llroundf(v333) << v73;
        if (v67)
        {
          float v334 = (float)((float)(v321 + (float)(_S7 * _S15)) + (float)(_S16 * _S12)) + (float)(_S22 * _S8);
          float v335 = v45;
          if (v334 <= v45)
          {
            float v335 = (float)((float)(v321 + (float)(_S7 * _S15)) + (float)(_S16 * _S12)) + (float)(_S22 * _S8);
            if (v334 < v320) {
              float v335 = v320;
            }
          }
          float v336 = (float)((float)(v321 + (float)(_S7 * v433)) + (float)(_S16 * v325)) + (float)(_S22 * v327);
          *char v67 = llroundf(v335) << v73;
          float v337 = v45;
          if (v336 <= v45)
          {
            float v337 = v336;
            if (v336 < v320) {
              float v337 = v320;
            }
          }
          v67[1] = llroundf(v337) << v73;
          v67 += 2;
        }
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H2
          FCVT            S7, H13
        }
        float v341 = (float)((float)((float)(_S11 * _S2) + (float)(_S4 * _S1)) + (float)(_S5 * _S7)) + v402;
        float v342 = v43;
        if (v341 <= v43)
        {
          float v342 = (float)((float)((float)(_S11 * _S2) + (float)(_S4 * _S1)) + (float)(_S5 * _S7)) + v402;
          if (v341 < v402) {
            float v342 = v402;
          }
        }
        v95->i16[0] = llroundf(v342) << v73;
        if (v96)
        {
          float v343 = (float)((float)(v321 + (float)(_S1 * _S15)) + (float)(_S2 * _S12)) + (float)(_S7 * _S8);
          float v344 = v45;
          if (v343 <= v45)
          {
            float v344 = (float)((float)(v321 + (float)(_S1 * _S15)) + (float)(_S2 * _S12)) + (float)(_S7 * _S8);
            if (v343 < v320) {
              float v344 = v320;
            }
          }
          float v345 = (float)((float)(v321 + (float)(_S1 * v433)) + (float)(_S2 * v325)) + (float)(_S7 * v327);
          *float v96 = llroundf(v344) << v73;
          float v346 = v45;
          if (v345 <= v45)
          {
            float v346 = v345;
            if (v345 < v320) {
              float v346 = v320;
            }
          }
          v96[1] = llroundf(v346) << v73;
          v96 += 2;
        }
        __asm
        {
          FCVT            S1, H20
          FCVT            S2, H26
          FCVT            S0, H0
        }
        float v350 = (float)((float)((float)(_S11 * _S2) + (float)(_S4 * _S1)) + (float)(_S5 * _S0)) + v402;
        float v351 = v43;
        if (v350 <= v43)
        {
          float v351 = (float)((float)((float)(_S11 * _S2) + (float)(_S4 * _S1)) + (float)(_S5 * _S0)) + v402;
          if (v350 < v402) {
            float v351 = v402;
          }
        }
        v95->i16[1] = llroundf(v351) << v73;
        if (v96)
        {
          float v352 = (float)((float)(v321 + (float)(_S1 * _S15)) + (float)(_S2 * _S12)) + (float)(_S0 * _S8);
          float v353 = v45;
          if (v352 <= v45)
          {
            float v353 = (float)((float)(v321 + (float)(_S1 * _S15)) + (float)(_S2 * _S12)) + (float)(_S0 * _S8);
            if (v352 < v320) {
              float v353 = v320;
            }
          }
          float v354 = (float)((float)(v321 + (float)(_S1 * v433)) + (float)(_S2 * v325)) + (float)(_S0 * v327);
          *float v96 = llroundf(v353) << v73;
          float v355 = v45;
          if (v354 <= v45)
          {
            float v355 = v354;
            if (v354 < v320) {
              float v355 = v320;
            }
          }
          v96[1] = llroundf(v355) << v73;
          v96 += 2;
        }
        v208 += 2;
        float v98 = (uint16x8_t *)((char *)v98 + 4);
        size_t v71 = (uint16x8_t *)((char *)v71 + 4);
        float v94 = (uint16x8_t *)((char *)v94 + 4);
        result += 4;
        float v95 = (uint16x8_t *)((char *)v95 + 4);
      }
      uint64_t v20 = v371;
      size_t v71 = (uint16x8_t *)&v372[v371];
      v70 += v21;
      uint64_t v23 = v369;
      uint64_t v22 = v370;
      result = &v373[v370];
      char v67 = (__int16 *)&v374[v369];
      v8 += 2;
    }
    while (v12 > v8);
    if (v362 && v361)
    {
      size_t v356 = 2 * v9;
      short float v357 = __src;
      do
      {
        result = (unsigned __int8 *)memcpy(v24, v357, v356);
        v357 += v359;
        v24 += v360;
        --v12;
      }
      while (v12);
    }
    else if (v361)
    {
      do
      {
        if (v9) {
          result = (unsigned __int8 *)memset(v24, 255, 2 * v9);
        }
        v24 += v360;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = 2 * *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 36);
    uint64_t v11 = *(void *)(result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = *((void *)result + 14);
    uint64_t v14 = (uint64_t *)*((void *)result + 16);
    uint64_t v15 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v5);
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (void *)*((void *)result + 7);
    uint64_t v18 = (uint64_t *)*((void *)result + 8);
    uint64_t v19 = (uint64_t *)*((void *)result + 17);
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    uint64_t v22 = v18[2];
    uint64_t v216 = v17[2];
    uint64_t v23 = (char *)(v216 + v22 * v11 + 2 * v10);
    uint64_t v24 = *v19;
    uint64_t v25 = v19[1];
    uint64_t v26 = v19[2];
    uint64_t v215 = v14[2];
    float32x2_t v27 = (char *)(v215 + v26 * v15 + 2 * v13);
    float v28 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    float v29 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    float v30 = (float)LODWORD(a4);
    float v31 = v28 * *(float *)v16;
    float v241 = v28 * *(float *)(v16 + 16);
    float v242 = v28 * *(float *)(v16 + 8);
    float v32 = v28 * *(float *)(v16 + 20);
    *(float *)&unsigned int v33 = v28 * *(float *)(v16 + 28);
    float v239 = *(float *)&v33;
    float v240 = v32;
    LOWORD(v33) = *(_WORD *)(v16 + 144);
    float v34 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v16 + 146);
    float v35 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v16 + 148);
    float v36 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v16 + 150);
    float v37 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v16 + 152);
    float v38 = (float)v33;
    float v39 = *(float *)(v16 + 44);
    float v40 = *(float *)(v16 + 48);
    float v41 = *(float *)(v16 + 52);
    float v237 = *(float *)(v16 + 76);
    float v238 = *(float *)(v16 + 72);
    float v235 = *(float *)(v16 + 84);
    float v236 = *(float *)(v16 + 80);
    float v234 = *(float *)(v16 + 88);
    float v233 = *(float *)(v16 + 92);
    float v231 = *(float *)(v16 + 96);
    float v230 = *(float *)(v16 + 100);
    float v228 = *(float *)(v16 + 104);
    uint64_t v42 = v16 + 164;
    uint64_t v43 = v16 + 16548;
    uint64_t v44 = v16 + 32932;
    uint64_t v46 = *v14;
    uint64_t v45 = v14[1];
    result = (unsigned __int8 *)(v46 + *v19 * v15 + 2 * v13);
    if (v45) {
      float v47 = (char *)(v45 + v25 * v15 + 2 * v13);
    }
    else {
      float v47 = 0;
    }
    unsigned int v48 = *(unsigned __int8 *)(v16 + 132);
    if (v48 >= 0x11) {
      char v49 = 0;
    }
    else {
      char v49 = 16 - v48;
    }
    unsigned int v50 = *(unsigned __int8 *)(v16 + 124);
    char v51 = 16 - v50;
    uint64_t v52 = v17[1];
    float v53 = (char *)(*v17 + v20 * v11 + 2 * v10);
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    uint64_t v54 = v52 + v21 * (v11 / 2) + 2 * v10;
    char v55 = v51;
    char v56 = v49;
    float v57 = *(float *)(v16 + 108);
    float v225 = *(float *)(v16 + 116);
    float v226 = *(float *)(v16 + 112);
    float v223 = (float)LODWORD(a4);
    float v224 = *(float *)(v16 + 120);
    float v221 = *(float *)(v16 + 56);
    float v222 = v29;
    float v219 = *(float *)(v16 + 64);
    float v220 = *(float *)(v16 + 60);
    float v217 = v35;
    float v218 = *(float *)(v16 + 68);
    float v232 = v37;
    float v229 = *(float *)(v16 + 36);
    float v227 = *(float *)(v16 + 40);
    do
    {
      int16x8_t v58 = &v53[v20];
      float16x8_t v59 = &v47[v25];
      float16x8_t v60 = &result[v24];
      if (v9)
      {
        unint64_t v61 = 0;
        unsigned __int8 v62 = &v53[v20];
        unsigned int v63 = &v47[v25];
        unsigned __int8 v64 = &result[v24];
        do
        {
          uint64_t v65 = (unsigned __int16 *)(v54 + 2 * v61);
          float v66 = (float)(v65[1] >> v55) - v30;
          float v67 = v242 * v66;
          float v68 = v31 * (float)((float)(*(unsigned __int16 *)v53 >> v55) - v29);
          float v69 = (float)(v242 * v66) + v68;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = (float)(v242 * v66) + v68;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = (float)(*v65 >> v55) - v30;
          float v72 = (float)(v240 * v66) + (float)(v71 * v241);
          float v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            float v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v239 * v71;
          float v75 = (float)(v239 * v71) + v68;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v31 * (float)((float)(*((unsigned __int16 *)v53 + 1) >> v55) - v29);
          float v78 = 8191.0;
          if ((float)(v67 + v77) <= 8191.0)
          {
            float v78 = v67 + v77;
            if ((float)(v67 + v77) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            float v79 = v72 + v77;
            if ((float)(v72 + v77) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v74 + v77;
          BOOL v81 = (float)(v74 + v77) <= 8191.0;
          float v82 = 8191.0;
          if (v81)
          {
            float v82 = v80;
            if (v80 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v31 * (float)((float)(*(unsigned __int16 *)v62 >> v55) - v29);
          float v84 = 8191.0;
          if ((float)(v67 + v83) <= 8191.0)
          {
            float v84 = v67 + v83;
            if ((float)(v67 + v83) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = 8191.0;
          if ((float)(v72 + v83) <= 8191.0)
          {
            float v85 = v72 + v83;
            if ((float)(v72 + v83) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v74 + v83;
          BOOL v81 = (float)(v74 + v83) <= 8191.0;
          float v87 = 8191.0;
          if (v81)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v31 * (float)((float)(*((unsigned __int16 *)v62 + 1) >> v55) - v29);
          float v89 = v67 + v88;
          BOOL v81 = (float)(v67 + v88) <= 8191.0;
          float v90 = 8191.0;
          if (v81)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v72 + v88;
          BOOL v81 = (float)(v72 + v88) <= 8191.0;
          float v92 = 8191.0;
          if (v81)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v74 + v88;
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S9, H0 }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S24, H0 }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S25, H0 }
          _H27 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          float v114 = (float)((float)((float)(v226 * _S24) + (float)(v57 * _S9)) + (float)(v225 * _S25))
               + (float)(v224 * fmaxf(_S9, fmaxf(_S24, _S25)));
          float v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            float v115 = v114;
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          __asm
          {
            FCVT            S1, H27
            FCVT            S3, H19
            FCVT            S19, H8
          }
          _H27 = *(_WORD *)(v43 + 2 * llroundf(v115));
          float v120 = (float)((float)((float)(v226 * _S3) + (float)(v57 * _S1)) + (float)(v225 * _S19))
               + (float)(v224 * fmaxf(_S1, fmaxf(_S3, _S19)));
          float v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            float v121 = v120;
            if (v120 < 0.0) {
              float v121 = 0.0;
            }
          }
          __asm
          {
            FCVT            S28, H29
            FCVT            S23, H23
            FCVT            S29, H30
          }
          _H30 = *(_WORD *)(v43 + 2 * llroundf(v121));
          float v126 = (float)((float)((float)(v226 * _S23) + (float)(v57 * _S28)) + (float)(v225 * _S29))
               + (float)(v224 * fmaxf(_S28, fmaxf(_S23, _S29)));
          float v127 = 8191.0;
          if (v126 <= 8191.0)
          {
            float v127 = v126;
            if (v126 < 0.0) {
              float v127 = 0.0;
            }
          }
          float v128 = v41;
          __asm
          {
            FCVT            S21, H21
            FCVT            S22, H22
            FCVT            S26, H26
          }
          _H31 = *(_WORD *)(v43 + 2 * llroundf(v127));
          float v133 = (float)((float)((float)(v226 * _S22) + (float)(v57 * _S21)) + (float)(v225 * _S26))
               + (float)(v224 * fmaxf(_S21, fmaxf(_S22, _S26)));
          float v134 = 8191.0;
          if (v133 <= 8191.0)
          {
            float v134 = v133;
            if (v133 < 0.0) {
              float v134 = 0.0;
            }
          }
          __asm { FCVT            S27, H27 }
          float v136 = _S9 * _S27;
          float v137 = _S24 * _S27;
          float v138 = _S25 * _S27;
          __asm { FCVT            S27, H30 }
          float v140 = _S1 * _S27;
          float v141 = _S3 * _S27;
          float v142 = _S19 * _S27;
          __asm { FCVT            S27, H31 }
          float v144 = _S28 * _S27;
          float v145 = _S23 * _S27;
          float v146 = _S29 * _S27;
          _H0 = *(_WORD *)(v43 + 2 * llroundf(v134));
          __asm { FCVT            S0, H0 }
          float v149 = _S21 * _S0;
          float v150 = _S22 * _S0;
          _S0 = _S26 * _S0;
          float v152 = (float)((float)(v237 * v137) + (float)(v136 * v238)) + (float)(v138 * v236);
          float v153 = (float)((float)(v234 * v137) + (float)(v136 * v235)) + (float)(v138 * v233);
          float v154 = (float)((float)(v230 * v137) + (float)(v136 * v231)) + (float)(v138 * v228);
          float v155 = (float)((float)(v237 * v141) + (float)(v140 * v238)) + (float)(v142 * v236);
          float v156 = (float)((float)(v234 * v141) + (float)(v140 * v235)) + (float)(v142 * v233);
          float v157 = (float)((float)(v230 * v141) + (float)(v140 * v231)) + (float)(v142 * v228);
          float v158 = (float)((float)(v237 * v145) + (float)(v144 * v238)) + (float)(v146 * v236);
          float v159 = (float)((float)(v234 * v145) + (float)(v144 * v235)) + (float)(v146 * v233);
          float v160 = (float)((float)(v230 * v145) + (float)(v144 * v231)) + (float)(v146 * v228);
          float v161 = (float)((float)(v237 * v150) + (float)(v149 * v238)) + (float)(_S0 * v236);
          float v162 = (float)((float)(v234 * v150) + (float)(v149 * v235)) + (float)(_S0 * v233);
          float v163 = (float)((float)(v230 * v150) + (float)(v149 * v231)) + (float)(_S0 * v228);
          LOWORD(_S0) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __asm { FCVT            S21, H0 }
          LOWORD(_S0) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          __asm { FCVT            S22, H0 }
          LOWORD(_S0) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          __asm { FCVT            S29, H0 }
          _H1 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          _H0 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          float v176 = (float)((float)((float)(v227 * _S22) + (float)(v229 * _S21)) + (float)(v39 * _S29)) + v34;
          float v177 = v36;
          if (v176 <= v36)
          {
            float v177 = (float)((float)((float)(v227 * _S22) + (float)(v229 * _S21)) + (float)(v39 * _S29)) + v34;
            if (v176 < v34) {
              float v177 = v34;
            }
          }
          *(_WORD *)result = llroundf(v177) << v56;
          float v41 = v128;
          if (v47)
          {
            float v178 = v217;
            float v179 = v221;
            float v180 = (float)((float)(v217 + (float)(_S21 * v40)) + (float)(_S22 * v41)) + (float)(_S29 * v221);
            float v181 = v38;
            if (v180 <= v38)
            {
              float v181 = (float)((float)(v217 + (float)(_S21 * v40)) + (float)(_S22 * v41)) + (float)(_S29 * v221);
              if (v180 < v232) {
                float v181 = v232;
              }
            }
            float v183 = v219;
            float v182 = v220;
            float v184 = (float)((float)(v217 + (float)(_S21 * v220)) + (float)(_S22 * v219)) + (float)(_S29 * v218);
            float v185 = v218;
            *(_WORD *)float v47 = llroundf(v181) << v56;
            float v186 = v38;
            float v29 = v222;
            if (v184 <= v38)
            {
              float v186 = v184;
              if (v184 < v232) {
                float v186 = v232;
              }
            }
            *((_WORD *)v47 + 1) = llroundf(v186) << v56;
            v47 += 4;
          }
          else
          {
            float v179 = v221;
            float v29 = v222;
            float v178 = v217;
            float v185 = v218;
            float v183 = v219;
            float v182 = v220;
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S3, H3
            FCVT            S19, H19
          }
          float v190 = (float)((float)((float)(v227 * _S3) + (float)(v229 * _S1)) + (float)(v39 * _S19)) + v34;
          float v191 = v36;
          if (v190 <= v36)
          {
            float v191 = (float)((float)((float)(v227 * _S3) + (float)(v229 * _S1)) + (float)(v39 * _S19)) + v34;
            if (v190 < v34) {
              float v191 = v34;
            }
          }
          *((_WORD *)result + 1) = llroundf(v191) << v56;
          if (v47)
          {
            float v192 = (float)((float)(v178 + (float)(_S1 * v40)) + (float)(_S3 * v41)) + (float)(_S19 * v179);
            float v193 = v38;
            if (v192 <= v38)
            {
              float v193 = (float)((float)(v178 + (float)(_S1 * v40)) + (float)(_S3 * v41)) + (float)(_S19 * v179);
              if (v192 < v232) {
                float v193 = v232;
              }
            }
            float v194 = (float)((float)(v178 + (float)(_S1 * v182)) + (float)(_S3 * v183)) + (float)(_S19 * v185);
            *(_WORD *)float v47 = llroundf(v193) << v56;
            float v195 = v38;
            if (v194 <= v38)
            {
              float v195 = v194;
              if (v194 < v232) {
                float v195 = v232;
              }
            }
            *((_WORD *)v47 + 1) = llroundf(v195) << v56;
            v47 += 4;
          }
          __asm
          {
            FCVT            S1, H26
            FCVT            S3, H27
            FCVT            S19, H28
          }
          float v199 = (float)((float)((float)(v227 * _S3) + (float)(v229 * _S1)) + (float)(v39 * _S19)) + v34;
          float v200 = v36;
          if (v199 <= v36)
          {
            float v200 = (float)((float)((float)(v227 * _S3) + (float)(v229 * _S1)) + (float)(v39 * _S19)) + v34;
            if (v199 < v34) {
              float v200 = v34;
            }
          }
          *(_WORD *)unsigned __int8 v64 = llroundf(v200) << v56;
          if (v63)
          {
            float v201 = (float)((float)(v178 + (float)(_S1 * v40)) + (float)(_S3 * v41)) + (float)(_S19 * v179);
            float v202 = v38;
            if (v201 <= v38)
            {
              float v202 = (float)((float)(v178 + (float)(_S1 * v40)) + (float)(_S3 * v41)) + (float)(_S19 * v179);
              if (v201 < v232) {
                float v202 = v232;
              }
            }
            float v203 = (float)((float)(v178 + (float)(_S1 * v182)) + (float)(_S3 * v183)) + (float)(_S19 * v185);
            *(_WORD *)unsigned int v63 = llroundf(v202) << v56;
            float v204 = v38;
            if (v203 <= v38)
            {
              float v204 = v203;
              if (v203 < v232) {
                float v204 = v232;
              }
            }
            *((_WORD *)v63 + 1) = llroundf(v204) << v56;
            v63 += 4;
          }
          __asm
          {
            FCVT            S1, H0
            FCVT            S0, H24
            FCVT            S3, H25
          }
          float v208 = (float)((float)((float)(v227 * _S0) + (float)(v229 * _S1)) + (float)(v39 * _S3)) + v34;
          float v209 = v36;
          if (v208 <= v36)
          {
            float v209 = (float)((float)((float)(v227 * _S0) + (float)(v229 * _S1)) + (float)(v39 * _S3)) + v34;
            if (v208 < v34) {
              float v209 = v34;
            }
          }
          *((_WORD *)v64 + 1) = llroundf(v209) << v56;
          if (v63)
          {
            float v210 = (float)((float)(v178 + (float)(_S1 * v40)) + (float)(_S0 * v41)) + (float)(_S3 * v179);
            float v211 = v38;
            if (v210 <= v38)
            {
              float v211 = (float)((float)(v178 + (float)(_S1 * v40)) + (float)(_S0 * v41)) + (float)(_S3 * v179);
              if (v210 < v232) {
                float v211 = v232;
              }
            }
            float v212 = (float)((float)(v178 + (float)(_S1 * v182)) + (float)(_S0 * v183)) + (float)(_S3 * v185);
            *(_WORD *)unsigned int v63 = llroundf(v211) << v56;
            float v213 = v38;
            float v30 = v223;
            if (v212 <= v38)
            {
              float v213 = v212;
              if (v212 < v232) {
                float v213 = v232;
              }
            }
            *((_WORD *)v63 + 1) = llroundf(v213) << v56;
            v63 += 4;
          }
          else
          {
            float v30 = v223;
          }
          v53 += 4;
          v62 += 4;
          result += 4;
          v64 += 4;
          v61 += 2;
        }
        while (v9 > v61);
      }
      float v53 = &v58[v20];
      v54 += v21;
      result = &v60[v24];
      float v47 = &v59[v25];
      v8 += 2;
    }
    while (v12 > v8);
    if (v216 && v215)
    {
      size_t v214 = 2 * v9;
      do
      {
        result = (unsigned __int8 *)memcpy(v27, v23, v214);
        v23 += v22;
        v27 += v26;
        --v12;
      }
      while (v12);
    }
    else if (v215)
    {
      do
      {
        if (v9) {
          result = (unsigned __int8 *)memset(v27, 255, 2 * v9);
        }
        v27 += v26;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_xf444_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_xf420_TRC_Mat_TRC_xf444_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double a6, int16x4_t a7, double a8, double a9, float32x4_t _Q7)
{
  uint64_t v10 = *(void *)((char *)result + 28);
  unint64_t v11 = 2 * *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (2 * v13 != 2 * v12)
  {
    unint64_t v14 = 0;
    unint64_t v15 = *(void *)((char *)result + 20);
    uint64_t v16 = *(void *)((char *)result + 36);
    uint64_t v17 = *(void *)((char *)result + 44) + 2 * v12;
    unint64_t v18 = 2 * v13 - 2 * v12;
    uint64_t v19 = result[14];
    uint64_t v20 = (void *)result[16];
    uint64_t v21 = result[15] + 2 * (result[13] * a2 / v11);
    size_t v22 = (float32x2_t *)result[19];
    uint64_t v23 = (void *)result[7];
    uint64_t v24 = (uint64_t *)result[8];
    uint64_t v25 = (uint64_t *)result[17];
    uint64_t v26 = *v24;
    uint64_t v27 = v24[1];
    uint64_t v314 = v24[2];
    uint64_t v317 = v23[2];
    uint64_t v28 = *v25;
    uint64_t v29 = v25[1];
    uint64_t v315 = v25[2];
    uint64_t v316 = v20[2];
    uint64_t v30 = (char *)(v316 + v315 * v21 + 2 * v19);
    LODWORD(v25) = v22[17].u16[2];
    unsigned int v31 = v22[17].u16[3];
    v32.i32[0] = v22[3].i32[1];
    unsigned int v33 = v22[18].u16[0];
    unsigned int v34 = v22[18].u16[1];
    unsigned int v35 = v22[18].u16[2];
    unsigned int v36 = v22[18].u16[3];
    LODWORD(a3) = 1174403072;
    unsigned int v37 = v22[19].u16[0];
    _S27 = v22[4].f32[1];
    _S28 = v22[5].f32[0];
    _S18 = v22[5].f32[1];
    _S25 = v22[6].i32[0];
    _S20 = v22[6].f32[1];
    _S5 = v22[7].f32[0];
    _S8 = v22[7].i32[1];
    _S19 = v22[8].i32[0];
    float v46 = (float)v25;
    *(short float *)a7.i16 = (short float)v25;
    float v47 = (char *)&v22[20] + 4;
    unsigned int v48 = (char *)(v317 + v314 * v17 + 2 * v16);
    float v49 = 8191.0 / (float)v22[16].u32[0];
    float v50 = (float)v34;
    float v51 = (float)v35;
    float v52 = (float)v36;
    _S29 = v49 * v22->f32[0];
    uint64_t v54 = (char *)&v22[2068] + 4;
    __asm { FCVT            H7, S29 }
    short float v360 = *(short float *)_Q7.i16;
    float16x8_t v361 = (float16x8_t)vdupq_lane_s16(a7, 0);
    short float v59 = -(short float)v31;
    v32.i32[1] = v22[1].i32[0];
    *(float32x2_t *)_Q7.f32 = vmul_n_f32(v32, v49);
    *(double *)&v60.i64[1] = a3;
    *(float32x2_t *)v60.f32 = vmul_n_f32(v22[2], v49);
    float16x8_t v358 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q7), 0);
    float16x8_t v356 = vmulq_n_f16(v358, v59);
    float16x8_t v357 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v60), 0);
    float16x8_t v61 = vmulq_n_f16(v357, v59);
    float16x8_t v355 = v61;
    __asm { FCVT            H4, S27 }
    *(short float *)v61.i16 = (short float)v33;
    int16x8_t v63 = vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    *(short float *)v61.i16 = (short float)v34;
    int16x8_t v64 = vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    float16x8_t v371 = (float16x8_t)v64;
    *(short float *)v64.i16 = (short float)v35;
    int16x8_t v65 = vdupq_lane_s16(*(int16x4_t *)v64.i8, 0);
    float16x8_t v375 = (float16x8_t)v65;
    float16x8_t v376 = (float16x8_t)v63;
    *(short float *)v65.i16 = (short float)v36;
    int16x8_t v66 = vdupq_lane_s16(*(int16x4_t *)v65.i8, 0);
    *(short float *)v65.i16 = (short float)v37;
    float16x8_t v369 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v65.i8, 0);
    float16x8_t v370 = (float16x8_t)v66;
    unsigned int v67 = v22[16].u8[4];
    unsigned __int8 v68 = 16 - v67;
    if (v67 >= 0x11) {
      unsigned __int8 v68 = 0;
    }
    unsigned int v69 = v22[15].u8[4];
    unsigned __int8 v70 = 16 - v69;
    if (v69 >= 0x11) {
      unsigned __int8 v70 = 0;
    }
    float v73 = v20;
    uint64_t v72 = *v20;
    uint64_t v71 = v73[1];
    if (v71) {
      float v74 = (__int16 *)(v71 + v29 * v21 + 2 * v19);
    }
    else {
      float v74 = 0;
    }
    float v75 = (uint16x8_t *)(v72 + v28 * v21 + 2 * v19);
    if (v17 >= 0) {
      uint64_t v76 = v17;
    }
    else {
      uint64_t v76 = v17 + 1;
    }
    result = (void *)(v23[1] + v27 * (v76 >> 1) + 2 * v16);
    float v77 = (uint16x8_t *)(*v23 + v26 * v17 + 2 * v16);
    unsigned __int8 v78 = v70;
    unsigned __int8 v79 = v68;
    float v330 = v22[8].f32[1];
    _S1 = v330;
    __asm { FCVT            H12, S28 }
    short float v374 = _H12;
    __asm { FCVT            H12, S18 }
    short float v373 = _H12;
    __asm { FCVT            H12, S25 }
    short float v368 = _H12;
    __asm { FCVT            H14, S20 }
    short float v367 = _H14;
    __asm { FCVT            H14, S5 }
    short float v366 = _H14;
    __asm { FCVT            H14, S8 }
    short float v365 = _H14;
    __asm
    {
      FCVT            H14, S19
      FCVT            H1, S1
    }
    short float v363 = *(short float *)&_S1;
    short float v364 = _H14;
    float v354 = v22[9].f32[0];
    __asm { FCVT            H1, S2 }
    short float v343 = *(short float *)&_S1;
    float v353 = v22[9].f32[1];
    __asm { FCVT            H1, S16 }
    short float v342 = *(short float *)&_S1;
    float v352 = v22[10].f32[0];
    __asm { FCVT            H1, S17 }
    short float v341 = *(short float *)&_S1;
    float v351 = v22[10].f32[1];
    __asm { FCVT            H1, S22 }
    short float v340 = *(short float *)&_S1;
    float v350 = v22[11].f32[0];
    __asm { FCVT            H1, S24 }
    short float v339 = *(short float *)&_S1;
    float v349 = v22[11].f32[1];
    __asm { FCVT            H1, S26 }
    float v88 = (float)v31;
    short float v89 = _H4;
    short float v338 = *(short float *)&_S1;
    float v348 = v22[12].f32[0];
    __asm { FCVT            H1, S11 }
    short float v337 = *(short float *)&_S1;
    float v347 = v22[12].f32[1];
    __asm { FCVT            H1, S12 }
    short float v336 = *(short float *)&_S1;
    uint16x8_t v334 = (uint16x8_t)vdupq_n_s16(v68);
    uint16x8_t v335 = (uint16x8_t)vdupq_n_s16(-v70);
    float v345 = v22[13].f32[0];
    __asm { FCVT            H1, S13 }
    short float v333 = *(short float *)&_S1;
    float v359 = _Q7.f32[0];
    uint64_t v90 = v60.i64[0];
    uint64_t v321 = v28;
    uint64_t v322 = *v24;
    uint64_t v319 = v24[1];
    uint64_t v320 = v29;
    float v372 = (float)v31;
    float v331 = _S29;
    float v332 = v22[8].f32[0];
    float v362 = (float)v37;
    float v328 = v22[7].f32[1];
    float v329 = v52;
    float v326 = v50;
    float v327 = v46;
    float v346 = (float)v33;
    float v344 = v22[6].f32[0];
    float32_t v318 = v22[6].f32[1];
    do
    {
      float v91 = (uint16x8_t *)((char *)v75 + v28);
      float v92 = (__int16 *)((char *)v74 + v29);
      float v324 = &v75->i8[v28];
      float v325 = (char *)v74 + v29;
      float v323 = &v77->i8[v26];
      if ((int)v15 < 8)
      {
        unint64_t v193 = 0;
        float v94 = (uint16x8_t *)((char *)v77 + v26);
        float v95 = (uint16x8_t *)result;
      }
      else
      {
        int v93 = 0;
        float v94 = (uint16x8_t *)((char *)v77 + v26);
        float v95 = (uint16x8_t *)result;
        do
        {
          uint16x8_t v96 = *v95++;
          float16x8_t v97 = vcvtq_f16_u16(vshlq_u16(v96, v335));
          int8x16_t v98 = (int8x16_t)vmlaq_f16(v356, v358, v97);
          int8x16_t v99 = (int8x16_t)vmlaq_f16(v355, v357, v97);
          v97.i64[0] = vextq_s8(v98, v98, 8uLL).u64[0];
          *(int16x4_t *)v100.i8 = vuzp1_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v97.i8);
          *(int16x4_t *)v97.i8 = vuzp2_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v97.i8);
          *(double *)&v97.i64[1] = a3;
          float16x8_t v101 = (float16x8_t)vzip1q_s16((int16x8_t)v97, (int16x8_t)v97);
          *(double *)&v100.i64[1] = a3;
          float16x8_t v102 = (float16x8_t)vzip1q_s16(v100, v100);
          v97.i64[0] = vextq_s8(v99, v99, 8uLL).u64[0];
          *(float16x4_t *)v97.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v97.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v97.i8));
          *(double *)&v97.i64[1] = a3;
          float16x8_t v103 = (float16x8_t)vzip1q_s16((int16x8_t)v97, (int16x8_t)v97);
          uint16x8_t v104 = *v77++;
          uint16x8_t v105 = vshlq_u16(v104, v335);
          uint16x8_t v106 = *v94++;
          float16x8_t v107 = vsubq_f16(vcvtq_f16_u16(v105), v361);
          float16x8_t v108 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v106, v335)), v361);
          float16x8_t v109 = vmlaq_n_f16(v101, v107, v360);
          float16x8_t v110 = vmlaq_n_f16(v101, v108, v360);
          float16x8_t v111 = vmlaq_n_f16(v103, v107, v360);
          float16x8_t v112 = vmlaq_n_f16(v103, v108, v360);
          float16x8_t v113 = vmlaq_n_f16(v102, v107, v360);
          float16x8_t v114 = vmlaq_n_f16(v102, v108, v360);
          v115.i64[0] = 0x9000900090009000;
          v115.i64[1] = 0x9000900090009000;
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v109, (float16x8_t)0), v115));
          uint32x4_t v117 = vmovl_high_u16(v116);
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v116.i8);
          v109.i16[0] = *(_WORD *)&v47[2 * v118.u32[0]];
          v109.i16[1] = *(_WORD *)&v47[2 * v118.u32[1]];
          v109.i16[2] = *(_WORD *)&v47[2 * v118.u32[2]];
          v109.i16[3] = *(_WORD *)&v47[2 * v118.u32[3]];
          v109.i16[4] = *(_WORD *)&v47[2 * v117.u32[0]];
          v109.i16[5] = *(_WORD *)&v47[2 * v117.u32[1]];
          v109.i16[6] = *(_WORD *)&v47[2 * v117.u32[2]];
          v109.i16[7] = *(_WORD *)&v47[2 * v117.u32[3]];
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, (float16x8_t)0), v115));
          float16x8_t v120 = (float16x8_t)vmovl_high_u16(v119);
          uint32x4_t v121 = vmovl_u16(*(uint16x4_t *)v119.i8);
          v122.i16[0] = *(_WORD *)&v47[2 * v121.u32[0]];
          v122.i16[1] = *(_WORD *)&v47[2 * v121.u32[1]];
          v122.i16[2] = *(_WORD *)&v47[2 * v121.u32[2]];
          v122.i16[3] = *(_WORD *)&v47[2 * v121.u32[3]];
          v122.i16[4] = *(_WORD *)&v47[2 * v120.u32[0]];
          v122.i16[5] = *(_WORD *)&v47[2 * v120.u32[1]];
          v122.i16[6] = *(_WORD *)&v47[2 * v120.u32[2]];
          v122.i16[7] = *(_WORD *)&v47[2 * v120.u32[3]];
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v115));
          uint32x4_t v124 = vmovl_high_u16(v123);
          uint32x4_t v125 = vmovl_u16(*(uint16x4_t *)v123.i8);
          v126.i16[0] = *(_WORD *)&v47[2 * v125.u32[0]];
          v126.i16[1] = *(_WORD *)&v47[2 * v125.u32[1]];
          v126.i16[2] = *(_WORD *)&v47[2 * v125.u32[2]];
          v126.i16[3] = *(_WORD *)&v47[2 * v125.u32[3]];
          v126.i16[4] = *(_WORD *)&v47[2 * v124.u32[0]];
          v126.i16[5] = *(_WORD *)&v47[2 * v124.u32[1]];
          v126.i16[6] = *(_WORD *)&v47[2 * v124.u32[2]];
          v126.i16[7] = *(_WORD *)&v47[2 * v124.u32[3]];
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v110, (float16x8_t)0), v115));
          uint32x4_t v128 = vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v130.i16[0] = *(_WORD *)&v47[2 * v129.u32[0]];
          v130.i16[1] = *(_WORD *)&v47[2 * v129.u32[1]];
          v130.i16[2] = *(_WORD *)&v47[2 * v129.u32[2]];
          v130.i16[3] = *(_WORD *)&v47[2 * v129.u32[3]];
          v130.i16[4] = *(_WORD *)&v47[2 * v128.u32[0]];
          v130.i16[5] = *(_WORD *)&v47[2 * v128.u32[1]];
          v130.i16[6] = *(_WORD *)&v47[2 * v128.u32[2]];
          v130.i16[7] = *(_WORD *)&v47[2 * v128.u32[3]];
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, (float16x8_t)0), v115));
          uint32x4_t v132 = vmovl_high_u16(v131);
          uint32x4_t v133 = vmovl_u16(*(uint16x4_t *)v131.i8);
          v120.i16[0] = *(_WORD *)&v47[2 * v133.u32[0]];
          v120.i16[1] = *(_WORD *)&v47[2 * v133.u32[1]];
          v120.i16[2] = *(_WORD *)&v47[2 * v133.u32[2]];
          v120.i16[3] = *(_WORD *)&v47[2 * v133.u32[3]];
          v120.i16[4] = *(_WORD *)&v47[2 * v132.u32[0]];
          v120.i16[5] = *(_WORD *)&v47[2 * v132.u32[1]];
          v120.i16[6] = *(_WORD *)&v47[2 * v132.u32[2]];
          v120.i16[7] = *(_WORD *)&v47[2 * v132.u32[3]];
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v115));
          uint32x4_t v135 = vmovl_high_u16(v134);
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v134.i8);
          v137.i16[0] = *(_WORD *)&v47[2 * v136.u32[0]];
          v137.i16[1] = *(_WORD *)&v47[2 * v136.u32[1]];
          v137.i16[2] = *(_WORD *)&v47[2 * v136.u32[2]];
          v137.i16[3] = *(_WORD *)&v47[2 * v136.u32[3]];
          v137.i16[4] = *(_WORD *)&v47[2 * v135.u32[0]];
          v137.i16[5] = *(_WORD *)&v47[2 * v135.u32[1]];
          v137.i16[6] = *(_WORD *)&v47[2 * v135.u32[2]];
          v137.i16[7] = *(_WORD *)&v47[2 * v135.u32[3]];
          float16x8_t v138 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v109, v343), v122, v342), v126, v341);
          float16x8_t v139 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v109, v340), v122, v339), v126, v338);
          float16x8_t v140 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v126, v333), v122, v336), v109, v337);
          float16x8_t v141 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, v343), v120, v342), v137, v341);
          float16x8_t v142 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, v340), v120, v339), v137, v338);
          float16x8_t v143 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, v333), v120, v336), v130, v337);
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v138, (float16x8_t)0), v115));
          uint32x4_t v145 = vmovl_high_u16(v144);
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v144.i8);
          v147.i16[0] = *(_WORD *)&v54[2 * v146.u32[0]];
          v147.i16[1] = *(_WORD *)&v54[2 * v146.u32[1]];
          v147.i16[2] = *(_WORD *)&v54[2 * v146.u32[2]];
          v147.i16[3] = *(_WORD *)&v54[2 * v146.u32[3]];
          v147.i16[4] = *(_WORD *)&v54[2 * v145.u32[0]];
          v147.i16[5] = *(_WORD *)&v54[2 * v145.u32[1]];
          v147.i16[6] = *(_WORD *)&v54[2 * v145.u32[2]];
          v147.i16[7] = *(_WORD *)&v54[2 * v145.u32[3]];
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v139, (float16x8_t)0), v115));
          uint32x4_t v149 = vmovl_high_u16(v148);
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v148.i8);
          v151.i16[0] = *(_WORD *)&v54[2 * v150.u32[0]];
          v151.i16[1] = *(_WORD *)&v54[2 * v150.u32[1]];
          v151.i16[2] = *(_WORD *)&v54[2 * v150.u32[2]];
          v151.i16[3] = *(_WORD *)&v54[2 * v150.u32[3]];
          v151.i16[4] = *(_WORD *)&v54[2 * v149.u32[0]];
          v151.i16[5] = *(_WORD *)&v54[2 * v149.u32[1]];
          v151.i16[6] = *(_WORD *)&v54[2 * v149.u32[2]];
          v151.i16[7] = *(_WORD *)&v54[2 * v149.u32[3]];
          uint16x8_t v152 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v140, (float16x8_t)0), v115));
          uint32x4_t v153 = vmovl_high_u16(v152);
          uint32x4_t v154 = vmovl_u16(*(uint16x4_t *)v152.i8);
          uint64_t v155 = v154.u32[2];
          uint64_t v156 = v154.u32[3];
          uint64_t v157 = v154.u32[1];
          v162.i16[0] = *(_WORD *)&v54[2 * v154.u32[0]];
          uint16x8_t v158 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v141, (float16x8_t)0), v115));
          uint32x4_t v159 = vmovl_u16(*(uint16x4_t *)v158.i8);
          uint64_t v160 = v159.u32[1];
          uint64_t v161 = v159.u32[0];
          v162.i16[1] = *(_WORD *)&v54[2 * v157];
          v162.i16[2] = *(_WORD *)&v54[2 * v155];
          v162.i16[3] = *(_WORD *)&v54[2 * v156];
          v162.i16[4] = *(_WORD *)&v54[2 * v153.u32[0]];
          v162.i16[5] = *(_WORD *)&v54[2 * v153.u32[1]];
          v162.i16[6] = *(_WORD *)&v54[2 * v153.u32[2]];
          v162.i16[7] = *(_WORD *)&v54[2 * v153.u32[3]];
          uint32x4_t v163 = vmovl_high_u16(v158);
          uint64_t v164 = v159.u32[3];
          uint64_t v165 = v159.u32[2];
          uint64_t v166 = v163.u32[1];
          uint64_t v167 = v163.u32[0];
          uint64_t v168 = v163.u32[3];
          uint64_t v169 = v163.u32[2];
          uint16x8_t v170 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v142, (float16x8_t)0), v115));
          uint32x4_t v171 = vmovl_u16(*(uint16x4_t *)v170.i8);
          uint64_t v172 = v171.u32[1];
          uint64_t v173 = v171.u32[0];
          v174.i16[0] = *(_WORD *)&v54[2 * v161];
          v174.i16[1] = *(_WORD *)&v54[2 * v160];
          v174.i16[2] = *(_WORD *)&v54[2 * v165];
          v174.i16[3] = *(_WORD *)&v54[2 * v164];
          v174.i16[4] = *(_WORD *)&v54[2 * v167];
          v174.i16[5] = *(_WORD *)&v54[2 * v166];
          v174.i16[6] = *(_WORD *)&v54[2 * v169];
          v174.i16[7] = *(_WORD *)&v54[2 * v168];
          uint32x4_t v175 = vmovl_high_u16(v170);
          uint64_t v176 = v171.u32[3];
          uint64_t v177 = v171.u32[2];
          uint64_t v178 = v175.u32[1];
          uint64_t v179 = v175.u32[0];
          uint64_t v180 = v175.u32[3];
          uint64_t v181 = v175.u32[2];
          uint16x8_t v182 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v143, (float16x8_t)0), v115));
          uint32x4_t v183 = vmovl_u16(*(uint16x4_t *)v182.i8);
          v184.i16[0] = *(_WORD *)&v54[2 * v173];
          v184.i16[1] = *(_WORD *)&v54[2 * v172];
          v184.i16[2] = *(_WORD *)&v54[2 * v177];
          v184.i16[3] = *(_WORD *)&v54[2 * v176];
          v184.i16[4] = *(_WORD *)&v54[2 * v179];
          v184.i16[5] = *(_WORD *)&v54[2 * v178];
          v184.i16[6] = *(_WORD *)&v54[2 * v181];
          v184.i16[7] = *(_WORD *)&v54[2 * v180];
          uint32x4_t v185 = vmovl_high_u16(v182);
          uint64_t v186 = v185.u32[0];
          v190.i16[0] = *(_WORD *)&v54[2 * v183.u32[0]];
          uint64_t v187 = (__int16 *)&v54[2 * v185.u32[1]];
          float16x8_t v188 = (__int16 *)&v54[2 * v185.u32[2]];
          uint32x4_t v189 = (__int16 *)&v54[2 * v185.u32[3]];
          v190.i16[1] = *(_WORD *)&v54[2 * v183.u32[1]];
          v190.i16[2] = *(_WORD *)&v54[2 * v183.u32[2]];
          v190.i16[3] = *(_WORD *)&v54[2 * v183.u32[3]];
          v190.i16[4] = *(_WORD *)&v54[2 * v186];
          v190.i16[5] = *v187;
          v190.i16[6] = *v188;
          v190.i16[7] = *v189;
          *v75++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v376, v147, v89), v151, v374), v162, v373), v376), v375)), v334);
          if (v74)
          {
            float16x8_t v191 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v371, v147, v365), v151, v364), v162, v363);
            v378.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v371, v147, v368), v151, v367), v162, v366), v370), v369), v370), v369)), v334);
            v378.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(v191), v334);
            vst2q_s16(v74, v378);
            v74 += 16;
          }
          float v88 = v372;
          *v91++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v376, v174, v89), v184, v374), v190, v373), v376), v375)), v334);
          if (v92)
          {
            float16x8_t v192 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v371, v174, v365), v184, v364), v190, v363);
            v377.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v371, v174, v368), v184, v367), v190, v366), v370), v369), v370), v369)), v334);
            v377.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(v192), v334);
            vst2q_s16(v92, v377);
            v92 += 16;
          }
          v93 += 8;
        }
        while (v93 < (int)v15 - 7);
        unint64_t v193 = v15 & 0xFFFFFFF8;
        uint64_t v27 = v319;
        _S20 = v318;
      }
      while (v15 > v193)
      {
        float v194 = (float)(v95->u16[1] >> v78) - v88;
        float v195 = _Q7.f32[1] * v194;
        float v196 = _S29 * (float)((float)(v77->u16[0] >> v78) - v46);
        float v197 = (float)(_Q7.f32[1] * v194) + v196;
        float v198 = 8191.0;
        if (v197 <= 8191.0)
        {
          float v198 = (float)(_Q7.f32[1] * v194) + v196;
          if (v197 < 0.0) {
            float v198 = 0.0;
          }
        }
        float v199 = (float)(v95->u16[0] >> v78) - v88;
        float v200 = (float)(*((float *)&v90 + 1) * v194) + (float)(v199 * *(float *)&v90);
        float v201 = 8191.0;
        if ((float)(v196 + v200) <= 8191.0)
        {
          float v201 = v196 + v200;
          if ((float)(v196 + v200) < 0.0) {
            float v201 = 0.0;
          }
        }
        float v202 = v359 * v199;
        float v203 = (float)(v359 * v199) + v196;
        float v204 = 8191.0;
        if (v203 <= 8191.0)
        {
          float v204 = v203;
          if (v203 < 0.0) {
            float v204 = 0.0;
          }
        }
        float v205 = _S29 * (float)((float)(v77->u16[1] >> v78) - v46);
        float v206 = 8191.0;
        if ((float)(v195 + v205) <= 8191.0)
        {
          float v206 = v195 + v205;
          if ((float)(v195 + v205) < 0.0) {
            float v206 = 0.0;
          }
        }
        float v207 = 8191.0;
        if ((float)(v200 + v205) <= 8191.0)
        {
          float v207 = v200 + v205;
          if ((float)(v200 + v205) < 0.0) {
            float v207 = 0.0;
          }
        }
        float v208 = v202 + v205;
        BOOL v209 = (float)(v202 + v205) <= 8191.0;
        float v210 = 8191.0;
        if (v209)
        {
          float v210 = v208;
          if (v208 < 0.0) {
            float v210 = 0.0;
          }
        }
        float v211 = _S29 * (float)((float)(v94->u16[0] >> v78) - v46);
        float v212 = 8191.0;
        if ((float)(v195 + v211) <= 8191.0)
        {
          float v212 = v195 + v211;
          if ((float)(v195 + v211) < 0.0) {
            float v212 = 0.0;
          }
        }
        float v213 = 8191.0;
        if ((float)(v200 + v211) <= 8191.0)
        {
          float v213 = v200 + v211;
          if ((float)(v200 + v211) < 0.0) {
            float v213 = 0.0;
          }
        }
        float v214 = v202 + v211;
        BOOL v209 = (float)(v202 + v211) <= 8191.0;
        float v215 = 8191.0;
        if (v209)
        {
          float v215 = v214;
          if (v214 < 0.0) {
            float v215 = 0.0;
          }
        }
        float v216 = _S29 * (float)((float)(v94->u16[1] >> v78) - v46);
        float v217 = v195 + v216;
        float v218 = 8191.0;
        if (v217 <= 8191.0)
        {
          float v218 = v217;
          if (v217 < 0.0) {
            float v218 = 0.0;
          }
        }
        float v219 = _S18;
        float v220 = v200 + v216;
        BOOL v209 = (float)(v200 + v216) <= 8191.0;
        float v221 = 8191.0;
        if (v209)
        {
          float v221 = v220;
          if (v220 < 0.0) {
            float v221 = 0.0;
          }
        }
        float v222 = _S28;
        float v223 = _S27;
        float v224 = v202 + v216;
        float v225 = 8191.0;
        if (v224 <= 8191.0)
        {
          float v225 = v224;
          if (v224 < 0.0) {
            float v225 = 0.0;
          }
        }
        _H16 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v198, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        _H10 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v201, 0.0), 8191.0))];
        __asm { FCVT            S10, H10 }
        _H11 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v204, 0.0), 8191.0))];
        __asm { FCVT            S11, H11 }
        _H12 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v207, 0.0), 8191.0))];
        __asm
        {
          FCVT            S12, H12
          FCVT            S1, H1
        }
        _H2 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v210, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H17 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        _H24 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v215, 0.0), 8191.0))];
        __asm { FCVT            S24, H24 }
        _H26 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v218, 0.0), 8191.0))];
        _H13 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v221, 0.0), 8191.0))];
        __asm
        {
          FCVT            S26, H26
          FCVT            S13, H13
        }
        _H22 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0))];
        __asm { FCVT            S22, H22 }
        float v250 = (float)((float)(v353 * _S10) + (float)(_S16 * v354)) + (float)(_S11 * v352);
        float v251 = (float)((float)(v350 * _S10) + (float)(_S16 * v351)) + (float)(_S11 * v349);
        float v252 = (float)((float)(v347 * _S10) + (float)(_S16 * v348)) + (float)(_S11 * v345);
        float v253 = (float)((float)(v353 * _S1) + (float)(_S12 * v354)) + (float)(_S2 * v352);
        float v254 = (float)((float)(v350 * _S1) + (float)(_S12 * v351)) + (float)(_S2 * v349);
        float v255 = (float)((float)(v347 * _S1) + (float)(_S12 * v348)) + (float)(_S2 * v345);
        float v256 = (float)((float)(v353 * _S17) + (float)(_S3 * v354)) + (float)(_S24 * v352);
        float v257 = (float)((float)(v350 * _S17) + (float)(_S3 * v351)) + (float)(_S24 * v349);
        float v258 = (float)((float)(v347 * _S17) + (float)(_S3 * v348)) + (float)(_S24 * v345);
        float v259 = (float)((float)(v353 * _S13) + (float)(_S26 * v354)) + (float)(_S22 * v352);
        float v260 = (float)((float)(v350 * _S13) + (float)(_S26 * v351)) + (float)(_S22 * v349);
        float v261 = (float)((float)(v347 * _S13) + (float)(_S26 * v348)) + (float)(_S22 * v345);
        LOWORD(_S1) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v250, 0.0), 8191.0))];
        __asm { FCVT            S17, H1 }
        LOWORD(_S1) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v251, 0.0), 8191.0))];
        __asm { FCVT            S22, H1 }
        LOWORD(_S1) = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v252, 0.0), 8191.0))];
        __asm { FCVT            S24, H1 }
        _H1 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v253, 0.0), 8191.0))];
        _H2 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v254, 0.0), 8191.0))];
        _H3 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v255, 0.0), 8191.0))];
        _H11 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v256, 0.0), 8191.0))];
        _H12 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v257, 0.0), 8191.0))];
        _H15 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v258, 0.0), 8191.0))];
        _H16 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v259, 0.0), 8191.0))];
        _H13 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v260, 0.0), 8191.0))];
        _H14 = *(_WORD *)&v54[2 * llroundf(fminf(fmaxf(v261, 0.0), 8191.0))];
        _S28 = v222;
        _S27 = v223;
        float v274 = (float)(v222 * _S22) + (float)(v223 * _S17);
        _S18 = v219;
        float v275 = (float)(v274 + (float)(v219 * _S24)) + v346;
        float v276 = v51;
        if (v275 <= v51)
        {
          float v276 = v275;
          if (v275 < v346) {
            float v276 = v346;
          }
        }
        v75->i16[0] = llroundf(v276) << v79;
        if (v74)
        {
          float v277 = v326;
          float v278 = (float)((float)(v326 + (float)(_S17 * v344)) + (float)(_S22 * _S20)) + (float)(_S24 * _S5);
          float v279 = v362;
          float v280 = v329;
          if (v278 <= v362)
          {
            float v279 = (float)((float)(v326 + (float)(_S17 * v344)) + (float)(_S22 * _S20)) + (float)(_S24 * _S5);
            if (v278 < v329) {
              float v279 = v329;
            }
          }
          float v46 = v327;
          float v281 = v328;
          _S29 = v331;
          float v282 = v332;
          float v283 = v330;
          float v284 = (float)((float)(v326 + (float)(_S17 * v328)) + (float)(_S22 * v332)) + (float)(_S24 * v330);
          __int16 *v74 = llroundf(v279) << v79;
          float v285 = v362;
          if (v284 <= v362)
          {
            float v285 = v284;
            if (v284 < v329) {
              float v285 = v329;
            }
          }
          v74[1] = llroundf(v285) << v79;
          v74 += 2;
          float v88 = v372;
        }
        else
        {
          float v46 = v327;
          float v281 = v328;
          _S29 = v331;
          float v282 = v332;
          float v88 = v372;
          float v277 = v326;
          float v280 = v329;
          float v283 = v330;
        }
        short float v89 = _H4;
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H2
          FCVT            S3, H3
        }
        float v289 = (float)((float)((float)(v222 * _S2) + (float)(_S27 * _S1)) + (float)(v219 * _S3)) + v346;
        float v290 = v51;
        if (v289 <= v51)
        {
          float v290 = (float)((float)((float)(v222 * _S2) + (float)(_S27 * _S1)) + (float)(v219 * _S3)) + v346;
          if (v289 < v346) {
            float v290 = v346;
          }
        }
        v75->i16[1] = llroundf(v290) << v79;
        if (v74)
        {
          float v291 = (float)((float)(v277 + (float)(_S1 * v344)) + (float)(_S2 * _S20)) + (float)(_S3 * _S5);
          float v292 = v362;
          if (v291 <= v362)
          {
            float v292 = (float)((float)(v277 + (float)(_S1 * v344)) + (float)(_S2 * _S20)) + (float)(_S3 * _S5);
            if (v291 < v280) {
              float v292 = v280;
            }
          }
          float v293 = (float)((float)(v277 + (float)(_S1 * v281)) + (float)(_S2 * v282)) + (float)(_S3 * v283);
          __int16 *v74 = llroundf(v292) << v79;
          float v294 = v362;
          if (v293 <= v362)
          {
            float v294 = v293;
            if (v293 < v280) {
              float v294 = v280;
            }
          }
          v74[1] = llroundf(v294) << v79;
          v74 += 2;
        }
        __asm
        {
          FCVT            S1, H11
          FCVT            S2, H12
          FCVT            S3, H15
        }
        float v298 = (float)((float)((float)(v222 * _S2) + (float)(_S27 * _S1)) + (float)(v219 * _S3)) + v346;
        float v299 = v51;
        if (v298 <= v51)
        {
          float v299 = (float)((float)((float)(v222 * _S2) + (float)(_S27 * _S1)) + (float)(v219 * _S3)) + v346;
          if (v298 < v346) {
            float v299 = v346;
          }
        }
        v91->i16[0] = llroundf(v299) << v79;
        if (v92)
        {
          float v300 = (float)((float)(v277 + (float)(_S1 * v344)) + (float)(_S2 * _S20)) + (float)(_S3 * _S5);
          float v301 = v362;
          if (v300 <= v362)
          {
            float v301 = (float)((float)(v277 + (float)(_S1 * v344)) + (float)(_S2 * _S20)) + (float)(_S3 * _S5);
            if (v300 < v280) {
              float v301 = v280;
            }
          }
          float v302 = (float)((float)(v277 + (float)(_S1 * v281)) + (float)(_S2 * v282)) + (float)(_S3 * v283);
          *float v92 = llroundf(v301) << v79;
          float v303 = v362;
          if (v302 <= v362)
          {
            float v303 = v302;
            if (v302 < v280) {
              float v303 = v280;
            }
          }
          v92[1] = llroundf(v303) << v79;
          v92 += 2;
        }
        __asm
        {
          FCVT            S1, H16
          FCVT            S2, H13
          FCVT            S3, H14
        }
        float v307 = (float)((float)((float)(v222 * _S2) + (float)(_S27 * _S1)) + (float)(v219 * _S3)) + v346;
        float v308 = v51;
        if (v307 <= v51)
        {
          float v308 = (float)((float)((float)(v222 * _S2) + (float)(_S27 * _S1)) + (float)(v219 * _S3)) + v346;
          if (v307 < v346) {
            float v308 = v346;
          }
        }
        v91->i16[1] = llroundf(v308) << v79;
        if (v92)
        {
          float v309 = (float)((float)(v277 + (float)(_S1 * v344)) + (float)(_S2 * _S20)) + (float)(_S3 * _S5);
          float v310 = v362;
          if (v309 <= v362)
          {
            float v310 = (float)((float)(v277 + (float)(_S1 * v344)) + (float)(_S2 * _S20)) + (float)(_S3 * _S5);
            if (v309 < v280) {
              float v310 = v280;
            }
          }
          float v311 = (float)((float)(v277 + (float)(_S1 * v281)) + (float)(_S2 * v282)) + (float)(_S3 * v283);
          *float v92 = llroundf(v310) << v79;
          float v312 = v362;
          if (v311 <= v362)
          {
            float v312 = v311;
            if (v311 < v280) {
              float v312 = v280;
            }
          }
          v92[1] = llroundf(v312) << v79;
          v92 += 2;
        }
        v193 += 2;
        float v95 = (uint16x8_t *)((char *)v95 + 4);
        float v77 = (uint16x8_t *)((char *)v77 + 4);
        float v94 = (uint16x8_t *)((char *)v94 + 4);
        float v75 = (uint16x8_t *)((char *)v75 + 4);
        float v91 = (uint16x8_t *)((char *)v91 + 4);
      }
      uint64_t v26 = v322;
      float v77 = (uint16x8_t *)&v323[v322];
      result = (void *)((char *)result + v27);
      uint64_t v29 = v320;
      uint64_t v28 = v321;
      float v75 = (uint16x8_t *)&v324[v321];
      float v74 = (__int16 *)&v325[v320];
      v14 += 2;
    }
    while (v18 > v14);
    if (v317 && v316)
    {
      size_t v313 = 2 * v15;
      do
      {
        result = memcpy(v30, v48, v313);
        v48 += v314;
        v30 += v315;
        --v18;
      }
      while (v18);
    }
    else if (v316)
    {
      do
      {
        if (v15) {
          result = memset(v30, 255, 2 * v15);
        }
        v30 += v315;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_xf444_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (void *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (uint64_t *)*((void *)result + 7);
    uint64_t v19 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v195 = v18[2];
    uint64_t v24 = (char *)(v195 + v23 * v12 + 2 * v11);
    uint64_t v25 = *v20;
    uint64_t v26 = v20[1];
    uint64_t v27 = v20[2];
    uint64_t v28 = v15[2];
    uint64_t v29 = (char *)(v28 + v27 * v16 + 2 * v14);
    float v30 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    float v31 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v32 = (float)LODWORD(a5);
    float v33 = v30 * *(float *)v17;
    float v216 = v30 * *(float *)(v17 + 16);
    float v217 = v30 * *(float *)(v17 + 8);
    float v34 = v30 * *(float *)(v17 + 20);
    *(float *)&unsigned int v35 = v30 * *(float *)(v17 + 28);
    float v214 = *(float *)&v35;
    float v215 = v34;
    LOWORD(v35) = *(_WORD *)(v17 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 150);
    float v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v17 + 152);
    float v40 = (float)v35;
    float v42 = *(float *)(v17 + 36);
    float v41 = *(float *)(v17 + 40);
    float v44 = *(float *)(v17 + 44);
    float v43 = *(float *)(v17 + 48);
    float v45 = *(float *)(v17 + 52);
    float v219 = *(float *)(v17 + 56);
    float v46 = *(float *)(v17 + 60);
    float v47 = *(float *)(v17 + 64);
    float v48 = *(float *)(v17 + 68);
    float v212 = *(float *)(v17 + 76);
    float v213 = *(float *)(v17 + 72);
    float v210 = *(float *)(v17 + 84);
    float v211 = *(float *)(v17 + 80);
    float v209 = *(float *)(v17 + 88);
    float v207 = *(float *)(v17 + 92);
    float v205 = *(float *)(v17 + 100);
    float v206 = *(float *)(v17 + 96);
    float v204 = *(float *)(v17 + 104);
    uint64_t v49 = v17 + 164;
    uint64_t v50 = v17 + 16548;
    uint64_t v51 = v15[1];
    float v52 = (char *)(*v15 + v25 * v16 + 2 * v14);
    if (v51) {
      float v53 = (char *)(v51 + v26 * v16 + 2 * v14);
    }
    else {
      float v53 = 0;
    }
    uint64_t v54 = *v18;
    uint64_t v55 = v18[1];
    result = (unsigned __int8 *)(v54 + v21 * v12 + 2 * v11);
    unsigned int v56 = *(unsigned __int8 *)(v17 + 132);
    _CF = v56 >= 0x11;
    char v58 = 16 - v56;
    if (_CF) {
      char v58 = 0;
    }
    unsigned int v59 = *(unsigned __int8 *)(v17 + 124);
    char v60 = 16 - v59;
    if (v59 >= 0x11) {
      char v60 = 0;
    }
    if (v12 >= 0) {
      uint64_t v61 = v12;
    }
    else {
      uint64_t v61 = v12 + 1;
    }
    uint64_t v62 = v55 + v22 * (v61 >> 1) + 2 * v11;
    char v63 = v60;
    char v64 = v58;
    float v201 = v46;
    float v202 = (float)LODWORD(a5);
    float v199 = v48;
    float v200 = v47;
    float v197 = v33;
    float v198 = v37;
    float v218 = v41;
    float v208 = v45;
    float v196 = v31;
    float v203 = v39;
    do
    {
      int16x8_t v65 = &result[v21];
      int16x8_t v66 = &v53[v26];
      unsigned int v67 = &v52[v25];
      if (v10)
      {
        unint64_t v68 = 0;
        unsigned int v69 = &result[v21];
        unsigned __int8 v70 = &v53[v26];
        uint64_t v71 = &v52[v25];
        do
        {
          uint64_t v72 = (unsigned __int16 *)(v62 + 2 * v68);
          float v73 = (float)(v72[1] >> v63) - v32;
          float v74 = v217 * v73;
          float v75 = v33 * (float)((float)(*(unsigned __int16 *)result >> v63) - v31);
          float v76 = (float)(v217 * v73) + v75;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = (float)(v217 * v73) + v75;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = (float)(*v72 >> v63) - v32;
          float v79 = (float)(v215 * v73) + (float)(v78 * v216);
          float v80 = 8191.0;
          if ((float)(v75 + v79) <= 8191.0)
          {
            float v80 = v75 + v79;
            if ((float)(v75 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v214 * v78;
          float v82 = (float)(v214 * v78) + v75;
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v33 * (float)((float)(*((unsigned __int16 *)result + 1) >> v63) - v31);
          float v85 = 8191.0;
          if ((float)(v74 + v84) <= 8191.0)
          {
            float v85 = v74 + v84;
            if ((float)(v74 + v84) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = 8191.0;
          if ((float)(v79 + v84) <= 8191.0)
          {
            float v86 = v79 + v84;
            if ((float)(v79 + v84) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = 8191.0;
          if ((float)(v81 + v84) <= 8191.0)
          {
            float v87 = v81 + v84;
            if ((float)(v81 + v84) < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v33 * (float)((float)(*(unsigned __int16 *)v69 >> v63) - v31);
          float v89 = 8191.0;
          if ((float)(v74 + v88) <= 8191.0)
          {
            float v89 = v74 + v88;
            if ((float)(v74 + v88) < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = 8191.0;
          if ((float)(v79 + v88) <= 8191.0)
          {
            float v90 = v79 + v88;
            if ((float)(v79 + v88) < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v81 + v88;
          BOOL v92 = (float)(v81 + v88) <= 8191.0;
          float v93 = 8191.0;
          if (v92)
          {
            float v93 = v91;
            if (v91 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v33 * (float)((float)(*((unsigned __int16 *)v69 + 1) >> v63) - v31);
          float v95 = v74 + v94;
          float v96 = 8191.0;
          if (v95 <= 8191.0)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v44;
          float v98 = v79 + v94;
          BOOL v92 = (float)(v79 + v94) <= 8191.0;
          float v99 = 8191.0;
          if (v92)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          float v100 = v42;
          float v101 = v81 + v94;
          float v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            float v102 = v101;
            if (v101 < 0.0) {
              float v102 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H4 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H5
            FCVT            S6, H6
          }
          _H7 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H26 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H3 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v130 = (float)((float)(v212 * _S2) + (float)(_S1 * v213)) + (float)(_S4 * v211);
          float v131 = (float)((float)(v209 * _S2) + (float)(_S1 * v210)) + (float)(_S4 * v207);
          _S1 = (float)((float)(v205 * _S2) + (float)(_S1 * v206)) + (float)(_S4 * v204);
          float v133 = (float)((float)(v212 * _S6) + (float)(_S5 * v213)) + (float)(_S7 * v211);
          float v134 = (float)((float)(v209 * _S6) + (float)(_S5 * v210)) + (float)(_S7 * v207);
          float v135 = (float)((float)(v205 * _S6) + (float)(_S5 * v206)) + (float)(_S7 * v204);
          float v136 = (float)((float)(v212 * _S27) + (float)(_S26 * v213)) + (float)(_S19 * v211);
          float v137 = (float)((float)(v209 * _S27) + (float)(_S26 * v210)) + (float)(_S19 * v207);
          float v138 = (float)((float)(v205 * _S27) + (float)(_S26 * v206)) + (float)(_S19 * v204);
          float v139 = (float)((float)(v212 * _S24) + (float)(_S3 * v213)) + (float)(_S25 * v211);
          float v140 = (float)((float)(v209 * _S24) + (float)(_S3 * v210)) + (float)(_S25 * v207);
          float v141 = (float)((float)(v205 * _S24) + (float)(_S3 * v206)) + (float)(_S25 * v204);
          LOWORD(_S7) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S27, H7 }
          LOWORD(_S7) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S28, H7 }
          LOWORD(_S1) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H25 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          float v42 = v100;
          float v154 = (float)(v218 * _S28) + (float)(v100 * _S27);
          float v44 = v97;
          float v155 = (float)(v154 + (float)(v97 * _S29)) + v36;
          float v156 = v38;
          if (v155 <= v38)
          {
            float v156 = v155;
            if (v155 < v36) {
              float v156 = v36;
            }
          }
          *(_WORD *)float v52 = llroundf(v156) << v64;
          if (v53)
          {
            float v157 = v198;
            float v158 = (float)((float)(v198 + (float)(_S27 * v43)) + (float)(_S28 * v208)) + (float)(_S29 * v219);
            float v159 = v40;
            if (v158 <= v40)
            {
              float v159 = (float)((float)(v198 + (float)(_S27 * v43)) + (float)(_S28 * v208)) + (float)(_S29 * v219);
              if (v158 < v203) {
                float v159 = v203;
              }
            }
            float v161 = v200;
            float v160 = v201;
            float v162 = (float)(v198 + (float)(_S27 * v201)) + (float)(_S28 * v200);
            float v163 = v199;
            float v164 = v162 + (float)(_S29 * v199);
            *(_WORD *)float v53 = llroundf(v159) << v64;
            float v165 = v40;
            float v31 = v196;
            float v33 = v197;
            if (v164 <= v40)
            {
              float v165 = v162 + (float)(_S29 * v199);
              if (v164 < v203) {
                float v165 = v203;
              }
            }
            *((_WORD *)v53 + 1) = llroundf(v165) << v64;
            v53 += 4;
            float v166 = v218;
          }
          else
          {
            float v31 = v196;
            float v33 = v197;
            float v166 = v218;
            float v161 = v200;
            float v160 = v201;
            float v157 = v198;
            float v163 = v199;
          }
          __asm
          {
            FCVT            S25, H25
            FCVT            S26, H26
            FCVT            S19, H19
          }
          float v170 = (float)((float)((float)(v166 * _S26) + (float)(v42 * _S25)) + (float)(v97 * _S19)) + v36;
          float v171 = v38;
          if (v170 <= v38)
          {
            float v171 = (float)((float)((float)(v166 * _S26) + (float)(v42 * _S25)) + (float)(v97 * _S19)) + v36;
            if (v170 < v36) {
              float v171 = v36;
            }
          }
          *((_WORD *)v52 + 1) = llroundf(v171) << v64;
          if (v53)
          {
            float v172 = (float)((float)(v157 + (float)(_S25 * v43)) + (float)(_S26 * v208)) + (float)(_S19 * v219);
            float v173 = v40;
            if (v172 <= v40)
            {
              float v173 = (float)((float)(v157 + (float)(_S25 * v43)) + (float)(_S26 * v208)) + (float)(_S19 * v219);
              if (v172 < v203) {
                float v173 = v203;
              }
            }
            float v174 = (float)((float)(v157 + (float)(_S25 * v160)) + (float)(_S26 * v161)) + (float)(_S19 * v163);
            *(_WORD *)float v53 = llroundf(v173) << v64;
            float v175 = v40;
            if (v174 <= v40)
            {
              float v175 = v174;
              if (v174 < v203) {
                float v175 = v203;
              }
            }
            *((_WORD *)v53 + 1) = llroundf(v175) << v64;
            v53 += 4;
          }
          __asm
          {
            FCVT            S7, H7
            FCVT            S2, H2
            FCVT            S19, H24
          }
          float v179 = (float)((float)((float)(v166 * _S2) + (float)(v42 * _S7)) + (float)(v97 * _S19)) + v36;
          float v180 = v38;
          if (v179 <= v38)
          {
            float v180 = (float)((float)((float)(v166 * _S2) + (float)(v42 * _S7)) + (float)(v97 * _S19)) + v36;
            if (v179 < v36) {
              float v180 = v36;
            }
          }
          *(_WORD *)uint64_t v71 = llroundf(v180) << v64;
          if (v70)
          {
            float v181 = (float)((float)(v157 + (float)(_S7 * v43)) + (float)(_S2 * v208)) + (float)(_S19 * v219);
            float v182 = v40;
            if (v181 <= v40)
            {
              float v182 = (float)((float)(v157 + (float)(_S7 * v43)) + (float)(_S2 * v208)) + (float)(_S19 * v219);
              if (v181 < v203) {
                float v182 = v203;
              }
            }
            float v183 = (float)((float)(v157 + (float)(_S7 * v160)) + (float)(_S2 * v161)) + (float)(_S19 * v163);
            *(_WORD *)unsigned __int8 v70 = llroundf(v182) << v64;
            float v184 = v40;
            if (v183 <= v40)
            {
              float v184 = v183;
              if (v183 < v203) {
                float v184 = v203;
              }
            }
            *((_WORD *)v70 + 1) = llroundf(v184) << v64;
            v70 += 4;
          }
          float v32 = v202;
          __asm
          {
            FCVT            S2, H4
            FCVT            S4, H5
            FCVT            S5, H6
          }
          float v188 = (float)((float)((float)(v166 * _S4) + (float)(v42 * _S2)) + (float)(v97 * _S5)) + v36;
          float v189 = v38;
          if (v188 <= v38)
          {
            float v189 = (float)((float)((float)(v166 * _S4) + (float)(v42 * _S2)) + (float)(v97 * _S5)) + v36;
            if (v188 < v36) {
              float v189 = v36;
            }
          }
          *((_WORD *)v71 + 1) = llroundf(v189) << v64;
          if (v70)
          {
            float v190 = (float)((float)(v157 + (float)(_S2 * v43)) + (float)(_S4 * v208)) + (float)(_S5 * v219);
            float v191 = v40;
            if (v190 <= v40)
            {
              float v191 = (float)((float)(v157 + (float)(_S2 * v43)) + (float)(_S4 * v208)) + (float)(_S5 * v219);
              if (v190 < v203) {
                float v191 = v203;
              }
            }
            float v192 = (float)((float)(v157 + (float)(_S2 * v160)) + (float)(_S4 * v161)) + (float)(_S5 * v163);
            *(_WORD *)unsigned __int8 v70 = llroundf(v191) << v64;
            float v193 = v40;
            if (v192 <= v40)
            {
              float v193 = v192;
              if (v192 < v203) {
                float v193 = v203;
              }
            }
            *((_WORD *)v70 + 1) = llroundf(v193) << v64;
            v70 += 4;
          }
          result += 4;
          v69 += 4;
          v52 += 4;
          v71 += 4;
          v68 += 2;
        }
        while (v10 > v68);
      }
      result = &v65[v21];
      v62 += v22;
      float v52 = &v67[v25];
      float v53 = &v66[v26];
      v9 += 2;
    }
    while (v13 > v9);
    if (v195 && v28)
    {
      size_t v194 = 2 * v10;
      do
      {
        result = (unsigned __int8 *)memcpy(v29, v24, v194);
        v24 += v23;
        v29 += v27;
        --v13;
      }
      while (v13);
    }
    else if (v28)
    {
      do
      {
        if (v10) {
          result = (unsigned __int8 *)memset(v29, 255, 2 * v10);
        }
        v29 += v27;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_xf444_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_xf444_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_xf444_neon_fp16_GCD(unint64_t result, uint64_t a2, double a3)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 36);
    uint64_t v13 = *(void *)(result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = *(void *)(result + 112);
    uint64_t v16 = *(void **)(result + 128);
    uint64_t v17 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v7);
    uint64_t v18 = *(float32x2_t **)(result + 152);
    uint64_t v20 = *(uint64_t **)(result + 56);
    uint64_t v19 = *(uint64_t **)(result + 64);
    uint64_t v21 = *(uint64_t **)(result + 136);
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    uint64_t v173 = v19[2];
    uint64_t v175 = v20[2];
    uint64_t v24 = *v21;
    uint64_t v25 = v21[1];
    uint64_t v26 = v21[2];
    uint64_t v174 = v16[2];
    uint64_t v27 = (char *)(v174 + v26 * v17 + 2 * v15);
    unsigned int v28 = v18[17].u16[2];
    unsigned int v29 = v18[17].u16[3];
    v3.i32[0] = v18[3].i32[1];
    unsigned int v30 = v18[18].u16[0];
    unsigned int v31 = v18[18].u16[1];
    LODWORD(v21) = v18[18].u16[2];
    *(float *)&a3 = (float)v28;
    *(short float *)v4.i16 = (short float)v28;
    unsigned int v32 = v18[18].u16[3];
    v3.i32[1] = v18[1].i32[0];
    unsigned int v33 = v18[19].u16[0];
    _S1 = v18[4].f32[1];
    _S2 = v18[5].f32[0];
    _S3 = v18[5].f32[1];
    _S11 = v18[6].f32[0];
    _S4 = v18[6].f32[1];
    _S5 = v18[7].f32[0];
    _S27 = v18[7].f32[1];
    _S28 = v18[8].f32[0];
    _S29 = v18[8].f32[1];
    float v43 = (char *)(v175 + v173 * v13 + 2 * v12);
    float v44 = (float)v18[17].u32[0] / (float)v18[16].u32[0];
    float v183 = (float)v29;
    float v45 = (float)v30;
    float v46 = (float)v31;
    float v47 = (float)v21;
    float v48 = (float)v32;
    _S23 = v44 * v18->f32[0];
    float v50 = (float)v33;
    __asm { FCVT            H8, S23 }
    float16x8_t v195 = (float16x8_t)vdupq_lane_s16(v4, 0);
    *(float32x2_t *)v5.f32 = vmul_n_f32(*(float32x2_t *)v3.f32, v44);
    *(float32x2_t *)v3.f32 = vmul_n_f32(v18[2], v44);
    int16x4_t v56 = (int16x4_t)vcvt_f16_f32(v3);
    short float v57 = -(short float)v29;
    float16x8_t v181 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v179 = vmulq_n_f16(v181, v57);
    float16x8_t v180 = (float16x8_t)vdupq_lane_s32((int32x2_t)v56, 0);
    float16x8_t v178 = vmulq_n_f16(v180, v57);
    __asm { FCVT            H6, S1 }
    short float v194 = _H6;
    *(short float *)v56.i16 = (short float)v30;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(v56, 0);
    *(short float *)v56.i16 = (short float)v31;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(v56, 0);
    *(short float *)v56.i16 = (short float)v21;
    float16x8_t v193 = (float16x8_t)vdupq_lane_s16(v56, 0);
    *(short float *)v56.i16 = (short float)v32;
    float16x8_t v190 = (float16x8_t)vdupq_lane_s16(v56, 0);
    __asm { FCVT            H6, S2 }
    short float v192 = _H6;
    *(short float *)v56.i16 = (short float)v33;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(v56, 0);
    LODWORD(v21) = v18[16].u8[4];
    unsigned __int8 v63 = 16 - (_BYTE)v21;
    if (v21 >= 0x11) {
      unsigned __int8 v63 = 0;
    }
    unsigned int v64 = v18[15].u8[4];
    if (v64 >= 0x11) {
      unsigned __int8 v65 = 0;
    }
    else {
      unsigned __int8 v65 = 16 - v64;
    }
    unint64_t v68 = v16;
    uint64_t v67 = *v16;
    uint64_t v66 = v68[1];
    if (v66) {
      unsigned int v69 = (__int16 *)(v66 + v25 * v17 + 2 * v15);
    }
    else {
      unsigned int v69 = 0;
    }
    unsigned __int8 v70 = (uint16x8_t *)(v67 + v24 * v17 + 2 * v15);
    if (v13 >= 0) {
      uint64_t v71 = v13;
    }
    else {
      uint64_t v71 = v13 + 1;
    }
    uint64_t v72 = *v20;
    uint64_t v73 = v20[1] + v23 * (v71 >> 1) + 2 * v12;
    float v74 = (uint16x8_t *)(v72 + v22 * v13 + 2 * v12);
    result = (v11 - 7);
    unsigned __int8 v75 = v65;
    unsigned __int8 v76 = v63;
    __asm { FCVT            H6, S3 }
    short float v191 = _H6;
    __asm { FCVT            H6, S11 }
    short float v189 = _H6;
    float v79 = _S4;
    __asm { FCVT            H4, S4 }
    short float v188 = _H4;
    float v81 = _S5;
    __asm { FCVT            H4, S5 }
    short float v187 = _H4;
    float v83 = _S27;
    __asm { FCVT            H4, S27 }
    short float v186 = _H4;
    float v85 = _S28;
    __asm { FCVT            H4, S28 }
    short float v185 = _H4;
    float v87 = _S29;
    __asm { FCVT            H4, S29 }
    short float v184 = _H4;
    uint16x8_t v89 = (uint16x8_t)vdupq_n_s16(-v65);
    uint16x8_t v90 = (uint16x8_t)vdupq_n_s16(v63);
    float v182 = v5.f32[0];
    uint64_t v91 = v3.i64[0];
    float v177 = v5.f32[1];
    float v176 = _S11;
    do
    {
      BOOL v92 = &v74->i8[v22];
      float v93 = &v70->i8[v24];
      float v94 = (char *)v69 + v25;
      if ((int)v11 < 8)
      {
        unint64_t v121 = 0;
        float v99 = (__int16 *)((char *)v69 + v25);
        float v98 = (uint16x8_t *)((char *)v70 + v24);
        float v97 = (uint16x8_t *)v73;
        float v96 = (uint16x8_t *)((char *)v74 + v22);
      }
      else
      {
        int v95 = 0;
        float v96 = (uint16x8_t *)((char *)v74 + v22);
        float v97 = (uint16x8_t *)v73;
        float v98 = (uint16x8_t *)((char *)v70 + v24);
        float v99 = (__int16 *)((char *)v69 + v25);
        do
        {
          uint16x8_t v100 = *v97++;
          float16x8_t v101 = vcvtq_f16_u16(vshlq_u16(v100, v89));
          int8x16_t v102 = (int8x16_t)vmlaq_f16(v179, v181, v101);
          int8x16_t v103 = (int8x16_t)vmlaq_f16(v178, v180, v101);
          v101.i64[0] = vextq_s8(v102, v102, 8uLL).u64[0];
          *(int16x4_t *)v104.i8 = vuzp1_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8);
          *(int16x4_t *)v101.i8 = vuzp2_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v101.i8);
          *(double *)&v101.i64[1] = a3;
          float16x8_t v105 = (float16x8_t)vzip1q_s16((int16x8_t)v101, (int16x8_t)v101);
          *(double *)&v104.i64[1] = a3;
          float16x8_t v106 = (float16x8_t)vzip1q_s16(v104, v104);
          v101.i64[0] = vextq_s8(v103, v103, 8uLL).u64[0];
          *(float16x4_t *)v101.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v101.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v101.i8));
          *(double *)&v101.i64[1] = a3;
          float16x8_t v107 = (float16x8_t)vzip1q_s16((int16x8_t)v101, (int16x8_t)v101);
          uint16x8_t v108 = *v74++;
          uint16x8_t v109 = vshlq_u16(v108, v89);
          uint16x8_t v110 = *v96++;
          uint16x8_t v111 = v110;
          float16x8_t v112 = vsubq_f16(vcvtq_f16_u16(v109), v195);
          float16x8_t v113 = vmlaq_n_f16(v105, v112, _H8);
          float16x8_t v114 = vmlaq_n_f16(v107, v112, _H8);
          float16x8_t v115 = vmlaq_n_f16(v106, v112, _H8);
          *v70++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v113, v194), v114, v192), v115, v191), v59), v193)), v90);
          if (v69)
          {
            v196.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v113, v189), v114, v188), v115, v187), v190), v62), v190), v62)), v90);
            v196.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v113, v186), v114, v185), v115, v184)), v90);
            vst2q_s16(v69, v196);
            v69 += 16;
          }
          float16x8_t v116 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v111, v89)), v195);
          float16x8_t v117 = vmlaq_n_f16(v105, v116, _H8);
          float16x8_t v118 = vmlaq_n_f16(v107, v116, _H8);
          float16x8_t v119 = vmlaq_n_f16(v106, v116, _H8);
          *v98++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v117, v194), v118, v192), v119, v191), v59), v193)), v90);
          if (v99)
          {
            float16x8_t v120 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v117, v186), v118, v185), v119, v184);
            v197.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v117, v189), v118, v188), v119, v187), v190), v62), v190), v62)), v90);
            v197.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(v120), v90);
            vst2q_s16(v99, v197);
            v99 += 16;
          }
          _S11 = v176;
          v95 += 8;
        }
        while (v95 < (int)result);
        unint64_t v121 = v11 & 0xFFFFFFF8;
      }
      while (v11 > v121)
      {
        float v122 = (float)(v97->u16[0] >> v75) - v183;
        float v123 = (float)(v97->u16[1] >> v75) - v183;
        float v124 = v177 * v123;
        float v125 = (float)(*((float *)&v91 + 1) * v123) + (float)(v122 * *(float *)&v91);
        float v126 = v182 * v122;
        float v127 = _S23 * (float)((float)(v74->u16[0] >> v75) - *(float *)&a3);
        float v128 = (float)(v177 * v123) + v127;
        float v129 = v127 + v125;
        float v130 = v126 + v127;
        float v131 = (float)((float)((float)(_S2 * (float)(v127 + v125)) + (float)(_S1 * v128))
                     + (float)(_S3 * (float)(v126 + v127)))
             + v45;
        float v132 = v47;
        if (v131 <= v47)
        {
          float v132 = (float)((float)((float)(_S2 * (float)(v127 + v125)) + (float)(_S1 * (float)(v124 + v127)))
                       + (float)(_S3 * (float)(v126 + v127)))
               + v45;
          if (v131 < v45) {
            float v132 = v45;
          }
        }
        unsigned int v133 = v74->u16[1];
        unsigned int v134 = v96->u16[0];
        unsigned int v135 = v96->u16[1];
        v70->i16[0] = llroundf(v132) << v76;
        if (v69)
        {
          float v136 = (float)((float)(v46 + (float)(v128 * _S11)) + (float)(v129 * v79)) + (float)(v130 * v81);
          float v137 = v50;
          if (v136 <= v50)
          {
            float v137 = (float)((float)(v46 + (float)(v128 * _S11)) + (float)(v129 * v79)) + (float)(v130 * v81);
            if (v136 < v48) {
              float v137 = v48;
            }
          }
          float v138 = (float)((float)(v46 + (float)(v128 * v83)) + (float)(v129 * v85)) + (float)(v130 * v87);
          __int16 *v69 = llroundf(v137) << v76;
          float v139 = v50;
          if (v138 <= v50)
          {
            if (v138 < v48) {
              float v139 = v48;
            }
            else {
              float v139 = v138;
            }
          }
          v69[1] = llroundf(v139) << v76;
          v69 += 2;
        }
        float v140 = _S23 * (float)((float)(int)(v133 >> v75) - *(float *)&a3);
        float v141 = v124 + v140;
        float v142 = v125 + v140;
        float v143 = v126 + v140;
        float v144 = (float)((float)((float)(_S2 * (float)(v125 + v140)) + (float)(_S1 * (float)(v124 + v140)))
                     + (float)(_S3 * (float)(v126 + v140)))
             + v45;
        float v145 = v47;
        if (v144 <= v47)
        {
          float v145 = (float)((float)((float)(_S2 * (float)(v125 + v140)) + (float)(_S1 * (float)(v124 + v140)))
                       + (float)(_S3 * (float)(v126 + v140)))
               + v45;
          if (v144 < v45) {
            float v145 = v45;
          }
        }
        v70->i16[1] = llroundf(v145) << v76;
        if (v69)
        {
          float v146 = (float)((float)(v46 + (float)(v141 * _S11)) + (float)(v142 * v79)) + (float)(v143 * v81);
          float v147 = v50;
          if (v146 <= v50)
          {
            float v147 = (float)((float)(v46 + (float)(v141 * _S11)) + (float)(v142 * v79)) + (float)(v143 * v81);
            if (v146 < v48) {
              float v147 = v48;
            }
          }
          float v148 = (float)((float)(v46 + (float)(v141 * v83)) + (float)(v142 * v85)) + (float)(v143 * v87);
          __int16 *v69 = llroundf(v147) << v76;
          float v149 = v50;
          if (v148 <= v50)
          {
            if (v148 < v48) {
              float v149 = v48;
            }
            else {
              float v149 = v148;
            }
          }
          v69[1] = llroundf(v149) << v76;
          v69 += 2;
        }
        float v150 = _S23 * (float)((float)(int)(v134 >> v75) - *(float *)&a3);
        float v151 = v124 + v150;
        float v152 = v125 + v150;
        float v153 = v126 + v150;
        float v154 = (float)((float)((float)(_S2 * (float)(v125 + v150)) + (float)(_S1 * (float)(v124 + v150)))
                     + (float)(_S3 * (float)(v126 + v150)))
             + v45;
        float v155 = v47;
        if (v154 <= v47)
        {
          float v155 = (float)((float)((float)(_S2 * (float)(v125 + v150)) + (float)(_S1 * (float)(v124 + v150)))
                       + (float)(_S3 * (float)(v126 + v150)))
               + v45;
          if (v154 < v45) {
            float v155 = v45;
          }
        }
        v98->i16[0] = llroundf(v155) << v76;
        if (v99)
        {
          float v156 = (float)((float)(v46 + (float)(v151 * _S11)) + (float)(v152 * v79)) + (float)(v153 * v81);
          float v157 = v50;
          if (v156 <= v50)
          {
            float v157 = (float)((float)(v46 + (float)(v151 * _S11)) + (float)(v152 * v79)) + (float)(v153 * v81);
            if (v156 < v48) {
              float v157 = v48;
            }
          }
          float v158 = (float)((float)(v46 + (float)(v151 * v83)) + (float)(v152 * v85)) + (float)(v153 * v87);
          *float v99 = llroundf(v157) << v76;
          float v159 = v50;
          if (v158 <= v50)
          {
            if (v158 < v48) {
              float v159 = v48;
            }
            else {
              float v159 = v158;
            }
          }
          v99[1] = llroundf(v159) << v76;
          float v160 = v99 + 2;
        }
        else
        {
          float v160 = 0;
        }
        float v161 = _S23 * (float)((float)(int)(v135 >> v75) - *(float *)&a3);
        float v162 = v124 + v161;
        float v163 = v125 + v161;
        float v164 = v126 + v161;
        float v165 = (float)((float)(_S2 * (float)(v125 + v161)) + (float)(_S1 * (float)(v124 + v161))) + (float)(_S3 * v164);
        float v166 = v47;
        if ((float)(v165 + v45) <= v47)
        {
          float v166 = v165 + v45;
          if ((float)(v165 + v45) < v45) {
            float v166 = v45;
          }
        }
        v98->i16[1] = llroundf(v166) << v76;
        if (v160)
        {
          float v167 = (float)((float)(v46 + (float)(v162 * _S11)) + (float)(v163 * v79)) + (float)(v164 * v81);
          float v168 = v50;
          if (v167 <= v50)
          {
            float v168 = (float)((float)(v46 + (float)(v162 * _S11)) + (float)(v163 * v79)) + (float)(v164 * v81);
            if (v167 < v48) {
              float v168 = v48;
            }
          }
          float v169 = (float)(v46 + (float)(v162 * v83)) + (float)(v163 * v85);
          float v170 = v169 + (float)(v164 * v87);
          _WORD *v160 = llroundf(v168) << v76;
          float v171 = v50;
          if (v170 <= v50)
          {
            float v171 = v169 + (float)(v164 * v87);
            if (v170 < v48) {
              float v171 = v48;
            }
          }
          v160[1] = llroundf(v171) << v76;
          float v99 = v160 + 2;
        }
        else
        {
          float v99 = 0;
        }
        v121 += 2;
        float v97 = (uint16x8_t *)((char *)v97 + 4);
        float v74 = (uint16x8_t *)((char *)v74 + 4);
        float v96 = (uint16x8_t *)((char *)v96 + 4);
        unsigned __int8 v70 = (uint16x8_t *)((char *)v70 + 4);
        float v98 = (uint16x8_t *)((char *)v98 + 4);
      }
      float v74 = (uint16x8_t *)&v92[v22];
      v73 += v23;
      unsigned __int8 v70 = (uint16x8_t *)&v93[v24];
      unsigned int v69 = (__int16 *)&v94[v25];
      v10 += 2;
    }
    while (v14 > v10);
    if (v175 && v174)
    {
      size_t v172 = 2 * v11;
      do
      {
        result = (unint64_t)memcpy(v27, v43, v172);
        v43 += v173;
        v27 += v26;
        --v14;
      }
      while (v14);
    }
    else if (v174)
    {
      do
      {
        if (v11) {
          result = (unint64_t)memset(v27, 255, 2 * v11);
        }
        v27 += v26;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_xf444_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 36);
    uint64_t v13 = *(void *)(result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = *(void *)(result + 112);
    uint64_t v16 = *(void **)(result + 128);
    uint64_t v17 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v7);
    uint64_t v18 = *(void *)(result + 152);
    uint64_t v20 = *(void **)(result + 56);
    uint64_t v19 = *(uint64_t **)(result + 64);
    uint64_t v21 = *(uint64_t **)(result + 136);
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    uint64_t v24 = v19[2];
    uint64_t v125 = v20[2];
    uint64_t v25 = (char *)(v125 + v24 * v13 + 2 * v12);
    uint64_t v26 = *v21;
    uint64_t v27 = v21[1];
    uint64_t v28 = v21[2];
    uint64_t v29 = v16[2];
    uint64_t v30 = (char *)(v29 + v28 * v17 + 2 * v15);
    *(float *)&unsigned int v31 = (float)*(unsigned int *)(v18 + 128);
    *(float *)&unsigned int v32 = (float)*(unsigned int *)(v18 + 136);
    float v33 = *(float *)&v32 / *(float *)&v31;
    LOWORD(v31) = *(_WORD *)(v18 + 140);
    float v34 = (float)v31;
    LOWORD(v32) = *(_WORD *)(v18 + 142);
    float v35 = (float)v32;
    float v36 = v33 * *(float *)v18;
    float v37 = v33 * *(float *)(v18 + 8);
    float v38 = v33 * *(float *)(v18 + 16);
    float v39 = v33 * *(float *)(v18 + 20);
    float v40 = *(float *)(v18 + 28);
    float v41 = v33 * v40;
    LOWORD(v40) = *(_WORD *)(v18 + 144);
    float v42 = (float)LODWORD(v40);
    LOWORD(v2) = *(_WORD *)(v18 + 146);
    float v43 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v18 + 148);
    float v44 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v18 + 150);
    float v45 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v18 + 152);
    float v46 = (float)v5;
    float v47 = *(float *)(v18 + 36);
    float v48 = *(float *)(v18 + 40);
    float v49 = *(float *)(v18 + 44);
    float v50 = *(float *)(v18 + 48);
    float v51 = *(float *)(v18 + 52);
    float v52 = *(float *)(v18 + 56);
    float v53 = *(float *)(v18 + 60);
    float v54 = *(float *)(v18 + 64);
    float v55 = *(float *)(v18 + 68);
    uint64_t v56 = v16[1];
    short float v57 = (char *)(*v16 + v26 * v17 + 2 * v15);
    if (v56) {
      char v58 = (char *)(v56 + v27 * v17 + 2 * v15);
    }
    else {
      char v58 = 0;
    }
    uint64_t v59 = v20[1];
    float16x8_t v60 = (char *)(*v20 + v22 * v13 + 2 * v12);
    unsigned int v61 = *(unsigned __int8 *)(v18 + 132);
    BOOL v62 = v61 >= 0x11;
    char v63 = 16 - v61;
    if (v62) {
      char v64 = 0;
    }
    else {
      char v64 = v63;
    }
    LODWORD(result) = *(unsigned __int8 *)(v18 + 124);
    if (result >= 0x11) {
      LOBYTE(result) = 0;
    }
    else {
      LOBYTE(result) = 16 - result;
    }
    if (v13 >= 0) {
      uint64_t v65 = v13;
    }
    else {
      uint64_t v65 = v13 + 1;
    }
    uint64_t v66 = v59 + v23 * (v65 >> 1) + 2 * v12;
    result = result;
    char v67 = v64;
    do
    {
      unint64_t v68 = &v60[v22];
      unsigned int v69 = &v58[v27];
      unsigned __int8 v70 = &v57[v26];
      if (v11)
      {
        unint64_t v71 = 0;
        uint64_t v72 = &v60[v22];
        uint64_t v73 = &v57[v26];
        float v74 = &v58[v27];
        do
        {
          unsigned __int8 v75 = (unsigned __int16 *)(v66 + 2 * v71);
          float v76 = (float)(*v75 >> result) - v35;
          float v77 = (float)(v75[1] >> result) - v35;
          float v78 = v37 * v77;
          float v79 = (float)(v39 * v77) + (float)(v76 * v38);
          float v80 = v41 * v76;
          float v81 = v36 * (float)((float)(*(unsigned __int16 *)v60 >> result) - v34);
          float v82 = v78 + v81;
          float v83 = v81 + v79;
          float v84 = v80 + v81;
          float v85 = (float)((float)((float)(v48 * v83) + (float)(v47 * v82)) + (float)(v49 * v84)) + v42;
          float v86 = v44;
          if (v85 <= v44)
          {
            float v86 = (float)((float)((float)(v48 * v83) + (float)(v47 * v82)) + (float)(v49 * v84)) + v42;
            if (v85 < v42) {
              float v86 = v42;
            }
          }
          unsigned int v87 = *((unsigned __int16 *)v60 + 1);
          unsigned int v88 = *(unsigned __int16 *)v72;
          unsigned int v89 = *((unsigned __int16 *)v72 + 1);
          *(_WORD *)short float v57 = llroundf(v86) << v67;
          if (v58)
          {
            float v90 = (float)((float)(v43 + (float)(v82 * v50)) + (float)(v83 * v51)) + (float)(v84 * v52);
            float v91 = v46;
            if (v90 <= v46)
            {
              float v91 = (float)((float)(v43 + (float)(v82 * v50)) + (float)(v83 * v51)) + (float)(v84 * v52);
              if (v90 < v45) {
                float v91 = v45;
              }
            }
            float v92 = (float)((float)(v43 + (float)(v82 * v53)) + (float)(v83 * v54)) + (float)(v84 * v55);
            *(_WORD *)char v58 = llroundf(v91) << v67;
            float v93 = v46;
            if (v92 <= v46)
            {
              if (v92 < v45) {
                float v93 = v45;
              }
              else {
                float v93 = v92;
              }
            }
            *((_WORD *)v58 + 1) = llroundf(v93) << v67;
            v58 += 4;
          }
          float v94 = v36 * (float)((float)(int)(v87 >> result) - v34);
          float v95 = v78 + v94;
          float v96 = v79 + v94;
          float v97 = v80 + v94;
          float v98 = (float)((float)((float)(v48 * v96) + (float)(v47 * v95)) + (float)(v49 * v97)) + v42;
          float v99 = v44;
          if (v98 <= v44)
          {
            float v99 = (float)((float)((float)(v48 * v96) + (float)(v47 * v95)) + (float)(v49 * v97)) + v42;
            if (v98 < v42) {
              float v99 = v42;
            }
          }
          *((_WORD *)v57 + 1) = llroundf(v99) << v67;
          if (v58)
          {
            float v100 = (float)((float)(v43 + (float)(v95 * v50)) + (float)(v96 * v51)) + (float)(v97 * v52);
            float v101 = v46;
            if (v100 <= v46)
            {
              float v101 = (float)((float)(v43 + (float)(v95 * v50)) + (float)(v96 * v51)) + (float)(v97 * v52);
              if (v100 < v45) {
                float v101 = v45;
              }
            }
            float v102 = (float)((float)(v43 + (float)(v95 * v53)) + (float)(v96 * v54)) + (float)(v97 * v55);
            *(_WORD *)char v58 = llroundf(v101) << v67;
            float v103 = v46;
            if (v102 <= v46)
            {
              if (v102 < v45) {
                float v103 = v45;
              }
              else {
                float v103 = v102;
              }
            }
            *((_WORD *)v58 + 1) = llroundf(v103) << v67;
            v58 += 4;
          }
          float v104 = v36 * (float)((float)(int)(v88 >> result) - v34);
          float v105 = v78 + v104;
          float v106 = v79 + v104;
          float v107 = v80 + v104;
          float v108 = (float)((float)((float)(v48 * v106) + (float)(v47 * v105)) + (float)(v49 * v107)) + v42;
          float v109 = v44;
          if (v108 <= v44)
          {
            float v109 = (float)((float)((float)(v48 * v106) + (float)(v47 * v105)) + (float)(v49 * v107)) + v42;
            if (v108 < v42) {
              float v109 = v42;
            }
          }
          *(_WORD *)uint64_t v73 = llroundf(v109) << v67;
          if (v74)
          {
            float v110 = (float)((float)(v43 + (float)(v105 * v50)) + (float)(v106 * v51)) + (float)(v107 * v52);
            float v111 = v46;
            if (v110 <= v46)
            {
              float v111 = (float)((float)(v43 + (float)(v105 * v50)) + (float)(v106 * v51)) + (float)(v107 * v52);
              if (v110 < v45) {
                float v111 = v45;
              }
            }
            float v112 = (float)((float)(v43 + (float)(v105 * v53)) + (float)(v106 * v54)) + (float)(v107 * v55);
            *(_WORD *)float v74 = llroundf(v111) << v67;
            float v113 = v46;
            if (v112 <= v46)
            {
              if (v112 < v45) {
                float v113 = v45;
              }
              else {
                float v113 = v112;
              }
            }
            *((_WORD *)v74 + 1) = llroundf(v113) << v67;
            v74 += 4;
          }
          float v114 = v36 * (float)((float)(int)(v89 >> result) - v34);
          float v115 = v78 + v114;
          float v116 = v79 + v114;
          float v117 = v80 + v114;
          float v118 = (float)((float)((float)(v48 * v116) + (float)(v47 * v115)) + (float)(v49 * v117)) + v42;
          float v119 = v44;
          if (v118 <= v44)
          {
            float v119 = (float)((float)((float)(v48 * v116) + (float)(v47 * v115)) + (float)(v49 * v117)) + v42;
            if (v118 < v42) {
              float v119 = v42;
            }
          }
          *((_WORD *)v73 + 1) = llroundf(v119) << v67;
          if (v74)
          {
            float v120 = (float)((float)(v43 + (float)(v115 * v50)) + (float)(v116 * v51)) + (float)(v117 * v52);
            float v121 = v46;
            if (v120 <= v46)
            {
              float v121 = (float)((float)(v43 + (float)(v115 * v50)) + (float)(v116 * v51)) + (float)(v117 * v52);
              if (v120 < v45) {
                float v121 = v45;
              }
            }
            float v122 = (float)((float)(v43 + (float)(v115 * v53)) + (float)(v116 * v54)) + (float)(v117 * v55);
            *(_WORD *)float v74 = llroundf(v121) << v67;
            float v123 = v46;
            if (v122 <= v46)
            {
              float v123 = v122;
              if (v122 < v45) {
                float v123 = v45;
              }
            }
            *((_WORD *)v74 + 1) = llroundf(v123) << v67;
            v74 += 4;
          }
          v60 += 4;
          v72 += 4;
          v57 += 4;
          v73 += 4;
          v71 += 2;
        }
        while (v11 > v71);
      }
      float16x8_t v60 = &v68[v22];
      v66 += v23;
      short float v57 = &v70[v26];
      char v58 = &v69[v27];
      v10 += 2;
    }
    while (v14 > v10);
    if (v125 && v29)
    {
      size_t v124 = 2 * v11;
      do
      {
        result = (unint64_t)memcpy(v30, v25, v124);
        v25 += v24;
        v30 += v28;
        --v14;
      }
      while (v14);
    }
    else if (v29)
    {
      do
      {
        if (v11) {
          result = (unint64_t)memset(v30, 255, 2 * v11);
        }
        v30 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

uint16x8_t *vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD(void *a1, uint64_t a2, double a3, int16x4_t a4, double a5, double a6, float32x4_t a7, float32x4_t a8)
{
  char v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = *(void *)((char *)a1 + 20);
  uint64_t v11 = *(void *)((char *)a1 + 36);
  uint64_t v12 = *(void *)((char *)a1 + 44);
  uint64_t v13 = *(void *)((char *)a1 + 28);
  unint64_t v14 = 2 * *(unsigned __int8 *)a1;
  uint64_t v15 = 2 * (v13 * a2 / v14);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = 2 * ((v13 + v13 * a2) / v14);
  uint64_t v18 = v12 + v17;
  uint64_t v19 = a1[15];
  uint64_t v331 = a1[14];
  unint64_t v20 = a1[13] * a2;
  uint64_t v21 = a1[19];
  uint64_t v23 = (uint64_t *)a1[7];
  size_t v22 = (uint64_t *)a1[8];
  uint64_t v24 = (uint64_t *)a1[16];
  uint64_t v25 = (uint64_t *)a1[17];
  uint64_t v26 = *v22;
  uint64_t v27 = v22[1];
  uint64_t v328 = *v23;
  uint64_t v310 = v23[1];
  uint64_t v28 = v22[2];
  result = (uint16x8_t *)v23[2];
  uint64_t v30 = *v25;
  uint64_t v31 = *v24;
  unsigned int v32 = *(_DWORD *)(v21 + 128);
  int v345 = *(_DWORD *)(v21 + 158);
  unsigned int v33 = *(unsigned __int16 *)(v21 + 140);
  unsigned int v34 = *(unsigned __int8 *)(v21 + 124);
  unsigned int v35 = *(unsigned __int16 *)(v21 + 142);
  float v36 = *(float *)v21;
  __int32 v37 = *(_DWORD *)(v21 + 8);
  float32x2_t v38 = *(float32x2_t *)(v21 + 16);
  uint64_t v39 = v19 + 2 * (v20 / v14);
  v40.i32[0] = *(_DWORD *)(v21 + 28);
  float v342 = *(float *)(v21 + 72);
  float v341 = *(float *)(v21 + 76);
  if (v16 >= 0) {
    uint64_t v41 = v16;
  }
  else {
    uint64_t v41 = v16 + 1;
  }
  float v340 = *(float *)(v21 + 80);
  float v339 = *(float *)(v21 + 84);
  uint64_t v309 = v27;
  uint64_t v42 = v27 * (v41 >> 1);
  float v338 = *(float *)(v21 + 88);
  float v337 = *(float *)(v21 + 92);
  uint64_t v43 = v30 * v39;
  float v336 = *(float *)(v21 + 96);
  float v335 = *(float *)(v21 + 100);
  _S6 = *(float *)(v21 + 108);
  float v334 = *(float *)(v21 + 104);
  _S20 = *(float *)(v21 + 112);
  _S18 = *(float *)(v21 + 116);
  _S16 = *(float *)(v21 + 120);
  long long v343 = 0u;
  long long v344 = 0u;
  do
  {
    int v48 = 0;
    char v49 = *((unsigned char *)&v345 + v9);
    do
    {
      *(unsigned char *)(((unint64_t)&v343 + ((v49 + 4 * v48) & 0xF8)) | (v49 + 4 * (_BYTE)v48) & 7) = v8 + v48;
      ++v48;
    }
    while (v48 != 8);
    ++v9;
    v8 += 8;
  }
  while (v9 != 4);
  if (v17 != v15)
  {
    unint64_t v50 = 0;
    unint64_t v308 = v18 - v16;
    uint64_t v51 = v21 + 16548;
    _S0 = 8191.0 / (float)v32;
    float v53 = (float)v33;
    float v54 = (float)v35;
    _S31 = _S0 * v36;
    *(short float *)a4.i16 = (short float)v33;
    uint64_t v56 = v21 + 32932;
    uint64_t v57 = v21 + 164;
    __asm { FCVT            H3, S31 }
    float16x8_t v332 = (float16x8_t)vdupq_lane_s16(a4, 0);
    short float v333 = _H3;
    short float v63 = -(short float)v35;
    v40.i32[1] = v37;
    *(float32x2_t *)a7.f32 = vmul_n_f32(v40, _S0);
    *(float32x2_t *)a8.f32 = vmul_n_f32(v38, _S0);
    float16x8_t v330 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    float16x8_t v326 = vmulq_n_f16(v330, v63);
    float16x8_t v327 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    __asm { FCVT            H0, S6 }
    short float v324 = *(short float *)&_S0;
    float16x8_t v325 = vmulq_n_f16(v327, v63);
    __asm { FCVT            H0, S20 }
    short float v323 = *(short float *)&_S0;
    __asm { FCVT            H0, S18 }
    short float v322 = *(short float *)&_S0;
    __asm { FCVT            H0, S16 }
    short float v321 = *(short float *)&_S0;
    _S0 = v342;
    __asm { FCVT            H0, S0 }
    short float v320 = *(short float *)&_S0;
    _S0 = v341;
    __asm { FCVT            H0, S0 }
    short float v319 = *(short float *)&_S0;
    _S0 = v340;
    __asm { FCVT            H0, S0 }
    short float v318 = *(short float *)&_S0;
    _S0 = v339;
    __asm { FCVT            H0, S0 }
    short float v317 = *(short float *)&_S0;
    _S0 = v338;
    __asm { FCVT            H0, S0 }
    short float v316 = *(short float *)&_S0;
    _S0 = v337;
    __asm { FCVT            H0, S0 }
    short float v315 = *(short float *)&_S0;
    _S0 = v336;
    __asm { FCVT            H0, S0 }
    short float v314 = *(short float *)&_S0;
    _S0 = v335;
    __asm { FCVT            H0, S0 }
    short float v313 = *(short float *)&_S0;
    _S0 = v334;
    __asm { FCVT            H0, S0 }
    short float v312 = *(short float *)&_S0;
    uint64_t v73 = v310 + v42;
    if (v34 >= 0x11) {
      unsigned __int8 v74 = 0;
    }
    else {
      unsigned __int8 v74 = 16 - v34;
    }
    unsigned __int8 v75 = (float16x8_t *)(v31 + v43 + 4 * v331);
    if (result) {
      uint64_t v76 = (uint64_t)result->i64 + 2 * v11 + v28 * v16;
    }
    else {
      uint64_t v76 = 0;
    }
    result = (uint16x8_t *)(v73 + 2 * v11);
    float v77 = (uint16x8_t *)(v328 + v26 * v16 + 2 * v11);
    unsigned __int8 v78 = v74;
    uint16x8_t v311 = (uint16x8_t)vdupq_n_s16(-v74);
    float v329 = a8.f32[0];
    unint64_t v79 = a7.i64[0];
    float16x8_t v80 = 0uLL;
    do
    {
      float v81 = &v77->i8[v26];
      float v82 = &v75->i8[v30];
      if ((int)v10 < 8)
      {
        unint64_t v169 = 0;
        unsigned int v87 = (uint32x4_t *)&v75->i8[v30];
        float v86 = result;
        float v85 = (uint16x8_t *)((char *)v77 + v26);
      }
      else
      {
        int v83 = 0;
        int8x8_t v84 = *(int8x8_t *)((char *)&v343 + 8);
        float v85 = (uint16x8_t *)((char *)v77 + v26);
        float v86 = result;
        unsigned int v87 = (uint32x4_t *)&v75->i8[v30];
        do
        {
          if (v76)
          {
            int16x8_t v88 = (int16x8_t)vcvtq_u32_f32((float32x4_t)v80);
            int8x8_t v89 = vmovn_s16(vuzp1q_s16(v88, v88));
          }
          else
          {
            int8x8_t v89 = (int8x8_t)-1;
          }
          uint16x8_t v90 = *v86++;
          float16x8_t v91 = vcvtq_f16_u16(vshlq_u16(v90, v311));
          int8x16_t v92 = (int8x16_t)vmlaq_f16(v326, v330, v91);
          int8x16_t v93 = (int8x16_t)vmlaq_f16(v325, v327, v91);
          v91.i64[0] = vextq_s8(v92, v92, 8uLL).u64[0];
          *(int16x4_t *)v94.i8 = vuzp1_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v91.i8);
          *(int16x4_t *)v91.i8 = vuzp2_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v91.i8);
          v91.i64[1] = v91.i64[0];
          float16x8_t v95 = (float16x8_t)vzip1q_s16((int16x8_t)v91, (int16x8_t)v91);
          v94.i64[1] = v91.i64[0];
          float16x8_t v96 = (float16x8_t)vzip1q_s16(v94, v94);
          v91.i64[0] = vextq_s8(v93, v93, 8uLL).u64[0];
          *(float16x4_t *)v91.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v91.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v91.i8));
          v91.i64[1] = v91.i64[0];
          uint16x8_t v97 = *v77++;
          float16x8_t v98 = (float16x8_t)vzip1q_s16((int16x8_t)v91, (int16x8_t)v91);
          float16x8_t v99 = vcvtq_f16_u16(vshlq_u16(v97, v311));
          uint16x8_t v100 = *v85++;
          float16x8_t v101 = vsubq_f16(v99, v332);
          float16x8_t v102 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v100, v311)), v332);
          float16x8_t v103 = vmlaq_n_f16(v95, v101, v333);
          float16x8_t v104 = vmlaq_n_f16(v95, v102, v333);
          float16x8_t v105 = vmlaq_n_f16(v98, v101, v333);
          float16x8_t v106 = vmlaq_n_f16(v98, v102, v333);
          float16x8_t v107 = vmlaq_n_f16(v96, v101, v333);
          float16x8_t v108 = vmlaq_n_f16(v96, v102, v333);
          v109.i64[0] = 0x9000900090009000;
          v109.i64[1] = 0x9000900090009000;
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v103, v80), v109));
          uint32x4_t v111 = vmovl_high_u16(v110);
          uint32x4_t v112 = vmovl_u16(*(uint16x4_t *)v110.i8);
          v113.i16[0] = *(_WORD *)(v57 + 2 * v112.u32[0]);
          v113.i16[1] = *(_WORD *)(v57 + 2 * v112.u32[1]);
          v113.i16[2] = *(_WORD *)(v57 + 2 * v112.u32[2]);
          v113.i16[3] = *(_WORD *)(v57 + 2 * v112.u32[3]);
          v113.i16[4] = *(_WORD *)(v57 + 2 * v111.u32[0]);
          v113.i16[5] = *(_WORD *)(v57 + 2 * v111.u32[1]);
          v113.i16[6] = *(_WORD *)(v57 + 2 * v111.u32[2]);
          v113.i16[7] = *(_WORD *)(v57 + 2 * v111.u32[3]);
          uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v105, v80), v109));
          uint32x4_t v115 = vmovl_high_u16(v114);
          uint32x4_t v116 = vmovl_u16(*(uint16x4_t *)v114.i8);
          v117.i16[0] = *(_WORD *)(v57 + 2 * v116.u32[0]);
          v117.i16[1] = *(_WORD *)(v57 + 2 * v116.u32[1]);
          v117.i16[2] = *(_WORD *)(v57 + 2 * v116.u32[2]);
          v117.i16[3] = *(_WORD *)(v57 + 2 * v116.u32[3]);
          v117.i16[4] = *(_WORD *)(v57 + 2 * v115.u32[0]);
          v117.i16[5] = *(_WORD *)(v57 + 2 * v115.u32[1]);
          v117.i16[6] = *(_WORD *)(v57 + 2 * v115.u32[2]);
          v117.i16[7] = *(_WORD *)(v57 + 2 * v115.u32[3]);
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v107, v80), v109));
          uint32x4_t v119 = vmovl_high_u16(v118);
          uint32x4_t v120 = vmovl_u16(*(uint16x4_t *)v118.i8);
          v121.i16[0] = *(_WORD *)(v57 + 2 * v120.u32[0]);
          v121.i16[1] = *(_WORD *)(v57 + 2 * v120.u32[1]);
          v121.i16[2] = *(_WORD *)(v57 + 2 * v120.u32[2]);
          v121.i16[3] = *(_WORD *)(v57 + 2 * v120.u32[3]);
          v121.i16[4] = *(_WORD *)(v57 + 2 * v119.u32[0]);
          v121.i16[5] = *(_WORD *)(v57 + 2 * v119.u32[1]);
          v121.i16[6] = *(_WORD *)(v57 + 2 * v119.u32[2]);
          v121.i16[7] = *(_WORD *)(v57 + 2 * v119.u32[3]);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v104, v80), v109));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v104.i16[0] = *(_WORD *)(v57 + 2 * v124.u32[0]);
          v104.i16[1] = *(_WORD *)(v57 + 2 * v124.u32[1]);
          v104.i16[2] = *(_WORD *)(v57 + 2 * v124.u32[2]);
          v104.i16[3] = *(_WORD *)(v57 + 2 * v124.u32[3]);
          v104.i16[4] = *(_WORD *)(v57 + 2 * v123.u32[0]);
          v104.i16[5] = *(_WORD *)(v57 + 2 * v123.u32[1]);
          v104.i16[6] = *(_WORD *)(v57 + 2 * v123.u32[2]);
          v104.i16[7] = *(_WORD *)(v57 + 2 * v123.u32[3]);
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v106, v80), v109));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          v106.i16[0] = *(_WORD *)(v57 + 2 * v127.u32[0]);
          v106.i16[1] = *(_WORD *)(v57 + 2 * v127.u32[1]);
          v106.i16[2] = *(_WORD *)(v57 + 2 * v127.u32[2]);
          v106.i16[3] = *(_WORD *)(v57 + 2 * v127.u32[3]);
          v106.i16[4] = *(_WORD *)(v57 + 2 * v126.u32[0]);
          v106.i16[5] = *(_WORD *)(v57 + 2 * v126.u32[1]);
          v106.i16[6] = *(_WORD *)(v57 + 2 * v126.u32[2]);
          v106.i16[7] = *(_WORD *)(v57 + 2 * v126.u32[3]);
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, v80), v109));
          uint32x4_t v129 = vmovl_high_u16(v128);
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v128.i8);
          v131.i16[0] = *(_WORD *)(v57 + 2 * v130.u32[0]);
          v131.i16[1] = *(_WORD *)(v57 + 2 * v130.u32[1]);
          v131.i16[2] = *(_WORD *)(v57 + 2 * v130.u32[2]);
          v131.i16[3] = *(_WORD *)(v57 + 2 * v130.u32[3]);
          v131.i16[4] = *(_WORD *)(v57 + 2 * v129.u32[0]);
          v131.i16[5] = *(_WORD *)(v57 + 2 * v129.u32[1]);
          v131.i16[6] = *(_WORD *)(v57 + 2 * v129.u32[2]);
          v131.i16[7] = *(_WORD *)(v57 + 2 * v129.u32[3]);
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v113, v324), v117, v323), v121, v322), vmaxq_f16(vmaxq_f16(v113, v117), v121), v321), v80), v109));
          uint32x4_t v133 = vmovl_high_u16(v132);
          float16x8_t v134 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v132.i8);
          v134.i16[0] = *(_WORD *)(v51 + 2 * v134.u32[0]);
          v134.i16[1] = *(_WORD *)(v51 + 2 * v134.u32[1]);
          v134.i16[2] = *(_WORD *)(v51 + 2 * v134.u32[2]);
          v134.i16[3] = *(_WORD *)(v51 + 2 * v134.u32[3]);
          v134.i16[4] = *(_WORD *)(v51 + 2 * v133.u32[0]);
          v134.i16[5] = *(_WORD *)(v51 + 2 * v133.u32[1]);
          v134.i16[6] = *(_WORD *)(v51 + 2 * v133.u32[2]);
          v134.i16[7] = *(_WORD *)(v51 + 2 * v133.u32[3]);
          float16x8_t v135 = vmulq_f16(v113, v134);
          float16x8_t v136 = vmulq_f16(v117, v134);
          float16x8_t v137 = vmulq_f16(v121, v134);
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v104, v324), v106, v323), v131, v322), vmaxq_f16(vmaxq_f16(v104, v106), v131), v321), v80), v109));
          uint32x4_t v139 = vmovl_high_u16(v138);
          float16x8_t v140 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v138.i8);
          v140.i16[0] = *(_WORD *)(v51 + 2 * v140.u32[0]);
          v140.i16[1] = *(_WORD *)(v51 + 2 * v140.u32[1]);
          v140.i16[2] = *(_WORD *)(v51 + 2 * v140.u32[2]);
          v140.i16[3] = *(_WORD *)(v51 + 2 * v140.u32[3]);
          v140.i16[4] = *(_WORD *)(v51 + 2 * v139.u32[0]);
          v140.i16[5] = *(_WORD *)(v51 + 2 * v139.u32[1]);
          v140.i16[6] = *(_WORD *)(v51 + 2 * v139.u32[2]);
          v140.i16[7] = *(_WORD *)(v51 + 2 * v139.u32[3]);
          float16x8_t v141 = vmulq_f16(v104, v140);
          float16x8_t v142 = vmulq_f16(v106, v140);
          float16x8_t v143 = vmulq_f16(v131, v140);
          float16x8_t v144 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v135, v320), v136, v319), v137, v318);
          v347.val[1] = (int8x16_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v135, v317), v136, v316), v137, v315);
          float16x8_t v145 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, v312), v136, v313), v135, v314);
          float16x8_t v146 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v141, v320), v142, v319), v143, v318);
          v346.val[1] = (int8x16_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v141, v317), v142, v316), v143, v315);
          float16x8_t v147 = vmlaq_n_f16(vmulq_n_f16(v143, v312), v142, v313);
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v144, v80), v109));
          uint32x4_t v149 = vmovl_high_u16(v148);
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v148.i8);
          v135.i16[0] = *(_WORD *)(v56 + 2 * v150.u32[0]);
          v135.i16[1] = *(_WORD *)(v56 + 2 * v150.u32[1]);
          v135.i16[2] = *(_WORD *)(v56 + 2 * v150.u32[2]);
          v135.i16[3] = *(_WORD *)(v56 + 2 * v150.u32[3]);
          v135.i16[4] = *(_WORD *)(v56 + 2 * v149.u32[0]);
          v135.i16[5] = *(_WORD *)(v56 + 2 * v149.u32[1]);
          v135.i16[6] = *(_WORD *)(v56 + 2 * v149.u32[2]);
          v135.i16[7] = *(_WORD *)(v56 + 2 * v149.u32[3]);
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v347.val[1], v80), v109));
          uint32x4_t v152 = vmovl_high_u16(v151);
          uint32x4_t v153 = vmovl_u16(*(uint16x4_t *)v151.i8);
          v121.i16[0] = *(_WORD *)(v56 + 2 * v153.u32[0]);
          v121.i16[1] = *(_WORD *)(v56 + 2 * v153.u32[1]);
          v121.i16[2] = *(_WORD *)(v56 + 2 * v153.u32[2]);
          v121.i16[3] = *(_WORD *)(v56 + 2 * v153.u32[3]);
          v121.i16[4] = *(_WORD *)(v56 + 2 * v152.u32[0]);
          v121.i16[5] = *(_WORD *)(v56 + 2 * v152.u32[1]);
          v121.i16[6] = *(_WORD *)(v56 + 2 * v152.u32[2]);
          v121.i16[7] = *(_WORD *)(v56 + 2 * v152.u32[3]);
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v145, v80), v109));
          uint32x4_t v155 = vmovl_high_u16(v154);
          uint32x4_t v156 = vmovl_u16(*(uint16x4_t *)v154.i8);
          v108.i16[0] = *(_WORD *)(v56 + 2 * v156.u32[0]);
          v108.i16[1] = *(_WORD *)(v56 + 2 * v156.u32[1]);
          v108.i16[2] = *(_WORD *)(v56 + 2 * v156.u32[2]);
          v108.i16[3] = *(_WORD *)(v56 + 2 * v156.u32[3]);
          v108.i16[4] = *(_WORD *)(v56 + 2 * v155.u32[0]);
          v108.i16[5] = *(_WORD *)(v56 + 2 * v155.u32[1]);
          v108.i16[6] = *(_WORD *)(v56 + 2 * v155.u32[2]);
          v108.i16[7] = *(_WORD *)(v56 + 2 * v155.u32[3]);
          uint16x8_t v157 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v146, v80), v109));
          uint32x4_t v158 = vmovl_high_u16(v157);
          uint32x4_t v159 = vmovl_u16(*(uint16x4_t *)v157.i8);
          v146.i16[0] = *(_WORD *)(v56 + 2 * v159.u32[0]);
          v146.i16[1] = *(_WORD *)(v56 + 2 * v159.u32[1]);
          v146.i16[2] = *(_WORD *)(v56 + 2 * v159.u32[2]);
          v146.i16[3] = *(_WORD *)(v56 + 2 * v159.u32[3]);
          v146.i16[4] = *(_WORD *)(v56 + 2 * v158.u32[0]);
          v146.i16[5] = *(_WORD *)(v56 + 2 * v158.u32[1]);
          v146.i16[6] = *(_WORD *)(v56 + 2 * v158.u32[2]);
          v146.i16[7] = *(_WORD *)(v56 + 2 * v158.u32[3]);
          float16x8_t v160 = vmlaq_n_f16(v147, v141, v314);
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v346.val[1], v80), v109));
          uint32x4_t v162 = vmovl_high_u16(v161);
          uint32x4_t v163 = vmovl_u16(*(uint16x4_t *)v161.i8);
          v141.i16[0] = *(_WORD *)(v56 + 2 * v163.u32[0]);
          v141.i16[1] = *(_WORD *)(v56 + 2 * v163.u32[1]);
          v141.i16[2] = *(_WORD *)(v56 + 2 * v163.u32[2]);
          v141.i16[3] = *(_WORD *)(v56 + 2 * v163.u32[3]);
          v141.i16[4] = *(_WORD *)(v56 + 2 * v162.u32[0]);
          v141.i16[5] = *(_WORD *)(v56 + 2 * v162.u32[1]);
          v141.i16[6] = *(_WORD *)(v56 + 2 * v162.u32[2]);
          v141.i16[7] = *(_WORD *)(v56 + 2 * v162.u32[3]);
          uint16x8_t v164 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v160, v80), v109));
          uint32x4_t v165 = vmovl_high_u16(v164);
          uint32x4_t v166 = vmovl_u16(*(uint16x4_t *)v164.i8);
          v160.i16[0] = *(_WORD *)(v56 + 2 * v166.u32[0]);
          v160.i16[1] = *(_WORD *)(v56 + 2 * v166.u32[1]);
          v160.i16[2] = *(_WORD *)(v56 + 2 * v166.u32[2]);
          v160.i16[3] = *(_WORD *)(v56 + 2 * v166.u32[3]);
          v160.i16[4] = *(_WORD *)(v56 + 2 * v165.u32[0]);
          v160.i16[5] = *(_WORD *)(v56 + 2 * v165.u32[1]);
          v160.i16[6] = *(_WORD *)(v56 + 2 * v165.u32[2]);
          v160.i16[7] = *(_WORD *)(v56 + 2 * v165.u32[3]);
          float16x8_t v167 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v346.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, v80), v167)));
          v346.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v135, v80), v167)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, v80), v167)));
          v166.i64[0] = v343;
          v144.i64[0] = *((void *)&v344 + 1);
          v142.i64[0] = v344;
          v346.val[1].u64[1] = (unint64_t)v89;
          *(int8x8_t *)v347.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v160, v80), v167)));
          v347.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v146, v80), v167)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v141, v80), v167)));
          *(int8x8_t *)v167.i8 = vqtbl2_s8(v346, *(int8x8_t *)&v343);
          v167.u64[1] = (unint64_t)vqtbl2_s8(v346, v84);
          *(int8x8_t *)v168.i8 = vqtbl2_s8(v346, *(int8x8_t *)&v344);
          v168.u64[1] = (unint64_t)vqtbl2_s8(v346, *(int8x8_t *)((char *)&v344 + 8));
          *unsigned __int8 v75 = v167;
          v75[1] = v168;
          v75 += 2;
          v347.val[1].u64[1] = (unint64_t)v89;
          *(int8x8_t *)v166.i8 = vqtbl2_s8(v347, *(int8x8_t *)v166.i8);
          *(int8x8_t *)v167.i8 = vqtbl2_s8(v347, *(int8x8_t *)v142.i8);
          v166.u64[1] = (unint64_t)vqtbl2_s8(v347, v84);
          v167.u64[1] = (unint64_t)vqtbl2_s8(v347, *(int8x8_t *)v144.i8);
          *unsigned int v87 = v166;
          v87[1] = (uint32x4_t)v167;
          v87 += 2;
          v83 += 8;
        }
        while (v83 < (int)v10 - 7);
        unint64_t v169 = v10 & 0xFFFFFFF8;
      }
      if (v10 > v169)
      {
        uint64_t v170 = 0;
        if (v76) {
          char v171 = 0;
        }
        else {
          char v171 = -1;
        }
        size_t v172 = &v75->i8[4];
        do
        {
          float v173 = (float)(v86->u16[1] >> v78) - v54;
          float v174 = *((float *)&v79 + 1) * v173;
          float v175 = _S31 * (float)((float)(v77->u16[0] >> v78) - v53);
          float v176 = (float)(*((float *)&v79 + 1) * v173) + v175;
          float v177 = 8191.0;
          if (v176 <= 8191.0)
          {
            float v177 = (float)(*((float *)&v79 + 1) * v173) + v175;
            if (v176 < 0.0) {
              float v177 = 0.0;
            }
          }
          float v178 = (float)(v86->u16[0] >> v78) - v54;
          float v179 = (float)(a8.f32[1] * v173) + (float)(v178 * v329);
          float v180 = 8191.0;
          if ((float)(v175 + v179) <= 8191.0)
          {
            float v180 = v175 + v179;
            if ((float)(v175 + v179) < 0.0) {
              float v180 = 0.0;
            }
          }
          float v181 = *(float *)&v79 * v178;
          float v182 = (float)(*(float *)&v79 * v178) + v175;
          float v183 = 8191.0;
          if (v182 <= 8191.0)
          {
            float v183 = v182;
            if (v182 < 0.0) {
              float v183 = 0.0;
            }
          }
          float v184 = _S31 * (float)((float)(v77->u16[1] >> v78) - v53);
          float v185 = 8191.0;
          if ((float)(v174 + v184) <= 8191.0)
          {
            float v185 = v174 + v184;
            if ((float)(v174 + v184) < 0.0) {
              float v185 = 0.0;
            }
          }
          float v186 = 8191.0;
          if ((float)(v179 + v184) <= 8191.0)
          {
            float v186 = v179 + v184;
            if ((float)(v179 + v184) < 0.0) {
              float v186 = 0.0;
            }
          }
          float v187 = v181 + v184;
          float v188 = 8191.0;
          if (v187 <= 8191.0)
          {
            float v188 = v187;
            if (v187 < 0.0) {
              float v188 = 0.0;
            }
          }
          float v189 = _S31 * (float)((float)(v85->u16[0] >> v78) - v53);
          float v190 = 8191.0;
          if ((float)(v174 + v189) <= 8191.0)
          {
            float v190 = v174 + v189;
            if ((float)(v174 + v189) < 0.0) {
              float v190 = 0.0;
            }
          }
          float v191 = 8191.0;
          if ((float)(v179 + v189) <= 8191.0)
          {
            float v191 = v179 + v189;
            if ((float)(v179 + v189) < 0.0) {
              float v191 = 0.0;
            }
          }
          float v192 = v181 + v189;
          float v193 = 8191.0;
          if (v192 <= 8191.0)
          {
            float v193 = v192;
            if (v192 < 0.0) {
              float v193 = 0.0;
            }
          }
          float v194 = _S31 * (float)((float)(v85->u16[1] >> v78) - v53);
          float v195 = v174 + v194;
          BOOL v196 = (float)(v174 + v194) <= 8191.0;
          float v197 = 8191.0;
          if (v196)
          {
            float v197 = v195;
            if (v195 < 0.0) {
              float v197 = 0.0;
            }
          }
          float v198 = 8191.0;
          if ((float)(v179 + v194) <= 8191.0)
          {
            float v198 = v179 + v194;
            if ((float)(v179 + v194) < 0.0) {
              float v198 = 0.0;
            }
          }
          float v199 = v181 + v194;
          float v200 = 8191.0;
          if (v199 <= 8191.0)
          {
            float v200 = v199;
            if (v199 < 0.0) {
              float v200 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v177, 0.0), 8191.0)));
          __asm { FCVT            S23, H1 }
          _H1 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v180, 0.0), 8191.0)));
          __asm { FCVT            S25, H1 }
          _H1 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v183, 0.0), 8191.0)));
          __asm { FCVT            S27, H1 }
          _H9 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v185, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v186, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v188, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v190, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v191, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v193, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v197, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v198, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v200, 0.0), 8191.0)));
          float v216 = (float)((float)((float)(_S20 * _S25) + (float)(_S6 * _S23)) + (float)(_S18 * _S27))
               + (float)(_S16 * fmaxf(_S23, fmaxf(_S25, _S27)));
          float v217 = 8191.0;
          if (v216 <= 8191.0)
          {
            float v217 = v216;
            if (v216 < 0.0) {
              float v217 = 0.0;
            }
          }
          __asm
          {
            FCVT            S26, H9
            FCVT            S28, H3
            FCVT            S9, H4
          }
          _H13 = *(_WORD *)(v51 + 2 * llroundf(v217));
          float v222 = (float)((float)((float)(_S20 * _S28) + (float)(_S6 * _S26)) + (float)(_S18 * _S9))
               + (float)(_S16 * fmaxf(_S26, fmaxf(_S28, _S9)));
          float v223 = 8191.0;
          if (v222 <= 8191.0)
          {
            float v223 = v222;
            if (v222 < 0.0) {
              float v223 = 0.0;
            }
          }
          __asm
          {
            FCVT            S0, H15
            FCVT            S14, H14
            FCVT            S1, H1
          }
          _H3 = *(_WORD *)(v51 + 2 * llroundf(v223));
          float v228 = fmaxf(_S0, fmaxf(_S14, _S1));
          float v229 = (float)((float)((float)(_S20 * _S14) + (float)(_S6 * _S0)) + (float)(_S18 * _S1))
               + (float)(_S16 * v228);
          float v230 = 8191.0;
          if (v229 <= 8191.0)
          {
            float v230 = (float)((float)((float)(_S20 * _S14) + (float)(_S6 * _S0)) + (float)(_S18 * _S1))
                 + (float)(_S16 * v228);
            if (v229 < 0.0) {
              float v230 = 0.0;
            }
          }
          __asm
          {
            FCVT            S4, H10
            FCVT            S21, H11
            FCVT            S10, H12
          }
          _H11 = *(_WORD *)(v51 + 2 * llroundf(v230));
          float v235 = _S20;
          float v236 = _S20 * _S21;
          float v237 = _S6;
          float v238 = (float)((float)(v236 + (float)(_S6 * _S4)) + (float)(_S18 * _S10))
               + (float)(_S16 * fmaxf(_S4, fmaxf(_S21, _S10)));
          float v239 = 8191.0;
          if (v238 <= 8191.0)
          {
            float v239 = v238;
            if (v238 < 0.0) {
              float v239 = 0.0;
            }
          }
          __asm { FCVT            S13, H13 }
          float v241 = _S23 * _S13;
          float v242 = _S25 * _S13;
          float v243 = _S27 * _S13;
          __asm { FCVT            S3, H3 }
          float v245 = _S26 * _S3;
          float v246 = _S28 * _S3;
          float v247 = _S9 * _S3;
          __asm { FCVT            S9, H11 }
          float v249 = _S0 * _S9;
          float v250 = _S14 * _S9;
          float v251 = _S1 * _S9;
          LOWORD(_S9) = *(_WORD *)(v51 + 2 * llroundf(v239));
          __asm { FCVT            S9, H9 }
          float v253 = _S4 * _S9;
          float v254 = _S21 * _S9;
          float v255 = _S10 * _S9;
          float v256 = (float)((float)(v341 * v242) + (float)(v241 * v342)) + (float)(v243 * v340);
          float v257 = (float)((float)(v338 * v242) + (float)(v241 * v339)) + (float)(v243 * v337);
          float v258 = (float)((float)(v335 * v242) + (float)(v241 * v336)) + (float)(v243 * v334);
          float v259 = (float)((float)(v341 * v246) + (float)(v245 * v342)) + (float)(v247 * v340);
          float v260 = (float)((float)(v338 * v246) + (float)(v245 * v339)) + (float)(v247 * v337);
          float v261 = (float)((float)(v335 * v246) + (float)(v245 * v336)) + (float)(v247 * v334);
          float v262 = (float)((float)(v341 * v250) + (float)(v249 * v342)) + (float)(v251 * v340);
          float v263 = (float)((float)(v338 * v250) + (float)(v249 * v339)) + (float)(v251 * v337);
          float v264 = (float)((float)(v335 * v250) + (float)(v249 * v336)) + (float)(v251 * v334);
          float v265 = (float)((float)(v341 * v254) + (float)(v253 * v342)) + (float)(v255 * v340);
          float v266 = (float)((float)(v338 * v254) + (float)(v253 * v339)) + (float)(v255 * v337);
          float v267 = (float)((float)(v335 * v254) + (float)(v253 * v336)) + (float)(v255 * v334);
          LOWORD(v249) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v256, 0.0), 8191.0)));
          short float v268 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v257, 0.0), 8191.0)));
          short float v269 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v258, 0.0), 8191.0)));
          short float v270 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v259, 0.0), 8191.0)));
          short float v271 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v260, 0.0), 8191.0)));
          short float v272 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v261, 0.0), 8191.0)));
          short float v273 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v262, 0.0), 8191.0)));
          short float v274 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v263, 0.0), 8191.0)));
          short float v275 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v264, 0.0), 8191.0)));
          short float v276 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v265, 0.0), 8191.0)));
          short float v277 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v266, 0.0), 8191.0)));
          short float v278 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v267, 0.0), 8191.0)));
          if (*(short float *)&v249 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H0, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H0 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          _S6 = v237;
          _S20 = v235;
          float16x8_t v80 = 0uLL;
          uint64_t v281 = v345;
          v172[v170 - 4 + v345] = llroundf(_S0);
          if (v268 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H26 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          uint64_t v284 = BYTE1(v345);
          v172[v170 - 4 + BYTE1(v345)] = llroundf(_S0);
          if (v269 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H14, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H14 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          uint64_t v287 = BYTE2(v345);
          v172[v170 - 4 + BYTE2(v345)] = llroundf(_S0);
          uint64_t v288 = HIBYTE(v345);
          v172[v170 - 4 + HIBYTE(v345)] = v171;
          if (v270 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H13, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H13 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v172[v170 + v281] = llroundf(_S0);
          if (v271 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H12 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v172[v170 + v284] = llroundf(_S0);
          if (v272 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H15, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H15 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v172[v170 + v287] = llroundf(_S0);
          v172[v170 + v288] = v171;
          if (v273 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H11 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v87->i8[v281 + v170] = llroundf(_S0);
          if (v274 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H10, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H10 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v87->i8[BYTE1(v345) + v170] = llroundf(_S0);
          if (v275 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H9, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H9 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v87->i8[BYTE2(v345) + v170] = llroundf(_S0);
          v87->i8[HIBYTE(v345) + v170] = v171;
          if (v276 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H25, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H25 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v87->i8[v170 + 4 + v345] = llroundf(_S0);
          if (v277 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H28, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H28 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v87->i8[v170 + 4 + BYTE1(v345)] = llroundf(_S0);
          if (v278 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H23, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H23 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v87->i8[v170 + 4 + BYTE2(v345)] = llroundf(_S0);
          float v307 = &v87->i8[v170 + HIBYTE(v345)];
          v169 += 2;
          v170 += 8;
          v307[4] = v171;
          float v86 = (uint16x8_t *)((char *)v86 + 4);
          float v77 = (uint16x8_t *)((char *)v77 + 4);
          float v85 = (uint16x8_t *)((char *)v85 + 4);
        }
        while (v10 > v169);
      }
      float v77 = (uint16x8_t *)&v81[v26];
      result = (uint16x8_t *)((char *)result + v309);
      v76 += v28 + v28;
      unsigned __int8 v75 = (float16x8_t *)&v82[v30];
      v50 += 2;
    }
    while (v308 > v50);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    float v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    float v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v22 = (float)LODWORD(a5);
    float v23 = v20 * *(float *)v13;
    float v204 = v20 * *(float *)(v13 + 16);
    float v205 = v20 * *(float *)(v13 + 8);
    float v202 = v20 * *(float *)(v13 + 28);
    float v203 = v20 * *(float *)(v13 + 20);
    float v200 = *(float *)(v13 + 76);
    float v201 = *(float *)(v13 + 72);
    float v198 = *(float *)(v13 + 84);
    float v199 = *(float *)(v13 + 80);
    float v196 = *(float *)(v13 + 92);
    float v197 = *(float *)(v13 + 88);
    float v194 = *(float *)(v13 + 100);
    float v195 = *(float *)(v13 + 96);
    uint64_t v24 = v13 + 164;
    uint64_t v25 = v13 + 16548;
    uint64_t v26 = v13 + 32932;
    float v27 = *(float *)(v13 + 108);
    float v193 = *(float *)(v13 + 104);
    float v28 = *(float *)(v13 + 112);
    float v29 = *(float *)(v13 + 116);
    float v30 = *(float *)(v13 + 120);
    uint64_t v31 = (void *)*((void *)result + 16);
    uint64_t v32 = *((void *)result + 14);
    uint64_t v33 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v34 = *(void *)(result + 36);
    uint64_t v35 = v14[1];
    result = (unsigned __int8 *)(*v14 + v16 * v11 + 2 * v34);
    uint64_t v36 = v14[2];
    uint64_t v37 = v36 + v18 * v11 + 2 * v34;
    if (!v36) {
      uint64_t v37 = 0;
    }
    uint64_t v38 = *v31 + v33 * v19 + 4 * v32;
    unsigned int v39 = *(unsigned __int8 *)(v13 + 124);
    if (v39 >= 0x11) {
      char v40 = 0;
    }
    else {
      char v40 = 16 - v39;
    }
    uint64_t v41 = *(unsigned __int8 *)(v13 + 161);
    uint64_t v42 = *(unsigned __int8 *)(v13 + 160);
    uint64_t v43 = v35 + v17 * (v11 / 2);
    uint64_t v44 = *(unsigned __int8 *)(v13 + 159);
    uint64_t v45 = *(unsigned __int8 *)(v13 + 158);
    uint64_t v46 = v43 + 2 * v34;
    float v191 = v23;
    float v192 = (float)LODWORD(a5);
    do
    {
      uint64_t v47 = v38 + v19;
      int v48 = &result[v16];
      if (v10)
      {
        unint64_t v49 = 0;
        if (v37) {
          char v50 = 0;
        }
        else {
          char v50 = -1;
        }
        uint64_t v51 = &result[v16];
        uint64_t v52 = v38 + v19;
        do
        {
          float v53 = (unsigned __int16 *)(v46 + 2 * v49);
          float v54 = (float)(v53[1] >> v40) - v22;
          float v55 = v205 * v54;
          float v56 = v23 * (float)((float)(*(unsigned __int16 *)result >> v40) - v21);
          float v57 = (float)(v205 * v54) + v56;
          float v58 = 8191.0;
          if (v57 <= 8191.0)
          {
            float v58 = (float)(v205 * v54) + v56;
            if (v57 < 0.0) {
              float v58 = 0.0;
            }
          }
          float v59 = (float)(*v53 >> v40) - v22;
          float v60 = (float)(v203 * v54) + (float)(v59 * v204);
          float v61 = 8191.0;
          if ((float)(v56 + v60) <= 8191.0)
          {
            float v61 = v56 + v60;
            if ((float)(v56 + v60) < 0.0) {
              float v61 = 0.0;
            }
          }
          float v62 = v202 * v59;
          float v63 = (float)(v202 * v59) + v56;
          float v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            float v64 = v63;
            if (v63 < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = v23 * (float)((float)(*((unsigned __int16 *)result + 1) >> v40) - v21);
          float v66 = 8191.0;
          if ((float)(v55 + v65) <= 8191.0)
          {
            float v66 = v55 + v65;
            if ((float)(v55 + v65) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = 8191.0;
          if ((float)(v60 + v65) <= 8191.0)
          {
            float v67 = v60 + v65;
            if ((float)(v60 + v65) < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = 8191.0;
          if ((float)(v62 + v65) <= 8191.0)
          {
            float v68 = v62 + v65;
            if ((float)(v62 + v65) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v23 * (float)((float)(*(unsigned __int16 *)v51 >> v40) - v21);
          float v70 = 8191.0;
          if ((float)(v55 + v69) <= 8191.0)
          {
            float v70 = v55 + v69;
            if ((float)(v55 + v69) < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = 8191.0;
          if ((float)(v60 + v69) <= 8191.0)
          {
            float v71 = v60 + v69;
            if ((float)(v60 + v69) < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = 8191.0;
          if ((float)(v62 + v69) <= 8191.0)
          {
            float v72 = v62 + v69;
            if ((float)(v62 + v69) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v23 * (float)((float)(*((unsigned __int16 *)v51 + 1) >> v40) - v21);
          float v74 = v55 + v73;
          BOOL v75 = (float)(v55 + v73) <= 8191.0;
          float v76 = 8191.0;
          if (v75)
          {
            float v76 = v74;
            if (v74 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v60 + v73;
          BOOL v75 = (float)(v60 + v73) <= 8191.0;
          float v78 = 8191.0;
          if (v75)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v62 + v73;
          BOOL v75 = (float)(v62 + v73) <= 8191.0;
          float v80 = 8191.0;
          if (v75)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          __asm { FCVT            S30, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H7 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          float v100 = fmaxf(_S30, fmaxf(_S31, _S8));
          float v101 = (float)((float)((float)(v28 * _S31) + (float)(v27 * _S30)) + (float)(v29 * _S8)) + (float)(v30 * v100);
          float v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            float v102 = (float)((float)((float)(v28 * _S31) + (float)(v27 * _S30)) + (float)(v29 * _S8))
                 + (float)(v30 * v100);
            if (v101 < 0.0) {
              float v102 = 0.0;
            }
          }
          __asm
          {
            FCVT            S4, H7
            FCVT            S5, H13
            FCVT            S9, H2
          }
          _H13 = *(_WORD *)(v25 + 2 * llroundf(v102));
          float v107 = (float)((float)((float)(v28 * _S5) + (float)(v27 * _S4)) + (float)(v29 * _S9))
               + (float)(v30 * fmaxf(_S4, fmaxf(_S5, _S9)));
          float v108 = 8191.0;
          if (v107 <= 8191.0)
          {
            float v108 = v107;
            if (v107 < 0.0) {
              float v108 = 0.0;
            }
          }
          __asm
          {
            FCVT            S14, H14
            FCVT            S15, H15
            FCVT            S6, H6
          }
          _H7 = *(_WORD *)(v25 + 2 * llroundf(v108));
          float v113 = (float)((float)((float)(v28 * _S15) + (float)(v27 * _S14)) + (float)(v29 * _S6))
               + (float)(v30 * fmaxf(_S14, fmaxf(_S15, _S6)));
          float v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            float v114 = v113;
            if (v113 < 0.0) {
              float v114 = 0.0;
            }
          }
          __asm
          {
            FCVT            S2, H10
            FCVT            S10, H11
            FCVT            S11, H12
          }
          _H12 = *(_WORD *)(v25 + 2 * llroundf(v114));
          float v119 = v28;
          float v120 = v27;
          float v121 = v29;
          float v122 = v30;
          float v123 = (float)((float)((float)(v28 * _S10) + (float)(v27 * _S2)) + (float)(v29 * _S11))
               + (float)(v30 * fmaxf(_S2, fmaxf(_S10, _S11)));
          float v124 = 8191.0;
          if (v123 <= 8191.0)
          {
            float v124 = v123;
            if (v123 < 0.0) {
              float v124 = 0.0;
            }
          }
          __asm { FCVT            S1, H13 }
          float v126 = _S30 * _S1;
          float v127 = _S31 * _S1;
          float v128 = _S8 * _S1;
          __asm { FCVT            S7, H7 }
          float v130 = _S4 * _S7;
          float v131 = _S5 * _S7;
          float v132 = _S9 * _S7;
          __asm { FCVT            S8, H12 }
          float v134 = _S14 * _S8;
          float v135 = _S15 * _S8;
          float v136 = _S6 * _S8;
          _H3 = *(_WORD *)(v25 + 2 * llroundf(v124));
          __asm { FCVT            S3, H3 }
          float v139 = _S2 * _S3;
          float v140 = _S10 * _S3;
          float v141 = _S11 * _S3;
          float v142 = (float)((float)(v200 * v127) + (float)(v126 * v201)) + (float)(v128 * v199);
          float v143 = (float)((float)(v197 * v127) + (float)(v126 * v198)) + (float)(v128 * v196);
          float v144 = (float)((float)(v194 * v127) + (float)(v126 * v195)) + (float)(v128 * v193);
          float v145 = (float)((float)(v200 * v131) + (float)(v130 * v201)) + (float)(v132 * v199);
          float v146 = (float)((float)(v197 * v131) + (float)(v130 * v198)) + (float)(v132 * v196);
          float v147 = (float)((float)(v194 * v131) + (float)(v130 * v195)) + (float)(v132 * v193);
          float v148 = (float)((float)(v200 * v135) + (float)(v134 * v201)) + (float)(v136 * v199);
          float v149 = (float)((float)(v197 * v135) + (float)(v134 * v198)) + (float)(v136 * v196);
          float v150 = (float)((float)(v194 * v135) + (float)(v134 * v195)) + (float)(v136 * v193);
          float v151 = (float)((float)(v200 * v140) + (float)(v139 * v201)) + (float)(v141 * v199);
          float v152 = (float)((float)(v197 * v140) + (float)(v139 * v198)) + (float)(v141 * v196);
          float v153 = (float)((float)(v194 * v140) + (float)(v139 * v195)) + (float)(v141 * v193);
          LOWORD(v136) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          short float v154 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          short float v155 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          short float v156 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          short float v157 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          short float v158 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          short float v159 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          short float v160 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          short float v161 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          short float v162 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          short float v163 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          short float v164 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          if (*(short float *)&v136 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H6, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H6 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          float v23 = v191;
          float v27 = v120;
          float v28 = v119;
          float v29 = v121;
          float v30 = v122;
          *(unsigned char *)(v38 + v45) = llroundf(_S1);
          if (v154 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H5, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H5 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          float v22 = v192;
          *(unsigned char *)(v38 + v44) = llroundf(_S1);
          if (v155 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H4, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H4 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v38 + v42) = llroundf(_S1);
          *(unsigned char *)(v38 + v41) = v50;
          if (v156 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H15, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H15 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          uint64_t v173 = v38 + 4;
          *(unsigned char *)(v38 + 4 + v45) = llroundf(_S1);
          if (v157 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H14, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H14 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v173 + v44) = llroundf(_S1);
          if (v158 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H13, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H13 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v173 + v42) = llroundf(_S1);
          *(unsigned char *)(v173 + v41) = v50;
          if (v159 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H12 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v52 + v45) = llroundf(_S1);
          if (v160 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H11 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v52 + v44) = llroundf(_S1);
          if (v161 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H10, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H10 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v52 + v42) = llroundf(_S1);
          *(unsigned char *)(v52 + v41) = v50;
          if (v162 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H9, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H9 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          uint64_t v186 = v52 + 4;
          *(unsigned char *)(v52 + 4 + v45) = llroundf(_S1);
          if (v163 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H8, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H8 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v186 + v44) = llroundf(_S1);
          if (v164 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H30, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H30 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          result += 4;
          v51 += 4;
          *(unsigned char *)(v186 + v42) = llroundf(_S1);
          v38 += 8;
          *(unsigned char *)(v186 + v41) = v50;
          v52 += 8;
          v49 += 2;
        }
        while (v10 > v49);
      }
      result = &v48[v16];
      v46 += v17;
      v37 += v18 + v18;
      uint64_t v38 = v47 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_BGRA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_BGRA_neon_fp16_GCD(void *a1, uint64_t a2, double a3, double a4, float32x4_t a5, float32x4_t a6)
{
  char v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = *(void *)((char *)a1 + 20);
  uint64_t v10 = *(void *)((char *)a1 + 36);
  uint64_t v11 = *(void *)((char *)a1 + 44);
  uint64_t v12 = *(void *)((char *)a1 + 28);
  unint64_t v13 = 2 * *(unsigned __int8 *)a1;
  uint64_t v14 = 2 * (v12 * a2 / v13);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = 2 * ((v12 + v12 * a2) / v13);
  uint64_t v17 = v11 + v16;
  uint64_t v18 = a1[15];
  uint64_t v272 = a1[14];
  unint64_t v19 = a1[13] * a2;
  uint64_t v20 = a1[19];
  size_t v22 = (uint64_t *)a1[7];
  uint64_t v21 = (uint64_t *)a1[8];
  uint64_t v23 = (uint64_t *)a1[16];
  uint64_t v24 = (uint64_t *)a1[17];
  uint64_t v25 = *v21;
  uint64_t v26 = v21[1];
  uint64_t v270 = *v22;
  uint64_t result = v22[2];
  uint64_t v256 = v22[1];
  uint64_t v28 = v21[2];
  uint64_t v29 = *v24;
  uint64_t v30 = *v23;
  unsigned int v31 = *(_DWORD *)(v20 + 128);
  int v285 = *(_DWORD *)(v20 + 158);
  unsigned int v32 = *(unsigned __int16 *)(v20 + 140);
  unsigned int v33 = *(unsigned __int8 *)(v20 + 124);
  uint64_t v34 = v18 + 2 * (v19 / v13);
  unsigned int v35 = *(unsigned __int16 *)(v20 + 142);
  float v36 = *(float *)v20;
  __int32 v37 = *(_DWORD *)(v20 + 8);
  float32x2_t v38 = *(float32x2_t *)(v20 + 16);
  if (v15 >= 0) {
    uint64_t v39 = v15;
  }
  else {
    uint64_t v39 = v15 + 1;
  }
  v40.i32[0] = *(_DWORD *)(v20 + 28);
  uint64_t v41 = v26 * (v39 >> 1);
  float v282 = *(float *)(v20 + 72);
  float v281 = *(float *)(v20 + 76);
  uint64_t v42 = v29 * v34;
  float v280 = *(float *)(v20 + 80);
  float v279 = *(float *)(v20 + 84);
  float v278 = *(float *)(v20 + 88);
  float v277 = *(float *)(v20 + 92);
  float v276 = *(float *)(v20 + 96);
  _S16 = *(float *)(v20 + 104);
  float v275 = *(float *)(v20 + 100);
  long long v283 = 0u;
  long long v284 = 0u;
  do
  {
    int v44 = 0;
    char v45 = *((unsigned char *)&v285 + v8);
    do
    {
      *(unsigned char *)(((unint64_t)&v283 + ((v45 + 4 * v44) & 0xF8)) | (v45 + 4 * (_BYTE)v44) & 7) = v7 + v44;
      ++v44;
    }
    while (v44 != 8);
    ++v8;
    v7 += 8;
  }
  while (v8 != 4);
  if (v16 != v14)
  {
    unint64_t v46 = 0;
    unint64_t v255 = v17 - v15;
    float v47 = (float)v32;
    *(short float *)v6.i16 = (short float)v32;
    uint64_t v48 = v20 + 16548;
    uint64_t v49 = v20 + 164;
    float v50 = 8191.0 / (float)v31;
    float v51 = (float)v35;
    _S20 = v50 * v36;
    __asm { FCVT            H8, S20 }
    float16x8_t v274 = (float16x8_t)vdupq_lane_s16(v6, 0);
    short float v58 = -(short float)v35;
    v40.i32[1] = v37;
    *(float32x2_t *)a5.f32 = vmul_n_f32(v40, v50);
    *(float32x2_t *)a6.f32 = vmul_n_f32(v38, v50);
    float16x8_t v271 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v268 = vmulq_n_f16(v271, v58);
    float16x8_t v269 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    _S0 = v282;
    __asm { FCVT            H0, S0 }
    short float v266 = *(short float *)&_S0;
    float16x8_t v267 = vmulq_n_f16(v269, v58);
    _S0 = v281;
    __asm { FCVT            H0, S0 }
    short float v265 = *(short float *)&_S0;
    _S0 = v280;
    __asm { FCVT            H0, S0 }
    short float v264 = *(short float *)&_S0;
    _S0 = v279;
    __asm { FCVT            H0, S0 }
    short float v263 = *(short float *)&_S0;
    _S0 = v278;
    __asm { FCVT            H0, S0 }
    short float v262 = *(short float *)&_S0;
    _S0 = v277;
    __asm { FCVT            H0, S0 }
    short float v261 = *(short float *)&_S0;
    _S0 = v276;
    __asm { FCVT            H0, S0 }
    short float v260 = *(short float *)&_S0;
    _S0 = v275;
    __asm { FCVT            H0, S0 }
    short float v259 = *(short float *)&_S0;
    __asm { FCVT            H0, S16 }
    short float v258 = *(short float *)&_S0;
    if (v33 >= 0x11) {
      unsigned __int8 v67 = 0;
    }
    else {
      unsigned __int8 v67 = 16 - v33;
    }
    float v68 = (float16x8_t *)(v30 + v42 + 4 * v272);
    if (result) {
      result += v28 * v15 + 2 * v10;
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v69 = v256 + v41 + 2 * v10;
    float v70 = (uint16x8_t *)(v270 + v25 * v15 + 2 * v10);
    unsigned __int8 v71 = v67;
    uint16x8_t v257 = (uint16x8_t)vdupq_n_s16(-v67);
    float v273 = a5.f32[0];
    v72.i64[0] = 0x9000900090009000;
    v72.i64[1] = 0x9000900090009000;
    do
    {
      float v73 = &v70->i8[v25];
      float v74 = &v68->i8[v29];
      if ((int)v9 < 8)
      {
        unint64_t v144 = 0;
        float v79 = (float16x8_t *)((char *)v68 + v29);
        float v78 = (uint16x8_t *)v69;
        float v77 = (uint16x8_t *)((char *)v70 + v25);
      }
      else
      {
        int v75 = 0;
        int8x8_t v76 = *(int8x8_t *)((char *)&v283 + 8);
        float v77 = (uint16x8_t *)((char *)v70 + v25);
        float v78 = (uint16x8_t *)v69;
        float v79 = (float16x8_t *)((char *)v68 + v29);
        do
        {
          if (result)
          {
            int16x8_t v80 = (int16x8_t)vcvtq_u32_f32((float32x4_t)0);
            int8x8_t v81 = vmovn_s16(vuzp1q_s16(v80, v80));
          }
          else
          {
            int8x8_t v81 = (int8x8_t)-1;
          }
          uint16x8_t v82 = *v78++;
          float16x8_t v83 = vcvtq_f16_u16(vshlq_u16(v82, v257));
          int8x16_t v84 = (int8x16_t)vmlaq_f16(v268, v271, v83);
          int8x16_t v85 = (int8x16_t)vmlaq_f16(v267, v269, v83);
          v83.i64[0] = vextq_s8(v84, v84, 8uLL).u64[0];
          *(int16x4_t *)v86.i8 = vuzp1_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v83.i8);
          *(int16x4_t *)v83.i8 = vuzp2_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v83.i8);
          v83.i64[1] = v269.i64[0];
          v86.i64[1] = v269.i64[0];
          float16x8_t v87 = (float16x8_t)vzip1q_s16((int16x8_t)v83, (int16x8_t)v83);
          float16x8_t v88 = (float16x8_t)vzip1q_s16(v86, v86);
          v83.i64[0] = vextq_s8(v85, v85, 8uLL).u64[0];
          *(float16x4_t *)v83.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v83.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v83.i8));
          float16x8_t v89 = (float16x8_t)vzip1q_s16((int16x8_t)v83, (int16x8_t)v83);
          uint16x8_t v90 = *v70++;
          float16x8_t v91 = vcvtq_f16_u16(vshlq_u16(v90, v257));
          uint16x8_t v92 = *v77++;
          float16x8_t v93 = vsubq_f16(v91, v274);
          float16x8_t v94 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v92, v257)), v274);
          float16x8_t v95 = vmlaq_n_f16(v87, v93, _H8);
          float16x8_t v96 = vmlaq_n_f16(v87, v94, _H8);
          float16x8_t v97 = vmlaq_n_f16(v89, v93, _H8);
          float16x8_t v98 = vmlaq_n_f16(v89, v94, _H8);
          float16x8_t v99 = vmlaq_n_f16(v88, v93, _H8);
          float16x8_t v100 = vmlaq_n_f16(v88, v94, _H8);
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v95, (float16x8_t)0), v72));
          uint32x4_t v102 = vmovl_high_u16(v101);
          float16x8_t v103 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v101.i8);
          v103.i16[0] = *(_WORD *)(v49 + 2 * v103.u32[0]);
          v103.i16[1] = *(_WORD *)(v49 + 2 * v103.u32[1]);
          v103.i16[2] = *(_WORD *)(v49 + 2 * v103.u32[2]);
          v103.i16[3] = *(_WORD *)(v49 + 2 * v103.u32[3]);
          v103.i16[4] = *(_WORD *)(v49 + 2 * v102.u32[0]);
          v103.i16[5] = *(_WORD *)(v49 + 2 * v102.u32[1]);
          v103.i16[6] = *(_WORD *)(v49 + 2 * v102.u32[2]);
          v103.i16[7] = *(_WORD *)(v49 + 2 * v102.u32[3]);
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v97, (float16x8_t)0), v72));
          uint32x4_t v105 = vmovl_high_u16(v104);
          float16x8_t v106 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v104.i8);
          v106.i16[0] = *(_WORD *)(v49 + 2 * v106.u32[0]);
          v106.i16[1] = *(_WORD *)(v49 + 2 * v106.u32[1]);
          v106.i16[2] = *(_WORD *)(v49 + 2 * v106.u32[2]);
          v106.i16[3] = *(_WORD *)(v49 + 2 * v106.u32[3]);
          v106.i16[4] = *(_WORD *)(v49 + 2 * v105.u32[0]);
          v106.i16[5] = *(_WORD *)(v49 + 2 * v105.u32[1]);
          v106.i16[6] = *(_WORD *)(v49 + 2 * v105.u32[2]);
          v106.i16[7] = *(_WORD *)(v49 + 2 * v105.u32[3]);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v99, (float16x8_t)0), v72));
          uint32x4_t v108 = vmovl_high_u16(v107);
          float16x8_t v109 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v107.i8);
          v109.i16[0] = *(_WORD *)(v49 + 2 * v109.u32[0]);
          v109.i16[1] = *(_WORD *)(v49 + 2 * v109.u32[1]);
          v109.i16[2] = *(_WORD *)(v49 + 2 * v109.u32[2]);
          v109.i16[3] = *(_WORD *)(v49 + 2 * v109.u32[3]);
          v109.i16[4] = *(_WORD *)(v49 + 2 * v108.u32[0]);
          v109.i16[5] = *(_WORD *)(v49 + 2 * v108.u32[1]);
          v109.i16[6] = *(_WORD *)(v49 + 2 * v108.u32[2]);
          v109.i16[7] = *(_WORD *)(v49 + 2 * v108.u32[3]);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v96, (float16x8_t)0), v72));
          float16x8_t v111 = (float16x8_t)vmovl_high_u16(v110);
          uint32x4_t v112 = vmovl_u16(*(uint16x4_t *)v110.i8);
          v97.i16[0] = *(_WORD *)(v49 + 2 * v112.u32[0]);
          v97.i16[1] = *(_WORD *)(v49 + 2 * v112.u32[1]);
          v97.i16[2] = *(_WORD *)(v49 + 2 * v112.u32[2]);
          v97.i16[3] = *(_WORD *)(v49 + 2 * v112.u32[3]);
          v97.i16[4] = *(_WORD *)(v49 + 2 * v111.u32[0]);
          v97.i16[5] = *(_WORD *)(v49 + 2 * v111.u32[1]);
          v97.i16[6] = *(_WORD *)(v49 + 2 * v111.u32[2]);
          v97.i16[7] = *(_WORD *)(v49 + 2 * v111.u32[3]);
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v98, (float16x8_t)0), v72));
          uint32x4_t v114 = vmovl_high_u16(v113);
          uint32x4_t v115 = vmovl_u16(*(uint16x4_t *)v113.i8);
          v116.i16[0] = *(_WORD *)(v49 + 2 * v115.u32[0]);
          v116.i16[1] = *(_WORD *)(v49 + 2 * v115.u32[1]);
          v116.i16[2] = *(_WORD *)(v49 + 2 * v115.u32[2]);
          v116.i16[3] = *(_WORD *)(v49 + 2 * v115.u32[3]);
          v116.i16[4] = *(_WORD *)(v49 + 2 * v114.u32[0]);
          v116.i16[5] = *(_WORD *)(v49 + 2 * v114.u32[1]);
          v116.i16[6] = *(_WORD *)(v49 + 2 * v114.u32[2]);
          v116.i16[7] = *(_WORD *)(v49 + 2 * v114.u32[3]);
          uint16x8_t v117 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v100, (float16x8_t)0), v72));
          uint32x4_t v118 = vmovl_high_u16(v117);
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v117.i8);
          v111.i16[0] = *(_WORD *)(v49 + 2 * v119.u32[0]);
          v111.i16[1] = *(_WORD *)(v49 + 2 * v119.u32[1]);
          v111.i16[2] = *(_WORD *)(v49 + 2 * v119.u32[2]);
          v111.i16[3] = *(_WORD *)(v49 + 2 * v119.u32[3]);
          v111.i16[4] = *(_WORD *)(v49 + 2 * v118.u32[0]);
          v111.i16[5] = *(_WORD *)(v49 + 2 * v118.u32[1]);
          v111.i16[6] = *(_WORD *)(v49 + 2 * v118.u32[2]);
          v111.i16[7] = *(_WORD *)(v49 + 2 * v118.u32[3]);
          float16x8_t v120 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v103, v266), v106, v265), v109, v264);
          float16x8_t v121 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v103, v263), v106, v262), v109, v261);
          float16x8_t v122 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v109, v258), v106, v259), v103, v260);
          float16x8_t v123 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v97, v266), v116, v265), v111, v264);
          float16x8_t v124 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v97, v263), v116, v262), v111, v261);
          float16x8_t v125 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v111, v258), v116, v259), v97, v260);
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v72));
          uint32x4_t v127 = vmovl_high_u16(v126);
          float16x8_t v128 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v126.i8);
          v128.i16[0] = *(_WORD *)(v48 + 2 * v128.u32[0]);
          v128.i16[1] = *(_WORD *)(v48 + 2 * v128.u32[1]);
          v128.i16[2] = *(_WORD *)(v48 + 2 * v128.u32[2]);
          v128.i16[3] = *(_WORD *)(v48 + 2 * v128.u32[3]);
          v128.i16[4] = *(_WORD *)(v48 + 2 * v127.u32[0]);
          v128.i16[5] = *(_WORD *)(v48 + 2 * v127.u32[1]);
          v128.i16[6] = *(_WORD *)(v48 + 2 * v127.u32[2]);
          v128.i16[7] = *(_WORD *)(v48 + 2 * v127.u32[3]);
          uint16x8_t v129 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v72));
          uint32x4_t v130 = vmovl_high_u16(v129);
          float16x8_t v131 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v129.i8);
          v131.i16[0] = *(_WORD *)(v48 + 2 * v131.u32[0]);
          v131.i16[1] = *(_WORD *)(v48 + 2 * v131.u32[1]);
          v131.i16[2] = *(_WORD *)(v48 + 2 * v131.u32[2]);
          v131.i16[3] = *(_WORD *)(v48 + 2 * v131.u32[3]);
          v131.i16[4] = *(_WORD *)(v48 + 2 * v130.u32[0]);
          v131.i16[5] = *(_WORD *)(v48 + 2 * v130.u32[1]);
          v131.i16[6] = *(_WORD *)(v48 + 2 * v130.u32[2]);
          v131.i16[7] = *(_WORD *)(v48 + 2 * v130.u32[3]);
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v72));
          uint32x4_t v133 = vmovl_high_u16(v132);
          float16x8_t v134 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v132.i8);
          v134.i16[0] = *(_WORD *)(v48 + 2 * v134.u32[0]);
          v134.i16[1] = *(_WORD *)(v48 + 2 * v134.u32[1]);
          v134.i16[2] = *(_WORD *)(v48 + 2 * v134.u32[2]);
          v134.i16[3] = *(_WORD *)(v48 + 2 * v134.u32[3]);
          v134.i16[4] = *(_WORD *)(v48 + 2 * v133.u32[0]);
          v134.i16[5] = *(_WORD *)(v48 + 2 * v133.u32[1]);
          v134.i16[6] = *(_WORD *)(v48 + 2 * v133.u32[2]);
          v134.i16[7] = *(_WORD *)(v48 + 2 * v133.u32[3]);
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v72));
          uint32x4_t v136 = vmovl_high_u16(v135);
          float16x8_t v137 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v135.i8);
          v137.i16[0] = *(_WORD *)(v48 + 2 * v137.u32[0]);
          v137.i16[1] = *(_WORD *)(v48 + 2 * v137.u32[1]);
          v137.i16[2] = *(_WORD *)(v48 + 2 * v137.u32[2]);
          v137.i16[3] = *(_WORD *)(v48 + 2 * v137.u32[3]);
          v137.i16[4] = *(_WORD *)(v48 + 2 * v136.u32[0]);
          v137.i16[5] = *(_WORD *)(v48 + 2 * v136.u32[1]);
          v137.i16[6] = *(_WORD *)(v48 + 2 * v136.u32[2]);
          v137.i16[7] = *(_WORD *)(v48 + 2 * v136.u32[3]);
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v72));
          uint32x4_t v139 = vmovl_high_u16(v138);
          float16x8_t v140 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v138.i8);
          v140.i16[0] = *(_WORD *)(v48 + 2 * v140.u32[0]);
          v140.i16[1] = *(_WORD *)(v48 + 2 * v140.u32[1]);
          v140.i16[2] = *(_WORD *)(v48 + 2 * v140.u32[2]);
          v140.i16[3] = *(_WORD *)(v48 + 2 * v140.u32[3]);
          v140.i16[4] = *(_WORD *)(v48 + 2 * v139.u32[0]);
          v140.i16[5] = *(_WORD *)(v48 + 2 * v139.u32[1]);
          v140.i16[6] = *(_WORD *)(v48 + 2 * v139.u32[2]);
          v140.i16[7] = *(_WORD *)(v48 + 2 * v139.u32[3]);
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v72));
          uint32x4_t v142 = vmovl_high_u16(v141);
          v287.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v141.i8);
          v287.val[1].i16[0] = *(_WORD *)(v48 + 2 * v287.val[1].u32[0]);
          v287.val[1].i16[1] = *(_WORD *)(v48 + 2 * v287.val[1].u32[1]);
          v287.val[1].i16[2] = *(_WORD *)(v48 + 2 * v287.val[1].u32[2]);
          v287.val[1].i16[3] = *(_WORD *)(v48 + 2 * v287.val[1].u32[3]);
          v287.val[1].i16[4] = *(_WORD *)(v48 + 2 * v142.u32[0]);
          v287.val[1].i16[5] = *(_WORD *)(v48 + 2 * v142.u32[1]);
          v287.val[1].i16[6] = *(_WORD *)(v48 + 2 * v142.u32[2]);
          v287.val[1].i16[7] = *(_WORD *)(v48 + 2 * v142.u32[3]);
          v142.i64[0] = v283;
          v116.i64[0] = *((void *)&v284 + 1);
          v97.i64[0] = v284;
          float16x8_t v143 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v286.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v143)));
          v286.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v143)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v143)));
          v286.val[1].u64[1] = (unint64_t)v81;
          *(int8x8_t *)v134.i8 = vqtbl2_s8(v286, *(int8x8_t *)&v283);
          v134.u64[1] = (unint64_t)vqtbl2_s8(v286, v76);
          *(int8x8_t *)v128.i8 = vqtbl2_s8(v286, *(int8x8_t *)&v284);
          v128.u64[1] = (unint64_t)vqtbl2_s8(v286, *(int8x8_t *)((char *)&v284 + 8));
          float16x8_t *v68 = v134;
          v68[1] = v128;
          v68 += 2;
          *(int8x8_t *)v287.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v287.val[1], (float16x8_t)0), v143)));
          v287.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v137, (float16x8_t)0), v143)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v140, (float16x8_t)0), v143)));
          v287.val[1].u64[1] = (unint64_t)v81;
          *(int8x8_t *)v134.i8 = vqtbl2_s8(v287, *(int8x8_t *)v142.i8);
          v134.u64[1] = (unint64_t)vqtbl2_s8(v287, v76);
          *(int8x8_t *)v137.i8 = vqtbl2_s8(v287, *(int8x8_t *)v97.i8);
          v137.u64[1] = (unint64_t)vqtbl2_s8(v287, *(int8x8_t *)v116.i8);
          *float v79 = v134;
          v79[1] = v137;
          v79 += 2;
          v75 += 8;
        }
        while (v75 < (int)v9 - 7);
        unint64_t v144 = v9 & 0xFFFFFFF8;
      }
      if (v9 > v144)
      {
        uint64_t v145 = 0;
        if (result) {
          char v146 = 0;
        }
        else {
          char v146 = -1;
        }
        float v147 = &v68->i8[4];
        do
        {
          float v148 = (float)(v78->u16[1] >> v71) - v51;
          float v149 = a5.f32[1] * v148;
          float v150 = _S20 * (float)((float)(v70->u16[0] >> v71) - v47);
          float v151 = (float)(a5.f32[1] * v148) + v150;
          float v152 = 8191.0;
          if (v151 <= 8191.0)
          {
            float v152 = (float)(a5.f32[1] * v148) + v150;
            if (v151 < 0.0) {
              float v152 = 0.0;
            }
          }
          float v153 = (float)(v78->u16[0] >> v71) - v51;
          float v154 = (float)(a6.f32[1] * v148) + (float)(v153 * a6.f32[0]);
          float v155 = 8191.0;
          if ((float)(v150 + v154) <= 8191.0)
          {
            float v155 = v150 + v154;
            if ((float)(v150 + v154) < 0.0) {
              float v155 = 0.0;
            }
          }
          float v156 = v273 * v153;
          float v157 = (float)(v273 * v153) + v150;
          float v158 = 8191.0;
          if (v157 <= 8191.0)
          {
            float v158 = v157;
            if (v157 < 0.0) {
              float v158 = 0.0;
            }
          }
          float v159 = _S20 * (float)((float)(v70->u16[1] >> v71) - v47);
          float v160 = 8191.0;
          if ((float)(v149 + v159) <= 8191.0)
          {
            float v160 = v149 + v159;
            if ((float)(v149 + v159) < 0.0) {
              float v160 = 0.0;
            }
          }
          float v161 = 8191.0;
          if ((float)(v154 + v159) <= 8191.0)
          {
            float v161 = v154 + v159;
            if ((float)(v154 + v159) < 0.0) {
              float v161 = 0.0;
            }
          }
          float v162 = v156 + v159;
          BOOL v163 = (float)(v156 + v159) <= 8191.0;
          float v164 = 8191.0;
          if (v163)
          {
            float v164 = v162;
            if (v162 < 0.0) {
              float v164 = 0.0;
            }
          }
          float v165 = _S20 * (float)((float)(v77->u16[0] >> v71) - v47);
          float v166 = 8191.0;
          if ((float)(v149 + v165) <= 8191.0)
          {
            float v166 = v149 + v165;
            if ((float)(v149 + v165) < 0.0) {
              float v166 = 0.0;
            }
          }
          float v167 = 8191.0;
          if ((float)(v154 + v165) <= 8191.0)
          {
            float v167 = v154 + v165;
            if ((float)(v154 + v165) < 0.0) {
              float v167 = 0.0;
            }
          }
          float v168 = v156 + v165;
          BOOL v163 = (float)(v156 + v165) <= 8191.0;
          float v169 = 8191.0;
          if (v163)
          {
            float v169 = v168;
            if (v168 < 0.0) {
              float v169 = 0.0;
            }
          }
          float v170 = _S20 * (float)((float)(v77->u16[1] >> v71) - v47);
          float v171 = v149 + v170;
          float v172 = 8191.0;
          if (v171 <= 8191.0)
          {
            float v172 = v171;
            if (v171 < 0.0) {
              float v172 = 0.0;
            }
          }
          float v173 = v154 + v170;
          BOOL v163 = (float)(v154 + v170) <= 8191.0;
          float v174 = 8191.0;
          if (v163)
          {
            float v174 = v173;
            if (v173 < 0.0) {
              float v174 = 0.0;
            }
          }
          float v175 = v51;
          float v176 = v156 + v170;
          BOOL v163 = (float)(v156 + v170) <= 8191.0;
          float v177 = 8191.0;
          if (v163)
          {
            float v177 = v176;
            if (v176 < 0.0) {
              float v177 = 0.0;
            }
          }
          _H21 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H24 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H19
            FCVT            S25, H25
          }
          _H26 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H30 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H11 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H13
            FCVT            S9, H9
          }
          _H27 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H29 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v177, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v202 = (float)((float)(v281 * _S24) + (float)(_S21 * v282)) + (float)(_S19 * v280);
          float v203 = (float)((float)(v278 * _S24) + (float)(_S21 * v279)) + (float)(_S19 * v277);
          float v204 = (float)((float)(v275 * _S24) + (float)(_S21 * v276)) + (float)(_S19 * _S16);
          float v205 = (float)((float)(v281 * _S26) + (float)(_S25 * v282)) + (float)(_S30 * v280);
          float v206 = (float)((float)(v278 * _S26) + (float)(_S25 * v279)) + (float)(_S30 * v277);
          float v207 = (float)((float)(v275 * _S26) + (float)(_S25 * v276)) + (float)(_S30 * _S16);
          float v208 = (float)((float)(v281 * _S12) + (float)(_S11 * v282)) + (float)(_S13 * v280);
          float v209 = (float)((float)(v278 * _S12) + (float)(_S11 * v279)) + (float)(_S13 * v277);
          float v210 = (float)((float)(v275 * _S12) + (float)(_S11 * v276)) + (float)(_S13 * _S16);
          float v211 = (float)((float)(v281 * _S27) + (float)(_S9 * v282)) + (float)(_S29 * v280);
          float v212 = (float)((float)(v278 * _S27) + (float)(_S9 * v279)) + (float)(_S29 * v277);
          float v213 = (float)((float)(v275 * _S27) + (float)(_S9 * v276)) + (float)(_S29 * _S16);
          short float v214 = *(short float *)(v48 + 2 * llroundf(fminf(fmaxf(v202, 0.0), 8191.0)));
          short float v215 = *(short float *)(v48 + 2 * llroundf(fminf(fmaxf(v203, 0.0), 8191.0)));
          short float v216 = *(short float *)(v48 + 2 * llroundf(fminf(fmaxf(v204, 0.0), 8191.0)));
          short float v217 = *(short float *)(v48 + 2 * llroundf(fminf(fmaxf(v205, 0.0), 8191.0)));
          short float v218 = *(short float *)(v48 + 2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0)));
          short float v219 = *(short float *)(v48 + 2 * llroundf(fminf(fmaxf(v207, 0.0), 8191.0)));
          short float v220 = *(short float *)(v48 + 2 * llroundf(fminf(fmaxf(v208, 0.0), 8191.0)));
          short float v221 = *(short float *)(v48 + 2 * llroundf(fminf(fmaxf(v209, 0.0), 8191.0)));
          short float v222 = *(short float *)(v48 + 2 * llroundf(fminf(fmaxf(v210, 0.0), 8191.0)));
          short float v223 = *(short float *)(v48 + 2 * llroundf(fminf(fmaxf(v211, 0.0), 8191.0)));
          short float v224 = *(short float *)(v48 + 2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0)));
          short float v225 = *(short float *)(v48 + 2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0)));
          if (v214 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H15, #0 }
            if (_NF) {
              _S15 = 0.0;
            }
            else {
              __asm { FCVT            S15, H15 }
            }
          }
          else
          {
            _S15 = 255.0;
          }
          float v51 = v175;
          uint64_t v228 = v285;
          v147[v145 - 4 + v285] = llroundf(_S15);
          if (v215 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H14, #0 }
            if (_NF) {
              _S14 = 0.0;
            }
            else {
              __asm { FCVT            S14, H14 }
            }
          }
          else
          {
            _S14 = 255.0;
          }
          uint64_t v231 = BYTE1(v285);
          v147[v145 - 4 + BYTE1(v285)] = llroundf(_S14);
          if (v216 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H13, #0 }
            if (_NF) {
              _S13 = 0.0;
            }
            else {
              __asm { FCVT            S13, H13 }
            }
          }
          else
          {
            _S13 = 255.0;
          }
          uint64_t v234 = BYTE2(v285);
          v147[v145 - 4 + BYTE2(v285)] = llroundf(_S13);
          uint64_t v235 = HIBYTE(v285);
          v147[v145 - 4 + HIBYTE(v285)] = v146;
          if (v217 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S12 = 0.0;
            }
            else {
              __asm { FCVT            S12, H12 }
            }
          }
          else
          {
            _S12 = 255.0;
          }
          v147[v145 + v228] = llroundf(_S12);
          if (v218 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S11 = 0.0;
            }
            else {
              __asm { FCVT            S11, H11 }
            }
          }
          else
          {
            _S11 = 255.0;
          }
          v147[v145 + v231] = llroundf(_S11);
          if (v219 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H21, #0 }
            if (_NF) {
              _S21 = 0.0;
            }
            else {
              __asm { FCVT            S21, H21 }
            }
          }
          else
          {
            _S21 = 255.0;
          }
          v147[v145 + v234] = llroundf(_S21);
          v147[v145 + v235] = v146;
          if (v220 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H19, #0 }
            if (_NF) {
              _S19 = 0.0;
            }
            else {
              __asm { FCVT            S19, H19 }
            }
          }
          else
          {
            _S19 = 255.0;
          }
          v79->i8[v228 + v145] = llroundf(_S19);
          if (v221 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H30, #0 }
            if (_NF) {
              _S19 = 0.0;
            }
            else {
              __asm { FCVT            S19, H30 }
            }
          }
          else
          {
            _S19 = 255.0;
          }
          v79->i8[BYTE1(v285) + v145] = llroundf(_S19);
          if (v222 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H29, #0 }
            if (_NF) {
              _S19 = 0.0;
            }
            else {
              __asm { FCVT            S19, H29 }
            }
          }
          else
          {
            _S19 = 255.0;
          }
          v79->i8[BYTE2(v285) + v145] = llroundf(_S19);
          v79->i8[HIBYTE(v285) + v145] = v146;
          if (v223 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H27, #0 }
            if (_NF) {
              _S19 = 0.0;
            }
            else {
              __asm { FCVT            S19, H27 }
            }
          }
          else
          {
            _S19 = 255.0;
          }
          v79->i8[v145 + 4 + v285] = llroundf(_S19);
          if (v224 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S19 = 0.0;
            }
            else {
              __asm { FCVT            S19, H26 }
            }
          }
          else
          {
            _S19 = 255.0;
          }
          v79->i8[v145 + 4 + BYTE1(v285)] = llroundf(_S19);
          if (v225 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H24, #0 }
            if (_NF) {
              _S19 = 0.0;
            }
            else {
              __asm { FCVT            S19, H24 }
            }
          }
          else
          {
            _S19 = 255.0;
          }
          v79->i8[v145 + 4 + BYTE2(v285)] = llroundf(_S19);
          float v254 = &v79->i8[v145 + HIBYTE(v285)];
          v144 += 2;
          v145 += 8;
          v254[4] = v146;
          float v78 = (uint16x8_t *)((char *)v78 + 4);
          float v70 = (uint16x8_t *)((char *)v70 + 4);
          float v77 = (uint16x8_t *)((char *)v77 + 4);
        }
        while (v9 > v144);
      }
      float v70 = (uint16x8_t *)&v73[v25];
      v69 += v26;
      result += v28 + v28;
      float v68 = (float16x8_t *)&v74[v29];
      v46 += 2;
    }
    while (v255 > v46);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v169 = v21 * *(float *)(v13 + 16);
    float v170 = v21 * *(float *)(v13 + 8);
    float v167 = v21 * *(float *)(v13 + 28);
    float v168 = v21 * *(float *)(v13 + 20);
    float v25 = *(float *)(v13 + 80);
    float v165 = *(float *)(v13 + 76);
    float v166 = *(float *)(v13 + 72);
    float v26 = *(float *)(v13 + 84);
    float v27 = *(float *)(v13 + 88);
    float v28 = *(float *)(v13 + 92);
    float v29 = *(float *)(v13 + 96);
    float v30 = *(float *)(v13 + 100);
    float v31 = *(float *)(v13 + 104);
    uint64_t v32 = v13 + 164;
    uint64_t v33 = v13 + 16548;
    uint64_t v34 = (void *)*((void *)result + 16);
    uint64_t v35 = *((void *)result + 14);
    uint64_t v36 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v37 = *(void *)(result + 36);
    uint64_t v38 = v14[1];
    uint64_t v39 = (char *)(*v14 + v16 * v11 + 2 * v37);
    uint64_t v40 = v14[2];
    uint64_t v41 = v40 + v18 * v11 + 2 * v37;
    if (!v40) {
      uint64_t v41 = 0;
    }
    uint64_t v42 = *v34 + v36 * v19 + 4 * v35;
    unsigned int v43 = *(unsigned __int8 *)(v13 + 124);
    if (v43 >= 0x11) {
      char v44 = 0;
    }
    else {
      char v44 = 16 - v43;
    }
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v13 + 161);
    uint64_t v45 = *(unsigned __int8 *)(v13 + 160);
    uint64_t v46 = v38 + v17 * (v11 / 2);
    uint64_t v47 = *(unsigned __int8 *)(v13 + 159);
    uint64_t v48 = *(unsigned __int8 *)(v13 + 158);
    uint64_t v49 = v46 + 2 * v37;
    do
    {
      uint64_t v50 = v42 + v19;
      float v51 = &v39[v16];
      if (v10)
      {
        unint64_t v52 = 0;
        if (v41) {
          char v53 = 0;
        }
        else {
          char v53 = -1;
        }
        float v54 = &v39[v16];
        uint64_t v55 = v42 + v19;
        do
        {
          float v56 = (unsigned __int16 *)(v49 + 2 * v52);
          float v57 = (float)(v56[1] >> v44) - v23;
          float v58 = v170 * v57;
          float v59 = v24 * (float)((float)(*(unsigned __int16 *)v39 >> v44) - v22);
          float v60 = (float)(v170 * v57) + v59;
          float v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            float v61 = (float)(v170 * v57) + v59;
            if (v60 < 0.0) {
              float v61 = 0.0;
            }
          }
          float v62 = (float)(*v56 >> v44) - v23;
          float v63 = (float)(v168 * v57) + (float)(v62 * v169);
          float v64 = 8191.0;
          if ((float)(v59 + v63) <= 8191.0)
          {
            float v64 = v59 + v63;
            if ((float)(v59 + v63) < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = v167 * v62;
          float v66 = (float)(v167 * v62) + v59;
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = v66;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = v24 * (float)((float)(*((unsigned __int16 *)v39 + 1) >> v44) - v22);
          float v69 = 8191.0;
          if ((float)(v58 + v68) <= 8191.0)
          {
            float v69 = v58 + v68;
            if ((float)(v58 + v68) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = 8191.0;
          if ((float)(v63 + v68) <= 8191.0)
          {
            float v70 = v63 + v68;
            if ((float)(v63 + v68) < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v65 + v68;
          BOOL v72 = (float)(v65 + v68) <= 8191.0;
          float v73 = 8191.0;
          if (v72)
          {
            float v73 = v71;
            if (v71 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v24 * (float)((float)(*(unsigned __int16 *)v54 >> v44) - v22);
          float v75 = 8191.0;
          if ((float)(v58 + v74) <= 8191.0)
          {
            float v75 = v58 + v74;
            if ((float)(v58 + v74) < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = 8191.0;
          if ((float)(v63 + v74) <= 8191.0)
          {
            float v76 = v63 + v74;
            if ((float)(v63 + v74) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v65 + v74;
          BOOL v72 = (float)(v65 + v74) <= 8191.0;
          float v78 = 8191.0;
          if (v72)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v24 * (float)((float)(*((unsigned __int16 *)v54 + 1) >> v44) - v22);
          float v80 = v58 + v79;
          BOOL v72 = (float)(v58 + v79) <= 8191.0;
          float v81 = 8191.0;
          if (v72)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v63 + v79;
          BOOL v72 = (float)(v63 + v79) <= 8191.0;
          float v83 = 8191.0;
          if (v72)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v23;
          float v85 = v22;
          float v86 = v65 + v79;
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H9 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H13
            FCVT            S29, H29
          }
          _H31 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          float v116 = (float)((float)(v165 * _S27) + (float)(_S26 * v166)) + (float)(_S28 * v25);
          float v117 = (float)((float)(v27 * _S27) + (float)(_S26 * v26)) + (float)(_S28 * v28);
          float v118 = (float)((float)(v30 * _S27) + (float)(_S26 * v29)) + (float)(_S28 * v31);
          float v119 = (float)((float)(v165 * _S9) + (float)(_S30 * v166)) + (float)(_S10 * v25);
          float v120 = (float)((float)(v27 * _S9) + (float)(_S30 * v26)) + (float)(_S10 * v28);
          float v121 = (float)((float)(v30 * _S9) + (float)(_S30 * v29)) + (float)(_S10 * v31);
          float v122 = (float)((float)(v165 * _S12) + (float)(_S11 * v166)) + (float)(_S13 * v25);
          float v123 = (float)((float)(v27 * _S12) + (float)(_S11 * v26)) + (float)(_S13 * v28);
          float v124 = (float)((float)(v30 * _S12) + (float)(_S11 * v29)) + (float)(_S13 * v31);
          float v125 = (float)((float)(v165 * _S31) + (float)(_S29 * v166)) + (float)(_S8 * v25);
          float v126 = (float)((float)(v27 * _S31) + (float)(_S29 * v26)) + (float)(_S8 * v28);
          float v127 = (float)((float)(v30 * _S31) + (float)(_S29 * v29)) + (float)(_S8 * v31);
          short float v128 = *(short float *)(v33 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          short float v129 = *(short float *)(v33 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          short float v130 = *(short float *)(v33 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          short float v131 = *(short float *)(v33 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          short float v132 = *(short float *)(v33 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          short float v133 = *(short float *)(v33 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          short float v134 = *(short float *)(v33 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          short float v135 = *(short float *)(v33 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          short float v136 = *(short float *)(v33 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          short float v137 = *(short float *)(v33 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          short float v138 = *(short float *)(v33 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          if (*(short float *)(v33 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H14, #0 }
            if (_NF) {
              _S14 = 0.0;
            }
            else {
              __asm { FCVT            S14, H14 }
            }
          }
          else
          {
            _S14 = 255.0;
          }
          float v22 = v85;
          float v23 = v84;
          *(unsigned char *)(v42 + v48) = llroundf(_S14);
          if (v128 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H13, #0 }
            if (_NF) {
              _S13 = 0.0;
            }
            else {
              __asm { FCVT            S13, H13 }
            }
          }
          else
          {
            _S13 = 255.0;
          }
          *(unsigned char *)(v42 + v47) = llroundf(_S13);
          if (v129 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S12 = 0.0;
            }
            else {
              __asm { FCVT            S12, H12 }
            }
          }
          else
          {
            _S12 = 255.0;
          }
          *(unsigned char *)(v42 + v45) = llroundf(_S12);
          result[v42] = v53;
          if (v130 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S11 = 0.0;
            }
            else {
              __asm { FCVT            S11, H11 }
            }
          }
          else
          {
            _S11 = 255.0;
          }
          uint64_t v147 = v42 + 4;
          *(unsigned char *)(v42 + 4 + v48) = llroundf(_S11);
          if (v131 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H10, #0 }
            if (_NF) {
              _S10 = 0.0;
            }
            else {
              __asm { FCVT            S10, H10 }
            }
          }
          else
          {
            _S10 = 255.0;
          }
          *(unsigned char *)(v147 + v47) = llroundf(_S10);
          if (v132 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H9, #0 }
            if (_NF) {
              _S9 = 0.0;
            }
            else {
              __asm { FCVT            S9, H9 }
            }
          }
          else
          {
            _S9 = 255.0;
          }
          *(unsigned char *)(v147 + v45) = llroundf(_S9);
          result[v147] = v53;
          if (v133 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H8, #0 }
            if (_NF) {
              _S8 = 0.0;
            }
            else {
              __asm { FCVT            S8, H8 }
            }
          }
          else
          {
            _S8 = 255.0;
          }
          *(unsigned char *)(v55 + v48) = llroundf(_S8);
          if (v134 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H31, #0 }
            if (_NF) {
              _S31 = 0.0;
            }
            else {
              __asm { FCVT            S31, H31 }
            }
          }
          else
          {
            _S31 = 255.0;
          }
          *(unsigned char *)(v55 + v47) = llroundf(_S31);
          if (v135 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H30, #0 }
            if (_NF) {
              _S30 = 0.0;
            }
            else {
              __asm { FCVT            S30, H30 }
            }
          }
          else
          {
            _S30 = 255.0;
          }
          *(unsigned char *)(v55 + v45) = llroundf(_S30);
          result[v55] = v53;
          if (v136 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H29, #0 }
            if (_NF) {
              _S29 = 0.0;
            }
            else {
              __asm { FCVT            S29, H29 }
            }
          }
          else
          {
            _S29 = 255.0;
          }
          uint64_t v160 = v55 + 4;
          *(unsigned char *)(v55 + 4 + v48) = llroundf(_S29);
          if (v137 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H28, #0 }
            if (_NF) {
              _S28 = 0.0;
            }
            else {
              __asm { FCVT            S28, H28 }
            }
          }
          else
          {
            _S28 = 255.0;
          }
          *(unsigned char *)(v160 + v47) = llroundf(_S28);
          if (v138 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H26 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          v39 += 4;
          v54 += 4;
          *(unsigned char *)(v160 + v45) = llroundf(_S26);
          v42 += 8;
          result[v160] = v53;
          v55 += 8;
          v52 += 2;
        }
        while (v10 > v52);
      }
      uint64_t v39 = &v51[v16];
      v49 += v17;
      v41 += v18 + v18;
      uint64_t v42 = v50 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_BGRA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_BGRA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_xf420_rgb_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, int16x4_t a6, double a7, float32x4_t a8, double a9, float32x4_t a10)
{
  int v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 20);
  uint64_t v13 = *(void *)(a1 + 36);
  uint64_t v14 = *(void *)(a1 + 44);
  uint64_t v15 = *(void *)(a1 + 28);
  unint64_t v16 = 2 * *a1;
  uint64_t v17 = 2 * (v15 * a2 / v16);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = 2 * ((v15 + v15 * a2) / v16);
  uint64_t v20 = v14 + v19;
  uint64_t v138 = *((void *)a1 + 14);
  uint64_t v21 = *((void *)a1 + 19);
  uint64_t v23 = (uint64_t *)*((void *)a1 + 7);
  size_t v22 = (uint64_t *)*((void *)a1 + 8);
  uint64_t v24 = *v22;
  uint64_t v25 = v22[1];
  uint64_t v26 = *((void *)a1 + 15) + 2 * (*((void *)a1 + 13) * a2 / v16);
  uint64_t v137 = *v23;
  uint64_t v27 = v23[1];
  uint64_t v28 = v23[2];
  uint64_t v136 = v27;
  uint64_t v29 = v22[2];
  uint64_t v30 = **((void **)a1 + 17);
  uint64_t v31 = **((void **)a1 + 16);
  unsigned int v32 = *(_DWORD *)(v21 + 128);
  if (v18 >= 0) {
    uint64_t v33 = v18;
  }
  else {
    uint64_t v33 = v18 + 1;
  }
  unsigned int v34 = *(_DWORD *)(v21 + 136);
  uint64_t v139 = v25;
  uint64_t v35 = v25 * (v33 >> 1);
  int v142 = *(_DWORD *)(v21 + 158);
  unsigned int v36 = *(unsigned __int16 *)(v21 + 140);
  uint64_t v37 = v30 * v26;
  unsigned int v38 = *(unsigned __int8 *)(v21 + 124);
  unsigned int v39 = *(unsigned __int16 *)(v21 + 142);
  float v40 = *(float *)v21;
  unsigned __int32 v41 = *(_DWORD *)(v21 + 8);
  a10.i64[0] = *(void *)(v21 + 16);
  a8.i32[0] = *(_DWORD *)(v21 + 28);
  HIDWORD(v42) = 0;
  long long v140 = 0u;
  long long v141 = 0u;
  do
  {
    int v43 = 0;
    char v44 = *((unsigned char *)&v142 + v11);
    do
    {
      uint64_t result = (v10 + v43);
      *(unsigned char *)(((unint64_t)&v140 + ((v44 + 4 * v43) & 0xF8)) | (v44 + 4 * (_BYTE)v43) & 7) = v10 + v43;
      ++v43;
    }
    while (v43 != 8);
    ++v11;
    v10 += 8;
  }
  while (v11 != 4);
  if (v19 != v17)
  {
    unint64_t v46 = 0;
    unint64_t v47 = v20 - v18;
    float v48 = (float)v34 / (float)v32;
    *(float *)&uint64_t v42 = (float)v36;
    float v49 = (float)v39;
    _S2 = v48 * v40;
    *(short float *)a6.i16 = (short float)v36;
    float16x8_t v51 = (float16x8_t)vdupq_lane_s16(a6, 0);
    __asm { FCVT            H4, S2 }
    short float v57 = -(short float)v39;
    a8.i32[1] = v41;
    *(float32x2_t *)a8.f32 = vmul_n_f32(*(float32x2_t *)a8.f32, v48);
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    *(float32x2_t *)a10.f32 = vmul_n_f32(*(float32x2_t *)a10.f32, v48);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    float16x8_t v60 = vmulq_n_f16(v58, v57);
    float16x8_t v61 = vmulq_n_f16(v59, v57);
    uint64_t v62 = v136 + v35;
    if (v38 >= 0x11) {
      unsigned __int8 v63 = 0;
    }
    else {
      unsigned __int8 v63 = 16 - v38;
    }
    float v64 = (float16x8_t *)(v31 + v37 + 4 * v138);
    if (v28) {
      uint64_t v65 = v28 + v29 * v18 + 2 * v13;
    }
    else {
      uint64_t v65 = 0;
    }
    float v66 = (uint16x8_t *)(v62 + 2 * v13);
    float v67 = (uint16x8_t *)(v137 + v24 * v18 + 2 * v13);
    uint64_t result = (v12 - 7);
    uint16x8_t v68 = (uint16x8_t)vdupq_n_s16(-v63);
    unsigned __int8 v69 = v63;
    do
    {
      float v70 = &v64->i8[v30];
      float v71 = &v67->i8[v24];
      if ((int)v12 < 8)
      {
        unint64_t v97 = 0;
        float v76 = &v64->i8[v30];
        float v75 = v66;
        float v74 = (uint16x8_t *)((char *)v67 + v24);
      }
      else
      {
        int v72 = 0;
        int8x8_t v73 = *(int8x8_t *)((char *)&v140 + 8);
        float v74 = (uint16x8_t *)((char *)v67 + v24);
        float v75 = v66;
        float v76 = &v64->i8[v30];
        do
        {
          if (v65)
          {
            int16x8_t v77 = (int16x8_t)vcvtq_u32_f32((float32x4_t)0);
            int8x8_t v78 = vmovn_s16(vuzp1q_s16(v77, v77));
          }
          else
          {
            int8x8_t v78 = (int8x8_t)-1;
          }
          uint16x8_t v79 = *v75++;
          float16x8_t v80 = vcvtq_f16_u16(vshlq_u16(v79, v68));
          int8x16_t v81 = (int8x16_t)vmlaq_f16(v60, v58, v80);
          int16x8_t v82 = (int16x8_t)vmlaq_f16(v61, v59, v80);
          v80.i64[0] = vextq_s8(v81, v81, 8uLL).u64[0];
          *(int16x4_t *)v83.i8 = vuzp1_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v80.i8);
          *(int16x4_t *)v80.i8 = vuzp2_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v80.i8);
          v80.i64[1] = v42;
          float16x8_t v84 = (float16x8_t)vzip1q_s16((int16x8_t)v80, (int16x8_t)v80);
          v83.i64[1] = v42;
          float16x8_t v85 = (float16x8_t)vzip1q_s16(v83, v83);
          v83.i64[0] = vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL).u64[0];
          *(float16x4_t *)v82.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v83.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v83.i8));
          v82.i64[1] = v42;
          float16x8_t v86 = (float16x8_t)vzip1q_s16(v82, v82);
          uint16x8_t v87 = *v67++;
          float16x8_t v88 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v87, v68)), v51);
          float16x8_t v89 = vmlaq_n_f16(v84, v88, _H4);
          float16x8_t v90 = vmlaq_n_f16(v86, v88, _H4);
          float16x8_t v91 = vmlaq_n_f16(v85, v88, _H4);
          v88.i64[0] = v140;
          float16x8_t v92 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v143.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v91, (float16x8_t)0), v92)));
          v143.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v89, (float16x8_t)0), v92)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v90, (float16x8_t)0), v92)));
          v143.val[1].u64[1] = (unint64_t)v78;
          *(int8x8_t *)v89.i8 = vqtbl2_s8(v143, *(int8x8_t *)&v140);
          v89.u64[1] = (unint64_t)vqtbl2_s8(v143, v73);
          v90.i64[0] = *((void *)&v141 + 1);
          int8x8_t v93 = (int8x8_t)v141;
          *(int8x8_t *)v91.i8 = vqtbl2_s8(v143, *(int8x8_t *)&v141);
          *(int8x8_t *)v143.val[0].i8 = vqtbl2_s8(v143, *(int8x8_t *)((char *)&v141 + 8));
          uint16x8_t v94 = *v74++;
          v143.val[1] = (int8x16_t)vsubq_f16(vcvtq_f16_u16(vshlq_u16(v94, v68)), v51);
          v91.i64[1] = v143.val[0].i64[0];
          *float v64 = v89;
          v64[1] = v91;
          v64 += 2;
          *(int8x8_t *)v143.val[0].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v85, (float16x8_t)v143.val[1], _H4), (float16x8_t)0), v92)));
          int8x16_t v95 = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v84, (float16x8_t)v143.val[1], _H4), (float16x8_t)0), v92)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v86, (float16x8_t)v143.val[1], _H4), (float16x8_t)0), v92)));
          v143.val[0].u64[1] = (unint64_t)v78;
          *(int8x8_t *)&long long v96 = vqtbl2_s8(v143, *(int8x8_t *)v88.i8);
          *((int8x8_t *)&v96 + 1) = vqtbl2_s8(v143, v73);
          *(int8x8_t *)v85.i8 = vqtbl2_s8(v143, v93);
          v85.u64[1] = (unint64_t)vqtbl2_s8(v143, *(int8x8_t *)v90.i8);
          *(_OWORD *)float v76 = v96;
          *((float16x8_t *)v76 + 1) = v85;
          v76 += 32;
          v72 += 8;
        }
        while (v72 < (int)result);
        unint64_t v97 = v12 & 0xFFFFFFF8;
      }
      if (v12 > v97)
      {
        uint64_t v98 = 0;
        if (v65) {
          char v99 = 0;
        }
        else {
          char v99 = -1;
        }
        float16x8_t v100 = &v64->i8[4];
        do
        {
          float v101 = (float)(v75->u16[1] >> v69) - v49;
          float v102 = a8.f32[1] * v101;
          float v103 = _S2 * (float)((float)(v67->u16[0] >> v69) - *(float *)&v42);
          float v104 = (float)(a8.f32[1] * v101) + v103;
          float v105 = 255.0;
          if (v104 <= 255.0)
          {
            float v105 = (float)(a8.f32[1] * v101) + v103;
            if (v104 < 0.0) {
              float v105 = 0.0;
            }
          }
          float v106 = (float)(v75->u16[0] >> v69) - v49;
          float v107 = (float)(a10.f32[1] * v101) + (float)(v106 * a10.f32[0]);
          unsigned int v108 = v67->u16[1];
          unsigned int v109 = v74->u16[0];
          unsigned int v110 = v74->u16[1];
          uint64_t v111 = v142;
          v100[v98 - 4 + v142] = llroundf(v105);
          float v112 = 255.0;
          if ((float)(v103 + v107) <= 255.0)
          {
            float v112 = v103 + v107;
            if ((float)(v103 + v107) < 0.0) {
              float v112 = 0.0;
            }
          }
          float v113 = a8.f32[0] * v106;
          float v114 = v113 + v103;
          uint64_t v115 = BYTE1(v142);
          v100[v98 - 4 + BYTE1(v142)] = llroundf(v112);
          float v116 = 255.0;
          if (v114 <= 255.0)
          {
            float v116 = v114;
            if (v114 < 0.0) {
              float v116 = 0.0;
            }
          }
          float v117 = _S2 * (float)((float)(int)(v108 >> v69) - *(float *)&v42);
          uint64_t v118 = BYTE2(v142);
          v100[v98 - 4 + BYTE2(v142)] = llroundf(v116);
          uint64_t v119 = HIBYTE(v142);
          v100[v98 - 4 + HIBYTE(v142)] = v99;
          float v120 = 255.0;
          if ((float)(v102 + v117) <= 255.0)
          {
            float v120 = v102 + v117;
            if ((float)(v102 + v117) < 0.0) {
              float v120 = 0.0;
            }
          }
          v100[v98 + v111] = llroundf(v120);
          float v121 = 255.0;
          if ((float)(v107 + v117) <= 255.0)
          {
            float v121 = v107 + v117;
            if ((float)(v107 + v117) < 0.0) {
              float v121 = 0.0;
            }
          }
          float v122 = v113 + v117;
          v100[v98 + v115] = llroundf(v121);
          float v123 = 255.0;
          if (v122 <= 255.0)
          {
            float v123 = v122;
            if (v122 < 0.0) {
              float v123 = 0.0;
            }
          }
          float v124 = _S2 * (float)((float)(int)(v109 >> v69) - *(float *)&v42);
          v100[v98 + v118] = llroundf(v123);
          v100[v98 + v119] = v99;
          float v125 = 255.0;
          if ((float)(v102 + v124) <= 255.0)
          {
            float v125 = v102 + v124;
            if ((float)(v102 + v124) < 0.0) {
              float v125 = 0.0;
            }
          }
          v76[v111 + v98] = llroundf(v125);
          float v126 = 255.0;
          if ((float)(v107 + v124) <= 255.0)
          {
            float v126 = v107 + v124;
            if ((float)(v107 + v124) < 0.0) {
              float v126 = 0.0;
            }
          }
          float v127 = v113 + v124;
          v76[BYTE1(v142) + v98] = llroundf(v126);
          float v128 = 255.0;
          if (v127 <= 255.0)
          {
            float v128 = v127;
            if (v127 < 0.0) {
              float v128 = 0.0;
            }
          }
          float v129 = _S2 * (float)((float)(int)(v110 >> v69) - *(float *)&v42);
          float v130 = v102 + v129;
          v76[BYTE2(v142) + v98] = llroundf(v128);
          v76[HIBYTE(v142) + v98] = v99;
          float v131 = 255.0;
          if (v130 <= 255.0)
          {
            float v131 = v130;
            if (v130 < 0.0) {
              float v131 = 0.0;
            }
          }
          float v132 = v107 + v129;
          v76[v98 + 4 + v142] = llroundf(v131);
          float v133 = 255.0;
          if (v132 <= 255.0)
          {
            float v133 = v132;
            if (v132 < 0.0) {
              float v133 = 0.0;
            }
          }
          v76[v98 + 4 + BYTE1(v142)] = llroundf(v133);
          float v134 = 255.0;
          if ((float)(v113 + v129) <= 255.0)
          {
            float v134 = v113 + v129;
            if ((float)(v113 + v129) < 0.0) {
              float v134 = 0.0;
            }
          }
          v76[v98 + 4 + BYTE2(v142)] = llroundf(v134);
          short float v135 = &v76[v98 + HIBYTE(v142)];
          v97 += 2;
          v98 += 8;
          v135[4] = v99;
          float v75 = (uint16x8_t *)((char *)v75 + 4);
          float v67 = (uint16x8_t *)((char *)v67 + 4);
          float v74 = (uint16x8_t *)((char *)v74 + 4);
        }
        while (v12 > v97);
      }
      float v67 = (uint16x8_t *)&v71[v24];
      float v66 = (uint16x8_t *)((char *)v66 + v139);
      v65 += v29 + v29;
      float v64 = (float16x8_t *)&v70[v30];
      v46 += 2;
    }
    while (v47 > v46);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = 2 * *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = *(void *)(result + 20);
    uint64_t v8 = *(void *)(result + 44) + 2 * v4;
    unint64_t v9 = 2 * v5 - 2 * v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v12 = (void *)*((void *)result + 7);
    uint64_t v11 = (uint64_t *)*((void *)result + 8);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v16 = **((void **)result + 17);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v10 + 136);
    float v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = v19 * *(float *)(v10 + 28);
    uint64_t v27 = (void *)*((void *)result + 16);
    uint64_t v28 = *((void *)result + 14);
    uint64_t v29 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v3);
    uint64_t v30 = *(void *)(result + 36);
    uint64_t v31 = v12[1];
    uint64_t v32 = (char *)(*v12 + v13 * v8 + 2 * v30);
    uint64_t v33 = v12[2];
    uint64_t result = (unsigned __int8 *)(v33 + v15 * v8 + 2 * v30);
    if (!v33) {
      uint64_t result = 0;
    }
    uint64_t v34 = *v27 + v29 * v16 + 4 * v28;
    unsigned int v35 = *(unsigned __int8 *)(v10 + 124);
    if (v35 >= 0x11) {
      char v36 = 0;
    }
    else {
      char v36 = 16 - v35;
    }
    uint64_t v37 = *(unsigned __int8 *)(v10 + 161);
    uint64_t v38 = *(unsigned __int8 *)(v10 + 160);
    if (v8 >= 0) {
      uint64_t v39 = v8;
    }
    else {
      uint64_t v39 = v8 + 1;
    }
    uint64_t v40 = v31 + v14 * (v39 >> 1);
    uint64_t v41 = *(unsigned __int8 *)(v10 + 159);
    uint64_t v42 = *(unsigned __int8 *)(v10 + 158);
    uint64_t v43 = v40 + 2 * v30;
    char v44 = v36;
    do
    {
      uint64_t v45 = v34 + v16;
      unint64_t v46 = &v32[v13];
      if (v7)
      {
        unint64_t v47 = 0;
        if (result) {
          char v48 = 0;
        }
        else {
          char v48 = -1;
        }
        float v49 = &v32[v13];
        uint64_t v50 = v34 + v16;
        do
        {
          float16x8_t v51 = (unsigned __int16 *)(v43 + 2 * v47);
          float v52 = (float)(v51[1] >> v44) - v21;
          float v53 = v23 * v52;
          float v54 = v22 * (float)((float)(*(unsigned __int16 *)v32 >> v44) - v20);
          float v55 = (float)(v23 * v52) + v54;
          float v56 = 255.0;
          if (v55 <= 255.0)
          {
            float v56 = (float)(v23 * v52) + v54;
            if (v55 < 0.0) {
              float v56 = 0.0;
            }
          }
          float v57 = (float)(*v51 >> v44) - v21;
          float v58 = (float)(v25 * v52) + (float)(v57 * v24);
          unsigned int v59 = *((unsigned __int16 *)v32 + 1);
          unsigned int v60 = *(unsigned __int16 *)v49;
          unsigned int v61 = *((unsigned __int16 *)v49 + 1);
          *(unsigned char *)(v34 + v42) = llroundf(v56);
          float v62 = 255.0;
          if ((float)(v54 + v58) <= 255.0)
          {
            float v62 = v54 + v58;
            if ((float)(v54 + v58) < 0.0) {
              float v62 = 0.0;
            }
          }
          float v63 = v26 * v57;
          float v64 = v63 + v54;
          *(unsigned char *)(v34 + v41) = llroundf(v62);
          float v65 = 255.0;
          if (v64 <= 255.0)
          {
            float v65 = v64;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = v22 * (float)((float)(int)(v59 >> v44) - v20);
          *(unsigned char *)(v34 + v38) = llroundf(v65);
          *(unsigned char *)(v34 + v37) = v48;
          float v67 = 255.0;
          if ((float)(v53 + v66) <= 255.0)
          {
            float v67 = v53 + v66;
            if ((float)(v53 + v66) < 0.0) {
              float v67 = 0.0;
            }
          }
          uint64_t v68 = v34 + 4;
          *(unsigned char *)(v34 + 4 + v42) = llroundf(v67);
          float v69 = 255.0;
          if ((float)(v58 + v66) <= 255.0)
          {
            float v69 = v58 + v66;
            if ((float)(v58 + v66) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v63 + v66;
          *(unsigned char *)(v68 + v41) = llroundf(v69);
          float v71 = 255.0;
          if (v70 <= 255.0)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v22 * (float)((float)(int)(v60 >> v44) - v20);
          *(unsigned char *)(v68 + v38) = llroundf(v71);
          *(unsigned char *)(v68 + v37) = v48;
          float v73 = 255.0;
          if ((float)(v53 + v72) <= 255.0)
          {
            float v73 = v53 + v72;
            if ((float)(v53 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          *(unsigned char *)(v50 + v42) = llroundf(v73);
          float v74 = 255.0;
          if ((float)(v58 + v72) <= 255.0)
          {
            float v74 = v58 + v72;
            if ((float)(v58 + v72) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v63 + v72;
          *(unsigned char *)(v50 + v41) = llroundf(v74);
          float v76 = 255.0;
          if (v75 <= 255.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v22 * (float)((float)(int)(v61 >> v44) - v20);
          *(unsigned char *)(v50 + v38) = llroundf(v76);
          float v78 = v53 + v77;
          *(unsigned char *)(v50 + v37) = v48;
          float v79 = 255.0;
          if (v78 <= 255.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v58 + v77;
          uint64_t v81 = v50 + 4;
          *(unsigned char *)(v50 + 4 + v42) = llroundf(v79);
          float v82 = 255.0;
          if (v80 <= 255.0)
          {
            float v82 = v80;
            if (v80 < 0.0) {
              float v82 = 0.0;
            }
          }
          *(unsigned char *)(v81 + v41) = llroundf(v82);
          float v83 = 255.0;
          if ((float)(v63 + v77) <= 255.0)
          {
            float v83 = v63 + v77;
            if ((float)(v63 + v77) < 0.0) {
              float v83 = 0.0;
            }
          }
          v32 += 4;
          v49 += 4;
          *(unsigned char *)(v81 + v38) = llroundf(v83);
          v34 += 8;
          *(unsigned char *)(v81 + v37) = v48;
          v50 += 8;
          v47 += 2;
        }
        while (v7 > v47);
      }
      uint64_t v32 = &v46[v13];
      v43 += v14;
      result += v15 + v15;
      uint64_t v34 = v45 + v16;
      v6 += 2;
    }
    while (v9 > v6);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = 2 * *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 44) + 2 * v6;
    unint64_t v11 = 2 * v7 - 2 * v6;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v13 = (void *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = **((void **)result + 17);
    float v19 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    LOWORD(a4) = *(_WORD *)(v12 + 140);
    float v20 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v12 + 142);
    float v21 = (float)LODWORD(a4);
    float v22 = v19 * *(float *)v12;
    float v207 = v19 * *(float *)(v12 + 16);
    float v208 = v19 * *(float *)(v12 + 8);
    float v23 = v19 * *(float *)(v12 + 20);
    *(float *)&unsigned int v24 = v19 * *(float *)(v12 + 28);
    float v205 = *(float *)&v24;
    float v206 = v23;
    LOWORD(v24) = *(_WORD *)(v12 + 144);
    float v25 = (float)v24;
    float v203 = *(float *)(v12 + 76);
    float v204 = *(float *)(v12 + 72);
    float v201 = *(float *)(v12 + 84);
    float v202 = *(float *)(v12 + 80);
    float v199 = *(float *)(v12 + 92);
    float v200 = *(float *)(v12 + 88);
    float v197 = *(float *)(v12 + 100);
    float v198 = *(float *)(v12 + 96);
    uint64_t v26 = v12 + 164;
    uint64_t v27 = v12 + 16548;
    uint64_t v28 = v12 + 32932;
    float v29 = *(float *)(v12 + 108);
    float v196 = *(float *)(v12 + 104);
    float v30 = *(float *)(v12 + 112);
    float v31 = *(float *)(v12 + 116);
    float v32 = *(float *)(v12 + 120);
    uint64_t v33 = *((void *)result + 14);
    uint64_t v34 = (void *)*((void *)result + 16);
    uint64_t v35 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v5);
    uint64_t v36 = *(void *)(result + 36);
    uint64_t v37 = v13[1];
    uint64_t result = (unsigned __int8 *)(*v13 + v15 * v10 + 2 * v36);
    uint64_t v38 = v13[2];
    _ZF = v38 == 0;
    uint64_t v40 = v38 + v17 * v10 + 2 * v36;
    if (_ZF) {
      uint64_t v40 = 0;
    }
    uint64_t v41 = (unsigned int *)(*v34 + v35 * v18 + 16 * v33);
    unsigned int v42 = *(unsigned __int8 *)(v12 + 124);
    if (v42 >= 0x11) {
      char v43 = 0;
    }
    else {
      char v43 = 16 - v42;
    }
    uint64_t v44 = v37 + v16 * (v10 / 2) + 2 * v36;
    float v209 = (float)LODWORD(a4);
    float v194 = v20;
    float v195 = v22;
    float v193 = v30;
    do
    {
      uint64_t v45 = (char *)v41 + v18;
      unint64_t v46 = &result[v15];
      if (v9)
      {
        unint64_t v47 = 0;
        float v48 = 3.0;
        if (v40) {
          float v48 = 0.0;
        }
        unsigned int v49 = llroundf(v48) << 30;
        uint64_t v50 = &result[v15];
        float16x8_t v51 = (unsigned int *)((char *)v41 + v18);
        do
        {
          float v52 = (unsigned __int16 *)(v44 + 2 * v47);
          float v53 = (float)(v52[1] >> v43) - v21;
          float v54 = v208 * v53;
          float v55 = v22 * (float)((float)(*(unsigned __int16 *)result >> v43) - v20);
          float v56 = (float)(v208 * v53) + v55;
          float v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            float v57 = (float)(v208 * v53) + v55;
            if (v56 < 0.0) {
              float v57 = 0.0;
            }
          }
          float v58 = (float)(*v52 >> v43) - v21;
          float v59 = (float)(v206 * v53) + (float)(v58 * v207);
          float v60 = 8191.0;
          if ((float)(v55 + v59) <= 8191.0)
          {
            float v60 = v55 + v59;
            if ((float)(v55 + v59) < 0.0) {
              float v60 = 0.0;
            }
          }
          float v61 = v205 * v58;
          float v62 = (float)(v205 * v58) + v55;
          float v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            float v63 = v62;
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = v22 * (float)((float)(*((unsigned __int16 *)result + 1) >> v43) - v20);
          float v65 = 8191.0;
          if ((float)(v54 + v64) <= 8191.0)
          {
            float v65 = v54 + v64;
            if ((float)(v54 + v64) < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = 8191.0;
          if ((float)(v59 + v64) <= 8191.0)
          {
            float v66 = v59 + v64;
            if ((float)(v59 + v64) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v61 + v64;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v22 * (float)((float)(*(unsigned __int16 *)v50 >> v43) - v20);
          float v70 = 8191.0;
          if ((float)(v54 + v69) <= 8191.0)
          {
            float v70 = v54 + v69;
            if ((float)(v54 + v69) < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = 8191.0;
          if ((float)(v59 + v69) <= 8191.0)
          {
            float v71 = v59 + v69;
            if ((float)(v59 + v69) < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v61 + v69;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v22 * (float)((float)(*((unsigned __int16 *)v50 + 1) >> v43) - v20);
          float v75 = v54 + v74;
          BOOL v76 = (float)(v54 + v74) <= 8191.0;
          float v77 = 8191.0;
          if (v76)
          {
            float v77 = v75;
            if (v75 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v59 + v74;
          BOOL v76 = (float)(v59 + v74) <= 8191.0;
          float v79 = 8191.0;
          if (v76)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v61 + v74;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v57, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H0 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          __asm { FCVT            S18, H0 }
          _H0 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S10, H0 }
          _H1 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          float v100 = (float)((float)((float)(v30 * _S18) + (float)(v29 * _S8)) + (float)(v31 * _S10))
               + (float)(v32 * fmaxf(_S8, fmaxf(_S18, _S10)));
          float v101 = 8191.0;
          if (v100 <= 8191.0)
          {
            float v101 = v100;
            if (v100 < 0.0) {
              float v101 = 0.0;
            }
          }
          __asm
          {
            FCVT            S4, H1
            FCVT            S5, H3
            FCVT            S6, H17
          }
          _H13 = *(_WORD *)(v27 + 2 * llroundf(v101));
          float v106 = (float)((float)((float)(v30 * _S5) + (float)(v29 * _S4)) + (float)(v31 * _S6))
               + (float)(v32 * fmaxf(_S4, fmaxf(_S5, _S6)));
          float v107 = 8191.0;
          if (v106 <= 8191.0)
          {
            float v107 = v106;
            if (v106 < 0.0) {
              float v107 = 0.0;
            }
          }
          __asm
          {
            FCVT            S2, H14
            FCVT            S15, H15
            FCVT            S14, H7
          }
          _H1 = *(_WORD *)(v27 + 2 * llroundf(v107));
          float v112 = (float)((float)((float)(v30 * _S15) + (float)(v29 * _S2)) + (float)(v31 * _S14))
               + (float)(v32 * fmaxf(_S2, fmaxf(_S15, _S14)));
          float v113 = 8191.0;
          if (v112 <= 8191.0)
          {
            float v113 = v112;
            if (v112 < 0.0) {
              float v113 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H31
            FCVT            S7, H11
            FCVT            S17, H12
          }
          _H31 = *(_WORD *)(v27 + 2 * llroundf(v113));
          float v118 = v29;
          float v119 = (float)((float)((float)(v30 * _S7) + (float)(v29 * _S3)) + (float)(v31 * _S17))
               + (float)(v32 * fmaxf(_S3, fmaxf(_S7, _S17)));
          float v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            float v120 = v119;
            if (v119 < 0.0) {
              float v120 = 0.0;
            }
          }
          __asm { FCVT            S0, H13 }
          float v122 = _S8 * _S0;
          float v123 = _S18 * _S0;
          float v124 = _S10 * _S0;
          __asm { FCVT            S1, H1 }
          float v126 = _S4 * _S1;
          float v127 = _S5 * _S1;
          float v128 = _S6 * _S1;
          __asm { FCVT            S6, H31 }
          float v130 = _S2 * _S6;
          float v131 = _S15 * _S6;
          float v132 = _S14 * _S6;
          _H10 = *(_WORD *)(v27 + 2 * llroundf(v120));
          __asm { FCVT            S10, H10 }
          float v135 = _S3 * _S10;
          float v136 = _S7 * _S10;
          float v137 = _S17 * _S10;
          float v138 = (float)((float)(v203 * v123) + (float)(v122 * v204)) + (float)(v124 * v202);
          float v139 = (float)((float)(v200 * v123) + (float)(v122 * v201)) + (float)(v124 * v199);
          _S0 = (float)((float)(v197 * v123) + (float)(v122 * v198)) + (float)(v124 * v196);
          float v141 = (float)((float)(v203 * v127) + (float)(v126 * v204)) + (float)(v128 * v202);
          float v142 = (float)((float)(v200 * v127) + (float)(v126 * v201)) + (float)(v128 * v199);
          float v143 = (float)((float)(v197 * v127) + (float)(v126 * v198)) + (float)(v128 * v196);
          float v144 = (float)((float)(v203 * v131) + (float)(v130 * v204)) + (float)(v132 * v202);
          float v145 = (float)((float)(v200 * v131) + (float)(v130 * v201)) + (float)(v132 * v199);
          float v146 = (float)((float)(v197 * v131) + (float)(v130 * v198)) + (float)(v132 * v196);
          float v147 = (float)((float)(v203 * v136) + (float)(v135 * v204)) + (float)(v137 * v202);
          float v148 = (float)((float)(v200 * v136) + (float)(v135 * v201)) + (float)(v137 * v199);
          _H5 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          LOWORD(_S0) = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          float v151 = (float)((float)(v197 * v136) + (float)(v135 * v198)) + (float)(v137 * v196);
          __asm { FCVT            S7, H0 }
          _H31 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H0 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          float v162 = 1023.0;
          float v163 = 1023.0;
          if ((float)(v25 + _S7) <= 1023.0)
          {
            float v163 = v25 + _S7;
            if ((float)(v25 + _S7) < 0.0) {
              float v163 = 0.0;
            }
          }
          __asm { FCVT            S2, H2 }
          float v165 = v25 + _S2;
          BOOL v76 = (float)(v25 + _S2) <= 1023.0;
          float v166 = 1023.0;
          float v20 = v194;
          float v22 = v195;
          if (v76)
          {
            float v166 = v165;
            if (v165 < 0.0) {
              float v166 = 0.0;
            }
          }
          __asm { FCVT            S3, H5 }
          float v168 = v25 + _S3;
          BOOL v76 = (float)(v25 + _S3) <= 1023.0;
          float v169 = 1023.0;
          float v29 = v118;
          float v30 = v193;
          if (v76)
          {
            float v169 = v168;
            if (v168 < 0.0) {
              float v169 = 0.0;
            }
          }
          __asm { FCVT            S5, H6 }
          *uint64_t v41 = (llroundf(v166) << 10) | llroundf(v163) | (llroundf(v169) << 20) | v49;
          float v171 = 1023.0;
          if ((float)(v25 + _S5) <= 1023.0)
          {
            float v171 = v25 + _S5;
            if ((float)(v25 + _S5) < 0.0) {
              float v171 = 0.0;
            }
          }
          __asm { FCVT            S2, H4 }
          float v173 = v25 + _S2;
          BOOL v76 = (float)(v25 + _S2) <= 1023.0;
          float v174 = 1023.0;
          if (v76)
          {
            float v174 = v173;
            if (v173 < 0.0) {
              float v174 = 0.0;
            }
          }
          __asm { FCVT            S3, H31 }
          float v176 = v25 + _S3;
          BOOL v76 = (float)(v25 + _S3) <= 1023.0;
          float v177 = 1023.0;
          if (v76)
          {
            float v177 = v176;
            if (v176 < 0.0) {
              float v177 = 0.0;
            }
          }
          __asm { FCVT            S4, H14 }
          v41[1] = (llroundf(v174) << 10) | llroundf(v171) | (llroundf(v177) << 20) | v49;
          float v179 = 1023.0;
          if ((float)(v25 + _S4) <= 1023.0)
          {
            float v179 = v25 + _S4;
            if ((float)(v25 + _S4) < 0.0) {
              float v179 = 0.0;
            }
          }
          __asm { FCVT            S2, H13 }
          float v181 = v25 + _S2;
          BOOL v76 = (float)(v25 + _S2) <= 1023.0;
          float v182 = 1023.0;
          if (v76)
          {
            float v182 = v181;
            if (v181 < 0.0) {
              float v182 = 0.0;
            }
          }
          __asm { FCVT            S3, H11 }
          float v184 = v25 + _S3;
          BOOL v76 = (float)(v25 + _S3) <= 1023.0;
          float v185 = 1023.0;
          if (v76)
          {
            float v185 = v184;
            if (v184 < 0.0) {
              float v185 = 0.0;
            }
          }
          __asm { FCVT            S4, H12 }
          *float16x8_t v51 = (llroundf(v182) << 10) | llroundf(v179) | (llroundf(v185) << 20) | v49;
          float v187 = 1023.0;
          if ((float)(v25 + _S4) <= 1023.0)
          {
            float v187 = v25 + _S4;
            if ((float)(v25 + _S4) < 0.0) {
              float v187 = 0.0;
            }
          }
          __asm { FCVT            S2, H10 }
          float v189 = v25 + _S2;
          BOOL v76 = (float)(v25 + _S2) <= 1023.0;
          float v190 = 1023.0;
          if (v76)
          {
            float v190 = v189;
            if (v189 < 0.0) {
              float v190 = 0.0;
            }
          }
          __asm { FCVT            S0, H0 }
          float v192 = v25 + _S0;
          if (v192 <= 1023.0)
          {
            float v162 = v192;
            if (v192 < 0.0) {
              float v162 = 0.0;
            }
          }
          result += 4;
          v50 += 4;
          v41 += 2;
          v51[1] = (llroundf(v190) << 10) | llroundf(v187) | (llroundf(v162) << 20) | v49;
          v51 += 2;
          v47 += 2;
          float v21 = v209;
        }
        while (v9 > v47);
      }
      uint64_t result = &v46[v15];
      v44 += v16;
      v40 += v17 + v17;
      uint64_t v41 = (unsigned int *)&v45[v18];
      v8 += 2;
    }
    while (v11 > v8);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v172 = v21 * *(float *)(v13 + 16);
    float v173 = v21 * *(float *)(v13 + 8);
    float v25 = v21 * *(float *)(v13 + 20);
    *(float *)&unsigned int v26 = v21 * *(float *)(v13 + 28);
    float v170 = *(float *)&v26;
    float v171 = v25;
    LOWORD(v26) = *(_WORD *)(v13 + 144);
    float v27 = (float)v26;
    float v28 = *(float *)(v13 + 72);
    float v29 = *(float *)(v13 + 76);
    float v30 = *(float *)(v13 + 80);
    float v31 = *(float *)(v13 + 84);
    float v32 = *(float *)(v13 + 88);
    float v33 = *(float *)(v13 + 92);
    float v34 = *(float *)(v13 + 96);
    float v35 = *(float *)(v13 + 100);
    float v36 = *(float *)(v13 + 104);
    uint64_t v37 = v13 + 164;
    uint64_t v38 = v13 + 16548;
    uint64_t v39 = *((void *)result + 14);
    uint64_t v40 = (void *)*((void *)result + 16);
    uint64_t v41 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v42 = *(void *)(result + 36);
    uint64_t v43 = v14[1];
    uint64_t v44 = (char *)(*v14 + v16 * v11 + 2 * v42);
    uint64_t v45 = v14[2];
    _ZF = v45 == 0;
    uint64_t result = (unsigned __int8 *)(v45 + v18 * v11 + 2 * v42);
    if (_ZF) {
      uint64_t result = 0;
    }
    unint64_t v47 = (unsigned int *)(*v40 + v41 * v19 + 16 * v39);
    unsigned int v48 = *(unsigned __int8 *)(v13 + 124);
    char v49 = 16 - v48;
    if (v48 >= 0x11) {
      char v49 = 0;
    }
    if (v11 >= 0) {
      uint64_t v50 = v11;
    }
    else {
      uint64_t v50 = v11 + 1;
    }
    uint64_t v51 = v43 + v17 * (v50 >> 1) + 2 * v42;
    do
    {
      float v52 = (char *)v47 + v19;
      float v53 = &v44[v16];
      if (v10)
      {
        unint64_t v54 = 0;
        float v55 = 3.0;
        if (result) {
          float v55 = 0.0;
        }
        unsigned int v56 = llroundf(v55) << 30;
        float v57 = &v44[v16];
        float v58 = (unsigned int *)((char *)v47 + v19);
        do
        {
          float v59 = (unsigned __int16 *)(v51 + 2 * v54);
          float v60 = (float)(v59[1] >> v49) - v23;
          float v61 = v173 * v60;
          float v62 = v24 * (float)((float)(*(unsigned __int16 *)v44 >> v49) - v22);
          float v63 = (float)(v173 * v60) + v62;
          float v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            float v64 = (float)(v173 * v60) + v62;
            if (v63 < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = (float)(*v59 >> v49) - v23;
          float v66 = (float)(v171 * v60) + (float)(v65 * v172);
          float v67 = 8191.0;
          if ((float)(v62 + v66) <= 8191.0)
          {
            float v67 = v62 + v66;
            if ((float)(v62 + v66) < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = v170 * v65;
          float v69 = (float)(v170 * v65) + v62;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v24 * (float)((float)(*((unsigned __int16 *)v44 + 1) >> v49) - v22);
          float v72 = 8191.0;
          if ((float)(v61 + v71) <= 8191.0)
          {
            float v72 = v61 + v71;
            if ((float)(v61 + v71) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = 8191.0;
          if ((float)(v66 + v71) <= 8191.0)
          {
            float v73 = v66 + v71;
            if ((float)(v66 + v71) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = 8191.0;
          if ((float)(v68 + v71) <= 8191.0)
          {
            float v74 = v68 + v71;
            if ((float)(v68 + v71) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v24 * (float)((float)(*(unsigned __int16 *)v57 >> v49) - v22);
          float v76 = 8191.0;
          if ((float)(v61 + v75) <= 8191.0)
          {
            float v76 = v61 + v75;
            if ((float)(v61 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = 8191.0;
          if ((float)(v66 + v75) <= 8191.0)
          {
            float v77 = v66 + v75;
            if ((float)(v66 + v75) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = 8191.0;
          if ((float)(v68 + v75) <= 8191.0)
          {
            float v78 = v68 + v75;
            if ((float)(v68 + v75) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v24 * (float)((float)(*((unsigned __int16 *)v57 + 1) >> v49) - v22);
          float v80 = v61 + v79;
          BOOL v81 = (float)(v61 + v79) <= 8191.0;
          float v82 = 8191.0;
          if (v81)
          {
            float v82 = v80;
            if (v80 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v66 + v79;
          BOOL v81 = (float)(v66 + v79) <= 8191.0;
          float v84 = 8191.0;
          if (v81)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v68 + v79;
          BOOL v81 = (float)(v68 + v79) <= 8191.0;
          float v86 = 8191.0;
          if (v81)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H27 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm
          {
            FCVT            S8, H8
            FCVT            S11, H11
          }
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          float v114 = (float)((float)(v29 * _S27) + (float)(_S4 * v28)) + (float)(_S28 * v30);
          float v115 = (float)((float)(v32 * _S27) + (float)(_S4 * v31)) + (float)(_S28 * v33);
          _S4 = (float)((float)(v35 * _S27) + (float)(_S4 * v34)) + (float)(_S28 * v36);
          float v117 = (float)((float)(v29 * _S30) + (float)(_S29 * v28)) + (float)(_S8 * v30);
          float v118 = (float)((float)(v32 * _S30) + (float)(_S29 * v31)) + (float)(_S8 * v33);
          float v119 = (float)((float)(v35 * _S30) + (float)(_S29 * v34)) + (float)(_S8 * v36);
          float v120 = (float)((float)(v29 * _S12) + (float)(_S11 * v28)) + (float)(_S13 * v30);
          float v121 = (float)((float)(v32 * _S12) + (float)(_S11 * v31)) + (float)(_S13 * v33);
          float v122 = (float)((float)(v35 * _S12) + (float)(_S11 * v34)) + (float)(_S13 * v36);
          float v123 = (float)((float)(v29 * _S9) + (float)(_S31 * v28)) + (float)(_S10 * v30);
          float v124 = (float)((float)(v32 * _S9) + (float)(_S31 * v31)) + (float)(_S10 * v33);
          _H13 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          float v127 = (float)((float)(v35 * _S9) + (float)(_S31 * v34)) + (float)(_S10 * v36);
          __asm { FCVT            S4, H4 }
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          float v138 = v27 + _S4;
          float v139 = 1023.0;
          BOOL v81 = (float)(v27 + _S4) <= 1023.0;
          float v140 = 1023.0;
          if (v81)
          {
            float v140 = v138;
            if (v138 < 0.0) {
              float v140 = 0.0;
            }
          }
          __asm { FCVT            S5, H15 }
          float v142 = 1023.0;
          if ((float)(v27 + _S5) <= 1023.0)
          {
            float v142 = v27 + _S5;
            if ((float)(v27 + _S5) < 0.0) {
              float v142 = 0.0;
            }
          }
          __asm { FCVT            S5, H13 }
          float v144 = 1023.0;
          if ((float)(v27 + _S5) <= 1023.0)
          {
            float v144 = v27 + _S5;
            if ((float)(v27 + _S5) < 0.0) {
              float v144 = 0.0;
            }
          }
          __asm { FCVT            S5, H14 }
          *unint64_t v47 = (llroundf(v142) << 10) | llroundf(v140) | (llroundf(v144) << 20) | v56;
          float v146 = 1023.0;
          if ((float)(v27 + _S5) <= 1023.0)
          {
            float v146 = v27 + _S5;
            if ((float)(v27 + _S5) < 0.0) {
              float v146 = 0.0;
            }
          }
          __asm { FCVT            S4, H12 }
          float v148 = v27 + _S4;
          float v149 = 1023.0;
          if (v148 <= 1023.0)
          {
            float v149 = v148;
            if (v148 < 0.0) {
              float v149 = 0.0;
            }
          }
          __asm { FCVT            S4, H10 }
          float v151 = v27 + _S4;
          float v152 = 1023.0;
          if (v151 <= 1023.0)
          {
            float v152 = v151;
            if (v151 < 0.0) {
              float v152 = 0.0;
            }
          }
          __asm { FCVT            S4, H11 }
          v47[1] = (llroundf(v149) << 10) | llroundf(v146) | (llroundf(v152) << 20) | v56;
          float v154 = v27 + _S4;
          float v155 = 1023.0;
          if (v154 <= 1023.0)
          {
            float v155 = v154;
            if (v154 < 0.0) {
              float v155 = 0.0;
            }
          }
          __asm { FCVT            S4, H9 }
          float v157 = v27 + _S4;
          float v158 = 1023.0;
          if (v157 <= 1023.0)
          {
            float v158 = v157;
            if (v157 < 0.0) {
              float v158 = 0.0;
            }
          }
          __asm { FCVT            S4, H31 }
          float v160 = v27 + _S4;
          float v161 = 1023.0;
          if (v160 <= 1023.0)
          {
            float v161 = v160;
            if (v160 < 0.0) {
              float v161 = 0.0;
            }
          }
          __asm { FCVT            S4, H8 }
          unsigned int *v58 = (llroundf(v158) << 10) | llroundf(v155) | (llroundf(v161) << 20) | v56;
          float v163 = v27 + _S4;
          float v164 = 1023.0;
          if (v163 <= 1023.0)
          {
            float v164 = v163;
            if (v163 < 0.0) {
              float v164 = 0.0;
            }
          }
          __asm { FCVT            S4, H30 }
          float v166 = v27 + _S4;
          float v167 = 1023.0;
          if (v166 <= 1023.0)
          {
            float v167 = v166;
            if (v166 < 0.0) {
              float v167 = 0.0;
            }
          }
          __asm { FCVT            S4, H29 }
          float v169 = v27 + _S4;
          if (v169 <= 1023.0)
          {
            float v139 = v169;
            if (v169 < 0.0) {
              float v139 = 0.0;
            }
          }
          v44 += 4;
          v57 += 4;
          v47 += 2;
          v58[1] = (llroundf(v167) << 10) | llroundf(v164) | (llroundf(v139) << 20) | v56;
          v58 += 2;
          v54 += 2;
        }
        while (v10 > v54);
      }
      uint64_t v44 = &v53[v16];
      v51 += v17;
      result += v18 + v18;
      unint64_t v47 = (unsigned int *)&v52[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_l10r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = 2 * *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = *(void *)(result + 20);
    uint64_t v8 = *(void *)(result + 44) + 2 * v4;
    unint64_t v9 = 2 * v5 - 2 * v4;
    uint64_t v10 = *(void *)(result + 152);
    uint64_t v12 = *(void **)(result + 56);
    uint64_t v11 = *(uint64_t **)(result + 64);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v16 = **(void **)(result + 136);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v10 + 136);
    float v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = *(float *)(v10 + 28);
    float v27 = v19 * v26;
    LOWORD(v26) = *(_WORD *)(v10 + 144);
    float v28 = (float)LODWORD(v26);
    uint64_t v29 = *(void *)(result + 112);
    uint64_t v30 = *(void **)(result + 128);
    uint64_t v31 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v3);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = v12[1];
    uint64_t v34 = (char *)(*v12 + v13 * v8 + 2 * v32);
    uint64_t v35 = v12[2];
    BOOL v36 = v35 == 0;
    uint64_t v37 = v35 + v15 * v8 + 2 * v32;
    if (v36) {
      uint64_t v37 = 0;
    }
    uint64_t v38 = (unsigned int *)(*v30 + v31 * v16 + 16 * v29);
    unsigned int v39 = *(unsigned __int8 *)(v10 + 124);
    if (v39 >= 0x11) {
      unsigned __int8 v40 = 0;
    }
    else {
      unsigned __int8 v40 = 16 - v39;
    }
    uint64_t v41 = v33 + v14 * (v8 / 2) + 2 * v32;
    uint64_t result = v40;
    do
    {
      uint64_t v42 = (char *)v38 + v16;
      uint64_t v43 = &v34[v13];
      if (v7)
      {
        unint64_t v44 = 0;
        if (v37) {
          float v45 = 0.0;
        }
        else {
          float v45 = 3.0;
        }
        unsigned int v46 = llroundf(v45) << 30;
        unint64_t v47 = &v34[v13];
        unsigned int v48 = (unsigned int *)((char *)v38 + v16);
        do
        {
          char v49 = (unsigned __int16 *)(v41 + 2 * v44);
          float v50 = (float)(*v49 >> result) - v21;
          float v51 = v27 * v50;
          float v52 = v22 * (float)((float)(*(unsigned __int16 *)v34 >> result) - v20);
          float v53 = (float)((float)(v27 * v50) + v52) + v28;
          float v54 = 1023.0;
          if (v53 <= 1023.0)
          {
            float v54 = (float)((float)(v27 * v50) + v52) + v28;
            if (v53 < 0.0) {
              float v54 = 0.0;
            }
          }
          float v55 = (float)(v49[1] >> result) - v21;
          float v56 = (float)(v25 * v55) + (float)(v50 * v24);
          float v57 = (float)(v52 + v56) + v28;
          float v58 = 1023.0;
          if (v57 <= 1023.0)
          {
            float v58 = (float)(v52 + v56) + v28;
            if (v57 < 0.0) {
              float v58 = 0.0;
            }
          }
          float v59 = v23 * v55;
          float v60 = (float)(v59 + v52) + v28;
          float v61 = 1023.0;
          if (v60 <= 1023.0)
          {
            float v61 = v60;
            if (v60 < 0.0) {
              float v61 = 0.0;
            }
          }
          float v62 = v22 * (float)((float)(*((unsigned __int16 *)v34 + 1) >> result) - v20);
          unsigned int v63 = *(unsigned __int16 *)v47;
          unsigned int v64 = *((unsigned __int16 *)v47 + 1);
          *uint64_t v38 = (llroundf(v58) << 10) | llroundf(v54) | (llroundf(v61) << 20) | v46;
          float v65 = (float)(v51 + v62) + v28;
          float v66 = 1023.0;
          if (v65 <= 1023.0)
          {
            float v66 = (float)(v51 + v62) + v28;
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = (float)(v56 + v62) + v28;
          float v68 = 1023.0;
          if (v67 <= 1023.0)
          {
            float v68 = (float)(v56 + v62) + v28;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = (float)(v59 + v62) + v28;
          float v70 = 1023.0;
          if (v69 <= 1023.0)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v22 * (float)((float)(int)(v63 >> result) - v20);
          v38[1] = (llroundf(v68) << 10) | llroundf(v66) | (llroundf(v70) << 20) | v46;
          float v72 = (float)(v51 + v71) + v28;
          float v73 = 1023.0;
          if (v72 <= 1023.0)
          {
            float v73 = (float)(v51 + v71) + v28;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = (float)(v56 + v71) + v28;
          float v75 = 1023.0;
          if (v74 <= 1023.0)
          {
            float v75 = (float)(v56 + v71) + v28;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = (float)(v59 + v71) + v28;
          float v77 = 1023.0;
          if (v76 <= 1023.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v22 * (float)((float)(int)(v64 >> result) - v20);
          *unsigned int v48 = (llroundf(v75) << 10) | llroundf(v73) | (llroundf(v77) << 20) | v46;
          float v79 = (float)(v51 + v78) + v28;
          float v80 = 1023.0;
          if (v79 <= 1023.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = (float)(v56 + v78) + v28;
          float v82 = 1023.0;
          if (v81 <= 1023.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = (float)(v59 + v78) + v28;
          float v84 = 1023.0;
          if (v83 <= 1023.0)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          v34 += 4;
          v47 += 4;
          v38 += 2;
          v48[1] = (llroundf(v82) << 10) | llroundf(v80) | (llroundf(v84) << 20) | v46;
          v48 += 2;
          v44 += 2;
        }
        while (v7 > v44);
      }
      uint64_t v34 = &v43[v13];
      v41 += v14;
      v37 += v15 + v15;
      uint64_t v38 = (unsigned int *)&v42[v16];
      v6 += 2;
    }
    while (v9 > v6);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    float v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    float v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v22 = (float)LODWORD(a5);
    float v23 = v20 * *(float *)v13;
    float v209 = v20 * *(float *)(v13 + 16);
    float v210 = v20 * *(float *)(v13 + 8);
    float v207 = v20 * *(float *)(v13 + 28);
    float v208 = v20 * *(float *)(v13 + 20);
    float v205 = *(float *)(v13 + 76);
    float v206 = *(float *)(v13 + 72);
    float v203 = *(float *)(v13 + 84);
    float v204 = *(float *)(v13 + 80);
    float v201 = *(float *)(v13 + 92);
    float v202 = *(float *)(v13 + 88);
    float v199 = *(float *)(v13 + 100);
    float v200 = *(float *)(v13 + 96);
    uint64_t v24 = v13 + 164;
    uint64_t v25 = v13 + 16548;
    uint64_t v26 = v13 + 32932;
    float v27 = *(float *)(v13 + 108);
    float v198 = *(float *)(v13 + 104);
    float v28 = *(float *)(v13 + 112);
    float v29 = *(float *)(v13 + 116);
    float v30 = *(float *)(v13 + 120);
    uint64_t v31 = *((void *)result + 14);
    uint64_t v32 = (void *)*((void *)result + 16);
    uint64_t v33 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v34 = *(void *)(result + 36);
    uint64_t v35 = v14[1];
    uint64_t result = (unsigned __int8 *)(*v14 + v16 * v11 + 2 * v34);
    uint64_t v36 = v14[2];
    _ZF = v36 == 0;
    uint64_t v38 = v36 + v18 * v11 + 2 * v34;
    if (_ZF) {
      uint64_t v38 = 0;
    }
    uint64_t v39 = (char *)(*v32 + v33 * v19 + 8 * v31);
    unsigned int v40 = *(unsigned __int8 *)(v13 + 124);
    if (v40 >= 0x11) {
      char v41 = 0;
    }
    else {
      char v41 = 16 - v40;
    }
    uint64_t v42 = v35 + v17 * (v11 / 2) + 2 * v34;
    float v211 = (float)LODWORD(a5);
    float v197 = v21;
    do
    {
      uint64_t v43 = &v39[v19];
      unint64_t v44 = &result[v16];
      if (v10)
      {
        unint64_t v45 = 0;
        if (v38) {
          __int16 v46 = 0;
        }
        else {
          __int16 v46 = -1;
        }
        unint64_t v47 = &result[v16];
        unsigned int v48 = &v39[v19];
        do
        {
          char v49 = (unsigned __int16 *)(v42 + 2 * v45);
          float v50 = (float)(v49[1] >> v41) - v22;
          float v51 = v210 * v50;
          float v52 = v23 * (float)((float)(*(unsigned __int16 *)result >> v41) - v21);
          float v53 = (float)(v210 * v50) + v52;
          float v54 = 8191.0;
          if (v53 <= 8191.0)
          {
            float v54 = (float)(v210 * v50) + v52;
            if (v53 < 0.0) {
              float v54 = 0.0;
            }
          }
          float v55 = (float)(*v49 >> v41) - v22;
          float v56 = (float)(v208 * v50) + (float)(v55 * v209);
          float v57 = 8191.0;
          if ((float)(v52 + v56) <= 8191.0)
          {
            float v57 = v52 + v56;
            if ((float)(v52 + v56) < 0.0) {
              float v57 = 0.0;
            }
          }
          float v58 = v207 * v55;
          float v59 = (float)(v207 * v55) + v52;
          float v60 = 8191.0;
          if (v59 <= 8191.0)
          {
            float v60 = v59;
            if (v59 < 0.0) {
              float v60 = 0.0;
            }
          }
          float v61 = v23 * (float)((float)(*((unsigned __int16 *)result + 1) >> v41) - v21);
          float v62 = 8191.0;
          if ((float)(v51 + v61) <= 8191.0)
          {
            float v62 = v51 + v61;
            if ((float)(v51 + v61) < 0.0) {
              float v62 = 0.0;
            }
          }
          float v63 = 8191.0;
          if ((float)(v56 + v61) <= 8191.0)
          {
            float v63 = v56 + v61;
            if ((float)(v56 + v61) < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = 8191.0;
          if ((float)(v58 + v61) <= 8191.0)
          {
            float v64 = v58 + v61;
            if ((float)(v58 + v61) < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = v23 * (float)((float)(*(unsigned __int16 *)v47 >> v41) - v21);
          float v66 = 8191.0;
          if ((float)(v51 + v65) <= 8191.0)
          {
            float v66 = v51 + v65;
            if ((float)(v51 + v65) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = 8191.0;
          if ((float)(v56 + v65) <= 8191.0)
          {
            float v67 = v56 + v65;
            if ((float)(v56 + v65) < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = 8191.0;
          if ((float)(v58 + v65) <= 8191.0)
          {
            float v68 = v58 + v65;
            if ((float)(v58 + v65) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v23 * (float)((float)(*((unsigned __int16 *)v47 + 1) >> v41) - v21);
          float v70 = v51 + v69;
          BOOL v71 = (float)(v51 + v69) <= 8191.0;
          float v72 = 8191.0;
          if (v71)
          {
            float v72 = v70;
            if (v70 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v56 + v69;
          BOOL v71 = (float)(v56 + v69) <= 8191.0;
          float v74 = 8191.0;
          if (v71)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v58 + v69;
          BOOL v71 = (float)(v58 + v69) <= 8191.0;
          float v76 = 8191.0;
          if (v71)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v54, 0.0), 8191.0)));
          __asm { FCVT            S30, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v57, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H7 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          float v95 = fmaxf(_S30, fmaxf(_S31, _S8));
          float v96 = (float)((float)((float)(v28 * _S31) + (float)(v27 * _S30)) + (float)(v29 * _S8)) + (float)(v30 * v95);
          float v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            float v97 = (float)((float)((float)(v28 * _S31) + (float)(v27 * _S30)) + (float)(v29 * _S8)) + (float)(v30 * v95);
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          __asm
          {
            FCVT            S4, H7
            FCVT            S5, H13
            FCVT            S9, H2
          }
          _H13 = *(_WORD *)(v25 + 2 * llroundf(v97));
          float v102 = (float)((float)((float)(v28 * _S5) + (float)(v27 * _S4)) + (float)(v29 * _S9))
               + (float)(v30 * fmaxf(_S4, fmaxf(_S5, _S9)));
          float v103 = 8191.0;
          if (v102 <= 8191.0)
          {
            float v103 = v102;
            if (v102 < 0.0) {
              float v103 = 0.0;
            }
          }
          __asm
          {
            FCVT            S14, H14
            FCVT            S15, H15
            FCVT            S6, H6
          }
          _H7 = *(_WORD *)(v25 + 2 * llroundf(v103));
          float v108 = (float)((float)((float)(v28 * _S15) + (float)(v27 * _S14)) + (float)(v29 * _S6))
               + (float)(v30 * fmaxf(_S14, fmaxf(_S15, _S6)));
          float v109 = 8191.0;
          if (v108 <= 8191.0)
          {
            float v109 = v108;
            if (v108 < 0.0) {
              float v109 = 0.0;
            }
          }
          __asm
          {
            FCVT            S2, H10
            FCVT            S10, H11
            FCVT            S11, H12
          }
          _H12 = *(_WORD *)(v25 + 2 * llroundf(v109));
          float v114 = v28;
          float v115 = v27;
          float v116 = v29;
          float v117 = v30;
          float v118 = (float)((float)((float)(v28 * _S10) + (float)(v27 * _S2)) + (float)(v29 * _S11))
               + (float)(v30 * fmaxf(_S2, fmaxf(_S10, _S11)));
          float v119 = 8191.0;
          if (v118 <= 8191.0)
          {
            float v119 = v118;
            if (v118 < 0.0) {
              float v119 = 0.0;
            }
          }
          __asm { FCVT            S1, H13 }
          float v121 = _S30 * _S1;
          float v122 = _S31 * _S1;
          float v123 = _S8 * _S1;
          __asm { FCVT            S7, H7 }
          float v125 = _S4 * _S7;
          float v126 = _S5 * _S7;
          float v127 = _S9 * _S7;
          __asm { FCVT            S8, H12 }
          float v129 = _S14 * _S8;
          float v130 = _S15 * _S8;
          _S6 = _S6 * _S8;
          _H3 = *(_WORD *)(v25 + 2 * llroundf(v119));
          __asm { FCVT            S3, H3 }
          float v134 = _S2 * _S3;
          float v135 = _S10 * _S3;
          float v136 = _S11 * _S3;
          float v137 = (float)((float)(v205 * v122) + (float)(v121 * v206)) + (float)(v123 * v204);
          float v138 = (float)((float)(v202 * v122) + (float)(v121 * v203)) + (float)(v123 * v201);
          float v139 = (float)((float)(v199 * v122) + (float)(v121 * v200)) + (float)(v123 * v198);
          float v140 = (float)((float)(v205 * v126) + (float)(v125 * v206)) + (float)(v127 * v204);
          float v141 = (float)((float)(v202 * v126) + (float)(v125 * v203)) + (float)(v127 * v201);
          float v142 = (float)((float)(v199 * v126) + (float)(v125 * v200)) + (float)(v127 * v198);
          float v143 = (float)((float)(v205 * v130) + (float)(v129 * v206)) + (float)(_S6 * v204);
          float v144 = (float)((float)(v202 * v130) + (float)(v129 * v203)) + (float)(_S6 * v201);
          float v145 = (float)((float)(v199 * v130) + (float)(v129 * v200)) + (float)(_S6 * v198);
          float v146 = (float)((float)(v205 * v135) + (float)(v134 * v206)) + (float)(v136 * v204);
          float v147 = (float)((float)(v202 * v135) + (float)(v134 * v203)) + (float)(v136 * v201);
          float v148 = (float)((float)(v199 * v135) + (float)(v134 * v200)) + (float)(v136 * v198);
          LOWORD(_S6) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          unsigned int v159 = llroundf(fminf(fmaxf(v148, 0.0), 8191.0));
          __asm { FCVT            S2, H6 }
          _H31 = *(_WORD *)(v26 + 2 * v159);
          float v162 = 65535.0;
          float v163 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H6, #0 }
            float v163 = _S2;
            if (_NF) {
              float v163 = 0.0;
            }
          }
          __asm { FCVT            S2, H15 }
          *(_WORD *)uint64_t v39 = llroundf(v163);
          float v166 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H15, #0 }
            float v166 = _S2;
            if (_NF) {
              float v166 = 0.0;
            }
          }
          __asm { FCVT            S2, H14 }
          *((_WORD *)v39 + 1) = llroundf(v166);
          float v169 = 65535.0;
          float v21 = v197;
          float v27 = v115;
          float v28 = v114;
          float v29 = v116;
          float v30 = v117;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H14, #0 }
            float v169 = _S2;
            if (_NF) {
              float v169 = 0.0;
            }
          }
          __asm { FCVT            S2, H5 }
          *((_WORD *)v39 + 2) = llroundf(v169);
          *((_WORD *)v39 + 3) = v46;
          float v172 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H5, #0 }
            float v172 = _S2;
            if (_NF) {
              float v172 = 0.0;
            }
          }
          __asm { FCVT            S2, H4 }
          *((_WORD *)v39 + 4) = llroundf(v172);
          float v175 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H4, #0 }
            float v175 = _S2;
            if (_NF) {
              float v175 = 0.0;
            }
          }
          __asm { FCVT            S2, H13 }
          *((_WORD *)v39 + 5) = llroundf(v175);
          float v178 = 65535.0;
          float v22 = v211;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H13, #0 }
            float v178 = _S2;
            if (_NF) {
              float v178 = 0.0;
            }
          }
          __asm { FCVT            S2, H12 }
          *((_WORD *)v39 + 6) = llroundf(v178);
          *((_WORD *)v39 + 7) = v46;
          float v181 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H12, #0 }
            float v181 = _S2;
            if (_NF) {
              float v181 = 0.0;
            }
          }
          __asm { FCVT            S2, H11 }
          *(_WORD *)unsigned int v48 = llroundf(v181);
          float v184 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v184 = _S2;
            if (_NF) {
              float v184 = 0.0;
            }
          }
          __asm { FCVT            S2, H10 }
          *((_WORD *)v48 + 1) = llroundf(v184);
          float v187 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v187 = _S2;
            if (_NF) {
              float v187 = 0.0;
            }
          }
          __asm { FCVT            S2, H9 }
          *((_WORD *)v48 + 2) = llroundf(v187);
          *((_WORD *)v48 + 3) = v46;
          float v190 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v190 = _S2;
            if (_NF) {
              float v190 = 0.0;
            }
          }
          __asm { FCVT            S2, H8 }
          *((_WORD *)v48 + 4) = llroundf(v190);
          float v193 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v193 = _S2;
            if (_NF) {
              float v193 = 0.0;
            }
          }
          __asm { FCVT            S2, H31 }
          *((_WORD *)v48 + 5) = llroundf(v193);
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v162 = _S2;
            if (_NF) {
              float v162 = 0.0;
            }
          }
          result += 4;
          v47 += 4;
          v39 += 16;
          *((_WORD *)v48 + 6) = llroundf(v162);
          *((_WORD *)v48 + 7) = v46;
          v48 += 16;
          v45 += 2;
        }
        while (v10 > v45);
      }
      uint64_t result = &v44[v16];
      v42 += v17;
      v38 += v18 + v18;
      uint64_t v39 = &v43[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v175 = v21 * *(float *)(v13 + 16);
    float v176 = v21 * *(float *)(v13 + 8);
    float v173 = v21 * *(float *)(v13 + 28);
    float v174 = v21 * *(float *)(v13 + 20);
    float v25 = *(float *)(v13 + 80);
    float v171 = *(float *)(v13 + 76);
    float v172 = *(float *)(v13 + 72);
    float v26 = *(float *)(v13 + 84);
    float v27 = *(float *)(v13 + 88);
    float v28 = *(float *)(v13 + 92);
    float v29 = *(float *)(v13 + 96);
    float v30 = *(float *)(v13 + 100);
    float v31 = *(float *)(v13 + 104);
    uint64_t v32 = v13 + 164;
    uint64_t v33 = v13 + 16548;
    uint64_t v34 = *((void *)result + 14);
    uint64_t v35 = (void *)*((void *)result + 16);
    uint64_t v36 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v37 = *(void *)(result + 36);
    uint64_t v38 = v14[1];
    uint64_t v39 = (char *)(*v14 + v16 * v11 + 2 * v37);
    uint64_t v40 = v14[2];
    _ZF = v40 == 0;
    uint64_t result = (unsigned __int8 *)(v40 + v18 * v11 + 2 * v37);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v42 = (char *)(*v35 + v36 * v19 + 8 * v34);
    unsigned int v43 = *(unsigned __int8 *)(v13 + 124);
    char v44 = 16 - v43;
    if (v43 >= 0x11) {
      char v44 = 0;
    }
    if (v11 >= 0) {
      uint64_t v45 = v11;
    }
    else {
      uint64_t v45 = v11 + 1;
    }
    uint64_t v46 = v38 + v17 * (v45 >> 1) + 2 * v37;
    do
    {
      unint64_t v47 = &v42[v19];
      unsigned int v48 = &v39[v16];
      if (v10)
      {
        unint64_t v49 = 0;
        if (result) {
          __int16 v50 = 0;
        }
        else {
          __int16 v50 = -1;
        }
        float v51 = &v39[v16];
        float v52 = &v42[v19];
        do
        {
          float v53 = (unsigned __int16 *)(v46 + 2 * v49);
          float v54 = (float)(v53[1] >> v44) - v23;
          float v55 = v176 * v54;
          float v56 = v24 * (float)((float)(*(unsigned __int16 *)v39 >> v44) - v22);
          float v57 = (float)(v176 * v54) + v56;
          float v58 = 8191.0;
          if (v57 <= 8191.0)
          {
            float v58 = (float)(v176 * v54) + v56;
            if (v57 < 0.0) {
              float v58 = 0.0;
            }
          }
          float v59 = (float)(*v53 >> v44) - v23;
          float v60 = (float)(v174 * v54) + (float)(v59 * v175);
          float v61 = 8191.0;
          if ((float)(v56 + v60) <= 8191.0)
          {
            float v61 = v56 + v60;
            if ((float)(v56 + v60) < 0.0) {
              float v61 = 0.0;
            }
          }
          float v62 = v173 * v59;
          float v63 = (float)(v173 * v59) + v56;
          float v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            float v64 = v63;
            if (v63 < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = v24 * (float)((float)(*((unsigned __int16 *)v39 + 1) >> v44) - v22);
          float v66 = 8191.0;
          if ((float)(v55 + v65) <= 8191.0)
          {
            float v66 = v55 + v65;
            if ((float)(v55 + v65) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = 8191.0;
          if ((float)(v60 + v65) <= 8191.0)
          {
            float v67 = v60 + v65;
            if ((float)(v60 + v65) < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = v62 + v65;
          BOOL v69 = (float)(v62 + v65) <= 8191.0;
          float v70 = 8191.0;
          if (v69)
          {
            float v70 = v68;
            if (v68 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v24 * (float)((float)(*(unsigned __int16 *)v51 >> v44) - v22);
          float v72 = 8191.0;
          if ((float)(v55 + v71) <= 8191.0)
          {
            float v72 = v55 + v71;
            if ((float)(v55 + v71) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = 8191.0;
          if ((float)(v60 + v71) <= 8191.0)
          {
            float v73 = v60 + v71;
            if ((float)(v60 + v71) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v62 + v71;
          BOOL v69 = (float)(v62 + v71) <= 8191.0;
          float v75 = 8191.0;
          if (v69)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v24 * (float)((float)(*((unsigned __int16 *)v51 + 1) >> v44) - v22);
          float v77 = v55 + v76;
          BOOL v69 = (float)(v55 + v76) <= 8191.0;
          float v78 = 8191.0;
          if (v69)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v60 + v76;
          BOOL v69 = (float)(v60 + v76) <= 8191.0;
          float v80 = 8191.0;
          if (v69)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v22;
          float v82 = v62 + v76;
          BOOL v69 = (float)(v62 + v76) <= 8191.0;
          float v83 = 8191.0;
          if (v69)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H26 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H30 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H30
            FCVT            S9, H9
          }
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H29 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H31 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          float v111 = (float)((float)(v171 * _S26) + (float)(_S4 * v172)) + (float)(_S27 * v25);
          float v112 = (float)((float)(v27 * _S26) + (float)(_S4 * v26)) + (float)(_S27 * v28);
          float v113 = (float)((float)(v30 * _S26) + (float)(_S4 * v29)) + (float)(_S27 * v31);
          float v114 = (float)((float)(v171 * _S30) + (float)(_S28 * v172)) + (float)(_S9 * v25);
          float v115 = (float)((float)(v27 * _S30) + (float)(_S28 * v26)) + (float)(_S9 * v28);
          float v116 = (float)((float)(v30 * _S30) + (float)(_S28 * v29)) + (float)(_S9 * v31);
          float v117 = (float)((float)(v171 * _S11) + (float)(_S10 * v172)) + (float)(_S12 * v25);
          float v118 = (float)((float)(v27 * _S11) + (float)(_S10 * v26)) + (float)(_S12 * v28);
          float v119 = (float)((float)(v30 * _S11) + (float)(_S10 * v29)) + (float)(_S12 * v31);
          float v120 = (float)((float)(v171 * _S31) + (float)(_S29 * v172)) + (float)(_S8 * v25);
          float v121 = (float)((float)(v27 * _S31) + (float)(_S29 * v26)) + (float)(_S8 * v28);
          float v122 = (float)((float)(v30 * _S31) + (float)(_S29 * v29)) + (float)(_S8 * v31);
          _H14 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          __asm { FCVT            S4, H14 }
          _H27 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          float v136 = 65535.0;
          float v137 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H14, #0 }
            float v137 = _S4;
            if (_NF) {
              float v137 = 0.0;
            }
          }
          __asm { FCVT            S4, H13 }
          *(_WORD *)uint64_t v42 = llroundf(v137);
          float v140 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H13, #0 }
            float v140 = _S4;
            if (_NF) {
              float v140 = 0.0;
            }
          }
          __asm { FCVT            S4, H12 }
          *((_WORD *)v42 + 1) = llroundf(v140);
          float v143 = 65535.0;
          float v22 = v81;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H12, #0 }
            float v143 = _S4;
            if (_NF) {
              float v143 = 0.0;
            }
          }
          __asm { FCVT            S14, H11 }
          *((_WORD *)v42 + 2) = llroundf(v143);
          *((_WORD *)v42 + 3) = v50;
          float v146 = 65535.0;
          if (_S14 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v146 = _S14;
            if (_NF) {
              float v146 = 0.0;
            }
          }
          __asm { FCVT            S4, H10 }
          *((_WORD *)v42 + 4) = llroundf(v146);
          float v149 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v149 = _S4;
            if (_NF) {
              float v149 = 0.0;
            }
          }
          __asm { FCVT            S4, H9 }
          *((_WORD *)v42 + 5) = llroundf(v149);
          float v152 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v152 = _S4;
            if (_NF) {
              float v152 = 0.0;
            }
          }
          __asm { FCVT            S11, H8 }
          *((_WORD *)v42 + 6) = llroundf(v152);
          *((_WORD *)v42 + 7) = v50;
          float v155 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v155 = _S11;
            if (_NF) {
              float v155 = 0.0;
            }
          }
          __asm { FCVT            S4, H31 }
          *(_WORD *)float v52 = llroundf(v155);
          float v158 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v158 = _S4;
            if (_NF) {
              float v158 = 0.0;
            }
          }
          __asm { FCVT            S4, H30 }
          *((_WORD *)v52 + 1) = llroundf(v158);
          float v161 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v161 = _S4;
            if (_NF) {
              float v161 = 0.0;
            }
          }
          __asm { FCVT            S8, H29 }
          *((_WORD *)v52 + 2) = llroundf(v161);
          *((_WORD *)v52 + 3) = v50;
          float v164 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v164 = _S8;
            if (_NF) {
              float v164 = 0.0;
            }
          }
          __asm { FCVT            S4, H28 }
          *((_WORD *)v52 + 4) = llroundf(v164);
          float v167 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v167 = _S4;
            if (_NF) {
              float v167 = 0.0;
            }
          }
          __asm { FCVT            S4, H27 }
          *((_WORD *)v52 + 5) = llroundf(v167);
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v136 = _S4;
            if (_NF) {
              float v136 = 0.0;
            }
          }
          v39 += 4;
          v51 += 4;
          v42 += 16;
          *((_WORD *)v52 + 6) = llroundf(v136);
          *((_WORD *)v52 + 7) = v50;
          v52 += 16;
          v49 += 2;
        }
        while (v10 > v49);
      }
      uint64_t v39 = &v48[v16];
      v46 += v17;
      result += v18 + v18;
      uint64_t v42 = &v47[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = 2 * *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = *(void *)(result + 20);
    uint64_t v8 = *(void *)(result + 44) + 2 * v4;
    unint64_t v9 = 2 * v5 - 2 * v4;
    uint64_t v10 = *(void *)(result + 152);
    uint64_t v12 = *(void **)(result + 56);
    uint64_t v11 = *(uint64_t **)(result + 64);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v16 = **(void **)(result + 136);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v10 + 136);
    float v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = v19 * *(float *)(v10 + 28);
    uint64_t v27 = *(void *)(result + 112);
    uint64_t v28 = *(void **)(result + 128);
    uint64_t v29 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v3);
    uint64_t v30 = *(void *)(result + 36);
    uint64_t v31 = v12[1];
    uint64_t v32 = (char *)(*v12 + v13 * v8 + 2 * v30);
    uint64_t v33 = v12[2];
    BOOL v34 = v33 == 0;
    uint64_t v35 = v33 + v15 * v8 + 2 * v30;
    if (v34) {
      uint64_t v35 = 0;
    }
    uint64_t v36 = (char *)(*v28 + v29 * v16 + 8 * v27);
    unsigned int v37 = *(unsigned __int8 *)(v10 + 124);
    if (v37 >= 0x11) {
      unsigned __int8 v38 = 0;
    }
    else {
      unsigned __int8 v38 = 16 - v37;
    }
    uint64_t v39 = v31 + v14 * (v8 / 2) + 2 * v30;
    uint64_t result = v38;
    do
    {
      uint64_t v40 = &v36[v16];
      char v41 = &v32[v13];
      if (v7)
      {
        unint64_t v42 = 0;
        if (v35) {
          __int16 v43 = 0;
        }
        else {
          __int16 v43 = -1;
        }
        char v44 = &v32[v13];
        uint64_t v45 = &v36[v16];
        do
        {
          uint64_t v46 = (unsigned __int16 *)(v39 + 2 * v42);
          float v47 = (float)(v46[1] >> result) - v21;
          float v48 = v23 * v47;
          float v49 = v22 * (float)((float)(*(unsigned __int16 *)v32 >> result) - v20);
          float v50 = (float)(v23 * v47) + v49;
          float v51 = 65535.0;
          if (v50 <= 65535.0)
          {
            float v51 = (float)(v23 * v47) + v49;
            if (v50 < 0.0) {
              float v51 = 0.0;
            }
          }
          float v52 = (float)(*v46 >> result) - v21;
          float v53 = (float)(v25 * v47) + (float)(v52 * v24);
          unsigned int v54 = *((unsigned __int16 *)v32 + 1);
          unsigned int v55 = *(unsigned __int16 *)v44;
          unsigned int v56 = *((unsigned __int16 *)v44 + 1);
          *(_WORD *)uint64_t v36 = llroundf(v51);
          float v57 = 65535.0;
          if ((float)(v49 + v53) <= 65535.0)
          {
            float v57 = v49 + v53;
            if ((float)(v49 + v53) < 0.0) {
              float v57 = 0.0;
            }
          }
          float v58 = v26 * v52;
          float v59 = v58 + v49;
          *((_WORD *)v36 + 1) = llroundf(v57);
          float v60 = 65535.0;
          if (v59 <= 65535.0)
          {
            float v60 = v59;
            if (v59 < 0.0) {
              float v60 = 0.0;
            }
          }
          float v61 = v22 * (float)((float)(int)(v54 >> result) - v20);
          *((_WORD *)v36 + 2) = llroundf(v60);
          *((_WORD *)v36 + 3) = v43;
          float v62 = 65535.0;
          if ((float)(v48 + v61) <= 65535.0)
          {
            float v62 = v48 + v61;
            if ((float)(v48 + v61) < 0.0) {
              float v62 = 0.0;
            }
          }
          *((_WORD *)v36 + 4) = llroundf(v62);
          float v63 = 65535.0;
          if ((float)(v53 + v61) <= 65535.0)
          {
            float v63 = v53 + v61;
            if ((float)(v53 + v61) < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = v58 + v61;
          *((_WORD *)v36 + 5) = llroundf(v63);
          float v65 = 65535.0;
          if (v64 <= 65535.0)
          {
            float v65 = v64;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = v22 * (float)((float)(int)(v55 >> result) - v20);
          *((_WORD *)v36 + 6) = llroundf(v65);
          *((_WORD *)v36 + 7) = v43;
          float v67 = 65535.0;
          if ((float)(v48 + v66) <= 65535.0)
          {
            float v67 = v48 + v66;
            if ((float)(v48 + v66) < 0.0) {
              float v67 = 0.0;
            }
          }
          *(_WORD *)uint64_t v45 = llroundf(v67);
          float v68 = 65535.0;
          if ((float)(v53 + v66) <= 65535.0)
          {
            float v68 = v53 + v66;
            if ((float)(v53 + v66) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v58 + v66;
          *((_WORD *)v45 + 1) = llroundf(v68);
          float v70 = 65535.0;
          if (v69 <= 65535.0)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v22 * (float)((float)(int)(v56 >> result) - v20);
          float v72 = v48 + v71;
          *((_WORD *)v45 + 2) = llroundf(v70);
          *((_WORD *)v45 + 3) = v43;
          BOOL v73 = (float)(v48 + v71) <= 65535.0;
          float v74 = 65535.0;
          if (v73)
          {
            float v74 = v72;
            if (v72 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v53 + v71;
          *((_WORD *)v45 + 4) = llroundf(v74);
          float v76 = 65535.0;
          if (v75 <= 65535.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          *((_WORD *)v45 + 5) = llroundf(v76);
          float v77 = 65535.0;
          if ((float)(v58 + v71) <= 65535.0)
          {
            float v77 = v58 + v71;
            if ((float)(v58 + v71) < 0.0) {
              float v77 = 0.0;
            }
          }
          v32 += 4;
          v44 += 4;
          v36 += 16;
          *((_WORD *)v45 + 6) = llroundf(v77);
          *((_WORD *)v45 + 7) = v43;
          v45 += 16;
          v42 += 2;
        }
        while (v7 > v42);
      }
      uint64_t v32 = &v41[v13];
      v39 += v14;
      v35 += v15 + v15;
      uint64_t v36 = &v40[v16];
      v6 += 2;
    }
    while (v9 > v6);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    float v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    float v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v22 = (float)LODWORD(a5);
    float v23 = v20 * *(float *)v13;
    float v209 = v20 * *(float *)(v13 + 16);
    float v210 = v20 * *(float *)(v13 + 8);
    float v207 = v20 * *(float *)(v13 + 28);
    float v208 = v20 * *(float *)(v13 + 20);
    float v205 = *(float *)(v13 + 76);
    float v206 = *(float *)(v13 + 72);
    float v203 = *(float *)(v13 + 84);
    float v204 = *(float *)(v13 + 80);
    float v201 = *(float *)(v13 + 92);
    float v202 = *(float *)(v13 + 88);
    float v199 = *(float *)(v13 + 100);
    float v200 = *(float *)(v13 + 96);
    uint64_t v24 = v13 + 164;
    uint64_t v25 = v13 + 16548;
    uint64_t v26 = v13 + 32932;
    float v27 = *(float *)(v13 + 108);
    float v198 = *(float *)(v13 + 104);
    float v28 = *(float *)(v13 + 112);
    float v29 = *(float *)(v13 + 116);
    float v30 = *(float *)(v13 + 120);
    uint64_t v31 = *((void *)result + 14);
    uint64_t v32 = (void *)*((void *)result + 16);
    uint64_t v33 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v34 = *(void *)(result + 36);
    uint64_t v35 = v14[1];
    uint64_t result = (unsigned __int8 *)(*v14 + v16 * v11 + 2 * v34);
    uint64_t v36 = v14[2];
    _ZF = v36 == 0;
    uint64_t v38 = v36 + v18 * v11 + 2 * v34;
    if (_ZF) {
      uint64_t v38 = 0;
    }
    uint64_t v39 = (char *)(*v32 + v33 * v19 + 8 * v31);
    unsigned int v40 = *(unsigned __int8 *)(v13 + 124);
    if (v40 >= 0x11) {
      char v41 = 0;
    }
    else {
      char v41 = 16 - v40;
    }
    uint64_t v42 = v35 + v17 * (v11 / 2) + 2 * v34;
    float v211 = (float)LODWORD(a5);
    float v197 = v23;
    do
    {
      __int16 v43 = &v39[v19];
      char v44 = &result[v16];
      if (v10)
      {
        unint64_t v45 = 0;
        if (v38) {
          unsigned int v46 = 0;
        }
        else {
          unsigned int v46 = -1;
        }
        unsigned int v47 = bswap32(v46) >> 16;
        float v48 = &result[v16];
        float v49 = &v39[v19];
        do
        {
          float v50 = (unsigned __int16 *)(v42 + 2 * v45);
          float v51 = (float)(v50[1] >> v41) - v22;
          float v52 = v210 * v51;
          float v53 = v23 * (float)((float)(*(unsigned __int16 *)result >> v41) - v21);
          float v54 = (float)(v210 * v51) + v53;
          float v55 = 8191.0;
          if (v54 <= 8191.0)
          {
            float v55 = (float)(v210 * v51) + v53;
            if (v54 < 0.0) {
              float v55 = 0.0;
            }
          }
          float v56 = (float)(*v50 >> v41) - v22;
          float v57 = (float)(v208 * v51) + (float)(v56 * v209);
          float v58 = 8191.0;
          if ((float)(v53 + v57) <= 8191.0)
          {
            float v58 = v53 + v57;
            if ((float)(v53 + v57) < 0.0) {
              float v58 = 0.0;
            }
          }
          float v59 = v207 * v56;
          float v60 = (float)(v207 * v56) + v53;
          float v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            float v61 = v60;
            if (v60 < 0.0) {
              float v61 = 0.0;
            }
          }
          float v62 = v23 * (float)((float)(*((unsigned __int16 *)result + 1) >> v41) - v21);
          float v63 = 8191.0;
          if ((float)(v52 + v62) <= 8191.0)
          {
            float v63 = v52 + v62;
            if ((float)(v52 + v62) < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = 8191.0;
          if ((float)(v57 + v62) <= 8191.0)
          {
            float v64 = v57 + v62;
            if ((float)(v57 + v62) < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = 8191.0;
          if ((float)(v59 + v62) <= 8191.0)
          {
            float v65 = v59 + v62;
            if ((float)(v59 + v62) < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = v23 * (float)((float)(*(unsigned __int16 *)v48 >> v41) - v21);
          float v67 = 8191.0;
          if ((float)(v52 + v66) <= 8191.0)
          {
            float v67 = v52 + v66;
            if ((float)(v52 + v66) < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = 8191.0;
          if ((float)(v57 + v66) <= 8191.0)
          {
            float v68 = v57 + v66;
            if ((float)(v57 + v66) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = 8191.0;
          if ((float)(v59 + v66) <= 8191.0)
          {
            float v69 = v59 + v66;
            if ((float)(v59 + v66) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v23 * (float)((float)(*((unsigned __int16 *)v48 + 1) >> v41) - v21);
          float v71 = v52 + v70;
          BOOL v72 = (float)(v52 + v70) <= 8191.0;
          float v73 = 8191.0;
          if (v72)
          {
            float v73 = v71;
            if (v71 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v57 + v70;
          BOOL v72 = (float)(v57 + v70) <= 8191.0;
          float v75 = 8191.0;
          if (v72)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v59 + v70;
          BOOL v72 = (float)(v59 + v70) <= 8191.0;
          float v77 = 8191.0;
          if (v72)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v55, 0.0), 8191.0)));
          __asm { FCVT            S30, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v58, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          _H1 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H7 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          float v96 = fmaxf(_S30, fmaxf(_S31, _S8));
          float v97 = (float)((float)((float)(v28 * _S31) + (float)(v27 * _S30)) + (float)(v29 * _S8)) + (float)(v30 * v96);
          float v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            float v98 = (float)((float)((float)(v28 * _S31) + (float)(v27 * _S30)) + (float)(v29 * _S8)) + (float)(v30 * v96);
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          __asm
          {
            FCVT            S4, H7
            FCVT            S5, H13
            FCVT            S9, H2
          }
          _H13 = *(_WORD *)(v25 + 2 * llroundf(v98));
          float v103 = (float)((float)((float)(v28 * _S5) + (float)(v27 * _S4)) + (float)(v29 * _S9))
               + (float)(v30 * fmaxf(_S4, fmaxf(_S5, _S9)));
          float v104 = 8191.0;
          if (v103 <= 8191.0)
          {
            float v104 = v103;
            if (v103 < 0.0) {
              float v104 = 0.0;
            }
          }
          __asm
          {
            FCVT            S14, H14
            FCVT            S15, H15
            FCVT            S6, H6
          }
          _H7 = *(_WORD *)(v25 + 2 * llroundf(v104));
          float v109 = (float)((float)((float)(v28 * _S15) + (float)(v27 * _S14)) + (float)(v29 * _S6))
               + (float)(v30 * fmaxf(_S14, fmaxf(_S15, _S6)));
          float v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            float v110 = v109;
            if (v109 < 0.0) {
              float v110 = 0.0;
            }
          }
          __asm
          {
            FCVT            S2, H10
            FCVT            S10, H11
            FCVT            S11, H12
          }
          _H12 = *(_WORD *)(v25 + 2 * llroundf(v110));
          float v115 = v28;
          float v116 = v27;
          float v117 = v29;
          float v118 = v30;
          float v119 = (float)((float)((float)(v28 * _S10) + (float)(v27 * _S2)) + (float)(v29 * _S11))
               + (float)(v30 * fmaxf(_S2, fmaxf(_S10, _S11)));
          float v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            float v120 = v119;
            if (v119 < 0.0) {
              float v120 = 0.0;
            }
          }
          __asm { FCVT            S1, H13 }
          float v122 = _S30 * _S1;
          float v123 = _S31 * _S1;
          float v124 = _S8 * _S1;
          __asm { FCVT            S7, H7 }
          float v126 = _S4 * _S7;
          float v127 = _S5 * _S7;
          float v128 = _S9 * _S7;
          __asm { FCVT            S8, H12 }
          float v130 = _S14 * _S8;
          float v131 = _S15 * _S8;
          _S6 = _S6 * _S8;
          _H3 = *(_WORD *)(v25 + 2 * llroundf(v120));
          __asm { FCVT            S3, H3 }
          float v135 = _S2 * _S3;
          float v136 = _S10 * _S3;
          float v137 = _S11 * _S3;
          float v138 = (float)((float)(v205 * v123) + (float)(v122 * v206)) + (float)(v124 * v204);
          float v139 = (float)((float)(v202 * v123) + (float)(v122 * v203)) + (float)(v124 * v201);
          float v140 = (float)((float)(v199 * v123) + (float)(v122 * v200)) + (float)(v124 * v198);
          float v141 = (float)((float)(v205 * v127) + (float)(v126 * v206)) + (float)(v128 * v204);
          float v142 = (float)((float)(v202 * v127) + (float)(v126 * v203)) + (float)(v128 * v201);
          float v143 = (float)((float)(v199 * v127) + (float)(v126 * v200)) + (float)(v128 * v198);
          float v144 = (float)((float)(v205 * v131) + (float)(v130 * v206)) + (float)(_S6 * v204);
          float v145 = (float)((float)(v202 * v131) + (float)(v130 * v203)) + (float)(_S6 * v201);
          float v146 = (float)((float)(v199 * v131) + (float)(v130 * v200)) + (float)(_S6 * v198);
          float v147 = (float)((float)(v205 * v136) + (float)(v135 * v206)) + (float)(v137 * v204);
          float v148 = (float)((float)(v202 * v136) + (float)(v135 * v203)) + (float)(v137 * v201);
          float v149 = (float)((float)(v199 * v136) + (float)(v135 * v200)) + (float)(v137 * v198);
          LOWORD(_S6) = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          __asm { FCVT            S1, H6 }
          _H31 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          float v162 = 65535.0;
          float v163 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCMP            H6, #0 }
            float v163 = _S1;
            if (_NF) {
              float v163 = 0.0;
            }
          }
          __asm { FCVT            S1, H15 }
          float v166 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCMP            H15, #0 }
            float v166 = _S1;
            if (_NF) {
              float v166 = 0.0;
            }
          }
          __asm { FCVT            S1, H5 }
          float v169 = 65535.0;
          float v27 = v116;
          float v28 = v115;
          float v29 = v117;
          float v30 = v118;
          if (_S1 <= 65535.0)
          {
            __asm { FCMP            H5, #0 }
            float v169 = _S1;
            if (_NF) {
              float v169 = 0.0;
            }
          }
          __asm { FCVT            S1, H4 }
          *(_WORD *)uint64_t v39 = v47;
          *((_WORD *)v39 + 1) = __rev16(llroundf(v163));
          *((_WORD *)v39 + 2) = __rev16(llroundf(v166));
          *((_WORD *)v39 + 3) = __rev16(llroundf(v169));
          float v172 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCMP            H4, #0 }
            float v172 = _S1;
            if (_NF) {
              float v172 = 0.0;
            }
          }
          __asm { FCVT            S1, H14 }
          float v175 = 65535.0;
          float v23 = v197;
          if (_S1 <= 65535.0)
          {
            __asm { FCMP            H14, #0 }
            float v175 = _S1;
            if (_NF) {
              float v175 = 0.0;
            }
          }
          __asm { FCVT            S1, H13 }
          float v178 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCMP            H13, #0 }
            float v178 = _S1;
            if (_NF) {
              float v178 = 0.0;
            }
          }
          __asm { FCVT            S1, H12 }
          *((_WORD *)v39 + 4) = v47;
          *((_WORD *)v39 + 5) = __rev16(llroundf(v172));
          *((_WORD *)v39 + 6) = __rev16(llroundf(v175));
          *((_WORD *)v39 + 7) = __rev16(llroundf(v178));
          float v181 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCMP            H12, #0 }
            float v181 = _S1;
            if (_NF) {
              float v181 = 0.0;
            }
          }
          __asm { FCVT            S1, H11 }
          float v184 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v184 = _S1;
            if (_NF) {
              float v184 = 0.0;
            }
          }
          __asm { FCVT            S1, H10 }
          float v187 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v187 = _S1;
            if (_NF) {
              float v187 = 0.0;
            }
          }
          __asm { FCVT            S1, H9 }
          *(_WORD *)float v49 = v47;
          *((_WORD *)v49 + 1) = __rev16(llroundf(v181));
          *((_WORD *)v49 + 2) = __rev16(llroundf(v184));
          *((_WORD *)v49 + 3) = __rev16(llroundf(v187));
          float v190 = 65535.0;
          if (_S1 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v190 = _S1;
            if (_NF) {
              float v190 = 0.0;
            }
          }
          __asm { FCVT            S1, H8 }
          float v193 = 65535.0;
          float v22 = v211;
          if (_S1 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v193 = _S1;
            if (_NF) {
              float v193 = 0.0;
            }
          }
          __asm { FCVT            S1, H31 }
          if (_S1 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v162 = _S1;
            if (_NF) {
              float v162 = 0.0;
            }
          }
          result += 4;
          v48 += 4;
          v39 += 16;
          *((_WORD *)v49 + 4) = v47;
          *((_WORD *)v49 + 5) = __rev16(llroundf(v190));
          *((_WORD *)v49 + 6) = __rev16(llroundf(v193));
          *((_WORD *)v49 + 7) = __rev16(llroundf(v162));
          v49 += 16;
          v45 += 2;
        }
        while (v10 > v45);
      }
      uint64_t result = &v44[v16];
      v42 += v17;
      v38 += v18 + v18;
      uint64_t v39 = &v43[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v176 = v21 * *(float *)(v13 + 16);
    float v177 = v21 * *(float *)(v13 + 8);
    float v174 = v21 * *(float *)(v13 + 28);
    float v175 = v21 * *(float *)(v13 + 20);
    float v25 = *(float *)(v13 + 80);
    float v172 = *(float *)(v13 + 76);
    float v173 = *(float *)(v13 + 72);
    float v26 = *(float *)(v13 + 84);
    float v27 = *(float *)(v13 + 88);
    float v28 = *(float *)(v13 + 92);
    float v29 = *(float *)(v13 + 96);
    float v30 = *(float *)(v13 + 100);
    float v31 = *(float *)(v13 + 104);
    uint64_t v32 = v13 + 164;
    uint64_t v33 = v13 + 16548;
    uint64_t v34 = *((void *)result + 14);
    uint64_t v35 = (void *)*((void *)result + 16);
    uint64_t v36 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v37 = *(void *)(result + 36);
    uint64_t v38 = v14[1];
    uint64_t v39 = (char *)(*v14 + v16 * v11 + 2 * v37);
    uint64_t v40 = v14[2];
    _ZF = v40 == 0;
    uint64_t result = (unsigned __int8 *)(v40 + v18 * v11 + 2 * v37);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v42 = (char *)(*v35 + v36 * v19 + 8 * v34);
    unsigned int v43 = *(unsigned __int8 *)(v13 + 124);
    char v44 = 16 - v43;
    if (v43 >= 0x11) {
      char v44 = 0;
    }
    if (v11 >= 0) {
      uint64_t v45 = v11;
    }
    else {
      uint64_t v45 = v11 + 1;
    }
    uint64_t v46 = v38 + v17 * (v45 >> 1) + 2 * v37;
    do
    {
      unsigned int v47 = &v42[v19];
      float v48 = &v39[v16];
      if (v10)
      {
        unint64_t v49 = 0;
        if (result) {
          unsigned int v50 = 0;
        }
        else {
          unsigned int v50 = -1;
        }
        unsigned int v51 = bswap32(v50) >> 16;
        float v52 = &v39[v16];
        float v53 = &v42[v19];
        do
        {
          float v54 = (unsigned __int16 *)(v46 + 2 * v49);
          float v55 = (float)(v54[1] >> v44) - v23;
          float v56 = v177 * v55;
          float v57 = v24 * (float)((float)(*(unsigned __int16 *)v39 >> v44) - v22);
          float v58 = (float)(v177 * v55) + v57;
          float v59 = 8191.0;
          if (v58 <= 8191.0)
          {
            float v59 = (float)(v177 * v55) + v57;
            if (v58 < 0.0) {
              float v59 = 0.0;
            }
          }
          float v60 = (float)(*v54 >> v44) - v23;
          float v61 = (float)(v175 * v55) + (float)(v60 * v176);
          float v62 = 8191.0;
          if ((float)(v57 + v61) <= 8191.0)
          {
            float v62 = v57 + v61;
            if ((float)(v57 + v61) < 0.0) {
              float v62 = 0.0;
            }
          }
          float v63 = v174 * v60;
          float v64 = (float)(v174 * v60) + v57;
          float v65 = 8191.0;
          if (v64 <= 8191.0)
          {
            float v65 = v64;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = v24 * (float)((float)(*((unsigned __int16 *)v39 + 1) >> v44) - v22);
          float v67 = 8191.0;
          if ((float)(v56 + v66) <= 8191.0)
          {
            float v67 = v56 + v66;
            if ((float)(v56 + v66) < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = 8191.0;
          if ((float)(v61 + v66) <= 8191.0)
          {
            float v68 = v61 + v66;
            if ((float)(v61 + v66) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v63 + v66;
          BOOL v70 = (float)(v63 + v66) <= 8191.0;
          float v71 = 8191.0;
          if (v70)
          {
            float v71 = v69;
            if (v69 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v24 * (float)((float)(*(unsigned __int16 *)v52 >> v44) - v22);
          float v73 = 8191.0;
          if ((float)(v56 + v72) <= 8191.0)
          {
            float v73 = v56 + v72;
            if ((float)(v56 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = 8191.0;
          if ((float)(v61 + v72) <= 8191.0)
          {
            float v74 = v61 + v72;
            if ((float)(v61 + v72) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v63 + v72;
          BOOL v70 = (float)(v63 + v72) <= 8191.0;
          float v76 = 8191.0;
          if (v70)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v24 * (float)((float)(*((unsigned __int16 *)v52 + 1) >> v44) - v22);
          float v78 = v56 + v77;
          BOOL v70 = (float)(v56 + v77) <= 8191.0;
          float v79 = 8191.0;
          if (v70)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v61 + v77;
          BOOL v70 = (float)(v61 + v77) <= 8191.0;
          float v81 = 8191.0;
          if (v70)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v22;
          float v83 = v63 + v77;
          BOOL v70 = (float)(v63 + v77) <= 8191.0;
          float v84 = 8191.0;
          if (v70)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v59, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H26 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H30 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H30
            FCVT            S9, H9
          }
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H29 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H31 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          float v112 = (float)((float)(v172 * _S26) + (float)(_S4 * v173)) + (float)(_S27 * v25);
          float v113 = (float)((float)(v27 * _S26) + (float)(_S4 * v26)) + (float)(_S27 * v28);
          float v114 = (float)((float)(v30 * _S26) + (float)(_S4 * v29)) + (float)(_S27 * v31);
          float v115 = (float)((float)(v172 * _S30) + (float)(_S28 * v173)) + (float)(_S9 * v25);
          float v116 = (float)((float)(v27 * _S30) + (float)(_S28 * v26)) + (float)(_S9 * v28);
          float v117 = (float)((float)(v30 * _S30) + (float)(_S28 * v29)) + (float)(_S9 * v31);
          float v118 = (float)((float)(v172 * _S11) + (float)(_S10 * v173)) + (float)(_S12 * v25);
          float v119 = (float)((float)(v27 * _S11) + (float)(_S10 * v26)) + (float)(_S12 * v28);
          float v120 = (float)((float)(v30 * _S11) + (float)(_S10 * v29)) + (float)(_S12 * v31);
          float v121 = (float)((float)(v172 * _S31) + (float)(_S29 * v173)) + (float)(_S8 * v25);
          float v122 = (float)((float)(v27 * _S31) + (float)(_S29 * v26)) + (float)(_S8 * v28);
          float v123 = (float)((float)(v30 * _S31) + (float)(_S29 * v29)) + (float)(_S8 * v31);
          _H14 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S4, H14 }
          _H27 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          float v137 = 65535.0;
          float v138 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H14, #0 }
            float v138 = _S4;
            if (_NF) {
              float v138 = 0.0;
            }
          }
          __asm { FCVT            S4, H13 }
          float v141 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H13, #0 }
            float v141 = _S4;
            if (_NF) {
              float v141 = 0.0;
            }
          }
          __asm { FCVT            S13, H12 }
          float v144 = 65535.0;
          float v22 = v82;
          if (_S13 <= 65535.0)
          {
            __asm { FCMP            H12, #0 }
            float v144 = _S13;
            if (_NF) {
              float v144 = 0.0;
            }
          }
          __asm { FCVT            S13, H11 }
          *(_WORD *)uint64_t v42 = v51;
          *((_WORD *)v42 + 1) = __rev16(llroundf(v138));
          *((_WORD *)v42 + 2) = __rev16(llroundf(v141));
          *((_WORD *)v42 + 3) = __rev16(llroundf(v144));
          float v147 = 65535.0;
          if (_S13 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v147 = _S13;
            if (_NF) {
              float v147 = 0.0;
            }
          }
          __asm { FCVT            S4, H10 }
          float v150 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v150 = _S4;
            if (_NF) {
              float v150 = 0.0;
            }
          }
          __asm { FCVT            S10, H9 }
          float v153 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v153 = _S10;
            if (_NF) {
              float v153 = 0.0;
            }
          }
          __asm { FCVT            S10, H8 }
          *((_WORD *)v42 + 4) = v51;
          *((_WORD *)v42 + 5) = __rev16(llroundf(v147));
          *((_WORD *)v42 + 6) = __rev16(llroundf(v150));
          *((_WORD *)v42 + 7) = __rev16(llroundf(v153));
          float v156 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v156 = _S10;
            if (_NF) {
              float v156 = 0.0;
            }
          }
          __asm { FCVT            S4, H31 }
          float v159 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v159 = _S4;
            if (_NF) {
              float v159 = 0.0;
            }
          }
          __asm { FCVT            S31, H30 }
          float v162 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v162 = _S31;
            if (_NF) {
              float v162 = 0.0;
            }
          }
          __asm { FCVT            S31, H29 }
          *(_WORD *)float v53 = v51;
          *((_WORD *)v53 + 1) = __rev16(llroundf(v156));
          *((_WORD *)v53 + 2) = __rev16(llroundf(v159));
          *((_WORD *)v53 + 3) = __rev16(llroundf(v162));
          float v165 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v165 = _S31;
            if (_NF) {
              float v165 = 0.0;
            }
          }
          __asm { FCVT            S4, H28 }
          float v168 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v168 = _S4;
            if (_NF) {
              float v168 = 0.0;
            }
          }
          __asm { FCVT            S4, H27 }
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v137 = _S4;
            if (_NF) {
              float v137 = 0.0;
            }
          }
          v39 += 4;
          v52 += 4;
          v42 += 16;
          *((_WORD *)v53 + 4) = v51;
          *((_WORD *)v53 + 5) = __rev16(llroundf(v165));
          *((_WORD *)v53 + 6) = __rev16(llroundf(v168));
          *((_WORD *)v53 + 7) = __rev16(llroundf(v137));
          v53 += 16;
          v49 += 2;
        }
        while (v10 > v49);
      }
      uint64_t v39 = &v48[v16];
      v46 += v17;
      result += v18 + v18;
      uint64_t v42 = &v47[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = 2 * *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = *(void *)(result + 20);
    uint64_t v8 = *(void *)(result + 44) + 2 * v4;
    unint64_t v9 = 2 * v5 - 2 * v4;
    uint64_t v10 = *(void *)(result + 152);
    uint64_t v12 = *(void **)(result + 56);
    uint64_t v11 = *(uint64_t **)(result + 64);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v16 = **(void **)(result + 136);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v10 + 136);
    float v19 = *(float *)&v18 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = v19 * *(float *)(v10 + 28);
    uint64_t v27 = *(void *)(result + 112);
    uint64_t v28 = *(void **)(result + 128);
    uint64_t v29 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v3);
    uint64_t v30 = *(void *)(result + 36);
    uint64_t v31 = v12[1];
    uint64_t v32 = (char *)(*v12 + v13 * v8 + 2 * v30);
    uint64_t v33 = v12[2];
    BOOL v34 = v33 == 0;
    uint64_t v35 = v33 + v15 * v8 + 2 * v30;
    if (v34) {
      uint64_t v35 = 0;
    }
    uint64_t v36 = (char *)(*v28 + v29 * v16 + 8 * v27);
    unsigned int v37 = *(unsigned __int8 *)(v10 + 124);
    if (v37 >= 0x11) {
      unsigned __int8 v38 = 0;
    }
    else {
      unsigned __int8 v38 = 16 - v37;
    }
    uint64_t v39 = v31 + v14 * (v8 / 2) + 2 * v30;
    uint64_t result = v38;
    do
    {
      uint64_t v40 = &v36[v16];
      char v41 = &v32[v13];
      if (v7)
      {
        unint64_t v42 = 0;
        if (v35) {
          unsigned int v43 = 0;
        }
        else {
          unsigned int v43 = -1;
        }
        unsigned int v44 = bswap32(v43) >> 16;
        uint64_t v45 = &v32[v13];
        uint64_t v46 = &v36[v16];
        do
        {
          unsigned int v47 = (unsigned __int16 *)(v39 + 2 * v42);
          float v48 = (float)(v47[1] >> result) - v21;
          float v49 = v23 * v48;
          float v50 = v22 * (float)((float)(*(unsigned __int16 *)v32 >> result) - v20);
          float v51 = (float)(v23 * v48) + v50;
          float v52 = 65535.0;
          if (v51 <= 65535.0)
          {
            float v52 = (float)(v23 * v48) + v50;
            if (v51 < 0.0) {
              float v52 = 0.0;
            }
          }
          float v53 = (float)(*v47 >> result) - v21;
          float v54 = (float)(v25 * v48) + (float)(v53 * v24);
          float v55 = 65535.0;
          if ((float)(v50 + v54) <= 65535.0)
          {
            float v55 = v50 + v54;
            if ((float)(v50 + v54) < 0.0) {
              float v55 = 0.0;
            }
          }
          float v56 = v26 * v53;
          float v57 = v56 + v50;
          float v58 = 65535.0;
          if (v57 <= 65535.0)
          {
            float v58 = v57;
            if (v57 < 0.0) {
              float v58 = 0.0;
            }
          }
          float v59 = v22 * (float)((float)(*((unsigned __int16 *)v32 + 1) >> result) - v20);
          unsigned int v60 = *(unsigned __int16 *)v45;
          unsigned int v61 = *((unsigned __int16 *)v45 + 1);
          *(_WORD *)uint64_t v36 = v44;
          *((_WORD *)v36 + 1) = __rev16(llroundf(v52));
          *((_WORD *)v36 + 2) = __rev16(llroundf(v55));
          *((_WORD *)v36 + 3) = __rev16(llroundf(v58));
          float v62 = 65535.0;
          if ((float)(v49 + v59) <= 65535.0)
          {
            float v62 = v49 + v59;
            if ((float)(v49 + v59) < 0.0) {
              float v62 = 0.0;
            }
          }
          float v63 = 65535.0;
          if ((float)(v54 + v59) <= 65535.0)
          {
            float v63 = v54 + v59;
            if ((float)(v54 + v59) < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = v56 + v59;
          float v65 = 65535.0;
          if (v64 <= 65535.0)
          {
            float v65 = v64;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = v22 * (float)((float)(int)(v60 >> result) - v20);
          *((_WORD *)v36 + 4) = v44;
          *((_WORD *)v36 + 5) = __rev16(llroundf(v62));
          *((_WORD *)v36 + 6) = __rev16(llroundf(v63));
          *((_WORD *)v36 + 7) = __rev16(llroundf(v65));
          float v67 = 65535.0;
          if ((float)(v49 + v66) <= 65535.0)
          {
            float v67 = v49 + v66;
            if ((float)(v49 + v66) < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = 65535.0;
          if ((float)(v54 + v66) <= 65535.0)
          {
            float v68 = v54 + v66;
            if ((float)(v54 + v66) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v56 + v66;
          float v70 = 65535.0;
          if (v69 <= 65535.0)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v22 * (float)((float)(int)(v61 >> result) - v20);
          unsigned int v72 = llroundf(v67);
          float v73 = v49 + v71;
          *(_WORD *)uint64_t v46 = v44;
          *((_WORD *)v46 + 1) = __rev16(v72);
          *((_WORD *)v46 + 2) = __rev16(llroundf(v68));
          *((_WORD *)v46 + 3) = __rev16(llroundf(v70));
          BOOL v74 = (float)(v49 + v71) <= 65535.0;
          float v75 = 65535.0;
          if (v74)
          {
            float v75 = v73;
            if (v73 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v54 + v71;
          BOOL v74 = (float)(v54 + v71) <= 65535.0;
          float v77 = 65535.0;
          if (v74)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v56 + v71;
          BOOL v74 = (float)(v56 + v71) <= 65535.0;
          float v79 = 65535.0;
          if (v74)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          v32 += 4;
          v45 += 4;
          v36 += 16;
          *((_WORD *)v46 + 4) = v44;
          *((_WORD *)v46 + 5) = __rev16(llroundf(v75));
          *((_WORD *)v46 + 6) = __rev16(llroundf(v77));
          *((_WORD *)v46 + 7) = __rev16(llroundf(v79));
          v46 += 16;
          v42 += 2;
        }
        while (v7 > v42);
      }
      uint64_t v32 = &v41[v13];
      v39 += v14;
      v35 += v15 + v15;
      uint64_t v36 = &v40[v16];
      v6 += 2;
    }
    while (v9 > v6);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD(unint64_t result, uint64_t a2, int16x4_t a3, double a4, float32x4_t a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44);
    uint64_t v13 = v12 + 2 * v8;
    uint64_t v14 = v12 + 2 * v9;
    uint64_t v15 = *(float32x2_t **)(result + 152);
    uint64_t v16 = *(uint64_t **)(result + 56);
    uint64_t v17 = *(uint64_t **)(result + 64);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = **(void **)(result + 136);
    unsigned int v22 = v15[17].u16[2];
    LODWORD(v17) = v15[17].u16[3];
    a3.i32[0] = v15->i32[0];
    v23.i32[0] = v15[3].i32[1];
    _S17 = v15[10].f32[1];
    _S18 = v15[11].f32[0];
    _S19 = v15[11].f32[1];
    _S21 = v15[12].f32[0];
    _S23 = v15[12].f32[1];
    _S6 = v15[13].f32[0];
    unint64_t v315 = v14 - v13;
    uint64_t v30 = (char *)&v15[2068] + 4;
    float v31 = (float)v22;
    float v32 = (float)v17;
    a5.f32[0] = 8191.0 / (float)v15[16].u32[0];
    _S24 = a5.f32[0] * v15->f32[0];
    uint64_t v34 = (char *)&v15[20] + 4;
    uint64_t v35 = (char *)&v15[4116] + 4;
    __asm { FCVT            H8, S24 }
    *(short float *)a3.i16 = (short float)v22;
    float16x8_t v313 = (float16x8_t)vdupq_lane_s16(a3, 0);
    v23.i32[1] = v15[1].i32[0];
    *(float32x2_t *)v5.f32 = vmul_n_f32(v23, a5.f32[0]);
    short float v41 = -(short float)v17;
    *(float32x2_t *)a5.f32 = vmul_n_f32(v15[2], a5.f32[0]);
    float16x8_t v344 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v341 = vmulq_n_f16(v344, v41);
    float16x8_t v342 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v340 = vmulq_n_f16(v342, v41);
    float v348 = v15[13].f32[1];
    __asm { FCVT            H0, S7 }
    short float v339 = _H0;
    float v347 = v15[14].f32[0];
    __asm { FCVT            H0, S25 }
    short float v338 = _H0;
    float v346 = v15[14].f32[1];
    __asm { FCVT            H0, S26 }
    short float v337 = _H0;
    float v345 = v15[15].f32[0];
    __asm { FCVT            H0, S20 }
    short float v336 = _H0;
    float v356 = v15[9].f32[0];
    __asm { FCVT            H0, S3 }
    short float v335 = _H0;
    float v355 = v15[9].f32[1];
    __asm { FCVT            H0, S4 }
    short float v334 = _H0;
    float v354 = v15[10].f32[0];
    __asm { FCVT            H0, S16 }
    short float v333 = _H0;
    unsigned int v49 = v15[15].u8[4];
    uint64_t v50 = v16[1];
    uint64_t v51 = v16[2];
    if (v13 >= 0) {
      uint64_t v52 = v13;
    }
    else {
      uint64_t v52 = v13 + 1;
    }
    uint64_t v53 = *v16;
    uint64_t v317 = v20;
    uint64_t v318 = v18;
    uint64_t v54 = v50 + v18 * (v52 >> 1);
    uint64_t v55 = *(void *)(result + 112);
    float v56 = *(void **)(result + 128);
    uint64_t v57 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v7);
    uint64_t v58 = v51 + v20 * v13;
    uint64_t v59 = *(void *)(result + 36);
    uint64_t result = v58 + 2 * v59;
    if (v49 >= 0x11) {
      unsigned __int8 v60 = 0;
    }
    else {
      unsigned __int8 v60 = 16 - v49;
    }
    uint64_t v61 = *v56 + v21 * v57 + 8 * v55;
    if (v51) {
      uint64_t v62 = v58 + 2 * v59;
    }
    else {
      uint64_t v62 = 0;
    }
    uint64_t v358 = v62;
    float v63 = (uint16x8_t *)(v54 + 2 * v59);
    float v64 = (uint16x8_t *)(v53 + v19 * v13 + 2 * v59);
    int v332 = v11 - 7;
    unsigned __int8 v314 = v60;
    unint64_t v357 = v11;
    unint64_t v312 = v11 & 0xFFFFFFF8;
    float v353 = _S17;
    __asm { FCVT            H0, S17 }
    short float v331 = _H0;
    float v352 = _S18;
    __asm { FCVT            H0, S18 }
    short float v330 = _H0;
    float v351 = _S19;
    __asm { FCVT            H0, S19 }
    short float v329 = _H0;
    float v350 = _S21;
    __asm { FCVT            H0, S21 }
    short float v328 = _H0;
    float v349 = _S23;
    __asm { FCVT            H0, S23 }
    short float v327 = _H0;
    __asm { FCVT            H0, S6 }
    short float v326 = _H0;
    uint16x8_t v325 = (uint16x8_t)vdupq_n_s16(-v60);
    float v343 = a5.f32[0];
    uint64_t v71 = v5.i64[0];
    float v324 = a5.f32[1];
    v72.i64[0] = 0x9000900090009000;
    v72.i64[1] = 0x9000900090009000;
    uint64_t v319 = v19;
    uint64_t v316 = v21;
    do
    {
      uint64_t v73 = v61 + v21;
      short float v322 = v63;
      uint64_t v323 = v10;
      short float v320 = &v64->i8[v19];
      uint64_t v321 = v61 + v21;
      if ((int)v357 < 8)
      {
        float v75 = (uint16x8_t *)((char *)v64 + v19);
        unint64_t v212 = 0;
        unsigned __int8 v213 = v314;
      }
      else
      {
        short float v360 = v64;
        int v74 = 0;
        float v75 = (uint16x8_t *)((char *)v64 + v19);
        do
        {
          int v359 = v74;
          if (v358)
          {
            float16x8_t v76 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)0), (float32x4_t)0);
          }
          else
          {
            v76.i64[0] = 0x3C003C003C003C00;
            v76.i64[1] = 0x3C003C003C003C00;
          }
          uint16x8_t v77 = *v63++;
          float16x8_t v78 = vcvtq_f16_u16(vshlq_u16(v77, v325));
          int8x16_t v79 = (int8x16_t)vmlaq_f16(v341, v344, v78);
          int8x16_t v80 = (int8x16_t)vmlaq_f16(v340, v342, v78);
          v78.i64[0] = vextq_s8(v79, v79, 8uLL).u64[0];
          *(int16x4_t *)v81.i8 = vuzp1_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v78.i8);
          *(int16x4_t *)v78.i8 = vuzp2_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v78.i8);
          v78.i64[1] = v78.i64[0];
          float16x8_t v82 = (float16x8_t)vzip1q_s16((int16x8_t)v78, (int16x8_t)v78);
          v81.i64[1] = v78.i64[0];
          float16x8_t v83 = (float16x8_t)vzip1q_s16(v81, v81);
          v78.i64[0] = vextq_s8(v80, v80, 8uLL).u64[0];
          *(float16x4_t *)v78.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v78.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v78.i8));
          v78.i64[1] = v78.i64[0];
          uint16x8_t v84 = *v360++;
          float16x8_t v85 = (float16x8_t)vzip1q_s16((int16x8_t)v78, (int16x8_t)v78);
          uint16x8_t v86 = *v75++;
          float16x8_t v87 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v84, v325)), v313);
          float16x8_t v88 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v86, v325)), v313);
          float16x8_t v89 = vmlaq_n_f16(v82, v87, _H8);
          float16x8_t v90 = vmlaq_n_f16(v82, v88, _H8);
          float16x8_t v91 = vmlaq_n_f16(v85, v87, _H8);
          float16x8_t v92 = vmlaq_n_f16(v85, v88, _H8);
          float16x8_t v93 = vmlaq_n_f16(v83, v87, _H8);
          float16x8_t v94 = vmlaq_n_f16(v83, v88, _H8);
          uint16x8_t v95 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v89, (float16x8_t)0), v72));
          uint32x4_t v96 = vmovl_high_u16(v95);
          uint32x4_t v97 = vmovl_u16(*(uint16x4_t *)v95.i8);
          v98.i16[0] = *(_WORD *)&v34[2 * v97.u32[0]];
          v98.i16[1] = *(_WORD *)&v34[2 * v97.u32[1]];
          v98.i16[2] = *(_WORD *)&v34[2 * v97.u32[2]];
          v98.i16[3] = *(_WORD *)&v34[2 * v97.u32[3]];
          v98.i16[4] = *(_WORD *)&v34[2 * v96.u32[0]];
          v98.i16[5] = *(_WORD *)&v34[2 * v96.u32[1]];
          v98.i16[6] = *(_WORD *)&v34[2 * v96.u32[2]];
          v98.i16[7] = *(_WORD *)&v34[2 * v96.u32[3]];
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v91, (float16x8_t)0), v72));
          uint32x4_t v100 = vmovl_high_u16(v99);
          uint32x4_t v101 = vmovl_u16(*(uint16x4_t *)v99.i8);
          v102.i16[0] = *(_WORD *)&v34[2 * v101.u32[0]];
          v102.i16[1] = *(_WORD *)&v34[2 * v101.u32[1]];
          v102.i16[2] = *(_WORD *)&v34[2 * v101.u32[2]];
          v102.i16[3] = *(_WORD *)&v34[2 * v101.u32[3]];
          v102.i16[4] = *(_WORD *)&v34[2 * v100.u32[0]];
          v102.i16[5] = *(_WORD *)&v34[2 * v100.u32[1]];
          v102.i16[6] = *(_WORD *)&v34[2 * v100.u32[2]];
          v102.i16[7] = *(_WORD *)&v34[2 * v100.u32[3]];
          uint16x8_t v103 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v93, (float16x8_t)0), v72));
          uint32x4_t v104 = vmovl_high_u16(v103);
          uint32x4_t v105 = vmovl_u16(*(uint16x4_t *)v103.i8);
          v106.i16[0] = *(_WORD *)&v34[2 * v105.u32[0]];
          v106.i16[1] = *(_WORD *)&v34[2 * v105.u32[1]];
          v106.i16[2] = *(_WORD *)&v34[2 * v105.u32[2]];
          v106.i16[3] = *(_WORD *)&v34[2 * v105.u32[3]];
          v106.i16[4] = *(_WORD *)&v34[2 * v104.u32[0]];
          v106.i16[5] = *(_WORD *)&v34[2 * v104.u32[1]];
          v106.i16[6] = *(_WORD *)&v34[2 * v104.u32[2]];
          v106.i16[7] = *(_WORD *)&v34[2 * v104.u32[3]];
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v90, (float16x8_t)0), v72));
          uint32x4_t v108 = vmovl_high_u16(v107);
          uint32x4_t v109 = vmovl_u16(*(uint16x4_t *)v107.i8);
          v90.i16[0] = *(_WORD *)&v34[2 * v109.u32[0]];
          v90.i16[1] = *(_WORD *)&v34[2 * v109.u32[1]];
          v90.i16[2] = *(_WORD *)&v34[2 * v109.u32[2]];
          v90.i16[3] = *(_WORD *)&v34[2 * v109.u32[3]];
          v90.i16[4] = *(_WORD *)&v34[2 * v108.u32[0]];
          v90.i16[5] = *(_WORD *)&v34[2 * v108.u32[1]];
          v90.i16[6] = *(_WORD *)&v34[2 * v108.u32[2]];
          v90.i16[7] = *(_WORD *)&v34[2 * v108.u32[3]];
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v72));
          uint32x4_t v111 = vmovl_high_u16(v110);
          uint32x4_t v112 = vmovl_u16(*(uint16x4_t *)v110.i8);
          v92.i16[0] = *(_WORD *)&v34[2 * v112.u32[0]];
          v92.i16[1] = *(_WORD *)&v34[2 * v112.u32[1]];
          v92.i16[2] = *(_WORD *)&v34[2 * v112.u32[2]];
          v92.i16[3] = *(_WORD *)&v34[2 * v112.u32[3]];
          v92.i16[4] = *(_WORD *)&v34[2 * v111.u32[0]];
          v92.i16[5] = *(_WORD *)&v34[2 * v111.u32[1]];
          v92.i16[6] = *(_WORD *)&v34[2 * v111.u32[2]];
          v92.i16[7] = *(_WORD *)&v34[2 * v111.u32[3]];
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v94, (float16x8_t)0), v72));
          uint32x4_t v114 = vmovl_high_u16(v113);
          uint32x4_t v115 = vmovl_u16(*(uint16x4_t *)v113.i8);
          v94.i16[0] = *(_WORD *)&v34[2 * v115.u32[0]];
          v94.i16[1] = *(_WORD *)&v34[2 * v115.u32[1]];
          v94.i16[2] = *(_WORD *)&v34[2 * v115.u32[2]];
          v94.i16[3] = *(_WORD *)&v34[2 * v115.u32[3]];
          v94.i16[4] = *(_WORD *)&v34[2 * v114.u32[0]];
          v94.i16[5] = *(_WORD *)&v34[2 * v114.u32[1]];
          v94.i16[6] = *(_WORD *)&v34[2 * v114.u32[2]];
          v94.i16[7] = *(_WORD *)&v34[2 * v114.u32[3]];
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v98, v339), v102, v338), v106, v337), vmaxq_f16(vmaxq_f16(v98, v102), v106), v336), (float16x8_t)0), v72));
          uint32x4_t v117 = vmovl_high_u16(v116);
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v116.i8);
          v91.i16[0] = *(_WORD *)&v30[2 * v118.u32[0]];
          v91.i16[1] = *(_WORD *)&v30[2 * v118.u32[1]];
          v91.i16[2] = *(_WORD *)&v30[2 * v118.u32[2]];
          v91.i16[3] = *(_WORD *)&v30[2 * v118.u32[3]];
          v91.i16[4] = *(_WORD *)&v30[2 * v117.u32[0]];
          v91.i16[5] = *(_WORD *)&v30[2 * v117.u32[1]];
          v91.i16[6] = *(_WORD *)&v30[2 * v117.u32[2]];
          v91.i16[7] = *(_WORD *)&v30[2 * v117.u32[3]];
          float16x8_t v119 = vmulq_f16(v98, v91);
          float16x8_t v120 = vmulq_f16(v102, v91);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v90, v339), v92, v338), v94, v337), vmaxq_f16(vmaxq_f16(v90, v92), v94), v336), (float16x8_t)0), v72));
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v121.i8);
          float16x8_t v123 = vmulq_f16(v106, v91);
          float16x8_t v124 = (float16x8_t)vmovl_high_u16(v121);
          uint64_t v125 = v124.u32[0];
          v124.i16[0] = *(_WORD *)&v30[2 * v122.u32[0]];
          float v126 = (__int16 *)&v30[2 * v125];
          float v127 = (__int16 *)&v30[2 * v124.u32[1]];
          float v128 = (__int16 *)&v30[2 * v124.u32[2]];
          float v129 = (__int16 *)&v30[2 * v124.u32[3]];
          v124.i16[1] = *(_WORD *)&v30[2 * v122.u32[1]];
          v124.i16[2] = *(_WORD *)&v30[2 * v122.u32[2]];
          v124.i16[3] = *(_WORD *)&v30[2 * v122.u32[3]];
          v124.i16[4] = *v126;
          v124.i16[5] = *v127;
          v124.i16[6] = *v128;
          v124.i16[7] = *v129;
          float16x8_t v130 = vmulq_f16(v90, v124);
          float16x8_t v131 = vmulq_f16(v92, v124);
          float16x8_t v132 = vmulq_f16(v94, v124);
          float16x8_t v133 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v119, v335), v120, v334), v123, v333);
          float16x8_t v134 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v119, v331), v120, v330), v123, v329);
          float16x8_t v135 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v123, v326), v120, v327), v119, v328);
          float16x8_t v136 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, v335), v131, v334), v132, v333);
          float16x8_t v137 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, v331), v131, v330), v132, v329);
          float16x8_t v138 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v132, v326), v131, v327), v130, v328);
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v133, (float16x8_t)0), v72));
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v139.i8);
          uint64_t v141 = v140.u32[1];
          uint64_t v142 = v140.u32[0];
          uint32x4_t v143 = vmovl_high_u16(v139);
          uint64_t v144 = v140.u32[3];
          uint64_t v145 = v140.u32[2];
          uint64_t v146 = v143.u32[1];
          uint64_t v147 = v143.u32[3];
          uint64_t v148 = v143.u32[0];
          uint64_t v149 = v143.u32[2];
          uint16x8_t v150 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v72));
          uint32x4_t v151 = vmovl_u16(*(uint16x4_t *)v150.i8);
          uint64_t v152 = v151.u32[1];
          uint64_t v153 = v151.u32[0];
          uint32x4_t v154 = vmovl_high_u16(v150);
          uint64_t v155 = v151.u32[3];
          uint64_t v156 = v151.u32[2];
          uint64_t v157 = v154.u32[1];
          uint64_t v158 = v154.u32[0];
          uint64_t v159 = v154.u32[3];
          uint64_t v160 = v154.u32[2];
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v135, (float16x8_t)0), v72));
          uint32x4_t v162 = vmovl_u16(*(uint16x4_t *)v161.i8);
          __int16 v163 = *(_WORD *)&v35[2 * v142];
          __int16 v164 = *(_WORD *)&v35[2 * v141];
          __int16 v165 = *(_WORD *)&v35[2 * v145];
          __int16 v166 = *(_WORD *)&v35[2 * v144];
          __int16 v167 = *(_WORD *)&v35[2 * v148];
          __int16 v168 = *(_WORD *)&v35[2 * v146];
          __int16 v169 = *(_WORD *)&v35[2 * v149];
          __int16 v170 = *(_WORD *)&v35[2 * v147];
          __int16 v171 = *(_WORD *)&v35[2 * v153];
          __int16 v172 = *(_WORD *)&v35[2 * v152];
          __int16 v173 = *(_WORD *)&v35[2 * v156];
          __int16 v174 = *(_WORD *)&v35[2 * v155];
          __int16 v175 = *(_WORD *)&v35[2 * v158];
          __int16 v176 = *(_WORD *)&v35[2 * v157];
          __int16 v177 = *(_WORD *)&v35[2 * v160];
          __int16 v178 = *(_WORD *)&v35[2 * v159];
          uint32x4_t v179 = vmovl_high_u16(v161);
          __int16 v180 = *(_WORD *)&v35[2 * v162.u32[0]];
          __int16 v181 = *(_WORD *)&v35[2 * v162.u32[1]];
          __int16 v182 = *(_WORD *)&v35[2 * v162.u32[2]];
          __int16 v183 = *(_WORD *)&v35[2 * v162.u32[3]];
          __int16 v184 = *(_WORD *)&v35[2 * v179.u32[0]];
          __int16 v185 = *(_WORD *)&v35[2 * v179.u32[1]];
          __int16 v186 = *(_WORD *)&v35[2 * v179.u32[2]];
          __int16 v187 = *(_WORD *)&v35[2 * v179.u32[3]];
          uint16x8_t v188 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v136, (float16x8_t)0), v72));
          uint32x4_t v189 = vmovl_u16(*(uint16x4_t *)v188.i8);
          uint64_t v190 = v189.u32[1];
          uint32x4_t v191 = vmovl_high_u16(v188);
          uint64_t v192 = v189.u32[0];
          uint64_t v193 = v189.u32[3];
          uint64_t v194 = v189.u32[2];
          uint64_t v195 = v191.u32[1];
          uint64_t v196 = v191.u32[3];
          uint64_t v197 = v191.u32[0];
          uint64_t v198 = v191.u32[2];
          uint16x8_t v199 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v137, (float16x8_t)0), v72));
          uint32x4_t v200 = vmovl_high_u16(v199);
          uint32x4_t v201 = vmovl_u16(*(uint16x4_t *)v199.i8);
          uint64_t v202 = v201.u32[1];
          uint64_t v203 = v201.u32[0];
          uint64_t v204 = v201.u32[3];
          uint64_t v205 = v200.u32[1];
          uint64_t v206 = v201.u32[2];
          uint64_t v207 = v200.u32[0];
          uint64_t result = v200.u32[3];
          uint64_t v208 = v200.u32[2];
          uint16x8_t v209 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v138, (float16x8_t)0), v72));
          uint32x4_t v210 = vmovl_high_u16(v209);
          uint32x4_t v211 = vmovl_u16(*(uint16x4_t *)v209.i8);
          v361.val[0].i16[0] = *(_WORD *)&v35[2 * v192];
          v361.val[0].i16[1] = *(_WORD *)&v35[2 * v190];
          v361.val[0].i16[2] = *(_WORD *)&v35[2 * v194];
          v361.val[0].i16[3] = *(_WORD *)&v35[2 * v193];
          v361.val[0].i16[4] = *(_WORD *)&v35[2 * v197];
          v361.val[0].i16[5] = *(_WORD *)&v35[2 * v195];
          v361.val[0].i16[6] = *(_WORD *)&v35[2 * v198];
          v361.val[0].i16[7] = *(_WORD *)&v35[2 * v196];
          v361.val[1].i16[0] = *(_WORD *)&v35[2 * v203];
          v361.val[1].i16[1] = *(_WORD *)&v35[2 * v202];
          v361.val[1].i16[2] = *(_WORD *)&v35[2 * v206];
          v361.val[1].i16[3] = *(_WORD *)&v35[2 * v204];
          v361.val[1].i16[4] = *(_WORD *)&v35[2 * v207];
          v361.val[1].i16[5] = *(_WORD *)&v35[2 * v205];
          v361.val[1].i16[6] = *(_WORD *)&v35[2 * v208];
          v361.val[1].i16[7] = *(_WORD *)&v35[2 * result];
          v361.val[2].i16[0] = *(_WORD *)&v35[2 * v211.u32[0]];
          v361.val[2].i16[1] = *(_WORD *)&v35[2 * v211.u32[1]];
          v361.val[2].i16[2] = *(_WORD *)&v35[2 * v211.u32[2]];
          v361.val[2].i16[3] = *(_WORD *)&v35[2 * v211.u32[3]];
          v361.val[2].i16[4] = *(_WORD *)&v35[2 * v210.u32[0]];
          v361.val[2].i16[5] = *(_WORD *)&v35[2 * v210.u32[1]];
          v361.val[2].i16[6] = *(_WORD *)&v35[2 * v210.u32[2]];
          v361.val[2].i16[7] = *(_WORD *)&v35[2 * v210.u32[3]];
          vst4q_s16((__int16 *)v61, *(int16x8x4_t *)(&v76 - 3));
          v61 += 64;
          v361.val[3] = (int16x8_t)v76;
          vst4q_s16((__int16 *)v73, v361);
          v73 += 64;
          int v74 = v359 + 8;
        }
        while (v359 + 8 < v332);
        unint64_t v212 = v312;
        unsigned __int8 v213 = v314;
        float v64 = v360;
      }
      if (v357 > v212)
      {
        if (v358) {
          short float v214 = COERCE_SHORT_FLOAT(0);
        }
        else {
          LOWORD(v214) = COERCE_UNSIGNED_INT(1.0);
        }
        do
        {
          float v215 = (float)(v63->u16[1] >> v213) - v32;
          float v216 = *((float *)&v71 + 1) * v215;
          float v217 = _S24 * (float)((float)(v64->u16[0] >> v213) - v31);
          float v218 = (float)(*((float *)&v71 + 1) * v215) + v217;
          float v219 = 8191.0;
          if (v218 <= 8191.0)
          {
            float v219 = (float)(*((float *)&v71 + 1) * v215) + v217;
            if (v218 < 0.0) {
              float v219 = 0.0;
            }
          }
          float v220 = (float)(v63->u16[0] >> v213) - v32;
          float v221 = (float)(v324 * v215) + (float)(v220 * v343);
          float v222 = 8191.0;
          if ((float)(v217 + v221) <= 8191.0)
          {
            float v222 = v217 + v221;
            if ((float)(v217 + v221) < 0.0) {
              float v222 = 0.0;
            }
          }
          float v223 = *(float *)&v71 * v220;
          float v224 = (float)(*(float *)&v71 * v220) + v217;
          float v225 = 8191.0;
          if (v224 <= 8191.0)
          {
            float v225 = v224;
            if (v224 < 0.0) {
              float v225 = 0.0;
            }
          }
          float v226 = _S24 * (float)((float)(v64->u16[1] >> v213) - v31);
          float v227 = 8191.0;
          if ((float)(v216 + v226) <= 8191.0)
          {
            float v227 = v216 + v226;
            if ((float)(v216 + v226) < 0.0) {
              float v227 = 0.0;
            }
          }
          float v228 = 8191.0;
          if ((float)(v221 + v226) <= 8191.0)
          {
            float v228 = v221 + v226;
            if ((float)(v221 + v226) < 0.0) {
              float v228 = 0.0;
            }
          }
          float v229 = v32;
          float v230 = v223 + v226;
          float v231 = 8191.0;
          if (v230 <= 8191.0)
          {
            float v231 = v230;
            if (v230 < 0.0) {
              float v231 = 0.0;
            }
          }
          float v232 = _S24 * (float)((float)(v75->u16[0] >> v213) - v31);
          float v233 = 8191.0;
          if ((float)(v216 + v232) <= 8191.0)
          {
            float v233 = v216 + v232;
            if ((float)(v216 + v232) < 0.0) {
              float v233 = 0.0;
            }
          }
          float v234 = 8191.0;
          if ((float)(v221 + v232) <= 8191.0)
          {
            float v234 = v221 + v232;
            if ((float)(v221 + v232) < 0.0) {
              float v234 = 0.0;
            }
          }
          float v235 = v223 + v232;
          BOOL v236 = (float)(v223 + v232) <= 8191.0;
          float v237 = 8191.0;
          if (v236)
          {
            float v237 = v235;
            if (v235 < 0.0) {
              float v237 = 0.0;
            }
          }
          float v238 = _S24 * (float)((float)(v75->u16[1] >> v213) - v31);
          float v239 = v216 + v238;
          BOOL v236 = (float)(v216 + v238) <= 8191.0;
          float v240 = 8191.0;
          if (v236)
          {
            float v240 = v239;
            if (v239 < 0.0) {
              float v240 = 0.0;
            }
          }
          float v241 = v221 + v238;
          BOOL v236 = (float)(v221 + v238) <= 8191.0;
          float v242 = 8191.0;
          if (v236)
          {
            float v242 = v241;
            if (v241 < 0.0) {
              float v242 = 0.0;
            }
          }
          float v243 = v223 + v238;
          float v244 = 8191.0;
          if (v243 <= 8191.0)
          {
            float v244 = v243;
            if (v243 < 0.0) {
              float v244 = 0.0;
            }
          }
          _H1 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v219, 0.0), 8191.0))];
          __asm { FCVT            S23, H1 }
          _H1 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v222, 0.0), 8191.0))];
          __asm { FCVT            S25, H1 }
          _H1 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0))];
          __asm { FCVT            S26, H1 }
          _H2 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v227, 0.0), 8191.0))];
          _H13 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0))];
          _H3 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v231, 0.0), 8191.0))];
          _H14 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v233, 0.0), 8191.0))];
          _H15 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v234, 0.0), 8191.0))];
          _H1 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v237, 0.0), 8191.0))];
          _H10 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v240, 0.0), 8191.0))];
          _H11 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v242, 0.0), 8191.0))];
          _H12 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v244, 0.0), 8191.0))];
          float v260 = fmaxf(_S23, fmaxf(_S25, _S26));
          float v261 = (float)((float)((float)(v347 * _S25) + (float)(v348 * _S23)) + (float)(v346 * _S26))
               + (float)(v345 * v260);
          float v262 = 8191.0;
          if (v261 <= 8191.0)
          {
            float v262 = (float)((float)((float)(v347 * _S25) + (float)(v348 * _S23)) + (float)(v346 * _S26))
                 + (float)(v345 * v260);
            if (v261 < 0.0) {
              float v262 = 0.0;
            }
          }
          __asm
          {
            FCVT            S0, H2
            FCVT            S27, H13
            FCVT            S29, H3
          }
          _H13 = *(_WORD *)&v30[2 * llroundf(v262)];
          float v267 = (float)((float)((float)(v347 * _S27) + (float)(v348 * _S0)) + (float)(v346 * _S29))
               + (float)(v345 * fmaxf(_S0, fmaxf(_S27, _S29)));
          float v268 = 8191.0;
          if (v267 <= 8191.0)
          {
            float v268 = v267;
            if (v267 < 0.0) {
              float v268 = 0.0;
            }
          }
          __asm
          {
            FCVT            S14, H14
            FCVT            S15, H15
            FCVT            S1, H1
          }
          _H2 = *(_WORD *)&v30[2 * llroundf(v268)];
          float v273 = fmaxf(_S14, fmaxf(_S15, _S1));
          float v274 = (float)((float)((float)(v347 * _S15) + (float)(v348 * _S14)) + (float)(v346 * _S1))
               + (float)(v345 * v273);
          float v275 = 8191.0;
          if (v274 <= 8191.0)
          {
            float v275 = (float)((float)((float)(v347 * _S15) + (float)(v348 * _S14)) + (float)(v346 * _S1))
                 + (float)(v345 * v273);
            if (v274 < 0.0) {
              float v275 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H10
            FCVT            S10, H11
            FCVT            S11, H12
          }
          _H12 = *(_WORD *)&v30[2 * llroundf(v275)];
          float v280 = fmaxf(_S3, fmaxf(_S10, _S11));
          float v281 = (float)((float)((float)(v347 * _S10) + (float)(v348 * _S3)) + (float)(v346 * _S11))
               + (float)(v345 * v280);
          float v282 = 8191.0;
          if (v281 <= 8191.0)
          {
            float v282 = (float)((float)((float)(v347 * _S10) + (float)(v348 * _S3)) + (float)(v346 * _S11))
                 + (float)(v345 * v280);
            if (v281 < 0.0) {
              float v282 = 0.0;
            }
          }
          __asm { FCVT            S16, H13 }
          float v284 = _S23 * _S16;
          float v285 = _S25 * _S16;
          float v286 = _S26 * _S16;
          __asm { FCVT            S2, H2 }
          float v288 = _S0 * _S2;
          float v289 = _S27 * _S2;
          float v290 = _S29 * _S2;
          __asm { FCVT            S21, H12 }
          float v292 = _S14 * _S21;
          float v293 = _S15 * _S21;
          float v294 = _S1 * _S21;
          _H4 = *(_WORD *)&v30[2 * llroundf(v282)];
          __asm { FCVT            S4, H4 }
          float v297 = _S3 * _S4;
          float v298 = _S10 * _S4;
          float v299 = _S11 * _S4;
          float v300 = (float)((float)(v355 * v285) + (float)(v284 * v356)) + (float)(v286 * v354);
          float v301 = (float)((float)(v352 * v285) + (float)(v284 * v353)) + (float)(v286 * v351);
          float v302 = (float)((float)(v349 * v285) + (float)(v284 * v350)) + (float)(v286 * _S6);
          float v303 = (float)((float)(v355 * v289) + (float)(v288 * v356)) + (float)(v290 * v354);
          float v304 = (float)((float)(v352 * v289) + (float)(v288 * v353)) + (float)(v290 * v351);
          float v305 = (float)((float)(v349 * v289) + (float)(v288 * v350)) + (float)(v290 * _S6);
          float v306 = (float)((float)(v355 * v293) + (float)(v292 * v356)) + (float)(v294 * v354);
          float v307 = (float)((float)(v352 * v293) + (float)(v292 * v353)) + (float)(v294 * v351);
          float v308 = (float)((float)(v349 * v293) + (float)(v292 * v350)) + (float)(v294 * _S6);
          float v309 = (float)((float)(v355 * v298) + (float)(v297 * v356)) + (float)(v299 * v354);
          float v310 = (float)((float)(v352 * v298) + (float)(v297 * v353)) + (float)(v299 * v351);
          float v311 = (float)((float)(v349 * v298) + (float)(v297 * v350)) + (float)(v299 * _S6);
          LOWORD(v299) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v301, 0.0), 8191.0))];
          LOWORD(v302) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v302, 0.0), 8191.0))];
          LOWORD(v303) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v303, 0.0), 8191.0))];
          LOWORD(v304) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v304, 0.0), 8191.0))];
          LOWORD(v305) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v305, 0.0), 8191.0))];
          LOWORD(v306) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v306, 0.0), 8191.0))];
          LOWORD(v307) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v307, 0.0), 8191.0))];
          LOWORD(v308) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v308, 0.0), 8191.0))];
          LOWORD(v309) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v309, 0.0), 8191.0))];
          LOWORD(v310) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v310, 0.0), 8191.0))];
          LOWORD(v311) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v311, 0.0), 8191.0))];
          *(_WORD *)uint64_t v61 = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v300, 0.0), 8191.0))];
          *(_WORD *)(v61 + 2) = LOWORD(v299);
          *(_WORD *)(v61 + 4) = LOWORD(v302);
          *(short float *)(v61 + 6) = v214;
          *(_WORD *)(v61 + 8) = LOWORD(v303);
          *(_WORD *)(v61 + 10) = LOWORD(v304);
          *(_WORD *)(v61 + 12) = LOWORD(v305);
          *(short float *)(v61 + 14) = v214;
          *(_WORD *)uint64_t v73 = LOWORD(v306);
          *(_WORD *)(v73 + 2) = LOWORD(v307);
          *(_WORD *)(v73 + 4) = LOWORD(v308);
          *(short float *)(v73 + 6) = v214;
          *(_WORD *)(v73 + 8) = LOWORD(v309);
          *(_WORD *)(v73 + 10) = LOWORD(v310);
          v212 += 2;
          float v63 = (uint16x8_t *)((char *)v63 + 4);
          float v64 = (uint16x8_t *)((char *)v64 + 4);
          *(_WORD *)(v73 + 12) = LOWORD(v311);
          *(short float *)(v73 + 14) = v214;
          float v75 = (uint16x8_t *)((char *)v75 + 4);
          v61 += 16;
          v73 += 16;
          float v32 = v229;
        }
        while (v357 > v212);
      }
      uint64_t v21 = v316;
      uint64_t v19 = v319;
      float v64 = (uint16x8_t *)&v320[v319];
      float v63 = (uint16x8_t *)((char *)v322 + v318);
      v358 += v317 + v317;
      uint64_t v61 = v321 + v316;
      uint64_t v10 = v323 + 2;
    }
    while (v315 > v323 + 2);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    float v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    float v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v22 = (float)LODWORD(a5);
    float v23 = v20 * *(float *)v13;
    float v157 = v20 * *(float *)(v13 + 16);
    float v158 = v20 * *(float *)(v13 + 8);
    float v155 = v20 * *(float *)(v13 + 28);
    float v156 = v20 * *(float *)(v13 + 20);
    float v24 = *(float *)(v13 + 80);
    float v153 = *(float *)(v13 + 76);
    float v154 = *(float *)(v13 + 72);
    float v25 = *(float *)(v13 + 84);
    float v26 = *(float *)(v13 + 88);
    float v27 = *(float *)(v13 + 92);
    float v28 = *(float *)(v13 + 96);
    float v29 = *(float *)(v13 + 100);
    float v30 = *(float *)(v13 + 104);
    uint64_t v31 = v13 + 164;
    uint64_t v32 = v13 + 16548;
    uint64_t v33 = v13 + 32932;
    float v34 = *(float *)(v13 + 108);
    float v35 = *(float *)(v13 + 112);
    float v36 = *(float *)(v13 + 116);
    float v37 = *(float *)(v13 + 120);
    uint64_t v38 = *((void *)result + 14);
    uint64_t v39 = (void *)*((void *)result + 16);
    uint64_t v40 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v41 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(*v14 + v16 * v11 + 2 * v41);
    uint64_t v42 = v14[2];
    _ZF = v42 == 0;
    uint64_t v44 = v42 + v18 * v11 + 2 * v41;
    if (_ZF) {
      uint64_t v44 = 0;
    }
    uint64_t v45 = *v39 + v40 * v19 + 8 * v38;
    unsigned int v46 = *(unsigned __int8 *)(v13 + 124);
    if (v46 >= 0x11) {
      char v47 = 0;
    }
    else {
      char v47 = 16 - v46;
    }
    uint64_t v48 = v14[1] + v17 * (v11 / 2) + 2 * v41;
    float v160 = (float)LODWORD(a5);
    float v161 = v21;
    float v159 = v23;
    do
    {
      uint64_t v49 = v45 + v19;
      uint64_t v50 = &result[v16];
      if (v10)
      {
        unint64_t v51 = 0;
        if (v44) {
          short float v52 = COERCE_SHORT_FLOAT(0);
        }
        else {
          LOWORD(v52) = COERCE_UNSIGNED_INT(1.0);
        }
        uint64_t v53 = &result[v16];
        uint64_t v54 = v45 + v19;
        do
        {
          uint64_t v55 = (unsigned __int16 *)(v48 + 2 * v51);
          float v56 = (float)(v55[1] >> v47) - v22;
          float v57 = v158 * v56;
          float v58 = v23 * (float)((float)(*(unsigned __int16 *)result >> v47) - v21);
          float v59 = (float)(v158 * v56) + v58;
          float v60 = 8191.0;
          if (v59 <= 8191.0)
          {
            float v60 = (float)(v158 * v56) + v58;
            if (v59 < 0.0) {
              float v60 = 0.0;
            }
          }
          float v61 = (float)(*v55 >> v47) - v22;
          float v62 = (float)(v156 * v56) + (float)(v61 * v157);
          float v63 = 8191.0;
          if ((float)(v58 + v62) <= 8191.0)
          {
            float v63 = v58 + v62;
            if ((float)(v58 + v62) < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = v155 * v61;
          float v65 = (float)(v155 * v61) + v58;
          float v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            float v66 = v65;
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v23 * (float)((float)(*((unsigned __int16 *)result + 1) >> v47) - v21);
          float v68 = 8191.0;
          if ((float)(v57 + v67) <= 8191.0)
          {
            float v68 = v57 + v67;
            if ((float)(v57 + v67) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = 8191.0;
          if ((float)(v62 + v67) <= 8191.0)
          {
            float v69 = v62 + v67;
            if ((float)(v62 + v67) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v64 + v67;
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v23 * (float)((float)(*(unsigned __int16 *)v53 >> v47) - v21);
          float v73 = 8191.0;
          if ((float)(v57 + v72) <= 8191.0)
          {
            float v73 = v57 + v72;
            if ((float)(v57 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = 8191.0;
          if ((float)(v62 + v72) <= 8191.0)
          {
            float v74 = v62 + v72;
            if ((float)(v62 + v72) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v64 + v72;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v23 * (float)((float)(*((unsigned __int16 *)v53 + 1) >> v47) - v21);
          float v78 = v57 + v77;
          BOOL v79 = (float)(v57 + v77) <= 8191.0;
          float v80 = 8191.0;
          if (v79)
          {
            float v80 = v78;
            if (v78 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v62 + v77;
          BOOL v79 = (float)(v62 + v77) <= 8191.0;
          float v82 = 8191.0;
          if (v79)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v64 + v77;
          BOOL v79 = (float)(v64 + v77) <= 8191.0;
          float v84 = 8191.0;
          if (v79)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          __asm { FCVT            S9, H2 }
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S10, H2 }
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S11, H2 }
          _H3 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H16 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          float v103 = (float)((float)((float)(v35 * _S10) + (float)(v34 * _S9)) + (float)(v36 * _S11))
               + (float)(v37 * fmaxf(_S9, fmaxf(_S10, _S11)));
          float v104 = 8191.0;
          if (v103 <= 8191.0)
          {
            float v104 = v103;
            if (v103 < 0.0) {
              float v104 = 0.0;
            }
          }
          __asm
          {
            FCVT            S4, H3
            FCVT            S5, H16
            FCVT            S6, H17
          }
          _H12 = *(_WORD *)(v32 + 2 * llroundf(v104));
          float v109 = (float)((float)((float)(v35 * _S5) + (float)(v34 * _S4)) + (float)(v36 * _S6))
               + (float)(v37 * fmaxf(_S4, fmaxf(_S5, _S6)));
          float v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            float v110 = v109;
            if (v109 < 0.0) {
              float v110 = 0.0;
            }
          }
          __asm
          {
            FCVT            S14, H15
            FCVT            S15, H7
            FCVT            S7, H2
          }
          _H1 = *(_WORD *)(v32 + 2 * llroundf(v110));
          float v115 = fmaxf(_S14, fmaxf(_S15, _S7));
          float v116 = (float)((float)((float)(v35 * _S15) + (float)(v34 * _S14)) + (float)(v36 * _S7)) + (float)(v37 * v115);
          float v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            float v117 = (float)((float)((float)(v35 * _S15) + (float)(v34 * _S14)) + (float)(v36 * _S7))
                 + (float)(v37 * v115);
            if (v116 < 0.0) {
              float v117 = 0.0;
            }
          }
          __asm
          {
            FCVT            S2, H29
            FCVT            S3, H30
            FCVT            S16, H13
          }
          _H17 = *(_WORD *)(v32 + 2 * llroundf(v117));
          float v122 = (float)((float)((float)(v35 * _S3) + (float)(v34 * _S2)) + (float)(v36 * _S16))
               + (float)(v37 * fmaxf(_S2, fmaxf(_S3, _S16)));
          float v123 = 8191.0;
          if (v122 <= 8191.0)
          {
            float v123 = v122;
            if (v122 < 0.0) {
              float v123 = 0.0;
            }
          }
          __asm { FCVT            S30, H12 }
          float v125 = _S9 * _S30;
          float v126 = _S10 * _S30;
          float v127 = _S11 * _S30;
          __asm { FCVT            S1, H1 }
          float v129 = _S4 * _S1;
          float v130 = _S5 * _S1;
          float v131 = _S6 * _S1;
          __asm { FCVT            S6, H17 }
          float v133 = _S14 * _S6;
          float v134 = _S15 * _S6;
          float v135 = _S7 * _S6;
          _H7 = *(_WORD *)(v32 + 2 * llroundf(v123));
          __asm { FCVT            S7, H7 }
          float v138 = _S2 * _S7;
          float v139 = _S3 * _S7;
          float v140 = _S16 * _S7;
          float v141 = (float)((float)(v153 * v126) + (float)(v125 * v154)) + (float)(v127 * v24);
          float v142 = (float)((float)(v26 * v126) + (float)(v125 * v25)) + (float)(v127 * v27);
          float v143 = (float)((float)(v29 * v126) + (float)(v125 * v28)) + (float)(v127 * v30);
          float v144 = (float)((float)(v153 * v130) + (float)(v129 * v154)) + (float)(v131 * v24);
          float v145 = (float)((float)(v26 * v130) + (float)(v129 * v25)) + (float)(v131 * v27);
          float v146 = (float)((float)(v29 * v130) + (float)(v129 * v28)) + (float)(v131 * v30);
          float v147 = (float)((float)(v153 * v134) + (float)(v133 * v154)) + (float)(v135 * v24);
          float v148 = (float)((float)(v26 * v134) + (float)(v133 * v25)) + (float)(v135 * v27);
          float v149 = (float)((float)(v29 * v134) + (float)(v133 * v28)) + (float)(v135 * v30);
          float v150 = (float)((float)(v153 * v139) + (float)(v138 * v154)) + (float)(v140 * v24);
          float v151 = (float)((float)(v26 * v139) + (float)(v138 * v25)) + (float)(v140 * v27);
          float v152 = (float)((float)(v29 * v139) + (float)(v138 * v28)) + (float)(v140 * v30);
          LOWORD(v139) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          LOWORD(v140) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          LOWORD(v142) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          LOWORD(v143) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          LOWORD(v146) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          LOWORD(v147) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          LOWORD(v148) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          LOWORD(v149) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          LOWORD(v150) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          LOWORD(v144) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          LOWORD(v152) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          *(_WORD *)uint64_t v45 = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          *(_WORD *)(v45 + 2) = LOWORD(v139);
          *(_WORD *)(v45 + 4) = LOWORD(v140);
          *(short float *)(v45 + 6) = v52;
          *(_WORD *)(v45 + 8) = LOWORD(v142);
          *(_WORD *)(v45 + 10) = LOWORD(v143);
          *(_WORD *)(v45 + 12) = LOWORD(v146);
          *(short float *)(v45 + 14) = v52;
          *(_WORD *)uint64_t v54 = LOWORD(v147);
          *(_WORD *)(v54 + 2) = LOWORD(v148);
          *(_WORD *)(v54 + 4) = LOWORD(v149);
          *(short float *)(v54 + 6) = v52;
          result += 4;
          v53 += 4;
          v45 += 16;
          *(_WORD *)(v54 + 8) = LOWORD(v150);
          *(_WORD *)(v54 + 10) = LOWORD(v144);
          *(_WORD *)(v54 + 12) = LOWORD(v152);
          *(short float *)(v54 + 14) = v52;
          v54 += 16;
          v51 += 2;
          float v22 = v160;
          float v21 = v161;
          float v23 = v159;
        }
        while (v10 > v51);
      }
      uint64_t result = &v50[v16];
      v48 += v17;
      v44 += v18 + v18;
      uint64_t v45 = v49 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_RGhA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, int16x4_t a3, double a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44);
    uint64_t v13 = v12 + 2 * v8;
    uint64_t v14 = v12 + 2 * v9;
    uint64_t v15 = (float32x2_t *)*((void *)result + 19);
    uint64_t v16 = (uint64_t *)*((void *)result + 7);
    uint64_t v17 = (uint64_t *)*((void *)result + 8);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = **((void **)result + 17);
    unsigned int v22 = v15[17].u16[2];
    unsigned int v23 = v15[17].u16[3];
    a3.i32[0] = v15->i32[0];
    v24.i32[0] = v15[3].i32[1];
    _S28 = v15[11].f32[1];
    _S6 = v15[12].f32[0];
    _S7 = v15[12].f32[1];
    _S16 = v15[13].f32[0];
    unint64_t v29 = v14 - v13;
    uint64_t v30 = (char *)&v15[20] + 4;
    a5.f32[0] = 8191.0 / (float)v15[16].u32[0];
    float v31 = (float)v22;
    float v237 = (float)v23;
    _S20 = a5.f32[0] * v15->f32[0];
    uint64_t v33 = (char *)&v15[2068] + 4;
    *(short float *)a3.i16 = (short float)v22;
    float16x8_t v236 = (float16x8_t)vdupq_lane_s16(a3, 0);
    __asm { FCVT            H8, S20 }
    short float v39 = -(short float)v23;
    v24.i32[1] = v15[1].i32[0];
    *(float32x2_t *)a6.f32 = vmul_n_f32(v24, a5.f32[0]);
    *(float32x2_t *)a5.f32 = vmul_n_f32(v15[2], a5.f32[0]);
    float16x8_t v234 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    float16x8_t v231 = vmulq_n_f16(v234, v39);
    float16x8_t v232 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v230 = vmulq_n_f16(v232, v39);
    float v225 = v15[9].f32[0];
    __asm { FCVT            H0, S21 }
    short float v229 = _H0;
    float v223 = v15[9].f32[1];
    __asm { FCVT            H0, S22 }
    short float v228 = _H0;
    float v221 = v15[10].f32[0];
    __asm { FCVT            H0, S23 }
    short float v227 = _H0;
    float v218 = v15[10].f32[1];
    __asm { FCVT            H0, S4 }
    short float v226 = _H0;
    float v216 = v15[11].f32[0];
    __asm { FCVT            H0, S5 }
    short float v224 = _H0;
    __asm { FCVT            H0, S28 }
    short float v222 = _H0;
    __asm { FCVT            H0, S6 }
    short float v220 = _H0;
    __asm { FCVT            H0, S7 }
    short float v219 = _H0;
    __asm { FCVT            H0, S16 }
    short float v217 = _H0;
    unsigned int v49 = v15[15].u8[4];
    uint64_t v51 = v16[1];
    uint64_t v50 = v16[2];
    if (v13 >= 0) {
      uint64_t v52 = v13;
    }
    else {
      uint64_t v52 = v13 + 1;
    }
    uint64_t v53 = *v16;
    uint64_t v54 = v51 + v19 * (v52 >> 1);
    uint64_t v55 = *((void *)result + 14);
    float v56 = (void *)*((void *)result + 16);
    uint64_t v57 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7);
    uint64_t v58 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(v50 + v20 * v13 + 2 * v58);
    if (v49 >= 0x11) {
      unsigned __int8 v59 = 0;
    }
    else {
      unsigned __int8 v59 = 16 - v49;
    }
    uint64_t v60 = *v56 + v21 * v57 + 8 * v55;
    if (!v50) {
      uint64_t result = 0;
    }
    float v61 = (uint16x8_t *)(v54 + 2 * v58);
    int16x8_t v63 = vdupq_n_s16(-v59);
    uint16x8_t v215 = (uint16x8_t)v63;
    float v233 = a5.f32[0];
    float v62 = (uint16x8_t *)(v53 + v18 * v13 + 2 * v58);
    v63.i32[0] = a6.i32[1];
    float v213 = a6.f32[1];
    float v235 = a6.f32[0];
    float v214 = a5.f32[1];
    v64.i64[0] = 0x9000900090009000;
    v64.i64[1] = 0x9000900090009000;
    do
    {
      float v65 = &v62->i8[v18];
      uint64_t v66 = v60 + v21;
      if ((int)v11 < 8)
      {
        unint64_t v147 = 0;
        uint64_t v70 = v60 + v21;
        float v69 = v61;
        float v68 = (uint16x8_t *)((char *)v62 + v18);
      }
      else
      {
        int v67 = 0;
        float v68 = (uint16x8_t *)((char *)v62 + v18);
        float v69 = v61;
        uint64_t v70 = v60 + v21;
        do
        {
          if (result)
          {
            float16x8_t v71 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)0), (float32x4_t)0);
          }
          else
          {
            v71.i64[0] = 0x3C003C003C003C00;
            v71.i64[1] = 0x3C003C003C003C00;
          }
          uint16x8_t v72 = *v69++;
          float16x8_t v73 = vcvtq_f16_u16(vshlq_u16(v72, v215));
          int16x8_t v74 = (int16x8_t)vmlaq_f16(v231, v234, v73);
          int8x16_t v75 = (int8x16_t)vmlaq_f16(v230, v232, v73);
          v73.i64[0] = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
          *(int16x4_t *)v76.i8 = vuzp1_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v73.i8);
          *(int16x4_t *)v73.i8 = vuzp2_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v73.i8);
          v73.i64[1] = v63.i64[0];
          float16x8_t v77 = (float16x8_t)vzip1q_s16((int16x8_t)v73, (int16x8_t)v73);
          v76.i64[1] = v63.i64[0];
          float16x8_t v78 = (float16x8_t)vzip1q_s16(v76, v76);
          v74.i64[0] = vextq_s8(v75, v75, 8uLL).u64[0];
          *(float16x4_t *)v74.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v75.i8, *(int16x4_t *)v74.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v75.i8, *(int16x4_t *)v74.i8));
          v74.i64[1] = v63.i64[0];
          float16x8_t v79 = (float16x8_t)vzip1q_s16(v74, v74);
          uint16x8_t v80 = *v62++;
          float16x8_t v81 = vcvtq_f16_u16(vshlq_u16(v80, v215));
          uint16x8_t v82 = *v68++;
          float16x8_t v83 = vsubq_f16(v81, v236);
          float16x8_t v84 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v82, v215)), v236);
          float16x8_t v85 = vmlaq_n_f16(v79, v83, _H8);
          float16x8_t v86 = vmlaq_n_f16(v78, v83, _H8);
          uint16x8_t v87 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v77, v83, _H8), (float16x8_t)0), v64));
          uint32x4_t v88 = vmovl_high_u16(v87);
          uint32x4_t v89 = vmovl_u16(*(uint16x4_t *)v87.i8);
          v90.i16[0] = *(_WORD *)&v30[2 * v89.u32[0]];
          v90.i16[1] = *(_WORD *)&v30[2 * v89.u32[1]];
          v90.i16[2] = *(_WORD *)&v30[2 * v89.u32[2]];
          v90.i16[3] = *(_WORD *)&v30[2 * v89.u32[3]];
          v90.i16[4] = *(_WORD *)&v30[2 * v88.u32[0]];
          v90.i16[5] = *(_WORD *)&v30[2 * v88.u32[1]];
          v90.i16[6] = *(_WORD *)&v30[2 * v88.u32[2]];
          v90.i16[7] = *(_WORD *)&v30[2 * v88.u32[3]];
          uint16x8_t v91 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v85, (float16x8_t)0), v64));
          uint32x4_t v92 = vmovl_high_u16(v91);
          float16x8_t v93 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v91.i8);
          v93.i16[0] = *(_WORD *)&v30[2 * v93.u32[0]];
          v93.i16[1] = *(_WORD *)&v30[2 * v93.u32[1]];
          v93.i16[2] = *(_WORD *)&v30[2 * v93.u32[2]];
          v93.i16[3] = *(_WORD *)&v30[2 * v93.u32[3]];
          v93.i16[4] = *(_WORD *)&v30[2 * v92.u32[0]];
          v93.i16[5] = *(_WORD *)&v30[2 * v92.u32[1]];
          v93.i16[6] = *(_WORD *)&v30[2 * v92.u32[2]];
          v93.i16[7] = *(_WORD *)&v30[2 * v92.u32[3]];
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v86, (float16x8_t)0), v64));
          uint32x4_t v95 = vmovl_high_u16(v94);
          uint32x4_t v96 = vmovl_u16(*(uint16x4_t *)v94.i8);
          v97.i16[0] = *(_WORD *)&v30[2 * v96.u32[0]];
          v97.i16[1] = *(_WORD *)&v30[2 * v96.u32[1]];
          v97.i16[2] = *(_WORD *)&v30[2 * v96.u32[2]];
          v97.i16[3] = *(_WORD *)&v30[2 * v96.u32[3]];
          v97.i16[4] = *(_WORD *)&v30[2 * v95.u32[0]];
          v97.i16[5] = *(_WORD *)&v30[2 * v95.u32[1]];
          v97.i16[6] = *(_WORD *)&v30[2 * v95.u32[2]];
          v97.i16[7] = *(_WORD *)&v30[2 * v95.u32[3]];
          uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v77, v84, _H8), (float16x8_t)0), v64));
          uint32x4_t v99 = vmovl_high_u16(v98);
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v98.i8);
          v77.i16[0] = *(_WORD *)&v30[2 * v100.u32[0]];
          v77.i16[1] = *(_WORD *)&v30[2 * v100.u32[1]];
          v77.i16[2] = *(_WORD *)&v30[2 * v100.u32[2]];
          v77.i16[3] = *(_WORD *)&v30[2 * v100.u32[3]];
          v77.i16[4] = *(_WORD *)&v30[2 * v99.u32[0]];
          v77.i16[5] = *(_WORD *)&v30[2 * v99.u32[1]];
          v77.i16[6] = *(_WORD *)&v30[2 * v99.u32[2]];
          v77.i16[7] = *(_WORD *)&v30[2 * v99.u32[3]];
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v79, v84, _H8), (float16x8_t)0), v64));
          float16x8_t v102 = (float16x8_t)vmovl_high_u16(v101);
          *(void *)&long long v103 = v102.u32[2];
          *((void *)&v103 + 1) = v102.u32[3];
          long long v104 = v103;
          *(void *)&long long v103 = v102.u32[0];
          *((void *)&v103 + 1) = v102.u32[1];
          uint32x4_t v105 = vmovl_u16(*(uint16x4_t *)v101.i8);
          v102.i16[0] = *(_WORD *)&v30[2 * v105.u32[0]];
          v102.i16[1] = *(_WORD *)&v30[2 * v105.u32[1]];
          v102.i16[2] = *(_WORD *)&v30[2 * v105.u32[2]];
          v102.i16[3] = *(_WORD *)&v30[2 * v105.u32[3]];
          v102.i16[4] = *(_WORD *)&v30[2 * v103];
          v102.i16[5] = *(_WORD *)&v30[2 * *((void *)&v103 + 1)];
          v102.i16[6] = *(_WORD *)&v30[2 * v104];
          v102.i16[7] = *(_WORD *)&v30[2 * *((void *)&v104 + 1)];
          uint16x8_t v106 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v78, v84, _H8), (float16x8_t)0), v64));
          uint32x4_t v107 = vmovl_high_u16(v106);
          float16x8_t v108 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v106.i8);
          v108.i16[0] = *(_WORD *)&v30[2 * v108.u32[0]];
          v108.i16[1] = *(_WORD *)&v30[2 * v108.u32[1]];
          v108.i16[2] = *(_WORD *)&v30[2 * v108.u32[2]];
          v108.i16[3] = *(_WORD *)&v30[2 * v108.u32[3]];
          v108.i16[4] = *(_WORD *)&v30[2 * v107.u32[0]];
          v108.i16[5] = *(_WORD *)&v30[2 * v107.u32[1]];
          v108.i16[6] = *(_WORD *)&v30[2 * v107.u32[2]];
          v108.i16[7] = *(_WORD *)&v30[2 * v107.u32[3]];
          float16x8_t v109 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v90, v229), v93, v228), v97, v227);
          float16x8_t v110 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v90, v226), v93, v224), v97, v222);
          float16x8_t v111 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v97, v217), v93, v219), v90, v220);
          float16x8_t v112 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v77, v229), v102, v228), v108, v227);
          float16x8_t v113 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v77, v226), v102, v224), v108, v222);
          float16x8_t v114 = vmlaq_n_f16(vmulq_n_f16(v108, v217), v102, v219);
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v109, (float16x8_t)0), v64));
          uint32x4_t v116 = vmovl_high_u16(v115);
          uint32x4_t v117 = vmovl_u16(*(uint16x4_t *)v115.i8);
          v63.i16[0] = *(_WORD *)&v33[2 * v117.u32[0]];
          v63.i16[1] = *(_WORD *)&v33[2 * v117.u32[1]];
          v63.i16[2] = *(_WORD *)&v33[2 * v117.u32[2]];
          v63.i16[3] = *(_WORD *)&v33[2 * v117.u32[3]];
          v63.i16[4] = *(_WORD *)&v33[2 * v116.u32[0]];
          v63.i16[5] = *(_WORD *)&v33[2 * v116.u32[1]];
          v63.i16[6] = *(_WORD *)&v33[2 * v116.u32[2]];
          v63.i16[7] = *(_WORD *)&v33[2 * v116.u32[3]];
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v110, (float16x8_t)0), v64));
          v238.val[2] = (int16x8_t)vmovl_high_u16(v118);
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v118.i8);
          __int16 v120 = *(_WORD *)&v33[2 * v119.u32[0]];
          __int16 v121 = *(_WORD *)&v33[2 * v119.u32[1]];
          __int16 v122 = *(_WORD *)&v33[2 * v119.u32[2]];
          __int16 v123 = *(_WORD *)&v33[2 * v119.u32[3]];
          __int16 v124 = *(_WORD *)&v33[2 * v238.val[2].u32[0]];
          __int16 v125 = *(_WORD *)&v33[2 * v238.val[2].u32[1]];
          __int16 v126 = *(_WORD *)&v33[2 * v238.val[2].u32[2]];
          __int16 v127 = *(_WORD *)&v33[2 * v238.val[2].u32[3]];
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, (float16x8_t)0), v64));
          uint32x4_t v129 = vmovl_high_u16(v128);
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v128.i8);
          __int16 v131 = *(_WORD *)&v33[2 * v130.u32[0]];
          __int16 v132 = *(_WORD *)&v33[2 * v130.u32[1]];
          __int16 v133 = *(_WORD *)&v33[2 * v130.u32[2]];
          __int16 v134 = *(_WORD *)&v33[2 * v130.u32[3]];
          __int16 v135 = *(_WORD *)&v33[2 * v129.u32[0]];
          __int16 v136 = *(_WORD *)&v33[2 * v129.u32[1]];
          __int16 v137 = *(_WORD *)&v33[2 * v129.u32[2]];
          __int16 v138 = *(_WORD *)&v33[2 * v129.u32[3]];
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, (float16x8_t)0), v64));
          v238.val[1] = (int16x8_t)vmovl_high_u16(v139);
          v238.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v139.i8);
          v238.val[0].i16[0] = *(_WORD *)&v33[2 * v238.val[0].u32[0]];
          v238.val[0].i16[1] = *(_WORD *)&v33[2 * v238.val[0].u32[1]];
          v238.val[0].i16[2] = *(_WORD *)&v33[2 * v238.val[0].u32[2]];
          v238.val[0].i16[3] = *(_WORD *)&v33[2 * v238.val[0].u32[3]];
          v238.val[0].i16[4] = *(_WORD *)&v33[2 * v238.val[1].u32[0]];
          v238.val[0].i16[5] = *(_WORD *)&v33[2 * v238.val[1].u32[1]];
          v238.val[0].i16[6] = *(_WORD *)&v33[2 * v238.val[1].u32[2]];
          v238.val[0].i16[7] = *(_WORD *)&v33[2 * v238.val[1].u32[3]];
          float16x8_t v140 = vmlaq_n_f16(v114, v77, v220);
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v64));
          uint32x4_t v142 = vmovl_high_u16(v141);
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v141.i8);
          v238.val[1].i16[0] = *(_WORD *)&v33[2 * v143.u32[0]];
          v238.val[1].i16[1] = *(_WORD *)&v33[2 * v143.u32[1]];
          v238.val[1].i16[2] = *(_WORD *)&v33[2 * v143.u32[2]];
          v238.val[1].i16[3] = *(_WORD *)&v33[2 * v143.u32[3]];
          v238.val[1].i16[4] = *(_WORD *)&v33[2 * v142.u32[0]];
          v238.val[1].i16[5] = *(_WORD *)&v33[2 * v142.u32[1]];
          v238.val[1].i16[6] = *(_WORD *)&v33[2 * v142.u32[2]];
          v238.val[1].i16[7] = *(_WORD *)&v33[2 * v142.u32[3]];
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v140, (float16x8_t)0), v64));
          uint32x4_t v145 = vmovl_high_u16(v144);
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v144.i8);
          v238.val[2].i16[0] = *(_WORD *)&v33[2 * v146.u32[0]];
          v238.val[2].i16[1] = *(_WORD *)&v33[2 * v146.u32[1]];
          v238.val[2].i16[2] = *(_WORD *)&v33[2 * v146.u32[2]];
          v238.val[2].i16[3] = *(_WORD *)&v33[2 * v146.u32[3]];
          v238.val[2].i16[4] = *(_WORD *)&v33[2 * v145.u32[0]];
          v238.val[2].i16[5] = *(_WORD *)&v33[2 * v145.u32[1]];
          v238.val[2].i16[6] = *(_WORD *)&v33[2 * v145.u32[2]];
          v238.val[2].i16[7] = *(_WORD *)&v33[2 * v145.u32[3]];
          vst4q_s16((__int16 *)v60, *(int16x8x4_t *)v63.i8);
          v60 += 64;
          v238.val[3] = (int16x8_t)v71;
          vst4q_s16((__int16 *)v70, v238);
          v70 += 64;
          v67 += 8;
        }
        while (v67 < (int)v11 - 7);
        unint64_t v147 = v11 & 0xFFFFFFF8;
      }
      if (v11 > v147)
      {
        v63.i32[1] = 0;
        if (result) {
          short float v148 = COERCE_SHORT_FLOAT(0);
        }
        else {
          LOWORD(v148) = COERCE_UNSIGNED_INT(1.0);
        }
        do
        {
          float v149 = (float)(v69->u16[1] >> v59) - v237;
          float v150 = v213 * v149;
          float v151 = _S20 * (float)((float)(v62->u16[0] >> v59) - v31);
          float v152 = (float)(v213 * v149) + v151;
          float v153 = 8191.0;
          if (v152 <= 8191.0)
          {
            float v153 = (float)(v213 * v149) + v151;
            if (v152 < 0.0) {
              float v153 = 0.0;
            }
          }
          float v154 = (float)(v69->u16[0] >> v59) - v237;
          float v155 = (float)(v214 * v149) + (float)(v154 * v233);
          float v156 = 8191.0;
          if ((float)(v151 + v155) <= 8191.0)
          {
            float v156 = v151 + v155;
            if ((float)(v151 + v155) < 0.0) {
              float v156 = 0.0;
            }
          }
          float v157 = v235 * v154;
          float v158 = (float)(v235 * v154) + v151;
          float v159 = 8191.0;
          if (v158 <= 8191.0)
          {
            float v159 = v158;
            if (v158 < 0.0) {
              float v159 = 0.0;
            }
          }
          float v160 = _S20 * (float)((float)(v62->u16[1] >> v59) - v31);
          float v161 = 8191.0;
          if ((float)(v150 + v160) <= 8191.0)
          {
            float v161 = v150 + v160;
            if ((float)(v150 + v160) < 0.0) {
              float v161 = 0.0;
            }
          }
          float v162 = 8191.0;
          if ((float)(v155 + v160) <= 8191.0)
          {
            float v162 = v155 + v160;
            if ((float)(v155 + v160) < 0.0) {
              float v162 = 0.0;
            }
          }
          float v163 = v157 + v160;
          float v164 = 8191.0;
          if (v163 <= 8191.0)
          {
            float v164 = v163;
            if (v163 < 0.0) {
              float v164 = 0.0;
            }
          }
          float v165 = _S20 * (float)((float)(v68->u16[0] >> v59) - v31);
          v63.i32[0] = 1174403072;
          if ((float)(v150 + v165) <= 8191.0)
          {
            *(float *)v63.i32 = v150 + v165;
            if ((float)(v150 + v165) < 0.0) {
              v63.i64[0] = 0;
            }
          }
          float v166 = 8191.0;
          if ((float)(v155 + v165) <= 8191.0)
          {
            float v166 = v155 + v165;
            if ((float)(v155 + v165) < 0.0) {
              float v166 = 0.0;
            }
          }
          float v167 = v157 + v165;
          BOOL v168 = (float)(v157 + v165) <= 8191.0;
          float v169 = 8191.0;
          if (v168)
          {
            float v169 = v167;
            if (v167 < 0.0) {
              float v169 = 0.0;
            }
          }
          float v170 = _S20 * (float)((float)(v68->u16[1] >> v59) - v31);
          float v171 = v150 + v170;
          float v172 = 8191.0;
          if (v171 <= 8191.0)
          {
            float v172 = v171;
            if (v171 < 0.0) {
              float v172 = 0.0;
            }
          }
          float v173 = v155 + v170;
          float v174 = 8191.0;
          if (v173 <= 8191.0)
          {
            float v174 = v173;
            if (v173 < 0.0) {
              float v174 = 0.0;
            }
          }
          float v175 = v157 + v170;
          float v176 = 8191.0;
          if (v175 <= 8191.0)
          {
            float v176 = v175;
            if (v175 < 0.0) {
              float v176 = 0.0;
            }
          }
          _H19 = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0))];
          _H21 = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0))];
          __asm
          {
            FCVT            S19, H19
            FCVT            S21, H21
          }
          _H25 = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0))];
          __asm { FCVT            S25, H25 }
          _H27 = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0))];
          __asm { FCVT            S27, H27 }
          _H30 = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0))];
          __asm { FCVT            S30, H30 }
          _H11 = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0))];
          __asm { FCVT            S11, H11 }
          _H0 = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(*(float *)v63.i32, 0.0), 8191.0))];
          _H1 = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0))];
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          _H2 = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0))];
          __asm { FCVT            S2, H2 }
          _H3 = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0))];
          __asm { FCVT            S3, H3 }
          _H26 = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0))];
          __asm { FCVT            S26, H26 }
          _H29 = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0))];
          __asm { FCVT            S29, H29 }
          float v201 = (float)((float)(v223 * _S21) + (float)(_S19 * v225)) + (float)(_S25 * v221);
          float v202 = (float)((float)(v216 * _S21) + (float)(_S19 * v218)) + (float)(_S25 * _S28);
          float v203 = (float)((float)(_S7 * _S21) + (float)(_S19 * _S6)) + (float)(_S25 * _S16);
          float v204 = (float)((float)(v223 * _S30) + (float)(_S27 * v225)) + (float)(_S11 * v221);
          float v205 = (float)((float)(v216 * _S30) + (float)(_S27 * v218)) + (float)(_S11 * _S28);
          float v206 = (float)((float)(_S7 * _S30) + (float)(_S27 * _S6)) + (float)(_S11 * _S16);
          float v207 = (float)((float)(v223 * _S1) + (float)(_S0 * v225)) + (float)(_S2 * v221);
          float v208 = (float)((float)(v216 * _S1) + (float)(_S0 * v218)) + (float)(_S2 * _S28);
          float v209 = (float)((float)(_S7 * _S1) + (float)(_S0 * _S6)) + (float)(_S2 * _S16);
          float v210 = (float)((float)(v223 * _S26) + (float)(_S3 * v225)) + (float)(_S29 * v221);
          float v211 = (float)((float)(v216 * _S26) + (float)(_S3 * v218)) + (float)(_S29 * _S28);
          float v212 = (float)((float)(_S7 * _S26) + (float)(_S3 * _S6)) + (float)(_S29 * _S16);
          LOWORD(_S29) = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v202, 0.0), 8191.0))];
          LOWORD(v203) = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v203, 0.0), 8191.0))];
          LOWORD(v204) = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v204, 0.0), 8191.0))];
          LOWORD(v205) = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v205, 0.0), 8191.0))];
          LOWORD(v206) = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0))];
          LOWORD(v207) = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v207, 0.0), 8191.0))];
          LOWORD(v208) = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v208, 0.0), 8191.0))];
          *(float *)v63.i32 = fminf(fmaxf(v209, 0.0), 8191.0);
          v63.i16[0] = *(_WORD *)&v33[2 * llroundf(*(float *)v63.i32)];
          LOWORD(v210) = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v210, 0.0), 8191.0))];
          LOWORD(v211) = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v211, 0.0), 8191.0))];
          LOWORD(v212) = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0))];
          *(_WORD *)uint64_t v60 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v201, 0.0), 8191.0))];
          *(_WORD *)(v60 + 2) = LOWORD(_S29);
          *(_WORD *)(v60 + 4) = LOWORD(v203);
          *(short float *)(v60 + 6) = v148;
          *(_WORD *)(v60 + 8) = LOWORD(v204);
          *(_WORD *)(v60 + 10) = LOWORD(v205);
          *(_WORD *)(v60 + 12) = LOWORD(v206);
          *(short float *)(v60 + 14) = v148;
          *(_WORD *)uint64_t v70 = LOWORD(v207);
          *(_WORD *)(v70 + 2) = LOWORD(v208);
          *(_WORD *)(v70 + 4) = v63.i16[0];
          *(short float *)(v70 + 6) = v148;
          *(_WORD *)(v70 + 8) = LOWORD(v210);
          *(_WORD *)(v70 + 10) = LOWORD(v211);
          v147 += 2;
          float v69 = (uint16x8_t *)((char *)v69 + 4);
          float v62 = (uint16x8_t *)((char *)v62 + 4);
          *(_WORD *)(v70 + 12) = LOWORD(v212);
          *(short float *)(v70 + 14) = v148;
          float v68 = (uint16x8_t *)((char *)v68 + 4);
          v60 += 16;
          v70 += 16;
        }
        while (v11 > v147);
      }
      float v62 = (uint16x8_t *)&v65[v18];
      float v61 = (uint16x8_t *)((char *)v61 + v19);
      result += v20 + v20;
      uint64_t v60 = v66 + v21;
      v10 += 2;
    }
    while (v29 > v10);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v128 = v21 * *(float *)(v13 + 8);
    float v25 = v21 * *(float *)(v13 + 16);
    float v26 = v21 * *(float *)(v13 + 20);
    float v27 = v21 * *(float *)(v13 + 28);
    float v28 = *(float *)(v13 + 72);
    float v29 = *(float *)(v13 + 76);
    float v30 = *(float *)(v13 + 80);
    float v31 = *(float *)(v13 + 84);
    float v32 = *(float *)(v13 + 88);
    float v33 = *(float *)(v13 + 92);
    float v34 = *(float *)(v13 + 96);
    float v35 = *(float *)(v13 + 100);
    float v36 = *(float *)(v13 + 104);
    uint64_t v37 = v13 + 164;
    uint64_t v38 = v13 + 16548;
    uint64_t v39 = *((void *)result + 14);
    uint64_t v40 = (void *)*((void *)result + 16);
    uint64_t v41 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v42 = *(void *)(result + 36);
    uint64_t v43 = v14[1];
    uint64_t v44 = (char *)(*v14 + v16 * v11 + 2 * v42);
    uint64_t v45 = v14[2];
    _ZF = v45 == 0;
    uint64_t result = (unsigned __int8 *)(v45 + v18 * v11 + 2 * v42);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v47 = *v40 + v41 * v19 + 8 * v39;
    unsigned int v48 = *(unsigned __int8 *)(v13 + 124);
    char v49 = 16 - v48;
    if (v48 >= 0x11) {
      char v49 = 0;
    }
    if (v11 >= 0) {
      uint64_t v50 = v11;
    }
    else {
      uint64_t v50 = v11 + 1;
    }
    uint64_t v51 = v43 + v17 * (v50 >> 1) + 2 * v42;
    char v52 = v49;
    do
    {
      uint64_t v53 = v47 + v19;
      uint64_t v54 = &v44[v16];
      if (v10)
      {
        unint64_t v55 = 0;
        if (result) {
          short float v56 = COERCE_SHORT_FLOAT(0);
        }
        else {
          LOWORD(v56) = COERCE_UNSIGNED_INT(1.0);
        }
        uint64_t v57 = &v44[v16];
        uint64_t v58 = v47 + v19;
        do
        {
          unsigned __int8 v59 = (unsigned __int16 *)(v51 + 2 * v55);
          float v60 = (float)(v59[1] >> v52) - v23;
          float v61 = v128 * v60;
          float v62 = v24 * (float)((float)(*(unsigned __int16 *)v44 >> v52) - v22);
          float v63 = (float)(v128 * v60) + v62;
          float v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            float v64 = (float)(v128 * v60) + v62;
            if (v63 < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = (float)(*v59 >> v52) - v23;
          float v66 = (float)(v26 * v60) + (float)(v65 * v25);
          float v67 = 8191.0;
          if ((float)(v62 + v66) <= 8191.0)
          {
            float v67 = v62 + v66;
            if ((float)(v62 + v66) < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = v27 * v65;
          float v69 = (float)(v27 * v65) + v62;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v24 * (float)((float)(*((unsigned __int16 *)v44 + 1) >> v52) - v22);
          float v72 = 8191.0;
          if ((float)(v61 + v71) <= 8191.0)
          {
            float v72 = v61 + v71;
            if ((float)(v61 + v71) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = 8191.0;
          if ((float)(v66 + v71) <= 8191.0)
          {
            float v73 = v66 + v71;
            if ((float)(v66 + v71) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v68 + v71;
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v24 * (float)((float)(*(unsigned __int16 *)v57 >> v52) - v22);
          float v77 = 8191.0;
          if ((float)(v61 + v76) <= 8191.0)
          {
            float v77 = v61 + v76;
            if ((float)(v61 + v76) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = 8191.0;
          if ((float)(v66 + v76) <= 8191.0)
          {
            float v78 = v66 + v76;
            if ((float)(v66 + v76) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v68 + v76;
          BOOL v80 = (float)(v68 + v76) <= 8191.0;
          float v81 = 8191.0;
          if (v80)
          {
            float v81 = v79;
            if (v79 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v24 * (float)((float)(*((unsigned __int16 *)v57 + 1) >> v52) - v22);
          float v83 = v61 + v82;
          float v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v66 + v82;
          BOOL v80 = (float)(v66 + v82) <= 8191.0;
          float v86 = 8191.0;
          if (v80)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v68 + v82;
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H29 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm
          {
            FCVT            S8, H8
            FCVT            S9, H9
          }
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H25 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H4 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S11, H11
          }
          float v116 = (float)((float)(v29 * _S29) + (float)(_S26 * v28)) + (float)(_S30 * v30);
          float v117 = (float)((float)(v32 * _S29) + (float)(_S26 * v31)) + (float)(_S30 * v33);
          float v118 = (float)((float)(v35 * _S29) + (float)(_S26 * v34)) + (float)(_S30 * v36);
          float v119 = (float)((float)(v29 * _S8) + (float)(_S31 * v28)) + (float)(_S9 * v30);
          float v120 = (float)((float)(v32 * _S8) + (float)(_S31 * v31)) + (float)(_S9 * v33);
          float v121 = (float)((float)(v35 * _S8) + (float)(_S31 * v34)) + (float)(_S9 * v36);
          float v122 = (float)((float)(v29 * _S13) + (float)(_S12 * v28)) + (float)(_S25 * v30);
          float v123 = (float)((float)(v32 * _S13) + (float)(_S12 * v31)) + (float)(_S25 * v33);
          float v124 = (float)((float)(v35 * _S13) + (float)(_S12 * v34)) + (float)(_S25 * v36);
          float v125 = (float)((float)(v29 * _S10) + (float)(_S4 * v28)) + (float)(_S11 * v30);
          float v126 = (float)((float)(v32 * _S10) + (float)(_S4 * v31)) + (float)(_S11 * v33);
          float v127 = (float)((float)(v35 * _S10) + (float)(_S4 * v34)) + (float)(_S11 * v36);
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          LOWORD(v118) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          LOWORD(v119) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          LOWORD(v120) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          LOWORD(v121) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          LOWORD(v122) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          LOWORD(v123) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          LOWORD(v124) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          LOWORD(_S11) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          LOWORD(v125) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          LOWORD(v127) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          *(_WORD *)uint64_t v47 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          *(_WORD *)(v47 + 2) = LOWORD(_S10);
          *(_WORD *)(v47 + 4) = LOWORD(v118);
          *(short float *)(v47 + 6) = v56;
          *(_WORD *)(v47 + 8) = LOWORD(v119);
          *(_WORD *)(v47 + 10) = LOWORD(v120);
          *(_WORD *)(v47 + 12) = LOWORD(v121);
          *(short float *)(v47 + 14) = v56;
          *(_WORD *)uint64_t v58 = LOWORD(v122);
          *(_WORD *)(v58 + 2) = LOWORD(v123);
          *(_WORD *)(v58 + 4) = LOWORD(v124);
          *(short float *)(v58 + 6) = v56;
          v44 += 4;
          v57 += 4;
          v47 += 16;
          *(_WORD *)(v58 + 8) = LOWORD(_S11);
          *(_WORD *)(v58 + 10) = LOWORD(v125);
          *(_WORD *)(v58 + 12) = LOWORD(v127);
          *(short float *)(v58 + 14) = v56;
          v58 += 16;
          v55 += 2;
        }
        while (v10 > v55);
      }
      uint64_t v44 = &v54[v16];
      v51 += v17;
      result += v18 + v18;
      uint64_t v47 = v53 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_RGhA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, int16x4_t a7, float32x4_t a8, double a9, float32x4_t a10)
{
  uint64_t v10 = *(void *)(result + 28);
  unint64_t v11 = 2 * *result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (2 * v13 != 2 * v12)
  {
    unint64_t v14 = 0;
    unint64_t v15 = *(void *)(result + 20);
    uint64_t v16 = *(void *)(result + 44);
    uint64_t v17 = v16 + 2 * v12;
    uint64_t v18 = v16 + 2 * v13;
    uint64_t v19 = (float32x2_t *)*((void *)result + 19);
    uint64_t v20 = (uint64_t *)*((void *)result + 7);
    uint64_t v21 = (uint64_t *)*((void *)result + 8);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = v21[2];
    uint64_t v25 = **((void **)result + 17);
    unsigned int v26 = v19[17].u16[2];
    unsigned int v27 = v19[17].u16[3];
    a8.i32[0] = v19[3].i32[1];
    unint64_t v28 = v18 - v17;
    a7.i32[0] = 1.0;
    *(float *)&a3 = (float)v26;
    float v29 = (float)v27;
    a10.f32[0] = 1.0 / (float)v19[16].u32[0];
    _S2 = a10.f32[0] * v19->f32[0];
    __asm { FCVT            H3, S2 }
    *(short float *)a7.i16 = (short float)v26;
    float16x8_t v36 = (float16x8_t)vdupq_lane_s16(a7, 0);
    short float v37 = -(short float)v27;
    a8.i32[1] = v19[1].i32[0];
    *(float32x2_t *)a8.f32 = vmul_n_f32(*(float32x2_t *)a8.f32, a10.f32[0]);
    float16x8_t v38 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    *(float32x2_t *)a10.f32 = vmul_n_f32(v19[2], a10.f32[0]);
    float16x8_t v39 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    float16x8_t v40 = vmulq_n_f16(v38, v37);
    float16x8_t v41 = vmulq_n_f16(v39, v37);
    unsigned int v42 = v19[15].u8[4];
    unsigned __int8 v43 = 16 - v42;
    uint64_t v44 = v20[2];
    if (v17 >= 0) {
      uint64_t v45 = v17;
    }
    else {
      uint64_t v45 = v17 + 1;
    }
    uint64_t v46 = *v20;
    uint64_t v47 = v20[1] + v23 * (v45 >> 1);
    uint64_t v48 = *((void *)result + 14);
    char v49 = (uint64_t *)*((void *)result + 16);
    uint64_t v50 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v11);
    uint64_t v51 = *(void *)(result + 36);
    uint64_t v52 = v44 + v24 * v17 + 2 * v51;
    uint64_t v53 = *v49;
    if (v42 >= 0x11) {
      unsigned __int8 v43 = 0;
    }
    uint64_t v54 = v53 + v25 * v50 + 8 * v48;
    if (!v44) {
      uint64_t v52 = 0;
    }
    unint64_t v55 = (uint16x8_t *)(v47 + 2 * v51);
    uint64_t result = (unsigned __int8 *)(v46 + v22 * v17 + 2 * v51);
    unsigned __int8 v56 = v43;
    uint16x8_t v57 = (uint16x8_t)vdupq_n_s16(-v43);
    do
    {
      uint64_t v58 = v54 + v25;
      unsigned __int8 v59 = &result[v22];
      if ((int)v15 < 8)
      {
        unint64_t v81 = 0;
        uint64_t v63 = v54 + v25;
        float v62 = v55;
        float v61 = (uint16x8_t *)&result[v22];
      }
      else
      {
        int v60 = 0;
        float v61 = (uint16x8_t *)&result[v22];
        float v62 = v55;
        uint64_t v63 = v54 + v25;
        do
        {
          if (v52)
          {
            float16x8_t v64 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32((float32x4_t)0), (float32x4_t)0);
          }
          else
          {
            v64.i64[0] = 0x3C003C003C003C00;
            v64.i64[1] = 0x3C003C003C003C00;
          }
          uint16x8_t v65 = *v62++;
          float16x8_t v66 = vcvtq_f16_u16(vshlq_u16(v65, v57));
          int8x16_t v67 = (int8x16_t)vmlaq_f16(v40, v38, v66);
          int8x16_t v68 = (int8x16_t)vmlaq_f16(v41, v39, v66);
          v66.i64[0] = vextq_s8(v67, v67, 8uLL).u64[0];
          *(int16x4_t *)v69.i8 = vuzp1_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v66.i8);
          *(int16x4_t *)v66.i8 = vuzp2_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v66.i8);
          *(double *)&v66.i64[1] = a3;
          float16x8_t v70 = (float16x8_t)vzip1q_s16((int16x8_t)v66, (int16x8_t)v66);
          *(double *)&v69.i64[1] = a3;
          float16x8_t v71 = (float16x8_t)vzip1q_s16(v69, v69);
          v66.i64[0] = vextq_s8(v68, v68, 8uLL).u64[0];
          *(float16x4_t *)v66.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v66.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v66.i8));
          *(double *)&v66.i64[1] = a3;
          uint16x8_t v72 = *(uint16x8_t *)result;
          result += 16;
          float16x8_t v73 = (float16x8_t)vzip1q_s16((int16x8_t)v66, (int16x8_t)v66);
          float16x8_t v74 = vcvtq_f16_u16(vshlq_u16(v72, v57));
          uint16x8_t v75 = *v61++;
          float16x8_t v76 = vsubq_f16(v74, v36);
          float16x8_t v77 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v75, v57)), v36);
          float16x8_t v78 = vmlaq_n_f16(v70, v76, _H3);
          v104.val[0] = (int16x8_t)vmlaq_n_f16(v70, v77, _H3);
          float16x8_t v79 = vmlaq_n_f16(v73, v76, _H3);
          v104.val[1] = (int16x8_t)vmlaq_n_f16(v73, v77, _H3);
          float16x8_t v80 = vmlaq_n_f16(v71, v76, _H3);
          vst4q_s16((__int16 *)v54, *(int16x8x4_t *)(&v64 - 3));
          v54 += 64;
          v104.val[2] = (int16x8_t)vmlaq_n_f16(v71, v77, _H3);
          v104.val[3] = (int16x8_t)v64;
          vst4q_s16((__int16 *)v63, v104);
          v63 += 64;
          v60 += 8;
        }
        while (v60 < (int)v15 - 7);
        unint64_t v81 = v15 & 0xFFFFFFF8;
      }
      if (v15 > v81)
      {
        if (v52) {
          short float v82 = COERCE_SHORT_FLOAT(0);
        }
        else {
          LOWORD(v82) = COERCE_UNSIGNED_INT(1.0);
        }
        do
        {
          float v83 = (float)(v62->u16[0] >> v56) - v29;
          float v84 = (float)(v62->u16[1] >> v56) - v29;
          float v85 = a8.f32[1] * v84;
          _S29 = a8.f32[0] * v83;
          float v87 = _S2 * (float)((float)(*(unsigned __int16 *)result >> v56) - *(float *)&a3);
          float v88 = _S2 * (float)((float)(*((unsigned __int16 *)result + 1) >> v56) - *(float *)&a3);
          float v89 = (float)(a10.f32[1] * v84) + (float)(v83 * a10.f32[0]);
          float v90 = _S2 * (float)((float)(v61->u16[0] >> v56) - *(float *)&a3);
          float v91 = _S2 * (float)((float)(v61->u16[1] >> v56) - *(float *)&a3);
          _S9 = v85 + v87;
          _S10 = v87 + v89;
          _S30 = _S29 + v87;
          _S11 = v85 + v88;
          _S12 = v89 + v88;
          _S31 = _S29 + v88;
          _S13 = v85 + v90;
          _S14 = v89 + v90;
          _S8 = _S29 + v90;
          _S28 = v85 + v91;
          _S26 = v89 + v91;
          __asm { FCVT            H9, S9 }
          *(_WORD *)uint64_t v54 = LOWORD(_S9);
          __asm
          {
            FCVT            H9, S10
            FCVT            H30, S30
          }
          *(_WORD *)(v54 + 4) = LOWORD(_S30);
          *(_WORD *)(v54 + 2) = LOWORD(_S9);
          *(short float *)(v54 + 6) = v82;
          __asm { FCVT            H30, S11 }
          *(_WORD *)(v54 + 8) = LOWORD(_S30);
          _S27 = _S29 + v91;
          __asm { FCVT            H29, S12 }
          *(_WORD *)(v54 + 10) = LOWORD(_S29);
          __asm { FCVT            H29, S31 }
          *(_WORD *)(v54 + 12) = LOWORD(_S29);
          *(short float *)(v54 + 14) = v82;
          __asm
          {
            FCVT            H29, S13
            FCVT            H30, S14
          }
          *(_WORD *)uint64_t v63 = LOWORD(_S29);
          *(_WORD *)(v63 + 2) = LOWORD(_S30);
          __asm { FCVT            H29, S8 }
          *(_WORD *)(v63 + 4) = LOWORD(_S29);
          *(short float *)(v63 + 6) = v82;
          __asm { FCVT            H28, S28 }
          *(_WORD *)(v63 + 8) = LOWORD(_S28);
          __asm
          {
            FCVT            H26, S26
            FCVT            H27, S27
          }
          v81 += 2;
          float v62 = (uint16x8_t *)((char *)v62 + 4);
          result += 4;
          *(_WORD *)(v63 + 10) = LOWORD(_S26);
          *(_WORD *)(v63 + 12) = LOWORD(_S27);
          *(short float *)(v63 + 14) = v82;
          float v61 = (uint16x8_t *)((char *)v61 + 4);
          v54 += 16;
          v63 += 16;
        }
        while (v15 > v81);
      }
      uint64_t result = &v59[v22];
      unint64_t v55 = (uint16x8_t *)((char *)v55 + v23);
      v52 += v24 + v24;
      uint64_t v54 = v58 + v25;
      v14 += 2;
    }
    while (v28 > v14);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_RGhA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = 2 * *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = *(void *)(result + 20);
    uint64_t v8 = *(void *)(result + 44) + 2 * v4;
    unint64_t v9 = 2 * v5 - 2 * v4;
    uint64_t v10 = *(void *)(result + 152);
    uint64_t v12 = *(void **)(result + 56);
    uint64_t v11 = *(uint64_t **)(result + 64);
    uint64_t v13 = *v11;
    uint64_t v14 = v11[1];
    uint64_t v15 = v11[2];
    uint64_t v16 = **(void **)(result + 136);
    *(float *)&unsigned int v17 = (float)*(unsigned int *)(v10 + 128);
    unsigned int v18 = 1.0;
    float v19 = 1.0 / *(float *)&v17;
    LOWORD(v17) = *(_WORD *)(v10 + 140);
    float v20 = (float)v17;
    LOWORD(v18) = *(_WORD *)(v10 + 142);
    float v21 = (float)v18;
    float v22 = v19 * *(float *)v10;
    float v23 = v19 * *(float *)(v10 + 8);
    float v24 = v19 * *(float *)(v10 + 16);
    float v25 = v19 * *(float *)(v10 + 20);
    float v26 = v19 * *(float *)(v10 + 28);
    uint64_t v27 = *(void *)(result + 112);
    uint64_t v28 = *(void **)(result + 128);
    uint64_t v29 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v3);
    uint64_t v30 = *(void *)(result + 36);
    uint64_t v31 = v12[1];
    uint64_t v32 = (char *)(*v12 + v13 * v8 + 2 * v30);
    uint64_t v33 = v12[2];
    _ZF = v33 == 0;
    uint64_t v35 = v33 + v15 * v8 + 2 * v30;
    if (_ZF) {
      uint64_t v35 = 0;
    }
    uint64_t v36 = *v28 + v29 * v16 + 8 * v27;
    unsigned int v37 = *(unsigned __int8 *)(v10 + 124);
    if (v37 >= 0x11) {
      unsigned __int8 v38 = 0;
    }
    else {
      unsigned __int8 v38 = 16 - v37;
    }
    uint64_t v39 = v31 + v14 * (v8 / 2) + 2 * v30;
    uint64_t result = v38;
    do
    {
      uint64_t v40 = v36 + v16;
      float16x8_t v41 = &v32[v13];
      if (v7)
      {
        unint64_t v42 = 0;
        if (v35) {
          short float v43 = COERCE_SHORT_FLOAT(0);
        }
        else {
          LOWORD(v43) = COERCE_UNSIGNED_INT(1.0);
        }
        uint64_t v44 = &v32[v13];
        uint64_t v45 = v36 + v16;
        do
        {
          uint64_t v46 = (unsigned __int16 *)(v39 + 2 * v42);
          float v47 = (float)(*v46 >> result) - v21;
          float v48 = (float)(v46[1] >> result) - v21;
          float v49 = v22 * (float)((float)(*(unsigned __int16 *)v32 >> result) - v20);
          float v50 = v23 * v48;
          float v51 = v22 * (float)((float)(*((unsigned __int16 *)v32 + 1) >> result) - v20);
          v32 += 4;
          float v52 = v26 * v47;
          float v53 = (float)(v25 * v48) + (float)(v47 * v24);
          float v54 = v22 * (float)((float)(*(unsigned __int16 *)v44 >> result) - v20);
          float v55 = v22 * (float)((float)(*((unsigned __int16 *)v44 + 1) >> result) - v20);
          v44 += 4;
          _S25 = v50 + v49;
          _S26 = v49 + v53;
          _S20 = v52 + v49;
          _S27 = v50 + v51;
          _S28 = v53 + v51;
          _S22 = v52 + v51;
          _S29 = v50 + v54;
          _S30 = v53 + v54;
          _S19 = v52 + v54;
          _S21 = v50 + v55;
          _S18 = v53 + v55;
          __asm { FCVT            H25, S25 }
          *(_WORD *)uint64_t v36 = LOWORD(_S25);
          __asm
          {
            FCVT            H25, S26
            FCVT            H20, S20
          }
          *(_WORD *)(v36 + 4) = LOWORD(_S20);
          *(short float *)(v36 + 6) = v43;
          __asm { FCVT            H20, S27 }
          *(_WORD *)(v36 + 8) = LOWORD(_S20);
          *(_WORD *)(v36 + 2) = LOWORD(_S25);
          __asm { FCVT            H20, S22 }
          *(_WORD *)(v36 + 12) = LOWORD(_S20);
          _S20 = v52 + v55;
          __asm { FCVT            H22, S28 }
          *(short float *)(v36 + 14) = v43;
          *(_WORD *)(v36 + 10) = LOWORD(_S22);
          v36 += 16;
          __asm { FCVT            H22, S29 }
          *(_WORD *)uint64_t v45 = LOWORD(_S22);
          __asm
          {
            FCVT            H22, S30
            FCVT            H19, S19
          }
          *(_WORD *)(v45 + 2) = LOWORD(_S22);
          *(_WORD *)(v45 + 4) = LOWORD(_S19);
          *(short float *)(v45 + 6) = v43;
          __asm { FCVT            H19, S21 }
          *(_WORD *)(v45 + 8) = LOWORD(_S19);
          __asm { FCVT            H18, S18 }
          *(_WORD *)(v45 + 10) = LOWORD(_S18);
          __asm { FCVT            H18, S20 }
          *(_WORD *)(v45 + 12) = LOWORD(_S18);
          *(short float *)(v45 + 14) = v43;
          v45 += 16;
          v42 += 2;
        }
        while (v7 > v42);
      }
      uint64_t v32 = &v41[v13];
      v39 += v14;
      v35 += v15 + v15;
      uint64_t v36 = v40 + v16;
      v6 += 2;
    }
    while (v9 > v6);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, int16x4_t _D0)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44);
    uint64_t v12 = v11 + 2 * v7;
    uint64_t v13 = v11 + 2 * v8;
    uint64_t v14 = (float32x2_t *)*((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    LODWORD(v11) = v14[17].u16[2];
    LODWORD(v16) = v14[17].u16[3];
    _D0.i32[0] = v14->i32[0];
    v21.i32[0] = v14[3].i32[1];
    _S6 = v14[10].f32[1];
    _S7 = v14[11].f32[0];
    _S16 = v14[11].f32[1];
    _S23 = v14[12].f32[0];
    _S17 = v14[12].f32[1];
    _S18 = v14[13].f32[0];
    _S15 = v14[15].f32[0];
    unint64_t v29 = v13 - v12;
    uint64_t v30 = (char *)&v14[2068] + 4;
    float v31 = 8191.0 / (float)v14[16].u32[0];
    float v32 = (float)v11;
    float v374 = (float)v16;
    _S24 = v31 * v14->f32[0];
    uint64_t v34 = (char *)&v14[20] + 4;
    uint64_t v35 = (char *)&v14[4116] + 4;
    __asm { FCVT            H0, S24 }
    short float v349 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v11;
    float16x8_t v325 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    v21.i32[1] = v14[1].i32[0];
    *(float32x2_t *)v3.f32 = vmul_n_f32(v21, v31);
    *(float32x2_t *)v4.f32 = vmul_n_f32(v14[2], v31);
    short float v40 = -(short float)v16;
    _Q1 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v350 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v41 = vmulq_n_f16(v350, v40);
    int64x2_t v42 = (int64x2_t)vmulq_n_f16(_Q1, v40);
    float v353 = v14[13].f32[1];
    __asm { FCVT            H9, S19 }
    float16x8_t v44 = _Q1;
    float v352 = v14[14].f32[0];
    __asm { FCVT            H1, S25 }
    float v351 = v14[14].f32[1];
    __asm
    {
      FCVT            H13, S26
      FCVT            H14, S15
    }
    float v361 = v14[9].f32[0];
    __asm { FCVT            H3, S3 }
    float v360 = v14[9].f32[1];
    __asm { FCVT            H4, S4 }
    float v359 = v14[10].f32[0];
    __asm { FCVT            H5, S5 }
    unsigned int v51 = v14[15].u8[4];
    uint64_t v52 = v15[1];
    uint64_t v53 = v15[2];
    if (v12 >= 0) {
      uint64_t v54 = v12;
    }
    else {
      uint64_t v54 = v12 + 1;
    }
    uint64_t v55 = *v15;
    uint64_t v56 = v52 + v18 * (v54 >> 1);
    uint64_t v57 = *((void *)result + 14);
    uint64_t v58 = (uint64_t *)*((void *)result + 16);
    uint64_t v59 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v60 = *(void *)(result + 36);
    uint64_t v61 = v53 + v19 * v12 + 2 * v60;
    uint64_t v62 = *v58;
    if (v51 >= 0x11) {
      unsigned __int8 v63 = 0;
    }
    else {
      unsigned __int8 v63 = 16 - v51;
    }
    uint64_t v64 = v62 + v20 * v59 + 16 * v57;
    if (!v53) {
      uint64_t v61 = 0;
    }
    uint16x8_t v65 = (uint16x8_t *)(v56 + 2 * v60);
    float16x8_t v66 = (uint16x8_t *)(v55 + v17 * v12 + 2 * v60);
    unsigned __int8 v67 = v63;
    unint64_t v323 = v10 & 0xFFFFFFF8;
    float v358 = _S6;
    __asm { FCVT            H6, S6 }
    float v357 = _S7;
    __asm { FCVT            H7, S7 }
    float v356 = _S16;
    __asm { FCVT            H10, S16 }
    float v355 = _S23;
    __asm
    {
      FCVT            H11, S23
      FCVT            H12, S17
    }
    float v354 = _S18;
    __asm { FCVT            H2, S18 }
    short float v337 = _H2;
    uint16x8_t v74 = (uint16x8_t)vdupq_n_s16(-v63);
    uint64_t v75 = v4.i64[0];
    uint64_t v76 = v3.i64[0];
    v77.i64[0] = 0x9000900090009000;
    v77.i64[1] = 0x9000900090009000;
    float v362 = _S15;
    short float v347 = _H9;
    float16x8_t v348 = (float16x8_t)v42;
    short float v345 = _H3;
    short float v346 = *(short float *)_Q1.i16;
    short float v372 = _H14;
    short float v373 = _H13;
    short float v343 = _H5;
    short float v344 = _H4;
    short float v340 = _H10;
    short float v341 = _H6;
    short float v371 = _H7;
    uint16x8_t v336 = v74;
    uint64_t v330 = v17;
    unint64_t v331 = v10;
    uint64_t v328 = v19;
    uint64_t v329 = v18;
    unint64_t v326 = v29;
    uint64_t v327 = v20;
    int v342 = v10 - 7;
    unsigned __int8 v324 = v63;
    short float v338 = _H12;
    short float v339 = _H11;
    do
    {
      float16x8_t v78 = &v66->i8[v17];
      uint64_t v79 = v64 + v20;
      if ((int)v10 < 8)
      {
        unint64_t v214 = 0;
        uint64_t v85 = v64 + v20;
        float v84 = v65;
        uint64_t result = &v66->u8[v17];
      }
      else
      {
        short float v334 = v65;
        unint64_t v335 = v9;
        v42.i64[0] = 0;
        int v80 = 0;
        uint64_t v333 = v64 + v20;
        _Q1.i64[0] = v61;
        int8x16_t v81 = (int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)_Q1, v42).i64[0], 0);
        __asm { FMOV            V1.4S, #1.0 }
        int8x16_t v83 = vandq_s8(_Q1, v81);
        int v332 = &v66->i8[v17];
        uint64_t result = &v66->u8[v17];
        float v84 = v65;
        uint64_t v85 = v64 + v20;
        do
        {
          int v368 = v80;
          uint16x8_t v86 = *v84++;
          float16x8_t v87 = vcvtq_f16_u16(vshlq_u16(v86, v74));
          int8x16_t v88 = (int8x16_t)vmlaq_f16(v41, v350, v87);
          int16x8_t v89 = (int16x8_t)vmlaq_f16(v348, v44, v87);
          v87.i64[0] = vextq_s8(v88, v88, 8uLL).u64[0];
          *(int16x4_t *)v90.i8 = vuzp1_s16(*(int16x4_t *)v88.i8, *(int16x4_t *)v87.i8);
          *(int16x4_t *)v87.i8 = vuzp2_s16(*(int16x4_t *)v88.i8, *(int16x4_t *)v87.i8);
          v87.i64[1] = v87.i64[0];
          v88.i64[0] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
          v90.i64[1] = v87.i64[0];
          *(float16x4_t *)v89.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v88.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v88.i8));
          v89.i64[1] = v87.i64[0];
          float16x8_t v91 = (float16x8_t)vzip1q_s16((int16x8_t)v87, (int16x8_t)v87);
          float16x8_t v370 = v66 + 1;
          float16x8_t v369 = result + 16;
          float16x8_t v92 = (float16x8_t)vzip1q_s16(v89, v89);
          float16x8_t v93 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(*v66, v74)), v325);
          float16x8_t v94 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(*(uint16x8_t *)result, v74)), v325);
          float16x8_t v95 = (float16x8_t)vzip1q_s16(v90, v90);
          float16x8_t v96 = vmlaq_n_f16(v91, v93, v349);
          float16x8_t v97 = vmlaq_n_f16(v91, v94, v349);
          float16x8_t v98 = vmlaq_n_f16(v92, v93, v349);
          float16x8_t v99 = vmlaq_n_f16(v92, v94, v349);
          float16x8_t v100 = vmlaq_n_f16(v95, v93, v349);
          float16x8_t v101 = vmlaq_n_f16(v95, v94, v349);
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v96, (float16x8_t)0), v77));
          uint32x4_t v103 = vmovl_high_u16(v102);
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v102.i8);
          uint64_t v105 = v104.u32[1];
          uint64_t v106 = v104.u32[3];
          v107.i16[0] = *(_WORD *)&v34[2 * v104.u32[0]];
          uint64_t v108 = v103.u32[1];
          float16x8_t v109 = (__int16 *)&v34[2 * v104.u32[2]];
          uint64_t v110 = v103.u32[3];
          uint64_t v111 = v103.u32[2];
          float16x8_t v112 = (__int16 *)&v34[2 * v103.u32[0]];
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v98, (float16x8_t)0), v77));
          uint32x4_t v114 = vmovl_high_u16(v113);
          uint64_t v115 = v114.u32[2];
          uint64_t v116 = v114.u32[3];
          uint32x4_t v117 = vmovl_u16(*(uint16x4_t *)v113.i8);
          float v118 = (__int16 *)&v34[2 * v111];
          v98.i64[1] = v117.u32[3];
          uint64_t v119 = v117.u32[1];
          uint64_t v120 = v114.u32[1];
          v121.i16[0] = *(_WORD *)&v34[2 * v117.u32[0]];
          float v122 = (__int16 *)&v34[2 * v117.u32[2]];
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v100, (float16x8_t)0), v77));
          uint32x4_t v124 = vmovl_high_u16(v123);
          uint32x4_t v125 = vmovl_u16(*(uint16x4_t *)v123.i8);
          v98.i16[0] = *(_WORD *)&v34[2 * v125.u32[0]];
          float v126 = (__int16 *)&v34[2 * v125.u32[1]];
          v107.i16[1] = *(_WORD *)&v34[2 * v105];
          float v127 = (__int16 *)&v34[2 * v125.u32[2]];
          float v128 = (__int16 *)&v34[2 * v125.u32[3]];
          uint16x8_t v129 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v97, (float16x8_t)0), v77));
          uint32x4_t v130 = vmovl_high_u16(v129);
          uint32x4_t v131 = vmovl_u16(*(uint16x4_t *)v129.i8);
          v98.i16[1] = *v126;
          v132.i16[0] = *(_WORD *)&v34[2 * v131.u32[0]];
          v107.i16[2] = *v109;
          v121.i16[1] = *(_WORD *)&v34[2 * v119];
          v98.i16[2] = *v127;
          v107.i16[3] = *(_WORD *)&v34[2 * v106];
          v132.i16[1] = *(_WORD *)&v34[2 * v131.u32[1]];
          v121.i16[2] = *v122;
          v132.i16[2] = *(_WORD *)&v34[2 * v131.u32[2]];
          v132.i16[3] = *(_WORD *)&v34[2 * v131.u32[3]];
          v98.i16[3] = *v128;
          __int16 v133 = (__int16 *)&v34[2 * v130.u32[3]];
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v99, (float16x8_t)0), v77));
          v132.i16[4] = *(_WORD *)&v34[2 * v130.u32[0]];
          uint32x4_t v135 = vmovl_high_u16(v134);
          float16x8_t v136 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v134.i8);
          v107.i16[4] = *v112;
          v121.i16[3] = *(_WORD *)&v34[2 * v98.i64[1]];
          v136.i16[0] = *(_WORD *)&v34[2 * v136.u32[0]];
          v98.i16[4] = *(_WORD *)&v34[2 * v124.u32[0]];
          v132.i16[5] = *(_WORD *)&v34[2 * v130.u32[1]];
          v107.i16[5] = *(_WORD *)&v34[2 * v108];
          v121.i16[4] = *(_WORD *)&v34[2 * v114.u32[0]];
          __int16 v137 = (__int16 *)&v34[2 * v135.u32[2]];
          v136.i16[1] = *(_WORD *)&v34[2 * v136.u32[1]];
          v98.i16[5] = *(_WORD *)&v34[2 * v124.u32[1]];
          v136.i16[2] = *(_WORD *)&v34[2 * v136.u32[2]];
          v136.i16[3] = *(_WORD *)&v34[2 * v136.u32[3]];
          v132.i16[6] = *(_WORD *)&v34[2 * v130.u32[2]];
          __int16 v138 = (__int16 *)&v34[2 * v135.u32[3]];
          v136.i16[4] = *(_WORD *)&v34[2 * v135.u32[0]];
          v136.i16[5] = *(_WORD *)&v34[2 * v135.u32[1]];
          float16x8_t v139 = (float16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v101, (float16x8_t)0), v77));
          uint32x4_t v140 = vmovl_high_u16((uint16x8_t)v139);
          v107.i16[6] = *v118;
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v139.i8);
          v121.i16[5] = *(_WORD *)&v34[2 * v120];
          v139.i16[0] = *(_WORD *)&v34[2 * v141.u32[0]];
          v98.i16[6] = *(_WORD *)&v34[2 * v124.u32[2]];
          v132.i16[7] = *v133;
          v136.i16[6] = *v137;
          v107.i16[7] = *(_WORD *)&v34[2 * v110];
          v121.i16[6] = *(_WORD *)&v34[2 * v115];
          v139.i16[1] = *(_WORD *)&v34[2 * v141.u32[1]];
          v139.i16[2] = *(_WORD *)&v34[2 * v141.u32[2]];
          v121.i16[7] = *(_WORD *)&v34[2 * v116];
          v139.i16[3] = *(_WORD *)&v34[2 * v141.u32[3]];
          v139.i16[4] = *(_WORD *)&v34[2 * v140.u32[0]];
          v136.i16[7] = *v138;
          v139.i16[5] = *(_WORD *)&v34[2 * v140.u32[1]];
          v139.i16[6] = *(_WORD *)&v34[2 * v140.u32[2]];
          v98.i16[7] = *(_WORD *)&v34[2 * v124.u32[3]];
          v139.i16[7] = *(_WORD *)&v34[2 * v140.u32[3]];
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v107, v347), v121, v346), v98, _H13), vmaxq_f16(vmaxq_f16(v107, v121), v98), _H14), (float16x8_t)0), v77));
          uint32x4_t v143 = vmovl_high_u16(v142);
          float16x8_t v144 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v142.i8);
          v144.i16[0] = *(_WORD *)&v30[2 * v144.u32[0]];
          uint32x4_t v145 = (__int16 *)&v30[2 * v143.u32[0]];
          uint64_t v146 = v143.u32[3];
          unint64_t v147 = (__int16 *)&v30[2 * v143.u32[2]];
          short float v148 = (__int16 *)&v30[2 * v143.u32[1]];
          uint16x8_t v149 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v132, v347), v136, v346), v139, _H13), vmaxq_f16(vmaxq_f16(v132, v136), v139), _H14), (float16x8_t)0), v77));
          uint32x4_t v150 = vmovl_high_u16(v149);
          *(void *)&long long v151 = v150.u32[2];
          *((void *)&v151 + 1) = v150.u32[3];
          long long v152 = v151;
          *((void *)&v151 + 1) = v150.u32[1];
          float16x8_t v153 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v149.i8);
          v144.i16[1] = *(_WORD *)&v30[2 * v144.u32[1]];
          v144.i16[2] = *(_WORD *)&v30[2 * v144.u32[2]];
          v153.i16[0] = *(_WORD *)&v30[2 * v153.u32[0]];
          v144.i16[3] = *(_WORD *)&v30[2 * v144.u32[3]];
          v144.i16[4] = *v145;
          v144.i16[5] = *v148;
          uint64_t v154 = *((void *)&v152 + 1);
          v144.i16[6] = *v147;
          v153.i16[1] = *(_WORD *)&v30[2 * v153.u32[1]];
          v153.i16[2] = *(_WORD *)&v30[2 * v153.u32[2]];
          v144.i16[7] = *(_WORD *)&v30[2 * v146];
          v153.i16[3] = *(_WORD *)&v30[2 * v153.u32[3]];
          v153.i16[4] = *(_WORD *)&v30[2 * v150.u32[0]];
          float16x8_t v155 = vmulq_f16(v107, v144);
          v153.i16[5] = *(_WORD *)&v30[2 * *((void *)&v151 + 1)];
          v153.i16[6] = *(_WORD *)&v30[2 * v152];
          float16x8_t v156 = vmulq_f16(v121, v144);
          v153.i16[7] = *(_WORD *)&v30[2 * v154];
          float16x8_t v157 = vmulq_f16(v132, v153);
          float16x8_t v158 = vmulq_f16(v136, v153);
          float16x8_t v159 = vmulq_f16(v98, v144);
          float16x8_t v160 = vmulq_f16(v139, v153);
          float16x8_t v161 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v155, v345), v156, v344), v159, v343);
          float16x8_t v162 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v157, v345), v158, v344), v160, v343);
          float16x8_t v163 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v155, v341), v156, _H7), v159, v340);
          float16x8_t v164 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v157, v341), v158, _H7), v160, v340);
          float16x8_t v165 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v159, v337), v156, v338), v155, v339);
          float16x8_t v166 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v160, v337), v158, v338), v157, v339);
          uint16x8_t v167 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v161, (float16x8_t)0), v77));
          uint32x4_t v168 = vmovl_high_u16(v167);
          v160.i64[0] = v168.u32[2];
          uint32x4_t v169 = vmovl_u16(*(uint16x4_t *)v167.i8);
          uint64_t v170 = v169.u32[1];
          uint64_t v171 = v169.u32[0];
          uint64_t v366 = v169.u32[3];
          uint64_t v172 = v169.u32[2];
          uint64_t v173 = v168.u32[1];
          uint64_t v174 = v168.u32[0];
          uint16x8_t v175 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v163, (float16x8_t)0), v77));
          uint64_t v367 = v168.u32[3];
          uint32x4_t v176 = vmovl_high_u16(v175);
          v157.i64[0] = v176.u32[2];
          uint32x4_t v177 = vmovl_u16(*(uint16x4_t *)v175.i8);
          v158.i64[1] = v177.u32[3];
          uint64_t v364 = v160.i64[0];
          uint64_t v178 = v177.u32[1];
          uint64_t v179 = v177.u32[0];
          uint64_t v180 = v177.u32[2];
          uint64_t v181 = v176.u32[1];
          uint64_t v182 = v176.u32[0];
          uint64_t v365 = v176.u32[3];
          uint16x8_t v183 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v165, (float16x8_t)0), v77));
          uint32x4_t v184 = vmovl_high_u16(v183);
          *(void *)&long long v151 = v184.u32[0];
          *((void *)&v151 + 1) = v184.u32[1];
          long long v185 = v151;
          uint64_t v363 = v157.i64[0];
          uint32x4_t v186 = vmovl_u16(*(uint16x4_t *)v183.i8);
          *(void *)&long long v151 = v186.u32[2];
          *((void *)&v151 + 1) = v186.u32[3];
          uint64_t v187 = v186.u32[1];
          uint64_t v188 = v186.u32[0];
          uint16x8_t v189 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v162, (float16x8_t)0), v77));
          uint32x4_t v190 = vmovl_high_u16(v189);
          uint32x4_t v191 = vmovl_u16(*(uint16x4_t *)v189.i8);
          uint64_t v192 = v191.u32[1];
          uint64_t v193 = v191.u32[3];
          v158.i16[0] = *(_WORD *)&v35[2 * v191.u32[0]];
          v160.i16[0] = *(_WORD *)&v35[2 * v190.u32[0]];
          uint16x8_t v194 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v164, (float16x8_t)0), v77));
          uint32x4_t v195 = vmovl_high_u16(v194);
          uint32x4_t v196 = vmovl_u16(*(uint16x4_t *)v194.i8);
          v197.i16[0] = *(_WORD *)&v35[2 * v171];
          v132.i16[0] = *(_WORD *)&v35[2 * v174];
          v163.i16[0] = *(_WORD *)&v35[2 * v196.u32[0]];
          v161.i16[0] = *(_WORD *)&v35[2 * v179];
          v190.i16[0] = *(_WORD *)&v35[2 * v195.u32[0]];
          v198.i16[0] = *(_WORD *)&v35[2 * v182];
          uint64_t v199 = v191.u32[2];
          uint16x8_t v200 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v166, (float16x8_t)0), v77));
          v194.i16[0] = *(_WORD *)&v35[2 * v188];
          uint32x4_t v201 = vmovl_u16(*(uint16x4_t *)v200.i8);
          LOWORD(v185) = *(_WORD *)&v35[2 * v185];
          v162.i16[0] = *(_WORD *)&v35[2 * v201.u32[0]];
          uint32x4_t v202 = vmovl_high_u16(v200);
          v42.i64[1] = v202.u32[1];
          v42.i16[0] = *(_WORD *)&v35[2 * v202.u32[0]];
          v197.i16[1] = *(_WORD *)&v35[2 * v170];
          v161.i16[1] = *(_WORD *)&v35[2 * v178];
          v194.i16[1] = *(_WORD *)&v35[2 * v187];
          v197.i16[2] = *(_WORD *)&v35[2 * v172];
          v132.i16[1] = *(_WORD *)&v35[2 * v173];
          v198.i16[1] = *(_WORD *)&v35[2 * v181];
          v161.i16[2] = *(_WORD *)&v35[2 * v180];
          WORD1(v185) = *(_WORD *)&v35[2 * *((void *)&v185 + 1)];
          v194.i16[2] = *(_WORD *)&v35[2 * v151];
          v158.i16[1] = *(_WORD *)&v35[2 * v192];
          v132.i16[2] = *(_WORD *)&v35[2 * v364];
          v158.i16[2] = *(_WORD *)&v35[2 * v199];
          v198.i16[2] = *(_WORD *)&v35[2 * v363];
          v160.i16[1] = *(_WORD *)&v35[2 * v190.u32[1]];
          WORD2(v185) = *(_WORD *)&v35[2 * v184.u32[2]];
          v160.i16[2] = *(_WORD *)&v35[2 * v190.u32[2]];
          float v203 = (__int16 *)&v35[2 * v193];
          float16x8_t v66 = v370;
          v158.i16[3] = *v203;
          v163.i16[1] = *(_WORD *)&v35[2 * v196.u32[1]];
          v160.i16[3] = *(_WORD *)&v35[2 * v190.u32[3]];
          v163.i16[2] = *(_WORD *)&v35[2 * v196.u32[2]];
          v163.i16[3] = *(_WORD *)&v35[2 * v196.u32[3]];
          v190.i16[1] = *(_WORD *)&v35[2 * v195.u32[1]];
          v197.i16[3] = *(_WORD *)&v35[2 * v366];
          v190.i16[2] = *(_WORD *)&v35[2 * v195.u32[2]];
          v161.i16[3] = *(_WORD *)&v35[2 * v158.i64[1]];
          v190.i16[3] = *(_WORD *)&v35[2 * v195.u32[3]];
          v194.i16[3] = *(_WORD *)&v35[2 * *((void *)&v151 + 1)];
          uint64_t result = v369;
          v162.i16[1] = *(_WORD *)&v35[2 * v201.u32[1]];
          v132.i16[3] = *(_WORD *)&v35[2 * v367];
          v162.i16[2] = *(_WORD *)&v35[2 * v201.u32[2]];
          v198.i16[3] = *(_WORD *)&v35[2 * v365];
          v162.i16[3] = *(_WORD *)&v35[2 * v201.u32[3]];
          v42.i16[1] = *(_WORD *)&v35[2 * v202.u32[1]];
          WORD3(v185) = *(_WORD *)&v35[2 * v184.u32[3]];
          v42.i16[2] = *(_WORD *)&v35[2 * v202.u32[2]];
          float32x4_t v204 = vcvtq_f32_f16(v197);
          _H13 = v373;
          float32x4_t v205 = vcvtq_f32_f16(*(float16x4_t *)v161.i8);
          float32x4_t v206 = vcvtq_f32_f16(*(float16x4_t *)v194.i8);
          v42.i16[3] = *(_WORD *)&v35[2 * v202.u32[3]];
          uint64_t v207 = v64 + 128;
          vst4q_f32((float *)v64, *(float32x4x4_t *)(&v83 - 3));
          float v208 = (float *)(v64 + 64);
          v375.val[0] = vcvtq_f32_f16(*(float16x4_t *)v132.i8);
          v375.val[1] = vcvtq_f32_f16(v198);
          v375.val[2] = vcvtq_f32_f16(*(float16x4_t *)&v185);
          v375.val[3] = (float32x4_t)v83;
          vst4q_f32(v208, v375);
          _H7 = v371;
          _H14 = v372;
          float32x4_t v209 = vcvtq_f32_f16(*(float16x4_t *)v158.i8);
          v375.val[0] = vcvtq_f32_f16(*(float16x4_t *)v163.i8);
          v375.val[1] = vcvtq_f32_f16(*(float16x4_t *)v162.i8);
          v375.val[2] = (float32x4_t)v83;
          uint64_t v210 = v85 + 128;
          vst4q_f32((float *)v85, v375);
          float v211 = (float *)(v85 + 64);
          _Q1 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v160.i8);
          float32x4_t v212 = vcvtq_f32_f16(*(float16x4_t *)v190.i8);
          float32x4_t v213 = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
          v375.val[0] = (float32x4_t)v83;
          vst4q_f32(v211, *(float32x4x4_t *)_Q1.i8);
          uint64_t v64 = v207;
          uint64_t v85 = v210;
          int v80 = v368 + 8;
        }
        while (v368 + 8 < v342);
        unint64_t v214 = v323;
        uint16x8_t v65 = v334;
        unint64_t v9 = v335;
        uint64_t v17 = v330;
        unint64_t v10 = v331;
        uint64_t v19 = v328;
        uint64_t v18 = v329;
        unint64_t v29 = v326;
        uint64_t v20 = v327;
        _S15 = v362;
        unsigned __int8 v67 = v324;
        uint64_t v79 = v333;
        float16x8_t v78 = v332;
      }
      if (v10 > v214)
      {
        if (v61) {
          float v215 = 0.0;
        }
        else {
          float v215 = 1.0;
        }
        do
        {
          float v216 = (float)(v84->u16[1] >> v67) - v374;
          float v217 = *((float *)&v76 + 1) * v216;
          float v218 = _S24 * (float)((float)(v66->u16[0] >> v67) - v32);
          float v219 = (float)(*((float *)&v76 + 1) * v216) + v218;
          float v220 = 8191.0;
          if (v219 <= 8191.0)
          {
            float v220 = (float)(*((float *)&v76 + 1) * v216) + v218;
            if (v219 < 0.0) {
              float v220 = 0.0;
            }
          }
          float v221 = (float)(v84->u16[0] >> v67) - v374;
          float v222 = (float)(*((float *)&v75 + 1) * v216) + (float)(v221 * *(float *)&v75);
          float v223 = 8191.0;
          if ((float)(v218 + v222) <= 8191.0)
          {
            float v223 = v218 + v222;
            if ((float)(v218 + v222) < 0.0) {
              float v223 = 0.0;
            }
          }
          float v224 = *(float *)&v76 * v221;
          float v225 = (float)(*(float *)&v76 * v221) + v218;
          float v226 = 8191.0;
          if (v225 <= 8191.0)
          {
            float v226 = v225;
            if (v225 < 0.0) {
              float v226 = 0.0;
            }
          }
          float v227 = _S24 * (float)((float)(v66->u16[1] >> v67) - v32);
          float v228 = 8191.0;
          if ((float)(v217 + v227) <= 8191.0)
          {
            float v228 = v217 + v227;
            if ((float)(v217 + v227) < 0.0) {
              float v228 = 0.0;
            }
          }
          float v229 = 8191.0;
          if ((float)(v222 + v227) <= 8191.0)
          {
            float v229 = v222 + v227;
            if ((float)(v222 + v227) < 0.0) {
              float v229 = 0.0;
            }
          }
          float v230 = v224 + v227;
          BOOL v231 = (float)(v224 + v227) <= 8191.0;
          float v232 = 8191.0;
          if (v231)
          {
            float v232 = v230;
            if (v230 < 0.0) {
              float v232 = 0.0;
            }
          }
          float v233 = _S24 * (float)((float)(*(unsigned __int16 *)result >> v67) - v32);
          float v234 = 8191.0;
          if ((float)(v217 + v233) <= 8191.0)
          {
            float v234 = v217 + v233;
            if ((float)(v217 + v233) < 0.0) {
              float v234 = 0.0;
            }
          }
          float v235 = 8191.0;
          if ((float)(v222 + v233) <= 8191.0)
          {
            float v235 = v222 + v233;
            if ((float)(v222 + v233) < 0.0) {
              float v235 = 0.0;
            }
          }
          float v236 = v224 + v233;
          BOOL v231 = (float)(v224 + v233) <= 8191.0;
          float v237 = 8191.0;
          if (v231)
          {
            float v237 = v236;
            if (v236 < 0.0) {
              float v237 = 0.0;
            }
          }
          float v238 = _S24 * (float)((float)(*((unsigned __int16 *)result + 1) >> v67) - v32);
          float v239 = v217 + v238;
          float v240 = 8191.0;
          if (v239 <= 8191.0)
          {
            float v240 = v239;
            if (v239 < 0.0) {
              float v240 = 0.0;
            }
          }
          float v241 = v222 + v238;
          BOOL v231 = (float)(v222 + v238) <= 8191.0;
          float v242 = 8191.0;
          if (v231)
          {
            float v242 = v241;
            if (v241 < 0.0) {
              float v242 = 0.0;
            }
          }
          float v243 = 8191.0;
          if ((float)(v224 + v238) <= 8191.0)
          {
            float v243 = v224 + v238;
            if ((float)(v224 + v238) < 0.0) {
              float v243 = 0.0;
            }
          }
          _H2 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0))];
          __asm { FCVT            S2, H2 }
          _H0 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v226, 0.0), 8191.0))];
          __asm { FCVT            S1, H1 }
          _H3 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0))];
          _H14 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0))];
          _H5 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v232, 0.0), 8191.0))];
          _H12 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v234, 0.0), 8191.0))];
          _H29 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v235, 0.0), 8191.0))];
          _H10 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v237, 0.0), 8191.0))];
          _H23 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v240, 0.0), 8191.0))];
          _H25 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v242, 0.0), 8191.0))];
          _H26 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v243, 0.0), 8191.0))];
          float v259 = fmaxf(_S2, fmaxf(_S0, _S1));
          float v260 = (float)((float)((float)(v352 * _S0) + (float)(v353 * _S2)) + (float)(v351 * _S1))
               + (float)(_S15 * v259);
          float v261 = 8191.0;
          if (v260 <= 8191.0)
          {
            float v261 = (float)((float)((float)(v352 * _S0) + (float)(v353 * _S2)) + (float)(v351 * _S1))
                 + (float)(_S15 * v259);
            if (v260 < 0.0) {
              float v261 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H3
            FCVT            S4, H14
            FCVT            S5, H5
          }
          _H27 = *(_WORD *)&v30[2 * llroundf(v261)];
          float v266 = fmaxf(_S3, fmaxf(_S4, _S5));
          float v267 = (float)((float)((float)(v352 * _S4) + (float)(v353 * _S3)) + (float)(v351 * _S5))
               + (float)(_S15 * v266);
          float v268 = 8191.0;
          if (v267 <= 8191.0)
          {
            float v268 = (float)((float)((float)(v352 * _S4) + (float)(v353 * _S3)) + (float)(v351 * _S5))
                 + (float)(_S15 * v266);
            if (v267 < 0.0) {
              float v268 = 0.0;
            }
          }
          __asm
          {
            FCVT            S11, H12
            FCVT            S29, H29
            FCVT            S10, H10
          }
          _H12 = *(_WORD *)&v30[2 * llroundf(v268)];
          float v273 = fmaxf(_S11, fmaxf(_S29, _S10));
          float v274 = (float)((float)((float)(v352 * _S29) + (float)(v353 * _S11)) + (float)(v351 * _S10))
               + (float)(_S15 * v273);
          float v275 = 8191.0;
          if (v274 <= 8191.0)
          {
            float v275 = (float)((float)((float)(v352 * _S29) + (float)(v353 * _S11)) + (float)(v351 * _S10))
                 + (float)(_S15 * v273);
            if (v274 < 0.0) {
              float v275 = 0.0;
            }
          }
          __asm
          {
            FCVT            S23, H23
            FCVT            S25, H25
            FCVT            S26, H26
          }
          _H13 = *(_WORD *)&v30[2 * llroundf(v275)];
          float v280 = (float)((float)((float)(v352 * _S25) + (float)(v353 * _S23)) + (float)(v351 * _S26))
               + (float)(_S15 * fmaxf(_S23, fmaxf(_S25, _S26)));
          float v281 = 8191.0;
          if (v280 <= 8191.0)
          {
            float v281 = v280;
            if (v280 < 0.0) {
              float v281 = 0.0;
            }
          }
          __asm { FCVT            S6, H27 }
          float v283 = _S2 * _S6;
          float v284 = _S0 * _S6;
          float v285 = _S1 * _S6;
          __asm { FCVT            S6, H12 }
          float v287 = _S3 * _S6;
          float v288 = _S4 * _S6;
          float v289 = _S5 * _S6;
          __asm { FCVT            S6, H13 }
          float v291 = _S11 * _S6;
          float v292 = _S29 * _S6;
          float v293 = _S10 * _S6;
          _H27 = *(_WORD *)&v30[2 * llroundf(v281)];
          __asm { FCVT            S27, H27 }
          float v296 = _S23 * _S27;
          _S25 = _S25 * _S27;
          _S26 = _S26 * _S27;
          float v299 = (float)((float)(v360 * v284) + (float)(v283 * v361)) + (float)(v285 * v359);
          float v300 = (float)((float)(v357 * v284) + (float)(v283 * v358)) + (float)(v285 * v356);
          _S0 = (float)((float)(_S17 * v284) + (float)(v283 * v355)) + (float)(v285 * v354);
          _S1 = (float)((float)(v360 * v288) + (float)(v287 * v361)) + (float)(v289 * v359);
          _S2 = (float)((float)(v357 * v288) + (float)(v287 * v358)) + (float)(v289 * v356);
          _S3 = (float)((float)(_S17 * v288) + (float)(v287 * v355)) + (float)(v289 * v354);
          _S4 = (float)((float)(v360 * v292) + (float)(v291 * v361)) + (float)(v293 * v359);
          _S5 = (float)((float)(v357 * v292) + (float)(v291 * v358)) + (float)(v293 * v356);
          _S6 = (float)((float)(_S17 * v292) + (float)(v291 * v355)) + (float)(v293 * v354);
          _S7 = (float)((float)(v360 * _S25) + (float)(v296 * v361)) + (float)(_S26 * v359);
          _S16 = (float)((float)(v357 * _S25) + (float)(v296 * v358)) + (float)(_S26 * v356);
          _S23 = (float)((float)(_S17 * _S25) + (float)(v296 * v355)) + (float)(_S26 * v354);
          LOWORD(_S25) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v299, 0.0), 8191.0))];
          LOWORD(_S26) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v300, 0.0), 8191.0))];
          LOWORD(_S0) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
          LOWORD(_S1) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0))];
          LOWORD(_S2) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0))];
          LOWORD(_S3) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
          LOWORD(_S4) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0))];
          LOWORD(_S5) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          LOWORD(_S6) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0))];
          LOWORD(_S7) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0))];
          LOWORD(_S16) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0))];
          LOWORD(_S23) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0))];
          __asm
          {
            FCVT            S25, H25
            FCVT            S26, H26
          }
          *(_DWORD *)uint64_t v64 = _S25;
          *(_DWORD *)(v64 + 4) = _S26;
          __asm { FCVT            S0, H0 }
          *(_DWORD *)(v64 + 8) = _S0;
          *(float *)(v64 + 12) = v215;
          __asm
          {
            FCVT            S0, H1
            FCVT            S1, H2
          }
          *(_DWORD *)(v64 + 16) = _S0;
          *(_DWORD *)(v64 + 20) = _S1;
          __asm { FCVT            S0, H3 }
          *(_DWORD *)(v64 + 24) = _S0;
          *(float *)(v64 + 28) = v215;
          __asm
          {
            FCVT            S0, H4
            FCVT            S1, H5
          }
          *(_DWORD *)uint64_t v85 = _S0;
          *(_DWORD *)(v85 + 4) = _S1;
          __asm
          {
            FCVT            S0, H6
            FCVT            S1, H7
            FCVT            S2, H16
          }
          *(_DWORD *)(v85 + 8) = _S0;
          *(float *)(v85 + 12) = v215;
          __asm { FCVT            S0, H23 }
          *(_DWORD *)(v85 + 16) = _S1;
          *(_DWORD *)(v85 + 20) = _S2;
          v214 += 2;
          float v84 = (uint16x8_t *)((char *)v84 + 4);
          float16x8_t v66 = (uint16x8_t *)((char *)v66 + 4);
          *(_DWORD *)(v85 + 24) = _S0;
          *(float *)(v85 + 28) = v215;
          result += 4;
          v64 += 32;
          v85 += 32;
          _S15 = v362;
          _H14 = v372;
          _H13 = v373;
          _H7 = v371;
        }
        while (v10 > v214);
      }
      float16x8_t v66 = (uint16x8_t *)&v78[v17];
      uint16x8_t v65 = (uint16x8_t *)((char *)v65 + v18);
      v61 += v19 + v19;
      uint64_t v64 = v79 + v20;
      v9 += 2;
      uint16x8_t v74 = v336;
    }
    while (v29 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    float v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    float v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v22 = (float)LODWORD(a5);
    float v23 = v20 * *(float *)v13;
    float v169 = v20 * *(float *)(v13 + 16);
    float v170 = v20 * *(float *)(v13 + 8);
    float v167 = v20 * *(float *)(v13 + 28);
    float v168 = v20 * *(float *)(v13 + 20);
    float v24 = *(float *)(v13 + 80);
    float v165 = *(float *)(v13 + 76);
    float v166 = *(float *)(v13 + 72);
    float v25 = *(float *)(v13 + 84);
    float v26 = *(float *)(v13 + 88);
    float v27 = *(float *)(v13 + 92);
    float v28 = *(float *)(v13 + 96);
    float v29 = *(float *)(v13 + 100);
    float v30 = *(float *)(v13 + 104);
    uint64_t v31 = v13 + 164;
    uint64_t v32 = v13 + 16548;
    uint64_t v33 = v13 + 32932;
    float v34 = *(float *)(v13 + 108);
    float v35 = *(float *)(v13 + 112);
    float v36 = *(float *)(v13 + 116);
    float v37 = *(float *)(v13 + 120);
    uint64_t v38 = *((void *)result + 14);
    uint64_t v39 = (void *)*((void *)result + 16);
    uint64_t v40 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v41 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(*v14 + v16 * v11 + 2 * v41);
    uint64_t v42 = v14[2];
    _ZF = v42 == 0;
    uint64_t v44 = v42 + v18 * v11 + 2 * v41;
    if (_ZF) {
      uint64_t v44 = 0;
    }
    uint64_t v45 = *v39 + v40 * v19 + 16 * v38;
    unsigned int v46 = *(unsigned __int8 *)(v13 + 124);
    if (v46 >= 0x11) {
      char v47 = 0;
    }
    else {
      char v47 = 16 - v46;
    }
    uint64_t v48 = v14[1] + v17 * (v11 / 2) + 2 * v41;
    float v171 = (float)LODWORD(a5);
    float v172 = v21;
    do
    {
      uint64_t v49 = v45 + v19;
      float v50 = &result[v16];
      if (v10)
      {
        unint64_t v51 = 0;
        if (v44) {
          float v52 = 0.0;
        }
        else {
          float v52 = 1.0;
        }
        uint64_t v53 = &result[v16];
        uint64_t v54 = v45 + v19;
        do
        {
          uint64_t v55 = (unsigned __int16 *)(v48 + 2 * v51);
          float v56 = (float)(v55[1] >> v47) - v22;
          float v57 = v170 * v56;
          float v58 = v23 * (float)((float)(*(unsigned __int16 *)result >> v47) - v21);
          float v59 = (float)(v170 * v56) + v58;
          float v60 = 8191.0;
          if (v59 <= 8191.0)
          {
            float v60 = (float)(v170 * v56) + v58;
            if (v59 < 0.0) {
              float v60 = 0.0;
            }
          }
          float v61 = (float)(*v55 >> v47) - v22;
          float v62 = (float)(v168 * v56) + (float)(v61 * v169);
          float v63 = 8191.0;
          if ((float)(v58 + v62) <= 8191.0)
          {
            float v63 = v58 + v62;
            if ((float)(v58 + v62) < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = v167 * v61;
          float v65 = (float)(v167 * v61) + v58;
          float v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            float v66 = v65;
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v23 * (float)((float)(*((unsigned __int16 *)result + 1) >> v47) - v21);
          float v68 = 8191.0;
          if ((float)(v57 + v67) <= 8191.0)
          {
            float v68 = v57 + v67;
            if ((float)(v57 + v67) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = 8191.0;
          if ((float)(v62 + v67) <= 8191.0)
          {
            float v69 = v62 + v67;
            if ((float)(v62 + v67) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v64 + v67;
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v23 * (float)((float)(*(unsigned __int16 *)v53 >> v47) - v21);
          float v73 = 8191.0;
          if ((float)(v57 + v72) <= 8191.0)
          {
            float v73 = v57 + v72;
            if ((float)(v57 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = 8191.0;
          if ((float)(v62 + v72) <= 8191.0)
          {
            float v74 = v62 + v72;
            if ((float)(v62 + v72) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v64 + v72;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v23 * (float)((float)(*((unsigned __int16 *)v53 + 1) >> v47) - v21);
          float v78 = v57 + v77;
          BOOL v79 = (float)(v57 + v77) <= 8191.0;
          float v80 = 8191.0;
          if (v79)
          {
            float v80 = v78;
            if (v78 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v62 + v77;
          BOOL v79 = (float)(v62 + v77) <= 8191.0;
          float v82 = 8191.0;
          if (v79)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v64 + v77;
          BOOL v79 = (float)(v64 + v77) <= 8191.0;
          float v84 = 8191.0;
          if (v79)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          __asm { FCVT            S8, H2 }
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S9, H2 }
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S10, H2 }
          _H12 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          float v103 = (float)((float)((float)(v35 * _S9) + (float)(v34 * _S8)) + (float)(v36 * _S10))
               + (float)(v37 * fmaxf(_S8, fmaxf(_S9, _S10)));
          float v104 = 8191.0;
          if (v103 <= 8191.0)
          {
            float v104 = v103;
            if (v103 < 0.0) {
              float v104 = 0.0;
            }
          }
          __asm
          {
            FCVT            S4, H12
            FCVT            S5, H15
            FCVT            S6, H3
          }
          _H12 = *(_WORD *)(v32 + 2 * llroundf(v104));
          float v109 = (float)((float)((float)(v35 * _S5) + (float)(v34 * _S4)) + (float)(v36 * _S6))
               + (float)(v37 * fmaxf(_S4, fmaxf(_S5, _S6)));
          float v110 = 8191.0;
          if (v109 <= 8191.0)
          {
            float v110 = v109;
            if (v109 < 0.0) {
              float v110 = 0.0;
            }
          }
          __asm
          {
            FCVT            S14, H14
            FCVT            S15, H7
            FCVT            S7, H2
          }
          _H1 = *(_WORD *)(v32 + 2 * llroundf(v110));
          float v115 = fmaxf(_S14, fmaxf(_S15, _S7));
          float v116 = (float)((float)((float)(v35 * _S15) + (float)(v34 * _S14)) + (float)(v36 * _S7)) + (float)(v37 * v115);
          float v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            float v117 = (float)((float)((float)(v35 * _S15) + (float)(v34 * _S14)) + (float)(v36 * _S7))
                 + (float)(v37 * v115);
            if (v116 < 0.0) {
              float v117 = 0.0;
            }
          }
          __asm
          {
            FCVT            S2, H30
            FCVT            S3, H11
            FCVT            S30, H13
          }
          _H11 = *(_WORD *)(v32 + 2 * llroundf(v117));
          float v122 = (float)((float)((float)(v35 * _S3) + (float)(v34 * _S2)) + (float)(v36 * _S30))
               + (float)(v37 * fmaxf(_S2, fmaxf(_S3, _S30)));
          float v123 = 8191.0;
          if (v122 <= 8191.0)
          {
            float v123 = v122;
            if (v122 < 0.0) {
              float v123 = 0.0;
            }
          }
          __asm { FCVT            S16, H12 }
          float v125 = _S8 * _S16;
          float v126 = _S9 * _S16;
          float v127 = _S10 * _S16;
          __asm { FCVT            S1, H1 }
          float v129 = _S4 * _S1;
          float v130 = _S5 * _S1;
          float v131 = _S6 * _S1;
          __asm { FCVT            S6, H11 }
          float v133 = _S14 * _S6;
          float v134 = _S15 * _S6;
          float v135 = _S7 * _S6;
          _H7 = *(_WORD *)(v32 + 2 * llroundf(v123));
          __asm { FCVT            S7, H7 }
          float v138 = _S2 * _S7;
          _S3 = _S3 * _S7;
          _S7 = _S30 * _S7;
          _S30 = (float)((float)(v165 * v126) + (float)(v125 * v166)) + (float)(v127 * v24);
          float v142 = (float)((float)(v26 * v126) + (float)(v125 * v25)) + (float)(v127 * v27);
          _S16 = (float)((float)(v29 * v126) + (float)(v125 * v28)) + (float)(v127 * v30);
          _S8 = (float)((float)(v165 * v130) + (float)(v129 * v166)) + (float)(v131 * v24);
          _S9 = (float)((float)(v26 * v130) + (float)(v129 * v25)) + (float)(v131 * v27);
          _S1 = (float)((float)(v29 * v130) + (float)(v129 * v28)) + (float)(v131 * v30);
          _S4 = (float)((float)(v165 * v134) + (float)(v133 * v166)) + (float)(v135 * v24);
          _S5 = (float)((float)(v26 * v134) + (float)(v133 * v25)) + (float)(v135 * v27);
          _S6 = (float)((float)(v29 * v134) + (float)(v133 * v28)) + (float)(v135 * v30);
          _S10 = (float)((float)(v165 * _S3) + (float)(v138 * v166)) + (float)(_S7 * v24);
          float v151 = (float)((float)(v26 * _S3) + (float)(v138 * v25)) + (float)(_S7 * v27);
          _S2 = (float)((float)(v29 * _S3) + (float)(v138 * v28)) + (float)(_S7 * v30);
          LOWORD(_S3) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          LOWORD(_S16) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S9, 0.0), 8191.0)));
          LOWORD(_S1) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S9) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v33 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S7, H7
          }
          *(_DWORD *)uint64_t v45 = _S3;
          *(_DWORD *)(v45 + 4) = _S7;
          __asm { FCVT            S3, H16 }
          *(_DWORD *)(v45 + 8) = _S3;
          *(float *)(v45 + 12) = v52;
          __asm
          {
            FCVT            S3, H30
            FCVT            S7, H8
          }
          *(_DWORD *)(v45 + 16) = _S3;
          *(_DWORD *)(v45 + 20) = _S7;
          __asm { FCVT            S1, H1 }
          *(_DWORD *)(v45 + 24) = _S1;
          *(float *)(v45 + 28) = v52;
          __asm
          {
            FCVT            S1, H4
            FCVT            S3, H5
          }
          *(_DWORD *)uint64_t v54 = _S1;
          *(_DWORD *)(v54 + 4) = _S3;
          result += 4;
          v53 += 4;
          __asm
          {
            FCVT            S1, H6
            FCVT            S3, H9
            FCVT            S4, H10
          }
          *(_DWORD *)(v54 + 8) = _S1;
          *(float *)(v54 + 12) = v52;
          __asm { FCVT            S1, H2 }
          v45 += 32;
          *(_DWORD *)(v54 + 16) = _S3;
          *(_DWORD *)(v54 + 20) = _S4;
          *(_DWORD *)(v54 + 24) = _S1;
          *(float *)(v54 + 28) = v52;
          v54 += 32;
          v51 += 2;
          float v22 = v171;
          float v21 = v172;
        }
        while (v10 > v51);
      }
      uint64_t result = &v50[v16];
      v48 += v17;
      v44 += v18 + v18;
      uint64_t v45 = v49 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_RGfA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_TRC_Mat_TRC_RGfA_neon_fp16_GCD(unint64_t result, uint64_t a2, int16x4_t _D0)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44);
    uint64_t v12 = v11 + 2 * v7;
    uint64_t v13 = v11 + 2 * v8;
    uint64_t v14 = *(float32x2_t **)(result + 152);
    uint64_t v16 = *(uint64_t **)(result + 56);
    uint64_t v15 = *(uint64_t **)(result + 64);
    uint64_t v17 = *v15;
    uint64_t v18 = v15[1];
    uint64_t v19 = v15[2];
    uint64_t v20 = **(void **)(result + 136);
    unsigned int v21 = v14[17].u16[2];
    LODWORD(v15) = v14[17].u16[3];
    _D0.i32[0] = v14->i32[0];
    v22.i32[0] = v14[3].i32[1];
    _S31 = v14[9].f32[0];
    _S23 = v14[9].f32[1];
    _S15 = v14[10].f32[0];
    unint64_t v26 = v13 - v12;
    float v27 = (char *)&v14[20] + 4;
    float v28 = (float)v21;
    float v316 = (float)v15;
    v3.f32[0] = 8191.0 / (float)v14[16].u32[0];
    _S20 = v3.f32[0] * v14->f32[0];
    uint64_t v30 = (char *)&v14[2068] + 4;
    __asm { FCVT            H0, S20 }
    short float v271 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v21;
    int16x8_t v35 = vdupq_lane_s16(_D0, 0);
    v22.i32[1] = v14[1].i32[0];
    *(float32x2_t *)v4.f32 = vmul_n_f32(v22, v3.f32[0]);
    float16x8_t v36 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    *(float32x2_t *)v3.f32 = vmul_n_f32(v14[2], v3.f32[0]);
    float16x8_t v37 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    short float v38 = -(short float)v15;
    float16x8_t v39 = vmulq_n_f16(v36, v38);
    int64x2_t v40 = (int64x2_t)vmulq_n_f16(v37, v38);
    __asm
    {
      FCVT            H12, S31
      FCVT            H5, S23
      FCVT            H9, S15
    }
    short float v293 = _H9;
    float v303 = v14[10].f32[1];
    __asm { FCVT            H2, S2 }
    float v302 = v14[11].f32[0];
    __asm { FCVT            H3, S3 }
    float v294 = v14[11].f32[1];
    __asm { FCVT            H6, S22 }
    float v290 = v14[12].f32[1];
    float v291 = v14[12].f32[0];
    __asm
    {
      FCVT            H8, S26
      FCVT            H7, S7
    }
    float v289 = v14[13].f32[0];
    __asm { FCVT            H13, S16 }
    unsigned int v50 = v14[15].u8[4];
    uint64_t v51 = v16[1];
    uint64_t v52 = v16[2];
    if (v12 >= 0) {
      uint64_t v53 = v12;
    }
    else {
      uint64_t v53 = v12 + 1;
    }
    uint64_t v54 = *v16;
    uint64_t v55 = v51 + v18 * (v53 >> 1);
    uint64_t v56 = *(void *)(result + 112);
    float v57 = *(uint64_t **)(result + 128);
    uint64_t v58 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v6);
    uint64_t result = *(void *)(result + 36);
    uint64_t v59 = *v57;
    if (v50 >= 0x11) {
      unsigned __int8 v60 = 0;
    }
    else {
      unsigned __int8 v60 = 16 - v50;
    }
    uint64_t v61 = v59 + v20 * v58 + 16 * v56;
    if (v52) {
      uint64_t v62 = v52 + v19 * v12 + 2 * result;
    }
    else {
      uint64_t v62 = 0;
    }
    uint16x8_t v270 = (uint16x8_t)vdupq_n_s16(-v60);
    float v63 = (uint16x8_t *)(v55 + 2 * result);
    float v64 = (uint16x8_t *)(v54 + v17 * v12 + 2 * result);
    unint64_t v268 = v10 & 0xFFFFFFF8;
    float v298 = v3.f32[0];
    float16x8_t v299 = v36;
    float v300 = v4.f32[0];
    float16x8_t v301 = (float16x8_t)v35;
    float v286 = v4.f32[1];
    float v287 = v3.f32[1];
    float16x8_t v296 = v39;
    float16x8_t v297 = v37;
    float16x8_t v295 = (float16x8_t)v40;
    short float v314 = _H13;
    short float v315 = _H12;
    short float v292 = _H2;
    short float v285 = _H3;
    uint64_t v279 = v17;
    unint64_t v280 = v10;
    uint64_t v277 = v19;
    uint64_t v278 = v18;
    uint64_t v276 = v20;
    float v274 = _S23;
    float v275 = _S31;
    float v273 = _S15;
    unint64_t v272 = v26;
    int v288 = v10 - 7;
    unsigned __int8 v269 = v60;
    short float v304 = _H5;
    do
    {
      float v65 = &v64->i8[v17];
      uint64_t v66 = v61 + v20;
      if ((int)v10 < 8)
      {
        unint64_t v188 = 0;
        uint64_t v73 = v61 + v20;
        float v72 = v63;
        float v71 = (uint16x8_t *)((char *)v64 + v17);
      }
      else
      {
        uint64_t v284 = v62;
        v40.i64[0] = 0;
        int v67 = 0;
        v37.i64[0] = v62;
        int8x16_t v68 = (int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v37, v40).i64[0], 0);
        __asm { FMOV            V1.4S, #1.0 }
        int8x16_t v70 = vandq_s8(_Q1, v68);
        float v281 = &v64->i8[v17];
        uint64_t v282 = v61 + v20;
        float v71 = (uint16x8_t *)((char *)v64 + v17);
        float v283 = v63;
        float v72 = v63;
        uint64_t v73 = v61 + v20;
        short float v74 = _H3;
        v75.i64[0] = 0x9000900090009000;
        v75.i64[1] = 0x9000900090009000;
        do
        {
          int v312 = v67;
          uint16x8_t v76 = *v72++;
          float16x8_t v77 = vcvtq_f16_u16(vshlq_u16(v76, v270));
          int16x8_t v78 = (int16x8_t)vmlaq_f16(v296, v299, v77);
          int8x16_t v79 = (int8x16_t)vmlaq_f16(v295, v297, v77);
          v77.i64[0] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u64[0];
          *(int16x4_t *)v80.i8 = vuzp1_s16(*(int16x4_t *)v78.i8, *(int16x4_t *)v77.i8);
          *(int16x4_t *)v77.i8 = vuzp2_s16(*(int16x4_t *)v78.i8, *(int16x4_t *)v77.i8);
          v77.i64[1] = v77.i64[0];
          v80.i64[1] = v77.i64[0];
          v78.i64[0] = vextq_s8(v79, v79, 8uLL).u64[0];
          float16x8_t v81 = (float16x8_t)vzip1q_s16((int16x8_t)v77, (int16x8_t)v77);
          *(float16x4_t *)v78.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v78.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v78.i8));
          v78.i64[1] = v81.i64[0];
          float16x8_t v313 = v64 + 1;
          float16x8_t v82 = (float16x8_t)vzip1q_s16(v80, v80);
          uint16x8_t v83 = *v71++;
          float16x8_t v84 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(*v64, v270)), v301);
          float16x8_t v85 = vsubq_f16(vcvtq_f16_u16(vshlq_u16(v83, v270)), v301);
          float16x8_t v86 = v81;
          float16x8_t v87 = vmlaq_n_f16(v81, v85, v271);
          float16x8_t v88 = (float16x8_t)vzip1q_s16(v78, v78);
          float16x8_t v89 = vmlaq_n_f16(v88, v85, v271);
          float16x8_t v90 = vmlaq_n_f16(v82, v84, v271);
          float16x8_t v91 = vmlaq_n_f16(v82, v85, v271);
          float16x8_t v92 = vmlaq_n_f16(v88, v84, v271);
          uint16x8_t v93 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v86, v84, v271), (float16x8_t)0), v75));
          uint32x4_t v94 = vmovl_high_u16(v93);
          v95.i64[0] = v94.u32[2];
          v95.i64[1] = v94.u32[3];
          float16x8_t v96 = v95;
          v95.i64[0] = v94.u32[0];
          v95.i64[1] = v94.u32[1];
          float16x8_t v97 = v95;
          uint32x4_t v98 = vmovl_u16(*(uint16x4_t *)v93.i8);
          v95.i64[0] = v98.u32[2];
          v95.i64[1] = v98.u32[3];
          float16x8_t v99 = v95;
          uint64_t v100 = v98.u32[1];
          v86.i16[0] = *(_WORD *)&v27[2 * v98.u32[0]];
          uint64_t v101 = v97.i64[1];
          float v310 = (__int16 *)&v27[2 * v97.i64[0]];
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v75));
          uint32x4_t v103 = vmovl_high_u16(v102);
          float v104 = (__int16 *)&v27[2 * v96.i64[0]];
          float16x8_t v105 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v102.i8);
          v105.i16[0] = *(_WORD *)&v27[2 * v105.u32[0]];
          uint64_t v106 = v103.u32[1];
          float16x8_t v107 = (__int16 *)&v27[2 * v103.u32[0]];
          uint64_t v108 = v103.u32[3];
          float v109 = (__int16 *)&v27[2 * v103.u32[2]];
          float v110 = (__int16 *)&v27[2 * v100];
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v90, (float16x8_t)0), v75));
          float16x8_t v112 = (float16x8_t)vmovl_high_u16(v111);
          v95.i64[0] = v112.u32[2];
          v95.i64[1] = v112.u32[3];
          float16x8_t v113 = v95;
          v95.i64[0] = v112.u32[0];
          uint32x4_t v114 = vmovl_u16(*(uint16x4_t *)v111.i8);
          float v115 = (__int16 *)&v27[2 * v101];
          v112.i16[0] = *(_WORD *)&v27[2 * v114.u32[0]];
          float v116 = (__int16 *)&v27[2 * v96.i64[1]];
          float v117 = (__int16 *)&v27[2 * v114.u32[1]];
          float v118 = (__int16 *)&v27[2 * v114.u32[2]];
          uint64_t v119 = (__int16 *)&v27[2 * v114.u32[3]];
          v86.i16[1] = *v110;
          uint64_t v120 = (__int16 *)&v27[2 * v95.i64[0]];
          float16x8_t v121 = (__int16 *)&v27[2 * v112.u32[1]];
          float v122 = (__int16 *)&v27[2 * v113.i64[0]];
          float v123 = (__int16 *)&v27[2 * v113.i64[1]];
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v87, (float16x8_t)0), v75));
          float16x8_t v125 = (float16x8_t)vmovl_high_u16(v124);
          v95.i64[0] = v125.u32[2];
          v95.i64[1] = v125.u32[3];
          float16x8_t v126 = v95;
          v95.i64[0] = v125.u32[0];
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v124.i8);
          v125.i16[0] = *(_WORD *)&v27[2 * v127.u32[0]];
          v112.i16[1] = *v117;
          v86.i16[2] = *(_WORD *)&v27[2 * v99.i64[0]];
          v105.i16[1] = *(_WORD *)&v27[2 * v105.u32[1]];
          float v128 = (__int16 *)&v27[2 * v95.i64[0]];
          v112.i16[2] = *v118;
          float v129 = (__int16 *)&v27[2 * v125.u32[1]];
          float v130 = (__int16 *)&v27[2 * v126.i64[0]];
          float v131 = (__int16 *)&v27[2 * v126.i64[1]];
          v86.i16[3] = *(_WORD *)&v27[2 * v99.i64[1]];
          v125.i16[1] = *(_WORD *)&v27[2 * v127.u32[1]];
          v125.i16[2] = *(_WORD *)&v27[2 * v127.u32[2]];
          v105.i16[2] = *(_WORD *)&v27[2 * v105.u32[2]];
          v125.i16[3] = *(_WORD *)&v27[2 * v127.u32[3]];
          v112.i16[3] = *v119;
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v89, (float16x8_t)0), v75));
          uint32x4_t v133 = vmovl_high_u16(v132);
          v95.i64[0] = v133.u32[2];
          v95.i64[1] = v133.u32[3];
          float16x8_t v134 = v95;
          v95.i64[1] = v133.u32[1];
          v125.i16[4] = *v128;
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v132.i8);
          v86.i16[4] = *v310;
          v126.i16[0] = *(_WORD *)&v27[2 * v135.u32[0]];
          v105.i16[3] = *(_WORD *)&v27[2 * v105.u32[3]];
          v112.i16[4] = *v120;
          v125.i16[5] = *v129;
          v86.i16[5] = *v115;
          v105.i16[4] = *v107;
          v126.i16[1] = *(_WORD *)&v27[2 * v135.u32[1]];
          v126.i16[2] = *(_WORD *)&v27[2 * v135.u32[2]];
          v112.i16[5] = *v121;
          v126.i16[3] = *(_WORD *)&v27[2 * v135.u32[3]];
          v126.i16[4] = *(_WORD *)&v27[2 * v133.u32[0]];
          v125.i16[6] = *v130;
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v91, (float16x8_t)0), v75));
          uint32x4_t v137 = vmovl_high_u16(v136);
          v126.i16[5] = *(_WORD *)&v27[2 * v95.i64[1]];
          float16x8_t v138 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v136.i8);
          v86.i16[6] = *v104;
          v105.i16[5] = *(_WORD *)&v27[2 * v106];
          v138.i16[0] = *(_WORD *)&v27[2 * v138.u32[0]];
          v112.i16[6] = *v122;
          v125.i16[7] = *v131;
          v126.i16[6] = *(_WORD *)&v27[2 * v134.i64[0]];
          v86.i16[7] = *v116;
          v138.i16[1] = *(_WORD *)&v27[2 * v138.u32[1]];
          v105.i16[6] = *v109;
          v138.i16[2] = *(_WORD *)&v27[2 * v138.u32[2]];
          v138.i16[3] = *(_WORD *)&v27[2 * v138.u32[3]];
          v112.i16[7] = *v123;
          v138.i16[4] = *(_WORD *)&v27[2 * v137.u32[0]];
          v138.i16[5] = *(_WORD *)&v27[2 * v137.u32[1]];
          v126.i16[7] = *(_WORD *)&v27[2 * v134.i64[1]];
          v138.i16[6] = *(_WORD *)&v27[2 * v137.u32[2]];
          v138.i16[7] = *(_WORD *)&v27[2 * v137.u32[3]];
          v105.i16[7] = *(_WORD *)&v27[2 * v108];
          float16x8_t v139 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v86, _H12), v105, v304), v112, v293);
          float16x8_t v140 = vmlaq_n_f16(vmulq_n_f16(v112, _H13), v105, _H7);
          float16x8_t v141 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, _H12), v126, v304), v138, v293);
          float16x8_t v142 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v86, v292), v105, v74), v112, _H6);
          float16x8_t v143 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v292), v126, v74), v138, _H6);
          float16x8_t v144 = vmlaq_n_f16(v140, v86, _H8);
          float16x8_t v145 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, _H13), v126, _H7), v125, _H8);
          uint16x8_t v146 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v139, (float16x8_t)0), v75));
          uint32x4_t v147 = vmovl_high_u16(v146);
          v86.i64[0] = v147.u32[2];
          uint32x4_t v148 = vmovl_u16(*(uint16x4_t *)v146.i8);
          uint64_t v149 = v148.u32[1];
          uint64_t v150 = v148.u32[0];
          uint64_t v309 = v148.u32[3];
          uint64_t v151 = v148.u32[2];
          uint64_t v152 = v147.u32[1];
          uint64_t v153 = v147.u32[0];
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v142, (float16x8_t)0), v75));
          uint64_t v311 = v147.u32[3];
          uint32x4_t v155 = vmovl_high_u16(v154);
          v126.i64[0] = v155.u32[2];
          uint32x4_t v156 = vmovl_u16(*(uint16x4_t *)v154.i8);
          uint64_t v306 = v86.i64[0];
          uint64_t v157 = v156.u32[1];
          uint64_t v158 = v156.u32[0];
          uint64_t v307 = v156.u32[3];
          uint64_t v159 = v156.u32[2];
          uint64_t v160 = v155.u32[1];
          uint64_t v161 = v155.u32[0];
          uint64_t v308 = v155.u32[3];
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v144, (float16x8_t)0), v75));
          uint32x4_t v163 = vmovl_high_u16(v162);
          v95.i64[0] = v163.u32[0];
          v95.i64[1] = v163.u32[1];
          float16x8_t v164 = v95;
          uint64_t v305 = v126.i64[0];
          uint32x4_t v165 = vmovl_u16(*(uint16x4_t *)v162.i8);
          v95.i64[0] = v165.u32[2];
          v144.i64[1] = v165.u32[3];
          uint64_t v166 = v165.u32[1];
          uint64_t v167 = v165.u32[0];
          uint16x8_t v168 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v141, (float16x8_t)0), v75));
          uint32x4_t v169 = vmovl_high_u16(v168);
          uint32x4_t v170 = vmovl_u16(*(uint16x4_t *)v168.i8);
          v144.i16[0] = *(_WORD *)&v30[2 * v170.u32[0]];
          v169.i16[0] = *(_WORD *)&v30[2 * v169.u32[0]];
          uint16x8_t v171 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v143, (float16x8_t)0), v75));
          uint32x4_t v172 = vmovl_high_u16(v171);
          uint32x4_t v173 = vmovl_u16(*(uint16x4_t *)v171.i8);
          v174.i16[0] = *(_WORD *)&v30[2 * v150];
          uint64_t result = v173.u32[1];
          v142.i16[0] = *(_WORD *)&v30[2 * v153];
          v170.i16[0] = *(_WORD *)&v30[2 * v173.u32[0]];
          v175.i16[0] = *(_WORD *)&v30[2 * v158];
          v171.i16[0] = *(_WORD *)&v30[2 * v172.u32[0]];
          v176.i16[0] = *(_WORD *)&v30[2 * v161];
          uint16x8_t v177 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v145, (float16x8_t)0), v75));
          v126.i16[0] = *(_WORD *)&v30[2 * v167];
          uint32x4_t v178 = vmovl_u16(*(uint16x4_t *)v177.i8);
          v164.i16[0] = *(_WORD *)&v30[2 * v164.i64[0]];
          v139.i16[0] = *(_WORD *)&v30[2 * v178.u32[0]];
          uint32x4_t v179 = vmovl_high_u16(v177);
          v173.i16[0] = *(_WORD *)&v30[2 * v179.u32[0]];
          v174.i16[1] = *(_WORD *)&v30[2 * v149];
          v175.i16[1] = *(_WORD *)&v30[2 * v157];
          v126.i16[1] = *(_WORD *)&v30[2 * v166];
          v174.i16[2] = *(_WORD *)&v30[2 * v151];
          v142.i16[1] = *(_WORD *)&v30[2 * v152];
          uint64_t v180 = (__int16 *)&v30[2 * v160];
          float v64 = v313;
          v176.i16[1] = *v180;
          v175.i16[2] = *(_WORD *)&v30[2 * v159];
          v164.i16[1] = *(_WORD *)&v30[2 * v164.i64[1]];
          v126.i16[2] = *(_WORD *)&v30[2 * v95.i64[0]];
          v144.i16[1] = *(_WORD *)&v30[2 * v170.u32[1]];
          v142.i16[2] = *(_WORD *)&v30[2 * v306];
          v144.i16[2] = *(_WORD *)&v30[2 * v170.u32[2]];
          v176.i16[2] = *(_WORD *)&v30[2 * v305];
          v169.i16[1] = *(_WORD *)&v30[2 * v169.u32[1]];
          v164.i16[2] = *(_WORD *)&v30[2 * v163.u32[2]];
          v169.i16[2] = *(_WORD *)&v30[2 * v169.u32[2]];
          v144.i16[3] = *(_WORD *)&v30[2 * v170.u32[3]];
          v170.i16[1] = *(_WORD *)&v30[2 * v173.u32[1]];
          v169.i16[3] = *(_WORD *)&v30[2 * v169.u32[3]];
          v170.i16[2] = *(_WORD *)&v30[2 * v173.u32[2]];
          v170.i16[3] = *(_WORD *)&v30[2 * v173.u32[3]];
          v171.i16[1] = *(_WORD *)&v30[2 * v172.u32[1]];
          v174.i16[3] = *(_WORD *)&v30[2 * v309];
          v171.i16[2] = *(_WORD *)&v30[2 * v172.u32[2]];
          v175.i16[3] = *(_WORD *)&v30[2 * v307];
          v171.i16[3] = *(_WORD *)&v30[2 * v172.u32[3]];
          v126.i16[3] = *(_WORD *)&v30[2 * v144.i64[1]];
          v139.i16[1] = *(_WORD *)&v30[2 * v178.u32[1]];
          v142.i16[3] = *(_WORD *)&v30[2 * v311];
          v139.i16[2] = *(_WORD *)&v30[2 * v178.u32[2]];
          v176.i16[3] = *(_WORD *)&v30[2 * v308];
          v139.i16[3] = *(_WORD *)&v30[2 * v178.u32[3]];
          v173.i16[1] = *(_WORD *)&v30[2 * v179.u32[1]];
          v164.i16[3] = *(_WORD *)&v30[2 * v163.u32[3]];
          v173.i16[2] = *(_WORD *)&v30[2 * v179.u32[2]];
          float32x4_t v181 = vcvtq_f32_f16(v174);
          _H12 = v315;
          float32x4_t v182 = vcvtq_f32_f16(v175);
          float32x4_t v183 = vcvtq_f32_f16(*(float16x4_t *)v126.i8);
          v173.i16[3] = *(_WORD *)&v30[2 * v179.u32[3]];
          uint64_t v184 = v61 + 128;
          vst4q_f32((float *)v61, *(float32x4x4_t *)(&v70 - 3));
          long long v185 = (float *)(v61 + 64);
          v317.val[0] = vcvtq_f32_f16(*(float16x4_t *)v142.i8);
          v317.val[1] = vcvtq_f32_f16(v176);
          _H13 = v314;
          v317.val[2] = vcvtq_f32_f16(*(float16x4_t *)v164.i8);
          v317.val[3] = (float32x4_t)v70;
          vst4q_f32(v185, v317);
          v317.val[0] = vcvtq_f32_f16(*(float16x4_t *)v144.i8);
          v317.val[1] = vcvtq_f32_f16(*(float16x4_t *)v170.i8);
          v317.val[2] = vcvtq_f32_f16(*(float16x4_t *)v139.i8);
          v317.val[3] = (float32x4_t)v70;
          uint64_t v186 = v73 + 128;
          vst4q_f32((float *)v73, v317);
          uint64_t v187 = (float *)(v73 + 64);
          int64x2_t v40 = (int64x2_t)vcvtq_f32_f16(*(float16x4_t *)v169.i8);
          float16x8_t v37 = (float16x8_t)vcvtq_f32_f16(*(float16x4_t *)v171.i8);
          v317.val[2] = vcvtq_f32_f16(*(float16x4_t *)v173.i8);
          v317.val[3] = (float32x4_t)v70;
          vst4q_f32(v187, *(float32x4x4_t *)v40.i8);
          uint64_t v61 = v184;
          uint64_t v73 = v186;
          int v67 = v312 + 8;
        }
        while (v312 + 8 < v288);
        unint64_t v188 = v268;
        uint64_t v62 = v284;
        uint64_t v17 = v279;
        unint64_t v10 = v280;
        uint64_t v19 = v277;
        uint64_t v18 = v278;
        uint64_t v20 = v276;
        _S23 = v274;
        _S31 = v275;
        _S15 = v273;
        unint64_t v26 = v272;
        uint64_t v66 = v282;
        float v63 = v283;
        unsigned __int8 v60 = v269;
        float v65 = v281;
      }
      if (v10 > v188)
      {
        if (v62) {
          float v189 = 0.0;
        }
        else {
          float v189 = 1.0;
        }
        do
        {
          float v190 = (float)(v72->u16[1] >> v60) - v316;
          float v191 = v286 * v190;
          float v192 = _S20 * (float)((float)(v64->u16[0] >> v60) - v28);
          float v193 = (float)(v286 * v190) + v192;
          float v194 = 8191.0;
          if (v193 <= 8191.0)
          {
            float v194 = (float)(v286 * v190) + v192;
            if (v193 < 0.0) {
              float v194 = 0.0;
            }
          }
          float v195 = (float)(v72->u16[0] >> v60) - v316;
          float v196 = (float)(v287 * v190) + (float)(v195 * v298);
          float v197 = 8191.0;
          if ((float)(v192 + v196) <= 8191.0)
          {
            float v197 = v192 + v196;
            if ((float)(v192 + v196) < 0.0) {
              float v197 = 0.0;
            }
          }
          float v198 = v300 * v195;
          float v199 = (float)(v300 * v195) + v192;
          float v200 = 8191.0;
          if (v199 <= 8191.0)
          {
            float v200 = v199;
            if (v199 < 0.0) {
              float v200 = 0.0;
            }
          }
          float v201 = _S20 * (float)((float)(v64->u16[1] >> v60) - v28);
          float v202 = 8191.0;
          if ((float)(v191 + v201) <= 8191.0)
          {
            float v202 = v191 + v201;
            if ((float)(v191 + v201) < 0.0) {
              float v202 = 0.0;
            }
          }
          float v203 = 8191.0;
          if ((float)(v196 + v201) <= 8191.0)
          {
            float v203 = v196 + v201;
            if ((float)(v196 + v201) < 0.0) {
              float v203 = 0.0;
            }
          }
          float v204 = v198 + v201;
          BOOL v205 = (float)(v198 + v201) <= 8191.0;
          float v206 = 8191.0;
          if (v205)
          {
            float v206 = v204;
            if (v204 < 0.0) {
              float v206 = 0.0;
            }
          }
          float v207 = _S20 * (float)((float)(v71->u16[0] >> v60) - v28);
          float v208 = 8191.0;
          if ((float)(v191 + v207) <= 8191.0)
          {
            float v208 = v191 + v207;
            if ((float)(v191 + v207) < 0.0) {
              float v208 = 0.0;
            }
          }
          float v209 = 8191.0;
          if ((float)(v196 + v207) <= 8191.0)
          {
            float v209 = v196 + v207;
            if ((float)(v196 + v207) < 0.0) {
              float v209 = 0.0;
            }
          }
          float v210 = v198 + v207;
          BOOL v205 = (float)(v198 + v207) <= 8191.0;
          float v211 = 8191.0;
          if (v205)
          {
            float v211 = v210;
            if (v210 < 0.0) {
              float v211 = 0.0;
            }
          }
          float v212 = _S20 * (float)((float)(v71->u16[1] >> v60) - v28);
          float v213 = v191 + v212;
          float v214 = 8191.0;
          if (v213 <= 8191.0)
          {
            float v214 = v213;
            if (v213 < 0.0) {
              float v214 = 0.0;
            }
          }
          float v215 = v196 + v212;
          BOOL v205 = (float)(v196 + v212) <= 8191.0;
          float v216 = 8191.0;
          if (v205)
          {
            float v216 = v215;
            if (v215 < 0.0) {
              float v216 = 0.0;
            }
          }
          float v217 = v198 + v212;
          float v218 = 8191.0;
          if (v217 <= 8191.0)
          {
            float v218 = v217;
            if (v217 < 0.0) {
              float v218 = 0.0;
            }
          }
          _H2 = *(_WORD *)&v27[2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0))];
          _H3 = *(_WORD *)&v27[2 * llroundf(fminf(fmaxf(v197, 0.0), 8191.0))];
          __asm
          {
            FCVT            S2, H2
            FCVT            S3, H3
          }
          _H4 = *(_WORD *)&v27[2 * llroundf(fminf(fmaxf(v200, 0.0), 8191.0))];
          __asm { FCVT            S4, H4 }
          _H19 = *(_WORD *)&v27[2 * llroundf(fminf(fmaxf(v202, 0.0), 8191.0))];
          __asm { FCVT            S19, H19 }
          _H21 = *(_WORD *)&v27[2 * llroundf(fminf(fmaxf(v203, 0.0), 8191.0))];
          __asm { FCVT            S21, H21 }
          _H1 = *(_WORD *)&v27[2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0))];
          __asm { FCVT            S1, H1 }
          _H25 = *(_WORD *)&v27[2 * llroundf(fminf(fmaxf(v208, 0.0), 8191.0))];
          _H26 = *(_WORD *)&v27[2 * llroundf(fminf(fmaxf(v209, 0.0), 8191.0))];
          __asm
          {
            FCVT            S25, H25
            FCVT            S26, H26
          }
          _H29 = *(_WORD *)&v27[2 * llroundf(fminf(fmaxf(v211, 0.0), 8191.0))];
          unsigned int v236 = llroundf(fminf(fmaxf(v214, 0.0), 8191.0));
          __asm { FCVT            S0, H29 }
          _H29 = *(_WORD *)&v27[2 * v236];
          __asm { FCVT            S29, H29 }
          _H27 = *(_WORD *)&v27[2 * llroundf(fminf(fmaxf(v216, 0.0), 8191.0))];
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)&v27[2 * llroundf(fminf(fmaxf(v218, 0.0), 8191.0))];
          __asm { FCVT            S28, H28 }
          float v244 = (float)((float)(_S23 * _S3) + (float)(_S2 * _S31)) + (float)(_S4 * _S15);
          float v245 = (float)((float)(v302 * _S3) + (float)(_S2 * v303)) + (float)(_S4 * v294);
          _S2 = (float)((float)(v290 * _S3) + (float)(_S2 * v291)) + (float)(_S4 * v289);
          _S3 = (float)((float)(_S23 * _S21) + (float)(_S19 * _S31)) + (float)(_S1 * _S15);
          _S4 = (float)((float)(v302 * _S21) + (float)(_S19 * v303)) + (float)(_S1 * v294);
          _S1 = (float)((float)(v290 * _S21) + (float)(_S19 * v291)) + (float)(_S1 * v289);
          _S19 = (float)((float)(_S23 * _S26) + (float)(_S25 * _S31)) + (float)(_S0 * _S15);
          _S21 = (float)((float)(v302 * _S26) + (float)(_S25 * v303)) + (float)(_S0 * v294);
          _S0 = (float)((float)(v290 * _S26) + (float)(_S25 * v291)) + (float)(_S0 * v289);
          _S25 = (float)((float)(_S23 * _S27) + (float)(_S29 * _S31)) + (float)(_S28 * _S15);
          _S26 = (float)((float)(v302 * _S27) + (float)(_S29 * v303)) + (float)(_S28 * v294);
          _S27 = (float)((float)(v290 * _S27) + (float)(_S29 * v291)) + (float)(_S28 * v289);
          LOWORD(_S28) = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v244, 0.0), 8191.0))];
          LOWORD(_S29) = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(v245, 0.0), 8191.0))];
          LOWORD(_S2) = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0))];
          LOWORD(_S3) = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
          LOWORD(_S4) = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0))];
          LOWORD(_S1) = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0))];
          LOWORD(_S19) = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0))];
          LOWORD(_S21) = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
          LOWORD(_S0) = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
          LOWORD(_S25) = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0))];
          LOWORD(_S26) = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0))];
          LOWORD(_S27) = *(_WORD *)&v30[2 * llroundf(fminf(fmaxf(_S27, 0.0), 8191.0))];
          __asm
          {
            FCVT            S28, H28
            FCVT            S29, H29
          }
          *(_DWORD *)uint64_t v61 = _S28;
          *(_DWORD *)(v61 + 4) = _S29;
          __asm { FCVT            S2, H2 }
          *(_DWORD *)(v61 + 8) = _S2;
          *(float *)(v61 + 12) = v189;
          __asm
          {
            FCVT            S2, H3
            FCVT            S3, H4
          }
          *(_DWORD *)(v61 + 16) = _S2;
          *(_DWORD *)(v61 + 20) = _S3;
          __asm { FCVT            S1, H1 }
          *(_DWORD *)(v61 + 24) = _S1;
          *(float *)(v61 + 28) = v189;
          __asm
          {
            FCVT            S1, H19
            FCVT            S2, H21
          }
          *(_DWORD *)uint64_t v73 = _S1;
          *(_DWORD *)(v73 + 4) = _S2;
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H25
            FCVT            S2, H26
          }
          *(_DWORD *)(v73 + 8) = _S0;
          *(float *)(v73 + 12) = v189;
          __asm { FCVT            S0, H27 }
          *(_DWORD *)(v73 + 16) = _S1;
          *(_DWORD *)(v73 + 20) = _S2;
          v188 += 2;
          float v72 = (uint16x8_t *)((char *)v72 + 4);
          float v64 = (uint16x8_t *)((char *)v64 + 4);
          *(_DWORD *)(v73 + 24) = _S0;
          *(float *)(v73 + 28) = v189;
          float v71 = (uint16x8_t *)((char *)v71 + 4);
          v61 += 32;
          v73 += 32;
          _H13 = v314;
          _H12 = v315;
        }
        while (v10 > v188);
      }
      float v64 = (uint16x8_t *)&v65[v17];
      float v63 = (uint16x8_t *)((char *)v63 + v18);
      v62 += v19 + v19;
      uint64_t v61 = v66 + v20;
      v9 += 2;
      _H3 = v285;
    }
    while (v26 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_TRC_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 8191.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v140 = v21 * *(float *)(v13 + 8);
    float v25 = v21 * *(float *)(v13 + 16);
    float v26 = v21 * *(float *)(v13 + 20);
    float v27 = v21 * *(float *)(v13 + 28);
    float v28 = *(float *)(v13 + 72);
    float v29 = *(float *)(v13 + 76);
    float v30 = *(float *)(v13 + 80);
    float v31 = *(float *)(v13 + 84);
    float v32 = *(float *)(v13 + 88);
    float v33 = *(float *)(v13 + 92);
    float v34 = *(float *)(v13 + 96);
    float v35 = *(float *)(v13 + 100);
    float v36 = *(float *)(v13 + 104);
    uint64_t v37 = v13 + 164;
    uint64_t v38 = v13 + 16548;
    uint64_t v39 = *((void *)result + 14);
    uint64_t v40 = (void *)*((void *)result + 16);
    uint64_t v41 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v42 = *(void *)(result + 36);
    uint64_t v43 = v14[1];
    uint64_t v44 = (char *)(*v14 + v16 * v11 + 2 * v42);
    uint64_t v45 = v14[2];
    _ZF = v45 == 0;
    uint64_t result = (unsigned __int8 *)(v45 + v18 * v11 + 2 * v42);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v47 = *v40 + v41 * v19 + 16 * v39;
    unsigned int v48 = *(unsigned __int8 *)(v13 + 124);
    char v49 = 16 - v48;
    if (v48 >= 0x11) {
      char v49 = 0;
    }
    if (v11 >= 0) {
      uint64_t v50 = v11;
    }
    else {
      uint64_t v50 = v11 + 1;
    }
    uint64_t v51 = v43 + v17 * (v50 >> 1) + 2 * v42;
    char v52 = v49;
    do
    {
      uint64_t v53 = v47 + v19;
      uint64_t v54 = &v44[v16];
      if (v10)
      {
        unint64_t v55 = 0;
        if (result) {
          float v56 = 0.0;
        }
        else {
          float v56 = 1.0;
        }
        float v57 = &v44[v16];
        uint64_t v58 = v47 + v19;
        do
        {
          uint64_t v59 = (unsigned __int16 *)(v51 + 2 * v55);
          float v60 = (float)(v59[1] >> v52) - v23;
          float v61 = v140 * v60;
          float v62 = v24 * (float)((float)(*(unsigned __int16 *)v44 >> v52) - v22);
          float v63 = (float)(v140 * v60) + v62;
          float v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            float v64 = (float)(v140 * v60) + v62;
            if (v63 < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = (float)(*v59 >> v52) - v23;
          float v66 = (float)(v26 * v60) + (float)(v65 * v25);
          float v67 = 8191.0;
          if ((float)(v62 + v66) <= 8191.0)
          {
            float v67 = v62 + v66;
            if ((float)(v62 + v66) < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = v27 * v65;
          float v69 = (float)(v27 * v65) + v62;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v24 * (float)((float)(*((unsigned __int16 *)v44 + 1) >> v52) - v22);
          float v72 = 8191.0;
          if ((float)(v61 + v71) <= 8191.0)
          {
            float v72 = v61 + v71;
            if ((float)(v61 + v71) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = 8191.0;
          if ((float)(v66 + v71) <= 8191.0)
          {
            float v73 = v66 + v71;
            if ((float)(v66 + v71) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v68 + v71;
          BOOL v75 = (float)(v68 + v71) <= 8191.0;
          float v76 = 8191.0;
          if (v75)
          {
            float v76 = v74;
            if (v74 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v24 * (float)((float)(*(unsigned __int16 *)v57 >> v52) - v22);
          float v78 = 8191.0;
          if ((float)(v61 + v77) <= 8191.0)
          {
            float v78 = v61 + v77;
            if ((float)(v61 + v77) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = 8191.0;
          if ((float)(v66 + v77) <= 8191.0)
          {
            float v79 = v66 + v77;
            if ((float)(v66 + v77) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v68 + v77;
          BOOL v75 = (float)(v68 + v77) <= 8191.0;
          float v81 = 8191.0;
          if (v75)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v24 * (float)((float)(*((unsigned __int16 *)v57 + 1) >> v52) - v22);
          float v83 = v61 + v82;
          float v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v66 + v82;
          BOOL v75 = (float)(v66 + v82) <= 8191.0;
          float v86 = 8191.0;
          if (v75)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v68 + v82;
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H28 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          _H4 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm
          {
            FCVT            S9, H9
            FCVT            S10, H10
          }
          float v116 = (float)((float)(v29 * _S28) + (float)(_S26 * v28)) + (float)(_S29 * v30);
          float v117 = (float)((float)(v32 * _S28) + (float)(_S26 * v31)) + (float)(_S29 * v33);
          _S26 = (float)((float)(v35 * _S28) + (float)(_S26 * v34)) + (float)(_S29 * v36);
          _S28 = (float)((float)(v29 * _S31) + (float)(_S30 * v28)) + (float)(_S8 * v30);
          _S29 = (float)((float)(v32 * _S31) + (float)(_S30 * v31)) + (float)(_S8 * v33);
          _S30 = (float)((float)(v35 * _S31) + (float)(_S30 * v34)) + (float)(_S8 * v36);
          _S31 = (float)((float)(v29 * _S12) + (float)(_S11 * v28)) + (float)(_S13 * v30);
          _S8 = (float)((float)(v32 * _S12) + (float)(_S11 * v31)) + (float)(_S13 * v33);
          _S11 = (float)((float)(v35 * _S12) + (float)(_S11 * v34)) + (float)(_S13 * v36);
          _S12 = (float)((float)(v29 * _S9) + (float)(_S4 * v28)) + (float)(_S10 * v30);
          _S13 = (float)((float)(v32 * _S9) + (float)(_S4 * v31)) + (float)(_S10 * v33);
          _S4 = (float)((float)(v35 * _S9) + (float)(_S4 * v34)) + (float)(_S10 * v36);
          LOWORD(_S9) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          LOWORD(_S28) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
          LOWORD(_S29) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S29, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          LOWORD(_S11) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S11, 0.0), 8191.0)));
          LOWORD(_S12) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          LOWORD(_S13) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S13, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm
          {
            FCVT            S9, H9
            FCVT            S10, H10
          }
          *(_DWORD *)uint64_t v47 = _S9;
          *(_DWORD *)(v47 + 4) = _S10;
          __asm { FCVT            S26, H26 }
          *(_DWORD *)(v47 + 8) = _S26;
          *(float *)(v47 + 12) = v56;
          __asm
          {
            FCVT            S26, H28
            FCVT            S28, H29
          }
          *(_DWORD *)(v47 + 16) = _S26;
          *(_DWORD *)(v47 + 20) = _S28;
          __asm { FCVT            S26, H30 }
          *(_DWORD *)(v47 + 24) = _S26;
          *(float *)(v47 + 28) = v56;
          __asm
          {
            FCVT            S26, H31
            FCVT            S28, H8
          }
          *(_DWORD *)uint64_t v58 = _S26;
          *(_DWORD *)(v58 + 4) = _S28;
          v44 += 4;
          v57 += 4;
          __asm
          {
            FCVT            S26, H11
            FCVT            S28, H12
            FCVT            S29, H13
          }
          *(_DWORD *)(v58 + 8) = _S26;
          *(float *)(v58 + 12) = v56;
          __asm { FCVT            S4, H4 }
          v47 += 32;
          *(_DWORD *)(v58 + 16) = _S28;
          *(_DWORD *)(v58 + 20) = _S29;
          *(_DWORD *)(v58 + 24) = _S4;
          *(float *)(v58 + 28) = v56;
          v58 += 32;
          v55 += 2;
        }
        while (v10 > v55);
      }
      uint64_t v44 = &v54[v16];
      v51 += v17;
      result += v18 + v18;
      uint64_t v47 = v53 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_RGfA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_xf420_rgb_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, float32x4_t a3, double a4, double a5, double a6, int16x4_t a7, double a8, float32x4_t a9)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = 2 * *result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (2 * v14 != 2 * v13)
  {
    unint64_t v15 = 0;
    unint64_t v16 = *(void *)(result + 20);
    uint64_t v17 = *(void *)(result + 44);
    uint64_t v18 = v17 + 2 * v13;
    uint64_t v19 = v17 + 2 * v14;
    uint64_t v20 = (float32x2_t *)*((void *)result + 19);
    uint64_t v21 = (uint64_t *)*((void *)result + 7);
    size_t v22 = (uint64_t *)*((void *)result + 8);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v25 = v22[2];
    uint64_t v26 = **((void **)result + 17);
    unsigned int v27 = v20[17].u16[2];
    unsigned int v28 = v20[17].u16[3];
    a9.i32[0] = v20[3].i32[1];
    unint64_t v29 = v19 - v18;
    float v30 = 1.0 / (float)v20[16].u32[0];
    float v31 = (float)v27;
    float v32 = (float)v28;
    _S3 = v30 * v20->f32[0];
    *(short float *)a7.i16 = (short float)v27;
    float16x8_t v34 = (float16x8_t)vdupq_lane_s16(a7, 0);
    __asm { FCVT            H5, S3 }
    short float v40 = -(short float)v28;
    a9.i32[1] = v20[1].i32[0];
    *(float32x2_t *)a9.f32 = vmul_n_f32(*(float32x2_t *)a9.f32, v30);
    float16x8_t v41 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a9), 0);
    *(float32x2_t *)a3.f32 = vmul_n_f32(v20[2], v30);
    float16x8_t v42 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    float16x8_t v43 = vmulq_n_f16(v41, v40);
    float16x8_t v44 = vmulq_n_f16(v42, v40);
    unsigned int v45 = v20[15].u8[4];
    uint64_t v47 = v21[1];
    uint64_t v46 = v21[2];
    if (v18 >= 0) {
      uint64_t v48 = v18;
    }
    else {
      uint64_t v48 = v18 + 1;
    }
    uint64_t v49 = *v21;
    uint64_t v50 = v47 + v24 * (v48 >> 1);
    uint64_t v51 = *((void *)result + 14);
    char v52 = (uint64_t *)*((void *)result + 16);
    uint64_t v53 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v12);
    uint64_t v54 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(v46 + v25 * v18 + 2 * v54);
    uint64_t v55 = *v52;
    if (v45 >= 0x11) {
      unsigned __int8 v56 = 0;
    }
    else {
      unsigned __int8 v56 = 16 - v45;
    }
    float v57 = (float *)(v55 + v26 * v53 + 16 * v51);
    if (!v46) {
      uint64_t result = 0;
    }
    uint64_t v58 = (uint16x8_t *)(v50 + 2 * v54);
    uint64_t v59 = (uint16x8_t *)(v49 + v23 * v18 + 2 * v54);
    uint16x8_t v60 = (uint16x8_t)vdupq_n_s16(-v56);
    unsigned __int8 v61 = v56;
    __asm { FMOV            V23.4S, #1.0 }
    do
    {
      float v63 = (char *)v57 + v26;
      float v64 = &v59->i8[v23];
      if ((int)v16 < 8)
      {
        unint64_t v95 = 0;
        float v69 = (float *)((char *)v57 + v26);
        float v68 = v58;
        float v67 = (uint16x8_t *)((char *)v59 + v23);
      }
      else
      {
        v9.i64[0] = 0;
        int v65 = 0;
        v10.i64[0] = (uint64_t)result;
        int8x16_t v66 = vandq_s8(_Q23, (int8x16_t)vdupq_lane_s64(vceqq_s64(v10, v9).i64[0], 0));
        float v67 = (uint16x8_t *)((char *)v59 + v23);
        float v68 = v58;
        float v69 = (float *)((char *)v57 + v26);
        do
        {
          uint16x8_t v70 = *v68++;
          float16x8_t v71 = vcvtq_f16_u16(vshlq_u16(v70, v60));
          int8x16_t v72 = (int8x16_t)vmlaq_f16(v43, v41, v71);
          int16x8_t v73 = (int16x8_t)vmlaq_f16(v44, v42, v71);
          v71.i64[0] = vextq_s8(v72, v72, 8uLL).u64[0];
          *(int16x4_t *)v74.i8 = vuzp1_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v71.i8);
          *(int16x4_t *)v71.i8 = vuzp2_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v71.i8);
          v71.i64[1] = a3.i64[0];
          float16x8_t v75 = (float16x8_t)vzip1q_s16((int16x8_t)v71, (int16x8_t)v71);
          v74.i64[1] = a3.i64[0];
          float16x8_t v76 = (float16x8_t)vzip1q_s16(v74, v74);
          v74.i64[0] = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
          *(float16x4_t *)v73.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)v74.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)v74.i8));
          v73.i64[1] = a3.i64[0];
          float16x8_t v77 = (float16x8_t)vzip1q_s16(v73, v73);
          uint16x8_t v78 = *v59++;
          float16x8_t v79 = vcvtq_f16_u16(vshlq_u16(v78, v60));
          uint16x8_t v80 = *v67++;
          float16x8_t v81 = vsubq_f16(v79, v34);
          int8x16_t v82 = (int8x16_t)vmlaq_n_f16(v75, v81, _H5);
          int8x16_t v83 = (int8x16_t)vmlaq_n_f16(v77, v81, _H5);
          int8x16_t v84 = (int8x16_t)vmlaq_n_f16(v76, v81, _H5);
          float32x4_t v85 = vcvtq_f32_f16(*(float16x4_t *)v82.i8);
          float32x4_t v86 = vcvtq_f32_f16(*(float16x4_t *)v83.i8);
          float32x4_t v87 = vcvtq_f32_f16(*(float16x4_t *)v84.i8);
          v107.val[0] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL));
          v107.val[1] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL));
          v107.val[2] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL));
          v107.val[3] = (float32x4_t)v66;
          float v88 = v57 + 32;
          vst4q_f32(v57, *(float32x4x4_t *)(&v66 - 3));
          float16x8_t v89 = v57 + 16;
          vst4q_f32(v89, v107);
          v107.val[0] = (float32x4_t)vsubq_f16(vcvtq_f16_u16(vshlq_u16(v80, v60)), v34);
          int8x16_t v90 = (int8x16_t)vmlaq_n_f16(v75, (float16x8_t)v107.val[0], _H5);
          int8x16_t v91 = (int8x16_t)vmlaq_n_f16(v77, (float16x8_t)v107.val[0], _H5);
          int8x16_t v92 = (int8x16_t)vmlaq_n_f16(v76, (float16x8_t)v107.val[0], _H5);
          int64x2_t v9 = (int64x2_t)vcvtq_f32_f16(*(float16x4_t *)v90.i8);
          int64x2_t v10 = (int64x2_t)vcvtq_f32_f16(*(float16x4_t *)v91.i8);
          v107.val[2] = vcvtq_f32_f16(*(float16x4_t *)v92.i8);
          v107.val[3] = (float32x4_t)v66;
          v106.val[0] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL));
          v106.val[1] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL));
          v106.val[2] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL));
          v106.val[3] = (float32x4_t)v66;
          uint16x8_t v93 = v69 + 32;
          vst4q_f32(v69, *(float32x4x4_t *)v9.i8);
          uint32x4_t v94 = v69 + 16;
          vst4q_f32(v94, v106);
          float v57 = v88;
          float v69 = v93;
          v65 += 8;
        }
        while (v65 < (int)v16 - 7);
        unint64_t v95 = v16 & 0xFFFFFFF8;
      }
      if (v16 > v95)
      {
        if (result) {
          float v96 = 0.0;
        }
        else {
          float v96 = 1.0;
        }
        do
        {
          float v97 = (float)(v68->u16[0] >> v61) - v32;
          float v98 = (float)(v68->u16[1] >> v61) - v32;
          float v99 = a9.f32[1] * v98;
          float v100 = a9.f32[0] * v97;
          float v101 = _S3 * (float)((float)(v59->u16[0] >> v61) - v31);
          float v102 = _S3 * (float)((float)(v59->u16[1] >> v61) - v31);
          float v103 = (float)(a3.f32[1] * v98) + (float)(v97 * a3.f32[0]);
          float v104 = _S3 * (float)((float)(v67->u16[0] >> v61) - v31);
          float v105 = _S3 * (float)((float)(v67->u16[1] >> v61) - v31);
          v57[2] = v100 + v101;
          v57[3] = v96;
          float *v57 = v99 + v101;
          v57[1] = v101 + v103;
          v57[4] = v99 + v102;
          v57[5] = v103 + v102;
          v57[6] = v100 + v102;
          v57[7] = v96;
          float *v69 = v99 + v104;
          v69[1] = v103 + v104;
          v69[2] = v100 + v104;
          v69[3] = v96;
          v95 += 2;
          float v68 = (uint16x8_t *)((char *)v68 + 4);
          uint64_t v59 = (uint16x8_t *)((char *)v59 + 4);
          v69[4] = v99 + v105;
          v69[5] = v103 + v105;
          v69[6] = v100 + v105;
          v69[7] = v96;
          float v67 = (uint16x8_t *)((char *)v67 + 4);
          v57 += 8;
          v69 += 8;
        }
        while (v16 > v95);
      }
      uint64_t v59 = (uint16x8_t *)&v64[v23];
      uint64_t v58 = (uint16x8_t *)((char *)v58 + v24);
      result += v25 + v25;
      float v57 = (float *)&v63[v26];
      v15 += 2;
    }
    while (v29 > v15);
  }
  return result;
}

uint64_t vt_Copy_xf420_rgb_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_xf420_rgb_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_xf420_rgb_RGfA_GCD(unint64_t result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *(void *)(result + 152);
    uint64_t v15 = *(void **)(result + 56);
    uint64_t v14 = *(uint64_t **)(result + 64);
    uint64_t v16 = *v14;
    uint64_t v17 = v14[1];
    uint64_t v18 = v14[2];
    uint64_t v19 = **(void **)(result + 136);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v13 + 128);
    float v21 = 1.0 / *(float *)&v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v22 = (float)v20;
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v23 = (float)LODWORD(a5);
    float v24 = v21 * *(float *)v13;
    float v25 = v21 * *(float *)(v13 + 8);
    float v26 = v21 * *(float *)(v13 + 16);
    float v27 = v21 * *(float *)(v13 + 20);
    float v28 = v21 * *(float *)(v13 + 28);
    uint64_t v29 = *(void *)(result + 112);
    uint64_t v30 = *(void **)(result + 128);
    uint64_t v31 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v6);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = v15[1];
    uint64_t v34 = (char *)(*v15 + v16 * v11 + 2 * v32);
    uint64_t v35 = v15[2];
    BOOL v36 = v35 == 0;
    uint64_t v37 = v35 + v18 * v11 + 2 * v32;
    if (v36) {
      uint64_t v37 = 0;
    }
    uint64_t v38 = (float *)(*v30 + v31 * v19 + 16 * v29);
    unsigned int v39 = *(unsigned __int8 *)(v13 + 124);
    if (v39 >= 0x11) {
      unsigned __int8 v40 = 0;
    }
    else {
      unsigned __int8 v40 = 16 - v39;
    }
    uint64_t v41 = v33 + v17 * (v11 / 2) + 2 * v32;
    uint64_t result = v40;
    do
    {
      float16x8_t v42 = (char *)v38 + v19;
      float16x8_t v43 = &v34[v16];
      if (v10)
      {
        unint64_t v44 = 0;
        if (v37) {
          float v45 = 0.0;
        }
        else {
          float v45 = 1.0;
        }
        uint64_t v46 = &v34[v16];
        uint64_t v47 = (float *)((char *)v38 + v19);
        do
        {
          uint64_t v48 = (unsigned __int16 *)(v41 + 2 * v44);
          float v49 = (float)(*v48 >> result) - v23;
          float v50 = (float)(v48[1] >> result) - v23;
          float v51 = v24 * (float)((float)(*(unsigned __int16 *)v34 >> result) - v22);
          float v52 = v25 * v50;
          float v53 = v24 * (float)((float)(*((unsigned __int16 *)v34 + 1) >> result) - v22);
          v34 += 4;
          float v54 = v28 * v49;
          float v55 = (float)(v27 * v50) + (float)(v49 * v26);
          float v56 = v24 * (float)((float)(*(unsigned __int16 *)v46 >> result) - v22);
          float v57 = v24 * (float)((float)(*((unsigned __int16 *)v46 + 1) >> result) - v22);
          v38[2] = v54 + v51;
          v38[3] = v45;
          v46 += 4;
          v38[6] = v54 + v53;
          v38[7] = v45;
          *uint64_t v38 = v52 + v51;
          v38[1] = v51 + v55;
          v38[4] = v52 + v53;
          v38[5] = v55 + v53;
          v38 += 8;
          *uint64_t v47 = v52 + v56;
          v47[1] = v55 + v56;
          v47[2] = v54 + v56;
          v47[3] = v45;
          v47[4] = v52 + v57;
          v47[5] = v55 + v57;
          v47[6] = v54 + v57;
          v47[7] = v45;
          v47 += 8;
          v44 += 2;
        }
        while (v10 > v44);
      }
      uint64_t v34 = &v43[v16];
      v41 += v17;
      v37 += v18 + v18;
      uint64_t v38 = (float *)&v42[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t VTTemporalFilterSessionGetTypeID()
{
  return sVTTemporalFilterSessionID;
}

void RegisterVTTemporalFilterSession()
{
  v0 = (const void *)_CFRuntimeRegisterClass();
  sVTTemporalFilterSessionID = (uint64_t)v0;
  sVTTemporalFilterSessionPropertyCallbacks = 0;
  *(void *)algn_1E9334958 = VTTemporalFilterSessionCopySupportedPropertyDictionary;
  qword_1E9334960 = (uint64_t)VTTemporalFilterSessionSessionSetProperty;
  qword_1E9334968 = (uint64_t)VTTemporalFilterSessionCopyProperty;
  qword_1E9334970 = (uint64_t)VTTemporalFilterSessionSetProperties;
  qword_1E9334978 = (uint64_t)VTTemporalFilterSessionCopySerializableProperties;

  VTSessionRegisterCallbacksForTypeID(&sVTTemporalFilterSessionPropertyCallbacks, v0);
}

uint64_t VTTemporalFilterSessionCreate(const __CFAllocator *a1, const void *a2, int a3, int a4, const void *a5, const void *a6, const void *a7, const void *a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  CFDictionaryRef poolAttributes = 0;
  if (a11)
  {
    if (!a9
      || (*a11 = 0,
          MEMORY[0x199705810](&VTTemporalFilterSessionGetTypeID_sRegisterVTTemporalFilterSessionOnce, RegisterVTTemporalFilterSession), (uint64_t Instance = _CFRuntimeCreateInstance()) == 0))
    {
      uint64_t v34 = FigSignalErrorAt();
      goto LABEL_31;
    }
    uint64_t v20 = Instance;
    if (a2) {
      CFTypeRef v21 = CFRetain(a2);
    }
    else {
      CFTypeRef v21 = 0;
    }
    *(void *)(v20 + 40) = v21;
    if (a5) {
      CFTypeRef v22 = CFRetain(a5);
    }
    else {
      CFTypeRef v22 = 0;
    }
    *(void *)(v20 + 48) = v22;
    *(_DWORD *)(v20 + 56) = a3;
    *(_DWORD *)(v20 + 60) = a4;
    *(void *)(v20 + 104) = FigSimpleMutexCreate();
    if (a6) {
      CFTypeRef v23 = CFRetain(a6);
    }
    else {
      CFTypeRef v23 = 0;
    }
    *(void *)(v20 + 112) = v23;
    if (a7) {
      CFTypeRef v24 = CFRetain(a7);
    }
    else {
      CFTypeRef v24 = 0;
    }
    *(void *)(v20 + 120) = v24;
    if (a8) {
      CFTypeRef v25 = CFRetain(a8);
    }
    else {
      CFTypeRef v25 = 0;
    }
    *(void *)(v20 + 128) = v25;
    FigCFDictionaryGetInt32IfPresent();
    if (*(void *)(v20 + 120))
    {
      TemporalFilteruint64_t Instance = vtTemporalFilterSessionCreatePixelBufferPoolAttributesWithNameSuffix(v20, @"output", &poolAttributes);
      if (TemporalFilterInstance) {
        goto LABEL_34;
      }
      TemporalFilteruint64_t Instance = CVPixelBufferPoolCreate(a1, poolAttributes, *(CFDictionaryRef *)(v20 + 120), (CVPixelBufferPoolRef *)(v20 + 184));
      if (TemporalFilterInstance) {
        goto LABEL_34;
      }
    }
    *(void *)(v20 + 88) = a9;
    *(void *)(v20 + 96) = a10;
    *(void *)(v20 + 216) = FigSimpleMutexCreate();
    CFAllocatorRef v27 = CFGetAllocator((CFTypeRef)v20);
    CFMutableArrayRef Mutable = CFArrayCreateMutable(v27, 0, 0);
    *(void *)(v20 + 224) = 1;
    *(void *)(v20 + 232) = Mutable;
    *(void *)(v20 + 240) = dispatch_group_create();
    TemporalFilteruint64_t Instance = VTSelectAndCreateTemporalFilterInstance(*(void *)(v20 + 40), (uint64_t)a1, *(void *)(v20 + 48), v20 + 24);
    if (TemporalFilterInstance)
    {
LABEL_34:
      uint64_t v34 = TemporalFilterInstance;
    }
    else
    {
      *(void *)(v20 + 32) = v20;
      uint64_t v29 = *(void *)(v20 + 24);
      uint64_t v30 = *(void *)(v20 + 56);
      uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v31) {
        uint64_t v32 = v31;
      }
      else {
        uint64_t v32 = 0;
      }
      uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 8);
      if (v33)
      {
        uint64_t v34 = v33(v29, v20 + 32, v30);
        if (!v34)
        {
          *a11 = v20;
LABEL_31:
          if (poolAttributes) {
            CFRelease(poolAttributes);
          }
          return v34;
        }
      }
      else
      {
        uint64_t v34 = 4294954514;
      }
    }
    CFRelease((CFTypeRef)v20);
    goto LABEL_31;
  }

  return FigSignalErrorAt();
}

uint64_t vtTemporalFilterSessionCreatePixelBufferPoolAttributesWithNameSuffix(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 128);
  if (v6)
  {
    Value = (__CFString *)CFDictionaryGetValue(v6, @"ShortName");
    unint64_t v8 = Value;
    if (!a2)
    {
      if (!Value)
      {
        CFStringRef v9 = 0;
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v8 = @"filter";
    if (!a2)
    {
LABEL_7:
      CFStringRef v11 = (const __CFString *)CFRetain(v8);
      goto LABEL_8;
    }
  }
  CFAllocatorRef v10 = CFGetAllocator((CFTypeRef)a1);
  CFStringRef v11 = CFStringCreateWithFormat(v10, 0, @"%@-%@", v8, a2);
LABEL_8:
  CFStringRef v9 = v11;
LABEL_9:
  CFAllocatorRef v12 = CFGetAllocator((CFTypeRef)a1);
  uint64_t v13 = VTCreatePixelBufferPoolAttributesWithName(v12, *(unsigned int *)(a1 + 136), v9, a3);
  if (v9) {
    CFRelease(v9);
  }
  return v13;
}

void VTTemporalFilterSessionInvalidate(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    VTTemporalFilterSessionCompleteFrames(a1);
    *(unsigned char *)(a1 + 16) = 1;
    uint64_t v2 = *(const void **)(a1 + 24);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 24) = 0;
    }
    float32x4_t v3 = *(const void **)(a1 + 40);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 40) = 0;
    }
    float32x4_t v4 = *(const void **)(a1 + 48);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 48) = 0;
    }
    FigSimpleMutexDestroy();
    *(void *)(a1 + 104) = 0;
    uint64_t v5 = *(const void **)(a1 + 112);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 112) = 0;
    }
    CFDictionaryRef v6 = *(const void **)(a1 + 120);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 120) = 0;
    }
    unint64_t v7 = *(const void **)(a1 + 128);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 128) = 0;
    }
    unint64_t v8 = *(const void **)(a1 + 144);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 144) = 0;
    }
    CFStringRef v9 = *(const void **)(a1 + 152);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 152) = 0;
    }
    CFAllocatorRef v10 = *(const void **)(a1 + 160);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 160) = 0;
    }
    CFStringRef v11 = *(const void **)(a1 + 168);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 168) = 0;
    }
    CFAllocatorRef v12 = *(const void **)(a1 + 176);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a1 + 176) = 0;
    }
    uint64_t v13 = *(const void **)(a1 + 184);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a1 + 184) = 0;
    }
    uint64_t v14 = *(const void **)(a1 + 192);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(a1 + 192) = 0;
    }
    uint64_t v15 = *(const void **)(a1 + 200);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(a1 + 200) = 0;
    }
    FigSimpleMutexDestroy();
    *(void *)(a1 + 216) = 0;
    uint64_t v16 = *(const void **)(a1 + 232);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(a1 + 232) = 0;
    }
    uint64_t v17 = *(NSObject **)(a1 + 240);
    if (v17)
    {
      dispatch_release(v17);
      *(void *)(a1 + 240) = 0;
    }
  }
}

uint64_t VTTemporalFilterSessionCompleteFrames(uint64_t a1)
{
  if (!a1 || *(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (!v2) {
      return 0;
    }
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, long long *))(v4 + 24);
    if (v5)
    {
      long long v7 = *MEMORY[0x1E4F1FA10];
      uint64_t v8 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
      uint64_t result = v5(v2, &v7);
      if (!result)
      {
        if (*(void *)(a1 + 232))
        {
          dispatch_group_wait(*(dispatch_group_t *)(a1 + 240), 0xFFFFFFFFFFFFFFFFLL);
          return 0;
        }
        return FigSignalErrorAt();
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t VTTemporalFilterSessionProcessFrame(uint64_t a1, void *a2, long long *a3, uint64_t a4)
{
  CFTypeRef v29 = 0;
  if (a1)
  {
    if (*(unsigned char *)(a1 + 16) || !*(void *)(a1 + 24) || !a2)
    {
      uint64_t v17 = FigSignalErrorAt();
      goto LABEL_20;
    }
    MEMORY[0x1997056B0](*(void *)(a1 + 216));
    uint64_t v8 = *(__CFArray **)(a1 + 232);
    if (v8)
    {
      CFStringRef v9 = *(char **)(a1 + 224);
      *(void *)(a1 + 224) = v9 + 1;
      CFArrayAppendValue(v8, v9);
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 240));
      MEMORY[0x1997056C0](*(void *)(a1 + 216));
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
      MEMORY[0x1997056C0](*(void *)(a1 + 216));
      if (v10) {
        goto LABEL_22;
      }
      CFStringRef v9 = 0;
    }
    cf[0] = 0;
    MEMORY[0x1997056B0](*(void *)(a1 + 104));
    if (!*(void *)(a1 + 144) || CVPixelBufferIsCompatibleWithAttributes())
    {
      uint64_t v10 = 0;
      CFDictionaryRef v11 = 0;
      CFTypeRef v29 = CFRetain(a2);
LABEL_10:
      MEMORY[0x1997056C0](*(void *)(a1 + 104));
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (v11) {
        CFRelease(v11);
      }
      if (v10)
      {
        if (v9) {
          vtTemporalFilterSessionTrackFrameExitingPlugin(a1, v9);
        }
        goto LABEL_22;
      }
      uint64_t v12 = *(void *)(a1 + 24);
      CFTypeRef v13 = v29;
      long long v27 = *a3;
      uint64_t v28 = *((void *)a3 + 2);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(uint64_t (**)(uint64_t, char *, CFTypeRef, CFTypeRef *, uint64_t))(v15 + 16);
      if (!v16)
      {
        uint64_t v10 = 4294954514;
        goto LABEL_22;
      }
      *(_OWORD *)CFTypeRef cf = v27;
      uint64_t v31 = v28;
      uint64_t v17 = v16(v12, v9, v13, cf, a4);
LABEL_20:
      uint64_t v10 = v17;
LABEL_22:
      if (v29) {
        CFRelease(v29);
      }
      return v10;
    }
    if (*(unsigned char *)(a1 + 81))
    {
      CFDictionaryRef v11 = 0;
      uint64_t v10 = 4294955078;
      goto LABEL_10;
    }
    uint64_t v20 = (VTPixelTransferSessionRef *)(a1 + 160);
    uint64_t v19 = *(const void **)(a1 + 160);
    if (*(unsigned char *)(a1 + 208))
    {
      if (!v19)
      {
LABEL_33:
        CFTypeRef v21 = *(const void **)(a1 + 176);
        if (v21)
        {
          CFRelease(v21);
          *(void *)(a1 + 176) = 0;
        }
        CFAllocatorRef v22 = CFGetAllocator((CFTypeRef)a1);
        uint64_t PixelBufferPoolAttributesWithNameSuffix = VTPixelTransferSessionCreate(v22, (VTPixelTransferSessionRef *)(a1 + 160));
        if (PixelBufferPoolAttributesWithNameSuffix
          || (uint64_t PixelBufferPoolAttributesWithNameSuffix = vtTemporalFilterSessionCreatePixelBufferPoolAttributesWithNameSuffix(a1, @"input", (__CFDictionary **)cf), PixelBufferPoolAttributesWithNameSuffix))
        {
          uint64_t v10 = PixelBufferPoolAttributesWithNameSuffix;
          CFDictionaryRef v11 = 0;
          goto LABEL_10;
        }
        CFDictionaryRef v11 = CVPixelBufferCopyCreationAttributes((CVPixelBufferRef)a2);
        CFAllocatorRef v24 = CFGetAllocator((CFTypeRef)a1);
        PixelBuffer = VTBuildPixelBufferPools2(v24, *(const __CFDictionary **)(a1 + 144), v11, (const __CFDictionary *)cf[0], *(void *)(a1 + 56), 0, 0, 0, 0, 0, (CVPixelBufferPoolRef *)(a1 + 176), 0, 0, 0);
        if (PixelBuffer) {
          goto LABEL_41;
        }
        *(unsigned char *)(a1 + 208) = 0;
LABEL_39:
        CFAllocatorRef v26 = CFGetAllocator((CFTypeRef)a1);
        PixelBuffer = (CVPixelBufferPoolRef *)CVPixelBufferPoolCreatePixelBuffer(v26, *(CVPixelBufferPoolRef *)(a1 + 176), (CVPixelBufferRef *)&v29);
        if (!PixelBuffer) {
          PixelBuffer = (CVPixelBufferPoolRef *)VTPixelTransferSessionTransferImage(*v20, (CVPixelBufferRef)a2, (CVPixelBufferRef)v29);
        }
LABEL_41:
        uint64_t v10 = (uint64_t)PixelBuffer;
        goto LABEL_10;
      }
    }
    else
    {
      if (!v19) {
        goto LABEL_33;
      }
      if (*(void *)(a1 + 176))
      {
        CFDictionaryRef v11 = 0;
        goto LABEL_39;
      }
    }
    CFRelease(v19);
    *uint64_t v20 = 0;
    goto LABEL_33;
  }

  return FigSignalErrorAt();
}

uint64_t vtTemporalFilterSessionTrackFrameExitingPlugin(uint64_t a1, const void *a2)
{
  MEMORY[0x1997056B0](*(void *)(a1 + 216));
  CFArrayRef v4 = *(const __CFArray **)(a1 + 232);
  if (!v4
    || CFArrayGetCount(v4) <= 0
    || (CFArrayRef v5 = *(const __CFArray **)(a1 + 232),
        v9.length = CFArrayGetCount(v5),
        v9.location = 0,
        CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v9, a2),
        FirstIndexOfValue == -1))
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  else
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 232), FirstIndexOfValue);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 240));
    uint64_t v7 = 0;
  }
  MEMORY[0x1997056C0](*(void *)(a1 + 216));
  return v7;
}

uint64_t VTTemporalFilterPluginSessionSetInputPixelBufferAttributes(uint64_t *a1, const void *a2)
{
  if (a1 && (uint64_t v2 = *a1) != 0 && !*(unsigned char *)(v2 + 16))
  {
    MEMORY[0x1997056B0](*(void *)(v2 + 104));
    CFArrayRef v4 = *(const void **)(v2 + 144);
    *(void *)(v2 + 144) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4) {
      CFRelease(v4);
    }
    *(unsigned char *)(v2 + 208) = 1;
    MEMORY[0x1997056C0](*(void *)(v2 + 104));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTTemporalFilterPluginSessionSetOutputPixelBufferAttributes(uint64_t *a1, const void *a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  CFDictionaryRef poolAttributes = 0;
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      if (!*(unsigned char *)(v2 + 16))
      {
        MEMORY[0x1997056B0](*(void *)(v2 + 104));
        CFArrayRef v4 = *(const void **)(v2 + 152);
        *(void *)(v2 + 152) = a2;
        if (a2) {
          CFRetain(a2);
        }
        if (v4) {
          CFRelease(v4);
        }
        CFDictionaryRef v6 = (void *)(v2 + 192);
        CFArrayRef v5 = *(const void **)(v2 + 192);
        *(unsigned char *)(v2 + 209) = 1;
        if (v5)
        {
          CFRelease(v5);
          *CFDictionaryRef v6 = 0;
        }
        uint64_t v7 = *(__CVPixelBufferPool **)(v2 + 200);
        if (!v7) {
          goto LABEL_30;
        }
        uint64_t v8 = *(void **)(v2 + 152);
        CFDictionaryRef resolvedDictionaryOut = 0;
        if (!v8) {
          goto LABEL_20;
        }
        values[0] = CVPixelBufferPoolGetPixelBufferAttributes(v7);
        values[1] = v8;
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFArrayRef v10 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 2, MEMORY[0x1E4F1D510]);
        if (!CVPixelBufferCreateResolvedAttributesDictionary(v9, v10, &resolvedDictionaryOut))
        {
          CFDictionaryRef v11 = resolvedDictionaryOut;
          if (resolvedDictionaryOut)
          {
            int v12 = 1;
            goto LABEL_15;
          }
          FigSignalErrorAt();
        }
        int v12 = 0;
        int v13 = 0;
        CFDictionaryRef v11 = resolvedDictionaryOut;
        if (!resolvedDictionaryOut)
        {
LABEL_16:
          if (v10) {
            CFRelease(v10);
          }
          if (!v13)
          {
            uint64_t v16 = *(const void **)(v2 + 184);
            if (v16) {
              CFRelease(v16);
            }
            CFTypeRef v17 = *(CFTypeRef *)(v2 + 200);
            if (v17) {
              CFTypeRef v17 = CFRetain(v17);
            }
            *(void *)(v2 + 184) = v17;
            goto LABEL_30;
          }
          uint64_t v7 = *(__CVPixelBufferPool **)(v2 + 200);
          if (!v7)
          {
LABEL_21:
            *(void *)(v2 + 192) = v7;
            uint64_t v14 = *(const void **)(v2 + 184);
            if (v14)
            {
              CFRelease(v14);
              *(void *)(v2 + 184) = 0;
            }
            uint64_t v15 = *(const void **)(v2 + 120);
            if (v15)
            {
              CFRelease(v15);
              *(void *)(v2 + 120) = 0;
            }
LABEL_30:
            if (*v6 || !*(void *)(v2 + 152))
            {
              uint64_t v18 = 0;
            }
            else
            {
              uint64_t v19 = vtTemporalFilterSessionCreatePixelBufferPoolAttributesWithNameSuffix(v2, 0, &poolAttributes);
              if (!v19)
              {
                CFAllocatorRef v20 = CFGetAllocator((CFTypeRef)v2);
                uint64_t v19 = CVPixelBufferPoolCreate(v20, poolAttributes, *(CFDictionaryRef *)(v2 + 152), (CVPixelBufferPoolRef *)(v2 + 192));
              }
              uint64_t v18 = v19;
            }
            MEMORY[0x1997056C0](*(void *)(v2 + 104));
            if (poolAttributes) {
              CFRelease(poolAttributes);
            }
            return v18;
          }
LABEL_20:
          uint64_t v7 = (__CVPixelBufferPool *)CFRetain(v7);
          goto LABEL_21;
        }
LABEL_15:
        CFRelease(v11);
        int v13 = v12;
        goto LABEL_16;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t VTTemporalFilterPluginSessionGetOutputPixelBufferPool(uint64_t *a1)
{
  if (a1 && (uint64_t v1 = *a1) != 0 && !*(unsigned char *)(v1 + 16))
  {
    MEMORY[0x1997056B0](*(void *)(v1 + 104));
    uint64_t v2 = *(void *)(v1 + 192);
    MEMORY[0x1997056C0](*(void *)(v1 + 104));
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v2;
}

uint64_t VTTemporalFilterPluginSessionEmitOutputFrame(uint64_t *a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  CVPixelBufferRef pixelBufferOut = 0;
  if (a1)
  {
    uint64_t v5 = *a1;
    if (*a1)
    {
      if (!*(unsigned char *)(v5 + 16))
      {
        uint64_t v9 = a2;
        CVPixelBufferRef v10 = 0;
        if (a2 || !a5)
        {
LABEL_20:
          CFTypeRef v17 = *(void (**)(uint64_t, uint64_t, uint64_t, long long *, CVPixelBufferRef))(v5 + 88);
          uint64_t v16 = *(void *)(v5 + 96);
          long long v19 = *a4;
          uint64_t v20 = *((void *)a4 + 2);
          v17(v16, v9, a3, &v19, v10);
          if (pixelBufferOut) {
            CFRelease(pixelBufferOut);
          }
          return 0;
        }
        MEMORY[0x1997056B0](*(void *)(v5 + 104));
        if (!*(void *)(v5 + 120) || CVPixelBufferIsCompatibleWithAttributes())
        {
          uint64_t v9 = 0;
          CVPixelBufferRef pixelBufferOut = (CVPixelBufferRef)CFRetain(a5);
LABEL_19:
          MEMORY[0x1997056C0](*(void *)(v5 + 104));
          CVPixelBufferRef v10 = pixelBufferOut;
          goto LABEL_20;
        }
        int v12 = (VTPixelTransferSessionRef *)(v5 + 168);
        CFDictionaryRef v11 = *(const void **)(v5 + 168);
        if (*(unsigned char *)(v5 + 209))
        {
          if (v11)
          {
            CFRelease(v11);
            *int v12 = 0;
          }
        }
        else if (v11)
        {
          goto LABEL_15;
        }
        CFAllocatorRef v13 = CFGetAllocator((CFTypeRef)v5);
        uint64_t v14 = VTPixelTransferSessionCreate(v13, (VTPixelTransferSessionRef *)(v5 + 168));
        if (v14)
        {
LABEL_18:
          uint64_t v9 = v14;
          goto LABEL_19;
        }
        *(unsigned char *)(v5 + 209) = 0;
LABEL_15:
        if (*(void *)(v5 + 184))
        {
          CFAllocatorRef v15 = CFGetAllocator((CFTypeRef)v5);
          uint64_t v14 = CVPixelBufferPoolCreatePixelBuffer(v15, *(CVPixelBufferPoolRef *)(v5 + 184), &pixelBufferOut);
          if (!v14) {
            uint64_t v14 = VTPixelTransferSessionTransferImage(*v12, (CVPixelBufferRef)a5, pixelBufferOut);
          }
        }
        else
        {
          uint64_t v14 = FigSignalErrorAt();
        }
        goto LABEL_18;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t VTTemporalFilterPluginSessionConcludeInputFrame(uint64_t *a1, const void *a2)
{
  if (a1 && (uint64_t v2 = *a1) != 0 && !*(unsigned char *)(v2 + 16)) {
    return vtTemporalFilterSessionTrackFrameExitingPlugin(v2, a2);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t VTTemporalFilterPluginSessionGetClientInputPixelBufferAttributesHint(uint64_t *a1)
{
  if (a1 && (uint64_t v1 = *a1) != 0 && !*(unsigned char *)(v1 + 16))
  {
    MEMORY[0x1997056B0](*(void *)(v1 + 104));
    uint64_t v2 = *(void *)(v1 + 112);
    MEMORY[0x1997056C0](*(void *)(v1 + 104));
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v2;
}

uint64_t VTTemporalFilterPluginSessionGetClientOutputPixelBufferAttributes(uint64_t *a1)
{
  if (a1 && (uint64_t v1 = *a1) != 0 && !*(unsigned char *)(v1 + 16))
  {
    MEMORY[0x1997056B0](*(void *)(v1 + 104));
    uint64_t v2 = *(void *)(v1 + 120);
    MEMORY[0x1997056C0](*(void *)(v1 + 104));
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v2;
}

uint64_t VTTemporalFilterPluginGetClassID()
{
  return sVTTemporalFilterPluginClassID;
}

uint64_t RegisterVTTemporalFilterPluginType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t VTTemporalFilterPluginGetTypeID()
{
  MEMORY[0x199705810](&VTTemporalFilterPluginGetClassID_sRegisterVTTemporalFilterTypeOnce, RegisterVTTemporalFilterPluginType);

  return CMBaseClassGetCFTypeID();
}

uint64_t VTTemporalFilterSessionCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef v12 = 0;
  CFTypeRef cf = 0;
  v14[0] = 0;
  v14[1] = 0;
  *a2 = 0;
  if (*(unsigned char *)(a1 + 16)
    || ((uint64_t v3 = *(void *)(a1 + 24), (v4 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v5 = 0) : (v5 = v4),
        (CFDictionaryRef v6 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v5 + 32)) != 0
     && (int v7 = v6(v3, &cf), v7 != -12782)
     && v7))
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v8 = vtTemporalFilterSessionCopyPropertiesHandledByVideoToolbox(&v12);
    if (!v8)
    {
      if (cf)
      {
        v14[0] = cf;
        uint64_t v9 = 1;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if (v12) {
        v14[v9] = v12;
      }
      CFGetAllocator((CFTypeRef)a1);
      uint64_t v8 = FigCFCreateCombinedDictionary();
    }
  }
  uint64_t v10 = v8;
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v10;
}

uint64_t VTTemporalFilterSessionSessionSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_20;
  }
  if (vtTemporalFilterSessionIsPropertyHandledByVideoToolbox(a2))
  {
    if (CFEqual(@"FilterSourcePixelBufferAttributes", a2)
      || CFEqual(@"FilterDestinationPixelBufferAttributes", a2)
      || CFEqual(@"MaxLookBehind", a2)
      || CFEqual(@"MaxLookAhead", a2))
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    else if (CFEqual(@"RealTime", a2) || CFEqual(@"AllowPixelTransfer", a2))
    {
      uint64_t v6 = vtTemporalFilterSessionValidateBooleanProperty(a3);
      if (v6) {
        return v6;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    if (CFEqual(@"AllowPixelTransfer", a2))
    {
      *(unsigned char *)(a1 + 81) = *MEMORY[0x1E4F1CFC8] == (void)a3;
      return v6;
    }
    if (CFEqual(@"OutputPixelBufferPool", a2))
    {
      if (a3 && (CFTypeID v10 = CFGetTypeID(a3), v10 == CVPixelBufferPoolGetTypeID()) || (v6 = FigSignalErrorAt(), !v6))
      {
        CFDictionaryRef v11 = *(const void **)(a1 + 200);
        if (v11) {
          CFRelease(v11);
        }
        if (a3) {
          CFTypeRef v12 = CFRetain(a3);
        }
        else {
          CFTypeRef v12 = 0;
        }
        uint64_t v6 = 0;
        *(void *)(a1 + 200) = v12;
      }
      return v6;
    }
    if (!vtTemporalFilterSessionIsPropertyHandledByTemporalFilter(a1, a2))
    {
      if (CFEqual(@"RealTime", a2)) {
        *(unsigned char *)(a1 + 80) = *MEMORY[0x1E4F1CFD0] == (void)a3;
      }
      return v6;
    }
    goto LABEL_11;
  }
  if (!vtTemporalFilterSessionIsPropertyHandledByTemporalFilter(a1, a2))
  {
LABEL_20:
    return FigSignalErrorAt();
  }
LABEL_11:
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, const void *, const void *))(v9 + 56);
  if (!v14) {
    return 4294954514;
  }

  return v14(v7, a2, a3);
}

uint64_t VTTemporalFilterSessionCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  *a4 = 0;
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_23;
  }
  if (!vtTemporalFilterSessionIsPropertyHandledByVideoToolbox(a2))
  {
    if (vtTemporalFilterSessionIsPropertyHandledByTemporalFilter(a1, a2))
    {
LABEL_6:
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v18 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v10 + 48);
      if (!v18) {
        return 4294954514;
      }
      return v18(v8, a2, a3, a4);
    }
LABEL_23:
    return FigSignalErrorAt();
  }
  if (!CFEqual(@"FilterSourcePixelBufferAttributes", a2)
    && !CFEqual(@"FilterDestinationPixelBufferAttributes", a2)
    && !CFEqual(@"AllowPixelTransfer", a2)
    && !CFEqual(@"OutputPixelBufferPool", a2)
    && !CFEqual(@"MaxLookBehind", a2)
    && !CFEqual(@"MaxLookAhead", a2))
  {
    uint64_t result = CFEqual(@"RealTime", a2);
    if (!result) {
      return result;
    }
  }
  if (CFEqual(@"AllowPixelTransfer", a2))
  {
    uint64_t result = 0;
    int v12 = *(unsigned __int8 *)(a1 + 81);
    CFAllocatorRef v13 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_16:
    if (v12) {
      CFAllocatorRef v15 = v13;
    }
    else {
      CFAllocatorRef v15 = v14;
    }
    CFTypeRef v16 = *v15;
    goto LABEL_44;
  }
  if (CFEqual(@"OutputPixelBufferPool", a2))
  {
    CFTypeRef v17 = *(const void **)(a1 + 200);
    if (v17)
    {
LABEL_22:
      CFTypeRef v16 = CFRetain(v17);
LABEL_43:
      uint64_t result = 0;
LABEL_44:
      *a4 = v16;
      return result;
    }
LABEL_42:
    CFTypeRef v16 = 0;
    goto LABEL_43;
  }
  if (vtTemporalFilterSessionIsPropertyHandledByTemporalFilter(a1, a2)) {
    goto LABEL_6;
  }
  if (CFEqual(@"FilterSourcePixelBufferAttributes", a2))
  {
    MEMORY[0x1997056B0](*(void *)(a1 + 104));
    CFTypeRef v19 = *(CFTypeRef *)(a1 + 144);
    if (!v19)
    {
LABEL_36:
      *a4 = v19;
      MEMORY[0x1997056C0](*(void *)(a1 + 104));
      return 0;
    }
LABEL_35:
    CFTypeRef v19 = CFRetain(v19);
    goto LABEL_36;
  }
  if (CFEqual(@"FilterDestinationPixelBufferAttributes", a2))
  {
    MEMORY[0x1997056B0](*(void *)(a1 + 104));
    CFTypeRef v19 = *(CFTypeRef *)(a1 + 152);
    if (!v19) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (CFEqual(@"MaxLookBehind", a2))
  {
    CFTypeRef v17 = *(const void **)(a1 + 64);
    if (v17) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }
  if (CFEqual(@"MaxLookAhead", a2))
  {
    CFTypeRef v17 = *(const void **)(a1 + 72);
    if (v17) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }
  uint64_t result = CFEqual(@"RealTime", a2);
  if (result)
  {
    uint64_t result = 0;
    int v12 = *(unsigned __int8 *)(a1 + 80);
    CFAllocatorRef v13 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    goto LABEL_16;
  }
  return result;
}

uint64_t VTTemporalFilterSessionSetProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v18 = a1;
  uint64_t v19 = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    LODWORD(v19) = FigSignalErrorAt();
    return v19;
  }
  if (a2)
  {
    long long context = 0u;
    long long v21 = 0u;
    int v4 = vtTemporalFilterSessionCopyPropertiesHandledByVideoToolbox((CFTypeRef *)&context);
    if (v4)
    {
      int v10 = v4;
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = *(uint64_t (**)(uint64_t, char *))(v7 + 32);
      if (!v8 || (int v9 = v8(v5, (char *)&context + 8), v9 == -12782) || (v10 = v9) == 0)
      {
        CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)vtTemporalFilterSessionAddPropertyToPartition, &context);
        int v10 = 0;
        CFDictionaryRef v12 = (const __CFDictionary *)*((void *)&v21 + 1);
        CFDictionaryRef v11 = (const __CFDictionary *)v21;
LABEL_11:
        if ((void)context) {
          CFRelease((CFTypeRef)context);
        }
        if (*((void *)&context + 1)) {
          CFRelease(*((CFTypeRef *)&context + 1));
        }
        LODWORD(v19) = v10;
        if (!v10)
        {
          if (v11) {
            CFDictionaryApplyFunction(v11, (CFDictionaryApplierFunction)vtTemporalFilterSessionSetOneProperty, &v18);
          }
          if (v12)
          {
            uint64_t v13 = *(void *)(a1 + 24);
            uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v15 = v14 ? v14 : 0;
            CFTypeRef v16 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(v15 + 40);
            if (!v16 || (LODWORD(v19) = v16(v13, v12), v19 == -12782))
            {
              LODWORD(v19) = 0;
              CFDictionaryApplyFunction(v12, (CFDictionaryApplierFunction)vtTemporalFilterSessionSetOneProperty, &v18);
            }
          }
        }
        if (v11) {
          CFRelease(v11);
        }
        if (v12) {
          CFRelease(v12);
        }
        return v19;
      }
      FigSignalErrorAt();
    }
    CFDictionaryRef v11 = 0;
    CFDictionaryRef v12 = 0;
    goto LABEL_11;
  }
  return v19;
}

uint64_t VTTemporalFilterSessionCopySerializableProperties(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v7 + 48);
    if (!v8) {
      return 0;
    }
    uint64_t result = v8(v5, a2, a3);
    if (result == -12782) {
      return 0;
    }
  }
  return result;
}

double vtTemporalFilterSessionInit(uint64_t a1)
{
  *(void *)(a1 + 240) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

CFTypeRef vtTemporalFilterSessionCopyFormattingDesc()
{
  return CFRetain(@"[VTTemporalFilterSession]");
}

__CFString *vtTemporalFilterSessionCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<VTTemporalFilterSession %p [%p]>{}", a1, v4);
  return Mutable;
}

uint64_t vtTemporalFilterSessionCopyPropertiesHandledByVideoToolbox(CFTypeRef *a1)
{
  MEMORY[0x199705810](&sCreatePropertiesHandledByVideoToolboxOnce_1, vtTemporalFilterSessionCreatePropertiesHandledByVideoToolbox);
  if (a1 && sVTTemporalFilterSessionPropertiesHandledByVideoToolbox)
  {
    *a1 = CFRetain((CFTypeRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void vtTemporalFilterSessionCreatePropertiesHandledByVideoToolbox()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    sVTTemporalFilterSessionPropertiesHandledByVideoToolbox = (uint64_t)Mutable;
    if (Mutable)
    {
      CFDictionaryAddValue(Mutable, @"FilterSourcePixelBufferAttributes", v2);
      CFDictionaryAddValue((CFMutableDictionaryRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox, @"FilterDestinationPixelBufferAttributes", v2);
      CFDictionaryAddValue((CFMutableDictionaryRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox, @"MaxLookBehind", v2);
      CFDictionaryAddValue((CFMutableDictionaryRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox, @"MaxLookAhead", v2);
      CFDictionaryAddValue((CFMutableDictionaryRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox, @"RealTime", v2);
      CFDictionaryAddValue((CFMutableDictionaryRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox, @"AllowPixelTransfer", v2);
      CFDictionaryAddValue((CFMutableDictionaryRef)sVTTemporalFilterSessionPropertiesHandledByVideoToolbox, @"OutputPixelBufferPool", v2);
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

BOOL vtTemporalFilterSessionIsPropertyHandledByVideoToolbox(const void *a1)
{
  CFDictionaryRef theDict = 0;
  vtTemporalFilterSessionCopyPropertiesHandledByVideoToolbox((CFTypeRef *)&theDict);
  if (!theDict) {
    return 0;
  }
  BOOL v2 = CFDictionaryContainsKey(theDict, a1) != 0;
  if (theDict) {
    CFRelease(theDict);
  }
  return v2;
}

uint64_t vtTemporalFilterSessionValidateBooleanProperty(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 == CFBooleanGetTypeID()) {
    return 0;
  }

  return FigSignalErrorAt();
}

BOOL vtTemporalFilterSessionIsPropertyHandledByTemporalFilter(uint64_t a1, const void *a2)
{
  CFDictionaryRef theDict = 0;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, CFDictionaryRef *))(v5 + 32);
  if (!v6) {
    return 0;
  }
  v6(v3, &theDict);
  if (!theDict) {
    return 0;
  }
  BOOL v7 = CFDictionaryContainsKey(theDict, a2) != 0;
  if (theDict) {
    CFRelease(theDict);
  }
  return v7;
}

uint64_t vtTemporalFilterSessionSetOneProperty(CFStringRef propertyKey, CFTypeRef propertyValue, uint64_t a3)
{
  uint64_t result = VTSessionSetProperty(*(VTSessionRef *)a3, propertyKey, propertyValue);
  if (!*(_DWORD *)(a3 + 8)) {
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

void vtTemporalFilterSessionAddPropertyToPartition(void *key, const void *a2, CFDictionaryRef *a3)
{
  if (CFDictionaryContainsKey(*a3, key))
  {
    CFMutableArrayRef Mutable = a3[2];
    if (!Mutable)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      a3[2] = Mutable;
    }
  }
  else
  {
    CFDictionaryRef v7 = a3[1];
    if (!v7 || !CFDictionaryContainsKey(v7, key)) {
      return;
    }
    CFMutableArrayRef Mutable = a3[3];
    if (!Mutable)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      a3[3] = Mutable;
    }
  }

  CFDictionarySetValue(Mutable, key, a2);
}

CFTypeRef VTTemporalFilterPluginCopyFormattingDesc()
{
  return CFRetain(@"[VTTemporalFilterPlugin]");
}

uint64_t VTFinishUpdatingIncrementalCodeCoverageData()
{
  return 4294949395;
}

uint64_t VTBeginUpdatingIncrementalCodeCoverageData()
{
  return 4294949395;
}

uint64_t VTEnsureReadyToCollectIncrementalCoverageData()
{
  return 4294949395;
}

uint64_t VTSetCodeCoverageFilePathPattern()
{
  return 4294949395;
}

uint64_t vtRotatePixelRect180_1BPP_inplace_arm(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a1 & 3) != 0 || (a3 & 3) != 0 || (a2 & 0xF) != 0 || (a4 & 0xF) != 0 || (a5 & 0xF) != 0) {
    return -1;
  }
  uint64_t v6 = a3 + a4 * a6;
  uint64_t v7 = a6 >> 1;
  uint64_t v8 = a2 - a5;
  uint64_t v9 = a4 - a5;
  uint64_t v10 = a5 >> 4;
  CFDictionaryRef v11 = (unint64_t *)(v6 - v9);
  while (1)
  {
    do
    {
      unint64_t v12 = bswap64(*a1);
      unint64_t v13 = bswap64(a1[1]);
      v11 -= 2;
      unint64_t v14 = bswap64(*v11);
      *a1 = bswap64(v11[1]);
      a1[1] = v14;
      a1 += 2;
      *CFDictionaryRef v11 = v13;
      v11[1] = v12;
      --v10;
    }
    while (v10);
    if (!--v7) {
      break;
    }
    a1 = (unint64_t *)((char *)a1 + v8);
    CFDictionaryRef v11 = (unint64_t *)((char *)v11 - v9);
    uint64_t v10 = a5 >> 4;
  }
  return 0;
}

uint64_t vtRotatePixelRect180_1BPP_arm(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a1 & 3) != 0 || (a3 & 3) != 0) {
    return -1;
  }
  if ((a2 & 0x1F) != 0 || (a4 & 0x1F) != 0 || (a5 & 0x1F) != 0)
  {
    if ((a2 & 0xF) == 0 && (a4 & 0xF) == 0 && (a5 & 0xF) == 0)
    {
      uint64_t v15 = a3 + a4 * a6;
      uint64_t v16 = a2 - a5;
      uint64_t v17 = a4 - a5;
      uint64_t v18 = a5 >> 4;
      uint64_t v19 = (void *)(v15 - v17);
      while (1)
      {
        do
        {
          unint64_t v20 = a1->i64[0];
          unint64_t v21 = a1->u64[1];
          ++a1;
          v19 -= 2;
          *uint64_t v19 = bswap64(v21);
          v19[1] = bswap64(v20);
          --v18;
        }
        while (v18);
        if (!--a6) {
          break;
        }
        a1 = (int8x16_t *)((char *)a1 + v16);
        uint64_t v19 = (void *)((char *)v19 - v17);
        uint64_t v18 = a5 >> 4;
      }
      return 0;
    }
    return -1;
  }
  uint64_t v6 = a3 + a4 * a6;
  uint64_t v7 = a2 - a5;
  uint64_t v8 = a4 - a5;
  uint64_t v9 = a5 >> 5;
  uint64_t v10 = (int8x16_t *)(v6 - v8);
  while (1)
  {
    do
    {
      int8x16_t v11 = *a1;
      int8x16_t v12 = a1[1];
      a1 += 2;
      int8x16_t v13 = vrev64q_s8(v11);
      int8x16_t v14 = vrev64q_s8(v12);
      v10 -= 2;
      *uint64_t v10 = vextq_s8(v14, v14, 8uLL);
      v10[1] = vextq_s8(v13, v13, 8uLL);
      --v9;
    }
    while (v9);
    if (!--a6) {
      break;
    }
    a1 = (int8x16_t *)((char *)a1 + v7);
    uint64_t v10 = (int8x16_t *)((char *)v10 - v8);
    uint64_t v9 = a5 >> 5;
  }
  return 0;
}

uint64_t vtRotatePixelRect180_2BPP_inplace_arm(int16x8_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a1 & 3) != 0 || (a3 & 3) != 0 || (a2 & 0xF) != 0 || (a4 & 0xF) != 0 || (a5 & 0xF) != 0) {
    return -1;
  }
  uint64_t v6 = a3 + a4 * a6;
  uint64_t v7 = a6 >> 1;
  uint64_t v8 = 2 * a5;
  uint64_t v9 = a2 - v8;
  uint64_t v10 = a4 - v8;
  uint64_t v11 = v8 >> 4;
  int8x16_t v12 = (int16x8_t *)(v6 - v10);
  while (1)
  {
    do
    {
      int8x16_t v13 = (int8x16_t)vrev64q_s16(*a1);
      int8x16_t v14 = (int8x16_t)vrev64q_s16(*--v12);
      *(int8x16_t *)a1++ = vextq_s8(v14, v14, 8uLL);
      *(int8x16_t *)int8x16_t v12 = vextq_s8(v13, v13, 8uLL);
      --v11;
    }
    while (v11);
    if (!--v7) {
      break;
    }
    a1 = (int16x8_t *)((char *)a1 + v9);
    int8x16_t v12 = (int16x8_t *)((char *)v12 - v10);
    uint64_t v11 = v8 >> 4;
  }
  return 0;
}

uint64_t vtRotatePixelRect180_2BPP_arm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a1 & 3) != 0 || (a3 & 3) != 0) {
    return -1;
  }
  if ((a2 & 0x1F) != 0 || (a4 & 0x1F) != 0 || (a5 & 0x1F) != 0)
  {
    if ((a2 & 0xF) == 0 && (a4 & 0xF) == 0 && (a5 & 0xF) == 0)
    {
      uint64_t v16 = a3 + a4 * a6;
      uint64_t v17 = 2 * a5;
      uint64_t v18 = a2 - v17;
      uint64_t v19 = a4 - v17;
      uint64_t v20 = v17 >> 4;
      unint64_t v21 = (int16x4_t *)(v16 - v19);
      while (1)
      {
        do
        {
          int16x4_t v22 = *(int16x4_t *)a1;
          int16x4_t v23 = *(int16x4_t *)(a1 + 8);
          a1 += 16;
          v21 -= 2;
          *unint64_t v21 = vrev64_s16(v23);
          v21[1] = vrev64_s16(v22);
          --v20;
        }
        while (v20);
        if (!--a6) {
          break;
        }
        a1 += v18;
        unint64_t v21 = (int16x4_t *)((char *)v21 - v19);
        uint64_t v20 = v17 >> 4;
      }
      return 0;
    }
    return -1;
  }
  uint64_t v6 = a3 + a4 * a6;
  uint64_t v7 = 2 * a5;
  uint64_t v8 = a2 - v7;
  uint64_t v9 = a4 - v7;
  uint64_t v10 = v7 >> 5;
  uint64_t v11 = (int8x16_t *)(v6 - v9);
  while (1)
  {
    do
    {
      int16x8_t v12 = *(int16x8_t *)a1;
      int16x8_t v13 = *(int16x8_t *)(a1 + 16);
      a1 += 32;
      int8x16_t v14 = (int8x16_t)vrev64q_s16(v12);
      int8x16_t v15 = (int8x16_t)vrev64q_s16(v13);
      v11 -= 2;
      *uint64_t v11 = vextq_s8(v15, v15, 8uLL);
      v11[1] = vextq_s8(v14, v14, 8uLL);
      --v10;
    }
    while (v10);
    if (!--a6) {
      break;
    }
    a1 += v8;
    uint64_t v11 = (int8x16_t *)((char *)v11 - v9);
    uint64_t v10 = v7 >> 5;
  }
  return 0;
}

uint64_t vtRotatePixelRect90CW_1BPP_arm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a1 & 3) != 0 || (a3 & 3) != 0 || (a2 & 7) != 0 || (a4 & 7) != 0 || (a5 & 7) != 0 || (a6 & 7) != 0) {
    return -1;
  }
  uint64_t v6 = (void *)(a3 + a5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = a5;
  for (uint64_t i = a6 >> 3; ; uint64_t i = a6 >> 3)
  {
    do
    {
      v11.i64[0] = *(void *)a1;
      uint64_t v10 = (uint64_t *)(a1 + a2);
      v11.i64[1] = *v10;
      int16x8_t v12 = (uint64_t *)((char *)v10 + a2);
      v14.i64[0] = *v12;
      int16x8_t v13 = (uint64_t *)((char *)v12 + a2);
      v14.i64[1] = *v13;
      int8x16_t v15 = (uint64_t *)((char *)v13 + a2);
      v17.i64[0] = *v15;
      uint64_t v16 = (uint64_t *)((char *)v15 + a2);
      v17.i64[1] = *v16;
      uint64_t v18 = (uint64_t *)((char *)v16 + a2);
      v20.i64[0] = *v18;
      uint64_t v19 = (uint64_t *)((char *)v18 + a2);
      v20.i64[1] = *v19;
      int8x16_t v21 = vuzp1q_s8(v11, v14);
      int8x16_t v22 = vuzp2q_s8(v11, v14);
      int8x16_t v23 = vuzp1q_s8(v21, v22);
      int8x16_t v24 = vuzp2q_s8(v21, v22);
      int32x4_t v25 = (int32x4_t)vuzp1q_s8(v23, v24);
      int32x4_t v26 = (int32x4_t)vuzp2q_s8(v23, v24);
      int8x16_t v27 = vuzp1q_s8(v17, v20);
      int8x16_t v28 = vuzp2q_s8(v17, v20);
      int8x16_t v29 = vuzp1q_s8(v27, v28);
      int8x16_t v30 = vuzp2q_s8(v27, v28);
      int32x4_t v31 = (int32x4_t)vuzp1q_s8(v29, v30);
      int32x4_t v32 = (int32x4_t)vuzp2q_s8(v29, v30);
      int8x16_t v33 = (int8x16_t)vtrn2q_s32(v25, v31);
      int8x16_t v34 = (int8x16_t)vtrn2q_s32(v26, v32);
      int8x16_t v35 = vrev64q_s8((int8x16_t)vtrn1q_s32(v25, v31));
      int8x16_t v36 = vrev64q_s8((int8x16_t)vtrn1q_s32(v26, v32));
      int8x16_t v37 = vrev64q_s8(v33);
      int8x16_t v38 = vrev64q_s8(v34);
      *uint64_t v6 = v35.i64[0];
      unsigned int v39 = (void *)((char *)v6 + a4);
      *unsigned int v39 = v37.i64[0];
      unsigned __int8 v40 = (void *)((char *)v39 + a4);
      *unsigned __int8 v40 = v35.i64[1];
      uint64_t v41 = (void *)((char *)v40 + a4);
      *uint64_t v41 = v37.i64[1];
      float16x8_t v42 = (void *)((char *)v41 + a4);
      *float16x8_t v42 = v36.i64[0];
      float16x8_t v43 = (void *)((char *)v42 + a4);
      *float16x8_t v43 = v38.i64[0];
      unint64_t v44 = (void *)((char *)v43 + a4);
      *unint64_t v44 = v36.i64[1];
      float v45 = (void *)((char *)v44 + a4);
      void *v45 = v38.i64[1];
      uint64_t v6 = (void *)((char *)v45 + a4);
      a1 = (uint64_t)v19 + a2 + -8 * a2 + 8;
      --i;
    }
    while (i);
    v8 -= 8;
    if (!v8) {
      break;
    }
    a1 = a1 - a6 + 8 * a2;
    uint64_t v6 = --v7;
  }
  return 0;
}

uint64_t vtRotatePixelRect90CCW_1BPP_arm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a1 & 3) != 0 || (a3 & 3) != 0 || (a2 & 7) != 0 || (a4 & 7) != 0 || (a5 & 7) != 0 || (a6 & 7) != 0) {
    return -1;
  }
  uint64_t v6 = (void *)(a3 + a4 * (a6 - 1));
  uint64_t v7 = v6;
  uint64_t v8 = -a4;
  uint64_t v9 = a5;
  for (uint64_t i = a6 >> 3; ; uint64_t i = a6 >> 3)
  {
    do
    {
      v12.i64[0] = *(void *)a1;
      int8x16_t v11 = (uint64_t *)(a1 + a2);
      v12.i64[1] = *v11;
      int16x8_t v13 = (uint64_t *)((char *)v11 + a2);
      v15.i64[0] = *v13;
      int8x16_t v14 = (uint64_t *)((char *)v13 + a2);
      v15.i64[1] = *v14;
      uint64_t v16 = (uint64_t *)((char *)v14 + a2);
      v18.i64[0] = *v16;
      int8x16_t v17 = (uint64_t *)((char *)v16 + a2);
      v18.i64[1] = *v17;
      uint64_t v19 = (uint64_t *)((char *)v17 + a2);
      v21.i64[0] = *v19;
      int8x16_t v20 = (uint64_t *)((char *)v19 + a2);
      v21.i64[1] = *v20;
      int8x16_t v22 = vuzp1q_s8(v12, v15);
      int8x16_t v23 = vuzp2q_s8(v12, v15);
      int8x16_t v24 = vuzp1q_s8(v22, v23);
      int8x16_t v25 = vuzp2q_s8(v22, v23);
      int32x4_t v26 = (int32x4_t)vuzp1q_s8(v24, v25);
      int32x4_t v27 = (int32x4_t)vuzp2q_s8(v24, v25);
      int8x16_t v28 = vuzp1q_s8(v18, v21);
      int8x16_t v29 = vuzp2q_s8(v18, v21);
      int8x16_t v30 = vuzp1q_s8(v28, v29);
      int8x16_t v31 = vuzp2q_s8(v28, v29);
      int32x4_t v32 = (int32x4_t)vuzp1q_s8(v30, v31);
      int32x4_t v33 = (int32x4_t)vuzp2q_s8(v30, v31);
      int32x4_t v34 = vtrn1q_s32(v26, v32);
      int32x4_t v35 = vtrn2q_s32(v26, v32);
      int32x4_t v36 = vtrn1q_s32(v27, v33);
      int32x4_t v37 = vtrn2q_s32(v27, v33);
      *uint64_t v6 = v34.i64[0];
      int8x16_t v38 = (void *)((char *)v6 + v8);
      *int8x16_t v38 = v35.i64[0];
      unsigned int v39 = (void *)((char *)v38 + v8);
      *unsigned int v39 = v34.i64[1];
      unsigned __int8 v40 = (void *)((char *)v39 + v8);
      *unsigned __int8 v40 = v35.i64[1];
      uint64_t v41 = (void *)((char *)v40 + v8);
      *uint64_t v41 = v36.i64[0];
      float16x8_t v42 = (void *)((char *)v41 + v8);
      *float16x8_t v42 = v37.i64[0];
      float16x8_t v43 = (void *)((char *)v42 + v8);
      *float16x8_t v43 = v36.i64[1];
      unint64_t v44 = (void *)((char *)v43 + v8);
      *unint64_t v44 = v37.i64[1];
      uint64_t v6 = (void *)((char *)v44 + v8);
      a1 = (uint64_t)v20 + a2 + -8 * a2 + 8;
      --i;
    }
    while (i);
    v9 -= 8;
    if (!v9) {
      break;
    }
    a1 = a1 - a6 + 8 * a2;
    uint64_t v6 = ++v7;
  }
  return 0;
}

uint64_t VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode()
{
  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode_onceToken != -1) {
    dispatch_once(&VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode_onceToken, &__block_literal_global_11);
  }
  return VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode_featureEnabled;
}

BOOL VTVideoCodecService_ShouldUseXPCRemoteDecompressionSession()
{
  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode_onceToken != -1) {
    dispatch_once(&VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode_onceToken, &__block_literal_global_11);
  }
  if (!VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode_featureEnabled) {
    return 0;
  }
  if (shouldUseMIGInterfaceForRemoteDecompressionSession_onceToken != -1) {
    dispatch_once(&shouldUseMIGInterfaceForRemoteDecompressionSession_onceToken, &__block_literal_global_25);
  }
  return shouldUseMIGInterfaceForRemoteDecompressionSession_featureEnabled != 1;
}

BOOL VTVideoCodecService_ShouldUseXPCRemoteTileDecompressionSession()
{
  if (VTVideoCodecService_ShouldUseXPCRemoteTileDecompressionSession_onceToken != -1) {
    dispatch_once(&VTVideoCodecService_ShouldUseXPCRemoteTileDecompressionSession_onceToken, &__block_literal_global_5);
  }
  if (VTVideoCodecService_ShouldUseXPCRemoteTileDecompressionSession_prefersMIG) {
    return 0;
  }

  return VTVideoCodecService_ShouldUseXPCRemoteDecompressionSession();
}

uint64_t VTVideoCodecService_ShouldUseOOPDecodeForVideoPlayer()
{
  if (VTVideoCodecService_ShouldUseOOPDecodeForVideoPlayer_onceToken != -1) {
    dispatch_once(&VTVideoCodecService_ShouldUseOOPDecodeForVideoPlayer_onceToken, &__block_literal_global_12);
  }
  return VTVideoCodecService_ShouldUseOOPDecodeForVideoPlayer_featureEnabled;
}

uint64_t VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode()
{
  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode_onceToken != -1) {
    dispatch_once(&VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode_onceToken, &__block_literal_global_16_0);
  }
  return VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode_featureEnabled;
}

uint64_t __deviceIsDarwinOSProduct_block_invoke()
{
  uint64_t result = os_variant_is_darwinos();
  deviceIsDarwinOSProduct_isDarwinOS = result;
  return result;
}

uint64_t __shouldUseMIGInterfaceForRemoteDecompressionSession_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  shouldUseMIGInterfaceForRemoteDecompressionSession_featureEnabled = result;
  return result;
}

uint64_t VTCelesteRotationNodeCreate(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  VTPixelTransferNodeGetClassID();
  uint64_t v1 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v1;
}

uint64_t VTPixelTransferChainAppendCelesteRotationNode(uint64_t a1, int a2, char a3, char a4, const void *a5)
{
  CFTypeRef cf = 0;
  VTCelesteRotationNodeCreate((uint64_t)&cf);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5) {
    CFTypeRef v11 = CFRetain(a5);
  }
  else {
    CFTypeRef v11 = 0;
  }
  *(void *)uint64_t DerivedStorage = v11;
  *(_DWORD *)(DerivedStorage + 112) = a2;
  *(unsigned char *)(DerivedStorage + 116) = a3;
  *(unsigned char *)(DerivedStorage + 117) = a4;
  uint64_t appended = VTPixelTransferChainAppendNode(a1, cf);
  if (cf) {
    CFRelease(cf);
  }
  return appended;
}

uint64_t VTPixelTransferNodeCelesteRotationSetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"RotationEnableHighSpeedTransfer"))
  {
    if (a3)
    {
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        *(unsigned char *)(DerivedStorage + 32) = CFBooleanGetValue(a3);
        goto LABEL_17;
      }
    }
    goto LABEL_25;
  }
  if (CFEqual(a2, @"RotationZeroFillData"))
  {
    if (a3)
    {
      CFTypeID v7 = CFBooleanGetTypeID();
      if (v7 == CFGetTypeID(a3))
      {
        *(unsigned char *)(DerivedStorage + 33) = CFBooleanGetValue(a3);
        goto LABEL_17;
      }
    }
LABEL_25:
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, @"RotationEnableHistogram"))
  {
    if (!a3) {
      goto LABEL_25;
    }
    CFTypeID v8 = CFBooleanGetTypeID();
    if (v8 != CFGetTypeID(a3)) {
      goto LABEL_25;
    }
    *(unsigned char *)(DerivedStorage + 34) = CFBooleanGetValue(a3);
LABEL_17:
    uint64_t result = *(void *)(DerivedStorage + 88);
    if (result)
    {
      CFRelease((CFTypeRef)result);
      uint64_t result = 0;
      *(void *)(DerivedStorage + 88) = 0;
    }
    return result;
  }
  if (CFEqual(a2, @"ReducedPrecisionFractionalOffsets"))
  {
    if (!a3) {
      goto LABEL_25;
    }
    CFTypeID v9 = CFBooleanGetTypeID();
    if (v9 != CFGetTypeID(a3)) {
      goto LABEL_25;
    }
    *(unsigned char *)(DerivedStorage + 118) = CFBooleanGetValue(a3);
    goto LABEL_17;
  }
  if (!CFEqual(a2, @"RotationHistogramRectangle")) {
    return 4294954396;
  }
  if (a3)
  {
    CFTypeID v11 = CFDictionaryGetTypeID();
    if (v11 != CFGetTypeID(a3)) {
      goto LABEL_25;
    }
    CGSize v12 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
    v16.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
    v16.CGSize size = v12;
    if (CGRectMakeWithDictionaryRepresentation(a3, &v16))
    {
      CGRect v16 = CGRectStandardize(v16);
      CGRect v16 = CGRectIntegral(v16);
    }
  }
  else
  {
    CGSize v13 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
    v16.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
    v16.CGSize size = v13;
  }
  CGSize size = v16.size;
  *(CGPoint *)(DerivedStorage + 48) = v16.origin;
  *(CGSize *)(DerivedStorage + 64) = size;
  int8x16_t v15 = *(const void **)(DerivedStorage + 88);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 88) = 0;
  }
  return 0;
}

uint64_t VTPixelTransferNodeCelesteRotationCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a4 = 0;
  if (CFEqual(a2, @"RotationEnableHighSpeedTransfer"))
  {
    CFTypeID v7 = (const void **)MEMORY[0x1E4F1CFD0];
    int v8 = *(unsigned __int8 *)(DerivedStorage + 32);
    goto LABEL_3;
  }
  if (CFEqual(a2, @"ScalingSupported"))
  {
    CFTypeID v7 = (const void **)MEMORY[0x1E4F1CFD0];
LABEL_11:
    DictionaryRepresentation = *v7;
LABEL_12:
    DictionaryRepresentation = CFRetain(DictionaryRepresentation);
    goto LABEL_13;
  }
  if (CFEqual(a2, @"NonIntegralSourceBoundingOriginSupported"))
  {
    BOOL v9 = hardwareSupportsNonIntegralSrcOffset();
    CFTypeID v7 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!v9) {
      CFTypeID v7 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_11;
  }
  if (CFEqual(a2, @"RotationZeroFillData"))
  {
    CFTypeID v7 = (const void **)MEMORY[0x1E4F1CFD0];
    int v8 = *(unsigned __int8 *)(DerivedStorage + 33);
    goto LABEL_3;
  }
  if (CFEqual(a2, @"RotationEnableHistogram"))
  {
    CFTypeID v7 = (const void **)MEMORY[0x1E4F1CFD0];
    int v8 = *(unsigned __int8 *)(DerivedStorage + 34);
LABEL_3:
    if (!v8) {
      CFTypeID v7 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_11;
  }
  if (CFEqual(a2, @"RotationHistogramData"))
  {
    DictionaryRepresentation = *(const void **)(DerivedStorage + 40);
    if (!DictionaryRepresentation) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (!CFEqual(a2, @"RotationHistogramRectangle")) {
    return 4294954396;
  }
  if (CGRectIsNull(*(CGRect *)(DerivedStorage + 48))) {
    DictionaryRepresentation = 0;
  }
  else {
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(*(CGRect *)(DerivedStorage + 48));
  }
LABEL_13:
  uint64_t v11 = 0;
  *a4 = DictionaryRepresentation;
  return v11;
}

BOOL hardwareSupportsNonIntegralSrcOffset()
{
  if ((isH3Platform_checked_0 & 1) == 0)
  {
    mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
    CFDictionaryRef v1 = IOServiceMatching("AppleM2ScalerCSCDriver");
    io_service_t MatchingService = IOServiceGetMatchingService(v0, v1);
    if (MatchingService)
    {
      io_object_t v3 = MatchingService;
      uint64_t valuePtr = 0;
      CFDictionaryRef v4 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"IOSurfaceAcceleratorCapabilitiesDict", 0, 0);
      if (v4)
      {
        CFDictionaryRef v5 = v4;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"IOSurfaceAcceleratorScalerVersion");
        if (Value)
        {
          CFNumberRef v7 = Value;
          CFTypeID v8 = CFGetTypeID(Value);
          if (v8 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v7, kCFNumberLongLongType, &valuePtr);
            if (valuePtr == 131079 || valuePtr == 131074) {
              isH3Platform_isH3Platform_0 = 1;
            }
          }
        }
        CFRelease(v5);
      }
      IOObjectRelease(v3);
    }
    isH3Platform_checked_0 = 1;
  }
  return (isH3Platform_isH3Platform_0 & 1) == 0;
}

uint64_t VTPixelTransferNodeCelesteRotationCopySupportedPropertyDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFDictionaryRef v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *a2 = 0;
  keys = @"PropertyType";
  CGRect v16 = @"ReadWriteStatus";
  values = @"Boolean";
  int8x16_t v14 = @"ReadWrite";
  CFDictionaryRef v7 = CFDictionaryCreate(v3, (const void **)&keys, (const void **)&values, 2, v4, v5);
  if (!v7)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_8;
  }
  CFDictionaryRef v8 = v7;
  keys = @"PropertyType";
  CGRect v16 = @"ReadWriteStatus";
  values = @"Boolean";
  int8x16_t v14 = @"ReadOnly";
  CFDictionaryRef v9 = CFDictionaryCreate(v3, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v9)
  {
    uint64_t v11 = FigSignalErrorAt();
    CFRelease(v8);
LABEL_8:
    if (!Mutable) {
      return v11;
    }
    goto LABEL_4;
  }
  CFDictionaryRef v10 = v9;
  CFDictionarySetValue(Mutable, @"RotationEnableHighSpeedTransfer", v8);
  CFDictionarySetValue(Mutable, @"ScalingSupported", v8);
  CFDictionarySetValue(Mutable, @"NonIntegralSourceBoundingOriginSupported", v8);
  CFDictionarySetValue(Mutable, @"RotationZeroFillData", v8);
  CFDictionarySetValue(Mutable, @"RotationEnableHistogram", v8);
  CFDictionarySetValue(Mutable, @"RotationHistogramData", v10);
  CFDictionarySetValue(Mutable, @"RotationHistogramRectangle", v8);
  *a2 = Mutable;
  CFRelease(v8);
  uint64_t v11 = 0;
  CFMutableArrayRef Mutable = v10;
LABEL_4:
  CFRelease(Mutable);
  return v11;
}

uint64_t vt_Rotate_Celeste(int a1, __CVBuffer *a2, const __CFDictionary *a3, CVPixelBufferRef pixelBuffer, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, const __CFDictionary *a13, int a14, int a15, int a16)
{
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a2);
  IOSurfaceRef v31 = CVPixelBufferGetIOSurface(pixelBuffer);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v33 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 34))
  {
    int32x4_t v34 = *(const void **)(DerivedStorage + 40);
    if (v34) {
      CFRelease(v34);
    }
    *(void *)(v33 + 40) = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  }
  if (!IOSurface)
  {
    if ((vt_Rotate_Celeste_sAlreadyLogged & 1) == 0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      vt_Rotate_Celeste_sAlreadyLogged = 1;
    }
    return FigSignalErrorAt();
  }
  if (!v31)
  {
    if ((vt_Rotate_Celeste_sAlreadyLogged_7 & 1) == 0)
    {
      int32x4_t v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      vt_Rotate_Celeste_sAlreadyLogged_7 = 1;
    }
    return FigSignalErrorAt();
  }
  if (!CFEqual(IOSurface, v31))
  {
    if (!hardwareSupportsNonIntegralSrcOffset())
    {
      double v38 = a5 + a7;
      a5 = floor(a5);
      double v39 = a6 + a8;
      a6 = floor(a6);
      a7 = ceil(v38) - a5;
      a8 = ceil(v39) - a6;
    }
    OSType v188 = CVPixelBufferGetPixelFormatType(a2);
    signed int v187 = CVPixelBufferGetPixelFormatType(pixelBuffer);
    size_t Width = CVPixelBufferGetWidth(a2);
    size_t Height = CVPixelBufferGetHeight(a2);
    size_t v183 = CVPixelBufferGetWidth(pixelBuffer);
    size_t v181 = CVPixelBufferGetHeight(pixelBuffer);
    int v184 = a14;
    if (a3 && a13)
    {
      CFAllocatorRef v40 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFIndex Count = CFDictionaryGetCount(a3);
      MutableCopy = CFDictionaryCreateMutableCopy(v40, Count, a3);
      CFIndex v43 = CFDictionaryGetCount(a13);
      unint64_t v44 = CFDictionaryCreateMutableCopy(v40, v43, a13);
      float v45 = (const void *)*MEMORY[0x1E4F24C18];
      CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24C18]);
      CFDictionaryRemoveValue(v44, v45);
      int v46 = VTDoColorDictionariesMatch(MutableCopy, v44);
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      int v186 = v46;
      if (v44) {
        CFRelease(v44);
      }
    }
    else
    {
      int v186 = VTDoColorDictionariesMatch(0, 0);
    }
    int v47 = v188;
    unint64_t v48 = 0x1E9334000;
    unint64_t v49 = 0x1EB3B8000;
    unint64_t v50 = 0x1EB3B8000;
    unint64_t v51 = 0x1EB3B8000;
    unint64_t v52 = 0x1EB3B8000;
    unint64_t v53 = 0x1EB3B8000;
    unint64_t v54 = 0x1EB3B8000;
    unint64_t v55 = 0x1EB3B8000;
    unint64_t v56 = 0x1EB3B8000;
    unint64_t v57 = 0x1EB3B8000;
    unint64_t v58 = 0x1EB3B8000;
    unint64_t v59 = 0x1EB3B8000;
    unint64_t v60 = 0x1EB3B8000;
    unint64_t v61 = 0x1EB3B8000;
    unint64_t v62 = 0x1EB3B8000;
    if ((scalerCapabilities_checked_0 & 1) == 0)
    {
      mach_port_t v63 = *MEMORY[0x1E4F2EEF0];
      CFDictionaryRef v64 = IOServiceMatching("AppleM2ScalerCSCDriver");
      io_service_t MatchingService = IOServiceGetMatchingService(v63, v64);
      if (MatchingService)
      {
        io_object_t v66 = MatchingService;
        *(void *)&valuePtr[0] = 0;
        CFTypeRef v67 = IORegistryEntrySearchCFProperty(MatchingService, "IOService", @"IOSurfaceAcceleratorCapabilitiesDict", 0, 0);
        if (v67)
        {
          float v68 = v67;
          FigCFDictionaryGetFloatIfPresent();
          FigCFDictionaryGetFloatIfPresent();
          if (FigCFDictionaryGetFloatIfPresent()) {
            *(float *)&scalerCapabilities_maxHDownscale = 1.0 / *(float *)&scalerCapabilities_maxHDownscale;
          }
          if (FigCFDictionaryGetFloatIfPresent()) {
            *(float *)&scalerCapabilities_maxVDownscale = 1.0 / *(float *)&scalerCapabilities_maxVDownscale;
          }
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          FigCFDictionaryGetInt64IfPresent();
          *(void *)&valuePtr[0] = 0;
          FigCFDictionaryGetInt64IfPresent();
          CFRelease(v68);
        }
        IOObjectRelease(v66);
        int v47 = v188;
      }
      scalerCapabilities_checked_0 = 1;
      unint64_t v62 = 0x1EB3B8000uLL;
      unint64_t v48 = 0x1E9334000uLL;
      unint64_t v49 = 0x1EB3B8000uLL;
      unint64_t v50 = 0x1EB3B8000uLL;
      unint64_t v51 = 0x1EB3B8000uLL;
      unint64_t v52 = 0x1EB3B8000uLL;
      unint64_t v53 = 0x1EB3B8000uLL;
      unint64_t v54 = 0x1EB3B8000uLL;
      unint64_t v55 = 0x1EB3B8000uLL;
      unint64_t v56 = 0x1EB3B8000uLL;
      unint64_t v57 = 0x1EB3B8000uLL;
      unint64_t v58 = 0x1EB3B8000uLL;
      unint64_t v59 = 0x1EB3B8000uLL;
      unint64_t v60 = 0x1EB3B8000uLL;
      unint64_t v61 = 0x1EB3B8000uLL;
    }
    char v172 = *(unsigned char *)(v53 + 3427);
    char v173 = *(unsigned char *)(v57 + 3435);
    int v69 = *(unsigned __int8 *)(v60 + 3440);
    int v70 = *(unsigned __int8 *)(v61 + 3441);
    int v163 = PixelFormatType;
    float v164 = *(float *)(v48 + 1188);
    float v165 = *(float *)&scalerCapabilities_maxVUpscale;
    float v166 = *(float *)&scalerCapabilities_maxHDownscale;
    float v171 = *(float *)&scalerCapabilities_maxHUpscale;
    char v182 = *(unsigned char *)(v62 + 3443);
    int v185 = scalerCapabilities_hasSupportOut_colorConversion;
    char v176 = *(unsigned char *)(v54 + 3429);
    char v177 = *(unsigned char *)(v58 + 3437);
    char v174 = *(unsigned char *)(v56 + 3433);
    char v175 = *(unsigned char *)(v55 + 3431);
    char v169 = *(unsigned char *)(v52 + 3425);
    char v170 = *(unsigned char *)(v49 + 3419);
    char v178 = *(unsigned char *)(v59 + 3439);
    char v167 = *(unsigned char *)(v51 + 3423);
    char v168 = *(unsigned char *)(v50 + 3421);
    if (v47 <= 1530422831)
    {
      if (v47 > 762869295)
      {
        if (v47 > 875704421)
        {
          if (v47 <= 875836533)
          {
            if (v47 <= 875704933)
            {
              if (v47 == 875704422) {
                goto LABEL_185;
              }
              int v72 = 875704438;
            }
            else
            {
              if (v47 == 875704934 || v188 == 875704950) {
                goto LABEL_185;
              }
              int v72 = 875836518;
            }
            goto LABEL_161;
          }
          if (v47 <= 1278226487)
          {
            if (v47 == 875836534) {
              goto LABEL_185;
            }
            int v72 = 1111970369;
            goto LABEL_161;
          }
          if (v47 == 1278226488)
          {
            if ((scalerCapabilities_hasSupportIn_L008 & 1) == 0) {
              return FigSignalErrorAt();
            }
            goto LABEL_185;
          }
          if (v47 == 1278226742)
          {
            if ((scalerCapabilities_hasSupportIn_L016 & 1) == 0) {
              return FigSignalErrorAt();
            }
            goto LABEL_185;
          }
          if (v47 != 1380411457) {
            return FigSignalErrorAt();
          }
          goto LABEL_169;
        }
        if (v47 > 792872768)
        {
          if (v47 <= 796419633)
          {
            if (v47 == 792872769) {
              goto LABEL_169;
            }
            unsigned __int16 v74 = 26160;
          }
          else
          {
            if (v47 == 796419634 || v188 == 796423728) {
              goto LABEL_169;
            }
            unsigned __int16 v74 = 30258;
          }
          int v73 = v74 | 0x2F780000;
          goto LABEL_168;
        }
        if (v47 > 792225327)
        {
          if (v47 != 792225328)
          {
            int v73 = 792229424;
LABEL_168:
            if (v188 != v73) {
              return FigSignalErrorAt();
            }
            goto LABEL_169;
          }
          goto LABEL_169;
        }
        if (v47 == 762869296) {
          goto LABEL_169;
        }
        unsigned __int16 v75 = 30258;
      }
      else
      {
        if (v47 <= 645424687)
        {
          if (v47 <= 645101103)
          {
            if (v47 != 641230384 && v188 != 641234480)
            {
              int v73 = 641877825;
              goto LABEL_168;
            }
          }
          else if (((v47 - 645101104) > 4 || ((1 << (v47 - 48)) & 0x15) == 0) {
                 && (v188 - 645166640 > 4 || ((1 << (v188 - 48)) & 0x15) == 0))
          }
          {
            return FigSignalErrorAt();
          }
          goto LABEL_169;
        }
        if (v47 <= 758670895)
        {
          if (v47 <= 645428783)
          {
            if (v47 == 645424688) {
              goto LABEL_169;
            }
            unsigned __int16 v71 = 26162;
          }
          else
          {
            if (v47 == 645428784 || v188 == 645428786) {
              goto LABEL_169;
            }
            unsigned __int16 v71 = 30512;
          }
          int v73 = v71 | 0x26780000;
          goto LABEL_168;
        }
        if (v47 <= 759318336)
        {
          if (v47 != 758670896)
          {
            int v73 = 758674992;
            goto LABEL_168;
          }
          goto LABEL_169;
        }
        if (v47 == 759318337 || v188 == 762865200) {
          goto LABEL_169;
        }
        unsigned __int16 v75 = 26162;
      }
      int v73 = v75 | 0x2D780000;
      goto LABEL_168;
    }
    if (v47 > 1953903667)
    {
      if (v47 <= 2021078067)
      {
        if (v47 <= 2019963439)
        {
          if (v47 <= 2016686639)
          {
            if (v47 != 1953903668 && (v188 != 1999843442 || (scalerCapabilities_hasSupportIn_w30r & 1) == 0)) {
              return FigSignalErrorAt();
            }
            goto LABEL_185;
          }
          if (v47 != 2016686640)
          {
            if (v47 != 2016686642)
            {
              if (v188 != 2016687156) {
                return FigSignalErrorAt();
              }
              goto LABEL_140;
            }
LABEL_151:
            if ((scalerCapabilities_hasSupportIn_2plane10bit422 & 1) == 0) {
              return FigSignalErrorAt();
            }
            goto LABEL_185;
          }
          goto LABEL_153;
        }
        if (v47 <= 2019963955)
        {
          if (v47 != 2019963440)
          {
            if (v47 != 2019963442) {
              return FigSignalErrorAt();
            }
            goto LABEL_151;
          }
          goto LABEL_153;
        }
        if (v47 != 2019963956)
        {
          if (v188 != 2021077552)
          {
            if (v188 != 2021077554) {
              return FigSignalErrorAt();
            }
            goto LABEL_151;
          }
LABEL_153:
          if ((scalerCapabilities_hasSupportIn_2plane10bit420 & 1) == 0) {
            return FigSignalErrorAt();
          }
          goto LABEL_185;
        }
LABEL_140:
        if ((scalerCapabilities_hasSupportIn_2plane10bit444 & 1) == 0) {
          return FigSignalErrorAt();
        }
        goto LABEL_185;
      }
      if (v47 <= 2084718400)
      {
        if (v47 > 2037741170)
        {
          if (v47 == 2037741171) {
            goto LABEL_185;
          }
          if (v188 == 2084070960) {
            goto LABEL_169;
          }
          int v73 = 2084075056;
          goto LABEL_168;
        }
        if (v47 == 2021078068) {
          goto LABEL_140;
        }
        int v72 = 2037741158;
LABEL_161:
        if (v188 != v72) {
          return FigSignalErrorAt();
        }
        goto LABEL_185;
      }
      if (v47 <= 2088265265)
      {
        if (v47 != 2084718401)
        {
          unsigned __int16 v76 = 26160;
          goto LABEL_165;
        }
      }
      else if (v47 != 2088265266 && v188 != 2088269360)
      {
        unsigned __int16 v76 = 30258;
LABEL_165:
        int v73 = v76 | 0x7C780000;
        goto LABEL_168;
      }
LABEL_169:
      uint16x8_t v78 = CVPixelBufferGetIOSurface(a2);
      if (v78)
      {
        PlaneCFIndex Count = IOSurfaceGetPlaneCount(v78);
        if (PlaneCount)
        {
          size_t v80 = PlaneCount;
          uint64_t v81 = 0;
          char v82 = 1;
          do
          {
            while (1)
            {
              int CompressionTypeOfPlane = IOSurfaceGetCompressionTypeOfPlane();
              if (CompressionTypeOfPlane != 2) {
                break;
              }
              char v82 = 0;
              if (++v81 == v80) {
                return FigSignalErrorAt();
              }
            }
            if (CompressionTypeOfPlane == 4) {
              int v84 = v70;
            }
            else {
              int v84 = 1;
            }
            if (CompressionTypeOfPlane == 3) {
              int v84 = v69;
            }
            if (!v84) {
              char v82 = 0;
            }
            ++v81;
          }
          while (v81 != v80);
          if (!v82) {
            return FigSignalErrorAt();
          }
        }
      }
      goto LABEL_185;
    }
    if (v47 > 1885745713)
    {
      if (v47 > 1937125935)
      {
        if (v47 <= 1937126451)
        {
          if (v47 == 1937125936) {
            goto LABEL_185;
          }
          int v72 = 1937125938;
        }
        else
        {
          if (v47 == 1937126452 || v188 == 1953903152) {
            goto LABEL_185;
          }
          int v72 = 1953903154;
        }
        goto LABEL_161;
      }
      if (v47 <= 1886859823)
      {
        if (v47 != 1885745714)
        {
          if (v47 != 1885746228) {
            return FigSignalErrorAt();
          }
          goto LABEL_132;
        }
        goto LABEL_134;
      }
      if (v47 != 1886859824)
      {
        if (v188 != 1886859826)
        {
          if (v188 != 1886860340) {
            return FigSignalErrorAt();
          }
          goto LABEL_132;
        }
LABEL_134:
        if ((scalerCapabilities_hasSupportIn_2planePacked10bit422 & 1) == 0) {
          return FigSignalErrorAt();
        }
        goto LABEL_185;
      }
LABEL_144:
      if ((scalerCapabilities_hasSupportIn_2planePacked10bit420 & 1) == 0) {
        return FigSignalErrorAt();
      }
      goto LABEL_185;
    }
    if (v47 > 1647534391)
    {
      if (v47 <= 1882468913)
      {
        if (v47 == 1647534392)
        {
          if ((scalerCapabilities_hasSupportIn_b3a8 & 1) == 0) {
            return FigSignalErrorAt();
          }
          goto LABEL_185;
        }
        if (v47 != 1882468912) {
          return FigSignalErrorAt();
        }
      }
      else
      {
        if (v47 == 1882468914) {
          goto LABEL_134;
        }
        if (v47 == 1882469428)
        {
LABEL_132:
          if ((scalerCapabilities_hasSupportIn_2planePacked10bit444 & 1) == 0) {
            return FigSignalErrorAt();
          }
          goto LABEL_185;
        }
        if (v188 != 1885745712) {
          return FigSignalErrorAt();
        }
      }
      goto LABEL_144;
    }
    if (v47 > 1534617135)
    {
      if (v47 != 1534617136)
      {
        int v77 = 1534621232;
LABEL_120:
        if (v188 != v77) {
          return FigSignalErrorAt();
        }
      }
    }
    else if (v47 != 1530422832)
    {
      int v77 = 1530426928;
      goto LABEL_120;
    }
    if ((scalerCapabilities_hasSupportIn_mediaCompression & 1) == 0) {
      return FigSignalErrorAt();
    }
LABEL_185:
    signed int v85 = v187;
    if (v187 <= 1530422831)
    {
      if (v187 > 762869295)
      {
        if (v187 > 875704421)
        {
          if (v187 > 875836533)
          {
            if (v187 > 1278226487)
            {
              if (v187 == 1278226488)
              {
                if ((v167 & 1) == 0) {
                  return FigSignalErrorAt();
                }
                goto LABEL_336;
              }
              if (v187 == 1278226742)
              {
                if ((v169 & 1) == 0) {
                  return FigSignalErrorAt();
                }
                goto LABEL_336;
              }
              int v89 = 1380411457;
LABEL_319:
              if (v85 != v89) {
                return FigSignalErrorAt();
              }
              goto LABEL_320;
            }
            if (v187 == 875836534) {
              goto LABEL_336;
            }
            int v88 = 1111970369;
          }
          else if (v187 <= 875704933)
          {
            if (v187 == 875704422) {
              goto LABEL_336;
            }
            int v88 = 875704438;
          }
          else
          {
            if (v187 == 875704934 || v187 == 875704950) {
              goto LABEL_336;
            }
            int v88 = 875836518;
          }
          goto LABEL_306;
        }
        if (v187 > 792872768)
        {
          if (v187 <= 796419633)
          {
            if (v187 == 792872769) {
              goto LABEL_320;
            }
            unsigned __int16 v91 = 26160;
          }
          else
          {
            if (v187 == 796419634 || v187 == 796423728) {
              goto LABEL_320;
            }
            unsigned __int16 v91 = 30258;
          }
          int v89 = v91 | 0x2F780000;
          goto LABEL_318;
        }
        if (v187 > 792225327)
        {
          if (v187 == 792225328) {
            goto LABEL_320;
          }
          int v89 = 792229424;
          goto LABEL_318;
        }
        if (v187 == 762869296) {
          goto LABEL_320;
        }
        unsigned __int16 v93 = 30258;
      }
      else
      {
        if (v187 <= 645424687)
        {
          if (v187 > 645101103)
          {
            if (((v187 - 645101104) > 4 || ((1 << (v187 - 48)) & 0x15) == 0)
              && ((v187 - 645166640) > 4 || ((1 << (v187 - 48)) & 0x15) == 0))
            {
              return FigSignalErrorAt();
            }
            goto LABEL_320;
          }
          if (v187 == 641230384 || v187 == 641234480)
          {
LABEL_320:
            float v96 = CVPixelBufferGetIOSurface(pixelBuffer);
            if (v96)
            {
              size_t v97 = IOSurfaceGetPlaneCount(v96);
              if (v97)
              {
                size_t v98 = v97;
                uint64_t v99 = 0;
                char v100 = 1;
                do
                {
                  while (1)
                  {
                    int v101 = IOSurfaceGetCompressionTypeOfPlane();
                    if (v101 != 2) {
                      break;
                    }
                    char v100 = 0;
                    if (++v99 == v98) {
                      return FigSignalErrorAt();
                    }
                  }
                  if (v101 == 4) {
                    int v102 = v70;
                  }
                  else {
                    int v102 = 1;
                  }
                  if (v101 == 3) {
                    int v102 = v69;
                  }
                  if (!v102) {
                    char v100 = 0;
                  }
                  ++v99;
                }
                while (v99 != v98);
                if (!v100) {
                  return FigSignalErrorAt();
                }
              }
            }
            goto LABEL_336;
          }
          int v89 = 641877825;
          goto LABEL_318;
        }
        if (v187 <= 758670895)
        {
          if (v187 <= 645428783)
          {
            if (v187 == 645424688) {
              goto LABEL_320;
            }
            unsigned __int16 v86 = 26162;
          }
          else
          {
            if (v187 == 645428784 || v187 == 645428786) {
              goto LABEL_320;
            }
            unsigned __int16 v86 = 30512;
          }
          int v89 = v86 | 0x26780000;
          goto LABEL_318;
        }
        if (v187 <= 759318336)
        {
          if (v187 == 758670896) {
            goto LABEL_320;
          }
          int v89 = 758674992;
          goto LABEL_318;
        }
        if (v187 == 759318337 || v187 == 762865200) {
          goto LABEL_320;
        }
        unsigned __int16 v93 = 26162;
      }
      int v89 = v93 | 0x2D780000;
LABEL_318:
      signed int v85 = v187;
      goto LABEL_319;
    }
    if (v187 > 1953903667)
    {
      if (v187 <= 2021078067)
      {
        if (v187 <= 2019963439)
        {
          if (v187 <= 2016686639)
          {
            if (v187 != 1953903668 && (v187 != 1999843442 || (v170 & 1) == 0)) {
              return FigSignalErrorAt();
            }
            goto LABEL_336;
          }
          if (v187 != 2016686640)
          {
            if (v187 != 2016686642)
            {
              if (v187 != 2016687156) {
                return FigSignalErrorAt();
              }
              goto LABEL_283;
            }
LABEL_296:
            if ((v176 & 1) == 0) {
              return FigSignalErrorAt();
            }
            goto LABEL_336;
          }
LABEL_298:
          if ((v172 & 1) == 0) {
            return FigSignalErrorAt();
          }
          goto LABEL_336;
        }
        if (v187 <= 2019963955)
        {
          if (v187 == 2019963440) {
            goto LABEL_298;
          }
          int v92 = 2019963442;
          goto LABEL_295;
        }
        if (v187 != 2019963956)
        {
          signed int v85 = v187;
          if (v187 == 2021077552) {
            goto LABEL_298;
          }
          int v92 = 2021077554;
LABEL_295:
          if (v85 == v92) {
            goto LABEL_296;
          }
          return FigSignalErrorAt();
        }
LABEL_283:
        if ((v175 & 1) == 0) {
          return FigSignalErrorAt();
        }
        goto LABEL_336;
      }
      if (v187 > 2084718400)
      {
        if (v187 <= 2088265265)
        {
          if (v187 == 2084718401) {
            goto LABEL_320;
          }
          unsigned __int16 v94 = 26160;
        }
        else
        {
          if (v187 == 2088265266 || v187 == 2088269360) {
            goto LABEL_320;
          }
          unsigned __int16 v94 = 30258;
        }
        int v89 = v94 | 0x7C780000;
        goto LABEL_318;
      }
      if (v187 > 2037741170)
      {
        if (v187 == 2037741171) {
          goto LABEL_336;
        }
        if (v187 == 2084070960) {
          goto LABEL_320;
        }
        int v89 = 2084075056;
        goto LABEL_318;
      }
      if (v187 == 2021078068) {
        goto LABEL_283;
      }
      int v88 = 2037741158;
LABEL_306:
      if (v187 != v88) {
        return FigSignalErrorAt();
      }
      goto LABEL_336;
    }
    if (v187 > 1885745713)
    {
      if (v187 > 1937125935)
      {
        if (v187 <= 1937126451)
        {
          if (v187 == 1937125936) {
            goto LABEL_336;
          }
          int v88 = 1937125938;
        }
        else
        {
          if (v187 == 1937126452 || v187 == 1953903152) {
            goto LABEL_336;
          }
          int v88 = 1953903154;
        }
        goto LABEL_306;
      }
      if (v187 <= 1886859823)
      {
        if (v187 != 1885745714)
        {
          int v87 = 1885746228;
LABEL_274:
          if (v85 != v87) {
            return FigSignalErrorAt();
          }
          goto LABEL_275;
        }
LABEL_277:
        if ((v173 & 1) == 0) {
          return FigSignalErrorAt();
        }
        goto LABEL_336;
      }
      if (v187 != 1886859824)
      {
        signed int v85 = v187;
        if (v187 != 1886859826)
        {
          int v87 = 1886860340;
          goto LABEL_274;
        }
        goto LABEL_277;
      }
LABEL_288:
      if ((v174 & 1) == 0) {
        return FigSignalErrorAt();
      }
      goto LABEL_336;
    }
    if (v187 > 1647534391)
    {
      if (v187 <= 1882468913)
      {
        if (v187 == 1647534392)
        {
          if (v168) {
            goto LABEL_336;
          }
          return FigSignalErrorAt();
        }
        int v90 = 1882468912;
      }
      else
      {
        if (v187 == 1882468914) {
          goto LABEL_277;
        }
        if (v187 == 1882469428)
        {
LABEL_275:
          if ((v177 & 1) == 0) {
            return FigSignalErrorAt();
          }
LABEL_336:
          int v103 = v185;
          if (v186) {
            int v103 = 1;
          }
          if (v103 != 1) {
            return FigSignalErrorAt();
          }
          if (v188 == 2037741171 || v188 == 2037741158 || v187 == 2037741171 || v187 == 2037741158)
          {
            if ((hardwareSupportsYUVS_checked & 1) == 0)
            {
              mach_port_t v104 = *MEMORY[0x1E4F2EEF0];
              CFDictionaryRef v105 = IOServiceMatching("AppleM2ScalerCSCDriver");
              io_service_t v106 = IOServiceGetMatchingService(v104, v105);
              if (v106)
              {
                io_object_t v107 = v106;
                *(void *)&valuePtr[0] = 0;
                CFDictionaryRef v108 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(v106, "IOService", @"IOSurfaceAcceleratorCapabilitiesDict", 0, 0);
                if (v108)
                {
                  CFDictionaryRef v109 = v108;
                  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v108, @"IOSurfaceAcceleratorFormatInInterleaved422");
                  if (Value)
                  {
                    CFNumberRef v111 = Value;
                    CFTypeID v112 = CFGetTypeID(Value);
                    if (v112 == CFNumberGetTypeID())
                    {
                      CFNumberGetValue(v111, kCFNumberLongLongType, valuePtr);
                      if (*(void *)&valuePtr[0]) {
                        hardwareSupportsYUVS_hasSupport = 1;
                      }
                    }
                  }
                  CFRelease(v109);
                }
                IOObjectRelease(v107);
              }
              hardwareSupportsYUVS_checked = 1;
            }
            if (hardwareSupportsYUVS_hasSupport != 1) {
              return FigSignalErrorAt();
            }
          }
          if (v184 > 179)
          {
            if (v184 != 270 && v184 != 180) {
              return FigSignalErrorAt();
            }
          }
          else if (v184 && v184 != 90)
          {
            return FigSignalErrorAt();
          }
          int v113 = 0;
          double v114 = a10 + a12;
          double v115 = floor(a9);
          double v116 = floor(a10);
          double v117 = ceil(a9 + a11);
          double v118 = ceil(v114);
          if (v187 > 1886859825)
          {
            char v119 = v182;
            if (v187 <= 2019963441)
            {
              if (v187 > 2016686641)
              {
                int v120 = v188;
                if (v187 == 2016686642) {
                  goto LABEL_387;
                }
                int v121 = 2019963440;
              }
              else
              {
                int v120 = v188;
                if (v187 == 1886859826) {
                  goto LABEL_387;
                }
                int v121 = 2016686640;
              }
            }
            else if (v187 <= 2021077553)
            {
              int v120 = v188;
              if (v187 == 2019963442) {
                goto LABEL_387;
              }
              int v121 = 2021077552;
            }
            else
            {
              int v120 = v188;
              if (v187 == 2021077554 || v187 == 2037741171) {
                goto LABEL_387;
              }
              int v121 = 2037741158;
            }
          }
          else
          {
            char v119 = v182;
            if (v187 <= 1882468911)
            {
              if (v187 > 875704933)
              {
                int v120 = v188;
                if (v187 == 875704934) {
                  goto LABEL_387;
                }
                unsigned __int16 v122 = 12918;
              }
              else
              {
                int v120 = v188;
                if (v187 == 875704422) {
                  goto LABEL_387;
                }
                unsigned __int16 v122 = 12406;
              }
              int v121 = v122 | 0x34320000;
            }
            else if (v187 <= 1885745711)
            {
              int v120 = v188;
              if (v187 == 1882468912) {
                goto LABEL_387;
              }
              int v121 = 1882468914;
            }
            else
            {
              int v120 = v188;
              if (v187 == 1885745712 || v187 == 1885745714) {
                goto LABEL_387;
              }
              int v121 = 1886859824;
            }
          }
          if (v187 != v121) {
            goto LABEL_404;
          }
LABEL_387:
          int v113 = v183 & 1;
          if (v187 <= 2016686639)
          {
            if (v187 <= 1882468911)
            {
              if (v187 == 875704422) {
                goto LABEL_402;
              }
              int v123 = 875704438;
            }
            else
            {
              if (v187 == 1882468912 || v187 == 1885745712) {
                goto LABEL_402;
              }
              int v123 = 1886859824;
            }
          }
          else
          {
            if (v187 <= 2019963441)
            {
              if (v187 != 2016686640 && v187 != 2016686642)
              {
                int v123 = 2019963440;
                goto LABEL_401;
              }
LABEL_402:
              if (v181) {
                int v113 = 1;
              }
LABEL_404:
              double v124 = v117 - v115;
              double v125 = v118 - v116;
              if (v119) {
                goto LABEL_405;
              }
              if (v120 > 875704949)
              {
                if (v120 != 875704950 && v188 != 2037741171)
                {
                  int v136 = 2037741158;
LABEL_438:
                  if (v188 != v136) {
                    goto LABEL_441;
                  }
                }
              }
              else if (v120 != 875704422 && v188 != 875704438)
              {
                int v136 = 875704934;
                goto LABEL_438;
              }
              if ((unint64_t)a7 & 1) != 0 || ((unint64_t)a8) {
                return FigSignalErrorAt();
              }
LABEL_441:
              if (v187 > 875704949)
              {
                if (v187 != 875704950 && v187 != 2037741171)
                {
                  int v137 = 2037741158;
LABEL_448:
                  if (v187 != v137) {
                    goto LABEL_405;
                  }
                }
              }
              else if (v187 != 875704422 && v187 != 875704438)
              {
                int v137 = 875704934;
                goto LABEL_448;
              }
              if ((unint64_t)v124 & 1) != 0 || ((unint64_t)v125) {
                return FigSignalErrorAt();
              }
LABEL_405:
              if (a5 < 0.0
                || a5 + a7 > (double)Width
                || a6 < 0.0
                || a6 + a8 > (double)Height
                || v115 < 0.0
                || v115 + v124 > (double)v183
                || v116 < 0.0
                || v116 + v125 > (double)v181)
              {
                return FigSignalErrorAt();
              }
              double v126 = a8;
              double v127 = a7;
              if (v184 != 90)
              {
                double v126 = a8;
                double v127 = a7;
                if (v184 != 270)
                {
                  double v126 = a7;
                  double v127 = a8;
                }
              }
              float v128 = v124;
              float v129 = v126;
              float v130 = v128 / v129;
              if (v130 > v171 || v130 < v166) {
                return FigSignalErrorAt();
              }
              float v131 = v125;
              float v132 = v127;
              float v133 = v131 / v132;
              BOOL v134 = v133 >= v164 && v133 <= v165;
              if (!v134 || !*(void *)(v33 + 24) && IOSurfaceAcceleratorCreate()) {
                return FigSignalErrorAt();
              }
              IOSurfaceBindAccel();
              if (a15) {
                int v135 = (a16 != 0) | 2;
              }
              else {
                int v135 = a16 != 0;
              }
              switch(v184)
              {
                case 270:
                  v135 ^= 7u;
                  break;
                case 180:
                  v135 ^= 3u;
                  break;
                case 90:
                  v135 |= 4u;
                  break;
              }
              float16x8_t v139 = *(const void **)(v33 + 88);
              if (*(_DWORD *)(v33 + 80) == v135)
              {
                if (v139) {
                  goto LABEL_485;
                }
              }
              else if (v139)
              {
                CFRelease(v139);
                *(void *)(v33 + 88) = 0;
              }
              CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              *(void *)(v33 + 88) = Mutable;
              *(_DWORD *)(v33 + 80) = v135;
              float16x8_t v141 = (const void *)*MEMORY[0x1E4F6ED68];
              LODWORD(valuePtr[0]) = v135;
              CFNumberRef v142 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              CFDictionarySetValue(Mutable, v141, v142);
              CFRelease(v142);
              float16x8_t v143 = (const void **)MEMORY[0x1E4F1CFD0];
              if (*(unsigned char *)(v33 + 32)) {
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E4F6EC80], (const void *)*MEMORY[0x1E4F1CFD0]);
              }
              if (*(unsigned char *)(v33 + 33)) {
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E4F6EDA0], *v143);
              }
              if (*(unsigned char *)(v33 + 118)) {
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), @"ReducedPrecisionFractionalOffsets", *v143);
              }
              if (*(unsigned char *)(v33 + 34))
              {
                LODWORD(valuePtr[0]) = 1;
                if (CGRectIsNull(*(CGRect *)(v33 + 48)))
                {
                  int v144 = 0;
                  int v145 = 0;
                  double v146 = v124;
                  double v147 = v125;
                }
                else
                {
                  double v146 = *(double *)(v33 + 64);
                  double v147 = *(double *)(v33 + 72);
                  int v144 = (int)*(double *)(v33 + 48);
                  int v145 = (int)*(double *)(v33 + 56);
                }
                CFAllocatorRef v148 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                CFNumberRef v149 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E4F6EC90], v149);
                CFRelease(v149);
                LODWORD(v196[0]) = v144;
                CFNumberRef v150 = CFNumberCreate(v148, kCFNumberSInt32Type, v196);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E4F6ECA0], v150);
                CFRelease(v150);
                LODWORD(v196[0]) = v145;
                CFNumberRef v151 = CFNumberCreate(v148, kCFNumberSInt32Type, v196);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E4F6ECA8], v151);
                CFRelease(v151);
                LODWORD(v196[0]) = (int)v146;
                CFNumberRef v152 = CFNumberCreate(v148, kCFNumberSInt32Type, v196);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E4F6ECB0], v152);
                CFRelease(v152);
                LODWORD(v196[0]) = (int)v147;
                CFNumberRef v153 = CFNumberCreate(v148, kCFNumberSInt32Type, v196);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v33 + 88), (const void *)*MEMORY[0x1E4F6EC98], v153);
                CFRelease(v153);
              }
LABEL_485:
              uint16x8_t v154 = 0;
              uint32x4_t v155 = (CFStringRef *)MEMORY[0x1E4F24A90];
              if (v163 <= 793522279)
              {
                if (v163 <= 759967799)
                {
                  if ((v163 - 642527536) <= 6 && ((1 << (v163 - 48)) & 0x45) != 0 || v163 == 642527288) {
                    goto LABEL_504;
                  }
                  int v156 = 642527336;
                  goto LABEL_503;
                }
                if (v163 == 759967800 || v163 == 759967848) {
                  goto LABEL_504;
                }
                unsigned __int16 v157 = 12344;
              }
              else
              {
                if (v163 > 1278226735)
                {
                  if ((v163 - 1278226736) <= 6 && ((1 << (v163 - 48)) & 0x45) != 0 || v163 == 2085367912) {
                    goto LABEL_504;
                  }
                  int v156 = 2085367864;
                  goto LABEL_503;
                }
                if ((v163 - 1278226488) <= 0x30
                  && ((1 << (v163 - 56)) & 0x1400000000001) != 0)
                {
                  goto LABEL_504;
                }
                unsigned __int16 v157 = 12392;
              }
              int v156 = v157 | 0x2F4C0000;
LABEL_503:
              uint64_t v158 = 0;
              if (v163 != v156)
              {
LABEL_514:
                uint64_t v138 = IOSurfaceAcceleratorTransformSurface();
                if (v138)
                {
                  int v192 = 0;
                  memset(valuePtr, 0, sizeof(valuePtr));
                  int v197 = 0;
                  memset(v196, 0, sizeof(v196));
                  IOSurfaceGetBulkAttachments();
                  IOSurfaceGetBulkAttachments();
                  FigSignalErrorAt();
                }
                else
                {
                  if (v158) {
                    CVBufferSetAttachment(pixelBuffer, *v155, v158, kCVAttachmentMode_ShouldPropagate);
                  }
                  if (v154) {
                    CVBufferSetAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F24BC8], v154, kCVAttachmentMode_ShouldPropagate);
                  }
                  if (v113) {
                    vtDuplicateOddPixels(pixelBuffer);
                  }
                  if (*(unsigned char *)(v33 + 34))
                  {
                    bzero(valuePtr, 0x620uLL);
                    if (!IOSurfaceAcceleratorGetHistogram())
                    {
                      CFDataAppendBytes(*(CFMutableDataRef *)(v33 + 40), bytes, 4 * LODWORD(valuePtr[0]));
                      CFDataAppendBytes(*(CFMutableDataRef *)(v33 + 40), v194, 4 * LODWORD(valuePtr[0]));
                      CFDataAppendBytes(*(CFMutableDataRef *)(v33 + 40), v195, 4 * LODWORD(valuePtr[0]));
                    }
                  }
                }
                if (v158) {
                  CFRelease(v158);
                }
                if (v154) {
                  CFRelease(v154);
                }
                return v138;
              }
LABEL_504:
              LODWORD(valuePtr[0]) = 0;
              CFStringRef v159 = (const __CFString *)*MEMORY[0x1E4F24A90];
              CFTypeRef v160 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F24A90], (CVAttachmentMode *)valuePtr);
              uint64_t v158 = v160;
              if (v160 && LODWORD(valuePtr[0]) == 1)
              {
                CVBufferRemoveAttachment(pixelBuffer, v159);
              }
              else if (v160)
              {
                CFRelease(v160);
                uint64_t v158 = 0;
              }
              CFStringRef v161 = (const __CFString *)*MEMORY[0x1E4F24BC8];
              CFTypeRef v162 = CVBufferCopyAttachment(pixelBuffer, (CFStringRef)*MEMORY[0x1E4F24BC8], (CVAttachmentMode *)valuePtr);
              uint16x8_t v154 = v162;
              if (v162 && LODWORD(valuePtr[0]) == 1)
              {
                CVBufferRemoveAttachment(pixelBuffer, v161);
              }
              else if (v162)
              {
                CFRelease(v162);
                uint16x8_t v154 = 0;
              }
              goto LABEL_514;
            }
            if (v187 == 2019963442 || v187 == 2021077554) {
              goto LABEL_402;
            }
            int v123 = 2021077552;
          }
LABEL_401:
          if (v187 != v123) {
            goto LABEL_404;
          }
          goto LABEL_402;
        }
        int v90 = 1885745712;
        signed int v85 = v187;
      }
      if (v85 != v90) {
        return FigSignalErrorAt();
      }
      goto LABEL_288;
    }
    if (v187 > 1534617135)
    {
      if (v187 == 1534617136) {
        goto LABEL_314;
      }
      int v95 = 1534621232;
    }
    else
    {
      if (v187 == 1530422832) {
        goto LABEL_314;
      }
      int v95 = 1530426928;
    }
    if (v187 != v95) {
      return FigSignalErrorAt();
    }
LABEL_314:
    if ((v178 & 1) == 0) {
      return FigSignalErrorAt();
    }
    goto LABEL_336;
  }

  return FigSignalErrorAt();
}

uint64_t vtDuplicateOddPixels(__CVBuffer *a1)
{
  CVPixelBufferGetPixelFormatType(a1);
  PlaneCFIndex Count = CVPixelBufferGetPlaneCount(a1);
  uint64_t result = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (result)
  {
    CFDictionaryRef v4 = (const __CFDictionary *)result;
    int IntIfPresent = FigCFDictionaryGetIntIfPresent();
    int v6 = FigCFDictionaryGetIntIfPresent();
    CFDictionaryRef v7 = (void *)*MEMORY[0x1E4F24EE0];
    if (!(IntIfPresent | v6))
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v4, (const void *)*MEMORY[0x1E4F24EE0]);
      if (Value)
      {
        CFArrayRef v9 = Value;
        key = v7;
        CFTypeID v10 = CFGetTypeID(Value);
        BOOL v11 = v10 == CFArrayGetTypeID();
        CFDictionaryRef v7 = key;
        if (v11 && CFArrayGetCount(v9) >= 1)
        {
          CFIndex v12 = 0;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v9, v12);
            if (ValueAtIndex)
            {
              CFTypeID v14 = CFGetTypeID(ValueAtIndex);
              if (v14 == CFDictionaryGetTypeID())
              {
                FigCFDictionaryGetIntIfPresent();
                FigCFDictionaryGetIntIfPresent();
                FigCFDictionaryGetInt32IfPresent();
              }
            }
            ++v12;
          }
          while (CFArrayGetCount(v9) > v12);
          CFDictionaryRef v7 = key;
        }
      }
    }
    CFDictionaryGetValue(v4, v7);
    CVPixelBufferLockBaseAddress(a1, 0);
    if (PlaneCount)
    {
      for (size_t i = 0; i != PlaneCount; ++i)
      {
        CVPixelBufferGetWidthOfPlane(a1, i);
        CVPixelBufferGetHeightOfPlane(a1, i);
        CVPixelBufferGetBytesPerRowOfPlane(a1, i);
        if (!CVPixelBufferGetBaseAddressOfPlane(a1, i)) {
          break;
        }
      }
    }
    return CVPixelBufferUnlockBaseAddress(a1, 0);
  }
  return result;
}

void VTPixelTransferNodeCelesteRotationFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    CFDictionaryRef v1 = (void *)DerivedStorage;
    BOOL v2 = *(const void **)(DerivedStorage + 24);
    if (v2)
    {
      CFRelease(v2);
      v1[3] = 0;
    }
    CFAllocatorRef v3 = (const void *)v1[5];
    if (v3) {
      CFRelease(v3);
    }
    CFDictionaryRef v4 = (const void *)v1[11];
    if (v4)
    {
      CFRelease(v4);
      v1[11] = 0;
    }
  }

  VTPixelTransferNodeBaseFinalize();
}

CFTypeRef VTPixelTransferNodeCelesteRotationCopyDebugDescription()
{
  return CFRetain(@"[VTPixelTransferNodeCelesteRotation]");
}

uint64_t VTPixelTransferNodeCelesteRotationDoTransfer(int a1, __CVBuffer *a2, double *a3, __CVBuffer *a4, double *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v11 = *(const __CFDictionary **)(DerivedStorage + 96);
  CFDictionaryRef v12 = *(const __CFDictionary **)(DerivedStorage + 104);
  int v13 = *(_DWORD *)(DerivedStorage + 112);
  int v14 = *(unsigned __int8 *)(DerivedStorage + 116);
  int v15 = *(unsigned __int8 *)(DerivedStorage + 117);
  double v16 = a3[2];
  double v17 = a3[3];
  double v18 = a3[4];
  double v19 = a3[5];
  double v20 = a5[2];
  double v21 = a5[3];
  double v22 = a5[4];
  double v23 = a5[5];

  return vt_Rotate_Celeste(a1, a2, v11, a4, v16, v17, v18, v19, v20, v21, v22, v23, v12, v13, v14, v15);
}

uint64_t VTAddCMSampleBufferToXPCMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40DE988](a5, a1, 0, a2, a3, a4);
}

uint64_t VTCopyCMSampleBufferFromXPCMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F40DE9F8](*MEMORY[0x1E4F1CF80], a1, a2, 0, a3, a4);
}

uint64_t DecodeProgressiveScan(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int8 *)(a1 + 4408);
  int v5 = *(unsigned __int8 *)(a1 + 4409);
  int v6 = *(unsigned __int8 *)(a1 + 4410);
  int v7 = *(unsigned __int8 *)(a1 + 4411);
  long long v67 = *(_OWORD *)(a1 + 4200);
  uint64_t v68 = *(void *)(a1 + 4216);
  long long v65 = *(_OWORD *)(a1 + 4224);
  uint64_t v66 = *(void *)(a1 + 4240);
  if (v4)
  {
    BOOL v8 = v6 == 0;
    CFArrayRef v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))DecodeACRefine;
    CFTypeID v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))DecodeACFirst;
  }
  else
  {
    if (v5) {
      return 101;
    }
    BOOL v8 = v6 == 0;
    CFArrayRef v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))DecodeDCRefine;
    CFTypeID v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))DecodeDCFirst;
  }
  if (v8) {
    CFArrayRef v9 = v10;
  }
  CFDictionaryRef v64 = v9;
  if (v6 && v6 - 1 != v7) {
    return 102;
  }
  *(_DWORD *)(a1 + 4356) = 0;
  int v12 = *(_DWORD *)(a1 + 4392);
  if (v12 == 1)
  {
    int v13 = *(_DWORD *)(a1 + 4396);
    uint64_t v14 = a1 + 4 * (__int16)v13;
    int v15 = *(_DWORD *)(v14 + 4148);
    int v16 = v15 & 0xF;
    int v17 = *(_DWORD *)(a1 + 4388) * v16 - *(_DWORD *)(v14 + 4172);
    if (v17 << 16 >= 1)
    {
      int v18 = 0;
      int v19 = 0;
      int v20 = v15 << 16;
      int v21 = v15 >> 4;
      int v51 = (__int16)v17;
      uint64_t v22 = *((void *)&v67 + (__int16)v13);
      int v23 = v21 * *(_DWORD *)(a1 + 4384) - *(_DWORD *)(a1 + 4 * (__int16)v13 + 4160);
      int v52 = v23 << 16;
      int v62 = (__int16)v23;
      int v24 = v20;
      uint64_t v58 = v22;
      unint64_t v60 = (unint64_t)(v20 == 1114112) << 6;
      uint64_t v56 = a1 + 4344;
      uint64_t v25 = (__int16)v13;
      while (1)
      {
        int v54 = v19;
        if (v52 >= 1) {
          break;
        }
LABEL_24:
        int v19 = v54 + 1;
        int v18 = (__int16)(v54 + 1);
        if (v51 <= v18) {
          goto LABEL_51;
        }
      }
      int v26 = 0;
      int v27 = 0;
      while (1)
      {
        if (*(_WORD *)(a2 + 48))
        {
          int v28 = *(_DWORD *)(a2 + 52);
          BOOL v29 = __OFSUB__(v28--, 1);
          *(_DWORD *)(a2 + 52) = v28;
          if ((v28 < 0) ^ v29 | (v28 == 0))
          {
            int v30 = -*(unsigned __int16 *)(a2 + 12) & 7;
            if (v30) {
              popbitsa((unsigned __int8 **)a2, v30);
            }
            while ((unsigned __int16)popbitsa((unsigned __int8 **)a2, 8) == 255)
              ;
            *(_DWORD *)(v56 + 8) = 0;
            *(void *)uint64_t v56 = 0;
            *(_DWORD *)(a2 + 52) = *(unsigned __int16 *)(a2 + 48);
          }
        }
        if (v24 != 1114112) {
          uint64_t v22 = v58
        }
              + 2
              * ((v26 % v21
                + (v18 % v16 + ((__int16)(v18 / v16) * *(_DWORD *)(a1 + 4384) + (__int16)(v26 / v21)) * v16) * v21) << 6);
        uint64_t result = v64(a1, a2, v25, v22);
        if (result) {
          return result;
        }
        v22 += 2 * v60;
        int v26 = (__int16)++v27;
        if (v62 <= (__int16)v27) {
          goto LABEL_24;
        }
      }
    }
LABEL_51:
    int v48 = 0x200000 - (*(_DWORD *)(a2 + 12) << 16);
    int v49 = v48 >> 19;
    if (v48 < 0x80000)
    {
      unint64_t v50 = *(unsigned __int8 **)a2;
    }
    else
    {
      unint64_t v50 = *(unsigned __int8 **)a2;
      if (*(_DWORD *)(a2 + 20) == 255 && !*(v50 - 1) && *(v50 - 2) == 255) {
        ++v49;
      }
    }
    uint64_t result = 0;
    *(void *)a2 = &v50[-v49];
    *(_DWORD *)(a2 + 12) = 32;
    return result;
  }
  int v31 = *(_DWORD *)(a1 + 4388);
  if (v31 << 16 < 1) {
    goto LABEL_51;
  }
  int v32 = 0;
  int v57 = (__int16)v31;
  int v33 = *(_DWORD *)(a1 + 4384);
  int v34 = v33 << 16;
  int v61 = (__int16)v33;
  int v35 = v12 << 16;
  uint64_t v36 = (__int16)v12;
  uint64_t v53 = a1 + 4344;
  int v55 = v33 << 16;
  int v59 = v12 << 16;
  while (1)
  {
    int v63 = v32;
    if (v34 >= 1) {
      break;
    }
LABEL_50:
    int v32 = v63 + 1;
    int v34 = v55;
    if (v57 <= (__int16)(v63 + 1)) {
      goto LABEL_51;
    }
  }
  int v37 = 0;
  while (1)
  {
    if (*(_WORD *)(a2 + 48))
    {
      int v38 = *(_DWORD *)(a2 + 52);
      BOOL v29 = __OFSUB__(v38--, 1);
      *(_DWORD *)(a2 + 52) = v38;
      if ((v38 < 0) ^ v29 | (v38 == 0))
      {
        int v39 = -*(unsigned __int16 *)(a2 + 12) & 7;
        if (v39) {
          popbitsa((unsigned __int8 **)a2, v39);
        }
        while ((unsigned __int16)popbitsa((unsigned __int8 **)a2, 8) == 255)
          ;
        *(_DWORD *)(v53 + 8) = 0;
        *(void *)uint64_t v53 = 0;
        *(_DWORD *)(a2 + 52) = *(unsigned __int16 *)(a2 + 48);
      }
    }
    if (v35 >= 1) {
      break;
    }
LABEL_49:
    ++v37;
    int v35 = v59;
    if (v61 <= (__int16)v37) {
      goto LABEL_50;
    }
  }
  __int16 v40 = 0;
  while (1)
  {
    int v41 = *(_DWORD *)(a1 + 4 * v40 + 4396);
    int v42 = *(_DWORD *)(a1 + 4 * (__int16)v41 + 4136);
    uint64_t v43 = *((void *)&v67 + (__int16)v41);
    if (v42 << 16 >= 1) {
      break;
    }
LABEL_46:
    uint64_t v47 = *(void *)(a1 + 8 * (__int16)v41 + 4200);
    if (v43 - v47 >= *((void *)&v65 + (__int16)v41)) {
      *((void *)&v67 + (__int16)v41) = v47;
    }
    if ((int)v36 <= ++v40) {
      goto LABEL_49;
    }
  }
  uint64_t v44 = v36;
  int v45 = 0;
  int v46 = (__int16)v42;
  while (1)
  {
    uint64_t result = v64(a1, a2, (__int16)v41, v43);
    if (result) {
      break;
    }
    v43 += 128;
    if (v46 <= (__int16)++v45)
    {
      *((void *)&v67 + (__int16)v41) = v43;
      uint64_t v36 = v44;
      goto LABEL_46;
    }
  }
  *((void *)&v67 + (__int16)v41) = v43;
  return result;
}

uint64_t DecodeDCFirst(uint64_t a1, unsigned __int8 **a2, int a3, _WORD *a4)
{
  int v4 = *(__int16 **)(a1 + 8 * a3 + 4320);
  uint64_t v5 = *((void *)v4 + 1);
  __int16 v6 = *v4;
  if (*v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return -1;
  }
  char v8 = *(unsigned char *)(a1 + 4411);
  int v10 = *((_DWORD *)a2 + 2);
  unsigned int v9 = *((_DWORD *)a2 + 3);
  CFDictionaryRef v11 = *a2;
  int v12 = *((_DWORD *)a2 + 5);
  uint64_t v13 = *((void *)v4 + 2);
  int v14 = v4[2];
  __int16 v15 = v4[1];
  unsigned int v16 = v9 - 16;
  if (v9 < 0x10)
  {
    unsigned int v16 = *((_DWORD *)a2 + 3);
  }
  else
  {
    unint64_t v17 = (unint64_t)a2[8];
    if ((unint64_t)(v11 + 1) >= v17) {
      return -1;
    }
    int v18 = *v11;
    int v19 = v11[1];
    if (v12 == v18 && v19 == 0)
    {
      if ((unint64_t)(v11 + 2) >= v17) {
        return -1;
      }
      int v19 = v11[2];
      v11 += 3;
    }
    else
    {
      v11 += 2;
    }
    if (v12 == v19)
    {
      if ((unint64_t)v11 >= v17) {
        return -1;
      }
      if (!*v11) {
        ++v11;
      }
    }
    int v10 = (v10 << 16) | (v18 << 8) | v19;
  }
  __int16 v21 = *(_WORD *)(v5 + 2 * ((v10 << v16) >> -(char)v6));
  if ((v21 & 0xFC00) == 0x8000)
  {
    v16 += v14;
    unsigned int v22 = v16 - 16;
    if (v16 >= 0x10)
    {
      unint64_t v23 = (unint64_t)a2[8];
      if ((unint64_t)(v11 + 1) >= v23) {
        return -1;
      }
      unsigned int v24 = *v11;
      uint64_t v25 = v11 + 2;
      unsigned int v26 = v11[1];
      if (__PAIR64__(v26, v24) == v12)
      {
        if ((unint64_t)v25 >= v23) {
          return -1;
        }
        uint64_t v25 = v11 + 3;
        unsigned int v26 = v11[2];
      }
      if (v12 == v26)
      {
        if ((unint64_t)v25 >= v23) {
          return -1;
        }
        if (!*v25) {
          ++v25;
        }
      }
      int v10 = (v10 << 16) | (v24 << 8) | v26;
      unsigned int v16 = v22;
      CFDictionaryRef v11 = v25;
    }
    __int16 v21 = *(_WORD *)(v13 + 2 * ((v10 << v16) >> -(char)v15));
    if ((v21 & 0xFC00) == 0x8000) {
      return -1;
    }
  }
  int v27 = (_WORD *)(a1 + 4 * a3 + 4344);
  if (v21 < 0)
  {
    unsigned int v28 = ((v21 >> 11) & 0xF) + v16;
    int v38 = (__int16)(*v27 + (char)v21);
LABEL_51:
    *(_DWORD *)int v27 = v38;
LABEL_53:
    __int16 v39 = 0;
    *a4 = v38 << v8;
    *((_DWORD *)a2 + 2) = v10;
    *((_DWORD *)a2 + 3) = v28;
    *a2 = v11;
    return v39;
  }
  unsigned int v28 = v16 + (v21 >> 8);
  int v29 = v21 & 0xF;
  if (!v29)
  {
    int v38 = *(_DWORD *)v27;
    goto LABEL_53;
  }
  unsigned int v30 = v28 - 16;
  if (v28 < 0x10)
  {
LABEL_44:
    unsigned int v35 = (v10 << v28) >> -(char)v29;
    v28 += v29;
    unsigned int v36 = (unsigned __int16)(1 << (v29 - 1));
    if (v36 <= v35) {
      int v37 = 0;
    }
    else {
      int v37 = 2 * v36 - 1;
    }
    int v38 = v35 - v37 + *(_DWORD *)v27;
    goto LABEL_51;
  }
  unint64_t v31 = (unint64_t)a2[8];
  if ((unint64_t)(v11 + 1) < v31)
  {
    unsigned int v32 = *v11;
    int v33 = v11 + 2;
    unsigned int v34 = v11[1];
    if (__PAIR64__(v34, v32) == v12)
    {
      if ((unint64_t)v33 >= v31) {
        return -1;
      }
      int v33 = v11 + 3;
      unsigned int v34 = v11[2];
    }
    if (v12 != v34)
    {
LABEL_43:
      int v10 = (v10 << 16) | (v32 << 8) | v34;
      unsigned int v28 = v30;
      CFDictionaryRef v11 = v33;
      goto LABEL_44;
    }
    if ((unint64_t)v33 < v31)
    {
      if (!*v33) {
        ++v33;
      }
      goto LABEL_43;
    }
  }
  return -1;
}

uint64_t DecodeDCRefine(uint64_t a1, unsigned __int8 **a2, uint64_t a3, _WORD *a4)
{
  int v4 = *((_DWORD *)a2 + 2);
  unsigned int v5 = *((_DWORD *)a2 + 3);
  __int16 v6 = *a2;
  unsigned int v7 = v5 - 16;
  if (v5 >= 0x10)
  {
    unint64_t v8 = (unint64_t)a2[8];
    if ((unint64_t)(v6 + 1) < v8)
    {
      int v9 = *((_DWORD *)a2 + 5);
      int v10 = *v6;
      int v11 = v6[1];
      if (v9 == v10 && v11 == 0)
      {
        if ((unint64_t)(v6 + 2) >= v8) {
          return -1;
        }
        int v11 = v6[2];
        v6 += 3;
      }
      else
      {
        v6 += 2;
      }
      if (v9 != v11)
      {
LABEL_15:
        int v4 = (v4 << 16) | (v10 << 8) | v11;
        goto LABEL_16;
      }
      if ((unint64_t)v6 < v8)
      {
        if (!*v6) {
          ++v6;
        }
        goto LABEL_15;
      }
    }
    return -1;
  }
  unsigned int v7 = *((_DWORD *)a2 + 3);
LABEL_16:
  int v13 = v4 << v7;
  unsigned int v14 = v7 + 1;
  if (v13 < 0) {
    *a4 |= 1 << *(unsigned char *)(a1 + 4411);
  }
  __int16 v15 = 0;
  *((_DWORD *)a2 + 2) = v4;
  *((_DWORD *)a2 + 3) = v14;
  *a2 = v6;
  return v15;
}

uint64_t DecodeACFirst(uint64_t a1, unsigned __int8 **a2, int a3, uint64_t a4)
{
  int v4 = *(_DWORD *)(a1 + 4356);
  if (v4 << 16 >= 1)
  {
    LOWORD(v4) = v4 - 1;
LABEL_3:
    __int16 v5 = 0;
    *(_DWORD *)(a1 + 4356) = (__int16)v4;
    return v5;
  }
  uint64_t v6 = *(void *)(a1 + 8 * a3 + 4296);
  uint64_t v7 = *(void *)(v6 + 8);
  if (*(_WORD *)v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return -1;
  }
  unsigned int v10 = *(unsigned __int8 *)(a1 + 4409);
  int v12 = *((_DWORD *)a2 + 2);
  unsigned int v11 = *((_DWORD *)a2 + 3);
  int v13 = *a2;
  unsigned int v14 = *(unsigned __int8 *)(a1 + 4408);
  if (v14 > v10)
  {
LABEL_12:
    *((_DWORD *)a2 + 2) = v12;
    *((_DWORD *)a2 + 3) = v11;
    *a2 = v13;
    goto LABEL_3;
  }
  char v15 = *(unsigned char *)(a1 + 4411);
  int v16 = *((_DWORD *)a2 + 5);
  uint64_t v17 = *(void *)(v6 + 16);
  int v18 = *(__int16 *)(v6 + 4);
  char v19 = 32 - *(_WORD *)v6;
  __int16 v20 = 32 - *(_WORD *)(v6 + 2);
  while (1)
  {
    unsigned int v21 = v11 - 16;
    if (v11 >= 0x10)
    {
      unint64_t v22 = (unint64_t)a2[8];
      if ((unint64_t)(v13 + 1) >= v22) {
        return -1;
      }
      int v23 = *v13;
      int v24 = v13[1];
      if (v16 == v23 && v24 == 0)
      {
        if ((unint64_t)(v13 + 2) >= v22) {
          return -1;
        }
        int v24 = v13[2];
        v13 += 3;
      }
      else
      {
        v13 += 2;
      }
      if (v16 == v24)
      {
        if ((unint64_t)v13 >= v22) {
          return -1;
        }
        if (!*v13) {
          ++v13;
        }
      }
      int v12 = (v12 << 16) | (v23 << 8) | v24;
      unsigned int v11 = v21;
    }
    LOWORD(v26) = *(_WORD *)(v7 + 2 * ((v12 << v11) >> v19));
    if ((v26 & 0xFC00) == 0x8000)
    {
      v11 += v18;
      unsigned int v27 = v11 - 16;
      if (v11 >= 0x10)
      {
        unint64_t v28 = (unint64_t)a2[8];
        if ((unint64_t)(v13 + 1) >= v28) {
          return -1;
        }
        unsigned int v29 = *v13;
        unsigned int v30 = v13 + 2;
        unsigned int v31 = v13[1];
        if (__PAIR64__(v31, v29) == v16)
        {
          if ((unint64_t)v30 >= v28) {
            return -1;
          }
          unsigned int v30 = v13 + 3;
          unsigned int v31 = v13[2];
        }
        if (v16 == v31)
        {
          if ((unint64_t)v30 >= v28) {
            return -1;
          }
          if (!*v30) {
            ++v30;
          }
        }
        int v12 = (v12 << 16) | (v29 << 8) | v31;
        unsigned int v11 = v27;
        int v13 = v30;
      }
      LOWORD(v26) = *(_WORD *)(v17 + 2 * ((v12 << v11) >> v20));
      if ((v26 & 0xFC00) == 0x8000) {
        return -3;
      }
    }
    unsigned __int8 v32 = v26;
    if ((v26 & 0x8000) == 0) {
      break;
    }
    v14 += ((__int16)v26 >> 8) & 7;
    if ((v14 & 0xFFC0) != 0) {
      return -1;
    }
    v11 += ((__int16)v26 >> 11) & 0xF;
    unsigned int v26 = (char)v26;
LABEL_59:
    *(_WORD *)(a4 + 2 * (unsigned __int16)v14) = v26 << v15;
LABEL_62:
    unsigned int v14 = (unsigned __int16)(v14 + 1);
    if (v14 > v10) {
      goto LABEL_12;
    }
  }
  v11 += (__int16)v26 >> 8;
  int v33 = v26 >> 4;
  int v34 = v32 & 0xF;
  if ((v32 & 0xF) != 0)
  {
    LOWORD(v14) = v14 + v33;
    if ((v14 & 0xFFC0) != 0) {
      return -5;
    }
    unsigned int v35 = v11 - 16;
    if (v11 >= 0x10)
    {
      unint64_t v36 = (unint64_t)a2[8];
      if ((unint64_t)(v13 + 1) >= v36) {
        return -1;
      }
      unsigned int v37 = *v13;
      int v38 = v13 + 2;
      unsigned int v39 = v13[1];
      if (__PAIR64__(v39, v37) == v16)
      {
        if ((unint64_t)v38 >= v36) {
          return -1;
        }
        int v38 = v13 + 3;
        unsigned int v39 = v13[2];
      }
      if (v16 == v39)
      {
        if ((unint64_t)v38 >= v36) {
          return -1;
        }
        if (!*v38) {
          ++v38;
        }
      }
      int v12 = (v12 << 16) | (v37 << 8) | v39;
      unsigned int v11 = v35;
      int v13 = v38;
    }
    unsigned int v40 = (v12 << v11) >> -(char)v34;
    v11 += v34;
    int v41 = 1 << (v34 - 1);
    if (v40 >= (unsigned __int16)v41) {
      int v42 = 0;
    }
    else {
      int v42 = 2 * v41 - 1;
    }
    unsigned int v26 = v40 - v42;
    goto LABEL_59;
  }
  if (v33 == 15)
  {
    LOWORD(v14) = v14 + 15;
    goto LABEL_62;
  }
  int v4 = 1 << v33;
  if (v32 < 0x10u)
  {
LABEL_78:
    LOWORD(v4) = v4 - 1;
    goto LABEL_12;
  }
  if (v11 < 0x10)
  {
LABEL_77:
    unsigned int v47 = (v12 << v11) >> -(char)v33;
    v11 += v33;
    LOWORD(v4) = v47 + v4;
    goto LABEL_78;
  }
  unint64_t v43 = (unint64_t)a2[8];
  if ((unint64_t)(v13 + 1) >= v43) {
    return -1;
  }
  unsigned int v44 = *v13;
  int v45 = v13 + 2;
  unsigned int v46 = v13[1];
  if (__PAIR64__(v46, v44) != v16) {
    goto LABEL_72;
  }
  if ((unint64_t)v45 >= v43) {
    return -1;
  }
  int v45 = v13 + 3;
  unsigned int v46 = v13[2];
LABEL_72:
  if (v16 != v46)
  {
LABEL_76:
    int v12 = (v12 << 16) | (v44 << 8) | v46;
    v11 -= 16;
    int v13 = v45;
    goto LABEL_77;
  }
  if ((unint64_t)v45 < v43)
  {
    if (!*v45) {
      ++v45;
    }
    goto LABEL_76;
  }
  return -1;
}

uint64_t DecodeACRefine(uint64_t a1, unsigned __int8 **a2, int a3, uint64_t a4)
{
  int v4 = *(__int16 **)(a1 + 8 * a3 + 4296);
  uint64_t v5 = *((void *)v4 + 1);
  __int16 v6 = *v4;
  if (*v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    signed int v9 = *(unsigned __int8 *)(a1 + 4409);
    char v10 = *(unsigned char *)(a1 + 4411);
    int v11 = 1 << v10;
    int v12 = *((_DWORD *)a2 + 5);
    int v13 = *a2;
    int v14 = *((_DWORD *)a2 + 2);
    unsigned int v15 = *((_DWORD *)a2 + 3);
    LODWORD(v16) = *(unsigned __int8 *)(a1 + 4408);
    __int16 v17 = *(_WORD *)(a1 + 4356);
    if (v17 || v16 > v9)
    {
LABEL_9:
      LOWORD(v18) = v17;
      if (v17 < 1)
      {
LABEL_34:
        __int16 v8 = 0;
        *(_DWORD *)(a1 + 4356) = (__int16)v18;
        *((_DWORD *)a2 + 2) = v14;
        *((_DWORD *)a2 + 3) = v15;
        *a2 = v13;
        return v8;
      }
LABEL_10:
      if (v9 >= (__int16)v16)
      {
        int v19 = 0xFFFF << v10;
        do
        {
          uint64_t v16 = (__int16)v16;
          int v20 = *(__int16 *)(a4 + 2 * (__int16)v16);
          if (*(_WORD *)(a4 + 2 * (__int16)v16))
          {
            if (v15 >= 0x10)
            {
              unint64_t v21 = (unint64_t)a2[8];
              if ((unint64_t)(v13 + 1) >= v21) {
                return -1;
              }
              int v22 = *v13;
              int v23 = v13[1];
              if (v12 == v22 && v23 == 0)
              {
                if ((unint64_t)(v13 + 2) >= v21) {
                  return -1;
                }
                int v23 = v13[2];
                v13 += 3;
              }
              else
              {
                v13 += 2;
              }
              if (v12 == v23)
              {
                if ((unint64_t)v13 >= v21) {
                  return -1;
                }
                if (!*v13) {
                  ++v13;
                }
              }
              int v14 = (v14 << 16) | (v22 << 8) | v23;
              v15 -= 16;
            }
            int v25 = v14 << v15++;
            if (v25 < 0)
            {
              if (v20 >= 0) {
                __int16 v26 = v11;
              }
              else {
                __int16 v26 = v19;
              }
              *(_WORD *)(a4 + 2 * v16) = v20 + v26;
            }
          }
          LOWORD(v16) = v16 + 1;
        }
        while (v9 >= (__int16)v16);
      }
      LOWORD(v18) = v18 - 1;
      goto LABEL_34;
    }
    LOWORD(v28) = 0;
    uint64_t v29 = *((void *)v4 + 2);
    int v30 = v4[2];
    __int16 v31 = v4[1];
    while (1)
    {
      unsigned int v32 = v15 - 16;
      if (v15 >= 0x10)
      {
        unint64_t v33 = (unint64_t)a2[8];
        if ((unint64_t)(v13 + 1) >= v33) {
          return -1;
        }
        int v34 = *v13;
        int v35 = v13[1];
        if (v12 == v34 && v35 == 0)
        {
          if ((unint64_t)(v13 + 2) >= v33) {
            return -1;
          }
          int v35 = v13[2];
          v13 += 3;
        }
        else
        {
          v13 += 2;
        }
        if (v12 == v35)
        {
          if ((unint64_t)v13 >= v33) {
            return -1;
          }
          if (!*v13) {
            ++v13;
          }
        }
        int v14 = (v14 << 16) | (v34 << 8) | v35;
        unsigned int v15 = v32;
      }
      __int16 v37 = *(_WORD *)(v5 + 2 * ((v14 << v15) >> (32 - v6)));
      if (v29 && (v37 & 0xFC00) == 0x8000)
      {
        v15 += v30;
        unsigned int v38 = v15 - 16;
        if (v15 >= 0x10)
        {
          unint64_t v39 = (unint64_t)a2[8];
          if ((unint64_t)(v13 + 1) >= v39) {
            return -1;
          }
          unsigned int v40 = *v13;
          int v41 = v13 + 2;
          unsigned int v42 = v13[1];
          if (__PAIR64__(v42, v40) == v12)
          {
            if ((unint64_t)v41 >= v39) {
              return -1;
            }
            int v41 = v13 + 3;
            unsigned int v42 = v13[2];
          }
          if (v12 == v42)
          {
            if ((unint64_t)v41 >= v39) {
              return -1;
            }
            if (!*v41) {
              ++v41;
            }
          }
          int v14 = (v14 << 16) | (v40 << 8) | v42;
          unsigned int v15 = v38;
          int v13 = v41;
        }
        __int16 v37 = *(_WORD *)(v29 + 2 * ((v14 << v15) >> (32 - v31)));
        if ((v37 & 0xFC00) == 0x8000) {
          return -4;
        }
      }
      unsigned int v43 = v37;
      if (v37 < 0)
      {
        LOBYTE(v18) = 0;
        v15 += (v43 >> 11) & 0xF;
        int v44 = (v43 >> 8) & 7;
        int v28 = (char)v43 << v10;
        goto LABEL_82;
      }
      int v44 = v37 >> 4;
      v15 += v37 >> 8;
      int v45 = v37 & 0xF;
      if ((v43 & 0xF) == 0) {
        break;
      }
      if (v45 != 1) {
        return -1;
      }
      unsigned int v46 = v15 - 16;
      if (v15 >= 0x10)
      {
        unint64_t v47 = (unint64_t)a2[8];
        if ((unint64_t)(v13 + 1) >= v47) {
          return -1;
        }
        unsigned int v48 = *v13;
        int v49 = v13 + 2;
        unsigned int v50 = v13[1];
        if (__PAIR64__(v50, v48) == v12)
        {
          if ((unint64_t)v49 >= v47) {
            return -1;
          }
          int v49 = v13 + 3;
          unsigned int v50 = v13[2];
        }
        if (v12 == v50)
        {
          if ((unint64_t)v49 >= v47) {
            return -1;
          }
          if (!*v49) {
            ++v49;
          }
        }
        int v14 = (v14 << 16) | (v48 << 8) | v50;
        unsigned int v15 = v46;
        int v13 = v49;
      }
      LOBYTE(v18) = 0;
      int v51 = v14 << v15++;
      if (v51 >= 0) {
        LOWORD(v28) = -1 << v10;
      }
      else {
        LOWORD(v28) = 1 << v10;
      }
      do
      {
LABEL_82:
        int v52 = *(__int16 *)(a4 + 2 * (__int16)v16);
        if (*(_WORD *)(a4 + 2 * (__int16)v16))
        {
          unsigned int v53 = v15 - 16;
          if (v15 >= 0x10)
          {
            unint64_t v54 = (unint64_t)a2[8];
            if ((unint64_t)(v13 + 1) >= v54) {
              return -1;
            }
            int v55 = *v13;
            int v56 = v13[1];
            if (v12 == v55 && v56 == 0)
            {
              if ((unint64_t)(v13 + 2) >= v54) {
                return -1;
              }
              int v56 = v13[2];
              v13 += 3;
            }
            else
            {
              v13 += 2;
            }
            if (v12 == v56)
            {
              if ((unint64_t)v13 >= v54) {
                return -1;
              }
              if (!*v13) {
                ++v13;
              }
            }
            int v14 = (v14 << 16) | (v55 << 8) | v56;
            unsigned int v15 = v53;
          }
          int v58 = v14 << v15++;
          if (v58 < 0)
          {
            if (v52 >= 0) {
              __int16 v59 = 1 << v10;
            }
            else {
              __int16 v59 = 0xFFFF << v10;
            }
            *(_WORD *)(a4 + 2 * (__int16)v16) = v52 + v59;
          }
        }
        else
        {
          LOWORD(v44) = v44 - 1;
          if ((v44 & 0x8000) != 0) {
            break;
          }
        }
        LODWORD(v16) = v16 + 1;
      }
      while (v9 >= (__int16)v16);
      if ((v18 & 1) == 0)
      {
        if (v9 < (__int16)v16) {
          return -1;
        }
        *(_WORD *)(a4 + 2 * (__int16)v16) = v28;
      }
      LODWORD(v16) = v16 + 1;
      if (v9 < (__int16)v16) {
        goto LABEL_9;
      }
    }
    LOWORD(v18) = 1;
    if (v44 == 15) {
      goto LABEL_82;
    }
    if (!v44) {
      goto LABEL_10;
    }
    if (v15 < 0x10)
    {
LABEL_122:
      unsigned int v64 = (v14 << v15) >> -(char)v44;
      v15 += v44;
      unsigned int v18 = (1 << v44) + v64;
      goto LABEL_10;
    }
    unint64_t v60 = (unint64_t)a2[8];
    if ((unint64_t)(v13 + 1) < v60)
    {
      unsigned int v61 = *v13;
      int v62 = v13 + 2;
      unsigned int v63 = v13[1];
      if (__PAIR64__(v63, v61) == v12)
      {
        if ((unint64_t)v62 >= v60) {
          return -1;
        }
        int v62 = v13 + 3;
        unsigned int v63 = v13[2];
      }
      if (v12 != v63)
      {
LABEL_121:
        int v14 = (v14 << 16) | (v61 << 8) | v63;
        v15 -= 16;
        int v13 = v62;
        goto LABEL_122;
      }
      if ((unint64_t)v62 < v60)
      {
        if (!*v62) {
          ++v62;
        }
        goto LABEL_121;
      }
    }
  }
  return -1;
}

uint64_t ExtractBufferedBlocks(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  int v4 = *(_DWORD *)(a1 + 4132);
  if (v4 >= 1)
  {
    for (__int16 i = 0; i < v4; ++i)
    {
      uint64_t v6 = a1 + 8 * i;
      uint64_t v7 = *(void *)(v6 + 4248);
      uint64_t v8 = a1 + 4 * i;
      if (*(int *)(v8 + 4136) >= 1)
      {
        int v9 = 0;
        uint64_t v10 = *(void *)(v6 + 4360);
        __int16 v11 = *(_WORD *)(v10 + 128);
        int v12 = (_DWORD *)(v8 + 4136);
        while (2)
        {
          for (uint64_t j = 0; j != 64; ++j)
          {
            uint64_t v14 = tables[j];
            int v15 = ((1 << (v11 - 1)) + *(unsigned __int16 *)(v10 + v14) * *(__int16 *)(v7 + 2 * j)) >> v11;
            if (v15 != (__int16)v15) {
              return -6;
            }
            *(_WORD *)(a3 + v14) = v15;
          }
          a3 += 128;
          v7 += 128;
          *a4++ = 8;
          if (*v12 > (__int16)++v9) {
            continue;
          }
          break;
        }
        int v4 = *(_DWORD *)(a1 + 4132);
      }
      *(void *)(v6 + 4248) = v7;
    }
  }
  __int16 v16 = 0;
  *a4 = 0;
  return v16;
}

uint64_t vtdcrb_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTDecompressionSessionXPCRemoteBridgeID = result;
  return result;
}

uint64_t VTDecompressionSessionRemoteBridge_Create(uint64_t a1, uint64_t a2, void *a3, const __CFDictionary *a4, const __CFDictionary *a5, _OWORD *a6, uint64_t a7, uint64_t *a8)
{
  MEMORY[0x199705810](&VTDecompressionSessionRemoteBridgeGetTypeID_sRegisterVTDecompressionSessionRemoteOnce, vtdcrb_Register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v17 = Instance;
    BOOL ShouldUseXPCRemoteDecompressionSession = VTVideoCodecService_ShouldUseXPCRemoteDecompressionSession();
    *(unsigned char *)(v17 + 32) = ShouldUseXPCRemoteDecompressionSession;
    if (ShouldUseXPCRemoteDecompressionSession)
    {
      uint64_t v19 = VTDecompressionSessionRemoteXPC_Create(a1, a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, (CFTypeRef *)(v17 + 24));
      if (!v19)
      {
        if (*(void *)(v17 + 24))
        {
          FigStartForwardingMediaServicesProcessDeathNotification();
LABEL_8:
          uint64_t v20 = 0;
          *a8 = v17;
          return v20;
        }
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v19 = VTDecompressionSessionRemote_Create(a1, a2, a3, a4, a5, a6, (uint64_t *)(v17 + 16));
      if (!v19)
      {
        if (*(void *)(v17 + 16)) {
          goto LABEL_8;
        }
LABEL_14:
        uint64_t v20 = FigSignalErrorAt();
        if (!v20) {
          return v20;
        }
LABEL_15:
        CFRelease((CFTypeRef)v17);
        return v20;
      }
    }
    uint64_t v20 = v19;
    goto LABEL_15;
  }

  return FigSignalErrorAt();
}

uint64_t VTDecompressionSessionRemoteBridge_Invalidate(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_Invalidate(*(void *)(a1 + 24));
  }
  else {
    return VTDecompressionSessionRemote_Invalidate(*(void *)(a1 + 16));
  }
}

uint64_t VTDecompressionSessionRemoteBridge_CopySupportedPropertyDictionary(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_CopySupportedPropertyDictionary(*(void *)(a1 + 24));
  }
  else {
    return VTDecompressionSessionRemote_CopySupportedPropertyDictionary(*(void *)(a1 + 16));
  }
}

uint64_t VTDecompressionSessionRemoteBridge_CopySerializableProperties(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_CopySerializableProperties(*(void *)(a1 + 24), a2, a3);
  }
  else {
    return VTDecompressionSessionRemote_CopySerializableProperties(*(void *)(a1 + 16), a2, (uint64_t)a3);
  }
}

uint64_t VTDecompressionSessionRemoteBridge_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_CopyProperty(*(void *)(a1 + 24), a2, a3, a4);
  }
  else {
    return VTDecompressionSessionRemote_CopyProperty(*(void *)(a1 + 16), a2, a3, a4);
  }
}

uint64_t VTDecompressionSessionRemoteBridge_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_SetProperty(*(void *)(a1 + 24), a2, a3);
  }
  else {
    return VTDecompressionSessionRemote_SetProperty(*(void *)(a1 + 16), a2, a3);
  }
}

uint64_t VTDecompressionSessionRemoteBridge_SetProperties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_SetProperties(*(void *)(a1 + 24));
  }
  else {
    return VTDecompressionSessionRemote_SetProperties(*(mach_port_t **)(a1 + 16), a2);
  }
}

uint64_t VTDecompressionSessionRemoteBridge_SetMultiImageCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_SetMultiImageCallback(*(void *)(a1 + 24), a2, a3);
  }
  else {
    return VTDecompressionSessionRemote_SetMultiImageCallback(*(void *)(a1 + 16), a2, a3);
  }
}

uint64_t VTDecompressionSessionRemoteBridge_DecodeFrame(uint64_t a1, opaqueCMSampleBuffer *a2, unsigned int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_DecodeFrame(*(void *)(a1 + 24), a2, a3, a4, a5, a6);
  }
  else {
    return VTDecompressionSessionRemote_DecodeFrame(*(void *)(a1 + 16), a2, a3, a4, a5, a6);
  }
}

uint64_t VTDecompressionSessionRemoteBridge_DecodeFrameWithOutputHandler(uint64_t a1, opaqueCMSampleBuffer *a2, unsigned int a3, uint64_t a4, _DWORD *a5, unint64_t a6, unint64_t a7)
{
  if (!(a6 | a7)) {
    return FigSignalErrorAt();
  }
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_DecodeFrameWithOutputHandler(*(void *)(a1 + 24), a2, a3, a4, a5, a6, a7);
  }
  return VTDecompressionSessionRemote_DecodeFrameWithOutputHandler(*(void *)(a1 + 16), a2, a3, a4, a5, a6, a7);
}

uint64_t VTDecompressionSessionRemoteBridge_FinishDelayedFrames(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    VTDecompressionSessionRemoteXPC_FinishDelayedFrames(*(void *)(a1 + 24));
  }
  else {
    VTDecompressionSessionRemote_FinishDelayedFrames(*(void *)(a1 + 16));
  }
  return 0;
}

uint64_t VTDecompressionSessionRemoteBridge_CanAcceptFormatDescription(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_CanAcceptFormatDescription(*(void *)(a1 + 24));
  }
  else {
    return VTDecompressionSessionRemote_CanAcceptFormatDescription(*(void *)(a1 + 16), a2);
  }
}

uint64_t VTDecompressionSessionRemoteBridge_WaitForAsynchronousFrames(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_WaitForAsynchronousFrames(*(void *)(a1 + 24));
  }
  else {
    return VTDecompressionSessionRemote_WaitForAsynchronousFrames(*(void *)(a1 + 16));
  }
}

uint64_t VTDecompressionSessionRemoteBridge_CopyBlackPixelBuffer(uint64_t a1, CFTypeRef *a2)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_CopyBlackPixelBuffer(*(void *)(a1 + 24), a2);
  }
  else {
    return VTDecompressionSessionRemote_CopyBlackPixelBuffer(*(void *)(a1 + 16), a2);
  }
}

void VTDecompressionSessionRemoteBridge_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(unsigned char *)(a1 + 32)) {
    VTDecompressionSessionRemoteXPC_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(*(void *)(a1 + 24), (uint64_t)a2);
  }
  else {
    VTDecompressionSessionRemote_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(*(void *)(a1 + 16), (uint64_t)a2);
  }
}

uint64_t VTDecompressionSessionRemoteBridge_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, CMTime *a2, CMTime *a3)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(*(void *)(a1 + 24), a2, a3);
  }
  else {
    return VTDecompressionSessionRemote_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(*(void *)(a1 + 16), (uint64_t)a2, (uint64_t)a3);
  }
}

uint64_t VTTileDecompressionSessionRemoteBridge_Create(uint64_t a1, uint64_t a2, void *a3, const __CFDictionary *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  MEMORY[0x199705810](&VTDecompressionSessionRemoteBridgeGetTypeID_sRegisterVTDecompressionSessionRemoteOnce, vtdcrb_Register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v15 = Instance;
    BOOL ShouldUseXPCRemoteTileDecompressionSession = VTVideoCodecService_ShouldUseXPCRemoteTileDecompressionSession();
    *(unsigned char *)(v15 + 32) = ShouldUseXPCRemoteTileDecompressionSession;
    if (ShouldUseXPCRemoteTileDecompressionSession)
    {
      uint64_t v17 = VTTileDecompressionSessionRemoteXPC_Create(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, (CFTypeRef *)(v15 + 24));
      if (*(void *)(v15 + 24)) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v17 = VTTileDecompressionSessionRemote_Create(a1, a2, a3, a4, a5, a6, (void *)(v15 + 16));
      if (*(void *)(v15 + 16))
      {
LABEL_4:
        uint64_t v18 = v17;
        *a7 = v15;
        if (!v17) {
          return v18;
        }
LABEL_5:
        CFRelease((CFTypeRef)v15);
        return v18;
      }
    }
    uint64_t v18 = FigSignalErrorAt();
    if (!v18) {
      return v18;
    }
    goto LABEL_5;
  }

  return FigSignalErrorAt();
}

uint64_t VTDecompressionSessionRemoteBridge_DecodeTile(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned int a7, uint64_t a8, _DWORD *a9)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_DecodeTile(*(void *)(a1 + 24), a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else {
    return VTDecompressionSessionRemote_DecodeTile(*(void *)(a1 + 16), (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t VTDecompressionSessionRemoteBridge_FinishDelayedTiles(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return VTDecompressionSessionRemoteXPC_FinishDelayedTiles(*(void *)(a1 + 24));
  }
  else {
    return VTDecompressionSessionRemote_FinishDelayedTiles(*(void *)(a1 + 16));
  }
}

void *vtdsrb_Init(void *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void vtdsrb_Finalize(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    FigStopForwardingMediaServicesProcessDeathNotification();
    BOOL v2 = *(const void **)(a1 + 24);
    if (v2) {
      CFRelease(v2);
    }
  }
  CFAllocatorRef v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
  }
}

CFStringRef vtdsrb_CopyFormattingDesc(uint64_t a1)
{
  uint64_t v1 = 24;
  if (!*(unsigned char *)(a1 + 32)) {
    uint64_t v1 = 16;
  }
  BOOL v2 = "xpc based";
  if (!*(unsigned char *)(a1 + 32)) {
    BOOL v2 = "mig based";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[VTDecompressionSessionRemoteBridge %p] concreteSession: (type: %s) %@", a1, v2, *(void *)(a1 + v1));
}

CFStringRef vtdsrb_CopyDebugDesc(uint64_t a1)
{
  uint64_t v1 = 24;
  if (!*(unsigned char *)(a1 + 32)) {
    uint64_t v1 = 16;
  }
  BOOL v2 = "xpc based";
  if (!*(unsigned char *)(a1 + 32)) {
    BOOL v2 = "mig based";
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[VTDecompressionSessionRemoteBridge %p] concreteSession: (type: %s) %@", a1, v2, *(void *)(a1 + v1));
}

uint64_t VTBlackFillGetPixelFormatPixelBlockInfo(OSType pixelFormat, unint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned char *a8, unsigned char *a9, unsigned char *a10, unsigned char *a11, char *a12)
{
  int v66 = 1;
  int v67 = 1;
  int v64 = 1;
  int valuePtr = 0;
  int v62 = 0;
  int v63 = 1;
  CFDictionaryRef v20 = CVPixelFormatDescriptionCreateWithPixelFormatType(0, pixelFormat);
  if (v20)
  {
    CFDictionaryRef v21 = v20;
    if (a2 || (v34 = CFDictionaryGetValue(v20, (const void *)*MEMORY[0x1E4F24E18]), CFDictionaryRef v33 = v21, !v34))
    {
      CFArrayRef Value = CFDictionaryGetValue(v21, (const void *)*MEMORY[0x1E4F24EE0]);
      if (!Value) {
        goto LABEL_29;
      }
      int v23 = Value;
      unsigned int v61 = a3;
      int v24 = a4;
      int v25 = a8;
      __int16 v26 = a5;
      unsigned int v27 = a6;
      int v28 = a7;
      CFTypeID TypeID = CFArrayGetTypeID();
      CFTypeID v30 = CFGetTypeID(v23);
      uint64_t v31 = 4294954391;
      if ((a2 & 0x80000000) != 0) {
        goto LABEL_30;
      }
      if (TypeID != v30) {
        goto LABEL_30;
      }
      if (CFArrayGetCount((CFArrayRef)v23) <= a2) {
        goto LABEL_30;
      }
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v23, a2);
      if (!ValueAtIndex) {
        goto LABEL_30;
      }
      CFDictionaryRef v33 = ValueAtIndex;
      int v34 = CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F24E18]);
      a7 = v28;
      a6 = v27;
      a5 = v26;
      a8 = v25;
      a4 = v24;
      a3 = v61;
      if (!v34) {
        goto LABEL_29;
      }
    }
    unint64_t v60 = a7;
    CFTypeID v35 = CFNumberGetTypeID();
    if (v35 != CFGetTypeID(v34)) {
      goto LABEL_29;
    }
    CFNumberGetValue((CFNumberRef)v34, kCFNumberIntType, &valuePtr);
    CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E4F24E38]);
    if (v36)
    {
      CFNumberRef v37 = v36;
      CFTypeID v38 = CFNumberGetTypeID();
      if (v38 == CFGetTypeID(v37))
      {
        CFNumberGetValue(v37, kCFNumberIntType, &v67);
        if (!v67) {
          goto LABEL_29;
        }
      }
    }
    CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E4F24E30]);
    if (v39)
    {
      CFNumberRef v40 = v39;
      CFTypeID v41 = CFNumberGetTypeID();
      if (v41 == CFGetTypeID(v40))
      {
        CFNumberGetValue(v40, kCFNumberIntType, &v66);
        if (!v66) {
          goto LABEL_29;
        }
      }
    }
    CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E4F24ED0]);
    if (v42)
    {
      CFNumberRef v43 = v42;
      CFTypeID v44 = CFNumberGetTypeID();
      if (v44 == CFGetTypeID(v43))
      {
        CFNumberGetValue(v43, kCFNumberIntType, &v64);
        if (!v64) {
          goto LABEL_29;
        }
      }
    }
    CFNumberRef v45 = (const __CFNumber *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E4F24EE8]);
    if (v45)
    {
      CFNumberRef v46 = v45;
      CFTypeID v47 = CFNumberGetTypeID();
      if (v47 == CFGetTypeID(v46))
      {
        CFNumberGetValue(v46, kCFNumberIntType, &v63);
        if (!v63) {
          goto LABEL_29;
        }
      }
    }
    CFDataRef v48 = (const __CFData *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E4F24E28]);
    if (v48 && (CFDataRef v49 = v48, v50 = CFDataGetTypeID(), v50 == CFGetTypeID(v49)))
    {
      int Length = CFDataGetLength(v49);
      if (Length > 64)
      {
LABEL_29:
        uint64_t v31 = 4294954391;
LABEL_30:
        CFRelease(v21);
        return v31;
      }
      BytePtr = CFDataGetBytePtr(v49);
      memcpy(a9, BytePtr, Length);
    }
    else
    {
      *a9 = 0;
      LOBYTE(Length) = 1;
    }
    CFNumberRef v53 = (const __CFNumber *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E4F24E88]);
    if (v53)
    {
      CFNumberRef v54 = v53;
      CFTypeID v55 = CFNumberGetTypeID();
      if (v55 == CFGetTypeID(v54)) {
        CFNumberGetValue(v54, kCFNumberIntType, &v62);
      }
    }
    CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(v33, (const void *)*MEMORY[0x1E4F24E80]);
    if (v56)
    {
      char v57 = 1;
      CFNumberGetValue(v56, kCFNumberSInt8Type, a11);
      if (!*a11)
      {
        uint64_t v31 = FigSignalErrorAt();
        goto LABEL_30;
      }
    }
    else
    {
      char v57 = 0;
    }
    uint64_t v31 = 0;
    uint64_t v58 = v66;
    *a3 = v67;
    *a4 = v58;
    *a5 = valuePtr;
    *a6 = v64;
    void *v60 = v63;
    *a8 = v62;
    *a12 = v57;
    *a10 = Length;
    goto LABEL_30;
  }
  if (pixelFormat != 1380401729) {
    return 4294954391;
  }
  uint64_t v31 = 0;
  *a3 = 1;
  *a4 = 1;
  *a5 = 32;
  *a6 = 1;
  *a7 = 1;
  *(_DWORD *)a9 = -16777216;
  return v31;
}

uint64_t VTFillBufferPixelsWithBlack(__CVBuffer *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  if (CVPixelBufferIsPlanar(a1))
  {
    uint64_t result = CVPixelBufferGetPlaneCount(a1);
    if (result)
    {
      uint64_t v9 = result;
      size_t v10 = 0;
      CFNumberRef v43 = (const void *)*MEMORY[0x1E4F24EE0];
      uint64_t v44 = result;
      while (1)
      {
        int v11 = BYTE1(a6[14 * v10 + 13]);
        if ((v11 - 3) < 2)
        {
          if (a1)
          {
            CVPixelBufferGetPixelFormatType(a1);
            DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
            if (DescriptionWithPixelFormatType)
            {
              if (a4)
              {
                if (a5)
                {
                  size_t Width = CVPixelBufferGetWidth(a1);
                  size_t Height = CVPixelBufferGetHeight(a1);
                  if (Width)
                  {
                    if (Height)
                    {
                      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, v43);
                      if (Value)
                      {
                        CFArrayRef v19 = Value;
                        CFTypeID v20 = CFGetTypeID(Value);
                        if (v20 == CFArrayGetTypeID())
                        {
                          CFArrayGetValueAtIndex(v19, v10);
                          FigCFDictionaryGetInt32IfPresent();
                          FigCFDictionaryGetInt32IfPresent();
                          FigCFDictionaryGetInt32IfPresent();
                          FigCFDictionaryGetInt32IfPresent();
                          FigCFDictionaryGetInt32IfPresent();
                          FigCFDictionaryGetInt32IfPresent();
                          FigCFDictionaryGetInt32IfPresent();
                          int v21 = 0;
                          unsigned int v22 = 16;
                          do
                          {
                            ++v21;
                            BOOL v23 = v22 > 3;
                            v22 >>= 1;
                          }
                          while (v23);
                          char v24 = 0;
                          unsigned int v25 = 16;
                          do
                          {
                            ++v24;
                            BOOL v23 = v25 > 3;
                            v25 >>= 1;
                          }
                          while (v23);
                          IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a1);
                          if (IOSurface)
                          {
                            unsigned int v27 = IOSurface;
                            if (!IOSurfaceGetProtectionOptions())
                            {
                              IOSurfaceGetWidthInCompressedTilesOfPlane();
                              IOSurfaceGetHeightInCompressedTilesOfPlane();
                              IOSurfaceGetBytesPerRowOfTileDataOfPlane();
                              IOSurfaceGetBytesPerElementOfPlane(v27, v10);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t result = FigSignalErrorAt();
          uint64_t v9 = v44;
          if (result) {
            return result;
          }
        }
        else if (v11 == 1)
        {
          if (a3 | a2 || !CVPixelBufferGetIOSurface(a1))
          {
LABEL_34:
            uint64_t result = FigSignalErrorAt();
            if (result) {
              return result;
            }
            goto LABEL_37;
          }
          uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
          if (BaseAddressOfCompressedTileHeaderRegionOfPlane)
          {
            uint64_t v29 = (void *)BaseAddressOfCompressedTileHeaderRegionOfPlane;
            uint64_t BytesPerRowOfCompressedTileHeaderGroupsOfPlane = IOSurfaceGetBytesPerRowOfCompressedTileHeaderGroupsOfPlane();
            unint64_t HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
            size_t v32 = (HeightInCompressedTilesOfPlane >> IOSurfaceGetHTPCVerticalHeaderGroupingModeOfPlane())
                * BytesPerRowOfCompressedTileHeaderGroupsOfPlane;
            if (v32 >= IOSurfaceGetSizeOfPlane()) {
              goto LABEL_34;
            }
            bzero(v29, v32);
          }
          uint64_t BaseAddressOfCompressedTileDataRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfPlane();
          if (BaseAddressOfCompressedTileDataRegionOfPlane)
          {
            uint64_t v34 = BaseAddressOfCompressedTileDataRegionOfPlane;
            uint64_t CompressedTileWidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
            unint64_t v36 = IOSurfaceGetCompressedTileHeightOfPlane() * CompressedTileWidthOfPlane * a6[14 * v10 + 2];
            if (v36 >= 8)
            {
              unint64_t v37 = 0;
              unint64_t v38 = v36 >> 3;
              do
              {
                *(unsigned char *)(v34 + v37) = *((unsigned char *)&a6[14 * v10 + 5] + v37 % LOBYTE(a6[14 * v10 + 13]));
                ++v37;
              }
              while (v38 != v37);
            }
          }
        }
        else
        {
          if (BYTE1(a6[14 * v10 + 13])) {
            return FigSignalErrorAt();
          }
          BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, v10);
          if (!BaseAddressOfPlane) {
            return 4294954394;
          }
          uint64_t v13 = (uint64_t)BaseAddressOfPlane;
          size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v10);
          vtFillPlanePixelsWithBlack(v13, BytesPerRowOfPlane, a2, a3, a4, a5, 1, &a6[14 * v10]);
        }
LABEL_37:
        if (++v10 == v9) {
          return 0;
        }
      }
    }
  }
  else
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    if (BaseAddress)
    {
      uint64_t v40 = (uint64_t)BaseAddress;
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      vtFillPlanePixelsWithBlack(v40, BytesPerRow, a2, a3, a4, a5, 0, a6);
      return 0;
    }
    else
    {
      return 4294954394;
    }
  }
  return result;
}

void vtFillPlanePixelsWithBlack(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8)
{
  unint64_t v9 = *a8;
  unint64_t v10 = a8[1];
  if (a7)
  {
    v9 *= a8[3];
    v10 *= a8[4];
  }
  if (v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    unint64_t v12 = a8[2];
    unint64_t v13 = ~(a3 / v9 * v9) + a3 + a5 + v9;
    unint64_t v14 = ~(a4 / v10 * v10) + a4 + a6 + v10;
    uint64_t v15 = (char *)(a1 + a4 / v10 * a2 + a3 / v9 * (v12 >> 3));
    __int16 v16 = (unsigned __int8 *)(a8 + 5);
    size_t v17 = v13 / v9 * (v12 >> 3);
    unint64_t v18 = v14 / v10;
    switch(v12 >> 3)
    {
      case 1uLL:
        if (v10 <= v14)
        {
          do
          {
            memset(v15, *v16, v17);
            v15 += a2;
            --v18;
          }
          while (v18);
        }
        return;
      case 2uLL:
        *((_WORD *)a8 + 21) = *((_WORD *)a8 + 20);
        goto LABEL_28;
      case 3uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        goto LABEL_17;
      case 4uLL:
LABEL_28:
        if (v10 <= v14)
        {
          do
          {
            memset_pattern4(v15, v16, v17);
            v15 += a2;
            --v18;
          }
          while (v18);
        }
        return;
      case 8uLL:
        if (v10 <= v14)
        {
          do
          {
            memset_pattern8(v15, v16, v17);
            v15 += a2;
            --v18;
          }
          while (v18);
        }
        return;
      default:
        if (v12 >> 3 == 16)
        {
          if (v10 <= v14)
          {
            do
            {
              memset_pattern16(v15, v16, v17);
              v15 += a2;
              --v18;
            }
            while (v18);
          }
        }
        else
        {
LABEL_17:
          if (v10 <= v14)
          {
            uint64_t v19 = 0;
            do
            {
              if (v9 <= v13)
              {
                uint64_t v20 = 0;
                int v21 = v15;
                do
                {
                  if (v12 >= 8)
                  {
                    unsigned int v22 = (char *)(a8 + 5);
                    unint64_t v23 = v12 >> 3;
                    do
                    {
                      char v24 = *v22++;
                      *v21++ = v24;
                      --v23;
                    }
                    while (v23);
                  }
                  ++v20;
                }
                while (v20 != v13 / v9);
              }
              v15 += a2;
              ++v19;
            }
            while (v19 != v18);
          }
        }
        break;
    }
  }
}

uint64_t VTFillPixelBufferWithBlack(__CVBuffer *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  memset(v14, 0, sizeof(v14));
  if (a1)
  {
    if (CVPixelBufferLockBaseAddress(a1, 0))
    {
      uint64_t v5 = 0;
      uint64_t v6 = 4294954394;
      goto LABEL_18;
    }
    if (CVPixelBufferIsPlanar(a1))
    {
      PlaneCFIndex Count = CVPixelBufferGetPlaneCount(a1);
      uint64_t v3 = PlaneCount;
      if (PlaneCount < 5)
      {
        uint64_t v5 = 0;
        int v4 = (uint64_t *)v14;
        if (!PlaneCount)
        {
LABEL_15:
          size_t Width = CVPixelBufferGetWidth(a1);
          size_t Height = CVPixelBufferGetHeight(a1);
          uint64_t PixelFormatPixelBlockInfo = VTFillBufferPixelsWithBlack(a1, 0, 0, Width, Height, v4);
LABEL_16:
          uint64_t v6 = PixelFormatPixelBlockInfo;
          goto LABEL_17;
        }
      }
      else
      {
        int v4 = (uint64_t *)malloc_type_calloc(PlaneCount, 0x70uLL, 0x100004081F0E799uLL);
        uint64_t v5 = v4;
        if (!v4)
        {
          uint64_t v6 = 4294954392;
LABEL_17:
          CVPixelBufferUnlockBaseAddress(a1, 0);
LABEL_18:
          free(v5);
          return v6;
        }
      }
    }
    else
    {
      uint64_t v5 = 0;
      int v4 = (uint64_t *)v14;
      uint64_t v3 = 1;
    }
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    while (1)
    {
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
      uint64_t PixelFormatPixelBlockInfo = VTBlackFillGetPixelFormatPixelBlockInfo(PixelFormatType, v9, &v4[v8], &v4[v8 + 1], &v4[v8 + 2], &v4[v8 + 3], &v4[v8 + 4], (unsigned char *)&v4[v8 + 13] + 1, &v4[v8 + 5], &v4[v8 + 13], (unsigned char *)&v4[v8 + 13] + 2, (char *)&v4[v8 + 13] + 6);
      if (PixelFormatPixelBlockInfo) {
        goto LABEL_16;
      }
      ++v9;
      v8 += 14;
      if (v3 == v9) {
        goto LABEL_15;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t VTFillPixelBufferBorderWithBlack(__CVBuffer *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  memset(v23, 0, sizeof(v23));
  if (a1)
  {
    if (CVPixelBufferLockBaseAddress(a1, 0))
    {
      unint64_t v13 = 0;
      uint64_t v14 = 4294954394;
      goto LABEL_27;
    }
    if (CVPixelBufferIsPlanar(a1))
    {
      PlaneCFIndex Count = CVPixelBufferGetPlaneCount(a1);
      uint64_t v11 = PlaneCount;
      if (PlaneCount < 5)
      {
        unint64_t v12 = (uint64_t *)v23;
        unint64_t v13 = 0;
        if (!PlaneCount)
        {
LABEL_15:
          size_t Width = CVPixelBufferGetWidth(a1);
          size_t Height = CVPixelBufferGetHeight(a1);
          if (BYTE1(v12[14 * v11 + 13]))
          {
            uint64_t PixelFormatPixelBlockInfo = FigSignalErrorAt();
          }
          else
          {
            unint64_t v22 = Height;
            if (a3 <= 0.0
              || (uint64_t PixelFormatPixelBlockInfo = VTFillBufferPixelsWithBlack(a1, 0, 0, Width, (unint64_t)a3, v12), !PixelFormatPixelBlockInfo))
            {
              if (a2 <= 0.0
                || (uint64_t PixelFormatPixelBlockInfo = VTFillBufferPixelsWithBlack(a1, 0, (unint64_t)a3, (unint64_t)a2, (unint64_t)a5, v12), !PixelFormatPixelBlockInfo))
              {
                if (a2 + a4 >= (double)Width
                  || (uint64_t PixelFormatPixelBlockInfo = VTFillBufferPixelsWithBlack(a1, (unint64_t)(a2 + a4), (unint64_t)a3, (unint64_t)((double)Width - (a2 + a4)), (unint64_t)a5, v12), !PixelFormatPixelBlockInfo))
                {
                  if (a3 + a5 >= (double)v22)
                  {
                    uint64_t v14 = 0;
                    goto LABEL_26;
                  }
                  uint64_t PixelFormatPixelBlockInfo = VTFillBufferPixelsWithBlack(a1, 0, (unint64_t)(a3 + a5), Width, (unint64_t)((double)v22 - (a3 + a5)), v12);
                }
              }
            }
          }
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v12 = (uint64_t *)malloc_type_calloc(PlaneCount, 0x70uLL, 0x100004081F0E799uLL);
        unint64_t v13 = v12;
        if (!v12)
        {
          uint64_t v14 = 4294954392;
LABEL_26:
          CVPixelBufferUnlockBaseAddress(a1, 0);
LABEL_27:
          free(v13);
          return v14;
        }
      }
    }
    else
    {
      unint64_t v13 = 0;
      unint64_t v12 = (uint64_t *)v23;
      uint64_t v11 = 1;
    }
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    while (1)
    {
      OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
      uint64_t PixelFormatPixelBlockInfo = VTBlackFillGetPixelFormatPixelBlockInfo(PixelFormatType, v17, &v12[v16], &v12[v16 + 1], &v12[v16 + 2], &v12[v16 + 3], &v12[v16 + 4], (unsigned char *)&v12[v16 + 13] + 1, &v12[v16 + 5], &v12[v16 + 13], (unsigned char *)&v12[v16 + 13] + 2, (char *)&v12[v16 + 13] + 6);
      if (PixelFormatPixelBlockInfo) {
        break;
      }
      ++v17;
      v16 += 14;
      if (v11 == v17) {
        goto LABEL_15;
      }
    }
LABEL_25:
    uint64_t v14 = PixelFormatPixelBlockInfo;
    goto LABEL_26;
  }

  return FigSignalErrorAt();
}

uint64_t vtWritePatternToMemory(unsigned char *a1, _WORD *a2, unint64_t a3, size_t __len)
{
  uint64_t v4 = 4294954394;
  if (a1 && a2)
  {
    switch(a3)
    {
      case 1uLL:
        memset(a1, *(unsigned __int8 *)a2, __len);
        goto LABEL_17;
      case 2uLL:
        __pattern4[0] = *a2;
        __pattern4[1] = __pattern4[0];
        a2 = __pattern4;
        goto LABEL_15;
      case 3uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        goto LABEL_7;
      case 4uLL:
LABEL_15:
        memset_pattern4(a1, a2, __len);
        goto LABEL_17;
      case 8uLL:
        memset_pattern8(a1, a2, __len);
        goto LABEL_17;
      default:
        if (a3 == 16)
        {
          memset_pattern16(a1, a2, __len);
        }
        else
        {
LABEL_7:
          if (__len)
          {
            unsigned int v5 = 0;
            do
            {
              if (v5 >= a3) {
                unsigned int v6 = 0;
              }
              else {
                unsigned int v6 = v5;
              }
              unsigned int v5 = v6 + 1;
              *a1++ = *((unsigned char *)a2 + v6);
              --__len;
            }
            while (__len);
          }
        }
LABEL_17:
        uint64_t v4 = 0;
        break;
    }
  }
  return v4;
}

uint64_t VTCopyTemporalFilterList(const __CFDictionary *a1, const __CFArray **a2)
{
  MEMORY[0x199705810](&sCreateAndPopulateTemporalFiltersRegistryOnce, vtCreateAndPopulateTemporalFilterRegistry);
  if (!sTemporalFilterRegistry) {
    return FigSignalErrorAt();
  }
  if (a1)
  {
    if (CFDictionaryContainsKey(a1, @"Class")) {
      CFDictionaryGetValue(a1, @"Class");
    }
    if (CFDictionaryContainsKey(a1, @"TemporalFilterSpecifications")) {
      CFDictionaryGetValue(a1, @"TemporalFilterSpecifications");
    }
  }
  uint64_t v4 = FigRegistryCopyFilteredItemList();
  if (v4) {
    return v4;
  }
  unint64_t v22 = a2;
  uint64_t Count = CFArrayGetCount(0);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
  if (Count < 1)
  {
LABEL_32:
    v24.length = CFArrayGetCount(theArray);
    v24.location = 0;
    CFArraySortValues(theArray, v24, (CFComparatorFunction)vtCompareClassNameThenTemporalFilterName, 0);
    uint64_t v20 = 0;
    *unint64_t v22 = theArray;
    return v20;
  }
  CFIndex v7 = 0;
  uint64_t v8 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  unint64_t v9 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  while (1)
  {
    CFArrayGetValueAtIndex(0, v7);
    uint64_t v10 = FigRegistryItemCopyDescription();
    if (v10) {
      break;
    }
    uint64_t v10 = FigRegistryItemCopyMatchingInfo();
    if (v10) {
      break;
    }
    uint64_t v10 = FigRegistryItemCopyBundle();
    if (v10) {
      break;
    }
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v6, 0, v8, v9);
    CFArrayRef Value = CFDictionaryGetValue(0, @"VTTemporalFilterClass");
    if (!Value) {
      goto LABEL_20;
    }
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(Value))
    {
      CFDictionarySetValue(Mutable, @"Class", Value);
      uint64_t v14 = CFDictionaryGetValue(0, @"CMClassImplementationID");
      if (!v14) {
        goto LABEL_20;
      }
      CFTypeID v15 = CFStringGetTypeID();
      if (v15 == CFGetTypeID(v14))
      {
        CFDictionarySetValue(Mutable, @"TemporalFilterID", v14);
        uint64_t v16 = CFDictionaryGetValue(0, @"VTTemporalFilterClassName");
        if (!v16)
        {
LABEL_20:
          if (!Mutable) {
            goto LABEL_24;
          }
          goto LABEL_23;
        }
        CFTypeID v17 = CFStringGetTypeID();
        if (v17 == CFGetTypeID(v16))
        {
          CFDictionarySetValue(Mutable, @"ClassName", v16);
          unint64_t v18 = CFDictionaryGetValue(0, @"VTTemporalFilterName");
          if (v18)
          {
            CFTypeID v19 = CFStringGetTypeID();
            if (v19 == CFGetTypeID(v18))
            {
              CFDictionarySetValue(Mutable, @"TemporalFilterName", v18);
              CFDictionarySetValue(Mutable, @"DisplayName", v18);
              CFArrayAppendValue(theArray, Mutable);
              if (!Mutable) {
                goto LABEL_24;
              }
LABEL_23:
              CFRelease(Mutable);
              goto LABEL_24;
            }
          }
        }
      }
    }
    if (Mutable) {
      goto LABEL_23;
    }
LABEL_24:
    if (++v7 == Count) {
      goto LABEL_32;
    }
  }
  uint64_t v20 = v10;
  if (theArray) {
    CFRelease(theArray);
  }
  return v20;
}

void vtCreateAndPopulateTemporalFilterRegistry()
{
  keys[7] = *(void **)MEMORY[0x1E4F143B8];
  MEMORY[0x199705810](&sCreateTemporalFiltersRegistryOnce, vtCreateTemporalFilterRegistry);
  vtLoadTemporalFilterPluginsFromPath("/System/Library/Video/Plug-Ins");
  vtLoadTemporalFilterPluginsFromPath("/Library/Video/Plug-Ins");
  FigRegistryRescan();
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    BOOL v2 = Mutable;
    CFMutableArrayRef v3 = CFArrayCreateMutable(v0, 2, MEMORY[0x1E4F1D510]);
    FigCFArrayAppendDouble();
    FigCFArrayAppendDouble();
    CFDictionaryAddValue(v2, @"VTTemporalFilterClass", @"Enhancement");
    CFDictionaryAddValue(v2, @"SupportedScaleFactors", v3);
    int valuePtr = 1;
    keys[0] = @"CMClassID";
    keys[1] = @"CMClassImplementationName";
    keys[2] = @"VTTemporalFilterClassName";
    keys[3] = @"VTTemporalFilterName";
    keys[4] = @"CMClassImplementationVersion";
    keys[5] = @"CMClassImplementationID";
    keys[6] = @"CMMatchingInfo";
    CFNumberRef v4 = CFNumberCreate(v0, kCFNumberIntType, &valuePtr);
    if (v4)
    {
      CFNumberRef v5 = v4;
      values[0] = @"com.apple.videotoolbox.temporalfilter";
      values[1] = @"SRS Enhancement Filter";
      values[2] = @"SRSEnhancementFilter";
      values[3] = @"SRSEnhancementFilter";
      values[4] = v4;
      values[5] = @"com.apple.videotoolbox.temporalfilter.SRSEnhancementFilter";
      values[6] = v2;
      CFDictionaryRef v6 = CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v6)
      {
        CFDictionaryRef v7 = v6;
        FigRegistryAddItem();
        CFRelease(v5);
        CFDictionaryRef v8 = v7;
      }
      else
      {
        FigSignalErrorAt();
        CFDictionaryRef v8 = v5;
      }
      CFRelease(v8);
      if (!v3) {
        goto LABEL_10;
      }
    }
    else
    {
      FigSignalErrorAt();
      if (!v3) {
        goto LABEL_10;
      }
    }
    CFRelease(v3);
LABEL_10:
    CFRelease(v2);
  }
}

uint64_t vtFilterRegistryItemByFilterClassAndFilterSpecification(uint64_t a1)
{
  CFDictionaryRef theDict = 0;
  CFDictionaryRef v31 = 0;
  uint64_t v28 = *(void *)(a1 + 8);
  uint64_t v29 = 1;
  if (FigRegistryItemCopyMatchingInfo() || FigRegistryItemCopyDescription()) {
    goto LABEL_38;
  }
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 8);
  if (v2 && CFDictionaryGetValue(v2, @"TemporalFilterID"))
  {
    CFDictionaryGetValue(theDict, @"CMClassImplementationID");
    int v3 = 0;
    if (!FigCFEqual()) {
      goto LABEL_38;
    }
  }
  else
  {
    int v3 = 1;
  }
  CFArrayRef Value = CFDictionaryGetValue(v31, @"VTTemporalFilterClass");
  if (!Value) {
    goto LABEL_38;
  }
  CFTypeID v5 = CFGetTypeID(Value);
  if (v5 != CFStringGetTypeID() || !FigCFEqual()) {
    goto LABEL_38;
  }
  CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"CMDependencies");
  if (!v6 || (v7 = v6, CFTypeID v8 = CFGetTypeID(v6), v8 != CFDictionaryGetTypeID()))
  {
    if (!v3)
    {
LABEL_28:
      uint64_t v10 = 1;
      goto LABEL_39;
    }
    goto LABEL_25;
  }
  unint64_t v9 = CFDictionaryGetValue(v7, @"IORegistryRequiredKey");
  uint64_t v10 = (uint64_t)v9;
  if (!v9) {
    goto LABEL_39;
  }
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 != CFStringGetTypeID()) {
    goto LABEL_38;
  }
  CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(v7, @"IORegistryServiceName");
  if (!v12) {
    goto LABEL_38;
  }
  CFStringRef v13 = v12;
  CFTypeID v14 = CFGetTypeID(v12);
  if (v14 != CFStringGetTypeID())
  {
    CFTypeID v15 = CFGetTypeID(v13);
    if (v15 != CFArrayGetTypeID()) {
      goto LABEL_38;
    }
  }
  CFTypeID v16 = CFGetTypeID(v13);
  if (v16 == CFStringGetTypeID())
  {
    BOOL v17 = VTDoesIOServiceSupportRegistryKey(v13, (const __CFString *)v10);
    uint64_t v10 = v17;
    if (v17) {
      char v18 = v3;
    }
    else {
      char v18 = 0;
    }
    if ((v18 & 1) == 0) {
      goto LABEL_39;
    }
    goto LABEL_25;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v13);
  if (Count < 1)
  {
LABEL_38:
    uint64_t v10 = 0;
    goto LABEL_39;
  }
  CFIndex v23 = Count;
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, 0);
  if (!VTDoesIOServiceSupportRegistryKey(ValueAtIndex, (const __CFString *)v10))
  {
    CFIndex v25 = 1;
    while (v23 != v25)
    {
      CFStringRef v26 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, v25++);
      if (VTDoesIOServiceSupportRegistryKey(v26, (const __CFString *)v10))
      {
        uint64_t v10 = v25 - 1 < v23;
        goto LABEL_36;
      }
    }
    goto LABEL_38;
  }
  uint64_t v10 = 1;
LABEL_36:
  if (v3 & v10)
  {
LABEL_25:
    CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(v31, @"VTRequiredSpecificationEntries");
    if (v19)
    {
      CFDictionaryRef v20 = v19;
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(v20))
      {
        CFDictionaryApplyFunction(v20, (CFDictionaryApplierFunction)vtCheckRequiredTemporalFilterSpecificationKey, &v28);
        uint64_t v10 = v29;
        goto LABEL_39;
      }
    }
    goto LABEL_28;
  }
LABEL_39:
  if (v31) {
    CFRelease(v31);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  return v10;
}

CFComparisonResult vtCompareClassNameThenTemporalFilterName(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"ClassName");
  CFStringRef v5 = (const __CFString *)CFDictionaryGetValue(a2, @"ClassName");
  CFComparisonResult result = CFStringCompare(Value, v5, 0);
  if (result == kCFCompareEqualTo)
  {
    CFStringRef v7 = (const __CFString *)CFDictionaryGetValue(a1, @"TemporalFilterName");
    CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(a2, @"TemporalFilterName");
    return CFStringCompare(v7, v8, 0);
  }
  return result;
}

uint64_t VTSelectAndCreateTemporalFilterInstance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    MEMORY[0x199705810](&sCreateAndPopulateTemporalFiltersRegistryOnce, vtCreateAndPopulateTemporalFilterRegistry);
    if (sTemporalFilterRegistry) {
      FigRegistryCopyFilteredItemList();
    }
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return FigSignalErrorAt();
}

uint64_t vtCreateTemporalFilterRegistry()
{
  return FigRegistryCreate();
}

void vtLoadTemporalFilterPluginsFromPath(const char *a1)
{
  if (access(a1, 4) != -1)
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, 0x8000100u);
    if (v3)
    {
      CFStringRef v4 = v3;
      CFURLRef v5 = CFURLCreateWithFileSystemPath(v2, v3, kCFURLPOSIXPathStyle, 1u);
      if (v5)
      {
        CFURLRef v6 = v5;
        FigRegistryAddSearchPathWithOptions();
        CFRelease(v6);
      }
      CFRelease(v4);
    }
  }
}

CFDictionaryRef vtCheckRequiredTemporalFilterSpecificationKey(void *key, const void *a2, uint64_t a3)
{
  CFDictionaryRef result = *(const __CFDictionary **)a3;
  if (!*(void *)a3
    || (CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, key), !a2)
    || !result
    || (CFDictionaryRef result = (const __CFDictionary *)CFEqual(result, a2), !result))
  {
    *(unsigned char *)(a3 + 8) = 0;
  }
  return result;
}

uint64_t vt_Copy_32BGRA_444vITU601(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    uint64_t v11 = *a6;
    uint64_t v10 = a6[1];
    uint64_t v12 = *a4 + 2;
    int32x2_t v13 = vdup_n_s32(0x404000u);
    do
    {
      if (a1)
      {
        uint64_t v14 = 0;
        CFTypeID v15 = (unsigned __int8 *)v12;
        do
        {
          unsigned int v16 = *v15;
          unsigned int v17 = *(v15 - 1);
          unsigned int v18 = *(v15 - 2);
          *(unsigned char *)(v11 + v14) = (16519 * v17 + 8414 * v16 + 3208 * v18 + 540672) >> 15;
          int32x2_t v19 = vdup_n_s32(v16);
          CFDictionaryRef v20 = (unsigned char *)(v10 + 2 * v14);
          uint32x2_t v21 = vshr_n_u32((uint32x2_t)vadd_s32(vmla_s32(vmla_s32(vmul_s32(vdup_n_s32(v17), (int32x2_t)0x7FD0ED007FDAC2), v19, (int32x2_t)0x3838007FED08), vdup_n_s32(v18), (int32x2_t)0x7FF6DC00003838), v13), 0xFuLL);
          v20[1] = v21.i8[4];
          *CFDictionaryRef v20 = v21.i8[0];
          ++v14;
          v15 += 4;
        }
        while (a1 != v14);
      }
      v11 += v8;
      v10 += v9;
      ++v6;
      v12 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_444fITU601(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    uint64_t v10 = *a4 + 2;
    uint64_t v11 = *a6;
    uint64_t v12 = (char *)a6[1];
    do
    {
      if (a1)
      {
        uint64_t v13 = 0;
        uint64_t v14 = (unsigned __int8 *)v10;
        CFTypeID v15 = v12;
        do
        {
          int v16 = *v14;
          int v17 = *(v14 - 1);
          int v18 = *(v14 - 2);
          unsigned int v19 = (19235 * v17 + 9798 * v16 + 3736 * v18 + 0x4000) >> 15;
          int v20 = -10854 * v17 - 5528 * v16 + (v18 << 14);
          unsigned int v21 = v20 + 0x400000;
          unsigned int v22 = (v20 + 4210688) >> 15;
          int v23 = -13719 * v17 + (v16 << 14) - 2663 * v18;
          unsigned int v24 = v23 + 0x400000;
          unsigned int v25 = (v23 + 4210688) >> 15;
          *(unsigned char *)(v11 + v13) = v19;
          if (v21 > 0x7FBFFF) {
            char v26 = -1;
          }
          else {
            char v26 = v22;
          }
          *CFTypeID v15 = v26;
          if (v24 > 0x7FBFFF) {
            LOBYTE(v25) = -1;
          }
          v15[1] = v25;
          v15 += 2;
          ++v13;
          v14 += 4;
        }
        while (a1 != v13);
      }
      v11 += v8;
      v12 += v9;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_444vITU709(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    uint64_t v11 = *a6;
    uint64_t v10 = a6[1];
    uint64_t v12 = *a4 + 2;
    int32x2_t v13 = vdup_n_s32(0x404000u);
    do
    {
      if (a1)
      {
        uint64_t v14 = 0;
        CFTypeID v15 = (unsigned __int8 *)v12;
        do
        {
          unsigned int v16 = *v15;
          unsigned int v17 = *(v15 - 1);
          unsigned int v18 = *(v15 - 2);
          *(unsigned char *)(v11 + v14) = (20127 * v17 + 5983 * v16 + 2032 * v18 + 540672) >> 15;
          int32x2_t v19 = vdup_n_s32(v16);
          int v20 = (unsigned char *)(v10 + 2 * v14);
          uint32x2_t v21 = vshr_n_u32((uint32x2_t)vadd_s32(vmla_s32(vmla_s32(vmul_s32(vdup_n_s32(v17), (int32x2_t)0x7FCCF0007FD4ABLL), v19, (int32x2_t)0x3838007FF31FLL), vdup_n_s32(v18), (int32x2_t)0x7FFAD900003838), v13), 0xFuLL);
          v20[1] = v21.i8[4];
          *int v20 = v21.i8[0];
          ++v14;
          v15 += 4;
        }
        while (a1 != v14);
      }
      v11 += v8;
      v10 += v9;
      ++v6;
      v12 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_444fITU709(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    uint64_t v10 = *a4 + 2;
    uint64_t v11 = *a6;
    uint64_t v12 = (char *)a6[1];
    do
    {
      if (a1)
      {
        uint64_t v13 = 0;
        uint64_t v14 = (unsigned __int8 *)v10;
        CFTypeID v15 = v12;
        do
        {
          int v16 = *v14;
          int v17 = *(v14 - 1);
          int v18 = *(v14 - 2);
          unsigned int v19 = (23436 * v17 + 6966 * v16 + 2366 * v18 + 0x4000) >> 15;
          int v20 = -12629 * v17 - 3753 * v16 + (v18 << 14);
          unsigned int v21 = v20 + 0x400000;
          unsigned int v22 = (v20 + 4210688) >> 15;
          int v23 = -14881 * v17 + (v16 << 14) - 1501 * v18;
          unsigned int v24 = v23 + 0x400000;
          unsigned int v25 = (v23 + 4210688) >> 15;
          *(unsigned char *)(v11 + v13) = v19;
          if (v21 > 0x7FBFFF) {
            char v26 = -1;
          }
          else {
            char v26 = v22;
          }
          *CFTypeID v15 = v26;
          if (v24 > 0x7FBFFF) {
            LOBYTE(v25) = -1;
          }
          v15[1] = v25;
          v15 += 2;
          ++v13;
          v14 += 4;
        }
        while (a1 != v13);
      }
      v11 += v8;
      v12 += v9;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_444vITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    uint64_t v11 = *a6;
    uint64_t v10 = a6[1];
    uint64_t v12 = *a4 + 2;
    int32x2_t v13 = vdup_n_s32(0x404000u);
    do
    {
      if (a1)
      {
        uint64_t v14 = 0;
        CFTypeID v15 = (unsigned __int8 *)v12;
        do
        {
          unsigned int v16 = *v15;
          unsigned int v17 = *(v15 - 1);
          unsigned int v18 = *(v15 - 2);
          *(unsigned char *)(v11 + v14) = (19024 * v17 + 7371 * v16 + 1664 * v18 + 540672) >> 15;
          int32x2_t v19 = vdup_n_s32(v16);
          int v20 = (unsigned char *)(v10 + 2 * v14);
          uint32x2_t v21 = vshr_n_u32((uint32x2_t)vadd_s32(vmla_s32(vmla_s32(vmul_s32(vdup_n_s32(v17), (int32x2_t)0x7FCC75007FD79ALL), v19, (int32x2_t)0x380E007FF05ALL), vdup_n_s32(v18), (int32x2_t)0x7FFB7F0000380ELL), v13), 0xFuLL);
          v20[1] = v21.i8[4];
          *int v20 = v21.i8[0];
          ++v14;
          v15 += 4;
        }
        while (a1 != v14);
      }
      v11 += v8;
      v10 += v9;
      ++v6;
      v12 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_444fITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    uint64_t v10 = *a4 + 2;
    uint64_t v11 = *a6;
    uint64_t v12 = (char *)a6[1];
    do
    {
      if (a1)
      {
        uint64_t v13 = 0;
        uint64_t v14 = (unsigned __int8 *)v10;
        CFTypeID v15 = v12;
        do
        {
          int v16 = *v14;
          int v17 = *(v14 - 1);
          int v18 = *(v14 - 2);
          unsigned int v19 = (22217 * v17 + 8608 * v16 + 1943 * v18 + 0x4000) >> 15;
          int v20 = -11808 * v17 - 4574 * v16 + (v18 << 14);
          unsigned int v21 = v20 + 0x400000;
          unsigned int v22 = (v20 + 4210688) >> 15;
          int v23 = -15065 * v17 + (v16 << 14) - 1317 * v18;
          unsigned int v24 = v23 + 0x400000;
          unsigned int v25 = (v23 + 4210688) >> 15;
          *(unsigned char *)(v11 + v13) = v19;
          if (v21 > 0x7FBFFF) {
            char v26 = -1;
          }
          else {
            char v26 = v22;
          }
          *CFTypeID v15 = v26;
          if (v24 > 0x7FBFFF) {
            LOBYTE(v25) = -1;
          }
          v15[1] = v25;
          v15 += 2;
          ++v13;
          v14 += 4;
        }
        while (a1 != v13);
      }
      v11 += v8;
      v12 += v9;
      ++v6;
      v10 += v7;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t VTPixelBufferConformerGetTypeID()
{
  if (sRegisterVTPixelBufferConformerTypeOnce != -1) {
    dispatch_once_f(&sRegisterVTPixelBufferConformerTypeOnce, 0, (dispatch_function_t)RegisterVTPixelBufferConformerIDType);
  }
  return sVTPixelBufferConformerID;
}

uint64_t RegisterVTPixelBufferConformerIDType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTPixelBufferConformerID = result;
  return result;
}

uint64_t VTPixelBufferConformerCreateWithAttributes(uint64_t a1, const void *a2, uint64_t *a3)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (sRegisterVTPixelBufferConformerTypeOnce != -1) {
    dispatch_once_f(&sRegisterVTPixelBufferConformerTypeOnce, 0, (dispatch_function_t)RegisterVTPixelBufferConformerIDType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v7 = Instance;
    if (a2) {
      CFRetain(a2);
    }
    *(void *)(v7 + 32) = a2;
    uint64_t v8 = VTPixelTransferSessionCreate(v5, (VTPixelTransferSessionRef *)(v7 + 24));
    if (v8 || !*(void *)(v7 + 24))
    {
      CFRelease((CFTypeRef)v7);
    }
    else
    {
      uint64_t v8 = 0;
      *a3 = v7;
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTPixelBufferConformerGetAttributes(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

void VTPixelBufferConformerSetAttributes(uint64_t a1, const void *a2)
{
  CFStringRef v3 = (CFTypeRef *)(a1 + 32);
  if (!FigCFEqual())
  {
    if (a2) {
      CFRetain(a2);
    }
    if (*v3) {
      CFRelease(*v3);
    }
    CFTypeRef *v3 = a2;
  }
}

uint64_t VTPixelBufferConformerGetColorProperties(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t VTPixelBufferConformerSetColorProperties(uint64_t result, const void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = FigCFEqual();
    if (!result)
    {
      CFStringRef v4 = *(const void **)(v3 + 40);
      *(void *)(v3 + 40) = a2;
      if (a2) {
        CFRetain(a2);
      }
      if (v4) {
        CFRelease(v4);
      }
      CFDictionaryRef v5 = *(const __CFDictionary **)(v3 + 40);
      if (v5)
      {
        CFStringRef Value = CFDictionaryGetValue(v5, (const void *)*MEMORY[0x1E4F24A90]);
        uint64_t v7 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 40), (const void *)*MEMORY[0x1E4F24BC8]);
        uint64_t v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 40), (const void *)*MEMORY[0x1E4F24C18]);
        uint64_t v9 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 40), (const void *)*MEMORY[0x1E4F24B70]);
      }
      else
      {
        CFStringRef Value = 0;
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        uint64_t v9 = 0;
      }
      VTSessionSetProperty(*(VTSessionRef *)(v3 + 24), @"DestinationColorPrimaries", Value);
      VTSessionSetProperty(*(VTSessionRef *)(v3 + 24), @"DestinationTransferFunction", v7);
      VTSessionSetProperty(*(VTSessionRef *)(v3 + 24), @"DestinationYCbCrMatrix", v8);
      uint64_t v10 = *(const void **)(v3 + 24);
      return VTSessionSetProperty(v10, @"DestinationICCProfile", v9);
    }
  }
  return result;
}

uint64_t VTPixelBufferConformerIsConformantPixelBuffer(uint64_t a1, void *cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CVPixelBufferGetTypeID()) {
    return 0;
  }
  if (!*(void *)(a1 + 32) || (uint64_t result = CVPixelBufferIsCompatibleWithAttributes(), result))
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t result = VTIsBufferTaggedWithColorProperties(cf);
      if (result)
      {
        CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)*MEMORY[0x1E4F24A90]);
        uint64_t v7 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)*MEMORY[0x1E4F24BC8]);
        uint64_t v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)*MEMORY[0x1E4F24C18]);
        uint64_t v9 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), (const void *)*MEMORY[0x1E4F24B70]);
        return VTIsPixelBufferCompatibleWithColorProperties(cf, Value, v7, v8, v9, 0);
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t VTPixelBufferConformerCopyBlackPixelBuffer(uint64_t a1, const opaqueCMFormatDescription *a2, CVPixelBufferRef *a3)
{
  CVPixelBufferRef pixelBufferOut = 0;
  if (!a3) {
    goto LABEL_37;
  }
  uint64_t v7 = (CVPixelBufferPoolRef *)(a1 + 16);
  uint64_t v6 = *(__CVPixelBufferPool **)(a1 + 16);
  if (v6)
  {
    CFTypeRef v8 = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    goto LABEL_23;
  }
  CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 32);
  if (v10)
  {
    int v11 = CFDictionaryContainsKey(v10, (const void *)*MEMORY[0x1E4F24D08]);
    int v12 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), (const void *)*MEMORY[0x1E4F24E10]);
    int v13 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), (const void *)*MEMORY[0x1E4F24D70]);
    BOOL v14 = v11 != 0;
    BOOL v15 = v12 != 0;
    BOOL v16 = v13 != 0;
    if (v11) {
      BOOL v17 = v12 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (!v17 && v13 != 0)
    {
      unsigned int v19 = *(const void **)(a1 + 32);
      if (!v19) {
        goto LABEL_37;
      }
      CFTypeRef v8 = CFRetain(v19);
      if (!v8) {
        goto LABEL_37;
      }
LABEL_21:
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFDictionaryRef)v8, v7)
        || (uint64_t v6 = *v7) == 0)
      {
        uint64_t v21 = FigSignalErrorAt();
LABEL_27:
        CFRelease(v8);
        return v21;
      }
LABEL_23:
      uint64_t v21 = CVPixelBufferPoolCreatePixelBuffer(v9, v6, &pixelBufferOut);
      CVPixelBufferRef v22 = pixelBufferOut;
      if (v21 || (uint64_t v21 = VTFillPixelBufferWithBlack(pixelBufferOut), v22 = pixelBufferOut, v21))
      {
        if (v22) {
          CFRelease(v22);
        }
      }
      else
      {
        *a3 = pixelBufferOut;
        CVPixelBufferRef pixelBufferOut = 0;
      }
      if (!v8) {
        return v21;
      }
      goto LABEL_27;
    }
  }
  else
  {
    BOOL v16 = 0;
    BOOL v15 = 0;
    BOOL v14 = 0;
  }
  CMVideoFormatDescriptionGetDimensions(a2);
  uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (MutableCopy)
  {
    CFTypeRef v8 = (CFTypeRef)MutableCopy;
    if (v14)
    {
      if (v15) {
        goto LABEL_19;
      }
    }
    else
    {
      FigCFDictionarySetInt32();
      if (v15)
      {
LABEL_19:
        if (v16) {
          goto LABEL_21;
        }
LABEL_20:
        FigCFDictionarySetInt32();
        goto LABEL_21;
      }
    }
    FigCFDictionarySetInt32();
    if (v16) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  FigSignalErrorAt();
LABEL_37:

  return FigSignalErrorAt();
}

uint64_t VTPixelBufferConformerCopyConformedPixelBuffer(uint64_t a1, void *cf, int a3, CFTypeRef *a4)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  CFTypeRef v52 = 0;
  if (!a4)
  {
    return FigSignalErrorAt();
  }
  CFTypeID v4 = a4;
  CFDictionaryRef v5 = cf;
  if (!cf)
  {
    CFDictionaryRef Mutable = 0;
    uint64_t v16 = 0;
    *a4 = 0;
    goto LABEL_109;
  }
  if (!a3 && VTPixelBufferConformerIsConformantPixelBuffer(a1, cf))
  {
    CFTypeRef *v4 = v5;
    CFRetain(v5);
    CFDictionaryRef Mutable = 0;
    uint64_t v16 = 0;
    goto LABEL_109;
  }
  CFDictionaryRef resolvedDictionaryOut = 0;
  values[0] = *(void **)(a1 + 32);
  CFDictionaryRef Attributes = (const __CFDictionary *)CVPixelBufferGetAttributes();
  CVPixelBufferRef v8 = (CVPixelBufferRef)*MEMORY[0x1E4F24D70];
  CFAllocatorRef v9 = (__CVBuffer *)*MEMORY[0x1E4F24E10];
  pixelBufferOut[0] = *(CVPixelBufferRef *)MEMORY[0x1E4F24D70];
  pixelBufferOut[1] = v9;
  CFDictionaryRef v10 = (__CVBuffer *)*MEMORY[0x1E4F24C98];
  pixelBufferOut[2] = *(CVPixelBufferRef *)MEMORY[0x1E4F24D08];
  pixelBufferOut[3] = v10;
  int v11 = (__CVBuffer *)*MEMORY[0x1E4F24D40];
  pixelBufferOut[4] = *(CVPixelBufferRef *)MEMORY[0x1E4F24D20];
  pixelBufferOut[5] = v11;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!*(void *)(a1 + 32))
  {
    CFArrayRef cfa = 0;
    goto LABEL_15;
  }
  CFArrayRef cfa = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D510]);
  CVPixelBufferCreateResolvedAttributesDictionary(v12, cfa, &resolvedDictionaryOut);
  if (!resolvedDictionaryOut
    || (CFIndex Count = CFDictionaryGetCount(resolvedDictionaryOut),
        (CFDictionaryRef Mutable = CFDictionaryCreateMutableCopy(v12, Count + 6, resolvedDictionaryOut)) == 0))
  {
LABEL_15:
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(v12, 6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      uint64_t v16 = 4294954392;
      goto LABEL_104;
    }
  }
  CFNumberRef v46 = v4;
  uint64_t v17 = 0;
  CFAllocatorRef allocator = v12;
  int v51 = v5;
  key = v8;
  CFDictionaryRef v49 = Attributes;
  while (1)
  {
    value = 0;
    CVPixelBufferRef v18 = pixelBufferOut[v17];
    if (!CFDictionaryGetValueIfPresent(Mutable, v18, (const void **)&value)) {
      break;
    }
    CFTypeID v19 = CFGetTypeID(value);
    if (v19 != CFArrayGetTypeID()) {
      goto LABEL_100;
    }
    if (v18 != v8)
    {
      value = (void *)CFArrayGetValueAtIndex((CFArrayRef)value, 0);
      CFDictionarySetValue(Mutable, v18, value);
      goto LABEL_100;
    }
    int v53 = 0;
    signed int PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)v5);
    CFArrayRef v23 = (const __CFArray *)value;
    int v24 = CFArrayGetCount((CFArrayRef)value);
    if (v24 < 1)
    {
      int v26 = 0;
      goto LABEL_99;
    }
    CFIndex v25 = 0;
    int v26 = 0;
    uint64_t v27 = v24;
    while (1)
    {
      int valuePtr = 0;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v23, v25);
      if (!ValueAtIndex) {
        goto LABEL_94;
      }
      CFNumberRef v29 = ValueAtIndex;
      CFTypeID v30 = CFGetTypeID(ValueAtIndex);
      if (v30 != CFNumberGetTypeID()) {
        goto LABEL_94;
      }
      CFNumberGetValue(v29, kCFNumberSInt32Type, &valuePtr);
      int v31 = valuePtr;
      if (valuePtr == PixelFormatType) {
        break;
      }
      if (PixelFormatType > 1380401728)
      {
        if (PixelFormatType <= 1983131703)
        {
          if (PixelFormatType == 1380401729) {
            goto LABEL_63;
          }
          if (PixelFormatType == 1916022840)
          {
LABEL_59:
            if (valuePtr > 1380401728)
            {
              if (valuePtr == 1380401729 || valuePtr == 1916022840) {
                goto LABEL_98;
              }
              int v32 = 1983131704;
            }
            else
            {
              if (valuePtr == 32) {
                goto LABEL_98;
              }
LABEL_61:
              if (valuePtr == 1094862674) {
                goto LABEL_98;
              }
              int v32 = 1111970369;
            }
            goto LABEL_80;
          }
        }
        else
        {
          switch(PixelFormatType)
          {
            case 1983131704:
              goto LABEL_59;
            case 2037741171:
              goto LABEL_53;
            case 2033463856:
LABEL_47:
              if (valuePtr <= 1380401728)
              {
                if (valuePtr > 875704437)
                {
                  if (valuePtr == 875704438) {
                    goto LABEL_98;
                  }
                  goto LABEL_61;
                }
LABEL_55:
                if (valuePtr == 32) {
                  goto LABEL_98;
                }
                int v32 = 846624121;
LABEL_80:
                if (valuePtr == v32) {
                  goto LABEL_98;
                }
                break;
              }
              if (valuePtr > 1983131703)
              {
                if (valuePtr == 1983131704) {
                  goto LABEL_98;
                }
                int v33 = 2033463856;
                goto LABEL_78;
              }
LABEL_72:
              if (valuePtr == 1380401729) {
                goto LABEL_98;
              }
              int v32 = 1916022840;
              goto LABEL_80;
          }
        }
      }
      else if (PixelFormatType <= 875704437)
      {
        if (PixelFormatType == 32) {
          goto LABEL_63;
        }
        if (PixelFormatType == 846624121)
        {
LABEL_53:
          if (valuePtr <= 1380401728)
          {
            if (valuePtr > 1094862673) {
              goto LABEL_61;
            }
            goto LABEL_55;
          }
          if (valuePtr > 1983131703)
          {
            int v33 = 1983131704;
LABEL_78:
            if (valuePtr == v33) {
              goto LABEL_98;
            }
            int v32 = 2037741171;
            goto LABEL_80;
          }
          goto LABEL_72;
        }
      }
      else
      {
        if (PixelFormatType == 875704438) {
          goto LABEL_47;
        }
        if (PixelFormatType == 1094862674 || PixelFormatType == 1111970369)
        {
LABEL_63:
          if (valuePtr > 1111970368)
          {
            if (valuePtr == 1111970369) {
              goto LABEL_98;
            }
            int v32 = 1380401729;
          }
          else
          {
            if (valuePtr == 32) {
              goto LABEL_98;
            }
            int v32 = 1094862674;
          }
          goto LABEL_80;
        }
      }
      BOOL v35 = PixelFormatType == 1983000880 && valuePtr == 2016686640;
      BOOL v36 = valuePtr == 1111970369 && PixelFormatType == 1378955371;
      if (v36 || v35) {
        goto LABEL_98;
      }
      if (!v26) {
        int v26 = valuePtr;
      }
LABEL_94:
      if (v27 == ++v25) {
        goto LABEL_99;
      }
    }
    int v31 = PixelFormatType;
LABEL_98:
    int v26 = v31;
LABEL_99:
    int v53 = v26;
    CFAllocatorRef v12 = allocator;
    CFNumberRef v37 = CFNumberCreate(allocator, kCFNumberSInt32Type, &v53);
    CVPixelBufferRef v8 = key;
    CFDictionarySetValue(Mutable, key, v37);
    CFRelease(v37);
    CFDictionaryRef v5 = v51;
    CFDictionaryRef Attributes = v49;
LABEL_100:
    if (++v17 == 6)
    {
      uint64_t v16 = 0;
      goto LABEL_102;
    }
  }
  int v20 = (void *)CFDictionaryGetValue(Attributes, v18);
  value = v20;
  if (v20)
  {
    CFRetain(v20);
    uint64_t v21 = value;
    if (value)
    {
LABEL_23:
      CFDictionarySetValue(Mutable, v18, v21);
      CFRelease(value);
      goto LABEL_100;
    }
  }
  else if (v17 != 3 && v17 != 5)
  {
    if (vtCreateCompletePixelBufferAttributesFromSourceBufferAttributes_fallbacks[v17])
    {
      uint64_t v21 = (void *)((uint64_t (*)(void *))vtCreateCompletePixelBufferAttributesFromSourceBufferAttributes_fallbacks[v17])(v5);
      value = v21;
      if (v21) {
        goto LABEL_23;
      }
    }
  }
  if (v17 == 3
    || v17 == 5
    || !vtCreateCompletePixelBufferAttributesFromSourceBufferAttributes_fallbacks[v17])
  {
    goto LABEL_100;
  }
  uint64_t v16 = FigSignalErrorAt();
  CFRelease(Mutable);
  CFDictionaryRef Mutable = 0;
LABEL_102:
  CFTypeID v4 = v46;
LABEL_104:
  if (resolvedDictionaryOut) {
    CFRelease(resolvedDictionaryOut);
  }
  if (cfa) {
    CFRelease(cfa);
  }
  if (!v16)
  {
    CFNumberRef v39 = (CVPixelBufferPoolRef *)(a1 + 16);
    unint64_t v38 = *(__CVPixelBufferPool **)(a1 + 16);
    pixelBufferOut[0] = 0;
    if (v38)
    {
      uint64_t PixelBuffer = CVPixelBufferPoolCreatePixelBuffer(v12, v38, pixelBufferOut);
      if (PixelBuffer)
      {
        uint64_t v16 = PixelBuffer;
LABEL_117:
        CFTypeRef v52 = 0;
        goto LABEL_111;
      }
      if (!pixelBufferOut[0])
      {
        uint64_t v43 = FigSignalErrorAt();
        CFTypeRef v52 = 0;
        if (v43)
        {
          uint64_t v16 = v43;
          goto LABEL_111;
        }
        goto LABEL_127;
      }
      IsCompatibleWithCFDictionaryRef Attributes = CVPixelBufferIsCompatibleWithAttributes();
      CFNumberRef v42 = pixelBufferOut[0];
      if (IsCompatibleWithAttributes)
      {
        CFTypeRef v52 = pixelBufferOut[0];
        if (!pixelBufferOut[0])
        {
          uint64_t v16 = 4294954392;
          goto LABEL_111;
        }
        goto LABEL_134;
      }
      if (pixelBufferOut[0]) {
        CFRelease(pixelBufferOut[0]);
      }
    }
    CFTypeRef v52 = 0;
LABEL_127:
    CVPixelBufferPoolRelease(*v39);
    *CFNumberRef v39 = 0;
    uint64_t v44 = CVPixelBufferPoolCreate(v12, 0, Mutable, (CVPixelBufferPoolRef *)(a1 + 16));
    if (v44)
    {
      uint64_t v16 = v44;
      goto LABEL_109;
    }
    if (!*v39)
    {
      uint64_t v16 = 4294954392;
      goto LABEL_109;
    }
    uint64_t v45 = CVPixelBufferPoolCreatePixelBuffer(v12, *v39, (CVPixelBufferRef *)&v52);
    if (v45)
    {
      uint64_t v16 = v45;
      FigSignalErrorAt();
      goto LABEL_109;
    }
    CFNumberRef v42 = (__CVBuffer *)v52;
LABEL_134:
    uint64_t v16 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(a1 + 24), (CVPixelBufferRef)v5, v42);
    if (v16) {
      goto LABEL_109;
    }
    CFTypeRef *v4 = v52;
    goto LABEL_117;
  }
LABEL_109:
  if (v52) {
    CFRelease(v52);
  }
LABEL_111:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v16;
}

uint64_t VTPixelBufferConformerCopyConformedTaggedBufferGroup(uint64_t a1, CMTaggedBufferGroupRef group, int a3, CFTypeRef *a4)
{
  uint64_t v4 = 0;
  value = 0;
  CFTypeRef cf = 0;
  if (group && a4)
  {
    CMItemCount Count = CMTaggedBufferGroupGetCount(group);
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFAllocatorRef v12 = Mutable;
      CFMutableArrayRef v13 = CFArrayCreateMutable(v10, 0, MEMORY[0x1E4F1D510]);
      if (v13)
      {
        BOOL v14 = v13;
        CVPixelBufferRef v22 = a4;
        if (Count < 1)
        {
LABEL_13:
          uint64_t v4 = MEMORY[0x199705780](v10, v12, v14, &cf);
          if (!v4)
          {
            *CVPixelBufferRef v22 = cf;
            CFTypeRef cf = 0;
          }
        }
        else
        {
          CFIndex v15 = 0;
          while (1)
          {
            CMTagCollectionRef TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(group, v15);
            if (!TagCollectionAtIndex) {
              break;
            }
            CMTagCollectionRef v17 = TagCollectionAtIndex;
            CVPixelBufferAtIndex = (void *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
            if (!CVPixelBufferAtIndex) {
              break;
            }
            uint64_t v19 = VTPixelBufferConformerCopyConformedPixelBuffer(a1, CVPixelBufferAtIndex, a3, (CFTypeRef *)&value);
            if (v19) {
              goto LABEL_23;
            }
            CFArrayAppendValue(v12, v17);
            CFArrayAppendValue(v14, value);
            if (value)
            {
              CFRelease(value);
              value = 0;
            }
            if (Count == ++v15) {
              goto LABEL_13;
            }
          }
          uint64_t v19 = FigSignalErrorAt();
LABEL_23:
          uint64_t v4 = v19;
        }
        CFRelease(v12);
        int v20 = v14;
      }
      else
      {
        uint64_t v4 = FigSignalErrorAt();
        int v20 = v12;
      }
      CFRelease(v20);
    }
    else
    {
      uint64_t v4 = FigSignalErrorAt();
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (value) {
    CFRelease(value);
  }
  return v4;
}

double vtPixelBufferConformerInit(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void vtPixelBufferConformerFinalize(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 40) = 0;
  }
  CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
}

__CFString *vtPixelBufferConformerCopyDesc(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  uint64_t v4 = (__CFString *)FigCFCopyCompactDescription();
  uint64_t v5 = FigCFCopyCompactDescription();
  uint64_t v6 = (const void *)v5;
  uint64_t v7 = @"<No attributes, conformer is pass thru>";
  if (a1[4]) {
    uint64_t v7 = v4;
  }
  CVPixelBufferRef v8 = @"<No color properties>";
  if (a1[5]) {
    CVPixelBufferRef v8 = (__CFString *)v5;
  }
  CFStringAppendFormat(Mutable, 0, @"<VTPixelBufferConformerRef %p>\n\tTarget Attributes:\n\t\t%@\nColor Properties:\n\t\t%@", a1, v7, v8);
  if (v4) {
    CFRelease(v4);
  }
  if (v6) {
    CFRelease(v6);
  }
  return Mutable;
}

CFNumberRef vtCopyPixelFormatTypeFromPixelBuffer(__CVBuffer *a1)
{
  OSType valuePtr = CVPixelBufferGetPixelFormatType(a1);
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
}

CFNumberRef vtCopyWidthFromPixelBuffer(__CVBuffer *a1)
{
  size_t Width = CVPixelBufferGetWidth(a1);
  if (Width >> 31) {
    return 0;
  }
  int valuePtr = Width;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
}

CFNumberRef vtCopyHeightFromPixelBuffer(__CVBuffer *a1)
{
  size_t Height = CVPixelBufferGetHeight(a1);
  if (Height >> 31) {
    return 0;
  }
  int valuePtr = Height;
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
}

CFDictionaryRef vtCopyIOSurfacePropertiesFromPixelBuffer()
{
  return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
}

uint64_t VTParavirtualizationGuestInstallHandlerForUUID(CFUUIDBytes *a1, const void *a2, const void *a3)
{
  CFUUIDRef v5 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *a1);
  if (a2)
  {
    if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce != -1) {
      dispatch_once(&vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce, &__block_literal_global_12);
    }
    uint64_t v6 = vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus;
    if (!vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
      if (!CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v5))
      {
        uint64_t v7 = malloc_type_calloc(1uLL, 0x28uLL, 0xA0040987D6AD5uLL);
        if (!v7) {
          goto LABEL_21;
        }
        CVPixelBufferRef v8 = _Block_copy(a2);
        *uint64_t v7 = v8;
        if (!v8) {
          goto LABEL_21;
        }
        CFTypeRef v9 = a3 ? CFRetain(a3) : 0;
        v7[1] = v9;
        uint64_t v10 = FigDispatchQueueCreateWithPriority();
        v7[2] = v10;
        if (v10 && (uint64_t v11 = FigDispatchQueueCreateWithPriority(), (v7[3] = v11) != 0))
        {
          uint64_t v12 = VTParavirtualizationReplyClerkCreate((uint64_t)"guest", v7 + 4);
          if (!v12)
          {
            uint64_t v6 = VTParavirtualizationGuestSupportRegisterGuestUUID();
            if (v6)
            {
LABEL_17:
              os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
              goto LABEL_18;
            }
            CFDictionarySetValue((CFMutableDictionaryRef)sVTParavirtualizationGuests, v5, v7);
LABEL_16:
            uint64_t v7 = 0;
            goto LABEL_17;
          }
        }
        else
        {
LABEL_21:
          uint64_t v12 = FigSignalErrorAt();
        }
        uint64_t v6 = v12;
        goto LABEL_17;
      }
      uint64_t v6 = FigSignalErrorAt();
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
  }
  uint64_t v7 = 0;
LABEL_18:
  vtParavirtualizationGuestFinalize((const void **)v7);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t VTParavirtualizationReplyClerkCreate(uint64_t a1, void *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (VTParavirtualizationReplyClerkGetTypeID_sRegisterVTParavirtualizationReplyClerkTypeOnce != -1) {
    dispatch_once_f(&VTParavirtualizationReplyClerkGetTypeID_sRegisterVTParavirtualizationReplyClerkTypeOnce, &VTParavirtualizationReplyClerkGetTypeID_sVTParavirtualizationReplyClerkTypeID, (dispatch_function_t)vtParavirtualizationReplyClerk_RegisterType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v6 = (void *)Instance;
    valueCallBacks.version = 0;
    valueCallBacks.retain = (CFDictionaryRetainCallBack)vtCloneParavirtualizationPendingReply;
    valueCallBacks.copyDescription = 0;
    valueCallBacks.equal = 0;
    valueCallBacks.release = (CFDictionaryReleaseCallBack)vtFreeParavirtualizationPendingReply;
    CFMutableDictionaryRef v7 = CFDictionaryCreateMutable(v4, 10, 0, &valueCallBacks);
    v6[5] = v7;
    if (v7)
    {
      uint64_t v8 = 0;
      v6[2] = a1;
      v6[4] = 100;
      *a2 = v6;
    }
    else
    {
      uint64_t v8 = FigSignalErrorAt();
      CFRelease(v6);
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void vtParavirtualizationGuestFinalize(const void **a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = *a1;
    if (v2)
    {
      _Block_release(v2);
      *a1 = 0;
    }
    uint64_t v3 = a1[2];
    if (v3)
    {
      dispatch_release(v3);
      a1[2] = 0;
    }
    CFAllocatorRef v4 = a1[3];
    if (v4)
    {
      dispatch_release(v4);
      a1[3] = 0;
    }
    CFUUIDRef v5 = a1[1];
    if (v5)
    {
      CFRelease(v5);
      a1[1] = 0;
    }
    uint64_t v6 = a1[4];
    if (v6) {
      CFRelease(v6);
    }
    free(a1);
  }
}

uint64_t VTParavirtualizationGuestRemoveHandlerForUUID(CFUUIDBytes *a1)
{
  CFUUIDRef v1 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *a1);
  if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce != -1) {
    dispatch_once(&vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce, &__block_literal_global_12);
  }
  uint64_t v2 = vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus;
  if (!vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
    CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v1);
    if (Value)
    {
      CFAllocatorRef v4 = Value;
      CFDictionaryRemoveValue((CFMutableDictionaryRef)sVTParavirtualizationGuests, v1);
      CFUUIDRef v5 = *((void *)v4 + 2);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __VTParavirtualizationGuestRemoveHandlerForUUID_block_invoke;
      block[3] = &__block_descriptor_tmp_23;
      block[4] = v4;
      dispatch_async(v5, block);
      uint64_t v6 = VTParavirtualizationGuestSupportDeregisterGuestUUID();
    }
    else
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    uint64_t v2 = v6;
    os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
  }
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

void __VTParavirtualizationGuestRemoveHandlerForUUID_block_invoke(uint64_t a1)
{
}

uint64_t VTParavirtualizationGuestSendMessageToHostAsync(OpaqueCMBlockBuffer *a1)
{
  return VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAsync(a1);
}

uint64_t VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAsync(OpaqueCMBlockBuffer *a1)
{
  uint64_t v7 = 0;
  if (a1)
  {
    if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce != -1) {
      dispatch_once(&vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce, &__block_literal_global_12);
    }
    uint64_t v2 = vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus;
    if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus) {
      return v2;
    }
    *(void *)&v6.byte0 = 0;
    *(void *)&v6.byte8 = 0;
    uint64_t MessageTypeAndFlagsAndGuestUUID = VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(a1, (_DWORD *)&v7 + 1, &v7, &v6);
    if (!MessageTypeAndFlagsAndGuestUUID)
    {
      if ((v7 & 1) == 0 && (v7 & 2) == 0)
      {
        CFUUIDRef v4 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6);
        os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
        if (CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v4))
        {
          os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
          uint64_t v2 = vtParavirtualizationGuestSendRawMessageBlockBufferToHost(a1);
          if (!v4) {
            return v2;
          }
        }
        else
        {
          uint64_t v2 = FigSignalErrorAt();
          os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
          if (!v4) {
            return v2;
          }
        }
        CFRelease(v4);
        return v2;
      }
      return FigSignalErrorAt();
    }
    return MessageTypeAndFlagsAndGuestUUID;
  }

  return FigSignalErrorAt();
}

uint64_t VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(OpaqueCMBlockBuffer *a1, _DWORD *a2, _DWORD *a3, void *a4)
{
  uint64_t v12 = 0;
  Dataint Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForTopLevelBoxWithType(a1, 0, DataLength, &v12, &v11);
  if (!result)
  {
    if (a2)
    {
      unsigned int destination = 0;
      uint64_t result = CMBlockBufferCopyDataBytes(a1, v12 + 8, 4uLL, &destination);
      if (result) {
        return result;
      }
      *a2 = bswap32(destination);
    }
    if (a3)
    {
      unsigned int destination = 0;
      uint64_t result = CMBlockBufferCopyDataBytes(a1, v12 + 12, 4uLL, &destination);
      if (result) {
        return result;
      }
      *a3 = bswap32(destination);
    }
    if (a4) {
      return CMBlockBufferCopyDataBytes(a1, v12 + 16, 0x10uLL, a4);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t vtParavirtualizationGuestSendRawMessageBlockBufferToHost(OpaqueCMBlockBuffer *a1)
{
  size_t v14 = 0;
  size_t lengthAtOffsetOut = 0;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(a1, 0, &lengthAtOffsetOut, &v14, 0);
  if (DataPointer)
  {
LABEL_16:
    uint64_t v12 = DataPointer;
    CFUUIDBytes v6 = 0;
    goto LABEL_14;
  }
  size_t v3 = lengthAtOffsetOut;
  if (lengthAtOffsetOut < v14)
  {
    uint64_t v4 = -1;
    size_t v5 = 16;
    while (1)
    {
      uint64_t DataPointer = CMBlockBufferGetDataPointer(a1, v3, &lengthAtOffsetOut, 0, 0);
      if (DataPointer) {
        goto LABEL_16;
      }
      v3 += lengthAtOffsetOut;
      v5 += 16;
      --v4;
      if (v3 >= v14)
      {
        CFUUIDBytes v6 = (char **)malloc_type_malloc(v5, 0x1050040717B85FCuLL);
        if (v4)
        {
          uint64_t v7 = -v4;
          goto LABEL_9;
        }
LABEL_12:
        uint64_t v11 = VTParavirtualizationGuestSupportSendRawMessageToHost();
        goto LABEL_13;
      }
    }
  }
  CFUUIDBytes v6 = (char **)malloc_type_malloc(0x10uLL, 0x1050040717B85FCuLL);
  uint64_t v7 = 1;
LABEL_9:
  size_t v8 = 0;
  CFTypeRef v9 = v6;
  uint64_t v10 = v7;
  while (1)
  {
    uint64_t v11 = CMBlockBufferGetDataPointer(a1, v8, &lengthAtOffsetOut, 0, v9);
    if (v11) {
      break;
    }
    v9[1] = (char *)lengthAtOffsetOut;
    v8 += lengthAtOffsetOut;
    v9 += 2;
    if (!--v10) {
      goto LABEL_12;
    }
  }
LABEL_13:
  uint64_t v12 = v11;
LABEL_14:
  free(v6);
  return v12;
}

uint64_t VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(OpaqueCMBlockBuffer *a1, uint64_t a2, void *a3)
{
  long long v4 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  return VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync(a1, 0, 0, &v4, a3);
}

uint64_t VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync(OpaqueCMBlockBuffer *a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  if (a1 && a5)
  {
    if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce != -1) {
      dispatch_once(&vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce, &__block_literal_global_12);
    }
    uint64_t v8 = vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus;
    if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus) {
      return v8;
    }
    *(void *)&v20.byte0 = 0;
    *(void *)&v20.byte8 = 0;
    uint64_t MessageTypeAndFlagsAndGuestUUID = VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(a1, (_DWORD *)&v21 + 1, &v21, &v20);
    if (!MessageTypeAndFlagsAndGuestUUID)
    {
      if ((v21 & 1) != 0 && (v21 & 0x10) == 0 && (v21 & 2) == 0)
      {
        CFUUIDRef v10 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v20);
        os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
        CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v10);
        if (Value)
        {
          uint64_t v12 = (const void *)Value[4];
          if (v12) {
            CFUUIDRef v13 = (const __CFUUID *)CFRetain(v12);
          }
          else {
            CFUUIDRef v13 = 0;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
          uint64_t v14 = VTParavirtualizationReplyClerkPrepareForReply((uint64_t)v13, a1, &v19);
          if (!v14)
          {
            uint64_t v14 = vtParavirtualizationGuestSendRawMessageBlockBufferToHost(a1);
            if (!v14)
            {
              long long v17 = *a4;
              uint64_t v18 = *((void *)a4 + 2);
              uint64_t v14 = VTParavirtualizationReplyClerkWaitForReply((uint64_t)v13, v19, (uint64_t)&v17, a5, 0, 0);
            }
          }
          uint64_t v8 = v14;
          if (v13)
          {
            VTParavirtualizationReplyClerkCleanUpReply((uint64_t)v13, v19);
            if (v10) {
              CFRelease(v10);
            }
            CFUUIDRef v15 = v13;
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v8 = FigSignalErrorAt();
          os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
        }
        if (v10)
        {
          CFUUIDRef v15 = v10;
LABEL_29:
          CFRelease(v15);
        }
        return v8;
      }
      return FigSignalErrorAt();
    }
    return MessageTypeAndFlagsAndGuestUUID;
  }

  return FigSignalErrorAt();
}

uint64_t VTParavirtualizationReplyClerkPrepareForReply(uint64_t a1, OpaqueCMBlockBuffer *a2, void *a3)
{
  CFUUIDBytes v6 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  if (*(unsigned char *)(a1 + 48))
  {
    os_unfair_lock_unlock(v6);
    return 4294948201;
  }
  else
  {
    CFTypeRef v9 = *(char **)(a1 + 32);
    uint64_t v8 = *(__CFDictionary **)(a1 + 40);
    *(void *)(a1 + 32) = v9 + 1;
    CFDictionarySetValue(v8, v9, 0);
    CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v9);
    os_unfair_lock_unlock(v6);
    uint64_t result = VTParavirtualizationMessageSetReplyIdentifier(a2, (unint64_t)v9);
    if (!result) {
      *a3 = v9;
    }
  }
  return result;
}

uint64_t VTParavirtualizationReplyClerkWaitForReply(uint64_t a1, const void *a2, uint64_t a3, void *a4, NSObject **a5, void *a6)
{
  if (vParavirtualizationGetReplyTimeoutInNanoSeconds_sCheckDefaultsWriteOnce != -1) {
    dispatch_once(&vParavirtualizationGetReplyTimeoutInNanoSeconds_sCheckDefaultsWriteOnce, &__block_literal_global_36);
  }
  int v12 = vParavirtualizationGetReplyTimeoutInNanoSeconds_sReplyTimeoutInNanoSeconds;
  if (*(unsigned char *)(a3 + 12))
  {
    CMTime time1 = *(CMTime *)a3;
    *(_OWORD *)&v18.value = kVTParavirtualizationDefaultReplyTimeout;
    v18.epoch = 0;
    if (CMTimeCompare(&time1, &v18))
    {
      CMTime time1 = *(CMTime *)a3;
      int v12 = (int)(CMTimeGetSeconds(&time1) * 1000000000.0);
    }
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  if (*(unsigned char *)(a1 + 48))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
    return 4294948201;
  }
  CFStringRef Value = (NSObject **)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
  if (!Value) {
    return FigSignalErrorAt();
  }
  CFUUIDRef v15 = *Value;
  dispatch_time_t v16 = dispatch_time(0, v12);
  if (dispatch_semaphore_wait(v15, v16) || *((unsigned char *)Value + 40)) {
    return FigSignalErrorAt();
  }
  *a4 = Value[1];
  Value[1] = 0;
  long long v17 = Value[3];
  if (a5)
  {
    *a5 = v17;
LABEL_16:
    Value[3] = 0;
    goto LABEL_17;
  }
  if (v17)
  {
    CFRelease(v17);
    goto LABEL_16;
  }
LABEL_17:
  if (a6) {
    *a6 = Value[4];
  }
  uint64_t result = 0;
  Value[4] = 0;
  return result;
}

uint64_t VTParavirtualizationReplyClerkCleanUpReply(uint64_t a1, const void *a2)
{
  long long v4 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), a2);
  os_unfair_lock_unlock(v4);
  return 0;
}

uint64_t VTParavirtualizationCopyNotificationQueueForGuestUUID(CFUUIDBytes *a1)
{
  CFUUIDRef v1 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *a1);
  os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
  CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v1);
  if (Value)
  {
    uint64_t v3 = *((void *)Value + 3);
    if (v3) {
      dispatch_retain(*((dispatch_object_t *)Value + 3));
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
  if (v1) {
    CFRelease(v1);
  }
  return v3;
}

BOOL VTParavirtualizationIsRunningInGuest()
{
  if (vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce != -1) {
    dispatch_once(&vtParavirtualizationGuestSetup_sVTParavirtualizationSetupOnce, &__block_literal_global_12);
  }
  return vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus == 0;
}

uint64_t VTParavirtualizationCreateMessageAndByteStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CMBlockBufferRef *a5, void *a6)
{
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t WritableForBlockBuffer = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0x10u, 0, &blockBufferOut);
  if (WritableForBlockBuffer) {
    goto LABEL_16;
  }
  uint64_t WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
  if (WritableForBlockBuffer) {
    goto LABEL_16;
  }
  uint64_t WritableForBlockBuffer = FigAtomWriterInitWithByteStream();
  if (WritableForBlockBuffer
    || (uint64_t WritableForBlockBuffer = FigAtomWriterBeginAtom(), WritableForBlockBuffer)
    || (uint64_t WritableForBlockBuffer = FigAtomWriterAppendData(), WritableForBlockBuffer)
    || (uint64_t WritableForBlockBuffer = FigAtomWriterAppendData(), WritableForBlockBuffer)
    || (uint64_t WritableForBlockBuffer = FigAtomWriterAppendData(), WritableForBlockBuffer)
    || (uint64_t WritableForBlockBuffer = FigAtomWriterAppendData(), WritableForBlockBuffer)
    || (uint64_t WritableForBlockBuffer = FigAtomWriterAppendData(), WritableForBlockBuffer)
    || (uint64_t WritableForBlockBuffer = FigAtomWriterEndAtom(), WritableForBlockBuffer))
  {
LABEL_16:
    uint64_t v9 = WritableForBlockBuffer;
  }
  else
  {
    *a5 = blockBufferOut;
    CMBlockBufferRef blockBufferOut = 0;
    uint64_t v9 = 0;
    if (!a6) {
      return v9;
    }
    *a6 = 0;
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v9;
}

uint64_t VTParavirtualizationCreateReplyAndByteStream(OpaqueCMBlockBuffer *a1, uint64_t a2, CMBlockBufferRef *a3, void *a4)
{
  v10[1] = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  v10[0] = 0;
  uint64_t result = VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(a1, (_DWORD *)&v11 + 1, &v11, v10);
  if (!result)
  {
    uint64_t result = VTParavirtualizationMessageGetReplyIdentifier(a1, &v9);
    if (!result) {
      return VTParavirtualizationCreateMessageAndByteStream(HIDWORD(v11), a2, (uint64_t)v10, v9, a3, a4);
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetReplyIdentifier(OpaqueCMBlockBuffer *a1, void *a2)
{
  uint64_t v8 = 0;
  unint64_t destination = 0;
  Dataint Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForTopLevelBoxWithType(a1, 0, DataLength, &v8, &v7);
  if (!result)
  {
    uint64_t result = CMBlockBufferCopyDataBytes(a1, v8 + 32, 8uLL, &destination);
    if (!result) {
      *a2 = bswap64(destination);
    }
  }
  return result;
}

uint64_t vtpvScanForTopLevelBoxWithType(CMBlockBufferRef theSourceBuffer, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  if (a3 < 8) {
    return 4294948203;
  }
  uint64_t v20 = v5;
  uint64_t v21 = v6;
  uint64_t v13 = 0;
  while (1)
  {
    unsigned int destination = 0;
    uint64_t result = CMBlockBufferCopyDataBytes(theSourceBuffer, v13 + a2, 4uLL, &destination);
    if (result) {
      break;
    }
    unint64_t v14 = bswap32(destination);
    unsigned int destination = v14;
    if (v14 < 8 || a3 - v13 < v14) {
      return FigSignalErrorAt();
    }
    unsigned int v18 = 0;
    uint64_t result = CMBlockBufferCopyDataBytes(theSourceBuffer, v13 + a2 + 4, 4uLL, &v18);
    if (result) {
      return result;
    }
    unsigned int v16 = v18;
    unsigned int v18 = bswap32(v18);
    uint64_t v17 = destination;
    if (v16 == 1987081334)
    {
      if (destination > 0x2F)
      {
        uint64_t result = 0;
        *a4 = v13;
        *a5 = v17;
        return result;
      }
      return FigSignalErrorAt();
    }
    v13 += destination;
    if (v13 + 8 > a3) {
      return 4294948203;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageChangeMessageFlags(OpaqueCMBlockBuffer *a1, int a2, int a3)
{
  uint64_t v11 = 0;
  unsigned int destination = 0;
  Dataint Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForTopLevelBoxWithType(a1, 0, DataLength, &v11, &v10);
  if (!result)
  {
    size_t v8 = v11 + 12;
    uint64_t result = CMBlockBufferCopyDataBytes(a1, v11 + 12, 4uLL, &destination);
    if (!result)
    {
      unsigned int destination = bswap32(bswap32(destination) & ~a3 | a3 & a2);
      return CMBlockBufferReplaceDataBytes(&destination, a1, v8, 4uLL);
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageSetReplyIdentifier(OpaqueCMBlockBuffer *a1, unint64_t a2)
{
  uint64_t v7 = 0;
  unint64_t sourceBytes = bswap64(a2);
  Dataint Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForTopLevelBoxWithType(a1, 0, DataLength, &v7, &v6);
  if (!result) {
    return CMBlockBufferReplaceDataBytes(&sourceBytes, a1, v7 + 32, 8uLL);
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendCFPropertyList()
{
  uint64_t result = FigAtomWriterInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result)
      {
        uint64_t result = FigAtomWriterAppendData();
        if (!result)
        {
          uint64_t result = FigCreateCFDataFromCFPropertyList();
          if (!result)
          {
            CFDataGetBytePtr(0);
            CFDataGetLength(0);
            uint64_t result = FigAtomWriterAppendData();
            if (!result) {
              return FigAtomWriterEndAtom();
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL VTParavirtualizationMessageContainsParameter(OpaqueCMBlockBuffer *a1, int a2, int a3)
{
  uint64_t v9 = 0;
  Dataint Length = CMBlockBufferGetDataLength(a1);
  if (vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, a3, &v10, &v9)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v9 == 0;
  }
  return !v7;
}

uint64_t vtpvScanForParameterBoxWithType(CMBlockBufferRef theSourceBuffer, uint64_t a2, unint64_t a3, int a4, int a5, void *a6, void *a7)
{
  if (a3 < 0x10) {
    return 0;
  }
  uint64_t v26 = v7;
  uint64_t v27 = v8;
  uint64_t v17 = 0;
  while (1)
  {
    unsigned int destination = 0;
    uint64_t v18 = v17 + a2;
    uint64_t result = CMBlockBufferCopyDataBytes(theSourceBuffer, v17 + a2, 4uLL, &destination);
    if (result) {
      break;
    }
    unint64_t v19 = bswap32(destination);
    unsigned int destination = v19;
    if (v19 < 8 || a3 - v17 < v19) {
      return FigSignalErrorAt();
    }
    unsigned int v24 = 0;
    uint64_t result = CMBlockBufferCopyDataBytes(theSourceBuffer, v18 + 4, 4uLL, &v24);
    if (result) {
      return result;
    }
    unsigned int v21 = v24;
    unsigned int v24 = bswap32(v24);
    if (v21 == 1634886000)
    {
      unsigned int v23 = 0;
      uint64_t result = CMBlockBufferCopyDataBytes(theSourceBuffer, v18 + 8, 4uLL, &v23);
      if (result) {
        return result;
      }
      unsigned int v23 = bswap32(v23);
      if (v23 == a4)
      {
        unsigned int v22 = 0;
        uint64_t result = CMBlockBufferCopyDataBytes(theSourceBuffer, v18 + 12, 4uLL, &v22);
        if (result) {
          return result;
        }
        unsigned int v22 = bswap32(v22);
        if (v22 == a5)
        {
          uint64_t result = 0;
          *a6 = v17;
          *a7 = destination;
          return result;
        }
        return FigSignalErrorAt();
      }
    }
    v17 += destination;
    if (v17 + 16 > a3) {
      return 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageCopyCFPropertyList(OpaqueCMBlockBuffer *a1, int a2, CFTypeRef *a3)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  CFTypeRef cf = 0;
  Dataint Length = CMBlockBufferGetDataLength(a1);
  uint64_t DataPointer = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1030777971, &v17, &v16);
  if (DataPointer)
  {
LABEL_14:
    uint64_t v12 = DataPointer;
    uint64_t v10 = 0;
    goto LABEL_18;
  }
  if (v16)
  {
    size_t v8 = v16 - 16;
    if (v16 == 16)
    {
      uint64_t v10 = 0;
      CFTypeRef cf = 0;
      goto LABEL_12;
    }
    size_t v9 = v17 + 16;
    if (CMBlockBufferIsRangeContiguous(a1, v17 + 16, v8))
    {
      unint64_t v14 = 0;
      uint64_t DataPointer = CMBlockBufferGetDataPointer(a1, v9, 0, 0, &v14);
      if (!DataPointer)
      {
        uint64_t DataPointer = FigCreateCFPropertyListFromData();
        if (!DataPointer)
        {
          uint64_t v10 = 0;
LABEL_12:
          uint64_t v12 = 0;
          *a3 = cf;
          CFTypeRef cf = 0;
          goto LABEL_13;
        }
      }
      goto LABEL_14;
    }
    uint64_t v10 = malloc_type_malloc(v8, 0xBE4176BBuLL);
    if (v10)
    {
      uint64_t CFPropertyListFromData = CMBlockBufferCopyDataBytes(a1, v9, v8, v10);
      if (!CFPropertyListFromData)
      {
        uint64_t CFPropertyListFromData = FigCreateCFPropertyListFromData();
        if (!CFPropertyListFromData) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      uint64_t CFPropertyListFromData = FigSignalErrorAt();
    }
    uint64_t v12 = CFPropertyListFromData;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v10 = 0;
    *a3 = 0;
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
LABEL_13:
  free(v10);
  return v12;
}

uint64_t VTParavirtualizationMessageAppendCFData(uint64_t a1, uint64_t a2, const __CFData *a3)
{
  uint64_t result = FigAtomWriterInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result)
      {
        uint64_t result = FigAtomWriterAppendData();
        if (!result)
        {
          CFDataGetBytePtr(a3);
          CFDataGetLength(a3);
          uint64_t result = FigAtomWriterAppendData();
          if (!result) {
            return FigAtomWriterEndAtom();
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageCopyCFData(OpaqueCMBlockBuffer *a1, int a2, __CFData **a3)
{
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  CFMutableArrayRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex v7 = 0;
  uint64_t v8 = 0;
  int v21 = 0;
  while (1)
  {
    uint64_t MessageFlagsStartingAtOffset = vtParavirtualizationMessageGetMessageFlagsStartingAtOffset(a1, v8, &v21);
    if (MessageFlagsStartingAtOffset) {
      break;
    }
    Dataint Length = CMBlockBufferGetDataLength(a1);
    uint64_t MessageFlagsStartingAtOffset = vtpvScanForParameterBoxWithType(a1, v8, DataLength, a2, 1029988724, &v23, &v22);
    if (MessageFlagsStartingAtOffset) {
      break;
    }
    if (!v22)
    {
LABEL_16:
      uint64_t v19 = 0;
      *a3 = 0;
      goto LABEL_19;
    }
    if (v22 <= 0x10)
    {
LABEL_17:
      uint64_t MessageFlagsStartingAtOffset = FigSignalErrorAt();
      break;
    }
    CFIndex v7 = v7 + v22 - 16;
    v8 += v22 + v23;
    if ((v21 & 0x10) == 0)
    {
      CFDataSetLength(Mutable, v7);
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      while (1)
      {
        uint64_t MessageFlagsStartingAtOffset = vtParavirtualizationMessageGetMessageFlagsStartingAtOffset(a1, v11, &v21);
        if (MessageFlagsStartingAtOffset) {
          goto LABEL_18;
        }
        size_t v13 = CMBlockBufferGetDataLength(a1);
        uint64_t MessageFlagsStartingAtOffset = vtpvScanForParameterBoxWithType(a1, v11, v13, a2, 1029988724, &v23, &v22);
        if (MessageFlagsStartingAtOffset) {
          goto LABEL_18;
        }
        unint64_t v14 = v22;
        if (!v22) {
          goto LABEL_16;
        }
        unint64_t v15 = v22 - 16;
        if (v22 <= 0x10) {
          goto LABEL_17;
        }
        uint64_t v16 = v23;
        size_t v17 = v11 + v23 + 16;
        MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
        uint64_t MessageFlagsStartingAtOffset = CMBlockBufferCopyDataBytes(a1, v17, v14 - 16, &MutableBytePtr[v12]);
        if (MessageFlagsStartingAtOffset) {
          goto LABEL_18;
        }
        v12 += v15;
        v11 += v14 + v16;
        if ((v21 & 0x10) == 0)
        {
          uint64_t v19 = 0;
          *a3 = Mutable;
          return v19;
        }
      }
    }
  }
LABEL_18:
  uint64_t v19 = MessageFlagsStartingAtOffset;
LABEL_19:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v19;
}

uint64_t vtParavirtualizationMessageGetMessageFlagsStartingAtOffset(OpaqueCMBlockBuffer *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v10 = 0;
  unsigned int destination = 0;
  Dataint Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForTopLevelBoxWithType(a1, a2, DataLength, &v10, &v9);
  if (!result)
  {
    uint64_t result = CMBlockBufferCopyDataBytes(a1, a2 + v10 + 12, 4uLL, &destination);
    if (!result) {
      *a3 = bswap32(destination);
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageCFDataRequiresFragmentation(uint64_t a1, unint64_t a2, const __CFData *a3, BOOL *a4)
{
  uint64_t v17 = 0;
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v9 + 24);
  if (!v10) {
    return 4294954514;
  }
  uint64_t result = v10(a1, 0, &v17);
  if (!result)
  {
    if (v17 + 17 <= a2)
    {
      unint64_t Length = CFDataGetLength(a3);
      unint64_t v14 = a2 - v17 - 16;
      if (v14 >= Length) {
        uint64_t v15 = Length;
      }
      else {
        uint64_t v15 = a2 - v17 - 16;
      }
      if (!v15) {
        return FigSignalErrorAt();
      }
      unint64_t v16 = Length;
      uint64_t result = 0;
      BOOL v12 = v16 > v14;
    }
    else
    {
      uint64_t result = 0;
      BOOL v12 = 1;
    }
    *a4 = v12;
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendCFDataWithLimitFromOffset(uint64_t a1, int a2, unint64_t a3, CFDataRef theData, CFIndex *a5)
{
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  uint64_t v18 = 0;
  CFIndex Length = CFDataGetLength(theData);
  unint64_t v10 = Length - *a5;
  if (Length == *a5) {
    return 0;
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  size_t v13 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v12 + 24);
  if (!v13) {
    return 4294954514;
  }
  uint64_t result = v13(a1, 0, &v18);
  if (!result)
  {
    if (v18 + 17 > a3) {
      return 0;
    }
    unint64_t v15 = a3 - v18 - 16;
    if (v15 >= v10) {
      uint64_t v16 = v10;
    }
    else {
      uint64_t v16 = a3 - v18 - 16;
    }
    if (v16)
    {
      uint64_t result = FigAtomWriterInitWithByteStream();
      if (!result)
      {
        uint64_t result = FigAtomWriterBeginAtom();
        if (!result)
        {
          uint64_t result = FigAtomWriterAppendData();
          if (!result)
          {
            uint64_t result = FigAtomWriterAppendData();
            if (!result)
            {
              CFDataGetBytePtr(theData);
              uint64_t result = FigAtomWriterAppendData();
              if (!result)
              {
                uint64_t result = FigAtomWriterEndAtom();
                if (!result)
                {
                  if (v10 <= v15) {
                    CFIndex v17 = CFDataGetLength(theData);
                  }
                  else {
                    CFIndex v17 = *a5 + v16;
                  }
                  uint64_t result = 0;
                  *a5 = v17;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageCopyCFDictionary(OpaqueCMBlockBuffer *a1, int a2, void *a3)
{
  CFTypeRef cf = 0;
  uint64_t v4 = VTParavirtualizationMessageCopyCFPropertyList(a1, a2, &cf);
  CFTypeRef v5 = cf;
  if (v4)
  {
    uint64_t v7 = v4;
    if (!cf) {
      return v7;
    }
    goto LABEL_9;
  }
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 != CFDictionaryGetTypeID())
    {
      uint64_t v7 = FigSignalErrorAt();
LABEL_9:
      CFRelease(v5);
      return v7;
    }
  }
  uint64_t v7 = 0;
  *a3 = v5;
  return v7;
}

uint64_t VTParavirtualizationMessageAppendCFUUID(uint64_t a1, uint64_t a2, const __CFUUID *a3)
{
  uint64_t result = FigAtomWriterInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result)
      {
        uint64_t result = FigAtomWriterAppendData();
        if (!result)
        {
          CFUUIDGetUUIDBytes(a3);
          uint64_t result = FigAtomWriterAppendData();
          if (!result) {
            return FigAtomWriterEndAtom();
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageCopyCFUUID(OpaqueCMBlockBuffer *a1, int a2, CFUUIDRef *a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  *(void *)&v9.byte0 = 0;
  *(void *)&v9.byte8 = 0;
  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1031107945, &v11, &v10);
  if (!result)
  {
    if (v10 == 32)
    {
      uint64_t result = CMBlockBufferCopyDataBytes(a1, v11 + 16, 0x10uLL, &v9);
      if (!result)
      {
        CFUUIDRef v8 = CFUUIDCreateFromUUIDBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v9);
        uint64_t result = 0;
        *a3 = v8;
      }
    }
    else if (v10)
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendCFUUIDArray(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t result = FigAtomWriterInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result)
      {
        uint64_t result = FigAtomWriterAppendData();
        if (!result)
        {
          CFIndex Count = CFArrayGetCount(a3);
          if (Count < 1)
          {
            return FigAtomWriterEndAtom();
          }
          else
          {
            CFIndex v6 = Count;
            CFIndex v7 = 0;
            while (1)
            {
              CFUUIDRef ValueAtIndex = (const __CFUUID *)CFArrayGetValueAtIndex(a3, v7);
              if (!ValueAtIndex) {
                break;
              }
              CFUUIDRef v9 = ValueAtIndex;
              CFTypeID v10 = CFGetTypeID(ValueAtIndex);
              if (v10 != CFUUIDGetTypeID()) {
                break;
              }
              CFUUIDGetUUIDBytes(v9);
              uint64_t result = FigAtomWriterAppendData();
              if (result) {
                return result;
              }
              if (v6 == ++v7) {
                return FigAtomWriterEndAtom();
              }
            }
            return FigSignalErrorAt();
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageCopyCFUUIDArray(OpaqueCMBlockBuffer *a1, int a2, __CFArray **a3)
{
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  *(void *)&v17.byte0 = 0;
  *(void *)&v17.byte8 = 0;
  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  uint64_t v7 = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1031104811, &v19, &v18);
  if (v7) {
    return v7;
  }
  if (!v18)
  {
    uint64_t v15 = 0;
    *a3 = 0;
    return v15;
  }
  if (v18 > 0xF)
  {
    unint64_t v8 = v18 - 16;
    if (v18 == ((v18 - 16) & 0xFFFFFFFFFFFFFFF0) + 16)
    {
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8 >> 4, MEMORY[0x1E4F1D510]);
      if (v8 < 0x10)
      {
LABEL_14:
        uint64_t v15 = 0;
        *a3 = Mutable;
      }
      else
      {
        if (v8 >> 4 <= 1) {
          uint64_t v11 = 1;
        }
        else {
          uint64_t v11 = v8 >> 4;
        }
        size_t v12 = v19 + 16;
        while (1)
        {
          uint64_t v13 = CMBlockBufferCopyDataBytes(a1, v12, 0x10uLL, &v17);
          if (v13) {
            break;
          }
          CFUUIDRef v14 = CFUUIDCreateFromUUIDBytes(v9, v17);
          CFArrayAppendValue(Mutable, v14);
          if (v14) {
            CFRelease(v14);
          }
          v12 += 16;
          if (!--v11) {
            goto LABEL_14;
          }
        }
        uint64_t v15 = v13;
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      return v15;
    }
  }

  return FigSignalErrorAt();
}

uint64_t VTParavirtualizationMessageAppendFigTagCollectionArray(uint64_t a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t appended = FigAtomWriterInitWithByteStream();
  if (!appended)
  {
    uint64_t appended = FigAtomWriterBeginAtom();
    if (!appended)
    {
      uint64_t appended = FigAtomWriterAppendData();
      if (!appended)
      {
        uint64_t appended = FigAtomWriterAppendData();
        if (!appended)
        {
          CFIndex Count = CFArrayGetCount(a3);
          if (Count < 1)
          {
            return FigAtomWriterEndAtom();
          }
          else
          {
            CFIndex v6 = Count;
            CFIndex v7 = 0;
            uint64_t v8 = *MEMORY[0x1E4F1CF80];
            while (1)
            {
              uint64_t appended = FigAtomWriterInitWithParent();
              if (appended) {
                break;
              }
              uint64_t appended = FigAtomWriterBeginAtom();
              if (appended) {
                break;
              }
              CFUUIDRef ValueAtIndex = CFArrayGetValueAtIndex(a3, v7);
              if (!ValueAtIndex) {
                return FigSignalErrorAt();
              }
              CFTypeID v10 = ValueAtIndex;
              CFTypeID v11 = CFGetTypeID(ValueAtIndex);
              if (v11 != FigTagCollectionGetTypeID()) {
                return FigSignalErrorAt();
              }
              CFDataRef v12 = (const __CFData *)MEMORY[0x199705710](v10, v8);
              CFDataGetBytePtr(v12);
              CFDataGetLength(v12);
              uint64_t v13 = FigAtomWriterAppendData();
              if (v13 || (uint64_t v13 = FigAtomWriterEndAtom(), v13))
              {
                uint64_t v14 = v13;
                if (v12) {
                  CFRelease(v12);
                }
                return v14;
              }
              if (v12) {
                CFRelease(v12);
              }
              if (v6 == ++v7) {
                return FigAtomWriterEndAtom();
              }
            }
          }
        }
      }
    }
  }
  return appended;
}

uint64_t VTParavirtualizationMessageCopyFigTagCollectionArray(OpaqueCMBlockBuffer *a1, int a2, void *a3)
{
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v13 = 0u;
  value = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFMutableArrayRef v7 = Mutable;
    DataCFIndex Length = CMBlockBufferGetDataLength(a1);
    CurrentAtomTypeAndDataCFIndex Length = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1031037739, &v28, &v27);
    if (!CurrentAtomTypeAndDataLength)
    {
      if (!v27)
      {
        uint64_t v11 = 0;
        *a3 = 0;
        goto LABEL_14;
      }
      if (v27 <= 0xF
        || (CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamInitWithBBuf(), !CurrentAtomTypeAndDataLength)
        && (CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamInitWithParent(), !CurrentAtomTypeAndDataLength)
        && (CurrentAtomTypeAndDataCFIndex Length = FigAtomStreamGetCurrentAtomTypeAndDataLength(),
            !CurrentAtomTypeAndDataLength))
      {
        CurrentAtomTypeAndDataCFIndex Length = FigSignalErrorAt();
      }
    }
    uint64_t v11 = CurrentAtomTypeAndDataLength;
LABEL_14:
    CFRelease(v7);
    goto LABEL_9;
  }
  uint64_t v11 = FigSignalErrorAt();
LABEL_9:
  if (value) {
    CFRelease(value);
  }
  return v11;
}

uint64_t VTParavirtualizationMessageAppendSInt32()
{
  uint64_t result = FigAtomWriterInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result)
      {
        uint64_t result = FigAtomWriterAppendData();
        if (!result)
        {
          uint64_t result = FigAtomWriterAppendData();
          if (!result) {
            return FigAtomWriterEndAtom();
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetSInt32(OpaqueCMBlockBuffer *a1, int a2, _DWORD *a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int destination = 0;
  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1030959922, &v10, &v9);
  if (!result)
  {
    if (v9 == 20)
    {
      uint64_t result = CMBlockBufferCopyDataBytes(a1, v10 + 16, 4uLL, &destination);
      if (!result) {
        *a3 = bswap32(destination);
      }
    }
    else if (v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendUInt32()
{
  uint64_t result = FigAtomWriterInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result)
      {
        uint64_t result = FigAtomWriterAppendData();
        if (!result)
        {
          uint64_t result = FigAtomWriterAppendData();
          if (!result) {
            return FigAtomWriterEndAtom();
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetUInt32(OpaqueCMBlockBuffer *a1, int a2, _DWORD *a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unsigned int destination = 0;
  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1031090994, &v10, &v9);
  if (!result)
  {
    if (v9 == 20)
    {
      uint64_t result = CMBlockBufferCopyDataBytes(a1, v10 + 16, 4uLL, &destination);
      if (!result) {
        *a3 = bswap32(destination);
      }
    }
    else if (v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendSInt64()
{
  uint64_t result = FigAtomWriterInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result)
      {
        uint64_t result = FigAtomWriterAppendData();
        if (!result)
        {
          uint64_t result = FigAtomWriterAppendData();
          if (!result) {
            return FigAtomWriterEndAtom();
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetSInt64(OpaqueCMBlockBuffer *a1, int a2, void *a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t destination = 0;
  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1030960692, &v10, &v9);
  if (!result)
  {
    if (v9 == 24)
    {
      uint64_t result = CMBlockBufferCopyDataBytes(a1, v10 + 16, 8uLL, &destination);
      if (!result) {
        *a3 = bswap64(destination);
      }
    }
    else if (v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendCMFormatDescription(uint64_t a1, uint64_t a2, const opaqueCMFormatDescription *a3)
{
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t appended = FigAtomWriterInitWithByteStream();
  if (!appended)
  {
    uint64_t appended = FigAtomWriterBeginAtom();
    if (!appended)
    {
      uint64_t appended = FigAtomWriterAppendData();
      if (!appended)
      {
        uint64_t appended = FigAtomWriterAppendData();
        if (!appended)
        {
          CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
          uint64_t appended = CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(v5, a3, SystemEncoding, 0, &blockBufferOut);
          if (!appended)
          {
            CMBlockBufferGetDataLength(blockBufferOut);
            uint64_t appended = FigAtomWriterAppendBlockBufferData();
            if (!appended) {
              uint64_t appended = FigAtomWriterEndAtom();
            }
          }
        }
      }
    }
  }
  uint64_t v7 = appended;
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v7;
}

uint64_t VTParavirtualizationMessageCopyCMFormatDescription(OpaqueCMBlockBuffer *a1, int a2, CFTypeRef *a3)
{
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  CFTypeRef cf = 0;
  CMBlockBufferRef blockBufferOut = 0;
  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  uint64_t v7 = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1030120563, &v16, &v15);
  if (v7) {
    goto LABEL_14;
  }
  if (!v15)
  {
    uint64_t v11 = 0;
    *a3 = 0;
    goto LABEL_7;
  }
  if (v15 <= 0x65)
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_14;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v7 = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, v16 + 16, v15 - 16, 0, &blockBufferOut);
  if (v7)
  {
LABEL_14:
    uint64_t v11 = v7;
    goto LABEL_7;
  }
  uint64_t v9 = blockBufferOut;
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  uint64_t v11 = CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer(v8, v9, SystemEncoding, 0, (CMVideoFormatDescriptionRef *)&cf);
  if (!v11)
  {
    *a3 = cf;
    CFTypeRef cf = 0;
  }
LABEL_7:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

uint64_t VTParavirtualizationMessageAppendCMSampleBuffer(uint64_t a1, uint64_t a2, int a3, opaqueCMSampleBuffer *a4, CFTypeRef *a5)
{
  uint64_t v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  CMBlockBufferRef theBuffer = 0;
  uint64_t appended = FigAtomWriterInitWithByteStream();
  if (!appended)
  {
    uint64_t appended = FigAtomWriterBeginAtom();
    if (!appended)
    {
      uint64_t appended = FigAtomWriterAppendData();
      if (!appended)
      {
        uint64_t appended = FigAtomWriterAppendData();
        if (!appended)
        {
          if (a3)
          {
            uint64_t appended = VTParavirtualizationCreateSerializedAtomDataBlockBufferForSampleBuffer(*MEMORY[0x1E4F1CF80], *MEMORY[0x1E4F1CF80], a4, a5, &theBuffer);
            if (!appended)
            {
              CMBlockBufferGetDataLength(theBuffer);
              uint64_t appended = FigAtomWriterAppendBlockBufferData();
              if (!appended) {
                uint64_t appended = FigAtomWriterEndAtom();
              }
            }
          }
          else
          {
            uint64_t appended = FigSignalErrorAt();
          }
        }
      }
    }
  }
  uint64_t v9 = appended;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v9;
}

uint64_t VTParavirtualizationMessageAppendCMSampleBufferRemainderDataWithLimitAndCopyRemainingData(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, CMBlockBufferRef *a5)
{
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  uint64_t v18 = 0;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v10 + 24);
  if (!v11) {
    return 4294954514;
  }
  uint64_t result = v11(a1, 0, &v18);
  if (result) {
    return result;
  }
  if (v18 + 17 > a3)
  {
    long long v13 = (OpaqueCMBlockBuffer *)CFRetain(a4);
    uint64_t result = 0;
    *a5 = v13;
    return result;
  }
  DataCFIndex Length = CMBlockBufferGetDataLength((CMBlockBufferRef)a4);
  size_t v15 = DataLength;
  unint64_t v16 = a3 - v18 - 16;
  if (v16 >= DataLength) {
    size_t v17 = DataLength;
  }
  else {
    size_t v17 = a3 - v18 - 16;
  }
  uint64_t result = FigAtomWriterInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result)
      {
        uint64_t result = FigAtomWriterAppendData();
        if (!result)
        {
          uint64_t result = FigAtomWriterAppendBlockBufferData();
          if (!result)
          {
            uint64_t result = FigAtomWriterEndAtom();
            if (!result)
            {
              if (v15 <= v16)
              {
                *a5 = 0;
              }
              else
              {
                uint64_t result = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CMBlockBufferRef)a4, v17, v15 - v17, 0, a5);
                if (result) {
                  return result;
                }
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendCMSampleBufferWithLimitAndCopyRemainingData(uint64_t a1, uint64_t a2, int a3, unint64_t a4, opaqueCMSampleBuffer *a5, CFTypeRef *a6, CMBlockBufferRef *a7)
{
  CFTypeRef cf = 0;
  if (a3)
  {
    uint64_t SerializedAtomDataBlockBufferForSampleBuffer = VTParavirtualizationCreateSerializedAtomDataBlockBufferForSampleBuffer(*MEMORY[0x1E4F1CF80], *MEMORY[0x1E4F1CF80], a5, a6, (CMBlockBufferRef *)&cf);
    CFTypeRef v12 = cf;
    if (SerializedAtomDataBlockBufferForSampleBuffer)
    {
      uint64_t appended = SerializedAtomDataBlockBufferForSampleBuffer;
      if (!cf) {
        return appended;
      }
    }
    else
    {
      uint64_t appended = VTParavirtualizationMessageAppendCMSampleBufferRemainderDataWithLimitAndCopyRemainingData(a1, a2, a4, (void *)cf, a7);
      CFTypeRef v12 = cf;
      if (!cf) {
        return appended;
      }
    }
    CFRelease(v12);
    return appended;
  }

  return FigSignalErrorAt();
}

uint64_t VTParavirtualizationMessageCopyCMSampleBuffer(OpaqueCMBlockBuffer *a1, int a2, int a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  uint64_t v12 = 0;
  long long v13 = 0;
  int v25 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  CMBlockBufferRef theBuffer = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    uint64_t MessageFlagsStartingAtOffset = vtParavirtualizationMessageGetMessageFlagsStartingAtOffset(a1, v12, &v25);
    if (MessageFlagsStartingAtOffset) {
      goto LABEL_20;
    }
    DataCFIndex Length = CMBlockBufferGetDataLength(a1);
    uint64_t MessageFlagsStartingAtOffset = vtpvScanForParameterBoxWithType(a1, v12, DataLength, a2, 1030972006, &v24, &v23);
    if (MessageFlagsStartingAtOffset) {
      goto LABEL_20;
    }
    if (!v23)
    {
      uint64_t SampleBufferFromSerializedAtomDataBlockBuffer = 0;
      *a6 = 0;
      goto LABEL_21;
    }
    if (v23 <= 0x10) {
      goto LABEL_19;
    }
    uint64_t MessageFlagsStartingAtOffset = CMBlockBufferCreateWithBufferReference(v14, a1, v12 + v24 + 16, v23 - 16, 0, &blockBufferOut);
    if (MessageFlagsStartingAtOffset) {
      goto LABEL_20;
    }
    CMBlockBufferRef v17 = blockBufferOut;
    if (v13)
    {
      uint64_t MessageFlagsStartingAtOffset = CMBlockBufferAppendBufferReference(v13, blockBufferOut, 0, 0, 0);
      if (MessageFlagsStartingAtOffset) {
        goto LABEL_20;
      }
      if (blockBufferOut)
      {
        CFRelease(blockBufferOut);
        CMBlockBufferRef blockBufferOut = 0;
      }
    }
    else
    {
      CMBlockBufferRef blockBufferOut = 0;
      long long v13 = v17;
    }
    v12 += v24 + v23;
  }
  while ((v25 & 0x10) != 0);
  if (CMBlockBufferIsRangeContiguous(v13, 0, 0))
  {
    CMBlockBufferRef theBuffer = (CMBlockBufferRef)CFRetain(v13);
    goto LABEL_16;
  }
  uint64_t MessageFlagsStartingAtOffset = CMBlockBufferCreateContiguous(v14, v13, v14, 0, 0, 0, 0, &theBuffer);
  if (MessageFlagsStartingAtOffset)
  {
LABEL_20:
    uint64_t SampleBufferFromSerializedAtomDataBlockBuffer = MessageFlagsStartingAtOffset;
    goto LABEL_21;
  }
LABEL_16:
  if (!a3)
  {
LABEL_19:
    uint64_t MessageFlagsStartingAtOffset = FigSignalErrorAt();
    goto LABEL_20;
  }
  uint64_t SampleBufferFromSerializedAtomDataBlockBuffer = VTParavirtualizationCreateSampleBufferFromSerializedAtomDataBlockBuffer((int)v14, theBuffer, 0, a4, a5, (uint64_t)&cf);
  if (!SampleBufferFromSerializedAtomDataBlockBuffer)
  {
    *a6 = cf;
    CFTypeRef cf = 0;
  }
LABEL_21:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  return SampleBufferFromSerializedAtomDataBlockBuffer;
}

uint64_t VTParavirtualizationMessageAppendCMVideoDimensions()
{
  uint64_t result = FigAtomWriterInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result)
      {
        uint64_t result = FigAtomWriterAppendData();
        if (!result)
        {
          uint64_t result = FigAtomWriterAppendData();
          if (!result) {
            return FigAtomWriterEndAtom();
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetCMVideoDimensions(OpaqueCMBlockBuffer *a1, int a2, int8x8_t *a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int8x8_t destination = 0;
  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1031239784, &v10, &v9);
  if (!result)
  {
    if (v9 == 24)
    {
      uint64_t result = CMBlockBufferCopyDataBytes(a1, v10 + 16, 8uLL, &destination);
      if (!result) {
        *a3 = vrev32_s8(destination);
      }
    }
    else if (v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendCMTime()
{
  uint64_t result = FigAtomWriterInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result)
      {
        uint64_t result = FigAtomWriterAppendData();
        if (!result)
        {
          uint64_t result = FigAtomWriterAppendData();
          if (!result) {
            return FigAtomWriterEndAtom();
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetCMTime(OpaqueCMBlockBuffer *a1, int a2, int8x8_t *a3)
{
  uint64_t v14 = 0;
  uint64_t v13 = 0;
  long long v10 = *MEMORY[0x1E4F1F9F8];
  long long destination = *MEMORY[0x1E4F1F9F8];
  unint64_t v6 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  unint64_t v12 = v6;
  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1031039341, &v14, &v13);
  if (!result)
  {
    if (v13 == 40)
    {
      uint64_t result = CMBlockBufferCopyDataBytes(a1, v14 + 16, 0x18uLL, &destination);
      if (!result)
      {
        unint64_t v9 = bswap64(v12);
        *a3 = (int8x8_t)bswap64(destination);
        a3[1] = vrev32_s8(*(int8x8_t *)((char *)&destination + 8));
        a3[2] = (int8x8_t)v9;
      }
    }
    else if (v13)
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = 0;
      *(_OWORD *)a3->i8 = v10;
      a3[2] = (int8x8_t)v6;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendVTInt32Point()
{
  uint64_t result = FigAtomWriterInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result)
      {
        uint64_t result = FigAtomWriterAppendData();
        if (!result)
        {
          uint64_t result = FigAtomWriterAppendData();
          if (!result) {
            return FigAtomWriterEndAtom();
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetVTInt32Point(OpaqueCMBlockBuffer *a1, int a2, int8x8_t *a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int8x8_t destination = 0;
  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1026765424, &v10, &v9);
  if (!result)
  {
    if (v9 == 24)
    {
      uint64_t result = CMBlockBufferCopyDataBytes(a1, v10 + 16, 8uLL, &destination);
      if (!result) {
        *a3 = vrev32_s8(destination);
      }
    }
    else if (v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendVTInt32Size()
{
  uint64_t result = FigAtomWriterInitWithByteStream();
  if (!result)
  {
    uint64_t result = FigAtomWriterBeginAtom();
    if (!result)
    {
      uint64_t result = FigAtomWriterAppendData();
      if (!result)
      {
        uint64_t result = FigAtomWriterAppendData();
        if (!result)
        {
          uint64_t result = FigAtomWriterAppendData();
          if (!result) {
            return FigAtomWriterEndAtom();
          }
        }
      }
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageGetVTInt32Size(OpaqueCMBlockBuffer *a1, int a2, int8x8_t *a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int8x8_t destination = 0;
  DataCFIndex Length = CMBlockBufferGetDataLength(a1);
  uint64_t result = vtpvScanForParameterBoxWithType(a1, 0, DataLength, a2, 1026765427, &v10, &v9);
  if (!result)
  {
    if (v9 == 24)
    {
      uint64_t result = CMBlockBufferCopyDataBytes(a1, v10 + 16, 8uLL, &destination);
      if (!result) {
        *a3 = vrev32_s8(destination);
      }
    }
    else if (v9)
    {
      return FigSignalErrorAt();
    }
    else
    {
      uint64_t result = 0;
      *a3 = 0;
    }
  }
  return result;
}

uint64_t VTParavirtualizationMessageAppendPixelBufferAndIOSurfaceAttachments(uint64_t a1, CVBufferRef buffer)
{
  CFDictionaryRef v4 = CVBufferCopyAttachments(buffer, kCVAttachmentMode_ShouldPropagate);
  CVPixelBufferGetIOSurface(buffer);
  int v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  uint64_t v26 = 116;
  CFAllocatorRef v5 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v4 && CFDictionaryGetCount(v4) >= 1)
  {
    uint64_t MutableCopy = CFDictionaryCreateMutableCopy(*v5, 0, v4);
    uint64_t v7 = MutableCopy;
    if (!MutableCopy)
    {
      uint64_t appended = FigSignalErrorAt();
LABEL_32:
      uint64_t v10 = appended;
      goto LABEL_20;
    }
    CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24A00]);
    uint64_t appended = VTParavirtualizationMessageAppendCFPropertyList();
    if (appended) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (!IOSurfaceGetBulkAttachments())
  {
    long long v22 = v31;
    long long v23 = v32;
    long long v24 = v33;
    int v25 = v34;
    *(_OWORD *)capacity = v27;
    long long v19 = v28;
    long long v20 = v29;
    long long v21 = v30;
    if ((_BYTE)v27) {
      goto LABEL_9;
    }
    uint64_t v16 = 1;
    do
    {
      if (v16 == 116) {
        goto LABEL_12;
      }
    }
    while (!*((unsigned __int8 *)capacity + v16++));
    if ((unint64_t)(v16 - 2) < 0x73)
    {
LABEL_9:
      long long v22 = v31;
      long long v23 = v32;
      long long v24 = v33;
      int v25 = v34;
      *(_OWORD *)capacity = v27;
      long long v19 = v28;
      long long v20 = v29;
      long long v21 = v30;
      CFDataRef v9 = CFDataCreate(*v5, (const UInt8 *)capacity, 116);
      uint64_t v10 = VTParavirtualizationMessageAppendCFData(a1, 744644980, v9);
      if (v9) {
        CFRelease(v9);
      }
      if (v10)
      {
LABEL_19:
        if (!v4) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
  }
LABEL_12:
  int v11 = 0;
  CFAllocatorRef v12 = *v5;
  while (1)
  {
    capacity[0] = 0;
    if (!IOSurfaceGetDataProperty())
    {
      if (capacity[0]) {
        break;
      }
    }
LABEL_17:
    if (++v11 == 4)
    {
      uint64_t v10 = 0;
      goto LABEL_19;
    }
  }
  CFMutableArrayRef Mutable = CFDataCreateMutable(v12, capacity[0]);
  if (Mutable)
  {
    uint64_t v14 = Mutable;
    CFDataSetLength(Mutable, capacity[0]);
    CFDataGetMutableBytePtr(v14);
    IOSurfaceGetDataProperty();
    uint64_t v10 = VTParavirtualizationMessageAppendCFData(a1, (v11 + 744779824), v14);
    CFRelease(v14);
    if (v10) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  uint64_t v10 = FigSignalErrorAt();
  if (v4) {
LABEL_20:
  }
    CFRelease(v4);
LABEL_21:
  if (v7) {
    CFRelease(v7);
  }
  return v10;
}

uint64_t VTParavirtualizationMessageSetAttachmentsOnPixelBufferAndIOSurfaceIfPresent(OpaqueCMBlockBuffer *a1, CVPixelBufferRef pixelBuffer)
{
  CFDictionaryRef v33 = 0;
  CVPixelBufferGetIOSurface(pixelBuffer);
  int v32 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  *(_OWORD *)buffer = 0u;
  CFDataRef v24 = 0;
  uint64_t v4 = VTParavirtualizationMessageCopyCFDictionary(a1, 745562484, &v33);
  CFDictionaryRef v5 = v33;
  if (v4)
  {
    uint64_t v6 = v4;
    goto LABEL_28;
  }
  if (v33) {
    CVBufferSetAttachments(pixelBuffer, v33, kCVAttachmentMode_ShouldPropagate);
  }
  theData[0] = 0;
  uint64_t v6 = VTParavirtualizationMessageCopyCFData(a1, 744644980, theData);
  CFDataRef v7 = theData[0];
  if (!v6 && theData[0])
  {
    int v32 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)buffer = 0u;
    unint64_t Length = CFDataGetLength(theData[0]);
    if (Length >= 0x74) {
      v9.length = 116;
    }
    else {
      v9.length = Length;
    }
    v9.location = 0;
    CFDataGetBytes(v7, v9, buffer);
    goto LABEL_11;
  }
  if (theData[0]) {
LABEL_11:
  }
    CFRelease(v7);
  if (v6) {
    goto LABEL_28;
  }
  long long v20 = v29;
  long long v21 = v30;
  long long v22 = v31;
  int v23 = v32;
  *(_OWORD *)theData = *(_OWORD *)buffer;
  long long v17 = v26;
  long long v18 = v27;
  long long v19 = v28;
  if (buffer[0])
  {
LABEL_14:
    if (IOSurfaceSetBulkAttachments2())
    {
LABEL_27:
      uint64_t v6 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v10 = 1;
    while (v10 != 116)
    {
      if (*((unsigned __int8 *)theData + v10++))
      {
        if ((unint64_t)(v10 - 2) < 0x73) {
          goto LABEL_14;
        }
        break;
      }
    }
  }
  int v12 = 0;
  while (1)
  {
    uint64_t v13 = VTParavirtualizationMessageCopyCFData(a1, v12 + 744779824, &v24);
    CFDataRef v14 = v24;
    if (v13) {
      break;
    }
    if (v24)
    {
      if (CFDataGetLength(v24))
      {
        CFDataGetBytePtr(v14);
        if (IOSurfaceSetDataProperty())
        {
          uint64_t v6 = 0;
LABEL_32:
          CFRelease(v14);
          goto LABEL_28;
        }
      }
      CFRelease(v14);
      CFDataRef v24 = 0;
    }
    if (++v12 == 4) {
      goto LABEL_27;
    }
  }
  uint64_t v6 = v13;
  if (v24) {
    goto LABEL_32;
  }
LABEL_28:
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t VTParavirtualizationReplyClerkGetTypeID()
{
  if (VTParavirtualizationReplyClerkGetTypeID_sRegisterVTParavirtualizationReplyClerkTypeOnce != -1) {
    dispatch_once_f(&VTParavirtualizationReplyClerkGetTypeID_sRegisterVTParavirtualizationReplyClerkTypeOnce, &VTParavirtualizationReplyClerkGetTypeID_sVTParavirtualizationReplyClerkTypeID, (dispatch_function_t)vtParavirtualizationReplyClerk_RegisterType);
  }
  return VTParavirtualizationReplyClerkGetTypeID_sVTParavirtualizationReplyClerkTypeID;
}

uint64_t vtParavirtualizationReplyClerk_RegisterType(uint64_t *a1)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

char *vtCloneParavirtualizationPendingReply(const __CFAllocator *a1)
{
  CFUUIDRef v1 = (char *)CFAllocatorAllocate(a1, 48, 0);
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(void *)CFUUIDRef v1 = dispatch_semaphore_create(0);
  v1[40] = 0;
  return v1;
}

void vtFreeParavirtualizationPendingReply(CFAllocatorRef allocator, dispatch_object_t *ptr)
{
  dispatch_object_t v4 = ptr[1];
  if (v4)
  {
    CFRelease(v4);
    ptr[1] = 0;
  }
  dispatch_object_t v5 = ptr[2];
  if (v5)
  {
    CFRelease(v5);
    ptr[2] = 0;
  }
  dispatch_object_t v6 = ptr[3];
  if (v6)
  {
    CFRelease(v6);
    ptr[3] = 0;
  }
  if (*ptr)
  {
    dispatch_release(*ptr);
    *ptr = 0;
  }

  CFAllocatorDeallocate(allocator, ptr);
}

void VTParavirtualizationReplyClerkInvalidate(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  *(unsigned char *)(a1 + 48) = 1;
  int64_t Count = FigCFDictionaryGetCount();
  dispatch_object_t v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 40), 0, v4);
  if (Count >= 1)
  {
    dispatch_object_t v5 = v4;
    do
    {
      uint64_t v6 = (uint64_t)*v5++;
      *(unsigned char *)(v6 + 40) = 1;
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)v6);
      --Count;
    }
    while (Count);
  }
  os_unfair_lock_unlock(v2);

  free(v4);
}

uint64_t VTParavirtualizationReplyClerkDeliverReply(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, OpaqueCMBlockBuffer *a4)
{
  uint64_t v18 = 0;
  key = 0;
  uint64_t result = VTParavirtualizationMessageGetReplyIdentifier(a2, &key);
  if (result) {
    return result;
  }
  uint64_t result = VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(a2, &v18, (_DWORD *)&v18 + 1, 0);
  if (result) {
    return result;
  }
  CFRange v9 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  if (*(unsigned char *)(a1 + 48)
    || (CFStringRef Value = (OpaqueCMBlockBuffer **)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), key)) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
    return FigSignalErrorAt();
  }
  int v11 = Value;
  int v12 = Value[2];
  if ((v18 & 0x1000000000) == 0)
  {
    if (v12)
    {
      CMBlockBufferAppendBufferReference(v12, a2, 0, 0, 0);
      CFDataRef v14 = v11[1];
      uint64_t v13 = v11[2];
      v11[1] = v13;
      if (!v13) {
        goto LABEL_15;
      }
    }
    else
    {
      CFDataRef v14 = v11[1];
      v11[1] = a2;
      if (!a2)
      {
LABEL_15:
        if (v14) {
          CFRelease(v14);
        }
        uint64_t v16 = v11[3];
        v11[3] = a3;
        if (a3) {
          CFRetain(a3);
        }
        if (v16) {
          CFRelease(v16);
        }
        v11[4] = a4;
        size_t v15 = *v11;
        dispatch_retain((dispatch_object_t)*v11);
        goto LABEL_26;
      }
      uint64_t v13 = a2;
    }
    CFRetain(v13);
    goto LABEL_15;
  }
  if (v12)
  {
    CMBlockBufferAppendBufferReference(v12, a2, 0, 0, 0);
    size_t v15 = 0;
  }
  else
  {
    if (a2) {
      long long v17 = (OpaqueCMBlockBuffer *)CFRetain(a2);
    }
    else {
      long long v17 = 0;
    }
    size_t v15 = 0;
    v11[2] = v17;
  }
LABEL_26:
  os_unfair_lock_unlock(v9);
  if ((v18 & 0x1000000000) == 0) {
    dispatch_semaphore_signal(v15);
  }
  if (v15) {
    dispatch_release(v15);
  }
  return 0;
}

uint64_t __vtParavirtualizationGuestSetup_block_invoke()
{
  if (!MEMORY[0x1E4FB3BF8])
  {
    uint64_t result = 4294948206;
LABEL_6:
    vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus = result;
    return result;
  }
  vtParavirtualizationGuestSetup_sVTParavirtualizationSetupStatus = VTParavirtualizationGuestSupportSetUpWithHandlers();
  uint64_t result = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 10, MEMORY[0x1E4F1D530], 0);
  sVTParavirtualizationGuests = result;
  if (!result)
  {
    uint64_t result = FigSignalErrorAt();
    goto LABEL_6;
  }
  return result;
}

uint64_t __vtParavirtualizationGuestSetup_block_invoke_2(int a1, size_t blockLength, CMBlockBufferRef *a3, char **a4)
{
  dataPointerOut = 0;
  CMBlockBufferRef theBuffer = 0;
  uint64_t result = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, blockLength, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, blockLength, 1u, &theBuffer);
  if (!result)
  {
    uint64_t result = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut);
    if (!result)
    {
      *a3 = theBuffer;
      *a4 = dataPointerOut;
    }
  }
  return result;
}

uint64_t __vtParavirtualizationGuestSetup_block_invoke_3(int a1, OpaqueCMBlockBuffer *a2, size_t dataLength)
{
  CMBlockBufferRef blockBufferOut = 0;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v4 = CMBlockBufferCreateWithBufferReference((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0, dataLength, 0, &blockBufferOut);
  if (v4)
  {
    uint64_t v18 = v4;
    goto LABEL_27;
  }
  dispatch_object_t v5 = blockBufferOut;
  uint64_t v23 = 0;
  *(void *)&v22.byte0 = 0;
  *(void *)&v22.byte8 = 0;
  uint64_t MessageTypeAndFlagsAndGuestUUID = VTParavirtualizationMessageGetMessageTypeAndFlagsAndGuestUUID(blockBufferOut, (_DWORD *)&v23 + 1, &v23, &v22);
  if (MessageTypeAndFlagsAndGuestUUID) {
    goto LABEL_32;
  }
  CFUUIDRef v7 = CFUUIDCreateFromUUIDBytes(v3, v22);
  if (!v7)
  {
    uint64_t MessageTypeAndFlagsAndGuestUUID = FigSignalErrorAt();
LABEL_32:
    uint64_t v18 = MessageTypeAndFlagsAndGuestUUID;
    _Block_release(0);
    goto LABEL_27;
  }
  CFUUIDRef v8 = v7;
  os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
  CFStringRef Value = (const void **)CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v8);
  uint64_t v10 = Value;
  if (!Value)
  {
    uint64_t v18 = FigSignalErrorAt();
    os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
    int v11 = 0;
    CFDataRef v14 = 0;
    goto LABEL_23;
  }
  int v11 = (void (**)(void *, OpaqueCMBlockBuffer *, CFTypeRef))_Block_copy(*Value);
  int v12 = (const void *)v10[1];
  if (v12) {
    CFTypeRef v13 = CFRetain(v12);
  }
  else {
    CFTypeRef v13 = 0;
  }
  CFDataRef v14 = v10[2];
  dispatch_retain(v14);
  size_t v15 = (const void *)v10[4];
  if (v15) {
    uint64_t v10 = CFRetain(v15);
  }
  else {
    uint64_t v10 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
  if (HIDWORD(v23) == 1115252001)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
    uint64_t v16 = (const void *)*((void *)CFDictionaryGetValue((CFDictionaryRef)sVTParavirtualizationGuests, v8) + 4);
    if (v16)
    {
      CFTypeRef v17 = CFRetain(v16);
      os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
      if (v17)
      {
        VTParavirtualizationReplyClerkInvalidate((uint64_t)v17);
        CFRelease(v17);
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&sVTParavirtualizationGuestLock);
    }
    v11[2](v11, v5, v13);
  }
  else
  {
    if ((v23 & 4) != 0)
    {
      uint64_t v18 = VTParavirtualizationReplyClerkDeliverReply((uint64_t)v10, v5, 0, 0);
      if (!v13) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
    CFRetain(v5);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __vtParavirtualizationGuestDispatchOneMessageFromHost_block_invoke;
    block[3] = &unk_1E5786368;
    block[4] = v11;
    void block[5] = v5;
    block[6] = v13;
    dispatch_async(v14, block);
    int v11 = 0;
  }
  uint64_t v18 = 0;
  if (v13) {
LABEL_22:
  }
    CFRelease(v13);
LABEL_23:
  CFRelease(v8);
  _Block_release(v11);
  if (v14) {
    dispatch_release(v14);
  }
  if (v10) {
    CFRelease(v10);
  }
LABEL_27:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v18;
}

uint64_t __vtParavirtualizationGuestSetup_block_invoke_4(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

void __vtParavirtualizationGuestDispatchOneMessageFromHost_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  CFRelease(*(CFTypeRef *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 32);

  _Block_release(v2);
}

double vtParavirtualizationReplyClerk_Init(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

void vtParavirtualizationReplyClerk_Finalize(uint64_t a1)
{
  uint64_t v2 = *(__CFDictionary **)(a1 + 40);
  if (v2)
  {
    CFDictionaryRemoveAllValues(v2);
    CFAllocatorRef v3 = *(const void **)(a1 + 40);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 40) = 0;
    }
  }
}

__CFString *vtParavirtualizationReplyClerk_CopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFIndex v4 = CFGetRetainCount(a1);
  uint64_t Count = FigCFDictionaryGetCount();
  CFStringAppendFormat(Mutable, 0, @"VTParavirtualizationReplyClerk %p RC: %d  %d pending replies", a1, v4, Count);
  return Mutable;
}

float __vParavirtualizationGetReplyTimeoutInNanoSeconds_block_invoke()
{
  v1.epoch = 0;
  *(_OWORD *)&v1.value = kVTParavirtualizationDefaultReplyTimeout;
  CMTimeConvertScale(&v2, &v1, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  float result = (float)SLODWORD(v2.value) * 1000000.0;
  vParavirtualizationGetReplyTimeoutInNanoSeconds_sReplyTimeoutInNanoSeconds = (int)result;
  return result;
}

void VTFigAudioSessionInitialize(uint64_t a1)
{
  if (!a1 || sFigAudioSessionFunctionsHasBeenSet == 1)
  {
    FigSignalErrorAt();
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __VTFigAudioSessionInitialize_block_invoke;
    block[3] = &__block_descriptor_tmp_24;
    block[4] = a1;
    if (VTFigAudioSessionInitialize_once != -1) {
      dispatch_once(&VTFigAudioSessionInitialize_once, block);
    }
  }
}

uint64_t __VTFigAudioSessionInitialize_block_invoke(uint64_t result)
{
  CMTime v1 = *(void **)(result + 32);
  if (!*v1 || !v1[1] || !v1[2] || !v1[3] || !v1[4]) {
    return FigSignalErrorAt();
  }
  long long v2 = *(_OWORD *)v1;
  long long v3 = *((_OWORD *)v1 + 1);
  qword_1E93349F0 = v1[4];
  *(_OWORD *)&sFigAudioSessionFunctions = v2;
  *(_OWORD *)&off_1E93349E0 = v3;
  kVTFigAudioSessionNotification_ApplicationStateDidChange = *((void *)&v3 + 1);
  kVTFigAudioSessionNotification_Interruption = qword_1E93349F0;
  sFigAudioSessionFunctionsHasBeenSet = 1;
  return result;
}

uint64_t VTFigAudioSessionCreateWithCMSession()
{
  if ((sFigAudioSessionFunctionsHasBeenSet & 1) == 0) {
    return FigSignalErrorAt();
  }
  if (sFigAudioSessionFunctions) {
    return sFigAudioSessionFunctions();
  }
  return 4294947943;
}

uint64_t VTFigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken(uint64_t a1, _OWORD *a2)
{
  if (sFigAudioSessionFunctionsHasBeenSet)
  {
    if (*(&sFigAudioSessionFunctions + 1))
    {
      long long v2 = a2[1];
      v4[0] = *a2;
      v4[1] = v2;
      return ((uint64_t (*)(uint64_t, _OWORD *))*(&sFigAudioSessionFunctions + 1))(a1, v4);
    }
    else
    {
      return 4294947943;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTInAudioMXServerProcess()
{
  if (sFigAudioSessionFunctionsHasBeenSet)
  {
    if (off_1E93349E0) {
      return off_1E93349E0();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t VTFigAudioSessionCreate(_OWORD *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  if (VTCMSessionIsSupported())
  {
    if (VTInAudioMXServerProcess())
    {
      uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken = CMSessionCreate();
      if (!UsingPrimaryAVAudioSessionSiblingForAuditToken)
      {
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken = VTFigAudioSessionCreateWithCMSession();
        if (!UsingPrimaryAVAudioSessionSiblingForAuditToken)
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          FigCFDictionarySetInt32();
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_8;
        }
      }
LABEL_15:
      uint64_t v11 = UsingPrimaryAVAudioSessionSiblingForAuditToken;
      goto LABEL_10;
    }
    uint64_t v9 = *MEMORY[0x1E4F1CF80];
    long long v10 = a1[1];
    v13[0] = *a1;
    v13[1] = v10;
    uint64_t UsingPrimaryAVAudioSessionSiblingForAuditToken = VTFigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken(v9, v13);
    if (UsingPrimaryAVAudioSessionSiblingForAuditToken) {
      goto LABEL_15;
    }
  }
LABEL_8:
  uint64_t v11 = 0;
  if (a4)
  {
    *a4 = v14;
    CFTypeRef v14 = 0;
  }
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v11;
}

uint64_t vt_Copy_32ARGB_y420ITU601(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v36 = a5[2];
    uint64_t v37 = a5[1];
    uint64_t v9 = a6[1];
    unint64_t v35 = a2 >> 1;
    uint64_t v34 = 2 * v7;
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = a1 >> 1;
    }
    uint64_t v40 = *a4 + 7;
    uint64_t v41 = *a6 + 1;
    uint64_t v11 = a6[2];
    do
    {
      uint64_t v39 = v6;
      if (a1 >= 2)
      {
        uint64_t v12 = 0;
        CFTypeRef v13 = (unsigned __int8 *)v40;
        CFTypeRef v14 = (unsigned char *)v41;
        do
        {
          size_t v15 = &v14[v8];
          int v16 = *(v13 - 6);
          int v17 = *(v13 - 5);
          int v18 = *(v13 - 4);
          int v19 = *(v13 - 2);
          int v20 = *(v13 - 1);
          int v21 = *v13;
          uint64_t v22 = v7;
          uint64_t v23 = &v13[v7];
          int v24 = *(v23 - 6);
          int v25 = *(v23 - 5);
          int v26 = *(v23 - 4);
          int v27 = *(v23 - 2);
          int v28 = *(v23 - 1);
          LODWORD(v23) = *v23;
          *(v14 - 1) = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          *CFTypeRef v14 = (8414 * v19 + 540672 + 16519 * v20 + 3208 * v21) >> 15;
          v14 += 2;
          *(v15 - 1) = (8414 * v24 + 540672 + 16519 * v25 + 3208 * v26) >> 15;
          *size_t v15 = (8414 * v27 + 540672 + 16519 * v28 + 3208 * v23) >> 15;
          int v29 = v21 + v18 + v26;
          int v30 = v19 + v16 + v24 + v27;
          LODWORD(v15) = v20 + v17 + v25;
          int v31 = 33544898 * v28 - 9534 * v15 + 33549576 * v30 + 14392 * (v29 + v23);
          int v32 = 33542381 * v28 - 12051 * v15 + 33552092 * v29 + 33552092 * v23;
          uint64_t v7 = v22;
          *(unsigned char *)(v9 + v12) = (v31 + 16842752) >> 17;
          *(unsigned char *)(v11 + v12++) = (v32 + 14392 * v30 + 16842752) >> 17;
          v13 += 8;
        }
        while (v10 != v12);
      }
      v9 += v37;
      v11 += v36;
      uint64_t v6 = v39 + 1;
      v41 += 2 * v8;
      v40 += v34;
    }
    while (v39 + 1 != v35);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_y420ITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v39 = a5[2];
    uint64_t v40 = a5[1];
    unint64_t v9 = a2 >> 1;
    uint64_t v10 = a6[1];
    uint64_t v11 = a6[2];
    uint64_t v37 = 2 * *a5;
    unint64_t v38 = v9;
    uint64_t v36 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = a1 >> 1;
    }
    uint64_t v43 = *a4;
    uint64_t v44 = *a6 + 1;
    do
    {
      uint64_t v42 = v6;
      if (a1 >= 2)
      {
        uint64_t v13 = 0;
        size_t v15 = v43;
        CFTypeRef v14 = (unsigned char *)v44;
        do
        {
          int v16 = &v14[v8];
          uint64_t v17 = v7;
          int v18 = &v15[v7];
          int v19 = v15[2];
          int v20 = v15[1];
          int v21 = *v15;
          int v22 = v15[6];
          int v23 = v15[5];
          int v24 = v15[4];
          int v25 = v18[2];
          int v26 = v18[1];
          int v27 = *v18;
          int v28 = v18[6];
          int v29 = v18[5];
          LODWORD(v18) = v18[4];
          *(v14 - 1) = (8414 * v19 + 540672 + 16519 * v20 + 3208 * v21) >> 15;
          *CFTypeRef v14 = (8414 * v22 + 540672 + 16519 * v23 + 3208 * v24) >> 15;
          v14 += 2;
          *(v16 - 1) = (8414 * v25 + 540672 + 16519 * v26 + 3208 * v27) >> 15;
          *int v16 = (8414 * v28 + 540672 + 16519 * v29 + 3208 * v18) >> 15;
          int v30 = v24 + v21 + v27;
          int v31 = v22 + v19 + v25 + v28;
          int v32 = v23 + v20 + v26;
          int v33 = 33544898 * v29 - 9534 * v32 + 33549576 * v31 + 14392 * (v30 + v18);
          int v34 = 33542381 * v29 - 12051 * v32 + 33552092 * v30 + 33552092 * v18;
          uint64_t v7 = v17;
          *(unsigned char *)(v10 + v13) = (v33 + 16842752) >> 17;
          *(unsigned char *)(v11 + v13) = (v34 + 14392 * v31 + 16842752) >> 17;
          v15 += 8;
          ++v13;
        }
        while (v12 != v13);
      }
      v10 += v40;
      v11 += v39;
      v43 += v36;
      uint64_t v6 = v42 + 1;
      v44 += v37;
    }
    while (v42 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_420vITU601(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v38 = a5[1];
    unint64_t v37 = a2 >> 1;
    uint64_t v43 = (unsigned char *)a6[1];
    uint64_t v36 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    uint64_t v35 = v9;
    uint64_t v42 = *a6 + 1;
    uint64_t v41 = *a4 + 7;
    do
    {
      uint64_t v40 = v6;
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v41;
        uint64_t v11 = (unsigned char *)v42;
        uint64_t v12 = v35;
        uint64_t v13 = v43;
        do
        {
          CFTypeRef v14 = &v11[v8];
          int v15 = *(v10 - 6);
          int v16 = *(v10 - 5);
          int v17 = *(v10 - 4);
          int v18 = *(v10 - 2);
          int v19 = *(v10 - 1);
          int v20 = *v10;
          int v21 = &v10[v7];
          uint64_t v22 = v7;
          int v23 = v10[v7 - 6];
          int v24 = *(v21 - 5);
          int v25 = *(v21 - 4);
          int v26 = *(v21 - 2);
          int v27 = *(v21 - 1);
          LODWORD(v21) = *v21;
          *(v11 - 1) = (8414 * v15 + 540672 + 16519 * v16 + 3208 * v17) >> 15;
          *uint64_t v11 = (8414 * v18 + 540672 + 16519 * v19 + 3208 * v20) >> 15;
          v11 += 2;
          *(v14 - 1) = (8414 * v23 + 540672 + 16519 * v24 + 3208 * v25) >> 15;
          *CFTypeRef v14 = (8414 * v26 + 540672 + 16519 * v27 + 3208 * v21) >> 15;
          int v28 = v20 + v17 + v25;
          int v29 = v18 + v15 + v23 + v26;
          int v30 = v19 + v16 + v24;
          int v31 = 33544898 * v27 - 9534 * v30 + 33549576 * v29 + 14392 * (v28 + v21);
          int v32 = 33542381 * v27 - 12051 * v30 + 33552092 * v28 + 33552092 * v21 + 14392 * v29;
          unsigned int v33 = v31 + 16842752;
          uint64_t v7 = v22;
          *uint64_t v13 = v33 >> 17;
          v13[1] = (v32 + 16842752) >> 17;
          v13 += 2;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      v43 += v38;
      uint64_t v6 = v40 + 1;
      v42 += 2 * v8;
      v41 += v36;
    }
    while (v40 + 1 != v37);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_420vITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v34 = a5[1];
    unint64_t v33 = a2 >> 1;
    uint64_t v39 = (unsigned char *)a6[1];
    uint64_t v32 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    uint64_t v31 = v9;
    uint64_t v38 = *a6 + 1;
    unint64_t v37 = *a4;
    do
    {
      uint64_t v36 = v6;
      if (a1 >= 2)
      {
        uint64_t v11 = v37;
        uint64_t v10 = (unsigned char *)v38;
        uint64_t v12 = v31;
        uint64_t v13 = v39;
        do
        {
          CFTypeRef v14 = &v10[v8];
          int v15 = v11[2];
          int v16 = v11[1];
          int v17 = *v11;
          int v18 = v11[6];
          int v19 = v11[5];
          int v20 = v11[4];
          int v21 = v11[v7 + 2];
          int v22 = v11[v7 + 1];
          int v23 = v11[v7];
          int v24 = v11[v7 + 6];
          int v25 = v11[v7 + 5];
          int v26 = v11[v7 + 4];
          *(v10 - 1) = (8414 * v15 + 540672 + 16519 * v16 + 3208 * v17) >> 15;
          *uint64_t v10 = (8414 * v18 + 540672 + 16519 * v19 + 3208 * v20) >> 15;
          v10 += 2;
          *(v14 - 1) = (8414 * v21 + 540672 + 16519 * v22 + 3208 * v23) >> 15;
          *CFTypeRef v14 = (8414 * v24 + 540672 + 16519 * v25 + 3208 * v26) >> 15;
          int v27 = v20 + v17 + v23;
          int v28 = v18 + v15 + v21 + v24;
          int v29 = v19 + v16 + v22;
          *uint64_t v13 = (33544898 * v25 - 9534 * v29 + 33549576 * v28 + 14392 * (v27 + v26) + 16842752) >> 17;
          v13[1] = (33542381 * v25 - 12051 * v29 + 33552092 * v27 + 33552092 * v26 + 14392 * v28 + 16842752) >> 17;
          v11 += 8;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v39 += v34;
      v37 += v32;
      uint64_t v6 = v36 + 1;
      v38 += 2 * v8;
    }
    while (v36 + 1 != v33);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_420vITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v34 = a5[1];
    unint64_t v33 = a2 >> 1;
    uint64_t v39 = (unsigned char *)a6[1];
    uint64_t v32 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    uint64_t v31 = v9;
    uint64_t v38 = *a6 + 1;
    unint64_t v37 = *a4;
    do
    {
      uint64_t v36 = v6;
      if (a1 >= 2)
      {
        uint64_t v11 = v37;
        uint64_t v10 = (unsigned char *)v38;
        uint64_t v12 = v31;
        uint64_t v13 = v39;
        do
        {
          CFTypeRef v14 = &v10[v8];
          int v15 = *v11;
          int v16 = v11[1];
          int v17 = v11[2];
          int v18 = v11[3];
          int v19 = v11[4];
          int v20 = v11[5];
          int v21 = v11[v7];
          int v22 = v11[v7 + 1];
          int v23 = v11[v7 + 2];
          int v24 = v11[v7 + 3];
          int v25 = v11[v7 + 4];
          int v26 = v11[v7 + 5];
          *(v10 - 1) = (8414 * v15 + 540672 + 16519 * v16 + 3208 * v17) >> 15;
          *uint64_t v10 = (8414 * v18 + 540672 + 16519 * v19 + 3208 * v20) >> 15;
          v10 += 2;
          *(v14 - 1) = (8414 * v21 + 540672 + 16519 * v22 + 3208 * v23) >> 15;
          *CFTypeRef v14 = (8414 * v24 + 540672 + 16519 * v25 + 3208 * v26) >> 15;
          int v27 = v20 + v17 + v23;
          int v28 = v18 + v15 + v21 + v24;
          int v29 = v19 + v16 + v22;
          *uint64_t v13 = (33544898 * v25 - 9534 * v29 + 33549576 * v28 + 14392 * (v27 + v26) + 16842752) >> 17;
          v13[1] = (33542381 * v25 - 12051 * v29 + 33552092 * v27 + 33552092 * v26 + 14392 * v28 + 16842752) >> 17;
          v11 += 6;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v39 += v34;
      v37 += v32;
      uint64_t v6 = v36 + 1;
      v38 += 2 * v8;
    }
    while (v36 + 1 != v33);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_420fITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    unint64_t v38 = a2 >> 1;
    uint64_t v39 = a5[1];
    uint64_t v9 = a1 >> 1;
    uint64_t v44 = (unsigned char *)a6[1];
    uint64_t v36 = 2 * *a3;
    uint64_t v37 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v35 = v9;
    uint64_t v43 = *a6 + 1;
    uint64_t v42 = *a4;
    do
    {
      uint64_t v41 = v6;
      if (a1 >= 2)
      {
        uint64_t v11 = v42;
        uint64_t v10 = (unsigned char *)v43;
        uint64_t v12 = v35;
        uint64_t v13 = v44;
        do
        {
          CFTypeRef v14 = &v10[v8];
          int v15 = v11[2];
          int v16 = v11[1];
          int v17 = *v11;
          int v18 = v11[6];
          int v19 = v11[5];
          int v20 = v11[4];
          int v21 = v11[v7 + 2];
          int v22 = v11[v7 + 1];
          int v23 = v11[v7];
          int v24 = v11[v7 + 6];
          int v25 = v11[v7 + 5];
          int v26 = v11[v7 + 4];
          *(v10 - 1) = (19235 * v16 + 9798 * v15 + 3736 * v17 + 0x4000) >> 15;
          *uint64_t v10 = (19235 * v19 + 9798 * v18 + 3736 * v20 + 0x4000) >> 15;
          v10 += 2;
          *(v14 - 1) = (19235 * v22 + 9798 * v21 + 3736 * v23 + 0x4000) >> 15;
          *CFTypeRef v14 = (19235 * v25 + 9798 * v24 + 3736 * v26 + 0x4000) >> 15;
          int v27 = v19 + v16 + v22 + v25;
          int v28 = v20 + v17 + v23 + v26;
          int v29 = -5528 * (v18 + v15 + v21 + v24) + (v28 << 14) - 10854 * v27;
          int v30 = -13719 * v27 + ((v21 + v18 + v24 + v15) << 14) - 2663 * v28;
          unsigned int v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF) {
            LOBYTE(v31) = -1;
          }
          *uint64_t v13 = v31;
          unsigned int v32 = v30 + 0x1000000;
          unsigned int v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF) {
            LOBYTE(v33) = -1;
          }
          v13[1] = v33;
          v11 += 8;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v42 += v36;
      uint64_t v6 = v41 + 1;
      v43 += v37;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_420fITU601(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    unint64_t v38 = a2 >> 1;
    uint64_t v39 = a5[1];
    uint64_t v9 = a1 >> 1;
    uint64_t v44 = (unsigned char *)a6[1];
    uint64_t v36 = 2 * *a3;
    uint64_t v37 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v35 = v9;
    uint64_t v43 = *a6 + 1;
    uint64_t v42 = *a4 + 7;
    do
    {
      uint64_t v41 = v6;
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v42;
        uint64_t v11 = (unsigned char *)v43;
        uint64_t v12 = v35;
        uint64_t v13 = v44;
        do
        {
          CFTypeRef v14 = &v11[v8];
          int v15 = *(v10 - 6);
          int v16 = *(v10 - 5);
          int v17 = *(v10 - 4);
          int v18 = *(v10 - 2);
          int v19 = *(v10 - 1);
          int v20 = *v10;
          int v21 = v10[v7 - 6];
          int v22 = v10[v7 - 5];
          int v23 = v10[v7 - 4];
          int v24 = v10[v7 - 2];
          int v25 = v10[v7 - 1];
          int v26 = v10[v7];
          *(v11 - 1) = (19235 * v16 + 9798 * v15 + 3736 * v17 + 0x4000) >> 15;
          *uint64_t v11 = (19235 * v19 + 9798 * v18 + 3736 * v20 + 0x4000) >> 15;
          v11 += 2;
          *(v14 - 1) = (19235 * v22 + 9798 * v21 + 3736 * v23 + 0x4000) >> 15;
          *CFTypeRef v14 = (19235 * v25 + 9798 * v24 + 3736 * v26 + 0x4000) >> 15;
          int v27 = v19 + v16 + v22 + v25;
          int v28 = v20 + v17 + v23 + v26;
          int v29 = -5528 * (v18 + v15 + v21 + v24) + (v28 << 14) - 10854 * v27;
          int v30 = -13719 * v27 + ((v21 + v18 + v24 + v15) << 14) - 2663 * v28;
          unsigned int v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF) {
            LOBYTE(v31) = -1;
          }
          *uint64_t v13 = v31;
          unsigned int v32 = v30 + 0x1000000;
          unsigned int v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF) {
            LOBYTE(v33) = -1;
          }
          v13[1] = v33;
          v13 += 2;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      uint64_t v6 = v41 + 1;
      v43 += v37;
      v42 += v36;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_420fITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    unint64_t v38 = a2 >> 1;
    uint64_t v39 = a5[1];
    uint64_t v9 = a1 >> 1;
    uint64_t v44 = (unsigned char *)a6[1];
    uint64_t v36 = 2 * *a3;
    uint64_t v37 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v35 = v9;
    uint64_t v43 = *a6 + 1;
    uint64_t v42 = *a4;
    do
    {
      uint64_t v41 = v6;
      if (a1 >= 2)
      {
        uint64_t v11 = v42;
        uint64_t v10 = (unsigned char *)v43;
        uint64_t v12 = v35;
        uint64_t v13 = v44;
        do
        {
          CFTypeRef v14 = &v10[v8];
          int v15 = *v11;
          int v16 = v11[1];
          int v17 = v11[2];
          int v18 = v11[3];
          int v19 = v11[4];
          int v20 = v11[5];
          int v21 = v11[v7];
          int v22 = v11[v7 + 1];
          int v23 = v11[v7 + 2];
          int v24 = v11[v7 + 3];
          int v25 = v11[v7 + 4];
          int v26 = v11[v7 + 5];
          *(v10 - 1) = (19235 * v16 + 9798 * v15 + 3736 * v17 + 0x4000) >> 15;
          *uint64_t v10 = (19235 * v19 + 9798 * v18 + 3736 * v20 + 0x4000) >> 15;
          v10 += 2;
          *(v14 - 1) = (19235 * v22 + 9798 * v21 + 3736 * v23 + 0x4000) >> 15;
          *CFTypeRef v14 = (19235 * v25 + 9798 * v24 + 3736 * v26 + 0x4000) >> 15;
          int v27 = v19 + v16 + v22 + v25;
          int v28 = v20 + v17 + v23 + v26;
          int v29 = -5528 * (v18 + v15 + v21 + v24) + (v28 << 14) - 10854 * v27;
          int v30 = -13719 * v27 + ((v21 + v18 + v24 + v15) << 14) - 2663 * v28;
          unsigned int v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF) {
            LOBYTE(v31) = -1;
          }
          *uint64_t v13 = v31;
          unsigned int v32 = v30 + 0x1000000;
          unsigned int v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF) {
            LOBYTE(v33) = -1;
          }
          v13[1] = v33;
          v11 += 6;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v42 += v36;
      uint64_t v6 = v41 + 1;
      v43 += v37;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_OneComponentITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = 2 * *a5;
    uint64_t v11 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v12 = *a4;
    uint64_t v13 = *a6 + 1;
    do
    {
      if (a1 >= 2)
      {
        CFTypeRef v14 = (unsigned char *)v13;
        uint64_t v15 = v9;
        int v16 = v12;
        do
        {
          int v17 = &v14[v8];
          unsigned int v18 = (19235 * v16[5] + 9798 * v16[6] + 3736 * v16[4] + 0x4000) >> 15;
          unsigned int v19 = (19235 * v16[v7 + 1] + 9798 * v16[v7 + 2] + 3736 * v16[v7] + 0x4000) >> 15;
          unsigned int v20 = 19235 * v16[v7 + 5] + 9798 * v16[v7 + 6] + 3736 * v16[v7 + 4] + 0x4000;
          *(v14 - 1) = (19235 * v16[1] + 9798 * v16[2] + 3736 * *v16 + 0x4000) >> 15;
          *CFTypeRef v14 = v18;
          v14 += 2;
          *(v17 - 1) = v19;
          *int v17 = v20 >> 15;
          v16 += 8;
          --v15;
        }
        while (v15);
      }
      v12 += v11;
      ++v6;
      v13 += v10;
    }
    while (v6 != a2 >> 1);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_y420ITU709(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v36 = a5[2];
    uint64_t v37 = a5[1];
    uint64_t v9 = a6[1];
    unint64_t v35 = a2 >> 1;
    uint64_t v34 = 2 * v7;
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = a1 >> 1;
    }
    uint64_t v40 = *a4 + 7;
    uint64_t v41 = *a6 + 1;
    uint64_t v11 = a6[2];
    do
    {
      uint64_t v39 = v6;
      if (a1 >= 2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = (unsigned __int8 *)v40;
        CFTypeRef v14 = (unsigned char *)v41;
        do
        {
          uint64_t v15 = &v14[v8];
          int v16 = *(v13 - 6);
          int v17 = *(v13 - 5);
          int v18 = *(v13 - 4);
          int v19 = *(v13 - 2);
          int v20 = *(v13 - 1);
          int v21 = *v13;
          uint64_t v22 = v7;
          int v23 = &v13[v7];
          int v24 = *(v23 - 6);
          int v25 = *(v23 - 5);
          int v26 = *(v23 - 4);
          int v27 = *(v23 - 2);
          int v28 = *(v23 - 1);
          LODWORD(v23) = *v23;
          *(v14 - 1) = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          *CFTypeRef v14 = (5983 * v19 + 540672 + 20127 * v20 + 2032 * v21) >> 15;
          v14 += 2;
          *(v15 - 1) = (5983 * v24 + 540672 + 20127 * v25 + 2032 * v26) >> 15;
          *uint64_t v15 = (5983 * v27 + 540672 + 20127 * v28 + 2032 * v23) >> 15;
          int v29 = v21 + v18 + v26;
          int v30 = v19 + v16 + v24 + v27;
          LODWORD(v15) = v20 + v17 + v25;
          int v31 = 33543339 * v28 - 11093 * v15 + 33551135 * v30 + 14392 * (v29 + v23);
          int v32 = 33541360 * v28 - 13072 * v15 + 33553113 * v29 + 33553113 * v23;
          uint64_t v7 = v22;
          *(unsigned char *)(v9 + v12) = (v31 + 16842752) >> 17;
          *(unsigned char *)(v11 + v12++) = (v32 + 14392 * v30 + 16842752) >> 17;
          v13 += 8;
        }
        while (v10 != v12);
      }
      v9 += v37;
      v11 += v36;
      uint64_t v6 = v39 + 1;
      v41 += 2 * v8;
      v40 += v34;
    }
    while (v39 + 1 != v35);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_y420ITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v39 = a5[2];
    uint64_t v40 = a5[1];
    unint64_t v9 = a2 >> 1;
    uint64_t v10 = a6[1];
    uint64_t v11 = a6[2];
    uint64_t v37 = 2 * *a5;
    unint64_t v38 = v9;
    uint64_t v36 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = a1 >> 1;
    }
    uint64_t v43 = *a4;
    uint64_t v44 = *a6 + 1;
    do
    {
      uint64_t v42 = v6;
      if (a1 >= 2)
      {
        uint64_t v13 = 0;
        uint64_t v15 = v43;
        CFTypeRef v14 = (unsigned char *)v44;
        do
        {
          int v16 = &v14[v8];
          uint64_t v17 = v7;
          int v18 = &v15[v7];
          int v19 = v15[2];
          int v20 = v15[1];
          int v21 = *v15;
          int v22 = v15[6];
          int v23 = v15[5];
          int v24 = v15[4];
          int v25 = v18[2];
          int v26 = v18[1];
          int v27 = *v18;
          int v28 = v18[6];
          int v29 = v18[5];
          LODWORD(v18) = v18[4];
          *(v14 - 1) = (5983 * v19 + 540672 + 20127 * v20 + 2032 * v21) >> 15;
          *CFTypeRef v14 = (5983 * v22 + 540672 + 20127 * v23 + 2032 * v24) >> 15;
          v14 += 2;
          *(v16 - 1) = (5983 * v25 + 540672 + 20127 * v26 + 2032 * v27) >> 15;
          *int v16 = (5983 * v28 + 540672 + 20127 * v29 + 2032 * v18) >> 15;
          int v30 = v24 + v21 + v27;
          int v31 = v22 + v19 + v25 + v28;
          int v32 = v23 + v20 + v26;
          int v33 = 33543339 * v29 - 11093 * v32 + 33551135 * v31 + 14392 * (v30 + v18);
          int v34 = 33541360 * v29 - 13072 * v32 + 33553113 * v30 + 33553113 * v18;
          uint64_t v7 = v17;
          *(unsigned char *)(v10 + v13) = (v33 + 16842752) >> 17;
          *(unsigned char *)(v11 + v13) = (v34 + 14392 * v31 + 16842752) >> 17;
          v15 += 8;
          ++v13;
        }
        while (v12 != v13);
      }
      v10 += v40;
      v11 += v39;
      v43 += v36;
      uint64_t v6 = v42 + 1;
      v44 += v37;
    }
    while (v42 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_420vITU709(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v38 = a5[1];
    unint64_t v37 = a2 >> 1;
    uint64_t v43 = (unsigned char *)a6[1];
    uint64_t v36 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    uint64_t v35 = v9;
    uint64_t v42 = *a6 + 1;
    uint64_t v41 = *a4 + 7;
    do
    {
      uint64_t v40 = v6;
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v41;
        uint64_t v11 = (unsigned char *)v42;
        uint64_t v12 = v35;
        uint64_t v13 = v43;
        do
        {
          CFTypeRef v14 = &v11[v8];
          int v15 = *(v10 - 6);
          int v16 = *(v10 - 5);
          int v17 = *(v10 - 4);
          int v18 = *(v10 - 2);
          int v19 = *(v10 - 1);
          int v20 = *v10;
          int v21 = &v10[v7];
          uint64_t v22 = v7;
          int v23 = v10[v7 - 6];
          int v24 = *(v21 - 5);
          int v25 = *(v21 - 4);
          int v26 = *(v21 - 2);
          int v27 = *(v21 - 1);
          LODWORD(v21) = *v21;
          *(v11 - 1) = (5983 * v15 + 540672 + 20127 * v16 + 2032 * v17) >> 15;
          *uint64_t v11 = (5983 * v18 + 540672 + 20127 * v19 + 2032 * v20) >> 15;
          v11 += 2;
          *(v14 - 1) = (5983 * v23 + 540672 + 20127 * v24 + 2032 * v25) >> 15;
          *CFTypeRef v14 = (5983 * v26 + 540672 + 20127 * v27 + 2032 * v21) >> 15;
          int v28 = v20 + v17 + v25;
          int v29 = v18 + v15 + v23 + v26;
          int v30 = v19 + v16 + v24;
          int v31 = 33543339 * v27 - 11093 * v30 + 33551135 * v29 + 14392 * (v28 + v21);
          int v32 = 33541360 * v27 - 13072 * v30 + 33553113 * v28 + 33553113 * v21 + 14392 * v29;
          unsigned int v33 = v31 + 16842752;
          uint64_t v7 = v22;
          *uint64_t v13 = v33 >> 17;
          v13[1] = (v32 + 16842752) >> 17;
          v13 += 2;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      v43 += v38;
      uint64_t v6 = v40 + 1;
      v42 += 2 * v8;
      v41 += v36;
    }
    while (v40 + 1 != v37);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_420vITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v34 = a5[1];
    unint64_t v33 = a2 >> 1;
    uint64_t v39 = (unsigned char *)a6[1];
    uint64_t v32 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    uint64_t v31 = v9;
    uint64_t v38 = *a6 + 1;
    unint64_t v37 = *a4;
    do
    {
      uint64_t v36 = v6;
      if (a1 >= 2)
      {
        uint64_t v11 = v37;
        uint64_t v10 = (unsigned char *)v38;
        uint64_t v12 = v31;
        uint64_t v13 = v39;
        do
        {
          CFTypeRef v14 = &v10[v8];
          int v15 = v11[2];
          int v16 = v11[1];
          int v17 = *v11;
          int v18 = v11[6];
          int v19 = v11[5];
          int v20 = v11[4];
          int v21 = v11[v7 + 2];
          int v22 = v11[v7 + 1];
          int v23 = v11[v7];
          int v24 = v11[v7 + 6];
          int v25 = v11[v7 + 5];
          int v26 = v11[v7 + 4];
          *(v10 - 1) = (5983 * v15 + 540672 + 20127 * v16 + 2032 * v17) >> 15;
          *uint64_t v10 = (5983 * v18 + 540672 + 20127 * v19 + 2032 * v20) >> 15;
          v10 += 2;
          *(v14 - 1) = (5983 * v21 + 540672 + 20127 * v22 + 2032 * v23) >> 15;
          *CFTypeRef v14 = (5983 * v24 + 540672 + 20127 * v25 + 2032 * v26) >> 15;
          int v27 = v20 + v17 + v23;
          int v28 = v18 + v15 + v21 + v24;
          int v29 = v19 + v16 + v22;
          *uint64_t v13 = (33543339 * v25 - 11093 * v29 + 33551135 * v28 + 14392 * (v27 + v26) + 16842752) >> 17;
          v13[1] = (33541360 * v25 - 13072 * v29 + 33553113 * v27 + 33553113 * v26 + 14392 * v28 + 16842752) >> 17;
          v11 += 8;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v39 += v34;
      v37 += v32;
      uint64_t v6 = v36 + 1;
      v38 += 2 * v8;
    }
    while (v36 + 1 != v33);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_420vITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v34 = a5[1];
    unint64_t v33 = a2 >> 1;
    uint64_t v39 = (unsigned char *)a6[1];
    uint64_t v32 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    uint64_t v31 = v9;
    uint64_t v38 = *a6 + 1;
    unint64_t v37 = *a4;
    do
    {
      uint64_t v36 = v6;
      if (a1 >= 2)
      {
        uint64_t v11 = v37;
        uint64_t v10 = (unsigned char *)v38;
        uint64_t v12 = v31;
        uint64_t v13 = v39;
        do
        {
          CFTypeRef v14 = &v10[v8];
          int v15 = *v11;
          int v16 = v11[1];
          int v17 = v11[2];
          int v18 = v11[3];
          int v19 = v11[4];
          int v20 = v11[5];
          int v21 = v11[v7];
          int v22 = v11[v7 + 1];
          int v23 = v11[v7 + 2];
          int v24 = v11[v7 + 3];
          int v25 = v11[v7 + 4];
          int v26 = v11[v7 + 5];
          *(v10 - 1) = (5983 * v15 + 540672 + 20127 * v16 + 2032 * v17) >> 15;
          *uint64_t v10 = (5983 * v18 + 540672 + 20127 * v19 + 2032 * v20) >> 15;
          v10 += 2;
          *(v14 - 1) = (5983 * v21 + 540672 + 20127 * v22 + 2032 * v23) >> 15;
          *CFTypeRef v14 = (5983 * v24 + 540672 + 20127 * v25 + 2032 * v26) >> 15;
          int v27 = v20 + v17 + v23;
          int v28 = v18 + v15 + v21 + v24;
          int v29 = v19 + v16 + v22;
          *uint64_t v13 = (33543339 * v25 - 11093 * v29 + 33551135 * v28 + 14392 * (v27 + v26) + 16842752) >> 17;
          v13[1] = (33541360 * v25 - 13072 * v29 + 33553113 * v27 + 33553113 * v26 + 14392 * v28 + 16842752) >> 17;
          v11 += 6;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v39 += v34;
      v37 += v32;
      uint64_t v6 = v36 + 1;
      v38 += 2 * v8;
    }
    while (v36 + 1 != v33);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_420fITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    unint64_t v38 = a2 >> 1;
    uint64_t v39 = a5[1];
    uint64_t v9 = a1 >> 1;
    uint64_t v44 = (unsigned char *)a6[1];
    uint64_t v36 = 2 * *a3;
    uint64_t v37 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v35 = v9;
    uint64_t v43 = *a6 + 1;
    uint64_t v42 = *a4;
    do
    {
      uint64_t v41 = v6;
      if (a1 >= 2)
      {
        uint64_t v11 = v42;
        uint64_t v10 = (unsigned char *)v43;
        uint64_t v12 = v35;
        uint64_t v13 = v44;
        do
        {
          CFTypeRef v14 = &v10[v8];
          int v15 = v11[2];
          int v16 = v11[1];
          int v17 = *v11;
          int v18 = v11[6];
          int v19 = v11[5];
          int v20 = v11[4];
          int v21 = v11[v7 + 2];
          int v22 = v11[v7 + 1];
          int v23 = v11[v7];
          int v24 = v11[v7 + 6];
          int v25 = v11[v7 + 5];
          int v26 = v11[v7 + 4];
          *(v10 - 1) = (23436 * v16 + 6966 * v15 + 2366 * v17 + 0x4000) >> 15;
          *uint64_t v10 = (23436 * v19 + 6966 * v18 + 2366 * v20 + 0x4000) >> 15;
          v10 += 2;
          *(v14 - 1) = (23436 * v22 + 6966 * v21 + 2366 * v23 + 0x4000) >> 15;
          *CFTypeRef v14 = (23436 * v25 + 6966 * v24 + 2366 * v26 + 0x4000) >> 15;
          int v27 = v19 + v16 + v22 + v25;
          int v28 = v20 + v17 + v23 + v26;
          int v29 = -3753 * (v18 + v15 + v21 + v24) + (v28 << 14) - 12629 * v27;
          int v30 = -14881 * v27 + ((v21 + v18 + v24 + v15) << 14) - 1501 * v28;
          unsigned int v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF) {
            LOBYTE(v31) = -1;
          }
          *uint64_t v13 = v31;
          unsigned int v32 = v30 + 0x1000000;
          unsigned int v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF) {
            LOBYTE(v33) = -1;
          }
          v13[1] = v33;
          v11 += 8;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v42 += v36;
      uint64_t v6 = v41 + 1;
      v43 += v37;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_420fITU709(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    unint64_t v38 = a2 >> 1;
    uint64_t v39 = a5[1];
    uint64_t v9 = a1 >> 1;
    uint64_t v44 = (unsigned char *)a6[1];
    uint64_t v36 = 2 * *a3;
    uint64_t v37 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v35 = v9;
    uint64_t v43 = *a6 + 1;
    uint64_t v42 = *a4 + 7;
    do
    {
      uint64_t v41 = v6;
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v42;
        uint64_t v11 = (unsigned char *)v43;
        uint64_t v12 = v35;
        uint64_t v13 = v44;
        do
        {
          CFTypeRef v14 = &v11[v8];
          int v15 = *(v10 - 6);
          int v16 = *(v10 - 5);
          int v17 = *(v10 - 4);
          int v18 = *(v10 - 2);
          int v19 = *(v10 - 1);
          int v20 = *v10;
          int v21 = v10[v7 - 6];
          int v22 = v10[v7 - 5];
          int v23 = v10[v7 - 4];
          int v24 = v10[v7 - 2];
          int v25 = v10[v7 - 1];
          int v26 = v10[v7];
          *(v11 - 1) = (23436 * v16 + 6966 * v15 + 2366 * v17 + 0x4000) >> 15;
          *uint64_t v11 = (23436 * v19 + 6966 * v18 + 2366 * v20 + 0x4000) >> 15;
          v11 += 2;
          *(v14 - 1) = (23436 * v22 + 6966 * v21 + 2366 * v23 + 0x4000) >> 15;
          *CFTypeRef v14 = (23436 * v25 + 6966 * v24 + 2366 * v26 + 0x4000) >> 15;
          int v27 = v19 + v16 + v22 + v25;
          int v28 = v20 + v17 + v23 + v26;
          int v29 = -3753 * (v18 + v15 + v21 + v24) + (v28 << 14) - 12629 * v27;
          int v30 = -14881 * v27 + ((v21 + v18 + v24 + v15) << 14) - 1501 * v28;
          unsigned int v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF) {
            LOBYTE(v31) = -1;
          }
          *uint64_t v13 = v31;
          unsigned int v32 = v30 + 0x1000000;
          unsigned int v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF) {
            LOBYTE(v33) = -1;
          }
          v13[1] = v33;
          v13 += 2;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      uint64_t v6 = v41 + 1;
      v43 += v37;
      v42 += v36;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_420fITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    unint64_t v38 = a2 >> 1;
    uint64_t v39 = a5[1];
    uint64_t v9 = a1 >> 1;
    uint64_t v44 = (unsigned char *)a6[1];
    uint64_t v36 = 2 * *a3;
    uint64_t v37 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v35 = v9;
    uint64_t v43 = *a6 + 1;
    uint64_t v42 = *a4;
    do
    {
      uint64_t v41 = v6;
      if (a1 >= 2)
      {
        uint64_t v11 = v42;
        uint64_t v10 = (unsigned char *)v43;
        uint64_t v12 = v35;
        uint64_t v13 = v44;
        do
        {
          CFTypeRef v14 = &v10[v8];
          int v15 = *v11;
          int v16 = v11[1];
          int v17 = v11[2];
          int v18 = v11[3];
          int v19 = v11[4];
          int v20 = v11[5];
          int v21 = v11[v7];
          int v22 = v11[v7 + 1];
          int v23 = v11[v7 + 2];
          int v24 = v11[v7 + 3];
          int v25 = v11[v7 + 4];
          int v26 = v11[v7 + 5];
          *(v10 - 1) = (23436 * v16 + 6966 * v15 + 2366 * v17 + 0x4000) >> 15;
          *uint64_t v10 = (23436 * v19 + 6966 * v18 + 2366 * v20 + 0x4000) >> 15;
          v10 += 2;
          *(v14 - 1) = (23436 * v22 + 6966 * v21 + 2366 * v23 + 0x4000) >> 15;
          *CFTypeRef v14 = (23436 * v25 + 6966 * v24 + 2366 * v26 + 0x4000) >> 15;
          int v27 = v19 + v16 + v22 + v25;
          int v28 = v20 + v17 + v23 + v26;
          int v29 = -3753 * (v18 + v15 + v21 + v24) + (v28 << 14) - 12629 * v27;
          int v30 = -14881 * v27 + ((v21 + v18 + v24 + v15) << 14) - 1501 * v28;
          unsigned int v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF) {
            LOBYTE(v31) = -1;
          }
          *uint64_t v13 = v31;
          unsigned int v32 = v30 + 0x1000000;
          unsigned int v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF) {
            LOBYTE(v33) = -1;
          }
          v13[1] = v33;
          v11 += 6;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v42 += v36;
      uint64_t v6 = v41 + 1;
      v43 += v37;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_OneComponentITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = 2 * *a5;
    uint64_t v11 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v12 = *a4;
    uint64_t v13 = *a6 + 1;
    do
    {
      if (a1 >= 2)
      {
        CFTypeRef v14 = (unsigned char *)v13;
        uint64_t v15 = v9;
        int v16 = v12;
        do
        {
          int v17 = &v14[v8];
          unsigned int v18 = (23436 * v16[5] + 6966 * v16[6] + 2366 * v16[4] + 0x4000) >> 15;
          unsigned int v19 = (23436 * v16[v7 + 1] + 6966 * v16[v7 + 2] + 2366 * v16[v7] + 0x4000) >> 15;
          unsigned int v20 = 23436 * v16[v7 + 5] + 6966 * v16[v7 + 6] + 2366 * v16[v7 + 4] + 0x4000;
          *(v14 - 1) = (23436 * v16[1] + 6966 * v16[2] + 2366 * *v16 + 0x4000) >> 15;
          *CFTypeRef v14 = v18;
          v14 += 2;
          *(v17 - 1) = v19;
          *int v17 = v20 >> 15;
          v16 += 8;
          --v15;
        }
        while (v15);
      }
      v12 += v11;
      ++v6;
      v13 += v10;
    }
    while (v6 != a2 >> 1);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_y420ITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v36 = a5[2];
    uint64_t v37 = a5[1];
    uint64_t v9 = a6[1];
    unint64_t v35 = a2 >> 1;
    uint64_t v34 = 2 * v7;
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = a1 >> 1;
    }
    uint64_t v40 = *a4 + 7;
    uint64_t v41 = *a6 + 1;
    uint64_t v11 = a6[2];
    do
    {
      uint64_t v39 = v6;
      if (a1 >= 2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = (unsigned __int8 *)v40;
        CFTypeRef v14 = (unsigned char *)v41;
        do
        {
          uint64_t v15 = &v14[v8];
          int v16 = *(v13 - 6);
          int v17 = *(v13 - 5);
          int v18 = *(v13 - 4);
          int v19 = *(v13 - 2);
          int v20 = *(v13 - 1);
          int v21 = *v13;
          uint64_t v22 = v7;
          int v23 = &v13[v7];
          int v24 = *(v23 - 6);
          int v25 = *(v23 - 5);
          int v26 = *(v23 - 4);
          int v27 = *(v23 - 2);
          int v28 = *(v23 - 1);
          LODWORD(v23) = *v23;
          *(v14 - 1) = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          *CFTypeRef v14 = (7371 * v19 + 540672 + 19024 * v20 + 1664 * v21) >> 15;
          v14 += 2;
          *(v15 - 1) = (7371 * v24 + 540672 + 19024 * v25 + 1664 * v26) >> 15;
          *uint64_t v15 = (7371 * v27 + 540672 + 19024 * v28 + 1664 * v23) >> 15;
          int v29 = v21 + v18 + v26;
          int v30 = v19 + v16 + v24 + v27;
          LODWORD(v15) = v20 + v17 + v25;
          int v31 = 33544090 * v28 - 10342 * v15 + 33550426 * v30 + 14350 * (v29 + v23);
          int v32 = 33541237 * v28 - 13195 * v15 + 33553279 * v29 + 33553279 * v23;
          uint64_t v7 = v22;
          *(unsigned char *)(v9 + v12) = (v31 + 16842752) >> 17;
          *(unsigned char *)(v11 + v12++) = (v32 + 14350 * v30 + 16842752) >> 17;
          v13 += 8;
        }
        while (v10 != v12);
      }
      v9 += v37;
      v11 += v36;
      uint64_t v6 = v39 + 1;
      v41 += 2 * v8;
      v40 += v34;
    }
    while (v39 + 1 != v35);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_y420ITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v39 = a5[2];
    uint64_t v40 = a5[1];
    unint64_t v9 = a2 >> 1;
    uint64_t v10 = a6[1];
    uint64_t v11 = a6[2];
    uint64_t v37 = 2 * *a5;
    unint64_t v38 = v9;
    uint64_t v36 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = a1 >> 1;
    }
    uint64_t v43 = *a4;
    uint64_t v44 = *a6 + 1;
    do
    {
      uint64_t v42 = v6;
      if (a1 >= 2)
      {
        uint64_t v13 = 0;
        uint64_t v15 = v43;
        CFTypeRef v14 = (unsigned char *)v44;
        do
        {
          int v16 = &v14[v8];
          uint64_t v17 = v7;
          int v18 = &v15[v7];
          int v19 = v15[2];
          int v20 = v15[1];
          int v21 = *v15;
          int v22 = v15[6];
          int v23 = v15[5];
          int v24 = v15[4];
          int v25 = v18[2];
          int v26 = v18[1];
          int v27 = *v18;
          int v28 = v18[6];
          int v29 = v18[5];
          LODWORD(v18) = v18[4];
          *(v14 - 1) = (7371 * v19 + 540672 + 19024 * v20 + 1664 * v21) >> 15;
          *CFTypeRef v14 = (7371 * v22 + 540672 + 19024 * v23 + 1664 * v24) >> 15;
          v14 += 2;
          *(v16 - 1) = (7371 * v25 + 540672 + 19024 * v26 + 1664 * v27) >> 15;
          *int v16 = (7371 * v28 + 540672 + 19024 * v29 + 1664 * v18) >> 15;
          int v30 = v24 + v21 + v27;
          int v31 = v22 + v19 + v25 + v28;
          int v32 = v23 + v20 + v26;
          int v33 = 33544090 * v29 - 10342 * v32 + 33550426 * v31 + 14350 * (v30 + v18);
          int v34 = 33541237 * v29 - 13195 * v32 + 33553279 * v30 + 33553279 * v18;
          uint64_t v7 = v17;
          *(unsigned char *)(v10 + v13) = (v33 + 16842752) >> 17;
          *(unsigned char *)(v11 + v13) = (v34 + 14350 * v31 + 16842752) >> 17;
          v15 += 8;
          ++v13;
        }
        while (v12 != v13);
      }
      v10 += v40;
      v11 += v39;
      v43 += v36;
      uint64_t v6 = v42 + 1;
      v44 += v37;
    }
    while (v42 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_420vITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v38 = a5[1];
    unint64_t v37 = a2 >> 1;
    uint64_t v43 = (unsigned char *)a6[1];
    uint64_t v36 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    uint64_t v35 = v9;
    uint64_t v42 = *a6 + 1;
    uint64_t v41 = *a4 + 7;
    do
    {
      uint64_t v40 = v6;
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v41;
        uint64_t v11 = (unsigned char *)v42;
        uint64_t v12 = v35;
        uint64_t v13 = v43;
        do
        {
          CFTypeRef v14 = &v11[v8];
          int v15 = *(v10 - 6);
          int v16 = *(v10 - 5);
          int v17 = *(v10 - 4);
          int v18 = *(v10 - 2);
          int v19 = *(v10 - 1);
          int v20 = *v10;
          int v21 = &v10[v7];
          uint64_t v22 = v7;
          int v23 = v10[v7 - 6];
          int v24 = *(v21 - 5);
          int v25 = *(v21 - 4);
          int v26 = *(v21 - 2);
          int v27 = *(v21 - 1);
          LODWORD(v21) = *v21;
          *(v11 - 1) = (7371 * v15 + 540672 + 19024 * v16 + 1664 * v17) >> 15;
          *uint64_t v11 = (7371 * v18 + 540672 + 19024 * v19 + 1664 * v20) >> 15;
          v11 += 2;
          *(v14 - 1) = (7371 * v23 + 540672 + 19024 * v24 + 1664 * v25) >> 15;
          *CFTypeRef v14 = (7371 * v26 + 540672 + 19024 * v27 + 1664 * v21) >> 15;
          int v28 = v20 + v17 + v25;
          int v29 = v18 + v15 + v23 + v26;
          int v30 = v19 + v16 + v24;
          int v31 = 33544090 * v27 - 10342 * v30 + 33550426 * v29 + 14350 * (v28 + v21);
          int v32 = 33541237 * v27 - 13195 * v30 + 33553279 * v28 + 33553279 * v21 + 14350 * v29;
          unsigned int v33 = v31 + 16842752;
          uint64_t v7 = v22;
          *uint64_t v13 = v33 >> 17;
          v13[1] = (v32 + 16842752) >> 17;
          v13 += 2;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      v43 += v38;
      uint64_t v6 = v40 + 1;
      v42 += 2 * v8;
      v41 += v36;
    }
    while (v40 + 1 != v37);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_420vITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v34 = a5[1];
    unint64_t v33 = a2 >> 1;
    uint64_t v39 = (unsigned char *)a6[1];
    uint64_t v32 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    uint64_t v31 = v9;
    uint64_t v38 = *a6 + 1;
    unint64_t v37 = *a4;
    do
    {
      uint64_t v36 = v6;
      if (a1 >= 2)
      {
        uint64_t v11 = v37;
        uint64_t v10 = (unsigned char *)v38;
        uint64_t v12 = v31;
        uint64_t v13 = v39;
        do
        {
          CFTypeRef v14 = &v10[v8];
          int v15 = v11[2];
          int v16 = v11[1];
          int v17 = *v11;
          int v18 = v11[6];
          int v19 = v11[5];
          int v20 = v11[4];
          int v21 = v11[v7 + 2];
          int v22 = v11[v7 + 1];
          int v23 = v11[v7];
          int v24 = v11[v7 + 6];
          int v25 = v11[v7 + 5];
          int v26 = v11[v7 + 4];
          *(v10 - 1) = (7371 * v15 + 540672 + 19024 * v16 + 1664 * v17) >> 15;
          *uint64_t v10 = (7371 * v18 + 540672 + 19024 * v19 + 1664 * v20) >> 15;
          v10 += 2;
          *(v14 - 1) = (7371 * v21 + 540672 + 19024 * v22 + 1664 * v23) >> 15;
          *CFTypeRef v14 = (7371 * v24 + 540672 + 19024 * v25 + 1664 * v26) >> 15;
          int v27 = v20 + v17 + v23;
          int v28 = v18 + v15 + v21 + v24;
          int v29 = v19 + v16 + v22;
          *uint64_t v13 = (33544090 * v25 - 10342 * v29 + 33550426 * v28 + 14350 * (v27 + v26) + 16842752) >> 17;
          v13[1] = (33541237 * v25 - 13195 * v29 + 33553279 * v27 + 33553279 * v26 + 14350 * v28 + 16842752) >> 17;
          v11 += 8;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v39 += v34;
      v37 += v32;
      uint64_t v6 = v36 + 1;
      v38 += 2 * v8;
    }
    while (v36 + 1 != v33);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_420vITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v34 = a5[1];
    unint64_t v33 = a2 >> 1;
    uint64_t v39 = (unsigned char *)a6[1];
    uint64_t v32 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    uint64_t v31 = v9;
    uint64_t v38 = *a6 + 1;
    unint64_t v37 = *a4;
    do
    {
      uint64_t v36 = v6;
      if (a1 >= 2)
      {
        uint64_t v11 = v37;
        uint64_t v10 = (unsigned char *)v38;
        uint64_t v12 = v31;
        uint64_t v13 = v39;
        do
        {
          CFTypeRef v14 = &v10[v8];
          int v15 = *v11;
          int v16 = v11[1];
          int v17 = v11[2];
          int v18 = v11[3];
          int v19 = v11[4];
          int v20 = v11[5];
          int v21 = v11[v7];
          int v22 = v11[v7 + 1];
          int v23 = v11[v7 + 2];
          int v24 = v11[v7 + 3];
          int v25 = v11[v7 + 4];
          int v26 = v11[v7 + 5];
          *(v10 - 1) = (7371 * v15 + 540672 + 19024 * v16 + 1664 * v17) >> 15;
          *uint64_t v10 = (7371 * v18 + 540672 + 19024 * v19 + 1664 * v20) >> 15;
          v10 += 2;
          *(v14 - 1) = (7371 * v21 + 540672 + 19024 * v22 + 1664 * v23) >> 15;
          *CFTypeRef v14 = (7371 * v24 + 540672 + 19024 * v25 + 1664 * v26) >> 15;
          int v27 = v20 + v17 + v23;
          int v28 = v18 + v15 + v21 + v24;
          int v29 = v19 + v16 + v22;
          *uint64_t v13 = (33544090 * v25 - 10342 * v29 + 33550426 * v28 + 14350 * (v27 + v26) + 16842752) >> 17;
          v13[1] = (33541237 * v25 - 13195 * v29 + 33553279 * v27 + 33553279 * v26 + 14350 * v28 + 16842752) >> 17;
          v11 += 6;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v39 += v34;
      v37 += v32;
      uint64_t v6 = v36 + 1;
      v38 += 2 * v8;
    }
    while (v36 + 1 != v33);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_420fITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    unint64_t v38 = a2 >> 1;
    uint64_t v39 = a5[1];
    uint64_t v9 = a1 >> 1;
    uint64_t v44 = (unsigned char *)a6[1];
    uint64_t v36 = 2 * *a3;
    uint64_t v37 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v35 = v9;
    uint64_t v43 = *a6 + 1;
    uint64_t v42 = *a4;
    do
    {
      uint64_t v41 = v6;
      if (a1 >= 2)
      {
        uint64_t v11 = v42;
        uint64_t v10 = (unsigned char *)v43;
        uint64_t v12 = v35;
        uint64_t v13 = v44;
        do
        {
          CFTypeRef v14 = &v10[v8];
          int v15 = v11[2];
          int v16 = v11[1];
          int v17 = *v11;
          int v18 = v11[6];
          int v19 = v11[5];
          int v20 = v11[4];
          int v21 = v11[v7 + 2];
          int v22 = v11[v7 + 1];
          int v23 = v11[v7];
          int v24 = v11[v7 + 6];
          int v25 = v11[v7 + 5];
          int v26 = v11[v7 + 4];
          *(v10 - 1) = (22217 * v16 + 8608 * v15 + 1943 * v17 + 0x4000) >> 15;
          *uint64_t v10 = (22217 * v19 + 8608 * v18 + 1943 * v20 + 0x4000) >> 15;
          v10 += 2;
          *(v14 - 1) = (22217 * v22 + 8608 * v21 + 1943 * v23 + 0x4000) >> 15;
          *CFTypeRef v14 = (22217 * v25 + 8608 * v24 + 1943 * v26 + 0x4000) >> 15;
          int v27 = v19 + v16 + v22 + v25;
          int v28 = v20 + v17 + v23 + v26;
          int v29 = -4574 * (v18 + v15 + v21 + v24) + (v28 << 14) - 11808 * v27;
          int v30 = -15065 * v27 + ((v21 + v18 + v24 + v15) << 14) - 1317 * v28;
          unsigned int v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF) {
            LOBYTE(v31) = -1;
          }
          *uint64_t v13 = v31;
          unsigned int v32 = v30 + 0x1000000;
          unsigned int v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF) {
            LOBYTE(v33) = -1;
          }
          v13[1] = v33;
          v11 += 8;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v42 += v36;
      uint64_t v6 = v41 + 1;
      v43 += v37;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_420fITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    unint64_t v38 = a2 >> 1;
    uint64_t v39 = a5[1];
    uint64_t v9 = a1 >> 1;
    uint64_t v44 = (unsigned char *)a6[1];
    uint64_t v36 = 2 * *a3;
    uint64_t v37 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v35 = v9;
    uint64_t v43 = *a6 + 1;
    uint64_t v42 = *a4 + 7;
    do
    {
      uint64_t v41 = v6;
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v42;
        uint64_t v11 = (unsigned char *)v43;
        uint64_t v12 = v35;
        uint64_t v13 = v44;
        do
        {
          CFTypeRef v14 = &v11[v8];
          int v15 = *(v10 - 6);
          int v16 = *(v10 - 5);
          int v17 = *(v10 - 4);
          int v18 = *(v10 - 2);
          int v19 = *(v10 - 1);
          int v20 = *v10;
          int v21 = v10[v7 - 6];
          int v22 = v10[v7 - 5];
          int v23 = v10[v7 - 4];
          int v24 = v10[v7 - 2];
          int v25 = v10[v7 - 1];
          int v26 = v10[v7];
          *(v11 - 1) = (22217 * v16 + 8608 * v15 + 1943 * v17 + 0x4000) >> 15;
          *uint64_t v11 = (22217 * v19 + 8608 * v18 + 1943 * v20 + 0x4000) >> 15;
          v11 += 2;
          *(v14 - 1) = (22217 * v22 + 8608 * v21 + 1943 * v23 + 0x4000) >> 15;
          *CFTypeRef v14 = (22217 * v25 + 8608 * v24 + 1943 * v26 + 0x4000) >> 15;
          int v27 = v19 + v16 + v22 + v25;
          int v28 = v20 + v17 + v23 + v26;
          int v29 = -4574 * (v18 + v15 + v21 + v24) + (v28 << 14) - 11808 * v27;
          int v30 = -15065 * v27 + ((v21 + v18 + v24 + v15) << 14) - 1317 * v28;
          unsigned int v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF) {
            LOBYTE(v31) = -1;
          }
          *uint64_t v13 = v31;
          unsigned int v32 = v30 + 0x1000000;
          unsigned int v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF) {
            LOBYTE(v33) = -1;
          }
          v13[1] = v33;
          v13 += 2;
          v10 += 8;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      uint64_t v6 = v41 + 1;
      v43 += v37;
      v42 += v36;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_420fITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    unint64_t v38 = a2 >> 1;
    uint64_t v39 = a5[1];
    uint64_t v9 = a1 >> 1;
    uint64_t v44 = (unsigned char *)a6[1];
    uint64_t v36 = 2 * *a3;
    uint64_t v37 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v35 = v9;
    uint64_t v43 = *a6 + 1;
    uint64_t v42 = *a4;
    do
    {
      uint64_t v41 = v6;
      if (a1 >= 2)
      {
        uint64_t v11 = v42;
        uint64_t v10 = (unsigned char *)v43;
        uint64_t v12 = v35;
        uint64_t v13 = v44;
        do
        {
          CFTypeRef v14 = &v10[v8];
          int v15 = *v11;
          int v16 = v11[1];
          int v17 = v11[2];
          int v18 = v11[3];
          int v19 = v11[4];
          int v20 = v11[5];
          int v21 = v11[v7];
          int v22 = v11[v7 + 1];
          int v23 = v11[v7 + 2];
          int v24 = v11[v7 + 3];
          int v25 = v11[v7 + 4];
          int v26 = v11[v7 + 5];
          *(v10 - 1) = (22217 * v16 + 8608 * v15 + 1943 * v17 + 0x4000) >> 15;
          *uint64_t v10 = (22217 * v19 + 8608 * v18 + 1943 * v20 + 0x4000) >> 15;
          v10 += 2;
          *(v14 - 1) = (22217 * v22 + 8608 * v21 + 1943 * v23 + 0x4000) >> 15;
          *CFTypeRef v14 = (22217 * v25 + 8608 * v24 + 1943 * v26 + 0x4000) >> 15;
          int v27 = v19 + v16 + v22 + v25;
          int v28 = v20 + v17 + v23 + v26;
          int v29 = -4574 * (v18 + v15 + v21 + v24) + (v28 << 14) - 11808 * v27;
          int v30 = -15065 * v27 + ((v21 + v18 + v24 + v15) << 14) - 1317 * v28;
          unsigned int v31 = (v29 + 16842752) >> 17;
          if ((v29 + 0x1000000) > 0x1FEFFFF) {
            LOBYTE(v31) = -1;
          }
          *uint64_t v13 = v31;
          unsigned int v32 = v30 + 0x1000000;
          unsigned int v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF) {
            LOBYTE(v33) = -1;
          }
          v13[1] = v33;
          v11 += 6;
          v13 += 2;
          --v12;
        }
        while (v12);
      }
      v44 += v39;
      v42 += v36;
      uint64_t v6 = v41 + 1;
      v43 += v37;
    }
    while (v41 + 1 != v38);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_OneComponentITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = 2 * *a5;
    uint64_t v11 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v12 = *a4;
    uint64_t v13 = *a6 + 1;
    do
    {
      if (a1 >= 2)
      {
        CFTypeRef v14 = (unsigned char *)v13;
        uint64_t v15 = v9;
        int v16 = v12;
        do
        {
          int v17 = &v14[v8];
          unsigned int v18 = (22217 * v16[5] + 8608 * v16[6] + 1943 * v16[4] + 0x4000) >> 15;
          unsigned int v19 = (22217 * v16[v7 + 1] + 8608 * v16[v7 + 2] + 1943 * v16[v7] + 0x4000) >> 15;
          unsigned int v20 = 22217 * v16[v7 + 5] + 8608 * v16[v7 + 6] + 1943 * v16[v7 + 4] + 0x4000;
          *(v14 - 1) = (22217 * v16[1] + 8608 * v16[2] + 1943 * *v16 + 0x4000) >> 15;
          *CFTypeRef v14 = v18;
          v14 += 2;
          *(v17 - 1) = v19;
          *int v17 = v20 >> 15;
          v16 += 8;
          --v15;
        }
        while (v15);
      }
      v12 += v11;
      ++v6;
      v13 += v10;
    }
    while (v6 != a2 >> 1);
  }
  return 0;
}

uint64_t vt_Copy_y420ITU601_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, uint8x8_t **a4, uint64_t *a5, char **a6)
{
  uint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = a4[2];
  unint64_t v9 = a1 >> 1;
  uint64_t v10 = *a6;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    uint64_t v14 = a3[2];
    uint64_t v15 = *a5;
    unint64_t v168 = 4 * (a1 >> 3);
    uint64_t v167 = 2 * *a3;
    uint64_t v166 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a1 >> 3;
    }
    uint64_t v17 = 4 * v16;
    unint64_t v18 = v9 - 4 * (a1 >> 3);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    int32x4_t v20 = vdupq_n_s32(0xFFFFCDDC);
    int32x4_t v21 = vdupq_n_s32(0xFFFF97F2);
    int32x4_t v22 = vdupq_n_s32(0x10235u);
    int32x4_t v23 = vdupq_n_s32(0xCC4Bu);
    uint16x8_t v24 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    uint64_t v26 = -1;
    unint64_t v163 = a1 >> 1;
    unint64_t v164 = a1;
    uint64_t v161 = a3[2];
    uint64_t v162 = a3[1];
    do
    {
      if (a1 >= 8)
      {
        unint64_t v33 = 0;
        unsigned int v32 = v6;
        int v29 = v10;
        do
        {
          uint64_t v34 = &v29[v15];
          int32x4_t v35 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v7->u32[v33 / 4]));
          int32x4_t v36 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v8->u32[v33 / 4]));
          int32x4_t v37 = vmlaq_s32(vmulq_s32(v35, v20), v36, v21);
          int32x4_t v38 = vmulq_s32(v35, v22);
          int32x4_t v39 = vmulq_s32(v36, v23);
          int32x4_t v40 = vzip1q_s32(v38, v38);
          int32x4_t v41 = vzip2q_s32(v38, v38);
          int32x4_t v42 = vzip1q_s32(v39, v39);
          uint16x8_t v43 = vmovl_u8(*v32);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)((char *)v32 + v13));
          int32x4_t v45 = vzip2q_s32(v39, v39);
          int32x4_t v46 = (int32x4_t)vmlal_u16(v25, *(uint16x4_t *)v43.i8, *(uint16x4_t *)v24.i8);
          int32x4_t v47 = (int32x4_t)vmlal_high_u16(v25, v43, v24);
          int32x4_t v48 = vzip1q_s32(v37, v37);
          int32x4_t v49 = (int32x4_t)vmlal_u16(v25, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v24.i8);
          int32x4_t v50 = (int32x4_t)vmlal_high_u16(v25, v44, v24);
          int32x4_t v51 = vzip2q_s32(v37, v37);
          v169.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v46), 0xFuLL), vaddq_s32(v45, v47), 0xFuLL));
          v169.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v48, v46), 0xFuLL), vaddq_s32(v51, v47), 0xFuLL));
          int8x8_t v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v49), 0xFuLL), vaddq_s32(v45, v50), 0xFuLL));
          v169.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v40, v46), 0xFuLL), vaddq_s32(v41, v47), 0xFuLL));
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v48, v49), 0xFuLL), vaddq_s32(v51, v50), 0xFuLL));
          int8x8_t v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v40, v49), 0xFuLL), vaddq_s32(v41, v50), 0xFuLL));
          v169.val[0] = (int8x8_t)-1;
          vst4_s8(v29, v169);
          v29 += 32;
          vst4_s8(v34, *(int8x8x4_t *)&v26);
          ++v32;
          v33 += 4;
        }
        while (v17 != v33);
        int v27 = (unsigned __int8 *)v32 + v13;
        unsigned int v31 = (unsigned __int8 *)v7 + v33;
        int v30 = (unsigned __int8 *)v8 + v33;
        int v28 = &v29[v15];
      }
      else
      {
        int v27 = (unsigned __int8 *)v6 + v13;
        int v28 = &v10[v15];
        int v29 = v10;
        int v30 = (unsigned __int8 *)v8;
        unsigned int v31 = (unsigned __int8 *)v7;
        unsigned int v32 = v6;
      }
      if (v9 > v168)
      {
        uint64_t v165 = v11;
        uint64_t v55 = 0;
        do
        {
          int v56 = v31[v55] - 128;
          int v57 = v30[v55] - 128;
          int v58 = v32->u8[1];
          int v59 = 38155 * v32->u8[0] - 610480;
          int v60 = -12836 * v56 - 26638 * v57;
          int v61 = 66101 * v56;
          int v62 = 52299 * v57;
          int v63 = (v59 + v62) >> 15;
          unsigned int v32 = (uint8x8_t *)((char *)v32 + 2);
          if (v63 >= 255) {
            LOBYTE(v63) = -1;
          }
          if (v59 + v62 >= 0) {
            char v64 = v63;
          }
          else {
            char v64 = 0;
          }
          int v65 = (v60 + v59) >> 15;
          if (v65 >= 255) {
            LOBYTE(v65) = -1;
          }
          BOOL v66 = v60 + v59 < 0;
          int v67 = v59 + v61;
          int v68 = v67 >> 15;
          if (v66) {
            LOBYTE(v65) = 0;
          }
          if (v68 >= 255) {
            LOBYTE(v68) = -1;
          }
          BOOL v66 = v67 < 0;
          int v69 = 38155 * v58 - 610480;
          int v70 = v69 + v62;
          if (v66) {
            LOBYTE(v68) = 0;
          }
          int v71 = v70 >> 15;
          if (v70 >> 15 >= 255) {
            LOBYTE(v71) = -1;
          }
          BOOL v66 = v70 < 0;
          int v72 = v69 + v60;
          if (v66) {
            LOBYTE(v71) = 0;
          }
          int v73 = v72 >> 15;
          if (v72 >> 15 >= 255) {
            LOBYTE(v73) = -1;
          }
          int v74 = v69 + v61;
          if (v72 >= 0) {
            char v75 = v73;
          }
          else {
            char v75 = 0;
          }
          int v76 = v74 >> 15;
          if (v74 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v74 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          *int v29 = -1;
          v29[1] = v64;
          v29[2] = v65;
          v29[3] = v68;
          v29[4] = -1;
          v29[5] = v71;
          v29[6] = v75;
          v29[7] = v77;
          v29 += 8;
          int v78 = v27[1];
          int v79 = 38155 * *v27 - 610480;
          v27 += 2;
          int v80 = (v79 + v62) >> 15;
          if (v80 >= 255) {
            LOBYTE(v80) = -1;
          }
          if (v79 + v62 >= 0) {
            char v81 = v80;
          }
          else {
            char v81 = 0;
          }
          int v82 = (v79 + v60) >> 15;
          if (v82 >= 255) {
            LOBYTE(v82) = -1;
          }
          if (v79 + v60 >= 0) {
            char v83 = v82;
          }
          else {
            char v83 = 0;
          }
          int v84 = v79 + v61;
          int v85 = v84 >> 15;
          if (v84 >> 15 >= 255) {
            LOBYTE(v85) = -1;
          }
          if (v84 >= 0) {
            char v86 = v85;
          }
          else {
            char v86 = 0;
          }
          int v87 = 38155 * v78 - 610480;
          int v88 = v87 + v62;
          int v89 = v88 >> 15;
          if (v88 >> 15 >= 255) {
            LOBYTE(v89) = -1;
          }
          if (v88 >= 0) {
            char v90 = v89;
          }
          else {
            char v90 = 0;
          }
          int v91 = v87 + v60;
          int v92 = v91 >> 15;
          if (v91 >> 15 >= 255) {
            LOBYTE(v92) = -1;
          }
          if (v91 >= 0) {
            char v93 = v92;
          }
          else {
            char v93 = 0;
          }
          int v94 = v87 + v61;
          *int v28 = -1;
          v28[1] = v81;
          if (v94 >> 15 >= 255) {
            char v95 = -1;
          }
          else {
            char v95 = v94 >> 15;
          }
          v28[2] = v83;
          v28[3] = v86;
          v28[4] = -1;
          if (v94 >= 0) {
            char v96 = v95;
          }
          else {
            char v96 = 0;
          }
          v28[5] = v90;
          v28[6] = v93;
          v28[7] = v96;
          v28 += 8;
          ++v55;
        }
        while (v18 != v55);
        v31 += v55;
        v30 += v55;
        unint64_t v9 = v163;
        a1 = v164;
        uint64_t v11 = v165;
        uint64_t v14 = v161;
        uint64_t v12 = v162;
      }
      if (a1)
      {
        int v97 = *v31 - 128;
        int v98 = *v30 - 128;
        int v99 = 38155 * v32->u8[0] - 610480;
        int v100 = -12836 * v97 - 26638 * v98;
        int v101 = 66101 * v97;
        int v102 = 52299 * v98;
        int v103 = (v99 + v102) >> 15;
        if (v103 >= 255) {
          LOBYTE(v103) = -1;
        }
        if (v99 + v102 >= 0) {
          char v104 = v103;
        }
        else {
          char v104 = 0;
        }
        int v105 = (v100 + v99) >> 15;
        if (v105 >= 255) {
          LOBYTE(v105) = -1;
        }
        if (v100 + v99 >= 0) {
          char v106 = v105;
        }
        else {
          char v106 = 0;
        }
        int v107 = v99 + v101;
        int v108 = v107 >> 15;
        if (v107 >> 15 >= 255) {
          LOBYTE(v108) = -1;
        }
        if (v107 >= 0) {
          char v109 = v108;
        }
        else {
          char v109 = 0;
        }
        *int v29 = -1;
        v29[1] = v104;
        v29[2] = v106;
        v29[3] = v109;
        int v110 = 38155 * *v27 - 610480;
        int v111 = v110 + v102;
        int v112 = v111 >> 15;
        if (v111 >> 15 >= 255) {
          LOBYTE(v112) = -1;
        }
        if (v111 >= 0) {
          char v113 = v112;
        }
        else {
          char v113 = 0;
        }
        int v114 = v110 + v100;
        int v115 = v114 >> 15;
        if (v114 >> 15 >= 255) {
          LOBYTE(v115) = -1;
        }
        if (v114 >= 0) {
          char v116 = v115;
        }
        else {
          char v116 = 0;
        }
        int v117 = v110 + v101;
        int v118 = v117 >> 15;
        if (v117 >> 15 >= 255) {
          LOBYTE(v118) = -1;
        }
        *int v28 = -1;
        v28[1] = v113;
        if (v117 >= 0) {
          char v119 = v118;
        }
        else {
          char v119 = 0;
        }
        v28[2] = v116;
        v28[3] = v119;
      }
      uint64_t v6 = (uint8x8_t *)((char *)v6 + v167);
      uint64_t v7 = (uint8x8_t *)((char *)v7 + v12);
      uint64_t v8 = (uint8x8_t *)((char *)v8 + v14);
      v10 += v166;
      ++v11;
    }
    while (v11 != a2 >> 1);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v9 <= 1) {
        uint64_t v120 = 1;
      }
      else {
        uint64_t v120 = v9;
      }
      do
      {
        int v121 = v7->u8[0];
        uint64_t v7 = (uint8x8_t *)((char *)v7 + 1);
        int v122 = v121 - 128;
        int v123 = v8->u8[0];
        uint64_t v8 = (uint8x8_t *)((char *)v8 + 1);
        int v124 = v6->u8[0];
        int v125 = v6->u8[1];
        uint64_t v6 = (uint8x8_t *)((char *)v6 + 2);
        int v126 = 38155 * v124 - 610480;
        int v127 = -12836 * v122 - 26638 * (v123 - 128);
        int v128 = 66101 * v122;
        int v129 = 52299 * (v123 - 128);
        int v130 = (v126 + v129) >> 15;
        if (v130 >= 255) {
          LOBYTE(v130) = -1;
        }
        if (v126 + v129 >= 0) {
          char v131 = v130;
        }
        else {
          char v131 = 0;
        }
        int v132 = (v127 + v126) >> 15;
        if (v132 >= 255) {
          LOBYTE(v132) = -1;
        }
        if (v127 + v126 >= 0) {
          char v133 = v132;
        }
        else {
          char v133 = 0;
        }
        int v134 = v126 + v128;
        int v135 = v134 >> 15;
        if (v134 >> 15 >= 255) {
          LOBYTE(v135) = -1;
        }
        if (v134 >= 0) {
          char v136 = v135;
        }
        else {
          char v136 = 0;
        }
        int v137 = 38155 * v125 - 610480;
        int v138 = v137 + v129;
        int v139 = v138 >> 15;
        if (v138 >> 15 >= 255) {
          LOBYTE(v139) = -1;
        }
        if (v138 >= 0) {
          char v140 = v139;
        }
        else {
          char v140 = 0;
        }
        int v141 = v137 + v127;
        int v142 = v141 >> 15;
        if (v141 >> 15 >= 255) {
          LOBYTE(v142) = -1;
        }
        if (v141 >= 0) {
          char v143 = v142;
        }
        else {
          char v143 = 0;
        }
        int v144 = v137 + v128;
        int v145 = v144 >> 15;
        *uint64_t v10 = -1;
        v10[1] = v131;
        if (v144 >> 15 >= 255) {
          LOBYTE(v145) = -1;
        }
        void v10[2] = v133;
        v10[3] = v136;
        v10[4] = -1;
        v10[5] = v140;
        if (v144 >= 0) {
          char v146 = v145;
        }
        else {
          char v146 = 0;
        }
        v10[6] = v143;
        v10[7] = v146;
        v10 += 8;
        --v120;
      }
      while (v120);
    }
    if (a1)
    {
      int v147 = v7->u8[0] - 128;
      int v148 = v8->u8[0] - 128;
      int v149 = 38155 * v6->u8[0] - 610480;
      int v150 = -12836 * v147 - 26638 * v148;
      int v151 = v149 + 52299 * v148;
      int v152 = v151 >> 15;
      if (v151 >> 15 >= 255) {
        LOBYTE(v152) = -1;
      }
      if (v151 >= 0) {
        char v153 = v152;
      }
      else {
        char v153 = 0;
      }
      int v154 = v150 + v149;
      int v155 = v154 >> 15;
      if (v154 >> 15 >= 255) {
        LOBYTE(v155) = -1;
      }
      if (v154 >= 0) {
        char v156 = v155;
      }
      else {
        char v156 = 0;
      }
      int v157 = v149 + 66101 * v147;
      int v158 = v157 >> 15;
      if (v157 >> 15 >= 255) {
        LOBYTE(v158) = -1;
      }
      *uint64_t v10 = -1;
      v10[1] = v153;
      if (v157 >= 0) {
        char v159 = v158;
      }
      else {
        char v159 = 0;
      }
      void v10[2] = v156;
      v10[3] = v159;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU601_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = a1 >> 1;
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  unint64_t v9 = v8 + 1;
  uint64_t v10 = *a6;
  unint64_t v167 = a1;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a5;
    unint64_t v15 = a2 >> 1;
    unint64_t v171 = 4 * (a1 >> 3);
    uint64_t v172 = v13;
    uint64_t v170 = 2 * v12;
    if (a1 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a1 >> 3;
    }
    uint64_t v165 = v12;
    unint64_t v166 = a1 >> 1;
    uint64_t v17 = &v7[v12];
    unint64_t v163 = v6 - 4 * (a1 >> 3);
    uint64_t v164 = v16;
    int32x4_t v18 = vdupq_n_s32(0xFFFFCDDC);
    int32x4_t v19 = vdupq_n_s32(0xFFFF97F2);
    int32x4_t v20 = vdupq_n_s32(0x10235u);
    int32x4_t v21 = vdupq_n_s32(0xCC4Bu);
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    uint64_t v25 = -1;
    do
    {
      if (a1 >= 8)
      {
        uint64_t v32 = 0;
        uint64_t v33 = v164;
        int v28 = v10;
        do
        {
          uint64_t v34 = &v28[v14];
          int8x8_t v35 = *(int8x8_t *)&v8[v32];
          int32x4_t v36 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v35, *(int8x8_t *)v18.i8)));
          int32x4_t v37 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v35, *(int8x8_t *)v18.i8)));
          int32x4_t v38 = vmlaq_s32(vmulq_s32(v36, v18), v37, v19);
          int32x4_t v39 = vmulq_s32(v36, v20);
          int32x4_t v40 = vmulq_s32(v37, v21);
          int32x4_t v41 = vzip1q_s32(v39, v39);
          int32x4_t v42 = vzip2q_s32(v39, v39);
          int32x4_t v43 = vzip1q_s32(v40, v40);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v7[v32]);
          uint16x8_t v45 = vmovl_u8(*(uint8x8_t *)&v17[v32]);
          int32x4_t v46 = vzip1q_s32(v38, v38);
          int32x4_t v47 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v23.i8);
          int32x4_t v48 = (int32x4_t)vmlal_high_u16(v24, v44, v23);
          int32x4_t v49 = vzip2q_s32(v40, v40);
          int32x4_t v50 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v23.i8);
          int32x4_t v51 = (int32x4_t)vmlal_high_u16(v24, v45, v23);
          int32x4_t v52 = vzip2q_s32(v38, v38);
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v47), 0xFuLL), vaddq_s32(v49, v48), 0xFuLL));
          int8x8_t v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v47), 0xFuLL), vaddq_s32(v52, v48), 0xFuLL));
          v173.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v50), 0xFuLL), vaddq_s32(v49, v51), 0xFuLL));
          int8x8_t v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v47), 0xFuLL), vaddq_s32(v42, v48), 0xFuLL));
          v173.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v50), 0xFuLL), vaddq_s32(v52, v51), 0xFuLL));
          vst4_s8(v28, *(int8x8x4_t *)&v25);
          v28 += 32;
          v173.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v50), 0xFuLL), vaddq_s32(v42, v51), 0xFuLL));
          v173.val[0] = (int8x8_t)-1;
          vst4_s8(v34, v173);
          v32 += 8;
          --v33;
        }
        while (v33);
        unsigned int v31 = &v7[v32];
        uint64_t v26 = &v17[v32];
        int v30 = &v8[v32];
        int v29 = &v8[v32 + 1];
        int v27 = &v28[v14];
      }
      else
      {
        uint64_t v26 = &v7[v165];
        int v27 = &v10[v14];
        int v28 = v10;
        int v29 = v9;
        int v30 = v8;
        unsigned int v31 = v7;
      }
      if (v6 > v171)
      {
        uint64_t v168 = v11;
        int8x8x4_t v169 = v9;
        unint64_t v56 = v163;
        do
        {
          int v57 = *v30;
          v30 += 2;
          int v58 = v57 - 128;
          int v59 = *v29;
          v29 += 2;
          int v60 = 38155 * *v31 - 610480;
          int v61 = -12836 * v58 - 26638 * (v59 - 128);
          int v62 = 66101 * v58;
          int v63 = 52299 * (v59 - 128);
          int v64 = (v60 + v63) >> 15;
          if (v64 >= 255) {
            LOBYTE(v64) = -1;
          }
          if (v60 + v63 >= 0) {
            char v65 = v64;
          }
          else {
            char v65 = 0;
          }
          int v66 = (v61 + v60) >> 15;
          if (v66 >= 255) {
            LOBYTE(v66) = -1;
          }
          BOOL v67 = v61 + v60 < 0;
          int v68 = v60 + v62;
          int v69 = v68 >> 15;
          if (v67) {
            LOBYTE(v66) = 0;
          }
          if (v69 >= 255) {
            LOBYTE(v69) = -1;
          }
          BOOL v67 = v68 < 0;
          int v70 = 38155 * v31[1] - 610480;
          int v71 = v70 + v63;
          if (v67) {
            LOBYTE(v69) = 0;
          }
          int v72 = v71 >> 15;
          if (v71 >> 15 >= 255) {
            LOBYTE(v72) = -1;
          }
          BOOL v67 = v71 < 0;
          int v73 = v70 + v61;
          if (v67) {
            LOBYTE(v72) = 0;
          }
          int v74 = v73 >> 15;
          if (v73 >> 15 >= 255) {
            LOBYTE(v74) = -1;
          }
          int v75 = v70 + v62;
          if (v73 < 0) {
            LOBYTE(v74) = 0;
          }
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v75 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          v31 += 2;
          *int v28 = -1;
          v28[1] = v65;
          v28[2] = v66;
          v28[3] = v69;
          v28[4] = -1;
          v28[5] = v72;
          v28[6] = v74;
          v28[7] = v77;
          v28 += 8;
          int v78 = *v26;
          int v79 = v26[1];
          v26 += 2;
          int v80 = 38155 * v78 - 610480;
          int v81 = (v80 + v63) >> 15;
          if (v81 >= 255) {
            LOBYTE(v81) = -1;
          }
          if (v80 + v63 >= 0) {
            char v82 = v81;
          }
          else {
            char v82 = 0;
          }
          int v83 = (v80 + v61) >> 15;
          if (v83 >= 255) {
            LOBYTE(v83) = -1;
          }
          if (v80 + v61 >= 0) {
            char v84 = v83;
          }
          else {
            char v84 = 0;
          }
          int v85 = v80 + v62;
          int v86 = v85 >> 15;
          if (v85 >> 15 >= 255) {
            LOBYTE(v86) = -1;
          }
          if (v85 >= 0) {
            char v87 = v86;
          }
          else {
            char v87 = 0;
          }
          int v88 = 38155 * v79 - 610480;
          int v89 = v88 + v63;
          int v90 = (v88 + v63) >> 15;
          if (v90 >= 255) {
            LOBYTE(v90) = -1;
          }
          if (v89 >= 0) {
            char v91 = v90;
          }
          else {
            char v91 = 0;
          }
          int v92 = v88 + v61;
          int v93 = v92 >> 15;
          if (v92 >> 15 >= 255) {
            LOBYTE(v93) = -1;
          }
          int v94 = v88 + v62;
          int v95 = v94 >> 15;
          *int v27 = -1;
          v27[1] = v82;
          if (v92 >= 0) {
            char v96 = v93;
          }
          else {
            char v96 = 0;
          }
          if (v95 >= 255) {
            LOBYTE(v95) = -1;
          }
          v27[2] = v84;
          v27[4] = -1;
          v27[3] = v87;
          v27[5] = v91;
          if (v94 >= 0) {
            char v97 = v95;
          }
          else {
            char v97 = 0;
          }
          v27[6] = v96;
          v27[7] = v97;
          v27 += 8;
          --v56;
        }
        while (v56);
        unint64_t v6 = v166;
        a1 = v167;
        uint64_t v11 = v168;
        unint64_t v9 = v169;
        unint64_t v15 = a2 >> 1;
      }
      if (a1)
      {
        int v98 = *v30 - 128;
        int v99 = *v29 - 128;
        int v100 = 38155 * *v31 - 610480;
        int v101 = -12836 * v98 - 26638 * v99;
        int v102 = 66101 * v98;
        int v103 = 52299 * v99;
        int v104 = (v100 + v103) >> 15;
        if (v104 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v100 + v103 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = (v101 + v100) >> 15;
        if (v106 >= 255) {
          LOBYTE(v106) = -1;
        }
        if (v101 + v100 >= 0) {
          char v107 = v106;
        }
        else {
          char v107 = 0;
        }
        int v108 = v100 + v102;
        int v109 = v108 >> 15;
        if (v108 >> 15 >= 255) {
          LOBYTE(v109) = -1;
        }
        if (v108 >= 0) {
          char v110 = v109;
        }
        else {
          char v110 = 0;
        }
        *int v28 = -1;
        v28[1] = v105;
        v28[2] = v107;
        v28[3] = v110;
        int v111 = 38155 * *v26 - 610480;
        int v112 = v111 + v103;
        int v113 = v112 >> 15;
        if (v112 >> 15 >= 255) {
          LOBYTE(v113) = -1;
        }
        if (v112 >= 0) {
          char v114 = v113;
        }
        else {
          char v114 = 0;
        }
        int v115 = v111 + v101;
        int v116 = v115 >> 15;
        if (v115 >> 15 >= 255) {
          LOBYTE(v116) = -1;
        }
        if (v115 >= 0) {
          char v117 = v116;
        }
        else {
          char v117 = 0;
        }
        int v118 = v111 + v102;
        int v119 = v118 >> 15;
        if (v118 >> 15 >= 255) {
          LOBYTE(v119) = -1;
        }
        *int v27 = -1;
        v27[1] = v114;
        if (v118 >= 0) {
          char v120 = v119;
        }
        else {
          char v120 = 0;
        }
        v27[2] = v117;
        v27[3] = v120;
      }
      v7 += v170;
      v8 += v172;
      v9 += v172;
      v10 += 2 * v14;
      ++v11;
      v17 += v170;
    }
    while (v11 != v15);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v6 <= 1) {
        uint64_t v121 = 1;
      }
      else {
        uint64_t v121 = v6;
      }
      do
      {
        int v122 = *v8;
        v8 += 2;
        int v123 = v122 - 128;
        int v124 = *v9;
        int v125 = *v7;
        int v126 = v9 + 2;
        int v127 = v7[1];
        v7 += 2;
        int v128 = 38155 * v125 - 610480;
        int v129 = -12836 * v123 - 26638 * (v124 - 128);
        int v130 = 66101 * v123;
        int v131 = 52299 * (v124 - 128);
        int v132 = (v128 + v131) >> 15;
        if (v132 >= 255) {
          LOBYTE(v132) = -1;
        }
        if (v128 + v131 >= 0) {
          char v133 = v132;
        }
        else {
          char v133 = 0;
        }
        int v134 = (v129 + v128) >> 15;
        if (v134 >= 255) {
          LOBYTE(v134) = -1;
        }
        if (v129 + v128 >= 0) {
          char v135 = v134;
        }
        else {
          char v135 = 0;
        }
        int v136 = v128 + v130;
        int v137 = v136 >> 15;
        if (v136 >> 15 >= 255) {
          LOBYTE(v137) = -1;
        }
        if (v136 >= 0) {
          char v138 = v137;
        }
        else {
          char v138 = 0;
        }
        int v139 = 38155 * v127 - 610480;
        int v140 = v139 + v131;
        int v141 = v140 >> 15;
        if (v140 >> 15 >= 255) {
          LOBYTE(v141) = -1;
        }
        if (v140 >= 0) {
          char v142 = v141;
        }
        else {
          char v142 = 0;
        }
        int v143 = v139 + v129;
        int v144 = v143 >> 15;
        if (v143 >> 15 >= 255) {
          LOBYTE(v144) = -1;
        }
        if (v143 >= 0) {
          char v145 = v144;
        }
        else {
          char v145 = 0;
        }
        int v146 = v139 + v130;
        int v147 = v146 >> 15;
        *uint64_t v10 = -1;
        v10[1] = v133;
        if (v146 >> 15 >= 255) {
          LOBYTE(v147) = -1;
        }
        void v10[2] = v135;
        v10[3] = v138;
        v10[4] = -1;
        v10[5] = v142;
        if (v146 >= 0) {
          char v148 = v147;
        }
        else {
          char v148 = 0;
        }
        unint64_t v9 = v126;
        v10[6] = v145;
        v10[7] = v148;
        v10 += 8;
        --v121;
      }
      while (v121);
      LOBYTE(a1) = v167;
    }
    if (a1)
    {
      int v149 = *v8 - 128;
      int v150 = *v9 - 128;
      int v151 = 38155 * *v7 - 610480;
      int v152 = -12836 * v149 - 26638 * v150;
      int v153 = v151 + 52299 * v150;
      int v154 = v153 >> 15;
      if (v153 >> 15 >= 255) {
        LOBYTE(v154) = -1;
      }
      if (v153 >= 0) {
        char v155 = v154;
      }
      else {
        char v155 = 0;
      }
      int v156 = v152 + v151;
      int v157 = v156 >> 15;
      if (v156 >> 15 >= 255) {
        LOBYTE(v157) = -1;
      }
      if (v156 >= 0) {
        char v158 = v157;
      }
      else {
        char v158 = 0;
      }
      int v159 = v151 + 66101 * v149;
      int v160 = v159 >> 15;
      if (v159 >> 15 >= 255) {
        LOBYTE(v160) = -1;
      }
      *uint64_t v10 = -1;
      v10[1] = v155;
      if (v159 >= 0) {
        char v161 = v160;
      }
      else {
        char v161 = 0;
      }
      void v10[2] = v158;
      v10[3] = v161;
    }
  }
  return 0;
}

uint64_t vt_Copy_y420ITU601_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, uint8x8_t **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = a4[2];
  unint64_t v9 = a1 >> 1;
  uint64_t v10 = *a6;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    uint64_t v14 = a3[2];
    uint64_t v15 = *a5;
    unint64_t v165 = 4 * (a1 >> 3);
    uint64_t v164 = 2 * *a3;
    uint64_t v163 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a1 >> 3;
    }
    uint64_t v17 = 4 * v16;
    unint64_t v18 = v9 - 4 * (a1 >> 3);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    int32x4_t v20 = vdupq_n_s32(0xFFFFCDDC);
    int32x4_t v21 = vdupq_n_s32(0xFFFF97F2);
    int32x4_t v22 = vdupq_n_s32(0x10235u);
    int32x4_t v23 = vdupq_n_s32(0xCC4Bu);
    uint16x8_t v24 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    uint64_t v26 = -1;
    unint64_t v160 = a1 >> 1;
    unint64_t v161 = a1;
    uint64_t v158 = a3[2];
    uint64_t v159 = a3[1];
    do
    {
      if (a1 >= 8)
      {
        unint64_t v33 = 0;
        uint64_t v32 = v6;
        int v29 = v10;
        do
        {
          uint64_t v34 = &v29[v15];
          int32x4_t v35 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v7->u32[v33 / 4]));
          int32x4_t v36 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v8->u32[v33 / 4]));
          int32x4_t v37 = vmlaq_s32(vmulq_s32(v35, v20), v36, v21);
          int32x4_t v38 = vmulq_s32(v35, v22);
          int32x4_t v39 = vmulq_s32(v36, v23);
          int32x4_t v40 = vzip1q_s32(v38, v38);
          int32x4_t v41 = vzip2q_s32(v38, v38);
          int32x4_t v42 = vzip1q_s32(v39, v39);
          uint16x8_t v43 = vmovl_u8(*v32);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)((char *)v32 + v13));
          int32x4_t v45 = vzip1q_s32(v37, v37);
          int32x4_t v46 = (int32x4_t)vmlal_u16(v25, *(uint16x4_t *)v43.i8, *(uint16x4_t *)v24.i8);
          int32x4_t v47 = (int32x4_t)vmlal_high_u16(v25, v43, v24);
          int32x4_t v48 = vzip2q_s32(v39, v39);
          int32x4_t v49 = (int32x4_t)vmlal_u16(v25, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v24.i8);
          int32x4_t v50 = (int32x4_t)vmlal_high_u16(v25, v44, v24);
          int32x4_t v51 = vzip2q_s32(v37, v37);
          int8x8_t v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v46), 0xFuLL), vaddq_s32(v48, v47), 0xFuLL));
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v45, v46), 0xFuLL), vaddq_s32(v51, v47), 0xFuLL));
          v166.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v49), 0xFuLL), vaddq_s32(v48, v50), 0xFuLL));
          int8x8_t v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v40, v46), 0xFuLL), vaddq_s32(v41, v47), 0xFuLL));
          v166.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v45, v49), 0xFuLL), vaddq_s32(v51, v50), 0xFuLL));
          vst4_s8(v29, *(int8x8x4_t *)(&v26 - 3));
          v29 += 32;
          v166.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v40, v49), 0xFuLL), vaddq_s32(v41, v50), 0xFuLL));
          v166.val[3] = (int8x8_t)-1;
          vst4_s8(v34, v166);
          ++v32;
          v33 += 4;
        }
        while (v17 != v33);
        int v27 = (unsigned __int8 *)v32 + v13;
        unsigned int v31 = (unsigned __int8 *)v7 + v33;
        int v30 = (unsigned __int8 *)v8 + v33;
        int v28 = &v29[v15];
      }
      else
      {
        int v27 = (unsigned __int8 *)v6 + v13;
        int v28 = &v10[v15];
        int v29 = v10;
        int v30 = (unsigned __int8 *)v8;
        unsigned int v31 = (unsigned __int8 *)v7;
        uint64_t v32 = v6;
      }
      if (v9 > v165)
      {
        uint64_t v162 = v11;
        uint64_t v55 = 0;
        do
        {
          int v56 = v31[v55] - 128;
          int v57 = v30[v55] - 128;
          int v58 = v32->u8[1];
          int v59 = 38155 * v32->u8[0] - 610480;
          int v60 = -12836 * v56 - 26638 * v57;
          int v61 = 66101 * v56;
          int v62 = 52299 * v57;
          int v63 = (v59 + v62) >> 15;
          uint64_t v32 = (uint8x8_t *)((char *)v32 + 2);
          if (v63 >= 255) {
            LOBYTE(v63) = -1;
          }
          if (v59 + v62 >= 0) {
            char v64 = v63;
          }
          else {
            char v64 = 0;
          }
          int v65 = (v60 + v59) >> 15;
          if (v65 >= 255) {
            LOBYTE(v65) = -1;
          }
          BOOL v66 = v60 + v59 < 0;
          int v67 = v59 + v61;
          int v68 = v67 >> 15;
          if (v66) {
            LOBYTE(v65) = 0;
          }
          if (v68 >= 255) {
            LOBYTE(v68) = -1;
          }
          BOOL v66 = v67 < 0;
          int v69 = 38155 * v58 - 610480;
          int v70 = v69 + v62;
          if (v66) {
            LOBYTE(v68) = 0;
          }
          int v71 = v70 >> 15;
          if (v70 >> 15 >= 255) {
            LOBYTE(v71) = -1;
          }
          BOOL v66 = v70 < 0;
          int v72 = v69 + v60;
          if (v66) {
            LOBYTE(v71) = 0;
          }
          int v73 = v72 >> 15;
          if (v72 >> 15 >= 255) {
            LOBYTE(v73) = -1;
          }
          int v74 = v69 + v61;
          if (v72 >= 0) {
            char v75 = v73;
          }
          else {
            char v75 = 0;
          }
          int v76 = v74 >> 15;
          if (v74 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v74 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          *int v29 = v68;
          v29[1] = v65;
          v29[2] = v64;
          v29[3] = -1;
          v29[5] = v75;
          v29[6] = v71;
          v29[4] = v77;
          v29[7] = -1;
          v29 += 8;
          int v78 = v27[1];
          int v79 = 38155 * *v27 - 610480;
          v27 += 2;
          int v80 = (v79 + v62) >> 15;
          if (v80 >= 255) {
            LOBYTE(v80) = -1;
          }
          if (v79 + v62 >= 0) {
            char v81 = v80;
          }
          else {
            char v81 = 0;
          }
          int v82 = (v79 + v60) >> 15;
          if (v82 >= 255) {
            LOBYTE(v82) = -1;
          }
          if (v79 + v60 >= 0) {
            char v83 = v82;
          }
          else {
            char v83 = 0;
          }
          int v84 = v79 + v61;
          int v85 = v84 >> 15;
          if (v84 >> 15 >= 255) {
            LOBYTE(v85) = -1;
          }
          if (v84 >= 0) {
            char v86 = v85;
          }
          else {
            char v86 = 0;
          }
          int v87 = 38155 * v78 - 610480;
          int v88 = v87 + v62;
          int v89 = v88 >> 15;
          if (v88 >> 15 >= 255) {
            LOBYTE(v89) = -1;
          }
          if (v88 >= 0) {
            char v90 = v89;
          }
          else {
            char v90 = 0;
          }
          int v91 = v87 + v60;
          int v92 = v91 >> 15;
          if (v91 >> 15 >= 255) {
            LOBYTE(v92) = -1;
          }
          if (v91 >= 0) {
            char v93 = v92;
          }
          else {
            char v93 = 0;
          }
          int v94 = v87 + v61;
          v28[1] = v83;
          *int v28 = v86;
          if (v94 >> 15 >= 255) {
            char v95 = -1;
          }
          else {
            char v95 = v94 >> 15;
          }
          v28[2] = v81;
          v28[3] = -1;
          if (v94 < 0) {
            char v95 = 0;
          }
          v28[4] = v95;
          v28[5] = v93;
          v28[6] = v90;
          v28[7] = -1;
          v28 += 8;
          ++v55;
        }
        while (v18 != v55);
        v31 += v55;
        v30 += v55;
        unint64_t v9 = v160;
        a1 = v161;
        uint64_t v11 = v162;
        uint64_t v14 = v158;
        uint64_t v12 = v159;
      }
      if (a1)
      {
        int v96 = *v31 - 128;
        int v97 = *v30 - 128;
        int v98 = 38155 * v32->u8[0] - 610480;
        int v99 = -12836 * v96 - 26638 * v97;
        int v100 = 66101 * v96;
        int v101 = 52299 * v97;
        int v102 = (v98 + v101) >> 15;
        if (v102 >= 255) {
          LOBYTE(v102) = -1;
        }
        if (v98 + v101 >= 0) {
          char v103 = v102;
        }
        else {
          char v103 = 0;
        }
        int v104 = (v99 + v98) >> 15;
        if (v104 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v99 + v98 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = v98 + v100;
        int v107 = v106 >> 15;
        if (v106 >> 15 >= 255) {
          LOBYTE(v107) = -1;
        }
        if (v106 >= 0) {
          char v108 = v107;
        }
        else {
          char v108 = 0;
        }
        *int v29 = v108;
        v29[1] = v105;
        v29[2] = v103;
        v29[3] = -1;
        int v109 = 38155 * *v27 - 610480;
        int v110 = v109 + v101;
        int v111 = v110 >> 15;
        if (v110 >> 15 >= 255) {
          LOBYTE(v111) = -1;
        }
        if (v110 >= 0) {
          char v112 = v111;
        }
        else {
          char v112 = 0;
        }
        int v113 = v109 + v99;
        int v114 = v113 >> 15;
        if (v113 >> 15 >= 255) {
          LOBYTE(v114) = -1;
        }
        if (v113 >= 0) {
          char v115 = v114;
        }
        else {
          char v115 = 0;
        }
        int v116 = v109 + v100;
        int v117 = v116 >> 15;
        if (v116 >> 15 >= 255) {
          LOBYTE(v117) = -1;
        }
        if (v116 >= 0) {
          char v118 = v117;
        }
        else {
          char v118 = 0;
        }
        *int v28 = v118;
        v28[1] = v115;
        v28[2] = v112;
        v28[3] = -1;
      }
      unint64_t v6 = (uint8x8_t *)((char *)v6 + v164);
      uint64_t v7 = (uint8x8_t *)((char *)v7 + v12);
      uint64_t v8 = (uint8x8_t *)((char *)v8 + v14);
      v10 += v163;
      ++v11;
    }
    while (v11 != a2 >> 1);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v9 <= 1) {
        uint64_t v119 = 1;
      }
      else {
        uint64_t v119 = v9;
      }
      do
      {
        int v120 = v7->u8[0];
        uint64_t v7 = (uint8x8_t *)((char *)v7 + 1);
        int v121 = v120 - 128;
        int v122 = v8->u8[0];
        uint64_t v8 = (uint8x8_t *)((char *)v8 + 1);
        int v123 = 38155 * v6->u8[0] - 610480;
        int v124 = -12836 * v121 - 26638 * (v122 - 128);
        int v125 = 66101 * v121;
        int v126 = 52299 * (v122 - 128);
        int v127 = (v123 + v126) >> 15;
        if (v127 >= 255) {
          LOBYTE(v127) = -1;
        }
        if (v123 + v126 >= 0) {
          char v128 = v127;
        }
        else {
          char v128 = 0;
        }
        int v129 = (v124 + v123) >> 15;
        if (v129 >= 255) {
          LOBYTE(v129) = -1;
        }
        if (v124 + v123 >= 0) {
          char v130 = v129;
        }
        else {
          char v130 = 0;
        }
        int v131 = v123 + v125;
        int v132 = v131 >> 15;
        if (v131 >> 15 >= 255) {
          LOBYTE(v132) = -1;
        }
        if (v131 >= 0) {
          char v133 = v132;
        }
        else {
          char v133 = 0;
        }
        int v134 = 38155 * v6->u8[1] - 610480;
        int v135 = v134 + v126;
        int v136 = v135 >> 15;
        if (v135 >> 15 >= 255) {
          LOBYTE(v136) = -1;
        }
        if (v135 >= 0) {
          char v137 = v136;
        }
        else {
          char v137 = 0;
        }
        int v138 = v134 + v124;
        int v139 = v138 >> 15;
        if (v138 >> 15 >= 255) {
          LOBYTE(v139) = -1;
        }
        if (v138 >= 0) {
          char v140 = v139;
        }
        else {
          char v140 = 0;
        }
        int v141 = v134 + v125;
        *uint64_t v10 = v133;
        v10[1] = v130;
        if (v141 >> 15 >= 255) {
          char v142 = -1;
        }
        else {
          char v142 = v141 >> 15;
        }
        void v10[2] = v128;
        v10[3] = -1;
        if (v141 >= 0) {
          char v143 = v142;
        }
        else {
          char v143 = 0;
        }
        v10[4] = v143;
        v10[5] = v140;
        unint64_t v6 = (uint8x8_t *)((char *)v6 + 2);
        v10[6] = v137;
        v10[7] = -1;
        v10 += 8;
        --v119;
      }
      while (v119);
    }
    if (a1)
    {
      int v144 = v7->u8[0] - 128;
      int v145 = v8->u8[0] - 128;
      int v146 = 38155 * v6->u8[0] - 610480;
      int v147 = -12836 * v144 - 26638 * v145;
      int v148 = v146 + 52299 * v145;
      int v149 = v148 >> 15;
      if (v148 >> 15 >= 255) {
        LOBYTE(v149) = -1;
      }
      if (v148 >= 0) {
        char v150 = v149;
      }
      else {
        char v150 = 0;
      }
      int v151 = v147 + v146;
      int v152 = v151 >> 15;
      if (v151 >> 15 >= 255) {
        LOBYTE(v152) = -1;
      }
      if (v151 >= 0) {
        char v153 = v152;
      }
      else {
        char v153 = 0;
      }
      int v154 = v146 + 66101 * v144;
      int v155 = v154 >> 15;
      if (v154 >> 15 >= 255) {
        LOBYTE(v155) = -1;
      }
      if (v154 >= 0) {
        char v156 = v155;
      }
      else {
        char v156 = 0;
      }
      *uint64_t v10 = v156;
      v10[1] = v153;
      void v10[2] = v150;
      v10[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU601_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = a1 >> 1;
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  unint64_t v9 = v8 + 1;
  uint64_t v10 = *a6;
  unint64_t v163 = a1;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a5;
    unint64_t v15 = a2 >> 1;
    unint64_t v167 = 4 * (a1 >> 3);
    uint64_t v168 = v13;
    uint64_t v166 = 2 * v12;
    if (a1 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a1 >> 3;
    }
    uint64_t v161 = v12;
    unint64_t v162 = a1 >> 1;
    uint64_t v17 = &v7[v12];
    unint64_t v159 = v6 - 4 * (a1 >> 3);
    uint64_t v160 = v16;
    int32x4_t v18 = vdupq_n_s32(0xFFFFCDDC);
    int32x4_t v19 = vdupq_n_s32(0xFFFF97F2);
    int32x4_t v20 = vdupq_n_s32(0x10235u);
    int32x4_t v21 = vdupq_n_s32(0xCC4Bu);
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    uint64_t v25 = -1;
    do
    {
      if (a1 >= 8)
      {
        uint64_t v32 = 0;
        uint64_t v33 = v160;
        int v28 = v10;
        do
        {
          uint64_t v34 = &v28[v14];
          int8x8_t v35 = *(int8x8_t *)&v8[v32];
          int32x4_t v36 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v35, *(int8x8_t *)v18.i8)));
          int32x4_t v37 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v35, *(int8x8_t *)v18.i8)));
          int32x4_t v38 = vmlaq_s32(vmulq_s32(v36, v18), v37, v19);
          int32x4_t v39 = vmulq_s32(v36, v20);
          int32x4_t v40 = vmulq_s32(v37, v21);
          int32x4_t v41 = vzip1q_s32(v39, v39);
          int32x4_t v42 = vzip2q_s32(v39, v39);
          int32x4_t v43 = vzip1q_s32(v40, v40);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v7[v32]);
          uint16x8_t v45 = vmovl_u8(*(uint8x8_t *)&v17[v32]);
          int32x4_t v46 = vzip1q_s32(v38, v38);
          int32x4_t v47 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v23.i8);
          int32x4_t v48 = (int32x4_t)vmlal_high_u16(v24, v44, v23);
          int32x4_t v49 = vzip2q_s32(v40, v40);
          int32x4_t v50 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v23.i8);
          int32x4_t v51 = (int32x4_t)vmlal_high_u16(v24, v45, v23);
          int32x4_t v52 = vzip2q_s32(v38, v38);
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v47), 0xFuLL), vaddq_s32(v49, v48), 0xFuLL));
          int8x8_t v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v47), 0xFuLL), vaddq_s32(v52, v48), 0xFuLL));
          v169.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v50), 0xFuLL), vaddq_s32(v49, v51), 0xFuLL));
          int8x8_t v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v47), 0xFuLL), vaddq_s32(v42, v48), 0xFuLL));
          v169.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v50), 0xFuLL), vaddq_s32(v52, v51), 0xFuLL));
          vst4_s8(v28, *(int8x8x4_t *)(&v25 - 3));
          v28 += 32;
          v169.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v50), 0xFuLL), vaddq_s32(v42, v51), 0xFuLL));
          v169.val[3] = (int8x8_t)-1;
          vst4_s8(v34, v169);
          v32 += 8;
          --v33;
        }
        while (v33);
        unsigned int v31 = &v7[v32];
        uint64_t v26 = &v17[v32];
        int v30 = &v8[v32];
        int v29 = &v8[v32 + 1];
        int v27 = &v28[v14];
      }
      else
      {
        uint64_t v26 = &v7[v161];
        int v27 = &v10[v14];
        int v28 = v10;
        int v29 = v9;
        int v30 = v8;
        unsigned int v31 = v7;
      }
      if (v6 > v167)
      {
        uint64_t v164 = v11;
        unint64_t v165 = v9;
        unint64_t v56 = v159;
        do
        {
          int v57 = *v30;
          v30 += 2;
          int v58 = v57 - 128;
          int v59 = *v29;
          v29 += 2;
          int v60 = 38155 * *v31 - 610480;
          int v61 = -12836 * v58 - 26638 * (v59 - 128);
          int v62 = 66101 * v58;
          int v63 = 52299 * (v59 - 128);
          int v64 = (v60 + v63) >> 15;
          if (v64 >= 255) {
            LOBYTE(v64) = -1;
          }
          if (v60 + v63 >= 0) {
            char v65 = v64;
          }
          else {
            char v65 = 0;
          }
          int v66 = (v61 + v60) >> 15;
          if (v66 >= 255) {
            LOBYTE(v66) = -1;
          }
          BOOL v67 = v61 + v60 < 0;
          int v68 = v60 + v62;
          int v69 = v68 >> 15;
          if (v67) {
            LOBYTE(v66) = 0;
          }
          if (v69 >= 255) {
            LOBYTE(v69) = -1;
          }
          BOOL v67 = v68 < 0;
          int v70 = 38155 * v31[1] - 610480;
          int v71 = v70 + v63;
          if (v67) {
            LOBYTE(v69) = 0;
          }
          int v72 = v71 >> 15;
          if (v71 >> 15 >= 255) {
            LOBYTE(v72) = -1;
          }
          BOOL v67 = v71 < 0;
          int v73 = v70 + v61;
          if (v67) {
            LOBYTE(v72) = 0;
          }
          int v74 = v73 >> 15;
          if (v73 >> 15 >= 255) {
            LOBYTE(v74) = -1;
          }
          int v75 = v70 + v62;
          if (v73 < 0) {
            LOBYTE(v74) = 0;
          }
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v75 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          *int v28 = v69;
          v28[1] = v66;
          v28[2] = v65;
          v28[3] = -1;
          v28[5] = v74;
          v28[6] = v72;
          v28[4] = v77;
          v28[7] = -1;
          int v78 = 38155 * *v26 - 610480;
          v31 += 2;
          int v79 = (v78 + v63) >> 15;
          if (v79 >= 255) {
            LOBYTE(v79) = -1;
          }
          int v80 = v78 + v61;
          if (v78 + v63 < 0) {
            LOBYTE(v79) = 0;
          }
          int v81 = v80 >> 15;
          if (v80 >> 15 >= 255) {
            LOBYTE(v81) = -1;
          }
          int v82 = v78 + v62;
          if (v80 >= 0) {
            char v83 = v81;
          }
          else {
            char v83 = 0;
          }
          int v84 = v82 >> 15;
          if (v82 >> 15 >= 255) {
            LOBYTE(v84) = -1;
          }
          BOOL v67 = v82 < 0;
          int v85 = 38155 * v26[1] - 610480;
          if (v67) {
            char v86 = 0;
          }
          else {
            char v86 = v84;
          }
          int v87 = v85 + v63;
          int v88 = (v85 + v63) >> 15;
          if (v88 >= 255) {
            LOBYTE(v88) = -1;
          }
          if (v87 >= 0) {
            char v89 = v88;
          }
          else {
            char v89 = 0;
          }
          int v90 = v85 + v61;
          int v91 = v90 >> 15;
          if (v90 >> 15 >= 255) {
            LOBYTE(v91) = -1;
          }
          if (v90 >= 0) {
            char v92 = v91;
          }
          else {
            char v92 = 0;
          }
          int v93 = v85 + v62;
          *int v27 = v86;
          v27[1] = v83;
          if (v93 >> 15 >= 255) {
            char v94 = -1;
          }
          else {
            char v94 = v93 >> 15;
          }
          v27[2] = v79;
          v27[3] = -1;
          if (v93 >= 0) {
            char v95 = v94;
          }
          else {
            char v95 = 0;
          }
          v27[5] = v92;
          v27[4] = v95;
          v28 += 8;
          v26 += 2;
          v27[6] = v89;
          v27[7] = -1;
          v27 += 8;
          --v56;
        }
        while (v56);
        unint64_t v6 = v162;
        a1 = v163;
        uint64_t v11 = v164;
        unint64_t v9 = v165;
        unint64_t v15 = a2 >> 1;
      }
      if (a1)
      {
        int v96 = *v30 - 128;
        int v97 = *v29 - 128;
        int v98 = 38155 * *v31 - 610480;
        int v99 = -12836 * v96 - 26638 * v97;
        int v100 = 66101 * v96;
        int v101 = 52299 * v97;
        int v102 = (v98 + v101) >> 15;
        if (v102 >= 255) {
          LOBYTE(v102) = -1;
        }
        if (v98 + v101 >= 0) {
          char v103 = v102;
        }
        else {
          char v103 = 0;
        }
        int v104 = (v99 + v98) >> 15;
        if (v104 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v99 + v98 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = v98 + v100;
        int v107 = v106 >> 15;
        if (v106 >> 15 >= 255) {
          LOBYTE(v107) = -1;
        }
        if (v106 >= 0) {
          char v108 = v107;
        }
        else {
          char v108 = 0;
        }
        *int v28 = v108;
        v28[1] = v105;
        v28[2] = v103;
        v28[3] = -1;
        int v109 = 38155 * *v26 - 610480;
        int v110 = v109 + v101;
        int v111 = v110 >> 15;
        if (v110 >> 15 >= 255) {
          LOBYTE(v111) = -1;
        }
        if (v110 >= 0) {
          char v112 = v111;
        }
        else {
          char v112 = 0;
        }
        int v113 = v109 + v99;
        int v114 = v113 >> 15;
        if (v113 >> 15 >= 255) {
          LOBYTE(v114) = -1;
        }
        if (v113 >= 0) {
          char v115 = v114;
        }
        else {
          char v115 = 0;
        }
        int v116 = v109 + v100;
        int v117 = v116 >> 15;
        if (v116 >> 15 >= 255) {
          LOBYTE(v117) = -1;
        }
        if (v116 >= 0) {
          char v118 = v117;
        }
        else {
          char v118 = 0;
        }
        *int v27 = v118;
        v27[1] = v115;
        v27[2] = v112;
        v27[3] = -1;
      }
      v7 += v166;
      v8 += v168;
      v9 += v168;
      v10 += 2 * v14;
      ++v11;
      v17 += v166;
    }
    while (v11 != v15);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v6 <= 1) {
        uint64_t v119 = 1;
      }
      else {
        uint64_t v119 = v6;
      }
      do
      {
        int v120 = *v8;
        v8 += 2;
        int v121 = v120 - 128;
        int v122 = *v9;
        int v123 = v9 + 2;
        int v124 = 38155 * *v7 - 610480;
        int v125 = -12836 * v121 - 26638 * (v122 - 128);
        int v126 = 66101 * v121;
        int v127 = 52299 * (v122 - 128);
        int v128 = (v124 + v127) >> 15;
        if (v128 >= 255) {
          LOBYTE(v128) = -1;
        }
        if (v124 + v127 >= 0) {
          char v129 = v128;
        }
        else {
          char v129 = 0;
        }
        int v130 = (v125 + v124) >> 15;
        if (v130 >= 255) {
          LOBYTE(v130) = -1;
        }
        if (v125 + v124 >= 0) {
          char v131 = v130;
        }
        else {
          char v131 = 0;
        }
        int v132 = v124 + v126;
        int v133 = v132 >> 15;
        if (v132 >> 15 >= 255) {
          LOBYTE(v133) = -1;
        }
        if (v132 >= 0) {
          char v134 = v133;
        }
        else {
          char v134 = 0;
        }
        int v135 = 38155 * v7[1] - 610480;
        int v136 = v135 + v127;
        int v137 = v136 >> 15;
        if (v136 >> 15 >= 255) {
          LOBYTE(v137) = -1;
        }
        if (v136 >= 0) {
          char v138 = v137;
        }
        else {
          char v138 = 0;
        }
        int v139 = v135 + v125;
        int v140 = v139 >> 15;
        if (v139 >> 15 >= 255) {
          LOBYTE(v140) = -1;
        }
        if (v139 >= 0) {
          char v141 = v140;
        }
        else {
          char v141 = 0;
        }
        int v142 = v135 + v126;
        *uint64_t v10 = v134;
        v10[1] = v131;
        if (v142 >> 15 >= 255) {
          char v143 = -1;
        }
        else {
          char v143 = v142 >> 15;
        }
        unint64_t v9 = v123;
        void v10[2] = v129;
        v10[3] = -1;
        if (v142 >= 0) {
          char v144 = v143;
        }
        else {
          char v144 = 0;
        }
        v10[4] = v144;
        v10[5] = v141;
        v7 += 2;
        v10[6] = v138;
        v10[7] = -1;
        v10 += 8;
        --v119;
      }
      while (v119);
      LOBYTE(a1) = v163;
    }
    if (a1)
    {
      int v145 = *v8 - 128;
      int v146 = *v9 - 128;
      int v147 = 38155 * *v7 - 610480;
      int v148 = -12836 * v145 - 26638 * v146;
      int v149 = v147 + 52299 * v146;
      int v150 = v149 >> 15;
      if (v149 >> 15 >= 255) {
        LOBYTE(v150) = -1;
      }
      if (v149 >= 0) {
        char v151 = v150;
      }
      else {
        char v151 = 0;
      }
      int v152 = v148 + v147;
      int v153 = v152 >> 15;
      if (v152 >> 15 >= 255) {
        LOBYTE(v153) = -1;
      }
      if (v152 >= 0) {
        char v154 = v153;
      }
      else {
        char v154 = 0;
      }
      int v155 = v147 + 66101 * v145;
      int v156 = v155 >> 15;
      if (v155 >> 15 >= 255) {
        LOBYTE(v156) = -1;
      }
      if (v155 >= 0) {
        char v157 = v156;
      }
      else {
        char v157 = 0;
      }
      *uint64_t v10 = v157;
      v10[1] = v154;
      void v10[2] = v151;
      v10[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU601_24RGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6, int32x4_t a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  unint64_t v14 = a1 >> 1;
  uint64_t v16 = *a4;
  unint64_t v15 = a4[1];
  uint64_t v17 = v15 + 1;
  int32x4_t v18 = *a6;
  if (a2 >= 2)
  {
    uint64_t v19 = 0;
    uint64_t v21 = *a3;
    uint64_t v20 = a3[1];
    uint64_t v22 = *a5;
    unint64_t v23 = a2 >> 1;
    uint64_t v147 = 2 * v21;
    unint64_t v148 = 4 * (a1 >> 3);
    uint64_t v146 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = a1 >> 3;
    }
    uint64_t v143 = v21;
    uint64_t v25 = &v16[v21];
    unint64_t v140 = v14 - 4 * (a1 >> 3);
    uint64_t v141 = v24;
    *(int32x2_t *)a7.i8 = vdup_n_s32(0xFFF6AF50);
    v26.i64[0] = 0xFF000000FFLL;
    v26.i64[1] = 0xFF000000FFLL;
    v27.i64[0] = 0x7F0000007FLL;
    v27.i64[1] = 0x7F0000007FLL;
    int32x4_t v28 = vdupq_n_s32(0xFFFFCDDC);
    a12 = vdupq_n_s32(0xFFFF97F2);
    int32x4_t v29 = vdupq_n_s32(0x10235u);
    int32x4_t v30 = vdupq_n_s32(0xCC4Bu);
    uint16x8_t v31 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    uint32x4_t v32 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    unint64_t v144 = a1 >> 1;
    unint64_t v145 = a1;
    uint64_t v142 = v20;
    do
    {
      if (a1 >= 8)
      {
        uint64_t v39 = 0;
        uint64_t v40 = v141;
        int8x8_t v35 = v18;
        do
        {
          int8x8_t v41 = *(int8x8_t *)&v15[v39];
          int32x4_t v42 = &v35[v22];
          int32x4_t v43 = (int32x4_t)vaddw_u16(v27, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v41, *(int8x8_t *)a7.i8)));
          int32x4_t v44 = (int32x4_t)vaddw_u16(v27, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v41, *(int8x8_t *)a7.i8)));
          int32x4_t v45 = vmlaq_s32(vmulq_s32(v43, v28), v44, a12);
          int32x4_t v46 = vmulq_s32(v43, v29);
          int32x4_t v47 = vmulq_s32(v44, v30);
          int32x4_t v13 = vzip1q_s32(v46, v46);
          int32x4_t v48 = vzip2q_s32(v46, v46);
          int32x4_t v49 = vzip1q_s32(v47, v47);
          int32x4_t v50 = vzip1q_s32(v45, v45);
          uint16x8_t v51 = vmovl_u8(*(uint8x8_t *)&v16[v39]);
          uint16x8_t v52 = vmovl_u8(*(uint8x8_t *)&v25[v39]);
          int32x4_t v53 = (int32x4_t)vmlal_u16(v32, *(uint16x4_t *)v51.i8, *(uint16x4_t *)v31.i8);
          int32x4_t v54 = vzip2q_s32(v47, v47);
          int32x4_t v55 = (int32x4_t)vmlal_high_u16(v32, v51, v31);
          int32x4_t v56 = (int32x4_t)vmlal_u16(v32, *(uint16x4_t *)v52.i8, *(uint16x4_t *)v31.i8);
          int32x4_t v57 = vzip2q_s32(v45, v45);
          int32x4_t v58 = (int32x4_t)vmlal_high_u16(v32, v52, v31);
          v149.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v49, v53), 0xFuLL), vaddq_s32(v54, v55), 0xFuLL));
          v149.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v53), 0xFuLL), vaddq_s32(v57, v55), 0xFuLL));
          v150.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v49, v56), 0xFuLL), vaddq_s32(v54, v58), 0xFuLL));
          v149.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v13, v53), 0xFuLL), vaddq_s32(v48, v55), 0xFuLL));
          int16x8_t v12 = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v56), 0xFuLL), vaddq_s32(v57, v58), 0xFuLL);
          v150.val[1] = vqmovun_s16(v12);
          vst3_s8(v35, v149);
          v35 += 24;
          v150.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v13, v56), 0xFuLL), vaddq_s32(v48, v58), 0xFuLL));
          vst3_s8(v42, v150);
          v39 += 8;
          --v40;
        }
        while (v40);
        int32x4_t v38 = &v16[v39];
        uint64_t v33 = &v25[v39];
        int32x4_t v37 = &v15[v39];
        int32x4_t v36 = &v15[v39 + 1];
        uint64_t v34 = &v35[v22];
      }
      else
      {
        uint64_t v33 = &v16[v143];
        uint64_t v34 = &v18[v22];
        int8x8_t v35 = v18;
        int32x4_t v36 = v17;
        int32x4_t v37 = v15;
        int32x4_t v38 = v16;
      }
      if (v14 > v148)
      {
        uint64_t v59 = 0;
        unint64_t v60 = v140;
        do
        {
          int v61 = &v33[v59];
          int v62 = v37[v59] - 128;
          int v63 = 52299 * (v36[v59] - 128);
          int v64 = v36[v59] - 128;
          v12.i32[1] = v38[v59 + 1];
          int32x4_t v65 = a7;
          v65.i32[0] = -12836 * v62;
          *(int32x2_t *)v65.i8 = vmla_s32(*(int32x2_t *)v65.i8, *(int32x2_t *)v12.i8, (int32x2_t)0x950BFFFF97F2);
          __int32 v66 = v65.i32[0];
          int v67 = (v65.i32[1] + v65.i32[0]) >> 15;
          v12.i32[0] = v63;
          v68.i32[0] = v63;
          v68.i32[1] = 38155 * v38[v59] - 610480;
          if (v67 >= 255) {
            LOBYTE(v67) = -1;
          }
          v13.i32[0] = 38155 * v38[v59] - 610480;
          int32x4_t v69 = vzip1q_s32(v13, v65);
          v69.i32[2] = v69.i32[0];
          if (v65.i32[1] + v65.i32[0] >= 0) {
            char v70 = v67;
          }
          else {
            char v70 = 0;
          }
          int v71 = 66101 * v62;
          int v72 = (v65.i32[1] + v71) >> 15;
          v35[4] = v70;
          if (v72 >= 255) {
            char v73 = -1;
          }
          else {
            char v73 = v72;
          }
          v68.i64[1] = __PAIR64__(v63, v71);
          if (v65.i32[1] + v71 < 0) {
            char v73 = 0;
          }
          int32x4_t v74 = vaddq_s32(v69, v68);
          int32x4_t v75 = vcltzq_s32(v74);
          int16x8_t v76 = (int16x8_t)vminq_s32(vshrq_n_s32(v74, 0xFuLL), v26);
          *(int8x8_t *)v76.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v76), (int8x8_t)vmovn_s32(v75));
          *(_DWORD *)int8x8_t v35 = vmovn_s16(v76).u32[0];
          v35[5] = v73;
          v12.i32[1] = 38155 * *v61 - 610480;
          int v77 = 38155 * v61[1] - 610480;
          v13.i64[0] = v12.i64[0];
          v13.i64[1] = __PAIR64__(v77, v71);
          int32x4_t v78 = (int32x4_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 1), (int8x16_t)v12, 4uLL);
          v78.i32[1] = v65.i32[0];
          int32x4_t v79 = vaddq_s32(v13, v78);
          int8x8_t v80 = (int8x8_t)vmovn_s32(vcltzq_s32(v79));
          int16x8_t v12 = (int16x8_t)vminq_s32(vshrq_n_s32(v79, 0xFuLL), v26);
          *(int16x4_t *)v12.i8 = vmovn_s32((int32x4_t)v12);
          int v81 = (v77 + v66) >> 15;
          v35 += 6;
          if (v81 >= 255) {
            LOBYTE(v81) = -1;
          }
          if (v77 + v66 >= 0) {
            char v82 = v81;
          }
          else {
            char v82 = 0;
          }
          int v83 = v77 + v71;
          *(int8x8_t *)v12.i8 = vbic_s8(*(int8x8_t *)v12.i8, v80);
          int v84 = v83 >> 15;
          if (v83 >> 15 >= 255) {
            LOBYTE(v84) = -1;
          }
          *(_DWORD *)uint64_t v34 = vmovn_s16(v12).u32[0];
          if (v83 >= 0) {
            char v85 = v84;
          }
          else {
            char v85 = 0;
          }
          v34[4] = v82;
          v34[5] = v85;
          v34 += 6;
          v59 += 2;
          --v60;
        }
        while (v60);
        v38 += v59;
        v33 += v59;
        v37 += v59;
        v36 += v59;
        unint64_t v14 = v144;
        a1 = v145;
        unint64_t v23 = a2 >> 1;
        uint64_t v20 = v142;
      }
      if (a1)
      {
        int v86 = *v37 - 128;
        int v87 = *v36 - 128;
        int v88 = 38155 * *v38 - 610480;
        int v89 = -12836 * v86 - 26638 * v87;
        int v90 = 66101 * v86;
        int v91 = 52299 * v87;
        int v92 = (v88 + v91) >> 15;
        if (v92 >= 255) {
          LOBYTE(v92) = -1;
        }
        if (v88 + v91 >= 0) {
          char v93 = v92;
        }
        else {
          char v93 = 0;
        }
        int v94 = (v89 + v88) >> 15;
        if (v94 >= 255) {
          LOBYTE(v94) = -1;
        }
        if (v89 + v88 >= 0) {
          char v95 = v94;
        }
        else {
          char v95 = 0;
        }
        int v96 = v88 + v90;
        int v97 = v96 >> 15;
        if (v96 >> 15 >= 255) {
          LOBYTE(v97) = -1;
        }
        if (v96 >= 0) {
          char v98 = v97;
        }
        else {
          char v98 = 0;
        }
        *int8x8_t v35 = v93;
        v35[1] = v95;
        v35[2] = v98;
        int v99 = 38155 * *v33 - 610480;
        int v100 = v99 + v91;
        int v101 = v100 >> 15;
        if (v100 >> 15 >= 255) {
          LOBYTE(v101) = -1;
        }
        if (v100 >= 0) {
          char v102 = v101;
        }
        else {
          char v102 = 0;
        }
        int v103 = v99 + v89;
        int v104 = v103 >> 15;
        if (v103 >> 15 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v103 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = v99 + v90;
        int v107 = v106 >> 15;
        if (v106 >> 15 >= 255) {
          LOBYTE(v107) = -1;
        }
        *uint64_t v34 = v102;
        if (v106 >= 0) {
          char v108 = v107;
        }
        else {
          char v108 = 0;
        }
        v34[1] = v105;
        v34[2] = v108;
      }
      v16 += v147;
      v15 += v20;
      v17 += v20;
      v18 += v146;
      ++v19;
      v25 += v147;
    }
    while (v19 != v23);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v14 <= 1) {
        uint64_t v109 = 1;
      }
      else {
        uint64_t v109 = v14;
      }
      *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
      v110.i64[0] = 0xFF000000FFLL;
      v110.i64[1] = 0xFF000000FFLL;
      do
      {
        int v112 = *v15;
        v15 += 2;
        int v111 = v112;
        int v113 = *v17;
        v17 += 2;
        v111 -= 128;
        int v114 = v113 - 128;
        int v115 = 52299 * (v113 - 128);
        v116.i32[0] = v113 - 128;
        v116.i32[1] = v16[1];
        int32x4_t v117 = a8;
        v117.i32[0] = -12836 * v111;
        *(int32x2_t *)v117.i8 = vmla_s32(*(int32x2_t *)v117.i8, v116, (int32x2_t)0x950BFFFF97F2);
        a12.i32[0] = 38155 * *v16 - 610480;
        a12 = vzip1q_s32(a12, v117);
        int v118 = 66101 * v111;
        int v119 = (v117.i32[1] + v117.i32[0]) >> 15;
        if (v119 >= 255) {
          LOBYTE(v119) = -1;
        }
        int v120 = v117.i32[1] + v118;
        if (v117.i32[1] + v117.i32[0] < 0) {
          LOBYTE(v119) = 0;
        }
        a12.i32[2] = a12.i32[0];
        v121.i32[2] = v118;
        if ((v117.i32[1] + v118) >> 15 >= 255) {
          char v122 = -1;
        }
        else {
          char v122 = (v117.i32[1] + v118) >> 15;
        }
        v121.i32[3] = v115;
        v121.i32[1] = 38155 * *v16 - 610480;
        v121.i32[0] = 52299 * v114;
        int32x4_t v123 = vaddq_s32(a12, v121);
        int8x8_t v124 = (int8x8_t)vmovn_s32(vcltzq_s32(v123));
        int16x8_t v125 = (int16x8_t)vminq_s32(vshrq_n_s32(v123, 0xFuLL), v110);
        *(int8x8_t *)v125.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v125), v124);
        v16 += 2;
        *(_DWORD *)int32x4_t v18 = vmovn_s16(v125).u32[0];
        if (v120 < 0) {
          char v122 = 0;
        }
        v18[4] = v119;
        v18[5] = v122;
        v18 += 6;
        --v109;
      }
      while (v109);
    }
    if (a1)
    {
      int v126 = *v15 - 128;
      int v127 = *v17 - 128;
      int v128 = 38155 * *v16 - 610480;
      int v129 = -12836 * v126 - 26638 * v127;
      int v130 = v128 + 52299 * v127;
      int v131 = v130 >> 15;
      if (v130 >> 15 >= 255) {
        LOBYTE(v131) = -1;
      }
      if (v130 >= 0) {
        char v132 = v131;
      }
      else {
        char v132 = 0;
      }
      int v133 = v129 + v128;
      int v134 = v133 >> 15;
      if (v133 >> 15 >= 255) {
        LOBYTE(v134) = -1;
      }
      if (v133 >= 0) {
        char v135 = v134;
      }
      else {
        char v135 = 0;
      }
      int v136 = v128 + 66101 * v126;
      int v137 = v136 >> 15;
      if (v136 >> 15 >= 255) {
        LOBYTE(v137) = -1;
      }
      *int32x4_t v18 = v132;
      if (v136 >= 0) {
        char v138 = v137;
      }
      else {
        char v138 = 0;
      }
      v18[1] = v135;
      v18[2] = v138;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU601F_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = v7 + 1;
  unint64_t v9 = *a6;
  char v164 = a2;
  if (a2 >= 2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a5;
    unint64_t v174 = a2 >> 1;
    unint64_t v173 = 4 * (a1 >> 3);
    uint64_t v172 = 2 * *a3;
    uint64_t v171 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = a1 >> 3;
    }
    uint64_t v168 = *a3;
    unint64_t v169 = a1 >> 1;
    uint64_t v16 = &v6[*a3];
    uint64_t v165 = (a1 >> 1) - 4 * (a1 >> 3);
    uint64_t v166 = v15;
    int32x4_t v17 = vdupq_n_s32(0xFFFFD3F4);
    int32x4_t v18 = vdupq_n_s32(0xFFFFA498);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    int32x4_t v20 = vdupq_n_s32(0xE2D1u);
    int32x4_t v21 = vdupq_n_s32(0xB375u);
    uint64_t v22 = -1;
    unint64_t v10 = a1;
    unint64_t v11 = a1 >> 1;
    uint64_t v167 = a3[1];
    do
    {
      if (v10 >= 8)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v166;
        uint64_t v25 = v9;
        do
        {
          uint16x8_t v31 = &v25[v14];
          int8x8_t v32 = *(int8x8_t *)&v7[v29];
          int32x4_t v33 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v32, *(int8x8_t *)v17.i8)));
          int32x4_t v34 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v32, *(int8x8_t *)v17.i8)));
          int32x4_t v35 = vmulq_s32(v33, v17);
          int32x4_t v36 = vmulq_s32(v33, v20);
          int32x4_t v37 = vmulq_s32(v34, v21);
          int32x4_t v38 = vmlaq_s32(v35, v34, v18);
          int32x4_t v39 = vzip1q_s32(v36, v36);
          int32x4_t v40 = vzip2q_s32(v36, v36);
          int32x4_t v41 = vzip1q_s32(v37, v37);
          int32x4_t v42 = vzip1q_s32(v38, v38);
          uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)&v6[v29]);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v16[v29]);
          int32x4_t v45 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          int32x4_t v46 = vzip2q_s32(v37, v37);
          int32x4_t v47 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          int32x4_t v48 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v44.i8, 0xFuLL);
          int32x4_t v49 = (int32x4_t)vshll_high_n_u16(v44, 0xFuLL);
          int32x4_t v50 = vzip2q_s32(v38, v38);
          int8x8_t v51 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v45), 0xFuLL), vaddq_s32(v46, v47), 0xFuLL));
          int8x8_t v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v45), 0xFuLL), vaddq_s32(v50, v47), 0xFuLL));
          v175.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v48), 0xFuLL), vaddq_s32(v46, v49), 0xFuLL));
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v45), 0xFuLL), vaddq_s32(v40, v47), 0xFuLL));
          v175.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          vst4_s8(v25, *(int8x8x4_t *)(&v22 - 3));
          v25 += 32;
          v175.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v48), 0xFuLL), vaddq_s32(v40, v49), 0xFuLL));
          v175.val[3] = (int8x8_t)-1;
          vst4_s8(v31, v175);
          v29 += 8;
          --v30;
        }
        while (v30);
        int32x4_t v28 = &v6[v29];
        unint64_t v23 = &v16[v29];
        uint32x4_t v27 = &v7[v29];
        int32x4_t v26 = &v7[v29 + 1];
        uint64_t v24 = &v25[v14];
      }
      else
      {
        unint64_t v23 = &v6[v168];
        uint64_t v24 = &v9[v14];
        uint64_t v25 = v9;
        int32x4_t v26 = v8;
        uint32x4_t v27 = v7;
        int32x4_t v28 = v6;
      }
      if (v11 > v173)
      {
        uint64_t v54 = v165;
        do
        {
          int v56 = *v27;
          v27 += 2;
          int v55 = v56;
          int v57 = *v26;
          v26 += 2;
          v55 -= 128;
          int v58 = *v28;
          int v59 = v28[1];
          v28 += 2;
          int v60 = -11276 * v55 - 23400 * (v57 - 128);
          int v61 = 58065 * v55;
          int v62 = 45941 * (v57 - 128);
          int v63 = v62 + (v58 << 15);
          int v64 = v63 >> 15;
          if (v63 >> 15 >= 255) {
            LOBYTE(v64) = -1;
          }
          if (v63 < 0) {
            LOBYTE(v64) = 0;
          }
          int v65 = v60 + (v58 << 15);
          int v66 = v65 >> 15;
          if (v65 >> 15 >= 255) {
            LOBYTE(v66) = -1;
          }
          if (v65 < 0) {
            LOBYTE(v66) = 0;
          }
          int v67 = v61 + (v58 << 15);
          int v68 = v67 >> 15;
          if (v67 >> 15 >= 255) {
            LOBYTE(v68) = -1;
          }
          if (v67 >= 0) {
            char v69 = v68;
          }
          else {
            char v69 = 0;
          }
          int v70 = v62 + (v59 << 15);
          int v71 = v70 >> 15;
          if (v70 >> 15 >= 255) {
            LOBYTE(v71) = -1;
          }
          if (v70 < 0) {
            LOBYTE(v71) = 0;
          }
          int v72 = v60 + (v59 << 15);
          int v73 = v72 >> 15;
          if (v72 >> 15 >= 255) {
            LOBYTE(v73) = -1;
          }
          if (v72 >= 0) {
            char v74 = v73;
          }
          else {
            char v74 = 0;
          }
          int v75 = v61 + (v59 << 15);
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v75 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          v25[1] = v66;
          v25[2] = v64;
          v25[3] = -1;
          *uint64_t v25 = v69;
          v25[4] = v77;
          v25[5] = v74;
          v25[6] = v71;
          v25[7] = -1;
          int v78 = *v23;
          int v79 = v23[1];
          int v80 = v62 + (v78 << 15);
          int v81 = v80 >> 15;
          if (v80 >> 15 >= 255) {
            LOBYTE(v81) = -1;
          }
          if (v80 >= 0) {
            char v82 = v81;
          }
          else {
            char v82 = 0;
          }
          int v83 = v60 + (v78 << 15);
          int v84 = v83 >> 15;
          if (v83 >> 15 >= 255) {
            LOBYTE(v84) = -1;
          }
          if (v83 >= 0) {
            char v85 = v84;
          }
          else {
            char v85 = 0;
          }
          int v86 = v61 + (v78 << 15);
          int v87 = v86 >> 15;
          if (v86 >> 15 >= 255) {
            LOBYTE(v87) = -1;
          }
          if (v86 >= 0) {
            char v88 = v87;
          }
          else {
            char v88 = 0;
          }
          int v89 = v62 + (v79 << 15);
          int v90 = v89 >> 15;
          if (v89 >> 15 >= 255) {
            LOBYTE(v90) = -1;
          }
          if (v89 >= 0) {
            char v91 = v90;
          }
          else {
            char v91 = 0;
          }
          int v92 = v60 + (v79 << 15);
          int v93 = v92 >> 15;
          if (v92 >> 15 >= 255) {
            LOBYTE(v93) = -1;
          }
          if (v92 >= 0) {
            char v94 = v93;
          }
          else {
            char v94 = 0;
          }
          int v95 = v61 + (v79 << 15);
          *uint64_t v24 = v88;
          v24[1] = v85;
          if (v95 >> 15 >= 255) {
            LOBYTE(v96) = -1;
          }
          else {
            int v96 = v95 >> 15;
          }
          v24[2] = v82;
          v24[3] = -1;
          if (v95 < 0) {
            LOBYTE(v96) = 0;
          }
          v24[5] = v94;
          v24[4] = v96;
          v25 += 8;
          v23 += 2;
          v24[6] = v91;
          v24[7] = -1;
          v24 += 8;
          --v54;
        }
        while (v54);
        unint64_t v11 = v169;
        unint64_t v10 = a1;
        uint64_t v13 = v167;
      }
      if (v10)
      {
        int v97 = *v27 - 128;
        int v98 = *v26 - 128;
        int v99 = *v28;
        int v100 = -11276 * v97 - 23400 * v98;
        int v101 = 58065 * v97;
        int v102 = 45941 * v98;
        int v103 = v102 + (v99 << 15);
        int v104 = v103 >> 15;
        if (v103 >> 15 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v103 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = v100 + (v99 << 15);
        int v107 = v106 >> 15;
        if (v106 >> 15 >= 255) {
          LOBYTE(v107) = -1;
        }
        if (v106 >= 0) {
          char v108 = v107;
        }
        else {
          char v108 = 0;
        }
        int v109 = v101 + (v99 << 15);
        int v110 = v109 >> 15;
        if (v109 >> 15 >= 255) {
          LOBYTE(v110) = -1;
        }
        if (v109 >= 0) {
          char v111 = v110;
        }
        else {
          char v111 = 0;
        }
        *uint64_t v25 = v111;
        v25[1] = v108;
        v25[2] = v105;
        v25[3] = -1;
        int v112 = *v23;
        int v113 = v102 + (v112 << 15);
        int v114 = v113 >> 15;
        if (v113 >> 15 >= 255) {
          LOBYTE(v114) = -1;
        }
        if (v113 >= 0) {
          char v115 = v114;
        }
        else {
          char v115 = 0;
        }
        int v116 = v100 + (v112 << 15);
        int v117 = v116 >> 15;
        if (v116 >> 15 >= 255) {
          LOBYTE(v117) = -1;
        }
        if (v116 >= 0) {
          char v118 = v117;
        }
        else {
          char v118 = 0;
        }
        int v119 = v101 + (v112 << 15);
        int v120 = v119 >> 15;
        if (v119 >> 15 >= 255) {
          LOBYTE(v120) = -1;
        }
        if (v119 >= 0) {
          char v121 = v120;
        }
        else {
          char v121 = 0;
        }
        *uint64_t v24 = v121;
        v24[1] = v118;
        v24[2] = v115;
        v24[3] = -1;
      }
      v6 += v172;
      v7 += v13;
      v8 += v13;
      v9 += v171;
      ++v12;
      v16 += v172;
    }
    while (v12 != v174);
  }
  else
  {
    unint64_t v10 = a1;
    unint64_t v11 = a1 >> 1;
  }
  if (v164)
  {
    if (v10 >= 2)
    {
      if (v11 <= 1) {
        uint64_t v122 = 1;
      }
      else {
        uint64_t v122 = v11;
      }
      do
      {
        int v123 = *v7;
        v7 += 2;
        int v124 = v123 - 128;
        int v125 = *v8;
        v8 += 2;
        int v126 = *v6;
        int v127 = v6[1];
        int v128 = -11276 * v124 - 23400 * (v125 - 128);
        int v129 = 58065 * v124;
        int v130 = 45941 * (v125 - 128);
        int v131 = v130 + (v126 << 15);
        int v132 = v131 >> 15;
        if (v131 >> 15 >= 255) {
          LOBYTE(v132) = -1;
        }
        if (v131 >= 0) {
          char v133 = v132;
        }
        else {
          char v133 = 0;
        }
        int v134 = v128 + (v126 << 15);
        int v135 = v134 >> 15;
        if (v134 >> 15 >= 255) {
          LOBYTE(v135) = -1;
        }
        if (v134 >= 0) {
          char v136 = v135;
        }
        else {
          char v136 = 0;
        }
        int v137 = v129 + (v126 << 15);
        int v138 = v137 >> 15;
        if (v137 >> 15 >= 255) {
          LOBYTE(v138) = -1;
        }
        if (v137 >= 0) {
          char v139 = v138;
        }
        else {
          char v139 = 0;
        }
        int v140 = v130 + (v127 << 15);
        int v141 = v140 >> 15;
        if (v140 >> 15 >= 255) {
          LOBYTE(v141) = -1;
        }
        if (v140 >= 0) {
          char v142 = v141;
        }
        else {
          char v142 = 0;
        }
        int v143 = v128 + (v127 << 15);
        int v144 = v143 >> 15;
        if (v143 >> 15 >= 255) {
          LOBYTE(v144) = -1;
        }
        if (v143 >= 0) {
          char v145 = v144;
        }
        else {
          char v145 = 0;
        }
        int v146 = v129 + (v127 << 15);
        *unint64_t v9 = v139;
        v9[1] = v136;
        if (v146 >> 15 >= 255) {
          LOBYTE(v147) = -1;
        }
        else {
          int v147 = v146 >> 15;
        }
        v9[2] = v133;
        v9[3] = -1;
        if (v146 >= 0) {
          char v148 = v147;
        }
        else {
          char v148 = 0;
        }
        v9[4] = v148;
        v9[5] = v145;
        v6 += 2;
        v9[6] = v142;
        v9[7] = -1;
        v9 += 8;
        --v122;
      }
      while (v122);
      LOBYTE(v10) = a1;
    }
    if (v10)
    {
      int v149 = *v7 - 128;
      int v150 = *v8 - 128;
      int v151 = *v6;
      int v152 = -11276 * v149 - 23400 * v150;
      int v153 = 58065 * v149;
      int v154 = 45941 * v150 + (v151 << 15);
      int v155 = v154 >> 15;
      if (v154 >> 15 >= 255) {
        LOBYTE(v155) = -1;
      }
      if (v154 >= 0) {
        char v156 = v155;
      }
      else {
        char v156 = 0;
      }
      int v157 = v152 + (v151 << 15);
      int v158 = v157 >> 15;
      if (v157 >> 15 >= 255) {
        LOBYTE(v158) = -1;
      }
      if (v157 >= 0) {
        char v159 = v158;
      }
      else {
        char v159 = 0;
      }
      int v160 = v153 + (v151 << 15);
      int v161 = v160 >> 15;
      if (v160 >> 15 >= 255) {
        LOBYTE(v161) = -1;
      }
      if (v160 >= 0) {
        char v162 = v161;
      }
      else {
        char v162 = 0;
      }
      *unint64_t v9 = v162;
      v9[1] = v159;
      v9[2] = v156;
      v9[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU601F_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = v7 + 1;
  unint64_t v9 = *a6;
  char v165 = a2;
  if (a2 >= 2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a5;
    unint64_t v175 = a2 >> 1;
    unint64_t v174 = 4 * (a1 >> 3);
    uint64_t v173 = 2 * *a3;
    uint64_t v172 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = a1 >> 3;
    }
    uint64_t v169 = *a3;
    unint64_t v170 = a1 >> 1;
    uint64_t v16 = &v6[*a3];
    uint64_t v166 = (a1 >> 1) - 4 * (a1 >> 3);
    uint64_t v167 = v15;
    int32x4_t v17 = vdupq_n_s32(0xFFFFD3F4);
    int32x4_t v18 = vdupq_n_s32(0xFFFFA498);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    int32x4_t v20 = vdupq_n_s32(0xE2D1u);
    int32x4_t v21 = vdupq_n_s32(0xB375u);
    uint64_t v22 = -1;
    unint64_t v10 = a1;
    unint64_t v11 = a1 >> 1;
    uint64_t v168 = a3[1];
    do
    {
      if (v10 >= 8)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v167;
        uint64_t v25 = v9;
        do
        {
          uint16x8_t v31 = &v25[v14];
          int8x8_t v32 = *(int8x8_t *)&v7[v29];
          int32x4_t v33 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v32, *(int8x8_t *)v17.i8)));
          int32x4_t v34 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v32, *(int8x8_t *)v17.i8)));
          int32x4_t v35 = vmulq_s32(v33, v17);
          int32x4_t v36 = vmulq_s32(v33, v20);
          int32x4_t v37 = vmulq_s32(v34, v21);
          int32x4_t v38 = vmlaq_s32(v35, v34, v18);
          int32x4_t v39 = vzip1q_s32(v36, v36);
          int32x4_t v40 = vzip2q_s32(v36, v36);
          int32x4_t v41 = vzip1q_s32(v37, v37);
          int32x4_t v42 = vzip1q_s32(v38, v38);
          uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)&v6[v29]);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v16[v29]);
          int32x4_t v45 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          int32x4_t v46 = vzip2q_s32(v37, v37);
          int32x4_t v47 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          int32x4_t v48 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v44.i8, 0xFuLL);
          int32x4_t v49 = (int32x4_t)vshll_high_n_u16(v44, 0xFuLL);
          int32x4_t v50 = vzip2q_s32(v38, v38);
          int8x8_t v51 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v45), 0xFuLL), vaddq_s32(v46, v47), 0xFuLL));
          int8x8_t v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v45), 0xFuLL), vaddq_s32(v50, v47), 0xFuLL));
          v176.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v48), 0xFuLL), vaddq_s32(v46, v49), 0xFuLL));
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v45), 0xFuLL), vaddq_s32(v40, v47), 0xFuLL));
          v176.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          vst4_s8(v25, *(int8x8x4_t *)&v22);
          v25 += 32;
          v176.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v48), 0xFuLL), vaddq_s32(v40, v49), 0xFuLL));
          v176.val[0] = (int8x8_t)-1;
          vst4_s8(v31, v176);
          v29 += 8;
          --v30;
        }
        while (v30);
        int32x4_t v28 = &v6[v29];
        unint64_t v23 = &v16[v29];
        uint32x4_t v27 = &v7[v29];
        int32x4_t v26 = &v7[v29 + 1];
        uint64_t v24 = &v25[v14];
      }
      else
      {
        unint64_t v23 = &v6[v169];
        uint64_t v24 = &v9[v14];
        uint64_t v25 = v9;
        int32x4_t v26 = v8;
        uint32x4_t v27 = v7;
        int32x4_t v28 = v6;
      }
      if (v11 > v174)
      {
        uint64_t v54 = v166;
        do
        {
          int v56 = *v27;
          v27 += 2;
          int v55 = v56;
          int v57 = *v26;
          v26 += 2;
          v55 -= 128;
          int v58 = *v28;
          int v59 = v28[1];
          v28 += 2;
          int v60 = -11276 * v55 - 23400 * (v57 - 128);
          int v61 = 58065 * v55;
          int v62 = 45941 * (v57 - 128);
          int v63 = v62 + (v58 << 15);
          int v64 = v63 >> 15;
          if (v63 >> 15 >= 255) {
            LOBYTE(v64) = -1;
          }
          if (v63 < 0) {
            LOBYTE(v64) = 0;
          }
          int v65 = v60 + (v58 << 15);
          int v66 = v65 >> 15;
          if (v65 >> 15 >= 255) {
            LOBYTE(v66) = -1;
          }
          if (v65 < 0) {
            LOBYTE(v66) = 0;
          }
          int v67 = v61 + (v58 << 15);
          int v68 = v67 >> 15;
          if (v67 >> 15 >= 255) {
            LOBYTE(v68) = -1;
          }
          if (v67 >= 0) {
            char v69 = v68;
          }
          else {
            char v69 = 0;
          }
          int v70 = v62 + (v59 << 15);
          int v71 = v70 >> 15;
          if (v70 >> 15 >= 255) {
            LOBYTE(v71) = -1;
          }
          if (v70 < 0) {
            LOBYTE(v71) = 0;
          }
          int v72 = v60 + (v59 << 15);
          int v73 = v72 >> 15;
          if (v72 >> 15 >= 255) {
            LOBYTE(v73) = -1;
          }
          if (v72 >= 0) {
            char v74 = v73;
          }
          else {
            char v74 = 0;
          }
          int v75 = v61 + (v59 << 15);
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v75 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          *uint64_t v25 = -1;
          v25[1] = v64;
          v25[2] = v66;
          v25[3] = v69;
          v25[4] = -1;
          v25[5] = v71;
          v25[6] = v74;
          v25[7] = v77;
          int v78 = *v23;
          v25 += 8;
          int v79 = v23[1];
          v23 += 2;
          int v80 = v62 + (v78 << 15);
          int v81 = v80 >> 15;
          if (v80 >> 15 >= 255) {
            LOBYTE(v81) = -1;
          }
          if (v80 >= 0) {
            char v82 = v81;
          }
          else {
            char v82 = 0;
          }
          int v83 = v60 + (v78 << 15);
          int v84 = v83 >> 15;
          if (v83 >> 15 >= 255) {
            LOBYTE(v84) = -1;
          }
          if (v83 >= 0) {
            char v85 = v84;
          }
          else {
            char v85 = 0;
          }
          int v86 = v61 + (v78 << 15);
          int v87 = v86 >> 15;
          if (v86 >> 15 >= 255) {
            LOBYTE(v87) = -1;
          }
          if (v86 >= 0) {
            char v88 = v87;
          }
          else {
            char v88 = 0;
          }
          int v89 = v62 + (v79 << 15);
          int v90 = v89 >> 15;
          if (v89 >> 15 >= 255) {
            LOBYTE(v90) = -1;
          }
          if (v89 >= 0) {
            char v91 = v90;
          }
          else {
            char v91 = 0;
          }
          int v92 = v60 + (v79 << 15);
          int v93 = v92 >> 15;
          if (v92 >> 15 >= 255) {
            LOBYTE(v93) = -1;
          }
          int v94 = v61 + (v79 << 15);
          int v95 = v94 >> 15;
          *uint64_t v24 = -1;
          v24[1] = v82;
          if (v92 >= 0) {
            char v96 = v93;
          }
          else {
            char v96 = 0;
          }
          if (v95 >= 255) {
            LOBYTE(v95) = -1;
          }
          v24[2] = v85;
          v24[4] = -1;
          v24[3] = v88;
          v24[5] = v91;
          if (v94 >= 0) {
            char v97 = v95;
          }
          else {
            char v97 = 0;
          }
          v24[6] = v96;
          v24[7] = v97;
          v24 += 8;
          --v54;
        }
        while (v54);
        unint64_t v11 = v170;
        unint64_t v10 = a1;
        uint64_t v13 = v168;
      }
      if (v10)
      {
        int v98 = *v27 - 128;
        int v99 = *v26 - 128;
        int v100 = *v28;
        int v101 = -11276 * v98 - 23400 * v99;
        int v102 = 58065 * v98;
        int v103 = 45941 * v99;
        int v104 = v103 + (v100 << 15);
        int v105 = v104 >> 15;
        if (v104 >> 15 >= 255) {
          LOBYTE(v105) = -1;
        }
        if (v104 >= 0) {
          char v106 = v105;
        }
        else {
          char v106 = 0;
        }
        int v107 = v101 + (v100 << 15);
        int v108 = v107 >> 15;
        if (v107 >> 15 >= 255) {
          LOBYTE(v108) = -1;
        }
        if (v107 >= 0) {
          char v109 = v108;
        }
        else {
          char v109 = 0;
        }
        int v110 = v102 + (v100 << 15);
        int v111 = v110 >> 15;
        if (v110 >> 15 >= 255) {
          LOBYTE(v111) = -1;
        }
        if (v110 >= 0) {
          char v112 = v111;
        }
        else {
          char v112 = 0;
        }
        *uint64_t v25 = -1;
        v25[1] = v106;
        v25[2] = v109;
        v25[3] = v112;
        int v113 = *v23;
        int v114 = v103 + (v113 << 15);
        int v115 = v114 >> 15;
        if (v114 >> 15 >= 255) {
          LOBYTE(v115) = -1;
        }
        if (v114 >= 0) {
          char v116 = v115;
        }
        else {
          char v116 = 0;
        }
        int v117 = v101 + (v113 << 15);
        int v118 = v117 >> 15;
        if (v117 >> 15 >= 255) {
          LOBYTE(v118) = -1;
        }
        if (v117 >= 0) {
          char v119 = v118;
        }
        else {
          char v119 = 0;
        }
        int v120 = v102 + (v113 << 15);
        int v121 = v120 >> 15;
        if (v120 >> 15 >= 255) {
          LOBYTE(v121) = -1;
        }
        *uint64_t v24 = -1;
        v24[1] = v116;
        if (v120 >= 0) {
          char v122 = v121;
        }
        else {
          char v122 = 0;
        }
        v24[2] = v119;
        v24[3] = v122;
      }
      v6 += v173;
      v7 += v13;
      v8 += v13;
      v9 += v172;
      ++v12;
      v16 += v173;
    }
    while (v12 != v175);
  }
  else
  {
    unint64_t v10 = a1;
    unint64_t v11 = a1 >> 1;
  }
  if (v165)
  {
    if (v10 >= 2)
    {
      if (v11 <= 1) {
        uint64_t v123 = 1;
      }
      else {
        uint64_t v123 = v11;
      }
      do
      {
        int v124 = *v7;
        v7 += 2;
        int v125 = v124 - 128;
        int v126 = *v8;
        v8 += 2;
        int v127 = *v6;
        int v128 = v6[1];
        v6 += 2;
        int v129 = -11276 * v125 - 23400 * (v126 - 128);
        int v130 = 58065 * v125;
        int v131 = 45941 * (v126 - 128);
        int v132 = v131 + (v127 << 15);
        int v133 = v132 >> 15;
        if (v132 >> 15 >= 255) {
          LOBYTE(v133) = -1;
        }
        if (v132 >= 0) {
          char v134 = v133;
        }
        else {
          char v134 = 0;
        }
        int v135 = v129 + (v127 << 15);
        int v136 = v135 >> 15;
        if (v135 >> 15 >= 255) {
          LOBYTE(v136) = -1;
        }
        if (v135 >= 0) {
          char v137 = v136;
        }
        else {
          char v137 = 0;
        }
        int v138 = v130 + (v127 << 15);
        int v139 = v138 >> 15;
        if (v138 >> 15 >= 255) {
          LOBYTE(v139) = -1;
        }
        if (v138 >= 0) {
          char v140 = v139;
        }
        else {
          char v140 = 0;
        }
        int v141 = v131 + (v128 << 15);
        int v142 = v141 >> 15;
        if (v141 >> 15 >= 255) {
          LOBYTE(v142) = -1;
        }
        if (v141 >= 0) {
          char v143 = v142;
        }
        else {
          char v143 = 0;
        }
        int v144 = v129 + (v128 << 15);
        int v145 = v144 >> 15;
        if (v144 >> 15 >= 255) {
          LOBYTE(v145) = -1;
        }
        if (v144 >= 0) {
          char v146 = v145;
        }
        else {
          char v146 = 0;
        }
        int v147 = v130 + (v128 << 15);
        int v148 = v147 >> 15;
        *unint64_t v9 = -1;
        v9[1] = v134;
        if (v147 >> 15 >= 255) {
          LOBYTE(v148) = -1;
        }
        v9[2] = v137;
        v9[3] = v140;
        v9[4] = -1;
        v9[5] = v143;
        if (v147 >= 0) {
          char v149 = v148;
        }
        else {
          char v149 = 0;
        }
        v9[6] = v146;
        v9[7] = v149;
        v9 += 8;
        --v123;
      }
      while (v123);
      LOBYTE(v10) = a1;
    }
    if (v10)
    {
      int v150 = *v7 - 128;
      int v151 = *v8 - 128;
      int v152 = *v6;
      int v153 = -11276 * v150 - 23400 * v151;
      int v154 = 58065 * v150;
      int v155 = 45941 * v151 + (v152 << 15);
      int v156 = v155 >> 15;
      if (v155 >> 15 >= 255) {
        LOBYTE(v156) = -1;
      }
      if (v155 >= 0) {
        char v157 = v156;
      }
      else {
        char v157 = 0;
      }
      int v158 = v153 + (v152 << 15);
      int v159 = v158 >> 15;
      if (v158 >> 15 >= 255) {
        LOBYTE(v159) = -1;
      }
      if (v158 >= 0) {
        char v160 = v159;
      }
      else {
        char v160 = 0;
      }
      int v161 = v154 + (v152 << 15);
      int v162 = v161 >> 15;
      if (v161 >> 15 >= 255) {
        LOBYTE(v162) = -1;
      }
      *unint64_t v9 = -1;
      v9[1] = v157;
      if (v161 >= 0) {
        char v163 = v162;
      }
      else {
        char v163 = 0;
      }
      v9[2] = v160;
      v9[3] = v163;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU601F_24RGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = v7 + 1;
  unint64_t v9 = *a6;
  unint64_t v148 = a1;
  char v143 = a2;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a3[1];
    uint64_t v13 = *a5;
    unint64_t v152 = a2 >> 1;
    unint64_t v151 = 4 * (a1 >> 3);
    uint64_t v150 = 2 * *a3;
    uint64_t v149 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = a1 >> 3;
    }
    uint64_t v146 = a3[1];
    uint64_t v147 = *a3;
    uint64_t v15 = &v6[*a3];
    uint64_t v144 = (a1 >> 1) - 4 * (a1 >> 3);
    uint64_t v145 = v14;
    v16.i64[0] = 0xFF000000FFLL;
    v16.i64[1] = 0xFF000000FFLL;
    v17.i64[0] = 0x7F0000007FLL;
    v17.i64[1] = 0x7F0000007FLL;
    int32x4_t v18 = vdupq_n_s32(0xFFFFD3F4);
    int32x4_t v19 = vdupq_n_s32(0xFFFFA498);
    int32x4_t v20 = vdupq_n_s32(0xE2D1u);
    int32x4_t v21 = vdupq_n_s32(0xB375u);
    unint64_t v10 = a1 >> 1;
    do
    {
      if (a1 >= 8)
      {
        uint64_t v28 = 0;
        uint64_t v29 = v145;
        uint64_t v24 = v9;
        do
        {
          int8x8_t v30 = *(int8x8_t *)&v7[v28];
          uint16x8_t v31 = &v24[v13];
          int32x4_t v32 = (int32x4_t)vaddw_u16(v17, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v30, (int8x8_t)0xFF000000FFLL)));
          int32x4_t v33 = (int32x4_t)vaddw_u16(v17, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v30, (int8x8_t)0xFF000000FFLL)));
          int32x4_t v34 = vmlaq_s32(vmulq_s32(v32, v18), v33, v19);
          int32x4_t v35 = vmulq_s32(v32, v20);
          int32x4_t v36 = vmulq_s32(v33, v21);
          int32x4_t v37 = vzip1q_s32(v35, v35);
          int32x4_t v38 = vzip2q_s32(v35, v35);
          int32x4_t v39 = vzip1q_s32(v36, v36);
          int32x4_t v40 = vzip2q_s32(v36, v36);
          int32x4_t v41 = vzip1q_s32(v34, v34);
          uint16x8_t v42 = vmovl_u8(*(uint8x8_t *)&v6[v28]);
          uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)&v15[v28]);
          int32x4_t v44 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v42.i8, 0xFuLL);
          int32x4_t v45 = (int32x4_t)vshll_high_n_u16(v42, 0xFuLL);
          int32x4_t v46 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          int32x4_t v47 = vzip2q_s32(v34, v34);
          int32x4_t v48 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          v154.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v44), 0xFuLL), vaddq_s32(v40, v45), 0xFuLL));
          v154.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v44), 0xFuLL), vaddq_s32(v47, v45), 0xFuLL));
          v153.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v46), 0xFuLL), vaddq_s32(v40, v48), 0xFuLL));
          v154.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v37, v44), 0xFuLL), vaddq_s32(v38, v45), 0xFuLL));
          v153.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v46), 0xFuLL), vaddq_s32(v47, v48), 0xFuLL));
          vst3_s8(v24, v154);
          v24 += 24;
          v153.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v37, v46), 0xFuLL), vaddq_s32(v38, v48), 0xFuLL));
          vst3_s8(v31, v153);
          v28 += 8;
          --v29;
        }
        while (v29);
        uint32x4_t v27 = &v6[v28];
        uint64_t v22 = &v15[v28];
        int32x4_t v26 = &v7[v28];
        uint64_t v25 = &v7[v28 + 1];
        unint64_t v23 = &v24[v13];
      }
      else
      {
        uint64_t v22 = &v6[v147];
        unint64_t v23 = &v9[v13];
        uint64_t v24 = v9;
        uint64_t v25 = v8;
        int32x4_t v26 = v7;
        uint32x4_t v27 = v6;
      }
      if (v10 > v151)
      {
        unint64_t v49 = v10;
        uint64_t v50 = v144;
        do
        {
          int v52 = *v26;
          v26 += 2;
          int v51 = v52;
          int v53 = *v25;
          v25 += 2;
          v51 -= 128;
          int v54 = *v27;
          int v55 = v27[1];
          v27 += 2;
          unsigned int v56 = v54 << 15;
          int v57 = -11276 * v51 - 23400 * (v53 - 128);
          int v58 = 58065 * v51;
          int v59 = 45941 * (v53 - 128);
          __int32 v60 = v55 << 15;
          int v61 = v57 + (v55 << 15);
          int v62 = v61 >> 15;
          if (v61 >> 15 >= 255) {
            LOBYTE(v62) = -1;
          }
          BOOL v63 = v61 < 0;
          int v64 = v58 + (v55 << 15);
          int v65 = v64 >> 15;
          if (v63) {
            LOBYTE(v62) = 0;
          }
          v66.i32[0] = v59;
          v67.i64[0] = __PAIR64__(v56, v59);
          if (v65 >= 255) {
            LOBYTE(v65) = -1;
          }
          int32x4_t v68 = vdupq_lane_s32((int32x2_t)__PAIR64__(v56, v59), 1);
          v67.i64[1] = __PAIR64__(v59, v58);
          v68.i32[1] = v57;
          v68.i32[3] = v60;
          int32x4_t v69 = vaddq_s32(v67, v68);
          int8x8_t v70 = (int8x8_t)vmovn_s32(vcltzq_s32(v69));
          int16x8_t v71 = (int16x8_t)vminq_s32(vshrq_n_s32(v69, 0xFuLL), v16);
          *(int16x4_t *)v71.i8 = vmovn_s32((int32x4_t)v71);
          if (v64 >= 0) {
            char v72 = v65;
          }
          else {
            char v72 = 0;
          }
          *(int8x8_t *)v71.i8 = vbic_s8(*(int8x8_t *)v71.i8, v70);
          *(_DWORD *)uint64_t v24 = vmovn_s16(v71).u32[0];
          v24[4] = v62;
          v24[5] = v72;
          v24 += 6;
          int v73 = v22[1];
          __int32 v74 = v73 << 15;
          int v75 = v57 + (v73 << 15);
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          int v77 = v58 + (v73 << 15);
          if (v75 < 0) {
            LOBYTE(v76) = 0;
          }
          v66.i32[1] = *v22 << 15;
          int32x4_t v78 = vdupq_lane_s32(*(int32x2_t *)v66.i8, 1);
          if (v77 >> 15 >= 255) {
            char v79 = -1;
          }
          else {
            char v79 = v77 >> 15;
          }
          v66.i64[1] = __PAIR64__(v59, v58);
          v78.i32[1] = v57;
          v78.i32[3] = v74;
          int32x4_t v80 = vaddq_s32(v66, v78);
          int8x8_t v81 = (int8x8_t)vmovn_s32(vcltzq_s32(v80));
          int16x8_t v82 = (int16x8_t)vminq_s32(vshrq_n_s32(v80, 0xFuLL), v16);
          *(int8x8_t *)v82.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v82), v81);
          v22 += 2;
          *(_DWORD *)unint64_t v23 = vmovn_s16(v82).u32[0];
          if (v77 < 0) {
            char v79 = 0;
          }
          v23[4] = v76;
          v23[5] = v79;
          v23 += 6;
          --v50;
        }
        while (v50);
        a1 = v148;
        unint64_t v10 = v49;
        uint64_t v12 = v146;
      }
      if (a1)
      {
        int v83 = *v26 - 128;
        int v84 = *v25 - 128;
        int v85 = *v27;
        int v86 = -11276 * v83 - 23400 * v84;
        int v87 = 58065 * v83;
        int v88 = 45941 * v84;
        int v89 = v88 + (v85 << 15);
        int v90 = v89 >> 15;
        if (v89 >> 15 >= 255) {
          LOBYTE(v90) = -1;
        }
        if (v89 >= 0) {
          char v91 = v90;
        }
        else {
          char v91 = 0;
        }
        int v92 = v86 + (v85 << 15);
        int v93 = v92 >> 15;
        if (v92 >> 15 >= 255) {
          LOBYTE(v93) = -1;
        }
        if (v92 >= 0) {
          char v94 = v93;
        }
        else {
          char v94 = 0;
        }
        int v95 = v87 + (v85 << 15);
        int v96 = v95 >> 15;
        if (v95 >> 15 >= 255) {
          LOBYTE(v96) = -1;
        }
        if (v95 >= 0) {
          char v97 = v96;
        }
        else {
          char v97 = 0;
        }
        *uint64_t v24 = v91;
        v24[1] = v94;
        v24[2] = v97;
        int v98 = *v22;
        int v99 = v88 + (v98 << 15);
        int v100 = v99 >> 15;
        if (v99 >> 15 >= 255) {
          LOBYTE(v100) = -1;
        }
        if (v99 >= 0) {
          char v101 = v100;
        }
        else {
          char v101 = 0;
        }
        int v102 = v86 + (v98 << 15);
        int v103 = v102 >> 15;
        if (v102 >> 15 >= 255) {
          LOBYTE(v103) = -1;
        }
        if (v102 >= 0) {
          char v104 = v103;
        }
        else {
          char v104 = 0;
        }
        int v105 = v87 + (v98 << 15);
        int v106 = v105 >> 15;
        if (v105 >> 15 >= 255) {
          LOBYTE(v106) = -1;
        }
        *unint64_t v23 = v101;
        if (v105 >= 0) {
          char v107 = v106;
        }
        else {
          char v107 = 0;
        }
        v23[1] = v104;
        v23[2] = v107;
      }
      v6 += v150;
      v7 += v12;
      v8 += v12;
      v9 += v149;
      ++v11;
      v15 += v150;
    }
    while (v11 != v152);
  }
  else
  {
    unint64_t v10 = a1 >> 1;
  }
  if (v143)
  {
    if (a1 >= 2)
    {
      if (v10 <= 1) {
        uint64_t v108 = 1;
      }
      else {
        uint64_t v108 = v10;
      }
      v109.i64[0] = 0xFF000000FFLL;
      v109.i64[1] = 0xFF000000FFLL;
      do
      {
        int v110 = *v7;
        v7 += 2;
        int v111 = v110 - 128;
        int v112 = *v8;
        v8 += 2;
        int v113 = v6[1];
        int v114 = -11276 * v111;
        int v115 = 58065 * v111;
        __int32 v116 = v114 - 23400 * (v112 - 128);
        int v117 = 45941 * (v112 - 128);
        unsigned int v118 = v113 << 15;
        int v119 = v116 + (v113 << 15);
        int v120 = v119 >> 15;
        if (v119 >> 15 >= 255) {
          LOBYTE(v120) = -1;
        }
        if (v119 >= 0) {
          char v121 = v120;
        }
        else {
          char v121 = 0;
        }
        int v122 = v115 + (v113 << 15);
        v123.i32[0] = v117;
        v123.i32[1] = *v6 << 15;
        v123.i32[2] = v115;
        if (v122 >> 15 >= 255) {
          char v124 = -1;
        }
        else {
          char v124 = v122 >> 15;
        }
        v125.i32[1] = v116;
        v125.i64[1] = __PAIR64__(v118, *v6 << 15);
        v123.i32[3] = v117;
        v125.i32[0] = *v6 << 15;
        int32x4_t v126 = vaddq_s32(v123, v125);
        *(int16x4_t *)v125.i8 = vmovn_s32(vcltzq_s32(v126));
        int16x8_t v127 = (int16x8_t)vminq_s32(vshrq_n_s32(v126, 0xFuLL), v109);
        *(int8x8_t *)v127.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v127), *(int8x8_t *)v125.i8);
        v6 += 2;
        *(_DWORD *)unint64_t v9 = vmovn_s16(v127).u32[0];
        if (v122 < 0) {
          char v124 = 0;
        }
        v9[4] = v121;
        v9[5] = v124;
        v9 += 6;
        --v108;
      }
      while (v108);
      LOBYTE(a1) = v148;
    }
    if (a1)
    {
      int v128 = *v7 - 128;
      int v129 = *v8 - 128;
      int v130 = *v6;
      int v131 = -11276 * v128 - 23400 * v129;
      int v132 = 58065 * v128;
      int v133 = 45941 * v129 + (v130 << 15);
      int v134 = v133 >> 15;
      if (v133 >> 15 >= 255) {
        LOBYTE(v134) = -1;
      }
      if (v133 >= 0) {
        char v135 = v134;
      }
      else {
        char v135 = 0;
      }
      int v136 = v131 + (v130 << 15);
      int v137 = v136 >> 15;
      if (v136 >> 15 >= 255) {
        LOBYTE(v137) = -1;
      }
      if (v136 >= 0) {
        char v138 = v137;
      }
      else {
        char v138 = 0;
      }
      int v139 = v132 + (v130 << 15);
      int v140 = v139 >> 15;
      if (v139 >> 15 >= 255) {
        LOBYTE(v140) = -1;
      }
      *unint64_t v9 = v135;
      if (v139 >= 0) {
        char v141 = v140;
      }
      else {
        char v141 = 0;
      }
      v9[1] = v138;
      v9[2] = v141;
    }
  }
  return 0;
}

uint64_t vt_Copy_y420ITU709_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, uint8x8_t **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = a4[2];
  unint64_t v9 = a1 >> 1;
  unint64_t v10 = *a6;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    uint64_t v14 = a3[2];
    uint64_t v15 = *a5;
    unint64_t v168 = 4 * (a1 >> 3);
    uint64_t v167 = 2 * *a3;
    uint64_t v166 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a1 >> 3;
    }
    uint64_t v17 = 4 * v16;
    unint64_t v18 = v9 - 4 * (a1 >> 3);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    int32x4_t v20 = vdupq_n_s32(0xFFFFE4B5);
    int32x4_t v21 = vdupq_n_s32(0xFFFFBBCB);
    int32x4_t v22 = vdupq_n_s32(0x10E63u);
    int32x4_t v23 = vdupq_n_s32(0xE579u);
    uint16x8_t v24 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    uint64_t v26 = -1;
    unint64_t v163 = a1 >> 1;
    unint64_t v164 = a1;
    uint64_t v161 = a3[2];
    uint64_t v162 = a3[1];
    do
    {
      if (a1 >= 8)
      {
        unint64_t v33 = 0;
        int32x4_t v32 = v6;
        uint64_t v29 = v10;
        do
        {
          int32x4_t v34 = &v29[v15];
          int32x4_t v35 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v7->u32[v33 / 4]));
          int32x4_t v36 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v8->u32[v33 / 4]));
          int32x4_t v37 = vmlaq_s32(vmulq_s32(v35, v20), v36, v21);
          int32x4_t v38 = vmulq_s32(v35, v22);
          int32x4_t v39 = vmulq_s32(v36, v23);
          int32x4_t v40 = vzip1q_s32(v38, v38);
          int32x4_t v41 = vzip2q_s32(v38, v38);
          int32x4_t v42 = vzip1q_s32(v39, v39);
          uint16x8_t v43 = vmovl_u8(*v32);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)((char *)v32 + v13));
          int32x4_t v45 = vzip2q_s32(v39, v39);
          int32x4_t v46 = (int32x4_t)vmlal_u16(v25, *(uint16x4_t *)v43.i8, *(uint16x4_t *)v24.i8);
          int32x4_t v47 = (int32x4_t)vmlal_high_u16(v25, v43, v24);
          int32x4_t v48 = vzip1q_s32(v37, v37);
          int32x4_t v49 = (int32x4_t)vmlal_u16(v25, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v24.i8);
          int32x4_t v50 = (int32x4_t)vmlal_high_u16(v25, v44, v24);
          int32x4_t v51 = vzip2q_s32(v37, v37);
          v169.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v46), 0xFuLL), vaddq_s32(v45, v47), 0xFuLL));
          v169.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v48, v46), 0xFuLL), vaddq_s32(v51, v47), 0xFuLL));
          int8x8_t v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v49), 0xFuLL), vaddq_s32(v45, v50), 0xFuLL));
          v169.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v40, v46), 0xFuLL), vaddq_s32(v41, v47), 0xFuLL));
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v48, v49), 0xFuLL), vaddq_s32(v51, v50), 0xFuLL));
          int8x8_t v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v40, v49), 0xFuLL), vaddq_s32(v41, v50), 0xFuLL));
          v169.val[0] = (int8x8_t)-1;
          vst4_s8(v29, v169);
          v29 += 32;
          vst4_s8(v34, *(int8x8x4_t *)&v26);
          ++v32;
          v33 += 4;
        }
        while (v17 != v33);
        uint32x4_t v27 = (unsigned __int8 *)v32 + v13;
        uint16x8_t v31 = (unsigned __int8 *)v7 + v33;
        int8x8_t v30 = (unsigned __int8 *)v8 + v33;
        uint64_t v28 = &v29[v15];
      }
      else
      {
        uint32x4_t v27 = (unsigned __int8 *)v6 + v13;
        uint64_t v28 = &v10[v15];
        uint64_t v29 = v10;
        int8x8_t v30 = (unsigned __int8 *)v8;
        uint16x8_t v31 = (unsigned __int8 *)v7;
        int32x4_t v32 = v6;
      }
      if (v9 > v168)
      {
        uint64_t v165 = v11;
        uint64_t v55 = 0;
        do
        {
          int v56 = v31[v55] - 128;
          int v57 = v30[v55] - 128;
          int v58 = v32->u8[1];
          int v59 = 38155 * v32->u8[0] - 610480;
          int v60 = -6987 * v56 - 17461 * v57;
          int v61 = 69219 * v56;
          int v62 = 58745 * v57;
          int v63 = (v59 + v62) >> 15;
          int32x4_t v32 = (uint8x8_t *)((char *)v32 + 2);
          if (v63 >= 255) {
            LOBYTE(v63) = -1;
          }
          if (v59 + v62 >= 0) {
            char v64 = v63;
          }
          else {
            char v64 = 0;
          }
          int v65 = (v60 + v59) >> 15;
          if (v65 >= 255) {
            LOBYTE(v65) = -1;
          }
          BOOL v66 = v60 + v59 < 0;
          int v67 = v59 + v61;
          int v68 = v67 >> 15;
          if (v66) {
            LOBYTE(v65) = 0;
          }
          if (v68 >= 255) {
            LOBYTE(v68) = -1;
          }
          BOOL v66 = v67 < 0;
          int v69 = 38155 * v58 - 610480;
          int v70 = v69 + v62;
          if (v66) {
            LOBYTE(v68) = 0;
          }
          int v71 = v70 >> 15;
          if (v70 >> 15 >= 255) {
            LOBYTE(v71) = -1;
          }
          BOOL v66 = v70 < 0;
          int v72 = v69 + v60;
          if (v66) {
            LOBYTE(v71) = 0;
          }
          int v73 = v72 >> 15;
          if (v72 >> 15 >= 255) {
            LOBYTE(v73) = -1;
          }
          int v74 = v69 + v61;
          if (v72 >= 0) {
            char v75 = v73;
          }
          else {
            char v75 = 0;
          }
          int v76 = v74 >> 15;
          if (v74 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v74 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          *uint64_t v29 = -1;
          v29[1] = v64;
          v29[2] = v65;
          v29[3] = v68;
          v29[4] = -1;
          v29[5] = v71;
          v29[6] = v75;
          v29[7] = v77;
          v29 += 8;
          int v78 = v27[1];
          int v79 = 38155 * *v27 - 610480;
          v27 += 2;
          int v80 = (v79 + v62) >> 15;
          if (v80 >= 255) {
            LOBYTE(v80) = -1;
          }
          if (v79 + v62 >= 0) {
            char v81 = v80;
          }
          else {
            char v81 = 0;
          }
          int v82 = (v79 + v60) >> 15;
          if (v82 >= 255) {
            LOBYTE(v82) = -1;
          }
          if (v79 + v60 >= 0) {
            char v83 = v82;
          }
          else {
            char v83 = 0;
          }
          int v84 = v79 + v61;
          int v85 = v84 >> 15;
          if (v84 >> 15 >= 255) {
            LOBYTE(v85) = -1;
          }
          if (v84 >= 0) {
            char v86 = v85;
          }
          else {
            char v86 = 0;
          }
          int v87 = 38155 * v78 - 610480;
          int v88 = v87 + v62;
          int v89 = v88 >> 15;
          if (v88 >> 15 >= 255) {
            LOBYTE(v89) = -1;
          }
          if (v88 >= 0) {
            char v90 = v89;
          }
          else {
            char v90 = 0;
          }
          int v91 = v87 + v60;
          int v92 = v91 >> 15;
          if (v91 >> 15 >= 255) {
            LOBYTE(v92) = -1;
          }
          if (v91 >= 0) {
            char v93 = v92;
          }
          else {
            char v93 = 0;
          }
          int v94 = v87 + v61;
          *uint64_t v28 = -1;
          v28[1] = v81;
          if (v94 >> 15 >= 255) {
            char v95 = -1;
          }
          else {
            char v95 = v94 >> 15;
          }
          v28[2] = v83;
          v28[3] = v86;
          v28[4] = -1;
          if (v94 >= 0) {
            char v96 = v95;
          }
          else {
            char v96 = 0;
          }
          v28[5] = v90;
          v28[6] = v93;
          v28[7] = v96;
          v28 += 8;
          ++v55;
        }
        while (v18 != v55);
        v31 += v55;
        v30 += v55;
        unint64_t v9 = v163;
        a1 = v164;
        uint64_t v11 = v165;
        uint64_t v14 = v161;
        uint64_t v12 = v162;
      }
      if (a1)
      {
        int v97 = *v31 - 128;
        int v98 = *v30 - 128;
        int v99 = 38155 * v32->u8[0] - 610480;
        int v100 = -6987 * v97 - 17461 * v98;
        int v101 = 69219 * v97;
        int v102 = 58745 * v98;
        int v103 = (v99 + v102) >> 15;
        if (v103 >= 255) {
          LOBYTE(v103) = -1;
        }
        if (v99 + v102 >= 0) {
          char v104 = v103;
        }
        else {
          char v104 = 0;
        }
        int v105 = (v100 + v99) >> 15;
        if (v105 >= 255) {
          LOBYTE(v105) = -1;
        }
        if (v100 + v99 >= 0) {
          char v106 = v105;
        }
        else {
          char v106 = 0;
        }
        int v107 = v99 + v101;
        int v108 = v107 >> 15;
        if (v107 >> 15 >= 255) {
          LOBYTE(v108) = -1;
        }
        if (v107 >= 0) {
          char v109 = v108;
        }
        else {
          char v109 = 0;
        }
        *uint64_t v29 = -1;
        v29[1] = v104;
        v29[2] = v106;
        v29[3] = v109;
        int v110 = 38155 * *v27 - 610480;
        int v111 = v110 + v102;
        int v112 = v111 >> 15;
        if (v111 >> 15 >= 255) {
          LOBYTE(v112) = -1;
        }
        if (v111 >= 0) {
          char v113 = v112;
        }
        else {
          char v113 = 0;
        }
        int v114 = v110 + v100;
        int v115 = v114 >> 15;
        if (v114 >> 15 >= 255) {
          LOBYTE(v115) = -1;
        }
        if (v114 >= 0) {
          char v116 = v115;
        }
        else {
          char v116 = 0;
        }
        int v117 = v110 + v101;
        int v118 = v117 >> 15;
        if (v117 >> 15 >= 255) {
          LOBYTE(v118) = -1;
        }
        *uint64_t v28 = -1;
        v28[1] = v113;
        if (v117 >= 0) {
          char v119 = v118;
        }
        else {
          char v119 = 0;
        }
        v28[2] = v116;
        v28[3] = v119;
      }
      unint64_t v6 = (uint8x8_t *)((char *)v6 + v167);
      uint64_t v7 = (uint8x8_t *)((char *)v7 + v12);
      uint64_t v8 = (uint8x8_t *)((char *)v8 + v14);
      v10 += v166;
      ++v11;
    }
    while (v11 != a2 >> 1);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v9 <= 1) {
        uint64_t v120 = 1;
      }
      else {
        uint64_t v120 = v9;
      }
      do
      {
        int v121 = v7->u8[0];
        uint64_t v7 = (uint8x8_t *)((char *)v7 + 1);
        int v122 = v121 - 128;
        int v123 = v8->u8[0];
        uint64_t v8 = (uint8x8_t *)((char *)v8 + 1);
        int v124 = v6->u8[0];
        int v125 = v6->u8[1];
        unint64_t v6 = (uint8x8_t *)((char *)v6 + 2);
        int v126 = 38155 * v124 - 610480;
        int v127 = -6987 * v122 - 17461 * (v123 - 128);
        int v128 = 69219 * v122;
        int v129 = 58745 * (v123 - 128);
        int v130 = (v126 + v129) >> 15;
        if (v130 >= 255) {
          LOBYTE(v130) = -1;
        }
        if (v126 + v129 >= 0) {
          char v131 = v130;
        }
        else {
          char v131 = 0;
        }
        int v132 = (v127 + v126) >> 15;
        if (v132 >= 255) {
          LOBYTE(v132) = -1;
        }
        if (v127 + v126 >= 0) {
          char v133 = v132;
        }
        else {
          char v133 = 0;
        }
        int v134 = v126 + v128;
        int v135 = v134 >> 15;
        if (v134 >> 15 >= 255) {
          LOBYTE(v135) = -1;
        }
        if (v134 >= 0) {
          char v136 = v135;
        }
        else {
          char v136 = 0;
        }
        int v137 = 38155 * v125 - 610480;
        int v138 = v137 + v129;
        int v139 = v138 >> 15;
        if (v138 >> 15 >= 255) {
          LOBYTE(v139) = -1;
        }
        if (v138 >= 0) {
          char v140 = v139;
        }
        else {
          char v140 = 0;
        }
        int v141 = v137 + v127;
        int v142 = v141 >> 15;
        if (v141 >> 15 >= 255) {
          LOBYTE(v142) = -1;
        }
        if (v141 >= 0) {
          char v143 = v142;
        }
        else {
          char v143 = 0;
        }
        int v144 = v137 + v128;
        int v145 = v144 >> 15;
        *unint64_t v10 = -1;
        v10[1] = v131;
        if (v144 >> 15 >= 255) {
          LOBYTE(v145) = -1;
        }
        void v10[2] = v133;
        v10[3] = v136;
        v10[4] = -1;
        v10[5] = v140;
        if (v144 >= 0) {
          char v146 = v145;
        }
        else {
          char v146 = 0;
        }
        v10[6] = v143;
        v10[7] = v146;
        v10 += 8;
        --v120;
      }
      while (v120);
    }
    if (a1)
    {
      int v147 = v7->u8[0] - 128;
      int v148 = v8->u8[0] - 128;
      int v149 = 38155 * v6->u8[0] - 610480;
      int v150 = -6987 * v147 - 17461 * v148;
      int v151 = v149 + 58745 * v148;
      int v152 = v151 >> 15;
      if (v151 >> 15 >= 255) {
        LOBYTE(v152) = -1;
      }
      if (v151 >= 0) {
        char v153 = v152;
      }
      else {
        char v153 = 0;
      }
      int v154 = v150 + v149;
      int v155 = v154 >> 15;
      if (v154 >> 15 >= 255) {
        LOBYTE(v155) = -1;
      }
      if (v154 >= 0) {
        char v156 = v155;
      }
      else {
        char v156 = 0;
      }
      int v157 = v149 + 69219 * v147;
      int v158 = v157 >> 15;
      if (v157 >> 15 >= 255) {
        LOBYTE(v158) = -1;
      }
      *unint64_t v10 = -1;
      v10[1] = v153;
      if (v157 >= 0) {
        char v159 = v158;
      }
      else {
        char v159 = 0;
      }
      void v10[2] = v156;
      v10[3] = v159;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU709_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = a1 >> 1;
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  unint64_t v9 = v8 + 1;
  unint64_t v10 = *a6;
  unint64_t v167 = a1;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a5;
    unint64_t v15 = a2 >> 1;
    unint64_t v171 = 4 * (a1 >> 3);
    uint64_t v172 = v13;
    uint64_t v170 = 2 * v12;
    if (a1 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a1 >> 3;
    }
    uint64_t v165 = v12;
    unint64_t v166 = a1 >> 1;
    uint64_t v17 = &v7[v12];
    unint64_t v163 = v6 - 4 * (a1 >> 3);
    uint64_t v164 = v16;
    int32x4_t v18 = vdupq_n_s32(0xFFFFE4B5);
    int32x4_t v19 = vdupq_n_s32(0xFFFFBBCB);
    int32x4_t v20 = vdupq_n_s32(0x10E63u);
    int32x4_t v21 = vdupq_n_s32(0xE579u);
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    uint64_t v25 = -1;
    do
    {
      if (a1 >= 8)
      {
        uint64_t v32 = 0;
        uint64_t v33 = v164;
        uint64_t v28 = v10;
        do
        {
          int32x4_t v34 = &v28[v14];
          int8x8_t v35 = *(int8x8_t *)&v8[v32];
          int32x4_t v36 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v35, *(int8x8_t *)v18.i8)));
          int32x4_t v37 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v35, *(int8x8_t *)v18.i8)));
          int32x4_t v38 = vmlaq_s32(vmulq_s32(v36, v18), v37, v19);
          int32x4_t v39 = vmulq_s32(v36, v20);
          int32x4_t v40 = vmulq_s32(v37, v21);
          int32x4_t v41 = vzip1q_s32(v39, v39);
          int32x4_t v42 = vzip2q_s32(v39, v39);
          int32x4_t v43 = vzip1q_s32(v40, v40);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v7[v32]);
          uint16x8_t v45 = vmovl_u8(*(uint8x8_t *)&v17[v32]);
          int32x4_t v46 = vzip1q_s32(v38, v38);
          int32x4_t v47 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v23.i8);
          int32x4_t v48 = (int32x4_t)vmlal_high_u16(v24, v44, v23);
          int32x4_t v49 = vzip2q_s32(v40, v40);
          int32x4_t v50 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v23.i8);
          int32x4_t v51 = (int32x4_t)vmlal_high_u16(v24, v45, v23);
          int32x4_t v52 = vzip2q_s32(v38, v38);
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v47), 0xFuLL), vaddq_s32(v49, v48), 0xFuLL));
          int8x8_t v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v47), 0xFuLL), vaddq_s32(v52, v48), 0xFuLL));
          v173.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v50), 0xFuLL), vaddq_s32(v49, v51), 0xFuLL));
          int8x8_t v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v47), 0xFuLL), vaddq_s32(v42, v48), 0xFuLL));
          v173.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v50), 0xFuLL), vaddq_s32(v52, v51), 0xFuLL));
          vst4_s8(v28, *(int8x8x4_t *)&v25);
          v28 += 32;
          v173.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v50), 0xFuLL), vaddq_s32(v42, v51), 0xFuLL));
          v173.val[0] = (int8x8_t)-1;
          vst4_s8(v34, v173);
          v32 += 8;
          --v33;
        }
        while (v33);
        uint16x8_t v31 = &v7[v32];
        uint64_t v26 = &v17[v32];
        int8x8_t v30 = &v8[v32];
        uint64_t v29 = &v8[v32 + 1];
        uint32x4_t v27 = &v28[v14];
      }
      else
      {
        uint64_t v26 = &v7[v165];
        uint32x4_t v27 = &v10[v14];
        uint64_t v28 = v10;
        uint64_t v29 = v9;
        int8x8_t v30 = v8;
        uint16x8_t v31 = v7;
      }
      if (v6 > v171)
      {
        uint64_t v168 = v11;
        int8x8x4_t v169 = v9;
        unint64_t v56 = v163;
        do
        {
          int v57 = *v30;
          v30 += 2;
          int v58 = v57 - 128;
          int v59 = *v29;
          v29 += 2;
          int v60 = 38155 * *v31 - 610480;
          int v61 = -6987 * v58 - 17461 * (v59 - 128);
          int v62 = 69219 * v58;
          int v63 = 58745 * (v59 - 128);
          int v64 = (v60 + v63) >> 15;
          if (v64 >= 255) {
            LOBYTE(v64) = -1;
          }
          if (v60 + v63 >= 0) {
            char v65 = v64;
          }
          else {
            char v65 = 0;
          }
          int v66 = (v61 + v60) >> 15;
          if (v66 >= 255) {
            LOBYTE(v66) = -1;
          }
          BOOL v67 = v61 + v60 < 0;
          int v68 = v60 + v62;
          int v69 = v68 >> 15;
          if (v67) {
            LOBYTE(v66) = 0;
          }
          if (v69 >= 255) {
            LOBYTE(v69) = -1;
          }
          BOOL v67 = v68 < 0;
          int v70 = 38155 * v31[1] - 610480;
          int v71 = v70 + v63;
          if (v67) {
            LOBYTE(v69) = 0;
          }
          int v72 = v71 >> 15;
          if (v71 >> 15 >= 255) {
            LOBYTE(v72) = -1;
          }
          BOOL v67 = v71 < 0;
          int v73 = v70 + v61;
          if (v67) {
            LOBYTE(v72) = 0;
          }
          int v74 = v73 >> 15;
          if (v73 >> 15 >= 255) {
            LOBYTE(v74) = -1;
          }
          int v75 = v70 + v62;
          if (v73 < 0) {
            LOBYTE(v74) = 0;
          }
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v75 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          v31 += 2;
          *uint64_t v28 = -1;
          v28[1] = v65;
          v28[2] = v66;
          v28[3] = v69;
          v28[4] = -1;
          v28[5] = v72;
          v28[6] = v74;
          v28[7] = v77;
          v28 += 8;
          int v78 = *v26;
          int v79 = v26[1];
          v26 += 2;
          int v80 = 38155 * v78 - 610480;
          int v81 = (v80 + v63) >> 15;
          if (v81 >= 255) {
            LOBYTE(v81) = -1;
          }
          if (v80 + v63 >= 0) {
            char v82 = v81;
          }
          else {
            char v82 = 0;
          }
          int v83 = (v80 + v61) >> 15;
          if (v83 >= 255) {
            LOBYTE(v83) = -1;
          }
          if (v80 + v61 >= 0) {
            char v84 = v83;
          }
          else {
            char v84 = 0;
          }
          int v85 = v80 + v62;
          int v86 = v85 >> 15;
          if (v85 >> 15 >= 255) {
            LOBYTE(v86) = -1;
          }
          if (v85 >= 0) {
            char v87 = v86;
          }
          else {
            char v87 = 0;
          }
          int v88 = 38155 * v79 - 610480;
          int v89 = v88 + v63;
          int v90 = (v88 + v63) >> 15;
          if (v90 >= 255) {
            LOBYTE(v90) = -1;
          }
          if (v89 >= 0) {
            char v91 = v90;
          }
          else {
            char v91 = 0;
          }
          int v92 = v88 + v61;
          int v93 = v92 >> 15;
          if (v92 >> 15 >= 255) {
            LOBYTE(v93) = -1;
          }
          int v94 = v88 + v62;
          int v95 = v94 >> 15;
          *uint32x4_t v27 = -1;
          v27[1] = v82;
          if (v92 >= 0) {
            char v96 = v93;
          }
          else {
            char v96 = 0;
          }
          if (v95 >= 255) {
            LOBYTE(v95) = -1;
          }
          v27[2] = v84;
          v27[4] = -1;
          v27[3] = v87;
          v27[5] = v91;
          if (v94 >= 0) {
            char v97 = v95;
          }
          else {
            char v97 = 0;
          }
          v27[6] = v96;
          v27[7] = v97;
          v27 += 8;
          --v56;
        }
        while (v56);
        unint64_t v6 = v166;
        a1 = v167;
        uint64_t v11 = v168;
        unint64_t v9 = v169;
        unint64_t v15 = a2 >> 1;
      }
      if (a1)
      {
        int v98 = *v30 - 128;
        int v99 = *v29 - 128;
        int v100 = 38155 * *v31 - 610480;
        int v101 = -6987 * v98 - 17461 * v99;
        int v102 = 69219 * v98;
        int v103 = 58745 * v99;
        int v104 = (v100 + v103) >> 15;
        if (v104 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v100 + v103 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = (v101 + v100) >> 15;
        if (v106 >= 255) {
          LOBYTE(v106) = -1;
        }
        if (v101 + v100 >= 0) {
          char v107 = v106;
        }
        else {
          char v107 = 0;
        }
        int v108 = v100 + v102;
        int v109 = v108 >> 15;
        if (v108 >> 15 >= 255) {
          LOBYTE(v109) = -1;
        }
        if (v108 >= 0) {
          char v110 = v109;
        }
        else {
          char v110 = 0;
        }
        *uint64_t v28 = -1;
        v28[1] = v105;
        v28[2] = v107;
        v28[3] = v110;
        int v111 = 38155 * *v26 - 610480;
        int v112 = v111 + v103;
        int v113 = v112 >> 15;
        if (v112 >> 15 >= 255) {
          LOBYTE(v113) = -1;
        }
        if (v112 >= 0) {
          char v114 = v113;
        }
        else {
          char v114 = 0;
        }
        int v115 = v111 + v101;
        int v116 = v115 >> 15;
        if (v115 >> 15 >= 255) {
          LOBYTE(v116) = -1;
        }
        if (v115 >= 0) {
          char v117 = v116;
        }
        else {
          char v117 = 0;
        }
        int v118 = v111 + v102;
        int v119 = v118 >> 15;
        if (v118 >> 15 >= 255) {
          LOBYTE(v119) = -1;
        }
        *uint32x4_t v27 = -1;
        v27[1] = v114;
        if (v118 >= 0) {
          char v120 = v119;
        }
        else {
          char v120 = 0;
        }
        v27[2] = v117;
        v27[3] = v120;
      }
      v7 += v170;
      v8 += v172;
      v9 += v172;
      v10 += 2 * v14;
      ++v11;
      v17 += v170;
    }
    while (v11 != v15);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v6 <= 1) {
        uint64_t v121 = 1;
      }
      else {
        uint64_t v121 = v6;
      }
      do
      {
        int v122 = *v8;
        v8 += 2;
        int v123 = v122 - 128;
        int v124 = *v9;
        int v125 = *v7;
        int v126 = v9 + 2;
        int v127 = v7[1];
        v7 += 2;
        int v128 = 38155 * v125 - 610480;
        int v129 = -6987 * v123 - 17461 * (v124 - 128);
        int v130 = 69219 * v123;
        int v131 = 58745 * (v124 - 128);
        int v132 = (v128 + v131) >> 15;
        if (v132 >= 255) {
          LOBYTE(v132) = -1;
        }
        if (v128 + v131 >= 0) {
          char v133 = v132;
        }
        else {
          char v133 = 0;
        }
        int v134 = (v129 + v128) >> 15;
        if (v134 >= 255) {
          LOBYTE(v134) = -1;
        }
        if (v129 + v128 >= 0) {
          char v135 = v134;
        }
        else {
          char v135 = 0;
        }
        int v136 = v128 + v130;
        int v137 = v136 >> 15;
        if (v136 >> 15 >= 255) {
          LOBYTE(v137) = -1;
        }
        if (v136 >= 0) {
          char v138 = v137;
        }
        else {
          char v138 = 0;
        }
        int v139 = 38155 * v127 - 610480;
        int v140 = v139 + v131;
        int v141 = v140 >> 15;
        if (v140 >> 15 >= 255) {
          LOBYTE(v141) = -1;
        }
        if (v140 >= 0) {
          char v142 = v141;
        }
        else {
          char v142 = 0;
        }
        int v143 = v139 + v129;
        int v144 = v143 >> 15;
        if (v143 >> 15 >= 255) {
          LOBYTE(v144) = -1;
        }
        if (v143 >= 0) {
          char v145 = v144;
        }
        else {
          char v145 = 0;
        }
        int v146 = v139 + v130;
        int v147 = v146 >> 15;
        *unint64_t v10 = -1;
        v10[1] = v133;
        if (v146 >> 15 >= 255) {
          LOBYTE(v147) = -1;
        }
        void v10[2] = v135;
        v10[3] = v138;
        v10[4] = -1;
        v10[5] = v142;
        if (v146 >= 0) {
          char v148 = v147;
        }
        else {
          char v148 = 0;
        }
        unint64_t v9 = v126;
        v10[6] = v145;
        v10[7] = v148;
        v10 += 8;
        --v121;
      }
      while (v121);
      LOBYTE(a1) = v167;
    }
    if (a1)
    {
      int v149 = *v8 - 128;
      int v150 = *v9 - 128;
      int v151 = 38155 * *v7 - 610480;
      int v152 = -6987 * v149 - 17461 * v150;
      int v153 = v151 + 58745 * v150;
      int v154 = v153 >> 15;
      if (v153 >> 15 >= 255) {
        LOBYTE(v154) = -1;
      }
      if (v153 >= 0) {
        char v155 = v154;
      }
      else {
        char v155 = 0;
      }
      int v156 = v152 + v151;
      int v157 = v156 >> 15;
      if (v156 >> 15 >= 255) {
        LOBYTE(v157) = -1;
      }
      if (v156 >= 0) {
        char v158 = v157;
      }
      else {
        char v158 = 0;
      }
      int v159 = v151 + 69219 * v149;
      int v160 = v159 >> 15;
      if (v159 >> 15 >= 255) {
        LOBYTE(v160) = -1;
      }
      *unint64_t v10 = -1;
      v10[1] = v155;
      if (v159 >= 0) {
        char v161 = v160;
      }
      else {
        char v161 = 0;
      }
      void v10[2] = v158;
      v10[3] = v161;
    }
  }
  return 0;
}

uint64_t vt_Copy_y420ITU709_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, uint8x8_t **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = a4[2];
  unint64_t v9 = a1 >> 1;
  unint64_t v10 = *a6;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    uint64_t v14 = a3[2];
    uint64_t v15 = *a5;
    unint64_t v165 = 4 * (a1 >> 3);
    uint64_t v164 = 2 * *a3;
    uint64_t v163 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a1 >> 3;
    }
    uint64_t v17 = 4 * v16;
    unint64_t v18 = v9 - 4 * (a1 >> 3);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    int32x4_t v20 = vdupq_n_s32(0xFFFFE4B5);
    int32x4_t v21 = vdupq_n_s32(0xFFFFBBCB);
    int32x4_t v22 = vdupq_n_s32(0x10E63u);
    int32x4_t v23 = vdupq_n_s32(0xE579u);
    uint16x8_t v24 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    uint64_t v26 = -1;
    unint64_t v160 = a1 >> 1;
    unint64_t v161 = a1;
    uint64_t v158 = a3[2];
    uint64_t v159 = a3[1];
    do
    {
      if (a1 >= 8)
      {
        unint64_t v33 = 0;
        uint64_t v32 = v6;
        uint64_t v29 = v10;
        do
        {
          int32x4_t v34 = &v29[v15];
          int32x4_t v35 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v7->u32[v33 / 4]));
          int32x4_t v36 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v8->u32[v33 / 4]));
          int32x4_t v37 = vmlaq_s32(vmulq_s32(v35, v20), v36, v21);
          int32x4_t v38 = vmulq_s32(v35, v22);
          int32x4_t v39 = vmulq_s32(v36, v23);
          int32x4_t v40 = vzip1q_s32(v38, v38);
          int32x4_t v41 = vzip2q_s32(v38, v38);
          int32x4_t v42 = vzip1q_s32(v39, v39);
          uint16x8_t v43 = vmovl_u8(*v32);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)((char *)v32 + v13));
          int32x4_t v45 = vzip1q_s32(v37, v37);
          int32x4_t v46 = (int32x4_t)vmlal_u16(v25, *(uint16x4_t *)v43.i8, *(uint16x4_t *)v24.i8);
          int32x4_t v47 = (int32x4_t)vmlal_high_u16(v25, v43, v24);
          int32x4_t v48 = vzip2q_s32(v39, v39);
          int32x4_t v49 = (int32x4_t)vmlal_u16(v25, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v24.i8);
          int32x4_t v50 = (int32x4_t)vmlal_high_u16(v25, v44, v24);
          int32x4_t v51 = vzip2q_s32(v37, v37);
          int8x8_t v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v46), 0xFuLL), vaddq_s32(v48, v47), 0xFuLL));
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v45, v46), 0xFuLL), vaddq_s32(v51, v47), 0xFuLL));
          v166.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v49), 0xFuLL), vaddq_s32(v48, v50), 0xFuLL));
          int8x8_t v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v40, v46), 0xFuLL), vaddq_s32(v41, v47), 0xFuLL));
          v166.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v45, v49), 0xFuLL), vaddq_s32(v51, v50), 0xFuLL));
          vst4_s8(v29, *(int8x8x4_t *)(&v26 - 3));
          v29 += 32;
          v166.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v40, v49), 0xFuLL), vaddq_s32(v41, v50), 0xFuLL));
          v166.val[3] = (int8x8_t)-1;
          vst4_s8(v34, v166);
          ++v32;
          v33 += 4;
        }
        while (v17 != v33);
        uint32x4_t v27 = (unsigned __int8 *)v32 + v13;
        uint16x8_t v31 = (unsigned __int8 *)v7 + v33;
        int8x8_t v30 = (unsigned __int8 *)v8 + v33;
        uint64_t v28 = &v29[v15];
      }
      else
      {
        uint32x4_t v27 = (unsigned __int8 *)v6 + v13;
        uint64_t v28 = &v10[v15];
        uint64_t v29 = v10;
        int8x8_t v30 = (unsigned __int8 *)v8;
        uint16x8_t v31 = (unsigned __int8 *)v7;
        uint64_t v32 = v6;
      }
      if (v9 > v165)
      {
        uint64_t v162 = v11;
        uint64_t v55 = 0;
        do
        {
          int v56 = v31[v55] - 128;
          int v57 = v30[v55] - 128;
          int v58 = v32->u8[1];
          int v59 = 38155 * v32->u8[0] - 610480;
          int v60 = -6987 * v56 - 17461 * v57;
          int v61 = 69219 * v56;
          int v62 = 58745 * v57;
          int v63 = (v59 + v62) >> 15;
          uint64_t v32 = (uint8x8_t *)((char *)v32 + 2);
          if (v63 >= 255) {
            LOBYTE(v63) = -1;
          }
          if (v59 + v62 >= 0) {
            char v64 = v63;
          }
          else {
            char v64 = 0;
          }
          int v65 = (v60 + v59) >> 15;
          if (v65 >= 255) {
            LOBYTE(v65) = -1;
          }
          BOOL v66 = v60 + v59 < 0;
          int v67 = v59 + v61;
          int v68 = v67 >> 15;
          if (v66) {
            LOBYTE(v65) = 0;
          }
          if (v68 >= 255) {
            LOBYTE(v68) = -1;
          }
          BOOL v66 = v67 < 0;
          int v69 = 38155 * v58 - 610480;
          int v70 = v69 + v62;
          if (v66) {
            LOBYTE(v68) = 0;
          }
          int v71 = v70 >> 15;
          if (v70 >> 15 >= 255) {
            LOBYTE(v71) = -1;
          }
          BOOL v66 = v70 < 0;
          int v72 = v69 + v60;
          if (v66) {
            LOBYTE(v71) = 0;
          }
          int v73 = v72 >> 15;
          if (v72 >> 15 >= 255) {
            LOBYTE(v73) = -1;
          }
          int v74 = v69 + v61;
          if (v72 >= 0) {
            char v75 = v73;
          }
          else {
            char v75 = 0;
          }
          int v76 = v74 >> 15;
          if (v74 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v74 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          *uint64_t v29 = v68;
          v29[1] = v65;
          v29[2] = v64;
          v29[3] = -1;
          v29[5] = v75;
          v29[6] = v71;
          v29[4] = v77;
          v29[7] = -1;
          v29 += 8;
          int v78 = v27[1];
          int v79 = 38155 * *v27 - 610480;
          v27 += 2;
          int v80 = (v79 + v62) >> 15;
          if (v80 >= 255) {
            LOBYTE(v80) = -1;
          }
          if (v79 + v62 >= 0) {
            char v81 = v80;
          }
          else {
            char v81 = 0;
          }
          int v82 = (v79 + v60) >> 15;
          if (v82 >= 255) {
            LOBYTE(v82) = -1;
          }
          if (v79 + v60 >= 0) {
            char v83 = v82;
          }
          else {
            char v83 = 0;
          }
          int v84 = v79 + v61;
          int v85 = v84 >> 15;
          if (v84 >> 15 >= 255) {
            LOBYTE(v85) = -1;
          }
          if (v84 >= 0) {
            char v86 = v85;
          }
          else {
            char v86 = 0;
          }
          int v87 = 38155 * v78 - 610480;
          int v88 = v87 + v62;
          int v89 = v88 >> 15;
          if (v88 >> 15 >= 255) {
            LOBYTE(v89) = -1;
          }
          if (v88 >= 0) {
            char v90 = v89;
          }
          else {
            char v90 = 0;
          }
          int v91 = v87 + v60;
          int v92 = v91 >> 15;
          if (v91 >> 15 >= 255) {
            LOBYTE(v92) = -1;
          }
          if (v91 >= 0) {
            char v93 = v92;
          }
          else {
            char v93 = 0;
          }
          int v94 = v87 + v61;
          v28[1] = v83;
          *uint64_t v28 = v86;
          if (v94 >> 15 >= 255) {
            char v95 = -1;
          }
          else {
            char v95 = v94 >> 15;
          }
          v28[2] = v81;
          v28[3] = -1;
          if (v94 < 0) {
            char v95 = 0;
          }
          v28[4] = v95;
          v28[5] = v93;
          v28[6] = v90;
          v28[7] = -1;
          v28 += 8;
          ++v55;
        }
        while (v18 != v55);
        v31 += v55;
        v30 += v55;
        unint64_t v9 = v160;
        a1 = v161;
        uint64_t v11 = v162;
        uint64_t v14 = v158;
        uint64_t v12 = v159;
      }
      if (a1)
      {
        int v96 = *v31 - 128;
        int v97 = *v30 - 128;
        int v98 = 38155 * v32->u8[0] - 610480;
        int v99 = -6987 * v96 - 17461 * v97;
        int v100 = 69219 * v96;
        int v101 = 58745 * v97;
        int v102 = (v98 + v101) >> 15;
        if (v102 >= 255) {
          LOBYTE(v102) = -1;
        }
        if (v98 + v101 >= 0) {
          char v103 = v102;
        }
        else {
          char v103 = 0;
        }
        int v104 = (v99 + v98) >> 15;
        if (v104 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v99 + v98 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = v98 + v100;
        int v107 = v106 >> 15;
        if (v106 >> 15 >= 255) {
          LOBYTE(v107) = -1;
        }
        if (v106 >= 0) {
          char v108 = v107;
        }
        else {
          char v108 = 0;
        }
        *uint64_t v29 = v108;
        v29[1] = v105;
        v29[2] = v103;
        v29[3] = -1;
        int v109 = 38155 * *v27 - 610480;
        int v110 = v109 + v101;
        int v111 = v110 >> 15;
        if (v110 >> 15 >= 255) {
          LOBYTE(v111) = -1;
        }
        if (v110 >= 0) {
          char v112 = v111;
        }
        else {
          char v112 = 0;
        }
        int v113 = v109 + v99;
        int v114 = v113 >> 15;
        if (v113 >> 15 >= 255) {
          LOBYTE(v114) = -1;
        }
        if (v113 >= 0) {
          char v115 = v114;
        }
        else {
          char v115 = 0;
        }
        int v116 = v109 + v100;
        int v117 = v116 >> 15;
        if (v116 >> 15 >= 255) {
          LOBYTE(v117) = -1;
        }
        if (v116 >= 0) {
          char v118 = v117;
        }
        else {
          char v118 = 0;
        }
        *uint64_t v28 = v118;
        v28[1] = v115;
        v28[2] = v112;
        v28[3] = -1;
      }
      unint64_t v6 = (uint8x8_t *)((char *)v6 + v164);
      uint64_t v7 = (uint8x8_t *)((char *)v7 + v12);
      uint64_t v8 = (uint8x8_t *)((char *)v8 + v14);
      v10 += v163;
      ++v11;
    }
    while (v11 != a2 >> 1);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v9 <= 1) {
        uint64_t v119 = 1;
      }
      else {
        uint64_t v119 = v9;
      }
      do
      {
        int v120 = v7->u8[0];
        uint64_t v7 = (uint8x8_t *)((char *)v7 + 1);
        int v121 = v120 - 128;
        int v122 = v8->u8[0];
        uint64_t v8 = (uint8x8_t *)((char *)v8 + 1);
        int v123 = 38155 * v6->u8[0] - 610480;
        int v124 = -6987 * v121 - 17461 * (v122 - 128);
        int v125 = 69219 * v121;
        int v126 = 58745 * (v122 - 128);
        int v127 = (v123 + v126) >> 15;
        if (v127 >= 255) {
          LOBYTE(v127) = -1;
        }
        if (v123 + v126 >= 0) {
          char v128 = v127;
        }
        else {
          char v128 = 0;
        }
        int v129 = (v124 + v123) >> 15;
        if (v129 >= 255) {
          LOBYTE(v129) = -1;
        }
        if (v124 + v123 >= 0) {
          char v130 = v129;
        }
        else {
          char v130 = 0;
        }
        int v131 = v123 + v125;
        int v132 = v131 >> 15;
        if (v131 >> 15 >= 255) {
          LOBYTE(v132) = -1;
        }
        if (v131 >= 0) {
          char v133 = v132;
        }
        else {
          char v133 = 0;
        }
        int v134 = 38155 * v6->u8[1] - 610480;
        int v135 = v134 + v126;
        int v136 = v135 >> 15;
        if (v135 >> 15 >= 255) {
          LOBYTE(v136) = -1;
        }
        if (v135 >= 0) {
          char v137 = v136;
        }
        else {
          char v137 = 0;
        }
        int v138 = v134 + v124;
        int v139 = v138 >> 15;
        if (v138 >> 15 >= 255) {
          LOBYTE(v139) = -1;
        }
        if (v138 >= 0) {
          char v140 = v139;
        }
        else {
          char v140 = 0;
        }
        int v141 = v134 + v125;
        *unint64_t v10 = v133;
        v10[1] = v130;
        if (v141 >> 15 >= 255) {
          char v142 = -1;
        }
        else {
          char v142 = v141 >> 15;
        }
        void v10[2] = v128;
        v10[3] = -1;
        if (v141 >= 0) {
          char v143 = v142;
        }
        else {
          char v143 = 0;
        }
        v10[4] = v143;
        v10[5] = v140;
        unint64_t v6 = (uint8x8_t *)((char *)v6 + 2);
        v10[6] = v137;
        v10[7] = -1;
        v10 += 8;
        --v119;
      }
      while (v119);
    }
    if (a1)
    {
      int v144 = v7->u8[0] - 128;
      int v145 = v8->u8[0] - 128;
      int v146 = 38155 * v6->u8[0] - 610480;
      int v147 = -6987 * v144 - 17461 * v145;
      int v148 = v146 + 58745 * v145;
      int v149 = v148 >> 15;
      if (v148 >> 15 >= 255) {
        LOBYTE(v149) = -1;
      }
      if (v148 >= 0) {
        char v150 = v149;
      }
      else {
        char v150 = 0;
      }
      int v151 = v147 + v146;
      int v152 = v151 >> 15;
      if (v151 >> 15 >= 255) {
        LOBYTE(v152) = -1;
      }
      if (v151 >= 0) {
        char v153 = v152;
      }
      else {
        char v153 = 0;
      }
      int v154 = v146 + 69219 * v144;
      int v155 = v154 >> 15;
      if (v154 >> 15 >= 255) {
        LOBYTE(v155) = -1;
      }
      if (v154 >= 0) {
        char v156 = v155;
      }
      else {
        char v156 = 0;
      }
      *unint64_t v10 = v156;
      v10[1] = v153;
      void v10[2] = v150;
      v10[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU709_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = a1 >> 1;
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  unint64_t v9 = v8 + 1;
  unint64_t v10 = *a6;
  unint64_t v163 = a1;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a5;
    unint64_t v15 = a2 >> 1;
    unint64_t v167 = 4 * (a1 >> 3);
    uint64_t v168 = v13;
    uint64_t v166 = 2 * v12;
    if (a1 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a1 >> 3;
    }
    uint64_t v161 = v12;
    unint64_t v162 = a1 >> 1;
    uint64_t v17 = &v7[v12];
    unint64_t v159 = v6 - 4 * (a1 >> 3);
    uint64_t v160 = v16;
    int32x4_t v18 = vdupq_n_s32(0xFFFFE4B5);
    int32x4_t v19 = vdupq_n_s32(0xFFFFBBCB);
    int32x4_t v20 = vdupq_n_s32(0x10E63u);
    int32x4_t v21 = vdupq_n_s32(0xE579u);
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    uint64_t v25 = -1;
    do
    {
      if (a1 >= 8)
      {
        uint64_t v32 = 0;
        uint64_t v33 = v160;
        uint64_t v28 = v10;
        do
        {
          int32x4_t v34 = &v28[v14];
          int8x8_t v35 = *(int8x8_t *)&v8[v32];
          int32x4_t v36 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v35, *(int8x8_t *)v18.i8)));
          int32x4_t v37 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v35, *(int8x8_t *)v18.i8)));
          int32x4_t v38 = vmlaq_s32(vmulq_s32(v36, v18), v37, v19);
          int32x4_t v39 = vmulq_s32(v36, v20);
          int32x4_t v40 = vmulq_s32(v37, v21);
          int32x4_t v41 = vzip1q_s32(v39, v39);
          int32x4_t v42 = vzip2q_s32(v39, v39);
          int32x4_t v43 = vzip1q_s32(v40, v40);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v7[v32]);
          uint16x8_t v45 = vmovl_u8(*(uint8x8_t *)&v17[v32]);
          int32x4_t v46 = vzip1q_s32(v38, v38);
          int32x4_t v47 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v23.i8);
          int32x4_t v48 = (int32x4_t)vmlal_high_u16(v24, v44, v23);
          int32x4_t v49 = vzip2q_s32(v40, v40);
          int32x4_t v50 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v23.i8);
          int32x4_t v51 = (int32x4_t)vmlal_high_u16(v24, v45, v23);
          int32x4_t v52 = vzip2q_s32(v38, v38);
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v47), 0xFuLL), vaddq_s32(v49, v48), 0xFuLL));
          int8x8_t v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v47), 0xFuLL), vaddq_s32(v52, v48), 0xFuLL));
          v169.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v50), 0xFuLL), vaddq_s32(v49, v51), 0xFuLL));
          int8x8_t v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v47), 0xFuLL), vaddq_s32(v42, v48), 0xFuLL));
          v169.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v50), 0xFuLL), vaddq_s32(v52, v51), 0xFuLL));
          vst4_s8(v28, *(int8x8x4_t *)(&v25 - 3));
          v28 += 32;
          v169.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v50), 0xFuLL), vaddq_s32(v42, v51), 0xFuLL));
          v169.val[3] = (int8x8_t)-1;
          vst4_s8(v34, v169);
          v32 += 8;
          --v33;
        }
        while (v33);
        uint16x8_t v31 = &v7[v32];
        uint64_t v26 = &v17[v32];
        int8x8_t v30 = &v8[v32];
        uint64_t v29 = &v8[v32 + 1];
        uint32x4_t v27 = &v28[v14];
      }
      else
      {
        uint64_t v26 = &v7[v161];
        uint32x4_t v27 = &v10[v14];
        uint64_t v28 = v10;
        uint64_t v29 = v9;
        int8x8_t v30 = v8;
        uint16x8_t v31 = v7;
      }
      if (v6 > v167)
      {
        uint64_t v164 = v11;
        unint64_t v165 = v9;
        unint64_t v56 = v159;
        do
        {
          int v57 = *v30;
          v30 += 2;
          int v58 = v57 - 128;
          int v59 = *v29;
          v29 += 2;
          int v60 = 38155 * *v31 - 610480;
          int v61 = -6987 * v58 - 17461 * (v59 - 128);
          int v62 = 69219 * v58;
          int v63 = 58745 * (v59 - 128);
          int v64 = (v60 + v63) >> 15;
          if (v64 >= 255) {
            LOBYTE(v64) = -1;
          }
          if (v60 + v63 >= 0) {
            char v65 = v64;
          }
          else {
            char v65 = 0;
          }
          int v66 = (v61 + v60) >> 15;
          if (v66 >= 255) {
            LOBYTE(v66) = -1;
          }
          BOOL v67 = v61 + v60 < 0;
          int v68 = v60 + v62;
          int v69 = v68 >> 15;
          if (v67) {
            LOBYTE(v66) = 0;
          }
          if (v69 >= 255) {
            LOBYTE(v69) = -1;
          }
          BOOL v67 = v68 < 0;
          int v70 = 38155 * v31[1] - 610480;
          int v71 = v70 + v63;
          if (v67) {
            LOBYTE(v69) = 0;
          }
          int v72 = v71 >> 15;
          if (v71 >> 15 >= 255) {
            LOBYTE(v72) = -1;
          }
          BOOL v67 = v71 < 0;
          int v73 = v70 + v61;
          if (v67) {
            LOBYTE(v72) = 0;
          }
          int v74 = v73 >> 15;
          if (v73 >> 15 >= 255) {
            LOBYTE(v74) = -1;
          }
          int v75 = v70 + v62;
          if (v73 < 0) {
            LOBYTE(v74) = 0;
          }
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v75 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          *uint64_t v28 = v69;
          v28[1] = v66;
          v28[2] = v65;
          v28[3] = -1;
          v28[5] = v74;
          v28[6] = v72;
          v28[4] = v77;
          v28[7] = -1;
          int v78 = 38155 * *v26 - 610480;
          v31 += 2;
          int v79 = (v78 + v63) >> 15;
          if (v79 >= 255) {
            LOBYTE(v79) = -1;
          }
          int v80 = v78 + v61;
          if (v78 + v63 < 0) {
            LOBYTE(v79) = 0;
          }
          int v81 = v80 >> 15;
          if (v80 >> 15 >= 255) {
            LOBYTE(v81) = -1;
          }
          int v82 = v78 + v62;
          if (v80 >= 0) {
            char v83 = v81;
          }
          else {
            char v83 = 0;
          }
          int v84 = v82 >> 15;
          if (v82 >> 15 >= 255) {
            LOBYTE(v84) = -1;
          }
          BOOL v67 = v82 < 0;
          int v85 = 38155 * v26[1] - 610480;
          if (v67) {
            char v86 = 0;
          }
          else {
            char v86 = v84;
          }
          int v87 = v85 + v63;
          int v88 = (v85 + v63) >> 15;
          if (v88 >= 255) {
            LOBYTE(v88) = -1;
          }
          if (v87 >= 0) {
            char v89 = v88;
          }
          else {
            char v89 = 0;
          }
          int v90 = v85 + v61;
          int v91 = v90 >> 15;
          if (v90 >> 15 >= 255) {
            LOBYTE(v91) = -1;
          }
          if (v90 >= 0) {
            char v92 = v91;
          }
          else {
            char v92 = 0;
          }
          int v93 = v85 + v62;
          *uint32x4_t v27 = v86;
          v27[1] = v83;
          if (v93 >> 15 >= 255) {
            char v94 = -1;
          }
          else {
            char v94 = v93 >> 15;
          }
          v27[2] = v79;
          v27[3] = -1;
          if (v93 >= 0) {
            char v95 = v94;
          }
          else {
            char v95 = 0;
          }
          v27[5] = v92;
          v27[4] = v95;
          v28 += 8;
          v26 += 2;
          v27[6] = v89;
          v27[7] = -1;
          v27 += 8;
          --v56;
        }
        while (v56);
        unint64_t v6 = v162;
        a1 = v163;
        uint64_t v11 = v164;
        unint64_t v9 = v165;
        unint64_t v15 = a2 >> 1;
      }
      if (a1)
      {
        int v96 = *v30 - 128;
        int v97 = *v29 - 128;
        int v98 = 38155 * *v31 - 610480;
        int v99 = -6987 * v96 - 17461 * v97;
        int v100 = 69219 * v96;
        int v101 = 58745 * v97;
        int v102 = (v98 + v101) >> 15;
        if (v102 >= 255) {
          LOBYTE(v102) = -1;
        }
        if (v98 + v101 >= 0) {
          char v103 = v102;
        }
        else {
          char v103 = 0;
        }
        int v104 = (v99 + v98) >> 15;
        if (v104 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v99 + v98 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = v98 + v100;
        int v107 = v106 >> 15;
        if (v106 >> 15 >= 255) {
          LOBYTE(v107) = -1;
        }
        if (v106 >= 0) {
          char v108 = v107;
        }
        else {
          char v108 = 0;
        }
        *uint64_t v28 = v108;
        v28[1] = v105;
        v28[2] = v103;
        v28[3] = -1;
        int v109 = 38155 * *v26 - 610480;
        int v110 = v109 + v101;
        int v111 = v110 >> 15;
        if (v110 >> 15 >= 255) {
          LOBYTE(v111) = -1;
        }
        if (v110 >= 0) {
          char v112 = v111;
        }
        else {
          char v112 = 0;
        }
        int v113 = v109 + v99;
        int v114 = v113 >> 15;
        if (v113 >> 15 >= 255) {
          LOBYTE(v114) = -1;
        }
        if (v113 >= 0) {
          char v115 = v114;
        }
        else {
          char v115 = 0;
        }
        int v116 = v109 + v100;
        int v117 = v116 >> 15;
        if (v116 >> 15 >= 255) {
          LOBYTE(v117) = -1;
        }
        if (v116 >= 0) {
          char v118 = v117;
        }
        else {
          char v118 = 0;
        }
        *uint32x4_t v27 = v118;
        v27[1] = v115;
        v27[2] = v112;
        v27[3] = -1;
      }
      v7 += v166;
      v8 += v168;
      v9 += v168;
      v10 += 2 * v14;
      ++v11;
      v17 += v166;
    }
    while (v11 != v15);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v6 <= 1) {
        uint64_t v119 = 1;
      }
      else {
        uint64_t v119 = v6;
      }
      do
      {
        int v120 = *v8;
        v8 += 2;
        int v121 = v120 - 128;
        int v122 = *v9;
        int v123 = v9 + 2;
        int v124 = 38155 * *v7 - 610480;
        int v125 = -6987 * v121 - 17461 * (v122 - 128);
        int v126 = 69219 * v121;
        int v127 = 58745 * (v122 - 128);
        int v128 = (v124 + v127) >> 15;
        if (v128 >= 255) {
          LOBYTE(v128) = -1;
        }
        if (v124 + v127 >= 0) {
          char v129 = v128;
        }
        else {
          char v129 = 0;
        }
        int v130 = (v125 + v124) >> 15;
        if (v130 >= 255) {
          LOBYTE(v130) = -1;
        }
        if (v125 + v124 >= 0) {
          char v131 = v130;
        }
        else {
          char v131 = 0;
        }
        int v132 = v124 + v126;
        int v133 = v132 >> 15;
        if (v132 >> 15 >= 255) {
          LOBYTE(v133) = -1;
        }
        if (v132 >= 0) {
          char v134 = v133;
        }
        else {
          char v134 = 0;
        }
        int v135 = 38155 * v7[1] - 610480;
        int v136 = v135 + v127;
        int v137 = v136 >> 15;
        if (v136 >> 15 >= 255) {
          LOBYTE(v137) = -1;
        }
        if (v136 >= 0) {
          char v138 = v137;
        }
        else {
          char v138 = 0;
        }
        int v139 = v135 + v125;
        int v140 = v139 >> 15;
        if (v139 >> 15 >= 255) {
          LOBYTE(v140) = -1;
        }
        if (v139 >= 0) {
          char v141 = v140;
        }
        else {
          char v141 = 0;
        }
        int v142 = v135 + v126;
        *unint64_t v10 = v134;
        v10[1] = v131;
        if (v142 >> 15 >= 255) {
          char v143 = -1;
        }
        else {
          char v143 = v142 >> 15;
        }
        unint64_t v9 = v123;
        void v10[2] = v129;
        v10[3] = -1;
        if (v142 >= 0) {
          char v144 = v143;
        }
        else {
          char v144 = 0;
        }
        v10[4] = v144;
        v10[5] = v141;
        v7 += 2;
        v10[6] = v138;
        v10[7] = -1;
        v10 += 8;
        --v119;
      }
      while (v119);
      LOBYTE(a1) = v163;
    }
    if (a1)
    {
      int v145 = *v8 - 128;
      int v146 = *v9 - 128;
      int v147 = 38155 * *v7 - 610480;
      int v148 = -6987 * v145 - 17461 * v146;
      int v149 = v147 + 58745 * v146;
      int v150 = v149 >> 15;
      if (v149 >> 15 >= 255) {
        LOBYTE(v150) = -1;
      }
      if (v149 >= 0) {
        char v151 = v150;
      }
      else {
        char v151 = 0;
      }
      int v152 = v148 + v147;
      int v153 = v152 >> 15;
      if (v152 >> 15 >= 255) {
        LOBYTE(v153) = -1;
      }
      if (v152 >= 0) {
        char v154 = v153;
      }
      else {
        char v154 = 0;
      }
      int v155 = v147 + 69219 * v145;
      int v156 = v155 >> 15;
      if (v155 >> 15 >= 255) {
        LOBYTE(v156) = -1;
      }
      if (v155 >= 0) {
        char v157 = v156;
      }
      else {
        char v157 = 0;
      }
      *unint64_t v10 = v157;
      v10[1] = v154;
      void v10[2] = v151;
      v10[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU709_24RGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6, int32x4_t a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  unint64_t v14 = a1 >> 1;
  uint64_t v16 = *a4;
  unint64_t v15 = a4[1];
  uint64_t v17 = v15 + 1;
  int32x4_t v18 = *a6;
  if (a2 >= 2)
  {
    uint64_t v19 = 0;
    uint64_t v21 = *a3;
    uint64_t v20 = a3[1];
    uint64_t v22 = *a5;
    unint64_t v23 = a2 >> 1;
    uint64_t v147 = 2 * v21;
    unint64_t v148 = 4 * (a1 >> 3);
    uint64_t v146 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = a1 >> 3;
    }
    uint64_t v143 = v21;
    uint64_t v25 = &v16[v21];
    unint64_t v140 = v14 - 4 * (a1 >> 3);
    uint64_t v141 = v24;
    *(int32x2_t *)a7.i8 = vdup_n_s32(0xFFF6AF50);
    v26.i64[0] = 0xFF000000FFLL;
    v26.i64[1] = 0xFF000000FFLL;
    v27.i64[0] = 0x7F0000007FLL;
    v27.i64[1] = 0x7F0000007FLL;
    int32x4_t v28 = vdupq_n_s32(0xFFFFE4B5);
    a12 = vdupq_n_s32(0xFFFFBBCB);
    int32x4_t v29 = vdupq_n_s32(0x10E63u);
    int32x4_t v30 = vdupq_n_s32(0xE579u);
    uint16x8_t v31 = (uint16x8_t)vdupq_n_s16(0x950Bu);
    uint32x4_t v32 = (uint32x4_t)vdupq_n_s32(0xFFF6AF50);
    unint64_t v144 = a1 >> 1;
    unint64_t v145 = a1;
    uint64_t v142 = v20;
    do
    {
      if (a1 >= 8)
      {
        uint64_t v39 = 0;
        uint64_t v40 = v141;
        int8x8_t v35 = v18;
        do
        {
          int8x8_t v41 = *(int8x8_t *)&v15[v39];
          int32x4_t v42 = &v35[v22];
          int32x4_t v43 = (int32x4_t)vaddw_u16(v27, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v41, *(int8x8_t *)a7.i8)));
          int32x4_t v44 = (int32x4_t)vaddw_u16(v27, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v41, *(int8x8_t *)a7.i8)));
          int32x4_t v45 = vmlaq_s32(vmulq_s32(v43, v28), v44, a12);
          int32x4_t v46 = vmulq_s32(v43, v29);
          int32x4_t v47 = vmulq_s32(v44, v30);
          int32x4_t v13 = vzip1q_s32(v46, v46);
          int32x4_t v48 = vzip2q_s32(v46, v46);
          int32x4_t v49 = vzip1q_s32(v47, v47);
          int32x4_t v50 = vzip1q_s32(v45, v45);
          uint16x8_t v51 = vmovl_u8(*(uint8x8_t *)&v16[v39]);
          uint16x8_t v52 = vmovl_u8(*(uint8x8_t *)&v25[v39]);
          int32x4_t v53 = (int32x4_t)vmlal_u16(v32, *(uint16x4_t *)v51.i8, *(uint16x4_t *)v31.i8);
          int32x4_t v54 = vzip2q_s32(v47, v47);
          int32x4_t v55 = (int32x4_t)vmlal_high_u16(v32, v51, v31);
          int32x4_t v56 = (int32x4_t)vmlal_u16(v32, *(uint16x4_t *)v52.i8, *(uint16x4_t *)v31.i8);
          int32x4_t v57 = vzip2q_s32(v45, v45);
          int32x4_t v58 = (int32x4_t)vmlal_high_u16(v32, v52, v31);
          v149.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v49, v53), 0xFuLL), vaddq_s32(v54, v55), 0xFuLL));
          v149.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v53), 0xFuLL), vaddq_s32(v57, v55), 0xFuLL));
          v150.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v49, v56), 0xFuLL), vaddq_s32(v54, v58), 0xFuLL));
          v149.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v13, v53), 0xFuLL), vaddq_s32(v48, v55), 0xFuLL));
          int16x8_t v12 = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v56), 0xFuLL), vaddq_s32(v57, v58), 0xFuLL);
          v150.val[1] = vqmovun_s16(v12);
          vst3_s8(v35, v149);
          v35 += 24;
          v150.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v13, v56), 0xFuLL), vaddq_s32(v48, v58), 0xFuLL));
          vst3_s8(v42, v150);
          v39 += 8;
          --v40;
        }
        while (v40);
        int32x4_t v38 = &v16[v39];
        uint64_t v33 = &v25[v39];
        int32x4_t v37 = &v15[v39];
        int32x4_t v36 = &v15[v39 + 1];
        int32x4_t v34 = &v35[v22];
      }
      else
      {
        uint64_t v33 = &v16[v143];
        int32x4_t v34 = &v18[v22];
        int8x8_t v35 = v18;
        int32x4_t v36 = v17;
        int32x4_t v37 = v15;
        int32x4_t v38 = v16;
      }
      if (v14 > v148)
      {
        uint64_t v59 = 0;
        unint64_t v60 = v140;
        do
        {
          int v61 = &v33[v59];
          int v62 = v37[v59] - 128;
          int v63 = 58745 * (v36[v59] - 128);
          int v64 = v36[v59] - 128;
          v12.i32[1] = v38[v59 + 1];
          int32x4_t v65 = a7;
          v65.i32[0] = -6987 * v62;
          *(int32x2_t *)v65.i8 = vmla_s32(*(int32x2_t *)v65.i8, *(int32x2_t *)v12.i8, (int32x2_t)0x950BFFFFBBCBLL);
          __int32 v66 = v65.i32[0];
          int v67 = (v65.i32[1] + v65.i32[0]) >> 15;
          v12.i32[0] = v63;
          v68.i32[0] = v63;
          v68.i32[1] = 38155 * v38[v59] - 610480;
          if (v67 >= 255) {
            LOBYTE(v67) = -1;
          }
          v13.i32[0] = 38155 * v38[v59] - 610480;
          int32x4_t v69 = vzip1q_s32(v13, v65);
          v69.i32[2] = v69.i32[0];
          if (v65.i32[1] + v65.i32[0] >= 0) {
            char v70 = v67;
          }
          else {
            char v70 = 0;
          }
          int v71 = 69219 * v62;
          int v72 = (v65.i32[1] + v71) >> 15;
          v35[4] = v70;
          if (v72 >= 255) {
            char v73 = -1;
          }
          else {
            char v73 = v72;
          }
          v68.i64[1] = __PAIR64__(v63, v71);
          if (v65.i32[1] + v71 < 0) {
            char v73 = 0;
          }
          int32x4_t v74 = vaddq_s32(v69, v68);
          int32x4_t v75 = vcltzq_s32(v74);
          int16x8_t v76 = (int16x8_t)vminq_s32(vshrq_n_s32(v74, 0xFuLL), v26);
          *(int8x8_t *)v76.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v76), (int8x8_t)vmovn_s32(v75));
          *(_DWORD *)int8x8_t v35 = vmovn_s16(v76).u32[0];
          v35[5] = v73;
          v12.i32[1] = 38155 * *v61 - 610480;
          int v77 = 38155 * v61[1] - 610480;
          v13.i64[0] = v12.i64[0];
          v13.i64[1] = __PAIR64__(v77, v71);
          int32x4_t v78 = (int32x4_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 1), (int8x16_t)v12, 4uLL);
          v78.i32[1] = v65.i32[0];
          int32x4_t v79 = vaddq_s32(v13, v78);
          int8x8_t v80 = (int8x8_t)vmovn_s32(vcltzq_s32(v79));
          int16x8_t v12 = (int16x8_t)vminq_s32(vshrq_n_s32(v79, 0xFuLL), v26);
          *(int16x4_t *)v12.i8 = vmovn_s32((int32x4_t)v12);
          int v81 = (v77 + v66) >> 15;
          v35 += 6;
          if (v81 >= 255) {
            LOBYTE(v81) = -1;
          }
          if (v77 + v66 >= 0) {
            char v82 = v81;
          }
          else {
            char v82 = 0;
          }
          int v83 = v77 + v71;
          *(int8x8_t *)v12.i8 = vbic_s8(*(int8x8_t *)v12.i8, v80);
          int v84 = v83 >> 15;
          if (v83 >> 15 >= 255) {
            LOBYTE(v84) = -1;
          }
          *(_DWORD *)int32x4_t v34 = vmovn_s16(v12).u32[0];
          if (v83 >= 0) {
            char v85 = v84;
          }
          else {
            char v85 = 0;
          }
          v34[4] = v82;
          v34[5] = v85;
          v34 += 6;
          v59 += 2;
          --v60;
        }
        while (v60);
        v38 += v59;
        v33 += v59;
        v37 += v59;
        v36 += v59;
        unint64_t v14 = v144;
        a1 = v145;
        unint64_t v23 = a2 >> 1;
        uint64_t v20 = v142;
      }
      if (a1)
      {
        int v86 = *v37 - 128;
        int v87 = *v36 - 128;
        int v88 = 38155 * *v38 - 610480;
        int v89 = -6987 * v86 - 17461 * v87;
        int v90 = 69219 * v86;
        int v91 = 58745 * v87;
        int v92 = (v88 + v91) >> 15;
        if (v92 >= 255) {
          LOBYTE(v92) = -1;
        }
        if (v88 + v91 >= 0) {
          char v93 = v92;
        }
        else {
          char v93 = 0;
        }
        int v94 = (v89 + v88) >> 15;
        if (v94 >= 255) {
          LOBYTE(v94) = -1;
        }
        if (v89 + v88 >= 0) {
          char v95 = v94;
        }
        else {
          char v95 = 0;
        }
        int v96 = v88 + v90;
        int v97 = v96 >> 15;
        if (v96 >> 15 >= 255) {
          LOBYTE(v97) = -1;
        }
        if (v96 >= 0) {
          char v98 = v97;
        }
        else {
          char v98 = 0;
        }
        *int8x8_t v35 = v93;
        v35[1] = v95;
        v35[2] = v98;
        int v99 = 38155 * *v33 - 610480;
        int v100 = v99 + v91;
        int v101 = v100 >> 15;
        if (v100 >> 15 >= 255) {
          LOBYTE(v101) = -1;
        }
        if (v100 >= 0) {
          char v102 = v101;
        }
        else {
          char v102 = 0;
        }
        int v103 = v99 + v89;
        int v104 = v103 >> 15;
        if (v103 >> 15 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v103 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = v99 + v90;
        int v107 = v106 >> 15;
        if (v106 >> 15 >= 255) {
          LOBYTE(v107) = -1;
        }
        *int32x4_t v34 = v102;
        if (v106 >= 0) {
          char v108 = v107;
        }
        else {
          char v108 = 0;
        }
        v34[1] = v105;
        v34[2] = v108;
      }
      v16 += v147;
      v15 += v20;
      v17 += v20;
      v18 += v146;
      ++v19;
      v25 += v147;
    }
    while (v19 != v23);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v14 <= 1) {
        uint64_t v109 = 1;
      }
      else {
        uint64_t v109 = v14;
      }
      *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6AF50);
      v110.i64[0] = 0xFF000000FFLL;
      v110.i64[1] = 0xFF000000FFLL;
      do
      {
        int v112 = *v15;
        v15 += 2;
        int v111 = v112;
        int v113 = *v17;
        v17 += 2;
        v111 -= 128;
        int v114 = v113 - 128;
        int v115 = 58745 * (v113 - 128);
        v116.i32[0] = v113 - 128;
        v116.i32[1] = v16[1];
        int32x4_t v117 = a8;
        v117.i32[0] = -6987 * v111;
        *(int32x2_t *)v117.i8 = vmla_s32(*(int32x2_t *)v117.i8, v116, (int32x2_t)0x950BFFFFBBCBLL);
        a12.i32[0] = 38155 * *v16 - 610480;
        a12 = vzip1q_s32(a12, v117);
        int v118 = 69219 * v111;
        int v119 = (v117.i32[1] + v117.i32[0]) >> 15;
        if (v119 >= 255) {
          LOBYTE(v119) = -1;
        }
        int v120 = v117.i32[1] + v118;
        if (v117.i32[1] + v117.i32[0] < 0) {
          LOBYTE(v119) = 0;
        }
        a12.i32[2] = a12.i32[0];
        v121.i32[2] = v118;
        if ((v117.i32[1] + v118) >> 15 >= 255) {
          char v122 = -1;
        }
        else {
          char v122 = (v117.i32[1] + v118) >> 15;
        }
        v121.i32[3] = v115;
        v121.i32[1] = 38155 * *v16 - 610480;
        v121.i32[0] = 58745 * v114;
        int32x4_t v123 = vaddq_s32(a12, v121);
        int8x8_t v124 = (int8x8_t)vmovn_s32(vcltzq_s32(v123));
        int16x8_t v125 = (int16x8_t)vminq_s32(vshrq_n_s32(v123, 0xFuLL), v110);
        *(int8x8_t *)v125.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v125), v124);
        v16 += 2;
        *(_DWORD *)int32x4_t v18 = vmovn_s16(v125).u32[0];
        if (v120 < 0) {
          char v122 = 0;
        }
        v18[4] = v119;
        v18[5] = v122;
        v18 += 6;
        --v109;
      }
      while (v109);
    }
    if (a1)
    {
      int v126 = *v15 - 128;
      int v127 = *v17 - 128;
      int v128 = 38155 * *v16 - 610480;
      int v129 = -6987 * v126 - 17461 * v127;
      int v130 = v128 + 58745 * v127;
      int v131 = v130 >> 15;
      if (v130 >> 15 >= 255) {
        LOBYTE(v131) = -1;
      }
      if (v130 >= 0) {
        char v132 = v131;
      }
      else {
        char v132 = 0;
      }
      int v133 = v129 + v128;
      int v134 = v133 >> 15;
      if (v133 >> 15 >= 255) {
        LOBYTE(v134) = -1;
      }
      if (v133 >= 0) {
        char v135 = v134;
      }
      else {
        char v135 = 0;
      }
      int v136 = v128 + 69219 * v126;
      int v137 = v136 >> 15;
      if (v136 >> 15 >= 255) {
        LOBYTE(v137) = -1;
      }
      *int32x4_t v18 = v132;
      if (v136 >= 0) {
        char v138 = v137;
      }
      else {
        char v138 = 0;
      }
      v18[1] = v135;
      v18[2] = v138;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU709F_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = v7 + 1;
  unint64_t v9 = *a6;
  char v164 = a2;
  if (a2 >= 2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a5;
    unint64_t v174 = a2 >> 1;
    unint64_t v173 = 4 * (a1 >> 3);
    uint64_t v172 = 2 * *a3;
    uint64_t v171 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = a1 >> 3;
    }
    uint64_t v168 = *a3;
    unint64_t v169 = a1 >> 1;
    uint64_t v16 = &v6[*a3];
    uint64_t v165 = (a1 >> 1) - 4 * (a1 >> 3);
    uint64_t v166 = v15;
    int32x4_t v17 = vdupq_n_s32(0xFFFFE807);
    int32x4_t v18 = vdupq_n_s32(0xFFFFC416);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    int32x4_t v20 = vdupq_n_s32(0xED84u);
    int32x4_t v21 = vdupq_n_s32(0xC993u);
    uint64_t v22 = -1;
    unint64_t v10 = a1;
    unint64_t v11 = a1 >> 1;
    uint64_t v167 = a3[1];
    do
    {
      if (v10 >= 8)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v166;
        uint64_t v25 = v9;
        do
        {
          uint16x8_t v31 = &v25[v14];
          int8x8_t v32 = *(int8x8_t *)&v7[v29];
          int32x4_t v33 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v32, *(int8x8_t *)v17.i8)));
          int32x4_t v34 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v32, *(int8x8_t *)v17.i8)));
          int32x4_t v35 = vmulq_s32(v33, v17);
          int32x4_t v36 = vmulq_s32(v33, v20);
          int32x4_t v37 = vmulq_s32(v34, v21);
          int32x4_t v38 = vmlaq_s32(v35, v34, v18);
          int32x4_t v39 = vzip1q_s32(v36, v36);
          int32x4_t v40 = vzip2q_s32(v36, v36);
          int32x4_t v41 = vzip1q_s32(v37, v37);
          int32x4_t v42 = vzip1q_s32(v38, v38);
          uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)&v6[v29]);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v16[v29]);
          int32x4_t v45 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          int32x4_t v46 = vzip2q_s32(v37, v37);
          int32x4_t v47 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          int32x4_t v48 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v44.i8, 0xFuLL);
          int32x4_t v49 = (int32x4_t)vshll_high_n_u16(v44, 0xFuLL);
          int32x4_t v50 = vzip2q_s32(v38, v38);
          int8x8_t v51 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v45), 0xFuLL), vaddq_s32(v46, v47), 0xFuLL));
          int8x8_t v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v45), 0xFuLL), vaddq_s32(v50, v47), 0xFuLL));
          v175.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v48), 0xFuLL), vaddq_s32(v46, v49), 0xFuLL));
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v45), 0xFuLL), vaddq_s32(v40, v47), 0xFuLL));
          v175.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          vst4_s8(v25, *(int8x8x4_t *)(&v22 - 3));
          v25 += 32;
          v175.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v48), 0xFuLL), vaddq_s32(v40, v49), 0xFuLL));
          v175.val[3] = (int8x8_t)-1;
          vst4_s8(v31, v175);
          v29 += 8;
          --v30;
        }
        while (v30);
        int32x4_t v28 = &v6[v29];
        unint64_t v23 = &v16[v29];
        uint32x4_t v27 = &v7[v29];
        int32x4_t v26 = &v7[v29 + 1];
        uint64_t v24 = &v25[v14];
      }
      else
      {
        unint64_t v23 = &v6[v168];
        uint64_t v24 = &v9[v14];
        uint64_t v25 = v9;
        int32x4_t v26 = v8;
        uint32x4_t v27 = v7;
        int32x4_t v28 = v6;
      }
      if (v11 > v173)
      {
        uint64_t v54 = v165;
        do
        {
          int v56 = *v27;
          v27 += 2;
          int v55 = v56;
          int v57 = *v26;
          v26 += 2;
          v55 -= 128;
          int v58 = *v28;
          int v59 = v28[1];
          v28 += 2;
          int v60 = -6137 * v55 - 15338 * (v57 - 128);
          int v61 = 60804 * v55;
          int v62 = 51603 * (v57 - 128);
          int v63 = v62 + (v58 << 15);
          int v64 = v63 >> 15;
          if (v63 >> 15 >= 255) {
            LOBYTE(v64) = -1;
          }
          if (v63 < 0) {
            LOBYTE(v64) = 0;
          }
          int v65 = v60 + (v58 << 15);
          int v66 = v65 >> 15;
          if (v65 >> 15 >= 255) {
            LOBYTE(v66) = -1;
          }
          if (v65 < 0) {
            LOBYTE(v66) = 0;
          }
          int v67 = v61 + (v58 << 15);
          int v68 = v67 >> 15;
          if (v67 >> 15 >= 255) {
            LOBYTE(v68) = -1;
          }
          if (v67 >= 0) {
            char v69 = v68;
          }
          else {
            char v69 = 0;
          }
          int v70 = v62 + (v59 << 15);
          int v71 = v70 >> 15;
          if (v70 >> 15 >= 255) {
            LOBYTE(v71) = -1;
          }
          if (v70 < 0) {
            LOBYTE(v71) = 0;
          }
          int v72 = v60 + (v59 << 15);
          int v73 = v72 >> 15;
          if (v72 >> 15 >= 255) {
            LOBYTE(v73) = -1;
          }
          if (v72 >= 0) {
            char v74 = v73;
          }
          else {
            char v74 = 0;
          }
          int v75 = v61 + (v59 << 15);
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v75 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          v25[1] = v66;
          v25[2] = v64;
          v25[3] = -1;
          *uint64_t v25 = v69;
          v25[4] = v77;
          v25[5] = v74;
          v25[6] = v71;
          v25[7] = -1;
          int v78 = *v23;
          int v79 = v23[1];
          int v80 = v62 + (v78 << 15);
          int v81 = v80 >> 15;
          if (v80 >> 15 >= 255) {
            LOBYTE(v81) = -1;
          }
          if (v80 >= 0) {
            char v82 = v81;
          }
          else {
            char v82 = 0;
          }
          int v83 = v60 + (v78 << 15);
          int v84 = v83 >> 15;
          if (v83 >> 15 >= 255) {
            LOBYTE(v84) = -1;
          }
          if (v83 >= 0) {
            char v85 = v84;
          }
          else {
            char v85 = 0;
          }
          int v86 = v61 + (v78 << 15);
          int v87 = v86 >> 15;
          if (v86 >> 15 >= 255) {
            LOBYTE(v87) = -1;
          }
          if (v86 >= 0) {
            char v88 = v87;
          }
          else {
            char v88 = 0;
          }
          int v89 = v62 + (v79 << 15);
          int v90 = v89 >> 15;
          if (v89 >> 15 >= 255) {
            LOBYTE(v90) = -1;
          }
          if (v89 >= 0) {
            char v91 = v90;
          }
          else {
            char v91 = 0;
          }
          int v92 = v60 + (v79 << 15);
          int v93 = v92 >> 15;
          if (v92 >> 15 >= 255) {
            LOBYTE(v93) = -1;
          }
          if (v92 >= 0) {
            char v94 = v93;
          }
          else {
            char v94 = 0;
          }
          int v95 = v61 + (v79 << 15);
          *uint64_t v24 = v88;
          v24[1] = v85;
          if (v95 >> 15 >= 255) {
            LOBYTE(v96) = -1;
          }
          else {
            int v96 = v95 >> 15;
          }
          v24[2] = v82;
          v24[3] = -1;
          if (v95 < 0) {
            LOBYTE(v96) = 0;
          }
          v24[5] = v94;
          v24[4] = v96;
          v25 += 8;
          v23 += 2;
          v24[6] = v91;
          v24[7] = -1;
          v24 += 8;
          --v54;
        }
        while (v54);
        unint64_t v11 = v169;
        unint64_t v10 = a1;
        uint64_t v13 = v167;
      }
      if (v10)
      {
        int v97 = *v27 - 128;
        int v98 = *v26 - 128;
        int v99 = *v28;
        int v100 = -6137 * v97 - 15338 * v98;
        int v101 = 60804 * v97;
        int v102 = 51603 * v98;
        int v103 = v102 + (v99 << 15);
        int v104 = v103 >> 15;
        if (v103 >> 15 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v103 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = v100 + (v99 << 15);
        int v107 = v106 >> 15;
        if (v106 >> 15 >= 255) {
          LOBYTE(v107) = -1;
        }
        if (v106 >= 0) {
          char v108 = v107;
        }
        else {
          char v108 = 0;
        }
        int v109 = v101 + (v99 << 15);
        int v110 = v109 >> 15;
        if (v109 >> 15 >= 255) {
          LOBYTE(v110) = -1;
        }
        if (v109 >= 0) {
          char v111 = v110;
        }
        else {
          char v111 = 0;
        }
        *uint64_t v25 = v111;
        v25[1] = v108;
        v25[2] = v105;
        v25[3] = -1;
        int v112 = *v23;
        int v113 = v102 + (v112 << 15);
        int v114 = v113 >> 15;
        if (v113 >> 15 >= 255) {
          LOBYTE(v114) = -1;
        }
        if (v113 >= 0) {
          char v115 = v114;
        }
        else {
          char v115 = 0;
        }
        int v116 = v100 + (v112 << 15);
        int v117 = v116 >> 15;
        if (v116 >> 15 >= 255) {
          LOBYTE(v117) = -1;
        }
        if (v116 >= 0) {
          char v118 = v117;
        }
        else {
          char v118 = 0;
        }
        int v119 = v101 + (v112 << 15);
        int v120 = v119 >> 15;
        if (v119 >> 15 >= 255) {
          LOBYTE(v120) = -1;
        }
        if (v119 >= 0) {
          char v121 = v120;
        }
        else {
          char v121 = 0;
        }
        *uint64_t v24 = v121;
        v24[1] = v118;
        v24[2] = v115;
        v24[3] = -1;
      }
      v6 += v172;
      v7 += v13;
      v8 += v13;
      v9 += v171;
      ++v12;
      v16 += v172;
    }
    while (v12 != v174);
  }
  else
  {
    unint64_t v10 = a1;
    unint64_t v11 = a1 >> 1;
  }
  if (v164)
  {
    if (v10 >= 2)
    {
      if (v11 <= 1) {
        uint64_t v122 = 1;
      }
      else {
        uint64_t v122 = v11;
      }
      do
      {
        int v123 = *v7;
        v7 += 2;
        int v124 = v123 - 128;
        int v125 = *v8;
        v8 += 2;
        int v126 = *v6;
        int v127 = v6[1];
        int v128 = -6137 * v124 - 15338 * (v125 - 128);
        int v129 = 60804 * v124;
        int v130 = 51603 * (v125 - 128);
        int v131 = v130 + (v126 << 15);
        int v132 = v131 >> 15;
        if (v131 >> 15 >= 255) {
          LOBYTE(v132) = -1;
        }
        if (v131 >= 0) {
          char v133 = v132;
        }
        else {
          char v133 = 0;
        }
        int v134 = v128 + (v126 << 15);
        int v135 = v134 >> 15;
        if (v134 >> 15 >= 255) {
          LOBYTE(v135) = -1;
        }
        if (v134 >= 0) {
          char v136 = v135;
        }
        else {
          char v136 = 0;
        }
        int v137 = v129 + (v126 << 15);
        int v138 = v137 >> 15;
        if (v137 >> 15 >= 255) {
          LOBYTE(v138) = -1;
        }
        if (v137 >= 0) {
          char v139 = v138;
        }
        else {
          char v139 = 0;
        }
        int v140 = v130 + (v127 << 15);
        int v141 = v140 >> 15;
        if (v140 >> 15 >= 255) {
          LOBYTE(v141) = -1;
        }
        if (v140 >= 0) {
          char v142 = v141;
        }
        else {
          char v142 = 0;
        }
        int v143 = v128 + (v127 << 15);
        int v144 = v143 >> 15;
        if (v143 >> 15 >= 255) {
          LOBYTE(v144) = -1;
        }
        if (v143 >= 0) {
          char v145 = v144;
        }
        else {
          char v145 = 0;
        }
        int v146 = v129 + (v127 << 15);
        *unint64_t v9 = v139;
        v9[1] = v136;
        if (v146 >> 15 >= 255) {
          LOBYTE(v147) = -1;
        }
        else {
          int v147 = v146 >> 15;
        }
        v9[2] = v133;
        v9[3] = -1;
        if (v146 >= 0) {
          char v148 = v147;
        }
        else {
          char v148 = 0;
        }
        v9[4] = v148;
        v9[5] = v145;
        v6 += 2;
        v9[6] = v142;
        v9[7] = -1;
        v9 += 8;
        --v122;
      }
      while (v122);
      LOBYTE(v10) = a1;
    }
    if (v10)
    {
      int v149 = *v7 - 128;
      int v150 = *v8 - 128;
      int v151 = *v6;
      int v152 = -6137 * v149 - 15338 * v150;
      int v153 = 60804 * v149;
      int v154 = 51603 * v150 + (v151 << 15);
      int v155 = v154 >> 15;
      if (v154 >> 15 >= 255) {
        LOBYTE(v155) = -1;
      }
      if (v154 >= 0) {
        char v156 = v155;
      }
      else {
        char v156 = 0;
      }
      int v157 = v152 + (v151 << 15);
      int v158 = v157 >> 15;
      if (v157 >> 15 >= 255) {
        LOBYTE(v158) = -1;
      }
      if (v157 >= 0) {
        char v159 = v158;
      }
      else {
        char v159 = 0;
      }
      int v160 = v153 + (v151 << 15);
      int v161 = v160 >> 15;
      if (v160 >> 15 >= 255) {
        LOBYTE(v161) = -1;
      }
      if (v160 >= 0) {
        char v162 = v161;
      }
      else {
        char v162 = 0;
      }
      *unint64_t v9 = v162;
      v9[1] = v159;
      v9[2] = v156;
      v9[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU709F_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = v7 + 1;
  unint64_t v9 = *a6;
  char v165 = a2;
  if (a2 >= 2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a5;
    unint64_t v175 = a2 >> 1;
    unint64_t v174 = 4 * (a1 >> 3);
    uint64_t v173 = 2 * *a3;
    uint64_t v172 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = a1 >> 3;
    }
    uint64_t v169 = *a3;
    unint64_t v170 = a1 >> 1;
    uint64_t v16 = &v6[*a3];
    uint64_t v166 = (a1 >> 1) - 4 * (a1 >> 3);
    uint64_t v167 = v15;
    int32x4_t v17 = vdupq_n_s32(0xFFFFE807);
    int32x4_t v18 = vdupq_n_s32(0xFFFFC416);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    int32x4_t v20 = vdupq_n_s32(0xED84u);
    int32x4_t v21 = vdupq_n_s32(0xC993u);
    uint64_t v22 = -1;
    unint64_t v10 = a1;
    unint64_t v11 = a1 >> 1;
    uint64_t v168 = a3[1];
    do
    {
      if (v10 >= 8)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v167;
        uint64_t v25 = v9;
        do
        {
          uint16x8_t v31 = &v25[v14];
          int8x8_t v32 = *(int8x8_t *)&v7[v29];
          int32x4_t v33 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v32, *(int8x8_t *)v17.i8)));
          int32x4_t v34 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v32, *(int8x8_t *)v17.i8)));
          int32x4_t v35 = vmulq_s32(v33, v17);
          int32x4_t v36 = vmulq_s32(v33, v20);
          int32x4_t v37 = vmulq_s32(v34, v21);
          int32x4_t v38 = vmlaq_s32(v35, v34, v18);
          int32x4_t v39 = vzip1q_s32(v36, v36);
          int32x4_t v40 = vzip2q_s32(v36, v36);
          int32x4_t v41 = vzip1q_s32(v37, v37);
          int32x4_t v42 = vzip1q_s32(v38, v38);
          uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)&v6[v29]);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v16[v29]);
          int32x4_t v45 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          int32x4_t v46 = vzip2q_s32(v37, v37);
          int32x4_t v47 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          int32x4_t v48 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v44.i8, 0xFuLL);
          int32x4_t v49 = (int32x4_t)vshll_high_n_u16(v44, 0xFuLL);
          int32x4_t v50 = vzip2q_s32(v38, v38);
          int8x8_t v51 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v45), 0xFuLL), vaddq_s32(v46, v47), 0xFuLL));
          int8x8_t v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v45), 0xFuLL), vaddq_s32(v50, v47), 0xFuLL));
          v176.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v48), 0xFuLL), vaddq_s32(v46, v49), 0xFuLL));
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v45), 0xFuLL), vaddq_s32(v40, v47), 0xFuLL));
          v176.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          vst4_s8(v25, *(int8x8x4_t *)&v22);
          v25 += 32;
          v176.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v48), 0xFuLL), vaddq_s32(v40, v49), 0xFuLL));
          v176.val[0] = (int8x8_t)-1;
          vst4_s8(v31, v176);
          v29 += 8;
          --v30;
        }
        while (v30);
        int32x4_t v28 = &v6[v29];
        unint64_t v23 = &v16[v29];
        uint32x4_t v27 = &v7[v29];
        int32x4_t v26 = &v7[v29 + 1];
        uint64_t v24 = &v25[v14];
      }
      else
      {
        unint64_t v23 = &v6[v169];
        uint64_t v24 = &v9[v14];
        uint64_t v25 = v9;
        int32x4_t v26 = v8;
        uint32x4_t v27 = v7;
        int32x4_t v28 = v6;
      }
      if (v11 > v174)
      {
        uint64_t v54 = v166;
        do
        {
          int v56 = *v27;
          v27 += 2;
          int v55 = v56;
          int v57 = *v26;
          v26 += 2;
          v55 -= 128;
          int v58 = *v28;
          int v59 = v28[1];
          v28 += 2;
          int v60 = -6137 * v55 - 15338 * (v57 - 128);
          int v61 = 60804 * v55;
          int v62 = 51603 * (v57 - 128);
          int v63 = v62 + (v58 << 15);
          int v64 = v63 >> 15;
          if (v63 >> 15 >= 255) {
            LOBYTE(v64) = -1;
          }
          if (v63 < 0) {
            LOBYTE(v64) = 0;
          }
          int v65 = v60 + (v58 << 15);
          int v66 = v65 >> 15;
          if (v65 >> 15 >= 255) {
            LOBYTE(v66) = -1;
          }
          if (v65 < 0) {
            LOBYTE(v66) = 0;
          }
          int v67 = v61 + (v58 << 15);
          int v68 = v67 >> 15;
          if (v67 >> 15 >= 255) {
            LOBYTE(v68) = -1;
          }
          if (v67 >= 0) {
            char v69 = v68;
          }
          else {
            char v69 = 0;
          }
          int v70 = v62 + (v59 << 15);
          int v71 = v70 >> 15;
          if (v70 >> 15 >= 255) {
            LOBYTE(v71) = -1;
          }
          if (v70 < 0) {
            LOBYTE(v71) = 0;
          }
          int v72 = v60 + (v59 << 15);
          int v73 = v72 >> 15;
          if (v72 >> 15 >= 255) {
            LOBYTE(v73) = -1;
          }
          if (v72 >= 0) {
            char v74 = v73;
          }
          else {
            char v74 = 0;
          }
          int v75 = v61 + (v59 << 15);
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v75 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          *uint64_t v25 = -1;
          v25[1] = v64;
          v25[2] = v66;
          v25[3] = v69;
          v25[4] = -1;
          v25[5] = v71;
          v25[6] = v74;
          v25[7] = v77;
          int v78 = *v23;
          v25 += 8;
          int v79 = v23[1];
          v23 += 2;
          int v80 = v62 + (v78 << 15);
          int v81 = v80 >> 15;
          if (v80 >> 15 >= 255) {
            LOBYTE(v81) = -1;
          }
          if (v80 >= 0) {
            char v82 = v81;
          }
          else {
            char v82 = 0;
          }
          int v83 = v60 + (v78 << 15);
          int v84 = v83 >> 15;
          if (v83 >> 15 >= 255) {
            LOBYTE(v84) = -1;
          }
          if (v83 >= 0) {
            char v85 = v84;
          }
          else {
            char v85 = 0;
          }
          int v86 = v61 + (v78 << 15);
          int v87 = v86 >> 15;
          if (v86 >> 15 >= 255) {
            LOBYTE(v87) = -1;
          }
          if (v86 >= 0) {
            char v88 = v87;
          }
          else {
            char v88 = 0;
          }
          int v89 = v62 + (v79 << 15);
          int v90 = v89 >> 15;
          if (v89 >> 15 >= 255) {
            LOBYTE(v90) = -1;
          }
          if (v89 >= 0) {
            char v91 = v90;
          }
          else {
            char v91 = 0;
          }
          int v92 = v60 + (v79 << 15);
          int v93 = v92 >> 15;
          if (v92 >> 15 >= 255) {
            LOBYTE(v93) = -1;
          }
          int v94 = v61 + (v79 << 15);
          int v95 = v94 >> 15;
          *uint64_t v24 = -1;
          v24[1] = v82;
          if (v92 >= 0) {
            char v96 = v93;
          }
          else {
            char v96 = 0;
          }
          if (v95 >= 255) {
            LOBYTE(v95) = -1;
          }
          v24[2] = v85;
          v24[4] = -1;
          v24[3] = v88;
          v24[5] = v91;
          if (v94 >= 0) {
            char v97 = v95;
          }
          else {
            char v97 = 0;
          }
          v24[6] = v96;
          v24[7] = v97;
          v24 += 8;
          --v54;
        }
        while (v54);
        unint64_t v11 = v170;
        unint64_t v10 = a1;
        uint64_t v13 = v168;
      }
      if (v10)
      {
        int v98 = *v27 - 128;
        int v99 = *v26 - 128;
        int v100 = *v28;
        int v101 = -6137 * v98 - 15338 * v99;
        int v102 = 60804 * v98;
        int v103 = 51603 * v99;
        int v104 = v103 + (v100 << 15);
        int v105 = v104 >> 15;
        if (v104 >> 15 >= 255) {
          LOBYTE(v105) = -1;
        }
        if (v104 >= 0) {
          char v106 = v105;
        }
        else {
          char v106 = 0;
        }
        int v107 = v101 + (v100 << 15);
        int v108 = v107 >> 15;
        if (v107 >> 15 >= 255) {
          LOBYTE(v108) = -1;
        }
        if (v107 >= 0) {
          char v109 = v108;
        }
        else {
          char v109 = 0;
        }
        int v110 = v102 + (v100 << 15);
        int v111 = v110 >> 15;
        if (v110 >> 15 >= 255) {
          LOBYTE(v111) = -1;
        }
        if (v110 >= 0) {
          char v112 = v111;
        }
        else {
          char v112 = 0;
        }
        *uint64_t v25 = -1;
        v25[1] = v106;
        v25[2] = v109;
        v25[3] = v112;
        int v113 = *v23;
        int v114 = v103 + (v113 << 15);
        int v115 = v114 >> 15;
        if (v114 >> 15 >= 255) {
          LOBYTE(v115) = -1;
        }
        if (v114 >= 0) {
          char v116 = v115;
        }
        else {
          char v116 = 0;
        }
        int v117 = v101 + (v113 << 15);
        int v118 = v117 >> 15;
        if (v117 >> 15 >= 255) {
          LOBYTE(v118) = -1;
        }
        if (v117 >= 0) {
          char v119 = v118;
        }
        else {
          char v119 = 0;
        }
        int v120 = v102 + (v113 << 15);
        int v121 = v120 >> 15;
        if (v120 >> 15 >= 255) {
          LOBYTE(v121) = -1;
        }
        *uint64_t v24 = -1;
        v24[1] = v116;
        if (v120 >= 0) {
          char v122 = v121;
        }
        else {
          char v122 = 0;
        }
        v24[2] = v119;
        v24[3] = v122;
      }
      v6 += v173;
      v7 += v13;
      v8 += v13;
      v9 += v172;
      ++v12;
      v16 += v173;
    }
    while (v12 != v175);
  }
  else
  {
    unint64_t v10 = a1;
    unint64_t v11 = a1 >> 1;
  }
  if (v165)
  {
    if (v10 >= 2)
    {
      if (v11 <= 1) {
        uint64_t v123 = 1;
      }
      else {
        uint64_t v123 = v11;
      }
      do
      {
        int v124 = *v7;
        v7 += 2;
        int v125 = v124 - 128;
        int v126 = *v8;
        v8 += 2;
        int v127 = *v6;
        int v128 = v6[1];
        v6 += 2;
        int v129 = -6137 * v125 - 15338 * (v126 - 128);
        int v130 = 60804 * v125;
        int v131 = 51603 * (v126 - 128);
        int v132 = v131 + (v127 << 15);
        int v133 = v132 >> 15;
        if (v132 >> 15 >= 255) {
          LOBYTE(v133) = -1;
        }
        if (v132 >= 0) {
          char v134 = v133;
        }
        else {
          char v134 = 0;
        }
        int v135 = v129 + (v127 << 15);
        int v136 = v135 >> 15;
        if (v135 >> 15 >= 255) {
          LOBYTE(v136) = -1;
        }
        if (v135 >= 0) {
          char v137 = v136;
        }
        else {
          char v137 = 0;
        }
        int v138 = v130 + (v127 << 15);
        int v139 = v138 >> 15;
        if (v138 >> 15 >= 255) {
          LOBYTE(v139) = -1;
        }
        if (v138 >= 0) {
          char v140 = v139;
        }
        else {
          char v140 = 0;
        }
        int v141 = v131 + (v128 << 15);
        int v142 = v141 >> 15;
        if (v141 >> 15 >= 255) {
          LOBYTE(v142) = -1;
        }
        if (v141 >= 0) {
          char v143 = v142;
        }
        else {
          char v143 = 0;
        }
        int v144 = v129 + (v128 << 15);
        int v145 = v144 >> 15;
        if (v144 >> 15 >= 255) {
          LOBYTE(v145) = -1;
        }
        if (v144 >= 0) {
          char v146 = v145;
        }
        else {
          char v146 = 0;
        }
        int v147 = v130 + (v128 << 15);
        int v148 = v147 >> 15;
        *unint64_t v9 = -1;
        v9[1] = v134;
        if (v147 >> 15 >= 255) {
          LOBYTE(v148) = -1;
        }
        v9[2] = v137;
        v9[3] = v140;
        v9[4] = -1;
        v9[5] = v143;
        if (v147 >= 0) {
          char v149 = v148;
        }
        else {
          char v149 = 0;
        }
        v9[6] = v146;
        v9[7] = v149;
        v9 += 8;
        --v123;
      }
      while (v123);
      LOBYTE(v10) = a1;
    }
    if (v10)
    {
      int v150 = *v7 - 128;
      int v151 = *v8 - 128;
      int v152 = *v6;
      int v153 = -6137 * v150 - 15338 * v151;
      int v154 = 60804 * v150;
      int v155 = 51603 * v151 + (v152 << 15);
      int v156 = v155 >> 15;
      if (v155 >> 15 >= 255) {
        LOBYTE(v156) = -1;
      }
      if (v155 >= 0) {
        char v157 = v156;
      }
      else {
        char v157 = 0;
      }
      int v158 = v153 + (v152 << 15);
      int v159 = v158 >> 15;
      if (v158 >> 15 >= 255) {
        LOBYTE(v159) = -1;
      }
      if (v158 >= 0) {
        char v160 = v159;
      }
      else {
        char v160 = 0;
      }
      int v161 = v154 + (v152 << 15);
      int v162 = v161 >> 15;
      if (v161 >> 15 >= 255) {
        LOBYTE(v162) = -1;
      }
      *unint64_t v9 = -1;
      v9[1] = v157;
      if (v161 >= 0) {
        char v163 = v162;
      }
      else {
        char v163 = 0;
      }
      v9[2] = v160;
      v9[3] = v163;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU709F_24RGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = v7 + 1;
  unint64_t v9 = *a6;
  unint64_t v148 = a1;
  char v143 = a2;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a3[1];
    uint64_t v13 = *a5;
    unint64_t v152 = a2 >> 1;
    unint64_t v151 = 4 * (a1 >> 3);
    uint64_t v150 = 2 * *a3;
    uint64_t v149 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = a1 >> 3;
    }
    uint64_t v146 = a3[1];
    uint64_t v147 = *a3;
    uint64_t v15 = &v6[*a3];
    uint64_t v144 = (a1 >> 1) - 4 * (a1 >> 3);
    uint64_t v145 = v14;
    v16.i64[0] = 0xFF000000FFLL;
    v16.i64[1] = 0xFF000000FFLL;
    v17.i64[0] = 0x7F0000007FLL;
    v17.i64[1] = 0x7F0000007FLL;
    int32x4_t v18 = vdupq_n_s32(0xFFFFE807);
    int32x4_t v19 = vdupq_n_s32(0xFFFFC416);
    int32x4_t v20 = vdupq_n_s32(0xED84u);
    int32x4_t v21 = vdupq_n_s32(0xC993u);
    unint64_t v10 = a1 >> 1;
    do
    {
      if (a1 >= 8)
      {
        uint64_t v28 = 0;
        uint64_t v29 = v145;
        uint64_t v24 = v9;
        do
        {
          int8x8_t v30 = *(int8x8_t *)&v7[v28];
          uint16x8_t v31 = &v24[v13];
          int32x4_t v32 = (int32x4_t)vaddw_u16(v17, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v30, (int8x8_t)0xFF000000FFLL)));
          int32x4_t v33 = (int32x4_t)vaddw_u16(v17, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v30, (int8x8_t)0xFF000000FFLL)));
          int32x4_t v34 = vmlaq_s32(vmulq_s32(v32, v18), v33, v19);
          int32x4_t v35 = vmulq_s32(v32, v20);
          int32x4_t v36 = vmulq_s32(v33, v21);
          int32x4_t v37 = vzip1q_s32(v35, v35);
          int32x4_t v38 = vzip2q_s32(v35, v35);
          int32x4_t v39 = vzip1q_s32(v36, v36);
          int32x4_t v40 = vzip2q_s32(v36, v36);
          int32x4_t v41 = vzip1q_s32(v34, v34);
          uint16x8_t v42 = vmovl_u8(*(uint8x8_t *)&v6[v28]);
          uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)&v15[v28]);
          int32x4_t v44 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v42.i8, 0xFuLL);
          int32x4_t v45 = (int32x4_t)vshll_high_n_u16(v42, 0xFuLL);
          int32x4_t v46 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          int32x4_t v47 = vzip2q_s32(v34, v34);
          int32x4_t v48 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          v154.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v44), 0xFuLL), vaddq_s32(v40, v45), 0xFuLL));
          v154.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v44), 0xFuLL), vaddq_s32(v47, v45), 0xFuLL));
          v153.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v46), 0xFuLL), vaddq_s32(v40, v48), 0xFuLL));
          v154.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v37, v44), 0xFuLL), vaddq_s32(v38, v45), 0xFuLL));
          v153.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v46), 0xFuLL), vaddq_s32(v47, v48), 0xFuLL));
          vst3_s8(v24, v154);
          v24 += 24;
          v153.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v37, v46), 0xFuLL), vaddq_s32(v38, v48), 0xFuLL));
          vst3_s8(v31, v153);
          v28 += 8;
          --v29;
        }
        while (v29);
        uint32x4_t v27 = &v6[v28];
        uint64_t v22 = &v15[v28];
        int32x4_t v26 = &v7[v28];
        uint64_t v25 = &v7[v28 + 1];
        unint64_t v23 = &v24[v13];
      }
      else
      {
        uint64_t v22 = &v6[v147];
        unint64_t v23 = &v9[v13];
        uint64_t v24 = v9;
        uint64_t v25 = v8;
        int32x4_t v26 = v7;
        uint32x4_t v27 = v6;
      }
      if (v10 > v151)
      {
        unint64_t v49 = v10;
        uint64_t v50 = v144;
        do
        {
          int v52 = *v26;
          v26 += 2;
          int v51 = v52;
          int v53 = *v25;
          v25 += 2;
          v51 -= 128;
          int v54 = *v27;
          int v55 = v27[1];
          v27 += 2;
          unsigned int v56 = v54 << 15;
          int v57 = -6137 * v51 - 15338 * (v53 - 128);
          int v58 = 60804 * v51;
          int v59 = 51603 * (v53 - 128);
          __int32 v60 = v55 << 15;
          int v61 = v57 + (v55 << 15);
          int v62 = v61 >> 15;
          if (v61 >> 15 >= 255) {
            LOBYTE(v62) = -1;
          }
          BOOL v63 = v61 < 0;
          int v64 = v58 + (v55 << 15);
          int v65 = v64 >> 15;
          if (v63) {
            LOBYTE(v62) = 0;
          }
          v66.i32[0] = v59;
          v67.i64[0] = __PAIR64__(v56, v59);
          if (v65 >= 255) {
            LOBYTE(v65) = -1;
          }
          int32x4_t v68 = vdupq_lane_s32((int32x2_t)__PAIR64__(v56, v59), 1);
          v67.i64[1] = __PAIR64__(v59, v58);
          v68.i32[1] = v57;
          v68.i32[3] = v60;
          int32x4_t v69 = vaddq_s32(v67, v68);
          int8x8_t v70 = (int8x8_t)vmovn_s32(vcltzq_s32(v69));
          int16x8_t v71 = (int16x8_t)vminq_s32(vshrq_n_s32(v69, 0xFuLL), v16);
          *(int16x4_t *)v71.i8 = vmovn_s32((int32x4_t)v71);
          if (v64 >= 0) {
            char v72 = v65;
          }
          else {
            char v72 = 0;
          }
          *(int8x8_t *)v71.i8 = vbic_s8(*(int8x8_t *)v71.i8, v70);
          *(_DWORD *)uint64_t v24 = vmovn_s16(v71).u32[0];
          v24[4] = v62;
          v24[5] = v72;
          v24 += 6;
          int v73 = v22[1];
          __int32 v74 = v73 << 15;
          int v75 = v57 + (v73 << 15);
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          int v77 = v58 + (v73 << 15);
          if (v75 < 0) {
            LOBYTE(v76) = 0;
          }
          v66.i32[1] = *v22 << 15;
          int32x4_t v78 = vdupq_lane_s32(*(int32x2_t *)v66.i8, 1);
          if (v77 >> 15 >= 255) {
            char v79 = -1;
          }
          else {
            char v79 = v77 >> 15;
          }
          v66.i64[1] = __PAIR64__(v59, v58);
          v78.i32[1] = v57;
          v78.i32[3] = v74;
          int32x4_t v80 = vaddq_s32(v66, v78);
          int8x8_t v81 = (int8x8_t)vmovn_s32(vcltzq_s32(v80));
          int16x8_t v82 = (int16x8_t)vminq_s32(vshrq_n_s32(v80, 0xFuLL), v16);
          *(int8x8_t *)v82.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v82), v81);
          v22 += 2;
          *(_DWORD *)unint64_t v23 = vmovn_s16(v82).u32[0];
          if (v77 < 0) {
            char v79 = 0;
          }
          v23[4] = v76;
          v23[5] = v79;
          v23 += 6;
          --v50;
        }
        while (v50);
        a1 = v148;
        unint64_t v10 = v49;
        uint64_t v12 = v146;
      }
      if (a1)
      {
        int v83 = *v26 - 128;
        int v84 = *v25 - 128;
        int v85 = *v27;
        int v86 = -6137 * v83 - 15338 * v84;
        int v87 = 60804 * v83;
        int v88 = 51603 * v84;
        int v89 = v88 + (v85 << 15);
        int v90 = v89 >> 15;
        if (v89 >> 15 >= 255) {
          LOBYTE(v90) = -1;
        }
        if (v89 >= 0) {
          char v91 = v90;
        }
        else {
          char v91 = 0;
        }
        int v92 = v86 + (v85 << 15);
        int v93 = v92 >> 15;
        if (v92 >> 15 >= 255) {
          LOBYTE(v93) = -1;
        }
        if (v92 >= 0) {
          char v94 = v93;
        }
        else {
          char v94 = 0;
        }
        int v95 = v87 + (v85 << 15);
        int v96 = v95 >> 15;
        if (v95 >> 15 >= 255) {
          LOBYTE(v96) = -1;
        }
        if (v95 >= 0) {
          char v97 = v96;
        }
        else {
          char v97 = 0;
        }
        *uint64_t v24 = v91;
        v24[1] = v94;
        v24[2] = v97;
        int v98 = *v22;
        int v99 = v88 + (v98 << 15);
        int v100 = v99 >> 15;
        if (v99 >> 15 >= 255) {
          LOBYTE(v100) = -1;
        }
        if (v99 >= 0) {
          char v101 = v100;
        }
        else {
          char v101 = 0;
        }
        int v102 = v86 + (v98 << 15);
        int v103 = v102 >> 15;
        if (v102 >> 15 >= 255) {
          LOBYTE(v103) = -1;
        }
        if (v102 >= 0) {
          char v104 = v103;
        }
        else {
          char v104 = 0;
        }
        int v105 = v87 + (v98 << 15);
        int v106 = v105 >> 15;
        if (v105 >> 15 >= 255) {
          LOBYTE(v106) = -1;
        }
        *unint64_t v23 = v101;
        if (v105 >= 0) {
          char v107 = v106;
        }
        else {
          char v107 = 0;
        }
        v23[1] = v104;
        v23[2] = v107;
      }
      v6 += v150;
      v7 += v12;
      v8 += v12;
      v9 += v149;
      ++v11;
      v15 += v150;
    }
    while (v11 != v152);
  }
  else
  {
    unint64_t v10 = a1 >> 1;
  }
  if (v143)
  {
    if (a1 >= 2)
    {
      if (v10 <= 1) {
        uint64_t v108 = 1;
      }
      else {
        uint64_t v108 = v10;
      }
      v109.i64[0] = 0xFF000000FFLL;
      v109.i64[1] = 0xFF000000FFLL;
      do
      {
        int v110 = *v7;
        v7 += 2;
        int v111 = v110 - 128;
        int v112 = *v8;
        v8 += 2;
        int v113 = v6[1];
        int v114 = -6137 * v111;
        int v115 = 60804 * v111;
        __int32 v116 = v114 - 15338 * (v112 - 128);
        int v117 = 51603 * (v112 - 128);
        unsigned int v118 = v113 << 15;
        int v119 = v116 + (v113 << 15);
        int v120 = v119 >> 15;
        if (v119 >> 15 >= 255) {
          LOBYTE(v120) = -1;
        }
        if (v119 >= 0) {
          char v121 = v120;
        }
        else {
          char v121 = 0;
        }
        int v122 = v115 + (v113 << 15);
        v123.i32[0] = v117;
        v123.i32[1] = *v6 << 15;
        v123.i32[2] = v115;
        if (v122 >> 15 >= 255) {
          char v124 = -1;
        }
        else {
          char v124 = v122 >> 15;
        }
        v125.i32[1] = v116;
        v125.i64[1] = __PAIR64__(v118, *v6 << 15);
        v123.i32[3] = v117;
        v125.i32[0] = *v6 << 15;
        int32x4_t v126 = vaddq_s32(v123, v125);
        *(int16x4_t *)v125.i8 = vmovn_s32(vcltzq_s32(v126));
        int16x8_t v127 = (int16x8_t)vminq_s32(vshrq_n_s32(v126, 0xFuLL), v109);
        *(int8x8_t *)v127.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v127), *(int8x8_t *)v125.i8);
        v6 += 2;
        *(_DWORD *)unint64_t v9 = vmovn_s16(v127).u32[0];
        if (v122 < 0) {
          char v124 = 0;
        }
        v9[4] = v121;
        v9[5] = v124;
        v9 += 6;
        --v108;
      }
      while (v108);
      LOBYTE(a1) = v148;
    }
    if (a1)
    {
      int v128 = *v7 - 128;
      int v129 = *v8 - 128;
      int v130 = *v6;
      int v131 = -6137 * v128 - 15338 * v129;
      int v132 = 60804 * v128;
      int v133 = 51603 * v129 + (v130 << 15);
      int v134 = v133 >> 15;
      if (v133 >> 15 >= 255) {
        LOBYTE(v134) = -1;
      }
      if (v133 >= 0) {
        char v135 = v134;
      }
      else {
        char v135 = 0;
      }
      int v136 = v131 + (v130 << 15);
      int v137 = v136 >> 15;
      if (v136 >> 15 >= 255) {
        LOBYTE(v137) = -1;
      }
      if (v136 >= 0) {
        char v138 = v137;
      }
      else {
        char v138 = 0;
      }
      int v139 = v132 + (v130 << 15);
      int v140 = v139 >> 15;
      if (v139 >> 15 >= 255) {
        LOBYTE(v140) = -1;
      }
      *unint64_t v9 = v135;
      if (v139 >= 0) {
        char v141 = v140;
      }
      else {
        char v141 = 0;
      }
      v9[1] = v138;
      v9[2] = v141;
    }
  }
  return 0;
}

uint64_t vt_Copy_y420ITU2020_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, uint8x8_t **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = a4[2];
  unint64_t v9 = a1 >> 1;
  unint64_t v10 = *a6;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    uint64_t v14 = a3[2];
    uint64_t v15 = *a5;
    unint64_t v168 = 4 * (a1 >> 3);
    uint64_t v167 = 2 * *a3;
    uint64_t v166 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a1 >> 3;
    }
    uint64_t v17 = 4 * v16;
    unint64_t v18 = v9 - 4 * (a1 >> 3);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    int32x4_t v20 = vdupq_n_s32(0xFFFFE7F5);
    int32x4_t v21 = vdupq_n_s32(0xFFFFAC81);
    int32x4_t v22 = vdupq_n_s32(0x112F4u);
    int32x4_t v23 = vdupq_n_s32(0xD781u);
    uint16x8_t v24 = (uint16x8_t)vdupq_n_s16(0x957Bu);
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0xFFF6A850);
    uint64_t v26 = -1;
    unint64_t v163 = a1 >> 1;
    unint64_t v164 = a1;
    uint64_t v161 = a3[2];
    uint64_t v162 = a3[1];
    do
    {
      if (a1 >= 8)
      {
        unint64_t v33 = 0;
        int32x4_t v32 = v6;
        uint64_t v29 = v10;
        do
        {
          int32x4_t v34 = &v29[v15];
          int32x4_t v35 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v7->u32[v33 / 4]));
          int32x4_t v36 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v8->u32[v33 / 4]));
          int32x4_t v37 = vmlaq_s32(vmulq_s32(v35, v20), v36, v21);
          int32x4_t v38 = vmulq_s32(v35, v22);
          int32x4_t v39 = vmulq_s32(v36, v23);
          int32x4_t v40 = vzip1q_s32(v38, v38);
          int32x4_t v41 = vzip2q_s32(v38, v38);
          int32x4_t v42 = vzip1q_s32(v39, v39);
          uint16x8_t v43 = vmovl_u8(*v32);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)((char *)v32 + v13));
          int32x4_t v45 = vzip2q_s32(v39, v39);
          int32x4_t v46 = (int32x4_t)vmlal_u16(v25, *(uint16x4_t *)v43.i8, *(uint16x4_t *)v24.i8);
          int32x4_t v47 = (int32x4_t)vmlal_high_u16(v25, v43, v24);
          int32x4_t v48 = vzip1q_s32(v37, v37);
          int32x4_t v49 = (int32x4_t)vmlal_u16(v25, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v24.i8);
          int32x4_t v50 = (int32x4_t)vmlal_high_u16(v25, v44, v24);
          int32x4_t v51 = vzip2q_s32(v37, v37);
          v169.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v46), 0xFuLL), vaddq_s32(v45, v47), 0xFuLL));
          v169.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v48, v46), 0xFuLL), vaddq_s32(v51, v47), 0xFuLL));
          int8x8_t v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v49), 0xFuLL), vaddq_s32(v45, v50), 0xFuLL));
          v169.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v40, v46), 0xFuLL), vaddq_s32(v41, v47), 0xFuLL));
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v48, v49), 0xFuLL), vaddq_s32(v51, v50), 0xFuLL));
          int8x8_t v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v40, v49), 0xFuLL), vaddq_s32(v41, v50), 0xFuLL));
          v169.val[0] = (int8x8_t)-1;
          vst4_s8(v29, v169);
          v29 += 32;
          vst4_s8(v34, *(int8x8x4_t *)&v26);
          ++v32;
          v33 += 4;
        }
        while (v17 != v33);
        uint32x4_t v27 = (unsigned __int8 *)v32 + v13;
        uint16x8_t v31 = (unsigned __int8 *)v7 + v33;
        int8x8_t v30 = (unsigned __int8 *)v8 + v33;
        uint64_t v28 = &v29[v15];
      }
      else
      {
        uint32x4_t v27 = (unsigned __int8 *)v6 + v13;
        uint64_t v28 = &v10[v15];
        uint64_t v29 = v10;
        int8x8_t v30 = (unsigned __int8 *)v8;
        uint16x8_t v31 = (unsigned __int8 *)v7;
        int32x4_t v32 = v6;
      }
      if (v9 > v168)
      {
        uint64_t v165 = v11;
        uint64_t v55 = 0;
        do
        {
          int v56 = v31[v55] - 128;
          int v57 = v30[v55] - 128;
          int v58 = v32->u8[1];
          int v59 = 38267 * v32->u8[0] - 612272;
          int v60 = -6155 * v56 - 21375 * v57;
          int v61 = 70388 * v56;
          int v62 = 55169 * v57;
          int v63 = (v59 + v62) >> 15;
          int32x4_t v32 = (uint8x8_t *)((char *)v32 + 2);
          if (v63 >= 255) {
            LOBYTE(v63) = -1;
          }
          if (v59 + v62 >= 0) {
            char v64 = v63;
          }
          else {
            char v64 = 0;
          }
          int v65 = (v60 + v59) >> 15;
          if (v65 >= 255) {
            LOBYTE(v65) = -1;
          }
          BOOL v66 = v60 + v59 < 0;
          int v67 = v59 + v61;
          int v68 = v67 >> 15;
          if (v66) {
            LOBYTE(v65) = 0;
          }
          if (v68 >= 255) {
            LOBYTE(v68) = -1;
          }
          BOOL v66 = v67 < 0;
          int v69 = 38267 * v58 - 612272;
          int v70 = v69 + v62;
          if (v66) {
            LOBYTE(v68) = 0;
          }
          int v71 = v70 >> 15;
          if (v70 >> 15 >= 255) {
            LOBYTE(v71) = -1;
          }
          BOOL v66 = v70 < 0;
          int v72 = v69 + v60;
          if (v66) {
            LOBYTE(v71) = 0;
          }
          int v73 = v72 >> 15;
          if (v72 >> 15 >= 255) {
            LOBYTE(v73) = -1;
          }
          int v74 = v69 + v61;
          if (v72 >= 0) {
            char v75 = v73;
          }
          else {
            char v75 = 0;
          }
          int v76 = v74 >> 15;
          if (v74 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v74 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          *uint64_t v29 = -1;
          v29[1] = v64;
          v29[2] = v65;
          v29[3] = v68;
          v29[4] = -1;
          v29[5] = v71;
          v29[6] = v75;
          v29[7] = v77;
          v29 += 8;
          int v78 = v27[1];
          int v79 = 38267 * *v27 - 612272;
          v27 += 2;
          int v80 = (v79 + v62) >> 15;
          if (v80 >= 255) {
            LOBYTE(v80) = -1;
          }
          if (v79 + v62 >= 0) {
            char v81 = v80;
          }
          else {
            char v81 = 0;
          }
          int v82 = (v79 + v60) >> 15;
          if (v82 >= 255) {
            LOBYTE(v82) = -1;
          }
          if (v79 + v60 >= 0) {
            char v83 = v82;
          }
          else {
            char v83 = 0;
          }
          int v84 = v79 + v61;
          int v85 = v84 >> 15;
          if (v84 >> 15 >= 255) {
            LOBYTE(v85) = -1;
          }
          if (v84 >= 0) {
            char v86 = v85;
          }
          else {
            char v86 = 0;
          }
          int v87 = 38267 * v78 - 612272;
          int v88 = v87 + v62;
          int v89 = v88 >> 15;
          if (v88 >> 15 >= 255) {
            LOBYTE(v89) = -1;
          }
          if (v88 >= 0) {
            char v90 = v89;
          }
          else {
            char v90 = 0;
          }
          int v91 = v87 + v60;
          int v92 = v91 >> 15;
          if (v91 >> 15 >= 255) {
            LOBYTE(v92) = -1;
          }
          if (v91 >= 0) {
            char v93 = v92;
          }
          else {
            char v93 = 0;
          }
          int v94 = v87 + v61;
          *uint64_t v28 = -1;
          v28[1] = v81;
          if (v94 >> 15 >= 255) {
            char v95 = -1;
          }
          else {
            char v95 = v94 >> 15;
          }
          v28[2] = v83;
          v28[3] = v86;
          v28[4] = -1;
          if (v94 >= 0) {
            char v96 = v95;
          }
          else {
            char v96 = 0;
          }
          v28[5] = v90;
          v28[6] = v93;
          v28[7] = v96;
          v28 += 8;
          ++v55;
        }
        while (v18 != v55);
        v31 += v55;
        v30 += v55;
        unint64_t v9 = v163;
        a1 = v164;
        uint64_t v11 = v165;
        uint64_t v14 = v161;
        uint64_t v12 = v162;
      }
      if (a1)
      {
        int v97 = *v31 - 128;
        int v98 = *v30 - 128;
        int v99 = 38267 * v32->u8[0] - 612272;
        int v100 = -6155 * v97 - 21375 * v98;
        int v101 = 70388 * v97;
        int v102 = 55169 * v98;
        int v103 = (v99 + v102) >> 15;
        if (v103 >= 255) {
          LOBYTE(v103) = -1;
        }
        if (v99 + v102 >= 0) {
          char v104 = v103;
        }
        else {
          char v104 = 0;
        }
        int v105 = (v100 + v99) >> 15;
        if (v105 >= 255) {
          LOBYTE(v105) = -1;
        }
        if (v100 + v99 >= 0) {
          char v106 = v105;
        }
        else {
          char v106 = 0;
        }
        int v107 = v99 + v101;
        int v108 = v107 >> 15;
        if (v107 >> 15 >= 255) {
          LOBYTE(v108) = -1;
        }
        if (v107 >= 0) {
          char v109 = v108;
        }
        else {
          char v109 = 0;
        }
        *uint64_t v29 = -1;
        v29[1] = v104;
        v29[2] = v106;
        v29[3] = v109;
        int v110 = 38267 * *v27 - 612272;
        int v111 = v110 + v102;
        int v112 = v111 >> 15;
        if (v111 >> 15 >= 255) {
          LOBYTE(v112) = -1;
        }
        if (v111 >= 0) {
          char v113 = v112;
        }
        else {
          char v113 = 0;
        }
        int v114 = v110 + v100;
        int v115 = v114 >> 15;
        if (v114 >> 15 >= 255) {
          LOBYTE(v115) = -1;
        }
        if (v114 >= 0) {
          char v116 = v115;
        }
        else {
          char v116 = 0;
        }
        int v117 = v110 + v101;
        int v118 = v117 >> 15;
        if (v117 >> 15 >= 255) {
          LOBYTE(v118) = -1;
        }
        *uint64_t v28 = -1;
        v28[1] = v113;
        if (v117 >= 0) {
          char v119 = v118;
        }
        else {
          char v119 = 0;
        }
        v28[2] = v116;
        v28[3] = v119;
      }
      unint64_t v6 = (uint8x8_t *)((char *)v6 + v167);
      uint64_t v7 = (uint8x8_t *)((char *)v7 + v12);
      uint64_t v8 = (uint8x8_t *)((char *)v8 + v14);
      v10 += v166;
      ++v11;
    }
    while (v11 != a2 >> 1);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v9 <= 1) {
        uint64_t v120 = 1;
      }
      else {
        uint64_t v120 = v9;
      }
      do
      {
        int v121 = v7->u8[0];
        uint64_t v7 = (uint8x8_t *)((char *)v7 + 1);
        int v122 = v121 - 128;
        int v123 = v8->u8[0];
        uint64_t v8 = (uint8x8_t *)((char *)v8 + 1);
        int v124 = v6->u8[0];
        int v125 = v6->u8[1];
        unint64_t v6 = (uint8x8_t *)((char *)v6 + 2);
        int v126 = 38267 * v124 - 612272;
        int v127 = -6155 * v122 - 21375 * (v123 - 128);
        int v128 = 70388 * v122;
        int v129 = 55169 * (v123 - 128);
        int v130 = (v126 + v129) >> 15;
        if (v130 >= 255) {
          LOBYTE(v130) = -1;
        }
        if (v126 + v129 >= 0) {
          char v131 = v130;
        }
        else {
          char v131 = 0;
        }
        int v132 = (v127 + v126) >> 15;
        if (v132 >= 255) {
          LOBYTE(v132) = -1;
        }
        if (v127 + v126 >= 0) {
          char v133 = v132;
        }
        else {
          char v133 = 0;
        }
        int v134 = v126 + v128;
        int v135 = v134 >> 15;
        if (v134 >> 15 >= 255) {
          LOBYTE(v135) = -1;
        }
        if (v134 >= 0) {
          char v136 = v135;
        }
        else {
          char v136 = 0;
        }
        int v137 = 38267 * v125 - 612272;
        int v138 = v137 + v129;
        int v139 = v138 >> 15;
        if (v138 >> 15 >= 255) {
          LOBYTE(v139) = -1;
        }
        if (v138 >= 0) {
          char v140 = v139;
        }
        else {
          char v140 = 0;
        }
        int v141 = v137 + v127;
        int v142 = v141 >> 15;
        if (v141 >> 15 >= 255) {
          LOBYTE(v142) = -1;
        }
        if (v141 >= 0) {
          char v143 = v142;
        }
        else {
          char v143 = 0;
        }
        int v144 = v137 + v128;
        int v145 = v144 >> 15;
        *unint64_t v10 = -1;
        v10[1] = v131;
        if (v144 >> 15 >= 255) {
          LOBYTE(v145) = -1;
        }
        void v10[2] = v133;
        v10[3] = v136;
        v10[4] = -1;
        v10[5] = v140;
        if (v144 >= 0) {
          char v146 = v145;
        }
        else {
          char v146 = 0;
        }
        v10[6] = v143;
        v10[7] = v146;
        v10 += 8;
        --v120;
      }
      while (v120);
    }
    if (a1)
    {
      int v147 = v7->u8[0] - 128;
      int v148 = v8->u8[0] - 128;
      int v149 = 38267 * v6->u8[0] - 612272;
      int v150 = -6155 * v147 - 21375 * v148;
      int v151 = v149 + 55169 * v148;
      int v152 = v151 >> 15;
      if (v151 >> 15 >= 255) {
        LOBYTE(v152) = -1;
      }
      if (v151 >= 0) {
        char v153 = v152;
      }
      else {
        char v153 = 0;
      }
      int v154 = v150 + v149;
      int v155 = v154 >> 15;
      if (v154 >> 15 >= 255) {
        LOBYTE(v155) = -1;
      }
      if (v154 >= 0) {
        char v156 = v155;
      }
      else {
        char v156 = 0;
      }
      int v157 = v149 + 70388 * v147;
      int v158 = v157 >> 15;
      if (v157 >> 15 >= 255) {
        LOBYTE(v158) = -1;
      }
      *unint64_t v10 = -1;
      v10[1] = v153;
      if (v157 >= 0) {
        char v159 = v158;
      }
      else {
        char v159 = 0;
      }
      void v10[2] = v156;
      v10[3] = v159;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU2020_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = a1 >> 1;
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  unint64_t v9 = v8 + 1;
  unint64_t v10 = *a6;
  unint64_t v167 = a1;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a5;
    unint64_t v15 = a2 >> 1;
    unint64_t v171 = 4 * (a1 >> 3);
    uint64_t v172 = v13;
    uint64_t v170 = 2 * v12;
    if (a1 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a1 >> 3;
    }
    uint64_t v165 = v12;
    unint64_t v166 = a1 >> 1;
    uint64_t v17 = &v7[v12];
    unint64_t v163 = v6 - 4 * (a1 >> 3);
    uint64_t v164 = v16;
    int32x4_t v18 = vdupq_n_s32(0xFFFFE7F5);
    int32x4_t v19 = vdupq_n_s32(0xFFFFAC81);
    int32x4_t v20 = vdupq_n_s32(0x112F4u);
    int32x4_t v21 = vdupq_n_s32(0xD781u);
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0x957Bu);
    uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(0xFFF6A850);
    uint64_t v25 = -1;
    do
    {
      if (a1 >= 8)
      {
        uint64_t v32 = 0;
        uint64_t v33 = v164;
        uint64_t v28 = v10;
        do
        {
          int32x4_t v34 = &v28[v14];
          int8x8_t v35 = *(int8x8_t *)&v8[v32];
          int32x4_t v36 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v35, *(int8x8_t *)v18.i8)));
          int32x4_t v37 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v35, *(int8x8_t *)v18.i8)));
          int32x4_t v38 = vmlaq_s32(vmulq_s32(v36, v18), v37, v19);
          int32x4_t v39 = vmulq_s32(v36, v20);
          int32x4_t v40 = vmulq_s32(v37, v21);
          int32x4_t v41 = vzip1q_s32(v39, v39);
          int32x4_t v42 = vzip2q_s32(v39, v39);
          int32x4_t v43 = vzip1q_s32(v40, v40);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v7[v32]);
          uint16x8_t v45 = vmovl_u8(*(uint8x8_t *)&v17[v32]);
          int32x4_t v46 = vzip1q_s32(v38, v38);
          int32x4_t v47 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v23.i8);
          int32x4_t v48 = (int32x4_t)vmlal_high_u16(v24, v44, v23);
          int32x4_t v49 = vzip2q_s32(v40, v40);
          int32x4_t v50 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v23.i8);
          int32x4_t v51 = (int32x4_t)vmlal_high_u16(v24, v45, v23);
          int32x4_t v52 = vzip2q_s32(v38, v38);
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v47), 0xFuLL), vaddq_s32(v49, v48), 0xFuLL));
          int8x8_t v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v47), 0xFuLL), vaddq_s32(v52, v48), 0xFuLL));
          v173.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v50), 0xFuLL), vaddq_s32(v49, v51), 0xFuLL));
          int8x8_t v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v47), 0xFuLL), vaddq_s32(v42, v48), 0xFuLL));
          v173.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v50), 0xFuLL), vaddq_s32(v52, v51), 0xFuLL));
          vst4_s8(v28, *(int8x8x4_t *)&v25);
          v28 += 32;
          v173.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v50), 0xFuLL), vaddq_s32(v42, v51), 0xFuLL));
          v173.val[0] = (int8x8_t)-1;
          vst4_s8(v34, v173);
          v32 += 8;
          --v33;
        }
        while (v33);
        uint16x8_t v31 = &v7[v32];
        uint64_t v26 = &v17[v32];
        int8x8_t v30 = &v8[v32];
        uint64_t v29 = &v8[v32 + 1];
        uint32x4_t v27 = &v28[v14];
      }
      else
      {
        uint64_t v26 = &v7[v165];
        uint32x4_t v27 = &v10[v14];
        uint64_t v28 = v10;
        uint64_t v29 = v9;
        int8x8_t v30 = v8;
        uint16x8_t v31 = v7;
      }
      if (v6 > v171)
      {
        uint64_t v168 = v11;
        int8x8x4_t v169 = v9;
        unint64_t v56 = v163;
        do
        {
          int v57 = *v30;
          v30 += 2;
          int v58 = v57 - 128;
          int v59 = *v29;
          v29 += 2;
          int v60 = 38267 * *v31 - 612272;
          int v61 = -6155 * v58 - 21375 * (v59 - 128);
          int v62 = 70388 * v58;
          int v63 = 55169 * (v59 - 128);
          int v64 = (v60 + v63) >> 15;
          if (v64 >= 255) {
            LOBYTE(v64) = -1;
          }
          if (v60 + v63 >= 0) {
            char v65 = v64;
          }
          else {
            char v65 = 0;
          }
          int v66 = (v61 + v60) >> 15;
          if (v66 >= 255) {
            LOBYTE(v66) = -1;
          }
          BOOL v67 = v61 + v60 < 0;
          int v68 = v60 + v62;
          int v69 = v68 >> 15;
          if (v67) {
            LOBYTE(v66) = 0;
          }
          if (v69 >= 255) {
            LOBYTE(v69) = -1;
          }
          BOOL v67 = v68 < 0;
          int v70 = 38267 * v31[1] - 612272;
          int v71 = v70 + v63;
          if (v67) {
            LOBYTE(v69) = 0;
          }
          int v72 = v71 >> 15;
          if (v71 >> 15 >= 255) {
            LOBYTE(v72) = -1;
          }
          BOOL v67 = v71 < 0;
          int v73 = v70 + v61;
          if (v67) {
            LOBYTE(v72) = 0;
          }
          int v74 = v73 >> 15;
          if (v73 >> 15 >= 255) {
            LOBYTE(v74) = -1;
          }
          int v75 = v70 + v62;
          if (v73 < 0) {
            LOBYTE(v74) = 0;
          }
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v75 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          v31 += 2;
          *uint64_t v28 = -1;
          v28[1] = v65;
          v28[2] = v66;
          v28[3] = v69;
          v28[4] = -1;
          v28[5] = v72;
          v28[6] = v74;
          v28[7] = v77;
          v28 += 8;
          int v78 = *v26;
          int v79 = v26[1];
          v26 += 2;
          int v80 = 38267 * v78 - 612272;
          int v81 = (v80 + v63) >> 15;
          if (v81 >= 255) {
            LOBYTE(v81) = -1;
          }
          if (v80 + v63 >= 0) {
            char v82 = v81;
          }
          else {
            char v82 = 0;
          }
          int v83 = (v80 + v61) >> 15;
          if (v83 >= 255) {
            LOBYTE(v83) = -1;
          }
          if (v80 + v61 >= 0) {
            char v84 = v83;
          }
          else {
            char v84 = 0;
          }
          int v85 = v80 + v62;
          int v86 = v85 >> 15;
          if (v85 >> 15 >= 255) {
            LOBYTE(v86) = -1;
          }
          if (v85 >= 0) {
            char v87 = v86;
          }
          else {
            char v87 = 0;
          }
          int v88 = 38267 * v79 - 612272;
          int v89 = v88 + v63;
          int v90 = (v88 + v63) >> 15;
          if (v90 >= 255) {
            LOBYTE(v90) = -1;
          }
          if (v89 >= 0) {
            char v91 = v90;
          }
          else {
            char v91 = 0;
          }
          int v92 = v88 + v61;
          int v93 = v92 >> 15;
          if (v92 >> 15 >= 255) {
            LOBYTE(v93) = -1;
          }
          int v94 = v88 + v62;
          int v95 = v94 >> 15;
          *uint32x4_t v27 = -1;
          v27[1] = v82;
          if (v92 >= 0) {
            char v96 = v93;
          }
          else {
            char v96 = 0;
          }
          if (v95 >= 255) {
            LOBYTE(v95) = -1;
          }
          v27[2] = v84;
          v27[4] = -1;
          v27[3] = v87;
          v27[5] = v91;
          if (v94 >= 0) {
            char v97 = v95;
          }
          else {
            char v97 = 0;
          }
          v27[6] = v96;
          v27[7] = v97;
          v27 += 8;
          --v56;
        }
        while (v56);
        unint64_t v6 = v166;
        a1 = v167;
        uint64_t v11 = v168;
        unint64_t v9 = v169;
        unint64_t v15 = a2 >> 1;
      }
      if (a1)
      {
        int v98 = *v30 - 128;
        int v99 = *v29 - 128;
        int v100 = 38267 * *v31 - 612272;
        int v101 = -6155 * v98 - 21375 * v99;
        int v102 = 70388 * v98;
        int v103 = 55169 * v99;
        int v104 = (v100 + v103) >> 15;
        if (v104 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v100 + v103 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = (v101 + v100) >> 15;
        if (v106 >= 255) {
          LOBYTE(v106) = -1;
        }
        if (v101 + v100 >= 0) {
          char v107 = v106;
        }
        else {
          char v107 = 0;
        }
        int v108 = v100 + v102;
        int v109 = v108 >> 15;
        if (v108 >> 15 >= 255) {
          LOBYTE(v109) = -1;
        }
        if (v108 >= 0) {
          char v110 = v109;
        }
        else {
          char v110 = 0;
        }
        *uint64_t v28 = -1;
        v28[1] = v105;
        v28[2] = v107;
        v28[3] = v110;
        int v111 = 38267 * *v26 - 612272;
        int v112 = v111 + v103;
        int v113 = v112 >> 15;
        if (v112 >> 15 >= 255) {
          LOBYTE(v113) = -1;
        }
        if (v112 >= 0) {
          char v114 = v113;
        }
        else {
          char v114 = 0;
        }
        int v115 = v111 + v101;
        int v116 = v115 >> 15;
        if (v115 >> 15 >= 255) {
          LOBYTE(v116) = -1;
        }
        if (v115 >= 0) {
          char v117 = v116;
        }
        else {
          char v117 = 0;
        }
        int v118 = v111 + v102;
        int v119 = v118 >> 15;
        if (v118 >> 15 >= 255) {
          LOBYTE(v119) = -1;
        }
        *uint32x4_t v27 = -1;
        v27[1] = v114;
        if (v118 >= 0) {
          char v120 = v119;
        }
        else {
          char v120 = 0;
        }
        v27[2] = v117;
        v27[3] = v120;
      }
      v7 += v170;
      v8 += v172;
      v9 += v172;
      v10 += 2 * v14;
      ++v11;
      v17 += v170;
    }
    while (v11 != v15);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v6 <= 1) {
        uint64_t v121 = 1;
      }
      else {
        uint64_t v121 = v6;
      }
      do
      {
        int v122 = *v8;
        v8 += 2;
        int v123 = v122 - 128;
        int v124 = *v9;
        int v125 = *v7;
        int v126 = v9 + 2;
        int v127 = v7[1];
        v7 += 2;
        int v128 = 38267 * v125 - 612272;
        int v129 = -6155 * v123 - 21375 * (v124 - 128);
        int v130 = 70388 * v123;
        int v131 = 55169 * (v124 - 128);
        int v132 = (v128 + v131) >> 15;
        if (v132 >= 255) {
          LOBYTE(v132) = -1;
        }
        if (v128 + v131 >= 0) {
          char v133 = v132;
        }
        else {
          char v133 = 0;
        }
        int v134 = (v129 + v128) >> 15;
        if (v134 >= 255) {
          LOBYTE(v134) = -1;
        }
        if (v129 + v128 >= 0) {
          char v135 = v134;
        }
        else {
          char v135 = 0;
        }
        int v136 = v128 + v130;
        int v137 = v136 >> 15;
        if (v136 >> 15 >= 255) {
          LOBYTE(v137) = -1;
        }
        if (v136 >= 0) {
          char v138 = v137;
        }
        else {
          char v138 = 0;
        }
        int v139 = 38267 * v127 - 612272;
        int v140 = v139 + v131;
        int v141 = v140 >> 15;
        if (v140 >> 15 >= 255) {
          LOBYTE(v141) = -1;
        }
        if (v140 >= 0) {
          char v142 = v141;
        }
        else {
          char v142 = 0;
        }
        int v143 = v139 + v129;
        int v144 = v143 >> 15;
        if (v143 >> 15 >= 255) {
          LOBYTE(v144) = -1;
        }
        if (v143 >= 0) {
          char v145 = v144;
        }
        else {
          char v145 = 0;
        }
        int v146 = v139 + v130;
        int v147 = v146 >> 15;
        *unint64_t v10 = -1;
        v10[1] = v133;
        if (v146 >> 15 >= 255) {
          LOBYTE(v147) = -1;
        }
        void v10[2] = v135;
        v10[3] = v138;
        v10[4] = -1;
        v10[5] = v142;
        if (v146 >= 0) {
          char v148 = v147;
        }
        else {
          char v148 = 0;
        }
        unint64_t v9 = v126;
        v10[6] = v145;
        v10[7] = v148;
        v10 += 8;
        --v121;
      }
      while (v121);
      LOBYTE(a1) = v167;
    }
    if (a1)
    {
      int v149 = *v8 - 128;
      int v150 = *v9 - 128;
      int v151 = 38267 * *v7 - 612272;
      int v152 = -6155 * v149 - 21375 * v150;
      int v153 = v151 + 55169 * v150;
      int v154 = v153 >> 15;
      if (v153 >> 15 >= 255) {
        LOBYTE(v154) = -1;
      }
      if (v153 >= 0) {
        char v155 = v154;
      }
      else {
        char v155 = 0;
      }
      int v156 = v152 + v151;
      int v157 = v156 >> 15;
      if (v156 >> 15 >= 255) {
        LOBYTE(v157) = -1;
      }
      if (v156 >= 0) {
        char v158 = v157;
      }
      else {
        char v158 = 0;
      }
      int v159 = v151 + 70388 * v149;
      int v160 = v159 >> 15;
      if (v159 >> 15 >= 255) {
        LOBYTE(v160) = -1;
      }
      *unint64_t v10 = -1;
      v10[1] = v155;
      if (v159 >= 0) {
        char v161 = v160;
      }
      else {
        char v161 = 0;
      }
      void v10[2] = v158;
      v10[3] = v161;
    }
  }
  return 0;
}

uint64_t vt_Copy_y420ITU2020_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, uint8x8_t **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = a4[2];
  unint64_t v9 = a1 >> 1;
  unint64_t v10 = *a6;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    uint64_t v14 = a3[2];
    uint64_t v15 = *a5;
    unint64_t v165 = 4 * (a1 >> 3);
    uint64_t v164 = 2 * *a3;
    uint64_t v163 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a1 >> 3;
    }
    uint64_t v17 = 4 * v16;
    unint64_t v18 = v9 - 4 * (a1 >> 3);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    int32x4_t v20 = vdupq_n_s32(0xFFFFE7F5);
    int32x4_t v21 = vdupq_n_s32(0xFFFFAC81);
    int32x4_t v22 = vdupq_n_s32(0x112F4u);
    int32x4_t v23 = vdupq_n_s32(0xD781u);
    uint16x8_t v24 = (uint16x8_t)vdupq_n_s16(0x957Bu);
    uint32x4_t v25 = (uint32x4_t)vdupq_n_s32(0xFFF6A850);
    uint64_t v26 = -1;
    unint64_t v160 = a1 >> 1;
    unint64_t v161 = a1;
    uint64_t v158 = a3[2];
    uint64_t v159 = a3[1];
    do
    {
      if (a1 >= 8)
      {
        unint64_t v33 = 0;
        uint64_t v32 = v6;
        uint64_t v29 = v10;
        do
        {
          int32x4_t v34 = &v29[v15];
          int32x4_t v35 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v7->u32[v33 / 4]));
          int32x4_t v36 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v8->u32[v33 / 4]));
          int32x4_t v37 = vmlaq_s32(vmulq_s32(v35, v20), v36, v21);
          int32x4_t v38 = vmulq_s32(v35, v22);
          int32x4_t v39 = vmulq_s32(v36, v23);
          int32x4_t v40 = vzip1q_s32(v38, v38);
          int32x4_t v41 = vzip2q_s32(v38, v38);
          int32x4_t v42 = vzip1q_s32(v39, v39);
          uint16x8_t v43 = vmovl_u8(*v32);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)((char *)v32 + v13));
          int32x4_t v45 = vzip1q_s32(v37, v37);
          int32x4_t v46 = (int32x4_t)vmlal_u16(v25, *(uint16x4_t *)v43.i8, *(uint16x4_t *)v24.i8);
          int32x4_t v47 = (int32x4_t)vmlal_high_u16(v25, v43, v24);
          int32x4_t v48 = vzip2q_s32(v39, v39);
          int32x4_t v49 = (int32x4_t)vmlal_u16(v25, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v24.i8);
          int32x4_t v50 = (int32x4_t)vmlal_high_u16(v25, v44, v24);
          int32x4_t v51 = vzip2q_s32(v37, v37);
          int8x8_t v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v46), 0xFuLL), vaddq_s32(v48, v47), 0xFuLL));
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v45, v46), 0xFuLL), vaddq_s32(v51, v47), 0xFuLL));
          v166.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v49), 0xFuLL), vaddq_s32(v48, v50), 0xFuLL));
          int8x8_t v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v40, v46), 0xFuLL), vaddq_s32(v41, v47), 0xFuLL));
          v166.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v45, v49), 0xFuLL), vaddq_s32(v51, v50), 0xFuLL));
          vst4_s8(v29, *(int8x8x4_t *)(&v26 - 3));
          v29 += 32;
          v166.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v40, v49), 0xFuLL), vaddq_s32(v41, v50), 0xFuLL));
          v166.val[3] = (int8x8_t)-1;
          vst4_s8(v34, v166);
          ++v32;
          v33 += 4;
        }
        while (v17 != v33);
        uint32x4_t v27 = (unsigned __int8 *)v32 + v13;
        uint16x8_t v31 = (unsigned __int8 *)v7 + v33;
        int8x8_t v30 = (unsigned __int8 *)v8 + v33;
        uint64_t v28 = &v29[v15];
      }
      else
      {
        uint32x4_t v27 = (unsigned __int8 *)v6 + v13;
        uint64_t v28 = &v10[v15];
        uint64_t v29 = v10;
        int8x8_t v30 = (unsigned __int8 *)v8;
        uint16x8_t v31 = (unsigned __int8 *)v7;
        uint64_t v32 = v6;
      }
      if (v9 > v165)
      {
        uint64_t v162 = v11;
        uint64_t v55 = 0;
        do
        {
          int v56 = v31[v55] - 128;
          int v57 = v30[v55] - 128;
          int v58 = v32->u8[1];
          int v59 = 38267 * v32->u8[0] - 612272;
          int v60 = -6155 * v56 - 21375 * v57;
          int v61 = 70388 * v56;
          int v62 = 55169 * v57;
          int v63 = (v59 + v62) >> 15;
          uint64_t v32 = (uint8x8_t *)((char *)v32 + 2);
          if (v63 >= 255) {
            LOBYTE(v63) = -1;
          }
          if (v59 + v62 >= 0) {
            char v64 = v63;
          }
          else {
            char v64 = 0;
          }
          int v65 = (v60 + v59) >> 15;
          if (v65 >= 255) {
            LOBYTE(v65) = -1;
          }
          BOOL v66 = v60 + v59 < 0;
          int v67 = v59 + v61;
          int v68 = v67 >> 15;
          if (v66) {
            LOBYTE(v65) = 0;
          }
          if (v68 >= 255) {
            LOBYTE(v68) = -1;
          }
          BOOL v66 = v67 < 0;
          int v69 = 38267 * v58 - 612272;
          int v70 = v69 + v62;
          if (v66) {
            LOBYTE(v68) = 0;
          }
          int v71 = v70 >> 15;
          if (v70 >> 15 >= 255) {
            LOBYTE(v71) = -1;
          }
          BOOL v66 = v70 < 0;
          int v72 = v69 + v60;
          if (v66) {
            LOBYTE(v71) = 0;
          }
          int v73 = v72 >> 15;
          if (v72 >> 15 >= 255) {
            LOBYTE(v73) = -1;
          }
          int v74 = v69 + v61;
          if (v72 >= 0) {
            char v75 = v73;
          }
          else {
            char v75 = 0;
          }
          int v76 = v74 >> 15;
          if (v74 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v74 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          *uint64_t v29 = v68;
          v29[1] = v65;
          v29[2] = v64;
          v29[3] = -1;
          v29[5] = v75;
          v29[6] = v71;
          v29[4] = v77;
          v29[7] = -1;
          v29 += 8;
          int v78 = v27[1];
          int v79 = 38267 * *v27 - 612272;
          v27 += 2;
          int v80 = (v79 + v62) >> 15;
          if (v80 >= 255) {
            LOBYTE(v80) = -1;
          }
          if (v79 + v62 >= 0) {
            char v81 = v80;
          }
          else {
            char v81 = 0;
          }
          int v82 = (v79 + v60) >> 15;
          if (v82 >= 255) {
            LOBYTE(v82) = -1;
          }
          if (v79 + v60 >= 0) {
            char v83 = v82;
          }
          else {
            char v83 = 0;
          }
          int v84 = v79 + v61;
          int v85 = v84 >> 15;
          if (v84 >> 15 >= 255) {
            LOBYTE(v85) = -1;
          }
          if (v84 >= 0) {
            char v86 = v85;
          }
          else {
            char v86 = 0;
          }
          int v87 = 38267 * v78 - 612272;
          int v88 = v87 + v62;
          int v89 = v88 >> 15;
          if (v88 >> 15 >= 255) {
            LOBYTE(v89) = -1;
          }
          if (v88 >= 0) {
            char v90 = v89;
          }
          else {
            char v90 = 0;
          }
          int v91 = v87 + v60;
          int v92 = v91 >> 15;
          if (v91 >> 15 >= 255) {
            LOBYTE(v92) = -1;
          }
          if (v91 >= 0) {
            char v93 = v92;
          }
          else {
            char v93 = 0;
          }
          int v94 = v87 + v61;
          v28[1] = v83;
          *uint64_t v28 = v86;
          if (v94 >> 15 >= 255) {
            char v95 = -1;
          }
          else {
            char v95 = v94 >> 15;
          }
          v28[2] = v81;
          v28[3] = -1;
          if (v94 < 0) {
            char v95 = 0;
          }
          v28[4] = v95;
          v28[5] = v93;
          v28[6] = v90;
          v28[7] = -1;
          v28 += 8;
          ++v55;
        }
        while (v18 != v55);
        v31 += v55;
        v30 += v55;
        unint64_t v9 = v160;
        a1 = v161;
        uint64_t v11 = v162;
        uint64_t v14 = v158;
        uint64_t v12 = v159;
      }
      if (a1)
      {
        int v96 = *v31 - 128;
        int v97 = *v30 - 128;
        int v98 = 38267 * v32->u8[0] - 612272;
        int v99 = -6155 * v96 - 21375 * v97;
        int v100 = 70388 * v96;
        int v101 = 55169 * v97;
        int v102 = (v98 + v101) >> 15;
        if (v102 >= 255) {
          LOBYTE(v102) = -1;
        }
        if (v98 + v101 >= 0) {
          char v103 = v102;
        }
        else {
          char v103 = 0;
        }
        int v104 = (v99 + v98) >> 15;
        if (v104 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v99 + v98 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = v98 + v100;
        int v107 = v106 >> 15;
        if (v106 >> 15 >= 255) {
          LOBYTE(v107) = -1;
        }
        if (v106 >= 0) {
          char v108 = v107;
        }
        else {
          char v108 = 0;
        }
        *uint64_t v29 = v108;
        v29[1] = v105;
        v29[2] = v103;
        v29[3] = -1;
        int v109 = 38267 * *v27 - 612272;
        int v110 = v109 + v101;
        int v111 = v110 >> 15;
        if (v110 >> 15 >= 255) {
          LOBYTE(v111) = -1;
        }
        if (v110 >= 0) {
          char v112 = v111;
        }
        else {
          char v112 = 0;
        }
        int v113 = v109 + v99;
        int v114 = v113 >> 15;
        if (v113 >> 15 >= 255) {
          LOBYTE(v114) = -1;
        }
        if (v113 >= 0) {
          char v115 = v114;
        }
        else {
          char v115 = 0;
        }
        int v116 = v109 + v100;
        int v117 = v116 >> 15;
        if (v116 >> 15 >= 255) {
          LOBYTE(v117) = -1;
        }
        if (v116 >= 0) {
          char v118 = v117;
        }
        else {
          char v118 = 0;
        }
        *uint64_t v28 = v118;
        v28[1] = v115;
        v28[2] = v112;
        v28[3] = -1;
      }
      unint64_t v6 = (uint8x8_t *)((char *)v6 + v164);
      uint64_t v7 = (uint8x8_t *)((char *)v7 + v12);
      uint64_t v8 = (uint8x8_t *)((char *)v8 + v14);
      v10 += v163;
      ++v11;
    }
    while (v11 != a2 >> 1);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v9 <= 1) {
        uint64_t v119 = 1;
      }
      else {
        uint64_t v119 = v9;
      }
      do
      {
        int v120 = v7->u8[0];
        uint64_t v7 = (uint8x8_t *)((char *)v7 + 1);
        int v121 = v120 - 128;
        int v122 = v8->u8[0];
        uint64_t v8 = (uint8x8_t *)((char *)v8 + 1);
        int v123 = 38267 * v6->u8[0] - 612272;
        int v124 = -6155 * v121 - 21375 * (v122 - 128);
        int v125 = 70388 * v121;
        int v126 = 55169 * (v122 - 128);
        int v127 = (v123 + v126) >> 15;
        if (v127 >= 255) {
          LOBYTE(v127) = -1;
        }
        if (v123 + v126 >= 0) {
          char v128 = v127;
        }
        else {
          char v128 = 0;
        }
        int v129 = (v124 + v123) >> 15;
        if (v129 >= 255) {
          LOBYTE(v129) = -1;
        }
        if (v124 + v123 >= 0) {
          char v130 = v129;
        }
        else {
          char v130 = 0;
        }
        int v131 = v123 + v125;
        int v132 = v131 >> 15;
        if (v131 >> 15 >= 255) {
          LOBYTE(v132) = -1;
        }
        if (v131 >= 0) {
          char v133 = v132;
        }
        else {
          char v133 = 0;
        }
        int v134 = 38267 * v6->u8[1] - 612272;
        int v135 = v134 + v126;
        int v136 = v135 >> 15;
        if (v135 >> 15 >= 255) {
          LOBYTE(v136) = -1;
        }
        if (v135 >= 0) {
          char v137 = v136;
        }
        else {
          char v137 = 0;
        }
        int v138 = v134 + v124;
        int v139 = v138 >> 15;
        if (v138 >> 15 >= 255) {
          LOBYTE(v139) = -1;
        }
        if (v138 >= 0) {
          char v140 = v139;
        }
        else {
          char v140 = 0;
        }
        int v141 = v134 + v125;
        *unint64_t v10 = v133;
        v10[1] = v130;
        if (v141 >> 15 >= 255) {
          char v142 = -1;
        }
        else {
          char v142 = v141 >> 15;
        }
        void v10[2] = v128;
        v10[3] = -1;
        if (v141 >= 0) {
          char v143 = v142;
        }
        else {
          char v143 = 0;
        }
        v10[4] = v143;
        v10[5] = v140;
        unint64_t v6 = (uint8x8_t *)((char *)v6 + 2);
        v10[6] = v137;
        v10[7] = -1;
        v10 += 8;
        --v119;
      }
      while (v119);
    }
    if (a1)
    {
      int v144 = v7->u8[0] - 128;
      int v145 = v8->u8[0] - 128;
      int v146 = 38267 * v6->u8[0] - 612272;
      int v147 = -6155 * v144 - 21375 * v145;
      int v148 = v146 + 55169 * v145;
      int v149 = v148 >> 15;
      if (v148 >> 15 >= 255) {
        LOBYTE(v149) = -1;
      }
      if (v148 >= 0) {
        char v150 = v149;
      }
      else {
        char v150 = 0;
      }
      int v151 = v147 + v146;
      int v152 = v151 >> 15;
      if (v151 >> 15 >= 255) {
        LOBYTE(v152) = -1;
      }
      if (v151 >= 0) {
        char v153 = v152;
      }
      else {
        char v153 = 0;
      }
      int v154 = v146 + 70388 * v144;
      int v155 = v154 >> 15;
      if (v154 >> 15 >= 255) {
        LOBYTE(v155) = -1;
      }
      if (v154 >= 0) {
        char v156 = v155;
      }
      else {
        char v156 = 0;
      }
      *unint64_t v10 = v156;
      v10[1] = v153;
      void v10[2] = v150;
      v10[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU2020_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = a1 >> 1;
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  unint64_t v9 = v8 + 1;
  unint64_t v10 = *a6;
  unint64_t v163 = a1;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a5;
    unint64_t v15 = a2 >> 1;
    unint64_t v167 = 4 * (a1 >> 3);
    uint64_t v168 = v13;
    uint64_t v166 = 2 * v12;
    if (a1 >> 3 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = a1 >> 3;
    }
    uint64_t v161 = v12;
    unint64_t v162 = a1 >> 1;
    uint64_t v17 = &v7[v12];
    unint64_t v159 = v6 - 4 * (a1 >> 3);
    uint64_t v160 = v16;
    int32x4_t v18 = vdupq_n_s32(0xFFFFE7F5);
    int32x4_t v19 = vdupq_n_s32(0xFFFFAC81);
    int32x4_t v20 = vdupq_n_s32(0x112F4u);
    int32x4_t v21 = vdupq_n_s32(0xD781u);
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    uint16x8_t v23 = (uint16x8_t)vdupq_n_s16(0x957Bu);
    uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(0xFFF6A850);
    uint64_t v25 = -1;
    do
    {
      if (a1 >= 8)
      {
        uint64_t v32 = 0;
        uint64_t v33 = v160;
        uint64_t v28 = v10;
        do
        {
          int32x4_t v34 = &v28[v14];
          int8x8_t v35 = *(int8x8_t *)&v8[v32];
          int32x4_t v36 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v35, *(int8x8_t *)v18.i8)));
          int32x4_t v37 = (int32x4_t)vaddw_u16(v22, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v35, *(int8x8_t *)v18.i8)));
          int32x4_t v38 = vmlaq_s32(vmulq_s32(v36, v18), v37, v19);
          int32x4_t v39 = vmulq_s32(v36, v20);
          int32x4_t v40 = vmulq_s32(v37, v21);
          int32x4_t v41 = vzip1q_s32(v39, v39);
          int32x4_t v42 = vzip2q_s32(v39, v39);
          int32x4_t v43 = vzip1q_s32(v40, v40);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v7[v32]);
          uint16x8_t v45 = vmovl_u8(*(uint8x8_t *)&v17[v32]);
          int32x4_t v46 = vzip1q_s32(v38, v38);
          int32x4_t v47 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v44.i8, *(uint16x4_t *)v23.i8);
          int32x4_t v48 = (int32x4_t)vmlal_high_u16(v24, v44, v23);
          int32x4_t v49 = vzip2q_s32(v40, v40);
          int32x4_t v50 = (int32x4_t)vmlal_u16(v24, *(uint16x4_t *)v45.i8, *(uint16x4_t *)v23.i8);
          int32x4_t v51 = (int32x4_t)vmlal_high_u16(v24, v45, v23);
          int32x4_t v52 = vzip2q_s32(v38, v38);
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v47), 0xFuLL), vaddq_s32(v49, v48), 0xFuLL));
          int8x8_t v54 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v47), 0xFuLL), vaddq_s32(v52, v48), 0xFuLL));
          v169.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v43, v50), 0xFuLL), vaddq_s32(v49, v51), 0xFuLL));
          int8x8_t v55 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v47), 0xFuLL), vaddq_s32(v42, v48), 0xFuLL));
          v169.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v46, v50), 0xFuLL), vaddq_s32(v52, v51), 0xFuLL));
          vst4_s8(v28, *(int8x8x4_t *)(&v25 - 3));
          v28 += 32;
          v169.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v50), 0xFuLL), vaddq_s32(v42, v51), 0xFuLL));
          v169.val[3] = (int8x8_t)-1;
          vst4_s8(v34, v169);
          v32 += 8;
          --v33;
        }
        while (v33);
        uint16x8_t v31 = &v7[v32];
        uint64_t v26 = &v17[v32];
        int8x8_t v30 = &v8[v32];
        uint64_t v29 = &v8[v32 + 1];
        uint32x4_t v27 = &v28[v14];
      }
      else
      {
        uint64_t v26 = &v7[v161];
        uint32x4_t v27 = &v10[v14];
        uint64_t v28 = v10;
        uint64_t v29 = v9;
        int8x8_t v30 = v8;
        uint16x8_t v31 = v7;
      }
      if (v6 > v167)
      {
        uint64_t v164 = v11;
        unint64_t v165 = v9;
        unint64_t v56 = v159;
        do
        {
          int v57 = *v30;
          v30 += 2;
          int v58 = v57 - 128;
          int v59 = *v29;
          v29 += 2;
          int v60 = 38267 * *v31 - 612272;
          int v61 = -6155 * v58 - 21375 * (v59 - 128);
          int v62 = 70388 * v58;
          int v63 = 55169 * (v59 - 128);
          int v64 = (v60 + v63) >> 15;
          if (v64 >= 255) {
            LOBYTE(v64) = -1;
          }
          if (v60 + v63 >= 0) {
            char v65 = v64;
          }
          else {
            char v65 = 0;
          }
          int v66 = (v61 + v60) >> 15;
          if (v66 >= 255) {
            LOBYTE(v66) = -1;
          }
          BOOL v67 = v61 + v60 < 0;
          int v68 = v60 + v62;
          int v69 = v68 >> 15;
          if (v67) {
            LOBYTE(v66) = 0;
          }
          if (v69 >= 255) {
            LOBYTE(v69) = -1;
          }
          BOOL v67 = v68 < 0;
          int v70 = 38267 * v31[1] - 612272;
          int v71 = v70 + v63;
          if (v67) {
            LOBYTE(v69) = 0;
          }
          int v72 = v71 >> 15;
          if (v71 >> 15 >= 255) {
            LOBYTE(v72) = -1;
          }
          BOOL v67 = v71 < 0;
          int v73 = v70 + v61;
          if (v67) {
            LOBYTE(v72) = 0;
          }
          int v74 = v73 >> 15;
          if (v73 >> 15 >= 255) {
            LOBYTE(v74) = -1;
          }
          int v75 = v70 + v62;
          if (v73 < 0) {
            LOBYTE(v74) = 0;
          }
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v75 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          *uint64_t v28 = v69;
          v28[1] = v66;
          v28[2] = v65;
          v28[3] = -1;
          v28[5] = v74;
          v28[6] = v72;
          v28[4] = v77;
          v28[7] = -1;
          int v78 = 38267 * *v26 - 612272;
          v31 += 2;
          int v79 = (v78 + v63) >> 15;
          if (v79 >= 255) {
            LOBYTE(v79) = -1;
          }
          int v80 = v78 + v61;
          if (v78 + v63 < 0) {
            LOBYTE(v79) = 0;
          }
          int v81 = v80 >> 15;
          if (v80 >> 15 >= 255) {
            LOBYTE(v81) = -1;
          }
          int v82 = v78 + v62;
          if (v80 >= 0) {
            char v83 = v81;
          }
          else {
            char v83 = 0;
          }
          int v84 = v82 >> 15;
          if (v82 >> 15 >= 255) {
            LOBYTE(v84) = -1;
          }
          BOOL v67 = v82 < 0;
          int v85 = 38267 * v26[1] - 612272;
          if (v67) {
            char v86 = 0;
          }
          else {
            char v86 = v84;
          }
          int v87 = v85 + v63;
          int v88 = (v85 + v63) >> 15;
          if (v88 >= 255) {
            LOBYTE(v88) = -1;
          }
          if (v87 >= 0) {
            char v89 = v88;
          }
          else {
            char v89 = 0;
          }
          int v90 = v85 + v61;
          int v91 = v90 >> 15;
          if (v90 >> 15 >= 255) {
            LOBYTE(v91) = -1;
          }
          if (v90 >= 0) {
            char v92 = v91;
          }
          else {
            char v92 = 0;
          }
          int v93 = v85 + v62;
          *uint32x4_t v27 = v86;
          v27[1] = v83;
          if (v93 >> 15 >= 255) {
            char v94 = -1;
          }
          else {
            char v94 = v93 >> 15;
          }
          v27[2] = v79;
          v27[3] = -1;
          if (v93 >= 0) {
            char v95 = v94;
          }
          else {
            char v95 = 0;
          }
          v27[5] = v92;
          v27[4] = v95;
          v28 += 8;
          v26 += 2;
          v27[6] = v89;
          v27[7] = -1;
          v27 += 8;
          --v56;
        }
        while (v56);
        unint64_t v6 = v162;
        a1 = v163;
        uint64_t v11 = v164;
        unint64_t v9 = v165;
        unint64_t v15 = a2 >> 1;
      }
      if (a1)
      {
        int v96 = *v30 - 128;
        int v97 = *v29 - 128;
        int v98 = 38267 * *v31 - 612272;
        int v99 = -6155 * v96 - 21375 * v97;
        int v100 = 70388 * v96;
        int v101 = 55169 * v97;
        int v102 = (v98 + v101) >> 15;
        if (v102 >= 255) {
          LOBYTE(v102) = -1;
        }
        if (v98 + v101 >= 0) {
          char v103 = v102;
        }
        else {
          char v103 = 0;
        }
        int v104 = (v99 + v98) >> 15;
        if (v104 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v99 + v98 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = v98 + v100;
        int v107 = v106 >> 15;
        if (v106 >> 15 >= 255) {
          LOBYTE(v107) = -1;
        }
        if (v106 >= 0) {
          char v108 = v107;
        }
        else {
          char v108 = 0;
        }
        *uint64_t v28 = v108;
        v28[1] = v105;
        v28[2] = v103;
        v28[3] = -1;
        int v109 = 38267 * *v26 - 612272;
        int v110 = v109 + v101;
        int v111 = v110 >> 15;
        if (v110 >> 15 >= 255) {
          LOBYTE(v111) = -1;
        }
        if (v110 >= 0) {
          char v112 = v111;
        }
        else {
          char v112 = 0;
        }
        int v113 = v109 + v99;
        int v114 = v113 >> 15;
        if (v113 >> 15 >= 255) {
          LOBYTE(v114) = -1;
        }
        if (v113 >= 0) {
          char v115 = v114;
        }
        else {
          char v115 = 0;
        }
        int v116 = v109 + v100;
        int v117 = v116 >> 15;
        if (v116 >> 15 >= 255) {
          LOBYTE(v117) = -1;
        }
        if (v116 >= 0) {
          char v118 = v117;
        }
        else {
          char v118 = 0;
        }
        *uint32x4_t v27 = v118;
        v27[1] = v115;
        v27[2] = v112;
        v27[3] = -1;
      }
      v7 += v166;
      v8 += v168;
      v9 += v168;
      v10 += 2 * v14;
      ++v11;
      v17 += v166;
    }
    while (v11 != v15);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v6 <= 1) {
        uint64_t v119 = 1;
      }
      else {
        uint64_t v119 = v6;
      }
      do
      {
        int v120 = *v8;
        v8 += 2;
        int v121 = v120 - 128;
        int v122 = *v9;
        int v123 = v9 + 2;
        int v124 = 38267 * *v7 - 612272;
        int v125 = -6155 * v121 - 21375 * (v122 - 128);
        int v126 = 70388 * v121;
        int v127 = 55169 * (v122 - 128);
        int v128 = (v124 + v127) >> 15;
        if (v128 >= 255) {
          LOBYTE(v128) = -1;
        }
        if (v124 + v127 >= 0) {
          char v129 = v128;
        }
        else {
          char v129 = 0;
        }
        int v130 = (v125 + v124) >> 15;
        if (v130 >= 255) {
          LOBYTE(v130) = -1;
        }
        if (v125 + v124 >= 0) {
          char v131 = v130;
        }
        else {
          char v131 = 0;
        }
        int v132 = v124 + v126;
        int v133 = v132 >> 15;
        if (v132 >> 15 >= 255) {
          LOBYTE(v133) = -1;
        }
        if (v132 >= 0) {
          char v134 = v133;
        }
        else {
          char v134 = 0;
        }
        int v135 = 38267 * v7[1] - 612272;
        int v136 = v135 + v127;
        int v137 = v136 >> 15;
        if (v136 >> 15 >= 255) {
          LOBYTE(v137) = -1;
        }
        if (v136 >= 0) {
          char v138 = v137;
        }
        else {
          char v138 = 0;
        }
        int v139 = v135 + v125;
        int v140 = v139 >> 15;
        if (v139 >> 15 >= 255) {
          LOBYTE(v140) = -1;
        }
        if (v139 >= 0) {
          char v141 = v140;
        }
        else {
          char v141 = 0;
        }
        int v142 = v135 + v126;
        *unint64_t v10 = v134;
        v10[1] = v131;
        if (v142 >> 15 >= 255) {
          char v143 = -1;
        }
        else {
          char v143 = v142 >> 15;
        }
        unint64_t v9 = v123;
        void v10[2] = v129;
        v10[3] = -1;
        if (v142 >= 0) {
          char v144 = v143;
        }
        else {
          char v144 = 0;
        }
        v10[4] = v144;
        v10[5] = v141;
        v7 += 2;
        v10[6] = v138;
        v10[7] = -1;
        v10 += 8;
        --v119;
      }
      while (v119);
      LOBYTE(a1) = v163;
    }
    if (a1)
    {
      int v145 = *v8 - 128;
      int v146 = *v9 - 128;
      int v147 = 38267 * *v7 - 612272;
      int v148 = -6155 * v145 - 21375 * v146;
      int v149 = v147 + 55169 * v146;
      int v150 = v149 >> 15;
      if (v149 >> 15 >= 255) {
        LOBYTE(v150) = -1;
      }
      if (v149 >= 0) {
        char v151 = v150;
      }
      else {
        char v151 = 0;
      }
      int v152 = v148 + v147;
      int v153 = v152 >> 15;
      if (v152 >> 15 >= 255) {
        LOBYTE(v153) = -1;
      }
      if (v152 >= 0) {
        char v154 = v153;
      }
      else {
        char v154 = 0;
      }
      int v155 = v147 + 70388 * v145;
      int v156 = v155 >> 15;
      if (v155 >> 15 >= 255) {
        LOBYTE(v156) = -1;
      }
      if (v155 >= 0) {
        char v157 = v156;
      }
      else {
        char v157 = 0;
      }
      *unint64_t v10 = v157;
      v10[1] = v154;
      void v10[2] = v151;
      v10[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420vITU2020_24RGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6, int32x4_t a7, int32x4_t a8, double a9, double a10, double a11, int32x4_t a12)
{
  unint64_t v14 = a1 >> 1;
  uint64_t v16 = *a4;
  unint64_t v15 = a4[1];
  uint64_t v17 = v15 + 1;
  int32x4_t v18 = *a6;
  if (a2 >= 2)
  {
    uint64_t v19 = 0;
    uint64_t v21 = *a3;
    uint64_t v20 = a3[1];
    uint64_t v22 = *a5;
    unint64_t v23 = a2 >> 1;
    uint64_t v147 = 2 * v21;
    unint64_t v148 = 4 * (a1 >> 3);
    uint64_t v146 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = a1 >> 3;
    }
    uint64_t v143 = v21;
    uint64_t v25 = &v16[v21];
    unint64_t v140 = v14 - 4 * (a1 >> 3);
    uint64_t v141 = v24;
    *(int32x2_t *)a7.i8 = vdup_n_s32(0xFFF6A850);
    v26.i64[0] = 0xFF000000FFLL;
    v26.i64[1] = 0xFF000000FFLL;
    v27.i64[0] = 0x7F0000007FLL;
    v27.i64[1] = 0x7F0000007FLL;
    int32x4_t v28 = vdupq_n_s32(0xFFFFE7F5);
    a12 = vdupq_n_s32(0xFFFFAC81);
    int32x4_t v29 = vdupq_n_s32(0x112F4u);
    int32x4_t v30 = vdupq_n_s32(0xD781u);
    uint16x8_t v31 = (uint16x8_t)vdupq_n_s16(0x957Bu);
    uint32x4_t v32 = (uint32x4_t)vdupq_n_s32(0xFFF6A850);
    unint64_t v144 = a1 >> 1;
    unint64_t v145 = a1;
    uint64_t v142 = v20;
    do
    {
      if (a1 >= 8)
      {
        uint64_t v39 = 0;
        uint64_t v40 = v141;
        int8x8_t v35 = v18;
        do
        {
          int8x8_t v41 = *(int8x8_t *)&v15[v39];
          int32x4_t v42 = &v35[v22];
          int32x4_t v43 = (int32x4_t)vaddw_u16(v27, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v41, *(int8x8_t *)a7.i8)));
          int32x4_t v44 = (int32x4_t)vaddw_u16(v27, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v41, *(int8x8_t *)a7.i8)));
          int32x4_t v45 = vmlaq_s32(vmulq_s32(v43, v28), v44, a12);
          int32x4_t v46 = vmulq_s32(v43, v29);
          int32x4_t v47 = vmulq_s32(v44, v30);
          int32x4_t v13 = vzip1q_s32(v46, v46);
          int32x4_t v48 = vzip2q_s32(v46, v46);
          int32x4_t v49 = vzip1q_s32(v47, v47);
          int32x4_t v50 = vzip1q_s32(v45, v45);
          uint16x8_t v51 = vmovl_u8(*(uint8x8_t *)&v16[v39]);
          uint16x8_t v52 = vmovl_u8(*(uint8x8_t *)&v25[v39]);
          int32x4_t v53 = (int32x4_t)vmlal_u16(v32, *(uint16x4_t *)v51.i8, *(uint16x4_t *)v31.i8);
          int32x4_t v54 = vzip2q_s32(v47, v47);
          int32x4_t v55 = (int32x4_t)vmlal_high_u16(v32, v51, v31);
          int32x4_t v56 = (int32x4_t)vmlal_u16(v32, *(uint16x4_t *)v52.i8, *(uint16x4_t *)v31.i8);
          int32x4_t v57 = vzip2q_s32(v45, v45);
          int32x4_t v58 = (int32x4_t)vmlal_high_u16(v32, v52, v31);
          v149.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v49, v53), 0xFuLL), vaddq_s32(v54, v55), 0xFuLL));
          v149.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v53), 0xFuLL), vaddq_s32(v57, v55), 0xFuLL));
          v150.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v49, v56), 0xFuLL), vaddq_s32(v54, v58), 0xFuLL));
          v149.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v13, v53), 0xFuLL), vaddq_s32(v48, v55), 0xFuLL));
          int16x8_t v12 = vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v50, v56), 0xFuLL), vaddq_s32(v57, v58), 0xFuLL);
          v150.val[1] = vqmovun_s16(v12);
          vst3_s8(v35, v149);
          v35 += 24;
          v150.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v13, v56), 0xFuLL), vaddq_s32(v48, v58), 0xFuLL));
          vst3_s8(v42, v150);
          v39 += 8;
          --v40;
        }
        while (v40);
        int32x4_t v38 = &v16[v39];
        uint64_t v33 = &v25[v39];
        int32x4_t v37 = &v15[v39];
        int32x4_t v36 = &v15[v39 + 1];
        int32x4_t v34 = &v35[v22];
      }
      else
      {
        uint64_t v33 = &v16[v143];
        int32x4_t v34 = &v18[v22];
        int8x8_t v35 = v18;
        int32x4_t v36 = v17;
        int32x4_t v37 = v15;
        int32x4_t v38 = v16;
      }
      if (v14 > v148)
      {
        uint64_t v59 = 0;
        unint64_t v60 = v140;
        do
        {
          int v61 = &v33[v59];
          int v62 = v37[v59] - 128;
          int v63 = 55169 * (v36[v59] - 128);
          int v64 = v36[v59] - 128;
          v12.i32[1] = v38[v59 + 1];
          int32x4_t v65 = a7;
          v65.i32[0] = -6155 * v62;
          *(int32x2_t *)v65.i8 = vmla_s32(*(int32x2_t *)v65.i8, *(int32x2_t *)v12.i8, (int32x2_t)0x957BFFFFAC81);
          __int32 v66 = v65.i32[0];
          int v67 = (v65.i32[1] + v65.i32[0]) >> 15;
          v12.i32[0] = v63;
          v68.i32[0] = v63;
          v68.i32[1] = 38267 * v38[v59] - 612272;
          if (v67 >= 255) {
            LOBYTE(v67) = -1;
          }
          v13.i32[0] = 38267 * v38[v59] - 612272;
          int32x4_t v69 = vzip1q_s32(v13, v65);
          v69.i32[2] = v69.i32[0];
          if (v65.i32[1] + v65.i32[0] >= 0) {
            char v70 = v67;
          }
          else {
            char v70 = 0;
          }
          int v71 = 70388 * v62;
          int v72 = (v65.i32[1] + v71) >> 15;
          v35[4] = v70;
          if (v72 >= 255) {
            char v73 = -1;
          }
          else {
            char v73 = v72;
          }
          v68.i64[1] = __PAIR64__(v63, v71);
          if (v65.i32[1] + v71 < 0) {
            char v73 = 0;
          }
          int32x4_t v74 = vaddq_s32(v69, v68);
          int32x4_t v75 = vcltzq_s32(v74);
          int16x8_t v76 = (int16x8_t)vminq_s32(vshrq_n_s32(v74, 0xFuLL), v26);
          *(int8x8_t *)v76.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v76), (int8x8_t)vmovn_s32(v75));
          *(_DWORD *)int8x8_t v35 = vmovn_s16(v76).u32[0];
          v35[5] = v73;
          v12.i32[1] = 38267 * *v61 - 612272;
          int v77 = 38267 * v61[1] - 612272;
          v13.i64[0] = v12.i64[0];
          v13.i64[1] = __PAIR64__(v77, v71);
          int32x4_t v78 = (int32x4_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 1), (int8x16_t)v12, 4uLL);
          v78.i32[1] = v65.i32[0];
          int32x4_t v79 = vaddq_s32(v13, v78);
          int8x8_t v80 = (int8x8_t)vmovn_s32(vcltzq_s32(v79));
          int16x8_t v12 = (int16x8_t)vminq_s32(vshrq_n_s32(v79, 0xFuLL), v26);
          *(int16x4_t *)v12.i8 = vmovn_s32((int32x4_t)v12);
          int v81 = (v77 + v66) >> 15;
          v35 += 6;
          if (v81 >= 255) {
            LOBYTE(v81) = -1;
          }
          if (v77 + v66 >= 0) {
            char v82 = v81;
          }
          else {
            char v82 = 0;
          }
          int v83 = v77 + v71;
          *(int8x8_t *)v12.i8 = vbic_s8(*(int8x8_t *)v12.i8, v80);
          int v84 = v83 >> 15;
          if (v83 >> 15 >= 255) {
            LOBYTE(v84) = -1;
          }
          *(_DWORD *)int32x4_t v34 = vmovn_s16(v12).u32[0];
          if (v83 >= 0) {
            char v85 = v84;
          }
          else {
            char v85 = 0;
          }
          v34[4] = v82;
          v34[5] = v85;
          v34 += 6;
          v59 += 2;
          --v60;
        }
        while (v60);
        v38 += v59;
        v33 += v59;
        v37 += v59;
        v36 += v59;
        unint64_t v14 = v144;
        a1 = v145;
        unint64_t v23 = a2 >> 1;
        uint64_t v20 = v142;
      }
      if (a1)
      {
        int v86 = *v37 - 128;
        int v87 = *v36 - 128;
        int v88 = 38267 * *v38 - 612272;
        int v89 = -6155 * v86 - 21375 * v87;
        int v90 = 70388 * v86;
        int v91 = 55169 * v87;
        int v92 = (v88 + v91) >> 15;
        if (v92 >= 255) {
          LOBYTE(v92) = -1;
        }
        if (v88 + v91 >= 0) {
          char v93 = v92;
        }
        else {
          char v93 = 0;
        }
        int v94 = (v89 + v88) >> 15;
        if (v94 >= 255) {
          LOBYTE(v94) = -1;
        }
        if (v89 + v88 >= 0) {
          char v95 = v94;
        }
        else {
          char v95 = 0;
        }
        int v96 = v88 + v90;
        int v97 = v96 >> 15;
        if (v96 >> 15 >= 255) {
          LOBYTE(v97) = -1;
        }
        if (v96 >= 0) {
          char v98 = v97;
        }
        else {
          char v98 = 0;
        }
        *int8x8_t v35 = v93;
        v35[1] = v95;
        v35[2] = v98;
        int v99 = 38267 * *v33 - 612272;
        int v100 = v99 + v91;
        int v101 = v100 >> 15;
        if (v100 >> 15 >= 255) {
          LOBYTE(v101) = -1;
        }
        if (v100 >= 0) {
          char v102 = v101;
        }
        else {
          char v102 = 0;
        }
        int v103 = v99 + v89;
        int v104 = v103 >> 15;
        if (v103 >> 15 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v103 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = v99 + v90;
        int v107 = v106 >> 15;
        if (v106 >> 15 >= 255) {
          LOBYTE(v107) = -1;
        }
        *int32x4_t v34 = v102;
        if (v106 >= 0) {
          char v108 = v107;
        }
        else {
          char v108 = 0;
        }
        v34[1] = v105;
        v34[2] = v108;
      }
      v16 += v147;
      v15 += v20;
      v17 += v20;
      v18 += v146;
      ++v19;
      v25 += v147;
    }
    while (v19 != v23);
  }
  if (a2)
  {
    if (a1 >= 2)
    {
      if (v14 <= 1) {
        uint64_t v109 = 1;
      }
      else {
        uint64_t v109 = v14;
      }
      *(int32x2_t *)a8.i8 = vdup_n_s32(0xFFF6A850);
      v110.i64[0] = 0xFF000000FFLL;
      v110.i64[1] = 0xFF000000FFLL;
      do
      {
        int v112 = *v15;
        v15 += 2;
        int v111 = v112;
        int v113 = *v17;
        v17 += 2;
        v111 -= 128;
        int v114 = v113 - 128;
        int v115 = 55169 * (v113 - 128);
        v116.i32[0] = v113 - 128;
        v116.i32[1] = v16[1];
        int32x4_t v117 = a8;
        v117.i32[0] = -6155 * v111;
        *(int32x2_t *)v117.i8 = vmla_s32(*(int32x2_t *)v117.i8, v116, (int32x2_t)0x957BFFFFAC81);
        a12.i32[0] = 38267 * *v16 - 612272;
        a12 = vzip1q_s32(a12, v117);
        int v118 = 70388 * v111;
        int v119 = (v117.i32[1] + v117.i32[0]) >> 15;
        if (v119 >= 255) {
          LOBYTE(v119) = -1;
        }
        int v120 = v117.i32[1] + v118;
        if (v117.i32[1] + v117.i32[0] < 0) {
          LOBYTE(v119) = 0;
        }
        a12.i32[2] = a12.i32[0];
        v121.i32[2] = v118;
        if ((v117.i32[1] + v118) >> 15 >= 255) {
          char v122 = -1;
        }
        else {
          char v122 = (v117.i32[1] + v118) >> 15;
        }
        v121.i32[3] = v115;
        v121.i32[1] = 38267 * *v16 - 612272;
        v121.i32[0] = 55169 * v114;
        int32x4_t v123 = vaddq_s32(a12, v121);
        int8x8_t v124 = (int8x8_t)vmovn_s32(vcltzq_s32(v123));
        int16x8_t v125 = (int16x8_t)vminq_s32(vshrq_n_s32(v123, 0xFuLL), v110);
        *(int8x8_t *)v125.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v125), v124);
        v16 += 2;
        *(_DWORD *)int32x4_t v18 = vmovn_s16(v125).u32[0];
        if (v120 < 0) {
          char v122 = 0;
        }
        v18[4] = v119;
        v18[5] = v122;
        v18 += 6;
        --v109;
      }
      while (v109);
    }
    if (a1)
    {
      int v126 = *v15 - 128;
      int v127 = *v17 - 128;
      int v128 = 38267 * *v16 - 612272;
      int v129 = -6155 * v126 - 21375 * v127;
      int v130 = v128 + 55169 * v127;
      int v131 = v130 >> 15;
      if (v130 >> 15 >= 255) {
        LOBYTE(v131) = -1;
      }
      if (v130 >= 0) {
        char v132 = v131;
      }
      else {
        char v132 = 0;
      }
      int v133 = v129 + v128;
      int v134 = v133 >> 15;
      if (v133 >> 15 >= 255) {
        LOBYTE(v134) = -1;
      }
      if (v133 >= 0) {
        char v135 = v134;
      }
      else {
        char v135 = 0;
      }
      int v136 = v128 + 70388 * v126;
      int v137 = v136 >> 15;
      if (v136 >> 15 >= 255) {
        LOBYTE(v137) = -1;
      }
      *int32x4_t v18 = v132;
      if (v136 >= 0) {
        char v138 = v137;
      }
      else {
        char v138 = 0;
      }
      v18[1] = v135;
      v18[2] = v138;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU2020F_32BGRA_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = v7 + 1;
  unint64_t v9 = *a6;
  char v164 = a2;
  if (a2 >= 2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a5;
    unint64_t v174 = a2 >> 1;
    unint64_t v173 = 4 * (a1 >> 3);
    uint64_t v172 = 2 * *a3;
    uint64_t v171 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = a1 >> 3;
    }
    uint64_t v168 = *a3;
    unint64_t v169 = a1 >> 1;
    uint64_t v16 = &v6[*a3];
    uint64_t v165 = (a1 >> 1) - 4 * (a1 >> 3);
    uint64_t v166 = v15;
    int32x4_t v17 = vdupq_n_s32(0xFFFFEAF1);
    int32x4_t v18 = vdupq_n_s32(0xFFFFB6DF);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    int32x4_t v20 = vdupq_n_s32(0xF0D2u);
    int32x4_t v21 = vdupq_n_s32(0xBCC0u);
    uint64_t v22 = -1;
    unint64_t v10 = a1;
    unint64_t v11 = a1 >> 1;
    uint64_t v167 = a3[1];
    do
    {
      if (v10 >= 8)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v166;
        uint64_t v25 = v9;
        do
        {
          uint16x8_t v31 = &v25[v14];
          int8x8_t v32 = *(int8x8_t *)&v7[v29];
          int32x4_t v33 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v32, *(int8x8_t *)v17.i8)));
          int32x4_t v34 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v32, *(int8x8_t *)v17.i8)));
          int32x4_t v35 = vmulq_s32(v33, v17);
          int32x4_t v36 = vmulq_s32(v33, v20);
          int32x4_t v37 = vmulq_s32(v34, v21);
          int32x4_t v38 = vmlaq_s32(v35, v34, v18);
          int32x4_t v39 = vzip1q_s32(v36, v36);
          int32x4_t v40 = vzip2q_s32(v36, v36);
          int32x4_t v41 = vzip1q_s32(v37, v37);
          int32x4_t v42 = vzip1q_s32(v38, v38);
          uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)&v6[v29]);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v16[v29]);
          int32x4_t v45 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          int32x4_t v46 = vzip2q_s32(v37, v37);
          int32x4_t v47 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          int32x4_t v48 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v44.i8, 0xFuLL);
          int32x4_t v49 = (int32x4_t)vshll_high_n_u16(v44, 0xFuLL);
          int32x4_t v50 = vzip2q_s32(v38, v38);
          int8x8_t v51 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v45), 0xFuLL), vaddq_s32(v46, v47), 0xFuLL));
          int8x8_t v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v45), 0xFuLL), vaddq_s32(v50, v47), 0xFuLL));
          v175.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v48), 0xFuLL), vaddq_s32(v46, v49), 0xFuLL));
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v45), 0xFuLL), vaddq_s32(v40, v47), 0xFuLL));
          v175.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          vst4_s8(v25, *(int8x8x4_t *)(&v22 - 3));
          v25 += 32;
          v175.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v48), 0xFuLL), vaddq_s32(v40, v49), 0xFuLL));
          v175.val[3] = (int8x8_t)-1;
          vst4_s8(v31, v175);
          v29 += 8;
          --v30;
        }
        while (v30);
        int32x4_t v28 = &v6[v29];
        unint64_t v23 = &v16[v29];
        uint32x4_t v27 = &v7[v29];
        int32x4_t v26 = &v7[v29 + 1];
        uint64_t v24 = &v25[v14];
      }
      else
      {
        unint64_t v23 = &v6[v168];
        uint64_t v24 = &v9[v14];
        uint64_t v25 = v9;
        int32x4_t v26 = v8;
        uint32x4_t v27 = v7;
        int32x4_t v28 = v6;
      }
      if (v11 > v173)
      {
        uint64_t v54 = v165;
        do
        {
          int v56 = *v27;
          v27 += 2;
          int v55 = v56;
          int v57 = *v26;
          v26 += 2;
          v55 -= 128;
          int v58 = *v28;
          int v59 = v28[1];
          v28 += 2;
          int v60 = -5391 * v55 - 18721 * (v57 - 128);
          int v61 = 61650 * v55;
          int v62 = 48320 * (v57 - 128);
          int v63 = v62 + (v58 << 15);
          int v64 = v63 >> 15;
          if (v63 >> 15 >= 255) {
            LOBYTE(v64) = -1;
          }
          if (v63 < 0) {
            LOBYTE(v64) = 0;
          }
          int v65 = v60 + (v58 << 15);
          int v66 = v65 >> 15;
          if (v65 >> 15 >= 255) {
            LOBYTE(v66) = -1;
          }
          if (v65 < 0) {
            LOBYTE(v66) = 0;
          }
          int v67 = v61 + (v58 << 15);
          int v68 = v67 >> 15;
          if (v67 >> 15 >= 255) {
            LOBYTE(v68) = -1;
          }
          if (v67 >= 0) {
            char v69 = v68;
          }
          else {
            char v69 = 0;
          }
          int v70 = v62 + (v59 << 15);
          int v71 = v70 >> 15;
          if (v70 >> 15 >= 255) {
            LOBYTE(v71) = -1;
          }
          if (v70 < 0) {
            LOBYTE(v71) = 0;
          }
          int v72 = v60 + (v59 << 15);
          int v73 = v72 >> 15;
          if (v72 >> 15 >= 255) {
            LOBYTE(v73) = -1;
          }
          if (v72 >= 0) {
            char v74 = v73;
          }
          else {
            char v74 = 0;
          }
          int v75 = v61 + (v59 << 15);
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v75 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          v25[1] = v66;
          v25[2] = v64;
          v25[3] = -1;
          *uint64_t v25 = v69;
          v25[4] = v77;
          v25[5] = v74;
          v25[6] = v71;
          v25[7] = -1;
          int v78 = *v23;
          int v79 = v23[1];
          int v80 = v62 + (v78 << 15);
          int v81 = v80 >> 15;
          if (v80 >> 15 >= 255) {
            LOBYTE(v81) = -1;
          }
          if (v80 >= 0) {
            char v82 = v81;
          }
          else {
            char v82 = 0;
          }
          int v83 = v60 + (v78 << 15);
          int v84 = v83 >> 15;
          if (v83 >> 15 >= 255) {
            LOBYTE(v84) = -1;
          }
          if (v83 >= 0) {
            char v85 = v84;
          }
          else {
            char v85 = 0;
          }
          int v86 = v61 + (v78 << 15);
          int v87 = v86 >> 15;
          if (v86 >> 15 >= 255) {
            LOBYTE(v87) = -1;
          }
          if (v86 >= 0) {
            char v88 = v87;
          }
          else {
            char v88 = 0;
          }
          int v89 = v62 + (v79 << 15);
          int v90 = v89 >> 15;
          if (v89 >> 15 >= 255) {
            LOBYTE(v90) = -1;
          }
          if (v89 >= 0) {
            char v91 = v90;
          }
          else {
            char v91 = 0;
          }
          int v92 = v60 + (v79 << 15);
          int v93 = v92 >> 15;
          if (v92 >> 15 >= 255) {
            LOBYTE(v93) = -1;
          }
          if (v92 >= 0) {
            char v94 = v93;
          }
          else {
            char v94 = 0;
          }
          int v95 = v61 + (v79 << 15);
          *uint64_t v24 = v88;
          v24[1] = v85;
          if (v95 >> 15 >= 255) {
            LOBYTE(v96) = -1;
          }
          else {
            int v96 = v95 >> 15;
          }
          v24[2] = v82;
          v24[3] = -1;
          if (v95 < 0) {
            LOBYTE(v96) = 0;
          }
          v24[5] = v94;
          v24[4] = v96;
          v25 += 8;
          v23 += 2;
          v24[6] = v91;
          v24[7] = -1;
          v24 += 8;
          --v54;
        }
        while (v54);
        unint64_t v11 = v169;
        unint64_t v10 = a1;
        uint64_t v13 = v167;
      }
      if (v10)
      {
        int v97 = *v27 - 128;
        int v98 = *v26 - 128;
        int v99 = *v28;
        int v100 = -5391 * v97 - 18721 * v98;
        int v101 = 61650 * v97;
        int v102 = 48320 * v98;
        int v103 = v102 + (v99 << 15);
        int v104 = v103 >> 15;
        if (v103 >> 15 >= 255) {
          LOBYTE(v104) = -1;
        }
        if (v103 >= 0) {
          char v105 = v104;
        }
        else {
          char v105 = 0;
        }
        int v106 = v100 + (v99 << 15);
        int v107 = v106 >> 15;
        if (v106 >> 15 >= 255) {
          LOBYTE(v107) = -1;
        }
        if (v106 >= 0) {
          char v108 = v107;
        }
        else {
          char v108 = 0;
        }
        int v109 = v101 + (v99 << 15);
        int v110 = v109 >> 15;
        if (v109 >> 15 >= 255) {
          LOBYTE(v110) = -1;
        }
        if (v109 >= 0) {
          char v111 = v110;
        }
        else {
          char v111 = 0;
        }
        *uint64_t v25 = v111;
        v25[1] = v108;
        v25[2] = v105;
        v25[3] = -1;
        int v112 = *v23;
        int v113 = v102 + (v112 << 15);
        int v114 = v113 >> 15;
        if (v113 >> 15 >= 255) {
          LOBYTE(v114) = -1;
        }
        if (v113 >= 0) {
          char v115 = v114;
        }
        else {
          char v115 = 0;
        }
        int v116 = v100 + (v112 << 15);
        int v117 = v116 >> 15;
        if (v116 >> 15 >= 255) {
          LOBYTE(v117) = -1;
        }
        if (v116 >= 0) {
          char v118 = v117;
        }
        else {
          char v118 = 0;
        }
        int v119 = v101 + (v112 << 15);
        int v120 = v119 >> 15;
        if (v119 >> 15 >= 255) {
          LOBYTE(v120) = -1;
        }
        if (v119 >= 0) {
          char v121 = v120;
        }
        else {
          char v121 = 0;
        }
        *uint64_t v24 = v121;
        v24[1] = v118;
        v24[2] = v115;
        v24[3] = -1;
      }
      v6 += v172;
      v7 += v13;
      v8 += v13;
      v9 += v171;
      ++v12;
      v16 += v172;
    }
    while (v12 != v174);
  }
  else
  {
    unint64_t v10 = a1;
    unint64_t v11 = a1 >> 1;
  }
  if (v164)
  {
    if (v10 >= 2)
    {
      if (v11 <= 1) {
        uint64_t v122 = 1;
      }
      else {
        uint64_t v122 = v11;
      }
      do
      {
        int v123 = *v7;
        v7 += 2;
        int v124 = v123 - 128;
        int v125 = *v8;
        v8 += 2;
        int v126 = *v6;
        int v127 = v6[1];
        int v128 = -5391 * v124 - 18721 * (v125 - 128);
        int v129 = 61650 * v124;
        int v130 = 48320 * (v125 - 128);
        int v131 = v130 + (v126 << 15);
        int v132 = v131 >> 15;
        if (v131 >> 15 >= 255) {
          LOBYTE(v132) = -1;
        }
        if (v131 >= 0) {
          char v133 = v132;
        }
        else {
          char v133 = 0;
        }
        int v134 = v128 + (v126 << 15);
        int v135 = v134 >> 15;
        if (v134 >> 15 >= 255) {
          LOBYTE(v135) = -1;
        }
        if (v134 >= 0) {
          char v136 = v135;
        }
        else {
          char v136 = 0;
        }
        int v137 = v129 + (v126 << 15);
        int v138 = v137 >> 15;
        if (v137 >> 15 >= 255) {
          LOBYTE(v138) = -1;
        }
        if (v137 >= 0) {
          char v139 = v138;
        }
        else {
          char v139 = 0;
        }
        int v140 = v130 + (v127 << 15);
        int v141 = v140 >> 15;
        if (v140 >> 15 >= 255) {
          LOBYTE(v141) = -1;
        }
        if (v140 >= 0) {
          char v142 = v141;
        }
        else {
          char v142 = 0;
        }
        int v143 = v128 + (v127 << 15);
        int v144 = v143 >> 15;
        if (v143 >> 15 >= 255) {
          LOBYTE(v144) = -1;
        }
        if (v143 >= 0) {
          char v145 = v144;
        }
        else {
          char v145 = 0;
        }
        int v146 = v129 + (v127 << 15);
        *unint64_t v9 = v139;
        v9[1] = v136;
        if (v146 >> 15 >= 255) {
          LOBYTE(v147) = -1;
        }
        else {
          int v147 = v146 >> 15;
        }
        v9[2] = v133;
        v9[3] = -1;
        if (v146 >= 0) {
          char v148 = v147;
        }
        else {
          char v148 = 0;
        }
        v9[4] = v148;
        v9[5] = v145;
        v6 += 2;
        v9[6] = v142;
        v9[7] = -1;
        v9 += 8;
        --v122;
      }
      while (v122);
      LOBYTE(v10) = a1;
    }
    if (v10)
    {
      int v149 = *v7 - 128;
      int v150 = *v8 - 128;
      int v151 = *v6;
      int v152 = -5391 * v149 - 18721 * v150;
      int v153 = 61650 * v149;
      int v154 = 48320 * v150 + (v151 << 15);
      int v155 = v154 >> 15;
      if (v154 >> 15 >= 255) {
        LOBYTE(v155) = -1;
      }
      if (v154 >= 0) {
        char v156 = v155;
      }
      else {
        char v156 = 0;
      }
      int v157 = v152 + (v151 << 15);
      int v158 = v157 >> 15;
      if (v157 >> 15 >= 255) {
        LOBYTE(v158) = -1;
      }
      if (v157 >= 0) {
        char v159 = v158;
      }
      else {
        char v159 = 0;
      }
      int v160 = v153 + (v151 << 15);
      int v161 = v160 >> 15;
      if (v160 >> 15 >= 255) {
        LOBYTE(v161) = -1;
      }
      if (v160 >= 0) {
        char v162 = v161;
      }
      else {
        char v162 = 0;
      }
      *unint64_t v9 = v162;
      v9[1] = v159;
      v9[2] = v156;
      v9[3] = -1;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU2020F_32ARGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = v7 + 1;
  unint64_t v9 = *a6;
  char v165 = a2;
  if (a2 >= 2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a3[1];
    uint64_t v14 = *a5;
    unint64_t v175 = a2 >> 1;
    unint64_t v174 = 4 * (a1 >> 3);
    uint64_t v173 = 2 * *a3;
    uint64_t v172 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = a1 >> 3;
    }
    uint64_t v169 = *a3;
    unint64_t v170 = a1 >> 1;
    uint64_t v16 = &v6[*a3];
    uint64_t v166 = (a1 >> 1) - 4 * (a1 >> 3);
    uint64_t v167 = v15;
    int32x4_t v17 = vdupq_n_s32(0xFFFFEAF1);
    int32x4_t v18 = vdupq_n_s32(0xFFFFB6DF);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
    int32x4_t v20 = vdupq_n_s32(0xF0D2u);
    int32x4_t v21 = vdupq_n_s32(0xBCC0u);
    uint64_t v22 = -1;
    unint64_t v10 = a1;
    unint64_t v11 = a1 >> 1;
    uint64_t v168 = a3[1];
    do
    {
      if (v10 >= 8)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v167;
        uint64_t v25 = v9;
        do
        {
          uint16x8_t v31 = &v25[v14];
          int8x8_t v32 = *(int8x8_t *)&v7[v29];
          int32x4_t v33 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v32, *(int8x8_t *)v17.i8)));
          int32x4_t v34 = (int32x4_t)vaddw_u16(v19, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v32, *(int8x8_t *)v17.i8)));
          int32x4_t v35 = vmulq_s32(v33, v17);
          int32x4_t v36 = vmulq_s32(v33, v20);
          int32x4_t v37 = vmulq_s32(v34, v21);
          int32x4_t v38 = vmlaq_s32(v35, v34, v18);
          int32x4_t v39 = vzip1q_s32(v36, v36);
          int32x4_t v40 = vzip2q_s32(v36, v36);
          int32x4_t v41 = vzip1q_s32(v37, v37);
          int32x4_t v42 = vzip1q_s32(v38, v38);
          uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)&v6[v29]);
          uint16x8_t v44 = vmovl_u8(*(uint8x8_t *)&v16[v29]);
          int32x4_t v45 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          int32x4_t v46 = vzip2q_s32(v37, v37);
          int32x4_t v47 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          int32x4_t v48 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v44.i8, 0xFuLL);
          int32x4_t v49 = (int32x4_t)vshll_high_n_u16(v44, 0xFuLL);
          int32x4_t v50 = vzip2q_s32(v38, v38);
          int8x8_t v51 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v45), 0xFuLL), vaddq_s32(v46, v47), 0xFuLL));
          int8x8_t v52 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v45), 0xFuLL), vaddq_s32(v50, v47), 0xFuLL));
          v176.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v48), 0xFuLL), vaddq_s32(v46, v49), 0xFuLL));
          int8x8_t v53 = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v45), 0xFuLL), vaddq_s32(v40, v47), 0xFuLL));
          v176.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v42, v48), 0xFuLL), vaddq_s32(v50, v49), 0xFuLL));
          vst4_s8(v25, *(int8x8x4_t *)&v22);
          v25 += 32;
          v176.val[3] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v48), 0xFuLL), vaddq_s32(v40, v49), 0xFuLL));
          v176.val[0] = (int8x8_t)-1;
          vst4_s8(v31, v176);
          v29 += 8;
          --v30;
        }
        while (v30);
        int32x4_t v28 = &v6[v29];
        unint64_t v23 = &v16[v29];
        uint32x4_t v27 = &v7[v29];
        int32x4_t v26 = &v7[v29 + 1];
        uint64_t v24 = &v25[v14];
      }
      else
      {
        unint64_t v23 = &v6[v169];
        uint64_t v24 = &v9[v14];
        uint64_t v25 = v9;
        int32x4_t v26 = v8;
        uint32x4_t v27 = v7;
        int32x4_t v28 = v6;
      }
      if (v11 > v174)
      {
        uint64_t v54 = v166;
        do
        {
          int v56 = *v27;
          v27 += 2;
          int v55 = v56;
          int v57 = *v26;
          v26 += 2;
          v55 -= 128;
          int v58 = *v28;
          int v59 = v28[1];
          v28 += 2;
          int v60 = -5391 * v55 - 18721 * (v57 - 128);
          int v61 = 61650 * v55;
          int v62 = 48320 * (v57 - 128);
          int v63 = v62 + (v58 << 15);
          int v64 = v63 >> 15;
          if (v63 >> 15 >= 255) {
            LOBYTE(v64) = -1;
          }
          if (v63 < 0) {
            LOBYTE(v64) = 0;
          }
          int v65 = v60 + (v58 << 15);
          int v66 = v65 >> 15;
          if (v65 >> 15 >= 255) {
            LOBYTE(v66) = -1;
          }
          if (v65 < 0) {
            LOBYTE(v66) = 0;
          }
          int v67 = v61 + (v58 << 15);
          int v68 = v67 >> 15;
          if (v67 >> 15 >= 255) {
            LOBYTE(v68) = -1;
          }
          if (v67 >= 0) {
            char v69 = v68;
          }
          else {
            char v69 = 0;
          }
          int v70 = v62 + (v59 << 15);
          int v71 = v70 >> 15;
          if (v70 >> 15 >= 255) {
            LOBYTE(v71) = -1;
          }
          if (v70 < 0) {
            LOBYTE(v71) = 0;
          }
          int v72 = v60 + (v59 << 15);
          int v73 = v72 >> 15;
          if (v72 >> 15 >= 255) {
            LOBYTE(v73) = -1;
          }
          if (v72 >= 0) {
            char v74 = v73;
          }
          else {
            char v74 = 0;
          }
          int v75 = v61 + (v59 << 15);
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          if (v75 >= 0) {
            char v77 = v76;
          }
          else {
            char v77 = 0;
          }
          *uint64_t v25 = -1;
          v25[1] = v64;
          v25[2] = v66;
          v25[3] = v69;
          v25[4] = -1;
          v25[5] = v71;
          v25[6] = v74;
          v25[7] = v77;
          int v78 = *v23;
          v25 += 8;
          int v79 = v23[1];
          v23 += 2;
          int v80 = v62 + (v78 << 15);
          int v81 = v80 >> 15;
          if (v80 >> 15 >= 255) {
            LOBYTE(v81) = -1;
          }
          if (v80 >= 0) {
            char v82 = v81;
          }
          else {
            char v82 = 0;
          }
          int v83 = v60 + (v78 << 15);
          int v84 = v83 >> 15;
          if (v83 >> 15 >= 255) {
            LOBYTE(v84) = -1;
          }
          if (v83 >= 0) {
            char v85 = v84;
          }
          else {
            char v85 = 0;
          }
          int v86 = v61 + (v78 << 15);
          int v87 = v86 >> 15;
          if (v86 >> 15 >= 255) {
            LOBYTE(v87) = -1;
          }
          if (v86 >= 0) {
            char v88 = v87;
          }
          else {
            char v88 = 0;
          }
          int v89 = v62 + (v79 << 15);
          int v90 = v89 >> 15;
          if (v89 >> 15 >= 255) {
            LOBYTE(v90) = -1;
          }
          if (v89 >= 0) {
            char v91 = v90;
          }
          else {
            char v91 = 0;
          }
          int v92 = v60 + (v79 << 15);
          int v93 = v92 >> 15;
          if (v92 >> 15 >= 255) {
            LOBYTE(v93) = -1;
          }
          int v94 = v61 + (v79 << 15);
          int v95 = v94 >> 15;
          *uint64_t v24 = -1;
          v24[1] = v82;
          if (v92 >= 0) {
            char v96 = v93;
          }
          else {
            char v96 = 0;
          }
          if (v95 >= 255) {
            LOBYTE(v95) = -1;
          }
          v24[2] = v85;
          v24[4] = -1;
          v24[3] = v88;
          v24[5] = v91;
          if (v94 >= 0) {
            char v97 = v95;
          }
          else {
            char v97 = 0;
          }
          v24[6] = v96;
          v24[7] = v97;
          v24 += 8;
          --v54;
        }
        while (v54);
        unint64_t v11 = v170;
        unint64_t v10 = a1;
        uint64_t v13 = v168;
      }
      if (v10)
      {
        int v98 = *v27 - 128;
        int v99 = *v26 - 128;
        int v100 = *v28;
        int v101 = -5391 * v98 - 18721 * v99;
        int v102 = 61650 * v98;
        int v103 = 48320 * v99;
        int v104 = v103 + (v100 << 15);
        int v105 = v104 >> 15;
        if (v104 >> 15 >= 255) {
          LOBYTE(v105) = -1;
        }
        if (v104 >= 0) {
          char v106 = v105;
        }
        else {
          char v106 = 0;
        }
        int v107 = v101 + (v100 << 15);
        int v108 = v107 >> 15;
        if (v107 >> 15 >= 255) {
          LOBYTE(v108) = -1;
        }
        if (v107 >= 0) {
          char v109 = v108;
        }
        else {
          char v109 = 0;
        }
        int v110 = v102 + (v100 << 15);
        int v111 = v110 >> 15;
        if (v110 >> 15 >= 255) {
          LOBYTE(v111) = -1;
        }
        if (v110 >= 0) {
          char v112 = v111;
        }
        else {
          char v112 = 0;
        }
        *uint64_t v25 = -1;
        v25[1] = v106;
        v25[2] = v109;
        v25[3] = v112;
        int v113 = *v23;
        int v114 = v103 + (v113 << 15);
        int v115 = v114 >> 15;
        if (v114 >> 15 >= 255) {
          LOBYTE(v115) = -1;
        }
        if (v114 >= 0) {
          char v116 = v115;
        }
        else {
          char v116 = 0;
        }
        int v117 = v101 + (v113 << 15);
        int v118 = v117 >> 15;
        if (v117 >> 15 >= 255) {
          LOBYTE(v118) = -1;
        }
        if (v117 >= 0) {
          char v119 = v118;
        }
        else {
          char v119 = 0;
        }
        int v120 = v102 + (v113 << 15);
        int v121 = v120 >> 15;
        if (v120 >> 15 >= 255) {
          LOBYTE(v121) = -1;
        }
        *uint64_t v24 = -1;
        v24[1] = v116;
        if (v120 >= 0) {
          char v122 = v121;
        }
        else {
          char v122 = 0;
        }
        v24[2] = v119;
        v24[3] = v122;
      }
      v6 += v173;
      v7 += v13;
      v8 += v13;
      v9 += v172;
      ++v12;
      v16 += v173;
    }
    while (v12 != v175);
  }
  else
  {
    unint64_t v10 = a1;
    unint64_t v11 = a1 >> 1;
  }
  if (v165)
  {
    if (v10 >= 2)
    {
      if (v11 <= 1) {
        uint64_t v123 = 1;
      }
      else {
        uint64_t v123 = v11;
      }
      do
      {
        int v124 = *v7;
        v7 += 2;
        int v125 = v124 - 128;
        int v126 = *v8;
        v8 += 2;
        int v127 = *v6;
        int v128 = v6[1];
        v6 += 2;
        int v129 = -5391 * v125 - 18721 * (v126 - 128);
        int v130 = 61650 * v125;
        int v131 = 48320 * (v126 - 128);
        int v132 = v131 + (v127 << 15);
        int v133 = v132 >> 15;
        if (v132 >> 15 >= 255) {
          LOBYTE(v133) = -1;
        }
        if (v132 >= 0) {
          char v134 = v133;
        }
        else {
          char v134 = 0;
        }
        int v135 = v129 + (v127 << 15);
        int v136 = v135 >> 15;
        if (v135 >> 15 >= 255) {
          LOBYTE(v136) = -1;
        }
        if (v135 >= 0) {
          char v137 = v136;
        }
        else {
          char v137 = 0;
        }
        int v138 = v130 + (v127 << 15);
        int v139 = v138 >> 15;
        if (v138 >> 15 >= 255) {
          LOBYTE(v139) = -1;
        }
        if (v138 >= 0) {
          char v140 = v139;
        }
        else {
          char v140 = 0;
        }
        int v141 = v131 + (v128 << 15);
        int v142 = v141 >> 15;
        if (v141 >> 15 >= 255) {
          LOBYTE(v142) = -1;
        }
        if (v141 >= 0) {
          char v143 = v142;
        }
        else {
          char v143 = 0;
        }
        int v144 = v129 + (v128 << 15);
        int v145 = v144 >> 15;
        if (v144 >> 15 >= 255) {
          LOBYTE(v145) = -1;
        }
        if (v144 >= 0) {
          char v146 = v145;
        }
        else {
          char v146 = 0;
        }
        int v147 = v130 + (v128 << 15);
        int v148 = v147 >> 15;
        *unint64_t v9 = -1;
        v9[1] = v134;
        if (v147 >> 15 >= 255) {
          LOBYTE(v148) = -1;
        }
        v9[2] = v137;
        v9[3] = v140;
        v9[4] = -1;
        v9[5] = v143;
        if (v147 >= 0) {
          char v149 = v148;
        }
        else {
          char v149 = 0;
        }
        v9[6] = v146;
        v9[7] = v149;
        v9 += 8;
        --v123;
      }
      while (v123);
      LOBYTE(v10) = a1;
    }
    if (v10)
    {
      int v150 = *v7 - 128;
      int v151 = *v8 - 128;
      int v152 = *v6;
      int v153 = -5391 * v150 - 18721 * v151;
      int v154 = 61650 * v150;
      int v155 = 48320 * v151 + (v152 << 15);
      int v156 = v155 >> 15;
      if (v155 >> 15 >= 255) {
        LOBYTE(v156) = -1;
      }
      if (v155 >= 0) {
        char v157 = v156;
      }
      else {
        char v157 = 0;
      }
      int v158 = v153 + (v152 << 15);
      int v159 = v158 >> 15;
      if (v158 >> 15 >= 255) {
        LOBYTE(v159) = -1;
      }
      if (v158 >= 0) {
        char v160 = v159;
      }
      else {
        char v160 = 0;
      }
      int v161 = v154 + (v152 << 15);
      int v162 = v161 >> 15;
      if (v161 >> 15 >= 255) {
        LOBYTE(v162) = -1;
      }
      *unint64_t v9 = -1;
      v9[1] = v157;
      if (v161 >= 0) {
        char v163 = v162;
      }
      else {
        char v163 = 0;
      }
      v9[2] = v160;
      v9[3] = v163;
    }
  }
  return 0;
}

uint64_t vt_Copy_420fITU2020F_24RGB_vec(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, char **a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v8 = v7 + 1;
  unint64_t v9 = *a6;
  unint64_t v148 = a1;
  char v143 = a2;
  if (a2 >= 2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a3[1];
    uint64_t v13 = *a5;
    unint64_t v152 = a2 >> 1;
    unint64_t v151 = 4 * (a1 >> 3);
    uint64_t v150 = 2 * *a3;
    uint64_t v149 = 2 * *a5;
    if (a1 >> 3 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = a1 >> 3;
    }
    uint64_t v146 = a3[1];
    uint64_t v147 = *a3;
    uint64_t v15 = &v6[*a3];
    uint64_t v144 = (a1 >> 1) - 4 * (a1 >> 3);
    uint64_t v145 = v14;
    v16.i64[0] = 0xFF000000FFLL;
    v16.i64[1] = 0xFF000000FFLL;
    v17.i64[0] = 0x7F0000007FLL;
    v17.i64[1] = 0x7F0000007FLL;
    int32x4_t v18 = vdupq_n_s32(0xFFFFEAF1);
    int32x4_t v19 = vdupq_n_s32(0xFFFFB6DF);
    int32x4_t v20 = vdupq_n_s32(0xF0D2u);
    int32x4_t v21 = vdupq_n_s32(0xBCC0u);
    unint64_t v10 = a1 >> 1;
    do
    {
      if (a1 >= 8)
      {
        uint64_t v28 = 0;
        uint64_t v29 = v145;
        uint64_t v24 = v9;
        do
        {
          int8x8_t v30 = *(int8x8_t *)&v7[v28];
          uint16x8_t v31 = &v24[v13];
          int32x4_t v32 = (int32x4_t)vaddw_u16(v17, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp1_s8(v30, (int8x8_t)0xFF000000FFLL)));
          int32x4_t v33 = (int32x4_t)vaddw_u16(v17, (uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vuzp2_s8(v30, (int8x8_t)0xFF000000FFLL)));
          int32x4_t v34 = vmlaq_s32(vmulq_s32(v32, v18), v33, v19);
          int32x4_t v35 = vmulq_s32(v32, v20);
          int32x4_t v36 = vmulq_s32(v33, v21);
          int32x4_t v37 = vzip1q_s32(v35, v35);
          int32x4_t v38 = vzip2q_s32(v35, v35);
          int32x4_t v39 = vzip1q_s32(v36, v36);
          int32x4_t v40 = vzip2q_s32(v36, v36);
          int32x4_t v41 = vzip1q_s32(v34, v34);
          uint16x8_t v42 = vmovl_u8(*(uint8x8_t *)&v6[v28]);
          uint16x8_t v43 = vmovl_u8(*(uint8x8_t *)&v15[v28]);
          int32x4_t v44 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v42.i8, 0xFuLL);
          int32x4_t v45 = (int32x4_t)vshll_high_n_u16(v42, 0xFuLL);
          int32x4_t v46 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v43.i8, 0xFuLL);
          int32x4_t v47 = vzip2q_s32(v34, v34);
          int32x4_t v48 = (int32x4_t)vshll_high_n_u16(v43, 0xFuLL);
          v154.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v44), 0xFuLL), vaddq_s32(v40, v45), 0xFuLL));
          v154.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v44), 0xFuLL), vaddq_s32(v47, v45), 0xFuLL));
          v153.val[0] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v39, v46), 0xFuLL), vaddq_s32(v40, v48), 0xFuLL));
          v154.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v37, v44), 0xFuLL), vaddq_s32(v38, v45), 0xFuLL));
          v153.val[1] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v41, v46), 0xFuLL), vaddq_s32(v47, v48), 0xFuLL));
          vst3_s8(v24, v154);
          v24 += 24;
          v153.val[2] = vqmovun_s16(vshrn_high_n_s32(vshrn_n_s32(vaddq_s32(v37, v46), 0xFuLL), vaddq_s32(v38, v48), 0xFuLL));
          vst3_s8(v31, v153);
          v28 += 8;
          --v29;
        }
        while (v29);
        uint32x4_t v27 = &v6[v28];
        uint64_t v22 = &v15[v28];
        int32x4_t v26 = &v7[v28];
        uint64_t v25 = &v7[v28 + 1];
        unint64_t v23 = &v24[v13];
      }
      else
      {
        uint64_t v22 = &v6[v147];
        unint64_t v23 = &v9[v13];
        uint64_t v24 = v9;
        uint64_t v25 = v8;
        int32x4_t v26 = v7;
        uint32x4_t v27 = v6;
      }
      if (v10 > v151)
      {
        unint64_t v49 = v10;
        uint64_t v50 = v144;
        do
        {
          int v52 = *v26;
          v26 += 2;
          int v51 = v52;
          int v53 = *v25;
          v25 += 2;
          v51 -= 128;
          int v54 = *v27;
          int v55 = v27[1];
          v27 += 2;
          unsigned int v56 = v54 << 15;
          int v57 = -5391 * v51 - 18721 * (v53 - 128);
          int v58 = 61650 * v51;
          int v59 = 48320 * (v53 - 128);
          __int32 v60 = v55 << 15;
          int v61 = v57 + (v55 << 15);
          int v62 = v61 >> 15;
          if (v61 >> 15 >= 255) {
            LOBYTE(v62) = -1;
          }
          BOOL v63 = v61 < 0;
          int v64 = v58 + (v55 << 15);
          int v65 = v64 >> 15;
          if (v63) {
            LOBYTE(v62) = 0;
          }
          v66.i32[0] = v59;
          v67.i64[0] = __PAIR64__(v56, v59);
          if (v65 >= 255) {
            LOBYTE(v65) = -1;
          }
          int32x4_t v68 = vdupq_lane_s32((int32x2_t)__PAIR64__(v56, v59), 1);
          v67.i64[1] = __PAIR64__(v59, v58);
          v68.i32[1] = v57;
          v68.i32[3] = v60;
          int32x4_t v69 = vaddq_s32(v67, v68);
          int8x8_t v70 = (int8x8_t)vmovn_s32(vcltzq_s32(v69));
          int16x8_t v71 = (int16x8_t)vminq_s32(vshrq_n_s32(v69, 0xFuLL), v16);
          *(int16x4_t *)v71.i8 = vmovn_s32((int32x4_t)v71);
          if (v64 >= 0) {
            char v72 = v65;
          }
          else {
            char v72 = 0;
          }
          *(int8x8_t *)v71.i8 = vbic_s8(*(int8x8_t *)v71.i8, v70);
          *(_DWORD *)uint64_t v24 = vmovn_s16(v71).u32[0];
          v24[4] = v62;
          v24[5] = v72;
          v24 += 6;
          int v73 = v22[1];
          __int32 v74 = v73 << 15;
          int v75 = v57 + (v73 << 15);
          int v76 = v75 >> 15;
          if (v75 >> 15 >= 255) {
            LOBYTE(v76) = -1;
          }
          int v77 = v58 + (v73 << 15);
          if (v75 < 0) {
            LOBYTE(v76) = 0;
          }
          v66.i32[1] = *v22 << 15;
          int32x4_t v78 = vdupq_lane_s32(*(int32x2_t *)v66.i8, 1);
          if (v77 >> 15 >= 255) {
            char v79 = -1;
          }
          else {
            char v79 = v77 >> 15;
          }
          v66.i64[1] = __PAIR64__(v59, v58);
          v78.i32[1] = v57;
          v78.i32[3] = v74;
          int32x4_t v80 = vaddq_s32(v66, v78);
          int8x8_t v81 = (int8x8_t)vmovn_s32(vcltzq_s32(v80));
          int16x8_t v82 = (int16x8_t)vminq_s32(vshrq_n_s32(v80, 0xFuLL), v16);
          *(int8x8_t *)v82.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v82), v81);
          v22 += 2;
          *(_DWORD *)unint64_t v23 = vmovn_s16(v82).u32[0];
          if (v77 < 0) {
            char v79 = 0;
          }
          v23[4] = v76;
          v23[5] = v79;
          v23 += 6;
          --v50;
        }
        while (v50);
        a1 = v148;
        unint64_t v10 = v49;
        uint64_t v12 = v146;
      }
      if (a1)
      {
        int v83 = *v26 - 128;
        int v84 = *v25 - 128;
        int v85 = *v27;
        int v86 = -5391 * v83 - 18721 * v84;
        int v87 = 61650 * v83;
        int v88 = 48320 * v84;
        int v89 = v88 + (v85 << 15);
        int v90 = v89 >> 15;
        if (v89 >> 15 >= 255) {
          LOBYTE(v90) = -1;
        }
        if (v89 >= 0) {
          char v91 = v90;
        }
        else {
          char v91 = 0;
        }
        int v92 = v86 + (v85 << 15);
        int v93 = v92 >> 15;
        if (v92 >> 15 >= 255) {
          LOBYTE(v93) = -1;
        }
        if (v92 >= 0) {
          char v94 = v93;
        }
        else {
          char v94 = 0;
        }
        int v95 = v87 + (v85 << 15);
        int v96 = v95 >> 15;
        if (v95 >> 15 >= 255) {
          LOBYTE(v96) = -1;
        }
        if (v95 >= 0) {
          char v97 = v96;
        }
        else {
          char v97 = 0;
        }
        *uint64_t v24 = v91;
        v24[1] = v94;
        v24[2] = v97;
        int v98 = *v22;
        int v99 = v88 + (v98 << 15);
        int v100 = v99 >> 15;
        if (v99 >> 15 >= 255) {
          LOBYTE(v100) = -1;
        }
        if (v99 >= 0) {
          char v101 = v100;
        }
        else {
          char v101 = 0;
        }
        int v102 = v86 + (v98 << 15);
        int v103 = v102 >> 15;
        if (v102 >> 15 >= 255) {
          LOBYTE(v103) = -1;
        }
        if (v102 >= 0) {
          char v104 = v103;
        }
        else {
          char v104 = 0;
        }
        int v105 = v87 + (v98 << 15);
        int v106 = v105 >> 15;
        if (v105 >> 15 >= 255) {
          LOBYTE(v106) = -1;
        }
        *unint64_t v23 = v101;
        if (v105 >= 0) {
          char v107 = v106;
        }
        else {
          char v107 = 0;
        }
        v23[1] = v104;
        v23[2] = v107;
      }
      v6 += v150;
      v7 += v12;
      v8 += v12;
      v9 += v149;
      ++v11;
      v15 += v150;
    }
    while (v11 != v152);
  }
  else
  {
    unint64_t v10 = a1 >> 1;
  }
  if (v143)
  {
    if (a1 >= 2)
    {
      if (v10 <= 1) {
        uint64_t v108 = 1;
      }
      else {
        uint64_t v108 = v10;
      }
      v109.i64[0] = 0xFF000000FFLL;
      v109.i64[1] = 0xFF000000FFLL;
      do
      {
        int v110 = *v7;
        v7 += 2;
        int v111 = v110 - 128;
        int v112 = *v8;
        v8 += 2;
        int v113 = v6[1];
        int v114 = -5391 * v111;
        int v115 = 61650 * v111;
        __int32 v116 = v114 - 18721 * (v112 - 128);
        int v117 = 48320 * (v112 - 128);
        unsigned int v118 = v113 << 15;
        int v119 = v116 + (v113 << 15);
        int v120 = v119 >> 15;
        if (v119 >> 15 >= 255) {
          LOBYTE(v120) = -1;
        }
        if (v119 >= 0) {
          char v121 = v120;
        }
        else {
          char v121 = 0;
        }
        int v122 = v115 + (v113 << 15);
        v123.i32[0] = v117;
        v123.i32[1] = *v6 << 15;
        v123.i32[2] = v115;
        if (v122 >> 15 >= 255) {
          char v124 = -1;
        }
        else {
          char v124 = v122 >> 15;
        }
        v125.i32[1] = v116;
        v125.i64[1] = __PAIR64__(v118, *v6 << 15);
        v123.i32[3] = v117;
        v125.i32[0] = *v6 << 15;
        int32x4_t v126 = vaddq_s32(v123, v125);
        *(int16x4_t *)v125.i8 = vmovn_s32(vcltzq_s32(v126));
        int16x8_t v127 = (int16x8_t)vminq_s32(vshrq_n_s32(v126, 0xFuLL), v109);
        *(int8x8_t *)v127.i8 = vbic_s8((int8x8_t)vmovn_s32((int32x4_t)v127), *(int8x8_t *)v125.i8);
        v6 += 2;
        *(_DWORD *)unint64_t v9 = vmovn_s16(v127).u32[0];
        if (v122 < 0) {
          char v124 = 0;
        }
        v9[4] = v121;
        v9[5] = v124;
        v9 += 6;
        --v108;
      }
      while (v108);
      LOBYTE(a1) = v148;
    }
    if (a1)
    {
      int v128 = *v7 - 128;
      int v129 = *v8 - 128;
      int v130 = *v6;
      int v131 = -5391 * v128 - 18721 * v129;
      int v132 = 61650 * v128;
      int v133 = 48320 * v129 + (v130 << 15);
      int v134 = v133 >> 15;
      if (v133 >> 15 >= 255) {
        LOBYTE(v134) = -1;
      }
      if (v133 >= 0) {
        char v135 = v134;
      }
      else {
        char v135 = 0;
      }
      int v136 = v131 + (v130 << 15);
      int v137 = v136 >> 15;
      if (v136 >> 15 >= 255) {
        LOBYTE(v137) = -1;
      }
      if (v136 >= 0) {
        char v138 = v137;
      }
      else {
        char v138 = 0;
      }
      int v139 = v132 + (v130 << 15);
      int v140 = v139 >> 15;
      if (v139 >> 15 >= 255) {
        LOBYTE(v140) = -1;
      }
      *unint64_t v9 = v135;
      if (v139 >= 0) {
        char v141 = v140;
      }
      else {
        char v141 = 0;
      }
      v9[1] = v138;
      v9[2] = v141;
    }
  }
  return 0;
}

BOOL VTRequiresMatrixChange(uint64_t a1, int a2, uint64_t a3, int a4)
{
  BOOL result = 0;
  if (a2)
  {
    if (a4) {
      return FigCFEqual() == 0;
    }
  }
  return result;
}

uint64_t VTCreateYCbCrCFStringsAndProvideDefaultsFromColorSpaceHint(unint64_t cf, int a2, unint64_t a3, int a4, CGColorSpace *a5, CGColorSpace *a6, void *a7, void *a8)
{
  if (cf) {
    CFTypeRef v16 = CFRetain((CFTypeRef)cf);
  }
  else {
    CFTypeRef v16 = 0;
  }
  int32x4_t v21 = v16;
  if (a3) {
    CFTypeRef v17 = CFRetain((CFTypeRef)a3);
  }
  else {
    CFTypeRef v17 = 0;
  }
  CFTypeRef cfa = v17;
  if (!a7 || !a8)
  {
    uint64_t v18 = FigSignalErrorAt();
    if (!v16) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (!(cf | a3))
  {
    if (!a2 || a4)
    {
      if (!a2 && a4)
      {
        _createBestGuessYCbCrCFStringFromColorSpace(a6, &cfa);
        CFTypeRef v17 = cfa;
      }
    }
    else
    {
      _createBestGuessYCbCrCFStringFromColorSpace(a5, &v21);
      CFTypeRef v16 = v21;
    }
  }
  uint64_t v18 = VTCreateYCbCrCFStringsAndProvideDefaults(v16, a2, v17, a4, a7, a8);
  CFTypeRef v16 = v21;
  if (v21) {
LABEL_14:
  }
    CFRelease(v16);
LABEL_15:
  if (cfa) {
    CFRelease(cfa);
  }
  return v18;
}

void _createBestGuessYCbCrCFStringFromColorSpace(CGColorSpace *a1, const void **a2)
{
  CFTypeRef cf = 0;
  if (a2)
  {
    if (a1)
    {
      CFStringRef Name = CGColorSpaceGetName(a1);
      VTGetDefaultColorAttributesWithHints(0, (uint64_t)Name, 0, 0, 0, 0, &cf);
      CFIndex v4 = *a2;
      CFTypeRef v5 = cf;
      *a2 = cf;
      if (v5) {
        CFRetain(v5);
      }
      if (v4) {
        CFRelease(v4);
      }
    }
    else
    {
      *a2 = 0;
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t VTCreateYCbCrCFStringsAndProvideDefaults(CFTypeRef cf, int a2, const void *a3, int a4, void *a5, void *a6)
{
  if (cf)
  {
    uint64_t v12 = CFRetain(cf);
    if (a3) {
      goto LABEL_3;
    }
LABEL_6:
    CFTypeRef v13 = 0;
    if (!a5) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  uint64_t v12 = 0;
  if (!a3) {
    goto LABEL_6;
  }
LABEL_3:
  CFTypeRef v13 = CFRetain(a3);
  if (!a5) {
    goto LABEL_13;
  }
LABEL_7:
  if (a6)
  {
    if (a2)
    {
      if (!cf)
      {
        if (a3)
        {
          uint64_t v12 = CFRetain(a3);
          if (!a4)
          {
LABEL_26:
            if (v13)
            {
              CFRelease(v13);
              CFTypeRef v13 = 0;
            }
            goto LABEL_28;
          }
        }
        else if (!a4)
        {
          uint64_t v12 = (const void *)VTGetDefaultYCbCrMatrixWithNoHints();
          goto LABEL_26;
        }
        goto LABEL_28;
      }
    }
    else if (v12)
    {
      CFRelease(v12);
      uint64_t v12 = 0;
    }
    if (!a4) {
      goto LABEL_26;
    }
    if (!a3)
    {
      if (cf)
      {
        uint64_t v15 = (uint64_t)CFRetain(cf);
      }
      else
      {
        if (a2) {
          goto LABEL_28;
        }
        uint64_t v15 = VTGetDefaultYCbCrMatrixWithNoHints();
      }
      CFTypeRef v13 = (CFTypeRef)v15;
    }
LABEL_28:
    uint64_t v14 = 0;
    *a5 = v12;
    *a6 = v13;
    return v14;
  }
LABEL_13:
  uint64_t v14 = FigSignalErrorAt();
  if (v12) {
    CFRelease(v12);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v14;
}

uint64_t VTConvertToSessionPropertiesFromCVProperties(const __CFDictionary *a1, __CFDictionary *a2)
{
  CFStringRef Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24A90]);
  CFTypeRef v5 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24BC8]);
  unint64_t v6 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24B70]);
  uint64_t v7 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24C18]);
  if (Value) {
    CFDictionarySetValue(a2, @"DestinationColorPrimaries", Value);
  }
  else {
    CFDictionaryRemoveValue(a2, @"DestinationColorPrimaries");
  }
  if (v5) {
    CFDictionarySetValue(a2, @"DestinationTransferFunction", v5);
  }
  else {
    CFDictionaryRemoveValue(a2, @"DestinationTransferFunction");
  }
  if (v6) {
    CFDictionarySetValue(a2, @"DestinationICCProfile", v6);
  }
  else {
    CFDictionaryRemoveValue(a2, @"DestinationICCProfile");
  }
  if (v7) {
    CFDictionarySetValue(a2, @"DestinationYCbCrMatrix", v7);
  }
  else {
    CFDictionaryRemoveValue(a2, @"DestinationYCbCrMatrix");
  }
  return 0;
}

uint64_t VTGetBitsPerComponentFromPixelFormatType(int a1)
{
  if (CVPixelFormatDescriptionGetDescriptionWithPixelFormatType())
  {
    if (a1 == 1380410945)
    {
      return 32;
    }
    else
    {
      FigCFDictionaryGetInt32IfPresent();
      return 0;
    }
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t VTCreateColorAttachments(unint64_t a1, unint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6, int a7, unint64_t a8, unint64_t a9, const void *a10, const void *a11, uint64_t a12, const void *a13, int a14, char a15, __CFDictionary **a16, __CFDictionary **a17)
{
  if (a3) {
    BOOL v17 = a4 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  int v18 = !v17;
  if (a1 | a2) {
    int v19 = 1;
  }
  else {
    int v19 = v18;
  }
  if (a10) {
    BOOL v20 = a11 == 0;
  }
  else {
    BOOL v20 = 1;
  }
  int v21 = !v20;
  if (a8 | a9) {
    int v22 = 1;
  }
  else {
    int v22 = v21;
  }
  int v73 = v22;
  if (a16) {
    BOOL v23 = a17 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (!v23)
  {
    int32x4_t v26 = a4;
    BOOL v68 = (a1 | a2) != 0;
    uint64_t v28 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    uint64_t v29 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint16x8_t v31 = CFDictionaryCreateMutable(0, 0, v28, v29);
    int32x4_t v32 = (const void **)MEMORY[0x1E4F24C18];
    if (a6) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24C18], a6);
    }
    if (a13) {
      CFDictionarySetValue(v31, *v32, a13);
    }
    if (v26 && a5)
    {
      FigSignalErrorAt();
      int32x4_t v26 = 0;
    }
    if (!a11 && !v26 && a3 && a5 && (!a10 || FigCFEqual()))
    {
      int32x4_t v33 = (const void *)*MEMORY[0x1E4F24A90];
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24A90], a3);
      int32x4_t v34 = (const void *)*MEMORY[0x1E4F24B78];
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24B78], a5);
      CFDictionarySetValue(v31, v33, a3);
      CFDictionarySetValue(v31, v34, a5);
    }
    if ((v19 | v73) != 1)
    {
      CGColorSpaceRef v38 = 0;
      CGColorSpaceRef v39 = 0;
      int32x4_t v41 = a16;
      int32x4_t v40 = a17;
      goto LABEL_53;
    }
    if (!v19)
    {
      CGColorSpaceRef v38 = 0;
      CGColorSpaceRef v39 = 0;
      int32x4_t v41 = a16;
      int32x4_t v40 = a17;
      int v42 = a7;
      goto LABEL_45;
    }
    if (FigCFEqual())
    {
      BOOL v35 = 1;
      int32x4_t v36 = (CGColorSpace *)a1;
    }
    else
    {
      int v47 = FigCFEqual();
      BOOL v35 = v47 != 0;
      int32x4_t v36 = (CGColorSpace *)a1;
      if (!v47 && a1)
      {
        CFTypeID v48 = CFGetTypeID((CFTypeRef)a1);
        BOOL v35 = v48 == CGColorSpaceGetTypeID() && CGColorSpaceUsesITUR_2100TF((CGColorSpaceRef)a1);
      }
    }
    if (FigCFEqual())
    {
      BOOL v37 = 1;
    }
    else
    {
      int v49 = FigCFEqual();
      BOOL v37 = v49 != 0;
      if (!v49 && a8)
      {
        BOOL v50 = v35;
        CFTypeID v51 = CFGetTypeID((CFTypeRef)a8);
        BOOL v37 = v51 == CGColorSpaceGetTypeID() && CGColorSpaceUsesITUR_2100TF((CGColorSpaceRef)a8);
        int32x4_t v36 = (CGColorSpace *)a1;
        BOOL v35 = v50;
      }
    }
    if (v36)
    {
      if (FigCFEqual() && (FigCFEqual() ? (BOOL v52 = v37) : (BOOL v52 = 0), v52)) {
        CGColorSpaceRef v38 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC58]);
      }
      else {
        CGColorSpaceRef v38 = 0;
      }
      if (v38) {
        CGColorSpaceRef v53 = v38;
      }
      else {
        CGColorSpaceRef v53 = v36;
      }
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24A00], v53);
      goto LABEL_91;
    }
    int v54 = (const void *)a2;
    if (a2)
    {
      int v55 = (const void *)*MEMORY[0x1E4F24B70];
      unsigned int v56 = Mutable;
    }
    else
    {
      CGColorSpaceRef v38 = 0;
      if (!a3 || !v26) {
        goto LABEL_91;
      }
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24A90], a3);
      int v55 = (const void *)*MEMORY[0x1E4F24BC8];
      unsigned int v56 = Mutable;
      int v54 = v26;
    }
    CFDictionarySetValue(v56, v55, v54);
    CGColorSpaceRef v38 = 0;
LABEL_91:
    if (v73)
    {
      if (a8)
      {
        BOOL v57 = v35;
        int32x4_t v41 = a16;
        int32x4_t v40 = a17;
        int v43 = a14;
        if (FigCFEqual())
        {
          if (FigCFEqual()) {
            BOOL v58 = v57;
          }
          else {
            BOOL v58 = 0;
          }
          int v42 = a7;
          if (v58) {
            CGColorSpaceRef v39 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC58]);
          }
          else {
            CGColorSpaceRef v39 = 0;
          }
        }
        else
        {
          CGColorSpaceRef v39 = 0;
          int v42 = a7;
        }
        if (v39) {
          CGColorSpaceRef v67 = v39;
        }
        else {
          CGColorSpaceRef v67 = (CGColorSpaceRef)a8;
        }
        CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E4F24A00], v67);
LABEL_46:
        BOOL v44 = v42 == 1651521076 || v42 == 1647392369;
        if (v44 && v43 == 1380411457) {
          CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E4F24BC0], (const void *)*MEMORY[0x1E4F1CFD0]);
        }
LABEL_53:
        uint64_t v45 = 0;
        *int32x4_t v41 = Mutable;
        *int32x4_t v40 = v31;
        CFMutableDictionaryRef Mutable = 0;
        uint16x8_t v31 = 0;
        if (!v38)
        {
LABEL_55:
          if (v39) {
            CFRelease(v39);
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (v31) {
            CFRelease(v31);
          }
          return v45;
        }
LABEL_54:
        CFRelease(v38);
        goto LABEL_55;
      }
      int32x4_t v41 = a16;
      int32x4_t v40 = a17;
      int v43 = a14;
      int v64 = (const void *)a9;
      if (a9)
      {
        int v65 = (const void *)*MEMORY[0x1E4F24B70];
        int32x4_t v66 = v31;
      }
      else
      {
        CGColorSpaceRef v39 = 0;
        if (!a10 || !a11) {
          goto LABEL_132;
        }
        CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E4F24A90], a10);
        int v65 = (const void *)*MEMORY[0x1E4F24BC8];
        int32x4_t v66 = v31;
        int v64 = a11;
      }
      CFDictionarySetValue(v66, v65, v64);
      CGColorSpaceRef v39 = 0;
LABEL_132:
      int v42 = a7;
      goto LABEL_46;
    }
    if (a15)
    {
      if (!a7 || !a14)
      {
        uint64_t v45 = FigSignalErrorAt();
        CGColorSpaceRef v39 = 0;
        if (!v38) {
          goto LABEL_55;
        }
        goto LABEL_54;
      }
      int v59 = VTGetBitsPerComponentFromPixelFormatType(a7);
      int v60 = VTGetBitsPerComponentFromPixelFormatType(a14);
      BOOL v61 = v59 > 9 && v35;
      int32x4_t v36 = (CGColorSpace *)a1;
      if (v61 && v60 <= 9)
      {
        CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E4F24A90], (const void *)*MEMORY[0x1E4F24AB0]);
        CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E4F24BC8], (const void *)*MEMORY[0x1E4F24BE0]);
        int v43 = a14;
        int v42 = a7;
        if (CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()) {
          FigCFDictionaryGetBooleanIfPresent();
        }
        else {
          FigSignalErrorAt();
        }
        CGColorSpaceRef v39 = 0;
        int32x4_t v41 = a16;
        int32x4_t v40 = a17;
        goto LABEL_46;
      }
    }
    int v42 = a7;
    if (v68)
    {
      if (v36) {
        int v62 = v36;
      }
      else {
        int v62 = (const void *)a2;
      }
      BOOL v63 = (const void **)MEMORY[0x1E4F24A00];
      if (!v36) {
        BOOL v63 = (const void **)MEMORY[0x1E4F24B70];
      }
      CFDictionarySetValue(v31, *v63, v62);
    }
    CGColorSpaceRef v39 = 0;
    int32x4_t v41 = a16;
    int32x4_t v40 = a17;
    if (a3 && v26)
    {
      CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E4F24A90], a3);
      CFDictionarySetValue(v31, (const void *)*MEMORY[0x1E4F24BC8], v26);
      CGColorSpaceRef v39 = 0;
    }
LABEL_45:
    int v43 = a14;
    goto LABEL_46;
  }

  return FigSignalErrorAt();
}

uint64_t VTDoColorDictionariesMatch(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CFTypeRef v4 = 0;
  CFTypeRef cf = 0;
  uint64_t v2 = 1;
  if (a1 && a2)
  {
    VTCreateColorSpacesFromDictionaries(a1, a2, &cf, &v4);
    uint64_t v2 = FigCFEqual();
    if (cf) {
      CFRelease(cf);
    }
    if (v4) {
      CFRelease(v4);
    }
  }
  return v2;
}

uint64_t VTCreateColorSpacesFromDictionaries(CFDictionaryRef theDict, CFDictionaryRef MutableCopy, void *a3, void *a4)
{
  uint64_t result = 4294954394;
  if (!a3 || !a4) {
    return result;
  }
  uint64_t v7 = (const void **)MEMORY[0x1E4F24A00];
  uint64_t v8 = (const void **)MEMORY[0x1E4F24B70];
  unint64_t v9 = (const void **)MEMORY[0x1E4F24A90];
  unint64_t v10 = (const void **)MEMORY[0x1E4F24BC8];
  if (theDict)
  {
    CFStringRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F24A00]);
    if (Value) {
      uint64_t v12 = (void *)CFRetain(Value);
    }
    else {
      uint64_t v12 = 0;
    }
    CFTypeRef v13 = CFDictionaryGetValue(theDict, *v8);
    int v43 = CFDictionaryGetValue(theDict, *v9);
    uint64_t v14 = CFDictionaryGetValue(theDict, *v10);
    uint64_t v15 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F24B78]);
  }
  else
  {
    uint64_t v12 = 0;
    CFTypeRef v13 = 0;
    int v43 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  int32x4_t v40 = v15;
  if (!MutableCopy)
  {
    BOOL v17 = 0;
    int v18 = 0;
    int v42 = 0;
    int v19 = 0;
    BOOL v20 = 0;
    BOOL v21 = v12 != 0;
    BOOL v41 = 1;
    goto LABEL_22;
  }
  CFTypeRef v16 = CFDictionaryGetValue(MutableCopy, *v7);
  if (v16) {
    BOOL v17 = (void *)CFRetain(v16);
  }
  else {
    BOOL v17 = 0;
  }
  int v22 = CFDictionaryGetValue(MutableCopy, *v8);
  int v18 = CFDictionaryGetValue(MutableCopy, *v9);
  int v42 = CFDictionaryGetValue(MutableCopy, *v10);
  int v19 = CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24B78]);
  BOOL v21 = v12 != 0;
  BOOL v41 = v17 != 0;
  if (!v12 || !v17 || !FigCFEqual())
  {
    if (v13 && v22 && FigCFEqual())
    {
LABEL_40:
      CFDictionaryRef v24 = 0;
      CFDictionaryRef v23 = 0;
      goto LABEL_79;
    }
    BOOL v20 = v17 != 0;
LABEL_22:
    if (v43) {
      BOOL v25 = v18 == 0;
    }
    else {
      BOOL v25 = 1;
    }
    int v26 = !v25;
    if (!v25 && v14 && v42 && FigCFEqual() && FigCFEqual()) {
      goto LABEL_40;
    }
    int v27 = v40 ? v26 : 0;
    if (v27 == 1 && v19 && FigCFEqual() && FigCFEqual()) {
      goto LABEL_40;
    }
    if (theDict) {
      char v28 = v21;
    }
    else {
      char v28 = 1;
    }
    uint64_t v29 = (const void **)MEMORY[0x1E4F24C18];
    if (v28)
    {
      CFDictionaryRef v24 = 0;
      goto LABEL_63;
    }
    int8x8_t v30 = (const void *)*MEMORY[0x1E4F24C18];
    if (CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F24C18]))
    {
      CFDictionaryRef v24 = 0;
    }
    else
    {
      CFDictionaryRef theDict = (CFDictionaryRef)FigCFDictionaryCreateMutableCopy();
      CFDictionarySetValue(theDict, v30, (const void *)*MEMORY[0x1E4F1D260]);
      CFDictionaryRef v24 = theDict;
    }
    if (!FigCFEqual())
    {
      int v32 = FigCFEqual();
      if (v32) {
        BOOL v33 = 0;
      }
      else {
        BOOL v33 = v20;
      }
      if (v33)
      {
        CFTypeID v34 = CFGetTypeID(v17);
        if (v34 != CGColorSpaceGetTypeID() || !CGColorSpaceUsesITUR_2100TF((CGColorSpaceRef)v17)) {
          goto LABEL_61;
        }
      }
      else if (!v32)
      {
        goto LABEL_61;
      }
    }
    if (FigCFEqual() && FigCFEqual())
    {
      CGColorSpaceRef v31 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC58]);
LABEL_62:
      uint64_t v12 = v31;
LABEL_63:
      if (v41)
      {
        CFDictionaryRef v23 = 0;
      }
      else
      {
        BOOL v35 = *v29;
        if (CFDictionaryGetValue(MutableCopy, *v29))
        {
          CFDictionaryRef v23 = 0;
        }
        else
        {
          uint64_t MutableCopy = (CFDictionaryRef)FigCFDictionaryCreateMutableCopy();
          CFDictionarySetValue(MutableCopy, v35, (const void *)*MEMORY[0x1E4F1D260]);
          CFDictionaryRef v23 = MutableCopy;
        }
        if ((FigCFEqual()
           || FigCFEqual()
           || v12
           && (CFTypeID v37 = CFGetTypeID(v12), v37 == CGColorSpaceGetTypeID())
           && CGColorSpaceUsesITUR_2100TF((CGColorSpaceRef)v12))
          && FigCFEqual()
          && FigCFEqual())
        {
          CGColorSpaceRef ColorSpaceFromAttachments = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC58]);
        }
        else
        {
          CGColorSpaceRef ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(MutableCopy);
        }
        BOOL v17 = ColorSpaceFromAttachments;
      }
      if (!FigCFEqual())
      {
        *a3 = v12;
        *a4 = v17;
        if (!v24) {
          goto LABEL_85;
        }
        goto LABEL_84;
      }
LABEL_79:
      if (!v12) {
        goto LABEL_81;
      }
      goto LABEL_80;
    }
LABEL_61:
    CGColorSpaceRef v31 = CVImageBufferCreateColorSpaceFromAttachments(theDict);
    goto LABEL_62;
  }
  CFDictionaryRef v23 = 0;
  CFDictionaryRef v24 = 0;
LABEL_80:
  CFRelease(v12);
LABEL_81:
  if (v17) {
    CFRelease(v17);
  }
  if (!v24) {
    goto LABEL_85;
  }
LABEL_84:
  CFRelease(v24);
LABEL_85:
  if (v23) {
    CFRelease(v23);
  }
  return 0;
}