uint64_t vt_Copy_420f_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned char *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t j;
  unsigned __int8 *v45;
  unsigned char *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned char *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  unsigned int v56;

  v8 = *(void *)(a2 + 32);
  v9 = v8 & 1;
  v10 = v9 + v8;
  v11 = *(void *)(a2 + 40);
  v12 = v11 & 0xFFFFFFFE;
  v13 = a4[1];
  v14 = (unsigned __int8 *)(a3[1] + v13 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  v15 = *(void *)(a6 + 24);
  v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  v18 = *(void *)(a6 + 40);
  v19 = a8[1];
  v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  v21 = v17 - v16;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) < v21) {
    v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  v22 = *(void *)(a2 + 24) + v11 - v12 + ((*(void *)(a2 + 24) + v11) & 1);
  if (v22 >= v15) {
    v22 = v15;
  }
  if (v22)
  {
    v23 = 0;
    v24 = *a4;
    v25 = v12 >= v11;
    v26 = *a8;
    v27 = a8[2];
    v28 = *a3 + *a4 * v12;
    if (v25) {
      v29 = 0;
    }
    else {
      v29 = *a4;
    }
    v30 = v28 + v10 + v29;
    v31 = a7[2] + v27 * v18 + v16;
    v32 = *a7 + v26 * v18 + v16;
    do
    {
      if (v21)
      {
        for (i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v31 + i) = -1;
          *(unsigned char *)(v32 + i) = ((7204443 * *(unsigned __int8 *)(v30 + i)) >> 23) + 16;
        }
      }
      v30 += v24;
      v32 += v26;
      v31 += v27;
      ++v23;
    }
    while (v23 != v22);
    v8 = *(void *)(a2 + 32);
    v11 = *(void *)(a2 + 40);
    v9 = v8 & 1;
  }
  v34 = v22 >> 1;
  v35 = v11 & 1;
  if (v22 >> 1 >= (v22 - v35) >> 1) {
    v34 = (v22 - (v11 & 1)) >> 1;
  }
  v36 = v21 >> 1;
  v37 = v21 - v9;
  if (v36 >= v37 >> 1) {
    v38 = v37 >> 1;
  }
  else {
    v38 = v36;
  }
  if (v11)
  {
    if (v8)
    {
      v39 = v14 + 2;
      v41 = (7368928 * v14[1]) >> 23;
      *v20 = ((7368928 * *v14) >> 23) + 16;
      v20[1] = v41 + 16;
      v40 = v20 + 2;
      if (!v38)
      {
LABEL_28:
        v14 += v13;
        v20 += v19;
        goto LABEL_29;
      }
    }
    else
    {
      v39 = v14;
      v40 = v20;
      if (!v38) {
        goto LABEL_28;
      }
    }
    v42 = -(uint64_t)v38;
    do
    {
      v43 = (7368928 * v39[1]) >> 23;
      *v40 = ((7368928 * *v39) >> 23) + 16;
      v40[1] = v43 + 16;
      v40 += 2;
      v39 += 2;
      v25 = __CFADD__(v42++, 1);
    }
    while (!v25);
    goto LABEL_28;
  }
LABEL_29:
  if (v34)
  {
    for (j = 0; j != v34; ++j)
    {
      v45 = v14;
      v46 = v20;
      if (v8)
      {
        v45 = v14 + 2;
        v47 = (7368928 * v14[1]) >> 23;
        *v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v47 + 16;
        v46 = v20 + 2;
      }
      if (v38)
      {
        v48 = -(uint64_t)v38;
        do
        {
          v49 = (7368928 * v45[1]) >> 23;
          v50 = ((7368928 * *v45) >> 23) + 16;
          *v46 = ((7368928 * *v45) >> 23) + 16;
          LOBYTE(v49) = v49 + 16;
          v46[1] = v49;
          v51 = &v46[v19];
          *v51 = v50;
          v51[1] = v49;
          v46 += 2;
          v45 += 2;
          v25 = __CFADD__(v48++, 1);
        }
        while (!v25);
      }
      v14 += v13;
      v20 += 2 * v19;
    }
    v52 = 2 * v34;
  }
  else
  {
    v52 = 0;
  }
  if ((v52 | (unint64_t)v35) < v22)
  {
    if (v8)
    {
      v53 = *v14;
      v54 = v14[1];
      v14 += 2;
      *v20 = ((7368928 * v53) >> 23) + 16;
      v20[1] = ((7368928 * v54) >> 23) + 16;
      v20 += 2;
    }
    if (v38)
    {
      v55 = -(uint64_t)v38;
      do
      {
        v56 = (7368928 * v14[1]) >> 23;
        *v20 = ((7368928 * *v14) >> 23) + 16;
        v20[1] = v56 + 16;
        v20 += 2;
        v14 += 2;
        v25 = __CFADD__(v55++, 1);
      }
      while (!v25);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_422v(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = a5[1];
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = a1 >> 1;
    uint64_t v13 = *a6;
    uint64_t v12 = a6[1];
    uint64_t v14 = 2 * v7;
    uint64_t v15 = 2 * *a5;
    uint64_t v16 = 2 * v9;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v17 = *a4;
    uint64_t v18 = a4[1];
    uint64_t v19 = v12 + v9;
    uint64_t v20 = v7 + *a4 + 1;
    uint64_t v21 = v13 + *a5;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v11;
        do
        {
          v24 = (unsigned char *)(v13 + v22);
          uint64_t v25 = *(unsigned __int8 *)(v18 + v22);
          uint64_t v26 = *(unsigned __int8 *)(v18 + v22 + 1);
          uint64_t v27 = *(unsigned __int8 *)(v17 + v22 + 1);
          unsigned char *v24 = sLumaTableFtoV[*(unsigned __int8 *)(v17 + v22)];
          v28 = (unsigned char *)(v12 + v22);
          v24[1] = sLumaTableFtoV[v27];
          LOBYTE(v27) = sChromaTableFtoV[v25];
          unsigned char *v28 = v27;
          LOBYTE(v26) = sChromaTableFtoV[v26];
          v28[1] = v26;
          v29 = (unsigned char *)(v21 + v22);
          uint64_t v30 = *(unsigned __int8 *)(v20 + v22);
          unsigned char *v29 = sLumaTableFtoV[*(unsigned __int8 *)(v20 + v22 - 1)];
          v31 = (unsigned char *)(v19 + v22);
          v29[1] = sLumaTableFtoV[v30];
          unsigned char *v31 = v27;
          v31[1] = v26;
          v22 += 2;
          --v23;
        }
        while (v23);
      }
      v17 += v14;
      v18 += v8;
      v13 += v15;
      v12 += v16;
      ++v6;
      v19 += v16;
      v20 += v14;
      v21 += v15;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_420f_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v9) >> 1) + ((v10 + v8) & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = a8[1];
  uint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v19) >> 1) + (v17 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v23 = v18 - v17;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) < v23) {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  unint64_t v24 = v14 - v13;
  unint64_t v25 = v20 - v19;
  if (v14 - v13 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    BOOL v28 = v13 >= v9;
    uint64_t v29 = *a8;
    uint64_t v30 = a8[2];
    uint64_t v31 = *a3 + *a4 * v13;
    if (v28) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v31 + v11 + v32;
    uint64_t v34 = a7[2] + v30 * v19 + v17;
    uint64_t v35 = *a7 + v29 * v19 + v17;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          *(unsigned char *)(v34 + i) = -1;
          *(unsigned char *)(v35 + i) = ((7204443 * *(unsigned __int8 *)(v33 + i)) >> 23) + 16;
        }
      }
      v33 += v27;
      v35 += v29;
      v34 += v30;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40) & 1;
    uint64_t v10 = v8 & 1;
  }
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = v24 - v12;
  if (v37 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v37;
  }
  unint64_t v40 = v23 >> 1;
  unint64_t v41 = v23 - v10;
  if (v40 >= v41 >> 1) {
    unint64_t v42 = v41 >> 1;
  }
  else {
    unint64_t v42 = v40;
  }
  if (v12)
  {
    if (v8)
    {
      v43 = v16 + 2;
      unsigned int v45 = (7368928 * v16[1]) >> 23;
      *uint64_t v22 = ((7368928 * *v16) >> 23) + 16;
      v22[1] = v45 + 16;
      v44 = v22 + 2;
      if (!v42)
      {
LABEL_29:
        v16 += v15;
        v22 += v21;
        goto LABEL_30;
      }
    }
    else
    {
      v43 = v16;
      v44 = v22;
      if (!v42) {
        goto LABEL_29;
      }
    }
    uint64_t v46 = -(uint64_t)v42;
    do
    {
      unsigned int v47 = (7368928 * v43[1]) >> 23;
      unsigned char *v44 = ((7368928 * *v43) >> 23) + 16;
      v44[1] = v47 + 16;
      v44 += 2;
      v43 += 2;
      BOOL v28 = __CFADD__(v46++, 1);
    }
    while (!v28);
    goto LABEL_29;
  }
LABEL_30:
  if (v39)
  {
    for (uint64_t j = 0; j != v39; ++j)
    {
      v49 = v16;
      v50 = v22;
      if (v8)
      {
        v49 = v16 + 2;
        unsigned int v51 = (7368928 * v16[1]) >> 23;
        *uint64_t v22 = ((7368928 * *v16) >> 23) + 16;
        v22[1] = v51 + 16;
        v50 = v22 + 2;
      }
      if (v42)
      {
        uint64_t v52 = -(uint64_t)v42;
        do
        {
          unsigned int v53 = (7368928 * v49[1]) >> 23;
          unsigned char *v50 = ((7368928 * *v49) >> 23) + 16;
          v50[1] = v53 + 16;
          v50 += 2;
          v49 += 2;
          BOOL v28 = __CFADD__(v52++, 1);
        }
        while (!v28);
      }
      v16 += v15;
      v22 += v21;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_420v_vec(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, int8x16_t **a6, uint16x4_t a7)
{
  return 0;
}

uint64_t vt_Copy_420f_420v(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = *a5;
    uint64_t v10 = a5[1];
    unint64_t v11 = a2 >> 1;
    uint64_t v12 = a1 >> 1;
    unint64_t v13 = (unsigned char *)*a6;
    uint64_t v14 = a6[1];
    if (a1 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    uint64_t v16 = *a4;
    uint64_t v15 = a4[1];
    do
    {
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
          v13[i] = sLumaTableFtoV[v16[i]];
        uint64_t v19 = &v16[v7];
        uint64_t v20 = &v13[v9];
        uint64_t v21 = v19;
        uint64_t v22 = v20;
        unint64_t v23 = a1;
        do
        {
          int v24 = *v21++;
          *v22++ = sLumaTableFtoV[v24];
          --v23;
        }
        while (v23);
        uint64_t v16 = &v19[v7];
        unint64_t v13 = &v20[v9];
        if (a1 >= 2)
        {
          uint64_t v25 = 0;
          uint64_t v26 = v12;
          do
          {
            uint64_t v27 = (unsigned char *)(v14 + v25);
            char v28 = sChromaTableFtoV[v15[v25 + 1]];
            *uint64_t v27 = sChromaTableFtoV[v15[v25]];
            v27[1] = v28;
            v25 += 2;
            --v26;
          }
          while (v26);
        }
      }
      else
      {
        v16 += v7 + v7;
        v13 += v9 + v9;
      }
      v15 += v8;
      v14 += v10;
      ++v6;
    }
    while (v6 != v11);
  }
  return 0;
}

uint64_t vt_Copy_420f_y420(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = *a5;
    uint64_t v10 = a5[1];
    uint64_t v11 = a5[2];
    uint64_t v12 = a1 >> 1;
    uint64_t v14 = a6[1];
    uint64_t v13 = a6[2];
    uint64_t v15 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    uint64_t v16 = *a4;
    uint64_t v17 = a4[1];
    do
    {
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
          v15[i] = sLumaTableFtoV[v16[i]];
        uint64_t v20 = &v16[v7];
        uint64_t v21 = &v15[v9];
        uint64_t v22 = v20;
        unint64_t v23 = v21;
        unint64_t v24 = a1;
        do
        {
          int v25 = *v22++;
          *v23++ = sLumaTableFtoV[v25];
          --v24;
        }
        while (v24);
        uint64_t v16 = &v20[v7];
        uint64_t v15 = &v21[v9];
        if (a1 >= 2)
        {
          uint64_t v26 = 0;
          uint64_t v27 = v17;
          do
          {
            char v28 = sChromaTableFtoV[v27[1]];
            *(unsigned char *)(v14 + v26) = sChromaTableFtoV[*v27];
            *(unsigned char *)(v13 + v26) = v28;
            v27 += 2;
            ++v26;
          }
          while (v12 != v26);
        }
      }
      else
      {
        v16 += v7 + v7;
        v15 += v9 + v9;
      }
      v17 += v8;
      v14 += v10;
      v13 += v11;
      ++v6;
    }
    while (v6 != a2 >> 1);
  }
  return 0;
}

uint64_t vt_Copy_420f_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[5] & 0xFFFFFFFELL;
  unint64_t v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  uint64_t v10 = a2[3] + a2[5];
  unint64_t v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a8;
    uint64_t v17 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v18 = (unsigned __int8 *)(a3[1] + v15 * (v9 >> 1) + v8);
    unint64_t v19 = *a3 + *a4 * v9 + v8;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        LOWORD(v22) = 0;
        LOWORD(v23) = 0;
        unint64_t v24 = v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            int v25 = *v24;
            int v26 = v24[1];
            v24 += 2;
            int v23 = ((16843010 * (unint64_t)(57344 * v25)) >> 32) + 4096;
            int v22 = ((16843010 * (unint64_t)(57344 * v26)) >> 32) + 4096;
          }
          uint64_t v27 = (_WORD *)(v17 + v20);
          unint64_t v28 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v19 + v21))) >> 32;
          *uint64_t v27 = -1;
          v27[1] = v28 + 4096;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 8;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_420f_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4] & 0xFFFFFFFELL;
  unint64_t v9 = a2[5] & 0xFFFFFFFELL;
  unint64_t v11 = a2[2] + a2[4] - v8 + ((a2[2] + a2[4]) & 1);
  if (v11 >= a6[2]) {
    unint64_t v11 = a6[2];
  }
  uint64_t v10 = a2[3] + a2[5];
  unint64_t v12 = v10 - v9 + (v10 & 1);
  if (v12 >= a6[3]) {
    unint64_t v12 = a6[3];
  }
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a8;
    uint64_t v17 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v18 = (unsigned __int8 *)(a3[1] + v15 * (v9 >> 1) + v8);
    unint64_t v19 = *a3 + *a4 * v9 + v8;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        LOBYTE(v22) = 0;
        LOBYTE(v23) = 0;
        unint64_t v24 = v18;
        do
        {
          if ((v21 & 1) == 0)
          {
            int v25 = *v24;
            int v26 = v24[1];
            v24 += 2;
            unsigned int v23 = ((7368928 * v25) >> 23) + 16;
            unsigned int v22 = ((7368928 * v26) >> 23) + 16;
          }
          uint64_t v27 = (unsigned char *)(v17 + v20);
          unsigned int v28 = (7204443 * *(unsigned __int8 *)(v19 + v21)) >> 23;
          *uint64_t v27 = -1;
          v27[1] = v28 + 16;
          v27[2] = v23;
          v27[3] = v22;
          ++v21;
          v20 += 4;
        }
        while (v11 != v21);
      }
      v19 += v14;
      v17 += v16;
      v18 += (v13++ << 63 >> 63) & v15;
    }
    while (v13 != v12);
  }
  return 0;
}

uint64_t vt_Copy_420f_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40) & 0xFFFFFFFELL;
  uint64_t v11 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v12 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v12 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11) {
    unint64_t v12 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  }
  uint64_t v10 = *(void *)(a2 + 24) + *(void *)(a2 + 40);
  unint64_t v13 = v10 - v9 + (v10 & 1);
  if (v13 >= *(void *)(a6 + 24)) {
    unint64_t v13 = *(void *)(a6 + 24);
  }
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *a4;
    uint64_t v16 = a4[1];
    uint64_t v17 = *a8;
    uint64_t v18 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v11;
    unint64_t v19 = a3[1] + v16 * (v9 >> 1) + (v8 & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v20 = *a3 + *a4 * v9 + v8;
    do
    {
      if (v12)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < v12; i += 2)
        {
          unsigned int v23 = (_WORD *)(v18 + v21);
          unint64_t v24 = (16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v19 + i + 1))) >> 32;
          unint64_t v25 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v20 + i))) >> 32;
          unint64_t v26 = (16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v20 + i + 1))) >> 32;
          *unsigned int v23 = ((16843010 * (unint64_t)(57344 * *(unsigned __int8 *)(v19 + i))) >> 32) + 4096;
          v23[1] = v25 + 4096;
          v23[2] = v24 + 4096;
          v23[3] = v26 + 4096;
          v21 += 8;
        }
      }
      v20 += v15;
      v18 += v17;
      v19 += (v14++ << 63 >> 63) & v16;
    }
    while (v14 != v13);
  }
  return 0;
}

uint64_t vt_Copy_420f_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  unint64_t v12 = v8 & 0xFFFFFFFE;
  uint64_t v13 = v10 + v8;
  uint64_t v14 = (v10 + v8) & 1;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v18 + 4 * v17);
  unint64_t v21 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v21 >= a6[2]) {
    unint64_t v21 = a6[2];
  }
  unint64_t v22 = v13 - v12 + v14;
  if (v22 >= a6[3]) {
    unint64_t v22 = a6[3];
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = v27 + (v9 & 0xFFFFFFFE) + v28;
    uint64_t v30 = a7[2] + v26 * v18 + 2 * v17;
    uint64_t v31 = *a7 + v25 * v18 + 2 * v17;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(_WORD *)(v30 + 2 * i) = -1;
          *(_WORD *)(v31 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v29 + i))) >> 32)
                                  + 4096;
        }
      }
      v29 += v24;
      v31 += v25;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v33 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v33) {
    unint64_t v33 = v22 >> 1;
  }
  char v34 = v9;
  unint64_t v35 = v21 >> 1;
  uint64_t v36 = v9 & 1;
  if (v21 >> 1 >= (v21 - v36) >> 1) {
    unint64_t v35 = (v21 - v36) >> 1;
  }
  if (v8)
  {
    if (v34)
    {
      int v44 = v16[1];
      unint64_t v37 = v16 + 2;
      *unint64_t v20 = ((16843010 * (unint64_t)(57344 * *v16)) >> 32) + 4096;
      v20[1] = ((16843010 * (unint64_t)(57344 * v44)) >> 32) + 4096;
      unint64_t v38 = v20 + 2;
      if (v35)
      {
LABEL_21:
        uint64_t v39 = -(uint64_t)v35;
        do
        {
          int v40 = *v37;
          int v41 = v37[1];
          v37 += 2;
          *unint64_t v38 = ((16843010 * (unint64_t)(57344 * v40)) >> 32) + 4096;
          v38[1] = ((16843010 * (unint64_t)(57344 * v41)) >> 32) + 4096;
          v38 += 2;
          BOOL v42 = __CFADD__(v39++, 1);
        }
        while (!v42);
        uint64_t v43 = 2 * v35;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v37 = v16;
      unint64_t v38 = v20;
      if (v35) {
        goto LABEL_21;
      }
    }
    uint64_t v43 = 0;
LABEL_27:
    if ((v43 | (unint64_t)v36) < v21)
    {
      int v45 = *v37;
      int v46 = v37[1];
      *unint64_t v38 = ((16843010 * (unint64_t)(57344 * v45)) >> 32) + 4096;
      v38[1] = ((16843010 * (unint64_t)(57344 * v46)) >> 32) + 4096;
    }
    v16 += v15;
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v33)
  {
    for (uint64_t j = 0; j != v33; ++j)
    {
      v48 = v16;
      v49 = v20;
      if (v34)
      {
        v48 = v16 + 2;
        unint64_t v50 = (16843010 * (unint64_t)(57344 * v16[1])) >> 32;
        __int16 v51 = ((16843010 * (unint64_t)(57344 * *v16)) >> 32) + 4096;
        *unint64_t v20 = v51;
        LOWORD(v50) = v50 + 4096;
        v20[1] = v50;
        uint64_t v52 = (_WORD *)((char *)v20 + v19);
        *uint64_t v52 = v51;
        v52[1] = v50;
        v49 = v20 + 2;
      }
      if (v35)
      {
        uint64_t v53 = -(uint64_t)v35;
        do
        {
          unsigned int v54 = 57344 * v48[1];
          int v55 = ((16843010 * (unint64_t)(57344 * *v48)) >> 32) + 4096;
          _WORD *v49 = ((16843010 * (unint64_t)(57344 * *v48)) >> 32) + 4096;
          int v56 = ((16843010 * (unint64_t)v54) >> 32) + 4096;
          v49[1] = v56;
          v49[2] = v55;
          v49[3] = v56;
          v57 = (_WORD *)((char *)v49 + v19);
          _WORD *v57 = v55;
          v57[1] = v56;
          v48 += 2;
          v57[2] = v55;
          v57[3] = v56;
          v49 += 4;
          BOOL v42 = __CFADD__(v53++, 1);
        }
        while (!v42);
      }
      if ((v36 | (2 * v35)) < v21)
      {
        int v58 = *v48;
        int v59 = v48[1];
        int v60 = ((16843010 * (unint64_t)(57344 * v58)) >> 32) + 4096;
        _WORD *v49 = v60;
        int v61 = ((16843010 * (unint64_t)(57344 * v59)) >> 32) + 4096;
        v49[1] = v61;
        v62 = (_WORD *)((char *)v49 + v19);
        _WORD *v62 = v60;
        v62[1] = v61;
      }
      v16 += v15;
      v20 += v19;
    }
    uint64_t v63 = 2 * v33;
  }
  else
  {
    uint64_t v63 = 0;
  }
  if ((v63 | v8 & 1) < v22)
  {
    if (v34)
    {
      int v64 = *v16;
      int v65 = v16[1];
      v16 += 2;
      *unint64_t v20 = ((16843010 * (unint64_t)(57344 * v64)) >> 32) + 4096;
      v20[1] = ((16843010 * (unint64_t)(57344 * v65)) >> 32) + 4096;
      v20 += 2;
    }
    if (v35)
    {
      uint64_t v66 = -(uint64_t)v35;
      do
      {
        int v67 = *v16;
        int v68 = v16[1];
        v16 += 2;
        *unint64_t v20 = ((16843010 * (unint64_t)(57344 * v67)) >> 32) + 4096;
        v20[1] = ((16843010 * (unint64_t)(57344 * v68)) >> 32) + 4096;
        v20 += 2;
        BOOL v42 = __CFADD__(v66++, 1);
      }
      while (!v42);
      uint64_t v69 = 2 * v35;
    }
    else
    {
      uint64_t v69 = 0;
    }
    if ((v69 | (unint64_t)v36) < v21)
    {
      int v70 = *v16;
      int v71 = v16[1];
      *unint64_t v20 = ((16843010 * (unint64_t)(57344 * v70)) >> 32) + 4096;
      v20[1] = ((16843010 * (unint64_t)(57344 * v71)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v28 + i))) >> 32)
                                  + 4096;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v31 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v31) {
    unint64_t v31 = v22 >> 1;
  }
  char v32 = v9;
  unint64_t v33 = v21 >> 1;
  uint64_t v34 = v9 & 1;
  if (v21 >> 1 >= (v21 - v34) >> 1) {
    unint64_t v33 = (v21 - v34) >> 1;
  }
  if (v8)
  {
    if (v32)
    {
      int v42 = v14[1];
      unint64_t v35 = v14 + 2;
      *unint64_t v20 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
      v20[1] = ((16843010 * (unint64_t)(57344 * v42)) >> 32) + 4096;
      uint64_t v36 = v20 + 2;
      if (v33)
      {
LABEL_21:
        uint64_t v37 = -(uint64_t)v33;
        do
        {
          int v38 = *v35;
          int v39 = v35[1];
          v35 += 2;
          *uint64_t v36 = ((16843010 * (unint64_t)(57344 * v38)) >> 32) + 4096;
          v36[1] = ((16843010 * (unint64_t)(57344 * v39)) >> 32) + 4096;
          v36 += 2;
          BOOL v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        uint64_t v41 = 2 * v33;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v35 = v14;
      uint64_t v36 = v20;
      if (v33) {
        goto LABEL_21;
      }
    }
    uint64_t v41 = 0;
LABEL_27:
    if ((v41 | (unint64_t)v34) < v21)
    {
      int v43 = *v35;
      int v44 = v35[1];
      *uint64_t v36 = ((16843010 * (unint64_t)(57344 * v43)) >> 32) + 4096;
      v36[1] = ((16843010 * (unint64_t)(57344 * v44)) >> 32) + 4096;
    }
    v14 += v13;
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v31)
  {
    for (uint64_t j = 0; j != v31; ++j)
    {
      int v46 = v14;
      unsigned int v47 = v20;
      if (v32)
      {
        int v46 = v14 + 2;
        unint64_t v48 = (16843010 * (unint64_t)(57344 * v14[1])) >> 32;
        __int16 v49 = ((16843010 * (unint64_t)(57344 * *v14)) >> 32) + 4096;
        *unint64_t v20 = v49;
        LOWORD(v48) = v48 + 4096;
        v20[1] = v48;
        unint64_t v50 = (_WORD *)((char *)v20 + v19);
        _WORD *v50 = v49;
        v50[1] = v48;
        unsigned int v47 = v20 + 2;
      }
      if (v33)
      {
        uint64_t v51 = -(uint64_t)v33;
        do
        {
          unsigned int v52 = 57344 * v46[1];
          int v53 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          *unsigned int v47 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          int v54 = ((16843010 * (unint64_t)v52) >> 32) + 4096;
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          int v55 = (_WORD *)((char *)v47 + v19);
          *int v55 = v53;
          v55[1] = v54;
          v46 += 2;
          v55[2] = v53;
          v55[3] = v54;
          v47 += 4;
          BOOL v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v21)
      {
        int v56 = *v46;
        int v57 = v46[1];
        int v58 = ((16843010 * (unint64_t)(57344 * v56)) >> 32) + 4096;
        *unsigned int v47 = v58;
        int v59 = ((16843010 * (unint64_t)(57344 * v57)) >> 32) + 4096;
        v47[1] = v59;
        int v60 = (_WORD *)((char *)v47 + v19);
        *int v60 = v58;
        v60[1] = v59;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v61 = 2 * v31;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if (v32)
    {
      int v62 = *v14;
      int v63 = v14[1];
      v14 += 2;
      *unint64_t v20 = ((16843010 * (unint64_t)(57344 * v62)) >> 32) + 4096;
      v20[1] = ((16843010 * (unint64_t)(57344 * v63)) >> 32) + 4096;
      v20 += 2;
    }
    if (v33)
    {
      uint64_t v64 = -(uint64_t)v33;
      do
      {
        int v65 = *v14;
        int v66 = v14[1];
        v14 += 2;
        *unint64_t v20 = ((16843010 * (unint64_t)(57344 * v65)) >> 32) + 4096;
        v20[1] = ((16843010 * (unint64_t)(57344 * v66)) >> 32) + 4096;
        v20 += 2;
        BOOL v40 = __CFADD__(v64++, 1);
      }
      while (!v40);
      uint64_t v67 = 2 * v33;
    }
    else
    {
      uint64_t v67 = 0;
    }
    if ((v67 | (unint64_t)v34) < v21)
    {
      int v68 = *v14;
      int v69 = v14[1];
      *unint64_t v20 = ((16843010 * (unint64_t)(57344 * v68)) >> 32) + 4096;
      v20[1] = ((16843010 * (unint64_t)(57344 * v69)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  unint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = *(unsigned __int8 *)(v28 + i) | (*(unsigned __int8 *)(v28 + i) << 8);
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  uint64_t v31 = v8 & 1;
  unint64_t v32 = (v22 - v31) >> 1;
  if (v22 >> 1 < v32) {
    unint64_t v32 = v22 >> 1;
  }
  char v33 = v9;
  unint64_t v34 = v21 >> 1;
  uint64_t v35 = v9 & 1;
  if (v21 >> 1 >= (v21 - v35) >> 1) {
    unint64_t v34 = (v21 - v35) >> 1;
  }
  if (v8)
  {
    if (v33)
    {
      uint64_t v36 = v14 + 2;
      __int16 v43 = v14[1] | (v14[1] << 8);
      *unint64_t v20 = *v14 | (*v14 << 8);
      v20[1] = v43;
      uint64_t v37 = v20 + 2;
      if (v34)
      {
LABEL_21:
        uint64_t v38 = -(uint64_t)v34;
        do
        {
          __int16 v39 = *v36;
          __int16 v40 = v36[1];
          v36 += 2;
          *uint64_t v37 = v39 | (v39 << 8);
          v37[1] = v40 | (v40 << 8);
          v37 += 2;
          BOOL v41 = __CFADD__(v38++, 1);
        }
        while (!v41);
        uint64_t v42 = 2 * v34;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v36 = v14;
      uint64_t v37 = v20;
      if (v34) {
        goto LABEL_21;
      }
    }
    uint64_t v42 = 0;
LABEL_27:
    if ((v42 | (unint64_t)v35) < v21)
    {
      __int16 v44 = *v36 | (*v36 << 8);
      __int16 v45 = v36[1] | (v36[1] << 8);
      *uint64_t v37 = v44;
      v37[1] = v45;
    }
    v14 += v13;
    unint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v32)
  {
    for (uint64_t j = 0; j != v32; ++j)
    {
      unsigned int v47 = v14;
      unint64_t v48 = v20;
      if (v33)
      {
        unsigned int v47 = v14 + 2;
        __int16 v49 = *v14 | (*v14 << 8);
        __int16 v50 = v14[1] | (v14[1] << 8);
        *unint64_t v20 = v49;
        v20[1] = v50;
        uint64_t v51 = (_WORD *)((char *)v20 + v19);
        *uint64_t v51 = v49;
        v51[1] = v50;
        unint64_t v48 = v20 + 2;
      }
      if (v34)
      {
        uint64_t v52 = -(uint64_t)v34;
        do
        {
          __int16 v53 = v47[1];
          __int16 v54 = *v47 | (*v47 << 8);
          _WORD *v48 = v54;
          __int16 v55 = v53 | (v53 << 8);
          v48[1] = v55;
          v47 += 2;
          v48[2] = v54;
          v48[3] = v55;
          int v56 = (_WORD *)((char *)v48 + v19);
          *int v56 = v54;
          v56[1] = v55;
          v56[2] = v54;
          v56[3] = v55;
          v48 += 4;
          BOOL v41 = __CFADD__(v52++, 1);
        }
        while (!v41);
      }
      if ((v35 | (2 * v34)) < v21)
      {
        __int16 v57 = *v47 | (*v47 << 8);
        __int16 v58 = v47[1] | (v47[1] << 8);
        _WORD *v48 = v57;
        v48[1] = v58;
        int v59 = (_WORD *)((char *)v48 + v19);
        *int v59 = v57;
        v59[1] = v58;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v60 = 2 * v32;
  }
  else
  {
    uint64_t v60 = 0;
  }
  if ((v60 | (unint64_t)v31) < v22)
  {
    if (v33)
    {
      __int16 v61 = *v14;
      __int16 v62 = v14[1];
      v14 += 2;
      *unint64_t v20 = v61 | (v61 << 8);
      v20[1] = v62 | (v62 << 8);
      v20 += 2;
    }
    if (v34)
    {
      uint64_t v63 = -(uint64_t)v34;
      do
      {
        __int16 v64 = *v14;
        __int16 v65 = v14[1];
        v14 += 2;
        *unint64_t v20 = v64 | (v64 << 8);
        v20[1] = v65 | (v65 << 8);
        v20 += 2;
        BOOL v41 = __CFADD__(v63++, 1);
      }
      while (!v41);
      uint64_t v66 = 2 * v34;
    }
    else
    {
      uint64_t v66 = 0;
    }
    if ((v66 | (unint64_t)v35) < v21)
    {
      __int16 v67 = *v14 | (*v14 << 8);
      __int16 v68 = v14[1] | (v14[1] << 8);
      *unint64_t v20 = v67;
      v20[1] = v68;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = *a3 + v27 * v12;
    if (v12 >= v11) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v27;
    }
    uint64_t v32 = v30 + v9 + v8 + v31;
    uint64_t v33 = a7[2] + v29 * v19 + v20;
    uint64_t v34 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          *(_WORD *)(v33 + 2 * i) = -1;
          *(_WORD *)(v34 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v32 + i))) >> 32)
                                  + 4096;
        }
      }
      v32 += v27;
      v34 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v36 = v11 & 1;
  if (v25 >> 1 >= (v25 - v36) >> 1) {
    unint64_t v37 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  char v38 = v8;
  unint64_t v39 = v24 >> 1;
  unint64_t v40 = (v24 - v9) >> 1;
  if (v39 >= v40) {
    unint64_t v39 = v40;
  }
  if (v11)
  {
    if (v38)
    {
      int v43 = v15[1];
      BOOL v41 = v15 + 2;
      *unint64_t v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v43)) >> 32) + 4096;
      uint64_t v42 = v22 + 2;
      if (!v39)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      BOOL v41 = v15;
      uint64_t v42 = v22;
      if (!v39) {
        goto LABEL_27;
      }
    }
    uint64_t v44 = -(uint64_t)v39;
    do
    {
      unint64_t v45 = (16843010 * (unint64_t)(57344 * v41[1])) >> 32;
      *uint64_t v42 = ((16843010 * (unint64_t)(57344 * *v41)) >> 32) + 4096;
      v42[1] = v45 + 4096;
      v41 += 2;
      v42 += 2;
      BOOL v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_27;
  }
LABEL_28:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unint64_t v48 = v15;
      __int16 v49 = v22;
      if (v38)
      {
        int v50 = v15[1];
        unint64_t v48 = v15 + 2;
        *unint64_t v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = ((16843010 * (unint64_t)(57344 * v50)) >> 32) + 4096;
        __int16 v49 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v51 = -(uint64_t)v39;
        do
        {
          unint64_t v52 = (16843010 * (unint64_t)(57344 * v48[1])) >> 32;
          int v53 = ((16843010 * (unint64_t)(57344 * *v48)) >> 32) + 4096;
          _WORD *v49 = ((16843010 * (unint64_t)(57344 * *v48)) >> 32) + 4096;
          LOWORD(v52) = v52 + 4096;
          v49[1] = v52;
          __int16 v54 = (_WORD *)((char *)v49 + v21);
          *__int16 v54 = v53;
          v54[1] = v52;
          v49 += 2;
          v48 += 2;
          BOOL v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v55 = 2 * v37;
  }
  else
  {
    uint64_t v55 = 0;
  }
  if ((v55 | (unint64_t)v36) < v25)
  {
    if (v38)
    {
      int v56 = *v15;
      int v57 = v15[1];
      v15 += 2;
      *unint64_t v22 = ((16843010 * (unint64_t)(57344 * v56)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v57)) >> 32) + 4096;
      v22 += 2;
    }
    if (v39)
    {
      uint64_t v58 = -(uint64_t)v39;
      do
      {
        unint64_t v59 = (16843010 * (unint64_t)(57344 * v15[1])) >> 32;
        *unint64_t v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = v59 + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v46 = __CFADD__(v58++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v9 + v8 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1) {
    unint64_t v35 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v35 = v25 >> 1;
  }
  char v36 = v8;
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = (v24 - v9) >> 1;
  if (v37 >= v38) {
    unint64_t v37 = v38;
  }
  if (v11)
  {
    if (v36)
    {
      int v41 = v15[1];
      unint64_t v39 = v15 + 2;
      *unint64_t v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v41)) >> 32) + 4096;
      unint64_t v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v39 = v15;
      unint64_t v40 = v22;
      if (!v37) {
        goto LABEL_27;
      }
    }
    uint64_t v42 = -(uint64_t)v37;
    do
    {
      unint64_t v43 = (16843010 * (unint64_t)(57344 * v39[1])) >> 32;
      *unint64_t v40 = ((16843010 * (unint64_t)(57344 * *v39)) >> 32) + 4096;
      v40[1] = v43 + 4096;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      BOOL v46 = v15;
      unsigned int v47 = v22;
      if (v36)
      {
        int v48 = v15[1];
        BOOL v46 = v15 + 2;
        *unint64_t v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
        unsigned int v47 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v49 = -(uint64_t)v37;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(57344 * v46[1])) >> 32;
          int v51 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          *unsigned int v47 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          LOWORD(v50) = v50 + 4096;
          v47[1] = v50;
          unint64_t v52 = (_WORD *)((char *)v47 + v21);
          *unint64_t v52 = v51;
          v52[1] = v50;
          v47 += 2;
          v46 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v53 = 2 * v35;
  }
  else
  {
    uint64_t v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if (v36)
    {
      int v54 = *v15;
      int v55 = v15[1];
      v15 += 2;
      *unint64_t v22 = ((16843010 * (unint64_t)(57344 * v54)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v55)) >> 32) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v56 = -(uint64_t)v37;
      do
      {
        unint64_t v57 = (16843010 * (unint64_t)(57344 * v15[1])) >> 32;
        *unint64_t v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = v57 + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v9 + v8 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = *(unsigned __int8 *)(v31 + i) | (*(unsigned __int8 *)(v31 + i) << 8);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1) {
    unint64_t v35 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v35 = v25 >> 1;
  }
  char v36 = v8;
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = (v24 - v9) >> 1;
  if (v37 >= v38) {
    unint64_t v37 = v38;
  }
  if (v11)
  {
    if (v36)
    {
      unint64_t v39 = v15 + 2;
      __int16 v41 = v15[1] | (v15[1] << 8);
      *unint64_t v22 = *v15 | (*v15 << 8);
      v22[1] = v41;
      unint64_t v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v39 = v15;
      unint64_t v40 = v22;
      if (!v37) {
        goto LABEL_27;
      }
    }
    uint64_t v42 = -(uint64_t)v37;
    do
    {
      __int16 v43 = v39[1] | (v39[1] << 8);
      *unint64_t v40 = *v39 | (*v39 << 8);
      v40[1] = v43;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      BOOL v46 = v15;
      unsigned int v47 = v22;
      if (v36)
      {
        BOOL v46 = v15 + 2;
        __int16 v48 = v15[1] | (v15[1] << 8);
        *unint64_t v22 = *v15 | (*v15 << 8);
        v22[1] = v48;
        unsigned int v47 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v49 = -(uint64_t)v37;
        do
        {
          __int16 v50 = *v46 | (*v46 << 8);
          __int16 v51 = v46[1] | (v46[1] << 8);
          *unsigned int v47 = v50;
          v47[1] = v51;
          unint64_t v52 = (_WORD *)((char *)v47 + v21);
          *unint64_t v52 = v50;
          v52[1] = v51;
          v47 += 2;
          v46 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v53 = 2 * v35;
  }
  else
  {
    uint64_t v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if (v36)
    {
      __int16 v54 = *v15;
      __int16 v55 = v15[1];
      v15 += 2;
      *unint64_t v22 = v54 | (v54 << 8);
      v22[1] = v55 | (v55 << 8);
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v56 = -(uint64_t)v37;
      do
      {
        __int16 v57 = v15[1] | (v15[1] << 8);
        *unint64_t v22 = *v15 | (*v15 << 8);
        v22[1] = v57;
        v15 += 2;
        v22 += 2;
        BOOL v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((16843010 * (unint64_t)(56064 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  unint64_t v34 = v25 >> 1;
  unint64_t v35 = v25 - (v9 & 1);
  if (v34 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v34;
  }
  unint64_t v37 = v24 - (v8 & 1);
  if (v24 >> 1 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      int v41 = v15[1];
      unint64_t v39 = v15 + 2;
      *unint64_t v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
      v22[1] = ((16843010 * (unint64_t)(57344 * v41)) >> 32) + 4096;
      unint64_t v40 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v39 = v15;
      unint64_t v40 = v22;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      unint64_t v43 = (16843010 * (unint64_t)(57344 * v39[1])) >> 32;
      *unint64_t v40 = ((16843010 * (unint64_t)(57344 * *v39)) >> 32) + 4096;
      v40[1] = v43 + 4096;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      BOOL v46 = v15;
      unsigned int v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        BOOL v46 = v15 + 2;
        *unint64_t v22 = ((16843010 * (unint64_t)(57344 * *v15)) >> 32) + 4096;
        v22[1] = ((16843010 * (unint64_t)(57344 * v48)) >> 32) + 4096;
        unsigned int v47 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v49 = -(uint64_t)v38;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(57344 * v46[1])) >> 32;
          *unsigned int v47 = ((16843010 * (unint64_t)(57344 * *v46)) >> 32) + 4096;
          v47[1] = v50 + 4096;
          v46 += 2;
          v47 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * ((v12 + v8) >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - v10;
  unint64_t v25 = v18 - v17;
  if (v24 < v25) {
    unint64_t v25 = v24;
  }
  unint64_t v26 = v14 - v13;
  if (v14 - v13 >= v20 - v19) {
    unint64_t v26 = v20 - v19;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a8;
    uint64_t v30 = *a3 + v28 * v13;
    if (v13 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v28;
    }
    uint64_t v32 = v30 + v10 + v31;
    uint64_t v33 = *a7 + v29 * v19 + v21;
    do
    {
      if (v25)
      {
        for (uint64_t i = 0; i != v25; ++i)
          *(_WORD *)(v33 + 2 * i) = *(unsigned __int8 *)(v32 + i) | (*(unsigned __int8 *)(v32 + i) << 8);
      }
      v32 += v28;
      v33 += v29;
      ++v27;
    }
    while (v27 != v26);
  }
  unint64_t v35 = v26 >> 1;
  unint64_t v36 = v26 - v12;
  if (v35 >= v36 >> 1) {
    unint64_t v37 = v36 >> 1;
  }
  else {
    unint64_t v37 = v35;
  }
  unint64_t v38 = v25 - (v9 & 1);
  if (v25 >> 1 >= v38 >> 1) {
    unint64_t v39 = v38 >> 1;
  }
  else {
    unint64_t v39 = v25 >> 1;
  }
  if (v12)
  {
    if (v9)
    {
      unint64_t v40 = v16 + 2;
      __int16 v42 = v16[1] | (v16[1] << 8);
      *unint64_t v23 = *v16 | (*v16 << 8);
      v23[1] = v42;
      int v41 = v23 + 2;
      if (!v39)
      {
LABEL_28:
        v16 += v15;
        unint64_t v23 = (_WORD *)((char *)v23 + v22);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v40 = v16;
      int v41 = v23;
      if (!v39) {
        goto LABEL_28;
      }
    }
    uint64_t v43 = -(uint64_t)v39;
    do
    {
      __int16 v44 = v40[1] | (v40[1] << 8);
      *int v41 = *v40 | (*v40 << 8);
      v41[1] = v44;
      v40 += 2;
      v41 += 2;
      BOOL v45 = __CFADD__(v43++, 1);
    }
    while (!v45);
    goto LABEL_28;
  }
LABEL_29:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unsigned int v47 = v16;
      int v48 = v23;
      if (v9)
      {
        unsigned int v47 = v16 + 2;
        __int16 v49 = v16[1] | (v16[1] << 8);
        *unint64_t v23 = *v16 | (*v16 << 8);
        v23[1] = v49;
        int v48 = v23 + 2;
      }
      if (v39)
      {
        uint64_t v50 = -(uint64_t)v39;
        do
        {
          __int16 v51 = v47[1] | (v47[1] << 8);
          _WORD *v48 = *v47 | (*v47 << 8);
          v48[1] = v51;
          v47 += 2;
          v48 += 2;
          BOOL v45 = __CFADD__(v50++, 1);
        }
        while (!v45);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  unint64_t v12 = v8 & 0xFFFFFFFE;
  uint64_t v13 = v10 + v8;
  uint64_t v14 = (v10 + v8) & 1;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v18 + 4 * v17);
  unint64_t v21 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v21 >= a6[2]) {
    unint64_t v21 = a6[2];
  }
  unint64_t v22 = v13 - v12 + v14;
  if (v22 >= a6[3]) {
    unint64_t v22 = a6[3];
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = v27 + (v9 & 0xFFFFFFFE) + v28;
    uint64_t v30 = a7[2] + v26 * v18 + 2 * v17;
    uint64_t v31 = *a7 + v25 * v18 + 2 * v17;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(_WORD *)(v30 + 2 * i) = -1;
          *(_WORD *)(v31 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v29 + i))) >> 32)
                                  + 4096;
        }
      }
      v29 += v24;
      v31 += v25;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v33 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v33) {
    unint64_t v33 = v22 >> 1;
  }
  char v34 = v9;
  unint64_t v35 = v21 >> 1;
  uint64_t v36 = v9 & 1;
  if (v21 >> 1 >= (v21 - v36) >> 1) {
    unint64_t v35 = (v21 - v36) >> 1;
  }
  if (v8)
  {
    if (v34)
    {
      int v44 = v16[1];
      unint64_t v37 = v16 + 2;
      *uint64_t v20 = 16 * ((16843010 * (unint64_t)(3584 * *v16)) >> 32) + 4096;
      v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v44)) >> 32) + 4096;
      unint64_t v38 = v20 + 2;
      if (v35)
      {
LABEL_21:
        uint64_t v39 = -(uint64_t)v35;
        do
        {
          int v40 = *v37;
          int v41 = v37[1];
          v37 += 2;
          *unint64_t v38 = 16 * ((16843010 * (unint64_t)(3584 * v40)) >> 32) + 4096;
          v38[1] = 16 * ((16843010 * (unint64_t)(3584 * v41)) >> 32) + 4096;
          v38 += 2;
          BOOL v42 = __CFADD__(v39++, 1);
        }
        while (!v42);
        uint64_t v43 = 2 * v35;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v37 = v16;
      unint64_t v38 = v20;
      if (v35) {
        goto LABEL_21;
      }
    }
    uint64_t v43 = 0;
LABEL_27:
    if ((v43 | (unint64_t)v36) < v21)
    {
      int v45 = *v37;
      int v46 = v37[1];
      *unint64_t v38 = 16 * ((16843010 * (unint64_t)(3584 * v45)) >> 32) + 4096;
      v38[1] = 16 * ((16843010 * (unint64_t)(3584 * v46)) >> 32) + 4096;
    }
    v16 += v15;
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v33)
  {
    for (uint64_t j = 0; j != v33; ++j)
    {
      int v48 = v16;
      __int16 v49 = v20;
      if (v34)
      {
        int v48 = v16 + 2;
        unint64_t v50 = (16843010 * (unint64_t)(3584 * v16[1])) >> 32;
        __int16 v51 = 16 * ((16843010 * (unint64_t)(3584 * *v16)) >> 32) + 4096;
        *uint64_t v20 = v51;
        LOWORD(v50) = 16 * v50 + 4096;
        v20[1] = v50;
        unint64_t v52 = (_WORD *)((char *)v20 + v19);
        *unint64_t v52 = v51;
        v52[1] = v50;
        __int16 v49 = v20 + 2;
      }
      if (v35)
      {
        uint64_t v53 = -(uint64_t)v35;
        do
        {
          uint64_t v54 = 60365347840 * v48[1];
          int v55 = 16 * ((16843010 * (unint64_t)(3584 * *v48)) >> 32) + 4096;
          _WORD *v49 = 16 * ((16843010 * (unint64_t)(3584 * *v48)) >> 32) + 4096;
          LOWORD(v54) = 16 * WORD2(v54) + 4096;
          v49[1] = v54;
          v49[2] = v55;
          v49[3] = v54;
          uint64_t v56 = (_WORD *)((char *)v49 + v19);
          *uint64_t v56 = v55;
          v56[1] = v54;
          v48 += 2;
          v56[2] = v55;
          v56[3] = v54;
          v49 += 4;
          BOOL v42 = __CFADD__(v53++, 1);
        }
        while (!v42);
      }
      if ((v36 | (2 * v35)) < v21)
      {
        int v57 = *v48;
        int v58 = v48[1];
        int v59 = 16 * ((16843010 * (unint64_t)(3584 * v57)) >> 32) + 4096;
        _WORD *v49 = v59;
        int v60 = 16 * ((16843010 * (unint64_t)(3584 * v58)) >> 32) + 4096;
        v49[1] = v60;
        __int16 v61 = (_WORD *)((char *)v49 + v19);
        *__int16 v61 = v59;
        v61[1] = v60;
      }
      v16 += v15;
      v20 += v19;
    }
    uint64_t v62 = 2 * v33;
  }
  else
  {
    uint64_t v62 = 0;
  }
  if ((v62 | v8 & 1) < v22)
  {
    if (v34)
    {
      int v63 = *v16;
      int v64 = v16[1];
      v16 += 2;
      *uint64_t v20 = 16 * ((16843010 * (unint64_t)(3584 * v63)) >> 32) + 4096;
      v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v64)) >> 32) + 4096;
      v20 += 2;
    }
    if (v35)
    {
      uint64_t v65 = -(uint64_t)v35;
      do
      {
        int v66 = *v16;
        int v67 = v16[1];
        v16 += 2;
        *uint64_t v20 = 16 * ((16843010 * (unint64_t)(3584 * v66)) >> 32) + 4096;
        v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v67)) >> 32) + 4096;
        v20 += 2;
        BOOL v42 = __CFADD__(v65++, 1);
      }
      while (!v42);
      uint64_t v68 = 2 * v35;
    }
    else
    {
      uint64_t v68 = 0;
    }
    if ((v68 | (unint64_t)v36) < v21)
    {
      int v69 = *v16;
      int v70 = v16[1];
      *uint64_t v20 = 16 * ((16843010 * (unint64_t)(3584 * v69)) >> 32) + 4096;
      v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v70)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  if (v12 - v11 + (v12 & 1) >= v17) {
    unint64_t v22 = v17;
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v28 + i))) >> 32)
                                  + 4096;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v31 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v31) {
    unint64_t v31 = v22 >> 1;
  }
  char v32 = v9;
  unint64_t v33 = v21 >> 1;
  uint64_t v34 = v9 & 1;
  if (v21 >> 1 >= (v21 - v34) >> 1) {
    unint64_t v33 = (v21 - v34) >> 1;
  }
  if (v8)
  {
    if (v32)
    {
      int v42 = v14[1];
      unint64_t v35 = v14 + 2;
      *uint64_t v20 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
      v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v42)) >> 32) + 4096;
      uint64_t v36 = v20 + 2;
      if (v33)
      {
LABEL_22:
        uint64_t v37 = -(uint64_t)v33;
        do
        {
          int v38 = *v35;
          int v39 = v35[1];
          v35 += 2;
          *uint64_t v36 = 16 * ((16843010 * (unint64_t)(3584 * v38)) >> 32) + 4096;
          v36[1] = 16 * ((16843010 * (unint64_t)(3584 * v39)) >> 32) + 4096;
          v36 += 2;
          BOOL v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        uint64_t v41 = 2 * v33;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v35 = v14;
      uint64_t v36 = v20;
      if (v33) {
        goto LABEL_22;
      }
    }
    uint64_t v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v34) < v21)
    {
      int v43 = *v35;
      int v44 = v35[1];
      *uint64_t v36 = 16 * ((16843010 * (unint64_t)(3584 * v43)) >> 32) + 4096;
      v36[1] = 16 * ((16843010 * (unint64_t)(3584 * v44)) >> 32) + 4096;
    }
    v14 += v13;
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v31)
  {
    for (uint64_t j = 0; j != v31; ++j)
    {
      int v46 = v14;
      unsigned int v47 = v20;
      if (v32)
      {
        int v46 = v14 + 2;
        unint64_t v48 = (16843010 * (unint64_t)(3584 * v14[1])) >> 32;
        __int16 v49 = 16 * ((16843010 * (unint64_t)(3584 * *v14)) >> 32) + 4096;
        *uint64_t v20 = v49;
        LOWORD(v48) = 16 * v48 + 4096;
        v20[1] = v48;
        unint64_t v50 = (_WORD *)((char *)v20 + v19);
        _WORD *v50 = v49;
        v50[1] = v48;
        unsigned int v47 = v20 + 2;
      }
      if (v33)
      {
        uint64_t v51 = -(uint64_t)v33;
        do
        {
          uint64_t v52 = 60365347840 * v46[1];
          int v53 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          *unsigned int v47 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          LOWORD(v52) = 16 * WORD2(v52) + 4096;
          v47[1] = v52;
          v47[2] = v53;
          v47[3] = v52;
          uint64_t v54 = (_WORD *)((char *)v47 + v19);
          *uint64_t v54 = v53;
          v54[1] = v52;
          v46 += 2;
          v54[2] = v53;
          v54[3] = v52;
          v47 += 4;
          BOOL v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v21)
      {
        int v55 = *v46;
        int v56 = v46[1];
        int v57 = 16 * ((16843010 * (unint64_t)(3584 * v55)) >> 32) + 4096;
        *unsigned int v47 = v57;
        int v58 = 16 * ((16843010 * (unint64_t)(3584 * v56)) >> 32) + 4096;
        v47[1] = v58;
        int v59 = (_WORD *)((char *)v47 + v19);
        *int v59 = v57;
        v59[1] = v58;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v60 = 2 * v31;
  }
  else
  {
    uint64_t v60 = 0;
  }
  if ((v60 | v8 & 1) < v22)
  {
    if (v32)
    {
      int v61 = *v14;
      int v62 = v14[1];
      v14 += 2;
      *uint64_t v20 = 16 * ((16843010 * (unint64_t)(3584 * v61)) >> 32) + 4096;
      v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v62)) >> 32) + 4096;
      v20 += 2;
    }
    if (v33)
    {
      uint64_t v63 = -(uint64_t)v33;
      do
      {
        int v64 = *v14;
        int v65 = v14[1];
        v14 += 2;
        *uint64_t v20 = 16 * ((16843010 * (unint64_t)(3584 * v64)) >> 32) + 4096;
        v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v65)) >> 32) + 4096;
        v20 += 2;
        BOOL v40 = __CFADD__(v63++, 1);
      }
      while (!v40);
      uint64_t v66 = 2 * v33;
    }
    else
    {
      uint64_t v66 = 0;
    }
    if ((v66 | (unint64_t)v34) < v21)
    {
      int v67 = *v14;
      int v68 = v14[1];
      *uint64_t v20 = 16 * ((16843010 * (unint64_t)(3584 * v67)) >> 32) + 4096;
      v20[1] = 16 * ((16843010 * (unint64_t)(3584 * v68)) >> 32) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v28 + i))) >> 32);
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v31 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v31) {
    unint64_t v31 = v22 >> 1;
  }
  char v32 = v9;
  unint64_t v33 = v21 >> 1;
  uint64_t v34 = v9 & 1;
  if (v21 >> 1 >= (v21 - v34) >> 1) {
    unint64_t v33 = (v21 - v34) >> 1;
  }
  if (v8)
  {
    if (v32)
    {
      int v42 = v14[1];
      unint64_t v35 = v14 + 2;
      *uint64_t v20 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
      v20[1] = 16 * ((16843010 * (unint64_t)(4095 * v42)) >> 32);
      uint64_t v36 = v20 + 2;
      if (v33)
      {
LABEL_21:
        uint64_t v37 = -(uint64_t)v33;
        do
        {
          int v38 = *v35;
          int v39 = v35[1];
          v35 += 2;
          *uint64_t v36 = 16 * ((16843010 * (unint64_t)(4095 * v38)) >> 32);
          v36[1] = 16 * ((16843010 * (unint64_t)(4095 * v39)) >> 32);
          v36 += 2;
          BOOL v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        uint64_t v41 = 2 * v33;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v35 = v14;
      uint64_t v36 = v20;
      if (v33) {
        goto LABEL_21;
      }
    }
    uint64_t v41 = 0;
LABEL_27:
    if ((v41 | (unint64_t)v34) < v21)
    {
      int v43 = *v35;
      int v44 = v35[1];
      *uint64_t v36 = 16 * ((16843010 * (unint64_t)(4095 * v43)) >> 32);
      v36[1] = 16 * ((16843010 * (unint64_t)(4095 * v44)) >> 32);
    }
    v14 += v13;
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v31)
  {
    for (uint64_t j = 0; j != v31; ++j)
    {
      int v46 = v14;
      unsigned int v47 = v20;
      if (v32)
      {
        int v46 = v14 + 2;
        unint64_t v48 = (16843010 * (unint64_t)(4095 * v14[1])) >> 32;
        int v49 = 16 * ((16843010 * (unint64_t)(4095 * *v14)) >> 32);
        *uint64_t v20 = v49;
        LOWORD(v48) = 16 * v48;
        v20[1] = v48;
        unint64_t v50 = (_WORD *)((char *)v20 + v19);
        _WORD *v50 = v49;
        v50[1] = v48;
        unsigned int v47 = v20 + 2;
      }
      if (v33)
      {
        uint64_t v51 = -(uint64_t)v33;
        do
        {
          unsigned int v52 = 4095 * v46[1];
          int v53 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          *unsigned int v47 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          int v54 = 16 * ((16843010 * (unint64_t)v52) >> 32);
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          v46 += 2;
          int v55 = (_WORD *)((char *)v47 + v19);
          *int v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v47 += 4;
          BOOL v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v21)
      {
        int v56 = *v46;
        int v57 = v46[1];
        int v58 = 16 * ((16843010 * (unint64_t)(4095 * v56)) >> 32);
        *unsigned int v47 = v58;
        int v59 = 16 * ((16843010 * (unint64_t)(4095 * v57)) >> 32);
        v47[1] = v59;
        uint64_t v60 = (_WORD *)((char *)v47 + v19);
        *uint64_t v60 = v58;
        v60[1] = v59;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v61 = 2 * v31;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if (v32)
    {
      int v62 = *v14;
      int v63 = v14[1];
      v14 += 2;
      *uint64_t v20 = 16 * ((16843010 * (unint64_t)(4095 * v62)) >> 32);
      v20[1] = 16 * ((16843010 * (unint64_t)(4095 * v63)) >> 32);
      v20 += 2;
    }
    if (v33)
    {
      uint64_t v64 = -(uint64_t)v33;
      do
      {
        int v65 = *v14;
        int v66 = v14[1];
        v14 += 2;
        *uint64_t v20 = 16 * ((16843010 * (unint64_t)(4095 * v65)) >> 32);
        v20[1] = 16 * ((16843010 * (unint64_t)(4095 * v66)) >> 32);
        v20 += 2;
        BOOL v40 = __CFADD__(v64++, 1);
      }
      while (!v40);
      uint64_t v67 = 2 * v33;
    }
    else
    {
      uint64_t v67 = 0;
    }
    if ((v67 | (unint64_t)v34) < v21)
    {
      int v68 = *v14;
      int v69 = v14[1];
      *uint64_t v20 = 16 * ((16843010 * (unint64_t)(4095 * v68)) >> 32);
      v20[1] = 16 * ((16843010 * (unint64_t)(4095 * v69)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = *a3 + v27 * v12;
    if (v12 >= v11) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v27;
    }
    uint64_t v32 = v30 + v9 + v8 + v31;
    uint64_t v33 = a7[2] + v29 * v19 + v20;
    uint64_t v34 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          *(_WORD *)(v33 + 2 * i) = -1;
          *(_WORD *)(v34 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v32 + i))) >> 32)
                                  + 4096;
        }
      }
      v32 += v27;
      v34 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v36 = v11 & 1;
  if (v25 >> 1 >= (v25 - v36) >> 1) {
    unint64_t v37 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  char v38 = v8;
  unint64_t v39 = v24 >> 1;
  unint64_t v40 = (v24 - v9) >> 1;
  if (v39 >= v40) {
    unint64_t v39 = v40;
  }
  if (v11)
  {
    if (v38)
    {
      int v43 = v15[1];
      uint64_t v41 = v15 + 2;
      *unint64_t v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v43)) >> 32) + 4096;
      int v42 = v22 + 2;
      if (!v39)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v41 = v15;
      int v42 = v22;
      if (!v39) {
        goto LABEL_27;
      }
    }
    uint64_t v44 = -(uint64_t)v39;
    do
    {
      unint64_t v45 = (16843010 * (unint64_t)(3584 * v41[1])) >> 32;
      *int v42 = 16 * ((16843010 * (unint64_t)(3584 * *v41)) >> 32) + 4096;
      v42[1] = 16 * v45 + 4096;
      v41 += 2;
      v42 += 2;
      BOOL v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_27;
  }
LABEL_28:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unint64_t v48 = v15;
      int v49 = v22;
      if (v38)
      {
        int v50 = v15[1];
        unint64_t v48 = v15 + 2;
        *unint64_t v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v50)) >> 32) + 4096;
        int v49 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v51 = -(uint64_t)v39;
        do
        {
          unint64_t v52 = (16843010 * (unint64_t)(3584 * v48[1])) >> 32;
          int v53 = 16 * ((16843010 * (unint64_t)(3584 * *v48)) >> 32) + 4096;
          _WORD *v49 = 16 * ((16843010 * (unint64_t)(3584 * *v48)) >> 32) + 4096;
          LOWORD(v52) = 16 * v52 + 4096;
          v49[1] = v52;
          int v54 = (_WORD *)((char *)v49 + v21);
          *int v54 = v53;
          v54[1] = v52;
          v49 += 2;
          v48 += 2;
          BOOL v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v55 = 2 * v37;
  }
  else
  {
    uint64_t v55 = 0;
  }
  if ((v55 | (unint64_t)v36) < v25)
  {
    if (v38)
    {
      int v56 = *v15;
      int v57 = v15[1];
      v15 += 2;
      *unint64_t v22 = 16 * ((16843010 * (unint64_t)(3584 * v56)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v57)) >> 32) + 4096;
      v22 += 2;
    }
    if (v39)
    {
      uint64_t v58 = -(uint64_t)v39;
      do
      {
        unint64_t v59 = (16843010 * (unint64_t)(3584 * v15[1])) >> 32;
        *unint64_t v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * v59 + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v46 = __CFADD__(v58++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v9 + v8 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1) {
    unint64_t v35 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v35 = v25 >> 1;
  }
  char v36 = v8;
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = (v24 - v9) >> 1;
  if (v37 >= v38) {
    unint64_t v37 = v38;
  }
  if (v11)
  {
    if (v36)
    {
      int v41 = v15[1];
      unint64_t v39 = v15 + 2;
      *unint64_t v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v41)) >> 32) + 4096;
      unint64_t v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v39 = v15;
      unint64_t v40 = v22;
      if (!v37) {
        goto LABEL_27;
      }
    }
    uint64_t v42 = -(uint64_t)v37;
    do
    {
      unint64_t v43 = (16843010 * (unint64_t)(3584 * v39[1])) >> 32;
      *unint64_t v40 = 16 * ((16843010 * (unint64_t)(3584 * *v39)) >> 32) + 4096;
      v40[1] = 16 * v43 + 4096;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      BOOL v46 = v15;
      unsigned int v47 = v22;
      if (v36)
      {
        int v48 = v15[1];
        BOOL v46 = v15 + 2;
        *unint64_t v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
        unsigned int v47 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v49 = -(uint64_t)v37;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(3584 * v46[1])) >> 32;
          int v51 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          *unsigned int v47 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          LOWORD(v50) = 16 * v50 + 4096;
          v47[1] = v50;
          unint64_t v52 = (_WORD *)((char *)v47 + v21);
          *unint64_t v52 = v51;
          v52[1] = v50;
          v47 += 2;
          v46 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v53 = 2 * v35;
  }
  else
  {
    uint64_t v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if (v36)
    {
      int v54 = *v15;
      int v55 = v15[1];
      v15 += 2;
      *unint64_t v22 = 16 * ((16843010 * (unint64_t)(3584 * v54)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v55)) >> 32) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v56 = -(uint64_t)v37;
      do
      {
        unint64_t v57 = (16843010 * (unint64_t)(3584 * v15[1])) >> 32;
        *unint64_t v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * v57 + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v9 + v8 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v31 + i))) >> 32);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1) {
    unint64_t v35 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v35 = v25 >> 1;
  }
  char v36 = v8;
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = (v24 - v9) >> 1;
  if (v37 >= v38) {
    unint64_t v37 = v38;
  }
  if (v11)
  {
    if (v36)
    {
      int v41 = v15[1];
      unint64_t v39 = v15 + 2;
      *unint64_t v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
      v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v41)) >> 32);
      unint64_t v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v39 = v15;
      unint64_t v40 = v22;
      if (!v37) {
        goto LABEL_27;
      }
    }
    uint64_t v42 = -(uint64_t)v37;
    do
    {
      unint64_t v43 = (16843010 * (unint64_t)(4095 * v39[1])) >> 32;
      *unint64_t v40 = 16 * ((16843010 * (unint64_t)(4095 * *v39)) >> 32);
      v40[1] = 16 * v43;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      BOOL v46 = v15;
      unsigned int v47 = v22;
      if (v36)
      {
        int v48 = v15[1];
        BOOL v46 = v15 + 2;
        *unint64_t v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
        v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v48)) >> 32);
        unsigned int v47 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v49 = -(uint64_t)v37;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(4095 * v46[1])) >> 32;
          int v51 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          *unsigned int v47 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          LOWORD(v50) = 16 * v50;
          v47[1] = v50;
          unint64_t v52 = (_WORD *)((char *)v47 + v21);
          *unint64_t v52 = v51;
          v52[1] = v50;
          v47 += 2;
          v46 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v53 = 2 * v35;
  }
  else
  {
    uint64_t v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if (v36)
    {
      int v54 = *v15;
      int v55 = v15[1];
      v15 += 2;
      *unint64_t v22 = 16 * ((16843010 * (unint64_t)(4095 * v54)) >> 32);
      v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v55)) >> 32);
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v56 = -(uint64_t)v37;
      do
      {
        unint64_t v57 = (16843010 * (unint64_t)(4095 * v15[1])) >> 32;
        *unint64_t v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
        v22[1] = 16 * v57;
        v15 += 2;
        v22 += 2;
        BOOL v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(3504 * *(unsigned __int8 *)(v31 + i))) >> 32)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  unint64_t v34 = v25 >> 1;
  unint64_t v35 = v25 - (v9 & 1);
  if (v34 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v34;
  }
  unint64_t v37 = v24 - (v8 & 1);
  if (v24 >> 1 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      int v41 = v15[1];
      unint64_t v39 = v15 + 2;
      *unint64_t v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
      v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v41)) >> 32) + 4096;
      unint64_t v40 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v39 = v15;
      unint64_t v40 = v22;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      unint64_t v43 = (16843010 * (unint64_t)(3584 * v39[1])) >> 32;
      *unint64_t v40 = 16 * ((16843010 * (unint64_t)(3584 * *v39)) >> 32) + 4096;
      v40[1] = 16 * v43 + 4096;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      BOOL v46 = v15;
      unsigned int v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        BOOL v46 = v15 + 2;
        *unint64_t v22 = 16 * ((16843010 * (unint64_t)(3584 * *v15)) >> 32) + 4096;
        v22[1] = 16 * ((16843010 * (unint64_t)(3584 * v48)) >> 32) + 4096;
        unsigned int v47 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v49 = -(uint64_t)v38;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(3584 * v46[1])) >> 32;
          *unsigned int v47 = 16 * ((16843010 * (unint64_t)(3584 * *v46)) >> 32) + 4096;
          v47[1] = 16 * v50 + 4096;
          v46 += 2;
          v47 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = 16
                                  * ((16843010 * (unint64_t)(4095 * *(unsigned __int8 *)(v31 + i))) >> 32);
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  unint64_t v34 = v25 >> 1;
  unint64_t v35 = v25 - (v9 & 1);
  if (v34 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v34;
  }
  unint64_t v37 = v24 - (v8 & 1);
  if (v24 >> 1 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      int v41 = v15[1];
      unint64_t v39 = v15 + 2;
      *unint64_t v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
      v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v41)) >> 32);
      unint64_t v40 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v39 = v15;
      unint64_t v40 = v22;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      unint64_t v43 = (16843010 * (unint64_t)(4095 * v39[1])) >> 32;
      *unint64_t v40 = 16 * ((16843010 * (unint64_t)(4095 * *v39)) >> 32);
      v40[1] = 16 * v43;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      BOOL v46 = v15;
      unsigned int v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        BOOL v46 = v15 + 2;
        *unint64_t v22 = 16 * ((16843010 * (unint64_t)(4095 * *v15)) >> 32);
        v22[1] = 16 * ((16843010 * (unint64_t)(4095 * v48)) >> 32);
        unsigned int v47 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v49 = -(uint64_t)v38;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(4095 * v46[1])) >> 32;
          *unsigned int v47 = 16 * ((16843010 * (unint64_t)(4095 * *v46)) >> 32);
          v47[1] = 16 * v50;
          v46 += 2;
          v47 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[2] + v9;
  unint64_t v12 = v8 & 0xFFFFFFFE;
  uint64_t v13 = v10 + v8;
  uint64_t v14 = (v10 + v8) & 1;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int8 *)(a3[1] + v15 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v18 + 4 * v17);
  unint64_t v21 = v11 - (v9 & 0xFFFFFFFE) + (v11 & 1);
  if (v21 >= a6[2]) {
    unint64_t v21 = a6[2];
  }
  unint64_t v22 = v13 - v12 + v14;
  if (v22 >= a6[3]) {
    unint64_t v22 = a6[3];
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = *a3 + *a4 * v12;
    if (v12 >= v8) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = v27 + (v9 & 0xFFFFFFFE) + v28;
    uint64_t v30 = a7[2] + v26 * v18 + 2 * v17;
    uint64_t v31 = *a7 + v25 * v18 + 2 * v17;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(_WORD *)(v30 + 2 * i) = -1;
          *(_WORD *)(v31 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v29 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v29 += v24;
      v31 += v25;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v33 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v33) {
    unint64_t v33 = v22 >> 1;
  }
  char v34 = v9;
  unint64_t v35 = v21 >> 1;
  uint64_t v36 = v9 & 1;
  if (v21 >> 1 >= (v21 - v36) >> 1) {
    unint64_t v35 = (v21 - v36) >> 1;
  }
  if (v8)
  {
    if (v34)
    {
      int v44 = v16[1];
      unint64_t v37 = v16 + 2;
      *uint64_t v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v16)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
      unint64_t v38 = v20 + 2;
      if (v35)
      {
LABEL_21:
        uint64_t v39 = -(uint64_t)v35;
        do
        {
          int v40 = *v37;
          int v41 = v37[1];
          v37 += 2;
          *unint64_t v38 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v40)) >> 32) << 6) + 4096;
          v38[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v41)) >> 32) << 6) + 4096;
          v38 += 2;
          BOOL v42 = __CFADD__(v39++, 1);
        }
        while (!v42);
        uint64_t v43 = 2 * v35;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v37 = v16;
      unint64_t v38 = v20;
      if (v35) {
        goto LABEL_21;
      }
    }
    uint64_t v43 = 0;
LABEL_27:
    if ((v43 | (unint64_t)v36) < v21)
    {
      int v45 = *v37;
      int v46 = v37[1];
      *unint64_t v38 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v45)) >> 32) << 6) + 4096;
      v38[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v46)) >> 32) << 6) + 4096;
    }
    v16 += v15;
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v33)
  {
    for (uint64_t j = 0; j != v33; ++j)
    {
      int v48 = v16;
      uint64_t v49 = v20;
      if (v34)
      {
        int v48 = v16 + 2;
        unint64_t v50 = (16843010 * (unint64_t)(896 * v16[1])) >> 32;
        __int16 v51 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v16)) >> 32) << 6) + 4096;
        *uint64_t v20 = v51;
        LOWORD(v50) = ((_WORD)v50 << 6) + 4096;
        v20[1] = v50;
        unint64_t v52 = (_WORD *)((char *)v20 + v19);
        *unint64_t v52 = v51;
        v52[1] = v50;
        uint64_t v49 = v20 + 2;
      }
      if (v35)
      {
        uint64_t v53 = -(uint64_t)v35;
        do
        {
          uint64_t v54 = 15091336960 * v48[1];
          int v55 = ((16843010 * (unint64_t)(896 * *v48)) >> 32 << 6) + 4096;
          _WORD *v49 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v48)) >> 32) << 6) + 4096;
          LOWORD(v54) = (WORD2(v54) << 6) + 4096;
          v49[1] = v54;
          v49[2] = v55;
          v49[3] = v54;
          uint64_t v56 = (_WORD *)((char *)v49 + v19);
          *uint64_t v56 = v55;
          v56[1] = v54;
          v48 += 2;
          v56[2] = v55;
          v56[3] = v54;
          v49 += 4;
          BOOL v42 = __CFADD__(v53++, 1);
        }
        while (!v42);
      }
      if ((v36 | (2 * v35)) < v21)
      {
        int v57 = *v48;
        int v58 = v48[1];
        int v59 = ((16843010 * (unint64_t)(896 * v57)) >> 32 << 6) + 4096;
        _WORD *v49 = v59;
        int v60 = ((16843010 * (unint64_t)(896 * v58)) >> 32 << 6) + 4096;
        v49[1] = v60;
        uint64_t v61 = (_WORD *)((char *)v49 + v19);
        *uint64_t v61 = v59;
        v61[1] = v60;
      }
      v16 += v15;
      v20 += v19;
    }
    uint64_t v62 = 2 * v33;
  }
  else
  {
    uint64_t v62 = 0;
  }
  if ((v62 | v8 & 1) < v22)
  {
    if (v34)
    {
      int v63 = *v16;
      int v64 = v16[1];
      v16 += 2;
      *uint64_t v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v63)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v64)) >> 32) << 6) + 4096;
      v20 += 2;
    }
    if (v35)
    {
      uint64_t v65 = -(uint64_t)v35;
      do
      {
        int v66 = *v16;
        int v67 = v16[1];
        v16 += 2;
        *uint64_t v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v66)) >> 32) << 6) + 4096;
        v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v67)) >> 32) << 6) + 4096;
        v20 += 2;
        BOOL v42 = __CFADD__(v65++, 1);
      }
      while (!v42);
      uint64_t v68 = 2 * v35;
    }
    else
    {
      uint64_t v68 = 0;
    }
    if ((v68 | (unint64_t)v36) < v21)
    {
      int v69 = *v16;
      int v70 = v16[1];
      *uint64_t v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v69)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v70)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  if (v12 - v11 + (v12 & 1) >= v17) {
    unint64_t v22 = v17;
  }
  else {
    unint64_t v22 = v12 - v11 + (v12 & 1);
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v28 + i))) >> 32) << 6)
                                  + 4096;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v31 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v31) {
    unint64_t v31 = v22 >> 1;
  }
  char v32 = v9;
  unint64_t v33 = v21 >> 1;
  uint64_t v34 = v9 & 1;
  if (v21 >> 1 >= (v21 - v34) >> 1) {
    unint64_t v33 = (v21 - v34) >> 1;
  }
  if (v8)
  {
    if (v32)
    {
      int v42 = v14[1];
      unint64_t v35 = v14 + 2;
      *uint64_t v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v42)) >> 32) << 6) + 4096;
      uint64_t v36 = v20 + 2;
      if (v33)
      {
LABEL_22:
        uint64_t v37 = -(uint64_t)v33;
        do
        {
          int v38 = *v35;
          int v39 = v35[1];
          v35 += 2;
          *uint64_t v36 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v38)) >> 32) << 6) + 4096;
          v36[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v39)) >> 32) << 6) + 4096;
          v36 += 2;
          BOOL v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        uint64_t v41 = 2 * v33;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v35 = v14;
      uint64_t v36 = v20;
      if (v33) {
        goto LABEL_22;
      }
    }
    uint64_t v41 = 0;
LABEL_28:
    if ((v41 | (unint64_t)v34) < v21)
    {
      int v43 = *v35;
      int v44 = v35[1];
      *uint64_t v36 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v43)) >> 32) << 6) + 4096;
      v36[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v44)) >> 32) << 6) + 4096;
    }
    v14 += v13;
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v31)
  {
    for (uint64_t j = 0; j != v31; ++j)
    {
      int v46 = v14;
      unsigned int v47 = v20;
      if (v32)
      {
        int v46 = v14 + 2;
        unint64_t v48 = (16843010 * (unint64_t)(896 * v14[1])) >> 32;
        __int16 v49 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v14)) >> 32) << 6) + 4096;
        *uint64_t v20 = v49;
        LOWORD(v48) = ((_WORD)v48 << 6) + 4096;
        v20[1] = v48;
        unint64_t v50 = (_WORD *)((char *)v20 + v19);
        _WORD *v50 = v49;
        v50[1] = v48;
        unsigned int v47 = v20 + 2;
      }
      if (v33)
      {
        uint64_t v51 = -(uint64_t)v33;
        do
        {
          uint64_t v52 = 15091336960 * v46[1];
          int v53 = ((16843010 * (unint64_t)(896 * *v46)) >> 32 << 6) + 4096;
          *unsigned int v47 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v46)) >> 32) << 6) + 4096;
          LOWORD(v52) = (WORD2(v52) << 6) + 4096;
          v47[1] = v52;
          v47[2] = v53;
          v47[3] = v52;
          uint64_t v54 = (_WORD *)((char *)v47 + v19);
          *uint64_t v54 = v53;
          v54[1] = v52;
          v46 += 2;
          v54[2] = v53;
          v54[3] = v52;
          v47 += 4;
          BOOL v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v21)
      {
        int v55 = *v46;
        int v56 = v46[1];
        int v57 = ((16843010 * (unint64_t)(896 * v55)) >> 32 << 6) + 4096;
        *unsigned int v47 = v57;
        int v58 = ((16843010 * (unint64_t)(896 * v56)) >> 32 << 6) + 4096;
        v47[1] = v58;
        int v59 = (_WORD *)((char *)v47 + v19);
        *int v59 = v57;
        v59[1] = v58;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v60 = 2 * v31;
  }
  else
  {
    uint64_t v60 = 0;
  }
  if ((v60 | v8 & 1) < v22)
  {
    if (v32)
    {
      int v61 = *v14;
      int v62 = v14[1];
      v14 += 2;
      *uint64_t v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v61)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v62)) >> 32) << 6) + 4096;
      v20 += 2;
    }
    if (v33)
    {
      uint64_t v63 = -(uint64_t)v33;
      do
      {
        int v64 = *v14;
        int v65 = v14[1];
        v14 += 2;
        *uint64_t v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v64)) >> 32) << 6) + 4096;
        v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v65)) >> 32) << 6) + 4096;
        v20 += 2;
        BOOL v40 = __CFADD__(v63++, 1);
      }
      while (!v40);
      uint64_t v66 = 2 * v33;
    }
    else
    {
      uint64_t v66 = 0;
    }
    if ((v66 | (unint64_t)v34) < v21)
    {
      int v67 = *v14;
      int v68 = v14[1];
      *uint64_t v20 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v67)) >> 32) << 6) + 4096;
      v20[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v68)) >> 32) << 6) + 4096;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v10 = a2[2] + v9;
  unint64_t v11 = v8 & 0xFFFFFFFE;
  unint64_t v12 = a2[3] + v8;
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * (v8 >> 1) + (v9 & 0xFFFFFFFE));
  uint64_t v15 = a6[4];
  uint64_t v16 = a6[5];
  unint64_t v18 = a6[2];
  unint64_t v17 = a6[3];
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v16 + 4 * v15);
  unint64_t v21 = v10 - (v9 & 0xFFFFFFFE) + (v10 & 1);
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  unint64_t v22 = v12 - v11 + (v12 & 1);
  if (v22 >= v17) {
    unint64_t v22 = v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v11;
    if (v11 >= v8) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = v26 + (v9 & 0xFFFFFFFE) + v27;
    uint64_t v29 = *a7 + v25 * v16 + 2 * v15;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(_WORD *)(v29 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v28 + i))) >> 32) << 6;
      }
      v28 += v24;
      v29 += v25;
      ++v23;
    }
    while (v23 != v22);
  }
  unint64_t v31 = (v22 - (v8 & 1)) >> 1;
  if (v22 >> 1 < v31) {
    unint64_t v31 = v22 >> 1;
  }
  char v32 = v9;
  unint64_t v33 = v21 >> 1;
  uint64_t v34 = v9 & 1;
  if (v21 >> 1 >= (v21 - v34) >> 1) {
    unint64_t v33 = (v21 - v34) >> 1;
  }
  if (v8)
  {
    if (v32)
    {
      int v42 = v14[1];
      unint64_t v35 = v14 + 2;
      *uint64_t v20 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v14)) >> 32) << 6;
      v20[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v42)) >> 32) << 6;
      uint64_t v36 = v20 + 2;
      if (v33)
      {
LABEL_21:
        uint64_t v37 = -(uint64_t)v33;
        do
        {
          int v38 = *v35;
          int v39 = v35[1];
          v35 += 2;
          *uint64_t v36 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v38)) >> 32) << 6;
          v36[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v39)) >> 32) << 6;
          v36 += 2;
          BOOL v40 = __CFADD__(v37++, 1);
        }
        while (!v40);
        uint64_t v41 = 2 * v33;
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v35 = v14;
      uint64_t v36 = v20;
      if (v33) {
        goto LABEL_21;
      }
    }
    uint64_t v41 = 0;
LABEL_27:
    if ((v41 | (unint64_t)v34) < v21)
    {
      int v43 = *v35;
      int v44 = v35[1];
      *uint64_t v36 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v43)) >> 32) << 6;
      v36[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v44)) >> 32) << 6;
    }
    v14 += v13;
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v31)
  {
    for (uint64_t j = 0; j != v31; ++j)
    {
      int v46 = v14;
      unsigned int v47 = v20;
      if (v32)
      {
        int v46 = v14 + 2;
        unint64_t v48 = (16843010 * (unint64_t)(1023 * v14[1])) >> 32;
        int v49 = (16843010 * (unint64_t)(1023 * *v14)) >> 32 << 6;
        *uint64_t v20 = v49;
        LOWORD(v48) = (_WORD)v48 << 6;
        v20[1] = v48;
        unint64_t v50 = (_WORD *)((char *)v20 + v19);
        _WORD *v50 = v49;
        v50[1] = v48;
        unsigned int v47 = v20 + 2;
      }
      if (v33)
      {
        uint64_t v51 = -(uint64_t)v33;
        do
        {
          unsigned int v52 = 1023 * v46[1];
          int v53 = (16843010 * (unint64_t)(1023 * *v46)) >> 32 << 6;
          *unsigned int v47 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v46)) >> 32) << 6;
          int v54 = (16843010 * (unint64_t)v52) >> 32 << 6;
          v47[1] = v54;
          v47[2] = v53;
          v47[3] = v54;
          v46 += 2;
          int v55 = (_WORD *)((char *)v47 + v19);
          *int v55 = v53;
          v55[1] = v54;
          v55[2] = v53;
          v55[3] = v54;
          v47 += 4;
          BOOL v40 = __CFADD__(v51++, 1);
        }
        while (!v40);
      }
      if ((v34 | (2 * v33)) < v21)
      {
        int v56 = *v46;
        int v57 = v46[1];
        int v58 = (16843010 * (unint64_t)(1023 * v56)) >> 32 << 6;
        *unsigned int v47 = v58;
        int v59 = (16843010 * (unint64_t)(1023 * v57)) >> 32 << 6;
        v47[1] = v59;
        uint64_t v60 = (_WORD *)((char *)v47 + v19);
        *uint64_t v60 = v58;
        v60[1] = v59;
      }
      v14 += v13;
      v20 += v19;
    }
    uint64_t v61 = 2 * v31;
  }
  else
  {
    uint64_t v61 = 0;
  }
  if ((v61 | v8 & 1) < v22)
  {
    if (v32)
    {
      int v62 = *v14;
      int v63 = v14[1];
      v14 += 2;
      *uint64_t v20 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v62)) >> 32) << 6;
      v20[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v63)) >> 32) << 6;
      v20 += 2;
    }
    if (v33)
    {
      uint64_t v64 = -(uint64_t)v33;
      do
      {
        int v65 = *v14;
        int v66 = v14[1];
        v14 += 2;
        *uint64_t v20 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v65)) >> 32) << 6;
        v20[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v66)) >> 32) << 6;
        v20 += 2;
        BOOL v40 = __CFADD__(v64++, 1);
      }
      while (!v40);
      uint64_t v67 = 2 * v33;
    }
    else
    {
      uint64_t v67 = 0;
    }
    if ((v67 | (unint64_t)v34) < v21)
    {
      int v68 = *v14;
      int v69 = v14[1];
      *uint64_t v20 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v68)) >> 32) << 6;
      v20[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v69)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    uint64_t v30 = *a3 + v27 * v12;
    if (v12 >= v11) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v27;
    }
    uint64_t v32 = v30 + v9 + v8 + v31;
    uint64_t v33 = a7[2] + v29 * v19 + v20;
    uint64_t v34 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          *(_WORD *)(v33 + 2 * i) = -1;
          *(_WORD *)(v34 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v32 + i))) >> 32) << 6)
                                  + 4096;
        }
      }
      v32 += v27;
      v34 += v28;
      v33 += v29;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v36 = v11 & 1;
  if (v25 >> 1 >= (v25 - v36) >> 1) {
    unint64_t v37 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v37 = v25 >> 1;
  }
  char v38 = v8;
  unint64_t v39 = v24 >> 1;
  unint64_t v40 = (v24 - v9) >> 1;
  if (v39 >= v40) {
    unint64_t v39 = v40;
  }
  if (v11)
  {
    if (v38)
    {
      int v43 = v15[1];
      uint64_t v41 = v15 + 2;
      *unint64_t v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v43)) >> 32) << 6) + 4096;
      int v42 = v22 + 2;
      if (!v39)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v41 = v15;
      int v42 = v22;
      if (!v39) {
        goto LABEL_27;
      }
    }
    uint64_t v44 = -(uint64_t)v39;
    do
    {
      unint64_t v45 = (16843010 * (unint64_t)(896 * v41[1])) >> 32;
      *int v42 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v41)) >> 32) << 6) + 4096;
      v42[1] = ((_WORD)v45 << 6) + 4096;
      v41 += 2;
      v42 += 2;
      BOOL v46 = __CFADD__(v44++, 1);
    }
    while (!v46);
    goto LABEL_27;
  }
LABEL_28:
  if (v37)
  {
    for (uint64_t j = 0; j != v37; ++j)
    {
      unint64_t v48 = v15;
      int v49 = v22;
      if (v38)
      {
        int v50 = v15[1];
        unint64_t v48 = v15 + 2;
        *unint64_t v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v50)) >> 32) << 6) + 4096;
        int v49 = v22 + 2;
      }
      if (v39)
      {
        uint64_t v51 = -(uint64_t)v39;
        do
        {
          unint64_t v52 = (16843010 * (unint64_t)(896 * v48[1])) >> 32;
          int v53 = ((16843010 * (unint64_t)(896 * *v48)) >> 32 << 6) + 4096;
          _WORD *v49 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v48)) >> 32) << 6) + 4096;
          LOWORD(v52) = ((_WORD)v52 << 6) + 4096;
          v49[1] = v52;
          int v54 = (_WORD *)((char *)v49 + v21);
          *int v54 = v53;
          v54[1] = v52;
          v49 += 2;
          v48 += 2;
          BOOL v46 = __CFADD__(v51++, 1);
        }
        while (!v46);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v55 = 2 * v37;
  }
  else
  {
    uint64_t v55 = 0;
  }
  if ((v55 | (unint64_t)v36) < v25)
  {
    if (v38)
    {
      int v56 = *v15;
      int v57 = v15[1];
      v15 += 2;
      *unint64_t v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v56)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v57)) >> 32) << 6) + 4096;
      v22 += 2;
    }
    if (v39)
    {
      uint64_t v58 = -(uint64_t)v39;
      do
      {
        unint64_t v59 = (16843010 * (unint64_t)(896 * v15[1])) >> 32;
        *unint64_t v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((_WORD)v59 << 6) + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v46 = __CFADD__(v58++, 1);
      }
      while (!v46);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v9 + v8 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v31 + i))) >> 32) << 6)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1) {
    unint64_t v35 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v35 = v25 >> 1;
  }
  char v36 = v8;
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = (v24 - v9) >> 1;
  if (v37 >= v38) {
    unint64_t v37 = v38;
  }
  if (v11)
  {
    if (v36)
    {
      int v41 = v15[1];
      unint64_t v39 = v15 + 2;
      *unint64_t v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v41)) >> 32) << 6) + 4096;
      unint64_t v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v39 = v15;
      unint64_t v40 = v22;
      if (!v37) {
        goto LABEL_27;
      }
    }
    uint64_t v42 = -(uint64_t)v37;
    do
    {
      unint64_t v43 = (16843010 * (unint64_t)(896 * v39[1])) >> 32;
      *unint64_t v40 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v39)) >> 32) << 6) + 4096;
      v40[1] = ((_WORD)v43 << 6) + 4096;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      BOOL v46 = v15;
      unsigned int v47 = v22;
      if (v36)
      {
        int v48 = v15[1];
        BOOL v46 = v15 + 2;
        *unint64_t v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
        unsigned int v47 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v49 = -(uint64_t)v37;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(896 * v46[1])) >> 32;
          int v51 = ((16843010 * (unint64_t)(896 * *v46)) >> 32 << 6) + 4096;
          *unsigned int v47 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v46)) >> 32) << 6) + 4096;
          LOWORD(v50) = ((_WORD)v50 << 6) + 4096;
          v47[1] = v50;
          unint64_t v52 = (_WORD *)((char *)v47 + v21);
          *unint64_t v52 = v51;
          v52[1] = v50;
          v47 += 2;
          v46 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v53 = 2 * v35;
  }
  else
  {
    uint64_t v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if (v36)
    {
      int v54 = *v15;
      int v55 = v15[1];
      v15 += 2;
      *unint64_t v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * v54)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v55)) >> 32) << 6) + 4096;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v56 = -(uint64_t)v37;
      do
      {
        unint64_t v57 = (16843010 * (unint64_t)(896 * v15[1])) >> 32;
        *unint64_t v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((_WORD)v57 << 6) + 4096;
        v15 += 2;
        v22 += 2;
        BOOL v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = v8 & 1;
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v11 = *(void *)(a2 + 40);
  unint64_t v12 = v11 & 0xFFFFFFFE;
  unint64_t v13 = *(void *)(a2 + 24) + v11;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v11 >> 1) + ((v9 + v8) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v16 = *(void *)(a6 + 24);
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = *(void *)(a6 + 40);
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + v21 * v19 + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v10 - (v9 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12 + (v13 & 1);
  if (v25 >= v16) {
    unint64_t v25 = v16;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v11) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v9 + v8 + v30;
    uint64_t v32 = *a7 + v28 * v19 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v31 + i))) >> 32) << 6;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  uint64_t v34 = v11 & 1;
  if (v25 >> 1 >= (v25 - v34) >> 1) {
    unint64_t v35 = (v25 - (v11 & 1)) >> 1;
  }
  else {
    unint64_t v35 = v25 >> 1;
  }
  char v36 = v8;
  unint64_t v37 = v24 >> 1;
  unint64_t v38 = (v24 - v9) >> 1;
  if (v37 >= v38) {
    unint64_t v37 = v38;
  }
  if (v11)
  {
    if (v36)
    {
      int v41 = v15[1];
      unint64_t v39 = v15 + 2;
      *unint64_t v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
      v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v41)) >> 32) << 6;
      unint64_t v40 = v22 + 2;
      if (!v37)
      {
LABEL_27:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v39 = v15;
      unint64_t v40 = v22;
      if (!v37) {
        goto LABEL_27;
      }
    }
    uint64_t v42 = -(uint64_t)v37;
    do
    {
      unint64_t v43 = (16843010 * (unint64_t)(1023 * v39[1])) >> 32;
      *unint64_t v40 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v39)) >> 32) << 6;
      v40[1] = (_WORD)v43 << 6;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_27;
  }
LABEL_28:
  if (v35)
  {
    for (uint64_t j = 0; j != v35; ++j)
    {
      BOOL v46 = v15;
      unsigned int v47 = v22;
      if (v36)
      {
        int v48 = v15[1];
        BOOL v46 = v15 + 2;
        *unint64_t v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
        v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
        unsigned int v47 = v22 + 2;
      }
      if (v37)
      {
        uint64_t v49 = -(uint64_t)v37;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(1023 * v46[1])) >> 32;
          int v51 = (16843010 * (unint64_t)(1023 * *v46)) >> 32 << 6;
          *unsigned int v47 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v46)) >> 32) << 6;
          LOWORD(v50) = (_WORD)v50 << 6;
          v47[1] = v50;
          unint64_t v52 = (_WORD *)((char *)v47 + v21);
          *unint64_t v52 = v51;
          v52[1] = v50;
          v47 += 2;
          v46 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      v22 += v21;
    }
    uint64_t v53 = 2 * v35;
  }
  else
  {
    uint64_t v53 = 0;
  }
  if ((v53 | (unint64_t)v34) < v25)
  {
    if (v36)
    {
      int v54 = *v15;
      int v55 = v15[1];
      v15 += 2;
      *unint64_t v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * v54)) >> 32) << 6;
      v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v55)) >> 32) << 6;
      v22 += 2;
    }
    if (v37)
    {
      uint64_t v56 = -(uint64_t)v37;
      do
      {
        unint64_t v57 = (16843010 * (unint64_t)(1023 * v15[1])) >> 32;
        *unint64_t v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
        v22[1] = (_WORD)v57 << 6;
        v15 += 2;
        v22 += 2;
        BOOL v44 = __CFADD__(v56++, 1);
      }
      while (!v44);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = ((unsigned __int16)((16843010
                                                       * (unint64_t)(876
                                                                          * *(unsigned __int8 *)(v31 + i))) >> 32) << 6)
                                  + 4096;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  unint64_t v34 = v25 >> 1;
  unint64_t v35 = v25 - (v9 & 1);
  if (v34 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v34;
  }
  unint64_t v37 = v24 - (v8 & 1);
  if (v24 >> 1 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      int v41 = v15[1];
      unint64_t v39 = v15 + 2;
      *unint64_t v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
      v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v41)) >> 32) << 6) + 4096;
      unint64_t v40 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v39 = v15;
      unint64_t v40 = v22;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      unint64_t v43 = (16843010 * (unint64_t)(896 * v39[1])) >> 32;
      *unint64_t v40 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v39)) >> 32) << 6) + 4096;
      v40[1] = ((_WORD)v43 << 6) + 4096;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      BOOL v46 = v15;
      unsigned int v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        BOOL v46 = v15 + 2;
        *unint64_t v22 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v15)) >> 32) << 6) + 4096;
        v22[1] = ((unsigned __int16)((16843010 * (unint64_t)(896 * v48)) >> 32) << 6) + 4096;
        unsigned int v47 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v49 = -(uint64_t)v38;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(896 * v46[1])) >> 32;
          *unsigned int v47 = ((unsigned __int16)((16843010 * (unint64_t)(896 * *v46)) >> 32) << 6) + 4096;
          v47[1] = ((_WORD)v50 << 6) + 4096;
          v46 += 2;
          v47 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 >> 1) + (v10 & 0xFFFFFFFFFFFFFFFELL));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - v10;
  unint64_t v24 = v17 - v16;
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v25 = v13 - v12;
  if (v13 - v12 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a8;
    uint64_t v29 = *a3 + *a4 * v12;
    if (v12 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v29 + v10 + v30;
    uint64_t v32 = *a7 + v28 * v18 + v20;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v32 + 2 * i) = (unsigned __int16)((16843010
                                                      * (unint64_t)(1023
                                                                         * *(unsigned __int8 *)(v31 + i))) >> 32) << 6;
      }
      v31 += v27;
      v32 += v28;
      ++v26;
    }
    while (v26 != v25);
  }
  unint64_t v34 = v25 >> 1;
  unint64_t v35 = v25 - (v9 & 1);
  if (v34 >= v35 >> 1) {
    unint64_t v36 = v35 >> 1;
  }
  else {
    unint64_t v36 = v34;
  }
  unint64_t v37 = v24 - (v8 & 1);
  if (v24 >> 1 >= v37 >> 1) {
    unint64_t v38 = v37 >> 1;
  }
  else {
    unint64_t v38 = v24 >> 1;
  }
  if (v9)
  {
    if (v8)
    {
      int v41 = v15[1];
      unint64_t v39 = v15 + 2;
      *unint64_t v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
      v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v41)) >> 32) << 6;
      unint64_t v40 = v22 + 2;
      if (!v38)
      {
LABEL_28:
        v15 += v14;
        unint64_t v22 = (_WORD *)((char *)v22 + v21);
        goto LABEL_29;
      }
    }
    else
    {
      unint64_t v39 = v15;
      unint64_t v40 = v22;
      if (!v38) {
        goto LABEL_28;
      }
    }
    uint64_t v42 = -(uint64_t)v38;
    do
    {
      unint64_t v43 = (16843010 * (unint64_t)(1023 * v39[1])) >> 32;
      *unint64_t v40 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v39)) >> 32) << 6;
      v40[1] = (_WORD)v43 << 6;
      v39 += 2;
      v40 += 2;
      BOOL v44 = __CFADD__(v42++, 1);
    }
    while (!v44);
    goto LABEL_28;
  }
LABEL_29:
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      BOOL v46 = v15;
      unsigned int v47 = v22;
      if (v8)
      {
        int v48 = v15[1];
        BOOL v46 = v15 + 2;
        *unint64_t v22 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v15)) >> 32) << 6;
        v22[1] = (unsigned __int16)((16843010 * (unint64_t)(1023 * v48)) >> 32) << 6;
        unsigned int v47 = v22 + 2;
      }
      if (v38)
      {
        uint64_t v49 = -(uint64_t)v38;
        do
        {
          unint64_t v50 = (16843010 * (unint64_t)(1023 * v46[1])) >> 32;
          *unsigned int v47 = (unsigned __int16)((16843010 * (unint64_t)(1023 * *v46)) >> 32) << 6;
          v47[1] = (_WORD)v50 << 6;
          v46 += 2;
          v47 += 2;
          BOOL v44 = __CFADD__(v49++, 1);
        }
        while (!v44);
      }
      v15 += v14;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
    }
  }
  return 0;
}

uint64_t vt_Copy_420f_8GRAYSCALE(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, void *a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    unint64_t v8 = a2 >> 1;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = *a6;
    uint64_t v11 = *a4;
    uint64_t v12 = 2 * *a3;
    uint64_t v13 = 2 * *a5;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    uint64_t v14 = v10 + *a5;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = v11 + v7;
        uint64_t v17 = v9;
        do
        {
          uint64_t v18 = (unsigned char *)(v14 + v15);
          uint64_t v19 = (unsigned char *)(v10 + v15);
          char v20 = *(unsigned char *)(v11 + v15 + 1);
          *uint64_t v19 = ~*(unsigned char *)(v11 + v15);
          v19[1] = ~v20;
          LOBYTE(v19) = *(unsigned char *)(v16 + v15 + 1);
          *uint64_t v18 = ~*(unsigned char *)(v16 + v15);
          v18[1] = ~(_BYTE)v19;
          v15 += 2;
          --v17;
        }
        while (v17);
      }
      v11 += v12;
      v10 += v13;
      ++v6;
      v14 += v13;
    }
    while (v6 != v8);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_420v(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = a1 >> 1;
    uint64_t v13 = *a6;
    uint64_t v12 = a6[1];
    uint64_t v14 = *a4;
    uint64_t v15 = 2 * *a5;
    uint64_t v16 = 2 * v7;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v17 = v14 + v7;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v18 = 0;
        uint64_t v19 = v13 + v8;
        uint64_t v20 = v11;
        do
        {
          uint64_t v21 = (unsigned char *)(v13 + v18);
          char v22 = sLumaTableFtoV[~*(unsigned char *)(v14 + v18 + 1)];
          char v23 = sLumaTableFtoV[~*(unsigned char *)(v17 + v18)];
          char v24 = sLumaTableFtoV[~*(unsigned char *)(v17 + v18 + 1)];
          *uint64_t v21 = sLumaTableFtoV[~*(unsigned char *)(v14 + v18)];
          v21[1] = v22;
          *(unsigned char *)(v19 + v18) = v23;
          *(unsigned char *)(v19 + v18 + 1) = v24;
          *(_WORD *)(v12 + v18) = -32640;
          v18 += 2;
          --v20;
        }
        while (v20);
      }
      v13 += v15;
      v12 += v9;
      v14 += v16;
      ++v6;
      v17 += v16;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_420f(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = a1 >> 1;
    uint64_t v13 = *a6;
    uint64_t v12 = a6[1];
    uint64_t v14 = *a4;
    uint64_t v15 = 2 * *a5;
    uint64_t v16 = 2 * v7;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v17 = v14 + v7;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v18 = 0;
        uint64_t v19 = v13 + v8;
        uint64_t v20 = v11;
        do
        {
          uint64_t v21 = (unsigned char *)(v13 + v18);
          char v22 = ~*(unsigned char *)(v14 + v18 + 1);
          char v23 = ~*(unsigned char *)(v17 + v18);
          char v24 = ~*(unsigned char *)(v17 + v18 + 1);
          *uint64_t v21 = ~*(unsigned char *)(v14 + v18);
          v21[1] = v22;
          *(unsigned char *)(v19 + v18) = v23;
          *(unsigned char *)(v19 + v18 + 1) = v24;
          *(_WORD *)(v12 + v18) = -32640;
          v18 += 2;
          --v20;
        }
        while (v20);
      }
      v13 += v15;
      v12 += v9;
      v14 += v16;
      ++v6;
      v17 += v16;
    }
    while (v6 != v10);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_32ARGB_2vuy(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CbYpCrYp8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_2vuy;
  *a11 = vt_VImage_Cleanup_32ARGB_2vuy;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_yuvs(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422YpCbYpCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_yuvs;
  *a11 = vt_VImage_Cleanup_32ARGB_yuvs;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_2vuf(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CbYpCrYp8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_2vuf;
  *a11 = vt_VImage_Cleanup_32ARGB_2vuf;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_yuvf(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422YpCbYpCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_yuvf;
  *a11 = vt_VImage_Cleanup_32ARGB_yuvf;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_y420(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_Cb8_Cr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_y420;
  *a11 = vt_VImage_Cleanup_32ARGB_y420;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_f420(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_Cb8_Cr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_f420;
  *a11 = vt_VImage_Cleanup_32ARGB_f420;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_420v(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_420v;
  *a11 = vt_VImage_Cleanup_32ARGB_420v;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_420f(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_420f;
  *a11 = vt_VImage_Cleanup_32ARGB_420f;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_32ARGB_32BGRA(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = *a6;
    uint64_t v10 = *a4;
    do
    {
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
          *(_DWORD *)(v9 + 4 * i) = bswap32(*(_DWORD *)(v10 + 4 * i));
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_VImage_Setup_32ARGB_32BGRA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_32BGRA;
  *a11 = vt_VImage_Cleanup_32ARGB_32BGRA;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_32ARGB_v210(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_v210;
  *a11 = vt_VImage_Cleanup_32ARGB_v210;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_32ARGB_R10k(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_R10k;
  *a11 = vt_VImage_Cleanup_32ARGB_R10k;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_32ARGB_v216(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CbYpCrYp16, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_v216;
  *a11 = vt_VImage_Cleanup_32ARGB_v216;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_y408(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage444AYpCbCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_y408;
  *a11 = vt_VImage_Cleanup_32ARGB_y408;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_v410(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage444CrYpCb10, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_v410;
  *a11 = vt_VImage_Cleanup_32ARGB_v410;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32ARGB_y416(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage444AYpCbCr16, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_y416;
  *a11 = vt_VImage_Cleanup_32ARGB_y416;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_32ARGB_RGhA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_32ARGB_RGhA;
  *a11 = vt_VImage_Cleanup_32ARGB_RGhA;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Copy_32ARGB_w30r(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 0, 1095911234, a1);
}

vImage_Error vt_VImage_Copy_32ARGB_b3a8(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 1, 1095911234, a1);
}

size_t vt_VImage_Setup_32ARGB_xw20(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, char a5, void *a6, void *a7, void (**a8)(void **a1))
{
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v16 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  *((_OWORD *)v16 + 9) = 0u;
  *((_OWORD *)v16 + 10) = 0u;
  *((_OWORD *)v16 + 11) = 0u;
  *((_OWORD *)v16 + 12) = 0u;
  *((_OWORD *)v16 + 13) = 0u;
  *((_OWORD *)v16 + 14) = 0u;
  *((_OWORD *)v16 + 15) = 0u;
  *((_OWORD *)v16 + 16) = 0u;
  *((_OWORD *)v16 + 17) = 0u;
  *((_OWORD *)v16 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v19 = xmmword_193E7D440;
      long long v20 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v19 = xmmword_193E7D460;
      long long v20 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v17 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v19 = xmmword_193E7D480;
      long long v20 = xmmword_193E7D490;
    }
    long long v25 = v19;
    long long v26 = v20;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v25;
    goto LABEL_11;
  }
  uint64_t v17 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v17;
LABEL_11:
  size_t result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v16 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x11u, 0);
  if (!result && (*((void *)v16 + 34) != a1 || *((void *)v16 + 33) != a2 || *((void *)v16 + 35) != 4 * a1))
  {
    long long v22 = (void *)*((void *)v16 + 32);
    if (v22)
    {
      *((void *)v16 + 32) = 0;
      free(v22);
    }
    unint64_t v23 = 4 * a1;
    if (a2 && v23)
    {
      size_t result = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v23)) {
        goto LABEL_25;
      }
      size_t result = v23 * a2;
      if (!(v23 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v24 = 1556728742;
    }
    else
    {
      size_t result = 0;
      malloc_type_id_t v24 = 1270757447;
    }
    size_t result = (size_t)malloc_type_malloc(result, v24);
LABEL_25:
    *((void *)v16 + 32) = result;
    *((void *)v16 + 33) = a2;
    *((void *)v16 + 34) = a1;
    *((void *)v16 + 35) = v23;
  }
  *((void *)v16 + 37) = a4;
  *((unsigned char *)v16 + 288) = a5;
  *a7 = vt_VImage_Copy_32ARGB_xw20;
  *a8 = vt_VImage_Cleanup_32ARGB_xw20;
  *a6 = v16;
  return result;
}

size_t vt_VImage_Setup_32ARGB_xw22(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, char a5, void *a6, void *a7, void (**a8)(void **a1))
{
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v16 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  *((_OWORD *)v16 + 9) = 0u;
  *((_OWORD *)v16 + 10) = 0u;
  *((_OWORD *)v16 + 11) = 0u;
  *((_OWORD *)v16 + 12) = 0u;
  *((_OWORD *)v16 + 13) = 0u;
  *((_OWORD *)v16 + 14) = 0u;
  *((_OWORD *)v16 + 15) = 0u;
  *((_OWORD *)v16 + 16) = 0u;
  *((_OWORD *)v16 + 17) = 0u;
  *((_OWORD *)v16 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v19 = xmmword_193E7D440;
      long long v20 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v19 = xmmword_193E7D460;
      long long v20 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v17 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v19 = xmmword_193E7D480;
      long long v20 = xmmword_193E7D490;
    }
    long long v25 = v19;
    long long v26 = v20;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v25;
    goto LABEL_11;
  }
  uint64_t v17 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v17;
LABEL_11:
  size_t result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v16 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x10u, 0);
  if (!result && (*((void *)v16 + 34) != a1 || *((void *)v16 + 33) != a2 || *((void *)v16 + 35) != 4 * a1))
  {
    long long v22 = (void *)*((void *)v16 + 32);
    if (v22)
    {
      *((void *)v16 + 32) = 0;
      free(v22);
    }
    unint64_t v23 = 4 * a1;
    if (a2 && v23)
    {
      size_t result = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v23)) {
        goto LABEL_25;
      }
      size_t result = v23 * a2;
      if (!(v23 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v24 = 1556728742;
    }
    else
    {
      size_t result = 0;
      malloc_type_id_t v24 = 1270757447;
    }
    size_t result = (size_t)malloc_type_malloc(result, v24);
LABEL_25:
    *((void *)v16 + 32) = result;
    *((void *)v16 + 33) = a2;
    *((void *)v16 + 34) = a1;
    *((void *)v16 + 35) = v23;
  }
  *((void *)v16 + 37) = a4;
  *((unsigned char *)v16 + 288) = a5;
  *a7 = vt_VImage_Copy_32ARGB_xw22;
  *a8 = vt_VImage_Cleanup_32ARGB_xw22;
  *a6 = v16;
  return result;
}

size_t vt_VImage_Setup_32ARGB_xw44(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, char a5, void *a6, void *a7, void (**a8)(void **a1))
{
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v16 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)uint64_t v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  *((_OWORD *)v16 + 9) = 0u;
  *((_OWORD *)v16 + 10) = 0u;
  *((_OWORD *)v16 + 11) = 0u;
  *((_OWORD *)v16 + 12) = 0u;
  *((_OWORD *)v16 + 13) = 0u;
  *((_OWORD *)v16 + 14) = 0u;
  *((_OWORD *)v16 + 15) = 0u;
  *((_OWORD *)v16 + 16) = 0u;
  *((_OWORD *)v16 + 17) = 0u;
  *((_OWORD *)v16 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v19 = xmmword_193E7D440;
      long long v20 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v19 = xmmword_193E7D460;
      long long v20 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v17 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v19 = xmmword_193E7D480;
      long long v20 = xmmword_193E7D490;
    }
    long long v25 = v19;
    long long v26 = v20;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v25;
    goto LABEL_11;
  }
  uint64_t v17 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v17;
LABEL_11:
  size_t result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v16 + 1, kvImageARGB16Q12|kvImageARGB16U, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, 0);
  if (!result && (*((void *)v16 + 34) != a1 || *((void *)v16 + 33) != a2 || *((void *)v16 + 35) != 4 * a1))
  {
    long long v22 = (void *)*((void *)v16 + 32);
    if (v22)
    {
      *((void *)v16 + 32) = 0;
      free(v22);
    }
    unint64_t v23 = 4 * a1;
    if (a2 && v23)
    {
      size_t result = 0;
      if (((v23 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v23)) {
        goto LABEL_25;
      }
      size_t result = v23 * a2;
      if (!(v23 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v24 = 1556728742;
    }
    else
    {
      size_t result = 0;
      malloc_type_id_t v24 = 1270757447;
    }
    size_t result = (size_t)malloc_type_malloc(result, v24);
LABEL_25:
    *((void *)v16 + 32) = result;
    *((void *)v16 + 33) = a2;
    *((void *)v16 + 34) = a1;
    *((void *)v16 + 35) = v23;
  }
  *((void *)v16 + 37) = a4;
  *((unsigned char *)v16 + 288) = a5;
  *a7 = vt_VImage_Copy_32ARGB_xw44;
  *a8 = vt_VImage_Cleanup_32ARGB_xw44;
  *a6 = v16;
  return result;
}

uint64_t vt_Copy_32ARGB_p420ITU2020(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v182 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12) {
    unint64_t v15 = v13 - v12;
  }
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v16 = v14 - v11;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 < v14 - v11) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v17 = v13 % 6;
  BOOL v18 = v15 >= v17;
  unint64_t v19 = v15 - v17;
  if (!v18) {
    unint64_t v19 = 0;
  }
  unint64_t v175 = v19;
  if (v16 >= 2)
  {
    uint64_t v20 = 0;
    unsigned int v163 = v12 % 3;
    unsigned int v155 = v19 % 3;
    unint64_t v177 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v162 = v16 >> 1;
    unint64_t v21 = a8[1];
    long long v22 = (int *)(a7[1] + v21 * (v11 >> 1) + 4 * (v12 / 3));
    unint64_t v23 = *a7 + *a8 * v11 + 4 * (v12 / 3);
    malloc_type_id_t v24 = (unsigned int *)(v23 + *a8);
    uint64_t v25 = *a4;
    uint64_t v26 = *a3 + *a4 * v9;
    unint64_t v174 = v15;
    uint64_t v27 = v26 + 4 * v10;
    uint64_t v28 = v27 + v25;
    uint64_t v161 = 2 * v25;
    uint64_t v160 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v159 = v21 >> 2;
    uint64_t v29 = *a3 + v25 + v25 * (*(void *)(a2 + 40) + (*(void *)(a2 + 40) & 1));
    do
    {
      v170 = v22;
      uint64_t v171 = v20;
      uint64_t v30 = 0;
      uint64_t v167 = v26;
      v168 = v24;
      uint64_t v31 = v26;
      uint64_t v164 = v29;
      uint64_t v165 = v28;
      unsigned int v32 = v163;
      unsigned int v33 = v163;
      unint64_t v169 = v23;
      unint64_t v34 = (unsigned int *)v23;
      uint64_t v166 = v27;
      uint64_t v35 = 4 * v10;
      do
      {
        unint64_t v36 = v34;
        unint64_t v37 = v24;
        if (v30)
        {
          int v41 = (unsigned __int8 *)(v27 - 3);
          uint64_t v42 = (unsigned __int8 *)(v27 - 2);
          unint64_t v43 = (unsigned __int8 *)(v27 - 1);
          int v38 = *(unsigned __int8 *)(v31 + v35 + 1);
          int v39 = *(unsigned __int8 *)(v31 + v35 + 2);
          int v40 = *(unsigned __int8 *)(v31 + v35 + 3);
        }
        else
        {
          int v38 = 0;
          int v39 = 0;
          int v40 = 0;
          int v41 = (unsigned __int8 *)(v31 + v35 + 1);
          uint64_t v42 = (unsigned __int8 *)(v31 + v35 + 2);
          unint64_t v43 = (unsigned __int8 *)(v31 + v35 + 3);
        }
        int v44 = *v43;
        int v45 = *v42;
        int v46 = *v41;
        unint64_t v47 = *((unsigned __int8 *)&v182 + v32);
        *unint64_t v36 = (((269488145
                              * (unint64_t)(1023
                                                 * ((1664 * v44 + 540672 + 19024 * v45 + 7371 * v46) >> 15)
                                                 + 127)) >> 32) >> 4 << v47) | *v36 & ~(1023 << v47);
        if (v30)
        {
          int v51 = (unsigned __int8 *)(v28 - 3);
          unint64_t v52 = (unsigned __int8 *)(v28 - 2);
          uint64_t v53 = (unsigned __int8 *)(v28 - 1);
          int v48 = *(unsigned __int8 *)(v29 + v35 + 1);
          int v49 = *(unsigned __int8 *)(v29 + v35 + 2);
          int v50 = *(unsigned __int8 *)(v29 + v35 + 3);
        }
        else
        {
          int v48 = 0;
          int v49 = 0;
          int v50 = 0;
          int v51 = (unsigned __int8 *)(v29 + v35 + 1);
          unint64_t v52 = (unsigned __int8 *)(v29 + v35 + 2);
          uint64_t v53 = (unsigned __int8 *)(v29 + v35 + 3);
        }
        int v54 = *v53;
        int v55 = *v52;
        int v56 = *v51;
        if (v30)
        {
          int v59 = v40 + v44 + v50 + v54;
          int v60 = v39 + v45 + v49 + v55;
          int v61 = v38 + v46 + v48 + v56;
          unint64_t v57 = (67372037
               * (unint64_t)(1023 * ((-10342 * v60 + 14350 * v59 - 4006 * v61 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v58 = (67372037
               * (unint64_t)(1023 * ((-13195 * v60 - 1153 * v59 + 14350 * v61 + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v57) = 0;
          LODWORD(v58) = 0;
        }
        *unint64_t v37 = *v37 & ~(1023 << v47) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((1664 * v54
                                                                                         + 540672
                                                                                         + 19024 * v55
                                                                                         + 7371 * v56) >> 15)
                                                                         + 127)) >> 32) >> 4 << v47);
        if (v32 == 2) {
          unsigned int v32 = 0;
        }
        else {
          ++v32;
        }
        if (v30)
        {
          unint64_t v62 = *((unsigned __int8 *)&v182 + v33);
          *long long v22 = *v22 & ~(1023 << v62) | (v57 << v62);
          int v63 = (int *)((char *)v22 + ((v62 >> 2) & 0x3C));
          if (v33 == 2) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = v33 + 1;
          }
          unint64_t v65 = *((unsigned __int8 *)&v182 + v64);
          *int v63 = *v63 & ~(1023 << v65) | (v58 << v65);
          unint64_t v66 = v65 >> 2;
          uint64_t v35 = 4 * v10;
          long long v22 = (int *)((char *)v63 + (v66 & 0x3C));
          if (v64 == 2) {
            unsigned int v33 = 0;
          }
          else {
            unsigned int v33 = v64 + 1;
          }
        }
        v27 += 4;
        unint64_t v34 = &v36[v47 >> 4];
        v28 += 4;
        ++v30;
        v29 += 4;
        malloc_type_id_t v24 = &v37[v47 >> 4];
        v31 += 4;
      }
      while (v177 != v30);
      if (v177 >= v175)
      {
        uint64_t v181 = v31 + v35;
        uint64_t v179 = v29 + v35;
        unint64_t v70 = v177;
        unint64_t v121 = v174;
      }
      else
      {
        unsigned int v158 = v33;
        uint64_t v67 = 0;
        unint64_t v68 = 0;
        unint64_t v156 = v47 >> 2;
        uint64_t v69 = (v47 >> 2) & 0x3C;
        v157 = v36;
        v172 = (char *)v36 + v69;
        v173 = (char *)v37 + v69;
        unint64_t v70 = v177;
        do
        {
          v178 = (unsigned int *)&v22[v68 / 4];
          uint64_t v180 = v67;
          v176 = v22;
          int v71 = (unsigned __int8 *)(v27 + v67);
          int v72 = *(unsigned __int8 *)(v27 + v67 + 1);
          int v73 = v71[2];
          int v74 = v71[3];
          unsigned int v75 = 7371 * v72 + 540672 + 19024 * v73 + 1664 * v74;
          int v76 = v71[5];
          int v77 = v71[6];
          int v78 = v71[7];
          unsigned int v79 = 7371 * v76 + 540672 + 19024 * v77 + 1664 * v78;
          int v80 = *(unsigned __int8 *)(v28 + v180 + 1);
          int v81 = *(unsigned __int8 *)(v28 + v180 + 2);
          int v82 = *(unsigned __int8 *)(v28 + v180 + 3);
          int v83 = *(unsigned __int8 *)(v28 + v180 + 5);
          int v84 = *(unsigned __int8 *)(v28 + v180 + 6);
          int v85 = *(unsigned __int8 *)(v28 + v180 + 7);
          v86 = (unsigned int *)&v172[v68];
          unint64_t v87 = 269488145 * (1023 * ((7371 * v80 + 540672 + 19024 * v81 + 1664 * v82) >> 15) + 127);
          int v88 = v78 + v74 + v82 + v85;
          int v89 = v77 + v73 + v81 + v84;
          int v90 = v76 + v72 + v80 + v83;
          unint64_t v91 = 67372037 * (1023 * ((-10342 * v89 - 4006 * v90 + 14350 * v88 + 0x1000000) >> 17) + 127);
          unsigned int v92 = -13195 * v89 + 14350 * v90 - 1153 * v88 + 0x1000000;
          LODWORD(v87) = (v87 >> 36) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((7371 * v83
                                                                                         + 540672
                                                                                         + 19024 * v84
                                                                                         + 1664 * v85) >> 15)
                                                                         + 127)) >> 32) >> 4 << 10);
          int v93 = v71[9];
          int v94 = v71[10];
          int v95 = v71[11];
          unsigned int v96 = (((269488145 * (unint64_t)(1023 * (v75 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v79 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((7371 * v93 + 540672 + 19024 * v94 + 1664 * v95) >> 15) + 127)) >> 32) >> 4 << 20);
          int v97 = (v91 >> 34) | (((67372037 * (unint64_t)(1023 * (v92 >> 17) + 127)) >> 32) >> 2 << 10);
          unsigned int *v86 = v96;
          int v98 = v71[13];
          int v99 = v71[14];
          LODWORD(v91) = v71[15];
          int v100 = *(unsigned __int8 *)(v28 + v180 + 9);
          int v101 = *(unsigned __int8 *)(v28 + v180 + 10);
          int v102 = *(unsigned __int8 *)(v28 + v180 + 11);
          unint64_t v103 = (269488145
                * (unint64_t)(1023 * ((7371 * v98 + 540672 + 19024 * v99 + 1664 * v91) >> 15) + 127)) >> 36;
          *(_DWORD *)&v173[v68] = v87 | (((269488145
                                                       * (unint64_t)(1023
                                                                          * ((7371 * v100
                                                                                          + 540672
                                                                                          + 19024 * v101
                                                                                          + 1664 * v102) >> 15)
                                                                          + 127)) >> 32) >> 4 << 20);
          LODWORD(v87) = *(unsigned __int8 *)(v28 + v180 + 14);
          int v104 = *(unsigned __int8 *)(v28 + v180 + 13);
          int v105 = *(unsigned __int8 *)(v28 + v180 + 15);
          LODWORD(v91) = v91 + v95 + v102 + v105;
          int v106 = 7371 * v104 + 540672 + 19024 * v87;
          int v107 = v99 + v94 + v101 + v87;
          int v108 = v98 + v93 + v100 + v104;
          unsigned int *v178 = v97 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-10342 * v107
                                                                          - 4006 * v108
                                                                          + 14350 * v91
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          int v109 = v71[17];
          unsigned int v110 = 1023 * ((v106 + 1664 * v105) >> 15);
          int v111 = v71[18];
          int v112 = v71[19];
          int v113 = v71[21];
          int v114 = v71[22];
          LODWORD(v71) = v71[23];
          v86[1] = v103 | (((269488145
                                         * (unint64_t)(1023
                                                            * ((7371 * v109
                                                                            + 540672
                                                                            + 19024 * v111
                                                                            + 1664 * v112) >> 15)
                                                            + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((7371 * v113 + 540672 + 19024 * v114 + 1664 * v71) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v86) = *(unsigned __int8 *)(v28 + v180 + 17);
          LODWORD(v103) = *(unsigned __int8 *)(v28 + v180 + 18);
          int v115 = *(unsigned __int8 *)(v28 + v180 + 19);
          int v116 = *(unsigned __int8 *)(v28 + v180 + 21);
          int v117 = *(unsigned __int8 *)(v28 + v180 + 22);
          int v118 = *(unsigned __int8 *)(v28 + v180 + 23);
          *(_DWORD *)&v173[v68 + 4] = (((269488145 * (unint64_t)(v110 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((7371 * v86 + 540672 + 19024 * v103 + 1664 * v115) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((7371 * v116 + 540672 + 19024 * v117 + 1664 * v118) >> 15) + 127)) >> 32) >> 4 << 20);
          unsigned int v119 = 1023 * ((-13195 * v107 + 14350 * v108 - 1153 * v91 + 0x1000000) >> 17);
          LODWORD(v91) = v103 + v117;
          long long v22 = v176;
          v178[1] = (((67372037 * (unint64_t)(v119 + 127)) >> 32) >> 2) | (((67372037 * (unint64_t)(1023 * ((-13195 * (v114 + v111 + v91) + 14350 * (v113 + v109 + v86 + v116) - 1153 * (v71 + v112 + v115 + v118) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-10342 * (v114 + v111 + v91) - 4006 * (v113 + v109 + v86 + v116) + 14350 * (v71 + v112 + v115 + v118) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v70 += 6;
          v68 += 8;
          uint64_t v67 = v180 + 24;
        }
        while (v70 < v175);
        long long v22 = &v176[v68 / 4];
        uint64_t v120 = v156 & 0x3C;
        malloc_type_id_t v24 = (unsigned int *)((char *)v37 + v120 + v68);
        unint64_t v34 = (unsigned int *)((char *)v157 + v120 + v68);
        uint64_t v181 = v27 + v67;
        uint64_t v179 = v28 + v67;
        unint64_t v121 = v174;
        unsigned int v33 = v158;
      }
      if (v70 < v121)
      {
        uint64_t v122 = 0;
        unsigned int v123 = v155;
        uint64_t v124 = v179;
        uint64_t v125 = v181;
        do
        {
          if (v70)
          {
            v129 = (unsigned __int8 *)(v125 - 3);
            v130 = (unsigned __int8 *)(v125 - 2);
            v131 = (unsigned __int8 *)(v125 - 1);
            int v126 = *(unsigned __int8 *)(v181 + v122 + 1);
            int v127 = *(unsigned __int8 *)(v181 + v122 + 2);
            int v128 = *(unsigned __int8 *)(v181 + v122 + 3);
          }
          else
          {
            int v126 = 0;
            int v127 = 0;
            int v128 = 0;
            v129 = (unsigned __int8 *)(v181 + v122 + 1);
            v130 = (unsigned __int8 *)(v181 + v122 + 2);
            v131 = (unsigned __int8 *)(v181 + v122 + 3);
          }
          int v132 = *v131;
          int v133 = *v130;
          int v134 = *v129;
          unint64_t v135 = *((unsigned __int8 *)&v182 + v123);
          *unint64_t v34 = (((269488145
                                * (unint64_t)(1023
                                                   * ((1664 * v132 + 540672 + 19024 * v133 + 7371 * v134) >> 15)
                                                   + 127)) >> 32) >> 4 << v135) | *v34 & ~(1023 << v135);
          if (v70)
          {
            v139 = (unsigned __int8 *)(v124 - 3);
            v140 = (unsigned __int8 *)(v124 - 2);
            v141 = (unsigned __int8 *)(v124 - 1);
            int v136 = *(unsigned __int8 *)(v179 + v122 + 1);
            int v137 = *(unsigned __int8 *)(v179 + v122 + 2);
            int v138 = *(unsigned __int8 *)(v179 + v122 + 3);
          }
          else
          {
            int v136 = 0;
            int v137 = 0;
            int v138 = 0;
            v139 = (unsigned __int8 *)(v179 + v122 + 1);
            v140 = (unsigned __int8 *)(v179 + v122 + 2);
            v141 = (unsigned __int8 *)(v179 + v122 + 3);
          }
          int v142 = *v141;
          int v143 = *v140;
          int v144 = *v139;
          if (v70)
          {
            int v147 = v128 + v132 + v138 + v142;
            int v148 = v127 + v133 + v137 + v143;
            int v149 = v126 + v134 + v136 + v144;
            unint64_t v145 = (67372037
                  * (unint64_t)(1023
                                     * ((-10342 * v148 + 14350 * v147 - 4006 * v149 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            unint64_t v146 = (67372037
                  * (unint64_t)(1023
                                     * ((-13195 * v148 - 1153 * v147 + 14350 * v149 + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v145) = 0;
            LODWORD(v146) = 0;
          }
          unsigned int *v24 = *v24 & ~(1023 << v135) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((1664 * v142
                                                                                            + 540672
                                                                                            + 19024 * v143
                                                                                            + 7371 * v144) >> 15)
                                                                            + 127)) >> 32) >> 4 << v135);
          if (v123 == 2) {
            unsigned int v123 = 0;
          }
          else {
            ++v123;
          }
          if (v70)
          {
            unint64_t v150 = *((unsigned __int8 *)&v182 + v33);
            *long long v22 = *v22 & ~(1023 << v150) | (v145 << v150);
            v151 = (int *)((char *)v22 + ((v150 >> 2) & 0x3C));
            if (v33 == 2) {
              unsigned int v152 = 0;
            }
            else {
              unsigned int v152 = v33 + 1;
            }
            unint64_t v153 = *((unsigned __int8 *)&v182 + v152);
            int *v151 = *v151 & ~(1023 << v153) | (v146 << v153);
            long long v22 = (int *)((char *)v151 + ((v153 >> 2) & 0x3C));
            if (v152 == 2) {
              unsigned int v33 = 0;
            }
            else {
              unsigned int v33 = v152 + 1;
            }
          }
          v125 += 4;
          v34 += v135 >> 4;
          v124 += 4;
          ++v70;
          v122 += 4;
          v24 += v135 >> 4;
        }
        while (v174 != v70);
      }
      unint64_t v23 = v169 + 4 * v160;
      uint64_t v27 = v166 + v161;
      uint64_t v28 = v165 + v161;
      uint64_t v20 = v171 + 1;
      uint64_t v29 = v164 + v161;
      uint64_t v26 = v167 + v161;
      malloc_type_id_t v24 = &v168[v160];
      long long v22 = &v170[v159];
    }
    while (v171 + 1 != v162);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_p420ITU709(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v182 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12) {
    unint64_t v15 = v13 - v12;
  }
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v16 = v14 - v11;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 < v14 - v11) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v17 = v13 % 6;
  BOOL v18 = v15 >= v17;
  unint64_t v19 = v15 - v17;
  if (!v18) {
    unint64_t v19 = 0;
  }
  unint64_t v175 = v19;
  if (v16 >= 2)
  {
    uint64_t v20 = 0;
    unsigned int v163 = v12 % 3;
    unsigned int v155 = v19 % 3;
    unint64_t v177 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v162 = v16 >> 1;
    unint64_t v21 = a8[1];
    long long v22 = (int *)(a7[1] + v21 * (v11 >> 1) + 4 * (v12 / 3));
    unint64_t v23 = *a7 + *a8 * v11 + 4 * (v12 / 3);
    malloc_type_id_t v24 = (unsigned int *)(v23 + *a8);
    uint64_t v25 = *a4;
    uint64_t v26 = *a3 + *a4 * v9;
    unint64_t v174 = v15;
    uint64_t v27 = v26 + 4 * v10;
    uint64_t v28 = v27 + v25;
    uint64_t v161 = 2 * v25;
    uint64_t v160 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v159 = v21 >> 2;
    uint64_t v29 = *a3 + v25 + v25 * (*(void *)(a2 + 40) + (*(void *)(a2 + 40) & 1));
    do
    {
      v170 = v22;
      uint64_t v171 = v20;
      uint64_t v30 = 0;
      uint64_t v167 = v26;
      v168 = v24;
      uint64_t v31 = v26;
      uint64_t v164 = v29;
      uint64_t v165 = v28;
      unsigned int v32 = v163;
      unsigned int v33 = v163;
      unint64_t v169 = v23;
      unint64_t v34 = (unsigned int *)v23;
      uint64_t v166 = v27;
      uint64_t v35 = 4 * v10;
      do
      {
        unint64_t v36 = v34;
        unint64_t v37 = v24;
        if (v30)
        {
          int v41 = (unsigned __int8 *)(v27 - 3);
          uint64_t v42 = (unsigned __int8 *)(v27 - 2);
          unint64_t v43 = (unsigned __int8 *)(v27 - 1);
          int v38 = *(unsigned __int8 *)(v31 + v35 + 1);
          int v39 = *(unsigned __int8 *)(v31 + v35 + 2);
          int v40 = *(unsigned __int8 *)(v31 + v35 + 3);
        }
        else
        {
          int v38 = 0;
          int v39 = 0;
          int v40 = 0;
          int v41 = (unsigned __int8 *)(v31 + v35 + 1);
          uint64_t v42 = (unsigned __int8 *)(v31 + v35 + 2);
          unint64_t v43 = (unsigned __int8 *)(v31 + v35 + 3);
        }
        int v44 = *v43;
        int v45 = *v42;
        int v46 = *v41;
        unint64_t v47 = *((unsigned __int8 *)&v182 + v32);
        *unint64_t v36 = (((269488145
                              * (unint64_t)(1023
                                                 * ((2032 * v44 + 540672 + 20127 * v45 + 5983 * v46) >> 15)
                                                 + 127)) >> 32) >> 4 << v47) | *v36 & ~(1023 << v47);
        if (v30)
        {
          int v51 = (unsigned __int8 *)(v28 - 3);
          unint64_t v52 = (unsigned __int8 *)(v28 - 2);
          uint64_t v53 = (unsigned __int8 *)(v28 - 1);
          int v48 = *(unsigned __int8 *)(v29 + v35 + 1);
          int v49 = *(unsigned __int8 *)(v29 + v35 + 2);
          int v50 = *(unsigned __int8 *)(v29 + v35 + 3);
        }
        else
        {
          int v48 = 0;
          int v49 = 0;
          int v50 = 0;
          int v51 = (unsigned __int8 *)(v29 + v35 + 1);
          unint64_t v52 = (unsigned __int8 *)(v29 + v35 + 2);
          uint64_t v53 = (unsigned __int8 *)(v29 + v35 + 3);
        }
        int v54 = *v53;
        int v55 = *v52;
        int v56 = *v51;
        if (v30)
        {
          int v59 = v40 + v44 + v50 + v54;
          int v60 = v39 + v45 + v49 + v55;
          int v61 = v38 + v46 + v48 + v56;
          unint64_t v57 = (67372037
               * (unint64_t)(1023 * ((-11093 * v60 + 14392 * v59 - 3297 * v61 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v58 = (67372037
               * (unint64_t)(1023 * ((-13072 * v60 - 1319 * v59 + 14392 * v61 + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v57) = 0;
          LODWORD(v58) = 0;
        }
        *unint64_t v37 = *v37 & ~(1023 << v47) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((2032 * v54
                                                                                         + 540672
                                                                                         + 20127 * v55
                                                                                         + 5983 * v56) >> 15)
                                                                         + 127)) >> 32) >> 4 << v47);
        if (v32 == 2) {
          unsigned int v32 = 0;
        }
        else {
          ++v32;
        }
        if (v30)
        {
          unint64_t v62 = *((unsigned __int8 *)&v182 + v33);
          *long long v22 = *v22 & ~(1023 << v62) | (v57 << v62);
          int v63 = (int *)((char *)v22 + ((v62 >> 2) & 0x3C));
          if (v33 == 2) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = v33 + 1;
          }
          unint64_t v65 = *((unsigned __int8 *)&v182 + v64);
          *int v63 = *v63 & ~(1023 << v65) | (v58 << v65);
          unint64_t v66 = v65 >> 2;
          uint64_t v35 = 4 * v10;
          long long v22 = (int *)((char *)v63 + (v66 & 0x3C));
          if (v64 == 2) {
            unsigned int v33 = 0;
          }
          else {
            unsigned int v33 = v64 + 1;
          }
        }
        v27 += 4;
        unint64_t v34 = &v36[v47 >> 4];
        v28 += 4;
        ++v30;
        v29 += 4;
        malloc_type_id_t v24 = &v37[v47 >> 4];
        v31 += 4;
      }
      while (v177 != v30);
      if (v177 >= v175)
      {
        uint64_t v181 = v31 + v35;
        uint64_t v179 = v29 + v35;
        unint64_t v70 = v177;
        unint64_t v121 = v174;
      }
      else
      {
        unsigned int v158 = v33;
        uint64_t v67 = 0;
        unint64_t v68 = 0;
        unint64_t v156 = v47 >> 2;
        uint64_t v69 = (v47 >> 2) & 0x3C;
        v157 = v36;
        v172 = (char *)v36 + v69;
        v173 = (char *)v37 + v69;
        unint64_t v70 = v177;
        do
        {
          v178 = (unsigned int *)&v22[v68 / 4];
          uint64_t v180 = v67;
          v176 = v22;
          int v71 = (unsigned __int8 *)(v27 + v67);
          int v72 = *(unsigned __int8 *)(v27 + v67 + 1);
          int v73 = v71[2];
          int v74 = v71[3];
          unsigned int v75 = 5983 * v72 + 540672 + 20127 * v73 + 2032 * v74;
          int v76 = v71[5];
          int v77 = v71[6];
          int v78 = v71[7];
          unsigned int v79 = 5983 * v76 + 540672 + 20127 * v77 + 2032 * v78;
          int v80 = *(unsigned __int8 *)(v28 + v180 + 1);
          int v81 = *(unsigned __int8 *)(v28 + v180 + 2);
          int v82 = *(unsigned __int8 *)(v28 + v180 + 3);
          int v83 = *(unsigned __int8 *)(v28 + v180 + 5);
          int v84 = *(unsigned __int8 *)(v28 + v180 + 6);
          int v85 = *(unsigned __int8 *)(v28 + v180 + 7);
          v86 = (unsigned int *)&v172[v68];
          unint64_t v87 = 269488145 * (1023 * ((5983 * v80 + 540672 + 20127 * v81 + 2032 * v82) >> 15) + 127);
          int v88 = v78 + v74 + v82 + v85;
          int v89 = v77 + v73 + v81 + v84;
          int v90 = v76 + v72 + v80 + v83;
          unint64_t v91 = 67372037 * (1023 * ((-11093 * v89 - 3297 * v90 + 14392 * v88 + 0x1000000) >> 17) + 127);
          unsigned int v92 = -13072 * v89 + 14392 * v90 - 1319 * v88 + 0x1000000;
          LODWORD(v87) = (v87 >> 36) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((5983 * v83
                                                                                         + 540672
                                                                                         + 20127 * v84
                                                                                         + 2032 * v85) >> 15)
                                                                         + 127)) >> 32) >> 4 << 10);
          int v93 = v71[9];
          int v94 = v71[10];
          int v95 = v71[11];
          unsigned int v96 = (((269488145 * (unint64_t)(1023 * (v75 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v79 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((5983 * v93 + 540672 + 20127 * v94 + 2032 * v95) >> 15) + 127)) >> 32) >> 4 << 20);
          int v97 = (v91 >> 34) | (((67372037 * (unint64_t)(1023 * (v92 >> 17) + 127)) >> 32) >> 2 << 10);
          unsigned int *v86 = v96;
          int v98 = v71[13];
          int v99 = v71[14];
          LODWORD(v91) = v71[15];
          int v100 = *(unsigned __int8 *)(v28 + v180 + 9);
          int v101 = *(unsigned __int8 *)(v28 + v180 + 10);
          int v102 = *(unsigned __int8 *)(v28 + v180 + 11);
          unint64_t v103 = (269488145
                * (unint64_t)(1023 * ((5983 * v98 + 540672 + 20127 * v99 + 2032 * v91) >> 15) + 127)) >> 36;
          *(_DWORD *)&v173[v68] = v87 | (((269488145
                                                       * (unint64_t)(1023
                                                                          * ((5983 * v100
                                                                                          + 540672
                                                                                          + 20127 * v101
                                                                                          + 2032 * v102) >> 15)
                                                                          + 127)) >> 32) >> 4 << 20);
          LODWORD(v87) = *(unsigned __int8 *)(v28 + v180 + 14);
          int v104 = *(unsigned __int8 *)(v28 + v180 + 13);
          int v105 = *(unsigned __int8 *)(v28 + v180 + 15);
          LODWORD(v91) = v91 + v95 + v102 + v105;
          int v106 = 5983 * v104 + 540672 + 20127 * v87;
          int v107 = v99 + v94 + v101 + v87;
          int v108 = v98 + v93 + v100 + v104;
          unsigned int *v178 = v97 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-11093 * v107
                                                                          - 3297 * v108
                                                                          + 14392 * v91
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          int v109 = v71[17];
          unsigned int v110 = 1023 * ((v106 + 2032 * v105) >> 15);
          int v111 = v71[18];
          int v112 = v71[19];
          int v113 = v71[21];
          int v114 = v71[22];
          LODWORD(v71) = v71[23];
          v86[1] = v103 | (((269488145
                                         * (unint64_t)(1023
                                                            * ((5983 * v109
                                                                            + 540672
                                                                            + 20127 * v111
                                                                            + 2032 * v112) >> 15)
                                                            + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((5983 * v113 + 540672 + 20127 * v114 + 2032 * v71) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v86) = *(unsigned __int8 *)(v28 + v180 + 17);
          LODWORD(v103) = *(unsigned __int8 *)(v28 + v180 + 18);
          int v115 = *(unsigned __int8 *)(v28 + v180 + 19);
          int v116 = *(unsigned __int8 *)(v28 + v180 + 21);
          int v117 = *(unsigned __int8 *)(v28 + v180 + 22);
          int v118 = *(unsigned __int8 *)(v28 + v180 + 23);
          *(_DWORD *)&v173[v68 + 4] = (((269488145 * (unint64_t)(v110 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((5983 * v86 + 540672 + 20127 * v103 + 2032 * v115) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((5983 * v116 + 540672 + 20127 * v117 + 2032 * v118) >> 15) + 127)) >> 32) >> 4 << 20);
          unsigned int v119 = 1023 * ((-13072 * v107 + 14392 * v108 - 1319 * v91 + 0x1000000) >> 17);
          LODWORD(v91) = v103 + v117;
          long long v22 = v176;
          v178[1] = (((67372037 * (unint64_t)(v119 + 127)) >> 32) >> 2) | (((67372037 * (unint64_t)(1023 * ((-13072 * (v114 + v111 + v91) + 14392 * (v113 + v109 + v86 + v116) - 1319 * (v71 + v112 + v115 + v118) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-11093 * (v114 + v111 + v91) - 3297 * (v113 + v109 + v86 + v116) + 14392 * (v71 + v112 + v115 + v118) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v70 += 6;
          v68 += 8;
          uint64_t v67 = v180 + 24;
        }
        while (v70 < v175);
        long long v22 = &v176[v68 / 4];
        uint64_t v120 = v156 & 0x3C;
        malloc_type_id_t v24 = (unsigned int *)((char *)v37 + v120 + v68);
        unint64_t v34 = (unsigned int *)((char *)v157 + v120 + v68);
        uint64_t v181 = v27 + v67;
        uint64_t v179 = v28 + v67;
        unint64_t v121 = v174;
        unsigned int v33 = v158;
      }
      if (v70 < v121)
      {
        uint64_t v122 = 0;
        unsigned int v123 = v155;
        uint64_t v124 = v179;
        uint64_t v125 = v181;
        do
        {
          if (v70)
          {
            v129 = (unsigned __int8 *)(v125 - 3);
            v130 = (unsigned __int8 *)(v125 - 2);
            v131 = (unsigned __int8 *)(v125 - 1);
            int v126 = *(unsigned __int8 *)(v181 + v122 + 1);
            int v127 = *(unsigned __int8 *)(v181 + v122 + 2);
            int v128 = *(unsigned __int8 *)(v181 + v122 + 3);
          }
          else
          {
            int v126 = 0;
            int v127 = 0;
            int v128 = 0;
            v129 = (unsigned __int8 *)(v181 + v122 + 1);
            v130 = (unsigned __int8 *)(v181 + v122 + 2);
            v131 = (unsigned __int8 *)(v181 + v122 + 3);
          }
          int v132 = *v131;
          int v133 = *v130;
          int v134 = *v129;
          unint64_t v135 = *((unsigned __int8 *)&v182 + v123);
          *unint64_t v34 = (((269488145
                                * (unint64_t)(1023
                                                   * ((2032 * v132 + 540672 + 20127 * v133 + 5983 * v134) >> 15)
                                                   + 127)) >> 32) >> 4 << v135) | *v34 & ~(1023 << v135);
          if (v70)
          {
            v139 = (unsigned __int8 *)(v124 - 3);
            v140 = (unsigned __int8 *)(v124 - 2);
            v141 = (unsigned __int8 *)(v124 - 1);
            int v136 = *(unsigned __int8 *)(v179 + v122 + 1);
            int v137 = *(unsigned __int8 *)(v179 + v122 + 2);
            int v138 = *(unsigned __int8 *)(v179 + v122 + 3);
          }
          else
          {
            int v136 = 0;
            int v137 = 0;
            int v138 = 0;
            v139 = (unsigned __int8 *)(v179 + v122 + 1);
            v140 = (unsigned __int8 *)(v179 + v122 + 2);
            v141 = (unsigned __int8 *)(v179 + v122 + 3);
          }
          int v142 = *v141;
          int v143 = *v140;
          int v144 = *v139;
          if (v70)
          {
            int v147 = v128 + v132 + v138 + v142;
            int v148 = v127 + v133 + v137 + v143;
            int v149 = v126 + v134 + v136 + v144;
            unint64_t v145 = (67372037
                  * (unint64_t)(1023
                                     * ((-11093 * v148 + 14392 * v147 - 3297 * v149 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            unint64_t v146 = (67372037
                  * (unint64_t)(1023
                                     * ((-13072 * v148 - 1319 * v147 + 14392 * v149 + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v145) = 0;
            LODWORD(v146) = 0;
          }
          unsigned int *v24 = *v24 & ~(1023 << v135) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((2032 * v142
                                                                                            + 540672
                                                                                            + 20127 * v143
                                                                                            + 5983 * v144) >> 15)
                                                                            + 127)) >> 32) >> 4 << v135);
          if (v123 == 2) {
            unsigned int v123 = 0;
          }
          else {
            ++v123;
          }
          if (v70)
          {
            unint64_t v150 = *((unsigned __int8 *)&v182 + v33);
            *long long v22 = *v22 & ~(1023 << v150) | (v145 << v150);
            v151 = (int *)((char *)v22 + ((v150 >> 2) & 0x3C));
            if (v33 == 2) {
              unsigned int v152 = 0;
            }
            else {
              unsigned int v152 = v33 + 1;
            }
            unint64_t v153 = *((unsigned __int8 *)&v182 + v152);
            int *v151 = *v151 & ~(1023 << v153) | (v146 << v153);
            long long v22 = (int *)((char *)v151 + ((v153 >> 2) & 0x3C));
            if (v152 == 2) {
              unsigned int v33 = 0;
            }
            else {
              unsigned int v33 = v152 + 1;
            }
          }
          v125 += 4;
          v34 += v135 >> 4;
          v124 += 4;
          ++v70;
          v122 += 4;
          v24 += v135 >> 4;
        }
        while (v174 != v70);
      }
      unint64_t v23 = v169 + 4 * v160;
      uint64_t v27 = v166 + v161;
      uint64_t v28 = v165 + v161;
      uint64_t v20 = v171 + 1;
      uint64_t v29 = v164 + v161;
      uint64_t v26 = v167 + v161;
      malloc_type_id_t v24 = &v168[v160];
      long long v22 = &v170[v159];
    }
    while (v171 + 1 != v162);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_p420ITU601(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v182 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12) {
    unint64_t v15 = v13 - v12;
  }
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v16 = v14 - v11;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 < v14 - v11) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v17 = v13 % 6;
  BOOL v18 = v15 >= v17;
  unint64_t v19 = v15 - v17;
  if (!v18) {
    unint64_t v19 = 0;
  }
  unint64_t v175 = v19;
  if (v16 >= 2)
  {
    uint64_t v20 = 0;
    unsigned int v163 = v12 % 3;
    unsigned int v155 = v19 % 3;
    unint64_t v177 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v162 = v16 >> 1;
    unint64_t v21 = a8[1];
    long long v22 = (int *)(a7[1] + v21 * (v11 >> 1) + 4 * (v12 / 3));
    unint64_t v23 = *a7 + *a8 * v11 + 4 * (v12 / 3);
    malloc_type_id_t v24 = (unsigned int *)(v23 + *a8);
    uint64_t v25 = *a4;
    uint64_t v26 = *a3 + *a4 * v9;
    unint64_t v174 = v15;
    uint64_t v27 = v26 + 4 * v10;
    uint64_t v28 = v27 + v25;
    uint64_t v161 = 2 * v25;
    uint64_t v160 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v159 = v21 >> 2;
    uint64_t v29 = *a3 + v25 + v25 * (*(void *)(a2 + 40) + (*(void *)(a2 + 40) & 1));
    do
    {
      v170 = v22;
      uint64_t v171 = v20;
      uint64_t v30 = 0;
      uint64_t v167 = v26;
      v168 = v24;
      uint64_t v31 = v26;
      uint64_t v164 = v29;
      uint64_t v165 = v28;
      unsigned int v32 = v163;
      unsigned int v33 = v163;
      unint64_t v169 = v23;
      unint64_t v34 = (unsigned int *)v23;
      uint64_t v166 = v27;
      uint64_t v35 = 4 * v10;
      do
      {
        unint64_t v36 = v34;
        unint64_t v37 = v24;
        if (v30)
        {
          int v41 = (unsigned __int8 *)(v27 - 3);
          uint64_t v42 = (unsigned __int8 *)(v27 - 2);
          unint64_t v43 = (unsigned __int8 *)(v27 - 1);
          int v38 = *(unsigned __int8 *)(v31 + v35 + 1);
          int v39 = *(unsigned __int8 *)(v31 + v35 + 2);
          int v40 = *(unsigned __int8 *)(v31 + v35 + 3);
        }
        else
        {
          int v38 = 0;
          int v39 = 0;
          int v40 = 0;
          int v41 = (unsigned __int8 *)(v31 + v35 + 1);
          uint64_t v42 = (unsigned __int8 *)(v31 + v35 + 2);
          unint64_t v43 = (unsigned __int8 *)(v31 + v35 + 3);
        }
        int v44 = *v43;
        int v45 = *v42;
        int v46 = *v41;
        unint64_t v47 = *((unsigned __int8 *)&v182 + v32);
        *unint64_t v36 = (((269488145
                              * (unint64_t)(1023
                                                 * ((3208 * v44 + 540672 + 16519 * v45 + 8414 * v46) >> 15)
                                                 + 127)) >> 32) >> 4 << v47) | *v36 & ~(1023 << v47);
        if (v30)
        {
          int v51 = (unsigned __int8 *)(v28 - 3);
          unint64_t v52 = (unsigned __int8 *)(v28 - 2);
          uint64_t v53 = (unsigned __int8 *)(v28 - 1);
          int v48 = *(unsigned __int8 *)(v29 + v35 + 1);
          int v49 = *(unsigned __int8 *)(v29 + v35 + 2);
          int v50 = *(unsigned __int8 *)(v29 + v35 + 3);
        }
        else
        {
          int v48 = 0;
          int v49 = 0;
          int v50 = 0;
          int v51 = (unsigned __int8 *)(v29 + v35 + 1);
          unint64_t v52 = (unsigned __int8 *)(v29 + v35 + 2);
          uint64_t v53 = (unsigned __int8 *)(v29 + v35 + 3);
        }
        int v54 = *v53;
        int v55 = *v52;
        int v56 = *v51;
        if (v30)
        {
          int v59 = v40 + v44 + v50 + v54;
          int v60 = v39 + v45 + v49 + v55;
          int v61 = v38 + v46 + v48 + v56;
          unint64_t v57 = (67372037
               * (unint64_t)(1023 * ((-9534 * v60 + 14392 * v59 - 4856 * v61 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v58 = (67372037
               * (unint64_t)(1023 * ((-12051 * v60 - 2340 * v59 + 14392 * v61 + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v57) = 0;
          LODWORD(v58) = 0;
        }
        *unint64_t v37 = *v37 & ~(1023 << v47) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((3208 * v54
                                                                                         + 540672
                                                                                         + 16519 * v55
                                                                                         + 8414 * v56) >> 15)
                                                                         + 127)) >> 32) >> 4 << v47);
        if (v32 == 2) {
          unsigned int v32 = 0;
        }
        else {
          ++v32;
        }
        if (v30)
        {
          unint64_t v62 = *((unsigned __int8 *)&v182 + v33);
          *long long v22 = *v22 & ~(1023 << v62) | (v57 << v62);
          int v63 = (int *)((char *)v22 + ((v62 >> 2) & 0x3C));
          if (v33 == 2) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = v33 + 1;
          }
          unint64_t v65 = *((unsigned __int8 *)&v182 + v64);
          *int v63 = *v63 & ~(1023 << v65) | (v58 << v65);
          unint64_t v66 = v65 >> 2;
          uint64_t v35 = 4 * v10;
          long long v22 = (int *)((char *)v63 + (v66 & 0x3C));
          if (v64 == 2) {
            unsigned int v33 = 0;
          }
          else {
            unsigned int v33 = v64 + 1;
          }
        }
        v27 += 4;
        unint64_t v34 = &v36[v47 >> 4];
        v28 += 4;
        ++v30;
        v29 += 4;
        malloc_type_id_t v24 = &v37[v47 >> 4];
        v31 += 4;
      }
      while (v177 != v30);
      if (v177 >= v175)
      {
        uint64_t v181 = v31 + v35;
        uint64_t v179 = v29 + v35;
        unint64_t v70 = v177;
        unint64_t v121 = v174;
      }
      else
      {
        unsigned int v158 = v33;
        uint64_t v67 = 0;
        unint64_t v68 = 0;
        unint64_t v156 = v47 >> 2;
        uint64_t v69 = (v47 >> 2) & 0x3C;
        v157 = v36;
        v172 = (char *)v36 + v69;
        v173 = (char *)v37 + v69;
        unint64_t v70 = v177;
        do
        {
          v178 = (unsigned int *)&v22[v68 / 4];
          uint64_t v180 = v67;
          v176 = v22;
          int v71 = (unsigned __int8 *)(v27 + v67);
          int v72 = *(unsigned __int8 *)(v27 + v67 + 1);
          int v73 = v71[2];
          int v74 = v71[3];
          unsigned int v75 = 8414 * v72 + 540672 + 16519 * v73 + 3208 * v74;
          int v76 = v71[5];
          int v77 = v71[6];
          int v78 = v71[7];
          unsigned int v79 = 8414 * v76 + 540672 + 16519 * v77 + 3208 * v78;
          int v80 = *(unsigned __int8 *)(v28 + v180 + 1);
          int v81 = *(unsigned __int8 *)(v28 + v180 + 2);
          int v82 = *(unsigned __int8 *)(v28 + v180 + 3);
          int v83 = *(unsigned __int8 *)(v28 + v180 + 5);
          int v84 = *(unsigned __int8 *)(v28 + v180 + 6);
          int v85 = *(unsigned __int8 *)(v28 + v180 + 7);
          v86 = (unsigned int *)&v172[v68];
          unint64_t v87 = 269488145 * (1023 * ((8414 * v80 + 540672 + 16519 * v81 + 3208 * v82) >> 15) + 127);
          int v88 = v78 + v74 + v82 + v85;
          int v89 = v77 + v73 + v81 + v84;
          int v90 = v76 + v72 + v80 + v83;
          unint64_t v91 = 67372037 * (1023 * ((-9534 * v89 - 4856 * v90 + 14392 * v88 + 0x1000000) >> 17) + 127);
          unsigned int v92 = -12051 * v89 + 14392 * v90 - 2340 * v88 + 0x1000000;
          LODWORD(v87) = (v87 >> 36) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((8414 * v83
                                                                                         + 540672
                                                                                         + 16519 * v84
                                                                                         + 3208 * v85) >> 15)
                                                                         + 127)) >> 32) >> 4 << 10);
          int v93 = v71[9];
          int v94 = v71[10];
          int v95 = v71[11];
          unsigned int v96 = (((269488145 * (unint64_t)(1023 * (v75 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v79 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((8414 * v93 + 540672 + 16519 * v94 + 3208 * v95) >> 15) + 127)) >> 32) >> 4 << 20);
          int v97 = (v91 >> 34) | (((67372037 * (unint64_t)(1023 * (v92 >> 17) + 127)) >> 32) >> 2 << 10);
          unsigned int *v86 = v96;
          int v98 = v71[13];
          int v99 = v71[14];
          LODWORD(v91) = v71[15];
          int v100 = *(unsigned __int8 *)(v28 + v180 + 9);
          int v101 = *(unsigned __int8 *)(v28 + v180 + 10);
          int v102 = *(unsigned __int8 *)(v28 + v180 + 11);
          unint64_t v103 = (269488145
                * (unint64_t)(1023 * ((8414 * v98 + 540672 + 16519 * v99 + 3208 * v91) >> 15) + 127)) >> 36;
          *(_DWORD *)&v173[v68] = v87 | (((269488145
                                                       * (unint64_t)(1023
                                                                          * ((8414 * v100
                                                                                          + 540672
                                                                                          + 16519 * v101
                                                                                          + 3208 * v102) >> 15)
                                                                          + 127)) >> 32) >> 4 << 20);
          LODWORD(v87) = *(unsigned __int8 *)(v28 + v180 + 14);
          int v104 = *(unsigned __int8 *)(v28 + v180 + 13);
          int v105 = *(unsigned __int8 *)(v28 + v180 + 15);
          LODWORD(v91) = v91 + v95 + v102 + v105;
          int v106 = 8414 * v104 + 540672 + 16519 * v87;
          int v107 = v99 + v94 + v101 + v87;
          int v108 = v98 + v93 + v100 + v104;
          unsigned int *v178 = v97 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-9534 * v107
                                                                          - 4856 * v108
                                                                          + 14392 * v91
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          int v109 = v71[17];
          unsigned int v110 = 1023 * ((v106 + 3208 * v105) >> 15);
          int v111 = v71[18];
          int v112 = v71[19];
          int v113 = v71[21];
          int v114 = v71[22];
          LODWORD(v71) = v71[23];
          v86[1] = v103 | (((269488145
                                         * (unint64_t)(1023
                                                            * ((8414 * v109
                                                                            + 540672
                                                                            + 16519 * v111
                                                                            + 3208 * v112) >> 15)
                                                            + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((8414 * v113 + 540672 + 16519 * v114 + 3208 * v71) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v86) = *(unsigned __int8 *)(v28 + v180 + 17);
          LODWORD(v103) = *(unsigned __int8 *)(v28 + v180 + 18);
          int v115 = *(unsigned __int8 *)(v28 + v180 + 19);
          int v116 = *(unsigned __int8 *)(v28 + v180 + 21);
          int v117 = *(unsigned __int8 *)(v28 + v180 + 22);
          int v118 = *(unsigned __int8 *)(v28 + v180 + 23);
          *(_DWORD *)&v173[v68 + 4] = (((269488145 * (unint64_t)(v110 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((8414 * v86 + 540672 + 16519 * v103 + 3208 * v115) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((8414 * v116 + 540672 + 16519 * v117 + 3208 * v118) >> 15) + 127)) >> 32) >> 4 << 20);
          unsigned int v119 = 1023 * ((-12051 * v107 + 14392 * v108 - 2340 * v91 + 0x1000000) >> 17);
          LODWORD(v91) = v103 + v117;
          long long v22 = v176;
          v178[1] = (((67372037 * (unint64_t)(v119 + 127)) >> 32) >> 2) | (((67372037 * (unint64_t)(1023 * ((-12051 * (v114 + v111 + v91) + 14392 * (v113 + v109 + v86 + v116) - 2340 * (v71 + v112 + v115 + v118) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-9534 * (v114 + v111 + v91) - 4856 * (v113 + v109 + v86 + v116) + 14392 * (v71 + v112 + v115 + v118) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v70 += 6;
          v68 += 8;
          uint64_t v67 = v180 + 24;
        }
        while (v70 < v175);
        long long v22 = &v176[v68 / 4];
        uint64_t v120 = v156 & 0x3C;
        malloc_type_id_t v24 = (unsigned int *)((char *)v37 + v120 + v68);
        unint64_t v34 = (unsigned int *)((char *)v157 + v120 + v68);
        uint64_t v181 = v27 + v67;
        uint64_t v179 = v28 + v67;
        unint64_t v121 = v174;
        unsigned int v33 = v158;
      }
      if (v70 < v121)
      {
        uint64_t v122 = 0;
        unsigned int v123 = v155;
        uint64_t v124 = v179;
        uint64_t v125 = v181;
        do
        {
          if (v70)
          {
            v129 = (unsigned __int8 *)(v125 - 3);
            v130 = (unsigned __int8 *)(v125 - 2);
            v131 = (unsigned __int8 *)(v125 - 1);
            int v126 = *(unsigned __int8 *)(v181 + v122 + 1);
            int v127 = *(unsigned __int8 *)(v181 + v122 + 2);
            int v128 = *(unsigned __int8 *)(v181 + v122 + 3);
          }
          else
          {
            int v126 = 0;
            int v127 = 0;
            int v128 = 0;
            v129 = (unsigned __int8 *)(v181 + v122 + 1);
            v130 = (unsigned __int8 *)(v181 + v122 + 2);
            v131 = (unsigned __int8 *)(v181 + v122 + 3);
          }
          int v132 = *v131;
          int v133 = *v130;
          int v134 = *v129;
          unint64_t v135 = *((unsigned __int8 *)&v182 + v123);
          *unint64_t v34 = (((269488145
                                * (unint64_t)(1023
                                                   * ((3208 * v132 + 540672 + 16519 * v133 + 8414 * v134) >> 15)
                                                   + 127)) >> 32) >> 4 << v135) | *v34 & ~(1023 << v135);
          if (v70)
          {
            v139 = (unsigned __int8 *)(v124 - 3);
            v140 = (unsigned __int8 *)(v124 - 2);
            v141 = (unsigned __int8 *)(v124 - 1);
            int v136 = *(unsigned __int8 *)(v179 + v122 + 1);
            int v137 = *(unsigned __int8 *)(v179 + v122 + 2);
            int v138 = *(unsigned __int8 *)(v179 + v122 + 3);
          }
          else
          {
            int v136 = 0;
            int v137 = 0;
            int v138 = 0;
            v139 = (unsigned __int8 *)(v179 + v122 + 1);
            v140 = (unsigned __int8 *)(v179 + v122 + 2);
            v141 = (unsigned __int8 *)(v179 + v122 + 3);
          }
          int v142 = *v141;
          int v143 = *v140;
          int v144 = *v139;
          if (v70)
          {
            int v147 = v128 + v132 + v138 + v142;
            int v148 = v127 + v133 + v137 + v143;
            int v149 = v126 + v134 + v136 + v144;
            unint64_t v145 = (67372037
                  * (unint64_t)(1023
                                     * ((-9534 * v148 + 14392 * v147 - 4856 * v149 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            unint64_t v146 = (67372037
                  * (unint64_t)(1023
                                     * ((-12051 * v148 - 2340 * v147 + 14392 * v149 + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v145) = 0;
            LODWORD(v146) = 0;
          }
          unsigned int *v24 = *v24 & ~(1023 << v135) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((3208 * v142
                                                                                            + 540672
                                                                                            + 16519 * v143
                                                                                            + 8414 * v144) >> 15)
                                                                            + 127)) >> 32) >> 4 << v135);
          if (v123 == 2) {
            unsigned int v123 = 0;
          }
          else {
            ++v123;
          }
          if (v70)
          {
            unint64_t v150 = *((unsigned __int8 *)&v182 + v33);
            *long long v22 = *v22 & ~(1023 << v150) | (v145 << v150);
            v151 = (int *)((char *)v22 + ((v150 >> 2) & 0x3C));
            if (v33 == 2) {
              unsigned int v152 = 0;
            }
            else {
              unsigned int v152 = v33 + 1;
            }
            unint64_t v153 = *((unsigned __int8 *)&v182 + v152);
            int *v151 = *v151 & ~(1023 << v153) | (v146 << v153);
            long long v22 = (int *)((char *)v151 + ((v153 >> 2) & 0x3C));
            if (v152 == 2) {
              unsigned int v33 = 0;
            }
            else {
              unsigned int v33 = v152 + 1;
            }
          }
          v125 += 4;
          v34 += v135 >> 4;
          v124 += 4;
          ++v70;
          v122 += 4;
          v24 += v135 >> 4;
        }
        while (v174 != v70);
      }
      unint64_t v23 = v169 + 4 * v160;
      uint64_t v27 = v166 + v161;
      uint64_t v28 = v165 + v161;
      uint64_t v20 = v171 + 1;
      uint64_t v29 = v164 + v161;
      uint64_t v26 = v167 + v161;
      malloc_type_id_t v24 = &v168[v160];
      long long v22 = &v170[v159];
    }
    while (v171 + 1 != v162);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_pf20ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v187 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12) {
    unint64_t v17 = v15 - v12;
  }
  unint64_t v18 = v14 % 6;
  unint64_t v181 = v16;
  BOOL v19 = v16 >= v18;
  unint64_t v20 = v16 - v18;
  if (v19) {
    unint64_t v21 = v20;
  }
  else {
    unint64_t v21 = 0;
  }
  if (v17 >= 2)
  {
    uint64_t v22 = 0;
    unsigned int v168 = v13 % 3;
    unsigned int v160 = v21 % 3;
    unint64_t v23 = 6 * (v13 / 6) - v13 + 6;
    unint64_t v167 = v17 >> 1;
    unint64_t v24 = a8[1];
    uint64_t v25 = (int *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    unint64_t v26 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    uint64_t v27 = *a3;
    uint64_t v28 = *a4;
    uint64_t v29 = *a3 + *a4 * v9;
    unint64_t v30 = v23;
    uint64_t v186 = 4 * v10;
    uint64_t v31 = v29 + 4 * v10;
    uint64_t v32 = v31 + *a4;
    uint64_t v166 = 2 * v28;
    unsigned int v33 = (unsigned int *)(v26 + *a8);
    uint64_t v165 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v164 = v24 >> 2;
    unint64_t v34 = (unsigned int *)v26;
    uint64_t v35 = v27 + v28 + v28 * (v8 + (v8 & 1));
    unint64_t v184 = v23;
    unint64_t v177 = v21;
    do
    {
      unint64_t v175 = v25;
      uint64_t v176 = v22;
      uint64_t v36 = 0;
      uint64_t v172 = v29;
      v173 = v33;
      uint64_t v169 = v35;
      uint64_t v170 = v32;
      unsigned int v37 = v168;
      unsigned int v185 = v168;
      unint64_t v174 = v34;
      uint64_t v171 = v31;
      do
      {
        int v38 = v34;
        int v39 = v33;
        if (v36)
        {
          unint64_t v43 = (unsigned __int8 *)(v31 - 3);
          int v44 = (unsigned __int8 *)(v31 - 2);
          int v45 = (unsigned __int8 *)(v31 - 1);
          int v40 = *(unsigned __int8 *)(v29 + v186 + 1);
          int v41 = *(unsigned __int8 *)(v29 + v186 + 2);
          int v42 = *(unsigned __int8 *)(v29 + v186 + 3);
        }
        else
        {
          int v40 = 0;
          int v41 = 0;
          int v42 = 0;
          unint64_t v43 = (unsigned __int8 *)(v29 + v186 + 1);
          int v44 = (unsigned __int8 *)(v29 + v186 + 2);
          int v45 = (unsigned __int8 *)(v29 + v186 + 3);
        }
        int v46 = *v45;
        int v47 = *v44;
        int v48 = *v43;
        unint64_t v49 = *((unsigned __int8 *)&v187 + v37);
        *int v38 = (((269488145
                              * (unint64_t)(1023
                                                 * ((22217 * v47 + 1943 * v46 + 8608 * v48 + 0x4000) >> 15)
                                                 + 127)) >> 32) >> 4 << v49) | *v38 & ~(1023 << v49);
        if (v36)
        {
          uint64_t v53 = (unsigned __int8 *)(v32 - 3);
          int v54 = (unsigned __int8 *)(v32 - 2);
          int v55 = (unsigned __int8 *)(v32 - 1);
          int v50 = *(unsigned __int8 *)(v35 + v186 + 1);
          int v51 = *(unsigned __int8 *)(v35 + v186 + 2);
          int v52 = *(unsigned __int8 *)(v35 + v186 + 3);
        }
        else
        {
          int v50 = 0;
          int v51 = 0;
          int v52 = 0;
          uint64_t v53 = (unsigned __int8 *)(v35 + v186 + 1);
          int v54 = (unsigned __int8 *)(v35 + v186 + 2);
          int v55 = (unsigned __int8 *)(v35 + v186 + 3);
        }
        int v56 = *v55;
        int v57 = *v54;
        int v58 = *v53;
        if (v36)
        {
          int v61 = v42 + v46 + v52 + v56;
          int v62 = v41 + v47 + v51 + v57;
          int v63 = v40 + v48 + v50 + v58;
          unint64_t v59 = (67372037
               * (unint64_t)(1023 * ((-11808 * v62 + (v61 << 14) - 4574 * v63 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v60 = (67372037
               * (unint64_t)(1023 * ((-15065 * v62 - 1317 * v61 + (v63 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v59) = 0;
          LODWORD(v60) = 0;
        }
        *int v39 = *v39 & ~(1023 << v49) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((22217 * v57
                                                                                         + 1943 * v56
                                                                                         + 8608 * v58
                                                                                         + 0x4000) >> 15)
                                                                         + 127)) >> 32) >> 4 << v49);
        if (v37 == 2) {
          unsigned int v37 = 0;
        }
        else {
          ++v37;
        }
        if (v36)
        {
          unint64_t v64 = *((unsigned __int8 *)&v187 + v185);
          *uint64_t v25 = *v25 & ~(1023 << v64) | (v59 << v64);
          unint64_t v65 = (int *)((char *)v25 + ((v64 >> 2) & 0x3C));
          if (v185 == 2) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = v185 + 1;
          }
          unint64_t v67 = *((unsigned __int8 *)&v187 + v66);
          *unint64_t v65 = *v65 & ~(1023 << v67) | (v60 << v67);
          uint64_t v25 = (int *)((char *)v65 + ((v67 >> 2) & 0x3C));
          if (v66 == 2) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = v66 + 1;
          }
          unsigned int v185 = v68;
          unint64_t v30 = v184;
        }
        v31 += 4;
        unint64_t v34 = &v38[v49 >> 4];
        v32 += 4;
        ++v36;
        v35 += 4;
        unsigned int v33 = &v39[v49 >> 4];
        v29 += 4;
      }
      while (v30 != v36);
      if (v30 >= v21)
      {
        uint64_t v183 = v29 + v186;
        uint64_t v123 = v35 + v186;
        unint64_t v72 = v30;
        unint64_t v124 = v181;
      }
      else
      {
        uint64_t v69 = 0;
        unint64_t v70 = 0;
        uint64_t v161 = v39;
        unint64_t v162 = v49 >> 2;
        uint64_t v71 = (v49 >> 2) & 0x3C;
        unsigned int v163 = v38;
        v178 = (char *)v38 + v71;
        uint64_t v179 = (char *)v39 + v71;
        unint64_t v72 = v30;
        uint64_t v180 = v25;
        do
        {
          int v73 = *(unsigned __int8 *)(v31 + v69 + 1);
          int v74 = *(unsigned __int8 *)(v31 + v69 + 2);
          int v75 = *(unsigned __int8 *)(v31 + v69 + 3);
          unsigned int v76 = 22217 * v74 + 8608 * v73 + 1943 * v75 + 0x4000;
          int v77 = *(unsigned __int8 *)(v31 + v69 + 5);
          int v78 = *(unsigned __int8 *)(v31 + v69 + 6);
          int v79 = *(unsigned __int8 *)(v31 + v69 + 7);
          unsigned int v80 = 22217 * v78 + 8608 * v77 + 1943 * v79 + 0x4000;
          int v81 = *(unsigned __int8 *)(v32 + v69 + 1);
          int v82 = *(unsigned __int8 *)(v32 + v69 + 2);
          int v83 = *(unsigned __int8 *)(v32 + v69 + 3);
          int v84 = *(unsigned __int8 *)(v32 + v69 + 5);
          int v85 = *(unsigned __int8 *)(v32 + v69 + 6);
          int v86 = *(unsigned __int8 *)(v32 + v69 + 7);
          int v182 = (unsigned int *)&v178[v70];
          unint64_t v87 = 269488145 * (1023 * ((22217 * v82 + 8608 * v81 + 1943 * v83 + 0x4000) >> 15) + 127);
          uint64_t v88 = 269488145 * (1023 * ((22217 * v85 + 8608 * v84 + 1943 * v86 + 0x4000) >> 15) + 127);
          int v89 = v79 + v75 + v83 + v86;
          int v90 = v78 + v74 + v82 + v85;
          int v91 = v77 + v73 + v81 + v84;
          unint64_t v92 = (67372037
               * (unint64_t)(1023 * ((-11808 * v90 - 4574 * v91 + (v89 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v93 = (67372037
               * (unint64_t)(1023 * ((-15065 * v90 + (v91 << 14) - 1317 * v89 + 0x1000000) >> 17)
                                  + 127)) >> 32;
          int v94 = *(unsigned __int8 *)(v31 + v69 + 9);
          int v95 = *(unsigned __int8 *)(v31 + v69 + 10);
          int v96 = *(unsigned __int8 *)(v31 + v69 + 11);
          *int v182 = (((269488145 * (unint64_t)(1023 * (v76 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v80 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((22217 * v95 + 8608 * v94 + 1943 * v96 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v97 = v92 | (v93 >> 2 << 10);
          LODWORD(v93) = *(unsigned __int8 *)(v31 + v69 + 13);
          LODWORD(v88) = *(unsigned __int8 *)(v31 + v69 + 14);
          int v98 = *(unsigned __int8 *)(v31 + v69 + 15);
          int v99 = *(unsigned __int8 *)(v32 + v69 + 9);
          int v100 = *(unsigned __int8 *)(v32 + v69 + 10);
          int v101 = *(unsigned __int8 *)(v32 + v69 + 11);
          unint64_t v102 = (269488145
                * (unint64_t)(1023 * ((22217 * v88 + 8608 * v93 + 1943 * v98 + 0x4000) >> 15) + 127)) >> 36;
          *(_DWORD *)&v179[v70] = (v87 >> 36) | (HIDWORD(v88) >> 4 << 10) | (((269488145
                                                                                           * (unint64_t)(1023 * ((22217 * v100 + 8608 * v99 + 1943 * v101 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v103 = *(unsigned __int8 *)(v32 + v69 + 13);
          int v104 = *(unsigned __int8 *)(v32 + v69 + 14);
          LODWORD(v87) = *(unsigned __int8 *)(v32 + v69 + 15);
          int v105 = 22217 * v104 + 8608 * v103;
          int v106 = v98 + v96 + v101 + v87;
          int v107 = v88 + v95 + v100 + v104;
          int v108 = v93 + v94 + v99 + v103;
          int v109 = (unsigned int *)&v180[v70 / 4];
          *int v109 = v97 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-11808 * v107
                                                                          - 4574 * v108
                                                                          + (v106 << 14)
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          int v110 = *(unsigned __int8 *)(v31 + v69 + 17);
          int v111 = *(unsigned __int8 *)(v31 + v69 + 18);
          int v112 = *(unsigned __int8 *)(v31 + v69 + 19);
          int v113 = *(unsigned __int8 *)(v31 + v69 + 21);
          int v114 = *(unsigned __int8 *)(v31 + v69 + 22);
          int v115 = *(unsigned __int8 *)(v31 + v69 + 23);
          LODWORD(v93) = 1023 * ((v105 + 1943 * v87 + 0x4000) >> 15);
          v182[1] = v102 | (((269488145
                                          * (unint64_t)(1023
                                                             * ((22217 * v111
                                                                             + 8608 * v110
                                                                             + 1943 * v112
                                                                             + 0x4000) >> 15)
                                                             + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((22217 * v114 + 8608 * v113 + 1943 * v115 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v116 = *(unsigned __int8 *)(v32 + v69 + 17);
          LODWORD(v102) = *(unsigned __int8 *)(v32 + v69 + 18);
          LODWORD(v87) = *(unsigned __int8 *)(v32 + v69 + 19);
          int v117 = *(unsigned __int8 *)(v32 + v69 + 21);
          int v118 = *(unsigned __int8 *)(v32 + v69 + 22);
          int v119 = *(unsigned __int8 *)(v32 + v69 + 23);
          *(_DWORD *)&v179[v70 + 4] = (((269488145 * (unint64_t)(v93 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((22217 * v102 + 8608 * v116 + 1943 * v87 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((22217 * v118 + 8608 * v117 + 1943 * v119 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v120 = v114 + v111;
          int v121 = v102 + v118;
          unint64_t v21 = v177;
          v109[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-15065 * v107
                                                                      + (v108 << 14)
                                                                      - 1317 * v106
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-15065 * (v120 + v121) + ((v113 + v110 + v116 + v117) << 14) - 1317 * (v115 + v112 + v87 + v119) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-11808 * (v120 + v121) - 4574 * (v113 + v110 + v116 + v117) + ((v115 + v112 + v87 + v119) << 14) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v72 += 6;
          v70 += 8;
          v69 += 24;
        }
        while (v72 < v177);
        uint64_t v25 = &v180[v70 / 4];
        uint64_t v122 = v162 & 0x3C;
        unsigned int v33 = (unsigned int *)((char *)v161 + v122 + v70);
        unint64_t v34 = (unsigned int *)((char *)v163 + v122 + v70);
        uint64_t v183 = v31 + v69;
        uint64_t v123 = v32 + v69;
        unint64_t v124 = v181;
        unint64_t v30 = v184;
      }
      if (v72 < v124)
      {
        uint64_t v125 = 0;
        unsigned int v126 = v160;
        uint64_t v127 = v123;
        uint64_t v128 = v183;
        do
        {
          if (v72)
          {
            int v132 = (unsigned __int8 *)(v128 - 3);
            int v133 = (unsigned __int8 *)(v128 - 2);
            int v134 = (unsigned __int8 *)(v128 - 1);
            int v129 = *(unsigned __int8 *)(v183 + v125 + 1);
            int v130 = *(unsigned __int8 *)(v183 + v125 + 2);
            int v131 = *(unsigned __int8 *)(v183 + v125 + 3);
          }
          else
          {
            int v129 = 0;
            int v130 = 0;
            int v131 = 0;
            int v132 = (unsigned __int8 *)(v183 + v125 + 1);
            int v133 = (unsigned __int8 *)(v183 + v125 + 2);
            int v134 = (unsigned __int8 *)(v183 + v125 + 3);
          }
          int v135 = *v134;
          int v136 = *v133;
          int v137 = *v132;
          unint64_t v138 = *((unsigned __int8 *)&v187 + v126);
          *unint64_t v34 = (((269488145
                                * (unint64_t)(1023
                                                   * ((22217 * v136 + 1943 * v135 + 8608 * v137 + 0x4000) >> 15)
                                                   + 127)) >> 32) >> 4 << v138) | *v34 & ~(1023 << v138);
          if (v72)
          {
            int v142 = (unsigned __int8 *)(v127 - 3);
            int v143 = (unsigned __int8 *)(v127 - 2);
            int v144 = (unsigned __int8 *)(v127 - 1);
            int v139 = *(unsigned __int8 *)(v123 + v125 + 1);
            int v140 = *(unsigned __int8 *)(v123 + v125 + 2);
            int v141 = *(unsigned __int8 *)(v123 + v125 + 3);
          }
          else
          {
            int v139 = 0;
            int v140 = 0;
            int v141 = 0;
            int v142 = (unsigned __int8 *)(v123 + v125 + 1);
            int v143 = (unsigned __int8 *)(v123 + v125 + 2);
            int v144 = (unsigned __int8 *)(v123 + v125 + 3);
          }
          int v145 = *v144;
          int v146 = *v143;
          int v147 = *v142;
          if (v72)
          {
            int v150 = v131 + v135 + v141 + v145;
            int v151 = v130 + v136 + v140 + v146;
            int v152 = v129 + v137 + v139 + v147;
            unint64_t v148 = (67372037
                  * (unint64_t)(1023
                                     * ((-11808 * v151 + (v150 << 14) - 4574 * v152 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            unint64_t v149 = (67372037
                  * (unint64_t)(1023
                                     * ((-15065 * v151 - 1317 * v150 + (v152 << 14) + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v148) = 0;
            LODWORD(v149) = 0;
          }
          *unsigned int v33 = *v33 & ~(1023 << v138) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((22217 * v146
                                                                                            + 1943 * v145
                                                                                            + 8608 * v147
                                                                                            + 0x4000) >> 15)
                                                                            + 127)) >> 32) >> 4 << v138);
          if (v126 == 2) {
            unsigned int v126 = 0;
          }
          else {
            ++v126;
          }
          if (v72)
          {
            unint64_t v153 = *((unsigned __int8 *)&v187 + v185);
            *uint64_t v25 = *v25 & ~(1023 << v153) | (v148 << v153);
            v154 = (int *)((char *)v25 + ((v153 >> 2) & 0x3C));
            if (v185 == 2) {
              unsigned int v155 = 0;
            }
            else {
              unsigned int v155 = v185 + 1;
            }
            unint64_t v156 = *((unsigned __int8 *)&v187 + v155);
            int *v154 = *v154 & ~(1023 << v156) | (v149 << v156);
            uint64_t v25 = (int *)((char *)v154 + ((v156 >> 2) & 0x3C));
            if (v155 == 2) {
              unsigned int v157 = 0;
            }
            else {
              unsigned int v157 = v155 + 1;
            }
            unsigned int v185 = v157;
          }
          unint64_t v30 = v184;
          v128 += 4;
          unint64_t v158 = v138 >> 4;
          v34 += v158;
          v127 += 4;
          ++v72;
          v125 += 4;
          v33 += v158;
        }
        while (v181 != v72);
      }
      unint64_t v34 = &v174[v165];
      uint64_t v31 = v171 + v166;
      uint64_t v32 = v170 + v166;
      uint64_t v22 = v176 + 1;
      uint64_t v35 = v169 + v166;
      uint64_t v29 = v172 + v166;
      unsigned int v33 = &v173[v165];
      uint64_t v25 = &v175[v164];
    }
    while (v176 + 1 != v167);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_pf20ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v187 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12) {
    unint64_t v17 = v15 - v12;
  }
  unint64_t v18 = v14 % 6;
  unint64_t v181 = v16;
  BOOL v19 = v16 >= v18;
  unint64_t v20 = v16 - v18;
  if (v19) {
    unint64_t v21 = v20;
  }
  else {
    unint64_t v21 = 0;
  }
  if (v17 >= 2)
  {
    uint64_t v22 = 0;
    unsigned int v168 = v13 % 3;
    unsigned int v160 = v21 % 3;
    unint64_t v23 = 6 * (v13 / 6) - v13 + 6;
    unint64_t v167 = v17 >> 1;
    unint64_t v24 = a8[1];
    uint64_t v25 = (int *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    unint64_t v26 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    uint64_t v27 = *a3;
    uint64_t v28 = *a4;
    uint64_t v29 = *a3 + *a4 * v9;
    unint64_t v30 = v23;
    uint64_t v186 = 4 * v10;
    uint64_t v31 = v29 + 4 * v10;
    uint64_t v32 = v31 + *a4;
    uint64_t v166 = 2 * v28;
    unsigned int v33 = (unsigned int *)(v26 + *a8);
    uint64_t v165 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v164 = v24 >> 2;
    unint64_t v34 = (unsigned int *)v26;
    uint64_t v35 = v27 + v28 + v28 * (v8 + (v8 & 1));
    unint64_t v184 = v23;
    unint64_t v177 = v21;
    do
    {
      unint64_t v175 = v25;
      uint64_t v176 = v22;
      uint64_t v36 = 0;
      uint64_t v172 = v29;
      v173 = v33;
      uint64_t v169 = v35;
      uint64_t v170 = v32;
      unsigned int v37 = v168;
      unsigned int v185 = v168;
      unint64_t v174 = v34;
      uint64_t v171 = v31;
      do
      {
        int v38 = v34;
        int v39 = v33;
        if (v36)
        {
          unint64_t v43 = (unsigned __int8 *)(v31 - 3);
          int v44 = (unsigned __int8 *)(v31 - 2);
          int v45 = (unsigned __int8 *)(v31 - 1);
          int v40 = *(unsigned __int8 *)(v29 + v186 + 1);
          int v41 = *(unsigned __int8 *)(v29 + v186 + 2);
          int v42 = *(unsigned __int8 *)(v29 + v186 + 3);
        }
        else
        {
          int v40 = 0;
          int v41 = 0;
          int v42 = 0;
          unint64_t v43 = (unsigned __int8 *)(v29 + v186 + 1);
          int v44 = (unsigned __int8 *)(v29 + v186 + 2);
          int v45 = (unsigned __int8 *)(v29 + v186 + 3);
        }
        int v46 = *v45;
        int v47 = *v44;
        int v48 = *v43;
        unint64_t v49 = *((unsigned __int8 *)&v187 + v37);
        *int v38 = (((269488145
                              * (unint64_t)(1023
                                                 * ((23436 * v47 + 2366 * v46 + 6966 * v48 + 0x4000) >> 15)
                                                 + 127)) >> 32) >> 4 << v49) | *v38 & ~(1023 << v49);
        if (v36)
        {
          uint64_t v53 = (unsigned __int8 *)(v32 - 3);
          int v54 = (unsigned __int8 *)(v32 - 2);
          int v55 = (unsigned __int8 *)(v32 - 1);
          int v50 = *(unsigned __int8 *)(v35 + v186 + 1);
          int v51 = *(unsigned __int8 *)(v35 + v186 + 2);
          int v52 = *(unsigned __int8 *)(v35 + v186 + 3);
        }
        else
        {
          int v50 = 0;
          int v51 = 0;
          int v52 = 0;
          uint64_t v53 = (unsigned __int8 *)(v35 + v186 + 1);
          int v54 = (unsigned __int8 *)(v35 + v186 + 2);
          int v55 = (unsigned __int8 *)(v35 + v186 + 3);
        }
        int v56 = *v55;
        int v57 = *v54;
        int v58 = *v53;
        if (v36)
        {
          int v61 = v42 + v46 + v52 + v56;
          int v62 = v41 + v47 + v51 + v57;
          int v63 = v40 + v48 + v50 + v58;
          unint64_t v59 = (67372037
               * (unint64_t)(1023 * ((-12629 * v62 + (v61 << 14) - 3753 * v63 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v60 = (67372037
               * (unint64_t)(1023 * ((-14881 * v62 - 1501 * v61 + (v63 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v59) = 0;
          LODWORD(v60) = 0;
        }
        *int v39 = *v39 & ~(1023 << v49) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((23436 * v57
                                                                                         + 2366 * v56
                                                                                         + 6966 * v58
                                                                                         + 0x4000) >> 15)
                                                                         + 127)) >> 32) >> 4 << v49);
        if (v37 == 2) {
          unsigned int v37 = 0;
        }
        else {
          ++v37;
        }
        if (v36)
        {
          unint64_t v64 = *((unsigned __int8 *)&v187 + v185);
          *uint64_t v25 = *v25 & ~(1023 << v64) | (v59 << v64);
          unint64_t v65 = (int *)((char *)v25 + ((v64 >> 2) & 0x3C));
          if (v185 == 2) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = v185 + 1;
          }
          unint64_t v67 = *((unsigned __int8 *)&v187 + v66);
          *unint64_t v65 = *v65 & ~(1023 << v67) | (v60 << v67);
          uint64_t v25 = (int *)((char *)v65 + ((v67 >> 2) & 0x3C));
          if (v66 == 2) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = v66 + 1;
          }
          unsigned int v185 = v68;
          unint64_t v30 = v184;
        }
        v31 += 4;
        unint64_t v34 = &v38[v49 >> 4];
        v32 += 4;
        ++v36;
        v35 += 4;
        unsigned int v33 = &v39[v49 >> 4];
        v29 += 4;
      }
      while (v30 != v36);
      if (v30 >= v21)
      {
        uint64_t v183 = v29 + v186;
        uint64_t v123 = v35 + v186;
        unint64_t v72 = v30;
        unint64_t v124 = v181;
      }
      else
      {
        uint64_t v69 = 0;
        unint64_t v70 = 0;
        uint64_t v161 = v39;
        unint64_t v162 = v49 >> 2;
        uint64_t v71 = (v49 >> 2) & 0x3C;
        unsigned int v163 = v38;
        v178 = (char *)v38 + v71;
        uint64_t v179 = (char *)v39 + v71;
        unint64_t v72 = v30;
        uint64_t v180 = v25;
        do
        {
          int v73 = *(unsigned __int8 *)(v31 + v69 + 1);
          int v74 = *(unsigned __int8 *)(v31 + v69 + 2);
          int v75 = *(unsigned __int8 *)(v31 + v69 + 3);
          unsigned int v76 = 23436 * v74 + 6966 * v73 + 2366 * v75 + 0x4000;
          int v77 = *(unsigned __int8 *)(v31 + v69 + 5);
          int v78 = *(unsigned __int8 *)(v31 + v69 + 6);
          int v79 = *(unsigned __int8 *)(v31 + v69 + 7);
          unsigned int v80 = 23436 * v78 + 6966 * v77 + 2366 * v79 + 0x4000;
          int v81 = *(unsigned __int8 *)(v32 + v69 + 1);
          int v82 = *(unsigned __int8 *)(v32 + v69 + 2);
          int v83 = *(unsigned __int8 *)(v32 + v69 + 3);
          int v84 = *(unsigned __int8 *)(v32 + v69 + 5);
          int v85 = *(unsigned __int8 *)(v32 + v69 + 6);
          int v86 = *(unsigned __int8 *)(v32 + v69 + 7);
          int v182 = (unsigned int *)&v178[v70];
          unint64_t v87 = 269488145 * (1023 * ((23436 * v82 + 6966 * v81 + 2366 * v83 + 0x4000) >> 15) + 127);
          uint64_t v88 = 269488145 * (1023 * ((23436 * v85 + 6966 * v84 + 2366 * v86 + 0x4000) >> 15) + 127);
          int v89 = v79 + v75 + v83 + v86;
          int v90 = v78 + v74 + v82 + v85;
          int v91 = v77 + v73 + v81 + v84;
          unint64_t v92 = (67372037
               * (unint64_t)(1023 * ((-12629 * v90 - 3753 * v91 + (v89 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v93 = (67372037
               * (unint64_t)(1023 * ((-14881 * v90 + (v91 << 14) - 1501 * v89 + 0x1000000) >> 17)
                                  + 127)) >> 32;
          int v94 = *(unsigned __int8 *)(v31 + v69 + 9);
          int v95 = *(unsigned __int8 *)(v31 + v69 + 10);
          int v96 = *(unsigned __int8 *)(v31 + v69 + 11);
          *int v182 = (((269488145 * (unint64_t)(1023 * (v76 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v80 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((23436 * v95 + 6966 * v94 + 2366 * v96 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v97 = v92 | (v93 >> 2 << 10);
          LODWORD(v93) = *(unsigned __int8 *)(v31 + v69 + 13);
          LODWORD(v88) = *(unsigned __int8 *)(v31 + v69 + 14);
          int v98 = *(unsigned __int8 *)(v31 + v69 + 15);
          int v99 = *(unsigned __int8 *)(v32 + v69 + 9);
          int v100 = *(unsigned __int8 *)(v32 + v69 + 10);
          int v101 = *(unsigned __int8 *)(v32 + v69 + 11);
          unint64_t v102 = (269488145
                * (unint64_t)(1023 * ((23436 * v88 + 6966 * v93 + 2366 * v98 + 0x4000) >> 15) + 127)) >> 36;
          *(_DWORD *)&v179[v70] = (v87 >> 36) | (HIDWORD(v88) >> 4 << 10) | (((269488145
                                                                                           * (unint64_t)(1023 * ((23436 * v100 + 6966 * v99 + 2366 * v101 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v103 = *(unsigned __int8 *)(v32 + v69 + 13);
          int v104 = *(unsigned __int8 *)(v32 + v69 + 14);
          LODWORD(v87) = *(unsigned __int8 *)(v32 + v69 + 15);
          int v105 = 23436 * v104 + 6966 * v103;
          int v106 = v98 + v96 + v101 + v87;
          int v107 = v88 + v95 + v100 + v104;
          int v108 = v93 + v94 + v99 + v103;
          int v109 = (unsigned int *)&v180[v70 / 4];
          *int v109 = v97 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-12629 * v107
                                                                          - 3753 * v108
                                                                          + (v106 << 14)
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          int v110 = *(unsigned __int8 *)(v31 + v69 + 17);
          int v111 = *(unsigned __int8 *)(v31 + v69 + 18);
          int v112 = *(unsigned __int8 *)(v31 + v69 + 19);
          int v113 = *(unsigned __int8 *)(v31 + v69 + 21);
          int v114 = *(unsigned __int8 *)(v31 + v69 + 22);
          int v115 = *(unsigned __int8 *)(v31 + v69 + 23);
          LODWORD(v93) = 1023 * ((v105 + 2366 * v87 + 0x4000) >> 15);
          v182[1] = v102 | (((269488145
                                          * (unint64_t)(1023
                                                             * ((23436 * v111
                                                                             + 6966 * v110
                                                                             + 2366 * v112
                                                                             + 0x4000) >> 15)
                                                             + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((23436 * v114 + 6966 * v113 + 2366 * v115 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v116 = *(unsigned __int8 *)(v32 + v69 + 17);
          LODWORD(v102) = *(unsigned __int8 *)(v32 + v69 + 18);
          LODWORD(v87) = *(unsigned __int8 *)(v32 + v69 + 19);
          int v117 = *(unsigned __int8 *)(v32 + v69 + 21);
          int v118 = *(unsigned __int8 *)(v32 + v69 + 22);
          int v119 = *(unsigned __int8 *)(v32 + v69 + 23);
          *(_DWORD *)&v179[v70 + 4] = (((269488145 * (unint64_t)(v93 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((23436 * v102 + 6966 * v116 + 2366 * v87 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((23436 * v118 + 6966 * v117 + 2366 * v119 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v120 = v114 + v111;
          int v121 = v102 + v118;
          unint64_t v21 = v177;
          v109[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-14881 * v107
                                                                      + (v108 << 14)
                                                                      - 1501 * v106
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-14881 * (v120 + v121) + ((v113 + v110 + v116 + v117) << 14) - 1501 * (v115 + v112 + v87 + v119) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-12629 * (v120 + v121) - 3753 * (v113 + v110 + v116 + v117) + ((v115 + v112 + v87 + v119) << 14) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v72 += 6;
          v70 += 8;
          v69 += 24;
        }
        while (v72 < v177);
        uint64_t v25 = &v180[v70 / 4];
        uint64_t v122 = v162 & 0x3C;
        unsigned int v33 = (unsigned int *)((char *)v161 + v122 + v70);
        unint64_t v34 = (unsigned int *)((char *)v163 + v122 + v70);
        uint64_t v183 = v31 + v69;
        uint64_t v123 = v32 + v69;
        unint64_t v124 = v181;
        unint64_t v30 = v184;
      }
      if (v72 < v124)
      {
        uint64_t v125 = 0;
        unsigned int v126 = v160;
        uint64_t v127 = v123;
        uint64_t v128 = v183;
        do
        {
          if (v72)
          {
            int v132 = (unsigned __int8 *)(v128 - 3);
            int v133 = (unsigned __int8 *)(v128 - 2);
            int v134 = (unsigned __int8 *)(v128 - 1);
            int v129 = *(unsigned __int8 *)(v183 + v125 + 1);
            int v130 = *(unsigned __int8 *)(v183 + v125 + 2);
            int v131 = *(unsigned __int8 *)(v183 + v125 + 3);
          }
          else
          {
            int v129 = 0;
            int v130 = 0;
            int v131 = 0;
            int v132 = (unsigned __int8 *)(v183 + v125 + 1);
            int v133 = (unsigned __int8 *)(v183 + v125 + 2);
            int v134 = (unsigned __int8 *)(v183 + v125 + 3);
          }
          int v135 = *v134;
          int v136 = *v133;
          int v137 = *v132;
          unint64_t v138 = *((unsigned __int8 *)&v187 + v126);
          *unint64_t v34 = (((269488145
                                * (unint64_t)(1023
                                                   * ((23436 * v136 + 2366 * v135 + 6966 * v137 + 0x4000) >> 15)
                                                   + 127)) >> 32) >> 4 << v138) | *v34 & ~(1023 << v138);
          if (v72)
          {
            int v142 = (unsigned __int8 *)(v127 - 3);
            int v143 = (unsigned __int8 *)(v127 - 2);
            int v144 = (unsigned __int8 *)(v127 - 1);
            int v139 = *(unsigned __int8 *)(v123 + v125 + 1);
            int v140 = *(unsigned __int8 *)(v123 + v125 + 2);
            int v141 = *(unsigned __int8 *)(v123 + v125 + 3);
          }
          else
          {
            int v139 = 0;
            int v140 = 0;
            int v141 = 0;
            int v142 = (unsigned __int8 *)(v123 + v125 + 1);
            int v143 = (unsigned __int8 *)(v123 + v125 + 2);
            int v144 = (unsigned __int8 *)(v123 + v125 + 3);
          }
          int v145 = *v144;
          int v146 = *v143;
          int v147 = *v142;
          if (v72)
          {
            int v150 = v131 + v135 + v141 + v145;
            int v151 = v130 + v136 + v140 + v146;
            int v152 = v129 + v137 + v139 + v147;
            unint64_t v148 = (67372037
                  * (unint64_t)(1023
                                     * ((-12629 * v151 + (v150 << 14) - 3753 * v152 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            unint64_t v149 = (67372037
                  * (unint64_t)(1023
                                     * ((-14881 * v151 - 1501 * v150 + (v152 << 14) + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v148) = 0;
            LODWORD(v149) = 0;
          }
          *unsigned int v33 = *v33 & ~(1023 << v138) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((23436 * v146
                                                                                            + 2366 * v145
                                                                                            + 6966 * v147
                                                                                            + 0x4000) >> 15)
                                                                            + 127)) >> 32) >> 4 << v138);
          if (v126 == 2) {
            unsigned int v126 = 0;
          }
          else {
            ++v126;
          }
          if (v72)
          {
            unint64_t v153 = *((unsigned __int8 *)&v187 + v185);
            *uint64_t v25 = *v25 & ~(1023 << v153) | (v148 << v153);
            v154 = (int *)((char *)v25 + ((v153 >> 2) & 0x3C));
            if (v185 == 2) {
              unsigned int v155 = 0;
            }
            else {
              unsigned int v155 = v185 + 1;
            }
            unint64_t v156 = *((unsigned __int8 *)&v187 + v155);
            int *v154 = *v154 & ~(1023 << v156) | (v149 << v156);
            uint64_t v25 = (int *)((char *)v154 + ((v156 >> 2) & 0x3C));
            if (v155 == 2) {
              unsigned int v157 = 0;
            }
            else {
              unsigned int v157 = v155 + 1;
            }
            unsigned int v185 = v157;
          }
          unint64_t v30 = v184;
          v128 += 4;
          unint64_t v158 = v138 >> 4;
          v34 += v158;
          v127 += 4;
          ++v72;
          v125 += 4;
          v33 += v158;
        }
        while (v181 != v72);
      }
      unint64_t v34 = &v174[v165];
      uint64_t v31 = v171 + v166;
      uint64_t v32 = v170 + v166;
      uint64_t v22 = v176 + 1;
      uint64_t v35 = v169 + v166;
      uint64_t v29 = v172 + v166;
      unsigned int v33 = &v173[v165];
      uint64_t v25 = &v175[v164];
    }
    while (v176 + 1 != v167);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_pf20ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v187 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12) {
    unint64_t v17 = v15 - v12;
  }
  unint64_t v18 = v14 % 6;
  unint64_t v181 = v16;
  BOOL v19 = v16 >= v18;
  unint64_t v20 = v16 - v18;
  if (v19) {
    unint64_t v21 = v20;
  }
  else {
    unint64_t v21 = 0;
  }
  if (v17 >= 2)
  {
    uint64_t v22 = 0;
    unsigned int v168 = v13 % 3;
    unsigned int v160 = v21 % 3;
    unint64_t v23 = 6 * (v13 / 6) - v13 + 6;
    unint64_t v167 = v17 >> 1;
    unint64_t v24 = a8[1];
    uint64_t v25 = (int *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    unint64_t v26 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    uint64_t v27 = *a3;
    uint64_t v28 = *a4;
    uint64_t v29 = *a3 + *a4 * v9;
    unint64_t v30 = v23;
    uint64_t v186 = 4 * v10;
    uint64_t v31 = v29 + 4 * v10;
    uint64_t v32 = v31 + *a4;
    uint64_t v166 = 2 * v28;
    unsigned int v33 = (unsigned int *)(v26 + *a8);
    uint64_t v165 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v164 = v24 >> 2;
    unint64_t v34 = (unsigned int *)v26;
    uint64_t v35 = v27 + v28 + v28 * (v8 + (v8 & 1));
    unint64_t v184 = v23;
    unint64_t v177 = v21;
    do
    {
      unint64_t v175 = v25;
      uint64_t v176 = v22;
      uint64_t v36 = 0;
      uint64_t v172 = v29;
      v173 = v33;
      uint64_t v169 = v35;
      uint64_t v170 = v32;
      unsigned int v37 = v168;
      unsigned int v185 = v168;
      unint64_t v174 = v34;
      uint64_t v171 = v31;
      do
      {
        int v38 = v34;
        int v39 = v33;
        if (v36)
        {
          unint64_t v43 = (unsigned __int8 *)(v31 - 3);
          int v44 = (unsigned __int8 *)(v31 - 2);
          int v45 = (unsigned __int8 *)(v31 - 1);
          int v40 = *(unsigned __int8 *)(v29 + v186 + 1);
          int v41 = *(unsigned __int8 *)(v29 + v186 + 2);
          int v42 = *(unsigned __int8 *)(v29 + v186 + 3);
        }
        else
        {
          int v40 = 0;
          int v41 = 0;
          int v42 = 0;
          unint64_t v43 = (unsigned __int8 *)(v29 + v186 + 1);
          int v44 = (unsigned __int8 *)(v29 + v186 + 2);
          int v45 = (unsigned __int8 *)(v29 + v186 + 3);
        }
        int v46 = *v45;
        int v47 = *v44;
        int v48 = *v43;
        unint64_t v49 = *((unsigned __int8 *)&v187 + v37);
        *int v38 = (((269488145
                              * (unint64_t)(1023
                                                 * ((19235 * v47 + 3736 * v46 + 9798 * v48 + 0x4000) >> 15)
                                                 + 127)) >> 32) >> 4 << v49) | *v38 & ~(1023 << v49);
        if (v36)
        {
          uint64_t v53 = (unsigned __int8 *)(v32 - 3);
          int v54 = (unsigned __int8 *)(v32 - 2);
          int v55 = (unsigned __int8 *)(v32 - 1);
          int v50 = *(unsigned __int8 *)(v35 + v186 + 1);
          int v51 = *(unsigned __int8 *)(v35 + v186 + 2);
          int v52 = *(unsigned __int8 *)(v35 + v186 + 3);
        }
        else
        {
          int v50 = 0;
          int v51 = 0;
          int v52 = 0;
          uint64_t v53 = (unsigned __int8 *)(v35 + v186 + 1);
          int v54 = (unsigned __int8 *)(v35 + v186 + 2);
          int v55 = (unsigned __int8 *)(v35 + v186 + 3);
        }
        int v56 = *v55;
        int v57 = *v54;
        int v58 = *v53;
        if (v36)
        {
          int v61 = v42 + v46 + v52 + v56;
          int v62 = v41 + v47 + v51 + v57;
          int v63 = v40 + v48 + v50 + v58;
          unint64_t v59 = (67372037
               * (unint64_t)(1023 * ((-10854 * v62 + (v61 << 14) - 5528 * v63 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v60 = (67372037
               * (unint64_t)(1023 * ((-13719 * v62 - 2663 * v61 + (v63 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v59) = 0;
          LODWORD(v60) = 0;
        }
        *int v39 = *v39 & ~(1023 << v49) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((19235 * v57
                                                                                         + 3736 * v56
                                                                                         + 9798 * v58
                                                                                         + 0x4000) >> 15)
                                                                         + 127)) >> 32) >> 4 << v49);
        if (v37 == 2) {
          unsigned int v37 = 0;
        }
        else {
          ++v37;
        }
        if (v36)
        {
          unint64_t v64 = *((unsigned __int8 *)&v187 + v185);
          *uint64_t v25 = *v25 & ~(1023 << v64) | (v59 << v64);
          unint64_t v65 = (int *)((char *)v25 + ((v64 >> 2) & 0x3C));
          if (v185 == 2) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = v185 + 1;
          }
          unint64_t v67 = *((unsigned __int8 *)&v187 + v66);
          *unint64_t v65 = *v65 & ~(1023 << v67) | (v60 << v67);
          uint64_t v25 = (int *)((char *)v65 + ((v67 >> 2) & 0x3C));
          if (v66 == 2) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = v66 + 1;
          }
          unsigned int v185 = v68;
          unint64_t v30 = v184;
        }
        v31 += 4;
        unint64_t v34 = &v38[v49 >> 4];
        v32 += 4;
        ++v36;
        v35 += 4;
        unsigned int v33 = &v39[v49 >> 4];
        v29 += 4;
      }
      while (v30 != v36);
      if (v30 >= v21)
      {
        uint64_t v183 = v29 + v186;
        uint64_t v123 = v35 + v186;
        unint64_t v72 = v30;
        unint64_t v124 = v181;
      }
      else
      {
        uint64_t v69 = 0;
        unint64_t v70 = 0;
        uint64_t v161 = v39;
        unint64_t v162 = v49 >> 2;
        uint64_t v71 = (v49 >> 2) & 0x3C;
        unsigned int v163 = v38;
        v178 = (char *)v38 + v71;
        uint64_t v179 = (char *)v39 + v71;
        unint64_t v72 = v30;
        uint64_t v180 = v25;
        do
        {
          int v73 = *(unsigned __int8 *)(v31 + v69 + 1);
          int v74 = *(unsigned __int8 *)(v31 + v69 + 2);
          int v75 = *(unsigned __int8 *)(v31 + v69 + 3);
          unsigned int v76 = 19235 * v74 + 9798 * v73 + 3736 * v75 + 0x4000;
          int v77 = *(unsigned __int8 *)(v31 + v69 + 5);
          int v78 = *(unsigned __int8 *)(v31 + v69 + 6);
          int v79 = *(unsigned __int8 *)(v31 + v69 + 7);
          unsigned int v80 = 19235 * v78 + 9798 * v77 + 3736 * v79 + 0x4000;
          int v81 = *(unsigned __int8 *)(v32 + v69 + 1);
          int v82 = *(unsigned __int8 *)(v32 + v69 + 2);
          int v83 = *(unsigned __int8 *)(v32 + v69 + 3);
          int v84 = *(unsigned __int8 *)(v32 + v69 + 5);
          int v85 = *(unsigned __int8 *)(v32 + v69 + 6);
          int v86 = *(unsigned __int8 *)(v32 + v69 + 7);
          int v182 = (unsigned int *)&v178[v70];
          unint64_t v87 = 269488145 * (1023 * ((19235 * v82 + 9798 * v81 + 3736 * v83 + 0x4000) >> 15) + 127);
          uint64_t v88 = 269488145 * (1023 * ((19235 * v85 + 9798 * v84 + 3736 * v86 + 0x4000) >> 15) + 127);
          int v89 = v79 + v75 + v83 + v86;
          int v90 = v78 + v74 + v82 + v85;
          int v91 = v77 + v73 + v81 + v84;
          unint64_t v92 = (67372037
               * (unint64_t)(1023 * ((-10854 * v90 - 5528 * v91 + (v89 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v93 = (67372037
               * (unint64_t)(1023 * ((-13719 * v90 + (v91 << 14) - 2663 * v89 + 0x1000000) >> 17)
                                  + 127)) >> 32;
          int v94 = *(unsigned __int8 *)(v31 + v69 + 9);
          int v95 = *(unsigned __int8 *)(v31 + v69 + 10);
          int v96 = *(unsigned __int8 *)(v31 + v69 + 11);
          *int v182 = (((269488145 * (unint64_t)(1023 * (v76 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v80 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((19235 * v95 + 9798 * v94 + 3736 * v96 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v97 = v92 | (v93 >> 2 << 10);
          LODWORD(v93) = *(unsigned __int8 *)(v31 + v69 + 13);
          LODWORD(v88) = *(unsigned __int8 *)(v31 + v69 + 14);
          int v98 = *(unsigned __int8 *)(v31 + v69 + 15);
          int v99 = *(unsigned __int8 *)(v32 + v69 + 9);
          int v100 = *(unsigned __int8 *)(v32 + v69 + 10);
          int v101 = *(unsigned __int8 *)(v32 + v69 + 11);
          unint64_t v102 = (269488145
                * (unint64_t)(1023 * ((19235 * v88 + 9798 * v93 + 3736 * v98 + 0x4000) >> 15) + 127)) >> 36;
          *(_DWORD *)&v179[v70] = (v87 >> 36) | (HIDWORD(v88) >> 4 << 10) | (((269488145
                                                                                           * (unint64_t)(1023 * ((19235 * v100 + 9798 * v99 + 3736 * v101 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v103 = *(unsigned __int8 *)(v32 + v69 + 13);
          int v104 = *(unsigned __int8 *)(v32 + v69 + 14);
          LODWORD(v87) = *(unsigned __int8 *)(v32 + v69 + 15);
          int v105 = 19235 * v104 + 9798 * v103;
          int v106 = v98 + v96 + v101 + v87;
          int v107 = v88 + v95 + v100 + v104;
          int v108 = v93 + v94 + v99 + v103;
          int v109 = (unsigned int *)&v180[v70 / 4];
          *int v109 = v97 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-10854 * v107
                                                                          - 5528 * v108
                                                                          + (v106 << 14)
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          int v110 = *(unsigned __int8 *)(v31 + v69 + 17);
          int v111 = *(unsigned __int8 *)(v31 + v69 + 18);
          int v112 = *(unsigned __int8 *)(v31 + v69 + 19);
          int v113 = *(unsigned __int8 *)(v31 + v69 + 21);
          int v114 = *(unsigned __int8 *)(v31 + v69 + 22);
          int v115 = *(unsigned __int8 *)(v31 + v69 + 23);
          LODWORD(v93) = 1023 * ((v105 + 3736 * v87 + 0x4000) >> 15);
          v182[1] = v102 | (((269488145
                                          * (unint64_t)(1023
                                                             * ((19235 * v111
                                                                             + 9798 * v110
                                                                             + 3736 * v112
                                                                             + 0x4000) >> 15)
                                                             + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((19235 * v114 + 9798 * v113 + 3736 * v115 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v116 = *(unsigned __int8 *)(v32 + v69 + 17);
          LODWORD(v102) = *(unsigned __int8 *)(v32 + v69 + 18);
          LODWORD(v87) = *(unsigned __int8 *)(v32 + v69 + 19);
          int v117 = *(unsigned __int8 *)(v32 + v69 + 21);
          int v118 = *(unsigned __int8 *)(v32 + v69 + 22);
          int v119 = *(unsigned __int8 *)(v32 + v69 + 23);
          *(_DWORD *)&v179[v70 + 4] = (((269488145 * (unint64_t)(v93 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((19235 * v102 + 9798 * v116 + 3736 * v87 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((19235 * v118 + 9798 * v117 + 3736 * v119 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v120 = v114 + v111;
          int v121 = v102 + v118;
          unint64_t v21 = v177;
          v109[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-13719 * v107
                                                                      + (v108 << 14)
                                                                      - 2663 * v106
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-13719 * (v120 + v121) + ((v113 + v110 + v116 + v117) << 14) - 2663 * (v115 + v112 + v87 + v119) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-10854 * (v120 + v121) - 5528 * (v113 + v110 + v116 + v117) + ((v115 + v112 + v87 + v119) << 14) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v72 += 6;
          v70 += 8;
          v69 += 24;
        }
        while (v72 < v177);
        uint64_t v25 = &v180[v70 / 4];
        uint64_t v122 = v162 & 0x3C;
        unsigned int v33 = (unsigned int *)((char *)v161 + v122 + v70);
        unint64_t v34 = (unsigned int *)((char *)v163 + v122 + v70);
        uint64_t v183 = v31 + v69;
        uint64_t v123 = v32 + v69;
        unint64_t v124 = v181;
        unint64_t v30 = v184;
      }
      if (v72 < v124)
      {
        uint64_t v125 = 0;
        unsigned int v126 = v160;
        uint64_t v127 = v123;
        uint64_t v128 = v183;
        do
        {
          if (v72)
          {
            int v132 = (unsigned __int8 *)(v128 - 3);
            int v133 = (unsigned __int8 *)(v128 - 2);
            int v134 = (unsigned __int8 *)(v128 - 1);
            int v129 = *(unsigned __int8 *)(v183 + v125 + 1);
            int v130 = *(unsigned __int8 *)(v183 + v125 + 2);
            int v131 = *(unsigned __int8 *)(v183 + v125 + 3);
          }
          else
          {
            int v129 = 0;
            int v130 = 0;
            int v131 = 0;
            int v132 = (unsigned __int8 *)(v183 + v125 + 1);
            int v133 = (unsigned __int8 *)(v183 + v125 + 2);
            int v134 = (unsigned __int8 *)(v183 + v125 + 3);
          }
          int v135 = *v134;
          int v136 = *v133;
          int v137 = *v132;
          unint64_t v138 = *((unsigned __int8 *)&v187 + v126);
          *unint64_t v34 = (((269488145
                                * (unint64_t)(1023
                                                   * ((19235 * v136 + 3736 * v135 + 9798 * v137 + 0x4000) >> 15)
                                                   + 127)) >> 32) >> 4 << v138) | *v34 & ~(1023 << v138);
          if (v72)
          {
            int v142 = (unsigned __int8 *)(v127 - 3);
            int v143 = (unsigned __int8 *)(v127 - 2);
            int v144 = (unsigned __int8 *)(v127 - 1);
            int v139 = *(unsigned __int8 *)(v123 + v125 + 1);
            int v140 = *(unsigned __int8 *)(v123 + v125 + 2);
            int v141 = *(unsigned __int8 *)(v123 + v125 + 3);
          }
          else
          {
            int v139 = 0;
            int v140 = 0;
            int v141 = 0;
            int v142 = (unsigned __int8 *)(v123 + v125 + 1);
            int v143 = (unsigned __int8 *)(v123 + v125 + 2);
            int v144 = (unsigned __int8 *)(v123 + v125 + 3);
          }
          int v145 = *v144;
          int v146 = *v143;
          int v147 = *v142;
          if (v72)
          {
            int v150 = v131 + v135 + v141 + v145;
            int v151 = v130 + v136 + v140 + v146;
            int v152 = v129 + v137 + v139 + v147;
            unint64_t v148 = (67372037
                  * (unint64_t)(1023
                                     * ((-10854 * v151 + (v150 << 14) - 5528 * v152 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            unint64_t v149 = (67372037
                  * (unint64_t)(1023
                                     * ((-13719 * v151 - 2663 * v150 + (v152 << 14) + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v148) = 0;
            LODWORD(v149) = 0;
          }
          *unsigned int v33 = *v33 & ~(1023 << v138) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((19235 * v146
                                                                                            + 3736 * v145
                                                                                            + 9798 * v147
                                                                                            + 0x4000) >> 15)
                                                                            + 127)) >> 32) >> 4 << v138);
          if (v126 == 2) {
            unsigned int v126 = 0;
          }
          else {
            ++v126;
          }
          if (v72)
          {
            unint64_t v153 = *((unsigned __int8 *)&v187 + v185);
            *uint64_t v25 = *v25 & ~(1023 << v153) | (v148 << v153);
            v154 = (int *)((char *)v25 + ((v153 >> 2) & 0x3C));
            if (v185 == 2) {
              unsigned int v155 = 0;
            }
            else {
              unsigned int v155 = v185 + 1;
            }
            unint64_t v156 = *((unsigned __int8 *)&v187 + v155);
            int *v154 = *v154 & ~(1023 << v156) | (v149 << v156);
            uint64_t v25 = (int *)((char *)v154 + ((v156 >> 2) & 0x3C));
            if (v155 == 2) {
              unsigned int v157 = 0;
            }
            else {
              unsigned int v157 = v155 + 1;
            }
            unsigned int v185 = v157;
          }
          unint64_t v30 = v184;
          v128 += 4;
          unint64_t v158 = v138 >> 4;
          v34 += v158;
          v127 += 4;
          ++v72;
          v125 += 4;
          v33 += v158;
        }
        while (v181 != v72);
      }
      unint64_t v34 = &v174[v165];
      uint64_t v31 = v171 + v166;
      uint64_t v32 = v170 + v166;
      uint64_t v22 = v176 + 1;
      uint64_t v35 = v169 + v166;
      uint64_t v29 = v172 + v166;
      unsigned int v33 = &v173[v165];
      uint64_t v25 = &v175[v164];
    }
    while (v176 + 1 != v167);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_32BGRA_2vuy(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CbYpCrYp8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_2vuy;
  *a11 = vt_VImage_Cleanup_32BGRA_2vuy;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_32BGRA_yuvsITU2020_vec(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4, void *a5, char **a6, double a7, double a8, int16x8_t a9, double a10, int16x4_t a11)
{
  long long v12 = xmmword_193E7DA40;
  unint64_t v13 = 0xFB7FCC75380ED79ALL;
  vt_Copy_BGRA_yuvs_arm(a1, a2, a3, a4, a5, a6, (uint64_t)&v12, (int32x2_t)0x40400000084000, a8, a9, a10, a11);
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvsITU709_vec(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4, void *a5, char **a6, double a7, double a8, int16x8_t a9, double a10, int16x4_t a11)
{
  long long v12 = xmmword_193E7DA58;
  unint64_t v13 = 0xFAD9CCF03838D4ABLL;
  vt_Copy_BGRA_yuvs_arm(a1, a2, a3, a4, a5, a6, (uint64_t)&v12, (int32x2_t)0x40400000084000, a8, a9, a10, a11);
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvsITU601_vec(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4, void *a5, char **a6, double a7, double a8, int16x8_t a9, double a10, int16x4_t a11)
{
  long long v12 = xmmword_193E7DA70;
  unint64_t v13 = 0xF6DCD0ED3838DAC2;
  vt_Copy_BGRA_yuvs_arm(a1, a2, a3, a4, a5, a6, (uint64_t)&v12, (int32x2_t)0x40400000084000, a8, a9, a10, a11);
  return 0;
}

vImage_Error vt_VImage_Setup_32BGRA_yuvs(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422YpCbYpCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_yuvs;
  *a11 = vt_VImage_Cleanup_32BGRA_yuvs;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_420f(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_420f;
  *a11 = vt_VImage_Cleanup_32BGRA_420f;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_32BGRA_yuvfITU2020_vec(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4, void *a5, char **a6, double a7, double a8, int16x8_t a9, double a10, int16x4_t a11)
{
  long long v12 = xmmword_193E7DA88;
  unint64_t v13 = 0xFADBC5274000D1E0;
  vt_Copy_BGRA_yuvs_arm(a1, a2, a3, a4, a5, a6, (uint64_t)&v12, (int32x2_t)0x40400000004000, a8, a9, a10, a11);
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvfITU709_vec(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4, void *a5, char **a6, double a7, double a8, int16x8_t a9, double a10, int16x4_t a11)
{
  long long v12 = xmmword_193E7DAA0;
  unint64_t v13 = 0xFA23C5DF4000CEABLL;
  vt_Copy_BGRA_yuvs_arm(a1, a2, a3, a4, a5, a6, (uint64_t)&v12, (int32x2_t)0x40400000004000, a8, a9, a10, a11);
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvfITU601_vec(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4, void *a5, char **a6, double a7, double a8, int16x8_t a9, double a10, int16x4_t a11)
{
  long long v12 = xmmword_193E7DAB8;
  unint64_t v13 = 0xF599CA694000D59ALL;
  vt_Copy_BGRA_yuvs_arm(a1, a2, a3, a4, a5, a6, (uint64_t)&v12, (int32x2_t)0x40400000004000, a8, a9, a10, a11);
  return 0;
}

vImage_Error vt_VImage_Setup_32BGRA_yuvf(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422YpCbYpCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_yuvf;
  *a11 = vt_VImage_Cleanup_32BGRA_yuvf;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_2vuf(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CbYpCrYp8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_2vuf;
  *a11 = vt_VImage_Cleanup_32BGRA_2vuf;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_y420(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_Cb8_Cr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_y420;
  *a11 = vt_VImage_Cleanup_32BGRA_y420;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_f420(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_Cb8_Cr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_f420;
  *a11 = vt_VImage_Cleanup_32BGRA_f420;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_420v(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_420v;
  *a11 = vt_VImage_Cleanup_32BGRA_420v;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_v0a8(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_v0a8;
  *a11 = vt_VImage_Cleanup_32BGRA_v0a8;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_32BGRA_32ARGB(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = *a6;
    uint64_t v10 = *a4;
    do
    {
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
          *(_DWORD *)(v9 + 4 * i) = bswap32(*(_DWORD *)(v10 + 4 * i));
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_VImage_Setup_32BGRA_32ARGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_32ARGB;
  *a11 = vt_VImage_Cleanup_32BGRA_32ARGB;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_32BGRA_v210(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_v210;
  *a11 = vt_VImage_Cleanup_32BGRA_v210;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_32BGRA_R10k(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_R10k;
  *a11 = vt_VImage_Cleanup_32BGRA_R10k;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_32BGRA_v216(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage422CbYpCrYp16, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_v216;
  *a11 = vt_VImage_Cleanup_32BGRA_v216;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_y408(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage444AYpCbCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_y408;
  *a11 = vt_VImage_Cleanup_32BGRA_y408;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_v410(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage444CrYpCb10, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_v410;
  *a11 = vt_VImage_Cleanup_32BGRA_v410;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_32BGRA_y416(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  BOOL v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB8888, kvImage444AYpCbCr16, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_y416;
  *a11 = vt_VImage_Cleanup_32BGRA_y416;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_32BGRA_RGhA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_RGhA;
  *a11 = vt_VImage_Cleanup_32BGRA_RGhA;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Copy_32BGRA_w30r(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 0, 1111970369, a1);
}

vImage_Error vt_VImage_Copy_32BGRA_b3a8(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 1, 1111970369, a1);
}

vImage_Error vt_VImage_Setup_32BGRA_xw20(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v28 = 0u;
  long long v29 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v28 = v20;
    long long v29 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v28;
    goto LABEL_11;
  }
  long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error v22 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x11u, 0);
  if (!v22 && (*((void *)v17 + 34) != a1 || *((void *)v17 + 33) != a2 || *((void *)v17 + 35) != 4 * a1))
  {
    long long v23 = (void *)*((void *)v17 + 32);
    if (v23)
    {
      *((void *)v17 + 32) = 0;
      free(v23);
    }
    unint64_t v24 = 4 * a1;
    if (a2 && v24)
    {
      size_t v25 = 0;
      if (((v24 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v24)) {
        goto LABEL_25;
      }
      size_t v25 = v24 * a2;
      if (!(v24 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v26 = 1556728742;
    }
    else
    {
      size_t v25 = 0;
      malloc_type_id_t v26 = 1270757447;
    }
    size_t v25 = (size_t)malloc_type_malloc(v25, v26);
LABEL_25:
    *((void *)v17 + 32) = v25;
    *((void *)v17 + 33) = a2;
    *((void *)v17 + 34) = a1;
    *((void *)v17 + 35) = v24;
  }
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_xw20;
  *a11 = vt_VImage_Cleanup_32BGRA_xw20;
  *a8 = v17;
  return v22;
}

vImage_Error vt_VImage_Setup_32BGRA_xw22(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v28 = 0u;
  long long v29 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v28 = v20;
    long long v29 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v28;
    goto LABEL_11;
  }
  long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error v22 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x10u, 0);
  if (!v22 && (*((void *)v17 + 34) != a1 || *((void *)v17 + 33) != a2 || *((void *)v17 + 35) != 4 * a1))
  {
    long long v23 = (void *)*((void *)v17 + 32);
    if (v23)
    {
      *((void *)v17 + 32) = 0;
      free(v23);
    }
    unint64_t v24 = 4 * a1;
    if (a2 && v24)
    {
      size_t v25 = 0;
      if (((v24 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v24)) {
        goto LABEL_25;
      }
      size_t v25 = v24 * a2;
      if (!(v24 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v26 = 1556728742;
    }
    else
    {
      size_t v25 = 0;
      malloc_type_id_t v26 = 1270757447;
    }
    size_t v25 = (size_t)malloc_type_malloc(v25, v26);
LABEL_25:
    *((void *)v17 + 32) = v25;
    *((void *)v17 + 33) = a2;
    *((void *)v17 + 34) = a1;
    *((void *)v17 + 35) = v24;
  }
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_xw22;
  *a11 = vt_VImage_Cleanup_32BGRA_xw22;
  *a8 = v17;
  return v22;
}

vImage_Error vt_VImage_Setup_32BGRA_xw44(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v28 = 0u;
  long long v29 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v28 = v20;
    long long v29 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v28;
    goto LABEL_11;
  }
  long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error v22 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, 0);
  if (!v22 && (*((void *)v17 + 34) != a1 || *((void *)v17 + 33) != a2 || *((void *)v17 + 35) != 4 * a1))
  {
    long long v23 = (void *)*((void *)v17 + 32);
    if (v23)
    {
      *((void *)v17 + 32) = 0;
      free(v23);
    }
    unint64_t v24 = 4 * a1;
    if (a2 && v24)
    {
      size_t v25 = 0;
      if (((v24 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v24)) {
        goto LABEL_25;
      }
      size_t v25 = v24 * a2;
      if (!(v24 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v26 = 1556728742;
    }
    else
    {
      size_t v25 = 0;
      malloc_type_id_t v26 = 1270757447;
    }
    size_t v25 = (size_t)malloc_type_malloc(v25, v26);
LABEL_25:
    *((void *)v17 + 32) = v25;
    *((void *)v17 + 33) = a2;
    *((void *)v17 + 34) = a1;
    *((void *)v17 + 35) = v24;
  }
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_32BGRA_xw44;
  *a11 = vt_VImage_Cleanup_32BGRA_xw44;
  *a8 = v17;
  return v22;
}

uint64_t vt_Copy_32BGRA_p420ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v189 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12) {
    unint64_t v15 = v13 - v12;
  }
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v16 = v14 - v11;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 < v14 - v11) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v17 = v13 % 6;
  BOOL v18 = v15 >= v17;
  unint64_t v19 = v15 - v17;
  if (!v18) {
    unint64_t v19 = 0;
  }
  unint64_t v182 = v19;
  if (v16 >= 2)
  {
    uint64_t v179 = 0;
    unsigned int v171 = v12 % 3;
    unsigned int v163 = v19 % 3;
    unint64_t v20 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v170 = v16 >> 1;
    unint64_t v21 = a8[1];
    unint64_t v22 = a7[1] + v21 * (v11 >> 1) + 4 * (v12 / 3);
    unint64_t v23 = *a7 + *a8 * v11 + 4 * (v12 / 3);
    unint64_t v24 = (unsigned int *)(v23 + *a8);
    uint64_t v25 = *a3;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v9;
    uint64_t v28 = 4 * v10;
    long long v29 = (unsigned __int8 *)(v27 + 4 * v10);
    uint64_t v169 = 2 * v26;
    uint64_t v168 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v30 = (int *)v22;
    unint64_t v166 = v15;
    unint64_t v167 = v21 >> 2;
    uint64_t v31 = v26 + v26 * (*(void *)(a2 + 40) + (*(void *)(a2 + 40) & 1));
    uint64_t v32 = &v29[v26];
    unsigned int v33 = (unsigned int *)v23;
    uint64_t v34 = v28;
    uint64_t v35 = v29;
    uint64_t v36 = v25 + v31;
    uint64_t v183 = v28;
    unint64_t v185 = v20;
    do
    {
      uint64_t v37 = 0;
      uint64_t v175 = v27;
      uint64_t v176 = v24;
      uint64_t v38 = v27;
      uint64_t v172 = v36;
      v173 = v32;
      unsigned int v39 = v171;
      unsigned int v188 = v171;
      unint64_t v177 = v33;
      v178 = v30;
      int v40 = v30;
      int v41 = v33;
      unint64_t v174 = v35;
      int v42 = v35;
      do
      {
        unint64_t v43 = v41;
        int v44 = v24;
        if (v37)
        {
          int v50 = (unsigned __int8 *)(v38 + v34 - 4);
          int v48 = v42 - 2;
          unint64_t v49 = v42 - 3;
          int v45 = *(unsigned __int8 *)(v38 + v34 + 2);
          int v46 = *(unsigned __int8 *)(v38 + v34 + 1);
          int v47 = *(unsigned __int8 *)(v38 + v34);
        }
        else
        {
          int v45 = 0;
          int v46 = 0;
          int v47 = 0;
          int v48 = (unsigned __int8 *)(v38 + v34 + 2);
          unint64_t v49 = (unsigned __int8 *)(v38 + v34 + 1);
          int v50 = v42;
        }
        int v51 = *v50;
        int v52 = *v49;
        int v53 = *v48;
        unint64_t v54 = *((unsigned __int8 *)&v189 + v39);
        unsigned int *v43 = (((269488145
                              * (unint64_t)(1023
                                                 * ((1664 * v51 + 540672 + 19024 * v52 + 7371 * v53) >> 15)
                                                 + 127)) >> 32) >> 4 << v54) | *v43 & ~(1023 << v54);
        if (v37)
        {
          unint64_t v60 = (unsigned __int8 *)(v36 + v34 - 4);
          int v58 = v32 - 2;
          unint64_t v59 = v32 - 3;
          int v55 = *(unsigned __int8 *)(v36 + v34 + 2);
          int v56 = *(unsigned __int8 *)(v36 + v34 + 1);
          int v57 = *(unsigned __int8 *)(v36 + v34);
        }
        else
        {
          int v55 = 0;
          int v56 = 0;
          int v57 = 0;
          int v58 = (unsigned __int8 *)(v36 + v34 + 2);
          unint64_t v59 = (unsigned __int8 *)(v36 + v34 + 1);
          unint64_t v60 = v32;
        }
        int v61 = *v60;
        int v62 = *v59;
        int v63 = *v58;
        if (v37)
        {
          int v66 = v47 + v51 + v57 + v61;
          int v67 = v46 + v52 + v56 + v62;
          int v68 = v45 + v53 + v55 + v63;
          unint64_t v64 = (67372037
               * (unint64_t)(1023 * ((-10342 * v67 + 14350 * v66 - 4006 * v68 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v65 = (67372037
               * (unint64_t)(1023 * ((-13195 * v67 - 1153 * v66 + 14350 * v68 + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v64) = 0;
          LODWORD(v65) = 0;
        }
        unsigned int *v44 = *v44 & ~(1023 << v54) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((1664 * v61
                                                                                         + 540672
                                                                                         + 19024 * v62
                                                                                         + 7371 * v63) >> 15)
                                                                         + 127)) >> 32) >> 4 << v54);
        if (v39 == 2) {
          unsigned int v39 = 0;
        }
        else {
          ++v39;
        }
        if (v37)
        {
          unint64_t v69 = *((unsigned __int8 *)&v189 + v188);
          *int v40 = *v40 & ~(1023 << v69) | (v64 << v69);
          unint64_t v70 = (int *)((char *)v40 + ((v69 >> 2) & 0x3C));
          if (v188 == 2) {
            unsigned int v71 = 0;
          }
          else {
            unsigned int v71 = v188 + 1;
          }
          unint64_t v72 = *((unsigned __int8 *)&v189 + v71);
          uint64_t v34 = v183;
          *unint64_t v70 = *v70 & ~(1023 << v72) | (v65 << v72);
          int v40 = (int *)((char *)v70 + ((v72 >> 2) & 0x3C));
          if (v71 == 2) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = v71 + 1;
          }
          unsigned int v188 = v73;
        }
        v42 += 4;
        int v41 = &v43[v54 >> 4];
        v32 += 4;
        ++v37;
        v36 += 4;
        unint64_t v24 = &v44[v54 >> 4];
        v38 += 4;
      }
      while (v185 != v37);
      if (v185 >= v182)
      {
        uint64_t v127 = (unsigned __int8 *)(v38 + v34);
        int v187 = (unsigned __int8 *)(v36 + v34);
        unint64_t v77 = v185;
        uint64_t v128 = v40;
        unint64_t v126 = v166;
      }
      else
      {
        unint64_t v74 = 0;
        unint64_t v164 = v54 >> 2;
        uint64_t v165 = v44;
        uint64_t v75 = (v54 >> 2) & 0x3C;
        uint64_t v180 = (char *)v44 + v75;
        uint64_t v76 = v34;
        unint64_t v77 = v185;
        unint64_t v181 = v40;
        do
        {
          uint64_t v186 = &v180[v74];
          int v78 = *(unsigned __int8 *)(v38 + v76 + 2);
          int v79 = *(unsigned __int8 *)(v38 + v76 + 1);
          int v80 = *(unsigned __int8 *)(v38 + v76);
          unsigned int v81 = 7371 * v78 + 540672 + 19024 * v79 + 1664 * v80;
          int v82 = *(unsigned __int8 *)(v38 + v76 + 6);
          int v83 = *(unsigned __int8 *)(v38 + v76 + 5);
          int v84 = *(unsigned __int8 *)(v38 + v76 + 4);
          int v85 = *(unsigned __int8 *)(v36 + v76 + 2);
          int v86 = *(unsigned __int8 *)(v36 + v76 + 1);
          int v87 = *(unsigned __int8 *)(v36 + v76);
          int v88 = *(unsigned __int8 *)(v36 + v76 + 6);
          int v89 = *(unsigned __int8 *)(v36 + v76 + 5);
          int v90 = *(unsigned __int8 *)(v36 + v76 + 4);
          int v91 = (unsigned int *)((char *)v43 + v75 + v74);
          unint64_t v92 = 269488145 * (1023 * ((7371 * v85 + 540672 + 19024 * v86 + 1664 * v87) >> 15) + 127);
          int v93 = v84 + v80 + v87 + v90;
          int v94 = v83 + v79 + v86 + v89;
          int v95 = v82 + v78 + v85 + v88;
          unint64_t v96 = 67372037 * (1023 * ((-10342 * v94 - 4006 * v95 + 14350 * v93 + 0x1000000) >> 17) + 127);
          unsigned int v97 = -13195 * v94 + 14350 * v95 - 1153 * v93 + 0x1000000;
          unsigned int v98 = (((269488145 * (unint64_t)(1023 * (v81 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((7371 * v82 + 540672 + 19024 * v83 + 1664 * v84) >> 15) + 127)) >> 32) >> 4 << 10);
          LODWORD(v92) = (v92 >> 36) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((7371 * v88
                                                                                         + 540672
                                                                                         + 19024 * v89
                                                                                         + 1664 * v90) >> 15)
                                                                         + 127)) >> 32) >> 4 << 10);
          int v99 = *(unsigned __int8 *)(v38 + v76 + 10);
          int v100 = *(unsigned __int8 *)(v38 + v76 + 9);
          int v101 = *(unsigned __int8 *)(v38 + v76 + 8);
          int v102 = (v96 >> 34) | (((67372037 * (unint64_t)(1023 * (v97 >> 17) + 127)) >> 32) >> 2 << 10);
          *int v91 = v98 | (((269488145
                                      * (unint64_t)(1023
                                                         * ((7371 * v99
                                                                         + 540672
                                                                         + 19024 * v100
                                                                         + 1664 * v101) >> 15)
                                                         + 127)) >> 32) >> 4 << 20);
          int v103 = *(unsigned __int8 *)(v38 + v76 + 14);
          int v104 = *(unsigned __int8 *)(v38 + v76 + 13);
          LODWORD(v96) = *(unsigned __int8 *)(v38 + v76 + 12);
          int v105 = *(unsigned __int8 *)(v36 + v76 + 10);
          int v106 = *(unsigned __int8 *)(v36 + v76 + 9);
          int v107 = *(unsigned __int8 *)(v36 + v76 + 8);
          unint64_t v108 = (269488145
                * (unint64_t)(1023 * ((7371 * v103 + 540672 + 19024 * v104 + 1664 * v96) >> 15)
                                   + 127)) >> 36;
          *(_DWORD *)uint64_t v186 = v92 | (((269488145
                                                 * (unint64_t)(1023
                                                                    * ((7371 * v105
                                                                                    + 540672
                                                                                    + 19024 * v106
                                                                                    + 1664 * v107) >> 15)
                                                                    + 127)) >> 32) >> 4 << 20);
          LODWORD(v92) = *(unsigned __int8 *)(v36 + v76 + 13);
          int v109 = *(unsigned __int8 *)(v36 + v76 + 14);
          int v110 = *(unsigned __int8 *)(v36 + v76 + 12);
          int v184 = v96 + v101 + v107 + v110;
          int v111 = v104 + v100 + v106 + v92;
          LODWORD(v96) = v103 + v99 + v105 + v109;
          int v112 = (unsigned int *)&v181[v74 / 4];
          *int v112 = v102 | (((67372037
                                        * (unint64_t)(1023
                                                           * ((-10342 * v111
                                                                           - 4006 * v96
                                                                           + 14350 * v184
                                                                           + 0x1000000) >> 17)
                                                           + 127)) >> 32) >> 2 << 20);
          int v113 = *(unsigned __int8 *)(v38 + v76 + 18);
          unsigned int v114 = 1023 * ((7371 * v109 + 540672 + 19024 * v92 + 1664 * v110) >> 15);
          int v115 = *(unsigned __int8 *)(v38 + v76 + 17);
          int v116 = *(unsigned __int8 *)(v38 + v76 + 16);
          int v117 = *(unsigned __int8 *)(v38 + v76 + 22);
          int v118 = *(unsigned __int8 *)(v38 + v76 + 21);
          int v119 = *(unsigned __int8 *)(v38 + v76 + 20);
          v91[1] = v108 | (((269488145
                                         * (unint64_t)(1023
                                                            * ((7371 * v113
                                                                            + 540672
                                                                            + 19024 * v115
                                                                            + 1664 * v116) >> 15)
                                                            + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((7371 * v117 + 540672 + 19024 * v118 + 1664 * v119) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v91) = *(unsigned __int8 *)(v36 + v76 + 18);
          LODWORD(v108) = *(unsigned __int8 *)(v36 + v76 + 17);
          int v120 = *(unsigned __int8 *)(v36 + v76 + 16);
          int v121 = *(unsigned __int8 *)(v36 + v76 + 22);
          int v122 = *(unsigned __int8 *)(v36 + v76 + 21);
          int v123 = *(unsigned __int8 *)(v36 + v76 + 20);
          *((_DWORD *)v186 + 1) = (((269488145 * (unint64_t)(v114 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((7371 * v91 + 540672 + 19024 * v108 + 1664 * v120) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((7371 * v121 + 540672 + 19024 * v122 + 1664 * v123) >> 15) + 127)) >> 32) >> 4 << 20);
          v112[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-13195 * v111
                                                                      + 14350 * v96
                                                                      - 1153 * v184
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-13195 * (v118 + v115 + v108 + v122) + 14350 * (v117 + v113 + v91 + v121) - 1153 * (v119 + v116 + v120 + v123) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-10342 * (v118 + v115 + v108 + v122) - 4006 * (v117 + v113 + v91 + v121) + 14350 * (v119 + v116 + v120 + v123) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v77 += 6;
          v74 += 8;
          v76 += 24;
        }
        while (v77 < v182);
        unint64_t v124 = &v181[v74 / 4];
        uint64_t v125 = v164 & 0x3C;
        unint64_t v24 = (unsigned int *)((char *)v165 + v125 + v74);
        unint64_t v126 = v166;
        int v41 = (unsigned int *)((char *)v43 + v125 + v74);
        uint64_t v127 = (unsigned __int8 *)(v38 + v76);
        int v187 = (unsigned __int8 *)(v36 + v76);
        uint64_t v34 = v183;
        uint64_t v128 = v124;
      }
      if (v77 < v126)
      {
        uint64_t v129 = 0;
        unsigned int v130 = v163;
        int v131 = v187;
        int v132 = v127;
        do
        {
          if (v77)
          {
            unint64_t v138 = &v127[v129 - 4];
            int v136 = v132 - 2;
            int v137 = v132 - 3;
            int v133 = v127[v129 + 2];
            int v134 = v127[v129 + 1];
            int v135 = v127[v129];
          }
          else
          {
            int v133 = 0;
            int v134 = 0;
            int v135 = 0;
            int v136 = &v127[v129 + 2];
            int v137 = &v127[v129 + 1];
            unint64_t v138 = v132;
          }
          int v139 = *v138;
          int v140 = *v137;
          int v141 = *v136;
          unint64_t v142 = *((unsigned __int8 *)&v189 + v130);
          *int v41 = (((269488145
                                * (unint64_t)(1023
                                                   * ((1664 * v139 + 540672 + 19024 * v140 + 7371 * v141) >> 15)
                                                   + 127)) >> 32) >> 4 << v142) | *v41 & ~(1023 << v142);
          if (v77)
          {
            unint64_t v148 = &v187[v129 - 4];
            int v146 = v131 - 2;
            int v147 = v131 - 3;
            int v143 = v187[v129 + 2];
            int v144 = v187[v129 + 1];
            int v145 = v187[v129];
          }
          else
          {
            int v143 = 0;
            int v144 = 0;
            int v145 = 0;
            int v146 = &v187[v129 + 2];
            int v147 = &v187[v129 + 1];
            unint64_t v148 = v131;
          }
          int v149 = *v148;
          int v150 = *v147;
          int v151 = *v146;
          if (v77)
          {
            int v154 = v135 + v139 + v145 + v149;
            int v155 = v134 + v140 + v144 + v150;
            int v156 = v133 + v141 + v143 + v151;
            unint64_t v152 = (67372037
                  * (unint64_t)(1023
                                     * ((-10342 * v155 + 14350 * v154 - 4006 * v156 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            unint64_t v153 = (67372037
                  * (unint64_t)(1023
                                     * ((-13195 * v155 - 1153 * v154 + 14350 * v156 + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v152) = 0;
            LODWORD(v153) = 0;
          }
          unsigned int *v24 = *v24 & ~(1023 << v142) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((1664 * v149
                                                                                            + 540672
                                                                                            + 19024 * v150
                                                                                            + 7371 * v151) >> 15)
                                                                            + 127)) >> 32) >> 4 << v142);
          if (v130 == 2) {
            unsigned int v130 = 0;
          }
          else {
            ++v130;
          }
          if (v77)
          {
            unint64_t v157 = *((unsigned __int8 *)&v189 + v188);
            *uint64_t v128 = *v128 & ~(1023 << v157) | (v152 << v157);
            unint64_t v158 = (int *)((char *)v128 + ((v157 >> 2) & 0x3C));
            if (v188 == 2) {
              unsigned int v159 = 0;
            }
            else {
              unsigned int v159 = v188 + 1;
            }
            unint64_t v160 = *((unsigned __int8 *)&v189 + v159);
            uint64_t v34 = v183;
            *unint64_t v158 = *v158 & ~(1023 << v160) | (v153 << v160);
            uint64_t v128 = (int *)((char *)v158 + ((v160 >> 2) & 0x3C));
            if (v159 == 2) {
              unsigned int v161 = 0;
            }
            else {
              unsigned int v161 = v159 + 1;
            }
            unsigned int v188 = v161;
          }
          v132 += 4;
          v41 += v142 >> 4;
          v131 += 4;
          ++v77;
          v129 += 4;
          v24 += v142 >> 4;
        }
        while (v126 != v77);
      }
      unsigned int v33 = &v177[v168];
      uint64_t v35 = &v174[v169];
      uint64_t v32 = &v173[v169];
      uint64_t v36 = v172 + v169;
      uint64_t v27 = v175 + v169;
      unint64_t v24 = &v176[v168];
      unint64_t v30 = &v178[v167];
      ++v179;
    }
    while (v179 != v170);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_p420ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v189 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12) {
    unint64_t v15 = v13 - v12;
  }
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v16 = v14 - v11;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 < v14 - v11) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v17 = v13 % 6;
  BOOL v18 = v15 >= v17;
  unint64_t v19 = v15 - v17;
  if (!v18) {
    unint64_t v19 = 0;
  }
  unint64_t v182 = v19;
  if (v16 >= 2)
  {
    uint64_t v179 = 0;
    unsigned int v171 = v12 % 3;
    unsigned int v163 = v19 % 3;
    unint64_t v20 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v170 = v16 >> 1;
    unint64_t v21 = a8[1];
    unint64_t v22 = a7[1] + v21 * (v11 >> 1) + 4 * (v12 / 3);
    unint64_t v23 = *a7 + *a8 * v11 + 4 * (v12 / 3);
    unint64_t v24 = (unsigned int *)(v23 + *a8);
    uint64_t v25 = *a3;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v9;
    uint64_t v28 = 4 * v10;
    long long v29 = (unsigned __int8 *)(v27 + 4 * v10);
    uint64_t v169 = 2 * v26;
    uint64_t v168 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v30 = (int *)v22;
    unint64_t v166 = v15;
    unint64_t v167 = v21 >> 2;
    uint64_t v31 = v26 + v26 * (*(void *)(a2 + 40) + (*(void *)(a2 + 40) & 1));
    uint64_t v32 = &v29[v26];
    unsigned int v33 = (unsigned int *)v23;
    uint64_t v34 = v28;
    uint64_t v35 = v29;
    uint64_t v36 = v25 + v31;
    uint64_t v183 = v28;
    unint64_t v185 = v20;
    do
    {
      uint64_t v37 = 0;
      uint64_t v175 = v27;
      uint64_t v176 = v24;
      uint64_t v38 = v27;
      uint64_t v172 = v36;
      v173 = v32;
      unsigned int v39 = v171;
      unsigned int v188 = v171;
      unint64_t v177 = v33;
      v178 = v30;
      int v40 = v30;
      int v41 = v33;
      unint64_t v174 = v35;
      int v42 = v35;
      do
      {
        unint64_t v43 = v41;
        int v44 = v24;
        if (v37)
        {
          int v50 = (unsigned __int8 *)(v38 + v34 - 4);
          int v48 = v42 - 2;
          unint64_t v49 = v42 - 3;
          int v45 = *(unsigned __int8 *)(v38 + v34 + 2);
          int v46 = *(unsigned __int8 *)(v38 + v34 + 1);
          int v47 = *(unsigned __int8 *)(v38 + v34);
        }
        else
        {
          int v45 = 0;
          int v46 = 0;
          int v47 = 0;
          int v48 = (unsigned __int8 *)(v38 + v34 + 2);
          unint64_t v49 = (unsigned __int8 *)(v38 + v34 + 1);
          int v50 = v42;
        }
        int v51 = *v50;
        int v52 = *v49;
        int v53 = *v48;
        unint64_t v54 = *((unsigned __int8 *)&v189 + v39);
        unsigned int *v43 = (((269488145
                              * (unint64_t)(1023
                                                 * ((2032 * v51 + 540672 + 20127 * v52 + 5983 * v53) >> 15)
                                                 + 127)) >> 32) >> 4 << v54) | *v43 & ~(1023 << v54);
        if (v37)
        {
          unint64_t v60 = (unsigned __int8 *)(v36 + v34 - 4);
          int v58 = v32 - 2;
          unint64_t v59 = v32 - 3;
          int v55 = *(unsigned __int8 *)(v36 + v34 + 2);
          int v56 = *(unsigned __int8 *)(v36 + v34 + 1);
          int v57 = *(unsigned __int8 *)(v36 + v34);
        }
        else
        {
          int v55 = 0;
          int v56 = 0;
          int v57 = 0;
          int v58 = (unsigned __int8 *)(v36 + v34 + 2);
          unint64_t v59 = (unsigned __int8 *)(v36 + v34 + 1);
          unint64_t v60 = v32;
        }
        int v61 = *v60;
        int v62 = *v59;
        int v63 = *v58;
        if (v37)
        {
          int v66 = v47 + v51 + v57 + v61;
          int v67 = v46 + v52 + v56 + v62;
          int v68 = v45 + v53 + v55 + v63;
          unint64_t v64 = (67372037
               * (unint64_t)(1023 * ((-11093 * v67 + 14392 * v66 - 3297 * v68 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v65 = (67372037
               * (unint64_t)(1023 * ((-13072 * v67 - 1319 * v66 + 14392 * v68 + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v64) = 0;
          LODWORD(v65) = 0;
        }
        unsigned int *v44 = *v44 & ~(1023 << v54) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((2032 * v61
                                                                                         + 540672
                                                                                         + 20127 * v62
                                                                                         + 5983 * v63) >> 15)
                                                                         + 127)) >> 32) >> 4 << v54);
        if (v39 == 2) {
          unsigned int v39 = 0;
        }
        else {
          ++v39;
        }
        if (v37)
        {
          unint64_t v69 = *((unsigned __int8 *)&v189 + v188);
          *int v40 = *v40 & ~(1023 << v69) | (v64 << v69);
          unint64_t v70 = (int *)((char *)v40 + ((v69 >> 2) & 0x3C));
          if (v188 == 2) {
            unsigned int v71 = 0;
          }
          else {
            unsigned int v71 = v188 + 1;
          }
          unint64_t v72 = *((unsigned __int8 *)&v189 + v71);
          uint64_t v34 = v183;
          *unint64_t v70 = *v70 & ~(1023 << v72) | (v65 << v72);
          int v40 = (int *)((char *)v70 + ((v72 >> 2) & 0x3C));
          if (v71 == 2) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = v71 + 1;
          }
          unsigned int v188 = v73;
        }
        v42 += 4;
        int v41 = &v43[v54 >> 4];
        v32 += 4;
        ++v37;
        v36 += 4;
        unint64_t v24 = &v44[v54 >> 4];
        v38 += 4;
      }
      while (v185 != v37);
      if (v185 >= v182)
      {
        uint64_t v127 = (unsigned __int8 *)(v38 + v34);
        int v187 = (unsigned __int8 *)(v36 + v34);
        unint64_t v77 = v185;
        uint64_t v128 = v40;
        unint64_t v126 = v166;
      }
      else
      {
        unint64_t v74 = 0;
        unint64_t v164 = v54 >> 2;
        uint64_t v165 = v44;
        uint64_t v75 = (v54 >> 2) & 0x3C;
        uint64_t v180 = (char *)v44 + v75;
        uint64_t v76 = v34;
        unint64_t v77 = v185;
        unint64_t v181 = v40;
        do
        {
          uint64_t v186 = &v180[v74];
          int v78 = *(unsigned __int8 *)(v38 + v76 + 2);
          int v79 = *(unsigned __int8 *)(v38 + v76 + 1);
          int v80 = *(unsigned __int8 *)(v38 + v76);
          unsigned int v81 = 5983 * v78 + 540672 + 20127 * v79 + 2032 * v80;
          int v82 = *(unsigned __int8 *)(v38 + v76 + 6);
          int v83 = *(unsigned __int8 *)(v38 + v76 + 5);
          int v84 = *(unsigned __int8 *)(v38 + v76 + 4);
          int v85 = *(unsigned __int8 *)(v36 + v76 + 2);
          int v86 = *(unsigned __int8 *)(v36 + v76 + 1);
          int v87 = *(unsigned __int8 *)(v36 + v76);
          int v88 = *(unsigned __int8 *)(v36 + v76 + 6);
          int v89 = *(unsigned __int8 *)(v36 + v76 + 5);
          int v90 = *(unsigned __int8 *)(v36 + v76 + 4);
          int v91 = (unsigned int *)((char *)v43 + v75 + v74);
          unint64_t v92 = 269488145 * (1023 * ((5983 * v85 + 540672 + 20127 * v86 + 2032 * v87) >> 15) + 127);
          int v93 = v84 + v80 + v87 + v90;
          int v94 = v83 + v79 + v86 + v89;
          int v95 = v82 + v78 + v85 + v88;
          unint64_t v96 = 67372037 * (1023 * ((-11093 * v94 - 3297 * v95 + 14392 * v93 + 0x1000000) >> 17) + 127);
          unsigned int v97 = -13072 * v94 + 14392 * v95 - 1319 * v93 + 0x1000000;
          unsigned int v98 = (((269488145 * (unint64_t)(1023 * (v81 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((5983 * v82 + 540672 + 20127 * v83 + 2032 * v84) >> 15) + 127)) >> 32) >> 4 << 10);
          LODWORD(v92) = (v92 >> 36) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((5983 * v88
                                                                                         + 540672
                                                                                         + 20127 * v89
                                                                                         + 2032 * v90) >> 15)
                                                                         + 127)) >> 32) >> 4 << 10);
          int v99 = *(unsigned __int8 *)(v38 + v76 + 10);
          int v100 = *(unsigned __int8 *)(v38 + v76 + 9);
          int v101 = *(unsigned __int8 *)(v38 + v76 + 8);
          int v102 = (v96 >> 34) | (((67372037 * (unint64_t)(1023 * (v97 >> 17) + 127)) >> 32) >> 2 << 10);
          *int v91 = v98 | (((269488145
                                      * (unint64_t)(1023
                                                         * ((5983 * v99
                                                                         + 540672
                                                                         + 20127 * v100
                                                                         + 2032 * v101) >> 15)
                                                         + 127)) >> 32) >> 4 << 20);
          int v103 = *(unsigned __int8 *)(v38 + v76 + 14);
          int v104 = *(unsigned __int8 *)(v38 + v76 + 13);
          LODWORD(v96) = *(unsigned __int8 *)(v38 + v76 + 12);
          int v105 = *(unsigned __int8 *)(v36 + v76 + 10);
          int v106 = *(unsigned __int8 *)(v36 + v76 + 9);
          int v107 = *(unsigned __int8 *)(v36 + v76 + 8);
          unint64_t v108 = (269488145
                * (unint64_t)(1023 * ((5983 * v103 + 540672 + 20127 * v104 + 2032 * v96) >> 15)
                                   + 127)) >> 36;
          *(_DWORD *)uint64_t v186 = v92 | (((269488145
                                                 * (unint64_t)(1023
                                                                    * ((5983 * v105
                                                                                    + 540672
                                                                                    + 20127 * v106
                                                                                    + 2032 * v107) >> 15)
                                                                    + 127)) >> 32) >> 4 << 20);
          LODWORD(v92) = *(unsigned __int8 *)(v36 + v76 + 13);
          int v109 = *(unsigned __int8 *)(v36 + v76 + 14);
          int v110 = *(unsigned __int8 *)(v36 + v76 + 12);
          int v184 = v96 + v101 + v107 + v110;
          int v111 = v104 + v100 + v106 + v92;
          LODWORD(v96) = v103 + v99 + v105 + v109;
          int v112 = (unsigned int *)&v181[v74 / 4];
          *int v112 = v102 | (((67372037
                                        * (unint64_t)(1023
                                                           * ((-11093 * v111
                                                                           - 3297 * v96
                                                                           + 14392 * v184
                                                                           + 0x1000000) >> 17)
                                                           + 127)) >> 32) >> 2 << 20);
          int v113 = *(unsigned __int8 *)(v38 + v76 + 18);
          unsigned int v114 = 1023 * ((5983 * v109 + 540672 + 20127 * v92 + 2032 * v110) >> 15);
          int v115 = *(unsigned __int8 *)(v38 + v76 + 17);
          int v116 = *(unsigned __int8 *)(v38 + v76 + 16);
          int v117 = *(unsigned __int8 *)(v38 + v76 + 22);
          int v118 = *(unsigned __int8 *)(v38 + v76 + 21);
          int v119 = *(unsigned __int8 *)(v38 + v76 + 20);
          v91[1] = v108 | (((269488145
                                         * (unint64_t)(1023
                                                            * ((5983 * v113
                                                                            + 540672
                                                                            + 20127 * v115
                                                                            + 2032 * v116) >> 15)
                                                            + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((5983 * v117 + 540672 + 20127 * v118 + 2032 * v119) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v91) = *(unsigned __int8 *)(v36 + v76 + 18);
          LODWORD(v108) = *(unsigned __int8 *)(v36 + v76 + 17);
          int v120 = *(unsigned __int8 *)(v36 + v76 + 16);
          int v121 = *(unsigned __int8 *)(v36 + v76 + 22);
          int v122 = *(unsigned __int8 *)(v36 + v76 + 21);
          int v123 = *(unsigned __int8 *)(v36 + v76 + 20);
          *((_DWORD *)v186 + 1) = (((269488145 * (unint64_t)(v114 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((5983 * v91 + 540672 + 20127 * v108 + 2032 * v120) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((5983 * v121 + 540672 + 20127 * v122 + 2032 * v123) >> 15) + 127)) >> 32) >> 4 << 20);
          v112[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-13072 * v111
                                                                      + 14392 * v96
                                                                      - 1319 * v184
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-13072 * (v118 + v115 + v108 + v122) + 14392 * (v117 + v113 + v91 + v121) - 1319 * (v119 + v116 + v120 + v123) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-11093 * (v118 + v115 + v108 + v122) - 3297 * (v117 + v113 + v91 + v121) + 14392 * (v119 + v116 + v120 + v123) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v77 += 6;
          v74 += 8;
          v76 += 24;
        }
        while (v77 < v182);
        unint64_t v124 = &v181[v74 / 4];
        uint64_t v125 = v164 & 0x3C;
        unint64_t v24 = (unsigned int *)((char *)v165 + v125 + v74);
        unint64_t v126 = v166;
        int v41 = (unsigned int *)((char *)v43 + v125 + v74);
        uint64_t v127 = (unsigned __int8 *)(v38 + v76);
        int v187 = (unsigned __int8 *)(v36 + v76);
        uint64_t v34 = v183;
        uint64_t v128 = v124;
      }
      if (v77 < v126)
      {
        uint64_t v129 = 0;
        unsigned int v130 = v163;
        int v131 = v187;
        int v132 = v127;
        do
        {
          if (v77)
          {
            unint64_t v138 = &v127[v129 - 4];
            int v136 = v132 - 2;
            int v137 = v132 - 3;
            int v133 = v127[v129 + 2];
            int v134 = v127[v129 + 1];
            int v135 = v127[v129];
          }
          else
          {
            int v133 = 0;
            int v134 = 0;
            int v135 = 0;
            int v136 = &v127[v129 + 2];
            int v137 = &v127[v129 + 1];
            unint64_t v138 = v132;
          }
          int v139 = *v138;
          int v140 = *v137;
          int v141 = *v136;
          unint64_t v142 = *((unsigned __int8 *)&v189 + v130);
          *int v41 = (((269488145
                                * (unint64_t)(1023
                                                   * ((2032 * v139 + 540672 + 20127 * v140 + 5983 * v141) >> 15)
                                                   + 127)) >> 32) >> 4 << v142) | *v41 & ~(1023 << v142);
          if (v77)
          {
            unint64_t v148 = &v187[v129 - 4];
            int v146 = v131 - 2;
            int v147 = v131 - 3;
            int v143 = v187[v129 + 2];
            int v144 = v187[v129 + 1];
            int v145 = v187[v129];
          }
          else
          {
            int v143 = 0;
            int v144 = 0;
            int v145 = 0;
            int v146 = &v187[v129 + 2];
            int v147 = &v187[v129 + 1];
            unint64_t v148 = v131;
          }
          int v149 = *v148;
          int v150 = *v147;
          int v151 = *v146;
          if (v77)
          {
            int v154 = v135 + v139 + v145 + v149;
            int v155 = v134 + v140 + v144 + v150;
            int v156 = v133 + v141 + v143 + v151;
            unint64_t v152 = (67372037
                  * (unint64_t)(1023
                                     * ((-11093 * v155 + 14392 * v154 - 3297 * v156 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            unint64_t v153 = (67372037
                  * (unint64_t)(1023
                                     * ((-13072 * v155 - 1319 * v154 + 14392 * v156 + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v152) = 0;
            LODWORD(v153) = 0;
          }
          unsigned int *v24 = *v24 & ~(1023 << v142) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((2032 * v149
                                                                                            + 540672
                                                                                            + 20127 * v150
                                                                                            + 5983 * v151) >> 15)
                                                                            + 127)) >> 32) >> 4 << v142);
          if (v130 == 2) {
            unsigned int v130 = 0;
          }
          else {
            ++v130;
          }
          if (v77)
          {
            unint64_t v157 = *((unsigned __int8 *)&v189 + v188);
            *uint64_t v128 = *v128 & ~(1023 << v157) | (v152 << v157);
            unint64_t v158 = (int *)((char *)v128 + ((v157 >> 2) & 0x3C));
            if (v188 == 2) {
              unsigned int v159 = 0;
            }
            else {
              unsigned int v159 = v188 + 1;
            }
            unint64_t v160 = *((unsigned __int8 *)&v189 + v159);
            uint64_t v34 = v183;
            *unint64_t v158 = *v158 & ~(1023 << v160) | (v153 << v160);
            uint64_t v128 = (int *)((char *)v158 + ((v160 >> 2) & 0x3C));
            if (v159 == 2) {
              unsigned int v161 = 0;
            }
            else {
              unsigned int v161 = v159 + 1;
            }
            unsigned int v188 = v161;
          }
          v132 += 4;
          v41 += v142 >> 4;
          v131 += 4;
          ++v77;
          v129 += 4;
          v24 += v142 >> 4;
        }
        while (v126 != v77);
      }
      unsigned int v33 = &v177[v168];
      uint64_t v35 = &v174[v169];
      uint64_t v32 = &v173[v169];
      uint64_t v36 = v172 + v169;
      uint64_t v27 = v175 + v169;
      unint64_t v24 = &v176[v168];
      unint64_t v30 = &v178[v167];
      ++v179;
    }
    while (v179 != v170);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_p420ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v189 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12) {
    unint64_t v15 = v13 - v12;
  }
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v16 = v14 - v11;
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 < v14 - v11) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v17 = v13 % 6;
  BOOL v18 = v15 >= v17;
  unint64_t v19 = v15 - v17;
  if (!v18) {
    unint64_t v19 = 0;
  }
  unint64_t v182 = v19;
  if (v16 >= 2)
  {
    uint64_t v179 = 0;
    unsigned int v171 = v12 % 3;
    unsigned int v163 = v19 % 3;
    unint64_t v20 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v170 = v16 >> 1;
    unint64_t v21 = a8[1];
    unint64_t v22 = a7[1] + v21 * (v11 >> 1) + 4 * (v12 / 3);
    unint64_t v23 = *a7 + *a8 * v11 + 4 * (v12 / 3);
    unint64_t v24 = (unsigned int *)(v23 + *a8);
    uint64_t v25 = *a3;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v9;
    uint64_t v28 = 4 * v10;
    long long v29 = (unsigned __int8 *)(v27 + 4 * v10);
    uint64_t v169 = 2 * v26;
    uint64_t v168 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v30 = (int *)v22;
    unint64_t v166 = v15;
    unint64_t v167 = v21 >> 2;
    uint64_t v31 = v26 + v26 * (*(void *)(a2 + 40) + (*(void *)(a2 + 40) & 1));
    uint64_t v32 = &v29[v26];
    unsigned int v33 = (unsigned int *)v23;
    uint64_t v34 = v28;
    uint64_t v35 = v29;
    uint64_t v36 = v25 + v31;
    uint64_t v183 = v28;
    unint64_t v185 = v20;
    do
    {
      uint64_t v37 = 0;
      uint64_t v175 = v27;
      uint64_t v176 = v24;
      uint64_t v38 = v27;
      uint64_t v172 = v36;
      v173 = v32;
      unsigned int v39 = v171;
      unsigned int v188 = v171;
      unint64_t v177 = v33;
      v178 = v30;
      int v40 = v30;
      int v41 = v33;
      unint64_t v174 = v35;
      int v42 = v35;
      do
      {
        unint64_t v43 = v41;
        int v44 = v24;
        if (v37)
        {
          int v50 = (unsigned __int8 *)(v38 + v34 - 4);
          int v48 = v42 - 2;
          unint64_t v49 = v42 - 3;
          int v45 = *(unsigned __int8 *)(v38 + v34 + 2);
          int v46 = *(unsigned __int8 *)(v38 + v34 + 1);
          int v47 = *(unsigned __int8 *)(v38 + v34);
        }
        else
        {
          int v45 = 0;
          int v46 = 0;
          int v47 = 0;
          int v48 = (unsigned __int8 *)(v38 + v34 + 2);
          unint64_t v49 = (unsigned __int8 *)(v38 + v34 + 1);
          int v50 = v42;
        }
        int v51 = *v50;
        int v52 = *v49;
        int v53 = *v48;
        unint64_t v54 = *((unsigned __int8 *)&v189 + v39);
        unsigned int *v43 = (((269488145
                              * (unint64_t)(1023
                                                 * ((3208 * v51 + 540672 + 16519 * v52 + 8414 * v53) >> 15)
                                                 + 127)) >> 32) >> 4 << v54) | *v43 & ~(1023 << v54);
        if (v37)
        {
          unint64_t v60 = (unsigned __int8 *)(v36 + v34 - 4);
          int v58 = v32 - 2;
          unint64_t v59 = v32 - 3;
          int v55 = *(unsigned __int8 *)(v36 + v34 + 2);
          int v56 = *(unsigned __int8 *)(v36 + v34 + 1);
          int v57 = *(unsigned __int8 *)(v36 + v34);
        }
        else
        {
          int v55 = 0;
          int v56 = 0;
          int v57 = 0;
          int v58 = (unsigned __int8 *)(v36 + v34 + 2);
          unint64_t v59 = (unsigned __int8 *)(v36 + v34 + 1);
          unint64_t v60 = v32;
        }
        int v61 = *v60;
        int v62 = *v59;
        int v63 = *v58;
        if (v37)
        {
          int v66 = v47 + v51 + v57 + v61;
          int v67 = v46 + v52 + v56 + v62;
          int v68 = v45 + v53 + v55 + v63;
          unint64_t v64 = (67372037
               * (unint64_t)(1023 * ((-9534 * v67 + 14392 * v66 - 4856 * v68 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v65 = (67372037
               * (unint64_t)(1023 * ((-12051 * v67 - 2340 * v66 + 14392 * v68 + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v64) = 0;
          LODWORD(v65) = 0;
        }
        unsigned int *v44 = *v44 & ~(1023 << v54) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((3208 * v61
                                                                                         + 540672
                                                                                         + 16519 * v62
                                                                                         + 8414 * v63) >> 15)
                                                                         + 127)) >> 32) >> 4 << v54);
        if (v39 == 2) {
          unsigned int v39 = 0;
        }
        else {
          ++v39;
        }
        if (v37)
        {
          unint64_t v69 = *((unsigned __int8 *)&v189 + v188);
          *int v40 = *v40 & ~(1023 << v69) | (v64 << v69);
          unint64_t v70 = (int *)((char *)v40 + ((v69 >> 2) & 0x3C));
          if (v188 == 2) {
            unsigned int v71 = 0;
          }
          else {
            unsigned int v71 = v188 + 1;
          }
          unint64_t v72 = *((unsigned __int8 *)&v189 + v71);
          uint64_t v34 = v183;
          *unint64_t v70 = *v70 & ~(1023 << v72) | (v65 << v72);
          int v40 = (int *)((char *)v70 + ((v72 >> 2) & 0x3C));
          if (v71 == 2) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = v71 + 1;
          }
          unsigned int v188 = v73;
        }
        v42 += 4;
        int v41 = &v43[v54 >> 4];
        v32 += 4;
        ++v37;
        v36 += 4;
        unint64_t v24 = &v44[v54 >> 4];
        v38 += 4;
      }
      while (v185 != v37);
      if (v185 >= v182)
      {
        uint64_t v127 = (unsigned __int8 *)(v38 + v34);
        int v187 = (unsigned __int8 *)(v36 + v34);
        unint64_t v77 = v185;
        uint64_t v128 = v40;
        unint64_t v126 = v166;
      }
      else
      {
        unint64_t v74 = 0;
        unint64_t v164 = v54 >> 2;
        uint64_t v165 = v44;
        uint64_t v75 = (v54 >> 2) & 0x3C;
        uint64_t v180 = (char *)v44 + v75;
        uint64_t v76 = v34;
        unint64_t v77 = v185;
        unint64_t v181 = v40;
        do
        {
          uint64_t v186 = &v180[v74];
          int v78 = *(unsigned __int8 *)(v38 + v76 + 2);
          int v79 = *(unsigned __int8 *)(v38 + v76 + 1);
          int v80 = *(unsigned __int8 *)(v38 + v76);
          unsigned int v81 = 8414 * v78 + 540672 + 16519 * v79 + 3208 * v80;
          int v82 = *(unsigned __int8 *)(v38 + v76 + 6);
          int v83 = *(unsigned __int8 *)(v38 + v76 + 5);
          int v84 = *(unsigned __int8 *)(v38 + v76 + 4);
          int v85 = *(unsigned __int8 *)(v36 + v76 + 2);
          int v86 = *(unsigned __int8 *)(v36 + v76 + 1);
          int v87 = *(unsigned __int8 *)(v36 + v76);
          int v88 = *(unsigned __int8 *)(v36 + v76 + 6);
          int v89 = *(unsigned __int8 *)(v36 + v76 + 5);
          int v90 = *(unsigned __int8 *)(v36 + v76 + 4);
          int v91 = (unsigned int *)((char *)v43 + v75 + v74);
          unint64_t v92 = 269488145 * (1023 * ((8414 * v85 + 540672 + 16519 * v86 + 3208 * v87) >> 15) + 127);
          int v93 = v84 + v80 + v87 + v90;
          int v94 = v83 + v79 + v86 + v89;
          int v95 = v82 + v78 + v85 + v88;
          unint64_t v96 = 67372037 * (1023 * ((-9534 * v94 - 4856 * v95 + 14392 * v93 + 0x1000000) >> 17) + 127);
          unsigned int v97 = -12051 * v94 + 14392 * v95 - 2340 * v93 + 0x1000000;
          unsigned int v98 = (((269488145 * (unint64_t)(1023 * (v81 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((8414 * v82 + 540672 + 16519 * v83 + 3208 * v84) >> 15) + 127)) >> 32) >> 4 << 10);
          LODWORD(v92) = (v92 >> 36) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((8414 * v88
                                                                                         + 540672
                                                                                         + 16519 * v89
                                                                                         + 3208 * v90) >> 15)
                                                                         + 127)) >> 32) >> 4 << 10);
          int v99 = *(unsigned __int8 *)(v38 + v76 + 10);
          int v100 = *(unsigned __int8 *)(v38 + v76 + 9);
          int v101 = *(unsigned __int8 *)(v38 + v76 + 8);
          int v102 = (v96 >> 34) | (((67372037 * (unint64_t)(1023 * (v97 >> 17) + 127)) >> 32) >> 2 << 10);
          *int v91 = v98 | (((269488145
                                      * (unint64_t)(1023
                                                         * ((8414 * v99
                                                                         + 540672
                                                                         + 16519 * v100
                                                                         + 3208 * v101) >> 15)
                                                         + 127)) >> 32) >> 4 << 20);
          int v103 = *(unsigned __int8 *)(v38 + v76 + 14);
          int v104 = *(unsigned __int8 *)(v38 + v76 + 13);
          LODWORD(v96) = *(unsigned __int8 *)(v38 + v76 + 12);
          int v105 = *(unsigned __int8 *)(v36 + v76 + 10);
          int v106 = *(unsigned __int8 *)(v36 + v76 + 9);
          int v107 = *(unsigned __int8 *)(v36 + v76 + 8);
          unint64_t v108 = (269488145
                * (unint64_t)(1023 * ((8414 * v103 + 540672 + 16519 * v104 + 3208 * v96) >> 15)
                                   + 127)) >> 36;
          *(_DWORD *)uint64_t v186 = v92 | (((269488145
                                                 * (unint64_t)(1023
                                                                    * ((8414 * v105
                                                                                    + 540672
                                                                                    + 16519 * v106
                                                                                    + 3208 * v107) >> 15)
                                                                    + 127)) >> 32) >> 4 << 20);
          LODWORD(v92) = *(unsigned __int8 *)(v36 + v76 + 13);
          int v109 = *(unsigned __int8 *)(v36 + v76 + 14);
          int v110 = *(unsigned __int8 *)(v36 + v76 + 12);
          int v184 = v96 + v101 + v107 + v110;
          int v111 = v104 + v100 + v106 + v92;
          LODWORD(v96) = v103 + v99 + v105 + v109;
          int v112 = (unsigned int *)&v181[v74 / 4];
          *int v112 = v102 | (((67372037
                                        * (unint64_t)(1023
                                                           * ((-9534 * v111
                                                                           - 4856 * v96
                                                                           + 14392 * v184
                                                                           + 0x1000000) >> 17)
                                                           + 127)) >> 32) >> 2 << 20);
          int v113 = *(unsigned __int8 *)(v38 + v76 + 18);
          unsigned int v114 = 1023 * ((8414 * v109 + 540672 + 16519 * v92 + 3208 * v110) >> 15);
          int v115 = *(unsigned __int8 *)(v38 + v76 + 17);
          int v116 = *(unsigned __int8 *)(v38 + v76 + 16);
          int v117 = *(unsigned __int8 *)(v38 + v76 + 22);
          int v118 = *(unsigned __int8 *)(v38 + v76 + 21);
          int v119 = *(unsigned __int8 *)(v38 + v76 + 20);
          v91[1] = v108 | (((269488145
                                         * (unint64_t)(1023
                                                            * ((8414 * v113
                                                                            + 540672
                                                                            + 16519 * v115
                                                                            + 3208 * v116) >> 15)
                                                            + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((8414 * v117 + 540672 + 16519 * v118 + 3208 * v119) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v91) = *(unsigned __int8 *)(v36 + v76 + 18);
          LODWORD(v108) = *(unsigned __int8 *)(v36 + v76 + 17);
          int v120 = *(unsigned __int8 *)(v36 + v76 + 16);
          int v121 = *(unsigned __int8 *)(v36 + v76 + 22);
          int v122 = *(unsigned __int8 *)(v36 + v76 + 21);
          int v123 = *(unsigned __int8 *)(v36 + v76 + 20);
          *((_DWORD *)v186 + 1) = (((269488145 * (unint64_t)(v114 + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((8414 * v91 + 540672 + 16519 * v108 + 3208 * v120) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((8414 * v121 + 540672 + 16519 * v122 + 3208 * v123) >> 15) + 127)) >> 32) >> 4 << 20);
          v112[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-12051 * v111
                                                                      + 14392 * v96
                                                                      - 2340 * v184
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-12051 * (v118 + v115 + v108 + v122) + 14392 * (v117 + v113 + v91 + v121) - 2340 * (v119 + v116 + v120 + v123) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-9534 * (v118 + v115 + v108 + v122) - 4856 * (v117 + v113 + v91 + v121) + 14392 * (v119 + v116 + v120 + v123) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v77 += 6;
          v74 += 8;
          v76 += 24;
        }
        while (v77 < v182);
        unint64_t v124 = &v181[v74 / 4];
        uint64_t v125 = v164 & 0x3C;
        unint64_t v24 = (unsigned int *)((char *)v165 + v125 + v74);
        unint64_t v126 = v166;
        int v41 = (unsigned int *)((char *)v43 + v125 + v74);
        uint64_t v127 = (unsigned __int8 *)(v38 + v76);
        int v187 = (unsigned __int8 *)(v36 + v76);
        uint64_t v34 = v183;
        uint64_t v128 = v124;
      }
      if (v77 < v126)
      {
        uint64_t v129 = 0;
        unsigned int v130 = v163;
        int v131 = v187;
        int v132 = v127;
        do
        {
          if (v77)
          {
            unint64_t v138 = &v127[v129 - 4];
            int v136 = v132 - 2;
            int v137 = v132 - 3;
            int v133 = v127[v129 + 2];
            int v134 = v127[v129 + 1];
            int v135 = v127[v129];
          }
          else
          {
            int v133 = 0;
            int v134 = 0;
            int v135 = 0;
            int v136 = &v127[v129 + 2];
            int v137 = &v127[v129 + 1];
            unint64_t v138 = v132;
          }
          int v139 = *v138;
          int v140 = *v137;
          int v141 = *v136;
          unint64_t v142 = *((unsigned __int8 *)&v189 + v130);
          *int v41 = (((269488145
                                * (unint64_t)(1023
                                                   * ((3208 * v139 + 540672 + 16519 * v140 + 8414 * v141) >> 15)
                                                   + 127)) >> 32) >> 4 << v142) | *v41 & ~(1023 << v142);
          if (v77)
          {
            unint64_t v148 = &v187[v129 - 4];
            int v146 = v131 - 2;
            int v147 = v131 - 3;
            int v143 = v187[v129 + 2];
            int v144 = v187[v129 + 1];
            int v145 = v187[v129];
          }
          else
          {
            int v143 = 0;
            int v144 = 0;
            int v145 = 0;
            int v146 = &v187[v129 + 2];
            int v147 = &v187[v129 + 1];
            unint64_t v148 = v131;
          }
          int v149 = *v148;
          int v150 = *v147;
          int v151 = *v146;
          if (v77)
          {
            int v154 = v135 + v139 + v145 + v149;
            int v155 = v134 + v140 + v144 + v150;
            int v156 = v133 + v141 + v143 + v151;
            unint64_t v152 = (67372037
                  * (unint64_t)(1023
                                     * ((-9534 * v155 + 14392 * v154 - 4856 * v156 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            unint64_t v153 = (67372037
                  * (unint64_t)(1023
                                     * ((-12051 * v155 - 2340 * v154 + 14392 * v156 + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v152) = 0;
            LODWORD(v153) = 0;
          }
          unsigned int *v24 = *v24 & ~(1023 << v142) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((3208 * v149
                                                                                            + 540672
                                                                                            + 16519 * v150
                                                                                            + 8414 * v151) >> 15)
                                                                            + 127)) >> 32) >> 4 << v142);
          if (v130 == 2) {
            unsigned int v130 = 0;
          }
          else {
            ++v130;
          }
          if (v77)
          {
            unint64_t v157 = *((unsigned __int8 *)&v189 + v188);
            *uint64_t v128 = *v128 & ~(1023 << v157) | (v152 << v157);
            unint64_t v158 = (int *)((char *)v128 + ((v157 >> 2) & 0x3C));
            if (v188 == 2) {
              unsigned int v159 = 0;
            }
            else {
              unsigned int v159 = v188 + 1;
            }
            unint64_t v160 = *((unsigned __int8 *)&v189 + v159);
            uint64_t v34 = v183;
            *unint64_t v158 = *v158 & ~(1023 << v160) | (v153 << v160);
            uint64_t v128 = (int *)((char *)v158 + ((v160 >> 2) & 0x3C));
            if (v159 == 2) {
              unsigned int v161 = 0;
            }
            else {
              unsigned int v161 = v159 + 1;
            }
            unsigned int v188 = v161;
          }
          v132 += 4;
          v41 += v142 >> 4;
          v131 += 4;
          ++v77;
          v129 += 4;
          v24 += v142 >> 4;
        }
        while (v126 != v77);
      }
      unsigned int v33 = &v177[v168];
      uint64_t v35 = &v174[v169];
      uint64_t v32 = &v173[v169];
      uint64_t v36 = v172 + v169;
      uint64_t v27 = v175 + v169;
      unint64_t v24 = &v176[v168];
      unint64_t v30 = &v178[v167];
      ++v179;
    }
    while (v179 != v170);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_pf20ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v188 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12) {
    unint64_t v17 = v15 - v12;
  }
  unint64_t v18 = v14 % 6;
  unint64_t v181 = v16;
  BOOL v19 = v16 >= v18;
  unint64_t v20 = v16 - v18;
  if (v19) {
    unint64_t v21 = v20;
  }
  else {
    unint64_t v21 = 0;
  }
  if (v17 >= 2)
  {
    uint64_t v22 = 0;
    unsigned int v168 = v13 % 3;
    unsigned int v160 = v21 % 3;
    unint64_t v23 = 6 * (v13 / 6) - v13 + 6;
    unint64_t v167 = v17 >> 1;
    unint64_t v24 = a8[1];
    uint64_t v25 = (int *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    uint64_t v26 = (unsigned int *)(*a7 + *a8 * v12 + 4 * (v13 / 3));
    uint64_t v27 = *a3;
    uint64_t v28 = *a4;
    long long v29 = (unsigned int *)((char *)v26 + *a8);
    uint64_t v30 = *a3 + v28 * v9;
    unint64_t v31 = v23;
    uint64_t v187 = 4 * v10;
    uint64_t v32 = (unsigned __int8 *)(v30 + 4 * v10);
    unsigned int v33 = &v32[v28];
    uint64_t v166 = 2 * v28;
    uint64_t v165 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v164 = v24 >> 2;
    uint64_t v34 = v27 + v28 + v28 * (v8 + (v8 & 1));
    unint64_t v183 = v31;
    unint64_t v177 = v21;
    do
    {
      uint64_t v175 = v25;
      uint64_t v176 = v22;
      uint64_t v35 = 0;
      uint64_t v172 = v30;
      v173 = v29;
      uint64_t v36 = v30;
      uint64_t v169 = v34;
      unint64_t v170 = v33;
      unsigned int v37 = v168;
      unsigned int v186 = v168;
      unint64_t v174 = v26;
      unsigned int v171 = v32;
      do
      {
        uint64_t v38 = v26;
        unsigned int v39 = v29;
        if (v35)
        {
          int v45 = (unsigned __int8 *)(v36 + v187 - 4);
          unint64_t v43 = v32 - 2;
          int v44 = v32 - 3;
          int v40 = *(unsigned __int8 *)(v36 + v187 + 2);
          int v41 = *(unsigned __int8 *)(v36 + v187 + 1);
          int v42 = *(unsigned __int8 *)(v36 + v187);
        }
        else
        {
          int v40 = 0;
          int v41 = 0;
          int v42 = 0;
          unint64_t v43 = (unsigned __int8 *)(v36 + v187 + 2);
          int v44 = (unsigned __int8 *)(v36 + v187 + 1);
          int v45 = v32;
        }
        int v46 = *v45;
        int v47 = *v44;
        int v48 = *v43;
        unint64_t v49 = *((unsigned __int8 *)&v188 + v37);
        *uint64_t v38 = (((269488145
                              * (unint64_t)(1023
                                                 * ((22217 * v47 + 1943 * v46 + 8608 * v48 + 0x4000) >> 15)
                                                 + 127)) >> 32) >> 4 << v49) | *v38 & ~(1023 << v49);
        if (v35)
        {
          int v55 = (unsigned __int8 *)(v34 + v187 - 4);
          int v53 = v33 - 2;
          unint64_t v54 = v33 - 3;
          int v50 = *(unsigned __int8 *)(v34 + v187 + 2);
          int v51 = *(unsigned __int8 *)(v34 + v187 + 1);
          int v52 = *(unsigned __int8 *)(v34 + v187);
        }
        else
        {
          int v50 = 0;
          int v51 = 0;
          int v52 = 0;
          int v53 = (unsigned __int8 *)(v34 + v187 + 2);
          unint64_t v54 = (unsigned __int8 *)(v34 + v187 + 1);
          int v55 = v33;
        }
        int v56 = *v55;
        int v57 = *v54;
        int v58 = *v53;
        if (v35)
        {
          int v61 = v42 + v46 + v52 + v56;
          int v62 = v41 + v47 + v51 + v57;
          int v63 = v40 + v48 + v50 + v58;
          unint64_t v59 = (67372037
               * (unint64_t)(1023 * ((-11808 * v62 + (v61 << 14) - 4574 * v63 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v60 = (67372037
               * (unint64_t)(1023 * ((-15065 * v62 - 1317 * v61 + (v63 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v59) = 0;
          LODWORD(v60) = 0;
        }
        *unsigned int v39 = *v39 & ~(1023 << v49) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((22217 * v57
                                                                                         + 1943 * v56
                                                                                         + 8608 * v58
                                                                                         + 0x4000) >> 15)
                                                                         + 127)) >> 32) >> 4 << v49);
        if (v37 == 2) {
          unsigned int v37 = 0;
        }
        else {
          ++v37;
        }
        if (v35)
        {
          unint64_t v64 = *((unsigned __int8 *)&v188 + v186);
          *uint64_t v25 = *v25 & ~(1023 << v64) | (v59 << v64);
          unint64_t v65 = (int *)((char *)v25 + ((v64 >> 2) & 0x3C));
          if (v186 == 2) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = v186 + 1;
          }
          unint64_t v67 = *((unsigned __int8 *)&v188 + v66);
          *unint64_t v65 = *v65 & ~(1023 << v67) | (v60 << v67);
          uint64_t v25 = (int *)((char *)v65 + ((v67 >> 2) & 0x3C));
          if (v66 == 2) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = v66 + 1;
          }
          unsigned int v186 = v68;
          unint64_t v31 = v183;
        }
        v32 += 4;
        uint64_t v26 = &v38[v49 >> 4];
        v33 += 4;
        ++v35;
        v34 += 4;
        long long v29 = &v39[v49 >> 4];
        v36 += 4;
      }
      while (v31 != v35);
      if (v31 >= v21)
      {
        unint64_t v185 = (unsigned __int8 *)(v36 + v187);
        int v123 = (unsigned __int8 *)(v34 + v187);
        unint64_t v72 = v31;
        unint64_t v124 = v181;
      }
      else
      {
        unint64_t v69 = 0;
        unsigned int v161 = v39;
        unint64_t v162 = v49 >> 2;
        uint64_t v70 = (v49 >> 2) & 0x3C;
        unsigned int v163 = v38;
        v178 = (char *)v38 + v70;
        uint64_t v179 = (char *)v39 + v70;
        uint64_t v71 = v187;
        unint64_t v72 = v31;
        uint64_t v180 = v25;
        do
        {
          int v184 = &v179[v69];
          int v73 = *(unsigned __int8 *)(v36 + v71 + 2);
          int v74 = *(unsigned __int8 *)(v36 + v71 + 1);
          int v75 = *(unsigned __int8 *)(v36 + v71);
          unsigned int v76 = 22217 * v74 + 8608 * v73 + 1943 * v75 + 0x4000;
          int v77 = *(unsigned __int8 *)(v36 + v71 + 6);
          int v78 = *(unsigned __int8 *)(v36 + v71 + 5);
          int v79 = *(unsigned __int8 *)(v36 + v71 + 4);
          unsigned int v80 = 22217 * v78 + 8608 * v77 + 1943 * v79 + 0x4000;
          int v81 = *(unsigned __int8 *)(v34 + v71 + 2);
          int v82 = *(unsigned __int8 *)(v34 + v71 + 1);
          int v83 = *(unsigned __int8 *)(v34 + v71);
          int v84 = *(unsigned __int8 *)(v34 + v71 + 6);
          int v85 = *(unsigned __int8 *)(v34 + v71 + 5);
          int v86 = *(unsigned __int8 *)(v34 + v71 + 4);
          unint64_t v182 = (unsigned int *)&v178[v69];
          unint64_t v87 = 269488145 * (1023 * ((22217 * v82 + 8608 * v81 + 1943 * v83 + 0x4000) >> 15) + 127);
          uint64_t v88 = 269488145 * (1023 * ((22217 * v85 + 8608 * v84 + 1943 * v86 + 0x4000) >> 15) + 127);
          int v89 = v79 + v75 + v83 + v86;
          int v90 = v77 + v73 + v81 + v84;
          int v91 = *(unsigned __int8 *)(v36 + v71 + 10);
          int v92 = *(unsigned __int8 *)(v36 + v71 + 9);
          int v93 = *(unsigned __int8 *)(v36 + v71 + 8);
          *unint64_t v182 = (((269488145 * (unint64_t)(1023 * (v76 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v80 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((22217 * v92 + 8608 * v91 + 1943 * v93 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          unsigned int v94 = (((67372037
                               * (unint64_t)(1023
                                                  * ((-11808 * (v78 + v74 + v82 + v85)
                                                                  - 4574 * v90
                                                                  + (v89 << 14)
                                                                  + 0x1000000) >> 17)
                                                  + 127)) >> 32) >> 2) | (((67372037
                                                                                        * (unint64_t)(1023 * ((-15065 * (v78 + v74 + v82 + v85) + (v90 << 14) - 1317 * v89 + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          int v95 = *(unsigned __int8 *)(v36 + v71 + 14);
          LODWORD(v88) = *(unsigned __int8 *)(v36 + v71 + 13);
          int v96 = *(unsigned __int8 *)(v36 + v71 + 12);
          int v97 = *(unsigned __int8 *)(v34 + v71 + 10);
          int v98 = *(unsigned __int8 *)(v34 + v71 + 9);
          int v99 = *(unsigned __int8 *)(v34 + v71 + 8);
          unint64_t v100 = (269488145
                * (unint64_t)(1023 * ((22217 * v88 + 8608 * v95 + 1943 * v96 + 0x4000) >> 15) + 127)) >> 36;
          *(_DWORD *)int v184 = (v87 >> 36) | (HIDWORD(v88) >> 4 << 10) | (((269488145
                                                                                     * (unint64_t)(1023 * ((22217 * v98 + 8608 * v97 + 1943 * v99 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v101 = *(unsigned __int8 *)(v34 + v71 + 14);
          int v102 = *(unsigned __int8 *)(v34 + v71 + 13);
          LODWORD(v87) = *(unsigned __int8 *)(v34 + v71 + 12);
          int v103 = v96 + v93;
          int v104 = v99 + v87;
          int v105 = 22217 * v102 + 8608 * v101;
          int v106 = v103 + v104;
          int v107 = v88 + v92 + v98 + v102;
          int v108 = v95 + v91 + v97 + v101;
          unsigned int v109 = v105 + 1943 * v87 + 0x4000;
          int v110 = (unsigned int *)&v180[v69 / 4];
          *int v110 = v94 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-11808 * v107
                                                                          - 4574 * v108
                                                                          + ((v103 + v104) << 14)
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          int v111 = *(unsigned __int8 *)(v36 + v71 + 18);
          int v112 = *(unsigned __int8 *)(v36 + v71 + 17);
          int v113 = *(unsigned __int8 *)(v36 + v71 + 16);
          int v114 = *(unsigned __int8 *)(v36 + v71 + 22);
          int v115 = *(unsigned __int8 *)(v36 + v71 + 21);
          int v116 = *(unsigned __int8 *)(v36 + v71 + 20);
          v182[1] = v100 | (((269488145
                                          * (unint64_t)(1023
                                                             * ((22217 * v112
                                                                             + 8608 * v111
                                                                             + 1943 * v113
                                                                             + 0x4000) >> 15)
                                                             + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((22217 * v115 + 8608 * v114 + 1943 * v116 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v100) = *(unsigned __int8 *)(v34 + v71 + 18);
          int v117 = *(unsigned __int8 *)(v34 + v71 + 17);
          LODWORD(v87) = *(unsigned __int8 *)(v34 + v71 + 16);
          int v118 = *(unsigned __int8 *)(v34 + v71 + 22);
          int v119 = *(unsigned __int8 *)(v34 + v71 + 21);
          int v120 = *(unsigned __int8 *)(v34 + v71 + 20);
          *((_DWORD *)v184 + 1) = (((269488145 * (unint64_t)(1023 * (v109 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((22217 * v117 + 8608 * v100 + 1943 * v87 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((22217 * v119 + 8608 * v118 + 1943 * v120 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v121 = v117 + v119;
          unint64_t v21 = v177;
          v110[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-15065 * v107
                                                                      + (v108 << 14)
                                                                      - 1317 * v106
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-15065 * (v115 + v112 + v121) + ((v114 + v111 + v100 + v118) << 14) - 1317 * (v116 + v113 + v87 + v120) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-11808 * (v115 + v112 + v121) - 4574 * (v114 + v111 + v100 + v118) + ((v116 + v113 + v87 + v120) << 14) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v72 += 6;
          v69 += 8;
          v71 += 24;
        }
        while (v72 < v177);
        uint64_t v25 = &v180[v69 / 4];
        uint64_t v122 = v162 & 0x3C;
        long long v29 = (unsigned int *)((char *)v161 + v122 + v69);
        uint64_t v26 = (unsigned int *)((char *)v163 + v122 + v69);
        unint64_t v185 = (unsigned __int8 *)(v36 + v71);
        int v123 = (unsigned __int8 *)(v34 + v71);
        unint64_t v124 = v181;
        unint64_t v31 = v183;
      }
      if (v72 < v124)
      {
        uint64_t v125 = 0;
        unsigned int v126 = v160;
        uint64_t v127 = v123;
        uint64_t v128 = v185;
        do
        {
          if (v72)
          {
            int v134 = &v185[v125 - 4];
            int v132 = v128 - 2;
            int v133 = v128 - 3;
            int v129 = v185[v125 + 2];
            int v130 = v185[v125 + 1];
            int v131 = v185[v125];
          }
          else
          {
            int v129 = 0;
            int v130 = 0;
            int v131 = 0;
            int v132 = &v185[v125 + 2];
            int v133 = &v185[v125 + 1];
            int v134 = v128;
          }
          int v135 = *v134;
          int v136 = *v133;
          int v137 = *v132;
          unint64_t v138 = *((unsigned __int8 *)&v188 + v126);
          *uint64_t v26 = (((269488145
                                * (unint64_t)(1023
                                                   * ((22217 * v136 + 1943 * v135 + 8608 * v137 + 0x4000) >> 15)
                                                   + 127)) >> 32) >> 4 << v138) | *v26 & ~(1023 << v138);
          if (v72)
          {
            int v144 = &v123[v125 - 4];
            unint64_t v142 = v127 - 2;
            int v143 = v127 - 3;
            int v139 = v123[v125 + 2];
            int v140 = v123[v125 + 1];
            int v141 = v123[v125];
          }
          else
          {
            int v139 = 0;
            int v140 = 0;
            int v141 = 0;
            unint64_t v142 = &v123[v125 + 2];
            int v143 = &v123[v125 + 1];
            int v144 = v127;
          }
          int v145 = *v144;
          int v146 = *v143;
          int v147 = *v142;
          if (v72)
          {
            int v150 = v131 + v135 + v141 + v145;
            int v151 = v130 + v136 + v140 + v146;
            int v152 = v129 + v137 + v139 + v147;
            unint64_t v148 = (67372037
                  * (unint64_t)(1023
                                     * ((-11808 * v151 + (v150 << 14) - 4574 * v152 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            unint64_t v149 = (67372037
                  * (unint64_t)(1023
                                     * ((-15065 * v151 - 1317 * v150 + (v152 << 14) + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v148) = 0;
            LODWORD(v149) = 0;
          }
          unsigned int *v29 = *v29 & ~(1023 << v138) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((22217 * v146
                                                                                            + 1943 * v145
                                                                                            + 8608 * v147
                                                                                            + 0x4000) >> 15)
                                                                            + 127)) >> 32) >> 4 << v138);
          if (v126 == 2) {
            unsigned int v126 = 0;
          }
          else {
            ++v126;
          }
          if (v72)
          {
            unint64_t v153 = *((unsigned __int8 *)&v188 + v186);
            *uint64_t v25 = *v25 & ~(1023 << v153) | (v148 << v153);
            int v154 = (int *)((char *)v25 + ((v153 >> 2) & 0x3C));
            if (v186 == 2) {
              unsigned int v155 = 0;
            }
            else {
              unsigned int v155 = v186 + 1;
            }
            unint64_t v156 = *((unsigned __int8 *)&v188 + v155);
            int *v154 = *v154 & ~(1023 << v156) | (v149 << v156);
            uint64_t v25 = (int *)((char *)v154 + ((v156 >> 2) & 0x3C));
            if (v155 == 2) {
              unsigned int v157 = 0;
            }
            else {
              unsigned int v157 = v155 + 1;
            }
            unsigned int v186 = v157;
          }
          unint64_t v31 = v183;
          v128 += 4;
          unint64_t v158 = v138 >> 4;
          v26 += v158;
          v127 += 4;
          ++v72;
          v125 += 4;
          v29 += v158;
        }
        while (v181 != v72);
      }
      uint64_t v26 = &v174[v165];
      uint64_t v32 = &v171[v166];
      unsigned int v33 = &v170[v166];
      uint64_t v22 = v176 + 1;
      uint64_t v34 = v169 + v166;
      uint64_t v30 = v172 + v166;
      long long v29 = &v173[v165];
      uint64_t v25 = &v175[v164];
    }
    while (v176 + 1 != v167);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_pf20ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v188 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12) {
    unint64_t v17 = v15 - v12;
  }
  unint64_t v18 = v14 % 6;
  unint64_t v181 = v16;
  BOOL v19 = v16 >= v18;
  unint64_t v20 = v16 - v18;
  if (v19) {
    unint64_t v21 = v20;
  }
  else {
    unint64_t v21 = 0;
  }
  if (v17 >= 2)
  {
    uint64_t v22 = 0;
    unsigned int v168 = v13 % 3;
    unsigned int v160 = v21 % 3;
    unint64_t v23 = 6 * (v13 / 6) - v13 + 6;
    unint64_t v167 = v17 >> 1;
    unint64_t v24 = a8[1];
    uint64_t v25 = (int *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    uint64_t v26 = (unsigned int *)(*a7 + *a8 * v12 + 4 * (v13 / 3));
    uint64_t v27 = *a3;
    uint64_t v28 = *a4;
    long long v29 = (unsigned int *)((char *)v26 + *a8);
    uint64_t v30 = *a3 + v28 * v9;
    unint64_t v31 = v23;
    uint64_t v187 = 4 * v10;
    uint64_t v32 = (unsigned __int8 *)(v30 + 4 * v10);
    unsigned int v33 = &v32[v28];
    uint64_t v166 = 2 * v28;
    uint64_t v165 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v164 = v24 >> 2;
    uint64_t v34 = v27 + v28 + v28 * (v8 + (v8 & 1));
    unint64_t v183 = v31;
    unint64_t v177 = v21;
    do
    {
      uint64_t v175 = v25;
      uint64_t v176 = v22;
      uint64_t v35 = 0;
      uint64_t v172 = v30;
      v173 = v29;
      uint64_t v36 = v30;
      uint64_t v169 = v34;
      unint64_t v170 = v33;
      unsigned int v37 = v168;
      unsigned int v186 = v168;
      unint64_t v174 = v26;
      unsigned int v171 = v32;
      do
      {
        uint64_t v38 = v26;
        unsigned int v39 = v29;
        if (v35)
        {
          int v45 = (unsigned __int8 *)(v36 + v187 - 4);
          unint64_t v43 = v32 - 2;
          int v44 = v32 - 3;
          int v40 = *(unsigned __int8 *)(v36 + v187 + 2);
          int v41 = *(unsigned __int8 *)(v36 + v187 + 1);
          int v42 = *(unsigned __int8 *)(v36 + v187);
        }
        else
        {
          int v40 = 0;
          int v41 = 0;
          int v42 = 0;
          unint64_t v43 = (unsigned __int8 *)(v36 + v187 + 2);
          int v44 = (unsigned __int8 *)(v36 + v187 + 1);
          int v45 = v32;
        }
        int v46 = *v45;
        int v47 = *v44;
        int v48 = *v43;
        unint64_t v49 = *((unsigned __int8 *)&v188 + v37);
        *uint64_t v38 = (((269488145
                              * (unint64_t)(1023
                                                 * ((23436 * v47 + 2366 * v46 + 6966 * v48 + 0x4000) >> 15)
                                                 + 127)) >> 32) >> 4 << v49) | *v38 & ~(1023 << v49);
        if (v35)
        {
          int v55 = (unsigned __int8 *)(v34 + v187 - 4);
          int v53 = v33 - 2;
          unint64_t v54 = v33 - 3;
          int v50 = *(unsigned __int8 *)(v34 + v187 + 2);
          int v51 = *(unsigned __int8 *)(v34 + v187 + 1);
          int v52 = *(unsigned __int8 *)(v34 + v187);
        }
        else
        {
          int v50 = 0;
          int v51 = 0;
          int v52 = 0;
          int v53 = (unsigned __int8 *)(v34 + v187 + 2);
          unint64_t v54 = (unsigned __int8 *)(v34 + v187 + 1);
          int v55 = v33;
        }
        int v56 = *v55;
        int v57 = *v54;
        int v58 = *v53;
        if (v35)
        {
          int v61 = v42 + v46 + v52 + v56;
          int v62 = v41 + v47 + v51 + v57;
          int v63 = v40 + v48 + v50 + v58;
          unint64_t v59 = (67372037
               * (unint64_t)(1023 * ((-12629 * v62 + (v61 << 14) - 3753 * v63 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v60 = (67372037
               * (unint64_t)(1023 * ((-14881 * v62 - 1501 * v61 + (v63 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v59) = 0;
          LODWORD(v60) = 0;
        }
        *unsigned int v39 = *v39 & ~(1023 << v49) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((23436 * v57
                                                                                         + 2366 * v56
                                                                                         + 6966 * v58
                                                                                         + 0x4000) >> 15)
                                                                         + 127)) >> 32) >> 4 << v49);
        if (v37 == 2) {
          unsigned int v37 = 0;
        }
        else {
          ++v37;
        }
        if (v35)
        {
          unint64_t v64 = *((unsigned __int8 *)&v188 + v186);
          *uint64_t v25 = *v25 & ~(1023 << v64) | (v59 << v64);
          unint64_t v65 = (int *)((char *)v25 + ((v64 >> 2) & 0x3C));
          if (v186 == 2) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = v186 + 1;
          }
          unint64_t v67 = *((unsigned __int8 *)&v188 + v66);
          *unint64_t v65 = *v65 & ~(1023 << v67) | (v60 << v67);
          uint64_t v25 = (int *)((char *)v65 + ((v67 >> 2) & 0x3C));
          if (v66 == 2) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = v66 + 1;
          }
          unsigned int v186 = v68;
          unint64_t v31 = v183;
        }
        v32 += 4;
        uint64_t v26 = &v38[v49 >> 4];
        v33 += 4;
        ++v35;
        v34 += 4;
        long long v29 = &v39[v49 >> 4];
        v36 += 4;
      }
      while (v31 != v35);
      if (v31 >= v21)
      {
        unint64_t v185 = (unsigned __int8 *)(v36 + v187);
        int v123 = (unsigned __int8 *)(v34 + v187);
        unint64_t v72 = v31;
        unint64_t v124 = v181;
      }
      else
      {
        unint64_t v69 = 0;
        unsigned int v161 = v39;
        unint64_t v162 = v49 >> 2;
        uint64_t v70 = (v49 >> 2) & 0x3C;
        unsigned int v163 = v38;
        v178 = (char *)v38 + v70;
        uint64_t v179 = (char *)v39 + v70;
        uint64_t v71 = v187;
        unint64_t v72 = v31;
        uint64_t v180 = v25;
        do
        {
          int v184 = &v179[v69];
          int v73 = *(unsigned __int8 *)(v36 + v71 + 2);
          int v74 = *(unsigned __int8 *)(v36 + v71 + 1);
          int v75 = *(unsigned __int8 *)(v36 + v71);
          unsigned int v76 = 23436 * v74 + 6966 * v73 + 2366 * v75 + 0x4000;
          int v77 = *(unsigned __int8 *)(v36 + v71 + 6);
          int v78 = *(unsigned __int8 *)(v36 + v71 + 5);
          int v79 = *(unsigned __int8 *)(v36 + v71 + 4);
          unsigned int v80 = 23436 * v78 + 6966 * v77 + 2366 * v79 + 0x4000;
          int v81 = *(unsigned __int8 *)(v34 + v71 + 2);
          int v82 = *(unsigned __int8 *)(v34 + v71 + 1);
          int v83 = *(unsigned __int8 *)(v34 + v71);
          int v84 = *(unsigned __int8 *)(v34 + v71 + 6);
          int v85 = *(unsigned __int8 *)(v34 + v71 + 5);
          int v86 = *(unsigned __int8 *)(v34 + v71 + 4);
          unint64_t v182 = (unsigned int *)&v178[v69];
          unint64_t v87 = 269488145 * (1023 * ((23436 * v82 + 6966 * v81 + 2366 * v83 + 0x4000) >> 15) + 127);
          uint64_t v88 = 269488145 * (1023 * ((23436 * v85 + 6966 * v84 + 2366 * v86 + 0x4000) >> 15) + 127);
          int v89 = v79 + v75 + v83 + v86;
          int v90 = v77 + v73 + v81 + v84;
          int v91 = *(unsigned __int8 *)(v36 + v71 + 10);
          int v92 = *(unsigned __int8 *)(v36 + v71 + 9);
          int v93 = *(unsigned __int8 *)(v36 + v71 + 8);
          *unint64_t v182 = (((269488145 * (unint64_t)(1023 * (v76 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v80 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((23436 * v92 + 6966 * v91 + 2366 * v93 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          unsigned int v94 = (((67372037
                               * (unint64_t)(1023
                                                  * ((-12629 * (v78 + v74 + v82 + v85)
                                                                  - 3753 * v90
                                                                  + (v89 << 14)
                                                                  + 0x1000000) >> 17)
                                                  + 127)) >> 32) >> 2) | (((67372037
                                                                                        * (unint64_t)(1023 * ((-14881 * (v78 + v74 + v82 + v85) + (v90 << 14) - 1501 * v89 + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          int v95 = *(unsigned __int8 *)(v36 + v71 + 14);
          LODWORD(v88) = *(unsigned __int8 *)(v36 + v71 + 13);
          int v96 = *(unsigned __int8 *)(v36 + v71 + 12);
          int v97 = *(unsigned __int8 *)(v34 + v71 + 10);
          int v98 = *(unsigned __int8 *)(v34 + v71 + 9);
          int v99 = *(unsigned __int8 *)(v34 + v71 + 8);
          unint64_t v100 = (269488145
                * (unint64_t)(1023 * ((23436 * v88 + 6966 * v95 + 2366 * v96 + 0x4000) >> 15) + 127)) >> 36;
          *(_DWORD *)int v184 = (v87 >> 36) | (HIDWORD(v88) >> 4 << 10) | (((269488145
                                                                                     * (unint64_t)(1023 * ((23436 * v98 + 6966 * v97 + 2366 * v99 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v101 = *(unsigned __int8 *)(v34 + v71 + 14);
          int v102 = *(unsigned __int8 *)(v34 + v71 + 13);
          LODWORD(v87) = *(unsigned __int8 *)(v34 + v71 + 12);
          int v103 = v96 + v93;
          int v104 = v99 + v87;
          int v105 = 23436 * v102 + 6966 * v101;
          int v106 = v103 + v104;
          int v107 = v88 + v92 + v98 + v102;
          int v108 = v95 + v91 + v97 + v101;
          unsigned int v109 = v105 + 2366 * v87 + 0x4000;
          int v110 = (unsigned int *)&v180[v69 / 4];
          *int v110 = v94 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-12629 * v107
                                                                          - 3753 * v108
                                                                          + ((v103 + v104) << 14)
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          int v111 = *(unsigned __int8 *)(v36 + v71 + 18);
          int v112 = *(unsigned __int8 *)(v36 + v71 + 17);
          int v113 = *(unsigned __int8 *)(v36 + v71 + 16);
          int v114 = *(unsigned __int8 *)(v36 + v71 + 22);
          int v115 = *(unsigned __int8 *)(v36 + v71 + 21);
          int v116 = *(unsigned __int8 *)(v36 + v71 + 20);
          v182[1] = v100 | (((269488145
                                          * (unint64_t)(1023
                                                             * ((23436 * v112
                                                                             + 6966 * v111
                                                                             + 2366 * v113
                                                                             + 0x4000) >> 15)
                                                             + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((23436 * v115 + 6966 * v114 + 2366 * v116 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v100) = *(unsigned __int8 *)(v34 + v71 + 18);
          int v117 = *(unsigned __int8 *)(v34 + v71 + 17);
          LODWORD(v87) = *(unsigned __int8 *)(v34 + v71 + 16);
          int v118 = *(unsigned __int8 *)(v34 + v71 + 22);
          int v119 = *(unsigned __int8 *)(v34 + v71 + 21);
          int v120 = *(unsigned __int8 *)(v34 + v71 + 20);
          *((_DWORD *)v184 + 1) = (((269488145 * (unint64_t)(1023 * (v109 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((23436 * v117 + 6966 * v100 + 2366 * v87 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((23436 * v119 + 6966 * v118 + 2366 * v120 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v121 = v117 + v119;
          unint64_t v21 = v177;
          v110[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-14881 * v107
                                                                      + (v108 << 14)
                                                                      - 1501 * v106
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-14881 * (v115 + v112 + v121) + ((v114 + v111 + v100 + v118) << 14) - 1501 * (v116 + v113 + v87 + v120) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-12629 * (v115 + v112 + v121) - 3753 * (v114 + v111 + v100 + v118) + ((v116 + v113 + v87 + v120) << 14) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v72 += 6;
          v69 += 8;
          v71 += 24;
        }
        while (v72 < v177);
        uint64_t v25 = &v180[v69 / 4];
        uint64_t v122 = v162 & 0x3C;
        long long v29 = (unsigned int *)((char *)v161 + v122 + v69);
        uint64_t v26 = (unsigned int *)((char *)v163 + v122 + v69);
        unint64_t v185 = (unsigned __int8 *)(v36 + v71);
        int v123 = (unsigned __int8 *)(v34 + v71);
        unint64_t v124 = v181;
        unint64_t v31 = v183;
      }
      if (v72 < v124)
      {
        uint64_t v125 = 0;
        unsigned int v126 = v160;
        uint64_t v127 = v123;
        uint64_t v128 = v185;
        do
        {
          if (v72)
          {
            int v134 = &v185[v125 - 4];
            int v132 = v128 - 2;
            int v133 = v128 - 3;
            int v129 = v185[v125 + 2];
            int v130 = v185[v125 + 1];
            int v131 = v185[v125];
          }
          else
          {
            int v129 = 0;
            int v130 = 0;
            int v131 = 0;
            int v132 = &v185[v125 + 2];
            int v133 = &v185[v125 + 1];
            int v134 = v128;
          }
          int v135 = *v134;
          int v136 = *v133;
          int v137 = *v132;
          unint64_t v138 = *((unsigned __int8 *)&v188 + v126);
          *uint64_t v26 = (((269488145
                                * (unint64_t)(1023
                                                   * ((23436 * v136 + 2366 * v135 + 6966 * v137 + 0x4000) >> 15)
                                                   + 127)) >> 32) >> 4 << v138) | *v26 & ~(1023 << v138);
          if (v72)
          {
            int v144 = &v123[v125 - 4];
            unint64_t v142 = v127 - 2;
            int v143 = v127 - 3;
            int v139 = v123[v125 + 2];
            int v140 = v123[v125 + 1];
            int v141 = v123[v125];
          }
          else
          {
            int v139 = 0;
            int v140 = 0;
            int v141 = 0;
            unint64_t v142 = &v123[v125 + 2];
            int v143 = &v123[v125 + 1];
            int v144 = v127;
          }
          int v145 = *v144;
          int v146 = *v143;
          int v147 = *v142;
          if (v72)
          {
            int v150 = v131 + v135 + v141 + v145;
            int v151 = v130 + v136 + v140 + v146;
            int v152 = v129 + v137 + v139 + v147;
            unint64_t v148 = (67372037
                  * (unint64_t)(1023
                                     * ((-12629 * v151 + (v150 << 14) - 3753 * v152 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            unint64_t v149 = (67372037
                  * (unint64_t)(1023
                                     * ((-14881 * v151 - 1501 * v150 + (v152 << 14) + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v148) = 0;
            LODWORD(v149) = 0;
          }
          unsigned int *v29 = *v29 & ~(1023 << v138) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((23436 * v146
                                                                                            + 2366 * v145
                                                                                            + 6966 * v147
                                                                                            + 0x4000) >> 15)
                                                                            + 127)) >> 32) >> 4 << v138);
          if (v126 == 2) {
            unsigned int v126 = 0;
          }
          else {
            ++v126;
          }
          if (v72)
          {
            unint64_t v153 = *((unsigned __int8 *)&v188 + v186);
            *uint64_t v25 = *v25 & ~(1023 << v153) | (v148 << v153);
            int v154 = (int *)((char *)v25 + ((v153 >> 2) & 0x3C));
            if (v186 == 2) {
              unsigned int v155 = 0;
            }
            else {
              unsigned int v155 = v186 + 1;
            }
            unint64_t v156 = *((unsigned __int8 *)&v188 + v155);
            int *v154 = *v154 & ~(1023 << v156) | (v149 << v156);
            uint64_t v25 = (int *)((char *)v154 + ((v156 >> 2) & 0x3C));
            if (v155 == 2) {
              unsigned int v157 = 0;
            }
            else {
              unsigned int v157 = v155 + 1;
            }
            unsigned int v186 = v157;
          }
          unint64_t v31 = v183;
          v128 += 4;
          unint64_t v158 = v138 >> 4;
          v26 += v158;
          v127 += 4;
          ++v72;
          v125 += 4;
          v29 += v158;
        }
        while (v181 != v72);
      }
      uint64_t v26 = &v174[v165];
      uint64_t v32 = &v171[v166];
      unsigned int v33 = &v170[v166];
      uint64_t v22 = v176 + 1;
      uint64_t v34 = v169 + v166;
      uint64_t v30 = v172 + v166;
      long long v29 = &v173[v165];
      uint64_t v25 = &v175[v164];
    }
    while (v176 + 1 != v167);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_pf20ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v188 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12) {
    unint64_t v17 = v15 - v12;
  }
  unint64_t v18 = v14 % 6;
  unint64_t v181 = v16;
  BOOL v19 = v16 >= v18;
  unint64_t v20 = v16 - v18;
  if (v19) {
    unint64_t v21 = v20;
  }
  else {
    unint64_t v21 = 0;
  }
  if (v17 >= 2)
  {
    uint64_t v22 = 0;
    unsigned int v168 = v13 % 3;
    unsigned int v160 = v21 % 3;
    unint64_t v23 = 6 * (v13 / 6) - v13 + 6;
    unint64_t v167 = v17 >> 1;
    unint64_t v24 = a8[1];
    uint64_t v25 = (int *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    uint64_t v26 = (unsigned int *)(*a7 + *a8 * v12 + 4 * (v13 / 3));
    uint64_t v27 = *a3;
    uint64_t v28 = *a4;
    long long v29 = (unsigned int *)((char *)v26 + *a8);
    uint64_t v30 = *a3 + v28 * v9;
    unint64_t v31 = v23;
    uint64_t v187 = 4 * v10;
    uint64_t v32 = (unsigned __int8 *)(v30 + 4 * v10);
    unsigned int v33 = &v32[v28];
    uint64_t v166 = 2 * v28;
    uint64_t v165 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v164 = v24 >> 2;
    uint64_t v34 = v27 + v28 + v28 * (v8 + (v8 & 1));
    unint64_t v183 = v31;
    unint64_t v177 = v21;
    do
    {
      uint64_t v175 = v25;
      uint64_t v176 = v22;
      uint64_t v35 = 0;
      uint64_t v172 = v30;
      v173 = v29;
      uint64_t v36 = v30;
      uint64_t v169 = v34;
      unint64_t v170 = v33;
      unsigned int v37 = v168;
      unsigned int v186 = v168;
      unint64_t v174 = v26;
      unsigned int v171 = v32;
      do
      {
        uint64_t v38 = v26;
        unsigned int v39 = v29;
        if (v35)
        {
          int v45 = (unsigned __int8 *)(v36 + v187 - 4);
          unint64_t v43 = v32 - 2;
          int v44 = v32 - 3;
          int v40 = *(unsigned __int8 *)(v36 + v187 + 2);
          int v41 = *(unsigned __int8 *)(v36 + v187 + 1);
          int v42 = *(unsigned __int8 *)(v36 + v187);
        }
        else
        {
          int v40 = 0;
          int v41 = 0;
          int v42 = 0;
          unint64_t v43 = (unsigned __int8 *)(v36 + v187 + 2);
          int v44 = (unsigned __int8 *)(v36 + v187 + 1);
          int v45 = v32;
        }
        int v46 = *v45;
        int v47 = *v44;
        int v48 = *v43;
        unint64_t v49 = *((unsigned __int8 *)&v188 + v37);
        *uint64_t v38 = (((269488145
                              * (unint64_t)(1023
                                                 * ((19235 * v47 + 3736 * v46 + 9798 * v48 + 0x4000) >> 15)
                                                 + 127)) >> 32) >> 4 << v49) | *v38 & ~(1023 << v49);
        if (v35)
        {
          int v55 = (unsigned __int8 *)(v34 + v187 - 4);
          int v53 = v33 - 2;
          unint64_t v54 = v33 - 3;
          int v50 = *(unsigned __int8 *)(v34 + v187 + 2);
          int v51 = *(unsigned __int8 *)(v34 + v187 + 1);
          int v52 = *(unsigned __int8 *)(v34 + v187);
        }
        else
        {
          int v50 = 0;
          int v51 = 0;
          int v52 = 0;
          int v53 = (unsigned __int8 *)(v34 + v187 + 2);
          unint64_t v54 = (unsigned __int8 *)(v34 + v187 + 1);
          int v55 = v33;
        }
        int v56 = *v55;
        int v57 = *v54;
        int v58 = *v53;
        if (v35)
        {
          int v61 = v42 + v46 + v52 + v56;
          int v62 = v41 + v47 + v51 + v57;
          int v63 = v40 + v48 + v50 + v58;
          unint64_t v59 = (67372037
               * (unint64_t)(1023 * ((-10854 * v62 + (v61 << 14) - 5528 * v63 + 0x1000000) >> 17)
                                  + 127)) >> 34;
          unint64_t v60 = (67372037
               * (unint64_t)(1023 * ((-13719 * v62 - 2663 * v61 + (v63 << 14) + 0x1000000) >> 17)
                                  + 127)) >> 34;
        }
        else
        {
          LODWORD(v59) = 0;
          LODWORD(v60) = 0;
        }
        *unsigned int v39 = *v39 & ~(1023 << v49) | (((269488145
                                                      * (unint64_t)(1023
                                                                         * ((19235 * v57
                                                                                         + 3736 * v56
                                                                                         + 9798 * v58
                                                                                         + 0x4000) >> 15)
                                                                         + 127)) >> 32) >> 4 << v49);
        if (v37 == 2) {
          unsigned int v37 = 0;
        }
        else {
          ++v37;
        }
        if (v35)
        {
          unint64_t v64 = *((unsigned __int8 *)&v188 + v186);
          *uint64_t v25 = *v25 & ~(1023 << v64) | (v59 << v64);
          unint64_t v65 = (int *)((char *)v25 + ((v64 >> 2) & 0x3C));
          if (v186 == 2) {
            unsigned int v66 = 0;
          }
          else {
            unsigned int v66 = v186 + 1;
          }
          unint64_t v67 = *((unsigned __int8 *)&v188 + v66);
          *unint64_t v65 = *v65 & ~(1023 << v67) | (v60 << v67);
          uint64_t v25 = (int *)((char *)v65 + ((v67 >> 2) & 0x3C));
          if (v66 == 2) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = v66 + 1;
          }
          unsigned int v186 = v68;
          unint64_t v31 = v183;
        }
        v32 += 4;
        uint64_t v26 = &v38[v49 >> 4];
        v33 += 4;
        ++v35;
        v34 += 4;
        long long v29 = &v39[v49 >> 4];
        v36 += 4;
      }
      while (v31 != v35);
      if (v31 >= v21)
      {
        unint64_t v185 = (unsigned __int8 *)(v36 + v187);
        int v123 = (unsigned __int8 *)(v34 + v187);
        unint64_t v72 = v31;
        unint64_t v124 = v181;
      }
      else
      {
        unint64_t v69 = 0;
        unsigned int v161 = v39;
        unint64_t v162 = v49 >> 2;
        uint64_t v70 = (v49 >> 2) & 0x3C;
        unsigned int v163 = v38;
        v178 = (char *)v38 + v70;
        uint64_t v179 = (char *)v39 + v70;
        uint64_t v71 = v187;
        unint64_t v72 = v31;
        uint64_t v180 = v25;
        do
        {
          int v184 = &v179[v69];
          int v73 = *(unsigned __int8 *)(v36 + v71 + 2);
          int v74 = *(unsigned __int8 *)(v36 + v71 + 1);
          int v75 = *(unsigned __int8 *)(v36 + v71);
          unsigned int v76 = 19235 * v74 + 9798 * v73 + 3736 * v75 + 0x4000;
          int v77 = *(unsigned __int8 *)(v36 + v71 + 6);
          int v78 = *(unsigned __int8 *)(v36 + v71 + 5);
          int v79 = *(unsigned __int8 *)(v36 + v71 + 4);
          unsigned int v80 = 19235 * v78 + 9798 * v77 + 3736 * v79 + 0x4000;
          int v81 = *(unsigned __int8 *)(v34 + v71 + 2);
          int v82 = *(unsigned __int8 *)(v34 + v71 + 1);
          int v83 = *(unsigned __int8 *)(v34 + v71);
          int v84 = *(unsigned __int8 *)(v34 + v71 + 6);
          int v85 = *(unsigned __int8 *)(v34 + v71 + 5);
          int v86 = *(unsigned __int8 *)(v34 + v71 + 4);
          unint64_t v182 = (unsigned int *)&v178[v69];
          unint64_t v87 = 269488145 * (1023 * ((19235 * v82 + 9798 * v81 + 3736 * v83 + 0x4000) >> 15) + 127);
          uint64_t v88 = 269488145 * (1023 * ((19235 * v85 + 9798 * v84 + 3736 * v86 + 0x4000) >> 15) + 127);
          int v89 = v79 + v75 + v83 + v86;
          int v90 = v77 + v73 + v81 + v84;
          int v91 = *(unsigned __int8 *)(v36 + v71 + 10);
          int v92 = *(unsigned __int8 *)(v36 + v71 + 9);
          int v93 = *(unsigned __int8 *)(v36 + v71 + 8);
          *unint64_t v182 = (((269488145 * (unint64_t)(1023 * (v76 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * (v80 >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((19235 * v92 + 9798 * v91 + 3736 * v93 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          unsigned int v94 = (((67372037
                               * (unint64_t)(1023
                                                  * ((-10854 * (v78 + v74 + v82 + v85)
                                                                  - 5528 * v90
                                                                  + (v89 << 14)
                                                                  + 0x1000000) >> 17)
                                                  + 127)) >> 32) >> 2) | (((67372037
                                                                                        * (unint64_t)(1023 * ((-13719 * (v78 + v74 + v82 + v85) + (v90 << 14) - 2663 * v89 + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          int v95 = *(unsigned __int8 *)(v36 + v71 + 14);
          LODWORD(v88) = *(unsigned __int8 *)(v36 + v71 + 13);
          int v96 = *(unsigned __int8 *)(v36 + v71 + 12);
          int v97 = *(unsigned __int8 *)(v34 + v71 + 10);
          int v98 = *(unsigned __int8 *)(v34 + v71 + 9);
          int v99 = *(unsigned __int8 *)(v34 + v71 + 8);
          unint64_t v100 = (269488145
                * (unint64_t)(1023 * ((19235 * v88 + 9798 * v95 + 3736 * v96 + 0x4000) >> 15) + 127)) >> 36;
          *(_DWORD *)int v184 = (v87 >> 36) | (HIDWORD(v88) >> 4 << 10) | (((269488145
                                                                                     * (unint64_t)(1023 * ((19235 * v98 + 9798 * v97 + 3736 * v99 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v101 = *(unsigned __int8 *)(v34 + v71 + 14);
          int v102 = *(unsigned __int8 *)(v34 + v71 + 13);
          LODWORD(v87) = *(unsigned __int8 *)(v34 + v71 + 12);
          int v103 = v96 + v93;
          int v104 = v99 + v87;
          int v105 = 19235 * v102 + 9798 * v101;
          int v106 = v103 + v104;
          int v107 = v88 + v92 + v98 + v102;
          int v108 = v95 + v91 + v97 + v101;
          unsigned int v109 = v105 + 3736 * v87 + 0x4000;
          int v110 = (unsigned int *)&v180[v69 / 4];
          *int v110 = v94 | (((67372037
                                       * (unint64_t)(1023
                                                          * ((-10854 * v107
                                                                          - 5528 * v108
                                                                          + ((v103 + v104) << 14)
                                                                          + 0x1000000) >> 17)
                                                          + 127)) >> 32) >> 2 << 20);
          int v111 = *(unsigned __int8 *)(v36 + v71 + 18);
          int v112 = *(unsigned __int8 *)(v36 + v71 + 17);
          int v113 = *(unsigned __int8 *)(v36 + v71 + 16);
          int v114 = *(unsigned __int8 *)(v36 + v71 + 22);
          int v115 = *(unsigned __int8 *)(v36 + v71 + 21);
          int v116 = *(unsigned __int8 *)(v36 + v71 + 20);
          v182[1] = v100 | (((269488145
                                          * (unint64_t)(1023
                                                             * ((19235 * v112
                                                                             + 9798 * v111
                                                                             + 3736 * v113
                                                                             + 0x4000) >> 15)
                                                             + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((19235 * v115 + 9798 * v114 + 3736 * v116 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          LODWORD(v100) = *(unsigned __int8 *)(v34 + v71 + 18);
          int v117 = *(unsigned __int8 *)(v34 + v71 + 17);
          LODWORD(v87) = *(unsigned __int8 *)(v34 + v71 + 16);
          int v118 = *(unsigned __int8 *)(v34 + v71 + 22);
          int v119 = *(unsigned __int8 *)(v34 + v71 + 21);
          int v120 = *(unsigned __int8 *)(v34 + v71 + 20);
          *((_DWORD *)v184 + 1) = (((269488145 * (unint64_t)(1023 * (v109 >> 15) + 127)) >> 32) >> 4) | (((269488145 * (unint64_t)(1023 * ((19235 * v117 + 9798 * v100 + 3736 * v87 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 10) | (((269488145 * (unint64_t)(1023 * ((19235 * v119 + 9798 * v118 + 3736 * v120 + 0x4000) >> 15) + 127)) >> 32) >> 4 << 20);
          int v121 = v117 + v119;
          unint64_t v21 = v177;
          v110[1] = (((67372037
                                   * (unint64_t)(1023
                                                      * ((-13719 * v107
                                                                      + (v108 << 14)
                                                                      - 2663 * v106
                                                                      + 0x1000000) >> 17)
                                                      + 127)) >> 32) >> 2) | (((67372037
                                                                                            * (unint64_t)(1023 * ((-13719 * (v115 + v112 + v121) + ((v114 + v111 + v100 + v118) << 14) - 2663 * (v116 + v113 + v87 + v120) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 20) | (((67372037 * (unint64_t)(1023 * ((-10854 * (v115 + v112 + v121) - 5528 * (v114 + v111 + v100 + v118) + ((v116 + v113 + v87 + v120) << 14) + 0x1000000) >> 17) + 127)) >> 32) >> 2 << 10);
          v72 += 6;
          v69 += 8;
          v71 += 24;
        }
        while (v72 < v177);
        uint64_t v25 = &v180[v69 / 4];
        uint64_t v122 = v162 & 0x3C;
        long long v29 = (unsigned int *)((char *)v161 + v122 + v69);
        uint64_t v26 = (unsigned int *)((char *)v163 + v122 + v69);
        unint64_t v185 = (unsigned __int8 *)(v36 + v71);
        int v123 = (unsigned __int8 *)(v34 + v71);
        unint64_t v124 = v181;
        unint64_t v31 = v183;
      }
      if (v72 < v124)
      {
        uint64_t v125 = 0;
        unsigned int v126 = v160;
        uint64_t v127 = v123;
        uint64_t v128 = v185;
        do
        {
          if (v72)
          {
            int v134 = &v185[v125 - 4];
            int v132 = v128 - 2;
            int v133 = v128 - 3;
            int v129 = v185[v125 + 2];
            int v130 = v185[v125 + 1];
            int v131 = v185[v125];
          }
          else
          {
            int v129 = 0;
            int v130 = 0;
            int v131 = 0;
            int v132 = &v185[v125 + 2];
            int v133 = &v185[v125 + 1];
            int v134 = v128;
          }
          int v135 = *v134;
          int v136 = *v133;
          int v137 = *v132;
          unint64_t v138 = *((unsigned __int8 *)&v188 + v126);
          *uint64_t v26 = (((269488145
                                * (unint64_t)(1023
                                                   * ((19235 * v136 + 3736 * v135 + 9798 * v137 + 0x4000) >> 15)
                                                   + 127)) >> 32) >> 4 << v138) | *v26 & ~(1023 << v138);
          if (v72)
          {
            int v144 = &v123[v125 - 4];
            unint64_t v142 = v127 - 2;
            int v143 = v127 - 3;
            int v139 = v123[v125 + 2];
            int v140 = v123[v125 + 1];
            int v141 = v123[v125];
          }
          else
          {
            int v139 = 0;
            int v140 = 0;
            int v141 = 0;
            unint64_t v142 = &v123[v125 + 2];
            int v143 = &v123[v125 + 1];
            int v144 = v127;
          }
          int v145 = *v144;
          int v146 = *v143;
          int v147 = *v142;
          if (v72)
          {
            int v150 = v131 + v135 + v141 + v145;
            int v151 = v130 + v136 + v140 + v146;
            int v152 = v129 + v137 + v139 + v147;
            unint64_t v148 = (67372037
                  * (unint64_t)(1023
                                     * ((-10854 * v151 + (v150 << 14) - 5528 * v152 + 0x1000000) >> 17)
                                     + 127)) >> 34;
            unint64_t v149 = (67372037
                  * (unint64_t)(1023
                                     * ((-13719 * v151 - 2663 * v150 + (v152 << 14) + 0x1000000) >> 17)
                                     + 127)) >> 34;
          }
          else
          {
            LODWORD(v148) = 0;
            LODWORD(v149) = 0;
          }
          unsigned int *v29 = *v29 & ~(1023 << v138) | (((269488145
                                                         * (unint64_t)(1023
                                                                            * ((19235 * v146
                                                                                            + 3736 * v145
                                                                                            + 9798 * v147
                                                                                            + 0x4000) >> 15)
                                                                            + 127)) >> 32) >> 4 << v138);
          if (v126 == 2) {
            unsigned int v126 = 0;
          }
          else {
            ++v126;
          }
          if (v72)
          {
            unint64_t v153 = *((unsigned __int8 *)&v188 + v186);
            *uint64_t v25 = *v25 & ~(1023 << v153) | (v148 << v153);
            int v154 = (int *)((char *)v25 + ((v153 >> 2) & 0x3C));
            if (v186 == 2) {
              unsigned int v155 = 0;
            }
            else {
              unsigned int v155 = v186 + 1;
            }
            unint64_t v156 = *((unsigned __int8 *)&v188 + v155);
            int *v154 = *v154 & ~(1023 << v156) | (v149 << v156);
            uint64_t v25 = (int *)((char *)v154 + ((v156 >> 2) & 0x3C));
            if (v155 == 2) {
              unsigned int v157 = 0;
            }
            else {
              unsigned int v157 = v155 + 1;
            }
            unsigned int v186 = v157;
          }
          unint64_t v31 = v183;
          v128 += 4;
          unint64_t v158 = v138 >> 4;
          v26 += v158;
          v127 += 4;
          ++v72;
          v125 += 4;
          v29 += v158;
        }
        while (v181 != v72);
      }
      uint64_t v26 = &v174[v165];
      uint64_t v32 = &v171[v166];
      unsigned int v33 = &v170[v166];
      uint64_t v22 = v176 + 1;
      uint64_t v34 = v169 + v166;
      uint64_t v30 = v172 + v166;
      long long v29 = &v173[v165];
      uint64_t v25 = &v175[v164];
    }
    while (v176 + 1 != v167);
  }
  return 0;
}

uint64_t vt_Copy_L565_32BGRA(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = *a6;
    uint64_t v10 = *a4;
    do
    {
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
        {
          unsigned int v12 = *(unsigned __int16 *)(v10 + 2 * i);
          *(_DWORD *)(v9 + 4 * i) = (((v12 >> 8) & 0xF8 | (v12 >> 13)) << 16) | (((v12 >> 3) & 0xFC | (((v12 >> 3) & 0xFC) >> 6)) << 8) | ((8 * v12) >> 5) & 7 | (8 * (v12 & 0x1F)) | 0xFF000000;
        }
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_VImage_Setup_L565_32BGRA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_L565_32BGRA;
  *a11 = vt_VImage_Cleanup_L565_32BGRA;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_L565_32ARGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_L565_32ARGB;
  *a11 = vt_VImage_Cleanup_L565_32ARGB;
  *a8 = v14;
  return 0;
}

uint64_t vt_Copy_L565_5551(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = *a6;
    uint64_t v10 = *a4;
    do
    {
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
          *(_WORD *)(v9 + 2 * i) = *(_WORD *)(v10 + 2 * i) & 0xFFC0 | (2 * (*(_WORD *)(v10 + 2 * i) & 0x1F)) | 1;
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_VImage_Setup_L565_5551(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_L565_5551;
  *a11 = vt_VImage_Cleanup_L565_5551;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_L565_1555(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_L565_1555;
  *a11 = vt_VImage_Cleanup_L565_1555;
  *a8 = v14;
  return 0;
}

uint64_t vt_Copy_R10k_32BGRA(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = *a6;
    uint64_t v10 = *a4;
    do
    {
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
        {
          unsigned int v12 = bswap32(*(_DWORD *)(v10 + 4 * i));
          unsigned int v13 = (((v12 >> 2) & 0x3FE) + 2) >> 2;
          unsigned int v14 = (((v12 >> 12) & 0x3FE) + 2) >> 2;
          unsigned int v15 = ((v12 >> 22) + 2) >> 2;
          if (v13 >= 0xFF) {
            unsigned int v13 = 255;
          }
          if (v14 >= 0xFF) {
            unsigned int v14 = 255;
          }
          if (v15 >= 0xFF) {
            unsigned int v15 = 255;
          }
          *(_DWORD *)(v9 + 4 * i) = v13 | (v14 << 8) | (v15 << 16) | 0xFF000000;
        }
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_VImage_Setup_R10k_32BGRA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  unsigned int v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *unsigned int v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_R10k_32BGRA;
  *a11 = vt_VImage_Cleanup_R10k_32BGRA;
  *a8 = v14;
  return 0;
}

uint64_t vt_Copy_R10k_32ARGB(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = *a6;
    uint64_t v10 = *a4;
    int8x8_t v11 = (int8x8_t)vdup_n_s32(0x3FEu);
    do
    {
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
        {
          unsigned int v13 = bswap32(*(_DWORD *)(v10 + 4 * i));
          unsigned int v14 = ((v13 >> 22) + 2) >> 2;
          if (v14 >= 0xFF) {
            unsigned int v14 = 255;
          }
          uint32x2_t v15 = vshl_u32(vmin_u32(vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v13), (uint32x2_t)0xFFFFFFFEFFFFFFF4), v11), (int32x2_t)0x200000002), 2uLL), (uint32x2_t)0xFF000000FFLL), (uint32x2_t)0x1800000010);
          *(_DWORD *)(v9 + 4 * i) = v15.i32[0] | (v14 << 8) | v15.i32[1] | 0xFF;
        }
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_VImage_Setup_R10k_32ARGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  unsigned int v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *unsigned int v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_R10k_32ARGB;
  *a11 = vt_VImage_Cleanup_R10k_32ARGB;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_R10k_RGhA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  unsigned int v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *unsigned int v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_R10k_RGhA;
  *a11 = vt_VImage_Cleanup_R10k_RGhA;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_y408_y416(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  unsigned int v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *unsigned int v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_y408_y416;
  *a11 = vt_VImage_Cleanup_y408_y416;
  *a8 = v14;
  return 0;
}

uint64_t vt_Copy_y408_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 4 * v15;
    uint64_t v21 = v17 + 2 * v15;
    uint64_t v22 = v18 + 2 * v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v26 = (_WORD *)(v20 + v24);
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v23 + v24) | (*(unsigned __int8 *)(v23 + v24) << 8);
          __int16 v27 = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *uint64_t v26 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          v26[1] = v27;
          *(_WORD *)(v22 + 2 * i) = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 4 * v14;
    uint64_t v19 = v16 + 2 * v14;
    uint64_t v20 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v23 = (_WORD *)(v18 + v21);
          __int16 v24 = *(unsigned __int8 *)(v20 + v21 + 3) << 8;
          *uint64_t v23 = *(unsigned __int8 *)(v20 + v21 + 2) << 8;
          v23[1] = v24;
          *(_WORD *)(v19 + 2 * i) = *(unsigned __int8 *)(v20 + v21 + 1) << 8;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v13 * v14 + 4 * v15;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v15;
    uint64_t v18 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v21 = v18 + v19;
          unsigned int v22 = *(unsigned __int8 *)(v18 + v19 + 2);
          if (v22 >= 0xF0) {
            unsigned int v22 = 240;
          }
          if (v22 <= 0x10) {
            unsigned int v22 = 16;
          }
          unsigned int v23 = *(unsigned __int8 *)(v21 + 3);
          if (v23 >= 0xF0) {
            unsigned int v23 = 240;
          }
          __int16 v24 = (_WORD *)(v16 + v19);
          if (v23 <= 0x10) {
            unsigned int v23 = 16;
          }
          _WORD *v24 = (613566757 * (unint64_t)((-1048560 - v22 + (v22 << 16)) >> 5)) >> 32;
          v24[1] = (613566757 * (unint64_t)((-1048560 - v23 + (v23 << 16)) >> 5)) >> 32;
          unsigned int v25 = *(unsigned __int8 *)(v21 + 1);
          if (v25 >= 0xEB) {
            unsigned int v25 = 235;
          }
          if (v25 <= 0x10) {
            unsigned int v25 = 16;
          }
          *(_WORD *)(v17 + 2 * i) = (-1048560 - v25 + (v25 << 16)) / 0xDB;
          v19 += 4;
        }
      }
      v18 += v11;
      v17 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v16 = a8[2];
    uint64_t v17 = a7[2] + v16 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v17 + 2 * v9;
    uint64_t v21 = v18 + 2 * v9;
    uint64_t v22 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v23 = 0;
        __int16 v24 = (unsigned __int8 *)v22;
        unsigned int v25 = (_WORD *)v15;
        do
        {
          *(_WORD *)(v20 + 2 * v23) = *(v24 - 3) | (*(v24 - 3) << 8);
          if ((v23 & 1) == 0)
          {
            __int16 v26 = *v24;
            __int16 v27 = v24[4];
            *unsigned int v25 = (v24[3] + (unsigned __int16)*(v24 - 1)) << 7;
            v25[1] = (v27 + v26) << 7;
            v25 += 2;
          }
          *(_WORD *)(v21 + 2 * v23++) = *(v24 - 2) << 8;
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v16 = a8[2];
    uint64_t v17 = a7[2] + v16 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v17 + 2 * v9;
    uint64_t v21 = v18 + 2 * v9;
    uint64_t v22 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v23 = 0;
        __int16 v24 = (unsigned __int8 *)v22;
        unsigned int v25 = (_WORD *)v15;
        do
        {
          *(_WORD *)(v20 + 2 * v23) = *(v24 - 3) | (*(v24 - 3) << 8);
          if ((v23 & 1) == 0)
          {
            __int16 v26 = *v24 << 8;
            *unsigned int v25 = *(v24 - 1) << 8;
            v25[1] = v26;
            v25 += 2;
          }
          *(_WORD *)(v21 + 2 * v23++) = *(v24 - 2) << 8;
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v16 = *a4;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            __int16 v22 = *v20;
            __int16 v23 = v20[4];
            *uint64_t v21 = (v20[3] + (unsigned __int16)*(v20 - 1)) << 7;
            v21[1] = (v23 + v22) << 7;
            v21 += 2;
          }
          *(_WORD *)(v17 + 2 * v19++) = *(v20 - 2) << 8;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v16 = *a4;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            __int16 v22 = *v20 << 8;
            *uint64_t v21 = *(v20 - 1) << 8;
            v21[1] = v22;
            v21 += 2;
          }
          *(_WORD *)(v17 + 2 * v19++) = *(v20 - 2) << 8;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a7 + *a8 * v15 + 2 * v9;
    uint64_t v18 = *(void *)(a2 + 32) + v12 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (_WORD *)v16;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v22 = *(v20 - 1);
            unsigned int v23 = v20[3];
            if (v22 >= 0xF0) {
              unsigned int v22 = 240;
            }
            if (v22 <= 0x10) {
              unsigned int v22 = 16;
            }
            if (v23 >= 0xF0) {
              unsigned int v23 = 240;
            }
            if (v23 <= 0x10) {
              unsigned int v23 = 16;
            }
            unsigned int v24 = *v20;
            unsigned int v25 = v20[4];
            if (v24 >= 0xF0) {
              unsigned int v24 = 240;
            }
            if (v24 <= 0x10) {
              unsigned int v24 = 16;
            }
            if (v25 >= 0xF0) {
              unsigned int v25 = 240;
            }
            if (v25 <= 0x10) {
              unsigned int v25 = 16;
            }
            *uint64_t v21 = (((613566757 * (unint64_t)((-1048560 - v22 + (v22 << 16)) >> 5)) >> 32)
                                + ((613566757 * (unint64_t)((-1048560 - v23 + (v23 << 16)) >> 5)) >> 32)
                                + 1) >> 1;
            v21[1] = (((613566757 * (unint64_t)((-1048560 - v24 + (v24 << 16)) >> 5)) >> 32)
                                  + ((613566757 * (unint64_t)((-1048560 - v25 + (v25 << 16)) >> 5)) >> 32)
                                  + 1) >> 1;
            v21 += 2;
          }
          unsigned int v26 = *(v20 - 2);
          if (v26 >= 0xEB) {
            unsigned int v26 = 235;
          }
          if (v26 <= 0x10) {
            unsigned int v26 = 16;
          }
          *(_WORD *)(v17 + 2 * v19++) = (-1048560 - v26 + (v26 << 16)) / 0xDB;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v13;
      v16 += v14;
      ++v11;
      v18 += v12;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a7 + *a8 * v15 + 2 * v9;
    uint64_t v18 = *(void *)(a2 + 32) + v12 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (_WORD *)v16;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v22 = *(v20 - 1);
            if (v22 >= 0xF0) {
              unsigned int v22 = 240;
            }
            if (v22 <= 0x10) {
              unsigned int v22 = 16;
            }
            unsigned int v23 = *v20;
            if (v23 >= 0xF0) {
              unsigned int v23 = 240;
            }
            if (v23 <= 0x10) {
              unsigned int v23 = 16;
            }
            *uint64_t v21 = (613566757 * (unint64_t)((-1048560 - v22 + (v22 << 16)) >> 5)) >> 32;
            v21[1] = (613566757 * (unint64_t)((-1048560 - v23 + (v23 << 16)) >> 5)) >> 32;
            v21 += 2;
          }
          unsigned int v24 = *(v20 - 2);
          if (v24 >= 0xEB) {
            unsigned int v24 = 235;
          }
          if (v24 <= 0x10) {
            unsigned int v24 = 16;
          }
          *(_WORD *)(v17 + 2 * v19++) = (-1048560 - v24 + (v24 << 16)) / 0xDB;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v13;
      v16 += v14;
      ++v11;
      v18 += v12;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a4;
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        long long v29 = (_WORD *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            __int16 v30 = (*(unsigned __int8 *)(v26 + v27)
                 + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 3)
                 + *(unsigned __int8 *)(v25 + v27 + 7)
                 + (unsigned __int16)*(unsigned __int8 *)(v26 + v27 + 4)) << 6;
            _WORD *v29 = (*(unsigned __int8 *)(v26 + v27 - 1)
                  + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 2)
                  + *(unsigned __int8 *)(v25 + v27 + 6)
                  + (unsigned __int16)*(unsigned __int8 *)(v26 + v27 + 3)) << 6;
            v29[1] = v30;
            v29 += 2;
          }
          *(_WORD *)(v24 + 2 * v28++) = *(unsigned __int8 *)(v25 + v27 + 1) << 8;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if (v19) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = v21;
      }
      v22 += v31;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v21 = *a4;
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (_WORD *)v20;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            __int16 v27 = *v25 << 8;
            *uint64_t v26 = *(v25 - 1) << 8;
            v26[1] = v27;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 2) << 8;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v18;
      if (v17) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = v19;
      }
      v20 += v28;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[1];
    uint64_t v23 = a7[1] + ((unint64_t)(v22 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = v8 + (v8 & 1) + *a3 + v20 + v20 * (v9 + (v9 & 1)) + 3;
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        long long v29 = (_WORD *)v23;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            __int16 v30 = (unsigned __int8 *)(v25 + v27);
            unsigned int v31 = *(unsigned __int8 *)(v25 + v27 + 2);
            uint64_t v32 = (unsigned __int8 *)(v26 + v27);
            unsigned int v33 = *(unsigned __int8 *)(v26 + v27 - 1);
            if (v31 >= 0xF0) {
              unsigned int v31 = 240;
            }
            if (v31 <= 0x10) {
              unsigned int v31 = 16;
            }
            if (v33 >= 0xF0) {
              unsigned int v33 = 240;
            }
            if (v33 <= 0x10) {
              unsigned int v33 = 16;
            }
            unsigned int v34 = v30[3];
            unsigned int v35 = *v32;
            if (v34 >= 0xF0) {
              unsigned int v34 = 240;
            }
            if (v34 <= 0x10) {
              unsigned int v34 = 16;
            }
            if (v35 >= 0xF0) {
              unsigned int v35 = 240;
            }
            if (v35 <= 0x10) {
              unsigned int v35 = 16;
            }
            unsigned int v36 = v30[6];
            unsigned int v37 = v32[3];
            if (v36 >= 0xF0) {
              unsigned int v36 = 240;
            }
            if (v36 <= 0x10) {
              unsigned int v36 = 16;
            }
            if (v37 >= 0xF0) {
              unsigned int v37 = 240;
            }
            if (v37 <= 0x10) {
              unsigned int v37 = 16;
            }
            unsigned int v38 = v30[7];
            unsigned int v39 = v32[4];
            if (v38 >= 0xF0) {
              unsigned int v38 = 240;
            }
            if (v38 <= 0x10) {
              unsigned int v38 = 16;
            }
            unsigned int v40 = -1048560 - v31 + (v31 << 16);
            if (v39 >= 0xF0) {
              unsigned int v39 = 240;
            }
            unint64_t v41 = (613566757 * (unint64_t)(v40 >> 5)) >> 32;
            unsigned int v42 = -1048560 - v34 + (v34 << 16);
            if (v39 <= 0x10) {
              unsigned int v39 = 16;
            }
            _WORD *v29 = (v41
                                + ((613566757 * (unint64_t)((-1048560 - v33 + (v33 << 16)) >> 5)) >> 32)
                                + ((613566757 * (unint64_t)((-1048560 - v36 + (v36 << 16)) >> 5)) >> 32)
                                + ((613566757 * (unint64_t)((-1048560 - v37 + (v37 << 16)) >> 5)) >> 32)
                                + 2) >> 2;
            v29[1] = (((613566757 * (unint64_t)(v42 >> 5)) >> 32)
                                  + ((613566757 * (unint64_t)((-1048560 - v35 + (v35 << 16)) >> 5)) >> 32)
                                  + ((613566757 * (unint64_t)((-1048560 - v38 + (v38 << 16)) >> 5)) >> 32)
                                  + ((613566757 * (unint64_t)((-1048560 - v39 + (v39 << 16)) >> 5)) >> 32)
                                  + 2) >> 2;
            v29 += 2;
          }
          unsigned int v43 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v43 >= 0xEB) {
            unsigned int v43 = 235;
          }
          if (v43 <= 0x10) {
            unsigned int v43 = 16;
          }
          *(_WORD *)(v24 + 2 * v28++) = (-1048560 - v43 + (v43 << 16)) / 0xDB;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v20;
      v24 += v21;
      if (v19) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = v22;
      }
      v23 += v44;
      ++v19;
      v26 += v20;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (_WORD *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            unsigned int v27 = *(v25 - 1);
            if (v27 >= 0xF0) {
              unsigned int v27 = 240;
            }
            if (v27 <= 0x10) {
              unsigned int v27 = 16;
            }
            unsigned int v28 = *v25;
            if (v28 >= 0xF0) {
              unsigned int v28 = 240;
            }
            if (v28 <= 0x10) {
              unsigned int v28 = 16;
            }
            *uint64_t v26 = (613566757 * (unint64_t)((-1048560 - v27 + (v27 << 16)) >> 5)) >> 32;
            v26[1] = (613566757 * (unint64_t)((-1048560 - v28 + (v28 << 16)) >> 5)) >> 32;
            v26 += 2;
          }
          unsigned int v29 = *(v25 - 2);
          if (v29 >= 0xEB) {
            unsigned int v29 = 235;
          }
          if (v29 <= 0x10) {
            unsigned int v29 = 16;
          }
          *(_WORD *)(v22 + 2 * v24++) = (-1048560 - v29 + (v29 << 16)) / 0xDB;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if (v17) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v20;
      }
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_y408_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 4 * v15;
    uint64_t v21 = v17 + 2 * v15;
    uint64_t v22 = v18 + 2 * v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v26 = (_WORD *)(v20 + v24);
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v23 + v24) | (*(unsigned __int8 *)(v23 + v24) << 8);
          __int16 v27 = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *uint64_t v26 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          v26[1] = v27;
          *(_WORD *)(v22 + 2 * i) = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 4 * v14;
    uint64_t v19 = v16 + 2 * v14;
    uint64_t v20 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v23 = (_WORD *)(v18 + v21);
          __int16 v24 = *(unsigned __int8 *)(v20 + v21 + 3) << 8;
          *uint64_t v23 = *(unsigned __int8 *)(v20 + v21 + 2) << 8;
          v23[1] = v24;
          *(_WORD *)(v19 + 2 * i) = *(unsigned __int8 *)(v20 + v21 + 1) << 8;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v13 * v14 + 4 * v15;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v15;
    uint64_t v18 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v21 = v18 + v19;
          unsigned int v22 = *(unsigned __int8 *)(v18 + v19 + 2);
          if (v22 >= 0xF0) {
            unsigned int v22 = 240;
          }
          if (v22 <= 0x10) {
            unsigned int v22 = 16;
          }
          unsigned int v23 = *(unsigned __int8 *)(v21 + 3);
          if (v23 >= 0xF0) {
            unsigned int v23 = 240;
          }
          __int16 v24 = (_WORD *)(v16 + v19);
          if (v23 <= 0x10) {
            unsigned int v23 = 16;
          }
          _WORD *v24 = 16 * ((613566757 * (unint64_t)((4095 * v22 - 65520) >> 5)) >> 32);
          v24[1] = 16 * ((613566757 * (unint64_t)((4095 * v23 - 65520) >> 5)) >> 32);
          unsigned int v25 = *(unsigned __int8 *)(v21 + 1);
          if (v25 >= 0xEB) {
            unsigned int v25 = 235;
          }
          if (v25 <= 0x10) {
            unsigned int v25 = 16;
          }
          *(_WORD *)(v17 + 2 * i) = ((((725633745 * (unint64_t)(4095 * v25 - 65520)) >> 32)
                                                  + ((4095 * v25
                                                                  - 65520
                                                                  - ((725633745 * (unint64_t)(4095 * v25 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v19 += 4;
        }
      }
      v18 += v11;
      v17 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v16 = a8[2];
    uint64_t v17 = a7[2] + v16 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v17 + 2 * v9;
    uint64_t v21 = v18 + 2 * v9;
    uint64_t v22 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v23 = 0;
        __int16 v24 = (unsigned __int8 *)v22;
        unsigned int v25 = (_WORD *)v15;
        do
        {
          *(_WORD *)(v20 + 2 * v23) = *(v24 - 3) | (*(v24 - 3) << 8);
          if ((v23 & 1) == 0)
          {
            __int16 v26 = *v24;
            __int16 v27 = v24[4];
            *unsigned int v25 = (v24[3] + (unsigned __int16)*(v24 - 1)) << 7;
            v25[1] = (v27 + v26) << 7;
            v25 += 2;
          }
          *(_WORD *)(v21 + 2 * v23++) = *(v24 - 2) << 8;
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v16 = a8[2];
    uint64_t v17 = a7[2] + v16 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v17 + 2 * v9;
    uint64_t v21 = v18 + 2 * v9;
    uint64_t v22 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v23 = 0;
        __int16 v24 = (unsigned __int8 *)v22;
        unsigned int v25 = (_WORD *)v15;
        do
        {
          *(_WORD *)(v20 + 2 * v23) = *(v24 - 3) | (*(v24 - 3) << 8);
          if ((v23 & 1) == 0)
          {
            __int16 v26 = *v24 << 8;
            *unsigned int v25 = *(v24 - 1) << 8;
            v25[1] = v26;
            v25 += 2;
          }
          *(_WORD *)(v21 + 2 * v23++) = *(v24 - 2) << 8;
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v16 = *a4;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            __int16 v22 = *v20;
            __int16 v23 = v20[4];
            *uint64_t v21 = (v20[3] + (unsigned __int16)*(v20 - 1)) << 7;
            v21[1] = (v23 + v22) << 7;
            v21 += 2;
          }
          *(_WORD *)(v17 + 2 * v19++) = *(v20 - 2) << 8;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v16 = *a4;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            __int16 v22 = *v20 << 8;
            *uint64_t v21 = *(v20 - 1) << 8;
            v21[1] = v22;
            v21 += 2;
          }
          *(_WORD *)(v17 + 2 * v19++) = *(v20 - 2) << 8;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a7 + *a8 * v15 + 2 * v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (_WORD *)v16;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v22 = *(v20 - 1);
            unsigned int v23 = v20[3];
            if (v22 >= 0xF0) {
              unsigned int v22 = 240;
            }
            if (v22 <= 0x10) {
              unsigned int v22 = 16;
            }
            if (v23 >= 0xF0) {
              unsigned int v23 = 240;
            }
            if (v23 <= 0x10) {
              unsigned int v23 = 16;
            }
            unsigned int v24 = *v20;
            unsigned int v25 = v20[4];
            if (v24 >= 0xF0) {
              unsigned int v24 = 240;
            }
            if (v24 <= 0x10) {
              unsigned int v24 = 16;
            }
            if (v25 >= 0xF0) {
              unsigned int v25 = 240;
            }
            if (v25 <= 0x10) {
              unsigned int v25 = 16;
            }
            *uint64_t v21 = (8
                  * (((613566757 * (unint64_t)((4095 * v23 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v22 - 65520) >> 5)) >> 32))
                  + 8) & 0xFFF0;
            v21[1] = (8
                    * (((613566757 * (unint64_t)((4095 * v25 - 65520) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((4095 * v24 - 65520) >> 5)) >> 32))
                    + 8) & 0xFFF0;
            v21 += 2;
          }
          unsigned int v26 = *(v20 - 2);
          if (v26 >= 0xEB) {
            unsigned int v26 = 235;
          }
          if (v26 <= 0x10) {
            unsigned int v26 = 16;
          }
          *(_WORD *)(v17 + 2 * v19++) = ((((725633745 * (unint64_t)(4095 * v26 - 65520)) >> 32)
                                                      + ((4095 * v26
                                                                      - 65520
                                                                      - ((725633745
                                                                        * (unint64_t)(4095 * v26 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v13;
      v16 += v14;
      ++v11;
      v18 += v12;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a7 + *a8 * v15 + 2 * v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (_WORD *)v16;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v22 = *(v20 - 1);
            if (v22 >= 0xF0) {
              unsigned int v22 = 240;
            }
            if (v22 <= 0x10) {
              unsigned int v22 = 16;
            }
            unsigned int v23 = *v20;
            if (v23 >= 0xF0) {
              unsigned int v23 = 240;
            }
            if (v23 <= 0x10) {
              unsigned int v23 = 16;
            }
            *uint64_t v21 = 16 * ((613566757 * (unint64_t)((4095 * v22 - 65520) >> 5)) >> 32);
            v21[1] = 16 * ((613566757 * (unint64_t)((4095 * v23 - 65520) >> 5)) >> 32);
            v21 += 2;
          }
          unsigned int v24 = *(v20 - 2);
          if (v24 >= 0xEB) {
            unsigned int v24 = 235;
          }
          if (v24 <= 0x10) {
            unsigned int v24 = 16;
          }
          *(_WORD *)(v17 + 2 * v19++) = ((((725633745 * (unint64_t)(4095 * v24 - 65520)) >> 32)
                                                      + ((4095 * v24
                                                                      - 65520
                                                                      - ((725633745
                                                                        * (unint64_t)(4095 * v24 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v13;
      v16 += v14;
      ++v11;
      v18 += v12;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a4;
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        unsigned int v29 = (_WORD *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            __int16 v30 = (*(unsigned __int8 *)(v26 + v27)
                 + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 3)
                 + *(unsigned __int8 *)(v25 + v27 + 7)
                 + (unsigned __int16)*(unsigned __int8 *)(v26 + v27 + 4)) << 6;
            _WORD *v29 = (*(unsigned __int8 *)(v26 + v27 - 1)
                  + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 2)
                  + *(unsigned __int8 *)(v25 + v27 + 6)
                  + (unsigned __int16)*(unsigned __int8 *)(v26 + v27 + 3)) << 6;
            v29[1] = v30;
            v29 += 2;
          }
          *(_WORD *)(v24 + 2 * v28++) = *(unsigned __int8 *)(v25 + v27 + 1) << 8;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if (v19) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = v21;
      }
      v22 += v31;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v21 = *a4;
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (_WORD *)v20;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            __int16 v27 = *v25 << 8;
            *uint64_t v26 = *(v25 - 1) << 8;
            v26[1] = v27;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 2) << 8;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v18;
      if (v17) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = v19;
      }
      v20 += v28;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a4;
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        unsigned int v29 = (_WORD *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            __int16 v30 = (unsigned __int8 *)(v25 + v27);
            unsigned int v31 = *(unsigned __int8 *)(v25 + v27 + 2);
            uint64_t v32 = (unsigned __int8 *)(v26 + v27);
            unsigned int v33 = *(unsigned __int8 *)(v26 + v27 - 1);
            if (v31 >= 0xF0) {
              unsigned int v31 = 240;
            }
            if (v31 <= 0x10) {
              unsigned int v31 = 16;
            }
            if (v33 >= 0xF0) {
              unsigned int v33 = 240;
            }
            if (v33 <= 0x10) {
              unsigned int v33 = 16;
            }
            unsigned int v34 = v30[3];
            unsigned int v35 = *v32;
            if (v34 >= 0xF0) {
              unsigned int v34 = 240;
            }
            if (v34 <= 0x10) {
              unsigned int v34 = 16;
            }
            if (v35 >= 0xF0) {
              unsigned int v35 = 240;
            }
            if (v35 <= 0x10) {
              unsigned int v35 = 16;
            }
            unsigned int v36 = v30[6];
            unsigned int v37 = v32[3];
            if (v36 >= 0xF0) {
              unsigned int v36 = 240;
            }
            if (v36 <= 0x10) {
              unsigned int v36 = 16;
            }
            if (v37 >= 0xF0) {
              unsigned int v37 = 240;
            }
            if (v37 <= 0x10) {
              unsigned int v37 = 16;
            }
            unsigned int v38 = v30[7];
            unsigned int v39 = v32[4];
            if (v38 >= 0xF0) {
              unsigned int v38 = 240;
            }
            if (v38 <= 0x10) {
              unsigned int v38 = 16;
            }
            if (v39 >= 0xF0) {
              unsigned int v39 = 240;
            }
            if (v39 <= 0x10) {
              unsigned int v39 = 16;
            }
            _WORD *v29 = (4
                  * (((613566757 * (unint64_t)((4095 * v33 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v31 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v36 - 65520) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((4095 * v37 - 65520) >> 5)) >> 32))
                  + 8) & 0xFFF0;
            v29[1] = (4
                    * (((613566757 * (unint64_t)((4095 * v35 - 65520) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((4095 * v34 - 65520) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((4095 * v38 - 65520) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((4095 * v39 - 65520) >> 5)) >> 32))
                    + 8) & 0xFFF0;
            v29 += 2;
          }
          unsigned int v40 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v40 >= 0xEB) {
            unsigned int v40 = 235;
          }
          if (v40 <= 0x10) {
            unsigned int v40 = 16;
          }
          *(_WORD *)(v24 + 2 * v28++) = ((((725633745 * (unint64_t)(4095 * v40 - 65520)) >> 32)
                                                      + ((4095 * v40
                                                                      - 65520
                                                                      - ((725633745
                                                                        * (unint64_t)(4095 * v40 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if (v19) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v21;
      }
      v22 += v41;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (_WORD *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            unsigned int v27 = *(v25 - 1);
            if (v27 >= 0xF0) {
              unsigned int v27 = 240;
            }
            if (v27 <= 0x10) {
              unsigned int v27 = 16;
            }
            unsigned int v28 = *v25;
            if (v28 >= 0xF0) {
              unsigned int v28 = 240;
            }
            if (v28 <= 0x10) {
              unsigned int v28 = 16;
            }
            *uint64_t v26 = 16 * ((613566757 * (unint64_t)((4095 * v27 - 65520) >> 5)) >> 32);
            v26[1] = 16 * ((613566757 * (unint64_t)((4095 * v28 - 65520) >> 5)) >> 32);
            v26 += 2;
          }
          unsigned int v29 = *(v25 - 2);
          if (v29 >= 0xEB) {
            unsigned int v29 = 235;
          }
          if (v29 <= 0x10) {
            unsigned int v29 = 16;
          }
          *(_WORD *)(v22 + 2 * v24++) = ((((725633745 * (unint64_t)(4095 * v29 - 65520)) >> 32)
                                                      + ((4095 * v29
                                                                      - 65520
                                                                      - ((725633745
                                                                        * (unint64_t)(4095 * v29 - 65520)) >> 32)) >> 1)) >> 3) & 0xFFF0;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if (v17) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v20;
      }
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_y408_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 4 * v15;
    uint64_t v21 = v17 + 2 * v15;
    uint64_t v22 = v18 + 2 * v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v26 = (_WORD *)(v20 + v24);
          *(_WORD *)(v21 + 2 * i) = *(unsigned __int8 *)(v23 + v24) | (*(unsigned __int8 *)(v23 + v24) << 8);
          __int16 v27 = *(unsigned __int8 *)(v23 + v24 + 3) << 8;
          *uint64_t v26 = *(unsigned __int8 *)(v23 + v24 + 2) << 8;
          v26[1] = v27;
          *(_WORD *)(v22 + 2 * i) = *(unsigned __int8 *)(v23 + v24 + 1) << 8;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 4 * v14;
    uint64_t v19 = v16 + 2 * v14;
    uint64_t v20 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v23 = (_WORD *)(v18 + v21);
          __int16 v24 = *(unsigned __int8 *)(v20 + v21 + 3) << 8;
          *uint64_t v23 = *(unsigned __int8 *)(v20 + v21 + 2) << 8;
          v23[1] = v24;
          *(_WORD *)(v19 + 2 * i) = *(unsigned __int8 *)(v20 + v21 + 1) << 8;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v13 * v14 + 4 * v15;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v15;
    uint64_t v18 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v21 = v18 + v19;
          unsigned int v22 = *(unsigned __int8 *)(v18 + v19 + 2);
          if (v22 >= 0xF0) {
            unsigned int v22 = 240;
          }
          if (v22 <= 0x10) {
            unsigned int v22 = 16;
          }
          unsigned int v23 = *(unsigned __int8 *)(v21 + 3);
          if (v23 >= 0xF0) {
            unsigned int v23 = 240;
          }
          __int16 v24 = (_WORD *)(v16 + v19);
          if (v23 <= 0x10) {
            unsigned int v23 = 16;
          }
          _WORD *v24 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v22 - 16368) >> 5)) >> 32) << 6;
          v24[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v23 - 16368) >> 5)) >> 32) << 6;
          unsigned int v25 = *(unsigned __int8 *)(v21 + 1);
          if (v25 >= 0xEB) {
            unsigned int v25 = 235;
          }
          if (v25 <= 0x10) {
            unsigned int v25 = 16;
          }
          *(_WORD *)(v17 + 2 * i) = ((((725633745 * (unint64_t)(1023 * v25 - 16368)) >> 32)
                                                  + ((1023 * v25
                                                                  - 16368
                                                                  - ((725633745 * (unint64_t)(1023 * v25 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v19 += 4;
        }
      }
      v18 += v11;
      v17 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v16 = a8[2];
    uint64_t v17 = a7[2] + v16 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v17 + 2 * v9;
    uint64_t v21 = v18 + 2 * v9;
    uint64_t v22 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v23 = 0;
        __int16 v24 = (unsigned __int8 *)v22;
        unsigned int v25 = (_WORD *)v15;
        do
        {
          *(_WORD *)(v20 + 2 * v23) = *(v24 - 3) | (*(v24 - 3) << 8);
          if ((v23 & 1) == 0)
          {
            __int16 v26 = *v24;
            __int16 v27 = v24[4];
            *unsigned int v25 = (v24[3] + (unsigned __int16)*(v24 - 1)) << 7;
            v25[1] = (v27 + v26) << 7;
            v25 += 2;
          }
          *(_WORD *)(v21 + 2 * v23++) = *(v24 - 2) << 8;
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v16 = a8[2];
    uint64_t v17 = a7[2] + v16 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v17 + 2 * v9;
    uint64_t v21 = v18 + 2 * v9;
    uint64_t v22 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v23 = 0;
        __int16 v24 = (unsigned __int8 *)v22;
        unsigned int v25 = (_WORD *)v15;
        do
        {
          *(_WORD *)(v20 + 2 * v23) = *(v24 - 3) | (*(v24 - 3) << 8);
          if ((v23 & 1) == 0)
          {
            __int16 v26 = *v24 << 8;
            *unsigned int v25 = *(v24 - 1) << 8;
            v25[1] = v26;
            v25 += 2;
          }
          *(_WORD *)(v21 + 2 * v23++) = *(v24 - 2) << 8;
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v16 = *a4;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            __int16 v22 = *v20;
            __int16 v23 = v20[4];
            *uint64_t v21 = (v20[3] + (unsigned __int16)*(v20 - 1)) << 7;
            v21[1] = (v23 + v22) << 7;
            v21 += 2;
          }
          *(_WORD *)(v17 + 2 * v19++) = *(v20 - 2) << 8;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v16 = *a4;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            __int16 v22 = *v20 << 8;
            *uint64_t v21 = *(v20 - 1) << 8;
            v21[1] = v22;
            v21 += 2;
          }
          *(_WORD *)(v17 + 2 * v19++) = *(v20 - 2) << 8;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a7 + *a8 * v15 + 2 * v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (_WORD *)v16;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v22 = *(v20 - 1);
            unsigned int v23 = v20[3];
            if (v22 >= 0xF0) {
              unsigned int v22 = 240;
            }
            if (v22 <= 0x10) {
              unsigned int v22 = 16;
            }
            if (v23 >= 0xF0) {
              unsigned int v23 = 240;
            }
            if (v23 <= 0x10) {
              unsigned int v23 = 16;
            }
            unsigned int v24 = *v20;
            unsigned int v25 = v20[4];
            if (v24 >= 0xF0) {
              unsigned int v24 = 240;
            }
            if (v24 <= 0x10) {
              unsigned int v24 = 16;
            }
            if (v25 >= 0xF0) {
              unsigned int v25 = 240;
            }
            if (v25 <= 0x10) {
              unsigned int v25 = 16;
            }
            *uint64_t v21 = (32
                  * (((613566757 * (unint64_t)((1023 * v23 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v22 - 16368) >> 5)) >> 32))
                  + 32) & 0xFFC0;
            v21[1] = (32
                    * (((613566757 * (unint64_t)((1023 * v25 - 16368) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((1023 * v24 - 16368) >> 5)) >> 32))
                    + 32) & 0xFFC0;
            v21 += 2;
          }
          unsigned int v26 = *(v20 - 2);
          if (v26 >= 0xEB) {
            unsigned int v26 = 235;
          }
          if (v26 <= 0x10) {
            unsigned int v26 = 16;
          }
          *(_WORD *)(v17 + 2 * v19++) = ((((725633745 * (unint64_t)(1023 * v26 - 16368)) >> 32)
                                                      + ((1023 * v26
                                                                      - 16368
                                                                      - ((725633745
                                                                        * (unint64_t)(1023 * v26 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v13;
      v16 += v14;
      ++v11;
      v18 += v12;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v9 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a7 + *a8 * v15 + 2 * v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (_WORD *)v16;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v22 = *(v20 - 1);
            if (v22 >= 0xF0) {
              unsigned int v22 = 240;
            }
            if (v22 <= 0x10) {
              unsigned int v22 = 16;
            }
            unsigned int v23 = *v20;
            if (v23 >= 0xF0) {
              unsigned int v23 = 240;
            }
            if (v23 <= 0x10) {
              unsigned int v23 = 16;
            }
            *uint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v22 - 16368) >> 5)) >> 32) << 6;
            v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v23 - 16368) >> 5)) >> 32) << 6;
            v21 += 2;
          }
          unsigned int v24 = *(v20 - 2);
          if (v24 >= 0xEB) {
            unsigned int v24 = 235;
          }
          if (v24 <= 0x10) {
            unsigned int v24 = 16;
          }
          *(_WORD *)(v17 + 2 * v19++) = ((((725633745 * (unint64_t)(1023 * v24 - 16368)) >> 32)
                                                      + ((1023 * v24
                                                                      - 16368
                                                                      - ((725633745
                                                                        * (unint64_t)(1023 * v24 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v13;
      v16 += v14;
      ++v11;
      v18 += v12;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a4;
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        unsigned int v29 = (_WORD *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            __int16 v30 = *(unsigned __int8 *)(v26 + v27)
                + *(unsigned __int8 *)(v25 + v27 + 3)
                + *(unsigned __int8 *)(v25 + v27 + 7)
                + *(unsigned __int8 *)(v26 + v27 + 4);
            _WORD *v29 = (*(unsigned __int8 *)(v26 + v27 - 1)
                  + (unsigned __int16)*(unsigned __int8 *)(v25 + v27 + 2)
                  + *(unsigned __int8 *)(v25 + v27 + 6)
                  + (unsigned __int16)*(unsigned __int8 *)(v26 + v27 + 3)) << 6;
            v29[1] = v30 << 6;
            v29 += 2;
          }
          *(_WORD *)(v24 + 2 * v28++) = *(unsigned __int8 *)(v25 + v27 + 1) << 8;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if (v19) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = v21;
      }
      v22 += v31;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v21 = *a4;
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (_WORD *)v20;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            __int16 v27 = *v25 << 8;
            *uint64_t v26 = *(v25 - 1) << 8;
            v26[1] = v27;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 2) << 8;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v18;
      if (v17) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = v19;
      }
      v20 += v28;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + 2 * (v14 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a4;
    uint64_t v24 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        unsigned int v29 = (_WORD *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            __int16 v30 = (unsigned __int8 *)(v25 + v27);
            unsigned int v31 = *(unsigned __int8 *)(v25 + v27 + 2);
            uint64_t v32 = (unsigned __int8 *)(v26 + v27);
            unsigned int v33 = *(unsigned __int8 *)(v26 + v27 - 1);
            if (v31 >= 0xF0) {
              unsigned int v31 = 240;
            }
            if (v31 <= 0x10) {
              unsigned int v31 = 16;
            }
            if (v33 >= 0xF0) {
              unsigned int v33 = 240;
            }
            if (v33 <= 0x10) {
              unsigned int v33 = 16;
            }
            unsigned int v34 = v30[3];
            unsigned int v35 = *v32;
            if (v34 >= 0xF0) {
              unsigned int v34 = 240;
            }
            if (v34 <= 0x10) {
              unsigned int v34 = 16;
            }
            if (v35 >= 0xF0) {
              unsigned int v35 = 240;
            }
            if (v35 <= 0x10) {
              unsigned int v35 = 16;
            }
            unsigned int v36 = v30[6];
            unsigned int v37 = v32[3];
            if (v36 >= 0xF0) {
              unsigned int v36 = 240;
            }
            if (v36 <= 0x10) {
              unsigned int v36 = 16;
            }
            if (v37 >= 0xF0) {
              unsigned int v37 = 240;
            }
            if (v37 <= 0x10) {
              unsigned int v37 = 16;
            }
            unsigned int v38 = v30[7];
            unsigned int v39 = v32[4];
            if (v38 >= 0xF0) {
              unsigned int v38 = 240;
            }
            if (v38 <= 0x10) {
              unsigned int v38 = 16;
            }
            if (v39 >= 0xF0) {
              unsigned int v39 = 240;
            }
            if (v39 <= 0x10) {
              unsigned int v39 = 16;
            }
            _WORD *v29 = (16
                  * (((613566757 * (unint64_t)((1023 * v33 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v31 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v36 - 16368) >> 5)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v37 - 16368) >> 5)) >> 32))
                  + 32) & 0xFFC0;
            v29[1] = (16
                    * (((613566757 * (unint64_t)((1023 * v35 - 16368) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((1023 * v34 - 16368) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((1023 * v38 - 16368) >> 5)) >> 32)
                     + ((613566757 * (unint64_t)((1023 * v39 - 16368) >> 5)) >> 32))
                    + 32) & 0xFFC0;
            v29 += 2;
          }
          unsigned int v40 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v40 >= 0xEB) {
            unsigned int v40 = 235;
          }
          if (v40 <= 0x10) {
            unsigned int v40 = 16;
          }
          *(_WORD *)(v24 + 2 * v28++) = ((((725633745 * (unint64_t)(1023 * v40 - 16368)) >> 32)
                                                      + ((1023 * v40
                                                                      - 16368
                                                                      - ((725633745
                                                                        * (unint64_t)(1023 * v40 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if (v19) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v21;
      }
      v22 += v41;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (_WORD *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            unsigned int v27 = *(v25 - 1);
            if (v27 >= 0xF0) {
              unsigned int v27 = 240;
            }
            if (v27 <= 0x10) {
              unsigned int v27 = 16;
            }
            unsigned int v28 = *v25;
            if (v28 >= 0xF0) {
              unsigned int v28 = 240;
            }
            if (v28 <= 0x10) {
              unsigned int v28 = 16;
            }
            *uint64_t v26 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v27 - 16368) >> 5)) >> 32) << 6;
            v26[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v28 - 16368) >> 5)) >> 32) << 6;
            v26 += 2;
          }
          unsigned int v29 = *(v25 - 2);
          if (v29 >= 0xEB) {
            unsigned int v29 = 235;
          }
          if (v29 <= 0x10) {
            unsigned int v29 = 16;
          }
          *(_WORD *)(v22 + 2 * v24++) = ((((725633745 * (unint64_t)(1023 * v29 - 16368)) >> 32)
                                                      + ((1023 * v29
                                                                      - 16368
                                                                      - ((725633745
                                                                        * (unint64_t)(1023 * v29 - 16368)) >> 32)) >> 1)) >> 1) & 0xFFC0;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if (v17) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v20;
      }
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_y408_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 2 * v15;
    uint64_t v21 = v17 + v15;
    uint64_t v22 = v18 + v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + a2[4];
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          *(unsigned char *)(v21 + i) = *(unsigned char *)(v23 + v24);
          *(_WORD *)(v20 + v25) = *(_WORD *)(v23 + v24 + 2);
          *(unsigned char *)(v22 + i) = *(unsigned char *)(v23 + v24 + 1);
          v25 += 2;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 2 * v14;
    uint64_t v19 = v16 + v14;
    uint64_t v20 = a2[4] + *a4 * a2[5] + *a3 + 3;
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = v20;
        do
        {
          *(_WORD *)(v18 + v21) = *(_WORD *)(v23 - 1);
          *(unsigned char *)(v19 + v22++) = *(unsigned char *)(v23 - 2);
          v21 += 2;
          v23 += 4;
        }
        while (v8 != v22);
      }
      v19 += v11;
      v18 += v12;
      ++v10;
      v20 += v17;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y408_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v13 * v14 + 2 * v15;
    uint64_t v17 = *a7 + *a8 * v14 + v15;
    uint64_t v18 = a2[4] + *a4 * a2[5] + *a3 + 3;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = (unsigned __int8 *)v18;
        do
        {
          uint64_t v22 = (unsigned char *)(v16 + v19);
          unsigned int v23 = *(v21 - 1);
          if (v23 >= 0xF0) {
            unsigned int v23 = 240;
          }
          if (v23 <= 0x10) {
            LOWORD(v23) = 16;
          }
          unsigned int v24 = *v21;
          if (v24 >= 0xF0) {
            unsigned int v24 = 240;
          }
          if (v24 <= 0x10) {
            LOWORD(v24) = 16;
          }
          *uint64_t v22 = (9363 * ((unsigned __int16)(255 * v23 - 4080) >> 5)) >> 16;
          v22[1] = (9363 * ((unsigned __int16)(255 * v24 - 4080) >> 5)) >> 16;
          unsigned int v25 = *(v21 - 2);
          if (v25 >= 0xEB) {
            unsigned int v25 = 235;
          }
          if (v25 <= 0x10) {
            unsigned int v25 = 16;
          }
          *(unsigned char *)(v17 + v20++) = (((255 * v25
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v25 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v25 - 4080)) >> 16)) >> 7;
          v19 += 2;
          v21 += 4;
        }
        while (v8 != v20);
      }
      v17 += v12;
      v16 += v13;
      ++v10;
      v18 += v11;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + (v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v16 = a8[2];
    uint64_t v17 = a7[2] + v16 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v17 + v9;
    uint64_t v21 = v18 + v9;
    uint64_t v22 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v23 = 0;
        unsigned int v24 = (unsigned __int8 *)v22;
        unsigned int v25 = (unsigned char *)v15;
        do
        {
          *(unsigned char *)(v20 + v23) = *(v24 - 3);
          if ((v23 & 1) == 0)
          {
            unsigned int v26 = (*v24 + v24[4] + 1) >> 1;
            *unsigned int v25 = (*(v24 - 1) + v24[3] + 1) >> 1;
            v25[1] = v26;
            v25 += 2;
          }
          *(unsigned char *)(v21 + v23++) = *(v24 - 2);
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + (v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v16 = a8[2];
    uint64_t v17 = a7[2] + v16 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v17 + v9;
    uint64_t v21 = v18 + v9;
    uint64_t v22 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v23 = 0;
        uint64_t v24 = v22;
        unsigned int v25 = (_WORD *)v15;
        do
        {
          *(unsigned char *)(v20 + v23) = *(unsigned char *)(v24 - 3);
          if ((v23 & 1) == 0) {
            *v25++ = *(_WORD *)(v24 - 1);
          }
          *(unsigned char *)(v21 + v23++) = *(unsigned char *)(v24 - 2);
          v24 += 4;
        }
        while (v10 != v23);
      }
      v21 += v12;
      v15 += v13;
      v20 += v16;
      ++v11;
      v22 += v19;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + (v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v16 = *a4;
    uint64_t v17 = *a7 + *a8 * v14 + v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (unsigned char *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v22 = (*v20 + v20[4] + 1) >> 1;
            *uint64_t v21 = (*(v20 - 1) + v20[3] + 1) >> 1;
            v21[1] = v22;
            v21 += 2;
          }
          *(unsigned char *)(v17 + v19++) = *(v20 - 2);
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + (v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v16 = *a4;
    uint64_t v17 = *a7 + *a8 * v14 + v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v18;
        uint64_t v21 = (_WORD *)v15;
        do
        {
          if ((v19 & 1) == 0) {
            *v21++ = *(_WORD *)(v20 - 1);
          }
          *(unsigned char *)(v17 + v19++) = *(unsigned char *)(v20 - 2);
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + (v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v16 = *a4;
    uint64_t v17 = *a7 + *a8 * v14 + v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (unsigned char *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v22 = *(v20 - 1);
            unsigned int v23 = v20[3];
            if (v22 >= 0xF0) {
              unsigned int v22 = 240;
            }
            if (v22 <= 0x10) {
              LOWORD(v22) = 16;
            }
            if (v23 >= 0xF0) {
              unsigned int v23 = 240;
            }
            if (v23 <= 0x10) {
              LOWORD(v23) = 16;
            }
            unsigned int v24 = *v20;
            unsigned int v25 = v20[4];
            if (v24 >= 0xF0) {
              unsigned int v24 = 240;
            }
            if (v24 <= 0x10) {
              LOWORD(v24) = 16;
            }
            if (v25 >= 0xF0) {
              unsigned int v25 = 240;
            }
            if (v25 <= 0x10) {
              LOWORD(v25) = 16;
            }
            *uint64_t v21 = (((9363 * ((unsigned __int16)(255 * v22 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v23 - 4080) >> 5)) >> 16)
                  + 1) >> 1;
            v21[1] = (((9363 * ((unsigned __int16)(255 * v24 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v25 - 4080) >> 5)) >> 16)
                    + 1) >> 1;
            v21 += 2;
          }
          unsigned int v26 = *(v20 - 2);
          if (v26 >= 0xEB) {
            unsigned int v26 = 235;
          }
          if (v26 <= 0x10) {
            unsigned int v26 = 16;
          }
          *(unsigned char *)(v17 + v19++) = (((255 * v26
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v26 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v26 - 4080)) >> 16)) >> 7;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v10 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
      - ((*(void *)(a2 + 32) & 1)
       + *(void *)(a2 + 32));
  if (v10 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9) {
    unint64_t v10 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v9;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = *(void *)(a6 + 40);
    uint64_t v15 = a7[1] + v13 * v14 + (v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v16 = *a4;
    uint64_t v17 = *a7 + *a8 * v14 + v9;
    uint64_t v18 = *(void *)(a2 + 32) + *a4 * *(void *)(a2 + 40) + (*(void *)(a2 + 32) & 1) + *a3 + 3;
    do
    {
      if (v10)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int8 *)v18;
        uint64_t v21 = (unsigned char *)v15;
        do
        {
          if ((v19 & 1) == 0)
          {
            unsigned int v22 = *(v20 - 1);
            if (v22 >= 0xF0) {
              unsigned int v22 = 240;
            }
            if (v22 <= 0x10) {
              LOWORD(v22) = 16;
            }
            unsigned int v23 = *v20;
            if (v23 >= 0xF0) {
              unsigned int v23 = 240;
            }
            if (v23 <= 0x10) {
              LOWORD(v23) = 16;
            }
            *uint64_t v21 = (9363 * ((unsigned __int16)(255 * v22 - 4080) >> 5)) >> 16;
            v21[1] = (9363 * ((unsigned __int16)(255 * v23 - 4080) >> 5)) >> 16;
            v21 += 2;
          }
          unsigned int v24 = *(v20 - 2);
          if (v24 >= 0xEB) {
            unsigned int v24 = 235;
          }
          if (v24 <= 0x10) {
            unsigned int v24 = 16;
          }
          *(unsigned char *)(v17 + v19++) = (((255 * v24
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v24 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v24 - 4080)) >> 16)) >> 7;
          v20 += 4;
        }
        while (v10 != v19);
      }
      v17 += v12;
      v15 += v13;
      ++v11;
      v18 += v16;
    }
    while (v11 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + (v14 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a4;
    uint64_t v24 = *a7 + *a8 * v15 + v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        unsigned int v29 = (unsigned char *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            unsigned int v30 = (*(unsigned __int8 *)(v25 + v27 + 3)
                 + *(unsigned __int8 *)(v26 + v27)
                 + *(unsigned __int8 *)(v25 + v27 + 7)
                 + *(unsigned __int8 *)(v26 + v27 + 4)
                 + 2) >> 2;
            unsigned char *v29 = (*(unsigned __int8 *)(v25 + v27 + 2)
                  + *(unsigned __int8 *)(v26 + v27 - 1)
                  + *(unsigned __int8 *)(v25 + v27 + 6)
                  + *(unsigned __int8 *)(v26 + v27 + 3)
                  + 2) >> 2;
            v29[1] = v30;
            v29 += 2;
          }
          *(unsigned char *)(v24 + v28++) = *(unsigned char *)(v25 + v27 + 1);
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if (v19) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = v21;
      }
      v22 += v31;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v21 = *a4;
    uint64_t v22 = *a7 + *a8 * v13 + v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        uint64_t v24 = 0;
        uint64_t v25 = v23;
        uint64_t v26 = (_WORD *)v20;
        do
        {
          if (((v24 | v17) & 1) == 0) {
            *v26++ = *(_WORD *)(v25 - 1);
          }
          *(unsigned char *)(v22 + v24++) = *(unsigned char *)(v25 - 2);
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v18;
      if (v17) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v19;
      }
      v20 += v27;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v10 = (v9 & 1) + v9;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v15) >> 1) + (v14 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a4;
    uint64_t v24 = *a7 + *a8 * v15 + v14;
    uint64_t v25 = *a3 + *a4 * v12 + v10;
    uint64_t v26 = v9 + (v9 & 1) + *a3 + v23 + v23 * (v8 + (v8 & 1)) + 3;
    do
    {
      if (v17)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        unsigned int v29 = (unsigned char *)v22;
        do
        {
          if (((v28 | v19) & 1) == 0)
          {
            unsigned int v30 = (unsigned __int8 *)(v25 + v27);
            unsigned int v31 = *(unsigned __int8 *)(v25 + v27 + 2);
            uint64_t v32 = (unsigned __int8 *)(v26 + v27);
            unsigned int v33 = *(unsigned __int8 *)(v26 + v27 - 1);
            if (v31 >= 0xF0) {
              unsigned int v31 = 240;
            }
            if (v31 <= 0x10) {
              LOWORD(v31) = 16;
            }
            if (v33 >= 0xF0) {
              unsigned int v33 = 240;
            }
            if (v33 <= 0x10) {
              LOWORD(v33) = 16;
            }
            unsigned int v34 = v30[3];
            unsigned int v35 = *v32;
            if (v34 >= 0xF0) {
              unsigned int v34 = 240;
            }
            if (v34 <= 0x10) {
              LOWORD(v34) = 16;
            }
            if (v35 >= 0xF0) {
              unsigned int v35 = 240;
            }
            if (v35 <= 0x10) {
              LOWORD(v35) = 16;
            }
            unsigned int v36 = v30[6];
            unsigned int v37 = v32[3];
            if (v36 >= 0xF0) {
              unsigned int v36 = 240;
            }
            if (v36 <= 0x10) {
              LOWORD(v36) = 16;
            }
            if (v37 >= 0xF0) {
              unsigned int v37 = 240;
            }
            if (v37 <= 0x10) {
              LOWORD(v37) = 16;
            }
            unsigned int v38 = v30[7];
            unsigned int v39 = v32[4];
            if (v38 >= 0xF0) {
              unsigned int v38 = 240;
            }
            if (v38 <= 0x10) {
              LOWORD(v38) = 16;
            }
            if (v39 >= 0xF0) {
              unsigned int v39 = 240;
            }
            if (v39 <= 0x10) {
              LOWORD(v39) = 16;
            }
            unsigned char *v29 = (((9363 * ((unsigned __int16)(255 * v31 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v33 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v36 - 4080) >> 5)) >> 16)
                  + ((9363 * ((unsigned __int16)(255 * v37 - 4080) >> 5)) >> 16)
                  + 2) >> 2;
            v29[1] = (((9363 * ((unsigned __int16)(255 * v34 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v35 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v39 - 4080) >> 5)) >> 16)
                    + 2) >> 2;
            v29 += 2;
          }
          unsigned int v40 = *(unsigned __int8 *)(v25 + v27 + 1);
          if (v40 >= 0xEB) {
            unsigned int v40 = 235;
          }
          if (v40 <= 0x10) {
            unsigned int v40 = 16;
          }
          *(unsigned char *)(v24 + v28++) = (((255 * v40
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v40 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v40 - 4080)) >> 16)) >> 7;
          v27 += 4;
        }
        while (v17 != v28);
      }
      v25 += v23;
      v24 += v20;
      if (v19) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v21;
      }
      v22 += v41;
      ++v19;
      v26 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v21 = *a4;
    uint64_t v22 = *a7 + *a8 * v13 + v12;
    uint64_t v23 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unsigned __int8 *)v23;
        uint64_t v26 = (unsigned char *)v20;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            unsigned int v27 = *(v25 - 1);
            if (v27 >= 0xF0) {
              unsigned int v27 = 240;
            }
            if (v27 <= 0x10) {
              LOWORD(v27) = 16;
            }
            unsigned int v28 = *v25;
            if (v28 >= 0xF0) {
              unsigned int v28 = 240;
            }
            if (v28 <= 0x10) {
              LOWORD(v28) = 16;
            }
            *uint64_t v26 = (9363 * ((unsigned __int16)(255 * v27 - 4080) >> 5)) >> 16;
            v26[1] = (9363 * ((unsigned __int16)(255 * v28 - 4080) >> 5)) >> 16;
            v26 += 2;
          }
          unsigned int v29 = *(v25 - 2);
          if (v29 >= 0xEB) {
            unsigned int v29 = 235;
          }
          if (v29 <= 0x10) {
            unsigned int v29 = 16;
          }
          *(unsigned char *)(v22 + v24++) = (((255 * v29
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v29 - 4080)) >> 16)) >> 7;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v18;
      if (v17) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v19;
      }
      v20 += v30;
      ++v17;
      v23 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (v9 & 1) + v9;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12) {
    unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  }
  unint64_t v16 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v11;
  if (v16 >= v14 - v13) {
    unint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v13;
    uint64_t v23 = *a7 + *a8 * v13;
    uint64_t v24 = *a4;
    uint64_t v25 = v22 + v12;
    uint64_t v26 = v23 + v12;
    uint64_t v27 = *a3 + *a4 * v11 + v10;
    uint64_t v28 = v8 + (v8 & 1) + *a3 + v24 + v24 * (v9 + (v9 & 1)) + 3;
    do
    {
      if (v15)
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        unsigned int v31 = (unsigned char *)v20;
        do
        {
          uint64_t v32 = (unsigned char *)(v27 + v29);
          *(unsigned char *)(v25 + v30) = *(unsigned char *)(v27 + v29);
          if (((v30 | v17) & 1) == 0)
          {
            unsigned int v33 = (v32[3]
                 + *(unsigned __int8 *)(v28 + v29)
                 + v32[7]
                 + *(unsigned __int8 *)(v28 + v29 + 4)
                 + 2) >> 2;
            unsigned char *v31 = (v32[2]
                  + *(unsigned __int8 *)(v28 + v29 - 1)
                  + v32[6]
                  + *(unsigned __int8 *)(v28 + v29 + 3)
                  + 2) >> 2;
            v31[1] = v33;
            v31 += 2;
          }
          *(unsigned char *)(v26 + v30++) = v32[1];
          v29 += 4;
        }
        while (v15 != v30);
      }
      v27 += v24;
      v26 += v18;
      if (v17) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v19;
      }
      v20 += v34;
      v25 += v21;
      ++v17;
      v28 += v24;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v10 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v11 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v13 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v14 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - ((unint64_t)(v8 & 1) + v8) < v14) {
    unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE)
  }
        - ((*(void *)(a2 + 32) & 1)
         + *(void *)(a2 + 32));
  uint64_t v15 = v10 - v9;
  if (v10 - v9 >= (unint64_t)(v13 - v12)) {
    uint64_t v15 = v13 - v12;
  }
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *a8;
    uint64_t v18 = a8[1];
    uint64_t v19 = a7[1] + ((unint64_t)(v18 * v12) >> 1) + (v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v12;
    uint64_t v22 = *a7 + *a8 * v12;
    uint64_t v23 = *a4;
    uint64_t v24 = v21 + v11;
    uint64_t v25 = v22 + v11;
    uint64_t v26 = v8 + *a4 * v9 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v14)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v26;
        uint64_t v29 = (_WORD *)v19;
        do
        {
          *(unsigned char *)(v24 + v27) = *(unsigned char *)(v28 - 3);
          if (((v27 | v16) & 1) == 0) {
            *v29++ = *(_WORD *)(v28 - 1);
          }
          *(unsigned char *)(v25 + v27++) = *(unsigned char *)(v28 - 2);
          v28 += 4;
        }
        while (v14 != v27);
      }
      v25 += v17;
      if (v16) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v18;
      }
      v19 += v30;
      v24 += v20;
      ++v16;
      v26 += v23;
    }
    while (v16 != v15);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  unint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a8[2];
    uint64_t v23 = *a4;
    uint64_t v24 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v15) >> 1) + (v14 >> 1));
    uint64_t v25 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v15) >> 1) + (v14 >> 1));
    unint64_t v26 = *a7 + *a8 * v15 + v14;
    uint64_t v27 = *a3 + *a4 * v12 + v10;
    uint64_t v28 = v8 + (v8 & 1) + *a3 + v23 + v23 * (v9 + (v9 & 1)) + 3;
    do
    {
      if (v17)
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        unsigned int v31 = v24;
        uint64_t v32 = v25;
        do
        {
          if (((v30 | v19) & 1) == 0)
          {
            unsigned int v33 = (*(unsigned __int8 *)(v27 + v29 + 3)
                 + *(unsigned __int8 *)(v28 + v29)
                 + *(unsigned __int8 *)(v27 + v29 + 7)
                 + *(unsigned __int8 *)(v28 + v29 + 4)
                 + 2) >> 2;
            *v32++ = (*(unsigned __int8 *)(v27 + v29 + 2)
                    + *(unsigned __int8 *)(v28 + v29 - 1)
                    + *(unsigned __int8 *)(v27 + v29 + 6)
                    + *(unsigned __int8 *)(v28 + v29 + 3)
                    + 2) >> 2;
            *v31++ = v33;
          }
          *(unsigned char *)(v26 + v30++) = *(unsigned char *)(v27 + v29 + 1);
          v29 += 4;
        }
        while (v17 != v30);
      }
      v27 += v23;
      v26 += v20;
      if (v19) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v21;
      }
      v25 += v34;
      if (v19) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = v22;
      }
      v24 += v35;
      ++v19;
      v28 += v23;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a8[2];
    uint64_t v21 = *a4;
    uint64_t v22 = (unsigned char *)(a7[2] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    uint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 >> 1));
    unint64_t v24 = *a7 + *a8 * v13 + v12;
    uint64_t v25 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        uint64_t v26 = 0;
        uint64_t v27 = (char *)v25;
        uint64_t v28 = v22;
        uint64_t v29 = v23;
        do
        {
          if (((v26 | v17) & 1) == 0)
          {
            char v30 = *v27;
            *v29++ = *(v27 - 1);
            *v28++ = v30;
          }
          *(unsigned char *)(v24 + v26++) = *(v27 - 2);
          v27 += 4;
        }
        while (v15 != v26);
      }
      v24 += v18;
      if (v17) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = v19;
      }
      v23 += v31;
      if (v17) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v20;
      }
      v22 += v32;
      ++v17;
      v25 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y408_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = (v9 & 1) + v9;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  unint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v16 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v17 = v11 - v10;
  if (v17 >= ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14) {
    unint64_t v17 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  }
  unint64_t v18 = v13 - v12;
  if (v18 >= v16 - v15) {
    unint64_t v18 = v16 - v15;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = a8[2];
    uint64_t v46 = a8[1];
    uint64_t v21 = *a4;
    uint64_t v22 = (unsigned char *)(a7[2] + ((unint64_t)(v20 * v15) >> 1) + (v14 >> 1));
    uint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v46 * v15) >> 1) + (v14 >> 1));
    uint64_t v24 = *a8;
    unint64_t v25 = *a7 + *a8 * v15 + v14;
    uint64_t v26 = *a3 + *a4 * v12 + v10;
    uint64_t v27 = v8 + (v8 & 1) + *a3 + v21 + v21 * (v9 + (v9 & 1)) + 3;
    do
    {
      if (v17)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        char v30 = v22;
        uint64_t v31 = v23;
        do
        {
          if (((v29 | v19) & 1) == 0)
          {
            uint64_t v32 = (unsigned __int8 *)(v26 + v28);
            unsigned int v33 = *(unsigned __int8 *)(v26 + v28 + 2);
            uint64_t v34 = (unsigned __int8 *)(v27 + v28);
            unsigned int v35 = *(unsigned __int8 *)(v27 + v28 - 1);
            if (v33 >= 0xF0) {
              unsigned int v33 = 240;
            }
            if (v33 <= 0x10) {
              LOWORD(v33) = 16;
            }
            if (v35 >= 0xF0) {
              unsigned int v35 = 240;
            }
            if (v35 <= 0x10) {
              LOWORD(v35) = 16;
            }
            unsigned int v36 = v32[3];
            unsigned int v37 = *v34;
            if (v36 >= 0xF0) {
              unsigned int v36 = 240;
            }
            if (v36 <= 0x10) {
              LOWORD(v36) = 16;
            }
            if (v37 >= 0xF0) {
              unsigned int v37 = 240;
            }
            if (v37 <= 0x10) {
              LOWORD(v37) = 16;
            }
            unsigned int v38 = v32[6];
            unsigned int v39 = v34[3];
            if (v38 >= 0xF0) {
              unsigned int v38 = 240;
            }
            if (v38 <= 0x10) {
              LOWORD(v38) = 16;
            }
            if (v39 >= 0xF0) {
              unsigned int v39 = 240;
            }
            if (v39 <= 0x10) {
              LOWORD(v39) = 16;
            }
            unsigned int v40 = v32[7];
            unsigned int v41 = v34[4];
            if (v40 >= 0xF0) {
              unsigned int v40 = 240;
            }
            if (v40 <= 0x10) {
              LOWORD(v40) = 16;
            }
            if (v41 >= 0xF0) {
              unsigned int v41 = 240;
            }
            if (v41 <= 0x10) {
              LOWORD(v41) = 16;
            }
            *v31++ = (((9363 * ((unsigned __int16)(255 * v33 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v35 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v38 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v39 - 4080) >> 5)) >> 16)
                    + 2) >> 2;
            *v30++ = (((9363 * ((unsigned __int16)(255 * v36 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v37 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v40 - 4080) >> 5)) >> 16)
                    + ((9363 * ((unsigned __int16)(255 * v41 - 4080) >> 5)) >> 16)
                    + 2) >> 2;
          }
          unsigned int v42 = *(unsigned __int8 *)(v26 + v28 + 1);
          if (v42 >= 0xEB) {
            unsigned int v42 = 235;
          }
          if (v42 <= 0x10) {
            unsigned int v42 = 16;
          }
          *(unsigned char *)(v25 + v29++) = (((255 * v42
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v42 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v42 - 4080)) >> 16)) >> 7;
          v28 += 4;
        }
        while (v17 != v29);
      }
      v26 += v21;
      v25 += v24;
      uint64_t v43 = v46;
      if (v19) {
        uint64_t v43 = 0;
      }
      v23 += v43;
      if (v19) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = v20;
      }
      v22 += v44;
      ++v19;
      v27 += v21;
    }
    while (v19 != v18);
  }
  return 0;
}

uint64_t vt_CopyDec_y408_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  if (v9 - ((unint64_t)(v8 & 1) + v8) < v15) {
    unint64_t v15 = v9 - ((v8 & 1) + v8);
  }
  uint64_t v16 = v11 - v10;
  if (v11 - v10 >= (unint64_t)(v14 - v13)) {
    uint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a8[2];
    uint64_t v21 = *a4;
    uint64_t v22 = (unsigned char *)(a7[2] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    uint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 >> 1));
    unint64_t v24 = *a7 + *a8 * v13 + v12;
    uint64_t v25 = v8 + *a4 * v10 + (v8 & 1) + *a3 + 3;
    do
    {
      if (v15)
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unsigned __int8 *)v25;
        uint64_t v28 = v22;
        uint64_t v29 = v23;
        do
        {
          if (((v26 | v17) & 1) == 0)
          {
            unsigned int v30 = *(v27 - 1);
            if (v30 >= 0xF0) {
              unsigned int v30 = 240;
            }
            if (v30 <= 0x10) {
              LOWORD(v30) = 16;
            }
            unsigned int v31 = *v27;
            if (v31 >= 0xF0) {
              unsigned int v31 = 240;
            }
            if (v31 <= 0x10) {
              LOWORD(v31) = 16;
            }
            *v29++ = (9363 * ((unsigned __int16)(255 * v30 - 4080) >> 5)) >> 16;
            *v28++ = (9363 * ((unsigned __int16)(255 * v31 - 4080) >> 5)) >> 16;
          }
          unsigned int v32 = *(v27 - 2);
          if (v32 >= 0xEB) {
            unsigned int v32 = 235;
          }
          if (v32 <= 0x10) {
            unsigned int v32 = 16;
          }
          *(unsigned char *)(v24 + v26++) = (((255 * v32
                                     - 4080
                                     - ((11073 * (unsigned __int16)(255 * v32 - 4080)) >> 16)) >> 1)
                                   + ((11073 * (unsigned __int16)(255 * v32 - 4080)) >> 16)) >> 7;
          v27 += 4;
        }
        while (v15 != v26);
      }
      v24 += v18;
      if (v17) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v19;
      }
      v23 += v33;
      if (v17) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v20;
      }
      v22 += v34;
      ++v17;
      v25 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_y408_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y408_32ARGB;
  *a11 = vt_VImage_Cleanup_y408_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_y408_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D3C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y408_32BGRA;
  *a11 = vt_VImage_Cleanup_y408_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v410_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  long long v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444CrYpCb10, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v410_32ARGB;
  *a11 = vt_VImage_Cleanup_v410_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v410_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  long long v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444CrYpCb10, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v410_32BGRA;
  *a11 = vt_VImage_Cleanup_v410_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v410_l64r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  long long v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444CrYpCb10, (vImageARGBType)0xFFFFFFFF, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v410_l64r;
  *a11 = vt_VImage_Cleanup_v410_l64r;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v410_RGhA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  long long v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444CrYpCb10, kvImageARGB16Q12, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v410_RGhA;
  *a11 = vt_VImage_Cleanup_v410_RGhA;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_y416_y408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_y416_y408;
  *a11 = vt_VImage_Cleanup_y416_y408;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_y416_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y416_32BGRA;
  *a11 = vt_VImage_Cleanup_y416_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_y416_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y416_32ARGB;
  *a11 = vt_VImage_Cleanup_y416_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_y416_l64r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16, kvImageARGB16U, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y416_l64r;
  *a11 = vt_VImage_Cleanup_y416_l64r;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_y416_RGhA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16, kvImageARGB16U, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_y416_RGhA;
  *a11 = vt_VImage_Cleanup_y416_RGhA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_y416_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 4 * v15;
    uint64_t v21 = v17 + 2 * v15;
    uint64_t v22 = v18 + 2 * v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + 2 * a2[4];
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v26 = v23 + 2 * v24;
          *(_WORD *)(v21 + 2 * i) = *(_WORD *)v26;
          *(_DWORD *)(v20 + v24) = *(_DWORD *)(v26 + 4);
          *(_WORD *)(v22 + 2 * i) = *(_WORD *)(v26 + 2);
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 4 * v14;
    uint64_t v19 = v16 + 2 * v14;
    uint64_t v20 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        uint64_t v22 = v20;
        unint64_t v23 = v8;
        do
        {
          *(_DWORD *)(v18 + 2 * v21) = *(_DWORD *)(v22 - 2);
          *(_WORD *)(v19 + v21) = *(_WORD *)(v22 - 4);
          v21 += 2;
          v22 += 8;
          --v23;
        }
        while (v23);
      }
      v19 += v11;
      v18 += v12;
      ++v10;
      v20 += v17;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v13 * v14 + 4 * v15;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v15;
    uint64_t v18 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int16 *)v18;
        unint64_t v21 = v8;
        do
        {
          uint64_t v22 = (_WORD *)(v16 + 2 * v19);
          unsigned int v23 = *(v20 - 1);
          if (v23 >= 0xF000) {
            unsigned int v23 = 61440;
          }
          if (v23 <= 0x1000) {
            unsigned int v23 = 4096;
          }
          unsigned int v24 = *v20;
          if (v24 >= 0xF000) {
            unsigned int v24 = 61440;
          }
          if (v24 <= 0x1000) {
            unsigned int v24 = 4096;
          }
          *uint64_t v22 = (613566757 * (unint64_t)((-268431360 - v23 + (v23 << 16)) >> 13)) >> 32;
          v22[1] = (613566757 * (unint64_t)((-268431360 - v24 + (v24 << 16)) >> 13)) >> 32;
          unsigned int v25 = *(v20 - 2);
          if (v25 >= 0xEB00) {
            unsigned int v25 = 60160;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          *(_WORD *)(v17 + v19) = (-268431360 - v25 + (v25 << 16)) / 0xDB00;
          v19 += 2;
          v20 += 4;
          --v21;
        }
        while (v21);
      }
      v17 += v12;
      v16 += v13;
      ++v10;
      v18 += v11;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + 2 * v10;
    uint64_t v22 = v19 + 2 * v10;
    uint64_t v23 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        unsigned int v25 = (unsigned __int16 *)v23;
        uint64_t v26 = (_WORD *)v16;
        do
        {
          *(_WORD *)(v21 + 2 * v24) = *(v25 - 6);
          if ((v24 & 1) == 0)
          {
            unsigned int v27 = (*(v25 - 3) + v25[1] + 1) >> 1;
            *uint64_t v26 = (*(v25 - 4) + *v25 + 1) >> 1;
            v26[1] = v27;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 5);
          v25 += 4;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + 2 * v10;
    uint64_t v22 = v19 + 2 * v10;
    uint64_t v23 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        uint64_t v25 = v23;
        uint64_t v26 = (_DWORD *)v16;
        do
        {
          *(_WORD *)(v21 + 2 * v24) = *(_WORD *)(v25 - 6);
          if ((v24 & 1) == 0) {
            *v26++ = *(_DWORD *)(v25 - 2);
          }
          *(_WORD *)(v22 + 2 * v24++) = *(_WORD *)(v25 - 4);
          v25 += 8;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + 2 * v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (unsigned __int16 *)v19;
        uint64_t v22 = (_WORD *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            unsigned int v23 = (*(v21 - 3) + v21[1] + 1) >> 1;
            *uint64_t v22 = (*(v21 - 4) + *v21 + 1) >> 1;
            v22[1] = v23;
            v22 += 2;
          }
          *(_WORD *)(v18 + 2 * v20++) = *(v21 - 5);
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + 2 * v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = v19;
        uint64_t v22 = (_DWORD *)v16;
        do
        {
          if ((v20 & 1) == 0) {
            *v22++ = *(_DWORD *)(v21 - 2);
          }
          *(_WORD *)(v18 + 2 * v20++) = *(_WORD *)(v21 - 4);
          v21 += 8;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + 2 * v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (unsigned __int16 *)v19;
        uint64_t v22 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            unsigned int v23 = *(v21 - 4);
            unsigned int v24 = *v21;
            if (v23 >= 0xF000) {
              unsigned int v23 = 61440;
            }
            if (v23 <= 0x1000) {
              unsigned int v23 = 4096;
            }
            if (v24 >= 0xF000) {
              unsigned int v24 = 61440;
            }
            if (v24 <= 0x1000) {
              unsigned int v24 = 4096;
            }
            unsigned int v25 = *(v21 - 3);
            unsigned int v26 = v21[1];
            if (v25 >= 0xF000) {
              unsigned int v25 = 61440;
            }
            if (v25 <= 0x1000) {
              unsigned int v25 = 4096;
            }
            if (v26 >= 0xF000) {
              unsigned int v26 = 61440;
            }
            if (v26 <= 0x1000) {
              unsigned int v26 = 4096;
            }
            *uint64_t v22 = (((613566757 * (unint64_t)((-268431360 - v23 + (v23 << 16)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-268431360 - v24 + (v24 << 16)) >> 13)) >> 32)
                                + 1) >> 1;
            v22[1] = (((613566757 * (unint64_t)((-268431360 - v25 + (v25 << 16)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-268431360 - v26 + (v26 << 16)) >> 13)) >> 32)
                                  + 1) >> 1;
            v22 += 2;
          }
          unsigned int v27 = *(v21 - 5);
          if (v27 >= 0xEB00) {
            unsigned int v27 = 60160;
          }
          if (v27 <= 0x1000) {
            unsigned int v27 = 4096;
          }
          *(_WORD *)(v18 + 2 * v20++) = (-268431360 - v27 + (v27 << 16)) / 0xDB00;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + 2 * v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (unsigned __int16 *)v19;
        uint64_t v22 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            unsigned int v23 = *(v21 - 1);
            if (v23 >= 0xF000) {
              unsigned int v23 = 61440;
            }
            if (v23 <= 0x1000) {
              unsigned int v23 = 4096;
            }
            unsigned int v24 = *v21;
            if (v24 >= 0xF000) {
              unsigned int v24 = 61440;
            }
            if (v24 <= 0x1000) {
              unsigned int v24 = 4096;
            }
            *uint64_t v22 = (613566757 * (unint64_t)((-268431360 - v23 + (v23 << 16)) >> 13)) >> 32;
            v22[1] = (613566757 * (unint64_t)((-268431360 - v24 + (v24 << 16)) >> 13)) >> 32;
            v22 += 2;
          }
          unsigned int v25 = *(v21 - 2);
          if (v25 >= 0xEB00) {
            unsigned int v25 = 60160;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          *(_WORD *)(v18 + 2 * v20++) = (-268431360 - v25 + (v25 << 16)) / 0xDB00;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a4;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v25 = v22 + v22 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = (_WORD *)v21;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            unsigned int v29 = (*(unsigned __int16 *)(v24 + v26 + 6)
                 + *(unsigned __int16 *)(v25 + v26 - 6)
                 + *(unsigned __int16 *)(v24 + v26 + 14)
                 + *(unsigned __int16 *)(v25 + v26 + 2)
                 + 2) >> 2;
            _WORD *v28 = (*(unsigned __int16 *)(v24 + v26 + 4)
                  + *(unsigned __int16 *)(v25 + v26 - 8)
                  + *(unsigned __int16 *)(v24 + v26 + 12)
                  + *(unsigned __int16 *)(v25 + v26)
                  + 2) >> 2;
            v28[1] = v29;
            v28 += 2;
          }
          *(_WORD *)(v23 + 2 * v27++) = *(_WORD *)(v24 + v26 + 2);
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v22;
      v23 += v19;
      if (v18) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v20;
      }
      v21 += v30;
      ++v18;
      v25 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v12 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v13 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v13 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v14 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11) {
    unint64_t v14 = v12 - v11;
  }
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    uint64_t v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v19 = *a4;
    uint64_t v20 = *a7 + *a8 * v11 + 2 * v10;
    uint64_t v21 = *a4 * v9 + 2 * v8 + *a3 + 6;
    do
    {
      if (v13)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v21;
        uint64_t v24 = (_DWORD *)v18;
        do
        {
          if (((v22 | v15) & 1) == 0) {
            *v24++ = *(_DWORD *)(v23 - 2);
          }
          *(_WORD *)(v20 + 2 * v22++) = *(_WORD *)(v23 - 4);
          v23 += 8;
        }
        while (v13 != v22);
      }
      v20 += v16;
      if (v15) {
        uint64_t v25 = 0;
      }
      else {
        uint64_t v25 = v17;
      }
      v18 += v25;
      ++v15;
      v21 += v19;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v25 = v19 + v19 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = (_WORD *)v22;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            unsigned int v29 = (unsigned __int16 *)(v24 + v26);
            unsigned int v30 = *(unsigned __int16 *)(v24 + v26 + 4);
            unsigned int v31 = (unsigned __int16 *)(v25 + v26);
            unsigned int v32 = *(unsigned __int16 *)(v25 + v26 - 8);
            if (v30 >= 0xF000) {
              unsigned int v30 = 61440;
            }
            if (v30 <= 0x1000) {
              unsigned int v30 = 4096;
            }
            if (v32 >= 0xF000) {
              unsigned int v32 = 61440;
            }
            if (v32 <= 0x1000) {
              unsigned int v32 = 4096;
            }
            unsigned int v33 = v29[3];
            unsigned int v34 = *(v31 - 3);
            if (v33 >= 0xF000) {
              unsigned int v33 = 61440;
            }
            if (v33 <= 0x1000) {
              unsigned int v33 = 4096;
            }
            if (v34 >= 0xF000) {
              unsigned int v34 = 61440;
            }
            if (v34 <= 0x1000) {
              unsigned int v34 = 4096;
            }
            unsigned int v35 = v29[6];
            unsigned int v36 = *v31;
            if (v35 >= 0xF000) {
              unsigned int v35 = 61440;
            }
            if (v35 <= 0x1000) {
              unsigned int v35 = 4096;
            }
            if (v36 >= 0xF000) {
              unsigned int v36 = 61440;
            }
            if (v36 <= 0x1000) {
              unsigned int v36 = 4096;
            }
            unsigned int v37 = v29[7];
            unsigned int v38 = v31[1];
            if (v37 >= 0xF000) {
              unsigned int v37 = 61440;
            }
            if (v37 <= 0x1000) {
              unsigned int v37 = 4096;
            }
            unsigned int v39 = -268431360 - v30 + (v30 << 16);
            if (v38 >= 0xF000) {
              unsigned int v38 = 61440;
            }
            unint64_t v40 = (613566757 * (unint64_t)(v39 >> 13)) >> 32;
            unsigned int v41 = -268431360 - v33 + (v33 << 16);
            if (v38 <= 0x1000) {
              unsigned int v38 = 4096;
            }
            _WORD *v28 = (v40
                                + ((613566757 * (unint64_t)((-268431360 - v32 + (v32 << 16)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-268431360 - v35 + (v35 << 16)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-268431360 - v36 + (v36 << 16)) >> 13)) >> 32)
                                + 2) >> 2;
            v28[1] = (((613566757 * (unint64_t)(v41 >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-268431360 - v34 + (v34 << 16)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-268431360 - v37 + (v37 << 16)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-268431360 - v38 + (v38 << 16)) >> 13)) >> 32)
                                  + 2) >> 2;
            v28 += 2;
          }
          unsigned int v42 = *(unsigned __int16 *)(v24 + v26 + 2);
          if (v42 >= 0xEB00) {
            unsigned int v42 = 60160;
          }
          if (v42 <= 0x1000) {
            unsigned int v42 = 4096;
          }
          *(_WORD *)(v23 + 2 * v27++) = (-268431360 - v42 + (v42 << 16)) / 0xDB00;
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v19;
      v23 += v20;
      if (v18) {
        uint64_t v43 = 0;
      }
      else {
        uint64_t v43 = v21;
      }
      v22 += v43;
      ++v18;
      v25 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = v9 - v8;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12) {
    unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  }
  unint64_t v16 = v11 - v10;
  if (v16 >= v14 - v13) {
    unint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = *a4 * v10 + 2 * v8 + *a3 + 6;
    do
    {
      if (v15)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unsigned __int16 *)v23;
        uint64_t v26 = (_WORD *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            unsigned int v27 = *(v25 - 1);
            if (v27 >= 0xF000) {
              unsigned int v27 = 61440;
            }
            if (v27 <= 0x1000) {
              unsigned int v27 = 4096;
            }
            unsigned int v28 = *v25;
            if (v28 >= 0xF000) {
              unsigned int v28 = 61440;
            }
            if (v28 <= 0x1000) {
              unsigned int v28 = 4096;
            }
            *uint64_t v26 = (613566757 * (unint64_t)((-268431360 - v27 + (v27 << 16)) >> 13)) >> 32;
            v26[1] = (613566757 * (unint64_t)((-268431360 - v28 + (v28 << 16)) >> 13)) >> 32;
            v26 += 2;
          }
          unsigned int v29 = *(v25 - 2);
          if (v29 >= 0xEB00) {
            unsigned int v29 = 60160;
          }
          if (v29 <= 0x1000) {
            unsigned int v29 = 4096;
          }
          *(_WORD *)(v22 + 2 * v24++) = (-268431360 - v29 + (v29 << 16)) / 0xDB00;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if (v17) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v20;
      }
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_y416_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 4 * v15;
    uint64_t v21 = v17 + 2 * v15;
    uint64_t v22 = v18 + 2 * v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + 2 * a2[4];
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v26 = (_WORD *)(v20 + v24);
          unsigned int v27 = (_WORD *)(v23 + 2 * v24);
          *(_WORD *)(v21 + 2 * i) = *v27;
          __int16 v28 = v27[3] & 0xFFF0;
          *uint64_t v26 = v27[2] & 0xFFF0;
          v26[1] = v28;
          *(_WORD *)(v22 + 2 * i) = v27[1] & 0xFFF0;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 4 * v14;
    uint64_t v19 = v16 + 2 * v14;
    uint64_t v20 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        uint64_t v22 = (_WORD *)v20;
        unint64_t v23 = v8;
        do
        {
          uint64_t v24 = (_WORD *)(v18 + 2 * v21);
          __int16 v25 = *v22 & 0xFFF0;
          _WORD *v24 = *(v22 - 1) & 0xFFF0;
          v24[1] = v25;
          *(_WORD *)(v19 + v21) = *(v22 - 2) & 0xFFF0;
          v21 += 2;
          v22 += 4;
          --v23;
        }
        while (v23);
      }
      v19 += v11;
      v18 += v12;
      ++v10;
      v20 += v17;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v13 * v14 + 4 * v15;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v15;
    uint64_t v18 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int16 *)v18;
        unint64_t v21 = v8;
        do
        {
          uint64_t v22 = (_WORD *)(v16 + 2 * v19);
          unsigned int v23 = *(v20 - 1);
          if (v23 >= 0xF000) {
            unsigned int v23 = 61440;
          }
          if (v23 <= 0x1000) {
            unsigned int v23 = 4096;
          }
          unsigned int v24 = *v20;
          if (v24 >= 0xF000) {
            unsigned int v24 = 61440;
          }
          if (v24 <= 0x1000) {
            unsigned int v24 = 4096;
          }
          *uint64_t v22 = 16 * ((613566757 * (unint64_t)((-16773120 - v23 + (v23 << 12)) >> 13)) >> 32);
          v22[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v24 + (v24 << 12)) >> 13)) >> 32);
          unsigned int v25 = *(v20 - 2);
          if (v25 >= 0xEB00) {
            unsigned int v25 = 60160;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          *(_WORD *)(v17 + v19) = 16 * ((-16773120 - v25 + (v25 << 12)) / 0xDB00);
          v19 += 2;
          v20 += 4;
          --v21;
        }
        while (v21);
      }
      v17 += v12;
      v16 += v13;
      ++v10;
      v18 += v11;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + 2 * v10;
    uint64_t v22 = v19 + 2 * v10;
    uint64_t v23 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        unsigned int v25 = (_WORD *)v23;
        uint64_t v26 = (_WORD *)v16;
        do
        {
          *(_WORD *)(v21 + 2 * v24) = *(v25 - 6);
          if ((v24 & 1) == 0)
          {
            unsigned int v27 = (unsigned __int16)*(v25 - 3);
            int v28 = (unsigned __int16)v25[1] >> 4;
            *uint64_t v26 = (8 * ((*v25 >> 4) + (*(v25 - 4) >> 4)) + 8) & 0xFFF0;
            v26[1] = (8 * (v28 + (v27 >> 4)) + 8) & 0xFFF0;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 5) & 0xFFF0;
          v25 += 4;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + 2 * v10;
    uint64_t v22 = v19 + 2 * v10;
    uint64_t v23 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        unsigned int v25 = (_WORD *)v23;
        uint64_t v26 = (_WORD *)v16;
        do
        {
          *(_WORD *)(v21 + 2 * v24) = *(v25 - 3);
          if ((v24 & 1) == 0)
          {
            __int16 v27 = *v25 & 0xFFF0;
            *uint64_t v26 = *(v25 - 1) & 0xFFF0;
            v26[1] = v27;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 2) & 0xFFF0;
          v25 += 4;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + 2 * v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (_WORD *)v19;
        uint64_t v22 = (_WORD *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            unsigned int v23 = (unsigned __int16)*(v21 - 3);
            int v24 = (unsigned __int16)v21[1] >> 4;
            *uint64_t v22 = (8 * ((*v21 >> 4) + (*(v21 - 4) >> 4)) + 8) & 0xFFF0;
            v22[1] = (8 * (v24 + (v23 >> 4)) + 8) & 0xFFF0;
            v22 += 2;
          }
          *(_WORD *)(v18 + 2 * v20++) = *(v21 - 5) & 0xFFF0;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + 2 * v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (_WORD *)v19;
        uint64_t v22 = (_WORD *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            __int16 v23 = *v21 & 0xFFF0;
            *uint64_t v22 = *(v21 - 1) & 0xFFF0;
            v22[1] = v23;
            v22 += 2;
          }
          *(_WORD *)(v18 + 2 * v20++) = *(v21 - 2) & 0xFFF0;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + 2 * v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (unsigned __int16 *)v19;
        uint64_t v22 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            unsigned int v23 = *(v21 - 4);
            unsigned int v24 = *v21;
            if (v23 >= 0xF000) {
              unsigned int v23 = 61440;
            }
            if (v23 <= 0x1000) {
              unsigned int v23 = 4096;
            }
            if (v24 >= 0xF000) {
              unsigned int v24 = 61440;
            }
            if (v24 <= 0x1000) {
              unsigned int v24 = 4096;
            }
            unsigned int v25 = *(v21 - 3);
            unsigned int v26 = v21[1];
            if (v25 >= 0xF000) {
              unsigned int v25 = 61440;
            }
            if (v25 <= 0x1000) {
              unsigned int v25 = 4096;
            }
            if (v26 >= 0xF000) {
              unsigned int v26 = 61440;
            }
            if (v26 <= 0x1000) {
              unsigned int v26 = 4096;
            }
            *uint64_t v22 = (8
                  * (((613566757 * (unint64_t)((-16773120 - v24 + (v24 << 12)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-16773120 - v23 + (v23 << 12)) >> 13)) >> 32))
                  + 8) & 0xFFF0;
            v22[1] = (8
                    * (((613566757 * (unint64_t)((-16773120 - v26 + (v26 << 12)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-16773120 - v25 + (v25 << 12)) >> 13)) >> 32))
                    + 8) & 0xFFF0;
            v22 += 2;
          }
          unsigned int v27 = *(v21 - 5);
          if (v27 >= 0xEB00) {
            unsigned int v27 = 60160;
          }
          if (v27 <= 0x1000) {
            unsigned int v27 = 4096;
          }
          *(_WORD *)(v18 + 2 * v20++) = 16 * ((-16773120 - v27 + (v27 << 12)) / 0xDB00);
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + 2 * v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (unsigned __int16 *)v19;
        uint64_t v22 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            unsigned int v23 = *(v21 - 1);
            if (v23 >= 0xF000) {
              unsigned int v23 = 61440;
            }
            if (v23 <= 0x1000) {
              unsigned int v23 = 4096;
            }
            unsigned int v24 = *v21;
            if (v24 >= 0xF000) {
              unsigned int v24 = 61440;
            }
            if (v24 <= 0x1000) {
              unsigned int v24 = 4096;
            }
            *uint64_t v22 = 16 * ((613566757 * (unint64_t)((-16773120 - v23 + (v23 << 12)) >> 13)) >> 32);
            v22[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v24 + (v24 << 12)) >> 13)) >> 32);
            v22 += 2;
          }
          unsigned int v25 = *(v21 - 2);
          if (v25 >= 0xEB00) {
            unsigned int v25 = 60160;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          *(_WORD *)(v18 + 2 * v20++) = 16 * ((-16773120 - v25 + (v25 << 12)) / 0xDB00);
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a4;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v25 = v22 + v22 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        int v28 = (_WORD *)v21;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            int v29 = (*(unsigned __int16 *)(v25 + v26 - 6) >> 4)
                + (*(unsigned __int16 *)(v24 + v26 + 6) >> 4)
                + (*(unsigned __int16 *)(v24 + v26 + 14) >> 4)
                + (*(unsigned __int16 *)(v25 + v26 + 2) >> 4);
            _WORD *v28 = (4
                  * ((*(_WORD *)(v25 + v26 - 8) >> 4)
                   + (*(_WORD *)(v24 + v26 + 4) >> 4)
                   + (*(_WORD *)(v24 + v26 + 12) >> 4)
                   + (*(_WORD *)(v25 + v26) >> 4))
                  + 8) & 0xFFF0;
            v28[1] = (4 * v29 + 8) & 0xFFF0;
            v28 += 2;
          }
          *(_WORD *)(v23 + 2 * v27++) = *(_WORD *)(v24 + v26 + 2) & 0xFFF0;
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v22;
      v23 += v19;
      if (v18) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v20;
      }
      v21 += v30;
      ++v18;
      v25 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v12 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v13 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v13 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v14 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11) {
    unint64_t v14 = v12 - v11;
  }
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    uint64_t v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v19 = *a4;
    uint64_t v20 = *a7 + *a8 * v11 + 2 * v10;
    uint64_t v21 = *a4 * v9 + 2 * v8 + *a3 + 6;
    do
    {
      if (v13)
      {
        uint64_t v22 = 0;
        uint64_t v23 = (_WORD *)v21;
        uint64_t v24 = (_WORD *)v18;
        do
        {
          if (((v22 | v15) & 1) == 0)
          {
            __int16 v25 = *v23 & 0xFFF0;
            _WORD *v24 = *(v23 - 1) & 0xFFF0;
            v24[1] = v25;
            v24 += 2;
          }
          *(_WORD *)(v20 + 2 * v22++) = *(v23 - 2) & 0xFFF0;
          v23 += 4;
        }
        while (v13 != v22);
      }
      v20 += v16;
      if (v15) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = v17;
      }
      v18 += v26;
      ++v15;
      v21 += v19;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v25 = v19 + v19 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        int v28 = (_WORD *)v22;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            int v29 = (unsigned __int16 *)(v24 + v26);
            unsigned int v30 = *(unsigned __int16 *)(v24 + v26 + 4);
            unsigned int v31 = (unsigned __int16 *)(v25 + v26);
            unsigned int v32 = *(unsigned __int16 *)(v25 + v26 - 8);
            if (v30 >= 0xF000) {
              unsigned int v30 = 61440;
            }
            if (v30 <= 0x1000) {
              unsigned int v30 = 4096;
            }
            if (v32 >= 0xF000) {
              unsigned int v32 = 61440;
            }
            if (v32 <= 0x1000) {
              unsigned int v32 = 4096;
            }
            unsigned int v33 = v29[3];
            unsigned int v34 = *(v31 - 3);
            if (v33 >= 0xF000) {
              unsigned int v33 = 61440;
            }
            if (v33 <= 0x1000) {
              unsigned int v33 = 4096;
            }
            if (v34 >= 0xF000) {
              unsigned int v34 = 61440;
            }
            if (v34 <= 0x1000) {
              unsigned int v34 = 4096;
            }
            unsigned int v35 = v29[6];
            unsigned int v36 = *v31;
            if (v35 >= 0xF000) {
              unsigned int v35 = 61440;
            }
            if (v35 <= 0x1000) {
              unsigned int v35 = 4096;
            }
            if (v36 >= 0xF000) {
              unsigned int v36 = 61440;
            }
            if (v36 <= 0x1000) {
              unsigned int v36 = 4096;
            }
            unsigned int v37 = v29[7];
            unsigned int v38 = v31[1];
            if (v37 >= 0xF000) {
              unsigned int v37 = 61440;
            }
            if (v37 <= 0x1000) {
              unsigned int v37 = 4096;
            }
            if (v38 >= 0xF000) {
              unsigned int v38 = 61440;
            }
            unint64_t v39 = (613566757 * (unint64_t)((-16773120 - v30 + (v30 << 12)) >> 13)) >> 32;
            if (v38 <= 0x1000) {
              unsigned int v38 = 4096;
            }
            _WORD *v28 = (4
                  * (((613566757 * (unint64_t)((-16773120 - v32 + (v32 << 12)) >> 13)) >> 32)
                   + v39
                   + ((613566757 * (unint64_t)((-16773120 - v35 + (v35 << 12)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-16773120 - v36 + (v36 << 12)) >> 13)) >> 32))
                  + 8) & 0xFFF0;
            v28[1] = (4
                    * (((613566757 * (unint64_t)((-16773120 - v34 + (v34 << 12)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-16773120 - v33 + (v33 << 12)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-16773120 - v37 + (v37 << 12)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-16773120 - v38 + (v38 << 12)) >> 13)) >> 32))
                    + 8) & 0xFFF0;
            v28 += 2;
          }
          unsigned int v40 = *(unsigned __int16 *)(v24 + v26 + 2);
          if (v40 >= 0xEB00) {
            unsigned int v40 = 60160;
          }
          if (v40 <= 0x1000) {
            unsigned int v40 = 4096;
          }
          *(_WORD *)(v23 + 2 * v27++) = 16 * ((-16773120 - v40 + (v40 << 12)) / 0xDB00);
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v19;
      v23 += v20;
      if (v18) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v21;
      }
      v22 += v41;
      ++v18;
      v25 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = v9 - v8;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12) {
    unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  }
  unint64_t v16 = v11 - v10;
  if (v16 >= v14 - v13) {
    unint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = *a4 * v10 + 2 * v8 + *a3 + 6;
    do
    {
      if (v15)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unsigned __int16 *)v23;
        uint64_t v26 = (_WORD *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            unsigned int v27 = *(v25 - 1);
            if (v27 >= 0xF000) {
              unsigned int v27 = 61440;
            }
            if (v27 <= 0x1000) {
              unsigned int v27 = 4096;
            }
            unsigned int v28 = *v25;
            if (v28 >= 0xF000) {
              unsigned int v28 = 61440;
            }
            if (v28 <= 0x1000) {
              unsigned int v28 = 4096;
            }
            *uint64_t v26 = 16 * ((613566757 * (unint64_t)((-16773120 - v27 + (v27 << 12)) >> 13)) >> 32);
            v26[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v28 + (v28 << 12)) >> 13)) >> 32);
            v26 += 2;
          }
          unsigned int v29 = *(v25 - 2);
          if (v29 >= 0xEB00) {
            unsigned int v29 = 60160;
          }
          if (v29 <= 0x1000) {
            unsigned int v29 = 4096;
          }
          *(_WORD *)(v22 + 2 * v24++) = 16 * ((-16773120 - v29 + (v29 << 12)) / 0xDB00);
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if (v17) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v20;
      }
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_y416_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 4 * v15;
    uint64_t v21 = v17 + 2 * v15;
    uint64_t v22 = v18 + 2 * v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + 2 * a2[4];
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v26 = (_WORD *)(v20 + v24);
          unsigned int v27 = (_WORD *)(v23 + 2 * v24);
          *(_WORD *)(v21 + 2 * i) = *v27;
          __int16 v28 = v27[3] & 0xFFC0;
          *uint64_t v26 = v27[2] & 0xFFC0;
          v26[1] = v28;
          *(_WORD *)(v22 + 2 * i) = v27[1] & 0xFFC0;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 4 * v14;
    uint64_t v19 = v16 + 2 * v14;
    uint64_t v20 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        uint64_t v22 = (_WORD *)v20;
        unint64_t v23 = v8;
        do
        {
          uint64_t v24 = (_WORD *)(v18 + 2 * v21);
          __int16 v25 = *v22 & 0xFFC0;
          _WORD *v24 = *(v22 - 1) & 0xFFC0;
          v24[1] = v25;
          *(_WORD *)(v19 + v21) = *(v22 - 2) & 0xFFC0;
          v21 += 2;
          v22 += 4;
          --v23;
        }
        while (v23);
      }
      v19 += v11;
      v18 += v12;
      ++v10;
      v20 += v17;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v13 * v14 + 4 * v15;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v15;
    uint64_t v18 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        uint64_t v20 = (unsigned __int16 *)v18;
        unint64_t v21 = v8;
        do
        {
          uint64_t v22 = (_WORD *)(v16 + 2 * v19);
          unsigned int v23 = *(v20 - 1);
          if (v23 >= 0xF000) {
            unsigned int v23 = 61440;
          }
          if (v23 <= 0x1000) {
            unsigned int v23 = 4096;
          }
          unsigned int v24 = *v20;
          if (v24 >= 0xF000) {
            unsigned int v24 = 61440;
          }
          if (v24 <= 0x1000) {
            unsigned int v24 = 4096;
          }
          *uint64_t v22 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v23 + (v23 << 10)) >> 13)) >> 32) << 6;
          v22[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v24 + (v24 << 10)) >> 13)) >> 32) << 6;
          unsigned int v25 = *(v20 - 2);
          if (v25 >= 0xEB00) {
            unsigned int v25 = 60160;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          *(_WORD *)(v17 + v19) = (unsigned __int16)((-4190208 - v25 + (v25 << 10)) / 0xDB00) << 6;
          v19 += 2;
          v20 += 4;
          --v21;
        }
        while (v21);
      }
      v17 += v12;
      v16 += v13;
      ++v10;
      v18 += v11;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + 2 * v10;
    uint64_t v22 = v19 + 2 * v10;
    uint64_t v23 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        unsigned int v25 = (_WORD *)v23;
        uint64_t v26 = (_WORD *)v16;
        do
        {
          *(_WORD *)(v21 + 2 * v24) = *(v25 - 6);
          if ((v24 & 1) == 0)
          {
            unsigned int v27 = (unsigned __int16)*(v25 - 3);
            int v28 = (unsigned __int16)v25[1] >> 6;
            *uint64_t v26 = (32 * ((*v25 >> 6) + (*(v25 - 4) >> 6)) + 32) & 0xFFC0;
            v26[1] = (32 * (v28 + (v27 >> 6)) + 32) & 0xFFC0;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 5) & 0xFFC0;
          v25 += 4;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + 2 * v10;
    uint64_t v22 = v19 + 2 * v10;
    uint64_t v23 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        unsigned int v25 = (_WORD *)v23;
        uint64_t v26 = (_WORD *)v16;
        do
        {
          *(_WORD *)(v21 + 2 * v24) = *(v25 - 3);
          if ((v24 & 1) == 0)
          {
            __int16 v27 = *v25 & 0xFFC0;
            *uint64_t v26 = *(v25 - 1) & 0xFFC0;
            v26[1] = v27;
            v26 += 2;
          }
          *(_WORD *)(v22 + 2 * v24++) = *(v25 - 2) & 0xFFC0;
          v25 += 4;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + 2 * v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (_WORD *)v19;
        uint64_t v22 = (_WORD *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            unsigned int v23 = (unsigned __int16)*(v21 - 3);
            int v24 = (unsigned __int16)v21[1] >> 6;
            *uint64_t v22 = (32 * ((*v21 >> 6) + (*(v21 - 4) >> 6)) + 32) & 0xFFC0;
            v22[1] = (32 * (v24 + (v23 >> 6)) + 32) & 0xFFC0;
            v22 += 2;
          }
          *(_WORD *)(v18 + 2 * v20++) = *(v21 - 5) & 0xFFC0;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + 2 * v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (_WORD *)v19;
        uint64_t v22 = (_WORD *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            __int16 v23 = *v21 & 0xFFC0;
            *uint64_t v22 = *(v21 - 1) & 0xFFC0;
            v22[1] = v23;
            v22 += 2;
          }
          *(_WORD *)(v18 + 2 * v20++) = *(v21 - 2) & 0xFFC0;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + 2 * v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (unsigned __int16 *)v19;
        uint64_t v22 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            unsigned int v23 = *(v21 - 4);
            unsigned int v24 = *v21;
            if (v23 >= 0xF000) {
              unsigned int v23 = 61440;
            }
            if (v23 <= 0x1000) {
              unsigned int v23 = 4096;
            }
            if (v24 >= 0xF000) {
              unsigned int v24 = 61440;
            }
            if (v24 <= 0x1000) {
              unsigned int v24 = 4096;
            }
            unsigned int v25 = *(v21 - 3);
            unsigned int v26 = v21[1];
            if (v25 >= 0xF000) {
              unsigned int v25 = 61440;
            }
            if (v25 <= 0x1000) {
              unsigned int v25 = 4096;
            }
            if (v26 >= 0xF000) {
              unsigned int v26 = 61440;
            }
            if (v26 <= 0x1000) {
              unsigned int v26 = 4096;
            }
            *uint64_t v22 = (32
                  * (((613566757 * (unint64_t)((-4190208 - v24 + (v24 << 10)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-4190208 - v23 + (v23 << 10)) >> 13)) >> 32))
                  + 32) & 0xFFC0;
            v22[1] = (32
                    * (((613566757 * (unint64_t)((-4190208 - v26 + (v26 << 10)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-4190208 - v25 + (v25 << 10)) >> 13)) >> 32))
                    + 32) & 0xFFC0;
            v22 += 2;
          }
          unsigned int v27 = *(v21 - 5);
          if (v27 >= 0xEB00) {
            unsigned int v27 = 60160;
          }
          if (v27 <= 0x1000) {
            unsigned int v27 = 4096;
          }
          *(_WORD *)(v18 + 2 * v20++) = (unsigned __int16)((-4190208 - v27 + (v27 << 10)) / 0xDB00) << 6;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + 2 * v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (unsigned __int16 *)v19;
        uint64_t v22 = (_WORD *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            unsigned int v23 = *(v21 - 1);
            if (v23 >= 0xF000) {
              unsigned int v23 = 61440;
            }
            if (v23 <= 0x1000) {
              unsigned int v23 = 4096;
            }
            unsigned int v24 = *v21;
            if (v24 >= 0xF000) {
              unsigned int v24 = 61440;
            }
            if (v24 <= 0x1000) {
              unsigned int v24 = 4096;
            }
            *uint64_t v22 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v23 + (v23 << 10)) >> 13)) >> 32) << 6;
            v22[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v24 + (v24 << 10)) >> 13)) >> 32) << 6;
            v22 += 2;
          }
          unsigned int v25 = *(v21 - 2);
          if (v25 >= 0xEB00) {
            unsigned int v25 = 60160;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          *(_WORD *)(v18 + 2 * v20++) = (unsigned __int16)((-4190208 - v25 + (v25 << 10)) / 0xDB00) << 6;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a4;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v25 = v22 + v22 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        int v28 = (_WORD *)v21;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            int v29 = (*(unsigned __int16 *)(v25 + v26 - 6) >> 6)
                + (*(unsigned __int16 *)(v24 + v26 + 6) >> 6)
                + (*(unsigned __int16 *)(v24 + v26 + 14) >> 6)
                + (*(unsigned __int16 *)(v25 + v26 + 2) >> 6);
            _WORD *v28 = (16
                  * ((*(_WORD *)(v25 + v26 - 8) >> 6)
                   + (*(_WORD *)(v24 + v26 + 4) >> 6)
                   + (*(_WORD *)(v24 + v26 + 12) >> 6)
                   + (*(_WORD *)(v25 + v26) >> 6))
                  + 32) & 0xFFC0;
            v28[1] = (16 * v29 + 32) & 0xFFC0;
            v28 += 2;
          }
          *(_WORD *)(v23 + 2 * v27++) = *(_WORD *)(v24 + v26 + 2) & 0xFFC0;
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v22;
      v23 += v19;
      if (v18) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v20;
      }
      v21 += v30;
      ++v18;
      v25 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v12 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v13 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v13 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v14 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11) {
    unint64_t v14 = v12 - v11;
  }
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    uint64_t v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v19 = *a4;
    uint64_t v20 = *a7 + *a8 * v11 + 2 * v10;
    uint64_t v21 = *a4 * v9 + 2 * v8 + *a3 + 6;
    do
    {
      if (v13)
      {
        uint64_t v22 = 0;
        uint64_t v23 = (_WORD *)v21;
        uint64_t v24 = (_WORD *)v18;
        do
        {
          if (((v22 | v15) & 1) == 0)
          {
            __int16 v25 = *v23 & 0xFFC0;
            _WORD *v24 = *(v23 - 1) & 0xFFC0;
            v24[1] = v25;
            v24 += 2;
          }
          *(_WORD *)(v20 + 2 * v22++) = *(v23 - 2) & 0xFFC0;
          v23 += 4;
        }
        while (v13 != v22);
      }
      v20 += v16;
      if (v15) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = v17;
      }
      v18 += v26;
      ++v15;
      v21 += v19;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v25 = v19 + v19 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        int v28 = (_WORD *)v22;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            int v29 = (unsigned __int16 *)(v24 + v26);
            unsigned int v30 = *(unsigned __int16 *)(v24 + v26 + 4);
            unsigned int v31 = (unsigned __int16 *)(v25 + v26);
            unsigned int v32 = *(unsigned __int16 *)(v25 + v26 - 8);
            if (v30 >= 0xF000) {
              unsigned int v30 = 61440;
            }
            if (v30 <= 0x1000) {
              unsigned int v30 = 4096;
            }
            if (v32 >= 0xF000) {
              unsigned int v32 = 61440;
            }
            if (v32 <= 0x1000) {
              unsigned int v32 = 4096;
            }
            unsigned int v33 = v29[3];
            unsigned int v34 = *(v31 - 3);
            if (v33 >= 0xF000) {
              unsigned int v33 = 61440;
            }
            if (v33 <= 0x1000) {
              unsigned int v33 = 4096;
            }
            if (v34 >= 0xF000) {
              unsigned int v34 = 61440;
            }
            if (v34 <= 0x1000) {
              unsigned int v34 = 4096;
            }
            unsigned int v35 = v29[6];
            unsigned int v36 = *v31;
            if (v35 >= 0xF000) {
              unsigned int v35 = 61440;
            }
            if (v35 <= 0x1000) {
              unsigned int v35 = 4096;
            }
            if (v36 >= 0xF000) {
              unsigned int v36 = 61440;
            }
            if (v36 <= 0x1000) {
              unsigned int v36 = 4096;
            }
            unsigned int v37 = v29[7];
            unsigned int v38 = v31[1];
            if (v37 >= 0xF000) {
              unsigned int v37 = 61440;
            }
            if (v37 <= 0x1000) {
              unsigned int v37 = 4096;
            }
            if (v38 >= 0xF000) {
              unsigned int v38 = 61440;
            }
            unint64_t v39 = (613566757 * (unint64_t)((-4190208 - v30 + (v30 << 10)) >> 13)) >> 32;
            if (v38 <= 0x1000) {
              unsigned int v38 = 4096;
            }
            _WORD *v28 = (16
                  * (((613566757 * (unint64_t)((-4190208 - v32 + (v32 << 10)) >> 13)) >> 32)
                   + v39
                   + ((613566757 * (unint64_t)((-4190208 - v35 + (v35 << 10)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-4190208 - v36 + (v36 << 10)) >> 13)) >> 32))
                  + 32) & 0xFFC0;
            v28[1] = (16
                    * (((613566757 * (unint64_t)((-4190208 - v34 + (v34 << 10)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-4190208 - v33 + (v33 << 10)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-4190208 - v37 + (v37 << 10)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-4190208 - v38 + (v38 << 10)) >> 13)) >> 32))
                    + 32) & 0xFFC0;
            v28 += 2;
          }
          unsigned int v40 = *(unsigned __int16 *)(v24 + v26 + 2);
          if (v40 >= 0xEB00) {
            unsigned int v40 = 60160;
          }
          if (v40 <= 0x1000) {
            unsigned int v40 = 4096;
          }
          *(_WORD *)(v23 + 2 * v27++) = (unsigned __int16)((-4190208 - v40 + (v40 << 10)) / 0xDB00) << 6;
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v19;
      v23 += v20;
      if (v18) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v21;
      }
      v22 += v41;
      ++v18;
      v25 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = v9 - v8;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12) {
    unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  }
  unint64_t v16 = v11 - v10;
  if (v16 >= v14 - v13) {
    unint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = *a4 * v10 + 2 * v8 + *a3 + 6;
    do
    {
      if (v15)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unsigned __int16 *)v23;
        uint64_t v26 = (_WORD *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            unsigned int v27 = *(v25 - 1);
            if (v27 >= 0xF000) {
              unsigned int v27 = 61440;
            }
            if (v27 <= 0x1000) {
              unsigned int v27 = 4096;
            }
            unsigned int v28 = *v25;
            if (v28 >= 0xF000) {
              unsigned int v28 = 61440;
            }
            if (v28 <= 0x1000) {
              unsigned int v28 = 4096;
            }
            *uint64_t v26 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v27 + (v27 << 10)) >> 13)) >> 32) << 6;
            v26[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v28 + (v28 << 10)) >> 13)) >> 32) << 6;
            v26 += 2;
          }
          unsigned int v29 = *(v25 - 2);
          if (v29 >= 0xEB00) {
            unsigned int v29 = 60160;
          }
          if (v29 <= 0x1000) {
            unsigned int v29 = 4096;
          }
          *(_WORD *)(v22 + 2 * v24++) = (unsigned __int16)((-4190208 - v29 + (v29 << 10)) / 0xDB00) << 6;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if (v17) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v20;
      }
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_y416_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 2 * v15;
    uint64_t v21 = v17 + v15;
    uint64_t v22 = v18 + v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + 2 * a2[4];
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          *(unsigned char *)(v21 + i) = *(_WORD *)(v23 + v24);
          unsigned int v27 = (unsigned char *)(v20 + v25);
          char v28 = *(unsigned char *)(v23 + v24 + 7);
          *unsigned int v27 = *(unsigned char *)(v23 + v24 + 5);
          v27[1] = v28;
          *(unsigned char *)(v22 + i) = *(unsigned char *)(v23 + v24 + 3);
          v25 += 2;
          v24 += 8;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 2 * v14;
    uint64_t v19 = v16 + v14;
    uint64_t v20 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = v20;
        do
        {
          uint64_t v24 = (unsigned char *)(v18 + v21);
          char v25 = *(unsigned char *)(v23 + 1);
          unsigned char *v24 = *(unsigned char *)(v23 - 1);
          v24[1] = v25;
          *(unsigned char *)(v19 + v22++) = *(unsigned char *)(v23 - 3);
          v21 += 2;
          v23 += 8;
        }
        while (v8 != v22);
      }
      v19 += v11;
      v18 += v12;
      ++v10;
      v20 += v17;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_y416_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v13 * v14 + 2 * v15;
    uint64_t v17 = *a7 + *a8 * v14 + v15;
    uint64_t v18 = *a4 * a2[5] + 2 * a2[4] + *a3 + 6;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = (unsigned __int16 *)v18;
        do
        {
          uint64_t v22 = (unsigned char *)(v16 + v19);
          unsigned int v23 = *(v21 - 1);
          if (v23 >= 0xF000) {
            unsigned int v23 = 61440;
          }
          if (v23 <= 0x1000) {
            unsigned int v23 = 4096;
          }
          unsigned int v24 = *v21;
          if (v24 >= 0xF000) {
            unsigned int v24 = 61440;
          }
          if (v24 <= 0x1000) {
            unsigned int v24 = 4096;
          }
          *uint64_t v22 = (613566757 * (unint64_t)((-1044480 - v23 + (v23 << 8)) >> 13)) >> 32;
          v22[1] = (613566757 * (unint64_t)((-1044480 - v24 + (v24 << 8)) >> 13)) >> 32;
          unsigned int v25 = *(v21 - 2);
          if (v25 >= 0xEB00) {
            unsigned int v25 = 60160;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          *(unsigned char *)(v17 + v20++) = (-1044480 - v25 + (v25 << 8)) / 0xDB00;
          v19 += 2;
          v21 += 4;
        }
        while (v8 != v20);
      }
      v17 += v12;
      v16 += v13;
      ++v10;
      v18 += v11;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + v10;
    uint64_t v22 = v19 + v10;
    uint64_t v23 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        uint64_t v25 = v23;
        uint64_t v26 = (unsigned char *)v16;
        do
        {
          *(unsigned char *)(v21 + v24) = *(_WORD *)(v25 - 12);
          if ((v24 & 1) == 0)
          {
            unsigned int v27 = (*(unsigned __int8 *)(v25 - 5) + *(unsigned __int8 *)(v25 + 3) + 1) >> 1;
            *uint64_t v26 = (*(unsigned __int8 *)(v25 - 7) + *(unsigned __int8 *)(v25 + 1) + 1) >> 1;
            v26[1] = v27;
            v26 += 2;
          }
          *(unsigned char *)(v22 + v24++) = *(unsigned char *)(v25 - 9);
          v25 += 8;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + v10;
    uint64_t v22 = v19 + v10;
    uint64_t v23 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        uint64_t v25 = v23;
        uint64_t v26 = (unsigned char *)v16;
        do
        {
          *(unsigned char *)(v21 + v24) = *(_WORD *)(v25 - 6);
          if ((v24 & 1) == 0)
          {
            char v27 = *(unsigned char *)(v25 + 1);
            *uint64_t v26 = *(unsigned char *)(v25 - 1);
            v26[1] = v27;
            v26 += 2;
          }
          *(unsigned char *)(v22 + v24++) = *(unsigned char *)(v25 - 3);
          v25 += 8;
        }
        while (v11 != v24);
      }
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
      v23 += v20;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = v19;
        uint64_t v22 = (unsigned char *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            unsigned int v23 = (*(unsigned __int8 *)(v21 - 5) + *(unsigned __int8 *)(v21 + 3) + 1) >> 1;
            *uint64_t v22 = (*(unsigned __int8 *)(v21 - 7) + *(unsigned __int8 *)(v21 + 1) + 1) >> 1;
            v22[1] = v23;
            v22 += 2;
          }
          *(unsigned char *)(v18 + v20++) = *(unsigned char *)(v21 - 9);
          v21 += 8;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = v19;
        uint64_t v22 = (unsigned char *)v16;
        do
        {
          if ((v20 & 1) == 0)
          {
            char v23 = *(unsigned char *)(v21 + 1);
            *uint64_t v22 = *(unsigned char *)(v21 - 1);
            v22[1] = v23;
            v22 += 2;
          }
          *(unsigned char *)(v18 + v20++) = *(unsigned char *)(v21 - 3);
          v21 += 8;
        }
        while (v11 != v20);
      }
      v18 += v13;
      v16 += v14;
      ++v12;
      v19 += v17;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 12;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (unsigned __int16 *)v19;
        uint64_t v22 = (unsigned char *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            unsigned int v23 = *(v21 - 4);
            unsigned int v24 = *v21;
            if (v23 >= 0xF000) {
              unsigned int v23 = 61440;
            }
            if (v23 <= 0x1000) {
              unsigned int v23 = 4096;
            }
            if (v24 >= 0xF000) {
              unsigned int v24 = 61440;
            }
            if (v24 <= 0x1000) {
              unsigned int v24 = 4096;
            }
            unsigned int v25 = *(v21 - 3);
            unsigned int v26 = v21[1];
            if (v25 >= 0xF000) {
              unsigned int v25 = 61440;
            }
            if (v25 <= 0x1000) {
              unsigned int v25 = 4096;
            }
            if (v26 >= 0xF000) {
              unsigned int v26 = 61440;
            }
            if (v26 <= 0x1000) {
              unsigned int v26 = 4096;
            }
            *uint64_t v22 = (((613566757 * (unint64_t)((-1044480 - v23 + (v23 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v24 + (v24 << 8)) >> 13)) >> 32)
                                + 1) >> 1;
            v22[1] = (((613566757 * (unint64_t)((-1044480 - v25 + (v25 << 8)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-1044480 - v26 + (v26 << 8)) >> 13)) >> 32)
                                  + 1) >> 1;
            v22 += 2;
          }
          unsigned int v27 = *(v21 - 5);
          if (v27 >= 0xEB00) {
            unsigned int v27 = 60160;
          }
          if (v27 <= 0x1000) {
            unsigned int v27 = 4096;
          }
          *(unsigned char *)(v18 + v20++) = (-1044480 - v27 + (v27 << 8)) / 0xDB00;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + v10;
    uint64_t v19 = *a4 * *(void *)(a2 + 40) + 2 * v9 + *a3 + 6;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        uint64_t v21 = (unsigned __int16 *)v19;
        uint64_t v22 = (unsigned char *)v17;
        do
        {
          if ((v20 & 1) == 0)
          {
            unsigned int v23 = *(v21 - 1);
            if (v23 >= 0xF000) {
              unsigned int v23 = 61440;
            }
            if (v23 <= 0x1000) {
              unsigned int v23 = 4096;
            }
            unsigned int v24 = *v21;
            if (v24 >= 0xF000) {
              unsigned int v24 = 61440;
            }
            if (v24 <= 0x1000) {
              unsigned int v24 = 4096;
            }
            *uint64_t v22 = (613566757 * (unint64_t)((-1044480 - v23 + (v23 << 8)) >> 13)) >> 32;
            v22[1] = (613566757 * (unint64_t)((-1044480 - v24 + (v24 << 8)) >> 13)) >> 32;
            v22 += 2;
          }
          unsigned int v25 = *(v21 - 2);
          if (v25 >= 0xEB00) {
            unsigned int v25 = 60160;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          *(unsigned char *)(v18 + v20++) = (-1044480 - v25 + (v25 << 8)) / 0xDB00;
          v21 += 4;
        }
        while (v11 != v20);
      }
      v18 += v14;
      v17 += v15;
      ++v12;
      v19 += v13;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v13 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v14 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11) {
    unint64_t v14 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  }
  unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v10;
  if (v15 >= v13 - v12) {
    unint64_t v15 = v13 - v12;
  }
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *a8;
    uint64_t v18 = a8[1];
    uint64_t v19 = a7[1] + ((unint64_t)(v18 * v12) >> 1) + (v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v12;
    uint64_t v22 = *a7 + *a8 * v12;
    uint64_t v23 = *a4;
    uint64_t v24 = v21 + v11;
    uint64_t v25 = v22 + v11;
    uint64_t v26 = *a3 + *a4 * v10 + 2 * v9;
    uint64_t v27 = v23 + v23 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v14)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = (unsigned char *)v19;
        do
        {
          unsigned int v31 = (unsigned char *)(v26 + v28);
          *(unsigned char *)(v24 + v29) = *(_WORD *)(v26 + v28);
          if (((v29 | v16) & 1) == 0)
          {
            unsigned int v32 = (v31[7]
                 + *(unsigned __int8 *)(v27 + v28 - 5)
                 + v31[15]
                 + *(unsigned __int8 *)(v27 + v28 + 3)
                 + 2) >> 2;
            *uint64_t v30 = (v31[5]
                  + *(unsigned __int8 *)(v27 + v28 - 7)
                  + v31[13]
                  + *(unsigned __int8 *)(v27 + v28 + 1)
                  + 2) >> 2;
            v30[1] = v32;
            v30 += 2;
          }
          *(unsigned char *)(v25 + v29++) = v31[3];
          v28 += 8;
        }
        while (v14 != v29);
      }
      v26 += v23;
      v25 += v17;
      if (v16) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v18;
      }
      v19 += v33;
      v24 += v20;
      ++v16;
      v27 += v23;
    }
    while (v16 != v15);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v12 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v13 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v13 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v14 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11) {
    unint64_t v14 = v12 - v11;
  }
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    uint64_t v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v19 = a8[2];
    uint64_t v20 = a7[2] + v19 * v11;
    uint64_t v21 = *a7 + *a8 * v11;
    uint64_t v22 = *a4;
    uint64_t v23 = v20 + v10;
    uint64_t v24 = v21 + v10;
    uint64_t v25 = *a4 * v9 + 2 * v8 + *a3 + 6;
    do
    {
      if (v13)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v25;
        uint64_t v28 = (unsigned char *)v18;
        do
        {
          *(unsigned char *)(v23 + v26) = *(_WORD *)(v27 - 6);
          if (((v26 | v15) & 1) == 0)
          {
            char v29 = *(unsigned char *)(v27 + 1);
            unsigned char *v28 = *(unsigned char *)(v27 - 1);
            v28[1] = v29;
            v28 += 2;
          }
          *(unsigned char *)(v24 + v26++) = *(unsigned char *)(v27 - 3);
          v27 += 8;
        }
        while (v13 != v26);
      }
      v24 += v16;
      if (v15) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v17;
      }
      v18 += v30;
      v23 += v19;
      ++v15;
      v25 += v22;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v14) >> 1) + (v13 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a4;
    uint64_t v23 = *a7 + *a8 * v14 + v13;
    uint64_t v24 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v25 = v22 + v22 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = (unsigned char *)v21;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            unsigned int v29 = (*(unsigned __int8 *)(v24 + v26 + 7)
                 + *(unsigned __int8 *)(v25 + v26 - 5)
                 + *(unsigned __int8 *)(v24 + v26 + 15)
                 + *(unsigned __int8 *)(v25 + v26 + 3)
                 + 2) >> 2;
            unsigned char *v28 = (*(unsigned __int8 *)(v24 + v26 + 5)
                  + *(unsigned __int8 *)(v25 + v26 - 7)
                  + *(unsigned __int8 *)(v24 + v26 + 13)
                  + *(unsigned __int8 *)(v25 + v26 + 1)
                  + 2) >> 2;
            v28[1] = v29;
            v28 += 2;
          }
          *(unsigned char *)(v23 + v27++) = *(unsigned char *)(v24 + v26 + 3);
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v22;
      v23 += v19;
      if (v18) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v20;
      }
      v21 += v30;
      ++v18;
      v25 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v12 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v13 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v13 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v14 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11) {
    unint64_t v14 = v12 - v11;
  }
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    uint64_t v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v19 = *a4;
    uint64_t v20 = *a7 + *a8 * v11 + v10;
    uint64_t v21 = *a4 * v9 + 2 * v8 + *a3 + 6;
    do
    {
      if (v13)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v21;
        uint64_t v24 = (unsigned char *)v18;
        do
        {
          if (((v22 | v15) & 1) == 0)
          {
            char v25 = *(unsigned char *)(v23 + 1);
            unsigned char *v24 = *(unsigned char *)(v23 - 1);
            v24[1] = v25;
            v24 += 2;
          }
          *(unsigned char *)(v20 + v22++) = *(unsigned char *)(v23 - 3);
          v23 += 8;
        }
        while (v13 != v22);
      }
      v20 += v16;
      if (v15) {
        uint64_t v26 = 0;
      }
      else {
        uint64_t v26 = v17;
      }
      v18 += v26;
      ++v15;
      v21 += v19;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v14) >> 1) + (v13 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a7 + *a8 * v14 + v13;
    uint64_t v24 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v25 = v19 + v19 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = (unsigned char *)v22;
        do
        {
          if (((v27 | v18) & 1) == 0)
          {
            unsigned int v29 = (unsigned __int16 *)(v24 + v26);
            unsigned int v30 = *(unsigned __int16 *)(v24 + v26 + 4);
            unsigned int v31 = (unsigned __int16 *)(v25 + v26);
            unsigned int v32 = *(unsigned __int16 *)(v25 + v26 - 8);
            if (v30 >= 0xF000) {
              unsigned int v30 = 61440;
            }
            if (v30 <= 0x1000) {
              unsigned int v30 = 4096;
            }
            if (v32 >= 0xF000) {
              unsigned int v32 = 61440;
            }
            if (v32 <= 0x1000) {
              unsigned int v32 = 4096;
            }
            unsigned int v33 = v29[3];
            unsigned int v34 = *(v31 - 3);
            if (v33 >= 0xF000) {
              unsigned int v33 = 61440;
            }
            if (v33 <= 0x1000) {
              unsigned int v33 = 4096;
            }
            if (v34 >= 0xF000) {
              unsigned int v34 = 61440;
            }
            if (v34 <= 0x1000) {
              unsigned int v34 = 4096;
            }
            unsigned int v35 = v29[6];
            unsigned int v36 = *v31;
            if (v35 >= 0xF000) {
              unsigned int v35 = 61440;
            }
            if (v35 <= 0x1000) {
              unsigned int v35 = 4096;
            }
            if (v36 >= 0xF000) {
              unsigned int v36 = 61440;
            }
            if (v36 <= 0x1000) {
              unsigned int v36 = 4096;
            }
            unsigned int v37 = v29[7];
            unsigned int v38 = v31[1];
            if (v37 >= 0xF000) {
              unsigned int v37 = 61440;
            }
            if (v37 <= 0x1000) {
              unsigned int v37 = 4096;
            }
            unsigned int v39 = -1044480 - v30 + (v30 << 8);
            if (v38 >= 0xF000) {
              unsigned int v38 = 61440;
            }
            unint64_t v40 = (613566757 * (unint64_t)(v39 >> 13)) >> 32;
            unsigned int v41 = -1044480 - v33 + (v33 << 8);
            if (v38 <= 0x1000) {
              unsigned int v38 = 4096;
            }
            unsigned char *v28 = (v40
                                + ((613566757 * (unint64_t)((-1044480 - v32 + (v32 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v35 + (v35 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v36 + (v36 << 8)) >> 13)) >> 32)
                                + 2) >> 2;
            v28[1] = (((613566757 * (unint64_t)(v41 >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-1044480 - v34 + (v34 << 8)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-1044480 - v37 + (v37 << 8)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-1044480 - v38 + (v38 << 8)) >> 13)) >> 32)
                                  + 2) >> 2;
            v28 += 2;
          }
          unsigned int v42 = *(unsigned __int16 *)(v24 + v26 + 2);
          if (v42 >= 0xEB00) {
            unsigned int v42 = 60160;
          }
          if (v42 <= 0x1000) {
            unsigned int v42 = 4096;
          }
          *(unsigned char *)(v23 + v27++) = (-1044480 - v42 + (v42 << 8)) / 0xDB00;
          v26 += 8;
        }
        while (v16 != v27);
      }
      v24 += v19;
      v23 += v20;
      if (v18) {
        uint64_t v43 = 0;
      }
      else {
        uint64_t v43 = v21;
      }
      v22 += v43;
      ++v18;
      v25 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = v9 - v8;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12) {
    unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  }
  unint64_t v16 = v11 - v10;
  if (v16 >= v14 - v13) {
    unint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + (v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a7 + *a8 * v13 + v12;
    uint64_t v23 = *a4 * v10 + 2 * v8 + *a3 + 6;
    do
    {
      if (v15)
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unsigned __int16 *)v23;
        uint64_t v26 = (unsigned char *)v21;
        do
        {
          if (((v24 | v17) & 1) == 0)
          {
            unsigned int v27 = *(v25 - 1);
            if (v27 >= 0xF000) {
              unsigned int v27 = 61440;
            }
            if (v27 <= 0x1000) {
              unsigned int v27 = 4096;
            }
            unsigned int v28 = *v25;
            if (v28 >= 0xF000) {
              unsigned int v28 = 61440;
            }
            if (v28 <= 0x1000) {
              unsigned int v28 = 4096;
            }
            *uint64_t v26 = (613566757 * (unint64_t)((-1044480 - v27 + (v27 << 8)) >> 13)) >> 32;
            v26[1] = (613566757 * (unint64_t)((-1044480 - v28 + (v28 << 8)) >> 13)) >> 32;
            v26 += 2;
          }
          unsigned int v29 = *(v25 - 2);
          if (v29 >= 0xEB00) {
            unsigned int v29 = 60160;
          }
          if (v29 <= 0x1000) {
            unsigned int v29 = 4096;
          }
          *(unsigned char *)(v22 + v24++) = (-1044480 - v29 + (v29 << 8)) / 0xDB00;
          v25 += 4;
        }
        while (v15 != v24);
      }
      v22 += v19;
      if (v17) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v20;
      }
      v21 += v30;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a8[2];
    uint64_t v22 = *a4;
    uint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v14) >> 1) + (v13 >> 1));
    uint64_t v24 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v14) >> 1) + (v13 >> 1));
    unint64_t v25 = *a7 + *a8 * v14 + v13;
    uint64_t v26 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v27 = v22 + v22 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    do
    {
      if (v16)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = v23;
        unsigned int v31 = v24;
        do
        {
          if (((v29 | v18) & 1) == 0)
          {
            unsigned int v32 = (*(unsigned __int8 *)(v26 + v28 + 7)
                 + *(unsigned __int8 *)(v27 + v28 - 5)
                 + *(unsigned __int8 *)(v26 + v28 + 15)
                 + *(unsigned __int8 *)(v27 + v28 + 3)
                 + 2) >> 2;
            *v31++ = (*(unsigned __int8 *)(v26 + v28 + 5)
                    + *(unsigned __int8 *)(v27 + v28 - 7)
                    + *(unsigned __int8 *)(v26 + v28 + 13)
                    + *(unsigned __int8 *)(v27 + v28 + 1)
                    + 2) >> 2;
            *v30++ = v32;
          }
          *(unsigned char *)(v25 + v29++) = *(unsigned char *)(v26 + v28 + 3);
          v28 += 8;
        }
        while (v16 != v29);
      }
      v26 += v22;
      v25 += v19;
      if (v18) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v20;
      }
      v24 += v33;
      if (v18) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v21;
      }
      v23 += v34;
      ++v18;
      v27 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = v9 - v8;
  if (v15 >= ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12) {
    unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  }
  unint64_t v16 = v11 - v10;
  if (v16 >= v14 - v13) {
    unint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a8[2];
    uint64_t v21 = *a4;
    uint64_t v22 = (unsigned char *)(a7[2] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    uint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 >> 1));
    unint64_t v24 = *a7 + *a8 * v13 + v12;
    uint64_t v25 = *a4 * v10 + 2 * v8 + *a3 + 6;
    do
    {
      if (v15)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v25;
        uint64_t v28 = v22;
        uint64_t v29 = v23;
        do
        {
          if (((v26 | v17) & 1) == 0)
          {
            char v30 = *(unsigned char *)(v27 + 1);
            *v29++ = *(unsigned char *)(v27 - 1);
            *v28++ = v30;
          }
          *(unsigned char *)(v24 + v26++) = *(unsigned char *)(v27 - 3);
          v27 += 8;
        }
        while (v15 != v26);
      }
      v24 += v18;
      if (v17) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = v19;
      }
      v23 += v31;
      if (v17) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v20;
      }
      v22 += v32;
      ++v17;
      v25 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_y416_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a8[2];
    uint64_t v22 = *a4;
    uint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v14) >> 1) + (v13 >> 1));
    unint64_t v24 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v14) >> 1) + (v13 >> 1));
    unint64_t v25 = *a7 + *a8 * v14 + v13;
    uint64_t v26 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v27 = v22 + v22 * (v8 + (v8 & 1)) + 2 * v9 + *a3 + 12;
    uint32x4_t v28 = (uint32x4_t)vdupq_n_s32(0xFFF01000);
    uint32x4_t v29 = (uint32x4_t)vdupq_n_s32(0x24924925u);
    do
    {
      if (v16)
      {
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = v23;
        uint64_t v33 = v24;
        do
        {
          if (((v31 | v18) & 1) == 0)
          {
            v34.i16[0] = *(_WORD *)(v26 + v30 + 4);
            v34.i16[1] = *(_WORD *)(v27 + v30 - 8);
            v34.i16[2] = *(_WORD *)(v26 + v30 + 12);
            v34.i16[3] = *(_WORD *)(v27 + v30);
            uint32x4_t v35 = vshrq_n_u32(vmlal_u16(v28, vmax_u16(vmin_u16(v34, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
            v36.i16[0] = *(_WORD *)(v26 + v30 + 6);
            v36.i16[1] = *(_WORD *)(v27 + v30 - 6);
            v36.i16[2] = *(_WORD *)(v26 + v30 + 14);
            v36.i16[3] = *(_WORD *)(v27 + v30 + 2);
            uint32x4_t v37 = vshrq_n_u32(vmlal_u16(v28, vmax_u16(vmin_u16(v36, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
            *v33++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v35.i8, *(uint32x2_t *)v29.i8), (int32x4_t)vmull_high_u32(v35, v29)))+ 2) >> 2;
            *v32++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v37.i8, *(uint32x2_t *)v29.i8), (int32x4_t)vmull_high_u32(v37, v29)))+ 2) >> 2;
          }
          unsigned int v38 = *(unsigned __int16 *)(v26 + v30 + 2);
          if (v38 >= 0xEB00) {
            unsigned int v38 = 60160;
          }
          if (v38 <= 0x1000) {
            unsigned int v38 = 4096;
          }
          *(unsigned char *)(v25 + v31++) = (255 * v38 - 1044480) / 0xDB00;
          v30 += 8;
        }
        while (v16 != v31);
      }
      v26 += v22;
      v25 += v19;
      if (v18) {
        uint64_t v39 = 0;
      }
      else {
        uint64_t v39 = v20;
      }
      v24 += v39;
      if (v18) {
        uint64_t v40 = 0;
      }
      else {
        uint64_t v40 = v21;
      }
      v23 += v40;
      ++v18;
      v27 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_y416_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = v9 - v8;
  if (v15 >= ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12) {
    unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  }
  unint64_t v16 = v11 - v10;
  if (v16 >= v14 - v13) {
    unint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a8[2];
    uint64_t v22 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v13) >> 1) + (v12 >> 1));
    uint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    unint64_t v24 = *a7 + *a8 * v13 + v12;
    uint64_t v25 = *a4 * v10 + 2 * v8 + *a3 + 6;
    do
    {
      if (v15)
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unsigned __int16 *)v25;
        uint32x4_t v28 = v22;
        uint32x4_t v29 = v23;
        do
        {
          if (((v26 | v17) & 1) == 0)
          {
            unsigned int v30 = *(v27 - 1);
            if (v30 >= 0xF000) {
              unsigned int v30 = 61440;
            }
            if (v30 <= 0x1000) {
              unsigned int v30 = 4096;
            }
            unsigned int v31 = *v27;
            if (v31 >= 0xF000) {
              unsigned int v31 = 61440;
            }
            if (v31 <= 0x1000) {
              unsigned int v31 = 4096;
            }
            *v29++ = (613566757 * (unint64_t)((-1044480 - v30 + (v30 << 8)) >> 13)) >> 32;
            *v28++ = (613566757 * (unint64_t)((-1044480 - v31 + (v31 << 8)) >> 13)) >> 32;
          }
          unsigned int v32 = *(v27 - 2);
          if (v32 >= 0xEB00) {
            unsigned int v32 = 60160;
          }
          if (v32 <= 0x1000) {
            unsigned int v32 = 4096;
          }
          *(unsigned char *)(v24 + v26++) = (-1044480 - v32 + (v32 << 8)) / 0xDB00;
          v27 += 4;
        }
        while (v15 != v26);
      }
      v24 += v19;
      if (v17) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v20;
      }
      v23 += v33;
      if (v17) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v21;
      }
      v22 += v34;
      ++v17;
      v25 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  *(_OWORD *)&v54[32] = 0u;
  *(_OWORD *)&v54[16] = 0u;
  *(_OWORD *)unint64_t v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  memset(v47, 0, sizeof(v47));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v48[0] = vdupq_n_s64(1uLL);
  v48[1] = xmmword_193E7D400;
  uint64_t v49 = 1;
  *(_OWORD *)&v54[8] = v48[0];
  *(_OWORD *)&v54[24] = xmmword_193E7D420;
  uint64_t v73 = 0;
  *(void *)&v54[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v48, a8, a7, v47);
  if (v10 >= 2)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    unint64_t v20 = v10 >> 1;
    uint64_t v21 = v9 >> 1;
    uint64_t v22 = (unsigned char *)*((void *)&v47[0] + 1);
    uint64_t v23 = *(unsigned char **)&v47[0];
    uint64_t v24 = (4 * v12) & 0xFFFFFFFFFFFFFF8;
    uint64_t v25 = v13 + v24 + v14 * v11;
    uint64_t v26 = 2 * *a8;
    uint64_t v27 = v14 + v24;
    uint64_t v28 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v21 = 1;
    }
    uint64_t v29 = v13 + v27 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v30 = 0;
        uint64_t v31 = v21;
        unsigned int v32 = v22;
        uint64_t v33 = v23;
        do
        {
          uint64_t v34 = &v33[v18];
          uint32x4_t v35 = (_WORD *)(v29 + v30);
          uint16x4_t v36 = (_WORD *)(v25 + v30);
          unsigned int v37 = *(unsigned __int16 *)(v29 + v30) + *(unsigned __int16 *)(v25 + v30);
          int v38 = v37 >> 1;
          if (v37 >> 1 >= 0xF000) {
            int v38 = 61440;
          }
          unsigned int v39 = v38 + 128;
          unsigned int v40 = (unsigned __int16)v35[2] + (unsigned __int16)v36[2];
          int v41 = v40 >> 1;
          if (v40 >> 1 >= 0xF000) {
            int v41 = 61440;
          }
          unsigned int v42 = v41 + 128;
          v15.i16[0] = v36[1];
          v15.i16[2] = v36[3];
          uint32x2_t v43 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(v15, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xEB000000EB00), (uint32x2_t)0x100000001000), (int32x2_t)0x7F0000007FLL), 8uLL);
          v16.i16[0] = v35[1];
          v16.i16[2] = v35[3];
          v33[1] = v43.i8[4];
          *uint64_t v33 = v43.i8[0];
          v33 += 2;
          int8x8_t v15 = (int8x8_t)vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(v16, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xEB000000EB00), (uint32x2_t)0x100000001000), (int32x2_t)0x7F0000007FLL), 8uLL);
          v34[1] = v15.i8[4];
          *uint64_t v34 = v15.i8[0];
          unsigned int v44 = v39 >> 8;
          if (v37 < 0x2000) {
            LOBYTE(v44) = 16;
          }
          unsigned int v45 = v42 >> 8;
          if (v40 < 0x2000) {
            LOBYTE(v45) = 16;
          }
          *unsigned int v32 = v44;
          v32[1] = v45;
          v32 += 2;
          v30 += 8;
          --v31;
        }
        while (v31);
      }
      v23 += v26;
      v22 += v19;
      v25 += v28;
      ++v17;
      v29 += v28;
    }
    while (v17 != v20);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  *(_OWORD *)&v45[32] = 0u;
  *(_OWORD *)&v45[16] = 0u;
  *(_OWORD *)unsigned int v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  memset(v38, 0, sizeof(v38));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v39[0] = vdupq_n_s64(1uLL);
  v39[1] = xmmword_193E7D400;
  uint64_t v40 = 1;
  *(_OWORD *)&v45[8] = v39[0];
  *(_OWORD *)&v45[24] = xmmword_193E7D420;
  uint64_t v64 = 0;
  *(void *)&v45[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v39, a8, a7, v38);
  if (v10 >= 2)
  {
    uint64_t v18 = 0;
    uint64_t v19 = a8[1];
    uint64_t v20 = v9 >> 1;
    uint64_t v21 = *((void *)&v38[0] + 1);
    uint64_t v22 = *(void *)&v38[0];
    uint64_t v23 = (4 * v12) & 0xFFFFFFFFFFFFFF8;
    uint64_t v24 = v13 + v23 + v14 * v11;
    uint64_t v25 = 2 * *a8;
    uint64_t v26 = v14 + v23;
    uint64_t v27 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v20 = 1;
    }
    uint64_t v28 = v26 + v13 + v14 * v11 + 6;
    uint64_t v29 = *(void *)&v38[0] + *a8;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        do
        {
          unsigned int v32 = (unsigned char *)(v22 + 2 * v31);
          uint64_t v33 = (unsigned char *)(v29 + 2 * v31);
          uint64_t v34 = (unsigned char *)(v21 + 2 * v31);
          v15.i16[0] = *(_WORD *)(v24 + v30 + 2);
          v15.i16[2] = *(_WORD *)(v24 + v30 + 6);
          uint32x2_t v35 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(v15, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xEB000000EB00), (uint32x2_t)0x100000001000), (int32x2_t)0x7F0000007FLL), 8uLL);
          v16.i16[0] = *(_WORD *)(v28 + v30 - 4);
          v16.i16[2] = *(_WORD *)(v28 + v30);
          v17.i16[0] = *(_WORD *)(v24 + v30);
          v17.i16[2] = *(_WORD *)(v24 + v30 + 4);
          v32[1] = v35.i8[4];
          *unsigned int v32 = v35.i8[0];
          uint32x2_t v36 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(v16, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xEB000000EB00), (uint32x2_t)0x100000001000), (int32x2_t)0x7F0000007FLL), 8uLL);
          v33[1] = v36.i8[4];
          *uint64_t v33 = v36.i8[0];
          int8x8_t v15 = (int8x8_t)vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(v17, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xF0000000F000), (uint32x2_t)0x100000001000), (int32x2_t)0x8000000080), 8uLL);
          v34[1] = v15.i8[4];
          *uint64_t v34 = v15.i8[0];
          ++v31;
          v30 += 8;
        }
        while (v20 != v31);
      }
      v22 += v25;
      v21 += v19;
      v24 += v27;
      ++v18;
      v28 += v27;
      v29 += v25;
    }
    while (v18 != v10 >> 1);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_420f(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  *(_OWORD *)&v55[32] = 0u;
  *(_OWORD *)&v55[16] = 0u;
  *(_OWORD *)long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  memset(v48, 0, sizeof(v48));
  unint64_t v9 = a2[3];
  unint64_t v47 = a2[2];
  v49[0] = vdupq_n_s64(1uLL);
  v49[1] = xmmword_193E7D400;
  uint64_t v50 = 1;
  *(_OWORD *)&v55[8] = v49[0];
  *(_OWORD *)&v55[24] = xmmword_193E7D420;
  uint64_t v74 = 0;
  *(void *)&v55[40] = 2;
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v12 = *a3;
  uint64_t v13 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v49, a8, a7, v48);
  if (v9 >= 2)
  {
    uint64_t v14 = 0;
    unint64_t v45 = v9 >> 1;
    uint64_t v46 = a8[1];
    uint64_t v15 = *(void *)&v48[0];
    uint64_t v16 = (4 * v11) & 0xFFFFFFFFFFFFFF8;
    uint64_t v17 = *((void *)&v48[0] + 1);
    uint64_t v18 = v12 + v16 + v13 * v10;
    uint64_t v19 = 2 * *a8;
    uint64_t v20 = 2 * v13;
    if (v47 >> 1 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v47 >> 1;
    }
    uint64_t v44 = v21;
    uint64_t v22 = *a8 + *(void *)&v48[0] + 1;
    uint64_t v23 = v12 + v13 + v16 + v13 * v10;
    do
    {
      if (v47 >= 2)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = v44;
        do
        {
          uint64_t v27 = (unsigned char *)(v15 + v25);
          uint64_t v28 = (unsigned char *)(v22 + v25);
          uint64_t v29 = (unsigned __int16 *)(v23 + v24);
          uint64_t v30 = (unsigned char *)(v17 + v25);
          uint64_t v31 = (unsigned __int16 *)(v18 + v24);
          unsigned int v32 = *(unsigned __int16 *)(v23 + v24) + *(unsigned __int16 *)(v18 + v24);
          if (v32 >> 1 >= 0xF000) {
            int v33 = 61440;
          }
          else {
            int v33 = v32 >> 1;
          }
          unsigned int v34 = v31[1];
          if (v34 >= 0xEB00) {
            unsigned int v34 = 60160;
          }
          if (v34 <= 0x1000) {
            int v35 = 4096;
          }
          else {
            int v35 = v34;
          }
          unsigned int v36 = v29[2] + v31[2];
          int v37 = v36 >> 1;
          if (v36 >> 1 >= 0xF000) {
            int v37 = 61440;
          }
          unsigned int v38 = v31[3];
          if (v38 >= 0xEB00) {
            unsigned int v38 = 60160;
          }
          if (v38 <= 0x1000) {
            unsigned int v38 = 4096;
          }
          unsigned int v39 = v29[1];
          if (v39 >= 0xEB00) {
            unsigned int v39 = 60160;
          }
          if (v39 <= 0x1000) {
            unsigned int v39 = 4096;
          }
          unsigned int v40 = v29[3];
          if (v40 >= 0xEB00) {
            unsigned int v40 = 60160;
          }
          if (v40 <= 0x1000) {
            unsigned int v40 = 4096;
          }
          *uint64_t v27 = (-1016685 - v35 + (v35 << 8)) / 0xDB00u;
          v27[1] = (-1016685 - v38 + (v38 << 8)) / 0xDB00;
          *(v28 - 1) = (-1016685 - v39 + (v39 << 8)) / 0xDB00;
          unsigned char *v28 = (-1016685 - v40 + (v40 << 8)) / 0xDB00;
          unint64_t v41 = (613566757 * (unint64_t)((-1015920 - v33 + (v33 << 8)) >> 13)) >> 32;
          if (v32 < 0x2000) {
            LOBYTE(v41) = 0;
          }
          *uint64_t v30 = v41;
          unint64_t v42 = (613566757 * (unint64_t)((-1015920 - v37 + (v37 << 8)) >> 13)) >> 32;
          if (v36 < 0x2000) {
            LOBYTE(v42) = 0;
          }
          v30[1] = v42;
          v25 += 2;
          v24 += 8;
          --v26;
        }
        while (v26);
      }
      v15 += v19;
      v17 += v46;
      v18 += v20;
      ++v14;
      v22 += v19;
      v23 += v20;
    }
    while (v14 != v45);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_420f(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  *(_OWORD *)&v51[32] = 0u;
  *(_OWORD *)&v51[16] = 0u;
  *(_OWORD *)long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  memset(v44, 0, sizeof(v44));
  unint64_t v9 = a2[3];
  unint64_t v43 = a2[2];
  v45[0] = vdupq_n_s64(1uLL);
  v45[1] = xmmword_193E7D400;
  uint64_t v46 = 1;
  *(_OWORD *)&v51[8] = v45[0];
  *(_OWORD *)&v51[24] = xmmword_193E7D420;
  uint64_t v70 = 0;
  *(void *)&v51[40] = 2;
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v12 = *a3;
  uint64_t v13 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v45, a8, a7, v44);
  if (v9 >= 2)
  {
    uint64_t v14 = 0;
    uint64_t v15 = a8[1];
    unint64_t v16 = v9 >> 1;
    uint64_t v17 = *(void *)&v44[0];
    uint64_t v18 = v43 >> 1;
    uint64_t v19 = (4 * v11) & 0xFFFFFFFFFFFFFF8;
    uint64_t v20 = *((void *)&v44[0] + 1);
    uint64_t v21 = v12 + v19 + v13 * v10;
    uint64_t v22 = 2 * *a8;
    uint64_t v23 = 2 * v13;
    if (v43 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v42 = v18;
    uint64_t v24 = v13 + v19 + v12 + v13 * v10 + 6;
    uint64_t v25 = *a8 + *(void *)&v44[0] + 1;
    do
    {
      if (v43 >= 2)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = v42;
        do
        {
          uint64_t v29 = (unsigned char *)(v17 + v26);
          uint64_t v30 = (unsigned __int16 *)(v21 + v27);
          uint64_t v31 = (unsigned char *)(v25 + v26);
          unsigned int v32 = *(unsigned __int16 *)(v21 + v27);
          if (v32 >= 0xF000) {
            unsigned int v32 = 61440;
          }
          unsigned int v33 = v30[1];
          if (v32 <= 0x1000) {
            unsigned int v32 = 4096;
          }
          if (v33 >= 0xEB00) {
            unsigned int v33 = 60160;
          }
          if (v33 <= 0x1000) {
            unsigned int v33 = 4096;
          }
          unsigned int v34 = v30[2];
          if (v34 >= 0xF000) {
            unsigned int v34 = 61440;
          }
          if (v34 <= 0x1000) {
            unsigned int v34 = 4096;
          }
          unsigned int v35 = v30[3];
          if (v35 >= 0xEB00) {
            unsigned int v35 = 60160;
          }
          if (v35 <= 0x1000) {
            unsigned int v35 = 4096;
          }
          unsigned int v36 = *(unsigned __int16 *)(v24 + v27 - 4);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          unsigned int v37 = *(unsigned __int16 *)(v24 + v27);
          if (v37 >= 0xEB00) {
            unsigned int v37 = 60160;
          }
          unsigned int v38 = (unsigned char *)(v20 + v26);
          unsigned char *v29 = (-1016685 - v33 + (v33 << 8)) / 0xDB00;
          uint64_t v39 = 19611723 * ((-1016685 - v35 + (v35 << 8)) >> 8);
          if (v37 <= 0x1000) {
            int v40 = 4096;
          }
          else {
            int v40 = v37;
          }
          v29[1] = BYTE4(v39);
          *(v31 - 1) = (-1016685 - v36 + (v36 << 8)) / 0xDB00;
          unsigned char *v31 = (-1016685 - v40 + (v40 << 8)) / 0xDB00u;
          *unsigned int v38 = (613566757 * (unint64_t)((-1015920 - v32 + (v32 << 8)) >> 13)) >> 32;
          v38[1] = (613566757 * (unint64_t)((-1015920 - v34 + (v34 << 8)) >> 13)) >> 32;
          v27 += 8;
          v26 += 2;
          --v28;
        }
        while (v28);
      }
      v17 += v22;
      v20 += v15;
      v21 += v23;
      ++v14;
      v24 += v23;
      v25 += v22;
    }
    while (v14 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_x420(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  *(_OWORD *)&v53[32] = 0u;
  *(_OWORD *)&v53[16] = 0u;
  *(_OWORD *)long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  memset(v46, 0, sizeof(v46));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v47[0] = vdupq_n_s64(1uLL);
  v47[1] = xmmword_193E7D4E0;
  uint64_t v48 = 1;
  *(_OWORD *)&v53[8] = v47[0];
  *(_OWORD *)&v53[24] = xmmword_193E7D4F0;
  uint64_t v72 = 0;
  *(void *)&v53[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v47, a8, a7, v46);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = v9 >> 1;
    uint64_t v19 = (4 * v12) & 0xFFFFFFFFFFFFFF8;
    uint64_t v20 = v13 + v19 + v14 * v11;
    uint64_t v21 = *((void *)&v46[0] + 1);
    uint64_t v22 = *(void *)&v46[0];
    uint64_t v23 = 2 * *a8;
    uint64_t v24 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v25 = *a8 + *(void *)&v46[0] + 2;
    uint64_t v26 = v13 + v14 + v19 + v14 * v11;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = v18;
        do
        {
          uint64_t v30 = (_WORD *)(v22 + v28);
          uint64_t v31 = (_WORD *)(v25 + v28);
          unsigned int v32 = (unsigned __int16 *)(v26 + v27);
          unsigned int v33 = (__int16 *)(v21 + v28);
          unsigned int v34 = (unsigned __int16 *)(v20 + v27);
          unsigned int v35 = *(unsigned __int16 *)(v26 + v27) + *(unsigned __int16 *)(v20 + v27);
          unsigned int v36 = v35 >> 1;
          if (v35 >> 1 >= 0xF000) {
            LOWORD(v36) = -4096;
          }
          unsigned int v37 = v34[1];
          if (v37 >= 0xEB00) {
            unsigned int v37 = 60160;
          }
          if (v37 <= 0x1000) {
            LOWORD(v37) = 4096;
          }
          unsigned int v38 = v32[2] + v34[2];
          unsigned int v39 = v38 >> 1;
          if (v38 >> 1 >= 0xF000) {
            LOWORD(v39) = -4096;
          }
          unsigned int v40 = v34[3];
          if (v40 >= 0xEB00) {
            unsigned int v40 = 60160;
          }
          if (v40 <= 0x1000) {
            LOWORD(v40) = 4096;
          }
          unsigned int v41 = v32[1];
          if (v41 >= 0xEB00) {
            unsigned int v41 = 60160;
          }
          if (v41 <= 0x1000) {
            LOWORD(v41) = 4096;
          }
          unsigned int v42 = v32[3];
          if (v42 >= 0xEB00) {
            unsigned int v42 = 60160;
          }
          if (v42 <= 0x1000) {
            LOWORD(v42) = 4096;
          }
          *uint64_t v30 = (v37 + 32) & 0xFFC0;
          v30[1] = (v40 + 32) & 0xFFC0;
          *(v31 - 1) = (v41 + 32) & 0xFFC0;
          _WORD *v31 = (v42 + 32) & 0xFFC0;
          __int16 v43 = v36 & 0xFFC0;
          if (v35 < 0x2000) {
            __int16 v43 = 4096;
          }
          *unsigned int v33 = v43;
          __int16 v44 = v39 & 0xFFC0;
          if (v38 < 0x2000) {
            __int16 v44 = 4096;
          }
          v33[1] = v44;
          v28 += 4;
          v27 += 8;
          --v29;
        }
        while (v29);
      }
      v22 += v23;
      v21 += v16;
      v20 += v24;
      ++v15;
      v25 += v23;
      v26 += v24;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_x420(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  *(_OWORD *)&v48[32] = 0u;
  *(_OWORD *)&v48[16] = 0u;
  *(_OWORD *)uint64_t v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  memset(v41, 0, sizeof(v41));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v42[0] = vdupq_n_s64(1uLL);
  v42[1] = xmmword_193E7D4E0;
  uint64_t v43 = 1;
  *(_OWORD *)&v48[8] = v42[0];
  *(_OWORD *)&v48[24] = xmmword_193E7D4F0;
  uint64_t v67 = 0;
  *(void *)&v48[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v42, a8, a7, v41);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = v9 >> 1;
    uint64_t v19 = *((void *)&v41[0] + 1);
    uint64_t v20 = *(void *)&v41[0];
    uint64_t v21 = (4 * v12) & 0xFFFFFFFFFFFFFF8;
    uint64_t v22 = v13 + v21 + v14 * v11;
    uint64_t v23 = 2 * *a8;
    uint64_t v24 = 2 * v14;
    if (v9 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v25 = v14 + v21 + v13 + v14 * v11 + 6;
    uint64_t v26 = *a8 + *(void *)&v41[0] + 2;
    do
    {
      if (v9 >= 2)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = v18;
        do
        {
          uint64_t v30 = (_WORD *)(v20 + v27);
          uint64_t v31 = (_WORD *)(v26 + v27);
          unsigned int v32 = (_WORD *)(v19 + v27);
          unsigned int v33 = (unsigned __int16 *)(v22 + v28);
          unsigned int v34 = *(unsigned __int16 *)(v22 + v28);
          if (v34 >= 0xF000) {
            unsigned int v34 = 61440;
          }
          if (v34 <= 0x1000) {
            LOWORD(v34) = 4096;
          }
          unsigned int v35 = v33[1];
          if (v35 >= 0xEB00) {
            unsigned int v35 = 60160;
          }
          if (v35 <= 0x1000) {
            LOWORD(v35) = 4096;
          }
          unsigned int v36 = v33[2];
          if (v36 >= 0xF000) {
            unsigned int v36 = 61440;
          }
          if (v36 <= 0x1000) {
            LOWORD(v36) = 4096;
          }
          unsigned int v37 = v33[3];
          if (v37 >= 0xEB00) {
            unsigned int v37 = 60160;
          }
          if (v37 <= 0x1000) {
            LOWORD(v37) = 4096;
          }
          unsigned int v38 = *(unsigned __int16 *)(v25 + v28 - 4);
          if (v38 >= 0xEB00) {
            unsigned int v38 = 60160;
          }
          if (v38 <= 0x1000) {
            LOWORD(v38) = 4096;
          }
          unsigned int v39 = *(unsigned __int16 *)(v25 + v28);
          if (v39 >= 0xEB00) {
            unsigned int v39 = 60160;
          }
          if (v39 <= 0x1000) {
            LOWORD(v39) = 4096;
          }
          *uint64_t v30 = (v35 + 32) & 0xFFC0;
          v30[1] = (v37 + 32) & 0xFFC0;
          *(v31 - 1) = (v38 + 32) & 0xFFC0;
          _WORD *v31 = (v39 + 32) & 0xFFC0;
          *unsigned int v32 = v34 & 0xFFC0;
          v32[1] = v36 & 0xFFC0;
          v28 += 8;
          v27 += 4;
          --v29;
        }
        while (v29);
      }
      v20 += v23;
      v19 += v16;
      v22 += v24;
      ++v15;
      v25 += v24;
      v26 += v23;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_xf20(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  *(_OWORD *)&v56[32] = 0u;
  *(_OWORD *)&v56[16] = 0u;
  *(_OWORD *)long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  memset(v49, 0, sizeof(v49));
  unint64_t v9 = a2[3];
  unint64_t v48 = a2[2];
  v50[0] = vdupq_n_s64(1uLL);
  v50[1] = xmmword_193E7D4E0;
  uint64_t v51 = 1;
  *(_OWORD *)&v56[8] = v50[0];
  *(_OWORD *)&v56[24] = xmmword_193E7D4F0;
  uint64_t v75 = 0;
  *(void *)&v56[40] = 2;
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v12 = *a3;
  uint64_t v13 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v50, a8, a7, v49);
  if (v9 >= 2)
  {
    uint64_t v14 = 0;
    unint64_t v46 = v9 >> 1;
    uint64_t v47 = a8[1];
    uint64_t v15 = *(void *)&v49[0];
    uint64_t v16 = (4 * v11) & 0xFFFFFFFFFFFFFF8;
    uint64_t v17 = *((void *)&v49[0] + 1);
    uint64_t v18 = v12 + v16 + v13 * v10;
    uint64_t v19 = 2 * *a8;
    uint64_t v20 = 2 * v13;
    if (v48 >> 1 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v48 >> 1;
    }
    uint64_t v45 = v21;
    uint64_t v22 = *a8 + *(void *)&v49[0] + 2;
    uint64_t v23 = v12 + v13 + v16 + v13 * v10;
    do
    {
      if (v48 >= 2)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = v45;
        do
        {
          uint64_t v27 = (_WORD *)(v15 + v25);
          uint64_t v28 = (_WORD *)(v22 + v25);
          uint64_t v29 = (unsigned __int16 *)(v23 + v24);
          uint64_t v30 = (_WORD *)(v17 + v25);
          uint64_t v31 = (unsigned __int16 *)(v18 + v24);
          unsigned int v32 = *(unsigned __int16 *)(v23 + v24) + *(unsigned __int16 *)(v18 + v24);
          if (v32 >> 1 >= 0xF000) {
            int v33 = 61440;
          }
          else {
            int v33 = v32 >> 1;
          }
          if (v31[1] >= 0xEB00u) {
            unsigned int v34 = 60160;
          }
          else {
            unsigned int v34 = v31[1];
          }
          unsigned int v35 = v29[2] + v31[2];
          if (v34 <= 0x1000) {
            int v36 = 4096;
          }
          else {
            int v36 = v34;
          }
          if (v35 >> 1 >= 0xF000) {
            int v37 = 61440;
          }
          else {
            int v37 = v35 >> 1;
          }
          unsigned int v38 = v31[3];
          if (v38 >= 0xEB00) {
            unsigned int v38 = 60160;
          }
          if (v38 <= 0x1000) {
            unsigned int v38 = 4096;
          }
          unsigned int v39 = v29[1];
          if (v39 >= 0xEB00) {
            unsigned int v39 = 60160;
          }
          if (v39 <= 0x1000) {
            unsigned int v39 = 4096;
          }
          unsigned int v40 = v29[3];
          if (v40 >= 0xEB00) {
            unsigned int v40 = 60160;
          }
          unsigned int v41 = 65472 * v36 - 268173312;
          if (v40 <= 0x1000) {
            unsigned int v40 = 4096;
          }
          *uint64_t v27 = (v41 / 0xDB00 + 32) & 0xFFC0;
          v27[1] = ((65472 * v38 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          *(v28 - 1) = ((65472 * v39 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          __int16 v42 = (((613566757 * (unint64_t)((65472 * v33 - 268173312) >> 13)) >> 32) + 32) & 0xFFC0;
          if (v32 < 0x2000) {
            __int16 v42 = 0;
          }
          _WORD *v28 = ((65472 * v40 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          __int16 v43 = (((613566757 * (unint64_t)((65472 * v37 - 268173312) >> 13)) >> 32) + 32) & 0xFFC0;
          *uint64_t v30 = v42;
          if (v35 < 0x2000) {
            __int16 v43 = 0;
          }
          v30[1] = v43;
          v25 += 4;
          v24 += 8;
          --v26;
        }
        while (v26);
      }
      v15 += v19;
      v17 += v47;
      v18 += v20;
      ++v14;
      v22 += v19;
      v23 += v20;
    }
    while (v14 != v46);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_xf20(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  *(_OWORD *)&v49[32] = 0u;
  *(_OWORD *)&v49[16] = 0u;
  *(_OWORD *)long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  memset(v42, 0, sizeof(v42));
  unint64_t v9 = a2[3];
  unint64_t v41 = a2[2];
  v43[0] = vdupq_n_s64(1uLL);
  v43[1] = xmmword_193E7D4E0;
  uint64_t v44 = 1;
  *(_OWORD *)&v49[8] = v43[0];
  *(_OWORD *)&v49[24] = xmmword_193E7D4F0;
  uint64_t v68 = 0;
  *(void *)&v49[40] = 2;
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v12 = *a3;
  uint64_t v13 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v43, a8, a7, v42);
  if (v9 >= 2)
  {
    uint64_t v14 = 0;
    uint64_t v15 = a8[1];
    unint64_t v16 = v9 >> 1;
    uint64_t v17 = *(void *)&v42[0];
    uint64_t v18 = v41 >> 1;
    uint64_t v19 = (4 * v11) & 0xFFFFFFFFFFFFFF8;
    uint64_t v20 = *((void *)&v42[0] + 1);
    uint64_t v21 = v12 + v19 + v13 * v10;
    uint64_t v22 = 2 * *a8;
    uint64_t v23 = 2 * v13;
    if (v41 >> 1 <= 1) {
      uint64_t v18 = 1;
    }
    uint64_t v40 = v18;
    uint64_t v24 = v13 + v19 + v12 + v13 * v10 + 6;
    uint64_t v25 = *a8 + *(void *)&v42[0] + 2;
    do
    {
      if (v41 >= 2)
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = v40;
        do
        {
          uint64_t v29 = (_WORD *)(v17 + v26);
          uint64_t v30 = (_WORD *)(v25 + v26);
          uint64_t v31 = (unsigned __int16 *)(v21 + v27);
          unsigned int v32 = *(unsigned __int16 *)(v21 + v27);
          if (v32 >= 0xF000) {
            unsigned int v32 = 61440;
          }
          if (v32 <= 0x1000) {
            unsigned int v32 = 4096;
          }
          unsigned int v33 = v31[1];
          if (v33 >= 0xEB00) {
            unsigned int v33 = 60160;
          }
          unsigned int v34 = v31[2];
          if (v33 <= 0x1000) {
            unsigned int v33 = 4096;
          }
          if (v34 >= 0xF000) {
            unsigned int v34 = 61440;
          }
          if (v34 <= 0x1000) {
            unsigned int v34 = 4096;
          }
          unsigned int v35 = v31[3];
          if (v35 >= 0xEB00) {
            unsigned int v35 = 60160;
          }
          if (v35 <= 0x1000) {
            unsigned int v35 = 4096;
          }
          unsigned int v36 = *(unsigned __int16 *)(v24 + v27 - 4);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          unsigned int v37 = *(unsigned __int16 *)(v24 + v27);
          unsigned int v38 = (_WORD *)(v20 + v26);
          if (v37 >= 0xEB00) {
            unsigned int v37 = 60160;
          }
          if (v37 <= 0x1000) {
            unsigned int v37 = 4096;
          }
          _WORD *v29 = ((65472 * v33 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          v29[1] = ((65472 * v35 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          *(v30 - 1) = ((65472 * v36 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          *uint64_t v30 = ((65472 * v37 - 268173312) / 0xDB00 + 32) & 0xFFC0;
          *unsigned int v38 = (((613566757 * (unint64_t)((65472 * v32 - 268173312) >> 13)) >> 32) + 32) & 0xFFC0;
          v38[1] = (((613566757 * (unint64_t)((65472 * v34 - 268173312) >> 13)) >> 32) + 32) & 0xFFC0;
          v27 += 8;
          v26 += 4;
          --v28;
        }
        while (v28);
      }
      v17 += v22;
      v20 += v15;
      v21 += v23;
      ++v14;
      v24 += v23;
      v25 += v22;
    }
    while (v14 != v16);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_v216_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp16, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v216_32BGRA;
  *a11 = vt_VImage_Cleanup_v216_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v216_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp16, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v216_32ARGB;
  *a11 = vt_VImage_Cleanup_v216_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v216_l64r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp16, kvImageARGB16U, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v216_l64r;
  *a11 = vt_VImage_Cleanup_v216_l64r;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v216_RGhA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp16, kvImageARGB16U, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v216_RGhA;
  *a11 = vt_VImage_Cleanup_v216_RGhA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_v216_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 4 * v15;
    uint64_t v21 = v17 + 2 * v15;
    uint64_t v22 = v18 + 2 * v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v26 = (_WORD *)(v20 + v24);
          uint64_t v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          __int16 v28 = *(_WORD *)(v23 + v24);
          __int16 v29 = *(_WORD *)(v23 + v24 + 4);
          *uint64_t v26 = v28;
          v26[1] = v29;
          v26[2] = v28;
          v26[3] = v29;
          __int16 v30 = *(_WORD *)(v23 + v24 + 6);
          *uint64_t v27 = *(_WORD *)(v23 + v24 + 2);
          v27[1] = v30;
          v24 += 8;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 4 * v14;
    uint64_t v19 = v16 + 2 * v14;
    uint64_t v20 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v23 = (_WORD *)(v18 + v21);
          uint64_t v24 = (_WORD *)(v19 + 2 * i);
          __int16 v25 = *(_WORD *)(v20 + v21);
          __int16 v26 = *(_WORD *)(v20 + v21 + 4);
          *uint64_t v23 = v25;
          v23[1] = v26;
          v23[2] = v25;
          v23[3] = v26;
          __int16 v27 = *(_WORD *)(v20 + v21 + 6);
          _WORD *v24 = *(_WORD *)(v20 + v21 + 2);
          v24[1] = v27;
          v21 += 8;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v13 * v14 + 4 * v15;
    uint64_t v17 = *a7 + *a8 * v14 + 2 * v15;
    uint64_t v18 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v21 = (unsigned __int16 *)(v18 + v19);
          unsigned int v22 = *(unsigned __int16 *)(v18 + v19);
          if (v22 >= 0xF000) {
            unsigned int v22 = 61440;
          }
          if (v22 <= 0x1000) {
            unsigned int v22 = 4096;
          }
          unsigned int v23 = v21[2];
          if (v23 >= 0xF000) {
            unsigned int v23 = 61440;
          }
          uint64_t v24 = (_WORD *)(v16 + v19);
          if (v23 <= 0x1000) {
            unsigned int v23 = 4096;
          }
          unint64_t v25 = (613566757 * (unint64_t)((-268431360 - v22 + (v22 << 16)) >> 13)) >> 32;
          unint64_t v26 = (613566757 * (unint64_t)((-268431360 - v23 + (v23 << 16)) >> 13)) >> 32;
          _WORD *v24 = v25;
          v24[1] = v26;
          v24[2] = v25;
          v24[3] = v26;
          unsigned int v27 = v21[1];
          if (v27 >= 0xEB00) {
            unsigned int v27 = 60160;
          }
          if (v27 <= 0x1000) {
            unsigned int v27 = 4096;
          }
          unsigned int v28 = v21[3];
          __int16 v29 = (_WORD *)(v17 + 2 * i);
          if (v28 >= 0xEB00) {
            unsigned int v28 = 60160;
          }
          if (v28 <= 0x1000) {
            unsigned int v28 = 4096;
          }
          _WORD *v29 = (-268431360 - v27 + (v27 << 16)) / 0xDB00;
          v29[1] = (-268431360 - v28 + (v28 << 16)) / 0xDB00;
          v19 += 8;
        }
      }
      v18 += v11;
      v17 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + 2 * v10;
    uint64_t v22 = v19 + 2 * v10;
    uint64_t v23 = *a3 + *a4 * *(void *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unint64_t v26 = (_WORD *)(v16 + 2 * i);
          unsigned int v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          __int16 v28 = *(_WORD *)(v23 + v24 + 4);
          *unint64_t v26 = *(_WORD *)(v23 + v24);
          v26[1] = v28;
          __int16 v29 = *(_WORD *)(v23 + v24 + 6);
          *unsigned int v27 = *(_WORD *)(v23 + v24 + 2);
          v27[1] = v29;
          v24 += 8;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + 2 * v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + 2 * i);
          uint64_t v23 = (_WORD *)(v18 + 2 * i);
          __int16 v24 = *(_WORD *)(v19 + v20 + 4);
          *uint64_t v22 = *(_WORD *)(v19 + v20);
          v22[1] = v24;
          __int16 v25 = *(_WORD *)(v19 + v20 + 6);
          *uint64_t v23 = *(_WORD *)(v19 + v20 + 2);
          v23[1] = v25;
          v20 += 8;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + 2 * v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + 2 * v9;
    uint64_t v20 = a7[1] + v15 * v16 + v17;
    do
    {
      if (v11)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v23 = (unsigned __int16 *)(v19 + v21);
          __int16 v24 = (_WORD *)(v20 + 2 * i);
          unsigned int v25 = *(unsigned __int16 *)(v19 + v21);
          if (v25 >= 0xF000) {
            unsigned int v25 = 61440;
          }
          unsigned int v26 = v23[2];
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          if (v26 >= 0xF000) {
            unsigned int v26 = 61440;
          }
          if (v26 <= 0x1000) {
            unsigned int v26 = 4096;
          }
          _WORD *v24 = (613566757 * (unint64_t)((-268431360 - v25 + (v25 << 16)) >> 13)) >> 32;
          v24[1] = (613566757 * (unint64_t)((-268431360 - v26 + (v26 << 16)) >> 13)) >> 32;
          unsigned int v27 = v23[1];
          if (v27 >= 0xEB00) {
            unsigned int v27 = 60160;
          }
          if (v27 <= 0x1000) {
            unsigned int v27 = 4096;
          }
          unsigned int v28 = v23[3];
          __int16 v29 = (_WORD *)(v18 + 2 * i);
          if (v28 >= 0xEB00) {
            unsigned int v28 = 60160;
          }
          if (v28 <= 0x1000) {
            unsigned int v28 = 4096;
          }
          _WORD *v29 = (-268431360 - v27 + (v27 << 16)) / 0xDB00;
          v29[1] = (-268431360 - v28 + (v28 << 16)) / 0xDB00;
          v21 += 8;
        }
      }
      v19 += v13;
      v18 += v14;
      v20 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a4;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v25 = *a3 + v22 + v22 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        unsigned int v28 = (_WORD *)v21;
        do
        {
          if ((v18 & 1) == 0)
          {
            unsigned int v29 = (*(unsigned __int16 *)(v24 + v26 + 4) + *(unsigned __int16 *)(v25 + v26 + 4) + 1) >> 1;
            _WORD *v28 = (*(unsigned __int16 *)(v24 + v26) + *(unsigned __int16 *)(v25 + v26) + 1) >> 1;
            v28[1] = v29;
            v28 += 2;
          }
          __int16 v30 = (_WORD *)(v23 + 2 * v27);
          __int16 v31 = *(_WORD *)(v24 + v26 + 6);
          *__int16 v30 = *(_WORD *)(v24 + v26 + 2);
          v30[1] = v31;
          v27 += 2;
          v26 += 8;
        }
        while (v27 < v16);
      }
      v24 += v22;
      v23 += v19;
      if (v18) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v20;
      }
      v21 += v32;
      ++v18;
      v25 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v12 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v13 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v13 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v14 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11) {
    unint64_t v14 = v12 - v11;
  }
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    uint64_t v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v19 = *a4;
    uint64_t v20 = *a7 + *a8 * v11 + 2 * v10;
    uint64_t v21 = *a4 * v9 + 2 * v8 + *a3 + 4;
    do
    {
      if (v13)
      {
        unint64_t v22 = 0;
        uint64_t v23 = (__int16 *)v21;
        uint64_t v24 = (_WORD *)v18;
        do
        {
          if ((v15 & 1) == 0)
          {
            __int16 v25 = *v23;
            _WORD *v24 = *(v23 - 2);
            v24[1] = v25;
            v24 += 2;
          }
          uint64_t v26 = (_WORD *)(v20 + 2 * v22);
          __int16 v27 = v23[1];
          *uint64_t v26 = *(v23 - 1);
          v26[1] = v27;
          v22 += 2;
          v23 += 4;
        }
        while (v22 < v13);
      }
      v20 += v16;
      if (v15) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = v17;
      }
      v18 += v28;
      ++v15;
      v21 += v19;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v25 = *a3 + v19 + v19 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        uint64_t v28 = (_WORD *)v22;
        do
        {
          if ((v18 & 1) == 0)
          {
            unsigned int v29 = *(unsigned __int16 *)(v24 + v26);
            unsigned int v30 = *(unsigned __int16 *)(v25 + v26);
            if (v29 >= 0xF000) {
              unsigned int v29 = 61440;
            }
            if (v29 <= 0x1000) {
              unsigned int v29 = 4096;
            }
            if (v30 >= 0xF000) {
              unsigned int v30 = 61440;
            }
            if (v30 <= 0x1000) {
              unsigned int v30 = 4096;
            }
            unsigned int v31 = *(unsigned __int16 *)(v24 + v26 + 4);
            unsigned int v32 = *(unsigned __int16 *)(v25 + v26 + 4);
            if (v31 >= 0xF000) {
              unsigned int v31 = 61440;
            }
            if (v31 <= 0x1000) {
              unsigned int v31 = 4096;
            }
            if (v32 >= 0xF000) {
              unsigned int v32 = 61440;
            }
            if (v32 <= 0x1000) {
              unsigned int v32 = 4096;
            }
            _WORD *v28 = (((613566757 * (unint64_t)((-268431360 - v29 + (v29 << 16)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-268431360 - v30 + (v30 << 16)) >> 13)) >> 32)
                                + 1) >> 1;
            v28[1] = (((613566757 * (unint64_t)((-268431360 - v31 + (v31 << 16)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-268431360 - v32 + (v32 << 16)) >> 13)) >> 32)
                                  + 1) >> 1;
            v28 += 2;
          }
          unsigned int v33 = (_WORD *)(v23 + 2 * v27);
          unsigned int v34 = *(unsigned __int16 *)(v24 + v26 + 2);
          if (v34 >= 0xEB00) {
            unsigned int v34 = 60160;
          }
          if (v34 <= 0x1000) {
            unsigned int v34 = 4096;
          }
          unsigned int v35 = *(unsigned __int16 *)(v24 + v26 + 6);
          if (v35 >= 0xEB00) {
            unsigned int v35 = 60160;
          }
          if (v35 <= 0x1000) {
            unsigned int v35 = 4096;
          }
          *unsigned int v33 = (-268431360 - v34 + (v34 << 16)) / 0xDB00;
          v33[1] = (-268431360 - v35 + (v35 << 16)) / 0xDB00;
          v27 += 2;
          v26 += 8;
        }
        while (v27 < v16);
      }
      v24 += v19;
      v23 += v20;
      if (v18) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = v21;
      }
      v22 += v36;
      ++v18;
      v25 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = v9 - v8;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12) {
    unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  }
  unint64_t v16 = v11 - v10;
  if (v16 >= v14 - v13) {
    unint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = *a4 * v10 + 2 * v8 + *a3 + 4;
    do
    {
      if (v15)
      {
        unint64_t v24 = 0;
        uint64_t v25 = (unsigned __int16 *)v23;
        uint64_t v26 = (_WORD *)v21;
        do
        {
          if ((v17 & 1) == 0)
          {
            unsigned int v27 = *(v25 - 2);
            if (v27 >= 0xF000) {
              unsigned int v27 = 61440;
            }
            if (v27 <= 0x1000) {
              unsigned int v27 = 4096;
            }
            unsigned int v28 = *v25;
            if (v28 >= 0xF000) {
              unsigned int v28 = 61440;
            }
            if (v28 <= 0x1000) {
              unsigned int v28 = 4096;
            }
            *uint64_t v26 = (613566757 * (unint64_t)((-268431360 - v27 + (v27 << 16)) >> 13)) >> 32;
            v26[1] = (613566757 * (unint64_t)((-268431360 - v28 + (v28 << 16)) >> 13)) >> 32;
            v26 += 2;
          }
          unsigned int v29 = (_WORD *)(v22 + 2 * v24);
          unsigned int v30 = *(v25 - 1);
          if (v30 >= 0xEB00) {
            unsigned int v30 = 60160;
          }
          if (v30 <= 0x1000) {
            unsigned int v30 = 4096;
          }
          unsigned int v31 = v25[1];
          if (v31 >= 0xEB00) {
            unsigned int v31 = 60160;
          }
          if (v31 <= 0x1000) {
            unsigned int v31 = 4096;
          }
          _WORD *v29 = (-268431360 - v30 + (v30 << 16)) / 0xDB00;
          v29[1] = (-268431360 - v31 + (v31 << 16)) / 0xDB00;
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v19;
      if (v17) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v20;
      }
      v21 += v32;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_v216_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 4 * v15;
    uint64_t v21 = v17 + 2 * v15;
    uint64_t v22 = v18 + 2 * v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v26 = (_WORD *)(v20 + v24);
          unsigned int v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          __int16 v28 = *(_WORD *)(v23 + v24) & 0xFFF0;
          __int16 v29 = *(_WORD *)(v23 + v24 + 4) & 0xFFF0;
          *uint64_t v26 = v28;
          v26[1] = v29;
          v26[2] = v28;
          v26[3] = v29;
          __int16 v30 = *(_WORD *)(v23 + v24 + 6) & 0xFFF0;
          *unsigned int v27 = *(_WORD *)(v23 + v24 + 2) & 0xFFF0;
          v27[1] = v30;
          v24 += 8;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 4 * v14;
    uint64_t v19 = v16 + 2 * v14;
    uint64_t v20 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v23 = (_WORD *)(v18 + v21);
          uint64_t v24 = (_WORD *)(v19 + 2 * i);
          __int16 v25 = *(_WORD *)(v20 + v21) & 0xFFF0;
          __int16 v26 = *(_WORD *)(v20 + v21 + 4) & 0xFFF0;
          *uint64_t v23 = v25;
          v23[1] = v26;
          v23[2] = v25;
          v23[3] = v26;
          __int16 v27 = *(_WORD *)(v20 + v21 + 6) & 0xFFF0;
          _WORD *v24 = *(_WORD *)(v20 + v21 + 2) & 0xFFF0;
          v24[1] = v27;
          v21 += 8;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_tf44(double a1, double a2, double a3, double a4, double a5, double a6, int8x8_t a7, uint64_t a8, void *a9, void *a10, uint64_t *a11, uint64_t a12, void *a13, void *a14, uint64_t *a15)
{
  unint64_t v15 = a9[2] + a9[4] - (a9[4] & 0xFFFFFFFELL) + ((a9[2] + a9[4]) & 1);
  if (v15 >= a13[2]) {
    unint64_t v15 = a13[2];
  }
  if (a9[3] >= a13[3]) {
    uint64_t v16 = a13[3];
  }
  else {
    uint64_t v16 = a9[3];
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a11;
    uint64_t v19 = *a15;
    uint64_t v20 = a15[1];
    uint64_t v22 = a13[4];
    uint64_t v21 = a13[5];
    uint64_t v23 = a14[1] + v20 * v21 + 4 * v22;
    uint64_t v24 = *a14 + *a15 * v21 + 2 * v22;
    uint64_t v25 = *a10 + *a11 * a9[5] + 2 * (a9[4] & 0xFFFFFFFELL);
    int32x2_t v26 = vdup_n_s32(0xFF001000);
    uint32x2_t v27 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      if (v15)
      {
        uint64_t v28 = 0;
        for (unint64_t i = 0; i < v15; i += 2)
        {
          __int16 v30 = (_WORD *)(v24 + 2 * i);
          a7.i16[0] = *(_WORD *)(v25 + v28);
          a7.i16[2] = *(_WORD *)(v25 + v28 + 4);
          int16x4_t v31 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v26, (int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(a7, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xF0000000F000), (uint32x2_t)0x100000001000), (int32x2_t)0xF0000000FLL), 0xDuLL), v27), 0x20uLL), 4uLL);
          a7 = (int8x8_t)vuzp1_s16(v31, v31);
          *(double *)(v23 + v28) = *(double *)&a7;
          unsigned int v32 = *(unsigned __int16 *)(v25 + v28 + 2);
          if (v32 >= 0xEB00) {
            unsigned int v32 = 60160;
          }
          if (v32 <= 0x1000) {
            unsigned int v32 = 4096;
          }
          unsigned int v33 = *(unsigned __int16 *)(v25 + v28 + 6);
          if (v33 >= 0xEB00) {
            unsigned int v33 = 60160;
          }
          if (v33 <= 0x1000) {
            unsigned int v33 = 4096;
          }
          *__int16 v30 = 16 * ((-16773120 - v32 + (v32 << 12)) / 0xDB00);
          v30[1] = 16 * ((-16773120 - v33 + (v33 << 12)) / 0xDB00);
          v28 += 8;
        }
      }
      v25 += v18;
      v24 += v19;
      v23 += v20;
      ++v17;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_v216_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + 2 * v10;
    uint64_t v22 = v19 + 2 * v10;
    uint64_t v23 = *a3 + *a4 * *(void *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          int32x2_t v26 = (_WORD *)(v16 + 2 * i);
          uint32x2_t v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          __int16 v28 = *(_WORD *)(v23 + v24 + 4) & 0xFFF0;
          *int32x2_t v26 = *(_WORD *)(v23 + v24) & 0xFFF0;
          v26[1] = v28;
          LOWORD(v26) = *(_WORD *)(v23 + v24 + 6) & 0xFFF0;
          *uint32x2_t v27 = *(_WORD *)(v23 + v24 + 2) & 0xFFF0;
          v27[1] = (_WORD)v26;
          v24 += 8;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + 2 * v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + 2 * i);
          uint64_t v23 = (_WORD *)(v18 + 2 * i);
          __int16 v24 = *(_WORD *)(v19 + v20 + 4) & 0xFFF0;
          *uint64_t v22 = *(_WORD *)(v19 + v20) & 0xFFF0;
          v22[1] = v24;
          __int16 v25 = *(_WORD *)(v19 + v20 + 6) & 0xFFF0;
          *uint64_t v23 = *(_WORD *)(v19 + v20 + 2) & 0xFFF0;
          v23[1] = v25;
          v20 += 8;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + 2 * v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + 2 * v9;
    uint64_t v20 = a7[1] + v15 * v16 + v17;
    do
    {
      if (v11)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v23 = (unsigned __int16 *)(v19 + v21);
          unsigned int v24 = *(unsigned __int16 *)(v19 + v21);
          if (v24 >= 0xF000) {
            unsigned int v24 = 61440;
          }
          if (v24 <= 0x1000) {
            unsigned int v24 = 4096;
          }
          unsigned int v25 = v23[2];
          if (v25 >= 0xF000) {
            unsigned int v25 = 61440;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          int32x2_t v26 = (_WORD *)(v20 + 2 * i);
          *int32x2_t v26 = 16 * ((613566757 * (unint64_t)((-16773120 - v24 + (v24 << 12)) >> 13)) >> 32);
          v26[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v25 + (v25 << 12)) >> 13)) >> 32);
          unsigned int v27 = v23[1];
          if (v27 >= 0xEB00) {
            unsigned int v27 = 60160;
          }
          if (v27 <= 0x1000) {
            unsigned int v27 = 4096;
          }
          unsigned int v28 = v23[3];
          if (v28 >= 0xEB00) {
            unsigned int v28 = 60160;
          }
          __int16 v29 = (_WORD *)(v18 + 2 * i);
          if (v28 <= 0x1000) {
            unsigned int v28 = 4096;
          }
          _WORD *v29 = 16 * ((-16773120 - v27 + (v27 << 12)) / 0xDB00);
          v29[1] = 16 * ((-16773120 - v28 + (v28 << 12)) / 0xDB00);
          v21 += 8;
        }
      }
      v19 += v13;
      v18 += v14;
      v20 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a4;
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v25 = *a3 + v22 + v22 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        unsigned int v28 = (_WORD *)v21;
        do
        {
          if ((v18 & 1) == 0)
          {
            int v29 = (*(unsigned __int16 *)(v25 + v26 + 4) >> 4) + (*(unsigned __int16 *)(v24 + v26 + 4) >> 4);
            _WORD *v28 = (8 * ((*(_WORD *)(v25 + v26) >> 4) + (*(_WORD *)(v24 + v26) >> 4)) + 8) & 0xFFF0;
            v28[1] = (8 * v29 + 8) & 0xFFF0;
            v28 += 2;
          }
          __int16 v30 = (_WORD *)(v23 + 2 * v27);
          __int16 v31 = *(_WORD *)(v24 + v26 + 6) & 0xFFF0;
          *__int16 v30 = *(_WORD *)(v24 + v26 + 2) & 0xFFF0;
          v30[1] = v31;
          v27 += 2;
          v26 += 8;
        }
        while (v27 < v16);
      }
      v24 += v22;
      v23 += v19;
      if (v18) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v20;
      }
      v21 += v32;
      ++v18;
      v25 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v12 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v13 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v13 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v14 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11) {
    unint64_t v14 = v12 - v11;
  }
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    uint64_t v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v19 = *a4;
    uint64_t v20 = *a7 + *a8 * v11 + 2 * v10;
    uint64_t v21 = *a4 * v9 + 2 * v8 + *a3 + 4;
    do
    {
      if (v13)
      {
        unint64_t v22 = 0;
        uint64_t v23 = (_WORD *)v21;
        uint64_t v24 = (_WORD *)v18;
        do
        {
          if ((v15 & 1) == 0)
          {
            __int16 v25 = *v23 & 0xFFF0;
            _WORD *v24 = *(v23 - 2) & 0xFFF0;
            v24[1] = v25;
            v24 += 2;
          }
          uint64_t v26 = (_WORD *)(v20 + 2 * v22);
          __int16 v27 = v23[1] & 0xFFF0;
          *uint64_t v26 = *(v23 - 1) & 0xFFF0;
          v26[1] = v27;
          v22 += 2;
          v23 += 4;
        }
        while (v22 < v13);
      }
      v20 += v16;
      if (v15) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = v17;
      }
      v18 += v28;
      ++v15;
      v21 += v19;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a7[1] + ((unint64_t)(v21 * v14) >> 1) + 2 * (v13 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v23 = *a7 + *a8 * v14 + 2 * v13;
    uint64_t v24 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v25 = *a3 + v19 + v19 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v16)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        uint64_t v28 = (_WORD *)v22;
        do
        {
          if ((v18 & 1) == 0)
          {
            unsigned int v29 = *(unsigned __int16 *)(v24 + v26);
            unsigned int v30 = *(unsigned __int16 *)(v25 + v26);
            if (v29 >= 0xF000) {
              unsigned int v29 = 61440;
            }
            if (v29 <= 0x1000) {
              unsigned int v29 = 4096;
            }
            if (v30 >= 0xF000) {
              unsigned int v30 = 61440;
            }
            if (v30 <= 0x1000) {
              unsigned int v30 = 4096;
            }
            unsigned int v31 = *(unsigned __int16 *)(v24 + v26 + 4);
            unsigned int v32 = *(unsigned __int16 *)(v25 + v26 + 4);
            if (v31 >= 0xF000) {
              unsigned int v31 = 61440;
            }
            if (v31 <= 0x1000) {
              unsigned int v31 = 4096;
            }
            if (v32 >= 0xF000) {
              unsigned int v32 = 61440;
            }
            if (v32 <= 0x1000) {
              unsigned int v32 = 4096;
            }
            _WORD *v28 = (8
                  * (((613566757 * (unint64_t)((-16773120 - v30 + (v30 << 12)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-16773120 - v29 + (v29 << 12)) >> 13)) >> 32))
                  + 8) & 0xFFF0;
            v28[1] = (8
                    * (((613566757 * (unint64_t)((-16773120 - v32 + (v32 << 12)) >> 13)) >> 32)
                     + ((613566757 * (unint64_t)((-16773120 - v31 + (v31 << 12)) >> 13)) >> 32))
                    + 8) & 0xFFF0;
            v28 += 2;
          }
          unsigned int v33 = (_WORD *)(v23 + 2 * v27);
          unsigned int v34 = *(unsigned __int16 *)(v24 + v26 + 2);
          if (v34 >= 0xEB00) {
            unsigned int v34 = 60160;
          }
          if (v34 <= 0x1000) {
            unsigned int v34 = 4096;
          }
          unsigned int v35 = *(unsigned __int16 *)(v24 + v26 + 6);
          if (v35 >= 0xEB00) {
            unsigned int v35 = 60160;
          }
          if (v35 <= 0x1000) {
            unsigned int v35 = 4096;
          }
          *unsigned int v33 = 16 * ((-16773120 - v34 + (v34 << 12)) / 0xDB00);
          v33[1] = 16 * ((-16773120 - v35 + (v35 << 12)) / 0xDB00);
          v27 += 2;
          v26 += 8;
        }
        while (v27 < v16);
      }
      v24 += v19;
      v23 += v20;
      if (v18) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = v21;
      }
      v22 += v36;
      ++v18;
      v25 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  uint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = v9 - v8;
  if (v15 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12) {
    unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  }
  unint64_t v16 = v11 - v10;
  if (v16 >= v14 - v13) {
    unint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a7[1] + ((unint64_t)(v20 * v13) >> 1) + 2 * (v12 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v22 = *a7 + *a8 * v13 + 2 * v12;
    uint64_t v23 = *a4 * v10 + 2 * v8 + *a3 + 4;
    do
    {
      if (v15)
      {
        unint64_t v24 = 0;
        uint64_t v25 = (unsigned __int16 *)v23;
        uint64_t v26 = (_WORD *)v21;
        do
        {
          if ((v17 & 1) == 0)
          {
            unsigned int v27 = *(v25 - 2);
            if (v27 >= 0xF000) {
              unsigned int v27 = 61440;
            }
            if (v27 <= 0x1000) {
              unsigned int v27 = 4096;
            }
            unsigned int v28 = *v25;
            if (v28 >= 0xF000) {
              unsigned int v28 = 61440;
            }
            if (v28 <= 0x1000) {
              unsigned int v28 = 4096;
            }
            *uint64_t v26 = 16 * ((613566757 * (unint64_t)((-16773120 - v27 + (v27 << 12)) >> 13)) >> 32);
            v26[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v28 + (v28 << 12)) >> 13)) >> 32);
            v26 += 2;
          }
          unsigned int v29 = (_WORD *)(v22 + 2 * v24);
          unsigned int v30 = *(v25 - 1);
          if (v30 >= 0xEB00) {
            unsigned int v30 = 60160;
          }
          if (v30 <= 0x1000) {
            unsigned int v30 = 4096;
          }
          unsigned int v31 = v25[1];
          if (v31 >= 0xEB00) {
            unsigned int v31 = 60160;
          }
          if (v31 <= 0x1000) {
            unsigned int v31 = 4096;
          }
          _WORD *v29 = 16 * ((-16773120 - v30 + (v30 << 12)) / 0xDB00);
          v29[1] = 16 * ((-16773120 - v31 + (v31 << 12)) / 0xDB00);
          v24 += 2;
          v25 += 4;
        }
        while (v24 < v15);
      }
      v22 += v19;
      if (v17) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v20;
      }
      v21 += v32;
      ++v17;
      v23 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_v216_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 4 * v15;
    uint64_t v21 = v17 + 2 * v15;
    uint64_t v22 = v18 + 2 * v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v26 = (_WORD *)(v20 + v24);
          unsigned int v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          __int16 v28 = *(_WORD *)(v23 + v24) & 0xFFC0;
          __int16 v29 = *(_WORD *)(v23 + v24 + 4) & 0xFFC0;
          *uint64_t v26 = v28;
          v26[1] = v29;
          v26[2] = v28;
          v26[3] = v29;
          __int16 v30 = *(_WORD *)(v23 + v24 + 6) & 0xFFC0;
          *unsigned int v27 = *(_WORD *)(v23 + v24 + 2) & 0xFFC0;
          v27[1] = v30;
          v24 += 8;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 4 * v14;
    uint64_t v19 = v16 + 2 * v14;
    uint64_t v20 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v23 = (_WORD *)(v18 + v21);
          uint64_t v24 = (_WORD *)(v19 + 2 * i);
          __int16 v25 = *(_WORD *)(v20 + v21) & 0xFFC0;
          __int16 v26 = *(_WORD *)(v20 + v21 + 4) & 0xFFC0;
          *uint64_t v23 = v25;
          v23[1] = v26;
          v23[2] = v25;
          v23[3] = v26;
          __int16 v27 = *(_WORD *)(v20 + v21 + 6) & 0xFFC0;
          _WORD *v24 = *(_WORD *)(v20 + v21 + 2) & 0xFFC0;
          v24[1] = v27;
          v21 += 8;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_xf44(double a1, double a2, double a3, double a4, double a5, double a6, int8x8_t a7, uint64_t a8, void *a9, void *a10, uint64_t *a11, uint64_t a12, void *a13, void *a14, uint64_t *a15)
{
  unint64_t v15 = a9[2] + a9[4] - (a9[4] & 0xFFFFFFFELL) + ((a9[2] + a9[4]) & 1);
  if (v15 >= a13[2]) {
    unint64_t v15 = a13[2];
  }
  if (a9[3] >= a13[3]) {
    uint64_t v16 = a13[3];
  }
  else {
    uint64_t v16 = a9[3];
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a11;
    uint64_t v19 = *a15;
    uint64_t v20 = a15[1];
    uint64_t v22 = a13[4];
    uint64_t v21 = a13[5];
    uint64_t v23 = a14[1] + v20 * v21 + 4 * v22;
    uint64_t v24 = *a14 + *a15 * v21 + 2 * v22;
    uint64_t v25 = *a10 + *a11 * a9[5] + 2 * (a9[4] & 0xFFFFFFFELL);
    int32x2_t v26 = vdup_n_s32(0xFFC01000);
    uint32x2_t v27 = (uint32x2_t)vdup_n_s32(0x24924925u);
    do
    {
      if (v15)
      {
        uint64_t v28 = 0;
        for (unint64_t i = 0; i < v15; i += 2)
        {
          __int16 v30 = (_WORD *)(v24 + 2 * i);
          a7.i16[0] = *(_WORD *)(v25 + v28);
          a7.i16[2] = *(_WORD *)(v25 + v28 + 4);
          int16x4_t v31 = (int16x4_t)vshl_n_s32(vshrn_n_s64((int64x2_t)vmull_u32(vshr_n_u32((uint32x2_t)vmla_s32(v26, (int32x2_t)vmax_u32(vmin_u32((uint32x2_t)vand_s8(a7, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xF0000000F000), (uint32x2_t)0x100000001000), (int32x2_t)0x300000003), 0xDuLL), v27), 0x20uLL), 6uLL);
          a7 = (int8x8_t)vuzp1_s16(v31, v31);
          *(double *)(v23 + v28) = *(double *)&a7;
          unsigned int v32 = *(unsigned __int16 *)(v25 + v28 + 2);
          if (v32 >= 0xEB00) {
            unsigned int v32 = 60160;
          }
          if (v32 <= 0x1000) {
            unsigned int v32 = 4096;
          }
          unsigned int v33 = *(unsigned __int16 *)(v25 + v28 + 6);
          if (v33 >= 0xEB00) {
            unsigned int v33 = 60160;
          }
          if (v33 <= 0x1000) {
            unsigned int v33 = 4096;
          }
          *__int16 v30 = (unsigned __int16)((-4190208 - v32 + (v32 << 10)) / 0xDB00) << 6;
          v30[1] = (unsigned __int16)((-4190208 - v33 + (v33 << 10)) / 0xDB00) << 6;
          v28 += 8;
        }
      }
      v25 += v18;
      v24 += v19;
      v23 += v20;
      ++v17;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_v216_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + 2 * v10;
    uint64_t v22 = v19 + 2 * v10;
    uint64_t v23 = *a3 + *a4 * *(void *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          int32x2_t v26 = (_WORD *)(v16 + 2 * i);
          uint32x2_t v27 = (_WORD *)(v22 + 2 * i);
          *(_DWORD *)(v21 + 2 * i) = -1;
          __int16 v28 = *(_WORD *)(v23 + v24 + 4) & 0xFFC0;
          *int32x2_t v26 = *(_WORD *)(v23 + v24) & 0xFFC0;
          v26[1] = v28;
          LOWORD(v26) = *(_WORD *)(v23 + v24 + 6) & 0xFFC0;
          *uint32x2_t v27 = *(_WORD *)(v23 + v24 + 2) & 0xFFC0;
          v27[1] = (_WORD)v26;
          v24 += 8;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + 2 * v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + 2 * i);
          uint64_t v23 = (_WORD *)(v18 + 2 * i);
          __int16 v24 = *(_WORD *)(v19 + v20 + 4) & 0xFFC0;
          *uint64_t v22 = *(_WORD *)(v19 + v20) & 0xFFC0;
          v22[1] = v24;
          __int16 v25 = *(_WORD *)(v19 + v20 + 6) & 0xFFC0;
          *uint64_t v23 = *(_WORD *)(v19 + v20 + 2) & 0xFFC0;
          v23[1] = v25;
          v20 += 8;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = 2 * (v10 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a7 + *a8 * v16 + 2 * v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + 2 * v9;
    uint64_t v20 = a7[1] + v15 * v16 + v17;
    do
    {
      if (v11)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v23 = (unsigned __int16 *)(v19 + v21);
          unsigned int v24 = *(unsigned __int16 *)(v19 + v21);
          if (v24 >= 0xF000) {
            unsigned int v24 = 61440;
          }
          if (v24 <= 0x1000) {
            unsigned int v24 = 4096;
          }
          unsigned int v25 = v23[2];
          if (v25 >= 0xF000) {
            unsigned int v25 = 61440;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          int32x2_t v26 = (_WORD *)(v20 + 2 * i);
          *int32x2_t v26 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v24 + (v24 << 10)) >> 13)) >> 32) << 6;
          v26[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v25 + (v25 << 10)) >> 13)) >> 32) << 6;
          unsigned int v27 = v23[1];
          if (v27 >= 0xEB00) {
            unsigned int v27 = 60160;
          }
          if (v27 <= 0x1000) {
            unsigned int v27 = 4096;
          }
          unsigned int v28 = v23[3];
          if (v28 >= 0xEB00) {
            unsigned int v28 = 60160;
          }
          __int16 v29 = (_WORD *)(v18 + 2 * i);
          if (v28 <= 0x1000) {
            unsigned int v28 = 4096;
          }
          _WORD *v29 = (unsigned __int16)((-4190208 - v27 + (v27 << 10)) / 0xDB00) << 6;
          v29[1] = (unsigned __int16)((-4190208 - v28 + (v28 << 10)) / 0xDB00) << 6;
          v21 += 8;
        }
      }
      v19 += v13;
      v18 += v14;
      v20 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a8[1];
    uint64_t v11 = a8[2];
    uint64_t v13 = *a8;
    uint64_t v15 = a6[4];
    uint64_t v14 = a6[5];
    uint64_t v16 = a7[1] + v12 * v14;
    uint64_t v17 = a7[2] + v11 * v14;
    uint64_t v18 = *a7 + *a8 * v14;
    uint64_t v19 = *a4;
    uint64_t v20 = v16 + 2 * v15;
    uint64_t v21 = v17 + v15;
    uint64_t v22 = v18 + v15;
    uint64_t v23 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          int32x2_t v26 = (unsigned char *)(v20 + v24);
          unsigned int v27 = (unsigned char *)(v22 + i);
          unsigned int v28 = (unsigned char *)(v23 + 2 * v24);
          *(_WORD *)(v21 + i) = -1;
          char v29 = v28[1];
          char v30 = v28[5];
          *int32x2_t v26 = v29;
          v26[1] = v30;
          v26[2] = v29;
          v26[3] = v30;
          LOBYTE(v26) = v28[3];
          LOBYTE(v28) = v28[7];
          *unsigned int v27 = (_BYTE)v26;
          v27[1] = (_BYTE)v28;
          v24 += 4;
        }
      }
      v23 += v19;
      v22 += v13;
      v20 += v12;
      v21 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a8;
    uint64_t v12 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v13 = a6[5];
    uint64_t v15 = a7[1] + v12 * v13;
    uint64_t v16 = *a7 + *a8 * v13;
    uint64_t v17 = *a4;
    uint64_t v18 = v15 + 2 * v14;
    uint64_t v19 = v16 + v14;
    uint64_t v20 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    do
    {
      if (v8)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v23 = (unsigned char *)(v18 + v21);
          uint64_t v24 = (unsigned char *)(v19 + i);
          unsigned int v25 = (unsigned char *)(v20 + 2 * v21);
          char v26 = v25[1];
          char v27 = v25[5];
          *uint64_t v23 = v26;
          v23[1] = v27;
          v23[2] = v26;
          v23[3] = v27;
          LOBYTE(v23) = v25[3];
          LOBYTE(v25) = v25[7];
          unsigned char *v24 = (_BYTE)v23;
          v24[1] = (_BYTE)v25;
          v21 += 4;
        }
      }
      v20 += v17;
      v19 += v11;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2] + a2[4] - (a2[4] & 0xFFFFFFFELL) + ((a2[2] + a2[4]) & 1);
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (a2[3] >= a6[3]) {
    uint64_t v9 = a6[3];
  }
  else {
    uint64_t v9 = a2[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = *a8;
    uint64_t v13 = a8[1];
    uint64_t v14 = a6[4];
    uint64_t v15 = a6[5];
    uint64_t v16 = a7[1] + v13 * v15 + 2 * v14;
    uint64_t v17 = *a3 + *a4 * a2[5] + 2 * (a2[4] & 0xFFFFFFFELL);
    uint64_t v18 = *a7 + *a8 * v15 + v14;
    do
    {
      if (v8)
      {
        uint64_t v19 = 0;
        for (unint64_t i = 0; i < v8; i += 2)
        {
          uint64_t v21 = (unsigned __int16 *)(v17 + 2 * v19);
          unsigned int v22 = *v21;
          if (v22 >= 0xF000) {
            unsigned int v22 = 61440;
          }
          if (v22 <= 0x1000) {
            unsigned int v22 = 4096;
          }
          unsigned int v23 = v21[2];
          if (v23 >= 0xF000) {
            unsigned int v23 = 61440;
          }
          uint64_t v24 = (unsigned char *)(v16 + v19);
          if (v23 <= 0x1000) {
            unsigned int v23 = 4096;
          }
          unint64_t v25 = (613566757 * (unint64_t)((-1044480 - v22 + (v22 << 8)) >> 13)) >> 32;
          unint64_t v26 = (613566757 * (unint64_t)((-1044480 - v23 + (v23 << 8)) >> 13)) >> 32;
          unsigned char *v24 = v25;
          v24[1] = v26;
          v24[2] = v25;
          v24[3] = v26;
          unsigned int v27 = v21[1];
          if (v27 >= 0xEB00) {
            unsigned int v27 = 60160;
          }
          if (v27 <= 0x1000) {
            unsigned int v27 = 4096;
          }
          unsigned int v28 = v21[3];
          char v29 = (unsigned char *)(v18 + i);
          if (v28 >= 0xEB00) {
            unsigned int v28 = 60160;
          }
          if (v28 <= 0x1000) {
            unsigned int v28 = 4096;
          }
          unsigned char *v29 = (-1044480 - v27 + (v27 << 8)) / 0xDB00;
          v29[1] = (-1044480 - v28 + (v28 << 8)) / 0xDB00;
          v19 += 4;
        }
      }
      v17 += v11;
      v18 += v12;
      v16 += v13;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_v216_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = a8[2];
    uint64_t v18 = a7[2] + v17 * v15;
    uint64_t v19 = *a7 + *a8 * v15;
    uint64_t v20 = *a4;
    uint64_t v21 = v18 + v10;
    uint64_t v22 = v19 + v10;
    uint64_t v23 = *a3 + *a4 * *(void *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v24 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          unint64_t v26 = (unsigned char *)(v16 + i);
          unsigned int v27 = (unsigned char *)(v22 + i);
          *(_WORD *)(v21 + i) = -1;
          char v28 = *(unsigned char *)(v23 + v24 + 5);
          *unint64_t v26 = *(unsigned char *)(v23 + v24 + 1);
          v26[1] = v28;
          char v29 = *(unsigned char *)(v23 + v24 + 7);
          *unsigned int v27 = *(unsigned char *)(v23 + v24 + 3);
          v27[1] = v29;
          v24 += 8;
        }
      }
      v23 += v20;
      v22 += v13;
      v16 += v14;
      v21 += v17;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = a8[1];
    uint64_t v15 = *(void *)(a6 + 40);
    uint64_t v16 = a7[1] + v14 * v15 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = *a4;
    uint64_t v18 = *a7 + *a8 * v15 + v10;
    uint64_t v19 = *a3 + *a4 * *(void *)(a2 + 40) + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (unsigned char *)(v16 + i);
          uint64_t v23 = (unsigned char *)(v18 + i);
          char v24 = *(unsigned char *)(v19 + v20 + 5);
          *uint64_t v22 = *(unsigned char *)(v19 + v20 + 1);
          v22[1] = v24;
          char v25 = *(unsigned char *)(v19 + v20 + 7);
          *uint64_t v23 = *(unsigned char *)(v19 + v20 + 3);
          v23[1] = v25;
          v20 += 8;
        }
      }
      v19 += v17;
      v18 += v13;
      v16 += v14;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_v216_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = a8[1];
    uint64_t v16 = *(void *)(a6 + 40);
    uint64_t v17 = a7[1] + v15 * v16 + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v18 = *a3 + *a4 * *(void *)(a2 + 40) + 2 * v9;
    uint64_t v19 = *a7 + *a8 * v16 + v10;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (unsigned __int16 *)(v18 + v20);
          uint64_t v23 = (unsigned char *)(v17 + i);
          unsigned int v24 = *(unsigned __int16 *)(v18 + v20);
          if (v24 >= 0xF000) {
            unsigned int v24 = 61440;
          }
          unsigned int v25 = v22[2];
          if (v24 <= 0x1000) {
            unsigned int v24 = 4096;
          }
          if (v25 >= 0xF000) {
            unsigned int v25 = 61440;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          *uint64_t v23 = (613566757 * (unint64_t)((-1044480 - v24 + (v24 << 8)) >> 13)) >> 32;
          v23[1] = (613566757 * (unint64_t)((-1044480 - v25 + (v25 << 8)) >> 13)) >> 32;
          unsigned int v26 = v22[1];
          if (v26 >= 0xEB00) {
            unsigned int v26 = 60160;
          }
          if (v26 <= 0x1000) {
            unsigned int v26 = 4096;
          }
          unsigned int v27 = v22[3];
          char v28 = (unsigned char *)(v19 + i);
          if (v27 >= 0xEB00) {
            unsigned int v27 = 60160;
          }
          if (v27 <= 0x1000) {
            unsigned int v27 = 4096;
          }
          unsigned char *v28 = (-1044480 - v26 + (v26 << 8)) / 0xDB00;
          v28[1] = (-1044480 - v27 + (v27 << 8)) / 0xDB00;
          v20 += 8;
        }
      }
      v18 += v13;
      v19 += v14;
      v17 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (v8 & 1) + v8;
  uint64_t v11 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v13 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v14 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11) {
    unint64_t v14 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v11;
  }
  unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v10;
  if (v15 >= v13 - v12) {
    unint64_t v15 = v13 - v12;
  }
  if (v15)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *a8;
    uint64_t v18 = a8[1];
    uint64_t v19 = a7[1] + ((unint64_t)(v18 * v12) >> 1) + (v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v12;
    uint64_t v22 = *a7 + *a8 * v12;
    uint64_t v23 = *a4;
    uint64_t v24 = v21 + v11;
    uint64_t v25 = v22 + v11;
    uint64_t v26 = *a3 + *a4 * v10 + 2 * v9;
    uint64_t v27 = *a3 + v23 + v23 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v14)
      {
        uint64_t v28 = 0;
        unint64_t v29 = 0;
        char v30 = (unsigned char *)v19;
        do
        {
          *(_WORD *)(v24 + v29) = -1;
          if ((v16 & 1) == 0)
          {
            unsigned int v31 = (*(unsigned __int8 *)(v26 + v28 + 5) + *(unsigned __int8 *)(v27 + v28 + 5) + 1) >> 1;
            *char v30 = (*(unsigned __int8 *)(v26 + v28 + 1) + *(unsigned __int8 *)(v27 + v28 + 1) + 1) >> 1;
            v30[1] = v31;
            v30 += 2;
          }
          unsigned int v32 = (unsigned char *)(v25 + v29);
          char v33 = *(unsigned char *)(v26 + v28 + 7);
          *unsigned int v32 = *(unsigned char *)(v26 + v28 + 3);
          v32[1] = v33;
          v29 += 2;
          v28 += 8;
        }
        while (v29 < v14);
      }
      v26 += v23;
      v25 += v17;
      if (v16) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v18;
      }
      v19 += v34;
      v24 += v20;
      ++v16;
      v27 += v23;
    }
    while (v16 != v15);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v12 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v13 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v8;
  if (v13 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v13 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v14 = ((*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE) - v9;
  if (v14 >= v12 - v11) {
    unint64_t v14 = v12 - v11;
  }
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *a8;
    uint64_t v17 = a8[1];
    uint64_t v18 = a7[1] + ((unint64_t)(v17 * v11) >> 1) + (v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v19 = a8[2];
    uint64_t v20 = a7[2] + v19 * v11;
    uint64_t v21 = *a7 + *a8 * v11;
    uint64_t v22 = *a4;
    uint64_t v23 = v20 + v10;
    uint64_t v24 = v21 + v10;
    uint64_t v25 = *a4 * v9 + 2 * v8 + *a3 + 4;
    do
    {
      if (v13)
      {
        unint64_t v26 = 0;
        uint64_t v27 = v25;
        uint64_t v28 = (unsigned char *)v18;
        do
        {
          *(_WORD *)(v23 + v26) = -1;
          if ((v15 & 1) == 0)
          {
            char v29 = *(unsigned char *)(v27 + 1);
            unsigned char *v28 = *(unsigned char *)(v27 - 3);
            v28[1] = v29;
            v28 += 2;
          }
          char v30 = (unsigned char *)(v24 + v26);
          char v31 = *(unsigned char *)(v27 + 3);
          *char v30 = *(unsigned char *)(v27 - 1);
          v30[1] = v31;
          v26 += 2;
          v27 += 8;
        }
        while (v26 < v13);
      }
      v24 += v16;
      if (v15) {
        uint64_t v32 = 0;
      }
      else {
        uint64_t v32 = v17;
      }
      v18 += v32;
      v23 += v19;
      ++v15;
      v25 += v22;
    }
    while (v15 != v14);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a8[2];
    uint64_t v22 = *a4;
    uint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v14) >> 1) + (v13 >> 1));
    uint64_t v24 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v14) >> 1) + (v13 >> 1));
    unint64_t v25 = *a7 + *a8 * v14 + v13;
    uint64_t v26 = *a3 + *a4 * v11 + 2 * v9;
    uint64_t v27 = *a3 + v22 + v22 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v16)
      {
        uint64_t v28 = 0;
        unint64_t v29 = 0;
        char v30 = v23;
        char v31 = v24;
        do
        {
          if ((v18 & 1) == 0)
          {
            unsigned int v32 = (*(unsigned __int8 *)(v26 + v28 + 5) + *(unsigned __int8 *)(v27 + v28 + 5) + 1) >> 1;
            *v31++ = (*(unsigned __int8 *)(v26 + v28 + 1) + *(unsigned __int8 *)(v27 + v28 + 1) + 1) >> 1;
            *v30++ = v32;
          }
          char v33 = (unsigned char *)(v25 + v29);
          char v34 = *(unsigned char *)(v26 + v28 + 7);
          *char v33 = *(unsigned char *)(v26 + v28 + 3);
          v33[1] = v34;
          v29 += 2;
          v28 += 8;
        }
        while (v29 < v16);
      }
      v26 += v22;
      v25 += v19;
      if (v18) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = v20;
      }
      v24 += v35;
      if (v18) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = v21;
      }
      v23 += v36;
      ++v18;
      v27 += v22;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = v9 - v8;
  if (v15 >= ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12) {
    unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  }
  unint64_t v16 = v11 - v10;
  if (v16 >= v14 - v13) {
    unint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a8;
    uint64_t v19 = a8[1];
    uint64_t v20 = a8[2];
    uint64_t v21 = *a4;
    uint64_t v22 = (unsigned char *)(a7[2] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    uint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v19 * v13) >> 1) + (v12 >> 1));
    unint64_t v24 = *a7 + *a8 * v13 + v12;
    uint64_t v25 = *a4 * v10 + 2 * v8 + *a3 + 4;
    do
    {
      if (v15)
      {
        unint64_t v26 = 0;
        uint64_t v27 = v25;
        uint64_t v28 = v22;
        unint64_t v29 = v23;
        do
        {
          if ((v17 & 1) == 0)
          {
            char v30 = *(unsigned char *)(v27 + 1);
            *v29++ = *(unsigned char *)(v27 - 3);
            *v28++ = v30;
          }
          char v31 = (unsigned char *)(v24 + v26);
          char v32 = *(unsigned char *)(v27 + 3);
          unsigned char *v31 = *(unsigned char *)(v27 - 1);
          v31[1] = v32;
          v26 += 2;
          v27 += 8;
        }
        while (v26 < v15);
      }
      v24 += v18;
      if (v17) {
        uint64_t v33 = 0;
      }
      else {
        uint64_t v33 = v19;
      }
      v23 += v33;
      if (v17) {
        uint64_t v34 = 0;
      }
      else {
        uint64_t v34 = v20;
      }
      v22 += v34;
      ++v17;
      v25 += v21;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_CopyAvg_v216_f420(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v11 = (v8 & 1) + v8;
  uint64_t v12 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v10 - v9;
  if (v16 >= ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13) {
    unint64_t v16 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v13;
  }
  unint64_t v17 = v12 - v11;
  if (v17 >= v15 - v14) {
    unint64_t v17 = v15 - v14;
  }
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[1];
    uint64_t v22 = a8[2];
    uint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v22 * v14) >> 1) + (v13 >> 1));
    unint64_t v24 = (unsigned char *)(a7[1] + ((unint64_t)(v21 * v14) >> 1) + (v13 >> 1));
    unint64_t v25 = *a7 + *a8 * v14 + v13;
    uint64_t v26 = *a3;
    uint64_t v27 = v26 + *a4 * v11 + 2 * v9;
    uint64_t v28 = v26 + v19 + v19 * (v8 + (v8 & 1)) + 2 * v9;
    do
    {
      if (v16)
      {
        uint64_t v29 = 0;
        unint64_t v30 = 0;
        char v31 = v23;
        char v32 = v24;
        do
        {
          if ((v18 & 1) == 0)
          {
            unsigned int v33 = *(unsigned __int16 *)(v27 + v29);
            unsigned int v34 = *(unsigned __int16 *)(v28 + v29);
            if (v33 >= 0xF000) {
              unsigned int v33 = 61440;
            }
            if (v33 <= 0x1000) {
              unsigned int v33 = 4096;
            }
            if (v34 >= 0xF000) {
              unsigned int v34 = 61440;
            }
            if (v34 <= 0x1000) {
              unsigned int v34 = 4096;
            }
            unsigned int v35 = *(unsigned __int16 *)(v27 + v29 + 4);
            unsigned int v36 = *(unsigned __int16 *)(v28 + v29 + 4);
            if (v35 >= 0xF000) {
              unsigned int v35 = 61440;
            }
            if (v35 <= 0x1000) {
              unsigned int v35 = 4096;
            }
            if (v36 >= 0xF000) {
              unsigned int v36 = 61440;
            }
            if (v36 <= 0x1000) {
              unsigned int v36 = 4096;
            }
            *v32++ = (((613566757 * (unint64_t)((-1044480 - v33 + (v33 << 8)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-1044480 - v34 + (v34 << 8)) >> 13)) >> 32)
                                  + 1) >> 1;
            *v31++ = (((613566757 * (unint64_t)((-1044480 - v35 + (v35 << 8)) >> 13)) >> 32)
                                  + ((613566757 * (unint64_t)((-1044480 - v36 + (v36 << 8)) >> 13)) >> 32)
                                  + 1) >> 1;
          }
          unsigned int v37 = (unsigned char *)(v25 + v30);
          unsigned int v38 = *(unsigned __int16 *)(v27 + v29 + 2);
          if (v38 >= 0xEB00) {
            unsigned int v38 = 60160;
          }
          if (v38 <= 0x1000) {
            unsigned int v38 = 4096;
          }
          unsigned int v39 = *(unsigned __int16 *)(v27 + v29 + 6);
          if (v39 >= 0xEB00) {
            unsigned int v39 = 60160;
          }
          if (v39 <= 0x1000) {
            unsigned int v39 = 4096;
          }
          *unsigned int v37 = (-1044480 - v38 + (v38 << 8)) / 0xDB00;
          v37[1] = (-1044480 - v39 + (v39 << 8)) / 0xDB00;
          v30 += 2;
          v29 += 8;
        }
        while (v30 < v16);
      }
      v27 += v19;
      v25 += v20;
      if (v18) {
        uint64_t v40 = 0;
      }
      else {
        uint64_t v40 = v21;
      }
      v24 += v40;
      if (v18) {
        uint64_t v41 = 0;
      }
      else {
        uint64_t v41 = v22;
      }
      v23 += v41;
      ++v18;
      v28 += v19;
    }
    while (v18 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v216_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v9 = (*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE;
  uint64_t v10 = (*(void *)(a2 + 40) & 1) + *(void *)(a2 + 40);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + *(void *)(a2 + 40)) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v14 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v15 = v9 - v8;
  if (v15 >= ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12) {
    unint64_t v15 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v12;
  }
  unint64_t v16 = v11 - v10;
  if (v16 >= v14 - v13) {
    unint64_t v16 = v14 - v13;
  }
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *a4;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[1];
    uint64_t v21 = a8[2];
    uint64_t v22 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v13) >> 1) + (v12 >> 1));
    uint64_t v23 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v13) >> 1) + (v12 >> 1));
    unint64_t v24 = *a7 + *a8 * v13 + v12;
    uint64_t v25 = *a4 * v10 + 2 * v8 + *a3 + 4;
    do
    {
      if (v15)
      {
        unint64_t v26 = 0;
        uint64_t v27 = (unsigned __int16 *)v25;
        uint64_t v28 = v22;
        uint64_t v29 = v23;
        do
        {
          if ((v17 & 1) == 0)
          {
            unsigned int v30 = *(v27 - 2);
            if (v30 >= 0xF000) {
              unsigned int v30 = 61440;
            }
            if (v30 <= 0x1000) {
              unsigned int v30 = 4096;
            }
            unsigned int v31 = *v27;
            if (v31 >= 0xF000) {
              unsigned int v31 = 61440;
            }
            if (v31 <= 0x1000) {
              unsigned int v31 = 4096;
            }
            *v29++ = (613566757 * (unint64_t)((-1044480 - v30 + (v30 << 8)) >> 13)) >> 32;
            *v28++ = (613566757 * (unint64_t)((-1044480 - v31 + (v31 << 8)) >> 13)) >> 32;
          }
          char v32 = (unsigned char *)(v24 + v26);
          unsigned int v33 = *(v27 - 1);
          if (v33 >= 0xEB00) {
            unsigned int v33 = 60160;
          }
          if (v33 <= 0x1000) {
            unsigned int v33 = 4096;
          }
          unsigned int v34 = v27[1];
          if (v34 >= 0xEB00) {
            unsigned int v34 = 60160;
          }
          if (v34 <= 0x1000) {
            unsigned int v34 = 4096;
          }
          *char v32 = (-1044480 - v33 + (v33 << 8)) / 0xDB00;
          v32[1] = (-1044480 - v34 + (v34 << 8)) / 0xDB00;
          v26 += 2;
          v27 += 4;
        }
        while (v26 < v15);
      }
      v24 += v19;
      if (v17) {
        uint64_t v35 = 0;
      }
      else {
        uint64_t v35 = v20;
      }
      v23 += v35;
      if (v17) {
        uint64_t v36 = 0;
      }
      else {
        uint64_t v36 = v21;
      }
      v22 += v36;
      ++v17;
      v25 += v18;
    }
    while (v17 != v16);
  }
  return 0;
}

uint64_t vt_Copy_v210_2vuy(unint64_t a1, uint64_t a2, uint64_t *a3, __int32 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = *a4;
    uint64_t v10 = *a6 + 8;
    int8x16_t v11 = (int8x16_t)vdupq_n_s32(0x3FEu);
    v12.i64[0] = 0x200000002;
    v12.i64[1] = 0x200000002;
    v13.i64[0] = 0xFE000000FELL;
    v13.i64[1] = 0xFE000000FELL;
    do
    {
      if (a1)
      {
        unint64_t v14 = 0;
        unint64_t v15 = (_DWORD *)v10;
        unint64_t v16 = v9;
        do
        {
          unsigned int v17 = v16[1];
          v18.i32[0] = *v16;
          v18.i32[1] = *v16 >> 10;
          v18.i32[2] = *v16 >> 20;
          unsigned __int32 v20 = v16[2];
          unsigned int v19 = v16[3];
          v18.i32[3] = v17;
          int16x8_t v21 = (int16x8_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v18, v11), v12), 2uLL), v13);
          *(int16x4_t *)v21.i8 = vmovn_s32((int32x4_t)v21);
          *(v15 - 2) = vmovn_s16(v21).u32[0];
          if (v14 + 2 < a1)
          {
            *(uint32x2_t *)v22.i8 = vshl_u32((uint32x2_t)vdup_n_s32(v17), (uint32x2_t)0xFFFFFFECFFFFFFF6);
            v22.i32[2] = v20;
            v22.i32[3] = v20 >> 10;
            int16x8_t v23 = (int16x8_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v22, v11), v12), 2uLL), v13);
            *(int16x4_t *)v23.i8 = vmovn_s32((int32x4_t)v23);
            *(v15 - 1) = vmovn_s16(v23).u32[0];
          }
          if (v14 + 4 < a1)
          {
            v24.i32[0] = v20 >> 20;
            v24.i32[1] = v19;
            v24.u64[1] = (unint64_t)vshl_u32((uint32x2_t)vdup_n_s32(v19), (uint32x2_t)0xFFFFFFECFFFFFFF6);
            int16x8_t v25 = (int16x8_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v24, v11), v12), 2uLL), v13);
            *(int16x4_t *)v25.i8 = vmovn_s32((int32x4_t)v25);
            *unint64_t v15 = vmovn_s16(v25).u32[0];
          }
          v14 += 6;
          v15 += 3;
          v16 += 4;
        }
        while (v14 < a1);
      }
      uint64_t v9 = (__int32 *)((char *)v9 + v7);
      ++v6;
      v10 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_v210_yuvs(unint64_t a1, uint64_t a2, uint64_t *a3, __int32 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = *a4;
    uint64_t v10 = *a6 + 8;
    int8x16_t v11 = (int8x16_t)vdupq_n_s32(0x3FEu);
    v12.i64[0] = 0x200000002;
    v12.i64[1] = 0x200000002;
    v13.i64[0] = 0xFE000000FELL;
    v13.i64[1] = 0xFE000000FELL;
    do
    {
      if (a1)
      {
        unint64_t v14 = 0;
        unint64_t v15 = (_DWORD *)v10;
        unint64_t v16 = v9;
        do
        {
          unsigned int v17 = v16[1];
          unsigned __int32 v19 = v16[2];
          unsigned int v18 = v16[3];
          v20.i32[0] = *v16 >> 10;
          v20.i32[1] = *v16;
          v20.i32[2] = v17;
          v20.i32[3] = *v16 >> 20;
          int16x8_t v21 = (int16x8_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v20, v11), v12), 2uLL), v13);
          *(int16x4_t *)v21.i8 = vmovn_s32((int32x4_t)v21);
          *(v15 - 2) = vmovn_s16(v21).u32[0];
          if (v14 + 2 < a1)
          {
            *(uint32x2_t *)v22.i8 = vshl_u32((uint32x2_t)vdup_n_s32(v17), (uint32x2_t)0xFFFFFFF6FFFFFFECLL);
            v22.i32[2] = v19 >> 10;
            v22.i32[3] = v19;
            int16x8_t v23 = (int16x8_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v22, v11), v12), 2uLL), v13);
            *(int16x4_t *)v23.i8 = vmovn_s32((int32x4_t)v23);
            *(v15 - 1) = vmovn_s16(v23).u32[0];
          }
          if (v14 + 4 < a1)
          {
            v24.i32[0] = v18;
            v24.i32[1] = v19 >> 20;
            v24.u64[1] = (unint64_t)vshl_u32((uint32x2_t)vdup_n_s32(v18), (uint32x2_t)0xFFFFFFF6FFFFFFECLL);
            int16x8_t v25 = (int16x8_t)vminq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8(v24, v11), v12), 2uLL), v13);
            *(int16x4_t *)v25.i8 = vmovn_s32((int32x4_t)v25);
            *unint64_t v15 = vmovn_s16(v25).u32[0];
          }
          v14 += 6;
          v15 += 3;
          v16 += 4;
        }
        while (v14 < a1);
      }
      uint64_t v9 = (__int32 *)((char *)v9 + v7);
      ++v6;
      v10 += v8;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_v210_422v(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    uint64_t v11 = *a6;
    uint64_t v10 = a6[1];
    int32x4_t v12 = (_DWORD *)*a4;
    do
    {
      if (a1)
      {
        unint64_t v13 = 0;
        unint64_t v14 = v12;
        do
        {
          unint64_t v15 = (unsigned char *)(v11 + v13);
          unint64_t v16 = (unsigned char *)(v10 + v13);
          unsigned int v17 = v14[1];
          unsigned int v19 = v14[2];
          unsigned int v18 = v14[3];
          unsigned int v20 = ((*v14 & 0x3FEu) + 2) >> 2;
          unsigned int v21 = (((*v14 >> 10) & 0x3FEu) + 2) >> 2;
          unsigned int v22 = (((*v14 >> 20) & 0x3FEu) + 2) >> 2;
          if (v21 >= 0xFE) {
            LOBYTE(v21) = -2;
          }
          *unint64_t v15 = v21;
          if (v20 >= 0xFE) {
            LOBYTE(v20) = -2;
          }
          *unint64_t v16 = v20;
          if (((v17 & 0x3FE) + 2) >> 2 >= 0xFE) {
            char v23 = -2;
          }
          else {
            char v23 = ((v17 & 0x3FE) + 2) >> 2;
          }
          v15[1] = v23;
          if (v22 >= 0xFE) {
            LOBYTE(v22) = -2;
          }
          v16[1] = v22;
          if (v13 + 2 < a1)
          {
            unsigned int v24 = (((v17 >> 20) & 0x3FE) + 2) >> 2;
            unsigned int v25 = (((v17 >> 10) & 0x3FE) + 2) >> 2;
            if (v24 >= 0xFE) {
              LOBYTE(v24) = -2;
            }
            v15[2] = v24;
            if (v25 >= 0xFE) {
              LOBYTE(v25) = -2;
            }
            v16[2] = v25;
            if ((((v19 >> 10) & 0x3FE) + 2) >> 2 >= 0xFE) {
              char v26 = -2;
            }
            else {
              char v26 = (((v19 >> 10) & 0x3FE) + 2) >> 2;
            }
            v15[3] = v26;
            if (((v19 & 0x3FE) + 2) >> 2 >= 0xFE) {
              char v27 = -2;
            }
            else {
              char v27 = ((v19 & 0x3FE) + 2) >> 2;
            }
            v16[3] = v27;
          }
          if (v13 + 4 < a1)
          {
            unsigned int v28 = (((v19 >> 20) & 0x3FE) + 2) >> 2;
            unsigned int v29 = ((v18 & 0x3FE) + 2) >> 2;
            unsigned int v30 = (((v18 >> 10) & 0x3FE) + 2) >> 2;
            unsigned int v31 = (((v18 >> 20) & 0x3FE) + 2) >> 2;
            if (v29 >= 0xFE) {
              LOBYTE(v29) = -2;
            }
            *(unsigned char *)(v11 + v13 + 4) = v29;
            if (v28 >= 0xFE) {
              LOBYTE(v28) = -2;
            }
            *(unsigned char *)(v10 + v13 + 4) = v28;
            if (v31 >= 0xFE) {
              LOBYTE(v31) = -2;
            }
            *(unsigned char *)(v11 + v13 + 5) = v31;
            if (v30 >= 0xFE) {
              char v32 = -2;
            }
            else {
              char v32 = v30;
            }
            *(unsigned char *)(v10 + v13 + 5) = v32;
          }
          v13 += 6;
          v14 += 4;
        }
        while (v13 < a1);
      }
      int32x4_t v12 = (_DWORD *)((char *)v12 + v7);
      v11 += v8;
      v10 += v9;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_CopyAvg_v210_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  *(_OWORD *)&v55[32] = 0u;
  *(_OWORD *)&v55[16] = 0u;
  *(_OWORD *)long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  memset(v48, 0, sizeof(v48));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v49[0] = vdupq_n_s64(1uLL);
  v49[1] = xmmword_193E7D400;
  uint64_t v50 = 1;
  *(_OWORD *)&v55[8] = v49[0];
  *(_OWORD *)&v55[24] = xmmword_193E7D420;
  uint64_t v74 = 0;
  *(void *)&v55[40] = 2;
  uint64_t v12 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v49, a8, a7, v48);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = *((void *)&v48[0] + 1);
    uint64_t v19 = *(void *)&v48[0];
    uint64_t v20 = v14 * v11;
    uint64_t v21 = 2 * *a8;
    uint64_t v22 = v13 + ((v12 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    uint64_t v23 = 2 * v14;
    uint64_t v24 = *(void *)&v48[0] + *a8;
    uint64_t v25 = v14 + v14 * v11;
    do
    {
      if (v9)
      {
        unint64_t v26 = 0;
        uint64_t v27 = v22;
        do
        {
          unsigned int v28 = (unsigned char *)(v19 + v26);
          unsigned int v29 = (unsigned char *)(v24 + v26);
          unsigned int v31 = *(_DWORD *)(v27 + v20);
          unsigned int v30 = *(_DWORD *)(v27 + v20 + 4);
          unsigned int v33 = *(_DWORD *)(v27 + v25);
          unsigned int v32 = *(_DWORD *)(v27 + v25 + 4);
          int32x2_t v34 = *(int32x2_t *)(v27 + v20 + 8);
          int32x2_t v35 = *(int32x2_t *)(v27 + v25 + 8);
          int8x8_t v36 = (int8x8_t)vdup_lane_s32(v34, 0);
          int8x8_t v37 = (int8x8_t)vdup_lane_s32(v35, 0);
          unsigned char *v28 = ((v31 >> 10) + 2) >> 2;
          v28[1] = (v30 + 2) >> 2;
          unsigned char *v29 = ((v33 >> 10) + 2) >> 2;
          v29[1] = (v32 + 2) >> 2;
          if (v26 + 2 < v9)
          {
            uint32x2_t v38 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vshl_u32((uint32x2_t)__PAIR64__(v36.u32[1], v30), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int32x2_t)0x200000002), 2uLL);
            v28[3] = v38.i8[4];
            v28[2] = v38.i8[0];
            uint32x2_t v39 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vshl_u32((uint32x2_t)__PAIR64__(v37.u32[1], v32), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int32x2_t)0x200000002), 2uLL);
            v29[3] = v39.i8[4];
            v29[2] = v39.i8[0];
          }
          if (v26 + 4 < v9)
          {
            uint64_t v40 = v19 + v26;
            *(unsigned char *)(v40 + 4) = (v34.i32[1] + 2) >> 2;
            *(unsigned char *)(v40 + 5) = (((unsigned __int32)v34.i32[1] >> 20) + 2) >> 2;
            unint64_t v41 = v24 + v26;
            *(unsigned char *)(v41 + 4) = (v35.i32[1] + 2) >> 2;
            *(unsigned char *)(v41 + 5) = (((unsigned __int32)v35.i32[1] >> 20) + 2) >> 2;
          }
          __int16 v42 = (unsigned char *)(v18 + v26);
          *__int16 v42 = ((((v33 & 0x3FF) + (v31 & 0x3FF)) >> 1) + 2) >> 2;
          v42[1] = (((((v33 >> 20) & 0x3FF) + ((v31 >> 20) & 0x3FF)) >> 1) + 2) >> 2;
          if (v26 + 2 < v9)
          {
            v36.i32[0] = v30 >> 10;
            v37.i32[0] = v32 >> 10;
            uint64_t v43 = v18 + v26;
            uint32x2_t v44 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vhadd_u32((uint32x2_t)vand_s8(v37, (int8x8_t)0x300000003), (uint32x2_t)vand_s8(v36, (int8x8_t)0x300000003)), (int32x2_t)0x200000002), 2uLL);
            *(unsigned char *)(v43 + 3) = v44.i8[4];
            *(unsigned char *)(v43 + 2) = v44.i8[0];
          }
          if (v26 + 4 < v9)
          {
            uint64_t v45 = v18 + v26;
            uint32x2_t v46 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vhadd_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)v35, (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003), (uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)v34, (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003)), (int32x2_t)0x200000002), 2uLL);
            *(unsigned char *)(v45 + 5) = v46.i8[4];
            *(unsigned char *)(v45 + 4) = v46.i8[0];
          }
          v26 += 6;
          v27 += 16;
        }
        while (v26 < v9);
      }
      v19 += v21;
      v18 += v16;
      ++v15;
      v22 += v23;
      v24 += v21;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v210_420v(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  *(_OWORD *)&v50[32] = 0u;
  *(_OWORD *)&v50[16] = 0u;
  *(_OWORD *)uint64_t v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  memset(v43, 0, sizeof(v43));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v44[0] = vdupq_n_s64(1uLL);
  v44[1] = xmmword_193E7D400;
  uint64_t v45 = 1;
  *(_OWORD *)&v50[8] = v44[0];
  *(_OWORD *)&v50[24] = xmmword_193E7D420;
  uint64_t v69 = 0;
  *(void *)&v50[40] = 2;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v44, a8, a7, v43);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = *((void *)&v43[0] + 1);
    uint64_t v19 = *(void *)&v43[0];
    unint64_t v20 = v13 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    uint64_t v21 = 2 * *a8;
    uint64_t v22 = 2 * v14;
    uint64_t v23 = v13 + v14 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    uint64_t v24 = *(void *)&v43[0] + *a8;
    do
    {
      if (v9)
      {
        uint64_t v25 = 0;
        for (unint64_t i = 0; i < v9; i += 6)
        {
          uint64_t v27 = (unsigned char *)(v19 + i);
          unsigned int v28 = (unsigned char *)(v24 + i);
          unsigned int v30 = *(_DWORD *)(v20 + v25);
          unsigned int v29 = *(_DWORD *)(v20 + v25 + 4);
          unsigned int v31 = *(_DWORD *)(v20 + v25 + 8);
          unsigned int v32 = *(_DWORD *)(v20 + v25 + 12);
          uint32x2_t v33 = *(uint32x2_t *)(v23 + v25 + 4);
          unsigned int v34 = *(_DWORD *)(v23 + v25 + 12);
          int v35 = *(_DWORD *)(v23 + v25) >> 10;
          *uint64_t v27 = ((v30 >> 10) + 2) >> 2;
          v27[1] = (v29 + 2) >> 2;
          unsigned char *v28 = (v35 + 2) >> 2;
          v28[1] = (v33.i32[0] + 2) >> 2;
          if (i + 2 < v9)
          {
            v27[2] = ((v29 >> 20) + 2) >> 2;
            v27[3] = ((v31 >> 10) + 2) >> 2;
            uint32x2_t v36 = vshr_n_u32((uint32x2_t)vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int32x2_t)0x200000002), 2uLL);
            v28[3] = v36.i8[4];
            v28[2] = v36.i8[0];
          }
          if (i + 4 < v9)
          {
            uint64_t v37 = v19 + i;
            *(unsigned char *)(v37 + 4) = (v32 + 2) >> 2;
            *(unsigned char *)(v37 + 5) = ((v32 >> 20) + 2) >> 2;
            unint64_t v38 = v24 + i;
            *(unsigned char *)(v38 + 4) = (v34 + 2) >> 2;
            *(unsigned char *)(v38 + 5) = ((v34 >> 20) + 2) >> 2;
          }
          uint32x2_t v39 = (unsigned char *)(v18 + i);
          *uint32x2_t v39 = (v30 + 2) >> 2;
          v39[1] = ((v30 >> 20) + 2) >> 2;
          if (i + 2 < v9)
          {
            uint64_t v40 = v18 + i;
            *(unsigned char *)(v40 + 2) = ((v29 >> 10) + 2) >> 2;
            *(unsigned char *)(v40 + 3) = (v31 + 2) >> 2;
          }
          if (i + 4 < v9)
          {
            uint64_t v41 = v18 + i;
            *(unsigned char *)(v41 + 4) = ((v31 >> 20) + 2) >> 2;
            *(unsigned char *)(v41 + 5) = ((v32 >> 10) + 2) >> 2;
          }
          v25 += 16;
        }
      }
      v19 += v21;
      v18 += v16;
      v20 += v22;
      ++v15;
      v23 += v22;
      v24 += v21;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyAvg_v210_420f(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  *(_OWORD *)&v51[32] = 0u;
  *(_OWORD *)&v51[16] = 0u;
  *(_OWORD *)long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  memset(v44, 0, sizeof(v44));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v45[0] = vdupq_n_s64(1uLL);
  v45[1] = xmmword_193E7D400;
  uint64_t v46 = 1;
  *(_OWORD *)&v51[8] = v45[0];
  *(_OWORD *)&v51[24] = xmmword_193E7D420;
  uint64_t v70 = 0;
  *(void *)&v51[40] = 2;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v45, a8, a7, v44);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    unint64_t v42 = v10 >> 1;
    uint64_t v43 = a8[1];
    uint64_t v16 = *((void *)&v44[0] + 1);
    uint64_t v17 = *(void *)&v44[0];
    unint64_t v18 = (v11 << 7) & 0xFFFFFFFFFFFFFF00;
    unint64_t v19 = v13 + v14 * v12 + v18 / 0x30;
    uint64_t v41 = 2 * *a8;
    uint64_t v20 = 2 * v14;
    unint64_t v21 = v14 + v14 * v12 + v18 / 0x30 + v13 + 8;
    uint64_t v22 = *a8 + *(void *)&v44[0] + 5;
    do
    {
      if (v9)
      {
        uint64_t v23 = 0;
        for (unint64_t i = 0; i < v9; i += 6)
        {
          uint64_t v25 = (unsigned char *)(v17 + i);
          unint64_t v26 = v22 + i;
          unsigned int v28 = *(_DWORD *)(v19 + v23);
          unsigned int v27 = *(_DWORD *)(v19 + v23 + 4);
          unsigned int v29 = *(_DWORD *)(v19 + v23 + 8);
          unsigned int v30 = *(_DWORD *)(v19 + v23 + 12);
          unsigned int v32 = *(_DWORD *)(v21 + v23 - 8);
          unsigned int v31 = *(_DWORD *)(v21 + v23 - 4);
          unsigned int v34 = *(_DWORD *)(v21 + v23);
          unsigned int v33 = *(_DWORD *)(v21 + v23 + 4);
          *uint64_t v25 = (255 * ((v28 >> 10) & 0x3FF) - 16065) / 0x36C;
          v25[1] = (255 * (v27 & 0x3FF) - 16065) / 0x36C;
          *(unsigned char *)(v26 - 5) = (255 * ((v32 >> 10) & 0x3FF) - 16065) / 0x36C;
          *(unsigned char *)(v26 - 4) = (255 * (v31 & 0x3FF) - 16065) / 0x36C;
          if (i + 2 < v9)
          {
            v25[2] = (255 * ((v27 >> 20) & 0x3FF) - 16065) / 0x36C;
            v25[3] = (255 * ((v29 >> 10) & 0x3FF) - 16065) / 0x36C;
            *(unsigned char *)(v26 - 3) = (255 * ((v31 >> 20) & 0x3FF) - 16065) / 0x36C;
            *(unsigned char *)(v26 - 2) = (255 * ((v34 >> 10) & 0x3FF) - 16065) / 0x36C;
          }
          if (i + 4 < v9)
          {
            uint64_t v35 = v17 + i;
            *(unsigned char *)(v35 + 4) = (255 * (v30 & 0x3FF) - 16065) / 0x36C;
            *(unsigned char *)(v35 + 5) = (255 * ((v30 >> 20) & 0x3FF) - 16065) / 0x36C;
            uint32x2_t v36 = (unsigned char *)(v22 + i);
            *(v36 - 1) = (255 * (v33 & 0x3FF) - 16065) / 0x36C;
            *uint32x2_t v36 = (255 * ((v33 >> 20) & 0x3FF) - 16065) / 0x36C;
          }
          uint64_t v37 = (unsigned char *)(v16 + i);
          *uint64_t v37 = (613566757 * (unint64_t)((255 * (((v32 & 0x3FF) + (v28 & 0x3FF)) >> 1) - 16065) >> 7)) >> 32;
          v37[1] = (613566757
                  * (unint64_t)((255 * ((((v32 >> 20) & 0x3FF) + ((v28 >> 20) & 0x3FF)) >> 1) - 16065) >> 7)) >> 32;
          if (i + 2 < v9)
          {
            uint64_t v38 = v16 + i;
            *(unsigned char *)(v38 + 2) = (613566757
                                 * (unint64_t)((255 * ((((v31 >> 10) & 0x3FF) + ((v27 >> 10) & 0x3FF)) >> 1)
                                                     - 16065) >> 7)) >> 32;
            *(unsigned char *)(v38 + 3) = (613566757
                                 * (unint64_t)((255 * (((v34 & 0x3FF) + (v29 & 0x3FF)) >> 1) - 16065) >> 7)) >> 32;
          }
          if (i + 4 < v9)
          {
            uint64_t v39 = v16 + i;
            *(unsigned char *)(v39 + 4) = (613566757
                                 * (unint64_t)((255 * ((((v34 >> 20) & 0x3FF) + ((v29 >> 20) & 0x3FF)) >> 1)
                                                     - 16065) >> 7)) >> 32;
            *(unsigned char *)(v39 + 5) = (613566757
                                 * (unint64_t)((255 * ((((v33 >> 10) & 0x3FF) + ((v30 >> 10) & 0x3FF)) >> 1)
                                                     - 16065) >> 7)) >> 32;
          }
          v23 += 16;
        }
      }
      v17 += v41;
      v16 += v43;
      v19 += v20;
      ++v15;
      v21 += v20;
      v22 += v41;
    }
    while (v15 != v42);
  }
  return 0;
}

uint64_t vt_CopyDec_v210_420f(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  *(_OWORD *)&v51[32] = 0u;
  *(_OWORD *)&v51[16] = 0u;
  *(_OWORD *)long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  memset(v44, 0, sizeof(v44));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v45[0] = vdupq_n_s64(1uLL);
  v45[1] = xmmword_193E7D400;
  uint64_t v46 = 1;
  *(_OWORD *)&v51[8] = v45[0];
  *(_OWORD *)&v51[24] = xmmword_193E7D420;
  uint64_t v70 = 0;
  *(void *)&v51[40] = 2;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v45, a8, a7, v44);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v43 = a8[1];
    uint64_t v16 = *((void *)&v44[0] + 1);
    uint64_t v17 = *(void *)&v44[0];
    unint64_t v18 = v13 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    uint64_t v19 = 2 * *a8;
    uint64_t v20 = 2 * v14;
    unint64_t v21 = v14 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30 + v13 + 8;
    uint64_t v22 = *a8 + *(void *)&v44[0] + 5;
    do
    {
      if (v9)
      {
        uint64_t v23 = 0;
        for (unint64_t i = 0; i < v9; i += 6)
        {
          uint64_t v25 = (unsigned char *)(v17 + i);
          unint64_t v26 = v22 + i;
          unsigned int v28 = *(_DWORD *)(v18 + v23);
          unsigned int v27 = *(_DWORD *)(v18 + v23 + 4);
          unsigned int v29 = *(_DWORD *)(v18 + v23 + 8);
          unsigned int v30 = *(_DWORD *)(v18 + v23 + 12);
          unsigned int v31 = *(_DWORD *)(v21 + v23 - 4);
          unsigned int v33 = *(_DWORD *)(v21 + v23);
          unsigned int v32 = *(_DWORD *)(v21 + v23 + 4);
          int v34 = (*(_DWORD *)(v21 + v23 - 8) >> 10) & 0x3FF;
          *uint64_t v25 = (255 * ((v28 >> 10) & 0x3FF) - 16065) / 0x36C;
          v25[1] = (255 * (v27 & 0x3FF) - 16065) / 0x36C;
          *(unsigned char *)(v26 - 5) = (255 * v34 - 16065) / 0x36Cu;
          *(unsigned char *)(v26 - 4) = (255 * (v31 & 0x3FF) - 16065) / 0x36C;
          if (i + 2 < v9)
          {
            v25[2] = (255 * ((v27 >> 20) & 0x3FF) - 16065) / 0x36C;
            v25[3] = (255 * ((v29 >> 10) & 0x3FF) - 16065) / 0x36C;
            *(unsigned char *)(v26 - 3) = (255 * ((v31 >> 20) & 0x3FF) - 16065) / 0x36C;
            *(unsigned char *)(v26 - 2) = (255 * ((v33 >> 10) & 0x3FF) - 16065) / 0x36C;
          }
          if (i + 4 < v9)
          {
            uint64_t v35 = v17 + i;
            *(unsigned char *)(v35 + 4) = (255 * (v30 & 0x3FF) - 16065) / 0x36C;
            *(unsigned char *)(v35 + 5) = (255 * ((v30 >> 20) & 0x3FF) - 16065) / 0x36C;
            uint32x2_t v36 = (unsigned char *)(v22 + i);
            *(v36 - 1) = (255 * (v32 & 0x3FF) - 16065) / 0x36C;
            *uint32x2_t v36 = (255 * ((v32 >> 20) & 0x3FF) - 16065) / 0x36C;
          }
          uint64_t v37 = (unsigned char *)(v16 + i);
          *uint64_t v37 = (613566757 * (unint64_t)((255 * (v28 & 0x3FF) - 16065) >> 7)) >> 32;
          v37[1] = (613566757 * (unint64_t)((255 * ((v28 >> 20) & 0x3FF) - 16065) >> 7)) >> 32;
          if (i + 2 < v9)
          {
            uint64_t v38 = v16 + i;
            *(unsigned char *)(v38 + 2) = (613566757 * (unint64_t)((255 * ((v27 >> 10) & 0x3FF) - 16065) >> 7)) >> 32;
            *(unsigned char *)(v38 + 3) = (613566757 * (unint64_t)((255 * (v29 & 0x3FF) - 16065) >> 7)) >> 32;
          }
          if (i + 4 < v9)
          {
            int v39 = (v29 >> 20) & 0x3FF;
            int v40 = (v30 >> 10) & 0x3FF;
            uint64_t v41 = v16 + i;
            *(unsigned char *)(v41 + 4) = (613566757 * (unint64_t)((255 * v39 - 16065) >> 7)) >> 32;
            *(unsigned char *)(v41 + 5) = (613566757 * (unint64_t)((255 * v40 - 16065) >> 7)) >> 32;
          }
          v23 += 16;
        }
      }
      v17 += v19;
      v16 += v43;
      v18 += v20;
      ++v15;
      v21 += v20;
      v22 += v19;
    }
    while (v15 != v10 >> 1);
  }
  return 0;
}

uint64_t vt_CopyAvg_v210_x420(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  *(_OWORD *)&v51[32] = 0u;
  *(_OWORD *)&v51[16] = 0u;
  *(_OWORD *)long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  memset(v44, 0, sizeof(v44));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v45[0] = vdupq_n_s64(1uLL);
  v45[1] = xmmword_193E7D4E0;
  uint64_t v46 = 1;
  *(_OWORD *)&v51[8] = v45[0];
  *(_OWORD *)&v51[24] = xmmword_193E7D4F0;
  uint64_t v70 = 0;
  *(void *)&v51[40] = 2;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v45, a8, a7, v44);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = *((void *)&v44[0] + 1);
    uint64_t v19 = *(void *)&v44[0];
    unint64_t v20 = v13 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    uint64_t v21 = 2 * *a8;
    uint64_t v22 = 2 * v14;
    unint64_t v23 = v14 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30 + v13 + 8;
    uint64_t v24 = *(void *)&v44[0] + *a8;
    do
    {
      if (v9)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        for (unint64_t i = 0; i < v9; i += 6)
        {
          unsigned int v28 = (_WORD *)(v19 + v26);
          unsigned int v30 = *(_DWORD *)(v20 + v25);
          unsigned int v29 = *(_DWORD *)(v20 + v25 + 4);
          unsigned int v31 = *(_DWORD *)(v20 + v25 + 8);
          unsigned int v32 = *(_DWORD *)(v20 + v25 + 12);
          unsigned int v34 = *(_DWORD *)(v23 + v25 - 8);
          unsigned int v33 = *(_DWORD *)(v23 + v25 - 4);
          unsigned int v36 = *(_DWORD *)(v23 + v25);
          unsigned int v35 = *(_DWORD *)(v23 + v25 + 4);
          _WORD *v28 = (v30 >> 4) & 0xFFC0;
          v28[1] = (_WORD)v29 << 6;
          *(_WORD *)(v24 + v26) = (v34 >> 4) & 0xFFC0;
          uint64_t v37 = (_WORD *)(v24 + 2 * i);
          v37[1] = (_WORD)v33 << 6;
          if (i + 2 < v9)
          {
            v28[2] = (v29 >> 14) & 0xFFC0;
            v28[3] = (v31 >> 4) & 0xFFC0;
            v37[2] = (v33 >> 14) & 0xFFC0;
            v37[3] = (v36 >> 4) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            uint64_t v38 = v19 + v26;
            *(_WORD *)(v38 + 8) = (_WORD)v32 << 6;
            *(_WORD *)(v38 + 10) = (v32 >> 14) & 0xFFC0;
            *(_WORD *)(v24 + 2 * i + 8) = (_WORD)v35 << 6;
            *(_WORD *)(v24 + v26 + 10) = (v35 >> 14) & 0xFFC0;
          }
          int v39 = (_WORD *)(v18 + v26);
          *int v39 = (32 * ((v34 & 0x3FF) + (v30 & 0x3FF))) & 0xFFC0;
          v39[1] = (32 * (((v34 >> 20) & 0x3FF) + ((v30 >> 20) & 0x3FF))) & 0xFFC0;
          if (i + 2 < v9)
          {
            uint64_t v40 = v18 + v26;
            *(_WORD *)(v40 + 4) = (32 * (((v33 >> 10) & 0x3FF) + ((v29 >> 10) & 0x3FF))) & 0xFFC0;
            *(_WORD *)(v40 + 6) = (32 * ((v36 & 0x3FF) + (v31 & 0x3FF))) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            int v41 = ((v35 >> 10) & 0x3FF) + ((v32 >> 10) & 0x3FF);
            uint64_t v42 = v18 + v26;
            *(_WORD *)(v42 + 8) = (32 * (((v36 >> 20) & 0x3FF) + ((v31 >> 20) & 0x3FF))) & 0xFFC0;
            *(_WORD *)(v42 + 10) = (32 * v41) & 0xFFC0;
          }
          v26 += 12;
          v25 += 16;
        }
      }
      v19 += v21;
      v18 += v16;
      v20 += v22;
      ++v15;
      v23 += v22;
      v24 += v21;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyDec_v210_x420(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  *(_OWORD *)&v50[32] = 0u;
  *(_OWORD *)&v50[16] = 0u;
  *(_OWORD *)long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  memset(v43, 0, sizeof(v43));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v44[0] = vdupq_n_s64(1uLL);
  v44[1] = xmmword_193E7D4E0;
  uint64_t v45 = 1;
  *(_OWORD *)&v50[8] = v44[0];
  *(_OWORD *)&v50[24] = xmmword_193E7D4F0;
  uint64_t v69 = 0;
  *(void *)&v50[40] = 2;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v44, a8, a7, v43);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a8[1];
    unint64_t v17 = v10 >> 1;
    uint64_t v18 = *((void *)&v43[0] + 1);
    uint64_t v19 = *(void *)&v43[0];
    unint64_t v20 = v13 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    uint64_t v21 = 2 * *a8;
    uint64_t v22 = 2 * v14;
    unint64_t v23 = v14 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30 + v13 + 8;
    uint64_t v24 = *(void *)&v43[0] + *a8;
    do
    {
      if (v9)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        for (unint64_t i = 0; i < v9; i += 6)
        {
          unsigned int v28 = (_WORD *)(v19 + v26);
          unsigned int v30 = *(_DWORD *)(v20 + v25);
          unsigned int v29 = *(_DWORD *)(v20 + v25 + 4);
          unsigned int v32 = *(_DWORD *)(v20 + v25 + 8);
          unsigned int v31 = *(_DWORD *)(v20 + v25 + 12);
          unsigned int v34 = *(_DWORD *)(v23 + v25 - 8);
          unsigned int v33 = *(_DWORD *)(v23 + v25 - 4);
          unsigned int v36 = *(_DWORD *)(v23 + v25);
          unsigned int v35 = *(_DWORD *)(v23 + v25 + 4);
          _WORD *v28 = (v30 >> 4) & 0xFFC0;
          v28[1] = (_WORD)v29 << 6;
          *(_WORD *)(v24 + v26) = (v34 >> 4) & 0xFFC0;
          uint64_t v37 = (_WORD *)(v24 + 2 * i);
          v37[1] = (_WORD)v33 << 6;
          if (i + 2 < v9)
          {
            v28[2] = (v29 >> 14) & 0xFFC0;
            v28[3] = (v32 >> 4) & 0xFFC0;
            v37[2] = (v33 >> 14) & 0xFFC0;
            v37[3] = (v36 >> 4) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            uint64_t v38 = v19 + v26;
            *(_WORD *)(v38 + 8) = (_WORD)v31 << 6;
            *(_WORD *)(v38 + 10) = (v31 >> 14) & 0xFFC0;
            *(_WORD *)(v24 + 2 * i + 8) = (_WORD)v35 << 6;
            *(_WORD *)(v24 + v26 + 10) = (v35 >> 14) & 0xFFC0;
          }
          int v39 = (_WORD *)(v18 + v26);
          *int v39 = (_WORD)v30 << 6;
          v39[1] = (v30 >> 14) & 0xFFC0;
          if (i + 2 < v9)
          {
            uint64_t v40 = v18 + v26;
            *(_WORD *)(v40 + 4) = (v29 >> 4) & 0xFFC0;
            *(_WORD *)(v40 + 6) = (_WORD)v32 << 6;
          }
          if (i + 4 < v9)
          {
            uint64_t v41 = v18 + v26;
            *(_WORD *)(v41 + 8) = (v32 >> 14) & 0xFFC0;
            *(_WORD *)(v41 + 10) = (v31 >> 4) & 0xFFC0;
          }
          v26 += 12;
          v25 += 16;
        }
      }
      v19 += v21;
      v18 += v16;
      v20 += v22;
      ++v15;
      v23 += v22;
      v24 += v21;
    }
    while (v15 != v17);
  }
  return 0;
}

uint64_t vt_CopyAvg_v210_xf20(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  *(_OWORD *)&v51[32] = 0u;
  *(_OWORD *)&v51[16] = 0u;
  *(_OWORD *)long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  memset(v44, 0, sizeof(v44));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v45[0] = vdupq_n_s64(1uLL);
  v45[1] = xmmword_193E7D4E0;
  uint64_t v46 = 1;
  *(_OWORD *)&v51[8] = v45[0];
  *(_OWORD *)&v51[24] = xmmword_193E7D4F0;
  uint64_t v70 = 0;
  *(void *)&v51[40] = 2;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v45, a8, a7, v44);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    unint64_t v42 = v10 >> 1;
    uint64_t v43 = a8[1];
    uint64_t v16 = *((void *)&v44[0] + 1);
    uint64_t v17 = *(void *)&v44[0];
    unint64_t v18 = (v11 << 7) & 0xFFFFFFFFFFFFFF00;
    unint64_t v19 = v13 + v14 * v12 + v18 / 0x30;
    uint64_t v40 = 2 * v14;
    uint64_t v41 = 2 * *a8;
    unint64_t v20 = v14 + v14 * v12 + v18 / 0x30 + v13 + 8;
    uint64_t v21 = *(void *)&v44[0] + *a8;
    do
    {
      if (v9)
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        for (unint64_t i = 0; i < v9; i += 6)
        {
          uint64_t v25 = (_WORD *)(v17 + v23);
          unsigned int v27 = *(_DWORD *)(v19 + v22);
          unsigned int v26 = *(_DWORD *)(v19 + v22 + 4);
          unsigned int v28 = *(_DWORD *)(v19 + v22 + 8);
          unsigned int v29 = *(_DWORD *)(v19 + v22 + 12);
          unsigned int v31 = *(_DWORD *)(v20 + v22 - 8);
          unsigned int v30 = *(_DWORD *)(v20 + v22 - 4);
          unsigned int v33 = *(_DWORD *)(v20 + v22);
          unsigned int v32 = *(_DWORD *)(v20 + v22 + 4);
          *uint64_t v25 = ((65472 * ((v27 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          v25[1] = ((65472 * (v26 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          *(_WORD *)(v21 + v23) = ((65472 * ((v31 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          unsigned int v34 = (_WORD *)(v21 + 2 * i);
          v34[1] = ((65472 * (v30 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          if (i + 2 < v9)
          {
            v25[2] = ((65472 * ((v26 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            v25[3] = ((65472 * ((v28 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            v34[2] = ((65472 * ((v30 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            v34[3] = ((65472 * ((v33 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            uint64_t v35 = v17 + v23;
            *(_WORD *)(v35 + 8) = ((65472 * (v29 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            *(_WORD *)(v35 + 10) = ((65472 * ((v29 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            *(_WORD *)(v21 + 2 * i + 8) = ((65472 * (v32 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            *(_WORD *)(v21 + v23 + 10) = ((65472 * ((v32 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          }
          unsigned int v36 = (_WORD *)(v16 + v23);
          *unsigned int v36 = (((613566757 * (unint64_t)((65472 * (((v31 & 0x3FF) + (v27 & 0x3FF)) >> 1) - 4190208) >> 7)) >> 32)
                + 32) & 0xFFC0;
          v36[1] = (((613566757
                    * (unint64_t)((65472 * ((((v31 >> 20) & 0x3FF) + ((v27 >> 20) & 0x3FF)) >> 1) - 4190208) >> 7)) >> 32)
                  + 32) & 0xFFC0;
          if (i + 2 < v9)
          {
            uint64_t v37 = v16 + v23;
            *(_WORD *)(v37 + 4) = (((613566757
                                   * (unint64_t)((65472 * ((((v30 >> 10) & 0x3FF) + ((v26 >> 10) & 0x3FF)) >> 1)
                                                       - 4190208) >> 7)) >> 32)
                                 + 32) & 0xFFC0;
            *(_WORD *)(v37 + 6) = (((613566757
                                   * (unint64_t)((65472 * (((v33 & 0x3FF) + (v28 & 0x3FF)) >> 1) - 4190208) >> 7)) >> 32)
                                 + 32) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            uint64_t v38 = v16 + v23;
            *(_WORD *)(v38 + 8) = (((613566757
                                   * (unint64_t)((65472 * ((((v33 >> 20) & 0x3FF) + ((v28 >> 20) & 0x3FF)) >> 1)
                                                       - 4190208) >> 7)) >> 32)
                                 + 32) & 0xFFC0;
            *(_WORD *)(v38 + 10) = (((613566757
                                    * (unint64_t)((65472 * ((((v32 >> 10) & 0x3FF) + ((v29 >> 10) & 0x3FF)) >> 1)
                                                        - 4190208) >> 7)) >> 32)
                                  + 32) & 0xFFC0;
          }
          v23 += 12;
          v22 += 16;
        }
      }
      v17 += v41;
      v16 += v43;
      v19 += v40;
      ++v15;
      v20 += v40;
      v21 += v41;
    }
    while (v15 != v42);
  }
  return 0;
}

uint64_t vt_CopyDec_v210_xf20(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  *(_OWORD *)&v52[32] = 0u;
  *(_OWORD *)&v52[16] = 0u;
  *(_OWORD *)long long v52 = 0u;
  long long v51 = 0u;
  long long v50 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  memset(v45, 0, sizeof(v45));
  unint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  v46[0] = vdupq_n_s64(1uLL);
  v46[1] = xmmword_193E7D4E0;
  uint64_t v47 = 1;
  *(_OWORD *)&v52[8] = v46[0];
  *(_OWORD *)&v52[24] = xmmword_193E7D4F0;
  uint64_t v71 = 0;
  *(void *)&v52[40] = 2;
  uint64_t v11 = a2[4];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a3;
  uint64_t v14 = *a4;
  vtPixelTransferSession_PrepareOffsets(2uLL, a6, v46, a8, a7, v45);
  if (v10 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v44 = a8[1];
    unint64_t v16 = v10 >> 1;
    uint64_t v17 = *((void *)&v45[0] + 1);
    uint64_t v18 = *(void *)&v45[0];
    unint64_t v19 = v13 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30;
    uint64_t v20 = 2 * *a8;
    uint64_t v21 = 2 * v14;
    unint64_t v22 = v14 + v14 * v12 + ((v11 << 7) & 0xFFFFFFFFFFFFFF00) / 0x30 + v13 + 8;
    uint64_t v23 = *(void *)&v45[0] + *a8;
    do
    {
      if (v9)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        for (unint64_t i = 0; i < v9; i += 6)
        {
          unsigned int v27 = (_WORD *)(v18 + v25);
          unsigned int v29 = *(_DWORD *)(v19 + v24);
          unsigned int v28 = *(_DWORD *)(v19 + v24 + 4);
          unsigned int v30 = *(_DWORD *)(v19 + v24 + 8);
          unsigned int v31 = *(_DWORD *)(v19 + v24 + 12);
          unsigned int v32 = *(_DWORD *)(v22 + v24 - 4);
          unsigned int v34 = *(_DWORD *)(v22 + v24);
          unsigned int v33 = *(_DWORD *)(v22 + v24 + 4);
          int v35 = (*(_DWORD *)(v22 + v24 - 8) >> 10) & 0x3FF;
          *unsigned int v27 = ((65472 * ((v29 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          v27[1] = ((65472 * (v28 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          *(_WORD *)(v23 + v25) = ((65472 * v35 - 4190208) / 0x36Cu + 32) & 0xFFC0;
          unsigned int v36 = (_WORD *)(v23 + 2 * i);
          v36[1] = ((65472 * (v32 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          if (i + 2 < v9)
          {
            v27[2] = ((65472 * ((v28 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            v27[3] = ((65472 * ((v30 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            v36[2] = ((65472 * ((v32 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            v36[3] = ((65472 * ((v34 >> 10) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            uint64_t v37 = v18 + v25;
            *(_WORD *)(v37 + 8) = ((65472 * (v31 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            *(_WORD *)(v37 + 10) = ((65472 * ((v31 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            *(_WORD *)(v23 + 2 * i + 8) = ((65472 * (v33 & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
            *(_WORD *)(v23 + v25 + 10) = ((65472 * ((v33 >> 20) & 0x3FF) - 4190208) / 0x36C + 32) & 0xFFC0;
          }
          uint64_t v38 = (_WORD *)(v17 + v25);
          *uint64_t v38 = (((613566757 * (unint64_t)((65472 * (v29 & 0x3FF) - 4190208) >> 7)) >> 32) + 32) & 0xFFC0;
          v38[1] = (((613566757 * (unint64_t)((65472 * ((v29 >> 20) & 0x3FF) - 4190208) >> 7)) >> 32) + 32) & 0xFFC0;
          if (i + 2 < v9)
          {
            uint64_t v39 = v17 + v25;
            *(_WORD *)(v39 + 4) = (((613566757 * (unint64_t)((65472 * ((v28 >> 10) & 0x3FF) - 4190208) >> 7)) >> 32)
                                 + 32) & 0xFFC0;
            *(_WORD *)(v39 + 6) = (((613566757 * (unint64_t)((65472 * (v30 & 0x3FF) - 4190208) >> 7)) >> 32) + 32) & 0xFFC0;
          }
          if (i + 4 < v9)
          {
            int v40 = (v30 >> 20) & 0x3FF;
            int v41 = (v31 >> 10) & 0x3FF;
            uint64_t v42 = v17 + v25;
            *(_WORD *)(v42 + 8) = (((613566757 * (unint64_t)((65472 * v40 - 4190208) >> 7)) >> 32)
                                 + 32) & 0xFFC0;
            *(_WORD *)(v42 + 10) = (((613566757 * (unint64_t)((65472 * v41 - 4190208) >> 7)) >> 32)
                                  + 32) & 0xFFC0;
          }
          v25 += 12;
          v24 += 16;
        }
      }
      v18 += v20;
      v17 += v44;
      v19 += v21;
      ++v15;
      v22 += v21;
      v23 += v20;
    }
    while (v15 != v16);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_v210_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v210_32BGRA;
  *a11 = vt_VImage_Cleanup_v210_32BGRA;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v210_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v210_32ARGB;
  *a11 = vt_VImage_Cleanup_v210_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_v210_RGhA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  uint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10, kvImageARGB16Q12, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_v210_RGhA;
  *a11 = vt_VImage_Cleanup_v210_RGhA;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_OneComponent_420v(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = a1 >> 1;
    uint64_t v13 = *a6;
    uint64_t v12 = a6[1];
    uint64_t v14 = *a4;
    uint64_t v15 = 2 * *a5;
    uint64_t v16 = 2 * v7;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v17 = v14 + v7;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v18 = 0;
        uint64_t v19 = v13 + v8;
        uint64_t v20 = v11;
        do
        {
          uint64_t v21 = (unsigned char *)(v13 + v18);
          char v22 = sLumaTableFtoV[*(unsigned __int8 *)(v14 + v18 + 1)];
          char v23 = sLumaTableFtoV[*(unsigned __int8 *)(v17 + v18)];
          char v24 = sLumaTableFtoV[*(unsigned __int8 *)(v17 + v18 + 1)];
          *uint64_t v21 = sLumaTableFtoV[*(unsigned __int8 *)(v14 + v18)];
          v21[1] = v22;
          *(unsigned char *)(v19 + v18) = v23;
          *(unsigned char *)(v19 + v18 + 1) = v24;
          *(_WORD *)(v12 + v18) = -32640;
          v18 += 2;
          --v20;
        }
        while (v20);
      }
      v13 += v15;
      v12 += v9;
      v14 += v16;
      ++v6;
      v17 += v16;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_Copy_OneComponent_420f(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    unint64_t v10 = a2 >> 1;
    uint64_t v11 = a1 >> 1;
    uint64_t v13 = *a6;
    uint64_t v12 = a6[1];
    uint64_t v14 = *a4;
    uint64_t v15 = 2 * *a5;
    uint64_t v16 = 2 * v7;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    uint64_t v17 = v14 + v7;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v18 = 0;
        uint64_t v19 = v13 + v8;
        uint64_t v20 = v11;
        do
        {
          char v21 = *(unsigned char *)(v17 + v18);
          char v22 = *(unsigned char *)(v17 + v18 + 1);
          *(_WORD *)(v13 + v18) = *(_WORD *)(v14 + v18);
          *(unsigned char *)(v19 + v18) = v21;
          *(unsigned char *)(v19 + v18 + 1) = v22;
          *(_WORD *)(v12 + v18) = -32640;
          v18 += 2;
          --v20;
        }
        while (v20);
      }
      v13 += v15;
      v12 += v9;
      v14 += v16;
      ++v6;
      v17 += v16;
    }
    while (v6 != v10);
  }
  return 0;
}

uint64_t vt_VImage_Setup_OneComponent_32BGRA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, vImage_Error (**a9)(uint64_t a1, vImagePixelCount *a2, uint64_t *a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, size_t *a8), uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_OneComponent_32BGRA;
  *a11 = vt_VImage_Cleanup_OneComponent_32BGRA;
  *a8 = v14;
  return 0;
}

uint64_t vt_Copy_L010_L008(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = *a6;
    uint64_t v10 = *a4;
    do
    {
      if (a1)
      {
        for (uint64_t i = 0; i != a1; ++i)
          *(unsigned char *)(v9 + i) = (4198405 * (unint64_t)(255 * (*(unsigned __int16 *)(v10 + 2 * i) >> 6))) >> 32;
      }
      v10 += v7;
      v9 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

vImage_Error vt_Copy_Half_Float(vImagePixelCount a1, vImagePixelCount a2, size_t *a3, void **a4, size_t *a5, void **a6)
{
  size_t v6 = *a3;
  src.width = a1;
  src.rowBytes = v6;
  src.data = *a4;
  src.height = a2;
  size_t v7 = *a5;
  v9.width = a1;
  v9.rowBytes = v7;
  v9.data = *a6;
  v9.height = a2;
  return vImageConvert_Planar16FtoPlanarF(&src, &v9, 0);
}

vImage_Error vt_Copy_Float_Half(vImagePixelCount a1, vImagePixelCount a2, size_t *a3, void **a4, size_t *a5, void **a6)
{
  size_t v6 = *a3;
  src.width = a1;
  src.rowBytes = v6;
  src.data = *a4;
  src.height = a2;
  size_t v7 = *a5;
  v9.width = a1;
  v9.rowBytes = v7;
  v9.data = *a6;
  v9.height = a2;
  return vImageConvert_PlanarFtoPlanar16F(&src, &v9, 0);
}

vImage_Error vt_VImage_Setup_2vuf_32ARGB(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_2vuf_32ARGB;
  *a11 = vt_VImage_Cleanup_2vuf_32ARGB;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_2vuf_32BGRA(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0uLL;
  int v24 = 0;
  uint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(void *)&long long v18 = 255;
  *((void *)&v18 + 1) = 255;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D430;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3D0;
      int v21 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v23 = xmmword_193E7D3E0;
      int v21 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v23 = xmmword_193E7D3F0;
      int v21 = 1072746935;
    }
    int v24 = v21;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v23;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage422CbYpCrYp8, kvImageARGB8888, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_2vuf_32BGRA;
  *a11 = vt_VImage_Cleanup_2vuf_32BGRA;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_RGhA_32ARGB(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v16 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  v16[2] = 0u;
  v16[3] = 0u;
  v16[4] = 0u;
  v16[5] = 0u;
  v16[6] = 0u;
  v16[7] = 0u;
  v16[8] = 0u;
  v16[9] = 0u;
  v16[10] = 0u;
  v16[11] = 0u;
  v16[12] = 0u;
  v16[13] = 0u;
  v16[14] = 0u;
  v16[15] = 0u;
  v16[16] = 0u;
  v16[17] = 0u;
  v16[18] = 0u;
  if (a1)
  {
    unint64_t v17 = 8 * a1;
    if (a2 && v17)
    {
      if (((v17 | a2) & 0x8000000000000000) != 0 || !is_mul_ok(a2, v17))
      {
        size_t v18 = 0;
LABEL_11:
        *((void *)v16 + 32) = v18;
        *((void *)v16 + 33) = a2;
        *((void *)v16 + 34) = a1;
        *((void *)v16 + 35) = v17;
        goto LABEL_12;
      }
      size_t v18 = v17 * a2;
      if (!(v17 * a2)) {
        goto LABEL_11;
      }
      malloc_type_id_t v19 = 1556728742;
LABEL_10:
      size_t v18 = (size_t)malloc_type_malloc(v18, v19);
      goto LABEL_11;
    }
LABEL_9:
    size_t v18 = 0;
    malloc_type_id_t v19 = 1270757447;
    goto LABEL_10;
  }
  if (a2)
  {
    unint64_t v17 = 0;
    goto LABEL_9;
  }
LABEL_12:
  *((void *)v16 + 37) = a5;
  *((unsigned char *)v16 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_32ARGB;
  *a11 = vt_VImage_Cleanup_RGhA_32ARGB;
  *a8 = v16;
  return 0;
}

uint64_t vt_VImage_Setup_RGhA_32BGRA(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v16 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  v16[2] = 0u;
  v16[3] = 0u;
  v16[4] = 0u;
  v16[5] = 0u;
  v16[6] = 0u;
  v16[7] = 0u;
  v16[8] = 0u;
  v16[9] = 0u;
  v16[10] = 0u;
  v16[11] = 0u;
  v16[12] = 0u;
  v16[13] = 0u;
  v16[14] = 0u;
  v16[15] = 0u;
  v16[16] = 0u;
  v16[17] = 0u;
  v16[18] = 0u;
  if (a1)
  {
    unint64_t v17 = 8 * a1;
    if (a2 && v17)
    {
      if (((v17 | a2) & 0x8000000000000000) != 0 || !is_mul_ok(a2, v17))
      {
        size_t v18 = 0;
LABEL_11:
        *((void *)v16 + 32) = v18;
        *((void *)v16 + 33) = a2;
        *((void *)v16 + 34) = a1;
        *((void *)v16 + 35) = v17;
        goto LABEL_12;
      }
      size_t v18 = v17 * a2;
      if (!(v17 * a2)) {
        goto LABEL_11;
      }
      malloc_type_id_t v19 = 1556728742;
LABEL_10:
      size_t v18 = (size_t)malloc_type_malloc(v18, v19);
      goto LABEL_11;
    }
LABEL_9:
    size_t v18 = 0;
    malloc_type_id_t v19 = 1270757447;
    goto LABEL_10;
  }
  if (a2)
  {
    unint64_t v17 = 0;
    goto LABEL_9;
  }
LABEL_12:
  *((void *)v16 + 37) = a5;
  *((unsigned char *)v16 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_32BGRA;
  *a11 = vt_VImage_Cleanup_RGhA_32BGRA;
  *a8 = v16;
  return 0;
}

vImage_Error vt_VImage_Setup_RGhA_y416(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        malloc_type_id_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  malloc_type_id_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16U, kvImage444AYpCbCr16, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_y416;
  *a11 = vt_VImage_Cleanup_RGhA_y416;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Setup_RGhA_l64r(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_l64r;
  *a11 = vt_VImage_Cleanup_RGhA_l64r;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_RGhA_RGfA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_RGfA;
  *a11 = vt_VImage_Cleanup_RGhA_RGfA;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_RGhA_v410(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v28 = 0u;
  long long v29 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v28 = v20;
    long long v29 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v28;
    goto LABEL_11;
  }
  long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error v22 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12, kvImage444CrYpCb10, 0);
  if (!v22 && (*((void *)v17 + 34) != a1 || *((void *)v17 + 33) != a2 || *((void *)v17 + 35) != 8 * a1))
  {
    long long v23 = (void *)*((void *)v17 + 32);
    if (v23)
    {
      *((void *)v17 + 32) = 0;
      free(v23);
    }
    unint64_t v24 = 8 * a1;
    if (a2 && v24)
    {
      size_t v25 = 0;
      if (((v24 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v24)) {
        goto LABEL_25;
      }
      size_t v25 = v24 * a2;
      if (!(v24 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v26 = 1556728742;
    }
    else
    {
      size_t v25 = 0;
      malloc_type_id_t v26 = 1270757447;
    }
    size_t v25 = (size_t)malloc_type_malloc(v25, v26);
LABEL_25:
    *((void *)v17 + 32) = v25;
    *((void *)v17 + 33) = a2;
    *((void *)v17 + 34) = a1;
    *((void *)v17 + 35) = v24;
  }
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_v410;
  *a11 = vt_VImage_Cleanup_RGhA_v410;
  *a8 = v17;
  return v22;
}

vImage_Error vt_VImage_Setup_RGhA_v210(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v28 = 0u;
  long long v29 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v28 = v20;
    long long v29 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v28;
    goto LABEL_11;
  }
  long long v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error v22 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12, kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10, 0);
  if (!v22 && (*((void *)v17 + 34) != a1 || *((void *)v17 + 33) != a2 || *((void *)v17 + 35) != 8 * a1))
  {
    long long v23 = (void *)*((void *)v17 + 32);
    if (v23)
    {
      *((void *)v17 + 32) = 0;
      free(v23);
    }
    unint64_t v24 = 8 * a1;
    if (a2 && v24)
    {
      size_t v25 = 0;
      if (((v24 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v24)) {
        goto LABEL_25;
      }
      size_t v25 = v24 * a2;
      if (!(v24 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v26 = 1556728742;
    }
    else
    {
      size_t v25 = 0;
      malloc_type_id_t v26 = 1270757447;
    }
    size_t v25 = (size_t)malloc_type_malloc(v25, v26);
LABEL_25:
    *((void *)v17 + 32) = v25;
    *((void *)v17 + 33) = a2;
    *((void *)v17 + 34) = a1;
    *((void *)v17 + 35) = v24;
  }
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_v210;
  *a11 = vt_VImage_Cleanup_RGhA_v210;
  *a8 = v17;
  return v22;
}

vImage_Error vt_VImage_Setup_RGhA_v216(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v29 = 0u;
  long long v30 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        malloc_type_id_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v29 = v21;
    long long v30 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v29;
    goto LABEL_11;
  }
  malloc_type_id_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error v23 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16U, kvImage422CbYpCrYp16, 0);
  if (!v23 && (*((void *)v17 + 34) != a1 || *((void *)v17 + 33) != a2 || *((void *)v17 + 35) != 8 * a1))
  {
    unint64_t v24 = (void *)*((void *)v17 + 32);
    if (v24)
    {
      *((void *)v17 + 32) = 0;
      free(v24);
    }
    unint64_t v25 = 8 * a1;
    if (a2 && v25)
    {
      size_t v26 = 0;
      if (((v25 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v25)) {
        goto LABEL_25;
      }
      size_t v26 = v25 * a2;
      if (!(v25 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v27 = 1556728742;
    }
    else
    {
      size_t v26 = 0;
      malloc_type_id_t v27 = 1270757447;
    }
    size_t v26 = (size_t)malloc_type_malloc(v26, v27);
LABEL_25:
    *((void *)v17 + 32) = v26;
    *((void *)v17 + 33) = a2;
    *((void *)v17 + 34) = a1;
    *((void *)v17 + 35) = v25;
  }
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_v216;
  *a11 = vt_VImage_Cleanup_RGhA_v216;
  *a8 = v17;
  return v23;
}

uint64_t vt_VImage_Setup_RGhA_R10k(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v16 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v16 = 0u;
  v16[1] = 0u;
  v16[2] = 0u;
  v16[3] = 0u;
  v16[4] = 0u;
  v16[5] = 0u;
  v16[6] = 0u;
  v16[7] = 0u;
  v16[8] = 0u;
  v16[9] = 0u;
  v16[10] = 0u;
  v16[11] = 0u;
  v16[12] = 0u;
  v16[13] = 0u;
  v16[14] = 0u;
  v16[15] = 0u;
  v16[16] = 0u;
  v16[17] = 0u;
  v16[18] = 0u;
  if (a1)
  {
    unint64_t v17 = 8 * a1;
    if (a2 && v17)
    {
      if (((v17 | a2) & 0x8000000000000000) != 0 || !is_mul_ok(a2, v17))
      {
        size_t v18 = 0;
LABEL_11:
        *((void *)v16 + 32) = v18;
        *((void *)v16 + 33) = a2;
        *((void *)v16 + 34) = a1;
        *((void *)v16 + 35) = v17;
        goto LABEL_12;
      }
      size_t v18 = v17 * a2;
      if (!(v17 * a2)) {
        goto LABEL_11;
      }
      malloc_type_id_t v19 = 1556728742;
LABEL_10:
      size_t v18 = (size_t)malloc_type_malloc(v18, v19);
      goto LABEL_11;
    }
LABEL_9:
    size_t v18 = 0;
    malloc_type_id_t v19 = 1270757447;
    goto LABEL_10;
  }
  if (a2)
  {
    unint64_t v17 = 0;
    goto LABEL_9;
  }
LABEL_12:
  *((void *)v16 + 37) = a5;
  *((unsigned char *)v16 + 288) = a6;
  *a9 = vt_VImage_Copy_RGhA_R10k;
  *a11 = vt_VImage_Cleanup_RGhA_R10k;
  *a8 = v16;
  return 0;
}

uint64_t vt_Copy_RGhA_p420ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v245 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12) {
    unint64_t v14 = v13 - v12;
  }
  else {
    unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(void *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    unint64_t v15 = ((*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v16 = v13 % 6;
  _CF = v14 >= v16;
  unint64_t v18 = v14 - v16;
  if (!_CF) {
    unint64_t v18 = 0;
  }
  if (v15 >= 2)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 / 3;
    unsigned int v21 = v12 % 3;
    unint64_t v22 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v23 = v15 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = a7[1] + v24 * (v11 >> 1);
    uint64_t v26 = *a7 + *a8 * v11 + 4 * v20;
    malloc_type_id_t v27 = (int *)(v26 + *a8);
    uint64_t v28 = *a3;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v9;
    uint64_t v31 = 8 * v10;
    unsigned int v32 = (_WORD *)(v30 + 8 * v10);
    unsigned int v33 = (_WORD *)((char *)v32 + *a4);
    uint64_t v238 = v29 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v237 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v236 = v24 >> 2;
    uint64_t v235 = 2 * v29;
    uint64_t v34 = v28 + v29 + v29 * (v8 + (v8 & 1));
    int v35 = (__int32 *)(v25 + 4 * v20);
    unint64_t v232 = v14;
    unsigned int v231 = v21;
    unint64_t v230 = v23;
    do
    {
      uint64_t v36 = 0;
      uint64_t v240 = v34;
      v241 = v33;
      v242 = v32;
      uint64_t v243 = v30;
      uint64_t v37 = v30;
      uint64_t v38 = v32;
      uint64_t v39 = v33;
      int v40 = (int *)v26;
      unsigned int v41 = v21;
      unsigned int v42 = v21;
      v239 = v35;
      v244 = v27;
      uint64_t v43 = v27;
      do
      {
        uint64_t v44 = v43;
        uint64_t v45 = v40;
        if (v36)
        {
          long long v49 = (__int16 *)(v37 + v31 - 8);
          uint64_t v46 = v38 - 3;
          uint64_t v47 = v38 - 2;
          _H19 = *(_WORD *)(v37 + v31);
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v37 + v31 + 2);
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v37 + v31 + 4);
          __asm { FCVT            S21, H21 }
        }
        else
        {
          uint64_t v46 = (__int16 *)(v37 + v31 + 2);
          uint64_t v47 = (__int16 *)(v37 + v31 + 4);
          _S19 = 0.0;
          long long v49 = v38;
          _S20 = 0.0;
          _S21 = 0.0;
        }
        _H23 = *v47;
        _H24 = *v46;
        _H22 = *v49;
        __asm
        {
          FCVT            D22, H22
          FCVT            D24, H24
          FCVT            D23, H23
        }
        unint64_t v64 = *((unsigned __int8 *)&v245 + v42);
        *uint64_t v45 = ((int)((_D24 * 0.580573067 + _D22 * 0.22495132 + _D23 * 0.0507805982) * 1023.0 + 64.0) << v64) | *v45 & ~(1023 << v64);
        if (v36)
        {
          long long v68 = (__int16 *)(v34 + v31 - 8);
          long long v65 = v39 - 3;
          long long v66 = v39 - 2;
          _H25 = *(_WORD *)(v34 + v31);
          __asm { FCVT            S28, H25 }
          _H25 = *(_WORD *)(v34 + v31 + 2);
          __asm { FCVT            S29, H25 }
          _H25 = *(_WORD *)(v34 + v31 + 4);
          __asm { FCVT            S30, H25 }
        }
        else
        {
          long long v65 = (__int16 *)(v34 + v31 + 2);
          long long v66 = (__int16 *)(v34 + v31 + 4);
          _S28 = 0.0;
          long long v68 = v39;
          _S29 = 0.0;
          _S30 = 0.0;
        }
        _H26 = *v66;
        _H27 = *v65;
        _H25 = *v68;
        __asm
        {
          FCVT            D25, H25
          FCVT            D27, H27
          FCVT            D26, H26
        }
        if (v36)
        {
          float64x2_t v81 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D500, _D24), (float64x2_t)xmmword_193E7D510, _D22), (float64x2_t)xmmword_193E7D520, _D23), (float64x2_t)xmmword_193E7D510, _S19), (float64x2_t)xmmword_193E7D500,
                                  _S20),
                                (float64x2_t)xmmword_193E7D520,
                                _S21),
                              (float64x2_t)xmmword_193E7D510,
                              _D25),
                            (float64x2_t)xmmword_193E7D500,
                            _D27),
                          (float64x2_t)xmmword_193E7D520,
                          _D26),
                        (float64x2_t)xmmword_193E7D510,
                        _S28),
                      (float64x2_t)xmmword_193E7D500,
                      _S29),
                    (float64x2_t)xmmword_193E7D520,
                    _S30),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V20.2D, #0.25 }
          int32x2_t v80 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v81, _Q20)))), (int32x2_t)0x20000000200);
        }
        else
        {
          int32x2_t v80 = 0;
        }
        int *v43 = *v43 & ~(1023 << v64) | ((int)((_D27 * 0.580573067 + _D25 * 0.22495132 + _D26 * 0.0507805982) * 1023.0
                                            + 64.0) << v64);
        if (v42 == 2) {
          unsigned int v42 = 0;
        }
        else {
          ++v42;
        }
        if (v36)
        {
          unint64_t v83 = *((unsigned __int8 *)&v245 + v41);
          *int v35 = *v35 & ~(1023 << v83) | (v80.i32[0] << v83);
          int v84 = (__int32 *)((char *)v35 + ((v83 >> 2) & 0x3C));
          if (v41 == 2) {
            unsigned int v85 = 0;
          }
          else {
            unsigned int v85 = v41 + 1;
          }
          unint64_t v86 = *((unsigned __int8 *)&v245 + v85);
          *int v84 = *v84 & ~(1023 << v86) | (v80.i32[1] << v86);
          int v35 = (__int32 *)((char *)v84 + ((v86 >> 2) & 0x3C));
          if (v85 == 2) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = v85 + 1;
          }
        }
        v38 += 4;
        int v40 = &v45[v64 >> 4];
        v39 += 4;
        ++v36;
        v37 += 8;
        v43 += v64 >> 4;
        v34 += 8;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        int v184 = (__int16 *)(v37 + v31);
        unint64_t v183 = (__int16 *)(v34 + v31);
        unint64_t v92 = v22;
      }
      else
      {
        uint64_t v233 = v26;
        uint64_t v234 = v19;
        unint64_t v87 = 0;
        uint64_t v88 = (v64 >> 2) & 0x3C;
        int v89 = (char *)v44 + v88;
        int v90 = (char *)v45 + v88;
        uint64_t v91 = v31;
        unint64_t v92 = v22;
        do
        {
          _H19 = *(_WORD *)(v37 + v91);
          _H20 = *(_WORD *)(v37 + v91 + 2);
          _H21 = *(_WORD *)(v37 + v91 + 4);
          __asm
          {
            FCVT            D27, H19
            FCVT            D28, H20
            FCVT            D29, H21
          }
          _H21 = *(_WORD *)(v37 + v91 + 8);
          _H22 = *(_WORD *)(v37 + v91 + 10);
          _H23 = *(_WORD *)(v37 + v91 + 12);
          __asm
          {
            FCVT            D30, H21
            FCVT            D31, H22
            FCVT            D26, H23
          }
          _H22 = *(_WORD *)(v34 + v91);
          _H23 = *(_WORD *)(v34 + v91 + 2);
          _H8 = *(_WORD *)(v34 + v91 + 4);
          __asm
          {
            FCVT            D25, H22
            FCVT            D24, H23
            FCVT            D23, H8
          }
          _H22 = *(_WORD *)(v34 + v91 + 8);
          int v112 = (int)((_D28 * 0.580573067 + _D27 * 0.22495132 + _D29 * 0.0507805982) * 1023.0 + 64.0);
          _H20 = *(_WORD *)(v34 + v91 + 10);
          _H9 = *(_WORD *)(v34 + v91 + 12);
          __asm
          {
            FCVT            D22, H22
            FCVT            D20, H20
          }
          int v117 = (int)((_D31 * 0.580573067 + _D30 * 0.22495132 + _D26 * 0.0507805982) * 1023.0 + 64.0);
          __asm { FCVT            D21, H9 }
          int v119 = (int)((_D24 * 0.580573067 + _D25 * 0.22495132 + _D23 * 0.0507805982) * 1023.0 + 64.0);
          int v120 = (int)((_D20 * 0.580573067 + _D22 * 0.22495132 + _D21 * 0.0507805982) * 1023.0 + 64.0);
          _D8 = _D28 * -0.315631984 + _D27 * -0.122295679 + _D29 * 0.437927664 + _D30 * -0.122295679;
          double v122 = _D28 * -0.402705142 + _D27 * 0.437927664 + _D29 * -0.035222522 + _D30 * 0.437927664;
          double v123 = _D8 + _D31 * -0.315631984;
          _D27 = v122 + _D31 * -0.402705142;
          LOWORD(_D29) = *(_WORD *)(v37 + v91 + 16);
          LOWORD(_D30) = *(_WORD *)(v37 + v91 + 18);
          LOWORD(_D31) = *(_WORD *)(v37 + v91 + 20);
          __asm { FCVT            D29, H29 }
          double v126 = v123 + _D26 * 0.437927664;
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          double v129 = _D27 + _D26 * -0.035222522;
          LOWORD(_D27) = *(_WORD *)(v37 + v91 + 24);
          LOWORD(_D8) = *(_WORD *)(v37 + v91 + 26);
          double v130 = v126 + _D25 * -0.122295679;
          _H9 = *(_WORD *)(v37 + v91 + 28);
          __asm
          {
            FCVT            D27, H27
            FCVT            D8, H8
          }
          _D25 = v129 + _D25 * 0.437927664;
          __asm { FCVT            D26, H9 }
          int v136 = (int)((_D8 * 0.580573067 + _D27 * 0.22495132 + _D26 * 0.0507805982) * 1023.0 + 64.0);
          double v137 = v130 + _D24 * -0.315631984;
          _H9 = *(_WORD *)(v34 + v91 + 16);
          _H10 = *(_WORD *)(v34 + v91 + 18);
          _H11 = *(_WORD *)(v34 + v91 + 20);
          __asm
          {
            FCVT            D9, H9
            FCVT            D10, H10
          }
          double v143 = _D25 + _D24 * -0.402705142;
          __asm { FCVT            D11, H11 }
          double v145 = v137 + _D23 * 0.437927664;
          LOWORD(_D25) = *(_WORD *)(v34 + v91 + 24);
          _H12 = *(_WORD *)(v34 + v91 + 26);
          _H13 = *(_WORD *)(v34 + v91 + 28);
          double v148 = v143 + _D23 * -0.035222522;
          __asm
          {
            FCVT            D24, H25
            FCVT            D25, H12
            FCVT            D13, H13
          }
          int v152 = (int)((_D25 * 0.580573067 + _D24 * 0.22495132 + _D13 * 0.0507805982) * 1023.0 + 64.0);
          _D28 = v145 + _D22 * -0.122295679 + _D20 * -0.315631984;
          int v154 = (int *)&v89[v87];
          int v155 = v112 | (v117 << 10);
          unint64_t v156 = (unsigned int *)&v35[v87 / 4];
          _D20 = v148 + _D22 * 0.437927664 + _D20 * -0.402705142 + _D21 * -0.035222522;
          int v158 = v119 | (v120 << 10);
          unsigned int v159 = (int *)&v90[v87];
          *unsigned int v159 = v155 | ((int)((_D30 * 0.580573067 + _D29 * 0.22495132 + _D31 * 0.0507805982) * 1023.0 + 64.0) << 20);
          int *v154 = v158 | ((int)((_D10 * 0.580573067 + _D9 * 0.22495132 + _D11 * 0.0507805982) * 1023.0 + 64.0) << 20);
          _D23 = (_D30 * -0.315631984
                + _D29 * -0.122295679
                + _D31 * 0.437927664
                + _D27 * -0.122295679
                + _D8 * -0.315631984
                + _D26 * 0.437927664
                + _D9 * -0.122295679
                + _D10 * -0.315631984
                + _D11 * 0.437927664
                + _D24 * -0.122295679
                + _D25 * -0.315631984
                + _D13 * 0.437927664)
               * 1023.0
               * 0.25;
          _D22 = (_D30 * -0.402705142
                + _D29 * 0.437927664
                + _D31 * -0.035222522
                + _D27 * 0.437927664
                + _D8 * -0.402705142
                + _D26 * -0.035222522
                + _D9 * 0.437927664
                + _D10 * -0.402705142
                + _D11 * -0.035222522
                + _D24 * 0.437927664
                + _D25 * -0.402705142
                + _D13 * -0.035222522)
               * 1023.0;
          LOWORD(_D24) = *(_WORD *)(v37 + v91 + 32);
          LOWORD(_D25) = *(_WORD *)(v37 + v91 + 34);
          LOWORD(_D26) = *(_WORD *)(v37 + v91 + 36);
          __asm
          {
            FCVT            D24, H24
            FCVT            D25, H25
            FCVT            D26, H26
          }
          *(float *)&_D21 = (_D28 + _D21 * 0.437927664) * 1023.0 * 0.25;
          LOWORD(_D27) = *(_WORD *)(v37 + v91 + 40);
          LOWORD(_D28) = *(_WORD *)(v37 + v91 + 42);
          *(float *)&_D20 = _D20 * 1023.0 * 0.25;
          LOWORD(_D29) = *(_WORD *)(v37 + v91 + 44);
          __asm
          {
            FCVT            D27, H27
            FCVT            D28, H28
          }
          *(float *)&_D23 = _D23;
          __asm { FCVT            D29, H29 }
          *(float *)&_D22 = _D22 * 0.25;
          int v168 = v136 | ((int)((_D25 * 0.580573067 + _D24 * 0.22495132 + _D26 * 0.0507805982) * 1023.0 + 64.0) << 10) | ((int)((_D28 * 0.580573067 + _D27 * 0.22495132 + _D29 * 0.0507805982) * 1023.0 + 64.0) << 20);
          LOWORD(_D30) = *(_WORD *)(v34 + v91 + 32);
          LOWORD(_D31) = *(_WORD *)(v34 + v91 + 34);
          unsigned int v169 = llroundf(*(float *)&_D21);
          LOWORD(_D21) = *(_WORD *)(v34 + v91 + 36);
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          unsigned int v172 = llroundf(*(float *)&_D20);
          __asm { FCVT            D21, H21 }
          unsigned int v174 = llroundf(*(float *)&_D23);
          LOWORD(_D20) = *(_WORD *)(v34 + v91 + 40);
          LOWORD(_D23) = *(_WORD *)(v34 + v91 + 42);
          unsigned int v175 = llroundf(*(float *)&_D22);
          LOWORD(_D22) = *(_WORD *)(v34 + v91 + 44);
          __asm
          {
            FCVT            D20, H20
            FCVT            D23, H23
            FCVT            D22, H22
          }
          unsigned int v179 = v175 + 512;
          float v180 = (_D25 * -0.315631984
                + _D24 * -0.122295679
                + _D26 * 0.437927664
                + _D27 * -0.122295679
                + _D28 * -0.315631984
                + _D29 * 0.437927664
                + _D30 * -0.122295679
                + _D31 * -0.315631984
                + _D21 * 0.437927664
                + _D20 * -0.122295679
                + _D23 * -0.315631984
                + _D22 * 0.437927664)
               * 1023.0
               * 0.25;
          unsigned int v181 = llroundf(v180);
          *unint64_t v156 = ((v172 << 10) + 0x80000) | (v169 + 512) | ((v174 << 20) + 0x20000000);
          float v182 = (_D25 * -0.402705142
                + _D24 * 0.437927664
                + _D26 * -0.035222522
                + _D27 * 0.437927664
                + _D28 * -0.402705142
                + _D29 * -0.035222522
                + _D30 * 0.437927664
                + _D31 * -0.402705142
                + _D21 * -0.035222522
                + _D20 * 0.437927664
                + _D23 * -0.402705142
                + _D22 * -0.035222522)
               * 1023.0
               * 0.25;
          v159[1] = v168;
          v154[1] = v152 | ((int)((_D31 * 0.580573067 + _D30 * 0.22495132 + _D21 * 0.0507805982) * 1023.0 + 64.0) << 10) | ((int)((_D23 * 0.580573067 + _D20 * 0.22495132 + _D22 * 0.0507805982) * 1023.0 + 64.0) << 20);
          v156[1] = ((llroundf(v182) << 20) + 0x20000000) | v179 | ((v181 << 10) + 0x80000);
          v92 += 6;
          v87 += 8;
          v91 += 48;
        }
        while (v92 < v18);
        unint64_t v14 = v232;
        uint64_t v43 = (int *)((char *)v44 + ((v64 >> 2) & 0x3C) + v87);
        int v35 = (__int32 *)((char *)v35 + v87);
        int v40 = (int *)((char *)v45 + ((v64 >> 2) & 0x3C) + v87);
        unint64_t v183 = (__int16 *)(v34 + v91);
        int v184 = (__int16 *)(v37 + v91);
        uint64_t v26 = v233;
        uint64_t v19 = v234;
        unsigned int v21 = v231;
        unint64_t v23 = v230;
      }
      if (v92 < v14)
      {
        uint64_t v185 = 0;
        unsigned int v186 = v184;
        uint64_t v187 = v183;
        unsigned int v188 = v18 % 3;
        do
        {
          int v189 = &v184[v185];
          if (v92)
          {
            v193 = v189 - 4;
            v190 = v186 - 3;
            v191 = v186 - 2;
            _H19 = *v189;
            __asm { FCVT            S19, H19 }
            _H20 = v189[1];
            __asm { FCVT            S20, H20 }
            _H21 = v189[2];
            __asm { FCVT            S21, H21 }
          }
          else
          {
            v190 = v189 + 1;
            v191 = v189 + 2;
            _S19 = 0.0;
            v193 = v186;
            _S20 = 0.0;
            _S21 = 0.0;
          }
          _H23 = *v191;
          _H24 = *v190;
          _H22 = *v193;
          __asm
          {
            FCVT            D22, H22
            FCVT            D24, H24
            FCVT            D23, H23
          }
          unint64_t v205 = *((unsigned __int8 *)&v245 + v188);
          *int v40 = ((int)((_D24 * 0.580573067 + _D22 * 0.22495132 + _D23 * 0.0507805982) * 1023.0 + 64.0) << v205) | *v40 & ~(1023 << v205);
          v206 = &v183[v185];
          if (v92)
          {
            v210 = v206 - 4;
            v207 = v187 - 3;
            v208 = v187 - 2;
            _H25 = *v206;
            __asm { FCVT            S28, H25 }
            _H25 = v206[1];
            __asm { FCVT            S29, H25 }
            _H25 = v206[2];
            __asm { FCVT            S30, H25 }
          }
          else
          {
            v207 = v206 + 1;
            v208 = v206 + 2;
            _S28 = 0.0;
            v210 = v187;
            _S29 = 0.0;
            _S30 = 0.0;
          }
          _H26 = *v208;
          _H27 = *v207;
          _H25 = *v210;
          __asm
          {
            FCVT            D25, H25
            FCVT            D27, H27
            FCVT            D26, H26
          }
          if (v92)
          {
            float64x2_t v223 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D500, _D24), (float64x2_t)xmmword_193E7D510, _D22), (float64x2_t)xmmword_193E7D520, _D23), (float64x2_t)xmmword_193E7D510, _S19), (float64x2_t)xmmword_193E7D500,
                                     _S20),
                                   (float64x2_t)xmmword_193E7D520,
                                   _S21),
                                 (float64x2_t)xmmword_193E7D510,
                                 _D25),
                               (float64x2_t)xmmword_193E7D500,
                               _D27),
                             (float64x2_t)xmmword_193E7D520,
                             _D26),
                           (float64x2_t)xmmword_193E7D510,
                           _S28),
                         (float64x2_t)xmmword_193E7D500,
                         _S29),
                       (float64x2_t)xmmword_193E7D520,
                       _S30),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V20.2D, #0.25 }
            int32x2_t v222 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v223, _Q20)))), (int32x2_t)0x20000000200);
          }
          else
          {
            int32x2_t v222 = 0;
          }
          int *v43 = *v43 & ~(1023 << v205) | ((int)((_D27 * 0.580573067 + _D25 * 0.22495132 + _D26 * 0.0507805982) * 1023.0
                                               + 64.0) << v205);
          if (v188 == 2) {
            unsigned int v188 = 0;
          }
          else {
            ++v188;
          }
          if (v92)
          {
            unint64_t v225 = *((unsigned __int8 *)&v245 + v41);
            *int v35 = *v35 & ~(1023 << v225) | (v222.i32[0] << v225);
            v226 = (__int32 *)((char *)v35 + ((v225 >> 2) & 0x3C));
            if (v41 == 2) {
              unsigned int v227 = 0;
            }
            else {
              unsigned int v227 = v41 + 1;
            }
            unint64_t v228 = *((unsigned __int8 *)&v245 + v227);
            __int32 *v226 = *v226 & ~(1023 << v228) | (v222.i32[1] << v228);
            int v35 = (__int32 *)((char *)v226 + ((v228 >> 2) & 0x3C));
            if (v227 == 2) {
              unsigned int v41 = 0;
            }
            else {
              unsigned int v41 = v227 + 1;
            }
          }
          v186 += 4;
          v40 += v205 >> 4;
          v187 += 4;
          ++v92;
          v185 += 4;
          v43 += v205 >> 4;
        }
        while (v14 != v92);
      }
      unsigned int v32 = &v242[v238];
      unsigned int v33 = &v241[v238];
      v26 += 4 * v237;
      ++v19;
      malloc_type_id_t v27 = &v244[v237];
      uint64_t v30 = v243 + v235;
      uint64_t v34 = v240 + v235;
      int v35 = &v239[v236];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGhA_p420ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v245 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12) {
    unint64_t v14 = v13 - v12;
  }
  else {
    unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(void *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    unint64_t v15 = ((*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v16 = v13 % 6;
  _CF = v14 >= v16;
  unint64_t v18 = v14 - v16;
  if (!_CF) {
    unint64_t v18 = 0;
  }
  if (v15 >= 2)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 / 3;
    unsigned int v21 = v12 % 3;
    unint64_t v22 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v23 = v15 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = a7[1] + v24 * (v11 >> 1);
    uint64_t v26 = *a7 + *a8 * v11 + 4 * v20;
    malloc_type_id_t v27 = (int *)(v26 + *a8);
    uint64_t v28 = *a3;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v9;
    uint64_t v31 = 8 * v10;
    unsigned int v32 = (_WORD *)(v30 + 8 * v10);
    unsigned int v33 = (_WORD *)((char *)v32 + *a4);
    uint64_t v238 = v29 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v237 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v236 = v24 >> 2;
    uint64_t v235 = 2 * v29;
    uint64_t v34 = v28 + v29 + v29 * (v8 + (v8 & 1));
    int v35 = (__int32 *)(v25 + 4 * v20);
    unint64_t v232 = v14;
    unsigned int v231 = v21;
    unint64_t v230 = v23;
    do
    {
      uint64_t v36 = 0;
      uint64_t v240 = v34;
      v241 = v33;
      v242 = v32;
      uint64_t v243 = v30;
      uint64_t v37 = v30;
      uint64_t v38 = v32;
      uint64_t v39 = v33;
      int v40 = (int *)v26;
      unsigned int v41 = v21;
      unsigned int v42 = v21;
      v239 = v35;
      v244 = v27;
      uint64_t v43 = v27;
      do
      {
        uint64_t v44 = v43;
        uint64_t v45 = v40;
        if (v36)
        {
          long long v49 = (__int16 *)(v37 + v31 - 8);
          uint64_t v46 = v38 - 3;
          uint64_t v47 = v38 - 2;
          _H19 = *(_WORD *)(v37 + v31);
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v37 + v31 + 2);
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v37 + v31 + 4);
          __asm { FCVT            S21, H21 }
        }
        else
        {
          uint64_t v46 = (__int16 *)(v37 + v31 + 2);
          uint64_t v47 = (__int16 *)(v37 + v31 + 4);
          _S19 = 0.0;
          long long v49 = v38;
          _S20 = 0.0;
          _S21 = 0.0;
        }
        _H23 = *v47;
        _H24 = *v46;
        _H22 = *v49;
        __asm
        {
          FCVT            D22, H22
          FCVT            D24, H24
          FCVT            D23, H23
        }
        unint64_t v64 = *((unsigned __int8 *)&v245 + v42);
        *uint64_t v45 = ((int)((_D24 * 0.614230588 + _D22 * 0.182585882 + _D23 * 0.0620070588) * 1023.0 + 64.0) << v64) | *v45 & ~(1023 << v64);
        if (v36)
        {
          long long v68 = (__int16 *)(v34 + v31 - 8);
          long long v65 = v39 - 3;
          long long v66 = v39 - 2;
          _H25 = *(_WORD *)(v34 + v31);
          __asm { FCVT            S28, H25 }
          _H25 = *(_WORD *)(v34 + v31 + 2);
          __asm { FCVT            S29, H25 }
          _H25 = *(_WORD *)(v34 + v31 + 4);
          __asm { FCVT            S30, H25 }
        }
        else
        {
          long long v65 = (__int16 *)(v34 + v31 + 2);
          long long v66 = (__int16 *)(v34 + v31 + 4);
          _S28 = 0.0;
          long long v68 = v39;
          _S29 = 0.0;
          _S30 = 0.0;
        }
        _H26 = *v66;
        _H27 = *v65;
        _H25 = *v68;
        __asm
        {
          FCVT            D25, H25
          FCVT            D27, H27
          FCVT            D26, H26
        }
        if (v36)
        {
          float64x2_t v81 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D530, _D24), (float64x2_t)xmmword_193E7D540, _D22), (float64x2_t)xmmword_193E7D550, _D23), (float64x2_t)xmmword_193E7D540, _S19), (float64x2_t)xmmword_193E7D530,
                                  _S20),
                                (float64x2_t)xmmword_193E7D550,
                                _S21),
                              (float64x2_t)xmmword_193E7D540,
                              _D25),
                            (float64x2_t)xmmword_193E7D530,
                            _D27),
                          (float64x2_t)xmmword_193E7D550,
                          _D26),
                        (float64x2_t)xmmword_193E7D540,
                        _S28),
                      (float64x2_t)xmmword_193E7D530,
                      _S29),
                    (float64x2_t)xmmword_193E7D550,
                    _S30),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V20.2D, #0.25 }
          int32x2_t v80 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v81, _Q20)))), (int32x2_t)0x20000000200);
        }
        else
        {
          int32x2_t v80 = 0;
        }
        int *v43 = *v43 & ~(1023 << v64) | ((int)((_D27 * 0.614230588 + _D25 * 0.182585882 + _D26 * 0.0620070588) * 1023.0
                                            + 64.0) << v64);
        if (v42 == 2) {
          unsigned int v42 = 0;
        }
        else {
          ++v42;
        }
        if (v36)
        {
          unint64_t v83 = *((unsigned __int8 *)&v245 + v41);
          *int v35 = *v35 & ~(1023 << v83) | (v80.i32[0] << v83);
          int v84 = (__int32 *)((char *)v35 + ((v83 >> 2) & 0x3C));
          if (v41 == 2) {
            unsigned int v85 = 0;
          }
          else {
            unsigned int v85 = v41 + 1;
          }
          unint64_t v86 = *((unsigned __int8 *)&v245 + v85);
          *int v84 = *v84 & ~(1023 << v86) | (v80.i32[1] << v86);
          int v35 = (__int32 *)((char *)v84 + ((v86 >> 2) & 0x3C));
          if (v85 == 2) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = v85 + 1;
          }
        }
        v38 += 4;
        int v40 = &v45[v64 >> 4];
        v39 += 4;
        ++v36;
        v37 += 8;
        v43 += v64 >> 4;
        v34 += 8;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        int v184 = (__int16 *)(v37 + v31);
        unint64_t v183 = (__int16 *)(v34 + v31);
        unint64_t v92 = v22;
      }
      else
      {
        uint64_t v233 = v26;
        uint64_t v234 = v19;
        unint64_t v87 = 0;
        uint64_t v88 = (v64 >> 2) & 0x3C;
        int v89 = (char *)v44 + v88;
        int v90 = (char *)v45 + v88;
        uint64_t v91 = v31;
        unint64_t v92 = v22;
        do
        {
          _H19 = *(_WORD *)(v37 + v91);
          _H20 = *(_WORD *)(v37 + v91 + 2);
          _H21 = *(_WORD *)(v37 + v91 + 4);
          __asm
          {
            FCVT            D27, H19
            FCVT            D28, H20
            FCVT            D29, H21
          }
          _H21 = *(_WORD *)(v37 + v91 + 8);
          _H22 = *(_WORD *)(v37 + v91 + 10);
          _H23 = *(_WORD *)(v37 + v91 + 12);
          __asm
          {
            FCVT            D30, H21
            FCVT            D31, H22
            FCVT            D26, H23
          }
          _H22 = *(_WORD *)(v34 + v91);
          _H23 = *(_WORD *)(v34 + v91 + 2);
          _H8 = *(_WORD *)(v34 + v91 + 4);
          __asm
          {
            FCVT            D25, H22
            FCVT            D24, H23
            FCVT            D23, H8
          }
          _H22 = *(_WORD *)(v34 + v91 + 8);
          int v112 = (int)((_D28 * 0.614230588 + _D27 * 0.182585882 + _D29 * 0.0620070588) * 1023.0 + 64.0);
          _H20 = *(_WORD *)(v34 + v91 + 10);
          _H9 = *(_WORD *)(v34 + v91 + 12);
          __asm
          {
            FCVT            D22, H22
            FCVT            D20, H20
          }
          int v117 = (int)((_D31 * 0.614230588 + _D30 * 0.182585882 + _D26 * 0.0620070588) * 1023.0 + 64.0);
          __asm { FCVT            D21, H9 }
          int v119 = (int)((_D24 * 0.614230588 + _D25 * 0.182585882 + _D23 * 0.0620070588) * 1023.0 + 64.0);
          int v120 = (int)((_D20 * 0.614230588 + _D22 * 0.182585882 + _D21 * 0.0620070588) * 1023.0 + 64.0);
          _D8 = _D28 * -0.338572047 + _D27 * -0.100643639 + _D29 * 0.439215686 + _D30 * -0.100643639;
          double v122 = _D28 * -0.398942243 + _D27 * 0.439215686 + _D29 * -0.0402734431 + _D30 * 0.439215686;
          double v123 = _D8 + _D31 * -0.338572047;
          _D27 = v122 + _D31 * -0.398942243;
          LOWORD(_D29) = *(_WORD *)(v37 + v91 + 16);
          LOWORD(_D30) = *(_WORD *)(v37 + v91 + 18);
          LOWORD(_D31) = *(_WORD *)(v37 + v91 + 20);
          __asm { FCVT            D29, H29 }
          double v126 = v123 + _D26 * 0.439215686;
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          double v129 = _D27 + _D26 * -0.0402734431;
          LOWORD(_D27) = *(_WORD *)(v37 + v91 + 24);
          LOWORD(_D8) = *(_WORD *)(v37 + v91 + 26);
          double v130 = v126 + _D25 * -0.100643639;
          _H9 = *(_WORD *)(v37 + v91 + 28);
          __asm
          {
            FCVT            D27, H27
            FCVT            D8, H8
          }
          _D25 = v129 + _D25 * 0.439215686;
          __asm { FCVT            D26, H9 }
          int v136 = (int)((_D8 * 0.614230588 + _D27 * 0.182585882 + _D26 * 0.0620070588) * 1023.0 + 64.0);
          double v137 = v130 + _D24 * -0.338572047;
          _H9 = *(_WORD *)(v34 + v91 + 16);
          _H10 = *(_WORD *)(v34 + v91 + 18);
          _H11 = *(_WORD *)(v34 + v91 + 20);
          __asm
          {
            FCVT            D9, H9
            FCVT            D10, H10
          }
          double v143 = _D25 + _D24 * -0.398942243;
          __asm { FCVT            D11, H11 }
          double v145 = v137 + _D23 * 0.439215686;
          LOWORD(_D25) = *(_WORD *)(v34 + v91 + 24);
          _H12 = *(_WORD *)(v34 + v91 + 26);
          _H13 = *(_WORD *)(v34 + v91 + 28);
          double v148 = v143 + _D23 * -0.0402734431;
          __asm
          {
            FCVT            D24, H25
            FCVT            D25, H12
            FCVT            D13, H13
          }
          int v152 = (int)((_D25 * 0.614230588 + _D24 * 0.182585882 + _D13 * 0.0620070588) * 1023.0 + 64.0);
          _D28 = v145 + _D22 * -0.100643639 + _D20 * -0.338572047;
          int v154 = (int *)&v89[v87];
          int v155 = v112 | (v117 << 10);
          unint64_t v156 = (unsigned int *)&v35[v87 / 4];
          _D20 = v148 + _D22 * 0.439215686 + _D20 * -0.398942243 + _D21 * -0.0402734431;
          int v158 = v119 | (v120 << 10);
          unsigned int v159 = (int *)&v90[v87];
          *unsigned int v159 = v155 | ((int)((_D30 * 0.614230588 + _D29 * 0.182585882 + _D31 * 0.0620070588) * 1023.0 + 64.0) << 20);
          int *v154 = v158 | ((int)((_D10 * 0.614230588 + _D9 * 0.182585882 + _D11 * 0.0620070588) * 1023.0 + 64.0) << 20);
          _D23 = (_D30 * -0.338572047
                + _D29 * -0.100643639
                + _D31 * 0.439215686
                + _D27 * -0.100643639
                + _D8 * -0.338572047
                + _D26 * 0.439215686
                + _D9 * -0.100643639
                + _D10 * -0.338572047
                + _D11 * 0.439215686
                + _D24 * -0.100643639
                + _D25 * -0.338572047
                + _D13 * 0.439215686)
               * 1023.0
               * 0.25;
          _D22 = (_D30 * -0.398942243
                + _D29 * 0.439215686
                + _D31 * -0.0402734431
                + _D27 * 0.439215686
                + _D8 * -0.398942243
                + _D26 * -0.0402734431
                + _D9 * 0.439215686
                + _D10 * -0.398942243
                + _D11 * -0.0402734431
                + _D24 * 0.439215686
                + _D25 * -0.398942243
                + _D13 * -0.0402734431)
               * 1023.0;
          LOWORD(_D24) = *(_WORD *)(v37 + v91 + 32);
          LOWORD(_D25) = *(_WORD *)(v37 + v91 + 34);
          LOWORD(_D26) = *(_WORD *)(v37 + v91 + 36);
          __asm
          {
            FCVT            D24, H24
            FCVT            D25, H25
            FCVT            D26, H26
          }
          *(float *)&_D21 = (_D28 + _D21 * 0.439215686) * 1023.0 * 0.25;
          LOWORD(_D27) = *(_WORD *)(v37 + v91 + 40);
          LOWORD(_D28) = *(_WORD *)(v37 + v91 + 42);
          *(float *)&_D20 = _D20 * 1023.0 * 0.25;
          LOWORD(_D29) = *(_WORD *)(v37 + v91 + 44);
          __asm
          {
            FCVT            D27, H27
            FCVT            D28, H28
          }
          *(float *)&_D23 = _D23;
          __asm { FCVT            D29, H29 }
          *(float *)&_D22 = _D22 * 0.25;
          int v168 = v136 | ((int)((_D25 * 0.614230588 + _D24 * 0.182585882 + _D26 * 0.0620070588) * 1023.0 + 64.0) << 10) | ((int)((_D28 * 0.614230588 + _D27 * 0.182585882 + _D29 * 0.0620070588) * 1023.0 + 64.0) << 20);
          LOWORD(_D30) = *(_WORD *)(v34 + v91 + 32);
          LOWORD(_D31) = *(_WORD *)(v34 + v91 + 34);
          unsigned int v169 = llroundf(*(float *)&_D21);
          LOWORD(_D21) = *(_WORD *)(v34 + v91 + 36);
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          unsigned int v172 = llroundf(*(float *)&_D20);
          __asm { FCVT            D21, H21 }
          unsigned int v174 = llroundf(*(float *)&_D23);
          LOWORD(_D20) = *(_WORD *)(v34 + v91 + 40);
          LOWORD(_D23) = *(_WORD *)(v34 + v91 + 42);
          unsigned int v175 = llroundf(*(float *)&_D22);
          LOWORD(_D22) = *(_WORD *)(v34 + v91 + 44);
          __asm
          {
            FCVT            D20, H20
            FCVT            D23, H23
            FCVT            D22, H22
          }
          unsigned int v179 = v175 + 512;
          float v180 = (_D25 * -0.338572047
                + _D24 * -0.100643639
                + _D26 * 0.439215686
                + _D27 * -0.100643639
                + _D28 * -0.338572047
                + _D29 * 0.439215686
                + _D30 * -0.100643639
                + _D31 * -0.338572047
                + _D21 * 0.439215686
                + _D20 * -0.100643639
                + _D23 * -0.338572047
                + _D22 * 0.439215686)
               * 1023.0
               * 0.25;
          unsigned int v181 = llroundf(v180);
          *unint64_t v156 = ((v172 << 10) + 0x80000) | (v169 + 512) | ((v174 << 20) + 0x20000000);
          float v182 = (_D25 * -0.398942243
                + _D24 * 0.439215686
                + _D26 * -0.0402734431
                + _D27 * 0.439215686
                + _D28 * -0.398942243
                + _D29 * -0.0402734431
                + _D30 * 0.439215686
                + _D31 * -0.398942243
                + _D21 * -0.0402734431
                + _D20 * 0.439215686
                + _D23 * -0.398942243
                + _D22 * -0.0402734431)
               * 1023.0
               * 0.25;
          v159[1] = v168;
          v154[1] = v152 | ((int)((_D31 * 0.614230588 + _D30 * 0.182585882 + _D21 * 0.0620070588) * 1023.0 + 64.0) << 10) | ((int)((_D23 * 0.614230588 + _D20 * 0.182585882 + _D22 * 0.0620070588) * 1023.0 + 64.0) << 20);
          v156[1] = ((llroundf(v182) << 20) + 0x20000000) | v179 | ((v181 << 10) + 0x80000);
          v92 += 6;
          v87 += 8;
          v91 += 48;
        }
        while (v92 < v18);
        unint64_t v14 = v232;
        uint64_t v43 = (int *)((char *)v44 + ((v64 >> 2) & 0x3C) + v87);
        int v35 = (__int32 *)((char *)v35 + v87);
        int v40 = (int *)((char *)v45 + ((v64 >> 2) & 0x3C) + v87);
        unint64_t v183 = (__int16 *)(v34 + v91);
        int v184 = (__int16 *)(v37 + v91);
        uint64_t v26 = v233;
        uint64_t v19 = v234;
        unsigned int v21 = v231;
        unint64_t v23 = v230;
      }
      if (v92 < v14)
      {
        uint64_t v185 = 0;
        unsigned int v186 = v184;
        uint64_t v187 = v183;
        unsigned int v188 = v18 % 3;
        do
        {
          int v189 = &v184[v185];
          if (v92)
          {
            v193 = v189 - 4;
            v190 = v186 - 3;
            v191 = v186 - 2;
            _H19 = *v189;
            __asm { FCVT            S19, H19 }
            _H20 = v189[1];
            __asm { FCVT            S20, H20 }
            _H21 = v189[2];
            __asm { FCVT            S21, H21 }
          }
          else
          {
            v190 = v189 + 1;
            v191 = v189 + 2;
            _S19 = 0.0;
            v193 = v186;
            _S20 = 0.0;
            _S21 = 0.0;
          }
          _H23 = *v191;
          _H24 = *v190;
          _H22 = *v193;
          __asm
          {
            FCVT            D22, H22
            FCVT            D24, H24
            FCVT            D23, H23
          }
          unint64_t v205 = *((unsigned __int8 *)&v245 + v188);
          *int v40 = ((int)((_D24 * 0.614230588 + _D22 * 0.182585882 + _D23 * 0.0620070588) * 1023.0 + 64.0) << v205) | *v40 & ~(1023 << v205);
          v206 = &v183[v185];
          if (v92)
          {
            v210 = v206 - 4;
            v207 = v187 - 3;
            v208 = v187 - 2;
            _H25 = *v206;
            __asm { FCVT            S28, H25 }
            _H25 = v206[1];
            __asm { FCVT            S29, H25 }
            _H25 = v206[2];
            __asm { FCVT            S30, H25 }
          }
          else
          {
            v207 = v206 + 1;
            v208 = v206 + 2;
            _S28 = 0.0;
            v210 = v187;
            _S29 = 0.0;
            _S30 = 0.0;
          }
          _H26 = *v208;
          _H27 = *v207;
          _H25 = *v210;
          __asm
          {
            FCVT            D25, H25
            FCVT            D27, H27
            FCVT            D26, H26
          }
          if (v92)
          {
            float64x2_t v223 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D530, _D24), (float64x2_t)xmmword_193E7D540, _D22), (float64x2_t)xmmword_193E7D550, _D23), (float64x2_t)xmmword_193E7D540, _S19), (float64x2_t)xmmword_193E7D530,
                                     _S20),
                                   (float64x2_t)xmmword_193E7D550,
                                   _S21),
                                 (float64x2_t)xmmword_193E7D540,
                                 _D25),
                               (float64x2_t)xmmword_193E7D530,
                               _D27),
                             (float64x2_t)xmmword_193E7D550,
                             _D26),
                           (float64x2_t)xmmword_193E7D540,
                           _S28),
                         (float64x2_t)xmmword_193E7D530,
                         _S29),
                       (float64x2_t)xmmword_193E7D550,
                       _S30),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V20.2D, #0.25 }
            int32x2_t v222 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v223, _Q20)))), (int32x2_t)0x20000000200);
          }
          else
          {
            int32x2_t v222 = 0;
          }
          int *v43 = *v43 & ~(1023 << v205) | ((int)((_D27 * 0.614230588 + _D25 * 0.182585882 + _D26 * 0.0620070588)
                                               * 1023.0
                                               + 64.0) << v205);
          if (v188 == 2) {
            unsigned int v188 = 0;
          }
          else {
            ++v188;
          }
          if (v92)
          {
            unint64_t v225 = *((unsigned __int8 *)&v245 + v41);
            *int v35 = *v35 & ~(1023 << v225) | (v222.i32[0] << v225);
            v226 = (__int32 *)((char *)v35 + ((v225 >> 2) & 0x3C));
            if (v41 == 2) {
              unsigned int v227 = 0;
            }
            else {
              unsigned int v227 = v41 + 1;
            }
            unint64_t v228 = *((unsigned __int8 *)&v245 + v227);
            __int32 *v226 = *v226 & ~(1023 << v228) | (v222.i32[1] << v228);
            int v35 = (__int32 *)((char *)v226 + ((v228 >> 2) & 0x3C));
            if (v227 == 2) {
              unsigned int v41 = 0;
            }
            else {
              unsigned int v41 = v227 + 1;
            }
          }
          v186 += 4;
          v40 += v205 >> 4;
          v187 += 4;
          ++v92;
          v185 += 4;
          v43 += v205 >> 4;
        }
        while (v14 != v92);
      }
      unsigned int v32 = &v242[v238];
      unsigned int v33 = &v241[v238];
      v26 += 4 * v237;
      ++v19;
      malloc_type_id_t v27 = &v244[v237];
      uint64_t v30 = v243 + v235;
      uint64_t v34 = v240 + v235;
      int v35 = &v239[v236];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGhA_p420ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v245 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12) {
    unint64_t v14 = v13 - v12;
  }
  else {
    unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(void *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    unint64_t v15 = ((*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v16 = v13 % 6;
  _CF = v14 >= v16;
  unint64_t v18 = v14 - v16;
  if (!_CF) {
    unint64_t v18 = 0;
  }
  if (v15 >= 2)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 / 3;
    unsigned int v21 = v12 % 3;
    unint64_t v22 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v23 = v15 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = a7[1] + v24 * (v11 >> 1);
    uint64_t v26 = *a7 + *a8 * v11 + 4 * v20;
    malloc_type_id_t v27 = (int *)(v26 + *a8);
    uint64_t v28 = *a3;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v9;
    uint64_t v31 = 8 * v10;
    unsigned int v32 = (_WORD *)(v30 + 8 * v10);
    unsigned int v33 = (_WORD *)((char *)v32 + *a4);
    uint64_t v238 = v29 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v237 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v236 = v24 >> 2;
    uint64_t v235 = 2 * v29;
    uint64_t v34 = v28 + v29 + v29 * (v8 + (v8 & 1));
    int v35 = (__int32 *)(v25 + 4 * v20);
    unint64_t v232 = v14;
    unsigned int v231 = v21;
    unint64_t v230 = v23;
    do
    {
      uint64_t v36 = 0;
      uint64_t v240 = v34;
      v241 = v33;
      v242 = v32;
      uint64_t v243 = v30;
      uint64_t v37 = v30;
      uint64_t v38 = v32;
      uint64_t v39 = v33;
      int v40 = (int *)v26;
      unsigned int v41 = v21;
      unsigned int v42 = v21;
      v239 = v35;
      v244 = v27;
      uint64_t v43 = v27;
      do
      {
        uint64_t v44 = v43;
        uint64_t v45 = v40;
        if (v36)
        {
          long long v49 = (__int16 *)(v37 + v31 - 8);
          uint64_t v46 = v38 - 3;
          uint64_t v47 = v38 - 2;
          _H19 = *(_WORD *)(v37 + v31);
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v37 + v31 + 2);
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v37 + v31 + 4);
          __asm { FCVT            S21, H21 }
        }
        else
        {
          uint64_t v46 = (__int16 *)(v37 + v31 + 2);
          uint64_t v47 = (__int16 *)(v37 + v31 + 4);
          _S19 = 0.0;
          long long v49 = v38;
          _S20 = 0.0;
          _S21 = 0.0;
        }
        _H23 = *v47;
        _H24 = *v46;
        _H22 = *v49;
        __asm
        {
          FCVT            D22, H22
          FCVT            D24, H24
          FCVT            D23, H23
        }
        unint64_t v64 = *((unsigned __int8 *)&v245 + v42);
        *uint64_t v45 = ((int)((_D24 * 0.504129412 + _D22 * 0.256788235 + _D23 * 0.0979058824) * 1023.0 + 64.0) << v64) | *v45 & ~(1023 << v64);
        if (v36)
        {
          long long v68 = (__int16 *)(v34 + v31 - 8);
          long long v65 = v39 - 3;
          long long v66 = v39 - 2;
          _H25 = *(_WORD *)(v34 + v31);
          __asm { FCVT            S28, H25 }
          _H25 = *(_WORD *)(v34 + v31 + 2);
          __asm { FCVT            S29, H25 }
          _H25 = *(_WORD *)(v34 + v31 + 4);
          __asm { FCVT            S30, H25 }
        }
        else
        {
          long long v65 = (__int16 *)(v34 + v31 + 2);
          long long v66 = (__int16 *)(v34 + v31 + 4);
          _S28 = 0.0;
          long long v68 = v39;
          _S29 = 0.0;
          _S30 = 0.0;
        }
        _H26 = *v66;
        _H27 = *v65;
        _H25 = *v68;
        __asm
        {
          FCVT            D25, H25
          FCVT            D27, H27
          FCVT            D26, H26
        }
        if (v36)
        {
          float64x2_t v81 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D560, _D24), (float64x2_t)xmmword_193E7D570, _D22), (float64x2_t)xmmword_193E7D580, _D23), (float64x2_t)xmmword_193E7D570, _S19), (float64x2_t)xmmword_193E7D560,
                                  _S20),
                                (float64x2_t)xmmword_193E7D580,
                                _S21),
                              (float64x2_t)xmmword_193E7D570,
                              _D25),
                            (float64x2_t)xmmword_193E7D560,
                            _D27),
                          (float64x2_t)xmmword_193E7D580,
                          _D26),
                        (float64x2_t)xmmword_193E7D570,
                        _S28),
                      (float64x2_t)xmmword_193E7D560,
                      _S29),
                    (float64x2_t)xmmword_193E7D580,
                    _S30),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V20.2D, #0.25 }
          int32x2_t v80 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v81, _Q20)))), (int32x2_t)0x20000000200);
        }
        else
        {
          int32x2_t v80 = 0;
        }
        int *v43 = *v43 & ~(1023 << v64) | ((int)((_D27 * 0.504129412 + _D25 * 0.256788235 + _D26 * 0.0979058824) * 1023.0
                                            + 64.0) << v64);
        if (v42 == 2) {
          unsigned int v42 = 0;
        }
        else {
          ++v42;
        }
        if (v36)
        {
          unint64_t v83 = *((unsigned __int8 *)&v245 + v41);
          *int v35 = *v35 & ~(1023 << v83) | (v80.i32[0] << v83);
          int v84 = (__int32 *)((char *)v35 + ((v83 >> 2) & 0x3C));
          if (v41 == 2) {
            unsigned int v85 = 0;
          }
          else {
            unsigned int v85 = v41 + 1;
          }
          unint64_t v86 = *((unsigned __int8 *)&v245 + v85);
          *int v84 = *v84 & ~(1023 << v86) | (v80.i32[1] << v86);
          int v35 = (__int32 *)((char *)v84 + ((v86 >> 2) & 0x3C));
          if (v85 == 2) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = v85 + 1;
          }
        }
        v38 += 4;
        int v40 = &v45[v64 >> 4];
        v39 += 4;
        ++v36;
        v37 += 8;
        v43 += v64 >> 4;
        v34 += 8;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        int v184 = (__int16 *)(v37 + v31);
        unint64_t v183 = (__int16 *)(v34 + v31);
        unint64_t v92 = v22;
      }
      else
      {
        uint64_t v233 = v26;
        uint64_t v234 = v19;
        unint64_t v87 = 0;
        uint64_t v88 = (v64 >> 2) & 0x3C;
        int v89 = (char *)v44 + v88;
        int v90 = (char *)v45 + v88;
        uint64_t v91 = v31;
        unint64_t v92 = v22;
        do
        {
          _H19 = *(_WORD *)(v37 + v91);
          _H20 = *(_WORD *)(v37 + v91 + 2);
          _H21 = *(_WORD *)(v37 + v91 + 4);
          __asm
          {
            FCVT            D27, H19
            FCVT            D28, H20
            FCVT            D29, H21
          }
          _H21 = *(_WORD *)(v37 + v91 + 8);
          _H22 = *(_WORD *)(v37 + v91 + 10);
          _H23 = *(_WORD *)(v37 + v91 + 12);
          __asm
          {
            FCVT            D30, H21
            FCVT            D31, H22
            FCVT            D26, H23
          }
          _H22 = *(_WORD *)(v34 + v91);
          _H23 = *(_WORD *)(v34 + v91 + 2);
          _H8 = *(_WORD *)(v34 + v91 + 4);
          __asm
          {
            FCVT            D25, H22
            FCVT            D24, H23
            FCVT            D23, H8
          }
          _H22 = *(_WORD *)(v34 + v91 + 8);
          int v112 = (int)((_D28 * 0.504129412 + _D27 * 0.256788235 + _D29 * 0.0979058824) * 1023.0 + 64.0);
          _H20 = *(_WORD *)(v34 + v91 + 10);
          _H9 = *(_WORD *)(v34 + v91 + 12);
          __asm
          {
            FCVT            D22, H22
            FCVT            D20, H20
          }
          int v117 = (int)((_D31 * 0.504129412 + _D30 * 0.256788235 + _D26 * 0.0979058824) * 1023.0 + 64.0);
          __asm { FCVT            D21, H9 }
          int v119 = (int)((_D24 * 0.504129412 + _D25 * 0.256788235 + _D23 * 0.0979058824) * 1023.0 + 64.0);
          int v120 = (int)((_D20 * 0.504129412 + _D22 * 0.256788235 + _D21 * 0.0979058824) * 1023.0 + 64.0);
          _D8 = _D28 * -0.29099269 + _D27 * -0.148222996 + _D29 * 0.439215686 + _D30 * -0.148222996;
          double v122 = _D28 * -0.367788675 + _D27 * 0.439215686 + _D29 * -0.0714270118 + _D30 * 0.439215686;
          double v123 = _D8 + _D31 * -0.29099269;
          _D27 = v122 + _D31 * -0.367788675;
          LOWORD(_D29) = *(_WORD *)(v37 + v91 + 16);
          LOWORD(_D30) = *(_WORD *)(v37 + v91 + 18);
          LOWORD(_D31) = *(_WORD *)(v37 + v91 + 20);
          __asm { FCVT            D29, H29 }
          double v126 = v123 + _D26 * 0.439215686;
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          double v129 = _D27 + _D26 * -0.0714270118;
          LOWORD(_D27) = *(_WORD *)(v37 + v91 + 24);
          LOWORD(_D8) = *(_WORD *)(v37 + v91 + 26);
          double v130 = v126 + _D25 * -0.148222996;
          _H9 = *(_WORD *)(v37 + v91 + 28);
          __asm
          {
            FCVT            D27, H27
            FCVT            D8, H8
          }
          _D25 = v129 + _D25 * 0.439215686;
          __asm { FCVT            D26, H9 }
          int v136 = (int)((_D8 * 0.504129412 + _D27 * 0.256788235 + _D26 * 0.0979058824) * 1023.0 + 64.0);
          double v137 = v130 + _D24 * -0.29099269;
          _H9 = *(_WORD *)(v34 + v91 + 16);
          _H10 = *(_WORD *)(v34 + v91 + 18);
          _H11 = *(_WORD *)(v34 + v91 + 20);
          __asm
          {
            FCVT            D9, H9
            FCVT            D10, H10
          }
          double v143 = _D25 + _D24 * -0.367788675;
          __asm { FCVT            D11, H11 }
          double v145 = v137 + _D23 * 0.439215686;
          LOWORD(_D25) = *(_WORD *)(v34 + v91 + 24);
          _H12 = *(_WORD *)(v34 + v91 + 26);
          _H13 = *(_WORD *)(v34 + v91 + 28);
          double v148 = v143 + _D23 * -0.0714270118;
          __asm
          {
            FCVT            D24, H25
            FCVT            D25, H12
            FCVT            D13, H13
          }
          int v152 = (int)((_D25 * 0.504129412 + _D24 * 0.256788235 + _D13 * 0.0979058824) * 1023.0 + 64.0);
          _D28 = v145 + _D22 * -0.148222996 + _D20 * -0.29099269;
          int v154 = (int *)&v89[v87];
          int v155 = v112 | (v117 << 10);
          unint64_t v156 = (unsigned int *)&v35[v87 / 4];
          _D20 = v148 + _D22 * 0.439215686 + _D20 * -0.367788675 + _D21 * -0.0714270118;
          int v158 = v119 | (v120 << 10);
          unsigned int v159 = (int *)&v90[v87];
          *unsigned int v159 = v155 | ((int)((_D30 * 0.504129412 + _D29 * 0.256788235 + _D31 * 0.0979058824) * 1023.0 + 64.0) << 20);
          int *v154 = v158 | ((int)((_D10 * 0.504129412 + _D9 * 0.256788235 + _D11 * 0.0979058824) * 1023.0 + 64.0) << 20);
          _D23 = (_D30 * -0.29099269
                + _D29 * -0.148222996
                + _D31 * 0.439215686
                + _D27 * -0.148222996
                + _D8 * -0.29099269
                + _D26 * 0.439215686
                + _D9 * -0.148222996
                + _D10 * -0.29099269
                + _D11 * 0.439215686
                + _D24 * -0.148222996
                + _D25 * -0.29099269
                + _D13 * 0.439215686)
               * 1023.0
               * 0.25;
          _D22 = (_D30 * -0.367788675
                + _D29 * 0.439215686
                + _D31 * -0.0714270118
                + _D27 * 0.439215686
                + _D8 * -0.367788675
                + _D26 * -0.0714270118
                + _D9 * 0.439215686
                + _D10 * -0.367788675
                + _D11 * -0.0714270118
                + _D24 * 0.439215686
                + _D25 * -0.367788675
                + _D13 * -0.0714270118)
               * 1023.0;
          LOWORD(_D24) = *(_WORD *)(v37 + v91 + 32);
          LOWORD(_D25) = *(_WORD *)(v37 + v91 + 34);
          LOWORD(_D26) = *(_WORD *)(v37 + v91 + 36);
          __asm
          {
            FCVT            D24, H24
            FCVT            D25, H25
            FCVT            D26, H26
          }
          *(float *)&_D21 = (_D28 + _D21 * 0.439215686) * 1023.0 * 0.25;
          LOWORD(_D27) = *(_WORD *)(v37 + v91 + 40);
          LOWORD(_D28) = *(_WORD *)(v37 + v91 + 42);
          *(float *)&_D20 = _D20 * 1023.0 * 0.25;
          LOWORD(_D29) = *(_WORD *)(v37 + v91 + 44);
          __asm
          {
            FCVT            D27, H27
            FCVT            D28, H28
          }
          *(float *)&_D23 = _D23;
          __asm { FCVT            D29, H29 }
          *(float *)&_D22 = _D22 * 0.25;
          int v168 = v136 | ((int)((_D25 * 0.504129412 + _D24 * 0.256788235 + _D26 * 0.0979058824) * 1023.0 + 64.0) << 10) | ((int)((_D28 * 0.504129412 + _D27 * 0.256788235 + _D29 * 0.0979058824) * 1023.0 + 64.0) << 20);
          LOWORD(_D30) = *(_WORD *)(v34 + v91 + 32);
          LOWORD(_D31) = *(_WORD *)(v34 + v91 + 34);
          unsigned int v169 = llroundf(*(float *)&_D21);
          LOWORD(_D21) = *(_WORD *)(v34 + v91 + 36);
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          unsigned int v172 = llroundf(*(float *)&_D20);
          __asm { FCVT            D21, H21 }
          unsigned int v174 = llroundf(*(float *)&_D23);
          LOWORD(_D20) = *(_WORD *)(v34 + v91 + 40);
          LOWORD(_D23) = *(_WORD *)(v34 + v91 + 42);
          unsigned int v175 = llroundf(*(float *)&_D22);
          LOWORD(_D22) = *(_WORD *)(v34 + v91 + 44);
          __asm
          {
            FCVT            D20, H20
            FCVT            D23, H23
            FCVT            D22, H22
          }
          unsigned int v179 = v175 + 512;
          float v180 = (_D25 * -0.29099269
                + _D24 * -0.148222996
                + _D26 * 0.439215686
                + _D27 * -0.148222996
                + _D28 * -0.29099269
                + _D29 * 0.439215686
                + _D30 * -0.148222996
                + _D31 * -0.29099269
                + _D21 * 0.439215686
                + _D20 * -0.148222996
                + _D23 * -0.29099269
                + _D22 * 0.439215686)
               * 1023.0
               * 0.25;
          unsigned int v181 = llroundf(v180);
          *unint64_t v156 = ((v172 << 10) + 0x80000) | (v169 + 512) | ((v174 << 20) + 0x20000000);
          float v182 = (_D25 * -0.367788675
                + _D24 * 0.439215686
                + _D26 * -0.0714270118
                + _D27 * 0.439215686
                + _D28 * -0.367788675
                + _D29 * -0.0714270118
                + _D30 * 0.439215686
                + _D31 * -0.367788675
                + _D21 * -0.0714270118
                + _D20 * 0.439215686
                + _D23 * -0.367788675
                + _D22 * -0.0714270118)
               * 1023.0
               * 0.25;
          v159[1] = v168;
          v154[1] = v152 | ((int)((_D31 * 0.504129412 + _D30 * 0.256788235 + _D21 * 0.0979058824) * 1023.0 + 64.0) << 10) | ((int)((_D23 * 0.504129412 + _D20 * 0.256788235 + _D22 * 0.0979058824) * 1023.0 + 64.0) << 20);
          v156[1] = ((llroundf(v182) << 20) + 0x20000000) | v179 | ((v181 << 10) + 0x80000);
          v92 += 6;
          v87 += 8;
          v91 += 48;
        }
        while (v92 < v18);
        unint64_t v14 = v232;
        uint64_t v43 = (int *)((char *)v44 + ((v64 >> 2) & 0x3C) + v87);
        int v35 = (__int32 *)((char *)v35 + v87);
        int v40 = (int *)((char *)v45 + ((v64 >> 2) & 0x3C) + v87);
        unint64_t v183 = (__int16 *)(v34 + v91);
        int v184 = (__int16 *)(v37 + v91);
        uint64_t v26 = v233;
        uint64_t v19 = v234;
        unsigned int v21 = v231;
        unint64_t v23 = v230;
      }
      if (v92 < v14)
      {
        uint64_t v185 = 0;
        unsigned int v186 = v184;
        uint64_t v187 = v183;
        unsigned int v188 = v18 % 3;
        do
        {
          int v189 = &v184[v185];
          if (v92)
          {
            v193 = v189 - 4;
            v190 = v186 - 3;
            v191 = v186 - 2;
            _H19 = *v189;
            __asm { FCVT            S19, H19 }
            _H20 = v189[1];
            __asm { FCVT            S20, H20 }
            _H21 = v189[2];
            __asm { FCVT            S21, H21 }
          }
          else
          {
            v190 = v189 + 1;
            v191 = v189 + 2;
            _S19 = 0.0;
            v193 = v186;
            _S20 = 0.0;
            _S21 = 0.0;
          }
          _H23 = *v191;
          _H24 = *v190;
          _H22 = *v193;
          __asm
          {
            FCVT            D22, H22
            FCVT            D24, H24
            FCVT            D23, H23
          }
          unint64_t v205 = *((unsigned __int8 *)&v245 + v188);
          *int v40 = ((int)((_D24 * 0.504129412 + _D22 * 0.256788235 + _D23 * 0.0979058824) * 1023.0 + 64.0) << v205) | *v40 & ~(1023 << v205);
          v206 = &v183[v185];
          if (v92)
          {
            v210 = v206 - 4;
            v207 = v187 - 3;
            v208 = v187 - 2;
            _H25 = *v206;
            __asm { FCVT            S28, H25 }
            _H25 = v206[1];
            __asm { FCVT            S29, H25 }
            _H25 = v206[2];
            __asm { FCVT            S30, H25 }
          }
          else
          {
            v207 = v206 + 1;
            v208 = v206 + 2;
            _S28 = 0.0;
            v210 = v187;
            _S29 = 0.0;
            _S30 = 0.0;
          }
          _H26 = *v208;
          _H27 = *v207;
          _H25 = *v210;
          __asm
          {
            FCVT            D25, H25
            FCVT            D27, H27
            FCVT            D26, H26
          }
          if (v92)
          {
            float64x2_t v223 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D560, _D24), (float64x2_t)xmmword_193E7D570, _D22), (float64x2_t)xmmword_193E7D580, _D23), (float64x2_t)xmmword_193E7D570, _S19), (float64x2_t)xmmword_193E7D560,
                                     _S20),
                                   (float64x2_t)xmmword_193E7D580,
                                   _S21),
                                 (float64x2_t)xmmword_193E7D570,
                                 _D25),
                               (float64x2_t)xmmword_193E7D560,
                               _D27),
                             (float64x2_t)xmmword_193E7D580,
                             _D26),
                           (float64x2_t)xmmword_193E7D570,
                           _S28),
                         (float64x2_t)xmmword_193E7D560,
                         _S29),
                       (float64x2_t)xmmword_193E7D580,
                       _S30),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V20.2D, #0.25 }
            int32x2_t v222 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v223, _Q20)))), (int32x2_t)0x20000000200);
          }
          else
          {
            int32x2_t v222 = 0;
          }
          int *v43 = *v43 & ~(1023 << v205) | ((int)((_D27 * 0.504129412 + _D25 * 0.256788235 + _D26 * 0.0979058824)
                                               * 1023.0
                                               + 64.0) << v205);
          if (v188 == 2) {
            unsigned int v188 = 0;
          }
          else {
            ++v188;
          }
          if (v92)
          {
            unint64_t v225 = *((unsigned __int8 *)&v245 + v41);
            *int v35 = *v35 & ~(1023 << v225) | (v222.i32[0] << v225);
            v226 = (__int32 *)((char *)v35 + ((v225 >> 2) & 0x3C));
            if (v41 == 2) {
              unsigned int v227 = 0;
            }
            else {
              unsigned int v227 = v41 + 1;
            }
            unint64_t v228 = *((unsigned __int8 *)&v245 + v227);
            __int32 *v226 = *v226 & ~(1023 << v228) | (v222.i32[1] << v228);
            int v35 = (__int32 *)((char *)v226 + ((v228 >> 2) & 0x3C));
            if (v227 == 2) {
              unsigned int v41 = 0;
            }
            else {
              unsigned int v41 = v227 + 1;
            }
          }
          v186 += 4;
          v40 += v205 >> 4;
          v187 += 4;
          ++v92;
          v185 += 4;
          v43 += v205 >> 4;
        }
        while (v14 != v92);
      }
      unsigned int v32 = &v242[v238];
      unsigned int v33 = &v241[v238];
      v26 += 4 * v237;
      ++v19;
      malloc_type_id_t v27 = &v244[v237];
      uint64_t v30 = v243 + v235;
      uint64_t v34 = v240 + v235;
      int v35 = &v239[v236];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGhA_pf20ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v239 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if (v14 >= v13 - v12) {
    unint64_t v14 = v13 - v12;
  }
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(void *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    unint64_t v15 = ((*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v16 = v13 % 6;
  _CF = v14 >= v16;
  unint64_t v18 = v14 - v16;
  if (!_CF) {
    unint64_t v18 = 0;
  }
  if (v15 >= 2)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 / 3;
    unsigned int v21 = v12 % 3;
    unint64_t v22 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v23 = v15 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = a7[1] + v24 * (v11 >> 1);
    uint64_t v26 = *a7 + *a8 * v11 + 4 * v20;
    malloc_type_id_t v27 = (int *)(v26 + *a8);
    uint64_t v28 = *a3;
    uint64_t v29 = *a3 + *a4 * v9;
    uint64_t v30 = 8 * v10;
    uint64_t v31 = (_WORD *)(v29 + 8 * v10);
    unsigned int v32 = (_WORD *)((char *)v31 + *a4);
    uint64_t v233 = *a4 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v232 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v231 = v24 >> 2;
    uint64_t v230 = 2 * *a4;
    uint64_t v33 = v28 + *a4 + *a4 * (v8 + (v8 & 1));
    uint64_t v34 = (__int32 *)(v25 + 4 * v20);
    unsigned int v225 = v21;
    unint64_t v224 = v23;
    do
    {
      uint64_t v35 = 0;
      uint64_t v235 = v33;
      unint64_t v236 = v32;
      uint64_t v237 = v31;
      uint64_t v238 = v29;
      uint64_t v36 = v29;
      uint64_t v37 = v31;
      uint64_t v38 = (_DWORD *)v26;
      unsigned int v39 = v21;
      unsigned int v40 = v21;
      uint64_t v234 = v34;
      unsigned int v41 = v27;
      do
      {
        unsigned int v42 = v41;
        uint64_t v43 = v38;
        if (v35)
        {
          uint64_t v47 = (__int16 *)(v36 + v30 - 8);
          uint64_t v44 = v37 - 3;
          uint64_t v45 = v37 - 2;
          _H20 = *(_WORD *)(v36 + v30);
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v36 + v30 + 2);
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v36 + v30 + 4);
          __asm { FCVT            S22, H22 }
        }
        else
        {
          uint64_t v44 = (__int16 *)(v36 + v30 + 2);
          uint64_t v45 = (__int16 *)(v36 + v30 + 4);
          _S20 = 0.0;
          uint64_t v47 = v37;
          _S21 = 0.0;
          _S22 = 0.0;
        }
        _H24 = *v45;
        _H25 = *v44;
        _H23 = *v47;
        __asm
        {
          FCVT            D23, H23
          FCVT            D25, H25
          FCVT            D24, H24
        }
        unint64_t v62 = *((unsigned __int8 *)&v239 + v40);
        *uint64_t v38 = ((int)((_D25 * 0.677998 + _D23 * 0.2627 + _D24 * 0.059302) * 1023.0 + 0.0) << v62) | *v38 & ~(1023 << v62);
        if (v35)
        {
          long long v66 = (__int16 *)(v33 + v30 - 8);
          long long v63 = v32 - 3;
          unint64_t v64 = v32 - 2;
          _H26 = *(_WORD *)(v33 + v30);
          __asm { FCVT            S29, H26 }
          _H26 = *(_WORD *)(v33 + v30 + 2);
          __asm { FCVT            S30, H26 }
          _H26 = *(_WORD *)(v33 + v30 + 4);
          __asm { FCVT            S31, H26 }
        }
        else
        {
          long long v63 = (__int16 *)(v33 + v30 + 2);
          unint64_t v64 = (__int16 *)(v33 + v30 + 4);
          _S29 = 0.0;
          long long v66 = v32;
          _S30 = 0.0;
          _S31 = 0.0;
        }
        _H27 = *v64;
        _H28 = *v63;
        _H26 = *v66;
        __asm
        {
          FCVT            D26, H26
          FCVT            D28, H28
          FCVT            D27, H27
        }
        if (v35)
        {
          float64x2_t v79 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D590, _D25), (float64x2_t)xmmword_193E7D5A0, _D23), (float64x2_t)xmmword_193E7D5B0, _D24), (float64x2_t)xmmword_193E7D5A0, _S20), (float64x2_t)xmmword_193E7D590,
                                  _S21),
                                (float64x2_t)xmmword_193E7D5B0,
                                _S22),
                              (float64x2_t)xmmword_193E7D5A0,
                              _D26),
                            (float64x2_t)xmmword_193E7D590,
                            _D28),
                          (float64x2_t)xmmword_193E7D5B0,
                          _D27),
                        (float64x2_t)xmmword_193E7D5A0,
                        _S29),
                      (float64x2_t)xmmword_193E7D590,
                      _S30),
                    (float64x2_t)xmmword_193E7D5B0,
                    _S31),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V21.2D, #0.25 }
          int32x2_t v78 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v79, _Q21)))), (int32x2_t)0x20000000200);
        }
        else
        {
          int32x2_t v78 = 0;
        }
        *unsigned int v42 = *v42 & ~(1023 << v62) | ((int)((_D28 * 0.677998 + _D26 * 0.2627 + _D27 * 0.059302) * 1023.0 + 0.0) << v62);
        if (v40 == 2) {
          unsigned int v40 = 0;
        }
        else {
          ++v40;
        }
        if (v35)
        {
          unint64_t v81 = *((unsigned __int8 *)&v239 + v39);
          *uint64_t v34 = *v34 & ~(1023 << v81) | (v78.i32[0] << v81);
          int v82 = (__int32 *)((char *)v34 + ((v81 >> 2) & 0x3C));
          if (v39 == 2) {
            unsigned int v83 = 0;
          }
          else {
            unsigned int v83 = v39 + 1;
          }
          unint64_t v84 = *((unsigned __int8 *)&v239 + v83);
          *int v82 = *v82 & ~(1023 << v84) | (v78.i32[1] << v84);
          uint64_t v34 = (__int32 *)((char *)v82 + ((v84 >> 2) & 0x3C));
          if (v83 == 2) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = v83 + 1;
          }
        }
        v37 += 4;
        v38 += v62 >> 4;
        v32 += 4;
        ++v35;
        v36 += 8;
        unsigned int v41 = &v42[v62 >> 4];
        v33 += 8;
      }
      while (v22 != v35);
      if (v22 >= v18)
      {
        float v180 = (__int16 *)(v36 + v30);
        unsigned int v179 = (__int16 *)(v33 + v30);
        unint64_t v90 = v22;
      }
      else
      {
        unsigned int v227 = v27;
        uint64_t v228 = v26;
        uint64_t v229 = v19;
        unint64_t v85 = 0;
        unint64_t v226 = v62 >> 2;
        uint64_t v86 = (v62 >> 2) & 0x3C;
        unint64_t v87 = (char *)v42 + v86;
        uint64_t v88 = (char *)v43 + v86;
        uint64_t v89 = v30;
        unint64_t v90 = v22;
        do
        {
          _H20 = *(_WORD *)(v36 + v89);
          _H21 = *(_WORD *)(v36 + v89 + 2);
          _H22 = *(_WORD *)(v36 + v89 + 4);
          __asm
          {
            FCVT            D27, H20
            FCVT            D28, H21
            FCVT            D29, H22
          }
          _H21 = *(_WORD *)(v36 + v89 + 8);
          _H22 = *(_WORD *)(v36 + v89 + 10);
          _H23 = *(_WORD *)(v36 + v89 + 12);
          __asm
          {
            FCVT            D30, H21
            FCVT            D31, H22
            FCVT            D26, H23
          }
          _H22 = *(_WORD *)(v33 + v89);
          _H23 = *(_WORD *)(v33 + v89 + 2);
          _H8 = *(_WORD *)(v33 + v89 + 4);
          __asm
          {
            FCVT            D25, H22
            FCVT            D24, H23
            FCVT            D23, H8
          }
          _H22 = *(_WORD *)(v33 + v89 + 8);
          int v110 = (int)((_D28 * 0.677998 + _D27 * 0.2627 + _D29 * 0.059302) * 1023.0 + 0.0);
          _H20 = *(_WORD *)(v33 + v89 + 10);
          _H9 = *(_WORD *)(v33 + v89 + 12);
          __asm
          {
            FCVT            D22, H22
            FCVT            D20, H20
          }
          int v115 = (int)((_D31 * 0.677998 + _D30 * 0.2627 + _D26 * 0.059302) * 1023.0 + 0.0);
          __asm { FCVT            D21, H9 }
          int v117 = (int)((_D24 * 0.677998 + _D25 * 0.2627 + _D23 * 0.059302) * 1023.0 + 0.0);
          int v118 = (int)((_D20 * 0.677998 + _D22 * 0.2627 + _D21 * 0.059302) * 1023.0 + 0.0);
          _D8 = _D28 * -0.36037 + _D27 * -0.13963 + _D29 * 0.5 + _D30 * -0.13963;
          double v120 = _D28 * -0.459785 + _D27 * 0.5 + _D29 * -0.040215 + _D30 * 0.5;
          double v121 = _D8 + _D31 * -0.36037;
          _D27 = v120 + _D31 * -0.459785;
          LOWORD(_D29) = *(_WORD *)(v36 + v89 + 16);
          LOWORD(_D30) = *(_WORD *)(v36 + v89 + 18);
          LOWORD(_D31) = *(_WORD *)(v36 + v89 + 20);
          __asm { FCVT            D29, H29 }
          double v124 = v121 + _D26 * 0.5;
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          double v127 = _D27 + _D26 * -0.040215;
          LOWORD(_D27) = *(_WORD *)(v36 + v89 + 24);
          LOWORD(_D8) = *(_WORD *)(v36 + v89 + 26);
          double v128 = v124 + _D25 * -0.13963;
          _H9 = *(_WORD *)(v36 + v89 + 28);
          __asm
          {
            FCVT            D27, H27
            FCVT            D8, H8
          }
          _D25 = v127 + _D25 * 0.5;
          __asm { FCVT            D26, H9 }
          int v134 = (int)((_D8 * 0.677998 + _D27 * 0.2627 + _D26 * 0.059302) * 1023.0 + 0.0);
          double v135 = v128 + _D24 * -0.36037;
          _H9 = *(_WORD *)(v33 + v89 + 16);
          _H10 = *(_WORD *)(v33 + v89 + 18);
          _H11 = *(_WORD *)(v33 + v89 + 20);
          __asm
          {
            FCVT            D9, H9
            FCVT            D10, H10
          }
          double v141 = _D25 + _D24 * -0.459785;
          __asm { FCVT            D11, H11 }
          double v143 = v135 + _D23 * 0.5;
          LOWORD(_D25) = *(_WORD *)(v33 + v89 + 24);
          _H12 = *(_WORD *)(v33 + v89 + 26);
          _H13 = *(_WORD *)(v33 + v89 + 28);
          double v146 = v141 + _D23 * -0.040215;
          __asm
          {
            FCVT            D24, H25
            FCVT            D25, H12
            FCVT            D13, H13
          }
          int v150 = (int)((_D25 * 0.677998 + _D24 * 0.2627 + _D13 * 0.059302) * 1023.0 + 0.0);
          _D28 = v143 + _D22 * -0.13963 + _D20 * -0.36037;
          int v152 = (int *)&v87[v85];
          int v153 = v110 | (v115 << 10);
          int v154 = (unsigned int *)&v34[v85 / 4];
          _D20 = v146 + _D22 * 0.5 + _D20 * -0.459785 + _D21 * -0.040215;
          int v156 = v117 | (v118 << 10);
          unsigned int v157 = (int *)&v88[v85];
          int *v157 = v153 | ((int)((_D30 * 0.677998 + _D29 * 0.2627 + _D31 * 0.059302) * 1023.0 + 0.0) << 20);
          *int v152 = v156 | ((int)((_D10 * 0.677998 + _D9 * 0.2627 + _D11 * 0.059302) * 1023.0 + 0.0) << 20);
          _D23 = (_D30 * -0.36037
                + _D29 * -0.13963
                + _D31 * 0.5
                + _D27 * -0.13963
                + _D8 * -0.36037
                + _D26 * 0.5
                + _D9 * -0.13963
                + _D10 * -0.36037
                + _D11 * 0.5
                + _D24 * -0.13963
                + _D25 * -0.36037
                + _D13 * 0.5)
               * 1023.0
               * 0.25;
          _D22 = (_D30 * -0.459785
                + _D29 * 0.5
                + _D31 * -0.040215
                + _D27 * 0.5
                + _D8 * -0.459785
                + _D26 * -0.040215
                + _D9 * 0.5
                + _D10 * -0.459785
                + _D11 * -0.040215
                + _D24 * 0.5
                + _D25 * -0.459785
                + _D13 * -0.040215)
               * 1023.0;
          LOWORD(_D24) = *(_WORD *)(v36 + v89 + 32);
          LOWORD(_D25) = *(_WORD *)(v36 + v89 + 34);
          LOWORD(_D26) = *(_WORD *)(v36 + v89 + 36);
          __asm
          {
            FCVT            D24, H24
            FCVT            D25, H25
            FCVT            D26, H26
          }
          *(float *)&_D21 = (_D28 + _D21 * 0.5) * 1023.0 * 0.25;
          LOWORD(_D27) = *(_WORD *)(v36 + v89 + 40);
          LOWORD(_D28) = *(_WORD *)(v36 + v89 + 42);
          *(float *)&_D20 = _D20 * 1023.0 * 0.25;
          LOWORD(_D29) = *(_WORD *)(v36 + v89 + 44);
          __asm
          {
            FCVT            D27, H27
            FCVT            D28, H28
          }
          *(float *)&_D23 = _D23;
          __asm { FCVT            D29, H29 }
          *(float *)&_D22 = _D22 * 0.25;
          int v166 = v134 | ((int)((_D25 * 0.677998 + _D24 * 0.2627 + _D26 * 0.059302) * 1023.0 + 0.0) << 10) | ((int)((_D28 * 0.677998 + _D27 * 0.2627 + _D29 * 0.059302) * 1023.0 + 0.0) << 20);
          LOWORD(_D30) = *(_WORD *)(v33 + v89 + 32);
          LOWORD(_D31) = *(_WORD *)(v33 + v89 + 34);
          unsigned int v167 = llroundf(*(float *)&_D21);
          LOWORD(_D21) = *(_WORD *)(v33 + v89 + 36);
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          unsigned int v170 = llroundf(*(float *)&_D20);
          __asm { FCVT            D21, H21 }
          unsigned int v172 = llroundf(*(float *)&_D23);
          LOWORD(_D20) = *(_WORD *)(v33 + v89 + 40);
          LOWORD(_D23) = *(_WORD *)(v33 + v89 + 42);
          unsigned int v173 = llroundf(*(float *)&_D22);
          LOWORD(_D22) = *(_WORD *)(v33 + v89 + 44);
          __asm
          {
            FCVT            D20, H20
            FCVT            D23, H23
            FCVT            D22, H22
          }
          int v177 = (int)((_D23 * 0.677998 + _D20 * 0.2627 + _D22 * 0.059302) * 1023.0 + 0.0);
          *(float *)&_D8 = (_D25 * -0.36037
                          + _D24 * -0.13963
                          + _D26 * 0.5
                          + _D27 * -0.13963
                          + _D28 * -0.36037
                          + _D29 * 0.5
                          + _D30 * -0.13963
                          + _D31 * -0.36037
                          + _D21 * 0.5
                          + _D20 * -0.13963
                          + _D23 * -0.36037
                          + _D22 * 0.5)
                         * 1023.0
                         * 0.25;
          unsigned int *v154 = ((v170 << 10) + 0x80000) | (v167 + 512) | ((v172 << 20) + 0x20000000);
          *(float *)&_D20 = (_D25 * -0.459785
                           + _D24 * 0.5
                           + _D26 * -0.040215
                           + _D27 * 0.5
                           + _D28 * -0.459785
                           + _D29 * -0.040215
                           + _D30 * 0.5
                           + _D31 * -0.459785
                           + _D21 * -0.040215
                           + _D20 * 0.5
                           + _D23 * -0.459785
                           + _D22 * -0.040215)
                          * 1023.0
                          * 0.25;
          v157[1] = v166;
          v152[1] = v150 | ((int)((_D31 * 0.677998 + _D30 * 0.2627 + _D21 * 0.059302) * 1023.0 + 0.0) << 10) | (v177 << 20);
          v154[1] = ((llroundf(*(float *)&_D20) << 20) + 0x20000000) | (v173 + 512) | ((llroundf(*(float *)&_D8) << 10)
                                                                                     + 0x80000);
          v90 += 6;
          v85 += 8;
          v89 += 48;
        }
        while (v90 < v18);
        malloc_type_id_t v27 = v227;
        uint64_t v178 = v226 & 0x3C;
        unsigned int v41 = (int *)((char *)v42 + v178 + v85);
        uint64_t v34 = (__int32 *)((char *)v34 + v85);
        uint64_t v38 = (_DWORD *)((char *)v43 + v178 + v85);
        unsigned int v179 = (__int16 *)(v33 + v89);
        float v180 = (__int16 *)(v36 + v89);
        uint64_t v26 = v228;
        uint64_t v19 = v229;
        unsigned int v21 = v225;
        unint64_t v23 = v224;
      }
      if (v90 < v14)
      {
        uint64_t v181 = 0;
        float v182 = v180;
        unint64_t v183 = v179;
        unsigned int v184 = v18 % 3;
        do
        {
          if (v90)
          {
            unsigned int v188 = &v180[v181 - 4];
            uint64_t v185 = v182 - 3;
            unsigned int v186 = v182 - 2;
            _H20 = v180[v181];
            __asm { FCVT            S20, H20 }
            _H21 = v180[v181 + 1];
            __asm { FCVT            S21, H21 }
            _H22 = v180[v181 + 2];
            __asm { FCVT            S22, H22 }
          }
          else
          {
            uint64_t v185 = &v180[v181 + 1];
            unsigned int v186 = &v180[v181 + 2];
            _S20 = 0.0;
            unsigned int v188 = v182;
            _S21 = 0.0;
            _S22 = 0.0;
          }
          _H24 = *v186;
          _H25 = *v185;
          _H23 = *v188;
          __asm
          {
            FCVT            D23, H23
            FCVT            D25, H25
            FCVT            D24, H24
          }
          unint64_t v200 = *((unsigned __int8 *)&v239 + v184);
          *uint64_t v38 = ((int)((_D25 * 0.677998 + _D23 * 0.2627 + _D24 * 0.059302) * 1023.0 + 0.0) << v200) | *v38 & ~(1023 << v200);
          if (v90)
          {
            v204 = &v179[v181 - 4];
            v201 = v183 - 3;
            v202 = v183 - 2;
            _H26 = v179[v181];
            __asm { FCVT            S29, H26 }
            _H26 = v179[v181 + 1];
            __asm { FCVT            S30, H26 }
            _H26 = v179[v181 + 2];
            __asm { FCVT            S31, H26 }
          }
          else
          {
            v201 = &v179[v181 + 1];
            v202 = &v179[v181 + 2];
            _S29 = 0.0;
            v204 = v183;
            _S30 = 0.0;
            _S31 = 0.0;
          }
          _H27 = *v202;
          _H28 = *v201;
          _H26 = *v204;
          __asm
          {
            FCVT            D26, H26
            FCVT            D28, H28
            FCVT            D27, H27
          }
          if (v90)
          {
            float64x2_t v217 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D590, _D25), (float64x2_t)xmmword_193E7D5A0, _D23), (float64x2_t)xmmword_193E7D5B0, _D24), (float64x2_t)xmmword_193E7D5A0, _S20), (float64x2_t)xmmword_193E7D590,
                                     _S21),
                                   (float64x2_t)xmmword_193E7D5B0,
                                   _S22),
                                 (float64x2_t)xmmword_193E7D5A0,
                                 _D26),
                               (float64x2_t)xmmword_193E7D590,
                               _D28),
                             (float64x2_t)xmmword_193E7D5B0,
                             _D27),
                           (float64x2_t)xmmword_193E7D5A0,
                           _S29),
                         (float64x2_t)xmmword_193E7D590,
                         _S30),
                       (float64x2_t)xmmword_193E7D5B0,
                       _S31),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V21.2D, #0.25 }
            int32x2_t v216 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v217, _Q21)))), (int32x2_t)0x20000000200);
          }
          else
          {
            int32x2_t v216 = 0;
          }
          *unsigned int v41 = *v41 & ~(1023 << v200) | ((int)((_D28 * 0.677998 + _D26 * 0.2627 + _D27 * 0.059302) * 1023.0 + 0.0) << v200);
          if (v184 == 2) {
            unsigned int v184 = 0;
          }
          else {
            ++v184;
          }
          if (v90)
          {
            unint64_t v219 = *((unsigned __int8 *)&v239 + v39);
            *uint64_t v34 = *v34 & ~(1023 << v219) | (v216.i32[0] << v219);
            v220 = (__int32 *)((char *)v34 + ((v219 >> 2) & 0x3C));
            if (v39 == 2) {
              unsigned int v221 = 0;
            }
            else {
              unsigned int v221 = v39 + 1;
            }
            unint64_t v222 = *((unsigned __int8 *)&v239 + v221);
            __int32 *v220 = *v220 & ~(1023 << v222) | (v216.i32[1] << v222);
            uint64_t v34 = (__int32 *)((char *)v220 + ((v222 >> 2) & 0x3C));
            if (v221 == 2) {
              unsigned int v39 = 0;
            }
            else {
              unsigned int v39 = v221 + 1;
            }
          }
          v182 += 4;
          v38 += v200 >> 4;
          v183 += 4;
          ++v90;
          v181 += 4;
          v41 += v200 >> 4;
        }
        while (v14 != v90);
      }
      uint64_t v31 = &v237[v233];
      unsigned int v32 = &v236[v233];
      v26 += 4 * v232;
      ++v19;
      v27 += v232;
      uint64_t v29 = v238 + v230;
      uint64_t v33 = v235 + v230;
      uint64_t v34 = &v234[v231];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGhA_pf20ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v239 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if (v14 >= v13 - v12) {
    unint64_t v14 = v13 - v12;
  }
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(void *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    unint64_t v15 = ((*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v16 = v13 % 6;
  _CF = v14 >= v16;
  unint64_t v18 = v14 - v16;
  if (!_CF) {
    unint64_t v18 = 0;
  }
  if (v15 >= 2)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 / 3;
    unsigned int v21 = v12 % 3;
    unint64_t v22 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v23 = v15 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = a7[1] + v24 * (v11 >> 1);
    uint64_t v26 = *a7 + *a8 * v11 + 4 * v20;
    malloc_type_id_t v27 = (int *)(v26 + *a8);
    uint64_t v28 = *a3;
    uint64_t v29 = *a3 + *a4 * v9;
    uint64_t v30 = 8 * v10;
    uint64_t v31 = (_WORD *)(v29 + 8 * v10);
    unsigned int v32 = (_WORD *)((char *)v31 + *a4);
    uint64_t v233 = *a4 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v232 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v231 = v24 >> 2;
    uint64_t v230 = 2 * *a4;
    uint64_t v33 = v28 + *a4 + *a4 * (v8 + (v8 & 1));
    uint64_t v34 = (__int32 *)(v25 + 4 * v20);
    unsigned int v225 = v21;
    unint64_t v224 = v23;
    do
    {
      uint64_t v35 = 0;
      uint64_t v235 = v33;
      unint64_t v236 = v32;
      uint64_t v237 = v31;
      uint64_t v238 = v29;
      uint64_t v36 = v29;
      uint64_t v37 = v31;
      uint64_t v38 = (_DWORD *)v26;
      unsigned int v39 = v21;
      unsigned int v40 = v21;
      uint64_t v234 = v34;
      unsigned int v41 = v27;
      do
      {
        unsigned int v42 = v41;
        uint64_t v43 = v38;
        if (v35)
        {
          uint64_t v47 = (__int16 *)(v36 + v30 - 8);
          uint64_t v44 = v37 - 3;
          uint64_t v45 = v37 - 2;
          _H20 = *(_WORD *)(v36 + v30);
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v36 + v30 + 2);
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v36 + v30 + 4);
          __asm { FCVT            S22, H22 }
        }
        else
        {
          uint64_t v44 = (__int16 *)(v36 + v30 + 2);
          uint64_t v45 = (__int16 *)(v36 + v30 + 4);
          _S20 = 0.0;
          uint64_t v47 = v37;
          _S21 = 0.0;
          _S22 = 0.0;
        }
        _H24 = *v45;
        _H25 = *v44;
        _H23 = *v47;
        __asm
        {
          FCVT            D23, H23
          FCVT            D25, H25
          FCVT            D24, H24
        }
        unint64_t v62 = *((unsigned __int8 *)&v239 + v40);
        *uint64_t v38 = ((int)((_D25 * 0.7152 + _D23 * 0.2126 + _D24 * 0.0722) * 1023.0 + 0.0) << v62) | *v38 & ~(1023 << v62);
        if (v35)
        {
          long long v66 = (__int16 *)(v33 + v30 - 8);
          long long v63 = v32 - 3;
          unint64_t v64 = v32 - 2;
          _H26 = *(_WORD *)(v33 + v30);
          __asm { FCVT            S29, H26 }
          _H26 = *(_WORD *)(v33 + v30 + 2);
          __asm { FCVT            S30, H26 }
          _H26 = *(_WORD *)(v33 + v30 + 4);
          __asm { FCVT            S31, H26 }
        }
        else
        {
          long long v63 = (__int16 *)(v33 + v30 + 2);
          unint64_t v64 = (__int16 *)(v33 + v30 + 4);
          _S29 = 0.0;
          long long v66 = v32;
          _S30 = 0.0;
          _S31 = 0.0;
        }
        _H27 = *v64;
        _H28 = *v63;
        _H26 = *v66;
        __asm
        {
          FCVT            D26, H26
          FCVT            D28, H28
          FCVT            D27, H27
        }
        if (v35)
        {
          float64x2_t v79 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D5C0, _D25), (float64x2_t)xmmword_193E7D5D0, _D23), (float64x2_t)xmmword_193E7D5E0, _D24), (float64x2_t)xmmword_193E7D5D0, _S20), (float64x2_t)xmmword_193E7D5C0,
                                  _S21),
                                (float64x2_t)xmmword_193E7D5E0,
                                _S22),
                              (float64x2_t)xmmword_193E7D5D0,
                              _D26),
                            (float64x2_t)xmmword_193E7D5C0,
                            _D28),
                          (float64x2_t)xmmword_193E7D5E0,
                          _D27),
                        (float64x2_t)xmmword_193E7D5D0,
                        _S29),
                      (float64x2_t)xmmword_193E7D5C0,
                      _S30),
                    (float64x2_t)xmmword_193E7D5E0,
                    _S31),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V21.2D, #0.25 }
          int32x2_t v78 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v79, _Q21)))), (int32x2_t)0x20000000200);
        }
        else
        {
          int32x2_t v78 = 0;
        }
        *unsigned int v42 = *v42 & ~(1023 << v62) | ((int)((_D28 * 0.7152 + _D26 * 0.2126 + _D27 * 0.0722) * 1023.0 + 0.0) << v62);
        if (v40 == 2) {
          unsigned int v40 = 0;
        }
        else {
          ++v40;
        }
        if (v35)
        {
          unint64_t v81 = *((unsigned __int8 *)&v239 + v39);
          *uint64_t v34 = *v34 & ~(1023 << v81) | (v78.i32[0] << v81);
          int v82 = (__int32 *)((char *)v34 + ((v81 >> 2) & 0x3C));
          if (v39 == 2) {
            unsigned int v83 = 0;
          }
          else {
            unsigned int v83 = v39 + 1;
          }
          unint64_t v84 = *((unsigned __int8 *)&v239 + v83);
          *int v82 = *v82 & ~(1023 << v84) | (v78.i32[1] << v84);
          uint64_t v34 = (__int32 *)((char *)v82 + ((v84 >> 2) & 0x3C));
          if (v83 == 2) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = v83 + 1;
          }
        }
        v37 += 4;
        v38 += v62 >> 4;
        v32 += 4;
        ++v35;
        v36 += 8;
        unsigned int v41 = &v42[v62 >> 4];
        v33 += 8;
      }
      while (v22 != v35);
      if (v22 >= v18)
      {
        float v180 = (__int16 *)(v36 + v30);
        unsigned int v179 = (__int16 *)(v33 + v30);
        unint64_t v90 = v22;
      }
      else
      {
        unsigned int v227 = v27;
        uint64_t v228 = v26;
        uint64_t v229 = v19;
        unint64_t v85 = 0;
        unint64_t v226 = v62 >> 2;
        uint64_t v86 = (v62 >> 2) & 0x3C;
        unint64_t v87 = (char *)v42 + v86;
        uint64_t v88 = (char *)v43 + v86;
        uint64_t v89 = v30;
        unint64_t v90 = v22;
        do
        {
          _H20 = *(_WORD *)(v36 + v89);
          _H21 = *(_WORD *)(v36 + v89 + 2);
          _H22 = *(_WORD *)(v36 + v89 + 4);
          __asm
          {
            FCVT            D27, H20
            FCVT            D28, H21
            FCVT            D29, H22
          }
          _H21 = *(_WORD *)(v36 + v89 + 8);
          _H22 = *(_WORD *)(v36 + v89 + 10);
          _H23 = *(_WORD *)(v36 + v89 + 12);
          __asm
          {
            FCVT            D30, H21
            FCVT            D31, H22
            FCVT            D26, H23
          }
          _H22 = *(_WORD *)(v33 + v89);
          _H23 = *(_WORD *)(v33 + v89 + 2);
          _H8 = *(_WORD *)(v33 + v89 + 4);
          __asm
          {
            FCVT            D25, H22
            FCVT            D24, H23
            FCVT            D23, H8
          }
          _H22 = *(_WORD *)(v33 + v89 + 8);
          int v110 = (int)((_D28 * 0.7152 + _D27 * 0.2126 + _D29 * 0.0722) * 1023.0 + 0.0);
          _H20 = *(_WORD *)(v33 + v89 + 10);
          _H9 = *(_WORD *)(v33 + v89 + 12);
          __asm
          {
            FCVT            D22, H22
            FCVT            D20, H20
          }
          int v115 = (int)((_D31 * 0.7152 + _D30 * 0.2126 + _D26 * 0.0722) * 1023.0 + 0.0);
          __asm { FCVT            D21, H9 }
          int v117 = (int)((_D24 * 0.7152 + _D25 * 0.2126 + _D23 * 0.0722) * 1023.0 + 0.0);
          int v118 = (int)((_D20 * 0.7152 + _D22 * 0.2126 + _D21 * 0.0722) * 1023.0 + 0.0);
          _D8 = _D28 * -0.385428 + _D27 * -0.114572 + _D29 * 0.5 + _D30 * -0.114572;
          double v120 = _D28 * -0.454153 + _D27 * 0.5 + _D29 * -0.045847 + _D30 * 0.5;
          double v121 = _D8 + _D31 * -0.385428;
          _D27 = v120 + _D31 * -0.454153;
          LOWORD(_D29) = *(_WORD *)(v36 + v89 + 16);
          LOWORD(_D30) = *(_WORD *)(v36 + v89 + 18);
          LOWORD(_D31) = *(_WORD *)(v36 + v89 + 20);
          __asm { FCVT            D29, H29 }
          double v124 = v121 + _D26 * 0.5;
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          double v127 = _D27 + _D26 * -0.045847;
          LOWORD(_D27) = *(_WORD *)(v36 + v89 + 24);
          LOWORD(_D8) = *(_WORD *)(v36 + v89 + 26);
          double v128 = v124 + _D25 * -0.114572;
          _H9 = *(_WORD *)(v36 + v89 + 28);
          __asm
          {
            FCVT            D27, H27
            FCVT            D8, H8
          }
          _D25 = v127 + _D25 * 0.5;
          __asm { FCVT            D26, H9 }
          int v134 = (int)((_D8 * 0.7152 + _D27 * 0.2126 + _D26 * 0.0722) * 1023.0 + 0.0);
          double v135 = v128 + _D24 * -0.385428;
          _H9 = *(_WORD *)(v33 + v89 + 16);
          _H10 = *(_WORD *)(v33 + v89 + 18);
          _H11 = *(_WORD *)(v33 + v89 + 20);
          __asm
          {
            FCVT            D9, H9
            FCVT            D10, H10
          }
          double v141 = _D25 + _D24 * -0.454153;
          __asm { FCVT            D11, H11 }
          double v143 = v135 + _D23 * 0.5;
          LOWORD(_D25) = *(_WORD *)(v33 + v89 + 24);
          _H12 = *(_WORD *)(v33 + v89 + 26);
          _H13 = *(_WORD *)(v33 + v89 + 28);
          double v146 = v141 + _D23 * -0.045847;
          __asm
          {
            FCVT            D24, H25
            FCVT            D25, H12
            FCVT            D13, H13
          }
          int v150 = (int)((_D25 * 0.7152 + _D24 * 0.2126 + _D13 * 0.0722) * 1023.0 + 0.0);
          _D28 = v143 + _D22 * -0.114572 + _D20 * -0.385428;
          int v152 = (int *)&v87[v85];
          int v153 = v110 | (v115 << 10);
          int v154 = (unsigned int *)&v34[v85 / 4];
          _D20 = v146 + _D22 * 0.5 + _D20 * -0.454153 + _D21 * -0.045847;
          int v156 = v117 | (v118 << 10);
          unsigned int v157 = (int *)&v88[v85];
          int *v157 = v153 | ((int)((_D30 * 0.7152 + _D29 * 0.2126 + _D31 * 0.0722) * 1023.0 + 0.0) << 20);
          *int v152 = v156 | ((int)((_D10 * 0.7152 + _D9 * 0.2126 + _D11 * 0.0722) * 1023.0 + 0.0) << 20);
          _D23 = (_D30 * -0.385428
                + _D29 * -0.114572
                + _D31 * 0.5
                + _D27 * -0.114572
                + _D8 * -0.385428
                + _D26 * 0.5
                + _D9 * -0.114572
                + _D10 * -0.385428
                + _D11 * 0.5
                + _D24 * -0.114572
                + _D25 * -0.385428
                + _D13 * 0.5)
               * 1023.0
               * 0.25;
          _D22 = (_D30 * -0.454153
                + _D29 * 0.5
                + _D31 * -0.045847
                + _D27 * 0.5
                + _D8 * -0.454153
                + _D26 * -0.045847
                + _D9 * 0.5
                + _D10 * -0.454153
                + _D11 * -0.045847
                + _D24 * 0.5
                + _D25 * -0.454153
                + _D13 * -0.045847)
               * 1023.0;
          LOWORD(_D24) = *(_WORD *)(v36 + v89 + 32);
          LOWORD(_D25) = *(_WORD *)(v36 + v89 + 34);
          LOWORD(_D26) = *(_WORD *)(v36 + v89 + 36);
          __asm
          {
            FCVT            D24, H24
            FCVT            D25, H25
            FCVT            D26, H26
          }
          *(float *)&_D21 = (_D28 + _D21 * 0.5) * 1023.0 * 0.25;
          LOWORD(_D27) = *(_WORD *)(v36 + v89 + 40);
          LOWORD(_D28) = *(_WORD *)(v36 + v89 + 42);
          *(float *)&_D20 = _D20 * 1023.0 * 0.25;
          LOWORD(_D29) = *(_WORD *)(v36 + v89 + 44);
          __asm
          {
            FCVT            D27, H27
            FCVT            D28, H28
          }
          *(float *)&_D23 = _D23;
          __asm { FCVT            D29, H29 }
          *(float *)&_D22 = _D22 * 0.25;
          int v166 = v134 | ((int)((_D25 * 0.7152 + _D24 * 0.2126 + _D26 * 0.0722) * 1023.0 + 0.0) << 10) | ((int)((_D28 * 0.7152 + _D27 * 0.2126 + _D29 * 0.0722) * 1023.0 + 0.0) << 20);
          LOWORD(_D30) = *(_WORD *)(v33 + v89 + 32);
          LOWORD(_D31) = *(_WORD *)(v33 + v89 + 34);
          unsigned int v167 = llroundf(*(float *)&_D21);
          LOWORD(_D21) = *(_WORD *)(v33 + v89 + 36);
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          unsigned int v170 = llroundf(*(float *)&_D20);
          __asm { FCVT            D21, H21 }
          unsigned int v172 = llroundf(*(float *)&_D23);
          LOWORD(_D20) = *(_WORD *)(v33 + v89 + 40);
          LOWORD(_D23) = *(_WORD *)(v33 + v89 + 42);
          unsigned int v173 = llroundf(*(float *)&_D22);
          LOWORD(_D22) = *(_WORD *)(v33 + v89 + 44);
          __asm
          {
            FCVT            D20, H20
            FCVT            D23, H23
            FCVT            D22, H22
          }
          int v177 = (int)((_D23 * 0.7152 + _D20 * 0.2126 + _D22 * 0.0722) * 1023.0 + 0.0);
          *(float *)&_D8 = (_D25 * -0.385428
                          + _D24 * -0.114572
                          + _D26 * 0.5
                          + _D27 * -0.114572
                          + _D28 * -0.385428
                          + _D29 * 0.5
                          + _D30 * -0.114572
                          + _D31 * -0.385428
                          + _D21 * 0.5
                          + _D20 * -0.114572
                          + _D23 * -0.385428
                          + _D22 * 0.5)
                         * 1023.0
                         * 0.25;
          unsigned int *v154 = ((v170 << 10) + 0x80000) | (v167 + 512) | ((v172 << 20) + 0x20000000);
          *(float *)&_D20 = (_D25 * -0.454153
                           + _D24 * 0.5
                           + _D26 * -0.045847
                           + _D27 * 0.5
                           + _D28 * -0.454153
                           + _D29 * -0.045847
                           + _D30 * 0.5
                           + _D31 * -0.454153
                           + _D21 * -0.045847
                           + _D20 * 0.5
                           + _D23 * -0.454153
                           + _D22 * -0.045847)
                          * 1023.0
                          * 0.25;
          v157[1] = v166;
          v152[1] = v150 | ((int)((_D31 * 0.7152 + _D30 * 0.2126 + _D21 * 0.0722) * 1023.0 + 0.0) << 10) | (v177 << 20);
          v154[1] = ((llroundf(*(float *)&_D20) << 20) + 0x20000000) | (v173 + 512) | ((llroundf(*(float *)&_D8) << 10)
                                                                                     + 0x80000);
          v90 += 6;
          v85 += 8;
          v89 += 48;
        }
        while (v90 < v18);
        malloc_type_id_t v27 = v227;
        uint64_t v178 = v226 & 0x3C;
        unsigned int v41 = (int *)((char *)v42 + v178 + v85);
        uint64_t v34 = (__int32 *)((char *)v34 + v85);
        uint64_t v38 = (_DWORD *)((char *)v43 + v178 + v85);
        unsigned int v179 = (__int16 *)(v33 + v89);
        float v180 = (__int16 *)(v36 + v89);
        uint64_t v26 = v228;
        uint64_t v19 = v229;
        unsigned int v21 = v225;
        unint64_t v23 = v224;
      }
      if (v90 < v14)
      {
        uint64_t v181 = 0;
        float v182 = v180;
        unint64_t v183 = v179;
        unsigned int v184 = v18 % 3;
        do
        {
          if (v90)
          {
            unsigned int v188 = &v180[v181 - 4];
            uint64_t v185 = v182 - 3;
            unsigned int v186 = v182 - 2;
            _H20 = v180[v181];
            __asm { FCVT            S20, H20 }
            _H21 = v180[v181 + 1];
            __asm { FCVT            S21, H21 }
            _H22 = v180[v181 + 2];
            __asm { FCVT            S22, H22 }
          }
          else
          {
            uint64_t v185 = &v180[v181 + 1];
            unsigned int v186 = &v180[v181 + 2];
            _S20 = 0.0;
            unsigned int v188 = v182;
            _S21 = 0.0;
            _S22 = 0.0;
          }
          _H24 = *v186;
          _H25 = *v185;
          _H23 = *v188;
          __asm
          {
            FCVT            D23, H23
            FCVT            D25, H25
            FCVT            D24, H24
          }
          unint64_t v200 = *((unsigned __int8 *)&v239 + v184);
          *uint64_t v38 = ((int)((_D25 * 0.7152 + _D23 * 0.2126 + _D24 * 0.0722) * 1023.0 + 0.0) << v200) | *v38 & ~(1023 << v200);
          if (v90)
          {
            v204 = &v179[v181 - 4];
            v201 = v183 - 3;
            v202 = v183 - 2;
            _H26 = v179[v181];
            __asm { FCVT            S29, H26 }
            _H26 = v179[v181 + 1];
            __asm { FCVT            S30, H26 }
            _H26 = v179[v181 + 2];
            __asm { FCVT            S31, H26 }
          }
          else
          {
            v201 = &v179[v181 + 1];
            v202 = &v179[v181 + 2];
            _S29 = 0.0;
            v204 = v183;
            _S30 = 0.0;
            _S31 = 0.0;
          }
          _H27 = *v202;
          _H28 = *v201;
          _H26 = *v204;
          __asm
          {
            FCVT            D26, H26
            FCVT            D28, H28
            FCVT            D27, H27
          }
          if (v90)
          {
            float64x2_t v217 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D5C0, _D25), (float64x2_t)xmmword_193E7D5D0, _D23), (float64x2_t)xmmword_193E7D5E0, _D24), (float64x2_t)xmmword_193E7D5D0, _S20), (float64x2_t)xmmword_193E7D5C0,
                                     _S21),
                                   (float64x2_t)xmmword_193E7D5E0,
                                   _S22),
                                 (float64x2_t)xmmword_193E7D5D0,
                                 _D26),
                               (float64x2_t)xmmword_193E7D5C0,
                               _D28),
                             (float64x2_t)xmmword_193E7D5E0,
                             _D27),
                           (float64x2_t)xmmword_193E7D5D0,
                           _S29),
                         (float64x2_t)xmmword_193E7D5C0,
                         _S30),
                       (float64x2_t)xmmword_193E7D5E0,
                       _S31),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V21.2D, #0.25 }
            int32x2_t v216 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v217, _Q21)))), (int32x2_t)0x20000000200);
          }
          else
          {
            int32x2_t v216 = 0;
          }
          *unsigned int v41 = *v41 & ~(1023 << v200) | ((int)((_D28 * 0.7152 + _D26 * 0.2126 + _D27 * 0.0722) * 1023.0 + 0.0) << v200);
          if (v184 == 2) {
            unsigned int v184 = 0;
          }
          else {
            ++v184;
          }
          if (v90)
          {
            unint64_t v219 = *((unsigned __int8 *)&v239 + v39);
            *uint64_t v34 = *v34 & ~(1023 << v219) | (v216.i32[0] << v219);
            v220 = (__int32 *)((char *)v34 + ((v219 >> 2) & 0x3C));
            if (v39 == 2) {
              unsigned int v221 = 0;
            }
            else {
              unsigned int v221 = v39 + 1;
            }
            unint64_t v222 = *((unsigned __int8 *)&v239 + v221);
            __int32 *v220 = *v220 & ~(1023 << v222) | (v216.i32[1] << v222);
            uint64_t v34 = (__int32 *)((char *)v220 + ((v222 >> 2) & 0x3C));
            if (v221 == 2) {
              unsigned int v39 = 0;
            }
            else {
              unsigned int v39 = v221 + 1;
            }
          }
          v182 += 4;
          v38 += v200 >> 4;
          v183 += 4;
          ++v90;
          v181 += 4;
          v41 += v200 >> 4;
        }
        while (v14 != v90);
      }
      uint64_t v31 = &v237[v233];
      unsigned int v32 = &v236[v233];
      v26 += 4 * v232;
      ++v19;
      v27 += v232;
      uint64_t v29 = v238 + v230;
      uint64_t v33 = v235 + v230;
      uint64_t v34 = &v234[v231];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGhA_pf20ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v239 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if (v14 >= v13 - v12) {
    unint64_t v14 = v13 - v12;
  }
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(void *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    unint64_t v15 = ((*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v16 = v13 % 6;
  _CF = v14 >= v16;
  unint64_t v18 = v14 - v16;
  if (!_CF) {
    unint64_t v18 = 0;
  }
  if (v15 >= 2)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 / 3;
    unsigned int v21 = v12 % 3;
    unint64_t v22 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v23 = v15 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = a7[1] + v24 * (v11 >> 1);
    uint64_t v26 = *a7 + *a8 * v11 + 4 * v20;
    malloc_type_id_t v27 = (int *)(v26 + *a8);
    uint64_t v28 = *a3;
    uint64_t v29 = *a3 + *a4 * v9;
    uint64_t v30 = 8 * v10;
    uint64_t v31 = (_WORD *)(v29 + 8 * v10);
    unsigned int v32 = (_WORD *)((char *)v31 + *a4);
    uint64_t v233 = *a4 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v232 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    unint64_t v231 = v24 >> 2;
    uint64_t v230 = 2 * *a4;
    uint64_t v33 = v28 + *a4 + *a4 * (v8 + (v8 & 1));
    uint64_t v34 = (__int32 *)(v25 + 4 * v20);
    unsigned int v225 = v21;
    unint64_t v224 = v23;
    do
    {
      uint64_t v35 = 0;
      uint64_t v235 = v33;
      unint64_t v236 = v32;
      uint64_t v237 = v31;
      uint64_t v238 = v29;
      uint64_t v36 = v29;
      uint64_t v37 = v31;
      uint64_t v38 = (_DWORD *)v26;
      unsigned int v39 = v21;
      unsigned int v40 = v21;
      uint64_t v234 = v34;
      unsigned int v41 = v27;
      do
      {
        unsigned int v42 = v41;
        uint64_t v43 = v38;
        if (v35)
        {
          uint64_t v47 = (__int16 *)(v36 + v30 - 8);
          uint64_t v44 = v37 - 3;
          uint64_t v45 = v37 - 2;
          _H20 = *(_WORD *)(v36 + v30);
          __asm { FCVT            S20, H20 }
          _H21 = *(_WORD *)(v36 + v30 + 2);
          __asm { FCVT            S21, H21 }
          _H22 = *(_WORD *)(v36 + v30 + 4);
          __asm { FCVT            S22, H22 }
        }
        else
        {
          uint64_t v44 = (__int16 *)(v36 + v30 + 2);
          uint64_t v45 = (__int16 *)(v36 + v30 + 4);
          _S20 = 0.0;
          uint64_t v47 = v37;
          _S21 = 0.0;
          _S22 = 0.0;
        }
        _H24 = *v45;
        _H25 = *v44;
        _H23 = *v47;
        __asm
        {
          FCVT            D23, H23
          FCVT            D25, H25
          FCVT            D24, H24
        }
        unint64_t v62 = *((unsigned __int8 *)&v239 + v40);
        *uint64_t v38 = ((int)((_D25 * 0.587 + _D23 * 0.299 + _D24 * 0.114) * 1023.0 + 0.0) << v62) | *v38 & ~(1023 << v62);
        if (v35)
        {
          long long v66 = (__int16 *)(v33 + v30 - 8);
          long long v63 = v32 - 3;
          unint64_t v64 = v32 - 2;
          _H26 = *(_WORD *)(v33 + v30);
          __asm { FCVT            S29, H26 }
          _H26 = *(_WORD *)(v33 + v30 + 2);
          __asm { FCVT            S30, H26 }
          _H26 = *(_WORD *)(v33 + v30 + 4);
          __asm { FCVT            S31, H26 }
        }
        else
        {
          long long v63 = (__int16 *)(v33 + v30 + 2);
          unint64_t v64 = (__int16 *)(v33 + v30 + 4);
          _S29 = 0.0;
          long long v66 = v32;
          _S30 = 0.0;
          _S31 = 0.0;
        }
        _H27 = *v64;
        _H28 = *v63;
        _H26 = *v66;
        __asm
        {
          FCVT            D26, H26
          FCVT            D28, H28
          FCVT            D27, H27
        }
        if (v35)
        {
          float64x2_t v79 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D5F0, _D25), (float64x2_t)xmmword_193E7D600, _D23), (float64x2_t)xmmword_193E7D610, _D24), (float64x2_t)xmmword_193E7D600, _S20), (float64x2_t)xmmword_193E7D5F0,
                                  _S21),
                                (float64x2_t)xmmword_193E7D610,
                                _S22),
                              (float64x2_t)xmmword_193E7D600,
                              _D26),
                            (float64x2_t)xmmword_193E7D5F0,
                            _D28),
                          (float64x2_t)xmmword_193E7D610,
                          _D27),
                        (float64x2_t)xmmword_193E7D600,
                        _S29),
                      (float64x2_t)xmmword_193E7D5F0,
                      _S30),
                    (float64x2_t)xmmword_193E7D610,
                    _S31),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V21.2D, #0.25 }
          int32x2_t v78 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v79, _Q21)))), (int32x2_t)0x20000000200);
        }
        else
        {
          int32x2_t v78 = 0;
        }
        *unsigned int v42 = *v42 & ~(1023 << v62) | ((int)((_D28 * 0.587 + _D26 * 0.299 + _D27 * 0.114) * 1023.0 + 0.0) << v62);
        if (v40 == 2) {
          unsigned int v40 = 0;
        }
        else {
          ++v40;
        }
        if (v35)
        {
          unint64_t v81 = *((unsigned __int8 *)&v239 + v39);
          *uint64_t v34 = *v34 & ~(1023 << v81) | (v78.i32[0] << v81);
          int v82 = (__int32 *)((char *)v34 + ((v81 >> 2) & 0x3C));
          if (v39 == 2) {
            unsigned int v83 = 0;
          }
          else {
            unsigned int v83 = v39 + 1;
          }
          unint64_t v84 = *((unsigned __int8 *)&v239 + v83);
          *int v82 = *v82 & ~(1023 << v84) | (v78.i32[1] << v84);
          uint64_t v34 = (__int32 *)((char *)v82 + ((v84 >> 2) & 0x3C));
          if (v83 == 2) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = v83 + 1;
          }
        }
        v37 += 4;
        v38 += v62 >> 4;
        v32 += 4;
        ++v35;
        v36 += 8;
        unsigned int v41 = &v42[v62 >> 4];
        v33 += 8;
      }
      while (v22 != v35);
      if (v22 >= v18)
      {
        float v180 = (__int16 *)(v36 + v30);
        unsigned int v179 = (__int16 *)(v33 + v30);
        unint64_t v90 = v22;
      }
      else
      {
        unsigned int v227 = v27;
        uint64_t v228 = v26;
        uint64_t v229 = v19;
        unint64_t v85 = 0;
        unint64_t v226 = v62 >> 2;
        uint64_t v86 = (v62 >> 2) & 0x3C;
        unint64_t v87 = (char *)v42 + v86;
        uint64_t v88 = (char *)v43 + v86;
        uint64_t v89 = v30;
        unint64_t v90 = v22;
        do
        {
          _H20 = *(_WORD *)(v36 + v89);
          _H21 = *(_WORD *)(v36 + v89 + 2);
          _H22 = *(_WORD *)(v36 + v89 + 4);
          __asm
          {
            FCVT            D27, H20
            FCVT            D28, H21
            FCVT            D29, H22
          }
          _H21 = *(_WORD *)(v36 + v89 + 8);
          _H22 = *(_WORD *)(v36 + v89 + 10);
          _H23 = *(_WORD *)(v36 + v89 + 12);
          __asm
          {
            FCVT            D30, H21
            FCVT            D31, H22
            FCVT            D26, H23
          }
          _H22 = *(_WORD *)(v33 + v89);
          _H23 = *(_WORD *)(v33 + v89 + 2);
          _H8 = *(_WORD *)(v33 + v89 + 4);
          __asm
          {
            FCVT            D25, H22
            FCVT            D24, H23
            FCVT            D23, H8
          }
          _H22 = *(_WORD *)(v33 + v89 + 8);
          int v110 = (int)((_D28 * 0.587 + _D27 * 0.299 + _D29 * 0.114) * 1023.0 + 0.0);
          _H20 = *(_WORD *)(v33 + v89 + 10);
          _H9 = *(_WORD *)(v33 + v89 + 12);
          __asm
          {
            FCVT            D22, H22
            FCVT            D20, H20
          }
          int v115 = (int)((_D31 * 0.587 + _D30 * 0.299 + _D26 * 0.114) * 1023.0 + 0.0);
          __asm { FCVT            D21, H9 }
          int v117 = (int)((_D24 * 0.587 + _D25 * 0.299 + _D23 * 0.114) * 1023.0 + 0.0);
          int v118 = (int)((_D20 * 0.587 + _D22 * 0.299 + _D21 * 0.114) * 1023.0 + 0.0);
          _D8 = _D28 * -0.331264 + _D27 * -0.168736 + _D29 * 0.5 + _D30 * -0.168736;
          double v120 = _D28 * -0.418688 + _D27 * 0.5 + _D29 * -0.081312 + _D30 * 0.5;
          double v121 = _D8 + _D31 * -0.331264;
          _D27 = v120 + _D31 * -0.418688;
          LOWORD(_D29) = *(_WORD *)(v36 + v89 + 16);
          LOWORD(_D30) = *(_WORD *)(v36 + v89 + 18);
          LOWORD(_D31) = *(_WORD *)(v36 + v89 + 20);
          __asm { FCVT            D29, H29 }
          double v124 = v121 + _D26 * 0.5;
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          double v127 = _D27 + _D26 * -0.081312;
          LOWORD(_D27) = *(_WORD *)(v36 + v89 + 24);
          LOWORD(_D8) = *(_WORD *)(v36 + v89 + 26);
          double v128 = v124 + _D25 * -0.168736;
          _H9 = *(_WORD *)(v36 + v89 + 28);
          __asm
          {
            FCVT            D27, H27
            FCVT            D8, H8
          }
          _D25 = v127 + _D25 * 0.5;
          __asm { FCVT            D26, H9 }
          int v134 = (int)((_D8 * 0.587 + _D27 * 0.299 + _D26 * 0.114) * 1023.0 + 0.0);
          double v135 = v128 + _D24 * -0.331264;
          _H9 = *(_WORD *)(v33 + v89 + 16);
          _H10 = *(_WORD *)(v33 + v89 + 18);
          _H11 = *(_WORD *)(v33 + v89 + 20);
          __asm
          {
            FCVT            D9, H9
            FCVT            D10, H10
          }
          double v141 = _D25 + _D24 * -0.418688;
          __asm { FCVT            D11, H11 }
          double v143 = v135 + _D23 * 0.5;
          LOWORD(_D25) = *(_WORD *)(v33 + v89 + 24);
          _H12 = *(_WORD *)(v33 + v89 + 26);
          _H13 = *(_WORD *)(v33 + v89 + 28);
          double v146 = v141 + _D23 * -0.081312;
          __asm
          {
            FCVT            D24, H25
            FCVT            D25, H12
            FCVT            D13, H13
          }
          int v150 = (int)((_D25 * 0.587 + _D24 * 0.299 + _D13 * 0.114) * 1023.0 + 0.0);
          _D28 = v143 + _D22 * -0.168736 + _D20 * -0.331264;
          int v152 = (int *)&v87[v85];
          int v153 = v110 | (v115 << 10);
          int v154 = (unsigned int *)&v34[v85 / 4];
          _D20 = v146 + _D22 * 0.5 + _D20 * -0.418688 + _D21 * -0.081312;
          int v156 = v117 | (v118 << 10);
          unsigned int v157 = (int *)&v88[v85];
          int *v157 = v153 | ((int)((_D30 * 0.587 + _D29 * 0.299 + _D31 * 0.114) * 1023.0 + 0.0) << 20);
          *int v152 = v156 | ((int)((_D10 * 0.587 + _D9 * 0.299 + _D11 * 0.114) * 1023.0 + 0.0) << 20);
          _D23 = (_D30 * -0.331264
                + _D29 * -0.168736
                + _D31 * 0.5
                + _D27 * -0.168736
                + _D8 * -0.331264
                + _D26 * 0.5
                + _D9 * -0.168736
                + _D10 * -0.331264
                + _D11 * 0.5
                + _D24 * -0.168736
                + _D25 * -0.331264
                + _D13 * 0.5)
               * 1023.0
               * 0.25;
          _D22 = (_D30 * -0.418688
                + _D29 * 0.5
                + _D31 * -0.081312
                + _D27 * 0.5
                + _D8 * -0.418688
                + _D26 * -0.081312
                + _D9 * 0.5
                + _D10 * -0.418688
                + _D11 * -0.081312
                + _D24 * 0.5
                + _D25 * -0.418688
                + _D13 * -0.081312)
               * 1023.0;
          LOWORD(_D24) = *(_WORD *)(v36 + v89 + 32);
          LOWORD(_D25) = *(_WORD *)(v36 + v89 + 34);
          LOWORD(_D26) = *(_WORD *)(v36 + v89 + 36);
          __asm
          {
            FCVT            D24, H24
            FCVT            D25, H25
            FCVT            D26, H26
          }
          *(float *)&_D21 = (_D28 + _D21 * 0.5) * 1023.0 * 0.25;
          LOWORD(_D27) = *(_WORD *)(v36 + v89 + 40);
          LOWORD(_D28) = *(_WORD *)(v36 + v89 + 42);
          *(float *)&_D20 = _D20 * 1023.0 * 0.25;
          LOWORD(_D29) = *(_WORD *)(v36 + v89 + 44);
          __asm
          {
            FCVT            D27, H27
            FCVT            D28, H28
          }
          *(float *)&_D23 = _D23;
          __asm { FCVT            D29, H29 }
          *(float *)&_D22 = _D22 * 0.25;
          int v166 = v134 | ((int)((_D25 * 0.587 + _D24 * 0.299 + _D26 * 0.114) * 1023.0 + 0.0) << 10) | ((int)((_D28 * 0.587 + _D27 * 0.299 + _D29 * 0.114) * 1023.0 + 0.0) << 20);
          LOWORD(_D30) = *(_WORD *)(v33 + v89 + 32);
          LOWORD(_D31) = *(_WORD *)(v33 + v89 + 34);
          unsigned int v167 = llroundf(*(float *)&_D21);
          LOWORD(_D21) = *(_WORD *)(v33 + v89 + 36);
          __asm
          {
            FCVT            D30, H30
            FCVT            D31, H31
          }
          unsigned int v170 = llroundf(*(float *)&_D20);
          __asm { FCVT            D21, H21 }
          unsigned int v172 = llroundf(*(float *)&_D23);
          LOWORD(_D20) = *(_WORD *)(v33 + v89 + 40);
          LOWORD(_D23) = *(_WORD *)(v33 + v89 + 42);
          unsigned int v173 = llroundf(*(float *)&_D22);
          LOWORD(_D22) = *(_WORD *)(v33 + v89 + 44);
          __asm
          {
            FCVT            D20, H20
            FCVT            D23, H23
            FCVT            D22, H22
          }
          int v177 = (int)((_D23 * 0.587 + _D20 * 0.299 + _D22 * 0.114) * 1023.0 + 0.0);
          *(float *)&_D8 = (_D25 * -0.331264
                          + _D24 * -0.168736
                          + _D26 * 0.5
                          + _D27 * -0.168736
                          + _D28 * -0.331264
                          + _D29 * 0.5
                          + _D30 * -0.168736
                          + _D31 * -0.331264
                          + _D21 * 0.5
                          + _D20 * -0.168736
                          + _D23 * -0.331264
                          + _D22 * 0.5)
                         * 1023.0
                         * 0.25;
          unsigned int *v154 = ((v170 << 10) + 0x80000) | (v167 + 512) | ((v172 << 20) + 0x20000000);
          *(float *)&_D20 = (_D25 * -0.418688
                           + _D24 * 0.5
                           + _D26 * -0.081312
                           + _D27 * 0.5
                           + _D28 * -0.418688
                           + _D29 * -0.081312
                           + _D30 * 0.5
                           + _D31 * -0.418688
                           + _D21 * -0.081312
                           + _D20 * 0.5
                           + _D23 * -0.418688
                           + _D22 * -0.081312)
                          * 1023.0
                          * 0.25;
          v157[1] = v166;
          v152[1] = v150 | ((int)((_D31 * 0.587 + _D30 * 0.299 + _D21 * 0.114) * 1023.0 + 0.0) << 10) | (v177 << 20);
          v154[1] = ((llroundf(*(float *)&_D20) << 20) + 0x20000000) | (v173 + 512) | ((llroundf(*(float *)&_D8) << 10)
                                                                                     + 0x80000);
          v90 += 6;
          v85 += 8;
          v89 += 48;
        }
        while (v90 < v18);
        malloc_type_id_t v27 = v227;
        uint64_t v178 = v226 & 0x3C;
        unsigned int v41 = (int *)((char *)v42 + v178 + v85);
        uint64_t v34 = (__int32 *)((char *)v34 + v85);
        uint64_t v38 = (_DWORD *)((char *)v43 + v178 + v85);
        unsigned int v179 = (__int16 *)(v33 + v89);
        float v180 = (__int16 *)(v36 + v89);
        uint64_t v26 = v228;
        uint64_t v19 = v229;
        unsigned int v21 = v225;
        unint64_t v23 = v224;
      }
      if (v90 < v14)
      {
        uint64_t v181 = 0;
        float v182 = v180;
        unint64_t v183 = v179;
        unsigned int v184 = v18 % 3;
        do
        {
          if (v90)
          {
            unsigned int v188 = &v180[v181 - 4];
            uint64_t v185 = v182 - 3;
            unsigned int v186 = v182 - 2;
            _H20 = v180[v181];
            __asm { FCVT            S20, H20 }
            _H21 = v180[v181 + 1];
            __asm { FCVT            S21, H21 }
            _H22 = v180[v181 + 2];
            __asm { FCVT            S22, H22 }
          }
          else
          {
            uint64_t v185 = &v180[v181 + 1];
            unsigned int v186 = &v180[v181 + 2];
            _S20 = 0.0;
            unsigned int v188 = v182;
            _S21 = 0.0;
            _S22 = 0.0;
          }
          _H24 = *v186;
          _H25 = *v185;
          _H23 = *v188;
          __asm
          {
            FCVT            D23, H23
            FCVT            D25, H25
            FCVT            D24, H24
          }
          unint64_t v200 = *((unsigned __int8 *)&v239 + v184);
          *uint64_t v38 = ((int)((_D25 * 0.587 + _D23 * 0.299 + _D24 * 0.114) * 1023.0 + 0.0) << v200) | *v38 & ~(1023 << v200);
          if (v90)
          {
            v204 = &v179[v181 - 4];
            v201 = v183 - 3;
            v202 = v183 - 2;
            _H26 = v179[v181];
            __asm { FCVT            S29, H26 }
            _H26 = v179[v181 + 1];
            __asm { FCVT            S30, H26 }
            _H26 = v179[v181 + 2];
            __asm { FCVT            S31, H26 }
          }
          else
          {
            v201 = &v179[v181 + 1];
            v202 = &v179[v181 + 2];
            _S29 = 0.0;
            v204 = v183;
            _S30 = 0.0;
            _S31 = 0.0;
          }
          _H27 = *v202;
          _H28 = *v201;
          _H26 = *v204;
          __asm
          {
            FCVT            D26, H26
            FCVT            D28, H28
            FCVT            D27, H27
          }
          if (v90)
          {
            float64x2_t v217 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D5F0, _D25), (float64x2_t)xmmword_193E7D600, _D23), (float64x2_t)xmmword_193E7D610, _D24), (float64x2_t)xmmword_193E7D600, _S20), (float64x2_t)xmmword_193E7D5F0,
                                     _S21),
                                   (float64x2_t)xmmword_193E7D610,
                                   _S22),
                                 (float64x2_t)xmmword_193E7D600,
                                 _D26),
                               (float64x2_t)xmmword_193E7D5F0,
                               _D28),
                             (float64x2_t)xmmword_193E7D610,
                             _D27),
                           (float64x2_t)xmmword_193E7D600,
                           _S29),
                         (float64x2_t)xmmword_193E7D5F0,
                         _S30),
                       (float64x2_t)xmmword_193E7D610,
                       _S31),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V21.2D, #0.25 }
            int32x2_t v216 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v217, _Q21)))), (int32x2_t)0x20000000200);
          }
          else
          {
            int32x2_t v216 = 0;
          }
          *unsigned int v41 = *v41 & ~(1023 << v200) | ((int)((_D28 * 0.587 + _D26 * 0.299 + _D27 * 0.114) * 1023.0 + 0.0) << v200);
          if (v184 == 2) {
            unsigned int v184 = 0;
          }
          else {
            ++v184;
          }
          if (v90)
          {
            unint64_t v219 = *((unsigned __int8 *)&v239 + v39);
            *uint64_t v34 = *v34 & ~(1023 << v219) | (v216.i32[0] << v219);
            v220 = (__int32 *)((char *)v34 + ((v219 >> 2) & 0x3C));
            if (v39 == 2) {
              unsigned int v221 = 0;
            }
            else {
              unsigned int v221 = v39 + 1;
            }
            unint64_t v222 = *((unsigned __int8 *)&v239 + v221);
            __int32 *v220 = *v220 & ~(1023 << v222) | (v216.i32[1] << v222);
            uint64_t v34 = (__int32 *)((char *)v220 + ((v222 >> 2) & 0x3C));
            if (v221 == 2) {
              unsigned int v39 = 0;
            }
            else {
              unsigned int v39 = v221 + 1;
            }
          }
          v182 += 4;
          v38 += v200 >> 4;
          v183 += 4;
          ++v90;
          v181 += 4;
          v41 += v200 >> 4;
        }
        while (v14 != v90);
      }
      uint64_t v31 = &v237[v233];
      unsigned int v32 = &v236[v233];
      v26 += 4 * v232;
      ++v19;
      v27 += v232;
      uint64_t v29 = v238 + v230;
      uint64_t v33 = v235 + v230;
      uint64_t v34 = &v234[v231];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_VImage_Setup_RGfA_32ARGB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  unint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *unint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_RGfA_32ARGB;
  *a11 = vt_VImage_Cleanup_RGfA_32ARGB;
  *a8 = v14;
  return 0;
}

uint64_t vt_VImage_Setup_RGfA_32BGRA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  unint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *unint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_RGfA_32BGRA;
  *a11 = vt_VImage_Cleanup_RGfA_32BGRA;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Copy_RGfA_w30r(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 0, 1380410945, a1);
}

vImage_Error vt_VImage_Copy_RGfA_b3a8(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 1, 1380410945, a1);
}

uint64_t vt_VImage_Setup_RGfA_RGhA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  unint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *unint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_RGfA_RGhA;
  *a11 = vt_VImage_Cleanup_RGfA_RGhA;
  *a8 = v14;
  return 0;
}

uint64_t vt_Copy_RGfA_p420ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v200 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12) {
    unint64_t v14 = v13 - v12;
  }
  else {
    unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(void *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    unint64_t v15 = ((*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v16 = v13 % 6;
  _CF = v14 >= v16;
  unint64_t v18 = v14 - v16;
  if (!_CF) {
    unint64_t v18 = 0;
  }
  if (v15 >= 2)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 / 3;
    unsigned int v21 = v12 % 3;
    unint64_t v22 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v23 = v15 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = a7[1] + v24 * (v11 >> 1);
    uint64_t v26 = *a7 + *a8 * v11 + 4 * v20;
    malloc_type_id_t v27 = (int *)(v26 + *a8);
    uint64_t v28 = *a3;
    unint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v9;
    uint64_t v31 = 16 * v10;
    unsigned int v32 = (float *)(v30 + 16 * v10);
    uint64_t v33 = (float *)((char *)v32 + v29);
    uint64_t v193 = (v29 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v191 = v24 >> 2;
    uint64_t v192 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v190 = 4 * (v29 >> 1);
    uint64_t v34 = v28 + v29 + v29 * (*(void *)(a2 + 40) + (*(void *)(a2 + 40) & 1));
    uint64_t v35 = (__int32 *)(v25 + 4 * v20);
    unint64_t v186 = v14;
    unsigned int v185 = v21;
    unint64_t v184 = v23;
    do
    {
      uint64_t v36 = 0;
      uint64_t v195 = v34;
      v196 = v33;
      v197 = v32;
      uint64_t v198 = v30;
      uint64_t v37 = v30;
      uint64_t v38 = v32;
      unsigned int v39 = v33;
      unsigned int v40 = (int *)v26;
      unsigned int v41 = v21;
      unsigned int v42 = v21;
      v194 = v35;
      v199 = v27;
      uint64_t v43 = v27;
      do
      {
        uint64_t v44 = v43;
        uint64_t v45 = v40;
        if (v36)
        {
          long long v49 = (float *)(v37 + v31 - 16);
          uint64_t v46 = v38 - 3;
          uint64_t v47 = v38 - 2;
          float v48 = *(float *)(v37 + v31);
          float v50 = *(float *)(v37 + v31 + 4);
          float v51 = *(float *)(v37 + v31 + 8);
        }
        else
        {
          uint64_t v46 = (float *)(v37 + v31 + 4);
          uint64_t v47 = (float *)(v37 + v31 + 8);
          float v48 = 0.0;
          long long v49 = v38;
          float v50 = 0.0;
          float v51 = 0.0;
        }
        double v52 = *v49;
        double v53 = *v46;
        double v54 = *v47;
        unint64_t v55 = *((unsigned __int8 *)&v200 + v42);
        *uint64_t v45 = ((int)((v53 * 0.580573067 + v52 * 0.22495132 + v54 * 0.0507805982) * 1023.0 + 64.0) << v55) | *v45 & ~(1023 << v55);
        if (v36)
        {
          long long v59 = (float *)(v34 + v31 - 16);
          long long v56 = v39 - 3;
          long long v57 = v39 - 2;
          float v58 = *(float *)(v34 + v31);
          float v60 = *(float *)(v34 + v31 + 4);
          float v61 = *(float *)(v34 + v31 + 8);
        }
        else
        {
          long long v56 = (float *)(v34 + v31 + 4);
          long long v57 = (float *)(v34 + v31 + 8);
          float v58 = 0.0;
          long long v59 = v39;
          float v60 = 0.0;
          float v61 = 0.0;
        }
        double v62 = *v59;
        double v63 = *v56;
        double v64 = *v57;
        if (v36)
        {
          float64x2_t v66 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D500, v53), (float64x2_t)xmmword_193E7D510, v52), (float64x2_t)xmmword_193E7D520, v54), (float64x2_t)xmmword_193E7D510, v48), (float64x2_t)xmmword_193E7D500,
                                  v50),
                                (float64x2_t)xmmword_193E7D520,
                                v51),
                              (float64x2_t)xmmword_193E7D510,
                              v62),
                            (float64x2_t)xmmword_193E7D500,
                            v63),
                          (float64x2_t)xmmword_193E7D520,
                          v64),
                        (float64x2_t)xmmword_193E7D510,
                        v58),
                      (float64x2_t)xmmword_193E7D500,
                      v60),
                    (float64x2_t)xmmword_193E7D520,
                    v61),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V20.2D, #0.25 }
          int32x2_t v65 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v66, _Q20)))), (int32x2_t)0x20000000200);
        }
        else
        {
          int32x2_t v65 = 0;
        }
        int *v43 = *v43 & ~(1023 << v55) | ((int)((v63 * 0.580573067 + v62 * 0.22495132 + v64 * 0.0507805982) * 1023.0 + 64.0) << v55);
        if (v42 == 2) {
          unsigned int v42 = 0;
        }
        else {
          ++v42;
        }
        if (v36)
        {
          unint64_t v71 = *((unsigned __int8 *)&v200 + v41);
          *uint64_t v35 = *v35 & ~(1023 << v71) | (v65.i32[0] << v71);
          uint64_t v72 = (__int32 *)((char *)v35 + ((v71 >> 2) & 0x3C));
          if (v41 == 2) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = v41 + 1;
          }
          unint64_t v74 = *((unsigned __int8 *)&v200 + v73);
          *uint64_t v72 = *v72 & ~(1023 << v74) | (v65.i32[1] << v74);
          uint64_t v35 = (__int32 *)((char *)v72 + ((v74 >> 2) & 0x3C));
          if (v73 == 2) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = v73 + 1;
          }
        }
        v38 += 4;
        unsigned int v40 = &v45[v55 >> 4];
        v39 += 4;
        ++v36;
        v37 += 16;
        v43 += v55 >> 4;
        v34 += 16;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        int v150 = (float *)(v37 + v31);
        unint64_t v149 = (float *)(v34 + v31);
        unint64_t v80 = v22;
      }
      else
      {
        uint64_t v188 = v26;
        uint64_t v189 = v19;
        unint64_t v75 = 0;
        unint64_t v187 = v55 >> 2;
        uint64_t v76 = (v55 >> 2) & 0x3C;
        int v77 = (char *)v44 + v76;
        int32x2_t v78 = (char *)v45 + v76;
        uint64_t v79 = v31;
        unint64_t v80 = v22;
        do
        {
          double v81 = *(float *)(v37 + v79);
          double v82 = *(float *)(v37 + v79 + 4);
          double v83 = *(float *)(v37 + v79 + 8);
          double v84 = *(float *)(v37 + v79 + 16);
          double v85 = *(float *)(v37 + v79 + 20);
          double v86 = *(float *)(v37 + v79 + 24);
          double v87 = *(float *)(v34 + v79);
          double v88 = *(float *)(v34 + v79 + 4);
          double v89 = *(float *)(v34 + v79 + 8);
          int v90 = (int)((v82 * 0.580573067 + v81 * 0.22495132 + v83 * 0.0507805982) * 1023.0 + 64.0);
          double v91 = *(float *)(v34 + v79 + 16);
          double v92 = *(float *)(v34 + v79 + 20);
          int v93 = (int)((v85 * 0.580573067 + v84 * 0.22495132 + v86 * 0.0507805982) * 1023.0 + 64.0);
          double v94 = *(float *)(v34 + v79 + 24);
          int v95 = (int)((v88 * 0.580573067 + v87 * 0.22495132 + v89 * 0.0507805982) * 1023.0 + 64.0);
          int v96 = (int)((v92 * 0.580573067 + v91 * 0.22495132 + v94 * 0.0507805982) * 1023.0 + 64.0);
          double v97 = v82 * -0.315631984 + v81 * -0.122295679 + v83 * 0.437927664 + v84 * -0.122295679;
          double v98 = v82 * -0.402705142 + v81 * 0.437927664 + v83 * -0.035222522 + v84 * 0.437927664 + v85 * -0.402705142;
          double v99 = *(float *)(v37 + v79 + 32);
          double v100 = v97 + v85 * -0.315631984 + v86 * 0.437927664;
          double v101 = *(float *)(v37 + v79 + 36);
          double v102 = *(float *)(v37 + v79 + 40);
          double v103 = v98 + v86 * -0.035222522;
          double v104 = v100 + v87 * -0.122295679;
          double v105 = *(float *)(v37 + v79 + 48);
          double v106 = *(float *)(v37 + v79 + 52);
          double v107 = v103 + v87 * 0.437927664;
          double v108 = *(float *)(v37 + v79 + 56);
          int v109 = (int)((v106 * 0.580573067 + v105 * 0.22495132 + v108 * 0.0507805982) * 1023.0 + 64.0);
          double v110 = *(float *)(v34 + v79 + 32);
          double v111 = *(float *)(v34 + v79 + 36);
          double v112 = *(float *)(v34 + v79 + 40);
          double v113 = v104 + v88 * -0.315631984 + v89 * 0.437927664;
          double v114 = v107 + v88 * -0.402705142 + v89 * -0.035222522;
          double v115 = *(float *)(v34 + v79 + 48);
          double v116 = *(float *)(v34 + v79 + 52);
          double v117 = *(float *)(v34 + v79 + 56);
          int v118 = (int)((v116 * 0.580573067 + v115 * 0.22495132 + v117 * 0.0507805982) * 1023.0 + 64.0);
          double v119 = v113 + v91 * -0.122295679 + v92 * -0.315631984;
          double v120 = (int *)&v77[v75];
          int v121 = v90 | (v93 << 10);
          double v122 = (unsigned int *)&v35[v75 / 4];
          double v123 = v114 + v91 * 0.437927664 + v92 * -0.402705142 + v94 * -0.035222522;
          int v124 = v95 | (v96 << 10);
          uint64_t v125 = (int *)&v78[v75];
          *uint64_t v125 = v121 | ((int)((v101 * 0.580573067 + v99 * 0.22495132 + v102 * 0.0507805982) * 1023.0 + 64.0) << 20);
          *double v120 = v124 | ((int)((v111 * 0.580573067 + v110 * 0.22495132 + v112 * 0.0507805982) * 1023.0 + 64.0) << 20);
          double v126 = (v101 * -0.315631984
                + v99 * -0.122295679
                + v102 * 0.437927664
                + v105 * -0.122295679
                + v106 * -0.315631984
                + v108 * 0.437927664
                + v110 * -0.122295679
                + v111 * -0.315631984
                + v112 * 0.437927664
                + v115 * -0.122295679
                + v116 * -0.315631984
                + v117 * 0.437927664)
               * 1023.0
               * 0.25;
          double v127 = (v101 * -0.402705142
                + v99 * 0.437927664
                + v102 * -0.035222522
                + v105 * 0.437927664
                + v106 * -0.402705142
                + v108 * -0.035222522
                + v110 * 0.437927664
                + v111 * -0.402705142
                + v112 * -0.035222522
                + v115 * 0.437927664
                + v116 * -0.402705142
                + v117 * -0.035222522)
               * 1023.0;
          double v128 = *(float *)(v37 + v79 + 64);
          double v129 = *(float *)(v37 + v79 + 68);
          double v130 = *(float *)(v37 + v79 + 72);
          *(float *)&double v94 = (v119 + v94 * 0.437927664) * 1023.0 * 0.25;
          *(float *)&double v123 = v123 * 1023.0 * 0.25;
          double v131 = *(float *)(v37 + v79 + 80);
          double v132 = *(float *)(v37 + v79 + 84);
          *(float *)&double v126 = v126;
          double v133 = *(float *)(v37 + v79 + 88);
          *(float *)&double v127 = v127 * 0.25;
          int v134 = v109 | ((int)((v129 * 0.580573067 + v128 * 0.22495132 + v130 * 0.0507805982) * 1023.0 + 64.0) << 10) | ((int)((v132 * 0.580573067 + v131 * 0.22495132 + v133 * 0.0507805982) * 1023.0 + 64.0) << 20);
          unsigned int v135 = llroundf(*(float *)&v94);
          double v136 = *(float *)(v34 + v79 + 64);
          double v137 = *(float *)(v34 + v79 + 68);
          unsigned int v138 = llroundf(*(float *)&v123);
          double v139 = *(float *)(v34 + v79 + 72);
          unsigned int v140 = llroundf(*(float *)&v126);
          unsigned int v141 = llroundf(*(float *)&v127);
          double v142 = *(float *)(v34 + v79 + 80);
          double v143 = *(float *)(v34 + v79 + 84);
          double v144 = *(float *)(v34 + v79 + 88);
          unsigned int v145 = v141 + 512;
          float v146 = (v129 * -0.315631984
                + v128 * -0.122295679
                + v130 * 0.437927664
                + v131 * -0.122295679
                + v132 * -0.315631984
                + v133 * 0.437927664
                + v136 * -0.122295679
                + v137 * -0.315631984
                + v139 * 0.437927664
                + v142 * -0.122295679
                + v143 * -0.315631984
                + v144 * 0.437927664)
               * 1023.0
               * 0.25;
          unsigned int v147 = llroundf(v146);
          *double v122 = ((v138 << 10) + 0x80000) | (v135 + 512) | ((v140 << 20) + 0x20000000);
          float v148 = (v129 * -0.402705142
                + v128 * 0.437927664
                + v130 * -0.035222522
                + v131 * 0.437927664
                + v132 * -0.402705142
                + v133 * -0.035222522
                + v136 * 0.437927664
                + v137 * -0.402705142
                + v139 * -0.035222522
                + v142 * 0.437927664
                + v143 * -0.402705142
                + v144 * -0.035222522)
               * 1023.0
               * 0.25;
          v125[1] = v134;
          v120[1] = v118 | ((int)((v137 * 0.580573067 + v136 * 0.22495132 + v139 * 0.0507805982) * 1023.0 + 64.0) << 10) | ((int)((v143 * 0.580573067 + v142 * 0.22495132 + v144 * 0.0507805982) * 1023.0 + 64.0) << 20);
          v122[1] = ((llroundf(v148) << 20) + 0x20000000) | v145 | ((v147 << 10) + 0x80000);
          v80 += 6;
          v75 += 8;
          v79 += 96;
        }
        while (v80 < v18);
        unint64_t v14 = v186;
        uint64_t v43 = (int *)((char *)v44 + (v187 & 0x3C) + v75);
        uint64_t v35 = (__int32 *)((char *)v35 + v75);
        unsigned int v40 = (int *)((char *)v45 + (v187 & 0x3C) + v75);
        unint64_t v149 = (float *)(v34 + v79);
        int v150 = (float *)(v37 + v79);
        uint64_t v26 = v188;
        uint64_t v19 = v189;
        unsigned int v21 = v185;
        unint64_t v23 = v184;
      }
      if (v80 < v14)
      {
        uint64_t v151 = 0;
        int v152 = v150;
        int v153 = v149;
        unsigned int v154 = v18 % 3;
        do
        {
          int v155 = &v150[v151];
          if (v80)
          {
            unsigned int v159 = v155 - 4;
            int v156 = v152 - 3;
            unsigned int v157 = v152 - 2;
            float v158 = *v155;
            float v160 = v155[1];
            float v161 = v155[2];
          }
          else
          {
            int v156 = v155 + 1;
            unsigned int v157 = v155 + 2;
            float v158 = 0.0;
            unsigned int v159 = v152;
            float v160 = 0.0;
            float v161 = 0.0;
          }
          double v162 = *v159;
          double v163 = *v156;
          double v164 = *v157;
          unint64_t v165 = *((unsigned __int8 *)&v200 + v154);
          *unsigned int v40 = ((int)((v163 * 0.580573067 + v162 * 0.22495132 + v164 * 0.0507805982) * 1023.0 + 64.0) << v165) | *v40 & ~(1023 << v165);
          int v166 = &v149[v151];
          if (v80)
          {
            unsigned int v170 = v166 - 4;
            unsigned int v167 = v153 - 3;
            int v168 = v153 - 2;
            float v169 = *v166;
            float v171 = v166[1];
            float v172 = v166[2];
          }
          else
          {
            unsigned int v167 = v166 + 1;
            int v168 = v166 + 2;
            float v169 = 0.0;
            unsigned int v170 = v153;
            float v171 = 0.0;
            float v172 = 0.0;
          }
          double v173 = *v170;
          double v174 = *v167;
          double v175 = *v168;
          if (v80)
          {
            float64x2_t v177 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D500, v163), (float64x2_t)xmmword_193E7D510, v162), (float64x2_t)xmmword_193E7D520, v164), (float64x2_t)xmmword_193E7D510, v158), (float64x2_t)xmmword_193E7D500,
                                     v160),
                                   (float64x2_t)xmmword_193E7D520,
                                   v161),
                                 (float64x2_t)xmmword_193E7D510,
                                 v173),
                               (float64x2_t)xmmword_193E7D500,
                               v174),
                             (float64x2_t)xmmword_193E7D520,
                             v175),
                           (float64x2_t)xmmword_193E7D510,
                           v169),
                         (float64x2_t)xmmword_193E7D500,
                         v171),
                       (float64x2_t)xmmword_193E7D520,
                       v172),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V20.2D, #0.25 }
            int32x2_t v176 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v177, _Q20)))), (int32x2_t)0x20000000200);
          }
          else
          {
            int32x2_t v176 = 0;
          }
          int *v43 = *v43 & ~(1023 << v165) | ((int)((v174 * 0.580573067 + v173 * 0.22495132 + v175 * 0.0507805982) * 1023.0
                                               + 64.0) << v165);
          if (v154 == 2) {
            unsigned int v154 = 0;
          }
          else {
            ++v154;
          }
          if (v80)
          {
            unint64_t v179 = *((unsigned __int8 *)&v200 + v41);
            *uint64_t v35 = *v35 & ~(1023 << v179) | (v176.i32[0] << v179);
            float v180 = (__int32 *)((char *)v35 + ((v179 >> 2) & 0x3C));
            if (v41 == 2) {
              unsigned int v181 = 0;
            }
            else {
              unsigned int v181 = v41 + 1;
            }
            unint64_t v182 = *((unsigned __int8 *)&v200 + v181);
            *float v180 = *v180 & ~(1023 << v182) | (v176.i32[1] << v182);
            uint64_t v35 = (__int32 *)((char *)v180 + ((v182 >> 2) & 0x3C));
            if (v181 == 2) {
              unsigned int v41 = 0;
            }
            else {
              unsigned int v41 = v181 + 1;
            }
          }
          v152 += 4;
          v40 += v165 >> 4;
          v153 += 4;
          ++v80;
          v151 += 4;
          v43 += v165 >> 4;
        }
        while (v14 != v80);
      }
      unsigned int v32 = &v197[v193];
      uint64_t v33 = &v196[v193];
      v26 += 4 * v192;
      ++v19;
      malloc_type_id_t v27 = &v199[v192];
      uint64_t v30 = v198 + v190;
      uint64_t v34 = v195 + v190;
      uint64_t v35 = &v194[v191];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGfA_p420ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v200 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12) {
    unint64_t v14 = v13 - v12;
  }
  else {
    unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(void *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    unint64_t v15 = ((*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v16 = v13 % 6;
  _CF = v14 >= v16;
  unint64_t v18 = v14 - v16;
  if (!_CF) {
    unint64_t v18 = 0;
  }
  if (v15 >= 2)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 / 3;
    unsigned int v21 = v12 % 3;
    unint64_t v22 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v23 = v15 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = a7[1] + v24 * (v11 >> 1);
    uint64_t v26 = *a7 + *a8 * v11 + 4 * v20;
    malloc_type_id_t v27 = (int *)(v26 + *a8);
    uint64_t v28 = *a3;
    unint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v9;
    uint64_t v31 = 16 * v10;
    unsigned int v32 = (float *)(v30 + 16 * v10);
    uint64_t v33 = (float *)((char *)v32 + v29);
    uint64_t v193 = (v29 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v191 = v24 >> 2;
    uint64_t v192 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v190 = 4 * (v29 >> 1);
    uint64_t v34 = v28 + v29 + v29 * (*(void *)(a2 + 40) + (*(void *)(a2 + 40) & 1));
    uint64_t v35 = (__int32 *)(v25 + 4 * v20);
    unint64_t v186 = v14;
    unsigned int v185 = v21;
    unint64_t v184 = v23;
    do
    {
      uint64_t v36 = 0;
      uint64_t v195 = v34;
      v196 = v33;
      v197 = v32;
      uint64_t v198 = v30;
      uint64_t v37 = v30;
      uint64_t v38 = v32;
      unsigned int v39 = v33;
      unsigned int v40 = (int *)v26;
      unsigned int v41 = v21;
      unsigned int v42 = v21;
      v194 = v35;
      v199 = v27;
      uint64_t v43 = v27;
      do
      {
        uint64_t v44 = v43;
        uint64_t v45 = v40;
        if (v36)
        {
          long long v49 = (float *)(v37 + v31 - 16);
          uint64_t v46 = v38 - 3;
          uint64_t v47 = v38 - 2;
          float v48 = *(float *)(v37 + v31);
          float v50 = *(float *)(v37 + v31 + 4);
          float v51 = *(float *)(v37 + v31 + 8);
        }
        else
        {
          uint64_t v46 = (float *)(v37 + v31 + 4);
          uint64_t v47 = (float *)(v37 + v31 + 8);
          float v48 = 0.0;
          long long v49 = v38;
          float v50 = 0.0;
          float v51 = 0.0;
        }
        double v52 = *v49;
        double v53 = *v46;
        double v54 = *v47;
        unint64_t v55 = *((unsigned __int8 *)&v200 + v42);
        *uint64_t v45 = ((int)((v53 * 0.614230588 + v52 * 0.182585882 + v54 * 0.0620070588) * 1023.0 + 64.0) << v55) | *v45 & ~(1023 << v55);
        if (v36)
        {
          long long v59 = (float *)(v34 + v31 - 16);
          long long v56 = v39 - 3;
          long long v57 = v39 - 2;
          float v58 = *(float *)(v34 + v31);
          float v60 = *(float *)(v34 + v31 + 4);
          float v61 = *(float *)(v34 + v31 + 8);
        }
        else
        {
          long long v56 = (float *)(v34 + v31 + 4);
          long long v57 = (float *)(v34 + v31 + 8);
          float v58 = 0.0;
          long long v59 = v39;
          float v60 = 0.0;
          float v61 = 0.0;
        }
        double v62 = *v59;
        double v63 = *v56;
        double v64 = *v57;
        if (v36)
        {
          float64x2_t v66 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D530, v53), (float64x2_t)xmmword_193E7D540, v52), (float64x2_t)xmmword_193E7D550, v54), (float64x2_t)xmmword_193E7D540, v48), (float64x2_t)xmmword_193E7D530,
                                  v50),
                                (float64x2_t)xmmword_193E7D550,
                                v51),
                              (float64x2_t)xmmword_193E7D540,
                              v62),
                            (float64x2_t)xmmword_193E7D530,
                            v63),
                          (float64x2_t)xmmword_193E7D550,
                          v64),
                        (float64x2_t)xmmword_193E7D540,
                        v58),
                      (float64x2_t)xmmword_193E7D530,
                      v60),
                    (float64x2_t)xmmword_193E7D550,
                    v61),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V20.2D, #0.25 }
          int32x2_t v65 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v66, _Q20)))), (int32x2_t)0x20000000200);
        }
        else
        {
          int32x2_t v65 = 0;
        }
        int *v43 = *v43 & ~(1023 << v55) | ((int)((v63 * 0.614230588 + v62 * 0.182585882 + v64 * 0.0620070588) * 1023.0
                                            + 64.0) << v55);
        if (v42 == 2) {
          unsigned int v42 = 0;
        }
        else {
          ++v42;
        }
        if (v36)
        {
          unint64_t v71 = *((unsigned __int8 *)&v200 + v41);
          *uint64_t v35 = *v35 & ~(1023 << v71) | (v65.i32[0] << v71);
          uint64_t v72 = (__int32 *)((char *)v35 + ((v71 >> 2) & 0x3C));
          if (v41 == 2) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = v41 + 1;
          }
          unint64_t v74 = *((unsigned __int8 *)&v200 + v73);
          *uint64_t v72 = *v72 & ~(1023 << v74) | (v65.i32[1] << v74);
          uint64_t v35 = (__int32 *)((char *)v72 + ((v74 >> 2) & 0x3C));
          if (v73 == 2) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = v73 + 1;
          }
        }
        v38 += 4;
        unsigned int v40 = &v45[v55 >> 4];
        v39 += 4;
        ++v36;
        v37 += 16;
        v43 += v55 >> 4;
        v34 += 16;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        int v150 = (float *)(v37 + v31);
        unint64_t v149 = (float *)(v34 + v31);
        unint64_t v80 = v22;
      }
      else
      {
        uint64_t v188 = v26;
        uint64_t v189 = v19;
        unint64_t v75 = 0;
        unint64_t v187 = v55 >> 2;
        uint64_t v76 = (v55 >> 2) & 0x3C;
        int v77 = (char *)v44 + v76;
        int32x2_t v78 = (char *)v45 + v76;
        uint64_t v79 = v31;
        unint64_t v80 = v22;
        do
        {
          double v81 = *(float *)(v37 + v79);
          double v82 = *(float *)(v37 + v79 + 4);
          double v83 = *(float *)(v37 + v79 + 8);
          double v84 = *(float *)(v37 + v79 + 16);
          double v85 = *(float *)(v37 + v79 + 20);
          double v86 = *(float *)(v37 + v79 + 24);
          double v87 = *(float *)(v34 + v79);
          double v88 = *(float *)(v34 + v79 + 4);
          double v89 = *(float *)(v34 + v79 + 8);
          int v90 = (int)((v82 * 0.614230588 + v81 * 0.182585882 + v83 * 0.0620070588) * 1023.0 + 64.0);
          double v91 = *(float *)(v34 + v79 + 16);
          double v92 = *(float *)(v34 + v79 + 20);
          int v93 = (int)((v85 * 0.614230588 + v84 * 0.182585882 + v86 * 0.0620070588) * 1023.0 + 64.0);
          double v94 = *(float *)(v34 + v79 + 24);
          int v95 = (int)((v88 * 0.614230588 + v87 * 0.182585882 + v89 * 0.0620070588) * 1023.0 + 64.0);
          int v96 = (int)((v92 * 0.614230588 + v91 * 0.182585882 + v94 * 0.0620070588) * 1023.0 + 64.0);
          double v97 = v82 * -0.338572047 + v81 * -0.100643639 + v83 * 0.439215686 + v84 * -0.100643639;
          double v98 = v82 * -0.398942243 + v81 * 0.439215686 + v83 * -0.0402734431 + v84 * 0.439215686 + v85 * -0.398942243;
          double v99 = *(float *)(v37 + v79 + 32);
          double v100 = v97 + v85 * -0.338572047 + v86 * 0.439215686;
          double v101 = *(float *)(v37 + v79 + 36);
          double v102 = *(float *)(v37 + v79 + 40);
          double v103 = v98 + v86 * -0.0402734431;
          double v104 = v100 + v87 * -0.100643639;
          double v105 = *(float *)(v37 + v79 + 48);
          double v106 = *(float *)(v37 + v79 + 52);
          double v107 = v103 + v87 * 0.439215686;
          double v108 = *(float *)(v37 + v79 + 56);
          int v109 = (int)((v106 * 0.614230588 + v105 * 0.182585882 + v108 * 0.0620070588) * 1023.0 + 64.0);
          double v110 = *(float *)(v34 + v79 + 32);
          double v111 = *(float *)(v34 + v79 + 36);
          double v112 = *(float *)(v34 + v79 + 40);
          double v113 = v104 + v88 * -0.338572047 + v89 * 0.439215686;
          double v114 = v107 + v88 * -0.398942243 + v89 * -0.0402734431;
          double v115 = *(float *)(v34 + v79 + 48);
          double v116 = *(float *)(v34 + v79 + 52);
          double v117 = *(float *)(v34 + v79 + 56);
          int v118 = (int)((v116 * 0.614230588 + v115 * 0.182585882 + v117 * 0.0620070588) * 1023.0 + 64.0);
          double v119 = v113 + v91 * -0.100643639 + v92 * -0.338572047;
          double v120 = (int *)&v77[v75];
          int v121 = v90 | (v93 << 10);
          double v122 = (unsigned int *)&v35[v75 / 4];
          double v123 = v114 + v91 * 0.439215686 + v92 * -0.398942243 + v94 * -0.0402734431;
          int v124 = v95 | (v96 << 10);
          uint64_t v125 = (int *)&v78[v75];
          *uint64_t v125 = v121 | ((int)((v101 * 0.614230588 + v99 * 0.182585882 + v102 * 0.0620070588) * 1023.0 + 64.0) << 20);
          *double v120 = v124 | ((int)((v111 * 0.614230588 + v110 * 0.182585882 + v112 * 0.0620070588) * 1023.0 + 64.0) << 20);
          double v126 = (v101 * -0.338572047
                + v99 * -0.100643639
                + v102 * 0.439215686
                + v105 * -0.100643639
                + v106 * -0.338572047
                + v108 * 0.439215686
                + v110 * -0.100643639
                + v111 * -0.338572047
                + v112 * 0.439215686
                + v115 * -0.100643639
                + v116 * -0.338572047
                + v117 * 0.439215686)
               * 1023.0
               * 0.25;
          double v127 = (v101 * -0.398942243
                + v99 * 0.439215686
                + v102 * -0.0402734431
                + v105 * 0.439215686
                + v106 * -0.398942243
                + v108 * -0.0402734431
                + v110 * 0.439215686
                + v111 * -0.398942243
                + v112 * -0.0402734431
                + v115 * 0.439215686
                + v116 * -0.398942243
                + v117 * -0.0402734431)
               * 1023.0;
          double v128 = *(float *)(v37 + v79 + 64);
          double v129 = *(float *)(v37 + v79 + 68);
          double v130 = *(float *)(v37 + v79 + 72);
          *(float *)&double v94 = (v119 + v94 * 0.439215686) * 1023.0 * 0.25;
          *(float *)&double v123 = v123 * 1023.0 * 0.25;
          double v131 = *(float *)(v37 + v79 + 80);
          double v132 = *(float *)(v37 + v79 + 84);
          *(float *)&double v126 = v126;
          double v133 = *(float *)(v37 + v79 + 88);
          *(float *)&double v127 = v127 * 0.25;
          int v134 = v109 | ((int)((v129 * 0.614230588 + v128 * 0.182585882 + v130 * 0.0620070588) * 1023.0 + 64.0) << 10) | ((int)((v132 * 0.614230588 + v131 * 0.182585882 + v133 * 0.0620070588) * 1023.0 + 64.0) << 20);
          unsigned int v135 = llroundf(*(float *)&v94);
          double v136 = *(float *)(v34 + v79 + 64);
          double v137 = *(float *)(v34 + v79 + 68);
          unsigned int v138 = llroundf(*(float *)&v123);
          double v139 = *(float *)(v34 + v79 + 72);
          unsigned int v140 = llroundf(*(float *)&v126);
          unsigned int v141 = llroundf(*(float *)&v127);
          double v142 = *(float *)(v34 + v79 + 80);
          double v143 = *(float *)(v34 + v79 + 84);
          double v144 = *(float *)(v34 + v79 + 88);
          unsigned int v145 = v141 + 512;
          float v146 = (v129 * -0.338572047
                + v128 * -0.100643639
                + v130 * 0.439215686
                + v131 * -0.100643639
                + v132 * -0.338572047
                + v133 * 0.439215686
                + v136 * -0.100643639
                + v137 * -0.338572047
                + v139 * 0.439215686
                + v142 * -0.100643639
                + v143 * -0.338572047
                + v144 * 0.439215686)
               * 1023.0
               * 0.25;
          unsigned int v147 = llroundf(v146);
          *double v122 = ((v138 << 10) + 0x80000) | (v135 + 512) | ((v140 << 20) + 0x20000000);
          float v148 = (v129 * -0.398942243
                + v128 * 0.439215686
                + v130 * -0.0402734431
                + v131 * 0.439215686
                + v132 * -0.398942243
                + v133 * -0.0402734431
                + v136 * 0.439215686
                + v137 * -0.398942243
                + v139 * -0.0402734431
                + v142 * 0.439215686
                + v143 * -0.398942243
                + v144 * -0.0402734431)
               * 1023.0
               * 0.25;
          v125[1] = v134;
          v120[1] = v118 | ((int)((v137 * 0.614230588 + v136 * 0.182585882 + v139 * 0.0620070588) * 1023.0 + 64.0) << 10) | ((int)((v143 * 0.614230588 + v142 * 0.182585882 + v144 * 0.0620070588) * 1023.0 + 64.0) << 20);
          v122[1] = ((llroundf(v148) << 20) + 0x20000000) | v145 | ((v147 << 10) + 0x80000);
          v80 += 6;
          v75 += 8;
          v79 += 96;
        }
        while (v80 < v18);
        unint64_t v14 = v186;
        uint64_t v43 = (int *)((char *)v44 + (v187 & 0x3C) + v75);
        uint64_t v35 = (__int32 *)((char *)v35 + v75);
        unsigned int v40 = (int *)((char *)v45 + (v187 & 0x3C) + v75);
        unint64_t v149 = (float *)(v34 + v79);
        int v150 = (float *)(v37 + v79);
        uint64_t v26 = v188;
        uint64_t v19 = v189;
        unsigned int v21 = v185;
        unint64_t v23 = v184;
      }
      if (v80 < v14)
      {
        uint64_t v151 = 0;
        int v152 = v150;
        int v153 = v149;
        unsigned int v154 = v18 % 3;
        do
        {
          int v155 = &v150[v151];
          if (v80)
          {
            unsigned int v159 = v155 - 4;
            int v156 = v152 - 3;
            unsigned int v157 = v152 - 2;
            float v158 = *v155;
            float v160 = v155[1];
            float v161 = v155[2];
          }
          else
          {
            int v156 = v155 + 1;
            unsigned int v157 = v155 + 2;
            float v158 = 0.0;
            unsigned int v159 = v152;
            float v160 = 0.0;
            float v161 = 0.0;
          }
          double v162 = *v159;
          double v163 = *v156;
          double v164 = *v157;
          unint64_t v165 = *((unsigned __int8 *)&v200 + v154);
          *unsigned int v40 = ((int)((v163 * 0.614230588 + v162 * 0.182585882 + v164 * 0.0620070588) * 1023.0 + 64.0) << v165) | *v40 & ~(1023 << v165);
          int v166 = &v149[v151];
          if (v80)
          {
            unsigned int v170 = v166 - 4;
            unsigned int v167 = v153 - 3;
            int v168 = v153 - 2;
            float v169 = *v166;
            float v171 = v166[1];
            float v172 = v166[2];
          }
          else
          {
            unsigned int v167 = v166 + 1;
            int v168 = v166 + 2;
            float v169 = 0.0;
            unsigned int v170 = v153;
            float v171 = 0.0;
            float v172 = 0.0;
          }
          double v173 = *v170;
          double v174 = *v167;
          double v175 = *v168;
          if (v80)
          {
            float64x2_t v177 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D530, v163), (float64x2_t)xmmword_193E7D540, v162), (float64x2_t)xmmword_193E7D550, v164), (float64x2_t)xmmword_193E7D540, v158), (float64x2_t)xmmword_193E7D530,
                                     v160),
                                   (float64x2_t)xmmword_193E7D550,
                                   v161),
                                 (float64x2_t)xmmword_193E7D540,
                                 v173),
                               (float64x2_t)xmmword_193E7D530,
                               v174),
                             (float64x2_t)xmmword_193E7D550,
                             v175),
                           (float64x2_t)xmmword_193E7D540,
                           v169),
                         (float64x2_t)xmmword_193E7D530,
                         v171),
                       (float64x2_t)xmmword_193E7D550,
                       v172),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V20.2D, #0.25 }
            int32x2_t v176 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v177, _Q20)))), (int32x2_t)0x20000000200);
          }
          else
          {
            int32x2_t v176 = 0;
          }
          int *v43 = *v43 & ~(1023 << v165) | ((int)((v174 * 0.614230588 + v173 * 0.182585882 + v175 * 0.0620070588)
                                               * 1023.0
                                               + 64.0) << v165);
          if (v154 == 2) {
            unsigned int v154 = 0;
          }
          else {
            ++v154;
          }
          if (v80)
          {
            unint64_t v179 = *((unsigned __int8 *)&v200 + v41);
            *uint64_t v35 = *v35 & ~(1023 << v179) | (v176.i32[0] << v179);
            float v180 = (__int32 *)((char *)v35 + ((v179 >> 2) & 0x3C));
            if (v41 == 2) {
              unsigned int v181 = 0;
            }
            else {
              unsigned int v181 = v41 + 1;
            }
            unint64_t v182 = *((unsigned __int8 *)&v200 + v181);
            *float v180 = *v180 & ~(1023 << v182) | (v176.i32[1] << v182);
            uint64_t v35 = (__int32 *)((char *)v180 + ((v182 >> 2) & 0x3C));
            if (v181 == 2) {
              unsigned int v41 = 0;
            }
            else {
              unsigned int v41 = v181 + 1;
            }
          }
          v152 += 4;
          v40 += v165 >> 4;
          v153 += 4;
          ++v80;
          v151 += 4;
          v43 += v165 >> 4;
        }
        while (v14 != v80);
      }
      unsigned int v32 = &v197[v193];
      uint64_t v33 = &v196[v193];
      v26 += 4 * v192;
      ++v19;
      malloc_type_id_t v27 = &v199[v192];
      uint64_t v30 = v198 + v190;
      uint64_t v34 = v195 + v190;
      uint64_t v35 = &v194[v191];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGfA_p420ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v200 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 >= v13 - v12) {
    unint64_t v14 = v13 - v12;
  }
  else {
    unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(void *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    unint64_t v15 = ((*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v16 = v13 % 6;
  _CF = v14 >= v16;
  unint64_t v18 = v14 - v16;
  if (!_CF) {
    unint64_t v18 = 0;
  }
  if (v15 >= 2)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 / 3;
    unsigned int v21 = v12 % 3;
    unint64_t v22 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v23 = v15 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = a7[1] + v24 * (v11 >> 1);
    uint64_t v26 = *a7 + *a8 * v11 + 4 * v20;
    malloc_type_id_t v27 = (int *)(v26 + *a8);
    uint64_t v28 = *a3;
    unint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v9;
    uint64_t v31 = 16 * v10;
    unsigned int v32 = (float *)(v30 + 16 * v10);
    uint64_t v33 = (float *)((char *)v32 + v29);
    uint64_t v193 = (v29 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v191 = v24 >> 2;
    uint64_t v192 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v190 = 4 * (v29 >> 1);
    uint64_t v34 = v28 + v29 + v29 * (*(void *)(a2 + 40) + (*(void *)(a2 + 40) & 1));
    uint64_t v35 = (__int32 *)(v25 + 4 * v20);
    unint64_t v186 = v14;
    unsigned int v185 = v21;
    unint64_t v184 = v23;
    do
    {
      uint64_t v36 = 0;
      uint64_t v195 = v34;
      v196 = v33;
      v197 = v32;
      uint64_t v198 = v30;
      uint64_t v37 = v30;
      uint64_t v38 = v32;
      unsigned int v39 = v33;
      unsigned int v40 = (int *)v26;
      unsigned int v41 = v21;
      unsigned int v42 = v21;
      v194 = v35;
      v199 = v27;
      uint64_t v43 = v27;
      do
      {
        uint64_t v44 = v43;
        uint64_t v45 = v40;
        if (v36)
        {
          long long v49 = (float *)(v37 + v31 - 16);
          uint64_t v46 = v38 - 3;
          uint64_t v47 = v38 - 2;
          float v48 = *(float *)(v37 + v31);
          float v50 = *(float *)(v37 + v31 + 4);
          float v51 = *(float *)(v37 + v31 + 8);
        }
        else
        {
          uint64_t v46 = (float *)(v37 + v31 + 4);
          uint64_t v47 = (float *)(v37 + v31 + 8);
          float v48 = 0.0;
          long long v49 = v38;
          float v50 = 0.0;
          float v51 = 0.0;
        }
        double v52 = *v49;
        double v53 = *v46;
        double v54 = *v47;
        unint64_t v55 = *((unsigned __int8 *)&v200 + v42);
        *uint64_t v45 = ((int)((v53 * 0.504129412 + v52 * 0.256788235 + v54 * 0.0979058824) * 1023.0 + 64.0) << v55) | *v45 & ~(1023 << v55);
        if (v36)
        {
          long long v59 = (float *)(v34 + v31 - 16);
          long long v56 = v39 - 3;
          long long v57 = v39 - 2;
          float v58 = *(float *)(v34 + v31);
          float v60 = *(float *)(v34 + v31 + 4);
          float v61 = *(float *)(v34 + v31 + 8);
        }
        else
        {
          long long v56 = (float *)(v34 + v31 + 4);
          long long v57 = (float *)(v34 + v31 + 8);
          float v58 = 0.0;
          long long v59 = v39;
          float v60 = 0.0;
          float v61 = 0.0;
        }
        double v62 = *v59;
        double v63 = *v56;
        double v64 = *v57;
        if (v36)
        {
          float64x2_t v66 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D560, v53), (float64x2_t)xmmword_193E7D570, v52), (float64x2_t)xmmword_193E7D580, v54), (float64x2_t)xmmword_193E7D570, v48), (float64x2_t)xmmword_193E7D560,
                                  v50),
                                (float64x2_t)xmmword_193E7D580,
                                v51),
                              (float64x2_t)xmmword_193E7D570,
                              v62),
                            (float64x2_t)xmmword_193E7D560,
                            v63),
                          (float64x2_t)xmmword_193E7D580,
                          v64),
                        (float64x2_t)xmmword_193E7D570,
                        v58),
                      (float64x2_t)xmmword_193E7D560,
                      v60),
                    (float64x2_t)xmmword_193E7D580,
                    v61),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V20.2D, #0.25 }
          int32x2_t v65 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v66, _Q20)))), (int32x2_t)0x20000000200);
        }
        else
        {
          int32x2_t v65 = 0;
        }
        int *v43 = *v43 & ~(1023 << v55) | ((int)((v63 * 0.504129412 + v62 * 0.256788235 + v64 * 0.0979058824) * 1023.0
                                            + 64.0) << v55);
        if (v42 == 2) {
          unsigned int v42 = 0;
        }
        else {
          ++v42;
        }
        if (v36)
        {
          unint64_t v71 = *((unsigned __int8 *)&v200 + v41);
          *uint64_t v35 = *v35 & ~(1023 << v71) | (v65.i32[0] << v71);
          uint64_t v72 = (__int32 *)((char *)v35 + ((v71 >> 2) & 0x3C));
          if (v41 == 2) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = v41 + 1;
          }
          unint64_t v74 = *((unsigned __int8 *)&v200 + v73);
          *uint64_t v72 = *v72 & ~(1023 << v74) | (v65.i32[1] << v74);
          uint64_t v35 = (__int32 *)((char *)v72 + ((v74 >> 2) & 0x3C));
          if (v73 == 2) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = v73 + 1;
          }
        }
        v38 += 4;
        unsigned int v40 = &v45[v55 >> 4];
        v39 += 4;
        ++v36;
        v37 += 16;
        v43 += v55 >> 4;
        v34 += 16;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        int v150 = (float *)(v37 + v31);
        unint64_t v149 = (float *)(v34 + v31);
        unint64_t v80 = v22;
      }
      else
      {
        uint64_t v188 = v26;
        uint64_t v189 = v19;
        unint64_t v75 = 0;
        unint64_t v187 = v55 >> 2;
        uint64_t v76 = (v55 >> 2) & 0x3C;
        int v77 = (char *)v44 + v76;
        int32x2_t v78 = (char *)v45 + v76;
        uint64_t v79 = v31;
        unint64_t v80 = v22;
        do
        {
          double v81 = *(float *)(v37 + v79);
          double v82 = *(float *)(v37 + v79 + 4);
          double v83 = *(float *)(v37 + v79 + 8);
          double v84 = *(float *)(v37 + v79 + 16);
          double v85 = *(float *)(v37 + v79 + 20);
          double v86 = *(float *)(v37 + v79 + 24);
          double v87 = *(float *)(v34 + v79);
          double v88 = *(float *)(v34 + v79 + 4);
          double v89 = *(float *)(v34 + v79 + 8);
          int v90 = (int)((v82 * 0.504129412 + v81 * 0.256788235 + v83 * 0.0979058824) * 1023.0 + 64.0);
          double v91 = *(float *)(v34 + v79 + 16);
          double v92 = *(float *)(v34 + v79 + 20);
          int v93 = (int)((v85 * 0.504129412 + v84 * 0.256788235 + v86 * 0.0979058824) * 1023.0 + 64.0);
          double v94 = *(float *)(v34 + v79 + 24);
          int v95 = (int)((v88 * 0.504129412 + v87 * 0.256788235 + v89 * 0.0979058824) * 1023.0 + 64.0);
          int v96 = (int)((v92 * 0.504129412 + v91 * 0.256788235 + v94 * 0.0979058824) * 1023.0 + 64.0);
          double v97 = v82 * -0.29099269 + v81 * -0.148222996 + v83 * 0.439215686 + v84 * -0.148222996;
          double v98 = v82 * -0.367788675 + v81 * 0.439215686 + v83 * -0.0714270118 + v84 * 0.439215686 + v85 * -0.367788675;
          double v99 = *(float *)(v37 + v79 + 32);
          double v100 = v97 + v85 * -0.29099269 + v86 * 0.439215686;
          double v101 = *(float *)(v37 + v79 + 36);
          double v102 = *(float *)(v37 + v79 + 40);
          double v103 = v98 + v86 * -0.0714270118;
          double v104 = v100 + v87 * -0.148222996;
          double v105 = *(float *)(v37 + v79 + 48);
          double v106 = *(float *)(v37 + v79 + 52);
          double v107 = v103 + v87 * 0.439215686;
          double v108 = *(float *)(v37 + v79 + 56);
          int v109 = (int)((v106 * 0.504129412 + v105 * 0.256788235 + v108 * 0.0979058824) * 1023.0 + 64.0);
          double v110 = *(float *)(v34 + v79 + 32);
          double v111 = *(float *)(v34 + v79 + 36);
          double v112 = *(float *)(v34 + v79 + 40);
          double v113 = v104 + v88 * -0.29099269 + v89 * 0.439215686;
          double v114 = v107 + v88 * -0.367788675 + v89 * -0.0714270118;
          double v115 = *(float *)(v34 + v79 + 48);
          double v116 = *(float *)(v34 + v79 + 52);
          double v117 = *(float *)(v34 + v79 + 56);
          int v118 = (int)((v116 * 0.504129412 + v115 * 0.256788235 + v117 * 0.0979058824) * 1023.0 + 64.0);
          double v119 = v113 + v91 * -0.148222996 + v92 * -0.29099269;
          double v120 = (int *)&v77[v75];
          int v121 = v90 | (v93 << 10);
          double v122 = (unsigned int *)&v35[v75 / 4];
          double v123 = v114 + v91 * 0.439215686 + v92 * -0.367788675 + v94 * -0.0714270118;
          int v124 = v95 | (v96 << 10);
          uint64_t v125 = (int *)&v78[v75];
          *uint64_t v125 = v121 | ((int)((v101 * 0.504129412 + v99 * 0.256788235 + v102 * 0.0979058824) * 1023.0 + 64.0) << 20);
          *double v120 = v124 | ((int)((v111 * 0.504129412 + v110 * 0.256788235 + v112 * 0.0979058824) * 1023.0 + 64.0) << 20);
          double v126 = (v101 * -0.29099269
                + v99 * -0.148222996
                + v102 * 0.439215686
                + v105 * -0.148222996
                + v106 * -0.29099269
                + v108 * 0.439215686
                + v110 * -0.148222996
                + v111 * -0.29099269
                + v112 * 0.439215686
                + v115 * -0.148222996
                + v116 * -0.29099269
                + v117 * 0.439215686)
               * 1023.0
               * 0.25;
          double v127 = (v101 * -0.367788675
                + v99 * 0.439215686
                + v102 * -0.0714270118
                + v105 * 0.439215686
                + v106 * -0.367788675
                + v108 * -0.0714270118
                + v110 * 0.439215686
                + v111 * -0.367788675
                + v112 * -0.0714270118
                + v115 * 0.439215686
                + v116 * -0.367788675
                + v117 * -0.0714270118)
               * 1023.0;
          double v128 = *(float *)(v37 + v79 + 64);
          double v129 = *(float *)(v37 + v79 + 68);
          double v130 = *(float *)(v37 + v79 + 72);
          *(float *)&double v94 = (v119 + v94 * 0.439215686) * 1023.0 * 0.25;
          *(float *)&double v123 = v123 * 1023.0 * 0.25;
          double v131 = *(float *)(v37 + v79 + 80);
          double v132 = *(float *)(v37 + v79 + 84);
          *(float *)&double v126 = v126;
          double v133 = *(float *)(v37 + v79 + 88);
          *(float *)&double v127 = v127 * 0.25;
          int v134 = v109 | ((int)((v129 * 0.504129412 + v128 * 0.256788235 + v130 * 0.0979058824) * 1023.0 + 64.0) << 10) | ((int)((v132 * 0.504129412 + v131 * 0.256788235 + v133 * 0.0979058824) * 1023.0 + 64.0) << 20);
          unsigned int v135 = llroundf(*(float *)&v94);
          double v136 = *(float *)(v34 + v79 + 64);
          double v137 = *(float *)(v34 + v79 + 68);
          unsigned int v138 = llroundf(*(float *)&v123);
          double v139 = *(float *)(v34 + v79 + 72);
          unsigned int v140 = llroundf(*(float *)&v126);
          unsigned int v141 = llroundf(*(float *)&v127);
          double v142 = *(float *)(v34 + v79 + 80);
          double v143 = *(float *)(v34 + v79 + 84);
          double v144 = *(float *)(v34 + v79 + 88);
          unsigned int v145 = v141 + 512;
          float v146 = (v129 * -0.29099269
                + v128 * -0.148222996
                + v130 * 0.439215686
                + v131 * -0.148222996
                + v132 * -0.29099269
                + v133 * 0.439215686
                + v136 * -0.148222996
                + v137 * -0.29099269
                + v139 * 0.439215686
                + v142 * -0.148222996
                + v143 * -0.29099269
                + v144 * 0.439215686)
               * 1023.0
               * 0.25;
          unsigned int v147 = llroundf(v146);
          *double v122 = ((v138 << 10) + 0x80000) | (v135 + 512) | ((v140 << 20) + 0x20000000);
          float v148 = (v129 * -0.367788675
                + v128 * 0.439215686
                + v130 * -0.0714270118
                + v131 * 0.439215686
                + v132 * -0.367788675
                + v133 * -0.0714270118
                + v136 * 0.439215686
                + v137 * -0.367788675
                + v139 * -0.0714270118
                + v142 * 0.439215686
                + v143 * -0.367788675
                + v144 * -0.0714270118)
               * 1023.0
               * 0.25;
          v125[1] = v134;
          v120[1] = v118 | ((int)((v137 * 0.504129412 + v136 * 0.256788235 + v139 * 0.0979058824) * 1023.0 + 64.0) << 10) | ((int)((v143 * 0.504129412 + v142 * 0.256788235 + v144 * 0.0979058824) * 1023.0 + 64.0) << 20);
          v122[1] = ((llroundf(v148) << 20) + 0x20000000) | v145 | ((v147 << 10) + 0x80000);
          v80 += 6;
          v75 += 8;
          v79 += 96;
        }
        while (v80 < v18);
        unint64_t v14 = v186;
        uint64_t v43 = (int *)((char *)v44 + (v187 & 0x3C) + v75);
        uint64_t v35 = (__int32 *)((char *)v35 + v75);
        unsigned int v40 = (int *)((char *)v45 + (v187 & 0x3C) + v75);
        unint64_t v149 = (float *)(v34 + v79);
        int v150 = (float *)(v37 + v79);
        uint64_t v26 = v188;
        uint64_t v19 = v189;
        unsigned int v21 = v185;
        unint64_t v23 = v184;
      }
      if (v80 < v14)
      {
        uint64_t v151 = 0;
        int v152 = v150;
        int v153 = v149;
        unsigned int v154 = v18 % 3;
        do
        {
          int v155 = &v150[v151];
          if (v80)
          {
            unsigned int v159 = v155 - 4;
            int v156 = v152 - 3;
            unsigned int v157 = v152 - 2;
            float v158 = *v155;
            float v160 = v155[1];
            float v161 = v155[2];
          }
          else
          {
            int v156 = v155 + 1;
            unsigned int v157 = v155 + 2;
            float v158 = 0.0;
            unsigned int v159 = v152;
            float v160 = 0.0;
            float v161 = 0.0;
          }
          double v162 = *v159;
          double v163 = *v156;
          double v164 = *v157;
          unint64_t v165 = *((unsigned __int8 *)&v200 + v154);
          *unsigned int v40 = ((int)((v163 * 0.504129412 + v162 * 0.256788235 + v164 * 0.0979058824) * 1023.0 + 64.0) << v165) | *v40 & ~(1023 << v165);
          int v166 = &v149[v151];
          if (v80)
          {
            unsigned int v170 = v166 - 4;
            unsigned int v167 = v153 - 3;
            int v168 = v153 - 2;
            float v169 = *v166;
            float v171 = v166[1];
            float v172 = v166[2];
          }
          else
          {
            unsigned int v167 = v166 + 1;
            int v168 = v166 + 2;
            float v169 = 0.0;
            unsigned int v170 = v153;
            float v171 = 0.0;
            float v172 = 0.0;
          }
          double v173 = *v170;
          double v174 = *v167;
          double v175 = *v168;
          if (v80)
          {
            float64x2_t v177 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D560, v163), (float64x2_t)xmmword_193E7D570, v162), (float64x2_t)xmmword_193E7D580, v164), (float64x2_t)xmmword_193E7D570, v158), (float64x2_t)xmmword_193E7D560,
                                     v160),
                                   (float64x2_t)xmmword_193E7D580,
                                   v161),
                                 (float64x2_t)xmmword_193E7D570,
                                 v173),
                               (float64x2_t)xmmword_193E7D560,
                               v174),
                             (float64x2_t)xmmword_193E7D580,
                             v175),
                           (float64x2_t)xmmword_193E7D570,
                           v169),
                         (float64x2_t)xmmword_193E7D560,
                         v171),
                       (float64x2_t)xmmword_193E7D580,
                       v172),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V20.2D, #0.25 }
            int32x2_t v176 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v177, _Q20)))), (int32x2_t)0x20000000200);
          }
          else
          {
            int32x2_t v176 = 0;
          }
          int *v43 = *v43 & ~(1023 << v165) | ((int)((v174 * 0.504129412 + v173 * 0.256788235 + v175 * 0.0979058824)
                                               * 1023.0
                                               + 64.0) << v165);
          if (v154 == 2) {
            unsigned int v154 = 0;
          }
          else {
            ++v154;
          }
          if (v80)
          {
            unint64_t v179 = *((unsigned __int8 *)&v200 + v41);
            *uint64_t v35 = *v35 & ~(1023 << v179) | (v176.i32[0] << v179);
            float v180 = (__int32 *)((char *)v35 + ((v179 >> 2) & 0x3C));
            if (v41 == 2) {
              unsigned int v181 = 0;
            }
            else {
              unsigned int v181 = v41 + 1;
            }
            unint64_t v182 = *((unsigned __int8 *)&v200 + v181);
            *float v180 = *v180 & ~(1023 << v182) | (v176.i32[1] << v182);
            uint64_t v35 = (__int32 *)((char *)v180 + ((v182 >> 2) & 0x3C));
            if (v181 == 2) {
              unsigned int v41 = 0;
            }
            else {
              unsigned int v41 = v181 + 1;
            }
          }
          v152 += 4;
          v40 += v165 >> 4;
          v153 += 4;
          ++v80;
          v151 += 4;
          v43 += v165 >> 4;
        }
        while (v14 != v80);
      }
      unsigned int v32 = &v197[v193];
      uint64_t v33 = &v196[v193];
      v26 += 4 * v192;
      ++v19;
      malloc_type_id_t v27 = &v199[v192];
      uint64_t v30 = v198 + v190;
      uint64_t v34 = v195 + v190;
      uint64_t v35 = &v194[v191];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGfA_pf20ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v196 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if (v14 >= v13 - v12) {
    unint64_t v14 = v13 - v12;
  }
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(void *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    unint64_t v15 = ((*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v16 = v13 % 6;
  _CF = v14 >= v16;
  unint64_t v18 = v14 - v16;
  if (!_CF) {
    unint64_t v18 = 0;
  }
  if (v15 >= 2)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 / 3;
    unsigned int v21 = v12 % 3;
    unint64_t v22 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v23 = v15 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = a7[1] + v24 * (v11 >> 1);
    uint64_t v26 = *a7 + *a8 * v11 + 4 * v20;
    malloc_type_id_t v27 = (int *)(v26 + *a8);
    uint64_t v28 = *a3;
    unint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v9;
    uint64_t v31 = 16 * v10;
    unsigned int v32 = (float *)(v30 + 16 * v10);
    uint64_t v33 = (float *)((char *)v32 + *a4);
    uint64_t v190 = (v29 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v189 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v187 = 4 * (v29 >> 1);
    unint64_t v188 = v24 >> 2;
    uint64_t v34 = v28 + v29 + v29 * (v8 + (v8 & 1));
    uint64_t v35 = (__int32 *)(v25 + 4 * v20);
    unsigned int v182 = v21;
    unint64_t v181 = v23;
    do
    {
      uint64_t v36 = 0;
      uint64_t v192 = v34;
      uint64_t v193 = v33;
      v194 = v32;
      uint64_t v195 = v30;
      uint64_t v37 = v30;
      uint64_t v38 = v32;
      unsigned int v39 = v33;
      unsigned int v40 = (_DWORD *)v26;
      unsigned int v41 = v21;
      unsigned int v42 = v21;
      unint64_t v191 = v35;
      uint64_t v43 = v27;
      do
      {
        uint64_t v44 = v43;
        uint64_t v45 = v40;
        if (v36)
        {
          long long v49 = (float *)(v37 + v31 - 16);
          uint64_t v46 = v38 - 3;
          uint64_t v47 = v38 - 2;
          float v48 = *(float *)(v37 + v31);
          float v50 = *(float *)(v37 + v31 + 4);
          float v51 = *(float *)(v37 + v31 + 8);
        }
        else
        {
          uint64_t v46 = (float *)(v37 + v31 + 4);
          uint64_t v47 = (float *)(v37 + v31 + 8);
          float v48 = 0.0;
          long long v49 = v38;
          float v50 = 0.0;
          float v51 = 0.0;
        }
        double v52 = *v49;
        double v53 = *v46;
        double v54 = *v47;
        unint64_t v55 = *((unsigned __int8 *)&v196 + v42);
        *unsigned int v40 = ((int)((v53 * 0.677998 + v52 * 0.2627 + v54 * 0.059302) * 1023.0 + 0.0) << v55) | *v40 & ~(1023 << v55);
        if (v36)
        {
          long long v59 = (float *)(v34 + v31 - 16);
          long long v56 = v39 - 3;
          long long v57 = v39 - 2;
          float v58 = *(float *)(v34 + v31);
          float v60 = *(float *)(v34 + v31 + 4);
          float v61 = *(float *)(v34 + v31 + 8);
        }
        else
        {
          long long v56 = (float *)(v34 + v31 + 4);
          long long v57 = (float *)(v34 + v31 + 8);
          float v58 = 0.0;
          long long v59 = v39;
          float v60 = 0.0;
          float v61 = 0.0;
        }
        double v62 = *v59;
        double v63 = *v56;
        double v64 = *v57;
        if (v36)
        {
          float64x2_t v66 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D590, v53), (float64x2_t)xmmword_193E7D5A0, v52), (float64x2_t)xmmword_193E7D5B0, v54), (float64x2_t)xmmword_193E7D5A0, v48), (float64x2_t)xmmword_193E7D590,
                                  v50),
                                (float64x2_t)xmmword_193E7D5B0,
                                v51),
                              (float64x2_t)xmmword_193E7D5A0,
                              v62),
                            (float64x2_t)xmmword_193E7D590,
                            v63),
                          (float64x2_t)xmmword_193E7D5B0,
                          v64),
                        (float64x2_t)xmmword_193E7D5A0,
                        v58),
                      (float64x2_t)xmmword_193E7D590,
                      v60),
                    (float64x2_t)xmmword_193E7D5B0,
                    v61),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V21.2D, #0.25 }
          int32x2_t v65 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v66, _Q21)))), (int32x2_t)0x20000000200);
        }
        else
        {
          int32x2_t v65 = 0;
        }
        int *v44 = *v44 & ~(1023 << v55) | ((int)((v63 * 0.677998 + v62 * 0.2627 + v64 * 0.059302) * 1023.0 + 0.0) << v55);
        if (v42 == 2) {
          unsigned int v42 = 0;
        }
        else {
          ++v42;
        }
        if (v36)
        {
          unint64_t v71 = *((unsigned __int8 *)&v196 + v41);
          *uint64_t v35 = *v35 & ~(1023 << v71) | (v65.i32[0] << v71);
          uint64_t v72 = (__int32 *)((char *)v35 + ((v71 >> 2) & 0x3C));
          if (v41 == 2) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = v41 + 1;
          }
          unint64_t v74 = *((unsigned __int8 *)&v196 + v73);
          *uint64_t v72 = *v72 & ~(1023 << v74) | (v65.i32[1] << v74);
          uint64_t v35 = (__int32 *)((char *)v72 + ((v74 >> 2) & 0x3C));
          if (v73 == 2) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = v73 + 1;
          }
        }
        v38 += 4;
        v40 += v55 >> 4;
        v39 += 4;
        ++v36;
        v37 += 16;
        uint64_t v43 = &v44[v55 >> 4];
        v34 += 16;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        unint64_t v149 = (float *)(v37 + v31);
        float v148 = (float *)(v34 + v31);
        unint64_t v80 = v22;
      }
      else
      {
        unint64_t v184 = v27;
        uint64_t v185 = v26;
        uint64_t v186 = v19;
        unint64_t v75 = 0;
        unint64_t v183 = v55 >> 2;
        uint64_t v76 = (v55 >> 2) & 0x3C;
        int v77 = (char *)v44 + v76;
        int32x2_t v78 = (char *)v45 + v76;
        uint64_t v79 = v31;
        unint64_t v80 = v22;
        do
        {
          double v81 = *(float *)(v37 + v79);
          double v82 = *(float *)(v37 + v79 + 4);
          double v83 = *(float *)(v37 + v79 + 8);
          double v84 = *(float *)(v37 + v79 + 16);
          double v85 = *(float *)(v37 + v79 + 20);
          double v86 = *(float *)(v37 + v79 + 24);
          double v87 = *(float *)(v34 + v79);
          double v88 = *(float *)(v34 + v79 + 4);
          double v89 = *(float *)(v34 + v79 + 8);
          int v90 = (int)((v82 * 0.677998 + v81 * 0.2627 + v83 * 0.059302) * 1023.0 + 0.0);
          double v91 = *(float *)(v34 + v79 + 16);
          double v92 = *(float *)(v34 + v79 + 20);
          int v93 = (int)((v85 * 0.677998 + v84 * 0.2627 + v86 * 0.059302) * 1023.0 + 0.0);
          double v94 = *(float *)(v34 + v79 + 24);
          int v95 = (int)((v88 * 0.677998 + v87 * 0.2627 + v89 * 0.059302) * 1023.0 + 0.0);
          int v96 = (int)((v92 * 0.677998 + v91 * 0.2627 + v94 * 0.059302) * 1023.0 + 0.0);
          double v97 = v82 * -0.36037 + v81 * -0.13963 + v83 * 0.5 + v84 * -0.13963;
          double v98 = v82 * -0.459785 + v81 * 0.5 + v83 * -0.040215 + v84 * 0.5 + v85 * -0.459785;
          double v99 = *(float *)(v37 + v79 + 32);
          double v100 = v97 + v85 * -0.36037 + v86 * 0.5;
          double v101 = *(float *)(v37 + v79 + 36);
          double v102 = *(float *)(v37 + v79 + 40);
          double v103 = v98 + v86 * -0.040215;
          double v104 = v100 + v87 * -0.13963;
          double v105 = *(float *)(v37 + v79 + 48);
          double v106 = *(float *)(v37 + v79 + 52);
          double v107 = v103 + v87 * 0.5;
          double v108 = *(float *)(v37 + v79 + 56);
          int v109 = (int)((v106 * 0.677998 + v105 * 0.2627 + v108 * 0.059302) * 1023.0 + 0.0);
          double v110 = *(float *)(v34 + v79 + 32);
          double v111 = *(float *)(v34 + v79 + 36);
          double v112 = *(float *)(v34 + v79 + 40);
          double v113 = v104 + v88 * -0.36037 + v89 * 0.5;
          double v114 = v107 + v88 * -0.459785 + v89 * -0.040215;
          double v115 = *(float *)(v34 + v79 + 48);
          double v116 = *(float *)(v34 + v79 + 52);
          double v117 = *(float *)(v34 + v79 + 56);
          int v118 = (int)((v116 * 0.677998 + v115 * 0.2627 + v117 * 0.059302) * 1023.0 + 0.0);
          double v119 = v113 + v91 * -0.13963 + v92 * -0.36037;
          double v120 = (int *)&v77[v75];
          int v121 = v90 | (v93 << 10);
          double v122 = (unsigned int *)&v35[v75 / 4];
          double v123 = v114 + v91 * 0.5 + v92 * -0.459785 + v94 * -0.040215;
          int v124 = v95 | (v96 << 10);
          uint64_t v125 = (int *)&v78[v75];
          *uint64_t v125 = v121 | ((int)((v101 * 0.677998 + v99 * 0.2627 + v102 * 0.059302) * 1023.0 + 0.0) << 20);
          *double v120 = v124 | ((int)((v111 * 0.677998 + v110 * 0.2627 + v112 * 0.059302) * 1023.0 + 0.0) << 20);
          double v126 = (v101 * -0.36037
                + v99 * -0.13963
                + v102 * 0.5
                + v105 * -0.13963
                + v106 * -0.36037
                + v108 * 0.5
                + v110 * -0.13963
                + v111 * -0.36037
                + v112 * 0.5
                + v115 * -0.13963
                + v116 * -0.36037
                + v117 * 0.5)
               * 1023.0
               * 0.25;
          double v127 = (v101 * -0.459785
                + v99 * 0.5
                + v102 * -0.040215
                + v105 * 0.5
                + v106 * -0.459785
                + v108 * -0.040215
                + v110 * 0.5
                + v111 * -0.459785
                + v112 * -0.040215
                + v115 * 0.5
                + v116 * -0.459785
                + v117 * -0.040215)
               * 1023.0;
          double v128 = *(float *)(v37 + v79 + 64);
          double v129 = *(float *)(v37 + v79 + 68);
          double v130 = *(float *)(v37 + v79 + 72);
          *(float *)&double v94 = (v119 + v94 * 0.5) * 1023.0 * 0.25;
          *(float *)&double v123 = v123 * 1023.0 * 0.25;
          double v131 = *(float *)(v37 + v79 + 80);
          double v132 = *(float *)(v37 + v79 + 84);
          *(float *)&double v126 = v126;
          double v133 = *(float *)(v37 + v79 + 88);
          *(float *)&double v127 = v127 * 0.25;
          int v134 = v109 | ((int)((v129 * 0.677998 + v128 * 0.2627 + v130 * 0.059302) * 1023.0 + 0.0) << 10) | ((int)((v132 * 0.677998 + v131 * 0.2627 + v133 * 0.059302) * 1023.0 + 0.0) << 20);
          unsigned int v135 = llroundf(*(float *)&v94);
          double v136 = *(float *)(v34 + v79 + 64);
          double v137 = *(float *)(v34 + v79 + 68);
          unsigned int v138 = llroundf(*(float *)&v123);
          double v139 = *(float *)(v34 + v79 + 72);
          unsigned int v140 = llroundf(*(float *)&v126);
          unsigned int v141 = llroundf(*(float *)&v127);
          double v142 = *(float *)(v34 + v79 + 80);
          double v143 = *(float *)(v34 + v79 + 84);
          unsigned int v144 = v135 + 512;
          double v145 = *(float *)(v34 + v79 + 88);
          int v146 = (int)((v143 * 0.677998 + v142 * 0.2627 + v145 * 0.059302) * 1023.0 + 0.0);
          *(float *)&double v106 = (v129 * -0.36037
                           + v128 * -0.13963
                           + v130 * 0.5
                           + v131 * -0.13963
                           + v132 * -0.36037
                           + v133 * 0.5
                           + v136 * -0.13963
                           + v137 * -0.36037
                           + v139 * 0.5
                           + v142 * -0.13963
                           + v143 * -0.36037
                           + v145 * 0.5)
                          * 1023.0
                          * 0.25;
          *double v122 = ((v138 << 10) + 0x80000) | v144 | ((v140 << 20) + 0x20000000);
          *(float *)&double v142 = (v129 * -0.459785
                           + v128 * 0.5
                           + v130 * -0.040215
                           + v131 * 0.5
                           + v132 * -0.459785
                           + v133 * -0.040215
                           + v136 * 0.5
                           + v137 * -0.459785
                           + v139 * -0.040215
                           + v142 * 0.5
                           + v143 * -0.459785
                           + v145 * -0.040215)
                          * 1023.0
                          * 0.25;
          v125[1] = v134;
          v120[1] = v118 | ((int)((v137 * 0.677998 + v136 * 0.2627 + v139 * 0.059302) * 1023.0 + 0.0) << 10) | (v146 << 20);
          v122[1] = ((llroundf(*(float *)&v142) << 20) + 0x20000000) | (v141 + 512) | ((llroundf(*(float *)&v106) << 10)
                                                                                     + 0x80000);
          v80 += 6;
          v75 += 8;
          v79 += 96;
        }
        while (v80 < v18);
        malloc_type_id_t v27 = v184;
        uint64_t v147 = v183 & 0x3C;
        uint64_t v43 = (int *)((char *)v44 + v147 + v75);
        uint64_t v35 = (__int32 *)((char *)v35 + v75);
        unsigned int v40 = (_DWORD *)((char *)v45 + v147 + v75);
        float v148 = (float *)(v34 + v79);
        unint64_t v149 = (float *)(v37 + v79);
        uint64_t v26 = v185;
        uint64_t v19 = v186;
        unsigned int v21 = v182;
        unint64_t v23 = v181;
      }
      if (v80 < v14)
      {
        uint64_t v150 = 0;
        uint64_t v151 = v149;
        int v152 = v148;
        unsigned int v153 = v18 % 3;
        do
        {
          if (v80)
          {
            unsigned int v157 = &v149[v150 - 4];
            unsigned int v154 = v151 - 3;
            int v155 = v151 - 2;
            float v156 = v149[v150];
            float v158 = v149[v150 + 1];
            float v159 = v149[v150 + 2];
          }
          else
          {
            unsigned int v154 = &v149[v150 + 1];
            int v155 = &v149[v150 + 2];
            float v156 = 0.0;
            unsigned int v157 = v151;
            float v158 = 0.0;
            float v159 = 0.0;
          }
          double v160 = *v157;
          double v161 = *v154;
          double v162 = *v155;
          unint64_t v163 = *((unsigned __int8 *)&v196 + v153);
          *unsigned int v40 = ((int)((v161 * 0.677998 + v160 * 0.2627 + v162 * 0.059302) * 1023.0 + 0.0) << v163) | *v40 & ~(1023 << v163);
          if (v80)
          {
            unsigned int v167 = &v148[v150 - 4];
            double v164 = v152 - 3;
            unint64_t v165 = v152 - 2;
            float v166 = v148[v150];
            float v168 = v148[v150 + 1];
            float v169 = v148[v150 + 2];
          }
          else
          {
            double v164 = &v148[v150 + 1];
            unint64_t v165 = &v148[v150 + 2];
            float v166 = 0.0;
            unsigned int v167 = v152;
            float v168 = 0.0;
            float v169 = 0.0;
          }
          double v170 = *v167;
          double v171 = *v164;
          double v172 = *v165;
          if (v80)
          {
            float64x2_t v174 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D590, v161), (float64x2_t)xmmword_193E7D5A0, v160), (float64x2_t)xmmword_193E7D5B0, v162), (float64x2_t)xmmword_193E7D5A0, v156), (float64x2_t)xmmword_193E7D590,
                                     v158),
                                   (float64x2_t)xmmword_193E7D5B0,
                                   v159),
                                 (float64x2_t)xmmword_193E7D5A0,
                                 v170),
                               (float64x2_t)xmmword_193E7D590,
                               v171),
                             (float64x2_t)xmmword_193E7D5B0,
                             v172),
                           (float64x2_t)xmmword_193E7D5A0,
                           v166),
                         (float64x2_t)xmmword_193E7D590,
                         v168),
                       (float64x2_t)xmmword_193E7D5B0,
                       v169),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V21.2D, #0.25 }
            int32x2_t v173 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v174, _Q21)))), (int32x2_t)0x20000000200);
          }
          else
          {
            int32x2_t v173 = 0;
          }
          int *v43 = *v43 & ~(1023 << v163) | ((int)((v171 * 0.677998 + v170 * 0.2627 + v172 * 0.059302) * 1023.0 + 0.0) << v163);
          if (v153 == 2) {
            unsigned int v153 = 0;
          }
          else {
            ++v153;
          }
          if (v80)
          {
            unint64_t v176 = *((unsigned __int8 *)&v196 + v41);
            *uint64_t v35 = *v35 & ~(1023 << v176) | (v173.i32[0] << v176);
            float64x2_t v177 = (__int32 *)((char *)v35 + ((v176 >> 2) & 0x3C));
            if (v41 == 2) {
              unsigned int v178 = 0;
            }
            else {
              unsigned int v178 = v41 + 1;
            }
            unint64_t v179 = *((unsigned __int8 *)&v196 + v178);
            *float64x2_t v177 = *v177 & ~(1023 << v179) | (v173.i32[1] << v179);
            uint64_t v35 = (__int32 *)((char *)v177 + ((v179 >> 2) & 0x3C));
            if (v178 == 2) {
              unsigned int v41 = 0;
            }
            else {
              unsigned int v41 = v178 + 1;
            }
          }
          v151 += 4;
          v40 += v163 >> 4;
          v152 += 4;
          ++v80;
          v150 += 4;
          v43 += v163 >> 4;
        }
        while (v14 != v80);
      }
      unsigned int v32 = &v194[v190];
      uint64_t v33 = &v193[v190];
      v26 += 4 * v189;
      ++v19;
      v27 += v189;
      uint64_t v30 = v195 + v187;
      uint64_t v34 = v192 + v187;
      uint64_t v35 = &v191[v188];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGfA_pf20ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v196 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if (v14 >= v13 - v12) {
    unint64_t v14 = v13 - v12;
  }
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(void *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    unint64_t v15 = ((*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v16 = v13 % 6;
  _CF = v14 >= v16;
  unint64_t v18 = v14 - v16;
  if (!_CF) {
    unint64_t v18 = 0;
  }
  if (v15 >= 2)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 / 3;
    unsigned int v21 = v12 % 3;
    unint64_t v22 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v23 = v15 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = a7[1] + v24 * (v11 >> 1);
    uint64_t v26 = *a7 + *a8 * v11 + 4 * v20;
    malloc_type_id_t v27 = (int *)(v26 + *a8);
    uint64_t v28 = *a3;
    unint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v9;
    uint64_t v31 = 16 * v10;
    unsigned int v32 = (float *)(v30 + 16 * v10);
    uint64_t v33 = (float *)((char *)v32 + *a4);
    uint64_t v190 = (v29 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v189 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v187 = 4 * (v29 >> 1);
    unint64_t v188 = v24 >> 2;
    uint64_t v34 = v28 + v29 + v29 * (v8 + (v8 & 1));
    uint64_t v35 = (__int32 *)(v25 + 4 * v20);
    unsigned int v182 = v21;
    unint64_t v181 = v23;
    do
    {
      uint64_t v36 = 0;
      uint64_t v192 = v34;
      uint64_t v193 = v33;
      v194 = v32;
      uint64_t v195 = v30;
      uint64_t v37 = v30;
      uint64_t v38 = v32;
      unsigned int v39 = v33;
      unsigned int v40 = (_DWORD *)v26;
      unsigned int v41 = v21;
      unsigned int v42 = v21;
      unint64_t v191 = v35;
      uint64_t v43 = v27;
      do
      {
        uint64_t v44 = v43;
        uint64_t v45 = v40;
        if (v36)
        {
          long long v49 = (float *)(v37 + v31 - 16);
          uint64_t v46 = v38 - 3;
          uint64_t v47 = v38 - 2;
          float v48 = *(float *)(v37 + v31);
          float v50 = *(float *)(v37 + v31 + 4);
          float v51 = *(float *)(v37 + v31 + 8);
        }
        else
        {
          uint64_t v46 = (float *)(v37 + v31 + 4);
          uint64_t v47 = (float *)(v37 + v31 + 8);
          float v48 = 0.0;
          long long v49 = v38;
          float v50 = 0.0;
          float v51 = 0.0;
        }
        double v52 = *v49;
        double v53 = *v46;
        double v54 = *v47;
        unint64_t v55 = *((unsigned __int8 *)&v196 + v42);
        *unsigned int v40 = ((int)((v53 * 0.7152 + v52 * 0.2126 + v54 * 0.0722) * 1023.0 + 0.0) << v55) | *v40 & ~(1023 << v55);
        if (v36)
        {
          long long v59 = (float *)(v34 + v31 - 16);
          long long v56 = v39 - 3;
          long long v57 = v39 - 2;
          float v58 = *(float *)(v34 + v31);
          float v60 = *(float *)(v34 + v31 + 4);
          float v61 = *(float *)(v34 + v31 + 8);
        }
        else
        {
          long long v56 = (float *)(v34 + v31 + 4);
          long long v57 = (float *)(v34 + v31 + 8);
          float v58 = 0.0;
          long long v59 = v39;
          float v60 = 0.0;
          float v61 = 0.0;
        }
        double v62 = *v59;
        double v63 = *v56;
        double v64 = *v57;
        if (v36)
        {
          float64x2_t v66 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D5C0, v53), (float64x2_t)xmmword_193E7D5D0, v52), (float64x2_t)xmmword_193E7D5E0, v54), (float64x2_t)xmmword_193E7D5D0, v48), (float64x2_t)xmmword_193E7D5C0,
                                  v50),
                                (float64x2_t)xmmword_193E7D5E0,
                                v51),
                              (float64x2_t)xmmword_193E7D5D0,
                              v62),
                            (float64x2_t)xmmword_193E7D5C0,
                            v63),
                          (float64x2_t)xmmword_193E7D5E0,
                          v64),
                        (float64x2_t)xmmword_193E7D5D0,
                        v58),
                      (float64x2_t)xmmword_193E7D5C0,
                      v60),
                    (float64x2_t)xmmword_193E7D5E0,
                    v61),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V21.2D, #0.25 }
          int32x2_t v65 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v66, _Q21)))), (int32x2_t)0x20000000200);
        }
        else
        {
          int32x2_t v65 = 0;
        }
        int *v44 = *v44 & ~(1023 << v55) | ((int)((v63 * 0.7152 + v62 * 0.2126 + v64 * 0.0722) * 1023.0 + 0.0) << v55);
        if (v42 == 2) {
          unsigned int v42 = 0;
        }
        else {
          ++v42;
        }
        if (v36)
        {
          unint64_t v71 = *((unsigned __int8 *)&v196 + v41);
          *uint64_t v35 = *v35 & ~(1023 << v71) | (v65.i32[0] << v71);
          uint64_t v72 = (__int32 *)((char *)v35 + ((v71 >> 2) & 0x3C));
          if (v41 == 2) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = v41 + 1;
          }
          unint64_t v74 = *((unsigned __int8 *)&v196 + v73);
          *uint64_t v72 = *v72 & ~(1023 << v74) | (v65.i32[1] << v74);
          uint64_t v35 = (__int32 *)((char *)v72 + ((v74 >> 2) & 0x3C));
          if (v73 == 2) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = v73 + 1;
          }
        }
        v38 += 4;
        v40 += v55 >> 4;
        v39 += 4;
        ++v36;
        v37 += 16;
        uint64_t v43 = &v44[v55 >> 4];
        v34 += 16;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        unint64_t v149 = (float *)(v37 + v31);
        float v148 = (float *)(v34 + v31);
        unint64_t v80 = v22;
      }
      else
      {
        unint64_t v184 = v27;
        uint64_t v185 = v26;
        uint64_t v186 = v19;
        unint64_t v75 = 0;
        unint64_t v183 = v55 >> 2;
        uint64_t v76 = (v55 >> 2) & 0x3C;
        int v77 = (char *)v44 + v76;
        int32x2_t v78 = (char *)v45 + v76;
        uint64_t v79 = v31;
        unint64_t v80 = v22;
        do
        {
          double v81 = *(float *)(v37 + v79);
          double v82 = *(float *)(v37 + v79 + 4);
          double v83 = *(float *)(v37 + v79 + 8);
          double v84 = *(float *)(v37 + v79 + 16);
          double v85 = *(float *)(v37 + v79 + 20);
          double v86 = *(float *)(v37 + v79 + 24);
          double v87 = *(float *)(v34 + v79);
          double v88 = *(float *)(v34 + v79 + 4);
          double v89 = *(float *)(v34 + v79 + 8);
          int v90 = (int)((v82 * 0.7152 + v81 * 0.2126 + v83 * 0.0722) * 1023.0 + 0.0);
          double v91 = *(float *)(v34 + v79 + 16);
          double v92 = *(float *)(v34 + v79 + 20);
          int v93 = (int)((v85 * 0.7152 + v84 * 0.2126 + v86 * 0.0722) * 1023.0 + 0.0);
          double v94 = *(float *)(v34 + v79 + 24);
          int v95 = (int)((v88 * 0.7152 + v87 * 0.2126 + v89 * 0.0722) * 1023.0 + 0.0);
          int v96 = (int)((v92 * 0.7152 + v91 * 0.2126 + v94 * 0.0722) * 1023.0 + 0.0);
          double v97 = v82 * -0.385428 + v81 * -0.114572 + v83 * 0.5 + v84 * -0.114572;
          double v98 = v82 * -0.454153 + v81 * 0.5 + v83 * -0.045847 + v84 * 0.5 + v85 * -0.454153;
          double v99 = *(float *)(v37 + v79 + 32);
          double v100 = v97 + v85 * -0.385428 + v86 * 0.5;
          double v101 = *(float *)(v37 + v79 + 36);
          double v102 = *(float *)(v37 + v79 + 40);
          double v103 = v98 + v86 * -0.045847;
          double v104 = v100 + v87 * -0.114572;
          double v105 = *(float *)(v37 + v79 + 48);
          double v106 = *(float *)(v37 + v79 + 52);
          double v107 = v103 + v87 * 0.5;
          double v108 = *(float *)(v37 + v79 + 56);
          int v109 = (int)((v106 * 0.7152 + v105 * 0.2126 + v108 * 0.0722) * 1023.0 + 0.0);
          double v110 = *(float *)(v34 + v79 + 32);
          double v111 = *(float *)(v34 + v79 + 36);
          double v112 = *(float *)(v34 + v79 + 40);
          double v113 = v104 + v88 * -0.385428 + v89 * 0.5;
          double v114 = v107 + v88 * -0.454153 + v89 * -0.045847;
          double v115 = *(float *)(v34 + v79 + 48);
          double v116 = *(float *)(v34 + v79 + 52);
          double v117 = *(float *)(v34 + v79 + 56);
          int v118 = (int)((v116 * 0.7152 + v115 * 0.2126 + v117 * 0.0722) * 1023.0 + 0.0);
          double v119 = v113 + v91 * -0.114572 + v92 * -0.385428;
          double v120 = (int *)&v77[v75];
          int v121 = v90 | (v93 << 10);
          double v122 = (unsigned int *)&v35[v75 / 4];
          double v123 = v114 + v91 * 0.5 + v92 * -0.454153 + v94 * -0.045847;
          int v124 = v95 | (v96 << 10);
          uint64_t v125 = (int *)&v78[v75];
          *uint64_t v125 = v121 | ((int)((v101 * 0.7152 + v99 * 0.2126 + v102 * 0.0722) * 1023.0 + 0.0) << 20);
          *double v120 = v124 | ((int)((v111 * 0.7152 + v110 * 0.2126 + v112 * 0.0722) * 1023.0 + 0.0) << 20);
          double v126 = (v101 * -0.385428
                + v99 * -0.114572
                + v102 * 0.5
                + v105 * -0.114572
                + v106 * -0.385428
                + v108 * 0.5
                + v110 * -0.114572
                + v111 * -0.385428
                + v112 * 0.5
                + v115 * -0.114572
                + v116 * -0.385428
                + v117 * 0.5)
               * 1023.0
               * 0.25;
          double v127 = (v101 * -0.454153
                + v99 * 0.5
                + v102 * -0.045847
                + v105 * 0.5
                + v106 * -0.454153
                + v108 * -0.045847
                + v110 * 0.5
                + v111 * -0.454153
                + v112 * -0.045847
                + v115 * 0.5
                + v116 * -0.454153
                + v117 * -0.045847)
               * 1023.0;
          double v128 = *(float *)(v37 + v79 + 64);
          double v129 = *(float *)(v37 + v79 + 68);
          double v130 = *(float *)(v37 + v79 + 72);
          *(float *)&double v94 = (v119 + v94 * 0.5) * 1023.0 * 0.25;
          *(float *)&double v123 = v123 * 1023.0 * 0.25;
          double v131 = *(float *)(v37 + v79 + 80);
          double v132 = *(float *)(v37 + v79 + 84);
          *(float *)&double v126 = v126;
          double v133 = *(float *)(v37 + v79 + 88);
          *(float *)&double v127 = v127 * 0.25;
          int v134 = v109 | ((int)((v129 * 0.7152 + v128 * 0.2126 + v130 * 0.0722) * 1023.0 + 0.0) << 10) | ((int)((v132 * 0.7152 + v131 * 0.2126 + v133 * 0.0722) * 1023.0 + 0.0) << 20);
          unsigned int v135 = llroundf(*(float *)&v94);
          double v136 = *(float *)(v34 + v79 + 64);
          double v137 = *(float *)(v34 + v79 + 68);
          unsigned int v138 = llroundf(*(float *)&v123);
          double v139 = *(float *)(v34 + v79 + 72);
          unsigned int v140 = llroundf(*(float *)&v126);
          unsigned int v141 = llroundf(*(float *)&v127);
          double v142 = *(float *)(v34 + v79 + 80);
          double v143 = *(float *)(v34 + v79 + 84);
          unsigned int v144 = v135 + 512;
          double v145 = *(float *)(v34 + v79 + 88);
          int v146 = (int)((v143 * 0.7152 + v142 * 0.2126 + v145 * 0.0722) * 1023.0 + 0.0);
          *(float *)&double v106 = (v129 * -0.385428
                           + v128 * -0.114572
                           + v130 * 0.5
                           + v131 * -0.114572
                           + v132 * -0.385428
                           + v133 * 0.5
                           + v136 * -0.114572
                           + v137 * -0.385428
                           + v139 * 0.5
                           + v142 * -0.114572
                           + v143 * -0.385428
                           + v145 * 0.5)
                          * 1023.0
                          * 0.25;
          *double v122 = ((v138 << 10) + 0x80000) | v144 | ((v140 << 20) + 0x20000000);
          *(float *)&double v142 = (v129 * -0.454153
                           + v128 * 0.5
                           + v130 * -0.045847
                           + v131 * 0.5
                           + v132 * -0.454153
                           + v133 * -0.045847
                           + v136 * 0.5
                           + v137 * -0.454153
                           + v139 * -0.045847
                           + v142 * 0.5
                           + v143 * -0.454153
                           + v145 * -0.045847)
                          * 1023.0
                          * 0.25;
          v125[1] = v134;
          v120[1] = v118 | ((int)((v137 * 0.7152 + v136 * 0.2126 + v139 * 0.0722) * 1023.0 + 0.0) << 10) | (v146 << 20);
          v122[1] = ((llroundf(*(float *)&v142) << 20) + 0x20000000) | (v141 + 512) | ((llroundf(*(float *)&v106) << 10)
                                                                                     + 0x80000);
          v80 += 6;
          v75 += 8;
          v79 += 96;
        }
        while (v80 < v18);
        malloc_type_id_t v27 = v184;
        uint64_t v147 = v183 & 0x3C;
        uint64_t v43 = (int *)((char *)v44 + v147 + v75);
        uint64_t v35 = (__int32 *)((char *)v35 + v75);
        unsigned int v40 = (_DWORD *)((char *)v45 + v147 + v75);
        float v148 = (float *)(v34 + v79);
        unint64_t v149 = (float *)(v37 + v79);
        uint64_t v26 = v185;
        uint64_t v19 = v186;
        unsigned int v21 = v182;
        unint64_t v23 = v181;
      }
      if (v80 < v14)
      {
        uint64_t v150 = 0;
        uint64_t v151 = v149;
        int v152 = v148;
        unsigned int v153 = v18 % 3;
        do
        {
          if (v80)
          {
            unsigned int v157 = &v149[v150 - 4];
            unsigned int v154 = v151 - 3;
            int v155 = v151 - 2;
            float v156 = v149[v150];
            float v158 = v149[v150 + 1];
            float v159 = v149[v150 + 2];
          }
          else
          {
            unsigned int v154 = &v149[v150 + 1];
            int v155 = &v149[v150 + 2];
            float v156 = 0.0;
            unsigned int v157 = v151;
            float v158 = 0.0;
            float v159 = 0.0;
          }
          double v160 = *v157;
          double v161 = *v154;
          double v162 = *v155;
          unint64_t v163 = *((unsigned __int8 *)&v196 + v153);
          *unsigned int v40 = ((int)((v161 * 0.7152 + v160 * 0.2126 + v162 * 0.0722) * 1023.0 + 0.0) << v163) | *v40 & ~(1023 << v163);
          if (v80)
          {
            unsigned int v167 = &v148[v150 - 4];
            double v164 = v152 - 3;
            unint64_t v165 = v152 - 2;
            float v166 = v148[v150];
            float v168 = v148[v150 + 1];
            float v169 = v148[v150 + 2];
          }
          else
          {
            double v164 = &v148[v150 + 1];
            unint64_t v165 = &v148[v150 + 2];
            float v166 = 0.0;
            unsigned int v167 = v152;
            float v168 = 0.0;
            float v169 = 0.0;
          }
          double v170 = *v167;
          double v171 = *v164;
          double v172 = *v165;
          if (v80)
          {
            float64x2_t v174 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D5C0, v161), (float64x2_t)xmmword_193E7D5D0, v160), (float64x2_t)xmmword_193E7D5E0, v162), (float64x2_t)xmmword_193E7D5D0, v156), (float64x2_t)xmmword_193E7D5C0,
                                     v158),
                                   (float64x2_t)xmmword_193E7D5E0,
                                   v159),
                                 (float64x2_t)xmmword_193E7D5D0,
                                 v170),
                               (float64x2_t)xmmword_193E7D5C0,
                               v171),
                             (float64x2_t)xmmword_193E7D5E0,
                             v172),
                           (float64x2_t)xmmword_193E7D5D0,
                           v166),
                         (float64x2_t)xmmword_193E7D5C0,
                         v168),
                       (float64x2_t)xmmword_193E7D5E0,
                       v169),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V21.2D, #0.25 }
            int32x2_t v173 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v174, _Q21)))), (int32x2_t)0x20000000200);
          }
          else
          {
            int32x2_t v173 = 0;
          }
          int *v43 = *v43 & ~(1023 << v163) | ((int)((v171 * 0.7152 + v170 * 0.2126 + v172 * 0.0722) * 1023.0 + 0.0) << v163);
          if (v153 == 2) {
            unsigned int v153 = 0;
          }
          else {
            ++v153;
          }
          if (v80)
          {
            unint64_t v176 = *((unsigned __int8 *)&v196 + v41);
            *uint64_t v35 = *v35 & ~(1023 << v176) | (v173.i32[0] << v176);
            float64x2_t v177 = (__int32 *)((char *)v35 + ((v176 >> 2) & 0x3C));
            if (v41 == 2) {
              unsigned int v178 = 0;
            }
            else {
              unsigned int v178 = v41 + 1;
            }
            unint64_t v179 = *((unsigned __int8 *)&v196 + v178);
            *float64x2_t v177 = *v177 & ~(1023 << v179) | (v173.i32[1] << v179);
            uint64_t v35 = (__int32 *)((char *)v177 + ((v179 >> 2) & 0x3C));
            if (v178 == 2) {
              unsigned int v41 = 0;
            }
            else {
              unsigned int v41 = v178 + 1;
            }
          }
          v151 += 4;
          v40 += v163 >> 4;
          v152 += 4;
          ++v80;
          v150 += 4;
          v43 += v163 >> 4;
        }
        while (v14 != v80);
      }
      unsigned int v32 = &v194[v190];
      uint64_t v33 = &v193[v190];
      v26 += 4 * v189;
      ++v19;
      v27 += v189;
      uint64_t v30 = v195 + v187;
      uint64_t v34 = v192 + v187;
      uint64_t v35 = &v191[v188];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_Copy_RGfA_pf20ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v196 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  unint64_t v11 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v12 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v13 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  unint64_t v14 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  if (v14 >= v13 - v12) {
    unint64_t v14 = v13 - v12;
  }
  if ((unint64_t)((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9 >= ((*(_DWORD *)(a6 + 24)
                                                                                    + *(void *)(a6 + 40)) & 0xFFFFFFFE)
                                                                                  - v11)
    unint64_t v15 = ((*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE) - v11;
  else {
    unint64_t v15 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v9;
  }
  unint64_t v16 = v13 % 6;
  _CF = v14 >= v16;
  unint64_t v18 = v14 - v16;
  if (!_CF) {
    unint64_t v18 = 0;
  }
  if (v15 >= 2)
  {
    uint64_t v19 = 0;
    unint64_t v20 = v12 / 3;
    unsigned int v21 = v12 % 3;
    unint64_t v22 = 6 * (v12 / 6) - v12 + 6;
    unint64_t v23 = v15 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = a7[1] + v24 * (v11 >> 1);
    uint64_t v26 = *a7 + *a8 * v11 + 4 * v20;
    malloc_type_id_t v27 = (int *)(v26 + *a8);
    uint64_t v28 = *a3;
    unint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v9;
    uint64_t v31 = 16 * v10;
    unsigned int v32 = (float *)(v30 + 16 * v10);
    uint64_t v33 = (float *)((char *)v32 + *a4);
    uint64_t v190 = (v29 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v189 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v187 = 4 * (v29 >> 1);
    unint64_t v188 = v24 >> 2;
    uint64_t v34 = v28 + v29 + v29 * (v8 + (v8 & 1));
    uint64_t v35 = (__int32 *)(v25 + 4 * v20);
    unsigned int v182 = v21;
    unint64_t v181 = v23;
    do
    {
      uint64_t v36 = 0;
      uint64_t v192 = v34;
      uint64_t v193 = v33;
      v194 = v32;
      uint64_t v195 = v30;
      uint64_t v37 = v30;
      uint64_t v38 = v32;
      unsigned int v39 = v33;
      unsigned int v40 = (_DWORD *)v26;
      unsigned int v41 = v21;
      unsigned int v42 = v21;
      unint64_t v191 = v35;
      uint64_t v43 = v27;
      do
      {
        uint64_t v44 = v43;
        uint64_t v45 = v40;
        if (v36)
        {
          long long v49 = (float *)(v37 + v31 - 16);
          uint64_t v46 = v38 - 3;
          uint64_t v47 = v38 - 2;
          float v48 = *(float *)(v37 + v31);
          float v50 = *(float *)(v37 + v31 + 4);
          float v51 = *(float *)(v37 + v31 + 8);
        }
        else
        {
          uint64_t v46 = (float *)(v37 + v31 + 4);
          uint64_t v47 = (float *)(v37 + v31 + 8);
          float v48 = 0.0;
          long long v49 = v38;
          float v50 = 0.0;
          float v51 = 0.0;
        }
        double v52 = *v49;
        double v53 = *v46;
        double v54 = *v47;
        unint64_t v55 = *((unsigned __int8 *)&v196 + v42);
        *unsigned int v40 = ((int)((v53 * 0.587 + v52 * 0.299 + v54 * 0.114) * 1023.0 + 0.0) << v55) | *v40 & ~(1023 << v55);
        if (v36)
        {
          long long v59 = (float *)(v34 + v31 - 16);
          long long v56 = v39 - 3;
          long long v57 = v39 - 2;
          float v58 = *(float *)(v34 + v31);
          float v60 = *(float *)(v34 + v31 + 4);
          float v61 = *(float *)(v34 + v31 + 8);
        }
        else
        {
          long long v56 = (float *)(v34 + v31 + 4);
          long long v57 = (float *)(v34 + v31 + 8);
          float v58 = 0.0;
          long long v59 = v39;
          float v60 = 0.0;
          float v61 = 0.0;
        }
        double v62 = *v59;
        double v63 = *v56;
        double v64 = *v57;
        if (v36)
        {
          float64x2_t v66 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D5F0, v53), (float64x2_t)xmmword_193E7D600, v52), (float64x2_t)xmmword_193E7D610, v54), (float64x2_t)xmmword_193E7D600, v48), (float64x2_t)xmmword_193E7D5F0,
                                  v50),
                                (float64x2_t)xmmword_193E7D610,
                                v51),
                              (float64x2_t)xmmword_193E7D600,
                              v62),
                            (float64x2_t)xmmword_193E7D5F0,
                            v63),
                          (float64x2_t)xmmword_193E7D610,
                          v64),
                        (float64x2_t)xmmword_193E7D600,
                        v58),
                      (float64x2_t)xmmword_193E7D5F0,
                      v60),
                    (float64x2_t)xmmword_193E7D610,
                    v61),
                  (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
          __asm { FMOV            V21.2D, #0.25 }
          int32x2_t v65 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v66, _Q21)))), (int32x2_t)0x20000000200);
        }
        else
        {
          int32x2_t v65 = 0;
        }
        int *v44 = *v44 & ~(1023 << v55) | ((int)((v63 * 0.587 + v62 * 0.299 + v64 * 0.114) * 1023.0 + 0.0) << v55);
        if (v42 == 2) {
          unsigned int v42 = 0;
        }
        else {
          ++v42;
        }
        if (v36)
        {
          unint64_t v71 = *((unsigned __int8 *)&v196 + v41);
          *uint64_t v35 = *v35 & ~(1023 << v71) | (v65.i32[0] << v71);
          uint64_t v72 = (__int32 *)((char *)v35 + ((v71 >> 2) & 0x3C));
          if (v41 == 2) {
            unsigned int v73 = 0;
          }
          else {
            unsigned int v73 = v41 + 1;
          }
          unint64_t v74 = *((unsigned __int8 *)&v196 + v73);
          *uint64_t v72 = *v72 & ~(1023 << v74) | (v65.i32[1] << v74);
          uint64_t v35 = (__int32 *)((char *)v72 + ((v74 >> 2) & 0x3C));
          if (v73 == 2) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = v73 + 1;
          }
        }
        v38 += 4;
        v40 += v55 >> 4;
        v39 += 4;
        ++v36;
        v37 += 16;
        uint64_t v43 = &v44[v55 >> 4];
        v34 += 16;
      }
      while (v22 != v36);
      if (v22 >= v18)
      {
        unint64_t v149 = (float *)(v37 + v31);
        float v148 = (float *)(v34 + v31);
        unint64_t v80 = v22;
      }
      else
      {
        unint64_t v184 = v27;
        uint64_t v185 = v26;
        uint64_t v186 = v19;
        unint64_t v75 = 0;
        unint64_t v183 = v55 >> 2;
        uint64_t v76 = (v55 >> 2) & 0x3C;
        int v77 = (char *)v44 + v76;
        int32x2_t v78 = (char *)v45 + v76;
        uint64_t v79 = v31;
        unint64_t v80 = v22;
        do
        {
          double v81 = *(float *)(v37 + v79);
          double v82 = *(float *)(v37 + v79 + 4);
          double v83 = *(float *)(v37 + v79 + 8);
          double v84 = *(float *)(v37 + v79 + 16);
          double v85 = *(float *)(v37 + v79 + 20);
          double v86 = *(float *)(v37 + v79 + 24);
          double v87 = *(float *)(v34 + v79);
          double v88 = *(float *)(v34 + v79 + 4);
          double v89 = *(float *)(v34 + v79 + 8);
          int v90 = (int)((v82 * 0.587 + v81 * 0.299 + v83 * 0.114) * 1023.0 + 0.0);
          double v91 = *(float *)(v34 + v79 + 16);
          double v92 = *(float *)(v34 + v79 + 20);
          int v93 = (int)((v85 * 0.587 + v84 * 0.299 + v86 * 0.114) * 1023.0 + 0.0);
          double v94 = *(float *)(v34 + v79 + 24);
          int v95 = (int)((v88 * 0.587 + v87 * 0.299 + v89 * 0.114) * 1023.0 + 0.0);
          int v96 = (int)((v92 * 0.587 + v91 * 0.299 + v94 * 0.114) * 1023.0 + 0.0);
          double v97 = v82 * -0.331264 + v81 * -0.168736 + v83 * 0.5 + v84 * -0.168736;
          double v98 = v82 * -0.418688 + v81 * 0.5 + v83 * -0.081312 + v84 * 0.5 + v85 * -0.418688;
          double v99 = *(float *)(v37 + v79 + 32);
          double v100 = v97 + v85 * -0.331264 + v86 * 0.5;
          double v101 = *(float *)(v37 + v79 + 36);
          double v102 = *(float *)(v37 + v79 + 40);
          double v103 = v98 + v86 * -0.081312;
          double v104 = v100 + v87 * -0.168736;
          double v105 = *(float *)(v37 + v79 + 48);
          double v106 = *(float *)(v37 + v79 + 52);
          double v107 = v103 + v87 * 0.5;
          double v108 = *(float *)(v37 + v79 + 56);
          int v109 = (int)((v106 * 0.587 + v105 * 0.299 + v108 * 0.114) * 1023.0 + 0.0);
          double v110 = *(float *)(v34 + v79 + 32);
          double v111 = *(float *)(v34 + v79 + 36);
          double v112 = *(float *)(v34 + v79 + 40);
          double v113 = v104 + v88 * -0.331264 + v89 * 0.5;
          double v114 = v107 + v88 * -0.418688 + v89 * -0.081312;
          double v115 = *(float *)(v34 + v79 + 48);
          double v116 = *(float *)(v34 + v79 + 52);
          double v117 = *(float *)(v34 + v79 + 56);
          int v118 = (int)((v116 * 0.587 + v115 * 0.299 + v117 * 0.114) * 1023.0 + 0.0);
          double v119 = v113 + v91 * -0.168736 + v92 * -0.331264;
          double v120 = (int *)&v77[v75];
          int v121 = v90 | (v93 << 10);
          double v122 = (unsigned int *)&v35[v75 / 4];
          double v123 = v114 + v91 * 0.5 + v92 * -0.418688 + v94 * -0.081312;
          int v124 = v95 | (v96 << 10);
          uint64_t v125 = (int *)&v78[v75];
          *uint64_t v125 = v121 | ((int)((v101 * 0.587 + v99 * 0.299 + v102 * 0.114) * 1023.0 + 0.0) << 20);
          *double v120 = v124 | ((int)((v111 * 0.587 + v110 * 0.299 + v112 * 0.114) * 1023.0 + 0.0) << 20);
          double v126 = (v101 * -0.331264
                + v99 * -0.168736
                + v102 * 0.5
                + v105 * -0.168736
                + v106 * -0.331264
                + v108 * 0.5
                + v110 * -0.168736
                + v111 * -0.331264
                + v112 * 0.5
                + v115 * -0.168736
                + v116 * -0.331264
                + v117 * 0.5)
               * 1023.0
               * 0.25;
          double v127 = (v101 * -0.418688
                + v99 * 0.5
                + v102 * -0.081312
                + v105 * 0.5
                + v106 * -0.418688
                + v108 * -0.081312
                + v110 * 0.5
                + v111 * -0.418688
                + v112 * -0.081312
                + v115 * 0.5
                + v116 * -0.418688
                + v117 * -0.081312)
               * 1023.0;
          double v128 = *(float *)(v37 + v79 + 64);
          double v129 = *(float *)(v37 + v79 + 68);
          double v130 = *(float *)(v37 + v79 + 72);
          *(float *)&double v94 = (v119 + v94 * 0.5) * 1023.0 * 0.25;
          *(float *)&double v123 = v123 * 1023.0 * 0.25;
          double v131 = *(float *)(v37 + v79 + 80);
          double v132 = *(float *)(v37 + v79 + 84);
          *(float *)&double v126 = v126;
          double v133 = *(float *)(v37 + v79 + 88);
          *(float *)&double v127 = v127 * 0.25;
          int v134 = v109 | ((int)((v129 * 0.587 + v128 * 0.299 + v130 * 0.114) * 1023.0 + 0.0) << 10) | ((int)((v132 * 0.587 + v131 * 0.299 + v133 * 0.114) * 1023.0 + 0.0) << 20);
          unsigned int v135 = llroundf(*(float *)&v94);
          double v136 = *(float *)(v34 + v79 + 64);
          double v137 = *(float *)(v34 + v79 + 68);
          unsigned int v138 = llroundf(*(float *)&v123);
          double v139 = *(float *)(v34 + v79 + 72);
          unsigned int v140 = llroundf(*(float *)&v126);
          unsigned int v141 = llroundf(*(float *)&v127);
          double v142 = *(float *)(v34 + v79 + 80);
          double v143 = *(float *)(v34 + v79 + 84);
          unsigned int v144 = v135 + 512;
          double v145 = *(float *)(v34 + v79 + 88);
          int v146 = (int)((v143 * 0.587 + v142 * 0.299 + v145 * 0.114) * 1023.0 + 0.0);
          *(float *)&double v106 = (v129 * -0.331264
                           + v128 * -0.168736
                           + v130 * 0.5
                           + v131 * -0.168736
                           + v132 * -0.331264
                           + v133 * 0.5
                           + v136 * -0.168736
                           + v137 * -0.331264
                           + v139 * 0.5
                           + v142 * -0.168736
                           + v143 * -0.331264
                           + v145 * 0.5)
                          * 1023.0
                          * 0.25;
          *double v122 = ((v138 << 10) + 0x80000) | v144 | ((v140 << 20) + 0x20000000);
          *(float *)&double v142 = (v129 * -0.418688
                           + v128 * 0.5
                           + v130 * -0.081312
                           + v131 * 0.5
                           + v132 * -0.418688
                           + v133 * -0.081312
                           + v136 * 0.5
                           + v137 * -0.418688
                           + v139 * -0.081312
                           + v142 * 0.5
                           + v143 * -0.418688
                           + v145 * -0.081312)
                          * 1023.0
                          * 0.25;
          v125[1] = v134;
          v120[1] = v118 | ((int)((v137 * 0.587 + v136 * 0.299 + v139 * 0.114) * 1023.0 + 0.0) << 10) | (v146 << 20);
          v122[1] = ((llroundf(*(float *)&v142) << 20) + 0x20000000) | (v141 + 512) | ((llroundf(*(float *)&v106) << 10)
                                                                                     + 0x80000);
          v80 += 6;
          v75 += 8;
          v79 += 96;
        }
        while (v80 < v18);
        malloc_type_id_t v27 = v184;
        uint64_t v147 = v183 & 0x3C;
        uint64_t v43 = (int *)((char *)v44 + v147 + v75);
        uint64_t v35 = (__int32 *)((char *)v35 + v75);
        unsigned int v40 = (_DWORD *)((char *)v45 + v147 + v75);
        float v148 = (float *)(v34 + v79);
        unint64_t v149 = (float *)(v37 + v79);
        uint64_t v26 = v185;
        uint64_t v19 = v186;
        unsigned int v21 = v182;
        unint64_t v23 = v181;
      }
      if (v80 < v14)
      {
        uint64_t v150 = 0;
        uint64_t v151 = v149;
        int v152 = v148;
        unsigned int v153 = v18 % 3;
        do
        {
          if (v80)
          {
            unsigned int v157 = &v149[v150 - 4];
            unsigned int v154 = v151 - 3;
            int v155 = v151 - 2;
            float v156 = v149[v150];
            float v158 = v149[v150 + 1];
            float v159 = v149[v150 + 2];
          }
          else
          {
            unsigned int v154 = &v149[v150 + 1];
            int v155 = &v149[v150 + 2];
            float v156 = 0.0;
            unsigned int v157 = v151;
            float v158 = 0.0;
            float v159 = 0.0;
          }
          double v160 = *v157;
          double v161 = *v154;
          double v162 = *v155;
          unint64_t v163 = *((unsigned __int8 *)&v196 + v153);
          *unsigned int v40 = ((int)((v161 * 0.587 + v160 * 0.299 + v162 * 0.114) * 1023.0 + 0.0) << v163) | *v40 & ~(1023 << v163);
          if (v80)
          {
            unsigned int v167 = &v148[v150 - 4];
            double v164 = v152 - 3;
            unint64_t v165 = v152 - 2;
            float v166 = v148[v150];
            float v168 = v148[v150 + 1];
            float v169 = v148[v150 + 2];
          }
          else
          {
            double v164 = &v148[v150 + 1];
            unint64_t v165 = &v148[v150 + 2];
            float v166 = 0.0;
            unsigned int v167 = v152;
            float v168 = 0.0;
            float v169 = 0.0;
          }
          double v170 = *v167;
          double v171 = *v164;
          double v172 = *v165;
          if (v80)
          {
            float64x2_t v174 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_193E7D5F0, v161), (float64x2_t)xmmword_193E7D600, v160), (float64x2_t)xmmword_193E7D610, v162), (float64x2_t)xmmword_193E7D600, v156), (float64x2_t)xmmword_193E7D5F0,
                                     v158),
                                   (float64x2_t)xmmword_193E7D610,
                                   v159),
                                 (float64x2_t)xmmword_193E7D600,
                                 v170),
                               (float64x2_t)xmmword_193E7D5F0,
                               v171),
                             (float64x2_t)xmmword_193E7D610,
                             v172),
                           (float64x2_t)xmmword_193E7D600,
                           v166),
                         (float64x2_t)xmmword_193E7D5F0,
                         v168),
                       (float64x2_t)xmmword_193E7D610,
                       v169),
                     (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
            __asm { FMOV            V21.2D, #0.25 }
            int32x2_t v173 = vadd_s32(vcvt_s32_f32(vrnda_f32(vcvt_f32_f64(vmulq_f64(v174, _Q21)))), (int32x2_t)0x20000000200);
          }
          else
          {
            int32x2_t v173 = 0;
          }
          int *v43 = *v43 & ~(1023 << v163) | ((int)((v171 * 0.587 + v170 * 0.299 + v172 * 0.114) * 1023.0 + 0.0) << v163);
          if (v153 == 2) {
            unsigned int v153 = 0;
          }
          else {
            ++v153;
          }
          if (v80)
          {
            unint64_t v176 = *((unsigned __int8 *)&v196 + v41);
            *uint64_t v35 = *v35 & ~(1023 << v176) | (v173.i32[0] << v176);
            float64x2_t v177 = (__int32 *)((char *)v35 + ((v176 >> 2) & 0x3C));
            if (v41 == 2) {
              unsigned int v178 = 0;
            }
            else {
              unsigned int v178 = v41 + 1;
            }
            unint64_t v179 = *((unsigned __int8 *)&v196 + v178);
            *float64x2_t v177 = *v177 & ~(1023 << v179) | (v173.i32[1] << v179);
            uint64_t v35 = (__int32 *)((char *)v177 + ((v179 >> 2) & 0x3C));
            if (v178 == 2) {
              unsigned int v41 = 0;
            }
            else {
              unsigned int v41 = v178 + 1;
            }
          }
          v151 += 4;
          v40 += v163 >> 4;
          v152 += 4;
          ++v80;
          v150 += 4;
          v43 += v163 >> 4;
        }
        while (v14 != v80);
      }
      unsigned int v32 = &v194[v190];
      uint64_t v33 = &v193[v190];
      v26 += 4 * v189;
      ++v19;
      v27 += v189;
      uint64_t v30 = v195 + v187;
      uint64_t v34 = v192 + v187;
      uint64_t v35 = &v191[v188];
    }
    while (v19 != v23);
  }
  return 0;
}

uint64_t vt_VImage_Copy_w30r_32ARGB(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 0, 1095911234, a1);
}

uint64_t vt_VImage_Copy_w30r_32BGRA(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 0, 1111970369, a1);
}

uint64_t vt_VImage_Copy_w30r_l64r(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 0, 1815491698, a1);
}

uint64_t vt_VImage_Copy_w30r_RGhA(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 0, 1380411457, a1);
}

uint64_t vt_VImage_Copy_w30r_RGfA(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 0, 1380410945, a1);
}

uint64_t vt_Copy_w30r_b3a8_Crop(size_t a1, uint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, char **a6)
{
  if (a2)
  {
    uint64_t v8 = a2;
    uint64_t v10 = *a3;
    uint64_t v11 = *a5;
    size_t v12 = 4 * (a1 & 0x7FFFFFFFFFFFFFFLL);
    uint64_t v13 = *a6;
    uint64_t v14 = a2;
    unint64_t v15 = (char *)*a4;
    do
    {
      memcpy(v13, v15, v12);
      v15 += v10;
      v13 += v11;
      --v14;
    }
    while (v14);
    unint64_t v16 = a6[1];
    do
    {
      memset(v16, 255, a1);
      v16 += a5[1];
      --v8;
    }
    while (v8);
  }
  return 0;
}

uint64_t vt_Copy_w30r_b3a8(size_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, uint64_t a6)
{
  unint64_t v8 = a2;
  vt_Copy_NonPlanar32(a1, a2, a3, a4, a5, (void **)a6);
  if (v8)
  {
    uint64_t v10 = *(char **)(a6 + 8);
    do
    {
      memset(v10, 255, a1);
      v10 += a5[1];
      --v8;
    }
    while (v8);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_w30r_x420(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x11u, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_x420;
  *a11 = vt_VImage_Cleanup_w30r_x420;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_x422(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x10u, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_x422;
  *a11 = vt_VImage_Cleanup_w30r_x422;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_x444(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_x444;
  *a11 = vt_VImage_Cleanup_w30r_x444;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_xf20(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D620;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x11u, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_xf20;
  *a11 = vt_VImage_Cleanup_w30r_xf20;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_xf22(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D620;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x10u, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_xf22;
  *a11 = vt_VImage_Cleanup_w30r_xf22;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_xf44(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D620;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_xf44;
  *a11 = vt_VImage_Cleanup_w30r_xf44;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_xw20(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x11u, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_xw20;
  *a11 = vt_VImage_Cleanup_w30r_xw20;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_xw22(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, (vImageYpCbCrType)0x10u, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_xw22;
  *a11 = vt_VImage_Cleanup_w30r_xw22;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_w30r_xw44(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v23 = 0u;
  long long v24 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4D0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v23 = v20;
    long long v24 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v23;
    goto LABEL_11;
  }
  unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16Q12|kvImageARGB16U, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_w30r_xw44;
  *a11 = vt_VImage_Cleanup_w30r_xw44;
  *a8 = v17;
  return result;
}

uint64_t vt_VImage_Copy_b3a8_32ARGB(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 1, 1095911234, a1);
}

uint64_t vt_VImage_Copy_b3a8_32BGRA(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 1, 1111970369, a1);
}

uint64_t vt_VImage_Copy_b3a8_l64r(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 1, 1815491698, a1);
}

uint64_t vt_VImage_Copy_b3a8_RGhA(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 1, 1380411457, a1);
}

uint64_t vt_VImage_Copy_b3a8_RGfA(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  return vt_VImage_Copy_b3a8_XXXX(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 1, 1380410945, a1);
}

uint64_t vt_Copy_b3a8_b3a8(uint64_t a1, unint64_t a2, uint64_t *a3, const void **a4, uint64_t *a5, void **a6)
{
  return 0;
}

vImage_Error vt_VImage_Copy_l64r_w30r(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 0, 1815491698, a1);
}

vImage_Error vt_VImage_Copy_l64r_b3a8(uint64_t a1, uint64_t a2, void **a3, size_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  return vt_VImage_Copy_XXXX_b3a8(*(void *)(a2 + 16), *(void *)(a2 + 24), a4, a3, a8, a7, 1, 1815491698, a1);
}

uint64_t vt_VImage_Setup_l64r_RGhA(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  uint64_t v14 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  *((void *)v14 + 36) = 0;
  *((void *)v14 + 37) = a5;
  *((unsigned char *)v14 + 288) = a6;
  *a9 = vt_VImage_Copy_l64r_RGhA;
  *a11 = vt_VImage_Cleanup_l64r_RGhA;
  *a8 = v14;
  return 0;
}

vImage_Error vt_VImage_Setup_l64r_v410(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v28 = 0u;
  long long v29 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D440;
      long long v21 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v20 = xmmword_193E7D460;
      long long v21 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v20 = xmmword_193E7D480;
      long long v21 = xmmword_193E7D490;
    }
    long long v28 = v20;
    long long v29 = v21;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v28;
    goto LABEL_11;
  }
  unint64_t v18 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v18;
LABEL_11:
  vImage_Error v22 = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, (vImageARGBType)0xFFFFFFFF, kvImage444CrYpCb10, 0);
  if (!v22 && (*((void *)v17 + 34) != a1 || *((void *)v17 + 33) != a2 || *((void *)v17 + 35) != 8 * a1))
  {
    long long v23 = (void *)*((void *)v17 + 32);
    if (v23)
    {
      *((void *)v17 + 32) = 0;
      free(v23);
    }
    unint64_t v24 = 8 * a1;
    if (a2 && v24)
    {
      size_t v25 = 0;
      if (((v24 | a2) & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
      if (!is_mul_ok(a2, v24)) {
        goto LABEL_25;
      }
      size_t v25 = v24 * a2;
      if (!(v24 * a2)) {
        goto LABEL_25;
      }
      malloc_type_id_t v26 = 1556728742;
    }
    else
    {
      size_t v25 = 0;
      malloc_type_id_t v26 = 1270757447;
    }
    size_t v25 = (size_t)malloc_type_malloc(v25, v26);
LABEL_25:
    *((void *)v17 + 32) = v25;
    *((void *)v17 + 33) = a2;
    *((void *)v17 + 34) = a1;
    *((void *)v17 + 35) = v24;
  }
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_l64r_v410;
  *a11 = vt_VImage_Cleanup_l64r_v410;
  *a8 = v17;
  return v22;
}

vImage_Error vt_VImage_Setup_l64r_y416(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16U, kvImage444AYpCbCr16, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_l64r_y416;
  *a11 = vt_VImage_Cleanup_l64r_y416;
  *a8 = v17;
  return result;
}

vImage_Error vt_VImage_Setup_l64r_v216(unint64_t a1, unint64_t a2, uint64_t a3, const __CFString *a4, uint64_t a5, char a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void (**a11)(void **a1))
{
  long long v24 = 0u;
  long long v25 = 0u;
  unint64_t v17 = malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)unint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *((_OWORD *)v17 + 7) = 0u;
  *((_OWORD *)v17 + 8) = 0u;
  *((_OWORD *)v17 + 9) = 0u;
  *((_OWORD *)v17 + 10) = 0u;
  *((_OWORD *)v17 + 11) = 0u;
  *((_OWORD *)v17 + 12) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((_OWORD *)v17 + 15) = 0u;
  *((_OWORD *)v17 + 16) = 0u;
  *((_OWORD *)v17 + 17) = 0u;
  *((_OWORD *)v17 + 18) = 0u;
  *(void *)&long long v18 = 0xFFFFLL;
  *((void *)&v18 + 1) = 0xFFFFLL;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4C0;
  *(_OWORD *)&pixelRange.YpMax = v18;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D440;
      long long v22 = xmmword_193E7D450;
    }
    else if (FigCFEqual())
    {
      long long v21 = xmmword_193E7D460;
      long long v22 = xmmword_193E7D470;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a4) != 5)
        {
          DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)GetDefaultARGBToYpCbCrMatrixWidthDimensionHint(a1, a2);
          goto LABEL_11;
        }
        uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C0];
        goto LABEL_3;
      }
      long long v21 = xmmword_193E7D480;
      long long v22 = xmmword_193E7D490;
    }
    long long v24 = v21;
    long long v25 = v22;
    DefaultARGBToYpCbCrMatrixWidthDimensionHint = (const vImage_ARGBToYpCbCrMatrix *)&v24;
    goto LABEL_11;
  }
  uint64_t v19 = (const vImage_ARGBToYpCbCrMatrix **)MEMORY[0x1E4F167C8];
LABEL_3:
  DefaultARGBToYpCbCrMatrixWidthDimensionHint = *v19;
LABEL_11:
  vImage_Error result = vImageConvert_ARGBToYpCbCr_GenerateConversion(DefaultARGBToYpCbCrMatrixWidthDimensionHint, &pixelRange, (vImage_ARGBToYpCbCr *)v17 + 1, kvImageARGB16U, kvImage422CbYpCrYp16, 0);
  *((void *)v17 + 37) = a5;
  *((unsigned char *)v17 + 288) = a6;
  *a9 = vt_VImage_Copy_l64r_v216;
  *a11 = vt_VImage_Cleanup_l64r_v216;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_64RGBA_y420ITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int16 **a4, uint64_t a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    unint64_t v40 = a2 >> 1;
    uint64_t v9 = a6[1];
    uint64_t v8 = a6[2];
    uint64_t v39 = *(int *)(a5 + 16);
    uint64_t v38 = *(int *)(a5 + 8);
    uint64_t v10 = *a6;
    uint64_t v11 = (int)*(void *)a5;
    uint64_t v37 = (int)(2 * *(void *)a5);
    uint64_t v36 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = a1 >> 1;
    }
    uint64_t v44 = (unsigned char *)(v10 + 1);
    uint64_t v43 = *a4;
    do
    {
      uint64_t v42 = v6;
      if (a1 >= 2)
      {
        uint64_t v13 = 0;
        unint64_t v15 = v43;
        uint64_t v14 = v44;
        do
        {
          unint64_t v16 = &v14[v11];
          unint64_t v17 = (char *)v15 + v7;
          unsigned int v18 = *v15;
          unsigned int v19 = v15[1];
          unsigned int v20 = v15[2];
          int v21 = HIBYTE(v15[4]);
          int v22 = HIBYTE(v15[5]);
          int v23 = HIBYTE(v15[6]);
          unsigned int v24 = *(unsigned __int16 *)((char *)v15 + v7);
          unsigned int v25 = *(unsigned __int16 *)((char *)v15 + v7 + 2);
          uint64_t v26 = v7;
          unsigned int v27 = *(unsigned __int16 *)((char *)v15 + v7 + 4);
          unsigned int v28 = *(unsigned __int16 *)((char *)v15 + v7 + 8);
          unsigned int v29 = *((unsigned __int16 *)v17 + 5);
          LODWORD(v17) = *((unsigned __int16 *)v17 + 6);
          *(v14 - 1) = (7371 * (v18 >> 8) + 540672 + 19024 * (v19 >> 8) + 1664 * (v20 >> 8)) >> 15;
          *uint64_t v14 = (7371 * v21 + 540672 + 19024 * v22 + 1664 * v23) >> 15;
          v14 += 2;
          v29 >>= 8;
          *(v16 - 1) = (7371 * (v24 >> 8) + 540672 + 19024 * (v25 >> 8) + 1664 * (v27 >> 8)) >> 15;
          *unint64_t v16 = (7371 * (v28 >> 8) + 540672 + 19024 * v29 + 1664 * (v17 >> 8)) >> 15;
          int v30 = v23 + (v20 >> 8) + (v27 >> 8);
          int v31 = v21 + (v18 >> 8) + (v24 >> 8) + (v28 >> 8);
          int v32 = v22 + (v19 >> 8) + (v25 >> 8);
          unsigned int v33 = 33544090 * v29 - 10342 * v32 + 33550426 * v31 + 14350 * (v30 + (v17 >> 8));
          unsigned int v34 = 33541237 * v29 - 13195 * v32 + 33553279 * v30 + 33553279 * (v17 >> 8) + 14350 * v31;
          uint64_t v7 = v26;
          *(unsigned char *)(v9 + v13) = (v33 + 16842752) >> 17;
          *(unsigned char *)(v8 + v13) = (v34 + 16842752) >> 17;
          v15 += 8;
          ++v13;
        }
        while (v12 != v13);
      }
      v9 += v38;
      v8 += v39;
      uint64_t v43 = (unsigned __int16 *)((char *)v43 + v36);
      ++v6;
      v44 += v37;
    }
    while (v42 + 1 != v40);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_y420ITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int16 **a4, uint64_t a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    unint64_t v40 = a2 >> 1;
    uint64_t v9 = a6[1];
    uint64_t v8 = a6[2];
    uint64_t v39 = *(int *)(a5 + 16);
    uint64_t v38 = *(int *)(a5 + 8);
    uint64_t v10 = *a6;
    uint64_t v11 = (int)*(void *)a5;
    uint64_t v37 = (int)(2 * *(void *)a5);
    uint64_t v36 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = a1 >> 1;
    }
    uint64_t v44 = (unsigned char *)(v10 + 1);
    uint64_t v43 = *a4;
    do
    {
      uint64_t v42 = v6;
      if (a1 >= 2)
      {
        uint64_t v13 = 0;
        unint64_t v15 = v43;
        uint64_t v14 = v44;
        do
        {
          unint64_t v16 = &v14[v11];
          unint64_t v17 = (char *)v15 + v7;
          unsigned int v18 = *v15;
          unsigned int v19 = v15[1];
          unsigned int v20 = v15[2];
          int v21 = HIBYTE(v15[4]);
          int v22 = HIBYTE(v15[5]);
          int v23 = HIBYTE(v15[6]);
          unsigned int v24 = *(unsigned __int16 *)((char *)v15 + v7);
          unsigned int v25 = *(unsigned __int16 *)((char *)v15 + v7 + 2);
          uint64_t v26 = v7;
          unsigned int v27 = *(unsigned __int16 *)((char *)v15 + v7 + 4);
          unsigned int v28 = *(unsigned __int16 *)((char *)v15 + v7 + 8);
          unsigned int v29 = *((unsigned __int16 *)v17 + 5);
          LODWORD(v17) = *((unsigned __int16 *)v17 + 6);
          *(v14 - 1) = (5983 * (v18 >> 8) + 540672 + 20127 * (v19 >> 8) + 2032 * (v20 >> 8)) >> 15;
          *uint64_t v14 = (5983 * v21 + 540672 + 20127 * v22 + 2032 * v23) >> 15;
          v14 += 2;
          v29 >>= 8;
          *(v16 - 1) = (5983 * (v24 >> 8) + 540672 + 20127 * (v25 >> 8) + 2032 * (v27 >> 8)) >> 15;
          *unint64_t v16 = (5983 * (v28 >> 8) + 540672 + 20127 * v29 + 2032 * (v17 >> 8)) >> 15;
          int v30 = v23 + (v20 >> 8) + (v27 >> 8);
          int v31 = v21 + (v18 >> 8) + (v24 >> 8) + (v28 >> 8);
          int v32 = v22 + (v19 >> 8) + (v25 >> 8);
          unsigned int v33 = 33543339 * v29 - 11093 * v32 + 33551135 * v31 + 14392 * (v30 + (v17 >> 8));
          unsigned int v34 = 33541360 * v29 - 13072 * v32 + 33553113 * v30 + 33553113 * (v17 >> 8) + 14392 * v31;
          uint64_t v7 = v26;
          *(unsigned char *)(v9 + v13) = (v33 + 16842752) >> 17;
          *(unsigned char *)(v8 + v13) = (v34 + 16842752) >> 17;
          v15 += 8;
          ++v13;
        }
        while (v12 != v13);
      }
      v9 += v38;
      v8 += v39;
      uint64_t v43 = (unsigned __int16 *)((char *)v43 + v36);
      ++v6;
      v44 += v37;
    }
    while (v42 + 1 != v40);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_y420ITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int16 **a4, uint64_t a5, uint64_t *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    unint64_t v40 = a2 >> 1;
    uint64_t v9 = a6[1];
    uint64_t v8 = a6[2];
    uint64_t v39 = *(int *)(a5 + 16);
    uint64_t v38 = *(int *)(a5 + 8);
    uint64_t v10 = *a6;
    uint64_t v11 = (int)*(void *)a5;
    uint64_t v37 = (int)(2 * *(void *)a5);
    uint64_t v36 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = a1 >> 1;
    }
    uint64_t v44 = (unsigned char *)(v10 + 1);
    uint64_t v43 = *a4;
    do
    {
      uint64_t v42 = v6;
      if (a1 >= 2)
      {
        uint64_t v13 = 0;
        unint64_t v15 = v43;
        uint64_t v14 = v44;
        do
        {
          unint64_t v16 = &v14[v11];
          unint64_t v17 = (char *)v15 + v7;
          unsigned int v18 = *v15;
          unsigned int v19 = v15[1];
          unsigned int v20 = v15[2];
          int v21 = HIBYTE(v15[4]);
          int v22 = HIBYTE(v15[5]);
          int v23 = HIBYTE(v15[6]);
          unsigned int v24 = *(unsigned __int16 *)((char *)v15 + v7);
          unsigned int v25 = *(unsigned __int16 *)((char *)v15 + v7 + 2);
          uint64_t v26 = v7;
          unsigned int v27 = *(unsigned __int16 *)((char *)v15 + v7 + 4);
          unsigned int v28 = *(unsigned __int16 *)((char *)v15 + v7 + 8);
          unsigned int v29 = *((unsigned __int16 *)v17 + 5);
          LODWORD(v17) = *((unsigned __int16 *)v17 + 6);
          *(v14 - 1) = (8414 * (v18 >> 8) + 540672 + 16519 * (v19 >> 8) + 3208 * (v20 >> 8)) >> 15;
          *uint64_t v14 = (8414 * v21 + 540672 + 16519 * v22 + 3208 * v23) >> 15;
          v14 += 2;
          v29 >>= 8;
          *(v16 - 1) = (8414 * (v24 >> 8) + 540672 + 16519 * (v25 >> 8) + 3208 * (v27 >> 8)) >> 15;
          *unint64_t v16 = (8414 * (v28 >> 8) + 540672 + 16519 * v29 + 3208 * (v17 >> 8)) >> 15;
          int v30 = v23 + (v20 >> 8) + (v27 >> 8);
          int v31 = v21 + (v18 >> 8) + (v24 >> 8) + (v28 >> 8);
          int v32 = v22 + (v19 >> 8) + (v25 >> 8);
          unsigned int v33 = 33544898 * v29 - 9534 * v32 + 33549576 * v31 + 14392 * (v30 + (v17 >> 8));
          unsigned int v34 = 33542381 * v29 - 12051 * v32 + 33552092 * v30 + 33552092 * (v17 >> 8) + 14392 * v31;
          uint64_t v7 = v26;
          *(unsigned char *)(v9 + v13) = (v33 + 16842752) >> 17;
          *(unsigned char *)(v8 + v13) = (v34 + 16842752) >> 17;
          v15 += 8;
          ++v13;
        }
        while (v12 != v13);
      }
      v9 += v38;
      v8 += v39;
      uint64_t v43 = (unsigned __int16 *)((char *)v43 + v36);
      ++v6;
      v44 += v37;
    }
    while (v42 + 1 != v40);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_f420ITU2020(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int16 **a4, uint64_t a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v9 = a6[1];
    uint64_t v8 = a6[2];
    uint64_t v41 = *(int *)(a5 + 16);
    unint64_t v42 = a2 >> 1;
    uint64_t v40 = *(int *)(a5 + 8);
    uint64_t v10 = (int)*(void *)a5;
    uint64_t v39 = (int)(2 * *(void *)a5);
    uint64_t v38 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = a1 >> 1;
    }
    uint64_t v45 = *a4;
    uint64_t v46 = *a6 + 1;
    do
    {
      uint64_t v44 = v6;
      if (a1 >= 2)
      {
        uint64_t v12 = 0;
        uint64_t v14 = v45;
        uint64_t v13 = (unsigned char *)v46;
        do
        {
          unsigned int v15 = *v14;
          unsigned int v16 = v14[1];
          unsigned int v17 = v14[2];
          unsigned int v18 = v14[4];
          int v19 = HIBYTE(v14[5]);
          unsigned int v20 = *(unsigned __int16 *)((char *)v14 + v7);
          unsigned int v21 = *(unsigned __int16 *)((char *)v14 + v7 + 2);
          unsigned int v22 = *(unsigned __int16 *)((char *)v14 + v7 + 4);
          unsigned int v23 = *(unsigned __int16 *)((char *)v14 + v7 + 8);
          unsigned int v24 = *(unsigned __int16 *)((char *)v14 + v7 + 10);
          unsigned int v25 = *(unsigned __int16 *)((char *)v14 + v7 + 12);
          int v26 = HIBYTE(v14[6]);
          *(v13 - 1) = (22217 * (v16 >> 8) + 8608 * (v15 >> 8) + 1943 * (v17 >> 8) + 0x4000) >> 15;
          *uint64_t v13 = (22217 * v19 + 8608 * (v18 >> 8) + 1943 * v26 + 0x4000) >> 15;
          unsigned int v27 = &v13[v10];
          *(v27 - 1) = (22217 * (v21 >> 8) + 8608 * (v20 >> 8) + 1943 * (v22 >> 8) + 0x4000) >> 15;
          *unsigned int v27 = (22217 * (v24 >> 8) + 8608 * (v23 >> 8) + 1943 * (v25 >> 8) + 0x4000) >> 15;
          int v28 = v19 + (v16 >> 8) + (v21 >> 8) + (v24 >> 8);
          int v29 = v26 + (v17 >> 8) + (v22 >> 8) + (v25 >> 8);
          int v30 = -4574 * ((v18 >> 8) + (v15 >> 8) + (v20 >> 8) + (v23 >> 8)) + (v29 << 14) - 11808 * v28;
          int v31 = -15065 * v28 + (((v20 >> 8) + (v18 >> 8) + (v23 >> 8) + (v15 >> 8)) << 14);
          unsigned int v32 = v30 + 0x1000000;
          unsigned int v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF) {
            LOBYTE(v33) = -1;
          }
          *(unsigned char *)(v9 + v12) = v33;
          int v34 = v31 - 1317 * v29;
          unsigned int v35 = v34 + 0x1000000;
          unsigned int v36 = (v34 + 16842752) >> 17;
          if (v35 > 0x1FEFFFF) {
            LOBYTE(v36) = -1;
          }
          *(unsigned char *)(v8 + v12) = v36;
          v14 += 8;
          ++v12;
          v13 += 2;
        }
        while (v11 != v12);
      }
      v9 += v40;
      v8 += v41;
      uint64_t v45 = (unsigned __int16 *)((char *)v45 + v38);
      uint64_t v6 = v44 + 1;
      v46 += v39;
    }
    while (v44 + 1 != v42);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_f420ITU709(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int16 **a4, uint64_t a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v9 = a6[1];
    uint64_t v8 = a6[2];
    uint64_t v41 = *(int *)(a5 + 16);
    unint64_t v42 = a2 >> 1;
    uint64_t v40 = *(int *)(a5 + 8);
    uint64_t v10 = (int)*(void *)a5;
    uint64_t v39 = (int)(2 * *(void *)a5);
    uint64_t v38 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = a1 >> 1;
    }
    uint64_t v45 = *a4;
    uint64_t v46 = *a6 + 1;
    do
    {
      uint64_t v44 = v6;
      if (a1 >= 2)
      {
        uint64_t v12 = 0;
        uint64_t v14 = v45;
        uint64_t v13 = (unsigned char *)v46;
        do
        {
          unsigned int v15 = *v14;
          unsigned int v16 = v14[1];
          unsigned int v17 = v14[2];
          unsigned int v18 = v14[4];
          int v19 = HIBYTE(v14[5]);
          unsigned int v20 = *(unsigned __int16 *)((char *)v14 + v7);
          unsigned int v21 = *(unsigned __int16 *)((char *)v14 + v7 + 2);
          unsigned int v22 = *(unsigned __int16 *)((char *)v14 + v7 + 4);
          unsigned int v23 = *(unsigned __int16 *)((char *)v14 + v7 + 8);
          unsigned int v24 = *(unsigned __int16 *)((char *)v14 + v7 + 10);
          unsigned int v25 = *(unsigned __int16 *)((char *)v14 + v7 + 12);
          int v26 = HIBYTE(v14[6]);
          *(v13 - 1) = (23436 * (v16 >> 8) + 6966 * (v15 >> 8) + 2366 * (v17 >> 8) + 0x4000) >> 15;
          *uint64_t v13 = (23436 * v19 + 6966 * (v18 >> 8) + 2366 * v26 + 0x4000) >> 15;
          unsigned int v27 = &v13[v10];
          *(v27 - 1) = (23436 * (v21 >> 8) + 6966 * (v20 >> 8) + 2366 * (v22 >> 8) + 0x4000) >> 15;
          *unsigned int v27 = (23436 * (v24 >> 8) + 6966 * (v23 >> 8) + 2366 * (v25 >> 8) + 0x4000) >> 15;
          int v28 = v19 + (v16 >> 8) + (v21 >> 8) + (v24 >> 8);
          int v29 = v26 + (v17 >> 8) + (v22 >> 8) + (v25 >> 8);
          int v30 = -3753 * ((v18 >> 8) + (v15 >> 8) + (v20 >> 8) + (v23 >> 8)) + (v29 << 14) - 12629 * v28;
          int v31 = -14881 * v28 + (((v20 >> 8) + (v18 >> 8) + (v23 >> 8) + (v15 >> 8)) << 14);
          unsigned int v32 = v30 + 0x1000000;
          unsigned int v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF) {
            LOBYTE(v33) = -1;
          }
          *(unsigned char *)(v9 + v12) = v33;
          int v34 = v31 - 1501 * v29;
          unsigned int v35 = v34 + 0x1000000;
          unsigned int v36 = (v34 + 16842752) >> 17;
          if (v35 > 0x1FEFFFF) {
            LOBYTE(v36) = -1;
          }
          *(unsigned char *)(v8 + v12) = v36;
          v14 += 8;
          ++v12;
          v13 += 2;
        }
        while (v11 != v12);
      }
      v9 += v40;
      v8 += v41;
      uint64_t v45 = (unsigned __int16 *)((char *)v45 + v38);
      uint64_t v6 = v44 + 1;
      v46 += v39;
    }
    while (v44 + 1 != v42);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_f420ITU601(unint64_t a1, unint64_t a2, uint64_t *a3, unsigned __int16 **a4, uint64_t a5, void *a6)
{
  if (a2 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v9 = a6[1];
    uint64_t v8 = a6[2];
    uint64_t v41 = *(int *)(a5 + 16);
    unint64_t v42 = a2 >> 1;
    uint64_t v40 = *(int *)(a5 + 8);
    uint64_t v10 = (int)*(void *)a5;
    uint64_t v39 = (int)(2 * *(void *)a5);
    uint64_t v38 = 2 * *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = a1 >> 1;
    }
    uint64_t v45 = *a4;
    uint64_t v46 = *a6 + 1;
    do
    {
      uint64_t v44 = v6;
      if (a1 >= 2)
      {
        uint64_t v12 = 0;
        uint64_t v14 = v45;
        uint64_t v13 = (unsigned char *)v46;
        do
        {
          unsigned int v15 = *v14;
          unsigned int v16 = v14[1];
          unsigned int v17 = v14[2];
          unsigned int v18 = v14[4];
          int v19 = HIBYTE(v14[5]);
          unsigned int v20 = *(unsigned __int16 *)((char *)v14 + v7);
          unsigned int v21 = *(unsigned __int16 *)((char *)v14 + v7 + 2);
          unsigned int v22 = *(unsigned __int16 *)((char *)v14 + v7 + 4);
          unsigned int v23 = *(unsigned __int16 *)((char *)v14 + v7 + 8);
          unsigned int v24 = *(unsigned __int16 *)((char *)v14 + v7 + 10);
          unsigned int v25 = *(unsigned __int16 *)((char *)v14 + v7 + 12);
          int v26 = HIBYTE(v14[6]);
          *(v13 - 1) = (19235 * (v16 >> 8) + 9798 * (v15 >> 8) + 3736 * (v17 >> 8) + 0x4000) >> 15;
          *uint64_t v13 = (19235 * v19 + 9798 * (v18 >> 8) + 3736 * v26 + 0x4000) >> 15;
          unsigned int v27 = &v13[v10];
          *(v27 - 1) = (19235 * (v21 >> 8) + 9798 * (v20 >> 8) + 3736 * (v22 >> 8) + 0x4000) >> 15;
          *unsigned int v27 = (19235 * (v24 >> 8) + 9798 * (v23 >> 8) + 3736 * (v25 >> 8) + 0x4000) >> 15;
          int v28 = v19 + (v16 >> 8) + (v21 >> 8) + (v24 >> 8);
          int v29 = v26 + (v17 >> 8) + (v22 >> 8) + (v25 >> 8);
          int v30 = -5528 * ((v18 >> 8) + (v15 >> 8) + (v20 >> 8) + (v23 >> 8)) + (v29 << 14) - 10854 * v28;
          int v31 = -13719 * v28 + (((v20 >> 8) + (v18 >> 8) + (v23 >> 8) + (v15 >> 8)) << 14);
          unsigned int v32 = v30 + 0x1000000;
          unsigned int v33 = (v30 + 16842752) >> 17;
          if (v32 > 0x1FEFFFF) {
            LOBYTE(v33) = -1;
          }
          *(unsigned char *)(v9 + v12) = v33;
          int v34 = v31 - 2663 * v29;
          unsigned int v35 = v34 + 0x1000000;
          unsigned int v36 = (v34 + 16842752) >> 17;
          if (v35 > 0x1FEFFFF) {
            LOBYTE(v36) = -1;
          }
          *(unsigned char *)(v8 + v12) = v36;
          v14 += 8;
          ++v12;
          v13 += 2;
        }
        while (v11 != v12);
      }
      v9 += v40;
      v8 += v41;
      uint64_t v45 = (unsigned __int16 *)((char *)v45 + v38);
      uint64_t v6 = v44 + 1;
      v46 += v39;
    }
    while (v44 + 1 != v42);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_p420ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v195 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12) {
    unint64_t v17 = v15 - v12;
  }
  unint64_t v18 = v14 % 6;
  BOOL v19 = v16 >= v18;
  unint64_t v20 = v16 - v18;
  if (!v19) {
    unint64_t v20 = 0;
  }
  unint64_t v183 = v16;
  unint64_t v184 = v20;
  if (v17 >= 2)
  {
    uint64_t v21 = 0;
    unsigned int v171 = v13 % 3;
    unsigned int v162 = v20 % 3;
    unint64_t v22 = 6 * (v13 / 6) - v13 + 6;
    unint64_t v170 = v17 >> 1;
    unint64_t v23 = a8[1];
    unsigned int v24 = (_DWORD *)(a7[1] + v23 * (v12 >> 1) + 4 * (v13 / 3));
    unint64_t v25 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    int v26 = (unsigned int *)(v25 + *a8);
    uint64_t v27 = *a3;
    uint64_t v28 = *a4;
    uint64_t v29 = *a3 + *a4 * v9;
    unint64_t v30 = v22;
    uint64_t v31 = 8 * v10;
    unsigned int v32 = (unsigned __int16 *)(v29 + 8 * v10);
    unsigned int v33 = (unsigned __int16 *)((char *)v32 + v28);
    uint64_t v169 = v28 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v168 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v34 = v27 + v28 + v28 * (v8 + (v8 & 1));
    uint64_t v166 = 2 * v28;
    unint64_t v167 = v23 >> 2;
    unint64_t v190 = v30;
    uint64_t v191 = 8 * v10;
    do
    {
      unsigned int v178 = v24;
      uint64_t v179 = v21;
      uint64_t v35 = 0;
      uint64_t v175 = v29;
      unint64_t v176 = v26;
      uint64_t v172 = v34;
      int32x2_t v173 = v33;
      unsigned int v36 = v171;
      unsigned int v194 = v171;
      uint64_t v37 = v26;
      unint64_t v177 = v25;
      uint64_t v38 = (unsigned int *)v25;
      float64x2_t v174 = v32;
      do
      {
        uint64_t v39 = v38;
        uint64_t v40 = v37;
        if (v35)
        {
          uint64_t v46 = (unsigned __int16 *)(v29 + v31 - 8);
          uint64_t v44 = v32 - 3;
          uint64_t v45 = v32 - 2;
          uint64_t v41 = *(unsigned __int16 *)(v29 + v31);
          uint64_t v42 = *(unsigned __int16 *)(v29 + v31 + 2);
          uint64_t v43 = *(unsigned __int16 *)(v29 + v31 + 4);
        }
        else
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          uint64_t v44 = (unsigned __int16 *)(v29 + v31 + 2);
          uint64_t v45 = (unsigned __int16 *)(v29 + v31 + 4);
          uint64_t v46 = v32;
        }
        uint64_t v47 = *v45;
        uint64_t v48 = *v44;
        uint64_t v49 = *v46;
        unint64_t v50 = *((unsigned __int8 *)&v195 + v36);
        *uint64_t v39 = (((268439553
                              * (unint64_t)(1023
                                                 * ((1664 * v47 + 134234112 + 19024 * v48 + 7371 * v49) >> 15)
                                                 + 0x7FFF)) >> 32) >> 12 << v50) | *v39 & ~(1023 << v50);
        if (v35)
        {
          long long v56 = (unsigned __int16 *)(v34 + v31 - 8);
          double v54 = v33 - 3;
          unint64_t v55 = v33 - 2;
          uint64_t v51 = *(unsigned __int16 *)(v34 + v31);
          uint64_t v52 = *(unsigned __int16 *)(v34 + v31 + 2);
          uint64_t v53 = *(unsigned __int16 *)(v34 + v31 + 4);
        }
        else
        {
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          double v54 = (unsigned __int16 *)(v34 + v31 + 2);
          unint64_t v55 = (unsigned __int16 *)(v34 + v31 + 4);
          long long v56 = v33;
        }
        uint64_t v57 = *v55;
        uint64_t v58 = *v54;
        uint64_t v59 = *v56;
        if (v35)
        {
          uint64_t v62 = v43 + v47 + v57;
          uint64_t v63 = v41 + v49 + v51 + v59;
          uint64_t v64 = v42 + v48 + v58;
          uint64_t v31 = v191;
          int v60 = (int)(1023
                    * ((0x1FFFFFFFFD79ALL * v52
                      + 14350 * (unint64_t)(v62 + v53)
                      + 0x1FFFFFFFFD79ALL * v64
                      + 0x1FFFFFFFFF05ALL * v63
                      + 0x100000000) >> 17)
                    + 0x7FFF)
              / 0xFFFF;
          LODWORD(v63) = (unint64_t)(2147516417
                                          * (int)(1023
                                                * ((0x1FFFFFFFFFB7FLL * v53
                                                  + 0x1FFFFFFFFCC75 * v52
                                                  + 0x1FFFFFFFFFB7FLL * v62
                                                  + 0x1FFFFFFFFCC75 * v64
                                                  + 14350 * (unint64_t)v63
                                                  + 0x100000000) >> 17)
                                                + 0x7FFF)) >> 32;
          unsigned int v61 = ((int)v63 >> 15) + (v63 >> 31);
        }
        else
        {
          int v60 = 0;
          unsigned int v61 = 0;
        }
        *uint64_t v40 = *v40 & ~(1023 << v50) | (((268439553
                                                      * (unint64_t)(1023
                                                                         * ((1664 * v57
                                                                                         + 134234112
                                                                                         + 19024 * v58
                                                                                         + 7371 * v59) >> 15)
                                                                         + 0x7FFF)) >> 32) >> 12 << v50);
        if (v36 == 2) {
          unsigned int v36 = 0;
        }
        else {
          ++v36;
        }
        if (v35)
        {
          unint64_t v65 = *((unsigned __int8 *)&v195 + v194);
          _DWORD *v24 = *v24 & ~(1023 << v65) | (v60 << v65);
          float64x2_t v66 = (_DWORD *)((char *)v24 + ((v65 >> 2) & 0x3C));
          if (v194 == 2) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = v194 + 1;
          }
          unint64_t v68 = *((unsigned __int8 *)&v195 + v67);
          *float64x2_t v66 = *v66 & ~(1023 << v68) | (v61 << v68);
          unsigned int v24 = (unsigned int *)((char *)v66 + ((v68 >> 2) & 0x3C));
          if (v67 == 2) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = v67 + 1;
          }
          unsigned int v194 = v69;
        }
        v32 += 4;
        uint64_t v38 = &v39[v50 >> 4];
        v33 += 4;
        ++v35;
        v34 += 8;
        uint64_t v37 = &v40[v50 >> 4];
        v29 += 8;
      }
      while (v190 != v35);
      if (v190 >= v184)
      {
        uint64_t v193 = (unsigned __int16 *)(v29 + v31);
        double v126 = (unsigned __int16 *)(v34 + v31);
        unint64_t v72 = v190;
        unint64_t v127 = v183;
      }
      else
      {
        uint64_t v70 = 0;
        unint64_t v163 = v50 >> 2;
        double v164 = v40;
        uint64_t v71 = (v50 >> 2) & 0x3C;
        unint64_t v165 = v39;
        float v180 = (char *)v39 + v71;
        unint64_t v181 = (char *)v40 + v71;
        unint64_t v72 = v190;
        unsigned int v182 = v24;
        do
        {
          uint64_t v192 = v70;
          uint64_t v189 = v31;
          unint64_t v188 = &v181[v70];
          uint64_t v187 = &v180[v70];
          unsigned int v73 = (unsigned __int16 *)(v34 + v31);
          unint64_t v74 = (unsigned __int16 *)(v29 + v31);
          uint64_t v75 = *(unsigned __int16 *)(v29 + v31);
          int v76 = *(unsigned __int16 *)(v29 + v31 + 2);
          uint64_t v77 = *(unsigned __int16 *)(v29 + v31 + 4);
          uint64_t v78 = *(unsigned __int16 *)(v29 + v31 + 8);
          int v79 = *(unsigned __int16 *)(v29 + v31 + 10);
          uint64_t v80 = *(unsigned __int16 *)(v29 + v31 + 12);
          unsigned int v81 = 1023 * ((7371 * v75 + 134234112 + 19024 * v76 + 1664 * v77) >> 15) + 0x7FFF;
          unsigned int v82 = 1023 * ((7371 * v78 + 134234112 + 19024 * v79 + 1664 * v80) >> 15);
          uint64_t v83 = *(unsigned __int16 *)(v34 + v31);
          int v84 = *(unsigned __int16 *)(v34 + v31 + 2);
          uint64_t v85 = *(unsigned __int16 *)(v34 + v31 + 4);
          unsigned int v86 = 1023 * ((7371 * v83 + 134234112 + 19024 * v84 + 1664 * v85) >> 15) + 0x7FFF;
          uint64_t v87 = *(unsigned __int16 *)(v34 + v31 + 8);
          uint64_t v88 = v73[5];
          uint64_t v89 = v73[6];
          uint64_t v90 = v80 + v77 + v85;
          uint64_t v91 = v78 + v75 + v83 + v87;
          int v92 = v79 + v76 + v84;
          LODWORD(v80) = 1023
                       * ((0x1FFFFFFFFD79ALL * v88
                         - 10342 * v92
                         + 0x1FFFFFFFFF05ALL * v91
                         + 14350 * (unint64_t)(v90 + v89)
                         + 0x100000000) >> 17);
          uint64_t v93 = 0x1FFFFFFFFCC75 * v88
              - 13195 * v92
              + 0x1FFFFFFFFFB7FLL * v90
              + 0x1FFFFFFFFFB7FLL * v89
              + 14350 * v91;
          unint64_t v94 = (268439553
               * (unint64_t)(1023 * ((7371 * v87 + 134234112 + 19024 * v88 + 1664 * v89) >> 15)
                                  + 0x7FFF)) >> 34;
          uint64_t v95 = v74[8];
          LODWORD(v90) = v74[9];
          int v96 = v74[10];
          LODWORD(v85) = v80 + 0x7FFF;
          LODWORD(v89) = (((268439553 * (unint64_t)(v82 + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)v81) >> 32) >> 12);
          uint64_t v97 = v74[12];
          LODWORD(v80) = v74[13];
          int v98 = v74[14];
          unsigned int v99 = v85;
          unint64_t v100 = (268439553
                * (unint64_t)(1023 * ((7371 * v97 + 134234112 + 19024 * v80 + 1664 * v98) >> 15)
                                   + 0x7FFF)) >> 44;
          uint64_t v101 = v73[8];
          int v102 = v73[9];
          int v103 = v73[10];
          LODWORD(v87) = v89 | (((268439553
                                              * (unint64_t)(1023
                                                                 * ((7371 * v95
                                                                                 + 134234112
                                                                                 + 19024 * v90
                                                                                 + 1664 * v96) >> 15)
                                                                 + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v104 = v73[12];
          uint64_t v105 = v73[13];
          uint64_t v106 = v73[14];
          LODWORD(v94) = v94 & 0x7FFFC00 | (((268439553 * (unint64_t)v86) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((7371 * v101 + 134234112 + 19024 * v102 + 1664 * v103) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          LODWORD(v85) = 1023 * ((7371 * v104 + 134234112 + 19024 * v105 + 1664 * v106) >> 15);
          int v107 = v98 + v96;
          uint64_t v108 = v97 + v95;
          uint64_t v109 = v101 + v104;
          LODWORD(v101) = 1023 * ((unint64_t)(v93 + 0x100000000) >> 17);
          unsigned int v186 = v108 + v109;
          int v185 = v80 + v90 + v102;
          *(_DWORD *)uint64_t v187 = v87;
          *(_DWORD *)unint64_t v188 = v94;
          uint64_t v110 = v74[16];
          LODWORD(v83) = v74[17];
          uint64_t v111 = v74[18];
          int v112 = (((268439553
                                * (unint64_t)(1023
                                                   * ((7371 * v110 + 134234112 + 19024 * v83 + 1664 * v111) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | v100;
          uint64_t v113 = v74[20];
          LODWORD(v90) = v74[21];
          uint64_t v114 = v74[22];
          uint64_t v115 = v73[16];
          LODWORD(v104) = v73[17];
          uint64_t v116 = v73[18];
          unsigned int v117 = (v99 / 0xFFFF) | (((2147516417u * (unint64_t)(v101 + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00 | (((1023 * ((0x1FFFFFFFFD79ALL * v105 - 10342 * v185 + 0x1FFFFFFFFF05ALL * (v108 + v109) + 14350 * (unint64_t)(v107 + v103 + v106) + 0x100000000) >> 17) + 0x7FFF) / 0xFFFF) << 20);
          int v118 = (_DWORD *)((char *)v182 + v192);
          *int v118 = v117;
          unsigned int v119 = (((268439553
                                * (unint64_t)(1023
                                                   * ((7371 * v115 + 134234112 + 19024 * v104 + 1664 * v116) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v85 + 0x7FFF)) >> 32) >> 12);
          uint64_t v120 = v73[20];
          *((_DWORD *)v187 + 1) = v112 | (((268439553
                                                        * (unint64_t)(1023
                                                                           * ((7371 * v113
                                                                                           + 134234112
                                                                                           + 19024 * v90
                                                                                           + 1664 * v114) >> 15)
                                                                           + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v121 = v73[21];
          uint64_t v122 = v73[22];
          *((_DWORD *)v188 + 1) = v119 | (((268439553
                                                        * (unint64_t)(1023
                                                                           * ((7371 * v120
                                                                                           + 134234112
                                                                                           + 19024 * v121
                                                                                           + 1664 * v122) >> 15)
                                                                           + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v123 = v114 + v111 + v116;
          uint64_t v124 = v113 + v110 + v115 + v120;
          LODWORD(v94) = v90 + v83 + v104;
          v118[1] = ((1023
                    * ((-1153 * (v107 + v103)
                                    - 13195 * v185
                                    + 0x1FFFFFFFFCC75 * v105
                                    + 0x1FFFFFFFFFB7FLL * v106
                                    + 14350 * (unint64_t)v186
                                    + 0x100000000) >> 17)
                    + 0x7FFF)
                   / 0xFFFF) & 0xFFFFF | ((unsigned __int16)((1023
                                                            * ((0x1FFFFFFFFCC75 * v121
                                                                            - 13195 * (int)v94
                                                                            + 0x1FFFFFFFFFB7FLL * v123
                                                                            + 0x1FFFFFFFFFB7FLL * v122
                                                                            + 14350
                                                                            * (unint64_t)v124
                                                                            + 0x100000000) >> 17)
                                                            + 0x7FFF)
                                                           / 0xFFFF) << 20) | (((2147516417u
                                                                                             * (unint64_t)(1023 * ((0x1FFFFFFFFD79ALL * v121 - 10342 * (int)v94 + 0x1FFFFFFFFF05ALL * v124 + 14350 * (unint64_t)(v123 + v122) + 0x100000000) >> 17) + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00;
          v72 += 6;
          uint64_t v70 = v192 + 8;
          uint64_t v31 = v189 + 48;
        }
        while (v72 < v184);
        unsigned int v24 = (_DWORD *)((char *)v182 + v70);
        uint64_t v125 = v163 & 0x3C;
        uint64_t v37 = (unsigned int *)((char *)v164 + v125 + v70);
        uint64_t v38 = (unsigned int *)((char *)v165 + v125 + v70);
        uint64_t v193 = (unsigned __int16 *)(v29 + v31);
        double v126 = (unsigned __int16 *)(v34 + v31);
        unint64_t v127 = v183;
        uint64_t v31 = v191;
      }
      if (v72 < v127)
      {
        uint64_t v128 = 0;
        unsigned int v129 = v162;
        double v130 = v126;
        double v131 = v193;
        do
        {
          if (v72)
          {
            double v137 = &v193[v128 - 4];
            unsigned int v135 = v131 - 3;
            double v136 = v131 - 2;
            uint64_t v132 = v193[v128];
            uint64_t v133 = v193[v128 + 1];
            uint64_t v134 = v193[v128 + 2];
          }
          else
          {
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            uint64_t v134 = 0;
            unsigned int v135 = &v193[v128 + 1];
            double v136 = &v193[v128 + 2];
            double v137 = v131;
          }
          uint64_t v138 = *v136;
          uint64_t v139 = *v135;
          uint64_t v140 = *v137;
          unint64_t v141 = *((unsigned __int8 *)&v195 + v129);
          *uint64_t v38 = (((268439553
                                * (unint64_t)(1023
                                                   * ((1664 * v138 + 134234112 + 19024 * v139 + 7371 * v140) >> 15)
                                                   + 0x7FFF)) >> 32) >> 12 << v141) | *v38 & ~(1023 << v141);
          if (v72)
          {
            uint64_t v147 = &v126[v128 - 4];
            double v145 = v130 - 3;
            int v146 = v130 - 2;
            uint64_t v142 = v126[v128];
            uint64_t v143 = v126[v128 + 1];
            uint64_t v144 = v126[v128 + 2];
          }
          else
          {
            uint64_t v142 = 0;
            uint64_t v143 = 0;
            uint64_t v144 = 0;
            double v145 = &v126[v128 + 1];
            int v146 = &v126[v128 + 2];
            uint64_t v147 = v130;
          }
          uint64_t v148 = *v146;
          uint64_t v149 = *v145;
          uint64_t v150 = *v147;
          if (v72)
          {
            uint64_t v153 = v134 + v138 + v148;
            uint64_t v154 = v132 + v140 + v142 + v150;
            uint64_t v155 = v133 + v139 + v149;
            unsigned int v151 = (1023
                  * ((0x1FFFFFFFFD79ALL * v143
                                  + 14350 * (unint64_t)(v153 + v144)
                                  + 0x1FFFFFFFFD79ALL * v155
                                  + 0x1FFFFFFFFF05ALL * v154
                                  + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
            unsigned int v152 = (1023
                  * ((0x1FFFFFFFFFB7FLL * v144
                                  + 0x1FFFFFFFFCC75 * v143
                                  + 0x1FFFFFFFFFB7FLL * v153
                                  + 0x1FFFFFFFFCC75 * v155
                                  + 14350 * (unint64_t)v154
                                  + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
          }
          else
          {
            unsigned int v151 = 0;
            unsigned int v152 = 0;
          }
          uint64_t v31 = v191;
          *uint64_t v37 = *v37 & ~(1023 << v141) | (((268439553
                                                         * (unint64_t)(1023
                                                                            * ((1664 * v148
                                                                                            + 134234112
                                                                                            + 19024 * v149
                                                                                            + 7371 * v150) >> 15)
                                                                            + 0x7FFF)) >> 32) >> 12 << v141);
          if (v129 == 2) {
            unsigned int v129 = 0;
          }
          else {
            ++v129;
          }
          if (v72)
          {
            unint64_t v156 = *((unsigned __int8 *)&v195 + v194);
            _DWORD *v24 = *v24 & ~(1023 << v156) | (v151 << v156);
            unsigned int v157 = (_DWORD *)((char *)v24 + ((v156 >> 2) & 0x3C));
            if (v194 == 2) {
              unsigned int v158 = 0;
            }
            else {
              unsigned int v158 = v194 + 1;
            }
            unint64_t v159 = *((unsigned __int8 *)&v195 + v158);
            unsigned int *v157 = *v157 & ~(1023 << v159) | (v152 << v159);
            unsigned int v24 = (unsigned int *)((char *)v157 + ((v159 >> 2) & 0x3C));
            if (v158 == 2) {
              unsigned int v160 = 0;
            }
            else {
              unsigned int v160 = v158 + 1;
            }
            unsigned int v194 = v160;
          }
          v131 += 4;
          v38 += v141 >> 4;
          v130 += 4;
          ++v72;
          v128 += 4;
          v37 += v141 >> 4;
        }
        while (v183 != v72);
      }
      unsigned int v32 = &v174[v169];
      unsigned int v33 = &v173[v169];
      unint64_t v25 = v177 + 4 * v168;
      uint64_t v21 = v179 + 1;
      int v26 = &v176[v168];
      uint64_t v34 = v172 + v166;
      uint64_t v29 = v175 + v166;
      unsigned int v24 = &v178[v167];
    }
    while (v179 + 1 != v170);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_p420ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v195 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12) {
    unint64_t v17 = v15 - v12;
  }
  unint64_t v18 = v14 % 6;
  BOOL v19 = v16 >= v18;
  unint64_t v20 = v16 - v18;
  if (!v19) {
    unint64_t v20 = 0;
  }
  unint64_t v183 = v16;
  unint64_t v184 = v20;
  if (v17 >= 2)
  {
    uint64_t v21 = 0;
    unsigned int v171 = v13 % 3;
    unsigned int v162 = v20 % 3;
    unint64_t v22 = 6 * (v13 / 6) - v13 + 6;
    unint64_t v170 = v17 >> 1;
    unint64_t v23 = a8[1];
    unsigned int v24 = (_DWORD *)(a7[1] + v23 * (v12 >> 1) + 4 * (v13 / 3));
    unint64_t v25 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    int v26 = (unsigned int *)(v25 + *a8);
    uint64_t v27 = *a3;
    uint64_t v28 = *a4;
    uint64_t v29 = *a3 + *a4 * v9;
    unint64_t v30 = v22;
    uint64_t v31 = 8 * v10;
    unsigned int v32 = (unsigned __int16 *)(v29 + 8 * v10);
    unsigned int v33 = (unsigned __int16 *)((char *)v32 + v28);
    uint64_t v169 = v28 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v168 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v34 = v27 + v28 + v28 * (v8 + (v8 & 1));
    uint64_t v166 = 2 * v28;
    unint64_t v167 = v23 >> 2;
    unint64_t v190 = v30;
    uint64_t v191 = 8 * v10;
    do
    {
      unsigned int v178 = v24;
      uint64_t v179 = v21;
      uint64_t v35 = 0;
      uint64_t v175 = v29;
      unint64_t v176 = v26;
      uint64_t v172 = v34;
      int32x2_t v173 = v33;
      unsigned int v36 = v171;
      unsigned int v194 = v171;
      uint64_t v37 = v26;
      unint64_t v177 = v25;
      uint64_t v38 = (unsigned int *)v25;
      float64x2_t v174 = v32;
      do
      {
        uint64_t v39 = v38;
        uint64_t v40 = v37;
        if (v35)
        {
          uint64_t v46 = (unsigned __int16 *)(v29 + v31 - 8);
          uint64_t v44 = v32 - 3;
          uint64_t v45 = v32 - 2;
          uint64_t v41 = *(unsigned __int16 *)(v29 + v31);
          uint64_t v42 = *(unsigned __int16 *)(v29 + v31 + 2);
          uint64_t v43 = *(unsigned __int16 *)(v29 + v31 + 4);
        }
        else
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          uint64_t v44 = (unsigned __int16 *)(v29 + v31 + 2);
          uint64_t v45 = (unsigned __int16 *)(v29 + v31 + 4);
          uint64_t v46 = v32;
        }
        uint64_t v47 = *v45;
        uint64_t v48 = *v44;
        uint64_t v49 = *v46;
        unint64_t v50 = *((unsigned __int8 *)&v195 + v36);
        *uint64_t v39 = (((268439553
                              * (unint64_t)(1023
                                                 * ((2032 * v47 + 134234112 + 20127 * v48 + 5983 * v49) >> 15)
                                                 + 0x7FFF)) >> 32) >> 12 << v50) | *v39 & ~(1023 << v50);
        if (v35)
        {
          long long v56 = (unsigned __int16 *)(v34 + v31 - 8);
          double v54 = v33 - 3;
          unint64_t v55 = v33 - 2;
          uint64_t v51 = *(unsigned __int16 *)(v34 + v31);
          uint64_t v52 = *(unsigned __int16 *)(v34 + v31 + 2);
          uint64_t v53 = *(unsigned __int16 *)(v34 + v31 + 4);
        }
        else
        {
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          double v54 = (unsigned __int16 *)(v34 + v31 + 2);
          unint64_t v55 = (unsigned __int16 *)(v34 + v31 + 4);
          long long v56 = v33;
        }
        uint64_t v57 = *v55;
        uint64_t v58 = *v54;
        uint64_t v59 = *v56;
        if (v35)
        {
          uint64_t v62 = v43 + v47 + v57;
          uint64_t v63 = v41 + v49 + v51 + v59;
          uint64_t v64 = v42 + v48 + v58;
          uint64_t v31 = v191;
          int v60 = (int)(1023
                    * ((0x1FFFFFFFFD4ABLL * v52
                      + 14392 * (unint64_t)(v62 + v53)
                      + 0x1FFFFFFFFD4ABLL * v64
                      + 0x1FFFFFFFFF31FLL * v63
                      + 0x100000000) >> 17)
                    + 0x7FFF)
              / 0xFFFF;
          LODWORD(v63) = (unint64_t)(2147516417
                                          * (int)(1023
                                                * ((0x1FFFFFFFFFAD9 * v53
                                                  + 0x1FFFFFFFFCCF0 * v52
                                                  + 0x1FFFFFFFFFAD9 * v62
                                                  + 0x1FFFFFFFFCCF0 * v64
                                                  + 14392 * (unint64_t)v63
                                                  + 0x100000000) >> 17)
                                                + 0x7FFF)) >> 32;
          unsigned int v61 = ((int)v63 >> 15) + (v63 >> 31);
        }
        else
        {
          int v60 = 0;
          unsigned int v61 = 0;
        }
        *uint64_t v40 = *v40 & ~(1023 << v50) | (((268439553
                                                      * (unint64_t)(1023
                                                                         * ((2032 * v57
                                                                                         + 134234112
                                                                                         + 20127 * v58
                                                                                         + 5983 * v59) >> 15)
                                                                         + 0x7FFF)) >> 32) >> 12 << v50);
        if (v36 == 2) {
          unsigned int v36 = 0;
        }
        else {
          ++v36;
        }
        if (v35)
        {
          unint64_t v65 = *((unsigned __int8 *)&v195 + v194);
          _DWORD *v24 = *v24 & ~(1023 << v65) | (v60 << v65);
          float64x2_t v66 = (_DWORD *)((char *)v24 + ((v65 >> 2) & 0x3C));
          if (v194 == 2) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = v194 + 1;
          }
          unint64_t v68 = *((unsigned __int8 *)&v195 + v67);
          *float64x2_t v66 = *v66 & ~(1023 << v68) | (v61 << v68);
          unsigned int v24 = (unsigned int *)((char *)v66 + ((v68 >> 2) & 0x3C));
          if (v67 == 2) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = v67 + 1;
          }
          unsigned int v194 = v69;
        }
        v32 += 4;
        uint64_t v38 = &v39[v50 >> 4];
        v33 += 4;
        ++v35;
        v34 += 8;
        uint64_t v37 = &v40[v50 >> 4];
        v29 += 8;
      }
      while (v190 != v35);
      if (v190 >= v184)
      {
        uint64_t v193 = (unsigned __int16 *)(v29 + v31);
        double v126 = (unsigned __int16 *)(v34 + v31);
        unint64_t v72 = v190;
        unint64_t v127 = v183;
      }
      else
      {
        uint64_t v70 = 0;
        unint64_t v163 = v50 >> 2;
        double v164 = v40;
        uint64_t v71 = (v50 >> 2) & 0x3C;
        unint64_t v165 = v39;
        float v180 = (char *)v39 + v71;
        unint64_t v181 = (char *)v40 + v71;
        unint64_t v72 = v190;
        unsigned int v182 = v24;
        do
        {
          uint64_t v192 = v70;
          uint64_t v189 = v31;
          unint64_t v188 = &v181[v70];
          uint64_t v187 = &v180[v70];
          unsigned int v73 = (unsigned __int16 *)(v34 + v31);
          unint64_t v74 = (unsigned __int16 *)(v29 + v31);
          uint64_t v75 = *(unsigned __int16 *)(v29 + v31);
          int v76 = *(unsigned __int16 *)(v29 + v31 + 2);
          uint64_t v77 = *(unsigned __int16 *)(v29 + v31 + 4);
          uint64_t v78 = *(unsigned __int16 *)(v29 + v31 + 8);
          int v79 = *(unsigned __int16 *)(v29 + v31 + 10);
          uint64_t v80 = *(unsigned __int16 *)(v29 + v31 + 12);
          unsigned int v81 = 1023 * ((5983 * v75 + 134234112 + 20127 * v76 + 2032 * v77) >> 15) + 0x7FFF;
          unsigned int v82 = 1023 * ((5983 * v78 + 134234112 + 20127 * v79 + 2032 * v80) >> 15);
          uint64_t v83 = *(unsigned __int16 *)(v34 + v31);
          int v84 = *(unsigned __int16 *)(v34 + v31 + 2);
          uint64_t v85 = *(unsigned __int16 *)(v34 + v31 + 4);
          unsigned int v86 = 1023 * ((5983 * v83 + 134234112 + 20127 * v84 + 2032 * v85) >> 15) + 0x7FFF;
          uint64_t v87 = *(unsigned __int16 *)(v34 + v31 + 8);
          uint64_t v88 = v73[5];
          uint64_t v89 = v73[6];
          uint64_t v90 = v80 + v77 + v85;
          uint64_t v91 = v78 + v75 + v83 + v87;
          int v92 = v79 + v76 + v84;
          LODWORD(v80) = 1023
                       * ((0x1FFFFFFFFD4ABLL * v88
                         - 11093 * v92
                         + 0x1FFFFFFFFF31FLL * v91
                         + 14392 * (unint64_t)(v90 + v89)
                         + 0x100000000) >> 17);
          uint64_t v93 = 0x1FFFFFFFFCCF0 * v88
              - 13072 * v92
              + 0x1FFFFFFFFFAD9 * v90
              + 0x1FFFFFFFFFAD9 * v89
              + 14392 * v91;
          unint64_t v94 = (268439553
               * (unint64_t)(1023 * ((5983 * v87 + 134234112 + 20127 * v88 + 2032 * v89) >> 15)
                                  + 0x7FFF)) >> 34;
          uint64_t v95 = v74[8];
          LODWORD(v90) = v74[9];
          int v96 = v74[10];
          LODWORD(v85) = v80 + 0x7FFF;
          LODWORD(v89) = (((268439553 * (unint64_t)(v82 + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)v81) >> 32) >> 12);
          uint64_t v97 = v74[12];
          LODWORD(v80) = v74[13];
          int v98 = v74[14];
          unsigned int v99 = v85;
          unint64_t v100 = (268439553
                * (unint64_t)(1023 * ((5983 * v97 + 134234112 + 20127 * v80 + 2032 * v98) >> 15)
                                   + 0x7FFF)) >> 44;
          uint64_t v101 = v73[8];
          int v102 = v73[9];
          int v103 = v73[10];
          LODWORD(v87) = v89 | (((268439553
                                              * (unint64_t)(1023
                                                                 * ((5983 * v95
                                                                                 + 134234112
                                                                                 + 20127 * v90
                                                                                 + 2032 * v96) >> 15)
                                                                 + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v104 = v73[12];
          uint64_t v105 = v73[13];
          uint64_t v106 = v73[14];
          LODWORD(v94) = v94 & 0x7FFFC00 | (((268439553 * (unint64_t)v86) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((5983 * v101 + 134234112 + 20127 * v102 + 2032 * v103) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          LODWORD(v85) = 1023 * ((5983 * v104 + 134234112 + 20127 * v105 + 2032 * v106) >> 15);
          int v107 = v98 + v96;
          uint64_t v108 = v97 + v95;
          uint64_t v109 = v101 + v104;
          LODWORD(v101) = 1023 * ((unint64_t)(v93 + 0x100000000) >> 17);
          unsigned int v186 = v108 + v109;
          int v185 = v80 + v90 + v102;
          *(_DWORD *)uint64_t v187 = v87;
          *(_DWORD *)unint64_t v188 = v94;
          uint64_t v110 = v74[16];
          LODWORD(v83) = v74[17];
          uint64_t v111 = v74[18];
          int v112 = (((268439553
                                * (unint64_t)(1023
                                                   * ((5983 * v110 + 134234112 + 20127 * v83 + 2032 * v111) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | v100;
          uint64_t v113 = v74[20];
          LODWORD(v90) = v74[21];
          uint64_t v114 = v74[22];
          uint64_t v115 = v73[16];
          LODWORD(v104) = v73[17];
          uint64_t v116 = v73[18];
          unsigned int v117 = (v99 / 0xFFFF) | (((2147516417u * (unint64_t)(v101 + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00 | (((1023 * ((0x1FFFFFFFFD4ABLL * v105 - 11093 * v185 + 0x1FFFFFFFFF31FLL * (v108 + v109) + 14392 * (unint64_t)(v107 + v103 + v106) + 0x100000000) >> 17) + 0x7FFF) / 0xFFFF) << 20);
          int v118 = (_DWORD *)((char *)v182 + v192);
          *int v118 = v117;
          unsigned int v119 = (((268439553
                                * (unint64_t)(1023
                                                   * ((5983 * v115 + 134234112 + 20127 * v104 + 2032 * v116) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v85 + 0x7FFF)) >> 32) >> 12);
          uint64_t v120 = v73[20];
          *((_DWORD *)v187 + 1) = v112 | (((268439553
                                                        * (unint64_t)(1023
                                                                           * ((5983 * v113
                                                                                           + 134234112
                                                                                           + 20127 * v90
                                                                                           + 2032 * v114) >> 15)
                                                                           + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v121 = v73[21];
          uint64_t v122 = v73[22];
          *((_DWORD *)v188 + 1) = v119 | (((268439553
                                                        * (unint64_t)(1023
                                                                           * ((5983 * v120
                                                                                           + 134234112
                                                                                           + 20127 * v121
                                                                                           + 2032 * v122) >> 15)
                                                                           + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v123 = v114 + v111 + v116;
          uint64_t v124 = v113 + v110 + v115 + v120;
          LODWORD(v94) = v90 + v83 + v104;
          v118[1] = ((1023
                    * ((-1319 * (v107 + v103)
                                    - 13072 * v185
                                    + 0x1FFFFFFFFCCF0 * v105
                                    + 0x1FFFFFFFFFAD9 * v106
                                    + 14392 * (unint64_t)v186
                                    + 0x100000000) >> 17)
                    + 0x7FFF)
                   / 0xFFFF) & 0xFFFFF | ((unsigned __int16)((1023
                                                            * ((0x1FFFFFFFFCCF0 * v121
                                                                            - 13072 * (int)v94
                                                                            + 0x1FFFFFFFFFAD9 * v123
                                                                            + 0x1FFFFFFFFFAD9 * v122
                                                                            + 14392
                                                                            * (unint64_t)v124
                                                                            + 0x100000000) >> 17)
                                                            + 0x7FFF)
                                                           / 0xFFFF) << 20) | (((2147516417u
                                                                                             * (unint64_t)(1023 * ((0x1FFFFFFFFD4ABLL * v121 - 11093 * (int)v94 + 0x1FFFFFFFFF31FLL * v124 + 14392 * (unint64_t)(v123 + v122) + 0x100000000) >> 17) + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00;
          v72 += 6;
          uint64_t v70 = v192 + 8;
          uint64_t v31 = v189 + 48;
        }
        while (v72 < v184);
        unsigned int v24 = (_DWORD *)((char *)v182 + v70);
        uint64_t v125 = v163 & 0x3C;
        uint64_t v37 = (unsigned int *)((char *)v164 + v125 + v70);
        uint64_t v38 = (unsigned int *)((char *)v165 + v125 + v70);
        uint64_t v193 = (unsigned __int16 *)(v29 + v31);
        double v126 = (unsigned __int16 *)(v34 + v31);
        unint64_t v127 = v183;
        uint64_t v31 = v191;
      }
      if (v72 < v127)
      {
        uint64_t v128 = 0;
        unsigned int v129 = v162;
        double v130 = v126;
        double v131 = v193;
        do
        {
          if (v72)
          {
            double v137 = &v193[v128 - 4];
            unsigned int v135 = v131 - 3;
            double v136 = v131 - 2;
            uint64_t v132 = v193[v128];
            uint64_t v133 = v193[v128 + 1];
            uint64_t v134 = v193[v128 + 2];
          }
          else
          {
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            uint64_t v134 = 0;
            unsigned int v135 = &v193[v128 + 1];
            double v136 = &v193[v128 + 2];
            double v137 = v131;
          }
          uint64_t v138 = *v136;
          uint64_t v139 = *v135;
          uint64_t v140 = *v137;
          unint64_t v141 = *((unsigned __int8 *)&v195 + v129);
          *uint64_t v38 = (((268439553
                                * (unint64_t)(1023
                                                   * ((2032 * v138 + 134234112 + 20127 * v139 + 5983 * v140) >> 15)
                                                   + 0x7FFF)) >> 32) >> 12 << v141) | *v38 & ~(1023 << v141);
          if (v72)
          {
            uint64_t v147 = &v126[v128 - 4];
            double v145 = v130 - 3;
            int v146 = v130 - 2;
            uint64_t v142 = v126[v128];
            uint64_t v143 = v126[v128 + 1];
            uint64_t v144 = v126[v128 + 2];
          }
          else
          {
            uint64_t v142 = 0;
            uint64_t v143 = 0;
            uint64_t v144 = 0;
            double v145 = &v126[v128 + 1];
            int v146 = &v126[v128 + 2];
            uint64_t v147 = v130;
          }
          uint64_t v148 = *v146;
          uint64_t v149 = *v145;
          uint64_t v150 = *v147;
          if (v72)
          {
            uint64_t v153 = v134 + v138 + v148;
            uint64_t v154 = v132 + v140 + v142 + v150;
            uint64_t v155 = v133 + v139 + v149;
            unsigned int v151 = (1023
                  * ((0x1FFFFFFFFD4ABLL * v143
                                  + 14392 * (unint64_t)(v153 + v144)
                                  + 0x1FFFFFFFFD4ABLL * v155
                                  + 0x1FFFFFFFFF31FLL * v154
                                  + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
            unsigned int v152 = (1023
                  * ((0x1FFFFFFFFFAD9 * v144
                                  + 0x1FFFFFFFFCCF0 * v143
                                  + 0x1FFFFFFFFFAD9 * v153
                                  + 0x1FFFFFFFFCCF0 * v155
                                  + 14392 * (unint64_t)v154
                                  + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
          }
          else
          {
            unsigned int v151 = 0;
            unsigned int v152 = 0;
          }
          uint64_t v31 = v191;
          *uint64_t v37 = *v37 & ~(1023 << v141) | (((268439553
                                                         * (unint64_t)(1023
                                                                            * ((2032 * v148
                                                                                            + 134234112
                                                                                            + 20127 * v149
                                                                                            + 5983 * v150) >> 15)
                                                                            + 0x7FFF)) >> 32) >> 12 << v141);
          if (v129 == 2) {
            unsigned int v129 = 0;
          }
          else {
            ++v129;
          }
          if (v72)
          {
            unint64_t v156 = *((unsigned __int8 *)&v195 + v194);
            _DWORD *v24 = *v24 & ~(1023 << v156) | (v151 << v156);
            unsigned int v157 = (_DWORD *)((char *)v24 + ((v156 >> 2) & 0x3C));
            if (v194 == 2) {
              unsigned int v158 = 0;
            }
            else {
              unsigned int v158 = v194 + 1;
            }
            unint64_t v159 = *((unsigned __int8 *)&v195 + v158);
            unsigned int *v157 = *v157 & ~(1023 << v159) | (v152 << v159);
            unsigned int v24 = (unsigned int *)((char *)v157 + ((v159 >> 2) & 0x3C));
            if (v158 == 2) {
              unsigned int v160 = 0;
            }
            else {
              unsigned int v160 = v158 + 1;
            }
            unsigned int v194 = v160;
          }
          v131 += 4;
          v38 += v141 >> 4;
          v130 += 4;
          ++v72;
          v128 += 4;
          v37 += v141 >> 4;
        }
        while (v183 != v72);
      }
      unsigned int v32 = &v174[v169];
      unsigned int v33 = &v173[v169];
      unint64_t v25 = v177 + 4 * v168;
      uint64_t v21 = v179 + 1;
      int v26 = &v176[v168];
      uint64_t v34 = v172 + v166;
      uint64_t v29 = v175 + v166;
      unsigned int v24 = &v178[v167];
    }
    while (v179 + 1 != v170);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_p420ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v195 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12) {
    unint64_t v17 = v15 - v12;
  }
  unint64_t v18 = v14 % 6;
  BOOL v19 = v16 >= v18;
  unint64_t v20 = v16 - v18;
  if (!v19) {
    unint64_t v20 = 0;
  }
  unint64_t v183 = v16;
  unint64_t v184 = v20;
  if (v17 >= 2)
  {
    uint64_t v21 = 0;
    unsigned int v171 = v13 % 3;
    unsigned int v162 = v20 % 3;
    unint64_t v22 = 6 * (v13 / 6) - v13 + 6;
    unint64_t v170 = v17 >> 1;
    unint64_t v23 = a8[1];
    unsigned int v24 = (_DWORD *)(a7[1] + v23 * (v12 >> 1) + 4 * (v13 / 3));
    unint64_t v25 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    int v26 = (unsigned int *)(v25 + *a8);
    uint64_t v27 = *a3;
    uint64_t v28 = *a4;
    uint64_t v29 = *a3 + *a4 * v9;
    unint64_t v30 = v22;
    uint64_t v31 = 8 * v10;
    unsigned int v32 = (unsigned __int16 *)(v29 + 8 * v10);
    unsigned int v33 = (unsigned __int16 *)((char *)v32 + v28);
    uint64_t v169 = v28 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v168 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v34 = v27 + v28 + v28 * (v8 + (v8 & 1));
    uint64_t v166 = 2 * v28;
    unint64_t v167 = v23 >> 2;
    unint64_t v190 = v30;
    uint64_t v191 = 8 * v10;
    do
    {
      unsigned int v178 = v24;
      uint64_t v179 = v21;
      uint64_t v35 = 0;
      uint64_t v175 = v29;
      unint64_t v176 = v26;
      uint64_t v172 = v34;
      int32x2_t v173 = v33;
      unsigned int v36 = v171;
      unsigned int v194 = v171;
      uint64_t v37 = v26;
      unint64_t v177 = v25;
      uint64_t v38 = (unsigned int *)v25;
      float64x2_t v174 = v32;
      do
      {
        uint64_t v39 = v38;
        uint64_t v40 = v37;
        if (v35)
        {
          uint64_t v46 = (unsigned __int16 *)(v29 + v31 - 8);
          uint64_t v44 = v32 - 3;
          uint64_t v45 = v32 - 2;
          uint64_t v41 = *(unsigned __int16 *)(v29 + v31);
          uint64_t v42 = *(unsigned __int16 *)(v29 + v31 + 2);
          uint64_t v43 = *(unsigned __int16 *)(v29 + v31 + 4);
        }
        else
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          uint64_t v44 = (unsigned __int16 *)(v29 + v31 + 2);
          uint64_t v45 = (unsigned __int16 *)(v29 + v31 + 4);
          uint64_t v46 = v32;
        }
        uint64_t v47 = *v45;
        uint64_t v48 = *v44;
        uint64_t v49 = *v46;
        unint64_t v50 = *((unsigned __int8 *)&v195 + v36);
        *uint64_t v39 = (((268439553
                              * (unint64_t)(1023
                                                 * ((3208 * v47 + 134234112 + 16519 * v48 + 8414 * v49) >> 15)
                                                 + 0x7FFF)) >> 32) >> 12 << v50) | *v39 & ~(1023 << v50);
        if (v35)
        {
          long long v56 = (unsigned __int16 *)(v34 + v31 - 8);
          double v54 = v33 - 3;
          unint64_t v55 = v33 - 2;
          uint64_t v51 = *(unsigned __int16 *)(v34 + v31);
          uint64_t v52 = *(unsigned __int16 *)(v34 + v31 + 2);
          uint64_t v53 = *(unsigned __int16 *)(v34 + v31 + 4);
        }
        else
        {
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          double v54 = (unsigned __int16 *)(v34 + v31 + 2);
          unint64_t v55 = (unsigned __int16 *)(v34 + v31 + 4);
          long long v56 = v33;
        }
        uint64_t v57 = *v55;
        uint64_t v58 = *v54;
        uint64_t v59 = *v56;
        if (v35)
        {
          uint64_t v62 = v43 + v47 + v57;
          uint64_t v63 = v41 + v49 + v51 + v59;
          uint64_t v64 = v42 + v48 + v58;
          uint64_t v31 = v191;
          int v60 = (int)(1023
                    * ((0x1FFFFFFFFDAC2 * v52
                      + 14392 * (unint64_t)(v62 + v53)
                      + 0x1FFFFFFFFDAC2 * v64
                      + 0x1FFFFFFFFED08 * v63
                      + 0x100000000) >> 17)
                    + 0x7FFF)
              / 0xFFFF;
          LODWORD(v63) = (unint64_t)(2147516417
                                          * (int)(1023
                                                * ((0x1FFFFFFFFF6DCLL * v53
                                                  + 0x1FFFFFFFFD0EDLL * v52
                                                  + 0x1FFFFFFFFF6DCLL * v62
                                                  + 0x1FFFFFFFFD0EDLL * v64
                                                  + 14392 * (unint64_t)v63
                                                  + 0x100000000) >> 17)
                                                + 0x7FFF)) >> 32;
          unsigned int v61 = ((int)v63 >> 15) + (v63 >> 31);
        }
        else
        {
          int v60 = 0;
          unsigned int v61 = 0;
        }
        *uint64_t v40 = *v40 & ~(1023 << v50) | (((268439553
                                                      * (unint64_t)(1023
                                                                         * ((3208 * v57
                                                                                         + 134234112
                                                                                         + 16519 * v58
                                                                                         + 8414 * v59) >> 15)
                                                                         + 0x7FFF)) >> 32) >> 12 << v50);
        if (v36 == 2) {
          unsigned int v36 = 0;
        }
        else {
          ++v36;
        }
        if (v35)
        {
          unint64_t v65 = *((unsigned __int8 *)&v195 + v194);
          _DWORD *v24 = *v24 & ~(1023 << v65) | (v60 << v65);
          float64x2_t v66 = (_DWORD *)((char *)v24 + ((v65 >> 2) & 0x3C));
          if (v194 == 2) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = v194 + 1;
          }
          unint64_t v68 = *((unsigned __int8 *)&v195 + v67);
          *float64x2_t v66 = *v66 & ~(1023 << v68) | (v61 << v68);
          unsigned int v24 = (unsigned int *)((char *)v66 + ((v68 >> 2) & 0x3C));
          if (v67 == 2) {
            unsigned int v69 = 0;
          }
          else {
            unsigned int v69 = v67 + 1;
          }
          unsigned int v194 = v69;
        }
        v32 += 4;
        uint64_t v38 = &v39[v50 >> 4];
        v33 += 4;
        ++v35;
        v34 += 8;
        uint64_t v37 = &v40[v50 >> 4];
        v29 += 8;
      }
      while (v190 != v35);
      if (v190 >= v184)
      {
        uint64_t v193 = (unsigned __int16 *)(v29 + v31);
        double v126 = (unsigned __int16 *)(v34 + v31);
        unint64_t v72 = v190;
        unint64_t v127 = v183;
      }
      else
      {
        uint64_t v70 = 0;
        unint64_t v163 = v50 >> 2;
        double v164 = v40;
        uint64_t v71 = (v50 >> 2) & 0x3C;
        unint64_t v165 = v39;
        float v180 = (char *)v39 + v71;
        unint64_t v181 = (char *)v40 + v71;
        unint64_t v72 = v190;
        unsigned int v182 = v24;
        do
        {
          uint64_t v192 = v70;
          uint64_t v189 = v31;
          unint64_t v188 = &v181[v70];
          uint64_t v187 = &v180[v70];
          unsigned int v73 = (unsigned __int16 *)(v34 + v31);
          unint64_t v74 = (unsigned __int16 *)(v29 + v31);
          uint64_t v75 = *(unsigned __int16 *)(v29 + v31);
          int v76 = *(unsigned __int16 *)(v29 + v31 + 2);
          uint64_t v77 = *(unsigned __int16 *)(v29 + v31 + 4);
          uint64_t v78 = *(unsigned __int16 *)(v29 + v31 + 8);
          int v79 = *(unsigned __int16 *)(v29 + v31 + 10);
          uint64_t v80 = *(unsigned __int16 *)(v29 + v31 + 12);
          unsigned int v81 = 1023 * ((8414 * v75 + 134234112 + 16519 * v76 + 3208 * v77) >> 15) + 0x7FFF;
          unsigned int v82 = 1023 * ((8414 * v78 + 134234112 + 16519 * v79 + 3208 * v80) >> 15);
          uint64_t v83 = *(unsigned __int16 *)(v34 + v31);
          int v84 = *(unsigned __int16 *)(v34 + v31 + 2);
          uint64_t v85 = *(unsigned __int16 *)(v34 + v31 + 4);
          unsigned int v86 = 1023 * ((8414 * v83 + 134234112 + 16519 * v84 + 3208 * v85) >> 15) + 0x7FFF;
          uint64_t v87 = *(unsigned __int16 *)(v34 + v31 + 8);
          uint64_t v88 = v73[5];
          uint64_t v89 = v73[6];
          uint64_t v90 = v80 + v77 + v85;
          uint64_t v91 = v78 + v75 + v83 + v87;
          int v92 = v79 + v76 + v84;
          LODWORD(v80) = 1023
                       * ((0x1FFFFFFFFDAC2 * v88
                         - 9534 * v92
                         + 0x1FFFFFFFFED08 * v91
                         + 14392 * (unint64_t)(v90 + v89)
                         + 0x100000000) >> 17);
          uint64_t v93 = 0x1FFFFFFFFD0EDLL * v88
              - 12051 * v92
              + 0x1FFFFFFFFF6DCLL * v90
              + 0x1FFFFFFFFF6DCLL * v89
              + 14392 * v91;
          unint64_t v94 = (268439553
               * (unint64_t)(1023 * ((8414 * v87 + 134234112 + 16519 * v88 + 3208 * v89) >> 15)
                                  + 0x7FFF)) >> 34;
          uint64_t v95 = v74[8];
          LODWORD(v90) = v74[9];
          int v96 = v74[10];
          LODWORD(v85) = v80 + 0x7FFF;
          LODWORD(v89) = (((268439553 * (unint64_t)(v82 + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)v81) >> 32) >> 12);
          uint64_t v97 = v74[12];
          LODWORD(v80) = v74[13];
          int v98 = v74[14];
          unsigned int v99 = v85;
          unint64_t v100 = (268439553
                * (unint64_t)(1023 * ((8414 * v97 + 134234112 + 16519 * v80 + 3208 * v98) >> 15)
                                   + 0x7FFF)) >> 44;
          uint64_t v101 = v73[8];
          int v102 = v73[9];
          int v103 = v73[10];
          LODWORD(v87) = v89 | (((268439553
                                              * (unint64_t)(1023
                                                                 * ((8414 * v95
                                                                                 + 134234112
                                                                                 + 16519 * v90
                                                                                 + 3208 * v96) >> 15)
                                                                 + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v104 = v73[12];
          uint64_t v105 = v73[13];
          uint64_t v106 = v73[14];
          LODWORD(v94) = v94 & 0x7FFFC00 | (((268439553 * (unint64_t)v86) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((8414 * v101 + 134234112 + 16519 * v102 + 3208 * v103) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          LODWORD(v85) = 1023 * ((8414 * v104 + 134234112 + 16519 * v105 + 3208 * v106) >> 15);
          int v107 = v98 + v96;
          uint64_t v108 = v97 + v95;
          uint64_t v109 = v101 + v104;
          LODWORD(v101) = 1023 * ((unint64_t)(v93 + 0x100000000) >> 17);
          unsigned int v186 = v108 + v109;
          int v185 = v80 + v90 + v102;
          *(_DWORD *)uint64_t v187 = v87;
          *(_DWORD *)unint64_t v188 = v94;
          uint64_t v110 = v74[16];
          LODWORD(v83) = v74[17];
          uint64_t v111 = v74[18];
          int v112 = (((268439553
                                * (unint64_t)(1023
                                                   * ((8414 * v110 + 134234112 + 16519 * v83 + 3208 * v111) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | v100;
          uint64_t v113 = v74[20];
          LODWORD(v90) = v74[21];
          uint64_t v114 = v74[22];
          uint64_t v115 = v73[16];
          LODWORD(v104) = v73[17];
          uint64_t v116 = v73[18];
          unsigned int v117 = (v99 / 0xFFFF) | (((2147516417u * (unint64_t)(v101 + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00 | (((1023 * ((0x1FFFFFFFFDAC2 * v105 - 9534 * v185 + 0x1FFFFFFFFED08 * (v108 + v109) + 14392 * (unint64_t)(v107 + v103 + v106) + 0x100000000) >> 17) + 0x7FFF) / 0xFFFF) << 20);
          int v118 = (_DWORD *)((char *)v182 + v192);
          *int v118 = v117;
          unsigned int v119 = (((268439553
                                * (unint64_t)(1023
                                                   * ((8414 * v115 + 134234112 + 16519 * v104 + 3208 * v116) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v85 + 0x7FFF)) >> 32) >> 12);
          uint64_t v120 = v73[20];
          *((_DWORD *)v187 + 1) = v112 | (((268439553
                                                        * (unint64_t)(1023
                                                                           * ((8414 * v113
                                                                                           + 134234112
                                                                                           + 16519 * v90
                                                                                           + 3208 * v114) >> 15)
                                                                           + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v121 = v73[21];
          uint64_t v122 = v73[22];
          *((_DWORD *)v188 + 1) = v119 | (((268439553
                                                        * (unint64_t)(1023
                                                                           * ((8414 * v120
                                                                                           + 134234112
                                                                                           + 16519 * v121
                                                                                           + 3208 * v122) >> 15)
                                                                           + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v123 = v114 + v111 + v116;
          uint64_t v124 = v113 + v110 + v115 + v120;
          LODWORD(v94) = v90 + v83 + v104;
          v118[1] = ((1023
                    * ((-2340 * (v107 + v103)
                                    - 12051 * v185
                                    + 0x1FFFFFFFFD0EDLL * v105
                                    + 0x1FFFFFFFFF6DCLL * v106
                                    + 14392 * (unint64_t)v186
                                    + 0x100000000) >> 17)
                    + 0x7FFF)
                   / 0xFFFF) & 0xFFFFF | ((unsigned __int16)((1023
                                                            * ((0x1FFFFFFFFD0EDLL * v121
                                                                            - 12051 * (int)v94
                                                                            + 0x1FFFFFFFFF6DCLL * v123
                                                                            + 0x1FFFFFFFFF6DCLL * v122
                                                                            + 14392
                                                                            * (unint64_t)v124
                                                                            + 0x100000000) >> 17)
                                                            + 0x7FFF)
                                                           / 0xFFFF) << 20) | (((2147516417u
                                                                                             * (unint64_t)(1023 * ((0x1FFFFFFFFDAC2 * v121 - 9534 * (int)v94 + 0x1FFFFFFFFED08 * v124 + 14392 * (unint64_t)(v123 + v122) + 0x100000000) >> 17) + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00;
          v72 += 6;
          uint64_t v70 = v192 + 8;
          uint64_t v31 = v189 + 48;
        }
        while (v72 < v184);
        unsigned int v24 = (_DWORD *)((char *)v182 + v70);
        uint64_t v125 = v163 & 0x3C;
        uint64_t v37 = (unsigned int *)((char *)v164 + v125 + v70);
        uint64_t v38 = (unsigned int *)((char *)v165 + v125 + v70);
        uint64_t v193 = (unsigned __int16 *)(v29 + v31);
        double v126 = (unsigned __int16 *)(v34 + v31);
        unint64_t v127 = v183;
        uint64_t v31 = v191;
      }
      if (v72 < v127)
      {
        uint64_t v128 = 0;
        unsigned int v129 = v162;
        double v130 = v126;
        double v131 = v193;
        do
        {
          if (v72)
          {
            double v137 = &v193[v128 - 4];
            unsigned int v135 = v131 - 3;
            double v136 = v131 - 2;
            uint64_t v132 = v193[v128];
            uint64_t v133 = v193[v128 + 1];
            uint64_t v134 = v193[v128 + 2];
          }
          else
          {
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            uint64_t v134 = 0;
            unsigned int v135 = &v193[v128 + 1];
            double v136 = &v193[v128 + 2];
            double v137 = v131;
          }
          uint64_t v138 = *v136;
          uint64_t v139 = *v135;
          uint64_t v140 = *v137;
          unint64_t v141 = *((unsigned __int8 *)&v195 + v129);
          *uint64_t v38 = (((268439553
                                * (unint64_t)(1023
                                                   * ((3208 * v138 + 134234112 + 16519 * v139 + 8414 * v140) >> 15)
                                                   + 0x7FFF)) >> 32) >> 12 << v141) | *v38 & ~(1023 << v141);
          if (v72)
          {
            uint64_t v147 = &v126[v128 - 4];
            double v145 = v130 - 3;
            int v146 = v130 - 2;
            uint64_t v142 = v126[v128];
            uint64_t v143 = v126[v128 + 1];
            uint64_t v144 = v126[v128 + 2];
          }
          else
          {
            uint64_t v142 = 0;
            uint64_t v143 = 0;
            uint64_t v144 = 0;
            double v145 = &v126[v128 + 1];
            int v146 = &v126[v128 + 2];
            uint64_t v147 = v130;
          }
          uint64_t v148 = *v146;
          uint64_t v149 = *v145;
          uint64_t v150 = *v147;
          if (v72)
          {
            uint64_t v153 = v134 + v138 + v148;
            uint64_t v154 = v132 + v140 + v142 + v150;
            uint64_t v155 = v133 + v139 + v149;
            unsigned int v151 = (1023
                  * ((0x1FFFFFFFFDAC2 * v143
                                  + 14392 * (unint64_t)(v153 + v144)
                                  + 0x1FFFFFFFFDAC2 * v155
                                  + 0x1FFFFFFFFED08 * v154
                                  + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
            unsigned int v152 = (1023
                  * ((0x1FFFFFFFFF6DCLL * v144
                                  + 0x1FFFFFFFFD0EDLL * v143
                                  + 0x1FFFFFFFFF6DCLL * v153
                                  + 0x1FFFFFFFFD0EDLL * v155
                                  + 14392 * (unint64_t)v154
                                  + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
          }
          else
          {
            unsigned int v151 = 0;
            unsigned int v152 = 0;
          }
          uint64_t v31 = v191;
          *uint64_t v37 = *v37 & ~(1023 << v141) | (((268439553
                                                         * (unint64_t)(1023
                                                                            * ((3208 * v148
                                                                                            + 134234112
                                                                                            + 16519 * v149
                                                                                            + 8414 * v150) >> 15)
                                                                            + 0x7FFF)) >> 32) >> 12 << v141);
          if (v129 == 2) {
            unsigned int v129 = 0;
          }
          else {
            ++v129;
          }
          if (v72)
          {
            unint64_t v156 = *((unsigned __int8 *)&v195 + v194);
            _DWORD *v24 = *v24 & ~(1023 << v156) | (v151 << v156);
            unsigned int v157 = (_DWORD *)((char *)v24 + ((v156 >> 2) & 0x3C));
            if (v194 == 2) {
              unsigned int v158 = 0;
            }
            else {
              unsigned int v158 = v194 + 1;
            }
            unint64_t v159 = *((unsigned __int8 *)&v195 + v158);
            unsigned int *v157 = *v157 & ~(1023 << v159) | (v152 << v159);
            unsigned int v24 = (unsigned int *)((char *)v157 + ((v159 >> 2) & 0x3C));
            if (v158 == 2) {
              unsigned int v160 = 0;
            }
            else {
              unsigned int v160 = v158 + 1;
            }
            unsigned int v194 = v160;
          }
          v131 += 4;
          v38 += v141 >> 4;
          v130 += 4;
          ++v72;
          v128 += 4;
          v37 += v141 >> 4;
        }
        while (v183 != v72);
      }
      unsigned int v32 = &v174[v169];
      unsigned int v33 = &v173[v169];
      unint64_t v25 = v177 + 4 * v168;
      uint64_t v21 = v179 + 1;
      int v26 = &v176[v168];
      uint64_t v34 = v172 + v166;
      uint64_t v29 = v175 + v166;
      unsigned int v24 = &v178[v167];
    }
    while (v179 + 1 != v170);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_pf20ITU2020(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v203 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12) {
    unint64_t v17 = v15 - v12;
  }
  unint64_t v18 = v14 % 6;
  BOOL v19 = v16 >= v18;
  unint64_t v20 = v16 - v18;
  if (!v19) {
    unint64_t v20 = 0;
  }
  unint64_t v194 = v16;
  unint64_t v195 = v20;
  if (v17 >= 2)
  {
    uint64_t v21 = 0;
    unsigned int v22 = v13 % 3;
    unsigned int v173 = v20 % 3;
    unint64_t v23 = 6 * (v13 / 6) - v13 + 6;
    unint64_t v182 = v17 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = (_DWORD *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    unint64_t v26 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    uint64_t v27 = (unsigned int *)(v26 + *a8);
    uint64_t v28 = *a3;
    uint64_t v29 = *a3 + *a4 * v9;
    uint64_t v30 = 8 * v10;
    uint64_t v31 = (unsigned __int16 *)(v29 + 8 * v10);
    unsigned int v32 = (unsigned __int16 *)((char *)v31 + *a4);
    uint64_t v180 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v181 = *a4 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v33 = v28 + *a4 + *a4 * (v8 + (v8 & 1));
    uint64_t v178 = 2 * *a4;
    unint64_t v179 = v24 >> 2;
    unint64_t v193 = v23;
    uint64_t v200 = 8 * v10;
    unsigned int v177 = v22;
    do
    {
      uint64_t v189 = v25;
      uint64_t v190 = v21;
      uint64_t v34 = 0;
      uint64_t v186 = v29;
      uint64_t v187 = v27;
      uint64_t v183 = v33;
      unint64_t v184 = v32;
      unsigned int v202 = v22;
      unsigned int v35 = v22;
      unint64_t v188 = v26;
      unsigned int v36 = (unsigned int *)v26;
      uint64_t v37 = v32;
      int v185 = v31;
      uint64_t v38 = v31;
      do
      {
        uint64_t v39 = v36;
        uint64_t v40 = v27;
        if (v34)
        {
          uint64_t v46 = (unsigned __int16 *)(v29 + v30 - 8);
          uint64_t v44 = v38 - 3;
          uint64_t v45 = v38 - 2;
          uint64_t v41 = *(unsigned __int16 *)(v29 + v30);
          uint64_t v42 = *(unsigned __int16 *)(v29 + v30 + 2);
          uint64_t v43 = *(unsigned __int16 *)(v29 + v30 + 4);
        }
        else
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          uint64_t v44 = (unsigned __int16 *)(v29 + v30 + 2);
          uint64_t v45 = (unsigned __int16 *)(v29 + v30 + 4);
          uint64_t v46 = v38;
        }
        uint64_t v47 = *v45;
        uint64_t v48 = *v44;
        uint64_t v49 = *v46;
        unint64_t v50 = *((unsigned __int8 *)&v203 + v35);
        *uint64_t v39 = (((268439553
                              * (unint64_t)(1023
                                                 * ((22217 * v48 + 1943 * v47 + 8608 * v49 + 0x4000) >> 15)
                                                 + 0x7FFF)) >> 32) >> 12 << v50) | *v39 & ~(1023 << v50);
        uint64_t v51 = v39;
        if (v34)
        {
          uint64_t v57 = (unsigned __int16 *)(v33 + v30 - 8);
          unint64_t v55 = v37 - 3;
          long long v56 = v37 - 2;
          uint64_t v52 = *(unsigned __int16 *)(v33 + v30);
          uint64_t v53 = *(unsigned __int16 *)(v33 + v30 + 2);
          uint64_t v54 = *(unsigned __int16 *)(v33 + v30 + 4);
        }
        else
        {
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v54 = 0;
          unint64_t v55 = (unsigned __int16 *)(v33 + v30 + 2);
          long long v56 = (unsigned __int16 *)(v33 + v30 + 4);
          uint64_t v57 = v37;
        }
        uint64_t v58 = *v56;
        uint64_t v59 = *v55;
        uint64_t v60 = *v57;
        if (v34)
        {
          uint64_t v63 = v43 + v47 + v58;
          uint64_t v64 = v41 + v49 + v52 + v60;
          uint64_t v65 = v42 + v48 + v59;
          uint64_t v30 = v200;
          int v61 = (int)(1023
                    * ((unint64_t)(0x1FFFFFFFFD1E0 * v53
                                        + ((v63 + v54) << 14)
                                        + 0x1FFFFFFFFD1E0 * v65
                                        + 0x1FFFFFFFFEE22 * v64
                                        + 0x100000000) >> 17)
                    + 0x7FFF)
              / 0xFFFF;
          LODWORD(v65) = (unint64_t)(2147516417
                                          * (int)(1023
                                                * ((unint64_t)(0x1FFFFFFFFFADBLL * v54
                                                                    + 0x1FFFFFFFFC527 * v53
                                                                    + 0x1FFFFFFFFFADBLL * v63
                                                                    + 0x1FFFFFFFFC527 * v65
                                                                    + (v64 << 14)
                                                                    + 0x100000000) >> 17)
                                                + 0x7FFF)) >> 32;
          unsigned int v62 = ((int)v65 >> 15) + (v65 >> 31);
        }
        else
        {
          int v61 = 0;
          unsigned int v62 = 0;
        }
        *uint64_t v40 = *v40 & ~(1023 << v50) | (((268439553
                                                      * (unint64_t)(1023
                                                                         * ((22217 * v59
                                                                                         + 1943 * v58
                                                                                         + 8608 * v60
                                                                                         + 0x4000) >> 15)
                                                                         + 0x7FFF)) >> 32) >> 12 << v50);
        if (v35 == 2) {
          unsigned int v35 = 0;
        }
        else {
          ++v35;
        }
        if (v34)
        {
          unint64_t v66 = *((unsigned __int8 *)&v203 + v202);
          *unint64_t v25 = *v25 & ~(1023 << v66) | (v61 << v66);
          unsigned int v67 = (_DWORD *)((char *)v25 + ((v66 >> 2) & 0x3C));
          if (v202 == 2) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = v202 + 1;
          }
          unint64_t v69 = *((unsigned __int8 *)&v203 + v68);
          *unsigned int v67 = *v67 & ~(1023 << v69) | (v62 << v69);
          unint64_t v25 = (unsigned int *)((char *)v67 + ((v69 >> 2) & 0x3C));
          if (v68 == 2) {
            unsigned int v70 = 0;
          }
          else {
            unsigned int v70 = v68 + 1;
          }
          unsigned int v202 = v70;
        }
        v38 += 4;
        unsigned int v36 = &v51[v50 >> 4];
        v37 += 4;
        ++v34;
        v33 += 8;
        uint64_t v27 = &v40[v50 >> 4];
        v29 += 8;
      }
      while (v23 != v34);
      if (v23 >= v195)
      {
        double v136 = (unsigned __int16 *)(v29 + v30);
        double v137 = (unsigned __int16 *)(v33 + v30);
        unint64_t v72 = v23;
        unint64_t v138 = v194;
        unsigned int v22 = v177;
      }
      else
      {
        unint64_t v201 = 0;
        unint64_t v174 = v50 >> 2;
        uint64_t v175 = v40;
        uint64_t v71 = (v50 >> 2) & 0x3C;
        unint64_t v176 = v51;
        uint64_t v191 = (char *)v51 + v71;
        uint64_t v192 = (char *)v40 + v71;
        unint64_t v72 = v23;
        do
        {
          uint64_t v199 = v30;
          unsigned int v73 = (unsigned __int16 *)(v33 + v30);
          unint64_t v74 = (unsigned __int16 *)(v29 + v30);
          uint64_t v75 = *(unsigned __int16 *)(v29 + v30);
          int v76 = *(unsigned __int16 *)(v29 + v30 + 2);
          uint64_t v77 = *(unsigned __int16 *)(v29 + v30 + 4);
          uint64_t v78 = *(unsigned __int16 *)(v29 + v30 + 8);
          int v79 = *(unsigned __int16 *)(v29 + v30 + 10);
          uint64_t v80 = *(unsigned __int16 *)(v29 + v30 + 12);
          uint64_t v81 = *(unsigned __int16 *)(v33 + v30);
          int v82 = *(unsigned __int16 *)(v33 + v30 + 2);
          uint64_t v83 = *(unsigned __int16 *)(v33 + v30 + 4);
          unsigned int v84 = 1023 * ((22217 * v76 + 8608 * v75 + 1943 * v77 + 0x4000) >> 15);
          uint64_t v85 = *(unsigned __int16 *)(v33 + v30 + 8);
          uint64_t v86 = *(unsigned __int16 *)(v33 + v30 + 10);
          uint64_t v87 = *(unsigned __int16 *)(v33 + v30 + 12);
          unsigned int v196 = 1023 * ((22217 * v86 + 8608 * v85 + 1943 * v87 + 0x4000) >> 15);
          unsigned int v197 = 1023 * ((22217 * v82 + 8608 * v81 + 1943 * v83 + 0x4000) >> 15);
          uint64_t v88 = v80 + v77 + v83;
          uint64_t v89 = v78 + v75;
          LODWORD(v78) = 1023 * ((22217 * v79 + 8608 * v78 + 1943 * v80 + 0x4000) >> 15) + 0x7FFF;
          uint64_t v90 = v89 + v81 + v85;
          int v91 = v79 + v76 + v82;
          unint64_t v92 = 268439553 * (v84 + 0x7FFF);
          unint64_t v93 = (unint64_t)(0x1FFFFFFFFD1E0 * v86
                                 - 11808 * v91
                                 + 0x1FFFFFFFFEE22 * v90
                                 + ((v88 + v87) << 14)
                                 + 0x100000000) >> 17;
          uint64_t v94 = 0x1FFFFFFFFC527 * v86 - 15065 * v91 + 0x1FFFFFFFFFADBLL * v88 + 0x1FFFFFFFFFADBLL * v87;
          int v95 = 1023 * v93;
          unint64_t v96 = v94 + (v90 << 14) + 0x100000000;
          uint64_t v97 = v74[8];
          LODWORD(v93) = v74[9];
          uint64_t v98 = v74[10];
          unint64_t v99 = v92 >> 44;
          uint64_t v100 = v74[12];
          LODWORD(v87) = v74[13];
          uint64_t v101 = v74[14];
          unsigned int v102 = 1023 * ((22217 * v87 + 8608 * v100 + 1943 * v101 + 0x4000) >> 15);
          uint64_t v103 = v73[8];
          int v104 = v73[9];
          uint64_t v105 = v73[10];
          int v106 = (((268439553 * (unint64_t)v78) >> 32) >> 2) & 0x7FFFC00 | v99;
          unsigned int v107 = 1023 * ((22217 * v104 + 8608 * v103 + 1943 * v105 + 0x4000) >> 15);
          uint64_t v108 = v73[12];
          uint64_t v109 = v73[13];
          int v110 = 1023 * (v96 >> 17);
          uint64_t v111 = v73[14];
          unsigned int v112 = 1023 * ((22217 * v109 + 8608 * v108 + 1943 * v111 + 0x4000) >> 15);
          uint64_t v198 = v101 + v98 + v105;
          uint64_t v113 = &v192[v201];
          uint64_t v114 = (unsigned int *)&v191[v201];
          unsigned int v115 = v95 + 0x7FFF;
          unsigned int v116 = ((268439553 * (unint64_t)(v107 + 0x7FFF)) >> 32) >> 12;
          unsigned int v117 = v110 + 0x7FFF;
          uint64_t v118 = v100 + v97 + v103 + v108;
          int v119 = v87 + v93 + v104;
          unsigned int v120 = v106 | (((268439553
                                       * (unint64_t)(1023
                                                          * ((22217 * v93
                                                                          + 8608 * v97
                                                                          + 1943 * v98
                                                                          + 0x4000) >> 15)
                                                          + 0x7FFF)) >> 32) >> 12 << 20);
          LODWORD(v108) = (((268439553 * (unint64_t)(v196 + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v197 + 0x7FFF)) >> 32) >> 12) | (v116 << 20);
          uint64_t v121 = v74[16];
          LODWORD(v86) = v74[17];
          uint64_t v122 = v74[18];
          *uint64_t v114 = v120;
          *(_DWORD *)uint64_t v113 = v108;
          uint64_t v123 = v74[20];
          LODWORD(v97) = v74[21];
          uint64_t v124 = v74[22];
          unsigned int v125 = (((268439553
                                * (unint64_t)(1023
                                                   * ((22217 * v86 + 8608 * v121 + 1943 * v122 + 0x4000) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v102 + 0x7FFF)) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((22217 * v97 + 8608 * v123 + 1943 * v124 + 0x4000) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v126 = v73[16];
          int v127 = v73[17];
          uint64_t v128 = v73[18];
          unsigned int v129 = &v25[v201 / 4];
          unsigned int *v129 = (v115 / 0xFFFF) | (((2147516417u * (unint64_t)v117) >> 32) >> 5) & 0x7FFFC00 | (((1023 * ((unint64_t)(0x1FFFFFFFFD1E0 * v109 - 11808 * v119 + 0x1FFFFFFFFEE22 * v118 + ((v198 + v111) << 14) + 0x100000000) >> 17) + 0x7FFF) / 0xFFFF) << 20);
          uint64_t v130 = v73[20];
          uint64_t v131 = v73[21];
          v114[1] = v125;
          uint64_t v132 = v73[22];
          *((_DWORD *)v113 + 1) = (((268439553
                                                 * (unint64_t)(1023
                                                                    * ((22217 * v127
                                                                                    + 8608 * v126
                                                                                    + 1943 * v128
                                                                                    + 0x4000) >> 15)
                                                                    + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v112 + 0x7FFF)) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((22217 * v131 + 8608 * v130 + 1943 * v132 + 0x4000) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v133 = v124 + v122 + v128;
          uint64_t v134 = v123 + v121 + v126 + v130;
          v129[1] = ((1023
                    * ((unint64_t)(-1317 * (int)v198
                                                      - 15065 * v119
                                                      + 0x1FFFFFFFFC527 * v109
                                                      + 0x1FFFFFFFFFADBLL * v111
                                                      + (v118 << 14)
                                                      + 0x100000000) >> 17)
                    + 0x7FFF)
                   / 0xFFFF) & 0xFFFFF | ((unsigned __int16)((1023
                                                            * ((unint64_t)(0x1FFFFFFFFC527 * v131
                                                                                              - 15065
                                                                                              * ((int)v97
                                                                                               + (int)v86
                                                                                               + v127)
                                                                                              + 0x1FFFFFFFFFADBLL * v133
                                                                                              + 0x1FFFFFFFFFADBLL * v132
                                                                                              + (v134 << 14)
                                                                                              + 0x100000000) >> 17)
                                                            + 0x7FFF)
                                                           / 0xFFFF) << 20) | (((2147516417u
                                                                                             * (unint64_t)(1023 * ((unint64_t)(0x1FFFFFFFFD1E0 * v131 - 11808 * ((int)v97 + (int)v86 + v127) + 0x1FFFFFFFFEE22 * v134 + ((v133 + v132) << 14) + 0x100000000) >> 17) + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00;
          v72 += 6;
          v201 += 8;
          uint64_t v30 = v199 + 48;
        }
        while (v72 < v195);
        unint64_t v23 = v193;
        unint64_t v25 = (_DWORD *)((char *)v25 + v201);
        uint64_t v135 = v174 & 0x3C;
        uint64_t v27 = (unsigned int *)((char *)v175 + v135 + v201);
        unsigned int v36 = (unsigned int *)((char *)v176 + v135 + v201);
        double v136 = (unsigned __int16 *)(v29 + v30);
        double v137 = (unsigned __int16 *)(v33 + v30);
        unint64_t v138 = v194;
        unsigned int v22 = v177;
        uint64_t v30 = v200;
      }
      if (v72 < v138)
      {
        uint64_t v139 = 0;
        unsigned int v140 = v173;
        unint64_t v141 = v137;
        uint64_t v142 = v136;
        do
        {
          if (v72)
          {
            uint64_t v148 = &v136[v139 - 4];
            int v146 = v142 - 3;
            uint64_t v147 = v142 - 2;
            uint64_t v143 = v136[v139];
            uint64_t v144 = v136[v139 + 1];
            uint64_t v145 = v136[v139 + 2];
          }
          else
          {
            uint64_t v143 = 0;
            uint64_t v144 = 0;
            uint64_t v145 = 0;
            int v146 = &v136[v139 + 1];
            uint64_t v147 = &v136[v139 + 2];
            uint64_t v148 = v142;
          }
          uint64_t v149 = *v147;
          uint64_t v150 = *v146;
          uint64_t v151 = *v148;
          unint64_t v152 = *((unsigned __int8 *)&v203 + v140);
          *unsigned int v36 = (((268439553
                                * (unint64_t)(1023
                                                   * ((22217 * v150 + 1943 * v149 + 8608 * v151 + 0x4000) >> 15)
                                                   + 0x7FFF)) >> 32) >> 12 << v152) | *v36 & ~(1023 << v152);
          if (v72)
          {
            unsigned int v158 = &v137[v139 - 4];
            unint64_t v156 = v141 - 3;
            unsigned int v157 = v141 - 2;
            uint64_t v153 = v137[v139];
            uint64_t v154 = v137[v139 + 1];
            uint64_t v155 = v137[v139 + 2];
          }
          else
          {
            uint64_t v153 = 0;
            uint64_t v154 = 0;
            uint64_t v155 = 0;
            unint64_t v156 = &v137[v139 + 1];
            unsigned int v157 = &v137[v139 + 2];
            unsigned int v158 = v141;
          }
          uint64_t v159 = *v157;
          uint64_t v160 = *v156;
          uint64_t v161 = *v158;
          if (v72)
          {
            uint64_t v164 = v145 + v149 + v159;
            uint64_t v165 = v143 + v151 + v153 + v161;
            uint64_t v166 = v144 + v150 + v160;
            unsigned int v162 = (1023
                  * ((unint64_t)(0x1FFFFFFFFD1E0 * v154
                                                    + ((v164 + v155) << 14)
                                                    + 0x1FFFFFFFFD1E0 * v166
                                                    + 0x1FFFFFFFFEE22 * v165
                                                    + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
            unsigned int v163 = (1023
                  * ((unint64_t)(0x1FFFFFFFFFADBLL * v155
                                                    + 0x1FFFFFFFFC527 * v154
                                                    + 0x1FFFFFFFFFADBLL * v164
                                                    + 0x1FFFFFFFFC527 * v166
                                                    + (v165 << 14)
                                                    + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
          }
          else
          {
            unsigned int v162 = 0;
            unsigned int v163 = 0;
          }
          unint64_t v23 = v193;
          uint64_t v30 = v200;
          *uint64_t v27 = *v27 & ~(1023 << v152) | (((268439553
                                                         * (unint64_t)(1023
                                                                            * ((22217 * v160
                                                                                            + 1943 * v159
                                                                                            + 8608 * v161
                                                                                            + 0x4000) >> 15)
                                                                            + 0x7FFF)) >> 32) >> 12 << v152);
          if (v140 == 2) {
            unsigned int v140 = 0;
          }
          else {
            ++v140;
          }
          if (v72)
          {
            unint64_t v167 = *((unsigned __int8 *)&v203 + v202);
            *unint64_t v25 = *v25 & ~(1023 << v167) | (v162 << v167);
            uint64_t v168 = (_DWORD *)((char *)v25 + ((v167 >> 2) & 0x3C));
            if (v202 == 2) {
              unsigned int v169 = 0;
            }
            else {
              unsigned int v169 = v202 + 1;
            }
            unint64_t v170 = *((unsigned __int8 *)&v203 + v169);
            unsigned int *v168 = *v168 & ~(1023 << v170) | (v163 << v170);
            unint64_t v25 = (unsigned int *)((char *)v168 + ((v170 >> 2) & 0x3C));
            if (v169 == 2) {
              unsigned int v171 = 0;
            }
            else {
              unsigned int v171 = v169 + 1;
            }
            unsigned int v202 = v171;
          }
          v142 += 4;
          v36 += v152 >> 4;
          v141 += 4;
          ++v72;
          v139 += 4;
          v27 += v152 >> 4;
        }
        while (v194 != v72);
      }
      uint64_t v31 = &v185[v181];
      unsigned int v32 = &v184[v181];
      unint64_t v26 = v188 + 4 * v180;
      uint64_t v21 = v190 + 1;
      uint64_t v27 = &v187[v180];
      uint64_t v33 = v183 + v178;
      uint64_t v29 = v186 + v178;
      unint64_t v25 = &v189[v179];
    }
    while (v190 + 1 != v182);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_pf20ITU709(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v203 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12) {
    unint64_t v17 = v15 - v12;
  }
  unint64_t v18 = v14 % 6;
  BOOL v19 = v16 >= v18;
  unint64_t v20 = v16 - v18;
  if (!v19) {
    unint64_t v20 = 0;
  }
  unint64_t v194 = v16;
  unint64_t v195 = v20;
  if (v17 >= 2)
  {
    uint64_t v21 = 0;
    unsigned int v22 = v13 % 3;
    unsigned int v173 = v20 % 3;
    unint64_t v23 = 6 * (v13 / 6) - v13 + 6;
    unint64_t v182 = v17 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = (_DWORD *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    unint64_t v26 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    uint64_t v27 = (unsigned int *)(v26 + *a8);
    uint64_t v28 = *a3;
    uint64_t v29 = *a3 + *a4 * v9;
    uint64_t v30 = 8 * v10;
    uint64_t v31 = (unsigned __int16 *)(v29 + 8 * v10);
    unsigned int v32 = (unsigned __int16 *)((char *)v31 + *a4);
    uint64_t v180 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v181 = *a4 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v33 = v28 + *a4 + *a4 * (v8 + (v8 & 1));
    uint64_t v178 = 2 * *a4;
    unint64_t v179 = v24 >> 2;
    unint64_t v193 = v23;
    uint64_t v200 = 8 * v10;
    unsigned int v177 = v22;
    do
    {
      uint64_t v189 = v25;
      uint64_t v190 = v21;
      uint64_t v34 = 0;
      uint64_t v186 = v29;
      uint64_t v187 = v27;
      uint64_t v183 = v33;
      unint64_t v184 = v32;
      unsigned int v202 = v22;
      unsigned int v35 = v22;
      unint64_t v188 = v26;
      unsigned int v36 = (unsigned int *)v26;
      uint64_t v37 = v32;
      int v185 = v31;
      uint64_t v38 = v31;
      do
      {
        uint64_t v39 = v36;
        uint64_t v40 = v27;
        if (v34)
        {
          uint64_t v46 = (unsigned __int16 *)(v29 + v30 - 8);
          uint64_t v44 = v38 - 3;
          uint64_t v45 = v38 - 2;
          uint64_t v41 = *(unsigned __int16 *)(v29 + v30);
          uint64_t v42 = *(unsigned __int16 *)(v29 + v30 + 2);
          uint64_t v43 = *(unsigned __int16 *)(v29 + v30 + 4);
        }
        else
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          uint64_t v44 = (unsigned __int16 *)(v29 + v30 + 2);
          uint64_t v45 = (unsigned __int16 *)(v29 + v30 + 4);
          uint64_t v46 = v38;
        }
        uint64_t v47 = *v45;
        uint64_t v48 = *v44;
        uint64_t v49 = *v46;
        unint64_t v50 = *((unsigned __int8 *)&v203 + v35);
        *uint64_t v39 = (((268439553
                              * (unint64_t)(1023
                                                 * ((23436 * v48 + 2366 * v47 + 6966 * v49 + 0x4000) >> 15)
                                                 + 0x7FFF)) >> 32) >> 12 << v50) | *v39 & ~(1023 << v50);
        uint64_t v51 = v39;
        if (v34)
        {
          uint64_t v57 = (unsigned __int16 *)(v33 + v30 - 8);
          unint64_t v55 = v37 - 3;
          long long v56 = v37 - 2;
          uint64_t v52 = *(unsigned __int16 *)(v33 + v30);
          uint64_t v53 = *(unsigned __int16 *)(v33 + v30 + 2);
          uint64_t v54 = *(unsigned __int16 *)(v33 + v30 + 4);
        }
        else
        {
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v54 = 0;
          unint64_t v55 = (unsigned __int16 *)(v33 + v30 + 2);
          long long v56 = (unsigned __int16 *)(v33 + v30 + 4);
          uint64_t v57 = v37;
        }
        uint64_t v58 = *v56;
        uint64_t v59 = *v55;
        uint64_t v60 = *v57;
        if (v34)
        {
          uint64_t v63 = v43 + v47 + v58;
          uint64_t v64 = v41 + v49 + v52 + v60;
          uint64_t v65 = v42 + v48 + v59;
          uint64_t v30 = v200;
          int v61 = (int)(1023
                    * ((unint64_t)(0x1FFFFFFFFCEABLL * v53
                                        + ((v63 + v54) << 14)
                                        + 0x1FFFFFFFFCEABLL * v65
                                        + 0x1FFFFFFFFF157 * v64
                                        + 0x100000000) >> 17)
                    + 0x7FFF)
              / 0xFFFF;
          LODWORD(v65) = (unint64_t)(2147516417
                                          * (int)(1023
                                                * ((unint64_t)(0x1FFFFFFFFFA23 * v54
                                                                    + 0x1FFFFFFFFC5DFLL * v53
                                                                    + 0x1FFFFFFFFFA23 * v63
                                                                    + 0x1FFFFFFFFC5DFLL * v65
                                                                    + (v64 << 14)
                                                                    + 0x100000000) >> 17)
                                                + 0x7FFF)) >> 32;
          unsigned int v62 = ((int)v65 >> 15) + (v65 >> 31);
        }
        else
        {
          int v61 = 0;
          unsigned int v62 = 0;
        }
        *uint64_t v40 = *v40 & ~(1023 << v50) | (((268439553
                                                      * (unint64_t)(1023
                                                                         * ((23436 * v59
                                                                                         + 2366 * v58
                                                                                         + 6966 * v60
                                                                                         + 0x4000) >> 15)
                                                                         + 0x7FFF)) >> 32) >> 12 << v50);
        if (v35 == 2) {
          unsigned int v35 = 0;
        }
        else {
          ++v35;
        }
        if (v34)
        {
          unint64_t v66 = *((unsigned __int8 *)&v203 + v202);
          *unint64_t v25 = *v25 & ~(1023 << v66) | (v61 << v66);
          unsigned int v67 = (_DWORD *)((char *)v25 + ((v66 >> 2) & 0x3C));
          if (v202 == 2) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = v202 + 1;
          }
          unint64_t v69 = *((unsigned __int8 *)&v203 + v68);
          *unsigned int v67 = *v67 & ~(1023 << v69) | (v62 << v69);
          unint64_t v25 = (unsigned int *)((char *)v67 + ((v69 >> 2) & 0x3C));
          if (v68 == 2) {
            unsigned int v70 = 0;
          }
          else {
            unsigned int v70 = v68 + 1;
          }
          unsigned int v202 = v70;
        }
        v38 += 4;
        unsigned int v36 = &v51[v50 >> 4];
        v37 += 4;
        ++v34;
        v33 += 8;
        uint64_t v27 = &v40[v50 >> 4];
        v29 += 8;
      }
      while (v23 != v34);
      if (v23 >= v195)
      {
        double v136 = (unsigned __int16 *)(v29 + v30);
        double v137 = (unsigned __int16 *)(v33 + v30);
        unint64_t v72 = v23;
        unint64_t v138 = v194;
        unsigned int v22 = v177;
      }
      else
      {
        unint64_t v201 = 0;
        unint64_t v174 = v50 >> 2;
        uint64_t v175 = v40;
        uint64_t v71 = (v50 >> 2) & 0x3C;
        unint64_t v176 = v51;
        uint64_t v191 = (char *)v51 + v71;
        uint64_t v192 = (char *)v40 + v71;
        unint64_t v72 = v23;
        do
        {
          uint64_t v199 = v30;
          unsigned int v73 = (unsigned __int16 *)(v33 + v30);
          unint64_t v74 = (unsigned __int16 *)(v29 + v30);
          uint64_t v75 = *(unsigned __int16 *)(v29 + v30);
          int v76 = *(unsigned __int16 *)(v29 + v30 + 2);
          uint64_t v77 = *(unsigned __int16 *)(v29 + v30 + 4);
          uint64_t v78 = *(unsigned __int16 *)(v29 + v30 + 8);
          int v79 = *(unsigned __int16 *)(v29 + v30 + 10);
          uint64_t v80 = *(unsigned __int16 *)(v29 + v30 + 12);
          uint64_t v81 = *(unsigned __int16 *)(v33 + v30);
          int v82 = *(unsigned __int16 *)(v33 + v30 + 2);
          uint64_t v83 = *(unsigned __int16 *)(v33 + v30 + 4);
          unsigned int v84 = 1023 * ((23436 * v76 + 6966 * v75 + 2366 * v77 + 0x4000) >> 15);
          uint64_t v85 = *(unsigned __int16 *)(v33 + v30 + 8);
          uint64_t v86 = *(unsigned __int16 *)(v33 + v30 + 10);
          uint64_t v87 = *(unsigned __int16 *)(v33 + v30 + 12);
          unsigned int v196 = 1023 * ((23436 * v86 + 6966 * v85 + 2366 * v87 + 0x4000) >> 15);
          unsigned int v197 = 1023 * ((23436 * v82 + 6966 * v81 + 2366 * v83 + 0x4000) >> 15);
          uint64_t v88 = v80 + v77 + v83;
          uint64_t v89 = v78 + v75;
          LODWORD(v78) = 1023 * ((23436 * v79 + 6966 * v78 + 2366 * v80 + 0x4000) >> 15) + 0x7FFF;
          uint64_t v90 = v89 + v81 + v85;
          int v91 = v79 + v76 + v82;
          unint64_t v92 = 268439553 * (v84 + 0x7FFF);
          unint64_t v93 = (unint64_t)(0x1FFFFFFFFCEABLL * v86
                                 - 12629 * v91
                                 + 0x1FFFFFFFFF157 * v90
                                 + ((v88 + v87) << 14)
                                 + 0x100000000) >> 17;
          uint64_t v94 = 0x1FFFFFFFFC5DFLL * v86 - 14881 * v91 + 0x1FFFFFFFFFA23 * v88 + 0x1FFFFFFFFFA23 * v87;
          int v95 = 1023 * v93;
          unint64_t v96 = v94 + (v90 << 14) + 0x100000000;
          uint64_t v97 = v74[8];
          LODWORD(v93) = v74[9];
          uint64_t v98 = v74[10];
          unint64_t v99 = v92 >> 44;
          uint64_t v100 = v74[12];
          LODWORD(v87) = v74[13];
          uint64_t v101 = v74[14];
          unsigned int v102 = 1023 * ((23436 * v87 + 6966 * v100 + 2366 * v101 + 0x4000) >> 15);
          uint64_t v103 = v73[8];
          int v104 = v73[9];
          uint64_t v105 = v73[10];
          int v106 = (((268439553 * (unint64_t)v78) >> 32) >> 2) & 0x7FFFC00 | v99;
          unsigned int v107 = 1023 * ((23436 * v104 + 6966 * v103 + 2366 * v105 + 0x4000) >> 15);
          uint64_t v108 = v73[12];
          uint64_t v109 = v73[13];
          int v110 = 1023 * (v96 >> 17);
          uint64_t v111 = v73[14];
          unsigned int v112 = 1023 * ((23436 * v109 + 6966 * v108 + 2366 * v111 + 0x4000) >> 15);
          uint64_t v198 = v101 + v98 + v105;
          uint64_t v113 = &v192[v201];
          uint64_t v114 = (unsigned int *)&v191[v201];
          unsigned int v115 = v95 + 0x7FFF;
          unsigned int v116 = ((268439553 * (unint64_t)(v107 + 0x7FFF)) >> 32) >> 12;
          unsigned int v117 = v110 + 0x7FFF;
          uint64_t v118 = v100 + v97 + v103 + v108;
          int v119 = v87 + v93 + v104;
          unsigned int v120 = v106 | (((268439553
                                       * (unint64_t)(1023
                                                          * ((23436 * v93
                                                                          + 6966 * v97
                                                                          + 2366 * v98
                                                                          + 0x4000) >> 15)
                                                          + 0x7FFF)) >> 32) >> 12 << 20);
          LODWORD(v108) = (((268439553 * (unint64_t)(v196 + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v197 + 0x7FFF)) >> 32) >> 12) | (v116 << 20);
          uint64_t v121 = v74[16];
          LODWORD(v86) = v74[17];
          uint64_t v122 = v74[18];
          *uint64_t v114 = v120;
          *(_DWORD *)uint64_t v113 = v108;
          uint64_t v123 = v74[20];
          LODWORD(v97) = v74[21];
          uint64_t v124 = v74[22];
          unsigned int v125 = (((268439553
                                * (unint64_t)(1023
                                                   * ((23436 * v86 + 6966 * v121 + 2366 * v122 + 0x4000) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v102 + 0x7FFF)) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((23436 * v97 + 6966 * v123 + 2366 * v124 + 0x4000) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v126 = v73[16];
          int v127 = v73[17];
          uint64_t v128 = v73[18];
          unsigned int v129 = &v25[v201 / 4];
          unsigned int *v129 = (v115 / 0xFFFF) | (((2147516417u * (unint64_t)v117) >> 32) >> 5) & 0x7FFFC00 | (((1023 * ((unint64_t)(0x1FFFFFFFFCEABLL * v109 - 12629 * v119 + 0x1FFFFFFFFF157 * v118 + ((v198 + v111) << 14) + 0x100000000) >> 17) + 0x7FFF) / 0xFFFF) << 20);
          uint64_t v130 = v73[20];
          uint64_t v131 = v73[21];
          v114[1] = v125;
          uint64_t v132 = v73[22];
          *((_DWORD *)v113 + 1) = (((268439553
                                                 * (unint64_t)(1023
                                                                    * ((23436 * v127
                                                                                    + 6966 * v126
                                                                                    + 2366 * v128
                                                                                    + 0x4000) >> 15)
                                                                    + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v112 + 0x7FFF)) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((23436 * v131 + 6966 * v130 + 2366 * v132 + 0x4000) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v133 = v124 + v122 + v128;
          uint64_t v134 = v123 + v121 + v126 + v130;
          v129[1] = ((1023
                    * ((unint64_t)(-1501 * (int)v198
                                                      - 14881 * v119
                                                      + 0x1FFFFFFFFC5DFLL * v109
                                                      + 0x1FFFFFFFFFA23 * v111
                                                      + (v118 << 14)
                                                      + 0x100000000) >> 17)
                    + 0x7FFF)
                   / 0xFFFF) & 0xFFFFF | ((unsigned __int16)((1023
                                                            * ((unint64_t)(0x1FFFFFFFFC5DFLL * v131
                                                                                              - 14881
                                                                                              * ((int)v97
                                                                                               + (int)v86
                                                                                               + v127)
                                                                                              + 0x1FFFFFFFFFA23 * v133
                                                                                              + 0x1FFFFFFFFFA23 * v132
                                                                                              + (v134 << 14)
                                                                                              + 0x100000000) >> 17)
                                                            + 0x7FFF)
                                                           / 0xFFFF) << 20) | (((2147516417u
                                                                                             * (unint64_t)(1023 * ((unint64_t)(0x1FFFFFFFFCEABLL * v131 - 12629 * ((int)v97 + (int)v86 + v127) + 0x1FFFFFFFFF157 * v134 + ((v133 + v132) << 14) + 0x100000000) >> 17) + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00;
          v72 += 6;
          v201 += 8;
          uint64_t v30 = v199 + 48;
        }
        while (v72 < v195);
        unint64_t v23 = v193;
        unint64_t v25 = (_DWORD *)((char *)v25 + v201);
        uint64_t v135 = v174 & 0x3C;
        uint64_t v27 = (unsigned int *)((char *)v175 + v135 + v201);
        unsigned int v36 = (unsigned int *)((char *)v176 + v135 + v201);
        double v136 = (unsigned __int16 *)(v29 + v30);
        double v137 = (unsigned __int16 *)(v33 + v30);
        unint64_t v138 = v194;
        unsigned int v22 = v177;
        uint64_t v30 = v200;
      }
      if (v72 < v138)
      {
        uint64_t v139 = 0;
        unsigned int v140 = v173;
        unint64_t v141 = v137;
        uint64_t v142 = v136;
        do
        {
          if (v72)
          {
            uint64_t v148 = &v136[v139 - 4];
            int v146 = v142 - 3;
            uint64_t v147 = v142 - 2;
            uint64_t v143 = v136[v139];
            uint64_t v144 = v136[v139 + 1];
            uint64_t v145 = v136[v139 + 2];
          }
          else
          {
            uint64_t v143 = 0;
            uint64_t v144 = 0;
            uint64_t v145 = 0;
            int v146 = &v136[v139 + 1];
            uint64_t v147 = &v136[v139 + 2];
            uint64_t v148 = v142;
          }
          uint64_t v149 = *v147;
          uint64_t v150 = *v146;
          uint64_t v151 = *v148;
          unint64_t v152 = *((unsigned __int8 *)&v203 + v140);
          *unsigned int v36 = (((268439553
                                * (unint64_t)(1023
                                                   * ((23436 * v150 + 2366 * v149 + 6966 * v151 + 0x4000) >> 15)
                                                   + 0x7FFF)) >> 32) >> 12 << v152) | *v36 & ~(1023 << v152);
          if (v72)
          {
            unsigned int v158 = &v137[v139 - 4];
            unint64_t v156 = v141 - 3;
            unsigned int v157 = v141 - 2;
            uint64_t v153 = v137[v139];
            uint64_t v154 = v137[v139 + 1];
            uint64_t v155 = v137[v139 + 2];
          }
          else
          {
            uint64_t v153 = 0;
            uint64_t v154 = 0;
            uint64_t v155 = 0;
            unint64_t v156 = &v137[v139 + 1];
            unsigned int v157 = &v137[v139 + 2];
            unsigned int v158 = v141;
          }
          uint64_t v159 = *v157;
          uint64_t v160 = *v156;
          uint64_t v161 = *v158;
          if (v72)
          {
            uint64_t v164 = v145 + v149 + v159;
            uint64_t v165 = v143 + v151 + v153 + v161;
            uint64_t v166 = v144 + v150 + v160;
            unsigned int v162 = (1023
                  * ((unint64_t)(0x1FFFFFFFFCEABLL * v154
                                                    + ((v164 + v155) << 14)
                                                    + 0x1FFFFFFFFCEABLL * v166
                                                    + 0x1FFFFFFFFF157 * v165
                                                    + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
            unsigned int v163 = (1023
                  * ((unint64_t)(0x1FFFFFFFFFA23 * v155
                                                    + 0x1FFFFFFFFC5DFLL * v154
                                                    + 0x1FFFFFFFFFA23 * v164
                                                    + 0x1FFFFFFFFC5DFLL * v166
                                                    + (v165 << 14)
                                                    + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
          }
          else
          {
            unsigned int v162 = 0;
            unsigned int v163 = 0;
          }
          unint64_t v23 = v193;
          uint64_t v30 = v200;
          *uint64_t v27 = *v27 & ~(1023 << v152) | (((268439553
                                                         * (unint64_t)(1023
                                                                            * ((23436 * v160
                                                                                            + 2366 * v159
                                                                                            + 6966 * v161
                                                                                            + 0x4000) >> 15)
                                                                            + 0x7FFF)) >> 32) >> 12 << v152);
          if (v140 == 2) {
            unsigned int v140 = 0;
          }
          else {
            ++v140;
          }
          if (v72)
          {
            unint64_t v167 = *((unsigned __int8 *)&v203 + v202);
            *unint64_t v25 = *v25 & ~(1023 << v167) | (v162 << v167);
            uint64_t v168 = (_DWORD *)((char *)v25 + ((v167 >> 2) & 0x3C));
            if (v202 == 2) {
              unsigned int v169 = 0;
            }
            else {
              unsigned int v169 = v202 + 1;
            }
            unint64_t v170 = *((unsigned __int8 *)&v203 + v169);
            unsigned int *v168 = *v168 & ~(1023 << v170) | (v163 << v170);
            unint64_t v25 = (unsigned int *)((char *)v168 + ((v170 >> 2) & 0x3C));
            if (v169 == 2) {
              unsigned int v171 = 0;
            }
            else {
              unsigned int v171 = v169 + 1;
            }
            unsigned int v202 = v171;
          }
          v142 += 4;
          v36 += v152 >> 4;
          v141 += 4;
          ++v72;
          v139 += 4;
          v27 += v152 >> 4;
        }
        while (v194 != v72);
      }
      uint64_t v31 = &v185[v181];
      unsigned int v32 = &v184[v181];
      unint64_t v26 = v188 + 4 * v180;
      uint64_t v21 = v190 + 1;
      uint64_t v27 = &v187[v180];
      uint64_t v33 = v183 + v178;
      uint64_t v29 = v186 + v178;
      unint64_t v25 = &v189[v179];
    }
    while (v190 + 1 != v182);
  }
  return 0;
}

uint64_t vt_Copy_64RGBA_pf20ITU601(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  int v203 = 1313280;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = (v8 & 1) + v8;
  uint64_t v10 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v11 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  unint64_t v12 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  unint64_t v13 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v14 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v15 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  unint64_t v16 = v14 - v13;
  if ((unint64_t)((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10 < v14 - v13) {
    unint64_t v16 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v10;
  }
  unint64_t v17 = v11 - v9;
  if (v11 - v9 >= v15 - v12) {
    unint64_t v17 = v15 - v12;
  }
  unint64_t v18 = v14 % 6;
  BOOL v19 = v16 >= v18;
  unint64_t v20 = v16 - v18;
  if (!v19) {
    unint64_t v20 = 0;
  }
  unint64_t v194 = v16;
  unint64_t v195 = v20;
  if (v17 >= 2)
  {
    uint64_t v21 = 0;
    unsigned int v22 = v13 % 3;
    unsigned int v173 = v20 % 3;
    unint64_t v23 = 6 * (v13 / 6) - v13 + 6;
    unint64_t v182 = v17 >> 1;
    unint64_t v24 = a8[1];
    unint64_t v25 = (_DWORD *)(a7[1] + v24 * (v12 >> 1) + 4 * (v13 / 3));
    unint64_t v26 = *a7 + *a8 * v12 + 4 * (v13 / 3);
    uint64_t v27 = (unsigned int *)(v26 + *a8);
    uint64_t v28 = *a3;
    uint64_t v29 = *a3 + *a4 * v9;
    uint64_t v30 = 8 * v10;
    uint64_t v31 = (unsigned __int16 *)(v29 + 8 * v10);
    unsigned int v32 = (unsigned __int16 *)((char *)v31 + *a4);
    uint64_t v180 = (*a8 >> 1) & 0x7FFFFFFFFFFFFFFELL;
    uint64_t v181 = *a4 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v33 = v28 + *a4 + *a4 * (v8 + (v8 & 1));
    uint64_t v178 = 2 * *a4;
    unint64_t v179 = v24 >> 2;
    unint64_t v193 = v23;
    uint64_t v200 = 8 * v10;
    unsigned int v177 = v22;
    do
    {
      uint64_t v189 = v25;
      uint64_t v190 = v21;
      uint64_t v34 = 0;
      uint64_t v186 = v29;
      uint64_t v187 = v27;
      uint64_t v183 = v33;
      unint64_t v184 = v32;
      unsigned int v202 = v22;
      unsigned int v35 = v22;
      unint64_t v188 = v26;
      unsigned int v36 = (unsigned int *)v26;
      uint64_t v37 = v32;
      int v185 = v31;
      uint64_t v38 = v31;
      do
      {
        uint64_t v39 = v36;
        uint64_t v40 = v27;
        if (v34)
        {
          uint64_t v46 = (unsigned __int16 *)(v29 + v30 - 8);
          uint64_t v44 = v38 - 3;
          uint64_t v45 = v38 - 2;
          uint64_t v41 = *(unsigned __int16 *)(v29 + v30);
          uint64_t v42 = *(unsigned __int16 *)(v29 + v30 + 2);
          uint64_t v43 = *(unsigned __int16 *)(v29 + v30 + 4);
        }
        else
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          uint64_t v44 = (unsigned __int16 *)(v29 + v30 + 2);
          uint64_t v45 = (unsigned __int16 *)(v29 + v30 + 4);
          uint64_t v46 = v38;
        }
        uint64_t v47 = *v45;
        uint64_t v48 = *v44;
        uint64_t v49 = *v46;
        unint64_t v50 = *((unsigned __int8 *)&v203 + v35);
        *uint64_t v39 = (((268439553
                              * (unint64_t)(1023
                                                 * ((19235 * v48 + 3736 * v47 + 9798 * v49 + 0x4000) >> 15)
                                                 + 0x7FFF)) >> 32) >> 12 << v50) | *v39 & ~(1023 << v50);
        uint64_t v51 = v39;
        if (v34)
        {
          uint64_t v57 = (unsigned __int16 *)(v33 + v30 - 8);
          unint64_t v55 = v37 - 3;
          long long v56 = v37 - 2;
          uint64_t v52 = *(unsigned __int16 *)(v33 + v30);
          uint64_t v53 = *(unsigned __int16 *)(v33 + v30 + 2);
          uint64_t v54 = *(unsigned __int16 *)(v33 + v30 + 4);
        }
        else
        {
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v54 = 0;
          unint64_t v55 = (unsigned __int16 *)(v33 + v30 + 2);
          long long v56 = (unsigned __int16 *)(v33 + v30 + 4);
          uint64_t v57 = v37;
        }
        uint64_t v58 = *v56;
        uint64_t v59 = *v55;
        uint64_t v60 = *v57;
        if (v34)
        {
          uint64_t v63 = v43 + v47 + v58;
          uint64_t v64 = v41 + v49 + v52 + v60;
          uint64_t v65 = v42 + v48 + v59;
          uint64_t v30 = v200;
          int v61 = (int)(1023
                    * ((unint64_t)(0x1FFFFFFFFD59ALL * v53
                                        + ((v63 + v54) << 14)
                                        + 0x1FFFFFFFFD59ALL * v65
                                        + 0x1FFFFFFFFEA68 * v64
                                        + 0x100000000) >> 17)
                    + 0x7FFF)
              / 0xFFFF;
          LODWORD(v65) = (unint64_t)(2147516417
                                          * (int)(1023
                                                * ((unint64_t)(0x1FFFFFFFFF599 * v54
                                                                    + 0x1FFFFFFFFCA69 * v53
                                                                    + 0x1FFFFFFFFF599 * v63
                                                                    + 0x1FFFFFFFFCA69 * v65
                                                                    + (v64 << 14)
                                                                    + 0x100000000) >> 17)
                                                + 0x7FFF)) >> 32;
          unsigned int v62 = ((int)v65 >> 15) + (v65 >> 31);
        }
        else
        {
          int v61 = 0;
          unsigned int v62 = 0;
        }
        *uint64_t v40 = *v40 & ~(1023 << v50) | (((268439553
                                                      * (unint64_t)(1023
                                                                         * ((19235 * v59
                                                                                         + 3736 * v58
                                                                                         + 9798 * v60
                                                                                         + 0x4000) >> 15)
                                                                         + 0x7FFF)) >> 32) >> 12 << v50);
        if (v35 == 2) {
          unsigned int v35 = 0;
        }
        else {
          ++v35;
        }
        if (v34)
        {
          unint64_t v66 = *((unsigned __int8 *)&v203 + v202);
          *unint64_t v25 = *v25 & ~(1023 << v66) | (v61 << v66);
          unsigned int v67 = (_DWORD *)((char *)v25 + ((v66 >> 2) & 0x3C));
          if (v202 == 2) {
            unsigned int v68 = 0;
          }
          else {
            unsigned int v68 = v202 + 1;
          }
          unint64_t v69 = *((unsigned __int8 *)&v203 + v68);
          *unsigned int v67 = *v67 & ~(1023 << v69) | (v62 << v69);
          unint64_t v25 = (unsigned int *)((char *)v67 + ((v69 >> 2) & 0x3C));
          if (v68 == 2) {
            unsigned int v70 = 0;
          }
          else {
            unsigned int v70 = v68 + 1;
          }
          unsigned int v202 = v70;
        }
        v38 += 4;
        unsigned int v36 = &v51[v50 >> 4];
        v37 += 4;
        ++v34;
        v33 += 8;
        uint64_t v27 = &v40[v50 >> 4];
        v29 += 8;
      }
      while (v23 != v34);
      if (v23 >= v195)
      {
        double v136 = (unsigned __int16 *)(v29 + v30);
        double v137 = (unsigned __int16 *)(v33 + v30);
        unint64_t v72 = v23;
        unint64_t v138 = v194;
        unsigned int v22 = v177;
      }
      else
      {
        unint64_t v201 = 0;
        unint64_t v174 = v50 >> 2;
        uint64_t v175 = v40;
        uint64_t v71 = (v50 >> 2) & 0x3C;
        unint64_t v176 = v51;
        uint64_t v191 = (char *)v51 + v71;
        uint64_t v192 = (char *)v40 + v71;
        unint64_t v72 = v23;
        do
        {
          uint64_t v199 = v30;
          unsigned int v73 = (unsigned __int16 *)(v33 + v30);
          unint64_t v74 = (unsigned __int16 *)(v29 + v30);
          uint64_t v75 = *(unsigned __int16 *)(v29 + v30);
          int v76 = *(unsigned __int16 *)(v29 + v30 + 2);
          uint64_t v77 = *(unsigned __int16 *)(v29 + v30 + 4);
          uint64_t v78 = *(unsigned __int16 *)(v29 + v30 + 8);
          int v79 = *(unsigned __int16 *)(v29 + v30 + 10);
          uint64_t v80 = *(unsigned __int16 *)(v29 + v30 + 12);
          uint64_t v81 = *(unsigned __int16 *)(v33 + v30);
          int v82 = *(unsigned __int16 *)(v33 + v30 + 2);
          uint64_t v83 = *(unsigned __int16 *)(v33 + v30 + 4);
          unsigned int v84 = 1023 * ((19235 * v76 + 9798 * v75 + 3736 * v77 + 0x4000) >> 15);
          uint64_t v85 = *(unsigned __int16 *)(v33 + v30 + 8);
          uint64_t v86 = *(unsigned __int16 *)(v33 + v30 + 10);
          uint64_t v87 = *(unsigned __int16 *)(v33 + v30 + 12);
          unsigned int v196 = 1023 * ((19235 * v86 + 9798 * v85 + 3736 * v87 + 0x4000) >> 15);
          unsigned int v197 = 1023 * ((19235 * v82 + 9798 * v81 + 3736 * v83 + 0x4000) >> 15);
          uint64_t v88 = v80 + v77 + v83;
          uint64_t v89 = v78 + v75;
          LODWORD(v78) = 1023 * ((19235 * v79 + 9798 * v78 + 3736 * v80 + 0x4000) >> 15) + 0x7FFF;
          uint64_t v90 = v89 + v81 + v85;
          int v91 = v79 + v76 + v82;
          unint64_t v92 = 268439553 * (v84 + 0x7FFF);
          unint64_t v93 = (unint64_t)(0x1FFFFFFFFD59ALL * v86
                                 - 10854 * v91
                                 + 0x1FFFFFFFFEA68 * v90
                                 + ((v88 + v87) << 14)
                                 + 0x100000000) >> 17;
          uint64_t v94 = 0x1FFFFFFFFCA69 * v86 - 13719 * v91 + 0x1FFFFFFFFF599 * v88 + 0x1FFFFFFFFF599 * v87;
          int v95 = 1023 * v93;
          unint64_t v96 = v94 + (v90 << 14) + 0x100000000;
          uint64_t v97 = v74[8];
          LODWORD(v93) = v74[9];
          uint64_t v98 = v74[10];
          unint64_t v99 = v92 >> 44;
          uint64_t v100 = v74[12];
          LODWORD(v87) = v74[13];
          uint64_t v101 = v74[14];
          unsigned int v102 = 1023 * ((19235 * v87 + 9798 * v100 + 3736 * v101 + 0x4000) >> 15);
          uint64_t v103 = v73[8];
          int v104 = v73[9];
          uint64_t v105 = v73[10];
          int v106 = (((268439553 * (unint64_t)v78) >> 32) >> 2) & 0x7FFFC00 | v99;
          unsigned int v107 = 1023 * ((19235 * v104 + 9798 * v103 + 3736 * v105 + 0x4000) >> 15);
          uint64_t v108 = v73[12];
          uint64_t v109 = v73[13];
          int v110 = 1023 * (v96 >> 17);
          uint64_t v111 = v73[14];
          unsigned int v112 = 1023 * ((19235 * v109 + 9798 * v108 + 3736 * v111 + 0x4000) >> 15);
          uint64_t v198 = v101 + v98 + v105;
          uint64_t v113 = &v192[v201];
          uint64_t v114 = (unsigned int *)&v191[v201];
          unsigned int v115 = v95 + 0x7FFF;
          unsigned int v116 = ((268439553 * (unint64_t)(v107 + 0x7FFF)) >> 32) >> 12;
          unsigned int v117 = v110 + 0x7FFF;
          uint64_t v118 = v100 + v97 + v103 + v108;
          int v119 = v87 + v93 + v104;
          unsigned int v120 = v106 | (((268439553
                                       * (unint64_t)(1023
                                                          * ((19235 * v93
                                                                          + 9798 * v97
                                                                          + 3736 * v98
                                                                          + 0x4000) >> 15)
                                                          + 0x7FFF)) >> 32) >> 12 << 20);
          LODWORD(v108) = (((268439553 * (unint64_t)(v196 + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v197 + 0x7FFF)) >> 32) >> 12) | (v116 << 20);
          uint64_t v121 = v74[16];
          LODWORD(v86) = v74[17];
          uint64_t v122 = v74[18];
          *uint64_t v114 = v120;
          *(_DWORD *)uint64_t v113 = v108;
          uint64_t v123 = v74[20];
          LODWORD(v97) = v74[21];
          uint64_t v124 = v74[22];
          unsigned int v125 = (((268439553
                                * (unint64_t)(1023
                                                   * ((19235 * v86 + 9798 * v121 + 3736 * v122 + 0x4000) >> 15)
                                                   + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v102 + 0x7FFF)) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((19235 * v97 + 9798 * v123 + 3736 * v124 + 0x4000) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v126 = v73[16];
          int v127 = v73[17];
          uint64_t v128 = v73[18];
          unsigned int v129 = &v25[v201 / 4];
          unsigned int *v129 = (v115 / 0xFFFF) | (((2147516417u * (unint64_t)v117) >> 32) >> 5) & 0x7FFFC00 | (((1023 * ((unint64_t)(0x1FFFFFFFFD59ALL * v109 - 10854 * v119 + 0x1FFFFFFFFEA68 * v118 + ((v198 + v111) << 14) + 0x100000000) >> 17) + 0x7FFF) / 0xFFFF) << 20);
          uint64_t v130 = v73[20];
          uint64_t v131 = v73[21];
          v114[1] = v125;
          uint64_t v132 = v73[22];
          *((_DWORD *)v113 + 1) = (((268439553
                                                 * (unint64_t)(1023
                                                                    * ((19235 * v127
                                                                                    + 9798 * v126
                                                                                    + 3736 * v128
                                                                                    + 0x4000) >> 15)
                                                                    + 0x7FFF)) >> 32) >> 2) & 0x7FFFC00 | (((268439553 * (unint64_t)(v112 + 0x7FFF)) >> 32) >> 12) | (((268439553 * (unint64_t)(1023 * ((19235 * v131 + 9798 * v130 + 3736 * v132 + 0x4000) >> 15) + 0x7FFF)) >> 32) >> 12 << 20);
          uint64_t v133 = v124 + v122 + v128;
          uint64_t v134 = v123 + v121 + v126 + v130;
          v129[1] = ((1023
                    * ((unint64_t)(-2663 * (int)v198
                                                      - 13719 * v119
                                                      + 0x1FFFFFFFFCA69 * v109
                                                      + 0x1FFFFFFFFF599 * v111
                                                      + (v118 << 14)
                                                      + 0x100000000) >> 17)
                    + 0x7FFF)
                   / 0xFFFF) & 0xFFFFF | ((unsigned __int16)((1023
                                                            * ((unint64_t)(0x1FFFFFFFFCA69 * v131
                                                                                              - 13719
                                                                                              * ((int)v97
                                                                                               + (int)v86
                                                                                               + v127)
                                                                                              + 0x1FFFFFFFFF599 * v133
                                                                                              + 0x1FFFFFFFFF599 * v132
                                                                                              + (v134 << 14)
                                                                                              + 0x100000000) >> 17)
                                                            + 0x7FFF)
                                                           / 0xFFFF) << 20) | (((2147516417u
                                                                                             * (unint64_t)(1023 * ((unint64_t)(0x1FFFFFFFFD59ALL * v131 - 10854 * ((int)v97 + (int)v86 + v127) + 0x1FFFFFFFFEA68 * v134 + ((v133 + v132) << 14) + 0x100000000) >> 17) + 0x7FFF)) >> 32) >> 5) & 0x7FFFC00;
          v72 += 6;
          v201 += 8;
          uint64_t v30 = v199 + 48;
        }
        while (v72 < v195);
        unint64_t v23 = v193;
        unint64_t v25 = (_DWORD *)((char *)v25 + v201);
        uint64_t v135 = v174 & 0x3C;
        uint64_t v27 = (unsigned int *)((char *)v175 + v135 + v201);
        unsigned int v36 = (unsigned int *)((char *)v176 + v135 + v201);
        double v136 = (unsigned __int16 *)(v29 + v30);
        double v137 = (unsigned __int16 *)(v33 + v30);
        unint64_t v138 = v194;
        unsigned int v22 = v177;
        uint64_t v30 = v200;
      }
      if (v72 < v138)
      {
        uint64_t v139 = 0;
        unsigned int v140 = v173;
        unint64_t v141 = v137;
        uint64_t v142 = v136;
        do
        {
          if (v72)
          {
            uint64_t v148 = &v136[v139 - 4];
            int v146 = v142 - 3;
            uint64_t v147 = v142 - 2;
            uint64_t v143 = v136[v139];
            uint64_t v144 = v136[v139 + 1];
            uint64_t v145 = v136[v139 + 2];
          }
          else
          {
            uint64_t v143 = 0;
            uint64_t v144 = 0;
            uint64_t v145 = 0;
            int v146 = &v136[v139 + 1];
            uint64_t v147 = &v136[v139 + 2];
            uint64_t v148 = v142;
          }
          uint64_t v149 = *v147;
          uint64_t v150 = *v146;
          uint64_t v151 = *v148;
          unint64_t v152 = *((unsigned __int8 *)&v203 + v140);
          *unsigned int v36 = (((268439553
                                * (unint64_t)(1023
                                                   * ((19235 * v150 + 3736 * v149 + 9798 * v151 + 0x4000) >> 15)
                                                   + 0x7FFF)) >> 32) >> 12 << v152) | *v36 & ~(1023 << v152);
          if (v72)
          {
            unsigned int v158 = &v137[v139 - 4];
            unint64_t v156 = v141 - 3;
            unsigned int v157 = v141 - 2;
            uint64_t v153 = v137[v139];
            uint64_t v154 = v137[v139 + 1];
            uint64_t v155 = v137[v139 + 2];
          }
          else
          {
            uint64_t v153 = 0;
            uint64_t v154 = 0;
            uint64_t v155 = 0;
            unint64_t v156 = &v137[v139 + 1];
            unsigned int v157 = &v137[v139 + 2];
            unsigned int v158 = v141;
          }
          uint64_t v159 = *v157;
          uint64_t v160 = *v156;
          uint64_t v161 = *v158;
          if (v72)
          {
            uint64_t v164 = v145 + v149 + v159;
            uint64_t v165 = v143 + v151 + v153 + v161;
            uint64_t v166 = v144 + v150 + v160;
            unsigned int v162 = (1023
                  * ((unint64_t)(0x1FFFFFFFFD59ALL * v154
                                                    + ((v164 + v155) << 14)
                                                    + 0x1FFFFFFFFD59ALL * v166
                                                    + 0x1FFFFFFFFEA68 * v165
                                                    + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
            unsigned int v163 = (1023
                  * ((unint64_t)(0x1FFFFFFFFF599 * v155
                                                    + 0x1FFFFFFFFCA69 * v154
                                                    + 0x1FFFFFFFFF599 * v164
                                                    + 0x1FFFFFFFFCA69 * v166
                                                    + (v165 << 14)
                                                    + 0x100000000) >> 17)
                  + 0x7FFF)
                 / 0xFFFF;
          }
          else
          {
            unsigned int v162 = 0;
            unsigned int v163 = 0;
          }
          unint64_t v23 = v193;
          uint64_t v30 = v200;
          *uint64_t v27 = *v27 & ~(1023 << v152) | (((268439553
                                                         * (unint64_t)(1023
                                                                            * ((19235 * v160
                                                                                            + 3736 * v159
                                                                                            + 9798 * v161
                                                                                            + 0x4000) >> 15)
                                                                            + 0x7FFF)) >> 32) >> 12 << v152);
          if (v140 == 2) {
            unsigned int v140 = 0;
          }
          else {
            ++v140;
          }
          if (v72)
          {
            unint64_t v167 = *((unsigned __int8 *)&v203 + v202);
            *unint64_t v25 = *v25 & ~(1023 << v167) | (v162 << v167);
            uint64_t v168 = (_DWORD *)((char *)v25 + ((v167 >> 2) & 0x3C));
            if (v202 == 2) {
              unsigned int v169 = 0;
            }
            else {
              unsigned int v169 = v202 + 1;
            }
            unint64_t v170 = *((unsigned __int8 *)&v203 + v169);
            unsigned int *v168 = *v168 & ~(1023 << v170) | (v163 << v170);
            unint64_t v25 = (unsigned int *)((char *)v168 + ((v170 >> 2) & 0x3C));
            if (v169 == 2) {
              unsigned int v171 = 0;
            }
            else {
              unsigned int v171 = v169 + 1;
            }
            unsigned int v202 = v171;
          }
          v142 += 4;
          v36 += v152 >> 4;
          v141 += 4;
          ++v72;
          v139 += 4;
          v27 += v152 >> 4;
        }
        while (v194 != v72);
      }
      uint64_t v31 = &v185[v181];
      unsigned int v32 = &v184[v181];
      unint64_t v26 = v188 + 4 * v180;
      uint64_t v21 = v190 + 1;
      uint64_t v27 = &v187[v180];
      uint64_t v33 = v183 + v178;
      uint64_t v29 = v186 + v178;
      unint64_t v25 = &v189[v179];
    }
    while (v190 + 1 != v182);
  }
  return 0;
}

uint64_t vt_Copy_x44p_x444(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (!a1) {
    return 4294954387;
  }
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    uint64_t v10 = *a4;
    uint64_t v11 = *a6;
    unint64_t v12 = (_WORD *)a6[1];
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = v12;
      do
      {
        unsigned int v15 = *(_DWORD *)(v10 + 4 * v13);
        *(_WORD *)(v11 + 2 * v13) = v15 & 0x3FF;
        *uint64_t v14 = (v15 >> 10) & 0x3FF;
        v14[1] = (v15 >> 20) & 0x3FF;
        ++v13;
        v14 += 2;
      }
      while (a1 != v13);
      v10 += v7;
      v11 += v8;
      unint64_t v12 = (_WORD *)((char *)v12 + v9);
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

vImage_Error vt_VImage_Setup_x444_w30r(unint64_t a1, unint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint8_t a6, uint64_t a7, vImage_YpCbCrToARGB **a8, uint64_t (**a9)(), uint64_t a10, void (**a11)(void **a1))
{
  long long v22 = 0uLL;
  int v23 = 0;
  unint64_t v17 = (vImage_YpCbCrToARGB *)malloc_type_malloc(0x130uLL, 0x1080040714FBEC0uLL);
  *(_OWORD *)v17->opaque = 0u;
  *(_OWORD *)&v17->opaque[16] = 0u;
  *(_OWORD *)&v17->opaque[32] = 0u;
  *(_OWORD *)&v17->opaque[48] = 0u;
  *(_OWORD *)&v17->opaque[64] = 0u;
  *(_OWORD *)&v17->opaque[80] = 0u;
  *(_OWORD *)&v17->opaque[96] = 0u;
  *(_OWORD *)&v17->opaque[112] = 0u;
  *(_OWORD *)v17[1].opaque = 0u;
  *(_OWORD *)&v17[1].opaque[16] = 0u;
  *(_OWORD *)&v17[1].opaque[32] = 0u;
  *(_OWORD *)&v17[1].opaque[48] = 0u;
  *(_OWORD *)&v17[1].opaque[64] = 0u;
  *(_OWORD *)&v17[1].opaque[80] = 0u;
  *(_OWORD *)&v17[1].opaque[96] = 0u;
  *(_OWORD *)&v17[1].opaque[112] = 0u;
  *(_OWORD *)v17[2].opaque = 0u;
  *(_OWORD *)&v17[2].opaque[16] = 0u;
  *(_OWORD *)&v17[2].opaque[32] = 0u;
  *(_OWORD *)&pixelRange.Yp_bias = xmmword_193E7D4B0;
  *(_OWORD *)&pixelRange.YpMax = xmmword_193E7D4A0;
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3D0;
      int v20 = 1072585656;
    }
    else if (FigCFEqual())
    {
      long long v22 = xmmword_193E7D3E0;
      int v20 = 1072411609;
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual() && CVYCbCrMatrixGetIntegerCodePointForString(a3) != 5)
        {
          DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)GetDefaultYpCbCrToARGBMatrixWithDimensionHint(a1, a2);
          goto LABEL_11;
        }
        unint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D0];
        goto LABEL_3;
      }
      long long v22 = xmmword_193E7D3F0;
      int v20 = 1072746935;
    }
    int v23 = v20;
    DefaultYpCbCrToARGBMatrixWithDimensionHint = (const vImage_YpCbCrToARGBMatrix *)&v22;
    goto LABEL_11;
  }
  unint64_t v18 = (const vImage_YpCbCrToARGBMatrix **)MEMORY[0x1E4F167D8];
LABEL_3:
  DefaultYpCbCrToARGBMatrixWithDimensionHint = *v18;
LABEL_11:
  vImage_Error result = vImageConvert_YpCbCrToARGB_GenerateConversion(DefaultYpCbCrToARGBMatrixWithDimensionHint, &pixelRange, v17, kvImage444AYpCbCr16|kvImage422YpCbYpCr8, kvImageARGB16Q12|kvImageARGB16U, 0);
  *(void *)&v17[2].opaque[40] = a5;
  v17[2].opaque[32] = a6;
  *a9 = vt_VImage_Copy_x444_w30r;
  *a11 = vt_VImage_Cleanup_x444_w30r;
  *a8 = v17;
  return result;
}

uint64_t vt_Copy_x444_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = *a3 + *a4 * v15;
    uint64_t v18 = a3[1] + v12 * v15 + 4 * v16;
    uint64_t v19 = v17 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v20 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          long long v22 = (_WORD *)(v14 + 2 * v20);
          __int16 v23 = *(_WORD *)(v18 + v20) & 0xFFC0;
          __int16 v24 = *(_WORD *)(v18 + v20 + 2) & 0xFFC0;
          __int16 v25 = *(_WORD *)(v19 + 2 * i) & 0xFFC0;
          *long long v22 = -1;
          v22[1] = v25;
          v22[2] = v23;
          v22[3] = v24;
          v20 += 4;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_x444_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = *a3 + *a4 * v15;
    uint64_t v18 = a3[1] + v12 * v15 + 4 * v16;
    uint64_t v19 = v17 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v20 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          long long v22 = (unsigned char *)(v14 + v20);
          char v23 = *(unsigned char *)(v18 + v20 + 1);
          char v24 = *(unsigned char *)(v18 + v20 + 3);
          char v25 = *(unsigned char *)(v19 + 2 * i + 1);
          *long long v22 = -1;
          v22[1] = v25;
          v22[2] = v23;
          v22[3] = v24;
          v20 += 4;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          long long v22 = (_WORD *)(v16 + v20);
          char v23 = (_WORD *)(v19 + 2 * i);
          unsigned int v24 = ((*(_WORD *)(v18 + v20 + 6) & 0xFFC0) + (*(_WORD *)(v18 + v20 + 2) & 0xFFC0u)) >> 1;
          __int16 v25 = *v23 & 0xFFC0;
          LOWORD(v23) = v23[1] & 0xFFC0;
          *long long v22 = ((*(_WORD *)(v18 + v20 + 4) & 0xFFC0) + (*(_WORD *)(v18 + v20) & 0xFFC0u)) >> 1;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          long long v22 = (_WORD *)(v16 + v20);
          char v23 = (_WORD *)(v19 + 2 * i);
          __int16 v24 = *(_WORD *)(v18 + v20 + 2) & 0xFFC0;
          __int16 v25 = *v23 & 0xFFC0;
          LOWORD(v23) = v23[1] & 0xFFC0;
          *long long v22 = *(_WORD *)(v18 + v20) & 0xFFC0;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v10);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        long long v22 = v16;
        do
        {
          uint64_t v23 = v19 + 2 * v21;
          unsigned int v24 = (*(unsigned __int8 *)(v18 + v20 + 3) + *(unsigned __int8 *)(v18 + v20 + 7) + 1) >> 1;
          char v25 = *(unsigned char *)(v23 + 1);
          LOBYTE(v23) = *(unsigned char *)(v23 + 3);
          *long long v22 = (*(unsigned __int8 *)(v18 + v20 + 1) + *(unsigned __int8 *)(v18 + v20 + 5) + 1) >> 1;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = v23;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v10);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        long long v22 = v16;
        do
        {
          uint64_t v23 = v19 + 2 * v21;
          char v24 = *(unsigned char *)(v18 + v20 + 3);
          char v25 = *(unsigned char *)(v23 + 1);
          LOBYTE(v23) = *(unsigned char *)(v23 + 3);
          *long long v22 = *(unsigned char *)(v18 + v20 + 1);
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = v23;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_x444_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (_WORD *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + 2 * v14;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(_WORD *)(v24 + 2 * i) & 0xFFC0;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      __int16 v34 = v13[1] & 0xFFC0;
      unsigned int v32 = v13 + 2;
      *uint64_t v17 = *v13 & 0xFFC0;
      v17[1] = v34;
      uint64_t v33 = v17 + 2;
    }
    else
    {
      unsigned int v32 = v13;
      uint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        __int16 v37 = *v32 & 0xFFC0;
        __int16 v38 = v32[1] & 0xFFC0;
        v32 += 2;
        *uint64_t v33 = v37;
        v33[1] = v38;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      __int16 v39 = *v32 & 0xFFC0;
      __int16 v40 = v32[1] & 0xFFC0;
      *uint64_t v33 = v39;
      v33[1] = v40;
    }
    uint64_t v13 = (_WORD *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      uint64_t v43 = v13;
      uint64_t v44 = v17;
      if (v28)
      {
        __int16 v45 = v13[1] & 0xFFC0;
        uint64_t v43 = v13 + 2;
        *uint64_t v17 = *v13 & 0xFFC0;
        v17[1] = v45;
        uint64_t v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          __int16 v48 = *v43 & 0xFFC0;
          __int16 v49 = v43[1] & 0xFFC0;
          v43 += 2;
          _WORD *v44 = v48;
          v44[1] = v49;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        __int16 v50 = *v43 & 0xFFC0;
        __int16 v51 = v43[1] & 0xFFC0;
        _WORD *v44 = v50;
        v44[1] = v51;
      }
      uint64_t v13 = (_WORD *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      __int16 v52 = *v13 & 0xFFC0;
      __int16 v53 = v13[1] & 0xFFC0;
      v13 += 2;
      *uint64_t v17 = v52;
      v17[1] = v53;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        __int16 v55 = *v13 & 0xFFC0;
        __int16 v56 = v13[1] & 0xFFC0;
        v13 += 2;
        *uint64_t v17 = v55;
        v17[1] = v56;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      __int16 v57 = *v13 & 0xFFC0;
      __int16 v58 = v13[1] & 0xFFC0;
      *uint64_t v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_sv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (_WORD *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(_WORD *)(v22 + 2 * i) & 0xFFC0;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      __int16 v32 = v13[1] & 0xFFC0;
      unint64_t v30 = v13 + 2;
      *uint64_t v17 = *v13 & 0xFFC0;
      v17[1] = v32;
      unint64_t v31 = v17 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      unint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        __int16 v35 = *v30 & 0xFFC0;
        __int16 v36 = v30[1] & 0xFFC0;
        v30 += 2;
        _WORD *v31 = v35;
        v31[1] = v36;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      __int16 v37 = *v30 & 0xFFC0;
      __int16 v38 = v30[1] & 0xFFC0;
      _WORD *v31 = v37;
      v31[1] = v38;
    }
    uint64_t v13 = (_WORD *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      unint64_t v41 = v13;
      uint64_t v42 = v17;
      if (v26)
      {
        __int16 v43 = v13[1] & 0xFFC0;
        unint64_t v41 = v13 + 2;
        *uint64_t v17 = *v13 & 0xFFC0;
        v17[1] = v43;
        uint64_t v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          __int16 v46 = *v41 & 0xFFC0;
          __int16 v47 = v41[1] & 0xFFC0;
          v41 += 2;
          *uint64_t v42 = v46;
          v42[1] = v47;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        __int16 v48 = *v41 & 0xFFC0;
        __int16 v49 = v41[1] & 0xFFC0;
        *uint64_t v42 = v48;
        v42[1] = v49;
      }
      uint64_t v13 = (_WORD *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      __int16 v50 = *v13 & 0xFFC0;
      __int16 v51 = v13[1] & 0xFFC0;
      v13 += 2;
      *uint64_t v17 = v50;
      v17[1] = v51;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        __int16 v53 = *v13 & 0xFFC0;
        __int16 v54 = v13[1] & 0xFFC0;
        v13 += 2;
        *uint64_t v17 = v53;
        v17[1] = v54;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      __int16 v55 = *v13 & 0xFFC0;
      __int16 v56 = v13[1] & 0xFFC0;
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v25 = *(unsigned __int16 *)(v23 + 2 * i) >> 6;
          if (v25 >= 0x3AC) {
            unsigned int v25 = 940;
          }
          if (v25 <= 0x40) {
            unsigned int v25 = 64;
          }
          *(_WORD *)(v22 + 2 * i) = (-4194240 - v25 + (v25 << 16)) / 0x36C;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v26 = v8 & 1;
  if (v18 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unsigned int v34 = *v13;
      int v35 = v34 >> 6;
      unsigned int v36 = v13[1];
      if (v34 >> 6 >= 0x3C0) {
        int v35 = 960;
      }
      if (v34 >= 0x1000) {
        int v37 = v35;
      }
      else {
        int v37 = 64;
      }
      if (v36 >> 6 >= 0x3C0) {
        int v38 = 960;
      }
      else {
        int v38 = v36 >> 6;
      }
      if (v36 >= 0x1000) {
        int v39 = v38;
      }
      else {
        int v39 = 64;
      }
      __int16 v32 = v13 + 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-4194240 - v37 + (v37 << 16)) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-4194240 - v39 + (v39 << 16)) >> 7)) >> 32;
      unint64_t v33 = v17 + 2;
    }
    else
    {
      __int16 v32 = v13;
      unint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v40 = 0;
    }
    else
    {
      unint64_t v41 = v10 - v30;
      do
      {
        unsigned int v42 = *v32;
        int v43 = v42 >> 6;
        unsigned int v44 = v32[1];
        if (v42 >> 6 >= 0x3C0) {
          int v43 = 960;
        }
        if (v42 >= 0x1000) {
          int v45 = v43;
        }
        else {
          int v45 = 64;
        }
        if (v44 >> 6 >= 0x3C0) {
          int v46 = 960;
        }
        else {
          int v46 = v44 >> 6;
        }
        if (v44 < 0x1000) {
          int v46 = 64;
        }
        v32 += 2;
        *unint64_t v33 = (613566757 * (unint64_t)((-4194240 - v45 + (v45 << 16)) >> 7)) >> 32;
        v33[1] = (613566757 * (unint64_t)((-4194240 - v46 + (v46 << 16)) >> 7)) >> 32;
        v33 += 2;
        --v41;
      }
      while (v41);
      unint64_t v40 = v10 - v30;
    }
    if (v40 + v29 < v10)
    {
      unsigned int v47 = *v32;
      int v48 = v47 >> 6;
      unsigned int v49 = v32[1];
      unsigned int v50 = v49 >> 6;
      if (v47 >> 6 >= 0x3C0) {
        int v48 = 960;
      }
      if (v47 < 0x1000) {
        int v48 = 64;
      }
      if (v50 >= 0x3C0) {
        unsigned int v50 = 960;
      }
      if (v49 >= 0x1000) {
        int v51 = v50;
      }
      else {
        int v51 = 64;
      }
      *unint64_t v33 = (613566757 * (unint64_t)((-4194240 - v48 + (v48 << 16)) >> 7)) >> 32;
      v33[1] = (613566757 * (unint64_t)((-4194240 - v51 + (v51 << 16)) >> 7)) >> 32;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    unint64_t v52 = 0;
  }
  else
  {
    uint64_t v53 = 0;
    unint64_t v52 = v18 - v27;
    do
    {
      __int16 v54 = v13;
      __int16 v55 = v17;
      if (v28)
      {
        unsigned int v56 = *v13;
        int v57 = v56 >> 6;
        unsigned int v58 = v13[1];
        if (v56 >> 6 >= 0x3C0) {
          int v57 = 960;
        }
        if (v56 >= 0x1000) {
          int v59 = v57;
        }
        else {
          int v59 = 64;
        }
        if (v58 >> 6 >= 0x3C0) {
          int v60 = 960;
        }
        else {
          int v60 = v58 >> 6;
        }
        if (v58 >= 0x1000) {
          int v61 = v60;
        }
        else {
          int v61 = 64;
        }
        __int16 v54 = v13 + 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-4194240 - v59 + (v59 << 16)) >> 7)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-4194240 - v61 + (v61 << 16)) >> 7)) >> 32;
        __int16 v55 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v62 = 0;
      }
      else
      {
        unint64_t v63 = v10 - v30;
        do
        {
          unsigned int v64 = *v54;
          int v65 = v64 >> 6;
          unsigned int v66 = v54[1];
          if (v64 >> 6 >= 0x3C0) {
            int v65 = 960;
          }
          if (v64 >= 0x1000) {
            int v67 = v65;
          }
          else {
            int v67 = 64;
          }
          if (v66 >> 6 >= 0x3C0) {
            int v68 = 960;
          }
          else {
            int v68 = v66 >> 6;
          }
          if (v66 < 0x1000) {
            int v68 = 64;
          }
          v54 += 2;
          *__int16 v55 = (613566757 * (unint64_t)((-4194240 - v67 + (v67 << 16)) >> 7)) >> 32;
          v55[1] = (613566757 * (unint64_t)((-4194240 - v68 + (v68 << 16)) >> 7)) >> 32;
          v55 += 2;
          --v63;
        }
        while (v63);
        unint64_t v62 = v10 - v30;
      }
      if (v62 + v29 < v10)
      {
        unsigned int v69 = *v54;
        int v70 = v69 >> 6;
        unsigned int v71 = v54[1];
        if (v69 >> 6 >= 0x3C0) {
          int v70 = 960;
        }
        if (v69 >= 0x1000) {
          int v72 = v70;
        }
        else {
          int v72 = 64;
        }
        if (v71 >> 6 >= 0x3C0) {
          int v73 = 960;
        }
        else {
          int v73 = v71 >> 6;
        }
        if (v71 >= 0x1000) {
          int v74 = v73;
        }
        else {
          int v74 = 64;
        }
        *__int16 v55 = (613566757 * (unint64_t)((-4194240 - v72 + (v72 << 16)) >> 7)) >> 32;
        v55[1] = (613566757 * (unint64_t)((-4194240 - v74 + (v74 << 16)) >> 7)) >> 32;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v53;
    }
    while (v53 != v52);
  }
  if (v52 + v26 < v18)
  {
    if (v28)
    {
      unsigned int v75 = *v13;
      int v76 = v75 >> 6;
      unsigned int v77 = v13[1];
      unsigned int v78 = v77 >> 6;
      if (v75 >> 6 >= 0x3C0) {
        int v76 = 960;
      }
      if (v75 < 0x1000) {
        int v76 = 64;
      }
      if (v78 >= 0x3C0) {
        unsigned int v78 = 960;
      }
      if (v77 >= 0x1000) {
        int v79 = v78;
      }
      else {
        int v79 = 64;
      }
      v13 += 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-4194240 - v76 + (v76 << 16)) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-4194240 - v79 + (v79 << 16)) >> 7)) >> 32;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v80 = v10 - v30;
      do
      {
        unsigned int v81 = *v13;
        int v82 = v81 >> 6;
        unsigned int v83 = v13[1];
        if (v81 >> 6 >= 0x3C0) {
          int v82 = 960;
        }
        if (v81 >= 0x1000) {
          int v84 = v82;
        }
        else {
          int v84 = 64;
        }
        if (v83 >> 6 >= 0x3C0) {
          int v85 = 960;
        }
        else {
          int v85 = v83 >> 6;
        }
        if (v83 < 0x1000) {
          int v85 = 64;
        }
        v13 += 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-4194240 - v84 + (v84 << 16)) >> 7)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-4194240 - v85 + (v85 << 16)) >> 7)) >> 32;
        v17 += 2;
        --v80;
      }
      while (v80);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v86 = *v13;
      int v87 = v86 >> 6;
      unsigned int v88 = v13[1];
      unsigned int v89 = v88 >> 6;
      if (v86 >> 6 >= 0x3C0) {
        int v87 = 960;
      }
      if (v86 < 0x1000) {
        int v87 = 64;
      }
      if (v89 >= 0x3C0) {
        unsigned int v89 = 960;
      }
      if (v88 >= 0x1000) {
        int v90 = v89;
      }
      else {
        int v90 = 64;
      }
      *uint64_t v17 = (613566757 * (unint64_t)((-4194240 - v87 + (v87 << 16)) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-4194240 - v90 + (v90 << 16)) >> 7)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unsigned int v36 = v14 + 4;
      unsigned int v38 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
      *uint64_t v21 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
      v21[1] = v38;
      int v37 = v21 + 2;
    }
    else
    {
      unsigned int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        unsigned int v41 = ((v36[3] & 0xFFC0) + (v36[1] & 0xFFC0u)) >> 1;
        *unint64_t v40 = ((v36[2] & 0xFFC0) + (*v36 & 0xFFC0u)) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unsigned int v44 = v14;
      int v45 = v21;
      if (v34)
      {
        unsigned int v44 = v14 + 4;
        unsigned int v46 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
        *uint64_t v21 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
        v21[1] = v46;
        int v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unsigned int v49 = ((v44[3] & 0xFFC0) + (v44[1] & 0xFFC0u)) >> 1;
          _WORD *v48 = ((v44[2] & 0xFFC0) + (*v44 & 0xFFC0u)) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = *v14 & 0xFFC0;
      int v51 = v14[1] & 0xFFC0;
      int v52 = v14[2] & 0xFFC0;
      int v53 = v14[3] & 0xFFC0;
      v14 += 4;
      *uint64_t v21 = (v52 + v50) >> 1;
      v21[1] = (v53 + v51) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v21[v54];
        unsigned int v56 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
        *__int16 v55 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      __int16 v38 = v14[1] & 0xFFC0;
      unsigned int v36 = v14 + 4;
      *uint64_t v21 = *v14 & 0xFFC0;
      v21[1] = v38;
      int v37 = v21 + 2;
    }
    else
    {
      unsigned int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        __int16 v41 = v36[1] & 0xFFC0;
        *unint64_t v40 = *v36 & 0xFFC0;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unsigned int v44 = v14;
      int v45 = v21;
      if (v34)
      {
        __int16 v46 = v14[1] & 0xFFC0;
        unsigned int v44 = v14 + 4;
        *uint64_t v21 = *v14 & 0xFFC0;
        v21[1] = v46;
        int v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          __int16 v49 = v44[1] & 0xFFC0;
          _WORD *v48 = *v44 & 0xFFC0;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      __int16 v50 = *v14 & 0xFFC0;
      __int16 v51 = v14[1] & 0xFFC0;
      v14 += 4;
      *uint64_t v21 = v50;
      v21[1] = v51;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        __int16 v54 = v14[1] & 0xFFC0;
        *int v53 = *v14 & 0xFFC0;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      unsigned int v36 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
      *uint64_t v21 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        __int16 v38 = &v35[v37];
        unsigned int v39 = ((v34[3] & 0xFFC0) + (v34[1] & 0xFFC0u)) >> 1;
        *__int16 v38 = ((v34[2] & 0xFFC0) + (*v34 & 0xFFC0u)) >> 1;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        unsigned int v44 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
        *uint64_t v21 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
        v21[1] = v44;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          unsigned int v47 = ((v42[3] & 0xFFC0) + (v42[1] & 0xFFC0u)) >> 1;
          *__int16 v46 = ((v42[2] & 0xFFC0) + (*v42 & 0xFFC0u)) >> 1;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      int v48 = *v14 & 0xFFC0;
      int v49 = v14[1] & 0xFFC0;
      int v50 = v14[2] & 0xFFC0;
      int v51 = v14[3] & 0xFFC0;
      v14 += 4;
      *uint64_t v21 = (v50 + v48) >> 1;
      v21[1] = (v51 + v49) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v21[v52];
        unsigned int v54 = ((v14[3] & 0xFFC0) + (v14[1] & 0xFFC0u)) >> 1;
        *int v53 = ((v14[2] & 0xFFC0) + (*v14 & 0xFFC0u)) >> 1;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      __int16 v36 = v14[1] & 0xFFC0;
      char v34 = v14 + 4;
      *uint64_t v21 = *v14 & 0xFFC0;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        __int16 v38 = &v35[v37];
        __int16 v39 = v34[1] & 0xFFC0;
        *__int16 v38 = *v34 & 0xFFC0;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        __int16 v44 = v14[1] & 0xFFC0;
        unint64_t v42 = v14 + 4;
        *uint64_t v21 = *v14 & 0xFFC0;
        v21[1] = v44;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          __int16 v47 = v42[1] & 0xFFC0;
          *__int16 v46 = *v42 & 0xFFC0;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14 & 0xFFC0;
      __int16 v49 = v14[1] & 0xFFC0;
      v14 += 4;
      *uint64_t v21 = v48;
      v21[1] = v49;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        int v51 = &v21[v50];
        __int16 v52 = v14[1] & 0xFFC0;
        *int v51 = *v14 & 0xFFC0;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 6;
          if (v30 >= 0x3AC) {
            unsigned int v30 = 940;
          }
          if (v30 <= 0x40) {
            unsigned int v30 = 64;
          }
          *(_WORD *)(v27 + 2 * i) = (-4194240 - v30 + (v30 << 16)) / 0x36C;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      int v38 = v37 >> 6;
      unsigned int v39 = v14[1];
      unsigned int v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0) {
        int v38 = 960;
      }
      if (v37 < 0x1000) {
        int v38 = 64;
      }
      if (v40 >= 0x3C0) {
        unsigned int v40 = 960;
      }
      if (v39 >= 0x1000) {
        int v41 = v40;
      }
      else {
        int v41 = 64;
      }
      unsigned int v42 = v14[2];
      int v43 = v42 >> 6;
      unsigned int v44 = v14[3];
      if (v42 >> 6 >= 0x3C0) {
        int v43 = 960;
      }
      if (v42 >= 0x1000) {
        int v45 = v43;
      }
      else {
        int v45 = 64;
      }
      if (v44 >> 6 >= 0x3C0) {
        int v46 = 960;
      }
      else {
        int v46 = v44 >> 6;
      }
      if (v44 < 0x1000) {
        int v46 = 64;
      }
      unint64_t v35 = v14 + 4;
      *uint64_t v21 = (((613566757 * (unint64_t)((-4194240 - v38 + (v38 << 16)) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((-4194240 - v45 + (v45 << 16)) >> 7)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-4194240 - v41 + (v41 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v46 + (v46 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
      __int16 v36 = v21 + 2;
    }
    else
    {
      unint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v47 = 0;
      do
      {
        __int16 v48 = &v36[v47];
        unsigned int v49 = *v35;
        int v50 = v49 >> 6;
        unsigned int v51 = v35[1];
        if (v49 >> 6 >= 0x3C0) {
          int v50 = 960;
        }
        if (v49 >= 0x1000) {
          int v52 = v50;
        }
        else {
          int v52 = 64;
        }
        if (v51 >> 6 >= 0x3C0) {
          int v53 = 960;
        }
        else {
          int v53 = v51 >> 6;
        }
        if (v51 < 0x1000) {
          int v53 = 64;
        }
        unsigned int v54 = v35[2];
        int v55 = v54 >> 6;
        unsigned int v56 = v35[3];
        if (v54 >> 6 >= 0x3C0) {
          int v55 = 960;
        }
        if (v54 >= 0x1000) {
          int v57 = v55;
        }
        else {
          int v57 = 64;
        }
        if (v56 >> 6 >= 0x3C0) {
          int v58 = 960;
        }
        else {
          int v58 = v56 >> 6;
        }
        if (v56 < 0x1000) {
          int v58 = 64;
        }
        _WORD *v48 = (((613566757 * (unint64_t)((-4194240 - v52 + (v52 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v57 + (v57 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
        v48[1] = (((613566757 * (unint64_t)((-4194240 - v53 + (v53 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v58 + (v58 << 16)) >> 7)) >> 32)
                              + 1) >> 1;
        v47 += 2;
        v35 += 4;
      }
      while (v47 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v59 = 0;
  }
  else
  {
    uint64_t v60 = 0;
    unint64_t v59 = v9 - v32;
    do
    {
      int v61 = v14;
      unint64_t v62 = v21;
      if (v33)
      {
        unsigned int v63 = *v14;
        int v64 = v63 >> 6;
        unsigned int v65 = v14[1];
        if (v63 >> 6 >= 0x3C0) {
          int v64 = 960;
        }
        if (v63 < 0x1000) {
          int v64 = 64;
        }
        if (v65 >> 6 >= 0x3C0) {
          int v66 = 960;
        }
        else {
          int v66 = v65 >> 6;
        }
        if (v65 >= 0x1000) {
          int v67 = v66;
        }
        else {
          int v67 = 64;
        }
        unsigned int v68 = v14[2];
        int v69 = v68 >> 6;
        unsigned int v70 = v14[3];
        if (v68 >> 6 >= 0x3C0) {
          int v69 = 960;
        }
        if (v68 < 0x1000) {
          int v69 = 64;
        }
        if (v70 >> 6 >= 0x3C0) {
          int v71 = 960;
        }
        else {
          int v71 = v70 >> 6;
        }
        if (v70 >= 0x1000) {
          int v72 = v71;
        }
        else {
          int v72 = 64;
        }
        int v61 = v14 + 4;
        *uint64_t v21 = (((613566757 * (unint64_t)((-4194240 - v64 + (v64 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v69 + (v69 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
        v21[1] = (((613566757 * (unint64_t)((-4194240 - v67 + (v67 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v72 + (v72 << 16)) >> 7)) >> 32)
                              + 1) >> 1;
        unint64_t v62 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v73 = 0;
        do
        {
          int v74 = &v62[v73];
          unsigned int v75 = *v61;
          int v76 = v75 >> 6;
          unsigned int v77 = v61[1];
          if (v75 >> 6 >= 0x3C0) {
            int v76 = 960;
          }
          if (v75 >= 0x1000) {
            int v78 = v76;
          }
          else {
            int v78 = 64;
          }
          if (v77 >> 6 >= 0x3C0) {
            int v79 = 960;
          }
          else {
            int v79 = v77 >> 6;
          }
          if (v77 < 0x1000) {
            int v79 = 64;
          }
          unsigned int v80 = v61[2];
          int v81 = v80 >> 6;
          unsigned int v82 = v61[3];
          if (v80 >> 6 >= 0x3C0) {
            int v81 = 960;
          }
          if (v80 >= 0x1000) {
            int v83 = v81;
          }
          else {
            int v83 = 64;
          }
          if (v82 >> 6 >= 0x3C0) {
            int v84 = 960;
          }
          else {
            int v84 = v82 >> 6;
          }
          if (v82 < 0x1000) {
            int v84 = 64;
          }
          *int v74 = (((613566757 * (unint64_t)((-4194240 - v78 + (v78 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v83 + (v83 << 16)) >> 7)) >> 32)
                              + 1) >> 1;
          v74[1] = (((613566757 * (unint64_t)((-4194240 - v79 + (v79 << 16)) >> 7)) >> 32)
                                + ((613566757 * (unint64_t)((-4194240 - v84 + (v84 << 16)) >> 7)) >> 32)
                                + 1) >> 1;
          v73 += 2;
          v61 += 4;
        }
        while (v73 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v60;
    }
    while (v60 != v59);
  }
  if (v59 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v85 = *v14;
      int v86 = v85 >> 6;
      unsigned int v87 = v14[1];
      unsigned int v88 = v87 >> 6;
      if (v85 >> 6 >= 0x3C0) {
        int v86 = 960;
      }
      if (v85 < 0x1000) {
        int v86 = 64;
      }
      if (v88 >= 0x3C0) {
        unsigned int v88 = 960;
      }
      if (v87 >= 0x1000) {
        int v89 = v88;
      }
      else {
        int v89 = 64;
      }
      unsigned int v90 = v14[2];
      int v91 = v90 >> 6;
      unsigned int v92 = v14[3];
      if (v90 >> 6 >= 0x3C0) {
        int v91 = 960;
      }
      if (v90 >= 0x1000) {
        int v93 = v91;
      }
      else {
        int v93 = 64;
      }
      if (v92 >> 6 >= 0x3C0) {
        int v94 = 960;
      }
      else {
        int v94 = v92 >> 6;
      }
      if (v92 >= 0x1000) {
        int v95 = v94;
      }
      else {
        int v95 = 64;
      }
      v14 += 4;
      *uint64_t v21 = (((613566757 * (unint64_t)((-4194240 - v86 + (v86 << 16)) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((-4194240 - v93 + (v93 << 16)) >> 7)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-4194240 - v89 + (v89 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v95 + (v95 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v96 = 0;
      do
      {
        uint64_t v97 = &v21[v96];
        unsigned int v98 = *v14;
        int v99 = v98 >> 6;
        unsigned int v100 = v14[1];
        if (v98 >> 6 >= 0x3C0) {
          int v99 = 960;
        }
        if (v98 >= 0x1000) {
          int v101 = v99;
        }
        else {
          int v101 = 64;
        }
        if (v100 >> 6 >= 0x3C0) {
          int v102 = 960;
        }
        else {
          int v102 = v100 >> 6;
        }
        if (v100 < 0x1000) {
          int v102 = 64;
        }
        unsigned int v103 = v14[2];
        int v104 = v103 >> 6;
        unsigned int v105 = v14[3];
        if (v103 >> 6 >= 0x3C0) {
          int v104 = 960;
        }
        if (v103 >= 0x1000) {
          int v106 = v104;
        }
        else {
          int v106 = 64;
        }
        if (v105 >> 6 >= 0x3C0) {
          int v107 = 960;
        }
        else {
          int v107 = v105 >> 6;
        }
        if (v105 < 0x1000) {
          int v107 = 64;
        }
        *uint64_t v97 = (((613566757 * (unint64_t)((-4194240 - v101 + (v101 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v106 + (v106 << 16)) >> 7)) >> 32)
                            + 1) >> 1;
        v97[1] = (((613566757 * (unint64_t)((-4194240 - v102 + (v102 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v107 + (v107 << 16)) >> 7)) >> 32)
                              + 1) >> 1;
        v96 += 2;
        v14 += 4;
      }
      while (v96 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 6;
          if (v30 >= 0x3AC) {
            unsigned int v30 = 940;
          }
          if (v30 <= 0x40) {
            unsigned int v30 = 64;
          }
          *(_WORD *)(v27 + 2 * i) = (-4194240 - v30 + (v30 << 16)) / 0x36C;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      int v38 = v37 >> 6;
      unsigned int v39 = v14[1];
      unsigned int v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0) {
        int v38 = 960;
      }
      if (v37 < 0x1000) {
        int v38 = 64;
      }
      if (v40 >= 0x3C0) {
        unsigned int v40 = 960;
      }
      if (v39 >= 0x1000) {
        int v41 = v40;
      }
      else {
        int v41 = 64;
      }
      unint64_t v35 = v14 + 4;
      *uint64_t v21 = (613566757 * (unint64_t)((-4194240 - v38 + (v38 << 16)) >> 7)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-4194240 - v41 + (v41 << 16)) >> 7)) >> 32;
      __int16 v36 = v21 + 2;
    }
    else
    {
      unint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v42 = 0;
      do
      {
        int v43 = &v36[v42];
        unsigned int v44 = *v35;
        int v45 = v44 >> 6;
        unsigned int v46 = v35[1];
        if (v44 >> 6 >= 0x3C0) {
          int v45 = 960;
        }
        if (v44 >= 0x1000) {
          int v47 = v45;
        }
        else {
          int v47 = 64;
        }
        if (v46 >> 6 >= 0x3C0) {
          int v48 = 960;
        }
        else {
          int v48 = v46 >> 6;
        }
        if (v46 < 0x1000) {
          int v48 = 64;
        }
        _WORD *v43 = (613566757 * (unint64_t)((-4194240 - v47 + (v47 << 16)) >> 7)) >> 32;
        v43[1] = (613566757 * (unint64_t)((-4194240 - v48 + (v48 << 16)) >> 7)) >> 32;
        v42 += 2;
        v35 += 4;
      }
      while (v42 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v49 = 0;
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v49 = v9 - v32;
    do
    {
      unsigned int v51 = v14;
      int v52 = v21;
      if (v33)
      {
        unsigned int v53 = *v14;
        int v54 = v53 >> 6;
        unsigned int v55 = v14[1];
        if (v53 >> 6 >= 0x3C0) {
          int v54 = 960;
        }
        if (v53 < 0x1000) {
          int v54 = 64;
        }
        if (v55 >> 6 >= 0x3C0) {
          int v56 = 960;
        }
        else {
          int v56 = v55 >> 6;
        }
        if (v55 >= 0x1000) {
          int v57 = v56;
        }
        else {
          int v57 = 64;
        }
        unsigned int v51 = v14 + 4;
        *uint64_t v21 = (613566757 * (unint64_t)((-4194240 - v54 + (v54 << 16)) >> 7)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-4194240 - v57 + (v57 << 16)) >> 7)) >> 32;
        int v52 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v58 = 0;
        do
        {
          unint64_t v59 = &v52[v58];
          unsigned int v60 = *v51;
          int v61 = v60 >> 6;
          unsigned int v62 = v51[1];
          if (v60 >> 6 >= 0x3C0) {
            int v61 = 960;
          }
          if (v60 >= 0x1000) {
            int v63 = v61;
          }
          else {
            int v63 = 64;
          }
          if (v62 >> 6 >= 0x3C0) {
            int v64 = 960;
          }
          else {
            int v64 = v62 >> 6;
          }
          if (v62 < 0x1000) {
            int v64 = 64;
          }
          *unint64_t v59 = (613566757 * (unint64_t)((-4194240 - v63 + (v63 << 16)) >> 7)) >> 32;
          v59[1] = (613566757 * (unint64_t)((-4194240 - v64 + (v64 << 16)) >> 7)) >> 32;
          v58 += 2;
          v51 += 4;
        }
        while (v58 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v50;
    }
    while (v50 != v49);
  }
  if (v49 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v65 = *v14;
      int v66 = v65 >> 6;
      unsigned int v67 = v14[1];
      unsigned int v68 = v67 >> 6;
      if (v65 >> 6 >= 0x3C0) {
        int v66 = 960;
      }
      if (v65 < 0x1000) {
        int v66 = 64;
      }
      if (v68 >= 0x3C0) {
        unsigned int v68 = 960;
      }
      if (v67 >= 0x1000) {
        int v69 = v68;
      }
      else {
        int v69 = 64;
      }
      v14 += 4;
      *uint64_t v21 = (613566757 * (unint64_t)((-4194240 - v66 + (v66 << 16)) >> 7)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-4194240 - v69 + (v69 << 16)) >> 7)) >> 32;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v70 = 0;
      do
      {
        int v71 = &v21[v70];
        unsigned int v72 = *v14;
        int v73 = v72 >> 6;
        unsigned int v74 = v14[1];
        if (v72 >> 6 >= 0x3C0) {
          int v73 = 960;
        }
        if (v72 >= 0x1000) {
          int v75 = v73;
        }
        else {
          int v75 = 64;
        }
        if (v74 >> 6 >= 0x3C0) {
          int v76 = 960;
        }
        else {
          int v76 = v74 >> 6;
        }
        if (v74 < 0x1000) {
          int v76 = 64;
        }
        *int v71 = (613566757 * (unint64_t)((-4194240 - v75 + (v75 << 16)) >> 7)) >> 32;
        v71[1] = (613566757 * (unint64_t)((-4194240 - v76 + (v76 << 16)) >> 7)) >> 32;
        v70 += 2;
        v14 += 4;
      }
      while (v70 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * (v10 + v8);
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    int v38 = v16;
    if (v8)
    {
      unsigned int v40 = (_WORD *)((char *)v16 + v15 + 4);
      int v38 = v16 + 4;
      v41.i32[0] = *v16 & 0xFFC0;
      v41.i32[1] = v16[1] & 0xFFC0;
      v42.i32[0] = *(_WORD *)((char *)v16 + v15) & 0xFFC0;
      v42.i32[1] = *(_WORD *)((char *)v16 + v15 + 2) & 0xFFC0;
      v43.i32[0] = v16[2] & 0xFFC0;
      v43.i32[1] = v16[3] & 0xFFC0;
      v44.i32[0] = *v40 & 0xFFC0;
      v44.i32[1] = v40[1] & 0xFFC0;
      uint32x2_t v45 = vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v42, vadd_s32(v41, v43)), v44), 2uLL);
      v23[1] = v45.i16[2];
      *unint64_t v23 = v45.i16[0];
      unsigned int v39 = v23 + 2;
    }
    else
    {
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = &v38[2 * v46];
        int v48 = (_WORD *)((char *)&v38[2 * v46] + v15);
        v49.i32[0] = *v47 & 0xFFC0;
        v49.i32[1] = v47[1] & 0xFFC0;
        v50.i32[0] = *v48 & 0xFFC0;
        v50.i32[1] = v48[1] & 0xFFC0;
        v51.i32[0] = v47[2] & 0xFFC0;
        v51.i32[1] = v47[3] & 0xFFC0;
        v52.i32[0] = v48[2] & 0xFFC0;
        v52.i32[1] = v48[3] & 0xFFC0;
        uint32x2_t v53 = vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v50, v49), vadd_s32(v51, v52)), 2uLL);
        v39[1] = v53.i16[2];
        *unsigned int v39 = v53.i16[0];
        v39 += 2;
        v46 += 2;
      }
      while (v46 < v37);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    unint64_t v54 = 0;
    unint64_t v55 = v27 - v36;
    do
    {
      int v56 = v16;
      int v57 = v23;
      if (v8)
      {
        unint64_t v58 = (_WORD *)((char *)v16 + v15 + 4);
        int v56 = v16 + 4;
        v59.i32[0] = *v16 & 0xFFC0;
        v59.i32[1] = v16[1] & 0xFFC0;
        v60.i32[0] = *(_WORD *)((char *)v16 + v15) & 0xFFC0;
        v60.i32[1] = *(_WORD *)((char *)v16 + v15 + 2) & 0xFFC0;
        v61.i32[0] = v16[2] & 0xFFC0;
        v61.i32[1] = v16[3] & 0xFFC0;
        v62.i32[0] = *v58 & 0xFFC0;
        v62.i32[1] = v58[1] & 0xFFC0;
        uint32x2_t v63 = vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v60, vadd_s32(v59, v61)), v62), 2uLL);
        v23[1] = v63.i16[2];
        *unint64_t v23 = v63.i16[0];
        int v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v64 = 0;
        do
        {
          unsigned int v65 = &v56[2 * v64];
          int v66 = (_WORD *)((char *)&v56[2 * v64] + v15);
          v67.i32[0] = *v65 & 0xFFC0;
          v67.i32[1] = v65[1] & 0xFFC0;
          v68.i32[0] = *v66 & 0xFFC0;
          v68.i32[1] = v66[1] & 0xFFC0;
          v69.i32[0] = v65[2] & 0xFFC0;
          v69.i32[1] = v65[3] & 0xFFC0;
          v70.i32[0] = v66[2] & 0xFFC0;
          v70.i32[1] = v66[3] & 0xFFC0;
          uint32x2_t v71 = vshr_n_u32((uint32x2_t)vadd_s32(vadd_s32(v68, v67), vadd_s32(v69, v70)), 2uLL);
          v57[1] = v71.i16[2];
          _WORD *v57 = v71.i16[0];
          v57 += 2;
          v64 += 2;
        }
        while (v64 < v37);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v54 += 2;
    }
    while (v54 < v55);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * (v10 + v9);
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      __int16 v40 = v16[1] & 0xFFC0;
      int v38 = v16 + 4;
      *unint64_t v23 = *v16 & 0xFFC0;
      v23[1] = v40;
      unsigned int v39 = v23 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        int32x2_t v42 = &v39[v41];
        __int16 v43 = v38[1] & 0xFFC0;
        *int32x2_t v42 = *v38 & 0xFFC0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v27 - v36;
    uint64_t v46 = 2 * v15;
    do
    {
      int v47 = v16;
      int v48 = v23;
      if (v9)
      {
        __int16 v49 = v16[1] & 0xFFC0;
        int v47 = v16 + 4;
        *unint64_t v23 = *v16 & 0xFFC0;
        v23[1] = v49;
        int v48 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v50 = 0;
        do
        {
          int32x2_t v51 = &v48[v50];
          __int16 v52 = v47[1] & 0xFFC0;
          *int32x2_t v51 = *v47 & 0xFFC0;
          v51[1] = v52;
          v50 += 2;
          v47 += 4;
        }
        while (v50 < v37);
      }
      uint64_t v16 = (_WORD *)((char *)v16 + v46);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v153 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v153 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v14 - v13;
  unint64_t v26 = v20 - v19;
  if (v25 < v20 - v19) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    uint64_t v30 = *a8;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v29 + v31;
    uint64_t v33 = *a7 + v30 * v19 + v21;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v35 = *(unsigned __int16 *)(v32 + 2 * i) >> 6;
          if (v35 >= 0x3AC) {
            unsigned int v35 = 940;
          }
          if (v35 <= 0x40) {
            unsigned int v35 = 64;
          }
          *(_WORD *)(v33 + 2 * i) = (-4194240 - v35 + (v35 << 16)) / 0x36C;
        }
      }
      v32 += v28;
      v33 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v23 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v40 = *v16;
      int v41 = v40 >> 6;
      unsigned int v42 = v16[1];
      unsigned int v43 = v42 >> 6;
      unsigned int v44 = *(unsigned __int16 *)((char *)v16 + v15);
      unsigned int v45 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v40 >> 6 >= 0x3C0) {
        int v41 = 960;
      }
      if (v40 < 0x1000) {
        int v41 = 64;
      }
      if (v43 >= 0x3C0) {
        unsigned int v43 = 960;
      }
      if (v42 < 0x1000) {
        unsigned int v43 = 64;
      }
      if (v44 >> 6 >= 0x3C0) {
        int v46 = 960;
      }
      else {
        int v46 = v44 >> 6;
      }
      if (v44 >= 0x1000) {
        int v47 = v46;
      }
      else {
        int v47 = 64;
      }
      if (v45 >> 6 >= 0x3C0) {
        int v48 = 960;
      }
      else {
        int v48 = v45 >> 6;
      }
      if (v45 >= 0x1000) {
        int v49 = v48;
      }
      else {
        int v49 = 64;
      }
      unsigned int v50 = v16[2];
      int v51 = v50 >> 6;
      unsigned int v52 = v16[3];
      uint32x2_t v53 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      unsigned int v54 = *v53;
      unsigned int v55 = v53[1];
      if (v50 >> 6 >= 0x3C0) {
        int v51 = 960;
      }
      if (v50 >= 0x1000) {
        int v56 = v51;
      }
      else {
        int v56 = 64;
      }
      if (v52 >> 6 >= 0x3C0) {
        int v57 = 960;
      }
      else {
        int v57 = v52 >> 6;
      }
      if (v52 < 0x1000) {
        int v57 = 64;
      }
      if (v54 >> 6 >= 0x3C0) {
        int v58 = 960;
      }
      else {
        int v58 = v54 >> 6;
      }
      unsigned int v59 = -4194240 - v41 + (v41 << 16);
      if (v54 < 0x1000) {
        int v58 = 64;
      }
      unint64_t v60 = (613566757 * (unint64_t)(v59 >> 7)) >> 32;
      if (v55 >> 6 >= 0x3C0) {
        int v61 = 960;
      }
      else {
        int v61 = v55 >> 6;
      }
      if (v55 >= 0x1000) {
        int v62 = v61;
      }
      else {
        int v62 = 64;
      }
      int v38 = v16 + 4;
      *uint64_t v22 = (v60
                          + ((613566757 * (unint64_t)((-4194240 - v56 + (v56 << 16)) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((-4194240 - v47 + (v47 << 16)) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((-4194240 - v58 + (v58 << 16)) >> 7)) >> 32)
                          + 2) >> 2;
      v22[1] = (((613566757 * (unint64_t)((-4194240 - v43 + (v43 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v57 + (v57 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v49 + (v49 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v62 + (v62 << 16)) >> 7)) >> 32)
                            + 2) >> 2;
      unsigned int v39 = v22 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v63 = 0;
      unint64_t v64 = v38 + 2;
      do
      {
        unsigned int v65 = &v39[v63];
        unsigned int v66 = *(v64 - 2);
        int v67 = v66 >> 6;
        unsigned int v68 = *(v64 - 1);
        unsigned int v69 = v68 >> 6;
        int32x2_t v70 = (unsigned __int16 *)((char *)v64 + v15);
        unsigned int v71 = *(unsigned __int16 *)((char *)v64 + v15 - 4);
        unsigned int v72 = *(unsigned __int16 *)((char *)v64 + v15 - 2);
        if (v66 >> 6 >= 0x3C0) {
          int v67 = 960;
        }
        if (v66 >= 0x1000) {
          int v73 = v67;
        }
        else {
          int v73 = 64;
        }
        unsigned int v74 = v72 >> 6;
        if (v69 >= 0x3C0) {
          unsigned int v69 = 960;
        }
        if (v68 >= 0x1000) {
          int v75 = v69;
        }
        else {
          int v75 = 64;
        }
        if (v71 >> 6 >= 0x3C0) {
          int v76 = 960;
        }
        else {
          int v76 = v71 >> 6;
        }
        if (v71 < 0x1000) {
          int v76 = 64;
        }
        if (v74 >= 0x3C0) {
          unsigned int v74 = 960;
        }
        unsigned int v77 = *v64;
        unsigned int v78 = v77 >> 6;
        BOOL v79 = v72 >= 0x1000;
        unsigned int v80 = v64[1];
        unsigned int v81 = v80 >> 6;
        unsigned int v82 = *v70;
        unsigned int v83 = v82 >> 6;
        unsigned int v84 = v70[1];
        if (!v79) {
          unsigned int v74 = 64;
        }
        if (v78 >= 0x3C0) {
          unsigned int v78 = 960;
        }
        if (v77 >= 0x1000) {
          int v85 = v78;
        }
        else {
          int v85 = 64;
        }
        unsigned int v86 = v84 >> 6;
        if (v81 >= 0x3C0) {
          unsigned int v81 = 960;
        }
        if (v80 >= 0x1000) {
          int v87 = v81;
        }
        else {
          int v87 = 64;
        }
        if (v83 >= 0x3C0) {
          unsigned int v83 = 960;
        }
        unint64_t v88 = (613566757 * (unint64_t)((-4194240 - v73 + (v73 << 16)) >> 7)) >> 32;
        if (v82 >= 0x1000) {
          int v89 = v83;
        }
        else {
          int v89 = 64;
        }
        unint64_t v90 = 613566757 * ((-4194240 - v75 + (v75 << 16)) >> 7);
        if (v86 >= 0x3C0) {
          unsigned int v86 = 960;
        }
        unint64_t v91 = HIDWORD(v90);
        unint64_t v92 = (613566757 * (unint64_t)((-4194240 - v76 + (v76 << 16)) >> 7)) >> 32;
        uint64_t v93 = 613566757 * ((-4194240 - v74 + (v74 << 16)) >> 7);
        if (v84 >= 0x1000) {
          int v94 = v86;
        }
        else {
          int v94 = 64;
        }
        *unsigned int v65 = (v88
                            + ((613566757 * (unint64_t)((-4194240 - v85 + (v85 << 16)) >> 7)) >> 32)
                            + v92
                            + ((613566757 * (unint64_t)((-4194240 - v89 + (v89 << 16)) >> 7)) >> 32)
                            + 2) >> 2;
        v65[1] = (v91
                              + ((613566757 * (unint64_t)((-4194240 - v87 + (v87 << 16)) >> 7)) >> 32)
                              + HIDWORD(v93)
                              + ((613566757 * (unint64_t)((-4194240 - v94 + (v94 << 16)) >> 7)) >> 32)
                              + 2) >> 2;
        v63 += 2;
        v64 += 4;
      }
      while (v63 < v37);
    }
    v16 += v15;
    uint64_t v22 = (_WORD *)((char *)v22 + v153);
  }
  if (v26 != v36)
  {
    unint64_t v95 = 0;
    unint64_t v96 = v26 - v36;
    do
    {
      uint64_t v97 = v16;
      unsigned int v98 = v22;
      if (v8)
      {
        unsigned int v99 = *v16;
        int v100 = v99 >> 6;
        unsigned int v101 = v16[1];
        unsigned int v102 = *(unsigned __int16 *)((char *)v16 + v15);
        unsigned int v103 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v99 >> 6 >= 0x3C0) {
          int v100 = 960;
        }
        if (v99 >= 0x1000) {
          int v104 = v100;
        }
        else {
          int v104 = 64;
        }
        if (v101 >> 6 >= 0x3C0) {
          int v105 = 960;
        }
        else {
          int v105 = v101 >> 6;
        }
        if (v101 < 0x1000) {
          int v105 = 64;
        }
        if (v102 >> 6 >= 0x3C0) {
          int v106 = 960;
        }
        else {
          int v106 = v102 >> 6;
        }
        if (v102 >= 0x1000) {
          int v107 = v106;
        }
        else {
          int v107 = 64;
        }
        if (v103 >> 6 >= 0x3C0) {
          int v108 = 960;
        }
        else {
          int v108 = v103 >> 6;
        }
        if (v103 >= 0x1000) {
          int v109 = v108;
        }
        else {
          int v109 = 64;
        }
        unsigned int v110 = v16[2];
        int v111 = v110 >> 6;
        unsigned int v112 = v16[3];
        uint64_t v113 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        unsigned int v114 = *v113;
        unsigned int v115 = v113[1];
        if (v110 >> 6 >= 0x3C0) {
          int v111 = 960;
        }
        if (v110 >= 0x1000) {
          int v116 = v111;
        }
        else {
          int v116 = 64;
        }
        if (v112 >> 6 >= 0x3C0) {
          int v117 = 960;
        }
        else {
          int v117 = v112 >> 6;
        }
        if (v112 < 0x1000) {
          int v117 = 64;
        }
        if (v114 >> 6 >= 0x3C0) {
          int v118 = 960;
        }
        else {
          int v118 = v114 >> 6;
        }
        unsigned int v119 = -4194240 - v104 + (v104 << 16);
        if (v114 < 0x1000) {
          int v118 = 64;
        }
        unint64_t v120 = (613566757 * (unint64_t)(v119 >> 7)) >> 32;
        if (v115 >> 6 >= 0x3C0) {
          int v121 = 960;
        }
        else {
          int v121 = v115 >> 6;
        }
        if (v115 < 0x1000) {
          int v121 = 64;
        }
        uint64_t v97 = v16 + 4;
        *uint64_t v22 = (v120
                            + ((613566757 * (unint64_t)((-4194240 - v116 + (v116 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v107 + (v107 << 16)) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((-4194240 - v118 + (v118 << 16)) >> 7)) >> 32)
                            + 2) >> 2;
        v22[1] = (((613566757 * (unint64_t)((-4194240 - v105 + (v105 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v117 + (v117 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v109 + (v109 << 16)) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((-4194240 - v121 + (v121 << 16)) >> 7)) >> 32)
                              + 2) >> 2;
        unsigned int v98 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v122 = 0;
        uint64_t v123 = v97 + 2;
        do
        {
          uint64_t v124 = &v98[v122];
          unsigned int v125 = *(v123 - 2);
          int v126 = v125 >> 6;
          unsigned int v127 = *(v123 - 1);
          unsigned int v128 = v127 >> 6;
          unsigned int v129 = (unsigned __int16 *)((char *)v123 + v15);
          unsigned int v130 = *(unsigned __int16 *)((char *)v123 + v15 - 4);
          unsigned int v131 = *(unsigned __int16 *)((char *)v123 + v15 - 2);
          if (v125 >> 6 >= 0x3C0) {
            int v126 = 960;
          }
          if (v125 >= 0x1000) {
            int v132 = v126;
          }
          else {
            int v132 = 64;
          }
          unsigned int v133 = v131 >> 6;
          if (v128 >= 0x3C0) {
            unsigned int v128 = 960;
          }
          if (v127 >= 0x1000) {
            int v134 = v128;
          }
          else {
            int v134 = 64;
          }
          if (v130 >> 6 >= 0x3C0) {
            int v135 = 960;
          }
          else {
            int v135 = v130 >> 6;
          }
          if (v130 < 0x1000) {
            int v135 = 64;
          }
          if (v133 >= 0x3C0) {
            unsigned int v133 = 960;
          }
          unsigned int v136 = *v123;
          unsigned int v137 = v136 >> 6;
          BOOL v79 = v131 >= 0x1000;
          unsigned int v138 = v123[1];
          unsigned int v139 = v138 >> 6;
          unsigned int v140 = *v129;
          unsigned int v141 = v140 >> 6;
          unsigned int v142 = v129[1];
          if (!v79) {
            unsigned int v133 = 64;
          }
          if (v137 >= 0x3C0) {
            unsigned int v137 = 960;
          }
          if (v136 >= 0x1000) {
            int v143 = v137;
          }
          else {
            int v143 = 64;
          }
          unsigned int v144 = v142 >> 6;
          if (v139 >= 0x3C0) {
            unsigned int v139 = 960;
          }
          if (v138 >= 0x1000) {
            int v145 = v139;
          }
          else {
            int v145 = 64;
          }
          if (v141 >= 0x3C0) {
            unsigned int v141 = 960;
          }
          unint64_t v146 = (613566757 * (unint64_t)((-4194240 - v132 + (v132 << 16)) >> 7)) >> 32;
          if (v140 < 0x1000) {
            unsigned int v141 = 64;
          }
          unint64_t v147 = 613566757 * ((-4194240 - v134 + (v134 << 16)) >> 7);
          if (v144 >= 0x3C0) {
            unsigned int v144 = 960;
          }
          unint64_t v148 = HIDWORD(v147);
          unint64_t v149 = (613566757 * (unint64_t)((-4194240 - v135 + (v135 << 16)) >> 7)) >> 32;
          uint64_t v150 = 613566757 * ((-4194240 - v133 + (v133 << 16)) >> 7);
          if (v142 >= 0x1000) {
            int v151 = v144;
          }
          else {
            int v151 = 64;
          }
          *uint64_t v124 = (v146
                               + ((613566757 * (unint64_t)((-4194240 - v143 + (v143 << 16)) >> 7)) >> 32)
                               + v149
                               + ((613566757 * (unint64_t)((-4194240 - v141 + (v141 << 16)) >> 7)) >> 32)
                               + 2) >> 2;
          v124[1] = (v148
                                 + ((613566757 * (unint64_t)((-4194240 - v145 + (v145 << 16)) >> 7)) >> 32)
                                 + HIDWORD(v150)
                                 + ((613566757 * (unint64_t)((-4194240 - v151 + (v151 << 16)) >> 7)) >> 32)
                                 + 2) >> 2;
          v122 += 2;
          v123 += 4;
        }
        while (v122 < v37);
      }
      v16 += v15;
      uint64_t v22 = (_WORD *)((char *)v22 + v153);
      v95 += 2;
    }
    while (v95 < v96);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * (v10 + v9);
    uint64_t v31 = *a8;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v30 + v32;
    uint64_t v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC) {
            unsigned int v36 = 940;
          }
          if (v36 <= 0x40) {
            unsigned int v36 = 64;
          }
          *(_WORD *)(v34 + 2 * i) = (-4194240 - v36 + (v36 << 16)) / 0x36C;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v41 = *v16;
      int v42 = v41 >> 6;
      unsigned int v43 = v16[1];
      unsigned int v44 = v43 >> 6;
      if (v41 >> 6 >= 0x3C0) {
        int v42 = 960;
      }
      if (v41 < 0x1000) {
        int v42 = 64;
      }
      if (v44 >= 0x3C0) {
        unsigned int v44 = 960;
      }
      if (v43 >= 0x1000) {
        int v45 = v44;
      }
      else {
        int v45 = 64;
      }
      unsigned int v39 = v16 + 4;
      *unint64_t v23 = (613566757 * (unint64_t)((-4194240 - v42 + (v42 << 16)) >> 7)) >> 32;
      v23[1] = (613566757 * (unint64_t)((-4194240 - v45 + (v45 << 16)) >> 7)) >> 32;
      unsigned int v40 = v23 + 2;
    }
    else
    {
      unsigned int v39 = v16;
      unsigned int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = &v40[v46];
        unsigned int v48 = *v39;
        int v49 = v48 >> 6;
        unsigned int v50 = v39[1];
        if (v48 >> 6 >= 0x3C0) {
          int v49 = 960;
        }
        if (v48 >= 0x1000) {
          int v51 = v49;
        }
        else {
          int v51 = 64;
        }
        if (v50 >> 6 >= 0x3C0) {
          int v52 = 960;
        }
        else {
          int v52 = v50 >> 6;
        }
        if (v50 < 0x1000) {
          int v52 = 64;
        }
        *int v47 = (613566757 * (unint64_t)((-4194240 - v51 + (v51 << 16)) >> 7)) >> 32;
        v47[1] = (613566757 * (unint64_t)((-4194240 - v52 + (v52 << 16)) >> 7)) >> 32;
        v46 += 2;
        v39 += 4;
      }
      while (v46 < v38);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    unint64_t v53 = 0;
    unint64_t v54 = v27 - v37;
    uint64_t v55 = 2 * v15;
    do
    {
      int v56 = v16;
      int v57 = v23;
      if (v9)
      {
        unsigned int v58 = *v16;
        int v59 = v58 >> 6;
        unsigned int v60 = v16[1];
        if (v58 >> 6 >= 0x3C0) {
          int v59 = 960;
        }
        if (v58 < 0x1000) {
          int v59 = 64;
        }
        if (v60 >> 6 >= 0x3C0) {
          int v61 = 960;
        }
        else {
          int v61 = v60 >> 6;
        }
        if (v60 >= 0x1000) {
          int v62 = v61;
        }
        else {
          int v62 = 64;
        }
        int v56 = v16 + 4;
        *unint64_t v23 = (613566757 * (unint64_t)((-4194240 - v59 + (v59 << 16)) >> 7)) >> 32;
        v23[1] = (613566757 * (unint64_t)((-4194240 - v62 + (v62 << 16)) >> 7)) >> 32;
        int v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v63 = 0;
        do
        {
          unint64_t v64 = &v57[v63];
          unsigned int v65 = *v56;
          int v66 = v65 >> 6;
          unsigned int v67 = v56[1];
          if (v65 >> 6 >= 0x3C0) {
            int v66 = 960;
          }
          if (v65 >= 0x1000) {
            int v68 = v66;
          }
          else {
            int v68 = 64;
          }
          if (v67 >> 6 >= 0x3C0) {
            int v69 = 960;
          }
          else {
            int v69 = v67 >> 6;
          }
          if (v67 < 0x1000) {
            int v69 = 64;
          }
          *unint64_t v64 = (613566757 * (unint64_t)((-4194240 - v68 + (v68 << 16)) >> 7)) >> 32;
          v64[1] = (613566757 * (unint64_t)((-4194240 - v69 + (v69 << 16)) >> 7)) >> 32;
          v63 += 2;
          v56 += 4;
        }
        while (v63 < v38);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v55);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_x444_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + 2 * v14;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(_WORD *)(v24 + 2 * i) & 0xFFC0;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      uint64_t v32 = v13 + 2;
      __int16 v34 = v13[1] & 0xFFC0;
      *uint64_t v17 = *v13 & 0xFFC0;
      v17[1] = v34;
      uint64_t v33 = v17 + 2;
    }
    else
    {
      uint64_t v32 = v13;
      uint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        __int16 v37 = *v32;
        __int16 v38 = v32[1];
        v32 += 2;
        *uint64_t v33 = v37 & 0xFFC0;
        v33[1] = v38 & 0xFFC0;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      __int16 v39 = *v32 & 0xFFC0;
      __int16 v40 = v32[1] & 0xFFC0;
      *uint64_t v33 = v39;
      v33[1] = v40;
    }
    unint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      unsigned int v43 = v13;
      unsigned int v44 = v17;
      if (v28)
      {
        unsigned int v43 = v13 + 2;
        __int16 v45 = v13[1] & 0xFFC0;
        *uint64_t v17 = *v13 & 0xFFC0;
        v17[1] = v45;
        unsigned int v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          __int16 v48 = *v43;
          __int16 v49 = v43[1];
          v43 += 2;
          _WORD *v44 = v48 & 0xFFC0;
          v44[1] = v49 & 0xFFC0;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        __int16 v50 = *v43 & 0xFFC0;
        __int16 v51 = v43[1] & 0xFFC0;
        _WORD *v44 = v50;
        v44[1] = v51;
      }
      unint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      __int16 v52 = *v13;
      __int16 v53 = v13[1];
      v13 += 2;
      *uint64_t v17 = v52 & 0xFFC0;
      v17[1] = v53 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        __int16 v55 = *v13;
        __int16 v56 = v13[1];
        v13 += 2;
        *uint64_t v17 = v55 & 0xFFC0;
        v17[1] = v56 & 0xFFC0;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      __int16 v57 = *v13 & 0xFFC0;
      __int16 v58 = v13[1] & 0xFFC0;
      *uint64_t v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(_WORD *)(v22 + 2 * i) & 0xFFC0;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      unint64_t v30 = v13 + 2;
      __int16 v32 = v13[1] & 0xFFC0;
      *uint64_t v17 = *v13 & 0xFFC0;
      v17[1] = v32;
      unint64_t v31 = v17 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      unint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        __int16 v35 = *v30;
        __int16 v36 = v30[1];
        v30 += 2;
        _WORD *v31 = v35 & 0xFFC0;
        v31[1] = v36 & 0xFFC0;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      __int16 v37 = *v30 & 0xFFC0;
      __int16 v38 = v30[1] & 0xFFC0;
      _WORD *v31 = v37;
      v31[1] = v38;
    }
    unint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      unint64_t v41 = v13;
      uint64_t v42 = v17;
      if (v26)
      {
        unint64_t v41 = v13 + 2;
        __int16 v43 = v13[1] & 0xFFC0;
        *uint64_t v17 = *v13 & 0xFFC0;
        v17[1] = v43;
        uint64_t v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          __int16 v46 = *v41;
          __int16 v47 = v41[1];
          v41 += 2;
          *uint64_t v42 = v46 & 0xFFC0;
          v42[1] = v47 & 0xFFC0;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        __int16 v48 = *v41 & 0xFFC0;
        __int16 v49 = v41[1] & 0xFFC0;
        *uint64_t v42 = v48;
        v42[1] = v49;
      }
      unint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      __int16 v50 = *v13;
      __int16 v51 = v13[1];
      v13 += 2;
      *uint64_t v17 = v50 & 0xFFC0;
      v17[1] = v51 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        __int16 v53 = *v13;
        __int16 v54 = v13[1];
        v13 += 2;
        *uint64_t v17 = v53 & 0xFFC0;
        v17[1] = v54 & 0xFFC0;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      __int16 v55 = *v13 & 0xFFC0;
      __int16 v56 = v13[1] & 0xFFC0;
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v25 = *(unsigned __int16 *)(v23 + 2 * i) >> 6;
          if (v25 >= 0x3AC) {
            unsigned int v25 = 940;
          }
          if (v25 <= 0x40) {
            unsigned int v25 = 64;
          }
          *(_WORD *)(v22 + 2 * i) = 16 * ((-262080 - v25 + (v25 << 12)) / 0x36C);
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v26 = v8 & 1;
  if (v18 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unsigned int v34 = *v13;
      int v35 = v34 >> 6;
      unsigned int v36 = v13[1];
      if (v34 >> 6 >= 0x3C0) {
        int v35 = 960;
      }
      if (v34 >= 0x1000) {
        int v37 = v35;
      }
      else {
        int v37 = 64;
      }
      if (v36 >> 6 >= 0x3C0) {
        int v38 = 960;
      }
      else {
        int v38 = v36 >> 6;
      }
      if (v36 >= 0x1000) {
        int v39 = v38;
      }
      else {
        int v39 = 64;
      }
      __int16 v32 = v13 + 2;
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-262080 - v37 + (v37 << 12)) >> 7)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-262080 - v39 + (v39 << 12)) >> 7)) >> 32);
      unint64_t v33 = v17 + 2;
    }
    else
    {
      __int16 v32 = v13;
      unint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v40 = 0;
    }
    else
    {
      unint64_t v41 = v10 - v30;
      do
      {
        unsigned int v42 = *v32;
        int v43 = v42 >> 6;
        unsigned int v44 = v32[1];
        if (v42 >> 6 >= 0x3C0) {
          int v43 = 960;
        }
        if (v42 >= 0x1000) {
          int v45 = v43;
        }
        else {
          int v45 = 64;
        }
        if (v44 >> 6 >= 0x3C0) {
          int v46 = 960;
        }
        else {
          int v46 = v44 >> 6;
        }
        if (v44 < 0x1000) {
          int v46 = 64;
        }
        v32 += 2;
        *unint64_t v33 = 16 * ((613566757 * (unint64_t)((-262080 - v45 + (v45 << 12)) >> 7)) >> 32);
        v33[1] = 16 * ((613566757 * (unint64_t)((-262080 - v46 + (v46 << 12)) >> 7)) >> 32);
        v33 += 2;
        --v41;
      }
      while (v41);
      unint64_t v40 = v10 - v30;
    }
    if (v40 + v29 < v10)
    {
      unsigned int v47 = *v32;
      int v48 = v47 >> 6;
      unsigned int v49 = v32[1];
      unsigned int v50 = v49 >> 6;
      if (v47 >> 6 >= 0x3C0) {
        int v48 = 960;
      }
      if (v47 < 0x1000) {
        int v48 = 64;
      }
      if (v50 >= 0x3C0) {
        unsigned int v50 = 960;
      }
      if (v49 >= 0x1000) {
        int v51 = v50;
      }
      else {
        int v51 = 64;
      }
      *unint64_t v33 = 16 * ((613566757 * (unint64_t)((-262080 - v48 + (v48 << 12)) >> 7)) >> 32);
      v33[1] = 16 * ((613566757 * (unint64_t)((-262080 - v51 + (v51 << 12)) >> 7)) >> 32);
    }
    unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    unint64_t v52 = 0;
  }
  else
  {
    uint64_t v53 = 0;
    unint64_t v52 = v18 - v27;
    do
    {
      __int16 v54 = v13;
      __int16 v55 = v17;
      if (v28)
      {
        unsigned int v56 = *v13;
        int v57 = v56 >> 6;
        unsigned int v58 = v13[1];
        if (v56 >> 6 >= 0x3C0) {
          int v57 = 960;
        }
        if (v56 >= 0x1000) {
          int v59 = v57;
        }
        else {
          int v59 = 64;
        }
        if (v58 >> 6 >= 0x3C0) {
          int v60 = 960;
        }
        else {
          int v60 = v58 >> 6;
        }
        if (v58 >= 0x1000) {
          int v61 = v60;
        }
        else {
          int v61 = 64;
        }
        __int16 v54 = v13 + 2;
        *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-262080 - v59 + (v59 << 12)) >> 7)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((-262080 - v61 + (v61 << 12)) >> 7)) >> 32);
        __int16 v55 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v62 = 0;
      }
      else
      {
        unint64_t v63 = v10 - v30;
        do
        {
          unsigned int v64 = *v54;
          int v65 = v64 >> 6;
          unsigned int v66 = v54[1];
          if (v64 >> 6 >= 0x3C0) {
            int v65 = 960;
          }
          if (v64 >= 0x1000) {
            int v67 = v65;
          }
          else {
            int v67 = 64;
          }
          if (v66 >> 6 >= 0x3C0) {
            int v68 = 960;
          }
          else {
            int v68 = v66 >> 6;
          }
          if (v66 < 0x1000) {
            int v68 = 64;
          }
          v54 += 2;
          *__int16 v55 = 16 * ((613566757 * (unint64_t)((-262080 - v67 + (v67 << 12)) >> 7)) >> 32);
          v55[1] = 16 * ((613566757 * (unint64_t)((-262080 - v68 + (v68 << 12)) >> 7)) >> 32);
          v55 += 2;
          --v63;
        }
        while (v63);
        unint64_t v62 = v10 - v30;
      }
      if (v62 + v29 < v10)
      {
        unsigned int v69 = *v54;
        int v70 = v69 >> 6;
        unsigned int v71 = v54[1];
        if (v69 >> 6 >= 0x3C0) {
          int v70 = 960;
        }
        if (v69 >= 0x1000) {
          int v72 = v70;
        }
        else {
          int v72 = 64;
        }
        if (v71 >> 6 >= 0x3C0) {
          int v73 = 960;
        }
        else {
          int v73 = v71 >> 6;
        }
        if (v71 >= 0x1000) {
          int v74 = v73;
        }
        else {
          int v74 = 64;
        }
        *__int16 v55 = 16 * ((613566757 * (unint64_t)((-262080 - v72 + (v72 << 12)) >> 7)) >> 32);
        v55[1] = 16 * ((613566757 * (unint64_t)((-262080 - v74 + (v74 << 12)) >> 7)) >> 32);
      }
      unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v53;
    }
    while (v53 != v52);
  }
  if (v52 + v26 < v18)
  {
    if (v28)
    {
      unsigned int v75 = *v13;
      int v76 = v75 >> 6;
      unsigned int v77 = v13[1];
      unsigned int v78 = v77 >> 6;
      if (v75 >> 6 >= 0x3C0) {
        int v76 = 960;
      }
      if (v75 < 0x1000) {
        int v76 = 64;
      }
      if (v78 >= 0x3C0) {
        unsigned int v78 = 960;
      }
      if (v77 >= 0x1000) {
        int v79 = v78;
      }
      else {
        int v79 = 64;
      }
      v13 += 2;
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-262080 - v76 + (v76 << 12)) >> 7)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-262080 - v79 + (v79 << 12)) >> 7)) >> 32);
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v80 = v10 - v30;
      do
      {
        unsigned int v81 = *v13;
        int v82 = v81 >> 6;
        unsigned int v83 = v13[1];
        if (v81 >> 6 >= 0x3C0) {
          int v82 = 960;
        }
        if (v81 >= 0x1000) {
          int v84 = v82;
        }
        else {
          int v84 = 64;
        }
        if (v83 >> 6 >= 0x3C0) {
          int v85 = 960;
        }
        else {
          int v85 = v83 >> 6;
        }
        if (v83 < 0x1000) {
          int v85 = 64;
        }
        v13 += 2;
        *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-262080 - v84 + (v84 << 12)) >> 7)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((-262080 - v85 + (v85 << 12)) >> 7)) >> 32);
        v17 += 2;
        --v80;
      }
      while (v80);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v86 = *v13;
      int v87 = v86 >> 6;
      unsigned int v88 = v13[1];
      unsigned int v89 = v88 >> 6;
      if (v86 >> 6 >= 0x3C0) {
        int v87 = 960;
      }
      if (v86 < 0x1000) {
        int v87 = 64;
      }
      if (v89 >= 0x3C0) {
        unsigned int v89 = 960;
      }
      if (v88 >= 0x1000) {
        int v90 = v89;
      }
      else {
        int v90 = 64;
      }
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-262080 - v87 + (v87 << 12)) >> 7)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-262080 - v90 + (v90 << 12)) >> 7)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unsigned int v36 = v14 + 4;
      int v38 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
      *uint64_t v21 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
      v21[1] = 8 * v38;
      int v37 = v21 + 2;
    }
    else
    {
      unsigned int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        int v41 = (((unsigned __int16)v36[3] >> 4) & 0xFFC) + (((unsigned __int16)v36[1] >> 4) & 0xFFC);
        *unint64_t v40 = 8 * (((v36[2] >> 4) & 0xFFC) + ((*v36 >> 4) & 0xFFC));
        v40[1] = 8 * v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unsigned int v44 = v14;
      int v45 = v21;
      if (v34)
      {
        unsigned int v44 = v14 + 4;
        int v46 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
        *uint64_t v21 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
        v21[1] = 8 * v46;
        int v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          int v49 = (((unsigned __int16)v44[3] >> 4) & 0xFFC) + (((unsigned __int16)v44[1] >> 4) & 0xFFC);
          _WORD *v48 = 8 * (((v44[2] >> 4) & 0xFFC) + ((*v44 >> 4) & 0xFFC));
          v48[1] = 8 * v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      unsigned int v50 = *v14;
      unsigned int v51 = v14[1];
      unsigned int v52 = v14[2];
      unsigned int v53 = v14[3];
      v14 += 4;
      *uint64_t v21 = 8 * (((v52 >> 4) & 0xFFC) + ((v50 >> 4) & 0xFFC));
      v21[1] = 8 * (((v53 >> 4) & 0xFFC) + ((v51 >> 4) & 0xFFC));
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v21[v54];
        int v56 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
        *__int16 v55 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
        v55[1] = 8 * v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unsigned int v36 = v14 + 4;
      __int16 v38 = v14[1] & 0xFFC0;
      *uint64_t v21 = *v14 & 0xFFC0;
      v21[1] = v38;
      int v37 = v21 + 2;
    }
    else
    {
      unsigned int v36 = v14;
      int v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        __int16 v41 = v36[1] & 0xFFC0;
        *unint64_t v40 = *v36 & 0xFFC0;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unsigned int v44 = v14;
      int v45 = v21;
      if (v34)
      {
        unsigned int v44 = v14 + 4;
        __int16 v46 = v14[1] & 0xFFC0;
        *uint64_t v21 = *v14 & 0xFFC0;
        v21[1] = v46;
        int v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          __int16 v49 = v44[1] & 0xFFC0;
          _WORD *v48 = *v44 & 0xFFC0;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      __int16 v50 = *v14;
      __int16 v51 = v14[1];
      v14 += 4;
      *uint64_t v21 = v50 & 0xFFC0;
      v21[1] = v51 & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        unsigned int v53 = &v21[v52];
        __int16 v54 = v14[1] & 0xFFC0;
        *unsigned int v53 = *v14 & 0xFFC0;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      int v36 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
      *uint64_t v21 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
      v21[1] = 8 * v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        __int16 v38 = &v35[v37];
        int v39 = (((unsigned __int16)v34[3] >> 4) & 0xFFC) + (((unsigned __int16)v34[1] >> 4) & 0xFFC);
        *__int16 v38 = 8 * (((v34[2] >> 4) & 0xFFC) + ((*v34 >> 4) & 0xFFC));
        v38[1] = 8 * v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        int v44 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
        *uint64_t v21 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
        v21[1] = 8 * v44;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          int v47 = (((unsigned __int16)v42[3] >> 4) & 0xFFC) + (((unsigned __int16)v42[1] >> 4) & 0xFFC);
          *__int16 v46 = 8 * (((v42[2] >> 4) & 0xFFC) + ((*v42 >> 4) & 0xFFC));
          v46[1] = 8 * v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v48 = *v14;
      unsigned int v49 = v14[1];
      unsigned int v50 = v14[2];
      unsigned int v51 = v14[3];
      v14 += 4;
      *uint64_t v21 = 8 * (((v50 >> 4) & 0xFFC) + ((v48 >> 4) & 0xFFC));
      v21[1] = 8 * (((v51 >> 4) & 0xFFC) + ((v49 >> 4) & 0xFFC));
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        unsigned int v53 = &v21[v52];
        int v54 = ((v14[3] >> 4) & 0xFFC) + ((v14[1] >> 4) & 0xFFC);
        *unsigned int v53 = 8 * (((v14[2] >> 4) & 0xFFC) + ((*v14 >> 4) & 0xFFC));
        v53[1] = 8 * v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      char v34 = v14 + 4;
      __int16 v36 = v14[1] & 0xFFC0;
      *uint64_t v21 = *v14 & 0xFFC0;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      char v34 = v14;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        __int16 v38 = &v35[v37];
        __int16 v39 = v34[1] & 0xFFC0;
        *__int16 v38 = *v34 & 0xFFC0;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unint64_t v42 = v14;
      uint64_t v43 = v21;
      if (v32)
      {
        unint64_t v42 = v14 + 4;
        __int16 v44 = v14[1] & 0xFFC0;
        *uint64_t v21 = *v14 & 0xFFC0;
        v21[1] = v44;
        uint64_t v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          __int16 v47 = v42[1] & 0xFFC0;
          *__int16 v46 = *v42 & 0xFFC0;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14;
      __int16 v49 = v14[1];
      v14 += 4;
      *uint64_t v21 = v48 & 0xFFC0;
      v21[1] = v49 & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        unsigned int v51 = &v21[v50];
        __int16 v52 = v14[1] & 0xFFC0;
        *unsigned int v51 = *v14 & 0xFFC0;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 6;
          if (v30 >= 0x3AC) {
            unsigned int v30 = 940;
          }
          if (v30 <= 0x40) {
            unsigned int v30 = 64;
          }
          *(_WORD *)(v27 + 2 * i) = 16 * ((-262080 - v30 + (v30 << 12)) / 0x36C);
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      int v38 = v37 >> 6;
      unsigned int v39 = v14[1];
      unsigned int v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0) {
        int v38 = 960;
      }
      if (v37 < 0x1000) {
        int v38 = 64;
      }
      if (v40 >= 0x3C0) {
        unsigned int v40 = 960;
      }
      if (v39 >= 0x1000) {
        int v41 = v40;
      }
      else {
        int v41 = 64;
      }
      unsigned int v42 = v14[2];
      int v43 = v42 >> 6;
      unsigned int v44 = v14[3];
      if (v42 >> 6 >= 0x3C0) {
        int v43 = 960;
      }
      if (v42 >= 0x1000) {
        int v45 = v43;
      }
      else {
        int v45 = 64;
      }
      if (v44 >> 6 >= 0x3C0) {
        int v46 = 960;
      }
      else {
        int v46 = v44 >> 6;
      }
      if (v44 < 0x1000) {
        int v46 = 64;
      }
      unint64_t v35 = v14 + 4;
      *uint64_t v21 = (8
            * (((613566757 * (unint64_t)((-262080 - v45 + (v45 << 12)) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((-262080 - v38 + (v38 << 12)) >> 7)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((-262080 - v46 + (v46 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v41 + (v41 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
      __int16 v36 = v21 + 2;
    }
    else
    {
      unint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v47 = 0;
      do
      {
        __int16 v48 = &v36[v47];
        unsigned int v49 = *v35;
        int v50 = v49 >> 6;
        unsigned int v51 = v35[1];
        if (v49 >> 6 >= 0x3C0) {
          int v50 = 960;
        }
        if (v49 >= 0x1000) {
          int v52 = v50;
        }
        else {
          int v52 = 64;
        }
        if (v51 >> 6 >= 0x3C0) {
          int v53 = 960;
        }
        else {
          int v53 = v51 >> 6;
        }
        if (v51 < 0x1000) {
          int v53 = 64;
        }
        unsigned int v54 = v35[2];
        int v55 = v54 >> 6;
        unsigned int v56 = v35[3];
        if (v54 >> 6 >= 0x3C0) {
          int v55 = 960;
        }
        if (v54 >= 0x1000) {
          int v57 = v55;
        }
        else {
          int v57 = 64;
        }
        if (v56 >> 6 >= 0x3C0) {
          int v58 = 960;
        }
        else {
          int v58 = v56 >> 6;
        }
        if (v56 < 0x1000) {
          int v58 = 64;
        }
        _WORD *v48 = (8
              * (((613566757 * (unint64_t)((-262080 - v57 + (v57 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v52 + (v52 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
        v48[1] = (8
                * (((613566757 * (unint64_t)((-262080 - v58 + (v58 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v53 + (v53 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
        v47 += 2;
        v35 += 4;
      }
      while (v47 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v59 = 0;
  }
  else
  {
    uint64_t v60 = 0;
    unint64_t v59 = v9 - v32;
    do
    {
      int v61 = v14;
      unint64_t v62 = v21;
      if (v33)
      {
        unsigned int v63 = *v14;
        int v64 = v63 >> 6;
        unsigned int v65 = v14[1];
        if (v63 >> 6 >= 0x3C0) {
          int v64 = 960;
        }
        if (v63 < 0x1000) {
          int v64 = 64;
        }
        if (v65 >> 6 >= 0x3C0) {
          int v66 = 960;
        }
        else {
          int v66 = v65 >> 6;
        }
        if (v65 >= 0x1000) {
          int v67 = v66;
        }
        else {
          int v67 = 64;
        }
        unsigned int v68 = v14[2];
        int v69 = v68 >> 6;
        unsigned int v70 = v14[3];
        if (v68 >> 6 >= 0x3C0) {
          int v69 = 960;
        }
        if (v68 < 0x1000) {
          int v69 = 64;
        }
        if (v70 >> 6 >= 0x3C0) {
          int v71 = 960;
        }
        else {
          int v71 = v70 >> 6;
        }
        if (v70 >= 0x1000) {
          int v72 = v71;
        }
        else {
          int v72 = 64;
        }
        int v61 = v14 + 4;
        *uint64_t v21 = (8
              * (((613566757 * (unint64_t)((-262080 - v69 + (v69 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v64 + (v64 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (8
                * (((613566757 * (unint64_t)((-262080 - v72 + (v72 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v67 + (v67 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
        unint64_t v62 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v73 = 0;
        do
        {
          int v74 = &v62[v73];
          unsigned int v75 = *v61;
          int v76 = v75 >> 6;
          unsigned int v77 = v61[1];
          if (v75 >> 6 >= 0x3C0) {
            int v76 = 960;
          }
          if (v75 >= 0x1000) {
            int v78 = v76;
          }
          else {
            int v78 = 64;
          }
          if (v77 >> 6 >= 0x3C0) {
            int v79 = 960;
          }
          else {
            int v79 = v77 >> 6;
          }
          if (v77 < 0x1000) {
            int v79 = 64;
          }
          unsigned int v80 = v61[2];
          int v81 = v80 >> 6;
          unsigned int v82 = v61[3];
          if (v80 >> 6 >= 0x3C0) {
            int v81 = 960;
          }
          if (v80 >= 0x1000) {
            int v83 = v81;
          }
          else {
            int v83 = 64;
          }
          if (v82 >> 6 >= 0x3C0) {
            int v84 = 960;
          }
          else {
            int v84 = v82 >> 6;
          }
          if (v82 < 0x1000) {
            int v84 = 64;
          }
          *int v74 = (8
                * (((613566757 * (unint64_t)((-262080 - v83 + (v83 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v78 + (v78 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
          v74[1] = (8
                  * (((613566757 * (unint64_t)((-262080 - v84 + (v84 << 12)) >> 7)) >> 32)
                   + ((613566757 * (unint64_t)((-262080 - v79 + (v79 << 12)) >> 7)) >> 32))
                  + 8) & 0xFFF0;
          v73 += 2;
          v61 += 4;
        }
        while (v73 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v60;
    }
    while (v60 != v59);
  }
  if (v59 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v85 = *v14;
      int v86 = v85 >> 6;
      unsigned int v87 = v14[1];
      unsigned int v88 = v87 >> 6;
      if (v85 >> 6 >= 0x3C0) {
        int v86 = 960;
      }
      if (v85 < 0x1000) {
        int v86 = 64;
      }
      if (v88 >= 0x3C0) {
        unsigned int v88 = 960;
      }
      if (v87 >= 0x1000) {
        int v89 = v88;
      }
      else {
        int v89 = 64;
      }
      unsigned int v90 = v14[2];
      int v91 = v90 >> 6;
      unsigned int v92 = v14[3];
      if (v90 >> 6 >= 0x3C0) {
        int v91 = 960;
      }
      if (v90 >= 0x1000) {
        int v93 = v91;
      }
      else {
        int v93 = 64;
      }
      if (v92 >> 6 >= 0x3C0) {
        int v94 = 960;
      }
      else {
        int v94 = v92 >> 6;
      }
      if (v92 >= 0x1000) {
        int v95 = v94;
      }
      else {
        int v95 = 64;
      }
      v14 += 4;
      *uint64_t v21 = (8
            * (((613566757 * (unint64_t)((-262080 - v93 + (v93 << 12)) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((-262080 - v86 + (v86 << 12)) >> 7)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((-262080 - v95 + (v95 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v89 + (v89 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v96 = 0;
      do
      {
        uint64_t v97 = &v21[v96];
        unsigned int v98 = *v14;
        int v99 = v98 >> 6;
        unsigned int v100 = v14[1];
        if (v98 >> 6 >= 0x3C0) {
          int v99 = 960;
        }
        if (v98 >= 0x1000) {
          int v101 = v99;
        }
        else {
          int v101 = 64;
        }
        if (v100 >> 6 >= 0x3C0) {
          int v102 = 960;
        }
        else {
          int v102 = v100 >> 6;
        }
        if (v100 < 0x1000) {
          int v102 = 64;
        }
        unsigned int v103 = v14[2];
        int v104 = v103 >> 6;
        unsigned int v105 = v14[3];
        if (v103 >> 6 >= 0x3C0) {
          int v104 = 960;
        }
        if (v103 >= 0x1000) {
          int v106 = v104;
        }
        else {
          int v106 = 64;
        }
        if (v105 >> 6 >= 0x3C0) {
          int v107 = 960;
        }
        else {
          int v107 = v105 >> 6;
        }
        if (v105 < 0x1000) {
          int v107 = 64;
        }
        *uint64_t v97 = (8
              * (((613566757 * (unint64_t)((-262080 - v106 + (v106 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v101 + (v101 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
        v97[1] = (8
                * (((613566757 * (unint64_t)((-262080 - v107 + (v107 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v102 + (v102 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
        v96 += 2;
        v14 += 4;
      }
      while (v96 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i) >> 6;
          if (v30 >= 0x3AC) {
            unsigned int v30 = 940;
          }
          if (v30 <= 0x40) {
            unsigned int v30 = 64;
          }
          *(_WORD *)(v27 + 2 * i) = 16 * ((-262080 - v30 + (v30 << 12)) / 0x36C);
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      int v38 = v37 >> 6;
      unsigned int v39 = v14[1];
      unsigned int v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0) {
        int v38 = 960;
      }
      if (v37 < 0x1000) {
        int v38 = 64;
      }
      if (v40 >= 0x3C0) {
        unsigned int v40 = 960;
      }
      if (v39 >= 0x1000) {
        int v41 = v40;
      }
      else {
        int v41 = 64;
      }
      unint64_t v35 = v14 + 4;
      *uint64_t v21 = 16 * ((613566757 * (unint64_t)((-262080 - v38 + (v38 << 12)) >> 7)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-262080 - v41 + (v41 << 12)) >> 7)) >> 32);
      __int16 v36 = v21 + 2;
    }
    else
    {
      unint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v42 = 0;
      do
      {
        int v43 = &v36[v42];
        unsigned int v44 = *v35;
        int v45 = v44 >> 6;
        unsigned int v46 = v35[1];
        if (v44 >> 6 >= 0x3C0) {
          int v45 = 960;
        }
        if (v44 >= 0x1000) {
          int v47 = v45;
        }
        else {
          int v47 = 64;
        }
        if (v46 >> 6 >= 0x3C0) {
          int v48 = 960;
        }
        else {
          int v48 = v46 >> 6;
        }
        if (v46 < 0x1000) {
          int v48 = 64;
        }
        _WORD *v43 = 16 * ((613566757 * (unint64_t)((-262080 - v47 + (v47 << 12)) >> 7)) >> 32);
        v43[1] = 16 * ((613566757 * (unint64_t)((-262080 - v48 + (v48 << 12)) >> 7)) >> 32);
        v42 += 2;
        v35 += 4;
      }
      while (v42 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v49 = 0;
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v49 = v9 - v32;
    do
    {
      unsigned int v51 = v14;
      int v52 = v21;
      if (v33)
      {
        unsigned int v53 = *v14;
        int v54 = v53 >> 6;
        unsigned int v55 = v14[1];
        if (v53 >> 6 >= 0x3C0) {
          int v54 = 960;
        }
        if (v53 < 0x1000) {
          int v54 = 64;
        }
        if (v55 >> 6 >= 0x3C0) {
          int v56 = 960;
        }
        else {
          int v56 = v55 >> 6;
        }
        if (v55 >= 0x1000) {
          int v57 = v56;
        }
        else {
          int v57 = 64;
        }
        unsigned int v51 = v14 + 4;
        *uint64_t v21 = 16 * ((613566757 * (unint64_t)((-262080 - v54 + (v54 << 12)) >> 7)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((-262080 - v57 + (v57 << 12)) >> 7)) >> 32);
        int v52 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v58 = 0;
        do
        {
          unint64_t v59 = &v52[v58];
          unsigned int v60 = *v51;
          int v61 = v60 >> 6;
          unsigned int v62 = v51[1];
          if (v60 >> 6 >= 0x3C0) {
            int v61 = 960;
          }
          if (v60 >= 0x1000) {
            int v63 = v61;
          }
          else {
            int v63 = 64;
          }
          if (v62 >> 6 >= 0x3C0) {
            int v64 = 960;
          }
          else {
            int v64 = v62 >> 6;
          }
          if (v62 < 0x1000) {
            int v64 = 64;
          }
          *unint64_t v59 = 16 * ((613566757 * (unint64_t)((-262080 - v63 + (v63 << 12)) >> 7)) >> 32);
          v59[1] = 16 * ((613566757 * (unint64_t)((-262080 - v64 + (v64 << 12)) >> 7)) >> 32);
          v58 += 2;
          v51 += 4;
        }
        while (v58 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v50;
    }
    while (v50 != v49);
  }
  if (v49 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v65 = *v14;
      int v66 = v65 >> 6;
      unsigned int v67 = v14[1];
      unsigned int v68 = v67 >> 6;
      if (v65 >> 6 >= 0x3C0) {
        int v66 = 960;
      }
      if (v65 < 0x1000) {
        int v66 = 64;
      }
      if (v68 >= 0x3C0) {
        unsigned int v68 = 960;
      }
      if (v67 >= 0x1000) {
        int v69 = v68;
      }
      else {
        int v69 = 64;
      }
      v14 += 4;
      *uint64_t v21 = 16 * ((613566757 * (unint64_t)((-262080 - v66 + (v66 << 12)) >> 7)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-262080 - v69 + (v69 << 12)) >> 7)) >> 32);
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v70 = 0;
      do
      {
        int v71 = &v21[v70];
        unsigned int v72 = *v14;
        int v73 = v72 >> 6;
        unsigned int v74 = v14[1];
        if (v72 >> 6 >= 0x3C0) {
          int v73 = 960;
        }
        if (v72 >= 0x1000) {
          int v75 = v73;
        }
        else {
          int v75 = 64;
        }
        if (v74 >> 6 >= 0x3C0) {
          int v76 = 960;
        }
        else {
          int v76 = v74 >> 6;
        }
        if (v74 < 0x1000) {
          int v76 = 64;
        }
        *int v71 = 16 * ((613566757 * (unint64_t)((-262080 - v75 + (v75 << 12)) >> 7)) >> 32);
        v71[1] = 16 * ((613566757 * (unint64_t)((-262080 - v76 + (v76 << 12)) >> 7)) >> 32);
        v70 += 2;
        v14 += 4;
      }
      while (v70 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * (v10 + v8);
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v40 = (_WORD *)((char *)v16 + v15 + 4);
      unsigned int v41 = *v40;
      unsigned int v42 = v40[1];
      int v38 = v16 + 4;
      int v43 = ((*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4) & 0xFFC)
          + ((unsigned __int16)v16[1] >> 4)
          + (((unsigned __int16)v16[3] >> 4) & 0xFFC)
          + ((v42 >> 4) & 0xFFC);
      *unint64_t v23 = (4
            * (((*(_WORD *)((char *)v16 + v15) >> 4) & 0xFFC)
             + (*v16 >> 4)
             + ((v16[2] >> 4) & 0xFFC)
             + ((v41 >> 4) & 0xFFC))) & 0xFFF0;
      v23[1] = (4 * v43) & 0xFFF0;
      unsigned int v39 = v23 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v44 = 0;
      int v45 = v38 + 2;
      do
      {
        unsigned int v46 = &v39[v44];
        int v47 = ((*(unsigned __int16 *)((char *)v45 + v15 - 2) >> 4) & 0xFFC)
            + ((unsigned __int16)*(v45 - 1) >> 4)
            + (((unsigned __int16)v45[1] >> 4) & 0xFFC)
            + ((*(unsigned __int16 *)((char *)v45 + v15 + 2) >> 4) & 0xFFC);
        *unsigned int v46 = (4
              * (((*(_WORD *)((char *)v45 + v15 - 4) >> 4) & 0xFFC)
               + (*(v45 - 2) >> 4)
               + ((*v45 >> 4) & 0xFFC)
               + ((*(_WORD *)((char *)v45 + v15) >> 4) & 0xFFC))) & 0xFFF0;
        v46[1] = (4 * v47) & 0xFFF0;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v37);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v27 - v36;
    do
    {
      uint64_t v50 = v16;
      unsigned int v51 = v23;
      if (v8)
      {
        int v52 = (_WORD *)((char *)v16 + v15 + 4);
        unsigned int v53 = *v52;
        unsigned int v54 = v52[1];
        uint64_t v50 = v16 + 4;
        int v55 = ((*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4) & 0xFFC)
            + ((unsigned __int16)v16[1] >> 4)
            + (((unsigned __int16)v16[3] >> 4) & 0xFFC)
            + ((v54 >> 4) & 0xFFC);
        *unint64_t v23 = (4
              * (((*(_WORD *)((char *)v16 + v15) >> 4) & 0xFFC)
               + (*v16 >> 4)
               + ((v16[2] >> 4) & 0xFFC)
               + ((v53 >> 4) & 0xFFC))) & 0xFFF0;
        v23[1] = (4 * v55) & 0xFFF0;
        unsigned int v51 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v56 = 0;
        int v57 = v50 + 2;
        do
        {
          unint64_t v58 = &v51[v56];
          int v59 = ((*(unsigned __int16 *)((char *)v57 + v15 - 2) >> 4) & 0xFFC)
              + ((unsigned __int16)*(v57 - 1) >> 4)
              + (((unsigned __int16)v57[1] >> 4) & 0xFFC)
              + ((*(unsigned __int16 *)((char *)v57 + v15 + 2) >> 4) & 0xFFC);
          *unint64_t v58 = (4
                * (((*(_WORD *)((char *)v57 + v15 - 4) >> 4) & 0xFFC)
                 + (*(v57 - 2) >> 4)
                 + ((*v57 >> 4) & 0xFFC)
                 + ((*(_WORD *)((char *)v57 + v15) >> 4) & 0xFFC))) & 0xFFF0;
          v58[1] = (4 * v59) & 0xFFF0;
          v56 += 2;
          v57 += 4;
        }
        while (v56 < v37);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * (v10 + v9);
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      int v38 = v16 + 4;
      __int16 v40 = v16[1] & 0xFFC0;
      *unint64_t v23 = *v16 & 0xFFC0;
      v23[1] = v40;
      unsigned int v39 = v23 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = v38[1] & 0xFFC0;
        *unsigned int v42 = *v38 & 0xFFC0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v27 - v36;
    uint64_t v46 = 2 * v15;
    do
    {
      int v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        int v47 = v16 + 4;
        __int16 v49 = v16[1] & 0xFFC0;
        *unint64_t v23 = *v16 & 0xFFC0;
        v23[1] = v49;
        unint64_t v48 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v50 = 0;
        do
        {
          unsigned int v51 = &v48[v50];
          __int16 v52 = v47[1] & 0xFFC0;
          *unsigned int v51 = *v47 & 0xFFC0;
          v51[1] = v52;
          v50 += 2;
          v47 += 4;
        }
        while (v50 < v37);
      }
      uint64_t v16 = (_WORD *)((char *)v16 + v46);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v142 = a8[1];
  uint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v142 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v8);
  unint64_t v24 = v18 - v17;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v14 - v13;
  unint64_t v26 = v20 - v19;
  if (v25 < v20 - v19) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    uint64_t v30 = *a8;
    if (v13 >= v9) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v29 + v31;
    uint64_t v33 = *a7 + v30 * v19 + v21;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v35 = *(unsigned __int16 *)(v32 + 2 * i) >> 6;
          if (v35 >= 0x3AC) {
            unsigned int v35 = 940;
          }
          if (v35 <= 0x40) {
            unsigned int v35 = 64;
          }
          *(_WORD *)(v33 + 2 * i) = 16 * ((-262080 - v35 + (v35 << 12)) / 0x36C);
        }
      }
      v32 += v28;
      v33 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v23 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v40 = *v16;
      int v41 = v40 >> 6;
      unsigned int v42 = v16[1];
      unsigned int v43 = v42 >> 6;
      unsigned int v44 = *(unsigned __int16 *)((char *)v16 + v15);
      unsigned int v45 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v40 >> 6 >= 0x3C0) {
        int v41 = 960;
      }
      if (v40 < 0x1000) {
        int v41 = 64;
      }
      if (v43 >= 0x3C0) {
        unsigned int v43 = 960;
      }
      if (v42 < 0x1000) {
        unsigned int v43 = 64;
      }
      if (v44 >> 6 >= 0x3C0) {
        int v46 = 960;
      }
      else {
        int v46 = v44 >> 6;
      }
      if (v44 >= 0x1000) {
        int v47 = v46;
      }
      else {
        int v47 = 64;
      }
      if (v45 >> 6 >= 0x3C0) {
        int v48 = 960;
      }
      else {
        int v48 = v45 >> 6;
      }
      if (v45 >= 0x1000) {
        int v49 = v48;
      }
      else {
        int v49 = 64;
      }
      unsigned int v50 = v16[2];
      int v51 = v50 >> 6;
      unsigned int v52 = v16[3];
      unsigned int v53 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      unsigned int v54 = *v53;
      unsigned int v55 = v53[1];
      if (v50 >> 6 >= 0x3C0) {
        int v51 = 960;
      }
      if (v50 >= 0x1000) {
        int v56 = v51;
      }
      else {
        int v56 = 64;
      }
      if (v52 >> 6 >= 0x3C0) {
        int v57 = 960;
      }
      else {
        int v57 = v52 >> 6;
      }
      if (v52 < 0x1000) {
        int v57 = 64;
      }
      if (v54 >> 6 >= 0x3C0) {
        int v58 = 960;
      }
      else {
        int v58 = v54 >> 6;
      }
      if (v54 < 0x1000) {
        int v58 = 64;
      }
      unsigned int v59 = -262080 - v41 + (v41 << 12);
      if (v55 >> 6 >= 0x3C0) {
        int v60 = 960;
      }
      else {
        int v60 = v55 >> 6;
      }
      if (v55 >= 0x1000) {
        int v61 = v60;
      }
      else {
        int v61 = 64;
      }
      int v38 = v16 + 4;
      *uint64_t v22 = (4
            * (((613566757 * (unint64_t)((-262080 - v47 + (v47 << 12)) >> 7)) >> 32)
             + ((613566757 * (unint64_t)(v59 >> 7)) >> 32)
             + ((613566757 * (unint64_t)((-262080 - v56 + (v56 << 12)) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((-262080 - v58 + (v58 << 12)) >> 7)) >> 32))
            + 8) & 0xFFF0;
      v22[1] = (4
              * (((613566757 * (unint64_t)((-262080 - v49 + (v49 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v43 + (v43 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v57 + (v57 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v61 + (v61 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
      unsigned int v39 = v22 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v62 = 0;
      int v63 = v38 + 2;
      do
      {
        int v64 = &v39[v62];
        unsigned int v65 = *(v63 - 2);
        int v66 = v65 >> 6;
        unsigned int v67 = *(v63 - 1);
        unsigned int v68 = (unsigned __int16 *)((char *)v63 + v15);
        unsigned int v69 = *(unsigned __int16 *)((char *)v63 + v15 - 4);
        unsigned int v70 = *(unsigned __int16 *)((char *)v63 + v15 - 2);
        if (v65 >> 6 >= 0x3C0) {
          int v66 = 960;
        }
        if (v65 >= 0x1000) {
          int v71 = v66;
        }
        else {
          int v71 = 64;
        }
        if (v67 >> 6 >= 0x3C0) {
          int v72 = 960;
        }
        else {
          int v72 = v67 >> 6;
        }
        if (v67 < 0x1000) {
          int v72 = 64;
        }
        if (v69 >> 6 >= 0x3C0) {
          int v73 = 960;
        }
        else {
          int v73 = v69 >> 6;
        }
        if (v69 < 0x1000) {
          int v73 = 64;
        }
        if (v70 >> 6 >= 0x3C0) {
          int v74 = 960;
        }
        else {
          int v74 = v70 >> 6;
        }
        BOOL v75 = v70 >= 0x1000;
        unsigned int v76 = *v63;
        unsigned int v77 = v76 >> 6;
        unsigned int v78 = v63[1];
        if (!v75) {
          int v74 = 64;
        }
        unsigned int v79 = *v68;
        unsigned int v80 = v68[1];
        if (v77 >= 0x3C0) {
          unsigned int v77 = 960;
        }
        if (v76 >= 0x1000) {
          int v81 = v77;
        }
        else {
          int v81 = 64;
        }
        if (v78 >> 6 >= 0x3C0) {
          int v82 = 960;
        }
        else {
          int v82 = v78 >> 6;
        }
        BOOL v75 = v78 >= 0x1000;
        unsigned int v83 = v80 >> 6;
        if (!v75) {
          int v82 = 64;
        }
        if (v79 >> 6 >= 0x3C0) {
          int v84 = 960;
        }
        else {
          int v84 = v79 >> 6;
        }
        if (v79 < 0x1000) {
          int v84 = 64;
        }
        unint64_t v85 = (613566757 * (unint64_t)((-262080 - v71 + (v71 << 12)) >> 7)) >> 32;
        if (v83 >= 0x3C0) {
          unsigned int v83 = 960;
        }
        unint64_t v86 = (613566757 * (unint64_t)((-262080 - v72 + (v72 << 12)) >> 7)) >> 32;
        unint64_t v87 = (613566757 * (unint64_t)((-262080 - v73 + (v73 << 12)) >> 7)) >> 32;
        if (v80 >= 0x1000) {
          int v88 = v83;
        }
        else {
          int v88 = 64;
        }
        *int v64 = (4
              * (v87
               + v85
               + ((613566757 * (unint64_t)((-262080 - v81 + (v81 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v84 + (v84 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
        v64[1] = (4
                * (((613566757 * (unint64_t)((-262080 - v74 + (v74 << 12)) >> 7)) >> 32)
                 + v86
                 + ((613566757 * (unint64_t)((-262080 - v82 + (v82 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v88 + (v88 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
        v62 += 2;
        v63 += 4;
      }
      while (v62 < v37);
    }
    v16 += v15;
    uint64_t v22 = (_WORD *)((char *)v22 + v142);
  }
  if (v26 != v36)
  {
    unint64_t v89 = 0;
    unint64_t v90 = v26 - v36;
    do
    {
      int v91 = v16;
      unsigned int v92 = v22;
      if (v8)
      {
        unsigned int v93 = *v16;
        int v94 = v93 >> 6;
        unsigned int v95 = v16[1];
        unsigned int v96 = *(unsigned __int16 *)((char *)v16 + v15);
        unsigned int v97 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v93 >> 6 >= 0x3C0) {
          int v94 = 960;
        }
        if (v93 >= 0x1000) {
          int v98 = v94;
        }
        else {
          int v98 = 64;
        }
        if (v95 >> 6 >= 0x3C0) {
          int v99 = 960;
        }
        else {
          int v99 = v95 >> 6;
        }
        if (v95 < 0x1000) {
          int v99 = 64;
        }
        if (v96 >> 6 >= 0x3C0) {
          int v100 = 960;
        }
        else {
          int v100 = v96 >> 6;
        }
        if (v96 >= 0x1000) {
          int v101 = v100;
        }
        else {
          int v101 = 64;
        }
        if (v97 >> 6 >= 0x3C0) {
          int v102 = 960;
        }
        else {
          int v102 = v97 >> 6;
        }
        if (v97 >= 0x1000) {
          int v103 = v102;
        }
        else {
          int v103 = 64;
        }
        unsigned int v104 = v16[2];
        int v105 = v104 >> 6;
        unsigned int v106 = v16[3];
        int v107 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        unsigned int v108 = *v107;
        unsigned int v109 = v107[1];
        if (v104 >> 6 >= 0x3C0) {
          int v105 = 960;
        }
        if (v104 >= 0x1000) {
          int v110 = v105;
        }
        else {
          int v110 = 64;
        }
        if (v106 >> 6 >= 0x3C0) {
          int v111 = 960;
        }
        else {
          int v111 = v106 >> 6;
        }
        if (v106 < 0x1000) {
          int v111 = 64;
        }
        if (v108 >> 6 >= 0x3C0) {
          int v112 = 960;
        }
        else {
          int v112 = v108 >> 6;
        }
        if (v108 < 0x1000) {
          int v112 = 64;
        }
        unsigned int v113 = -262080 - v98 + (v98 << 12);
        if (v109 >> 6 >= 0x3C0) {
          int v114 = 960;
        }
        else {
          int v114 = v109 >> 6;
        }
        if (v109 < 0x1000) {
          int v114 = 64;
        }
        int v91 = v16 + 4;
        *uint64_t v22 = (4
              * (((613566757 * (unint64_t)((-262080 - v101 + (v101 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)(v113 >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v110 + (v110 << 12)) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((-262080 - v112 + (v112 << 12)) >> 7)) >> 32))
              + 8) & 0xFFF0;
        v22[1] = (4
                * (((613566757 * (unint64_t)((-262080 - v103 + (v103 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v99 + (v99 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v111 + (v111 << 12)) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((-262080 - v114 + (v114 << 12)) >> 7)) >> 32))
                + 8) & 0xFFF0;
        unsigned int v92 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v115 = 0;
        int v116 = v91 + 2;
        do
        {
          int v117 = &v92[v115];
          unsigned int v118 = *(v116 - 2);
          int v119 = v118 >> 6;
          unsigned int v120 = *(v116 - 1);
          int v121 = (unsigned __int16 *)((char *)v116 + v15);
          unsigned int v122 = *(unsigned __int16 *)((char *)v116 + v15 - 4);
          unsigned int v123 = *(unsigned __int16 *)((char *)v116 + v15 - 2);
          if (v118 >> 6 >= 0x3C0) {
            int v119 = 960;
          }
          if (v118 >= 0x1000) {
            int v124 = v119;
          }
          else {
            int v124 = 64;
          }
          if (v120 >> 6 >= 0x3C0) {
            int v125 = 960;
          }
          else {
            int v125 = v120 >> 6;
          }
          if (v120 < 0x1000) {
            int v125 = 64;
          }
          if (v122 >> 6 >= 0x3C0) {
            int v126 = 960;
          }
          else {
            int v126 = v122 >> 6;
          }
          if (v122 < 0x1000) {
            int v126 = 64;
          }
          if (v123 >> 6 >= 0x3C0) {
            int v127 = 960;
          }
          else {
            int v127 = v123 >> 6;
          }
          BOOL v75 = v123 >= 0x1000;
          unsigned int v128 = *v116;
          unsigned int v129 = v128 >> 6;
          unsigned int v130 = v116[1];
          if (!v75) {
            int v127 = 64;
          }
          unsigned int v131 = *v121;
          unsigned int v132 = v131 >> 6;
          unsigned int v133 = v121[1];
          if (v129 >= 0x3C0) {
            unsigned int v129 = 960;
          }
          if (v128 >= 0x1000) {
            int v134 = v129;
          }
          else {
            int v134 = 64;
          }
          if (v130 >> 6 >= 0x3C0) {
            int v135 = 960;
          }
          else {
            int v135 = v130 >> 6;
          }
          BOOL v75 = v130 >= 0x1000;
          unsigned int v136 = v133 >> 6;
          if (!v75) {
            int v135 = 64;
          }
          if (v132 >= 0x3C0) {
            unsigned int v132 = 960;
          }
          if (v131 < 0x1000) {
            unsigned int v132 = 64;
          }
          unint64_t v137 = (613566757 * (unint64_t)((-262080 - v124 + (v124 << 12)) >> 7)) >> 32;
          if (v136 >= 0x3C0) {
            unsigned int v136 = 960;
          }
          unint64_t v138 = (613566757 * (unint64_t)((-262080 - v125 + (v125 << 12)) >> 7)) >> 32;
          unint64_t v139 = (613566757 * (unint64_t)((-262080 - v126 + (v126 << 12)) >> 7)) >> 32;
          if (v133 >= 0x1000) {
            int v140 = v136;
          }
          else {
            int v140 = 64;
          }
          *int v117 = (4
                 * (v139
                  + v137
                  + ((613566757 * (unint64_t)((-262080 - v134 + (v134 << 12)) >> 7)) >> 32)
                  + ((613566757 * (unint64_t)((-262080 - v132 + (v132 << 12)) >> 7)) >> 32))
                 + 8) & 0xFFF0;
          v117[1] = (4
                   * (((613566757 * (unint64_t)((-262080 - v127 + (v127 << 12)) >> 7)) >> 32)
                    + v138
                    + ((613566757 * (unint64_t)((-262080 - v135 + (v135 << 12)) >> 7)) >> 32)
                    + ((613566757 * (unint64_t)((-262080 - v140 + (v140 << 12)) >> 7)) >> 32))
                   + 8) & 0xFFF0;
          v115 += 2;
          v116 += 4;
        }
        while (v115 < v37);
      }
      v16 += v15;
      uint64_t v22 = (_WORD *)((char *)v22 + v142);
      v89 += 2;
    }
    while (v89 < v90);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    uint64_t v31 = *a8;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v30 + v32;
    uint64_t v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC) {
            unsigned int v36 = 940;
          }
          if (v36 <= 0x40) {
            unsigned int v36 = 64;
          }
          *(_WORD *)(v34 + 2 * i) = 16 * ((-262080 - v36 + (v36 << 12)) / 0x36C);
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v41 = *v16;
      int v42 = v41 >> 6;
      unsigned int v43 = v16[1];
      unsigned int v44 = v43 >> 6;
      if (v41 >> 6 >= 0x3C0) {
        int v42 = 960;
      }
      if (v41 < 0x1000) {
        int v42 = 64;
      }
      if (v44 >= 0x3C0) {
        unsigned int v44 = 960;
      }
      if (v43 >= 0x1000) {
        int v45 = v44;
      }
      else {
        int v45 = 64;
      }
      unsigned int v39 = v16 + 4;
      *unint64_t v23 = 16 * ((613566757 * (unint64_t)((-262080 - v42 + (v42 << 12)) >> 7)) >> 32);
      v23[1] = 16 * ((613566757 * (unint64_t)((-262080 - v45 + (v45 << 12)) >> 7)) >> 32);
      unsigned int v40 = v23 + 2;
    }
    else
    {
      unsigned int v39 = v16;
      unsigned int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = &v40[v46];
        unsigned int v48 = *v39;
        int v49 = v48 >> 6;
        unsigned int v50 = v39[1];
        if (v48 >> 6 >= 0x3C0) {
          int v49 = 960;
        }
        if (v48 >= 0x1000) {
          int v51 = v49;
        }
        else {
          int v51 = 64;
        }
        if (v50 >> 6 >= 0x3C0) {
          int v52 = 960;
        }
        else {
          int v52 = v50 >> 6;
        }
        if (v50 < 0x1000) {
          int v52 = 64;
        }
        *int v47 = 16 * ((613566757 * (unint64_t)((-262080 - v51 + (v51 << 12)) >> 7)) >> 32);
        v47[1] = 16 * ((613566757 * (unint64_t)((-262080 - v52 + (v52 << 12)) >> 7)) >> 32);
        v46 += 2;
        v39 += 4;
      }
      while (v46 < v38);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    unint64_t v53 = 0;
    unint64_t v54 = v27 - v37;
    uint64_t v55 = 2 * v15;
    do
    {
      int v56 = v16;
      int v57 = v23;
      if (v8)
      {
        unsigned int v58 = *v16;
        int v59 = v58 >> 6;
        unsigned int v60 = v16[1];
        if (v58 >> 6 >= 0x3C0) {
          int v59 = 960;
        }
        if (v58 < 0x1000) {
          int v59 = 64;
        }
        if (v60 >> 6 >= 0x3C0) {
          int v61 = 960;
        }
        else {
          int v61 = v60 >> 6;
        }
        if (v60 >= 0x1000) {
          int v62 = v61;
        }
        else {
          int v62 = 64;
        }
        int v56 = v16 + 4;
        *unint64_t v23 = 16 * ((613566757 * (unint64_t)((-262080 - v59 + (v59 << 12)) >> 7)) >> 32);
        v23[1] = 16 * ((613566757 * (unint64_t)((-262080 - v62 + (v62 << 12)) >> 7)) >> 32);
        int v57 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v63 = 0;
        do
        {
          int v64 = &v57[v63];
          unsigned int v65 = *v56;
          int v66 = v65 >> 6;
          unsigned int v67 = v56[1];
          if (v65 >> 6 >= 0x3C0) {
            int v66 = 960;
          }
          if (v65 >= 0x1000) {
            int v68 = v66;
          }
          else {
            int v68 = 64;
          }
          if (v67 >> 6 >= 0x3C0) {
            int v69 = 960;
          }
          else {
            int v69 = v67 >> 6;
          }
          if (v67 < 0x1000) {
            int v69 = 64;
          }
          *int v64 = 16 * ((613566757 * (unint64_t)((-262080 - v68 + (v68 << 12)) >> 7)) >> 32);
          v64[1] = 16 * ((613566757 * (unint64_t)((-262080 - v69 + (v69 << 12)) >> 7)) >> 32);
          v63 += 2;
          v56 += 4;
        }
        while (v63 < v38);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v55);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_x444_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a4[1];
  uint64_t v11 = (_WORD *)(a3[1] + v10 * v9 + 4 * v8);
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v14 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v13 + 4 * v12);
  if (a2[2] >= v14) {
    unint64_t v18 = v14;
  }
  else {
    unint64_t v18 = a2[2];
  }
  if (a2[3] >= v15) {
    unint64_t v19 = v15;
  }
  else {
    unint64_t v19 = a2[3];
  }
  if (v19)
  {
    uint64_t v61 = a8[1];
    uint64_t v62 = a4[1];
    unint64_t v63 = v19;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    unint64_t v23 = (char *)(a7[2] + v22 * v13 + 2 * v12);
    unint64_t v24 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    unint64_t v25 = (char *)(*a3 + *a4 * v9 + 2 * v8);
    unint64_t v64 = v18;
    size_t v26 = 2 * v18;
    do
    {
      memcpy(v24, v25, v26);
      memset(v23, 255, v26);
      v25 += v20;
      v24 += v21;
      v23 += v22;
      --v19;
    }
    while (v19);
    uint64_t v16 = v61;
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    unint64_t v19 = v63;
    unint64_t v18 = v64;
    uint64_t v10 = v62;
  }
  unint64_t v27 = v9 & 1;
  if (v19 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v8;
  unint64_t v30 = v8 & 1;
  if (v18 >= v30) {
    unint64_t v31 = v30;
  }
  else {
    unint64_t v31 = 0;
  }
  unint64_t v32 = v18 - v31;
  if (v9)
  {
    if (v29)
    {
      __int16 v35 = v11[1] & 0xFFC0;
      uint64_t v33 = v11 + 2;
      *uint64_t v17 = *v11 & 0xFFC0;
      v17[1] = v35;
      uint64_t v34 = v17 + 2;
    }
    else
    {
      uint64_t v33 = v11;
      uint64_t v34 = v17;
    }
    if (v18 == v31)
    {
      unint64_t v36 = 0;
    }
    else
    {
      unint64_t v37 = v18 - v31;
      do
      {
        __int16 v38 = *v33 & 0xFFC0;
        __int16 v39 = v33[1] & 0xFFC0;
        v33 += 2;
        *uint64_t v34 = v38;
        v34[1] = v39;
        v34 += 2;
        --v37;
      }
      while (v37);
      unint64_t v36 = v18 - v31;
    }
    if (v36 + v30 < v18)
    {
      __int16 v40 = *v33 & 0xFFC0;
      __int16 v41 = v33[1] & 0xFFC0;
      *uint64_t v34 = v40;
      v34[1] = v41;
    }
    uint64_t v11 = (_WORD *)((char *)v11 + v10);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v19 == v28)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v19 - v28;
    do
    {
      unsigned int v44 = v11;
      int v45 = v17;
      if (v29)
      {
        __int16 v46 = v11[1] & 0xFFC0;
        unsigned int v44 = v11 + 2;
        *uint64_t v17 = *v11 & 0xFFC0;
        v17[1] = v46;
        int v45 = v17 + 2;
      }
      if (v18 == v31)
      {
        unint64_t v47 = 0;
      }
      else
      {
        unint64_t v48 = v18 - v31;
        do
        {
          __int16 v49 = *v44 & 0xFFC0;
          __int16 v50 = v44[1] & 0xFFC0;
          v44 += 2;
          *int v45 = v49;
          v45[1] = v50;
          v45 += 2;
          --v48;
        }
        while (v48);
        unint64_t v47 = v18 - v31;
      }
      if (v47 + v30 < v18)
      {
        __int16 v51 = *v44 & 0xFFC0;
        __int16 v52 = v44[1] & 0xFFC0;
        *int v45 = v51;
        v45[1] = v52;
      }
      uint64_t v11 = (_WORD *)((char *)v11 + v10);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v27 < v19)
  {
    if (v29)
    {
      __int16 v53 = *v11 & 0xFFC0;
      __int16 v54 = v11[1] & 0xFFC0;
      v11 += 2;
      *uint64_t v17 = v53;
      v17[1] = v54;
      v17 += 2;
    }
    if (v18 == v31)
    {
      unint64_t v32 = 0;
    }
    else
    {
      unint64_t v55 = v18 - v31;
      do
      {
        __int16 v56 = *v11 & 0xFFC0;
        __int16 v57 = v11[1] & 0xFFC0;
        v11 += 2;
        *uint64_t v17 = v56;
        v17[1] = v57;
        v17 += 2;
        --v55;
      }
      while (v55);
    }
    if (v32 + v30 < v18)
    {
      __int16 v58 = v11[1] & 0xFFC0;
      *uint64_t v17 = *v11 & 0xFFC0;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_x44p(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (!a1) {
    return 4294954387;
  }
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = *a5;
    uint64_t v10 = *a4;
    uint64_t v11 = a4[1];
    uint64_t v12 = *a6;
    do
    {
      uint64_t v13 = 0;
      for (uint64_t i = 0; i != a1; ++i)
      {
        *(_DWORD *)(v12 + v13) = *(unsigned __int16 *)(v10 + 2 * i) | (*(unsigned __int16 *)(v11 + v13) << 10) | (*(unsigned __int16 *)(v11 + v13 + 2) << 20);
        v13 += 4;
      }
      v10 += v7;
      v11 += v8;
      v12 += v9;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_x444_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v25 = *(unsigned __int16 *)(v23 + 2 * i) >> 6;
          if (v25 >= 0x3AC) {
            unsigned int v25 = 940;
          }
          if (v25 <= 0x40) {
            unsigned int v25 = 64;
          }
          *(_WORD *)(v22 + 2 * i) = (unsigned __int16)((1023 * v25 - 65472) / 0x36C) << 6;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v26 = v8 & 1;
  if (v18 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unsigned int v34 = *v13;
      int v35 = v34 >> 6;
      unsigned int v36 = v13[1];
      if (v34 >> 6 >= 0x3C0) {
        int v35 = 960;
      }
      if (v34 >= 0x1000) {
        int v37 = v35;
      }
      else {
        int v37 = 64;
      }
      if (v36 >> 6 >= 0x3C0) {
        int v38 = 960;
      }
      else {
        int v38 = v36 >> 6;
      }
      if (v36 >= 0x1000) {
        int v39 = v38;
      }
      else {
        int v39 = 64;
      }
      unint64_t v32 = v13 + 2;
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v37 - 65472) >> 7)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v39 - 65472) >> 7)) >> 32) << 6;
      uint64_t v33 = v17 + 2;
    }
    else
    {
      unint64_t v32 = v13;
      uint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v40 = 0;
    }
    else
    {
      unint64_t v41 = v10 - v30;
      do
      {
        unsigned int v42 = *v32;
        int v43 = v42 >> 6;
        unsigned int v44 = v32[1];
        if (v42 >> 6 >= 0x3C0) {
          int v43 = 960;
        }
        if (v42 >= 0x1000) {
          int v45 = v43;
        }
        else {
          int v45 = 64;
        }
        if (v44 >> 6 >= 0x3C0) {
          int v46 = 960;
        }
        else {
          int v46 = v44 >> 6;
        }
        if (v44 < 0x1000) {
          int v46 = 64;
        }
        v32 += 2;
        *uint64_t v33 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v45 - 65472) >> 7)) >> 32) << 6;
        v33[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v46 - 65472) >> 7)) >> 32) << 6;
        v33 += 2;
        --v41;
      }
      while (v41);
      unint64_t v40 = v10 - v30;
    }
    if (v40 + v29 < v10)
    {
      unsigned int v47 = *v32;
      int v48 = v47 >> 6;
      unsigned int v49 = v32[1];
      unsigned int v50 = v49 >> 6;
      if (v47 >> 6 >= 0x3C0) {
        int v48 = 960;
      }
      if (v47 < 0x1000) {
        int v48 = 64;
      }
      if (v50 >= 0x3C0) {
        unsigned int v50 = 960;
      }
      if (v49 >= 0x1000) {
        int v51 = v50;
      }
      else {
        int v51 = 64;
      }
      *uint64_t v33 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v48 - 65472) >> 7)) >> 32) << 6;
      v33[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v51 - 65472) >> 7)) >> 32) << 6;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    unint64_t v52 = 0;
  }
  else
  {
    uint64_t v53 = 0;
    unint64_t v52 = v18 - v27;
    do
    {
      __int16 v54 = v13;
      unint64_t v55 = v17;
      if (v28)
      {
        unsigned int v56 = *v13;
        int v57 = v56 >> 6;
        unsigned int v58 = v13[1];
        if (v56 >> 6 >= 0x3C0) {
          int v57 = 960;
        }
        if (v56 >= 0x1000) {
          int v59 = v57;
        }
        else {
          int v59 = 64;
        }
        if (v58 >> 6 >= 0x3C0) {
          int v60 = 960;
        }
        else {
          int v60 = v58 >> 6;
        }
        if (v58 >= 0x1000) {
          int v61 = v60;
        }
        else {
          int v61 = 64;
        }
        __int16 v54 = v13 + 2;
        *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v59 - 65472) >> 7)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 65472) >> 7)) >> 32) << 6;
        unint64_t v55 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v62 = 0;
      }
      else
      {
        unint64_t v63 = v10 - v30;
        do
        {
          unsigned int v64 = *v54;
          int v65 = v64 >> 6;
          unsigned int v66 = v54[1];
          if (v64 >> 6 >= 0x3C0) {
            int v65 = 960;
          }
          if (v64 >= 0x1000) {
            int v67 = v65;
          }
          else {
            int v67 = 64;
          }
          if (v66 >> 6 >= 0x3C0) {
            int v68 = 960;
          }
          else {
            int v68 = v66 >> 6;
          }
          if (v66 < 0x1000) {
            int v68 = 64;
          }
          v54 += 2;
          *unint64_t v55 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v67 - 65472) >> 7)) >> 32) << 6;
          v55[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v68 - 65472) >> 7)) >> 32) << 6;
          v55 += 2;
          --v63;
        }
        while (v63);
        unint64_t v62 = v10 - v30;
      }
      if (v62 + v29 < v10)
      {
        unsigned int v69 = *v54;
        int v70 = v69 >> 6;
        unsigned int v71 = v54[1];
        if (v69 >> 6 >= 0x3C0) {
          int v70 = 960;
        }
        if (v69 >= 0x1000) {
          int v72 = v70;
        }
        else {
          int v72 = 64;
        }
        if (v71 >> 6 >= 0x3C0) {
          int v73 = 960;
        }
        else {
          int v73 = v71 >> 6;
        }
        if (v71 >= 0x1000) {
          int v74 = v73;
        }
        else {
          int v74 = 64;
        }
        *unint64_t v55 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v72 - 65472) >> 7)) >> 32) << 6;
        v55[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v74 - 65472) >> 7)) >> 32) << 6;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v53;
    }
    while (v53 != v52);
  }
  if (v52 + v26 < v18)
  {
    if (v28)
    {
      unsigned int v75 = *v13;
      int v76 = v75 >> 6;
      unsigned int v77 = v13[1];
      unsigned int v78 = v77 >> 6;
      if (v75 >> 6 >= 0x3C0) {
        int v76 = 960;
      }
      if (v75 < 0x1000) {
        int v76 = 64;
      }
      if (v78 >= 0x3C0) {
        unsigned int v78 = 960;
      }
      if (v77 >= 0x1000) {
        int v79 = v78;
      }
      else {
        int v79 = 64;
      }
      v13 += 2;
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v76 - 65472) >> 7)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v79 - 65472) >> 7)) >> 32) << 6;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v80 = v10 - v30;
      do
      {
        unsigned int v81 = *v13;
        int v82 = v81 >> 6;
        unsigned int v83 = v13[1];
        if (v81 >> 6 >= 0x3C0) {
          int v82 = 960;
        }
        if (v81 >= 0x1000) {
          int v84 = v82;
        }
        else {
          int v84 = 64;
        }
        if (v83 >> 6 >= 0x3C0) {
          int v85 = 960;
        }
        else {
          int v85 = v83 >> 6;
        }
        if (v83 < 0x1000) {
          int v85 = 64;
        }
        v13 += 2;
        *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v84 - 65472) >> 7)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v85 - 65472) >> 7)) >> 32) << 6;
        v17 += 2;
        --v80;
      }
      while (v80);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v86 = *v13;
      int v87 = v86 >> 6;
      unsigned int v88 = v13[1];
      unsigned int v89 = v88 >> 6;
      if (v86 >> 6 >= 0x3C0) {
        int v87 = 960;
      }
      if (v86 < 0x1000) {
        int v87 = 64;
      }
      if (v89 >= 0x3C0) {
        unsigned int v89 = 960;
      }
      if (v88 >= 0x1000) {
        int v90 = v89;
      }
      else {
        int v90 = 64;
      }
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v87 - 65472) >> 7)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v90 - 65472) >> 7)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v15;
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = *(void *)(a2 + 24);
  }
  if (v23)
  {
    uint64_t v58 = a8[1];
    uint64_t v60 = a4[1];
    unint64_t v61 = v22;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = (char *)(a7[2] + v26 * v17 + v18);
    char v28 = (char *)(*a7 + *a8 * v17 + v18);
    unint64_t v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    size_t v30 = 2 * v22;
    unint64_t v59 = v23;
    do
    {
      memcpy(v28, v29, v30);
      memset(v27, 255, v30);
      v29 += v24;
      v28 += v25;
      v27 += v26;
      --v23;
    }
    while (v23);
    uint64_t v19 = v58;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v60;
    unint64_t v22 = v61;
    unint64_t v23 = v59;
  }
  unint64_t v31 = v11 & 1;
  if (v23 >= v31) {
    uint64_t v32 = v11 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v34 = v22 - v9;
  if (v11)
  {
    if (v33)
    {
      int v35 = v13 + 4;
      int v37 = (v13[3] >> 6) + (v13[1] >> 6);
      *uint64_t v20 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
      v20[1] = (32 * v37 + 32) & 0xFFC0;
      unsigned int v36 = v20 + 2;
    }
    else
    {
      int v35 = v13;
      unsigned int v36 = v20;
    }
    if (v22 != v9)
    {
      unint64_t v38 = 0;
      do
      {
        int v39 = &v36[v38];
        int v40 = ((unsigned __int16)v35[3] >> 6) + ((unsigned __int16)v35[1] >> 6);
        *int v39 = (32 * ((v35[2] >> 6) + (*v35 >> 6)) + 32) & 0xFFC0;
        v39[1] = (32 * v40 + 32) & 0xFFC0;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v23 - v32;
    do
    {
      int v43 = v13;
      unsigned int v44 = v20;
      if (v33)
      {
        int v43 = v13 + 4;
        int v45 = (v13[3] >> 6) + (v13[1] >> 6);
        *uint64_t v20 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v20[1] = (32 * v45 + 32) & 0xFFC0;
        unsigned int v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        unint64_t v46 = 0;
        do
        {
          unsigned int v47 = &v44[v46];
          int v48 = ((unsigned __int16)v43[3] >> 6) + ((unsigned __int16)v43[1] >> 6);
          *unsigned int v47 = (32 * ((v43[2] >> 6) + (*v43 >> 6)) + 32) & 0xFFC0;
          v47[1] = (32 * v48 + 32) & 0xFFC0;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if (v33)
    {
      unsigned int v49 = *v13;
      unsigned int v50 = v13[1];
      int v51 = v13[2] >> 6;
      int v52 = v13[3] >> 6;
      v13 += 4;
      *uint64_t v20 = (32 * (v51 + (v49 >> 6)) + 32) & 0xFFC0;
      v20[1] = (32 * (v52 + (v50 >> 6)) + 32) & 0xFFC0;
      v20 += 2;
    }
    if (v22 != v9)
    {
      unint64_t v53 = 0;
      do
      {
        __int16 v54 = &v20[v53];
        int v55 = (v13[3] >> 6) + (v13[1] >> 6);
        *__int16 v54 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v54[1] = (32 * v55 + 32) & 0xFFC0;
        v53 += 2;
        v13 += 4;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (_WORD *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v15;
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = *(void *)(a2 + 24);
  }
  if (v23)
  {
    uint64_t v56 = a8[1];
    uint64_t v58 = a4[1];
    unint64_t v59 = v22;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = (char *)(a7[2] + v26 * v17 + v18);
    char v28 = (char *)(*a7 + *a8 * v17 + v18);
    unint64_t v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    size_t v30 = 2 * v22;
    unint64_t v57 = v23;
    do
    {
      memcpy(v28, v29, v30);
      memset(v27, 255, v30);
      v29 += v24;
      v28 += v25;
      v27 += v26;
      --v23;
    }
    while (v23);
    uint64_t v19 = v56;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v58;
    unint64_t v22 = v59;
    unint64_t v23 = v57;
  }
  unint64_t v31 = v11 & 1;
  if (v23 >= v31) {
    uint64_t v32 = v11 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v34 = v22 - v9;
  if (v11)
  {
    if (v33)
    {
      __int16 v37 = v13[1] & 0xFFC0;
      int v35 = v13 + 4;
      *uint64_t v20 = *v13 & 0xFFC0;
      v20[1] = v37;
      unsigned int v36 = v20 + 2;
    }
    else
    {
      int v35 = v13;
      unsigned int v36 = v20;
    }
    if (v22 != v9)
    {
      unint64_t v38 = 0;
      do
      {
        int v39 = &v36[v38];
        __int16 v40 = v35[1] & 0xFFC0;
        *int v39 = *v35 & 0xFFC0;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    uint64_t v13 = (_WORD *)((char *)v13 + v12);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v23 - v32;
    do
    {
      int v43 = v13;
      unsigned int v44 = v20;
      if (v33)
      {
        __int16 v45 = v13[1] & 0xFFC0;
        int v43 = v13 + 4;
        *uint64_t v20 = *v13 & 0xFFC0;
        v20[1] = v45;
        unsigned int v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        unint64_t v46 = 0;
        do
        {
          unsigned int v47 = &v44[v46];
          __int16 v48 = v43[1] & 0xFFC0;
          *unsigned int v47 = *v43 & 0xFFC0;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      uint64_t v13 = (_WORD *)((char *)v13 + v12);
      uint64_t v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if (v33)
    {
      __int16 v49 = *v13 & 0xFFC0;
      __int16 v50 = v13[1] & 0xFFC0;
      v13 += 4;
      *uint64_t v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v22 != v9)
    {
      unint64_t v51 = 0;
      do
      {
        int v52 = &v20[v51];
        __int16 v53 = v13[1] & 0xFFC0;
        *int v52 = *v13 & 0xFFC0;
        v52[1] = v53;
        v51 += 2;
        v13 += 4;
      }
      while (v51 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v14;
  uint64_t v17 = a8[1];
  uint64_t v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v21 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v21 = *(void *)(a2 + 24);
  }
  if (v21)
  {
    unint64_t v53 = v21;
    uint64_t v54 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = (char *)(*a7 + *a8 * v15 + v16);
    uint64_t v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    unint64_t v21 = v53;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v54;
  }
  unint64_t v26 = v11 & 1;
  if (v21 >= v26) {
    uint64_t v27 = v11 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  if (v20 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v29 = v20 - v9;
  if (v11)
  {
    if (v28)
    {
      size_t v30 = v13 + 4;
      int v32 = (v13[3] >> 6) + (v13[1] >> 6);
      *uint64_t v18 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
      v18[1] = (32 * v32 + 32) & 0xFFC0;
      unint64_t v31 = v18 + 2;
    }
    else
    {
      size_t v30 = v13;
      unint64_t v31 = v18;
    }
    if (v20 != v9)
    {
      unint64_t v33 = 0;
      do
      {
        unint64_t v34 = &v31[v33];
        int v35 = ((unsigned __int16)v30[3] >> 6) + ((unsigned __int16)v30[1] >> 6);
        *unint64_t v34 = (32 * ((v30[2] >> 6) + (*v30 >> 6)) + 32) & 0xFFC0;
        v34[1] = (32 * v35 + 32) & 0xFFC0;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    unint64_t v36 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v36 = v21 - v27;
    do
    {
      unint64_t v38 = v13;
      int v39 = v18;
      if (v28)
      {
        unint64_t v38 = v13 + 4;
        int v40 = (v13[3] >> 6) + (v13[1] >> 6);
        *uint64_t v18 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v18[1] = (32 * v40 + 32) & 0xFFC0;
        int v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        unint64_t v41 = 0;
        do
        {
          uint64_t v42 = &v39[v41];
          int v43 = ((unsigned __int16)v38[3] >> 6) + ((unsigned __int16)v38[1] >> 6);
          *uint64_t v42 = (32 * ((v38[2] >> 6) + (*v38 >> 6)) + 32) & 0xFFC0;
          v42[1] = (32 * v43 + 32) & 0xFFC0;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if (v28)
    {
      unsigned int v44 = *v13;
      unsigned int v45 = v13[1];
      int v46 = v13[2] >> 6;
      int v47 = v13[3] >> 6;
      v13 += 4;
      *uint64_t v18 = (32 * (v46 + (v44 >> 6)) + 32) & 0xFFC0;
      v18[1] = (32 * (v47 + (v45 >> 6)) + 32) & 0xFFC0;
      v18 += 2;
    }
    if (v20 != v9)
    {
      unint64_t v48 = 0;
      do
      {
        __int16 v49 = &v18[v48];
        int v50 = (v13[3] >> 6) + (v13[1] >> 6);
        _WORD *v49 = (32 * ((v13[2] >> 6) + (*v13 >> 6)) + 32) & 0xFFC0;
        v49[1] = (32 * v50 + 32) & 0xFFC0;
        v48 += 2;
        v13 += 4;
      }
      while (v48 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (_WORD *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v14;
  uint64_t v17 = a8[1];
  uint64_t v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v21 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v21 = *(void *)(a2 + 24);
  }
  if (v21)
  {
    unint64_t v51 = v21;
    uint64_t v52 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    uint64_t v24 = (char *)(*a7 + *a8 * v15 + v16);
    uint64_t v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    unint64_t v21 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v52;
  }
  unint64_t v26 = v11 & 1;
  if (v21 >= v26) {
    uint64_t v27 = v11 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  if (v20 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v29 = v20 - v9;
  if (v11)
  {
    if (v28)
    {
      __int16 v32 = v13[1] & 0xFFC0;
      size_t v30 = v13 + 4;
      *uint64_t v18 = *v13 & 0xFFC0;
      v18[1] = v32;
      unint64_t v31 = v18 + 2;
    }
    else
    {
      size_t v30 = v13;
      unint64_t v31 = v18;
    }
    if (v20 != v9)
    {
      unint64_t v33 = 0;
      do
      {
        unint64_t v34 = &v31[v33];
        __int16 v35 = v30[1] & 0xFFC0;
        *unint64_t v34 = *v30 & 0xFFC0;
        v34[1] = v35;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    uint64_t v13 = (_WORD *)((char *)v13 + v12);
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    unint64_t v36 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v36 = v21 - v27;
    do
    {
      unint64_t v38 = v13;
      int v39 = v18;
      if (v28)
      {
        __int16 v40 = v13[1] & 0xFFC0;
        unint64_t v38 = v13 + 4;
        *uint64_t v18 = *v13 & 0xFFC0;
        v18[1] = v40;
        int v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        unint64_t v41 = 0;
        do
        {
          uint64_t v42 = &v39[v41];
          __int16 v43 = v38[1] & 0xFFC0;
          *uint64_t v42 = *v38 & 0xFFC0;
          v42[1] = v43;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      uint64_t v13 = (_WORD *)((char *)v13 + v12);
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if (v28)
    {
      __int16 v44 = *v13 & 0xFFC0;
      __int16 v45 = v13[1] & 0xFFC0;
      v13 += 4;
      *uint64_t v18 = v44;
      v18[1] = v45;
      v18 += 2;
    }
    if (v20 != v9)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = &v18[v46];
        __int16 v48 = v13[1] & 0xFFC0;
        *int v47 = *v13 & 0xFFC0;
        v47[1] = v48;
        v46 += 2;
        v13 += 4;
      }
      while (v46 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * (v10 + v8);
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v27 + 2 * i) >> 6;
          if (v30 >= 0x3AC) {
            unsigned int v30 = 940;
          }
          if (v30 <= 0x40) {
            unsigned int v30 = 64;
          }
          *(_WORD *)(v28 + 2 * i) = (unsigned __int16)((1023 * v30 - 65472) / 0x36C) << 6;
        }
      }
      v27 += v25;
      v28 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      int v38 = v37 >> 6;
      unsigned int v39 = v14[1];
      unsigned int v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0) {
        int v38 = 960;
      }
      if (v37 < 0x1000) {
        int v38 = 64;
      }
      if (v40 >= 0x3C0) {
        unsigned int v40 = 960;
      }
      if (v39 >= 0x1000) {
        int v41 = v40;
      }
      else {
        int v41 = 64;
      }
      unsigned int v42 = v14[2];
      int v43 = v42 >> 6;
      unsigned int v44 = v14[3];
      if (v42 >> 6 >= 0x3C0) {
        int v43 = 960;
      }
      if (v42 >= 0x1000) {
        int v45 = v43;
      }
      else {
        int v45 = 64;
      }
      if (v44 >> 6 >= 0x3C0) {
        int v46 = 960;
      }
      else {
        int v46 = v44 >> 6;
      }
      if (v44 < 0x1000) {
        int v46 = 64;
      }
      __int16 v35 = v14 + 4;
      *unint64_t v21 = (32
            * (((613566757 * (unint64_t)((1023 * v45 - 65472) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v38 - 65472) >> 7)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((1023 * v46 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v41 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
      unint64_t v36 = v21 + 2;
    }
    else
    {
      __int16 v35 = v14;
      unint64_t v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v47 = 0;
      do
      {
        __int16 v48 = &v36[v47];
        unsigned int v49 = *v35;
        int v50 = v49 >> 6;
        unsigned int v51 = v35[1];
        if (v49 >> 6 >= 0x3C0) {
          int v50 = 960;
        }
        if (v49 >= 0x1000) {
          int v52 = v50;
        }
        else {
          int v52 = 64;
        }
        if (v51 >> 6 >= 0x3C0) {
          int v53 = 960;
        }
        else {
          int v53 = v51 >> 6;
        }
        if (v51 < 0x1000) {
          int v53 = 64;
        }
        unsigned int v54 = v35[2];
        int v55 = v54 >> 6;
        unsigned int v56 = v35[3];
        if (v54 >> 6 >= 0x3C0) {
          int v55 = 960;
        }
        if (v54 >= 0x1000) {
          int v57 = v55;
        }
        else {
          int v57 = 64;
        }
        if (v56 >> 6 >= 0x3C0) {
          int v58 = 960;
        }
        else {
          int v58 = v56 >> 6;
        }
        if (v56 < 0x1000) {
          int v58 = 64;
        }
        _WORD *v48 = (32
              * (((613566757 * (unint64_t)((1023 * v57 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v52 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
        v48[1] = (32
                * (((613566757 * (unint64_t)((1023 * v58 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v53 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
        v47 += 2;
        v35 += 4;
      }
      while (v47 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v59 = 0;
  }
  else
  {
    uint64_t v60 = 0;
    unint64_t v59 = v9 - v32;
    do
    {
      unint64_t v61 = v14;
      unint64_t v62 = v21;
      if (v33)
      {
        unsigned int v63 = *v14;
        int v64 = v63 >> 6;
        unsigned int v65 = v14[1];
        if (v63 >> 6 >= 0x3C0) {
          int v64 = 960;
        }
        if (v63 < 0x1000) {
          int v64 = 64;
        }
        if (v65 >> 6 >= 0x3C0) {
          int v66 = 960;
        }
        else {
          int v66 = v65 >> 6;
        }
        if (v65 >= 0x1000) {
          int v67 = v66;
        }
        else {
          int v67 = 64;
        }
        unsigned int v68 = v14[2];
        int v69 = v68 >> 6;
        unsigned int v70 = v14[3];
        if (v68 >> 6 >= 0x3C0) {
          int v69 = 960;
        }
        if (v68 < 0x1000) {
          int v69 = 64;
        }
        if (v70 >> 6 >= 0x3C0) {
          int v71 = 960;
        }
        else {
          int v71 = v70 >> 6;
        }
        if (v70 >= 0x1000) {
          int v72 = v71;
        }
        else {
          int v72 = 64;
        }
        unint64_t v61 = v14 + 4;
        *unint64_t v21 = (32
              * (((613566757 * (unint64_t)((1023 * v69 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v64 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
        v21[1] = (32
                * (((613566757 * (unint64_t)((1023 * v72 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v67 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
        unint64_t v62 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v73 = 0;
        do
        {
          int v74 = &v62[v73];
          unsigned int v75 = *v61;
          int v76 = v75 >> 6;
          unsigned int v77 = v61[1];
          if (v75 >> 6 >= 0x3C0) {
            int v76 = 960;
          }
          if (v75 >= 0x1000) {
            int v78 = v76;
          }
          else {
            int v78 = 64;
          }
          if (v77 >> 6 >= 0x3C0) {
            int v79 = 960;
          }
          else {
            int v79 = v77 >> 6;
          }
          if (v77 < 0x1000) {
            int v79 = 64;
          }
          unsigned int v80 = v61[2];
          int v81 = v80 >> 6;
          unsigned int v82 = v61[3];
          if (v80 >> 6 >= 0x3C0) {
            int v81 = 960;
          }
          if (v80 >= 0x1000) {
            int v83 = v81;
          }
          else {
            int v83 = 64;
          }
          if (v82 >> 6 >= 0x3C0) {
            int v84 = 960;
          }
          else {
            int v84 = v82 >> 6;
          }
          if (v82 < 0x1000) {
            int v84 = 64;
          }
          *int v74 = (32
                * (((613566757 * (unint64_t)((1023 * v83 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v78 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
          v74[1] = (32
                  * (((613566757 * (unint64_t)((1023 * v84 - 65472) >> 7)) >> 32)
                   + ((613566757 * (unint64_t)((1023 * v79 - 65472) >> 7)) >> 32))
                  + 32) & 0xFFC0;
          v73 += 2;
          v61 += 4;
        }
        while (v73 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v60;
    }
    while (v60 != v59);
  }
  if (v59 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v85 = *v14;
      int v86 = v85 >> 6;
      unsigned int v87 = v14[1];
      unsigned int v88 = v87 >> 6;
      if (v85 >> 6 >= 0x3C0) {
        int v86 = 960;
      }
      if (v85 < 0x1000) {
        int v86 = 64;
      }
      if (v88 >= 0x3C0) {
        unsigned int v88 = 960;
      }
      if (v87 >= 0x1000) {
        int v89 = v88;
      }
      else {
        int v89 = 64;
      }
      unsigned int v90 = v14[2];
      int v91 = v90 >> 6;
      unsigned int v92 = v14[3];
      if (v90 >> 6 >= 0x3C0) {
        int v91 = 960;
      }
      if (v90 >= 0x1000) {
        int v93 = v91;
      }
      else {
        int v93 = 64;
      }
      if (v92 >> 6 >= 0x3C0) {
        int v94 = 960;
      }
      else {
        int v94 = v92 >> 6;
      }
      if (v92 >= 0x1000) {
        int v95 = v94;
      }
      else {
        int v95 = 64;
      }
      v14 += 4;
      *unint64_t v21 = (32
            * (((613566757 * (unint64_t)((1023 * v93 - 65472) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v86 - 65472) >> 7)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((1023 * v95 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v89 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v96 = 0;
      do
      {
        unsigned int v97 = &v21[v96];
        unsigned int v98 = *v14;
        int v99 = v98 >> 6;
        unsigned int v100 = v14[1];
        if (v98 >> 6 >= 0x3C0) {
          int v99 = 960;
        }
        if (v98 >= 0x1000) {
          int v101 = v99;
        }
        else {
          int v101 = 64;
        }
        if (v100 >> 6 >= 0x3C0) {
          int v102 = 960;
        }
        else {
          int v102 = v100 >> 6;
        }
        if (v100 < 0x1000) {
          int v102 = 64;
        }
        unsigned int v103 = v14[2];
        int v104 = v103 >> 6;
        unsigned int v105 = v14[3];
        if (v103 >> 6 >= 0x3C0) {
          int v104 = 960;
        }
        if (v103 >= 0x1000) {
          int v106 = v104;
        }
        else {
          int v106 = 64;
        }
        if (v105 >> 6 >= 0x3C0) {
          int v107 = 960;
        }
        else {
          int v107 = v105 >> 6;
        }
        if (v105 < 0x1000) {
          int v107 = 64;
        }
        *unsigned int v97 = (32
              * (((613566757 * (unint64_t)((1023 * v106 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v101 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
        v97[1] = (32
                * (((613566757 * (unint64_t)((1023 * v107 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v102 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
        v96 += 2;
        v14 += 4;
      }
      while (v96 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * (v10 + v8);
    uint64_t v28 = *a7 + *a8 * v18 + v19;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v27 + 2 * i) >> 6;
          if (v30 >= 0x3AC) {
            unsigned int v30 = 940;
          }
          if (v30 <= 0x40) {
            unsigned int v30 = 64;
          }
          *(_WORD *)(v28 + 2 * i) = (unsigned __int16)((1023 * v30 - 65472) / 0x36C) << 6;
        }
      }
      v27 += v25;
      v28 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      int v38 = v37 >> 6;
      unsigned int v39 = v14[1];
      unsigned int v40 = v39 >> 6;
      if (v37 >> 6 >= 0x3C0) {
        int v38 = 960;
      }
      if (v37 < 0x1000) {
        int v38 = 64;
      }
      if (v40 >= 0x3C0) {
        unsigned int v40 = 960;
      }
      if (v39 >= 0x1000) {
        int v41 = v40;
      }
      else {
        int v41 = 64;
      }
      __int16 v35 = v14 + 4;
      *unint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v38 - 65472) >> 7)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v41 - 65472) >> 7)) >> 32) << 6;
      unint64_t v36 = v21 + 2;
    }
    else
    {
      __int16 v35 = v14;
      unint64_t v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v42 = 0;
      do
      {
        int v43 = &v36[v42];
        unsigned int v44 = *v35;
        int v45 = v44 >> 6;
        unsigned int v46 = v35[1];
        if (v44 >> 6 >= 0x3C0) {
          int v45 = 960;
        }
        if (v44 >= 0x1000) {
          int v47 = v45;
        }
        else {
          int v47 = 64;
        }
        if (v46 >> 6 >= 0x3C0) {
          int v48 = 960;
        }
        else {
          int v48 = v46 >> 6;
        }
        if (v46 < 0x1000) {
          int v48 = 64;
        }
        _WORD *v43 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v47 - 65472) >> 7)) >> 32) << 6;
        v43[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v48 - 65472) >> 7)) >> 32) << 6;
        v42 += 2;
        v35 += 4;
      }
      while (v42 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v49 = 0;
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v49 = v9 - v32;
    do
    {
      unsigned int v51 = v14;
      int v52 = v21;
      if (v33)
      {
        unsigned int v53 = *v14;
        int v54 = v53 >> 6;
        unsigned int v55 = v14[1];
        if (v53 >> 6 >= 0x3C0) {
          int v54 = 960;
        }
        if (v53 < 0x1000) {
          int v54 = 64;
        }
        if (v55 >> 6 >= 0x3C0) {
          int v56 = 960;
        }
        else {
          int v56 = v55 >> 6;
        }
        if (v55 >= 0x1000) {
          int v57 = v56;
        }
        else {
          int v57 = 64;
        }
        unsigned int v51 = v14 + 4;
        *unint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v54 - 65472) >> 7)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v57 - 65472) >> 7)) >> 32) << 6;
        int v52 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v58 = 0;
        do
        {
          unint64_t v59 = &v52[v58];
          unsigned int v60 = *v51;
          int v61 = v60 >> 6;
          unsigned int v62 = v51[1];
          if (v60 >> 6 >= 0x3C0) {
            int v61 = 960;
          }
          if (v60 >= 0x1000) {
            int v63 = v61;
          }
          else {
            int v63 = 64;
          }
          if (v62 >> 6 >= 0x3C0) {
            int v64 = 960;
          }
          else {
            int v64 = v62 >> 6;
          }
          if (v62 < 0x1000) {
            int v64 = 64;
          }
          *unint64_t v59 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v63 - 65472) >> 7)) >> 32) << 6;
          v59[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v64 - 65472) >> 7)) >> 32) << 6;
          v58 += 2;
          v51 += 4;
        }
        while (v58 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v50;
    }
    while (v50 != v49);
  }
  if (v49 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v65 = *v14;
      int v66 = v65 >> 6;
      unsigned int v67 = v14[1];
      unsigned int v68 = v67 >> 6;
      if (v65 >> 6 >= 0x3C0) {
        int v66 = 960;
      }
      if (v65 < 0x1000) {
        int v66 = 64;
      }
      if (v68 >= 0x3C0) {
        unsigned int v68 = 960;
      }
      if (v67 >= 0x1000) {
        int v69 = v68;
      }
      else {
        int v69 = 64;
      }
      v14 += 4;
      *unint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v66 - 65472) >> 7)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v69 - 65472) >> 7)) >> 32) << 6;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v70 = 0;
      do
      {
        int v71 = &v21[v70];
        unsigned int v72 = *v14;
        int v73 = v72 >> 6;
        unsigned int v74 = v14[1];
        if (v72 >> 6 >= 0x3C0) {
          int v73 = 960;
        }
        if (v72 >= 0x1000) {
          int v75 = v73;
        }
        else {
          int v75 = 64;
        }
        if (v74 >> 6 >= 0x3C0) {
          int v76 = 960;
        }
        else {
          int v76 = v74 >> 6;
        }
        if (v74 < 0x1000) {
          int v76 = 64;
        }
        *int v71 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v75 - 65472) >> 7)) >> 32) << 6;
        v71[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v76 - 65472) >> 7)) >> 32) << 6;
        v70 += 2;
        v14 += 4;
      }
      while (v70 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  else {
    unint64_t v25 = v14 - v13;
  }
  if (v25)
  {
    unint64_t v59 = v25;
    uint64_t v60 = a8[1];
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    unint64_t v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    unsigned int v30 = (char *)(*a7 + v27 * v18 + v20);
    uint64_t v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    unint64_t v25 = v59;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
    uint64_t v21 = v60;
  }
  if (v25 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v37 = (_WORD *)((char *)v16 + v15 + 4);
      unsigned int v38 = *v37;
      unsigned int v39 = v37[1];
      __int16 v35 = v16 + 4;
      int v40 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
          + ((unsigned __int16)v16[1] >> 6)
          + ((unsigned __int16)v16[3] >> 6)
          + (v39 >> 6);
      *unint64_t v22 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v38 >> 6)) + 32) & 0xFFC0;
      v22[1] = (16 * v40 + 32) & 0xFFC0;
      unint64_t v36 = v22 + 2;
    }
    else
    {
      __int16 v35 = v16;
      unint64_t v36 = v22;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      unint64_t v42 = v35 + 2;
      do
      {
        int v43 = &v36[v41];
        int v44 = (*(unsigned __int16 *)((char *)v42 + v15 - 2) >> 6)
            + ((unsigned __int16)*(v42 - 1) >> 6)
            + ((unsigned __int16)v42[1] >> 6)
            + (*(unsigned __int16 *)((char *)v42 + v15 + 2) >> 6);
        _WORD *v43 = (16
              * ((*(_WORD *)((char *)v42 + v15 - 4) >> 6)
               + (*(v42 - 2) >> 6)
               + (*v42 >> 6)
               + (*(_WORD *)((char *)v42 + v15) >> 6))
              + 32) & 0xFFC0;
        v43[1] = (16 * v44 + 32) & 0xFFC0;
        v41 += 2;
        v42 += 4;
      }
      while (v41 < v34);
    }
    v16 += v15;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v25 - v33;
    do
    {
      int v47 = v16;
      int v48 = v22;
      if (v8)
      {
        unint64_t v49 = (_WORD *)((char *)v16 + v15 + 4);
        unsigned int v50 = *v49;
        unsigned int v51 = v49[1];
        int v47 = v16 + 4;
        int v52 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
            + ((unsigned __int16)v16[1] >> 6)
            + ((unsigned __int16)v16[3] >> 6)
            + (v51 >> 6);
        *unint64_t v22 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v50 >> 6)) + 32) & 0xFFC0;
        v22[1] = (16 * v52 + 32) & 0xFFC0;
        int v48 = v22 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v53 = 0;
        int v54 = v47 + 2;
        do
        {
          unsigned int v55 = &v48[v53];
          int v56 = (*(unsigned __int16 *)((char *)v54 + v15 - 2) >> 6)
              + ((unsigned __int16)*(v54 - 1) >> 6)
              + ((unsigned __int16)v54[1] >> 6)
              + (*(unsigned __int16 *)((char *)v54 + v15 + 2) >> 6);
          *unsigned int v55 = (16
                * ((*(_WORD *)((char *)v54 + v15 - 4) >> 6)
                 + (*(v54 - 2) >> 6)
                 + (*v54 >> 6)
                 + (*(_WORD *)((char *)v54 + v15) >> 6))
                + 32) & 0xFFC0;
          v55[1] = (16 * v56 + 32) & 0xFFC0;
          v53 += 2;
          v54 += 4;
        }
        while (v53 < v34);
      }
      v16 += v15;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  else {
    unint64_t v25 = v14 - v13;
  }
  if (v25)
  {
    unint64_t v51 = v25;
    uint64_t v52 = a4[1];
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    unint64_t v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    unsigned int v30 = (char *)(*a7 + v27 * v18 + v20);
    uint64_t v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    unint64_t v25 = v51;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
    uint64_t v15 = v52;
  }
  if (v25 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      __int16 v37 = v16[1] & 0xFFC0;
      __int16 v35 = v16 + 4;
      *unint64_t v22 = *v16 & 0xFFC0;
      v22[1] = v37;
      unint64_t v36 = v22 + 2;
    }
    else
    {
      __int16 v35 = v16;
      unint64_t v36 = v22;
    }
    if (v24 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        unsigned int v39 = &v36[v38];
        __int16 v40 = v35[1] & 0xFFC0;
        *unsigned int v39 = *v35 & 0xFFC0;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    v16 += v15;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    unint64_t v41 = 0;
    unint64_t v42 = v25 - v33;
    do
    {
      int v43 = v16;
      int v44 = v22;
      if (v8)
      {
        __int16 v45 = v16[1] & 0xFFC0;
        int v43 = v16 + 4;
        *unint64_t v22 = *v16 & 0xFFC0;
        v22[1] = v45;
        int v44 = v22 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          int v47 = &v44[v46];
          __int16 v48 = v43[1] & 0xFFC0;
          *int v47 = *v43 & 0xFFC0;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      v16 += v15;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v143 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + ((unint64_t)(v143 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v13 - v12;
  unint64_t v25 = v19 - v18;
  if (v24 < v19 - v18) {
    unint64_t v25 = v24;
  }
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    uint64_t v29 = *a8;
    if (v12 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v28 + v30;
    uint64_t v32 = *a7 + v29 * v18 + v20;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v34 = *(unsigned __int16 *)(v31 + 2 * i) >> 6;
          if (v34 >= 0x3AC) {
            unsigned int v34 = 940;
          }
          if (v34 <= 0x40) {
            unsigned int v34 = 64;
          }
          *(_WORD *)(v32 + 2 * i) = (unsigned __int16)((1023 * v34 - 65472) / 0x36C) << 6;
        }
      }
      v31 += v27;
      v32 += v29;
      ++v26;
    }
    while (v26 != v25);
  }
  if (v25 >= (v8 & 1)) {
    uint64_t v35 = v8 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v8)
  {
    if (v9)
    {
      unsigned int v39 = *v15;
      int v40 = v39 >> 6;
      unsigned int v41 = v15[1];
      unsigned int v42 = v41 >> 6;
      unsigned int v43 = *(unsigned __int16 *)((char *)v15 + v14);
      unsigned int v44 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
      if (v39 >> 6 >= 0x3C0) {
        int v40 = 960;
      }
      if (v39 < 0x1000) {
        int v40 = 64;
      }
      if (v42 >= 0x3C0) {
        unsigned int v42 = 960;
      }
      if (v41 < 0x1000) {
        unsigned int v42 = 64;
      }
      if (v43 >> 6 >= 0x3C0) {
        int v45 = 960;
      }
      else {
        int v45 = v43 >> 6;
      }
      if (v43 >= 0x1000) {
        int v46 = v45;
      }
      else {
        int v46 = 64;
      }
      if (v44 >> 6 >= 0x3C0) {
        int v47 = 960;
      }
      else {
        int v47 = v44 >> 6;
      }
      if (v44 >= 0x1000) {
        int v48 = v47;
      }
      else {
        int v48 = 64;
      }
      unsigned int v49 = v15[2];
      int v50 = v49 >> 6;
      unsigned int v51 = v15[3];
      uint64_t v52 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      unsigned int v53 = *v52;
      unsigned int v54 = v52[1];
      if (v49 >> 6 >= 0x3C0) {
        int v50 = 960;
      }
      if (v49 >= 0x1000) {
        int v55 = v50;
      }
      else {
        int v55 = 64;
      }
      if (v51 >> 6 >= 0x3C0) {
        int v56 = 960;
      }
      else {
        int v56 = v51 >> 6;
      }
      if (v51 < 0x1000) {
        int v56 = 64;
      }
      if (v53 >> 6 >= 0x3C0) {
        int v57 = 960;
      }
      else {
        int v57 = v53 >> 6;
      }
      if (v53 < 0x1000) {
        int v57 = 64;
      }
      if (v54 >> 6 >= 0x3C0) {
        int v58 = 960;
      }
      else {
        int v58 = v54 >> 6;
      }
      if (v54 >= 0x1000) {
        int v59 = v58;
      }
      else {
        int v59 = 64;
      }
      __int16 v37 = v15 + 4;
      *uint64_t v21 = (16
            * (((613566757 * (unint64_t)((1023 * v46 - 65472) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v40 - 65472) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v55 - 65472) >> 7)) >> 32)
             + ((613566757 * (unint64_t)((1023 * v57 - 65472) >> 7)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (16
              * (((613566757 * (unint64_t)((1023 * v48 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v42 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v56 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v59 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
      unint64_t v38 = v21 + 2;
    }
    else
    {
      __int16 v37 = v15;
      unint64_t v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v60 = 0;
      int v61 = v37 + 2;
      do
      {
        unsigned int v62 = &v38[v60];
        unsigned int v63 = *(v61 - 2);
        int v64 = v63 >> 6;
        unsigned int v65 = *(v61 - 1);
        int v66 = (unsigned __int16 *)((char *)v61 + v14);
        unsigned int v67 = *(unsigned __int16 *)((char *)v61 + v14 - 4);
        unsigned int v68 = v65 >> 6;
        unsigned int v69 = *(unsigned __int16 *)((char *)v61 + v14 - 2);
        if (v63 >> 6 >= 0x3C0) {
          int v64 = 960;
        }
        BOOL v70 = v63 >= 0x1000;
        unsigned int v71 = v69 >> 6;
        if (!v70) {
          int v64 = 64;
        }
        if (v68 >= 0x3C0) {
          unsigned int v68 = 960;
        }
        if (v65 >= 0x1000) {
          int v72 = v68;
        }
        else {
          int v72 = 64;
        }
        if (v67 >> 6 >= 0x3C0) {
          int v73 = 960;
        }
        else {
          int v73 = v67 >> 6;
        }
        if (v67 >= 0x1000) {
          int v74 = v73;
        }
        else {
          int v74 = 64;
        }
        if (v71 >= 0x3C0) {
          unsigned int v71 = 960;
        }
        BOOL v70 = v69 >= 0x1000;
        unsigned int v75 = *v61;
        unsigned int v76 = v75 >> 6;
        unsigned int v77 = v61[1];
        unsigned int v78 = *v66;
        if (!v70) {
          unsigned int v71 = 64;
        }
        unsigned int v79 = v66[1];
        if (v76 >= 0x3C0) {
          unsigned int v76 = 960;
        }
        if (v75 >= 0x1000) {
          int v80 = v76;
        }
        else {
          int v80 = 64;
        }
        if (v77 >> 6 >= 0x3C0) {
          int v81 = 960;
        }
        else {
          int v81 = v77 >> 6;
        }
        if (v77 < 0x1000) {
          int v81 = 64;
        }
        unsigned int v82 = v79 >> 6;
        if (v78 >> 6 >= 0x3C0) {
          int v83 = 960;
        }
        else {
          int v83 = v78 >> 6;
        }
        if (v78 < 0x1000) {
          int v83 = 64;
        }
        unint64_t v84 = (613566757 * (unint64_t)((1023 * v64 - 65472) >> 7)) >> 32;
        if (v82 >= 0x3C0) {
          unsigned int v82 = 960;
        }
        unint64_t v85 = (613566757 * (unint64_t)((1023 * v72 - 65472) >> 7)) >> 32;
        BOOL v70 = v79 >= 0x1000;
        unint64_t v86 = (613566757 * (unint64_t)((1023 * v74 - 65472) >> 7)) >> 32;
        uint64_t v87 = 613566757 * ((1023 * v71 - 65472) >> 7);
        if (v70) {
          int v88 = v82;
        }
        else {
          int v88 = 64;
        }
        _WORD *v62 = (16
              * (v86
               + v84
               + ((613566757 * (unint64_t)((1023 * v80 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v83 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
        v62[1] = (16
                * (WORD2(v87)
                 + v85
                 + ((613566757 * (unint64_t)((1023 * v81 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v88 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
        v60 += 2;
        v61 += 4;
      }
      while (v60 < v36);
    }
    v15 += v14;
    uint64_t v21 = (_WORD *)((char *)v21 + v143);
  }
  if (v25 != v35)
  {
    unint64_t v89 = 0;
    unint64_t v90 = v25 - v35;
    do
    {
      int v91 = v15;
      unsigned int v92 = v21;
      if (v9)
      {
        unsigned int v93 = *v15;
        int v94 = v93 >> 6;
        unsigned int v95 = v15[1];
        unsigned int v96 = *(unsigned __int16 *)((char *)v15 + v14);
        unsigned int v97 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
        if (v93 >> 6 >= 0x3C0) {
          int v94 = 960;
        }
        if (v93 >= 0x1000) {
          int v98 = v94;
        }
        else {
          int v98 = 64;
        }
        if (v95 >> 6 >= 0x3C0) {
          int v99 = 960;
        }
        else {
          int v99 = v95 >> 6;
        }
        if (v95 < 0x1000) {
          int v99 = 64;
        }
        if (v96 >> 6 >= 0x3C0) {
          int v100 = 960;
        }
        else {
          int v100 = v96 >> 6;
        }
        if (v96 >= 0x1000) {
          int v101 = v100;
        }
        else {
          int v101 = 64;
        }
        if (v97 >> 6 >= 0x3C0) {
          int v102 = 960;
        }
        else {
          int v102 = v97 >> 6;
        }
        if (v97 >= 0x1000) {
          int v103 = v102;
        }
        else {
          int v103 = 64;
        }
        unsigned int v104 = v15[2];
        int v105 = v104 >> 6;
        unsigned int v106 = v15[3];
        int v107 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        unsigned int v108 = *v107;
        unsigned int v109 = v107[1];
        if (v104 >> 6 >= 0x3C0) {
          int v105 = 960;
        }
        if (v104 >= 0x1000) {
          int v110 = v105;
        }
        else {
          int v110 = 64;
        }
        if (v106 >> 6 >= 0x3C0) {
          int v111 = 960;
        }
        else {
          int v111 = v106 >> 6;
        }
        if (v106 < 0x1000) {
          int v111 = 64;
        }
        if (v108 >> 6 >= 0x3C0) {
          int v112 = 960;
        }
        else {
          int v112 = v108 >> 6;
        }
        if (v108 < 0x1000) {
          int v112 = 64;
        }
        if (v109 >> 6 >= 0x3C0) {
          int v113 = 960;
        }
        else {
          int v113 = v109 >> 6;
        }
        if (v109 < 0x1000) {
          int v113 = 64;
        }
        int v91 = v15 + 4;
        *uint64_t v21 = (16
              * (((613566757 * (unint64_t)((1023 * v101 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v98 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v110 - 65472) >> 7)) >> 32)
               + ((613566757 * (unint64_t)((1023 * v112 - 65472) >> 7)) >> 32))
              + 32) & 0xFFC0;
        v21[1] = (16
                * (((613566757 * (unint64_t)((1023 * v103 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v99 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v111 - 65472) >> 7)) >> 32)
                 + ((613566757 * (unint64_t)((1023 * v113 - 65472) >> 7)) >> 32))
                + 32) & 0xFFC0;
        unsigned int v92 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v114 = 0;
        unint64_t v115 = v91 + 2;
        do
        {
          int v116 = &v92[v114];
          unsigned int v117 = *(v115 - 2);
          int v118 = v117 >> 6;
          unsigned int v119 = *(v115 - 1);
          unsigned int v120 = (unsigned __int16 *)((char *)v115 + v14);
          unsigned int v121 = *(unsigned __int16 *)((char *)v115 + v14 - 4);
          unsigned int v122 = v119 >> 6;
          unsigned int v123 = *(unsigned __int16 *)((char *)v115 + v14 - 2);
          if (v117 >> 6 >= 0x3C0) {
            int v118 = 960;
          }
          BOOL v70 = v117 >= 0x1000;
          unsigned int v124 = v123 >> 6;
          if (!v70) {
            int v118 = 64;
          }
          if (v122 >= 0x3C0) {
            unsigned int v122 = 960;
          }
          if (v119 >= 0x1000) {
            int v125 = v122;
          }
          else {
            int v125 = 64;
          }
          if (v121 >> 6 >= 0x3C0) {
            int v126 = 960;
          }
          else {
            int v126 = v121 >> 6;
          }
          if (v121 >= 0x1000) {
            int v127 = v126;
          }
          else {
            int v127 = 64;
          }
          if (v124 >= 0x3C0) {
            unsigned int v124 = 960;
          }
          BOOL v70 = v123 >= 0x1000;
          unsigned int v128 = *v115;
          unsigned int v129 = v128 >> 6;
          unsigned int v130 = v115[1];
          unsigned int v131 = *v120;
          if (!v70) {
            unsigned int v124 = 64;
          }
          unsigned int v132 = v131 >> 6;
          unsigned int v133 = v120[1];
          if (v129 >= 0x3C0) {
            unsigned int v129 = 960;
          }
          if (v128 >= 0x1000) {
            int v134 = v129;
          }
          else {
            int v134 = 64;
          }
          if (v130 >> 6 >= 0x3C0) {
            int v135 = 960;
          }
          else {
            int v135 = v130 >> 6;
          }
          if (v130 < 0x1000) {
            int v135 = 64;
          }
          unsigned int v136 = v133 >> 6;
          if (v132 >= 0x3C0) {
            unsigned int v132 = 960;
          }
          if (v131 < 0x1000) {
            unsigned int v132 = 64;
          }
          unint64_t v137 = (613566757 * (unint64_t)((1023 * v118 - 65472) >> 7)) >> 32;
          if (v136 >= 0x3C0) {
            unsigned int v136 = 960;
          }
          unint64_t v138 = (613566757 * (unint64_t)((1023 * v125 - 65472) >> 7)) >> 32;
          BOOL v70 = v133 >= 0x1000;
          unint64_t v139 = (613566757 * (unint64_t)((1023 * v127 - 65472) >> 7)) >> 32;
          uint64_t v140 = 613566757 * ((1023 * v124 - 65472) >> 7);
          if (v70) {
            int v141 = v136;
          }
          else {
            int v141 = 64;
          }
          *int v116 = (16
                 * (v139
                  + v137
                  + ((613566757 * (unint64_t)((1023 * v134 - 65472) >> 7)) >> 32)
                  + ((613566757 * (unint64_t)((1023 * v132 - 65472) >> 7)) >> 32))
                 + 32) & 0xFFC0;
          v116[1] = (16
                   * (WORD2(v140)
                    + v138
                    + ((613566757 * (unint64_t)((1023 * v135 - 65472) >> 7)) >> 32)
                    + ((613566757 * (unint64_t)((1023 * v141 - 65472) >> 7)) >> 32))
                   + 32) & 0xFFC0;
          v114 += 2;
          v115 += 4;
        }
        while (v114 < v36);
      }
      v15 += v14;
      uint64_t v21 = (_WORD *)((char *)v21 + v143);
      v89 += 2;
    }
    while (v89 < v90);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = (v8 & 1) + v8;
  uint64_t v13 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * v12 + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v16;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = v11 - (v10 + v9);
  unint64_t v24 = v17 - v16;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  unint64_t v25 = v13 - v12;
  unint64_t v26 = v19 - v18;
  if (v25 < v19 - v18) {
    unint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = 0;
    uint64_t v28 = *a4;
    uint64_t v29 = *a3 + *a4 * v12 + 2 * (v10 + v9);
    uint64_t v30 = *a8;
    if (v12 >= v8) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = *a4;
    }
    uint64_t v32 = v29 + v31;
    uint64_t v33 = *a7 + v30 * v18 + v20;
    do
    {
      if (v23)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          unsigned int v35 = *(unsigned __int16 *)(v32 + 2 * i) >> 6;
          if (v35 >= 0x3AC) {
            unsigned int v35 = 940;
          }
          if (v35 <= 0x40) {
            unsigned int v35 = 64;
          }
          *(_WORD *)(v33 + 2 * i) = (unsigned __int16)((1023 * v35 - 65472) / 0x36C) << 6;
        }
      }
      v32 += v28;
      v33 += v30;
      ++v27;
    }
    while (v27 != v26);
  }
  if (v26 >= (v8 & 1)) {
    uint64_t v36 = v8 & 1;
  }
  else {
    uint64_t v36 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v23 - v10;
  if (v8)
  {
    if (v9)
    {
      unsigned int v40 = *v15;
      int v41 = v40 >> 6;
      unsigned int v42 = v15[1];
      unsigned int v43 = v42 >> 6;
      if (v40 >> 6 >= 0x3C0) {
        int v41 = 960;
      }
      if (v40 < 0x1000) {
        int v41 = 64;
      }
      if (v43 >= 0x3C0) {
        unsigned int v43 = 960;
      }
      if (v42 >= 0x1000) {
        int v44 = v43;
      }
      else {
        int v44 = 64;
      }
      unint64_t v38 = v15 + 4;
      *unint64_t v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v41 - 65472) >> 7)) >> 32) << 6;
      v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v44 - 65472) >> 7)) >> 32) << 6;
      unsigned int v39 = v22 + 2;
    }
    else
    {
      unint64_t v38 = v15;
      unsigned int v39 = v22;
    }
    if (v23 != v10)
    {
      unint64_t v45 = 0;
      do
      {
        int v46 = &v39[v45];
        unsigned int v47 = *v38;
        int v48 = v47 >> 6;
        unsigned int v49 = v38[1];
        if (v47 >> 6 >= 0x3C0) {
          int v48 = 960;
        }
        if (v47 >= 0x1000) {
          int v50 = v48;
        }
        else {
          int v50 = 64;
        }
        if (v49 >> 6 >= 0x3C0) {
          int v51 = 960;
        }
        else {
          int v51 = v49 >> 6;
        }
        if (v49 < 0x1000) {
          int v51 = 64;
        }
        *int v46 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v50 - 65472) >> 7)) >> 32) << 6;
        v46[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v51 - 65472) >> 7)) >> 32) << 6;
        v45 += 2;
        v38 += 4;
      }
      while (v45 < v37);
    }
    v15 += v14;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v26 != v36)
  {
    unint64_t v52 = 0;
    unint64_t v53 = v26 - v36;
    uint64_t v54 = 2 * v14;
    do
    {
      int v55 = v15;
      int v56 = v22;
      if (v9)
      {
        unsigned int v57 = *v15;
        int v58 = v57 >> 6;
        unsigned int v59 = v15[1];
        if (v57 >> 6 >= 0x3C0) {
          int v58 = 960;
        }
        if (v57 < 0x1000) {
          int v58 = 64;
        }
        if (v59 >> 6 >= 0x3C0) {
          int v60 = 960;
        }
        else {
          int v60 = v59 >> 6;
        }
        if (v59 >= 0x1000) {
          int v61 = v60;
        }
        else {
          int v61 = 64;
        }
        int v55 = v15 + 4;
        *unint64_t v22 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v58 - 65472) >> 7)) >> 32) << 6;
        v22[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v61 - 65472) >> 7)) >> 32) << 6;
        int v56 = v22 + 2;
      }
      if (v23 != v10)
      {
        unint64_t v62 = 0;
        do
        {
          unsigned int v63 = &v56[v62];
          unsigned int v64 = *v55;
          int v65 = v64 >> 6;
          unsigned int v66 = v55[1];
          if (v64 >> 6 >= 0x3C0) {
            int v65 = 960;
          }
          if (v64 >= 0x1000) {
            int v67 = v65;
          }
          else {
            int v67 = 64;
          }
          if (v66 >> 6 >= 0x3C0) {
            int v68 = 960;
          }
          else {
            int v68 = v66 >> 6;
          }
          if (v66 < 0x1000) {
            int v68 = 64;
          }
          *unsigned int v63 = (unsigned __int16)((613566757 * (unint64_t)((1023 * v67 - 65472) >> 7)) >> 32) << 6;
          v63[1] = (unsigned __int16)((613566757 * (unint64_t)((1023 * v68 - 65472) >> 7)) >> 32) << 6;
          v62 += 2;
          v55 += 4;
        }
        while (v62 < v37);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v54);
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v52 += 2;
    }
    while (v52 < v53);
  }
  return 0;
}

uint64_t vt_Copy_x444_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = a3[1] + v12 * v8 + 4 * v9;
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + v14;
    uint64_t v23 = *a7 + *a8 * v15 + v14;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(unsigned char *)(v22 + i) = -1;
          *(unsigned char *)(v23 + i) = *(unsigned char *)(v24 + 2 * i + 1);
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    uint64_t v29 = v9 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v9)
    {
      char v33 = *(unsigned char *)(v13 + 3);
      uint64_t v31 = v13 + 4;
      *uint64_t v17 = *(unsigned char *)(v13 + 1);
      v17[1] = v33;
      uint64_t v32 = v17 + 2;
    }
    else
    {
      uint64_t v31 = v13;
      uint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        char v36 = *(unsigned char *)(v31 + 1);
        char v37 = *(unsigned char *)(v31 + 3);
        v31 += 4;
        *uint64_t v32 = v36;
        v32[1] = v37;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      char v38 = *(unsigned char *)(v31 + 1);
      char v39 = *(unsigned char *)(v31 + 3);
      *uint64_t v32 = v38;
      v32[1] = v39;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v27)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v11 - v27;
    do
    {
      uint64_t v42 = v13;
      unsigned int v43 = v17;
      if (v9)
      {
        char v44 = *(unsigned char *)(v13 + 3);
        uint64_t v42 = v13 + 4;
        *uint64_t v17 = *(unsigned char *)(v13 + 1);
        v17[1] = v44;
        unsigned int v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          char v47 = *(unsigned char *)(v42 + 1);
          char v48 = *(unsigned char *)(v42 + 3);
          v42 += 4;
          unsigned char *v43 = v47;
          v43[1] = v48;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        char v49 = *(unsigned char *)(v42 + 1);
        char v50 = *(unsigned char *)(v42 + 3);
        unsigned char *v43 = v49;
        v43[1] = v50;
      }
      v13 += v12;
      v17 += v16;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v26 < v11)
  {
    if (v9)
    {
      char v51 = *(unsigned char *)(v13 + 1);
      char v52 = *(unsigned char *)(v13 + 3);
      v13 += 4;
      *uint64_t v17 = v51;
      v17[1] = v52;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        char v54 = *(unsigned char *)(v13 + 1);
        char v55 = *(unsigned char *)(v13 + 3);
        v13 += 4;
        *uint64_t v17 = v54;
        v17[1] = v55;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      char v56 = *(unsigned char *)(v13 + 1);
      char v57 = *(unsigned char *)(v13 + 3);
      *uint64_t v17 = v56;
      v17[1] = v57;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = a3[1] + v12 * v8 + 4 * v9;
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(unsigned char *)(v21 + i) = *(unsigned char *)(v22 + 2 * i + 1);
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      char v32 = *(unsigned char *)(v13 + 3);
      uint64_t v30 = v13 + 4;
      *uint64_t v17 = *(unsigned char *)(v13 + 1);
      v17[1] = v32;
      uint64_t v31 = v17 + 2;
    }
    else
    {
      uint64_t v30 = v13;
      uint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        char v35 = *(unsigned char *)(v30 + 1);
        char v36 = *(unsigned char *)(v30 + 3);
        v30 += 4;
        unsigned char *v31 = v35;
        v31[1] = v36;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      char v37 = *(unsigned char *)(v30 + 1);
      char v38 = *(unsigned char *)(v30 + 3);
      unsigned char *v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      uint64_t v41 = v13;
      uint64_t v42 = v17;
      if (v26)
      {
        char v43 = *(unsigned char *)(v13 + 3);
        uint64_t v41 = v13 + 4;
        *uint64_t v17 = *(unsigned char *)(v13 + 1);
        v17[1] = v43;
        uint64_t v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          char v46 = *(unsigned char *)(v41 + 1);
          char v47 = *(unsigned char *)(v41 + 3);
          v41 += 4;
          *uint64_t v42 = v46;
          v42[1] = v47;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        char v48 = *(unsigned char *)(v41 + 1);
        char v49 = *(unsigned char *)(v41 + 3);
        *uint64_t v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      v17 += v16;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      char v50 = *(unsigned char *)(v13 + 1);
      char v51 = *(unsigned char *)(v13 + 3);
      v13 += 4;
      *uint64_t v17 = v50;
      v17[1] = v51;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        char v53 = *(unsigned char *)(v13 + 1);
        char v54 = *(unsigned char *)(v13 + 3);
        v13 += 4;
        *uint64_t v17 = v53;
        v17[1] = v54;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      char v55 = *(unsigned char *)(v13 + 1);
      char v56 = *(unsigned char *)(v13 + 3);
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_x444_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v15 = a6[3];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v14 + 2 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] < v15) {
    unint64_t v15 = a2[3];
  }
  if (v15)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a3 + *a4 * v8 + 2 * v9;
    uint64_t v22 = *a7 + *a8 * v14 + v13;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v24 = *(unsigned __int16 *)(v21 + 2 * i) >> 6;
          if (v24 >= 0x3AC) {
            unsigned int v24 = 940;
          }
          if (v24 <= 0x40) {
            unsigned int v24 = 64;
          }
          *(unsigned char *)(v22 + i) = (255 * v24 - 16320) / 0x36C;
        }
      }
      v21 += v19;
      v22 += v20;
      ++v18;
    }
    while (v18 != v15);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v25 = v8 & 1;
  if (v15 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    uint64_t v29 = v9 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v9)
    {
      unsigned int v33 = *v12;
      int v34 = v33 >> 6;
      unsigned int v35 = v12[1];
      if (v33 >> 6 >= 0x3C0) {
        int v34 = 960;
      }
      if (v33 >= 0x1000) {
        int v36 = v34;
      }
      else {
        int v36 = 64;
      }
      if (v35 >> 6 >= 0x3C0) {
        int v37 = 960;
      }
      else {
        int v37 = v35 >> 6;
      }
      if (v35 >= 0x1000) {
        int v38 = v37;
      }
      else {
        int v38 = 64;
      }
      uint64_t v31 = v12 + 2;
      *uint64_t v17 = (613566757 * (unint64_t)((255 * v36 - 16320) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((255 * v38 - 16320) >> 7)) >> 32;
      char v32 = v17 + 2;
    }
    else
    {
      uint64_t v31 = v12;
      char v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v40 = v10 - v29;
      do
      {
        unsigned int v41 = *v31;
        int v42 = v41 >> 6;
        unsigned int v43 = v31[1];
        if (v41 >> 6 >= 0x3C0) {
          int v42 = 960;
        }
        if (v41 >= 0x1000) {
          int v44 = v42;
        }
        else {
          int v44 = 64;
        }
        if (v43 >> 6 >= 0x3C0) {
          int v45 = 960;
        }
        else {
          int v45 = v43 >> 6;
        }
        if (v43 < 0x1000) {
          int v45 = 64;
        }
        v31 += 2;
        *char v32 = (613566757 * (unint64_t)((255 * v44 - 16320) >> 7)) >> 32;
        v32[1] = (613566757 * (unint64_t)((255 * v45 - 16320) >> 7)) >> 32;
        v32 += 2;
        --v40;
      }
      while (v40);
      unint64_t v39 = v10 - v29;
    }
    if (v39 + v28 < v10)
    {
      unsigned int v46 = *v31;
      int v47 = v46 >> 6;
      unsigned int v48 = v31[1];
      unsigned int v49 = v48 >> 6;
      if (v46 >> 6 >= 0x3C0) {
        int v47 = 960;
      }
      if (v46 < 0x1000) {
        int v47 = 64;
      }
      if (v49 >= 0x3C0) {
        unsigned int v49 = 960;
      }
      if (v48 >= 0x1000) {
        int v50 = v49;
      }
      else {
        int v50 = 64;
      }
      *char v32 = (613566757 * (unint64_t)((255 * v47 - 16320) >> 7)) >> 32;
      v32[1] = (613566757 * (unint64_t)((255 * v50 - 16320) >> 7)) >> 32;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v17 += v16;
  }
  if (v15 == v26)
  {
    unint64_t v51 = 0;
  }
  else
  {
    uint64_t v52 = 0;
    unint64_t v51 = v15 - v26;
    do
    {
      char v53 = v12;
      char v54 = v17;
      if (v27)
      {
        unsigned int v55 = *v12;
        int v56 = v55 >> 6;
        unsigned int v57 = v12[1];
        if (v55 >> 6 >= 0x3C0) {
          int v56 = 960;
        }
        if (v55 >= 0x1000) {
          int v58 = v56;
        }
        else {
          int v58 = 64;
        }
        if (v57 >> 6 >= 0x3C0) {
          int v59 = 960;
        }
        else {
          int v59 = v57 >> 6;
        }
        if (v57 >= 0x1000) {
          int v60 = v59;
        }
        else {
          int v60 = 64;
        }
        char v53 = v12 + 2;
        *uint64_t v17 = (613566757 * (unint64_t)((255 * v58 - 16320) >> 7)) >> 32;
        v17[1] = (613566757 * (unint64_t)((255 * v60 - 16320) >> 7)) >> 32;
        char v54 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v61 = 0;
      }
      else
      {
        unint64_t v62 = v10 - v29;
        do
        {
          unsigned int v63 = *v53;
          int v64 = v63 >> 6;
          unsigned int v65 = v53[1];
          if (v63 >> 6 >= 0x3C0) {
            int v64 = 960;
          }
          if (v63 >= 0x1000) {
            int v66 = v64;
          }
          else {
            int v66 = 64;
          }
          if (v65 >> 6 >= 0x3C0) {
            int v67 = 960;
          }
          else {
            int v67 = v65 >> 6;
          }
          if (v65 < 0x1000) {
            int v67 = 64;
          }
          v53 += 2;
          *char v54 = (613566757 * (unint64_t)((255 * v66 - 16320) >> 7)) >> 32;
          v54[1] = (613566757 * (unint64_t)((255 * v67 - 16320) >> 7)) >> 32;
          v54 += 2;
          --v62;
        }
        while (v62);
        unint64_t v61 = v10 - v29;
      }
      if (v61 + v28 < v10)
      {
        unsigned int v68 = *v53;
        int v69 = v68 >> 6;
        unsigned int v70 = v53[1];
        if (v68 >> 6 >= 0x3C0) {
          int v69 = 960;
        }
        if (v68 >= 0x1000) {
          int v71 = v69;
        }
        else {
          int v71 = 64;
        }
        if (v70 >> 6 >= 0x3C0) {
          int v72 = 960;
        }
        else {
          int v72 = v70 >> 6;
        }
        if (v70 >= 0x1000) {
          int v73 = v72;
        }
        else {
          int v73 = 64;
        }
        *char v54 = (613566757 * (unint64_t)((255 * v71 - 16320) >> 7)) >> 32;
        v54[1] = (613566757 * (unint64_t)((255 * v73 - 16320) >> 7)) >> 32;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v17 += v16;
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v25 < v15)
  {
    if (v27)
    {
      unsigned int v74 = *v12;
      int v75 = v74 >> 6;
      unsigned int v76 = v12[1];
      unsigned int v77 = v76 >> 6;
      if (v74 >> 6 >= 0x3C0) {
        int v75 = 960;
      }
      if (v74 < 0x1000) {
        int v75 = 64;
      }
      if (v77 >= 0x3C0) {
        unsigned int v77 = 960;
      }
      if (v76 >= 0x1000) {
        int v78 = v77;
      }
      else {
        int v78 = 64;
      }
      v12 += 2;
      *uint64_t v17 = (613566757 * (unint64_t)((255 * v75 - 16320) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((255 * v78 - 16320) >> 7)) >> 32;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v79 = v10 - v29;
      do
      {
        unsigned int v80 = *v12;
        int v81 = v80 >> 6;
        unsigned int v82 = v12[1];
        if (v80 >> 6 >= 0x3C0) {
          int v81 = 960;
        }
        if (v80 >= 0x1000) {
          int v83 = v81;
        }
        else {
          int v83 = 64;
        }
        if (v82 >> 6 >= 0x3C0) {
          int v84 = 960;
        }
        else {
          int v84 = v82 >> 6;
        }
        if (v82 < 0x1000) {
          int v84 = 64;
        }
        v12 += 2;
        *uint64_t v17 = (613566757 * (unint64_t)((255 * v83 - 16320) >> 7)) >> 32;
        v17[1] = (613566757 * (unint64_t)((255 * v84 - 16320) >> 7)) >> 32;
        v17 += 2;
        --v79;
      }
      while (v79);
    }
    if (v30 + v28 < v10)
    {
      unsigned int v85 = *v12;
      int v86 = v85 >> 6;
      unsigned int v87 = v12[1];
      unsigned int v88 = v87 >> 6;
      if (v85 >> 6 >= 0x3C0) {
        int v86 = 960;
      }
      if (v85 < 0x1000) {
        int v86 = 64;
      }
      if (v88 >= 0x3C0) {
        unsigned int v88 = 960;
      }
      if (v87 >= 0x1000) {
        int v89 = v88;
      }
      else {
        int v89 = 64;
      }
      *uint64_t v17 = (613566757 * (unint64_t)((255 * v86 - 16320) >> 7)) >> 32;
      v17[1] = (613566757 * (unint64_t)((255 * v89 - 16320) >> 7)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v16;
    uint64_t v28 = *a7 + *a8 * v18 + v16;
    uint64_t v29 = *a3 + v24 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v27 + i) = -1;
          *(unsigned char *)(v28 + i) = *(unsigned char *)(v29 + 2 * i + 1);
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v21 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v35 = v14 + 8;
      unsigned int v37 = (v14[3] + v14[7] + 1) >> 1;
      *uint64_t v20 = (v14[1] + v14[5] + 1) >> 1;
      v20[1] = v37;
      int v36 = v20 + 2;
    }
    else
    {
      unsigned int v35 = v14;
      int v36 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        unint64_t v39 = &v36[v38];
        unsigned int v40 = (v35[3] + v35[7] + 1) >> 1;
        *unint64_t v39 = (v35[1] + v35[5] + 1) >> 1;
        v39[1] = v40;
        v38 += 2;
        v35 += 8;
      }
      while (v38 < v34);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v8 - v32;
    do
    {
      unsigned int v43 = v14;
      int v44 = v20;
      if (v33)
      {
        unsigned int v43 = v14 + 8;
        unsigned int v45 = (v14[3] + v14[7] + 1) >> 1;
        *uint64_t v20 = (v14[1] + v14[5] + 1) >> 1;
        v20[1] = v45;
        int v44 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          int v47 = &v44[v46];
          unsigned int v48 = (v43[3] + v43[7] + 1) >> 1;
          *int v47 = (v43[1] + v43[5] + 1) >> 1;
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v34);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v8)
  {
    if (v33)
    {
      int v49 = v14[1];
      int v50 = v14[3];
      int v51 = v14[5];
      int v52 = v14[7];
      v14 += 8;
      *uint64_t v20 = (v49 + v51 + 1) >> 1;
      v20[1] = (v50 + v52 + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v53 = 0;
      do
      {
        char v54 = &v20[v53];
        unsigned int v55 = (v14[3] + v14[7] + 1) >> 1;
        *char v54 = (v14[1] + v14[5] + 1) >> 1;
        v54[1] = v55;
        v53 += 2;
        v14 += 8;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v16;
    uint64_t v28 = *a7 + *a8 * v18 + v16;
    uint64_t v29 = *a3 + v24 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v27 + i) = -1;
          *(unsigned char *)(v28 + i) = *(unsigned char *)(v29 + 2 * i + 1);
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v21 - v10;
  if (v12)
  {
    if (v33)
    {
      char v37 = *(unsigned char *)(v14 + 3);
      uint64_t v35 = v14 + 8;
      *uint64_t v20 = *(unsigned char *)(v14 + 1);
      v20[1] = v37;
      int v36 = v20 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      int v36 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        unint64_t v39 = &v36[v38];
        char v40 = *(unsigned char *)(v35 + 3);
        *unint64_t v39 = *(unsigned char *)(v35 + 1);
        v39[1] = v40;
        v38 += 2;
        v35 += 8;
      }
      while (v38 < v34);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v8 - v32;
    do
    {
      uint64_t v43 = v14;
      int v44 = v20;
      if (v33)
      {
        char v45 = *(unsigned char *)(v14 + 3);
        uint64_t v43 = v14 + 8;
        *uint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v45;
        int v44 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          int v47 = &v44[v46];
          char v48 = *(unsigned char *)(v43 + 3);
          *int v47 = *(unsigned char *)(v43 + 1);
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v34);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v8)
  {
    if (v33)
    {
      char v49 = *(unsigned char *)(v14 + 1);
      char v50 = *(unsigned char *)(v14 + 3);
      v14 += 8;
      *uint64_t v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        int v52 = &v20[v51];
        char v53 = *(unsigned char *)(v14 + 3);
        *int v52 = *(unsigned char *)(v14 + 1);
        v52[1] = v53;
        v51 += 2;
        v14 += 8;
      }
      while (v51 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = *(unsigned char *)(v27 + 2 * i + 1);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      char v33 = v14 + 8;
      unsigned int v35 = (v14[3] + v14[7] + 1) >> 1;
      *uint64_t v20 = (v14[1] + v14[5] + 1) >> 1;
      v20[1] = v35;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      char v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        char v37 = &v34[v36];
        unsigned int v38 = (v33[3] + v33[7] + 1) >> 1;
        *char v37 = (v33[1] + v33[5] + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 8;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      unint64_t v41 = v14;
      uint64_t v42 = v20;
      if (v31)
      {
        unint64_t v41 = v14 + 8;
        unsigned int v43 = (v14[3] + v14[7] + 1) >> 1;
        *uint64_t v20 = (v14[1] + v14[5] + 1) >> 1;
        v20[1] = v43;
        uint64_t v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          char v45 = &v42[v44];
          unsigned int v46 = (v41[3] + v41[7] + 1) >> 1;
          *char v45 = (v41[1] + v41[5] + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 8;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      int v47 = v14[1];
      int v48 = v14[3];
      int v49 = v14[5];
      int v50 = v14[7];
      v14 += 8;
      *uint64_t v20 = (v47 + v49 + 1) >> 1;
      v20[1] = (v48 + v50 + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        int v52 = &v20[v51];
        unsigned int v53 = (v14[3] + v14[7] + 1) >> 1;
        *int v52 = (v14[1] + v14[5] + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 8;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = *(unsigned char *)(v27 + 2 * i + 1);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      char v35 = *(unsigned char *)(v14 + 3);
      uint64_t v33 = v14 + 8;
      *uint64_t v20 = *(unsigned char *)(v14 + 1);
      v20[1] = v35;
      unint64_t v34 = v20 + 2;
    }
    else
    {
      uint64_t v33 = v14;
      unint64_t v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        char v37 = &v34[v36];
        char v38 = *(unsigned char *)(v33 + 3);
        *char v37 = *(unsigned char *)(v33 + 1);
        v37[1] = v38;
        v36 += 2;
        v33 += 8;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      uint64_t v41 = v14;
      uint64_t v42 = v20;
      if (v31)
      {
        char v43 = *(unsigned char *)(v14 + 3);
        uint64_t v41 = v14 + 8;
        *uint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v43;
        uint64_t v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          char v45 = &v42[v44];
          char v46 = *(unsigned char *)(v41 + 3);
          *char v45 = *(unsigned char *)(v41 + 1);
          v45[1] = v46;
          v44 += 2;
          v41 += 8;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      char v47 = *(unsigned char *)(v14 + 1);
      char v48 = *(unsigned char *)(v14 + 3);
      v14 += 8;
      *uint64_t v20 = v47;
      v20[1] = v48;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v49 = 0;
      do
      {
        int v50 = &v20[v49];
        char v51 = *(unsigned char *)(v14 + 3);
        unsigned char *v50 = *(unsigned char *)(v14 + 1);
        v50[1] = v51;
        v49 += 2;
        v14 += 8;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v12 + 2 * v11;
    uint64_t v27 = *a7 + *a8 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v29 = *(unsigned __int16 *)(v26 + 2 * i) >> 6;
          if (v29 >= 0x3AC) {
            unsigned int v29 = 940;
          }
          if (v29 <= 0x40) {
            unsigned int v29 = 64;
          }
          *(unsigned char *)(v27 + i) = (255 * v29 - 16320) / 0x36C;
        }
      }
      v26 += v24;
      v27 += v25;
      ++v23;
    }
    while (v23 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v21 - v10;
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = *v14;
      int v37 = v36 >> 6;
      unsigned int v38 = v14[1];
      unsigned int v39 = v38 >> 6;
      if (v36 >> 6 >= 0x3C0) {
        int v37 = 960;
      }
      if (v36 < 0x1000) {
        int v37 = 64;
      }
      if (v39 >= 0x3C0) {
        unsigned int v39 = 960;
      }
      if (v38 >= 0x1000) {
        int v40 = v39;
      }
      else {
        int v40 = 64;
      }
      unsigned int v41 = v14[2];
      int v42 = v41 >> 6;
      unsigned int v43 = v14[3];
      if (v41 >> 6 >= 0x3C0) {
        int v42 = 960;
      }
      if (v41 >= 0x1000) {
        int v44 = v42;
      }
      else {
        int v44 = 64;
      }
      if (v43 >> 6 >= 0x3C0) {
        int v45 = 960;
      }
      else {
        int v45 = v43 >> 6;
      }
      if (v43 < 0x1000) {
        int v45 = 64;
      }
      unint64_t v34 = v14 + 4;
      *uint64_t v20 = (((613566757 * (unint64_t)((255 * v37 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v44 - 16320) >> 7)) >> 32)
                          + 1) >> 1;
      v20[1] = (((613566757 * (unint64_t)((255 * v40 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v45 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
      char v35 = v20 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      char v35 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v46 = 0;
      do
      {
        char v47 = &v35[v46];
        unsigned int v48 = *v34;
        int v49 = v48 >> 6;
        unsigned int v50 = v34[1];
        if (v48 >> 6 >= 0x3C0) {
          int v49 = 960;
        }
        if (v48 >= 0x1000) {
          int v51 = v49;
        }
        else {
          int v51 = 64;
        }
        if (v50 >> 6 >= 0x3C0) {
          int v52 = 960;
        }
        else {
          int v52 = v50 >> 6;
        }
        if (v50 < 0x1000) {
          int v52 = 64;
        }
        unsigned int v53 = v34[2];
        int v54 = v53 >> 6;
        unsigned int v55 = v34[3];
        if (v53 >> 6 >= 0x3C0) {
          int v54 = 960;
        }
        if (v53 >= 0x1000) {
          int v56 = v54;
        }
        else {
          int v56 = 64;
        }
        if (v55 >> 6 >= 0x3C0) {
          int v57 = 960;
        }
        else {
          int v57 = v55 >> 6;
        }
        if (v55 < 0x1000) {
          int v57 = 64;
        }
        *char v47 = (((613566757 * (unint64_t)((255 * v51 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v56 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
        v47[1] = (((613566757 * (unint64_t)((255 * v52 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v57 - 16320) >> 7)) >> 32)
                              + 1) >> 1;
        v46 += 2;
        v34 += 4;
      }
      while (v46 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v31)
  {
    unint64_t v58 = 0;
  }
  else
  {
    uint64_t v59 = 0;
    unint64_t v58 = v9 - v31;
    do
    {
      int v60 = v14;
      unint64_t v61 = v20;
      if (v32)
      {
        unsigned int v62 = *v14;
        int v63 = v62 >> 6;
        unsigned int v64 = v14[1];
        if (v62 >> 6 >= 0x3C0) {
          int v63 = 960;
        }
        if (v62 < 0x1000) {
          int v63 = 64;
        }
        if (v64 >> 6 >= 0x3C0) {
          int v65 = 960;
        }
        else {
          int v65 = v64 >> 6;
        }
        if (v64 >= 0x1000) {
          int v66 = v65;
        }
        else {
          int v66 = 64;
        }
        unsigned int v67 = v14[2];
        int v68 = v67 >> 6;
        unsigned int v69 = v14[3];
        if (v67 >> 6 >= 0x3C0) {
          int v68 = 960;
        }
        if (v67 < 0x1000) {
          int v68 = 64;
        }
        if (v69 >> 6 >= 0x3C0) {
          int v70 = 960;
        }
        else {
          int v70 = v69 >> 6;
        }
        if (v69 >= 0x1000) {
          int v71 = v70;
        }
        else {
          int v71 = 64;
        }
        int v60 = v14 + 4;
        *uint64_t v20 = (((613566757 * (unint64_t)((255 * v63 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v68 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
        v20[1] = (((613566757 * (unint64_t)((255 * v66 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v71 - 16320) >> 7)) >> 32)
                              + 1) >> 1;
        unint64_t v61 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v72 = 0;
        do
        {
          int v73 = &v61[v72];
          unsigned int v74 = *v60;
          int v75 = v74 >> 6;
          unsigned int v76 = v60[1];
          if (v74 >> 6 >= 0x3C0) {
            int v75 = 960;
          }
          if (v74 >= 0x1000) {
            int v77 = v75;
          }
          else {
            int v77 = 64;
          }
          if (v76 >> 6 >= 0x3C0) {
            int v78 = 960;
          }
          else {
            int v78 = v76 >> 6;
          }
          if (v76 < 0x1000) {
            int v78 = 64;
          }
          unsigned int v79 = v60[2];
          int v80 = v79 >> 6;
          unsigned int v81 = v60[3];
          if (v79 >> 6 >= 0x3C0) {
            int v80 = 960;
          }
          if (v79 >= 0x1000) {
            int v82 = v80;
          }
          else {
            int v82 = 64;
          }
          if (v81 >> 6 >= 0x3C0) {
            int v83 = 960;
          }
          else {
            int v83 = v81 >> 6;
          }
          if (v81 < 0x1000) {
            int v83 = 64;
          }
          *int v73 = (((613566757 * (unint64_t)((255 * v77 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v82 - 16320) >> 7)) >> 32)
                              + 1) >> 1;
          v73[1] = (((613566757 * (unint64_t)((255 * v78 - 16320) >> 7)) >> 32)
                                + ((613566757 * (unint64_t)((255 * v83 - 16320) >> 7)) >> 32)
                                + 1) >> 1;
          v72 += 2;
          v60 += 4;
        }
        while (v72 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v59;
    }
    while (v59 != v58);
  }
  if (v58 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v84 = *v14;
      int v85 = v84 >> 6;
      unsigned int v86 = v14[1];
      unsigned int v87 = v86 >> 6;
      if (v84 >> 6 >= 0x3C0) {
        int v85 = 960;
      }
      if (v84 < 0x1000) {
        int v85 = 64;
      }
      if (v87 >= 0x3C0) {
        unsigned int v87 = 960;
      }
      if (v86 >= 0x1000) {
        int v88 = v87;
      }
      else {
        int v88 = 64;
      }
      unsigned int v89 = v14[2];
      int v90 = v89 >> 6;
      unsigned int v91 = v14[3];
      if (v89 >> 6 >= 0x3C0) {
        int v90 = 960;
      }
      if (v89 >= 0x1000) {
        int v92 = v90;
      }
      else {
        int v92 = 64;
      }
      if (v91 >> 6 >= 0x3C0) {
        int v93 = 960;
      }
      else {
        int v93 = v91 >> 6;
      }
      if (v91 >= 0x1000) {
        int v94 = v93;
      }
      else {
        int v94 = 64;
      }
      v14 += 4;
      *uint64_t v20 = (((613566757 * (unint64_t)((255 * v85 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v92 - 16320) >> 7)) >> 32)
                          + 1) >> 1;
      v20[1] = (((613566757 * (unint64_t)((255 * v88 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v94 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v95 = 0;
      do
      {
        unsigned int v96 = &v20[v95];
        unsigned int v97 = *v14;
        int v98 = v97 >> 6;
        unsigned int v99 = v14[1];
        if (v97 >> 6 >= 0x3C0) {
          int v98 = 960;
        }
        if (v97 >= 0x1000) {
          int v100 = v98;
        }
        else {
          int v100 = 64;
        }
        if (v99 >> 6 >= 0x3C0) {
          int v101 = 960;
        }
        else {
          int v101 = v99 >> 6;
        }
        if (v99 < 0x1000) {
          int v101 = 64;
        }
        unsigned int v102 = v14[2];
        int v103 = v102 >> 6;
        unsigned int v104 = v14[3];
        if (v102 >> 6 >= 0x3C0) {
          int v103 = 960;
        }
        if (v102 >= 0x1000) {
          int v105 = v103;
        }
        else {
          int v105 = 64;
        }
        if (v104 >> 6 >= 0x3C0) {
          int v106 = 960;
        }
        else {
          int v106 = v104 >> 6;
        }
        if (v104 < 0x1000) {
          int v106 = 64;
        }
        *unsigned int v96 = (((613566757 * (unint64_t)((255 * v100 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v105 - 16320) >> 7)) >> 32)
                            + 1) >> 1;
        v96[1] = (((613566757 * (unint64_t)((255 * v101 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v106 - 16320) >> 7)) >> 32)
                              + 1) >> 1;
        v95 += 2;
        v14 += 4;
      }
      while (v95 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_x444_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a3 + *a4 * v12 + 2 * v11;
    uint64_t v27 = *a7 + *a8 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v29 = *(unsigned __int16 *)(v26 + 2 * i) >> 6;
          if (v29 >= 0x3AC) {
            unsigned int v29 = 940;
          }
          if (v29 <= 0x40) {
            unsigned int v29 = 64;
          }
          *(unsigned char *)(v27 + i) = (255 * v29 - 16320) / 0x36C;
        }
      }
      v26 += v24;
      v27 += v25;
      ++v23;
    }
    while (v23 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v21 - v10;
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = *v14;
      int v37 = v36 >> 6;
      unsigned int v38 = v14[1];
      unsigned int v39 = v38 >> 6;
      if (v36 >> 6 >= 0x3C0) {
        int v37 = 960;
      }
      if (v36 < 0x1000) {
        int v37 = 64;
      }
      if (v39 >= 0x3C0) {
        unsigned int v39 = 960;
      }
      if (v38 >= 0x1000) {
        int v40 = v39;
      }
      else {
        int v40 = 64;
      }
      unint64_t v34 = v14 + 4;
      *uint64_t v20 = (613566757 * (unint64_t)((255 * v37 - 16320) >> 7)) >> 32;
      v20[1] = (613566757 * (unint64_t)((255 * v40 - 16320) >> 7)) >> 32;
      char v35 = v20 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      char v35 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        int v42 = &v35[v41];
        unsigned int v43 = *v34;
        int v44 = v43 >> 6;
        unsigned int v45 = v34[1];
        if (v43 >> 6 >= 0x3C0) {
          int v44 = 960;
        }
        if (v43 >= 0x1000) {
          int v46 = v44;
        }
        else {
          int v46 = 64;
        }
        if (v45 >> 6 >= 0x3C0) {
          int v47 = 960;
        }
        else {
          int v47 = v45 >> 6;
        }
        if (v45 < 0x1000) {
          int v47 = 64;
        }
        *int v42 = (613566757 * (unint64_t)((255 * v46 - 16320) >> 7)) >> 32;
        v42[1] = (613566757 * (unint64_t)((255 * v47 - 16320) >> 7)) >> 32;
        v41 += 2;
        v34 += 4;
      }
      while (v41 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v31)
  {
    unint64_t v48 = 0;
  }
  else
  {
    uint64_t v49 = 0;
    unint64_t v48 = v9 - v31;
    do
    {
      unsigned int v50 = v14;
      int v51 = v20;
      if (v32)
      {
        unsigned int v52 = *v14;
        int v53 = v52 >> 6;
        unsigned int v54 = v14[1];
        if (v52 >> 6 >= 0x3C0) {
          int v53 = 960;
        }
        if (v52 < 0x1000) {
          int v53 = 64;
        }
        if (v54 >> 6 >= 0x3C0) {
          int v55 = 960;
        }
        else {
          int v55 = v54 >> 6;
        }
        if (v54 >= 0x1000) {
          int v56 = v55;
        }
        else {
          int v56 = 64;
        }
        unsigned int v50 = v14 + 4;
        *uint64_t v20 = (613566757 * (unint64_t)((255 * v53 - 16320) >> 7)) >> 32;
        v20[1] = (613566757 * (unint64_t)((255 * v56 - 16320) >> 7)) >> 32;
        int v51 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v57 = 0;
        do
        {
          unint64_t v58 = &v51[v57];
          unsigned int v59 = *v50;
          int v60 = v59 >> 6;
          unsigned int v61 = v50[1];
          if (v59 >> 6 >= 0x3C0) {
            int v60 = 960;
          }
          if (v59 >= 0x1000) {
            int v62 = v60;
          }
          else {
            int v62 = 64;
          }
          if (v61 >> 6 >= 0x3C0) {
            int v63 = 960;
          }
          else {
            int v63 = v61 >> 6;
          }
          if (v61 < 0x1000) {
            int v63 = 64;
          }
          *unint64_t v58 = (613566757 * (unint64_t)((255 * v62 - 16320) >> 7)) >> 32;
          v58[1] = (613566757 * (unint64_t)((255 * v63 - 16320) >> 7)) >> 32;
          v57 += 2;
          v50 += 4;
        }
        while (v57 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v49;
    }
    while (v49 != v48);
  }
  if (v48 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v64 = *v14;
      int v65 = v64 >> 6;
      unsigned int v66 = v14[1];
      unsigned int v67 = v66 >> 6;
      if (v64 >> 6 >= 0x3C0) {
        int v65 = 960;
      }
      if (v64 < 0x1000) {
        int v65 = 64;
      }
      if (v67 >= 0x3C0) {
        unsigned int v67 = 960;
      }
      if (v66 >= 0x1000) {
        int v68 = v67;
      }
      else {
        int v68 = 64;
      }
      v14 += 4;
      *uint64_t v20 = (613566757 * (unint64_t)((255 * v65 - 16320) >> 7)) >> 32;
      v20[1] = (613566757 * (unint64_t)((255 * v68 - 16320) >> 7)) >> 32;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v69 = 0;
      do
      {
        int v70 = &v20[v69];
        unsigned int v71 = *v14;
        int v72 = v71 >> 6;
        unsigned int v73 = v14[1];
        if (v71 >> 6 >= 0x3C0) {
          int v72 = 960;
        }
        if (v71 >= 0x1000) {
          int v74 = v72;
        }
        else {
          int v74 = 64;
        }
        if (v73 >> 6 >= 0x3C0) {
          int v75 = 960;
        }
        else {
          int v75 = v73 >> 6;
        }
        if (v73 < 0x1000) {
          int v75 = 64;
        }
        *int v70 = (613566757 * (unint64_t)((255 * v74 - 16320) >> 7)) >> 32;
        v70[1] = (613566757 * (unint64_t)((255 * v75 - 16320) >> 7)) >> 32;
        v69 += 2;
        v14 += 4;
      }
      while (v69 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v27 + v30;
    uint64_t v32 = a7[2] + v29 * v18 + v16;
    uint64_t v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = *(unsigned char *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      int v37 = v15 + 8;
      unsigned int v39 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *unint64_t v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v21[1] = v39;
      unsigned int v38 = v21 + 2;
    }
    else
    {
      int v37 = v15;
      unsigned int v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v40 = 0;
      unint64_t v41 = v37 + 4;
      do
      {
        int v42 = &v38[v40];
        unsigned int v43 = (*(v41 - 1) + v41[3] + v41[v14 - 1] + v41[v14 + 3] + 2) >> 2;
        *int v42 = (*(v41 - 3) + v41[1] + v41[v14 - 3] + v41[v14 + 1] + 2) >> 2;
        v42[1] = v43;
        v40 += 2;
        v41 += 8;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v24 - v35;
    do
    {
      int v46 = v15;
      int v47 = v21;
      if (v9)
      {
        int v46 = v15 + 8;
        unsigned int v48 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *unint64_t v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v21[1] = v48;
        int v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v49 = 0;
        unsigned int v50 = v46 + 4;
        do
        {
          int v51 = &v47[v49];
          unsigned int v52 = (*(v50 - 1) + v50[3] + v50[v14 - 1] + v50[v14 + 3] + 2) >> 2;
          *int v51 = (*(v50 - 3) + v50[1] + v50[v14 - 3] + v50[v14 + 1] + 2) >> 2;
          v51[1] = v52;
          v49 += 2;
          v50 += 8;
        }
        while (v49 < v36);
      }
      v15 += 2 * v14;
      v21 += v20;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  uint64_t v15 = a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    uint64_t v29 = a8[2];
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v27 + v30;
    uint64_t v32 = a7[2] + v29 * v18 + v16;
    uint64_t v33 = *a7 + v28 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(unsigned char *)(v32 + i) = -1;
          *(unsigned char *)(v33 + i) = *(unsigned char *)(v31 + 2 * i + 1);
        }
      }
      v31 += v26;
      v33 += v28;
      v32 += v29;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      char v39 = *(unsigned char *)(v15 + 3);
      uint64_t v37 = v15 + 8;
      *unint64_t v21 = *(unsigned char *)(v15 + 1);
      v21[1] = v39;
      unsigned int v38 = v21 + 2;
    }
    else
    {
      uint64_t v37 = v15;
      unsigned int v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        unint64_t v41 = &v38[v40];
        char v42 = *(unsigned char *)(v37 + 3);
        *unint64_t v41 = *(unsigned char *)(v37 + 1);
        v41[1] = v42;
        v40 += 2;
        v37 += 8;
      }
      while (v40 < v36);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v24 - v35;
    uint64_t v45 = 2 * v14;
    do
    {
      uint64_t v46 = v15;
      int v47 = v21;
      if (v9)
      {
        char v48 = *(unsigned char *)(v15 + 3);
        uint64_t v46 = v15 + 8;
        *unint64_t v21 = *(unsigned char *)(v15 + 1);
        v21[1] = v48;
        int v47 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unsigned int v50 = &v47[v49];
          char v51 = *(unsigned char *)(v46 + 3);
          unsigned char *v50 = *(unsigned char *)(v46 + 1);
          v50[1] = v51;
          v49 += 2;
          v46 += 8;
        }
        while (v49 < v36);
      }
      v15 += v45;
      v21 += v20;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = *(unsigned char *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v34 = v15 + 8;
      unsigned int v36 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *unint64_t v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      unsigned int v38 = v34 + 4;
      do
      {
        char v39 = &v35[v37];
        unsigned int v40 = (*(v38 - 1) + v38[3] + v38[v14 - 1] + v38[v14 + 3] + 2) >> 2;
        *char v39 = (*(v38 - 3) + v38[1] + v38[v14 - 3] + v38[v14 + 1] + 2) >> 2;
        v39[1] = v40;
        v37 += 2;
        v38 += 8;
      }
      while (v37 < v33);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v41 = 0;
    unint64_t v42 = v24 - v32;
    do
    {
      unint64_t v43 = v15;
      unint64_t v44 = v21;
      if (v8)
      {
        unint64_t v43 = v15 + 8;
        unsigned int v45 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *unint64_t v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v21[1] = v45;
        unint64_t v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        int v47 = v43 + 4;
        do
        {
          char v48 = &v44[v46];
          unsigned int v49 = (*(v47 - 1) + v47[3] + v47[v14 - 1] + v47[v14 + 3] + 2) >> 2;
          unsigned char *v48 = (*(v47 - 3) + v47[1] + v47[v14 - 3] + v47[v14 + 1] + 2) >> 2;
          v48[1] = v49;
          v46 += 2;
          v47 += 8;
        }
        while (v46 < v33);
      }
      v15 += 2 * v14;
      v21 += v20;
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = *(unsigned char *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      char v36 = *(unsigned char *)(v15 + 3);
      uint64_t v34 = v15 + 8;
      *unint64_t v21 = *(unsigned char *)(v15 + 1);
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      uint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unsigned int v38 = &v35[v37];
        char v39 = *(unsigned char *)(v34 + 3);
        *unsigned int v38 = *(unsigned char *)(v34 + 1);
        v38[1] = v39;
        v37 += 2;
        v34 += 8;
      }
      while (v37 < v33);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v32;
    uint64_t v42 = 2 * v14;
    do
    {
      uint64_t v43 = v15;
      unint64_t v44 = v21;
      if (v8)
      {
        char v45 = *(unsigned char *)(v15 + 3);
        uint64_t v43 = v15 + 8;
        *unint64_t v21 = *(unsigned char *)(v15 + 1);
        v21[1] = v45;
        unint64_t v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          int v47 = &v44[v46];
          char v48 = *(unsigned char *)(v43 + 3);
          *int v47 = *(unsigned char *)(v43 + 1);
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v33);
      }
      v15 += v42;
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v140 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + ((unint64_t)(v140 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  unint64_t v23 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v24 = v19 - v18;
  if (v23 >= v24) {
    unint64_t v23 = v24;
  }
  if (v23)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v28 = *a8;
    if (v13 >= v9) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = *a4;
    }
    uint64_t v30 = v27 + v29;
    uint64_t v31 = *a7 + v28 * v18 + v16;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v33 = *(unsigned __int16 *)(v30 + 2 * i) >> 6;
          if (v33 >= 0x3AC) {
            unsigned int v33 = 940;
          }
          if (v33 <= 0x40) {
            unsigned int v33 = 64;
          }
          *(unsigned char *)(v31 + i) = (255 * v33 - 16320) / 0x36C;
        }
      }
      v30 += v26;
      v31 += v28;
      ++v25;
    }
    while (v25 != v23);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v23 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v21 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v38 = *v15;
      int v39 = v38 >> 6;
      unsigned int v40 = v15[1];
      unsigned int v41 = v40 >> 6;
      unsigned int v42 = *(unsigned __int16 *)((char *)v15 + v14);
      unsigned int v43 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
      if (v38 >> 6 >= 0x3C0) {
        int v39 = 960;
      }
      if (v38 < 0x1000) {
        int v39 = 64;
      }
      if (v41 >= 0x3C0) {
        unsigned int v41 = 960;
      }
      if (v40 < 0x1000) {
        unsigned int v41 = 64;
      }
      if (v42 >> 6 >= 0x3C0) {
        int v44 = 960;
      }
      else {
        int v44 = v42 >> 6;
      }
      if (v42 >= 0x1000) {
        int v45 = v44;
      }
      else {
        int v45 = 64;
      }
      if (v43 >> 6 >= 0x3C0) {
        int v46 = 960;
      }
      else {
        int v46 = v43 >> 6;
      }
      if (v43 >= 0x1000) {
        int v47 = v46;
      }
      else {
        int v47 = 64;
      }
      unsigned int v48 = v15[2];
      int v49 = v48 >> 6;
      unsigned int v50 = v15[3];
      char v51 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      unsigned int v52 = *v51;
      unsigned int v53 = v51[1];
      if (v48 >> 6 >= 0x3C0) {
        int v49 = 960;
      }
      if (v48 >= 0x1000) {
        int v54 = v49;
      }
      else {
        int v54 = 64;
      }
      if (v50 >> 6 >= 0x3C0) {
        int v55 = 960;
      }
      else {
        int v55 = v50 >> 6;
      }
      if (v50 < 0x1000) {
        int v55 = 64;
      }
      if (v52 >> 6 >= 0x3C0) {
        int v56 = 960;
      }
      else {
        int v56 = v52 >> 6;
      }
      if (v52 < 0x1000) {
        int v56 = 64;
      }
      if (v53 >> 6 >= 0x3C0) {
        int v57 = 960;
      }
      else {
        int v57 = v53 >> 6;
      }
      if (v53 >= 0x1000) {
        int v58 = v57;
      }
      else {
        int v58 = 64;
      }
      char v36 = v15 + 4;
      *uint64_t v20 = (((613566757 * (unint64_t)((255 * v39 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v54 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v45 - 16320) >> 7)) >> 32)
                          + ((613566757 * (unint64_t)((255 * v56 - 16320) >> 7)) >> 32)
                          + 2) >> 2;
      v20[1] = (((613566757 * (unint64_t)((255 * v41 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v55 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v47 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v58 - 16320) >> 7)) >> 32)
                            + 2) >> 2;
      unint64_t v37 = v20 + 2;
    }
    else
    {
      char v36 = v15;
      unint64_t v37 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v59 = 0;
      int v60 = v36 + 2;
      do
      {
        unsigned int v61 = *(v60 - 2);
        int v62 = v61 >> 6;
        unsigned int v63 = *(v60 - 1);
        unsigned int v64 = (unsigned __int16 *)((char *)v60 + v14);
        unsigned int v65 = *(unsigned __int16 *)((char *)v60 + v14 - 4);
        unsigned int v66 = *(unsigned __int16 *)((char *)v60 + v14 - 2);
        if (v61 >> 6 >= 0x3C0) {
          int v62 = 960;
        }
        if (v61 < 0x1000) {
          int v62 = 64;
        }
        if (v63 >> 6 >= 0x3C0) {
          int v67 = 960;
        }
        else {
          int v67 = v63 >> 6;
        }
        if (v63 >= 0x1000) {
          int v68 = v67;
        }
        else {
          int v68 = 64;
        }
        if (v65 >> 6 >= 0x3C0) {
          int v69 = 960;
        }
        else {
          int v69 = v65 >> 6;
        }
        if (v65 >= 0x1000) {
          int v70 = v69;
        }
        else {
          int v70 = 64;
        }
        if (v66 >> 6 >= 0x3C0) {
          int v71 = 960;
        }
        else {
          int v71 = v66 >> 6;
        }
        BOOL v72 = v66 >= 0x1000;
        unsigned int v73 = *v60;
        unsigned int v74 = v73 >> 6;
        unsigned int v75 = v60[1];
        if (v72) {
          int v76 = v71;
        }
        else {
          int v76 = 64;
        }
        unsigned int v77 = *v64;
        unsigned int v78 = v64[1];
        if (v74 >= 0x3C0) {
          unsigned int v74 = 960;
        }
        if (v73 >= 0x1000) {
          int v79 = v74;
        }
        else {
          int v79 = 64;
        }
        if (v75 >> 6 >= 0x3C0) {
          int v80 = 960;
        }
        else {
          int v80 = v75 >> 6;
        }
        if (v75 < 0x1000) {
          int v80 = 64;
        }
        if (v77 >> 6 >= 0x3C0) {
          int v81 = 960;
        }
        else {
          int v81 = v77 >> 6;
        }
        if (v77 < 0x1000) {
          int v81 = 64;
        }
        int v82 = &v37[v59];
        unint64_t v83 = (613566757 * (unint64_t)((255 * v62 - 16320) >> 7)) >> 32;
        unint64_t v84 = 613566757 * ((255 * v68 - 16320) >> 7);
        if (v78 >> 6 >= 0x3C0) {
          int v85 = 960;
        }
        else {
          int v85 = v78 >> 6;
        }
        unint64_t v86 = HIDWORD(v84);
        if (v78 < 0x1000) {
          int v85 = 64;
        }
        *int v82 = (v83
                            + ((613566757 * (unint64_t)((255 * v79 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v70 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v81 - 16320) >> 7)) >> 32)
                            + 2) >> 2;
        v82[1] = (v86
                              + ((613566757 * (unint64_t)((255 * v80 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v76 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v85 - 16320) >> 7)) >> 32)
                              + 2) >> 2;
        v59 += 2;
        v60 += 4;
      }
      while (v59 < v35);
    }
    v15 += v14;
    v20 += v140;
  }
  if (v23 != v34)
  {
    unint64_t v87 = 0;
    unint64_t v88 = v23 - v34;
    do
    {
      unsigned int v89 = v15;
      int v90 = v20;
      if (v8)
      {
        unsigned int v91 = *v15;
        int v92 = v91 >> 6;
        unsigned int v93 = v15[1];
        unsigned int v94 = *(unsigned __int16 *)((char *)v15 + v14);
        unsigned int v95 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
        if (v91 >> 6 >= 0x3C0) {
          int v92 = 960;
        }
        if (v91 >= 0x1000) {
          int v96 = v92;
        }
        else {
          int v96 = 64;
        }
        if (v93 >> 6 >= 0x3C0) {
          int v97 = 960;
        }
        else {
          int v97 = v93 >> 6;
        }
        if (v93 < 0x1000) {
          int v97 = 64;
        }
        if (v94 >> 6 >= 0x3C0) {
          int v98 = 960;
        }
        else {
          int v98 = v94 >> 6;
        }
        if (v94 >= 0x1000) {
          int v99 = v98;
        }
        else {
          int v99 = 64;
        }
        if (v95 >> 6 >= 0x3C0) {
          int v100 = 960;
        }
        else {
          int v100 = v95 >> 6;
        }
        if (v95 >= 0x1000) {
          int v101 = v100;
        }
        else {
          int v101 = 64;
        }
        unsigned int v102 = v15[2];
        int v103 = v102 >> 6;
        unsigned int v104 = v15[3];
        int v105 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        unsigned int v106 = *v105;
        unsigned int v107 = v105[1];
        if (v102 >> 6 >= 0x3C0) {
          int v103 = 960;
        }
        if (v102 >= 0x1000) {
          int v108 = v103;
        }
        else {
          int v108 = 64;
        }
        if (v104 >> 6 >= 0x3C0) {
          int v109 = 960;
        }
        else {
          int v109 = v104 >> 6;
        }
        if (v104 < 0x1000) {
          int v109 = 64;
        }
        if (v106 >> 6 >= 0x3C0) {
          int v110 = 960;
        }
        else {
          int v110 = v106 >> 6;
        }
        if (v106 < 0x1000) {
          int v110 = 64;
        }
        if (v107 >> 6 >= 0x3C0) {
          int v111 = 960;
        }
        else {
          int v111 = v107 >> 6;
        }
        if (v107 < 0x1000) {
          int v111 = 64;
        }
        unsigned int v89 = v15 + 4;
        *uint64_t v20 = (((613566757 * (unint64_t)((255 * v96 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v108 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v99 - 16320) >> 7)) >> 32)
                            + ((613566757 * (unint64_t)((255 * v110 - 16320) >> 7)) >> 32)
                            + 2) >> 2;
        v20[1] = (((613566757 * (unint64_t)((255 * v97 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v109 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v101 - 16320) >> 7)) >> 32)
                              + ((613566757 * (unint64_t)((255 * v111 - 16320) >> 7)) >> 32)
                              + 2) >> 2;
        int v90 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v112 = 0;
        int v113 = v89 + 2;
        do
        {
          unsigned int v114 = *(v113 - 2);
          int v115 = v114 >> 6;
          unsigned int v116 = *(v113 - 1);
          unsigned int v117 = (unsigned __int16 *)((char *)v113 + v14);
          unsigned int v118 = *(unsigned __int16 *)((char *)v113 + v14 - 4);
          unsigned int v119 = *(unsigned __int16 *)((char *)v113 + v14 - 2);
          if (v114 >> 6 >= 0x3C0) {
            int v115 = 960;
          }
          if (v114 < 0x1000) {
            int v115 = 64;
          }
          if (v116 >> 6 >= 0x3C0) {
            int v120 = 960;
          }
          else {
            int v120 = v116 >> 6;
          }
          if (v116 >= 0x1000) {
            int v121 = v120;
          }
          else {
            int v121 = 64;
          }
          if (v118 >> 6 >= 0x3C0) {
            int v122 = 960;
          }
          else {
            int v122 = v118 >> 6;
          }
          if (v118 >= 0x1000) {
            int v123 = v122;
          }
          else {
            int v123 = 64;
          }
          if (v119 >> 6 >= 0x3C0) {
            int v124 = 960;
          }
          else {
            int v124 = v119 >> 6;
          }
          BOOL v72 = v119 >= 0x1000;
          unsigned int v125 = *v113;
          unsigned int v126 = v125 >> 6;
          unsigned int v127 = v113[1];
          if (v72) {
            int v128 = v124;
          }
          else {
            int v128 = 64;
          }
          unsigned int v129 = *v117;
          unsigned int v130 = v117[1];
          unsigned int v131 = v130 >> 6;
          if (v126 >= 0x3C0) {
            unsigned int v126 = 960;
          }
          if (v125 >= 0x1000) {
            int v132 = v126;
          }
          else {
            int v132 = 64;
          }
          if (v127 >> 6 >= 0x3C0) {
            int v133 = 960;
          }
          else {
            int v133 = v127 >> 6;
          }
          if (v127 < 0x1000) {
            int v133 = 64;
          }
          if (v129 >> 6 >= 0x3C0) {
            int v134 = 960;
          }
          else {
            int v134 = v129 >> 6;
          }
          if (v129 < 0x1000) {
            int v134 = 64;
          }
          int v135 = &v90[v112];
          unint64_t v136 = (613566757 * (unint64_t)((255 * v115 - 16320) >> 7)) >> 32;
          unint64_t v137 = 613566757 * ((255 * v121 - 16320) >> 7);
          if (v131 >= 0x3C0) {
            unsigned int v131 = 960;
          }
          unint64_t v138 = HIDWORD(v137);
          if (v130 < 0x1000) {
            unsigned int v131 = 64;
          }
          *int v135 = (v136
                               + ((613566757 * (unint64_t)((255 * v132 - 16320) >> 7)) >> 32)
                               + ((613566757 * (unint64_t)((255 * v123 - 16320) >> 7)) >> 32)
                               + ((613566757 * (unint64_t)((255 * v134 - 16320) >> 7)) >> 32)
                               + 2) >> 2;
          v135[1] = (v138
                                 + ((613566757 * (unint64_t)((255 * v133 - 16320) >> 7)) >> 32)
                                 + ((613566757 * (unint64_t)((255 * v128 - 16320) >> 7)) >> 32)
                                 + ((613566757 * (unint64_t)((255 * v131 - 16320) >> 7)) >> 32)
                                 + 2) >> 2;
          v112 += 2;
          v113 += 4;
        }
        while (v112 < v35);
      }
      v15 += v14;
      v20 += v140;
      v87 += 2;
    }
    while (v87 < v88);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v25 = v19 - v18;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v29 = *a8;
    if (v13 >= v9) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v28 + v30;
    uint64_t v32 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v34 = *(unsigned __int16 *)(v31 + 2 * i) >> 6;
          if (v34 >= 0x3AC) {
            unsigned int v34 = 940;
          }
          if (v34 <= 0x40) {
            unsigned int v34 = 64;
          }
          *(unsigned char *)(v32 + i) = (255 * v34 - 16320) / 0x36C;
        }
      }
      v31 += v27;
      v32 += v29;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v39 = *v15;
      int v40 = v39 >> 6;
      unsigned int v41 = v15[1];
      unsigned int v42 = v41 >> 6;
      if (v39 >> 6 >= 0x3C0) {
        int v40 = 960;
      }
      if (v39 < 0x1000) {
        int v40 = 64;
      }
      if (v42 >= 0x3C0) {
        unsigned int v42 = 960;
      }
      if (v41 >= 0x1000) {
        int v43 = v42;
      }
      else {
        int v43 = 64;
      }
      unint64_t v37 = v15 + 4;
      *unint64_t v21 = (613566757 * (unint64_t)((255 * v40 - 16320) >> 7)) >> 32;
      v21[1] = (613566757 * (unint64_t)((255 * v43 - 16320) >> 7)) >> 32;
      unsigned int v38 = v21 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      unsigned int v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v44 = 0;
      do
      {
        int v45 = &v38[v44];
        unsigned int v46 = *v37;
        int v47 = v46 >> 6;
        unsigned int v48 = v37[1];
        if (v46 >> 6 >= 0x3C0) {
          int v47 = 960;
        }
        if (v46 >= 0x1000) {
          int v49 = v47;
        }
        else {
          int v49 = 64;
        }
        if (v48 >> 6 >= 0x3C0) {
          int v50 = 960;
        }
        else {
          int v50 = v48 >> 6;
        }
        if (v48 < 0x1000) {
          int v50 = 64;
        }
        *int v45 = (613566757 * (unint64_t)((255 * v49 - 16320) >> 7)) >> 32;
        v45[1] = (613566757 * (unint64_t)((255 * v50 - 16320) >> 7)) >> 32;
        v44 += 2;
        v37 += 4;
      }
      while (v44 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v51 = 0;
    unint64_t v52 = v24 - v35;
    uint64_t v53 = 2 * v14;
    do
    {
      int v54 = v15;
      int v55 = v21;
      if (v8)
      {
        unsigned int v56 = *v15;
        int v57 = v56 >> 6;
        unsigned int v58 = v15[1];
        if (v56 >> 6 >= 0x3C0) {
          int v57 = 960;
        }
        if (v56 < 0x1000) {
          int v57 = 64;
        }
        if (v58 >> 6 >= 0x3C0) {
          int v59 = 960;
        }
        else {
          int v59 = v58 >> 6;
        }
        if (v58 >= 0x1000) {
          int v60 = v59;
        }
        else {
          int v60 = 64;
        }
        int v54 = v15 + 4;
        *unint64_t v21 = (613566757 * (unint64_t)((255 * v57 - 16320) >> 7)) >> 32;
        v21[1] = (613566757 * (unint64_t)((255 * v60 - 16320) >> 7)) >> 32;
        int v55 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v61 = 0;
        do
        {
          int v62 = &v55[v61];
          unsigned int v63 = *v54;
          int v64 = v63 >> 6;
          unsigned int v65 = v54[1];
          if (v63 >> 6 >= 0x3C0) {
            int v64 = 960;
          }
          if (v63 >= 0x1000) {
            int v66 = v64;
          }
          else {
            int v66 = 64;
          }
          if (v65 >> 6 >= 0x3C0) {
            int v67 = 960;
          }
          else {
            int v67 = v65 >> 6;
          }
          if (v65 < 0x1000) {
            int v67 = 64;
          }
          unsigned char *v62 = (613566757 * (unint64_t)((255 * v66 - 16320) >> 7)) >> 32;
          v62[1] = (613566757 * (unint64_t)((255 * v67 - 16320) >> 7)) >> 32;
          v61 += 2;
          v54 += 4;
        }
        while (v61 < v36);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v53);
      v21 += v20;
      v51 += 2;
    }
    while (v51 < v52);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    unint64_t v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v34 + i) = *(unsigned char *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v38 = v15 + 8;
      unsigned int v41 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *unint64_t v22 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      unsigned int v39 = v22 + 1;
      *unint64_t v23 = v41;
      int v40 = v23 + 1;
    }
    else
    {
      unsigned int v38 = v15;
      unsigned int v39 = v22;
      int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v42 = 0;
      int v43 = v38 + 4;
      do
      {
        unsigned int v44 = *(v43 - 1) + v43[3] + v43[v14 - 1] + v43[v14 + 3] + 2;
        *v39++ = (*(v43 - 3) + v43[1] + v43[v14 - 3] + v43[v14 + 1] + 2) >> 2;
        *v40++ = v44 >> 2;
        v42 += 2;
        v43 += 8;
      }
      while (v42 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v26 - v36;
    do
    {
      int v47 = v15;
      unsigned int v48 = v22;
      int v49 = v23;
      if (v8)
      {
        int v47 = v15 + 8;
        unsigned int v50 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *unint64_t v22 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        unsigned int v48 = v22 + 1;
        *unint64_t v23 = v50;
        int v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v51 = 0;
        unint64_t v52 = v47 + 4;
        do
        {
          unsigned int v53 = *(v52 - 1) + v52[3] + v52[v14 - 1] + v52[v14 + 3] + 2;
          *v48++ = (*(v52 - 3) + v52[1] + v52[v14 - 3] + v52[v14 + 1] + 2) >> 2;
          *v49++ = v53 >> 2;
          v51 += 2;
          v52 += 8;
        }
        while (v51 < v37);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  uint64_t v15 = a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9);
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    unint64_t v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v34 + i) = *(unsigned char *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      char v41 = *(unsigned char *)(v15 + 3);
      uint64_t v38 = v15 + 8;
      *unint64_t v22 = *(unsigned char *)(v15 + 1);
      unsigned int v39 = v22 + 1;
      *unint64_t v23 = v41;
      int v40 = v23 + 1;
    }
    else
    {
      uint64_t v38 = v15;
      unsigned int v39 = v22;
      int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v42 = 0;
      do
      {
        char v43 = *(unsigned char *)(v38 + 3);
        *v39++ = *(unsigned char *)(v38 + 1);
        *v40++ = v43;
        v42 += 2;
        v38 += 8;
      }
      while (v42 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v36;
    uint64_t v46 = 2 * v14;
    do
    {
      uint64_t v47 = v15;
      unsigned int v48 = v22;
      int v49 = v23;
      if (v9)
      {
        char v50 = *(unsigned char *)(v15 + 3);
        uint64_t v47 = v15 + 8;
        *unint64_t v22 = *(unsigned char *)(v15 + 1);
        unsigned int v48 = v22 + 1;
        *unint64_t v23 = v50;
        int v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v51 = 0;
        do
        {
          char v52 = *(unsigned char *)(v47 + 3);
          *v48++ = *(unsigned char *)(v47 + 1);
          *v49++ = v52;
          v51 += 2;
          v47 += 8;
        }
        while (v51 < v37);
      }
      v15 += v46;
      v22 += v20;
      v23 += v21;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_x444_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (__int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v31 = *a8;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v30 + v32;
    unint64_t v34 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC) {
            unsigned int v36 = 940;
          }
          if (v36 <= 0x40) {
            unsigned int v36 = 64;
          }
          *(unsigned char *)(v34 + i) = (255 * v36 - 16320) / 0x36C;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      v42.i16[0] = *v15;
      v42.i16[1] = *(__int16 *)((char *)v15 + v14);
      v42.i16[2] = v15[2];
      char v43 = (__int16 *)((char *)v15 + v14 + 4);
      v42.i16[3] = *v43;
      unsigned int v39 = v15 + 4;
      uint16x4_t v44 = (uint16x4_t)vdup_n_s16(0x3C0u);
      uint32x4_t v45 = (uint32x4_t)vdupq_n_s32(0xFFFFC040);
      uint32x4_t v46 = vshrq_n_u32(vmlal_u16(v45, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v42), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v42, 6uLL), v44)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
      uint32x4_t v47 = (uint32x4_t)vdupq_n_s32(0x24924925u);
      v48.i16[0] = v15[1];
      v48.i16[1] = *(__int16 *)((char *)v15 + v14 + 2);
      v48.i16[2] = v15[3];
      v48.i16[3] = v43[1];
      uint32x4_t v49 = vshrq_n_u32(vmlal_u16(v45, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v48), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v48, 6uLL), v44)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
      *unint64_t v22 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v46.i8, *(uint32x2_t *)v47.i8), (int32x4_t)vmull_high_u32(v46, v47)))+ 2) >> 2;
      int v40 = v22 + 1;
      *unint64_t v23 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v49.i8, *(uint32x2_t *)v47.i8), (int32x4_t)vmull_high_u32(v49, v47)))+ 2) >> 2;
      char v41 = v23 + 1;
    }
    else
    {
      unsigned int v39 = v15;
      int v40 = v22;
      char v41 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v50 = 0;
      unint64_t v51 = v39 + 2;
      uint16x4_t v52 = (uint16x4_t)vdup_n_s16(0x3C0u);
      uint32x4_t v53 = (uint32x4_t)vdupq_n_s32(0xFFFFC040);
      uint32x4_t v54 = (uint32x4_t)vdupq_n_s32(0x24924925u);
      do
      {
        v55.i16[0] = *(v51 - 2);
        v55.i16[1] = *(__int16 *)((char *)v51 + v14 - 4);
        v55.i16[2] = *v51;
        v55.i16[3] = *(__int16 *)((char *)v51 + v14);
        v56.i16[0] = *(v51 - 1);
        v56.i16[1] = *(__int16 *)((char *)v51 + v14 - 2);
        v56.i16[2] = v51[1];
        v56.i16[3] = *(__int16 *)((char *)v51 + v14 + 2);
        uint32x4_t v57 = vshrq_n_u32(vmlal_u16(v53, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v55), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v55, 6uLL), v52)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
        uint32x4_t v58 = vshrq_n_u32(vmlal_u16(v53, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v56), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v56, 6uLL), v52)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
        *v40++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v57.i8, *(uint32x2_t *)v54.i8), (int32x4_t)vmull_high_u32(v57, v54)))+ 2) >> 2;
        *v41++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v58.i8, *(uint32x2_t *)v54.i8), (int32x4_t)vmull_high_u32(v58, v54)))+ 2) >> 2;
        v50 += 2;
        v51 += 4;
      }
      while (v50 < v38);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v37)
  {
    unint64_t v59 = 0;
    unint64_t v60 = v26 - v37;
    uint16x4_t v61 = (uint16x4_t)vdup_n_s16(0x3C0u);
    uint32x4_t v62 = (uint32x4_t)vdupq_n_s32(0xFFFFC040);
    uint32x4_t v63 = (uint32x4_t)vdupq_n_s32(0x24924925u);
    do
    {
      int v64 = v15;
      unsigned int v65 = v22;
      int v66 = v23;
      if (v8)
      {
        v67.i16[0] = *v15;
        v67.i16[1] = *(__int16 *)((char *)v15 + v14);
        v67.i16[2] = v15[2];
        int v68 = (__int16 *)((char *)v15 + v14 + 4);
        v67.i16[3] = *v68;
        int v64 = v15 + 4;
        uint32x4_t v69 = vshrq_n_u32(vmlal_u16(v62, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v67), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v67, 6uLL), v61)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
        v70.i16[0] = v15[1];
        v70.i16[1] = *(__int16 *)((char *)v15 + v14 + 2);
        v70.i16[2] = v15[3];
        v70.i16[3] = v68[1];
        uint32x4_t v71 = vshrq_n_u32(vmlal_u16(v62, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v70), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v70, 6uLL), v61)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
        *unint64_t v22 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v69.i8, *(uint32x2_t *)v63.i8), (int32x4_t)vmull_high_u32(v69, v63)))+ 2) >> 2;
        unsigned int v65 = v22 + 1;
        *unint64_t v23 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v71.i8, *(uint32x2_t *)v63.i8), (int32x4_t)vmull_high_u32(v71, v63)))+ 2) >> 2;
        int v66 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v72 = 0;
        unsigned int v73 = v64 + 2;
        do
        {
          v74.i16[0] = *(v73 - 2);
          v74.i16[1] = *(__int16 *)((char *)v73 + v14 - 4);
          v74.i16[2] = *v73;
          v74.i16[3] = *(__int16 *)((char *)v73 + v14);
          v75.i16[0] = *(v73 - 1);
          v75.i16[1] = *(__int16 *)((char *)v73 + v14 - 2);
          v75.i16[2] = v73[1];
          v75.i16[3] = *(__int16 *)((char *)v73 + v14 + 2);
          uint32x4_t v76 = vshrq_n_u32(vmlal_u16(v62, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v74), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v74, 6uLL), v61)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
          uint32x4_t v77 = vshrq_n_u32(vmlal_u16(v62, (uint16x4_t)vbsl_s8((int8x8_t)vcgt_u16((uint16x4_t)0x1000100010001000, v75), (int8x8_t)0x40004000400040, (int8x8_t)vmin_u16(vshr_n_u16(v75, 6uLL), v61)), (uint16x4_t)0xFF00FF00FF00FFLL), 7uLL);
          *v65++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v76.i8, *(uint32x2_t *)v63.i8), (int32x4_t)vmull_high_u32(v76, v63)))+ 2) >> 2;
          *v66++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v77.i8, *(uint32x2_t *)v63.i8), (int32x4_t)vmull_high_u32(v77, v63)))+ 2) >> 2;
          v72 += 2;
          v73 += 4;
        }
        while (v72 < v38);
      }
      v15 += v14;
      v22 += v20;
      v23 += v21;
      v59 += 2;
    }
    while (v59 < v60);
  }
  return 0;
}

uint64_t vt_CopyDec_x444_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v31 = *a8;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v30 + v32;
    unint64_t v34 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i) >> 6;
          if (v36 >= 0x3AC) {
            unsigned int v36 = 940;
          }
          if (v36 <= 0x40) {
            unsigned int v36 = 64;
          }
          *(unsigned char *)(v34 + i) = (255 * v36 - 16320) / 0x36C;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v42 = *v15;
      int v43 = v42 >> 6;
      unsigned int v44 = v15[1];
      unsigned int v45 = v44 >> 6;
      if (v42 >> 6 >= 0x3C0) {
        int v43 = 960;
      }
      if (v42 < 0x1000) {
        int v43 = 64;
      }
      if (v45 >= 0x3C0) {
        unsigned int v45 = 960;
      }
      if (v44 >= 0x1000) {
        int v46 = v45;
      }
      else {
        int v46 = 64;
      }
      unsigned int v39 = v15 + 4;
      *unint64_t v22 = (613566757 * (unint64_t)((255 * v43 - 16320) >> 7)) >> 32;
      int v40 = v22 + 1;
      *unint64_t v23 = (613566757 * (unint64_t)((255 * v46 - 16320) >> 7)) >> 32;
      char v41 = v23 + 1;
    }
    else
    {
      unsigned int v39 = v15;
      int v40 = v22;
      char v41 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v47 = 0;
      do
      {
        unsigned int v48 = *v39;
        int v49 = v48 >> 6;
        unsigned int v50 = v39[1];
        if (v48 >> 6 >= 0x3C0) {
          int v49 = 960;
        }
        if (v48 >= 0x1000) {
          int v51 = v49;
        }
        else {
          int v51 = 64;
        }
        if (v50 >> 6 >= 0x3C0) {
          int v52 = 960;
        }
        else {
          int v52 = v50 >> 6;
        }
        if (v50 < 0x1000) {
          int v52 = 64;
        }
        *v40++ = (613566757 * (unint64_t)((255 * v51 - 16320) >> 7)) >> 32;
        *v41++ = (613566757 * (unint64_t)((255 * v52 - 16320) >> 7)) >> 32;
        v47 += 2;
        v39 += 4;
      }
      while (v47 < v38);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v37)
  {
    unint64_t v53 = 0;
    unint64_t v54 = v26 - v37;
    uint64_t v55 = 2 * v14;
    do
    {
      uint16x4_t v56 = v15;
      uint32x4_t v57 = v22;
      uint32x4_t v58 = v23;
      if (v8)
      {
        unsigned int v59 = *v15;
        int v60 = v59 >> 6;
        unsigned int v61 = v15[1];
        if (v59 >> 6 >= 0x3C0) {
          int v60 = 960;
        }
        if (v59 < 0x1000) {
          int v60 = 64;
        }
        if (v61 >> 6 >= 0x3C0) {
          int v62 = 960;
        }
        else {
          int v62 = v61 >> 6;
        }
        if (v61 >= 0x1000) {
          int v63 = v62;
        }
        else {
          int v63 = 64;
        }
        uint16x4_t v56 = v15 + 4;
        *unint64_t v22 = (613566757 * (unint64_t)((255 * v60 - 16320) >> 7)) >> 32;
        uint32x4_t v57 = v22 + 1;
        *unint64_t v23 = (613566757 * (unint64_t)((255 * v63 - 16320) >> 7)) >> 32;
        uint32x4_t v58 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v64 = 0;
        do
        {
          unsigned int v65 = *v56;
          int v66 = v65 >> 6;
          unsigned int v67 = v56[1];
          if (v65 >> 6 >= 0x3C0) {
            int v66 = 960;
          }
          if (v65 >= 0x1000) {
            int v68 = v66;
          }
          else {
            int v68 = 64;
          }
          if (v67 >> 6 >= 0x3C0) {
            int v69 = 960;
          }
          else {
            int v69 = v67 >> 6;
          }
          if (v67 < 0x1000) {
            int v69 = 64;
          }
          *v57++ = (613566757 * (unint64_t)((255 * v68 - 16320) >> 7)) >> 32;
          *v58++ = (613566757 * (unint64_t)((255 * v69 - 16320) >> 7)) >> 32;
          v64 += 2;
          v56 += 4;
        }
        while (v64 < v38);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v55);
      v22 += v20;
      v23 += v21;
      v53 += 2;
    }
    while (v53 < v54);
  }
  return 0;
}

uint64_t vt_Copy_s4as_y416(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a4[1];
    uint64_t v11 = a4[2];
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[4];
    uint64_t v17 = a2[5];
    uint64_t v18 = *a3;
    uint64_t v19 = a3[1] + v12 * v17;
    uint64_t v20 = a3[2] + v11 * v17;
    uint64_t v21 = v18 + *a4 * v17;
    uint64_t v22 = v19 + 4 * v16;
    uint64_t v23 = v20 + 2 * v16;
    uint64_t v24 = v21 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v25 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v27 = v15 + 2 * v25;
          int v28 = *(_DWORD *)(v22 + v25);
          __int16 v29 = *(_WORD *)(v24 + 2 * i);
          *(_WORD *)uint64_t v27 = *(_WORD *)(v23 + 2 * i);
          *(_WORD *)(v27 + 2) = v29;
          *(_DWORD *)(v27 + 4) = v28;
          v25 += 4;
        }
      }
      v24 += v13;
      v15 += v14;
      v22 += v12;
      v23 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_s4as_y408(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v12 = a4[1];
    uint64_t v11 = a4[2];
    uint64_t v13 = *a4;
    uint64_t v14 = *a8;
    uint64_t v15 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[4];
    uint64_t v17 = a2[5];
    uint64_t v18 = *a3;
    uint64_t v19 = a3[1] + v12 * v17;
    uint64_t v20 = a3[2] + v11 * v17;
    uint64_t v21 = v18 + *a4 * v17;
    uint64_t v22 = v19 + 4 * v16;
    uint64_t v23 = v20 + 2 * v16;
    uint64_t v24 = v21 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v25 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v27 = (unsigned char *)(v15 + v25);
          char v28 = *(unsigned char *)(v22 + v25 + 1);
          char v29 = *(unsigned char *)(v22 + v25 + 3);
          char v30 = *(unsigned char *)(v24 + 2 * i + 1);
          *uint64_t v27 = *(_WORD *)(v23 + 2 * i);
          v27[1] = v30;
          v27[2] = v28;
          v27[3] = v29;
          v25 += 4;
        }
      }
      v24 += v13;
      v15 += v14;
      v22 += v12;
      v23 += v11;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + v20);
          uint64_t v23 = (__int16 *)(v19 + 2 * i);
          unsigned int v24 = (*(unsigned __int16 *)(v18 + v20 + 2) + *(unsigned __int16 *)(v18 + v20 + 6) + 1) >> 1;
          __int16 v25 = *v23;
          LOWORD(v23) = v23[1];
          *uint64_t v22 = (*(unsigned __int16 *)(v18 + v20) + *(unsigned __int16 *)(v18 + v20 + 4) + 1) >> 1;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_v216(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = *a7 + *a8 * *(void *)(a6 + 40) + 2 * v10;
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        for (unint64_t i = 0; i < v11; i += 2)
        {
          uint64_t v22 = (_WORD *)(v16 + v20);
          uint64_t v23 = (__int16 *)(v19 + 2 * i);
          __int16 v24 = *(_WORD *)(v18 + v20 + 2);
          __int16 v25 = *v23;
          LOWORD(v23) = v23[1];
          *uint64_t v22 = *(_WORD *)(v18 + v20);
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = (_WORD)v23;
          v20 += 8;
        }
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v10);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        uint64_t v22 = v16;
        do
        {
          uint64_t v23 = v19 + 2 * v21;
          unsigned int v24 = (*(unsigned __int8 *)(v18 + v20 + 3) + *(unsigned __int8 *)(v18 + v20 + 7) + 1) >> 1;
          char v25 = *(unsigned char *)(v23 + 1);
          LOBYTE(v23) = *(unsigned char *)(v23 + 3);
          *uint64_t v22 = (*(unsigned __int8 *)(v18 + v20 + 1) + *(unsigned __int8 *)(v18 + v20 + 5) + 1) >> 1;
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = v23;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_2vuy(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = (*(void *)(a2 + 32) & 1) + *(void *)(a2 + 32);
  uint64_t v10 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  unint64_t v11 = ((*(_DWORD *)(a2 + 16) + *(void *)(a2 + 32)) & 0xFFFFFFFE) - v9;
  if (v11 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10) {
    unint64_t v11 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v10;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *a8;
    uint64_t v14 = *a4;
    uint64_t v15 = a4[1];
    uint64_t v16 = (unsigned char *)(*a7 + *a8 * *(void *)(a6 + 40) + v10);
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v18 = a3[1] + v15 * v17 + 4 * v9;
    uint64_t v19 = *a3 + *a4 * v17 + 2 * v9;
    do
    {
      if (v11)
      {
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        uint64_t v22 = v16;
        do
        {
          uint64_t v23 = v19 + 2 * v21;
          char v24 = *(unsigned char *)(v18 + v20 + 3);
          char v25 = *(unsigned char *)(v23 + 1);
          LOBYTE(v23) = *(unsigned char *)(v23 + 3);
          *uint64_t v22 = *(unsigned char *)(v18 + v20 + 1);
          v22[1] = v25;
          v22[2] = v24;
          v22[3] = v23;
          v22 += 4;
          v21 += 2;
          v20 += 8;
        }
        while (v21 < v11);
      }
      v19 += v14;
      v16 += v13;
      v18 += v15;
      ++v12;
    }
    while (v12 != v8);
  }
  return 0;
}

uint64_t vt_Copy_sv44_sf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v25 = *(unsigned __int16 *)(v23 + 2 * i);
          if (v25 >= 0xEB00) {
            unsigned int v25 = 60160;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          *(_WORD *)(v22 + 2 * i) = (-268431360 - v25 + (v25 << 16)) / 0xDB00;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v26 = v8 & 1;
  if (v18 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unsigned int v34 = *v13;
      unsigned int v35 = v13[1];
      if (v34 >= 0xF000) {
        unsigned int v34 = 61440;
      }
      if (v34 <= 0x1000) {
        unsigned int v34 = 4096;
      }
      if (v35 >= 0xF000) {
        unsigned int v35 = 61440;
      }
      if (v35 <= 0x1000) {
        int v36 = 4096;
      }
      else {
        int v36 = v35;
      }
      uint64_t v32 = v13 + 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-268431360 - v34 + (v34 << 16)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-268431360 - v36 + (v36 << 16)) >> 13)) >> 32;
      uint64_t v33 = v17 + 2;
    }
    else
    {
      uint64_t v32 = v13;
      uint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v37 = 0;
    }
    else
    {
      unint64_t v38 = v10 - v30;
      do
      {
        unsigned int v39 = *v32;
        unsigned int v40 = v32[1];
        if (v39 >= 0xF000) {
          unsigned int v39 = 61440;
        }
        if (v39 <= 0x1000) {
          unsigned int v39 = 4096;
        }
        if (v40 >= 0xF000) {
          unsigned int v40 = 61440;
        }
        if (v40 <= 0x1000) {
          unsigned int v40 = 4096;
        }
        v32 += 2;
        *uint64_t v33 = (613566757 * (unint64_t)((-268431360 - v39 + (v39 << 16)) >> 13)) >> 32;
        v33[1] = (613566757 * (unint64_t)((-268431360 - v40 + (v40 << 16)) >> 13)) >> 32;
        v33 += 2;
        --v38;
      }
      while (v38);
      unint64_t v37 = v10 - v30;
    }
    if (v37 + v29 < v10)
    {
      unsigned int v41 = *v32;
      unsigned int v42 = v32[1];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        unsigned int v42 = 4096;
      }
      *uint64_t v33 = (613566757 * (unint64_t)((-268431360 - v41 + (v41 << 16)) >> 13)) >> 32;
      v33[1] = (613566757 * (unint64_t)((-268431360 - v42 + (v42 << 16)) >> 13)) >> 32;
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v18 - v27;
    do
    {
      unsigned int v45 = v13;
      int v46 = v17;
      if (v28)
      {
        unsigned int v47 = *v13;
        unsigned int v48 = v13[1];
        if (v47 >= 0xF000) {
          unsigned int v47 = 61440;
        }
        if (v47 <= 0x1000) {
          unsigned int v47 = 4096;
        }
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          int v49 = 4096;
        }
        else {
          int v49 = v48;
        }
        unsigned int v45 = v13 + 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32;
        int v46 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v30;
        do
        {
          unsigned int v52 = *v45;
          unsigned int v53 = v45[1];
          if (v52 >= 0xF000) {
            unsigned int v52 = 61440;
          }
          if (v52 <= 0x1000) {
            unsigned int v52 = 4096;
          }
          if (v53 >= 0xF000) {
            unsigned int v53 = 61440;
          }
          if (v53 <= 0x1000) {
            unsigned int v53 = 4096;
          }
          v45 += 2;
          *int v46 = (613566757 * (unint64_t)((-268431360 - v52 + (v52 << 16)) >> 13)) >> 32;
          v46[1] = (613566757 * (unint64_t)((-268431360 - v53 + (v53 << 16)) >> 13)) >> 32;
          v46 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v30;
      }
      if (v50 + v29 < v10)
      {
        unsigned int v54 = *v45;
        unsigned int v55 = v45[1];
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          unsigned int v54 = 4096;
        }
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          unsigned int v55 = 4096;
        }
        *int v46 = (613566757 * (unint64_t)((-268431360 - v54 + (v54 << 16)) >> 13)) >> 32;
        v46[1] = (613566757 * (unint64_t)((-268431360 - v55 + (v55 << 16)) >> 13)) >> 32;
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v26 < v18)
  {
    if (v28)
    {
      unsigned int v56 = *v13;
      unsigned int v57 = v13[1];
      if (v56 >= 0xF000) {
        unsigned int v56 = 61440;
      }
      if (v56 <= 0x1000) {
        unsigned int v56 = 4096;
      }
      if (v57 >= 0xF000) {
        unsigned int v57 = 61440;
      }
      if (v57 <= 0x1000) {
        unsigned int v57 = 4096;
      }
      v13 += 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-268431360 - v57 + (v57 << 16)) >> 13)) >> 32;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v30;
      do
      {
        unsigned int v59 = *v13;
        unsigned int v60 = v13[1];
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          unsigned int v59 = 4096;
        }
        if (v60 >= 0xF000) {
          unsigned int v60 = 61440;
        }
        if (v60 <= 0x1000) {
          unsigned int v60 = 4096;
        }
        v13 += 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-268431360 - v59 + (v59 << 16)) >> 13)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v61 = *v13;
      unsigned int v62 = v13[1];
      if (v61 >= 0xF000) {
        unsigned int v61 = 61440;
      }
      if (v61 <= 0x1000) {
        unsigned int v61 = 4096;
      }
      if (v62 >= 0xF000) {
        unsigned int v62 = 61440;
      }
      if (v62 <= 0x1000) {
        unsigned int v62 = 4096;
      }
      *uint64_t v17 = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-268431360 - v62 + (v62 << 16)) >> 13)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_s4as_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v15;
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = *(void *)(a2 + 24);
  }
  if (v23)
  {
    uint64_t v58 = a8[1];
    uint64_t v60 = a4[1];
    uint64_t v62 = a8[2];
    uint64_t v63 = *a8;
    char v24 = (char *)(a7[2] + v62 * v17 + v18);
    unsigned int v25 = (char *)(*a7 + *a8 * v17 + v18);
    uint64_t v26 = a4[2];
    uint64_t v27 = (char *)(a3[2] + v26 * v11 + 2 * v10);
    uint64_t v28 = *a4;
    unint64_t v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    unint64_t v61 = v22;
    size_t v30 = 2 * v22;
    unint64_t v59 = v23;
    do
    {
      memcpy(v25, v29, v30);
      memcpy(v24, v27, v30);
      v29 += v28;
      v25 += v63;
      v27 += v26;
      v24 += v62;
      --v23;
    }
    while (v23);
    uint64_t v19 = v58;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v60;
    unint64_t v22 = v61;
    unint64_t v23 = v59;
  }
  unint64_t v31 = v11 & 1;
  if (v23 >= v31) {
    uint64_t v32 = v11 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v34 = v22 - v9;
  if (v11)
  {
    if (v33)
    {
      unsigned int v35 = v13 + 4;
      unsigned int v37 = (v13[1] + v13[3] + 1) >> 1;
      *uint64_t v20 = (*v13 + v13[2] + 1) >> 1;
      v20[1] = v37;
      int v36 = v20 + 2;
    }
    else
    {
      unsigned int v35 = v13;
      int v36 = v20;
    }
    if (v22 != v9)
    {
      unint64_t v38 = 0;
      do
      {
        unsigned int v39 = &v36[v38];
        unsigned int v40 = (v35[1] + v35[3] + 1) >> 1;
        *unsigned int v39 = (*v35 + v35[2] + 1) >> 1;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v23 - v32;
    do
    {
      unint64_t v43 = v13;
      uint64_t v44 = v20;
      if (v33)
      {
        unint64_t v43 = v13 + 4;
        unsigned int v45 = (v13[1] + v13[3] + 1) >> 1;
        *uint64_t v20 = (*v13 + v13[2] + 1) >> 1;
        v20[1] = v45;
        uint64_t v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        unint64_t v46 = 0;
        do
        {
          unsigned int v47 = &v44[v46];
          unsigned int v48 = (v43[1] + v43[3] + 1) >> 1;
          *unsigned int v47 = (*v43 + v43[2] + 1) >> 1;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if (v33)
    {
      int v49 = *v13;
      int v50 = v13[1];
      int v51 = v13[2];
      int v52 = v13[3];
      v13 += 4;
      *uint64_t v20 = (v49 + v51 + 1) >> 1;
      v20[1] = (v50 + v52 + 1) >> 1;
      v20 += 2;
    }
    if (v22 != v9)
    {
      unint64_t v53 = 0;
      do
      {
        unsigned int v54 = &v20[v53];
        unsigned int v55 = (v13[1] + v13[3] + 1) >> 1;
        *unsigned int v54 = (*v13 + v13[2] + 1) >> 1;
        v54[1] = v55;
        v53 += 2;
        v13 += 4;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_s4as_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (int *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v15;
  uint64_t v19 = a8[1];
  uint64_t v20 = (int *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = *(void *)(a2 + 24);
  }
  if (v23)
  {
    uint64_t v50 = a8[1];
    uint64_t v52 = a4[1];
    uint64_t v54 = a8[2];
    uint64_t v55 = *a8;
    char v24 = (char *)(a7[2] + v54 * v17 + v18);
    unsigned int v25 = (char *)(*a7 + *a8 * v17 + v18);
    uint64_t v26 = a4[2];
    uint64_t v27 = (char *)(a3[2] + v26 * v11 + 2 * v10);
    uint64_t v28 = *a4;
    unint64_t v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    unint64_t v53 = v22;
    size_t v30 = 2 * v22;
    unint64_t v51 = v23;
    do
    {
      memcpy(v25, v29, v30);
      memcpy(v24, v27, v30);
      v29 += v28;
      v25 += v55;
      v27 += v26;
      v24 += v54;
      --v23;
    }
    while (v23);
    uint64_t v19 = v50;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v52;
    unint64_t v22 = v53;
    unint64_t v23 = v51;
  }
  unint64_t v31 = v11 & 1;
  if (v23 >= v31) {
    uint64_t v32 = v11 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v34 = v22 - v9;
  if (v11)
  {
    unsigned int v35 = v13;
    if (v33)
    {
      unsigned int v35 = v13 + 2;
      *uint64_t v20 = *v13;
      int v36 = v20 + 1;
    }
    else
    {
      int v36 = v20;
    }
    if (v22 != v9)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = *v35;
        v35 += 2;
        v36[v37 / 2] = v38;
        v37 += 2;
      }
      while (v37 < v34);
    }
    uint64_t v13 = (int *)((char *)v13 + v12);
    uint64_t v20 = (int *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v23 - v32;
    do
    {
      unint64_t v41 = v13;
      uint64_t v42 = v20;
      if (v33)
      {
        unint64_t v41 = v13 + 2;
        *uint64_t v20 = *v13;
        uint64_t v42 = v20 + 1;
      }
      if (v22 != v9)
      {
        unint64_t v43 = 0;
        do
        {
          int v44 = *v41;
          v41 += 2;
          v42[v43 / 2] = v44;
          v43 += 2;
        }
        while (v43 < v34);
      }
      uint64_t v13 = (int *)((char *)v13 + v12);
      uint64_t v20 = (int *)((char *)v20 + v19);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v31 < v23)
  {
    if (v33)
    {
      int v45 = *v13;
      v13 += 2;
      *v20++ = v45;
    }
    if (v22 != v9)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = *v13;
        v13 += 2;
        v20[v46 / 2] = v47;
        v46 += 2;
      }
      while (v46 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v14;
  uint64_t v17 = a8[1];
  uint64_t v18 = (_WORD *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v21 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v21 = *(void *)(a2 + 24);
  }
  if (v21)
  {
    unint64_t v53 = v21;
    uint64_t v54 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    char v24 = (char *)(*a7 + *a8 * v15 + v16);
    unsigned int v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    unint64_t v21 = v53;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v54;
  }
  unint64_t v26 = v11 & 1;
  if (v21 >= v26) {
    uint64_t v27 = v11 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  if (v20 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v29 = v20 - v9;
  if (v11)
  {
    if (v28)
    {
      size_t v30 = v13 + 4;
      unsigned int v32 = (v13[1] + v13[3] + 1) >> 1;
      *uint64_t v18 = (*v13 + v13[2] + 1) >> 1;
      v18[1] = v32;
      unint64_t v31 = v18 + 2;
    }
    else
    {
      size_t v30 = v13;
      unint64_t v31 = v18;
    }
    if (v20 != v9)
    {
      unint64_t v33 = 0;
      do
      {
        unint64_t v34 = &v31[v33];
        unsigned int v35 = (v30[1] + v30[3] + 1) >> 1;
        *unint64_t v34 = (*v30 + v30[2] + 1) >> 1;
        v34[1] = v35;
        v33 += 2;
        v30 += 4;
      }
      while (v33 < v29);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v18 = (_WORD *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    unint64_t v36 = 0;
  }
  else
  {
    uint64_t v37 = 0;
    unint64_t v36 = v21 - v27;
    do
    {
      int v38 = v13;
      unint64_t v39 = v18;
      if (v28)
      {
        int v38 = v13 + 4;
        unsigned int v40 = (v13[1] + v13[3] + 1) >> 1;
        *uint64_t v18 = (*v13 + v13[2] + 1) >> 1;
        v18[1] = v40;
        unint64_t v39 = v18 + 2;
      }
      if (v20 != v9)
      {
        unint64_t v41 = 0;
        do
        {
          uint64_t v42 = &v39[v41];
          unsigned int v43 = (v38[1] + v38[3] + 1) >> 1;
          *uint64_t v42 = (*v38 + v38[2] + 1) >> 1;
          v42[1] = v43;
          v41 += 2;
          v38 += 4;
        }
        while (v41 < v29);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v18 = (_WORD *)((char *)v18 + v17);
      ++v37;
    }
    while (v37 != v36);
  }
  if (v36 + v26 < v21)
  {
    if (v28)
    {
      int v44 = *v13;
      int v45 = v13[1];
      int v46 = v13[2];
      int v47 = v13[3];
      v13 += 4;
      *uint64_t v18 = (v44 + v46 + 1) >> 1;
      v18[1] = (v45 + v47 + 1) >> 1;
      v18 += 2;
    }
    if (v20 != v9)
    {
      unint64_t v48 = 0;
      do
      {
        int v49 = &v18[v48];
        unsigned int v50 = (v13[1] + v13[3] + 1) >> 1;
        _WORD *v49 = (*v13 + v13[2] + 1) >> 1;
        v49[1] = v50;
        v48 += 2;
        v13 += 4;
      }
      while (v48 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_sv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (int *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  uint64_t v14 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v15 = *(void *)(a6 + 40);
  uint64_t v16 = 2 * v14;
  uint64_t v17 = a8[1];
  uint64_t v18 = (int *)(a7[1] + v17 * v15 + ((2 * v14) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v14;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v19) {
    unint64_t v20 = v19;
  }
  else {
    unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= *(void *)(a6 + 24)) {
    unint64_t v21 = *(void *)(a6 + 24);
  }
  else {
    unint64_t v21 = *(void *)(a2 + 24);
  }
  if (v21)
  {
    unint64_t v45 = v21;
    uint64_t v46 = a4[1];
    uint64_t v22 = *a4;
    uint64_t v23 = *a8;
    char v24 = (char *)(*a7 + *a8 * v15 + v16);
    unsigned int v25 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    do
    {
      memcpy(v24, v25, 2 * v20);
      v25 += v22;
      v24 += v23;
      --v21;
    }
    while (v21);
    unint64_t v21 = v45;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v46;
  }
  unint64_t v26 = v11 & 1;
  if (v21 >= v26) {
    uint64_t v27 = v11 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v8;
  if (v20 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v29 = v20 - v9;
  if (v11)
  {
    size_t v30 = v13;
    if (v28)
    {
      size_t v30 = v13 + 2;
      *uint64_t v18 = *v13;
      unint64_t v31 = v18 + 1;
    }
    else
    {
      unint64_t v31 = v18;
    }
    if (v20 != v9)
    {
      unint64_t v32 = 0;
      do
      {
        int v33 = *v30;
        v30 += 2;
        v31[v32 / 2] = v33;
        v32 += 2;
      }
      while (v32 < v29);
    }
    uint64_t v13 = (int *)((char *)v13 + v12);
    uint64_t v18 = (int *)((char *)v18 + v17);
  }
  if (v21 == v27)
  {
    unint64_t v34 = 0;
  }
  else
  {
    uint64_t v35 = 0;
    unint64_t v34 = v21 - v27;
    do
    {
      unint64_t v36 = v13;
      uint64_t v37 = v18;
      if (v28)
      {
        unint64_t v36 = v13 + 2;
        *uint64_t v18 = *v13;
        uint64_t v37 = v18 + 1;
      }
      if (v20 != v9)
      {
        unint64_t v38 = 0;
        do
        {
          int v39 = *v36;
          v36 += 2;
          v37[v38 / 2] = v39;
          v38 += 2;
        }
        while (v38 < v29);
      }
      uint64_t v13 = (int *)((char *)v13 + v12);
      uint64_t v18 = (int *)((char *)v18 + v17);
      ++v35;
    }
    while (v35 != v34);
  }
  if (v34 + v26 < v21)
  {
    if (v28)
    {
      int v40 = *v13;
      v13 += 2;
      *v18++ = v40;
    }
    if (v20 != v9)
    {
      unint64_t v41 = 0;
      do
      {
        int v42 = *v13;
        v13 += 2;
        v18[v41 / 2] = v42;
        v41 += 2;
      }
      while (v41 < v29);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i);
          if (v30 >= 0xEB00) {
            unsigned int v30 = 60160;
          }
          if (v30 <= 0x1000) {
            unsigned int v30 = 4096;
          }
          *(_WORD *)(v27 + 2 * i) = (-268431360 - v30 + (v30 << 16)) / 0xDB00;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF000) {
        unsigned int v37 = 61440;
      }
      if (v37 <= 0x1000) {
        int v38 = 4096;
      }
      else {
        int v38 = v37;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v39 = 61440;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x1000) {
        int v40 = 4096;
      }
      else {
        int v40 = v39;
      }
      unsigned int v41 = v14[2];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        int v42 = 4096;
      }
      else {
        int v42 = v41;
      }
      if (v14[3] >= 0xF000u) {
        unsigned int v43 = 61440;
      }
      else {
        unsigned int v43 = v14[3];
      }
      if (v43 <= 0x1000) {
        int v44 = 4096;
      }
      else {
        int v44 = v43;
      }
      uint64_t v35 = v14 + 4;
      *unint64_t v21 = (((613566757 * (unint64_t)((-268431360 - v38 + (v38 << 16)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-268431360 - v42 + (v42 << 16)) >> 13)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-268431360 - v40 + (v40 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v44 + (v44 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
      unint64_t v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      unint64_t v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v45 = 0;
      do
      {
        uint64_t v46 = &v36[v45];
        unsigned int v47 = *v35;
        unsigned int v48 = v35[1];
        if (v47 >= 0xF000) {
          unsigned int v47 = 61440;
        }
        if (v47 <= 0x1000) {
          unsigned int v47 = 4096;
        }
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          unsigned int v48 = 4096;
        }
        unsigned int v49 = v35[2];
        unsigned int v50 = v35[3];
        if (v49 >= 0xF000) {
          unsigned int v49 = 61440;
        }
        if (v49 <= 0x1000) {
          unsigned int v49 = 4096;
        }
        if (v50 >= 0xF000) {
          unsigned int v50 = 61440;
        }
        if (v50 <= 0x1000) {
          unsigned int v50 = 4096;
        }
        *uint64_t v46 = (((613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
        v46[1] = (((613566757 * (unint64_t)((-268431360 - v48 + (v48 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v50 + (v50 << 16)) >> 13)) >> 32)
                              + 1) >> 1;
        v45 += 2;
        v35 += 4;
      }
      while (v45 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v51 = 0;
  }
  else
  {
    uint64_t v52 = 0;
    unint64_t v51 = v9 - v32;
    do
    {
      unint64_t v53 = v14;
      uint64_t v54 = v21;
      if (v33)
      {
        unsigned int v55 = *v14;
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          int v56 = 4096;
        }
        else {
          int v56 = v55;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v57 = 61440;
        }
        else {
          unsigned int v57 = v14[1];
        }
        if (v57 <= 0x1000) {
          int v58 = 4096;
        }
        else {
          int v58 = v57;
        }
        unsigned int v59 = v14[2];
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          int v60 = 4096;
        }
        else {
          int v60 = v59;
        }
        if (v14[3] >= 0xF000u) {
          unsigned int v61 = 61440;
        }
        else {
          unsigned int v61 = v14[3];
        }
        if (v61 <= 0x1000) {
          int v62 = 4096;
        }
        else {
          int v62 = v61;
        }
        unint64_t v53 = v14 + 4;
        *unint64_t v21 = (((613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
        v21[1] = (((613566757 * (unint64_t)((-268431360 - v58 + (v58 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v62 + (v62 << 16)) >> 13)) >> 32)
                              + 1) >> 1;
        uint64_t v54 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v63 = 0;
        do
        {
          unint64_t v64 = &v54[v63];
          unsigned int v65 = *v53;
          unsigned int v66 = v53[1];
          if (v65 >= 0xF000) {
            unsigned int v65 = 61440;
          }
          if (v65 <= 0x1000) {
            unsigned int v65 = 4096;
          }
          if (v66 >= 0xF000) {
            unsigned int v66 = 61440;
          }
          if (v66 <= 0x1000) {
            unsigned int v66 = 4096;
          }
          unsigned int v67 = v53[2];
          unsigned int v68 = v53[3];
          if (v67 >= 0xF000) {
            unsigned int v67 = 61440;
          }
          if (v67 <= 0x1000) {
            unsigned int v67 = 4096;
          }
          if (v68 >= 0xF000) {
            unsigned int v68 = 61440;
          }
          if (v68 <= 0x1000) {
            unsigned int v68 = 4096;
          }
          *unint64_t v64 = (((613566757 * (unint64_t)((-268431360 - v65 + (v65 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v67 + (v67 << 16)) >> 13)) >> 32)
                              + 1) >> 1;
          v64[1] = (((613566757 * (unint64_t)((-268431360 - v66 + (v66 << 16)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-268431360 - v68 + (v68 << 16)) >> 13)) >> 32)
                                + 1) >> 1;
          v63 += 2;
          v53 += 4;
        }
        while (v63 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v69 = *v14;
      unsigned int v70 = v14[1];
      if (v69 >= 0xF000) {
        unsigned int v69 = 61440;
      }
      if (v69 <= 0x1000) {
        unsigned int v69 = 4096;
      }
      if (v70 >= 0xF000) {
        unsigned int v70 = 61440;
      }
      if (v70 <= 0x1000) {
        unsigned int v70 = 4096;
      }
      unsigned int v71 = v14[2];
      if (v71 >= 0xF000) {
        unsigned int v71 = 61440;
      }
      if (v71 <= 0x1000) {
        unsigned int v71 = 4096;
      }
      if (v14[3] >= 0xF000u) {
        unsigned int v72 = 61440;
      }
      else {
        unsigned int v72 = v14[3];
      }
      if (v72 <= 0x1000) {
        unsigned int v72 = 4096;
      }
      v14 += 4;
      *unint64_t v21 = (((613566757 * (unint64_t)((-268431360 - v69 + (v69 << 16)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-268431360 - v71 + (v71 << 16)) >> 13)) >> 32)
                          + 1) >> 1;
      v21[1] = (((613566757 * (unint64_t)((-268431360 - v70 + (v70 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v72 + (v72 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v73 = 0;
      do
      {
        uint16x4_t v74 = &v21[v73];
        unsigned int v75 = *v14;
        unsigned int v76 = v14[1];
        if (v75 >= 0xF000) {
          unsigned int v75 = 61440;
        }
        if (v75 <= 0x1000) {
          unsigned int v75 = 4096;
        }
        if (v76 >= 0xF000) {
          unsigned int v76 = 61440;
        }
        if (v76 <= 0x1000) {
          unsigned int v76 = 4096;
        }
        unsigned int v77 = v14[2];
        unsigned int v78 = v14[3];
        if (v77 >= 0xF000) {
          unsigned int v77 = 61440;
        }
        if (v77 <= 0x1000) {
          unsigned int v77 = 4096;
        }
        if (v78 >= 0xF000) {
          unsigned int v78 = 61440;
        }
        if (v78 <= 0x1000) {
          unsigned int v78 = 4096;
        }
        *uint16x4_t v74 = (((613566757 * (unint64_t)((-268431360 - v75 + (v75 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v77 + (v77 << 16)) >> 13)) >> 32)
                            + 1) >> 1;
        v74[1] = (((613566757 * (unint64_t)((-268431360 - v76 + (v76 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v78 + (v78 << 16)) >> 13)) >> 32)
                              + 1) >> 1;
        v73 += 2;
        v14 += 4;
      }
      while (v73 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_sf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i);
          if (v30 >= 0xEB00) {
            unsigned int v30 = 60160;
          }
          if (v30 <= 0x1000) {
            unsigned int v30 = 4096;
          }
          *(_WORD *)(v27 + 2 * i) = (-268431360 - v30 + (v30 << 16)) / 0xDB00;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF000) {
        unsigned int v37 = 61440;
      }
      if (v37 <= 0x1000) {
        int v38 = 4096;
      }
      else {
        int v38 = v37;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v39 = 61440;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x1000) {
        int v40 = 4096;
      }
      else {
        int v40 = v39;
      }
      uint64_t v35 = v14 + 4;
      *unint64_t v21 = (613566757 * (unint64_t)((-268431360 - v38 + (v38 << 16)) >> 13)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-268431360 - v40 + (v40 << 16)) >> 13)) >> 32;
      unint64_t v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      unint64_t v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        int v42 = &v36[v41];
        unsigned int v43 = *v35;
        unsigned int v44 = v35[1];
        if (v43 >= 0xF000) {
          unsigned int v43 = 61440;
        }
        if (v43 <= 0x1000) {
          unsigned int v43 = 4096;
        }
        if (v44 >= 0xF000) {
          unsigned int v44 = 61440;
        }
        if (v44 <= 0x1000) {
          unsigned int v44 = 4096;
        }
        *int v42 = (613566757 * (unint64_t)((-268431360 - v43 + (v43 << 16)) >> 13)) >> 32;
        v42[1] = (613566757 * (unint64_t)((-268431360 - v44 + (v44 << 16)) >> 13)) >> 32;
        v41 += 2;
        v35 += 4;
      }
      while (v41 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v9 - v32;
    do
    {
      unsigned int v47 = v14;
      unsigned int v48 = v21;
      if (v33)
      {
        unsigned int v49 = *v14;
        if (v49 >= 0xF000) {
          unsigned int v49 = 61440;
        }
        if (v49 <= 0x1000) {
          int v50 = 4096;
        }
        else {
          int v50 = v49;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v51 = 61440;
        }
        else {
          unsigned int v51 = v14[1];
        }
        if (v51 <= 0x1000) {
          int v52 = 4096;
        }
        else {
          int v52 = v51;
        }
        unsigned int v47 = v14 + 4;
        *unint64_t v21 = (613566757 * (unint64_t)((-268431360 - v50 + (v50 << 16)) >> 13)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-268431360 - v52 + (v52 << 16)) >> 13)) >> 32;
        unsigned int v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v53 = 0;
        do
        {
          uint64_t v54 = &v48[v53];
          unsigned int v55 = *v47;
          unsigned int v56 = v47[1];
          if (v55 >= 0xF000) {
            unsigned int v55 = 61440;
          }
          if (v55 <= 0x1000) {
            unsigned int v55 = 4096;
          }
          if (v56 >= 0xF000) {
            unsigned int v56 = 61440;
          }
          if (v56 <= 0x1000) {
            unsigned int v56 = 4096;
          }
          *uint64_t v54 = (613566757 * (unint64_t)((-268431360 - v55 + (v55 << 16)) >> 13)) >> 32;
          v54[1] = (613566757 * (unint64_t)((-268431360 - v56 + (v56 << 16)) >> 13)) >> 32;
          v53 += 2;
          v47 += 4;
        }
        while (v53 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v57 = *v14;
      unsigned int v58 = v14[1];
      if (v57 >= 0xF000) {
        unsigned int v57 = 61440;
      }
      if (v57 <= 0x1000) {
        unsigned int v57 = 4096;
      }
      if (v58 >= 0xF000) {
        unsigned int v58 = 61440;
      }
      if (v58 <= 0x1000) {
        unsigned int v58 = 4096;
      }
      v14 += 4;
      *unint64_t v21 = (613566757 * (unint64_t)((-268431360 - v57 + (v57 << 16)) >> 13)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-268431360 - v58 + (v58 << 16)) >> 13)) >> 32;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v59 = 0;
      do
      {
        int v60 = &v21[v59];
        unsigned int v61 = *v14;
        unsigned int v62 = v14[1];
        if (v61 >= 0xF000) {
          unsigned int v61 = 61440;
        }
        if (v61 <= 0x1000) {
          unsigned int v61 = 4096;
        }
        if (v62 >= 0xF000) {
          unsigned int v62 = 61440;
        }
        if (v62 <= 0x1000) {
          unsigned int v62 = 4096;
        }
        *int v60 = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
        v60[1] = (613566757 * (unint64_t)((-268431360 - v62 + (v62 << 16)) >> 13)) >> 32;
        v59 += 2;
        v14 += 4;
      }
      while (v59 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = 2 * v17;
  uint64_t v21 = a8[1];
  unint64_t v22 = (_WORD *)(a7[1] + ((unint64_t)(v21 * v18) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v23 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v17;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v23) {
    unint64_t v24 = v23;
  }
  else {
    unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  if (v14 - v13 >= v19 - v18) {
    unint64_t v25 = v19 - v18;
  }
  else {
    unint64_t v25 = v14 - v13;
  }
  if (v25)
  {
    unint64_t v59 = v25;
    uint64_t v60 = a8[1];
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    unint64_t v29 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v28);
    unsigned int v30 = (char *)(*a7 + v27 * v18 + v20);
    uint64_t v31 = -(uint64_t)v25;
    do
    {
      memcpy(v30, v29, 2 * v24);
      v29 += v26;
      v30 += v27;
    }
    while (!__CFADD__(v31++, 1));
    unint64_t v25 = v59;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
    uint64_t v21 = v60;
  }
  if (v25 >= v12) {
    unint64_t v33 = v12;
  }
  else {
    unint64_t v33 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v37 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      int v38 = *v37;
      int v39 = v37[1];
      uint64_t v35 = v16 + 4;
      unsigned int v40 = (v16[1] + v16[3] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + v39 + 2) >> 2;
      *unint64_t v22 = (*v16 + v16[2] + *(unsigned __int16 *)((char *)v16 + v15) + v38 + 2) >> 2;
      v22[1] = v40;
      unint64_t v36 = v22 + 2;
    }
    else
    {
      uint64_t v35 = v16;
      unint64_t v36 = v22;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      int v42 = v35 + 2;
      do
      {
        unsigned int v43 = &v36[v41];
        unsigned int v44 = (*(v42 - 1)
             + v42[1]
             + *(unsigned __int16 *)((char *)v42 + v15 - 2)
             + *(unsigned __int16 *)((char *)v42 + v15 + 2)
             + 2) >> 2;
        _WORD *v43 = (*(v42 - 2)
              + *v42
              + *(unsigned __int16 *)((char *)v42 + v15 - 4)
              + *(unsigned __int16 *)((char *)v42 + v15)
              + 2) >> 2;
        v43[1] = v44;
        v41 += 2;
        v42 += 4;
      }
      while (v41 < v34);
    }
    v16 += v15;
    unint64_t v22 = (_WORD *)((char *)v22 + v21);
  }
  if (v25 != v33)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v25 - v33;
    do
    {
      unsigned int v47 = v16;
      unsigned int v48 = v22;
      if (v8)
      {
        unsigned int v49 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        int v50 = *v49;
        int v51 = v49[1];
        unsigned int v47 = v16 + 4;
        unsigned int v52 = (v16[1] + v16[3] + *(unsigned __int16 *)((char *)v16 + v15 + 2) + v51 + 2) >> 2;
        *unint64_t v22 = (*v16 + v16[2] + *(unsigned __int16 *)((char *)v16 + v15) + v50 + 2) >> 2;
        v22[1] = v52;
        unsigned int v48 = v22 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v53 = 0;
        uint64_t v54 = v47 + 2;
        do
        {
          unsigned int v55 = &v48[v53];
          unsigned int v56 = (*(v54 - 1)
               + v54[1]
               + *(unsigned __int16 *)((char *)v54 + v15 - 2)
               + *(unsigned __int16 *)((char *)v54 + v15 + 2)
               + 2) >> 2;
          *unsigned int v55 = (*(v54 - 2)
                + *v54
                + *(unsigned __int16 *)((char *)v54 + v15 - 4)
                + *(unsigned __int16 *)((char *)v54 + v15)
                + 2) >> 2;
          v55[1] = v56;
          v53 += 2;
          v54 += 4;
        }
        while (v53 < v34);
      }
      v16 += v15;
      unint64_t v22 = (_WORD *)((char *)v22 + v21);
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_sv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (int *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v18 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (int *)(a7[1] + ((unint64_t)(v20 * v17) >> 1) + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8) >= v22) {
    unint64_t v23 = v22;
  }
  else {
    unint64_t v23 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v11;
  }
  unint64_t v24 = v18 - v17;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v18 - v17) {
    unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v24)
  {
    unint64_t v46 = v24;
    uint64_t v47 = a4[1];
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    if (v13 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = (char *)(*a3 + *a4 * v13 + 2 * v11 + v27);
    unint64_t v29 = (char *)(*a7 + v26 * v17 + v19);
    uint64_t v30 = -(uint64_t)v24;
    do
    {
      memcpy(v29, v28, 2 * v23);
      v28 += v25;
      v29 += v26;
    }
    while (!__CFADD__(v30++, 1));
    unint64_t v24 = v46;
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
    uint64_t v14 = v47;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v23 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v23 - v10;
  if (v12)
  {
    unint64_t v34 = v15;
    if (v8)
    {
      unint64_t v34 = v15 + 2;
      *uint64_t v21 = *v15;
      uint64_t v35 = v21 + 1;
    }
    else
    {
      uint64_t v35 = v21;
    }
    if (v23 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        int v37 = *v34;
        v34 += 2;
        v35[v36 / 2] = v37;
        v36 += 2;
      }
      while (v36 < v33);
    }
    uint64_t v15 = (int *)((char *)v15 + 2 * v14);
    uint64_t v21 = (int *)((char *)v21 + v20);
  }
  if (v24 != v32)
  {
    unint64_t v38 = 0;
    unint64_t v39 = v24 - v32;
    do
    {
      unsigned int v40 = v15;
      unint64_t v41 = v21;
      if (v8)
      {
        unsigned int v40 = v15 + 2;
        *uint64_t v21 = *v15;
        unint64_t v41 = v21 + 1;
      }
      if (v23 != v10)
      {
        unint64_t v42 = 0;
        do
        {
          int v43 = *v40;
          v40 += 2;
          v41[v42 / 2] = v43;
          v42 += 2;
        }
        while (v42 < v33);
      }
      uint64_t v15 = (int *)((char *)v15 + 2 * v14);
      uint64_t v21 = (int *)((char *)v21 + v20);
      v38 += 2;
    }
    while (v38 < v39);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    uint64_t v31 = *a8;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v30 + v32;
    uint64_t v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = (-268431360 - v36 + (v36 << 16)) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v41 = *v16;
      unsigned int v42 = v16[1];
      unsigned int v43 = *(unsigned __int16 *)((char *)v16 + v15);
      unsigned int v44 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        unsigned int v42 = 4096;
      }
      if (v43 >= 0xF000) {
        unsigned int v43 = 61440;
      }
      if (v43 <= 0x1000) {
        unsigned int v43 = 4096;
      }
      if (v44 >= 0xF000) {
        unsigned int v44 = 61440;
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      unsigned int v46 = v16[2];
      unsigned int v47 = v16[3];
      unsigned int v48 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      unsigned int v49 = *v48;
      unsigned int v50 = v48[1];
      if (v46 >= 0xF000) {
        unsigned int v46 = 61440;
      }
      if (v46 <= 0x1000) {
        unsigned int v46 = 4096;
      }
      if (v47 >= 0xF000) {
        unsigned int v47 = 61440;
      }
      if (v47 <= 0x1000) {
        unsigned int v47 = 4096;
      }
      if (v49 >= 0xF000) {
        unsigned int v49 = 61440;
      }
      if (v49 <= 0x1000) {
        unsigned int v49 = 4096;
      }
      unint64_t v51 = (613566757 * (unint64_t)((-268431360 - v41 + (v41 << 16)) >> 13)) >> 32;
      if (v50 >= 0xF000) {
        unsigned int v50 = 61440;
      }
      if (v50 <= 0x1000) {
        int v52 = 4096;
      }
      else {
        int v52 = v50;
      }
      unint64_t v39 = v16 + 4;
      *unint64_t v23 = (v51
                          + ((613566757 * (unint64_t)((-268431360 - v46 + (v46 << 16)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-268431360 - v43 + (v43 << 16)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-268431360 - v49 + (v49 << 16)) >> 13)) >> 32)
                          + 2) >> 2;
      v23[1] = (((613566757 * (unint64_t)((-268431360 - v42 + (v42 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v45 + (v45 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v52 + (v52 << 16)) >> 13)) >> 32)
                            + 2) >> 2;
      unsigned int v40 = v23 + 2;
    }
    else
    {
      unint64_t v39 = v16;
      unsigned int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v53 = 0;
      uint64_t v54 = v39 + 2;
      do
      {
        unsigned int v55 = *(v54 - 2);
        unsigned int v56 = (unsigned __int16 *)((char *)v54 + v15);
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          int v57 = 4096;
        }
        else {
          int v57 = v55;
        }
        if (*(v54 - 1) >= 0xF000u) {
          unsigned int v58 = 61440;
        }
        else {
          unsigned int v58 = *(v54 - 1);
        }
        if (v58 <= 0x1000) {
          int v59 = 4096;
        }
        else {
          int v59 = v58;
        }
        if (*(unsigned __int16 *)((char *)v54 + v15 - 4) >= 0xF000u) {
          unsigned int v60 = 61440;
        }
        else {
          unsigned int v60 = *(unsigned __int16 *)((char *)v54 + v15 - 4);
        }
        if (v60 <= 0x1000) {
          int v61 = 4096;
        }
        else {
          int v61 = v60;
        }
        if (*(v56 - 1) >= 0xF000u) {
          unsigned int v62 = 61440;
        }
        else {
          unsigned int v62 = *(v56 - 1);
        }
        if (v62 <= 0x1000) {
          int v63 = 4096;
        }
        else {
          int v63 = v62;
        }
        unsigned int v64 = *v54;
        unsigned int v65 = *v56;
        if (v64 >= 0xF000) {
          unsigned int v64 = 61440;
        }
        if (v64 <= 0x1000) {
          int v66 = 4096;
        }
        else {
          int v66 = v64;
        }
        if (v54[1] >= 0xF000u) {
          unsigned int v67 = 61440;
        }
        else {
          unsigned int v67 = v54[1];
        }
        unsigned int v68 = v56[1];
        if (v67 <= 0x1000) {
          int v69 = 4096;
        }
        else {
          int v69 = v67;
        }
        if (v65 >= 0xF000) {
          unsigned int v65 = 61440;
        }
        unsigned int v70 = &v40[v53];
        if (v65 <= 0x1000) {
          unsigned int v65 = 4096;
        }
        unsigned int v71 = -268431360 - v57 + (v57 << 16);
        if (v68 >= 0xF000) {
          unsigned int v68 = 61440;
        }
        unint64_t v72 = (613566757 * (unint64_t)(v71 >> 13)) >> 32;
        unint64_t v73 = (613566757 * (unint64_t)((-268431360 - v59 + (v59 << 16)) >> 13)) >> 32;
        unint64_t v74 = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
        uint64_t v75 = 613566757 * ((-268431360 - v63 + (v63 << 16)) >> 13);
        if (v68 <= 0x1000) {
          unsigned int v68 = 4096;
        }
        *unsigned int v70 = (v72
                            + ((613566757 * (unint64_t)((-268431360 - v66 + (v66 << 16)) >> 13)) >> 32)
                            + v74
                            + ((613566757 * (unint64_t)((-268431360 - v65 + (v65 << 16)) >> 13)) >> 32)
                            + 2) >> 2;
        v70[1] = (v73
                              + ((613566757 * (unint64_t)((-268431360 - v69 + (v69 << 16)) >> 13)) >> 32)
                              + HIDWORD(v75)
                              + ((613566757 * (unint64_t)((-268431360 - v68 + (v68 << 16)) >> 13)) >> 32)
                              + 2) >> 2;
        v53 += 2;
        v54 += 4;
      }
      while (v53 < v38);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    unint64_t v76 = 0;
    unint64_t v77 = v27 - v37;
    do
    {
      unsigned int v78 = v16;
      int v79 = v23;
      if (v8)
      {
        unsigned int v80 = *v16;
        unsigned int v81 = v16[1];
        unsigned int v82 = *(unsigned __int16 *)((char *)v16 + v15);
        unsigned int v83 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v80 >= 0xF000) {
          unsigned int v80 = 61440;
        }
        if (v80 <= 0x1000) {
          unsigned int v80 = 4096;
        }
        if (v81 >= 0xF000) {
          unsigned int v81 = 61440;
        }
        if (v81 <= 0x1000) {
          unsigned int v81 = 4096;
        }
        if (v82 >= 0xF000) {
          unsigned int v82 = 61440;
        }
        if (v82 <= 0x1000) {
          unsigned int v82 = 4096;
        }
        if (v83 >= 0xF000) {
          unsigned int v83 = 61440;
        }
        if (v83 <= 0x1000) {
          int v84 = 4096;
        }
        else {
          int v84 = v83;
        }
        unsigned int v85 = v16[2];
        unsigned int v86 = v16[3];
        unint64_t v87 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        unsigned int v88 = *v87;
        unsigned int v89 = v87[1];
        if (v85 >= 0xF000) {
          unsigned int v85 = 61440;
        }
        if (v85 <= 0x1000) {
          unsigned int v85 = 4096;
        }
        if (v86 >= 0xF000) {
          unsigned int v86 = 61440;
        }
        if (v86 <= 0x1000) {
          unsigned int v86 = 4096;
        }
        if (v88 >= 0xF000) {
          unsigned int v88 = 61440;
        }
        if (v88 <= 0x1000) {
          unsigned int v88 = 4096;
        }
        unint64_t v90 = (613566757 * (unint64_t)((-268431360 - v80 + (v80 << 16)) >> 13)) >> 32;
        if (v89 >= 0xF000) {
          unsigned int v89 = 61440;
        }
        if (v89 <= 0x1000) {
          int v91 = 4096;
        }
        else {
          int v91 = v89;
        }
        unsigned int v78 = v16 + 4;
        *unint64_t v23 = (v90
                            + ((613566757 * (unint64_t)((-268431360 - v85 + (v85 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v82 + (v82 << 16)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-268431360 - v88 + (v88 << 16)) >> 13)) >> 32)
                            + 2) >> 2;
        v23[1] = (((613566757 * (unint64_t)((-268431360 - v81 + (v81 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v86 + (v86 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v84 + (v84 << 16)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-268431360 - v91 + (v91 << 16)) >> 13)) >> 32)
                              + 2) >> 2;
        int v79 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v92 = 0;
        unsigned int v93 = v78 + 2;
        do
        {
          unsigned int v94 = *(v93 - 2);
          unsigned int v95 = (unsigned __int16 *)((char *)v93 + v15);
          if (v94 >= 0xF000) {
            unsigned int v94 = 61440;
          }
          if (v94 <= 0x1000) {
            int v96 = 4096;
          }
          else {
            int v96 = v94;
          }
          if (*(v93 - 1) >= 0xF000u) {
            unsigned int v97 = 61440;
          }
          else {
            unsigned int v97 = *(v93 - 1);
          }
          if (v97 <= 0x1000) {
            int v98 = 4096;
          }
          else {
            int v98 = v97;
          }
          if (*(unsigned __int16 *)((char *)v93 + v15 - 4) >= 0xF000u) {
            unsigned int v99 = 61440;
          }
          else {
            unsigned int v99 = *(unsigned __int16 *)((char *)v93 + v15 - 4);
          }
          if (v99 <= 0x1000) {
            int v100 = 4096;
          }
          else {
            int v100 = v99;
          }
          if (*(v95 - 1) >= 0xF000u) {
            unsigned int v101 = 61440;
          }
          else {
            unsigned int v101 = *(v95 - 1);
          }
          if (v101 <= 0x1000) {
            int v102 = 4096;
          }
          else {
            int v102 = v101;
          }
          unsigned int v103 = *v93;
          unsigned int v104 = *v95;
          if (v103 >= 0xF000) {
            unsigned int v103 = 61440;
          }
          if (v103 <= 0x1000) {
            int v105 = 4096;
          }
          else {
            int v105 = v103;
          }
          if (v93[1] >= 0xF000u) {
            unsigned int v106 = 61440;
          }
          else {
            unsigned int v106 = v93[1];
          }
          unsigned int v107 = v95[1];
          if (v106 <= 0x1000) {
            int v108 = 4096;
          }
          else {
            int v108 = v106;
          }
          if (v104 >= 0xF000) {
            unsigned int v104 = 61440;
          }
          int v109 = &v79[v92];
          if (v104 <= 0x1000) {
            unsigned int v104 = 4096;
          }
          unsigned int v110 = -268431360 - v96 + (v96 << 16);
          if (v107 >= 0xF000) {
            unsigned int v107 = 61440;
          }
          unint64_t v111 = (613566757 * (unint64_t)(v110 >> 13)) >> 32;
          unint64_t v112 = (613566757 * (unint64_t)((-268431360 - v98 + (v98 << 16)) >> 13)) >> 32;
          unint64_t v113 = (613566757 * (unint64_t)((-268431360 - v100 + (v100 << 16)) >> 13)) >> 32;
          uint64_t v114 = 613566757 * ((-268431360 - v102 + (v102 << 16)) >> 13);
          if (v107 <= 0x1000) {
            unsigned int v107 = 4096;
          }
          *int v109 = (v111
                               + ((613566757 * (unint64_t)((-268431360 - v105 + (v105 << 16)) >> 13)) >> 32)
                               + v113
                               + ((613566757 * (unint64_t)((-268431360 - v104 + (v104 << 16)) >> 13)) >> 32)
                               + 2) >> 2;
          v109[1] = (v112
                                 + ((613566757
                                   * (unint64_t)((-268431360 - v108 + (v108 << 16)) >> 13)) >> 32)
                                 + HIDWORD(v114)
                                 + ((613566757 * (unint64_t)((-268431360 - v107 + (v107 << 16)) >> 13)) >> 32)
                                 + 2) >> 2;
          v92 += 2;
          v93 += 4;
        }
        while (v92 < v38);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v76 += 2;
    }
    while (v76 < v77);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_sf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * (v10 + v9);
    uint64_t v31 = *a8;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v30 + v32;
    uint64_t v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = (-268431360 - v36 + (v36 << 16)) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v41 = *v16;
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        int v42 = 4096;
      }
      else {
        int v42 = v41;
      }
      if (v16[1] >= 0xF000u) {
        unsigned int v43 = 61440;
      }
      else {
        unsigned int v43 = v16[1];
      }
      if (v43 <= 0x1000) {
        int v44 = 4096;
      }
      else {
        int v44 = v43;
      }
      unint64_t v39 = v16 + 4;
      *unint64_t v23 = (613566757 * (unint64_t)((-268431360 - v42 + (v42 << 16)) >> 13)) >> 32;
      v23[1] = (613566757 * (unint64_t)((-268431360 - v44 + (v44 << 16)) >> 13)) >> 32;
      unsigned int v40 = v23 + 2;
    }
    else
    {
      unint64_t v39 = v16;
      unsigned int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v45 = 0;
      do
      {
        unsigned int v46 = &v40[v45];
        unsigned int v47 = *v39;
        unsigned int v48 = v39[1];
        if (v47 >= 0xF000) {
          unsigned int v47 = 61440;
        }
        if (v47 <= 0x1000) {
          unsigned int v47 = 4096;
        }
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          unsigned int v48 = 4096;
        }
        *unsigned int v46 = (613566757 * (unint64_t)((-268431360 - v47 + (v47 << 16)) >> 13)) >> 32;
        v46[1] = (613566757 * (unint64_t)((-268431360 - v48 + (v48 << 16)) >> 13)) >> 32;
        v45 += 2;
        v39 += 4;
      }
      while (v45 < v38);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v27 - v37;
    uint64_t v51 = 2 * v15;
    do
    {
      int v52 = v16;
      unint64_t v53 = v23;
      if (v9)
      {
        unsigned int v54 = *v16;
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          int v55 = 4096;
        }
        else {
          int v55 = v54;
        }
        if (v16[1] >= 0xF000u) {
          unsigned int v56 = 61440;
        }
        else {
          unsigned int v56 = v16[1];
        }
        if (v56 <= 0x1000) {
          int v57 = 4096;
        }
        else {
          int v57 = v56;
        }
        int v52 = v16 + 4;
        *unint64_t v23 = (613566757 * (unint64_t)((-268431360 - v55 + (v55 << 16)) >> 13)) >> 32;
        v23[1] = (613566757 * (unint64_t)((-268431360 - v57 + (v57 << 16)) >> 13)) >> 32;
        unint64_t v53 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v58 = 0;
        do
        {
          int v59 = &v53[v58];
          unsigned int v60 = *v52;
          unsigned int v61 = v52[1];
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          if (v61 >= 0xF000) {
            unsigned int v61 = 61440;
          }
          if (v61 <= 0x1000) {
            unsigned int v61 = 4096;
          }
          *int v59 = (613566757 * (unint64_t)((-268431360 - v60 + (v60 << 16)) >> 13)) >> 32;
          v59[1] = (613566757 * (unint64_t)((-268431360 - v61 + (v61 << 16)) >> 13)) >> 32;
          v58 += 2;
          v52 += 4;
        }
        while (v58 < v38);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v51);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_s4as_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = a4[2];
    uint64_t v25 = v21 + 2 * v15;
    uint64_t v26 = v22 + 2 * v15;
    uint64_t v27 = a3[2] + v24 * v8 + 2 * v9;
    uint64_t v28 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v27 + 2 * i);
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFF0;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v30 = v8 & 1;
  if (v11 >= v30) {
    uint64_t v31 = v8 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  unint64_t v33 = v9 & 1;
  if (v10 >= v33) {
    unint64_t v34 = v33;
  }
  else {
    unint64_t v34 = 0;
  }
  unint64_t v35 = v10 - v34;
  if (v8)
  {
    if (v32)
    {
      unsigned int v36 = v13 + 2;
      __int16 v38 = v13[1] & 0xFFF0;
      *uint64_t v17 = *v13 & 0xFFF0;
      v17[1] = v38;
      unint64_t v37 = v17 + 2;
    }
    else
    {
      unsigned int v36 = v13;
      unint64_t v37 = v17;
    }
    if (v10 == v34)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v40 = v10 - v34;
      do
      {
        __int16 v41 = *v36;
        __int16 v42 = v36[1];
        v36 += 2;
        *unint64_t v37 = v41 & 0xFFF0;
        v37[1] = v42 & 0xFFF0;
        v37 += 2;
        --v40;
      }
      while (v40);
      unint64_t v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      __int16 v43 = *v36 & 0xFFF0;
      __int16 v44 = v36[1] & 0xFFF0;
      *unint64_t v37 = v43;
      v37[1] = v44;
    }
    unint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v11 - v31;
    do
    {
      unsigned int v47 = v13;
      unsigned int v48 = v17;
      if (v32)
      {
        unsigned int v47 = v13 + 2;
        __int16 v49 = v13[1] & 0xFFF0;
        *uint64_t v17 = *v13 & 0xFFF0;
        v17[1] = v49;
        unsigned int v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v34;
        do
        {
          __int16 v52 = *v47;
          __int16 v53 = v47[1];
          v47 += 2;
          _WORD *v48 = v52 & 0xFFF0;
          v48[1] = v53 & 0xFFF0;
          v48 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        __int16 v54 = *v47 & 0xFFF0;
        __int16 v55 = v47[1] & 0xFFF0;
        _WORD *v48 = v54;
        v48[1] = v55;
      }
      unint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if (v32)
    {
      __int16 v56 = *v13;
      __int16 v57 = v13[1];
      v13 += 2;
      *uint64_t v17 = v56 & 0xFFF0;
      v17[1] = v57 & 0xFFF0;
      v17 += 2;
    }
    if (v10 == v34)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v34;
      do
      {
        __int16 v59 = *v13;
        __int16 v60 = v13[1];
        v13 += 2;
        *uint64_t v17 = v59 & 0xFFF0;
        v17[1] = v60 & 0xFFF0;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      __int16 v61 = *v13 & 0xFFF0;
      __int16 v62 = v13[1] & 0xFFF0;
      *uint64_t v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_tv44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(_WORD *)(v22 + 2 * i) & 0xFFF0;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      unint64_t v30 = v13 + 2;
      __int16 v32 = v13[1] & 0xFFF0;
      *uint64_t v17 = *v13 & 0xFFF0;
      v17[1] = v32;
      uint64_t v31 = v17 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      uint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        __int16 v35 = *v30;
        __int16 v36 = v30[1];
        v30 += 2;
        _WORD *v31 = v35 & 0xFFF0;
        v31[1] = v36 & 0xFFF0;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      __int16 v37 = *v30 & 0xFFF0;
      __int16 v38 = v30[1] & 0xFFF0;
      _WORD *v31 = v37;
      v31[1] = v38;
    }
    unint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      __int16 v41 = v13;
      __int16 v42 = v17;
      if (v26)
      {
        __int16 v41 = v13 + 2;
        __int16 v43 = v13[1] & 0xFFF0;
        *uint64_t v17 = *v13 & 0xFFF0;
        v17[1] = v43;
        __int16 v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          __int16 v46 = *v41;
          __int16 v47 = v41[1];
          v41 += 2;
          *__int16 v42 = v46 & 0xFFF0;
          v42[1] = v47 & 0xFFF0;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        __int16 v48 = *v41 & 0xFFF0;
        __int16 v49 = v41[1] & 0xFFF0;
        *__int16 v42 = v48;
        v42[1] = v49;
      }
      unint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      __int16 v50 = *v13;
      __int16 v51 = v13[1];
      v13 += 2;
      *uint64_t v17 = v50 & 0xFFF0;
      v17[1] = v51 & 0xFFF0;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        __int16 v53 = *v13;
        __int16 v54 = v13[1];
        v13 += 2;
        *uint64_t v17 = v53 & 0xFFF0;
        v17[1] = v54 & 0xFFF0;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      __int16 v55 = *v13 & 0xFFF0;
      __int16 v56 = v13[1] & 0xFFF0;
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_tf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v25 = *(unsigned __int16 *)(v23 + 2 * i);
          if (v25 >= 0xEB00) {
            unsigned int v25 = 60160;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          *(_WORD *)(v22 + 2 * i) = 16 * ((-16773120 - v25 + (v25 << 12)) / 0xDB00);
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v26 = v8 & 1;
  if (v18 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unsigned int v34 = *v13;
      unsigned int v35 = v13[1];
      if (v34 >= 0xF000) {
        unsigned int v34 = 61440;
      }
      if (v34 <= 0x1000) {
        unsigned int v34 = 4096;
      }
      if (v35 >= 0xF000) {
        unsigned int v35 = 61440;
      }
      if (v35 <= 0x1000) {
        int v36 = 4096;
      }
      else {
        int v36 = v35;
      }
      __int16 v32 = v13 + 2;
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-16773120 - v34 + (v34 << 12)) >> 13)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v36 + (v36 << 12)) >> 13)) >> 32);
      unint64_t v33 = v17 + 2;
    }
    else
    {
      __int16 v32 = v13;
      unint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v37 = 0;
    }
    else
    {
      unint64_t v38 = v10 - v30;
      do
      {
        unsigned int v39 = *v32;
        unsigned int v40 = v32[1];
        if (v39 >= 0xF000) {
          unsigned int v39 = 61440;
        }
        if (v39 <= 0x1000) {
          unsigned int v39 = 4096;
        }
        if (v40 >= 0xF000) {
          unsigned int v40 = 61440;
        }
        if (v40 <= 0x1000) {
          unsigned int v40 = 4096;
        }
        v32 += 2;
        *unint64_t v33 = 16 * ((613566757 * (unint64_t)((-16773120 - v39 + (v39 << 12)) >> 13)) >> 32);
        v33[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v40 + (v40 << 12)) >> 13)) >> 32);
        v33 += 2;
        --v38;
      }
      while (v38);
      unint64_t v37 = v10 - v30;
    }
    if (v37 + v29 < v10)
    {
      unsigned int v41 = *v32;
      unsigned int v42 = v32[1];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        unsigned int v42 = 4096;
      }
      *unint64_t v33 = 16 * ((613566757 * (unint64_t)((-16773120 - v41 + (v41 << 12)) >> 13)) >> 32);
      v33[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v42 + (v42 << 12)) >> 13)) >> 32);
    }
    unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v18 - v27;
    do
    {
      unint64_t v45 = v13;
      __int16 v46 = v17;
      if (v28)
      {
        unsigned int v47 = *v13;
        unsigned int v48 = v13[1];
        if (v47 >= 0xF000) {
          unsigned int v47 = 61440;
        }
        if (v47 <= 0x1000) {
          unsigned int v47 = 4096;
        }
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          int v49 = 4096;
        }
        else {
          int v49 = v48;
        }
        unint64_t v45 = v13 + 2;
        *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v49 + (v49 << 12)) >> 13)) >> 32);
        __int16 v46 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v30;
        do
        {
          unsigned int v52 = *v45;
          unsigned int v53 = v45[1];
          if (v52 >= 0xF000) {
            unsigned int v52 = 61440;
          }
          if (v52 <= 0x1000) {
            unsigned int v52 = 4096;
          }
          if (v53 >= 0xF000) {
            unsigned int v53 = 61440;
          }
          if (v53 <= 0x1000) {
            unsigned int v53 = 4096;
          }
          v45 += 2;
          *__int16 v46 = 16 * ((613566757 * (unint64_t)((-16773120 - v52 + (v52 << 12)) >> 13)) >> 32);
          v46[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v53 + (v53 << 12)) >> 13)) >> 32);
          v46 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v30;
      }
      if (v50 + v29 < v10)
      {
        unsigned int v54 = *v45;
        unsigned int v55 = v45[1];
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          unsigned int v54 = 4096;
        }
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          unsigned int v55 = 4096;
        }
        *__int16 v46 = 16 * ((613566757 * (unint64_t)((-16773120 - v54 + (v54 << 12)) >> 13)) >> 32);
        v46[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v55 + (v55 << 12)) >> 13)) >> 32);
      }
      unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v26 < v18)
  {
    if (v28)
    {
      unsigned int v56 = *v13;
      unsigned int v57 = v13[1];
      if (v56 >= 0xF000) {
        unsigned int v56 = 61440;
      }
      if (v56 <= 0x1000) {
        unsigned int v56 = 4096;
      }
      if (v57 >= 0xF000) {
        unsigned int v57 = 61440;
      }
      if (v57 <= 0x1000) {
        unsigned int v57 = 4096;
      }
      v13 += 2;
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v57 + (v57 << 12)) >> 13)) >> 32);
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v30;
      do
      {
        unsigned int v59 = *v13;
        unsigned int v60 = v13[1];
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          unsigned int v59 = 4096;
        }
        if (v60 >= 0xF000) {
          unsigned int v60 = 61440;
        }
        if (v60 <= 0x1000) {
          unsigned int v60 = 4096;
        }
        v13 += 2;
        *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-16773120 - v59 + (v59 << 12)) >> 13)) >> 32);
        v17[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32);
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v61 = *v13;
      unsigned int v62 = v13[1];
      if (v61 >= 0xF000) {
        unsigned int v61 = 61440;
      }
      if (v61 <= 0x1000) {
        unsigned int v61 = 4096;
      }
      if (v62 >= 0xF000) {
        unsigned int v62 = 61440;
      }
      if (v62 <= 0x1000) {
        unsigned int v62 = 4096;
      }
      *uint64_t v17 = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
      v17[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v62 + (v62 << 12)) >> 13)) >> 32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_s4as_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + 2 * v11;
    uint64_t v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFF0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      unint64_t v38 = v14 + 4;
      int v40 = (v14[3] >> 4) + (v14[1] >> 4);
      *uint64_t v19 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
      v19[1] = (8 * v40 + 8) & 0xFFF0;
      unsigned int v39 = v19 + 2;
    }
    else
    {
      unint64_t v38 = v14;
      unsigned int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        int v43 = ((unsigned __int16)v38[3] >> 4) + ((unsigned __int16)v38[1] >> 4);
        *unsigned int v42 = (8 * ((v38[2] >> 4) + (*v38 >> 4)) + 8) & 0xFFF0;
        v42[1] = (8 * v43 + 8) & 0xFFF0;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      __int16 v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        __int16 v46 = v14 + 4;
        int v48 = (v14[3] >> 4) + (v14[1] >> 4);
        *uint64_t v19 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
        v19[1] = (8 * v48 + 8) & 0xFFF0;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          int v51 = ((unsigned __int16)v46[3] >> 4) + ((unsigned __int16)v46[1] >> 4);
          _WORD *v50 = (8 * ((v46[2] >> 4) + (*v46 >> 4)) + 8) & 0xFFF0;
          v50[1] = (8 * v51 + 8) & 0xFFF0;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      unsigned int v52 = *v14;
      unsigned int v53 = v14[1];
      unsigned int v54 = v14[2];
      unsigned int v55 = v14[3];
      v14 += 4;
      *uint64_t v19 = (8 * ((v54 >> 4) + (v52 >> 4)) + 8) & 0xFFF0;
      v19[1] = (8 * ((v55 >> 4) + (v53 >> 4)) + 8) & 0xFFF0;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v56 = 0;
      do
      {
        unsigned int v57 = &v19[v56];
        int v58 = (v14[3] >> 4) + (v14[1] >> 4);
        _WORD *v57 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
        v57[1] = (8 * v58 + 8) & 0xFFF0;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_s4as_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + 2 * v11;
    uint64_t v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFF0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      unint64_t v38 = v14 + 4;
      __int16 v40 = v14[1] & 0xFFF0;
      *uint64_t v19 = *v14 & 0xFFF0;
      v19[1] = v40;
      unsigned int v39 = v19 + 2;
    }
    else
    {
      unint64_t v38 = v14;
      unsigned int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = v38[1] & 0xFFF0;
        *unsigned int v42 = *v38 & 0xFFF0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      __int16 v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        __int16 v46 = v14 + 4;
        __int16 v48 = v14[1] & 0xFFF0;
        *uint64_t v19 = *v14 & 0xFFF0;
        v19[1] = v48;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          __int16 v51 = v46[1] & 0xFFF0;
          _WORD *v50 = *v46 & 0xFFF0;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      __int16 v52 = *v14;
      __int16 v53 = v14[1];
      v14 += 4;
      *uint64_t v19 = v52 & 0xFFF0;
      v19[1] = v53 & 0xFFF0;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        unsigned int v55 = &v19[v54];
        __int16 v56 = v14[1] & 0xFFF0;
        *unsigned int v55 = *v14 & 0xFFF0;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFF0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      int v36 = (v14[3] >> 4) + (v14[1] >> 4);
      *unint64_t v21 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
      v21[1] = (8 * v36 + 8) & 0xFFF0;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = &v35[v37];
        int v39 = ((unsigned __int16)v34[3] >> 4) + ((unsigned __int16)v34[1] >> 4);
        *unint64_t v38 = (8 * ((v34[2] >> 4) + (*v34 >> 4)) + 8) & 0xFFF0;
        v38[1] = (8 * v39 + 8) & 0xFFF0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        int v44 = (v14[3] >> 4) + (v14[1] >> 4);
        *unint64_t v21 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
        v21[1] = (8 * v44 + 8) & 0xFFF0;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          int v47 = ((unsigned __int16)v42[3] >> 4) + ((unsigned __int16)v42[1] >> 4);
          *__int16 v46 = (8 * ((v42[2] >> 4) + (*v42 >> 4)) + 8) & 0xFFF0;
          v46[1] = (8 * v47 + 8) & 0xFFF0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v48 = *v14;
      unsigned int v49 = v14[1];
      unsigned int v50 = v14[2];
      unsigned int v51 = v14[3];
      v14 += 4;
      *unint64_t v21 = (8 * ((v50 >> 4) + (v48 >> 4)) + 8) & 0xFFF0;
      v21[1] = (8 * ((v51 >> 4) + (v49 >> 4)) + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        __int16 v53 = &v21[v52];
        int v54 = (v14[3] >> 4) + (v14[1] >> 4);
        *__int16 v53 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
        v53[1] = (8 * v54 + 8) & 0xFFF0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_tv22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFF0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      __int16 v36 = v14[1] & 0xFFF0;
      *unint64_t v21 = *v14 & 0xFFF0;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = &v35[v37];
        __int16 v39 = v34[1] & 0xFFF0;
        *unint64_t v38 = *v34 & 0xFFF0;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        __int16 v44 = v14[1] & 0xFFF0;
        *unint64_t v21 = *v14 & 0xFFF0;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          __int16 v47 = v42[1] & 0xFFF0;
          *__int16 v46 = *v42 & 0xFFF0;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14;
      __int16 v49 = v14[1];
      v14 += 4;
      *unint64_t v21 = v48 & 0xFFF0;
      v21[1] = v49 & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        unsigned int v51 = &v21[v50];
        __int16 v52 = v14[1] & 0xFFF0;
        *unsigned int v51 = *v14 & 0xFFF0;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i);
          if (v30 >= 0xEB00) {
            unsigned int v30 = 60160;
          }
          if (v30 <= 0x1000) {
            unsigned int v30 = 4096;
          }
          *(_WORD *)(v27 + 2 * i) = 16 * ((-16773120 - v30 + (v30 << 12)) / 0xDB00);
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF000) {
        unsigned int v37 = 61440;
      }
      if (v37 <= 0x1000) {
        int v38 = 4096;
      }
      else {
        int v38 = v37;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v39 = 61440;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x1000) {
        int v40 = 4096;
      }
      else {
        int v40 = v39;
      }
      unsigned int v41 = v14[2];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        int v42 = 4096;
      }
      else {
        int v42 = v41;
      }
      if (v14[3] >= 0xF000u) {
        unsigned int v43 = 61440;
      }
      else {
        unsigned int v43 = v14[3];
      }
      if (v43 <= 0x1000) {
        int v44 = 4096;
      }
      else {
        int v44 = v43;
      }
      uint64_t v35 = v14 + 4;
      *unint64_t v21 = (8
            * (((613566757 * (unint64_t)((-16773120 - v42 + (v42 << 12)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-16773120 - v38 + (v38 << 12)) >> 13)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((-16773120 - v44 + (v44 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v40 + (v40 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v45 = 0;
      do
      {
        __int16 v46 = &v36[v45];
        unsigned int v47 = *v35;
        unsigned int v48 = v35[1];
        if (v47 >= 0xF000) {
          unsigned int v47 = 61440;
        }
        if (v47 <= 0x1000) {
          unsigned int v47 = 4096;
        }
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          unsigned int v48 = 4096;
        }
        unsigned int v49 = v35[2];
        unsigned int v50 = v35[3];
        if (v49 >= 0xF000) {
          unsigned int v49 = 61440;
        }
        if (v49 <= 0x1000) {
          unsigned int v49 = 4096;
        }
        if (v50 >= 0xF000) {
          unsigned int v50 = 61440;
        }
        if (v50 <= 0x1000) {
          unsigned int v50 = 4096;
        }
        *__int16 v46 = (8
              * (((613566757 * (unint64_t)((-16773120 - v49 + (v49 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
        v46[1] = (8
                * (((613566757 * (unint64_t)((-16773120 - v50 + (v50 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v48 + (v48 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
        v45 += 2;
        v35 += 4;
      }
      while (v45 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v51 = 0;
  }
  else
  {
    uint64_t v52 = 0;
    unint64_t v51 = v9 - v32;
    do
    {
      __int16 v53 = v14;
      int v54 = v21;
      if (v33)
      {
        unsigned int v55 = *v14;
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          int v56 = 4096;
        }
        else {
          int v56 = v55;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v57 = 61440;
        }
        else {
          unsigned int v57 = v14[1];
        }
        if (v57 <= 0x1000) {
          int v58 = 4096;
        }
        else {
          int v58 = v57;
        }
        unsigned int v59 = v14[2];
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          int v60 = 4096;
        }
        else {
          int v60 = v59;
        }
        if (v14[3] >= 0xF000u) {
          unsigned int v61 = 61440;
        }
        else {
          unsigned int v61 = v14[3];
        }
        if (v61 <= 0x1000) {
          int v62 = 4096;
        }
        else {
          int v62 = v61;
        }
        __int16 v53 = v14 + 4;
        *unint64_t v21 = (8
              * (((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
        v21[1] = (8
                * (((613566757 * (unint64_t)((-16773120 - v62 + (v62 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v58 + (v58 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
        int v54 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v63 = 0;
        do
        {
          unsigned int v64 = &v54[v63];
          unsigned int v65 = *v53;
          unsigned int v66 = v53[1];
          if (v65 >= 0xF000) {
            unsigned int v65 = 61440;
          }
          if (v65 <= 0x1000) {
            unsigned int v65 = 4096;
          }
          if (v66 >= 0xF000) {
            unsigned int v66 = 61440;
          }
          if (v66 <= 0x1000) {
            unsigned int v66 = 4096;
          }
          unsigned int v67 = v53[2];
          unsigned int v68 = v53[3];
          if (v67 >= 0xF000) {
            unsigned int v67 = 61440;
          }
          if (v67 <= 0x1000) {
            unsigned int v67 = 4096;
          }
          if (v68 >= 0xF000) {
            unsigned int v68 = 61440;
          }
          if (v68 <= 0x1000) {
            unsigned int v68 = 4096;
          }
          *unsigned int v64 = (8
                * (((613566757 * (unint64_t)((-16773120 - v67 + (v67 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v65 + (v65 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
          v64[1] = (8
                  * (((613566757 * (unint64_t)((-16773120 - v68 + (v68 << 12)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-16773120 - v66 + (v66 << 12)) >> 13)) >> 32))
                  + 8) & 0xFFF0;
          v63 += 2;
          v53 += 4;
        }
        while (v63 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v69 = *v14;
      unsigned int v70 = v14[1];
      if (v69 >= 0xF000) {
        unsigned int v69 = 61440;
      }
      if (v69 <= 0x1000) {
        unsigned int v69 = 4096;
      }
      if (v70 >= 0xF000) {
        unsigned int v70 = 61440;
      }
      if (v70 <= 0x1000) {
        unsigned int v70 = 4096;
      }
      unsigned int v71 = v14[2];
      if (v71 >= 0xF000) {
        unsigned int v71 = 61440;
      }
      if (v71 <= 0x1000) {
        unsigned int v71 = 4096;
      }
      if (v14[3] >= 0xF000u) {
        unsigned int v72 = 61440;
      }
      else {
        unsigned int v72 = v14[3];
      }
      if (v72 <= 0x1000) {
        unsigned int v72 = 4096;
      }
      v14 += 4;
      *unint64_t v21 = (8
            * (((613566757 * (unint64_t)((-16773120 - v71 + (v71 << 12)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-16773120 - v69 + (v69 << 12)) >> 13)) >> 32))
            + 8) & 0xFFF0;
      v21[1] = (8
              * (((613566757 * (unint64_t)((-16773120 - v72 + (v72 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v70 + (v70 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v73 = 0;
      do
      {
        unint64_t v74 = &v21[v73];
        unsigned int v75 = *v14;
        unsigned int v76 = v14[1];
        if (v75 >= 0xF000) {
          unsigned int v75 = 61440;
        }
        if (v75 <= 0x1000) {
          unsigned int v75 = 4096;
        }
        if (v76 >= 0xF000) {
          unsigned int v76 = 61440;
        }
        if (v76 <= 0x1000) {
          unsigned int v76 = 4096;
        }
        unsigned int v77 = v14[2];
        unsigned int v78 = v14[3];
        if (v77 >= 0xF000) {
          unsigned int v77 = 61440;
        }
        if (v77 <= 0x1000) {
          unsigned int v77 = 4096;
        }
        if (v78 >= 0xF000) {
          unsigned int v78 = 61440;
        }
        if (v78 <= 0x1000) {
          unsigned int v78 = 4096;
        }
        *unint64_t v74 = (8
              * (((613566757 * (unint64_t)((-16773120 - v77 + (v77 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v75 + (v75 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
        v74[1] = (8
                * (((613566757 * (unint64_t)((-16773120 - v78 + (v78 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v76 + (v76 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
        v73 += 2;
        v14 += 4;
      }
      while (v73 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_tf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i);
          if (v30 >= 0xEB00) {
            unsigned int v30 = 60160;
          }
          if (v30 <= 0x1000) {
            unsigned int v30 = 4096;
          }
          *(_WORD *)(v27 + 2 * i) = 16 * ((-16773120 - v30 + (v30 << 12)) / 0xDB00);
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF000) {
        unsigned int v37 = 61440;
      }
      if (v37 <= 0x1000) {
        int v38 = 4096;
      }
      else {
        int v38 = v37;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v39 = 61440;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x1000) {
        int v40 = 4096;
      }
      else {
        int v40 = v39;
      }
      uint64_t v35 = v14 + 4;
      *unint64_t v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v38 + (v38 << 12)) >> 13)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v40 + (v40 << 12)) >> 13)) >> 32);
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        int v42 = &v36[v41];
        unsigned int v43 = *v35;
        unsigned int v44 = v35[1];
        if (v43 >= 0xF000) {
          unsigned int v43 = 61440;
        }
        if (v43 <= 0x1000) {
          unsigned int v43 = 4096;
        }
        if (v44 >= 0xF000) {
          unsigned int v44 = 61440;
        }
        if (v44 <= 0x1000) {
          unsigned int v44 = 4096;
        }
        *int v42 = 16 * ((613566757 * (unint64_t)((-16773120 - v43 + (v43 << 12)) >> 13)) >> 32);
        v42[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v44 + (v44 << 12)) >> 13)) >> 32);
        v41 += 2;
        v35 += 4;
      }
      while (v41 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v9 - v32;
    do
    {
      unsigned int v47 = v14;
      unsigned int v48 = v21;
      if (v33)
      {
        unsigned int v49 = *v14;
        if (v49 >= 0xF000) {
          unsigned int v49 = 61440;
        }
        if (v49 <= 0x1000) {
          int v50 = 4096;
        }
        else {
          int v50 = v49;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v51 = 61440;
        }
        else {
          unsigned int v51 = v14[1];
        }
        if (v51 <= 0x1000) {
          int v52 = 4096;
        }
        else {
          int v52 = v51;
        }
        unsigned int v47 = v14 + 4;
        *unint64_t v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v50 + (v50 << 12)) >> 13)) >> 32);
        v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v52 + (v52 << 12)) >> 13)) >> 32);
        unsigned int v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v53 = 0;
        do
        {
          int v54 = &v48[v53];
          unsigned int v55 = *v47;
          unsigned int v56 = v47[1];
          if (v55 >= 0xF000) {
            unsigned int v55 = 61440;
          }
          if (v55 <= 0x1000) {
            unsigned int v55 = 4096;
          }
          if (v56 >= 0xF000) {
            unsigned int v56 = 61440;
          }
          if (v56 <= 0x1000) {
            unsigned int v56 = 4096;
          }
          *int v54 = 16 * ((613566757 * (unint64_t)((-16773120 - v55 + (v55 << 12)) >> 13)) >> 32);
          v54[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32);
          v53 += 2;
          v47 += 4;
        }
        while (v53 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v57 = *v14;
      unsigned int v58 = v14[1];
      if (v57 >= 0xF000) {
        unsigned int v57 = 61440;
      }
      if (v57 <= 0x1000) {
        unsigned int v57 = 4096;
      }
      if (v58 >= 0xF000) {
        unsigned int v58 = 61440;
      }
      if (v58 <= 0x1000) {
        unsigned int v58 = 4096;
      }
      v14 += 4;
      *unint64_t v21 = 16 * ((613566757 * (unint64_t)((-16773120 - v57 + (v57 << 12)) >> 13)) >> 32);
      v21[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v58 + (v58 << 12)) >> 13)) >> 32);
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v59 = 0;
      do
      {
        int v60 = &v21[v59];
        unsigned int v61 = *v14;
        unsigned int v62 = v14[1];
        if (v61 >= 0xF000) {
          unsigned int v61 = 61440;
        }
        if (v61 <= 0x1000) {
          unsigned int v61 = 4096;
        }
        if (v62 >= 0xF000) {
          unsigned int v62 = 61440;
        }
        if (v62 <= 0x1000) {
          unsigned int v62 = 4096;
        }
        *int v60 = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
        v60[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v62 + (v62 << 12)) >> 13)) >> 32);
        v59 += 2;
        v14 += 4;
      }
      while (v59 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * (v10 + v8);
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFF0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      int v40 = (_WORD *)((char *)v16 + v15 + 4);
      unsigned int v41 = *v40;
      unsigned int v42 = v40[1];
      int v38 = v16 + 4;
      int v43 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4)
          + ((unsigned __int16)v16[1] >> 4)
          + ((unsigned __int16)v16[3] >> 4)
          + (v42 >> 4);
      *unint64_t v23 = (4 * ((*(_WORD *)((char *)v16 + v15) >> 4) + (*v16 >> 4) + (v16[2] >> 4) + (v41 >> 4)) + 8) & 0xFFF0;
      v23[1] = (4 * v43 + 8) & 0xFFF0;
      unsigned int v39 = v23 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v44 = 0;
      unint64_t v45 = v38 + 2;
      do
      {
        uint64_t v46 = &v39[v44];
        int v47 = (*(unsigned __int16 *)((char *)v45 + v15 - 2) >> 4)
            + ((unsigned __int16)*(v45 - 1) >> 4)
            + ((unsigned __int16)v45[1] >> 4)
            + (*(unsigned __int16 *)((char *)v45 + v15 + 2) >> 4);
        *uint64_t v46 = (4
              * ((*(_WORD *)((char *)v45 + v15 - 4) >> 4)
               + (*(v45 - 2) >> 4)
               + (*v45 >> 4)
               + (*(_WORD *)((char *)v45 + v15) >> 4))
              + 8) & 0xFFF0;
        v46[1] = (4 * v47 + 8) & 0xFFF0;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v37);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v27 - v36;
    do
    {
      int v50 = v16;
      unsigned int v51 = v23;
      if (v8)
      {
        int v52 = (_WORD *)((char *)v16 + v15 + 4);
        unsigned int v53 = *v52;
        unsigned int v54 = v52[1];
        int v50 = v16 + 4;
        int v55 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 4)
            + ((unsigned __int16)v16[1] >> 4)
            + ((unsigned __int16)v16[3] >> 4)
            + (v54 >> 4);
        *unint64_t v23 = (4 * ((*(_WORD *)((char *)v16 + v15) >> 4) + (*v16 >> 4) + (v16[2] >> 4) + (v53 >> 4)) + 8) & 0xFFF0;
        v23[1] = (4 * v55 + 8) & 0xFFF0;
        unsigned int v51 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v56 = 0;
        unsigned int v57 = v50 + 2;
        do
        {
          unsigned int v58 = &v51[v56];
          int v59 = (*(unsigned __int16 *)((char *)v57 + v15 - 2) >> 4)
              + ((unsigned __int16)*(v57 - 1) >> 4)
              + ((unsigned __int16)v57[1] >> 4)
              + (*(unsigned __int16 *)((char *)v57 + v15 + 2) >> 4);
          *unsigned int v58 = (4
                * ((*(_WORD *)((char *)v57 + v15 - 4) >> 4)
                 + (*(v57 - 2) >> 4)
                 + (*v57 >> 4)
                 + (*(_WORD *)((char *)v57 + v15) >> 4))
                + 8) & 0xFFF0;
          v58[1] = (4 * v59 + 8) & 0xFFF0;
          v56 += 2;
          v57 += 4;
        }
        while (v56 < v37);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_tv20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * (v10 + v9);
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFF0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      int v38 = v16 + 4;
      __int16 v40 = v16[1] & 0xFFF0;
      *unint64_t v23 = *v16 & 0xFFF0;
      v23[1] = v40;
      unsigned int v39 = v23 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = v38[1] & 0xFFF0;
        *unsigned int v42 = *v38 & 0xFFF0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v27 - v36;
    uint64_t v46 = 2 * v15;
    do
    {
      int v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        int v47 = v16 + 4;
        __int16 v49 = v16[1] & 0xFFF0;
        *unint64_t v23 = *v16 & 0xFFF0;
        v23[1] = v49;
        unint64_t v48 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v50 = 0;
        do
        {
          unsigned int v51 = &v48[v50];
          __int16 v52 = v47[1] & 0xFFF0;
          *unsigned int v51 = *v47 & 0xFFF0;
          v51[1] = v52;
          v50 += 2;
          v47 += 4;
        }
        while (v50 < v37);
      }
      uint64_t v16 = (_WORD *)((char *)v16 + v46);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    uint64_t v31 = *a8;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v30 + v32;
    uint64_t v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = 16 * ((-16773120 - v36 + (v36 << 12)) / 0xDB00);
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v41 = *v16;
      unsigned int v42 = v16[1];
      unsigned int v43 = *(unsigned __int16 *)((char *)v16 + v15);
      unsigned int v44 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        unsigned int v42 = 4096;
      }
      if (v43 >= 0xF000) {
        unsigned int v43 = 61440;
      }
      if (v43 <= 0x1000) {
        unsigned int v43 = 4096;
      }
      if (v44 >= 0xF000) {
        unsigned int v44 = 61440;
      }
      unsigned int v45 = v16[2];
      if (v44 <= 0x1000) {
        int v46 = 4096;
      }
      else {
        int v46 = v44;
      }
      unsigned int v47 = v16[3];
      unint64_t v48 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      unsigned int v49 = *v48;
      unsigned int v50 = v48[1];
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      if (v47 >= 0xF000) {
        unsigned int v47 = 61440;
      }
      if (v47 <= 0x1000) {
        int v51 = 4096;
      }
      else {
        int v51 = v47;
      }
      if (v49 >= 0xF000) {
        unsigned int v52 = 61440;
      }
      else {
        unsigned int v52 = v49;
      }
      if (v52 <= 0x1000) {
        int v53 = 4096;
      }
      else {
        int v53 = v52;
      }
      unsigned int v54 = -16773120 - v41 + (v41 << 12);
      if (v50 >= 0xF000) {
        unsigned int v55 = 61440;
      }
      else {
        unsigned int v55 = v50;
      }
      if (v55 <= 0x1000) {
        int v56 = 4096;
      }
      else {
        int v56 = v55;
      }
      unsigned int v39 = v16 + 4;
      *unint64_t v23 = (4
            * (((613566757 * (unint64_t)((-16773120 - v43 + (v43 << 12)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)(v54 >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-16773120 - v45 + (v45 << 12)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-16773120 - v53 + (v53 << 12)) >> 13)) >> 32))
            + 8) & 0xFFF0;
      v23[1] = (4
              * (((613566757 * (unint64_t)((-16773120 - v46 + (v46 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v42 + (v42 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v51 + (v51 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v56 + (v56 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
      __int16 v40 = v23 + 2;
    }
    else
    {
      unsigned int v39 = v16;
      __int16 v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v57 = 0;
      unsigned int v58 = v39 + 2;
      do
      {
        unsigned int v59 = *(v58 - 2);
        int v60 = (unsigned __int16 *)((char *)v58 + v15);
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          int v61 = 4096;
        }
        else {
          int v61 = v59;
        }
        if (*(v58 - 1) >= 0xF000u) {
          unsigned int v62 = 61440;
        }
        else {
          unsigned int v62 = *(v58 - 1);
        }
        if (v62 <= 0x1000) {
          int v63 = 4096;
        }
        else {
          int v63 = v62;
        }
        if (*(unsigned __int16 *)((char *)v58 + v15 - 4) >= 0xF000u) {
          unsigned int v64 = 61440;
        }
        else {
          unsigned int v64 = *(unsigned __int16 *)((char *)v58 + v15 - 4);
        }
        if (v64 <= 0x1000) {
          int v65 = 4096;
        }
        else {
          int v65 = v64;
        }
        if (*(unsigned __int16 *)((char *)v58 + v15 - 2) >= 0xF000u) {
          unsigned int v66 = 61440;
        }
        else {
          unsigned int v66 = *(unsigned __int16 *)((char *)v58 + v15 - 2);
        }
        if (v66 <= 0x1000) {
          int v67 = 4096;
        }
        else {
          int v67 = v66;
        }
        unsigned int v68 = *v58;
        unsigned int v69 = *v60;
        if (v68 >= 0xF000) {
          unsigned int v68 = 61440;
        }
        unsigned int v70 = v60[1];
        if (v68 <= 0x1000) {
          int v71 = 4096;
        }
        else {
          int v71 = v68;
        }
        if (v58[1] >= 0xF000u) {
          unsigned int v72 = 61440;
        }
        else {
          unsigned int v72 = v58[1];
        }
        if (v72 <= 0x1000) {
          int v73 = 4096;
        }
        else {
          int v73 = v72;
        }
        if (v69 >= 0xF000) {
          unsigned int v74 = 61440;
        }
        else {
          unsigned int v74 = v69;
        }
        if (v74 <= 0x1000) {
          int v75 = 4096;
        }
        else {
          int v75 = v74;
        }
        unsigned int v76 = &v40[v57];
        unsigned int v77 = -16773120 - v61 + (v61 << 12);
        if (v70 >= 0xF000) {
          unsigned int v70 = 61440;
        }
        unint64_t v78 = (613566757 * (unint64_t)(v77 >> 13)) >> 32;
        unint64_t v79 = (613566757 * (unint64_t)((-16773120 - v63 + (v63 << 12)) >> 13)) >> 32;
        unint64_t v80 = (613566757 * (unint64_t)((-16773120 - v65 + (v65 << 12)) >> 13)) >> 32;
        unint64_t v81 = (613566757 * (unint64_t)((-16773120 - v67 + (v67 << 12)) >> 13)) >> 32;
        if (v70 <= 0x1000) {
          unsigned int v70 = 4096;
        }
        *unsigned int v76 = (4
              * (v80
               + v78
               + ((613566757 * (unint64_t)((-16773120 - v71 + (v71 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v75 + (v75 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
        v76[1] = (4
                * (v81
                 + v79
                 + ((613566757 * (unint64_t)((-16773120 - v73 + (v73 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v70 + (v70 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
        v57 += 2;
        v58 += 4;
      }
      while (v57 < v38);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    unint64_t v82 = 0;
    unint64_t v83 = v27 - v37;
    do
    {
      int v84 = v16;
      unsigned int v85 = v23;
      if (v8)
      {
        unsigned int v86 = *v16;
        unsigned int v87 = v16[1];
        unsigned int v88 = *(unsigned __int16 *)((char *)v16 + v15);
        unsigned int v89 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v86 >= 0xF000) {
          unsigned int v86 = 61440;
        }
        if (v86 <= 0x1000) {
          unsigned int v86 = 4096;
        }
        if (v87 >= 0xF000) {
          unsigned int v87 = 61440;
        }
        if (v87 <= 0x1000) {
          unsigned int v87 = 4096;
        }
        if (v88 >= 0xF000) {
          unsigned int v88 = 61440;
        }
        if (v88 <= 0x1000) {
          unsigned int v88 = 4096;
        }
        if (v89 >= 0xF000) {
          unsigned int v89 = 61440;
        }
        if (v89 <= 0x1000) {
          int v90 = 4096;
        }
        else {
          int v90 = v89;
        }
        unsigned int v91 = v16[2];
        unsigned int v92 = v16[3];
        unsigned int v93 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        unsigned int v94 = *v93;
        unsigned int v95 = v93[1];
        if (v91 >= 0xF000) {
          unsigned int v91 = 61440;
        }
        if (v91 <= 0x1000) {
          unsigned int v91 = 4096;
        }
        if (v92 >= 0xF000) {
          unsigned int v92 = 61440;
        }
        if (v92 <= 0x1000) {
          unsigned int v92 = 4096;
        }
        if (v94 >= 0xF000) {
          unsigned int v94 = 61440;
        }
        if (v94 <= 0x1000) {
          unsigned int v94 = 4096;
        }
        unsigned int v96 = -16773120 - v86 + (v86 << 12);
        if (v95 >= 0xF000) {
          unsigned int v95 = 61440;
        }
        if (v95 <= 0x1000) {
          int v97 = 4096;
        }
        else {
          int v97 = v95;
        }
        int v84 = v16 + 4;
        *unint64_t v23 = (4
              * (((613566757 * (unint64_t)((-16773120 - v88 + (v88 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)(v96 >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v91 + (v91 << 12)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-16773120 - v94 + (v94 << 12)) >> 13)) >> 32))
              + 8) & 0xFFF0;
        v23[1] = (4
                * (((613566757 * (unint64_t)((-16773120 - v90 + (v90 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v87 + (v87 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v92 + (v92 << 12)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-16773120 - v97 + (v97 << 12)) >> 13)) >> 32))
                + 8) & 0xFFF0;
        unsigned int v85 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v98 = 0;
        unsigned int v99 = v84 + 2;
        do
        {
          unsigned int v100 = *(v99 - 2);
          unsigned int v101 = (unsigned __int16 *)((char *)v99 + v15);
          if (v100 >= 0xF000) {
            unsigned int v100 = 61440;
          }
          if (v100 <= 0x1000) {
            int v102 = 4096;
          }
          else {
            int v102 = v100;
          }
          if (*(v99 - 1) >= 0xF000u) {
            unsigned int v103 = 61440;
          }
          else {
            unsigned int v103 = *(v99 - 1);
          }
          if (v103 <= 0x1000) {
            int v104 = 4096;
          }
          else {
            int v104 = v103;
          }
          if (*(unsigned __int16 *)((char *)v99 + v15 - 4) >= 0xF000u) {
            unsigned int v105 = 61440;
          }
          else {
            unsigned int v105 = *(unsigned __int16 *)((char *)v99 + v15 - 4);
          }
          if (v105 <= 0x1000) {
            int v106 = 4096;
          }
          else {
            int v106 = v105;
          }
          if (*(unsigned __int16 *)((char *)v99 + v15 - 2) >= 0xF000u) {
            unsigned int v107 = 61440;
          }
          else {
            unsigned int v107 = *(unsigned __int16 *)((char *)v99 + v15 - 2);
          }
          if (v107 <= 0x1000) {
            int v108 = 4096;
          }
          else {
            int v108 = v107;
          }
          unsigned int v109 = *v99;
          unsigned int v110 = *v101;
          if (v109 >= 0xF000) {
            unsigned int v109 = 61440;
          }
          unsigned int v111 = v101[1];
          if (v109 <= 0x1000) {
            int v112 = 4096;
          }
          else {
            int v112 = v109;
          }
          if (v99[1] >= 0xF000u) {
            unsigned int v113 = 61440;
          }
          else {
            unsigned int v113 = v99[1];
          }
          if (v113 <= 0x1000) {
            int v114 = 4096;
          }
          else {
            int v114 = v113;
          }
          if (v110 >= 0xF000) {
            unsigned int v115 = 61440;
          }
          else {
            unsigned int v115 = v110;
          }
          if (v115 <= 0x1000) {
            int v116 = 4096;
          }
          else {
            int v116 = v115;
          }
          unsigned int v117 = &v85[v98];
          unsigned int v118 = -16773120 - v102 + (v102 << 12);
          if (v111 >= 0xF000) {
            unsigned int v111 = 61440;
          }
          unint64_t v119 = (613566757 * (unint64_t)(v118 >> 13)) >> 32;
          unint64_t v120 = (613566757 * (unint64_t)((-16773120 - v104 + (v104 << 12)) >> 13)) >> 32;
          unint64_t v121 = (613566757 * (unint64_t)((-16773120 - v106 + (v106 << 12)) >> 13)) >> 32;
          unint64_t v122 = (613566757 * (unint64_t)((-16773120 - v108 + (v108 << 12)) >> 13)) >> 32;
          if (v111 <= 0x1000) {
            unsigned int v111 = 4096;
          }
          *unsigned int v117 = (4
                 * (v121
                  + v119
                  + ((613566757 * (unint64_t)((-16773120 - v112 + (v112 << 12)) >> 13)) >> 32)
                  + ((613566757 * (unint64_t)((-16773120 - v116 + (v116 << 12)) >> 13)) >> 32))
                 + 8) & 0xFFF0;
          v117[1] = (4
                   * (v122
                    + v120
                    + ((613566757 * (unint64_t)((-16773120 - v114 + (v114 << 12)) >> 13)) >> 32)
                    + ((613566757 * (unint64_t)((-16773120 - v111 + (v111 << 12)) >> 13)) >> 32))
                   + 8) & 0xFFF0;
          v98 += 2;
          v99 += 4;
        }
        while (v98 < v38);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v82 += 2;
    }
    while (v82 < v83);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_tf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * (v10 + v9);
    uint64_t v31 = *a8;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v30 + v32;
    uint64_t v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = 16 * ((-16773120 - v36 + (v36 << 12)) / 0xDB00);
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v41 = *v16;
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        int v42 = 4096;
      }
      else {
        int v42 = v41;
      }
      if (v16[1] >= 0xF000u) {
        unsigned int v43 = 61440;
      }
      else {
        unsigned int v43 = v16[1];
      }
      if (v43 <= 0x1000) {
        int v44 = 4096;
      }
      else {
        int v44 = v43;
      }
      unsigned int v39 = v16 + 4;
      *unint64_t v23 = 16 * ((613566757 * (unint64_t)((-16773120 - v42 + (v42 << 12)) >> 13)) >> 32);
      v23[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v44 + (v44 << 12)) >> 13)) >> 32);
      __int16 v40 = v23 + 2;
    }
    else
    {
      unsigned int v39 = v16;
      __int16 v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v45 = 0;
      do
      {
        int v46 = &v40[v45];
        unsigned int v47 = *v39;
        unsigned int v48 = v39[1];
        if (v47 >= 0xF000) {
          unsigned int v47 = 61440;
        }
        if (v47 <= 0x1000) {
          unsigned int v47 = 4096;
        }
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          unsigned int v48 = 4096;
        }
        *int v46 = 16 * ((613566757 * (unint64_t)((-16773120 - v47 + (v47 << 12)) >> 13)) >> 32);
        v46[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v48 + (v48 << 12)) >> 13)) >> 32);
        v45 += 2;
        v39 += 4;
      }
      while (v45 < v38);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v27 - v37;
    uint64_t v51 = 2 * v15;
    do
    {
      unsigned int v52 = v16;
      int v53 = v23;
      if (v9)
      {
        unsigned int v54 = *v16;
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          int v55 = 4096;
        }
        else {
          int v55 = v54;
        }
        if (v16[1] >= 0xF000u) {
          unsigned int v56 = 61440;
        }
        else {
          unsigned int v56 = v16[1];
        }
        if (v56 <= 0x1000) {
          int v57 = 4096;
        }
        else {
          int v57 = v56;
        }
        unsigned int v52 = v16 + 4;
        *unint64_t v23 = 16 * ((613566757 * (unint64_t)((-16773120 - v55 + (v55 << 12)) >> 13)) >> 32);
        v23[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v57 + (v57 << 12)) >> 13)) >> 32);
        int v53 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v58 = 0;
        do
        {
          unsigned int v59 = &v53[v58];
          unsigned int v60 = *v52;
          unsigned int v61 = v52[1];
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          if (v61 >= 0xF000) {
            unsigned int v61 = 61440;
          }
          if (v61 <= 0x1000) {
            unsigned int v61 = 4096;
          }
          *unsigned int v59 = 16 * ((613566757 * (unint64_t)((-16773120 - v60 + (v60 << 12)) >> 13)) >> 32);
          v59[1] = 16 * ((613566757 * (unint64_t)((-16773120 - v61 + (v61 << 12)) >> 13)) >> 32);
          v58 += 2;
          v52 += 4;
        }
        while (v58 < v38);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v51);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_s4as_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v14 + 4 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = a4[2];
    uint64_t v25 = v21 + 2 * v15;
    uint64_t v26 = v22 + 2 * v15;
    uint64_t v27 = a3[2] + v24 * v8 + 2 * v9;
    uint64_t v28 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v25 + 2 * i) = *(_WORD *)(v27 + 2 * i);
          *(_WORD *)(v26 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v30 = v8 & 1;
  if (v11 >= v30) {
    uint64_t v31 = v8 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  unint64_t v33 = v9 & 1;
  if (v10 >= v33) {
    unint64_t v34 = v33;
  }
  else {
    unint64_t v34 = 0;
  }
  unint64_t v35 = v10 - v34;
  if (v8)
  {
    if (v32)
    {
      unsigned int v36 = v13 + 2;
      __int16 v38 = v13[1] & 0xFFC0;
      *uint64_t v17 = *v13 & 0xFFC0;
      v17[1] = v38;
      unint64_t v37 = v17 + 2;
    }
    else
    {
      unsigned int v36 = v13;
      unint64_t v37 = v17;
    }
    if (v10 == v34)
    {
      unint64_t v39 = 0;
    }
    else
    {
      unint64_t v40 = v10 - v34;
      do
      {
        __int16 v41 = *v36;
        __int16 v42 = v36[1];
        v36 += 2;
        *unint64_t v37 = v41 & 0xFFC0;
        v37[1] = v42 & 0xFFC0;
        v37 += 2;
        --v40;
      }
      while (v40);
      unint64_t v39 = v10 - v34;
    }
    if (v39 + v33 < v10)
    {
      __int16 v43 = *v36 & 0xFFC0;
      __int16 v44 = v36[1] & 0xFFC0;
      *unint64_t v37 = v43;
      v37[1] = v44;
    }
    unint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v31)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v11 - v31;
    do
    {
      unsigned int v47 = v13;
      unsigned int v48 = v17;
      if (v32)
      {
        unsigned int v47 = v13 + 2;
        __int16 v49 = v13[1] & 0xFFC0;
        *uint64_t v17 = *v13 & 0xFFC0;
        v17[1] = v49;
        unsigned int v48 = v17 + 2;
      }
      if (v10 == v34)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v34;
        do
        {
          __int16 v52 = *v47;
          __int16 v53 = v47[1];
          v47 += 2;
          _WORD *v48 = v52 & 0xFFC0;
          v48[1] = v53 & 0xFFC0;
          v48 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v34;
      }
      if (v50 + v33 < v10)
      {
        __int16 v54 = *v47 & 0xFFC0;
        __int16 v55 = v47[1] & 0xFFC0;
        _WORD *v48 = v54;
        v48[1] = v55;
      }
      unint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v30 < v11)
  {
    if (v32)
    {
      __int16 v56 = *v13;
      __int16 v57 = v13[1];
      v13 += 2;
      *uint64_t v17 = v56 & 0xFFC0;
      v17[1] = v57 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v34)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v34;
      do
      {
        __int16 v59 = *v13;
        __int16 v60 = v13[1];
        v13 += 2;
        *uint64_t v17 = v59 & 0xFFC0;
        v17[1] = v60 & 0xFFC0;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v35 + v33 < v10)
    {
      __int16 v61 = *v13 & 0xFFC0;
      __int16 v62 = v13[1] & 0xFFC0;
      *uint64_t v17 = v61;
      v17[1] = v62;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_x444(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(_WORD *)(v21 + 2 * i) = *(_WORD *)(v22 + 2 * i) & 0xFFC0;
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      unint64_t v30 = v13 + 2;
      __int16 v32 = v13[1] & 0xFFC0;
      *uint64_t v17 = *v13 & 0xFFC0;
      v17[1] = v32;
      uint64_t v31 = v17 + 2;
    }
    else
    {
      unint64_t v30 = v13;
      uint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        __int16 v35 = *v30;
        __int16 v36 = v30[1];
        v30 += 2;
        _WORD *v31 = v35 & 0xFFC0;
        v31[1] = v36 & 0xFFC0;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      __int16 v37 = *v30 & 0xFFC0;
      __int16 v38 = v30[1] & 0xFFC0;
      _WORD *v31 = v37;
      v31[1] = v38;
    }
    unint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      __int16 v41 = v13;
      __int16 v42 = v17;
      if (v26)
      {
        __int16 v41 = v13 + 2;
        __int16 v43 = v13[1] & 0xFFC0;
        *uint64_t v17 = *v13 & 0xFFC0;
        v17[1] = v43;
        __int16 v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          __int16 v46 = *v41;
          __int16 v47 = v41[1];
          v41 += 2;
          *__int16 v42 = v46 & 0xFFC0;
          v42[1] = v47 & 0xFFC0;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        __int16 v48 = *v41 & 0xFFC0;
        __int16 v49 = v41[1] & 0xFFC0;
        *__int16 v42 = v48;
        v42[1] = v49;
      }
      unint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      __int16 v50 = *v13;
      __int16 v51 = v13[1];
      v13 += 2;
      *uint64_t v17 = v50 & 0xFFC0;
      v17[1] = v51 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        __int16 v53 = *v13;
        __int16 v54 = v13[1];
        v13 += 2;
        *uint64_t v17 = v53 & 0xFFC0;
        v17[1] = v54 & 0xFFC0;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      __int16 v55 = *v13 & 0xFFC0;
      __int16 v56 = v13[1] & 0xFFC0;
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_xf44(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  unint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v18 = a6[3];
  }
  else {
    unint64_t v18 = v11;
  }
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v23 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v25 = *(unsigned __int16 *)(v23 + 2 * i);
          if (v25 >= 0xEB00) {
            unsigned int v25 = 60160;
          }
          if (v25 <= 0x1000) {
            unsigned int v25 = 4096;
          }
          *(_WORD *)(v22 + 2 * i) = (unsigned __int16)((-4190208 - v25 + (v25 << 10)) / 0xDB00) << 6;
        }
      }
      v23 += v20;
      v22 += v21;
      ++v19;
    }
    while (v19 != v18);
  }
  unint64_t v26 = v8 & 1;
  if (v18 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unsigned int v34 = *v13;
      unsigned int v35 = v13[1];
      if (v34 >= 0xF000) {
        unsigned int v34 = 61440;
      }
      if (v34 <= 0x1000) {
        unsigned int v34 = 4096;
      }
      if (v35 >= 0xF000) {
        unsigned int v35 = 61440;
      }
      if (v35 <= 0x1000) {
        int v36 = 4096;
      }
      else {
        int v36 = v35;
      }
      __int16 v32 = v13 + 2;
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v34 + (v34 << 10)) >> 13)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v36 + (v36 << 10)) >> 13)) >> 32) << 6;
      unint64_t v33 = v17 + 2;
    }
    else
    {
      __int16 v32 = v13;
      unint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v37 = 0;
    }
    else
    {
      unint64_t v38 = v10 - v30;
      do
      {
        unsigned int v39 = *v32;
        unsigned int v40 = v32[1];
        if (v39 >= 0xF000) {
          unsigned int v39 = 61440;
        }
        if (v39 <= 0x1000) {
          unsigned int v39 = 4096;
        }
        if (v40 >= 0xF000) {
          unsigned int v40 = 61440;
        }
        if (v40 <= 0x1000) {
          unsigned int v40 = 4096;
        }
        v32 += 2;
        *unint64_t v33 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v39 + (v39 << 10)) >> 13)) >> 32) << 6;
        v33[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v40 + (v40 << 10)) >> 13)) >> 32) << 6;
        v33 += 2;
        --v38;
      }
      while (v38);
      unint64_t v37 = v10 - v30;
    }
    if (v37 + v29 < v10)
    {
      unsigned int v41 = *v32;
      unsigned int v42 = v32[1];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        unsigned int v42 = 4096;
      }
      *unint64_t v33 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v41 + (v41 << 10)) >> 13)) >> 32) << 6;
      v33[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v42 + (v42 << 10)) >> 13)) >> 32) << 6;
    }
    unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v18 == v27)
  {
    unint64_t v43 = 0;
  }
  else
  {
    uint64_t v44 = 0;
    unint64_t v43 = v18 - v27;
    do
    {
      unint64_t v45 = v13;
      __int16 v46 = v17;
      if (v28)
      {
        unsigned int v47 = *v13;
        unsigned int v48 = v13[1];
        if (v47 >= 0xF000) {
          unsigned int v47 = 61440;
        }
        if (v47 <= 0x1000) {
          unsigned int v47 = 4096;
        }
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          int v49 = 4096;
        }
        else {
          int v49 = v48;
        }
        unint64_t v45 = v13 + 2;
        *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v47 + (v47 << 10)) >> 13)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v49 + (v49 << 10)) >> 13)) >> 32) << 6;
        __int16 v46 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v50 = 0;
      }
      else
      {
        unint64_t v51 = v10 - v30;
        do
        {
          unsigned int v52 = *v45;
          unsigned int v53 = v45[1];
          if (v52 >= 0xF000) {
            unsigned int v52 = 61440;
          }
          if (v52 <= 0x1000) {
            unsigned int v52 = 4096;
          }
          if (v53 >= 0xF000) {
            unsigned int v53 = 61440;
          }
          if (v53 <= 0x1000) {
            unsigned int v53 = 4096;
          }
          v45 += 2;
          *__int16 v46 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v52 + (v52 << 10)) >> 13)) >> 32) << 6;
          v46[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v53 + (v53 << 10)) >> 13)) >> 32) << 6;
          v46 += 2;
          --v51;
        }
        while (v51);
        unint64_t v50 = v10 - v30;
      }
      if (v50 + v29 < v10)
      {
        unsigned int v54 = *v45;
        unsigned int v55 = v45[1];
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          unsigned int v54 = 4096;
        }
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          unsigned int v55 = 4096;
        }
        *__int16 v46 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v54 + (v54 << 10)) >> 13)) >> 32) << 6;
        v46[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v55 + (v55 << 10)) >> 13)) >> 32) << 6;
      }
      unint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v44;
    }
    while (v44 != v43);
  }
  if (v43 + v26 < v18)
  {
    if (v28)
    {
      unsigned int v56 = *v13;
      unsigned int v57 = v13[1];
      if (v56 >= 0xF000) {
        unsigned int v56 = 61440;
      }
      if (v56 <= 0x1000) {
        unsigned int v56 = 4096;
      }
      if (v57 >= 0xF000) {
        unsigned int v57 = 61440;
      }
      if (v57 <= 0x1000) {
        unsigned int v57 = 4096;
      }
      v13 += 2;
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v57 + (v57 << 10)) >> 13)) >> 32) << 6;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v58 = v10 - v30;
      do
      {
        unsigned int v59 = *v13;
        unsigned int v60 = v13[1];
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          unsigned int v59 = 4096;
        }
        if (v60 >= 0xF000) {
          unsigned int v60 = 61440;
        }
        if (v60 <= 0x1000) {
          unsigned int v60 = 4096;
        }
        v13 += 2;
        *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v59 + (v59 << 10)) >> 13)) >> 32) << 6;
        v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v60 + (v60 << 10)) >> 13)) >> 32) << 6;
        v17 += 2;
        --v58;
      }
      while (v58);
    }
    if (v31 + v29 < v10)
    {
      unsigned int v61 = *v13;
      unsigned int v62 = v13[1];
      if (v61 >= 0xF000) {
        unsigned int v61 = 61440;
      }
      if (v61 <= 0x1000) {
        unsigned int v61 = 4096;
      }
      if (v62 >= 0xF000) {
        unsigned int v62 = 61440;
      }
      if (v62 <= 0x1000) {
        unsigned int v62 = 4096;
      }
      *uint64_t v17 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32) << 6;
      v17[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v62 + (v62 << 10)) >> 13)) >> 32) << 6;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_s4as_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + 2 * v11;
    uint64_t v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      unint64_t v38 = v14 + 4;
      int v40 = (v14[3] >> 6) + (v14[1] >> 6);
      *uint64_t v19 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
      v19[1] = (32 * v40 + 32) & 0xFFC0;
      unsigned int v39 = v19 + 2;
    }
    else
    {
      unint64_t v38 = v14;
      unsigned int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        int v43 = ((unsigned __int16)v38[3] >> 6) + ((unsigned __int16)v38[1] >> 6);
        *unsigned int v42 = (32 * ((v38[2] >> 6) + (*v38 >> 6)) + 32) & 0xFFC0;
        v42[1] = (32 * v43 + 32) & 0xFFC0;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      __int16 v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        __int16 v46 = v14 + 4;
        int v48 = (v14[3] >> 6) + (v14[1] >> 6);
        *uint64_t v19 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v19[1] = (32 * v48 + 32) & 0xFFC0;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          int v51 = ((unsigned __int16)v46[3] >> 6) + ((unsigned __int16)v46[1] >> 6);
          _WORD *v50 = (32 * ((v46[2] >> 6) + (*v46 >> 6)) + 32) & 0xFFC0;
          v50[1] = (32 * v51 + 32) & 0xFFC0;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      unsigned int v52 = *v14;
      unsigned int v53 = v14[1];
      unsigned int v54 = v14[2];
      unsigned int v55 = v14[3];
      v14 += 4;
      *uint64_t v19 = (32 * ((v54 >> 6) + (v52 >> 6)) + 32) & 0xFFC0;
      v19[1] = (32 * ((v55 >> 6) + (v53 >> 6)) + 32) & 0xFFC0;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v56 = 0;
      do
      {
        unsigned int v57 = &v19[v56];
        int v58 = (v14[3] >> 6) + (v14[1] >> 6);
        _WORD *v57 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v57[1] = (32 * v58 + 32) & 0xFFC0;
        v56 += 2;
        v14 += 4;
      }
      while (v56 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_s4as_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = 2 * v15;
  uint64_t v18 = a8[1];
  uint64_t v19 = (_WORD *)(a7[1] + v18 * v16 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v20 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  if (v20 >= v21) {
    unint64_t v20 = v21;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *a8;
    uint64_t v24 = a8[2];
    uint64_t v25 = a7[2] + v24 * v16;
    uint64_t v26 = *a7 + *a8 * v16;
    uint64_t v27 = *a4;
    uint64_t v28 = a4[2];
    uint64_t v29 = v25 + v17;
    uint64_t v30 = v26 + v17;
    uint64_t v31 = a3[2] + v28 * v12 + 2 * v11;
    uint64_t v32 = *a3 + v27 * v12 + 2 * v11;
    do
    {
      if (v20)
      {
        for (uint64_t i = 0; i != v20; ++i)
        {
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v31 + 2 * i);
          *(_WORD *)(v30 + 2 * i) = *(_WORD *)(v32 + 2 * i) & 0xFFC0;
        }
      }
      v32 += v27;
      v30 += v23;
      v31 += v28;
      v29 += v24;
      ++v22;
    }
    while (v22 != v8);
  }
  unint64_t v34 = v12 & 1;
  if (v8 >= v34) {
    uint64_t v35 = v12 & 1;
  }
  else {
    uint64_t v35 = 0;
  }
  char v36 = v9;
  if (v20 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v20 - v10;
  if (v12)
  {
    if (v36)
    {
      unint64_t v38 = v14 + 4;
      __int16 v40 = v14[1] & 0xFFC0;
      *uint64_t v19 = *v14 & 0xFFC0;
      v19[1] = v40;
      unsigned int v39 = v19 + 2;
    }
    else
    {
      unint64_t v38 = v14;
      unsigned int v39 = v19;
    }
    if (v20 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = v38[1] & 0xFFC0;
        *unsigned int v42 = *v38 & 0xFFC0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v19 = (_WORD *)((char *)v19 + v18);
  }
  if (v8 == v35)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v35;
    do
    {
      __int16 v46 = v14;
      unsigned int v47 = v19;
      if (v36)
      {
        __int16 v46 = v14 + 4;
        __int16 v48 = v14[1] & 0xFFC0;
        *uint64_t v19 = *v14 & 0xFFC0;
        v19[1] = v48;
        unsigned int v47 = v19 + 2;
      }
      if (v20 != v10)
      {
        unint64_t v49 = 0;
        do
        {
          unint64_t v50 = &v47[v49];
          __int16 v51 = v46[1] & 0xFFC0;
          _WORD *v50 = *v46 & 0xFFC0;
          v50[1] = v51;
          v49 += 2;
          v46 += 4;
        }
        while (v49 < v37);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v19 = (_WORD *)((char *)v19 + v18);
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v34 < v8)
  {
    if (v36)
    {
      __int16 v52 = *v14;
      __int16 v53 = v14[1];
      v14 += 4;
      *uint64_t v19 = v52 & 0xFFC0;
      v19[1] = v53 & 0xFFC0;
      v19 += 2;
    }
    if (v20 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        unsigned int v55 = &v19[v54];
        __int16 v56 = v14[1] & 0xFFC0;
        *unsigned int v55 = *v14 & 0xFFC0;
        v55[1] = v56;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v37);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      int v36 = (v14[3] >> 6) + (v14[1] >> 6);
      *unint64_t v21 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
      v21[1] = (32 * v36 + 32) & 0xFFC0;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = &v35[v37];
        int v39 = ((unsigned __int16)v34[3] >> 6) + ((unsigned __int16)v34[1] >> 6);
        *unint64_t v38 = (32 * ((v34[2] >> 6) + (*v34 >> 6)) + 32) & 0xFFC0;
        v38[1] = (32 * v39 + 32) & 0xFFC0;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v9 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        int v44 = (v14[3] >> 6) + (v14[1] >> 6);
        *unint64_t v21 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v21[1] = (32 * v44 + 32) & 0xFFC0;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          int v47 = ((unsigned __int16)v42[3] >> 6) + ((unsigned __int16)v42[1] >> 6);
          *__int16 v46 = (32 * ((v42[2] >> 6) + (*v42 >> 6)) + 32) & 0xFFC0;
          v46[1] = (32 * v47 + 32) & 0xFFC0;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v48 = *v14;
      unsigned int v49 = v14[1];
      unsigned int v50 = v14[2];
      unsigned int v51 = v14[3];
      v14 += 4;
      *unint64_t v21 = (32 * ((v50 >> 6) + (v48 >> 6)) + 32) & 0xFFC0;
      v21[1] = (32 * ((v51 >> 6) + (v49 >> 6)) + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        __int16 v53 = &v21[v52];
        int v54 = (v14[3] >> 6) + (v14[1] >> 6);
        *__int16 v53 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v53[1] = (32 * v54 + 32) & 0xFFC0;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_x422(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(_WORD *)(v27 + 2 * i) = *(_WORD *)(v28 + 2 * i) & 0xFFC0;
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v32)
    {
      unint64_t v34 = v14 + 4;
      __int16 v36 = v14[1] & 0xFFC0;
      *unint64_t v21 = *v14 & 0xFFC0;
      v21[1] = v36;
      uint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v14;
      uint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        unint64_t v38 = &v35[v37];
        __int16 v39 = v34[1] & 0xFFC0;
        *unint64_t v38 = *v34 & 0xFFC0;
        v38[1] = v39;
        v37 += 2;
        v34 += 4;
      }
      while (v37 < v33);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v31)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v8 - v31;
    do
    {
      unsigned int v42 = v14;
      __int16 v43 = v21;
      if (v32)
      {
        unsigned int v42 = v14 + 4;
        __int16 v44 = v14[1] & 0xFFC0;
        *unint64_t v21 = *v14 & 0xFFC0;
        v21[1] = v44;
        __int16 v43 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v45 = 0;
        do
        {
          __int16 v46 = &v43[v45];
          __int16 v47 = v42[1] & 0xFFC0;
          *__int16 v46 = *v42 & 0xFFC0;
          v46[1] = v47;
          v45 += 2;
          v42 += 4;
        }
        while (v45 < v33);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v30 < v8)
  {
    if (v32)
    {
      __int16 v48 = *v14;
      __int16 v49 = v14[1];
      v14 += 4;
      *unint64_t v21 = v48 & 0xFFC0;
      v21[1] = v49 & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v50 = 0;
      do
      {
        unsigned int v51 = &v21[v50];
        __int16 v52 = v14[1] & 0xFFC0;
        *unsigned int v51 = *v14 & 0xFFC0;
        v51[1] = v52;
        v50 += 2;
        v14 += 4;
      }
      while (v50 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i);
          if (v30 >= 0xEB00) {
            unsigned int v30 = 60160;
          }
          if (v30 <= 0x1000) {
            unsigned int v30 = 4096;
          }
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)((-4190208 - v30 + (v30 << 10)) / 0xDB00) << 6;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF000) {
        unsigned int v37 = 61440;
      }
      if (v37 <= 0x1000) {
        int v38 = 4096;
      }
      else {
        int v38 = v37;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v39 = 61440;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x1000) {
        int v40 = 4096;
      }
      else {
        int v40 = v39;
      }
      unsigned int v41 = v14[2];
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        int v42 = 4096;
      }
      else {
        int v42 = v41;
      }
      if (v14[3] >= 0xF000u) {
        unsigned int v43 = 61440;
      }
      else {
        unsigned int v43 = v14[3];
      }
      if (v43 <= 0x1000) {
        int v44 = 4096;
      }
      else {
        int v44 = v43;
      }
      uint64_t v35 = v14 + 4;
      *unint64_t v21 = (32
            * (((613566757 * (unint64_t)((-4190208 - v42 + (v42 << 10)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-4190208 - v38 + (v38 << 10)) >> 13)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((-4190208 - v44 + (v44 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v40 + (v40 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v45 = 0;
      do
      {
        __int16 v46 = &v36[v45];
        unsigned int v47 = *v35;
        unsigned int v48 = v35[1];
        if (v47 >= 0xF000) {
          unsigned int v47 = 61440;
        }
        if (v47 <= 0x1000) {
          unsigned int v47 = 4096;
        }
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          unsigned int v48 = 4096;
        }
        unsigned int v49 = v35[2];
        unsigned int v50 = v35[3];
        if (v49 >= 0xF000) {
          unsigned int v49 = 61440;
        }
        if (v49 <= 0x1000) {
          unsigned int v49 = 4096;
        }
        if (v50 >= 0xF000) {
          unsigned int v50 = 61440;
        }
        if (v50 <= 0x1000) {
          unsigned int v50 = 4096;
        }
        *__int16 v46 = (32
              * (((613566757 * (unint64_t)((-4190208 - v49 + (v49 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v47 + (v47 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
        v46[1] = (32
                * (((613566757 * (unint64_t)((-4190208 - v50 + (v50 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v48 + (v48 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
        v45 += 2;
        v35 += 4;
      }
      while (v45 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v51 = 0;
  }
  else
  {
    uint64_t v52 = 0;
    unint64_t v51 = v9 - v32;
    do
    {
      __int16 v53 = v14;
      int v54 = v21;
      if (v33)
      {
        unsigned int v55 = *v14;
        if (v55 >= 0xF000) {
          unsigned int v55 = 61440;
        }
        if (v55 <= 0x1000) {
          int v56 = 4096;
        }
        else {
          int v56 = v55;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v57 = 61440;
        }
        else {
          unsigned int v57 = v14[1];
        }
        if (v57 <= 0x1000) {
          int v58 = 4096;
        }
        else {
          int v58 = v57;
        }
        unsigned int v59 = v14[2];
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          int v60 = 4096;
        }
        else {
          int v60 = v59;
        }
        if (v14[3] >= 0xF000u) {
          unsigned int v61 = 61440;
        }
        else {
          unsigned int v61 = v14[3];
        }
        if (v61 <= 0x1000) {
          int v62 = 4096;
        }
        else {
          int v62 = v61;
        }
        __int16 v53 = v14 + 4;
        *unint64_t v21 = (32
              * (((613566757 * (unint64_t)((-4190208 - v60 + (v60 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
        v21[1] = (32
                * (((613566757 * (unint64_t)((-4190208 - v62 + (v62 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v58 + (v58 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
        int v54 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v63 = 0;
        do
        {
          unsigned int v64 = &v54[v63];
          unsigned int v65 = *v53;
          unsigned int v66 = v53[1];
          if (v65 >= 0xF000) {
            unsigned int v65 = 61440;
          }
          if (v65 <= 0x1000) {
            unsigned int v65 = 4096;
          }
          if (v66 >= 0xF000) {
            unsigned int v66 = 61440;
          }
          if (v66 <= 0x1000) {
            unsigned int v66 = 4096;
          }
          unsigned int v67 = v53[2];
          unsigned int v68 = v53[3];
          if (v67 >= 0xF000) {
            unsigned int v67 = 61440;
          }
          if (v67 <= 0x1000) {
            unsigned int v67 = 4096;
          }
          if (v68 >= 0xF000) {
            unsigned int v68 = 61440;
          }
          if (v68 <= 0x1000) {
            unsigned int v68 = 4096;
          }
          *unsigned int v64 = (32
                * (((613566757 * (unint64_t)((-4190208 - v67 + (v67 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v65 + (v65 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
          v64[1] = (32
                  * (((613566757 * (unint64_t)((-4190208 - v68 + (v68 << 10)) >> 13)) >> 32)
                   + ((613566757 * (unint64_t)((-4190208 - v66 + (v66 << 10)) >> 13)) >> 32))
                  + 32) & 0xFFC0;
          v63 += 2;
          v53 += 4;
        }
        while (v63 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v52;
    }
    while (v52 != v51);
  }
  if (v51 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v69 = *v14;
      unsigned int v70 = v14[1];
      if (v69 >= 0xF000) {
        unsigned int v69 = 61440;
      }
      if (v69 <= 0x1000) {
        unsigned int v69 = 4096;
      }
      if (v70 >= 0xF000) {
        unsigned int v70 = 61440;
      }
      if (v70 <= 0x1000) {
        unsigned int v70 = 4096;
      }
      unsigned int v71 = v14[2];
      if (v71 >= 0xF000) {
        unsigned int v71 = 61440;
      }
      if (v71 <= 0x1000) {
        unsigned int v71 = 4096;
      }
      if (v14[3] >= 0xF000u) {
        unsigned int v72 = 61440;
      }
      else {
        unsigned int v72 = v14[3];
      }
      if (v72 <= 0x1000) {
        unsigned int v72 = 4096;
      }
      v14 += 4;
      *unint64_t v21 = (32
            * (((613566757 * (unint64_t)((-4190208 - v71 + (v71 << 10)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-4190208 - v69 + (v69 << 10)) >> 13)) >> 32))
            + 32) & 0xFFC0;
      v21[1] = (32
              * (((613566757 * (unint64_t)((-4190208 - v72 + (v72 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v70 + (v70 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v73 = 0;
      do
      {
        unsigned int v74 = &v21[v73];
        unsigned int v75 = *v14;
        unsigned int v76 = v14[1];
        if (v75 >= 0xF000) {
          unsigned int v75 = 61440;
        }
        if (v75 <= 0x1000) {
          unsigned int v75 = 4096;
        }
        if (v76 >= 0xF000) {
          unsigned int v76 = 61440;
        }
        if (v76 <= 0x1000) {
          unsigned int v76 = 4096;
        }
        unsigned int v77 = v14[2];
        unsigned int v78 = v14[3];
        if (v77 >= 0xF000) {
          unsigned int v77 = 61440;
        }
        if (v77 <= 0x1000) {
          unsigned int v77 = 4096;
        }
        if (v78 >= 0xF000) {
          unsigned int v78 = 61440;
        }
        if (v78 <= 0x1000) {
          unsigned int v78 = 4096;
        }
        *unsigned int v74 = (32
              * (((613566757 * (unint64_t)((-4190208 - v77 + (v77 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v75 + (v75 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
        v74[1] = (32
                * (((613566757 * (unint64_t)((-4190208 - v78 + (v78 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v76 + (v76 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
        v73 += 2;
        v14 += 4;
      }
      while (v73 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_xf22(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  unint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = *a7 + *a8 * v18 + v19;
    uint64_t v28 = *a3 + v25 * v12 + 2 * (v10 + v8);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v30 = *(unsigned __int16 *)(v28 + 2 * i);
          if (v30 >= 0xEB00) {
            unsigned int v30 = 60160;
          }
          if (v30 <= 0x1000) {
            unsigned int v30 = 4096;
          }
          *(_WORD *)(v27 + 2 * i) = (unsigned __int16)((-4190208 - v30 + (v30 << 10)) / 0xDB00) << 6;
        }
      }
      v28 += v25;
      v27 += v26;
      ++v24;
    }
    while (v24 != v9);
  }
  unint64_t v31 = v12 & 1;
  if (v9 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v22 - v10;
  if (v12)
  {
    if (v33)
    {
      unsigned int v37 = *v14;
      if (v37 >= 0xF000) {
        unsigned int v37 = 61440;
      }
      if (v37 <= 0x1000) {
        int v38 = 4096;
      }
      else {
        int v38 = v37;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v39 = 61440;
      }
      else {
        unsigned int v39 = v14[1];
      }
      if (v39 <= 0x1000) {
        int v40 = 4096;
      }
      else {
        int v40 = v39;
      }
      uint64_t v35 = v14 + 4;
      *unint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v38 + (v38 << 10)) >> 13)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v40 + (v40 << 10)) >> 13)) >> 32) << 6;
      __int16 v36 = v21 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      __int16 v36 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        int v42 = &v36[v41];
        unsigned int v43 = *v35;
        unsigned int v44 = v35[1];
        if (v43 >= 0xF000) {
          unsigned int v43 = 61440;
        }
        if (v43 <= 0x1000) {
          unsigned int v43 = 4096;
        }
        if (v44 >= 0xF000) {
          unsigned int v44 = 61440;
        }
        if (v44 <= 0x1000) {
          unsigned int v44 = 4096;
        }
        *int v42 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v43 + (v43 << 10)) >> 13)) >> 32) << 6;
        v42[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v44 + (v44 << 10)) >> 13)) >> 32) << 6;
        v41 += 2;
        v35 += 4;
      }
      while (v41 < v34);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    unint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v9 == v32)
  {
    unint64_t v45 = 0;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v45 = v9 - v32;
    do
    {
      unsigned int v47 = v14;
      unsigned int v48 = v21;
      if (v33)
      {
        unsigned int v49 = *v14;
        if (v49 >= 0xF000) {
          unsigned int v49 = 61440;
        }
        if (v49 <= 0x1000) {
          int v50 = 4096;
        }
        else {
          int v50 = v49;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v51 = 61440;
        }
        else {
          unsigned int v51 = v14[1];
        }
        if (v51 <= 0x1000) {
          int v52 = 4096;
        }
        else {
          int v52 = v51;
        }
        unsigned int v47 = v14 + 4;
        *unint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v50 + (v50 << 10)) >> 13)) >> 32) << 6;
        v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v52 + (v52 << 10)) >> 13)) >> 32) << 6;
        unsigned int v48 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v53 = 0;
        do
        {
          int v54 = &v48[v53];
          unsigned int v55 = *v47;
          unsigned int v56 = v47[1];
          if (v55 >= 0xF000) {
            unsigned int v55 = 61440;
          }
          if (v55 <= 0x1000) {
            unsigned int v55 = 4096;
          }
          if (v56 >= 0xF000) {
            unsigned int v56 = 61440;
          }
          if (v56 <= 0x1000) {
            unsigned int v56 = 4096;
          }
          *int v54 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v55 + (v55 << 10)) >> 13)) >> 32) << 6;
          v54[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32) << 6;
          v53 += 2;
          v47 += 4;
        }
        while (v53 < v34);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      unint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v46;
    }
    while (v46 != v45);
  }
  if (v45 + v31 < v9)
  {
    if (v33)
    {
      unsigned int v57 = *v14;
      unsigned int v58 = v14[1];
      if (v57 >= 0xF000) {
        unsigned int v57 = 61440;
      }
      if (v57 <= 0x1000) {
        unsigned int v57 = 4096;
      }
      if (v58 >= 0xF000) {
        unsigned int v58 = 61440;
      }
      if (v58 <= 0x1000) {
        unsigned int v58 = 4096;
      }
      v14 += 4;
      *unint64_t v21 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v57 + (v57 << 10)) >> 13)) >> 32) << 6;
      v21[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v58 + (v58 << 10)) >> 13)) >> 32) << 6;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v59 = 0;
      do
      {
        int v60 = &v21[v59];
        unsigned int v61 = *v14;
        unsigned int v62 = v14[1];
        if (v61 >= 0xF000) {
          unsigned int v61 = 61440;
        }
        if (v61 <= 0x1000) {
          unsigned int v61 = 4096;
        }
        if (v62 >= 0xF000) {
          unsigned int v62 = 61440;
        }
        if (v62 <= 0x1000) {
          unsigned int v62 = 4096;
        }
        *int v60 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32) << 6;
        v60[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v62 + (v62 << 10)) >> 13)) >> 32) << 6;
        v59 += 2;
        v14 += 4;
      }
      while (v59 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * (v10 + v8);
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      int v40 = (_WORD *)((char *)v16 + v15 + 4);
      unsigned int v41 = *v40;
      unsigned int v42 = v40[1];
      int v38 = v16 + 4;
      int v43 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
          + ((unsigned __int16)v16[1] >> 6)
          + ((unsigned __int16)v16[3] >> 6)
          + (v42 >> 6);
      *unint64_t v23 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v41 >> 6)) + 32) & 0xFFC0;
      v23[1] = (16 * v43 + 32) & 0xFFC0;
      unsigned int v39 = v23 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v44 = 0;
      unint64_t v45 = v38 + 2;
      do
      {
        uint64_t v46 = &v39[v44];
        int v47 = (*(unsigned __int16 *)((char *)v45 + v15 - 2) >> 6)
            + ((unsigned __int16)*(v45 - 1) >> 6)
            + ((unsigned __int16)v45[1] >> 6)
            + (*(unsigned __int16 *)((char *)v45 + v15 + 2) >> 6);
        *uint64_t v46 = (16
              * ((*(_WORD *)((char *)v45 + v15 - 4) >> 6)
               + (*(v45 - 2) >> 6)
               + (*v45 >> 6)
               + (*(_WORD *)((char *)v45 + v15) >> 6))
              + 32) & 0xFFC0;
        v46[1] = (16 * v47 + 32) & 0xFFC0;
        v44 += 2;
        v45 += 4;
      }
      while (v44 < v37);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    unint64_t v48 = 0;
    unint64_t v49 = v27 - v36;
    do
    {
      int v50 = v16;
      unsigned int v51 = v23;
      if (v8)
      {
        int v52 = (_WORD *)((char *)v16 + v15 + 4);
        unsigned int v53 = *v52;
        unsigned int v54 = v52[1];
        int v50 = v16 + 4;
        int v55 = (*(unsigned __int16 *)((char *)v16 + v15 + 2) >> 6)
            + ((unsigned __int16)v16[1] >> 6)
            + ((unsigned __int16)v16[3] >> 6)
            + (v54 >> 6);
        *unint64_t v23 = (16 * ((*(_WORD *)((char *)v16 + v15) >> 6) + (*v16 >> 6) + (v16[2] >> 6) + (v53 >> 6)) + 32) & 0xFFC0;
        v23[1] = (16 * v55 + 32) & 0xFFC0;
        unsigned int v51 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v56 = 0;
        unsigned int v57 = v50 + 2;
        do
        {
          unsigned int v58 = &v51[v56];
          int v59 = (*(unsigned __int16 *)((char *)v57 + v15 - 2) >> 6)
              + ((unsigned __int16)*(v57 - 1) >> 6)
              + ((unsigned __int16)v57[1] >> 6)
              + (*(unsigned __int16 *)((char *)v57 + v15 + 2) >> 6);
          *unsigned int v58 = (16
                * ((*(_WORD *)((char *)v57 + v15 - 4) >> 6)
                 + (*(v57 - 2) >> 6)
                 + (*v57 >> 6)
                 + (*(_WORD *)((char *)v57 + v15) >> 6))
                + 32) & 0xFFC0;
          v58[1] = (16 * v59 + 32) & 0xFFC0;
          v56 += 2;
          v57 += 4;
        }
        while (v56 < v37);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v48 += 2;
    }
    while (v48 < v49);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_x420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (_WORD *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * (v10 + v9);
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    uint64_t v34 = *a7 + v30 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(_WORD *)(v34 + 2 * i) = *(_WORD *)(v33 + 2 * i) & 0xFFC0;
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      int v38 = v16 + 4;
      __int16 v40 = v16[1] & 0xFFC0;
      *unint64_t v23 = *v16 & 0xFFC0;
      v23[1] = v40;
      unsigned int v39 = v23 + 2;
    }
    else
    {
      int v38 = v16;
      unsigned int v39 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v41 = 0;
      do
      {
        unsigned int v42 = &v39[v41];
        __int16 v43 = v38[1] & 0xFFC0;
        *unsigned int v42 = *v38 & 0xFFC0;
        v42[1] = v43;
        v41 += 2;
        v38 += 4;
      }
      while (v41 < v37);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v36)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v27 - v36;
    uint64_t v46 = 2 * v15;
    do
    {
      int v47 = v16;
      unint64_t v48 = v23;
      if (v9)
      {
        int v47 = v16 + 4;
        __int16 v49 = v16[1] & 0xFFC0;
        *unint64_t v23 = *v16 & 0xFFC0;
        v23[1] = v49;
        unint64_t v48 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v50 = 0;
        do
        {
          unsigned int v51 = &v48[v50];
          __int16 v52 = v47[1] & 0xFFC0;
          *unsigned int v51 = *v47 & 0xFFC0;
          v51[1] = v52;
          v50 += 2;
          v47 += 4;
        }
        while (v50 < v37);
      }
      uint64_t v16 = (_WORD *)((char *)v16 + v46);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v8);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * (v10 + v8);
    uint64_t v31 = *a8;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v30 + v32;
    uint64_t v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = (unsigned __int16)((-4190208 - v36 + (v36 << 10)) / 0xDB00) << 6;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v41 = *v16;
      unsigned int v42 = v16[1];
      unsigned int v43 = *(unsigned __int16 *)((char *)v16 + v15);
      unsigned int v44 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        unsigned int v42 = 4096;
      }
      if (v43 >= 0xF000) {
        unsigned int v43 = 61440;
      }
      if (v43 <= 0x1000) {
        unsigned int v43 = 4096;
      }
      if (v44 >= 0xF000) {
        unsigned int v44 = 61440;
      }
      unsigned int v45 = v16[2];
      if (v44 <= 0x1000) {
        int v46 = 4096;
      }
      else {
        int v46 = v44;
      }
      unsigned int v47 = v16[3];
      unint64_t v48 = (unsigned __int16 *)((char *)v16 + v15 + 4);
      unsigned int v49 = *v48;
      unsigned int v50 = v48[1];
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      if (v47 >= 0xF000) {
        unsigned int v47 = 61440;
      }
      if (v47 <= 0x1000) {
        int v51 = 4096;
      }
      else {
        int v51 = v47;
      }
      if (v49 >= 0xF000) {
        unsigned int v52 = 61440;
      }
      else {
        unsigned int v52 = v49;
      }
      if (v52 <= 0x1000) {
        int v53 = 4096;
      }
      else {
        int v53 = v52;
      }
      unsigned int v54 = -4190208 - v41 + (v41 << 10);
      if (v50 >= 0xF000) {
        unsigned int v55 = 61440;
      }
      else {
        unsigned int v55 = v50;
      }
      if (v55 <= 0x1000) {
        int v56 = 4096;
      }
      else {
        int v56 = v55;
      }
      unsigned int v39 = v16 + 4;
      *unint64_t v23 = (16
            * (((613566757 * (unint64_t)((-4190208 - v43 + (v43 << 10)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)(v54 >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-4190208 - v45 + (v45 << 10)) >> 13)) >> 32)
             + ((613566757 * (unint64_t)((-4190208 - v53 + (v53 << 10)) >> 13)) >> 32))
            + 32) & 0xFFC0;
      v23[1] = (16
              * (((613566757 * (unint64_t)((-4190208 - v46 + (v46 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v42 + (v42 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v51 + (v51 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v56 + (v56 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
      __int16 v40 = v23 + 2;
    }
    else
    {
      unsigned int v39 = v16;
      __int16 v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v57 = 0;
      unsigned int v58 = v39 + 2;
      do
      {
        unsigned int v59 = *(v58 - 2);
        int v60 = (unsigned __int16 *)((char *)v58 + v15);
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          int v61 = 4096;
        }
        else {
          int v61 = v59;
        }
        if (*(v58 - 1) >= 0xF000u) {
          unsigned int v62 = 61440;
        }
        else {
          unsigned int v62 = *(v58 - 1);
        }
        if (v62 <= 0x1000) {
          int v63 = 4096;
        }
        else {
          int v63 = v62;
        }
        if (*(unsigned __int16 *)((char *)v58 + v15 - 4) >= 0xF000u) {
          unsigned int v64 = 61440;
        }
        else {
          unsigned int v64 = *(unsigned __int16 *)((char *)v58 + v15 - 4);
        }
        if (v64 <= 0x1000) {
          int v65 = 4096;
        }
        else {
          int v65 = v64;
        }
        if (*(unsigned __int16 *)((char *)v58 + v15 - 2) >= 0xF000u) {
          unsigned int v66 = 61440;
        }
        else {
          unsigned int v66 = *(unsigned __int16 *)((char *)v58 + v15 - 2);
        }
        if (v66 <= 0x1000) {
          int v67 = 4096;
        }
        else {
          int v67 = v66;
        }
        unsigned int v68 = *v58;
        unsigned int v69 = *v60;
        if (v68 >= 0xF000) {
          unsigned int v68 = 61440;
        }
        unsigned int v70 = v60[1];
        if (v68 <= 0x1000) {
          int v71 = 4096;
        }
        else {
          int v71 = v68;
        }
        if (v58[1] >= 0xF000u) {
          unsigned int v72 = 61440;
        }
        else {
          unsigned int v72 = v58[1];
        }
        if (v72 <= 0x1000) {
          int v73 = 4096;
        }
        else {
          int v73 = v72;
        }
        if (v69 >= 0xF000) {
          unsigned int v74 = 61440;
        }
        else {
          unsigned int v74 = v69;
        }
        if (v74 <= 0x1000) {
          int v75 = 4096;
        }
        else {
          int v75 = v74;
        }
        unsigned int v76 = &v40[v57];
        unsigned int v77 = -4190208 - v61 + (v61 << 10);
        if (v70 >= 0xF000) {
          unsigned int v70 = 61440;
        }
        unint64_t v78 = (613566757 * (unint64_t)(v77 >> 13)) >> 32;
        unint64_t v79 = (613566757 * (unint64_t)((-4190208 - v63 + (v63 << 10)) >> 13)) >> 32;
        unint64_t v80 = (613566757 * (unint64_t)((-4190208 - v65 + (v65 << 10)) >> 13)) >> 32;
        unint64_t v81 = (613566757 * (unint64_t)((-4190208 - v67 + (v67 << 10)) >> 13)) >> 32;
        if (v70 <= 0x1000) {
          unsigned int v70 = 4096;
        }
        *unsigned int v76 = (16
              * (v80
               + v78
               + ((613566757 * (unint64_t)((-4190208 - v71 + (v71 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v75 + (v75 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
        v76[1] = (16
                * (v81
                 + v79
                 + ((613566757 * (unint64_t)((-4190208 - v73 + (v73 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v70 + (v70 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
        v57 += 2;
        v58 += 4;
      }
      while (v57 < v38);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    unint64_t v82 = 0;
    unint64_t v83 = v27 - v37;
    do
    {
      int v84 = v16;
      unsigned int v85 = v23;
      if (v8)
      {
        unsigned int v86 = *v16;
        unsigned int v87 = v16[1];
        unsigned int v88 = *(unsigned __int16 *)((char *)v16 + v15);
        unsigned int v89 = *(unsigned __int16 *)((char *)v16 + v15 + 2);
        if (v86 >= 0xF000) {
          unsigned int v86 = 61440;
        }
        if (v86 <= 0x1000) {
          unsigned int v86 = 4096;
        }
        if (v87 >= 0xF000) {
          unsigned int v87 = 61440;
        }
        if (v87 <= 0x1000) {
          unsigned int v87 = 4096;
        }
        if (v88 >= 0xF000) {
          unsigned int v88 = 61440;
        }
        if (v88 <= 0x1000) {
          unsigned int v88 = 4096;
        }
        if (v89 >= 0xF000) {
          unsigned int v89 = 61440;
        }
        if (v89 <= 0x1000) {
          int v90 = 4096;
        }
        else {
          int v90 = v89;
        }
        unsigned int v91 = v16[2];
        unsigned int v92 = v16[3];
        unsigned int v93 = (unsigned __int16 *)((char *)v16 + v15 + 4);
        unsigned int v94 = *v93;
        unsigned int v95 = v93[1];
        if (v91 >= 0xF000) {
          unsigned int v91 = 61440;
        }
        if (v91 <= 0x1000) {
          unsigned int v91 = 4096;
        }
        if (v92 >= 0xF000) {
          unsigned int v92 = 61440;
        }
        if (v92 <= 0x1000) {
          unsigned int v92 = 4096;
        }
        if (v94 >= 0xF000) {
          unsigned int v94 = 61440;
        }
        if (v94 <= 0x1000) {
          unsigned int v94 = 4096;
        }
        unsigned int v96 = -4190208 - v86 + (v86 << 10);
        if (v95 >= 0xF000) {
          unsigned int v95 = 61440;
        }
        if (v95 <= 0x1000) {
          int v97 = 4096;
        }
        else {
          int v97 = v95;
        }
        int v84 = v16 + 4;
        *unint64_t v23 = (16
              * (((613566757 * (unint64_t)((-4190208 - v88 + (v88 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)(v96 >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v91 + (v91 << 10)) >> 13)) >> 32)
               + ((613566757 * (unint64_t)((-4190208 - v94 + (v94 << 10)) >> 13)) >> 32))
              + 32) & 0xFFC0;
        v23[1] = (16
                * (((613566757 * (unint64_t)((-4190208 - v90 + (v90 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v87 + (v87 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v92 + (v92 << 10)) >> 13)) >> 32)
                 + ((613566757 * (unint64_t)((-4190208 - v97 + (v97 << 10)) >> 13)) >> 32))
                + 32) & 0xFFC0;
        unsigned int v85 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v98 = 0;
        unsigned int v99 = v84 + 2;
        do
        {
          unsigned int v100 = *(v99 - 2);
          unsigned int v101 = (unsigned __int16 *)((char *)v99 + v15);
          if (v100 >= 0xF000) {
            unsigned int v100 = 61440;
          }
          if (v100 <= 0x1000) {
            int v102 = 4096;
          }
          else {
            int v102 = v100;
          }
          if (*(v99 - 1) >= 0xF000u) {
            unsigned int v103 = 61440;
          }
          else {
            unsigned int v103 = *(v99 - 1);
          }
          if (v103 <= 0x1000) {
            int v104 = 4096;
          }
          else {
            int v104 = v103;
          }
          if (*(unsigned __int16 *)((char *)v99 + v15 - 4) >= 0xF000u) {
            unsigned int v105 = 61440;
          }
          else {
            unsigned int v105 = *(unsigned __int16 *)((char *)v99 + v15 - 4);
          }
          if (v105 <= 0x1000) {
            int v106 = 4096;
          }
          else {
            int v106 = v105;
          }
          if (*(unsigned __int16 *)((char *)v99 + v15 - 2) >= 0xF000u) {
            unsigned int v107 = 61440;
          }
          else {
            unsigned int v107 = *(unsigned __int16 *)((char *)v99 + v15 - 2);
          }
          if (v107 <= 0x1000) {
            int v108 = 4096;
          }
          else {
            int v108 = v107;
          }
          unsigned int v109 = *v99;
          unsigned int v110 = *v101;
          if (v109 >= 0xF000) {
            unsigned int v109 = 61440;
          }
          unsigned int v111 = v101[1];
          if (v109 <= 0x1000) {
            int v112 = 4096;
          }
          else {
            int v112 = v109;
          }
          if (v99[1] >= 0xF000u) {
            unsigned int v113 = 61440;
          }
          else {
            unsigned int v113 = v99[1];
          }
          if (v113 <= 0x1000) {
            int v114 = 4096;
          }
          else {
            int v114 = v113;
          }
          if (v110 >= 0xF000) {
            unsigned int v115 = 61440;
          }
          else {
            unsigned int v115 = v110;
          }
          if (v115 <= 0x1000) {
            int v116 = 4096;
          }
          else {
            int v116 = v115;
          }
          unsigned int v117 = &v85[v98];
          unsigned int v118 = -4190208 - v102 + (v102 << 10);
          if (v111 >= 0xF000) {
            unsigned int v111 = 61440;
          }
          unint64_t v119 = (613566757 * (unint64_t)(v118 >> 13)) >> 32;
          unint64_t v120 = (613566757 * (unint64_t)((-4190208 - v104 + (v104 << 10)) >> 13)) >> 32;
          unint64_t v121 = (613566757 * (unint64_t)((-4190208 - v106 + (v106 << 10)) >> 13)) >> 32;
          unint64_t v122 = (613566757 * (unint64_t)((-4190208 - v108 + (v108 << 10)) >> 13)) >> 32;
          if (v111 <= 0x1000) {
            unsigned int v111 = 4096;
          }
          *unsigned int v117 = (16
                 * (v121
                  + v119
                  + ((613566757 * (unint64_t)((-4190208 - v112 + (v112 << 10)) >> 13)) >> 32)
                  + ((613566757 * (unint64_t)((-4190208 - v116 + (v116 << 10)) >> 13)) >> 32))
                 + 32) & 0xFFC0;
          v117[1] = (16
                   * (v122
                    + v120
                    + ((613566757 * (unint64_t)((-4190208 - v114 + (v114 << 10)) >> 13)) >> 32)
                    + ((613566757 * (unint64_t)((-4190208 - v111 + (v111 << 10)) >> 13)) >> 32))
                   + 32) & 0xFFC0;
          v98 += 2;
          v99 += 4;
        }
        while (v98 < v38);
      }
      v16 += v15;
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v82 += 2;
    }
    while (v82 < v83);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_xf20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = (*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE;
  uint64_t v15 = a4[1];
  uint64_t v16 = (unsigned __int16 *)(a3[1] + v15 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v17 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v18 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v19 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v20 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v21 = 2 * v17;
  uint64_t v22 = a8[1];
  unint64_t v23 = (_WORD *)(a7[1] + ((unint64_t)(v22 * v19) >> 1) + ((2 * v17) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v24 = v11 - (v10 + v9);
  unint64_t v25 = v18 - v17;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = v14 - v13;
  unint64_t v27 = v20 - v19;
  if (v26 < v20 - v19) {
    unint64_t v27 = v26;
  }
  if (v27)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * (v10 + v9);
    uint64_t v31 = *a8;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v30 + v32;
    uint64_t v34 = *a7 + v31 * v19 + v21;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(_WORD *)(v34 + 2 * i) = (unsigned __int16)((-4190208 - v36 + (v36 << 10)) / 0xDB00) << 6;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v27);
  }
  if (v27 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v41 = *v16;
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        int v42 = 4096;
      }
      else {
        int v42 = v41;
      }
      if (v16[1] >= 0xF000u) {
        unsigned int v43 = 61440;
      }
      else {
        unsigned int v43 = v16[1];
      }
      if (v43 <= 0x1000) {
        int v44 = 4096;
      }
      else {
        int v44 = v43;
      }
      unsigned int v39 = v16 + 4;
      *unint64_t v23 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v42 + (v42 << 10)) >> 13)) >> 32) << 6;
      v23[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v44 + (v44 << 10)) >> 13)) >> 32) << 6;
      __int16 v40 = v23 + 2;
    }
    else
    {
      unsigned int v39 = v16;
      __int16 v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v45 = 0;
      do
      {
        int v46 = &v40[v45];
        unsigned int v47 = *v39;
        unsigned int v48 = v39[1];
        if (v47 >= 0xF000) {
          unsigned int v47 = 61440;
        }
        if (v47 <= 0x1000) {
          unsigned int v47 = 4096;
        }
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          unsigned int v48 = 4096;
        }
        *int v46 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v47 + (v47 << 10)) >> 13)) >> 32) << 6;
        v46[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v48 + (v48 << 10)) >> 13)) >> 32) << 6;
        v45 += 2;
        v39 += 4;
      }
      while (v45 < v38);
    }
    v16 += v15;
    unint64_t v23 = (_WORD *)((char *)v23 + v22);
  }
  if (v27 != v37)
  {
    unint64_t v49 = 0;
    unint64_t v50 = v27 - v37;
    uint64_t v51 = 2 * v15;
    do
    {
      unsigned int v52 = v16;
      int v53 = v23;
      if (v9)
      {
        unsigned int v54 = *v16;
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          int v55 = 4096;
        }
        else {
          int v55 = v54;
        }
        if (v16[1] >= 0xF000u) {
          unsigned int v56 = 61440;
        }
        else {
          unsigned int v56 = v16[1];
        }
        if (v56 <= 0x1000) {
          int v57 = 4096;
        }
        else {
          int v57 = v56;
        }
        unsigned int v52 = v16 + 4;
        *unint64_t v23 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v55 + (v55 << 10)) >> 13)) >> 32) << 6;
        v23[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v57 + (v57 << 10)) >> 13)) >> 32) << 6;
        int v53 = v23 + 2;
      }
      if (v24 != v10)
      {
        unint64_t v58 = 0;
        do
        {
          unsigned int v59 = &v53[v58];
          unsigned int v60 = *v52;
          unsigned int v61 = v52[1];
          if (v60 >= 0xF000) {
            unsigned int v60 = 61440;
          }
          if (v60 <= 0x1000) {
            unsigned int v60 = 4096;
          }
          if (v61 >= 0xF000) {
            unsigned int v61 = 61440;
          }
          if (v61 <= 0x1000) {
            unsigned int v61 = 4096;
          }
          *unsigned int v59 = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v60 + (v60 << 10)) >> 13)) >> 32) << 6;
          v59[1] = (unsigned __int16)((613566757 * (unint64_t)((-4190208 - v61 + (v61 << 10)) >> 13)) >> 32) << 6;
          v58 += 2;
          v52 += 4;
        }
        while (v58 < v38);
      }
      uint64_t v16 = (unsigned __int16 *)((char *)v16 + v51);
      unint64_t v23 = (_WORD *)((char *)v23 + v22);
      v49 += 2;
    }
    while (v49 < v50);
  }
  return 0;
}

uint64_t vt_Copy_s4as_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = a3[1] + v12 * v8 + 4 * v9;
  uint64_t v15 = a6[4];
  uint64_t v14 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v14 + 2 * v15);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a8;
    uint64_t v20 = a8[2];
    uint64_t v21 = a7[2] + v20 * v14;
    uint64_t v22 = *a7 + *a8 * v14;
    uint64_t v23 = *a4;
    uint64_t v24 = a4[2];
    uint64_t v25 = v21 + v15;
    uint64_t v26 = v22 + v15;
    uint64_t v27 = a3[2] + v24 * v8 + 2 * v9;
    uint64_t v28 = *a3 + v23 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(unsigned char *)(v25 + i) = *(_WORD *)(v27 + 2 * i);
          *(unsigned char *)(v26 + i) = *(unsigned char *)(v28 + 2 * i + 1);
        }
      }
      v28 += v23;
      v26 += v19;
      v27 += v24;
      v25 += v20;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v30 = v8 & 1;
  if (v11 >= v30) {
    uint64_t v31 = v8 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  unint64_t v32 = v9 & 1;
  if (v10 >= v32) {
    uint64_t v33 = v9 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  unint64_t v34 = v10 - v33;
  if (v8)
  {
    if (v9)
    {
      char v37 = *(unsigned char *)(v13 + 3);
      uint64_t v35 = v13 + 4;
      *uint64_t v17 = *(unsigned char *)(v13 + 1);
      v17[1] = v37;
      unsigned int v36 = v17 + 2;
    }
    else
    {
      uint64_t v35 = v13;
      unsigned int v36 = v17;
    }
    if (v10 == v33)
    {
      unint64_t v38 = 0;
    }
    else
    {
      unint64_t v39 = v10 - v33;
      do
      {
        char v40 = *(unsigned char *)(v35 + 1);
        char v41 = *(unsigned char *)(v35 + 3);
        v35 += 4;
        *unsigned int v36 = v40;
        v36[1] = v41;
        v36 += 2;
        --v39;
      }
      while (v39);
      unint64_t v38 = v10 - v33;
    }
    if (v38 + v32 < v10)
    {
      char v42 = *(unsigned char *)(v35 + 1);
      char v43 = *(unsigned char *)(v35 + 3);
      *unsigned int v36 = v42;
      v36[1] = v43;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v31)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v11 - v31;
    do
    {
      uint64_t v46 = v13;
      unsigned int v47 = v17;
      if (v9)
      {
        char v48 = *(unsigned char *)(v13 + 3);
        uint64_t v46 = v13 + 4;
        *uint64_t v17 = *(unsigned char *)(v13 + 1);
        v17[1] = v48;
        unsigned int v47 = v17 + 2;
      }
      if (v10 == v33)
      {
        unint64_t v49 = 0;
      }
      else
      {
        unint64_t v50 = v10 - v33;
        do
        {
          char v51 = *(unsigned char *)(v46 + 1);
          char v52 = *(unsigned char *)(v46 + 3);
          v46 += 4;
          *unsigned int v47 = v51;
          v47[1] = v52;
          v47 += 2;
          --v50;
        }
        while (v50);
        unint64_t v49 = v10 - v33;
      }
      if (v49 + v32 < v10)
      {
        char v53 = *(unsigned char *)(v46 + 1);
        char v54 = *(unsigned char *)(v46 + 3);
        *unsigned int v47 = v53;
        v47[1] = v54;
      }
      v13 += v12;
      v17 += v16;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v30 < v11)
  {
    if (v9)
    {
      char v55 = *(unsigned char *)(v13 + 1);
      char v56 = *(unsigned char *)(v13 + 3);
      v13 += 4;
      *uint64_t v17 = v55;
      v17[1] = v56;
      v17 += 2;
    }
    if (v10 == v33)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v57 = v10 - v33;
      do
      {
        char v58 = *(unsigned char *)(v13 + 1);
        char v59 = *(unsigned char *)(v13 + 3);
        v13 += 4;
        *uint64_t v17 = v58;
        v17[1] = v59;
        v17 += 2;
        --v57;
      }
      while (v57);
    }
    if (v34 + v32 < v10)
    {
      char v60 = *(unsigned char *)(v13 + 1);
      char v61 = *(unsigned char *)(v13 + 3);
      *uint64_t v17 = v60;
      v17[1] = v61;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_444v(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = a3[1] + v12 * v8 + 4 * v9;
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v15 + v14;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *(unsigned char *)(v21 + i) = *(unsigned char *)(v22 + 2 * i + 1);
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v24 = v8 & 1;
  if (v11 >= v24) {
    uint64_t v25 = v8 & 1;
  }
  else {
    uint64_t v25 = 0;
  }
  char v26 = v9;
  unint64_t v27 = v9 & 1;
  if (v10 >= v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0;
  }
  unint64_t v29 = v10 - v28;
  if (v8)
  {
    if (v26)
    {
      char v32 = *(unsigned char *)(v13 + 3);
      uint64_t v30 = v13 + 4;
      *uint64_t v17 = *(unsigned char *)(v13 + 1);
      v17[1] = v32;
      uint64_t v31 = v17 + 2;
    }
    else
    {
      uint64_t v30 = v13;
      uint64_t v31 = v17;
    }
    if (v10 == v28)
    {
      unint64_t v33 = 0;
    }
    else
    {
      unint64_t v34 = v10 - v28;
      do
      {
        char v35 = *(unsigned char *)(v30 + 1);
        char v36 = *(unsigned char *)(v30 + 3);
        v30 += 4;
        unsigned char *v31 = v35;
        v31[1] = v36;
        v31 += 2;
        --v34;
      }
      while (v34);
      unint64_t v33 = v10 - v28;
    }
    if (v33 + v27 < v10)
    {
      char v37 = *(unsigned char *)(v30 + 1);
      char v38 = *(unsigned char *)(v30 + 3);
      unsigned char *v31 = v37;
      v31[1] = v38;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v25)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v11 - v25;
    do
    {
      uint64_t v41 = v13;
      char v42 = v17;
      if (v26)
      {
        char v43 = *(unsigned char *)(v13 + 3);
        uint64_t v41 = v13 + 4;
        *uint64_t v17 = *(unsigned char *)(v13 + 1);
        v17[1] = v43;
        char v42 = v17 + 2;
      }
      if (v10 == v28)
      {
        unint64_t v44 = 0;
      }
      else
      {
        unint64_t v45 = v10 - v28;
        do
        {
          char v46 = *(unsigned char *)(v41 + 1);
          char v47 = *(unsigned char *)(v41 + 3);
          v41 += 4;
          *char v42 = v46;
          v42[1] = v47;
          v42 += 2;
          --v45;
        }
        while (v45);
        unint64_t v44 = v10 - v28;
      }
      if (v44 + v27 < v10)
      {
        char v48 = *(unsigned char *)(v41 + 1);
        char v49 = *(unsigned char *)(v41 + 3);
        *char v42 = v48;
        v42[1] = v49;
      }
      v13 += v12;
      v17 += v16;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v24 < v11)
  {
    if (v26)
    {
      char v50 = *(unsigned char *)(v13 + 1);
      char v51 = *(unsigned char *)(v13 + 3);
      v13 += 4;
      *uint64_t v17 = v50;
      v17[1] = v51;
      v17 += 2;
    }
    if (v10 == v28)
    {
      unint64_t v29 = 0;
    }
    else
    {
      unint64_t v52 = v10 - v28;
      do
      {
        char v53 = *(unsigned char *)(v13 + 1);
        char v54 = *(unsigned char *)(v13 + 3);
        v13 += 4;
        *uint64_t v17 = v53;
        v17[1] = v54;
        v17 += 2;
        --v52;
      }
      while (v52);
    }
    if (v29 + v27 < v10)
    {
      char v55 = *(unsigned char *)(v13 + 1);
      char v56 = *(unsigned char *)(v13 + 3);
      *uint64_t v17 = v55;
      v17[1] = v56;
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_444f(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  uint64_t v11 = a4[1];
  uint64_t v12 = (unsigned __int16 *)(a3[1] + v11 * v8 + 4 * v9);
  uint64_t v13 = a6[4];
  uint64_t v14 = a6[5];
  unint64_t v15 = a6[3];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v14 + 2 * v13);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (a2[3] < v15) {
    unint64_t v15 = a2[3];
  }
  if (v15)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = *a7 + *a8 * v14 + v13;
    uint64_t v22 = *a3 + *a4 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          unsigned int v24 = *(unsigned __int16 *)(v22 + 2 * i);
          if (v24 >= 0xEB00) {
            unsigned int v24 = 60160;
          }
          if (v24 <= 0x1000) {
            unsigned int v24 = 4096;
          }
          *(unsigned char *)(v21 + i) = (-1044480 - v24 + (v24 << 8)) / 0xDB00;
        }
      }
      v22 += v19;
      v21 += v20;
      ++v18;
    }
    while (v18 != v15);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v25 = v8 & 1;
  if (v15 >= v25) {
    uint64_t v26 = v8 & 1;
  }
  else {
    uint64_t v26 = 0;
  }
  char v27 = v9;
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    uint64_t v29 = v9 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v9)
    {
      unsigned int v33 = *v12;
      unsigned int v34 = v12[1];
      if (v33 >= 0xF000) {
        unsigned int v33 = 61440;
      }
      if (v33 <= 0x1000) {
        unsigned int v33 = 4096;
      }
      if (v34 >= 0xF000) {
        unsigned int v34 = 61440;
      }
      if (v34 <= 0x1000) {
        int v35 = 4096;
      }
      else {
        int v35 = v34;
      }
      uint64_t v31 = v12 + 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-1044480 - v33 + (v33 << 8)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1044480 - v35 + (v35 << 8)) >> 13)) >> 32;
      char v32 = v17 + 2;
    }
    else
    {
      uint64_t v31 = v12;
      char v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v36 = 0;
    }
    else
    {
      unint64_t v37 = v10 - v29;
      do
      {
        unsigned int v38 = *v31;
        unsigned int v39 = v31[1];
        if (v38 >= 0xF000) {
          unsigned int v38 = 61440;
        }
        if (v38 <= 0x1000) {
          unsigned int v38 = 4096;
        }
        if (v39 >= 0xF000) {
          unsigned int v39 = 61440;
        }
        if (v39 <= 0x1000) {
          unsigned int v39 = 4096;
        }
        v31 += 2;
        *char v32 = (613566757 * (unint64_t)((-1044480 - v38 + (v38 << 8)) >> 13)) >> 32;
        v32[1] = (613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32;
        v32 += 2;
        --v37;
      }
      while (v37);
      unint64_t v36 = v10 - v29;
    }
    if (v36 + v28 < v10)
    {
      unsigned int v40 = *v31;
      unsigned int v41 = v31[1];
      if (v40 >= 0xF000) {
        unsigned int v40 = 61440;
      }
      if (v40 <= 0x1000) {
        unsigned int v40 = 4096;
      }
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      *char v32 = (613566757 * (unint64_t)((-1044480 - v40 + (v40 << 8)) >> 13)) >> 32;
      v32[1] = (613566757 * (unint64_t)((-1044480 - v41 + (v41 << 8)) >> 13)) >> 32;
    }
    uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
    v17 += v16;
  }
  if (v15 == v26)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v15 - v26;
    do
    {
      unint64_t v44 = v12;
      unint64_t v45 = v17;
      if (v27)
      {
        unsigned int v46 = *v12;
        unsigned int v47 = v12[1];
        if (v46 >= 0xF000) {
          unsigned int v46 = 61440;
        }
        if (v46 <= 0x1000) {
          unsigned int v46 = 4096;
        }
        if (v47 >= 0xF000) {
          unsigned int v47 = 61440;
        }
        if (v47 <= 0x1000) {
          int v48 = 4096;
        }
        else {
          int v48 = v47;
        }
        unint64_t v44 = v12 + 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-1044480 - v46 + (v46 << 8)) >> 13)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32;
        unint64_t v45 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v49 = 0;
      }
      else
      {
        unint64_t v50 = v10 - v29;
        do
        {
          unsigned int v51 = *v44;
          unsigned int v52 = v44[1];
          if (v51 >= 0xF000) {
            unsigned int v51 = 61440;
          }
          if (v51 <= 0x1000) {
            unsigned int v51 = 4096;
          }
          if (v52 >= 0xF000) {
            unsigned int v52 = 61440;
          }
          if (v52 <= 0x1000) {
            unsigned int v52 = 4096;
          }
          v44 += 2;
          *unint64_t v45 = (613566757 * (unint64_t)((-1044480 - v51 + (v51 << 8)) >> 13)) >> 32;
          v45[1] = (613566757 * (unint64_t)((-1044480 - v52 + (v52 << 8)) >> 13)) >> 32;
          v45 += 2;
          --v50;
        }
        while (v50);
        unint64_t v49 = v10 - v29;
      }
      if (v49 + v28 < v10)
      {
        unsigned int v53 = *v44;
        unsigned int v54 = v44[1];
        if (v53 >= 0xF000) {
          unsigned int v53 = 61440;
        }
        if (v53 <= 0x1000) {
          unsigned int v53 = 4096;
        }
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          unsigned int v54 = 4096;
        }
        *unint64_t v45 = (613566757 * (unint64_t)((-1044480 - v53 + (v53 << 8)) >> 13)) >> 32;
        v45[1] = (613566757 * (unint64_t)((-1044480 - v54 + (v54 << 8)) >> 13)) >> 32;
      }
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + v11);
      v17 += v16;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v25 < v15)
  {
    if (v27)
    {
      unsigned int v55 = *v12;
      unsigned int v56 = v12[1];
      if (v55 >= 0xF000) {
        unsigned int v55 = 61440;
      }
      if (v55 <= 0x1000) {
        unsigned int v55 = 4096;
      }
      if (v56 >= 0xF000) {
        unsigned int v56 = 61440;
      }
      if (v56 <= 0x1000) {
        unsigned int v56 = 4096;
      }
      v12 += 2;
      *uint64_t v17 = (613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1044480 - v56 + (v56 << 8)) >> 13)) >> 32;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v57 = v10 - v29;
      do
      {
        unsigned int v58 = *v12;
        unsigned int v59 = v12[1];
        if (v58 >= 0xF000) {
          unsigned int v58 = 61440;
        }
        if (v58 <= 0x1000) {
          unsigned int v58 = 4096;
        }
        if (v59 >= 0xF000) {
          unsigned int v59 = 61440;
        }
        if (v59 <= 0x1000) {
          unsigned int v59 = 4096;
        }
        v12 += 2;
        *uint64_t v17 = (613566757 * (unint64_t)((-1044480 - v58 + (v58 << 8)) >> 13)) >> 32;
        v17[1] = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
        v17 += 2;
        --v57;
      }
      while (v57);
    }
    if (v30 + v28 < v10)
    {
      unsigned int v60 = *v12;
      unsigned int v61 = v12[1];
      if (v60 >= 0xF000) {
        unsigned int v60 = 61440;
      }
      if (v60 <= 0x1000) {
        unsigned int v60 = 4096;
      }
      if (v61 >= 0xF000) {
        unsigned int v61 = 61440;
      }
      if (v61 <= 0x1000) {
        unsigned int v61 = 4096;
      }
      *uint64_t v17 = (613566757 * (unint64_t)((-1044480 - v60 + (v60 << 8)) >> 13)) >> 32;
      v17[1] = (613566757 * (unint64_t)((-1044480 - v61 + (v61 << 8)) >> 13)) >> 32;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_s4as_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v16;
    uint64_t v24 = *a7 + *a8 * v16;
    uint64_t v25 = *a4;
    uint64_t v26 = a4[2];
    uint64_t v27 = v23 + v15;
    uint64_t v28 = v24 + v15;
    uint64_t v29 = a3[2] + v26 * v12 + 2 * v11;
    uint64_t v30 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v27 + i) = *(_WORD *)(v29 + 2 * i);
          *(unsigned char *)(v28 + i) = *(unsigned char *)(v30 + 2 * i + 1);
        }
      }
      v30 += v25;
      v28 += v21;
      v29 += v26;
      v27 += v22;
      ++v20;
    }
    while (v20 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v19 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v19 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 8;
      unsigned int v38 = (v14[3] + v14[7] + 1) >> 1;
      *uint64_t v18 = (v14[1] + v14[5] + 1) >> 1;
      v18[1] = v38;
      unint64_t v37 = v18 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      unint64_t v37 = v18;
    }
    if (v19 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unsigned int v40 = &v37[v39];
        unsigned int v41 = (v36[3] + v36[7] + 1) >> 1;
        *unsigned int v40 = (v36[1] + v36[5] + 1) >> 1;
        v40[1] = v41;
        v39 += 2;
        v36 += 8;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v18 += v17;
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      unint64_t v44 = v14;
      unint64_t v45 = v18;
      if (v34)
      {
        unint64_t v44 = v14 + 8;
        unsigned int v46 = (v14[3] + v14[7] + 1) >> 1;
        *uint64_t v18 = (v14[1] + v14[5] + 1) >> 1;
        v18[1] = v46;
        unint64_t v45 = v18 + 2;
      }
      if (v19 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          unsigned int v49 = (v44[3] + v44[7] + 1) >> 1;
          unsigned char *v48 = (v44[1] + v44[5] + 1) >> 1;
          v48[1] = v49;
          v47 += 2;
          v44 += 8;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v18 += v17;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      int v50 = v14[1];
      int v51 = v14[3];
      int v52 = v14[5];
      int v53 = v14[7];
      v14 += 8;
      *uint64_t v18 = (v50 + v52 + 1) >> 1;
      v18[1] = (v51 + v53 + 1) >> 1;
      v18 += 2;
    }
    if (v19 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        unsigned int v55 = &v18[v54];
        unsigned int v56 = (v14[3] + v14[7] + 1) >> 1;
        *unsigned int v55 = (v14[1] + v14[5] + 1) >> 1;
        v55[1] = v56;
        v54 += 2;
        v14 += 8;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_s4as_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = *(void *)(a6 + 40);
  uint64_t v17 = a8[1];
  uint64_t v18 = (unsigned char *)(a7[1] + v17 * v16 + (v15 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v19 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  if (v19 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15) {
    unint64_t v19 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v15;
  }
  if (v8 >= *(void *)(a6 + 24)) {
    unint64_t v8 = *(void *)(a6 + 24);
  }
  if (v8)
  {
    uint64_t v20 = 0;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    uint64_t v23 = a7[2] + v22 * v16;
    uint64_t v24 = *a7 + *a8 * v16;
    uint64_t v25 = *a4;
    uint64_t v26 = a4[2];
    uint64_t v27 = v23 + v15;
    uint64_t v28 = v24 + v15;
    uint64_t v29 = a3[2] + v26 * v12 + 2 * v11;
    uint64_t v30 = *a3 + v25 * v12 + 2 * v11;
    do
    {
      if (v19)
      {
        for (uint64_t i = 0; i != v19; ++i)
        {
          *(unsigned char *)(v27 + i) = *(_WORD *)(v29 + 2 * i);
          *(unsigned char *)(v28 + i) = *(unsigned char *)(v30 + 2 * i + 1);
        }
      }
      v30 += v25;
      v28 += v21;
      v29 += v26;
      v27 += v22;
      ++v20;
    }
    while (v20 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v19 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v19 - v10;
  if (v12)
  {
    if (v34)
    {
      char v38 = *(unsigned char *)(v14 + 3);
      uint64_t v36 = v14 + 8;
      *uint64_t v18 = *(unsigned char *)(v14 + 1);
      v18[1] = v38;
      unint64_t v37 = v18 + 2;
    }
    else
    {
      uint64_t v36 = v14;
      unint64_t v37 = v18;
    }
    if (v19 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unsigned int v40 = &v37[v39];
        char v41 = *(unsigned char *)(v36 + 3);
        *unsigned int v40 = *(unsigned char *)(v36 + 1);
        v40[1] = v41;
        v39 += 2;
        v36 += 8;
      }
      while (v39 < v35);
    }
    v14 += v13;
    v18 += v17;
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      uint64_t v44 = v14;
      unint64_t v45 = v18;
      if (v34)
      {
        char v46 = *(unsigned char *)(v14 + 3);
        uint64_t v44 = v14 + 8;
        *uint64_t v18 = *(unsigned char *)(v14 + 1);
        v18[1] = v46;
        unint64_t v45 = v18 + 2;
      }
      if (v19 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          int v48 = &v45[v47];
          char v49 = *(unsigned char *)(v44 + 3);
          unsigned char *v48 = *(unsigned char *)(v44 + 1);
          v48[1] = v49;
          v47 += 2;
          v44 += 8;
        }
        while (v47 < v35);
      }
      v14 += v13;
      v18 += v17;
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      char v50 = *(unsigned char *)(v14 + 1);
      char v51 = *(unsigned char *)(v14 + 3);
      v14 += 8;
      *uint64_t v18 = v50;
      v18[1] = v51;
      v18 += 2;
    }
    if (v19 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        int v53 = &v18[v52];
        char v54 = *(unsigned char *)(v14 + 3);
        *int v53 = *(unsigned char *)(v14 + 1);
        v53[1] = v54;
        v52 += 2;
        v14 += 8;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = *(unsigned char *)(v27 + 2 * i + 1);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      uint64_t v33 = v14 + 8;
      unsigned int v35 = (v14[3] + v14[7] + 1) >> 1;
      *uint64_t v20 = (v14[1] + v14[5] + 1) >> 1;
      v20[1] = v35;
      char v34 = v20 + 2;
    }
    else
    {
      uint64_t v33 = v14;
      char v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        unsigned int v38 = (v33[3] + v33[7] + 1) >> 1;
        *unint64_t v37 = (v33[1] + v33[5] + 1) >> 1;
        v37[1] = v38;
        v36 += 2;
        v33 += 8;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      char v41 = v14;
      unint64_t v42 = v20;
      if (v31)
      {
        char v41 = v14 + 8;
        unsigned int v43 = (v14[3] + v14[7] + 1) >> 1;
        *uint64_t v20 = (v14[1] + v14[5] + 1) >> 1;
        v20[1] = v43;
        unint64_t v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          unsigned int v46 = (v41[3] + v41[7] + 1) >> 1;
          *unint64_t v45 = (v41[1] + v41[5] + 1) >> 1;
          v45[1] = v46;
          v44 += 2;
          v41 += 8;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      int v47 = v14[1];
      int v48 = v14[3];
      int v49 = v14[5];
      int v50 = v14[7];
      v14 += 8;
      *uint64_t v20 = (v47 + v49 + 1) >> 1;
      v20[1] = (v48 + v50 + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        unint64_t v52 = &v20[v51];
        unsigned int v53 = (v14[3] + v14[7] + 1) >> 1;
        *unint64_t v52 = (v14[1] + v14[5] + 1) >> 1;
        v52[1] = v53;
        v51 += 2;
        v14 += 8;
      }
      while (v51 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_422v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(unsigned char *)(v26 + i) = *(unsigned char *)(v27 + 2 * i + 1);
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v29 = v12 & 1;
  if (v8 >= v29) {
    uint64_t v30 = v12 & 1;
  }
  else {
    uint64_t v30 = 0;
  }
  char v31 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v32 = v21 - v10;
  if (v12)
  {
    if (v31)
    {
      char v35 = *(unsigned char *)(v14 + 3);
      uint64_t v33 = v14 + 8;
      *uint64_t v20 = *(unsigned char *)(v14 + 1);
      v20[1] = v35;
      char v34 = v20 + 2;
    }
    else
    {
      uint64_t v33 = v14;
      char v34 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = &v34[v36];
        char v38 = *(unsigned char *)(v33 + 3);
        *unint64_t v37 = *(unsigned char *)(v33 + 1);
        v37[1] = v38;
        v36 += 2;
        v33 += 8;
      }
      while (v36 < v32);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v30)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v8 - v30;
    do
    {
      uint64_t v41 = v14;
      unint64_t v42 = v20;
      if (v31)
      {
        char v43 = *(unsigned char *)(v14 + 3);
        uint64_t v41 = v14 + 8;
        *uint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v43;
        unint64_t v42 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v44 = 0;
        do
        {
          unint64_t v45 = &v42[v44];
          char v46 = *(unsigned char *)(v41 + 3);
          *unint64_t v45 = *(unsigned char *)(v41 + 1);
          v45[1] = v46;
          v44 += 2;
          v41 += 8;
        }
        while (v44 < v32);
      }
      v14 += v13;
      v20 += v19;
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v29 < v8)
  {
    if (v31)
    {
      char v47 = *(unsigned char *)(v14 + 1);
      char v48 = *(unsigned char *)(v14 + 3);
      v14 += 8;
      *uint64_t v20 = v47;
      v20[1] = v48;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v49 = 0;
      do
      {
        int v50 = &v20[v49];
        char v51 = *(unsigned char *)(v14 + 3);
        unsigned char *v50 = *(unsigned char *)(v14 + 1);
        v50[1] = v51;
        v49 += 2;
        v14 += 8;
      }
      while (v49 < v32);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v8));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v9 >= v15) {
    unint64_t v9 = v15;
  }
  if (v9)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v29 = *(unsigned __int16 *)(v27 + 2 * i);
          if (v29 >= 0xEB00) {
            unsigned int v29 = 60160;
          }
          if (v29 <= 0x1000) {
            unsigned int v29 = 4096;
          }
          *(unsigned char *)(v26 + i) = (-1044480 - v29 + (v29 << 8)) / 0xDB00;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v9);
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v8 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v9 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v8;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v21 - v10;
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = *v14;
      if (v36 >= 0xF000) {
        unsigned int v36 = 61440;
      }
      if (v36 <= 0x1000) {
        int v37 = 4096;
      }
      else {
        int v37 = v36;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v38 = 61440;
      }
      else {
        unsigned int v38 = v14[1];
      }
      if (v38 <= 0x1000) {
        int v39 = 4096;
      }
      else {
        int v39 = v38;
      }
      unsigned int v40 = v14[2];
      if (v40 >= 0xF000) {
        unsigned int v40 = 61440;
      }
      if (v40 <= 0x1000) {
        int v41 = 4096;
      }
      else {
        int v41 = v40;
      }
      if (v14[3] >= 0xF000u) {
        unsigned int v42 = 61440;
      }
      else {
        unsigned int v42 = v14[3];
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      char v34 = v14 + 4;
      *uint64_t v20 = (((613566757 * (unint64_t)((-1044480 - v37 + (v37 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v41 + (v41 << 8)) >> 13)) >> 32)
                          + 1) >> 1;
      v20[1] = (((613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
      char v35 = v20 + 2;
    }
    else
    {
      char v34 = v14;
      char v35 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v44 = 0;
      do
      {
        unint64_t v45 = &v35[v44];
        unsigned int v46 = *v34;
        unsigned int v47 = v34[1];
        if (v46 >= 0xF000) {
          unsigned int v46 = 61440;
        }
        if (v46 <= 0x1000) {
          unsigned int v46 = 4096;
        }
        if (v47 >= 0xF000) {
          unsigned int v47 = 61440;
        }
        if (v47 <= 0x1000) {
          unsigned int v47 = 4096;
        }
        unsigned int v48 = v34[2];
        unsigned int v49 = v34[3];
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          unsigned int v48 = 4096;
        }
        if (v49 >= 0xF000) {
          unsigned int v49 = 61440;
        }
        if (v49 <= 0x1000) {
          unsigned int v49 = 4096;
        }
        *unint64_t v45 = (((613566757 * (unint64_t)((-1044480 - v46 + (v46 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
        v45[1] = (((613566757 * (unint64_t)((-1044480 - v47 + (v47 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v49 + (v49 << 8)) >> 13)) >> 32)
                              + 1) >> 1;
        v44 += 2;
        v34 += 4;
      }
      while (v44 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v9 == v31)
  {
    unint64_t v50 = 0;
  }
  else
  {
    uint64_t v51 = 0;
    unint64_t v50 = v9 - v31;
    do
    {
      unint64_t v52 = v14;
      unsigned int v53 = v20;
      if (v32)
      {
        unsigned int v54 = *v14;
        if (v54 >= 0xF000) {
          unsigned int v54 = 61440;
        }
        if (v54 <= 0x1000) {
          int v55 = 4096;
        }
        else {
          int v55 = v54;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v56 = 61440;
        }
        else {
          unsigned int v56 = v14[1];
        }
        if (v56 <= 0x1000) {
          int v57 = 4096;
        }
        else {
          int v57 = v56;
        }
        unsigned int v58 = v14[2];
        if (v58 >= 0xF000) {
          unsigned int v58 = 61440;
        }
        if (v58 <= 0x1000) {
          int v59 = 4096;
        }
        else {
          int v59 = v58;
        }
        if (v14[3] >= 0xF000u) {
          unsigned int v60 = 61440;
        }
        else {
          unsigned int v60 = v14[3];
        }
        if (v60 <= 0x1000) {
          int v61 = 4096;
        }
        else {
          int v61 = v60;
        }
        unint64_t v52 = v14 + 4;
        *uint64_t v20 = (((613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
        v20[1] = (((613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v61 + (v61 << 8)) >> 13)) >> 32)
                              + 1) >> 1;
        unsigned int v53 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v62 = 0;
        do
        {
          int v63 = &v53[v62];
          unsigned int v64 = *v52;
          unsigned int v65 = v52[1];
          if (v64 >= 0xF000) {
            unsigned int v64 = 61440;
          }
          if (v64 <= 0x1000) {
            unsigned int v64 = 4096;
          }
          if (v65 >= 0xF000) {
            unsigned int v65 = 61440;
          }
          if (v65 <= 0x1000) {
            unsigned int v65 = 4096;
          }
          unsigned int v66 = v52[2];
          unsigned int v67 = v52[3];
          if (v66 >= 0xF000) {
            unsigned int v66 = 61440;
          }
          if (v66 <= 0x1000) {
            unsigned int v66 = 4096;
          }
          if (v67 >= 0xF000) {
            unsigned int v67 = 61440;
          }
          if (v67 <= 0x1000) {
            unsigned int v67 = 4096;
          }
          *int v63 = (((613566757 * (unint64_t)((-1044480 - v64 + (v64 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v66 + (v66 << 8)) >> 13)) >> 32)
                              + 1) >> 1;
          v63[1] = (((613566757 * (unint64_t)((-1044480 - v65 + (v65 << 8)) >> 13)) >> 32)
                                + ((613566757 * (unint64_t)((-1044480 - v67 + (v67 << 8)) >> 13)) >> 32)
                                + 1) >> 1;
          v62 += 2;
          v52 += 4;
        }
        while (v62 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v51;
    }
    while (v51 != v50);
  }
  if (v50 + v30 < v9)
  {
    if (v32)
    {
      unsigned int v68 = *v14;
      unsigned int v69 = v14[1];
      if (v68 >= 0xF000) {
        unsigned int v68 = 61440;
      }
      if (v68 <= 0x1000) {
        unsigned int v68 = 4096;
      }
      if (v69 >= 0xF000) {
        unsigned int v69 = 61440;
      }
      if (v69 <= 0x1000) {
        unsigned int v69 = 4096;
      }
      unsigned int v70 = v14[2];
      if (v70 >= 0xF000) {
        unsigned int v70 = 61440;
      }
      if (v70 <= 0x1000) {
        unsigned int v70 = 4096;
      }
      if (v14[3] >= 0xF000u) {
        unsigned int v71 = 61440;
      }
      else {
        unsigned int v71 = v14[3];
      }
      if (v71 <= 0x1000) {
        unsigned int v71 = 4096;
      }
      v14 += 4;
      *uint64_t v20 = (((613566757 * (unint64_t)((-1044480 - v68 + (v68 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v70 + (v70 << 8)) >> 13)) >> 32)
                          + 1) >> 1;
      v20[1] = (((613566757 * (unint64_t)((-1044480 - v69 + (v69 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v71 + (v71 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v72 = 0;
      do
      {
        int v73 = &v20[v72];
        unsigned int v74 = *v14;
        unsigned int v75 = v14[1];
        if (v74 >= 0xF000) {
          unsigned int v74 = 61440;
        }
        if (v74 <= 0x1000) {
          unsigned int v74 = 4096;
        }
        if (v75 >= 0xF000) {
          unsigned int v75 = 61440;
        }
        if (v75 <= 0x1000) {
          unsigned int v75 = 4096;
        }
        unsigned int v76 = v14[2];
        unsigned int v77 = v14[3];
        if (v76 >= 0xF000) {
          unsigned int v76 = 61440;
        }
        if (v76 <= 0x1000) {
          unsigned int v76 = 4096;
        }
        if (v77 >= 0xF000) {
          unsigned int v77 = 61440;
        }
        if (v77 <= 0x1000) {
          unsigned int v77 = 4096;
        }
        *int v73 = (((613566757 * (unint64_t)((-1044480 - v74 + (v74 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v76 + (v76 << 8)) >> 13)) >> 32)
                            + 1) >> 1;
        v73[1] = (((613566757 * (unint64_t)((-1044480 - v75 + (v75 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v77 + (v77 << 8)) >> 13)) >> 32)
                              + 1) >> 1;
        v72 += 2;
        v14 += 4;
      }
      while (v72 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_422f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = *a7 + *a8 * v18 + v16;
    uint64_t v27 = *a3 + *a4 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          unsigned int v29 = *(unsigned __int16 *)(v27 + 2 * i);
          if (v29 >= 0xEB00) {
            unsigned int v29 = 60160;
          }
          if (v29 <= 0x1000) {
            unsigned int v29 = 4096;
          }
          *(unsigned char *)(v26 + i) = (-1044480 - v29 + (v29 << 8)) / 0xDB00;
        }
      }
      v27 += v24;
      v26 += v25;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v30 = v12 & 1;
  if (v8 >= v30) {
    uint64_t v31 = v12 & 1;
  }
  else {
    uint64_t v31 = 0;
  }
  char v32 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v21 - v10;
  if (v12)
  {
    if (v32)
    {
      unsigned int v36 = *v14;
      if (v36 >= 0xF000) {
        unsigned int v36 = 61440;
      }
      if (v36 <= 0x1000) {
        int v37 = 4096;
      }
      else {
        int v37 = v36;
      }
      if (v14[1] >= 0xF000u) {
        unsigned int v38 = 61440;
      }
      else {
        unsigned int v38 = v14[1];
      }
      if (v38 <= 0x1000) {
        int v39 = 4096;
      }
      else {
        int v39 = v38;
      }
      char v34 = v14 + 4;
      *uint64_t v20 = (613566757 * (unint64_t)((-1044480 - v37 + (v37 << 8)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32;
      char v35 = v20 + 2;
    }
    else
    {
      char v34 = v14;
      char v35 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v40 = 0;
      do
      {
        int v41 = &v35[v40];
        unsigned int v42 = *v34;
        unsigned int v43 = v34[1];
        if (v42 >= 0xF000) {
          unsigned int v42 = 61440;
        }
        if (v42 <= 0x1000) {
          unsigned int v42 = 4096;
        }
        if (v43 >= 0xF000) {
          unsigned int v43 = 61440;
        }
        if (v43 <= 0x1000) {
          unsigned int v43 = 4096;
        }
        *int v41 = (613566757 * (unint64_t)((-1044480 - v42 + (v42 << 8)) >> 13)) >> 32;
        v41[1] = (613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32;
        v40 += 2;
        v34 += 4;
      }
      while (v40 < v33);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    v20 += v19;
  }
  if (v8 == v31)
  {
    unint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v44 = v8 - v31;
    do
    {
      unsigned int v46 = v14;
      unsigned int v47 = v20;
      if (v32)
      {
        unsigned int v48 = *v14;
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          int v49 = 4096;
        }
        else {
          int v49 = v48;
        }
        if (v14[1] >= 0xF000u) {
          unsigned int v50 = 61440;
        }
        else {
          unsigned int v50 = v14[1];
        }
        if (v50 <= 0x1000) {
          int v51 = 4096;
        }
        else {
          int v51 = v50;
        }
        unsigned int v46 = v14 + 4;
        *uint64_t v20 = (613566757 * (unint64_t)((-1044480 - v49 + (v49 << 8)) >> 13)) >> 32;
        v20[1] = (613566757 * (unint64_t)((-1044480 - v51 + (v51 << 8)) >> 13)) >> 32;
        unsigned int v47 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v52 = 0;
        do
        {
          unsigned int v53 = &v47[v52];
          unsigned int v54 = *v46;
          unsigned int v55 = v46[1];
          if (v54 >= 0xF000) {
            unsigned int v54 = 61440;
          }
          if (v54 <= 0x1000) {
            unsigned int v54 = 4096;
          }
          if (v55 >= 0xF000) {
            unsigned int v55 = 61440;
          }
          if (v55 <= 0x1000) {
            unsigned int v55 = 4096;
          }
          *unsigned int v53 = (613566757 * (unint64_t)((-1044480 - v54 + (v54 << 8)) >> 13)) >> 32;
          v53[1] = (613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32;
          v52 += 2;
          v46 += 4;
        }
        while (v52 < v33);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      v20 += v19;
      ++v45;
    }
    while (v45 != v44);
  }
  if (v44 + v30 < v8)
  {
    if (v32)
    {
      unsigned int v56 = *v14;
      unsigned int v57 = v14[1];
      if (v56 >= 0xF000) {
        unsigned int v56 = 61440;
      }
      if (v56 <= 0x1000) {
        unsigned int v56 = 4096;
      }
      if (v57 >= 0xF000) {
        unsigned int v57 = 61440;
      }
      if (v57 <= 0x1000) {
        unsigned int v57 = 4096;
      }
      v14 += 4;
      *uint64_t v20 = (613566757 * (unint64_t)((-1044480 - v56 + (v56 << 8)) >> 13)) >> 32;
      v20[1] = (613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v58 = 0;
      do
      {
        int v59 = &v20[v58];
        unsigned int v60 = *v14;
        unsigned int v61 = v14[1];
        if (v60 >= 0xF000) {
          unsigned int v60 = 61440;
        }
        if (v60 <= 0x1000) {
          unsigned int v60 = 4096;
        }
        if (v61 >= 0xF000) {
          unsigned int v61 = 61440;
        }
        if (v61 <= 0x1000) {
          unsigned int v61 = 4096;
        }
        *int v59 = (613566757 * (unint64_t)((-1044480 - v60 + (v60 << 8)) >> 13)) >> 32;
        v59[1] = (613566757 * (unint64_t)((-1044480 - v61 + (v61 << 8)) >> 13)) >> 32;
        v58 += 2;
        v14 += 4;
      }
      while (v58 < v33);
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_s4as_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  unint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v18 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + ((unint64_t)(v19 * v17) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v21 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16) {
    unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  }
  unint64_t v22 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v22 >= v18 - v17) {
    unint64_t v22 = v18 - v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    if (v13 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = *a3 + *a4 * v13 + 2 * v11 + v27;
    uint64_t v29 = a4[2];
    uint64_t v30 = a7[2] + v26 * v17 + v16;
    uint64_t v31 = *a7 + v25 * v17 + v16;
    uint64_t v32 = a3[2] + v29 * v13 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v30 + i) = *(_WORD *)(v32 + 2 * i);
          *(unsigned char *)(v31 + i) = *(unsigned char *)(v28 + 2 * i + 1);
        }
      }
      v28 += v24;
      v31 += v25;
      v32 += v29;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v22 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v21 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v36 = v15 + 8;
      unsigned int v38 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *uint64_t v20 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v20[1] = v38;
      int v37 = v20 + 2;
    }
    else
    {
      unsigned int v36 = v15;
      int v37 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v39 = 0;
      unint64_t v40 = v36 + 4;
      do
      {
        int v41 = &v37[v39];
        unsigned int v42 = (*(v40 - 1) + v40[3] + v40[v14 - 1] + v40[v14 + 3] + 2) >> 2;
        *int v41 = (*(v40 - 3) + v40[1] + v40[v14 - 3] + v40[v14 + 1] + 2) >> 2;
        v41[1] = v42;
        v39 += 2;
        v40 += 8;
      }
      while (v39 < v35);
    }
    v15 += 2 * v14;
    v20 += v19;
  }
  if (v22 != v34)
  {
    unint64_t v43 = 0;
    unint64_t v44 = v22 - v34;
    do
    {
      uint64_t v45 = v15;
      unsigned int v46 = v20;
      if (v8)
      {
        uint64_t v45 = v15 + 8;
        unsigned int v47 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *uint64_t v20 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v20[1] = v47;
        unsigned int v46 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v48 = 0;
        int v49 = v45 + 4;
        do
        {
          unsigned int v50 = &v46[v48];
          unsigned int v51 = (*(v49 - 1) + v49[3] + v49[v14 - 1] + v49[v14 + 3] + 2) >> 2;
          unsigned char *v50 = (*(v49 - 3) + v49[1] + v49[v14 - 3] + v49[v14 + 1] + 2) >> 2;
          v50[1] = v51;
          v48 += 2;
          v49 += 8;
        }
        while (v48 < v35);
      }
      v15 += 2 * v14;
      v20 += v19;
      v43 += 2;
    }
    while (v43 < v44);
  }
  return 0;
}

uint64_t vt_CopyDec_s4as_v0a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v18 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + ((unint64_t)(v19 * v17) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  if (v21 >= (unint64_t)((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16) {
    unint64_t v21 = ((*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE) - v16;
  }
  unint64_t v22 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v22 >= v18 - v17) {
    unint64_t v22 = v18 - v17;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    if (v13 >= v9) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = *a4;
    }
    uint64_t v28 = *a3 + *a4 * v13 + 2 * v11 + v27;
    uint64_t v29 = a4[2];
    uint64_t v30 = a7[2] + v26 * v17 + v16;
    uint64_t v31 = *a7 + v25 * v17 + v16;
    uint64_t v32 = a3[2] + v29 * v13 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v30 + i) = *(_WORD *)(v32 + 2 * i);
          *(unsigned char *)(v31 + i) = *(unsigned char *)(v28 + 2 * i + 1);
        }
      }
      v28 += v24;
      v31 += v25;
      v32 += v29;
      v30 += v26;
      ++v23;
    }
    while (v23 != v22);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v22 >= v12) {
    unint64_t v34 = v12;
  }
  else {
    unint64_t v34 = 0;
  }
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v21 - v10;
  if (v12)
  {
    if (v8)
    {
      char v38 = *(unsigned char *)(v15 + 3);
      uint64_t v36 = v15 + 8;
      *uint64_t v20 = *(unsigned char *)(v15 + 1);
      v20[1] = v38;
      int v37 = v20 + 2;
    }
    else
    {
      uint64_t v36 = v15;
      int v37 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        unint64_t v40 = &v37[v39];
        char v41 = *(unsigned char *)(v36 + 3);
        *unint64_t v40 = *(unsigned char *)(v36 + 1);
        v40[1] = v41;
        v39 += 2;
        v36 += 8;
      }
      while (v39 < v35);
    }
    v15 += 2 * v14;
    v20 += v19;
  }
  if (v22 != v34)
  {
    unint64_t v42 = 0;
    unint64_t v43 = v22 - v34;
    uint64_t v44 = 2 * v14;
    do
    {
      uint64_t v45 = v15;
      unsigned int v46 = v20;
      if (v8)
      {
        char v47 = *(unsigned char *)(v15 + 3);
        uint64_t v45 = v15 + 8;
        *uint64_t v20 = *(unsigned char *)(v15 + 1);
        v20[1] = v47;
        unsigned int v46 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v48 = 0;
        do
        {
          int v49 = &v46[v48];
          char v50 = *(unsigned char *)(v45 + 3);
          unsigned char *v49 = *(unsigned char *)(v45 + 1);
          v49[1] = v50;
          v48 += 2;
          v45 += 8;
        }
        while (v48 < v35);
      }
      v15 += v44;
      v20 += v19;
      v42 += 2;
    }
    while (v42 < v43);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = v19 - v18;
  if (((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13 < v19 - v18) {
    unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = *(unsigned char *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      unint64_t v34 = v15 + 8;
      unsigned int v36 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *unint64_t v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      unint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      char v38 = v34 + 4;
      do
      {
        unint64_t v39 = &v35[v37];
        unsigned int v40 = (*(v38 - 1) + v38[3] + v38[v14 - 1] + v38[v14 + 3] + 2) >> 2;
        *unint64_t v39 = (*(v38 - 3) + v38[1] + v38[v14 - 3] + v38[v14 + 1] + 2) >> 2;
        v39[1] = v40;
        v37 += 2;
        v38 += 8;
      }
      while (v37 < v33);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v41 = 0;
    unint64_t v42 = v24 - v32;
    do
    {
      unint64_t v43 = v15;
      uint64_t v44 = v21;
      if (v8)
      {
        unint64_t v43 = v15 + 8;
        unsigned int v45 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *unint64_t v21 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        v21[1] = v45;
        uint64_t v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        char v47 = v43 + 4;
        do
        {
          unint64_t v48 = &v44[v46];
          unsigned int v49 = (*(v47 - 1) + v47[3] + v47[v14 - 1] + v47[v14 + 3] + 2) >> 2;
          unsigned char *v48 = (*(v47 - 3) + v47[1] + v47[v14 - 3] + v47[v14 + 1] + 2) >> 2;
          v48[1] = v49;
          v46 += 2;
          v47 += 8;
        }
        while (v46 < v33);
      }
      v15 += 2 * v14;
      v21 += v20;
      v41 += 2;
    }
    while (v41 < v42);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_420v(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  if (v24 >= v19 - v18) {
    unint64_t v24 = v19 - v18;
  }
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = *a4;
    uint64_t v27 = *a8;
    if (v13 >= v9) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = *a4;
    }
    uint64_t v29 = *a3 + *a4 * v13 + 2 * v11 + v28;
    uint64_t v30 = *a7 + v27 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
          *(unsigned char *)(v30 + i) = *(unsigned char *)(v29 + 2 * i + 1);
      }
      v29 += v26;
      v30 += v27;
      ++v25;
    }
    while (v25 != v24);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v24 >= v12) {
    unint64_t v32 = v12;
  }
  else {
    unint64_t v32 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v33 = v22 - v10;
  if (v12)
  {
    if (v8)
    {
      char v36 = *(unsigned char *)(v15 + 3);
      uint64_t v34 = v15 + 8;
      *unint64_t v21 = *(unsigned char *)(v15 + 1);
      v21[1] = v36;
      unint64_t v35 = v21 + 2;
    }
    else
    {
      uint64_t v34 = v15;
      unint64_t v35 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v37 = 0;
      do
      {
        char v38 = &v35[v37];
        char v39 = *(unsigned char *)(v34 + 3);
        *char v38 = *(unsigned char *)(v34 + 1);
        v38[1] = v39;
        v37 += 2;
        v34 += 8;
      }
      while (v37 < v33);
    }
    v15 += 2 * v14;
    v21 += v20;
  }
  if (v24 != v32)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v24 - v32;
    uint64_t v42 = 2 * v14;
    do
    {
      uint64_t v43 = v15;
      uint64_t v44 = v21;
      if (v8)
      {
        char v45 = *(unsigned char *)(v15 + 3);
        uint64_t v43 = v15 + 8;
        *unint64_t v21 = *(unsigned char *)(v15 + 1);
        v21[1] = v45;
        uint64_t v44 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          char v47 = &v44[v46];
          char v48 = *(unsigned char *)(v43 + 3);
          *char v47 = *(unsigned char *)(v43 + 1);
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v33);
      }
      v15 += v42;
      v21 += v20;
      v40 += 2;
    }
    while (v40 < v41);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  unint64_t v25 = v19 - v18;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v29 = *a8;
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v28 + v30;
    uint64_t v32 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v34 = *(unsigned __int16 *)(v31 + 2 * i);
          if (v34 >= 0xEB00) {
            unsigned int v34 = 60160;
          }
          if (v34 <= 0x1000) {
            unsigned int v34 = 4096;
          }
          *(unsigned char *)(v32 + i) = (-1044480 - v34 + (v34 << 8)) / 0xDB00;
        }
      }
      v31 += v27;
      v32 += v29;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v39 = *v15;
      unsigned int v40 = v15[1];
      unsigned int v41 = *(unsigned __int16 *)((char *)v15 + v14);
      unsigned int v42 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
      if (v39 >= 0xF000) {
        unsigned int v39 = 61440;
      }
      if (v39 <= 0x1000) {
        unsigned int v39 = 4096;
      }
      if (v40 >= 0xF000) {
        unsigned int v40 = 61440;
      }
      if (v40 <= 0x1000) {
        unsigned int v40 = 4096;
      }
      if (v41 >= 0xF000) {
        unsigned int v41 = 61440;
      }
      if (v41 <= 0x1000) {
        unsigned int v41 = 4096;
      }
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      unsigned int v44 = v15[2];
      unsigned int v45 = v15[3];
      unint64_t v46 = (unsigned __int16 *)((char *)v15 + v14 + 4);
      unsigned int v47 = *v46;
      unsigned int v48 = v46[1];
      if (v44 >= 0xF000) {
        unsigned int v44 = 61440;
      }
      if (v44 <= 0x1000) {
        unsigned int v44 = 4096;
      }
      if (v45 >= 0xF000) {
        unsigned int v45 = 61440;
      }
      if (v45 <= 0x1000) {
        unsigned int v45 = 4096;
      }
      if (v47 >= 0xF000) {
        unsigned int v47 = 61440;
      }
      if (v47 <= 0x1000) {
        unsigned int v47 = 4096;
      }
      unint64_t v49 = (613566757 * (unint64_t)((-1044480 - v39 + (v39 << 8)) >> 13)) >> 32;
      if (v48 >= 0xF000) {
        unsigned int v48 = 61440;
      }
      if (v48 <= 0x1000) {
        int v50 = 4096;
      }
      else {
        int v50 = v48;
      }
      unint64_t v37 = v15 + 4;
      *unint64_t v21 = (v49
                          + ((613566757 * (unint64_t)((-1044480 - v44 + (v44 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v41 + (v41 << 8)) >> 13)) >> 32)
                          + ((613566757 * (unint64_t)((-1044480 - v47 + (v47 << 8)) >> 13)) >> 32)
                          + 2) >> 2;
      v21[1] = (((613566757 * (unint64_t)((-1044480 - v40 + (v40 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v50 + (v50 << 8)) >> 13)) >> 32)
                            + 2) >> 2;
      char v38 = v21 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      char v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v51 = 0;
      unint64_t v52 = v37 + 2;
      do
      {
        unsigned int v53 = *(v52 - 2);
        unsigned int v54 = (unsigned __int16 *)((char *)v52 + v14);
        if (v53 >= 0xF000) {
          unsigned int v53 = 61440;
        }
        if (v53 <= 0x1000) {
          int v55 = 4096;
        }
        else {
          int v55 = v53;
        }
        if (*(v52 - 1) >= 0xF000u) {
          unsigned int v56 = 61440;
        }
        else {
          unsigned int v56 = *(v52 - 1);
        }
        if (v56 <= 0x1000) {
          int v57 = 4096;
        }
        else {
          int v57 = v56;
        }
        if (*(unsigned __int16 *)((char *)v52 + v14 - 4) >= 0xF000u) {
          unsigned int v58 = 61440;
        }
        else {
          unsigned int v58 = *(unsigned __int16 *)((char *)v52 + v14 - 4);
        }
        if (v58 <= 0x1000) {
          int v59 = 4096;
        }
        else {
          int v59 = v58;
        }
        if (*(v54 - 1) >= 0xF000u) {
          unsigned int v60 = 61440;
        }
        else {
          unsigned int v60 = *(v54 - 1);
        }
        if (v60 <= 0x1000) {
          int v61 = 4096;
        }
        else {
          int v61 = v60;
        }
        unsigned int v62 = *v52;
        unsigned int v63 = *v54;
        if (v62 >= 0xF000) {
          unsigned int v62 = 61440;
        }
        if (v62 <= 0x1000) {
          int v64 = 4096;
        }
        else {
          int v64 = v62;
        }
        if (v52[1] >= 0xF000u) {
          unsigned int v65 = 61440;
        }
        else {
          unsigned int v65 = v52[1];
        }
        unsigned int v66 = v54[1];
        if (v65 <= 0x1000) {
          int v67 = 4096;
        }
        else {
          int v67 = v65;
        }
        if (v63 >= 0xF000) {
          unsigned int v63 = 61440;
        }
        unsigned int v68 = &v38[v51];
        if (v63 <= 0x1000) {
          unsigned int v63 = 4096;
        }
        unsigned int v69 = -1044480 - v55 + (v55 << 8);
        if (v66 >= 0xF000) {
          unsigned int v66 = 61440;
        }
        unint64_t v70 = (613566757 * (unint64_t)(v69 >> 13)) >> 32;
        unint64_t v71 = (613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32;
        unint64_t v72 = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
        uint64_t v73 = 613566757 * ((-1044480 - v61 + (v61 << 8)) >> 13);
        if (v66 <= 0x1000) {
          unsigned int v66 = 4096;
        }
        *unsigned int v68 = (v70
                            + ((613566757 * (unint64_t)((-1044480 - v64 + (v64 << 8)) >> 13)) >> 32)
                            + v72
                            + ((613566757 * (unint64_t)((-1044480 - v63 + (v63 << 8)) >> 13)) >> 32)
                            + 2) >> 2;
        v68[1] = (v71
                              + ((613566757 * (unint64_t)((-1044480 - v67 + (v67 << 8)) >> 13)) >> 32)
                              + HIDWORD(v73)
                              + ((613566757 * (unint64_t)((-1044480 - v66 + (v66 << 8)) >> 13)) >> 32)
                              + 2) >> 2;
        v51 += 2;
        v52 += 4;
      }
      while (v51 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v74 = 0;
    unint64_t v75 = v24 - v35;
    do
    {
      unsigned int v76 = v15;
      unsigned int v77 = v21;
      if (v9)
      {
        unsigned int v78 = *v15;
        unsigned int v79 = v15[1];
        unsigned int v80 = *(unsigned __int16 *)((char *)v15 + v14);
        unsigned int v81 = *(unsigned __int16 *)((char *)v15 + v14 + 2);
        if (v78 >= 0xF000) {
          unsigned int v78 = 61440;
        }
        if (v78 <= 0x1000) {
          unsigned int v78 = 4096;
        }
        if (v79 >= 0xF000) {
          unsigned int v79 = 61440;
        }
        if (v79 <= 0x1000) {
          unsigned int v79 = 4096;
        }
        if (v80 >= 0xF000) {
          unsigned int v80 = 61440;
        }
        if (v80 <= 0x1000) {
          unsigned int v80 = 4096;
        }
        if (v81 >= 0xF000) {
          unsigned int v81 = 61440;
        }
        if (v81 <= 0x1000) {
          int v82 = 4096;
        }
        else {
          int v82 = v81;
        }
        unsigned int v83 = v15[2];
        unsigned int v84 = v15[3];
        unsigned int v85 = (unsigned __int16 *)((char *)v15 + v14 + 4);
        unsigned int v86 = *v85;
        unsigned int v87 = v85[1];
        if (v83 >= 0xF000) {
          unsigned int v83 = 61440;
        }
        if (v83 <= 0x1000) {
          unsigned int v83 = 4096;
        }
        if (v84 >= 0xF000) {
          unsigned int v84 = 61440;
        }
        if (v84 <= 0x1000) {
          unsigned int v84 = 4096;
        }
        if (v86 >= 0xF000) {
          unsigned int v86 = 61440;
        }
        if (v86 <= 0x1000) {
          unsigned int v86 = 4096;
        }
        unint64_t v88 = (613566757 * (unint64_t)((-1044480 - v78 + (v78 << 8)) >> 13)) >> 32;
        if (v87 >= 0xF000) {
          unsigned int v87 = 61440;
        }
        if (v87 <= 0x1000) {
          int v89 = 4096;
        }
        else {
          int v89 = v87;
        }
        unsigned int v76 = v15 + 4;
        *unint64_t v21 = (v88
                            + ((613566757 * (unint64_t)((-1044480 - v83 + (v83 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v80 + (v80 << 8)) >> 13)) >> 32)
                            + ((613566757 * (unint64_t)((-1044480 - v86 + (v86 << 8)) >> 13)) >> 32)
                            + 2) >> 2;
        v21[1] = (((613566757 * (unint64_t)((-1044480 - v79 + (v79 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v84 + (v84 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v82 + (v82 << 8)) >> 13)) >> 32)
                              + ((613566757 * (unint64_t)((-1044480 - v89 + (v89 << 8)) >> 13)) >> 32)
                              + 2) >> 2;
        unsigned int v77 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v90 = 0;
        unsigned int v91 = v76 + 2;
        do
        {
          unsigned int v92 = *(v91 - 2);
          unsigned int v93 = (unsigned __int16 *)((char *)v91 + v14);
          if (v92 >= 0xF000) {
            unsigned int v92 = 61440;
          }
          if (v92 <= 0x1000) {
            int v94 = 4096;
          }
          else {
            int v94 = v92;
          }
          if (*(v91 - 1) >= 0xF000u) {
            unsigned int v95 = 61440;
          }
          else {
            unsigned int v95 = *(v91 - 1);
          }
          if (v95 <= 0x1000) {
            int v96 = 4096;
          }
          else {
            int v96 = v95;
          }
          if (*(unsigned __int16 *)((char *)v91 + v14 - 4) >= 0xF000u) {
            unsigned int v97 = 61440;
          }
          else {
            unsigned int v97 = *(unsigned __int16 *)((char *)v91 + v14 - 4);
          }
          if (v97 <= 0x1000) {
            int v98 = 4096;
          }
          else {
            int v98 = v97;
          }
          if (*(v93 - 1) >= 0xF000u) {
            unsigned int v99 = 61440;
          }
          else {
            unsigned int v99 = *(v93 - 1);
          }
          if (v99 <= 0x1000) {
            int v100 = 4096;
          }
          else {
            int v100 = v99;
          }
          unsigned int v101 = *v91;
          unsigned int v102 = *v93;
          if (v101 >= 0xF000) {
            unsigned int v101 = 61440;
          }
          if (v101 <= 0x1000) {
            int v103 = 4096;
          }
          else {
            int v103 = v101;
          }
          if (v91[1] >= 0xF000u) {
            unsigned int v104 = 61440;
          }
          else {
            unsigned int v104 = v91[1];
          }
          unsigned int v105 = v93[1];
          if (v104 <= 0x1000) {
            int v106 = 4096;
          }
          else {
            int v106 = v104;
          }
          if (v102 >= 0xF000) {
            unsigned int v102 = 61440;
          }
          unsigned int v107 = &v77[v90];
          if (v102 <= 0x1000) {
            unsigned int v102 = 4096;
          }
          unsigned int v108 = -1044480 - v94 + (v94 << 8);
          if (v105 >= 0xF000) {
            unsigned int v105 = 61440;
          }
          unint64_t v109 = (613566757 * (unint64_t)(v108 >> 13)) >> 32;
          unint64_t v110 = (613566757 * (unint64_t)((-1044480 - v96 + (v96 << 8)) >> 13)) >> 32;
          unint64_t v111 = (613566757 * (unint64_t)((-1044480 - v98 + (v98 << 8)) >> 13)) >> 32;
          uint64_t v112 = 613566757 * ((-1044480 - v100 + (v100 << 8)) >> 13);
          if (v105 <= 0x1000) {
            unsigned int v105 = 4096;
          }
          *unsigned int v107 = (v109
                               + ((613566757 * (unint64_t)((-1044480 - v103 + (v103 << 8)) >> 13)) >> 32)
                               + v111
                               + ((613566757 * (unint64_t)((-1044480 - v102 + (v102 << 8)) >> 13)) >> 32)
                               + 2) >> 2;
          v107[1] = (v110
                                 + ((613566757 * (unint64_t)((-1044480 - v106 + (v106 << 8)) >> 13)) >> 32)
                                 + HIDWORD(v112)
                                 + ((613566757 * (unint64_t)((-1044480 - v105 + (v105 << 8)) >> 13)) >> 32)
                                 + 2) >> 2;
          v90 += 2;
          v91 += 4;
        }
        while (v90 < v36);
      }
      v15 += v14;
      v21 += v20;
      v74 += 2;
    }
    while (v74 < v75);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_420f(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9));
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  unint64_t v21 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  unint64_t v24 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  unint64_t v25 = v19 - v18;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  if (v24)
  {
    uint64_t v26 = 0;
    uint64_t v27 = *a4;
    uint64_t v28 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v29 = *a8;
    if (v13 >= v8) {
      uint64_t v30 = 0;
    }
    else {
      uint64_t v30 = *a4;
    }
    uint64_t v31 = v28 + v30;
    uint64_t v32 = *a7 + v29 * v18 + v16;
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          unsigned int v34 = *(unsigned __int16 *)(v31 + 2 * i);
          if (v34 >= 0xEB00) {
            unsigned int v34 = 60160;
          }
          if (v34 <= 0x1000) {
            unsigned int v34 = 4096;
          }
          *(unsigned char *)(v32 + i) = (-1044480 - v34 + (v34 << 8)) / 0xDB00;
        }
      }
      v31 += v27;
      v32 += v29;
      ++v26;
    }
    while (v26 != v24);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v24 >= v12) {
    unint64_t v35 = v12;
  }
  else {
    unint64_t v35 = 0;
  }
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v36 = v22 - v10;
  if (v12)
  {
    if (v9)
    {
      unsigned int v39 = *v15;
      if (v39 >= 0xF000) {
        unsigned int v39 = 61440;
      }
      if (v39 <= 0x1000) {
        int v40 = 4096;
      }
      else {
        int v40 = v39;
      }
      if (v15[1] >= 0xF000u) {
        unsigned int v41 = 61440;
      }
      else {
        unsigned int v41 = v15[1];
      }
      if (v41 <= 0x1000) {
        int v42 = 4096;
      }
      else {
        int v42 = v41;
      }
      unint64_t v37 = v15 + 4;
      *unint64_t v21 = (613566757 * (unint64_t)((-1044480 - v40 + (v40 << 8)) >> 13)) >> 32;
      v21[1] = (613566757 * (unint64_t)((-1044480 - v42 + (v42 << 8)) >> 13)) >> 32;
      char v38 = v21 + 2;
    }
    else
    {
      unint64_t v37 = v15;
      char v38 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v43 = 0;
      do
      {
        unsigned int v44 = &v38[v43];
        unsigned int v45 = *v37;
        unsigned int v46 = v37[1];
        if (v45 >= 0xF000) {
          unsigned int v45 = 61440;
        }
        if (v45 <= 0x1000) {
          unsigned int v45 = 4096;
        }
        if (v46 >= 0xF000) {
          unsigned int v46 = 61440;
        }
        if (v46 <= 0x1000) {
          unsigned int v46 = 4096;
        }
        unsigned char *v44 = (613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32;
        v44[1] = (613566757 * (unint64_t)((-1044480 - v46 + (v46 << 8)) >> 13)) >> 32;
        v43 += 2;
        v37 += 4;
      }
      while (v43 < v36);
    }
    v15 += v14;
    v21 += v20;
  }
  if (v24 != v35)
  {
    unint64_t v47 = 0;
    unint64_t v48 = v24 - v35;
    uint64_t v49 = 2 * v14;
    do
    {
      int v50 = v15;
      unint64_t v51 = v21;
      if (v9)
      {
        unsigned int v52 = *v15;
        if (v52 >= 0xF000) {
          unsigned int v52 = 61440;
        }
        if (v52 <= 0x1000) {
          int v53 = 4096;
        }
        else {
          int v53 = v52;
        }
        if (v15[1] >= 0xF000u) {
          unsigned int v54 = 61440;
        }
        else {
          unsigned int v54 = v15[1];
        }
        if (v54 <= 0x1000) {
          int v55 = 4096;
        }
        else {
          int v55 = v54;
        }
        int v50 = v15 + 4;
        *unint64_t v21 = (613566757 * (unint64_t)((-1044480 - v53 + (v53 << 8)) >> 13)) >> 32;
        v21[1] = (613566757 * (unint64_t)((-1044480 - v55 + (v55 << 8)) >> 13)) >> 32;
        unint64_t v51 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v56 = 0;
        do
        {
          int v57 = &v51[v56];
          unsigned int v58 = *v50;
          unsigned int v59 = v50[1];
          if (v58 >= 0xF000) {
            unsigned int v58 = 61440;
          }
          if (v58 <= 0x1000) {
            unsigned int v58 = 4096;
          }
          if (v59 >= 0xF000) {
            unsigned int v59 = 61440;
          }
          if (v59 <= 0x1000) {
            unsigned int v59 = 4096;
          }
          unsigned char *v57 = (613566757 * (unint64_t)((-1044480 - v58 + (v58 << 8)) >> 13)) >> 32;
          v57[1] = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
          v56 += 2;
          v50 += 4;
        }
        while (v56 < v36);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v49);
      v21 += v20;
      v47 += 2;
    }
    while (v47 < v48);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int8 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    unint64_t v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v34 + i) = *(unsigned char *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      char v38 = v15 + 8;
      unsigned int v41 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
      *unint64_t v22 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
      unsigned int v39 = v22 + 1;
      *unint64_t v23 = v41;
      int v40 = v23 + 1;
    }
    else
    {
      char v38 = v15;
      unsigned int v39 = v22;
      int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v42 = 0;
      unint64_t v43 = v38 + 4;
      do
      {
        unsigned int v44 = *(v43 - 1) + v43[3] + v43[v14 - 1] + v43[v14 + 3] + 2;
        *v39++ = (*(v43 - 3) + v43[1] + v43[v14 - 3] + v43[v14 + 1] + 2) >> 2;
        *v40++ = v44 >> 2;
        v42 += 2;
        v43 += 8;
      }
      while (v42 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    unint64_t v45 = 0;
    unint64_t v46 = v26 - v36;
    do
    {
      unint64_t v47 = v15;
      unint64_t v48 = v22;
      uint64_t v49 = v23;
      if (v8)
      {
        unint64_t v47 = v15 + 8;
        unsigned int v50 = (v15[3] + v15[7] + v15[v14 + 3] + v15[v14 + 7] + 2) >> 2;
        *unint64_t v22 = (v15[1] + v15[5] + v15[v14 + 1] + v15[v14 + 5] + 2) >> 2;
        unint64_t v48 = v22 + 1;
        *unint64_t v23 = v50;
        uint64_t v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v51 = 0;
        unsigned int v52 = v47 + 4;
        do
        {
          unsigned int v53 = *(v52 - 1) + v52[3] + v52[v14 - 1] + v52[v14 + 3] + 2;
          *v48++ = (*(v52 - 3) + v52[1] + v52[v14 - 3] + v52[v14 + 1] + 2) >> 2;
          *v49++ = v53 >> 2;
          v51 += 2;
          v52 += 8;
        }
        while (v51 < v37);
      }
      v15 += 2 * v14;
      v22 += v20;
      v23 += v21;
      v45 += 2;
    }
    while (v45 < v46);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_y420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v8 = *(void *)(a2 + 40);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  unint64_t v12 = v8 & 1;
  unint64_t v13 = v12 + v8;
  uint64_t v14 = a4[1];
  uint64_t v15 = a3[1] + v14 * (v12 + v8) + 4 * (v10 + v9);
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v8) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a8;
    uint64_t v31 = *a3 + v29 * v13 + 2 * v11;
    if (v13 >= v8) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    uint64_t v33 = v31 + v32;
    unint64_t v34 = *a7 + v30 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
          *(unsigned char *)(v34 + i) = *(unsigned char *)(v33 + 2 * i + 1);
      }
      v33 += v29;
      v34 += v30;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v9 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v9 & 1;
  }
  if (v26 >= v12) {
    unint64_t v36 = v12;
  }
  else {
    unint64_t v36 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v37 = v24 - v10;
  if (v12)
  {
    if (v9)
    {
      char v41 = *(unsigned char *)(v15 + 3);
      uint64_t v38 = v15 + 8;
      *unint64_t v22 = *(unsigned char *)(v15 + 1);
      unsigned int v39 = v22 + 1;
      *unint64_t v23 = v41;
      int v40 = v23 + 1;
    }
    else
    {
      uint64_t v38 = v15;
      unsigned int v39 = v22;
      int v40 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v42 = 0;
      do
      {
        char v43 = *(unsigned char *)(v38 + 3);
        *v39++ = *(unsigned char *)(v38 + 1);
        *v40++ = v43;
        v42 += 2;
        v38 += 8;
      }
      while (v42 < v37);
    }
    v15 += 2 * v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v36)
  {
    unint64_t v44 = 0;
    unint64_t v45 = v26 - v36;
    uint64_t v46 = 2 * v14;
    do
    {
      uint64_t v47 = v15;
      unint64_t v48 = v22;
      uint64_t v49 = v23;
      if (v9)
      {
        char v50 = *(unsigned char *)(v15 + 3);
        uint64_t v47 = v15 + 8;
        *unint64_t v22 = *(unsigned char *)(v15 + 1);
        unint64_t v48 = v22 + 1;
        *unint64_t v23 = v50;
        uint64_t v49 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v51 = 0;
        do
        {
          char v52 = *(unsigned char *)(v47 + 3);
          *v48++ = *(unsigned char *)(v47 + 1);
          *v49++ = v52;
          v51 += 2;
          v47 += 8;
        }
        while (v51 < v37);
      }
      v15 += v46;
      v22 += v20;
      v23 += v21;
      v44 += 2;
    }
    while (v44 < v45);
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (__int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v31 = *a8;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v30 + v32;
    unint64_t v34 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(unsigned char *)(v34 + i) = (255 * v36 - 1044480) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      v42.i16[0] = *v15;
      v42.i16[1] = *(__int16 *)((char *)v15 + v14);
      v42.i16[2] = v15[2];
      char v43 = (__int16 *)((char *)v15 + v14 + 4);
      v42.i16[3] = *v43;
      uint32x4_t v44 = (uint32x4_t)vdupq_n_s32(0xFFF01000);
      uint32x4_t v45 = vshrq_n_u32(vmlal_u16(v44, vmax_u16(vmin_u16(v42, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
      uint32x4_t v46 = (uint32x4_t)vdupq_n_s32(0x24924925u);
      v47.i16[0] = v15[1];
      v47.i16[1] = *(__int16 *)((char *)v15 + v14 + 2);
      v47.i16[2] = v15[3];
      unsigned int v39 = v15 + 4;
      v47.i16[3] = v43[1];
      uint32x4_t v48 = vshrq_n_u32(vmlal_u16(v44, vmax_u16(vmin_u16(v47, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
      *unint64_t v22 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v45.i8, *(uint32x2_t *)v46.i8), (int32x4_t)vmull_high_u32(v45, v46)))+ 2) >> 2;
      int v40 = v22 + 1;
      *unint64_t v23 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v48.i8, *(uint32x2_t *)v46.i8), (int32x4_t)vmull_high_u32(v48, v46)))+ 2) >> 2;
      char v41 = v23 + 1;
    }
    else
    {
      unsigned int v39 = v15;
      int v40 = v22;
      char v41 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v49 = 0;
      char v50 = v39 + 2;
      uint32x4_t v51 = (uint32x4_t)vdupq_n_s32(0xFFF01000);
      uint32x4_t v52 = (uint32x4_t)vdupq_n_s32(0x24924925u);
      do
      {
        v53.i16[0] = *(v50 - 2);
        v53.i16[1] = *(__int16 *)((char *)v50 + v14 - 4);
        v53.i16[2] = *v50;
        v53.i16[3] = *(__int16 *)((char *)v50 + v14);
        v54.i16[0] = *(v50 - 1);
        v54.i16[1] = *(__int16 *)((char *)v50 + v14 - 2);
        v54.i16[2] = v50[1];
        v54.i16[3] = *(__int16 *)((char *)v50 + v14 + 2);
        uint32x4_t v55 = vshrq_n_u32(vmlal_u16(v51, vmax_u16(vmin_u16(v53, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
        uint32x4_t v56 = vshrq_n_u32(vmlal_u16(v51, vmax_u16(vmin_u16(v54, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
        *v40++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v55.i8, *(uint32x2_t *)v52.i8), (int32x4_t)vmull_high_u32(v55, v52)))+ 2) >> 2;
        *v41++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v56.i8, *(uint32x2_t *)v52.i8), (int32x4_t)vmull_high_u32(v56, v52)))+ 2) >> 2;
        v49 += 2;
        v50 += 4;
      }
      while (v49 < v38);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v37)
  {
    unint64_t v57 = 0;
    unint64_t v58 = v26 - v37;
    uint32x4_t v59 = (uint32x4_t)vdupq_n_s32(0xFFF01000);
    uint32x4_t v60 = (uint32x4_t)vdupq_n_s32(0x24924925u);
    do
    {
      int v61 = v15;
      unsigned int v62 = v22;
      unsigned int v63 = v23;
      if (v8)
      {
        v64.i16[0] = *v15;
        v64.i16[1] = *(__int16 *)((char *)v15 + v14);
        v64.i16[2] = v15[2];
        unsigned int v65 = (__int16 *)((char *)v15 + v14 + 4);
        int v61 = v15 + 4;
        v64.i16[3] = *v65;
        uint32x4_t v66 = vshrq_n_u32(vmlal_u16(v59, vmax_u16(vmin_u16(v64, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
        v67.i16[0] = v15[1];
        v67.i16[1] = *(__int16 *)((char *)v15 + v14 + 2);
        v67.i16[2] = v15[3];
        v67.i16[3] = v65[1];
        uint32x4_t v68 = vshrq_n_u32(vmlal_u16(v59, vmax_u16(vmin_u16(v67, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
        *unint64_t v22 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v66.i8, *(uint32x2_t *)v60.i8), (int32x4_t)vmull_high_u32(v66, v60)))+ 2) >> 2;
        unsigned int v62 = v22 + 1;
        *unint64_t v23 = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v68.i8, *(uint32x2_t *)v60.i8), (int32x4_t)vmull_high_u32(v68, v60)))+ 2) >> 2;
        unsigned int v63 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v69 = 0;
        unint64_t v70 = v61 + 2;
        do
        {
          v71.i16[0] = *(v70 - 2);
          v71.i16[1] = *(__int16 *)((char *)v70 + v14 - 4);
          v71.i16[2] = *v70;
          v71.i16[3] = *(__int16 *)((char *)v70 + v14);
          v72.i16[0] = *(v70 - 1);
          v72.i16[1] = *(__int16 *)((char *)v70 + v14 - 2);
          v72.i16[2] = v70[1];
          v72.i16[3] = *(__int16 *)((char *)v70 + v14 + 2);
          uint32x4_t v73 = vshrq_n_u32(vmlal_u16(v59, vmax_u16(vmin_u16(v71, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
          uint32x4_t v74 = vshrq_n_u32(vmlal_u16(v59, vmax_u16(vmin_u16(v72, (uint16x4_t)0xF000F000F000F000), (uint16x4_t)0x1000100010001000), (uint16x4_t)0xFF00FF00FF00FFLL), 0xDuLL);
          *v62++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v73.i8, *(uint32x2_t *)v60.i8), (int32x4_t)vmull_high_u32(v73, v60)))+ 2) >> 2;
          *v63++ = (vaddvq_s32(vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v74.i8, *(uint32x2_t *)v60.i8), (int32x4_t)vmull_high_u32(v74, v60)))+ 2) >> 2;
          v69 += 2;
          v70 += 4;
        }
        while (v69 < v38);
      }
      v15 += v14;
      v22 += v20;
      v23 += v21;
      v57 += 2;
    }
    while (v57 < v58);
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_f420(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  unint64_t v10 = v8 & 1;
  uint64_t v11 = v10 + v8;
  unint64_t v12 = v9 & 1;
  unint64_t v13 = v12 + v9;
  uint64_t v14 = a4[1];
  uint64_t v15 = (unsigned __int16 *)(a3[1] + v14 * (v12 + v9) + 4 * (v10 + v8));
  unint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = (*(void *)(a6 + 40) & 1) + *(void *)(a6 + 40);
  uint64_t v19 = (*(_DWORD *)(a6 + 24) + *(void *)(a6 + 40)) & 0xFFFFFFFE;
  uint64_t v20 = a8[1];
  uint64_t v21 = a8[2];
  unint64_t v22 = (unsigned char *)(a7[1] + ((unint64_t)(v20 * v18) >> 1) + (v16 >> 1));
  unint64_t v23 = (unsigned char *)(a7[2] + ((unint64_t)(v21 * v18) >> 1) + (v16 >> 1));
  unint64_t v24 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v10 + v8);
  unint64_t v25 = v17 - v16;
  if (v24 >= v25) {
    unint64_t v24 = v25;
  }
  unint64_t v26 = ((*(_DWORD *)(a2 + 24) + v9) & 0xFFFFFFFE) - v13;
  unint64_t v27 = v19 - v18;
  if (v26 >= v27) {
    unint64_t v26 = v27;
  }
  if (v26)
  {
    uint64_t v28 = 0;
    uint64_t v29 = *a4;
    uint64_t v30 = *a3 + *a4 * v13 + 2 * v11;
    uint64_t v31 = *a8;
    if (v13 >= v9) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = *a4;
    }
    uint64_t v33 = v30 + v32;
    unint64_t v34 = *a7 + v31 * v18 + v16;
    do
    {
      if (v24)
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          unsigned int v36 = *(unsigned __int16 *)(v33 + 2 * i);
          if (v36 >= 0xEB00) {
            unsigned int v36 = 60160;
          }
          if (v36 <= 0x1000) {
            unsigned int v36 = 4096;
          }
          *(unsigned char *)(v34 + i) = (-1044480 - v36 + (v36 << 8)) / 0xDB00;
        }
      }
      v33 += v29;
      v34 += v31;
      ++v28;
    }
    while (v28 != v26);
    uint64_t v8 = *(void *)(a2 + 32);
    unint64_t v12 = *(void *)(a2 + 40) & 1;
    unint64_t v10 = v8 & 1;
  }
  if (v26 >= v12) {
    unint64_t v37 = v12;
  }
  else {
    unint64_t v37 = 0;
  }
  if (v24 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v38 = v24 - v10;
  if (v12)
  {
    if (v8)
    {
      unsigned int v42 = *v15;
      if (v42 >= 0xF000) {
        unsigned int v42 = 61440;
      }
      if (v42 <= 0x1000) {
        int v43 = 4096;
      }
      else {
        int v43 = v42;
      }
      if (v15[1] >= 0xF000u) {
        unsigned int v44 = 61440;
      }
      else {
        unsigned int v44 = v15[1];
      }
      if (v44 <= 0x1000) {
        int v45 = 4096;
      }
      else {
        int v45 = v44;
      }
      unsigned int v39 = v15 + 4;
      unint64_t v46 = (613566757 * (unint64_t)((-1044480 - v45 + (v45 << 8)) >> 13)) >> 32;
      *unint64_t v22 = (613566757 * (unint64_t)((-1044480 - v43 + (v43 << 8)) >> 13)) >> 32;
      int v40 = v22 + 1;
      *unint64_t v23 = v46;
      char v41 = v23 + 1;
    }
    else
    {
      unsigned int v39 = v15;
      int v40 = v22;
      char v41 = v23;
    }
    if (v24 != v10)
    {
      unint64_t v47 = 0;
      do
      {
        unsigned int v48 = *v39;
        unsigned int v49 = v39[1];
        if (v48 >= 0xF000) {
          unsigned int v48 = 61440;
        }
        if (v48 <= 0x1000) {
          unsigned int v48 = 4096;
        }
        if (v49 >= 0xF000) {
          unsigned int v49 = 61440;
        }
        if (v49 <= 0x1000) {
          unsigned int v49 = 4096;
        }
        *v40++ = (613566757 * (unint64_t)((-1044480 - v48 + (v48 << 8)) >> 13)) >> 32;
        *v41++ = (613566757 * (unint64_t)((-1044480 - v49 + (v49 << 8)) >> 13)) >> 32;
        v47 += 2;
        v39 += 4;
      }
      while (v47 < v38);
    }
    v15 += v14;
    v22 += v20;
    v23 += v21;
  }
  if (v26 != v37)
  {
    unint64_t v50 = 0;
    unint64_t v51 = v26 - v37;
    uint64_t v52 = 2 * v14;
    do
    {
      uint16x4_t v53 = v15;
      uint16x4_t v54 = v22;
      uint32x4_t v55 = v23;
      if (v8)
      {
        unsigned int v56 = *v15;
        if (v56 >= 0xF000) {
          unsigned int v56 = 61440;
        }
        if (v56 <= 0x1000) {
          int v57 = 4096;
        }
        else {
          int v57 = v56;
        }
        if (v15[1] >= 0xF000u) {
          unsigned int v58 = 61440;
        }
        else {
          unsigned int v58 = v15[1];
        }
        if (v58 <= 0x1000) {
          int v59 = 4096;
        }
        else {
          int v59 = v58;
        }
        uint16x4_t v53 = v15 + 4;
        unint64_t v60 = (613566757 * (unint64_t)((-1044480 - v59 + (v59 << 8)) >> 13)) >> 32;
        *unint64_t v22 = (613566757 * (unint64_t)((-1044480 - v57 + (v57 << 8)) >> 13)) >> 32;
        uint16x4_t v54 = v22 + 1;
        *unint64_t v23 = v60;
        uint32x4_t v55 = v23 + 1;
      }
      if (v24 != v10)
      {
        unint64_t v61 = 0;
        do
        {
          unsigned int v62 = *v53;
          unsigned int v63 = v53[1];
          if (v62 >= 0xF000) {
            unsigned int v62 = 61440;
          }
          if (v62 <= 0x1000) {
            unsigned int v62 = 4096;
          }
          if (v63 >= 0xF000) {
            unsigned int v63 = 61440;
          }
          if (v63 <= 0x1000) {
            unsigned int v63 = 4096;
          }
          *v54++ = (613566757 * (unint64_t)((-1044480 - v62 + (v62 << 8)) >> 13)) >> 32;
          *v55++ = (613566757 * (unint64_t)((-1044480 - v63 + (v63 << 8)) >> 13)) >> 32;
          v61 += 2;
          v53 += 4;
        }
        while (v61 < v38);
      }
      uint64_t v15 = (unsigned __int16 *)((char *)v15 + v52);
      v22 += v20;
      v23 += v21;
      v50 += 2;
    }
    while (v50 < v51);
  }
  return 0;
}

uint64_t vt_Copy_sv44_y416(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + 2 * a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = *a3 + *a4 * v15;
    uint64_t v18 = a3[1] + v12 * v15 + 4 * v16;
    uint64_t v19 = v17 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v20 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v22 = v14 + 2 * v20;
          int v23 = *(_DWORD *)(v18 + v20);
          __int16 v24 = *(_WORD *)(v19 + 2 * i);
          *(_WORD *)uint64_t v22 = -1;
          *(_WORD *)(v22 + 2) = v24;
          *(_DWORD *)(v22 + 4) = v23;
          v20 += 4;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_sv44_y408(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (v8 >= a6[2]) {
    unint64_t v8 = a6[2];
  }
  if (v9 >= a6[3]) {
    unint64_t v9 = a6[3];
  }
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *a4;
    uint64_t v12 = a4[1];
    uint64_t v13 = *a8;
    uint64_t v14 = *a7 + *a8 * a6[5] + a6[4];
    uint64_t v16 = a2[4];
    uint64_t v15 = a2[5];
    uint64_t v17 = *a3 + *a4 * v15;
    uint64_t v18 = a3[1] + v12 * v15 + 4 * v16;
    uint64_t v19 = v17 + 2 * v16;
    do
    {
      if (v8)
      {
        uint64_t v20 = 0;
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v22 = (unsigned char *)(v14 + v20);
          char v23 = *(unsigned char *)(v18 + v20 + 1);
          char v24 = *(unsigned char *)(v18 + v20 + 3);
          char v25 = *(unsigned char *)(v19 + 2 * i + 1);
          *uint64_t v22 = -1;
          v22[1] = v25;
          v22[2] = v23;
          v22[3] = v24;
          v20 += 4;
        }
      }
      v19 += v11;
      v14 += v13;
      v18 += v12;
      ++v10;
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t vt_Copy_sv44_s4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a4[1];
  uint64_t v11 = (int *)(a3[1] + v10 * v9 + 4 * v8);
  uint64_t v12 = a6[4];
  uint64_t v13 = a6[5];
  unint64_t v14 = a6[2];
  unint64_t v15 = a6[3];
  uint64_t v16 = a8[1];
  uint64_t v17 = (int *)(a7[1] + v16 * v13 + 4 * v12);
  if (a2[2] >= v14) {
    unint64_t v18 = v14;
  }
  else {
    unint64_t v18 = a2[2];
  }
  if (a2[3] >= v15) {
    unint64_t v19 = v15;
  }
  else {
    unint64_t v19 = a2[3];
  }
  if (v19)
  {
    uint64_t v50 = a8[1];
    uint64_t v51 = a4[1];
    unint64_t v52 = v19;
    uint64_t v20 = *a4;
    uint64_t v21 = *a8;
    uint64_t v22 = a8[2];
    char v23 = (char *)(a7[2] + v22 * v13 + 2 * v12);
    char v24 = (char *)(*a7 + *a8 * v13 + 2 * v12);
    char v25 = (char *)(*a3 + *a4 * v9 + 2 * v8);
    unint64_t v53 = v18;
    size_t v26 = 2 * v18;
    do
    {
      memcpy(v24, v25, v26);
      memset(v23, 255, v26);
      v25 += v20;
      v24 += v21;
      v23 += v22;
      --v19;
    }
    while (v19);
    uint64_t v16 = v50;
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[5];
    unint64_t v19 = v52;
    unint64_t v18 = v53;
    uint64_t v10 = v51;
  }
  unint64_t v27 = v9 & 1;
  if (v19 >= v27) {
    uint64_t v28 = v9 & 1;
  }
  else {
    uint64_t v28 = 0;
  }
  char v29 = v8;
  unint64_t v30 = v8 & 1;
  if (v18 >= v30) {
    unint64_t v31 = v30;
  }
  else {
    unint64_t v31 = 0;
  }
  unint64_t v32 = v18 - v31;
  if (v9)
  {
    uint64_t v33 = v11;
    if (v29)
    {
      uint64_t v33 = v11 + 1;
      *uint64_t v17 = *v11;
      unint64_t v34 = v17 + 1;
    }
    else
    {
      unint64_t v34 = v17;
    }
    if (v18 == v31)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v18 - v31;
      do
      {
        int v37 = *v33++;
        *v34++ = v37;
        --v36;
      }
      while (v36);
      unint64_t v35 = v18 - v31;
    }
    if (v35 + v30 < v18) {
      *unint64_t v34 = *v33;
    }
    uint64_t v11 = (int *)((char *)v11 + v10);
    uint64_t v17 = (int *)((char *)v17 + v16);
  }
  if (v19 == v28)
  {
    unint64_t v38 = 0;
  }
  else
  {
    uint64_t v39 = 0;
    unint64_t v38 = v19 - v28;
    do
    {
      int v40 = v11;
      char v41 = v17;
      if (v29)
      {
        int v40 = v11 + 1;
        *uint64_t v17 = *v11;
        char v41 = v17 + 1;
      }
      if (v18 == v31)
      {
        unint64_t v42 = 0;
      }
      else
      {
        unint64_t v43 = v18 - v31;
        do
        {
          int v44 = *v40++;
          *v41++ = v44;
          --v43;
        }
        while (v43);
        unint64_t v42 = v18 - v31;
      }
      if (v42 + v30 < v18) {
        *char v41 = *v40;
      }
      uint64_t v11 = (int *)((char *)v11 + v10);
      uint64_t v17 = (int *)((char *)v17 + v16);
      ++v39;
    }
    while (v39 != v38);
  }
  if (v38 + v27 < v19)
  {
    if (v29)
    {
      int v45 = *v11++;
      *v17++ = v45;
    }
    if (v18 == v31)
    {
      unint64_t v32 = 0;
    }
    else
    {
      unint64_t v46 = v18 - v31;
      do
      {
        int v47 = *v11++;
        *v17++ = v47;
        --v46;
      }
      while (v46);
    }
    if (v32 + v30 < v18) {
      *uint64_t v17 = *v11;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (unsigned __int16 *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v15;
  uint64_t v19 = a8[1];
  uint64_t v20 = (_WORD *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = *(void *)(a2 + 24);
  }
  if (v23)
  {
    uint64_t v58 = a8[1];
    uint64_t v60 = a4[1];
    unint64_t v61 = v22;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    unint64_t v27 = (char *)(a7[2] + v26 * v17 + v18);
    uint64_t v28 = (char *)(*a7 + *a8 * v17 + v18);
    char v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    size_t v30 = 2 * v22;
    unint64_t v59 = v23;
    do
    {
      memcpy(v28, v29, v30);
      memset(v27, 255, v30);
      v29 += v24;
      v28 += v25;
      v27 += v26;
      --v23;
    }
    while (v23);
    uint64_t v19 = v58;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v60;
    unint64_t v22 = v61;
    unint64_t v23 = v59;
  }
  unint64_t v31 = v11 & 1;
  if (v23 >= v31) {
    uint64_t v32 = v11 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v34 = v22 - v9;
  if (v11)
  {
    if (v33)
    {
      unint64_t v35 = v13 + 4;
      unsigned int v37 = (v13[1] + v13[3] + 1) >> 1;
      *uint64_t v20 = (*v13 + v13[2] + 1) >> 1;
      v20[1] = v37;
      unint64_t v36 = v20 + 2;
    }
    else
    {
      unint64_t v35 = v13;
      unint64_t v36 = v20;
    }
    if (v22 != v9)
    {
      unint64_t v38 = 0;
      do
      {
        uint64_t v39 = &v36[v38];
        unsigned int v40 = (v35[1] + v35[3] + 1) >> 1;
        *uint64_t v39 = (*v35 + v35[2] + 1) >> 1;
        v39[1] = v40;
        v38 += 2;
        v35 += 4;
      }
      while (v38 < v34);
    }
    uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
    uint64_t v20 = (_WORD *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v23 - v32;
    do
    {
      unint64_t v43 = v13;
      int v44 = v20;
      if (v33)
      {
        unint64_t v43 = v13 + 4;
        unsigned int v45 = (v13[1] + v13[3] + 1) >> 1;
        *uint64_t v20 = (*v13 + v13[2] + 1) >> 1;
        v20[1] = v45;
        int v44 = v20 + 2;
      }
      if (v22 != v9)
      {
        unint64_t v46 = 0;
        do
        {
          int v47 = &v44[v46];
          unsigned int v48 = (v43[1] + v43[3] + 1) >> 1;
          *int v47 = (*v43 + v43[2] + 1) >> 1;
          v47[1] = v48;
          v46 += 2;
          v43 += 4;
        }
        while (v46 < v34);
      }
      uint64_t v13 = (unsigned __int16 *)((char *)v13 + v12);
      uint64_t v20 = (_WORD *)((char *)v20 + v19);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v23)
  {
    if (v33)
    {
      int v49 = *v13;
      int v50 = v13[1];
      int v51 = v13[2];
      int v52 = v13[3];
      v13 += 4;
      *uint64_t v20 = (v49 + v51 + 1) >> 1;
      v20[1] = (v50 + v52 + 1) >> 1;
      v20 += 2;
    }
    if (v22 != v9)
    {
      unint64_t v53 = 0;
      do
      {
        uint16x4_t v54 = &v20[v53];
        unsigned int v55 = (v13[1] + v13[3] + 1) >> 1;
        *uint16x4_t v54 = (*v13 + v13[2] + 1) >> 1;
        v54[1] = v55;
        v53 += 2;
        v13 += 4;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_s2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = v8 & 1;
  uint64_t v10 = v9 + v8;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = a4[1];
  uint64_t v13 = (int *)(a3[1] + v12 * v11 + 4 * (v9 + v8));
  unint64_t v14 = *(void *)(a6 + 24);
  uint64_t v15 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v16 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v17 = *(void *)(a6 + 40);
  uint64_t v18 = 2 * v15;
  uint64_t v19 = a8[1];
  uint64_t v20 = (int *)(a7[1] + v19 * v17 + ((2 * v15) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v21 = v16 - v15;
  if (((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - (v9 + v8) >= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = ((*(_DWORD *)(a2 + 16) + v8) & 0xFFFFFFFE) - v10;
  }
  if (*(void *)(a2 + 24) >= v14) {
    unint64_t v23 = v14;
  }
  else {
    unint64_t v23 = *(void *)(a2 + 24);
  }
  if (v23)
  {
    uint64_t v50 = a8[1];
    uint64_t v52 = a4[1];
    unint64_t v53 = v22;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    unint64_t v27 = (char *)(a7[2] + v26 * v17 + v18);
    uint64_t v28 = (char *)(*a7 + *a8 * v17 + v18);
    char v29 = (char *)(*a3 + *a4 * v11 + 2 * v10);
    size_t v30 = 2 * v22;
    unint64_t v51 = v23;
    do
    {
      memcpy(v28, v29, v30);
      memset(v27, 255, v30);
      v29 += v24;
      v28 += v25;
      v27 += v26;
      --v23;
    }
    while (v23);
    uint64_t v19 = v50;
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v9 = v8 & 1;
    uint64_t v12 = v52;
    unint64_t v22 = v53;
    unint64_t v23 = v51;
  }
  unint64_t v31 = v11 & 1;
  if (v23 >= v31) {
    uint64_t v32 = v11 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v8;
  if (v22 < v9) {
    unint64_t v9 = 0;
  }
  unint64_t v34 = v22 - v9;
  if (v11)
  {
    unint64_t v35 = v13;
    if (v33)
    {
      unint64_t v35 = v13 + 2;
      *uint64_t v20 = *v13;
      unint64_t v36 = v20 + 1;
    }
    else
    {
      unint64_t v36 = v20;
    }
    if (v22 != v9)
    {
      unint64_t v37 = 0;
      do
      {
        int v38 = *v35;
        v35 += 2;
        v36[v37 / 2] = v38;
        v37 += 2;
      }
      while (v37 < v34);
    }
    uint64_t v13 = (int *)((char *)v13 + v12);
    uint64_t v20 = (int *)((char *)v20 + v19);
  }
  if (v23 == v32)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v39 = v23 - v32;
    do
    {
      unint64_t v41 = v13;
      uint64_t v42 = v20;
      if (v33)
      {
        unint64_t v41 = v13 + 2;
        *uint64_t v20 = *v13;
        uint64_t v42 = v20 + 1;
      }
      if (v22 != v9)
      {
        unint64_t v43 = 0;
        do
        {
          int v44 = *v41;
          v41 += 2;
          v42[v43 / 2] = v44;
          v43 += 2;
        }
        while (v43 < v34);
      }
      uint64_t v13 = (int *)((char *)v13 + v12);
      uint64_t v20 = (int *)((char *)v20 + v19);
      ++v40;
    }
    while (v40 != v39);
  }
  if (v39 + v31 < v23)
  {
    if (v33)
    {
      int v45 = *v13;
      v13 += 2;
      *v20++ = v45;
    }
    if (v22 != v9)
    {
      unint64_t v46 = 0;
      do
      {
        int v47 = *v13;
        v13 += 2;
        v20[v46 / 2] = v47;
        v46 += 2;
      }
      while (v46 < v34);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_t4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + 2 * v14;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(_WORD *)(v24 + 2 * i) & 0xFFF0;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      uint64_t v32 = v13 + 2;
      __int16 v34 = v13[1] & 0xFFF0;
      *uint64_t v17 = *v13 & 0xFFF0;
      v17[1] = v34;
      char v33 = v17 + 2;
    }
    else
    {
      uint64_t v32 = v13;
      char v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        __int16 v37 = *v32;
        __int16 v38 = v32[1];
        v32 += 2;
        *char v33 = v37 & 0xFFF0;
        v33[1] = v38 & 0xFFF0;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      __int16 v39 = *v32 & 0xFFF0;
      __int16 v40 = v32[1] & 0xFFF0;
      *char v33 = v39;
      v33[1] = v40;
    }
    uint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      unint64_t v43 = v13;
      int v44 = v17;
      if (v28)
      {
        unint64_t v43 = v13 + 2;
        __int16 v45 = v13[1] & 0xFFF0;
        *uint64_t v17 = *v13 & 0xFFF0;
        v17[1] = v45;
        int v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          __int16 v48 = *v43;
          __int16 v49 = v43[1];
          v43 += 2;
          _WORD *v44 = v48 & 0xFFF0;
          v44[1] = v49 & 0xFFF0;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        __int16 v50 = *v43 & 0xFFF0;
        __int16 v51 = v43[1] & 0xFFF0;
        _WORD *v44 = v50;
        v44[1] = v51;
      }
      uint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      __int16 v52 = *v13;
      __int16 v53 = v13[1];
      v13 += 2;
      *uint64_t v17 = v52 & 0xFFF0;
      v17[1] = v53 & 0xFFF0;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        __int16 v55 = *v13;
        __int16 v56 = v13[1];
        v13 += 2;
        *uint64_t v17 = v55 & 0xFFF0;
        v17[1] = v56 & 0xFFF0;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      __int16 v57 = *v13 & 0xFFF0;
      __int16 v58 = v13[1] & 0xFFF0;
      *uint64_t v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFF0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      int v38 = (v14[3] >> 4) + (v14[1] >> 4);
      *uint64_t v21 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
      v21[1] = (8 * v38 + 8) & 0xFFF0;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        int v41 = ((unsigned __int16)v36[3] >> 4) + ((unsigned __int16)v36[1] >> 4);
        *__int16 v40 = (8 * ((v36[2] >> 4) + (*v36 >> 4)) + 8) & 0xFFF0;
        v40[1] = (8 * v41 + 8) & 0xFFF0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      int v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        int v44 = v14 + 4;
        int v46 = (v14[3] >> 4) + (v14[1] >> 4);
        *uint64_t v21 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
        v21[1] = (8 * v46 + 8) & 0xFFF0;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          int v49 = ((unsigned __int16)v44[3] >> 4) + ((unsigned __int16)v44[1] >> 4);
          _WORD *v48 = (8 * ((v44[2] >> 4) + (*v44 >> 4)) + 8) & 0xFFF0;
          v48[1] = (8 * v49 + 8) & 0xFFF0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      unsigned int v50 = *v14;
      unsigned int v51 = v14[1];
      unsigned int v52 = v14[2];
      unsigned int v53 = v14[3];
      v14 += 4;
      *uint64_t v21 = (8 * ((v52 >> 4) + (v50 >> 4)) + 8) & 0xFFF0;
      v21[1] = (8 * ((v53 >> 4) + (v51 >> 4)) + 8) & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v21[v54];
        int v56 = (v14[3] >> 4) + (v14[1] >> 4);
        *__int16 v55 = (8 * ((v14[2] >> 4) + (*v14 >> 4)) + 8) & 0xFFF0;
        v55[1] = (8 * v56 + 8) & 0xFFF0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_t2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFF0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      __int16 v38 = v14[1] & 0xFFF0;
      *uint64_t v21 = *v14 & 0xFFF0;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        __int16 v41 = v36[1] & 0xFFF0;
        *__int16 v40 = *v36 & 0xFFF0;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      int v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        int v44 = v14 + 4;
        __int16 v46 = v14[1] & 0xFFF0;
        *uint64_t v21 = *v14 & 0xFFF0;
        v21[1] = v46;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          __int16 v49 = v44[1] & 0xFFF0;
          _WORD *v48 = *v44 & 0xFFF0;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      __int16 v50 = *v14;
      __int16 v51 = v14[1];
      v14 += 4;
      *uint64_t v21 = v50 & 0xFFF0;
      v21[1] = v51 & 0xFFF0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        unsigned int v53 = &v21[v52];
        __int16 v54 = v14[1] & 0xFFF0;
        *unsigned int v53 = *v14 & 0xFFF0;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_x4as(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = (__int16 *)(a3[1] + v12 * v8 + 4 * v9);
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (_WORD *)(a7[1] + v16 * v15 + 4 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + 2 * v14;
    uint64_t v23 = *a7 + *a8 * v15 + 2 * v14;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(_WORD *)(v22 + 2 * i) = -1;
          *(_WORD *)(v23 + 2 * i) = *(_WORD *)(v24 + 2 * i) & 0xFFC0;
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  char v28 = v9;
  unint64_t v29 = v9 & 1;
  if (v10 >= v29) {
    unint64_t v30 = v29;
  }
  else {
    unint64_t v30 = 0;
  }
  unint64_t v31 = v10 - v30;
  if (v8)
  {
    if (v28)
    {
      unint64_t v32 = v13 + 2;
      __int16 v34 = v13[1] & 0xFFC0;
      *uint64_t v17 = *v13 & 0xFFC0;
      v17[1] = v34;
      uint64_t v33 = v17 + 2;
    }
    else
    {
      unint64_t v32 = v13;
      uint64_t v33 = v17;
    }
    if (v10 == v30)
    {
      unint64_t v35 = 0;
    }
    else
    {
      unint64_t v36 = v10 - v30;
      do
      {
        __int16 v37 = *v32;
        __int16 v38 = v32[1];
        v32 += 2;
        *uint64_t v33 = v37 & 0xFFC0;
        v33[1] = v38 & 0xFFC0;
        v33 += 2;
        --v36;
      }
      while (v36);
      unint64_t v35 = v10 - v30;
    }
    if (v35 + v29 < v10)
    {
      __int16 v39 = *v32 & 0xFFC0;
      __int16 v40 = v32[1] & 0xFFC0;
      *uint64_t v33 = v39;
      v33[1] = v40;
    }
    uint64_t v13 = (__int16 *)((char *)v13 + v12);
    uint64_t v17 = (_WORD *)((char *)v17 + v16);
  }
  if (v11 == v27)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v11 - v27;
    do
    {
      uint64_t v43 = v13;
      int v44 = v17;
      if (v28)
      {
        uint64_t v43 = v13 + 2;
        __int16 v45 = v13[1] & 0xFFC0;
        *uint64_t v17 = *v13 & 0xFFC0;
        v17[1] = v45;
        int v44 = v17 + 2;
      }
      if (v10 == v30)
      {
        unint64_t v46 = 0;
      }
      else
      {
        unint64_t v47 = v10 - v30;
        do
        {
          __int16 v48 = *v43;
          __int16 v49 = v43[1];
          v43 += 2;
          _WORD *v44 = v48 & 0xFFC0;
          v44[1] = v49 & 0xFFC0;
          v44 += 2;
          --v47;
        }
        while (v47);
        unint64_t v46 = v10 - v30;
      }
      if (v46 + v29 < v10)
      {
        __int16 v50 = *v43 & 0xFFC0;
        __int16 v51 = v43[1] & 0xFFC0;
        _WORD *v44 = v50;
        v44[1] = v51;
      }
      uint64_t v13 = (__int16 *)((char *)v13 + v12);
      uint64_t v17 = (_WORD *)((char *)v17 + v16);
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v26 < v11)
  {
    if (v28)
    {
      __int16 v52 = *v13;
      __int16 v53 = v13[1];
      v13 += 2;
      *uint64_t v17 = v52 & 0xFFC0;
      v17[1] = v53 & 0xFFC0;
      v17 += 2;
    }
    if (v10 == v30)
    {
      unint64_t v31 = 0;
    }
    else
    {
      unint64_t v54 = v10 - v30;
      do
      {
        __int16 v55 = *v13;
        __int16 v56 = v13[1];
        v13 += 2;
        *uint64_t v17 = v55 & 0xFFC0;
        v17[1] = v56 & 0xFFC0;
        v17 += 2;
        --v54;
      }
      while (v54);
    }
    if (v31 + v29 < v10)
    {
      __int16 v57 = *v13 & 0xFFC0;
      __int16 v58 = v13[1] & 0xFFC0;
      *uint64_t v17 = v57;
      v17[1] = v58;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int16 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      int v38 = (v14[3] >> 6) + (v14[1] >> 6);
      *uint64_t v21 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
      v21[1] = (32 * v38 + 32) & 0xFFC0;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        int v41 = ((unsigned __int16)v36[3] >> 6) + ((unsigned __int16)v36[1] >> 6);
        *__int16 v40 = (32 * ((v36[2] >> 6) + (*v36 >> 6)) + 32) & 0xFFC0;
        v40[1] = (32 * v41 + 32) & 0xFFC0;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      int v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        int v44 = v14 + 4;
        int v46 = (v14[3] >> 6) + (v14[1] >> 6);
        *uint64_t v21 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v21[1] = (32 * v46 + 32) & 0xFFC0;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          int v49 = ((unsigned __int16)v44[3] >> 6) + ((unsigned __int16)v44[1] >> 6);
          _WORD *v48 = (32 * ((v44[2] >> 6) + (*v44 >> 6)) + 32) & 0xFFC0;
          v48[1] = (32 * v49 + 32) & 0xFFC0;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (unsigned __int16 *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      unsigned int v50 = *v14;
      unsigned int v51 = v14[1];
      unsigned int v52 = v14[2];
      unsigned int v53 = v14[3];
      v14 += 4;
      *uint64_t v21 = (32 * ((v52 >> 6) + (v50 >> 6)) + 32) & 0xFFC0;
      v21[1] = (32 * ((v53 >> 6) + (v51 >> 6)) + 32) & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v54 = 0;
      do
      {
        __int16 v55 = &v21[v54];
        int v56 = (v14[3] >> 6) + (v14[1] >> 6);
        *__int16 v55 = (32 * ((v14[2] >> 6) + (*v14 >> 6)) + 32) & 0xFFC0;
        v55[1] = (32 * v56 + 32) & 0xFFC0;
        v54 += 2;
        v14 += 4;
      }
      while (v54 < v35);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_x2as(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = (*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (_WORD *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = 2 * v16;
  uint64_t v20 = a8[1];
  uint64_t v21 = (_WORD *)(a7[1] + v20 * v18 + ((2 * v16) & 0x7FFFFFFFFFFFFFFELL));
  unint64_t v22 = v11 - (v10 + v9);
  unint64_t v23 = v17 - v16;
  if (v22 >= v23) {
    unint64_t v22 = v23;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v24 = 0;
    uint64_t v25 = *a4;
    uint64_t v26 = *a8;
    uint64_t v27 = a8[2];
    uint64_t v28 = a7[2] + v27 * v18 + v19;
    uint64_t v29 = *a7 + *a8 * v18 + v19;
    uint64_t v30 = *a3 + v25 * v12 + 2 * (v10 + v9);
    do
    {
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          *(_WORD *)(v28 + 2 * i) = -1;
          *(_WORD *)(v29 + 2 * i) = *(_WORD *)(v30 + 2 * i) & 0xFFC0;
        }
      }
      v30 += v25;
      v29 += v26;
      v28 += v27;
      ++v24;
    }
    while (v24 != v8);
  }
  unint64_t v32 = v12 & 1;
  if (v8 >= v32) {
    uint64_t v33 = v12 & 1;
  }
  else {
    uint64_t v33 = 0;
  }
  char v34 = v9;
  if (v22 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v35 = v22 - v10;
  if (v12)
  {
    if (v34)
    {
      unint64_t v36 = v14 + 4;
      __int16 v38 = v14[1] & 0xFFC0;
      *uint64_t v21 = *v14 & 0xFFC0;
      v21[1] = v38;
      __int16 v37 = v21 + 2;
    }
    else
    {
      unint64_t v36 = v14;
      __int16 v37 = v21;
    }
    if (v22 != v10)
    {
      unint64_t v39 = 0;
      do
      {
        __int16 v40 = &v37[v39];
        __int16 v41 = v36[1] & 0xFFC0;
        *__int16 v40 = *v36 & 0xFFC0;
        v40[1] = v41;
        v39 += 2;
        v36 += 4;
      }
      while (v39 < v35);
    }
    uint64_t v14 = (_WORD *)((char *)v14 + v13);
    uint64_t v21 = (_WORD *)((char *)v21 + v20);
  }
  if (v8 == v33)
  {
    unint64_t v42 = 0;
  }
  else
  {
    uint64_t v43 = 0;
    unint64_t v42 = v8 - v33;
    do
    {
      int v44 = v14;
      __int16 v45 = v21;
      if (v34)
      {
        int v44 = v14 + 4;
        __int16 v46 = v14[1] & 0xFFC0;
        *uint64_t v21 = *v14 & 0xFFC0;
        v21[1] = v46;
        __int16 v45 = v21 + 2;
      }
      if (v22 != v10)
      {
        unint64_t v47 = 0;
        do
        {
          __int16 v48 = &v45[v47];
          __int16 v49 = v44[1] & 0xFFC0;
          _WORD *v48 = *v44 & 0xFFC0;
          v48[1] = v49;
          v47 += 2;
          v44 += 4;
        }
        while (v47 < v35);
      }
      uint64_t v14 = (_WORD *)((char *)v14 + v13);
      uint64_t v21 = (_WORD *)((char *)v21 + v20);
      ++v43;
    }
    while (v43 != v42);
  }
  if (v42 + v32 < v8)
  {
    if (v34)
    {
      __int16 v50 = *v14;
      __int16 v51 = v14[1];
      v14 += 4;
      *uint64_t v21 = v50 & 0xFFC0;
      v21[1] = v51 & 0xFFC0;
      v21 += 2;
    }
    if (v22 != v10)
    {
      unint64_t v52 = 0;
      do
      {
        unsigned int v53 = &v21[v52];
        __int16 v54 = v14[1] & 0xFFC0;
        *unsigned int v53 = *v14 & 0xFFC0;
        v53[1] = v54;
        v52 += 2;
        v14 += 4;
      }
      while (v52 < v35);
    }
  }
  return 0;
}

uint64_t vt_Copy_sv44_v4a8(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, void *a6, void *a7, uint64_t *a8)
{
  uint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  uint64_t v12 = a4[1];
  uint64_t v13 = a3[1] + v12 * v8 + 4 * v9;
  uint64_t v14 = a6[4];
  uint64_t v15 = a6[5];
  uint64_t v16 = a8[1];
  uint64_t v17 = (unsigned char *)(a7[1] + v16 * v15 + 2 * v14);
  if (v10 >= a6[2]) {
    unint64_t v10 = a6[2];
  }
  if (v11 >= a6[3]) {
    unint64_t v11 = a6[3];
  }
  if (v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *a4;
    uint64_t v20 = *a8;
    uint64_t v21 = a8[2];
    uint64_t v22 = a7[2] + v21 * v15 + v14;
    uint64_t v23 = *a7 + *a8 * v15 + v14;
    uint64_t v24 = *a3 + v19 * v8 + 2 * v9;
    do
    {
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          *(unsigned char *)(v22 + i) = -1;
          *(unsigned char *)(v23 + i) = *(unsigned char *)(v24 + 2 * i + 1);
        }
      }
      v24 += v19;
      v23 += v20;
      v22 += v21;
      ++v18;
    }
    while (v18 != v11);
    uint64_t v9 = a2[4];
    uint64_t v8 = a2[5];
  }
  unint64_t v26 = v8 & 1;
  if (v11 >= v26) {
    uint64_t v27 = v8 & 1;
  }
  else {
    uint64_t v27 = 0;
  }
  unint64_t v28 = v9 & 1;
  if (v10 >= v28) {
    uint64_t v29 = v9 & 1;
  }
  else {
    uint64_t v29 = 0;
  }
  unint64_t v30 = v10 - v29;
  if (v8)
  {
    if (v9)
    {
      char v33 = *(unsigned char *)(v13 + 3);
      uint64_t v31 = v13 + 4;
      *uint64_t v17 = *(unsigned char *)(v13 + 1);
      v17[1] = v33;
      unint64_t v32 = v17 + 2;
    }
    else
    {
      uint64_t v31 = v13;
      unint64_t v32 = v17;
    }
    if (v10 == v29)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v35 = v10 - v29;
      do
      {
        char v36 = *(unsigned char *)(v31 + 1);
        char v37 = *(unsigned char *)(v31 + 3);
        v31 += 4;
        *unint64_t v32 = v36;
        v32[1] = v37;
        v32 += 2;
        --v35;
      }
      while (v35);
      unint64_t v34 = v10 - v29;
    }
    if (v34 + v28 < v10)
    {
      char v38 = *(unsigned char *)(v31 + 1);
      char v39 = *(unsigned char *)(v31 + 3);
      *unint64_t v32 = v38;
      v32[1] = v39;
    }
    v13 += v12;
    v17 += v16;
  }
  if (v11 == v27)
  {
    unint64_t v40 = 0;
  }
  else
  {
    uint64_t v41 = 0;
    unint64_t v40 = v11 - v27;
    do
    {
      uint64_t v42 = v13;
      uint64_t v43 = v17;
      if (v9)
      {
        char v44 = *(unsigned char *)(v13 + 3);
        uint64_t v42 = v13 + 4;
        *uint64_t v17 = *(unsigned char *)(v13 + 1);
        v17[1] = v44;
        uint64_t v43 = v17 + 2;
      }
      if (v10 == v29)
      {
        unint64_t v45 = 0;
      }
      else
      {
        unint64_t v46 = v10 - v29;
        do
        {
          char v47 = *(unsigned char *)(v42 + 1);
          char v48 = *(unsigned char *)(v42 + 3);
          v42 += 4;
          unsigned char *v43 = v47;
          v43[1] = v48;
          v43 += 2;
          --v46;
        }
        while (v46);
        unint64_t v45 = v10 - v29;
      }
      if (v45 + v28 < v10)
      {
        char v49 = *(unsigned char *)(v42 + 1);
        char v50 = *(unsigned char *)(v42 + 3);
        unsigned char *v43 = v49;
        v43[1] = v50;
      }
      v13 += v12;
      v17 += v16;
      ++v41;
    }
    while (v41 != v40);
  }
  if (v40 + v26 < v11)
  {
    if (v9)
    {
      char v51 = *(unsigned char *)(v13 + 1);
      char v52 = *(unsigned char *)(v13 + 3);
      v13 += 4;
      *uint64_t v17 = v51;
      v17[1] = v52;
      v17 += 2;
    }
    if (v10 == v29)
    {
      unint64_t v30 = 0;
    }
    else
    {
      unint64_t v53 = v10 - v29;
      do
      {
        char v54 = *(unsigned char *)(v13 + 1);
        char v55 = *(unsigned char *)(v13 + 3);
        v13 += 4;
        *uint64_t v17 = v54;
        v17[1] = v55;
        v17 += 2;
        --v53;
      }
      while (v53);
    }
    if (v30 + v28 < v10)
    {
      char v56 = *(unsigned char *)(v13 + 1);
      char v57 = *(unsigned char *)(v13 + 3);
      *uint64_t v17 = v56;
      v17[1] = v57;
    }
  }
  return 0;
}

uint64_t vt_CopyAvg_sv44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = (unsigned __int8 *)(a3[1] + v13 * v12 + 4 * (v10 + v9));
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v16;
    uint64_t v28 = *a7 + *a8 * v18 + v16;
    uint64_t v29 = *a3 + v24 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v27 + i) = -1;
          *(unsigned char *)(v28 + i) = *(unsigned char *)(v29 + 2 * i + 1);
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v21 - v10;
  if (v12)
  {
    if (v33)
    {
      unint64_t v35 = v14 + 8;
      unsigned int v37 = (v14[3] + v14[7] + 1) >> 1;
      *uint64_t v20 = (v14[1] + v14[5] + 1) >> 1;
      v20[1] = v37;
      char v36 = v20 + 2;
    }
    else
    {
      unint64_t v35 = v14;
      char v36 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        char v39 = &v36[v38];
        unsigned int v40 = (v35[3] + v35[7] + 1) >> 1;
        *char v39 = (v35[1] + v35[5] + 1) >> 1;
        v39[1] = v40;
        v38 += 2;
        v35 += 8;
      }
      while (v38 < v34);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v8 - v32;
    do
    {
      uint64_t v43 = v14;
      char v44 = v20;
      if (v33)
      {
        uint64_t v43 = v14 + 8;
        unsigned int v45 = (v14[3] + v14[7] + 1) >> 1;
        *uint64_t v20 = (v14[1] + v14[5] + 1) >> 1;
        v20[1] = v45;
        char v44 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          char v47 = &v44[v46];
          unsigned int v48 = (v43[3] + v43[7] + 1) >> 1;
          *char v47 = (v43[1] + v43[5] + 1) >> 1;
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v34);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v8)
  {
    if (v33)
    {
      int v49 = v14[1];
      int v50 = v14[3];
      int v51 = v14[5];
      int v52 = v14[7];
      v14 += 8;
      *uint64_t v20 = (v49 + v51 + 1) >> 1;
      v20[1] = (v50 + v52 + 1) >> 1;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v53 = 0;
      do
      {
        char v54 = &v20[v53];
        unsigned int v55 = (v14[3] + v14[7] + 1) >> 1;
        *char v54 = (v14[1] + v14[5] + 1) >> 1;
        v54[1] = v55;
        v53 += 2;
        v14 += 8;
      }
      while (v53 < v34);
    }
  }
  return 0;
}

uint64_t vt_CopyDec_sv44_v2a8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t *a8)
{
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  unint64_t v10 = v9 & 1;
  uint64_t v11 = v10 + v9;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = a4[1];
  uint64_t v14 = a3[1] + v13 * v12 + 4 * (v10 + v9);
  unint64_t v15 = *(void *)(a6 + 24);
  uint64_t v16 = (*(void *)(a6 + 32) & 1) + *(void *)(a6 + 32);
  uint64_t v17 = (*(_DWORD *)(a6 + 16) + *(void *)(a6 + 32)) & 0xFFFFFFFE;
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = a8[1];
  uint64_t v20 = (unsigned char *)(a7[1] + v19 * v18 + (v16 & 0x7FFFFFFFFFFFFFFFLL));
  unint64_t v21 = ((*(_DWORD *)(a2 + 16) + v9) & 0xFFFFFFFE) - (v10 + v9);
  unint64_t v22 = v17 - v16;
  if (v21 >= v22) {
    unint64_t v21 = v22;
  }
  if (v8 >= v15) {
    unint64_t v8 = v15;
  }
  if (v8)
  {
    uint64_t v23 = 0;
    uint64_t v24 = *a4;
    uint64_t v25 = *a8;
    uint64_t v26 = a8[2];
    uint64_t v27 = a7[2] + v26 * v18 + v16;
    uint64_t v28 = *a7 + *a8 * v18 + v16;
    uint64_t v29 = *a3 + v24 * v12 + 2 * v11;
    do
    {
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          *(unsigned char *)(v27 + i) = -1;
          *(unsigned char *)(v28 + i) = *(unsigned char *)(v29 + 2 * i + 1);
        }
      }
      v29 += v24;
      v28 += v25;
      v27 += v26;
      ++v23;
    }
    while (v23 != v8);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    unint64_t v10 = v9 & 1;
  }
  unint64_t v31 = v12 & 1;
  if (v8 >= v31) {
    uint64_t v32 = v12 & 1;
  }
  else {
    uint64_t v32 = 0;
  }
  char v33 = v9;
  if (v21 < v10) {
    unint64_t v10 = 0;
  }
  unint64_t v34 = v21 - v10;
  if (v12)
  {
    if (v33)
    {
      char v37 = *(unsigned char *)(v14 + 3);
      uint64_t v35 = v14 + 8;
      *uint64_t v20 = *(unsigned char *)(v14 + 1);
      v20[1] = v37;
      char v36 = v20 + 2;
    }
    else
    {
      uint64_t v35 = v14;
      char v36 = v20;
    }
    if (v21 != v10)
    {
      unint64_t v38 = 0;
      do
      {
        char v39 = &v36[v38];
        char v40 = *(unsigned char *)(v35 + 3);
        *char v39 = *(unsigned char *)(v35 + 1);
        v39[1] = v40;
        v38 += 2;
        v35 += 8;
      }
      while (v38 < v34);
    }
    v14 += v13;
    v20 += v19;
  }
  if (v8 == v32)
  {
    unint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v41 = v8 - v32;
    do
    {
      uint64_t v43 = v14;
      char v44 = v20;
      if (v33)
      {
        char v45 = *(unsigned char *)(v14 + 3);
        uint64_t v43 = v14 + 8;
        *uint64_t v20 = *(unsigned char *)(v14 + 1);
        v20[1] = v45;
        char v44 = v20 + 2;
      }
      if (v21 != v10)
      {
        unint64_t v46 = 0;
        do
        {
          char v47 = &v44[v46];
          char v48 = *(unsigned char *)(v43 + 3);
          *char v47 = *(unsigned char *)(v43 + 1);
          v47[1] = v48;
          v46 += 2;
          v43 += 8;
        }
        while (v46 < v34);
      }
      v14 += v13;
      v20 += v19;
      ++v42;
    }
    while (v42 != v41);
  }
  if (v41 + v31 < v8)
  {
    if (v33)
    {
      char v49 = *(unsigned char *)(v14 + 1);
      char v50 = *(unsigned char *)(v14 + 3);
      v14 += 8;
      *uint64_t v20 = v49;
      v20[1] = v50;
      v20 += 2;
    }
    if (v21 != v10)
    {
      unint64_t v51 = 0;
      do
      {
        int v52 = &v20[v51];
        char v53 = *(unsigned char *)(v14 + 3);
        *int v52 = *(unsigned char *)(v14 + 1);
        v52[1] = v53;
        v51 += 2;
        v14 += 8;
      }
      while (v51 < v34);
    }
  }
  return 0;
}