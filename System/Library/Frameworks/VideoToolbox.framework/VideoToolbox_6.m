uint64_t vt_Copy_RGhA_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *global_queue;
  unsigned char v27[56];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *a2;
  v10 = a2[1];
  v12 = a2[2];
  v11 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = *a6;
  v16 = a6[1];
  v18 = a6[2];
  v17 = a6[3];
  v20 = a6[4];
  v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    v21 = v12;
  }
  else {
    v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    v18 = v15 - v20;
  }
  v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    v23 = v17;
  }
  else {
    v23 = v16 - v19;
  }
  if (v21 >= v18) {
    v24 = v18;
  }
  else {
    v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  v31 = v15;
  v32 = v16;
  v33 = v24;
  v34 = v23;
  v35 = v20;
  v36 = v19;
  v28 = a3;
  v29 = a4;
  v30 = a5;
  v37 = a7;
  v38 = a8;
  v39 = a9;
  v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_422vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_422vf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    v17 = *(uint64_t **)(result + 136);
    v18 = *(void **)(result + 56);
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    float v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    float v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v28 = (float)LODWORD(a8);
    float v29 = *(float *)(v16 + 36);
    float v30 = *(float *)(v16 + 40);
    float v31 = *(float *)(v16 + 44);
    float v32 = *(float *)(v16 + 48) * 0.5;
    float v33 = *(float *)(v16 + 52) * 0.5;
    float v34 = *(float *)(v16 + 56) * 0.5;
    float v35 = *(float *)(v16 + 60) * 0.5;
    float v36 = *(float *)(v16 + 64) * 0.5;
    float v37 = *(float *)(v16 + 68) * 0.5;
    v38 = *(void **)(result + 128);
    uint64_t v39 = *(void *)(result + 112);
    unint64_t v40 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v41 = *(void *)(result + 36);
    uint64_t v42 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v43 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v44 = *(unsigned __int8 *)(v16 + 155);
    result = *(unsigned __int8 *)(v16 + 154);
    uint64_t v45 = v38[2];
    if (v45) {
      v46 = (unsigned char *)(v45 + v40 * v22 + v39);
    }
    else {
      v46 = 0;
    }
    v49 = v38;
    uint64_t v48 = *v38;
    uint64_t v47 = v49[1];
    _ZF = v47 == 0;
    uint64_t v51 = v47 + v40 * v21 + v39;
    if (_ZF) {
      uint64_t v51 = 0;
    }
    v52 = (unsigned char *)(v48 + v40 * v20 + v39);
    uint64_t v53 = *v18 + v19 * v14 + 8 * v41;
    do
    {
      if (v13)
      {
        unint64_t v54 = 0;
        uint64_t v55 = v53;
        v56 = v46;
        v57 = v52;
        do
        {
          uint64_t v58 = v55 + 8;
          if (v56)
          {
            _H23 = *(_WORD *)(v58 + 2 * v42);
            __asm { FCVT            S23, H23 }
            _H24 = *(_WORD *)(v55 + 2 * v42);
            __asm { FCVT            S24, H24 }
            char v66 = llroundf(_S24 * 255.0);
            char v67 = llroundf(_S23 * 255.0);
          }
          else
          {
            char v66 = 0;
            char v67 = 0;
          }
          _H23 = *(_WORD *)(v55 + 2 * result);
          __asm { FCVT            S23, H23 }
          float v70 = v23 * _S23;
          _H24 = *(_WORD *)(v55 + 2 * v44);
          __asm { FCVT            S24, H24 }
          float v73 = v23 * _S24;
          _H25 = *(_WORD *)(v55 + 2 * v43);
          __asm { FCVT            S25, H25 }
          float v76 = v23 * _S25;
          _H26 = *(_WORD *)(v58 + 2 * result);
          __asm { FCVT            S26, H26 }
          float v79 = v23 * _S26;
          _H27 = *(_WORD *)(v58 + 2 * v44);
          __asm { FCVT            S27, H27 }
          float v82 = v23 * _S27;
          _H28 = *(_WORD *)(v58 + 2 * v43);
          __asm { FCVT            S28, H28 }
          float v85 = v23 * _S28;
          float v86 = (float)((float)((float)(v30 * v73) + (float)(v29 * v70)) + (float)(v31 * v76)) + v24;
          float v87 = (float)((float)((float)(v30 * v82) + (float)(v29 * v79)) + (float)(v31 * v85)) + v24;
          if (v86 < v24) {
            float v88 = v24;
          }
          else {
            float v88 = (float)((float)((float)(v30 * v73) + (float)(v29 * v70)) + (float)(v31 * v76)) + v24;
          }
          if (v86 <= v26) {
            float v89 = v88;
          }
          else {
            float v89 = v26;
          }
          unsigned char *v57 = llroundf(v89);
          if (v87 < v24) {
            float v90 = v24;
          }
          else {
            float v90 = (float)((float)((float)(v30 * v82) + (float)(v29 * v79)) + (float)(v31 * v85)) + v24;
          }
          if (v87 > v26) {
            float v90 = v26;
          }
          v57[1] = llroundf(v90);
          float v91 = v70 + v79;
          float v92 = v73 + v82;
          float v93 = v76 + v85;
          float v94 = (float)((float)(v25 + (float)(v91 * v32)) + (float)(v92 * v33)) + (float)(v93 * v34);
          float v95 = v28;
          if (v94 <= v28)
          {
            float v95 = (float)((float)(v25 + (float)(v91 * v32)) + (float)(v92 * v33)) + (float)(v93 * v34);
            if (v94 < v27) {
              float v95 = v27;
            }
          }
          float v96 = (float)((float)(v25 + (float)(v91 * v35)) + (float)(v92 * v36)) + (float)(v93 * v37);
          *(unsigned char *)(v51 + v54) = llroundf(v95);
          float v97 = v28;
          if (v96 <= v28)
          {
            float v97 = v96;
            if (v96 < v27) {
              float v97 = v27;
            }
          }
          *(unsigned char *)(v51 + v54 + 1) = llroundf(v97);
          if (v56)
          {
            unsigned char *v56 = v66;
            v56[1] = v67;
            v56 += 2;
          }
          v55 += 16;
          v54 += 2;
          v57 += 2;
        }
        while (v13 > v54);
      }
      v53 += v19;
      v52 += v20;
      v51 += v21;
      v46 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, float a3, double _D1)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = *((void *)result + 14);
  int64x2_t v10 = (void *)*((void *)result + 16);
  unint64_t v11 = *((void *)result + 13) * a2 / v7 + *((void *)result + 15);
  int64x2_t v12 = (uint64_t *)*((void *)result + 17);
  unint64_t v13 = (v6 + v6 * a2) / v7;
  unint64_t v14 = (unsigned char *)v10[1];
  if (v14) {
    v14 += v12[1] * v11 + v9;
  }
  if (v13 != v8)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(result + 44);
    uint64_t v17 = v8 + v16;
    uint64_t v18 = **((void **)result + 8);
    uint64_t v19 = *v12;
    uint64_t v20 = *((void *)result + 19);
    uint64_t v21 = *v10 + v19 * v11;
    unint64_t v22 = *(void *)(result + 20);
    uint64_t v23 = v13 + v16;
    uint64_t v24 = **((void **)result + 7) + v18 * v17 + 8 * *(void *)(result + 36);
    uint64_t v25 = (unsigned char *)(v21 + v9);
    uint64_t v26 = v23 - v17;
    LOWORD(a3) = *(_WORD *)(v20 + 144);
    float v27 = (float)LODWORD(a3);
    LOWORD(_D1) = *(_WORD *)(v20 + 146);
    float v28 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v20 + 148);
    float v29 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v20 + 150);
    float v30 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v20 + 152);
    float v31 = (float)LODWORD(_D1);
    float v33 = *(float *)(v20 + 36);
    float v32 = *(float *)(v20 + 40);
    float v34 = *(float *)(v20 + 44);
    float v131 = *(float *)(v20 + 48) * 0.5;
    float v132 = v28;
    float v129 = *(float *)(v20 + 56) * 0.5;
    float v130 = *(float *)(v20 + 52) * 0.5;
    float v127 = *(float *)(v20 + 64) * 0.5;
    float v128 = *(float *)(v20 + 60) * 0.5;
    float v125 = *(float *)(v20 + 68) * 0.5;
    float v126 = *(float *)(v20 + 72);
    float v35 = *(float *)(v20 + 80);
    float v124 = *(float *)(v20 + 76);
    float v36 = *(float *)(v20 + 84);
    float v37 = *(float *)(v20 + 88);
    float v38 = *(float *)(v20 + 92);
    float v39 = *(float *)(v20 + 96);
    float v40 = *(float *)(v20 + 100);
    float v41 = *(float *)(v20 + 104);
    uint64_t v42 = v20 + 164;
    uint64_t v43 = v20 + 16548;
    result = (unsigned __int8 *)(v20 + 32932);
    float v45 = *(float *)(v20 + 108);
    float v44 = *(float *)(v20 + 112);
    float v46 = *(float *)(v20 + 116);
    float v47 = *(float *)(v20 + 120);
    uint64_t v48 = *(unsigned __int8 *)(v20 + 157);
    uint64_t v49 = *(unsigned __int8 *)(v20 + 156);
    uint64_t v50 = *(unsigned __int8 *)(v20 + 155);
    float32x2_t v51 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v52 = *(unsigned __int8 *)(v20 + 154);
    do
    {
      if (v22)
      {
        unint64_t v53 = 0;
        unint64_t v54 = v14;
        uint64_t v55 = v25;
        uint64_t v56 = v24;
        do
        {
          float v57 = v34;
          float v58 = v32;
          float v59 = v33;
          LOWORD(_D1) = *(_WORD *)(v56 + 2 * v52);
          v4.i16[0] = *(_WORD *)(v56 + 2 * v49);
          uint64_t v60 = v56 + 8;
          WORD1(_D1) = *(_WORD *)(v56 + 2 * v50);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D1), v51), 0), v51)));
          _D1.i16[0] = *(_WORD *)(v42 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v42 + 2 * _D1.u32[1]);
          __asm { FCVT            S16, H1 }
          v4.i16[1] = *(_WORD *)(v56 + 8 + 2 * v52);
          _D1 = COERCE_DOUBLE(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v4), v51), 0), v51)));
          int32x2_t v68 = vcvt_s32_f32(*(float32x2_t *)&_D1);
          LOWORD(_D1) = *(_WORD *)(v42 + 2 * v68.u32[0]);
          __asm { FCVT            S17, H1 }
          float v70 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v71 = (float)((float)((float)(v44 * _S16) + (float)(v45 * _S15)) + (float)(v46 * _S17)) + (float)(v47 * v70);
          LODWORD(_D1) = 1174403072;
          if (v71 <= 8191.0)
          {
            *(float *)&_D1 = (float)((float)((float)(v44 * _S16) + (float)(v45 * _S15)) + (float)(v46 * _S17))
                           + (float)(v47 * v70);
            if (v71 < 0.0) {
              _D1 = 0.0;
            }
          }
          _D18.i16[0] = *(_WORD *)(v60 + 2 * v50);
          _H19 = *(_WORD *)(v42 + 2 * v68.u32[1]);
          _D18.i16[1] = *(_WORD *)(v60 + 2 * v49);
          __asm { FCVT            S19, H19 }
          _D18 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D18), v51), 0), v51)));
          _D18.i16[0] = *(_WORD *)(v42 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v42 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          float v76 = (float)((float)((float)(v44 * _S20) + (float)(v45 * _S19)) + (float)(v46 * _S22))
              + (float)(v47 * fmaxf(_S19, fmaxf(_S20, _S22)));
          _D18.i32[0] = 1174403072;
          if (v76 <= 8191.0)
          {
            *(float *)_D18.i32 = v76;
            if (v76 < 0.0) {
              _D18 = 0;
            }
          }
          if (v54)
          {
            _H13 = *(_WORD *)(v56 + 2 * v48);
            __asm { FCVT            S13, H13 }
            _H5 = *(_WORD *)(v60 + 2 * v48);
            __asm { FCVT            S5, H5 }
            char v81 = llroundf(_S13 * 255.0);
            char v82 = llroundf(_S5 * 255.0);
          }
          else
          {
            char v81 = 0;
            char v82 = 0;
          }
          float v33 = v59;
          float v32 = v58;
          float v34 = v57;
          _H1 = *(_WORD *)(v43 + 2 * llroundf(*(float *)&_D1));
          __asm { FCVT            S1, H1 }
          float v85 = _S15 * _S1;
          float v86 = _S16 * _S1;
          float v87 = _S17 * _S1;
          _H16 = *(_WORD *)(v43 + 2 * llroundf(*(float *)_D18.i32));
          __asm { FCVT            S16, H16 }
          float v90 = _S19 * _S16;
          _S18 = _S20 * _S16;
          _S16 = _S22 * _S16;
          float v93 = (float)((float)(v124 * v86) + (float)(v85 * v126)) + (float)(v87 * v35);
          float v94 = (float)((float)(v37 * v86) + (float)(v85 * v36)) + (float)(v87 * v38);
          float v95 = (float)((float)(v40 * v86) + (float)(v85 * v39)) + (float)(v87 * v41);
          float v96 = (float)(v124 * _S18) + (float)(v90 * v126);
          float v97 = (float)(v37 * _S18) + (float)(v90 * v36);
          float v98 = (float)(v40 * _S18) + (float)(v90 * v39);
          _S5 = v96 + (float)(_S16 * v35);
          float v100 = v97 + (float)(_S16 * v38);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0))];
          float v101 = v98 + (float)(_S16 * v41);
          __asm { FCVT            S18, H18 }
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0))];
          unsigned int v103 = llroundf(fminf(fmaxf(v95, 0.0), 8191.0));
          __asm { FCVT            S1, H16 }
          LOWORD(_S16) = *(_WORD *)&result[2 * v103];
          __asm { FCVT            S20, H16 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          __asm { FCVT            S16, H5 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0))];
          __asm { FCVT            S17, H5 }
          float v108 = (float)(v32 * _S1) + (float)(v33 * _S18);
          _S6 = _S18 + _S16;
          float v110 = _S1 + _S17;
          float v111 = (float)(v132 + (float)((float)(_S18 + _S16) * v131)) + (float)(v110 * v130);
          float v112 = (float)(v132 + (float)(_S6 * v128)) + (float)(v110 * v127);
          LOWORD(_S6) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0))];
          __asm { FCVT            S19, H6 }
          float v114 = v108 + (float)(v57 * _S20);
          float v115 = v111 + (float)((float)(_S20 + _S19) * v129);
          float v116 = v112 + (float)((float)(_S20 + _S19) * v125);
          if (v115 < v30) {
            float v117 = v30;
          }
          else {
            float v117 = v115;
          }
          float v118 = v114 + v27;
          if (v115 > v31) {
            float v117 = v31;
          }
          char v119 = llroundf(v117);
          if (v118 < v27) {
            float v120 = v27;
          }
          else {
            float v120 = v118;
          }
          *uint64_t v55 = v119;
          if (v118 > v29) {
            float v120 = v29;
          }
          v55[1] = llroundf(v120);
          float v121 = v31;
          if (v116 <= v31)
          {
            float v121 = v116;
            if (v116 < v30) {
              float v121 = v30;
            }
          }
          float v122 = (float)((float)((float)(v32 * _S17) + (float)(v33 * _S16)) + (float)(v57 * _S19)) + v27;
          v55[2] = llroundf(v121);
          float v123 = v29;
          if (v122 <= v29)
          {
            float v123 = v122;
            if (v122 < v27) {
              float v123 = v27;
            }
          }
          v55[3] = llroundf(v123);
          if (v54)
          {
            *unint64_t v54 = v81;
            v54[1] = v82;
            v54 += 2;
          }
          v56 += 16;
          v53 += 2;
          v55 += 4;
        }
        while (v22 > v53);
      }
      v24 += v18;
      v25 += v19;
      ++v15;
    }
    while (v15 != v26);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_2vuyf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v10 = *(void *)(result + 28);
  unint64_t v11 = *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = *(void *)(result + 112);
  unint64_t v14 = *(void **)(result + 128);
  unint64_t v15 = *(void *)(result + 104) * a2 / v11 + *(void *)(result + 120);
  uint64_t v16 = *(uint64_t **)(result + 136);
  unint64_t v17 = (v10 + v10 * a2) / v11;
  uint64_t v18 = (unsigned char *)v14[1];
  if (v18) {
    v18 += v16[1] * v15 + v13;
  }
  if (v17 != v12)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(result + 44);
    uint64_t v21 = v12 + v20;
    uint64_t v22 = **(void **)(result + 64);
    uint64_t v23 = *v16;
    uint64_t v24 = *(void *)(result + 152);
    uint64_t v25 = *v14 + v23 * v15;
    unint64_t v26 = *(void *)(result + 20);
    uint64_t v27 = v17 + v20;
    uint64_t v28 = **(void **)(result + 56) + v22 * v21 + 8 * *(void *)(result + 36);
    float v29 = (unsigned char *)(v25 + v13);
    uint64_t v30 = v27 - v21;
    LOWORD(a3) = *(_WORD *)(v24 + 144);
    float v31 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v24 + 146);
    float v32 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v24 + 148);
    float v33 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v24 + 150);
    float v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v24 + 152);
    float v35 = (float)LODWORD(a7);
    float v36 = *(float *)(v24 + 36);
    float v37 = *(float *)(v24 + 40);
    float v38 = *(float *)(v24 + 44);
    float v100 = *(float *)(v24 + 52) * 0.5;
    float v101 = *(float *)(v24 + 48) * 0.5;
    float v99 = *(float *)(v24 + 56) * 0.5;
    float v39 = *(float *)(v24 + 60) * 0.5;
    float v40 = *(float *)(v24 + 64) * 0.5;
    float v41 = *(float *)(v24 + 72);
    float v42 = *(float *)(v24 + 68) * 0.5;
    float v43 = *(float *)(v24 + 76);
    float v44 = *(float *)(v24 + 80);
    float v45 = *(float *)(v24 + 84);
    float v46 = *(float *)(v24 + 88);
    float v47 = *(float *)(v24 + 92);
    float v48 = *(float *)(v24 + 96);
    float v49 = *(float *)(v24 + 100);
    float v50 = *(float *)(v24 + 104);
    uint64_t v51 = v24 + 164;
    uint64_t v52 = v24 + 16548;
    result = *(unsigned __int8 *)(v24 + 157);
    uint64_t v53 = *(unsigned __int8 *)(v24 + 156);
    uint64_t v54 = *(unsigned __int8 *)(v24 + 155);
    float32x2_t v55 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v56 = *(unsigned __int8 *)(v24 + 154);
    do
    {
      if (v26)
      {
        unint64_t v57 = 0;
        uint64_t v58 = v28;
        float v59 = v18;
        uint64_t v60 = v29;
        do
        {
          uint64_t v61 = v58 + 8;
          if (v59)
          {
            _H11 = *(_WORD *)(v61 + 2 * result);
            __asm { FCVT            S11, H11 }
            _H12 = *(_WORD *)(v58 + 2 * result);
            __asm { FCVT            S12, H12 }
            char v70 = llroundf(_S12 * 255.0);
            char v71 = llroundf(_S11 * 255.0);
          }
          else
          {
            char v70 = 0;
            char v71 = 0;
          }
          _D11.i16[0] = *(_WORD *)(v58 + 2 * v56);
          _D12.i16[0] = *(_WORD *)(v58 + 2 * v53);
          _D11.i16[1] = *(_WORD *)(v58 + 2 * v54);
          _D11 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D11), v55), 0), v55)));
          _D11.i16[0] = *(_WORD *)(v51 + 2 * _D11.u32[0]);
          _D13.i16[0] = *(_WORD *)(v61 + 2 * v54);
          __asm { FCVT            S11, H11 }
          _H14 = *(_WORD *)(v51 + 2 * _D11.u32[1]);
          _D12.i16[1] = *(_WORD *)(v61 + 2 * v56);
          _D12 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D12), v55), 0), v55)));
          __asm { FCVT            S14, H14 }
          _D12.i16[0] = *(_WORD *)(v51 + 2 * _D12.u32[0]);
          _H15 = *(_WORD *)(v51 + 2 * _D12.u32[1]);
          __asm
          {
            FCVT            S12, H12
            FCVT            S15, H15
          }
          _D13.i16[1] = *(_WORD *)(v61 + 2 * v53);
          _D13 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D13), v55), 0), v55)));
          _D13.i16[0] = *(_WORD *)(v51 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _S16 = (float)((float)(v43 * _S14) + (float)(*(float *)_D11.i32 * v41)) + (float)(*(float *)_D12.i32 * v44);
          _S17 = (float)((float)(v46 * _S14) + (float)(*(float *)_D11.i32 * v45)) + (float)(*(float *)_D12.i32 * v47);
          *(float *)_D11.i32 = (float)((float)(v49 * _S14) + (float)(*(float *)_D11.i32 * v48))
                             + (float)(*(float *)_D12.i32 * v50);
          *(float *)_D12.i32 = (float)(v43 * *(float *)_D13.i32) + (float)(_S15 * v41);
          float v78 = (float)(v46 * *(float *)_D13.i32) + (float)(_S15 * v45);
          *(float *)_D13.i32 = (float)(v49 * *(float *)_D13.i32) + (float)(_S15 * v48);
          LOWORD(_S15) = *(_WORD *)(v51 + 2 * _D13.u32[1]);
          __asm { FCVT            S15, H15 }
          *(float *)_D12.i32 = *(float *)_D12.i32 + (float)(_S15 * v44);
          float v80 = v78 + (float)(_S15 * v47);
          LOWORD(_S16) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          *(float *)_D13.i32 = *(float *)_D13.i32 + (float)(_S15 * v50);
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _D11.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          __asm { FCVT            S15, H11 }
          _D11.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D12.i32, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _D12.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          float v84 = (float)(v37 * _S17) + (float)(v36 * _S16);
          float v85 = _S16 + *(float *)_D11.i32;
          _S17 = _S17 + *(float *)_D12.i32;
          float v87 = (float)(v32 + (float)(v85 * v101)) + (float)(_S17 * v100);
          float v88 = (float)(v32 + (float)(v85 * v39)) + (float)(_S17 * v40);
          LOWORD(_S17) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D13.i32, 0.0), 8191.0)));
          __asm { FCVT            S13, H17 }
          float v89 = v84 + (float)(v38 * _S15);
          float v90 = v87 + (float)((float)(_S15 + *(float *)_D13.i32) * v99);
          float v91 = v88 + (float)((float)(_S15 + *(float *)_D13.i32) * v42);
          if (v90 < v34) {
            float v92 = v34;
          }
          else {
            float v92 = v90;
          }
          float v93 = v89 + v31;
          if (v90 > v35) {
            float v92 = v35;
          }
          char v94 = llroundf(v92);
          if (v93 < v31) {
            float v95 = v31;
          }
          else {
            float v95 = v93;
          }
          *uint64_t v60 = v94;
          if (v93 > v33) {
            float v95 = v33;
          }
          v60[1] = llroundf(v95);
          float v96 = v35;
          if (v91 <= v35)
          {
            float v96 = v91;
            if (v91 < v34) {
              float v96 = v34;
            }
          }
          float v97 = (float)((float)((float)(v37 * *(float *)_D12.i32) + (float)(v36 * *(float *)_D11.i32))
                      + (float)(v38 * *(float *)_D13.i32))
              + v31;
          v60[2] = llroundf(v96);
          float v98 = v33;
          if (v97 <= v33)
          {
            float v98 = v97;
            if (v97 < v31) {
              float v98 = v31;
            }
          }
          v60[3] = llroundf(v98);
          if (v59)
          {
            *float v59 = v70;
            v59[1] = v71;
            v59 += 2;
          }
          v58 += 16;
          v57 += 2;
          v60 += 4;
        }
        while (v26 > v57);
      }
      v28 += v22;
      v29 += v23;
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_2vuyf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_2vuyf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = *(void *)(result + 112);
  int64x2_t v12 = *(void **)(result + 128);
  unint64_t v13 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
  unint64_t v14 = *(uint64_t **)(result + 136);
  unint64_t v15 = (v8 + v8 * a2) / v9;
  uint64_t v16 = (unsigned char *)v12[1];
  if (v16) {
    v16 += v14[1] * v13 + v11;
  }
  if (v15 != v10)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 44);
    uint64_t v19 = v10 + v18;
    uint64_t v20 = **(void **)(result + 64);
    uint64_t v21 = *v14;
    uint64_t v22 = *v12 + v21 * v13;
    uint64_t v23 = *(void *)(result + 152);
    unint64_t v24 = *(void *)(result + 20);
    uint64_t v25 = v15 + v18;
    uint64_t v26 = **(void **)(result + 56) + v20 * v19 + 8 * *(void *)(result + 36);
    uint64_t v27 = (unsigned char *)(v22 + v11);
    uint64_t v28 = v25 - v19;
    float v29 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a4) = *(_WORD *)(v23 + 144);
    float v30 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    float v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    float v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    float v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    float v34 = (float)LODWORD(a8);
    float v35 = *(float *)(v23 + 36);
    float v36 = *(float *)(v23 + 40);
    float v37 = *(float *)(v23 + 44);
    float v38 = *(float *)(v23 + 48) * 0.5;
    float v39 = *(float *)(v23 + 52) * 0.5;
    float v40 = *(float *)(v23 + 56) * 0.5;
    float v41 = *(float *)(v23 + 60) * 0.5;
    float v42 = *(float *)(v23 + 64) * 0.5;
    float v43 = *(float *)(v23 + 68) * 0.5;
    uint64_t v44 = *(unsigned __int8 *)(v23 + 157);
    uint64_t v45 = *(unsigned __int8 *)(v23 + 156);
    result = *(unsigned __int8 *)(v23 + 155);
    uint64_t v46 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v24)
      {
        unint64_t v47 = 0;
        uint64_t v48 = v26;
        float v49 = v16;
        float v50 = v27;
        do
        {
          uint64_t v51 = v48 + 8;
          if (v49)
          {
            _H23 = *(_WORD *)(v51 + 2 * v44);
            __asm { FCVT            S23, H23 }
            _H24 = *(_WORD *)(v48 + 2 * v44);
            __asm { FCVT            S24, H24 }
            char v60 = llroundf(_S24 * 255.0);
            char v61 = llroundf(_S23 * 255.0);
          }
          else
          {
            char v60 = 0;
            char v61 = 0;
          }
          _H23 = *(_WORD *)(v48 + 2 * v46);
          __asm { FCVT            S23, H23 }
          _H24 = *(_WORD *)(v48 + 2 * result);
          float v65 = v29 * _S23;
          __asm { FCVT            S23, H24 }
          float v67 = v29 * _S23;
          LOWORD(_S23) = *(_WORD *)(v48 + 2 * v45);
          __asm { FCVT            S23, H23 }
          float v69 = v29 * _S23;
          LOWORD(_S23) = *(_WORD *)(v51 + 2 * v46);
          __asm { FCVT            S23, H23 }
          _H24 = *(_WORD *)(v51 + 2 * result);
          float v72 = v29 * _S23;
          __asm { FCVT            S24, H24 }
          float v74 = v29 * _S24;
          _H25 = *(_WORD *)(v51 + 2 * v45);
          __asm { FCVT            S25, H25 }
          float v77 = v29 * _S25;
          float v78 = (float)((float)((float)(v36 * v67) + (float)(v35 * v65)) + (float)(v37 * v69)) + v30;
          float v79 = v65 + v72;
          float v80 = v67 + v74;
          float v81 = v69 + v77;
          float v82 = (float)((float)(v31 + (float)(v79 * v38)) + (float)(v80 * v39)) + (float)(v81 * v40);
          float v83 = (float)((float)(v31 + (float)(v79 * v41)) + (float)(v80 * v42)) + (float)(v81 * v43);
          if (v82 < v33) {
            float v84 = v33;
          }
          else {
            float v84 = v82;
          }
          if (v82 > v34) {
            float v84 = v34;
          }
          *float v50 = llroundf(v84);
          if (v78 < v30) {
            float v85 = v30;
          }
          else {
            float v85 = v78;
          }
          if (v78 > v32) {
            float v85 = v32;
          }
          v50[1] = llroundf(v85);
          float v86 = v34;
          if (v83 <= v34)
          {
            float v86 = v83;
            if (v83 < v33) {
              float v86 = v33;
            }
          }
          float v87 = (float)((float)((float)(v36 * v74) + (float)(v35 * v72)) + (float)(v37 * v77)) + v30;
          v50[2] = llroundf(v86);
          float v88 = v32;
          if (v87 <= v32)
          {
            float v88 = v87;
            if (v87 < v30) {
              float v88 = v30;
            }
          }
          v50[3] = llroundf(v88);
          if (v49)
          {
            unsigned char *v49 = v60;
            v49[1] = v61;
            v49 += 2;
          }
          v48 += 16;
          v47 += 2;
          v50 += 4;
        }
        while (v24 > v47);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, float a3, float a4, float a5, double _D3)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *result;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = *((void *)result + 14);
  int64x2_t v12 = (void *)*((void *)result + 16);
  unint64_t v13 = *((void *)result + 13) * a2 / v9 + *((void *)result + 15);
  unint64_t v14 = (uint64_t *)*((void *)result + 17);
  unint64_t v15 = (v8 + v8 * a2) / v9;
  uint64_t v16 = (unsigned char *)v12[1];
  if (v16) {
    v16 += v14[1] * v13 + v11;
  }
  if (v15 != v10)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 44);
    uint64_t v19 = v10 + v18;
    uint64_t v20 = **((void **)result + 8);
    uint64_t v21 = *v14;
    uint64_t v22 = *((void *)result + 19);
    uint64_t v23 = *v12 + v21 * v13;
    unint64_t v24 = *(void *)(result + 20);
    uint64_t v25 = v15 + v18;
    uint64_t v26 = **((void **)result + 7) + v20 * v19 + 8 * *(void *)(result + 36);
    uint64_t v27 = (unsigned char *)(v23 + v11);
    uint64_t v28 = v25 - v19;
    LOWORD(a3) = *(_WORD *)(v22 + 144);
    float v29 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v22 + 146);
    LOWORD(a5) = *(_WORD *)(v22 + 148);
    float v30 = (float)LODWORD(a5);
    LOWORD(_D3) = *(_WORD *)(v22 + 150);
    float v121 = (float)LODWORD(_D3);
    LOWORD(_D3) = *(_WORD *)(v22 + 152);
    float v31 = (float)LODWORD(_D3);
    float v32 = *(float *)(v22 + 40);
    float v122 = *(float *)(v22 + 36);
    float v123 = (float)LODWORD(a4);
    float v33 = *(float *)(v22 + 44);
    float v119 = *(float *)(v22 + 52) * 0.5;
    float v120 = *(float *)(v22 + 48) * 0.5;
    float v117 = *(float *)(v22 + 60) * 0.5;
    float v118 = *(float *)(v22 + 56) * 0.5;
    float v34 = *(float *)(v22 + 72);
    float v115 = *(float *)(v22 + 68) * 0.5;
    float v116 = *(float *)(v22 + 64) * 0.5;
    float v35 = *(float *)(v22 + 76);
    float v36 = *(float *)(v22 + 80);
    float v37 = *(float *)(v22 + 84);
    float v38 = *(float *)(v22 + 88);
    float v39 = *(float *)(v22 + 92);
    float v40 = *(float *)(v22 + 96);
    float v41 = *(float *)(v22 + 100);
    float v42 = *(float *)(v22 + 104);
    uint64_t v43 = v22 + 164;
    uint64_t v44 = v22 + 16548;
    result = (unsigned __int8 *)(v22 + 32932);
    float v46 = *(float *)(v22 + 108);
    float v45 = *(float *)(v22 + 112);
    float v47 = *(float *)(v22 + 116);
    float v48 = *(float *)(v22 + 120);
    uint64_t v49 = *(unsigned __int8 *)(v22 + 157);
    uint64_t v50 = *(unsigned __int8 *)(v22 + 156);
    uint64_t v51 = *(unsigned __int8 *)(v22 + 155);
    float32x2_t v52 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v53 = *(unsigned __int8 *)(v22 + 154);
    do
    {
      if (v24)
      {
        unint64_t v54 = 0;
        float32x2_t v55 = v16;
        uint64_t v56 = v27;
        uint64_t v57 = v26;
        do
        {
          LOWORD(_D3) = *(_WORD *)(v57 + 2 * v53);
          v6.i16[0] = *(_WORD *)(v57 + 2 * v50);
          uint64_t v58 = v57 + 8;
          WORD1(_D3) = *(_WORD *)(v57 + 2 * v51);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D3), v52), 0), v52)));
          _D3.i16[0] = *(_WORD *)(v43 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v43 + 2 * _D3.u32[1]);
          __asm { FCVT            S16, H3 }
          v6.i16[1] = *(_WORD *)(v57 + 8 + 2 * v53);
          _D3 = COERCE_DOUBLE(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v6), v52), 0), v52)));
          int32x2_t v66 = vcvt_s32_f32(*(float32x2_t *)&_D3);
          LOWORD(_D3) = *(_WORD *)(v43 + 2 * v66.u32[0]);
          __asm { FCVT            S17, H3 }
          float v68 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v69 = (float)((float)((float)(v45 * _S16) + (float)(v46 * _S15)) + (float)(v47 * _S17)) + (float)(v48 * v68);
          LODWORD(_D3) = 1174403072;
          if (v69 <= 8191.0)
          {
            *(float *)&_D3 = (float)((float)((float)(v45 * _S16) + (float)(v46 * _S15)) + (float)(v47 * _S17))
                           + (float)(v48 * v68);
            if (v69 < 0.0) {
              _D3 = 0.0;
            }
          }
          _D18.i16[0] = *(_WORD *)(v58 + 2 * v51);
          _H19 = *(_WORD *)(v43 + 2 * v66.u32[1]);
          _D18.i16[1] = *(_WORD *)(v58 + 2 * v50);
          __asm { FCVT            S19, H19 }
          _D18 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D18), v52), 0), v52)));
          _D18.i16[0] = *(_WORD *)(v43 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v43 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          float v74 = (float)((float)((float)(v45 * _S20) + (float)(v46 * _S19)) + (float)(v47 * _S22))
              + (float)(v48 * fmaxf(_S19, fmaxf(_S20, _S22)));
          _D18.i32[0] = 1174403072;
          if (v74 <= 8191.0)
          {
            *(float *)_D18.i32 = v74;
            if (v74 < 0.0) {
              _D18 = 0;
            }
          }
          if (v55)
          {
            _H13 = *(_WORD *)(v57 + 2 * v49);
            __asm { FCVT            S13, H13 }
            _H1 = *(_WORD *)(v58 + 2 * v49);
            __asm { FCVT            S1, H1 }
            char v79 = llroundf(_S13 * 255.0);
            char v80 = llroundf(_S1 * 255.0);
          }
          else
          {
            char v79 = 0;
            char v80 = 0;
          }
          _H1 = *(_WORD *)(v44 + 2 * llroundf(*(float *)&_D3));
          __asm { FCVT            S1, H1 }
          float v83 = _S15 * _S1;
          float v84 = _S16 * _S1;
          _H16 = *(_WORD *)(v44 + 2 * llroundf(*(float *)_D18.i32));
          float v86 = _S17 * _S1;
          __asm { FCVT            S16, H16 }
          float v88 = _S19 * _S16;
          float v89 = _S20 * _S16;
          _S16 = _S22 * _S16;
          float v91 = (float)((float)(v35 * v84) + (float)(v83 * v34)) + (float)(v86 * v36);
          float v92 = (float)((float)(v38 * v84) + (float)(v83 * v37)) + (float)(v86 * v39);
          _S1 = (float)((float)(v41 * v84) + (float)(v83 * v40)) + (float)(v86 * v42);
          _S3 = (float)((float)(v35 * v89) + (float)(v88 * v34)) + (float)(_S16 * v36);
          _S5 = (float)((float)(v38 * v89) + (float)(v88 * v37)) + (float)(_S16 * v39);
          float v96 = (float)((float)(v41 * v89) + (float)(v88 * v40)) + (float)(_S16 * v42);
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0))];
          __asm { FCVT            S18, H16 }
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0))];
          LOWORD(_S1) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0))];
          __asm
          {
            FCVT            S20, H16
            FCVT            S1, H1
          }
          LOWORD(_S3) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
          __asm { FCVT            S3, H3 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          __asm { FCVT            S16, H5 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0))];
          __asm { FCVT            S17, H5 }
          float v103 = (float)((float)((float)(v32 * _S20) + (float)(v122 * _S18)) + (float)(v33 * _S1)) + v29;
          float v105 = _S20 + _S16;
          float v106 = _S1 + _S17;
          float v107 = (float)((float)(v123 + (float)((float)(_S18 + _S3) * v120)) + (float)(v105 * v119))
               + (float)((float)(_S1 + _S17) * v118);
          if (v103 < v29) {
            float v108 = v29;
          }
          else {
            float v108 = v103;
          }
          if (v103 > v30) {
            float v108 = v30;
          }
          unsigned char *v56 = llroundf(v108);
          float v109 = v31;
          if (v107 <= v31)
          {
            float v109 = (float)((float)(v123 + (float)((float)(_S18 + _S3) * v120)) + (float)(v105 * v119))
                 + (float)(v106 * v118);
            if (v107 < v121) {
              float v109 = v121;
            }
          }
          float v110 = (float)((float)((float)(v32 * _S16) + (float)(v122 * _S3)) + (float)(v33 * _S17)) + v29;
          float v104 = _S18 + _S3;
          float v111 = (float)((float)(v123 + (float)((float)(_S18 + _S3) * v117)) + (float)(v105 * v116))
               + (float)(v106 * v115);
          v56[1] = llroundf(v109);
          if (v110 < v29) {
            float v112 = v29;
          }
          else {
            float v112 = v110;
          }
          if (v110 <= v30) {
            float v113 = v112;
          }
          else {
            float v113 = v30;
          }
          v56[2] = llroundf(v113);
          float v114 = v31;
          if (v111 <= v31)
          {
            float v114 = (float)((float)(v123 + (float)(v104 * v117)) + (float)(v105 * v116)) + (float)(v106 * v115);
            if (v111 < v121) {
              float v114 = v121;
            }
          }
          v56[3] = llroundf(v114);
          if (v55)
          {
            *float32x2_t v55 = v79;
            v55[1] = v80;
            v55 += 2;
          }
          v57 += 16;
          v54 += 2;
          v56 += 4;
        }
        while (v24 > v54);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_yuvsf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, double _D4)
{
  uint64_t v9 = *(void *)(result + 28);
  unint64_t v10 = *(unsigned __int8 *)result;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = *(void *)(result + 112);
  int64x2_t v13 = *(void **)(result + 128);
  unint64_t v14 = *(void *)(result + 104) * a2 / v10 + *(void *)(result + 120);
  unint64_t v15 = *(uint64_t **)(result + 136);
  unint64_t v16 = (v9 + v9 * a2) / v10;
  uint64_t v17 = (unsigned char *)v13[1];
  if (v17) {
    v17 += v15[1] * v14 + v12;
  }
  if (v16 != v11)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(result + 44);
    uint64_t v20 = v11 + v19;
    uint64_t v21 = **(void **)(result + 64);
    uint64_t v22 = *v15;
    uint64_t v23 = *(void *)(result + 152);
    uint64_t v24 = *v13 + v22 * v14;
    unint64_t v25 = *(void *)(result + 20);
    uint64_t v26 = v16 + v19;
    uint64_t v27 = **(void **)(result + 56) + v21 * v20 + 8 * *(void *)(result + 36);
    uint64_t v28 = (unsigned char *)(v24 + v12);
    uint64_t v29 = v26 - v20;
    LOWORD(a3) = *(_WORD *)(v23 + 144);
    float v30 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v23 + 146);
    float v31 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 148);
    float v32 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 150);
    float v33 = (float)LODWORD(a6);
    LOWORD(_D4) = *(_WORD *)(v23 + 152);
    float v34 = (float)LODWORD(_D4);
    float v35 = *(float *)(v23 + 36);
    float v36 = *(float *)(v23 + 40);
    float v37 = *(float *)(v23 + 44);
    float v98 = *(float *)(v23 + 48) * 0.5;
    float v97 = *(float *)(v23 + 52) * 0.5;
    float v96 = *(float *)(v23 + 56) * 0.5;
    float v95 = *(float *)(v23 + 60) * 0.5;
    float v38 = *(float *)(v23 + 64) * 0.5;
    float v39 = *(float *)(v23 + 72);
    float v40 = *(float *)(v23 + 68) * 0.5;
    float v41 = *(float *)(v23 + 76);
    float v42 = *(float *)(v23 + 80);
    float v43 = *(float *)(v23 + 84);
    float v44 = *(float *)(v23 + 88);
    float v45 = *(float *)(v23 + 92);
    float v46 = *(float *)(v23 + 96);
    float v47 = *(float *)(v23 + 100);
    float v48 = *(float *)(v23 + 104);
    uint64_t v49 = v23 + 164;
    uint64_t v50 = v23 + 16548;
    result = *(unsigned __int8 *)(v23 + 157);
    uint64_t v51 = *(unsigned __int8 *)(v23 + 156);
    uint64_t v52 = *(unsigned __int8 *)(v23 + 155);
    float32x2_t v53 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v54 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v25)
      {
        unint64_t v55 = 0;
        uint64_t v56 = v27;
        uint64_t v57 = v17;
        uint64_t v58 = v28;
        do
        {
          uint64_t v59 = v56 + 8;
          if (v57)
          {
            _H4 = *(_WORD *)(v59 + 2 * result);
            __asm { FCVT            S4, H4 }
            _H16 = *(_WORD *)(v56 + 2 * result);
            __asm { FCVT            S16, H16 }
            char v68 = llroundf(_S16 * 255.0);
            char v69 = llroundf(_S4 * 255.0);
          }
          else
          {
            char v68 = 0;
            char v69 = 0;
          }
          LOWORD(_D4) = *(_WORD *)(v56 + 2 * v54);
          _D16.i16[0] = *(_WORD *)(v56 + 2 * v51);
          WORD1(_D4) = *(_WORD *)(v56 + 2 * v52);
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v53), 0), v53))));
          LOWORD(_D4) = *(_WORD *)(v49 + 2 * LODWORD(_D4));
          _D17.i16[0] = *(_WORD *)(v59 + 2 * v52);
          __asm { FCVT            S4, H4 }
          _H11 = *(_WORD *)(v49 + 2 * HIDWORD(_D4));
          __asm { FCVT            S11, H11 }
          _D16.i16[1] = *(_WORD *)(v59 + 2 * v54);
          _D16 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D16), v53), 0), v53)));
          _D16.i16[0] = *(_WORD *)(v49 + 2 * _D16.u32[0]);
          _H12 = *(_WORD *)(v49 + 2 * _D16.u32[1]);
          _D17.i16[1] = *(_WORD *)(v59 + 2 * v51);
          __asm { FCVT            S16, H16 }
          _D17 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D17), v53), 0), v53)));
          _D17.i16[0] = *(_WORD *)(v49 + 2 * _D17.u32[0]);
          __asm
          {
            FCVT            S12, H12
            FCVT            S17, H17
          }
          _H13 = *(_WORD *)(v49 + 2 * _D17.u32[1]);
          __asm { FCVT            S13, H13 }
          float v76 = (float)((float)(v41 * _S11) + (float)(*(float *)&_D4 * v39)) + (float)(*(float *)_D16.i32 * v42);
          float v77 = (float)((float)(v44 * _S11) + (float)(*(float *)&_D4 * v43)) + (float)(*(float *)_D16.i32 * v45);
          *(float *)&_D4 = (float)((float)(v47 * _S11) + (float)(*(float *)&_D4 * v46))
                         + (float)(*(float *)_D16.i32 * v48);
          *(float *)_D16.i32 = (float)((float)(v41 * *(float *)_D17.i32) + (float)(_S12 * v39)) + (float)(_S13 * v42);
          float v78 = (float)((float)(v44 * *(float *)_D17.i32) + (float)(_S12 * v43)) + (float)(_S13 * v45);
          *(float *)_D17.i32 = (float)((float)(v47 * *(float *)_D17.i32) + (float)(_S12 * v46)) + (float)(_S13 * v48);
          LOWORD(_S12) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S14, H12 }
          LOWORD(_S12) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          LOWORD(_D4) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(*(float *)&_D4, 0.0), 8191.0)));
          __asm
          {
            FCVT            S15, H12
            FCVT            S4, H4
          }
          _D16.i16[0] = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(*(float *)_D16.i32, 0.0), 8191.0)));
          unsigned int v81 = llroundf(fminf(fmaxf(v78, 0.0), 8191.0));
          __asm { FCVT            S11, H16 }
          _D16.i16[0] = *(_WORD *)(v50 + 2 * v81);
          __asm { FCVT            S12, H16 }
          _D16.i16[0] = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(*(float *)_D17.i32, 0.0), 8191.0)));
          __asm { FCVT            S13, H16 }
          *(float *)_D17.i32 = (float)((float)((float)(v36 * _S15) + (float)(v35 * _S14)) + (float)(v37 * *(float *)&_D4))
                             + v30;
          float v85 = _S14 + _S11;
          float v86 = _S15 + _S12;
          *(float *)_D16.i32 = *(float *)&_D4 + _S13;
          *(float *)&_D4 = (float)((float)(v31 + (float)(v85 * v98)) + (float)(v86 * v97))
                         + (float)((float)(*(float *)&_D4 + _S13) * v96);
          if (*(float *)_D17.i32 < v30) {
            float v87 = v30;
          }
          else {
            float v87 = *(float *)_D17.i32;
          }
          if (*(float *)_D17.i32 <= v32) {
            float v88 = v87;
          }
          else {
            float v88 = v32;
          }
          *uint64_t v58 = llroundf(v88);
          float v89 = v34;
          if (*(float *)&_D4 <= v34)
          {
            float v89 = *(float *)&_D4;
            if (*(float *)&_D4 < v33) {
              float v89 = v33;
            }
          }
          float v90 = (float)((float)((float)(v36 * _S12) + (float)(v35 * _S11)) + (float)(v37 * _S13)) + v30;
          float v91 = (float)((float)(v31 + (float)(v85 * v95)) + (float)(v86 * v38)) + (float)(*(float *)_D16.i32 * v40);
          v58[1] = llroundf(v89);
          if (v90 < v30) {
            float v92 = v30;
          }
          else {
            float v92 = (float)((float)((float)(v36 * _S12) + (float)(v35 * _S11)) + (float)(v37 * _S13)) + v30;
          }
          if (v90 <= v32) {
            float v93 = v92;
          }
          else {
            float v93 = v32;
          }
          v58[2] = llroundf(v93);
          float v94 = v34;
          if (v91 <= v34)
          {
            float v94 = v91;
            if (v91 < v33) {
              float v94 = v33;
            }
          }
          v58[3] = llroundf(v94);
          if (v57)
          {
            unsigned char *v57 = v68;
            v57[1] = v69;
            v57 += 2;
          }
          v56 += 16;
          v55 += 2;
          v58 += 4;
        }
        while (v25 > v55);
      }
      v27 += v21;
      v28 += v22;
      ++v18;
    }
    while (v18 != v29);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_yuvsf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_yuvsf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = *(void *)(result + 112);
  int64x2_t v12 = *(void **)(result + 128);
  unint64_t v13 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
  unint64_t v14 = *(uint64_t **)(result + 136);
  unint64_t v15 = (v8 + v8 * a2) / v9;
  unint64_t v16 = (unsigned char *)v12[1];
  if (v16) {
    v16 += v14[1] * v13 + v11;
  }
  if (v15 != v10)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 44);
    uint64_t v19 = v10 + v18;
    uint64_t v20 = **(void **)(result + 64);
    uint64_t v21 = *v14;
    uint64_t v22 = *v12 + v21 * v13;
    uint64_t v23 = *(void *)(result + 152);
    unint64_t v24 = *(void *)(result + 20);
    uint64_t v25 = v15 + v18;
    uint64_t v26 = **(void **)(result + 56) + v20 * v19 + 8 * *(void *)(result + 36);
    uint64_t v27 = (unsigned char *)(v22 + v11);
    uint64_t v28 = v25 - v19;
    float v29 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a4) = *(_WORD *)(v23 + 144);
    float v30 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    float v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    float v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    float v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    float v34 = (float)LODWORD(a8);
    float v35 = *(float *)(v23 + 36);
    float v36 = *(float *)(v23 + 40);
    float v37 = *(float *)(v23 + 44);
    float v38 = *(float *)(v23 + 48) * 0.5;
    float v39 = *(float *)(v23 + 52) * 0.5;
    float v40 = *(float *)(v23 + 56) * 0.5;
    float v41 = *(float *)(v23 + 60) * 0.5;
    float v42 = *(float *)(v23 + 64) * 0.5;
    float v43 = *(float *)(v23 + 68) * 0.5;
    uint64_t v44 = *(unsigned __int8 *)(v23 + 157);
    uint64_t v45 = *(unsigned __int8 *)(v23 + 156);
    result = *(unsigned __int8 *)(v23 + 155);
    uint64_t v46 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v24)
      {
        unint64_t v47 = 0;
        uint64_t v48 = v26;
        uint64_t v49 = v16;
        uint64_t v50 = v27;
        do
        {
          uint64_t v51 = v48 + 8;
          if (v49)
          {
            _H23 = *(_WORD *)(v51 + 2 * v44);
            __asm { FCVT            S23, H23 }
            _H24 = *(_WORD *)(v48 + 2 * v44);
            __asm { FCVT            S24, H24 }
            char v60 = llroundf(_S24 * 255.0);
            char v61 = llroundf(_S23 * 255.0);
          }
          else
          {
            char v60 = 0;
            char v61 = 0;
          }
          _H23 = *(_WORD *)(v48 + 2 * v46);
          __asm { FCVT            S23, H23 }
          float v64 = v29 * _S23;
          _H24 = *(_WORD *)(v48 + 2 * result);
          __asm { FCVT            S24, H24 }
          float v67 = v29 * _S24;
          _H25 = *(_WORD *)(v48 + 2 * v45);
          __asm { FCVT            S25, H25 }
          float v70 = v29 * _S25;
          _H26 = *(_WORD *)(v51 + 2 * v46);
          __asm { FCVT            S26, H26 }
          float v73 = v29 * _S26;
          _H27 = *(_WORD *)(v51 + 2 * result);
          __asm { FCVT            S27, H27 }
          float v76 = v29 * _S27;
          _H28 = *(_WORD *)(v51 + 2 * v45);
          __asm { FCVT            S28, H28 }
          float v79 = v29 * _S28;
          float v80 = (float)((float)((float)(v36 * v67) + (float)(v35 * v64)) + (float)(v37 * v70)) + v30;
          float v81 = (float)((float)((float)(v36 * v76) + (float)(v35 * v73)) + (float)(v37 * v79)) + v30;
          float v82 = v64 + v73;
          float v83 = v67 + v76;
          float v84 = v70 + v79;
          float v85 = (float)((float)(v31 + (float)(v82 * v38)) + (float)(v83 * v39)) + (float)(v84 * v40);
          float v86 = (float)(v31 + (float)(v82 * v41)) + (float)(v83 * v42);
          if (v80 < v30) {
            float v87 = v30;
          }
          else {
            float v87 = v80;
          }
          if (v80 > v32) {
            float v87 = v32;
          }
          float v88 = v86 + (float)(v84 * v43);
          *uint64_t v50 = llroundf(v87);
          if (v85 < v33) {
            float v89 = v33;
          }
          else {
            float v89 = v85;
          }
          if (v85 > v34) {
            float v89 = v34;
          }
          v50[1] = llroundf(v89);
          if (v81 < v30) {
            float v90 = v30;
          }
          else {
            float v90 = v81;
          }
          if (v81 > v32) {
            float v90 = v32;
          }
          v50[2] = llroundf(v90);
          float v91 = v34;
          if (v88 <= v34)
          {
            float v91 = v88;
            if (v88 < v33) {
              float v91 = v33;
            }
          }
          v50[3] = llroundf(v91);
          if (v49)
          {
            unsigned char *v49 = v60;
            v49[1] = v61;
            v49 += 2;
          }
          v48 += 16;
          v47 += 2;
          v50 += 4;
        }
        while (v24 > v47);
      }
      v26 += v20;
      v27 += v21;
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

int16x8_t *vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float32x4_t a4, float16x8_t _Q2, double a6, float32x4_t a7)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v227 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 28);
  unint64_t v11 = *a1;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = v12 + v9;
  unint64_t v14 = (v10 + v10 * a2) / v11;
  uint64_t v15 = v14 + v9;
  uint64_t v16 = *((void *)a1 + 14);
  uint64_t v17 = *((void *)a1 + 19);
  uint64_t v18 = *((void *)a1 + 15);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v21 = **((void **)a1 + 8);
  uint64_t v225 = **((void **)a1 + 7);
  unint64_t v22 = *((void *)a1 + 13) * a2;
  uint64_t v199 = *v20;
  uint64_t v23 = v20[1];
  uint64_t v24 = v20[2];
  uint64_t v26 = *v19;
  uint64_t v25 = v19[1];
  result = (int16x8_t *)v19[2];
  int v236 = *(_DWORD *)(v17 + 154);
  unsigned int v28 = *(unsigned __int16 *)(v17 + 144);
  unsigned int v29 = *(unsigned __int8 *)(v17 + 132);
  unsigned int v30 = *(unsigned __int16 *)(v17 + 146);
  unsigned int v31 = *(unsigned __int16 *)(v17 + 148);
  unsigned int v32 = *(unsigned __int16 *)(v17 + 150);
  unsigned int v33 = *(unsigned __int16 *)(v17 + 152);
  float v233 = *(float *)(v17 + 36);
  float v232 = *(float *)(v17 + 40);
  v34.i32[0] = *(_DWORD *)(v17 + 48);
  float v231 = *(float *)(v17 + 44);
  _Q2.i32[0] = *(_DWORD *)(v17 + 52);
  v35.i32[0] = *(_DWORD *)(v17 + 56);
  __int32 v37 = *(_DWORD *)(v17 + 60);
  unsigned __int32 v36 = *(_DWORD *)(v17 + 64);
  a4.i32[0] = *(_DWORD *)(v17 + 68);
  float v230 = *(float *)(v17 + 72);
  _S5 = *(float *)(v17 + 80);
  float v229 = *(float *)(v17 + 76);
  _S6 = *(float *)(v17 + 84);
  _S7 = *(float *)(v17 + 88);
  uint64_t v41 = v22 / v11 + v18;
  uint64_t v197 = v23;
  uint64_t v198 = v21;
  uint64_t v42 = v21 * v13;
  _S16 = *(float *)(v17 + 92);
  _S17 = *(float *)(v17 + 96);
  uint64_t v196 = v24;
  _S18 = *(float *)(v17 + 100);
  _S19 = *(float *)(v17 + 104);
  _S20 = *(float *)(v17 + 108);
  _S21 = *(float *)(v17 + 112);
  _S22 = *(float *)(v17 + 116);
  _S23 = *(float *)(v17 + 120);
  memset(v235, 0, sizeof(v235));
  do
  {
    unsigned int v51 = 0;
    char v52 = *((unsigned char *)&v236 + v7);
    do
    {
      *((unsigned char *)v235 + 8 * (((_BYTE)v7 + (v51 >> 3)) & 0x1F) + v51) = v52 + 4 * v51;
      ++v51;
    }
    while (v51 != 8);
    ++v7;
  }
  while (v7 != 4);
  if (v14 != v12)
  {
    uint64_t v53 = 0;
    uint64_t v195 = v15 - v13;
    uint64_t v54 = v17 + 16548;
    float v55 = (float)v28;
    float v56 = (float)v30;
    float v57 = (float)v31;
    float v234 = (float)v32;
    float v58 = (float)v33;
    v34.i32[1] = v37;
    _Q27.i32[1] = 1056964608;
    *(float32x2_t *)a7.f32 = vmul_f32(v34, (float32x2_t)0x3F0000003F000000);
    _Q2.i32[1] = v36;
    *(float32x2_t *)_Q2.i8 = vmul_f32(*(float32x2_t *)_Q2.i8, (float32x2_t)0x3F0000003F000000);
    v35.i32[1] = a4.i32[0];
    *(float32x2_t *)a4.f32 = vmul_f32(v35, (float32x2_t)0x3F0000003F000000);
    uint64_t v60 = v17 + 32932;
    uint64_t v61 = v17 + 164;
    _S0 = v233;
    __asm { FCVT            H0, S0 }
    short float v223 = *(short float *)&_S0;
    float16x8_t v224 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    _S0 = v232;
    __asm { FCVT            H0, S0 }
    short float v221 = *(short float *)&_S0;
    float16x8_t v222 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)_Q2), 0);
    _D0 = (int16x4_t)vcvt_f16_f32(a4);
    int32x4_t v69 = vdupq_lane_s32((int32x2_t)_D0, 0);
    *(float *)_D0.i32 = v231;
    __asm { FCVT            H0, S0 }
    short float v219 = *(short float *)_D0.i16;
    float16x8_t v220 = (float16x8_t)v69;
    __asm { FCVT            H0, S20 }
    short float v218 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S21 }
    short float v217 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S22 }
    short float v216 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S23 }
    short float v215 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v230;
    __asm { FCVT            H0, S0 }
    short float v214 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v229;
    __asm { FCVT            H0, S0 }
    short float v213 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S5 }
    short float v212 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S6 }
    short float v211 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S7 }
    short float v210 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S16 }
    short float v209 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S17 }
    short float v208 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S18 }
    short float v207 = *(short float *)_D0.i16;
    __asm { FCVT            H0, S19 }
    short float v206 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v28;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v30;
    int16x8_t v71 = vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v31;
    int16x8_t v72 = vdupq_lane_s16(_D0, 0);
    float16x8_t v204 = (float16x8_t)v72;
    float16x8_t v205 = (float16x8_t)v71;
    *(short float *)v72.i16 = (short float)v32;
    int16x8_t v73 = vdupq_lane_s16(*(int16x4_t *)v72.i8, 0);
    *(short float *)v72.i16 = (short float)v33;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)v72.i8, 0);
    float16x8_t v202 = (float16x8_t)_Q0;
    float16x8_t v203 = (float16x8_t)v73;
    if (v29 >= 0x11) {
      unsigned __int8 v75 = 0;
    }
    else {
      unsigned __int8 v75 = 16 - v29;
    }
    if (result) {
      result = (int16x8_t *)((char *)result + 2 * v16 + v24 * v41);
    }
    else {
      result = 0;
    }
    if (v25) {
      uint64_t v76 = v25 + v23 * v41 + 2 * v16;
    }
    else {
      uint64_t v76 = 0;
    }
    uint64_t v77 = v26 + v199 * v41 + 2 * v16;
    uint64_t v78 = v225 + v42 + 8 * v227;
    unsigned __int8 v79 = v75;
    uint16x8_t v80 = (uint16x8_t)vdupq_n_s16(v75);
    float v226 = *(float *)_Q2.i32;
    float v228 = a7.f32[0];
    float v200 = *(float *)&_Q2.i32[1];
    float v201 = a7.f32[1];
    unint64_t v81 = a4.i64[0];
    v82.i64[0] = 0x9000900090009000;
    v82.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v138 = 0;
        float v87 = (uint16x8_t *)v77;
        float v86 = (int16x8_t *)v76;
        float v85 = result;
        float v84 = (const __int16 *)v78;
      }
      else
      {
        int v83 = 0;
        float v84 = (const __int16 *)v78;
        float v85 = result;
        float v86 = (int16x8_t *)v76;
        float v87 = (uint16x8_t *)v77;
        do
        {
          int16x8x4_t v237 = vld4q_s16(v84);
          v84 += 32;
          if (v85)
          {
            float32x4_t v88 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
            int16x8_t v89 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)v237.val[3].i8), v88)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v237.val[3], (int8x16_t)v237.val[3], 8uLL)), v88)));
          }
          else
          {
            int16x8_t v89 = 0uLL;
          }
          v90.i64[0] = 0x7000700070007000;
          v90.i64[1] = 0x7000700070007000;
          uint16x8_t v91 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v237.val[0], v90), (float16x8_t)0), v82));
          uint32x4_t v92 = vmovl_u16(*(uint16x4_t *)v91.i8);
          uint64_t v93 = v92.u32[1];
          uint64_t v94 = v92.u32[0];
          uint32x4_t v95 = vmovl_high_u16(v91);
          uint64_t v96 = v92.u32[3];
          uint64_t v97 = v92.u32[2];
          uint64_t v98 = v95.u32[1];
          uint64_t v99 = v95.u32[0];
          uint64_t v100 = v95.u32[3];
          uint64_t v101 = v95.u32[2];
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v237.val[1], v90), (float16x8_t)0), v82));
          float16x8_t v103 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v102.i8);
          v104.i16[0] = *(_WORD *)(v61 + 2 * v94);
          v104.i16[1] = *(_WORD *)(v61 + 2 * v93);
          v104.i16[2] = *(_WORD *)(v61 + 2 * v97);
          v104.i16[3] = *(_WORD *)(v61 + 2 * v96);
          v104.i16[4] = *(_WORD *)(v61 + 2 * v99);
          v104.i16[5] = *(_WORD *)(v61 + 2 * v98);
          v104.i16[6] = *(_WORD *)(v61 + 2 * v101);
          v104.i16[7] = *(_WORD *)(v61 + 2 * v100);
          uint32x4_t v105 = vmovl_high_u16(v102);
          v106.i16[0] = *(_WORD *)(v61 + 2 * v103.u32[0]);
          v106.i16[1] = *(_WORD *)(v61 + 2 * v103.u32[1]);
          v106.i16[2] = *(_WORD *)(v61 + 2 * v103.u32[2]);
          v106.i16[3] = *(_WORD *)(v61 + 2 * v103.u32[3]);
          v106.i16[4] = *(_WORD *)(v61 + 2 * v105.u32[0]);
          v106.i16[5] = *(_WORD *)(v61 + 2 * v105.u32[1]);
          v106.i16[6] = *(_WORD *)(v61 + 2 * v105.u32[2]);
          v106.i16[7] = *(_WORD *)(v61 + 2 * v105.u32[3]);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v237.val[2], v90), (float16x8_t)0), v82));
          float16x8_t v108 = (float16x8_t)vmovl_high_u16(v107);
          *(void *)&long long v109 = v108.u32[2];
          *((void *)&v109 + 1) = v108.u32[3];
          long long v110 = v109;
          *(void *)&long long v109 = v108.u32[0];
          *((void *)&v109 + 1) = v108.u32[1];
          uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v107.i8);
          v108.i16[0] = *(_WORD *)(v61 + 2 * v111.u32[0]);
          v108.i16[1] = *(_WORD *)(v61 + 2 * v111.u32[1]);
          v108.i16[2] = *(_WORD *)(v61 + 2 * v111.u32[2]);
          v108.i16[3] = *(_WORD *)(v61 + 2 * v111.u32[3]);
          v108.i16[4] = *(_WORD *)(v61 + 2 * v109);
          v108.i16[5] = *(_WORD *)(v61 + 2 * *((void *)&v109 + 1));
          v108.i16[6] = *(_WORD *)(v61 + 2 * v110);
          v108.i16[7] = *(_WORD *)(v61 + 2 * *((void *)&v110 + 1));
          uint16x8_t v112 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v104, v218), v106, v217), v108, v216), vmaxq_f16(vmaxq_f16(v104, v106), v108), v215), (float16x8_t)0), v82));
          uint32x4_t v113 = vmovl_high_u16(v112);
          uint32x4_t v114 = vmovl_u16(*(uint16x4_t *)v112.i8);
          v103.i16[0] = *(_WORD *)(v54 + 2 * v114.u32[0]);
          v103.i16[1] = *(_WORD *)(v54 + 2 * v114.u32[1]);
          v103.i16[2] = *(_WORD *)(v54 + 2 * v114.u32[2]);
          v103.i16[3] = *(_WORD *)(v54 + 2 * v114.u32[3]);
          v103.i16[4] = *(_WORD *)(v54 + 2 * v113.u32[0]);
          v103.i16[5] = *(_WORD *)(v54 + 2 * v113.u32[1]);
          v103.i16[6] = *(_WORD *)(v54 + 2 * v113.u32[2]);
          v103.i16[7] = *(_WORD *)(v54 + 2 * v113.u32[3]);
          float16x8_t v115 = vmulq_f16(v104, v103);
          float16x8_t v116 = vmulq_f16(v106, v103);
          float16x8_t v117 = vmulq_f16(v108, v103);
          float16x8_t v118 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v115, v211), v116, v210), v117, v209);
          float16x8_t v119 = vmulq_n_f16(v117, v206);
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v115, v214), v116, v213), v117, v212), (float16x8_t)0), v82));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          v104.i16[0] = *(_WORD *)(v60 + 2 * v122.u32[0]);
          v104.i16[1] = *(_WORD *)(v60 + 2 * v122.u32[1]);
          v104.i16[2] = *(_WORD *)(v60 + 2 * v122.u32[2]);
          v104.i16[3] = *(_WORD *)(v60 + 2 * v122.u32[3]);
          v104.i16[4] = *(_WORD *)(v60 + 2 * v121.u32[0]);
          v104.i16[5] = *(_WORD *)(v60 + 2 * v121.u32[1]);
          v104.i16[6] = *(_WORD *)(v60 + 2 * v121.u32[2]);
          float16x8_t v123 = v104;
          v123.i16[7] = *(_WORD *)(v60 + 2 * v121.u32[3]);
          float16x8_t v124 = vmlaq_n_f16(v119, v116, v207);
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v82));
          uint32x4_t v126 = vmovl_high_u16(v125);
          int16x8_t v127 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v125.i8);
          *(void *)&long long v109 = v126.u32[2];
          *((void *)&v109 + 1) = v126.u32[3];
          long long v128 = v109;
          *(void *)&long long v109 = v126.u32[0];
          *((void *)&v109 + 1) = v126.u32[1];
          long long v129 = v109;
          *((void *)&v109 + 1) = v127.u32[3];
          v127.i16[7] = (unint64_t)v127.u32[3] >> 48;
          v127.i16[0] = *(_WORD *)(v60 + 2 * v127.u32[0]);
          v127.i16[1] = *(_WORD *)(v60 + 2 * v127.u32[1]);
          v127.i16[2] = *(_WORD *)(v60 + 2 * v127.u32[2]);
          v127.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v109 + 1));
          v127.i16[4] = *(_WORD *)(v60 + 2 * v129);
          v127.i16[5] = *(_WORD *)(v60 + 2 * *((void *)&v129 + 1));
          v127.i16[6] = *(_WORD *)(v60 + 2 * v128);
          float16x8_t v130 = vmlaq_n_f16(v124, v115, v208);
          float16x8_t v131 = (float16x8_t)v127;
          v131.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v128 + 1));
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, (float16x8_t)0), v82));
          uint32x4_t v133 = vmovl_u16(*(uint16x4_t *)v132.i8);
          uint32x4_t v134 = vmovl_high_u16(v132);
          *(void *)&long long v109 = v134.u32[2];
          *((void *)&v109 + 1) = v134.u32[3];
          long long v135 = v109;
          *((void *)&v109 + 1) = v133.u32[3];
          _Q27.i16[7] = (unint64_t)v133.u32[3] >> 48;
          _Q27.i16[0] = *(_WORD *)(v60 + 2 * v133.u32[0]);
          _Q27.i16[1] = *(_WORD *)(v60 + 2 * v133.u32[1]);
          _Q27.i16[2] = *(_WORD *)(v60 + 2 * v133.u32[2]);
          _Q27.i16[3] = *(_WORD *)(v60 + 2 * *((void *)&v109 + 1));
          _Q27.i16[4] = *(_WORD *)(v60 + 2 * v134.u32[0]);
          _Q27.i16[5] = *(_WORD *)(v60 + 2 * v134.u32[1]);
          _Q27.i16[6] = *(_WORD *)(v60 + 2 * v135);
          float16x8_t v136 = (float16x8_t)_Q27;
          v136.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v135 + 1));
          *v87++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v123, v223), v131, v221), v136, v219), v70), v204)), v80);
          int16x8_t v137 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v104, v127), (float16x8_t)vuzp2q_s16((int16x8_t)v123, (int16x8_t)v131));
          _Q2 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v205, v224, (float16x8_t)vzip1q_s16(v137, v137)), v222, (float16x8_t)vzip2q_s16(v137, v137)), v220, vaddq_f16((float16x8_t)vtrn1q_s16(_Q27, _Q27), (float16x8_t)vtrn2q_s16((int16x8_t)v136, (int16x8_t)v136)));
          _Q0 = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(_Q2, v203), v202)), v80);
          *v86++ = _Q0;
          if (v85) {
            *v85++ = v89;
          }
          v83 += 8;
        }
        while (v83 < (int)v8 - 7);
        unint64_t v138 = v8 & 0xFFFFFFF8;
      }
      if (v8 > v138)
      {
        v139 = v84 + 4;
        do
        {
          v140 = (unsigned __int16 *)&v139[v236];
          _Q0.i16[0] = *(v140 - 4);
          v141 = (__int16 *)&v139[BYTE1(v236)];
          _Q0.i16[1] = *(v141 - 4);
          float32x2_t v142 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          *(int32x2_t *)_Q0.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q0.i8), v142), 0), v142)));
          _Q0.i16[0] = *(_WORD *)(v61 + 2 * _Q0.u32[0]);
          v143 = (__int16 *)&v139[BYTE2(v236)];
          _Q2.i16[0] = *(v143 - 4);
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v61 + 2 * _Q0.u32[1]);
          __asm { FCVT            S1, H1 }
          _Q2.i16[1] = *v140;
          *(float32x2_t *)_Q2.i8 = vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q2.i8), v142), 0), v142));
          int32x2_t v146 = vcvt_s32_f32(*(float32x2_t *)_Q2.i8);
          _Q2.i16[0] = *(_WORD *)(v61 + 2 * v146.u32[0]);
          __asm { FCVT            S2, H2 }
          float v147 = fmaxf(*(float *)_Q0.i32, fmaxf(_S1, *(float *)_Q2.i32));
          float v148 = (float)((float)((float)(_S21 * _S1) + (float)(_S20 * *(float *)_Q0.i32))
                       + (float)(_S22 * *(float *)_Q2.i32))
               + (float)(_S23 * v147);
          float v149 = 8191.0;
          if (v148 <= 8191.0)
          {
            float v149 = (float)((float)((float)(_S21 * _S1) + (float)(_S20 * *(float *)_Q0.i32))
                         + (float)(_S22 * *(float *)_Q2.i32))
                 + (float)(_S23 * v147);
            if (v148 < 0.0) {
              float v149 = 0.0;
            }
          }
          _Q27.i16[0] = *v141;
          _H8 = *(_WORD *)(v61 + 2 * v146.u32[1]);
          _Q27.i16[1] = *v143;
          __asm { FCVT            S11, H8 }
          *(int32x2_t *)_Q27.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q27.i8), v142), 0), v142)));
          _Q27.i16[0] = *(_WORD *)(v61 + 2 * _Q27.u32[0]);
          __asm { FCVT            S14, H27 }
          _Q27.i16[0] = *(_WORD *)(v61 + 2 * _Q27.u32[1]);
          __asm { FCVT            S15, H27 }
          float v154 = (float)((float)((float)(_S21 * _S14) + (float)(_S20 * _S11)) + (float)(_S22 * _S15))
               + (float)(_S23 * fmaxf(_S11, fmaxf(_S14, _S15)));
          _Q27.i32[0] = 1174403072;
          if (v154 <= 8191.0)
          {
            *(float *)_Q27.i32 = v154;
            if (v154 < 0.0) {
              _Q27.i64[0] = 0;
            }
          }
          if (v85)
          {
            v155 = &v139[HIBYTE(v236)];
            _H8 = *(v155 - 4);
            __asm { FCVT            S8, H8 }
            _H9 = *v155;
            __asm { FCVT            S9, H9 }
            __int16 v160 = llroundf(_S8 * 65535.0);
            __int16 v161 = llroundf(_S9 * 65535.0);
          }
          else
          {
            __int16 v160 = 0;
            __int16 v161 = 0;
          }
          _H3 = *(_WORD *)(v54 + 2 * llroundf(v149));
          __asm { FCVT            S3, H3 }
          float v164 = *(float *)_Q0.i32 * _S3;
          float v165 = _S1 * _S3;
          float v166 = *(float *)_Q2.i32 * _S3;
          LOWORD(_S3) = *(_WORD *)(v54 + 2 * llroundf(*(float *)_Q27.i32));
          __asm { FCVT            S3, H3 }
          _S4 = _S11 * _S3;
          _S27 = _S14 * _S3;
          float v170 = _S15 * _S3;
          float v171 = (float)((float)(v229 * v165) + (float)(v164 * v230)) + (float)(v166 * _S5);
          float v172 = (float)((float)(_S7 * v165) + (float)(v164 * _S6)) + (float)(v166 * _S16);
          _S0 = (float)((float)(_S18 * v165) + (float)(v164 * _S17)) + (float)(v166 * _S19);
          _S1 = (float)((float)(v229 * _S27) + (float)(_S4 * v230)) + (float)(v170 * _S5);
          _S2 = (float)((float)(_S7 * _S27) + (float)(_S4 * _S6)) + (float)(v170 * _S16);
          float v176 = (float)((float)(_S18 * _S27) + (float)(_S4 * _S17)) + (float)(v170 * _S19);
          LOWORD(_S4) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S27) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          LOWORD(_S0) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          LOWORD(_S1) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm
          {
            FCVT            S8, H0
            FCVT            S0, H1
          }
          LOWORD(_S1) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S2) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          float v183 = (float)((float)((float)(v232 * _S27) + (float)(v233 * _S4)) + (float)(v231 * _S8)) + v55;
          float v184 = (float)((float)((float)(v232 * _S1) + (float)(v233 * _S0)) + (float)(v231 * _S2)) + v55;
          if (v183 < v55) {
            float v185 = v55;
          }
          else {
            float v185 = (float)((float)((float)(v232 * _S27) + (float)(v233 * _S4)) + (float)(v231 * _S8)) + v55;
          }
          if (v183 <= v57) {
            float v186 = v185;
          }
          else {
            float v186 = v57;
          }
          v87->i16[0] = llroundf(v186) << v79;
          if (v184 < v55) {
            float v187 = v55;
          }
          else {
            float v187 = (float)((float)((float)(v232 * _S1) + (float)(v233 * _S0)) + (float)(v231 * _S2)) + v55;
          }
          if (v184 > v57) {
            float v187 = v57;
          }
          v87->i16[1] = llroundf(v187) << v79;
          float v188 = _S4 + _S0;
          float v189 = _S27 + _S1;
          float v190 = _S8 + _S2;
          float v191 = (float)((float)(v56 + (float)(v188 * v228)) + (float)(v189 * v226)) + (float)(v190 * *(float *)&v81);
          float v192 = (float)v33;
          if (v191 <= v58)
          {
            float v192 = (float)((float)(v56 + (float)(v188 * v228)) + (float)(v189 * v226)) + (float)(v190 * *(float *)&v81);
            if (v191 < v234) {
              float v192 = (float)v32;
            }
          }
          float v193 = (float)((float)(v56 + (float)(v188 * v201)) + (float)(v189 * v200))
               + (float)(v190 * *((float *)&v81 + 1));
          v86->i16[0] = llroundf(v192) << v79;
          float v194 = (float)v33;
          if (v193 <= v58)
          {
            float v194 = v193;
            if (v193 < v234) {
              float v194 = (float)v32;
            }
          }
          v86->i16[1] = llroundf(v194) << v79;
          if (v85)
          {
            v85->i16[0] = v160;
            v85->i16[1] = v161;
            float v85 = (int16x8_t *)((char *)v85 + 4);
          }
          v138 += 2;
          v139 += 8;
          float v87 = (uint16x8_t *)((char *)v87 + 4);
          float v86 = (int16x8_t *)((char *)v86 + 4);
        }
        while (v8 > v138);
      }
      v78 += v198;
      v77 += v199;
      v76 += v197;
      result = (int16x8_t *)((char *)result + v196);
      ++v53;
    }
    while (v53 != v195);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, double _D3)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = *(void **)(result + 56);
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    LOWORD(a3) = *(_WORD *)(v16 + 144);
    float v23 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v16 + 146);
    float v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 148);
    float v25 = (float)LODWORD(a5);
    LOWORD(_D3) = *(_WORD *)(v16 + 150);
    float v26 = (float)LODWORD(_D3);
    LOWORD(_D3) = *(_WORD *)(v16 + 152);
    float v27 = (float)LODWORD(_D3);
    float v133 = *(float *)(v16 + 36);
    float v134 = v26;
    float v28 = *(float *)(v16 + 44);
    float v131 = *(float *)(v16 + 48) * 0.5;
    float v132 = *(float *)(v16 + 40);
    float v129 = *(float *)(v16 + 56) * 0.5;
    float v130 = *(float *)(v16 + 52) * 0.5;
    float v127 = *(float *)(v16 + 64) * 0.5;
    float v128 = *(float *)(v16 + 60) * 0.5;
    float v29 = *(float *)(v16 + 72);
    float v126 = *(float *)(v16 + 68) * 0.5;
    float v30 = *(float *)(v16 + 76);
    float v31 = *(float *)(v16 + 80);
    float v32 = *(float *)(v16 + 84);
    float v33 = *(float *)(v16 + 88);
    float v34 = *(float *)(v16 + 92);
    float v35 = *(float *)(v16 + 96);
    float v36 = *(float *)(v16 + 100);
    float v37 = *(float *)(v16 + 104);
    uint64_t v38 = v16 + 164;
    uint64_t v39 = v16 + 16548;
    uint64_t v40 = v16 + 32932;
    float v42 = *(float *)(v16 + 108);
    float v41 = *(float *)(v16 + 112);
    float v43 = *(float *)(v16 + 116);
    float v44 = *(float *)(v16 + 120);
    uint64_t v45 = *(uint64_t **)(result + 128);
    uint64_t v46 = *(void *)(result + 112);
    unint64_t v47 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v48 = *(void *)(result + 36);
    unsigned int v49 = *(unsigned __int8 *)(v16 + 132);
    if (v49 >= 0x11) {
      char v50 = 0;
    }
    else {
      char v50 = 16 - v49;
    }
    result = *(unsigned __int8 *)(v16 + 157);
    uint64_t v51 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v52 = *(unsigned __int8 *)(v16 + 155);
    uint64_t v53 = *(unsigned __int8 *)(v16 + 154);
    uint64_t v54 = v45[2];
    if (v54) {
      uint64_t v55 = v54 + v47 * v22 + 2 * v46;
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v57 = *v45;
    uint64_t v56 = v45[1];
    uint64_t v58 = v56 + v47 * v21 + 2 * v46;
    if (!v56) {
      uint64_t v58 = 0;
    }
    uint64_t v59 = v57 + v47 * v20 + 2 * v46;
    uint64_t v60 = *v18 + v19 * v14 + 8 * v48;
    float32x2_t v61 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    char v62 = v50;
    do
    {
      if (v13)
      {
        unint64_t v63 = 0;
        float v64 = (_WORD *)v55;
        float v65 = (_WORD *)v59;
        uint64_t v66 = v60;
        do
        {
          float v67 = v24;
          LOWORD(_D3) = *(_WORD *)(v66 + 2 * v53);
          v6.i16[0] = *(_WORD *)(v66 + 2 * v51);
          uint64_t v68 = v66 + 8;
          WORD1(_D3) = *(_WORD *)(v66 + 2 * v52);
          _D3 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D3), v61), 0), v61)));
          _D3.i16[0] = *(_WORD *)(v38 + 2 * _D3.u32[0]);
          __asm { FCVT            S15, H3 }
          _D3.i16[0] = *(_WORD *)(v38 + 2 * _D3.u32[1]);
          __asm { FCVT            S16, H3 }
          v6.i16[1] = *(_WORD *)(v66 + 8 + 2 * v53);
          _D3 = COERCE_DOUBLE(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v6), v61), 0), v61)));
          int32x2_t v76 = vcvt_s32_f32(*(float32x2_t *)&_D3);
          LOWORD(_D3) = *(_WORD *)(v38 + 2 * v76.u32[0]);
          __asm { FCVT            S17, H3 }
          float v78 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v79 = (float)((float)((float)(v41 * _S16) + (float)(v42 * _S15)) + (float)(v43 * _S17)) + (float)(v44 * v78);
          LODWORD(_D3) = 1174403072;
          if (v79 <= 8191.0)
          {
            *(float *)&_D3 = (float)((float)((float)(v41 * _S16) + (float)(v42 * _S15)) + (float)(v43 * _S17))
                           + (float)(v44 * v78);
            if (v79 < 0.0) {
              _D3 = 0.0;
            }
          }
          _D18.i16[0] = *(_WORD *)(v68 + 2 * v52);
          _H19 = *(_WORD *)(v38 + 2 * v76.u32[1]);
          _D18.i16[1] = *(_WORD *)(v68 + 2 * v51);
          __asm { FCVT            S19, H19 }
          _D18 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D18), v61), 0), v61)));
          _D18.i16[0] = *(_WORD *)(v38 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v38 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          float v84 = (float)((float)((float)(v41 * _S20) + (float)(v42 * _S19)) + (float)(v43 * _S22))
              + (float)(v44 * fmaxf(_S19, fmaxf(_S20, _S22)));
          _D18.i32[0] = 1174403072;
          if (v84 <= 8191.0)
          {
            *(float *)_D18.i32 = v84;
            if (v84 < 0.0) {
              _D18 = 0;
            }
          }
          if (v64)
          {
            _H13 = *(_WORD *)(v66 + 2 * result);
            __asm { FCVT            S13, H13 }
            _H1 = *(_WORD *)(v68 + 2 * result);
            __asm { FCVT            S1, H1 }
            __int16 v89 = llroundf(_S13 * 65535.0);
            __int16 v90 = llroundf(_S1 * 65535.0);
          }
          else
          {
            __int16 v89 = 0;
            __int16 v90 = 0;
          }
          float v24 = v67;
          _H1 = *(_WORD *)(v39 + 2 * llroundf(*(float *)&_D3));
          __asm { FCVT            S1, H1 }
          float v93 = _S15 * _S1;
          float v94 = _S16 * _S1;
          float v95 = _S17 * _S1;
          _H16 = *(_WORD *)(v39 + 2 * llroundf(*(float *)_D18.i32));
          __asm { FCVT            S16, H16 }
          _S17 = _S19 * _S16;
          _S18 = _S20 * _S16;
          float v100 = _S22 * _S16;
          float v101 = (float)((float)(v30 * v94) + (float)(v93 * v29)) + (float)(v95 * v31);
          float v102 = (float)((float)(v33 * v94) + (float)(v93 * v32)) + (float)(v95 * v34);
          _S1 = (float)((float)(v36 * v94) + (float)(v93 * v35)) + (float)(v95 * v37);
          _S3 = (float)((float)(v30 * _S18) + (float)(_S17 * v29)) + (float)(v100 * v31);
          _S5 = (float)((float)(v33 * _S18) + (float)(_S17 * v32)) + (float)(v100 * v34);
          _S16 = (float)((float)(v36 * _S18) + (float)(_S17 * v35)) + (float)(v100 * v37);
          LOWORD(_S17) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S18) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          LOWORD(_S1) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S1, H1
            FCVT            S3, H3
          }
          LOWORD(_S5) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S16) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S19, H16 }
          float v113 = (float)((float)((float)(v132 * _S18) + (float)(v133 * _S17)) + (float)(v28 * _S1)) + v23;
          float v114 = (float)((float)((float)(v132 * _S5) + (float)(v133 * _S3)) + (float)(v28 * _S19)) + v23;
          if (v113 < v23) {
            float v115 = v23;
          }
          else {
            float v115 = (float)((float)((float)(v132 * _S18) + (float)(v133 * _S17)) + (float)(v28 * _S1)) + v23;
          }
          if (v113 <= v25) {
            float v116 = v115;
          }
          else {
            float v116 = v25;
          }
          *float v65 = llroundf(v116) << v62;
          if (v114 < v23) {
            float v117 = v23;
          }
          else {
            float v117 = (float)((float)((float)(v132 * _S5) + (float)(v133 * _S3)) + (float)(v28 * _S19)) + v23;
          }
          if (v114 > v25) {
            float v117 = v25;
          }
          v65[1] = llroundf(v117) << v62;
          float v118 = _S17 + _S3;
          float v119 = _S18 + _S5;
          float v120 = _S1 + _S19;
          float v121 = (float)((float)(v67 + (float)(v118 * v131)) + (float)((float)(_S18 + _S5) * v130))
               + (float)((float)(_S1 + _S19) * v129);
          float v122 = v27;
          if (v121 <= v27)
          {
            float v122 = v121;
            if (v121 < v134) {
              float v122 = v134;
            }
          }
          float16x8_t v123 = (_WORD *)(v58 + 2 * v63);
          float v124 = (float)((float)(v67 + (float)(v118 * v128)) + (float)(v119 * v127)) + (float)(v120 * v126);
          *float16x8_t v123 = llroundf(v122) << v62;
          float v125 = v27;
          if (v124 <= v27)
          {
            float v125 = v124;
            if (v124 < v134) {
              float v125 = v134;
            }
          }
          v123[1] = llroundf(v125) << v62;
          if (v64)
          {
            *float v64 = v89;
            v64[1] = v90;
            v64 += 2;
          }
          v66 += 16;
          v63 += 2;
          v65 += 2;
        }
        while (v13 > v63);
      }
      v60 += v19;
      v59 += v20;
      v58 += v21;
      v55 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

int16x8_t *vt_Copy_RGhA_TRC_Mat_TRC_xf422_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 20);
  uint64_t v195 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = *((void *)a1 + 14);
  uint64_t v15 = *((void *)a1 + 19);
  unint64_t v16 = *((void *)a1 + 13) * a2;
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v20 = **((void **)a1 + 8);
  uint64_t v193 = **((void **)a1 + 7);
  uint64_t v21 = v19[1];
  uint64_t v169 = *v19;
  uint64_t v22 = v19[2];
  uint64_t v24 = *v18;
  result = (int16x8_t *)v18[1];
  uint64_t v25 = v18[2];
  int v199 = *(_DWORD *)(v15 + 154);
  unsigned int v26 = *(unsigned __int16 *)(v15 + 144);
  unsigned int v27 = *(unsigned __int8 *)(v15 + 132);
  unsigned int v28 = *(unsigned __int16 *)(v15 + 146);
  unsigned int v29 = *(unsigned __int16 *)(v15 + 148);
  unsigned int v30 = *(unsigned __int16 *)(v15 + 150);
  unsigned int v31 = *(unsigned __int16 *)(v15 + 152);
  _S0 = *(float *)(v15 + 36);
  _S1 = *(float *)(v15 + 40);
  _S2 = *(float *)(v15 + 44);
  v35.i32[0] = *(_DWORD *)(v15 + 48);
  v3.i32[0] = *(_DWORD *)(v15 + 52);
  _Q27.i32[0] = *(_DWORD *)(v15 + 56);
  __int32 v36 = *(_DWORD *)(v15 + 60);
  __int32 v37 = *(_DWORD *)(v15 + 64);
  __int32 v39 = *(_DWORD *)(v15 + 68);
  _S3 = *(float *)(v15 + 72);
  uint64_t v40 = v16 / v9 + v17;
  uint64_t v168 = v20;
  uint64_t v41 = v20 * v11;
  _S4 = *(float *)(v15 + 76);
  _S5 = *(float *)(v15 + 80);
  _S6 = *(float *)(v15 + 84);
  _S7 = *(float *)(v15 + 88);
  _S16 = *(float *)(v15 + 92);
  _S17 = *(float *)(v15 + 96);
  _S18 = *(float *)(v15 + 100);
  _S19 = *(float *)(v15 + 104);
  memset(v198, 0, sizeof(v198));
  do
  {
    unsigned int v50 = 0;
    char v51 = *((unsigned char *)&v199 + v5);
    do
    {
      *((unsigned char *)v198 + 8 * (((_BYTE)v5 + (v50 >> 3)) & 0x1F) + v50) = v51 + 4 * v50;
      ++v50;
    }
    while (v50 != 8);
    ++v5;
  }
  while (v5 != 4);
  if (v12 != v10)
  {
    uint64_t v52 = 0;
    uint64_t v53 = v13 - v11;
    float v54 = (float)v26;
    float v55 = (float)v28;
    float v56 = (float)v29;
    float v197 = (float)v30;
    float v57 = (float)v31;
    uint64_t v58 = v15 + 16548;
    uint64_t v59 = v15 + 164;
    v35.i32[1] = v36;
    v3.i32[1] = v37;
    *(float32x2_t *)v2.f32 = vmul_f32(v35, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, (float32x2_t)0x3F0000003F000000);
    _Q27.i32[1] = v39;
    *(float32x2_t *)_Q27.i8 = vmul_f32(*(float32x2_t *)_Q27.i8, (float32x2_t)0x3F0000003F000000);
    __asm { FCVT            H8, S0 }
    short float v191 = _H8;
    __asm { FCVT            H8, S1 }
    float16x8_t v189 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v2), 0);
    short float v190 = _H8;
    __asm { FCVT            H8, S2 }
    float16x8_t v187 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    short float v188 = _H8;
    int32x4_t v67 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)_Q27), 0);
    __asm { FCVT            H8, S3 }
    short float v185 = _H8;
    float16x8_t v186 = (float16x8_t)v67;
    __asm { FCVT            H8, S4 }
    short float v184 = _H8;
    __asm { FCVT            H8, S5 }
    short float v183 = _H8;
    __asm { FCVT            H8, S6 }
    short float v182 = _H8;
    __asm { FCVT            H8, S7 }
    short float v181 = _H8;
    __asm { FCVT            H8, S16 }
    short float v180 = _H8;
    __asm { FCVT            H8, S17 }
    short float v179 = _H8;
    __asm { FCVT            H8, S18 }
    short float v178 = _H8;
    __asm { FCVT            H8, S19 }
    *(short float *)v67.i16 = (short float)v26;
    float16x8_t v77 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v67.i8, 0);
    *(short float *)v67.i16 = (short float)v28;
    int16x8_t v78 = vdupq_lane_s16(*(int16x4_t *)v67.i8, 0);
    float16x8_t v176 = (float16x8_t)v78;
    short float v177 = _H8;
    *(short float *)v78.i16 = (short float)v29;
    float16x8_t v79 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v78.i8, 0);
    *(short float *)v78.i16 = (short float)v30;
    int16x8_t v80 = vdupq_lane_s16(*(int16x4_t *)v78.i8, 0);
    float16x8_t v174 = (float16x8_t)v80;
    float16x8_t v175 = v79;
    *(short float *)v80.i16 = (short float)v31;
    _Q25 = vdupq_lane_s16(*(int16x4_t *)v80.i8, 0);
    float16x8_t v173 = (float16x8_t)_Q25;
    if (v27 >= 0x11) {
      unsigned __int8 v82 = 0;
    }
    else {
      unsigned __int8 v82 = 16 - v27;
    }
    if (v25) {
      uint64_t v83 = v25 + v22 * v40 + 2 * v14;
    }
    else {
      uint64_t v83 = 0;
    }
    if (result) {
      result = (int16x8_t *)((char *)result + 2 * v14 + v21 * v40);
    }
    else {
      result = 0;
    }
    uint64_t v84 = v24 + v169 * v40 + 2 * v14;
    uint64_t v85 = v193 + v41 + 8 * v195;
    uint16x8_t v86 = (uint16x8_t)vdupq_n_s16(v82);
    float v194 = v3.f32[0];
    float v196 = v2.f32[0];
    float v171 = v3.f32[1];
    float v172 = v2.f32[1];
    uint64_t v192 = _Q27.i64[0];
    float v170 = *(float *)&_Q27.i32[1];
    v87.i64[0] = 0x9000900090009000;
    v87.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v6 < 8)
      {
        unint64_t v131 = 0;
        uint32x4_t v92 = result;
        uint16x8_t v91 = (int16x8_t *)v83;
        __int16 v90 = (uint16x8_t *)v84;
        __int16 v89 = (const __int16 *)v85;
      }
      else
      {
        int v88 = 0;
        __int16 v89 = (const __int16 *)v85;
        __int16 v90 = (uint16x8_t *)v84;
        uint16x8_t v91 = (int16x8_t *)v83;
        uint32x4_t v92 = result;
        do
        {
          int16x8x4_t v200 = vld4q_s16(v89);
          v89 += 32;
          if (v91)
          {
            float32x4_t v93 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
            int16x8_t v94 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)v200.val[3].i8), v93)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v200.val[3], (int8x16_t)v200.val[3], 8uLL)), v93)));
          }
          else
          {
            int16x8_t v94 = 0uLL;
          }
          v95.i64[0] = 0x7000700070007000;
          v95.i64[1] = 0x7000700070007000;
          float16x8_t v96 = vmulq_f16((float16x8_t)v200.val[0], v95);
          float16x8_t v97 = vmulq_f16((float16x8_t)v200.val[1], v95);
          float16x8_t v98 = vmulq_f16((float16x8_t)v200.val[2], v95);
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v96, (float16x8_t)0), v87));
          uint32x4_t v100 = vmovl_high_u16(v99);
          float16x8_t v101 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v99.i8);
          v101.i16[0] = *(_WORD *)(v59 + 2 * v101.u32[0]);
          v101.i16[1] = *(_WORD *)(v59 + 2 * v101.u32[1]);
          v101.i16[2] = *(_WORD *)(v59 + 2 * v101.u32[2]);
          v101.i16[3] = *(_WORD *)(v59 + 2 * v101.u32[3]);
          v101.i16[4] = *(_WORD *)(v59 + 2 * v100.u32[0]);
          v101.i16[5] = *(_WORD *)(v59 + 2 * v100.u32[1]);
          v101.i16[6] = *(_WORD *)(v59 + 2 * v100.u32[2]);
          v101.i16[7] = *(_WORD *)(v59 + 2 * v100.u32[3]);
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v97, (float16x8_t)0), v87));
          uint32x4_t v103 = vmovl_high_u16(v102);
          float16x8_t v104 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v102.i8);
          v104.i16[0] = *(_WORD *)(v59 + 2 * v104.u32[0]);
          v104.i16[1] = *(_WORD *)(v59 + 2 * v104.u32[1]);
          v104.i16[2] = *(_WORD *)(v59 + 2 * v104.u32[2]);
          v104.i16[3] = *(_WORD *)(v59 + 2 * v104.u32[3]);
          v104.i16[4] = *(_WORD *)(v59 + 2 * v103.u32[0]);
          v104.i16[5] = *(_WORD *)(v59 + 2 * v103.u32[1]);
          v104.i16[6] = *(_WORD *)(v59 + 2 * v103.u32[2]);
          v104.i16[7] = *(_WORD *)(v59 + 2 * v103.u32[3]);
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v98, (float16x8_t)0), v87));
          uint32x4_t v106 = vmovl_high_u16(v105);
          float16x8_t v107 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v105.i8);
          v107.i16[0] = *(_WORD *)(v59 + 2 * v107.u32[0]);
          v107.i16[1] = *(_WORD *)(v59 + 2 * v107.u32[1]);
          v107.i16[2] = *(_WORD *)(v59 + 2 * v107.u32[2]);
          v107.i16[3] = *(_WORD *)(v59 + 2 * v107.u32[3]);
          v107.i16[4] = *(_WORD *)(v59 + 2 * v106.u32[0]);
          v107.i16[5] = *(_WORD *)(v59 + 2 * v106.u32[1]);
          v107.i16[6] = *(_WORD *)(v59 + 2 * v106.u32[2]);
          v107.i16[7] = *(_WORD *)(v59 + 2 * v106.u32[3]);
          float16x8_t v108 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v101, v182), v104, v181), v107, v180);
          float16x8_t v109 = vmulq_n_f16(v107, v177);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v101, v185), v104, v184), v107, v183), (float16x8_t)0), v87));
          uint32x4_t v111 = vmovl_high_u16(v110);
          int16x8_t v112 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v110.i8);
          *(void *)&long long v113 = v111.u32[2];
          *((void *)&v113 + 1) = v111.u32[3];
          long long v114 = v113;
          *(void *)&long long v113 = v111.u32[0];
          *((void *)&v113 + 1) = v111.u32[1];
          long long v115 = v113;
          *((void *)&v113 + 1) = v112.u32[3];
          v112.i16[7] = (unint64_t)v112.u32[3] >> 48;
          v112.i16[0] = *(_WORD *)(v58 + 2 * v112.u32[0]);
          v112.i16[1] = *(_WORD *)(v58 + 2 * v112.u32[1]);
          v112.i16[2] = *(_WORD *)(v58 + 2 * v112.u32[2]);
          v112.i16[3] = *(_WORD *)(v58 + 2 * *((void *)&v113 + 1));
          v112.i16[4] = *(_WORD *)(v58 + 2 * v115);
          v112.i16[5] = *(_WORD *)(v58 + 2 * *((void *)&v115 + 1));
          v112.i16[6] = *(_WORD *)(v58 + 2 * v114);
          float16x8_t v116 = (float16x8_t)v112;
          v116.i16[7] = *(_WORD *)(v58 + 2 * *((void *)&v114 + 1));
          float16x8_t v117 = vmlaq_n_f16(v109, v104, v178);
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, (float16x8_t)0), v87));
          uint32x4_t v119 = vmovl_high_u16(v118);
          int16x8_t v120 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v118.i8);
          *(void *)&long long v113 = v119.u32[2];
          *((void *)&v113 + 1) = v119.u32[3];
          long long v121 = v113;
          *(void *)&long long v113 = v119.u32[0];
          *((void *)&v113 + 1) = v119.u32[1];
          long long v122 = v113;
          *((void *)&v113 + 1) = v120.u32[3];
          v120.i16[7] = (unint64_t)v120.u32[3] >> 48;
          v120.i16[0] = *(_WORD *)(v58 + 2 * v120.u32[0]);
          v120.i16[1] = *(_WORD *)(v58 + 2 * v120.u32[1]);
          v120.i16[2] = *(_WORD *)(v58 + 2 * v120.u32[2]);
          v120.i16[3] = *(_WORD *)(v58 + 2 * *((void *)&v113 + 1));
          v120.i16[4] = *(_WORD *)(v58 + 2 * v122);
          v120.i16[5] = *(_WORD *)(v58 + 2 * *((void *)&v122 + 1));
          v120.i16[6] = *(_WORD *)(v58 + 2 * v121);
          float16x8_t v123 = vmlaq_n_f16(v117, v101, v179);
          float16x8_t v124 = (float16x8_t)v120;
          v124.i16[7] = *(_WORD *)(v58 + 2 * *((void *)&v121 + 1));
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v87));
          int16x8_t v126 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v125.i8);
          uint32x4_t v127 = vmovl_high_u16(v125);
          *(void *)&long long v113 = v127.u32[2];
          *((void *)&v113 + 1) = v127.u32[3];
          long long v128 = v113;
          *((void *)&v113 + 1) = v126.u32[3];
          v126.i16[7] = (unint64_t)v126.u32[3] >> 48;
          v126.i16[0] = *(_WORD *)(v58 + 2 * v126.u32[0]);
          v126.i16[1] = *(_WORD *)(v58 + 2 * v126.u32[1]);
          v126.i16[2] = *(_WORD *)(v58 + 2 * v126.u32[2]);
          v126.i16[3] = *(_WORD *)(v58 + 2 * *((void *)&v113 + 1));
          v126.i16[4] = *(_WORD *)(v58 + 2 * v127.u32[0]);
          v126.i16[5] = *(_WORD *)(v58 + 2 * v127.u32[1]);
          v126.i16[6] = *(_WORD *)(v58 + 2 * v128);
          float16x8_t v129 = (float16x8_t)v126;
          v129.i16[7] = *(_WORD *)(v58 + 2 * *((void *)&v128 + 1));
          *v90++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v77, v116, v191), v124, v190), v129, v188), v77), v175)), v86);
          int16x8_t v130 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16(v112, v120), (float16x8_t)vuzp2q_s16((int16x8_t)v116, (int16x8_t)v124));
          _Q27 = vaddq_f16((float16x8_t)vtrn1q_s16(v126, v126), (float16x8_t)vtrn2q_s16((int16x8_t)v129, (int16x8_t)v129));
          float16x8_t v79 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v176, v189, (float16x8_t)vzip1q_s16(v130, v130)), v187, (float16x8_t)vzip2q_s16(v130, v130)), v186, _Q27);
          _Q25 = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(v79, v174), v173)), v86);
          *v92++ = _Q25;
          if (v91) {
            *v91++ = v94;
          }
          v88 += 8;
        }
        while (v88 < (int)v6 - 7);
        unint64_t v131 = v6 & 0xFFFFFFF8;
      }
      if (v6 > v131)
      {
        float v132 = v89 + 4;
        do
        {
          if (v91)
          {
            float v133 = &v132[HIBYTE(v199)];
            _H25 = *v133;
            __asm { FCVT            S25, H25 }
            _H26 = *(v133 - 4);
            __asm { FCVT            S26, H26 }
            __int16 v138 = llroundf(_S26 * 65535.0);
            __int16 v139 = llroundf(_S25 * 65535.0);
          }
          else
          {
            __int16 v138 = 0;
            __int16 v139 = 0;
          }
          v140 = (__int16 *)&v132[v199];
          _Q25.i16[0] = *(v140 - 4);
          v141 = (__int16 *)&v132[BYTE1(v199)];
          _Q25.i16[1] = *(v141 - 4);
          float32x2_t v142 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          *(int32x2_t *)_Q25.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q25.i8), v142), 0), v142)));
          _Q25.i16[0] = *(_WORD *)(v59 + 2 * _Q25.u32[0]);
          v143 = (__int16 *)&v132[BYTE2(v199)];
          _Q27.i16[0] = *(v143 - 4);
          v79.i16[0] = *v141;
          __asm { FCVT            S25, H25 }
          _H30 = *(_WORD *)(v59 + 2 * _Q25.u32[1]);
          _Q27.i16[1] = *v140;
          __asm { FCVT            S30, H30 }
          *(int32x2_t *)_Q27.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q27.i8), v142), 0), v142)));
          _Q27.i16[0] = *(_WORD *)(v59 + 2 * _Q27.u32[0]);
          __asm { FCVT            S27, H27 }
          _H11 = *(_WORD *)(v59 + 2 * _Q27.u32[1]);
          __asm { FCVT            S11, H11 }
          v79.i16[1] = *v143;
          _D26 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)v79.i8), v142), 0), v142)));
          _D26.i16[0] = *(_WORD *)(v59 + 2 * _D26.u32[0]);
          __asm { FCVT            S26, H26 }
          _H28 = *(_WORD *)(v59 + 2 * _D26.u32[1]);
          __asm { FCVT            S28, H28 }
          _S12 = (float)((float)(_S4 * _S30) + (float)(*(float *)_Q25.i32 * _S3)) + (float)(*(float *)_Q27.i32 * _S5);
          float v152 = (float)((float)(_S7 * _S30) + (float)(*(float *)_Q25.i32 * _S6)) + (float)(*(float *)_Q27.i32 * _S16);
          *(float *)_Q25.i32 = (float)((float)(_S18 * _S30) + (float)(*(float *)_Q25.i32 * _S17))
                             + (float)(*(float *)_Q27.i32 * _S19);
          *(float *)_Q27.i32 = (float)((float)(_S4 * *(float *)_D26.i32) + (float)(_S11 * _S3)) + (float)(_S28 * _S5);
          float v153 = (float)((float)(_S7 * *(float *)_D26.i32) + (float)(_S11 * _S6)) + (float)(_S28 * _S16);
          *(float *)_D26.i32 = (float)((float)(_S18 * *(float *)_D26.i32) + (float)(_S11 * _S17)) + (float)(_S28 * _S19);
          LOWORD(_S28) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          LOWORD(_S12) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _Q25.i16[0] = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(*(float *)_Q25.i32, 0.0), 8191.0)));
          _Q27.i16[0] = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(*(float *)_Q27.i32, 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H25
            FCVT            S25, H27
          }
          _Q27.i16[0] = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          LODWORD(v140) = llroundf(fminf(fmaxf(*(float *)_D26.i32, 0.0), 8191.0));
          __asm { FCVT            S26, H27 }
          _Q27.i16[0] = *(_WORD *)(v58 + 2 * v140);
          __asm { FCVT            S27, H27 }
          float v158 = (float)((float)((float)(_S1 * _S12) + (float)(_S0 * _S28)) + (float)(_S2 * _S13)) + v54;
          float v159 = (float)((float)((float)(_S1 * _S26) + (float)(_S0 * *(float *)_Q25.i32))
                       + (float)(_S2 * *(float *)_Q27.i32))
               + v54;
          if (v158 < v54) {
            float v160 = v54;
          }
          else {
            float v160 = (float)((float)((float)(_S1 * _S12) + (float)(_S0 * _S28)) + (float)(_S2 * _S13)) + v54;
          }
          if (v158 > v56) {
            float v160 = v56;
          }
          v90->i16[0] = llroundf(v160) << v82;
          if (v159 < v54) {
            float v161 = v54;
          }
          else {
            float v161 = (float)((float)((float)(_S1 * _S26) + (float)(_S0 * *(float *)_Q25.i32))
          }
                         + (float)(_S2 * *(float *)_Q27.i32))
                 + v54;
          if (v159 > v56) {
            float v161 = v56;
          }
          v90->i16[1] = llroundf(v161) << v82;
          float v162 = _S28 + *(float *)_Q25.i32;
          float v163 = _S12 + _S26;
          float v164 = _S13 + *(float *)_Q27.i32;
          v79.i32[1] = HIDWORD(v192);
          float v165 = (float)((float)(v55 + (float)(v162 * v196)) + (float)(v163 * v194)) + (float)(v164 * *(float *)&v192);
          *(float *)v79.i32 = (float)v31;
          if (v165 <= v57)
          {
            *(float *)v79.i32 = (float)((float)(v55 + (float)(v162 * v196)) + (float)(v163 * v194))
                              + (float)(v164 * *(float *)&v192);
            if (v165 < v197) {
              *(float *)v79.i32 = (float)v30;
            }
          }
          float v166 = (float)((float)(v55 + (float)(v162 * v172)) + (float)(v163 * v171)) + (float)(v164 * v170);
          v92->i16[0] = llroundf(*(float *)v79.i32) << v82;
          float v167 = (float)v31;
          if (v166 <= v57)
          {
            float v167 = v166;
            if (v166 < v197) {
              float v167 = (float)v30;
            }
          }
          v92->i16[1] = llroundf(v167) << v82;
          if (v91)
          {
            v91->i16[0] = v138;
            v91->i16[1] = v139;
            uint16x8_t v91 = (int16x8_t *)((char *)v91 + 4);
          }
          v131 += 2;
          v132 += 8;
          __int16 v90 = (uint16x8_t *)((char *)v90 + 4);
          uint32x4_t v92 = (int16x8_t *)((char *)v92 + 4);
        }
        while (v6 > v131);
      }
      v85 += v168;
      v84 += v169;
      result = (int16x8_t *)((char *)result + v21);
      v83 += v22;
      ++v52;
    }
    while (v52 != v53);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf422_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v10 = *(void *)(result + 28);
  unint64_t v11 = *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    uint64_t v14 = 0;
    unint64_t v15 = *(void *)(result + 20);
    unint64_t v16 = v12 + *(void *)(result + 44);
    unint64_t v17 = v13 - v12;
    uint64_t v18 = *(void *)(result + 152);
    uint64_t v19 = *(uint64_t **)(result + 136);
    uint64_t v20 = *(void **)(result + 56);
    uint64_t v21 = **(void **)(result + 64);
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    uint64_t v24 = v19[2];
    LOWORD(a3) = *(_WORD *)(v18 + 144);
    float v25 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v18 + 146);
    float v26 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v18 + 148);
    float v27 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v18 + 150);
    float v28 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v18 + 152);
    float v29 = (float)LODWORD(a7);
    float v30 = *(float *)(v18 + 36);
    float v31 = *(float *)(v18 + 40);
    float v32 = *(float *)(v18 + 44);
    float v106 = *(float *)(v18 + 52) * 0.5;
    float v107 = *(float *)(v18 + 48) * 0.5;
    float v104 = *(float *)(v18 + 60) * 0.5;
    float v105 = *(float *)(v18 + 56) * 0.5;
    float v33 = *(float *)(v18 + 64) * 0.5;
    float v34 = *(float *)(v18 + 72);
    float v35 = *(float *)(v18 + 68) * 0.5;
    float v36 = *(float *)(v18 + 76);
    float v37 = *(float *)(v18 + 80);
    float v38 = *(float *)(v18 + 84);
    float v39 = *(float *)(v18 + 88);
    float v40 = *(float *)(v18 + 92);
    float v41 = *(float *)(v18 + 96);
    float v42 = *(float *)(v18 + 100);
    float v43 = *(float *)(v18 + 104);
    uint64_t v44 = v18 + 164;
    uint64_t v45 = v18 + 16548;
    uint64_t v46 = *(uint64_t **)(result + 128);
    uint64_t v47 = *(void *)(result + 112);
    unint64_t v48 = *(void *)(result + 104) * a2 / v11 + *(void *)(result + 120);
    uint64_t v49 = *(void *)(result + 36);
    unsigned int v50 = *(unsigned __int8 *)(v18 + 132);
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    else {
      char v51 = 16 - v50;
    }
    uint64_t v52 = *(unsigned __int8 *)(v18 + 157);
    result = *(unsigned __int8 *)(v18 + 156);
    uint64_t v53 = *(unsigned __int8 *)(v18 + 155);
    uint64_t v54 = *(unsigned __int8 *)(v18 + 154);
    uint64_t v55 = v46[2];
    if (v55) {
      uint64_t v56 = v55 + v48 * v24 + 2 * v47;
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v58 = *v46;
    uint64_t v57 = v46[1];
    uint64_t v59 = v57 + v48 * v23 + 2 * v47;
    if (!v57) {
      uint64_t v59 = 0;
    }
    uint64_t v60 = v58 + v48 * v22 + 2 * v47;
    uint64_t v61 = *v20 + v21 * v16 + 8 * v49;
    float32x2_t v62 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    char v63 = v51;
    do
    {
      if (v15)
      {
        unint64_t v64 = 0;
        uint64_t v65 = v61;
        uint64_t v66 = (_WORD *)v56;
        int32x4_t v67 = (_WORD *)v60;
        do
        {
          uint64_t v68 = v65 + 8;
          if (v66)
          {
            _H11 = *(_WORD *)(v68 + 2 * v52);
            __asm { FCVT            S11, H11 }
            _H12 = *(_WORD *)(v65 + 2 * v52);
            __asm { FCVT            S12, H12 }
            __int16 v77 = llroundf(_S12 * 65535.0);
            __int16 v78 = llroundf(_S11 * 65535.0);
          }
          else
          {
            __int16 v77 = 0;
            __int16 v78 = 0;
          }
          _D11.i16[0] = *(_WORD *)(v65 + 2 * v54);
          _D12.i16[0] = *(_WORD *)(v65 + 2 * result);
          _D13.i16[0] = *(_WORD *)(v68 + 2 * v53);
          _D11.i16[1] = *(_WORD *)(v65 + 2 * v53);
          _D11 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D11), v62), 0), v62)));
          _D11.i16[0] = *(_WORD *)(v44 + 2 * _D11.u32[0]);
          _H14 = *(_WORD *)(v44 + 2 * _D11.u32[1]);
          _D12.i16[1] = *(_WORD *)(v68 + 2 * v54);
          __asm { FCVT            S11, H11 }
          _D12 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D12), v62), 0), v62)));
          _D12.i16[0] = *(_WORD *)(v44 + 2 * _D12.u32[0]);
          __asm
          {
            FCVT            S14, H14
            FCVT            S12, H12
          }
          _H15 = *(_WORD *)(v44 + 2 * _D12.u32[1]);
          _D13.i16[1] = *(_WORD *)(v68 + 2 * result);
          __asm { FCVT            S15, H15 }
          _D13 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D13), v62), 0), v62)));
          _D13.i16[0] = *(_WORD *)(v44 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _H16 = *(_WORD *)(v44 + 2 * _D13.u32[1]);
          __asm { FCVT            S16, H16 }
          _S17 = (float)((float)(v36 * _S14) + (float)(*(float *)_D11.i32 * v34)) + (float)(*(float *)_D12.i32 * v37);
          _S18 = (float)((float)(v39 * _S14) + (float)(*(float *)_D11.i32 * v38)) + (float)(*(float *)_D12.i32 * v40);
          *(float *)_D11.i32 = (float)((float)(v42 * _S14) + (float)(*(float *)_D11.i32 * v41))
                             + (float)(*(float *)_D12.i32 * v43);
          *(float *)_D12.i32 = (float)((float)(v36 * *(float *)_D13.i32) + (float)(_S15 * v34)) + (float)(_S16 * v37);
          float v87 = (float)((float)(v39 * *(float *)_D13.i32) + (float)(_S15 * v38)) + (float)(_S16 * v40);
          float v88 = (float)((float)(v42 * *(float *)_D13.i32) + (float)(_S15 * v41)) + (float)(_S16 * v43);
          LOWORD(_S17) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S18) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _D11.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          _D12.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)_D12.i32, 0.0), 8191.0)));
          __asm
          {
            FCVT            S13, H11
            FCVT            S11, H12
          }
          _D12.i16[0] = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          unsigned int v91 = llroundf(fminf(fmaxf(v88, 0.0), 8191.0));
          __asm { FCVT            S16, H12 }
          _D12.i16[0] = *(_WORD *)(v45 + 2 * v91);
          __asm { FCVT            S14, H12 }
          *(float *)_D12.i32 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S17))
                                     + (float)(v32 * *(float *)_D13.i32))
                             + v25;
          float v94 = (float)((float)((float)(v31 * _S16) + (float)(v30 * *(float *)_D11.i32)) + (float)(v32 * _S14)) + v25;
          if (*(float *)_D12.i32 < v25) {
            float v95 = v25;
          }
          else {
            float v95 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S17)) + (float)(v32 * *(float *)_D13.i32)) + v25;
          }
          if (*(float *)_D12.i32 > v27) {
            float v95 = v27;
          }
          *int32x4_t v67 = llroundf(v95) << v63;
          if (v94 < v25) {
            float v96 = v25;
          }
          else {
            float v96 = (float)((float)((float)(v31 * _S16) + (float)(v30 * *(float *)_D11.i32)) + (float)(v32 * _S14)) + v25;
          }
          if (v94 > v27) {
            float v96 = v27;
          }
          v67[1] = llroundf(v96) << v63;
          float v97 = _S17 + *(float *)_D11.i32;
          float v98 = *(float *)_D13.i32 + _S14;
          float v99 = (float)((float)(v26 + (float)(v97 * v107)) + (float)((float)(_S18 + _S16) * v106)) + (float)(v98 * v105);
          float v100 = v29;
          if (v99 <= v29)
          {
            float v100 = (float)((float)(v26 + (float)(v97 * v107)) + (float)((float)(_S18 + _S16) * v106))
                 + (float)(v98 * v105);
            if (v99 < v28) {
              float v100 = v28;
            }
          }
          float16x8_t v101 = (_WORD *)(v59 + 2 * v64);
          float v102 = (float)((float)(v26 + (float)(v97 * v104)) + (float)((float)(_S18 + _S16) * v33)) + (float)(v98 * v35);
          *float16x8_t v101 = llroundf(v100) << v63;
          float v103 = v29;
          if (v102 <= v29)
          {
            float v103 = v102;
            if (v102 < v28) {
              float v103 = v28;
            }
          }
          v101[1] = llroundf(v103) << v63;
          if (v66)
          {
            *uint64_t v66 = v77;
            v66[1] = v78;
            v66 += 2;
          }
          v65 += 16;
          v64 += 2;
          v67 += 2;
        }
        while (v15 > v64);
      }
      v61 += v21;
      v60 += v22;
      v59 += v23;
      v56 += v24;
      ++v14;
    }
    while (v14 != v17);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_xf422_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGhA_rgb_xf422_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 20);
  uint64_t v126 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = *((void *)a1 + 14);
  unint64_t v15 = *((void *)a1 + 13) * a2;
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v18 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v20 = **((void **)a1 + 8);
  uint64_t v125 = **((void **)a1 + 7);
  uint64_t v21 = *v19;
  uint64_t v22 = v19[1];
  uint64_t v23 = v19[2];
  uint64_t v124 = *v18;
  uint64_t v25 = v18[1];
  uint64_t v24 = v18[2];
  unsigned int v26 = *(_DWORD *)(v16 + 136);
  int v131 = *(_DWORD *)(v16 + 154);
  unsigned int v27 = *(unsigned __int16 *)(v16 + 144);
  unsigned int v28 = *(unsigned __int8 *)(v16 + 132);
  unsigned int v29 = *(unsigned __int16 *)(v16 + 146);
  unsigned int v30 = *(unsigned __int16 *)(v16 + 148);
  unsigned int v31 = *(unsigned __int16 *)(v16 + 150);
  unsigned int v32 = *(unsigned __int16 *)(v16 + 152);
  uint64_t v33 = v15 / v9 + v17;
  uint64_t v123 = v20 * v11;
  _S0 = *(float *)(v16 + 36);
  _S1 = *(float *)(v16 + 40);
  _S2 = *(float *)(v16 + 44);
  v37.i32[0] = *(_DWORD *)(v16 + 48);
  v2.i32[0] = *(_DWORD *)(v16 + 52);
  v3.i32[0] = *(_DWORD *)(v16 + 56);
  __int32 v39 = *(_DWORD *)(v16 + 60);
  __int32 v38 = *(_DWORD *)(v16 + 64);
  __int32 v40 = *(_DWORD *)(v16 + 68);
  memset(v130, 0, sizeof(v130));
  do
  {
    unsigned int v41 = 0;
    uint64_t result = *((unsigned __int8 *)&v131 + v5);
    do
    {
      *((unsigned char *)v130 + 8 * (((_BYTE)v5 + (v41 >> 3)) & 0x1F) + v41) = result + 4 * v41;
      ++v41;
    }
    while (v41 != 8);
    ++v5;
  }
  while (v5 != 4);
  if (v12 != v10)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v13 - v11;
    _S3 = (float)v26;
    float v46 = (float)v27;
    float v47 = (float)v29;
    float v48 = (float)v30;
    float v49 = (float)v31;
    float v50 = (float)v32;
    v37.i32[1] = v39;
    *(float32x2_t *)v4.f32 = vmul_f32(v37, (float32x2_t)0x3F0000003F000000);
    v2.i32[1] = v38;
    v3.i32[1] = v40;
    *(float32x2_t *)v2.f32 = vmul_f32(*(float32x2_t *)v2.f32, (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, (float32x2_t)0x3F0000003F000000);
    __asm { FCVT            H8, S0 }
    short float v129 = _H8;
    __asm { FCVT            H8, S1 }
    float16x8_t v127 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    short float v128 = _H8;
    __asm { FCVT            H8, S2 }
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v2), 0);
    int16x4_t v59 = (int16x4_t)vcvt_f16_f32(v3);
    float16x8_t v60 = (float16x8_t)vdupq_lane_s32((int32x2_t)v59, 0);
    *(short float *)v59.i16 = (short float)v27;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(v59, 0);
    *(short float *)v59.i16 = (short float)v29;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(v59, 0);
    *(short float *)v59.i16 = (short float)v30;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(v59, 0);
    *(short float *)v59.i16 = (short float)v31;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(v59, 0);
    *(short float *)v59.i16 = (short float)v32;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(v59, 0);
    if (v28 >= 0x11) {
      unsigned __int8 v66 = 0;
    }
    else {
      unsigned __int8 v66 = 16 - v28;
    }
    if (v24) {
      uint64_t v67 = v24 + v23 * v33 + 2 * v14;
    }
    else {
      uint64_t v67 = 0;
    }
    if (v25) {
      uint64_t v68 = v25 + v22 * v33 + 2 * v14;
    }
    else {
      uint64_t v68 = 0;
    }
    uint64_t v69 = v124 + v21 * v33 + 2 * v14;
    uint64_t result = v125 + v123 + 8 * v126;
    __asm { FCVT            H11, S3 }
    uint16x8_t v71 = (uint16x8_t)vdupq_n_s16(v66);
    uint64_t v72 = v2.i64[0];
    uint64_t v73 = v3.i64[0];
    do
    {
      if ((int)v6 < 8)
      {
        unint64_t v85 = 0;
        __int16 v78 = (uint16x8_t *)v68;
        __int16 v77 = (int16x8_t *)v67;
        int32x2_t v76 = (uint16x8_t *)v69;
        unsigned __int8 v75 = (const __int16 *)result;
      }
      else
      {
        int v74 = 0;
        unsigned __int8 v75 = (const __int16 *)result;
        int32x2_t v76 = (uint16x8_t *)v69;
        __int16 v77 = (int16x8_t *)v67;
        __int16 v78 = (uint16x8_t *)v68;
        do
        {
          int16x8x4_t v132 = vld4q_s16(v75);
          v75 += 32;
          if (v77)
          {
            float32x4_t v79 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
            int16x8_t v80 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)v132.val[3].i8), v79)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v132.val[3], (int8x16_t)v132.val[3], 8uLL)), v79)));
          }
          else
          {
            int16x8_t v80 = 0uLL;
          }
          float16x8_t v81 = vmulq_n_f16((float16x8_t)v132.val[0], _H11);
          float16x8_t v82 = vmulq_n_f16((float16x8_t)v132.val[1], _H11);
          float16x8_t v83 = vmulq_n_f16((float16x8_t)v132.val[2], _H11);
          *v76++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v61, v81, v129), v82, v128), v83, _H8), v61), v63)), v71);
          int16x8_t v84 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v81, (int16x8_t)v82), (float16x8_t)vuzp2q_s16((int16x8_t)v81, (int16x8_t)v82));
          *v78++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v62, v127, (float16x8_t)vzip1q_s16(v84, v84)), v58, (float16x8_t)vzip2q_s16(v84, v84)), v60, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v83, (int16x8_t)v83), (float16x8_t)vtrn2q_s16((int16x8_t)v83, (int16x8_t)v83))), v64), v65)), v71);
          if (v77) {
            *v77++ = v80;
          }
          v74 += 8;
        }
        while (v74 < (int)v6 - 7);
        unint64_t v85 = v6 & 0xFFFFFFF8;
      }
      if (v6 > v85)
      {
        uint16x8_t v86 = v75 + 4;
        do
        {
          if (v77)
          {
            float v87 = &v86[HIBYTE(v131)];
            _H17 = *v87;
            __asm { FCVT            S17, H17 }
            _H18 = *(v87 - 4);
            __asm { FCVT            S18, H18 }
            __int16 v92 = llroundf(_S18 * 65535.0);
            __int16 v93 = llroundf(_S17 * 65535.0);
          }
          else
          {
            __int16 v92 = 0;
            __int16 v93 = 0;
          }
          float v94 = &v86[v131];
          _H17 = *(v94 - 4);
          __asm { FCVT            S17, H17 }
          float v97 = _S3 * _S17;
          float v98 = &v86[BYTE1(v131)];
          LOWORD(_S17) = *(v98 - 4);
          __asm { FCVT            S17, H17 }
          float v100 = _S3 * _S17;
          float16x8_t v101 = &v86[BYTE2(v131)];
          LOWORD(_S17) = *(v101 - 4);
          __asm { FCVT            S17, H17 }
          float v103 = _S3 * _S17;
          float v104 = (float)((float)((float)(_S1 * v100) + (float)(_S0 * v97)) + (float)(_S2 * (float)(_S3 * _S17))) + v46;
          float v105 = v48;
          if (v104 <= v48)
          {
            float v105 = v104;
            if (v104 < v46) {
              float v105 = v46;
            }
          }
          _H17 = *v94;
          __asm { FCVT            S17, H17 }
          float v108 = _S3 * _S17;
          LOWORD(_S17) = *v98;
          __asm { FCVT            S17, H17 }
          float v110 = _S3 * _S17;
          _H18 = *v101;
          __asm { FCVT            S18, H18 }
          float v113 = _S3 * _S18;
          float v114 = (float)((float)((float)(_S1 * v110) + (float)(_S0 * v108)) + (float)(_S2 * v113)) + v46;
          v76->i16[0] = llroundf(v105) << v66;
          float v115 = v48;
          if (v114 <= v48)
          {
            float v115 = (float)((float)((float)(_S1 * v110) + (float)(_S0 * v108)) + (float)(_S2 * v113)) + v46;
            if (v114 < v46) {
              float v115 = v46;
            }
          }
          v76->i16[1] = llroundf(v115) << v66;
          float v116 = v97 + v108;
          float v117 = v100 + v110;
          float v118 = v103 + v113;
          float v119 = (float)((float)(v47 + (float)((float)(v97 + v108) * v4.f32[0])) + (float)(v117 * *(float *)&v72))
               + (float)(v118 * *(float *)&v73);
          float v120 = v50;
          if (v119 <= v50)
          {
            float v120 = v119;
            if (v119 < v49) {
              float v120 = v49;
            }
          }
          float v121 = (float)((float)(v47 + (float)(v116 * v4.f32[1])) + (float)(v117 * *((float *)&v72 + 1)))
               + (float)(v118 * *((float *)&v73 + 1));
          v78->i16[0] = llroundf(v120) << v66;
          float v122 = v50;
          if (v121 <= v50)
          {
            float v122 = v121;
            if (v121 < v49) {
              float v122 = v49;
            }
          }
          v78->i16[1] = llroundf(v122) << v66;
          if (v77)
          {
            v77->i16[0] = v92;
            v77->i16[1] = v93;
            __int16 v77 = (int16x8_t *)((char *)v77 + 4);
          }
          v85 += 2;
          v86 += 8;
          int32x2_t v76 = (uint16x8_t *)((char *)v76 + 4);
          __int16 v78 = (uint16x8_t *)((char *)v78 + 4);
        }
        while (v6 > v85);
      }
      result += v20;
      v69 += v21;
      v68 += v22;
      v67 += v23;
      ++v43;
    }
    while (v43 != v44);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_xf422_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_xf422_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = *(void **)(result + 56);
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    float v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    float v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v28 = (float)LODWORD(a8);
    float v29 = *(float *)(v16 + 36);
    float v30 = *(float *)(v16 + 40);
    float v31 = *(float *)(v16 + 44);
    float v32 = *(float *)(v16 + 48) * 0.5;
    float v33 = *(float *)(v16 + 52) * 0.5;
    float v34 = *(float *)(v16 + 56) * 0.5;
    float v35 = *(float *)(v16 + 60) * 0.5;
    float v36 = *(float *)(v16 + 64) * 0.5;
    float v37 = *(float *)(v16 + 68) * 0.5;
    uint64_t v38 = *(void **)(result + 128);
    uint64_t v39 = *(void *)(result + 112);
    unint64_t v40 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v41 = *(void *)(result + 36);
    unsigned int v42 = *(unsigned __int8 *)(v16 + 132);
    if (v42 >= 0x11) {
      char v43 = 0;
    }
    else {
      char v43 = 16 - v42;
    }
    uint64_t v44 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v45 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v46 = *(unsigned __int8 *)(v16 + 155);
    uint64_t result = *(unsigned __int8 *)(v16 + 154);
    uint64_t v47 = v38[2];
    if (v47) {
      uint64_t v48 = v47 + v40 * v22 + 2 * v39;
    }
    else {
      uint64_t v48 = 0;
    }
    char v51 = v38;
    uint64_t v50 = *v38;
    uint64_t v49 = v51[1];
    _ZF = v49 == 0;
    uint64_t v53 = v49 + v40 * v21 + 2 * v39;
    if (_ZF) {
      uint64_t v53 = 0;
    }
    uint64_t v54 = v50 + v40 * v20 + 2 * v39;
    uint64_t v55 = *v18 + v19 * v14 + 8 * v41;
    char v56 = v43;
    do
    {
      if (v13)
      {
        unint64_t v57 = 0;
        uint64_t v58 = v55;
        int16x4_t v59 = (_WORD *)v48;
        float16x8_t v60 = (_WORD *)v54;
        do
        {
          uint64_t v61 = v58 + 8;
          if (v59)
          {
            _H24 = *(_WORD *)(v61 + 2 * v44);
            __asm { FCVT            S24, H24 }
            _H25 = *(_WORD *)(v58 + 2 * v44);
            __asm { FCVT            S25, H25 }
            __int16 v69 = llroundf(_S25 * 65535.0);
            __int16 v70 = llroundf(_S24 * 65535.0);
          }
          else
          {
            __int16 v69 = 0;
            __int16 v70 = 0;
          }
          _H24 = *(_WORD *)(v58 + 2 * result);
          __asm { FCVT            S24, H24 }
          float v73 = v23 * _S24;
          _H25 = *(_WORD *)(v58 + 2 * v46);
          __asm { FCVT            S25, H25 }
          float v76 = v23 * _S25;
          _H26 = *(_WORD *)(v58 + 2 * v45);
          __asm { FCVT            S26, H26 }
          float v79 = v23 * _S26;
          float v80 = (float)((float)((float)(v30 * v76) + (float)(v29 * v73)) + (float)(v31 * v79)) + v24;
          float v81 = v26;
          if (v80 <= v26)
          {
            float v81 = (float)((float)((float)(v30 * v76) + (float)(v29 * v73)) + (float)(v31 * v79)) + v24;
            if (v80 < v24) {
              float v81 = v24;
            }
          }
          _H27 = *(_WORD *)(v61 + 2 * result);
          __asm { FCVT            S27, H27 }
          float v84 = v23 * _S27;
          _H28 = *(_WORD *)(v61 + 2 * v46);
          __asm { FCVT            S28, H28 }
          float v87 = v23 * _S28;
          _H29 = *(_WORD *)(v61 + 2 * v45);
          __asm { FCVT            S29, H29 }
          float v90 = v23 * _S29;
          float v91 = (float)((float)((float)(v30 * v87) + (float)(v29 * v84)) + (float)(v31 * v90)) + v24;
          *float16x8_t v60 = llroundf(v81) << v56;
          float v92 = v26;
          if (v91 <= v26)
          {
            float v92 = (float)((float)((float)(v30 * v87) + (float)(v29 * v84)) + (float)(v31 * v90)) + v24;
            if (v91 < v24) {
              float v92 = v24;
            }
          }
          v60[1] = llroundf(v92) << v56;
          float v93 = v73 + v84;
          float v94 = v76 + v87;
          float v95 = v79 + v90;
          float v96 = (float)((float)(v25 + (float)(v93 * v32)) + (float)(v94 * v33)) + (float)(v95 * v34);
          float v97 = v28;
          if (v96 <= v28)
          {
            float v97 = (float)((float)(v25 + (float)(v93 * v32)) + (float)(v94 * v33)) + (float)(v95 * v34);
            if (v96 < v27) {
              float v97 = v27;
            }
          }
          float v98 = (_WORD *)(v53 + 2 * v57);
          float v99 = (float)((float)(v25 + (float)(v93 * v35)) + (float)(v94 * v36)) + (float)(v95 * v37);
          *float v98 = llroundf(v97) << v56;
          float v100 = v28;
          if (v99 <= v28)
          {
            float v100 = v99;
            if (v99 < v27) {
              float v100 = v27;
            }
          }
          v98[1] = llroundf(v100) << v56;
          if (v59)
          {
            *int16x4_t v59 = v69;
            v59[1] = v70;
            v59 += 2;
          }
          v58 += 16;
          v57 += 2;
          v60 += 2;
        }
        while (v13 > v57);
      }
      v55 += v19;
      v54 += v20;
      v53 += v21;
      v48 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Tone_Mat_TRC_v216_GCD(unsigned __int8 *result, uint64_t a2, float a3, double _D1)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = *((void *)result + 14);
  int64x2_t v10 = (void *)*((void *)result + 16);
  unint64_t v11 = *((void *)result + 13) * a2 / v7 + *((void *)result + 15);
  int64x2_t v12 = (uint64_t *)*((void *)result + 17);
  unint64_t v13 = (v6 + v6 * a2) / v7;
  unint64_t v14 = (_WORD *)v10[1];
  if (v14) {
    unint64_t v14 = (_WORD *)((char *)v14 + 2 * v9 + v12[1] * v11);
  }
  if (v13 != v8)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(result + 44);
    uint64_t v17 = v8 + v16;
    uint64_t v18 = **((void **)result + 8);
    uint64_t v19 = *v12;
    uint64_t v20 = *((void *)result + 19);
    uint64_t v21 = *v10 + v19 * v11;
    unint64_t v22 = *(void *)(result + 20);
    uint64_t v23 = v13 + v16;
    uint64_t v24 = **((void **)result + 7) + v18 * v17 + 8 * *(void *)(result + 36);
    uint64_t v25 = (_WORD *)(v21 + 2 * v9);
    uint64_t v26 = v23 - v17;
    LOWORD(a3) = *(_WORD *)(v20 + 144);
    float v27 = (float)LODWORD(a3);
    LOWORD(_D1) = *(_WORD *)(v20 + 146);
    float v28 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v20 + 148);
    float v29 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v20 + 150);
    float v30 = (float)LODWORD(_D1);
    LOWORD(_D1) = *(_WORD *)(v20 + 152);
    float v31 = (float)LODWORD(_D1);
    float v33 = *(float *)(v20 + 36);
    float v32 = *(float *)(v20 + 40);
    float v34 = *(float *)(v20 + 44);
    float v131 = *(float *)(v20 + 48) * 0.5;
    float v132 = v28;
    float v129 = *(float *)(v20 + 56) * 0.5;
    float v130 = *(float *)(v20 + 52) * 0.5;
    float v127 = *(float *)(v20 + 64) * 0.5;
    float v128 = *(float *)(v20 + 60) * 0.5;
    float v125 = *(float *)(v20 + 68) * 0.5;
    float v126 = *(float *)(v20 + 72);
    float v35 = *(float *)(v20 + 80);
    float v124 = *(float *)(v20 + 76);
    float v36 = *(float *)(v20 + 84);
    float v37 = *(float *)(v20 + 88);
    float v38 = *(float *)(v20 + 92);
    float v39 = *(float *)(v20 + 96);
    float v40 = *(float *)(v20 + 100);
    float v41 = *(float *)(v20 + 104);
    uint64_t v42 = v20 + 164;
    uint64_t v43 = v20 + 16548;
    uint64_t result = (unsigned __int8 *)(v20 + 32932);
    float v45 = *(float *)(v20 + 108);
    float v44 = *(float *)(v20 + 112);
    float v46 = *(float *)(v20 + 116);
    float v47 = *(float *)(v20 + 120);
    uint64_t v48 = *(unsigned __int8 *)(v20 + 157);
    uint64_t v49 = *(unsigned __int8 *)(v20 + 156);
    uint64_t v50 = *(unsigned __int8 *)(v20 + 155);
    float32x2_t v51 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v52 = *(unsigned __int8 *)(v20 + 154);
    do
    {
      if (v22)
      {
        unint64_t v53 = 0;
        uint64_t v54 = v14;
        uint64_t v55 = v25;
        uint64_t v56 = v24;
        do
        {
          float v57 = v34;
          float v58 = v32;
          float v59 = v33;
          LOWORD(_D1) = *(_WORD *)(v56 + 2 * v52);
          v4.i16[0] = *(_WORD *)(v56 + 2 * v49);
          uint64_t v60 = v56 + 8;
          WORD1(_D1) = *(_WORD *)(v56 + 2 * v50);
          _D1 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D1), v51), 0), v51)));
          _D1.i16[0] = *(_WORD *)(v42 + 2 * _D1.u32[0]);
          __asm { FCVT            S15, H1 }
          _D1.i16[0] = *(_WORD *)(v42 + 2 * _D1.u32[1]);
          __asm { FCVT            S16, H1 }
          v4.i16[1] = *(_WORD *)(v56 + 8 + 2 * v52);
          _D1 = COERCE_DOUBLE(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(v4), v51), 0), v51)));
          int32x2_t v68 = vcvt_s32_f32(*(float32x2_t *)&_D1);
          LOWORD(_D1) = *(_WORD *)(v42 + 2 * v68.u32[0]);
          __asm { FCVT            S17, H1 }
          float v70 = fmaxf(_S15, fmaxf(_S16, _S17));
          float v71 = (float)((float)((float)(v44 * _S16) + (float)(v45 * _S15)) + (float)(v46 * _S17)) + (float)(v47 * v70);
          LODWORD(_D1) = 1174403072;
          if (v71 <= 8191.0)
          {
            *(float *)&_D1 = (float)((float)((float)(v44 * _S16) + (float)(v45 * _S15)) + (float)(v46 * _S17))
                           + (float)(v47 * v70);
            if (v71 < 0.0) {
              _D1 = 0.0;
            }
          }
          _D18.i16[0] = *(_WORD *)(v60 + 2 * v50);
          _H19 = *(_WORD *)(v42 + 2 * v68.u32[1]);
          _D18.i16[1] = *(_WORD *)(v60 + 2 * v49);
          __asm { FCVT            S19, H19 }
          _D18 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D18), v51), 0), v51)));
          _D18.i16[0] = *(_WORD *)(v42 + 2 * _D18.u32[0]);
          __asm { FCVT            S20, H18 }
          _D18.i16[0] = *(_WORD *)(v42 + 2 * _D18.u32[1]);
          __asm { FCVT            S22, H18 }
          float v76 = (float)((float)((float)(v44 * _S20) + (float)(v45 * _S19)) + (float)(v46 * _S22))
              + (float)(v47 * fmaxf(_S19, fmaxf(_S20, _S22)));
          _D18.i32[0] = 1174403072;
          if (v76 <= 8191.0)
          {
            *(float *)_D18.i32 = v76;
            if (v76 < 0.0) {
              _D18 = 0;
            }
          }
          if (v54)
          {
            _H13 = *(_WORD *)(v56 + 2 * v48);
            __asm { FCVT            S13, H13 }
            _H5 = *(_WORD *)(v60 + 2 * v48);
            __asm { FCVT            S5, H5 }
            __int16 v81 = llroundf(_S13 * 65535.0);
            __int16 v82 = llroundf(_S5 * 65535.0);
          }
          else
          {
            __int16 v81 = 0;
            __int16 v82 = 0;
          }
          float v33 = v59;
          float v32 = v58;
          float v34 = v57;
          _H1 = *(_WORD *)(v43 + 2 * llroundf(*(float *)&_D1));
          __asm { FCVT            S1, H1 }
          float v85 = _S15 * _S1;
          float v86 = _S16 * _S1;
          float v87 = _S17 * _S1;
          _H16 = *(_WORD *)(v43 + 2 * llroundf(*(float *)_D18.i32));
          __asm { FCVT            S16, H16 }
          float v90 = _S19 * _S16;
          _S18 = _S20 * _S16;
          _S16 = _S22 * _S16;
          float v93 = (float)((float)(v124 * v86) + (float)(v85 * v126)) + (float)(v87 * v35);
          float v94 = (float)((float)(v37 * v86) + (float)(v85 * v36)) + (float)(v87 * v38);
          float v95 = (float)((float)(v40 * v86) + (float)(v85 * v39)) + (float)(v87 * v41);
          float v96 = (float)(v124 * _S18) + (float)(v90 * v126);
          float v97 = (float)(v37 * _S18) + (float)(v90 * v36);
          float v98 = (float)(v40 * _S18) + (float)(v90 * v39);
          _S5 = v96 + (float)(_S16 * v35);
          float v100 = v97 + (float)(_S16 * v38);
          LOWORD(_S18) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0))];
          float v101 = v98 + (float)(_S16 * v41);
          __asm { FCVT            S18, H18 }
          LOWORD(_S16) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0))];
          unsigned int v103 = llroundf(fminf(fmaxf(v95, 0.0), 8191.0));
          __asm { FCVT            S1, H16 }
          LOWORD(_S16) = *(_WORD *)&result[2 * v103];
          __asm { FCVT            S20, H16 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
          __asm { FCVT            S16, H5 }
          LOWORD(_S5) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0))];
          __asm { FCVT            S17, H5 }
          float v108 = (float)(v32 * _S1) + (float)(v33 * _S18);
          _S6 = _S18 + _S16;
          float v110 = _S1 + _S17;
          float v111 = (float)(v132 + (float)((float)(_S18 + _S16) * v131)) + (float)(v110 * v130);
          float v112 = (float)(v132 + (float)(_S6 * v128)) + (float)(v110 * v127);
          LOWORD(_S6) = *(_WORD *)&result[2 * llroundf(fminf(fmaxf(v101, 0.0), 8191.0))];
          __asm { FCVT            S19, H6 }
          float v114 = v108 + (float)(v57 * _S20);
          float v115 = v111 + (float)((float)(_S20 + _S19) * v129);
          float v116 = v112 + (float)((float)(_S20 + _S19) * v125);
          if (v115 < v27) {
            float v117 = v27;
          }
          else {
            float v117 = v115;
          }
          float v118 = v114 + v27;
          if (v115 > v29) {
            float v117 = v29;
          }
          __int16 v119 = llroundf(v117);
          if (v118 < v30) {
            float v120 = v30;
          }
          else {
            float v120 = v118;
          }
          *uint64_t v55 = v119;
          if (v118 > v31) {
            float v120 = v31;
          }
          v55[1] = llroundf(v120);
          float v121 = v29;
          if (v116 <= v29)
          {
            float v121 = v116;
            if (v116 < v27) {
              float v121 = v27;
            }
          }
          float v122 = (float)((float)((float)(v32 * _S17) + (float)(v33 * _S16)) + (float)(v57 * _S19)) + v27;
          v55[2] = llroundf(v121);
          float v123 = v31;
          if (v122 <= v31)
          {
            float v123 = v122;
            if (v122 < v30) {
              float v123 = v30;
            }
          }
          v55[3] = llroundf(v123);
          if (v54)
          {
            *uint64_t v54 = v81;
            v54[1] = v82;
            v54 += 2;
          }
          v56 += 16;
          v53 += 2;
          v55 += 4;
        }
        while (v22 > v53);
      }
      v24 += v18;
      uint64_t v25 = (_WORD *)((char *)v25 + v19);
      ++v15;
    }
    while (v15 != v26);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_v216_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_v216_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, float a7)
{
  uint64_t v10 = *(void *)(result + 28);
  unint64_t v11 = *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = *(void *)(result + 112);
  unint64_t v14 = *(void **)(result + 128);
  unint64_t v15 = *(void *)(result + 104) * a2 / v11 + *(void *)(result + 120);
  uint64_t v16 = *(uint64_t **)(result + 136);
  unint64_t v17 = (v10 + v10 * a2) / v11;
  uint64_t v18 = (_WORD *)v14[1];
  if (v18) {
    uint64_t v18 = (_WORD *)((char *)v18 + 2 * v13 + v16[1] * v15);
  }
  if (v17 != v12)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(void *)(result + 44);
    uint64_t v21 = v12 + v20;
    uint64_t v22 = **(void **)(result + 64);
    uint64_t v23 = *v16;
    uint64_t v24 = *(void *)(result + 152);
    uint64_t v25 = *v14 + v23 * v15;
    unint64_t v26 = *(void *)(result + 20);
    uint64_t v27 = v17 + v20;
    uint64_t v28 = **(void **)(result + 56) + v22 * v21 + 8 * *(void *)(result + 36);
    float v29 = (_WORD *)(v25 + 2 * v13);
    uint64_t v30 = v27 - v21;
    LOWORD(a3) = *(_WORD *)(v24 + 144);
    float v31 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v24 + 146);
    float v32 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v24 + 148);
    float v33 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v24 + 150);
    float v34 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v24 + 152);
    float v35 = (float)LODWORD(a7);
    float v36 = *(float *)(v24 + 36);
    float v37 = *(float *)(v24 + 40);
    float v38 = *(float *)(v24 + 44);
    float v100 = *(float *)(v24 + 52) * 0.5;
    float v101 = *(float *)(v24 + 48) * 0.5;
    float v99 = *(float *)(v24 + 56) * 0.5;
    float v39 = *(float *)(v24 + 60) * 0.5;
    float v40 = *(float *)(v24 + 64) * 0.5;
    float v41 = *(float *)(v24 + 72);
    float v42 = *(float *)(v24 + 68) * 0.5;
    float v43 = *(float *)(v24 + 76);
    float v44 = *(float *)(v24 + 80);
    float v45 = *(float *)(v24 + 84);
    float v46 = *(float *)(v24 + 88);
    float v47 = *(float *)(v24 + 92);
    float v48 = *(float *)(v24 + 96);
    float v49 = *(float *)(v24 + 100);
    float v50 = *(float *)(v24 + 104);
    uint64_t v51 = v24 + 164;
    uint64_t v52 = v24 + 16548;
    uint64_t result = *(unsigned __int8 *)(v24 + 157);
    uint64_t v53 = *(unsigned __int8 *)(v24 + 156);
    uint64_t v54 = *(unsigned __int8 *)(v24 + 155);
    float32x2_t v55 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    uint64_t v56 = *(unsigned __int8 *)(v24 + 154);
    do
    {
      if (v26)
      {
        unint64_t v57 = 0;
        uint64_t v58 = v28;
        float v59 = v18;
        uint64_t v60 = v29;
        do
        {
          uint64_t v61 = v58 + 8;
          if (v59)
          {
            _H11 = *(_WORD *)(v61 + 2 * result);
            __asm { FCVT            S11, H11 }
            _H12 = *(_WORD *)(v58 + 2 * result);
            __asm { FCVT            S12, H12 }
            __int16 v70 = llroundf(_S12 * 65535.0);
            __int16 v71 = llroundf(_S11 * 65535.0);
          }
          else
          {
            __int16 v70 = 0;
            __int16 v71 = 0;
          }
          _D11.i16[0] = *(_WORD *)(v58 + 2 * v56);
          _D12.i16[0] = *(_WORD *)(v58 + 2 * v53);
          _D11.i16[1] = *(_WORD *)(v58 + 2 * v54);
          _D11 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D11), v55), 0), v55)));
          _D11.i16[0] = *(_WORD *)(v51 + 2 * _D11.u32[0]);
          _D13.i16[0] = *(_WORD *)(v61 + 2 * v54);
          __asm { FCVT            S11, H11 }
          _H14 = *(_WORD *)(v51 + 2 * _D11.u32[1]);
          _D12.i16[1] = *(_WORD *)(v61 + 2 * v56);
          _D12 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D12), v55), 0), v55)));
          __asm { FCVT            S14, H14 }
          _D12.i16[0] = *(_WORD *)(v51 + 2 * _D12.u32[0]);
          _H15 = *(_WORD *)(v51 + 2 * _D12.u32[1]);
          __asm
          {
            FCVT            S12, H12
            FCVT            S15, H15
          }
          _D13.i16[1] = *(_WORD *)(v61 + 2 * v53);
          _D13 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D13), v55), 0), v55)));
          _D13.i16[0] = *(_WORD *)(v51 + 2 * _D13.u32[0]);
          __asm { FCVT            S13, H13 }
          _S16 = (float)((float)(v43 * _S14) + (float)(*(float *)_D11.i32 * v41)) + (float)(*(float *)_D12.i32 * v44);
          _S17 = (float)((float)(v46 * _S14) + (float)(*(float *)_D11.i32 * v45)) + (float)(*(float *)_D12.i32 * v47);
          *(float *)_D11.i32 = (float)((float)(v49 * _S14) + (float)(*(float *)_D11.i32 * v48))
                             + (float)(*(float *)_D12.i32 * v50);
          *(float *)_D12.i32 = (float)(v43 * *(float *)_D13.i32) + (float)(_S15 * v41);
          float v78 = (float)(v46 * *(float *)_D13.i32) + (float)(_S15 * v45);
          *(float *)_D13.i32 = (float)(v49 * *(float *)_D13.i32) + (float)(_S15 * v48);
          LOWORD(_S15) = *(_WORD *)(v51 + 2 * _D13.u32[1]);
          __asm { FCVT            S15, H15 }
          *(float *)_D12.i32 = *(float *)_D12.i32 + (float)(_S15 * v44);
          float v80 = v78 + (float)(_S15 * v47);
          LOWORD(_S16) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          *(float *)_D13.i32 = *(float *)_D13.i32 + (float)(_S15 * v50);
          __asm { FCVT            S16, H16 }
          LOWORD(_S17) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _D11.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D11.i32, 0.0), 8191.0)));
          __asm { FCVT            S15, H11 }
          _D11.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D12.i32, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _D12.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          float v84 = (float)(v37 * _S17) + (float)(v36 * _S16);
          float v85 = _S16 + *(float *)_D11.i32;
          _S17 = _S17 + *(float *)_D12.i32;
          float v87 = (float)(v32 + (float)(v85 * v101)) + (float)(_S17 * v100);
          float v88 = (float)(v32 + (float)(v85 * v39)) + (float)(_S17 * v40);
          LOWORD(_S17) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D13.i32, 0.0), 8191.0)));
          __asm { FCVT            S13, H17 }
          float v89 = v84 + (float)(v38 * _S15);
          float v90 = v87 + (float)((float)(_S15 + *(float *)_D13.i32) * v99);
          float v91 = v88 + (float)((float)(_S15 + *(float *)_D13.i32) * v42);
          if (v90 < v31) {
            float v92 = v31;
          }
          else {
            float v92 = v90;
          }
          float v93 = v89 + v31;
          if (v90 > v33) {
            float v92 = v33;
          }
          __int16 v94 = llroundf(v92);
          if (v93 < v34) {
            float v95 = v34;
          }
          else {
            float v95 = v93;
          }
          *uint64_t v60 = v94;
          if (v93 > v35) {
            float v95 = v35;
          }
          v60[1] = llroundf(v95);
          float v96 = v33;
          if (v91 <= v33)
          {
            float v96 = v91;
            if (v91 < v31) {
              float v96 = v31;
            }
          }
          float v97 = (float)((float)((float)(v37 * *(float *)_D12.i32) + (float)(v36 * *(float *)_D11.i32))
                      + (float)(v38 * *(float *)_D13.i32))
              + v31;
          v60[2] = llroundf(v96);
          float v98 = v35;
          if (v97 <= v35)
          {
            float v98 = v97;
            if (v97 < v34) {
              float v98 = v34;
            }
          }
          v60[3] = llroundf(v98);
          if (v59)
          {
            *float v59 = v70;
            v59[1] = v71;
            v59 += 2;
          }
          v58 += 16;
          v57 += 2;
          v60 += 4;
        }
        while (v26 > v57);
      }
      v28 += v22;
      float v29 = (_WORD *)((char *)v29 + v23);
      ++v19;
    }
    while (v19 != v30);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_v216_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_v216_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = *(void *)(result + 112);
  int64x2_t v12 = *(void **)(result + 128);
  unint64_t v13 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
  unint64_t v14 = *(uint64_t **)(result + 136);
  unint64_t v15 = (v8 + v8 * a2) / v9;
  uint64_t v16 = (_WORD *)v12[1];
  if (v16) {
    uint64_t v16 = (_WORD *)((char *)v16 + 2 * v11 + v14[1] * v13);
  }
  if (v15 != v10)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 44);
    uint64_t v19 = v10 + v18;
    uint64_t v20 = **(void **)(result + 64);
    uint64_t v21 = *v14;
    uint64_t v22 = *v12 + v21 * v13;
    uint64_t v23 = *(void *)(result + 152);
    unint64_t v24 = *(void *)(result + 20);
    uint64_t v25 = v15 + v18;
    uint64_t v26 = **(void **)(result + 56) + v20 * v19 + 8 * *(void *)(result + 36);
    uint64_t v27 = (_WORD *)(v22 + 2 * v11);
    uint64_t v28 = v25 - v19;
    float v29 = (float)*(unsigned int *)(v23 + 136);
    LOWORD(a4) = *(_WORD *)(v23 + 144);
    float v30 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v23 + 146);
    float v31 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v23 + 148);
    float v32 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v23 + 150);
    float v33 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v23 + 152);
    float v34 = (float)LODWORD(a8);
    float v35 = *(float *)(v23 + 36);
    float v36 = *(float *)(v23 + 40);
    float v37 = *(float *)(v23 + 44);
    float v38 = *(float *)(v23 + 48) * 0.5;
    float v39 = *(float *)(v23 + 52) * 0.5;
    float v40 = *(float *)(v23 + 56) * 0.5;
    float v41 = *(float *)(v23 + 60) * 0.5;
    float v42 = *(float *)(v23 + 64) * 0.5;
    float v43 = *(float *)(v23 + 68) * 0.5;
    uint64_t v44 = *(unsigned __int8 *)(v23 + 157);
    uint64_t v45 = *(unsigned __int8 *)(v23 + 156);
    uint64_t result = *(unsigned __int8 *)(v23 + 155);
    uint64_t v46 = *(unsigned __int8 *)(v23 + 154);
    do
    {
      if (v24)
      {
        unint64_t v47 = 0;
        uint64_t v48 = v26;
        float v49 = v16;
        float v50 = v27;
        do
        {
          uint64_t v51 = v48 + 8;
          if (v49)
          {
            _H24 = *(_WORD *)(v51 + 2 * v44);
            __asm { FCVT            S24, H24 }
            _H25 = *(_WORD *)(v48 + 2 * v44);
            __asm { FCVT            S25, H25 }
            __int16 v60 = llroundf(_S25 * 65535.0);
            __int16 v61 = llroundf(_S24 * 65535.0);
          }
          else
          {
            __int16 v60 = 0;
            __int16 v61 = 0;
          }
          _H24 = *(_WORD *)(v48 + 2 * v46);
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v48 + 2 * result);
          float v65 = v29 * _S24;
          __asm { FCVT            S24, H25 }
          float v67 = v29 * _S24;
          LOWORD(_S24) = *(_WORD *)(v48 + 2 * v45);
          __asm { FCVT            S24, H24 }
          float v69 = v29 * _S24;
          LOWORD(_S24) = *(_WORD *)(v51 + 2 * v46);
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v51 + 2 * result);
          float v72 = v29 * _S24;
          __asm { FCVT            S25, H25 }
          float v74 = v29 * _S25;
          _H26 = *(_WORD *)(v51 + 2 * v45);
          __asm { FCVT            S26, H26 }
          float v77 = v29 * _S26;
          float v78 = (float)((float)((float)(v36 * v67) + (float)(v35 * v65)) + (float)(v37 * v69)) + v30;
          float v79 = v65 + v72;
          float v80 = v67 + v74;
          float v81 = v69 + v77;
          float v82 = (float)((float)(v31 + (float)(v79 * v38)) + (float)(v80 * v39)) + (float)(v81 * v40);
          float v83 = (float)((float)(v31 + (float)(v79 * v41)) + (float)(v80 * v42)) + (float)(v81 * v43);
          if (v82 < v30) {
            float v84 = v30;
          }
          else {
            float v84 = v82;
          }
          if (v82 > v32) {
            float v84 = v32;
          }
          *float v50 = llroundf(v84);
          if (v78 < v33) {
            float v85 = v33;
          }
          else {
            float v85 = v78;
          }
          if (v78 > v34) {
            float v85 = v34;
          }
          v50[1] = llroundf(v85);
          float v86 = v32;
          if (v83 <= v32)
          {
            float v86 = v83;
            if (v83 < v30) {
              float v86 = v30;
            }
          }
          float v87 = (float)((float)((float)(v36 * v74) + (float)(v35 * v72)) + (float)(v37 * v77)) + v30;
          v50[2] = llroundf(v86);
          float v88 = v34;
          if (v87 <= v34)
          {
            float v88 = v87;
            if (v87 < v33) {
              float v88 = v33;
            }
          }
          v50[3] = llroundf(v88);
          if (v49)
          {
            _WORD *v49 = v60;
            v49[1] = v61;
            v49 += 2;
          }
          v48 += 16;
          v47 += 2;
          v50 += 4;
        }
        while (v24 > v47);
      }
      v26 += v20;
      uint64_t v27 = (_WORD *)((char *)v27 + v21);
      ++v17;
    }
    while (v17 != v28);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

int8x8_t *vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = 0;
  unint64_t v4 = *(void *)(a1 + 20);
  uint64_t v163 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (v6 + v6 * a2) / v7;
  uint64_t v11 = v10 + v5;
  uint64_t v12 = *((void *)a1 + 14);
  uint64_t v13 = *((void *)a1 + 19);
  uint64_t v15 = *((void *)a1 + 15);
  unint64_t v14 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v16 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v17 = **((void **)a1 + 8);
  unint64_t v18 = *((void *)a1 + 13) * a2;
  uint64_t v162 = **((void **)a1 + 7);
  uint64_t v19 = v16[1];
  uint64_t v167 = *v16;
  uint64_t v20 = v16[2];
  uint64_t v22 = *v14;
  uint64_t v21 = v14[1];
  uint64_t result = (int8x8_t *)v14[2];
  int v202 = *(_DWORD *)(v13 + 154);
  unsigned int v24 = *(unsigned __int16 *)(v13 + 144);
  unsigned int v25 = *(unsigned __int16 *)(v13 + 146);
  unsigned int v26 = *(unsigned __int16 *)(v13 + 148);
  unsigned int v27 = *(unsigned __int16 *)(v13 + 150);
  unsigned int v28 = *(unsigned __int16 *)(v13 + 152);
  _S14 = *(float *)(v13 + 36);
  _S15 = *(float *)(v13 + 40);
  float v200 = *(float *)(v13 + 44);
  float v178 = *(float *)(v13 + 52);
  float v179 = *(float *)(v13 + 48);
  float v176 = *(float *)(v13 + 60);
  float v177 = *(float *)(v13 + 56);
  float v174 = *(float *)(v13 + 68);
  float v175 = *(float *)(v13 + 64);
  float v199 = *(float *)(v13 + 72);
  float v198 = *(float *)(v13 + 76);
  float v197 = *(float *)(v13 + 80);
  float v196 = *(float *)(v13 + 84);
  float v195 = *(float *)(v13 + 88);
  uint64_t v31 = v18 / v7 + v15;
  uint64_t v166 = v17;
  uint64_t v32 = v17 * v9;
  float v194 = *(float *)(v13 + 92);
  float v193 = *(float *)(v13 + 96);
  float v192 = *(float *)(v13 + 100);
  float v191 = *(float *)(v13 + 104);
  float v190 = *(float *)(v13 + 108);
  float v189 = *(float *)(v13 + 112);
  float v188 = *(float *)(v13 + 116);
  float v187 = *(float *)(v13 + 120);
  memset(v201, 0, sizeof(v201));
  do
  {
    unsigned int v33 = 0;
    char v34 = *((unsigned char *)&v202 + v3);
    do
    {
      *((unsigned char *)v201 + 8 * (((_BYTE)v3 + (v33 >> 3)) & 0x1F) + v33) = v34 + 4 * v33;
      ++v33;
    }
    while (v33 != 8);
    ++v3;
  }
  while (v3 != 4);
  if (v10 != v8)
  {
    uint64_t v35 = 0;
    float v36 = (float)v24;
    float v37 = (float)v25;
    __asm { FCVT            H0, S14 }
    short float v186 = _H0;
    float v43 = (float)v26;
    __asm { FCVT            H0, S15 }
    short float v185 = _H0;
    float v180 = (float)v27;
    float v45 = (float)v28;
    uint64_t v46 = v11 - v9;
    _S0 = v200;
    __asm { FCVT            H0, S0 }
    short float v184 = *(short float *)&_S0;
    _S0 = v179;
    __asm { FCVT            H0, S0 }
    short float v173 = *(short float *)&_S0;
    uint64_t v49 = v13 + 16548;
    uint64_t v50 = v13 + 32932;
    uint64_t v51 = v13 + 164;
    _S0 = v178;
    __asm { FCVT            H0, S0 }
    short float v172 = *(short float *)&_S0;
    _S0 = v177;
    __asm { FCVT            H0, S0 }
    short float v171 = *(short float *)&_S0;
    _S0 = v176;
    __asm { FCVT            H0, S0 }
    short float v170 = *(short float *)&_S0;
    _S0 = v175;
    __asm { FCVT            H0, S0 }
    short float v169 = *(short float *)&_S0;
    _S0 = v174;
    __asm { FCVT            H0, S0 }
    short float v168 = *(short float *)&_S0;
    _S0 = v190;
    __asm { FCVT            H0, S0 }
    short float v183 = *(short float *)&_S0;
    _S0 = v189;
    __asm { FCVT            H0, S0 }
    short float v182 = *(short float *)&_S0;
    _S0 = v188;
    __asm { FCVT            H0, S0 }
    short float v181 = *(short float *)&_S0;
    _S0 = v187;
    __asm { FCVT            H3, S0 }
    _S0 = v199;
    __asm { FCVT            H4, S0 }
    _S0 = v198;
    __asm { FCVT            H5, S0 }
    _S0 = v197;
    __asm { FCVT            H6, S0 }
    _S0 = v196;
    __asm { FCVT            H0, S0 }
    _S1 = v195;
    __asm { FCVT            H1, S1 }
    _S2 = v194;
    __asm { FCVT            H2, S2 }
    _S7 = v193;
    __asm { FCVT            H11, S7 }
    _S7 = v192;
    __asm { FCVT            H8, S7 }
    *(short float *)_Q16.i16 = (short float)v24;
    float16x8_t v78 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q16.i8, 0);
    *(short float *)_Q16.i16 = (short float)v25;
    float16x8_t v79 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q16.i8, 0);
    *(short float *)_Q16.i16 = (short float)v26;
    float16x8_t v80 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q16.i8, 0);
    if (_ZF) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = (int8x8_t *)((char *)result + v20 * v31 + v12);
    }
    if (v21) {
      float v81 = (char *)(v21 + v19 * v31 + v12);
    }
    else {
      float v81 = 0;
    }
    *(short float *)_Q16.i16 = (short float)v27;
    float16x8_t v82 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q16.i8, 0);
    _S7 = v191;
    __asm { FCVT            H10, S7 }
    float v85 = (void *)(v22 + v167 * v31 + v12);
    *(short float *)_Q16.i16 = (short float)v28;
    float16x8_t v86 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q16.i8, 0);
    uint64_t v87 = v162 + v32 + 8 * v163;
    v88.i64[0] = 0x7000700070007000;
    v88.i64[1] = 0x7000700070007000;
    v89.i64[0] = 0x9000900090009000;
    v89.i64[1] = 0x9000900090009000;
    float v164 = _S15;
    float v165 = _S14;
    do
    {
      if ((int)v4 < 8)
      {
        unint64_t v132 = 0;
        __int16 v94 = v85;
        float v93 = v81;
        float v92 = result;
        float v91 = (const __int16 *)v87;
      }
      else
      {
        int v90 = 0;
        float v91 = (const __int16 *)v87;
        float v92 = result;
        float v93 = v81;
        __int16 v94 = v85;
        do
        {
          int16x8x4_t v204 = vld4q_s16(v91);
          v91 += 32;
          if (v92) {
            int8x8_t v95 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v204.val[3], (float16x8_t)vdupq_n_s16(0x5BF8u))));
          }
          else {
            int8x8_t v95 = 0;
          }
          uint16x8_t v96 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v204.val[0], v88), (float16x8_t)0), v89));
          float16x8_t v97 = (float16x8_t)vmovl_high_u16(v96);
          *(void *)&long long v98 = v97.u32[2];
          *((void *)&v98 + 1) = v97.u32[3];
          long long v99 = v98;
          *(void *)&long long v98 = v97.u32[0];
          *((void *)&v98 + 1) = v97.u32[1];
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v96.i8);
          v97.i16[0] = *(_WORD *)(v51 + 2 * v100.u32[0]);
          v97.i16[1] = *(_WORD *)(v51 + 2 * v100.u32[1]);
          v97.i16[2] = *(_WORD *)(v51 + 2 * v100.u32[2]);
          v97.i16[3] = *(_WORD *)(v51 + 2 * v100.u32[3]);
          v97.i16[4] = *(_WORD *)(v51 + 2 * v98);
          v97.i16[5] = *(_WORD *)(v51 + 2 * *((void *)&v98 + 1));
          v97.i16[6] = *(_WORD *)(v51 + 2 * v99);
          v97.i16[7] = *(_WORD *)(v51 + 2 * *((void *)&v99 + 1));
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v204.val[1], v88), (float16x8_t)0), v89));
          float16x8_t v102 = (float16x8_t)vmovl_high_u16(v101);
          *(void *)&long long v98 = v102.u32[2];
          *((void *)&v98 + 1) = v102.u32[3];
          long long v103 = v98;
          *(void *)&long long v98 = v102.u32[0];
          *((void *)&v98 + 1) = v102.u32[1];
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v101.i8);
          v102.i16[0] = *(_WORD *)(v51 + 2 * v104.u32[0]);
          v102.i16[1] = *(_WORD *)(v51 + 2 * v104.u32[1]);
          v102.i16[2] = *(_WORD *)(v51 + 2 * v104.u32[2]);
          v102.i16[3] = *(_WORD *)(v51 + 2 * v104.u32[3]);
          v102.i16[4] = *(_WORD *)(v51 + 2 * v98);
          v102.i16[5] = *(_WORD *)(v51 + 2 * *((void *)&v98 + 1));
          v102.i16[6] = *(_WORD *)(v51 + 2 * v103);
          v102.i16[7] = *(_WORD *)(v51 + 2 * *((void *)&v103 + 1));
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v204.val[2], v88), (float16x8_t)0), v89));
          float16x8_t v106 = (float16x8_t)vmovl_high_u16(v105);
          *(void *)&long long v98 = v106.u32[2];
          *((void *)&v98 + 1) = v106.u32[3];
          long long v107 = v98;
          *(void *)&long long v98 = v106.u32[0];
          *((void *)&v98 + 1) = v106.u32[1];
          uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v105.i8);
          v106.i16[0] = *(_WORD *)(v51 + 2 * v108.u32[0]);
          v106.i16[1] = *(_WORD *)(v51 + 2 * v108.u32[1]);
          v106.i16[2] = *(_WORD *)(v51 + 2 * v108.u32[2]);
          v106.i16[3] = *(_WORD *)(v51 + 2 * v108.u32[3]);
          v106.i16[4] = *(_WORD *)(v51 + 2 * v98);
          v106.i16[5] = *(_WORD *)(v51 + 2 * *((void *)&v98 + 1));
          v106.i16[6] = *(_WORD *)(v51 + 2 * v107);
          v106.i16[7] = *(_WORD *)(v51 + 2 * *((void *)&v107 + 1));
          uint16x8_t v109 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v97, v183), v102, v182), v106, v181), vmaxq_f16(vmaxq_f16(v97, v102), v106), _H3), (float16x8_t)0), v89));
          uint32x4_t v110 = vmovl_high_u16(v109);
          float16x8_t v111 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v109.i8);
          v111.i16[0] = *(_WORD *)(v49 + 2 * v111.u32[0]);
          v111.i16[1] = *(_WORD *)(v49 + 2 * v111.u32[1]);
          v111.i16[2] = *(_WORD *)(v49 + 2 * v111.u32[2]);
          v111.i16[3] = *(_WORD *)(v49 + 2 * v111.u32[3]);
          v111.i16[4] = *(_WORD *)(v49 + 2 * v110.u32[0]);
          v111.i16[5] = *(_WORD *)(v49 + 2 * v110.u32[1]);
          v111.i16[6] = *(_WORD *)(v49 + 2 * v110.u32[2]);
          v111.i16[7] = *(_WORD *)(v49 + 2 * v110.u32[3]);
          float16x8_t v112 = vmulq_f16(v97, v111);
          float16x8_t v113 = vmulq_f16(v102, v111);
          float16x8_t v114 = vmulq_f16(v106, v111);
          float16x8_t v115 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v112, _H0), v113, _H1), v114, _H2);
          float16x8_t v116 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, _H10), v113, _H8), v112, _H11);
          uint16x8_t v117 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v112, _H4), v113, _H5), v114, _H6), (float16x8_t)0), v89));
          uint32x4_t v118 = vmovl_high_u16(v117);
          *(void *)&long long v98 = v118.u32[2];
          *((void *)&v98 + 1) = v118.u32[3];
          long long v119 = v98;
          *(void *)&long long v98 = v118.u32[0];
          *((void *)&v98 + 1) = v118.u32[1];
          uint32x4_t v120 = vmovl_u16(*(uint16x4_t *)v117.i8);
          v121.i16[0] = *(_WORD *)(v50 + 2 * v120.u32[0]);
          v121.i16[1] = *(_WORD *)(v50 + 2 * v120.u32[1]);
          v121.i16[2] = *(_WORD *)(v50 + 2 * v120.u32[2]);
          v121.i16[3] = *(_WORD *)(v50 + 2 * v120.u32[3]);
          v121.i16[4] = *(_WORD *)(v50 + 2 * v98);
          v121.i16[5] = *(_WORD *)(v50 + 2 * *((void *)&v98 + 1));
          v121.i16[6] = *(_WORD *)(v50 + 2 * v119);
          v121.i16[7] = *(_WORD *)(v50 + 2 * *((void *)&v119 + 1));
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v89));
          uint32x4_t v123 = vmovl_high_u16(v122);
          *(void *)&long long v98 = v123.u32[2];
          *((void *)&v98 + 1) = v123.u32[3];
          long long v124 = v98;
          *(void *)&long long v98 = v123.u32[0];
          *((void *)&v98 + 1) = v123.u32[1];
          uint32x4_t v125 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v126.i16[0] = *(_WORD *)(v50 + 2 * v125.u32[0]);
          v126.i16[1] = *(_WORD *)(v50 + 2 * v125.u32[1]);
          v126.i16[2] = *(_WORD *)(v50 + 2 * v125.u32[2]);
          v126.i16[3] = *(_WORD *)(v50 + 2 * v125.u32[3]);
          v126.i16[4] = *(_WORD *)(v50 + 2 * v98);
          v126.i16[5] = *(_WORD *)(v50 + 2 * *((void *)&v98 + 1));
          v126.i16[6] = *(_WORD *)(v50 + 2 * v124);
          v126.i16[7] = *(_WORD *)(v50 + 2 * *((void *)&v124 + 1));
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v89));
          uint32x4_t v128 = vmovl_high_u16(v127);
          *(void *)&long long v98 = v128.u32[2];
          *((void *)&v98 + 1) = v128.u32[3];
          long long v129 = v98;
          *(void *)&long long v98 = v128.u32[0];
          *((void *)&v98 + 1) = v128.u32[1];
          _Q16 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v127.i8);
          v130.i16[0] = *(_WORD *)(v50 + 2 * _Q16.u32[0]);
          v130.i16[1] = *(_WORD *)(v50 + 2 * _Q16.u32[1]);
          v130.i16[2] = *(_WORD *)(v50 + 2 * _Q16.u32[2]);
          v130.i16[3] = *(_WORD *)(v50 + 2 * _Q16.u32[3]);
          v130.i16[4] = *(_WORD *)(v50 + 2 * v98);
          v130.i16[5] = *(_WORD *)(v50 + 2 * *((void *)&v98 + 1));
          v130.i16[6] = *(_WORD *)(v50 + 2 * v129);
          v130.i16[7] = *(_WORD *)(v50 + 2 * *((void *)&v129 + 1));
          *(int8x8_t *)_Q16.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v78, v121, v186), v126, v185), v130, v184), v78), v80)));
          *v94++ = _Q16.i64[0];
          if (v93)
          {
            float16x8_t v131 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v79, v121, v170), v126, v169), v130, v168);
            v203.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v79, v121, v173), v126, v172), v130, v171), v82), v86), v82), v86)));
            _Q16 = (int16x8_t)vcvtq_u16_f16(v131);
            v203.val[1] = vmovn_s16(_Q16);
            vst2_s8(v93, v203);
            v93 += 16;
          }
          if (v92) {
            *v92++ = v95;
          }
          v90 += 8;
        }
        while (v90 < (int)v4 - 7);
        unint64_t v132 = v4 & 0xFFFFFFF8;
        _S15 = v164;
        _S14 = v165;
      }
      _CF = v4 >= v132;
      unint64_t v133 = v4 - v132;
      if (v133 != 0 && _CF)
      {
        do
        {
          _Q16.i16[0] = v91[v202];
          _H26 = v91[BYTE2(v202)];
          __asm { FCVT            S27, H26 }
          float v136 = _S27 * 8191.0;
          _Q16.i16[1] = v91[BYTE1(v202)];
          float32x2_t v137 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          *(int32x2_t *)_Q16.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q16.i8), v137), 0), v137)));
          _Q16.i16[0] = *(_WORD *)(v51 + 2 * _Q16.u32[0]);
          __asm { FCVT            S27, H16 }
          _Q16.i16[0] = *(_WORD *)(v51 + 2 * _Q16.u32[1]);
          unsigned int v139 = llroundf(fminf(fmaxf(v136, 0.0), 8191.0));
          __asm { FCVT            S28, H16 }
          _Q16.i16[0] = *(_WORD *)(v51 + 2 * v139);
          __asm { FCVT            S29, H16 }
          float v142 = (float)((float)((float)(v189 * _S28) + (float)(v190 * _S27)) + (float)(v188 * _S29))
               + (float)(v187 * fmaxf(_S27, fmaxf(_S28, _S29)));
          _Q16.i32[0] = 1174403072;
          if (v142 <= 8191.0)
          {
            *(float *)_Q16.i32 = v142;
            if (v142 < 0.0) {
              _Q16.i64[0] = 0;
            }
          }
          _H16 = *(_WORD *)(v49 + 2 * llroundf(*(float *)_Q16.i32));
          __asm { FCVT            S16, H16 }
          _S27 = _S27 * _S16;
          _S28 = _S28 * _S16;
          float v147 = _S29 * _S16;
          float v148 = (float)((float)(v198 * _S28) + (float)(_S27 * v199)) + (float)(v147 * v197);
          float v149 = (float)((float)(v195 * _S28) + (float)(_S27 * v196)) + (float)(v147 * v194);
          _S16 = (float)((float)(v192 * _S28) + (float)(_S27 * v193)) + (float)(v147 * v191);
          LOWORD(_S27) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          LOWORD(_S28) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          LOWORD(_S16) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          __asm { FCVT            S29, H16 }
          float v154 = (float)((float)((float)(_S15 * _S28) + (float)(_S14 * _S27)) + (float)(v200 * _S29)) + v36;
          float v155 = v43;
          if (v154 <= v43)
          {
            float v155 = (float)((float)((float)(_S15 * _S28) + (float)(_S14 * _S27)) + (float)(v200 * _S29)) + v36;
            if (v154 < v36) {
              float v155 = (float)v24;
            }
          }
          _H26 = v91[HIBYTE(v202)];
          *(unsigned char *)__int16 v94 = llroundf(v155);
          __int16 v94 = (void *)((char *)v94 + 1);
          if (v93)
          {
            float v157 = (float)((float)(v37 + (float)(_S27 * v179)) + (float)(_S28 * v178)) + (float)(_S29 * v177);
            float v158 = (float)v28;
            if (v157 <= v45)
            {
              float v158 = (float)((float)(v37 + (float)(_S27 * v179)) + (float)(_S28 * v178)) + (float)(_S29 * v177);
              if (v157 < v180) {
                float v158 = (float)v27;
              }
            }
            float v159 = (float)((float)(v37 + (float)(_S27 * v176)) + (float)(_S28 * v175)) + (float)(_S29 * v174);
            *float v93 = llroundf(v158);
            float v160 = (float)v28;
            if (v159 <= v45)
            {
              float v160 = v159;
              if (v159 < v180) {
                float v160 = (float)v27;
              }
            }
            v93[1] = llroundf(v160);
            v93 += 2;
          }
          if (v92)
          {
            __asm { FCVT            S16, H26 }
            v92->i8[0] = llroundf(_S16 * 255.0);
            float v92 = (int8x8_t *)((char *)v92 + 1);
          }
          v91 += 4;
          --v133;
        }
        while (v133);
      }
      v87 += v166;
      float v85 = (void *)((char *)v85 + v167);
      v81 += v19;
      uint64_t result = (int8x8_t *)((char *)result + v20);
      ++v35;
    }
    while (v35 != v46);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, double _D4)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(result + 20);
    unint64_t v13 = v9 + *(void *)(result + 44);
    unint64_t v14 = v10 - v9;
    uint64_t v15 = *(void *)(result + 152);
    uint64_t v16 = *(uint64_t **)(result + 136);
    uint64_t v17 = *(void **)(result + 56);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    uint64_t v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    float v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    float v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    float v25 = (float)LODWORD(a6);
    LOWORD(_D4) = *(_WORD *)(v15 + 152);
    float v26 = (float)LODWORD(_D4);
    float v27 = *(float *)(v15 + 36);
    float v28 = *(float *)(v15 + 40);
    float v29 = *(float *)(v15 + 44);
    float v103 = *(float *)(v15 + 48);
    float v102 = *(float *)(v15 + 52);
    float v101 = *(float *)(v15 + 56);
    float v30 = *(float *)(v15 + 64);
    float v100 = *(float *)(v15 + 60);
    float v31 = *(float *)(v15 + 68);
    float v32 = *(float *)(v15 + 72);
    float v33 = *(float *)(v15 + 76);
    float v34 = *(float *)(v15 + 80);
    float v35 = *(float *)(v15 + 84);
    float v36 = *(float *)(v15 + 88);
    float v37 = *(float *)(v15 + 92);
    float v38 = *(float *)(v15 + 96);
    float v39 = *(float *)(v15 + 100);
    float v40 = *(float *)(v15 + 104);
    uint64_t v41 = v15 + 164;
    uint64_t v42 = v15 + 16548;
    uint64_t v43 = v15 + 32932;
    float v45 = *(float *)(v15 + 108);
    float v44 = *(float *)(v15 + 112);
    float v46 = *(float *)(v15 + 116);
    float v47 = *(float *)(v15 + 120);
    uint64_t v48 = *(uint64_t **)(result + 128);
    uint64_t v49 = *(void *)(result + 112);
    unint64_t v50 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
    uint64_t v51 = *(void *)(result + 36);
    uint64_t result = *(unsigned __int8 *)(v15 + 157);
    uint64_t v52 = *(unsigned __int8 *)(v15 + 156);
    uint64_t v53 = *(unsigned __int8 *)(v15 + 155);
    uint64_t v54 = *(unsigned __int8 *)(v15 + 154);
    uint64_t v55 = v48[2];
    if (v55) {
      uint64_t v56 = (unsigned char *)(v55 + v50 * v21 + v49);
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v58 = *v48;
    uint64_t v57 = v48[1];
    float v59 = (unsigned char *)(v57 + v50 * v20 + v49);
    if (!v57) {
      float v59 = 0;
    }
    __int16 v60 = (unsigned char *)(v58 + v50 * v19 + v49);
    uint64_t v61 = *v17 + v18 * v13 + 8 * v51;
    float32x2_t v62 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        uint64_t v63 = v12;
        float16x8_t v64 = v56;
        float v65 = v59;
        unsigned __int8 v66 = v60;
        uint64_t v67 = v61;
        do
        {
          LOWORD(_D4) = *(_WORD *)(v67 + 2 * v54);
          WORD1(_D4) = *(_WORD *)(v67 + 2 * v53);
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v62), 0), v62))));
          LOWORD(_D4) = *(_WORD *)(v41 + 2 * LODWORD(_D4));
          _H16 = *(_WORD *)(v67 + 2 * v52);
          __asm { FCVT            S16, H16 }
          float v74 = _S16 * 8191.0;
          __asm { FCVT            S16, H4 }
          LOWORD(_D4) = *(_WORD *)(v41 + 2 * HIDWORD(_D4));
          unsigned int v76 = llroundf(fminf(fmaxf(v74, 0.0), 8191.0));
          __asm { FCVT            S17, H4 }
          LOWORD(_D4) = *(_WORD *)(v41 + 2 * v76);
          __asm { FCVT            S13, H4 }
          float v79 = fmaxf(_S16, fmaxf(_S17, _S13));
          float v80 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13)) + (float)(v47 * v79);
          LODWORD(_D4) = 1174403072;
          if (v80 <= 8191.0)
          {
            *(float *)&_D4 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13))
                           + (float)(v47 * v79);
            if (v80 < 0.0) {
              _D4 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v42 + 2 * llroundf(*(float *)&_D4));
          __asm { FCVT            S4, H4 }
          _S16 = _S16 * _S4;
          float v84 = _S17 * _S4;
          float v85 = _S13 * _S4;
          float v86 = (float)((float)(v33 * v84) + (float)(_S16 * v32)) + (float)(v85 * v34);
          float v87 = (float)((float)(v36 * v84) + (float)(_S16 * v35)) + (float)(v85 * v37);
          _S4 = (float)((float)(v39 * v84) + (float)(_S16 * v38)) + (float)(v85 * v40);
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S13, H16 }
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S4) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S17, H4 }
          float v92 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
          float v93 = v24;
          if (v92 <= v24)
          {
            float v93 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
            if (v92 < v22) {
              float v93 = v22;
            }
          }
          _H15 = *(_WORD *)(v67 + 2 * result);
          *v66++ = llroundf(v93);
          if (v65)
          {
            float v95 = (float)((float)(v23 + (float)(_S13 * v103)) + (float)(_S16 * v102)) + (float)(_S17 * v101);
            float v96 = v26;
            if (v95 <= v26)
            {
              float v96 = (float)((float)(v23 + (float)(_S13 * v103)) + (float)(_S16 * v102)) + (float)(_S17 * v101);
              if (v95 < v25) {
                float v96 = v25;
              }
            }
            float v97 = (float)((float)(v23 + (float)(_S13 * v100)) + (float)(_S16 * v30)) + (float)(_S17 * v31);
            *float v65 = llroundf(v96);
            float v98 = v26;
            if (v97 <= v26)
            {
              float v98 = v97;
              if (v97 < v25) {
                float v98 = v25;
              }
            }
            v65[1] = llroundf(v98);
            v65 += 2;
          }
          if (v64)
          {
            __asm { FCVT            S4, H15 }
            *v64++ = llroundf(_S4 * 255.0);
          }
          v67 += 8;
          --v63;
        }
        while (v63);
      }
      v61 += v18;
      v60 += v19;
      v59 += v20;
      v56 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

char *vt_Copy_RGhA_TRC_Mat_TRC_444vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 20);
  uint64_t v125 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = *((void *)a1 + 14);
  uint64_t v15 = *((void *)a1 + 19);
  unint64_t v16 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *((void *)a1 + 15);
  uint64_t v17 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v20 = **((void **)a1 + 8);
  uint64_t v124 = **((void **)a1 + 7);
  uint64_t v21 = v19[1];
  uint64_t v126 = *v19;
  uint64_t v22 = v19[2];
  uint64_t v24 = *v17;
  uint64_t result = (char *)v17[1];
  uint64_t v25 = v17[2];
  int v154 = *(_DWORD *)(v15 + 154);
  unsigned int v26 = *(unsigned __int16 *)(v15 + 144);
  unsigned int v27 = *(unsigned __int16 *)(v15 + 146);
  unsigned int v28 = *(unsigned __int16 *)(v15 + 148);
  unsigned int v29 = *(unsigned __int16 *)(v15 + 150);
  unsigned int v30 = *(unsigned __int16 *)(v15 + 152);
  float v151 = *(float *)(v15 + 40);
  float v152 = *(float *)(v15 + 36);
  float v137 = *(float *)(v15 + 52);
  float v138 = *(float *)(v15 + 48);
  float v135 = *(float *)(v15 + 60);
  float v136 = *(float *)(v15 + 56);
  float v133 = *(float *)(v15 + 68);
  float v134 = *(float *)(v15 + 64);
  float v149 = *(float *)(v15 + 72);
  float v150 = *(float *)(v15 + 44);
  uint64_t v31 = v16 / v9 + v18;
  uint64_t v32 = v20 * v11;
  float v147 = *(float *)(v15 + 80);
  float v148 = *(float *)(v15 + 76);
  float v145 = *(float *)(v15 + 88);
  float v146 = *(float *)(v15 + 84);
  float v143 = *(float *)(v15 + 96);
  float v144 = *(float *)(v15 + 92);
  LODWORD(a4) = *(_DWORD *)(v15 + 100);
  float v141 = *(float *)(v15 + 104);
  float v142 = *(float *)&a4;
  _D0.i32[1] = 0;
  memset(v153, 0, sizeof(v153));
  do
  {
    unsigned int v34 = 0;
    char v35 = *((unsigned char *)&v154 + v5);
    do
    {
      *((unsigned char *)v153 + 8 * (((_BYTE)v5 + (v34 >> 3)) & 0x1F) + v34) = v35 + 4 * v34;
      ++v34;
    }
    while (v34 != 8);
    ++v5;
  }
  while (v5 != 4);
  if (v12 != v10)
  {
    uint64_t v36 = 0;
    float v37 = (float)v26;
    float v38 = (float)v27;
    float v39 = (float)v28;
    float v139 = (float)v29;
    float v40 = (float)v30;
    uint64_t v41 = v13 - v11;
    uint64_t v42 = v15 + 16548;
    uint64_t v43 = v15 + 164;
    *(float *)_D0.i32 = v152;
    __asm { FCVT            H0, S0 }
    short float v140 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v151;
    __asm { FCVT            H9, S0 }
    *(float *)_D0.i32 = v150;
    __asm { FCVT            H10, S0 }
    *(float *)_D0.i32 = v138;
    __asm { FCVT            H0, S0 }
    short float v132 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v137;
    __asm { FCVT            H0, S0 }
    short float v131 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v136;
    __asm { FCVT            H0, S0 }
    short float v130 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v135;
    __asm { FCVT            H0, S0 }
    short float v129 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v134;
    __asm { FCVT            H0, S0 }
    short float v128 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v133;
    __asm { FCVT            H0, S0 }
    short float v127 = *(short float *)_D0.i16;
    *(float *)_D0.i32 = v149;
    __asm { FCVT            H4, S0 }
    *(float *)_D0.i32 = v148;
    __asm { FCVT            H5, S0 }
    *(float *)_D0.i32 = v147;
    __asm { FCVT            H6, S0 }
    *(float *)_D0.i32 = v146;
    __asm { FCVT            H7, S0 }
    *(float *)_D0.i32 = v145;
    __asm { FCVT            H11, S0 }
    *(float *)_D0.i32 = v144;
    __asm { FCVT            H12, S0 }
    *(float *)_D0.i32 = v143;
    __asm { FCVT            H13, S0 }
    _D0.i32[0] = LODWORD(a4);
    __asm { FCVT            H14, S0 }
    *(short float *)_D0.i16 = (short float)v26;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v27;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v28;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    if (_ZF) {
      uint64_t v61 = 0;
    }
    else {
      uint64_t v61 = (float16x4_t *)(v25 + v22 * v31 + v14);
    }
    if (result) {
      result += v21 * v31 + v14;
    }
    else {
      uint64_t result = 0;
    }
    *(short float *)_D0.i16 = (short float)v29;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    _S0 = v141;
    __asm { FCVT            H0, S0 }
    float v65 = (int8x8_t *)(v24 + v126 * v31 + v14);
    *(short float *)&a4 = (short float)v30;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    uint64_t v67 = v124 + v32 + 8 * v125;
    v68.i64[0] = 0x7000700070007000;
    v68.i64[1] = 0x7000700070007000;
    v69.i64[0] = 0x9000900090009000;
    v69.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v6 < 8)
      {
        unint64_t v106 = 0;
        float v74 = result;
        float v73 = v61;
        float v72 = v65;
        __int16 v71 = (const __int16 *)v67;
      }
      else
      {
        int v70 = 0;
        __int16 v71 = (const __int16 *)v67;
        float v72 = v65;
        float v73 = v61;
        float v74 = result;
        do
        {
          int16x8x4_t v156 = vld4q_s16(v71);
          v71 += 32;
          if (v73) {
            _D20 = (float16x4_t)vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v156.val[3], (float16x8_t)vdupq_n_s16(0x5BF8u))));
          }
          else {
            _D20 = 0;
          }
          uint16x8_t v75 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v156.val[0], v68), (float16x8_t)0), v69));
          uint32x4_t v76 = vmovl_u16(*(uint16x4_t *)v75.i8);
          float16x8_t v77 = vmulq_f16((float16x8_t)v156.val[1], v68);
          float16x8_t v78 = (float16x8_t)vmovl_high_u16(v75);
          uint64_t v79 = v78.u32[0];
          v78.i16[0] = *(_WORD *)(v43 + 2 * v76.u32[0]);
          float v80 = (__int16 *)(v43 + 2 * v78.u32[1]);
          float v81 = (__int16 *)(v43 + 2 * v78.u32[2]);
          float16x8_t v82 = (__int16 *)(v43 + 2 * v78.u32[3]);
          v78.i16[1] = *(_WORD *)(v43 + 2 * v76.u32[1]);
          v78.i16[2] = *(_WORD *)(v43 + 2 * v76.u32[2]);
          v78.i16[3] = *(_WORD *)(v43 + 2 * v76.u32[3]);
          v78.i16[4] = *(_WORD *)(v43 + 2 * v79);
          v78.i16[5] = *v80;
          v78.i16[6] = *v81;
          v78.i16[7] = *v82;
          float16x8_t v83 = vmulq_f16((float16x8_t)v156.val[2], v68);
          uint16x8_t v84 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v77, (float16x8_t)0), v69));
          uint32x4_t v85 = vmovl_high_u16(v84);
          float16x8_t v86 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v84.i8);
          v86.i16[0] = *(_WORD *)(v43 + 2 * v86.u32[0]);
          v86.i16[1] = *(_WORD *)(v43 + 2 * v86.u32[1]);
          v86.i16[2] = *(_WORD *)(v43 + 2 * v86.u32[2]);
          v86.i16[3] = *(_WORD *)(v43 + 2 * v86.u32[3]);
          v86.i16[4] = *(_WORD *)(v43 + 2 * v85.u32[0]);
          v86.i16[5] = *(_WORD *)(v43 + 2 * v85.u32[1]);
          v86.i16[6] = *(_WORD *)(v43 + 2 * v85.u32[2]);
          v86.i16[7] = *(_WORD *)(v43 + 2 * v85.u32[3]);
          uint16x8_t v87 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v83, (float16x8_t)0), v69));
          uint32x4_t v88 = vmovl_high_u16(v87);
          float16x8_t v89 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v87.i8);
          v89.i16[0] = *(_WORD *)(v43 + 2 * v89.u32[0]);
          v89.i16[1] = *(_WORD *)(v43 + 2 * v89.u32[1]);
          v89.i16[2] = *(_WORD *)(v43 + 2 * v89.u32[2]);
          v89.i16[3] = *(_WORD *)(v43 + 2 * v89.u32[3]);
          v89.i16[4] = *(_WORD *)(v43 + 2 * v88.u32[0]);
          v89.i16[5] = *(_WORD *)(v43 + 2 * v88.u32[1]);
          v89.i16[6] = *(_WORD *)(v43 + 2 * v88.u32[2]);
          v89.i16[7] = *(_WORD *)(v43 + 2 * v88.u32[3]);
          float16x8_t v90 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v78, _H4), v86, _H5), v89, _H6);
          float16x8_t v91 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v78, _H7), v86, _H11), v89, _H12);
          float16x8_t v92 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, _H0), v86, _H14), v78, _H13);
          uint16x8_t v93 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v90, (float16x8_t)0), v69));
          uint32x4_t v94 = vmovl_high_u16(v93);
          uint32x4_t v95 = vmovl_u16(*(uint16x4_t *)v93.i8);
          v96.i16[0] = *(_WORD *)(v42 + 2 * v95.u32[0]);
          v96.i16[1] = *(_WORD *)(v42 + 2 * v95.u32[1]);
          v96.i16[2] = *(_WORD *)(v42 + 2 * v95.u32[2]);
          v96.i16[3] = *(_WORD *)(v42 + 2 * v95.u32[3]);
          v96.i16[4] = *(_WORD *)(v42 + 2 * v94.u32[0]);
          v96.i16[5] = *(_WORD *)(v42 + 2 * v94.u32[1]);
          v96.i16[6] = *(_WORD *)(v42 + 2 * v94.u32[2]);
          v96.i16[7] = *(_WORD *)(v42 + 2 * v94.u32[3]);
          uint16x8_t v97 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v91, (float16x8_t)0), v69));
          uint32x4_t v98 = vmovl_high_u16(v97);
          uint32x4_t v99 = vmovl_u16(*(uint16x4_t *)v97.i8);
          v100.i16[0] = *(_WORD *)(v42 + 2 * v99.u32[0]);
          v100.i16[1] = *(_WORD *)(v42 + 2 * v99.u32[1]);
          v100.i16[2] = *(_WORD *)(v42 + 2 * v99.u32[2]);
          v100.i16[3] = *(_WORD *)(v42 + 2 * v99.u32[3]);
          v100.i16[4] = *(_WORD *)(v42 + 2 * v98.u32[0]);
          v100.i16[5] = *(_WORD *)(v42 + 2 * v98.u32[1]);
          v100.i16[6] = *(_WORD *)(v42 + 2 * v98.u32[2]);
          v100.i16[7] = *(_WORD *)(v42 + 2 * v98.u32[3]);
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v69));
          uint32x4_t v102 = vmovl_high_u16(v101);
          uint32x4_t v103 = vmovl_u16(*(uint16x4_t *)v101.i8);
          v104.i16[0] = *(_WORD *)(v42 + 2 * v103.u32[0]);
          v104.i16[1] = *(_WORD *)(v42 + 2 * v103.u32[1]);
          v104.i16[2] = *(_WORD *)(v42 + 2 * v103.u32[2]);
          v104.i16[3] = *(_WORD *)(v42 + 2 * v103.u32[3]);
          v104.i16[4] = *(_WORD *)(v42 + 2 * v102.u32[0]);
          v104.i16[5] = *(_WORD *)(v42 + 2 * v102.u32[1]);
          v104.i16[6] = *(_WORD *)(v42 + 2 * v102.u32[2]);
          v104.i16[7] = *(_WORD *)(v42 + 2 * v102.u32[3]);
          *v72++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v58, v96, v140), v100, _H9), v104, _H10), v58), v60)));
          if (v74)
          {
            float16x8_t v105 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v96, v129), v100, v128), v104, v127);
            v155.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v96, v132), v100, v131), v104, v130), v62), v66), v62), v66)));
            v155.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(v105));
            vst2_s8(v74, v155);
            v74 += 16;
          }
          if (v73) {
            *v73++ = _D20;
          }
          v70 += 8;
        }
        while (v70 < (int)v6 - 7);
        unint64_t v106 = v6 & 0xFFFFFFF8;
      }
      _CF = v6 >= v106;
      unint64_t v107 = v6 - v106;
      if (v107 != 0 && _CF)
      {
        do
        {
          _D20.i16[0] = v71[v154];
          _H21 = v71[BYTE2(v154)];
          __asm { FCVT            S21, H21 }
          _D20.i16[1] = v71[BYTE1(v154)];
          _D22 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D20 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D20), _D22), 0), _D22)));
          _D20.i16[0] = *(_WORD *)(v43 + 2 * _D20.u32[0]);
          __asm { FCVT            S20, H20 }
          _D22.i16[0] = *(_WORD *)(v43 + 2 * _D20.u32[1]);
          __asm { FCVT            S22, H22 }
          LOWORD(_S21) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S21 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          float v112 = (float)((float)(v148 * _D22.f32[0]) + (float)(*(float *)_D20.i32 * v149)) + (float)(_S21 * v147);
          float v113 = (float)((float)(v145 * _D22.f32[0]) + (float)(*(float *)_D20.i32 * v146)) + (float)(_S21 * v144);
          *(float *)_D20.i32 = (float)((float)(v142 * _D22.f32[0]) + (float)(*(float *)_D20.i32 * v143))
                             + (float)(_S21 * v141);
          LOWORD(_S21) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _D22.i16[0] = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          _D20.i16[0] = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(*(float *)_D20.i32, 0.0), 8191.0)));
          __asm { FCVT            S23, H20 }
          *(float *)_D20.i32 = (float)((float)((float)(v151 * _S22) + (float)(v152 * _S21)) + (float)(v150 * _S23))
                             + v37;
          float v117 = v39;
          if (*(float *)_D20.i32 <= v39)
          {
            float v117 = (float)((float)((float)(v151 * _S22) + (float)(v152 * _S21)) + (float)(v150 * _S23)) + v37;
            if (*(float *)_D20.i32 < v37) {
              float v117 = (float)v26;
            }
          }
          _H20 = v71[HIBYTE(v154)];
          v72->i8[0] = llroundf(v117);
          float v72 = (int8x8_t *)((char *)v72 + 1);
          if (v74)
          {
            float v119 = (float)((float)(v38 + (float)(_S21 * v138)) + (float)(_S22 * v137)) + (float)(_S23 * v136);
            float v120 = (float)v30;
            if (v119 <= v40)
            {
              float v120 = (float)((float)(v38 + (float)(_S21 * v138)) + (float)(_S22 * v137)) + (float)(_S23 * v136);
              if (v119 < v139) {
                float v120 = (float)v29;
              }
            }
            float v121 = (float)((float)(v38 + (float)(_S21 * v135)) + (float)(_S22 * v134)) + (float)(_S23 * v133);
            *float v74 = llroundf(v120);
            float v122 = (float)v30;
            if (v121 <= v40)
            {
              float v122 = v121;
              if (v121 < v139) {
                float v122 = (float)v29;
              }
            }
            v74[1] = llroundf(v122);
            v74 += 2;
          }
          if (v73)
          {
            __asm { FCVT            S20, H20 }
            v73->i8[0] = llroundf(_S20 * 255.0);
            float v73 = (float16x4_t *)((char *)v73 + 1);
          }
          v71 += 4;
          --v107;
        }
        while (v107);
      }
      v67 += v20;
      float v65 = (int8x8_t *)((char *)v65 + v126);
      result += v21;
      uint64_t v61 = (float16x4_t *)((char *)v61 + v22);
      ++v36;
    }
    while (v36 != v41);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_444vf_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, double _D4)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(result + 20);
    unint64_t v13 = v9 + *(void *)(result + 44);
    unint64_t v14 = v10 - v9;
    uint64_t v15 = *(void *)(result + 152);
    unint64_t v16 = *(uint64_t **)(result + 136);
    uint64_t v17 = *(void **)(result + 56);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    uint64_t v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    float v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    float v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    float v25 = (float)LODWORD(a6);
    LOWORD(_D4) = *(_WORD *)(v15 + 152);
    float v26 = (float)LODWORD(_D4);
    float v27 = *(float *)(v15 + 36);
    float v28 = *(float *)(v15 + 40);
    float v29 = *(float *)(v15 + 44);
    float v30 = *(float *)(v15 + 48);
    float v31 = *(float *)(v15 + 52);
    float v32 = *(float *)(v15 + 56);
    float v33 = *(float *)(v15 + 60);
    float v34 = *(float *)(v15 + 64);
    float v35 = *(float *)(v15 + 68);
    float v36 = *(float *)(v15 + 72);
    float v37 = *(float *)(v15 + 76);
    float v38 = *(float *)(v15 + 80);
    float v39 = *(float *)(v15 + 84);
    float v40 = *(float *)(v15 + 88);
    float v41 = *(float *)(v15 + 92);
    float v42 = *(float *)(v15 + 96);
    float v43 = *(float *)(v15 + 100);
    float v44 = *(float *)(v15 + 104);
    uint64_t v45 = v15 + 164;
    uint64_t v46 = v15 + 16548;
    float v47 = *(uint64_t **)(result + 128);
    uint64_t v48 = *(void *)(result + 112);
    unint64_t v49 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
    uint64_t v50 = *(void *)(result + 36);
    uint64_t v51 = *(unsigned __int8 *)(v15 + 157);
    uint64_t result = *(unsigned __int8 *)(v15 + 156);
    uint64_t v52 = *(unsigned __int8 *)(v15 + 155);
    uint64_t v53 = *(unsigned __int8 *)(v15 + 154);
    uint64_t v54 = v47[2];
    if (v54) {
      uint64_t v55 = (unsigned char *)(v54 + v49 * v21 + v48);
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v57 = *v47;
    uint64_t v56 = v47[1];
    float16x8_t v58 = (unsigned char *)(v56 + v49 * v20 + v48);
    if (!v56) {
      float16x8_t v58 = 0;
    }
    float16x8_t v59 = (unsigned char *)(v57 + v49 * v19 + v48);
    uint64_t v60 = *v17 + v18 * v13 + 8 * v50;
    float32x2_t v61 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        uint64_t v62 = v12;
        uint64_t v63 = v60;
        float16x8_t v64 = v55;
        float v65 = v58;
        float16x8_t v66 = v59;
        do
        {
          LOWORD(_D4) = *(_WORD *)(v63 + 2 * v53);
          WORD1(_D4) = *(_WORD *)(v63 + 2 * v52);
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v61), 0), v61))));
          LOWORD(_D4) = *(_WORD *)(v45 + 2 * LODWORD(_D4));
          _H11 = *(_WORD *)(v63 + 2 * result);
          __asm
          {
            FCVT            S11, H11
            FCVT            S4, H4
          }
          _H12 = *(_WORD *)(v45 + 2 * HIDWORD(_D4));
          __asm { FCVT            S12, H12 }
          LOWORD(_S11) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S11 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          float v76 = (float)((float)(v37 * _S12) + (float)(*(float *)&_D4 * v36)) + (float)(_S11 * v38);
          float v77 = (float)((float)(v40 * _S12) + (float)(*(float *)&_D4 * v39)) + (float)(_S11 * v41);
          *(float *)&_D4 = (float)((float)(v43 * _S12) + (float)(*(float *)&_D4 * v42)) + (float)(_S11 * v44);
          LOWORD(_S11) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S12, H11 }
          LOWORD(_S11) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S13, H11 }
          LOWORD(_D4) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(*(float *)&_D4, 0.0), 8191.0)));
          __asm { FCVT            S14, H4 }
          float v81 = (float)((float)((float)(v28 * _S13) + (float)(v27 * _S12)) + (float)(v29 * _S14)) + v22;
          float v82 = v24;
          if (v81 <= v24)
          {
            float v82 = (float)((float)((float)(v28 * _S13) + (float)(v27 * _S12)) + (float)(v29 * _S14)) + v22;
            if (v81 < v22) {
              float v82 = v22;
            }
          }
          _H11 = *(_WORD *)(v63 + 2 * v51);
          *v66++ = llroundf(v82);
          if (v65)
          {
            float v84 = (float)((float)(v23 + (float)(_S12 * v30)) + (float)(_S13 * v31)) + (float)(_S14 * v32);
            float v85 = v26;
            if (v84 <= v26)
            {
              float v85 = (float)((float)(v23 + (float)(_S12 * v30)) + (float)(_S13 * v31)) + (float)(_S14 * v32);
              if (v84 < v25) {
                float v85 = v25;
              }
            }
            float v86 = (float)((float)(v23 + (float)(_S12 * v33)) + (float)(_S13 * v34)) + (float)(_S14 * v35);
            *float v65 = llroundf(v85);
            float v87 = v26;
            if (v86 <= v26)
            {
              float v87 = v86;
              if (v86 < v25) {
                float v87 = v25;
              }
            }
            v65[1] = llroundf(v87);
            v65 += 2;
          }
          if (v64)
          {
            __asm { FCVT            S4, H11 }
            *v64++ = llroundf(_S4 * 255.0);
          }
          v63 += 8;
          --v62;
        }
        while (v62);
      }
      v60 += v18;
      v59 += v19;
      v58 += v20;
      v55 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_444vf_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGhA_rgb_444vf_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v103 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 28);
  unint64_t v11 = *a1;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = v12 + v9;
  unint64_t v14 = (v10 + v10 * a2) / v11;
  uint64_t v15 = v14 + v9;
  uint64_t v16 = *((void *)a1 + 14);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *((void *)a1 + 19);
  uint64_t v19 = *((void *)a1 + 15);
  int64x2_t v20 = (uint64_t *)*((void *)a1 + 16);
  long long v21 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v22 = **((void **)a1 + 8);
  uint64_t v102 = **((void **)a1 + 7);
  uint64_t v23 = *v21;
  uint64_t v24 = v21[1];
  uint64_t v25 = v21[2];
  uint64_t v101 = *v20;
  uint64_t v27 = v20[1];
  uint64_t v26 = v20[2];
  unsigned int v28 = *(_DWORD *)(v18 + 136);
  int v114 = *(_DWORD *)(v18 + 154);
  unsigned int v29 = *(unsigned __int16 *)(v18 + 144);
  unsigned int v30 = *(unsigned __int16 *)(v18 + 146);
  unsigned int v31 = *(unsigned __int16 *)(v18 + 148);
  unsigned int v32 = *(unsigned __int16 *)(v18 + 150);
  unsigned int v33 = *(unsigned __int16 *)(v18 + 152);
  uint64_t v34 = v17 / v11 + v19;
  uint64_t v35 = v22 * v13;
  _S0 = *(float *)(v18 + 36);
  _S1 = *(float *)(v18 + 40);
  _S2 = *(float *)(v18 + 44);
  float v111 = *(float *)(v18 + 52);
  float v112 = *(float *)(v18 + 48);
  LODWORD(a7) = *(_DWORD *)(v18 + 56);
  float v109 = *(float *)(v18 + 60);
  float v110 = *(float *)&a7;
  _S16 = *(float *)(v18 + 68);
  float v108 = *(float *)(v18 + 64);
  memset(v113, 0, sizeof(v113));
  do
  {
    unsigned int v40 = 0;
    int v41 = *((unsigned __int8 *)&v114 + v7);
    do
    {
      uint64_t result = v41 + 4 * v40;
      *((unsigned char *)v113 + 8 * (((_BYTE)v7 + (v40 >> 3)) & 0x1F) + v40) = v41 + 4 * v40;
      ++v40;
    }
    while (v40 != 8);
    ++v7;
  }
  while (v7 != 4);
  if (v14 != v12)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v15 - v13;
    _S17 = (float)v28;
    float v46 = (float)v29;
    float v47 = (float)v30;
    float v48 = (float)v31;
    float v49 = (float)v32;
    float v50 = (float)v33;
    __asm
    {
      FCVT            H8, S0
      FCVT            H9, S1
      FCVT            H10, S2
    }
    _S3 = v112;
    __asm { FCVT            H3, S3 }
    short float v107 = *(short float *)&_S3;
    _S3 = v111;
    __asm { FCVT            H3, S3 }
    short float v106 = *(short float *)&_S3;
    _S3 = LODWORD(a7);
    __asm { FCVT            H3, S3 }
    short float v105 = *(short float *)&_S3;
    _S3 = v109;
    __asm { FCVT            H3, S3 }
    short float v104 = *(short float *)&_S3;
    _S3 = v108;
    __asm
    {
      FCVT            H15, S3
      FCVT            H3, S16
    }
    *(short float *)&a7 = (short float)v29;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)&a7 = (short float)v30;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)&a7 = (short float)v31;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)&a7 = (short float)v32;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)&a7 = (short float)v33;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    if (v26) {
      int v70 = (double *)(v26 + v25 * v34 + v16);
    }
    else {
      int v70 = 0;
    }
    if (v27) {
      __int16 v71 = (char *)(v27 + v24 * v34 + v16);
    }
    else {
      __int16 v71 = 0;
    }
    float v72 = (int8x8_t *)(v101 + v23 * v34 + v16);
    uint64_t result = v102 + v35 + 8 * v103;
    __asm { FCVT            H4, S17 }
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v84 = 0;
        float16x8_t v78 = v71;
        float v77 = v70;
        float v76 = v72;
        uint16x8_t v75 = (const __int16 *)result;
      }
      else
      {
        int v74 = 0;
        uint16x8_t v75 = (const __int16 *)result;
        float v76 = v72;
        float v77 = v70;
        float16x8_t v78 = v71;
        do
        {
          int16x8x4_t v116 = vld4q_s16(v75);
          v75 += 32;
          float16x8_t v79 = vmulq_n_f16((float16x8_t)v116.val[0], _H4);
          float16x8_t v80 = vmulq_n_f16((float16x8_t)v116.val[1], _H4);
          float16x8_t v81 = vmulq_n_f16((float16x8_t)v116.val[2], _H4);
          double v82 = COERCE_DOUBLE(vmovn_s16((int16x8_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v116.val[3], (float16x8_t)vdupq_n_s16(0x5BF8u)))));
          if (v77) {
            double v83 = v82;
          }
          else {
            double v83 = 0.0;
          }
          *v76++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v79, _H8), v80, _H9), v81, _H10), v65), v67)));
          if (v78)
          {
            v115.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v66, v79, v107), v80, v106), v81, v105), v68), v69), v68), v69)));
            v115.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v66, v79, v104), v80, _H15), v81, _H3)));
            vst2_s8(v78, v115);
            v78 += 16;
          }
          if (v77) {
            *v77++ = v83;
          }
          v74 += 8;
        }
        while (v74 < (int)v8 - 7);
        unint64_t v84 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v84;
      unint64_t v85 = v8 - v84;
      if (v85 != 0 && _CF)
      {
        do
        {
          _H5 = v75[v114];
          __asm { FCVT            S5, H5 }
          float v88 = _S17 * _S5;
          LOWORD(_S5) = v75[BYTE1(v114)];
          __asm { FCVT            S5, H5 }
          float v90 = _S17 * _S5;
          LOWORD(_S5) = v75[BYTE2(v114)];
          __asm { FCVT            S5, H5 }
          float v92 = _S17 * _S5;
          float v93 = (float)((float)((float)(_S1 * v90) + (float)(_S0 * v88)) + (float)(_S2 * v92)) + v46;
          float v94 = v48;
          if (v93 <= v48)
          {
            float v94 = (float)((float)((float)(_S1 * v90) + (float)(_S0 * v88)) + (float)(_S2 * v92)) + v46;
            if (v93 < v46) {
              float v94 = (float)v29;
            }
          }
          _H31 = v75[HIBYTE(v114)];
          v76->i8[0] = llroundf(v94);
          float v76 = (int8x8_t *)((char *)v76 + 1);
          if (v78)
          {
            float v96 = (float)((float)(v47 + (float)(v88 * v112)) + (float)(v90 * v111)) + (float)(v92 * v110);
            float v97 = v50;
            if (v96 <= v50)
            {
              float v97 = (float)((float)(v47 + (float)(v88 * v112)) + (float)(v90 * v111)) + (float)(v92 * v110);
              if (v96 < v49) {
                float v97 = v49;
              }
            }
            float v98 = (float)((float)(v47 + (float)(v88 * v109)) + (float)(v90 * v108)) + (float)(v92 * _S16);
            *float16x8_t v78 = llroundf(v97);
            float v99 = v50;
            if (v98 <= v50)
            {
              float v99 = v98;
              if (v98 < v49) {
                float v99 = v49;
              }
            }
            v78[1] = llroundf(v99);
            v78 += 2;
          }
          if (v77)
          {
            __asm { FCVT            S5, H31 }
            *(unsigned char *)float v77 = llroundf(_S5 * 255.0);
            float v77 = (double *)((char *)v77 + 1);
          }
          v75 += 4;
          --v85;
        }
        while (v85);
      }
      result += v22;
      float v72 = (int8x8_t *)((char *)v72 + v23);
      v71 += v24;
      int v70 = (double *)((char *)v70 + v25);
      ++v43;
    }
    while (v43 != v44);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_444vf_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_444vf_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = *(void **)(result + 56);
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    float v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    float v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v28 = (float)LODWORD(a8);
    float v29 = *(float *)(v16 + 36);
    float v30 = *(float *)(v16 + 40);
    float v31 = *(float *)(v16 + 44);
    float v32 = *(float *)(v16 + 48);
    float v33 = *(float *)(v16 + 52);
    float v34 = *(float *)(v16 + 56);
    float v35 = *(float *)(v16 + 60);
    float v36 = *(float *)(v16 + 64);
    float v37 = *(float *)(v16 + 68);
    float v38 = *(void **)(result + 128);
    uint64_t v39 = *(void *)(result + 112);
    unint64_t v40 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v41 = *(void *)(result + 36);
    uint64_t v42 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v43 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v44 = *(unsigned __int8 *)(v16 + 155);
    uint64_t result = *(unsigned __int8 *)(v16 + 154);
    uint64_t v45 = v38[2];
    if (v45) {
      float v46 = (unsigned char *)(v45 + v40 * v22 + v39);
    }
    else {
      float v46 = 0;
    }
    float v49 = v38;
    uint64_t v48 = *v38;
    uint64_t v47 = v49[1];
    _ZF = v47 == 0;
    uint64_t v51 = (unsigned char *)(v47 + v40 * v21 + v39);
    if (_ZF) {
      uint64_t v51 = 0;
    }
    uint64_t v52 = (unsigned char *)(v48 + v40 * v20 + v39);
    uint64_t v53 = *v18 + v19 * v14 + 8 * v41;
    do
    {
      if (v13)
      {
        uint64_t v54 = v13;
        uint64_t v55 = v53;
        uint64_t v56 = v46;
        uint64_t v57 = v51;
        float16x8_t v58 = v52;
        do
        {
          _H23 = *(_WORD *)(v55 + 2 * result);
          __asm { FCVT            S23, H23 }
          float v64 = v23 * _S23;
          LOWORD(_S23) = *(_WORD *)(v55 + 2 * v44);
          __asm { FCVT            S23, H23 }
          float v66 = v23 * _S23;
          LOWORD(_S23) = *(_WORD *)(v55 + 2 * v43);
          __asm { FCVT            S23, H23 }
          float v68 = v23 * _S23;
          float v69 = (float)((float)((float)(v30 * v66) + (float)(v29 * v64)) + (float)(v31 * (float)(v23 * _S23))) + v24;
          float v70 = v26;
          if (v69 <= v26)
          {
            float v70 = v69;
            if (v69 < v24) {
              float v70 = v24;
            }
          }
          _H23 = *(_WORD *)(v55 + 2 * v42);
          *v58++ = llroundf(v70);
          if (v57)
          {
            float v72 = (float)((float)(v25 + (float)(v64 * v32)) + (float)(v66 * v33)) + (float)(v68 * v34);
            float v73 = v28;
            if (v72 <= v28)
            {
              float v73 = (float)((float)(v25 + (float)(v64 * v32)) + (float)(v66 * v33)) + (float)(v68 * v34);
              if (v72 < v27) {
                float v73 = v27;
              }
            }
            float v74 = (float)((float)(v25 + (float)(v64 * v35)) + (float)(v66 * v36)) + (float)(v68 * v37);
            unsigned char *v57 = llroundf(v73);
            float v75 = v28;
            if (v74 <= v28)
            {
              float v75 = v74;
              if (v74 < v27) {
                float v75 = v27;
              }
            }
            v57[1] = llroundf(v75);
            v57 += 2;
          }
          if (v56)
          {
            __asm { FCVT            S23, H23 }
            *v56++ = llroundf(_S23 * 255.0);
          }
          v55 += 8;
          --v54;
        }
        while (v54);
      }
      v53 += v19;
      v52 += v20;
      v51 += v21;
      v46 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

int16x8_t *vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, uint16x8_t _Q7)
{
  uint64_t v11 = 0;
  unint64_t v12 = *(void *)(a1 + 20);
  uint64_t v175 = *(void *)(a1 + 36);
  uint64_t v13 = *(void *)(a1 + 44);
  uint64_t v14 = *(void *)(a1 + 28);
  unint64_t v15 = *a1;
  unint64_t v16 = v14 * a2 / v15;
  uint64_t v17 = v16 + v13;
  unint64_t v18 = (v14 + v14 * a2) / v15;
  uint64_t v19 = v18 + v13;
  uint64_t v20 = *((void *)a1 + 14);
  uint64_t v21 = *((void *)a1 + 19);
  uint64_t v22 = *((void *)a1 + 15);
  uint64_t v23 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v24 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v25 = **((void **)a1 + 8);
  uint64_t v26 = **((void **)a1 + 7);
  unint64_t v27 = *((void *)a1 + 13) * a2;
  uint64_t v178 = *v24;
  uint64_t v28 = v24[1];
  uint64_t v29 = v24[2];
  uint64_t v30 = v23[1];
  uint64_t v174 = *v23;
  uint64_t result = (int16x8_t *)v23[2];
  int v214 = *(_DWORD *)(v21 + 154);
  unsigned int v32 = *(unsigned __int16 *)(v21 + 144);
  char v33 = *(unsigned char *)(v21 + 132);
  unsigned int v34 = *(unsigned __int16 *)(v21 + 146);
  unsigned int v35 = *(unsigned __int16 *)(v21 + 148);
  unsigned int v36 = *(unsigned __int16 *)(v21 + 150);
  unsigned int v37 = *(unsigned __int16 *)(v21 + 152);
  _S15 = *(float *)(v21 + 36);
  float v212 = *(float *)(v21 + 40);
  float v211 = *(float *)(v21 + 44);
  float v189 = *(float *)(v21 + 52);
  float v190 = *(float *)(v21 + 48);
  float v187 = *(float *)(v21 + 60);
  float v188 = *(float *)(v21 + 56);
  float v185 = *(float *)(v21 + 68);
  float v186 = *(float *)(v21 + 64);
  float v210 = *(float *)(v21 + 72);
  float v209 = *(float *)(v21 + 76);
  float v208 = *(float *)(v21 + 80);
  float v207 = *(float *)(v21 + 84);
  float v206 = *(float *)(v21 + 88);
  uint64_t v39 = v27 / v15 + v22;
  uint64_t v177 = v25;
  uint64_t v40 = v25 * v17;
  float v205 = *(float *)(v21 + 92);
  float v204 = *(float *)(v21 + 96);
  float v203 = *(float *)(v21 + 100);
  float v202 = *(float *)(v21 + 104);
  float v201 = *(float *)(v21 + 108);
  float v200 = *(float *)(v21 + 112);
  float v199 = *(float *)(v21 + 116);
  float v198 = *(float *)(v21 + 120);
  memset(v213, 0, sizeof(v213));
  do
  {
    unsigned int v41 = 0;
    char v42 = *((unsigned char *)&v214 + v11);
    do
    {
      *((unsigned char *)v213 + 8 * (((_BYTE)v11 + (v41 >> 3)) & 0x1F) + v41) = v42 + 4 * v41;
      ++v41;
    }
    while (v41 != 8);
    ++v11;
  }
  while (v11 != 4);
  if (v18 != v16)
  {
    uint64_t v43 = 0;
    float v44 = (float)v32;
    float v45 = (float)v34;
    __asm { FCVT            H0, S15 }
    short float v197 = _H0;
    float v191 = (float)v36;
    _S0 = v212;
    __asm { FCVT            H0, S0 }
    short float v196 = *(short float *)&_S0;
    float v52 = (float)v37;
    uint64_t v53 = v19 - v17;
    _S0 = v211;
    __asm { FCVT            H0, S0 }
    short float v195 = *(short float *)&_S0;
    _S0 = v190;
    __asm { FCVT            H0, S0 }
    short float v184 = *(short float *)&_S0;
    uint64_t v56 = v21 + 16548;
    _S0 = v189;
    __asm { FCVT            H0, S0 }
    short float v183 = *(short float *)&_S0;
    unsigned __int8 v58 = 16 - v33;
    uint64_t v59 = v21 + 32932;
    uint64_t v60 = v21 + 164;
    _S0 = v188;
    __asm { FCVT            H0, S0 }
    short float v182 = *(short float *)&_S0;
    _S0 = v187;
    __asm { FCVT            H0, S0 }
    short float v181 = *(short float *)&_S0;
    _S0 = v186;
    __asm { FCVT            H0, S0 }
    short float v180 = *(short float *)&_S0;
    _S0 = v185;
    __asm { FCVT            H0, S0 }
    short float v179 = *(short float *)&_S0;
    _S0 = v201;
    __asm { FCVT            H0, S0 }
    short float v194 = *(short float *)&_S0;
    _S0 = v200;
    __asm { FCVT            H0, S0 }
    short float v193 = *(short float *)&_S0;
    _S0 = v199;
    __asm { FCVT            H0, S0 }
    short float v192 = *(short float *)&_S0;
    _S0 = v198;
    __asm { FCVT            H3, S0 }
    _S0 = v210;
    __asm { FCVT            H4, S0 }
    _S0 = v209;
    __asm { FCVT            H5, S0 }
    _S0 = v208;
    __asm { FCVT            H6, S0 }
    if (_CF) {
      unsigned __int8 v76 = 0;
    }
    else {
      unsigned __int8 v76 = v58;
    }
    _S0 = v207;
    __asm { FCVT            H0, S0 }
    _S1 = v206;
    __asm { FCVT            H1, S1 }
    _S2 = v205;
    __asm { FCVT            H2, S2 }
    _S7 = v204;
    __asm { FCVT            H10, S7 }
    *(short float *)v10.i16 = (short float)v32;
    float16x8_t v85 = (float16x8_t)vdupq_lane_s16(v10, 0);
    *(short float *)v10.i16 = (short float)v34;
    float16x8_t v86 = (float16x8_t)vdupq_lane_s16(v10, 0);
    *(short float *)v10.i16 = (short float)v35;
    float16x8_t v87 = (float16x8_t)vdupq_lane_s16(v10, 0);
    if (result) {
      uint64_t result = (int16x8_t *)((char *)result + 2 * v20 + v29 * v39);
    }
    else {
      uint64_t result = 0;
    }
    *(short float *)v10.i16 = (short float)v36;
    float16x8_t v88 = (float16x8_t)vdupq_lane_s16(v10, 0);
    if (v30) {
      uint64_t v89 = v30 + v28 * v39 + 2 * v20;
    }
    else {
      uint64_t v89 = 0;
    }
    *(short float *)v10.i16 = (short float)v37;
    float16x8_t v90 = (float16x8_t)vdupq_lane_s16(v10, 0);
    uint64_t v91 = v174 + v178 * v39 + 2 * v20;
    _S7 = v203;
    __asm { FCVT            H8, S7 }
    uint64_t v94 = v26 + v40 + 8 * v175;
    unsigned __int8 v95 = v76;
    uint16x8_t v96 = (uint16x8_t)vdupq_n_s16(v76);
    _S7 = v202;
    __asm { FCVT            H11, S7 }
    v99.i64[0] = 0x7000700070007000;
    v99.i64[1] = 0x7000700070007000;
    v100.i64[0] = 0x9000900090009000;
    v100.i64[1] = 0x9000900090009000;
    float v176 = _S15;
    do
    {
      if ((int)v12 < 8)
      {
        unint64_t v143 = 0;
        short float v105 = (__n128 *)v91;
        short float v104 = (__int16 *)v89;
        uint64_t v103 = result;
        uint64_t v102 = (const __int16 *)v94;
      }
      else
      {
        int v101 = 0;
        uint64_t v102 = (const __int16 *)v94;
        uint64_t v103 = result;
        short float v104 = (__int16 *)v89;
        short float v105 = (__n128 *)v91;
        do
        {
          int16x8x4_t v216 = vld4q_s16(v102);
          v102 += 32;
          if (v103)
          {
            float32x4_t v106 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
            int16x8_t v107 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)v216.val[3].i8), v106)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v216.val[3], (int8x16_t)v216.val[3], 8uLL)), v106)));
          }
          else
          {
            int16x8_t v107 = 0uLL;
          }
          uint16x8_t v108 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v216.val[0], v99), (float16x8_t)0), v100));
          uint32x4_t v109 = vmovl_high_u16(v108);
          float16x8_t v110 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v108.i8);
          v110.i16[0] = *(_WORD *)(v60 + 2 * v110.u32[0]);
          v110.i16[1] = *(_WORD *)(v60 + 2 * v110.u32[1]);
          v110.i16[2] = *(_WORD *)(v60 + 2 * v110.u32[2]);
          v110.i16[3] = *(_WORD *)(v60 + 2 * v110.u32[3]);
          v110.i16[4] = *(_WORD *)(v60 + 2 * v109.u32[0]);
          v110.i16[5] = *(_WORD *)(v60 + 2 * v109.u32[1]);
          v110.i16[6] = *(_WORD *)(v60 + 2 * v109.u32[2]);
          v110.i16[7] = *(_WORD *)(v60 + 2 * v109.u32[3]);
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v216.val[1], v99), (float16x8_t)0), v100));
          uint32x4_t v112 = vmovl_high_u16(v111);
          float16x8_t v113 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v111.i8);
          v113.i16[0] = *(_WORD *)(v60 + 2 * v113.u32[0]);
          v113.i16[1] = *(_WORD *)(v60 + 2 * v113.u32[1]);
          v113.i16[2] = *(_WORD *)(v60 + 2 * v113.u32[2]);
          v113.i16[3] = *(_WORD *)(v60 + 2 * v113.u32[3]);
          v113.i16[4] = *(_WORD *)(v60 + 2 * v112.u32[0]);
          v113.i16[5] = *(_WORD *)(v60 + 2 * v112.u32[1]);
          v113.i16[6] = *(_WORD *)(v60 + 2 * v112.u32[2]);
          v113.i16[7] = *(_WORD *)(v60 + 2 * v112.u32[3]);
          uint16x8_t v114 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v216.val[2], v99), (float16x8_t)0), v100));
          float16x8_t v115 = (float16x8_t)vmovl_high_u16(v114);
          *(void *)&long long v116 = v115.u32[2];
          *((void *)&v116 + 1) = v115.u32[3];
          long long v117 = v116;
          *(void *)&long long v116 = v115.u32[0];
          *((void *)&v116 + 1) = v115.u32[1];
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v114.i8);
          v115.i16[0] = *(_WORD *)(v60 + 2 * v118.u32[0]);
          v115.i16[1] = *(_WORD *)(v60 + 2 * v118.u32[1]);
          v115.i16[2] = *(_WORD *)(v60 + 2 * v118.u32[2]);
          v115.i16[3] = *(_WORD *)(v60 + 2 * v118.u32[3]);
          v115.i16[4] = *(_WORD *)(v60 + 2 * v116);
          v115.i16[5] = *(_WORD *)(v60 + 2 * *((void *)&v116 + 1));
          v115.i16[6] = *(_WORD *)(v60 + 2 * v117);
          v115.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v117 + 1));
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v110, v194), v113, v193), v115, v192), vmaxq_f16(vmaxq_f16(v110, v113), v115), _H3), (float16x8_t)0), v100));
          uint32x4_t v120 = vmovl_high_u16(v119);
          float16x8_t v121 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v119.i8);
          v121.i16[0] = *(_WORD *)(v56 + 2 * v121.u32[0]);
          v121.i16[1] = *(_WORD *)(v56 + 2 * v121.u32[1]);
          v121.i16[2] = *(_WORD *)(v56 + 2 * v121.u32[2]);
          v121.i16[3] = *(_WORD *)(v56 + 2 * v121.u32[3]);
          v121.i16[4] = *(_WORD *)(v56 + 2 * v120.u32[0]);
          v121.i16[5] = *(_WORD *)(v56 + 2 * v120.u32[1]);
          v121.i16[6] = *(_WORD *)(v56 + 2 * v120.u32[2]);
          v121.i16[7] = *(_WORD *)(v56 + 2 * v120.u32[3]);
          float16x8_t v122 = vmulq_f16(v110, v121);
          float16x8_t v123 = vmulq_f16(v113, v121);
          float16x8_t v124 = vmulq_f16(v115, v121);
          float16x8_t v125 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v122, _H0), v123, _H1), v124, _H2);
          float16x8_t v126 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, _H11), v123, _H8), v122, _H10);
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v122, _H4), v123, _H5), v124, _H6), (float16x8_t)0), v100));
          uint32x4_t v128 = vmovl_high_u16(v127);
          *(void *)&long long v116 = v128.u32[2];
          *((void *)&v116 + 1) = v128.u32[3];
          long long v129 = v116;
          *(void *)&long long v116 = v128.u32[0];
          *((void *)&v116 + 1) = v128.u32[1];
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v131.i16[0] = *(_WORD *)(v59 + 2 * v130.u32[0]);
          v131.i16[1] = *(_WORD *)(v59 + 2 * v130.u32[1]);
          v131.i16[2] = *(_WORD *)(v59 + 2 * v130.u32[2]);
          v131.i16[3] = *(_WORD *)(v59 + 2 * v130.u32[3]);
          v131.i16[4] = *(_WORD *)(v59 + 2 * v116);
          v131.i16[5] = *(_WORD *)(v59 + 2 * *((void *)&v116 + 1));
          v131.i16[6] = *(_WORD *)(v59 + 2 * v129);
          v131.i16[7] = *(_WORD *)(v59 + 2 * *((void *)&v129 + 1));
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v100));
          uint32x4_t v133 = vmovl_high_u16(v132);
          *(void *)&long long v116 = v133.u32[2];
          *((void *)&v116 + 1) = v133.u32[3];
          long long v134 = v116;
          *(void *)&long long v116 = v133.u32[0];
          *((void *)&v116 + 1) = v133.u32[1];
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v132.i8);
          v136.i16[0] = *(_WORD *)(v59 + 2 * v135.u32[0]);
          v136.i16[1] = *(_WORD *)(v59 + 2 * v135.u32[1]);
          v136.i16[2] = *(_WORD *)(v59 + 2 * v135.u32[2]);
          v136.i16[3] = *(_WORD *)(v59 + 2 * v135.u32[3]);
          v136.i16[4] = *(_WORD *)(v59 + 2 * v116);
          v136.i16[5] = *(_WORD *)(v59 + 2 * *((void *)&v116 + 1));
          v136.i16[6] = *(_WORD *)(v59 + 2 * v134);
          v136.i16[7] = *(_WORD *)(v59 + 2 * *((void *)&v134 + 1));
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, (float16x8_t)0), v100));
          uint32x4_t v138 = vmovl_high_u16(v137);
          *(void *)&long long v116 = v138.u32[2];
          *((void *)&v116 + 1) = v138.u32[3];
          long long v139 = v116;
          *(void *)&long long v116 = v138.u32[0];
          *((void *)&v116 + 1) = v138.u32[1];
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v137.i8);
          v141.i16[0] = *(_WORD *)(v59 + 2 * v140.u32[0]);
          v141.i16[1] = *(_WORD *)(v59 + 2 * v140.u32[1]);
          v141.i16[2] = *(_WORD *)(v59 + 2 * v140.u32[2]);
          v141.i16[3] = *(_WORD *)(v59 + 2 * v140.u32[3]);
          v141.i16[4] = *(_WORD *)(v59 + 2 * v116);
          v141.i16[5] = *(_WORD *)(v59 + 2 * *((void *)&v116 + 1));
          v141.i16[6] = *(_WORD *)(v59 + 2 * v139);
          v141.i16[7] = *(_WORD *)(v59 + 2 * *((void *)&v139 + 1));
          _Q7 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v85, v131, v197), v136, v196), v141, v195), v85), v87)), v96);
          *v105++ = (__n128)_Q7;
          if (v104)
          {
            float16x8_t v142 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v86, v131, v181), v136, v180), v141, v179);
            v215.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v86, v131, v184), v136, v183), v141, v182), v88), v90), v88), v90)), v96);
            _Q7 = vcvtq_u16_f16(v142);
            v215.val[1] = (int16x8_t)vshlq_u16(_Q7, v96);
            vst2q_s16(v104, v215);
            v104 += 16;
          }
          if (v103) {
            *v103++ = v107;
          }
          v101 += 8;
        }
        while (v101 < (int)v12 - 7);
        unint64_t v143 = v12 & 0xFFFFFFF8;
        _S15 = v176;
      }
      _CF = v12 >= v143;
      unint64_t v144 = v12 - v143;
      if (v144 != 0 && _CF)
      {
        do
        {
          _Q7.i16[0] = v102[v214];
          _H16 = v102[BYTE2(v214)];
          __asm { FCVT            S27, H16 }
          float v147 = _S27 * 8191.0;
          _Q7.i16[1] = v102[BYTE1(v214)];
          float32x2_t v148 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          *(int32x2_t *)_Q7.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q7.i8), v148), 0), v148)));
          _Q7.i16[0] = *(_WORD *)(v60 + 2 * _Q7.u32[0]);
          __asm { FCVT            S27, H7 }
          _Q7.i16[0] = *(_WORD *)(v60 + 2 * _Q7.u32[1]);
          unsigned int v150 = llroundf(fminf(fmaxf(v147, 0.0), 8191.0));
          __asm { FCVT            S28, H7 }
          _Q7.i16[0] = *(_WORD *)(v60 + 2 * v150);
          __asm { FCVT            S29, H7 }
          float v153 = (float)((float)((float)(v200 * _S28) + (float)(v201 * _S27)) + (float)(v199 * _S29))
               + (float)(v198 * fmaxf(_S27, fmaxf(_S28, _S29)));
          float v154 = 8191.0;
          if (v153 <= 8191.0)
          {
            float v154 = v153;
            if (v153 < 0.0) {
              float v154 = 0.0;
            }
          }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(v154));
          __asm { FCVT            S7, H7 }
          _S27 = _S27 * _S7;
          _S28 = _S28 * _S7;
          float v159 = _S29 * _S7;
          float v160 = (float)((float)(v209 * _S28) + (float)(_S27 * v210)) + (float)(v159 * v208);
          float v161 = (float)((float)(v206 * _S28) + (float)(_S27 * v207)) + (float)(v159 * v205);
          _S7 = (float)((float)(v203 * _S28) + (float)(_S27 * v204)) + (float)(v159 * v202);
          LOWORD(_S27) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          LOWORD(_S28) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          LOWORD(_S7) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S29, H7 }
          float v166 = (float)((float)((float)(v212 * _S28) + (float)(_S15 * _S27)) + (float)(v211 * _S29)) + v44;
          float v167 = (float)v35;
          if (v166 <= (float)v35)
          {
            float v167 = (float)((float)((float)(v212 * _S28) + (float)(_S15 * _S27)) + (float)(v211 * _S29)) + v44;
            if (v166 < v44) {
              float v167 = (float)v32;
            }
          }
          _H16 = v102[HIBYTE(v214)];
          v105->n128_u16[0] = llroundf(v167) << v95;
          short float v105 = (__n128 *)((char *)v105 + 2);
          if (v104)
          {
            float v169 = (float)((float)(v45 + (float)(_S27 * v190)) + (float)(_S28 * v189)) + (float)(_S29 * v188);
            float v170 = (float)v37;
            if (v169 <= v52)
            {
              float v170 = (float)((float)(v45 + (float)(_S27 * v190)) + (float)(_S28 * v189)) + (float)(_S29 * v188);
              if (v169 < v191) {
                float v170 = (float)v36;
              }
            }
            float v171 = (float)((float)(v45 + (float)(_S27 * v187)) + (float)(_S28 * v186)) + (float)(_S29 * v185);
            *short float v104 = llroundf(v170) << v95;
            float v172 = (float)v37;
            if (v171 <= v52)
            {
              float v172 = v171;
              if (v171 < v191) {
                float v172 = (float)v36;
              }
            }
            v104[1] = llroundf(v172) << v95;
            v104 += 2;
          }
          if (v103)
          {
            __asm { FCVT            S7, H16 }
            v103->i16[0] = llroundf(_S7 * 65535.0);
            uint64_t v103 = (int16x8_t *)((char *)v103 + 2);
          }
          v102 += 4;
          --v144;
        }
        while (v144);
      }
      v94 += v177;
      v91 += v178;
      v89 += v28;
      uint64_t result = (int16x8_t *)((char *)result + v29);
      ++v43;
    }
    while (v43 != v53);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, double _D4)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(result + 20);
    unint64_t v13 = v9 + *(void *)(result + 44);
    unint64_t v14 = v10 - v9;
    uint64_t v15 = *(void *)(result + 152);
    unint64_t v16 = *(uint64_t **)(result + 136);
    uint64_t v17 = *(void **)(result + 56);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    uint64_t v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    float v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    float v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    float v25 = (float)LODWORD(a6);
    LOWORD(_D4) = *(_WORD *)(v15 + 152);
    float v26 = (float)LODWORD(_D4);
    float v27 = *(float *)(v15 + 36);
    float v28 = *(float *)(v15 + 40);
    float v29 = *(float *)(v15 + 44);
    float v106 = *(float *)(v15 + 48);
    float v105 = *(float *)(v15 + 52);
    float v104 = *(float *)(v15 + 56);
    float v30 = *(float *)(v15 + 64);
    float v103 = *(float *)(v15 + 60);
    float v31 = *(float *)(v15 + 68);
    float v32 = *(float *)(v15 + 72);
    float v33 = *(float *)(v15 + 76);
    float v34 = *(float *)(v15 + 80);
    float v35 = *(float *)(v15 + 84);
    float v36 = *(float *)(v15 + 88);
    float v37 = *(float *)(v15 + 92);
    float v38 = *(float *)(v15 + 96);
    float v39 = *(float *)(v15 + 100);
    float v40 = *(float *)(v15 + 104);
    uint64_t v41 = v15 + 164;
    uint64_t v42 = v15 + 16548;
    uint64_t v43 = v15 + 32932;
    float v45 = *(float *)(v15 + 108);
    float v44 = *(float *)(v15 + 112);
    float v46 = *(float *)(v15 + 116);
    float v47 = *(float *)(v15 + 120);
    uint64_t v48 = *(uint64_t **)(result + 128);
    uint64_t v49 = *(void *)(result + 112);
    unint64_t v50 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
    uint64_t v51 = *(void *)(result + 36);
    unsigned int v52 = *(unsigned __int8 *)(v15 + 132);
    if (v52 >= 0x11) {
      char v53 = 0;
    }
    else {
      char v53 = 16 - v52;
    }
    uint64_t result = *(unsigned __int8 *)(v15 + 157);
    uint64_t v54 = *(unsigned __int8 *)(v15 + 156);
    uint64_t v55 = *(unsigned __int8 *)(v15 + 155);
    uint64_t v56 = *(unsigned __int8 *)(v15 + 154);
    uint64_t v57 = v48[2];
    if (v57) {
      uint64_t v58 = v57 + v50 * v21 + 2 * v49;
    }
    else {
      uint64_t v58 = 0;
    }
    uint64_t v60 = *v48;
    uint64_t v59 = v48[1];
    uint64_t v61 = v59 + v50 * v20 + 2 * v49;
    if (!v59) {
      uint64_t v61 = 0;
    }
    uint64_t v62 = v60 + v50 * v19 + 2 * v49;
    uint64_t v63 = *v17 + v18 * v13 + 8 * v51;
    char v64 = v53;
    float32x2_t v65 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        uint64_t v66 = v12;
        float16x8_t v67 = (_WORD *)v58;
        float v68 = (_WORD *)v61;
        float v69 = (_WORD *)v62;
        uint64_t v70 = v63;
        do
        {
          LOWORD(_D4) = *(_WORD *)(v70 + 2 * v56);
          WORD1(_D4) = *(_WORD *)(v70 + 2 * v55);
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v65), 0), v65))));
          LOWORD(_D4) = *(_WORD *)(v41 + 2 * LODWORD(_D4));
          _H16 = *(_WORD *)(v70 + 2 * v54);
          __asm { FCVT            S16, H16 }
          float v77 = _S16 * 8191.0;
          __asm { FCVT            S16, H4 }
          LOWORD(_D4) = *(_WORD *)(v41 + 2 * HIDWORD(_D4));
          unsigned int v79 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          __asm { FCVT            S17, H4 }
          LOWORD(_D4) = *(_WORD *)(v41 + 2 * v79);
          __asm { FCVT            S13, H4 }
          float v82 = fmaxf(_S16, fmaxf(_S17, _S13));
          float v83 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13)) + (float)(v47 * v82);
          LODWORD(_D4) = 1174403072;
          if (v83 <= 8191.0)
          {
            *(float *)&_D4 = (float)((float)((float)(v44 * _S17) + (float)(v45 * _S16)) + (float)(v46 * _S13))
                           + (float)(v47 * v82);
            if (v83 < 0.0) {
              _D4 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v42 + 2 * llroundf(*(float *)&_D4));
          __asm { FCVT            S4, H4 }
          _S16 = _S16 * _S4;
          float v87 = _S17 * _S4;
          float v88 = _S13 * _S4;
          float v89 = (float)((float)(v33 * v87) + (float)(_S16 * v32)) + (float)(v88 * v34);
          float v90 = (float)((float)(v36 * v87) + (float)(_S16 * v35)) + (float)(v88 * v37);
          _S4 = (float)((float)(v39 * v87) + (float)(_S16 * v38)) + (float)(v88 * v40);
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S13, H16 }
          LOWORD(_S16) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S4) = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S17, H4 }
          float v95 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
          float v96 = v24;
          if (v95 <= v24)
          {
            float v96 = (float)((float)((float)(v28 * _S16) + (float)(v27 * _S13)) + (float)(v29 * _S17)) + v22;
            if (v95 < v22) {
              float v96 = v22;
            }
          }
          _H15 = *(_WORD *)(v70 + 2 * result);
          *v69++ = llroundf(v96) << v64;
          if (v68)
          {
            float v98 = (float)((float)(v23 + (float)(_S13 * v106)) + (float)(_S16 * v105)) + (float)(_S17 * v104);
            float v99 = v26;
            if (v98 <= v26)
            {
              float v99 = (float)((float)(v23 + (float)(_S13 * v106)) + (float)(_S16 * v105)) + (float)(_S17 * v104);
              if (v98 < v25) {
                float v99 = v25;
              }
            }
            float v100 = (float)((float)(v23 + (float)(_S13 * v103)) + (float)(_S16 * v30)) + (float)(_S17 * v31);
            *float v68 = llroundf(v99) << v64;
            float v101 = v26;
            if (v100 <= v26)
            {
              float v101 = v100;
              if (v100 < v25) {
                float v101 = v25;
              }
            }
            v68[1] = llroundf(v101) << v64;
            v68 += 2;
          }
          if (v67)
          {
            __asm { FCVT            S4, H15 }
            *v67++ = llroundf(_S4 * 65535.0);
          }
          v70 += 8;
          --v66;
        }
        while (v66);
      }
      v63 += v18;
      v62 += v19;
      v61 += v20;
      v58 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

__int16 *vt_Copy_RGhA_TRC_Mat_TRC_xf444_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, float16x8_t _Q4)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v144 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 28);
  unint64_t v11 = *a1;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = v12 + v9;
  unint64_t v14 = (v10 + v10 * a2) / v11;
  uint64_t v15 = v14 + v9;
  uint64_t v16 = *((void *)a1 + 14);
  uint64_t v17 = *((void *)a1 + 19);
  unint64_t v18 = *((void *)a1 + 13) * a2;
  uint64_t v20 = *((void *)a1 + 15);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 16);
  long long v21 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v22 = **((void **)a1 + 8);
  uint64_t v143 = **((void **)a1 + 7);
  uint64_t v23 = v21[1];
  uint64_t v146 = *v21;
  uint64_t v24 = v21[2];
  uint64_t v26 = *v19;
  uint64_t result = (__int16 *)v19[1];
  uint64_t v27 = v19[2];
  int v175 = *(_DWORD *)(v17 + 154);
  unsigned int v28 = *(unsigned __int16 *)(v17 + 144);
  char v29 = *(unsigned char *)(v17 + 132);
  unsigned int v30 = *(unsigned __int16 *)(v17 + 146);
  unsigned int v31 = *(unsigned __int16 *)(v17 + 148);
  unsigned int v32 = *(unsigned __int16 *)(v17 + 150);
  unsigned int v33 = *(unsigned __int16 *)(v17 + 152);
  float v173 = *(float *)(v17 + 36);
  float v172 = *(float *)(v17 + 40);
  float v171 = *(float *)(v17 + 44);
  float v157 = *(float *)(v17 + 52);
  float v158 = *(float *)(v17 + 48);
  float v155 = *(float *)(v17 + 60);
  float v156 = *(float *)(v17 + 56);
  float v153 = *(float *)(v17 + 68);
  float v154 = *(float *)(v17 + 64);
  float v170 = *(float *)(v17 + 72);
  uint64_t v34 = v18 / v11 + v20;
  uint64_t v145 = v22;
  uint64_t v35 = v22 * v13;
  float v169 = *(float *)(v17 + 76);
  float v168 = *(float *)(v17 + 80);
  float v167 = *(float *)(v17 + 84);
  float v165 = *(float *)(v17 + 92);
  float v166 = *(float *)(v17 + 88);
  LODWORD(a4) = *(_DWORD *)(v17 + 96);
  _S25 = *(float *)(v17 + 104);
  float v163 = *(float *)(v17 + 100);
  float v164 = *(float *)&a4;
  _D0.i32[1] = 0;
  memset(v174, 0, sizeof(v174));
  do
  {
    unsigned int v38 = 0;
    char v39 = *((unsigned char *)&v175 + v7);
    do
    {
      *((unsigned char *)v174 + 8 * (((_BYTE)v7 + (v38 >> 3)) & 0x1F) + v38) = v39 + 4 * v38;
      ++v38;
    }
    while (v38 != 8);
    ++v7;
  }
  while (v7 != 4);
  if (v14 != v12)
  {
    uint64_t v40 = 0;
    float v41 = (float)v28;
    float v42 = (float)v30;
    _S0 = v173;
    __asm { FCVT            H0, S0 }
    short float v162 = *(short float *)&_S0;
    float v48 = (float)v32;
    float v49 = (float)v33;
    uint64_t v50 = v15 - v13;
    unsigned __int8 v51 = 16 - v29;
    uint64_t v52 = v17 + 16548;
    uint64_t v53 = v17 + 164;
    _S0 = v172;
    __asm { FCVT            H0, S0 }
    short float v161 = *(short float *)&_S0;
    _S0 = v171;
    __asm { FCVT            H0, S0 }
    short float v160 = *(short float *)&_S0;
    _S0 = v158;
    __asm { FCVT            H0, S0 }
    short float v152 = *(short float *)&_S0;
    _S0 = v157;
    __asm { FCVT            H0, S0 }
    short float v151 = *(short float *)&_S0;
    _S0 = v156;
    __asm { FCVT            H0, S0 }
    short float v150 = *(short float *)&_S0;
    _S0 = v155;
    __asm { FCVT            H0, S0 }
    short float v149 = *(short float *)&_S0;
    _S0 = v154;
    __asm { FCVT            H0, S0 }
    short float v148 = *(short float *)&_S0;
    _S0 = v153;
    __asm { FCVT            H0, S0 }
    short float v147 = *(short float *)&_S0;
    _S0 = v170;
    __asm { FCVT            H8, S0 }
    _S0 = v169;
    __asm { FCVT            H9, S0 }
    _S0 = v168;
    __asm { FCVT            H10, S0 }
    _S0 = v167;
    __asm { FCVT            H0, S0 }
    short float v159 = *(short float *)&_S0;
    _S0 = v166;
    __asm { FCVT            H11, S0 }
    _S0 = v165;
    __asm { FCVT            H12, S0 }
    if (_CF) {
      unsigned __int8 v73 = 0;
    }
    else {
      unsigned __int8 v73 = v51;
    }
    if (v27) {
      uint64_t v74 = v27 + v24 * v34 + 2 * v16;
    }
    else {
      uint64_t v74 = 0;
    }
    _D0.i32[0] = LODWORD(a4);
    __asm { FCVT            H13, S0 }
    *(float *)_D0.i32 = v163;
    __asm
    {
      FCVT            H14, S0
      FCVT            H15, S25
    }
    *(short float *)_D0.i16 = (short float)v28;
    float16x8_t v78 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v30;
    float16x8_t v79 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    *(short float *)_D0.i16 = (short float)v31;
    float16x8_t v80 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    if (_ZF) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = (__int16 *)((char *)result + 2 * v16 + v23 * v34);
    }
    *(short float *)_D0.i16 = (short float)v32;
    float16x8_t v81 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    uint64_t v82 = v26 + v146 * v34 + 2 * v16;
    *(short float *)&a4 = (short float)v33;
    float16x8_t v83 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    uint64_t v84 = v143 + v35 + 8 * v144;
    unsigned __int8 v85 = v73;
    uint16x8_t v86 = (uint16x8_t)vdupq_n_s16(v73);
    v87.i64[0] = 0x7000700070007000;
    v87.i64[1] = 0x7000700070007000;
    v88.i64[0] = 0x9000900090009000;
    v88.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v125 = 0;
        float v93 = result;
        float v92 = (int16x8_t *)v74;
        uint64_t v91 = (uint16x8_t *)v82;
        float v90 = (const __int16 *)v84;
      }
      else
      {
        int v89 = 0;
        float v90 = (const __int16 *)v84;
        uint64_t v91 = (uint16x8_t *)v82;
        float v92 = (int16x8_t *)v74;
        float v93 = result;
        do
        {
          int16x8x4_t v176 = vld4q_s16(v90);
          v90 += 32;
          if (v92)
          {
            float32x4_t v94 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
            int16x8_t v95 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)v176.val[3].i8), v94)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v176.val[3], (int8x16_t)v176.val[3], 8uLL)), v94)));
          }
          else
          {
            int16x8_t v95 = 0uLL;
          }
          uint16x8_t v96 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v176.val[0], v87), (float16x8_t)0), v88));
          float16x8_t v97 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v96.i8);
          float16x8_t v98 = (float16x8_t)vmovl_high_u16(v96);
          uint64_t v99 = v98.u32[0];
          v98.i16[0] = *(_WORD *)(v53 + 2 * v97.u32[0]);
          float v100 = (__int16 *)(v53 + 2 * v98.u32[1]);
          float v101 = (__int16 *)(v53 + 2 * v98.u32[2]);
          uint64_t v102 = (__int16 *)(v53 + 2 * v98.u32[3]);
          v98.i16[1] = *(_WORD *)(v53 + 2 * v97.u32[1]);
          v98.i16[2] = *(_WORD *)(v53 + 2 * v97.u32[2]);
          v98.i16[3] = *(_WORD *)(v53 + 2 * v97.u32[3]);
          v98.i16[4] = *(_WORD *)(v53 + 2 * v99);
          v98.i16[5] = *v100;
          v98.i16[6] = *v101;
          v98.i16[7] = *v102;
          float16x8_t v103 = vmulq_f16((float16x8_t)v176.val[2], v87);
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v176.val[1], v87), (float16x8_t)0), v88));
          uint32x4_t v105 = vmovl_high_u16(v104);
          uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v104.i8);
          v97.i16[0] = *(_WORD *)(v53 + 2 * v106.u32[0]);
          v97.i16[1] = *(_WORD *)(v53 + 2 * v106.u32[1]);
          v97.i16[2] = *(_WORD *)(v53 + 2 * v106.u32[2]);
          v97.i16[3] = *(_WORD *)(v53 + 2 * v106.u32[3]);
          v97.i16[4] = *(_WORD *)(v53 + 2 * v105.u32[0]);
          v97.i16[5] = *(_WORD *)(v53 + 2 * v105.u32[1]);
          v97.i16[6] = *(_WORD *)(v53 + 2 * v105.u32[2]);
          v97.i16[7] = *(_WORD *)(v53 + 2 * v105.u32[3]);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v103, (float16x8_t)0), v88));
          uint32x4_t v108 = vmovl_high_u16(v107);
          float16x8_t v109 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v107.i8);
          v109.i16[0] = *(_WORD *)(v53 + 2 * v109.u32[0]);
          v109.i16[1] = *(_WORD *)(v53 + 2 * v109.u32[1]);
          v109.i16[2] = *(_WORD *)(v53 + 2 * v109.u32[2]);
          v109.i16[3] = *(_WORD *)(v53 + 2 * v109.u32[3]);
          v109.i16[4] = *(_WORD *)(v53 + 2 * v108.u32[0]);
          v109.i16[5] = *(_WORD *)(v53 + 2 * v108.u32[1]);
          v109.i16[6] = *(_WORD *)(v53 + 2 * v108.u32[2]);
          v109.i16[7] = *(_WORD *)(v53 + 2 * v108.u32[3]);
          float16x8_t v110 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v98, v159), v97, _H11), v109, _H12);
          float16x8_t v111 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v109, _H15), v97, _H14), v98, _H13);
          uint16x8_t v112 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v98, _H8), v97, _H9), v109, _H10), (float16x8_t)0), v88));
          uint32x4_t v113 = vmovl_high_u16(v112);
          uint32x4_t v114 = vmovl_u16(*(uint16x4_t *)v112.i8);
          v115.i16[0] = *(_WORD *)(v52 + 2 * v114.u32[0]);
          v115.i16[1] = *(_WORD *)(v52 + 2 * v114.u32[1]);
          v115.i16[2] = *(_WORD *)(v52 + 2 * v114.u32[2]);
          v115.i16[3] = *(_WORD *)(v52 + 2 * v114.u32[3]);
          v115.i16[4] = *(_WORD *)(v52 + 2 * v113.u32[0]);
          v115.i16[5] = *(_WORD *)(v52 + 2 * v113.u32[1]);
          v115.i16[6] = *(_WORD *)(v52 + 2 * v113.u32[2]);
          v115.i16[7] = *(_WORD *)(v52 + 2 * v113.u32[3]);
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v110, (float16x8_t)0), v88));
          uint32x4_t v117 = vmovl_high_u16(v116);
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v116.i8);
          v119.i16[0] = *(_WORD *)(v52 + 2 * v118.u32[0]);
          v119.i16[1] = *(_WORD *)(v52 + 2 * v118.u32[1]);
          v119.i16[2] = *(_WORD *)(v52 + 2 * v118.u32[2]);
          v119.i16[3] = *(_WORD *)(v52 + 2 * v118.u32[3]);
          v119.i16[4] = *(_WORD *)(v52 + 2 * v117.u32[0]);
          v119.i16[5] = *(_WORD *)(v52 + 2 * v117.u32[1]);
          v119.i16[6] = *(_WORD *)(v52 + 2 * v117.u32[2]);
          v119.i16[7] = *(_WORD *)(v52 + 2 * v117.u32[3]);
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, (float16x8_t)0), v88));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          _Q4.i16[0] = *(_WORD *)(v52 + 2 * v122.u32[0]);
          _Q4.i16[1] = *(_WORD *)(v52 + 2 * v122.u32[1]);
          _Q4.i16[2] = *(_WORD *)(v52 + 2 * v122.u32[2]);
          _Q4.i16[3] = *(_WORD *)(v52 + 2 * v122.u32[3]);
          _Q4.i16[4] = *(_WORD *)(v52 + 2 * v121.u32[0]);
          _Q4.i16[5] = *(_WORD *)(v52 + 2 * v121.u32[1]);
          _Q4.i16[6] = *(_WORD *)(v52 + 2 * v121.u32[2]);
          _Q4.i16[7] = *(_WORD *)(v52 + 2 * v121.u32[3]);
          *v91++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v78, v115, v162), v119, v161), _Q4, v160), v78), v80)), v86);
          if (v93)
          {
            float16x8_t v123 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v79, v115, v149), v119, v148), _Q4, v147);
            _Q4 = (float16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v79, v115, v152), v119, v151), _Q4, v150), v81), v83), v81), v83)), v86);
            uint16x8_t v124 = vshlq_u16(vcvtq_u16_f16(v123), v86);
            vst2q_s16(v93, *(int16x8x2_t *)_Q4.i8);
            v93 += 16;
          }
          if (v92) {
            *v92++ = v95;
          }
          v89 += 8;
        }
        while (v89 < (int)v8 - 7);
        unint64_t v125 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v125;
      unint64_t v126 = v8 - v125;
      if (v126 != 0 && _CF)
      {
        do
        {
          _Q4.i16[0] = v90[v175];
          _H5 = v90[BYTE2(v175)];
          __asm { FCVT            S5, H5 }
          _Q4.i16[1] = v90[BYTE1(v175)];
          _D6 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          *(int32x2_t *)_Q4.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q4.i8), _D6), 0), _D6)));
          _Q4.i16[0] = *(_WORD *)(v53 + 2 * _Q4.u32[0]);
          __asm { FCVT            S4, H4 }
          _D6.i16[0] = *(_WORD *)(v53 + 2 * _Q4.u32[1]);
          __asm { FCVT            S6, H6 }
          LOWORD(_S5) = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_S5 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          float v131 = (float)((float)(v169 * _D6.f32[0]) + (float)(*(float *)_Q4.i32 * v170)) + (float)(_S5 * v168);
          float v132 = (float)((float)(v166 * _D6.f32[0]) + (float)(*(float *)_Q4.i32 * v167)) + (float)(_S5 * v165);
          *(float *)_Q4.i32 = (float)((float)(v163 * _D6.f32[0]) + (float)(*(float *)_Q4.i32 * v164))
                            + (float)(_S5 * _S25);
          LOWORD(_S5) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _D6.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _Q4.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_Q4.i32, 0.0), 8191.0)));
          __asm { FCVT            S7, H4 }
          *(float *)_Q4.i32 = (float)((float)((float)(v172 * _S6) + (float)(v173 * _S5)) + (float)(v171 * _S7)) + v41;
          float v136 = (float)v31;
          if (*(float *)_Q4.i32 <= (float)v31)
          {
            float v136 = (float)((float)((float)(v172 * _S6) + (float)(v173 * _S5)) + (float)(v171 * _S7)) + v41;
            if (*(float *)_Q4.i32 < v41) {
              float v136 = (float)v28;
            }
          }
          _H4 = v90[HIBYTE(v175)];
          v91->i16[0] = llroundf(v136) << v85;
          uint64_t v91 = (uint16x8_t *)((char *)v91 + 2);
          if (v93)
          {
            float v138 = (float)((float)(v42 + (float)(_S5 * v158)) + (float)(_S6 * v157)) + (float)(_S7 * v156);
            float v139 = v49;
            if (v138 <= v49)
            {
              float v139 = (float)((float)(v42 + (float)(_S5 * v158)) + (float)(_S6 * v157)) + (float)(_S7 * v156);
              if (v138 < v48) {
                float v139 = (float)v32;
              }
            }
            float v140 = (float)((float)(v42 + (float)(_S5 * v155)) + (float)(_S6 * v154)) + (float)(_S7 * v153);
            *float v93 = llroundf(v139) << v85;
            float v141 = v49;
            if (v140 <= v49)
            {
              float v141 = v140;
              if (v140 < v48) {
                float v141 = (float)v32;
              }
            }
            v93[1] = llroundf(v141) << v85;
            v93 += 2;
          }
          if (v92)
          {
            __asm { FCVT            S4, H4 }
            v92->i16[0] = llroundf(_S4 * 65535.0);
            float v92 = (int16x8_t *)((char *)v92 + 2);
          }
          v90 += 4;
          --v126;
        }
        while (v126);
      }
      v84 += v145;
      v82 += v146;
      uint64_t result = (__int16 *)((char *)result + v23);
      v74 += v24;
      ++v40;
    }
    while (v40 != v50);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_xf444_GCD(unint64_t result, uint64_t a2, float a3, float a4, float a5, float a6, double _D4)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(result + 20);
    unint64_t v13 = v9 + *(void *)(result + 44);
    unint64_t v14 = v10 - v9;
    uint64_t v15 = *(void *)(result + 152);
    uint64_t v16 = *(uint64_t **)(result + 136);
    uint64_t v17 = *(void **)(result + 56);
    uint64_t v18 = **(void **)(result + 64);
    uint64_t v19 = *v16;
    uint64_t v20 = v16[1];
    uint64_t v21 = v16[2];
    LOWORD(a3) = *(_WORD *)(v15 + 144);
    float v22 = (float)LODWORD(a3);
    LOWORD(a4) = *(_WORD *)(v15 + 146);
    float v23 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v15 + 148);
    float v24 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v15 + 150);
    float v25 = (float)LODWORD(a6);
    LOWORD(_D4) = *(_WORD *)(v15 + 152);
    float v26 = (float)LODWORD(_D4);
    float v27 = *(float *)(v15 + 36);
    float v28 = *(float *)(v15 + 40);
    float v29 = *(float *)(v15 + 44);
    float v90 = *(float *)(v15 + 48);
    float v30 = *(float *)(v15 + 52);
    float v31 = *(float *)(v15 + 56);
    float v32 = *(float *)(v15 + 60);
    float v33 = *(float *)(v15 + 64);
    float v34 = *(float *)(v15 + 68);
    float v35 = *(float *)(v15 + 72);
    float v36 = *(float *)(v15 + 76);
    float v37 = *(float *)(v15 + 80);
    float v38 = *(float *)(v15 + 84);
    float v39 = *(float *)(v15 + 88);
    float v40 = *(float *)(v15 + 92);
    float v41 = *(float *)(v15 + 96);
    float v42 = *(float *)(v15 + 100);
    float v43 = *(float *)(v15 + 104);
    uint64_t v44 = v15 + 164;
    uint64_t v45 = v15 + 16548;
    float v46 = *(uint64_t **)(result + 128);
    uint64_t v47 = *(void *)(result + 112);
    unint64_t v48 = *(void *)(result + 104) * a2 / v8 + *(void *)(result + 120);
    uint64_t v49 = *(void *)(result + 36);
    unsigned int v50 = *(unsigned __int8 *)(v15 + 132);
    if (v50 >= 0x11) {
      char v51 = 0;
    }
    else {
      char v51 = 16 - v50;
    }
    uint64_t v52 = *(unsigned __int8 *)(v15 + 157);
    uint64_t result = *(unsigned __int8 *)(v15 + 156);
    uint64_t v53 = *(unsigned __int8 *)(v15 + 155);
    uint64_t v54 = *(unsigned __int8 *)(v15 + 154);
    uint64_t v55 = v46[2];
    if (v55) {
      uint64_t v56 = v55 + v48 * v21 + 2 * v47;
    }
    else {
      uint64_t v56 = 0;
    }
    uint64_t v58 = *v46;
    uint64_t v57 = v46[1];
    uint64_t v59 = v57 + v48 * v20 + 2 * v47;
    if (!v57) {
      uint64_t v59 = 0;
    }
    uint64_t v60 = v58 + v48 * v19 + 2 * v47;
    uint64_t v61 = *v17 + v18 * v13 + 8 * v49;
    char v62 = v51;
    float32x2_t v63 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v12)
      {
        uint64_t v64 = v12;
        uint64_t v65 = v61;
        uint64_t v66 = (_WORD *)v56;
        float16x8_t v67 = (_WORD *)v59;
        float v68 = (_WORD *)v60;
        do
        {
          LOWORD(_D4) = *(_WORD *)(v65 + 2 * v54);
          WORD1(_D4) = *(_WORD *)(v65 + 2 * v53);
          _D4 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D4), v63), 0), v63))));
          LOWORD(_D4) = *(_WORD *)(v44 + 2 * LODWORD(_D4));
          _H9 = *(_WORD *)(v65 + 2 * result);
          __asm
          {
            FCVT            S9, H9
            FCVT            S4, H4
          }
          _H12 = *(_WORD *)(v44 + 2 * HIDWORD(_D4));
          __asm { FCVT            S12, H12 }
          LOWORD(_S9) = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(_S9 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          float v78 = (float)((float)(v36 * _S12) + (float)(*(float *)&_D4 * v35)) + (float)(_S9 * v37);
          float v79 = (float)((float)(v39 * _S12) + (float)(*(float *)&_D4 * v38)) + (float)(_S9 * v40);
          *(float *)&_D4 = (float)((float)(v42 * _S12) + (float)(*(float *)&_D4 * v41)) + (float)(_S9 * v43);
          LOWORD(_S9) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S13, H9 }
          LOWORD(_S9) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S14, H9 }
          LOWORD(_D4) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(*(float *)&_D4, 0.0), 8191.0)));
          __asm { FCVT            S15, H4 }
          float v83 = (float)((float)((float)(v28 * _S14) + (float)(v27 * _S13)) + (float)(v29 * _S15)) + v22;
          *(float *)&_D4 = v24;
          if (v83 <= v24)
          {
            *(float *)&_D4 = (float)((float)((float)(v28 * _S14) + (float)(v27 * _S13)) + (float)(v29 * _S15)) + v22;
            if (v83 < v22) {
              *(float *)&_D4 = v22;
            }
          }
          _H12 = *(_WORD *)(v65 + 2 * v52);
          *v68++ = llroundf(*(float *)&_D4) << v62;
          if (v67)
          {
            float v85 = (float)((float)(v23 + (float)(_S13 * v90)) + (float)(_S14 * v30)) + (float)(_S15 * v31);
            float v86 = v26;
            if (v85 <= v26)
            {
              float v86 = (float)((float)(v23 + (float)(_S13 * v90)) + (float)(_S14 * v30)) + (float)(_S15 * v31);
              if (v85 < v25) {
                float v86 = v25;
              }
            }
            float v87 = (float)((float)(v23 + (float)(_S13 * v32)) + (float)(_S14 * v33)) + (float)(_S15 * v34);
            *float16x8_t v67 = llroundf(v86) << v62;
            float v88 = v26;
            if (v87 <= v26)
            {
              float v88 = v87;
              if (v87 < v25) {
                float v88 = v25;
              }
            }
            v67[1] = llroundf(v88) << v62;
            v67 += 2;
          }
          if (v66)
          {
            __asm { FCVT            S4, H12 }
            *v66++ = llroundf(_S4 * 65535.0);
          }
          v65 += 8;
          --v64;
        }
        while (v64);
      }
      v61 += v18;
      v60 += v19;
      v59 += v20;
      v56 += v21;
      ++v11;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_xf444_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGhA_rgb_xf444_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v107 = *(void *)(a1 + 36);
  uint64_t v9 = *(void *)(a1 + 44);
  uint64_t v10 = *(void *)(a1 + 28);
  unint64_t v11 = *a1;
  unint64_t v12 = v10 * a2 / v11;
  uint64_t v13 = v12 + v9;
  unint64_t v14 = (v10 + v10 * a2) / v11;
  uint64_t v15 = v14 + v9;
  uint64_t v16 = *((void *)a1 + 14);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *((void *)a1 + 19);
  uint64_t v19 = *((void *)a1 + 15);
  int64x2_t v20 = (uint64_t *)*((void *)a1 + 16);
  long long v21 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v22 = **((void **)a1 + 8);
  uint64_t v106 = **((void **)a1 + 7);
  uint64_t v23 = *v21;
  uint64_t v24 = v21[1];
  uint64_t v25 = v21[2];
  uint64_t v105 = *v20;
  uint64_t v27 = v20[1];
  uint64_t v26 = v20[2];
  unsigned int v28 = *(_DWORD *)(v18 + 136);
  int v116 = *(_DWORD *)(v18 + 154);
  unsigned int v29 = *(unsigned __int16 *)(v18 + 144);
  unsigned int v30 = *(unsigned __int8 *)(v18 + 132);
  unsigned int v31 = *(unsigned __int16 *)(v18 + 146);
  unsigned int v32 = *(unsigned __int16 *)(v18 + 148);
  unsigned int v33 = *(unsigned __int16 *)(v18 + 150);
  unsigned int v34 = *(unsigned __int16 *)(v18 + 152);
  uint64_t v35 = v17 / v11 + v19;
  uint64_t v104 = v22 * v13;
  _S0 = *(float *)(v18 + 36);
  _S1 = *(float *)(v18 + 40);
  _S2 = *(float *)(v18 + 44);
  float v113 = *(float *)(v18 + 52);
  float v114 = *(float *)(v18 + 48);
  LODWORD(a7) = *(_DWORD *)(v18 + 56);
  float v111 = *(float *)(v18 + 60);
  float v112 = *(float *)&a7;
  _S16 = *(float *)(v18 + 68);
  float v110 = *(float *)(v18 + 64);
  memset(v115, 0, sizeof(v115));
  do
  {
    unsigned int v40 = 0;
    uint64_t result = *((unsigned __int8 *)&v116 + v7);
    do
    {
      *((unsigned char *)v115 + 8 * (((_BYTE)v7 + (v40 >> 3)) & 0x1F) + v40) = result + 4 * v40;
      ++v40;
    }
    while (v40 != 8);
    ++v7;
  }
  while (v7 != 4);
  if (v14 != v12)
  {
    uint64_t v42 = 0;
    uint64_t v43 = v15 - v13;
    _S17 = (float)v28;
    float v45 = (float)v29;
    float v46 = (float)v31;
    float v47 = (float)v32;
    float v48 = (float)v33;
    float v49 = (float)v34;
    __asm
    {
      FCVT            H8, S0
      FCVT            H9, S1
      FCVT            H10, S2
    }
    _S3 = v114;
    __asm { FCVT            H6, S3 }
    _S3 = v113;
    __asm { FCVT            H7, S3 }
    _S3 = LODWORD(a7);
    __asm { FCVT            H3, S3 }
    short float v109 = *(short float *)&_S3;
    _S3 = v111;
    __asm { FCVT            H3, S3 }
    short float v108 = *(short float *)&_S3;
    _S3 = v110;
    __asm
    {
      FCVT            H15, S3
      FCVT            H3, S16
    }
    *(short float *)&a7 = (short float)v29;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)&a7 = (short float)v31;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)&a7 = (short float)v32;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)&a7 = (short float)v33;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    *(short float *)&a7 = (short float)v34;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    if (v30 >= 0x11) {
      unsigned __int8 v71 = 0;
    }
    else {
      unsigned __int8 v71 = 16 - v30;
    }
    if (v26) {
      uint64_t v72 = v26 + v25 * v35 + 2 * v16;
    }
    else {
      uint64_t v72 = 0;
    }
    if (v27) {
      uint64_t v73 = v27 + v24 * v35 + 2 * v16;
    }
    else {
      uint64_t v73 = 0;
    }
    uint64_t v74 = v105 + v23 * v35 + 2 * v16;
    uint64_t result = v106 + v104 + 8 * v107;
    __asm { FCVT            H4, S17 }
    uint16x8_t v76 = (uint16x8_t)vdupq_n_s16(v71);
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v87 = 0;
        float16x8_t v81 = (__int16 *)v73;
        float16x8_t v80 = (int16x8_t *)v72;
        float v79 = (uint16x8_t *)v74;
        float v78 = (const __int16 *)result;
      }
      else
      {
        int v77 = 0;
        float v78 = (const __int16 *)result;
        float v79 = (uint16x8_t *)v74;
        float16x8_t v80 = (int16x8_t *)v72;
        float16x8_t v81 = (__int16 *)v73;
        do
        {
          int16x8x4_t v118 = vld4q_s16(v78);
          v78 += 32;
          if (v80)
          {
            float32x4_t v82 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
            int16x8_t v83 = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)v118.val[3].i8), v82)), (int16x8_t)vcvtq_u32_f32(vmulq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v118.val[3], (int8x16_t)v118.val[3], 8uLL)), v82)));
          }
          else
          {
            int16x8_t v83 = 0uLL;
          }
          float16x8_t v84 = vmulq_n_f16((float16x8_t)v118.val[0], _H4);
          float16x8_t v85 = vmulq_n_f16((float16x8_t)v118.val[1], _H4);
          float16x8_t v86 = vmulq_n_f16((float16x8_t)v118.val[2], _H4);
          *v79++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v66, v84, _H8), v85, _H9), v86, _H10), v66), v68)), v76);
          if (v81)
          {
            v117.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v84, _H6), v85, _H7), v86, v109), v69), v70), v69), v70)), v76);
            v117.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v84, v108), v85, _H15), v86, _H3)), v76);
            vst2q_s16(v81, v117);
            v81 += 16;
          }
          if (v80) {
            *v80++ = v83;
          }
          v77 += 8;
        }
        while (v77 < (int)v8 - 7);
        unint64_t v87 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v87;
      unint64_t v88 = v8 - v87;
      if (v88 != 0 && _CF)
      {
        do
        {
          _H5 = v78[v116];
          __asm { FCVT            S5, H5 }
          float v91 = _S17 * _S5;
          LOWORD(_S5) = v78[BYTE1(v116)];
          __asm { FCVT            S5, H5 }
          float v93 = _S17 * _S5;
          LOWORD(_S5) = v78[BYTE2(v116)];
          __asm { FCVT            S5, H5 }
          float v95 = _S17 * _S5;
          float v96 = (float)((float)((float)(_S1 * v93) + (float)(_S0 * v91)) + (float)(_S2 * v95)) + v45;
          float v97 = v47;
          if (v96 <= v47)
          {
            float v97 = (float)((float)((float)(_S1 * v93) + (float)(_S0 * v91)) + (float)(_S2 * v95)) + v45;
            if (v96 < v45) {
              float v97 = (float)v29;
            }
          }
          _H31 = v78[HIBYTE(v116)];
          v79->i16[0] = llroundf(v97) << v71;
          float v79 = (uint16x8_t *)((char *)v79 + 2);
          if (v81)
          {
            float v99 = (float)((float)(v46 + (float)(v91 * v114)) + (float)(v93 * v113)) + (float)(v95 * v112);
            float v100 = v49;
            if (v99 <= v49)
            {
              float v100 = (float)((float)(v46 + (float)(v91 * v114)) + (float)(v93 * v113)) + (float)(v95 * v112);
              if (v99 < v48) {
                float v100 = v48;
              }
            }
            float v101 = (float)((float)(v46 + (float)(v91 * v111)) + (float)(v93 * v110)) + (float)(v95 * _S16);
            *float16x8_t v81 = llroundf(v100) << v71;
            float v102 = v49;
            if (v101 <= v49)
            {
              float v102 = v101;
              if (v101 < v48) {
                float v102 = v48;
              }
            }
            v81[1] = llroundf(v102) << v71;
            v81 += 2;
          }
          if (v80)
          {
            __asm { FCVT            S5, H31 }
            v80->i16[0] = llroundf(_S5 * 65535.0);
            float16x8_t v80 = (int16x8_t *)((char *)v80 + 2);
          }
          v78 += 4;
          --v88;
        }
        while (v88);
      }
      result += v22;
      v74 += v23;
      v73 += v24;
      v72 += v25;
      ++v42;
    }
    while (v42 != v43);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_xf444_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_xf444_GCD(unint64_t result, uint64_t a2, double a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(result + 20);
    unint64_t v14 = v10 + *(void *)(result + 44);
    unint64_t v15 = v11 - v10;
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(uint64_t **)(result + 136);
    uint64_t v18 = *(void **)(result + 56);
    uint64_t v19 = **(void **)(result + 64);
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    float v23 = (float)*(unsigned int *)(v16 + 136);
    LOWORD(a4) = *(_WORD *)(v16 + 144);
    float v24 = (float)LODWORD(a4);
    LOWORD(a5) = *(_WORD *)(v16 + 146);
    float v25 = (float)LODWORD(a5);
    LOWORD(a6) = *(_WORD *)(v16 + 148);
    float v26 = (float)LODWORD(a6);
    LOWORD(a7) = *(_WORD *)(v16 + 150);
    float v27 = (float)LODWORD(a7);
    LOWORD(a8) = *(_WORD *)(v16 + 152);
    float v28 = (float)LODWORD(a8);
    float v29 = *(float *)(v16 + 36);
    float v30 = *(float *)(v16 + 40);
    float v31 = *(float *)(v16 + 44);
    float v32 = *(float *)(v16 + 48);
    float v33 = *(float *)(v16 + 52);
    float v34 = *(float *)(v16 + 56);
    float v35 = *(float *)(v16 + 60);
    float v36 = *(float *)(v16 + 64);
    float v37 = *(float *)(v16 + 68);
    float v38 = *(void **)(result + 128);
    uint64_t v39 = *(void *)(result + 112);
    unint64_t v40 = *(void *)(result + 104) * a2 / v9 + *(void *)(result + 120);
    uint64_t v41 = *(void *)(result + 36);
    unsigned int v42 = *(unsigned __int8 *)(v16 + 132);
    if (v42 >= 0x11) {
      char v43 = 0;
    }
    else {
      char v43 = 16 - v42;
    }
    uint64_t v44 = *(unsigned __int8 *)(v16 + 157);
    uint64_t v45 = *(unsigned __int8 *)(v16 + 156);
    uint64_t v46 = *(unsigned __int8 *)(v16 + 155);
    uint64_t result = *(unsigned __int8 *)(v16 + 154);
    uint64_t v47 = v38[2];
    if (v47) {
      uint64_t v48 = v47 + v40 * v22 + 2 * v39;
    }
    else {
      uint64_t v48 = 0;
    }
    char v51 = v38;
    uint64_t v50 = *v38;
    uint64_t v49 = v51[1];
    _ZF = v49 == 0;
    uint64_t v53 = v49 + v40 * v21 + 2 * v39;
    if (_ZF) {
      uint64_t v53 = 0;
    }
    uint64_t v54 = v50 + v40 * v20 + 2 * v39;
    uint64_t v55 = *v18 + v19 * v14 + 8 * v41;
    char v56 = v43;
    do
    {
      if (v13)
      {
        uint64_t v57 = v13;
        uint64_t v58 = v55;
        uint64_t v59 = (_WORD *)v48;
        uint64_t v60 = (_WORD *)v53;
        uint64_t v61 = (_WORD *)v54;
        do
        {
          _H24 = *(_WORD *)(v58 + 2 * result);
          __asm { FCVT            S24, H24 }
          float v67 = v23 * _S24;
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * v46);
          __asm { FCVT            S24, H24 }
          float v69 = v23 * _S24;
          LOWORD(_S24) = *(_WORD *)(v58 + 2 * v45);
          __asm { FCVT            S24, H24 }
          float v71 = v23 * _S24;
          float v72 = (float)((float)((float)(v30 * v69) + (float)(v29 * v67)) + (float)(v31 * (float)(v23 * _S24))) + v24;
          float v73 = v26;
          if (v72 <= v26)
          {
            float v73 = v72;
            if (v72 < v24) {
              float v73 = v24;
            }
          }
          _H24 = *(_WORD *)(v58 + 2 * v44);
          *v61++ = llroundf(v73) << v56;
          if (v60)
          {
            float v75 = (float)((float)(v25 + (float)(v67 * v32)) + (float)(v69 * v33)) + (float)(v71 * v34);
            float v76 = v28;
            if (v75 <= v28)
            {
              float v76 = (float)((float)(v25 + (float)(v67 * v32)) + (float)(v69 * v33)) + (float)(v71 * v34);
              if (v75 < v27) {
                float v76 = v27;
              }
            }
            float v77 = (float)((float)(v25 + (float)(v67 * v35)) + (float)(v69 * v36)) + (float)(v71 * v37);
            *uint64_t v60 = llroundf(v76) << v56;
            float v78 = v28;
            if (v77 <= v28)
            {
              float v78 = v77;
              if (v77 < v27) {
                float v78 = v27;
              }
            }
            v60[1] = llroundf(v78) << v56;
            v60 += 2;
          }
          if (v59)
          {
            __asm { FCVT            S24, H24 }
            *v59++ = llroundf(_S24 * 65535.0);
          }
          v58 += 8;
          --v57;
        }
        while (v57);
      }
      v55 += v19;
      v54 += v20;
      v53 += v21;
      v48 += v22;
      ++v12;
    }
    while (v12 != v15);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

unsigned char *vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, __n128 _Q5)
{
  char v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = *(void *)(a1 + 20);
  uint64_t v166 = *(void *)(a1 + 36);
  uint64_t v11 = *(void *)(a1 + 44);
  uint64_t v12 = *(void *)(a1 + 28);
  unint64_t v13 = *a1;
  unint64_t v14 = v12 * a2 / v13;
  uint64_t v15 = v14 + v11;
  unint64_t v16 = (v12 + v12 * a2) / v13;
  uint64_t v17 = v16 + v11;
  uint64_t v18 = *((void *)a1 + 14);
  uint64_t v19 = *((void *)a1 + 19);
  uint64_t v20 = *((void *)a1 + 15);
  unint64_t v21 = *((void *)a1 + 13) * a2;
  uint64_t v22 = **((void **)a1 + 8);
  uint64_t v23 = **((void **)a1 + 7);
  uint64_t v24 = **((void **)a1 + 17);
  uint64_t v25 = **((void **)a1 + 16);
  uint64_t v26 = *(unsigned __int8 *)(v19 + 154);
  v189[0] = *(unsigned char *)(v19 + 154);
  uint64_t v27 = *(unsigned __int8 *)(v19 + 155);
  v189[1] = *(unsigned char *)(v19 + 155);
  uint64_t v28 = *(unsigned __int8 *)(v19 + 156);
  v189[2] = *(unsigned char *)(v19 + 156);
  uint64_t v29 = *(unsigned __int8 *)(v19 + 157);
  v189[3] = *(unsigned char *)(v19 + 157);
  uint64_t v175 = *(unsigned __int8 *)(v19 + 158);
  uint64_t v176 = v22;
  v188[0] = *(unsigned char *)(v19 + 158);
  uint64_t v174 = *(unsigned __int8 *)(v19 + 159);
  v188[1] = *(unsigned char *)(v19 + 159);
  uint64_t v173 = *(unsigned __int8 *)(v19 + 160);
  v188[2] = *(unsigned char *)(v19 + 160);
  uint64_t v172 = *(unsigned __int8 *)(v19 + 161);
  v188[3] = *(unsigned char *)(v19 + 161);
  _S23 = *(float *)(v19 + 72);
  _S24 = *(float *)(v19 + 76);
  _S25 = *(float *)(v19 + 80);
  _S29 = *(float *)(v19 + 84);
  _S31 = *(float *)(v19 + 88);
  uint64_t v35 = v21 / v13 + v20;
  uint64_t v36 = v22 * v15;
  float v183 = *(float *)(v19 + 96);
  float v184 = *(float *)(v19 + 92);
  uint64_t v37 = v24;
  uint64_t v38 = v24 * v35;
  float v181 = *(float *)(v19 + 104);
  float v182 = *(float *)(v19 + 100);
  float v179 = *(float *)(v19 + 112);
  float v180 = *(float *)(v19 + 108);
  float v177 = *(float *)(v19 + 120);
  float v178 = *(float *)(v19 + 116);
  memset(v187, 0, sizeof(v187));
  long long v185 = 0u;
  long long v186 = 0u;
  uint64_t result = v189;
  do
  {
    unsigned int v40 = 0;
    char v41 = v189[v9];
    char v42 = v188[v9];
    do
    {
      *((unsigned char *)v187 + 8 * ((v8 + v40) >> 3) + v40) = v41 + 4 * v40;
      *(unsigned char *)(((unint64_t)&v185 + ((v42 + 4 * v40) & 0xF8)) | (v42 + 4 * (_BYTE)v40) & 7) = v8 + v40;
      ++v40;
    }
    while (v40 != 8);
    ++v9;
    v8 += 8;
  }
  while (v9 != 4);
  if (v16 != v14)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v17 - v15;
    uint64_t v45 = v19 + 16548;
    uint64_t result = (unsigned char *)(v19 + 164);
    _S0 = v180;
    __asm { FCVT            H8, S0 }
    _S0 = v179;
    __asm { FCVT            H9, S0 }
    _S0 = v178;
    __asm { FCVT            H10, S0 }
    uint64_t v56 = v19 + 32932;
    _S0 = v177;
    __asm
    {
      FCVT            H11, S0
      FCVT            H12, S23
      FCVT            H13, S24
      FCVT            H14, S25
      FCVT            H15, S29
      FCVT            H0, S31
    }
    uint64_t v64 = v25 + v38 + 4 * v18;
    _S2 = v183;
    _S1 = v184;
    __asm
    {
      FCVT            H1, S1
      FCVT            H2, S2
    }
    uint64_t v69 = v23 + v36 + 8 * v166;
    _S4 = v181;
    _S3 = v182;
    __asm
    {
      FCVT            H3, S3
      FCVT            H4, S4
    }
    uint64_t v165 = v29;
    uint64_t v163 = v27;
    uint64_t v164 = v28;
    uint64_t v162 = v26;
    v74.i64[0] = 0x7000700070007000;
    v74.i64[1] = 0x7000700070007000;
    v75.i64[0] = 0x9000900090009000;
    v75.i64[1] = 0x9000900090009000;
    float v170 = _S24;
    float v171 = _S23;
    float v168 = _S29;
    float v169 = _S25;
    float v167 = _S31;
    do
    {
      if ((int)v10 < 8)
      {
        unint64_t v126 = 0;
        uint64_t v80 = v64;
        float v79 = (const __int16 *)v69;
      }
      else
      {
        int v76 = 0;
        int8x8_t v77 = *(int8x8_t *)((char *)&v185 + 8);
        int8x8_t v78 = (int8x8_t)v185;
        float v79 = (const __int16 *)v69;
        uint64_t v80 = v64;
        int8x8_t v82 = *(int8x8_t *)((char *)&v186 + 8);
        int8x8_t v81 = (int8x8_t)v186;
        do
        {
          int16x8x4_t v190 = vld4q_s16(v79);
          v79 += 32;
          uint16x8_t v83 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v190.val[0], v74), (float16x8_t)0), v75));
          uint32x4_t v84 = vmovl_high_u16(v83);
          float16x8_t v85 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v83.i8);
          v85.i16[0] = *(_WORD *)&result[2 * v85.u32[0]];
          uint64_t v86 = v84.u32[1];
          unint64_t v87 = (__int16 *)&result[2 * v84.u32[0]];
          uint64_t v88 = v84.u32[3];
          int v89 = (__int16 *)&result[2 * v84.u32[2]];
          uint16x8_t v90 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v190.val[1], v74), (float16x8_t)0), v75));
          float16x8_t v91 = (float16x8_t)vmovl_high_u16(v90);
          *(void *)&long long v92 = v91.u32[2];
          *((void *)&v92 + 1) = v91.u32[3];
          long long v93 = v92;
          *(void *)&long long v92 = v91.u32[0];
          *((void *)&v92 + 1) = v91.u32[1];
          uint32x4_t v94 = vmovl_u16(*(uint16x4_t *)v90.i8);
          v91.i16[0] = *(_WORD *)&result[2 * v94.u32[0]];
          v85.i16[1] = *(_WORD *)&result[2 * v85.u32[1]];
          v85.i16[2] = *(_WORD *)&result[2 * v85.u32[2]];
          v91.i16[1] = *(_WORD *)&result[2 * v94.u32[1]];
          v85.i16[3] = *(_WORD *)&result[2 * v85.u32[3]];
          v91.i16[2] = *(_WORD *)&result[2 * v94.u32[2]];
          v91.i16[3] = *(_WORD *)&result[2 * v94.u32[3]];
          uint16x8_t v95 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v190.val[2], v74), (float16x8_t)0), v75));
          uint32x4_t v96 = vmovl_high_u16(v95);
          v85.i16[4] = *v87;
          uint32x4_t v97 = vmovl_u16(*(uint16x4_t *)v95.i8);
          v91.i16[4] = *(_WORD *)&result[2 * v92];
          v98.i16[0] = *(_WORD *)&result[2 * v97.u32[0]];
          v85.i16[5] = *(_WORD *)&result[2 * v86];
          v91.i16[5] = *(_WORD *)&result[2 * *((void *)&v92 + 1)];
          v85.i16[6] = *v89;
          v91.i16[6] = *(_WORD *)&result[2 * v93];
          v98.i16[1] = *(_WORD *)&result[2 * v97.u32[1]];
          v85.i16[7] = *(_WORD *)&result[2 * v88];
          v98.i16[2] = *(_WORD *)&result[2 * v97.u32[2]];
          v98.i16[3] = *(_WORD *)&result[2 * v97.u32[3]];
          v91.i16[7] = *(_WORD *)&result[2 * *((void *)&v93 + 1)];
          v98.i16[4] = *(_WORD *)&result[2 * v96.u32[0]];
          v98.i16[5] = *(_WORD *)&result[2 * v96.u32[1]];
          v98.i16[6] = *(_WORD *)&result[2 * v96.u32[2]];
          v98.i16[7] = *(_WORD *)&result[2 * v96.u32[3]];
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v85, _H8), v91, _H9), v98, _H10), vmaxq_f16(vmaxq_f16(v85, v91), v98), _H11), (float16x8_t)0), v75));
          uint32x4_t v100 = vmovl_high_u16(v99);
          float16x8_t v101 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v99.i8);
          v101.i16[0] = *(_WORD *)(v45 + 2 * v101.u32[0]);
          v101.i16[1] = *(_WORD *)(v45 + 2 * v101.u32[1]);
          v101.i16[2] = *(_WORD *)(v45 + 2 * v101.u32[2]);
          v101.i16[3] = *(_WORD *)(v45 + 2 * v101.u32[3]);
          v101.i16[4] = *(_WORD *)(v45 + 2 * v100.u32[0]);
          v101.i16[5] = *(_WORD *)(v45 + 2 * v100.u32[1]);
          v101.i16[6] = *(_WORD *)(v45 + 2 * v100.u32[2]);
          v101.i16[7] = *(_WORD *)(v45 + 2 * v100.u32[3]);
          float16x8_t v102 = vmulq_f16(v85, v101);
          float16x8_t v103 = vmulq_f16(v91, v101);
          float16x8_t v104 = vmulq_f16(v98, v101);
          float16x8_t v105 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v102, _H15), v103, _H0), v104, _H1);
          float16x8_t v106 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v104, _H4), v103, _H3), v102, _H2);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v102, _H12), v103, _H13), v104, _H14), (float16x8_t)0), v75));
          float16x8_t v108 = (float16x8_t)vmovl_high_u16(v107);
          *(void *)&long long v92 = v108.u32[2];
          *((void *)&v92 + 1) = v108.u32[3];
          long long v109 = v92;
          *(void *)&long long v92 = v108.u32[0];
          uint32x4_t v110 = vmovl_u16(*(uint16x4_t *)v107.i8);
          v108.i16[0] = *(_WORD *)(v56 + 2 * v110.u32[0]);
          float v111 = (__int16 *)(v56 + 2 * v110.u32[2]);
          uint64_t v112 = *((void *)&v109 + 1);
          float v113 = (__int16 *)(v56 + 2 * v110.u32[1]);
          float v114 = (__int16 *)(v56 + 2 * v109);
          float16x8_t v115 = (__int16 *)(v56 + 2 * v110.u32[3]);
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v105, (float16x8_t)0), v75));
          uint32x4_t v117 = vmovl_high_u16(v116);
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v116.i8);
          float16x8_t v119 = (__int16 *)(v56 + 2 * v108.u32[1]);
          uint16x8_t v120 = (__int16 *)(v56 + 2 * v112);
          v98.i16[0] = *(_WORD *)(v56 + 2 * v118.u32[0]);
          uint32x4_t v121 = (__int16 *)(v56 + 2 * v118.u32[3]);
          v108.i16[1] = *v113;
          v108.i16[2] = *v111;
          v98.i16[1] = *(_WORD *)(v56 + 2 * v118.u32[1]);
          v98.i16[2] = *(_WORD *)(v56 + 2 * v118.u32[2]);
          v108.i16[3] = *v115;
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v106, (float16x8_t)0), v75));
          uint32x4_t v123 = vmovl_high_u16(v122);
          v98.i16[3] = *v121;
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v108.i16[4] = *(_WORD *)(v56 + 2 * v92);
          v105.i16[0] = *(_WORD *)(v56 + 2 * v124.u32[0]);
          v98.i16[4] = *(_WORD *)(v56 + 2 * v117.u32[0]);
          v108.i16[5] = *v119;
          v98.i16[5] = *(_WORD *)(v56 + 2 * v117.u32[1]);
          v105.i16[1] = *(_WORD *)(v56 + 2 * v124.u32[1]);
          v108.i16[6] = *v114;
          v105.i16[2] = *(_WORD *)(v56 + 2 * v124.u32[2]);
          v98.i16[6] = *(_WORD *)(v56 + 2 * v117.u32[2]);
          v108.i16[7] = *v120;
          v105.i16[3] = *(_WORD *)(v56 + 2 * v124.u32[3]);
          v105.i16[4] = *(_WORD *)(v56 + 2 * v123.u32[0]);
          v98.i16[7] = *(_WORD *)(v56 + 2 * v117.u32[3]);
          v105.i16[5] = *(_WORD *)(v56 + 2 * v123.u32[1]);
          v105.i16[6] = *(_WORD *)(v56 + 2 * v123.u32[2]);
          v105.i16[7] = *(_WORD *)(v56 + 2 * v123.u32[3]);
          float16x8_t v125 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          v190.val[0] = (int16x8_t)vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, (float16x8_t)0), v125)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v98, (float16x8_t)0), v125)));
          v190.val[1] = (int16x8_t)vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v105, (float16x8_t)0), v125)), (int8x16_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v190.val[3], v125)));
          _Q5.n128_u64[0] = (unint64_t)vqtbl2_s8(*(int8x16x2_t *)v190.val[0].i8, v78);
          *(int8x8_t *)&_Q5.n128_i8[8] = vqtbl2_s8(*(int8x16x2_t *)v190.val[0].i8, v77);
          *(int8x8_t *)v108.i8 = vqtbl2_s8(*(int8x16x2_t *)v190.val[0].i8, v81);
          v108.u64[1] = (unint64_t)vqtbl2_s8(*(int8x16x2_t *)v190.val[0].i8, v82);
          *(__n128 *)uint64_t v80 = _Q5;
          *(float16x8_t *)(v80 + 16) = v108;
          v80 += 32;
          v76 += 8;
        }
        while (v76 < (int)v10 - 7);
        unint64_t v126 = v10 & 0xFFFFFFF8;
        _S24 = v170;
        _S23 = v171;
        _S29 = v168;
        _S25 = v169;
        _S31 = v167;
      }
      unint64_t v127 = v10 - v126;
      if (v10 > v126)
      {
        uint64_t v128 = 0;
        long long v129 = &v79[v165];
        uint32x4_t v130 = &v79[v164];
        float v131 = &v79[v163];
        float v132 = &v79[v162];
        uint64_t v133 = v80 + v172;
        uint64_t v134 = v80 + v173;
        uint64_t v135 = v80 + v174;
        uint64_t v136 = v80 + v175;
        do
        {
          _Q5.n128_u16[0] = v132[v128];
          _Q5.n128_u16[1] = v131[v128];
          _D6 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _Q5.n128_u64[0] = (unint64_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16((float16x4_t)_Q5.n128_u64[0]), _D6), 0), _D6)));
          _Q5.n128_u16[0] = *(_WORD *)&result[2 * _Q5.n128_u32[0]];
          _D6.i16[0] = v130[v128];
          __asm { FCVT            S6, H6 }
          float v138 = _D6.f32[0] * 8191.0;
          __asm { FCVT            S6, H5 }
          _Q5.n128_u16[0] = *(_WORD *)&result[2 * _Q5.n128_u32[1]];
          unsigned int v140 = llroundf(fminf(fmaxf(v138, 0.0), 8191.0));
          __asm { FCVT            S16, H5 }
          _Q5.n128_u16[0] = *(_WORD *)&result[2 * v140];
          __asm { FCVT            S17, H5 }
          float v143 = (float)((float)((float)(v179 * _S16) + (float)(v180 * _S6)) + (float)(v178 * _S17))
               + (float)(v177 * fmaxf(_S6, fmaxf(_S16, _S17)));
          float v144 = 8191.0;
          if (v143 <= 8191.0)
          {
            float v144 = v143;
            if (v143 < 0.0) {
              float v144 = 0.0;
            }
          }
          _H5 = *(_WORD *)(v45 + 2 * llroundf(v144));
          __asm { FCVT            S5, H5 }
          float v147 = _S6 * _S5;
          float v148 = _S16 * _S5;
          float v149 = _S17 * _S5;
          _S22 = 255.0;
          if (*(short float *)(v56
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(_S24 * (float)(_S16 * _S5)) + (float)((float)(_S6 * _S5) * _S23))+ (float)((float)(_S17 * _S5) * _S25), 0.0), 8191.0))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H16, #0 }
            if (_NF) {
              _S22 = 0.0;
            }
            else {
              __asm { FCVT            S22, H16 }
            }
          }
          _H16 = v129[v128];
          float v153 = (float)((float)(_S31 * v148) + (float)(v147 * _S29)) + (float)(v149 * v184);
          float v154 = (float)((float)(v182 * v148) + (float)(v147 * v183)) + (float)(v149 * v181);
          short float v155 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          short float v156 = *(short float *)(v56 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          *(unsigned char *)(v136 + v128) = llroundf(_S22);
          if (v155 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H18, #0 }
            if (_NF) {
              _S18 = 0.0;
            }
            else {
              __asm { FCVT            S18, H18 }
            }
          }
          else
          {
            _S18 = 255.0;
          }
          *(unsigned char *)(v135 + v128) = llroundf(_S18);
          if (v156 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H7, #0 }
            if (_NF) {
              _S7 = 0.0;
            }
            else {
              __asm { FCVT            S7, H7 }
            }
          }
          else
          {
            _S7 = 255.0;
          }
          __asm { FCVT            S5, H16 }
          *(unsigned char *)(v134 + v128) = llroundf(_S7);
          *(unsigned char *)(v133 + v128) = llroundf(_S5 * 255.0);
          v128 += 4;
          --v127;
        }
        while (v127);
      }
      v69 += v176;
      v64 += v37;
      ++v43;
    }
    while (v43 != v44);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *((void *)result + 19);
    int64x2_t v12 = (void *)*((void *)result + 7);
    uint64_t v13 = **((void **)result + 8);
    uint64_t v14 = **((void **)result + 17);
    float v15 = *(float *)(v11 + 72);
    float v16 = *(float *)(v11 + 76);
    float v17 = *(float *)(v11 + 80);
    float v18 = *(float *)(v11 + 84);
    float v19 = *(float *)(v11 + 88);
    float v20 = *(float *)(v11 + 92);
    float v21 = *(float *)(v11 + 96);
    float v22 = *(float *)(v11 + 100);
    uint64_t v23 = v11 + 164;
    uint64_t v24 = v11 + 16548;
    uint64_t v25 = v11 + 32932;
    float v26 = *(float *)(v11 + 104);
    float v27 = *(float *)(v11 + 108);
    float v28 = *(float *)(v11 + 112);
    float v29 = *(float *)(v11 + 116);
    float v30 = *(float *)(v11 + 120);
    float v31 = (void *)*((void *)result + 16);
    uint64_t v32 = *((void *)result + 14);
    unint64_t v33 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v34 = *(void *)(result + 36);
    uint64_t v35 = *(unsigned __int8 *)(v11 + 161);
    uint64_t v36 = *(unsigned __int8 *)(v11 + 160);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 159);
    uint64_t v37 = *(unsigned __int8 *)(v11 + 158);
    uint64_t v38 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v39 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v40 = *v31 + v33 * v14;
    uint64_t v41 = *(unsigned __int8 *)(v11 + 155);
    uint64_t v42 = *(unsigned __int8 *)(v11 + 154);
    uint64_t v43 = v40 + 4 * v32;
    uint64_t v44 = *v12 + v13 * v9 + 8 * v34;
    float32x2_t v45 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        uint64_t v46 = v8;
        uint64_t v47 = v44;
        uint64_t v48 = v43;
        do
        {
          _D26.i16[0] = *(_WORD *)(v47 + 2 * v42);
          _D26.i16[1] = *(_WORD *)(v47 + 2 * v41);
          _D26 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D26), v45), 0), v45)));
          _D26.i16[0] = *(_WORD *)(v23 + 2 * _D26.u32[0]);
          _H27 = *(_WORD *)(v47 + 2 * v39);
          __asm
          {
            FCVT            S27, H27
            FCVT            S26, H26
          }
          _H28 = *(_WORD *)(v23 + 2 * _D26.u32[1]);
          unsigned int v56 = llroundf(fminf(fmaxf(_S27 * 8191.0, 0.0), 8191.0));
          __asm { FCVT            S27, H28 }
          _H28 = *(_WORD *)(v23 + 2 * v56);
          __asm { FCVT            S29, H28 }
          float v60 = (float)((float)((float)(v28 * _S27) + (float)(v27 * *(float *)_D26.i32)) + (float)(v29 * _S29))
              + (float)(v30 * fmaxf(*(float *)_D26.i32, fmaxf(_S27, _S29)));
          float v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            float v61 = v60;
            if (v60 < 0.0) {
              float v61 = 0.0;
            }
          }
          _H28 = *(_WORD *)(v24 + 2 * llroundf(v61));
          __asm { FCVT            S31, H28 }
          float v64 = *(float *)_D26.i32 * _S31;
          float v65 = _S27 * _S31;
          float v66 = _S29 * _S31;
          short float v67 = *(short float *)(v25
                               + 2
                               * llroundf(fminf(fmaxf((float)((float)(v16 * (float)(_S27 * _S31))+ (float)((float)(*(float *)_D26.i32 * _S31) * v15))+ (float)(v66 * v17), 0.0), 8191.0)));
          _S31 = 255.0;
          if (v67 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H27, #0 }
            if (_NF) {
              _S31 = 0.0;
            }
            else {
              __asm { FCVT            S31, H27 }
            }
          }
          _H27 = *(_WORD *)(v47 + 2 * v38);
          float v71 = (float)((float)(v19 * v65) + (float)(v64 * v18)) + (float)(v66 * v20);
          float v72 = (float)((float)(v22 * v65) + (float)(v64 * v21)) + (float)(v66 * v26);
          short float v73 = *(short float *)(v25 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          short float v74 = *(short float *)(v25 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          *(unsigned char *)(v48 + v37) = llroundf(_S31);
          if (v73 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H29, #0 }
            if (_NF) {
              _S29 = 0.0;
            }
            else {
              __asm { FCVT            S29, H29 }
            }
          }
          else
          {
            _S29 = 255.0;
          }
          result[v48] = llroundf(_S29);
          if (v74 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H28, #0 }
            if (_NF) {
              _S28 = 0.0;
            }
            else {
              __asm { FCVT            S28, H28 }
            }
          }
          else
          {
            _S28 = 255.0;
          }
          __asm { FCVT            S27, H27 }
          v47 += 8;
          *(unsigned char *)(v48 + v36) = llroundf(_S28);
          *(unsigned char *)(v48 + v35) = llroundf(_S27 * 255.0);
          v48 += 4;
          --v46;
        }
        while (v46);
      }
      v44 += v13;
      v43 += v14;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

unsigned char *vt_Copy_RGhA_TRC_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, __n128 _Q1)
{
  char v4 = 0;
  uint64_t v5 = 0;
  unint64_t v6 = *(void *)(a1 + 20);
  uint64_t v7 = *(void *)(a1 + 36);
  uint64_t v8 = *(void *)(a1 + 44);
  uint64_t v9 = *(void *)(a1 + 28);
  unint64_t v10 = *a1;
  unint64_t v11 = v9 * a2 / v10;
  uint64_t v12 = v11 + v8;
  unint64_t v13 = (v9 + v9 * a2) / v10;
  uint64_t v14 = v13 + v8;
  uint64_t v15 = *((void *)a1 + 15);
  uint64_t v142 = *((void *)a1 + 14);
  uint64_t v16 = *((void *)a1 + 19);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = **((void **)a1 + 8);
  uint64_t v19 = **((void **)a1 + 7);
  uint64_t v20 = **((void **)a1 + 17);
  uint64_t v21 = **((void **)a1 + 16);
  uint64_t v22 = *(unsigned __int8 *)(v16 + 154);
  v158[0] = *(unsigned char *)(v16 + 154);
  uint64_t v23 = *(unsigned __int8 *)(v16 + 155);
  v158[1] = *(unsigned char *)(v16 + 155);
  uint64_t v24 = *(unsigned __int8 *)(v16 + 156);
  v158[2] = *(unsigned char *)(v16 + 156);
  uint64_t v25 = *(unsigned __int8 *)(v16 + 157);
  v158[3] = *(unsigned char *)(v16 + 157);
  uint64_t v152 = *(unsigned __int8 *)(v16 + 158);
  v157[0] = *(unsigned char *)(v16 + 158);
  uint64_t v151 = *(unsigned __int8 *)(v16 + 159);
  v157[1] = *(unsigned char *)(v16 + 159);
  uint64_t v150 = *(unsigned __int8 *)(v16 + 160);
  v157[2] = *(unsigned char *)(v16 + 160);
  uint64_t v149 = *(unsigned __int8 *)(v16 + 161);
  v157[3] = *(unsigned char *)(v16 + 161);
  _S4 = *(float *)(v16 + 72);
  _S5 = *(float *)(v16 + 76);
  uint64_t v28 = v17 / v10 + v15;
  uint64_t v29 = v18 * v12;
  _S29 = *(float *)(v16 + 80);
  _S30 = *(float *)(v16 + 84);
  uint64_t v32 = v20 * v28;
  _S31 = *(float *)(v16 + 88);
  float v153 = *(float *)(v16 + 92);
  _S6 = *(float *)(v16 + 96);
  _S7 = *(float *)(v16 + 100);
  _S16 = *(float *)(v16 + 104);
  memset(v156, 0, sizeof(v156));
  long long v154 = 0u;
  long long v155 = 0u;
  uint64_t result = v158;
  do
  {
    unsigned int v38 = 0;
    char v39 = v158[v5];
    char v40 = v157[v5];
    do
    {
      *((unsigned char *)v156 + 8 * ((v4 + v38) >> 3) + v38) = v39 + 4 * v38;
      *(unsigned char *)(((unint64_t)&v154 + ((v40 + 4 * v38) & 0xF8)) | (v40 + 4 * (_BYTE)v38) & 7) = v4 + v38;
      ++v38;
    }
    while (v38 != 8);
    ++v5;
    v4 += 8;
  }
  while (v5 != 4);
  if (v13 != v11)
  {
    uint64_t v41 = 0;
    uint64_t v42 = v14 - v12;
    uint64_t v43 = v16 + 164;
    uint64_t result = (unsigned char *)(v16 + 16548);
    __asm
    {
      FCVT            H8, S4
      FCVT            H9, S5
      FCVT            H10, S29
      FCVT            H11, S30
      FCVT            H12, S31
    }
    _S0 = v153;
    __asm
    {
      FCVT            H13, S0
      FCVT            H14, S6
    }
    uint64_t v56 = v21 + v32 + 4 * v142;
    __asm
    {
      FCVT            H15, S7
      FCVT            H0, S16
    }
    uint64_t v143 = v25;
    uint64_t v140 = v23;
    uint64_t v141 = v24;
    uint64_t v139 = v22;
    v59.i64[0] = 0x7000700070007000;
    v59.i64[1] = 0x7000700070007000;
    uint64_t v60 = v19 + v29 + 8 * v7;
    v61.i64[0] = 0x9000900090009000;
    v61.i64[1] = 0x9000900090009000;
    float16x8_t v62 = (float16x8_t)vdupq_n_s16(0x5BF8u);
    float v147 = _S5;
    float v148 = _S4;
    float v145 = _S30;
    float v146 = _S29;
    float v144 = _S31;
    do
    {
      if ((int)v6 < 8)
      {
        unint64_t v112 = 0;
        uint64_t v67 = v56;
        float v66 = (const __int16 *)v60;
      }
      else
      {
        int v63 = 0;
        int8x8_t v65 = *(int8x8_t *)((char *)&v154 + 8);
        int8x8_t v64 = (int8x8_t)v154;
        float v66 = (const __int16 *)v60;
        uint64_t v67 = v56;
        int8x8_t v69 = *(int8x8_t *)((char *)&v155 + 8);
        int8x8_t v68 = (int8x8_t)v155;
        do
        {
          int16x8x4_t v159 = vld4q_s16(v66);
          v66 += 32;
          uint16x8_t v70 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v159.val[0], v59), (float16x8_t)0), v61));
          float16x8_t v71 = (float16x8_t)vmovl_high_u16(v70);
          *(void *)&long long v72 = v71.u32[2];
          *((void *)&v72 + 1) = v71.u32[3];
          long long v73 = v72;
          *(void *)&long long v72 = v71.u32[0];
          *((void *)&v72 + 1) = v71.u32[1];
          long long v74 = v72;
          uint32x4_t v75 = vmovl_u16(*(uint16x4_t *)v70.i8);
          *((void *)&v72 + 1) = v75.u32[3];
          v76.i64[0] = v75.u32[2];
          v71.i16[0] = *(_WORD *)(v43 + 2 * v75.u32[0]);
          uint64_t v77 = *((void *)&v73 + 1);
          int8x8_t v78 = (__int16 *)(v43 + 2 * v75.u32[1]);
          float v79 = (__int16 *)(v43 + 2 * v73);
          uint16x8_t v80 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v159.val[1], v59), (float16x8_t)0), v61));
          uint32x4_t v81 = vmovl_high_u16(v80);
          float16x8_t v82 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v80.i8);
          v82.i16[0] = *(_WORD *)(v43 + 2 * v82.u32[0]);
          v71.i16[1] = *v78;
          uint16x8_t v83 = (__int16 *)(v43 + 2 * v81.u32[0]);
          v82.i16[1] = *(_WORD *)(v43 + 2 * v82.u32[1]);
          uint32x4_t v84 = (__int16 *)(v43 + 2 * v81.u32[1]);
          float16x8_t v85 = (__int16 *)(v43 + 2 * v81.u32[2]);
          uint64_t v86 = (__int16 *)(v43 + 2 * v81.u32[3]);
          v71.i16[2] = *(_WORD *)(v43 + 2 * v76.i64[0]);
          uint16x8_t v87 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v159.val[2], v59), (float16x8_t)0), v61));
          uint32x4_t v88 = vmovl_high_u16(v87);
          v82.i16[2] = *(_WORD *)(v43 + 2 * v82.u32[2]);
          float16x8_t v89 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v87.i8);
          v71.i16[3] = *(_WORD *)(v43 + 2 * *((void *)&v72 + 1));
          v82.i16[3] = *(_WORD *)(v43 + 2 * v82.u32[3]);
          v89.i16[0] = *(_WORD *)(v43 + 2 * v89.u32[0]);
          v71.i16[4] = *(_WORD *)(v43 + 2 * v74);
          v82.i16[4] = *v83;
          v71.i16[5] = *(_WORD *)(v43 + 2 * *((void *)&v74 + 1));
          v82.i16[5] = *v84;
          v89.i16[1] = *(_WORD *)(v43 + 2 * v89.u32[1]);
          v71.i16[6] = *v79;
          v89.i16[2] = *(_WORD *)(v43 + 2 * v89.u32[2]);
          v89.i16[3] = *(_WORD *)(v43 + 2 * v89.u32[3]);
          v82.i16[6] = *v85;
          v89.i16[4] = *(_WORD *)(v43 + 2 * v88.u32[0]);
          v89.i16[5] = *(_WORD *)(v43 + 2 * v88.u32[1]);
          v71.i16[7] = *(_WORD *)(v43 + 2 * v77);
          v89.i16[6] = *(_WORD *)(v43 + 2 * v88.u32[2]);
          v89.i16[7] = *(_WORD *)(v43 + 2 * v88.u32[3]);
          v82.i16[7] = *v86;
          float16x8_t v90 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v71, _H11), v82, _H12), v89, _H13);
          float16x8_t v91 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, _H0), v82, _H15), v71, _H14);
          uint16x8_t v92 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v71, _H8), v82, _H9), v89, _H10), (float16x8_t)0), v61));
          uint32x4_t v93 = vmovl_high_u16(v92);
          uint32x4_t v94 = vmovl_u16(*(uint16x4_t *)v92.i8);
          uint64_t v95 = v94.u32[3];
          v71.i16[0] = *(_WORD *)&result[2 * v94.u32[0]];
          uint64_t v96 = v93.u32[1];
          uint32x4_t v97 = (__int16 *)&result[2 * v94.u32[2]];
          float16x8_t v98 = (__int16 *)&result[2 * v93.u32[0]];
          uint64_t v99 = v93.u32[3];
          uint32x4_t v100 = (__int16 *)&result[2 * v93.u32[2]];
          float16x8_t v101 = (__int16 *)&result[2 * v94.u32[1]];
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v90, (float16x8_t)0), v61));
          uint32x4_t v103 = vmovl_high_u16(v102);
          float16x8_t v104 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v102.i8);
          v104.i16[0] = *(_WORD *)&result[2 * v104.u32[0]];
          float16x8_t v105 = (__int16 *)&result[2 * v103.u32[0]];
          float16x8_t v106 = (__int16 *)&result[2 * v103.u32[1]];
          v71.i16[1] = *v101;
          v104.i16[1] = *(_WORD *)&result[2 * v104.u32[1]];
          v71.i16[2] = *v97;
          uint16x8_t v107 = (__int16 *)&result[2 * v103.u32[2]];
          float16x8_t v108 = (__int16 *)&result[2 * v103.u32[3]];
          v104.i16[2] = *(_WORD *)&result[2 * v104.u32[2]];
          uint16x8_t v109 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v91, (float16x8_t)0), v61));
          uint32x4_t v110 = vmovl_high_u16(v109);
          v71.i16[3] = *(_WORD *)&result[2 * v95];
          uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v109.i8);
          v104.i16[3] = *(_WORD *)&result[2 * v104.u32[3]];
          v76.i16[0] = *(_WORD *)&result[2 * v111.u32[0]];
          v71.i16[4] = *v98;
          v104.i16[4] = *v105;
          v71.i16[5] = *(_WORD *)&result[2 * v96];
          v104.i16[5] = *v106;
          v76.i16[1] = *(_WORD *)&result[2 * v111.u32[1]];
          v71.i16[6] = *v100;
          v76.i16[2] = *(_WORD *)&result[2 * v111.u32[2]];
          v104.i16[6] = *v107;
          v76.i16[3] = *(_WORD *)&result[2 * v111.u32[3]];
          v76.i16[4] = *(_WORD *)&result[2 * v110.u32[0]];
          v71.i16[7] = *(_WORD *)&result[2 * v99];
          v76.i16[5] = *(_WORD *)&result[2 * v110.u32[1]];
          v76.i16[6] = *(_WORD *)&result[2 * v110.u32[2]];
          v104.i16[7] = *v108;
          v76.i16[7] = *(_WORD *)&result[2 * v110.u32[3]];
          v159.val[0] = (int16x8_t)vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v71, (float16x8_t)0), v62)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v104, (float16x8_t)0), v62)));
          v159.val[1] = (int16x8_t)vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v76, (float16x8_t)0), v62)), (int8x16_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v159.val[3], v62)));
          _Q1.n128_u64[0] = (unint64_t)vqtbl2_s8(*(int8x16x2_t *)v159.val[0].i8, v64);
          *(int8x8_t *)&_Q1.n128_i8[8] = vqtbl2_s8(*(int8x16x2_t *)v159.val[0].i8, v65);
          *(int8x8_t *)v111.i8 = vqtbl2_s8(*(int8x16x2_t *)v159.val[0].i8, v68);
          v111.u64[1] = (unint64_t)vqtbl2_s8(*(int8x16x2_t *)v159.val[0].i8, v69);
          *(__n128 *)uint64_t v67 = _Q1;
          *(uint32x4_t *)(v67 + 16) = v111;
          v67 += 32;
          v63 += 8;
        }
        while (v63 < (int)v6 - 7);
        unint64_t v112 = v6 & 0xFFFFFFF8;
        _S5 = v147;
        _S4 = v148;
        _S30 = v145;
        _S29 = v146;
        _S31 = v144;
      }
      unint64_t v113 = v6 - v112;
      if (v6 > v112)
      {
        uint64_t v114 = 0;
        float16x8_t v115 = &v66[v143];
        uint16x8_t v116 = &v66[v141];
        uint32x4_t v117 = &v66[v140];
        uint32x4_t v118 = &v66[v139];
        uint64_t v119 = v67 + v149;
        uint64_t v120 = v67 + v150;
        uint64_t v121 = v67 + v151;
        uint64_t v122 = v67 + v152;
        do
        {
          _Q1.n128_u16[0] = v118[v114];
          _Q1.n128_u16[1] = v117[v114];
          _D2 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _Q1.n128_u64[0] = (unint64_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16((float16x4_t)_Q1.n128_u64[0]), _D2), 0), _D2)));
          _Q1.n128_u16[0] = *(_WORD *)(v43 + 2 * _Q1.n128_u32[0]);
          _D2.i16[0] = v116[v114];
          __asm { FCVT            S2, H2 }
          _H3 = *(_WORD *)(v43 + 2 * _Q1.n128_u32[1]);
          __asm
          {
            FCVT            S25, H1
            FCVT            S26, H3
          }
          _Q1.n128_u16[0] = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(_D2.f32[0] * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S27, H1 }
          _S28 = 255.0;
          if (*(short float *)&result[2
                                     * llroundf(fminf(fmaxf((float)((float)(_S5 * _S26) + (float)(_S25 * _S4)) + (float)(_S27 * _S29), 0.0), 8191.0))] <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H17, #0 }
            if (_NF) {
              _S28 = 0.0;
            }
            else {
              __asm { FCVT            S28, H17 }
            }
          }
          _H17 = v115[v114];
          float v131 = (float)((float)(_S7 * _S26) + (float)(_S25 * _S6)) + (float)(_S27 * _S16);
          short float v132 = *(short float *)&result[2
                                       * llroundf(fminf(fmaxf((float)((float)(_S31 * _S26) + (float)(_S25 * _S30))+ (float)(_S27 * v153), 0.0), 8191.0))];
          short float v133 = *(short float *)&result[2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0))];
          *(unsigned char *)(v122 + v114) = llroundf(_S28);
          if (v132 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H25, #0 }
            if (_NF) {
              _S25 = 0.0;
            }
            else {
              __asm { FCVT            S25, H25 }
            }
          }
          else
          {
            _S25 = 255.0;
          }
          *(unsigned char *)(v121 + v114) = llroundf(_S25);
          if (v133 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H24, #0 }
            if (_NF) {
              _S22 = 0.0;
            }
            else {
              __asm { FCVT            S22, H24 }
            }
          }
          else
          {
            _S22 = 255.0;
          }
          __asm { FCVT            S2, H17 }
          *(unsigned char *)(v120 + v114) = llroundf(_S22);
          *(unsigned char *)(v119 + v114) = llroundf(_S2 * 255.0);
          v114 += 4;
          --v113;
        }
        while (v113);
      }
      v60 += v18;
      v56 += v20;
      ++v41;
    }
    while (v41 != v42);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *((void *)result + 19);
    int64x2_t v12 = (void *)*((void *)result + 16);
    int64x2_t v13 = (void *)*((void *)result + 7);
    uint64_t v14 = **((void **)result + 8);
    uint64_t v15 = **((void **)result + 17);
    float v16 = *(float *)(v11 + 72);
    float v17 = *(float *)(v11 + 76);
    float v18 = *(float *)(v11 + 80);
    float v19 = *(float *)(v11 + 84);
    float v20 = *(float *)(v11 + 88);
    float v21 = *(float *)(v11 + 92);
    float v22 = *(float *)(v11 + 96);
    float v23 = *(float *)(v11 + 100);
    float v24 = *(float *)(v11 + 104);
    uint64_t v25 = v11 + 164;
    uint64_t v26 = v11 + 16548;
    uint64_t v27 = *((void *)result + 14);
    unint64_t v28 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v29 = *(void *)(result + 36);
    uint64_t v30 = *(unsigned __int8 *)(v11 + 161);
    uint64_t v31 = *(unsigned __int8 *)(v11 + 160);
    uint64_t v32 = *(unsigned __int8 *)(v11 + 159);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 158);
    uint64_t v33 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v34 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v35 = *v12 + v28 * v15;
    uint64_t v36 = *(unsigned __int8 *)(v11 + 155);
    uint64_t v37 = *(unsigned __int8 *)(v11 + 154);
    uint64_t v38 = v35 + 4 * v27;
    uint64_t v39 = *v13 + v14 * v9 + 8 * v29;
    float32x2_t v40 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        uint64_t v41 = v8;
        uint64_t v42 = v39;
        uint64_t v43 = v38;
        do
        {
          _D22.i16[0] = *(_WORD *)(v42 + 2 * v37);
          _D22.i16[1] = *(_WORD *)(v42 + 2 * v36);
          _D22 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D22), v40), 0), v40)));
          _D22.i16[0] = *(_WORD *)(v25 + 2 * _D22.u32[0]);
          _H23 = *(_WORD *)(v42 + 2 * v34);
          __asm
          {
            FCVT            S23, H23
            FCVT            S24, H22
          }
          _D22.i16[0] = *(_WORD *)(v25 + 2 * _D22.u32[1]);
          __asm { FCVT            S25, H22 }
          _D22.i16[0] = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S23 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S26, H22 }
          _S27 = 255.0;
          if (*(short float *)(v26
                              + 2
                              * llroundf(fminf(fmaxf((float)((float)(v17 * _S25) + (float)(_S24 * v16)) + (float)(_S26 * v18), 0.0), 8191.0))) <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H23, #0 }
            if (_NF) {
              _S27 = 0.0;
            }
            else {
              __asm { FCVT            S27, H23 }
            }
          }
          _H23 = *(_WORD *)(v42 + 2 * v33);
          float v56 = (float)((float)(v20 * _S25) + (float)(_S24 * v19)) + (float)(_S26 * v21);
          float v57 = (float)((float)(v23 * _S25) + (float)(_S24 * v22)) + (float)(_S26 * v24);
          short float v58 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v56, 0.0), 8191.0)));
          short float v59 = *(short float *)(v26 + 2 * llroundf(fminf(fmaxf(v57, 0.0), 8191.0)));
          result[v43] = llroundf(_S27);
          if (v58 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H25, #0 }
            if (_NF) {
              _S25 = 0.0;
            }
            else {
              __asm { FCVT            S25, H25 }
            }
          }
          else
          {
            _S25 = 255.0;
          }
          *(unsigned char *)(v43 + v32) = llroundf(_S25);
          if (v59 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H24, #0 }
            if (_NF) {
              _S24 = 0.0;
            }
            else {
              __asm { FCVT            S24, H24 }
            }
          }
          else
          {
            _S24 = 255.0;
          }
          __asm { FCVT            S23, H23 }
          v42 += 8;
          *(unsigned char *)(v43 + v31) = llroundf(_S24);
          *(unsigned char *)(v43 + v30) = llroundf(_S23 * 255.0);
          v43 += 4;
          --v41;
        }
        while (v41);
      }
      v39 += v14;
      v38 += v15;
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_BGRA_neon_fp16_GCD);
  return 0;
}

__int16 *vt_Copy_RGhA_rgb_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  char v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = *(void *)(a1 + 20);
  uint64_t v81 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (v6 + v6 * a2) / v7;
  uint64_t v79 = v10 + v5;
  uint64_t v11 = *((void *)a1 + 15);
  uint64_t v80 = *((void *)a1 + 14);
  unint64_t v12 = *((void *)a1 + 13) * a2;
  uint64_t v13 = *((void *)a1 + 19);
  uint64_t v14 = **((void **)a1 + 8);
  uint64_t v78 = **((void **)a1 + 7);
  uint64_t v15 = **((void **)a1 + 17);
  uint64_t v77 = **((void **)a1 + 16);
  unsigned int v16 = *(_DWORD *)(v13 + 136);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 154);
  v86[0] = *(unsigned char *)(v13 + 154);
  uint64_t v18 = *(unsigned __int8 *)(v13 + 155);
  v86[1] = *(unsigned char *)(v13 + 155);
  uint64_t v19 = *(unsigned __int8 *)(v13 + 156);
  v86[2] = *(unsigned char *)(v13 + 156);
  uint64_t v20 = *(unsigned __int8 *)(v13 + 157);
  v86[3] = *(unsigned char *)(v13 + 157);
  uint64_t v21 = *(unsigned __int8 *)(v13 + 158);
  v85[0] = *(unsigned char *)(v13 + 158);
  uint64_t v22 = v14 * v9;
  unint64_t v23 = v15 * (v12 / v7 + v11);
  uint64_t v24 = *(unsigned __int8 *)(v13 + 159);
  v85[1] = *(unsigned char *)(v13 + 159);
  uint64_t v25 = *(unsigned __int8 *)(v13 + 160);
  v85[2] = *(unsigned char *)(v13 + 160);
  uint64_t v26 = *(unsigned __int8 *)(v13 + 161);
  v85[3] = v26;
  memset(v84, 0, sizeof(v84));
  long long v82 = 0u;
  long long v83 = 0u;
  do
  {
    unsigned int v27 = 0;
    char v28 = v86[v3];
    char v29 = v85[v3];
    do
    {
      *((unsigned char *)v84 + 8 * ((v2 + v27) >> 3) + v27) = v28 + 4 * v27;
      uint64_t result = (__int16 *)(((unint64_t)&v82 + ((v29 + 4 * v27) & 0xF8)) | (v29 + 4 * (_BYTE)v27) & 7);
      *(unsigned char *)uint64_t result = v2 + v27++;
    }
    while (v27 != 8);
    ++v3;
    v2 += 8;
  }
  while (v3 != 4);
  if (v10 != v8)
  {
    uint64_t v31 = 0;
    uint64_t v32 = v79 - v9;
    _S0 = (float)v16;
    uint64_t v34 = v77 + v23 + 4 * v80;
    uint64_t result = (__int16 *)(v78 + v22 + 8 * v81);
    __asm { FCVT            H1, S0 }
    uint64_t v40 = v20;
    uint64_t v41 = v19;
    uint64_t v42 = v18;
    uint64_t v43 = v17;
    float16x8_t v44 = (float16x8_t)vdupq_n_s16(0x5BF8u);
    do
    {
      if ((int)v4 < 8)
      {
        unint64_t v52 = 0;
        uint64_t v49 = (int16x8_t *)v34;
        uint64_t v48 = result;
      }
      else
      {
        int v45 = 0;
        int8x8_t v47 = *(int8x8_t *)((char *)&v82 + 8);
        int8x8_t v46 = (int8x8_t)v82;
        uint64_t v48 = result;
        uint64_t v49 = (int16x8_t *)v34;
        int8x8_t v51 = *(int8x8_t *)((char *)&v83 + 8);
        int8x8_t v50 = (int8x8_t)v83;
        do
        {
          int16x8x4_t v87 = vld4q_s16(v48);
          v48 += 32;
          v87.val[1] = (int16x8_t)vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16((float16x8_t)v87.val[0], _H1), (float16x8_t)0), v44)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16((float16x8_t)v87.val[1], _H1), (float16x8_t)0), v44)));
          v87.val[2] = (int16x8_t)vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_n_f16((float16x8_t)v87.val[2], _H1), (float16x8_t)0), v44)), (int8x16_t)vcvtq_u16_f16(vmulq_f16((float16x8_t)v87.val[3], v44)));
          *(int8x8_t *)v87.val[0].i8 = vqtbl2_s8(*(int8x16x2_t *)v87.val[1].i8, v46);
          v87.val[0].u64[1] = (unint64_t)vqtbl2_s8(*(int8x16x2_t *)v87.val[1].i8, v47);
          *(int8x8_t *)v87.val[3].i8 = vqtbl2_s8(*(int8x16x2_t *)v87.val[1].i8, v50);
          v87.val[3].u64[1] = (unint64_t)vqtbl2_s8(*(int8x16x2_t *)v87.val[1].i8, v51);
          int16x8_t *v49 = v87.val[0];
          v49[1] = v87.val[3];
          v49 += 2;
          v45 += 8;
        }
        while (v45 < (int)v4 - 7);
        unint64_t v52 = v4 & 0xFFFFFFF8;
      }
      _CF = v4 >= v52;
      unint64_t v53 = v4 - v52;
      if (v53 != 0 && _CF)
      {
        uint64_t v54 = 0;
        uint64_t v55 = &v48[v40];
        float v56 = &v48[v41];
        float v57 = &v48[v42];
        short float v58 = &v48[v43];
        short float v59 = &v49->i8[v26];
        uint64_t v60 = &v49->i8[v25];
        float16x8_t v61 = &v49->i8[v24];
        float16x8_t v62 = &v49->i8[v21];
        do
        {
          _H4 = v58[v54];
          __asm { FCVT            S4, H4 }
          float v65 = 255.0;
          if ((float)(_S0 * _S4) <= 255.0)
          {
            float v65 = _S0 * _S4;
            if ((float)(_S0 * _S4) < 0.0) {
              float v65 = 0.0;
            }
          }
          _H5 = v57[v54];
          __asm { FCVT            S16, H5 }
          _H6 = v56[v54];
          _H5 = v55[v54];
          float v70 = _S0 * _S16;
          v62[v54] = llroundf(v65);
          float v71 = 255.0;
          if (v70 <= 255.0)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          __asm { FCVT            S6, H6 }
          char v73 = llroundf(v71);
          float v74 = _S0 * _S6;
          v61[v54] = v73;
          float v75 = 255.0;
          if (v74 <= 255.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          __asm { FCVT            S5, H5 }
          v60[v54] = llroundf(v75);
          v59[v54] = llroundf(_S5 * 255.0);
          v54 += 4;
          --v53;
        }
        while (v53);
      }
      uint64_t result = (__int16 *)((char *)result + v14);
      v34 += v15;
      ++v31;
    }
    while (v31 != v32);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_BGRA_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_rgb_BGRA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *(unsigned __int8 *)result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *(void *)(result + 152);
    int64x2_t v11 = *(void **)(result + 128);
    int64x2_t v12 = *(void **)(result + 56);
    uint64_t v13 = **(void **)(result + 64);
    uint64_t v14 = **(void **)(result + 136);
    float v15 = (float)*(unsigned int *)(v10 + 136);
    uint64_t v16 = *(void *)(result + 112);
    unint64_t v17 = *(void *)(result + 104) * a2 / v3 + *(void *)(result + 120);
    uint64_t v18 = *(void *)(result + 36);
    uint64_t v19 = *(unsigned __int8 *)(v10 + 161);
    uint64_t v20 = *(unsigned __int8 *)(v10 + 160);
    uint64_t v21 = *(unsigned __int8 *)(v10 + 159);
    uint64_t v22 = *(unsigned __int8 *)(v10 + 158);
    uint64_t v23 = *(unsigned __int8 *)(v10 + 157);
    uint64_t result = *(unsigned __int8 *)(v10 + 156);
    uint64_t v24 = *v11 + v17 * v14;
    uint64_t v25 = *(unsigned __int8 *)(v10 + 155);
    uint64_t v26 = *(unsigned __int8 *)(v10 + 154);
    uint64_t v27 = v24 + 4 * v16;
    uint64_t v28 = *v12 + v13 * v8 + 8 * v18;
    do
    {
      if (v7)
      {
        uint64_t v29 = v7;
        uint64_t v30 = v28;
        uint64_t v31 = v27;
        do
        {
          _H1 = *(_WORD *)(v30 + 2 * v26);
          __asm { FCVT            S1, H1 }
          float v38 = 255.0;
          if ((float)(v15 * _S1) <= 255.0)
          {
            float v38 = v15 * _S1;
            if ((float)(v15 * _S1) < 0.0) {
              float v38 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v30 + 2 * v25);
          __asm { FCVT            S5, H2 }
          _H3 = *(_WORD *)(v30 + 2 * result);
          _H2 = *(_WORD *)(v30 + 2 * v23);
          float v43 = v15 * _S5;
          *(unsigned char *)(v31 + v22) = llroundf(v38);
          float v44 = 255.0;
          if (v43 <= 255.0)
          {
            float v44 = v43;
            if (v43 < 0.0) {
              float v44 = 0.0;
            }
          }
          __asm { FCVT            S3, H3 }
          char v46 = llroundf(v44);
          float v47 = v15 * _S3;
          *(unsigned char *)(v31 + v21) = v46;
          float v48 = 255.0;
          if (v47 <= 255.0)
          {
            float v48 = v47;
            if (v47 < 0.0) {
              float v48 = 0.0;
            }
          }
          __asm { FCVT            S2, H2 }
          v30 += 8;
          *(unsigned char *)(v31 + v20) = llroundf(v48);
          *(unsigned char *)(v31 + v19) = llroundf(_S2 * 255.0);
          v31 += 4;
          --v29;
        }
        while (v29);
      }
      v28 += v13;
      v27 += v14;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_l10r_GCD(unint64_t result, uint64_t a2, float a3)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(result + 20);
    unint64_t v10 = v6 + *(void *)(result + 44);
    unint64_t v11 = v7 - v6;
    uint64_t v12 = *(void *)(result + 152);
    int64x2_t v13 = *(void **)(result + 56);
    uint64_t v14 = **(void **)(result + 64);
    uint64_t v15 = **(void **)(result + 136);
    LOWORD(a3) = *(_WORD *)(v12 + 144);
    float v16 = (float)LODWORD(a3);
    float v17 = *(float *)(v12 + 72);
    float v18 = *(float *)(v12 + 76);
    float v19 = *(float *)(v12 + 80);
    float v20 = *(float *)(v12 + 84);
    float v21 = *(float *)(v12 + 88);
    float v22 = *(float *)(v12 + 92);
    float v23 = *(float *)(v12 + 96);
    float v24 = *(float *)(v12 + 100);
    uint64_t v25 = v12 + 164;
    uint64_t v26 = v12 + 16548;
    uint64_t v27 = v12 + 32932;
    float v28 = *(float *)(v12 + 104);
    float v29 = *(float *)(v12 + 108);
    float v30 = *(float *)(v12 + 112);
    float v31 = *(float *)(v12 + 116);
    float v32 = *(float *)(v12 + 120);
    uint64_t v33 = *(void *)(result + 112);
    unint64_t v34 = *(void *)(result + 104) * a2 / v5 + *(void *)(result + 120);
    uint64_t v35 = *(void *)(result + 36);
    uint64_t v36 = *(unsigned __int8 *)(v12 + 157);
    uint64_t v37 = *(unsigned __int8 *)(v12 + 156);
    uint64_t v38 = **(void **)(result + 128) + v34 * v15;
    uint64_t result = *(unsigned __int8 *)(v12 + 155);
    uint64_t v39 = *(unsigned __int8 *)(v12 + 154);
    uint64_t v40 = (unsigned int *)(v38 + 16 * v33);
    uint64_t v41 = *v13 + v14 * v10 + 8 * v35;
    float32x2_t v42 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v9)
      {
        uint64_t v43 = v9;
        float v44 = v40;
        uint64_t v45 = v41;
        do
        {
          _D28.i16[0] = *(_WORD *)(v45 + 2 * v39);
          _D28.i16[1] = *(_WORD *)(v45 + 2 * result);
          _D28 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D28), v42), 0), v42)));
          _D28.i16[0] = *(_WORD *)(v25 + 2 * _D28.u32[0]);
          _H29 = *(_WORD *)(v45 + 2 * v37);
          __asm
          {
            FCVT            S29, H29
            FCVT            S28, H28
          }
          _H30 = *(_WORD *)(v25 + 2 * _D28.u32[1]);
          __asm { FCVT            S30, H30 }
          LOWORD(_S29) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S29 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S8, H29 }
          float v55 = (float)((float)((float)(v30 * _S30) + (float)(v29 * *(float *)_D28.i32)) + (float)(v31 * _S8))
              + (float)(v32 * fmaxf(*(float *)_D28.i32, fmaxf(_S30, _S8)));
          float v56 = 8191.0;
          if (v55 <= 8191.0)
          {
            float v56 = v55;
            if (v55 < 0.0) {
              float v56 = 0.0;
            }
          }
          _H29 = *(_WORD *)(v26 + 2 * llroundf(v56));
          __asm { FCVT            S9, H29 }
          float v59 = *(float *)_D28.i32 * _S9;
          float v60 = _S30 * _S9;
          float v61 = _S8 * _S9;
          _H28 = *(_WORD *)(v27
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v24 * v60) + (float)((float)(*(float *)_D28.i32 * _S9) * v23))+ (float)((float)(_S8 * _S9) * v28), 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          float v64 = v16 + _S28;
          BOOL v65 = (float)(v16 + _S28) <= 1023.0;
          _D28.i32[0] = 1149222912;
          if (v65)
          {
            *(float *)_D28.i32 = v64;
            if (v64 < 0.0) {
              _D28 = 0;
            }
          }
          _H8 = *(_WORD *)(v27
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v21 * v60) + (float)(v59 * v20)) + (float)(v61 * v22), 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          float v68 = v16 + _S8;
          BOOL v65 = (float)(v16 + _S8) <= 1023.0;
          float v69 = 1023.0;
          if (v65)
          {
            float v69 = v68;
            if (v68 < 0.0) {
              float v69 = 0.0;
            }
          }
          _H29 = *(_WORD *)(v27
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v18 * v60) + (float)(v59 * v17)) + (float)(v61 * v19), 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v72 = v16 + _S29;
          BOOL v65 = (float)(v16 + _S29) <= 1023.0;
          float v73 = 1023.0;
          if (v65)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          _H30 = *(_WORD *)(v45 + 2 * v36);
          __asm { FCVT            S30, H30 }
          unsigned int v76 = llroundf(*(float *)_D28.i32);
          v45 += 8;
          unsigned int v77 = llroundf(v69) << 10;
          unsigned int v78 = llroundf(v73);
          float v79 = (float)llroundf(_S30 * 3.0);
          if (v79 > 3.0) {
            float v79 = 3.0;
          }
          *v44++ = v77 | v76 | (llroundf(v79) << 30) | (v78 << 20);
          --v43;
        }
        while (v43);
      }
      v41 += v14;
      uint64_t v40 = (unsigned int *)((char *)v40 + v15);
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_l10r_GCD(unint64_t result, uint64_t a2, float a3)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(result + 20);
    unint64_t v10 = v6 + *(void *)(result + 44);
    unint64_t v11 = v7 - v6;
    uint64_t v12 = *(void *)(result + 152);
    int64x2_t v13 = *(void **)(result + 56);
    uint64_t v14 = **(void **)(result + 64);
    uint64_t v15 = **(void **)(result + 136);
    LOWORD(a3) = *(_WORD *)(v12 + 144);
    float v16 = (float)LODWORD(a3);
    float v17 = *(float *)(v12 + 72);
    float v18 = *(float *)(v12 + 76);
    float v19 = *(float *)(v12 + 80);
    float v20 = *(float *)(v12 + 84);
    float v21 = *(float *)(v12 + 88);
    float v22 = *(float *)(v12 + 92);
    float v23 = *(float *)(v12 + 96);
    float v24 = *(float *)(v12 + 100);
    float v25 = *(float *)(v12 + 104);
    uint64_t v26 = v12 + 164;
    uint64_t v27 = v12 + 16548;
    uint64_t v28 = *(void *)(result + 112);
    unint64_t v29 = *(void *)(result + 104) * a2 / v5 + *(void *)(result + 120);
    uint64_t v30 = *(void *)(result + 36);
    uint64_t v31 = *(unsigned __int8 *)(v12 + 157);
    uint64_t v32 = *(unsigned __int8 *)(v12 + 156);
    uint64_t v33 = **(void **)(result + 128) + v29 * v15;
    uint64_t v34 = *(unsigned __int8 *)(v12 + 155);
    uint64_t result = *(unsigned __int8 *)(v12 + 154);
    uint64_t v35 = (unsigned int *)(v33 + 16 * v28);
    uint64_t v36 = *v13 + v14 * v10 + 8 * v30;
    float32x2_t v37 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v9)
      {
        uint64_t v38 = v9;
        uint64_t v39 = v36;
        uint64_t v40 = v35;
        do
        {
          _D24.i16[0] = *(_WORD *)(v39 + 2 * result);
          _D24.i16[1] = *(_WORD *)(v39 + 2 * v34);
          _D24 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D24), v37), 0), v37)));
          _D24.i16[0] = *(_WORD *)(v26 + 2 * _D24.u32[0]);
          _H25 = *(_WORD *)(v39 + 2 * v32);
          __asm { FCVT            S25, H25 }
          float v47 = _S25 * 8191.0;
          __asm { FCVT            S25, H24 }
          _D24.i16[0] = *(_WORD *)(v26 + 2 * _D24.u32[1]);
          __asm { FCVT            S26, H24 }
          _D24.i16[0] = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v47, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          _D24.i16[0] = *(_WORD *)(v27
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v24 * _S26) + (float)(_S25 * v23)) + (float)(_S27 * v25), 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          float v51 = v16 + *(float *)_D24.i32;
          BOOL v52 = (float)(v16 + *(float *)_D24.i32) <= 1023.0;
          _D24.i32[0] = 1149222912;
          if (v52)
          {
            *(float *)_D24.i32 = v51;
            if (v51 < 0.0) {
              _D24 = 0;
            }
          }
          _H28 = *(_WORD *)(v27
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v21 * _S26) + (float)(_S25 * v20)) + (float)(_S27 * v22), 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          float v55 = v16 + _S28;
          BOOL v52 = (float)(v16 + _S28) <= 1023.0;
          float v56 = 1023.0;
          if (v52)
          {
            float v56 = v55;
            if (v55 < 0.0) {
              float v56 = 0.0;
            }
          }
          _H25 = *(_WORD *)(v27
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v18 * _S26) + (float)(_S25 * v17)) + (float)(_S27 * v19), 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v59 = v16 + _S25;
          BOOL v52 = (float)(v16 + _S25) <= 1023.0;
          float v60 = 1023.0;
          if (v52)
          {
            float v60 = v59;
            if (v59 < 0.0) {
              float v60 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v39 + 2 * v31);
          __asm { FCVT            S26, H26 }
          unsigned int v63 = llroundf(*(float *)_D24.i32);
          v39 += 8;
          unsigned int v64 = llroundf(v56) << 10;
          unsigned int v65 = llroundf(v60);
          float v66 = (float)llroundf(_S26 * 3.0);
          if (v66 > 3.0) {
            float v66 = 3.0;
          }
          *v40++ = v64 | v63 | (llroundf(v66) << 30) | (v65 << 20);
          --v38;
        }
        while (v38);
      }
      v36 += v14;
      uint64_t v35 = (unsigned int *)((char *)v35 + v15);
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(result + 20);
    unint64_t v10 = v6 + *(void *)(result + 44);
    unint64_t v11 = v7 - v6;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v13 = **((void **)result + 8);
    uint64_t v14 = **((void **)result + 17);
    float v15 = (float)*(unsigned int *)(v12 + 136);
    LOWORD(a4) = *(_WORD *)(v12 + 144);
    float v16 = (float)LODWORD(a4);
    unint64_t v17 = *((void *)result + 13) * a2 / v5 + *((void *)result + 15);
    uint64_t v18 = *(unsigned __int8 *)(v12 + 157);
    uint64_t v19 = *(unsigned __int8 *)(v12 + 156);
    uint64_t v20 = *(unsigned __int8 *)(v12 + 155);
    uint64_t v21 = *(unsigned __int8 *)(v12 + 154);
    uint64_t v22 = **((void **)result + 16) + v17 * v14 + 16 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v13 * v10 + 8 * *(void *)(result + 36));
    do
    {
      if (v9)
      {
        uint64_t v23 = v9;
        uint64_t v24 = result;
        uint64_t v25 = (unsigned int *)v22;
        do
        {
          _H5 = *(_WORD *)&v24[2 * v21];
          _H6 = *(_WORD *)&v24[2 * v20];
          __asm { FCVT            S5, H5 }
          float v33 = v15 * _S5;
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)&v24[2 * v19];
          __asm { FCVT            S7, H7 }
          float v37 = v15 * _S6;
          _H16 = *(_WORD *)&v24[2 * v18];
          __asm { FCVT            S16, H16 }
          unsigned int v40 = llroundf(_S16 * 3.0);
          float v41 = (float)(v15 * _S7) + v16;
          if (v41 < 0.0) {
            float v42 = 0.0;
          }
          else {
            float v42 = v41;
          }
          if (v41 <= 1023.0) {
            float v43 = v42;
          }
          else {
            float v43 = 1023.0;
          }
          unsigned int v44 = llroundf(v43);
          float v45 = v37 + v16;
          if (v45 < 0.0) {
            float v46 = 0.0;
          }
          else {
            float v46 = v45;
          }
          if (v45 <= 1023.0) {
            float v47 = v46;
          }
          else {
            float v47 = 1023.0;
          }
          unsigned int v48 = llroundf(v47);
          float v49 = v33 + v16;
          if (v49 < 0.0) {
            float v50 = 0.0;
          }
          else {
            float v50 = v49;
          }
          if (v49 <= 1023.0) {
            float v51 = v50;
          }
          else {
            float v51 = 1023.0;
          }
          float v52 = (float)v40;
          unsigned int v53 = llroundf(v51);
          v24 += 8;
          if (v52 <= 3.0) {
            float v54 = v52;
          }
          else {
            float v54 = 3.0;
          }
          *v25++ = (v48 << 10) | v44 | (llroundf(v54) << 30) | (v53 << 20);
          --v23;
        }
        while (v23);
      }
      result += v13;
      v22 += v14;
      ++v8;
    }
    while (v8 != v11);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *(void *)(result + 152);
    int64x2_t v12 = *(void **)(result + 56);
    uint64_t v13 = **(void **)(result + 64);
    uint64_t v14 = **(void **)(result + 136);
    float v15 = *(float *)(v11 + 72);
    float v16 = *(float *)(v11 + 76);
    float v17 = *(float *)(v11 + 80);
    float v18 = *(float *)(v11 + 84);
    float v19 = *(float *)(v11 + 88);
    float v20 = *(float *)(v11 + 92);
    float v21 = *(float *)(v11 + 96);
    float v22 = *(float *)(v11 + 100);
    uint64_t v23 = v11 + 164;
    uint64_t v24 = v11 + 16548;
    uint64_t v25 = v11 + 32932;
    float v26 = *(float *)(v11 + 104);
    float v27 = *(float *)(v11 + 108);
    float v28 = *(float *)(v11 + 112);
    float v29 = *(float *)(v11 + 116);
    float v30 = *(float *)(v11 + 120);
    uint64_t v31 = *(void *)(result + 112);
    unint64_t v32 = *(void *)(result + 104) * a2 / v4 + *(void *)(result + 120);
    uint64_t v33 = *(void *)(result + 36);
    uint64_t v34 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v35 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v36 = **(void **)(result + 128) + v32 * v14;
    uint64_t result = *(unsigned __int8 *)(v11 + 155);
    uint64_t v37 = *(unsigned __int8 *)(v11 + 154);
    uint64_t v38 = (_WORD *)(v36 + 8 * v31);
    uint64_t v39 = *v12 + v13 * v9 + 8 * v33;
    float32x2_t v40 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        uint64_t v41 = v8;
        uint64_t v42 = v39;
        float v43 = v38;
        do
        {
          _D26.i16[0] = *(_WORD *)(v42 + 2 * v37);
          _D26.i16[1] = *(_WORD *)(v42 + 2 * result);
          _D26 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D26), v40), 0), v40)));
          _D26.i16[0] = *(_WORD *)(v23 + 2 * _D26.u32[0]);
          _H27 = *(_WORD *)(v42 + 2 * v35);
          __asm
          {
            FCVT            S27, H27
            FCVT            S26, H26
          }
          _H28 = *(_WORD *)(v23 + 2 * _D26.u32[1]);
          __asm { FCVT            S28, H28 }
          LOWORD(_S27) = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(_S27 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          float v53 = (float)((float)((float)(v28 * _S28) + (float)(v27 * *(float *)_D26.i32)) + (float)(v29 * _S30))
              + (float)(v30 * fmaxf(*(float *)_D26.i32, fmaxf(_S28, _S30)));
          float v54 = 8191.0;
          if (v53 <= 8191.0)
          {
            float v54 = v53;
            if (v53 < 0.0) {
              float v54 = 0.0;
            }
          }
          _H27 = *(_WORD *)(v24 + 2 * llroundf(v54));
          __asm { FCVT            S31, H27 }
          float v57 = *(float *)_D26.i32 * _S31;
          float v58 = _S28 * _S31;
          float v59 = _S30 * _S31;
          _H26 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * v58) + (float)((float)(*(float *)_D26.i32 * _S31) * v15))+ (float)((float)(_S30 * _S31) * v17), 0.0), 8191.0)));
          __asm { FCVT            S31, H26 }
          float v62 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H26, #0 }
            float v62 = _S31;
            if (_NF) {
              float v62 = 0.0;
            }
          }
          _H26 = *(_WORD *)(v42 + 2 * v34);
          float v65 = (float)((float)(v19 * v58) + (float)(v57 * v18)) + (float)(v59 * v20);
          float v66 = (float)((float)(v22 * v58) + (float)(v57 * v21)) + (float)(v59 * v26);
          _H28 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S31, H28 }
          *float v43 = llroundf(v62);
          float v70 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v70 = _S31;
            if (_NF) {
              float v70 = 0.0;
            }
          }
          __asm { FCVT            S30, H27 }
          v43[1] = llroundf(v70);
          float v73 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v73 = _S30;
            if (_NF) {
              float v73 = 0.0;
            }
          }
          __asm { FCVT            S26, H26 }
          v42 += 8;
          v43[2] = llroundf(v73);
          v43[3] = llroundf(_S26 * 65535.0);
          v43 += 4;
          --v41;
        }
        while (v41);
      }
      v39 += v13;
      uint64_t v38 = (_WORD *)((char *)v38 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_l64r_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *(void *)(result + 152);
    int64x2_t v12 = *(void **)(result + 56);
    uint64_t v13 = **(void **)(result + 64);
    uint64_t v14 = **(void **)(result + 136);
    float v15 = *(float *)(v11 + 72);
    float v16 = *(float *)(v11 + 76);
    float v17 = *(float *)(v11 + 80);
    float v18 = *(float *)(v11 + 84);
    float v19 = *(float *)(v11 + 88);
    float v20 = *(float *)(v11 + 92);
    float v21 = *(float *)(v11 + 96);
    float v22 = *(float *)(v11 + 100);
    float v23 = *(float *)(v11 + 104);
    uint64_t v24 = v11 + 164;
    uint64_t v25 = v11 + 16548;
    uint64_t v26 = *(void *)(result + 112);
    unint64_t v27 = *(void *)(result + 104) * a2 / v4 + *(void *)(result + 120);
    uint64_t v28 = *(void *)(result + 36);
    uint64_t v29 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v30 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v31 = **(void **)(result + 128) + v27 * v14;
    uint64_t v32 = *(unsigned __int8 *)(v11 + 155);
    uint64_t result = *(unsigned __int8 *)(v11 + 154);
    uint64_t v33 = (_WORD *)(v31 + 8 * v26);
    uint64_t v34 = *v12 + v13 * v9 + 8 * v28;
    float32x2_t v35 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        uint64_t v36 = v8;
        uint64_t v37 = v34;
        uint64_t v38 = v33;
        do
        {
          _D22.i16[0] = *(_WORD *)(v37 + 2 * result);
          _D22.i16[1] = *(_WORD *)(v37 + 2 * v32);
          _D22 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D22), v35), 0), v35)));
          _D22.i16[0] = *(_WORD *)(v24 + 2 * _D22.u32[0]);
          _H23 = *(_WORD *)(v37 + 2 * v30);
          __asm { FCVT            S23, H23 }
          float v45 = _S23 * 8191.0;
          __asm { FCVT            S23, H22 }
          _D22.i16[0] = *(_WORD *)(v24 + 2 * _D22.u32[1]);
          __asm { FCVT            S24, H22 }
          _D22.i16[0] = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v45, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          _D22.i16[0] = *(_WORD *)(v25
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(v16 * _S24) + (float)(_S23 * v15)) + (float)(_S25 * v17), 0.0), 8191.0)));
          __asm { FCVT            S27, H22 }
          float v50 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCMP            H22, #0 }
            float v50 = _S27;
            if (_NF) {
              float v50 = 0.0;
            }
          }
          _H22 = *(_WORD *)(v37 + 2 * v29);
          float v53 = (float)((float)(v19 * _S24) + (float)(_S23 * v18)) + (float)(_S25 * v20);
          float v54 = (float)((float)(v22 * _S24) + (float)(_S23 * v21)) + (float)(_S25 * v23);
          _H24 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v53, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v54, 0.0), 8191.0)));
          __asm { FCVT            S27, H24 }
          _WORD *v38 = llroundf(v50);
          float v58 = 65535.0;
          if (_S27 <= 65535.0)
          {
            __asm { FCMP            H24, #0 }
            float v58 = _S27;
            if (_NF) {
              float v58 = 0.0;
            }
          }
          __asm { FCVT            S26, H23 }
          v38[1] = llroundf(v58);
          float v61 = 65535.0;
          if (_S26 <= 65535.0)
          {
            __asm { FCMP            H23, #0 }
            float v61 = _S26;
            if (_NF) {
              float v61 = 0.0;
            }
          }
          __asm { FCVT            S22, H22 }
          v37 += 8;
          v38[2] = llroundf(v61);
          v38[3] = llroundf(_S22 * 65535.0);
          v38 += 4;
          --v36;
        }
        while (v36);
      }
      v34 += v13;
      uint64_t v33 = (_WORD *)((char *)v33 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v11 = **((void **)result + 8);
    uint64_t v12 = **((void **)result + 17);
    float v13 = (float)*(unsigned int *)(v10 + 136);
    unint64_t v14 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v15 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v16 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v17 = *(unsigned __int8 *)(v10 + 155);
    uint64_t v18 = *(unsigned __int8 *)(v10 + 154);
    uint64_t v19 = **((void **)result + 16) + v14 * v12 + 8 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v11 * v8 + 8 * *(void *)(result + 36));
    do
    {
      if (v7)
      {
        uint64_t v20 = v7;
        long long v21 = result;
        int64x2_t v22 = (_WORD *)v19;
        do
        {
          _H2 = *(_WORD *)&v21[2 * v18];
          __asm { FCVT            S2, H2 }
          float v29 = v13 * _S2;
          float v30 = 65535.0;
          if (v29 <= 65535.0)
          {
            float v30 = v29;
            if (v29 < 0.0) {
              float v30 = 0.0;
            }
          }
          _H2 = *(_WORD *)&v21[2 * v17];
          __asm { FCVT            S5, H2 }
          _H3 = *(_WORD *)&v21[2 * v16];
          _H2 = *(_WORD *)&v21[2 * v15];
          float v35 = v13 * _S5;
          *int64x2_t v22 = llroundf(v30);
          float v36 = 65535.0;
          if (v35 <= 65535.0)
          {
            float v36 = v35;
            if (v35 < 0.0) {
              float v36 = 0.0;
            }
          }
          __asm { FCVT            S3, H3 }
          float v38 = v13 * _S3;
          v22[1] = llroundf(v36);
          BOOL v39 = (float)(v13 * _S3) <= 65535.0;
          float v40 = 65535.0;
          if (v39)
          {
            float v40 = v38;
            if (v38 < 0.0) {
              float v40 = 0.0;
            }
          }
          __asm { FCVT            S2, H2 }
          v21 += 8;
          v22[2] = llroundf(v40);
          v22[3] = llroundf(_S2 * 65535.0);
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *(void *)(result + 152);
    int64x2_t v12 = *(void **)(result + 56);
    uint64_t v13 = **(void **)(result + 64);
    uint64_t v14 = **(void **)(result + 136);
    float v15 = *(float *)(v11 + 72);
    float v16 = *(float *)(v11 + 76);
    float v17 = *(float *)(v11 + 80);
    float v18 = *(float *)(v11 + 84);
    float v19 = *(float *)(v11 + 88);
    float v20 = *(float *)(v11 + 92);
    float v21 = *(float *)(v11 + 96);
    float v22 = *(float *)(v11 + 100);
    uint64_t v23 = v11 + 164;
    uint64_t v24 = v11 + 16548;
    uint64_t v25 = v11 + 32932;
    float v26 = *(float *)(v11 + 104);
    float v27 = *(float *)(v11 + 108);
    float v28 = *(float *)(v11 + 112);
    float v29 = *(float *)(v11 + 116);
    float v30 = *(float *)(v11 + 120);
    uint64_t v31 = *(void *)(result + 112);
    unint64_t v32 = *(void *)(result + 104) * a2 / v4 + *(void *)(result + 120);
    uint64_t v33 = *(void *)(result + 36);
    uint64_t v34 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v35 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v36 = **(void **)(result + 128) + v32 * v14;
    uint64_t result = *(unsigned __int8 *)(v11 + 155);
    uint64_t v37 = *(unsigned __int8 *)(v11 + 154);
    float v38 = (_WORD *)(v36 + 8 * v31);
    uint64_t v39 = *v12 + v13 * v9 + 8 * v33;
    float32x2_t v40 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        uint64_t v41 = v8;
        uint64_t v42 = v39;
        float v43 = v38;
        do
        {
          _D26.i16[0] = *(_WORD *)(v42 + 2 * v37);
          _D26.i16[1] = *(_WORD *)(v42 + 2 * result);
          _D26 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D26), v40), 0), v40)));
          _D26.i16[0] = *(_WORD *)(v23 + 2 * _D26.u32[0]);
          _H27 = *(_WORD *)(v42 + 2 * v35);
          __asm
          {
            FCVT            S27, H27
            FCVT            S26, H26
          }
          _H28 = *(_WORD *)(v23 + 2 * _D26.u32[1]);
          __asm { FCVT            S28, H28 }
          LOWORD(_S27) = *(_WORD *)(v23 + 2 * llroundf(fminf(fmaxf(_S27 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          float v53 = (float)((float)((float)(v28 * _S28) + (float)(v27 * *(float *)_D26.i32)) + (float)(v29 * _S30))
              + (float)(v30 * fmaxf(*(float *)_D26.i32, fmaxf(_S28, _S30)));
          float v54 = 8191.0;
          if (v53 <= 8191.0)
          {
            float v54 = v53;
            if (v53 < 0.0) {
              float v54 = 0.0;
            }
          }
          _H27 = *(_WORD *)(v24 + 2 * llroundf(v54));
          __asm { FCVT            S31, H27 }
          float v57 = *(float *)_D26.i32 * _S31;
          float v58 = _S28 * _S31;
          float v59 = _S30 * _S31;
          _H30 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * v58) + (float)((float)(*(float *)_D26.i32 * _S31) * v15))+ (float)((float)(_S30 * _S31) * v17), 0.0), 8191.0)));
          __asm { FCVT            S31, H30 }
          _D26.i32[0] = 1199570688;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            *(float *)_D26.i32 = _S31;
            if (_NF) {
              _D26 = 0;
            }
          }
          _H31 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * v58) + (float)(v57 * v18)) + (float)(v59 * v20), 0.0), 8191.0)));
          __asm { FCVT            S8, H31 }
          float v65 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v65 = _S8;
            if (_NF) {
              float v65 = 0.0;
            }
          }
          _H28 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * v58) + (float)(v57 * v21)) + (float)(v59 * v26), 0.0), 8191.0)));
          __asm { FCVT            S29, H28 }
          float v69 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v69 = _S29;
            if (_NF) {
              float v69 = 0.0;
            }
          }
          _H28 = *(_WORD *)(v42 + 2 * v34);
          __asm { FCVT            S28, H28 }
          v42 += 8;
          *float v43 = __rev16(llroundf(_S28 * 65535.0));
          v43[1] = __rev16(llroundf(*(float *)_D26.i32));
          v43[2] = __rev16(llroundf(v65));
          v43[3] = __rev16(llroundf(v69));
          v43 += 4;
          --v41;
        }
        while (v41);
      }
      v39 += v13;
      float v38 = (_WORD *)((char *)v38 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_b64a_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *(void *)(result + 152);
    int64x2_t v12 = *(void **)(result + 56);
    uint64_t v13 = **(void **)(result + 64);
    uint64_t v14 = **(void **)(result + 136);
    float v15 = *(float *)(v11 + 72);
    float v16 = *(float *)(v11 + 76);
    float v17 = *(float *)(v11 + 80);
    float v18 = *(float *)(v11 + 84);
    float v19 = *(float *)(v11 + 88);
    float v20 = *(float *)(v11 + 92);
    float v21 = *(float *)(v11 + 96);
    float v22 = *(float *)(v11 + 100);
    float v23 = *(float *)(v11 + 104);
    uint64_t v24 = v11 + 164;
    uint64_t v25 = v11 + 16548;
    uint64_t v26 = *(void *)(result + 112);
    unint64_t v27 = *(void *)(result + 104) * a2 / v4 + *(void *)(result + 120);
    uint64_t v28 = *(void *)(result + 36);
    uint64_t v29 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v30 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v31 = **(void **)(result + 128) + v27 * v14;
    uint64_t v32 = *(unsigned __int8 *)(v11 + 155);
    uint64_t result = *(unsigned __int8 *)(v11 + 154);
    uint64_t v33 = (_WORD *)(v31 + 8 * v26);
    uint64_t v34 = *v12 + v13 * v9 + 8 * v28;
    float32x2_t v35 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        uint64_t v36 = v8;
        uint64_t v37 = v34;
        float v38 = v33;
        do
        {
          _D22.i16[0] = *(_WORD *)(v37 + 2 * result);
          _D22.i16[1] = *(_WORD *)(v37 + 2 * v32);
          _D22 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D22), v35), 0), v35)));
          _D22.i16[0] = *(_WORD *)(v24 + 2 * _D22.u32[0]);
          _H23 = *(_WORD *)(v37 + 2 * v30);
          __asm { FCVT            S23, H23 }
          float v45 = _S23 * 8191.0;
          __asm { FCVT            S23, H22 }
          _D22.i16[0] = *(_WORD *)(v24 + 2 * _D22.u32[1]);
          __asm { FCVT            S24, H22 }
          _D22.i16[0] = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(v45, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          _H26 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v16 * _S24) + (float)(_S23 * v15)) + (float)(_S25 * v17), 0.0), 8191.0)));
          __asm { FCVT            S27, H26 }
          _D22.i32[0] = 1199570688;
          if (_S27 <= 65535.0)
          {
            __asm { FCMP            H26, #0 }
            *(float *)_D22.i32 = _S27;
            if (_NF) {
              _D22 = 0;
            }
          }
          _H27 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v19 * _S24) + (float)(_S23 * v18)) + (float)(_S25 * v20), 0.0), 8191.0)));
          __asm { FCVT            S28, H27 }
          float v54 = 65535.0;
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v54 = _S28;
            if (_NF) {
              float v54 = 0.0;
            }
          }
          _H24 = *(_WORD *)(v25
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v22 * _S24) + (float)(_S23 * v21)) + (float)(_S25 * v23), 0.0), 8191.0)));
          __asm { FCVT            S25, H24 }
          float v58 = 65535.0;
          if (_S25 <= 65535.0)
          {
            __asm { FCMP            H24, #0 }
            float v58 = _S25;
            if (_NF) {
              float v58 = 0.0;
            }
          }
          _H24 = *(_WORD *)(v37 + 2 * v29);
          __asm { FCVT            S24, H24 }
          v37 += 8;
          _WORD *v38 = __rev16(llroundf(_S24 * 65535.0));
          v38[1] = __rev16(llroundf(*(float *)_D22.i32));
          v38[2] = __rev16(llroundf(v54));
          v38[3] = __rev16(llroundf(v58));
          v38 += 4;
          --v36;
        }
        while (v36);
      }
      v34 += v13;
      uint64_t v33 = (_WORD *)((char *)v33 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = *((void *)result + 19);
    uint64_t v11 = **((void **)result + 8);
    uint64_t v12 = **((void **)result + 17);
    float v13 = (float)*(unsigned int *)(v10 + 136);
    unint64_t v14 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v15 = *(unsigned __int8 *)(v10 + 157);
    uint64_t v16 = *(unsigned __int8 *)(v10 + 156);
    uint64_t v17 = *(unsigned __int8 *)(v10 + 155);
    uint64_t v18 = *(unsigned __int8 *)(v10 + 154);
    uint64_t v19 = **((void **)result + 16) + v14 * v12 + 8 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v11 * v8 + 8 * *(void *)(result + 36));
    do
    {
      if (v7)
      {
        uint64_t v20 = v7;
        long long v21 = result;
        int64x2_t v22 = (_WORD *)v19;
        do
        {
          _H2 = *(_WORD *)&v21[2 * v18];
          __asm { FCVT            S2, H2 }
          float v29 = v13 * _S2;
          BOOL v30 = (float)(v13 * _S2) <= 65535.0;
          float v31 = 65535.0;
          if (v30)
          {
            float v31 = v29;
            if (v29 < 0.0) {
              float v31 = 0.0;
            }
          }
          _H3 = *(_WORD *)&v21[2 * v17];
          __asm { FCVT            S3, H3 }
          float v34 = v13 * _S3;
          BOOL v30 = (float)(v13 * _S3) <= 65535.0;
          float v35 = 65535.0;
          if (v30)
          {
            float v35 = v34;
            if (v34 < 0.0) {
              float v35 = 0.0;
            }
          }
          _H4 = *(_WORD *)&v21[2 * v16];
          __asm { FCVT            S4, H4 }
          float v38 = v13 * _S4;
          BOOL v30 = (float)(v13 * _S4) <= 65535.0;
          float v39 = 65535.0;
          if (v30)
          {
            float v39 = v38;
            if (v38 < 0.0) {
              float v39 = 0.0;
            }
          }
          _H5 = *(_WORD *)&v21[2 * v15];
          __asm { FCVT            S5, H5 }
          v21 += 8;
          *int64x2_t v22 = __rev16(llroundf(_S5 * 65535.0));
          v22[1] = __rev16(llroundf(v31));
          v22[2] = __rev16(llroundf(v35));
          v22[3] = __rev16(llroundf(v39));
          v22 += 4;
          --v20;
        }
        while (v20);
      }
      result += v11;
      v19 += v12;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, uint32x4_t _Q5)
{
  uint64_t v8 = 0;
  unint64_t v9 = *(void *)(a1 + 20);
  uint64_t v10 = *(void *)(a1 + 36);
  uint64_t v11 = *(void *)(a1 + 44);
  uint64_t v12 = *(void *)(a1 + 28);
  unint64_t v13 = *a1;
  unint64_t v14 = v12 * a2 / v13;
  uint64_t v15 = v14 + v11;
  unint64_t v16 = (v12 + v12 * a2) / v13;
  uint64_t v17 = v16 + v11;
  uint64_t v18 = *((void *)a1 + 14);
  unint64_t v19 = *((void *)a1 + 13) * a2;
  uint64_t v20 = *((void *)a1 + 19);
  uint64_t v22 = *((void *)a1 + 15);
  long long v21 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v23 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v24 = **((void **)a1 + 8);
  uint64_t result = **((void **)a1 + 7);
  uint64_t v26 = *v23;
  uint64_t v27 = *v21;
  uint64_t v28 = *(unsigned __int8 *)(v20 + 154);
  v163[0] = *(unsigned char *)(v20 + 154);
  uint64_t v29 = *(unsigned __int8 *)(v20 + 155);
  v163[1] = *(unsigned char *)(v20 + 155);
  uint64_t v30 = *(unsigned __int8 *)(v20 + 156);
  v163[2] = *(unsigned char *)(v20 + 156);
  uint64_t v31 = *(unsigned __int8 *)(v20 + 157);
  v163[3] = *(unsigned char *)(v20 + 157);
  _S31 = *(float *)(v20 + 72);
  float v160 = *(float *)(v20 + 80);
  float v161 = *(float *)(v20 + 76);
  uint64_t v33 = v19 / v13 + v22;
  uint64_t v34 = v24 * v15;
  float v158 = *(float *)(v20 + 88);
  float v159 = *(float *)(v20 + 84);
  uint64_t v35 = v26 * v33;
  float v156 = *(float *)(v20 + 96);
  float v157 = *(float *)(v20 + 92);
  _S17 = *(float *)(v20 + 108);
  float v154 = *(float *)(v20 + 104);
  float v155 = *(float *)(v20 + 100);
  _S18 = *(float *)(v20 + 112);
  _S19 = *(float *)(v20 + 116);
  _S20 = *(float *)(v20 + 120);
  memset(v162, 0, sizeof(v162));
  do
  {
    unsigned int v40 = 0;
    char v41 = v163[v8];
    do
    {
      *((unsigned char *)v162 + 8 * (((_BYTE)v8 + (v40 >> 3)) & 0x1F) + v40) = v41 + 4 * v40;
      ++v40;
    }
    while (v40 != 8);
    ++v8;
  }
  while (v8 != 4);
  if (v16 != v14)
  {
    uint64_t v42 = 0;
    uint64_t v43 = v17 - v15;
    uint64_t v44 = v20 + 16548;
    __asm
    {
      FCVT            H8, S17
      FCVT            H9, S18
      FCVT            H10, S19
    }
    uint64_t v52 = v20 + 32932;
    uint64_t v53 = v20 + 164;
    __asm
    {
      FCVT            H11, S20
      FCVT            H12, S31
    }
    _S0 = v161;
    __asm { FCVT            H13, S0 }
    _S0 = v160;
    __asm { FCVT            H14, S0 }
    _S0 = v159;
    __asm { FCVT            H15, S0 }
    _S1 = v157;
    _S0 = v158;
    __asm { FCVT            H0, S0 }
    uint64_t v65 = v27 + v35 + 8 * v18;
    __asm { FCVT            H1, S1 }
    _S3 = v155;
    _S2 = v156;
    __asm { FCVT            H2, S2 }
    uint64_t v70 = result + v34 + 8 * v10;
    __asm { FCVT            H3, S3 }
    uint64_t result = (v9 - 7);
    _S4 = v154;
    __asm { FCVT            H4, S4 }
    uint64_t v151 = v30;
    uint64_t v152 = v31;
    uint64_t v149 = v28;
    uint64_t v150 = v29;
    v74.i64[0] = 0x7000700070007000;
    v74.i64[1] = 0x7000700070007000;
    v75.i64[0] = 0x9000900090009000;
    v75.i64[1] = 0x9000900090009000;
    float v153 = _S31;
    do
    {
      if ((int)v9 < 8)
      {
        unint64_t v127 = 0;
        unsigned int v78 = (__int16 *)v65;
        unsigned int v77 = (const __int16 *)v70;
      }
      else
      {
        int v76 = 0;
        unsigned int v77 = (const __int16 *)v70;
        unsigned int v78 = (__int16 *)v65;
        do
        {
          int16x8x4_t v164 = vld4q_s16(v77);
          v77 += 32;
          uint16x8_t v79 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v164.val[0], v74), (float16x8_t)0), v75));
          uint32x4_t v80 = vmovl_high_u16(v79);
          float16x8_t v81 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v79.i8);
          v82.i16[0] = *(_WORD *)(v53 + 2 * v81.u32[0]);
          uint64_t v83 = v80.u32[1];
          uint32x4_t v84 = (__int16 *)(v53 + 2 * v80.u32[0]);
          uint64_t v85 = v80.u32[3];
          uint64_t v86 = (__int16 *)(v53 + 2 * v80.u32[2]);
          uint16x8_t v87 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v164.val[1], v74), (float16x8_t)0), v75));
          uint32x4_t v88 = vmovl_high_u16(v87);
          *(void *)&long long v89 = v88.u32[2];
          *((void *)&v89 + 1) = v88.u32[3];
          long long v90 = v89;
          uint32x4_t v91 = vmovl_u16(*(uint16x4_t *)v87.i8);
          *((void *)&v89 + 1) = v91.u32[3];
          v81.i16[0] = *(_WORD *)(v53 + 2 * v91.u32[0]);
          uint16x8_t v92 = (__int16 *)(v53 + 2 * v88.u32[0]);
          uint32x4_t v93 = (__int16 *)(v53 + 2 * v88.u32[1]);
          v82.i16[1] = *(_WORD *)(v53 + 2 * v81.u32[1]);
          v81.i16[1] = *(_WORD *)(v53 + 2 * v91.u32[1]);
          v82.i16[2] = *(_WORD *)(v53 + 2 * v81.u32[2]);
          v81.i16[2] = *(_WORD *)(v53 + 2 * v91.u32[2]);
          v82.i16[3] = *(_WORD *)(v53 + 2 * v81.u32[3]);
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v164.val[2], v74), (float16x8_t)0), v75));
          v81.i16[3] = *(_WORD *)(v53 + 2 * *((void *)&v89 + 1));
          uint32x4_t v95 = vmovl_high_u16(v94);
          uint32x4_t v96 = vmovl_u16(*(uint16x4_t *)v94.i8);
          v82.i16[4] = *v84;
          v81.i16[4] = *v92;
          v97.i16[0] = *(_WORD *)(v53 + 2 * v96.u32[0]);
          v82.i16[5] = *(_WORD *)(v53 + 2 * v83);
          v81.i16[5] = *v93;
          v82.i16[6] = *v86;
          v81.i16[6] = *(_WORD *)(v53 + 2 * v90);
          v97.i16[1] = *(_WORD *)(v53 + 2 * v96.u32[1]);
          v82.i16[7] = *(_WORD *)(v53 + 2 * v85);
          v97.i16[2] = *(_WORD *)(v53 + 2 * v96.u32[2]);
          v97.i16[3] = *(_WORD *)(v53 + 2 * v96.u32[3]);
          v81.i16[7] = *(_WORD *)(v53 + 2 * *((void *)&v90 + 1));
          v97.i16[4] = *(_WORD *)(v53 + 2 * v95.u32[0]);
          v97.i16[5] = *(_WORD *)(v53 + 2 * v95.u32[1]);
          v97.i16[6] = *(_WORD *)(v53 + 2 * v95.u32[2]);
          v97.i16[7] = *(_WORD *)(v53 + 2 * v95.u32[3]);
          uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v82, _H8), v81, _H9), v97, _H10), vmaxq_f16(vmaxq_f16(v82, v81), v97), _H11), (float16x8_t)0), v75));
          uint32x4_t v99 = vmovl_high_u16(v98);
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v98.i8);
          v101.i16[0] = *(_WORD *)(v44 + 2 * v100.u32[0]);
          v101.i16[1] = *(_WORD *)(v44 + 2 * v100.u32[1]);
          v101.i16[2] = *(_WORD *)(v44 + 2 * v100.u32[2]);
          v101.i16[3] = *(_WORD *)(v44 + 2 * v100.u32[3]);
          v101.i16[4] = *(_WORD *)(v44 + 2 * v99.u32[0]);
          v101.i16[5] = *(_WORD *)(v44 + 2 * v99.u32[1]);
          v101.i16[6] = *(_WORD *)(v44 + 2 * v99.u32[2]);
          v101.i16[7] = *(_WORD *)(v44 + 2 * v99.u32[3]);
          float16x8_t v102 = vmulq_f16(v82, v101);
          float16x8_t v103 = vmulq_f16(v81, v101);
          float16x8_t v104 = vmulq_f16(v97, v101);
          float16x8_t v105 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v102, _H15), v103, _H0), v104, _H1);
          float16x8_t v106 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v104, _H4), v103, _H3), v102, _H2);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v102, _H12), v103, _H13), v104, _H14), (float16x8_t)0), v75));
          uint32x4_t v108 = vmovl_high_u16(v107);
          uint32x4_t v109 = vmovl_u16(*(uint16x4_t *)v107.i8);
          v164.val[0].i16[0] = *(_WORD *)(v52 + 2 * v109.u32[0]);
          uint32x4_t v110 = (__int16 *)(v52 + 2 * v109.u32[2]);
          uint32x4_t v111 = (__int16 *)(v52 + 2 * v109.u32[3]);
          unint64_t v112 = (__int16 *)(v52 + 2 * v108.u32[0]);
          unint64_t v113 = (__int16 *)(v52 + 2 * v108.u32[1]);
          uint64_t v114 = (__int16 *)(v52 + 2 * v108.u32[2]);
          v164.val[0].i16[1] = *(_WORD *)(v52 + 2 * v109.u32[1]);
          float16x8_t v115 = (__int16 *)(v52 + 2 * v108.u32[3]);
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v105, (float16x8_t)0), v75));
          v164.val[0].i16[2] = *v110;
          uint32x4_t v117 = vmovl_high_u16(v116);
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v116.i8);
          v164.val[0].i16[3] = *v111;
          v164.val[0].i16[4] = *v112;
          v164.val[0].i16[5] = *v113;
          v164.val[0].i16[6] = *v114;
          uint64_t v119 = (__int16 *)(v52 + 2 * v117.u32[1]);
          v164.val[0].i16[7] = *v115;
          uint64_t v120 = (__int16 *)(v52 + 2 * v117.u32[2]);
          v164.val[1].i16[0] = *(_WORD *)(v52 + 2 * v118.u32[0]);
          v164.val[1].i16[1] = *(_WORD *)(v52 + 2 * v118.u32[1]);
          v164.val[1].i16[2] = *(_WORD *)(v52 + 2 * v118.u32[2]);
          v164.val[1].i16[3] = *(_WORD *)(v52 + 2 * v118.u32[3]);
          uint64_t v121 = (__int16 *)(v52 + 2 * v117.u32[3]);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v106, (float16x8_t)0), v75));
          v164.val[1].i16[4] = *(_WORD *)(v52 + 2 * v117.u32[0]);
          uint32x4_t v123 = vmovl_high_u16(v122);
          *(void *)&long long v89 = v123.u32[2];
          *((void *)&v89 + 1) = v123.u32[3];
          long long v124 = v89;
          *(void *)&long long v89 = v123.u32[0];
          *((void *)&v89 + 1) = v123.u32[1];
          long long v125 = v89;
          _Q5 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v164.val[1].i16[5] = *v119;
          *(void *)&long long v89 = _Q5.u32[2];
          *((void *)&v89 + 1) = _Q5.u32[3];
          long long v126 = v89;
          *((void *)&v89 + 1) = _Q5.u32[1];
          _Q5.i32[1] = 0;
          v164.val[1].i16[6] = *v120;
          v164.val[1].i16[7] = *v121;
          v164.val[2].i16[0] = *(_WORD *)(v52 + 2 * _Q5.u32[0]);
          v164.val[2].i16[1] = *(_WORD *)(v52 + 2 * *((void *)&v89 + 1));
          v164.val[2].i16[2] = *(_WORD *)(v52 + 2 * v126);
          v164.val[2].i16[3] = *(_WORD *)(v52 + 2 * *((void *)&v126 + 1));
          v164.val[2].i16[4] = *(_WORD *)(v52 + 2 * v125);
          v164.val[2].i16[5] = *(_WORD *)(v52 + 2 * *((void *)&v125 + 1));
          v164.val[2].i16[6] = *(_WORD *)(v52 + 2 * v124);
          v164.val[2].i16[7] = *(_WORD *)(v52 + 2 * *((void *)&v124 + 1));
          vst4q_s16(v78, v164);
          v78 += 32;
          v76 += 8;
        }
        while (v76 < (int)result);
        unint64_t v127 = v9 & 0xFFFFFFF8;
        _S31 = v153;
      }
      _CF = v9 >= v127;
      unint64_t v128 = v9 - v127;
      if (v128 != 0 && _CF)
      {
        long long v129 = &v77[v152];
        uint32x4_t v130 = (__int16 *)&v77[v151];
        float v131 = (unsigned __int16 *)&v77[v150];
        short float v132 = (unsigned __int16 *)&v77[v149];
        do
        {
          _Q5.i16[0] = *v132;
          _Q5.i16[1] = *v131;
          _D6 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          *(int32x2_t *)_Q5.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q5.i8), _D6), 0), _D6)));
          _Q5.i16[0] = *(_WORD *)(v53 + 2 * _Q5.u32[0]);
          _D6.i16[0] = *v130;
          __asm
          {
            FCVT            S6, H6
            FCVT            S22, H5
          }
          _Q5.i16[0] = *(_WORD *)(v53 + 2 * _Q5.u32[1]);
          __asm { FCVT            S23, H5 }
          _Q5.i16[0] = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(_D6.f32[0] * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S24, H5 }
          float v137 = fmaxf(_S22, fmaxf(_S23, _S24));
          float v138 = (float)((float)((float)(_S18 * _S23) + (float)(_S17 * _S22)) + (float)(_S19 * _S24))
               + (float)(_S20 * v137);
          float v139 = 8191.0;
          if (v138 <= 8191.0)
          {
            float v139 = (float)((float)((float)(_S18 * _S23) + (float)(_S17 * _S22)) + (float)(_S19 * _S24))
                 + (float)(_S20 * v137);
            if (v138 < 0.0) {
              float v139 = 0.0;
            }
          }
          _H5 = *(_WORD *)(v44 + 2 * llroundf(v139));
          __int16 v141 = *v129;
          __asm { FCVT            S5, H5 }
          float v143 = _S22 * _S5;
          float v144 = _S23 * _S5;
          float v145 = _S24 * _S5;
          float v146 = (float)((float)(v161 * v144) + (float)(v143 * _S31)) + (float)(v145 * v160);
          float v147 = (float)((float)(v158 * v144) + (float)(v143 * v159)) + (float)(v145 * v157);
          float v148 = (float)((float)(v155 * v144) + (float)(v143 * v156)) + (float)(v145 * v154);
          LOWORD(v144) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          LOWORD(v148) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          *unsigned int v78 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          v78[1] = LOWORD(v144);
          v129 += 4;
          v130 += 4;
          v78[2] = LOWORD(v148);
          v78[3] = v141;
          v131 += 4;
          v132 += 4;
          v78 += 4;
          --v128;
        }
        while (v128);
      }
      v70 += v24;
      v65 += v26;
      ++v42;
    }
    while (v42 != v43);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *(void *)(result + 152);
    int64x2_t v12 = *(void **)(result + 56);
    uint64_t v13 = **(void **)(result + 64);
    uint64_t v14 = **(void **)(result + 136);
    float v15 = *(float *)(v11 + 72);
    float v16 = *(float *)(v11 + 76);
    float v17 = *(float *)(v11 + 80);
    float v18 = *(float *)(v11 + 84);
    float v19 = *(float *)(v11 + 88);
    float v20 = *(float *)(v11 + 92);
    float v21 = *(float *)(v11 + 96);
    float v22 = *(float *)(v11 + 100);
    uint64_t v23 = v11 + 164;
    uint64_t v24 = v11 + 16548;
    uint64_t v25 = v11 + 32932;
    float v26 = *(float *)(v11 + 104);
    float v27 = *(float *)(v11 + 108);
    float v28 = *(float *)(v11 + 112);
    float v29 = *(float *)(v11 + 116);
    float v30 = *(float *)(v11 + 120);
    uint64_t v31 = *(void *)(result + 112);
    unint64_t v32 = *(void *)(result + 104) * a2 / v4 + *(void *)(result + 120);
    uint64_t v33 = *(void *)(result + 36);
    uint64_t v34 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v35 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v36 = **(void **)(result + 128) + v32 * v14;
    uint64_t result = *(unsigned __int8 *)(v11 + 155);
    uint64_t v37 = *(unsigned __int8 *)(v11 + 154);
    float v38 = (_WORD *)(v36 + 8 * v31);
    uint64_t v39 = *v12 + v13 * v9 + 8 * v33;
    float32x2_t v40 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        uint64_t v41 = v8;
        uint64_t v42 = v39;
        uint64_t v43 = v38;
        do
        {
          _D25.i16[0] = *(_WORD *)(v42 + 2 * v37);
          _D25.i16[1] = *(_WORD *)(v42 + 2 * result);
          _D25 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D25), v40), 0), v40)));
          _D25.i16[0] = *(_WORD *)(v23 + 2 * _D25.u32[0]);
          _H26 = *(_WORD *)(v42 + 2 * v35);
          __asm
          {
            FCVT            S26, H26
            FCVT            S25, H25
          }
          _H27 = *(_WORD *)(v23 + 2 * _D25.u32[1]);
          unsigned int v51 = llroundf(fminf(fmaxf(_S26 * 8191.0, 0.0), 8191.0));
          __asm { FCVT            S26, H27 }
          _H27 = *(_WORD *)(v23 + 2 * v51);
          __asm { FCVT            S27, H27 }
          float v55 = (float)((float)((float)(v28 * _S26) + (float)(v27 * *(float *)_D25.i32)) + (float)(v29 * _S27))
              + (float)(v30 * fmaxf(*(float *)_D25.i32, fmaxf(_S26, _S27)));
          float v56 = 8191.0;
          if (v55 <= 8191.0)
          {
            float v56 = v55;
            if (v55 < 0.0) {
              float v56 = 0.0;
            }
          }
          __int16 v57 = *(_WORD *)(v42 + 2 * v34);
          _H28 = *(_WORD *)(v24 + 2 * llroundf(v56));
          __asm { FCVT            S28, H28 }
          float v60 = *(float *)_D25.i32 * _S28;
          float v61 = _S26 * _S28;
          float v62 = _S27 * _S28;
          float v63 = (float)((float)(v16 * v61) + (float)(v60 * v15)) + (float)(v62 * v17);
          float v64 = (float)((float)(v19 * v61) + (float)(v60 * v18)) + (float)(v62 * v20);
          float v65 = (float)((float)(v22 * v61) + (float)(v60 * v21)) + (float)(v62 * v26);
          LOWORD(v62) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          LOWORD(v65) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          *uint64_t v43 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          v43[1] = LOWORD(v62);
          v42 += 8;
          v43[2] = LOWORD(v65);
          v43[3] = v57;
          v43 += 4;
          --v41;
        }
        while (v41);
      }
      v39 += v13;
      float v38 = (_WORD *)((char *)v38 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = 0;
  unint64_t v4 = *(void *)(a1 + 20);
  uint64_t v5 = *(void *)(a1 + 36);
  uint64_t v6 = *(void *)(a1 + 44);
  uint64_t v7 = *(void *)(a1 + 28);
  unint64_t v8 = *a1;
  unint64_t v9 = v7 * a2 / v8;
  uint64_t v10 = v9 + v6;
  unint64_t v11 = (v7 + v7 * a2) / v8;
  uint64_t v12 = v11 + v6;
  uint64_t v13 = *((void *)a1 + 14);
  unint64_t v14 = *((void *)a1 + 13) * a2;
  uint64_t v15 = *((void *)a1 + 19);
  uint64_t v16 = *((void *)a1 + 15);
  uint64_t v17 = **((void **)a1 + 8);
  uint64_t v18 = **((void **)a1 + 7);
  uint64_t v19 = **((void **)a1 + 17);
  uint64_t result = **((void **)a1 + 16);
  uint64_t v21 = *(unsigned __int8 *)(v15 + 154);
  v124[0] = *(unsigned char *)(v15 + 154);
  uint64_t v22 = *(unsigned __int8 *)(v15 + 155);
  v124[1] = *(unsigned char *)(v15 + 155);
  uint64_t v23 = *(unsigned __int8 *)(v15 + 156);
  v124[2] = *(unsigned char *)(v15 + 156);
  uint64_t v24 = *(unsigned __int8 *)(v15 + 157);
  v124[3] = *(unsigned char *)(v15 + 157);
  uint64_t v25 = v14 / v8 + v16;
  uint64_t v26 = v17 * v10;
  _S27 = *(float *)(v15 + 72);
  _S1 = *(float *)(v15 + 76);
  uint64_t v29 = v19 * v25;
  _S2 = *(float *)(v15 + 80);
  _S3 = *(float *)(v15 + 84);
  _S4 = *(float *)(v15 + 88);
  _S5 = *(float *)(v15 + 92);
  _S6 = *(float *)(v15 + 96);
  _S7 = *(float *)(v15 + 100);
  _S16 = *(float *)(v15 + 104);
  memset(v123, 0, sizeof(v123));
  do
  {
    unsigned int v37 = 0;
    char v38 = v124[v3];
    do
    {
      *((unsigned char *)v123 + 8 * (((_BYTE)v3 + (v37 >> 3)) & 0x1F) + v37) = v38 + 4 * v37;
      ++v37;
    }
    while (v37 != 8);
    ++v3;
  }
  while (v3 != 4);
  if (v11 != v9)
  {
    uint64_t v39 = 0;
    uint64_t v40 = v12 - v10;
    uint64_t v41 = v15 + 16548;
    uint64_t v42 = v15 + 164;
    __asm
    {
      FCVT            H8, S27
      FCVT            H9, S1
      FCVT            H10, S2
      FCVT            H11, S3
      FCVT            H12, S4
      FCVT            H13, S5
      FCVT            H14, S6
    }
    uint64_t v54 = result + v29 + 8 * v13;
    __asm
    {
      FCVT            H15, S7
      FCVT            H0, S16
    }
    uint64_t v121 = v23;
    uint64_t result = (v4 - 7);
    uint64_t v119 = v21;
    uint64_t v120 = v22;
    v57.i64[0] = 0x7000700070007000;
    v57.i64[1] = 0x7000700070007000;
    uint64_t v58 = v18 + v26 + 8 * v5;
    v59.i64[0] = 0x9000900090009000;
    v59.i64[1] = 0x9000900090009000;
    float v122 = _S27;
    do
    {
      if ((int)v4 < 8)
      {
        unint64_t v101 = 0;
        float v62 = (__int16 *)v54;
        float v61 = (const __int16 *)v58;
      }
      else
      {
        int v60 = 0;
        float v61 = (const __int16 *)v58;
        float v62 = (__int16 *)v54;
        do
        {
          int16x8x4_t v125 = vld4q_s16(v61);
          v61 += 32;
          uint16x8_t v63 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v125.val[0], v57), (float16x8_t)0), v59));
          uint32x4_t v64 = vmovl_high_u16(v63);
          float16x8_t v65 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v63.i8);
          v65.i16[0] = *(_WORD *)(v42 + 2 * v65.u32[0]);
          uint64_t v66 = v64.u32[1];
          uint64_t v67 = (__int16 *)(v42 + 2 * v64.u32[0]);
          uint64_t v68 = v64.u32[3];
          float v69 = (__int16 *)(v42 + 2 * v64.u32[2]);
          uint16x8_t v70 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v125.val[1], v57), (float16x8_t)0), v59));
          uint32x4_t v71 = vmovl_high_u16(v70);
          v72.i64[0] = v71.u32[2];
          v72.i64[1] = v71.u32[3];
          float16x8_t v73 = v72;
          v72.i64[0] = v71.u32[0];
          uint32x4_t v74 = vmovl_u16(*(uint16x4_t *)v70.i8);
          v75.i16[0] = *(_WORD *)(v42 + 2 * v74.u32[0]);
          int v76 = (__int16 *)(v42 + 2 * v74.u32[3]);
          v65.i16[1] = *(_WORD *)(v42 + 2 * v65.u32[1]);
          unsigned int v77 = (__int16 *)(v42 + 2 * v71.u32[1]);
          v75.i16[1] = *(_WORD *)(v42 + 2 * v74.u32[1]);
          v65.i16[2] = *(_WORD *)(v42 + 2 * v65.u32[2]);
          unsigned int v78 = (__int16 *)(v42 + 2 * v73.i64[0]);
          uint16x8_t v79 = (__int16 *)(v42 + 2 * v73.i64[1]);
          v75.i16[2] = *(_WORD *)(v42 + 2 * v74.u32[2]);
          uint16x8_t v80 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v125.val[2], v57), (float16x8_t)0), v59));
          uint32x4_t v81 = vmovl_high_u16(v80);
          v65.i16[3] = *(_WORD *)(v42 + 2 * v65.u32[3]);
          uint32x4_t v82 = vmovl_u16(*(uint16x4_t *)v80.i8);
          v75.i16[3] = *v76;
          v73.i16[0] = *(_WORD *)(v42 + 2 * v82.u32[0]);
          v65.i16[4] = *v67;
          v75.i16[4] = *(_WORD *)(v42 + 2 * v72.i64[0]);
          v65.i16[5] = *(_WORD *)(v42 + 2 * v66);
          v73.i16[1] = *(_WORD *)(v42 + 2 * v82.u32[1]);
          v75.i16[5] = *v77;
          v73.i16[2] = *(_WORD *)(v42 + 2 * v82.u32[2]);
          v65.i16[6] = *v69;
          v75.i16[6] = *v78;
          v73.i16[3] = *(_WORD *)(v42 + 2 * v82.u32[3]);
          v73.i16[4] = *(_WORD *)(v42 + 2 * v81.u32[0]);
          v65.i16[7] = *(_WORD *)(v42 + 2 * v68);
          v73.i16[5] = *(_WORD *)(v42 + 2 * v81.u32[1]);
          v73.i16[6] = *(_WORD *)(v42 + 2 * v81.u32[2]);
          v75.i16[7] = *v79;
          v73.i16[7] = *(_WORD *)(v42 + 2 * v81.u32[3]);
          float16x8_t v83 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v65, _H11), v75, _H12), v73, _H13);
          float16x8_t v84 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v73, _H0), v75, _H15), v65, _H14);
          uint16x8_t v85 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v65, _H8), v75, _H9), v73, _H10), (float16x8_t)0), v59));
          uint32x4_t v86 = vmovl_high_u16(v85);
          uint32x4_t v87 = vmovl_u16(*(uint16x4_t *)v85.i8);
          v125.val[0].i16[0] = *(_WORD *)(v41 + 2 * v87.u32[0]);
          uint32x4_t v88 = (__int16 *)(v41 + 2 * v87.u32[2]);
          long long v89 = (__int16 *)(v41 + 2 * v87.u32[3]);
          v125.val[0].i16[1] = *(_WORD *)(v41 + 2 * v87.u32[1]);
          uint16x8_t v90 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v83, (float16x8_t)0), v59));
          v125.val[0].i16[2] = *v88;
          uint32x4_t v91 = vmovl_high_u16(v90);
          uint32x4_t v92 = vmovl_u16(*(uint16x4_t *)v90.i8);
          v125.val[0].i16[3] = *v89;
          v125.val[0].i16[4] = *(_WORD *)(v41 + 2 * v86.u32[0]);
          v125.val[0].i16[5] = *(_WORD *)(v41 + 2 * v86.u32[1]);
          v125.val[0].i16[6] = *(_WORD *)(v41 + 2 * v86.u32[2]);
          uint32x4_t v93 = (__int16 *)(v41 + 2 * v91.u32[1]);
          v125.val[0].i16[7] = *(_WORD *)(v41 + 2 * v86.u32[3]);
          uint16x8_t v94 = (__int16 *)(v41 + 2 * v91.u32[2]);
          v125.val[1].i16[0] = *(_WORD *)(v41 + 2 * v92.u32[0]);
          v125.val[1].i16[1] = *(_WORD *)(v41 + 2 * v92.u32[1]);
          v125.val[1].i16[2] = *(_WORD *)(v41 + 2 * v92.u32[2]);
          v125.val[1].i16[3] = *(_WORD *)(v41 + 2 * v92.u32[3]);
          uint32x4_t v95 = (__int16 *)(v41 + 2 * v91.u32[3]);
          uint16x8_t v96 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v84, (float16x8_t)0), v59));
          v125.val[1].i16[4] = *(_WORD *)(v41 + 2 * v91.u32[0]);
          uint32x4_t v97 = vmovl_high_u16(v96);
          v72.i64[0] = v97.u32[2];
          v72.i64[1] = v97.u32[3];
          float16x8_t v98 = v72;
          v72.i64[0] = v97.u32[0];
          v72.i64[1] = v97.u32[1];
          float16x8_t v99 = v72;
          _Q17 = vmovl_u16(*(uint16x4_t *)v96.i8);
          v125.val[1].i16[5] = *v93;
          v72.i64[0] = _Q17.u32[2];
          v72.i64[1] = _Q17.u32[3];
          float16x8_t v100 = v72;
          v72.i64[1] = _Q17.u32[1];
          _Q17.i32[1] = 0;
          v125.val[1].i16[6] = *v94;
          v125.val[1].i16[7] = *v95;
          v125.val[2].i16[0] = *(_WORD *)(v41 + 2 * _Q17.u32[0]);
          v125.val[2].i16[1] = *(_WORD *)(v41 + 2 * v72.i64[1]);
          v125.val[2].i16[2] = *(_WORD *)(v41 + 2 * v100.i64[0]);
          v125.val[2].i16[3] = *(_WORD *)(v41 + 2 * v100.i64[1]);
          v125.val[2].i16[4] = *(_WORD *)(v41 + 2 * v99.i64[0]);
          v125.val[2].i16[5] = *(_WORD *)(v41 + 2 * v99.i64[1]);
          v125.val[2].i16[6] = *(_WORD *)(v41 + 2 * v98.i64[0]);
          v125.val[2].i16[7] = *(_WORD *)(v41 + 2 * v98.i64[1]);
          vst4q_s16(v62, v125);
          v62 += 32;
          v60 += 8;
        }
        while (v60 < (int)result);
        unint64_t v101 = v4 & 0xFFFFFFF8;
        _S27 = v122;
      }
      _CF = v4 >= v101;
      unint64_t v102 = v4 - v101;
      if (v102 != 0 && _CF)
      {
        float16x8_t v103 = &v61[v24];
        float16x8_t v104 = &v61[v121];
        float16x8_t v105 = &v61[v120];
        float16x8_t v106 = &v61[v119];
        do
        {
          __int16 v107 = *v106;
          v106 += 4;
          _Q17.i16[0] = v107;
          __int16 v108 = *v105;
          v105 += 4;
          __int16 v109 = v108;
          __int16 v110 = *v104;
          v104 += 4;
          _H23 = v110;
          __asm { FCVT            S23, H23 }
          _Q17.i16[1] = v109;
          float32x2_t v113 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          *(int32x2_t *)_Q17.i8 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q17.i8), v113), 0), v113)));
          _Q17.i16[0] = *(_WORD *)(v42 + 2 * _Q17.u32[0]);
          _H24 = *(_WORD *)(v42 + 2 * _Q17.u32[1]);
          __asm { FCVT            S24, H24 }
          LOWORD(_S23) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S23 * 8191.0, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S23, H23
          }
          float v117 = (float)((float)(_S1 * _S24) + (float)(*(float *)_Q17.i32 * _S27)) + (float)(_S23 * _S2);
          v113.i16[0] = *(_WORD *)(v41
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(_S4 * _S24) + (float)(*(float *)_Q17.i32 * _S3))+ (float)(_S23 * _S5), 0.0), 8191.0)));
          _Q17.i16[0] = *(_WORD *)(v41
                                 + 2
                                 * llroundf(fminf(fmaxf((float)((float)(_S7 * _S24) + (float)(*(float *)_Q17.i32 * _S6))+ (float)(_S23 * _S16), 0.0), 8191.0)));
          __int16 v118 = *v103;
          v103 += 4;
          *float v62 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          v62[1] = v113.i16[0];
          v62[2] = _Q17.i16[0];
          v62[3] = v118;
          v62 += 4;
          --v102;
        }
        while (v102);
      }
      v58 += v17;
      v54 += v19;
      ++v39;
    }
    while (v39 != v40);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_RGhA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *(void *)(result + 152);
    int64x2_t v12 = *(void **)(result + 56);
    uint64_t v13 = **(void **)(result + 64);
    uint64_t v14 = **(void **)(result + 136);
    float v15 = *(float *)(v11 + 72);
    float v16 = *(float *)(v11 + 76);
    float v17 = *(float *)(v11 + 80);
    float v18 = *(float *)(v11 + 84);
    float v19 = *(float *)(v11 + 88);
    float v20 = *(float *)(v11 + 92);
    float v21 = *(float *)(v11 + 96);
    float v22 = *(float *)(v11 + 100);
    float v23 = *(float *)(v11 + 104);
    uint64_t v24 = v11 + 164;
    uint64_t v25 = v11 + 16548;
    uint64_t v26 = *(void *)(result + 112);
    unint64_t v27 = *(void *)(result + 104) * a2 / v4 + *(void *)(result + 120);
    uint64_t v28 = *(void *)(result + 36);
    uint64_t v29 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v30 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v31 = **(void **)(result + 128) + v27 * v14;
    uint64_t v32 = *(unsigned __int8 *)(v11 + 155);
    uint64_t result = *(unsigned __int8 *)(v11 + 154);
    uint64_t v33 = (_WORD *)(v31 + 8 * v26);
    uint64_t v34 = *v12 + v13 * v9 + 8 * v28;
    float32x2_t v35 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        uint64_t v36 = v8;
        uint64_t v37 = v34;
        char v38 = v33;
        do
        {
          _D21.i16[0] = *(_WORD *)(v37 + 2 * result);
          _D21.i16[1] = *(_WORD *)(v37 + 2 * v32);
          _H22 = *(_WORD *)(v37 + 2 * v30);
          __asm { FCVT            S22, H22 }
          _D21 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D21), v35), 0), v35)));
          __int16 v45 = *(_WORD *)(v37 + 2 * v29);
          _H24 = *(_WORD *)(v24 + 2 * _D21.u32[1]);
          unsigned __int32 v47 = _D21.i32[0];
          *(float *)_D21.i32 = fmaxf(_S22 * 8191.0, 0.0);
          LOWORD(_S22) = *(_WORD *)(v24 + 2 * v47);
          _D21.i16[0] = *(_WORD *)(v24 + 2 * llroundf(fminf(*(float *)_D21.i32, 8191.0)));
          __asm
          {
            FCVT            S22, H22
            FCVT            S24, H24
            FCVT            S21, H21
          }
          float v50 = (float)((float)(v16 * _S24) + (float)(_S22 * v15)) + (float)(*(float *)_D21.i32 * v17);
          float v51 = (float)((float)(v19 * _S24) + (float)(_S22 * v18)) + (float)(*(float *)_D21.i32 * v20);
          *(float *)_D21.i32 = (float)((float)(v22 * _S24) + (float)(_S22 * v21)) + (float)(*(float *)_D21.i32 * v23);
          LOWORD(_S22) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v51, 0.0), 8191.0)));
          _D21.i16[0] = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(*(float *)_D21.i32, 0.0), 8191.0)));
          _WORD *v38 = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v50, 0.0), 8191.0)));
          v38[1] = LOWORD(_S22);
          v37 += 8;
          v38[2] = _D21.i16[0];
          v38[3] = v45;
          v38 += 4;
          --v36;
        }
        while (v36);
      }
      v34 += v13;
      uint64_t v33 = (_WORD *)((char *)v33 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_RGhA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGhA_rgb_RGhA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (v6 + v6 * a2) / v7;
  uint64_t v11 = v10 + v5;
  uint64_t v12 = *((void *)a1 + 14);
  int64x2_t v13 = (unsigned __int8 *)*((void *)a1 + 19);
  uint64_t v14 = **((void **)a1 + 8);
  uint64_t v15 = **((void **)a1 + 7);
  uint64_t v16 = **((void **)a1 + 17);
  uint64_t v17 = **((void **)a1 + 16);
  unint64_t v18 = *((void *)a1 + 13) * a2 / v7 + *((void *)a1 + 15);
  uint64_t result = v14 * v9;
  uint64_t v20 = v16 * v18;
  uint64_t v21 = v13[154];
  v55[0] = v13[154];
  uint64_t v22 = v13[155];
  v55[1] = v13[155];
  uint64_t v23 = v13[156];
  v55[2] = v13[156];
  uint64_t v24 = v13[157];
  v55[3] = v24;
  memset(v54, 0, sizeof(v54));
  do
  {
    unsigned int v25 = 0;
    char v26 = v55[v2];
    do
    {
      *((unsigned char *)v54 + 8 * (((_BYTE)v2 + (v25 >> 3)) & 0x1F) + v25) = v26 + 4 * v25;
      ++v25;
    }
    while (v25 != 8);
    ++v2;
  }
  while (v2 != 4);
  if (v10 != v8)
  {
    uint64_t v27 = 0;
    uint64_t v28 = v24;
    uint64_t v29 = v23;
    uint64_t v30 = v11 - v9;
    uint64_t v31 = v17 + v20;
    uint64_t v32 = v22;
    uint64_t v33 = v21;
    uint64_t v34 = v15 + result;
    uint64_t result = v3 & 0xFFFFFFF8;
    float32x2_t v35 = (__int16 *)(v31 + 8 * v12);
    uint64_t v36 = (const __int16 *)(v34 + 8 * v4);
    do
    {
      if ((int)v3 < 8)
      {
        unint64_t v40 = 0;
        uint64_t v39 = v35;
        char v38 = v36;
      }
      else
      {
        int v37 = 0;
        char v38 = v36;
        uint64_t v39 = v35;
        do
        {
          int16x8x4_t v56 = vld4q_s16(v38);
          v38 += 32;
          vst4q_s16(v39, v56);
          v39 += 32;
          v37 += 8;
        }
        while (v37 < (int)v3 - 7);
        unint64_t v40 = v3 & 0xFFFFFFF8;
      }
      BOOL v41 = v3 >= v40;
      unint64_t v42 = v3 - v40;
      if (v42 != 0 && v41)
      {
        uint64_t v43 = &v38[v28];
        uint64_t v44 = &v38[v29];
        __int16 v45 = &v38[v32];
        float v46 = &v38[v33];
        do
        {
          __int16 v47 = *v46;
          v46 += 4;
          __int16 v48 = v47;
          __int16 v49 = *v45;
          v45 += 4;
          __int16 v50 = v49;
          __int16 v51 = *v44;
          v44 += 4;
          __int16 v52 = v51;
          __int16 v53 = *v43;
          v43 += 4;
          *uint64_t v39 = v48;
          v39[1] = v50;
          v39[2] = v52;
          v39[3] = v53;
          v39 += 4;
          --v42;
        }
        while (v42);
      }
      uint64_t v36 = (const __int16 *)((char *)v36 + v14);
      float32x2_t v35 = (__int16 *)((char *)v35 + v16);
      ++v27;
    }
    while (v27 != v30);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = **((void **)result + 8);
    uint64_t v11 = **((void **)result + 17);
    int64x2_t v12 = (unsigned __int8 *)*((void *)result + 19);
    unint64_t v13 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v14 = v12[157];
    uint64_t v15 = v12[156];
    uint64_t v16 = v12[155];
    uint64_t v17 = v12[154];
    uint64_t v18 = **((void **)result + 16) + v13 * v11 + 8 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v10 * v8 + 8 * *(void *)(result + 36));
    do
    {
      if (v7)
      {
        uint64_t v19 = v7;
        int64x2_t v20 = result;
        long long v21 = (_WORD *)v18;
        do
        {
          __int16 v22 = *(_WORD *)&v20[2 * v17];
          __int16 v23 = *(_WORD *)&v20[2 * v16];
          __int16 v24 = *(_WORD *)&v20[2 * v15];
          __int16 v25 = *(_WORD *)&v20[2 * v14];
          v20 += 8;
          *long long v21 = v22;
          v21[1] = v23;
          v21[2] = v24;
          v21[3] = v25;
          v21 += 4;
          --v19;
        }
        while (v19);
      }
      result += v10;
      v18 += v11;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double _D5)
{
  uint64_t v8 = 0;
  unint64_t v9 = *(void *)(a1 + 20);
  uint64_t v10 = *(void *)(a1 + 36);
  uint64_t v11 = *(void *)(a1 + 44);
  uint64_t v12 = *(void *)(a1 + 28);
  unint64_t v13 = *a1;
  unint64_t v14 = v12 * a2 / v13;
  uint64_t v15 = v14 + v11;
  unint64_t v16 = (v12 + v12 * a2) / v13;
  uint64_t v17 = v16 + v11;
  uint64_t v18 = *((void *)a1 + 14);
  unint64_t v19 = *((void *)a1 + 13) * a2;
  uint64_t v20 = *((void *)a1 + 19);
  uint64_t v21 = *((void *)a1 + 15);
  uint64_t v22 = **((void **)a1 + 8);
  uint64_t v23 = **((void **)a1 + 7);
  uint64_t v24 = **((void **)a1 + 17);
  uint64_t v25 = **((void **)a1 + 16);
  v174[0] = *(unsigned char *)(v20 + 154);
  uint64_t v26 = *(unsigned __int8 *)(v20 + 155);
  v174[1] = *(unsigned char *)(v20 + 155);
  uint64_t v27 = *(unsigned __int8 *)(v20 + 156);
  _OWORD v174[2] = *(unsigned char *)(v20 + 156);
  uint64_t v28 = *(unsigned __int8 *)(v20 + 157);
  v174[3] = *(unsigned char *)(v20 + 157);
  _S21 = *(float *)(v20 + 72);
  _S22 = *(float *)(v20 + 76);
  _S23 = *(float *)(v20 + 80);
  _S24 = *(float *)(v20 + 84);
  uint64_t v33 = v19 / v13 + v21;
  _S25 = *(float *)(v20 + 88);
  _S29 = *(float *)(v20 + 92);
  _S31 = *(float *)(v20 + 96);
  float v171 = *(float *)(v20 + 104);
  float v172 = *(float *)(v20 + 100);
  float v169 = *(float *)(v20 + 112);
  float v170 = *(float *)(v20 + 108);
  float v167 = *(float *)(v20 + 120);
  float v168 = *(float *)(v20 + 116);
  memset(v173, 0, sizeof(v173));
  do
  {
    LODWORD(result) = 0;
    char v38 = v174[v8];
    do
    {
      *((unsigned char *)v173 + 8 * (((_BYTE)v8 + (result >> 3)) & 0x1F) + result) = v38 + 4 * result;
      uint64_t result = (result + 1);
    }
    while (result != 8);
    ++v8;
  }
  while (v8 != 4);
  if (v16 != v14)
  {
    uint64_t v39 = 0;
    _S0 = v170;
    __asm { FCVT            H8, S0 }
    _S0 = v169;
    __asm { FCVT            H9, S0 }
    uint64_t v48 = v17 - v15;
    _S0 = v168;
    __asm { FCVT            H10, S0 }
    uint64_t v51 = v20 + 16548;
    _S0 = v167;
    __asm
    {
      FCVT            H11, S0
      FCVT            H12, S21
      FCVT            H13, S22
    }
    uint64_t v56 = v20 + 32932;
    uint64_t result = v20 + 164;
    __asm
    {
      FCVT            H14, S23
      FCVT            H15, S24
      FCVT            H0, S25
      FCVT            H1, S29
      FCVT            H2, S31
    }
    _S4 = v171;
    _S3 = v172;
    __asm { FCVT            H3, S3 }
    float16x8_t v65 = (float *)(v25 + v24 * v33 + 16 * v18);
    __asm { FCVT            H4, S4 }
    uint64_t v67 = v23 + v22 * v15 + 8 * v10;
    int v68 = v9 - 7;
    unint64_t v153 = v9 & 0xFFFFFFF8;
    uint64_t v154 = v48;
    v69.i64[0] = 0x7000700070007000;
    v69.i64[1] = 0x7000700070007000;
    v70.i64[0] = 0x9000900090009000;
    v70.i64[1] = 0x9000900090009000;
    uint32x4_t v71 = &unk_193E7D000;
    uint64_t v163 = v22;
    unint64_t v164 = v9;
    uint64_t v162 = v24;
    float v160 = _S22;
    float v161 = _S21;
    float v158 = _S24;
    float v159 = _S23;
    float v156 = _S29;
    float v157 = _S25;
    float v155 = _S31;
    do
    {
      if ((int)v9 < 8)
      {
        unint64_t v127 = 0;
        int16x8x4_t v125 = v65;
        float16x8_t v73 = (const __int16 *)v67;
      }
      else
      {
        uint64_t v165 = v65;
        uint64_t v166 = v39;
        int v72 = 0;
        float16x8_t v73 = (const __int16 *)v67;
        do
        {
          float32x4x4_t v176 = (float32x4x4_t)vld4q_s16(v73);
          v73 += 32;
          uint16x8_t v74 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v176.val[0], v69), (float16x8_t)0), v70));
          uint32x4_t v75 = vmovl_high_u16(v74);
          uint32x4_t v76 = vmovl_u16(*(uint16x4_t *)v74.i8);
          uint64_t v77 = v76.u32[1];
          uint64_t v78 = v76.u32[3];
          v79.i16[0] = *(_WORD *)(result + 2 * v76.u32[0]);
          uint16x8_t v80 = (__int16 *)(result + 2 * v76.u32[2]);
          uint16x8_t v81 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v176.val[1], v69), (float16x8_t)0), v70));
          uint32x4_t v82 = vmovl_high_u16(v81);
          uint32x4_t v83 = vmovl_u16(*(uint16x4_t *)v81.i8);
          v84.i16[0] = *(_WORD *)(result + 2 * v83.u32[0]);
          uint16x8_t v85 = (__int16 *)(result + 2 * v83.u32[3]);
          v79.i16[1] = *(_WORD *)(result + 2 * v77);
          v79.i16[2] = *v80;
          v84.i16[1] = *(_WORD *)(result + 2 * v83.u32[1]);
          v84.i16[2] = *(_WORD *)(result + 2 * v83.u32[2]);
          v79.i16[3] = *(_WORD *)(result + 2 * v78);
          uint16x8_t v86 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v176.val[2], v69), (float16x8_t)0), v70));
          uint32x4_t v87 = vmovl_high_u16(v86);
          v84.i16[3] = *v85;
          float16x8_t v88 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v86.i8);
          v79.i16[4] = *(_WORD *)(result + 2 * v75.u32[0]);
          v84.i16[4] = *(_WORD *)(result + 2 * v82.u32[0]);
          v88.i16[0] = *(_WORD *)(result + 2 * v88.u32[0]);
          v79.i16[5] = *(_WORD *)(result + 2 * v75.u32[1]);
          v84.i16[5] = *(_WORD *)(result + 2 * v82.u32[1]);
          v79.i16[6] = *(_WORD *)(result + 2 * v75.u32[2]);
          v84.i16[6] = *(_WORD *)(result + 2 * v82.u32[2]);
          v88.i16[1] = *(_WORD *)(result + 2 * v88.u32[1]);
          v79.i16[7] = *(_WORD *)(result + 2 * v75.u32[3]);
          v88.i16[2] = *(_WORD *)(result + 2 * v88.u32[2]);
          v88.i16[3] = *(_WORD *)(result + 2 * v88.u32[3]);
          v84.i16[7] = *(_WORD *)(result + 2 * v82.u32[3]);
          v88.i16[4] = *(_WORD *)(result + 2 * v87.u32[0]);
          v88.i16[5] = *(_WORD *)(result + 2 * v87.u32[1]);
          v88.i16[6] = *(_WORD *)(result + 2 * v87.u32[2]);
          v88.i16[7] = *(_WORD *)(result + 2 * v87.u32[3]);
          uint16x8_t v89 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v79, _H8), v84, _H9), v88, _H10), vmaxq_f16(vmaxq_f16(v79, v84), v88), _H11), (float16x8_t)0), v70));
          uint32x4_t v90 = vmovl_high_u16(v89);
          uint32x4_t v91 = vmovl_u16(*(uint16x4_t *)v89.i8);
          v92.i16[0] = *(_WORD *)(v51 + 2 * v91.u32[0]);
          v92.i16[1] = *(_WORD *)(v51 + 2 * v91.u32[1]);
          v92.i16[2] = *(_WORD *)(v51 + 2 * v91.u32[2]);
          v92.i16[3] = *(_WORD *)(v51 + 2 * v91.u32[3]);
          v92.i16[4] = *(_WORD *)(v51 + 2 * v90.u32[0]);
          v92.i16[5] = *(_WORD *)(v51 + 2 * v90.u32[1]);
          v92.i16[6] = *(_WORD *)(v51 + 2 * v90.u32[2]);
          v92.i16[7] = *(_WORD *)(v51 + 2 * v90.u32[3]);
          float16x8_t v93 = vmulq_f16(v79, v92);
          float16x8_t v94 = vmulq_f16(v84, v92);
          float16x8_t v95 = vmulq_f16(v88, v92);
          float16x8_t v96 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v93, _H15), v94, _H0), v95, _H1);
          float16x8_t v97 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v95, _H4), v94, _H3), v93, _H2);
          uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v93, _H12), v94, _H13), v95, _H14), (float16x8_t)0), v70));
          uint32x4_t v99 = vmovl_high_u16(v98);
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v98.i8);
          uint64_t v101 = v100.u32[1];
          v84.i16[0] = *(_WORD *)(v56 + 2 * v100.u32[0]);
          uint64_t v102 = v100.u32[3];
          uint64_t v103 = v99.u32[1];
          float16x8_t v104 = (__int16 *)(v56 + 2 * v100.u32[2]);
          uint64_t v105 = v99.u32[3];
          uint64_t v106 = v99.u32[2];
          v79.i16[0] = *(_WORD *)(v56 + 2 * v99.u32[0]);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v96, (float16x8_t)0), v70));
          uint32x4_t v108 = vmovl_high_u16(v107);
          uint32x4_t v109 = vmovl_u16(*(uint16x4_t *)v107.i8);
          LOWORD(_D5) = *(_WORD *)(v56 + 2 * v109.u32[0]);
          uint64_t v110 = v108.u32[1];
          uint32x4_t v111 = (__int16 *)(v56 + 2 * v103);
          v112.i16[0] = *(_WORD *)(v56 + 2 * v108.u32[0]);
          uint64_t v113 = v108.u32[3];
          uint64_t v114 = (__int16 *)(v56 + 2 * v108.u32[2]);
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v97, (float16x8_t)0), v70));
          uint32x4_t v116 = vmovl_high_u16(v115);
          *(void *)&long long v117 = v116.u32[2];
          *((void *)&v117 + 1) = v116.u32[3];
          long long v118 = v117;
          *(void *)&long long v117 = v116.u32[0];
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v115.i8);
          v116.i16[0] = *(_WORD *)(v56 + 2 * v119.u32[0]);
          uint64_t v120 = (__int16 *)(v56 + 2 * v110);
          uint64_t v121 = (__int16 *)(v56 + 2 * v113);
          v119.i16[0] = *(_WORD *)(v56 + 2 * v117);
          float v122 = (__int16 *)(v56 + 2 * v116.u32[1]);
          uint32x4_t v123 = (__int16 *)(v56 + 2 * v118);
          long long v124 = (__int16 *)(v56 + 2 * *((void *)&v118 + 1));
          v175.val[3] = vcvtq_f32_f16(*(float16x4_t *)v176.val[3].f32);
          v176.val[3] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v176.val[3], (int8x16_t)v176.val[3], 8uLL));
          v84.i16[1] = *(_WORD *)(v56 + 2 * v101);
          v84.i16[2] = *v104;
          WORD1(_D5) = *(_WORD *)(v56 + 2 * v109.u32[1]);
          v84.i16[3] = *(_WORD *)(v56 + 2 * v102);
          WORD2(_D5) = *(_WORD *)(v56 + 2 * v109.u32[2]);
          v116.i16[1] = *(_WORD *)(v56 + 2 * v119.u32[1]);
          HIWORD(_D5) = *(_WORD *)(v56 + 2 * v109.u32[3]);
          v116.i16[2] = *(_WORD *)(v56 + 2 * v119.u32[2]);
          v79.i16[1] = *v111;
          v116.i16[3] = *(_WORD *)(v56 + 2 * v119.u32[3]);
          v79.i16[2] = *(_WORD *)(v56 + 2 * v106);
          v112.i16[1] = *v120;
          v79.i16[3] = *(_WORD *)(v56 + 2 * v105);
          v175.val[0] = vcvtq_f32_f16(*(float16x4_t *)v84.i8);
          v112.i16[2] = *v114;
          v112.i16[3] = *v121;
          v175.val[1] = vcvtq_f32_f16(*(float16x4_t *)&_D5);
          v175.val[2] = vcvtq_f32_f16(*(float16x4_t *)v116.i8);
          v119.i16[1] = *v122;
          v119.i16[2] = *v123;
          v176.val[0] = vcvtq_f32_f16(*(float16x4_t *)v79.i8);
          v176.val[1] = vcvtq_f32_f16(v112);
          v119.i16[3] = *v124;
          v176.val[2] = vcvtq_f32_f16(*(float16x4_t *)v119.i8);
          int16x8x4_t v125 = v65 + 32;
          vst4q_f32(v65, v175);
          long long v126 = v65 + 16;
          vst4q_f32(v126, v176);
          v72 += 8;
          float16x8_t v65 = v125;
        }
        while (v72 < v68);
        unint64_t v127 = v153;
        uint64_t v48 = v154;
        uint64_t v22 = v163;
        unint64_t v9 = v164;
        uint64_t v24 = v162;
        _S22 = v160;
        _S21 = v161;
        _S24 = v158;
        _S23 = v159;
        _S29 = v156;
        _S25 = v157;
        _S31 = v155;
        float16x8_t v65 = v165;
        uint64_t v39 = v166;
        uint32x4_t v71 = (_DWORD *)&unk_193E7D000;
      }
      unint64_t v128 = v9 - v127;
      if (v9 > v127)
      {
        do
        {
          LOWORD(_D5) = v73[v174[0]];
          WORD1(_D5) = v73[v26];
          _D6 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          _D5 = COERCE_DOUBLE(vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D5), _D6), 0), _D6))));
          _D6.i16[0] = *(_WORD *)(result + 2 * LODWORD(_D5));
          LOWORD(_D5) = v73[v27];
          __asm { FCVT            S7, H5 }
          LODWORD(_D5) = v71[70];
          __asm { FCVT            S6, H6 }
          _H16 = *(_WORD *)(result + 2 * HIDWORD(_D5));
          unsigned int v133 = llroundf(fminf(fmaxf(_S7 * *(float *)&_D5, 0.0), *(float *)&_D5));
          __asm { FCVT            S7, H16 }
          _H16 = *(_WORD *)(result + 2 * v133);
          __asm { FCVT            S16, H16 }
          float v137 = (float)((float)((float)(v169 * _S7) + (float)(v170 * _S6)) + (float)(v168 * _S16))
               + (float)(v167 * fmaxf(_S6, fmaxf(_S7, _S16)));
          float v138 = *(float *)&_D5;
          if (v137 <= *(float *)&_D5)
          {
            float v138 = v137;
            if (v137 < 0.0) {
              float v138 = 0.0;
            }
          }
          _H18 = v73[v28];
          __asm { FCVT            S18, H18 }
          v73 += 4;
          _H17 = *(_WORD *)(v51 + 2 * llroundf(v138));
          __asm { FCVT            S17, H17 }
          float v143 = _S6 * _S17;
          _S7 = _S7 * _S17;
          _S16 = _S16 * _S17;
          float v146 = (float)((float)(_S22 * _S7) + (float)(v143 * _S21)) + (float)(_S16 * _S23);
          float v147 = (float)((float)(_S25 * _S7) + (float)(v143 * _S24)) + (float)(_S16 * _S29);
          float v148 = (float)((float)(v172 * _S7) + (float)(v143 * _S31)) + (float)(_S16 * v171);
          LOWORD(_S7) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v146, 0.0), *(float *)&_D5)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S16) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v147, 0.0), *(float *)&_D5)));
          __asm { FCVT            S16, H16 }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v148, 0.0), *(float *)&_D5)));
          *(_DWORD *)int16x8x4_t v125 = _S7;
          *((_DWORD *)v125 + 1) = _S16;
          __asm { FCVT            S5, H5 }
          *((_DWORD *)v125 + 2) = _S5;
          *((_DWORD *)v125 + 3) = _S18;
          v125 += 4;
          --v128;
        }
        while (v128);
      }
      v67 += v22;
      float16x8_t v65 = (float *)((char *)v65 + v24);
      ++v39;
    }
    while (v39 != v48);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *(void *)(result + 152);
    int64x2_t v12 = *(void **)(result + 56);
    uint64_t v13 = **(void **)(result + 64);
    uint64_t v14 = **(void **)(result + 136);
    float v15 = *(float *)(v11 + 72);
    float v16 = *(float *)(v11 + 76);
    float v17 = *(float *)(v11 + 80);
    float v18 = *(float *)(v11 + 84);
    float v19 = *(float *)(v11 + 88);
    float v20 = *(float *)(v11 + 92);
    float v21 = *(float *)(v11 + 96);
    float v22 = *(float *)(v11 + 100);
    uint64_t v23 = v11 + 164;
    uint64_t v24 = v11 + 16548;
    uint64_t v25 = v11 + 32932;
    float v26 = *(float *)(v11 + 104);
    float v27 = *(float *)(v11 + 108);
    float v28 = *(float *)(v11 + 112);
    float v29 = *(float *)(v11 + 116);
    float v30 = *(float *)(v11 + 120);
    uint64_t v31 = *(void *)(result + 112);
    unint64_t v32 = *(void *)(result + 104) * a2 / v4 + *(void *)(result + 120);
    uint64_t v33 = *(void *)(result + 36);
    uint64_t v34 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v35 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v36 = **(void **)(result + 128) + v32 * v14;
    uint64_t result = *(unsigned __int8 *)(v11 + 155);
    uint64_t v37 = *(unsigned __int8 *)(v11 + 154);
    char v38 = (_DWORD *)(v36 + 16 * v31);
    uint64_t v39 = *v12 + v13 * v9 + 8 * v33;
    float32x2_t v40 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        uint64_t v41 = v8;
        uint64_t v42 = v39;
        uint64_t v43 = v38;
        do
        {
          _D25.i16[0] = *(_WORD *)(v42 + 2 * v37);
          _D25.i16[1] = *(_WORD *)(v42 + 2 * result);
          _D25 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D25), v40), 0), v40)));
          _D25.i16[0] = *(_WORD *)(v23 + 2 * _D25.u32[0]);
          _H26 = *(_WORD *)(v42 + 2 * v35);
          __asm
          {
            FCVT            S26, H26
            FCVT            S25, H25
          }
          _H27 = *(_WORD *)(v23 + 2 * _D25.u32[1]);
          unsigned int v51 = llroundf(fminf(fmaxf(_S26 * 8191.0, 0.0), 8191.0));
          __asm { FCVT            S26, H27 }
          _H27 = *(_WORD *)(v23 + 2 * v51);
          __asm { FCVT            S27, H27 }
          float v55 = (float)((float)((float)(v28 * _S26) + (float)(v27 * *(float *)_D25.i32)) + (float)(v29 * _S27))
              + (float)(v30 * fmaxf(*(float *)_D25.i32, fmaxf(_S26, _S27)));
          float v56 = 8191.0;
          if (v55 <= 8191.0)
          {
            float v56 = v55;
            if (v55 < 0.0) {
              float v56 = 0.0;
            }
          }
          _H29 = *(_WORD *)(v42 + 2 * v34);
          __asm { FCVT            S29, H29 }
          v42 += 8;
          _H28 = *(_WORD *)(v24 + 2 * llroundf(v56));
          __asm { FCVT            S28, H28 }
          float v61 = *(float *)_D25.i32 * _S28;
          _S26 = _S26 * _S28;
          _S27 = _S27 * _S28;
          float v64 = (float)((float)(v16 * _S26) + (float)(v61 * v15)) + (float)(_S27 * v17);
          float v65 = (float)((float)(v19 * _S26) + (float)(v61 * v18)) + (float)(_S27 * v20);
          _S25 = (float)((float)(v22 * _S26) + (float)(v61 * v21)) + (float)(_S27 * v26);
          LOWORD(_S26) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          LOWORD(_S27) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          LOWORD(_S25) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          *uint64_t v43 = _S26;
          v43[1] = _S27;
          __asm { FCVT            S25, H25 }
          v43[2] = _S25;
          v43[3] = _S29;
          v43 += 4;
          --v41;
        }
        while (v41);
      }
      v39 += v13;
      char v38 = (_DWORD *)((char *)v38 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, float32x4_t _Q1)
{
  uint64_t v4 = 0;
  unint64_t v5 = *(void *)(a1 + 20);
  uint64_t v6 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = *((void *)a1 + 14);
  unint64_t v15 = *((void *)a1 + 13) * a2;
  uint64_t v16 = *((void *)a1 + 19);
  uint64_t v17 = *((void *)a1 + 15);
  uint64_t v18 = **((void **)a1 + 8);
  uint64_t v19 = **((void **)a1 + 7);
  uint64_t v20 = **((void **)a1 + 17);
  uint64_t result = **((void **)a1 + 16);
  v132[0] = *(unsigned char *)(v16 + 154);
  uint64_t v22 = *(unsigned __int8 *)(v16 + 155);
  v132[1] = *(unsigned char *)(v16 + 155);
  uint64_t v23 = *(unsigned __int8 *)(v16 + 156);
  v132[2] = *(unsigned char *)(v16 + 156);
  uint64_t v24 = *(unsigned __int8 *)(v16 + 157);
  v132[3] = *(unsigned char *)(v16 + 157);
  uint64_t v25 = v15 / v9 + v17;
  uint64_t v26 = v18 * v11;
  _S25 = *(float *)(v16 + 72);
  _S26 = *(float *)(v16 + 76);
  _S27 = *(float *)(v16 + 80);
  _S17 = *(float *)(v16 + 84);
  _S28 = *(float *)(v16 + 88);
  _S5 = *(float *)(v16 + 92);
  _S6 = *(float *)(v16 + 96);
  _S7 = *(float *)(v16 + 100);
  _S16 = *(float *)(v16 + 104);
  memset(v131, 0, sizeof(v131));
  do
  {
    unsigned int v36 = 0;
    char v37 = v132[v4];
    do
    {
      *((unsigned char *)v131 + 8 * (((_BYTE)v4 + (v36 >> 3)) & 0x1F) + v36) = v37 + 4 * v36;
      ++v36;
    }
    while (v36 != 8);
    ++v4;
  }
  while (v4 != 4);
  if (v12 != v10)
  {
    uint64_t v38 = 0;
    __asm
    {
      FCVT            H8, S25
      FCVT            H9, S26
    }
    uint64_t v45 = v13 - v11;
    uint64_t v46 = v16 + 16548;
    uint64_t v47 = v16 + 164;
    __asm
    {
      FCVT            H10, S27
      FCVT            H11, S17
      FCVT            H12, S28
      FCVT            H13, S5
      FCVT            H14, S6
      FCVT            H15, S7
    }
    uint64_t v54 = (float *)(result + v20 * v25 + 16 * v14);
    __asm { FCVT            H0, S16 }
    uint64_t result = v19 + v26 + 8 * v6;
    int v56 = v5 - 7;
    unint64_t v121 = v5 & 0xFFFFFFF8;
    uint64_t v122 = v45;
    v57.i64[0] = 0x7000700070007000;
    v57.i64[1] = 0x7000700070007000;
    v58.i64[0] = 0x9000900090009000;
    v58.i64[1] = 0x9000900090009000;
    uint64_t v128 = v18;
    unint64_t v129 = v5;
    uint64_t v127 = v20;
    float v125 = _S26;
    float v126 = _S25;
    float v123 = _S28;
    float v124 = _S27;
    do
    {
      if ((int)v5 < 8)
      {
        unint64_t v110 = 0;
        uint32x4_t v108 = v54;
        int v60 = (const __int16 *)result;
      }
      else
      {
        uint32x4_t v130 = v54;
        int v59 = 0;
        int v60 = (const __int16 *)result;
        do
        {
          float32x4x4_t v133 = (float32x4x4_t)vld4q_s16(v60);
          v60 += 32;
          uint16x8_t v61 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v133.val[0], v57), (float16x8_t)0), v58));
          uint32x4_t v62 = vmovl_high_u16(v61);
          *(void *)&long long v63 = v62.u32[2];
          *((void *)&v63 + 1) = v62.u32[3];
          long long v64 = v63;
          *(void *)&long long v63 = v62.u32[0];
          *((void *)&v63 + 1) = v62.u32[1];
          long long v65 = v63;
          uint32x4_t v66 = vmovl_u16(*(uint16x4_t *)v61.i8);
          *(void *)&long long v63 = v66.u32[2];
          uint64_t v67 = v66.u32[3];
          v68.i16[0] = *(_WORD *)(v47 + 2 * v66.u32[0]);
          float16x8_t v69 = (__int16 *)(v47 + 2 * v66.u32[1]);
          uint16x8_t v70 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v133.val[1], v57), (float16x8_t)0), v58));
          uint32x4_t v71 = vmovl_high_u16(v70);
          float16x8_t v72 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v70.i8);
          v72.i16[0] = *(_WORD *)(v47 + 2 * v72.u32[0]);
          float16x8_t v73 = (__int16 *)(v47 + 2 * v71.u32[0]);
          uint16x8_t v74 = (__int16 *)(v47 + 2 * v71.u32[1]);
          v68.i16[1] = *v69;
          uint32x4_t v75 = (__int16 *)(v47 + 2 * v71.u32[2]);
          uint32x4_t v76 = (__int16 *)(v47 + 2 * v71.u32[3]);
          v72.i16[1] = *(_WORD *)(v47 + 2 * v72.u32[1]);
          v68.i16[2] = *(_WORD *)(v47 + 2 * v63);
          uint16x8_t v77 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmulq_f16((float16x8_t)v133.val[2], v57), (float16x8_t)0), v58));
          uint32x4_t v78 = vmovl_high_u16(v77);
          v72.i16[2] = *(_WORD *)(v47 + 2 * v72.u32[2]);
          float16x8_t v79 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v77.i8);
          v68.i16[3] = *(_WORD *)(v47 + 2 * v67);
          v72.i16[3] = *(_WORD *)(v47 + 2 * v72.u32[3]);
          v79.i16[0] = *(_WORD *)(v47 + 2 * v79.u32[0]);
          v68.i16[4] = *(_WORD *)(v47 + 2 * v65);
          v72.i16[4] = *v73;
          v68.i16[5] = *(_WORD *)(v47 + 2 * *((void *)&v65 + 1));
          v72.i16[5] = *v74;
          v79.i16[1] = *(_WORD *)(v47 + 2 * v79.u32[1]);
          v68.i16[6] = *(_WORD *)(v47 + 2 * v64);
          v79.i16[2] = *(_WORD *)(v47 + 2 * v79.u32[2]);
          v79.i16[3] = *(_WORD *)(v47 + 2 * v79.u32[3]);
          v72.i16[6] = *v75;
          v79.i16[4] = *(_WORD *)(v47 + 2 * v78.u32[0]);
          v79.i16[5] = *(_WORD *)(v47 + 2 * v78.u32[1]);
          v68.i16[7] = *(_WORD *)(v47 + 2 * *((void *)&v64 + 1));
          v79.i16[6] = *(_WORD *)(v47 + 2 * v78.u32[2]);
          v79.i16[7] = *(_WORD *)(v47 + 2 * v78.u32[3]);
          v72.i16[7] = *v76;
          float16x8_t v80 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v68, _H8), v72, _H9), v79, _H10);
          float16x8_t v81 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v68, _H11), v72, _H12), v79, _H13);
          float16x8_t v82 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v79, _H0), v72, _H15), v68, _H14);
          uint16x8_t v83 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v80, (float16x8_t)0), v58));
          uint32x4_t v84 = vmovl_high_u16(v83);
          *(void *)&long long v63 = v84.u32[2];
          uint32x4_t v85 = vmovl_u16(*(uint16x4_t *)v83.i8);
          v68.i64[1] = v85.u32[3];
          uint64_t v86 = v85.u32[1];
          v87.i16[0] = *(_WORD *)(v46 + 2 * v85.u32[0]);
          uint64_t v88 = v84.u32[1];
          uint16x8_t v89 = (__int16 *)(v46 + 2 * v85.u32[2]);
          uint64_t v90 = v84.u32[3];
          v68.i16[0] = *(_WORD *)(v46 + 2 * v84.u32[0]);
          uint16x8_t v91 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v81, (float16x8_t)0), v58));
          uint32x4_t v92 = vmovl_high_u16(v91);
          uint32x4_t v93 = vmovl_u16(*(uint16x4_t *)v91.i8);
          *((void *)&v64 + 1) = v93.u32[3];
          v94.i16[0] = *(_WORD *)(v46 + 2 * v93.u32[0]);
          float16x8_t v95 = (__int16 *)(v46 + 2 * v93.u32[2]);
          v96.i16[0] = *(_WORD *)(v46 + 2 * v92.u32[0]);
          uint16x8_t v97 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v82, (float16x8_t)0), v58));
          uint16x8_t v98 = (__int16 *)(v46 + 2 * v93.u32[1]);
          uint32x4_t v99 = vmovl_high_u16(v97);
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v97.i8);
          LOWORD(v64) = *(_WORD *)(v46 + 2 * v100.u32[0]);
          v101.i16[0] = *(_WORD *)(v46 + 2 * v99.u32[0]);
          uint64_t v102 = (__int16 *)(v46 + 2 * v99.u32[1]);
          uint64_t v103 = (__int16 *)(v46 + 2 * v99.u32[2]);
          float16x8_t v104 = (__int16 *)(v46 + 2 * v99.u32[3]);
          float32x4_t v105 = vcvtq_f32_f16(*(float16x4_t *)v133.val[3].f32);
          v133.val[3] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v133.val[3], (int8x16_t)v133.val[3], 8uLL));
          v87.i16[1] = *(_WORD *)(v46 + 2 * v86);
          v87.i16[2] = *v89;
          v94.i16[1] = *v98;
          v87.i16[3] = *(_WORD *)(v46 + 2 * v68.i64[1]);
          v94.i16[2] = *v95;
          WORD1(v64) = *(_WORD *)(v46 + 2 * v100.u32[1]);
          v94.i16[3] = *(_WORD *)(v46 + 2 * *((void *)&v64 + 1));
          WORD2(v64) = *(_WORD *)(v46 + 2 * v100.u32[2]);
          v68.i16[1] = *(_WORD *)(v46 + 2 * v88);
          WORD3(v64) = *(_WORD *)(v46 + 2 * v100.u32[3]);
          v68.i16[2] = *(_WORD *)(v46 + 2 * v63);
          v96.i16[1] = *(_WORD *)(v46 + 2 * v92.u32[1]);
          v68.i16[3] = *(_WORD *)(v46 + 2 * v90);
          _Q1 = vcvtq_f32_f16(v87);
          v96.i16[2] = *(_WORD *)(v46 + 2 * v92.u32[2]);
          v96.i16[3] = *(_WORD *)(v46 + 2 * v92.u32[3]);
          float32x4_t v106 = vcvtq_f32_f16(v94);
          float32x4_t v107 = vcvtq_f32_f16(*(float16x4_t *)&v64);
          v101.i16[1] = *v102;
          v101.i16[2] = *v103;
          v133.val[0] = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
          v133.val[1] = vcvtq_f32_f16(v96);
          v101.i16[3] = *v104;
          v133.val[2] = vcvtq_f32_f16(v101);
          uint32x4_t v108 = v54 + 32;
          vst4q_f32(v54, *(float32x4x4_t *)_Q1.f32);
          uint32x4_t v109 = v54 + 16;
          vst4q_f32(v109, v133);
          v59 += 8;
          uint64_t v54 = v108;
        }
        while (v59 < v56);
        unint64_t v110 = v121;
        uint64_t v45 = v122;
        uint64_t v18 = v128;
        unint64_t v5 = v129;
        uint64_t v20 = v127;
        _S26 = v125;
        _S25 = v126;
        _S28 = v123;
        _S27 = v124;
        uint64_t v54 = v130;
      }
      unint64_t v111 = v5 - v110;
      if (v5 > v110)
      {
        do
        {
          _Q1.i16[0] = v60[v132[0]];
          _H2 = v60[v23];
          _H3 = v60[v24];
          __asm { FCVT            S2, H2 }
          _Q1.i16[1] = v60[v22];
          _D21 = (float32x2_t)vdup_n_s32(0x45FFF800u);
          __asm { FCVT            S3, H3 }
          *(int32x2_t *)_Q1.f32 = vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)_Q1.f32), _D21), 0), _D21)));
          _Q1.i16[0] = *(_WORD *)(v47 + 2 * _Q1.u32[0]);
          v60 += 4;
          _D21.i16[0] = *(_WORD *)(v47 + 2 * _Q1.u32[1]);
          __asm { FCVT            S21, H21 }
          LOWORD(_S2) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(_S2 * 8191.0, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S1, H1
          }
          float v118 = (float)((float)(_S26 * _D21.f32[0]) + (float)(_Q1.f32[0] * _S25)) + (float)(_S2 * _S27);
          float v119 = (float)((float)(_S28 * _D21.f32[0]) + (float)(_Q1.f32[0] * _S17)) + (float)(_S2 * _S5);
          _Q1.f32[0] = (float)((float)(_S7 * _D21.f32[0]) + (float)(_Q1.f32[0] * _S6)) + (float)(_S2 * _S16);
          LOWORD(_S2) = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _D21.i16[0] = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _Q1.i16[0] = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(_Q1.f32[0], 0.0), 8191.0)));
          *(_DWORD *)uint32x4_t v108 = _S2;
          v108[1] = _D21.f32[0];
          __asm { FCVT            S1, H1 }
          v108[2] = _Q1.f32[0];
          *((_DWORD *)v108 + 3) = _S3;
          v108 += 4;
          --v111;
        }
        while (v111);
      }
      result += v18;
      uint64_t v54 = (float *)((char *)v54 + v20);
      ++v38;
    }
    while (v38 != v45);
  }
  return result;
}

uint64_t vt_Copy_RGhA_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unint64_t vt_Copy_RGhA_TRC_Mat_TRC_RGfA_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *(void *)(result + 152);
    int64x2_t v12 = *(void **)(result + 56);
    uint64_t v13 = **(void **)(result + 64);
    uint64_t v14 = **(void **)(result + 136);
    float v15 = *(float *)(v11 + 72);
    float v16 = *(float *)(v11 + 76);
    float v17 = *(float *)(v11 + 80);
    float v18 = *(float *)(v11 + 84);
    float v19 = *(float *)(v11 + 88);
    float v20 = *(float *)(v11 + 92);
    float v21 = *(float *)(v11 + 96);
    float v22 = *(float *)(v11 + 100);
    float v23 = *(float *)(v11 + 104);
    uint64_t v24 = v11 + 164;
    uint64_t v25 = v11 + 16548;
    uint64_t v26 = *(void *)(result + 112);
    unint64_t v27 = *(void *)(result + 104) * a2 / v4 + *(void *)(result + 120);
    uint64_t v28 = *(void *)(result + 36);
    uint64_t v29 = *(unsigned __int8 *)(v11 + 157);
    uint64_t v30 = *(unsigned __int8 *)(v11 + 156);
    uint64_t v31 = **(void **)(result + 128) + v27 * v14;
    uint64_t v32 = *(unsigned __int8 *)(v11 + 155);
    uint64_t result = *(unsigned __int8 *)(v11 + 154);
    uint64_t v33 = (_DWORD *)(v31 + 16 * v26);
    uint64_t v34 = *v12 + v13 * v9 + 8 * v28;
    float32x2_t v35 = (float32x2_t)vdup_n_s32(0x45FFF800u);
    do
    {
      if (v8)
      {
        uint64_t v36 = v8;
        uint64_t v37 = v34;
        uint64_t v38 = v33;
        do
        {
          _D21.i16[0] = *(_WORD *)(v37 + 2 * result);
          _H22 = *(_WORD *)(v37 + 2 * v30);
          __asm { FCVT            S22, H22 }
          _H23 = *(_WORD *)(v37 + 2 * v29);
          _D21.i16[1] = *(_WORD *)(v37 + 2 * v32);
          __asm { FCVT            S23, H23 }
          _D21 = (float16x4_t)vcvt_s32_f32(vrnda_f32(vminnm_f32(vmaxnm_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(_D21), v35), 0), v35)));
          _D21.i16[0] = *(_WORD *)(v24 + 2 * _D21.u32[0]);
          v37 += 8;
          __asm { FCVT            S21, H21 }
          _H24 = *(_WORD *)(v24 + 2 * _D21.u32[1]);
          __asm { FCVT            S24, H24 }
          LOWORD(_S22) = *(_WORD *)(v24 + 2 * llroundf(fminf(fmaxf(_S22 * 8191.0, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          float v50 = (float)((float)(v16 * _S24) + (float)(*(float *)_D21.i32 * v15)) + (float)(_S22 * v17);
          float v51 = (float)((float)(v19 * _S24) + (float)(*(float *)_D21.i32 * v18)) + (float)(_S22 * v20);
          *(float *)_D21.i32 = (float)((float)(v22 * _S24) + (float)(*(float *)_D21.i32 * v21)) + (float)(_S22 * v23);
          LOWORD(_S22) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v50, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S24) = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(v51, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _D21.i16[0] = *(_WORD *)(v25 + 2 * llroundf(fminf(fmaxf(*(float *)_D21.i32, 0.0), 8191.0)));
          _DWORD *v38 = _S22;
          v38[1] = _S24;
          __asm { FCVT            S21, H21 }
          v38[2] = _D21.i32[0];
          v38[3] = _S23;
          v38 += 4;
          --v36;
        }
        while (v36);
      }
      v34 += v13;
      uint64_t v33 = (_DWORD *)((char *)v33 + v14);
      ++v7;
    }
    while (v7 != v10);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_RGfA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_RGhA_rgb_RGfA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *(void *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 36);
  uint64_t v5 = *(void *)(a1 + 44);
  uint64_t v6 = *(void *)(a1 + 28);
  unint64_t v7 = *a1;
  unint64_t v8 = v6 * a2 / v7;
  uint64_t v9 = v8 + v5;
  unint64_t v10 = (v6 + v6 * a2) / v7;
  uint64_t v11 = v10 + v5;
  uint64_t v12 = *((void *)a1 + 14);
  unint64_t v13 = *((void *)a1 + 13) * a2;
  uint64_t v14 = (unsigned char *)*((void *)a1 + 19);
  uint64_t v15 = *((void *)a1 + 15);
  float v16 = (uint64_t *)*((void *)a1 + 16);
  uint64_t v17 = (uint64_t *)*((void *)a1 + 17);
  uint64_t v18 = **((void **)a1 + 8);
  uint64_t result = **((void **)a1 + 7);
  uint64_t v20 = *v17;
  uint64_t v21 = *v16;
  uint64_t v22 = v13 / v7 + v15;
  uint64_t v23 = v18 * v9;
  uint64_t v24 = *v17 * v22;
  v55[0] = v14[154];
  uint64_t v25 = v14[155];
  v55[1] = v14[155];
  uint64_t v26 = v14[156];
  v55[2] = v14[156];
  uint64_t v27 = v14[157];
  v55[3] = v27;
  memset(v54, 0, sizeof(v54));
  do
  {
    unsigned int v28 = 0;
    char v29 = v55[v2];
    do
    {
      *((unsigned char *)v54 + 8 * (((_BYTE)v2 + (v28 >> 3)) & 0x1F) + v28) = v29 + 4 * v28;
      ++v28;
    }
    while (v28 != 8);
    ++v2;
  }
  while (v2 != 4);
  if (v10 != v8)
  {
    uint64_t v30 = 0;
    uint64_t v31 = v11 - v9;
    uint64_t v32 = v21 + v24 + 16 * v12;
    uint64_t v33 = result + v23;
    uint64_t result = v3 & 0xFFFFFFF8;
    uint64_t v34 = (const __int16 *)(v33 + 8 * v4);
    do
    {
      if ((int)v3 < 8)
      {
        unint64_t v40 = 0;
        uint64_t v38 = (float *)v32;
        uint64_t v36 = v34;
      }
      else
      {
        int v35 = 0;
        uint64_t v36 = v34;
        uint64_t v37 = (float *)v32;
        do
        {
          int16x8x4_t v56 = vld4q_s16(v36);
          v36 += 32;
          v57.val[3] = vcvtq_f32_f16(*(float16x4_t *)v56.val[3].i8);
          v58.val[3] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v56.val[3], (int8x16_t)v56.val[3], 8uLL));
          v57.val[0] = vcvtq_f32_f16(*(float16x4_t *)v56.val[0].i8);
          v57.val[1] = vcvtq_f32_f16(*(float16x4_t *)v56.val[1].i8);
          v57.val[2] = vcvtq_f32_f16(*(float16x4_t *)v56.val[2].i8);
          v58.val[0] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v56.val[0], (int8x16_t)v56.val[0], 8uLL));
          v58.val[1] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v56.val[1], (int8x16_t)v56.val[1], 8uLL));
          v58.val[2] = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v56.val[2], (int8x16_t)v56.val[2], 8uLL));
          uint64_t v38 = v37 + 32;
          vst4q_f32(v37, v57);
          uint64_t v39 = v37 + 16;
          vst4q_f32(v39, v58);
          v35 += 8;
          uint64_t v37 = v38;
        }
        while (v35 < (int)v3 - 7);
        unint64_t v40 = v3 & 0xFFFFFFF8;
      }
      _CF = v3 >= v40;
      unint64_t v42 = v3 - v40;
      if (v42 != 0 && _CF)
      {
        do
        {
          _H0 = v36[v55[0]];
          __asm { FCVT            S0, H0 }
          _H1 = v36[v25];
          _H2 = v36[v26];
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
          }
          _H3 = v36[v27];
          __asm { FCVT            S3, H3 }
          v36 += 4;
          *(_DWORD *)uint64_t v38 = _S0;
          *((_DWORD *)v38 + 1) = _S1;
          *((_DWORD *)v38 + 2) = _S2;
          *((_DWORD *)v38 + 3) = _S3;
          v38 += 4;
          --v42;
        }
        while (v42);
      }
      uint64_t v34 = (const __int16 *)((char *)v34 + v18);
      v32 += v20;
      ++v30;
    }
    while (v30 != v31);
  }
  return result;
}

uint64_t vt_Copy_RGhA_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_RGhA_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_RGhA_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 20);
    unint64_t v8 = v4 + *(void *)(result + 44);
    unint64_t v9 = v5 - v4;
    uint64_t v10 = **((void **)result + 8);
    uint64_t v11 = **((void **)result + 17);
    int64x2_t v12 = (unsigned __int8 *)*((void *)result + 19);
    unint64_t v13 = *((void *)result + 13) * a2 / v3 + *((void *)result + 15);
    uint64_t v14 = v12[157];
    uint64_t v15 = v12[156];
    uint64_t v16 = v12[155];
    uint64_t v17 = v12[154];
    uint64_t v18 = **((void **)result + 16) + v13 * v11 + 16 * *((void *)result + 14);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 7) + v10 * v8 + 8 * *(void *)(result + 36));
    do
    {
      if (v7)
      {
        uint64_t v19 = v7;
        int64x2_t v20 = result;
        long long v21 = (_DWORD *)v18;
        do
        {
          _H0 = *(_WORD *)&v20[2 * v17];
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)&v20[2 * v16];
          _H2 = *(_WORD *)&v20[2 * v15];
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
          }
          _H3 = *(_WORD *)&v20[2 * v14];
          __asm { FCVT            S3, H3 }
          v20 += 8;
          *long long v21 = _S0;
          v21[1] = _S1;
          v21[2] = _S2;
          v21[3] = _S3;
          v21 += 4;
          --v19;
        }
        while (v19);
      }
      result += v10;
      v18 += v11;
      ++v6;
    }
    while (v6 != v9);
  }
  return result;
}

uint64_t ParavirtualizedVideoEncoder_CreateInstanceWithSpecification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFTypeRef v16 = 0;
  CFTypeRef v17 = 0;
  CFTypeRef v14 = 0;
  CFTypeRef v15 = 0;
  int v13 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef cf = 0;
  if (!a5)
  {
    uint64_t v10 = 4294954394;
LABEL_4:
    CFMutableDictionaryRef v7 = Mutable;
    goto LABEL_5;
  }
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  VTVideoEncoderGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6)
  {
    uint64_t v10 = v6;
    goto LABEL_4;
  }
  uint64_t v10 = FigSignalErrorAt();
  CFMutableDictionaryRef v7 = Mutable;
  if (v10)
  {
LABEL_5:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (Mutable) {
LABEL_6:
  }
    CFRelease(v7);
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v10;
}

uint64_t paravirtualizedVideoEncoder_forgetPendingFramePixelBuffersByUUIDs(uint64_t a1, int a2, int a3, CFArrayRef theArray)
{
  for (CFIndex i = 0; ; ++i)
  {
    CFIndex v9 = theArray ? CFArrayGetCount(theArray) : 0;
    if (i >= v9) {
      break;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
    uint64_t result = paravirtualizedVideoEncoder_forgetPendingFramePixelBufferByUUID(a1, a2, a3, ValueAtIndex);
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t paravirtualizedVideoEncoder_forgetPendingFramePixelBufferByUUID(uint64_t a1, int a2, int a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 84));
  Value = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 88), a4);
  if (Value)
  {
    if (a2)
    {
      CFIndex v9 = @"PVEncodeFrameDidComplete";
LABEL_6:
      CFDictionarySetValue(Value, v9, (const void *)*MEMORY[0x1E4F1CFD0]);
      goto LABEL_7;
    }
    if (a3)
    {
      CFIndex v9 = @"PVFrameWasEmitted";
      goto LABEL_6;
    }
  }
LABEL_7:
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 84));
  return 0;
}

uint64_t paravirtualizedVideoEncoder_lookupRetainAndForgetPendingTilePixelBufferByUUID(uint64_t a1, uint64_t a2, int a3, int a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  SInt64 = (const void *)FigCFNumberCreateSInt64();
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 96));
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), a5);
  if (Value)
  {
    CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(Value, @"TilesDict");
    if (!v11)
    {
LABEL_11:
      uint64_t v15 = 0;
      goto LABEL_12;
    }
    CFDictionaryRef v12 = v11;
    int v13 = (__CFDictionary *)CFDictionaryGetValue(v11, SInt64);
    if (v13)
    {
      if (a3)
      {
        CFTypeRef v14 = @"EncodeTileDidComplete";
      }
      else
      {
        if (!a4) {
          goto LABEL_9;
        }
        CFTypeRef v14 = @"TileWasEmitted";
      }
      CFDictionarySetValue(v13, v14, (const void *)*MEMORY[0x1E4F1CFD0]);
LABEL_9:
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      if (!CFDictionaryGetCount(v12)) {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), a5);
      }
      goto LABEL_11;
    }
  }
  uint64_t v15 = FigSignalErrorAt();
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 96));
  if (SInt64) {
    CFRelease(SInt64);
  }
  return v15;
}

uint64_t ParavirtualizedVideoEncoder_Invalidate()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned int v8 = 0;
  CFTypeRef v6 = 0;
  CFTypeRef cf = 0;
  uint64_t MessageAndByteStream = VTParavirtualizationCreateMessageAndByteStream(1701408374, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&cf, 0);
  if (MessageAndByteStream
    || (long long v9 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v10 = 0,
        uint64_t MessageAndByteStream = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, (uint64_t)&v9, &v6), MessageAndByteStream))
  {
    uint64_t v3 = MessageAndByteStream;
LABEL_7:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_8;
  }
  unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v6, 744845938, &v8);
  if (SInt32) {
    uint64_t v3 = SInt32;
  }
  else {
    uint64_t v3 = v8;
  }
  if (v3) {
    goto LABEL_7;
  }
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v3;
}

void ParavirtualizedVideoEncoder_Finalize()
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  *(_DWORD *)(DerivedStorage + 16) = 0;
  *(void *)uint64_t DerivedStorage = 0;
  *(void *)(DerivedStorage + 8) = 0;
  if (!VTParavirtualizationCreateMessageAndByteStream(761622115, 0, DerivedStorage + 64, 0, (CMBlockBufferRef *)cf, 0)&& VTParavirtualizationGuestSendMessageToHostAsync((OpaqueCMBlockBuffer *)cf[0]))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (VTParavirtualizationGuestRemoveHandlerForUUID((CFUUIDBytes *)(DerivedStorage + 64)))
  {
    uint64_t v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 24) = 0;
  }
  unint64_t v4 = *(const void **)(DerivedStorage + 40);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 40) = 0;
  }
  unint64_t v5 = *(const void **)(DerivedStorage + 48);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 48) = 0;
  }
  CFTypeRef v6 = *(const void **)(DerivedStorage + 56);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 56) = 0;
  }
  CFMutableDictionaryRef v7 = *(const void **)(DerivedStorage + 88);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 88) = 0;
  }
  unsigned int v8 = *(const void **)(DerivedStorage + 104);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 104) = 0;
  }
  long long v9 = *(const void **)(DerivedStorage + 112);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 112) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 120);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 120) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 128);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 128) = 0;
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
}

__CFString *ParavirtualizedVideoEncoder_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<ParavirtualizedVideoEncoder %p UUID %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x>", a1, DerivedStorage[64], DerivedStorage[65], DerivedStorage[66], DerivedStorage[67], DerivedStorage[68], DerivedStorage[69], DerivedStorage[70], DerivedStorage[71], DerivedStorage[72], DerivedStorage[73], DerivedStorage[74], DerivedStorage[75], DerivedStorage[76], DerivedStorage[77], DerivedStorage[78],
    DerivedStorage[79]);
  return Mutable;
}

uint64_t ParavirtualizedVideoEncoder_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v16 = 0;
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v13 = 0;
  unsigned int v12 = 0;
  if (FigCFEqual())
  {
    CFTypeRef v6 = *(CFTypeRef *)(DerivedStorage + 120);
    if (v6) {
      CFTypeRef v6 = CFRetain(v6);
    }
    uint64_t v7 = 0;
    *a4 = v6;
  }
  else
  {
    uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1701015408, 1, DerivedStorage + 64, 0, &v16, &cf);
    if (appended
      || (uint64_t appended = VTParavirtualizationMessageAppendCFPropertyList(), appended)
      || (long long v10 = kVTParavirtualizationDefaultReplyTimeout,
          uint64_t v11 = 0,
          uint64_t appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v16, (uint64_t)&v10, &v14),
          appended)
      || (uint64_t appended = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v14, 744845938, &v12), appended))
    {
      uint64_t v7 = appended;
    }
    else
    {
      uint64_t v7 = v12;
      if (!v12)
      {
        uint64_t v7 = VTParavirtualizationMessageCopyCFPropertyList((OpaqueCMBlockBuffer *)v14, 745955692, &v13);
        if (!v7)
        {
          *a4 = v13;
          CFTypeRef v13 = 0;
        }
      }
    }
  }
  if (v16) {
    CFRelease(v16);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v7;
}

uint64_t ParavirtualizedVideoEncoder_SetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  CFTypeRef v16 = 0;
  unsigned int v15 = 0;
  CFTypeRef cf = 0;
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1702061428, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&v18, &v17);
  if (!appended)
  {
    uint64_t v8 = paravirtualizedVideoEncoder_handleAnySpecialCaseSetPropertyAndCopyReplacementValue(a1, a2, a3, &cf);
    if (v8 == -19096)
    {
      uint64_t v9 = 0;
      goto LABEL_14;
    }
    uint64_t v9 = v8;
    if (v8) {
      goto LABEL_12;
    }
    uint64_t appended = VTParavirtualizationMessageAppendCFPropertyList();
    if (!appended)
    {
      uint64_t appended = VTParavirtualizationMessageAppendCFPropertyList();
      if (!appended)
      {
        long long v19 = kVTParavirtualizationDefaultReplyTimeout;
        uint64_t v20 = 0;
        uint64_t appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v18, (uint64_t)&v19, &v16);
        if (!appended)
        {
          unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v16, 744845938, &v15);
          if (SInt32) {
            uint64_t v9 = SInt32;
          }
          else {
            uint64_t v9 = v15;
          }
          if (!v9) {
            goto LABEL_14;
          }
          goto LABEL_12;
        }
      }
    }
  }
  uint64_t v9 = appended;
LABEL_12:
  uint64_t v11 = (const void *)FigCFCopyCompactDescription();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v11) {
    CFRelease(v11);
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v9;
}

uint64_t paravirtualizedVideoEncoder_handleAnySpecialCaseSetPropertyAndCopyReplacementValue(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  if (paravirtualizedVideoEncoder_getSpecialCaseHandlersForSettingProperties_sCreateDictionaryOnce != -1) {
    dispatch_once(&paravirtualizedVideoEncoder_getSpecialCaseHandlersForSettingProperties_sCreateDictionaryOnce, &__block_literal_global_34);
  }
  uint64_t Value = FigCFDictionaryGetValue();
  if (Value)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, const void *, void *))(Value + 8);
    return v8(a1, a3, a4);
  }
  else
  {
    if (a3) {
      CFTypeRef v10 = CFRetain(a3);
    }
    else {
      CFTypeRef v10 = 0;
    }
    *a4 = v10;
    return 0;
  }
}

CFDictionaryRef __paravirtualizedVideoEncoder_getSpecialCaseHandlersForSettingProperties_block_invoke()
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  values = &kParavirtualizedVideoEncoder_BaseClass_block_invoke_specialCasePropertyAndHandlerPairs;
  keys[0] = @"MultiPassStorage";
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], 0);
  paravirtualizedVideoEncoder_getSpecialCaseHandlersForSettingProperties_sSpecialCaseHandlersForSettingProperties = (uint64_t)result;
  return result;
}

uint64_t paravirtualizedVideoEncoder_handleMultiPassStorageSetPropertyAndCopyReplacementValue(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v6 = *(const void **)(DerivedStorage + 120);
  *(void *)(DerivedStorage + 120) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  if (a2) {
    uint64_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  }
  *a3 = CFRetain(*v7);
  return 0;
}

uint64_t ParavirtualizedVideoEncoder_StartSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v14 = 0;
  CMBlockBufferRef v15 = 0;
  CFTypeRef v13 = 0;
  unsigned int v12 = 0;
  *uint64_t DerivedStorage = a2;
  DerivedStorage[4] = a3;
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1702065249, 1, (uint64_t)(DerivedStorage + 8), 0, &v15, &v14);
  if (appended
    || (uint64_t appended = VTParavirtualizationMessageAppendCMVideoDimensions(), appended)
    || (long long v10 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v11 = 0,
        uint64_t appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v15, (uint64_t)&v10, &v13),
        appended))
  {
    uint64_t v8 = appended;
  }
  else
  {
    unsigned int SInt32 = VTParavirtualizationMessageGetSInt32(v13, 744845938, &v12);
    if (SInt32) {
      uint64_t v8 = SInt32;
    }
    else {
      uint64_t v8 = v12;
    }
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v8;
}

uint64_t ParavirtualizedVideoEncoder_EncodeFrame(uint64_t a1, const void *a2, __CVBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  unsigned int v27 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v25 = 0;
  CFTypeRef cf = 0;
  IOSurfaceRef IOSurface = 0;
  CFTypeRef v24 = 0;
  int v22 = 0;
  if (CVPixelBufferGetWidth(a3) != *(_DWORD *)(DerivedStorage + 32)
    || CVPixelBufferGetHeight(a3) != *(_DWORD *)(DerivedStorage + 36))
  {
    uint64_t v18 = FigSignalErrorAt();
    CFUUIDRef v15 = 0;
    goto LABEL_23;
  }
  if (a3)
  {
    CFUUIDRef v15 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
    paravirtualizedVideoEncoder_rememberPendingFramePixelBufferAndUUID(a1, v15, a3);
  }
  else
  {
    CFUUIDRef v15 = 0;
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a3);
  if (!IOSurface)
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_23;
  }
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1701212781, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&cf, &v25);
  if (!appended)
  {
    uint64_t appended = VTParavirtualizationMessageAppendSInt64();
    if (!appended)
    {
      long long v20 = *(_OWORD *)a4;
      uint64_t v21 = *(void *)(a4 + 16);
      uint64_t appended = VTParavirtualizationMessageAppendCMTime();
      if (!appended)
      {
        long long v20 = *(_OWORD *)a5;
        uint64_t v21 = *(void *)(a5 + 16);
        uint64_t appended = VTParavirtualizationMessageAppendCMTime();
        if (!appended)
        {
          if (!a6
            || (uint64_t appended = VTParavirtualizationMessageAppendCFDictionary(v25, 744910962, a6), !appended))
          {
            if (!v15
              || (uint64_t appended = VTParavirtualizationMessageAppendCFUUID((uint64_t)v25, 745895273, v15), !appended))
            {
              if (!a3
                || (uint64_t appended = VTParavirtualizationMessageAppendPixelBufferAndIOSurfaceAttachments((uint64_t)v25, a3),
                    !appended))
              {
                long long v20 = kVTParavirtualizationCodecOperationReplyTimeout;
                uint64_t v21 = 0;
                uint64_t appended = VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, (uint64_t)&IOSurface, 1, &v20, &v24);
                if (!appended)
                {
                  uint64_t appended = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v24, 744845938, &v27);
                  if (!appended)
                  {
                    uint64_t appended = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)v24, 745107046, &v22);
                    if (!appended)
                    {
                      int v17 = v22;
                      uint64_t appended = paravirtualizedVideoEncoder_forgetPendingFramePixelBufferByUUID(a1, 1, 0, v15);
                      if (!appended)
                      {
                        uint64_t v18 = v27;
                        if (a7) {
                          *a7 = v17;
                        }
LABEL_23:
                        if (!v18) {
                          goto LABEL_25;
                        }
                        goto LABEL_24;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v18 = appended;
LABEL_24:
  VTEncoderSessionEmitEncodedFrame(*(uint64_t **)DerivedStorage, a2, v18, 0, 0);
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v18;
}

uint64_t ParavirtualizedVideoEncoder_CompleteFrames(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v12 = 0;
  CMBlockBufferRef v13 = 0;
  CFTypeRef cf = 0;
  unsigned int v10 = 0;
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1701013106, 1, DerivedStorage + 64, 0, &v13, &v12);
  if (appended
    || (long long v8 = *(_OWORD *)a2,
        uint64_t v9 = *(void *)(a2 + 16),
        uint64_t appended = VTParavirtualizationMessageAppendCMTime(),
        appended)
    || (long long v8 = kVTParavirtualizationCodecOperationReplyTimeout,
        uint64_t v9 = 0,
        uint64_t appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v13, (uint64_t)&v8, &cf),
        appended))
  {
    uint64_t v6 = appended;
  }
  else
  {
    unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744845938, &v10);
    if (SInt32) {
      uint64_t v6 = SInt32;
    }
    else {
      uint64_t v6 = v10;
    }
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t ParavirtualizedVideoEncoder_CopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 40))
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    CMBlockBufferRef v15 = 0;
    CFTypeRef v13 = 0;
    CFTypeRef cf = 0;
    CFTypeRef v12 = 0;
    unsigned int v11 = 0;
    uint64_t SInt32 = VTParavirtualizationCreateMessageAndByteStream(1702065520, 1, v5 + 64, 0, &v15, &cf);
    if (SInt32
      || (long long v9 = kVTParavirtualizationDefaultReplyTimeout,
          uint64_t v10 = 0,
          uint64_t SInt32 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v15, (uint64_t)&v9, &v13),
          SInt32)
      || (uint64_t SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v13, 744845938, &v11), SInt32))
    {
      uint64_t v4 = SInt32;
    }
    else
    {
      uint64_t v4 = v11;
      if (!v11)
      {
        uint64_t v4 = VTParavirtualizationMessageCopyCFDictionary((OpaqueCMBlockBuffer *)v13, 745764208, &v12);
        if (!v4)
        {
          *(void *)(DerivedStorage + 40) = v12;
          CFTypeRef v12 = 0;
        }
      }
    }
    if (v15) {
      CFRelease(v15);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v13) {
      CFRelease(v13);
    }
    if (v12) {
      CFRelease(v12);
    }
  }
  if (!a2) {
    return FigSignalErrorAt();
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 40);
  if (!v7) {
    return FigSignalErrorAt();
  }
  *a2 = CFRetain(v7);
  return v4;
}

uint64_t ParavirtualizedVideoEncoder_SetProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v23 = 0;
  CFTypeRef v24 = 0;
  CFTypeRef v22 = 0;
  unsigned int v21 = 0;
  uint64_t v5 = VTParavirtualizationCreateMessageAndByteStream(1701672300, 1, DerivedStorage + 64, 0, (CMBlockBufferRef *)&v24, &v23);
  if (v5)
  {
    uint64_t v12 = v5;
  }
  else
  {
    uint64_t CMBaseObject = VTVideoEncoderGetCMBaseObject(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFArrayRef v8 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
    uint64_t Count = FigCFDictionaryGetCount();
    if (Count >= 1)
    {
      uint64_t v10 = Count;
      CFIndex v11 = 0;
      uint64_t v12 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
        uint64_t Value = CFDictionaryGetValue(a2, ValueAtIndex);
        cf[0] = 0;
        unsigned int v15 = paravirtualizedVideoEncoder_handleAnySpecialCaseSetPropertyAndCopyReplacementValue(CMBaseObject, (uint64_t)ValueAtIndex, Value, cf);
        if (v15 == -19096)
        {
          if (v10 == 1)
          {
            if (Mutable) {
              CFRelease(Mutable);
            }
            if (cf[0]) {
              CFRelease(cf[0]);
            }
            CFMutableDictionaryRef Mutable = 0;
            if (!v8) {
              goto LABEL_19;
            }
LABEL_18:
            CFRelease(v8);
            goto LABEL_19;
          }
        }
        else
        {
          if (v12) {
            uint64_t v12 = v12;
          }
          else {
            uint64_t v12 = v15;
          }
          if (!v15) {
            FigCFDictionarySetValue();
          }
          if (cf[0]) {
            CFRelease(cf[0]);
          }
        }
        if (v10 == ++v11) {
          goto LABEL_17;
        }
      }
    }
    uint64_t v12 = 0;
LABEL_17:
    if (v8) {
      goto LABEL_18;
    }
LABEL_19:
    if (v12)
    {
LABEL_25:
      if (!Mutable) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    uint64_t appended = VTParavirtualizationMessageAppendCFDictionary(v23, 745566831, Mutable);
    if (!appended)
    {
      *(_OWORD *)CFTypeRef cf = kVTParavirtualizationDefaultReplyTimeout;
      uint64_t v20 = 0;
      uint64_t appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v24, (uint64_t)cf, &v22);
      if (!appended)
      {
        unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v22, 744845938, &v21);
        if (SInt32) {
          uint64_t v12 = SInt32;
        }
        else {
          uint64_t v12 = v21;
        }
        goto LABEL_25;
      }
    }
    uint64_t v12 = appended;
    if (Mutable) {
LABEL_26:
    }
      CFRelease(Mutable);
  }
LABEL_27:
  if (v24) {
    CFRelease(v24);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
  return v12;
}

uint64_t ParavirtualizedVideoEncoder_CopySerializableProperties(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v14 = 0;
  CMBlockBufferRef v15 = 0;
  CFTypeRef v12 = 0;
  CFTypeRef cf = 0;
  unsigned int v11 = 0;
  uint64_t SInt32 = VTParavirtualizationCreateMessageAndByteStream(1701015408, 1, DerivedStorage + 64, 0, &v15, &v14);
  if (SInt32
    || (long long v9 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v10 = 0,
        uint64_t SInt32 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v15, (uint64_t)&v9, &cf),
        SInt32)
    || (uint64_t SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744845938, &v11), SInt32))
  {
    uint64_t v6 = SInt32;
  }
  else
  {
    uint64_t v6 = v11;
    if (!v11)
    {
      uint64_t v7 = VTParavirtualizationMessageCopyCFDictionary((OpaqueCMBlockBuffer *)cf, 745566831, &v12);
      uint64_t v6 = v7;
      if (a3)
      {
        if (!v7)
        {
          *a3 = v12;
          CFTypeRef v12 = 0;
        }
      }
    }
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v6;
}

uint64_t ParavirtualizedVideoEncoder_PrepareToEncodeFrames()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v9 = 0;
  CMBlockBufferRef v10 = 0;
  CFTypeRef cf = 0;
  unsigned int v7 = 0;
  uint64_t v1 = VTParavirtualizationCreateMessageAndByteStream(1701865074, 1, DerivedStorage + 64, 0, &v10, &v9);
  if (v1
    || (long long v5 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v6 = 0,
        uint64_t v1 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v10, (uint64_t)&v5, &cf),
        v1))
  {
    uint64_t v3 = v1;
  }
  else
  {
    unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744845938, &v7);
    if (SInt32) {
      uint64_t v3 = SInt32;
    }
    else {
      uint64_t v3 = v7;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

uint64_t ParavirtualizedVideoEncoder_BeginPass()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v9 = 0;
  CMBlockBufferRef v10 = 0;
  CFTypeRef cf = 0;
  unsigned int v7 = 0;
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1700950131, 1, DerivedStorage + 64, 0, &v10, &v9);
  if (appended
    || (uint64_t appended = VTParavirtualizationMessageAppendUInt32(), appended)
    || (long long v5 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v6 = 0,
        uint64_t appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v10, (uint64_t)&v5, &cf),
        appended))
  {
    uint64_t v3 = appended;
  }
  else
  {
    unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744845938, &v7);
    if (SInt32) {
      uint64_t v3 = SInt32;
    }
    else {
      uint64_t v3 = v7;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

uint64_t ParavirtualizedVideoEncoder_EndPass(uint64_t a1, BOOL *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v12 = 0;
  CMBlockBufferRef v13 = 0;
  uint64_t v10 = 0;
  CFTypeRef cf = 0;
  uint64_t v4 = VTParavirtualizationCreateMessageAndByteStream(1701146739, 1, DerivedStorage + 64, 0, &v13, &v12);
  if (v4
    || (long long v8 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v9 = 0,
        uint64_t v4 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v13, (uint64_t)&v8, &cf),
        v4)
    || (uint64_t v4 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744845938, (_DWORD *)&v10 + 1), v4))
  {
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = HIDWORD(v10);
    if (!HIDWORD(v10))
    {
      uint64_t SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744910962, &v10);
      uint64_t v5 = SInt32;
      if (a2)
      {
        if (!SInt32) {
          *a2 = v10 != 0;
        }
      }
    }
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t ParavirtualizedVideoEncoder_StartTileSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v15 = 0;
  CFTypeRef v13 = 0;
  CFTypeRef cf = 0;
  unsigned int v12 = 0;
  *(void *)(DerivedStorage + 8) = a2;
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1702065267, 1, DerivedStorage + 64, 0, &v15, &cf);
  if (appended
    || a3 && (uint64_t appended = VTParavirtualizationMessageAppendCFDictionary(cf, 744846192, a3), appended)
    || (VTParavirtualizationMessageAppendVTInt32Size(),
        long long v10 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v11 = 0,
        uint64_t appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v15, (uint64_t)&v10, &v13),
        appended))
  {
    uint64_t v8 = appended;
  }
  else
  {
    unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v13, 744845938, &v12);
    if (SInt32) {
      uint64_t v8 = SInt32;
    }
    else {
      uint64_t v8 = v12;
    }
  }
  if (v15) {
    CFRelease(v15);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v8;
}

uint64_t ParavirtualizedVideoEncoder_PrepareToEncodeTiles()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v10 = 0;
  CFTypeRef v8 = 0;
  CFTypeRef cf = 0;
  unsigned int v7 = 0;
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1701868649, 1, DerivedStorage + 64, 0, &v10, &cf);
  if (appended
    || (uint64_t appended = VTParavirtualizationMessageAppendSInt32(), appended)
    || (long long v5 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v6 = 0,
        uint64_t appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v10, (uint64_t)&v5, &v8),
        appended))
  {
    uint64_t v3 = appended;
  }
  else
  {
    unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v8, 744845938, &v7);
    if (SInt32) {
      uint64_t v3 = SInt32;
    }
    else {
      uint64_t v3 = v7;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v3;
}

uint64_t ParavirtualizedVideoEncoder_EncodeTile(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  v55[0] = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v53 = 0;
  CMBlockBufferRef v54 = 0;
  __int16 v52 = 0;
  IOSurfaceRef IOSurface = 0;
  int v50 = 0;
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1702127980, 1, DerivedStorage + 64, 0, &v54, &v53);
  if (appended || (uint64_t appended = VTParavirtualizationMessageAppendSInt64(), appended))
  {
    uint64_t v38 = appended;
    CFUUIDRef v29 = 0;
    goto LABEL_47;
  }
  if (!a3)
  {
    CFUUIDRef v29 = 0;
    goto LABEL_35;
  }
  uint64_t v44 = a6;
  uint64_t v42 = a1;
  uint64_t v43 = a7;
  uint64_t v14 = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  key = (void *)FigCFNumberCreateSInt64();
  lock = (os_unfair_lock_s *)(v14 + 96);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 96));
  int64_t Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v14 + 104));
  int v17 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  uint64_t v18 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  uint64_t v46 = v17;
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v14 + 104), v17, v18);
  long long v19 = (const void **)MEMORY[0x1E4F1CFC8];
  if (Count >= 1)
  {
    uint64_t v41 = a2;
    uint64_t v20 = 0;
    unsigned int v21 = 0;
    value = (void *)*MEMORY[0x1E4F1CFC8];
    char v22 = 1;
    while (1)
    {
      while (1)
      {
        CFDictionaryRef v23 = (const __CFDictionary *)v18[v20];
        if (CFDictionaryGetValue(v23, @"PVPixelBuffer") == a3) {
          break;
        }
        if (Count == ++v20)
        {
          if (v22)
          {
            a2 = v41;
            long long v19 = (const void **)MEMORY[0x1E4F1CFC8];
            goto LABEL_18;
          }
LABEL_23:
          uint64_t v30 = 0;
          a2 = v41;
          goto LABEL_24;
        }
      }
      CFTypeRef v24 = (__CFDictionary *)CFDictionaryGetValue(v23, @"TilesDict");
      if (!v24) {
        break;
      }
      CFTypeRef v25 = v24;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v15, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable) {
        break;
      }
      unsigned int v27 = Mutable;
      CFDictionarySetValue(Mutable, @"EncodeTileDidComplete", value);
      CFDictionarySetValue(v27, @"TileWasEmitted", value);
      CFDictionarySetValue(v25, key, v27);
      unsigned int v21 = CFRetain(v46[v20]);
      CFRelease(v27);
      char v22 = 0;
      if (Count - 1 == v20++) {
        goto LABEL_23;
      }
    }
    FigSignalErrorAt();
    CFUUIDRef v29 = 0;
    uint64_t v30 = 0;
    a2 = v41;
    goto LABEL_63;
  }
  unsigned int v21 = 0;
LABEL_18:
  uint64_t v30 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v30) {
    goto LABEL_59;
  }
  uint64_t v31 = CFDictionaryCreateMutable(v15, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v31
    || (uint64_t v32 = v31,
        uint64_t v33 = *v19,
        CFDictionarySetValue(v31, @"EncodeTileDidComplete", v33),
        CFDictionarySetValue(v32, @"TileWasEmitted", v33),
        CFDictionarySetValue(v30, key, v32),
        (unsigned int v21 = CFUUIDCreate(v15)) == 0)
    || (uint64_t v34 = CFDictionaryCreateMutable(v15, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) == 0)
  {
LABEL_59:
    FigSignalErrorAt();
    CFUUIDRef v29 = 0;
LABEL_63:
    a1 = v42;
    a7 = v43;
    goto LABEL_25;
  }
  int v35 = v34;
  CFDictionarySetValue(v34, @"PVPixelBuffer", a3);
  CFDictionarySetValue(v35, @"TilesDict", v30);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v14 + 104), v21, v35);
  CFRelease(v35);
  CFRelease(v32);
LABEL_24:
  a1 = v42;
  a7 = v43;
  CFDictionaryGetCount(*(CFDictionaryRef *)(v14 + 104));
  CFUUIDRef v29 = (const __CFUUID *)v21;
  unsigned int v21 = 0;
LABEL_25:
  os_unfair_lock_unlock(lock);
  if (key) {
    CFRelease(key);
  }
  if (v21) {
    CFRelease(v21);
  }
  free(v46);
  free(v18);
  if (v30) {
    CFRelease(v30);
  }
  if (v29)
  {
    uint64_t SInt32 = VTParavirtualizationMessageAppendCFUUID((uint64_t)v53, 745895273, v29);
    a6 = v44;
    if (SInt32)
    {
LABEL_57:
      uint64_t v38 = SInt32;
LABEL_47:
      VTEncoderSessionEmitEncodedTile(*(uint64_t **)(DerivedStorage + 8), a2, v38, 0, 0);
      goto LABEL_48;
    }
  }
  else
  {
    a6 = v44;
  }
LABEL_35:
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface((CVPixelBufferRef)a3);
  if (IOSurface)
  {
    uint64_t SInt32 = VTParavirtualizationMessageAppendVTInt32Point();
    if (SInt32) {
      goto LABEL_57;
    }
    uint64_t SInt32 = VTParavirtualizationMessageAppendVTInt32Size();
    if (SInt32) {
      goto LABEL_57;
    }
    if (a6)
    {
      uint64_t SInt32 = VTParavirtualizationMessageAppendCFDictionary(v53, 745826672, a6);
      if (SInt32) {
        goto LABEL_57;
      }
    }
    long long v48 = kVTParavirtualizationCodecOperationReplyTimeout;
    uint64_t v49 = 0;
    uint64_t SInt32 = VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync(v54, (uint64_t)&IOSurface, 1, &v48, &v52);
    if (SInt32) {
      goto LABEL_57;
    }
    uint64_t SInt32 = VTParavirtualizationMessageGetSInt32(v52, 744845938, v55);
    if (SInt32) {
      goto LABEL_57;
    }
    uint64_t SInt32 = VTParavirtualizationMessageGetUInt32(v52, 744842860, &v50);
    if (SInt32) {
      goto LABEL_57;
    }
    int v37 = v50;
    uint64_t SInt32 = paravirtualizedVideoEncoder_lookupRetainAndForgetPendingTilePixelBufferByUUID(a1, a2, 1, 0, v29);
    if (SInt32) {
      goto LABEL_57;
    }
    uint64_t v38 = v55[0];
    if (a7) {
      *a7 = v37;
    }
    if (v38) {
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v38 = FigSignalErrorAt();
    if (v38) {
      goto LABEL_47;
    }
  }
LABEL_48:
  if (v54) {
    CFRelease(v54);
  }
  if (v53) {
    CFRelease(v53);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (v29) {
    CFRelease(v29);
  }
  return v38;
}

uint64_t ParavirtualizedVideoEncoder_CompleteTiles()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v9 = 0;
  CMBlockBufferRef v10 = 0;
  CFTypeRef cf = 0;
  unsigned int v7 = 0;
  uint64_t v1 = VTParavirtualizationCreateMessageAndByteStream(1701016681, 1, DerivedStorage + 64, 0, &v10, &v9);
  if (v1
    || (long long v5 = kVTParavirtualizationCodecOperationReplyTimeout,
        uint64_t v6 = 0,
        uint64_t v1 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v10, (uint64_t)&v5, &cf),
        v1))
  {
    uint64_t v3 = v1;
  }
  else
  {
    unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744845938, &v7);
    if (SInt32) {
      uint64_t v3 = SInt32;
    }
    else {
      uint64_t v3 = v7;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

uint64_t ParavirtualizedVideoEncoder_EncodeMultiImageFrame(uint64_t a1, const void *a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  unsigned int v47 = 0;
  uint64_t DerivedStorage = (uint64_t **)CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v46 = 0;
  CFTypeRef v44 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef v13 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFAllocatorRef v15 = CFArrayCreateMutable(v12, 0, v13);
  CFTypeRef v16 = CFArrayCreateMutable(v12, 0, v13);
  size_t Count = CMTaggedBufferGroupGetCount(a3);
  unint64_t v40 = malloc_type_calloc(Count, 8uLL, 0x2004093837F09uLL);
  int v43 = 0;
  if (CMTaggedBufferGroupGetCount(a3) <= 0 || !Mutable || !v15 || !v16 || !v40)
  {
    uint64_t v32 = FigSignalErrorAt();
    goto LABEL_31;
  }
  uint64_t v34 = a7;
  uint64_t v38 = a2;
  uint64_t v39 = DerivedStorage;
  if (CMTaggedBufferGroupGetCount(a3) >= 1)
  {
    CFIndex v18 = 0;
    while (1)
    {
      CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
      IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(CVPixelBufferAtIndex);
      CMTagCollectionRef TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(a3, v18);
      if (!IOSurface) {
        break;
      }
      CMTagCollectionRef v22 = TagCollectionAtIndex;
      v40[v18] = IOSurface;
      if (CVPixelBufferAtIndex)
      {
        CFUUIDRef v23 = CFUUIDCreate(v12);
        CFArrayAppendValue(v15, v23);
        CFArrayAppendValue(Mutable, CVPixelBufferAtIndex);
        if (v23) {
          CFRelease(v23);
        }
      }
      if (!v22) {
        break;
      }
      CFArrayAppendValue(v16, v22);
      if (++v18 >= CMTaggedBufferGroupGetCount(a3)) {
        goto LABEL_14;
      }
    }
    uint64_t v32 = FigSignalErrorAt();
    a2 = v38;
    uint64_t DerivedStorage = v39;
LABEL_31:
    if (!v32) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
LABEL_14:
  if (CFArrayGetCount(v15) >= 1)
  {
    CFIndex v24 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v15, v24);
      uint64_t v26 = CFArrayGetValueAtIndex(Mutable, v24);
      paravirtualizedVideoEncoder_rememberPendingFramePixelBufferAndUUID(a1, ValueAtIndex, v26);
      ++v24;
    }
    while (v24 < CFArrayGetCount(v15));
  }
  uint64_t DerivedStorage = v39;
  uint64_t v27 = VTParavirtualizationCreateMessageAndByteStream(1701669222, 1, (uint64_t)(v39 + 8), 0, &v46, &cf);
  if (v27)
  {
    uint64_t v32 = v27;
    a2 = v38;
  }
  else
  {
    a2 = v38;
    uint64_t appended = VTParavirtualizationMessageAppendSInt64();
    if (!appended)
    {
      long long v41 = *(_OWORD *)a4;
      uint64_t v42 = *(void *)(a4 + 16);
      uint64_t appended = VTParavirtualizationMessageAppendCMTime();
      if (!appended)
      {
        long long v41 = *(_OWORD *)a5;
        uint64_t v42 = *(void *)(a5 + 16);
        uint64_t appended = VTParavirtualizationMessageAppendCMTime();
        if (!appended)
        {
          if (!a6 || (uint64_t appended = VTParavirtualizationMessageAppendCFDictionary(cf, 744910962, a6), !appended))
          {
            uint64_t appended = VTParavirtualizationMessageAppendCFUUIDArray((uint64_t)cf, 745892139, v15);
            if (!appended)
            {
              uint64_t appended = VTParavirtualizationMessageAppendFigTagCollectionArray((uint64_t)cf, 745825067, v16);
              if (!appended)
              {
                CFUUIDRef v29 = v46;
                CFIndex v30 = CFArrayGetCount(Mutable);
                long long v41 = kVTParavirtualizationCodecOperationReplyTimeout;
                uint64_t v42 = 0;
                uint64_t appended = VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync(v29, (uint64_t)v40, v30, &v41, &v44);
                if (!appended)
                {
                  uint64_t appended = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v44, 744845938, &v47);
                  if (!appended)
                  {
                    uint64_t appended = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)v44, 745107046, &v43);
                    if (!appended)
                    {
                      int v31 = v43;
                      uint64_t appended = paravirtualizedVideoEncoder_forgetPendingFramePixelBuffersByUUIDs(a1, 1, 0, v15);
                      if (!appended)
                      {
                        uint64_t v32 = v47;
                        if (v34) {
                          *uint64_t v34 = v31;
                        }
                        goto LABEL_31;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v32 = appended;
  }
LABEL_32:
  VTEncoderSessionEmitEncodedFrame(*DerivedStorage, a2, v32, 0, 0);
LABEL_33:
  if (v46) {
    CFRelease(v46);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  free(v40);
  return v32;
}

void paravirtualizedVideoEncoder_rememberPendingFramePixelBufferAndUUID(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 84));
  CFDictionarySetValue(Mutable, @"PVPixelBuffer", a3);
  unsigned int v7 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFDictionarySetValue(Mutable, @"PVEncodeFrameDidComplete", (const void *)*MEMORY[0x1E4F1CFC8]);
  CFDictionarySetValue(Mutable, @"PVFrameWasEmitted", v7);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 88), a2, Mutable);
  CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 88));
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 84));
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t VTHDRPerFrameMetadataGenerationSessionGetTypeID()
{
  return sVTHDRPerFrameMetadataGenerationSessionID;
}

uint64_t RegisterVTHDRPerFrameMetadataGenerationSession()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTHDRPerFrameMetadataGenerationSessionID = result;
  return result;
}

uint64_t VTHDRPerFrameMetadataGenerationSessionCreate(uint64_t a1, float a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v10 = 0;
  if (!a4) {
    return 4294954394;
  }
  if (a2 <= 0.0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x199705810](&VTHDRPerFrameMetadataGenerationSessionGetTypeID_sRegisterVTHDRPerFrameMetadataGenerationSessionOnce, RegisterVTHDRPerFrameMetadataGenerationSession);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v8 = Instance;
      *(unsigned char *)(Instance + 17) = 1;
      *(float *)(Instance + 20) = a2;
      FigCFDictionaryGetValue();
      uint64_t result = FigCFArrayContainsValue();
      *(unsigned char *)(v8 + 24) = result;
      if (result)
      {
        uint64_t result = VTHDRMetadataGenerationSessionCreate(a1, 4, 0, &v10);
        *(void *)(v8 + 32) = v10;
      }
      *a4 = v8;
    }
    else
    {
      return 4294954392;
    }
  }
  return result;
}

uint64_t VTHDRPerFrameMetadataGenerationSessionAttachMetadata(uint64_t a1, CVBufferRef buffer, int a3)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  CFTypeRef v15 = 0;
  memset(v14, 0, 108);
  if (!buffer)
  {
    DataFromuint64_t Statistics = FigSignalErrorAt();
    goto LABEL_19;
  }
  CFTypeRef v6 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  unsigned int v7 = v6;
  if (v6 && *(unsigned char *)(a1 + 17))
  {
    *(unsigned char *)(a1 + 17) = 0;
    *(void *)(a1 + 48) = CFRetain(v6);
  }
  else if (!FigCFEqual())
  {
    uint64_t Statistics = FigSignalErrorAt();
LABEL_24:
    DataFromuint64_t Statistics = Statistics;
    goto LABEL_17;
  }
  if (!FigCFEqual() && !FigCFEqual() || !FigCFEqual() || !*(unsigned char *)(a1 + 24))
  {
    DataFromuint64_t Statistics = 0;
    goto LABEL_17;
  }
  CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F24AF0];
  CVBufferRemoveAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24AF0]);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
LABEL_13:
    uint64_t Statistics = VTHDRImageStatisticsGenerationSessionCreateStatistics(v9, buffer, (float *)&v17 + 1, (float *)&v17, (float *)&v16 + 1, (float *)&v16);
    if (!Statistics)
    {
      DataFromuint64_t Statistics = VTHDRMetadataGenerationSessionCreateDataFromStatistics(*(void *)(a1 + 32), 0, 1, (uint64_t)v14, a3, (uint64_t)&v15);
      if (!DataFromStatistics) {
        CVBufferSetAttachment(buffer, v8, v15, kCVAttachmentMode_ShouldPropagate);
      }
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  uint64_t v10 = VTHDRImageStatisticsGenerationSessionCreate(*(void *)(a1 + 56), 0, (uint64_t *)(a1 + 40));
  if (!v10)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    goto LABEL_13;
  }
  DataFromuint64_t Statistics = v10;
  FigSignalErrorAt();
LABEL_17:
  if (v7) {
    CFRelease(v7);
  }
LABEL_19:
  if (v15) {
    CFRelease(v15);
  }
  return DataFromStatistics;
}

void VTHDRPerFrameMetadataGenerationSessionInit(uint64_t a1)
{
}

void VTHDRPerFrameMetadataGenerationSessionFinalize(void *a1)
{
  uint64_t v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
  }
}

CFTypeRef VTHDRPerFrameMetadataGenerationSessionCopyFormattingDesc()
{
  return CFRetain(@"[VTHDRPerFrameMetadataGenerationSession]");
}

__CFString *VTHDRPerFrameMetadataGenerationSessionCopyDebugDesc(unsigned __int8 *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<VTHDRPerFrameMetadataGenerationSession %p [%p]>{invalid:%d, }", a1, v4, a1[16]);
  return Mutable;
}

uint64_t VTAvoidHardwarePixelTransfer()
{
  return sVTAvoidHardwarePixelTransfer;
}

uint64_t VTAvoidIOSurfaceBackings()
{
  return sVTAvoidIOSurfaceBackings;
}

uint64_t VTAvoidHardwareDecoders()
{
  return sVTAvoidHardwareDecoders;
}

uint64_t VTAvoidHardwareJPEGDecoders()
{
  return 0;
}

uint64_t VTShouldRunVideoDecodersInProcess()
{
  if (VTShouldRunVideoDecodersInProcess_entitlementCheckOnce != -1) {
    dispatch_once(&VTShouldRunVideoDecodersInProcess_entitlementCheckOnce, &__block_literal_global_4);
  }
  return sVTRunVideoDecodersInProcess;
}

uint64_t __VTShouldRunVideoDecodersInProcess_block_invoke()
{
  if (currentProcessHasTrueBooleanEntitlement(@"com.apple.videotoolbox.decode-in-process")) {
    sVTRunVideoDecodersInProcess = 1;
  }
  uint64_t result = VTVideoCodecService_ShouldUseOOPDecodeForVideoPlayer();
  if (result)
  {
    uint64_t result = FigServer_IsMediaplaybackd();
    if (result) {
      sVTRunVideoDecodersInProcess = 0;
    }
  }
  return result;
}

uint64_t currentProcessHasTrueBooleanEntitlement(const __CFString *a1)
{
  CFErrorRef error = 0;
  CFAllocatorRef v2 = SecTaskCreateFromSelf(0);
  if (v2)
  {
    uint64_t v3 = v2;
    CFBooleanRef v4 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v2, a1, &error);
    if (v4)
    {
      CFBooleanRef v5 = v4;
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFBooleanGetTypeID()) {
        uint64_t Value = CFBooleanGetValue(v5);
      }
      else {
        uint64_t Value = 0;
      }
      CFRelease(v5);
    }
    else
    {
      uint64_t Value = 0;
    }
    if (error) {
      CFRelease(error);
    }
    CFRelease(v3);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return Value;
}

uint64_t VTShouldRunVideoEncodersInProcess()
{
  if (VTShouldRunVideoEncodersInProcess_entitlementCheckOnce != -1) {
    dispatch_once(&VTShouldRunVideoEncodersInProcess_entitlementCheckOnce, &__block_literal_global_7);
  }
  return sVTRunVideoEncodersInProcess;
}

uint64_t __VTShouldRunVideoEncodersInProcess_block_invoke()
{
  uint64_t result = currentProcessHasTrueBooleanEntitlement(@"com.apple.videotoolbox.encode-in-process");
  if (result) {
    sVTRunVideoEncodersInProcess = 1;
  }
  return result;
}

uint64_t VTAvoidHardwareEncoders()
{
  return sVTAvoidHardwareEncoders;
}

uint64_t VTGetAllowedDecoderList()
{
  return sVTAllowedDecoderList;
}

uint64_t VTRestrictVideoDecoders(unsigned int a1, unsigned int *a2, CFIndex a3)
{
  if (!VTHasVideoDecoderRegistryBeenCreated()
    && (a1 & 1) != 0
    && (a1 & 2) != 0
    && (a1 & 4) != 0
    && (a1 & 8) != 0
    && !sVTAllowedDecoderList
    && !VTRestrictVideoDecoders_sVTVideoDecoderRestrictionFlags)
  {
    if ((sVTRunVideoDecodersInProcess & 1) != 0
      || (sVTAvoidHardwareDecoders & 1) != 0
      || (sVTAvoidIOSurfaceBackings & 1) != 0
      || (sVTAvoidHardwarePixelTransfer & 1) != 0
      || (sVTRunVideoEncodersInProcess & 1) != 0
      || sVTAvoidHardwareEncoders == 1)
    {
      FigSignalErrorAt();
    }
    else if ((a1 & 0x40) == 0 || a3)
    {
      if (a2)
      {
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, MEMORY[0x1E4F1D510]);
        if (!Mutable) {
          return 0;
        }
        CFStringRef v8 = Mutable;
        if (a3 >= 1)
        {
          do
          {
            unsigned int v9 = *a2++;
            *(_DWORD *)bytes = bswap32(v9);
            CFStringRef v10 = CFStringCreateWithBytes(v6, bytes, 4, 0x600u, 0);
            if (!v10) {
              return 0;
            }
            CFStringRef v11 = v10;
            CFArrayAppendValue(v8, v10);
            CFRelease(v11);
          }
          while (--a3);
        }
        sVTAllowedDecoderList = (uint64_t)v8;
        int v12 = VTRestrictVideoDecoders_sVTVideoDecoderRestrictionFlags;
      }
      else
      {
        int v12 = 0;
      }
      VTRestrictVideoDecoders_sVTVideoDecoderRestrictionFlags = v12 | a1;
      VTSetVideoDecoderRestrictions(v12 | a1);
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t VTSetVideoDecoderRestrictions(uint64_t result)
{
  if ((result & 8) != 0)
  {
    sVTAvoidHardwarePixelTransfer = 1;
    if ((result & 4) == 0)
    {
LABEL_3:
      if ((result & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((result & 4) == 0)
  {
    goto LABEL_3;
  }
  sVTAvoidIOSurfaceBackings = 1;
  if ((result & 2) == 0)
  {
LABEL_4:
    if ((result & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  sVTAvoidHardwareDecoders = 1;
  if ((result & 1) == 0)
  {
LABEL_5:
    if ((result & 0x40) == 0) {
      return result;
    }
LABEL_11:
    sVTShouldRegisterLimitedSystemDecodersOnlyAndWithoutValidation = 1;
    return result;
  }
LABEL_10:
  sVTRunVideoDecodersInProcess = 1;
  if ((result & 0x40) != 0) {
    goto LABEL_11;
  }
  return result;
}

uint64_t VTAreVideoDecodersRunningInProcess()
{
  return sVTRunVideoDecodersInProcess;
}

uint64_t VTApplyRestrictions(uint64_t a1)
{
  if (VTHasVideoDecoderRegistryBeenCreated() || VTHasVideoEncoderRegistryBeenCreated())
  {
    return FigSignalErrorAt();
  }
  else
  {
    VTSetVideoDecoderRestrictions(a1);
    if ((a1 & 0x10) != 0) {
      sVTRunVideoEncodersInProcess = 1;
    }
    if ((a1 & 0x20) != 0) {
      sVTAvoidHardwareEncoders = 1;
    }
    return 0;
  }
}

uint64_t VTTestMode(int a1)
{
  uint64_t result = os_variant_has_internal_content();
  if (!result) {
    goto LABEL_11;
  }
  if (a1 > 825828465)
  {
    if (a1 == 825828466)
    {
      sVTRunVideoDecodersInProcess = 0;
    }
    else
    {
      if (a1 != 1193481106) {
        goto LABEL_11;
      }
      sVTRunVideoEncodersInProcess = 0;
    }
  }
  else
  {
    if (a1 != 658674451)
    {
      if (a1 == 691090036)
      {
        sVTRunVideoEncodersInProcess = 1;
        return result;
      }
LABEL_11:
      abort();
    }
    sVTRunVideoDecodersInProcess = 1;
  }
  return result;
}

double dsrxpc_Init(uint64_t a1)
{
  *(void *)(a1 + 256) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void dsrxpc_Finalize(void *a1)
{
  VTDecompressionSessionRemoteXPC_Invalidate((uint64_t)a1);
  CFAllocatorRef v2 = a1[15];
  if (v2)
  {
    dispatch_release(v2);
    a1[15] = 0;
  }
  uint64_t v3 = a1[16];
  if (v3)
  {
    dispatch_release(v3);
    a1[16] = 0;
  }
  CFBooleanRef v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  FigSimpleMutexDestroy();
  a1[6] = 0;
  FigSemaphoreDestroy();
  a1[7] = 0;
  FigSemaphoreDestroy();
  a1[9] = 0;
  FigSemaphoreDestroy();
  a1[11] = 0;
  FigSemaphoreDestroy();
  a1[13] = 0;
  FigSimpleMutexDestroy();
  a1[17] = 0;
  CFBooleanRef v5 = (const void *)a1[19];
  if (v5)
  {
    CFRelease(v5);
    a1[19] = 0;
  }
  CFAllocatorRef v6 = (const void *)a1[30];
  if (v6)
  {
    CFRelease(v6);
    a1[30] = 0;
  }
  unsigned int v7 = (const void *)a1[26];
  if (v7)
  {
    CFRelease(v7);
    a1[26] = 0;
  }
  CFStringRef v8 = (const void *)a1[18];
  if (v8)
  {
    CFRelease(v8);
    a1[18] = 0;
  }
  unsigned int v9 = (const void *)a1[21];
  if (v9)
  {
    CFRelease(v9);
    a1[21] = 0;
  }
  CFStringRef v10 = (const void *)a1[20];
  if (v10)
  {
    CFRelease(v10);
    a1[20] = 0;
  }
  CFStringRef v11 = (const void *)a1[31];
  if (v11)
  {
    CFRelease(v11);
    a1[31] = 0;
  }
  int v12 = (const void *)a1[32];
  if (v12)
  {
    CFRelease(v12);
    a1[32] = 0;
  }
}

CFStringRef dsrxpc_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[VTDecompressionSessionXPCRemote %p] [objId = %016llx] ", a1, *(void *)(a1 + 16));
}

uint64_t __VTDecompressionSessionXPCRemoteGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  VTDecompressionSessionXPCRemoteGetTypeID_sVTDecompressionSessionXPCRemoteID = result;
  return result;
}

uint64_t VTDecompressionSessionRemoteXPC_Create(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, uint64_t a5, _OWORD *a6, uint64_t a7, CFTypeRef *a8)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  memset(buffer, 0, sizeof(buffer));
  if (!a1)
  {
    uint64_t NewSession = FigSignalErrorAt();
LABEL_31:
    uint64_t v23 = NewSession;
    goto LABEL_32;
  }
  uint64_t NewSession = dsrxpc_oneTimeInitialization();
  if (NewSession) {
    goto LABEL_31;
  }
  uint64_t NewSession = dsrxpc_copyPixelBufferRecipient(0);
  if (NewSession) {
    goto LABEL_31;
  }
  uint64_t NewSession = FigXPCRemoteClientCopyMemoryOrigin();
  if (NewSession) {
    goto LABEL_31;
  }
  uint64_t NewSession = FigXPCRemoteClientCopyMemoryRecipient();
  if (NewSession) {
    goto LABEL_31;
  }
  uint64_t NewSession = dsrxpc_CreateNewSession(a1, 0, a2, (uint64_t *)&cf);
  if (NewSession) {
    goto LABEL_31;
  }
  if (a6) {
    *((_OWORD *)cf + 11) = *a6;
  }
  uint64_t NewSession = FigXPCCreateBasicMessage();
  if (NewSession) {
    goto LABEL_31;
  }
  pid_t v16 = getpid();
  proc_name(v16, buffer, 0x20u);
  xpc_dictionary_set_string(0, (const char *)*MEMORY[0x1E4F20298], (const char *)buffer);
  uint64_t NewSession = FigXPCMessageSetFormatDescription();
  if (NewSession) {
    goto LABEL_31;
  }
  if (!a4)
  {
    long long v19 = 0;
    goto LABEL_18;
  }
  if (CFDictionaryContainsKey(a4, @"CMSession"))
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a4);
    if (MutableCopy)
    {
      CFIndex v18 = MutableCopy;
      CFDictionaryRemoveValue(MutableCopy, @"CMSession");
      long long v19 = v18;
      goto LABEL_17;
    }
    uint64_t v23 = 0;
LABEL_32:
    long long v19 = 0;
    goto LABEL_33;
  }
  long long v19 = 0;
LABEL_17:
  uint64_t v20 = FigXPCMessageSetCFDictionary();
  if (v20)
  {
LABEL_29:
    uint64_t v23 = v20;
    goto LABEL_33;
  }
LABEL_18:
  if (a7)
  {
    uint64_t v20 = FigXPCMessageSetCFDictionary();
    if (v20) {
      goto LABEL_29;
    }
  }
  if (a5)
  {
    uint64_t v20 = FigXPCMessageSetCFDictionary();
    if (v20) {
      goto LABEL_29;
    }
  }
  if (FigServer_IsServerProcess()) {
    xpc_dictionary_set_BOOL(0, "ClientNeverSuspends", 1);
  }
  uint64_t v20 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v20) {
    goto LABEL_29;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  *((void *)cf + 2) = uint64;
  uint64_t v20 = FigXPCRemoteClientAssociateObject();
  if (v20) {
    goto LABEL_29;
  }
  uint64_t started = FigStartMonitoringMediaServicesProcessDeath();
  uint64_t v23 = started;
  if (a8 && !started)
  {
    *a8 = cf;
    CFTypeRef cf = 0;
    goto LABEL_35;
  }
LABEL_33:
  if (cf) {
    CFRelease(cf);
  }
LABEL_35:
  if (v19) {
    CFRelease(v19);
  }
  FigXPCRelease();
  FigXPCRelease();
  return v23;
}

uint64_t dsrxpc_oneTimeInitialization()
{
  uint64_t v3 = 0;
  CFBooleanRef v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __dsrxpc_oneTimeInitialization_block_invoke;
  block[3] = &unk_1E5785408;
  block[4] = &v3;
  if (dsrxpc_oneTimeInitialization_once != -1) {
    dispatch_once(&dsrxpc_oneTimeInitialization_once, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t dsrxpc_copyPixelBufferRecipient(CFTypeRef *a1)
{
  uint64_t v2 = MEMORY[0x1997056B0](gPixelBufferRecipientLock);
  if (v2)
  {
    uint64_t v4 = v2;
    goto LABEL_13;
  }
  uint64_t v3 = (const void *)gPixelBufferRecipient;
  if (!gPixelBufferRecipient)
  {
    uint64_t updated = FigXPCCreateBasicMessage();
    if (updated
      || (uint64_t updated = FigXPCRemoteClientSendSyncMessageCreatingReply(), updated)
      || (uint64_t updated = FigXPCCreateBasicMessage(), updated)
      || (uint64_t updated = FigPixelBufferRecipientCreateWithXPCMessage1AndUpdateXPCMessage2(), updated)
      || (uint64_t updated = FigXPCRemoteClientSendSyncMessage(), updated))
    {
      uint64_t v4 = updated;
      goto LABEL_12;
    }
    uint64_t v3 = 0;
    gPixelBufferRecipient = 0;
    if (a1) {
      goto LABEL_4;
    }
LABEL_11:
    uint64_t v4 = 0;
    goto LABEL_12;
  }
  if (!a1) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v4 = 0;
  *a1 = CFRetain(v3);
LABEL_12:
  MEMORY[0x1997056C0](gPixelBufferRecipientLock);
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

uint64_t dsrxpc_CreateNewSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a4) {
    goto LABEL_9;
  }
  if (VTDecompressionSessionXPCRemoteGetTypeID_once != -1) {
    dispatch_once(&VTDecompressionSessionXPCRemoteGetTypeID_once, &__block_literal_global_5);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v8 = Instance;
    if ((a1 != 0) == (a2 != 0))
    {
      uint64_t v12 = FigSignalErrorAt();
      CFRelease((CFTypeRef)v8);
      return v12;
    }
    else
    {
      if (a1 | a2) {
        *(void *)(Instance + 160) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      }
      *(_WORD *)(v8 + 24) = 0;
      *(_DWORD *)(v8 + 28) = 0;
      *(void *)(v8 + 120) = dispatch_group_create();
      *(void *)(v8 + 128) = dispatch_queue_create("com.apple.coremedia.decompressionsession.clientcallbackret", 0);
      *(void *)(v8 + 32) = 1;
      *(void *)(v8 + 56) = FigSemaphoreCreate();
      uint64_t v9 = FigSemaphoreCreate();
      *(void *)(v8 + 64) = 0;
      *(void *)(v8 + 72) = v9;
      *(_DWORD *)(v8 + 80) = 0;
      *(void *)(v8 + 208) = 0;
      *(void *)(v8 + 40) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      *(void *)(v8 + 48) = FigSimpleMutexCreate();
      uint64_t v10 = FigSimpleMutexCreate();
      *(void *)(v8 + 144) = 0;
      *(void *)(v8 + 152) = 0;
      *(void *)(v8 + 136) = v10;
      *(void *)(v8 + 88) = FigSemaphoreCreate();
      *(_DWORD *)(v8 + 96) = 0;
      *(void *)(v8 + 104) = FigSemaphoreCreate();
      *(_DWORD *)(v8 + 112) = 0;
      *a4 = v8;
      return 0;
    }
  }
  else
  {
LABEL_9:
    return FigSignalErrorAt();
  }
}

uint64_t VTTileDecompressionSessionRemoteXPC_Create(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CFTypeRef *a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  memset(buffer, 0, sizeof(buffer));
  uint64_t NewSession = dsrxpc_oneTimeInitialization();
  if (NewSession) {
    goto LABEL_14;
  }
  uint64_t NewSession = dsrxpc_copyPixelBufferRecipient(0);
  if (NewSession) {
    goto LABEL_14;
  }
  uint64_t NewSession = dsrxpc_CreateNewSession(0, a1, a2, (uint64_t *)&cf);
  if (NewSession) {
    goto LABEL_14;
  }
  uint64_t v14 = cf;
  *((void *)cf + 28) = a6;
  v14[29] = a5;
  uint64_t NewSession = FigXPCCreateBasicMessage();
  if (NewSession) {
    goto LABEL_14;
  }
  pid_t v15 = getpid();
  proc_name(v15, buffer, 0x20u);
  xpc_dictionary_set_string(0, (const char *)*MEMORY[0x1E4F20298], (const char *)buffer);
  uint64_t NewSession = FigXPCMessageSetFormatDescription();
  if (NewSession) {
    goto LABEL_14;
  }
  if (a4)
  {
    uint64_t NewSession = FigXPCMessageSetCFDictionary();
    if (NewSession) {
      goto LABEL_14;
    }
  }
  if (FigServer_IsServerProcess()) {
    xpc_dictionary_set_BOOL(0, "ClientNeverSuspends", 1);
  }
  uint64_t NewSession = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (NewSession)
  {
LABEL_14:
    uint64_t v18 = NewSession;
  }
  else
  {
    uint64_t uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
    *((void *)cf + 2) = uint64;
    uint64_t v17 = FigXPCRemoteClientAssociateObject();
    uint64_t v18 = v17;
    if (a7 && !v17)
    {
      *a7 = cf;
      CFTypeRef cf = 0;
      goto LABEL_17;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  return v18;
}

uint64_t VTDecompressionSessionRemoteXPC_DecodeFrame(uint64_t a1, opaqueCMSampleBuffer *a2, unsigned int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  return dsrxpc_DecodeFrameCommon(a1, a2, a3, a4, a5, a6, 0, 0);
}

uint64_t dsrxpc_DecodeFrameCommon(uint64_t a1, opaqueCMSampleBuffer *a2, unsigned int a3, uint64_t a4, uint64_t a5, _DWORD *a6, const void *a7, const void *a8)
{
  xpc_object_t v35 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2000000000;
  int v34 = 0;
  CFTypeRef v30 = 0;
  if (*(unsigned char *)(a1 + 24) || *(unsigned char *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    uint64_t v21 = FigSignalErrorAt();
    uint64_t v17 = 0;
    goto LABEL_13;
  }
  MEMORY[0x1997056B0](*(void *)(a1 + 48));
  uint64_t v15 = *(void *)(a1 + 32);
  CMItemCount NumSamples = CMSampleBufferGetNumSamples(a2);
  CMSampleBufferGetOutputPresentationTimeStamp(&v29, a2);
  uint64_t v17 = (uint64_t *)DSRXPC_PendingFrameInfoCreate(v15, a5, a7, a8, NumSamples, (long long *)&v29.value);
  if (!v17)
  {
    MEMORY[0x1997056C0](*(void *)(a1 + 48));
    uint64_t v21 = FigSignalErrorAt();
LABEL_13:
    char v23 = 1;
    goto LABEL_39;
  }
  uint64_t v18 = *(__CFArray **)(a1 + 40);
  ++*(void *)(a1 + 32);
  CFArrayAppendValue(v18, v17);
  MEMORY[0x1997056C0](*(void *)(a1 + 48));
  unsigned int v19 = FigXPCRemoteClientCopyMemoryOrigin();
  if (v19) {
    goto LABEL_44;
  }
  if (!*(void *)(a1 + 248)) {
    goto LABEL_14;
  }
  if (!*(void *)(a1 + 256)) {
    *(void *)(a1 + 256) = FigCopyCommonMemoryPool();
  }
  uint64_t v20 = FigOSEventLinkRemoteFillMessageBufferThenSendItAndHandleReply();
  uint64_t v21 = v20;
  if (!v20)
  {
    BOOL v22 = 0;
    goto LABEL_30;
  }
  if (v20 != -19428)
  {
LABEL_14:
    unsigned int v19 = FigXPCCreateBasicMessage();
    if (!v19)
    {
      if (dsrxpc_sampleBufferAttachmentsKeysToDrop_onceToken != -1) {
        dispatch_once(&dsrxpc_sampleBufferAttachmentsKeysToDrop_onceToken, &__block_literal_global_16);
      }
      unsigned int v19 = FigXPCMessageAddCMSampleBufferForPID();
      if (!v19)
      {
        xpc_dictionary_set_uint64(v35, "FrameRefCon", v17[2]);
        xpc_dictionary_set_uint64(v35, "DecoderFlags", a3);
        if (a8) {
          xpc_dictionary_set_BOOL(v35, "RequiresMultiImageOutputHandler", 1);
        }
        unsigned int v19 = FigXPCMessageSetCFDictionary();
        if (!v19)
        {
          unsigned int v19 = FigXPCRemoteClientSendSyncMessage();
          if (!v19)
          {
            if (!*(unsigned char *)(a1 + 25))
            {
              uint64_t v24 = 1;
              do
              {
                if (*(_DWORD *)(a1 + 28)) {
                  break;
                }
                if (FigSemaphoreWaitRelative() != -12792) {
                  break;
                }
                v24 *= 2;
              }
              while (!*(unsigned char *)(a1 + 25));
            }
            uint64_t v21 = *(unsigned int *)(a1 + 64);
            *((_DWORD *)v32 + 6) = *(_DWORD *)(a1 + 68);
            BOOL v22 = v21 != 0;
            goto LABEL_30;
          }
        }
      }
    }
LABEL_44:
    unsigned int v27 = v19;
    CFTypeRef v25 = (void *)a1;
    uint64_t v26 = (uint64_t *)v17;
    goto LABEL_36;
  }
  FigOSEventLinkRemoteInvalidate();
  uint64_t v21 = 4294947868;
  BOOL v22 = 1;
LABEL_30:
  *(void *)(a1 + 64) = 0;
  if (a6) {
    *a6 = *((_DWORD *)v32 + 6);
  }
  if ((a3 & 1) != 0 && !v22)
  {
    char v23 = 0;
    goto LABEL_39;
  }
  CFTypeRef v25 = (void *)a1;
  uint64_t v26 = (uint64_t *)v17;
  unsigned int v27 = v21;
LABEL_36:
  dsrxpc_emitPendingFramesForOneSampleWithError(v25, v26, v27);
  if ((a3 & 1) == 0) {
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 120), 0xFFFFFFFFFFFFFFFFLL);
  }
  char v23 = 0;
  uint64_t v21 = 0;
LABEL_39:
  if (v30) {
    CFRelease(v30);
  }
  FigXPCRelease();
  if ((v23 & 1) == 0) {
    CFRelease(v17);
  }
  _Block_object_dispose(&v31, 8);
  return v21;
}

uint64_t VTDecompressionSessionRemoteXPC_DecodeFrameWithOutputHandler(uint64_t a1, opaqueCMSampleBuffer *a2, unsigned int a3, uint64_t a4, _DWORD *a5, unint64_t a6, unint64_t a7)
{
  if (a6 | a7) {
    return dsrxpc_DecodeFrameCommon(a1, a2, a3, a4, 0, a5, (const void *)a6, (const void *)a7);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t VTDecompressionSessionRemoteXPC_DecodeTile(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unsigned int a7, uint64_t a8, _DWORD *a9)
{
  CFTypeRef cf = 0;
  xpc_object_t xdict = 0;
  if (*(unsigned char *)(a1 + 24) || *(unsigned char *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    uint64_t v20 = FigSignalErrorAt();
    uint64_t v18 = 0;
    goto LABEL_8;
  }
  MEMORY[0x1997056B0](*(void *)(a1 + 48));
  uint64_t v17 = *(void *)(a1 + 32);
  CMSampleBufferGetOutputPresentationTimeStamp(&v31, a2);
  uint64_t v18 = (uint64_t *)DSRXPC_PendingFrameInfoCreate(v17, a8, 0, 0, 1, (long long *)&v31.value);
  if (!v18)
  {
    MEMORY[0x1997056C0](*(void *)(a1 + 48));
    uint64_t v20 = FigSignalErrorAt();
LABEL_8:
    char v21 = 1;
    goto LABEL_28;
  }
  ++*(void *)(a1 + 32);
  if (a5) {
    CFTypeRef v19 = CFRetain(a5);
  }
  else {
    CFTypeRef v19 = 0;
  }
  v18[11] = (uint64_t)v19;
  v18[12] = a3;
  v18[13] = a4;
  v18[14] = a6;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v18);
  MEMORY[0x1997056C0](*(void *)(a1 + 48));
  unsigned int v22 = FigXPCCreateBasicMessage();
  if (v22)
  {
    unsigned int v28 = v22;
    char v24 = a7;
    goto LABEL_25;
  }
  unsigned int v23 = FigXPCRemoteClientCopyMemoryOrigin();
  char v24 = a7;
  if (!v23)
  {
    unsigned int v23 = VTAddCMSampleBufferToXPCMessage((uint64_t)a2, (uint64_t)cf, a1 + 168, a1 + 240, (uint64_t)xdict);
    if (!v23)
    {
      if (FigCFEqual()) {
        goto LABEL_19;
      }
      IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface((CVPixelBufferRef)a5);
      if (IOSurface)
      {
        xpc_object_t XPCObject = IOSurfaceCreateXPCObject(IOSurface);
        xpc_dictionary_set_value(xdict, "CanvasioSurface", XPCObject);
        FigXPCRelease();
        unsigned int v27 = *(const void **)(a1 + 208);
        *(void *)(a1 + 208) = a5;
        if (a5) {
          CFRetain(a5);
        }
        if (v27) {
          CFRelease(v27);
        }
LABEL_19:
        xpc_dictionary_set_uint64(xdict, "FrameRefCon", v18[2]);
        xpc_dictionary_set_uint64(xdict, "DecoderFlags", a7);
        xpc_dictionary_set_uint64(xdict, "TileCropOffsetXY", (a3 << 32) | (a3 >> 32));
        xpc_dictionary_set_uint64(xdict, "TileCropDimensionWH", (a4 << 32) | (a4 >> 32));
        xpc_dictionary_set_uint64(xdict, "OffsetInImageBufferXY", (a6 << 32) | (a6 >> 32));
        unsigned int v23 = FigXPCRemoteClientSendSyncMessage();
        if (!v23)
        {
          if (!*(unsigned char *)(a1 + 25))
          {
            uint64_t v30 = 1;
            do
            {
              if (*(_DWORD *)(a1 + 28)) {
                break;
              }
              if (FigSemaphoreWaitRelative() != -12792) {
                break;
              }
              v30 *= 2;
            }
            while (!*(unsigned char *)(a1 + 25));
          }
          unsigned int v28 = *(_DWORD *)(a1 + 64);
          if (a9) {
            *a9 = *(_DWORD *)(a1 + 68);
          }
          *(void *)(a1 + 64) = 0;
          if ((a7 & 1) != 0 && !v28) {
            goto LABEL_27;
          }
          goto LABEL_25;
        }
        goto LABEL_41;
      }
      unsigned int v23 = FigSignalErrorAt();
    }
  }
LABEL_41:
  unsigned int v28 = v23;
LABEL_25:
  dsrxpc_emitPendingFramesForOneSampleWithError((void *)a1, (uint64_t *)v18, v28);
  if ((v24 & 1) == 0) {
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 120), 0xFFFFFFFFFFFFFFFFLL);
  }
LABEL_27:
  char v21 = 0;
  uint64_t v20 = 0;
LABEL_28:
  if (cf) {
    CFRelease(cf);
  }
  FigXPCRelease();
  if ((v21 & 1) == 0) {
    CFRelease(v18);
  }
  return v20;
}

uint64_t DSRXPC_PendingFrameInfoCreate(uint64_t a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5, long long *a6)
{
  if (DSRXPC_PendingFrameInfoGetTypeID_once != -1) {
    dispatch_once(&DSRXPC_PendingFrameInfoGetTypeID_once, &__block_literal_global_20);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  *(void *)(Instance + 16) = a1;
  *(void *)(Instance + 24) = a2;
  *(void *)(Instance + 48) = _Block_copy(a3);
  *(void *)(Instance + 56) = _Block_copy(a4);
  *(void *)(Instance + 32) = a5;
  *(void *)(Instance + 40) = a5;
  long long v13 = *a6;
  *(void *)(Instance + 80) = *((void *)a6 + 2);
  *(_OWORD *)(Instance + 64) = v13;
  return Instance;
}

uint64_t dsrxpc_emitPendingFramesForOneSampleWithError(void *a1, uint64_t *a2, unsigned int a3)
{
  if (a3) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = 4294954385;
  }
  uint64_t result = dsrxpc_tryDecrementPendingFrameInfoOutstandingEmitCountToEmit((uint64_t)a1, a2[2]);
  if (result)
  {
    unsigned int v7 = (long long *)MEMORY[0x1E4F1F9F8];
    do
    {
      uint64_t v8 = (void (*)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a1[29];
      if (v8)
      {
        v8(a1[28], a2[3], a2[12], a2[13], a2[11], a2[14], v5, 2);
      }
      else
      {
        uint64_t v9 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, long long *, long long *))a1[24];
        if (v9)
        {
          uint64_t v10 = a1[25];
        }
        else
        {
          uint64_t v12 = a2[7];
          if (v12)
          {
            long long v13 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void, long long *, long long *))(v12 + 16);
            long long v18 = *v7;
            uint64_t v19 = *((void *)v7 + 2);
            long long v16 = v18;
            uint64_t v17 = v19;
            v13(v12, v5, 2, 0, 0, &v18, &v16);
            goto LABEL_13;
          }
          uint64_t v9 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, long long *, long long *))a1[22];
          if (!v9)
          {
            uint64_t v14 = a2[6];
            if (v14)
            {
              uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, void, long long *, long long *))(v14 + 16);
              long long v18 = *v7;
              uint64_t v19 = *((void *)v7 + 2);
              long long v16 = v18;
              uint64_t v17 = v19;
              v15(v14, v5, 2, 0, &v18, &v16);
            }
            goto LABEL_13;
          }
          uint64_t v10 = a1[23];
        }
        uint64_t v11 = a2[3];
        long long v18 = *v7;
        uint64_t v19 = *((void *)v7 + 2);
        long long v16 = v18;
        uint64_t v17 = v19;
        v9(v10, v11, v5, 2, 0, &v18, &v16);
      }
LABEL_13:
      dsrxpc_decrementPendingFrameInfoOutstandingSampleCount((uint64_t)a1, a2[2]);
      uint64_t result = dsrxpc_tryDecrementPendingFrameInfoOutstandingEmitCountToEmit((uint64_t)a1, a2[2]);
    }
    while (result);
  }
  return result;
}

uint64_t VTDecompressionSessionRemoteXPC_CopySupportedPropertyDictionary(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) || *(unsigned char *)(a1 + 25) || *(_DWORD *)(a1 + 28)) {
    return FigSignalErrorAt();
  }
  else {
    return dsrxpc_copyDictionary();
  }
}

uint64_t dsrxpc_copyDictionary()
{
  uint64_t v0 = FigXPCCreateBasicMessage();
  if (!v0)
  {
    uint64_t v0 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v0) {
      uint64_t v0 = FigXPCMessageCopyCFDictionary();
    }
  }
  uint64_t v1 = v0;
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

uint64_t VTDecompressionSessionRemoteXPC_CopySerializableProperties(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(a1 + 24) || *(unsigned char *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v4 = dsrxpc_copyDictionary();
    if (!v4) {
      *a3 = 0;
    }
    return v4;
  }
}

uint64_t VTDecompressionSessionRemoteXPC_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  if (!a4) {
    return 0;
  }
  if (!a1 || *(unsigned char *)(a1 + 24) || *(unsigned char *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    return FigSignalErrorAt();
  }
  else
  {
    if (CFEqual(a2, @"PixelBufferPool"))
    {
      CFDictionaryRef pixelBufferAttributes = 0;
      CFTypeRef cf = 0;
      MEMORY[0x1997056B0](*(void *)(a1 + 136));
      uint64_t v8 = VTDecompressionSessionRemoteXPC_CopyProperty(a1, @"PoolPixelBufferAttributesSeed", a3, &cf);
      if (!v8)
      {
        if (FigCFEqual())
        {
LABEL_19:
          if (pixelBufferAttributes && !*(void *)(a1 + 152))
          {
            CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            CFDictionaryRef v14 = Mutable;
            if (pixelBufferAttributes)
            {
              CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D98], @"dsrxpc_cloned_pool");
              uint64_t v21 = CVPixelBufferPoolCreate(a3, v14, pixelBufferAttributes, (CVPixelBufferPoolRef *)(a1 + 152));
            }
            else
            {
              uint64_t v21 = FigSignalErrorAt();
            }
            uint64_t v13 = v21;
            goto LABEL_33;
          }
          uint64_t v13 = 0;
LABEL_22:
          CFDictionaryRef v14 = 0;
LABEL_33:
          MEMORY[0x1997056C0](*(void *)(a1 + 136));
          if (cf) {
            CFRelease(cf);
          }
          if (pixelBufferAttributes) {
            CFRelease(pixelBufferAttributes);
          }
          if (v14) {
            CFRelease(v14);
          }
          if (v13) {
            return v13;
          }
          unsigned int v22 = *(const void **)(a1 + 152);
          if (v22) {
            unsigned int v22 = CFRetain(v22);
          }
          goto LABEL_45;
        }
        uint64_t v9 = *(const void **)(a1 + 144);
        if (v9)
        {
          CFRelease(v9);
          *(void *)(a1 + 144) = 0;
        }
        uint64_t v8 = VTDecompressionSessionRemoteXPC_CopyProperty(a1, @"PoolPixelBufferAttributes", a3, &pixelBufferAttributes);
        if (!v8)
        {
          if (pixelBufferAttributes)
          {
            uint64_t v10 = *(const void **)(a1 + 152);
            if (v10)
            {
              CFRelease(v10);
              *(void *)(a1 + 152) = 0;
            }
          }
          uint64_t v11 = *(const void **)(a1 + 144);
          CFTypeRef v12 = cf;
          *(void *)(a1 + 144) = cf;
          if (v12) {
            CFRetain(v12);
          }
          if (v11) {
            CFRelease(v11);
          }
          goto LABEL_19;
        }
      }
      uint64_t v13 = v8;
      goto LABEL_22;
    }
    if (CFEqual(a2, @"NumberOfFramesBeingDecoded"))
    {
      if (*(void *)(a1 + 40))
      {
        MEMORY[0x1997056B0](*(void *)(a1 + 48));
        CFArrayRef v15 = *(const __CFArray **)(a1 + 40);
        if (v15 && (CFIndex Count = CFArrayGetCount(v15), Count >= 1))
        {
          CFIndex v17 = Count;
          CFIndex v18 = 0;
          int v19 = 0;
          do
            v19 += *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v18++) + 4);
          while (v17 != v18);
        }
        else
        {
          int v19 = 0;
        }
        MEMORY[0x1997056C0](*(void *)(a1 + 48));
      }
      else
      {
        int v19 = 0;
      }
      LODWORD(cf) = v19;
      unsigned int v22 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &cf);
LABEL_45:
      uint64_t v13 = 0;
      *a4 = v22;
      return v13;
    }
    uint64_t v24 = gVTDecompressionSessionXPCRemote;
    uint64_t v25 = *(void *)(a1 + 16);
    return MEMORY[0x1F40DEC10](v24, v25, a2, a4);
  }
}

uint64_t VTDecompressionSessionRemoteXPC_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && !*(unsigned char *)(a1 + 24) && !*(unsigned char *)(a1 + 25) && !*(_DWORD *)(a1 + 28))
  {
    if (FigCFEqual())
    {
      unsigned int v7 = (void *)(a1 + 208);
      int v6 = *(const void **)(a1 + 208);
      if (!v6)
      {
LABEL_8:
        uint64_t v8 = gVTDecompressionSessionXPCRemote;
        uint64_t v9 = *(void *)(a1 + 16);
        return MEMORY[0x1F40DEC18](v8, v9, a2, a3);
      }
LABEL_7:
      CFRelease(v6);
      *unsigned int v7 = 0;
      goto LABEL_8;
    }
    if (FigCFEqual())
    {
      if (a3)
      {
        FigCFNumberGetSInt32();
        if (*(void *)(a1 + 248))
        {
          uint64_t result = FigOSEventLinkRemoteSetMessageHandlingThreadMachThreadPriority();
          if (result) {
            return result;
          }
          goto LABEL_8;
        }
        uint64_t v10 = a1;
LABEL_25:
        uint64_t result = dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread(v10);
        if (result) {
          return result;
        }
        goto LABEL_8;
      }
    }
    else
    {
      if (!FigCFEqual()) {
        goto LABEL_8;
      }
      if (a3)
      {
        FigCFNumberGetUInt32();
        if (*(void *)(a1 + 248))
        {
          uint64_t result = FigOSEventLinkRemoteSetMessageHandlingThreadFigThreadPriority();
          if (result) {
            return result;
          }
          goto LABEL_8;
        }
        uint64_t v10 = a1;
        goto LABEL_25;
      }
    }
    unsigned int v7 = (void *)(a1 + 248);
    int v6 = *(const void **)(a1 + 248);
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  return FigSignalErrorAt();
}

uint64_t dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread(uint64_t a1)
{
  if (*(void *)(a1 + 248)) {
    return FigSignalErrorAt();
  }
  if (dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread_onceToken != -1) {
    dispatch_once(&dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread_onceToken, &__block_literal_global_29);
  }
  if (!dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread_prefersEventLink) {
    return 0;
  }
  uint64_t v2 = FigXPCRemoteClientCopyPrimaryConnection();
  if (v2) {
    return v2;
  }
  uint64_t AssociatedEventLink = FigXPCConnectionCreateAssociatedEventLink();
  if (!AssociatedEventLink) {
    *(void *)(a1 + 248) = 0;
  }
  return AssociatedEventLink;
}

uint64_t VTDecompressionSessionRemoteXPC_SetProperties(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) || *(unsigned char *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v1 = FigXPCCreateBasicMessage();
    if (v1 || (uint64_t v1 = FigXPCMessageSetCFDictionary(), v1)) {
      uint64_t v2 = v1;
    }
    else {
      uint64_t v2 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return v2;
}

uint64_t VTDecompressionSessionRemoteXPC_FinishDelayedFrames(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) || *(unsigned char *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = FigSignalErrorAt();
LABEL_15:
    uint64_t v3 = v2;
    goto LABEL_8;
  }
  uint64_t v2 = FigXPCCreateBasicMessage();
  if (v2) {
    goto LABEL_15;
  }
  uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
  if (v2) {
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 25))
  {
    uint64_t v5 = 1;
    do
    {
      if (*(_DWORD *)(a1 + 28)) {
        break;
      }
      if (FigSemaphoreWaitRelative() != -12792) {
        break;
      }
      v5 *= 2;
    }
    while (!*(unsigned char *)(a1 + 25));
  }
  uint64_t v3 = *(unsigned int *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = 0;
LABEL_8:
  FigXPCRelease();
  return v3;
}

BOOL VTDecompressionSessionRemoteXPC_CanAcceptFormatDescription(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) || *(unsigned char *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    FigSignalErrorAt();
LABEL_10:
    BOOL v1 = 0;
    goto LABEL_8;
  }
  if (FigXPCCreateBasicMessage()
    || FigXPCMessageSetFormatDescription()
    || FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    goto LABEL_10;
  }
  BOOL v1 = xpc_dictionary_get_BOOL(0, "CanacceptFormat");
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

uint64_t VTDecompressionSessionRemoteXPC_WaitForAsynchronousFrames(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28)) {
    return FigSignalErrorAt();
  }
  else {
    return dsrxpc_waitForAsynchronousFrames(a1);
  }
}

uint64_t dsrxpc_waitForAsynchronousFrames(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) || *(unsigned char *)(a1 + 25))
  {
    uint64_t v2 = FigSignalErrorAt();
LABEL_14:
    uint64_t v3 = v2;
    goto LABEL_7;
  }
  uint64_t v2 = FigXPCCreateBasicMessage();
  if (v2) {
    goto LABEL_14;
  }
  uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
  if (v2) {
    goto LABEL_14;
  }
  if (!*(unsigned char *)(a1 + 25))
  {
    uint64_t v5 = 1;
    do
    {
      if (*(_DWORD *)(a1 + 28)) {
        break;
      }
      if (FigSemaphoreWaitRelative() != -12792) {
        break;
      }
      v5 *= 2;
    }
    while (!*(unsigned char *)(a1 + 25));
  }
  uint64_t v3 = *(unsigned int *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = 0;
LABEL_7:
  FigXPCRelease();
  return v3;
}

uint64_t VTDecompressionSessionRemoteXPC_CopyBlackPixelBuffer(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  CFTypeRef v7 = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a1 + 24) || *(unsigned char *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    uint64_t v3 = FigSignalErrorAt();
LABEL_16:
    uint64_t v5 = v3;
    goto LABEL_10;
  }
  uint64_t v3 = FigXPCCreateBasicMessage();
  if (v3) {
    goto LABEL_16;
  }
  uint64_t v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v3) {
    goto LABEL_16;
  }
  uint64_t v3 = dsrxpc_copyPixelBufferRecipient(&v7);
  if (v3) {
    goto LABEL_16;
  }
  uint64_t v4 = FigPixelBufferRecipientCopyPixelBufferFromXPCMessage();
  uint64_t v5 = v4;
  if (a2 && !v4)
  {
    *a2 = cf;
    CFTypeRef cf = 0;
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v5;
}

uint64_t VTDecompressionSessionRemoteXPC_GetMinOutputPresentationTimeStampOfFramesBeingDecoded@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v3 + 16);
  if (*(unsigned char *)(a1 + 24) || *(unsigned char *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    FigSignalErrorAt();
  }
  else if (!FigXPCCreateBasicMessage() && !FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    FigXPCMessageGetCMTime();
  }
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t VTDecompressionSessionRemoteXPC_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, CMTime *a2, CMTime *a3)
{
  if (*(_DWORD *)(a1 + 28))
  {
    return FigSignalErrorAt();
  }
  else
  {
    CMTime v15 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
    CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
    if (*(void *)(a1 + 40))
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 48));
      CFArrayRef v6 = *(const __CFArray **)(a1 + 40);
      if (v6)
      {
        CFIndex Count = CFArrayGetCount(v6);
        if (Count >= 1)
        {
          CFIndex v8 = Count;
          for (CFIndex i = 0; i != v8; ++i)
          {
            ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), i);
            CMTime time1 = v15;
            CMTime v12 = *(CMTime *)(ValueAtIndex + 64);
            CMTimeMinimum(&v15, &time1, &v12);
            CMTime time1 = v14;
            CMTime v12 = *(CMTime *)(ValueAtIndex + 64);
            CMTimeMaximum(&v14, &time1, &v12);
          }
        }
      }
      MEMORY[0x1997056C0](*(void *)(a1 + 48));
    }
    if (a2) {
      *a2 = v15;
    }
    if (a3) {
      *a3 = v14;
    }
    return 0;
  }
}

uint64_t VTDecompressionSessionRemoteXPC_Invalidate(uint64_t a1)
{
  if (FigAtomicCompareAndSwap32())
  {
    dsrxpc_waitForAsynchronousFrames(a1);
    if (!*(unsigned char *)(a1 + 24) && !FigXPCCreateBasicMessage()) {
      FigXPCRemoteClientSendAsyncMessage();
    }
    FigXPCRemoteClientDisassociateObject();
    if (!*(void *)(a1 + 224)) {
      FigStopMonitoringMediaServicesProcessDeath();
    }
    if (*(void *)(a1 + 56)) {
      FigSemaphoreSignal();
    }
    if (*(void *)(a1 + 72)) {
      FigSemaphoreSignal();
    }
    if (*(void *)(a1 + 88)) {
      FigSemaphoreSignal();
    }
    if (*(void *)(a1 + 104)) {
      FigSemaphoreSignal();
    }
    uint64_t v2 = *(NSObject **)(a1 + 120);
    if (v2) {
      dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
  return FigXPCRelease();
}

uint64_t VTDecompressionSessionRemoteXPC_FinishDelayedTiles(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) || *(unsigned char *)(a1 + 25) || *(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = FigSignalErrorAt();
LABEL_15:
    uint64_t v3 = v2;
    goto LABEL_8;
  }
  uint64_t v2 = FigXPCCreateBasicMessage();
  if (v2) {
    goto LABEL_15;
  }
  uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
  if (v2) {
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 25))
  {
    uint64_t v5 = 1;
    do
    {
      if (*(_DWORD *)(a1 + 28)) {
        break;
      }
      if (FigSemaphoreWaitRelative() != -12792) {
        break;
      }
      v5 *= 2;
    }
    while (!*(unsigned char *)(a1 + 25));
  }
  uint64_t v3 = *(unsigned int *)(a1 + 112);
  *(_DWORD *)(a1 + 112) = 0;
LABEL_8:
  FigXPCRelease();
  return v3;
}

uint64_t VTDecompressionSessionRemoteXPC_SetMultiImageCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && a2 && !*(void *)(a1 + 192))
  {
    *(void *)(a1 + 192) = a2;
    *(void *)(a1 + 200) = a3;
    uint64_t v3 = FigXPCCreateBasicMessage();
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  else
  {
    FigSignalErrorAt();
    uint64_t v4 = 0;
  }
  FigXPCRelease();
  return v4;
}

void __dsrxpc_oneTimeInitialization_block_invoke(uint64_t a1)
{
  gPixelBufferRecipientLock = FigSimpleMutexCreate();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode();
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t dsrxpc_xpcClient_DeadConnectionCallback(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 24))
    {
      return FigSignalErrorAt();
    }
    else
    {
      *(unsigned char *)(result + 24) = 1;
      return dsrxpc_handleServerSessionIsGone((NSObject **)result);
    }
  }
  return result;
}

uint64_t dsrxpc_xpcClient_NotificationFilter()
{
  return 0;
}

uint64_t dsrxpc_xpcClient_MessageHandler()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294954394;
  }
}

void dsrxpc_xpcClient_DeadServerConnectionCallback()
{
  MEMORY[0x1997056B0](gPixelBufferRecipientLock);
  if (gPixelBufferRecipient)
  {
    CFRelease((CFTypeRef)gPixelBufferRecipient);
    gPixelBufferRecipient = 0;
  }

  JUMPOUT(0x1997056C0);
}

uint64_t dsrxpc_xpcClient_SetUpEventLink()
{
  return FigOSEventLinkServerSetCallbacks();
}

uint64_t dsrxpc_handleServerSessionIsGone(NSObject **cf)
{
  if (!cf || *((_DWORD *)cf + 7) || *((unsigned char *)cf + 25))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *((unsigned char *)cf + 25) = 1;
    CFRetain(cf);
    uint64_t v2 = cf[15];
    uint64_t v3 = cf[16];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __dsrxpc_handleServerSessionIsGone_block_invoke;
    block[3] = &__block_descriptor_tmp_6_1;
    block[4] = cf;
    dispatch_group_async(v2, v3, block);
    if (cf[7]) {
      FigSemaphoreSignal();
    }
    if (cf[9]) {
      FigSemaphoreSignal();
    }
    if (cf[11]) {
      FigSemaphoreSignal();
    }
    if (cf[13]) {
      FigSemaphoreSignal();
    }
    return 0;
  }
}

void __dsrxpc_handleServerSessionIsGone_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    while (v2[5])
    {
      MEMORY[0x1997056B0](v2[6]);
      Firstuint64_t Value = (const void *)FigCFArrayGetFirstValue();
      if (!FirstValue)
      {
        MEMORY[0x1997056C0](v2[6]);
        break;
      }
      uint64_t v4 = (uint64_t *)CFRetain(FirstValue);
      MEMORY[0x1997056C0](v2[6]);
      if (!v4) {
        break;
      }
      dsrxpc_emitPendingFramesForOneSampleWithError(v2, v4, 0xFFFFCD91);
      CFRelease(v4);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5)
  {
    CFRelease(v5);
  }
}

CFTypeRef dsrxpc_copyPendingFrameInfoFromPendingList(uint64_t a1, uint64_t a2)
{
  if (!a1 || !*(void *)(a1 + 40)) {
    return 0;
  }
  MEMORY[0x1997056B0](*(void *)(a1 + 48));
  CFArrayRef v4 = *(const __CFArray **)(a1 + 40);
  if (v4 && (CFIndex Count = CFArrayGetCount(v4), Count >= 1))
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v7);
      if (ValueAtIndex[2] == a2) {
        break;
      }
      if (v6 == ++v7) {
        goto LABEL_8;
      }
    }
    CFTypeRef v9 = CFRetain(ValueAtIndex);
  }
  else
  {
LABEL_8:
    CFTypeRef v9 = 0;
  }
  MEMORY[0x1997056C0](*(void *)(a1 + 48));
  return v9;
}

uint64_t dsrxpc_tryDecrementPendingFrameInfoOutstandingEmitCountToEmit(uint64_t a1, uint64_t a2)
{
  if (!a1 || !*(void *)(a1 + 40)) {
    return 0;
  }
  MEMORY[0x1997056B0](*(void *)(a1 + 48));
  CFArrayRef v4 = *(const __CFArray **)(a1 + 40);
  if (!v4) {
    goto LABEL_11;
  }
  CFIndex Count = CFArrayGetCount(v4);
  if (Count < 1) {
    goto LABEL_11;
  }
  CFIndex v6 = Count;
  CFIndex v7 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v7);
    if (ValueAtIndex[2] == a2) {
      break;
    }
    if (v6 == ++v7) {
      goto LABEL_11;
    }
  }
  uint64_t v9 = ValueAtIndex[5];
  if (v9)
  {
    ValueAtIndex[5] = v9 - 1;
    uint64_t v10 = 1;
  }
  else
  {
LABEL_11:
    uint64_t v10 = 0;
  }
  MEMORY[0x1997056C0](*(void *)(a1 + 48));
  return v10;
}

void dsrxpc_handleEmitFrame(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, long long *a7)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, long long *))(a1 + 176);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 184);
    uint64_t v11 = a2[3];
    long long v21 = *a6;
    uint64_t v22 = *((void *)a6 + 2);
    long long v19 = *a7;
    uint64_t v20 = *((void *)a7 + 2);
    v9(v10, v11, a4, a5, a3, &v21, &v19);
  }
  else
  {
    uint64_t v12 = a2[6];
    if (v12)
    {
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, long long *, long long *))(v12 + 16);
      long long v21 = *a6;
      uint64_t v22 = *((void *)a6 + 2);
      long long v19 = *a7;
      uint64_t v20 = *((void *)a7 + 2);
      v13(v12, a4, a5, a3, &v21, &v19);
    }
    else
    {
      uint64_t v14 = a2[7];
      if (v14)
      {
        CMTime v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, long long *, long long *))(v14 + 16);
        long long v21 = *a6;
        uint64_t v22 = *((void *)a6 + 2);
        long long v19 = *a7;
        uint64_t v20 = *((void *)a7 + 2);
        v15(v14, a4, a5, a3, 0, &v21, &v19);
      }
    }
  }
  dsrxpc_decrementPendingFrameInfoOutstandingSampleCount(a1, a2[2]);
  uint64_t v16 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v16)
  {
    CFIndex v17 = (const void *)v16;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt64();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v17);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
}

uint64_t dsrxpc_decrementPendingFrameInfoOutstandingSampleCount(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)(result + 40))
    {
      MEMORY[0x1997056B0](*(void *)(result + 48));
      CFArrayRef v4 = *(const __CFArray **)(v2 + 40);
      if (v4)
      {
        CFIndex Count = CFArrayGetCount(v4);
        if (Count >= 1)
        {
          CFIndex v6 = Count;
          CFIndex v7 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 40), v7);
            if (ValueAtIndex[2] == a2) {
              break;
            }
            if (v6 == ++v7) {
              goto LABEL_11;
            }
          }
          uint64_t v9 = ValueAtIndex[4] - 1;
          ValueAtIndex[4] = v9;
          if (!v9) {
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 40), v7);
          }
        }
      }
LABEL_11:
      JUMPOUT(0x1997056C0);
    }
  }
  return result;
}

void __dsrxpc_callback_handleEmitTile_block_invoke(uint64_t a1)
{
  if (dsrxpc_tryDecrementPendingFrameInfoOutstandingEmitCountToEmit(*(void *)(a1 + 32), *(void *)(*(void *)(a1 + 40) + 16)))
  {
    uint64_t v2 = *(void (**)(void, void, void, void, void, void, void, void))(a1 + 48);
    if (v2)
    {
      uint64_t v3 = *(void **)(a1 + 40);
      v2(*(void *)(a1 + 56), v3[3], v3[12], v3[13], v3[11], v3[14], *(unsigned int *)(a1 + 80), *(unsigned int *)(a1 + 84));
    }
    dsrxpc_decrementPendingFrameInfoOutstandingSampleCount(*(void *)(a1 + 32), *(void *)(a1 + 64));
  }
  if (!FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  CFArrayRef v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5) {
    CFRelease(v5);
  }
}

void __dsrxpc_handleEmitMultiImage_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 96);
  uint64_t v30 = 0;
  if (!dsrxpc_tryDecrementPendingFrameInfoOutstandingEmitCountToEmit(*(void *)(a1 + 48), *(void *)(*(void *)(a1 + 56) + 16)))goto LABEL_10; {
  uint64_t v3 = *(void *)(a1 + 64);
  }
  CFArrayRef v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, long long *))(v3 + 192);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 200);
    uint64_t v6 = *(unsigned int *)(a1 + 100);
    uint64_t v7 = *(void *)(a1 + 72);
    uint64_t v8 = *(void *)(a1 + 80);
    long long v28 = *(_OWORD *)(a1 + 104);
    uint64_t v29 = *(void *)(a1 + 120);
    long long v26 = *(_OWORD *)(a1 + 128);
    uint64_t v27 = *(void *)(a1 + 144);
    uint64_t v9 = v2;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10)
    {
      uint64_t v11 = *(unsigned int *)(a1 + 100);
      uint64_t v12 = *(void *)(a1 + 80);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, long long *, long long *))(v10 + 16);
      long long v28 = *(_OWORD *)(a1 + 104);
      uint64_t v29 = *(void *)(a1 + 120);
      long long v26 = *(_OWORD *)(a1 + 128);
      uint64_t v27 = *(void *)(a1 + 144);
      v13(v10, v2, v11, 0, v12, &v28, &v26);
      goto LABEL_7;
    }
    CFArrayRef v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, long long *))(a1 + 152);
    if (!v4)
    {
      uint64_t v23 = *(void *)(a1 + 40);
      if (v23)
      {
        if (!v2)
        {
          if (*(void *)(a1 + 80)) {
            uint64_t v2 = 4294949597;
          }
          else {
            uint64_t v2 = 0;
          }
        }
        uint64_t v24 = *(unsigned int *)(a1 + 100);
        uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, void, long long *, long long *))(v23 + 16);
        long long v28 = *MEMORY[0x1E4F1F9F8];
        uint64_t v29 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        long long v26 = v28;
        uint64_t v27 = v29;
        v25(v23, v2, v24, 0, &v28, &v26);
      }
      goto LABEL_7;
    }
    if (!v2)
    {
      if (*(void *)(a1 + 80)) {
        uint64_t v2 = 4294949597;
      }
      else {
        uint64_t v2 = 0;
      }
    }
    uint64_t v5 = *(void *)(a1 + 160);
    uint64_t v7 = *(void *)(a1 + 72);
    uint64_t v6 = *(unsigned int *)(a1 + 100);
    long long v28 = *MEMORY[0x1E4F1F9F8];
    uint64_t v29 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    long long v26 = v28;
    uint64_t v27 = v29;
    uint64_t v9 = v2;
    uint64_t v8 = 0;
  }
  v4(v5, v7, v9, v6, v8, &v28, &v26);
LABEL_7:
  dsrxpc_decrementPendingFrameInfoOutstandingSampleCount(*(void *)(a1 + 48), *(void *)(*(void *)(a1 + 56) + 16));
  uint64_t v14 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v14)
  {
    CMTime v15 = (const void *)v14;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt64();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v15);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
LABEL_10:
  if (!FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendSyncMessage();
  }
  CFIndex v17 = *(const void **)(a1 + 40);
  if (v17) {
    _Block_release(v17);
  }
  CFIndex v18 = *(const void **)(a1 + 32);
  if (v18) {
    _Block_release(v18);
  }
  FigXPCRelease();
  long long v19 = *(const void **)(a1 + 80);
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(a1 + 64);
  if (v20) {
    CFRelease(v20);
  }
  long long v21 = *(const void **)(a1 + 56);
  if (v21) {
    CFRelease(v21);
  }
  uint64_t v22 = *(const void **)(a1 + 48);
  if (v22) {
    CFRelease(v22);
  }
}

uint64_t dsrxpc_eventLink_MessageHandler(int a1, int a2, CMBlockBufferRef theBuffer)
{
  lengthAtOffsetOut[0] = 0;
  dataPointerOut[0] = 0;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, lengthAtOffsetOut, 0, dataPointerOut);
  if (DataPointer) {
    return DataPointer;
  }
  CFArrayRef v4 = dataPointerOut[0];
  if (((uint64_t)dataPointerOut[0] & 7) != 0) {
    return 4294949291;
  }
  size_t v5 = lengthAtOffsetOut[0];
  if (lengthAtOffsetOut[0] <= 0x57) {
    return 4294949290;
  }
  uint64_t v6 = FigXPCRemoteClientLookupAndRetainAssociatedObject();
  if (v6) {
    return v6;
  }
  if (*((_DWORD *)v4 + 2) != 1701672038) {
    return 4294954394;
  }
  CFTypeRef v17 = 0;
  CFTypeRef v18 = 0;
  if (*((void *)v4 + 10) > v5 - 88)
  {
    uint64_t v7 = FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = dsrxpc_copyPixelBufferRecipient(&v17);
    if (!v7)
    {
      if (!*((void *)v4 + 10))
      {
        uint64_t DataPointer = 0;
        goto LABEL_15;
      }
      uint64_t v7 = FigPixelBufferRecipientCopyPixelBufferFromIPCMessageData();
    }
  }
  uint64_t DataPointer = v7;
LABEL_15:
  uint64_t v8 = (uint64_t *)dsrxpc_copyPendingFrameInfoFromPendingList(0, *((void *)v4 + 3));
  if (v8)
  {
    dispatch_group_enter(MEMORY[0x78]);
    if (dsrxpc_tryDecrementPendingFrameInfoOutstandingEmitCountToEmit(0, v8[2]))
    {
      uint64_t v9 = (uint64_t)v18;
      if (DataPointer)
      {
        if (v18)
        {
          CFRelease(v18);
          uint64_t v9 = 0;
          CFTypeRef v18 = 0;
        }
        uint64_t v10 = 4294954385;
      }
      else
      {
        uint64_t v10 = *((unsigned int *)v4 + 4);
      }
      uint64_t v11 = *((unsigned int *)v4 + 5);
      *(_OWORD *)dataPointerOut = *((_OWORD *)v4 + 2);
      uint64_t v16 = *((void *)v4 + 6);
      *(_OWORD *)lengthAtOffsetOut = *(_OWORD *)(v4 + 56);
      uint64_t v14 = *((void *)v4 + 9);
      dsrxpc_handleEmitFrame(0, v8, v9, v10, v11, (long long *)dataPointerOut, (long long *)lengthAtOffsetOut);
    }
    dispatch_group_leave(MEMORY[0x78]);
  }
  else
  {
    uint64_t DataPointer = FigSignalErrorAt();
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v17) {
    CFRelease(v17);
  }
  return DataPointer;
}

CFArrayRef __dsrxpc_sampleBufferAttachmentsKeysToDrop_block_invoke()
{
  CFAllocatorRef AllocatorForPermanentAllocations = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
  CFArrayRef result = CFArrayCreate(AllocatorForPermanentAllocations, MEMORY[0x1E4F1F2A8], 1, MEMORY[0x1E4F1D510]);
  dsrxpc_sampleBufferAttachmentsKeysToDrop_sKeys = (uint64_t)result;
  return result;
}

double dsrxpc_pfi_Init(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void dsrxpc_pfi_Finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[6];
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  CFArrayRef v4 = (const void *)a1[11];
  if (v4)
  {
    CFRelease(v4);
  }
}

CFStringRef dsrxpc_pfi_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[pendingFrameInfo %p] [perSessionUniqueFrameID = %llu]", a1, *(void *)(a1 + 16));
}

uint64_t __dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  dsrxpc_prepareForCallsOfDecodeFrameFromConsistentThread_prefersEventLink = result;
  return result;
}

uint64_t DecodeBlocks(uint64_t a1, unsigned __int8 **a2, char *a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v7 = a3;
  int v10 = *(__int16 *)(a1 + 3274);
  if (v10 < 1)
  {
    __int16 v11 = 0;
  }
  else
  {
    __int16 v11 = 0;
    uint64_t v12 = *(unsigned __int16 *)(a1 + 3274);
    uint64_t v13 = (char *)(a1 + 3400);
    do
    {
      __int16 v14 = *v13++;
      v11 += v14;
      --v12;
    }
    while (v12);
  }
  __int16 v15 = -12902;
  if (v11 > 48 || v10 > 5) {
    return v15;
  }
  unsigned __int16 v16 = 4 * v11;
  if ((v16 & 0xFFFC) != 0) {
    bzero(a3, 32 * v16);
  }
  int v17 = *((_DWORD *)a2 + 2);
  unsigned int v18 = *((_DWORD *)a2 + 3);
  long long v19 = *a2;
  if (v10 < 1)
  {
LABEL_214:
    __int16 v15 = 0;
    *a4 = 0;
    *((_DWORD *)a2 + 2) = v17;
    *((_DWORD *)a2 + 3) = v18;
    *a2 = v19;
    return v15;
  }
  uint64_t v20 = 0;
  long long v21 = &a2[7][(void)a2[3]];
  unint64_t v22 = (unint64_t)(v21 - 1);
  unint64_t v23 = (unint64_t)(v21 - 6);
  int v24 = *((_DWORD *)a2 + 5);
  unint64_t v81 = (unint64_t)(v21 - 2);
  while (*(char *)(a1 + v20 + 3400) < 1)
  {
LABEL_213:
    if (++v20 >= (__int16)v10) {
      goto LABEL_214;
    }
  }
  LOWORD(v25) = 0;
  long long v26 = (void *)(a1 + 8 * v20);
  uint64_t v27 = v26[410];
  uint64_t v28 = v26[415];
  uint64_t v83 = *(void *)(v28 + 8);
  uint64_t v80 = *(void *)(v28 + 16);
  uint64_t v29 = v26[420];
  uint64_t v30 = *(void *)(v29 + 8);
  uint64_t v31 = *(void *)(v29 + 16);
  __int16 v32 = *(_WORD *)(v27 + 128);
  int v33 = 1 << (v32 - 1);
  __int16 v34 = *(_WORD *)(v29 + 2);
  int v35 = *(__int16 *)(v29 + 4);
  __int16 v82 = 32 - *(_WORD *)v28;
  __int16 v78 = 32 - *(_WORD *)(v28 + 2);
  int v79 = *(__int16 *)(v28 + 4);
  __int16 v36 = 32 - *(_WORD *)v29;
  char v84 = 32 - v34;
  while (2)
  {
    unsigned int v37 = *(__int16 *)(a5 + 2 * v20);
    if (v18 >= 0x10)
    {
      if ((unint64_t)v19 <= v23)
      {
        int v38 = *v19;
        uint64_t v39 = v19 + 2;
        int v40 = v19[1];
        if (v24 == v38)
        {
          if (v40 == 216)
          {
            if (*v39 == 255 && v19[3] == 216) {
              return -2;
            }
            int v40 = 216;
          }
          else if (!v19[1])
          {
            uint64_t v39 = v19 + 3;
            int v40 = v19[2];
          }
        }
        if (v24 == v40)
        {
          if (*v39)
          {
            if (*v39 == 216 && v39[1] == 255 && v39[2] == 216) {
              return -2;
            }
          }
          else
          {
            ++v39;
          }
        }
        int v17 = (v17 << 16) | (v38 << 8) | v40;
        v18 -= 16;
        long long v19 = v39;
      }
      else if ((unint64_t)v19 <= v22)
      {
        int v41 = *v19;
        if ((unint64_t)(v19 + 1) <= v22)
        {
          int v42 = v19[1];
          v19 += 2;
        }
        else
        {
          int v42 = 0;
          ++v19;
        }
        if (v24 == v41)
        {
          if (v42 == 216)
          {
            if ((unint64_t)v19 >= v22 || *v19 == 255 && v19[1] == 216) {
              return -2;
            }
            int v42 = 216;
          }
          else if (!v42)
          {
            if ((unint64_t)v19 > v22) {
              return -2;
            }
            int v43 = *v19++;
            int v42 = v43;
          }
        }
        if (v42 == v24 && (unint64_t)v19 <= v22)
        {
          if (*v19)
          {
            if (*v19 == 216 && ((unint64_t)v19 >= v81 || v19[1] == 255 && v19[2] == 216)) {
              return -2;
            }
          }
          else
          {
            ++v19;
          }
        }
        int v17 = v42 | (v17 << 16) | (v41 << 8);
        v18 -= 16;
      }
      else if (v18 > 0x1F)
      {
        return -2;
      }
    }
    int v44 = *(__int16 *)(v83 + 2 * ((v17 << v18) >> v82));
    if (v44 <= -31745)
    {
      v18 += v79;
      if (v80) {
        int v44 = *(__int16 *)(v80 + 2 * ((v17 << v18) >> v78));
      }
      if (v44 < -31744) {
        return -1;
      }
    }
    if (v44 < 0)
    {
      int v45 = (v44 >> 11) & 0xF;
      v37 += (char)v44;
    }
    else
    {
      v18 += v44 >> 8;
      int v45 = v44 & 0xF;
      if ((v44 & 0xF) != 0)
      {
        unsigned int v46 = v18 - 16;
        if (v18 >= 0x10)
        {
          if ((unint64_t)v19 <= v23)
          {
            int v47 = *v19;
            long long v48 = v19 + 2;
            int v49 = v19[1];
            if (v24 == v47)
            {
              if (v49 == 216)
              {
                if (*v48 == 255 && v19[3] == 216) {
                  return -2;
                }
                int v49 = 216;
              }
              else if (!v19[1])
              {
                long long v48 = v19 + 3;
                int v49 = v19[2];
              }
            }
            if (v24 == v49)
            {
              if (*v48)
              {
                if (*v48 == 216 && v48[1] == 255 && v48[2] == 216) {
                  return -2;
                }
              }
              else
              {
                ++v48;
              }
            }
            int v17 = (v17 << 16) | (v47 << 8) | v49;
            unsigned int v18 = v46;
            long long v19 = v48;
          }
          else if ((unint64_t)v19 <= v22)
          {
            int v50 = *v19;
            if ((unint64_t)(v19 + 1) <= v22)
            {
              int v51 = v19[1];
              v19 += 2;
            }
            else
            {
              int v51 = 0;
              ++v19;
            }
            if (v24 == v50)
            {
              if (v51 == 216)
              {
                if ((unint64_t)v19 >= v22 || *v19 == 255 && v19[1] == 216) {
                  return -2;
                }
                int v51 = 216;
              }
              else if (!v51)
              {
                if ((unint64_t)v19 > v22) {
                  return -2;
                }
                int v52 = *v19++;
                int v51 = v52;
              }
            }
            if (v51 == v24 && (unint64_t)v19 <= v22)
            {
              if (*v19)
              {
                if (*v19 == 216 && ((unint64_t)v19 >= v81 || v19[1] == 255 && v19[2] == 216)) {
                  return -2;
                }
              }
              else
              {
                ++v19;
              }
            }
            int v17 = v51 | (v17 << 16) | (v50 << 8);
            unsigned int v18 = v46;
          }
          else if (v18 > 0x1F)
          {
            return -2;
          }
        }
        unsigned int v37 = ((v17 << v18) >> -(char)v45)
            + v37
            - ((((v17 << v18) >> 31) - 1) >> -(char)v45);
      }
    }
    int v53 = 0;
    unsigned int v54 = 0u;
    *(_WORD *)(a5 + 2 * v20) = v37;
    v18 += v45;
    do
    {
      unsigned int v55 = v18 - 16;
      if (v18 >= 0x10)
      {
        if ((unint64_t)v19 <= v23)
        {
          int v56 = *v19;
          float32x4x4_t v57 = v19 + 2;
          int v58 = v19[1];
          if (v24 == v56)
          {
            if (v58 == 216)
            {
              if (*v57 == 255 && v19[3] == 216) {
                return -2;
              }
              int v58 = 216;
            }
            else if (!v19[1])
            {
              float32x4x4_t v57 = v19 + 3;
              int v58 = v19[2];
            }
          }
          if (v24 == v58)
          {
            if (*v57)
            {
              if (*v57 == 216 && v57[1] == 255 && v57[2] == 216) {
                return -2;
              }
            }
            else
            {
              ++v57;
            }
          }
          int v17 = (v17 << 16) | (v56 << 8) | v58;
          unsigned int v18 = v55;
          long long v19 = v57;
        }
        else if ((unint64_t)v19 <= v22)
        {
          int v59 = *v19;
          if ((unint64_t)(v19 + 1) <= v22)
          {
            int v60 = v19[1];
            v19 += 2;
          }
          else
          {
            int v60 = 0;
            ++v19;
          }
          if (v24 == v59)
          {
            if (v60 == 216)
            {
              if ((unint64_t)v19 >= v22 || *v19 == 255 && v19[1] == 216) {
                return -2;
              }
              int v60 = 216;
            }
            else if (!v60)
            {
              if ((unint64_t)v19 > v22) {
                return -2;
              }
              int v61 = *v19++;
              int v60 = v61;
            }
          }
          if (v60 == v24 && (unint64_t)v19 <= v22)
          {
            if (*v19)
            {
              if (*v19 == 216 && ((unint64_t)v19 >= v81 || v19[1] == 255 && v19[2] == 216)) {
                return -2;
              }
            }
            else
            {
              ++v19;
            }
          }
          int v17 = v60 | (v17 << 16) | (v59 << 8);
          v18 -= 16;
        }
        else if (v18 > 0x1F)
        {
          return -2;
        }
      }
      uint64_t v62 = tables[v54];
      if (v53 <= (int)v62) {
        int v53 = tables[v54];
      }
      int v63 = (int)(v33 + v37 * *(unsigned __int16 *)(v27 + v62)) >> v32;
      int v64 = (__int16)v63 ^ v63;
      *(_WORD *)&v7[v62] = v63;
      unsigned int v37 = *(__int16 *)(v30 + 2 * ((v17 << v18) >> v36));
      unsigned int v54 = (v64 | v54) + 1;
      if ((v37 & 0x80000000) == 0) {
        goto LABEL_152;
      }
      if ((unsigned __int16)((unsigned __int16)v37 >> 10) > 0x20u)
      {
        int v66 = (v37 >> 11) & 0xF;
        int v65 = (v37 >> 8) & 7;
        unsigned int v37 = (char)v37;
        goto LABEL_205;
      }
      v18 += v35;
      if (v31) {
        unsigned int v37 = *(__int16 *)(v31 + 2 * ((v17 << v18) >> v84));
      }
      if ((v37 & 0x80000000) != 0)
      {
        if (v37 <= 0xFFFF83FF) {
          return -3;
        }
        int v66 = (v37 >> 11) & 0xF;
        int v65 = (v37 >> 8) & 7;
        unsigned int v37 = (char)v37;
      }
      else
      {
LABEL_152:
        int v65 = v37 >> 4;
        v18 += v37 >> 8;
        int v66 = v37 & 0xF;
        if ((v37 & 0xF) != 0)
        {
          unsigned int v67 = v18 - 16;
          if (v18 >= 0x10)
          {
            if ((unint64_t)v19 <= v23)
            {
              int v68 = *v19;
              float16x8_t v69 = v19 + 2;
              int v70 = v19[1];
              if (v24 == v68)
              {
                if (v70 == 216)
                {
                  if (*v69 == 255 && v19[3] == 216) {
                    return -2;
                  }
                  int v70 = 216;
                }
                else if (!v19[1])
                {
                  float16x8_t v69 = v19 + 3;
                  int v70 = v19[2];
                }
              }
              if (v24 == v70)
              {
                if (*v69)
                {
                  if (*v69 == 216 && v69[1] == 255 && v69[2] == 216) {
                    return -2;
                  }
                }
                else
                {
                  ++v69;
                }
              }
              int v17 = (v17 << 16) | (v68 << 8) | v70;
              unsigned int v18 = v67;
              long long v19 = v69;
            }
            else if ((unint64_t)v19 <= v22)
            {
              int v71 = *v19;
              if ((unint64_t)(v19 + 1) <= v22)
              {
                int v72 = v19[1];
                v19 += 2;
              }
              else
              {
                int v72 = 0;
                ++v19;
              }
              if (v24 == v71)
              {
                if (v72 == 216)
                {
                  if ((unint64_t)v19 >= v22 || *v19 == 255 && v19[1] == 216) {
                    return -2;
                  }
                  int v72 = 216;
                }
                else if (!v72)
                {
                  if ((unint64_t)v19 > v22) {
                    return -2;
                  }
                  int v73 = *v19++;
                  int v72 = v73;
                }
              }
              if (v72 == v24 && (unint64_t)v19 <= v22)
              {
                if (*v19)
                {
                  if (*v19 == 216 && ((unint64_t)v19 >= v81 || v19[1] == 255 && v19[2] == 216)) {
                    return -2;
                  }
                }
                else
                {
                  ++v19;
                }
              }
              int v17 = v72 | (v17 << 16) | (v71 << 8);
              unsigned int v18 = v67;
            }
            else if (v18 > 0x1F)
            {
              return -2;
            }
          }
          unsigned int v37 = ((v17 << v18) >> -(char)v66) - ((((v17 << v18) >> 31) - 1) >> -(char)v66);
        }
        else
        {
          unsigned int v37 = 0;
          if (!v65) {
            break;
          }
          int v66 = 0;
        }
      }
LABEL_205:
      v54 += v65;
      v18 += v66;
    }
    while (v54 < 0x3F);
    if (v54 > 0x3F) {
      return -1;
    }
    uint64_t v74 = tables[v54];
    int v75 = (int)(v33 + v37 * *(unsigned __int16 *)(v27 + v74)) >> v32;
    if (v75 == (__int16)v75)
    {
      if (v53 <= v74) {
        unsigned int v76 = v74;
      }
      else {
        unsigned int v76 = v53;
      }
      *(_WORD *)&v7[v74] = v75;
      *a4++ = (v76 >> 4) + 1;
      v7 += 128;
      int v25 = (__int16)(v25 + 1);
      if (v25 >= *(char *)(a1 + v20 + 3400))
      {
        LOWORD(v10) = *(_WORD *)(a1 + 3274);
        goto LABEL_213;
      }
      continue;
    }
    break;
  }
  return -6;
}

uint64_t IDCTRows(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t v3 = (__int16 *)(a1 + 8);
  int v4 = a3;
  do
  {
    int v5 = *(v3 - 3);
    int v6 = v3[3];
    int v7 = v3[1];
    int v8 = *(v3 - 1);
    int v9 = *(v3 - 2);
    int v10 = v3[2];
    int v11 = *(v3 - 4);
    int v12 = *v3;
    int v13 = ((6518 * v5 + 0x4000) >> 15) - v6;
    int v14 = v5 + ((6518 * v6 + 0x4000) >> 15);
    int v15 = v8 + ((21895 * v7 + 0x4000) >> 15);
    int v16 = v7 + ((-21895 * v8 + 0x4000) >> 15);
    int v17 = ((13573 * v9 + 0x4000) >> 15) - v10;
    int v18 = v9 + ((13573 * v10 + 0x4000) >> 15);
    int v19 = v12 + v11;
    int v20 = v11 - v12;
    int v21 = v16 + v13;
    int v22 = v13 - v16;
    int v23 = v15 + v14;
    int v24 = v14 - v15;
    int v25 = v18 + v19;
    int v26 = v19 - v18;
    int v27 = v20 + v17;
    int v28 = v20 - v17;
    int v29 = 23170 * (v22 + v24) + 0x4000;
    *a2 = v25 + v23;
    a2[8] = v27 + (v29 >> 15);
    int v30 = 23170 * (v24 - v22) + 0x4000;
    uint64_t result = (v28 + (v30 >> 15));
    a2[16] = result;
    a2[24] = v26 + v21;
    a2[32] = v26 - v21;
    a2[40] = v28 - (v30 >> 15);
    a2[48] = v27 - (v29 >> 15);
    a2[56] = v25 - v23;
    ++a2;
    v3 += 8;
    --v4;
  }
  while (v4);
  if ((unsigned __int16)a3 != 8)
  {
    int v32 = 8 - a3;
    do
    {
      --v32;
      *a2 = 0;
      a2[8] = 0;
      a2[16] = 0;
      a2[24] = 0;
      a2[32] = 0;
      a2[40] = 0;
      a2[48] = 0;
      a2[56] = 0;
      ++a2;
    }
    while ((_WORD)v32);
  }
  return result;
}

uint64_t IDCTCols(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (__int32 *)(result + 128);
  uint64_t v3 = 96;
  int32x4_t v4 = vdupq_n_s32(0x1976u);
  int32x4_t v5 = vdupq_n_s32(0x5587u);
  int32x4_t v6 = vdupq_n_s32(0xFFFFAA79);
  int32x4_t v7 = vdupq_n_s32(0x3505u);
  int32x4_t v8 = vdupq_n_s32(0x5A82u);
  do
  {
    v10.i32[0] = *v2;
    v9.i32[0] = v2[1];
    v9.i32[1] = v2[9];
    v11.i32[0] = v2[6];
    v12.i32[0] = v2[7];
    v12.i32[1] = v2[15];
    v13.i64[0] = 0x400000004000;
    v13.i64[1] = 0x400000004000;
    v14.i64[0] = 0x400000004000;
    v14.i64[1] = 0x400000004000;
    v15.i64[0] = 0x400000004000;
    v15.i64[1] = 0x400000004000;
    v9.i32[2] = v2[17];
    v16.i64[0] = 0x400000004000;
    v16.i64[1] = 0x400000004000;
    v17.i64[0] = 0x400000004000;
    v17.i64[1] = 0x400000004000;
    v18.i64[0] = 0x400000004000;
    v18.i64[1] = 0x400000004000;
    v12.i32[2] = v2[23];
    v19.i32[0] = *(v2 - 31);
    v19.i32[1] = *(v2 - 23);
    v20.i32[0] = *(v2 - 25);
    v20.i32[1] = *(v2 - 17);
    v21.i32[0] = *(v2 - 27);
    v21.i32[1] = *(v2 - 19);
    v22.i64[0] = 0x400000004000;
    v22.i64[1] = 0x400000004000;
    v24.i32[0] = v2[4];
    v23.i32[0] = v2[5];
    v9.i32[3] = v2[25];
    v23.i32[1] = v2[13];
    v12.i32[3] = v2[31];
    v23.i32[2] = v2[21];
    v23.i32[3] = v2[29];
    v19.i32[2] = *(v2 - 15);
    v25.i32[0] = *(v2 - 29);
    v25.i32[1] = *(v2 - 21);
    v20.i32[2] = *(v2 - 9);
    v26.i32[0] = v2[2];
    v27.i32[0] = v2[3];
    v21.i32[2] = *(v2 - 11);
    v27.i32[1] = v2[11];
    v25.i32[2] = *(v2 - 13);
    v27.i32[2] = v2[19];
    v19.i32[3] = *(v2 - 7);
    v27.i32[3] = v2[27];
    v20.i32[3] = *(v2 - 1);
    v26.i32[1] = v2[10];
    v21.i32[3] = *(v2 - 3);
    v26.i32[2] = v2[18];
    v25.i32[3] = *(v2 - 5);
    v28.i32[0] = *(v2 - 30);
    v28.i32[1] = *(v2 - 22);
    v26.i32[3] = v2[26];
    v28.i32[2] = *(v2 - 14);
    v28.i32[3] = *(v2 - 6);
    v29.i32[0] = *(v2 - 26);
    v29.i32[1] = *(v2 - 18);
    int32x4_t v30 = vmlaq_s32(v13, v9, v4);
    v29.i32[2] = *(v2 - 10);
    v29.i32[3] = *(v2 - 2);
    v31.i64[0] = 0x400000004000;
    v31.i64[1] = 0x400000004000;
    v11.i32[1] = v2[14];
    v11.i32[2] = v2[22];
    v11.i32[3] = v2[30];
    int32x4_t v32 = vmlaq_s32(v14, v19, v4);
    v33.i32[0] = *(v2 - 32);
    v33.i32[1] = *(v2 - 24);
    v33.i32[2] = *(v2 - 16);
    v33.i32[3] = *(v2 - 8);
    int32x4_t v34 = vmlaq_s32(v31, v27, v6);
    v10.i32[1] = v2[8];
    int32x4_t v35 = vsraq_n_s32(v9, vmlaq_s32(v16, v12, v4), 0xFuLL);
    v10.i32[2] = v2[16];
    v10.i32[3] = v2[24];
    int32x4_t v36 = vsraq_n_s32(v27, vmlaq_s32(v18, v23, v5), 0xFuLL);
    v16.i32[0] = *(v2 - 28);
    v16.i32[1] = *(v2 - 20);
    v16.i32[2] = *(v2 - 12);
    v16.i32[3] = *(v2 - 4);
    int32x4_t v37 = vsubq_s32(vshrq_n_s32(v30, 0xFuLL), v12);
    int32x4_t v38 = vmlaq_s32(v22, v25, v6);
    v24.i32[1] = v2[12];
    int32x4_t v39 = vsraq_n_s32(v19, vmlaq_s32(v15, v20, v4), 0xFuLL);
    v24.i32[2] = v2[20];
    v24.i32[3] = v2[28];
    int32x4_t v40 = vsraq_n_s32(v25, vmlaq_s32(v17, v21, v5), 0xFuLL);
    int32x4_t v41 = vsraq_n_s32(v23, v34, 0xFuLL);
    int32x4_t v42 = vsraq_n_s32(v21, v38, 0xFuLL);
    v30.i64[0] = 0x400000004000;
    v30.i64[1] = 0x400000004000;
    int32x4_t v43 = vsubq_s32(vshrq_n_s32(v32, 0xFuLL), v20);
    v15.i64[0] = 0x400000004000;
    v15.i64[1] = 0x400000004000;
    int32x4_t v44 = vsubq_s32(vshrq_n_s32(vmlaq_s32(v30, v26, v7), 0xFuLL), v11);
    v17.i64[0] = 0x400000004000;
    v17.i64[1] = 0x400000004000;
    int32x4_t v45 = vshrq_n_s32(vmlaq_s32(v15, v28, v7), 0xFuLL);
    int32x4_t v46 = vmlaq_s32(v17, v11, v7);
    v11.i64[0] = 0x400000004000;
    v11.i64[1] = 0x400000004000;
    int32x4_t v47 = vsraq_n_s32(v26, v46, 0xFuLL);
    int32x4_t v48 = vsraq_n_s32(v28, vmlaq_s32(v11, v29, v7), 0xFuLL);
    int32x4_t v49 = vsubq_s32(v45, v29);
    int32x4_t v50 = vaddq_s32(v24, v10);
    int32x4_t v51 = vaddq_s32(v16, v33);
    int32x4_t v52 = vsubq_s32(v10, v24);
    int32x4_t v53 = vsubq_s32(v33, v16);
    int32x4_t v54 = vaddq_s32(v41, v37);
    int32x4_t v55 = vsubq_s32(v43, v42);
    int32x4_t v56 = vsubq_s32(v37, v41);
    int32x4_t v57 = vaddq_s32(v40, v39);
    int32x4_t v58 = vaddq_s32(v36, v35);
    int32x4_t v59 = vsubq_s32(v39, v40);
    int32x4_t v60 = vsubq_s32(v35, v36);
    int32x4_t v61 = vaddq_s32(v42, v43);
    int32x4_t v62 = vaddq_s32(v48, v51);
    int32x4_t v63 = vaddq_s32(v47, v50);
    int32x4_t v64 = vsubq_s32(v51, v48);
    int32x4_t v65 = vsubq_s32(v50, v47);
    int32x4_t v66 = vaddq_s32(v52, v44);
    int32x4_t v67 = vaddq_s32(v53, v49);
    int v68 = (int16x8_t *)(a2 + v3);
    int32x4_t v69 = vsubq_s32(v53, v49);
    int32x4_t v70 = vsubq_s32(v52, v44);
    int32x4_t v71 = vaddq_s32(v56, v60);
    int32x4_t v72 = vsubq_s32(v60, v56);
    int16x8_t v73 = (int16x8_t)vaddq_s32(v63, v58);
    int16x8_t v74 = (int16x8_t)vsubq_s32(v63, v58);
    int16x8_t v75 = (int16x8_t)vaddq_s32(v65, v54);
    int16x8_t v76 = (int16x8_t)vaddq_s32(v64, v61);
    int16x8_t v77 = (int16x8_t)vsubq_s32(v65, v54);
    int16x8_t v78 = (int16x8_t)vsubq_s32(v64, v61);
    v64.i64[0] = 0x400000004000;
    v64.i64[1] = 0x400000004000;
    int32x4_t v79 = vmlaq_s32(v64, v71, v8);
    v71.i64[0] = 0x400000004000;
    v71.i64[1] = 0x400000004000;
    int32x4_t v80 = vmlaq_s32(v71, vaddq_s32(v55, v59), v8);
    int16x8_t v81 = (int16x8_t)vsubq_s32(v66, vshrq_n_s32(v79, 0xFuLL));
    int16x8_t v82 = (int16x8_t)vsraq_n_s32(v66, v79, 0xFuLL);
    v79.i64[0] = 0x400000004000;
    v79.i64[1] = 0x400000004000;
    int32x4_t v83 = vmlaq_s32(v79, v72, v8);
    v54.i64[0] = 0x400000004000;
    v54.i64[1] = 0x400000004000;
    int32x4_t v84 = vmlaq_s32(v54, vsubq_s32(v59, v55), v8);
    v68[-6] = vuzp1q_s16((int16x8_t)vaddq_s32(v62, v57), v73);
    *int v68 = vuzp1q_s16(v76, v75);
    v68[2] = vuzp1q_s16(v78, v77);
    v68[-4] = vuzp1q_s16((int16x8_t)vsraq_n_s32(v67, v80, 0xFuLL), v82);
    v68[4] = vuzp1q_s16((int16x8_t)vsubq_s32(v69, vshrq_n_s32(v84, 0xFuLL)), (int16x8_t)vsubq_s32(v70, vshrq_n_s32(v83, 0xFuLL)));
    v68[6] = vuzp1q_s16((int16x8_t)vsubq_s32(v67, vshrq_n_s32(v80, 0xFuLL)), v81);
    v68[-2] = vuzp1q_s16((int16x8_t)vsraq_n_s32(v69, v84, 0xFuLL), (int16x8_t)vsraq_n_s32(v70, v83, 0xFuLL));
    v68[8] = vuzp1q_s16((int16x8_t)vsubq_s32(v62, v57), v74);
    v3 += 16;
    v2 += 64;
  }
  while (v3 != 128);
  return result;
}

int16x8_t IDCTFlexCols(__int32 *a1, int16x8_t *a2)
{
  v3.i32[0] = a1[32];
  v2.i32[0] = a1[33];
  v2.i32[1] = a1[41];
  v2.i32[2] = a1[49];
  v2.i32[3] = a1[57];
  v5.i32[0] = *a1;
  v4.i32[0] = a1[1];
  v4.i32[1] = a1[9];
  v4.i32[2] = a1[17];
  v4.i32[3] = a1[25];
  v6.i32[0] = a1[6];
  v7.i32[0] = a1[7];
  v7.i32[1] = a1[15];
  v7.i32[2] = a1[23];
  v7.i32[3] = a1[31];
  v8.i32[0] = a1[38];
  v9.i32[0] = a1[39];
  v9.i32[1] = a1[47];
  v9.i32[2] = a1[55];
  v9.i32[3] = a1[63];
  v11.i32[0] = a1[4];
  v10.i32[0] = a1[5];
  v10.i32[1] = a1[13];
  v10.i32[2] = a1[21];
  v10.i32[3] = a1[29];
  v13.i32[0] = a1[36];
  v12.i32[0] = a1[37];
  v12.i32[1] = a1[45];
  v12.i32[2] = a1[53];
  v12.i32[3] = a1[61];
  v14.i32[0] = a1[2];
  v15.i32[0] = a1[3];
  v15.i32[1] = a1[11];
  v15.i32[2] = a1[19];
  v15.i32[3] = a1[27];
  int32x4_t v16 = vdupq_n_s32(0x1976u);
  v17.i64[0] = 0x400000004000;
  v17.i64[1] = 0x400000004000;
  v18.i64[0] = 0x400000004000;
  v18.i64[1] = 0x400000004000;
  v19.i64[0] = 0x400000004000;
  v19.i64[1] = 0x400000004000;
  int32x4_t v20 = vsubq_s32(vshrq_n_s32(vmlaq_s32(v18, v2, v16), 0xFuLL), v9);
  int32x4_t v21 = vsubq_s32(vshrq_n_s32(vmlaq_s32(v19, v4, v16), 0xFuLL), v7);
  v22.i64[0] = 0x400000004000;
  v22.i64[1] = 0x400000004000;
  int32x4_t v23 = vmlaq_s32(v22, v7, v16);
  v7.i64[0] = 0x400000004000;
  v7.i64[1] = 0x400000004000;
  int32x4_t v24 = vsraq_n_s32(v2, vmlaq_s32(v7, v9, v16), 0xFuLL);
  int32x4_t v25 = vdupq_n_s32(0x5587u);
  int32x4_t v26 = vsraq_n_s32(v4, v23, 0xFuLL);
  v9.i64[0] = 0x400000004000;
  v9.i64[1] = 0x400000004000;
  int32x4_t v27 = vmlaq_s32(v9, v10, v25);
  v16.i64[0] = 0x400000004000;
  v16.i64[1] = 0x400000004000;
  int32x4_t v28 = vmlaq_s32(v16, v12, v25);
  int32x4_t v29 = vdupq_n_s32(0xFFFFAA79);
  v23.i64[0] = 0x400000004000;
  v23.i64[1] = 0x400000004000;
  int32x4_t v30 = vmlaq_s32(v23, v15, v29);
  int32x4_t v31 = vsraq_n_s32(v15, v27, 0xFuLL);
  v27.i64[0] = 0x400000004000;
  v27.i64[1] = 0x400000004000;
  v33.i32[0] = a1[34];
  v32.i32[0] = a1[35];
  v32.i32[1] = a1[43];
  v32.i32[2] = a1[51];
  v32.i32[3] = a1[59];
  int32x4_t v34 = vmlaq_s32(v27, v32, v29);
  int32x4_t v35 = vsraq_n_s32(v32, v28, 0xFuLL);
  int32x4_t v36 = vsraq_n_s32(v12, v34, 0xFuLL);
  int32x4_t v37 = vsraq_n_s32(v10, v30, 0xFuLL);
  v33.i32[1] = a1[42];
  v33.i32[2] = a1[50];
  v33.i32[3] = a1[58];
  v29.i64[0] = 0x400000004000;
  v29.i64[1] = 0x400000004000;
  int32x4_t v38 = vdupq_n_s32(0x3505u);
  v14.i32[1] = a1[10];
  v14.i32[2] = a1[18];
  v14.i32[3] = a1[26];
  v6.i32[1] = a1[14];
  v6.i32[2] = a1[22];
  v6.i32[3] = a1[30];
  v8.i32[1] = a1[46];
  v8.i32[2] = a1[54];
  v8.i32[3] = a1[62];
  v5.i32[1] = a1[8];
  v5.i32[2] = a1[16];
  v5.i32[3] = a1[24];
  v3.i32[1] = a1[40];
  v3.i32[2] = a1[48];
  v3.i32[3] = a1[56];
  v11.i32[1] = a1[12];
  v11.i32[2] = a1[20];
  v11.i32[3] = a1[28];
  v13.i32[1] = a1[44];
  v13.i32[2] = a1[52];
  v13.i32[3] = a1[60];
  v28.i64[0] = 0x400000004000;
  v28.i64[1] = 0x400000004000;
  int32x4_t v39 = vsubq_s32(vshrq_n_s32(vmlaq_s32(v29, v33, v38), 0xFuLL), v8);
  int32x4_t v40 = vsubq_s32(vshrq_n_s32(vmlaq_s32(v28, v14, v38), 0xFuLL), v6);
  v30.i64[0] = 0x400000004000;
  v30.i64[1] = 0x400000004000;
  int32x4_t v41 = vmlaq_s32(v30, v6, v38);
  v6.i64[0] = 0x400000004000;
  v6.i64[1] = 0x400000004000;
  int32x4_t v42 = vsraq_n_s32(v33, vmlaq_s32(v6, v8, v38), 0xFuLL);
  int32x4_t v43 = vsraq_n_s32(v14, v41, 0xFuLL);
  int32x4_t v44 = vaddq_s32(v13, v3);
  int32x4_t v45 = vaddq_s32(v11, v5);
  int32x4_t v46 = vsubq_s32(v3, v13);
  int32x4_t v47 = vsubq_s32(v5, v11);
  int32x4_t v48 = vaddq_s32(v37, v21);
  int32x4_t v49 = vaddq_s32(v36, v20);
  int32x4_t v50 = vsubq_s32(v21, v37);
  int32x4_t v51 = vsubq_s32(v20, v36);
  int32x4_t v52 = vaddq_s32(v31, v26);
  int32x4_t v53 = vaddq_s32(v35, v24);
  int32x4_t v54 = vsubq_s32(v26, v31);
  int32x4_t v55 = vsubq_s32(v24, v35);
  int32x4_t v56 = vaddq_s32(v43, v45);
  int32x4_t v57 = vaddq_s32(v42, v44);
  int32x4_t v58 = vsubq_s32(v45, v43);
  int32x4_t v59 = vsubq_s32(v44, v42);
  int32x4_t v60 = vaddq_s32(v47, v40);
  int32x4_t v61 = vaddq_s32(v46, v39);
  int32x4_t v62 = vsubq_s32(v47, v40);
  int32x4_t v63 = vsubq_s32(v46, v39);
  int16x8_t v64 = (int16x8_t)vaddq_s32(v59, v49);
  int16x8_t v65 = (int16x8_t)vsubq_s32(v59, v49);
  int32x4_t v66 = vdupq_n_s32(0x5A82u);
  v42.i64[0] = 0x400000004000;
  v42.i64[1] = 0x400000004000;
  int32x4_t v67 = vmlaq_s32(v42, vaddq_s32(v51, v55), v66);
  v39.i64[0] = 0x400000004000;
  v39.i64[1] = 0x400000004000;
  int32x4_t v68 = vmlaq_s32(v39, vaddq_s32(v50, v54), v66);
  int16x8_t v69 = (int16x8_t)vsubq_s32(v61, vshrq_n_s32(v67, 0xFuLL));
  int16x8_t v70 = (int16x8_t)vsraq_n_s32(v61, v67, 0xFuLL);
  int16x8_t v71 = (int16x8_t)vsubq_s32(v60, vshrq_n_s32(v68, 0xFuLL));
  int16x8_t v72 = (int16x8_t)vsraq_n_s32(v60, v68, 0xFuLL);
  v68.i64[0] = 0x400000004000;
  v68.i64[1] = 0x400000004000;
  int32x4_t v73 = vmlaq_s32(v68, vsubq_s32(v55, v51), v66);
  int32x4_t v74 = vmlaq_s32(v17, vsubq_s32(v54, v50), v66);
  *a2 = vuzp1q_s16((int16x8_t)vaddq_s32(v56, v52), (int16x8_t)vaddq_s32(v57, v53));
  a2[1] = vuzp1q_s16(v72, v70);
  a2[2] = vuzp1q_s16((int16x8_t)vsraq_n_s32(v62, v74, 0xFuLL), (int16x8_t)vsraq_n_s32(v63, v73, 0xFuLL));
  a2[3] = vuzp1q_s16((int16x8_t)vaddq_s32(v58, v48), v64);
  a2[4] = vuzp1q_s16((int16x8_t)vsubq_s32(v58, v48), v65);
  a2[5] = vuzp1q_s16((int16x8_t)vsubq_s32(v62, vshrq_n_s32(v74, 0xFuLL)), (int16x8_t)vsubq_s32(v63, vshrq_n_s32(v73, 0xFuLL)));
  int16x8_t result = vuzp1q_s16((int16x8_t)vsubq_s32(v56, v52), (int16x8_t)vsubq_s32(v57, v53));
  a2[6] = vuzp1q_s16(v71, v69);
  a2[7] = result;
  return result;
}

uint64_t IDCT(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  v13[64] = *MEMORY[0x1E4F143B8];
  bzero(v11, 0x600uLL);
  char v6 = *a3;
  if (*a3)
  {
    int32x4_t v7 = a3 + 1;
    int32x4_t v8 = v11;
    do
    {
      IDCTRows(a1, v8, v6);
      a1 += 128;
      v8 += 64;
      int v9 = *v7++;
      char v6 = v9;
    }
    while (v9);
  }
  IDCTCols((uint64_t)v11, a2);
  IDCTCols((uint64_t)&v12, a2 + 256);
  return IDCTCols((uint64_t)v13, a2 + 512);
}

void IDCTFlex(uint64_t a1, int16x8_t *a2, unsigned char *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(v8, 0, sizeof(v8));
  char v3 = *a3;
  if (*a3)
  {
    char v6 = a3 + 1;
    do
    {
      IDCTRows(a1, v8, v3);
      IDCTFlexCols((__int32 *)v8, a2);
      a1 += 128;
      a2 += 8;
      int v7 = *v6++;
      char v3 = v7;
    }
    while (v7);
  }
}

uint64_t ParavirtualizedVideoDecoder_CreateInstanceWithSpecification()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFTypeRef v9 = 0;
  CFTypeRef v10 = 0;
  CFTypeRef v7 = 0;
  CFTypeRef v8 = 0;
  int v6 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  VTVideoDecoderGetClassID();
  uint64_t v1 = CMDerivedObjectCreate();
  if (v1)
  {
    uint64_t v3 = v1;
LABEL_18:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (Mutable) {
      goto LABEL_4;
    }
    goto LABEL_5;
  }
  uint64_t v3 = FigSignalErrorAt();
  if (v3) {
    goto LABEL_18;
  }
  if (Mutable) {
LABEL_4:
  }
    CFRelease(Mutable);
LABEL_5:
  if (cf) {
    CFRelease(cf);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v3;
}

uint64_t paravirtualizedVideoDecoder_FillPixelBufferWithYCbCrColor(__CVBuffer *a1, int a2, char a3, char a4)
{
  CVPixelBufferLockBaseAddress(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  CFTypeRef v8 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t v15 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  size_t v13 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  __pattern4[0] = a3;
  __pattern4[1] = a4;
  __pattern4[2] = a3;
  for (__pattern4[3] = a4; HeightOfPlane; --HeightOfPlane)
  {
    memset(BaseAddressOfPlane, a2, WidthOfPlane);
    BaseAddressOfPlane += BytesPerRowOfPlane;
  }
  for (; v11; --v11)
  {
    memset_pattern4(v8, __pattern4, 2 * v15);
    v8 += v13;
  }

  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t paravirtualizedVideoDecoder_DrawCharsToPixelBuffer(__CVBuffer *a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  int WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  int HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  int v16 = WidthOfPlane - a2;
  int v17 = HeightOfPlane - a3;
  if (WidthOfPlane - a2 >= 6 * a4 * a6) {
    int v18 = 6 * a4 * a6;
  }
  else {
    int v18 = WidthOfPlane - a2;
  }
  if (v17 >= 9 * a4) {
    int v17 = 9 * a4;
  }
  if (v17 < 1) {
    return 0;
  }
  int v19 = 0;
  int32x4_t v20 = &BaseAddressOfPlane[BytesPerRowOfPlane * a3 + a2];
  if (6 * a4 * a6 < (uint64_t)v16) {
    int v16 = 6 * a4 * a6;
  }
  while (v18 < 1)
  {
LABEL_19:
    v20 += BytesPerRowOfPlane;
    if (++v19 == v17) {
      return 0;
    }
  }
  uint64_t v21 = 0;
  while (&v20[v21] < &BaseAddressOfPlane[BytesPerRowOfPlane * HeightOfPlane] && v20 >= BaseAddressOfPlane)
  {
    if (((kGlyphs[9 * *(char *)(a5 + (int)v21 / a4 / 6) - 288 + v19 / a4] << ((int)v21 / a4 % 6)) & 0x80) != 0) {
      v20[v21] = -1;
    }
    if (v16 == ++v21) {
      goto LABEL_19;
    }
  }
  return 4294954387;
}

uint64_t paravirtualizedVideoDecoder_lookupRetainAndForgetPendingFramePixelBuffersByUUIDs(uint64_t a1, const __CFArray *a2, __CFArray **a3)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFIndex Count = CFArrayGetCount(a2);
  }
  else {
    CFIndex Count = 0;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 56));
  if (!Mutable)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 64), ValueAtIndex);
      if (Value) {
        CFArrayAppendValue(Mutable, Value);
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 64), ValueAtIndex);
    }
  }
  if (CFArrayGetCount(Mutable) != Count)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  if (!a3)
  {
LABEL_16:
    os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 56));
    CFRelease(Mutable);
    return v11;
  }
  *a3 = Mutable;
LABEL_13:
  os_unfair_lock_unlock((os_unfair_lock_t)(DerivedStorage + 56));
  return v11;
}

uint64_t ParavirtualizedVideoDecoder_Invalidate()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unsigned int v8 = 0;
  CFTypeRef v6 = 0;
  CFTypeRef cf = 0;
  uint64_t MessageAndByteStream = VTParavirtualizationCreateMessageAndByteStream(1684631158, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&cf, 0);
  if (MessageAndByteStream
    || (long long v9 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v10 = 0,
        uint64_t MessageAndByteStream = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, (uint64_t)&v9, &v6), MessageAndByteStream))
  {
    uint64_t v3 = MessageAndByteStream;
LABEL_7:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_8;
  }
  unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v6, 744845938, &v8);
  if (SInt32) {
    uint64_t v3 = SInt32;
  }
  else {
    uint64_t v3 = v8;
  }
  if (v3) {
    goto LABEL_7;
  }
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v3;
}

void ParavirtualizedVideoDecoder_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  *(void *)uint64_t DerivedStorage = 0;
  *(void *)(DerivedStorage + 8) = 0;
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
  int32x4_t v2 = *(const void **)(DerivedStorage + 88);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 88) = 0;
  }
  if (!VTParavirtualizationCreateMessageAndByteStream(761554275, 0, DerivedStorage + 24, 0, (CMBlockBufferRef *)&cf, 0))VTParavirtualizationGuestSendMessageToHostAsync((OpaqueCMBlockBuffer *)cf); {
  VTParavirtualizationGuestRemoveHandlerForUUID((CFUUIDBytes *)(DerivedStorage + 24));
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 48) = 0;
  }
  int32x4_t v4 = *(const void **)(DerivedStorage + 64);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 64) = 0;
  }
  int32x4_t v5 = *(const void **)(DerivedStorage + 80);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 80) = 0;
  }
  CFTypeRef v6 = *(const void **)(DerivedStorage + 88);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 88) = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
}

__CFString *ParavirtualizedVideoDecoder_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @"<ParavirtualizedVideoDecoder %p UUID %02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x>", a1, DerivedStorage[24], DerivedStorage[25], DerivedStorage[26], DerivedStorage[27], DerivedStorage[28], DerivedStorage[29], DerivedStorage[30], DerivedStorage[31], DerivedStorage[32], DerivedStorage[33], DerivedStorage[34], DerivedStorage[35], DerivedStorage[36], DerivedStorage[37], DerivedStorage[38],
    DerivedStorage[39]);
  return Mutable;
}

uint64_t ParavirtualizedVideoDecoder_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v15 = 0;
  CFTypeRef v13 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  unsigned int v11 = 0;
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1684238192, 1, DerivedStorage + 24, 0, &v15, &cf);
  if (appended
    || (uint64_t appended = VTParavirtualizationMessageAppendCFPropertyList(), appended)
    || (long long v9 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v10 = 0,
        uint64_t appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v15, (uint64_t)&v9, &v13),
        appended)
    || (uint64_t appended = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v13, 744845938, &v11), appended))
  {
    uint64_t v7 = appended;
  }
  else
  {
    uint64_t v7 = v11;
    if (!v11)
    {
      uint64_t v7 = VTParavirtualizationMessageCopyCFPropertyList((OpaqueCMBlockBuffer *)v13, 745955692, &v12);
      if (!v7)
      {
        *a4 = v12;
        CFTypeRef v12 = 0;
      }
    }
  }
  if (v15) {
    CFRelease(v15);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v7;
}

uint64_t ParavirtualizedVideoDecoder_SetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v15 = 0;
  CFTypeRef v16 = 0;
  unsigned int v14 = 0;
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1685284212, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&v17, &v16);
  if (!appended)
  {
    uint64_t appended = VTParavirtualizationMessageAppendCFPropertyList();
    if (!appended)
    {
      uint64_t v8 = paravirtualizedVideoDecoder_handleAnySpecialCaseSetPropertyAndCopyReplacementValue(a1, a2, a3, &cf);
      if (v8 == -19096)
      {
        uint64_t v9 = 0;
        goto LABEL_14;
      }
      uint64_t v9 = v8;
      if (v8) {
        goto LABEL_12;
      }
      uint64_t appended = VTParavirtualizationMessageAppendCFPropertyList();
      if (!appended)
      {
        long long v19 = kVTParavirtualizationDefaultReplyTimeout;
        uint64_t v20 = 0;
        uint64_t appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v17, (uint64_t)&v19, &v15);
        if (!appended)
        {
          unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v15, 744845938, &v14);
          if (SInt32) {
            uint64_t v9 = SInt32;
          }
          else {
            uint64_t v9 = v14;
          }
          if (!v9) {
            goto LABEL_14;
          }
          goto LABEL_12;
        }
      }
    }
  }
  uint64_t v9 = appended;
LABEL_12:
  unsigned int v11 = (const void *)FigCFCopyCompactDescription();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v11) {
    CFRelease(v11);
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v9;
}

uint64_t paravirtualizedVideoDecoder_handleAnySpecialCaseSetPropertyAndCopyReplacementValue(uint64_t a1, uint64_t a2, const void *a3, void *a4)
{
  if (paravirtualizedVideoDecoder_getSpecialCaseHandlersForSettingProperties_sCreateDictionaryOnce != -1) {
    dispatch_once(&paravirtualizedVideoDecoder_getSpecialCaseHandlersForSettingProperties_sCreateDictionaryOnce, &__block_literal_global_29_0);
  }
  uint64_t Value = FigCFDictionaryGetValue();
  if (Value)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, const void *, void *))(Value + 8);
    return v8(a1, a3, a4);
  }
  else
  {
    if (a3) {
      CFTypeRef v10 = CFRetain(a3);
    }
    else {
      CFTypeRef v10 = 0;
    }
    *a4 = v10;
    return 0;
  }
}

CFDictionaryRef __paravirtualizedVideoDecoder_getSpecialCaseHandlersForSettingProperties_block_invoke()
{
  keys[2] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"AV1FilmGrainMode";
  keys[1] = @"GuestExternalProtectionStatus";
  values[0] = &kParavirtualizedVideoDecoder_BaseClass_block_invoke_specialCasePropertyAndHandlerPairs;
  values[1] = &off_1EE4ED598;
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 2, MEMORY[0x1E4F1D530], 0);
  paravirtualizedVideoDecoder_getSpecialCaseHandlersForSettingProperties_sSpecialCaseHandlersForSettingProperties = (uint64_t)result;
  return result;
}

uint64_t paravirtualizedVideoDecoder_handleAV1FilmGrainModeSetPropertyAndCopyReplacementValue(uint64_t a1, __CFString *a2, void *a3)
{
  if (!FigCFEqual())
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    CFTypeRef v5 = 0;
    goto LABEL_6;
  }
  a2 = @"Immediate";
  if (!@"Immediate") {
    goto LABEL_5;
  }
LABEL_3:
  CFTypeRef v5 = CFRetain(a2);
LABEL_6:
  *a3 = v5;
  return 0;
}

uint64_t paravirtualizedVideoDecoder_handleGuestExternalProtectionStatusSetPropertyAndCopyReplacementValue(uint64_t a1, const void *a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int UInt32 = FigCFNumberGetUInt32();
  if (*(_DWORD *)(DerivedStorage + 96) == UInt32) {
    return 4294948200;
  }
  *(_DWORD *)(DerivedStorage + 96) = UInt32;
  if (a2) {
    CFTypeRef v8 = CFRetain(a2);
  }
  else {
    CFTypeRef v8 = 0;
  }
  uint64_t result = 0;
  *a3 = v8;
  return result;
}

uint64_t ParavirtualizedVideoDecoder_StartSession(uint64_t a1, uint64_t a2, const void *a3)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v16 = 0;
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  unsigned int v13 = 0;
  *uint64_t DerivedStorage = a2;
  CFTypeRef v6 = (const void *)DerivedStorage[2];
  DerivedStorage[2] = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v6) {
    CFRelease(v6);
  }
  DerivedStorage[11] = 0;
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1685288033, 1, (uint64_t)(DerivedStorage + 3), 0, &v16, &cf);
  if (appended
    || (appended = VTParavirtualizationMessageAppendCMFormatDescription((uint64_t)cf, 744907891, (const opaqueCMFormatDescription *)a3), appended)|| (long long v11 = kVTParavirtualizationDefaultReplyTimeout, v12 = 0, appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v16, (uint64_t)&v11, &v14), appended))
  {
    uint64_t v9 = appended;
  }
  else
  {
    unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v14, 744845938, &v13);
    if (SInt32) {
      uint64_t v9 = SInt32;
    }
    else {
      uint64_t v9 = v13;
    }
  }
  if (v16) {
    CFRelease(v16);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v9;
}

uint64_t ParavirtualizedVideoDecoder_DecodeFrame(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, char a4, _DWORD *a5)
{
  return ParavirtualizedVideoDecoder_DecodeFrameWithOptions(a1, a2, a3, a4, 0, a5);
}

uint64_t ParavirtualizedVideoDecoder_CopySupportedPropertyDictionary(uint64_t a1, CFTypeRef *a2)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 48)) {
    goto LABEL_27;
  }
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v15 = 0;
  CFTypeRef v16 = 0;
  unsigned int v14 = 0;
  CFDictionaryRef v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t SInt32 = VTParavirtualizationCreateMessageAndByteStream(1685288304, 1, v5 + 24, 0, (CMBlockBufferRef *)&cf, &v17);
  if (SInt32
    || (long long v12 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v13 = 0,
        uint64_t SInt32 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)cf, (uint64_t)&v12, &v16), SInt32)|| (uint64_t SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v16, 744845938, &v14), SInt32))
  {
    uint64_t v8 = SInt32;
  }
  else
  {
    uint64_t v8 = v14;
    if (!v14)
    {
      uint64_t v8 = VTParavirtualizationMessageCopyCFDictionary((OpaqueCMBlockBuffer *)v16, 745764208, &v15);
      if (!v8)
      {
        uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
        FigCFDictionarySetValue();
        *(void *)(DerivedStorage + 48) = MutableCopy;
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (!v8)
  {
LABEL_27:
    if (a2 && (CFTypeRef v10 = *(const void **)(DerivedStorage + 48)) != 0)
    {
      uint64_t v8 = 0;
      *a2 = CFRetain(v10);
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v8;
}

uint64_t ParavirtualizedVideoDecoder_SetProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v23 = 0;
  CFTypeRef v24 = 0;
  CFTypeRef v22 = 0;
  unsigned int v21 = 0;
  uint64_t v5 = VTParavirtualizationCreateMessageAndByteStream(1684895084, 1, DerivedStorage + 24, 0, (CMBlockBufferRef *)&v24, &v23);
  if (v5)
  {
    uint64_t v12 = v5;
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    uint64_t CMBaseObject = VTVideoDecoderGetCMBaseObject(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFArrayRef v8 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
    uint64_t Count = FigCFDictionaryGetCount();
    if (Count >= 1)
    {
      uint64_t v10 = Count;
      CFIndex v11 = 0;
      uint64_t v12 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v8, v11);
        uint64_t Value = CFDictionaryGetValue(a2, ValueAtIndex);
        cf[0] = 0;
        unsigned int v15 = paravirtualizedVideoDecoder_handleAnySpecialCaseSetPropertyAndCopyReplacementValue(CMBaseObject, (uint64_t)ValueAtIndex, Value, cf);
        if (v15 == -19096)
        {
          if (v10 == 1)
          {
            if (Mutable) {
              CFRelease(Mutable);
            }
            if (cf[0]) {
              CFRelease(cf[0]);
            }
            CFMutableDictionaryRef Mutable = 0;
            if (!v8) {
              goto LABEL_19;
            }
LABEL_18:
            CFRelease(v8);
            goto LABEL_19;
          }
        }
        else
        {
          if (v12) {
            uint64_t v12 = v12;
          }
          else {
            uint64_t v12 = v15;
          }
          if (!v15) {
            FigCFDictionarySetValue();
          }
          if (cf[0]) {
            CFRelease(cf[0]);
          }
        }
        if (v10 == ++v11) {
          goto LABEL_17;
        }
      }
    }
    uint64_t v12 = 0;
LABEL_17:
    if (v8) {
      goto LABEL_18;
    }
LABEL_19:
    if (!v12)
    {
      uint64_t appended = VTParavirtualizationMessageAppendCFDictionary(v23, 745566831, Mutable);
      if (appended
        || (*(_OWORD *)CFTypeRef cf = kVTParavirtualizationDefaultReplyTimeout,
            uint64_t v26 = 0,
            uint64_t appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync((OpaqueCMBlockBuffer *)v24, (uint64_t)cf, &v22), appended))
      {
        uint64_t v12 = appended;
      }
      else
      {
        unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v22, 744845938, &v21);
        if (SInt32) {
          uint64_t v12 = SInt32;
        }
        else {
          uint64_t v12 = v21;
        }
        if (!v12) {
          goto LABEL_28;
        }
      }
    }
  }
  int v18 = (const void *)FigCFCopyCompactDescription();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v18) {
    CFRelease(v18);
  }
LABEL_28:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v22) {
    CFRelease(v22);
  }
  return v12;
}

uint64_t ParavirtualizedVideoDecoder_CopySerializableProperties(uint64_t a1, uint64_t a2, void *a3)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v14 = 0;
  CFTypeRef v15 = 0;
  CFTypeRef v12 = 0;
  CFTypeRef cf = 0;
  unsigned int v11 = 0;
  uint64_t SInt32 = VTParavirtualizationCreateMessageAndByteStream(1685283190, 1, DerivedStorage + 24, 0, &v14, &cf);
  if (SInt32
    || (long long v9 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v10 = 0,
        uint64_t SInt32 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v14, (uint64_t)&v9, &v12),
        SInt32)
    || (uint64_t SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v12, 744845938, &v11), SInt32))
  {
    uint64_t v6 = SInt32;
  }
  else
  {
    uint64_t v6 = v11;
    if (!v11)
    {
      uint64_t v7 = VTParavirtualizationMessageCopyCFDictionary((OpaqueCMBlockBuffer *)v12, 745566831, &v15);
      uint64_t v6 = v7;
      if (a3)
      {
        if (!v7)
        {
          *a3 = v15;
          CFTypeRef v15 = 0;
        }
      }
    }
  }
  if (v14) {
    CFRelease(v14);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v6;
}

BOOL ParavirtualizedVideoDecoder_CanAcceptFormatDescription(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v9 = 0;
  CMBlockBufferRef v10 = 0;
  CFTypeRef cf = 0;
  int v7 = 0;
  if (!VTParavirtualizationCreateMessageAndByteStream(1684234606, 1, DerivedStorage + 24, 0, &v10, &v9)&& !VTParavirtualizationMessageAppendCMFormatDescription((uint64_t)v9, 744907891, a2))
  {
    long long v5 = kVTParavirtualizationDefaultReplyTimeout;
    uint64_t v6 = 0;
    if (!VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v10, (uint64_t)&v5, &cf)) {
      VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744710510, &v7);
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v7 != 0;
}

uint64_t ParavirtualizedVideoDecoder_FinishDelayedFrames(uint64_t a1)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v10 = 0;
  CMBlockBufferRef v11 = 0;
  CFTypeRef cf = 0;
  unsigned int v8 = 0;
  uint64_t v2 = VTParavirtualizationCreateMessageAndByteStream(1684433262, 1, DerivedStorage + 24, 0, &v11, &v10);
  if (v2
    || (long long v6 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v7 = 0,
        uint64_t v2 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v11, (uint64_t)&v6, &cf),
        v2))
  {
    uint64_t v4 = v2;
  }
  else
  {
    unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744845938, &v8);
    if (SInt32) {
      uint64_t v4 = SInt32;
    }
    else {
      uint64_t v4 = v8;
    }
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

uint64_t ParavirtualizedVideoDecoder_StartTileSession(uint64_t a1, uint64_t a2, const void *a3)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef v16 = 0;
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  unsigned int v13 = 0;
  long long v6 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 8) = a2;
  *(void *)(DerivedStorage + 16) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v6) {
    CFRelease(v6);
  }
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1685288051, 1, DerivedStorage + 24, 0, &v16, &cf);
  if (appended
    || (appended = VTParavirtualizationMessageAppendCMFormatDescription((uint64_t)cf, 744907891, (const opaqueCMFormatDescription *)a3), appended)|| (long long v11 = kVTParavirtualizationDefaultReplyTimeout, v12 = 0, appended = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v16, (uint64_t)&v11, &v14), appended))
  {
    uint64_t v9 = appended;
  }
  else
  {
    unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v14, 744845938, &v13);
    if (SInt32) {
      uint64_t v9 = SInt32;
    }
    else {
      uint64_t v9 = v13;
    }
  }
  if (v16) {
    CFRelease(v16);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v9;
}

uint64_t ParavirtualizedVideoDecoder_DecodeTile(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, __CVBuffer *a6, uint64_t a7, char a8, _DWORD *a9)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v57 = 0;
  v58[0] = 0;
  CMBlockBufferRef v55 = 0;
  int32x4_t v56 = 0;
  CMBlockBufferRef v54 = 0;
  unsigned int v53 = 0;
  int v52 = 0;
  IOSurfaceRef IOSurface = 0;
  long long v49 = kVTParavirtualizationDefaultReplyTimeout;
  uint64_t v50 = 0;
  uint64_t v15 = DerivedStorage + 24;
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1685350764, 1, DerivedStorage + 24, 0, v58, &v57);
  if (appended
    || (int32x4_t v45 = a3, appended = VTParavirtualizationMessageAppendSInt64(), appended)
    || (uint64_t appended = VTParavirtualizationMessageAppendVTInt32Point(), appended)
    || (uint64_t appended = VTParavirtualizationMessageAppendVTInt32Size(), appended))
  {
    uint64_t v37 = appended;
    CFUUIDRef v21 = 0;
    goto LABEL_62;
  }
  if (a6)
  {
    char v42 = a8;
    uint64_t v43 = DerivedStorage;
    uint64_t v46 = a2;
    VTVideoDecoderGetCMBaseObject(a1);
    uint64_t v17 = CMBaseObjectGetDerivedStorage();
    lock = (os_unfair_lock_s *)(v17 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(v17 + 72));
    int64_t Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v17 + 80));
    long long v19 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    uint64_t v20 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v17 + 80), v19, v20);
    if (Count < 1) {
      goto LABEL_16;
    }
    CFUUIDRef v21 = 0;
    uint64_t v22 = 0;
    char v23 = 1;
    uint64_t v41 = v17;
LABEL_8:
    CFUUIDRef v24 = v21;
    uint64_t v25 = v22;
    do
    {
      CFDictionaryRef v26 = (const __CFDictionary *)v20[v25];
      if (CFDictionaryGetValue(v26, @"PixelBufferKey") == a6)
      {
        CFDictionaryGetValue(v26, @"TilesUsingPixelBuffer");
        FigCFArrayAppendInt64();
        CFUUIDRef v21 = (const __CFUUID *)CFRetain(v19[v25]);
        char v23 = 0;
        uint64_t v22 = v25 + 1;
        BOOL v27 = Count - 1 == v25;
        uint64_t v17 = v41;
        if (v27) {
          goto LABEL_20;
        }
        goto LABEL_8;
      }
      ++v25;
    }
    while (Count != v25);
    CFUUIDRef v21 = v24;
    uint64_t v17 = v41;
    if (v23)
    {
LABEL_16:
      CFAllocatorRef v28 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      FigCFArrayAppendInt64();
      CFUUIDRef v30 = CFUUIDCreate(v28);
      CFAllocatorRef v31 = v28;
      CFUUIDRef v21 = v30;
      CFMutableDictionaryRef v32 = CFDictionaryCreateMutable(v31, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      if (v32) {
        CFRelease(v32);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
LABEL_20:
    CFDictionaryGetCount(*(CFDictionaryRef *)(v17 + 80));
    os_unfair_lock_unlock(lock);
    free(v19);
    free(v20);
    if (v21)
    {
      uint64_t v33 = VTParavirtualizationMessageAppendCFUUID((uint64_t)v57, 745895273, v21);
      a2 = v46;
      uint64_t DerivedStorage = v43;
      a8 = v42;
      if (v33)
      {
LABEL_61:
        uint64_t v37 = v33;
LABEL_62:
        uint64_t v39 = *(void *)(DerivedStorage + 8);
LABEL_63:
        uint64_t v40 = v37;
LABEL_64:
        VTDecoderSessionEmitDecodedTile(v39, a2, v40, 0, 0);
        goto LABEL_48;
      }
    }
    else
    {
      a2 = v46;
      uint64_t DerivedStorage = v43;
      a8 = v42;
    }
  }
  else
  {
    CFUUIDRef v21 = 0;
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a6);
  if (!IOSurface)
  {
    uint64_t v37 = FigSignalErrorAt();
    uint64_t v39 = *(void *)(DerivedStorage + 8);
    if (v37) {
      goto LABEL_63;
    }
    uint64_t v40 = 0;
LABEL_70:
    uint64_t v37 = 0;
    goto LABEL_64;
  }
  uint64_t v33 = VTParavirtualizationMessageAppendVTInt32Point();
  if (v33) {
    goto LABEL_61;
  }
  uint64_t v33 = VTParavirtualizationMessageAppendUInt32();
  if (v33) {
    goto LABEL_61;
  }
  uint64_t v33 = VTParavirtualizationMessageAppendCMSampleBufferWithLimitAndCopyRemainingData((uint64_t)v57, 745759334, *(_DWORD *)(DerivedStorage + 40), 0x200000uLL, v45, (CFTypeRef *)(DerivedStorage + 88), &v55);
  if (v33) {
    goto LABEL_61;
  }
  if (v55)
  {
    do
    {
      uint64_t v33 = VTParavirtualizationMessageChangeMessageFlags(v58[0], 16, 17);
      if (v33) {
        goto LABEL_61;
      }
      uint64_t v33 = VTParavirtualizationGuestSendMessageToHostAsync(v58[0]);
      if (v33) {
        goto LABEL_61;
      }
      if (v58[0])
      {
        CFRelease(v58[0]);
        v58[0] = 0;
      }
      if (v57)
      {
        CFRelease(v57);
        CFTypeRef v57 = 0;
      }
      uint64_t v33 = VTParavirtualizationCreateMessageAndByteStream(1685350764, 1, v15, 0, v58, &v57);
      if (v33) {
        goto LABEL_61;
      }
      uint64_t v33 = VTParavirtualizationMessageAppendCMSampleBufferRemainderDataWithLimitAndCopyRemainingData((uint64_t)v57, 745759334, 0x200000uLL, v55, &v54);
      if (v33) {
        goto LABEL_61;
      }
      if (v55) {
        CFRelease(v55);
      }
      int32x4_t v34 = v54;
      CMBlockBufferRef v54 = 0;
      CMBlockBufferRef v55 = v34;
    }
    while (v34);
  }
  if ((a8 & 1) == 0)
  {
    long long v49 = kVTParavirtualizationCodecOperationReplyTimeout;
    uint64_t v50 = 0;
  }
  long long v47 = v49;
  uint64_t v48 = v50;
  uint64_t v35 = VTParavirtualizationGuestSendMessageWithIOSurfacesToHostAndCopyReplySync(v58[0], (uint64_t)&IOSurface, 1, &v47, &v56);
  if (v35)
  {
    uint64_t v40 = v35;
    uint64_t v39 = *(void *)(DerivedStorage + 8);
    goto LABEL_70;
  }
  uint64_t SInt32 = VTParavirtualizationMessageGetSInt32(v56, 744845938, &v53);
  if (SInt32 || (uint64_t SInt32 = VTParavirtualizationMessageGetUInt32(v56, 745107046, &v52), SInt32))
  {
    uint64_t v37 = SInt32;
  }
  else
  {
    uint64_t v37 = v53;
    if (a9) {
      *a9 = v52;
    }
  }
LABEL_48:
  if (v58[0]) {
    CFRelease(v58[0]);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v21) {
    CFRelease(v21);
  }
  return v37;
}

uint64_t ParavirtualizedVideoDecoder_FinishDelayedTiles(uint64_t a1)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v10 = 0;
  CMBlockBufferRef v11 = 0;
  CFTypeRef cf = 0;
  unsigned int v8 = 0;
  uint64_t v2 = VTParavirtualizationCreateMessageAndByteStream(1685349993, 1, DerivedStorage + 24, 0, &v11, &v10);
  if (v2
    || (long long v6 = kVTParavirtualizationDefaultReplyTimeout,
        uint64_t v7 = 0,
        uint64_t v2 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v11, (uint64_t)&v6, &cf),
        v2))
  {
    uint64_t v4 = v2;
  }
  else
  {
    unsigned int SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)cf, 744845938, &v8);
    if (SInt32) {
      uint64_t v4 = SInt32;
    }
    else {
      uint64_t v4 = v8;
    }
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

uint64_t ParavirtualizedVideoDecoder_DecodeFrameWithOptions(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, char a4, uint64_t a5, _DWORD *a6)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v27 = 0;
  CMBlockBufferRef v28 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v26 = 0;
  uint64_t v23 = 0;
  CFTypeRef v24 = 0;
  long long v21 = kVTParavirtualizationDefaultReplyTimeout;
  uint64_t v22 = 0;
  uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1684435565, 1, DerivedStorage + 24, 0, &v28, &v27);
  if (appended
    || (uint64_t appended = VTParavirtualizationMessageAppendSInt64(), appended)
    || (uint64_t appended = VTParavirtualizationMessageAppendUInt32(), appended)
    || a5
    && *(_DWORD *)(DerivedStorage + 40) >= 4u
    && (uint64_t appended = VTParavirtualizationMessageAppendCFDictionary(v27, 744910704, a5), appended)
    || (uint64_t appended = VTParavirtualizationMessageAppendCMSampleBufferWithLimitAndCopyRemainingData((uint64_t)v27, 745759334, *(_DWORD *)(DerivedStorage + 40), 0x200000uLL, a3, (CFTypeRef *)(DerivedStorage + 88), (CMBlockBufferRef *)&cf), appended))
  {
LABEL_38:
    uint64_t v16 = appended;
    uint64_t v18 = appended;
LABEL_39:
    VTDecoderSessionEmitDecodedFrame(*(uint64_t **)DerivedStorage, a2, v18, 0, 0);
    goto LABEL_27;
  }
  if (cf)
  {
    do
    {
      uint64_t appended = VTParavirtualizationMessageChangeMessageFlags(v28, 16, 17);
      if (appended) {
        goto LABEL_38;
      }
      uint64_t appended = VTParavirtualizationGuestSendMessageToHostAsync(v28);
      if (appended) {
        goto LABEL_38;
      }
      if (v28)
      {
        CFRelease(v28);
        CMBlockBufferRef v28 = 0;
      }
      if (v27)
      {
        CFRelease(v27);
        CFTypeRef v27 = 0;
      }
      uint64_t appended = VTParavirtualizationCreateMessageAndByteStream(1684435565, 1, DerivedStorage + 24, 0, &v28, &v27);
      if (appended) {
        goto LABEL_38;
      }
      uint64_t appended = VTParavirtualizationMessageAppendCMSampleBufferRemainderDataWithLimitAndCopyRemainingData((uint64_t)v27, 745759334, 0x200000uLL, (void *)cf, (CMBlockBufferRef *)&v24);
      if (appended) {
        goto LABEL_38;
      }
      if (cf) {
        CFRelease(cf);
      }
      CFTypeRef v13 = v24;
      CFTypeRef v24 = 0;
      CFTypeRef cf = v13;
    }
    while (v13);
  }
  if ((a4 & 1) == 0)
  {
    long long v21 = kVTParavirtualizationCodecOperationReplyTimeout;
    uint64_t v22 = 0;
  }
  long long v19 = v21;
  uint64_t v20 = v22;
  uint64_t v14 = VTParavirtualizationGuestSendMessageToHostAndCopyReplySync(v28, (uint64_t)&v19, &v26);
  if (v14)
  {
    uint64_t v18 = v14;
    uint64_t v16 = 0;
    goto LABEL_39;
  }
  uint64_t SInt32 = VTParavirtualizationMessageGetSInt32((OpaqueCMBlockBuffer *)v26, 744845938, (_DWORD *)&v23 + 1);
  if (SInt32
    || (uint64_t SInt32 = VTParavirtualizationMessageGetUInt32((OpaqueCMBlockBuffer *)v26, 745107046, &v23), SInt32))
  {
    uint64_t v16 = SInt32;
  }
  else
  {
    uint64_t v16 = HIDWORD(v23);
    if (a6) {
      *a6 = v23;
    }
  }
LABEL_27:
  if (v28) {
    CFRelease(v28);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v24) {
    CFRelease(v24);
  }
  return v16;
}

uint64_t reset_DC_pred(uint64_t result)
{
  *(_WORD *)(result + 3184) = 0;
  *(void *)(result + 3176) = 0;
  return result;
}

uint64_t marker_detect(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5, int a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  __int16 v36 = 0;
  __int16 v38 = 0;
  uint64_t v37 = 0;
  long long v6 = *(unsigned __int8 **)a2;
  uint64_t v7 = *(void *)(a2 + 56);
  BOOL v8 = v7 < 0;
  unint64_t v9 = *(void *)a2 + v7;
  if (v8) {
    unint64_t v10 = -1;
  }
  else {
    unint64_t v10 = v9;
  }
  if ((unint64_t)v6 >= *(void *)(a2 + 64))
  {
LABEL_73:
    LOWORD(SOS) = -12909;
    return (__int16)SOS;
  }
  *(void *)a2 = v6 + 1;
  int v12 = *v6;
  __int16 v35 = 0;
  *(_WORD *)(a2 + 48) = 0;
  if (v12 == 218) {
    goto LABEL_6;
  }
  uint64_t v18 = (unsigned char *)(a1 + 4128);
  while (2)
  {
    if ((_BYTE)v12 == 0xFF) {
      goto LABEL_16;
    }
    long long v19 = *(unsigned __int8 **)a2;
    do
    {
      if ((unint64_t)v19 >= v10) {
        break;
      }
      if ((unint64_t)v19 >= *(void *)(a2 + 64)) {
        goto LABEL_73;
      }
      *(void *)a2 = v19 + 1;
      int v12 = *v19++;
    }
    while (v12 != 255);
LABEL_16:
    while (v12 == 255)
    {
      uint64_t v20 = *(unsigned __int8 **)a2;
      if (*(void *)a2 >= v10)
      {
        unsigned __int8 v21 = -2;
        goto LABEL_19;
      }
      if ((unint64_t)v20 >= *(void *)(a2 + 64)) {
        goto LABEL_73;
      }
      *(void *)a2 = v20 + 1;
      LOBYTE(v12) = *v20;
    }
    if (!(_BYTE)v12) {
      goto LABEL_6;
    }
    if ((v12 & 0xFE) == 0xC0)
    {
      int v26 = read_SOF(a1, (unint64_t *)a2, a3, a4, (__int16 *)&v37, &v36, a6);
      __int16 v35 = v26;
      if (v26) {
        goto LABEL_6;
      }
      unsigned char *v18 = 0;
      goto LABEL_49;
    }
    if (v12 > 0xD9u)
    {
      if (v12 == 219)
      {
        int QT = read_QT(a1, (uint64_t (*)(uint64_t, uint64_t, __int16 *))popbytesCallback, a2, a6);
        __int16 v35 = QT;
        if (QT) {
          goto LABEL_6;
        }
        LOBYTE(v12) = -37;
        goto LABEL_49;
      }
      if (v12 == 218)
      {
        __int16 v34 = v36;
        int SOS = read_SOS(a1, (unint64_t *)a2, v36, (uint64_t)&v37, a6);
        __int16 v35 = SOS;
        if (SOS) {
          goto LABEL_6;
        }
        *(_WORD *)(a1 + 3274) = v34;
        return (__int16)SOS;
      }
    }
    else
    {
      if (v12 == 196)
      {
        int SOS = read_HT(a1, (uint64_t (*)(uint64_t, uint64_t, __int16 *))popbytesCallback, a2, *(void *)(a2 + 64) - *(void *)a2);
        __int16 v35 = SOS;
        if (SOS) {
          return (__int16)SOS;
        }
        LOBYTE(v12) = -60;
        goto LABEL_49;
      }
      if (v12 == 194)
      {
        if (*(_DWORD *)(a1 + 4100) == 1785750887)
        {
          int SOS = read_SOF(a1, (unint64_t *)a2, a3, a4, (__int16 *)&v37, &v36, a6);
          __int16 v35 = SOS;
          if (!SOS)
          {
            unsigned char *v18 = 1;
            __int16 v33 = v36;
            *(_DWORD *)(a1 + 4132) = v36;
            *(_WORD *)(a1 + 3274) = v33;
            *(_DWORD *)(a1 + 4184) = (__int16)v37;
            *(_DWORD *)(a1 + 4188) = SWORD1(v37);
            *(_DWORD *)(a1 + 4192) = SWORD2(v37);
            return (__int16)SOS;
          }
        }
LABEL_6:
        LOWORD(SOS) = FigSignalErrorAt();
        return (__int16)SOS;
      }
    }
    if ((v12 & 0xF8) == 0xD0) {
      goto LABEL_49;
    }
    if (v12 != 220)
    {
      if (v12 == 254) {
        goto LABEL_63;
      }
      if (v12 == 221)
      {
        if (*(void *)a2 + 4 >= v10) {
          goto LABEL_6;
        }
        popbytes(a2, 2, &v35);
        LOWORD(SOS) = v35;
        if (!v35)
        {
          unsigned __int16 v28 = popbytes(a2, 2, &v35);
          *(_WORD *)(a2 + 48) = v28;
          LOWORD(SOS) = v35;
          if (!v35)
          {
            *(_DWORD *)(a2 + 52) = v28 + 1;
            LOBYTE(v12) = -35;
            goto LABEL_49;
          }
        }
        return (__int16)SOS;
      }
      if ((v12 & 0xF0) == 0xE0)
      {
LABEL_63:
        if (*(void *)a2 + 2 >= v10) {
          goto LABEL_6;
        }
        int v29 = popbytes(a2, 2, &v35);
        LOWORD(SOS) = v35;
        if (!v35)
        {
          int v30 = v29 - 2;
          if (*(void *)a2 + v30 >= v10) {
            goto LABEL_6;
          }
          while (1)
          {
            int v31 = v30 - 0x4000;
            if (v30 < 0x4000) {
              break;
            }
            if (*(void *)a2 + 0x4000 >= v10) {
              return FigSignalErrorAt();
            }
            popbytes(a2, 0x4000, &v35);
            LOWORD(SOS) = v35;
            int v30 = v31;
            if (v35) {
              return (__int16)SOS;
            }
          }
          popbytes(a2, (__int16)v30, &v35);
          LOWORD(SOS) = v35;
          if (!v35) {
            goto LABEL_49;
          }
        }
        return (__int16)SOS;
      }
      unsigned __int8 v21 = v12 & 0xFE;
LABEL_19:
      if ((v12 + 63) < 0xFu || v21 == 222) {
        goto LABEL_6;
      }
      if ((v12 + 16) > 0xDu)
      {
        if (v12 - 216 >= 2 && v12 != 1 && v12 <= 0xBFu) {
          goto LABEL_6;
        }
      }
      else
      {
        if (*(void *)a2 + 2 >= v10) {
          goto LABEL_6;
        }
        int v22 = popbytes(a2, 2, &v35);
        LOWORD(SOS) = v35;
        if (v35) {
          return (__int16)SOS;
        }
        int v23 = v22 - 2;
        unint64_t v24 = *(void *)a2;
        if (*(void *)a2 + v23 >= v10) {
          goto LABEL_6;
        }
        if (v23)
        {
          unint64_t v25 = *(void *)(a2 + 64);
          while (v24 < v25)
          {
            *(void *)a2 = ++v24;
            if (!--v23) {
              goto LABEL_49;
            }
          }
          goto LABEL_73;
        }
      }
LABEL_49:
      if (v12 != 218) {
        continue;
      }
      goto LABEL_6;
    }
    break;
  }
  if (*(void *)a2 + 4 >= v10) {
    goto LABEL_6;
  }
  popbytes(a2, 2, &v35);
  LOWORD(SOS) = v35;
  if (!v35)
  {
    popbytes(a2, 2, &v35);
    LOWORD(SOS) = v35;
    if (!v35)
    {
      LOBYTE(v12) = -36;
      goto LABEL_49;
    }
  }
  return (__int16)SOS;
}

uint64_t read_SOF(uint64_t a1, unint64_t *a2, _DWORD *a3, _DWORD *a4, __int16 *a5, __int16 *a6, int a7)
{
  __int16 v29 = 0;
  popbytes((uint64_t)a2, 2, &v29);
  __int16 v14 = v29;
  if (!v29)
  {
    uint64_t v15 = (unsigned char *)*a2;
    if (*a2 >= a2[8]) {
      return -12909;
    }
    *a2 = (unint64_t)(v15 + 1);
    if (*v15 != 8) {
      return -12910;
    }
    *a4 = popbytes((uint64_t)a2, 2, &v29);
    __int16 v14 = v29;
    if (!v29)
    {
      *a3 = popbytes((uint64_t)a2, 2, &v29);
      __int16 v14 = v29;
      if (!v29)
      {
        uint64_t v16 = (unsigned __int8 *)*a2;
        if (*a2 < a2[8])
        {
          *a2 = (unint64_t)(v16 + 1);
          int v17 = *v16;
          *a6 = v17;
          if ((v17 - 6) < 0xFFFFFFFB) {
            return -12910;
          }
          if (a7)
          {
            *(_WORD *)(a1 + 3274) = v17;
            LOWORD(v17) = *a6;
          }
          if ((__int16)v17 < 1) {
            return 0;
          }
          uint64_t v18 = 0;
          unsigned __int16 v19 = 0;
          LOWORD(v20) = 0;
          uint64_t v21 = a1 + 3280;
          while (1)
          {
            int v22 = (unsigned __int8 *)*a2;
            unint64_t v23 = a2[8];
            if (*a2 >= v23) {
              break;
            }
            *a2 = (unint64_t)(v22 + 1);
            *a5 = *v22;
            if ((unint64_t)(v22 + 1) >= v23) {
              return -12909;
            }
            *a2 = (unint64_t)(v22 + 2);
            if ((unint64_t)(v22 + 2) >= v23) {
              return -12909;
            }
            unsigned int v24 = v22[1];
            *a2 = (unint64_t)(v22 + 3);
            unint64_t v25 = v22[2];
            if (v25 > 3) {
              return -12909;
            }
            if (v24 > 0x22 || ((1 << v24) & 0x600060000) == 0) {
              return -12909;
            }
            if (a7)
            {
              *(void *)(v21 + 8 * v18) = a1 + 130 * v25 + 3410;
              if (*a6 == 1)
              {
                *(_WORD *)(a1 + 4096) = 17;
                *(unsigned char *)(a1 + 3405) = 17;
                *(unsigned char *)(a1 + 3400) = 1;
              }
              else
              {
                uint64_t v27 = v21 + v18;
                *(unsigned char *)(v27 + 125) = v24;
                *(unsigned char *)(v27 + 120) = (v24 >> 4) * (v24 & 0xF);
                if ((__int16)v20 <= (int)(v24 >> 4)) {
                  unsigned int v20 = v24 >> 4;
                }
                if (v19 <= (v24 & 0xF)) {
                  unsigned __int16 v19 = v24 & 0xF;
                }
                *(_WORD *)(a1 + 4096) = v19 | (16 * v20);
              }
            }
            __int16 v14 = 0;
            ++v18;
            ++a5;
            if (v18 >= *a6) {
              return v14;
            }
          }
          a6 = a5;
        }
        __int16 v14 = -12909;
        *a6 = -12909;
      }
    }
  }
  return v14;
}

uint64_t read_SOS(uint64_t a1, unint64_t *a2, int a3, uint64_t a4, int a5)
{
  __int16 v30 = 0;
  popbytes((uint64_t)a2, 2, &v30);
  __int16 v10 = v30;
  if (!v30)
  {
    CMBlockBufferRef v11 = (unsigned __int8 *)*a2;
    unint64_t v12 = a2[8];
    if (*a2 >= v12) {
      return -12909;
    }
    CFTypeRef v13 = v11 + 1;
    *a2 = (unint64_t)(v11 + 1);
    int v14 = *v11;
    if (v14 != a3) {
      return 53;
    }
    if (v14)
    {
      __int16 v15 = 0;
      while (1)
      {
        uint64_t v16 = (unsigned __int8 *)*a2;
        unint64_t v17 = a2[8];
        if (*a2 >= v17) {
          return -12909;
        }
        *a2 = (unint64_t)(v16 + 1);
        if ((unint64_t)(v16 + 1) >= v17) {
          return -12909;
        }
        int v18 = *v16;
        *a2 = (unint64_t)(v16 + 2);
        if (v18 != *(__int16 *)(a4 + 2 * v15)) {
          return 54;
        }
        unint64_t v19 = v16[1];
        if (v19 > 0x3F || (v19 & 0xC) != 0) {
          return 33;
        }
        if (a5)
        {
          unint64_t v21 = v19 >> 4;
          unsigned int v22 = v19 & 0xF;
          uint64_t v23 = a1 + 24 * v21;
          uint64_t v24 = a1 + 8 * v15;
          *(void *)(v24 + 3320) = v23 + 3936;
          *(void *)(v24 + 3360) = a1 + 24 * v22;
          if (!*(void *)(v23 + 3944) || !*(void *)(a1 + 24 * v22 + 8)) {
            return 40;
          }
        }
        if (v14 <= ++v15)
        {
          CFTypeRef v13 = (unsigned char *)*a2;
          unint64_t v12 = a2[8];
          break;
        }
      }
    }
    if ((unint64_t)v13 >= v12) {
      return -12909;
    }
    unint64_t v25 = v13 + 1;
    *a2 = (unint64_t)(v13 + 1);
    if (*v13)
    {
      if ((unint64_t)v25 < v12)
      {
        *a2 = (unint64_t)(v13 + 2);
        return 18;
      }
      return -12909;
    }
    if ((unint64_t)v25 >= v12) {
      return -12909;
    }
    *a2 = (unint64_t)(v13 + 2);
    if ((unint64_t)(v13 + 2) >= v12) {
      return -12909;
    }
    int v26 = v13[1];
    *a2 = (unint64_t)(v13 + 3);
    if (v13[2]) {
      __int16 v27 = 20;
    }
    else {
      __int16 v27 = 0;
    }
    if (v26) {
      BOOL v28 = v26 == 63;
    }
    else {
      BOOL v28 = 1;
    }
    if (v28) {
      return v27;
    }
    else {
      return 19;
    }
  }
  return v10;
}

uint64_t read_QT(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, __int16 *), uint64_t a3, int a4)
{
  __int16 v22 = 0;
  int v8 = a2(a3, 2, &v22);
  __int16 v9 = v22;
  if (!v22)
  {
    int v11 = v8 - 2;
    if (v8 == 2)
    {
      return 0;
    }
    else
    {
LABEL_4:
      int v12 = a2(a3, 1, &v22);
      __int16 v9 = v22;
      if (!v22)
      {
        int v13 = v12 >> 4;
        if (v12 < 0x10 || v13 == 1)
        {
          if ((v12 & 0xFu) > 3)
          {
            return 201;
          }
          else
          {
            int v14 = (int16x8_t *)(a1 + 130 * (v12 & 0xF) + 3410);
            if (v13 == 1)
            {
              v11 -= 129;
              int v15 = 64;
              uint64_t v16 = tables;
              while (1)
              {
                uint64_t v17 = a2(a3, 2, &v22);
                __int16 v9 = v22;
                if (v22) {
                  break;
                }
                if (a4)
                {
                  unsigned int v18 = *v16++;
                  *(__int16 *)((char *)v14->i16 + v18) = v17;
                }
                if (!--v15) {
                  goto LABEL_20;
                }
              }
            }
            else
            {
              v11 -= 65;
              int v19 = 64;
              unsigned int v20 = tables;
              while (1)
              {
                uint64_t v17 = a2(a3, 1, &v22);
                __int16 v9 = v22;
                if (v22) {
                  break;
                }
                if (a4)
                {
                  unsigned int v21 = *v20++;
                  *(__int16 *)((char *)v14->i16 + v21) = v17;
                }
                if (!--v19)
                {
LABEL_20:
                  if (a4) {
                    scale_QT(v17, v14);
                  }
                  __int16 v9 = 0;
                  if (v11) {
                    goto LABEL_4;
                  }
                  return v9;
                }
              }
            }
          }
        }
        else
        {
          return 200;
        }
      }
    }
  }
  return v9;
}

uint64_t read_HT(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, __int16 *), uint64_t a3, unint64_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  __int16 v56 = 0;
  v58[0] = 0;
  int v8 = a2(a3, 2, &v56);
  if (v8 > a4) {
    return -12909;
  }
  __int16 v9 = v56;
  if (v56) {
    return v9;
  }
  int v11 = v8 - 2;
  if (v8 == 2) {
    return 0;
  }
  while (1)
  {
    int v12 = a2(a3, 1, &v56);
    __int16 v9 = v56;
    if (v56) {
      return v9;
    }
    __int16 v13 = v12;
    unsigned int v14 = v12 << 16;
    if ((v12 & 0xFFFC) != 0x10 && v14 > 0x20000 && v14 != 196608) {
      return 300;
    }
    if (v11 < 17) {
      return -12909;
    }
    signed int v15 = 0;
    int v54 = v12 << 16;
    unsigned int v55 = (__int16)v12;
    for (uint64_t i = 1; i != 17; ++i)
    {
      unsigned __int8 v17 = a2(a3, 1, &v56);
      v58[i] = v17;
      __int16 v9 = v56;
      if (v56) {
        return v9;
      }
      v15 += v17;
    }
    if (v15 > 0x100 || v15 >= v11 - 16) {
      return -12909;
    }
    if (v15)
    {
      int v19 = 0;
      unsigned int v20 = v57;
      v11 -= 17;
      while (1)
      {
        *unsigned int v20 = a2(a3, 1, &v56);
        __int16 v9 = v56;
        if (v56) {
          return v9;
        }
        ++v20;
        --v11;
        if (v15 <= (__int16)++v19) {
          goto LABEL_25;
        }
      }
    }
    v11 -= 17;
LABEL_25:
    unsigned int v21 = v55;
    if (v55 - 16 >= 4) {
      break;
    }
    int v22 = (__int16)v15;
    if (!matchesRememberedHT(a1, v55, (uint64_t)v58, v57, (__int16)v15))
    {
      uint64_t v31 = 0;
      unsigned int v32 = v13 & 0xF;
      do
      {
        if (v58[v31 + 1] != tables[v31 + 201]) {
          goto LABEL_55;
        }
        ++v31;
      }
      while (v31 != 16);
      if (v15)
      {
        int v33 = 0;
        __int16 v34 = v57;
        __int16 v35 = &byte_193E7F02A;
        while (*v34 == *v35)
        {
          ++v35;
          ++v34;
          if (v15 <= (__int16)++v33) {
            goto LABEL_45;
          }
        }
LABEL_55:
        for (uint64_t j = 0; j != 16; ++j)
        {
          if (v58[j + 1] != tables[j + 218]) {
            goto LABEL_66;
          }
        }
        if (v15)
        {
          int v46 = 0;
          long long v47 = v57;
          uint64_t v48 = &byte_193E7F0CC;
          while (*v47 == *v48)
          {
            ++v48;
            ++v47;
            if (v15 <= (__int16)++v46) {
              goto LABEL_62;
            }
          }
LABEL_66:
          DisposeDecodeTable(a1 + 24 * v32);
          if (MakeDecodeTable((_WORD *)0xC, (uint64_t)v58, (uint64_t)v57, (__int16 *)(a1 + 24 * v32)))
          {
            uint64_t v53 = a1 + 24 * v32;
            goto LABEL_76;
          }
          goto LABEL_67;
        }
LABEL_62:
        uint64_t v36 = a1 + 24 * v32;
        DisposeDecodeTable(v36);
        uint64_t v49 = *(void *)(a1 + 3168);
        uint64_t v38 = *(void *)(v49 + 88);
        long long v39 = *(_OWORD *)(v49 + 72);
      }
      else
      {
LABEL_45:
        uint64_t v36 = a1 + 24 * v32;
        DisposeDecodeTable(v36);
        uint64_t v37 = *(void *)(a1 + 3168);
        uint64_t v38 = *(void *)(v37 + 64);
        long long v39 = *(_OWORD *)(v37 + 48);
      }
      *(_OWORD *)uint64_t v36 = v39;
      *(void *)(v36 + 16) = v38;
LABEL_67:
      int v52 = v32 | 0x10;
      uint64_t v51 = a1;
LABEL_68:
      if (rememberHT(v51, v52, (uint64_t)v58, v57, v22)) {
        return -12904;
      }
    }
LABEL_69:
    if (!v11) {
      return v56;
    }
  }
  if (v55 > 3) {
    return -1;
  }
  int v22 = (__int16)v15;
  if (matchesRememberedHT(a1, v55, (uint64_t)v58, v57, (__int16)v15)) {
    goto LABEL_69;
  }
  for (uint64_t k = 0; k != 16; ++k)
  {
    if (v58[k + 1] != tables[k + 167]) {
      goto LABEL_46;
    }
  }
  if (!v15)
  {
LABEL_35:
    if ((v54 | 0xFFFFu) <= 0x4FFFE)
    {
      uint64_t v27 = a1 + 24 * v13;
      DisposeDecodeTable(v27 + 3936);
      BOOL v28 = *(long long **)(a1 + 3168);
      long long v29 = *v28;
      uint64_t v30 = *((void *)v28 + 2);
LABEL_54:
      *(void *)(v27 + 3952) = v30;
      *(_OWORD *)(v27 + 3936) = v29;
      unsigned int v21 = v55;
    }
    goto LABEL_65;
  }
  int v24 = 0;
  int v25 = 0;
  int v26 = v57;
  while (v24 == *v26)
  {
    ++v26;
    int v24 = (__int16)++v25;
    if (v15 <= (__int16)v25) {
      goto LABEL_35;
    }
  }
LABEL_46:
  uint64_t v40 = 0;
  while (v58[v40 + 1] == tables[v40 + 184])
  {
    if (++v40 == 16)
    {
      if (!v15)
      {
LABEL_53:
        uint64_t v27 = a1 + 24 * v13;
        DisposeDecodeTable(v27 + 3936);
        uint64_t v44 = *(void *)(a1 + 3168);
        long long v29 = *(_OWORD *)(v44 + 24);
        uint64_t v30 = *(void *)(v44 + 40);
        goto LABEL_54;
      }
      int v41 = 0;
      int v42 = 0;
      uint64_t v43 = v57;
      while (v41 == *v43)
      {
        ++v43;
        int v41 = (__int16)++v42;
        if (v15 <= (__int16)v42) {
          goto LABEL_53;
        }
      }
      break;
    }
  }
  uint64_t v50 = (__int16 *)(a1 + 24 * v13 + 3936);
  DisposeDecodeTable((uint64_t)v50);
  if (!MakeDecodeTable((_WORD *)5, (uint64_t)v58, (uint64_t)v57, v50))
  {
LABEL_65:
    uint64_t v51 = a1;
    int v52 = v21;
    goto LABEL_68;
  }
  uint64_t v53 = (uint64_t)v50;
LABEL_76:
  DisposeDecodeTable(v53);
  return -12904;
}

uint64_t consume_progressive_mode_markers(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)a2;
  uint64_t v3 = *(void *)(a2 + 56);
  if (v3 < 0) {
    unint64_t v4 = -1;
  }
  else {
    unint64_t v4 = *(void *)a2 + v3;
  }
  if ((unint64_t)v2 >= *(void *)(a2 + 64)) {
    goto LABEL_6;
  }
  *(void *)a2 = v2 + 1;
  int v6 = *v2;
  __int16 v48 = 0;
  *(_WORD *)(a2 + 48) = 0;
  if (v6 == 217) {
    goto LABEL_6;
  }
  __int16 v10 = (unsigned char *)(a1 + 4408);
  uint64_t v11 = a1 + 4344;
  while (2)
  {
    int v12 = *(unsigned __int8 **)a2;
    if (*(void *)a2 >= v4) {
      goto LABEL_6;
    }
    if ((_BYTE)v6 == 0xFF)
    {
      unsigned int v14 = *(unsigned __int8 **)a2;
LABEL_20:
      uint64_t v16 = v14;
      while (v6 == 255)
      {
        if ((unint64_t)v16 >= v4) {
          goto LABEL_92;
        }
        if ((unint64_t)v16 >= *(void *)(a2 + 64)) {
          goto LABEL_6;
        }
        *(void *)a2 = v16 + 1;
        LOBYTE(v6) = *v16;
        ++v14;
        ++v16;
      }
      if (v6 > 0xC3u)
      {
        switch(v6)
        {
          case 0xC4u:
            int HT = read_HT(a1, (uint64_t (*)(uint64_t, uint64_t, __int16 *))popbytesCallback, a2, *(void *)(a2 + 64) - (void)v14);
            __int16 v48 = HT;
            if (HT) {
              return (__int16)HT;
            }
            LOBYTE(v6) = -60;
            goto LABEL_105;
          case 0xDAu:
            __int16 v49 = 0;
            popbytes(a2, 2, &v49);
            if (v49) {
              goto LABEL_6;
            }
            unsigned int v18 = *(unsigned __int8 **)a2;
            unint64_t v19 = *(void *)(a2 + 64);
            if (*(void *)a2 >= v19) {
              goto LABEL_6;
            }
            unsigned int v20 = v18 + 1;
            *(void *)a2 = v18 + 1;
            signed int v21 = *v18;
            *(_DWORD *)(a1 + 4392) = v21;
            if (*(_DWORD *)(a1 + 4132) < v21) {
              goto LABEL_6;
            }
            if (v21)
            {
              __int16 v22 = 0;
              while (1)
              {
                uint64_t v23 = *(unsigned __int8 **)a2;
                unint64_t v24 = *(void *)(a2 + 64);
                if (*(void *)a2 >= v24) {
                  goto LABEL_6;
                }
                *(void *)a2 = v23 + 1;
                if ((unint64_t)(v23 + 1) >= v24) {
                  goto LABEL_6;
                }
                int v25 = *v23;
                *(void *)a2 = v23 + 2;
                int v26 = *(_DWORD *)(a1 + 4132);
                if (v26 < 1) {
                  goto LABEL_6;
                }
                unint64_t v27 = v23[1];
                if (*(_DWORD *)(a1 + 4184) != v25)
                {
                  __int16 v30 = 0;
                  while (v26 > ++v30)
                  {
                    int v28 = v30;
                    if (*(_DWORD *)(a1 + 4 * v30 + 4184) == v25)
                    {
                      uint64_t v29 = v30;
                      goto LABEL_50;
                    }
                  }
                  goto LABEL_6;
                }
                int v28 = 0;
                uint64_t v29 = 0;
LABEL_50:
                *(_DWORD *)(a1 + 4 * v22 + 4396) = v28;
                if ((v27 & 0xF) > 3) {
                  goto LABEL_6;
                }
                uint64_t v31 = a1 + 8 * v29;
                *(void *)(v31 + 4296) = a1 + 24 * (v27 & 0xF);
                if (v27 > 0x3F) {
                  goto LABEL_6;
                }
                *(void *)(v31 + 4320) = a1 + 24 * (v27 >> 4) + 3936;
                if (v21 <= ++v22)
                {
                  unsigned int v20 = *(unsigned __int8 **)a2;
                  unint64_t v19 = *(void *)(a2 + 64);
                  break;
                }
              }
            }
            if ((unint64_t)v20 >= v19)
            {
              *__int16 v10 = -109;
              goto LABEL_6;
            }
            *(void *)a2 = v20 + 1;
            unsigned int v32 = *v20;
            *__int16 v10 = v32;
            if ((unint64_t)(v20 + 1) >= v19)
            {
              v10[1] = -109;
              goto LABEL_6;
            }
            *(void *)a2 = v20 + 2;
            unsigned int v33 = v20[1];
            v10[1] = v33;
            if (v32 > v33 || v33 > 0x3F || (unint64_t)(v20 + 2) >= v19) {
              goto LABEL_6;
            }
            *(void *)a2 = v20 + 3;
            unsigned int v34 = v20[2];
            v10[2] = v34 >> 4;
            v10[3] = v34 & 0xF;
            if (v21)
            {
              __int16 v35 = 0;
              while (1)
              {
                int v36 = *(_DWORD *)(a1 + 4 * v35 + 4396);
                if (!v32 && !*(void *)(*(void *)(a1 + 8 * (__int16)v36 + 4320) + 8)) {
                  goto LABEL_6;
                }
                if (v33 && !*(void *)(*(void *)(a1 + 8 * (__int16)v36 + 4296) + 8)) {
                  goto LABEL_6;
                }
                if (v21 <= ++v35)
                {
                  if (*(void *)(a1 + 3280)
                    && (v21 < 2 || *(void *)(a1 + 3288) && *(void *)(a1 + 3296)))
                  {
                    goto LABEL_79;
                  }
                  goto LABEL_6;
                }
              }
            }
            if (!*(void *)(a1 + 3280)) {
              goto LABEL_6;
            }
LABEL_79:
            *(_DWORD *)(v11 + 8) = 0;
            *(void *)uint64_t v11 = 0;
            int v38 = DecodeProgressiveScan(a1, a2);
            __int16 v48 = v38;
            if (v38) {
              goto LABEL_6;
            }
            long long v39 = *(unsigned __int8 **)a2;
            if (*(void *)a2 >= *(void *)(a2 + 64)) {
              goto LABEL_6;
            }
            *(void *)a2 = v39 + 1;
            LOBYTE(v6) = *v39;
            goto LABEL_105;
          case 0xDBu:
            int QT = read_QT(a1, (uint64_t (*)(uint64_t, uint64_t, __int16 *))popbytesCallback, a2, 1);
            __int16 v48 = QT;
            if (QT) {
              goto LABEL_6;
            }
            LOBYTE(v6) = -37;
            goto LABEL_105;
        }
      }
      else
      {
        LOWORD(HT) = -12909;
        if (v6 - 192 < 3 || !(_BYTE)v6) {
          return (__int16)HT;
        }
      }
      if ((v6 & 0xF8) != 0xD0)
      {
        if (v6 == 220)
        {
          popbytes(a2, 2, &v48);
          LOWORD(HT) = v48;
          if (v48) {
            return (__int16)HT;
          }
          popbytes(a2, 2, &v48);
          LOWORD(HT) = v48;
          if (v48) {
            return (__int16)HT;
          }
          LOBYTE(v6) = -36;
          goto LABEL_105;
        }
        if (v6 != 254)
        {
          if (v6 == 221)
          {
            popbytes(a2, 2, &v48);
            LOWORD(HT) = v48;
            if (v48) {
              return (__int16)HT;
            }
            unsigned __int16 v37 = popbytes(a2, 2, &v48);
            *(_WORD *)(a2 + 48) = v37;
            LOWORD(HT) = v48;
            if (v48) {
              return (__int16)HT;
            }
            *(_DWORD *)(a2 + 52) = v37 + 1;
            LOBYTE(v6) = -35;
            goto LABEL_105;
          }
          if ((v6 & 0xF0) != 0xE0)
          {
LABEL_92:
            if ((v6 + 63) < 0xFu || (v6 & 0xFE) == 0xDE) {
              goto LABEL_6;
            }
            if ((v6 + 16) > 0xDu)
            {
              if (v6 != 1)
              {
                if (v6 == 216) {
                  goto LABEL_6;
                }
                if (v6 == 217)
                {
                  LOWORD(HT) = 0;
                  return (__int16)HT;
                }
                if (v6 <= 0xBFu) {
                  goto LABEL_6;
                }
              }
            }
            else
            {
              int v44 = popbytes(a2, 2, &v48);
              LOWORD(HT) = v48;
              if (v48) {
                return (__int16)HT;
              }
              int v45 = v44 - 2;
              if (v45)
              {
                unint64_t v46 = *(void *)(a2 + 64);
                long long v47 = *(unsigned __int8 **)a2;
                while ((unint64_t)v47 < v46)
                {
                  *(void *)a2 = ++v47;
                  if (!--v45) {
                    goto LABEL_105;
                  }
                }
                goto LABEL_6;
              }
            }
            goto LABEL_105;
          }
        }
        int v40 = popbytes(a2, 2, &v48);
        LOWORD(HT) = v48;
        if (v48) {
          return (__int16)HT;
        }
        int v41 = v40 - 2;
        if (v41)
        {
          unint64_t v42 = *(void *)(a2 + 64);
          uint64_t v43 = *(unsigned __int8 **)a2;
          while ((unint64_t)v43 < v42)
          {
            *(void *)a2 = ++v43;
            if (!--v41) {
              goto LABEL_105;
            }
          }
          goto LABEL_6;
        }
      }
LABEL_105:
      if (v6 != 217) {
        continue;
      }
      goto LABEL_6;
    }
    break;
  }
  unint64_t v13 = *(void *)(a2 + 64);
  while ((unint64_t)v12 < v13)
  {
    unsigned int v14 = v12 + 1;
    *(void *)a2 = v12 + 1;
    int v6 = *v12;
    BOOL v15 = v6 == 255 || (unint64_t)v14 >= v4;
    ++v12;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_6:
  LOWORD(HT) = -12909;
  return (__int16)HT;
}

void scale_QT(uint64_t a1, int16x8_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v17[0] = xmmword_193E7EF00;
  v17[1] = xmmword_193E7EF10;
  v17[2] = xmmword_193E7EF20;
  v17[3] = xmmword_193E7EF30;
  int v3 = 1;
  unint64_t v4 = v18;
  long long v5 = a2;
  do
  {
    unint64_t v6 = 0;
    double v7 = 262144.0;
    double v8 = *((double *)v17 + v2) * 4.0 * 262144.0;
    do
    {
      LOWORD(v7) = v5[v6 / 8].i16[0];
      double v7 = v8 * *(double *)((char *)v17 + v6) * (double)*(unint64_t *)&v7;
      if (v3 <= (int)v7) {
        int v3 = (int)v7;
      }
      *(_DWORD *)&v4[4 * v6] = (int)v7;
      v6 += 8;
    }
    while (v6 != 64);
    ++v2;
    v4 += 4;
    long long v5 = (int16x8_t *)((char *)v5 + 2);
  }
  while (v2 != 8);
  int v9 = -1;
  do
  {
    int v10 = v9 + 1;
    unsigned int v11 = 1 << (v9 + 1);
    int v12 = (int)(v11 + v3) >> (v9++ + 2);
  }
  while (v12 >= 0x10000);
  uint64_t v13 = 0;
  int32x4_t v14 = vdupq_n_s32(v11);
  int32x4_t v15 = vnegq_s32(vdupq_n_s32(v10 + 1));
  uint64_t v16 = a2;
  do
  {
    *v16++ = vuzp1q_s16((int16x8_t)vshlq_s32(vaddq_s32(*(int32x4_t *)&v18[v13], v14), v15), (int16x8_t)vshlq_s32(vaddq_s32(*(int32x4_t *)&v18[v13 + 16], v14), v15));
    v13 += 32;
  }
  while (v13 != 256);
  a2[8].i16[0] = 12 - v10;
}

uint64_t matchesRememberedHT(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, int a5)
{
  long long v5 = (uint64_t *)(a1 + 8 * a2 + 4032);
  if (a2 >= 16) {
    long long v5 = (uint64_t *)(a1 + 8 * (a2 & 0xF) + 4064);
  }
  uint64_t v6 = *v5;
  if (v6)
  {
    uint64_t v7 = 0;
    while (*(unsigned __int8 *)(v6 + v7) == *(unsigned __int8 *)(a3 + 1 + v7))
    {
      if (++v7 == 16)
      {
        if (a5 < 1) {
          return 1;
        }
        uint64_t v8 = (unsigned __int16)a5;
        int v9 = (unsigned __int8 *)(v6 + 16);
        while (1)
        {
          int v11 = *v9++;
          int v10 = v11;
          int v12 = *a4++;
          if (v10 != v12) {
            break;
          }
          if (!--v8) {
            return 1;
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t rememberHT(uint64_t a1, int a2, uint64_t a3, const void *a4, int a5)
{
  size_t v9 = a5;
  int v10 = malloc_type_malloc(a5 + 16, 0xAB6DF505uLL);
  int v11 = v10;
  if (v10)
  {
    *int v10 = *(_OWORD *)(a3 + 1);
    memmove(v10 + 1, a4, v9);
  }
  if (a2 > 15)
  {
    int v12 = (void **)(a1 + 8 * (a2 & 0xF) + 4064);
    uint64_t v13 = *v12;
    if (!*v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int v12 = (void **)(a1 + 8 * a2 + 4032);
  uint64_t v13 = *v12;
  if (*v12) {
LABEL_7:
  }
    free(v13);
LABEL_8:
  *int v12 = v11;
  if (v11) {
    return 0;
  }
  else {
    return 4294954392;
  }
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, float16x8_t a8)
{
  uint64_t v14 = *(void *)((char *)result + 28);
  unint64_t v15 = 2 * *(unsigned __int8 *)result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (2 * v17 != 2 * v16)
  {
    unint64_t v18 = 0;
    size_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    uint64_t v21 = *(void *)((char *)result + 44) + 2 * v16;
    unint64_t v22 = 2 * v17 - 2 * v16;
    uint64_t v23 = result[14];
    uint64_t v24 = result[19];
    int v25 = (void *)result[7];
    int v26 = (uint64_t *)result[8];
    unint64_t v27 = (uint64_t *)result[16];
    uint64_t v28 = (uint64_t *)result[17];
    uint64_t v29 = *v26;
    uint64_t v30 = v26[1];
    uint64_t v31 = v26[2];
    uint64_t v33 = *v28;
    uint64_t v32 = v28[1];
    uint64_t v34 = result[15] + 2 * (result[13] * a2 / v15);
    uint64_t v357 = v31;
    uint64_t v35 = (char *)(v25[2] + v31 * v21 + v20);
    uint64_t v358 = v28[2];
    uint64_t v359 = v27[2];
    uint64_t v360 = v25[2];
    LODWORD(v28) = *(unsigned __int16 *)(v24 + 140);
    unsigned int v36 = *(unsigned __int16 *)(v24 + 142);
    LODWORD(a7) = *(_DWORD *)(v24 + 8);
    unsigned int v37 = *(unsigned __int16 *)(v24 + 144);
    unsigned int v38 = *(unsigned __int16 *)(v24 + 146);
    float v39 = (float)v28;
    *(short float *)v10.i16 = (short float)v28;
    LODWORD(v28) = *(unsigned __int16 *)(v24 + 148);
    _S26 = *(_DWORD *)(v24 + 44);
    v40.i32[0] = *(_DWORD *)(v24 + 48);
    v42.i32[0] = *(_DWORD *)(v24 + 52);
    float v43 = (float)v36;
    short float v44 = (short float)v36;
    v40.i32[1] = *(_DWORD *)(v24 + 60);
    v42.i32[1] = *(_DWORD *)(v24 + 64);
    unsigned int v45 = *(unsigned __int16 *)(v24 + 150);
    float v46 = (float)v37;
    *(short float *)v11.i16 = (short float)v37;
    unsigned int v47 = *(unsigned __int16 *)(v24 + 152);
    _S27 = *(_DWORD *)(v24 + 36);
    _S11 = *(_DWORD *)(v24 + 40);
    float v410 = (float)v38;
    *(short float *)v12.i16 = (short float)v38;
    uint64_t v50 = v24 + 16548;
    uint64_t v51 = (char *)(v359 + v358 * v34 + v23);
    float v387 = (float)v28;
    *(short float *)v13.i16 = (short float)v28;
    *(float *)&a3 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    _S30 = *(float *)&a3 * *(float *)v24;
    _S31 = *(float *)&a3 * *(float *)&a7;
    _S28 = *(float *)&a3 * *(float *)(v24 + 16);
    _S29 = *(float *)&a3 * *(float *)(v24 + 20);
    _S10 = *(float *)&a3 * *(float *)(v24 + 28);
    float v419 = (float)v45;
    *(float *)&a3 = (float)v47;
    float v406 = (float)v47;
    int16x8_t v57 = vdupq_lane_s16(v10, 0);
    *(short float *)&a3 = -v44;
    float16x8_t v418 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    __asm { FMOV            V0.2S, #0.25 }
    *(float32x2_t *)a8.i8 = vmul_f32(v40, _D0);
    float16x8_t v404 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)a8), 0);
    *(float32x2_t *)v8.f32 = vmul_f32(v42, _D0);
    int32x4_t v63 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v8), 0);
    float16x8_t v403 = (float16x8_t)v63;
    *(short float *)v63.i16 = (short float)v45;
    *(short float *)&a7 = (short float)v47;
    if (v34 >= 0) {
      uint64_t v64 = v34;
    }
    else {
      uint64_t v64 = v34 + 1;
    }
    uint64_t v65 = *v27;
    uint64_t v361 = v32;
    uint64_t v66 = v27[1] + v32 * (v64 >> 1);
    uint64_t v67 = v24 + 164;
    v9.i32[1] = *(_DWORD *)(v24 + 68);
    v9.i32[0] = *(_DWORD *)(v24 + 56);
    *(float32x2_t *)v9.f32 = vmul_f32(*(float32x2_t *)v9.f32, _D0);
    uint64_t v68 = v65 + v33 * v34;
    uint64_t result = (void *)(v24 + 32932);
    float16x8_t v401 = (float16x8_t)vdupq_lane_s16(v11, 0);
    float16x8_t v402 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    float16x8_t v399 = (float16x8_t)vdupq_lane_s16(v13, 0);
    float16x8_t v400 = (float16x8_t)vdupq_lane_s16(v12, 0);
    float16x8_t v397 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    float16x8_t v398 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    int16x8_t v69 = (unsigned char *)(v66 + v23);
    int16x8_t v70 = (int8x8_t *)(v68 + v23);
    int32x4_t v73 = v25;
    uint64_t v71 = *v25;
    uint64_t v72 = v73[1];
    _ZF = v72 == 0;
    uint64_t v74 = v72 + v30 * v21 + v20;
    if (_ZF) {
      uint64_t v75 = 0;
    }
    else {
      uint64_t v75 = v74;
    }
    int16x8_t v76 = (int8x8_t *)(v71 + v29 * v21 + v20);
    _S7 = *(float *)(v24 + 108);
    _S9 = *(float *)(v24 + 112);
    __asm
    {
      FCVT            H13, S30
      FCVT            H14, S10
    }
    short float v417 = _H14;
    __asm { FCVT            H14, S28 }
    short float v416 = _H14;
    __asm { FCVT            H14, S29 }
    short float v415 = _H14;
    __asm { FCVT            H14, S31 }
    short float v414 = _H14;
    float v412 = *(float *)(v24 + 36);
    __asm { FCVT            H14, S27 }
    short float v384 = _H14;
    float v411 = *(float *)(v24 + 40);
    __asm { FCVT            H14, S11 }
    short float v383 = _H14;
    float v413 = *(float *)(v24 + 44);
    __asm { FCVT            H14, S26 }
    short float v382 = _H14;
    __asm { FCVT            H14, S7 }
    short float v381 = _H14;
    __asm { FCVT            H14, S9 }
    short float v380 = _H14;
    float v364 = *(float *)(v24 + 120);
    float v365 = *(float *)(v24 + 116);
    __asm
    {
      FCVT            H14, S24
      FCVT            H11, S25
    }
    short float v378 = _H11;
    short float v379 = _H14;
    float v396 = *(float *)(v24 + 72);
    __asm { FCVT            H0, S0 }
    short float v377 = _H0;
    float v395 = *(float *)(v24 + 76);
    __asm { FCVT            H0, S1 }
    short float v376 = _H0;
    float v394 = *(float *)(v24 + 80);
    __asm { FCVT            H0, S4 }
    short float v375 = _H0;
    float v393 = *(float *)(v24 + 84);
    __asm { FCVT            H0, S19 }
    short float v374 = _H0;
    float v392 = *(float *)(v24 + 88);
    __asm { FCVT            H0, S20 }
    short float v373 = _H0;
    float v391 = *(float *)(v24 + 92);
    __asm { FCVT            H0, S21 }
    short float v372 = _H0;
    float v390 = *(float *)(v24 + 96);
    __asm { FCVT            H0, S22 }
    short float v371 = _H0;
    float v389 = *(float *)(v24 + 100);
    __asm { FCVT            H0, S6 }
    short float v370 = _H0;
    float v388 = *(float *)(v24 + 104);
    __asm { FCVT            H0, S23 }
    short float v369 = _H0;
    unsigned int v100 = a8.u32[1];
    float v405 = *(float *)a8.i32;
    uint64_t v101 = v8.i64[0];
    float v368 = *(float *)&a8.i32[1];
    v102.i32[0] = v9.i32[1];
    uint64_t v362 = v30;
    uint64_t v363 = v29;
    float v409 = _S31;
    float v408 = _S28;
    float v407 = _S29;
    float v422 = _S10;
    float16x8_t v366 = (float16x8_t)v57;
    float v421 = v43;
    short float v385 = _H13;
    float v420 = v39;
    float v386 = _S30;
    float v367 = _S7;
    do
    {
      uint64_t v103 = (char *)v76 + v29;
      uint64_t v104 = v75 + v30;
      float32x4_t v105 = (char *)v70 + v33;
      if ((int)v19 < 8)
      {
        size_t v210 = 0;
        float v209 = v69;
        uint32x4_t v109 = (int8x8_t *)((char *)v70 + v33);
        uint32x4_t v108 = (unsigned char *)(v75 + v30);
        float32x4_t v107 = (int8x8_t *)((char *)v76 + v29);
      }
      else
      {
        uint64_t v106 = 0;
        float32x4_t v107 = (int8x8_t *)((char *)v76 + v29);
        uint32x4_t v108 = (unsigned char *)(v75 + v30);
        uint32x4_t v109 = (int8x8_t *)((char *)v70 + v33);
        do
        {
          float16x8_t v110 = 0uLL;
          if (v75)
          {
            int8x8x2_t v423 = vld2_s8((const char *)v75);
            v75 += 16;
            *(int8x8_t *)v111.i8 = vzip1_s8(v423.val[0], 0);
            v111.u64[1] = (unint64_t)vzip2_s8(v423.val[0], 0);
            *(int8x8_t *)v112.i8 = vzip1_s8(v423.val[1], 0);
            v112.u64[1] = (unint64_t)vzip2_s8(v423.val[1], 0);
            float16x8_t v113 = vaddq_f16(v418, vcvtq_f16_u16(v111));
            float16x8_t v114 = vaddq_f16(v418, vcvtq_f16_u16(v112));
            float16x8_t v115 = vmulq_n_f16(v114, v414);
            float16x8_t v116 = vmlaq_n_f16(vmulq_n_f16(v113, v416), v114, v415);
            float16x8_t v117 = vmulq_n_f16(v113, v417);
          }
          else
          {
            float16x8_t v117 = 0uLL;
            float16x8_t v116 = 0uLL;
            float16x8_t v115 = 0uLL;
          }
          int8x8_t v118 = *v76++;
          *(int8x8_t *)v119.i8 = vzip1_s8(v118, 0);
          v119.u64[1] = (unint64_t)vzip2_s8(v118, 0);
          float16x8_t v120 = vsubq_f16(vcvtq_f16_u16(v119), v366);
          float16x8_t v121 = vmlaq_n_f16(v115, v120, _H13);
          float16x8_t v122 = vmlaq_n_f16(v116, v120, _H13);
          float16x8_t v123 = vmlaq_n_f16(v117, v120, _H13);
          if (v108)
          {
            int8x8x2_t v424 = vld2_s8(v108);
            v108 += 16;
            *(int8x8_t *)v124.i8 = vzip1_s8(v424.val[0], 0);
            v124.u64[1] = (unint64_t)vzip2_s8(v424.val[0], 0);
            *(int8x8_t *)v125.i8 = vzip1_s8(v424.val[1], 0);
            v125.u64[1] = (unint64_t)vzip2_s8(v424.val[1], 0);
            float16x8_t v126 = vaddq_f16(v418, vcvtq_f16_u16(v124));
            float16x8_t v127 = vaddq_f16(v418, vcvtq_f16_u16(v125));
            float16x8_t v128 = vmulq_n_f16(v127, v414);
            float16x8_t v129 = vmlaq_n_f16(vmulq_n_f16(v126, v416), v127, v415);
            float16x8_t v110 = vmulq_n_f16(v126, v417);
          }
          else
          {
            float16x8_t v129 = 0uLL;
            float16x8_t v128 = 0uLL;
          }
          int8x8_t v130 = *v107++;
          *(int8x8_t *)v131.i8 = vzip1_s8(v130, 0);
          v131.u64[1] = (unint64_t)vzip2_s8(v130, 0);
          float16x8_t v132 = vsubq_f16(vcvtq_f16_u16(v131), v366);
          float16x8_t v133 = vmlaq_n_f16(v128, v132, _H13);
          float16x8_t v134 = vmlaq_n_f16(v129, v132, _H13);
          float16x8_t v135 = vmlaq_n_f16(v110, v132, _H13);
          v136.i64[0] = 0x9000900090009000;
          v136.i64[1] = 0x9000900090009000;
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v136));
          uint32x4_t v138 = vmovl_high_u16(v137);
          float16x8_t v139 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v137.i8);
          v139.i16[0] = *(_WORD *)(v67 + 2 * v139.u32[0]);
          v139.i16[1] = *(_WORD *)(v67 + 2 * v139.u32[1]);
          v139.i16[2] = *(_WORD *)(v67 + 2 * v139.u32[2]);
          v139.i16[3] = *(_WORD *)(v67 + 2 * v139.u32[3]);
          v139.i16[4] = *(_WORD *)(v67 + 2 * v138.u32[0]);
          v139.i16[5] = *(_WORD *)(v67 + 2 * v138.u32[1]);
          v139.i16[6] = *(_WORD *)(v67 + 2 * v138.u32[2]);
          v139.i16[7] = *(_WORD *)(v67 + 2 * v138.u32[3]);
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v136));
          uint32x4_t v141 = vmovl_high_u16(v140);
          float16x8_t v142 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v140.i8);
          v142.i16[0] = *(_WORD *)(v67 + 2 * v142.u32[0]);
          v142.i16[1] = *(_WORD *)(v67 + 2 * v142.u32[1]);
          v142.i16[2] = *(_WORD *)(v67 + 2 * v142.u32[2]);
          v142.i16[3] = *(_WORD *)(v67 + 2 * v142.u32[3]);
          v142.i16[4] = *(_WORD *)(v67 + 2 * v141.u32[0]);
          v142.i16[5] = *(_WORD *)(v67 + 2 * v141.u32[1]);
          v142.i16[6] = *(_WORD *)(v67 + 2 * v141.u32[2]);
          v142.i16[7] = *(_WORD *)(v67 + 2 * v141.u32[3]);
          uint16x8_t v143 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v136));
          uint32x4_t v144 = vmovl_high_u16(v143);
          uint32x4_t v145 = vmovl_u16(*(uint16x4_t *)v143.i8);
          v146.i16[0] = *(_WORD *)(v67 + 2 * v145.u32[0]);
          v146.i16[1] = *(_WORD *)(v67 + 2 * v145.u32[1]);
          v146.i16[2] = *(_WORD *)(v67 + 2 * v145.u32[2]);
          v146.i16[3] = *(_WORD *)(v67 + 2 * v145.u32[3]);
          v146.i16[4] = *(_WORD *)(v67 + 2 * v144.u32[0]);
          v146.i16[5] = *(_WORD *)(v67 + 2 * v144.u32[1]);
          v146.i16[6] = *(_WORD *)(v67 + 2 * v144.u32[2]);
          v146.i16[7] = *(_WORD *)(v67 + 2 * v144.u32[3]);
          uint16x8_t v147 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v133, (float16x8_t)0), v136));
          uint32x4_t v148 = vmovl_high_u16(v147);
          float16x8_t v149 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v147.i8);
          v149.i16[0] = *(_WORD *)(v67 + 2 * v149.u32[0]);
          v149.i16[1] = *(_WORD *)(v67 + 2 * v149.u32[1]);
          v149.i16[2] = *(_WORD *)(v67 + 2 * v149.u32[2]);
          v149.i16[3] = *(_WORD *)(v67 + 2 * v149.u32[3]);
          v149.i16[4] = *(_WORD *)(v67 + 2 * v148.u32[0]);
          v149.i16[5] = *(_WORD *)(v67 + 2 * v148.u32[1]);
          v149.i16[6] = *(_WORD *)(v67 + 2 * v148.u32[2]);
          v149.i16[7] = *(_WORD *)(v67 + 2 * v148.u32[3]);
          uint16x8_t v150 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v136));
          uint32x4_t v151 = vmovl_high_u16(v150);
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v150.i8);
          v134.i16[0] = *(_WORD *)(v67 + 2 * v152.u32[0]);
          v134.i16[1] = *(_WORD *)(v67 + 2 * v152.u32[1]);
          v134.i16[2] = *(_WORD *)(v67 + 2 * v152.u32[2]);
          v134.i16[3] = *(_WORD *)(v67 + 2 * v152.u32[3]);
          v134.i16[4] = *(_WORD *)(v67 + 2 * v151.u32[0]);
          v134.i16[5] = *(_WORD *)(v67 + 2 * v151.u32[1]);
          v134.i16[6] = *(_WORD *)(v67 + 2 * v151.u32[2]);
          v134.i16[7] = *(_WORD *)(v67 + 2 * v151.u32[3]);
          uint16x8_t v153 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v135, (float16x8_t)0), v136));
          uint32x4_t v154 = vmovl_high_u16(v153);
          float16x8_t v155 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v153.i8);
          v155.i16[0] = *(_WORD *)(v67 + 2 * v155.u32[0]);
          v155.i16[1] = *(_WORD *)(v67 + 2 * v155.u32[1]);
          v155.i16[2] = *(_WORD *)(v67 + 2 * v155.u32[2]);
          v155.i16[3] = *(_WORD *)(v67 + 2 * v155.u32[3]);
          v155.i16[4] = *(_WORD *)(v67 + 2 * v154.u32[0]);
          v155.i16[5] = *(_WORD *)(v67 + 2 * v154.u32[1]);
          v155.i16[6] = *(_WORD *)(v67 + 2 * v154.u32[2]);
          v155.i16[7] = *(_WORD *)(v67 + 2 * v154.u32[3]);
          uint16x8_t v156 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v139, v381), v142, v380), v146, v379), vmaxq_f16(vmaxq_f16(v139, v142), v146), v378), (float16x8_t)0), v136));
          uint32x4_t v157 = vmovl_high_u16(v156);
          uint32x4_t v158 = vmovl_u16(*(uint16x4_t *)v156.i8);
          v133.i16[0] = *(_WORD *)(v50 + 2 * v158.u32[0]);
          v133.i16[1] = *(_WORD *)(v50 + 2 * v158.u32[1]);
          v133.i16[2] = *(_WORD *)(v50 + 2 * v158.u32[2]);
          v133.i16[3] = *(_WORD *)(v50 + 2 * v158.u32[3]);
          v133.i16[4] = *(_WORD *)(v50 + 2 * v157.u32[0]);
          v133.i16[5] = *(_WORD *)(v50 + 2 * v157.u32[1]);
          v133.i16[6] = *(_WORD *)(v50 + 2 * v157.u32[2]);
          v133.i16[7] = *(_WORD *)(v50 + 2 * v157.u32[3]);
          float16x8_t v159 = vmulq_f16(v139, v133);
          float16x8_t v160 = vmulq_f16(v142, v133);
          float16x8_t v161 = vmulq_f16(v146, v133);
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v149, v381), v134, v380), v155, v379), vmaxq_f16(vmaxq_f16(v149, v134), v155), v378), (float16x8_t)0), v136));
          uint32x4_t v163 = vmovl_high_u16(v162);
          uint32x4_t v164 = vmovl_u16(*(uint16x4_t *)v162.i8);
          v165.i16[0] = *(_WORD *)(v50 + 2 * v164.u32[0]);
          v165.i16[1] = *(_WORD *)(v50 + 2 * v164.u32[1]);
          v165.i16[2] = *(_WORD *)(v50 + 2 * v164.u32[2]);
          v165.i16[3] = *(_WORD *)(v50 + 2 * v164.u32[3]);
          v165.i16[4] = *(_WORD *)(v50 + 2 * v163.u32[0]);
          v165.i16[5] = *(_WORD *)(v50 + 2 * v163.u32[1]);
          v165.i16[6] = *(_WORD *)(v50 + 2 * v163.u32[2]);
          v165.i16[7] = *(_WORD *)(v50 + 2 * v163.u32[3]);
          float16x8_t v166 = vmulq_f16(v149, v165);
          float16x8_t v167 = vmulq_f16(v134, v165);
          float16x8_t v168 = vmulq_f16(v155, v165);
          float16x8_t v169 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v159, v377), v160, v376), v161, v375);
          float16x8_t v170 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v159, v374), v160, v373), v161, v372);
          float16x8_t v171 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v161, v369), v160, v370), v159, v371);
          float16x8_t v172 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v166, v377), v167, v376), v168, v375);
          float16x8_t v173 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v166, v374), v167, v373), v168, v372);
          float16x8_t v174 = vmlaq_n_f16(vmulq_n_f16(v168, v369), v167, v370);
          float16x8_t v175 = (float16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v169, (float16x8_t)0), v136));
          uint32x4_t v176 = vmovl_high_u16((uint16x8_t)v175);
          uint32x4_t v177 = vmovl_u16(*(uint16x4_t *)v175.i8);
          v175.i16[7] = (unint64_t)v177.u32[1] >> 48;
          v175.i16[0] = *((_WORD *)result + v177.u32[0]);
          v175.i16[1] = *((_WORD *)result + v177.u32[1]);
          v175.i16[2] = *((_WORD *)result + v177.u32[2]);
          v175.i16[3] = *((_WORD *)result + v177.u32[3]);
          v175.i16[4] = *((_WORD *)result + v176.u32[0]);
          v175.i16[5] = *((_WORD *)result + v176.u32[1]);
          v175.i16[6] = *((_WORD *)result + v176.u32[2]);
          float v178 = (__int16 *)result + v176.u32[3];
          float16x8_t v179 = (float16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v170, (float16x8_t)0), v136));
          uint32x4_t v180 = vmovl_high_u16((uint16x8_t)v179);
          uint64_t v181 = v180.u32[3];
          uint32x4_t v182 = vmovl_u16(*(uint16x4_t *)v179.i8);
          v179.i16[7] = (unint64_t)v182.u32[1] >> 48;
          v179.i16[0] = *((_WORD *)result + v182.u32[0]);
          v179.i16[1] = *((_WORD *)result + v182.u32[1]);
          v179.i16[2] = *((_WORD *)result + v182.u32[2]);
          v179.i16[3] = *((_WORD *)result + v182.u32[3]);
          v179.i16[4] = *((_WORD *)result + v180.u32[0]);
          v179.i16[5] = *((_WORD *)result + v180.u32[1]);
          v179.i16[6] = *((_WORD *)result + v180.u32[2]);
          float16x8_t v183 = (float16x8_t)vuzp1q_s16((int16x8_t)v175, (int16x8_t)v179);
          v175.i16[7] = *v178;
          v179.i16[7] = *((_WORD *)result + v181);
          uint16x8_t v184 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v171, (float16x8_t)0), v136));
          uint32x4_t v185 = vmovl_high_u16(v184);
          *(void *)&long long v186 = v185.u32[2];
          *((void *)&v186 + 1) = v185.u32[3];
          long long v187 = v186;
          *(void *)&long long v186 = v185.u32[0];
          *((void *)&v186 + 1) = v185.u32[1];
          long long v188 = v186;
          int16x8_t v189 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v184.i8);
          *((void *)&v186 + 1) = v189.u32[3];
          v189.i16[7] = (unint64_t)v189.u32[1] >> 48;
          v189.i16[0] = *((_WORD *)result + v189.u32[0]);
          v189.i16[1] = *((_WORD *)result + v189.u32[1]);
          v189.i16[2] = *((_WORD *)result + v189.u32[2]);
          v189.i16[3] = *((_WORD *)result + *((void *)&v186 + 1));
          v189.i16[4] = *((_WORD *)result + v188);
          v189.i16[5] = *((_WORD *)result + *((void *)&v188 + 1));
          v189.i16[6] = *((_WORD *)result + v187);
          float16x8_t v190 = (float16x8_t)v189;
          v190.i16[7] = *((_WORD *)result + *((void *)&v187 + 1));
          uint16x8_t v191 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v172, (float16x8_t)0), v136));
          uint32x4_t v192 = vmovl_high_u16(v191);
          float16x8_t v193 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v191.i8);
          *(void *)&long long v186 = v192.u32[2];
          *((void *)&v186 + 1) = v192.u32[3];
          long long v194 = v186;
          *(void *)&long long v186 = v192.u32[0];
          *((void *)&v186 + 1) = v192.u32[1];
          long long v195 = v186;
          *((void *)&v186 + 1) = v193.u32[3];
          v193.i16[7] = (unint64_t)v193.u32[3] >> 48;
          v193.i16[0] = *((_WORD *)result + v193.u32[0]);
          v193.i16[1] = *((_WORD *)result + v193.u32[1]);
          v193.i16[2] = *((_WORD *)result + v193.u32[2]);
          v193.i16[3] = *((_WORD *)result + *((void *)&v186 + 1));
          v193.i16[4] = *((_WORD *)result + v195);
          v193.i16[5] = *((_WORD *)result + *((void *)&v195 + 1));
          v193.i16[6] = *((_WORD *)result + v194);
          short float v196 = (__int16 *)result + *((void *)&v194 + 1);
          uint16x8_t v197 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v173, (float16x8_t)0), v136));
          uint32x4_t v198 = vmovl_high_u16(v197);
          float16x8_t v199 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v197.i8);
          *(void *)&long long v186 = v198.u32[2];
          *((void *)&v186 + 1) = v198.u32[3];
          long long v200 = v186;
          *(void *)&long long v186 = v198.u32[0];
          *((void *)&v186 + 1) = v198.u32[1];
          long long v201 = v186;
          *((void *)&v186 + 1) = v199.u32[3];
          v199.i16[7] = (unint64_t)v199.u32[3] >> 48;
          v199.i16[0] = *((_WORD *)result + v199.u32[0]);
          v199.i16[1] = *((_WORD *)result + v199.u32[1]);
          v199.i16[2] = *((_WORD *)result + v199.u32[2]);
          v199.i16[3] = *((_WORD *)result + *((void *)&v186 + 1));
          v199.i16[4] = *((_WORD *)result + v201);
          v199.i16[5] = *((_WORD *)result + *((void *)&v201 + 1));
          v199.i16[6] = *((_WORD *)result + v200);
          float16x8_t v202 = (float16x8_t)vuzp1q_s16((int16x8_t)v193, (int16x8_t)v199);
          v193.i16[7] = *v196;
          v199.i16[7] = *((_WORD *)result + *((void *)&v200 + 1));
          uint16x8_t v203 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v174, v166, v371), (float16x8_t)0), v136));
          int16x8_t v204 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v203.i8);
          uint32x4_t v205 = vmovl_high_u16(v203);
          *(void *)&long long v186 = v205.u32[2];
          *((void *)&v186 + 1) = v205.u32[3];
          long long v206 = v186;
          *((void *)&v186 + 1) = v204.u32[3];
          v204.i16[7] = (unint64_t)v204.u32[3] >> 48;
          v204.i16[0] = *((_WORD *)result + v204.u32[0]);
          v204.i16[1] = *((_WORD *)result + v204.u32[1]);
          v204.i16[2] = *((_WORD *)result + v204.u32[2]);
          v204.i16[3] = *((_WORD *)result + *((void *)&v186 + 1));
          v204.i16[4] = *((_WORD *)result + v205.u32[0]);
          v204.i16[5] = *((_WORD *)result + v205.u32[1]);
          v204.i16[6] = *((_WORD *)result + v206);
          float16x8_t v207 = (float16x8_t)v204;
          v207.i16[7] = *((_WORD *)result + *((void *)&v206 + 1));
          *v70++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v401, v175, v384), v179, v383), v190, v382), v401), v399)));
          *v109++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v401, v193, v384), v199, v383), v207, v382), v401), v399)));
          int16x8_t v208 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v183, (float16x8_t)vuzp2q_s16((int16x8_t)v175, (int16x8_t)v179)), v202), (float16x8_t)vuzp2q_s16((int16x8_t)v193, (int16x8_t)v199));
          a8 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v400, v404, (float16x8_t)vzip1q_s16(v208, v208)), v403, (float16x8_t)vzip2q_s16(v208, v208)), v402, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v189, v189), (float16x8_t)vtrn2q_s16((int16x8_t)v190, (int16x8_t)v190)), (float16x8_t)vtrn1q_s16(v204, v204)), (float16x8_t)vtrn2q_s16((int16x8_t)v207, (int16x8_t)v207)));
          unsigned int v100 = v397.i32[0];
          int8x8_t v102 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(a8, v398), v397)));
          *(int8x8_t *)&v69[v106] = v102;
          v106 += 8;
          _S7 = v367;
          float v39 = v420;
          float v43 = v421;
          _S10 = v422;
        }
        while ((int)v106 < (int)v19 - 7);
        float v209 = &v69[v106];
        size_t v210 = v19 & 0xFFFFFFF8;
      }
      for (; v19 > v210; _S29 = v407)
      {
        if (v75)
        {
          v102.i8[0] = *(unsigned char *)v75;
          float v211 = (float)v102.u32[0] - v43;
          LOBYTE(v100) = *(unsigned char *)(v75 + 1);
          float v212 = (float)v100 - v43;
          v75 += 2;
          float v213 = _S31 * v212;
          float v214 = (float)(_S29 * v212) + (float)(v211 * _S28);
          *(float *)v102.i32 = _S10 * v211;
        }
        else
        {
          v102.i32[0] = 0;
          float v214 = 0.0;
          float v213 = 0.0;
        }
        a8.i8[0] = v76->i8[0];
        *(float *)a8.i32 = _S30 * (float)((float)a8.u32[0] - v39);
        float v215 = v213 + *(float *)a8.i32;
        BOOL v216 = (float)(v213 + *(float *)a8.i32) <= 8191.0;
        float v217 = 8191.0;
        if (v216)
        {
          float v217 = v215;
          if (v215 < 0.0) {
            float v217 = 0.0;
          }
        }
        float v218 = v214 + *(float *)a8.i32;
        float v219 = 8191.0;
        if (v218 <= 8191.0)
        {
          float v219 = v218;
          if (v218 < 0.0) {
            float v219 = 0.0;
          }
        }
        float v220 = *(float *)v102.i32 + *(float *)a8.i32;
        float v221 = 8191.0;
        if (v220 <= 8191.0)
        {
          float v221 = v220;
          if (v220 < 0.0) {
            float v221 = 0.0;
          }
        }
        if (v75)
        {
          LOBYTE(v220) = *(unsigned char *)v75;
          float v222 = (float)LODWORD(v220) - v43;
          LOBYTE(v218) = *(unsigned char *)(v75 + 1);
          float v223 = (float)LODWORD(v218) - v43;
          v75 += 2;
          float v224 = _S31 * v223;
          *(float *)a8.i32 = _S29 * v223;
          float v225 = *(float *)a8.i32 + (float)(v222 * _S28);
          float v226 = _S10 * v222;
        }
        else
        {
          float v226 = 0.0;
          float v225 = 0.0;
          float v224 = 0.0;
        }
        a8.i8[0] = v76->i8[1];
        *(float *)a8.i32 = _S30 * (float)((float)a8.u32[0] - v39);
        float v227 = v224 + *(float *)a8.i32;
        float v228 = 8191.0;
        BOOL v216 = (float)(v224 + *(float *)a8.i32) <= 8191.0;
        float v229 = 8191.0;
        if (v216)
        {
          float v229 = v227;
          if (v227 < 0.0) {
            float v229 = 0.0;
          }
        }
        float v230 = v225 + *(float *)a8.i32;
        float v231 = 8191.0;
        if (v230 <= 8191.0)
        {
          float v231 = v230;
          if (v230 < 0.0) {
            float v231 = 0.0;
          }
        }
        float v232 = v226 + *(float *)a8.i32;
        if (v232 <= 8191.0)
        {
          float v228 = v232;
          if (v232 < 0.0) {
            float v228 = 0.0;
          }
        }
        if (v108)
        {
          LOBYTE(v232) = *v108;
          float v233 = (float)LODWORD(v232) - v43;
          a8.i8[0] = v108[1];
          float v234 = (float)a8.u32[0] - v43;
          v235 = v108 + 2;
          float v236 = _S31 * v234;
          float v230 = _S29 * v234;
          float v237 = v230 + (float)(v233 * _S28);
          float v238 = _S10 * v233;
        }
        else
        {
          v235 = 0;
          float v238 = 0.0;
          float v237 = 0.0;
          float v236 = 0.0;
        }
        LOBYTE(v230) = v107->i8[0];
        float v239 = _S30 * (float)((float)LODWORD(v230) - v39);
        float v240 = v236 + v239;
        float v241 = 8191.0;
        float v242 = 8191.0;
        if (v240 <= 8191.0)
        {
          float v242 = v240;
          if (v240 < 0.0) {
            float v242 = 0.0;
          }
        }
        float v243 = v237 + v239;
        BOOL v216 = (float)(v237 + v239) <= 8191.0;
        float v244 = 8191.0;
        if (v216)
        {
          float v244 = v243;
          if (v243 < 0.0) {
            float v244 = 0.0;
          }
        }
        float v245 = v238 + v239;
        if (v245 <= 8191.0)
        {
          float v241 = v245;
          if (v245 < 0.0) {
            float v241 = 0.0;
          }
        }
        if (v235)
        {
          LOBYTE(v245) = *v235;
          *(float *)&unsigned int v246 = (float)LODWORD(v245);
          float v243 = *(float *)&v246 - v43;
          LOBYTE(v246) = v235[1];
          float v247 = (float)v246 - v43;
          uint32x4_t v108 = v235 + 2;
          float v248 = _S31 * v247;
          float v249 = (float)(_S29 * v247) + (float)(v243 * _S28);
          float v250 = _S10 * v243;
        }
        else
        {
          uint32x4_t v108 = 0;
          float v250 = 0.0;
          float v249 = 0.0;
          float v248 = 0.0;
        }
        LOBYTE(v243) = v107->i8[1];
        float v251 = _S30 * (float)((float)LODWORD(v243) - v39);
        float v252 = 8191.0;
        if ((float)(v248 + v251) <= 8191.0)
        {
          float v252 = v248 + v251;
          if ((float)(v248 + v251) < 0.0) {
            float v252 = 0.0;
          }
        }
        float v253 = v249 + v251;
        float v254 = 8191.0;
        if (v253 <= 8191.0)
        {
          float v254 = v253;
          if (v253 < 0.0) {
            float v254 = 0.0;
          }
        }
        float v255 = v250 + v251;
        BOOL v216 = (float)(v250 + v251) <= 8191.0;
        float v256 = 8191.0;
        if (v216)
        {
          float v256 = v255;
          if (v255 < 0.0) {
            float v256 = 0.0;
          }
        }
        _H1 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v217, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        _H19 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v219, 0.0), 8191.0)));
        __asm { FCVT            S19, H19 }
        _H20 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v221, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        _H27 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0)));
        _H29 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v231, 0.0), 8191.0)));
        _H26 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0)));
        _H21 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v242, 0.0), 8191.0)));
        _H23 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v244, 0.0), 8191.0)));
        _H25 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v241, 0.0), 8191.0)));
        _H4 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v252, 0.0), 8191.0)));
        _H5 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v254, 0.0), 8191.0)));
        _H17 = *(_WORD *)(v67 + 2 * llroundf(fminf(fmaxf(v256, 0.0), 8191.0)));
        float v272 = (float)((float)((float)(_S9 * _S19) + (float)(_S7 * _S1)) + (float)(v365 * _S20))
             + (float)(v364 * fmaxf(_S1, fmaxf(_S19, _S20)));
        float v273 = 8191.0;
        if (v272 <= 8191.0)
        {
          float v273 = v272;
          if (v272 < 0.0) {
            float v273 = 0.0;
          }
        }
        __asm
        {
          FCVT            S13, H27
          FCVT            S14, H29
          FCVT            S15, H26
        }
        _H27 = *(_WORD *)(v50 + 2 * llroundf(v273));
        float v278 = (float)((float)((float)(_S9 * _S14) + (float)(_S7 * _S13)) + (float)(v365 * _S15))
             + (float)(v364 * fmaxf(_S13, fmaxf(_S14, _S15)));
        float v279 = 8191.0;
        if (v278 <= 8191.0)
        {
          float v279 = v278;
          if (v278 < 0.0) {
            float v279 = 0.0;
          }
        }
        __asm
        {
          FCVT            S8, H21
          FCVT            S31, H23
          FCVT            S11, H25
        }
        _H12 = *(_WORD *)(v50 + 2 * llroundf(v279));
        float v284 = fmaxf(_S8, fmaxf(_S31, _S11));
        float v285 = (float)((float)((float)(_S9 * _S31) + (float)(_S7 * _S8)) + (float)(v365 * _S11)) + (float)(v364 * v284);
        float v286 = 8191.0;
        if (v285 <= 8191.0)
        {
          float v286 = (float)((float)((float)(_S9 * _S31) + (float)(_S7 * _S8)) + (float)(v365 * _S11))
               + (float)(v364 * v284);
          if (v285 < 0.0) {
            float v286 = 0.0;
          }
        }
        __asm
        {
          FCVT            S26, H4
          FCVT            S29, H5
          FCVT            S28, H17
          FCVT            S4, H27
        }
        float v291 = _S1 * _S4;
        float v292 = _S19 * _S4;
        float v293 = _S20 * _S4;
        __asm { FCVT            S1, H12 }
        float v295 = _S13 * _S1;
        float v296 = _S14 * _S1;
        float v297 = _S15 * _S1;
        LOWORD(_S1) = *(_WORD *)(v50 + 2 * llroundf(v286));
        __asm { FCVT            S4, H1 }
        float v299 = _S8 * _S4;
        float v300 = _S31 * _S4;
        float v301 = _S11 * _S4;
        float v302 = (float)((float)((float)(_S9 * _S29) + (float)(_S7 * _S26)) + (float)(v365 * _S28))
             + (float)(v364 * fmaxf(_S26, fmaxf(_S29, _S28)));
        float v303 = 8191.0;
        if (v302 <= 8191.0)
        {
          float v303 = v302;
          if (v302 < 0.0) {
            float v303 = 0.0;
          }
        }
        _H27 = *(_WORD *)(v50 + 2 * llroundf(v303));
        __asm { FCVT            S27, H27 }
        float v306 = _S26 * _S27;
        float v307 = _S29 * _S27;
        float v308 = _S28 * _S27;
        _S28 = (float)((float)(v395 * v292) + (float)(v291 * v396)) + (float)(v293 * v394);
        float v310 = (float)((float)(v392 * v292) + (float)(v291 * v393)) + (float)(v293 * v391);
        _S21 = (float)((float)(v389 * v292) + (float)(v291 * v390)) + (float)(v293 * v388);
        _S23 = (float)((float)(v395 * v296) + (float)(v295 * v396)) + (float)(v297 * v394);
        float v313 = (float)((float)(v392 * v296) + (float)(v295 * v393)) + (float)(v297 * v391);
        _S19 = (float)((float)(v389 * v296) + (float)(v295 * v390)) + (float)(v297 * v388);
        float v315 = (float)((float)(v395 * v300) + (float)(v299 * v396)) + (float)(v301 * v394);
        float v316 = (float)((float)(v392 * v300) + (float)(v299 * v393)) + (float)(v301 * v391);
        float v317 = (float)((float)(v389 * v300) + (float)(v299 * v390)) + (float)(v301 * v388);
        _S4 = (float)(v392 * v307) + (float)(v306 * v393);
        float v319 = (float)(v389 * v307) + (float)(v306 * v390);
        _S26 = (float)((float)(v395 * v307) + (float)(v306 * v396)) + (float)(v308 * v394);
        float v321 = _S4 + (float)(v308 * v391);
        float v322 = v319 + (float)(v308 * v388);
        _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
        __asm { FCVT            S5, H1 }
        _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v310, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        _H17 = *((_WORD *)result + llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
        __asm { FCVT            S17, H17 }
        _H20 = *((_WORD *)result + llroundf(fminf(fmaxf(v313, 0.0), 8191.0)));
        LOWORD(_S19) = *((_WORD *)result + llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
        __asm
        {
          FCVT            S20, H20
          FCVT            S19, H19
        }
        LOWORD(_S21) = *((_WORD *)result + llroundf(fminf(fmaxf(v315, 0.0), 8191.0)));
        __asm { FCVT            S25, H21 }
        LOWORD(_S21) = *((_WORD *)result + llroundf(fminf(fmaxf(v316, 0.0), 8191.0)));
        __asm { FCVT            S21, H21 }
        LOWORD(_S23) = *((_WORD *)result + llroundf(fminf(fmaxf(v317, 0.0), 8191.0)));
        __asm { FCVT            S23, H23 }
        LOWORD(_S26) = *((_WORD *)result + llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
        __asm { FCVT            S26, H26 }
        LOWORD(_S28) = *((_WORD *)result + llroundf(fminf(fmaxf(v321, 0.0), 8191.0)));
        _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v322, 0.0), 8191.0)));
        __asm
        {
          FCVT            S27, H28
          FCVT            S28, H0
        }
        float v340 = (float)((float)((float)(v411 * _S1) + (float)(v412 * _S5)) + (float)(v413 * _S4)) + v46;
        if (v340 < v46) {
          float v341 = v46;
        }
        else {
          float v341 = (float)((float)((float)(v411 * _S1) + (float)(v412 * _S5)) + (float)(v413 * _S4)) + v46;
        }
        BOOL v216 = v340 <= v387;
        float v342 = (float)((float)((float)(v411 * _S20) + (float)(v412 * _S17)) + (float)(v413 * _S19)) + v46;
        if (!v216) {
          float v341 = v387;
        }
        __int8 v343 = llroundf(v341);
        if (v342 < v46) {
          float v344 = v46;
        }
        else {
          float v344 = (float)((float)((float)(v411 * _S20) + (float)(v412 * _S17)) + (float)(v413 * _S19)) + v46;
        }
        BOOL v216 = v342 <= v387;
        float v345 = (float)((float)((float)(v411 * _S21) + (float)(v412 * _S25)) + (float)(v413 * _S23)) + v46;
        if (!v216) {
          float v344 = v387;
        }
        __int8 v346 = llroundf(v344);
        if (v345 < v46) {
          float v347 = v46;
        }
        else {
          float v347 = (float)((float)((float)(v411 * _S21) + (float)(v412 * _S25)) + (float)(v413 * _S23)) + v46;
        }
        BOOL v216 = v345 <= v387;
        float v348 = (float)((float)((float)(v411 * _S27) + (float)(v412 * _S26)) + (float)(v413 * _S28)) + v46;
        if (!v216) {
          float v347 = v387;
        }
        __int8 v349 = llroundf(v347);
        if (v348 < v46) {
          float v350 = v46;
        }
        else {
          float v350 = (float)((float)((float)(v411 * _S27) + (float)(v412 * _S26)) + (float)(v413 * _S28)) + v46;
        }
        if (v348 <= v387) {
          float v351 = v350;
        }
        else {
          float v351 = v387;
        }
        __int8 v352 = llroundf(v351);
        float v353 = (float)((float)(_S5 + _S17) + _S25) + _S26;
        float v354 = (float)((float)(_S1 + _S20) + _S21) + _S27;
        v70->i8[0] = v343;
        v70->i8[1] = v346;
        v109->i8[0] = v349;
        v109->i8[1] = v352;
        float v355 = (float)((float)(_S4 + _S19) + _S23) + _S28;
        float v356 = (float)((float)(v410 + (float)(v353 * v405)) + (float)(v354 * *(float *)&v101))
             + (float)(v355 * v9.f32[0]);
        *(float *)a8.i32 = v406;
        _S10 = v422;
        if (v356 <= v406)
        {
          *(float *)a8.i32 = (float)((float)(v410 + (float)(v353 * v405)) + (float)(v354 * *(float *)&v101))
                           + (float)(v355 * v9.f32[0]);
          if (v356 < v419) {
            *(float *)a8.i32 = v419;
          }
        }
        *(float *)v102.i32 = (float)((float)(v410 + (float)(v353 * v368)) + (float)(v354 * *((float *)&v101 + 1)))
                           + (float)(v355 * v9.f32[1]);
        *float v209 = llroundf(*(float *)a8.i32);
        unsigned int v100 = LODWORD(v406);
        float v39 = v420;
        float v43 = v421;
        _S30 = v386;
        _H13 = v385;
        if (*(float *)v102.i32 <= v406)
        {
          unsigned int v100 = v102.i32[0];
          if (*(float *)v102.i32 < v419) {
            unsigned int v100 = LODWORD(v419);
          }
        }
        v210 += 2;
        int16x8_t v76 = (int8x8_t *)((char *)v76 + 2);
        float32x4_t v107 = (int8x8_t *)((char *)v107 + 2);
        v209[1] = llroundf(*(float *)&v100);
        int16x8_t v70 = (int8x8_t *)((char *)v70 + 2);
        uint32x4_t v109 = (int8x8_t *)((char *)v109 + 2);
        v209 += 2;
        _S31 = v409;
        _S28 = v408;
      }
      uint64_t v30 = v362;
      uint64_t v29 = v363;
      int16x8_t v76 = (int8x8_t *)&v103[v363];
      uint64_t v75 = v104 + v362;
      int16x8_t v70 = (int8x8_t *)&v105[v33];
      v69 += v361;
      v18 += 2;
    }
    while (v22 > v18);
    if (v360 && v359)
    {
      do
      {
        uint64_t result = memcpy(v51, v35, v19);
        v35 += v357;
        v51 += v358;
        --v22;
      }
      while (v22);
    }
    else if (v359)
    {
      do
      {
        if (v19) {
          uint64_t result = memset(v51, 255, v19);
        }
        v51 += v358;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf_GCD(void *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)((char *)result + 28);
  unint64_t v5 = 2 * *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    size_t v9 = *(void *)((char *)result + 20);
    uint64_t v10 = *(void *)((char *)result + 36);
    uint64_t v11 = *(void *)((char *)result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = result[14];
    uint64_t v14 = (void *)result[16];
    uint64_t v15 = result[15] + 2 * (result[13] * a2 / v5);
    uint64_t v16 = result[19];
    uint64_t v18 = (void *)result[7];
    uint64_t v17 = (uint64_t *)result[8];
    uint64_t v19 = (uint64_t *)result[17];
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v217 = v17[2];
    uint64_t v219 = v18[2];
    size_t v22 = (char *)(v219 + v217 * v11 + v10);
    uint64_t v23 = *v19;
    uint64_t v24 = v19[1];
    uint64_t v25 = v19[2];
    uint64_t v218 = v14[2];
    int v26 = (char *)(v218 + v25 * v15 + v13);
    float v27 = 8191.0;
    *(float *)&unsigned int v28 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    float v29 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    float v30 = (float)LODWORD(a4);
    float v31 = *(float *)&v28 * *(float *)v16;
    float v32 = *(float *)&v28 * *(float *)(v16 + 8);
    float v33 = *(float *)&v28 * *(float *)(v16 + 16);
    float v34 = *(float *)&v28 * *(float *)(v16 + 20);
    float v35 = *(float *)&v28 * *(float *)(v16 + 28);
    LOWORD(v28) = *(_WORD *)(v16 + 144);
    float v36 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v16 + 146);
    float v37 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v16 + 148);
    float v38 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v16 + 150);
    *(float *)&unsigned int v39 = (float)v28;
    float v249 = *(float *)&v39;
    LOWORD(v39) = *(_WORD *)(v16 + 152);
    float v243 = (float)v39;
    float v244 = v37;
    float v241 = *(float *)(v16 + 40);
    float v242 = *(float *)(v16 + 36);
    float v239 = *(float *)(v16 + 48) * 0.25;
    float v240 = *(float *)(v16 + 44);
    float v237 = *(float *)(v16 + 56) * 0.25;
    float v238 = *(float *)(v16 + 52) * 0.25;
    float v40 = *(float *)(v16 + 60) * 0.25;
    float v235 = *(float *)(v16 + 64) * 0.25;
    float v236 = v40;
    float v233 = *(float *)(v16 + 68) * 0.25;
    float v234 = *(float *)(v16 + 72);
    float v231 = *(float *)(v16 + 80);
    float v232 = *(float *)(v16 + 76);
    float v230 = *(float *)(v16 + 84);
    float v228 = *(float *)(v16 + 88);
    float v225 = *(float *)(v16 + 96);
    float v226 = *(float *)(v16 + 92);
    float v41 = *(float *)(v16 + 104);
    float v223 = v41;
    float v224 = *(float *)(v16 + 100);
    uint64_t v42 = v16 + 164;
    uint64_t v43 = v18[1];
    short float v44 = (unsigned char *)(*v18 + *v17 * v11 + v10);
    unsigned int v45 = (unsigned char *)(v43 + v21 * v11 + v10);
    uint64_t result = (void *)(v16 + 16548);
    if (v43) {
      float v46 = v45;
    }
    else {
      float v46 = 0;
    }
    uint64_t v47 = *v14 + v23 * v15;
    uint64_t v48 = v14[1] + v19[1] * (v15 / 2);
    uint64_t v49 = v16 + 32932;
    uint64_t v50 = (unsigned char *)(v47 + v13);
    uint64_t v51 = v48 + v13;
    float v52 = *(float *)(v16 + 108);
    float v53 = *(float *)(v16 + 112);
    float v55 = *(float *)(v16 + 116);
    float v54 = *(float *)(v16 + 120);
    float v247 = v33;
    float v248 = v32;
    float v245 = v35;
    float v246 = v34;
    float v222 = v30;
    float v229 = v29;
    float v227 = v31;
    float v220 = v55;
    float v221 = v53;
    do
    {
      __int16 v56 = &v50[v23];
      int16x8_t v57 = &v46[v21];
      int32x4_t v58 = &v44[v20];
      if (v9)
      {
        size_t v59 = 0;
        int32x4_t v60 = &v44[v20];
        int32x4_t v61 = &v46[v21];
        int32x4_t v62 = &v50[v23];
        do
        {
          if (v46)
          {
            LOBYTE(v41) = *v46;
            *(float *)&unsigned int v63 = (float)LODWORD(v41);
            float v64 = *(float *)&v63 - v30;
            LOBYTE(v63) = v46[1];
            float v65 = (float)v63 - v30;
            v46 += 2;
            float v66 = v32 * v65;
            float v67 = (float)(v34 * v65) + (float)(v64 * v33);
            float v68 = v35 * v64;
          }
          else
          {
            float v68 = 0.0;
            float v67 = 0.0;
            float v66 = 0.0;
          }
          LOBYTE(v40) = *v44;
          float v69 = v31 * (float)((float)LODWORD(v40) - v29);
          float v70 = v66 + v69;
          BOOL v71 = (float)(v66 + v69) <= 8191.0;
          float v72 = 8191.0;
          if (v71)
          {
            float v72 = v70;
            if (v70 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v67 + v69;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v68 + v69;
          if (v75 <= 8191.0)
          {
            float v27 = v75;
            if (v75 < 0.0) {
              float v27 = 0.0;
            }
          }
          if (v46)
          {
            LOBYTE(v75) = *v46;
            float v76 = (float)LODWORD(v75) - v30;
            LOBYTE(v73) = v46[1];
            float v77 = (float)LODWORD(v73) - v30;
            v46 += 2;
            float v78 = v32 * v77;
            float v79 = (float)(v34 * v77) + (float)(v76 * v33);
            float v80 = v35 * v76;
          }
          else
          {
            float v80 = 0.0;
            float v79 = 0.0;
            float v78 = 0.0;
          }
          LOBYTE(v70) = v44[1];
          float v81 = v31 * (float)((float)LODWORD(v70) - v29);
          float v82 = v78 + v81;
          float v83 = 8191.0;
          float v84 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v84 = v82;
            if (v82 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v79 + v81;
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v80 + v81;
          if (v87 <= 8191.0)
          {
            float v83 = v87;
            if (v87 < 0.0) {
              float v83 = 0.0;
            }
          }
          if (v61)
          {
            LOBYTE(v87) = *v61;
            *(float *)&unsigned int v88 = (float)LODWORD(v87);
            float v81 = *(float *)&v88 - v30;
            LOBYTE(v88) = v61[1];
            float v89 = (float)v88 - v30;
            v61 += 2;
            float v90 = v32 * v89;
            float v91 = (float)(v34 * v89) + (float)(v81 * v33);
            float v92 = v35 * v81;
          }
          else
          {
            float v92 = 0.0;
            float v91 = 0.0;
            float v90 = 0.0;
          }
          LOBYTE(v81) = *v60;
          float v93 = v31 * (float)((float)LODWORD(v81) - v29);
          float v94 = v90 + v93;
          float v95 = 8191.0;
          BOOL v71 = (float)(v90 + v93) <= 8191.0;
          float v96 = 8191.0;
          if (v71)
          {
            float v96 = v94;
            if (v94 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v91 + v93;
          BOOL v71 = (float)(v91 + v93) <= 8191.0;
          float v98 = 8191.0;
          if (v71)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          float v99 = v92 + v93;
          if (v99 <= 8191.0)
          {
            float v95 = v99;
            if (v99 < 0.0) {
              float v95 = 0.0;
            }
          }
          if (v61)
          {
            LOBYTE(v99) = *v61;
            *(float *)&unsigned int v100 = (float)LODWORD(v99);
            float v97 = *(float *)&v100 - v30;
            LOBYTE(v100) = v61[1];
            float v101 = (float)v100 - v30;
            v61 += 2;
            float v102 = v32 * v101;
            float v103 = (float)(v34 * v101) + (float)(v97 * v33);
            float v104 = v35 * v97;
          }
          else
          {
            float v104 = 0.0;
            float v103 = 0.0;
            float v102 = 0.0;
          }
          LOBYTE(v97) = v60[1];
          float v105 = v31 * (float)((float)LODWORD(v97) - v29);
          float v106 = v102 + v105;
          BOOL v71 = (float)(v102 + v105) <= 8191.0;
          float v107 = 8191.0;
          if (v71)
          {
            float v107 = v106;
            if (v106 < 0.0) {
              float v107 = 0.0;
            }
          }
          float v108 = v103 + v105;
          float v109 = 8191.0;
          if (v108 <= 8191.0)
          {
            float v109 = v108;
            if (v108 < 0.0) {
              float v109 = 0.0;
            }
          }
          float v110 = v104 + v105;
          BOOL v71 = (float)(v104 + v105) <= 8191.0;
          float v111 = 8191.0;
          if (v71)
          {
            float v111 = v110;
            if (v110 < 0.0) {
              float v111 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H20 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          unsigned int v119 = llroundf(fminf(fmaxf(v27, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *(_WORD *)(v42 + 2 * v119);
          __asm { FCVT            S30, H20 }
          _H20 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v107, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          float v132 = fmaxf(_S0, fmaxf(_S19, _S30));
          float v133 = (float)((float)((float)(v53 * _S19) + (float)(v52 * _S0)) + (float)(v55 * _S30)) + (float)(v54 * v132);
          float v134 = 8191.0;
          if (v133 <= 8191.0)
          {
            float v134 = (float)((float)((float)(v53 * _S19) + (float)(v52 * _S0)) + (float)(v55 * _S30))
                 + (float)(v54 * v132);
            if (v133 < 0.0) {
              float v134 = 0.0;
            }
          }
          __asm
          {
            FCVT            S21, H20
            FCVT            S22, H29
            FCVT            S23, H31
          }
          _H20 = *((_WORD *)result + llroundf(v134));
          float v139 = (float)((float)((float)(v53 * _S22) + (float)(v52 * _S21)) + (float)(v55 * _S23))
               + (float)(v54 * fmaxf(_S21, fmaxf(_S22, _S23)));
          float v140 = 8191.0;
          if (v139 <= 8191.0)
          {
            float v140 = v139;
            if (v139 < 0.0) {
              float v140 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H5
            FCVT            S10, H6
            FCVT            S11, H7
          }
          _H5 = *((_WORD *)result + llroundf(v140));
          float v145 = fmaxf(_S9, fmaxf(_S10, _S11));
          float v146 = (float)((float)((float)(v53 * _S10) + (float)(v52 * _S9)) + (float)(v55 * _S11)) + (float)(v54 * v145);
          float v147 = 8191.0;
          if (v146 <= 8191.0)
          {
            float v147 = (float)((float)((float)(v53 * _S10) + (float)(v52 * _S9)) + (float)(v55 * _S11))
                 + (float)(v54 * v145);
            if (v146 < 0.0) {
              float v147 = 0.0;
            }
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H4
            FCVT            S1, H20
          }
          float v152 = _S0 * _S1;
          float v153 = _S19 * _S1;
          float v154 = _S30 * _S1;
          __asm { FCVT            S0, H5 }
          float v156 = _S21 * _S0;
          float v157 = _S22 * _S0;
          float v158 = _S23 * _S0;
          LOWORD(_S0) = *((_WORD *)result + llroundf(v147));
          __asm { FCVT            S1, H0 }
          float v160 = _S9 * _S1;
          float v161 = _S10 * _S1;
          float v162 = _S11 * _S1;
          float v163 = (float)((float)((float)(v53 * _S31) + (float)(v52 * _S29)) + (float)(v55 * _S8))
               + (float)(v54 * fmaxf(_S29, fmaxf(_S31, _S8)));
          float v164 = 8191.0;
          if (v163 <= 8191.0)
          {
            float v164 = v163;
            if (v163 < 0.0) {
              float v164 = 0.0;
            }
          }
          _H21 = *((_WORD *)result + llroundf(v164));
          __asm { FCVT            S21, H21 }
          float v167 = _S29 * _S21;
          float v168 = _S31 * _S21;
          float v169 = _S8 * _S21;
          float v170 = (float)((float)(v232 * v153) + (float)(v152 * v234)) + (float)(v154 * v231);
          float v171 = (float)((float)(v228 * v153) + (float)(v152 * v230)) + (float)(v154 * v226);
          _S7 = (float)((float)(v224 * v153) + (float)(v152 * v225)) + (float)(v154 * v223);
          _S19 = (float)((float)(v232 * v157) + (float)(v156 * v234)) + (float)(v158 * v231);
          float v174 = (float)((float)(v228 * v157) + (float)(v156 * v230)) + (float)(v158 * v226);
          _S5 = (float)((float)(v224 * v157) + (float)(v156 * v225)) + (float)(v158 * v223);
          float v176 = (float)((float)(v232 * v161) + (float)(v160 * v234)) + (float)(v162 * v231);
          float v177 = (float)((float)(v228 * v161) + (float)(v160 * v230)) + (float)(v162 * v226);
          float v178 = (float)((float)(v224 * v161) + (float)(v160 * v225)) + (float)(v162 * v223);
          _S1 = (float)(v228 * v168) + (float)(v167 * v230);
          float v180 = (float)(v224 * v168) + (float)(v167 * v225);
          _S22 = (float)((float)(v232 * v168) + (float)(v167 * v234)) + (float)(v169 * v231);
          _S23 = _S1 + (float)(v169 * v226);
          _S21 = v180 + (float)(v169 * v223);
          _H0 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
          __asm { FCVT            S3, H0 }
          _H0 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H6 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S5, H5
          }
          LOWORD(_S7) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
          __asm { FCVT            S20, H7 }
          LOWORD(_S7) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v177, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S19) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S22) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S21, H21
          }
          float v200 = (float)((float)((float)(v241 * _S0) + (float)(v242 * _S3)) + (float)(v240 * _S1)) + v36;
          if (v200 < v36) {
            float v201 = v36;
          }
          else {
            float v201 = (float)((float)((float)(v241 * _S0) + (float)(v242 * _S3)) + (float)(v240 * _S1)) + v36;
          }
          BOOL v71 = v200 <= v38;
          float v202 = (float)((float)((float)(v241 * _S6) + (float)(v242 * _S4)) + (float)(v240 * _S5)) + v36;
          if (!v71) {
            float v201 = v38;
          }
          char v203 = llroundf(v201);
          if (v202 < v36) {
            float v204 = v36;
          }
          else {
            float v204 = (float)((float)((float)(v241 * _S6) + (float)(v242 * _S4)) + (float)(v240 * _S5)) + v36;
          }
          BOOL v71 = v202 <= v38;
          float v205 = (float)((float)((float)(v241 * _S7) + (float)(v242 * _S20)) + (float)(v240 * _S19)) + v36;
          if (!v71) {
            float v204 = v38;
          }
          char v206 = llroundf(v204);
          if (v205 < v36) {
            float v207 = v36;
          }
          else {
            float v207 = (float)((float)((float)(v241 * _S7) + (float)(v242 * _S20)) + (float)(v240 * _S19)) + v36;
          }
          BOOL v71 = v205 <= v38;
          float v208 = (float)((float)((float)(v241 * _S23) + (float)(v242 * _S22)) + (float)(v240 * _S21)) + v36;
          if (!v71) {
            float v207 = v38;
          }
          char v209 = llroundf(v207);
          if (v208 < v36) {
            float v210 = v36;
          }
          else {
            float v210 = (float)((float)((float)(v241 * _S23) + (float)(v242 * _S22)) + (float)(v240 * _S21)) + v36;
          }
          if (v208 <= v38) {
            float v211 = v210;
          }
          else {
            float v211 = v38;
          }
          float v212 = (float)((float)(_S3 + _S4) + _S20) + _S22;
          float v213 = (float)((float)(_S0 + _S6) + _S7) + _S23;
          *uint64_t v50 = v203;
          v50[1] = v206;
          *int32x4_t v62 = v209;
          v62[1] = llroundf(v211);
          float v214 = (float)((float)(_S1 + _S5) + _S19) + _S21;
          float v215 = (float)((float)(v244 + (float)(v212 * v239)) + (float)(v213 * v238)) + (float)(v214 * v237);
          float v40 = v243;
          if (v215 <= v243)
          {
            float v40 = (float)((float)(v244 + (float)(v212 * v239)) + (float)(v213 * v238)) + (float)(v214 * v237);
            if (v215 < v249) {
              float v40 = v249;
            }
          }
          float v216 = (float)((float)(v244 + (float)(v212 * v236)) + (float)(v213 * v235)) + (float)(v214 * v233);
          *(unsigned char *)(v51 + v59) = llroundf(v40);
          float v41 = v243;
          float v29 = v229;
          float v31 = v227;
          float v32 = v248;
          if (v216 <= v243)
          {
            float v41 = v216;
            if (v216 < v249) {
              float v41 = v249;
            }
          }
          v44 += 2;
          v60 += 2;
          v50 += 2;
          v62 += 2;
          *(unsigned char *)(v51 + v59 + 1) = llroundf(v41);
          v59 += 2;
          float v34 = v246;
          float v33 = v247;
          float v35 = v245;
          float v27 = 8191.0;
          float v30 = v222;
          float v55 = v220;
          float v53 = v221;
        }
        while (v9 > v59);
      }
      short float v44 = &v58[v20];
      float v46 = &v57[v21];
      uint64_t v50 = &v56[v23];
      v51 += v24;
      v8 += 2;
    }
    while (v12 > v8);
    if (v219 && v218)
    {
      do
      {
        uint64_t result = memcpy(v26, v22, v9);
        v22 += v217;
        v26 += v25;
        --v12;
      }
      while (v12);
    }
    else if (v218)
    {
      do
      {
        if (v9) {
          uint64_t result = memset(v26, 255, v9);
        }
        v26 += v25;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_420vf_neon_fp16_GCD(void *result, uint64_t a2, double a3, float16x8_t a4, double a5, double a6, double a7, int16x4_t a8, double a9, double a10)
{
  uint64_t v15 = *(void *)((char *)result + 28);
  unint64_t v16 = 2 * *(unsigned __int8 *)result;
  unint64_t v17 = v15 * a2 / v16;
  unint64_t v18 = (v15 + v15 * a2) / v16;
  if (2 * v18 != 2 * v17)
  {
    unint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    uint64_t v22 = *(void *)((char *)result + 44) + 2 * v17;
    unint64_t v23 = 2 * v18 - 2 * v17;
    uint64_t v24 = result[14];
    unint64_t v25 = result[13] * a2;
    uint64_t v26 = result[19];
    float v27 = (void *)result[7];
    uint64_t v28 = (uint64_t *)result[8];
    uint64_t v30 = result[15];
    uint64_t v29 = (void *)result[16];
    uint64_t v31 = (uint64_t *)result[17];
    uint64_t v33 = *v28;
    uint64_t v32 = v28[1];
    uint64_t v34 = v30 + 2 * (v25 / v16);
    uint64_t v313 = v28[2];
    uint64_t v316 = v27[2];
    uint64_t v35 = (char *)(v316 + v313 * v22 + v21);
    uint64_t v37 = *v31;
    uint64_t v36 = v31[1];
    uint64_t v314 = v31[2];
    uint64_t v315 = v29[2];
    unsigned int v38 = *(unsigned __int16 *)(v26 + 140);
    unsigned int v39 = *(unsigned __int16 *)(v26 + 142);
    LODWORD(a3) = *(_DWORD *)v26;
    float v40 = *(float *)(v26 + 20);
    float v41 = *(float *)(v26 + 28);
    LODWORD(v28) = *(unsigned __int16 *)(v26 + 144);
    float v42 = (float)v38;
    *(short float *)v14.i16 = (short float)v38;
    unsigned int v43 = *(unsigned __int16 *)(v26 + 146);
    _S30 = *(_DWORD *)(v26 + 44);
    float v45 = (float)v39;
    short float v46 = (short float)v39;
    unsigned int v49 = *(unsigned __int16 *)(v26 + 148);
    float v50 = (float)v28;
    *(short float *)a8.i16 = (short float)v28;
    unsigned int v51 = *(unsigned __int16 *)(v26 + 150);
    *(float *)&a9 = (float)v43;
    float v361 = (float)v43;
    *(short float *)&a9 = (short float)v43;
    unsigned int v52 = *(unsigned __int16 *)(v26 + 152);
    _S8 = *(_DWORD *)(v26 + 36);
    _S10 = *(_DWORD *)(v26 + 40);
    *(float *)&a10 = (float)v49;
    float v342 = (float)v49;
    uint64_t v55 = v26 + 164;
    __int16 v56 = (char *)(v315 + v314 * v34 + v24);
    float v368 = (float)v51;
    float v358 = (float)v52;
    *(short float *)&a10 = (short float)v52;
    if (v34 >= 0) {
      uint64_t v57 = v34;
    }
    else {
      uint64_t v57 = v34 + 1;
    }
    uint64_t v317 = v36;
    float v58 = 8191.0 / (float)*(unsigned int *)(v26 + 128);
    _S24 = v58 * *(float *)&a3;
    _S29 = v58 * *(float *)(v26 + 8);
    _S13 = v58 * *(float *)(v26 + 16);
    _S31 = v58 * v40;
    _S11 = v58 * v41;
    uint64_t v64 = *v29 + v37 * v34;
    uint64_t v65 = v26 + 16548;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(v14, 0);
    *(short float *)&a3 = -v46;
    float16x8_t v367 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    __asm { FMOV            V0.2S, #0.25 }
    v47.i32[1] = *(_DWORD *)(v26 + 60);
    v47.i32[0] = *(_DWORD *)(v26 + 48);
    *(float32x2_t *)v10.f32 = vmul_f32(v47, _D0);
    float16x8_t v356 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    v48.i32[1] = *(_DWORD *)(v26 + 64);
    v48.i32[0] = *(_DWORD *)(v26 + 52);
    *(float32x2_t *)v13.f32 = vmul_f32(v48, _D0);
    float16x8_t v355 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v13), 0);
    a4.i32[1] = *(_DWORD *)(v26 + 68);
    a4.i32[0] = *(_DWORD *)(v26 + 56);
    *(float32x2_t *)a4.i8 = vmul_f32(*(float32x2_t *)a4.i8, _D0);
    float16x8_t v352 = (float16x8_t)vdupq_lane_s16(a8, 0);
    float16x8_t v353 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)a4), 0);
    *(short float *)v11.i16 = (short float)v49;
    float16x8_t v350 = (float16x8_t)vdupq_lane_s16(v11, 0);
    float16x8_t v351 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    *(short float *)v12.i16 = (short float)v51;
    float16x8_t v349 = (float16x8_t)vdupq_lane_s16(v12, 0);
    uint64_t result = (void *)(v29[1] + v36 * (v57 >> 1) + v24);
    float v72 = (int8x8_t *)(v64 + v24);
    float v75 = v27;
    uint64_t v73 = *v27;
    uint64_t v74 = v75[1];
    _ZF = v74 == 0;
    float v76 = (unsigned char *)(v74 + v32 * v22 + v21);
    if (_ZF) {
      float v77 = 0;
    }
    else {
      float v77 = v76;
    }
    float v78 = (int8x8_t *)(v73 + v33 * v22 + v21);
    float16x8_t v346 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a10, 0);
    _S5 = *(float *)(v26 + 80);
    _Q19.i32[0] = *(_DWORD *)(v26 + 96);
    __asm
    {
      FCVT            H14, S24
      FCVT            H9, S11
    }
    short float v366 = _H9;
    __asm { FCVT            H9, S13 }
    short float v365 = _H9;
    __asm { FCVT            H9, S31 }
    short float v364 = _H9;
    __asm { FCVT            H9, S29 }
    short float v363 = _H9;
    float v360 = *(float *)(v26 + 36);
    __asm { FCVT            H9, S8 }
    short float v333 = _H9;
    float v359 = *(float *)(v26 + 40);
    __asm { FCVT            H9, S10 }
    short float v332 = _H9;
    float v362 = *(float *)(v26 + 44);
    __asm { FCVT            H9, S30 }
    float v348 = *(float *)(v26 + 72);
    __asm { FCVT            H0, S0 }
    short float v330 = _H0;
    short float v331 = _H9;
    float v347 = *(float *)(v26 + 76);
    __asm { FCVT            H0, S4 }
    short float v329 = _H0;
    float v345 = _S5;
    __asm { FCVT            H0, S5 }
    short float v328 = _H0;
    float v344 = *(float *)(v26 + 84);
    __asm { FCVT            H0, S6 }
    short float v327 = _H0;
    float v343 = *(float *)(v26 + 88);
    __asm { FCVT            H0, S17 }
    short float v326 = _H0;
    float v341 = *(float *)(v26 + 92);
    __asm { FCVT            H0, S7 }
    short float v325 = _H0;
    float v339 = *(float *)_Q19.i32;
    __asm { FCVT            H0, S19 }
    short float v324 = _H0;
    float v338 = *(float *)(v26 + 100);
    __asm { FCVT            H0, S21 }
    short float v323 = _H0;
    float v336 = *(float *)(v26 + 104);
    __asm { FCVT            H0, S22 }
    short float v322 = _H0;
    uint64_t v98 = v13.i64[0];
    v99.i32[0] = a4.i32[1];
    float v354 = *(float *)a4.i32;
    float v320 = v58 * *(float *)(v26 + 16);
    float v321 = *(float *)&a4.i32[1];
    uint64_t v318 = v33;
    float v357 = v58 * *(float *)(v26 + 8);
    float16x8_t v340 = v66;
    float v337 = v58 * v40;
    float v335 = _S24;
    short float v334 = _H14;
    float v319 = v58 * v41;
    do
    {
      unsigned int v100 = (char *)v78 + v33;
      float v101 = &v77[v32];
      float v102 = (char *)v72 + v37;
      if ((int)v20 < 8)
      {
        size_t v194 = 0;
        float16x8_t v193 = result;
        float v106 = (int8x8_t *)((char *)v72 + v37);
        float v105 = &v77[v32];
        float v104 = (int8x8_t *)((char *)v78 + v33);
      }
      else
      {
        uint64_t v103 = 0;
        float v104 = (int8x8_t *)((char *)v78 + v33);
        float v105 = &v77[v32];
        float v106 = (int8x8_t *)((char *)v72 + v37);
        do
        {
          float16x8_t v107 = 0uLL;
          if (v77)
          {
            int8x8x2_t v369 = vld2_s8(v77);
            v77 += 16;
            *(int8x8_t *)v108.i8 = vzip1_s8(v369.val[0], 0);
            v108.u64[1] = (unint64_t)vzip2_s8(v369.val[0], 0);
            *(int8x8_t *)v109.i8 = vzip1_s8(v369.val[1], 0);
            v109.u64[1] = (unint64_t)vzip2_s8(v369.val[1], 0);
            float16x8_t v110 = vaddq_f16(v367, vcvtq_f16_u16(v108));
            float16x8_t v111 = vaddq_f16(v367, vcvtq_f16_u16(v109));
            float16x8_t v112 = vmulq_n_f16(v111, v363);
            float16x8_t v113 = vmlaq_n_f16(vmulq_n_f16(v110, v365), v111, v364);
            float16x8_t v114 = vmulq_n_f16(v110, v366);
          }
          else
          {
            float16x8_t v114 = 0uLL;
            float16x8_t v113 = 0uLL;
            float16x8_t v112 = 0uLL;
          }
          int8x8_t v115 = *v78++;
          *(int8x8_t *)v116.i8 = vzip1_s8(v115, 0);
          v116.u64[1] = (unint64_t)vzip2_s8(v115, 0);
          float16x8_t v117 = vsubq_f16(vcvtq_f16_u16(v116), v66);
          float16x8_t v118 = vmlaq_n_f16(v112, v117, _H14);
          float16x8_t v119 = vmlaq_n_f16(v113, v117, _H14);
          float16x8_t v120 = vmlaq_n_f16(v114, v117, _H14);
          if (v105)
          {
            float16x8_t v370 = (float16x8_t)vld2_s8(v105);
            v105 += 16;
            *(int8x8_t *)v121.i8 = vzip1_s8(*(int8x8_t *)v370.i8, 0);
            v121.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v370.i8, 0);
            *(int8x8_t *)v122.i8 = vzip1_s8((int8x8_t)v370.u64[1], 0);
            v122.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v370.u64[1], 0);
            *(float16x8_t *)((char *)&v370 + 8) = vaddq_f16(v367, vcvtq_f16_u16(v121));
            float16x8_t v370 = vaddq_f16(v367, vcvtq_f16_u16(v122));
            float16x8_t v123 = vmulq_n_f16(v370, v363);
            float16x8_t v124 = vmlaq_n_f16(vmulq_n_f16(*(float16x8_t *)((char *)&v370 + 8), v365), v370, v364);
            float16x8_t v107 = vmulq_n_f16(*(float16x8_t *)((char *)&v370 + 8), v366);
          }
          else
          {
            float16x8_t v124 = 0uLL;
            float16x8_t v123 = 0uLL;
          }
          int8x8_t v125 = *v104++;
          *(int8x8_t *)v126.i8 = vzip1_s8(v125, 0);
          v126.u64[1] = (unint64_t)vzip2_s8(v125, 0);
          float16x8_t v127 = vsubq_f16(vcvtq_f16_u16(v126), v66);
          float16x8_t v128 = vmlaq_n_f16(v123, v127, _H14);
          float16x8_t v129 = vmlaq_n_f16(v124, v127, _H14);
          float16x8_t v130 = vmlaq_n_f16(v107, v127, _H14);
          v131.i64[0] = 0x9000900090009000;
          v131.i64[1] = 0x9000900090009000;
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v131));
          uint32x4_t v133 = vmovl_high_u16(v132);
          uint32x4_t v134 = vmovl_u16(*(uint16x4_t *)v132.i8);
          v135.i16[0] = *(_WORD *)(v55 + 2 * v134.u32[0]);
          v135.i16[1] = *(_WORD *)(v55 + 2 * v134.u32[1]);
          v135.i16[2] = *(_WORD *)(v55 + 2 * v134.u32[2]);
          v135.i16[3] = *(_WORD *)(v55 + 2 * v134.u32[3]);
          v135.i16[4] = *(_WORD *)(v55 + 2 * v133.u32[0]);
          v135.i16[5] = *(_WORD *)(v55 + 2 * v133.u32[1]);
          v135.i16[6] = *(_WORD *)(v55 + 2 * v133.u32[2]);
          v135.i16[7] = *(_WORD *)(v55 + 2 * v133.u32[3]);
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v131));
          uint32x4_t v137 = vmovl_high_u16(v136);
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v136.i8);
          v139.i16[0] = *(_WORD *)(v55 + 2 * v138.u32[0]);
          v139.i16[1] = *(_WORD *)(v55 + 2 * v138.u32[1]);
          v139.i16[2] = *(_WORD *)(v55 + 2 * v138.u32[2]);
          v139.i16[3] = *(_WORD *)(v55 + 2 * v138.u32[3]);
          v139.i16[4] = *(_WORD *)(v55 + 2 * v137.u32[0]);
          v139.i16[5] = *(_WORD *)(v55 + 2 * v137.u32[1]);
          v139.i16[6] = *(_WORD *)(v55 + 2 * v137.u32[2]);
          v139.i16[7] = *(_WORD *)(v55 + 2 * v137.u32[3]);
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v131));
          uint32x4_t v141 = vmovl_high_u16(v140);
          uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v140.i8);
          v143.i16[0] = *(_WORD *)(v55 + 2 * v142.u32[0]);
          v143.i16[1] = *(_WORD *)(v55 + 2 * v142.u32[1]);
          v143.i16[2] = *(_WORD *)(v55 + 2 * v142.u32[2]);
          v143.i16[3] = *(_WORD *)(v55 + 2 * v142.u32[3]);
          v143.i16[4] = *(_WORD *)(v55 + 2 * v141.u32[0]);
          v143.i16[5] = *(_WORD *)(v55 + 2 * v141.u32[1]);
          v143.i16[6] = *(_WORD *)(v55 + 2 * v141.u32[2]);
          v143.i16[7] = *(_WORD *)(v55 + 2 * v141.u32[3]);
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v131));
          uint32x4_t v145 = vmovl_high_u16(v144);
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v144.i8);
          v147.i16[0] = *(_WORD *)(v55 + 2 * v146.u32[0]);
          v147.i16[1] = *(_WORD *)(v55 + 2 * v146.u32[1]);
          v147.i16[2] = *(_WORD *)(v55 + 2 * v146.u32[2]);
          v147.i16[3] = *(_WORD *)(v55 + 2 * v146.u32[3]);
          v147.i16[4] = *(_WORD *)(v55 + 2 * v145.u32[0]);
          v147.i16[5] = *(_WORD *)(v55 + 2 * v145.u32[1]);
          v147.i16[6] = *(_WORD *)(v55 + 2 * v145.u32[2]);
          v147.i16[7] = *(_WORD *)(v55 + 2 * v145.u32[3]);
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v131));
          uint32x4_t v149 = vmovl_high_u16(v148);
          float16x8_t v150 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v148.i8);
          v150.i16[0] = *(_WORD *)(v55 + 2 * v150.u32[0]);
          v150.i16[1] = *(_WORD *)(v55 + 2 * v150.u32[1]);
          v150.i16[2] = *(_WORD *)(v55 + 2 * v150.u32[2]);
          v150.i16[3] = *(_WORD *)(v55 + 2 * v150.u32[3]);
          v150.i16[4] = *(_WORD *)(v55 + 2 * v149.u32[0]);
          v150.i16[5] = *(_WORD *)(v55 + 2 * v149.u32[1]);
          v150.i16[6] = *(_WORD *)(v55 + 2 * v149.u32[2]);
          v150.i16[7] = *(_WORD *)(v55 + 2 * v149.u32[3]);
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, (float16x8_t)0), v131));
          uint32x4_t v152 = vmovl_high_u16(v151);
          uint32x4_t v153 = vmovl_u16(*(uint16x4_t *)v151.i8);
          v154.i16[0] = *(_WORD *)(v55 + 2 * v153.u32[0]);
          v154.i16[1] = *(_WORD *)(v55 + 2 * v153.u32[1]);
          v154.i16[2] = *(_WORD *)(v55 + 2 * v153.u32[2]);
          v154.i16[3] = *(_WORD *)(v55 + 2 * v153.u32[3]);
          v154.i16[4] = *(_WORD *)(v55 + 2 * v152.u32[0]);
          v154.i16[5] = *(_WORD *)(v55 + 2 * v152.u32[1]);
          v154.i16[6] = *(_WORD *)(v55 + 2 * v152.u32[2]);
          v154.i16[7] = *(_WORD *)(v55 + 2 * v152.u32[3]);
          float16x8_t v155 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v135, v330), v139, v329), v143, v328);
          float16x8_t v156 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v135, v327), v139, v326), v143, v325);
          float16x8_t v157 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v143, v322), v139, v323), v135, v324);
          float16x8_t v158 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v147, v330), v150, v329), v154, v328);
          float16x8_t v159 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v147, v327), v150, v326), v154, v325);
          float16x8_t v160 = vmlaq_n_f16(vmulq_n_f16(v154, v322), v150, v323);
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v155, (float16x8_t)0), v131));
          uint32x4_t v162 = vmovl_high_u16(v161);
          uint32x4_t v163 = vmovl_u16(*(uint16x4_t *)v161.i8);
          v139.i16[0] = *(_WORD *)(v65 + 2 * v163.u32[0]);
          v139.i16[1] = *(_WORD *)(v65 + 2 * v163.u32[1]);
          v139.i16[2] = *(_WORD *)(v65 + 2 * v163.u32[2]);
          v139.i16[3] = *(_WORD *)(v65 + 2 * v163.u32[3]);
          v139.i16[4] = *(_WORD *)(v65 + 2 * v162.u32[0]);
          v139.i16[5] = *(_WORD *)(v65 + 2 * v162.u32[1]);
          v139.i16[6] = *(_WORD *)(v65 + 2 * v162.u32[2]);
          uint16x8_t v164 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v156, (float16x8_t)0), v131));
          uint32x4_t v165 = vmovl_high_u16(v164);
          uint32x4_t v166 = vmovl_u16(*(uint16x4_t *)v164.i8);
          v143.i16[0] = *(_WORD *)(v65 + 2 * v166.u32[0]);
          v143.i16[1] = *(_WORD *)(v65 + 2 * v166.u32[1]);
          v143.i16[2] = *(_WORD *)(v65 + 2 * v166.u32[2]);
          v143.i16[3] = *(_WORD *)(v65 + 2 * v166.u32[3]);
          v143.i16[4] = *(_WORD *)(v65 + 2 * v165.u32[0]);
          v143.i16[5] = *(_WORD *)(v65 + 2 * v165.u32[1]);
          v143.i16[6] = *(_WORD *)(v65 + 2 * v165.u32[2]);
          float16x8_t v167 = (float16x8_t)vuzp1q_s16((int16x8_t)v139, (int16x8_t)v143);
          v139.i16[7] = *(_WORD *)(v65 + 2 * v162.u32[3]);
          v143.i16[7] = *(_WORD *)(v65 + 2 * v165.u32[3]);
          uint16x8_t v168 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v157, (float16x8_t)0), v131));
          uint32x4_t v169 = vmovl_high_u16(v168);
          *(void *)&long long v170 = v169.u32[2];
          *((void *)&v170 + 1) = v169.u32[3];
          long long v171 = v170;
          *(void *)&long long v170 = v169.u32[0];
          *((void *)&v170 + 1) = v169.u32[1];
          long long v172 = v170;
          int16x8_t v173 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v168.i8);
          *((void *)&v170 + 1) = v173.u32[3];
          v173.i16[7] = (unint64_t)v173.u32[1] >> 48;
          v173.i16[0] = *(_WORD *)(v65 + 2 * v173.u32[0]);
          v173.i16[1] = *(_WORD *)(v65 + 2 * v173.u32[1]);
          v173.i16[2] = *(_WORD *)(v65 + 2 * v173.u32[2]);
          v173.i16[3] = *(_WORD *)(v65 + 2 * *((void *)&v170 + 1));
          v173.i16[4] = *(_WORD *)(v65 + 2 * v172);
          v173.i16[5] = *(_WORD *)(v65 + 2 * *((void *)&v172 + 1));
          v173.i16[6] = *(_WORD *)(v65 + 2 * v171);
          float16x8_t v174 = (float16x8_t)v173;
          v174.i16[7] = *(_WORD *)(v65 + 2 * *((void *)&v171 + 1));
          uint16x8_t v175 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v158, (float16x8_t)0), v131));
          uint32x4_t v176 = vmovl_high_u16(v175);
          float16x8_t v177 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v175.i8);
          *(void *)&long long v170 = v176.u32[2];
          *((void *)&v170 + 1) = v176.u32[3];
          long long v178 = v170;
          *(void *)&long long v170 = v176.u32[0];
          *((void *)&v170 + 1) = v176.u32[1];
          long long v179 = v170;
          *((void *)&v170 + 1) = v177.u32[3];
          v177.i16[7] = (unint64_t)v177.u32[3] >> 48;
          v177.i16[0] = *(_WORD *)(v65 + 2 * v177.u32[0]);
          v177.i16[1] = *(_WORD *)(v65 + 2 * v177.u32[1]);
          v177.i16[2] = *(_WORD *)(v65 + 2 * v177.u32[2]);
          v177.i16[3] = *(_WORD *)(v65 + 2 * *((void *)&v170 + 1));
          v177.i16[4] = *(_WORD *)(v65 + 2 * v179);
          v177.i16[5] = *(_WORD *)(v65 + 2 * *((void *)&v179 + 1));
          v177.i16[6] = *(_WORD *)(v65 + 2 * v178);
          float v180 = (__int16 *)(v65 + 2 * *((void *)&v178 + 1));
          uint16x8_t v181 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v159, (float16x8_t)0), v131));
          uint32x4_t v182 = vmovl_high_u16(v181);
          float16x8_t v183 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v181.i8);
          *(void *)&long long v170 = v182.u32[2];
          *((void *)&v170 + 1) = v182.u32[3];
          long long v184 = v170;
          *(void *)&long long v170 = v182.u32[0];
          *((void *)&v170 + 1) = v182.u32[1];
          long long v185 = v170;
          *((void *)&v170 + 1) = v183.u32[3];
          v183.i16[7] = (unint64_t)v183.u32[3] >> 48;
          v183.i16[0] = *(_WORD *)(v65 + 2 * v183.u32[0]);
          v183.i16[1] = *(_WORD *)(v65 + 2 * v183.u32[1]);
          v183.i16[2] = *(_WORD *)(v65 + 2 * v183.u32[2]);
          v183.i16[3] = *(_WORD *)(v65 + 2 * *((void *)&v170 + 1));
          v183.i16[4] = *(_WORD *)(v65 + 2 * v185);
          v183.i16[5] = *(_WORD *)(v65 + 2 * *((void *)&v185 + 1));
          v183.i16[6] = *(_WORD *)(v65 + 2 * v184);
          _Q19 = (float16x8_t)vuzp1q_s16((int16x8_t)v177, (int16x8_t)v183);
          v177.i16[7] = *v180;
          v183.i16[7] = *(_WORD *)(v65 + 2 * *((void *)&v184 + 1));
          uint16x8_t v186 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v160, v147, v324), (float16x8_t)0), v131));
          int16x8_t v187 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v186.i8);
          uint32x4_t v188 = vmovl_high_u16(v186);
          *(void *)&long long v170 = v188.u32[2];
          *((void *)&v170 + 1) = v188.u32[3];
          long long v189 = v170;
          *((void *)&v170 + 1) = v187.u32[3];
          v187.i16[7] = (unint64_t)v187.u32[3] >> 48;
          v187.i16[0] = *(_WORD *)(v65 + 2 * v187.u32[0]);
          v187.i16[1] = *(_WORD *)(v65 + 2 * v187.u32[1]);
          v187.i16[2] = *(_WORD *)(v65 + 2 * v187.u32[2]);
          v187.i16[3] = *(_WORD *)(v65 + 2 * *((void *)&v170 + 1));
          v187.i16[4] = *(_WORD *)(v65 + 2 * v188.u32[0]);
          v187.i16[5] = *(_WORD *)(v65 + 2 * v188.u32[1]);
          v187.i16[6] = *(_WORD *)(v65 + 2 * v189);
          float16x8_t v190 = (float16x8_t)v187;
          v190.i16[7] = *(_WORD *)(v65 + 2 * *((void *)&v189 + 1));
          *v72++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v352, v139, v333), v143, v332), v174, v331), v352), v350)));
          *v106++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v352, v177, v333), v183, v332), v190, v331), v352), v350)));
          int16x8_t v191 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v167, (float16x8_t)vuzp2q_s16((int16x8_t)v139, (int16x8_t)v143)), _Q19), (float16x8_t)vuzp2q_s16((int16x8_t)v177, (int16x8_t)v183));
          a4 = vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v173, v173), (float16x8_t)vtrn2q_s16((int16x8_t)v174, (int16x8_t)v174)), (float16x8_t)vtrn1q_s16(v187, v187));
          _S5 = *(float *)v355.i32;
          float16x8_t v192 = vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v351, v356, (float16x8_t)vzip1q_s16(v191, v191)), v355, (float16x8_t)vzip2q_s16(v191, v191)), v353, vaddq_f16(a4, (float16x8_t)vtrn2q_s16((int16x8_t)v190, (int16x8_t)v190))), v349);
          a4.i32[0] = v346.i32[0];
          int8x8_t v99 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(v192, v346)));
          result[v103++] = v99;
          _S11 = v319;
          _S13 = v320;
        }
        while ((int)(v103 * 8) < (int)v20 - 7);
        float16x8_t v193 = &result[v103];
        size_t v194 = v20 & 0xFFFFFFF8;
      }
      for (; v20 > v194; float16x8_t v66 = v340)
      {
        if (v77)
        {
          v99.i8[0] = *v77;
          float v195 = (float)v99.u32[0] - v45;
          a4.i8[0] = v77[1];
          float v196 = (float)a4.u32[0] - v45;
          uint16x8_t v197 = v77 + 2;
          float v198 = _S29 * v196;
          *(float *)a4.i32 = (float)(_S31 * v196) + (float)(v195 * _S13);
          *(float *)v99.i32 = _S11 * v195;
        }
        else
        {
          uint16x8_t v197 = 0;
          v99.i32[0] = 0;
          a4.i32[0] = 0;
          float v198 = 0.0;
        }
        LOBYTE(_S5) = v78->i8[0];
        float v199 = _S24 * (float)((float)LODWORD(_S5) - v42);
        float v200 = v198 + v199;
        BOOL v201 = (float)(v198 + v199) <= 8191.0;
        float v202 = 8191.0;
        if (v201)
        {
          float v202 = v200;
          if (v200 < 0.0) {
            float v202 = 0.0;
          }
        }
        float v203 = *(float *)a4.i32 + v199;
        float v204 = 8191.0;
        if (v203 <= 8191.0)
        {
          float v204 = v203;
          if (v203 < 0.0) {
            float v204 = 0.0;
          }
        }
        float v205 = *(float *)v99.i32 + v199;
        float v206 = 8191.0;
        if (v205 <= 8191.0)
        {
          float v206 = v205;
          if (v205 < 0.0) {
            float v206 = 0.0;
          }
        }
        if (v197)
        {
          LOBYTE(v205) = *v197;
          float v207 = (float)LODWORD(v205) - v45;
          LOBYTE(v203) = v197[1];
          float v208 = (float)LODWORD(v203) - v45;
          float v77 = v197 + 2;
          float v209 = _S29 * v208;
          float v203 = _S31 * v208;
          float v210 = v203 + (float)(v207 * _S13);
          float v211 = _S11 * v207;
        }
        else
        {
          float v77 = 0;
          float v211 = 0.0;
          float v210 = 0.0;
          float v209 = 0.0;
        }
        LOBYTE(v203) = v78->i8[1];
        float v212 = _S24 * (float)((float)LODWORD(v203) - v42);
        float v213 = v209 + v212;
        float v214 = 8191.0;
        float v215 = 8191.0;
        if (v213 <= 8191.0)
        {
          float v215 = v213;
          if (v213 < 0.0) {
            float v215 = 0.0;
          }
        }
        float v216 = v210 + v212;
        float v217 = 8191.0;
        if (v216 <= 8191.0)
        {
          float v217 = v216;
          if (v216 < 0.0) {
            float v217 = 0.0;
          }
        }
        float v218 = v211 + v212;
        if (v218 <= 8191.0)
        {
          float v214 = v218;
          if (v218 < 0.0) {
            float v214 = 0.0;
          }
        }
        if (v105)
        {
          LOBYTE(v218) = *v105;
          *(float *)&unsigned int v219 = (float)LODWORD(v218);
          float v220 = *(float *)&v219 - v45;
          LOBYTE(v219) = v105[1];
          float v221 = (float)v219 - v45;
          float v222 = v105 + 2;
          float v223 = _S29 * v221;
          float v224 = (float)(_S31 * v221) + (float)(v220 * _S13);
          float v225 = _S11 * v220;
        }
        else
        {
          float v222 = 0;
          float v225 = 0.0;
          float v224 = 0.0;
          float v223 = 0.0;
        }
        LOBYTE(v213) = v104->i8[0];
        float v226 = _S24 * (float)((float)LODWORD(v213) - v42);
        float v227 = v223 + v226;
        float v228 = 8191.0;
        BOOL v201 = (float)(v223 + v226) <= 8191.0;
        float v229 = 8191.0;
        if (v201)
        {
          float v229 = v227;
          if (v227 < 0.0) {
            float v229 = 0.0;
          }
        }
        float v230 = v224 + v226;
        BOOL v201 = (float)(v224 + v226) <= 8191.0;
        float v231 = 8191.0;
        if (v201)
        {
          float v231 = v230;
          if (v230 < 0.0) {
            float v231 = 0.0;
          }
        }
        float v232 = v225 + v226;
        if (v232 <= 8191.0)
        {
          float v228 = v232;
          if (v232 < 0.0) {
            float v228 = 0.0;
          }
        }
        if (v222)
        {
          LOBYTE(v232) = *v222;
          *(float *)&unsigned int v233 = (float)LODWORD(v232);
          float v234 = *(float *)&v233 - v45;
          LOBYTE(v233) = v222[1];
          float v235 = (float)v233 - v45;
          float v105 = v222 + 2;
          float v236 = _S29 * v235;
          float v237 = (float)(_S31 * v235) + (float)(v234 * _S13);
          float v238 = _S11 * v234;
        }
        else
        {
          float v105 = 0;
          float v238 = 0.0;
          float v237 = 0.0;
          float v236 = 0.0;
        }
        _Q19.i8[0] = v104->i8[1];
        *(float *)_Q19.i32 = _S24 * (float)((float)_Q19.u32[0] - v42);
        float v239 = v236 + *(float *)_Q19.i32;
        float v240 = 8191.0;
        if (v239 <= 8191.0)
        {
          float v240 = v239;
          if (v239 < 0.0) {
            float v240 = 0.0;
          }
        }
        float v241 = v237 + *(float *)_Q19.i32;
        BOOL v201 = (float)(v237 + *(float *)_Q19.i32) <= 8191.0;
        float v242 = 8191.0;
        if (v201)
        {
          float v242 = v241;
          if (v241 < 0.0) {
            float v242 = 0.0;
          }
        }
        float v243 = _S13;
        float v244 = v238 + *(float *)_Q19.i32;
        BOOL v201 = (float)(v238 + *(float *)_Q19.i32) <= 8191.0;
        float v245 = 8191.0;
        if (v201)
        {
          float v245 = v244;
          if (v244 < 0.0) {
            float v245 = 0.0;
          }
        }
        _H4 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v202, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v204, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H19 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0)));
        __asm { FCVT            S19, H19 }
        _H20 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v215, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        _H21 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v217, 0.0), 8191.0)));
        _H22 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v214, 0.0), 8191.0)));
        __asm
        {
          FCVT            S21, H21
          FCVT            S22, H22
        }
        _H0 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v231, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        _H23 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0)));
        __asm { FCVT            S23, H23 }
        _H25 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v240, 0.0), 8191.0)));
        __asm { FCVT            S25, H25 }
        _H6 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v242, 0.0), 8191.0)));
        __asm { FCVT            S6, H6 }
        unsigned int v268 = llroundf(fminf(fmaxf(v245, 0.0), 8191.0));
        _S17 = (float)((float)(v347 * _S5) + (float)(_S4 * v348)) + (float)(_S19 * v345);
        float v270 = (float)((float)(v343 * _S5) + (float)(_S4 * v344)) + (float)(_S19 * v341);
        _S5 = (float)((float)(v338 * _S5) + (float)(_S4 * v339)) + (float)(_S19 * v336);
        _S19 = (float)((float)(v347 * _S21) + (float)(_S20 * v348)) + (float)(_S22 * v345);
        float v273 = (float)((float)(v343 * _S21) + (float)(_S20 * v344)) + (float)(_S22 * v341);
        float v274 = (float)((float)(v338 * _S21) + (float)(_S20 * v339)) + (float)(_S22 * v336);
        float v275 = (float)((float)(v347 * _S1) + (float)(_S0 * v348)) + (float)(_S23 * v345);
        float v276 = (float)((float)(v343 * _S1) + (float)(_S0 * v344)) + (float)(_S23 * v341);
        _S23 = (float)((float)(v338 * _S1) + (float)(_S0 * v339)) + (float)(_S23 * v336);
        _S0 = (float)(v347 * _S6) + (float)(_S25 * v348);
        _S1 = (float)(v343 * _S6) + (float)(_S25 * v344);
        float v280 = (float)(v338 * _S6) + (float)(_S25 * v339);
        LOWORD(_S6) = *(_WORD *)(v55 + 2 * v268);
        __asm { FCVT            S6, H6 }
        _S25 = _S0 + (float)(_S6 * v345);
        float v283 = _S1 + (float)(_S6 * v341);
        float v284 = v280 + (float)(_S6 * v336);
        LOWORD(_S0) = *(_WORD *)(v65 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
        __asm { FCVT            S4, H0 }
        LOWORD(_S0) = *(_WORD *)(v65 + 2 * llroundf(fminf(fmaxf(v270, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        LOWORD(_S1) = *(_WORD *)(v65 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        LOWORD(_S5) = *(_WORD *)(v65 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        LOWORD(_S6) = *(_WORD *)(v65 + 2 * llroundf(fminf(fmaxf(v273, 0.0), 8191.0)));
        LOWORD(_S17) = *(_WORD *)(v65 + 2 * llroundf(fminf(fmaxf(v274, 0.0), 8191.0)));
        __asm
        {
          FCVT            S21, H6
          FCVT            S20, H17
        }
        LOWORD(_S6) = *(_WORD *)(v65 + 2 * llroundf(fminf(fmaxf(v275, 0.0), 8191.0)));
        __asm { FCVT            S17, H6 }
        LOWORD(_S6) = *(_WORD *)(v65 + 2 * llroundf(fminf(fmaxf(v276, 0.0), 8191.0)));
        __asm { FCVT            S6, H6 }
        LOWORD(_S19) = *(_WORD *)(v65 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
        __asm { FCVT            S22, H19 }
        LOWORD(_S19) = *(_WORD *)(v65 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
        __asm { FCVT            S19, H19 }
        LOWORD(_S23) = *(_WORD *)(v65 + 2 * llroundf(fminf(fmaxf(v283, 0.0), 8191.0)));
        LOWORD(_S25) = *(_WORD *)(v65 + 2 * llroundf(fminf(fmaxf(v284, 0.0), 8191.0)));
        __asm
        {
          FCVT            S23, H23
          FCVT            S25, H25
        }
        float v297 = (float)((float)((float)(v359 * _S0) + (float)(v360 * _S4)) + (float)(v362 * _S1)) + v50;
        if (v297 < v50) {
          float v298 = v50;
        }
        else {
          float v298 = (float)((float)((float)(v359 * _S0) + (float)(v360 * _S4)) + (float)(v362 * _S1)) + v50;
        }
        BOOL v201 = v297 <= v342;
        float v299 = (float)((float)((float)(v359 * _S21) + (float)(v360 * _S5)) + (float)(v362 * _S20)) + v50;
        if (!v201) {
          float v298 = v342;
        }
        __int8 v300 = llroundf(v298);
        if (v299 < v50) {
          float v301 = v50;
        }
        else {
          float v301 = (float)((float)((float)(v359 * _S21) + (float)(v360 * _S5)) + (float)(v362 * _S20)) + v50;
        }
        BOOL v201 = v299 <= v342;
        float v302 = (float)((float)((float)(v359 * _S6) + (float)(v360 * _S17)) + (float)(v362 * _S22)) + v50;
        if (!v201) {
          float v301 = v342;
        }
        __int8 v303 = llroundf(v301);
        if (v302 < v50) {
          float v304 = v50;
        }
        else {
          float v304 = (float)((float)((float)(v359 * _S6) + (float)(v360 * _S17)) + (float)(v362 * _S22)) + v50;
        }
        BOOL v201 = v302 <= v342;
        float v305 = (float)((float)((float)(v359 * _S23) + (float)(v360 * _S19)) + (float)(v362 * _S25)) + v50;
        if (!v201) {
          float v304 = v342;
        }
        __int8 v306 = llroundf(v304);
        if (v305 < v50) {
          float v307 = v50;
        }
        else {
          float v307 = (float)((float)((float)(v359 * _S23) + (float)(v360 * _S19)) + (float)(v362 * _S25)) + v50;
        }
        if (v305 <= v342) {
          float v308 = v307;
        }
        else {
          float v308 = v342;
        }
        float v309 = (float)((float)(_S4 + _S5) + _S17) + _S19;
        float v310 = (float)((float)(_S0 + _S21) + _S6) + _S23;
        v72->i8[0] = v300;
        v72->i8[1] = v303;
        v106->i8[0] = v306;
        v106->i8[1] = llroundf(v308);
        float v311 = (float)((float)(_S1 + _S20) + _S22) + _S25;
        float v312 = (float)((float)(v361 + (float)(v309 * v10.f32[0])) + (float)(v310 * *(float *)&v98))
             + (float)(v311 * v354);
        *(float *)_Q19.i32 = v358;
        _S5 = v358;
        if (v312 <= v358)
        {
          _S5 = (float)((float)(v361 + (float)(v309 * v10.f32[0])) + (float)(v310 * *(float *)&v98))
              + (float)(v311 * v354);
          if (v312 < v368) {
            _S5 = v368;
          }
        }
        *(float *)v99.i32 = (float)((float)(v361 + (float)(v309 * v10.f32[1])) + (float)(v310 * *((float *)&v98 + 1)))
                          + (float)(v311 * v321);
        *float16x8_t v193 = llroundf(_S5);
        *(float *)a4.i32 = v358;
        _S24 = v335;
        _S13 = v243;
        _H14 = v334;
        if (*(float *)v99.i32 <= v358)
        {
          a4.i32[0] = v99.i32[0];
          if (*(float *)v99.i32 < v368) {
            *(float *)a4.i32 = v368;
          }
        }
        v194 += 2;
        float v78 = (int8x8_t *)((char *)v78 + 2);
        float v104 = (int8x8_t *)((char *)v104 + 2);
        v193[1] = llroundf(*(float *)a4.i32);
        float v72 = (int8x8_t *)((char *)v72 + 2);
        float v106 = (int8x8_t *)((char *)v106 + 2);
        v193 += 2;
        _S29 = v357;
        _S31 = v337;
      }
      uint64_t v33 = v318;
      float v78 = (int8x8_t *)&v100[v318];
      float v77 = &v101[v32];
      float v72 = (int8x8_t *)&v102[v37];
      uint64_t result = (void *)((char *)result + v317);
      v19 += 2;
    }
    while (v23 > v19);
    if (v316 && v315)
    {
      do
      {
        uint64_t result = memcpy(v56, v35, v20);
        v35 += v313;
        v56 += v314;
        --v23;
      }
      while (v23);
    }
    else if (v315)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v56, 255, v20);
        }
        v56 += v314;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_420vf_GCD(void *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)((char *)result + 28);
  unint64_t v5 = 2 * *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    size_t v9 = *(void *)((char *)result + 20);
    uint64_t v10 = *(void *)((char *)result + 36);
    uint64_t v11 = *(void *)((char *)result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = result[14];
    uint64_t v14 = (void *)result[16];
    uint64_t v15 = result[15] + 2 * (result[13] * a2 / v5);
    uint64_t v16 = result[19];
    uint64_t v18 = (void *)result[7];
    uint64_t v17 = (uint64_t *)result[8];
    uint64_t v19 = (uint64_t *)result[17];
    uint64_t v20 = *v17;
    uint64_t v21 = v17[1];
    uint64_t v22 = v17[2];
    uint64_t v188 = v18[2];
    uint64_t v23 = (char *)(v188 + v22 * v11 + v10);
    uint64_t v24 = *v19;
    uint64_t v25 = v19[1];
    uint64_t v26 = v19[2];
    uint64_t v187 = v14[2];
    float v27 = (char *)(v187 + v26 * v15 + v13);
    *(float *)&unsigned int v28 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    float v29 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    float v30 = (float)LODWORD(a4);
    float v31 = *(float *)&v28 * *(float *)v16;
    float v32 = *(float *)&v28 * *(float *)(v16 + 8);
    float v33 = *(float *)&v28 * *(float *)(v16 + 16);
    float v34 = *(float *)&v28 * *(float *)(v16 + 20);
    float v35 = *(float *)&v28 * *(float *)(v16 + 28);
    LOWORD(v28) = *(_WORD *)(v16 + 144);
    float v36 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v16 + 146);
    float v37 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v16 + 148);
    float v38 = (float)v28;
    LOWORD(v28) = *(_WORD *)(v16 + 150);
    *(float *)&unsigned int v39 = (float)v28;
    float v206 = *(float *)&v39;
    LOWORD(v39) = *(_WORD *)(v16 + 152);
    float v200 = (float)v39;
    float v201 = v37;
    float v198 = *(float *)(v16 + 40);
    float v199 = *(float *)(v16 + 36);
    float v196 = *(float *)(v16 + 48) * 0.25;
    float v197 = *(float *)(v16 + 44);
    float v194 = *(float *)(v16 + 56) * 0.25;
    float v195 = *(float *)(v16 + 52) * 0.25;
    float v192 = *(float *)(v16 + 64) * 0.25;
    float v193 = *(float *)(v16 + 60) * 0.25;
    float v40 = *(float *)(v16 + 72);
    float v190 = *(float *)(v16 + 68) * 0.25;
    float v191 = v40;
    float v41 = *(float *)(v16 + 76);
    float v42 = *(float *)(v16 + 80);
    float v189 = v41;
    float v43 = *(float *)(v16 + 84);
    float v44 = *(float *)(v16 + 88);
    float v45 = *(float *)(v16 + 92);
    float v46 = *(float *)(v16 + 96);
    float v47 = *(float *)(v16 + 100);
    float v48 = *(float *)(v16 + 104);
    uint64_t v49 = v18[1];
    float v50 = (unsigned char *)(*v18 + *v17 * v11 + v10);
    unsigned int v51 = (unsigned char *)(v49 + v21 * v11 + v10);
    uint64_t v52 = v16 + 16548;
    uint64_t result = (void *)(v16 + 164);
    if (v49) {
      float v53 = v51;
    }
    else {
      float v53 = 0;
    }
    float v54 = (unsigned char *)(*v14 + v24 * v15 + v13);
    uint64_t v55 = v14[1] + v19[1] * (v15 / 2) + v13;
    float v204 = v33;
    float v205 = v32;
    float v202 = v35;
    float v203 = v34;
    do
    {
      __int16 v56 = &v54[v24];
      uint64_t v57 = &v53[v21];
      float v58 = &v50[v20];
      if (v9)
      {
        size_t v59 = 0;
        int32x4_t v60 = &v50[v20];
        int32x4_t v61 = &v53[v21];
        int32x4_t v62 = &v54[v24];
        do
        {
          if (v53)
          {
            LOBYTE(v41) = *v53;
            *(float *)&unsigned int v63 = (float)LODWORD(v41);
            float v64 = *(float *)&v63 - v30;
            LOBYTE(v63) = v53[1];
            float v65 = (float)v63 - v30;
            v53 += 2;
            float v66 = v32 * v65;
            float v40 = v34 * v65;
            float v67 = v40 + (float)(v64 * v33);
            float v68 = v35 * v64;
          }
          else
          {
            float v68 = 0.0;
            float v67 = 0.0;
            float v66 = 0.0;
          }
          LOBYTE(v40) = *v50;
          float v69 = v31 * (float)((float)LODWORD(v40) - v29);
          float v70 = v66 + v69;
          BOOL v71 = (float)(v66 + v69) <= 8191.0;
          float v72 = 8191.0;
          if (v71)
          {
            float v72 = v70;
            if (v70 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v67 + v69;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v68 + v69;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          if (v53)
          {
            LOBYTE(v75) = *v53;
            float v77 = (float)LODWORD(v75) - v30;
            LOBYTE(v69) = v53[1];
            float v78 = (float)LODWORD(v69) - v30;
            v53 += 2;
            float v79 = v32 * v78;
            float v80 = (float)(v34 * v78) + (float)(v77 * v33);
            float v81 = v35 * v77;
          }
          else
          {
            float v81 = 0.0;
            float v80 = 0.0;
            float v79 = 0.0;
          }
          LOBYTE(v70) = v50[1];
          float v82 = v31 * (float)((float)LODWORD(v70) - v29);
          float v83 = v79 + v82;
          float v84 = 8191.0;
          float v85 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v85 = v83;
            if (v83 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v80 + v82;
          float v87 = 8191.0;
          if ((float)(v80 + v82) <= 8191.0)
          {
            float v87 = v80 + v82;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v81 + v82;
          if (v88 <= 8191.0)
          {
            float v84 = v88;
            if (v88 < 0.0) {
              float v84 = 0.0;
            }
          }
          if (v61)
          {
            LOBYTE(v88) = *v61;
            float v89 = (float)LODWORD(v88) - v30;
            LOBYTE(v86) = v61[1];
            float v90 = (float)LODWORD(v86) - v30;
            v61 += 2;
            float v91 = v32 * v90;
            float v80 = v34 * v90;
            float v92 = v80 + (float)(v89 * v33);
            float v93 = v35 * v89;
          }
          else
          {
            float v93 = 0.0;
            float v92 = 0.0;
            float v91 = 0.0;
          }
          LOBYTE(v80) = *v60;
          float v94 = v31 * (float)((float)LODWORD(v80) - v29);
          float v95 = v91 + v94;
          float v96 = 8191.0;
          float v97 = 8191.0;
          if (v95 <= 8191.0)
          {
            float v97 = v95;
            if (v95 < 0.0) {
              float v97 = 0.0;
            }
          }
          float v98 = v92 + v94;
          BOOL v71 = (float)(v92 + v94) <= 8191.0;
          float v99 = 8191.0;
          if (v71)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          float v100 = v93 + v94;
          if (v100 <= 8191.0)
          {
            float v96 = v100;
            if (v100 < 0.0) {
              float v96 = 0.0;
            }
          }
          if (v61)
          {
            LOBYTE(v100) = *v61;
            float v101 = (float)LODWORD(v100) - v30;
            LOBYTE(v98) = v61[1];
            float v102 = (float)LODWORD(v98) - v30;
            v61 += 2;
            float v103 = v32 * v102;
            float v98 = v34 * v102;
            float v104 = v98 + (float)(v101 * v33);
            float v105 = v35 * v101;
          }
          else
          {
            float v105 = 0.0;
            float v104 = 0.0;
            float v103 = 0.0;
          }
          LOBYTE(v98) = v60[1];
          float v106 = v29;
          float v107 = v31 * (float)((float)LODWORD(v98) - v29);
          float v108 = v103 + v107;
          float v109 = 8191.0;
          if (v108 <= 8191.0)
          {
            float v109 = v108;
            if (v108 < 0.0) {
              float v109 = 0.0;
            }
          }
          float v110 = v104 + v107;
          BOOL v71 = (float)(v104 + v107) <= 8191.0;
          float v111 = 8191.0;
          if (v71)
          {
            float v111 = v110;
            if (v110 < 0.0) {
              float v111 = 0.0;
            }
          }
          float v112 = v105 + v107;
          float v113 = 8191.0;
          if (v112 <= 8191.0)
          {
            float v113 = v112;
            if (v112 < 0.0) {
              float v113 = 0.0;
            }
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H27 = *((_WORD *)result + llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H25
            FCVT            S27, H27
          }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H17 = *((_WORD *)result + llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H21 = *((_WORD *)result + llroundf(fminf(fmaxf(v109, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          unsigned int v140 = llroundf(fminf(fmaxf(v113, 0.0), 8191.0));
          _S1 = (float)((float)(v189 * _S3) + (float)(_S0 * v191)) + (float)(_S6 * v42);
          float v142 = (float)((float)(v44 * _S3) + (float)(_S0 * v43)) + (float)(_S6 * v45);
          _S3 = (float)((float)(v47 * _S3) + (float)(_S0 * v46)) + (float)(_S6 * v48);
          float v144 = (float)((float)(v189 * _S25) + (float)(_S24 * v191)) + (float)(_S27 * v42);
          float v145 = (float)((float)(v44 * _S25) + (float)(_S24 * v43)) + (float)(_S27 * v45);
          float v146 = (float)((float)(v47 * _S25) + (float)(_S24 * v46)) + (float)(_S27 * v48);
          float v147 = (float)((float)(v189 * _S5) + (float)(_S4 * v191)) + (float)(_S17 * v42);
          float v148 = (float)((float)(v44 * _S5) + (float)(_S4 * v43)) + (float)(_S17 * v45);
          float v149 = (float)((float)(v47 * _S5) + (float)(_S4 * v46)) + (float)(_S17 * v48);
          _S0 = (float)(v189 * _S7) + (float)(_S21 * v191);
          float v151 = (float)(v44 * _S7) + (float)(_S21 * v43);
          float v152 = (float)(v47 * _S7) + (float)(_S21 * v46);
          LOWORD(_S7) = *((_WORD *)result + v140);
          __asm { FCVT            S7, H7 }
          _S21 = _S0 + (float)(_S7 * v42);
          float v155 = v151 + (float)(_S7 * v45);
          float v156 = v152 + (float)(_S7 * v48);
          LOWORD(_S0) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S5, H0 }
          LOWORD(_S0) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          __asm { FCVT            S6, H1 }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H1
            FCVT            S17, H3
          }
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          __asm { FCVT            S25, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S21) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm
          {
            FCVT            S20, H21
            FCVT            S19, H19
          }
          float v170 = (float)((float)((float)(v198 * _S0) + (float)(v199 * _S5)) + (float)(v197 * _S4)) + v36;
          if (v170 < v36) {
            float v171 = v36;
          }
          else {
            float v171 = (float)((float)((float)(v198 * _S0) + (float)(v199 * _S5)) + (float)(v197 * _S4)) + v36;
          }
          BOOL v71 = v170 <= v38;
          float v172 = (float)((float)((float)(v198 * _S24) + (float)(v199 * _S6)) + (float)(v197 * _S17)) + v36;
          if (!v71) {
            float v171 = v38;
          }
          char v173 = llroundf(v171);
          if (v172 < v36) {
            float v174 = v36;
          }
          else {
            float v174 = (float)((float)((float)(v198 * _S24) + (float)(v199 * _S6)) + (float)(v197 * _S17)) + v36;
          }
          BOOL v71 = v172 <= v38;
          float v175 = (float)((float)((float)(v198 * _S7) + (float)(v199 * _S1)) + (float)(v197 * _S25)) + v36;
          if (!v71) {
            float v174 = v38;
          }
          char v176 = llroundf(v174);
          if (v175 < v36) {
            float v177 = v36;
          }
          else {
            float v177 = (float)((float)((float)(v198 * _S7) + (float)(v199 * _S1)) + (float)(v197 * _S25)) + v36;
          }
          BOOL v71 = v175 <= v38;
          float v178 = (float)((float)((float)(v198 * _S20) + (float)(v199 * _S3)) + (float)(v197 * _S19)) + v36;
          if (!v71) {
            float v177 = v38;
          }
          char v179 = llroundf(v177);
          if (v178 < v36) {
            float v180 = v36;
          }
          else {
            float v180 = (float)((float)((float)(v198 * _S20) + (float)(v199 * _S3)) + (float)(v197 * _S19)) + v36;
          }
          if (v178 <= v38) {
            float v181 = v180;
          }
          else {
            float v181 = v38;
          }
          float v182 = (float)((float)(_S5 + _S6) + _S1) + _S3;
          float v183 = (float)((float)(_S0 + _S24) + _S7) + _S20;
          *float v54 = v173;
          v54[1] = v176;
          *int32x4_t v62 = v179;
          v62[1] = llroundf(v181);
          float v40 = (float)((float)(_S4 + _S17) + _S25) + _S19;
          float v184 = (float)((float)(v201 + (float)(v182 * v196)) + (float)(v183 * v195)) + (float)(v40 * v194);
          float v185 = v200;
          if (v184 <= v200)
          {
            float v185 = (float)((float)(v201 + (float)(v182 * v196)) + (float)(v183 * v195)) + (float)(v40 * v194);
            if (v184 < v206) {
              float v185 = v206;
            }
          }
          float v186 = (float)((float)(v201 + (float)(v182 * v193)) + (float)(v183 * v192)) + (float)(v40 * v190);
          *(unsigned char *)(v55 + v59) = llroundf(v185);
          float v41 = v200;
          float v29 = v106;
          float v33 = v204;
          float v32 = v205;
          if (v186 <= v200)
          {
            float v41 = v186;
            if (v186 < v206) {
              float v41 = v206;
            }
          }
          v50 += 2;
          v60 += 2;
          v54 += 2;
          v62 += 2;
          *(unsigned char *)(v55 + v59 + 1) = llroundf(v41);
          v59 += 2;
          float v35 = v202;
          float v34 = v203;
        }
        while (v9 > v59);
      }
      float v50 = &v58[v20];
      float v53 = &v57[v21];
      float v54 = &v56[v24];
      v55 += v25;
      v8 += 2;
    }
    while (v12 > v8);
    if (v188 && v187)
    {
      do
      {
        uint64_t result = memcpy(v27, v23, v9);
        v23 += v22;
        v27 += v26;
        --v12;
      }
      while (v12);
    }
    else if (v187)
    {
      do
      {
        if (v9) {
          uint64_t result = memset(v27, 255, v9);
        }
        v27 += v26;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_420vf_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_444vf_rgb_420vf_neon_fp16_GCD(unint64_t result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    size_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 36);
    uint64_t v13 = *(void *)(result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = *(void *)(result + 112);
    uint64_t v16 = *(uint64_t **)(result + 128);
    uint64_t v17 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v7);
    uint64_t v18 = *(void *)(result + 152);
    uint64_t v19 = *(void **)(result + 56);
    uint64_t v20 = *(uint64_t **)(result + 64);
    uint64_t v21 = *(uint64_t **)(result + 136);
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v178 = v19[2];
    uint64_t v25 = (char *)(v178 + v24 * v13 + v12);
    uint64_t v26 = *v21;
    uint64_t v27 = v21[1];
    uint64_t v28 = v21[2];
    uint64_t v29 = v16[2];
    float v30 = (float)*(unsigned int *)(v18 + 136);
    unsigned int v31 = *(unsigned __int16 *)(v18 + 140);
    unsigned int v32 = *(unsigned __int16 *)(v18 + 142);
    float v33 = *(float *)v18;
    float v34 = *(float *)(v18 + 8);
    float v35 = *(float *)(v18 + 16);
    float v36 = *(float *)(v18 + 20);
    float v37 = *(float *)(v18 + 28);
    unsigned int v38 = *(unsigned __int16 *)(v18 + 144);
    unsigned int v39 = *(unsigned __int16 *)(v18 + 146);
    unsigned int v40 = *(unsigned __int16 *)(v18 + 148);
    unsigned int v41 = *(unsigned __int16 *)(v18 + 150);
    unsigned int v42 = *(unsigned __int16 *)(v18 + 152);
    _S0 = *(float *)(v18 + 36);
    _S1 = *(float *)(v18 + 40);
    _S2 = *(float *)(v18 + 44);
    v46.i32[0] = *(_DWORD *)(v18 + 48);
    v3.i32[0] = *(_DWORD *)(v18 + 52);
    v47.i32[0] = *(_DWORD *)(v18 + 56);
    float v48 = (__int32 *)(v18 + 60);
    uint64_t v49 = (__int32 *)(v18 + 64);
    unsigned int v50 = *(_DWORD *)(v18 + 128);
    unsigned int v51 = (__int32 *)(v18 + 68);
    uint64_t v52 = (char *)(v29 + v28 * v17 + v15);
    float v53 = (float)v50;
    float v54 = (float)v31;
    float v55 = v30 / v53;
    float v56 = (float)v32;
    _S5 = v55 * v33;
    _S6 = v55 * v34;
    _S7 = v55 * v35;
    _S16 = v55 * v36;
    _S17 = v55 * v37;
    float v62 = (float)v38;
    float v194 = (float)v39;
    float v63 = (float)v40;
    float v201 = (float)v41;
    float v64 = (float)v42;
    __asm { FCVT            H8, S5 }
    *(short float *)v4.i16 = (short float)v31;
    _Q23 = (float32x4_t)vdupq_lane_s16(v4, 0);
    float16x8_t v193 = (float16x8_t)_Q23;
    *(short float *)_Q23.i16 = -(short float)v32;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q23.f32, 0);
    __asm { FCVT            H9, S17 }
    short float v200 = _H9;
    __asm { FCVT            H9, S7 }
    short float v199 = _H9;
    v46.i32[1] = *v48;
    __asm { FCVT            H9, S16 }
    short float v198 = _H9;
    __asm { FMOV            V23.2S, #0.25 }
    *(float32x2_t *)v5.f32 = vmul_f32(v46, *(float32x2_t *)_Q23.f32);
    float16x8_t v191 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    v3.i32[1] = *v49;
    *(float32x2_t *)v3.f32 = vmul_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)_Q23.f32);
    float16x8_t v190 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    v47.i32[1] = *v51;
    *(float32x2_t *)_Q23.f32 = vmul_f32(v47, *(float32x2_t *)_Q23.f32);
    int16x4_t v75 = (int16x4_t)vcvt_f16_f32(_Q23);
    int32x4_t v76 = vdupq_lane_s32((int32x2_t)v75, 0);
    *(short float *)v75.i16 = (short float)v38;
    float16x8_t v77 = (float16x8_t)vdupq_lane_s16(v75, 0);
    *(short float *)v75.i16 = (short float)v39;
    int16x8_t v78 = vdupq_lane_s16(v75, 0);
    float16x8_t v187 = (float16x8_t)v78;
    float16x8_t v188 = (float16x8_t)v76;
    *(short float *)v78.i16 = (short float)v40;
    int16x8_t v79 = vdupq_lane_s16(*(int16x4_t *)v78.i8, 0);
    *(short float *)v78.i16 = (short float)v41;
    int16x8_t v80 = vdupq_lane_s16(*(int16x4_t *)v78.i8, 0);
    float16x8_t v185 = (float16x8_t)v80;
    float16x8_t v186 = (float16x8_t)v79;
    *(short float *)v80.i16 = (short float)v42;
    float16x8_t v184 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v80.i8, 0);
    if (v17 >= 0) {
      uint64_t v81 = v17;
    }
    else {
      uint64_t v81 = v17 + 1;
    }
    uint64_t v82 = *v16;
    float v83 = (unsigned char *)(v16[1] + v27 * (v81 >> 1) + v15);
    float v84 = (int8x8_t *)(v82 + v26 * v17 + v15);
    uint64_t v85 = v19[1];
    if (v85) {
      uint64_t v86 = v85 + v23 * v13 + v12;
    }
    else {
      uint64_t v86 = 0;
    }
    float v87 = (int8x8_t *)(*v19 + v22 * v13 + v12);
    uint64_t result = (v11 - 7);
    __asm { FCVT            H9, S6 }
    short float v197 = _H9;
    __asm { FCVT            H9, S0 }
    short float v183 = _H9;
    __asm { FCVT            H9, S1 }
    short float v182 = _H9;
    __asm { FCVT            H9, S2 }
    short float v181 = _H9;
    float v192 = v5.f32[0];
    uint64_t v92 = v3.i64[0];
    float v180 = v5.f32[1];
    v93.i32[0] = _Q23.i32[1];
    float v179 = _Q23.f32[1];
    float v189 = _Q23.f32[0];
    float v195 = _S7;
    float v196 = _S6;
    do
    {
      uint64_t v94 = (uint64_t)v87 + v22;
      uint64_t v95 = v86 + v23;
      float v96 = (char *)v84 + v26;
      if ((int)v11 < 8)
      {
        size_t v129 = 0;
        float16x8_t v128 = v83;
        float v100 = (int8x8_t *)((char *)v84 + v26);
        uint64_t v99 = v86 + v23;
        float v98 = (int8x8_t *)((char *)v87 + v22);
      }
      else
      {
        uint64_t v97 = 0;
        float v98 = (int8x8_t *)((char *)v87 + v22);
        uint64_t v99 = v86 + v23;
        float v100 = (int8x8_t *)((char *)v84 + v26);
        do
        {
          float16x8_t v101 = 0uLL;
          if (v86)
          {
            int8x8x2_t v203 = vld2_s8((const char *)v86);
            v86 += 16;
            *(int8x8_t *)v102.i8 = vzip1_s8(v203.val[0], 0);
            v102.u64[1] = (unint64_t)vzip2_s8(v203.val[0], 0);
            *(int8x8_t *)v103.i8 = vzip1_s8(v203.val[1], 0);
            v103.u64[1] = (unint64_t)vzip2_s8(v203.val[1], 0);
            float16x8_t v104 = vaddq_f16(v70, vcvtq_f16_u16(v102));
            float16x8_t v105 = vaddq_f16(v70, vcvtq_f16_u16(v103));
            float16x8_t v106 = vmulq_n_f16(v105, v197);
            float16x8_t v107 = vmlaq_n_f16(vmulq_n_f16(v104, v199), v105, v198);
            float16x8_t v108 = vmulq_n_f16(v104, v200);
          }
          else
          {
            float16x8_t v108 = 0uLL;
            float16x8_t v107 = 0uLL;
            float16x8_t v106 = 0uLL;
          }
          int8x8_t v109 = *v87++;
          int8x8_t v110 = v109;
          if (v99)
          {
            int8x8x2_t v202 = vld2_s8((const char *)v99);
            v99 += 16;
            *(int8x8_t *)v111.i8 = vzip1_s8(v202.val[0], 0);
            v111.u64[1] = (unint64_t)vzip2_s8(v202.val[0], 0);
            *(int8x8_t *)v112.i8 = vzip1_s8(v202.val[1], 0);
            v112.u64[1] = (unint64_t)vzip2_s8(v202.val[1], 0);
            float16x8_t v113 = vaddq_f16(v70, vcvtq_f16_u16(v111));
            float16x8_t v114 = vaddq_f16(v70, vcvtq_f16_u16(v112));
            float16x8_t v115 = vmulq_n_f16(v114, v197);
            float16x8_t v116 = vmlaq_n_f16(vmulq_n_f16(v113, v199), v114, v198);
            float16x8_t v101 = vmulq_n_f16(v113, v200);
          }
          else
          {
            float16x8_t v116 = 0uLL;
            float16x8_t v115 = 0uLL;
          }
          *(int8x8_t *)v3.f32 = vzip1_s8(v110, 0);
          *(int8x8_t *)&v3.u32[2] = vzip2_s8(v110, 0);
          int8x8_t v117 = *v98++;
          *(int8x8_t *)v118.i8 = vzip1_s8(v117, 0);
          v118.u64[1] = (unint64_t)vzip2_s8(v117, 0);
          float16x8_t v119 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v3), v193);
          float16x8_t v120 = vmlaq_n_f16(v106, v119, _H8);
          float16x8_t v121 = vmlaq_n_f16(v107, v119, _H8);
          float16x8_t v122 = vmlaq_n_f16(v108, v119, _H8);
          float16x8_t v123 = vsubq_f16(vcvtq_f16_u16(v118), v193);
          float16x8_t v124 = vmlaq_n_f16(v115, v123, _H8);
          float16x8_t v125 = vmlaq_n_f16(v116, v123, _H8);
          float16x8_t v126 = vmlaq_n_f16(v101, v123, _H8);
          *v84++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v77, v120, v183), v121, v182), v122, v181), v77), v186)));
          *v100++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v77, v124, v183), v125, v182), v126, v181), v77), v186)));
          int16x8_t v127 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v124, (int16x8_t)v125), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v120, (int16x8_t)v121), (float16x8_t)vuzp2q_s16((int16x8_t)v120, (int16x8_t)v121)), (float16x8_t)vuzp1q_s16((int16x8_t)v124, (int16x8_t)v125)));
          v3.i32[0] = v184.i32[0];
          int8x8_t v93 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v187, v191, (float16x8_t)vzip1q_s16(v127, v127)), v190, (float16x8_t)vzip2q_s16(v127, v127)), v188, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v126, (int16x8_t)v126), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v122, (int16x8_t)v122), (float16x8_t)vtrn2q_s16((int16x8_t)v122, (int16x8_t)v122)), (float16x8_t)vtrn1q_s16((int16x8_t)v126, (int16x8_t)v126)))), v185), v184)));
          *(int8x8_t *)&v83[v97] = v93;
          v97 += 8;
        }
        while ((int)v97 < (int)result);
        float16x8_t v128 = &v83[v97];
        size_t v129 = v11 & 0xFFFFFFF8;
      }
      for (; v11 > v129; _S6 = v196)
      {
        float v130 = 0.0;
        if (v86)
        {
          v93.i8[0] = *(unsigned char *)v86;
          *(float *)v93.i32 = (float)v93.u32[0] - v56;
          v3.i8[0] = *(unsigned char *)(v86 + 1);
          float v131 = (float)v3.u32[0] - v56;
          v86 += 2;
          float v132 = _S6 * v131;
          v3.f32[0] = _S16 * v131;
          float v133 = v3.f32[0] + (float)(*(float *)v93.i32 * _S7);
          float v134 = _S17 * *(float *)v93.i32;
          if (v86)
          {
            v93.i8[0] = *(unsigned char *)v86;
            *(float *)v93.i32 = (float)v93.u32[0] - v56;
            v3.i8[0] = *(unsigned char *)(v86 + 1);
            float v135 = (float)v3.u32[0] - v56;
            v86 += 2;
            float v136 = _S6 * v135;
            float v137 = (float)(_S16 * v135) + (float)(*(float *)v93.i32 * _S7);
            float v130 = _S17 * *(float *)v93.i32;
            goto LABEL_26;
          }
        }
        else
        {
          float v134 = 0.0;
          float v133 = 0.0;
          float v132 = 0.0;
        }
        float v137 = 0.0;
        float v136 = 0.0;
LABEL_26:
        float v138 = 0.0;
        if (!v99)
        {
          float v143 = 0.0;
          float v142 = 0.0;
          v93.i32[0] = 0;
LABEL_30:
          float v148 = 0.0;
          float v147 = 0.0;
          goto LABEL_31;
        }
        v93.i8[0] = *(unsigned char *)v99;
        *(float *)&unsigned int v139 = (float)v93.u32[0];
        float v140 = *(float *)&v139 - v56;
        LOBYTE(v139) = *(unsigned char *)(v99 + 1);
        float v141 = (float)v139 - v56;
        v99 += 2;
        *(float *)v93.i32 = _S6 * v141;
        float v142 = (float)(_S16 * v141) + (float)(v140 * _S7);
        float v143 = _S17 * v140;
        if (!v99) {
          goto LABEL_30;
        }
        LOBYTE(v140) = *(unsigned char *)v99;
        *(float *)&unsigned int v144 = (float)LODWORD(v140);
        float v145 = *(float *)&v144 - v56;
        LOBYTE(v144) = *(unsigned char *)(v99 + 1);
        float v146 = (float)v144 - v56;
        v99 += 2;
        float v147 = _S6 * v146;
        float v148 = (float)(_S16 * v146) + (float)(v145 * _S7);
        float v138 = _S17 * v145;
LABEL_31:
        LOBYTE(v2) = v87->i8[0];
        *(float *)&unsigned int v149 = _S5 * (float)((float)LODWORD(v2) - v54);
        float v150 = v132 + *(float *)&v149;
        float v151 = v133 + *(float *)&v149;
        float v152 = v134 + *(float *)&v149;
        LOBYTE(v149) = v87->i8[1];
        *(float *)&unsigned int v153 = _S5 * (float)((float)v149 - v54);
        float v154 = v136 + *(float *)&v153;
        float v155 = v137 + *(float *)&v153;
        float v156 = v130 + *(float *)&v153;
        LOBYTE(v153) = v98->i8[0];
        float v157 = _S5 * (float)((float)v153 - v54);
        float v158 = *(float *)v93.i32 + v157;
        float v159 = v142 + v157;
        float v2 = v143 + v157;
        LOBYTE(v143) = v98->i8[1];
        float v160 = _S5 * (float)((float)LODWORD(v143) - v54);
        float v161 = v147 + v160;
        float v162 = v148 + v160;
        float v163 = v138 + v160;
        float v164 = (float)((float)((float)(_S1 * v151) + (float)(_S0 * v150)) + (float)(_S2 * v152)) + v62;
        float v165 = (float)((float)((float)(_S1 * v155) + (float)(_S0 * v154)) + (float)(_S2 * v156)) + v62;
        float v166 = (float)((float)((float)(_S1 * v159) + (float)(_S0 * v158)) + (float)(_S2 * v2)) + v62;
        if (v164 < v62) {
          float v167 = v62;
        }
        else {
          float v167 = (float)((float)((float)(_S1 * v151) + (float)(_S0 * v150)) + (float)(_S2 * v152)) + v62;
        }
        if (v164 > v63) {
          float v167 = v63;
        }
        v84->i8[0] = llroundf(v167);
        if (v165 < v62) {
          float v168 = v62;
        }
        else {
          float v168 = (float)((float)((float)(_S1 * v155) + (float)(_S0 * v154)) + (float)(_S2 * v156)) + v62;
        }
        if (v165 > v63) {
          float v168 = v63;
        }
        float v169 = (float)((float)((float)(_S1 * v162) + (float)(_S0 * v161)) + (float)(_S2 * v163)) + v62;
        v84->i8[1] = llroundf(v168);
        if (v166 < v62) {
          float v170 = v62;
        }
        else {
          float v170 = (float)((float)((float)(_S1 * v159) + (float)(_S0 * v158)) + (float)(_S2 * v2)) + v62;
        }
        if (v166 > v63) {
          float v170 = v63;
        }
        v100->i8[0] = llroundf(v170);
        if (v169 < v62) {
          float v171 = v62;
        }
        else {
          float v171 = (float)((float)((float)(_S1 * v162) + (float)(_S0 * v161)) + (float)(_S2 * v163)) + v62;
        }
        if (v169 <= v63) {
          float v172 = v171;
        }
        else {
          float v172 = v63;
        }
        v100->i8[1] = llroundf(v172);
        float v173 = (float)((float)(v150 + v154) + v158) + v161;
        float v174 = (float)((float)(v151 + v155) + v159) + v162;
        float v175 = (float)((float)(v152 + v156) + v2) + v163;
        float v176 = (float)((float)(v194 + (float)(v173 * v192)) + (float)(v174 * *(float *)&v92)) + (float)(v175 * v189);
        float v177 = v64;
        if (v176 <= v64)
        {
          float v177 = (float)((float)(v194 + (float)(v173 * v192)) + (float)(v174 * *(float *)&v92)) + (float)(v175 * v189);
          if (v176 < v201) {
            float v177 = v201;
          }
        }
        *(float *)v93.i32 = (float)((float)(v194 + (float)(v173 * v180)) + (float)(v174 * *((float *)&v92 + 1)))
                          + (float)(v175 * v179);
        *float16x8_t v128 = llroundf(v177);
        v3.f32[0] = v64;
        if (*(float *)v93.i32 <= v64)
        {
          v3.i32[0] = v93.i32[0];
          if (*(float *)v93.i32 < v201) {
            v3.f32[0] = v201;
          }
        }
        v129 += 2;
        float v87 = (int8x8_t *)((char *)v87 + 2);
        float v98 = (int8x8_t *)((char *)v98 + 2);
        v128[1] = llroundf(v3.f32[0]);
        float v84 = (int8x8_t *)((char *)v84 + 2);
        float v100 = (int8x8_t *)((char *)v100 + 2);
        v128 += 2;
        _S7 = v195;
      }
      float v87 = (int8x8_t *)(v94 + v22);
      uint64_t v86 = v95 + v23;
      float v84 = (int8x8_t *)&v96[v26];
      v83 += v27;
      v10 += 2;
    }
    while (v14 > v10);
    if (v178 && v29)
    {
      do
      {
        uint64_t result = (unint64_t)memcpy(v52, v25, v11);
        v25 += v24;
        v52 += v28;
        --v14;
      }
      while (v14);
    }
    else if (v29)
    {
      do
      {
        if (v11) {
          uint64_t result = (unint64_t)memset(v52, 255, v11);
        }
        v52 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_420vf_GCD);
  return 0;
}

void *vt_Copy_444vf_rgb_420vf_GCD(void *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v13 = *(void *)((char *)result + 28);
  unint64_t v14 = 2 * *(unsigned __int8 *)result;
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (2 * v16 == 2 * v15) {
    return result;
  }
  unint64_t v17 = 0;
  size_t v18 = *(void *)((char *)result + 20);
  uint64_t v19 = *(void *)((char *)result + 36);
  uint64_t v20 = *(void *)((char *)result + 44) + 2 * v15;
  unint64_t v21 = 2 * v16 - 2 * v15;
  uint64_t v22 = result[14];
  uint64_t v23 = (void *)result[16];
  uint64_t v24 = result[15] + 2 * (result[13] * a2 / v14);
  uint64_t v25 = result[19];
  uint64_t v27 = (void *)result[7];
  uint64_t v26 = (uint64_t *)result[8];
  uint64_t v28 = (uint64_t *)result[17];
  uint64_t v29 = *v26;
  uint64_t v30 = v26[1];
  uint64_t v31 = v26[2];
  uint64_t v32 = v27[2];
  uint64_t v33 = (char *)(v32 + v31 * v20 + v19);
  uint64_t v34 = *v28;
  uint64_t v35 = v28[1];
  uint64_t v36 = v28[2];
  uint64_t v37 = v23[2];
  float v38 = (float)*(unsigned int *)(v25 + 136) / (float)*(unsigned int *)(v25 + 128);
  LOWORD(a6) = *(_WORD *)(v25 + 140);
  LOWORD(a7) = *(_WORD *)(v25 + 142);
  float v39 = *(float *)v25;
  float v40 = *(float *)(v25 + 8);
  float v41 = *(float *)(v25 + 16);
  float v42 = *(float *)(v25 + 20);
  float v43 = *(float *)(v25 + 28);
  LOWORD(v8) = *(_WORD *)(v25 + 144);
  LOWORD(v9) = *(_WORD *)(v25 + 146);
  LOWORD(v10) = *(_WORD *)(v25 + 148);
  LOWORD(v11) = *(_WORD *)(v25 + 150);
  LOWORD(v12) = *(_WORD *)(v25 + 152);
  float v44 = *(float *)(v25 + 36);
  float v45 = *(float *)(v25 + 40);
  float v46 = *(float *)(v25 + 44);
  float v47 = *(float *)(v25 + 48);
  float v48 = *(float *)(v25 + 52);
  float v49 = *(float *)(v25 + 56);
  float v50 = *(float *)(v25 + 60);
  float v51 = *(float *)(v25 + 64);
  float v52 = *(float *)(v25 + 68);
  uint64_t v53 = v27[1];
  float v54 = (unsigned char *)(*v27 + v29 * v20 + v19);
  float v55 = (unsigned char *)(v53 + v30 * v20 + v19);
  float v56 = (char *)(v37 + v36 * v24 + v22);
  float v57 = (float)LODWORD(a6);
  float v58 = (float)LODWORD(a7);
  float v59 = v38 * v39;
  float v60 = v38 * v40;
  float v61 = v38 * v41;
  float v62 = v38 * v42;
  float v63 = v38 * v43;
  float v64 = (float)v8;
  float v65 = (float)v9;
  float v66 = (float)v10;
  float v67 = (float)v11;
  float v68 = (float)v12;
  float v69 = v47 * 0.25;
  float v136 = v48 * 0.25;
  float v137 = v47 * 0.25;
  float v134 = v50 * 0.25;
  float v135 = v49 * 0.25;
  float v70 = v51 * 0.25;
  float v71 = v52 * 0.25;
  float v132 = v52 * 0.25;
  float v133 = v51 * 0.25;
  if (v53) {
    float v72 = v55;
  }
  else {
    float v72 = 0;
  }
  float v73 = (unsigned char *)(*v23 + v34 * v24 + v22);
  uint64_t v74 = *(void *)(result[16] + 8) + v35 * (v24 / 2) + v22;
  do
  {
    uint64_t result = &v73[v34];
    int16x4_t v75 = &v72[v30];
    int32x4_t v76 = &v54[v29];
    if (v18)
    {
      size_t v77 = 0;
      int16x8_t v78 = &v54[v29];
      int16x8_t v79 = &v72[v30];
      int16x8_t v80 = &v73[v34];
      do
      {
        float v81 = 0.0;
        if (v72)
        {
          LOBYTE(v71) = *v72;
          float v71 = (float)LODWORD(v71) - v58;
          LOBYTE(v69) = v72[1];
          float v82 = (float)LODWORD(v69) - v58;
          v72 += 2;
          float v83 = v60 * v82;
          float v84 = (float)(v62 * v82) + (float)(v71 * v61);
          float v85 = v63 * v71;
          if (v72)
          {
            LOBYTE(v71) = *v72;
            float v71 = (float)LODWORD(v71) - v58;
            LOBYTE(v81) = v72[1];
            float v86 = (float)LODWORD(v81) - v58;
            v72 += 2;
            float v87 = v60 * v86;
            float v88 = (float)(v62 * v86) + (float)(v71 * v61);
            float v81 = v63 * v71;
            goto LABEL_13;
          }
        }
        else
        {
          float v85 = 0.0;
          float v84 = 0.0;
          float v83 = 0.0;
        }
        float v88 = 0.0;
        float v87 = 0.0;
LABEL_13:
        float v89 = 0.0;
        if (!v79)
        {
          float v94 = 0.0;
          float v93 = 0.0;
          float v92 = 0.0;
LABEL_17:
          float v99 = 0.0;
          float v98 = 0.0;
          goto LABEL_18;
        }
        LOBYTE(v71) = *v79;
        float v90 = (float)LODWORD(v71) - v58;
        LOBYTE(v7) = v79[1];
        float v91 = (float)LODWORD(v7) - v58;
        v79 += 2;
        float v92 = v60 * v91;
        float v93 = (float)(v62 * v91) + (float)(v90 * v61);
        float v94 = v63 * v90;
        if (!v79) {
          goto LABEL_17;
        }
        LOBYTE(v90) = *v79;
        *(float *)&unsigned int v95 = (float)LODWORD(v90);
        float v96 = *(float *)&v95 - v58;
        LOBYTE(v95) = v79[1];
        float v97 = (float)v95 - v58;
        v79 += 2;
        float v98 = v60 * v97;
        float v99 = (float)(v62 * v97) + (float)(v96 * v61);
        float v89 = v63 * v96;
LABEL_18:
        LOBYTE(v70) = *v54;
        *(float *)&unsigned int v100 = v59 * (float)((float)LODWORD(v70) - v57);
        float v101 = v83 + *(float *)&v100;
        float v102 = v84 + *(float *)&v100;
        float v103 = v85 + *(float *)&v100;
        LOBYTE(v100) = v54[1];
        *(float *)&unsigned int v104 = v59 * (float)((float)v100 - v57);
        float v105 = v87 + *(float *)&v104;
        float v106 = v88 + *(float *)&v104;
        float v107 = v81 + *(float *)&v104;
        LOBYTE(v104) = *v78;
        float v108 = v59 * (float)((float)v104 - v57);
        float v109 = v92 + v108;
        float v110 = v93 + v108;
        float v111 = v94 + v108;
        LOBYTE(v94) = v78[1];
        float v112 = v59 * (float)((float)LODWORD(v94) - v57);
        float v113 = v98 + v112;
        float v114 = v99 + v112;
        float v115 = v89 + v112;
        float v7 = (float)((float)((float)(v45 * v102) + (float)(v44 * v101)) + (float)(v46 * v103)) + v64;
        float v116 = (float)((float)((float)(v45 * v106) + (float)(v44 * v105)) + (float)(v46 * v107)) + v64;
        float v117 = (float)((float)((float)(v45 * v110) + (float)(v44 * v109)) + (float)(v46 * v111)) + v64;
        if (v7 < v64) {
          float v118 = v64;
        }
        else {
          float v118 = (float)((float)((float)(v45 * v102) + (float)(v44 * v101)) + (float)(v46 * v103)) + v64;
        }
        if (v7 > v66) {
          float v118 = v66;
        }
        *float v73 = llroundf(v118);
        if (v116 < v64) {
          float v119 = v64;
        }
        else {
          float v119 = (float)((float)((float)(v45 * v106) + (float)(v44 * v105)) + (float)(v46 * v107)) + v64;
        }
        if (v116 <= v66) {
          float v120 = v119;
        }
        else {
          float v120 = v66;
        }
        char v121 = llroundf(v120);
        float v122 = (float)((float)((float)(v45 * v114) + (float)(v44 * v113)) + (float)(v46 * v115)) + v64;
        v73[1] = v121;
        if (v117 < v64) {
          float v123 = v64;
        }
        else {
          float v123 = (float)((float)((float)(v45 * v110) + (float)(v44 * v109)) + (float)(v46 * v111)) + v64;
        }
        if (v117 <= v66) {
          float v124 = v123;
        }
        else {
          float v124 = v66;
        }
        *int16x8_t v80 = llroundf(v124);
        if (v122 < v64) {
          float v125 = v64;
        }
        else {
          float v125 = (float)((float)((float)(v45 * v114) + (float)(v44 * v113)) + (float)(v46 * v115)) + v64;
        }
        if (v122 <= v66) {
          float v126 = v125;
        }
        else {
          float v126 = v66;
        }
        v80[1] = llroundf(v126);
        float v127 = (float)((float)(v101 + v105) + v109) + v113;
        float v128 = (float)((float)(v102 + v106) + v110) + v114;
        float v129 = (float)((float)(v103 + v107) + v111) + v115;
        float v130 = (float)((float)(v65 + (float)(v127 * v137)) + (float)(v128 * v136)) + (float)(v129 * v135);
        float v69 = v68;
        if (v130 <= v68)
        {
          float v69 = (float)((float)(v65 + (float)(v127 * v137)) + (float)(v128 * v136)) + (float)(v129 * v135);
          if (v130 < v67) {
            float v69 = v67;
          }
        }
        float v70 = v132;
        float v131 = (float)((float)(v65 + (float)(v127 * v134)) + (float)(v128 * v133)) + (float)(v129 * v132);
        *(unsigned char *)(v74 + v77) = llroundf(v69);
        float v71 = v68;
        if (v131 <= v68)
        {
          float v71 = v131;
          if (v131 < v67) {
            float v71 = v67;
          }
        }
        v54 += 2;
        v78 += 2;
        v73 += 2;
        v80 += 2;
        *(unsigned char *)(v74 + v77 + 1) = llroundf(v71);
        v77 += 2;
      }
      while (v18 > v77);
    }
    float v54 = &v76[v29];
    float v72 = &v75[v30];
    float v73 = (char *)result + v34;
    v74 += v35;
    v17 += 2;
  }
  while (v21 > v17);
  if (v32 && v37)
  {
    do
    {
      uint64_t result = memcpy(v56, v33, v18);
      v33 += v31;
      v56 += v36;
      --v21;
    }
    while (v21);
  }
  else if (v37)
  {
    do
    {
      if (v18) {
        uint64_t result = memset(v56, 255, v18);
      }
      v56 += v36;
      --v21;
    }
    while (v21);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v14 = *(void *)((char *)result + 28);
  unint64_t v15 = 2 * *(unsigned __int8 *)result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (2 * v17 != 2 * v16)
  {
    unint64_t v18 = 0;
    unint64_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    uint64_t v21 = *(void *)((char *)result + 44) + 2 * v16;
    unint64_t v370 = 2 * v17 - 2 * v16;
    uint64_t v22 = result[14];
    unint64_t v23 = result[13] * a2;
    uint64_t v24 = result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = result[15];
    uint64_t v28 = (void *)result[16];
    uint64_t v29 = (uint64_t *)result[17];
    uint64_t v30 = *v26;
    uint64_t v31 = v26[1];
    uint64_t v33 = *v29;
    uint64_t v32 = v29[1];
    unsigned int v34 = *(unsigned __int16 *)(v24 + 140);
    uint64_t v35 = v27 + 2 * (v23 / v15);
    uint64_t v362 = v26[2];
    uint64_t v363 = v29[2];
    uint64_t v364 = v28[2];
    uint64_t v365 = v25[2];
    uint64_t v36 = (unsigned __int8 *)(v365 + v362 * v21 + v20);
    unsigned int v37 = *(unsigned __int16 *)(v24 + 142);
    LODWORD(a7) = *(_DWORD *)(v24 + 8);
    LODWORD(a9) = *(_DWORD *)(v24 + 16);
    LODWORD(v23) = *(unsigned __int16 *)(v24 + 144);
    unsigned int v38 = *(unsigned __int16 *)(v24 + 146);
    LODWORD(v27) = *(unsigned __int16 *)(v24 + 148);
    float v39 = (float)v34;
    *(short float *)v11.i16 = (short float)v34;
    unsigned int v40 = *(unsigned __int16 *)(v24 + 150);
    _Q25.i32[0] = *(_DWORD *)(v24 + 44);
    float v42 = (float)v37;
    short float v43 = (short float)v37;
    unsigned int v46 = *(unsigned __int16 *)(v24 + 152);
    float v47 = (float)v23;
    *(short float *)v12.i16 = (short float)v23;
    uint64_t v48 = v24 + 16548;
    float v49 = (char *)(v364 + v363 * v35 + 2 * v22);
    float v418 = (float)v38;
    *(short float *)v13.i16 = (short float)v38;
    uint64_t result = &unk_193E7D000;
    float v50 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    _S28 = v50 * *(float *)v24;
    _S15 = v50 * *(float *)&a7;
    _S2 = v50 * *(float *)&a9;
    _S9 = v50 * *(float *)(v24 + 20);
    *(float *)&a4 = (float)v27;
    float v394 = (float)v27;
    _S8 = v50 * *(float *)(v24 + 28);
    float v425 = (float)v40;
    *(float *)&a3 = (float)v46;
    float v417 = (float)v46;
    *(short float *)&a3 = (short float)v27;
    *(short float *)&a4 = (short float)v40;
    *(short float *)&a7 = (short float)v46;
    unsigned int v56 = *(unsigned __int8 *)(v24 + 132);
    if (v56 >= 0x11) {
      unsigned __int8 v57 = 0;
    }
    else {
      unsigned __int8 v57 = 16 - v56;
    }
    if (v35 >= 0) {
      uint64_t v58 = v35;
    }
    else {
      uint64_t v58 = v35 + 1;
    }
    uint64_t v366 = v32;
    uint64_t v59 = v28[1] + v32 * (v58 >> 1);
    uint64_t v60 = v24 + 164;
    uint64_t v61 = *v28 + v33 * v35;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(v11, 0);
    *(short float *)&a9 = -v43;
    float16x8_t v424 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    __asm { FMOV            V6.2S, #0.25 }
    v44.i32[1] = *(_DWORD *)(v24 + 60);
    v44.i32[0] = *(_DWORD *)(v24 + 48);
    *(float32x2_t *)v9.i8 = vmul_f32(v44, _D6);
    float16x8_t v414 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v9), 0);
    v10.i32[1] = *(_DWORD *)(v24 + 64);
    v10.i32[0] = *(_DWORD *)(v24 + 52);
    *(float32x2_t *)v10.f32 = vmul_f32(*(float32x2_t *)v10.f32, _D6);
    float32x4_t v68 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v413 = (float16x8_t)v68;
    v45.i32[1] = *(_DWORD *)(v24 + 68);
    v45.i32[0] = *(_DWORD *)(v24 + 56);
    *(float32x2_t *)v68.f32 = vmul_f32(v45, _D6);
    float16x8_t v412 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v68), 0);
    float16x8_t v411 = (float16x8_t)vdupq_lane_s16(v12, 0);
    float16x8_t v409 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float16x8_t v410 = (float16x8_t)vdupq_lane_s16(v13, 0);
    uint64_t v69 = v24 + 32932;
    float16x8_t v407 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a7, 0);
    float16x8_t v408 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    uint64_t v70 = v59 + 2 * v22;
    float v71 = (uint16x8_t *)(v61 + 2 * v22);
    uint64_t v74 = v25;
    uint64_t v72 = *v25;
    uint64_t v73 = v74[1];
    _ZF = v73 == 0;
    int16x4_t v75 = (unsigned char *)(v73 + v31 * v21 + v20);
    if (_ZF) {
      int32x4_t v76 = 0;
    }
    else {
      int32x4_t v76 = v75;
    }
    size_t v77 = (int8x8_t *)(v72 + v30 * v21 + v20);
    _S20 = *(float *)(v24 + 120);
    __asm
    {
      FCVT            H4, S28
      FCVT            H14, S8
    }
    short float v423 = _H14;
    __asm { FCVT            H14, S2 }
    short float v422 = _H14;
    __asm { FCVT            H14, S9 }
    short float v421 = _H14;
    __asm { FCVT            H14, S15 }
    short float v420 = _H14;
    float v406 = *(float *)(v24 + 36);
    __asm { FCVT            H0, S0 }
    short float v390 = _H0;
    float v405 = *(float *)(v24 + 40);
    __asm { FCVT            H0, S1 }
    short float v389 = _H0;
    float v419 = *(float *)(v24 + 44);
    __asm { FCVT            H0, S25 }
    short float v388 = _H0;
    float v371 = *(float *)(v24 + 112);
    float v372 = *(float *)(v24 + 108);
    __asm { FCVT            H0, S31 }
    short float v387 = _H0;
    __asm { FCVT            H0, S11 }
    short float v386 = _H0;
    float v391 = *(float *)(v24 + 116);
    __asm { FCVT            H0, S13 }
    short float v385 = _H0;
    __asm { FCVT            H0, S20 }
    short float v384 = _H0;
    float v404 = *(float *)(v24 + 72);
    __asm { FCVT            H0, S6 }
    short float v383 = _H0;
    float v403 = *(float *)(v24 + 76);
    __asm { FCVT            H0, S17 }
    short float v382 = _H0;
    float v402 = *(float *)(v24 + 80);
    __asm { FCVT            H0, S21 }
    short float v381 = _H0;
    float v401 = *(float *)(v24 + 84);
    __asm { FCVT            H0, S22 }
    short float v380 = _H0;
    float v400 = *(float *)(v24 + 88);
    __asm { FCVT            H0, S10 }
    short float v379 = _H0;
    float v398 = *(float *)(v24 + 92);
    __asm { FCVT            H0, S23 }
    short float v378 = _H0;
    float v397 = *(float *)(v24 + 96);
    __asm { FCVT            H0, S24 }
    short float v377 = _H0;
    float v395 = *(float *)(v24 + 100);
    __asm { FCVT            H0, S26 }
    short float v376 = _H0;
    float v393 = *(float *)(v24 + 104);
    __asm { FCVT            H0, S18 }
    short float v375 = _H0;
    float v100 = *(float *)&v9.i32[1];
    float v415 = *(float *)v9.i32;
    uint64_t v101 = v10.i64[0];
    float v374 = *(float *)&v9.i32[1];
    int16x8_t v102 = vdupq_n_s16(v57);
    uint16x8_t v373 = (uint16x8_t)v102;
    uint64_t v368 = v26[1];
    uint64_t v369 = *v26;
    uint64_t v367 = v33;
    float v428 = _S2;
    float v429 = _S15;
    float v426 = _S8;
    float v427 = _S9;
    float16x8_t v416 = v62;
    float v399 = v42;
    short float v396 = _H4;
    float v392 = _S28;
    do
    {
      float v103 = (char *)v77 + v30;
      unsigned int v104 = &v76[v31];
      float v105 = (uint16x8_t *)((char *)v71 + v33);
      if ((int)v19 < 8)
      {
        unint64_t v208 = 0;
        float v110 = (int16x8_t *)v70;
        float v109 = (uint16x8_t *)((char *)v71 + v33);
        float v108 = &v76[v31];
        float v107 = (int8x8_t *)((char *)v77 + v30);
      }
      else
      {
        int v106 = 0;
        float v107 = (int8x8_t *)((char *)v77 + v30);
        float v108 = &v76[v31];
        float v109 = v105;
        float v110 = (int16x8_t *)v70;
        do
        {
          float16x8_t v111 = 0uLL;
          if (v76)
          {
            int8x8x2_t v430 = vld2_s8(v76);
            v76 += 16;
            *(int8x8_t *)v112.i8 = vzip1_s8(v430.val[0], 0);
            v112.u64[1] = (unint64_t)vzip2_s8(v430.val[0], 0);
            *(int8x8_t *)v113.i8 = vzip1_s8(v430.val[1], 0);
            v113.u64[1] = (unint64_t)vzip2_s8(v430.val[1], 0);
            float16x8_t v114 = vaddq_f16(v424, vcvtq_f16_u16(v112));
            float16x8_t v115 = vaddq_f16(v424, vcvtq_f16_u16(v113));
            float16x8_t v116 = vmulq_n_f16(v115, v420);
            float16x8_t v117 = vmlaq_n_f16(vmulq_n_f16(v114, v422), v115, v421);
            float16x8_t v118 = vmulq_n_f16(v114, v423);
          }
          else
          {
            float16x8_t v118 = 0uLL;
            float16x8_t v117 = 0uLL;
            float16x8_t v116 = 0uLL;
          }
          int8x8_t v119 = *v77++;
          *(int8x8_t *)v120.i8 = vzip1_s8(v119, 0);
          v120.u64[1] = (unint64_t)vzip2_s8(v119, 0);
          float16x8_t v121 = vsubq_f16(vcvtq_f16_u16(v120), v62);
          float16x8_t v122 = vmlaq_n_f16(v116, v121, _H4);
          float16x8_t v123 = vmlaq_n_f16(v117, v121, _H4);
          float16x8_t v124 = vmlaq_n_f16(v118, v121, _H4);
          if (v108)
          {
            float16x8_t v431 = (float16x8_t)vld2_s8(v108);
            v108 += 16;
            *(int8x8_t *)v125.i8 = vzip1_s8(*(int8x8_t *)v431.i8, 0);
            v125.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v431.i8, 0);
            *(int8x8_t *)v126.i8 = vzip1_s8((int8x8_t)v431.u64[1], 0);
            v126.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v431.u64[1], 0);
            *(float16x8_t *)((char *)&v431 + 8) = vaddq_f16(v424, vcvtq_f16_u16(v125));
            float16x8_t v431 = vaddq_f16(v424, vcvtq_f16_u16(v126));
            float16x8_t v127 = vmulq_n_f16(v431, v420);
            float16x8_t v128 = vmlaq_n_f16(vmulq_n_f16(*(float16x8_t *)((char *)&v431 + 8), v422), v431, v421);
            float16x8_t v111 = vmulq_n_f16(*(float16x8_t *)((char *)&v431 + 8), v423);
          }
          else
          {
            float16x8_t v128 = 0uLL;
            float16x8_t v127 = 0uLL;
          }
          int8x8_t v129 = *v107++;
          *(int8x8_t *)v130.i8 = vzip1_s8(v129, 0);
          v130.u64[1] = (unint64_t)vzip2_s8(v129, 0);
          float16x8_t v131 = vsubq_f16(vcvtq_f16_u16(v130), v62);
          float16x8_t v132 = vmlaq_n_f16(v127, v131, _H4);
          float16x8_t v133 = vmlaq_n_f16(v128, v131, _H4);
          float16x8_t v134 = vmlaq_n_f16(v111, v131, _H4);
          v135.i64[0] = 0x9000900090009000;
          v135.i64[1] = 0x9000900090009000;
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v135));
          uint32x4_t v137 = vmovl_high_u16(v136);
          float16x8_t v138 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v136.i8);
          v138.i16[0] = *(_WORD *)(v60 + 2 * v138.u32[0]);
          v138.i16[1] = *(_WORD *)(v60 + 2 * v138.u32[1]);
          v138.i16[2] = *(_WORD *)(v60 + 2 * v138.u32[2]);
          v138.i16[3] = *(_WORD *)(v60 + 2 * v138.u32[3]);
          v138.i16[4] = *(_WORD *)(v60 + 2 * v137.u32[0]);
          v138.i16[5] = *(_WORD *)(v60 + 2 * v137.u32[1]);
          v138.i16[6] = *(_WORD *)(v60 + 2 * v137.u32[2]);
          v138.i16[7] = *(_WORD *)(v60 + 2 * v137.u32[3]);
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v135));
          uint32x4_t v140 = vmovl_high_u16(v139);
          float16x8_t v141 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v139.i8);
          v141.i16[0] = *(_WORD *)(v60 + 2 * v141.u32[0]);
          v141.i16[1] = *(_WORD *)(v60 + 2 * v141.u32[1]);
          v141.i16[2] = *(_WORD *)(v60 + 2 * v141.u32[2]);
          v141.i16[3] = *(_WORD *)(v60 + 2 * v141.u32[3]);
          v141.i16[4] = *(_WORD *)(v60 + 2 * v140.u32[0]);
          v141.i16[5] = *(_WORD *)(v60 + 2 * v140.u32[1]);
          v141.i16[6] = *(_WORD *)(v60 + 2 * v140.u32[2]);
          v141.i16[7] = *(_WORD *)(v60 + 2 * v140.u32[3]);
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v135));
          float16x8_t v143 = (float16x8_t)vmovl_high_u16(v142);
          *(void *)&long long v144 = v143.u32[2];
          *((void *)&v144 + 1) = v143.u32[3];
          long long v145 = v144;
          *(void *)&long long v144 = v143.u32[0];
          *((void *)&v144 + 1) = v143.u32[1];
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v142.i8);
          v143.i16[0] = *(_WORD *)(v60 + 2 * v146.u32[0]);
          v143.i16[1] = *(_WORD *)(v60 + 2 * v146.u32[1]);
          v143.i16[2] = *(_WORD *)(v60 + 2 * v146.u32[2]);
          v143.i16[3] = *(_WORD *)(v60 + 2 * v146.u32[3]);
          v143.i16[4] = *(_WORD *)(v60 + 2 * v144);
          v143.i16[5] = *(_WORD *)(v60 + 2 * *((void *)&v144 + 1));
          v143.i16[6] = *(_WORD *)(v60 + 2 * v145);
          v143.i16[7] = *(_WORD *)(v60 + 2 * *((void *)&v145 + 1));
          uint16x8_t v147 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v135));
          uint32x4_t v148 = vmovl_high_u16(v147);
          float16x8_t v149 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v147.i8);
          v149.i16[0] = *(_WORD *)(v60 + 2 * v149.u32[0]);
          v149.i16[1] = *(_WORD *)(v60 + 2 * v149.u32[1]);
          v149.i16[2] = *(_WORD *)(v60 + 2 * v149.u32[2]);
          v149.i16[3] = *(_WORD *)(v60 + 2 * v149.u32[3]);
          v149.i16[4] = *(_WORD *)(v60 + 2 * v148.u32[0]);
          v149.i16[5] = *(_WORD *)(v60 + 2 * v148.u32[1]);
          v149.i16[6] = *(_WORD *)(v60 + 2 * v148.u32[2]);
          v149.i16[7] = *(_WORD *)(v60 + 2 * v148.u32[3]);
          uint16x8_t v150 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v133, (float16x8_t)0), v135));
          uint32x4_t v151 = vmovl_high_u16(v150);
          float16x8_t v152 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v150.i8);
          v152.i16[0] = *(_WORD *)(v60 + 2 * v152.u32[0]);
          v152.i16[1] = *(_WORD *)(v60 + 2 * v152.u32[1]);
          v152.i16[2] = *(_WORD *)(v60 + 2 * v152.u32[2]);
          v152.i16[3] = *(_WORD *)(v60 + 2 * v152.u32[3]);
          v152.i16[4] = *(_WORD *)(v60 + 2 * v151.u32[0]);
          v152.i16[5] = *(_WORD *)(v60 + 2 * v151.u32[1]);
          v152.i16[6] = *(_WORD *)(v60 + 2 * v151.u32[2]);
          v152.i16[7] = *(_WORD *)(v60 + 2 * v151.u32[3]);
          uint16x8_t v153 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v135));
          uint32x4_t v154 = vmovl_high_u16(v153);
          float16x8_t v155 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v153.i8);
          v155.i16[0] = *(_WORD *)(v60 + 2 * v155.u32[0]);
          v155.i16[1] = *(_WORD *)(v60 + 2 * v155.u32[1]);
          v155.i16[2] = *(_WORD *)(v60 + 2 * v155.u32[2]);
          v155.i16[3] = *(_WORD *)(v60 + 2 * v155.u32[3]);
          v155.i16[4] = *(_WORD *)(v60 + 2 * v154.u32[0]);
          v155.i16[5] = *(_WORD *)(v60 + 2 * v154.u32[1]);
          v155.i16[6] = *(_WORD *)(v60 + 2 * v154.u32[2]);
          v155.i16[7] = *(_WORD *)(v60 + 2 * v154.u32[3]);
          uint16x8_t v156 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, v387), v141, v386), v143, v385), vmaxq_f16(vmaxq_f16(v138, v141), v143), v384), (float16x8_t)0), v135));
          uint32x4_t v157 = vmovl_high_u16(v156);
          uint32x4_t v158 = vmovl_u16(*(uint16x4_t *)v156.i8);
          v159.i16[0] = *(_WORD *)(v48 + 2 * v158.u32[0]);
          v159.i16[1] = *(_WORD *)(v48 + 2 * v158.u32[1]);
          v159.i16[2] = *(_WORD *)(v48 + 2 * v158.u32[2]);
          v159.i16[3] = *(_WORD *)(v48 + 2 * v158.u32[3]);
          v159.i16[4] = *(_WORD *)(v48 + 2 * v157.u32[0]);
          v159.i16[5] = *(_WORD *)(v48 + 2 * v157.u32[1]);
          v159.i16[6] = *(_WORD *)(v48 + 2 * v157.u32[2]);
          v159.i16[7] = *(_WORD *)(v48 + 2 * v157.u32[3]);
          float16x8_t v160 = vmulq_f16(v138, v159);
          float16x8_t v161 = vmulq_f16(v141, v159);
          float16x8_t v162 = vmulq_f16(v143, v159);
          uint16x8_t v163 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v149, v387), v152, v386), v155, v385), vmaxq_f16(vmaxq_f16(v149, v152), v155), v384), (float16x8_t)0), v135));
          uint32x4_t v164 = vmovl_high_u16(v163);
          uint32x4_t v165 = vmovl_u16(*(uint16x4_t *)v163.i8);
          v166.i16[0] = *(_WORD *)(v48 + 2 * v165.u32[0]);
          v166.i16[1] = *(_WORD *)(v48 + 2 * v165.u32[1]);
          v166.i16[2] = *(_WORD *)(v48 + 2 * v165.u32[2]);
          v166.i16[3] = *(_WORD *)(v48 + 2 * v165.u32[3]);
          v166.i16[4] = *(_WORD *)(v48 + 2 * v164.u32[0]);
          v166.i16[5] = *(_WORD *)(v48 + 2 * v164.u32[1]);
          v166.i16[6] = *(_WORD *)(v48 + 2 * v164.u32[2]);
          v166.i16[7] = *(_WORD *)(v48 + 2 * v164.u32[3]);
          float16x8_t v167 = vmulq_f16(v149, v166);
          float16x8_t v168 = vmulq_f16(v152, v166);
          float16x8_t v169 = vmulq_f16(v155, v166);
          float16x8_t v170 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v160, v383), v161, v382), v162, v381);
          float16x8_t v171 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v160, v380), v161, v379), v162, v378);
          float16x8_t v172 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v162, v375), v161, v376), v160, v377);
          float16x8_t v173 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v167, v383), v168, v382), v169, v381);
          float16x8_t v174 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v167, v380), v168, v379), v169, v378);
          float16x8_t v175 = vmlaq_n_f16(vmulq_n_f16(v169, v375), v168, v376);
          float16x8_t v176 = (float16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v170, (float16x8_t)0), v135));
          uint32x4_t v177 = vmovl_high_u16((uint16x8_t)v176);
          uint32x4_t v178 = vmovl_u16(*(uint16x4_t *)v176.i8);
          v176.i16[7] = (unint64_t)v178.u32[1] >> 48;
          v176.i16[0] = *(_WORD *)(v69 + 2 * v178.u32[0]);
          v176.i16[1] = *(_WORD *)(v69 + 2 * v178.u32[1]);
          v176.i16[2] = *(_WORD *)(v69 + 2 * v178.u32[2]);
          v176.i16[3] = *(_WORD *)(v69 + 2 * v178.u32[3]);
          v176.i16[4] = *(_WORD *)(v69 + 2 * v177.u32[0]);
          v176.i16[5] = *(_WORD *)(v69 + 2 * v177.u32[1]);
          v176.i16[6] = *(_WORD *)(v69 + 2 * v177.u32[2]);
          float v179 = (__int16 *)(v69 + 2 * v177.u32[3]);
          float16x8_t v180 = (float16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v171, (float16x8_t)0), v135));
          uint32x4_t v181 = vmovl_high_u16((uint16x8_t)v180);
          *((void *)&v144 + 1) = v181.u32[3];
          uint32x4_t v182 = vmovl_u16(*(uint16x4_t *)v180.i8);
          v180.i16[7] = (unint64_t)v182.u32[1] >> 48;
          v180.i16[0] = *(_WORD *)(v69 + 2 * v182.u32[0]);
          v180.i16[1] = *(_WORD *)(v69 + 2 * v182.u32[1]);
          v180.i16[2] = *(_WORD *)(v69 + 2 * v182.u32[2]);
          v180.i16[3] = *(_WORD *)(v69 + 2 * v182.u32[3]);
          v180.i16[4] = *(_WORD *)(v69 + 2 * v181.u32[0]);
          v180.i16[5] = *(_WORD *)(v69 + 2 * v181.u32[1]);
          v180.i16[6] = *(_WORD *)(v69 + 2 * v181.u32[2]);
          float16x8_t v183 = (float16x8_t)vuzp1q_s16((int16x8_t)v176, (int16x8_t)v180);
          v176.i16[7] = *v179;
          v180.i16[7] = *(_WORD *)(v69 + 2 * *((void *)&v144 + 1));
          uint16x8_t v184 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v172, (float16x8_t)0), v135));
          uint32x4_t v185 = vmovl_high_u16(v184);
          *(void *)&long long v144 = v185.u32[2];
          *((void *)&v144 + 1) = v185.u32[3];
          long long v186 = v144;
          *(void *)&long long v144 = v185.u32[0];
          *((void *)&v144 + 1) = v185.u32[1];
          long long v187 = v144;
          int16x8_t v188 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v184.i8);
          *((void *)&v144 + 1) = v188.u32[3];
          v188.i16[7] = (unint64_t)v188.u32[1] >> 48;
          v188.i16[0] = *(_WORD *)(v69 + 2 * v188.u32[0]);
          v188.i16[1] = *(_WORD *)(v69 + 2 * v188.u32[1]);
          v188.i16[2] = *(_WORD *)(v69 + 2 * v188.u32[2]);
          v188.i16[3] = *(_WORD *)(v69 + 2 * *((void *)&v144 + 1));
          v188.i16[4] = *(_WORD *)(v69 + 2 * v187);
          v188.i16[5] = *(_WORD *)(v69 + 2 * *((void *)&v187 + 1));
          v188.i16[6] = *(_WORD *)(v69 + 2 * v186);
          float16x8_t v189 = (float16x8_t)v188;
          v189.i16[7] = *(_WORD *)(v69 + 2 * *((void *)&v186 + 1));
          uint16x8_t v190 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v173, (float16x8_t)0), v135));
          uint32x4_t v191 = vmovl_high_u16(v190);
          float16x8_t v192 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v190.i8);
          *(void *)&long long v144 = v191.u32[2];
          *((void *)&v144 + 1) = v191.u32[3];
          long long v193 = v144;
          *(void *)&long long v144 = v191.u32[0];
          *((void *)&v144 + 1) = v191.u32[1];
          long long v194 = v144;
          *((void *)&v144 + 1) = v192.u32[3];
          v192.i16[7] = (unint64_t)v192.u32[3] >> 48;
          v192.i16[0] = *(_WORD *)(v69 + 2 * v192.u32[0]);
          v192.i16[1] = *(_WORD *)(v69 + 2 * v192.u32[1]);
          v192.i16[2] = *(_WORD *)(v69 + 2 * v192.u32[2]);
          v192.i16[3] = *(_WORD *)(v69 + 2 * *((void *)&v144 + 1));
          v192.i16[4] = *(_WORD *)(v69 + 2 * v194);
          v192.i16[5] = *(_WORD *)(v69 + 2 * *((void *)&v194 + 1));
          v192.i16[6] = *(_WORD *)(v69 + 2 * v193);
          float v195 = (__int16 *)(v69 + 2 * *((void *)&v193 + 1));
          uint16x8_t v196 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v174, (float16x8_t)0), v135));
          uint32x4_t v197 = vmovl_high_u16(v196);
          float16x8_t v198 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v196.i8);
          *(void *)&long long v144 = v197.u32[2];
          *((void *)&v144 + 1) = v197.u32[3];
          long long v199 = v144;
          *(void *)&long long v144 = v197.u32[0];
          *((void *)&v144 + 1) = v197.u32[1];
          long long v200 = v144;
          *((void *)&v144 + 1) = v198.u32[3];
          v198.i16[7] = (unint64_t)v198.u32[3] >> 48;
          v198.i16[0] = *(_WORD *)(v69 + 2 * v198.u32[0]);
          v198.i16[1] = *(_WORD *)(v69 + 2 * v198.u32[1]);
          v198.i16[2] = *(_WORD *)(v69 + 2 * v198.u32[2]);
          v198.i16[3] = *(_WORD *)(v69 + 2 * *((void *)&v144 + 1));
          v198.i16[4] = *(_WORD *)(v69 + 2 * v200);
          v198.i16[5] = *(_WORD *)(v69 + 2 * *((void *)&v200 + 1));
          v198.i16[6] = *(_WORD *)(v69 + 2 * v199);
          float16x8_t v201 = (float16x8_t)vuzp1q_s16((int16x8_t)v192, (int16x8_t)v198);
          v192.i16[7] = *v195;
          v198.i16[7] = *(_WORD *)(v69 + 2 * *((void *)&v199 + 1));
          uint16x8_t v202 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v175, v167, v377), (float16x8_t)0), v135));
          uint32x4_t v203 = vmovl_u16(*(uint16x4_t *)v202.i8);
          uint32x4_t v204 = vmovl_high_u16(v202);
          *(void *)&long long v144 = v204.u32[2];
          *((void *)&v144 + 1) = v204.u32[3];
          long long v205 = v144;
          *((void *)&v144 + 1) = v203.u32[3];
          v10.i16[7] = (unint64_t)v203.u32[3] >> 48;
          v10.i16[0] = *(_WORD *)(v69 + 2 * v203.u32[0]);
          v10.i16[1] = *(_WORD *)(v69 + 2 * v203.u32[1]);
          v10.i16[2] = *(_WORD *)(v69 + 2 * v203.u32[2]);
          v10.i16[3] = *(_WORD *)(v69 + 2 * *((void *)&v144 + 1));
          v10.i16[4] = *(_WORD *)(v69 + 2 * v204.u32[0]);
          v10.i16[5] = *(_WORD *)(v69 + 2 * v204.u32[1]);
          v10.i16[6] = *(_WORD *)(v69 + 2 * v205);
          float16x8_t v206 = (float16x8_t)v10;
          v206.i16[7] = *(_WORD *)(v69 + 2 * *((void *)&v205 + 1));
          *v71++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v411, v176, v390), v180, v389), v189, v388), v411), v409)), v373);
          _Q25 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v411, v192, v390), v198, v389), v206, v388), v411), v409)), v373);
          *v109++ = _Q25;
          int16x8_t v207 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v183, (float16x8_t)vuzp2q_s16((int16x8_t)v176, (int16x8_t)v180)), v201), (float16x8_t)vuzp2q_s16((int16x8_t)v192, (int16x8_t)v198));
          float16x8_t v9 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v410, v414, (float16x8_t)vzip1q_s16(v207, v207)), v413, (float16x8_t)vzip2q_s16(v207, v207)), v412, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v188, v188), (float16x8_t)vtrn2q_s16((int16x8_t)v189, (int16x8_t)v189)), (float16x8_t)vtrn1q_s16((int16x8_t)v10, (int16x8_t)v10)), (float16x8_t)vtrn2q_s16((int16x8_t)v206, (int16x8_t)v206)));
          float v100 = *(float *)v407.i32;
          int16x8_t v102 = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(v9, v408), v407)), v373);
          *v110++ = v102;
          v106 += 8;
          _S8 = v426;
          _S9 = v427;
          _S2 = v428;
          _S15 = v429;
        }
        while (v106 < (int)v19 - 7);
        unint64_t v208 = v19 & 0xFFFFFFF8;
      }
      for (; v19 > v208; _S28 = v392)
      {
        if (v76)
        {
          v102.i8[0] = *v76;
          float v209 = (float)v102.u32[0] - v42;
          LOBYTE(v100) = v76[1];
          float v210 = (float)LODWORD(v100) - v42;
          float v211 = v76 + 2;
          float v212 = _S15 * v210;
          float v213 = (float)(_S9 * v210) + (float)(v209 * _S2);
          *(float *)v102.i32 = _S8 * v209;
        }
        else
        {
          float v211 = 0;
          v102.i32[0] = 0;
          float v213 = 0.0;
          float v212 = 0.0;
        }
        v9.i8[0] = v77->i8[0];
        float v214 = _S28 * (float)((float)v9.u32[0] - v39);
        float v215 = v212 + v214;
        BOOL v216 = (float)(v212 + v214) <= 8191.0;
        float v217 = 8191.0;
        if (v216)
        {
          float v217 = v215;
          if (v215 < 0.0) {
            float v217 = 0.0;
          }
        }
        float v218 = v213 + v214;
        float v219 = 8191.0;
        if (v218 <= 8191.0)
        {
          float v219 = v218;
          if (v218 < 0.0) {
            float v219 = 0.0;
          }
        }
        float v220 = *(float *)v102.i32 + v214;
        float v221 = 8191.0;
        if (v220 <= 8191.0)
        {
          float v221 = v220;
          if (v220 < 0.0) {
            float v221 = 0.0;
          }
        }
        if (v211)
        {
          LOBYTE(v220) = *v211;
          float v222 = (float)LODWORD(v220) - v42;
          LOBYTE(v218) = v211[1];
          float v223 = (float)LODWORD(v218) - v42;
          int32x4_t v76 = v211 + 2;
          float v224 = _S15 * v223;
          v10.f32[0] = _S9 * v223;
          float v225 = v10.f32[0] + (float)(v222 * _S2);
          float v226 = _S8 * v222;
        }
        else
        {
          int32x4_t v76 = 0;
          float v226 = 0.0;
          float v225 = 0.0;
          float v224 = 0.0;
        }
        v10.i8[0] = v77->i8[1];
        float v227 = _S28 * (float)((float)v10.u32[0] - v39);
        float v228 = v224 + v227;
        float v229 = 8191.0;
        BOOL v216 = (float)(v224 + v227) <= 8191.0;
        float v230 = 8191.0;
        if (v216)
        {
          float v230 = v228;
          if (v228 < 0.0) {
            float v230 = 0.0;
          }
        }
        float v231 = v225 + v227;
        float v232 = 8191.0;
        if (v231 <= 8191.0)
        {
          float v232 = v231;
          if (v231 < 0.0) {
            float v232 = 0.0;
          }
        }
        float v233 = v226 + v227;
        if (v233 <= 8191.0)
        {
          float v229 = v233;
          if (v233 < 0.0) {
            float v229 = 0.0;
          }
        }
        if (v108)
        {
          LOBYTE(v233) = *v108;
          float v234 = (float)LODWORD(v233) - v42;
          LOBYTE(v231) = v108[1];
          float v235 = (float)LODWORD(v231) - v42;
          float v236 = v108 + 2;
          float v237 = _S15 * v235;
          float v238 = (float)(_S9 * v235) + (float)(v234 * _S2);
          float v239 = _S8 * v234;
        }
        else
        {
          float v236 = 0;
          float v239 = 0.0;
          float v238 = 0.0;
          float v237 = 0.0;
        }
        _Q25.i8[0] = v107->i8[0];
        *(float *)_Q25.i32 = _S28 * (float)((float)_Q25.u32[0] - v39);
        float v240 = v237 + *(float *)_Q25.i32;
        float v241 = 8191.0;
        float v242 = 8191.0;
        if (v240 <= 8191.0)
        {
          float v242 = v240;
          if (v240 < 0.0) {
            float v242 = 0.0;
          }
        }
        float v243 = v238 + *(float *)_Q25.i32;
        float v244 = 8191.0;
        if (v243 <= 8191.0)
        {
          float v244 = v243;
          if (v243 < 0.0) {
            float v244 = 0.0;
          }
        }
        float v245 = v239 + *(float *)_Q25.i32;
        if (v245 <= 8191.0)
        {
          float v241 = v245;
          if (v245 < 0.0) {
            float v241 = 0.0;
          }
        }
        if (v236)
        {
          LOBYTE(v245) = *v236;
          *(float *)&unsigned int v246 = (float)LODWORD(v245);
          *(float *)_Q25.i32 = *(float *)&v246 - v42;
          LOBYTE(v246) = v236[1];
          float v247 = (float)v246 - v42;
          float v108 = v236 + 2;
          float v248 = _S15 * v247;
          float v249 = (float)(_S9 * v247) + (float)(*(float *)_Q25.i32 * _S2);
          float v250 = _S8 * *(float *)_Q25.i32;
        }
        else
        {
          float v108 = 0;
          float v250 = 0.0;
          float v249 = 0.0;
          float v248 = 0.0;
        }
        _Q25.i8[0] = v107->i8[1];
        *(float *)_Q25.i32 = _S28 * (float)((float)_Q25.u32[0] - v39);
        float v251 = 8191.0;
        if ((float)(v248 + *(float *)_Q25.i32) <= 8191.0)
        {
          float v251 = v248 + *(float *)_Q25.i32;
          if ((float)(v248 + *(float *)_Q25.i32) < 0.0) {
            float v251 = 0.0;
          }
        }
        float v252 = v249 + *(float *)_Q25.i32;
        float v253 = 8191.0;
        if (v252 <= 8191.0)
        {
          float v253 = v252;
          if (v252 < 0.0) {
            float v253 = 0.0;
          }
        }
        float v254 = v39;
        float v255 = v250 + *(float *)_Q25.i32;
        BOOL v216 = (float)(v250 + *(float *)_Q25.i32) <= 8191.0;
        float v256 = 8191.0;
        if (v216)
        {
          float v256 = v255;
          if (v255 < 0.0) {
            float v256 = 0.0;
          }
        }
        _H1 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v217, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        _H16 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v219, 0.0), 8191.0)));
        __asm { FCVT            S16, H16 }
        _H17 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v221, 0.0), 8191.0)));
        __asm { FCVT            S17, H17 }
        _H15 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v230, 0.0), 8191.0)));
        _H25 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v232, 0.0), 8191.0)));
        _H27 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0)));
        _H23 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v242, 0.0), 8191.0)));
        _H11 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v244, 0.0), 8191.0)));
        _H12 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v241, 0.0), 8191.0)));
        _H6 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v251, 0.0), 8191.0)));
        _H19 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v253, 0.0), 8191.0)));
        _H21 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v256, 0.0), 8191.0)));
        float v272 = (float)((float)((float)(v371 * _S16) + (float)(v372 * _S1)) + (float)(v391 * _S17))
             + (float)(_S20 * fmaxf(_S1, fmaxf(_S16, _S17)));
        float v273 = 8191.0;
        if (v272 <= 8191.0)
        {
          float v273 = v272;
          if (v272 < 0.0) {
            float v273 = 0.0;
          }
        }
        __asm
        {
          FCVT            S13, H15
          FCVT            S14, H25
          FCVT            S30, H27
        }
        _H25 = *(_WORD *)(v48 + 2 * llroundf(v273));
        float v278 = (float)((float)((float)(v371 * _S14) + (float)(v372 * _S13)) + (float)(v391 * _S30))
             + (float)(_S20 * fmaxf(_S13, fmaxf(_S14, _S30)));
        float v279 = 8191.0;
        if (v278 <= 8191.0)
        {
          float v279 = v278;
          if (v278 < 0.0) {
            float v279 = 0.0;
          }
        }
        __asm
        {
          FCVT            S29, H23
          FCVT            S24, H11
          FCVT            S9, H12
        }
        _H10 = *(_WORD *)(v48 + 2 * llroundf(v279));
        float v284 = (float)((float)((float)(v371 * _S24) + (float)(v372 * _S29)) + (float)(v391 * _S9))
             + (float)(_S20 * fmaxf(_S29, fmaxf(_S24, _S9)));
        float v285 = 8191.0;
        if (v284 <= 8191.0)
        {
          float v285 = v284;
          if (v284 < 0.0) {
            float v285 = 0.0;
          }
        }
        __asm
        {
          FCVT            S11, H6
          FCVT            S12, H19
          FCVT            S15, H21
          FCVT            S6, H25
        }
        float v290 = _S1 * _S6;
        float v291 = _S16 * _S6;
        float v292 = _S17 * _S6;
        __asm { FCVT            S1, H10 }
        float v294 = _S13 * _S1;
        float v295 = _S14 * _S1;
        float v296 = _S30 * _S1;
        LOWORD(_S1) = *(_WORD *)(v48 + 2 * llroundf(v285));
        __asm { FCVT            S6, H1 }
        float v298 = _S29 * _S6;
        float v299 = _S24 * _S6;
        float v300 = _S9 * _S6;
        float v301 = (float)((float)((float)(v371 * _S12) + (float)(v372 * _S11)) + (float)(v391 * _S15))
             + (float)(_S20 * fmaxf(_S11, fmaxf(_S12, _S15)));
        float v302 = 8191.0;
        if (v301 <= 8191.0)
        {
          float v302 = v301;
          if (v301 < 0.0) {
            float v302 = 0.0;
          }
        }
        _H24 = *(_WORD *)(v48 + 2 * llroundf(v302));
        __asm { FCVT            S24, H24 }
        float v305 = _S11 * _S24;
        float v306 = _S12 * _S24;
        float v307 = _S15 * _S24;
        float v308 = (float)((float)(v403 * v291) + (float)(v290 * v404)) + (float)(v292 * v402);
        float v309 = (float)((float)(v400 * v291) + (float)(v290 * v401)) + (float)(v292 * v398);
        _S23 = (float)((float)(v395 * v291) + (float)(v290 * v397)) + (float)(v292 * v393);
        _S25 = (float)((float)(v403 * v295) + (float)(v294 * v404)) + (float)(v296 * v402);
        float v312 = (float)((float)(v400 * v295) + (float)(v294 * v401)) + (float)(v296 * v398);
        _S19 = (float)((float)(v395 * v295) + (float)(v294 * v397)) + (float)(v296 * v393);
        float v314 = (float)((float)(v403 * v299) + (float)(v298 * v404)) + (float)(v300 * v402);
        float v315 = (float)((float)(v400 * v299) + (float)(v298 * v401)) + (float)(v300 * v398);
        float v316 = (float)((float)(v395 * v299) + (float)(v298 * v397)) + (float)(v300 * v393);
        _S6 = (float)(v400 * v306) + (float)(v305 * v401);
        _S16 = (float)(v395 * v306) + (float)(v305 * v397);
        _S26 = (float)((float)(v403 * v306) + (float)(v305 * v404)) + (float)(v307 * v402);
        float v320 = _S6 + (float)(v307 * v398);
        float v321 = _S16 + (float)(v307 * v393);
        _H1 = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(v308, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        LOWORD(_S6) = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(v309, 0.0), 8191.0)));
        __asm { FCVT            S6, H6 }
        LOWORD(_S16) = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
        _H17 = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
        __asm
        {
          FCVT            S16, H16
          FCVT            S17, H17
        }
        _H21 = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(v312, 0.0), 8191.0)));
        __asm { FCVT            S21, H21 }
        LOWORD(_S19) = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
        __asm { FCVT            S19, H19 }
        LOWORD(_S23) = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(v314, 0.0), 8191.0)));
        __asm { FCVT            S23, H23 }
        LOWORD(_S25) = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(v315, 0.0), 8191.0)));
        __asm { FCVT            S11, H25 }
        LOWORD(_S25) = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(v316, 0.0), 8191.0)));
        LOWORD(_S26) = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
        __asm
        {
          FCVT            S12, H25
          FCVT            S25, H26
        }
        LOWORD(_S26) = *(_WORD *)(v69 + 2 * llroundf(fminf(fmaxf(v320, 0.0), 8191.0)));
        unsigned int v334 = llroundf(fminf(fmaxf(v321, 0.0), 8191.0));
        __asm { FCVT            S24, H26 }
        _H0 = *(_WORD *)(v69 + 2 * v334);
        __asm { FCVT            S26, H0 }
        float v338 = (float)((float)((float)(v405 * _S6) + (float)(v406 * _S1)) + (float)(v419 * _S16)) + v47;
        if (v338 < v47) {
          float v339 = v47;
        }
        else {
          float v339 = (float)((float)((float)(v405 * _S6) + (float)(v406 * _S1)) + (float)(v419 * _S16)) + v47;
        }
        BOOL v216 = v338 <= v394;
        float v340 = (float)((float)((float)(v405 * _S21) + (float)(v406 * _S17)) + (float)(v419 * _S19)) + v47;
        if (!v216) {
          float v339 = v394;
        }
        unsigned int v341 = llroundf(v339);
        if (v340 < v47) {
          float v342 = v47;
        }
        else {
          float v342 = (float)((float)((float)(v405 * _S21) + (float)(v406 * _S17)) + (float)(v419 * _S19)) + v47;
        }
        BOOL v216 = v340 <= v394;
        float v343 = (float)((float)((float)(v405 * _S11) + (float)(v406 * _S23)) + (float)(v419 * _S12)) + v47;
        if (!v216) {
          float v342 = v394;
        }
        unsigned int v344 = llroundf(v342);
        if (v343 < v47) {
          float v345 = v47;
        }
        else {
          float v345 = (float)((float)((float)(v405 * _S11) + (float)(v406 * _S23)) + (float)(v419 * _S12)) + v47;
        }
        BOOL v216 = v343 <= v394;
        float v346 = (float)((float)((float)(v405 * _S24) + (float)(v406 * *(float *)_Q25.i32)) + (float)(v419 * _S26)) + v47;
        if (!v216) {
          float v345 = v394;
        }
        unsigned int v347 = llroundf(v345);
        if (v346 < v47) {
          float v348 = v47;
        }
        else {
          float v348 = (float)((float)((float)(v405 * _S24) + (float)(v406 * *(float *)_Q25.i32)) + (float)(v419 * _S26))
        }
               + v47;
        if (v346 <= v394) {
          float v349 = v348;
        }
        else {
          float v349 = v394;
        }
        unsigned int v350 = llroundf(v349);
        float v351 = (float)((float)(_S1 + _S17) + _S23) + *(float *)_Q25.i32;
        float v352 = (float)((float)(_S6 + _S21) + _S11) + _S24;
        v71->i16[0] = v341 << v57;
        v71->i16[1] = v344 << v57;
        v109->i16[0] = v347 << v57;
        v109->i16[1] = v350 << v57;
        float v353 = (float)(_S16 + _S19) + _S12;
        v10.f32[0] = v418;
        float16x8_t v62 = v416;
        float v354 = v353 + _S26;
        float v355 = (float)((float)(v418 + (float)(v351 * v415)) + (float)(v352 * *(float *)&v101))
             + (float)(v354 * v68.f32[0]);
        *(float *)v9.i32 = v417;
        _S8 = v426;
        _S9 = v427;
        if (v355 <= v417)
        {
          *(float *)v9.i32 = (float)((float)(v418 + (float)(v351 * v415)) + (float)(v352 * *(float *)&v101))
                           + (float)(v354 * v68.f32[0]);
          if (v355 < v425) {
            *(float *)v9.i32 = v425;
          }
        }
        *(float *)v102.i32 = (float)((float)(v418 + (float)(v351 * v374)) + (float)(v352 * *((float *)&v101 + 1)))
                           + (float)(v354 * v68.f32[1]);
        v110->i16[0] = llroundf(*(float *)v9.i32) << v57;
        float v100 = v417;
        float v39 = v254;
        _S2 = v428;
        _S15 = v429;
        float v42 = v399;
        _H4 = v396;
        if (*(float *)v102.i32 <= v417)
        {
          float v100 = *(float *)v102.i32;
          if (*(float *)v102.i32 < v425) {
            float v100 = v425;
          }
        }
        v208 += 2;
        size_t v77 = (int8x8_t *)((char *)v77 + 2);
        float v107 = (int8x8_t *)((char *)v107 + 2);
        v110->i16[1] = llroundf(v100) << v57;
        float v71 = (uint16x8_t *)((char *)v71 + 4);
        float v109 = (uint16x8_t *)((char *)v109 + 4);
        float v110 = (int16x8_t *)((char *)v110 + 4);
      }
      uint64_t v31 = v368;
      uint64_t v30 = v369;
      size_t v77 = (int8x8_t *)&v103[v369];
      int32x4_t v76 = &v104[v368];
      uint64_t v33 = v367;
      float v71 = (uint16x8_t *)((char *)v105 + v367);
      v70 += v366;
      v18 += 2;
      unint64_t v356 = v370;
    }
    while (v370 > v18);
    if (v365 && v364)
    {
      uint64_t v357 = 0;
      do
      {
        if (v19)
        {
          unint64_t v358 = v19;
          float v359 = v49;
          float v360 = v36;
          do
          {
            __int16 v361 = *v360++;
            *v359++ = v361 | (v361 << 8);
            --v358;
          }
          while (v358);
        }
        v36 += v362;
        v49 += v363;
        ++v357;
      }
      while (v357 != v370);
    }
    else if (v364)
    {
      do
      {
        if (v19) {
          uint64_t result = memset(v49, 255, 2 * v19);
        }
        v49 += v363;
        --v356;
      }
      while (v356);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420_GCD(void *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)((char *)result + 28);
  unint64_t v5 = 2 * *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)((char *)result + 20);
    uint64_t v10 = *(void *)((char *)result + 36);
    uint64_t v11 = *(void *)((char *)result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = result[14];
    uint64_t v14 = (uint64_t *)result[16];
    uint64_t v15 = result[15] + 2 * (result[13] * a2 / v5);
    uint64_t v16 = result[19];
    uint64_t v17 = (void *)result[7];
    uint64_t v18 = (uint64_t *)result[8];
    uint64_t v19 = (uint64_t *)result[17];
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    uint64_t v227 = v18[2];
    uint64_t v230 = v17[2];
    size_t v22 = (unsigned __int8 *)(v230 + v227 * v11 + v10);
    uint64_t v23 = *v19;
    uint64_t v24 = v19[1];
    uint64_t v228 = v19[2];
    uint64_t v229 = v14[2];
    uint64_t v25 = (char *)(v229 + v228 * v15 + 2 * v13);
    float v26 = 8191.0;
    *(float *)&unsigned int v27 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    float v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    float v29 = (float)LODWORD(a4);
    float v30 = *(float *)&v27 * *(float *)v16;
    float v31 = *(float *)&v27 * *(float *)(v16 + 8);
    float v32 = *(float *)&v27 * *(float *)(v16 + 16);
    float v33 = *(float *)&v27 * *(float *)(v16 + 20);
    float v34 = *(float *)&v27 * *(float *)(v16 + 28);
    LOWORD(v27) = *(_WORD *)(v16 + 144);
    float v35 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 146);
    *(float *)&unsigned int v36 = (float)v27;
    float v255 = *(float *)&v36;
    LOWORD(v36) = *(_WORD *)(v16 + 148);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v16 + 150);
    *(float *)&unsigned int v38 = (float)v36;
    float v260 = *(float *)&v38;
    LOWORD(v38) = *(_WORD *)(v16 + 152);
    float v253 = *(float *)(v16 + 36);
    float v254 = (float)v38;
    float v251 = *(float *)(v16 + 44);
    float v252 = *(float *)(v16 + 40);
    float v249 = *(float *)(v16 + 52) * 0.25;
    float v250 = *(float *)(v16 + 48) * 0.25;
    float v247 = *(float *)(v16 + 60) * 0.25;
    float v248 = *(float *)(v16 + 56) * 0.25;
    float v39 = *(float *)(v16 + 64) * 0.25;
    float v245 = *(float *)(v16 + 72);
    float v246 = v39;
    float v243 = *(float *)(v16 + 76);
    float v244 = *(float *)(v16 + 68) * 0.25;
    float v241 = *(float *)(v16 + 84);
    float v242 = *(float *)(v16 + 80);
    float v239 = *(float *)(v16 + 88);
    float v236 = *(float *)(v16 + 96);
    float v237 = *(float *)(v16 + 92);
    float v40 = *(float *)(v16 + 104);
    float v234 = v40;
    float v235 = *(float *)(v16 + 100);
    uint64_t result = (void *)(v16 + 164);
    uint64_t v41 = v16 + 16548;
    uint64_t v42 = v17[1];
    short float v43 = (unsigned char *)(*v17 + *v18 * v11 + v10);
    if (v42) {
      float32x2_t v44 = (unsigned char *)(v42 + v21 * v11 + v10);
    }
    else {
      float32x2_t v44 = 0;
    }
    unsigned int v45 = *(unsigned __int8 *)(v16 + 132);
    char v46 = 16 - v45;
    _CF = v45 >= 0x11;
    uint64_t v49 = *v14;
    uint64_t v48 = v14[1];
    uint64_t v50 = v49 + v23 * v15;
    if (_CF) {
      char v51 = 0;
    }
    else {
      char v51 = v46;
    }
    if (v15 >= 0) {
      uint64_t v52 = v15;
    }
    else {
      uint64_t v52 = v15 + 1;
    }
    uint64_t v53 = v48 + v24 * (v52 >> 1);
    uint64_t v54 = v16 + 32932;
    float v55 = (char *)(v50 + 2 * v13);
    uint64_t v56 = v53 + 2 * v13;
    char v57 = v51;
    float v58 = *(float *)(v16 + 108);
    float v59 = *(float *)(v16 + 112);
    float v61 = *(float *)(v16 + 116);
    float v60 = *(float *)(v16 + 120);
    float v258 = v32;
    float v259 = v31;
    float v256 = v34;
    float v257 = v33;
    float v233 = (float)LODWORD(a4);
    float v240 = v28;
    float v238 = v30;
    float v231 = v61;
    float v232 = v59;
    do
    {
      float16x8_t v62 = &v55[v23];
      float v63 = &v44[v21];
      float v64 = &v43[v20];
      if (v9)
      {
        unint64_t v65 = 0;
        float v66 = &v43[v20];
        float v67 = &v44[v21];
        float32x4_t v68 = &v55[v23];
        do
        {
          if (v44)
          {
            LOBYTE(v40) = *v44;
            *(float *)&unsigned int v69 = (float)LODWORD(v40);
            float v70 = *(float *)&v69 - v29;
            LOBYTE(v69) = v44[1];
            float v71 = (float)v69 - v29;
            v44 += 2;
            float v72 = v31 * v71;
            float v73 = (float)(v33 * v71) + (float)(v70 * v32);
            float v74 = v34 * v70;
          }
          else
          {
            float v74 = 0.0;
            float v73 = 0.0;
            float v72 = 0.0;
          }
          LOBYTE(v39) = *v43;
          float v75 = v30 * (float)((float)LODWORD(v39) - v28);
          float v76 = v72 + v75;
          BOOL v77 = (float)(v72 + v75) <= 8191.0;
          float v78 = 8191.0;
          if (v77)
          {
            float v78 = v76;
            if (v76 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v73 + v75;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v74 + v75;
          if (v81 <= 8191.0)
          {
            float v26 = v81;
            if (v81 < 0.0) {
              float v26 = 0.0;
            }
          }
          if (v44)
          {
            LOBYTE(v81) = *v44;
            float v82 = (float)LODWORD(v81) - v29;
            LOBYTE(v79) = v44[1];
            float v83 = (float)LODWORD(v79) - v29;
            v44 += 2;
            float v84 = v31 * v83;
            float v85 = (float)(v33 * v83) + (float)(v82 * v32);
            float v86 = v34 * v82;
          }
          else
          {
            float v86 = 0.0;
            float v85 = 0.0;
            float v84 = 0.0;
          }
          LOBYTE(v76) = v43[1];
          float v87 = v30 * (float)((float)LODWORD(v76) - v28);
          float v88 = v84 + v87;
          float v89 = 8191.0;
          float v90 = 8191.0;
          if (v88 <= 8191.0)
          {
            float v90 = v88;
            if (v88 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v85 + v87;
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v86 + v87;
          if (v93 <= 8191.0)
          {
            float v89 = v93;
            if (v93 < 0.0) {
              float v89 = 0.0;
            }
          }
          if (v67)
          {
            LOBYTE(v93) = *v67;
            *(float *)&unsigned int v94 = (float)LODWORD(v93);
            float v87 = *(float *)&v94 - v29;
            LOBYTE(v94) = v67[1];
            float v95 = (float)v94 - v29;
            v67 += 2;
            float v96 = v31 * v95;
            float v97 = (float)(v33 * v95) + (float)(v87 * v32);
            float v98 = v34 * v87;
          }
          else
          {
            float v98 = 0.0;
            float v97 = 0.0;
            float v96 = 0.0;
          }
          LOBYTE(v87) = *v66;
          float v99 = v30 * (float)((float)LODWORD(v87) - v28);
          float v100 = v96 + v99;
          float v101 = 8191.0;
          BOOL v77 = (float)(v96 + v99) <= 8191.0;
          float v102 = 8191.0;
          if (v77)
          {
            float v102 = v100;
            if (v100 < 0.0) {
              float v102 = 0.0;
            }
          }
          float v103 = v97 + v99;
          BOOL v77 = (float)(v97 + v99) <= 8191.0;
          float v104 = 8191.0;
          if (v77)
          {
            float v104 = v103;
            if (v103 < 0.0) {
              float v104 = 0.0;
            }
          }
          float v105 = v98 + v99;
          if (v105 <= 8191.0)
          {
            float v101 = v105;
            if (v105 < 0.0) {
              float v101 = 0.0;
            }
          }
          if (v67)
          {
            LOBYTE(v105) = *v67;
            *(float *)&unsigned int v106 = (float)LODWORD(v105);
            float v103 = *(float *)&v106 - v29;
            LOBYTE(v106) = v67[1];
            float v107 = (float)v106 - v29;
            v67 += 2;
            float v108 = v31 * v107;
            float v109 = (float)(v33 * v107) + (float)(v103 * v32);
            float v110 = v34 * v103;
          }
          else
          {
            float v110 = 0.0;
            float v109 = 0.0;
            float v108 = 0.0;
          }
          LOBYTE(v103) = v66[1];
          float v111 = v30 * (float)((float)LODWORD(v103) - v28);
          float v112 = v108 + v111;
          BOOL v77 = (float)(v108 + v111) <= 8191.0;
          float v113 = 8191.0;
          if (v77)
          {
            float v113 = v112;
            if (v112 < 0.0) {
              float v113 = 0.0;
            }
          }
          float v114 = v109 + v111;
          float v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            float v115 = v114;
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          float v116 = v110 + v111;
          BOOL v77 = (float)(v110 + v111) <= 8191.0;
          float v117 = 8191.0;
          if (v77)
          {
            float v117 = v116;
            if (v116 < 0.0) {
              float v117 = 0.0;
            }
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H20 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          unsigned int v124 = llroundf(fminf(fmaxf(v26, 0.0), 8191.0));
          __asm { FCVT            S19, H20 }
          _H20 = *((_WORD *)result + v124);
          __asm { FCVT            S30, H20 }
          _H20 = *((_WORD *)result + llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H29 = *((_WORD *)result + llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H31 = *((_WORD *)result + llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          float v137 = fmaxf(_S0, fmaxf(_S19, _S30));
          float v138 = (float)((float)((float)(v59 * _S19) + (float)(v58 * _S0)) + (float)(v61 * _S30)) + (float)(v60 * v137);
          float v139 = 8191.0;
          if (v138 <= 8191.0)
          {
            float v139 = (float)((float)((float)(v59 * _S19) + (float)(v58 * _S0)) + (float)(v61 * _S30))
                 + (float)(v60 * v137);
            if (v138 < 0.0) {
              float v139 = 0.0;
            }
          }
          __asm
          {
            FCVT            S21, H20
            FCVT            S22, H29
            FCVT            S23, H31
          }
          _H20 = *(_WORD *)(v41 + 2 * llroundf(v139));
          float v144 = (float)((float)((float)(v59 * _S22) + (float)(v58 * _S21)) + (float)(v61 * _S23))
               + (float)(v60 * fmaxf(_S21, fmaxf(_S22, _S23)));
          float v145 = 8191.0;
          if (v144 <= 8191.0)
          {
            float v145 = v144;
            if (v144 < 0.0) {
              float v145 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H5
            FCVT            S10, H6
            FCVT            S11, H7
          }
          _H5 = *(_WORD *)(v41 + 2 * llroundf(v145));
          float v150 = fmaxf(_S9, fmaxf(_S10, _S11));
          float v151 = (float)((float)((float)(v59 * _S10) + (float)(v58 * _S9)) + (float)(v61 * _S11)) + (float)(v60 * v150);
          float v152 = 8191.0;
          if (v151 <= 8191.0)
          {
            float v152 = (float)((float)((float)(v59 * _S10) + (float)(v58 * _S9)) + (float)(v61 * _S11))
                 + (float)(v60 * v150);
            if (v151 < 0.0) {
              float v152 = 0.0;
            }
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H4
            FCVT            S1, H20
          }
          float v157 = _S0 * _S1;
          float v158 = _S19 * _S1;
          float v159 = _S30 * _S1;
          __asm { FCVT            S0, H5 }
          float v161 = _S21 * _S0;
          float v162 = _S22 * _S0;
          float v163 = _S23 * _S0;
          LOWORD(_S0) = *(_WORD *)(v41 + 2 * llroundf(v152));
          __asm { FCVT            S1, H0 }
          float v165 = _S9 * _S1;
          float v166 = _S10 * _S1;
          float v167 = _S11 * _S1;
          float v168 = (float)((float)((float)(v59 * _S31) + (float)(v58 * _S29)) + (float)(v61 * _S8))
               + (float)(v60 * fmaxf(_S29, fmaxf(_S31, _S8)));
          float v169 = 8191.0;
          if (v168 <= 8191.0)
          {
            float v169 = v168;
            if (v168 < 0.0) {
              float v169 = 0.0;
            }
          }
          _H21 = *(_WORD *)(v41 + 2 * llroundf(v169));
          __asm { FCVT            S21, H21 }
          float v172 = _S29 * _S21;
          float v173 = _S31 * _S21;
          float v174 = _S8 * _S21;
          float v175 = (float)((float)(v243 * v158) + (float)(v157 * v245)) + (float)(v159 * v242);
          float v176 = (float)((float)(v239 * v158) + (float)(v157 * v241)) + (float)(v159 * v237);
          _S7 = (float)((float)(v235 * v158) + (float)(v157 * v236)) + (float)(v159 * v234);
          _S19 = (float)((float)(v243 * v162) + (float)(v161 * v245)) + (float)(v163 * v242);
          _S20 = (float)((float)(v239 * v162) + (float)(v161 * v241)) + (float)(v163 * v237);
          _S5 = (float)((float)(v235 * v162) + (float)(v161 * v236)) + (float)(v163 * v234);
          float v181 = (float)((float)(v243 * v166) + (float)(v165 * v245)) + (float)(v167 * v242);
          float v182 = (float)((float)(v239 * v166) + (float)(v165 * v241)) + (float)(v167 * v237);
          float v183 = (float)((float)(v235 * v166) + (float)(v165 * v236)) + (float)(v167 * v234);
          _S1 = (float)(v239 * v173) + (float)(v172 * v241);
          _S3 = (float)(v235 * v173) + (float)(v172 * v236);
          _S22 = (float)((float)(v243 * v173) + (float)(v172 * v245)) + (float)(v174 * v242);
          _S23 = _S1 + (float)(v174 * v237);
          float v188 = _S3 + (float)(v174 * v234);
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S3) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S4, H4
          }
          _H6 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S5) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S7) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v181, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S19) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v182, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v183, 0.0), 8191.0)));
          LOWORD(_S22) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H20
            FCVT            S20, H22
          }
          LOWORD(_S22) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v188, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          float v204 = (float)((float)((float)(v252 * _S1) + (float)(v253 * _S0)) + (float)(v251 * _S3)) + v35;
          if (v204 < v35) {
            float v205 = v35;
          }
          else {
            float v205 = (float)((float)((float)(v252 * _S1) + (float)(v253 * _S0)) + (float)(v251 * _S3)) + v35;
          }
          BOOL v77 = v204 <= v37;
          float v206 = (float)((float)((float)(v252 * _S6) + (float)(v253 * _S4)) + (float)(v251 * _S5)) + v35;
          if (!v77) {
            float v205 = v37;
          }
          unsigned int v207 = llroundf(v205);
          if (v206 < v35) {
            float v208 = v35;
          }
          else {
            float v208 = (float)((float)((float)(v252 * _S6) + (float)(v253 * _S4)) + (float)(v251 * _S5)) + v35;
          }
          BOOL v77 = v206 <= v37;
          float v209 = (float)((float)((float)(v252 * _S19) + (float)(v253 * _S7)) + (float)(v251 * _S21)) + v35;
          if (!v77) {
            float v208 = v37;
          }
          unsigned int v210 = llroundf(v208);
          if (v209 < v35) {
            float v211 = v35;
          }
          else {
            float v211 = (float)((float)((float)(v252 * _S19) + (float)(v253 * _S7)) + (float)(v251 * _S21)) + v35;
          }
          BOOL v77 = v209 <= v37;
          float v212 = (float)((float)((float)(v252 * _S22) + (float)(v253 * _S20)) + (float)(v251 * _S23)) + v35;
          if (!v77) {
            float v211 = v37;
          }
          unsigned int v213 = llroundf(v211);
          if (v212 < v35) {
            float v214 = v35;
          }
          else {
            float v214 = (float)((float)((float)(v252 * _S22) + (float)(v253 * _S20)) + (float)(v251 * _S23)) + v35;
          }
          if (v212 <= v37) {
            float v215 = v214;
          }
          else {
            float v215 = v37;
          }
          float v216 = (float)((float)(_S0 + _S4) + _S7) + _S20;
          float v217 = (float)((float)(_S1 + _S6) + _S19) + _S22;
          *(_WORD *)float v55 = v207 << v57;
          *((_WORD *)v55 + 1) = v210 << v57;
          *(_WORD *)float32x4_t v68 = v213 << v57;
          *((_WORD *)v68 + 1) = llroundf(v215) << v57;
          float v218 = (float)((float)(_S3 + _S5) + _S21) + _S23;
          float v219 = (float)((float)(v255 + (float)(v216 * v250)) + (float)(v217 * v249)) + (float)(v218 * v248);
          float v39 = v254;
          if (v219 <= v254)
          {
            float v39 = (float)((float)(v255 + (float)(v216 * v250)) + (float)(v217 * v249)) + (float)(v218 * v248);
            if (v219 < v260) {
              float v39 = v260;
            }
          }
          float v220 = (_WORD *)(v56 + 2 * v65);
          float v221 = (float)((float)(v255 + (float)(v216 * v247)) + (float)(v217 * v246)) + (float)(v218 * v244);
          *float v220 = llroundf(v39) << v57;
          float v40 = v254;
          float v28 = v240;
          float v30 = v238;
          float v31 = v259;
          if (v221 <= v254)
          {
            float v40 = v221;
            if (v221 < v260) {
              float v40 = v260;
            }
          }
          v43 += 2;
          v66 += 2;
          v55 += 4;
          v68 += 4;
          v220[1] = llroundf(v40) << v57;
          v65 += 2;
          float v33 = v257;
          float v32 = v258;
          float v34 = v256;
          float v26 = 8191.0;
          float v29 = v233;
          float v61 = v231;
          float v59 = v232;
        }
        while (v9 > v65);
      }
      short float v43 = &v64[v20];
      float32x2_t v44 = &v63[v21];
      float v55 = &v62[v23];
      v56 += v24;
      v8 += 2;
    }
    while (v12 > v8);
    if (v230 && v229)
    {
      uint64_t v222 = 0;
      do
      {
        if (v9)
        {
          unint64_t v223 = v9;
          float v224 = v25;
          float v225 = v22;
          do
          {
            __int16 v226 = *v225++;
            *v224++ = v226 | (v226 << 8);
            --v223;
          }
          while (v223);
        }
        v22 += v227;
        v25 += v228;
        ++v222;
      }
      while (v222 != v12);
    }
    else if (v229)
    {
      do
      {
        if (v9) {
          uint64_t result = memset(v25, 255, 2 * v9);
        }
        v25 += v228;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_xf420_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, int16x4_t a10)
{
  uint64_t v15 = *(void *)((char *)result + 28);
  unint64_t v16 = 2 * *(unsigned __int8 *)result;
  unint64_t v17 = v15 * a2 / v16;
  unint64_t v18 = (v15 + v15 * a2) / v16;
  if (2 * v18 != 2 * v17)
  {
    unint64_t v19 = 0;
    unint64_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    uint64_t v22 = *(void *)((char *)result + 44) + 2 * v17;
    unint64_t v23 = 2 * v18 - 2 * v17;
    uint64_t v24 = result[14];
    unint64_t v25 = result[13] * a2;
    uint64_t v26 = result[19];
    unsigned int v27 = (void *)result[7];
    uint64_t v28 = (uint64_t *)result[8];
    uint64_t v30 = result[15];
    uint64_t v29 = (void *)result[16];
    uint64_t v31 = (uint64_t *)result[17];
    uint64_t v32 = *v28;
    uint64_t v33 = v28[1];
    uint64_t v34 = v30 + 2 * (v25 / v16);
    uint64_t v316 = v28[2];
    uint64_t v319 = v27[2];
    uint64_t v35 = (unsigned __int8 *)(v319 + v316 * v22 + v21);
    uint64_t v36 = *v31;
    uint64_t v37 = v31[1];
    uint64_t v317 = v31[2];
    uint64_t v318 = v29[2];
    unsigned int v38 = *(unsigned __int16 *)(v26 + 140);
    unsigned int v39 = *(unsigned __int16 *)(v26 + 142);
    unsigned int v40 = *(unsigned __int16 *)(v26 + 144);
    LODWORD(v30) = *(unsigned __int16 *)(v26 + 146);
    float v41 = (float)v38;
    *(short float *)v13.i16 = (short float)v38;
    unsigned int v42 = *(unsigned __int16 *)(v26 + 148);
    _S28 = *(float *)(v26 + 44);
    float v44 = (float)v39;
    short float v45 = (short float)v39;
    unsigned int v49 = *(unsigned __int16 *)(v26 + 150);
    float v50 = (float)v40;
    *(short float *)a10.i16 = (short float)v40;
    unsigned int v51 = *(unsigned __int16 *)(v26 + 152);
    float v365 = (float)v30;
    *(short float *)v11.i16 = (short float)v30;
    uint64_t v52 = v26 + 164;
    uint64_t v53 = (char *)(v318 + v317 * v34 + 2 * v24);
    *(float *)&a8 = (float)v42;
    float v339 = (float)v42;
    float v371 = (float)v49;
    float v364 = (float)v51;
    *(short float *)v14.i16 = (short float)v42;
    *(short float *)_Q8.i16 = (short float)v49;
    *(short float *)&a8 = (short float)v51;
    unsigned int v54 = *(unsigned __int8 *)(v26 + 132);
    if (v54 >= 0x11) {
      unsigned __int8 v55 = 0;
    }
    else {
      unsigned __int8 v55 = 16 - v54;
    }
    if (v34 >= 0) {
      uint64_t v56 = v34;
    }
    else {
      uint64_t v56 = v34 + 1;
    }
    uint64_t v320 = v37;
    uint64_t v57 = v29[1] + v37 * (v56 >> 1);
    uint64_t result = &unk_193E7D000;
    float v58 = 8191.0 / (float)*(unsigned int *)(v26 + 128);
    _S26 = v58 * *(float *)v26;
    _S27 = v58 * *(float *)(v26 + 8);
    _S29 = v58 * *(float *)(v26 + 16);
    _S24 = v58 * *(float *)(v26 + 20);
    float v63 = v58 * *(float *)(v26 + 28);
    uint64_t v64 = *v29 + v36 * v34;
    _Q4 = vdupq_lane_s16(v13, 0);
    float16x8_t v372 = (float16x8_t)_Q4;
    *(short float *)_Q4.i16 = -v45;
    float16x8_t v370 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q4.i8, 0);
    __asm { FMOV            V4.2S, #0.25 }
    v46.i32[1] = *(_DWORD *)(v26 + 60);
    v46.i32[0] = *(_DWORD *)(v26 + 48);
    *(float32x2_t *)v12.f32 = vmul_f32(v46, *(float32x2_t *)_Q4.i8);
    float16x8_t v70 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    float16x8_t v358 = v70;
    v47.i32[1] = *(_DWORD *)(v26 + 64);
    v47.i32[0] = *(_DWORD *)(v26 + 52);
    *(float32x2_t *)v70.i8 = vmul_f32(v47, *(float32x2_t *)_Q4.i8);
    float16x8_t v71 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v70), 0);
    float16x8_t v357 = v71;
    v48.i32[1] = *(_DWORD *)(v26 + 68);
    v48.i32[0] = *(_DWORD *)(v26 + 56);
    *(float32x2_t *)v71.i8 = vmul_f32(v48, *(float32x2_t *)_Q4.i8);
    float16x8_t v355 = (float16x8_t)vdupq_lane_s16(a10, 0);
    float16x8_t v356 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v71), 0);
    float16x8_t v353 = (float16x8_t)vdupq_lane_s16(v14, 0);
    float16x8_t v354 = (float16x8_t)vdupq_lane_s16(v11, 0);
    _S25 = v63;
    uint64_t v73 = v26 + 16548;
    float16x8_t v351 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a8, 0);
    float16x8_t v352 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q8.i8, 0);
    uint64_t v74 = v57 + 2 * v24;
    float v75 = (uint16x8_t *)(v64 + 2 * v24);
    float v78 = v27;
    uint64_t v76 = *v27;
    uint64_t v77 = v78[1];
    _ZF = v77 == 0;
    float v79 = (unsigned char *)(v77 + v33 * v22 + v21);
    if (_ZF) {
      float v80 = 0;
    }
    else {
      float v80 = v79;
    }
    float v81 = (int8x8_t *)(v76 + v32 * v22 + v21);
    __asm
    {
      FCVT            H9, S26
      FCVT            H8, S25
    }
    short float v369 = _H8;
    __asm { FCVT            H8, S29 }
    short float v368 = _H8;
    __asm { FCVT            H8, S24 }
    short float v367 = _H8;
    __asm { FCVT            H8, S27 }
    short float v366 = *(short float *)_Q8.i16;
    float v350 = *(float *)(v26 + 36);
    __asm { FCVT            H0, S0 }
    short float v338 = _H0;
    float v349 = *(float *)(v26 + 40);
    __asm { FCVT            H0, S4 }
    short float v337 = _H0;
    __asm { FCVT            H0, S28 }
    short float v336 = _H0;
    float v348 = *(float *)(v26 + 72);
    __asm { FCVT            H0, S7 }
    short float v335 = _H0;
    float v347 = *(float *)(v26 + 76);
    __asm { FCVT            H0, S17 }
    short float v334 = _H0;
    float v346 = *(float *)(v26 + 80);
    __asm { FCVT            H0, S18 }
    short float v333 = _H0;
    float v340 = *(float *)(v26 + 84);
    __asm { FCVT            H0, S31 }
    short float v332 = _H0;
    float v345 = *(float *)(v26 + 88);
    __asm { FCVT            H0, S20 }
    short float v331 = _H0;
    float v344 = *(float *)(v26 + 92);
    __asm { FCVT            H0, S21 }
    short float v330 = _H0;
    float v343 = *(float *)(v26 + 96);
    __asm { FCVT            H0, S5 }
    short float v329 = _H0;
    float v342 = *(float *)(v26 + 100);
    __asm { FCVT            H0, S23 }
    short float v328 = _H0;
    float v341 = *(float *)(v26 + 104);
    __asm { FCVT            H0, S30 }
    short float v327 = _H0;
    float v359 = v12.f32[0];
    uint64_t v98 = v70.i64[0];
    float v326 = v12.f32[1];
    uint64_t v99 = v71.i64[0];
    int16x8_t v100 = vdupq_n_s16(v55);
    uint16x8_t v325 = (uint16x8_t)v100;
    uint64_t v322 = v33;
    uint64_t v323 = v32;
    uint64_t v321 = v36;
    float v363 = _S27;
    float v362 = _S29;
    float v361 = _S24;
    float v360 = v63;
    float v324 = v41;
    do
    {
      float v101 = (char *)v81 + v32;
      float v102 = &v80[v33];
      float v103 = &v75->i8[v36];
      if ((int)v20 < 8)
      {
        unint64_t v195 = 0;
        float v108 = (int16x8_t *)v74;
        float v107 = (uint16x8_t *)((char *)v75 + v36);
        unsigned int v106 = &v80[v33];
        float v105 = (int8x8_t *)((char *)v81 + v32);
      }
      else
      {
        int v104 = 0;
        float v105 = (int8x8_t *)((char *)v81 + v32);
        unsigned int v106 = &v80[v33];
        float v107 = (uint16x8_t *)((char *)v75 + v36);
        float v108 = (int16x8_t *)v74;
        do
        {
          float16x8_t v109 = 0uLL;
          if (v80)
          {
            int8x8x2_t v373 = vld2_s8(v80);
            v80 += 16;
            *(int8x8_t *)v110.i8 = vzip1_s8(v373.val[0], 0);
            v110.u64[1] = (unint64_t)vzip2_s8(v373.val[0], 0);
            *(int8x8_t *)v111.i8 = vzip1_s8(v373.val[1], 0);
            v111.u64[1] = (unint64_t)vzip2_s8(v373.val[1], 0);
            float16x8_t v112 = vaddq_f16(v370, vcvtq_f16_u16(v110));
            float16x8_t v113 = vaddq_f16(v370, vcvtq_f16_u16(v111));
            float16x8_t v114 = vmulq_n_f16(v113, v366);
            float16x8_t v115 = vmlaq_n_f16(vmulq_n_f16(v112, v368), v113, v367);
            float16x8_t v116 = vmulq_n_f16(v112, v369);
          }
          else
          {
            float16x8_t v116 = 0uLL;
            float16x8_t v115 = 0uLL;
            float16x8_t v114 = 0uLL;
          }
          int8x8_t v117 = *v81++;
          *(int8x8_t *)v118.i8 = vzip1_s8(v117, 0);
          v118.u64[1] = (unint64_t)vzip2_s8(v117, 0);
          float16x8_t v119 = vsubq_f16(vcvtq_f16_u16(v118), v372);
          float16x8_t v120 = vmlaq_n_f16(v114, v119, _H9);
          float16x8_t v121 = vmlaq_n_f16(v115, v119, _H9);
          float16x8_t v122 = vmlaq_n_f16(v116, v119, _H9);
          if (v106)
          {
            int8x8x2_t v374 = vld2_s8(v106);
            v106 += 16;
            *(int8x8_t *)v123.i8 = vzip1_s8(v374.val[0], 0);
            v123.u64[1] = (unint64_t)vzip2_s8(v374.val[0], 0);
            *(int8x8_t *)v124.i8 = vzip1_s8(v374.val[1], 0);
            v124.u64[1] = (unint64_t)vzip2_s8(v374.val[1], 0);
            *(int8x8x2_t *)((char *)&v374 + 8) = (int8x8x2_t)vaddq_f16(v370, vcvtq_f16_u16(v123));
            float16x8_t v125 = vaddq_f16(v370, vcvtq_f16_u16(v124));
            float16x8_t v126 = vmulq_n_f16(v125, v366);
            float16x8_t v127 = vmlaq_n_f16(vmulq_n_f16(*(float16x8_t *)((char *)&v374 + 8), v368), v125, v367);
            float16x8_t v109 = vmulq_n_f16(*(float16x8_t *)((char *)&v374 + 8), v369);
          }
          else
          {
            float16x8_t v127 = 0uLL;
            float16x8_t v126 = 0uLL;
          }
          int8x8_t v128 = *v105++;
          *(int8x8_t *)v129.i8 = vzip1_s8(v128, 0);
          v129.u64[1] = (unint64_t)vzip2_s8(v128, 0);
          float16x8_t v130 = vsubq_f16(vcvtq_f16_u16(v129), v372);
          float16x8_t v131 = vmlaq_n_f16(v126, v130, _H9);
          float16x8_t v132 = vmlaq_n_f16(v127, v130, _H9);
          float16x8_t v133 = vmlaq_n_f16(v109, v130, _H9);
          v134.i64[0] = 0x9000900090009000;
          v134.i64[1] = 0x9000900090009000;
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v134));
          uint32x4_t v136 = vmovl_high_u16(v135);
          uint32x4_t v137 = vmovl_u16(*(uint16x4_t *)v135.i8);
          v138.i16[0] = *(_WORD *)(v52 + 2 * v137.u32[0]);
          v138.i16[1] = *(_WORD *)(v52 + 2 * v137.u32[1]);
          v138.i16[2] = *(_WORD *)(v52 + 2 * v137.u32[2]);
          v138.i16[3] = *(_WORD *)(v52 + 2 * v137.u32[3]);
          v138.i16[4] = *(_WORD *)(v52 + 2 * v136.u32[0]);
          v138.i16[5] = *(_WORD *)(v52 + 2 * v136.u32[1]);
          v138.i16[6] = *(_WORD *)(v52 + 2 * v136.u32[2]);
          v138.i16[7] = *(_WORD *)(v52 + 2 * v136.u32[3]);
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v134));
          uint32x4_t v140 = vmovl_high_u16(v139);
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v139.i8);
          v142.i16[0] = *(_WORD *)(v52 + 2 * v141.u32[0]);
          v142.i16[1] = *(_WORD *)(v52 + 2 * v141.u32[1]);
          v142.i16[2] = *(_WORD *)(v52 + 2 * v141.u32[2]);
          v142.i16[3] = *(_WORD *)(v52 + 2 * v141.u32[3]);
          v142.i16[4] = *(_WORD *)(v52 + 2 * v140.u32[0]);
          v142.i16[5] = *(_WORD *)(v52 + 2 * v140.u32[1]);
          v142.i16[6] = *(_WORD *)(v52 + 2 * v140.u32[2]);
          v142.i16[7] = *(_WORD *)(v52 + 2 * v140.u32[3]);
          uint16x8_t v143 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v134));
          uint32x4_t v144 = vmovl_high_u16(v143);
          uint32x4_t v145 = vmovl_u16(*(uint16x4_t *)v143.i8);
          v146.i16[0] = *(_WORD *)(v52 + 2 * v145.u32[0]);
          v146.i16[1] = *(_WORD *)(v52 + 2 * v145.u32[1]);
          v146.i16[2] = *(_WORD *)(v52 + 2 * v145.u32[2]);
          v146.i16[3] = *(_WORD *)(v52 + 2 * v145.u32[3]);
          v146.i16[4] = *(_WORD *)(v52 + 2 * v144.u32[0]);
          v146.i16[5] = *(_WORD *)(v52 + 2 * v144.u32[1]);
          v146.i16[6] = *(_WORD *)(v52 + 2 * v144.u32[2]);
          v146.i16[7] = *(_WORD *)(v52 + 2 * v144.u32[3]);
          uint16x8_t v147 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v134));
          uint32x4_t v148 = vmovl_high_u16(v147);
          uint32x4_t v149 = vmovl_u16(*(uint16x4_t *)v147.i8);
          v150.i16[0] = *(_WORD *)(v52 + 2 * v149.u32[0]);
          v150.i16[1] = *(_WORD *)(v52 + 2 * v149.u32[1]);
          v150.i16[2] = *(_WORD *)(v52 + 2 * v149.u32[2]);
          v150.i16[3] = *(_WORD *)(v52 + 2 * v149.u32[3]);
          v150.i16[4] = *(_WORD *)(v52 + 2 * v148.u32[0]);
          v150.i16[5] = *(_WORD *)(v52 + 2 * v148.u32[1]);
          v150.i16[6] = *(_WORD *)(v52 + 2 * v148.u32[2]);
          v150.i16[7] = *(_WORD *)(v52 + 2 * v148.u32[3]);
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v134));
          uint32x4_t v152 = vmovl_high_u16(v151);
          float16x8_t v153 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v151.i8);
          v153.i16[0] = *(_WORD *)(v52 + 2 * v153.u32[0]);
          v153.i16[1] = *(_WORD *)(v52 + 2 * v153.u32[1]);
          v153.i16[2] = *(_WORD *)(v52 + 2 * v153.u32[2]);
          v153.i16[3] = *(_WORD *)(v52 + 2 * v153.u32[3]);
          v153.i16[4] = *(_WORD *)(v52 + 2 * v152.u32[0]);
          v153.i16[5] = *(_WORD *)(v52 + 2 * v152.u32[1]);
          v153.i16[6] = *(_WORD *)(v52 + 2 * v152.u32[2]);
          v153.i16[7] = *(_WORD *)(v52 + 2 * v152.u32[3]);
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v133, (float16x8_t)0), v134));
          uint32x4_t v155 = vmovl_high_u16(v154);
          uint32x4_t v156 = vmovl_u16(*(uint16x4_t *)v154.i8);
          v157.i16[0] = *(_WORD *)(v52 + 2 * v156.u32[0]);
          v157.i16[1] = *(_WORD *)(v52 + 2 * v156.u32[1]);
          v157.i16[2] = *(_WORD *)(v52 + 2 * v156.u32[2]);
          v157.i16[3] = *(_WORD *)(v52 + 2 * v156.u32[3]);
          v157.i16[4] = *(_WORD *)(v52 + 2 * v155.u32[0]);
          v157.i16[5] = *(_WORD *)(v52 + 2 * v155.u32[1]);
          v157.i16[6] = *(_WORD *)(v52 + 2 * v155.u32[2]);
          v157.i16[7] = *(_WORD *)(v52 + 2 * v155.u32[3]);
          float16x8_t v158 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, v335), v142, v334), v146, v333);
          float16x8_t v159 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, v332), v142, v331), v146, v330);
          float16x8_t v160 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v146, v327), v142, v328), v138, v329);
          float16x8_t v161 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v150, v335), v153, v334), v157, v333);
          float16x8_t v162 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v150, v332), v153, v331), v157, v330);
          _Q8 = vmlaq_n_f16(vmulq_n_f16(v157, v327), v153, v328);
          uint16x8_t v163 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v158, (float16x8_t)0), v134));
          uint32x4_t v164 = vmovl_high_u16(v163);
          uint32x4_t v165 = vmovl_u16(*(uint16x4_t *)v163.i8);
          v142.i16[0] = *(_WORD *)(v73 + 2 * v165.u32[0]);
          v142.i16[1] = *(_WORD *)(v73 + 2 * v165.u32[1]);
          v142.i16[2] = *(_WORD *)(v73 + 2 * v165.u32[2]);
          v142.i16[3] = *(_WORD *)(v73 + 2 * v165.u32[3]);
          v142.i16[4] = *(_WORD *)(v73 + 2 * v164.u32[0]);
          v142.i16[5] = *(_WORD *)(v73 + 2 * v164.u32[1]);
          v142.i16[6] = *(_WORD *)(v73 + 2 * v164.u32[2]);
          uint16x8_t v166 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v159, (float16x8_t)0), v134));
          uint32x4_t v167 = vmovl_high_u16(v166);
          uint32x4_t v168 = vmovl_u16(*(uint16x4_t *)v166.i8);
          v146.i16[0] = *(_WORD *)(v73 + 2 * v168.u32[0]);
          v146.i16[1] = *(_WORD *)(v73 + 2 * v168.u32[1]);
          v146.i16[2] = *(_WORD *)(v73 + 2 * v168.u32[2]);
          v146.i16[3] = *(_WORD *)(v73 + 2 * v168.u32[3]);
          v146.i16[4] = *(_WORD *)(v73 + 2 * v167.u32[0]);
          v146.i16[5] = *(_WORD *)(v73 + 2 * v167.u32[1]);
          v146.i16[6] = *(_WORD *)(v73 + 2 * v167.u32[2]);
          float16x8_t v169 = (float16x8_t)vuzp1q_s16((int16x8_t)v142, (int16x8_t)v146);
          v142.i16[7] = *(_WORD *)(v73 + 2 * v164.u32[3]);
          v146.i16[7] = *(_WORD *)(v73 + 2 * v167.u32[3]);
          uint16x8_t v170 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v160, (float16x8_t)0), v134));
          uint32x4_t v171 = vmovl_high_u16(v170);
          *(void *)&long long v172 = v171.u32[2];
          *((void *)&v172 + 1) = v171.u32[3];
          long long v173 = v172;
          *(void *)&long long v172 = v171.u32[0];
          *((void *)&v172 + 1) = v171.u32[1];
          long long v174 = v172;
          int16x8_t v175 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v170.i8);
          *((void *)&v172 + 1) = v175.u32[3];
          v175.i16[7] = (unint64_t)v175.u32[1] >> 48;
          v175.i16[0] = *(_WORD *)(v73 + 2 * v175.u32[0]);
          v175.i16[1] = *(_WORD *)(v73 + 2 * v175.u32[1]);
          v175.i16[2] = *(_WORD *)(v73 + 2 * v175.u32[2]);
          v175.i16[3] = *(_WORD *)(v73 + 2 * *((void *)&v172 + 1));
          v175.i16[4] = *(_WORD *)(v73 + 2 * v174);
          v175.i16[5] = *(_WORD *)(v73 + 2 * *((void *)&v174 + 1));
          v175.i16[6] = *(_WORD *)(v73 + 2 * v173);
          float16x8_t v70 = (float16x8_t)v175;
          v70.i16[7] = *(_WORD *)(v73 + 2 * *((void *)&v173 + 1));
          uint16x8_t v176 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v161, (float16x8_t)0), v134));
          uint32x4_t v177 = vmovl_high_u16(v176);
          float16x8_t v178 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v176.i8);
          *(void *)&long long v172 = v177.u32[2];
          *((void *)&v172 + 1) = v177.u32[3];
          long long v179 = v172;
          *(void *)&long long v172 = v177.u32[0];
          *((void *)&v172 + 1) = v177.u32[1];
          long long v180 = v172;
          *((void *)&v172 + 1) = v178.u32[3];
          v178.i16[7] = (unint64_t)v178.u32[3] >> 48;
          v178.i16[0] = *(_WORD *)(v73 + 2 * v178.u32[0]);
          v178.i16[1] = *(_WORD *)(v73 + 2 * v178.u32[1]);
          v178.i16[2] = *(_WORD *)(v73 + 2 * v178.u32[2]);
          v178.i16[3] = *(_WORD *)(v73 + 2 * *((void *)&v172 + 1));
          v178.i16[4] = *(_WORD *)(v73 + 2 * v180);
          v178.i16[5] = *(_WORD *)(v73 + 2 * *((void *)&v180 + 1));
          v178.i16[6] = *(_WORD *)(v73 + 2 * v179);
          float v181 = (__int16 *)(v73 + 2 * *((void *)&v179 + 1));
          uint16x8_t v182 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v162, (float16x8_t)0), v134));
          uint32x4_t v183 = vmovl_high_u16(v182);
          float16x8_t v184 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v182.i8);
          *(void *)&long long v172 = v183.u32[2];
          *((void *)&v172 + 1) = v183.u32[3];
          long long v185 = v172;
          *(void *)&long long v172 = v183.u32[0];
          *((void *)&v172 + 1) = v183.u32[1];
          long long v186 = v172;
          *((void *)&v172 + 1) = v184.u32[3];
          v184.i16[7] = (unint64_t)v184.u32[3] >> 48;
          v184.i16[0] = *(_WORD *)(v73 + 2 * v184.u32[0]);
          v184.i16[1] = *(_WORD *)(v73 + 2 * v184.u32[1]);
          v184.i16[2] = *(_WORD *)(v73 + 2 * v184.u32[2]);
          v184.i16[3] = *(_WORD *)(v73 + 2 * *((void *)&v172 + 1));
          v184.i16[4] = *(_WORD *)(v73 + 2 * v186);
          v184.i16[5] = *(_WORD *)(v73 + 2 * *((void *)&v186 + 1));
          v184.i16[6] = *(_WORD *)(v73 + 2 * v185);
          float16x8_t v187 = (float16x8_t)vuzp1q_s16((int16x8_t)v178, (int16x8_t)v184);
          v178.i16[7] = *v181;
          v184.i16[7] = *(_WORD *)(v73 + 2 * *((void *)&v185 + 1));
          uint16x8_t v188 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(_Q8, v150, v329), (float16x8_t)0), v134));
          int16x8_t v189 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v188.i8);
          uint32x4_t v190 = vmovl_high_u16(v188);
          *(void *)&long long v172 = v190.u32[2];
          *((void *)&v172 + 1) = v190.u32[3];
          long long v191 = v172;
          *((void *)&v172 + 1) = v189.u32[3];
          v189.i16[7] = (unint64_t)v189.u32[3] >> 48;
          v189.i16[0] = *(_WORD *)(v73 + 2 * v189.u32[0]);
          v189.i16[1] = *(_WORD *)(v73 + 2 * v189.u32[1]);
          v189.i16[2] = *(_WORD *)(v73 + 2 * v189.u32[2]);
          v189.i16[3] = *(_WORD *)(v73 + 2 * *((void *)&v172 + 1));
          v189.i16[4] = *(_WORD *)(v73 + 2 * v190.u32[0]);
          v189.i16[5] = *(_WORD *)(v73 + 2 * v190.u32[1]);
          v189.i16[6] = *(_WORD *)(v73 + 2 * v191);
          float16x8_t v192 = (float16x8_t)v189;
          v192.i16[7] = *(_WORD *)(v73 + 2 * *((void *)&v191 + 1));
          _Q8.i32[0] = v353.i32[0];
          *v75++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v355, v142, v338), v146, v337), v70, v336), v355), v353)), v325);
          *v107++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v355, v178, v338), v184, v337), v192, v336), v355), v353)), v325);
          int16x8_t v193 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v169, (float16x8_t)vuzp2q_s16((int16x8_t)v142, (int16x8_t)v146)), v187), (float16x8_t)vuzp2q_s16((int16x8_t)v178, (int16x8_t)v184));
          float16x8_t v71 = vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v175, v175), (float16x8_t)vtrn2q_s16((int16x8_t)v70, (int16x8_t)v70)), (float16x8_t)vtrn1q_s16(v189, v189));
          v70.i32[0] = v357.i32[0];
          float16x8_t v194 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v354, v358, (float16x8_t)vzip1q_s16(v193, v193)), v357, (float16x8_t)vzip2q_s16(v193, v193)), v356, vaddq_f16(v71, (float16x8_t)vtrn2q_s16((int16x8_t)v192, (int16x8_t)v192)));
          v71.i32[0] = v351.i32[0];
          int16x8_t v100 = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(v194, v352), v351)), v325);
          *v108++ = v100;
          v104 += 8;
          float v41 = v324;
        }
        while (v104 < (int)v20 - 7);
        unint64_t v195 = v20 & 0xFFFFFFF8;
      }
      for (; v20 > v195; _S25 = v360)
      {
        if (v80)
        {
          v100.i8[0] = *v80;
          float v196 = (float)v100.u32[0] - v44;
          v71.i8[0] = v80[1];
          float v197 = (float)v71.u32[0] - v44;
          float16x8_t v198 = v80 + 2;
          float v199 = _S27 * v197;
          *(float *)v71.i32 = (float)(_S24 * v197) + (float)(v196 * _S29);
          *(float *)v100.i32 = _S25 * v196;
        }
        else
        {
          float16x8_t v198 = 0;
          v100.i32[0] = 0;
          v71.i32[0] = 0;
          float v199 = 0.0;
        }
        v70.i8[0] = v81->i8[0];
        *(float *)v70.i32 = _S26 * (float)((float)v70.u32[0] - v41);
        float v200 = v199 + *(float *)v70.i32;
        BOOL v201 = (float)(v199 + *(float *)v70.i32) <= 8191.0;
        float v202 = 8191.0;
        if (v201)
        {
          float v202 = v200;
          if (v200 < 0.0) {
            float v202 = 0.0;
          }
        }
        float v203 = *(float *)v71.i32 + *(float *)v70.i32;
        float v204 = 8191.0;
        if (v203 <= 8191.0)
        {
          float v204 = v203;
          if (v203 < 0.0) {
            float v204 = 0.0;
          }
        }
        float v205 = *(float *)v100.i32 + *(float *)v70.i32;
        float v206 = 8191.0;
        if (v205 <= 8191.0)
        {
          float v206 = v205;
          if (v205 < 0.0) {
            float v206 = 0.0;
          }
        }
        if (v198)
        {
          LOBYTE(v205) = *v198;
          float v207 = (float)LODWORD(v205) - v44;
          LOBYTE(v203) = v198[1];
          float v208 = (float)LODWORD(v203) - v44;
          float v80 = v198 + 2;
          float v209 = _S27 * v208;
          float v210 = (float)(_S24 * v208) + (float)(v207 * _S29);
          float v211 = _S25 * v207;
        }
        else
        {
          float v80 = 0;
          float v211 = 0.0;
          float v210 = 0.0;
          float v209 = 0.0;
        }
        v70.i8[0] = v81->i8[1];
        *(float *)v70.i32 = _S26 * (float)((float)v70.u32[0] - v41);
        float v212 = v209 + *(float *)v70.i32;
        float v213 = 8191.0;
        float v214 = 8191.0;
        if (v212 <= 8191.0)
        {
          float v214 = v212;
          if (v212 < 0.0) {
            float v214 = 0.0;
          }
        }
        float v215 = v210 + *(float *)v70.i32;
        float v216 = 8191.0;
        if (v215 <= 8191.0)
        {
          float v216 = v215;
          if (v215 < 0.0) {
            float v216 = 0.0;
          }
        }
        float v217 = v211 + *(float *)v70.i32;
        if (v217 <= 8191.0)
        {
          float v213 = v217;
          if (v217 < 0.0) {
            float v213 = 0.0;
          }
        }
        if (v106)
        {
          LOBYTE(v217) = *v106;
          *(float *)&unsigned int v218 = (float)LODWORD(v217);
          *(float *)v70.i32 = *(float *)&v218 - v44;
          LOBYTE(v218) = v106[1];
          float v219 = (float)v218 - v44;
          float v220 = v106 + 2;
          float v221 = _S27 * v219;
          float v222 = (float)(_S24 * v219) + (float)(*(float *)v70.i32 * _S29);
          float v223 = _S25 * *(float *)v70.i32;
        }
        else
        {
          float v220 = 0;
          float v223 = 0.0;
          float v222 = 0.0;
          float v221 = 0.0;
        }
        v70.i8[0] = v105->i8[0];
        float v224 = _S26 * (float)((float)v70.u32[0] - v41);
        float v225 = v221 + v224;
        float v226 = 8191.0;
        BOOL v201 = (float)(v221 + v224) <= 8191.0;
        float v227 = 8191.0;
        if (v201)
        {
          float v227 = v225;
          if (v225 < 0.0) {
            float v227 = 0.0;
          }
        }
        float v228 = v222 + v224;
        BOOL v201 = (float)(v222 + v224) <= 8191.0;
        float v229 = 8191.0;
        if (v201)
        {
          float v229 = v228;
          if (v228 < 0.0) {
            float v229 = 0.0;
          }
        }
        float v230 = v223 + v224;
        if (v230 <= 8191.0)
        {
          float v226 = v230;
          if (v230 < 0.0) {
            float v226 = 0.0;
          }
        }
        if (v220)
        {
          LOBYTE(v230) = *v220;
          *(float *)&unsigned int v231 = (float)LODWORD(v230);
          float v232 = *(float *)&v231 - v44;
          LOBYTE(v231) = v220[1];
          float v233 = (float)v231 - v44;
          unsigned int v106 = v220 + 2;
          float v234 = _S27 * v233;
          float v235 = (float)(_S24 * v233) + (float)(v232 * _S29);
          float v236 = _S25 * v232;
        }
        else
        {
          unsigned int v106 = 0;
          float v236 = 0.0;
          float v235 = 0.0;
          float v234 = 0.0;
        }
        _Q8.i8[0] = v105->i8[1];
        float v237 = _S26 * (float)((float)_Q8.u32[0] - v41);
        float v238 = v234 + v237;
        float v239 = 8191.0;
        if (v238 <= 8191.0)
        {
          float v239 = v238;
          if (v238 < 0.0) {
            float v239 = 0.0;
          }
        }
        float v240 = v235 + v237;
        BOOL v201 = (float)(v235 + v237) <= 8191.0;
        float v241 = 8191.0;
        if (v201)
        {
          float v241 = v240;
          if (v240 < 0.0) {
            float v241 = 0.0;
          }
        }
        float v242 = v236 + v237;
        BOOL v201 = (float)(v236 + v237) <= 8191.0;
        float v243 = 8191.0;
        if (v201)
        {
          float v243 = v242;
          if (v242 < 0.0) {
            float v243 = 0.0;
          }
        }
        _H4 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v202, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        _H7 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v204, 0.0), 8191.0)));
        __asm { FCVT            S7, H7 }
        _H18 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0)));
        _H19 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v214, 0.0), 8191.0)));
        __asm
        {
          FCVT            S18, H18
          FCVT            S19, H19
        }
        _H21 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v216, 0.0), 8191.0)));
        unsigned int v253 = llroundf(fminf(fmaxf(v213, 0.0), 8191.0));
        __asm { FCVT            S20, H21 }
        _H21 = *(_WORD *)(v52 + 2 * v253);
        __asm { FCVT            S21, H21 }
        _H0 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v227, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H1 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        _H6 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v226, 0.0), 8191.0)));
        _H23 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v239, 0.0), 8191.0)));
        __asm
        {
          FCVT            S6, H6
          FCVT            S23, H23
        }
        _H17 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v241, 0.0), 8191.0)));
        unsigned int v266 = llroundf(fminf(fmaxf(v243, 0.0), 8191.0));
        __asm { FCVT            S17, H17 }
        _S30 = (float)((float)(v347 * _S7) + (float)(_S4 * v348)) + (float)(_S18 * v346);
        float v269 = (float)((float)(v345 * _S7) + (float)(_S4 * v340)) + (float)(_S18 * v344);
        _S4 = (float)((float)(v342 * _S7) + (float)(_S4 * v343)) + (float)(_S18 * v341);
        _S7 = (float)((float)(v347 * _S20) + (float)(_S19 * v348)) + (float)(_S21 * v346);
        float v272 = (float)((float)(v345 * _S20) + (float)(_S19 * v340)) + (float)(_S21 * v344);
        _S19 = (float)((float)(v342 * _S20) + (float)(_S19 * v343)) + (float)(_S21 * v341);
        _S20 = (float)((float)(v347 * _S1) + (float)(_S0 * v348)) + (float)(_S6 * v346);
        _S21 = (float)((float)(v345 * _S1) + (float)(_S0 * v340)) + (float)(_S6 * v344);
        float v276 = (float)((float)(v342 * _S1) + (float)(_S0 * v343)) + (float)(_S6 * v341);
        _S0 = (float)(v347 * _S17) + (float)(_S23 * v348);
        _S1 = (float)(v345 * _S17) + (float)(_S23 * v340);
        _S6 = (float)(v342 * _S17) + (float)(_S23 * v343);
        LOWORD(_S17) = *(_WORD *)(v52 + 2 * v266);
        __asm { FCVT            S17, H17 }
        _S23 = _S0 + (float)(_S17 * v346);
        float v282 = _S1 + (float)(_S17 * v344);
        float v283 = _S6 + (float)(_S17 * v341);
        LOWORD(_S0) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        LOWORD(_S1) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(v269, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        LOWORD(_S4) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
        LOWORD(_S6) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
        __asm
        {
          FCVT            S4, H4
          FCVT            S6, H6
        }
        LOWORD(_S7) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(v272, 0.0), 8191.0)));
        __asm { FCVT            S18, H7 }
        LOWORD(_S7) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
        __asm { FCVT            S7, H7 }
        LOWORD(_S17) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
        __asm { FCVT            S17, H17 }
        LOWORD(_S19) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
        __asm { FCVT            S19, H19 }
        LOWORD(_S20) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(v276, 0.0), 8191.0)));
        LOWORD(_S21) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
        __asm
        {
          FCVT            S20, H20
          FCVT            S21, H21
        }
        LOWORD(_S23) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(v282, 0.0), 8191.0)));
        __asm { FCVT            S23, H23 }
        LOWORD(_S30) = *(_WORD *)(v73 + 2 * llroundf(fminf(fmaxf(v283, 0.0), 8191.0)));
        __asm { FCVT            S30, H30 }
        float v296 = (float)((float)((float)(v349 * _S1) + (float)(v350 * _S0)) + (float)(_S28 * _S4)) + v50;
        if (v296 < v50) {
          float v297 = v50;
        }
        else {
          float v297 = (float)((float)((float)(v349 * _S1) + (float)(v350 * _S0)) + (float)(_S28 * _S4)) + v50;
        }
        BOOL v201 = v296 <= v339;
        float v298 = (float)((float)((float)(v349 * _S18) + (float)(v350 * _S6)) + (float)(_S28 * _S7)) + v50;
        if (!v201) {
          float v297 = v339;
        }
        unsigned int v299 = llroundf(v297);
        if (v298 < v50) {
          float v300 = v50;
        }
        else {
          float v300 = (float)((float)((float)(v349 * _S18) + (float)(v350 * _S6)) + (float)(_S28 * _S7)) + v50;
        }
        BOOL v201 = v298 <= v339;
        float v301 = (float)((float)((float)(v349 * _S19) + (float)(v350 * _S17)) + (float)(_S28 * _S20)) + v50;
        if (!v201) {
          float v300 = v339;
        }
        unsigned int v302 = llroundf(v300);
        if (v301 < v50) {
          float v303 = v50;
        }
        else {
          float v303 = (float)((float)((float)(v349 * _S19) + (float)(v350 * _S17)) + (float)(_S28 * _S20)) + v50;
        }
        BOOL v201 = v301 <= v339;
        float v304 = (float)((float)((float)(v349 * _S23) + (float)(v350 * _S21)) + (float)(_S28 * _S30)) + v50;
        if (!v201) {
          float v303 = v339;
        }
        unsigned int v305 = llroundf(v303);
        if (v304 < v50) {
          float v306 = v50;
        }
        else {
          float v306 = (float)((float)((float)(v349 * _S23) + (float)(v350 * _S21)) + (float)(_S28 * _S30)) + v50;
        }
        if (v304 <= v339) {
          *(float *)_Q8.i32 = v306;
        }
        else {
          *(float *)_Q8.i32 = v339;
        }
        float v307 = (float)((float)(_S0 + _S6) + _S17) + _S21;
        float v308 = (float)((float)(_S1 + _S18) + _S19) + _S23;
        v75->i16[0] = v299 << v55;
        v75->i16[1] = v302 << v55;
        v107->i16[0] = v305 << v55;
        v107->i16[1] = llroundf(*(float *)_Q8.i32) << v55;
        float v309 = (float)((float)(_S4 + _S7) + _S20) + _S30;
        float v310 = (float)((float)(v365 + (float)(v307 * v359)) + (float)(v308 * *(float *)&v98))
             + (float)(v309 * *(float *)&v99);
        *(float *)v70.i32 = v364;
        if (v310 <= v364)
        {
          *(float *)v70.i32 = (float)((float)(v365 + (float)(v307 * v359)) + (float)(v308 * *(float *)&v98))
                            + (float)(v309 * *(float *)&v99);
          if (v310 < v371) {
            *(float *)v70.i32 = v371;
          }
        }
        *(float *)v100.i32 = (float)((float)(v365 + (float)(v307 * v326)) + (float)(v308 * *((float *)&v98 + 1)))
                           + (float)(v309 * *((float *)&v99 + 1));
        v108->i16[0] = llroundf(*(float *)v70.i32) << v55;
        *(float *)v71.i32 = v364;
        if (*(float *)v100.i32 <= v364)
        {
          v71.i32[0] = v100.i32[0];
          if (*(float *)v100.i32 < v371) {
            *(float *)v71.i32 = v371;
          }
        }
        v195 += 2;
        float v81 = (int8x8_t *)((char *)v81 + 2);
        float v105 = (int8x8_t *)((char *)v105 + 2);
        v108->i16[1] = llroundf(*(float *)v71.i32) << v55;
        float v75 = (uint16x8_t *)((char *)v75 + 4);
        float v107 = (uint16x8_t *)((char *)v107 + 4);
        float v108 = (int16x8_t *)((char *)v108 + 4);
        _S27 = v363;
        _S29 = v362;
        _S24 = v361;
      }
      uint64_t v33 = v322;
      uint64_t v32 = v323;
      float v81 = (int8x8_t *)&v101[v323];
      float v80 = &v102[v322];
      uint64_t v36 = v321;
      float v75 = (uint16x8_t *)&v103[v321];
      v74 += v320;
      v19 += 2;
    }
    while (v23 > v19);
    if (v319 && v318)
    {
      uint64_t v311 = 0;
      do
      {
        if (v20)
        {
          unint64_t v312 = v20;
          uint64_t v313 = v53;
          float v314 = v35;
          do
          {
            __int16 v315 = *v314++;
            *v313++ = v315 | (v315 << 8);
            --v312;
          }
          while (v312);
        }
        v35 += v316;
        v53 += v317;
        ++v311;
      }
      while (v311 != v23);
    }
    else if (v318)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v53, 255, 2 * v20);
        }
        v53 += v317;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_xf420_GCD(void *result, uint64_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)((char *)result + 28);
  unint64_t v5 = 2 * *(unsigned __int8 *)result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)((char *)result + 20);
    uint64_t v10 = *(void *)((char *)result + 36);
    uint64_t v11 = *(void *)((char *)result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = result[14];
    uint64_t v14 = (void *)result[16];
    uint64_t v15 = result[15] + 2 * (result[13] * a2 / v5);
    uint64_t v16 = result[19];
    uint64_t v17 = (void *)result[7];
    uint64_t v18 = (uint64_t *)result[8];
    uint64_t v19 = (uint64_t *)result[17];
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    uint64_t v200 = v18[2];
    uint64_t v202 = v17[2];
    size_t v22 = (unsigned __int8 *)(v202 + v200 * v11 + v10);
    uint64_t v23 = *v19;
    uint64_t v24 = v19[1];
    uint64_t v25 = v19[2];
    uint64_t v201 = v14[2];
    uint64_t v26 = (char *)(v201 + v25 * v15 + 2 * v13);
    *(float *)&unsigned int v27 = 8191.0 / (float)*(unsigned int *)(v16 + 128);
    LOWORD(a4) = *(_WORD *)(v16 + 140);
    float v28 = (float)LODWORD(a4);
    LOWORD(a4) = *(_WORD *)(v16 + 142);
    float v29 = (float)LODWORD(a4);
    float v30 = *(float *)&v27 * *(float *)v16;
    float v31 = *(float *)&v27 * *(float *)(v16 + 8);
    float v32 = *(float *)&v27 * *(float *)(v16 + 16);
    float v33 = *(float *)&v27 * *(float *)(v16 + 20);
    float v34 = *(float *)&v27 * *(float *)(v16 + 28);
    LOWORD(v27) = *(_WORD *)(v16 + 144);
    float v35 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 146);
    float v36 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 148);
    float v37 = (float)v27;
    LOWORD(v27) = *(_WORD *)(v16 + 150);
    *(float *)&unsigned int v38 = (float)v27;
    float v219 = *(float *)&v38;
    LOWORD(v38) = *(_WORD *)(v16 + 152);
    float v213 = (float)v38;
    float v214 = v36;
    float v211 = *(float *)(v16 + 40);
    float v212 = *(float *)(v16 + 36);
    float v209 = *(float *)(v16 + 48) * 0.25;
    float v210 = *(float *)(v16 + 44);
    float v207 = *(float *)(v16 + 56) * 0.25;
    float v208 = *(float *)(v16 + 52) * 0.25;
    float v205 = *(float *)(v16 + 64) * 0.25;
    float v206 = *(float *)(v16 + 60) * 0.25;
    float v39 = *(float *)(v16 + 72);
    float v40 = *(float *)(v16 + 68) * 0.25;
    float v203 = v40;
    float v204 = v39;
    float v42 = *(float *)(v16 + 76);
    float v41 = *(float *)(v16 + 80);
    float v43 = *(float *)(v16 + 84);
    float v44 = *(float *)(v16 + 88);
    float v45 = *(float *)(v16 + 92);
    float v46 = *(float *)(v16 + 96);
    float v47 = *(float *)(v16 + 100);
    float v48 = *(float *)(v16 + 104);
    uint64_t result = (void *)(v16 + 164);
    uint64_t v49 = v17[1];
    float v50 = (unsigned char *)(*v17 + *v18 * v11 + v10);
    unsigned int v51 = (unsigned char *)(v49 + v21 * v11 + v10);
    uint64_t v52 = v16 + 16548;
    if (v49) {
      uint64_t v53 = v51;
    }
    else {
      uint64_t v53 = 0;
    }
    unsigned int v54 = *(unsigned __int8 *)(v16 + 132);
    uint64_t v55 = v14[1];
    uint64_t v56 = (char *)(*v14 + v23 * v15 + 2 * v13);
    if (v54 >= 0x11) {
      char v57 = 0;
    }
    else {
      char v57 = 16 - v54;
    }
    uint64_t v58 = v55 + v19[1] * (v15 / 2) + 2 * v13;
    char v59 = v57;
    float v217 = v32;
    float v218 = v31;
    float v215 = v34;
    float v216 = v33;
    do
    {
      float v60 = &v56[v23];
      float v61 = &v53[v21];
      float16x8_t v62 = &v50[v20];
      if (v9)
      {
        unint64_t v63 = 0;
        uint64_t v64 = &v50[v20];
        unint64_t v65 = &v53[v21];
        float v66 = &v56[v23];
        do
        {
          if (v53)
          {
            LOBYTE(v40) = *v53;
            *(float *)&unsigned int v67 = (float)LODWORD(v40);
            float v68 = *(float *)&v67 - v29;
            LOBYTE(v67) = v53[1];
            float v69 = (float)v67 - v29;
            v53 += 2;
            float v70 = v31 * v69;
            float v39 = v33 * v69;
            float v71 = v39 + (float)(v68 * v32);
            float v72 = v34 * v68;
          }
          else
          {
            float v72 = 0.0;
            float v71 = 0.0;
            float v70 = 0.0;
          }
          LOBYTE(v39) = *v50;
          float v73 = v30 * (float)((float)LODWORD(v39) - v28);
          float v74 = v70 + v73;
          BOOL v75 = (float)(v70 + v73) <= 8191.0;
          float v76 = 8191.0;
          if (v75)
          {
            float v76 = v74;
            if (v74 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v71 + v73;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v72 + v73;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          if (v53)
          {
            LOBYTE(v79) = *v53;
            float v81 = (float)LODWORD(v79) - v29;
            LOBYTE(v73) = v53[1];
            float v82 = (float)LODWORD(v73) - v29;
            v53 += 2;
            float v83 = v31 * v82;
            float v84 = (float)(v33 * v82) + (float)(v81 * v32);
            float v85 = v34 * v81;
          }
          else
          {
            float v85 = 0.0;
            float v84 = 0.0;
            float v83 = 0.0;
          }
          LOBYTE(v74) = v50[1];
          float v86 = v30 * (float)((float)LODWORD(v74) - v28);
          float v87 = v83 + v86;
          float v88 = 8191.0;
          float v89 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v89 = v87;
            if (v87 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v84 + v86;
          float v91 = 8191.0;
          if ((float)(v84 + v86) <= 8191.0)
          {
            float v91 = v84 + v86;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v85 + v86;
          if (v92 <= 8191.0)
          {
            float v88 = v92;
            if (v92 < 0.0) {
              float v88 = 0.0;
            }
          }
          if (v65)
          {
            LOBYTE(v92) = *v65;
            float v93 = (float)LODWORD(v92) - v29;
            LOBYTE(v90) = v65[1];
            float v94 = (float)LODWORD(v90) - v29;
            v65 += 2;
            float v95 = v31 * v94;
            float v84 = v33 * v94;
            float v96 = v84 + (float)(v93 * v32);
            float v97 = v34 * v93;
          }
          else
          {
            float v97 = 0.0;
            float v96 = 0.0;
            float v95 = 0.0;
          }
          LOBYTE(v84) = *v64;
          float v98 = v30 * (float)((float)LODWORD(v84) - v28);
          float v99 = v95 + v98;
          float v100 = 8191.0;
          float v101 = 8191.0;
          if (v99 <= 8191.0)
          {
            float v101 = v99;
            if (v99 < 0.0) {
              float v101 = 0.0;
            }
          }
          float v102 = v96 + v98;
          BOOL v75 = (float)(v96 + v98) <= 8191.0;
          float v103 = 8191.0;
          if (v75)
          {
            float v103 = v102;
            if (v102 < 0.0) {
              float v103 = 0.0;
            }
          }
          float v104 = v97 + v98;
          if (v104 <= 8191.0)
          {
            float v100 = v104;
            if (v104 < 0.0) {
              float v100 = 0.0;
            }
          }
          if (v65)
          {
            LOBYTE(v104) = *v65;
            float v105 = (float)LODWORD(v104) - v29;
            LOBYTE(v102) = v65[1];
            float v106 = (float)LODWORD(v102) - v29;
            v65 += 2;
            float v107 = v31 * v106;
            float v102 = v33 * v106;
            float v108 = v102 + (float)(v105 * v32);
            float v109 = v34 * v105;
          }
          else
          {
            float v109 = 0.0;
            float v108 = 0.0;
            float v107 = 0.0;
          }
          LOBYTE(v102) = v64[1];
          float v110 = v28;
          float v111 = v30;
          float v112 = v30 * (float)((float)LODWORD(v102) - v28);
          float v113 = v107 + v112;
          float v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            float v114 = v113;
            if (v113 < 0.0) {
              float v114 = 0.0;
            }
          }
          float v115 = v108 + v112;
          BOOL v75 = (float)(v108 + v112) <= 8191.0;
          float v116 = 8191.0;
          if (v75)
          {
            float v116 = v115;
            if (v115 < 0.0) {
              float v116 = 0.0;
            }
          }
          float v117 = v109 + v112;
          float v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            float v118 = v117;
            if (v117 < 0.0) {
              float v118 = 0.0;
            }
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S24, H24
          }
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H27 = *((_WORD *)result + llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v101, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H17 = *((_WORD *)result + llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H21 = *((_WORD *)result + llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S21, H21
          }
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          unsigned int v144 = llroundf(fminf(fmaxf(v118, 0.0), 8191.0));
          __asm { FCVT            S1, H7 }
          float v146 = (float)((float)(v42 * _S3) + (float)(_S0 * v204)) + (float)(_S6 * v41);
          float v147 = (float)((float)(v44 * _S3) + (float)(_S0 * v43)) + (float)(_S6 * v45);
          _S3 = (float)((float)(v47 * _S3) + (float)(_S0 * v46)) + (float)(_S6 * v48);
          _S6 = (float)((float)(v42 * _S25) + (float)(_S24 * v204)) + (float)(_S27 * v41);
          float v150 = (float)((float)(v44 * _S25) + (float)(_S24 * v43)) + (float)(_S27 * v45);
          float v151 = (float)((float)(v47 * _S25) + (float)(_S24 * v46)) + (float)(_S27 * v48);
          float v152 = (float)((float)(v42 * _S5) + (float)(_S4 * v204)) + (float)(_S17 * v41);
          float v153 = (float)((float)(v44 * _S5) + (float)(_S4 * v43)) + (float)(_S17 * v45);
          float v154 = (float)((float)(v47 * _S5) + (float)(_S4 * v46)) + (float)(_S17 * v48);
          _S0 = (float)(v42 * _S1) + (float)(_S21 * v204);
          _S4 = (float)(v44 * _S1) + (float)(_S21 * v43);
          float v157 = (float)(v47 * _S1) + (float)(_S21 * v46);
          LOWORD(_S5) = *((_WORD *)result + v144);
          __asm { FCVT            S5, H5 }
          _S21 = _S0 + (float)(_S5 * v41);
          float v160 = _S4 + (float)(_S5 * v45);
          float v161 = v157 + (float)(_S5 * v48);
          LOWORD(_S0) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H3
            FCVT            S17, H6
          }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          unsigned int v166 = llroundf(fminf(fmaxf(v151, 0.0), 8191.0));
          __asm { FCVT            S24, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * v166);
          __asm { FCVT            S6, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          __asm { FCVT            S25, H3 }
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H3
            FCVT            S3, H21
          }
          LOWORD(_S21) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          unsigned int v173 = llroundf(fminf(fmaxf(v161, 0.0), 8191.0));
          __asm { FCVT            S1, H21 }
          _H19 = *(_WORD *)(v52 + 2 * v173);
          __asm { FCVT            S19, H19 }
          float v177 = (float)((float)((float)(v211 * _S4) + (float)(v212 * _S0)) + (float)(v210 * _S5)) + v35;
          if (v177 < v35) {
            float v178 = v35;
          }
          else {
            float v178 = (float)((float)((float)(v211 * _S4) + (float)(v212 * _S0)) + (float)(v210 * _S5)) + v35;
          }
          BOOL v75 = v177 <= v37;
          float v179 = (float)((float)((float)(v211 * _S24) + (float)(v212 * _S17)) + (float)(v210 * _S6)) + v35;
          if (!v75) {
            float v178 = v37;
          }
          unsigned int v180 = llroundf(v178);
          if (v179 < v35) {
            float v181 = v35;
          }
          else {
            float v181 = (float)((float)((float)(v211 * _S24) + (float)(v212 * _S17)) + (float)(v210 * _S6)) + v35;
          }
          BOOL v75 = v179 <= v37;
          float v182 = (float)((float)((float)(v211 * _S25) + (float)(v212 * _S7)) + (float)(v210 * _S27)) + v35;
          if (!v75) {
            float v181 = v37;
          }
          unsigned int v183 = llroundf(v181);
          if (v182 < v35) {
            float v184 = v35;
          }
          else {
            float v184 = (float)((float)((float)(v211 * _S25) + (float)(v212 * _S7)) + (float)(v210 * _S27)) + v35;
          }
          BOOL v75 = v182 <= v37;
          float v185 = (float)((float)((float)(v211 * _S1) + (float)(v212 * _S3)) + (float)(v210 * _S19)) + v35;
          if (!v75) {
            float v184 = v37;
          }
          unsigned int v186 = llroundf(v184);
          if (v185 < v35) {
            float v187 = v35;
          }
          else {
            float v187 = (float)((float)((float)(v211 * _S1) + (float)(v212 * _S3)) + (float)(v210 * _S19)) + v35;
          }
          if (v185 <= v37) {
            float v188 = v187;
          }
          else {
            float v188 = v37;
          }
          float v189 = (float)((float)(_S0 + _S17) + _S7) + _S3;
          float v190 = (float)((float)(_S4 + _S24) + _S25) + _S1;
          *(_WORD *)uint64_t v56 = v180 << v59;
          *((_WORD *)v56 + 1) = v183 << v59;
          *(_WORD *)float v66 = v186 << v59;
          *((_WORD *)v66 + 1) = llroundf(v188) << v59;
          float v39 = (float)((float)(_S5 + _S6) + _S27) + _S19;
          float v191 = (float)((float)(v214 + (float)(v189 * v209)) + (float)(v190 * v208)) + (float)(v39 * v207);
          float v192 = v213;
          if (v191 <= v213)
          {
            float v192 = (float)((float)(v214 + (float)(v189 * v209)) + (float)(v190 * v208)) + (float)(v39 * v207);
            if (v191 < v219) {
              float v192 = v219;
            }
          }
          int16x8_t v193 = (_WORD *)(v58 + 2 * v63);
          float v194 = (float)((float)(v214 + (float)(v189 * v206)) + (float)(v190 * v205)) + (float)(v39 * v203);
          *int16x8_t v193 = llroundf(v192) << v59;
          float v40 = v213;
          float v28 = v110;
          float v30 = v111;
          float v31 = v218;
          if (v194 <= v213)
          {
            float v40 = v194;
            if (v194 < v219) {
              float v40 = v219;
            }
          }
          v50 += 2;
          v64 += 2;
          v56 += 4;
          v66 += 4;
          v193[1] = llroundf(v40) << v59;
          v63 += 2;
          float v33 = v216;
          float v32 = v217;
          float v34 = v215;
        }
        while (v9 > v63);
      }
      float v50 = &v62[v20];
      uint64_t v53 = &v61[v21];
      uint64_t v56 = &v60[v23];
      v58 += v24;
      v8 += 2;
    }
    while (v12 > v8);
    if (v202 && v201)
    {
      uint64_t v195 = 0;
      do
      {
        if (v9)
        {
          unint64_t v196 = v9;
          float v197 = v26;
          float16x8_t v198 = v22;
          do
          {
            __int16 v199 = *v198++;
            *v197++ = v199 | (v199 << 8);
            --v196;
          }
          while (v196);
        }
        v22 += v200;
        v26 += v25;
        ++v195;
      }
      while (v195 != v12);
    }
    else if (v201)
    {
      do
      {
        if (v9) {
          uint64_t result = memset(v26, 255, 2 * v9);
        }
        v26 += v25;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_xf420_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_xf420_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = 2 * *result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    unint64_t v12 = *(void *)(result + 20);
    uint64_t v13 = *(void *)(result + 36);
    uint64_t v14 = *(void *)(result + 44) + 2 * v9;
    unint64_t v15 = 2 * v10 - 2 * v9;
    uint64_t v16 = *((void *)result + 14);
    uint64_t v17 = (uint64_t *)*((void *)result + 16);
    uint64_t v18 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v8);
    uint64_t v19 = *((void *)result + 19);
    uint64_t v20 = (void *)*((void *)result + 7);
    uint64_t v21 = (uint64_t *)*((void *)result + 8);
    size_t v22 = (uint64_t *)*((void *)result + 17);
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    unsigned int v27 = (unsigned __int8 *)(v26 + v25 * v14 + v13);
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    unsigned int v32 = *(unsigned __int16 *)(v19 + 140);
    unsigned int v33 = *(unsigned __int16 *)(v19 + 142);
    unsigned int v34 = *(unsigned __int16 *)(v19 + 144);
    unsigned int v35 = *(unsigned __int16 *)(v19 + 146);
    unsigned int v36 = *(unsigned __int16 *)(v19 + 148);
    unsigned int v37 = *(unsigned __int16 *)(v19 + 150);
    unsigned int v38 = *(unsigned __int16 *)(v19 + 152);
    _S0 = *(float *)(v19 + 36);
    _S1 = *(float *)(v19 + 40);
    _S2 = *(float *)(v19 + 44);
    v42.i32[0] = *(_DWORD *)(v19 + 48);
    v4.i32[0] = *(_DWORD *)(v19 + 52);
    v43.i32[0] = *(_DWORD *)(v19 + 56);
    float v44 = (float)v32;
    *(short float *)v5.i16 = (short float)v32;
    float v45 = (char *)(v31 + v30 * v18 + 2 * v16);
    float v46 = (float)*(unsigned int *)(v19 + 136) / (float)*(unsigned int *)(v19 + 128);
    float v47 = (float)v33;
    _S5 = v46 * *(float *)v19;
    _S6 = v46 * *(float *)(v19 + 8);
    _S7 = v46 * *(float *)(v19 + 16);
    _S16 = v46 * *(float *)(v19 + 20);
    float v52 = (float)v34;
    float v188 = (float)v35;
    float v53 = (float)v36;
    _S20 = v46 * *(float *)(v19 + 28);
    float v196 = (float)v37;
    __asm { FCVT            H8, S5 }
    _Q18 = vdupq_lane_s16(v5, 0);
    float16x8_t v187 = (float16x8_t)_Q18;
    *(short float *)_Q18.i16 = -(short float)v33;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q18.i8, 0);
    __asm { FCVT            H9, S20 }
    short float v195 = _H9;
    __asm { FCVT            H9, S7 }
    short float v194 = _H9;
    __asm { FCVT            H9, S16 }
    short float v193 = _H9;
    v42.i32[1] = *(_DWORD *)(v19 + 60);
    __asm { FMOV            V18.2S, #0.25 }
    *(float32x2_t *)v6.f32 = vmul_f32(v42, *(float32x2_t *)_Q18.i8);
    float16x8_t v185 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    v4.i32[1] = *(_DWORD *)(v19 + 64);
    *(float32x2_t *)v4.f32 = vmul_f32(*(float32x2_t *)v4.f32, *(float32x2_t *)_Q18.i8);
    float32x4_t v65 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v184 = (float16x8_t)v65;
    v43.i32[1] = *(_DWORD *)(v19 + 68);
    *(float32x2_t *)v65.f32 = vmul_f32(v43, *(float32x2_t *)_Q18.i8);
    *(float16x4_t *)_Q18.i8 = vcvt_f16_f32(v65);
    __asm { FCVT            H9, S6 }
    short float v192 = _H9;
    int32x4_t v67 = vdupq_lane_s32(*(int32x2_t *)_Q18.i8, 0);
    *(short float *)_Q18.i16 = (short float)v34;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q18.i8, 0);
    *(short float *)_Q18.i16 = (short float)v35;
    int16x8_t v69 = vdupq_lane_s16(*(int16x4_t *)_Q18.i8, 0);
    float16x8_t v181 = (float16x8_t)v69;
    float16x8_t v182 = (float16x8_t)v67;
    *(short float *)v69.i16 = (short float)v36;
    int16x8_t v70 = vdupq_lane_s16(*(int16x4_t *)v69.i8, 0);
    *(short float *)v69.i16 = (short float)v37;
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)v69.i8, 0);
    float16x8_t v179 = (float16x8_t)v71;
    float16x8_t v180 = (float16x8_t)v70;
    *(short float *)v71.i16 = (short float)v38;
    float16x8_t v178 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
    unsigned int v72 = *(unsigned __int8 *)(v19 + 132);
    unsigned __int8 v73 = 16 - v72;
    if (v72 >= 0x11) {
      unsigned __int8 v73 = 0;
    }
    if (v18 >= 0) {
      uint64_t v74 = v18;
    }
    else {
      uint64_t v74 = v18 + 1;
    }
    uint64_t v75 = *v17;
    uint64_t v76 = v17[1] + v29 * (v74 >> 1) + 2 * v16;
    uint64_t result = (unsigned __int8 *)(v75 + v28 * v18 + 2 * v16);
    float v79 = v20;
    uint64_t v77 = *v20;
    uint64_t v78 = v79[1];
    uint64_t v80 = v78 + v24 * v14 + v13;
    if (!v78) {
      uint64_t v80 = 0;
    }
    float v81 = (int8x8_t *)(v77 + v23 * v14 + v13);
    unsigned __int8 v82 = v73;
    __asm { FCVT            H9, S0 }
    short float v177 = _H9;
    __asm { FCVT            H9, S1 }
    short float v176 = _H9;
    __asm { FCVT            H9, S2 }
    short float v175 = _H9;
    float v186 = v6.f32[0];
    uint64_t v86 = v4.i64[0];
    float v174 = v6.f32[1];
    v87.i32[0] = v65.i32[1];
    float v173 = v65.f32[1];
    float v183 = v65.f32[0];
    float v88 = (float)v38;
    uint16x8_t v89 = (uint16x8_t)vdupq_n_s16(v73);
    float v190 = _S7;
    float v191 = _S6;
    float v189 = _S16;
    do
    {
      uint64_t v90 = (uint64_t)v81 + v23;
      uint64_t v91 = v80 + v24;
      float v92 = &result[v28];
      if ((int)v12 < 8)
      {
        unint64_t v122 = 0;
        float v97 = (uint16x8_t *)v76;
        float v96 = (uint16x8_t *)&result[v28];
        uint64_t v95 = v80 + v24;
        float v94 = (int8x8_t *)((char *)v81 + v23);
      }
      else
      {
        int v93 = 0;
        float v94 = (int8x8_t *)((char *)v81 + v23);
        uint64_t v95 = v80 + v24;
        float v96 = (uint16x8_t *)&result[v28];
        float v97 = (uint16x8_t *)v76;
        do
        {
          float16x8_t v98 = 0uLL;
          if (v80)
          {
            float16x8_t v197 = (float16x8_t)vld2_s8((const char *)v80);
            v80 += 16;
            *(int8x8_t *)v99.i8 = vzip1_s8(*(int8x8_t *)v197.i8, 0);
            v99.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v197.i8, 0);
            *(int8x8_t *)v100.i8 = vzip1_s8((int8x8_t)v197.u64[1], 0);
            v100.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v197.u64[1], 0);
            float16x8_t v101 = vaddq_f16(v61, vcvtq_f16_u16(v99));
            float16x8_t v197 = vaddq_f16(v61, vcvtq_f16_u16(v100));
            float16x8_t v102 = vmulq_n_f16(v197, v192);
            float16x8_t v103 = vmlaq_n_f16(vmulq_n_f16(v101, v194), v197, v193);
            float16x8_t v104 = vmulq_n_f16(v101, v195);
          }
          else
          {
            float16x8_t v104 = 0uLL;
            float16x8_t v103 = 0uLL;
            float16x8_t v102 = 0uLL;
          }
          int8x8_t v105 = *v81++;
          int8x8_t v106 = v105;
          if (v95)
          {
            float16x8_t v198 = (float16x8_t)vld2_s8((const char *)v95);
            v95 += 16;
            *(int8x8_t *)v107.i8 = vzip1_s8(*(int8x8_t *)v198.i8, 0);
            v107.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v198.i8, 0);
            *(int8x8_t *)v108.i8 = vzip1_s8((int8x8_t)v198.u64[1], 0);
            v108.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v198.u64[1], 0);
            *(float16x8_t *)((char *)&v198 + 8) = vaddq_f16(v61, vcvtq_f16_u16(v107));
            float16x8_t v198 = vaddq_f16(v61, vcvtq_f16_u16(v108));
            float16x8_t v109 = vmulq_n_f16(v198, v192);
            float16x8_t v110 = vmlaq_n_f16(vmulq_n_f16(*(float16x8_t *)((char *)&v198 + 8), v194), v198, v193);
            float16x8_t v98 = vmulq_n_f16(*(float16x8_t *)((char *)&v198 + 8), v195);
          }
          else
          {
            float16x8_t v110 = 0uLL;
            float16x8_t v109 = 0uLL;
          }
          *(int8x8_t *)v65.f32 = vzip1_s8(v106, 0);
          *(int8x8_t *)&v65.u32[2] = vzip2_s8(v106, 0);
          int8x8_t v111 = *v94++;
          *(int8x8_t *)v112.i8 = vzip1_s8(v111, 0);
          v112.u64[1] = (unint64_t)vzip2_s8(v111, 0);
          float16x8_t v113 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v65), v187);
          float16x8_t v114 = vmlaq_n_f16(v102, v113, _H8);
          float16x8_t v115 = vmlaq_n_f16(v103, v113, _H8);
          float16x8_t v116 = vmlaq_n_f16(v104, v113, _H8);
          float16x8_t v117 = vsubq_f16(vcvtq_f16_u16(v112), v187);
          float16x8_t v118 = vmlaq_n_f16(v109, v117, _H8);
          float16x8_t v119 = vmlaq_n_f16(v110, v117, _H8);
          float16x8_t v120 = vmlaq_n_f16(v98, v117, _H8);
          *(uint16x8_t *)uint64_t result = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v68, v114, v177), v115, v176), v116, v175), v68), v180)), v89);
          result += 16;
          *v96++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v68, v118, v177), v119, v176), v120, v175), v68), v180)), v89);
          int16x8_t v121 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v118, (int16x8_t)v119), vaddq_f16(vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v114, (int16x8_t)v115), (float16x8_t)vuzp2q_s16((int16x8_t)v114, (int16x8_t)v115)), (float16x8_t)vuzp1q_s16((int16x8_t)v118, (int16x8_t)v119)));
          v65.i32[0] = v178.i32[0];
          uint16x8_t v87 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v181, v185, (float16x8_t)vzip1q_s16(v121, v121)), v184, (float16x8_t)vzip2q_s16(v121, v121)), v182, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v120, (int16x8_t)v120), vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v116, (int16x8_t)v116), (float16x8_t)vtrn2q_s16((int16x8_t)v116, (int16x8_t)v116)), (float16x8_t)vtrn1q_s16((int16x8_t)v120, (int16x8_t)v120)))), v179), v178)), v89);
          *v97++ = v87;
          v93 += 8;
        }
        while (v93 < (int)v12 - 7);
        unint64_t v122 = v12 & 0xFFFFFFF8;
      }
      for (; v12 > v122; _S16 = v189)
      {
        float v123 = 0.0;
        if (v80)
        {
          v87.i8[0] = *(unsigned char *)v80;
          *(float *)v87.i32 = (float)v87.u32[0] - v47;
          v65.i8[0] = *(unsigned char *)(v80 + 1);
          float v124 = (float)v65.u32[0] - v47;
          v80 += 2;
          float v125 = _S6 * v124;
          v65.f32[0] = _S16 * v124;
          float v126 = v65.f32[0] + (float)(*(float *)v87.i32 * _S7);
          float v127 = _S20 * *(float *)v87.i32;
          if (v80)
          {
            v87.i8[0] = *(unsigned char *)v80;
            *(float *)v87.i32 = (float)v87.u32[0] - v47;
            v65.i8[0] = *(unsigned char *)(v80 + 1);
            float v128 = (float)v65.u32[0] - v47;
            v80 += 2;
            float v129 = _S6 * v128;
            float v130 = (float)(_S16 * v128) + (float)(*(float *)v87.i32 * _S7);
            float v123 = _S20 * *(float *)v87.i32;
            goto LABEL_27;
          }
        }
        else
        {
          float v127 = 0.0;
          float v126 = 0.0;
          float v125 = 0.0;
        }
        float v130 = 0.0;
        float v129 = 0.0;
LABEL_27:
        float v131 = 0.0;
        if (!v95)
        {
          float v136 = 0.0;
          v87.i32[0] = 0;
          float v135 = 0.0;
LABEL_31:
          float v140 = 0.0;
          float v139 = 0.0;
          goto LABEL_32;
        }
        v87.i8[0] = *(unsigned char *)v95;
        *(float *)&unsigned int v132 = (float)v87.u32[0];
        float v133 = *(float *)&v132 - v47;
        LOBYTE(v132) = *(unsigned char *)(v95 + 1);
        float v134 = (float)v132 - v47;
        v95 += 2;
        float v135 = _S6 * v134;
        *(float *)v87.i32 = (float)(_S16 * v134) + (float)(v133 * _S7);
        float v136 = _S20 * v133;
        if (!v95) {
          goto LABEL_31;
        }
        LOBYTE(v131) = *(unsigned char *)v95;
        float v137 = (float)LODWORD(v131) - v47;
        LOBYTE(v2) = *(unsigned char *)(v95 + 1);
        float v138 = (float)LODWORD(v2) - v47;
        v95 += 2;
        float v139 = _S6 * v138;
        float v140 = (float)(_S16 * v138) + (float)(v137 * _S7);
        float v131 = _S20 * v137;
LABEL_32:
        LOBYTE(v3) = v81->i8[0];
        *(float *)&unsigned int v141 = _S5 * (float)((float)LODWORD(v3) - v44);
        float v142 = v125 + *(float *)&v141;
        float v143 = v126 + *(float *)&v141;
        float v144 = v127 + *(float *)&v141;
        LOBYTE(v141) = v81->i8[1];
        *(float *)&unsigned int v145 = _S5 * (float)((float)v141 - v44);
        float v146 = v129 + *(float *)&v145;
        float v147 = v130 + *(float *)&v145;
        float v148 = v123 + *(float *)&v145;
        LOBYTE(v145) = v94->i8[0];
        float v149 = _S5 * (float)((float)v145 - v44);
        float v150 = v135 + v149;
        float v151 = *(float *)v87.i32 + v149;
        float v3 = v136 + v149;
        v87.i8[0] = v94->i8[1];
        float v152 = _S5 * (float)((float)v87.u32[0] - v44);
        float v153 = v139 + v152;
        float v2 = v140 + v152;
        float v154 = v131 + v152;
        *(float *)v87.i32 = (float)((float)((float)(_S1 * v143) + (float)(_S0 * v142)) + (float)(_S2 * v144)) + v52;
        float v155 = (float)((float)((float)(_S1 * v147) + (float)(_S0 * v146)) + (float)(_S2 * v148)) + v52;
        float v156 = (float)((float)((float)(_S1 * v151) + (float)(_S0 * v150)) + (float)(_S2 * v3)) + v52;
        float v157 = (float)((float)((float)(_S1 * v2) + (float)(_S0 * v153)) + (float)(_S2 * v154)) + v52;
        if (*(float *)v87.i32 < v52) {
          float v158 = v52;
        }
        else {
          float v158 = (float)((float)((float)(_S1 * v143) + (float)(_S0 * v142)) + (float)(_S2 * v144)) + v52;
        }
        if (*(float *)v87.i32 > v53) {
          float v158 = v53;
        }
        *(_WORD *)uint64_t result = llroundf(v158) << v82;
        if (v155 < v52) {
          float v159 = v52;
        }
        else {
          float v159 = (float)((float)((float)(_S1 * v147) + (float)(_S0 * v146)) + (float)(_S2 * v148)) + v52;
        }
        if (v155 > v53) {
          float v159 = v53;
        }
        *((_WORD *)result + 1) = llroundf(v159) << v82;
        if (v156 < v52) {
          float v160 = v52;
        }
        else {
          float v160 = (float)((float)((float)(_S1 * v151) + (float)(_S0 * v150)) + (float)(_S2 * v3)) + v52;
        }
        if (v156 <= v53) {
          float v161 = v160;
        }
        else {
          float v161 = v53;
        }
        v96->i16[0] = llroundf(v161) << v82;
        if (v157 < v52) {
          float v162 = v52;
        }
        else {
          float v162 = (float)((float)((float)(_S1 * v2) + (float)(_S0 * v153)) + (float)(_S2 * v154)) + v52;
        }
        if (v157 > v53) {
          float v162 = v53;
        }
        v96->i16[1] = llroundf(v162) << v82;
        float v163 = (float)((float)(v142 + v146) + v150) + v153;
        float v164 = (float)((float)(v143 + v147) + v151) + v2;
        float v165 = (float)((float)(v144 + v148) + v3) + v154;
        float v166 = (float)((float)(v188 + (float)(v163 * v186)) + (float)(v164 * *(float *)&v86)) + (float)(v165 * v183);
        float v167 = v88;
        if (v166 <= v88)
        {
          float v167 = (float)((float)(v188 + (float)(v163 * v186)) + (float)(v164 * *(float *)&v86)) + (float)(v165 * v183);
          if (v166 < v196) {
            float v167 = v196;
          }
        }
        *(float *)v87.i32 = (float)((float)(v188 + (float)(v163 * v174)) + (float)(v164 * *((float *)&v86 + 1)))
                          + (float)(v165 * v173);
        v97->i16[0] = llroundf(v167) << v82;
        v65.f32[0] = v88;
        if (*(float *)v87.i32 <= v88)
        {
          v65.i32[0] = v87.i32[0];
          if (*(float *)v87.i32 < v196) {
            v65.f32[0] = v196;
          }
        }
        v122 += 2;
        float v81 = (int8x8_t *)((char *)v81 + 2);
        float v94 = (int8x8_t *)((char *)v94 + 2);
        v97->i16[1] = llroundf(v65.f32[0]) << v82;
        result += 4;
        float v96 = (uint16x8_t *)((char *)v96 + 4);
        float v97 = (uint16x8_t *)((char *)v97 + 4);
        _S7 = v190;
        _S6 = v191;
      }
      float v81 = (int8x8_t *)(v90 + v23);
      uint64_t v80 = v91 + v24;
      uint64_t result = &v92[v28];
      v76 += v29;
      v11 += 2;
    }
    while (v15 > v11);
    if (v26 && v31)
    {
      uint64_t v168 = 0;
      do
      {
        if (v12)
        {
          unint64_t v169 = v12;
          uint16x8_t v170 = v45;
          uint32x4_t v171 = v27;
          do
          {
            __int16 v172 = *v171++;
            *v170++ = v172 | (v172 << 8);
            --v169;
          }
          while (v169);
        }
        v27 += v25;
        v45 += v30;
        ++v168;
      }
      while (v168 != v15);
    }
    else if (v31)
    {
      do
      {
        if (v12) {
          uint64_t result = (unsigned __int8 *)memset(v45, 255, 2 * v12);
        }
        v45 += v30;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_xf420_GCD);
  return 0;
}

void *vt_Copy_444vf_rgb_xf420_GCD(void *result, uint64_t a2)
{
  uint64_t v8 = *(void *)((char *)result + 28);
  unint64_t v9 = 2 * *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 == 2 * v10) {
    return result;
  }
  unint64_t v12 = 0;
  unint64_t v13 = *(void *)((char *)result + 20);
  uint64_t v14 = *(void *)((char *)result + 36);
  uint64_t v15 = *(void *)((char *)result + 44) + 2 * v10;
  unint64_t v16 = 2 * v11 - 2 * v10;
  uint64_t v17 = result[14];
  uint64_t v18 = (void *)result[16];
  uint64_t v19 = result[15] + 2 * (result[13] * a2 / v9);
  uint64_t v20 = result[19];
  size_t v22 = (void *)result[7];
  uint64_t v21 = (uint64_t *)result[8];
  uint64_t v23 = (uint64_t *)result[17];
  uint64_t v24 = *v21;
  uint64_t v25 = v21[1];
  uint64_t v26 = v21[2];
  uint64_t v27 = v22[1];
  uint64_t v28 = v22[2];
  uint64_t v29 = (unsigned __int8 *)(v28 + v26 * v15 + v14);
  uint64_t v30 = *v23;
  uint64_t v31 = v23[1];
  uint64_t v32 = v23[2];
  uint64_t v33 = v18[2];
  uint64_t v34 = (unsigned char *)(*v22 + v24 * v15 + v14);
  uint64_t v35 = (char *)(v33 + v32 * v19 + 2 * v17);
  *(float *)&unsigned int v36 = (float)*(unsigned int *)(v20 + 128);
  *(float *)&unsigned int v37 = (float)*(unsigned int *)(v20 + 136);
  float v38 = *(float *)&v37 / *(float *)&v36;
  LOWORD(v36) = *(_WORD *)(v20 + 140);
  float v39 = (float)v36;
  LOWORD(v37) = *(_WORD *)(v20 + 142);
  float v40 = (float)v37;
  float v41 = v38 * *(float *)v20;
  float v42 = v38 * *(float *)(v20 + 8);
  float v43 = v38 * *(float *)(v20 + 16);
  float v44 = v38 * *(float *)(v20 + 20);
  float v45 = *(float *)(v20 + 28);
  float v46 = v38 * v45;
  LOWORD(v45) = *(_WORD *)(v20 + 144);
  float v47 = (float)LODWORD(v45);
  LOWORD(v3) = *(_WORD *)(v20 + 146);
  float v48 = (float)v3;
  LOWORD(v4) = *(_WORD *)(v20 + 148);
  float v49 = (float)v4;
  LOWORD(v5) = *(_WORD *)(v20 + 150);
  float v50 = (float)v5;
  LOWORD(v6) = *(_WORD *)(v20 + 152);
  float v51 = (float)v6;
  float v52 = *(float *)(v20 + 36);
  float v53 = *(float *)(v20 + 40);
  float v54 = *(float *)(v20 + 44);
  float v129 = *(float *)(v20 + 52) * 0.25;
  float v130 = *(float *)(v20 + 48) * 0.25;
  float v127 = *(float *)(v20 + 60) * 0.25;
  float v128 = *(float *)(v20 + 56) * 0.25;
  float v55 = *(float *)(v20 + 64) * 0.25;
  float v56 = *(float *)(v20 + 68) * 0.25;
  float v125 = v56;
  float v126 = v55;
  if (v27) {
    char v57 = (unsigned char *)(v27 + v25 * v15 + v14);
  }
  else {
    char v57 = 0;
  }
  unsigned int v58 = *(unsigned __int8 *)(v20 + 132);
  char v59 = 16 - v58;
  uint64_t v60 = v18[1];
  float16x8_t v61 = (char *)(*v18 + v30 * v19 + 2 * v17);
  if (v58 >= 0x11) {
    char v59 = 0;
  }
  if (v19 >= 0) {
    uint64_t v62 = v19;
  }
  else {
    uint64_t v62 = v19 + 1;
  }
  uint64_t result = (void *)(v60 + v31 * (v62 >> 1) + 2 * v17);
  char v63 = v59;
  do
  {
    uint64_t v64 = &v61[v30];
    float32x4_t v65 = &v57[v25];
    float v66 = &v34[v24];
    if (v13)
    {
      unint64_t v67 = 0;
      float16x8_t v68 = &v34[v24];
      int16x8_t v69 = &v57[v25];
      int16x8_t v70 = &v61[v30];
      do
      {
        float v71 = 0.0;
        if (v57)
        {
          LOBYTE(v56) = *v57;
          float v56 = (float)LODWORD(v56) - v40;
          LOBYTE(v7) = v57[1];
          float v72 = (float)LODWORD(v7) - v40;
          v57 += 2;
          float v73 = v42 * v72;
          float v74 = (float)(v44 * v72) + (float)(v56 * v43);
          float v75 = v46 * v56;
          if (v57)
          {
            LOBYTE(v56) = *v57;
            float v56 = (float)LODWORD(v56) - v40;
            LOBYTE(v71) = v57[1];
            float v76 = (float)LODWORD(v71) - v40;
            v57 += 2;
            float v77 = v42 * v76;
            float v78 = (float)(v44 * v76) + (float)(v56 * v43);
            float v71 = v46 * v56;
            goto LABEL_18;
          }
        }
        else
        {
          float v75 = 0.0;
          float v74 = 0.0;
          float v73 = 0.0;
        }
        float v78 = 0.0;
        float v77 = 0.0;
LABEL_18:
        float v79 = 0.0;
        if (!v69)
        {
          float v84 = 0.0;
          float v83 = 0.0;
          float v82 = 0.0;
LABEL_22:
          float v89 = 0.0;
          float v88 = 0.0;
          goto LABEL_23;
        }
        LOBYTE(v56) = *v69;
        float v80 = (float)LODWORD(v56) - v40;
        LOBYTE(v2) = v69[1];
        float v81 = (float)LODWORD(v2) - v40;
        v69 += 2;
        float v82 = v42 * v81;
        float v83 = (float)(v44 * v81) + (float)(v80 * v43);
        float v84 = v46 * v80;
        if (!v69) {
          goto LABEL_22;
        }
        LOBYTE(v80) = *v69;
        *(float *)&unsigned int v85 = (float)LODWORD(v80);
        float v86 = *(float *)&v85 - v40;
        LOBYTE(v85) = v69[1];
        float v87 = (float)v85 - v40;
        v69 += 2;
        float v88 = v42 * v87;
        float v89 = (float)(v44 * v87) + (float)(v86 * v43);
        float v79 = v46 * v86;
LABEL_23:
        LOBYTE(v55) = *v34;
        *(float *)&unsigned int v90 = v41 * (float)((float)LODWORD(v55) - v39);
        float v91 = v73 + *(float *)&v90;
        float v92 = v74 + *(float *)&v90;
        float v93 = v75 + *(float *)&v90;
        LOBYTE(v90) = v34[1];
        *(float *)&unsigned int v94 = v41 * (float)((float)v90 - v39);
        float v95 = v77 + *(float *)&v94;
        float v96 = v78 + *(float *)&v94;
        float v97 = v71 + *(float *)&v94;
        LOBYTE(v94) = *v68;
        float v98 = v41 * (float)((float)v94 - v39);
        float v99 = v82 + v98;
        float v100 = v83 + v98;
        float v101 = v84 + v98;
        LOBYTE(v84) = v68[1];
        float v102 = v41 * (float)((float)LODWORD(v84) - v39);
        float v103 = v88 + v102;
        float v104 = v89 + v102;
        float v105 = v79 + v102;
        float v2 = (float)((float)((float)(v53 * v92) + (float)(v52 * v91)) + (float)(v54 * v93)) + v47;
        float v106 = (float)((float)((float)(v53 * v96) + (float)(v52 * v95)) + (float)(v54 * v97)) + v47;
        float v107 = (float)((float)((float)(v53 * v100) + (float)(v52 * v99)) + (float)(v54 * v101)) + v47;
        float v108 = (float)((float)((float)(v53 * v104) + (float)(v52 * v103)) + (float)(v54 * v105)) + v47;
        if (v2 < v47) {
          float v109 = v47;
        }
        else {
          float v109 = (float)((float)((float)(v53 * v92) + (float)(v52 * v91)) + (float)(v54 * v93)) + v47;
        }
        if (v2 > v49) {
          float v109 = v49;
        }
        *(_WORD *)float16x8_t v61 = llroundf(v109) << v63;
        if (v106 < v47) {
          float v110 = v47;
        }
        else {
          float v110 = (float)((float)((float)(v53 * v96) + (float)(v52 * v95)) + (float)(v54 * v97)) + v47;
        }
        if (v106 <= v49) {
          float v111 = v110;
        }
        else {
          float v111 = v49;
        }
        *((_WORD *)v61 + 1) = llroundf(v111) << v63;
        if (v107 < v47) {
          float v112 = v47;
        }
        else {
          float v112 = (float)((float)((float)(v53 * v100) + (float)(v52 * v99)) + (float)(v54 * v101)) + v47;
        }
        if (v107 > v49) {
          float v112 = v49;
        }
        *(_WORD *)int16x8_t v70 = llroundf(v112) << v63;
        if (v108 < v47) {
          float v113 = v47;
        }
        else {
          float v113 = (float)((float)((float)(v53 * v104) + (float)(v52 * v103)) + (float)(v54 * v105)) + v47;
        }
        if (v108 > v49) {
          float v113 = v49;
        }
        *((_WORD *)v70 + 1) = llroundf(v113) << v63;
        float v114 = (float)((float)(v91 + v95) + v99) + v103;
        float v115 = (float)((float)(v92 + v96) + v100) + v104;
        float v116 = (float)((float)(v93 + v97) + v101) + v105;
        float v117 = (float)((float)(v48 + (float)(v114 * v130)) + (float)(v115 * v129)) + (float)(v116 * v128);
        float v7 = v51;
        if (v117 <= v51)
        {
          float v7 = (float)((float)(v48 + (float)(v114 * v130)) + (float)(v115 * v129)) + (float)(v116 * v128);
          if (v117 < v50) {
            float v7 = v50;
          }
        }
        float16x8_t v118 = (_WORD *)result + v67;
        float v55 = v125;
        float v119 = (float)((float)(v48 + (float)(v114 * v127)) + (float)(v115 * v126)) + (float)(v116 * v125);
        *float16x8_t v118 = llroundf(v7) << v63;
        float v56 = v51;
        if (v119 <= v51)
        {
          float v56 = v119;
          if (v119 < v50) {
            float v56 = v50;
          }
        }
        v34 += 2;
        v68 += 2;
        v61 += 4;
        v70 += 4;
        v118[1] = llroundf(v56) << v63;
        v67 += 2;
      }
      while (v13 > v67);
    }
    uint64_t v34 = &v66[v24];
    char v57 = &v65[v25];
    float16x8_t v61 = &v64[v30];
    uint64_t result = (void *)((char *)result + v31);
    v12 += 2;
  }
  while (v16 > v12);
  if (v28 && v33)
  {
    uint64_t v120 = 0;
    do
    {
      if (v13)
      {
        unint64_t v121 = v13;
        unint64_t v122 = v35;
        float v123 = v29;
        do
        {
          __int16 v124 = *v123++;
          *v122++ = v124 | (v124 << 8);
          --v121;
        }
        while (v121);
      }
      v29 += v26;
      v35 += v32;
      ++v120;
    }
    while (v120 != v16);
  }
  else if (v33)
  {
    do
    {
      if (v13) {
        uint64_t result = memset(v35, 255, 2 * v13);
      }
      v35 += v32;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD(unint64_t result, uint64_t a2, double a3, int16x4_t a4, double a5, double a6, float32x4_t a7, double a8, double a9, double a10)
{
  uint64_t v13 = *(void *)(result + 28);
  unint64_t v14 = *(unsigned __int8 *)result;
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (v16 != v15)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(result + 36);
    unint64_t v19 = v15 + *(void *)(result + 44);
    unint64_t v20 = v16 - v15;
    uint64_t v21 = *(void *)(result + 112);
    uint64_t v22 = *(void *)(result + 152);
    uint64_t v23 = *(uint64_t **)(result + 56);
    uint64_t v24 = *(uint64_t **)(result + 64);
    uint64_t v25 = *(uint64_t **)(result + 128);
    uint64_t v26 = *(uint64_t **)(result + 136);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    unsigned int v29 = *(unsigned __int16 *)(v22 + 140);
    unsigned int v30 = *(unsigned __int16 *)(v22 + 142);
    unint64_t v31 = *(void *)(result + 104) * a2 / v14 + *(void *)(result + 120);
    uint64_t v221 = v24[2];
    uint64_t v222 = v26[2];
    uint64_t v223 = v25[2];
    uint64_t v224 = v23[2];
    uint64_t v32 = (char *)(v224 + v221 * v19 + v18);
    uint64_t v33 = (char *)(v223 + v222 * v31 + v21);
    LODWORD(a10) = *(_DWORD *)(v22 + 28);
    unsigned int v34 = *(unsigned __int16 *)(v22 + 144);
    unsigned int v35 = *(unsigned __int16 *)(v22 + 146);
    unsigned int v36 = *(unsigned __int16 *)(v22 + 148);
    float v37 = (float)v29;
    *(short float *)v11.i16 = (short float)v29;
    unsigned int v38 = *(unsigned __int16 *)(v22 + 150);
    v39.i32[0] = *(_DWORD *)(v22 + 48);
    float v270 = *(float *)(v22 + 44);
    v41.i32[0] = *(_DWORD *)(v22 + 52);
    v40.i32[0] = *(_DWORD *)(v22 + 56);
    float v42 = (float)v30;
    short float v43 = (short float)v30;
    v39.i32[1] = *(_DWORD *)(v22 + 60);
    v41.i32[1] = *(_DWORD *)(v22 + 64);
    v40.i32[1] = *(_DWORD *)(v22 + 68);
    unsigned int v44 = *(unsigned __int16 *)(v22 + 152);
    float v45 = (float)v34;
    *(short float *)a4.i16 = (short float)v34;
    uint64_t v46 = v22 + 16548;
    float v47 = (float)v35;
    *(short float *)v12.i16 = (short float)v35;
    *(float *)&a9 = 8191.0 / (float)*(unsigned int *)(v22 + 128);
    _S14 = *(float *)&a9 * *(float *)v22;
    _S13 = *(float *)&a9 * *(float *)(v22 + 8);
    _S15 = *(float *)&a9 * *(float *)(v22 + 16);
    _S19 = *(float *)&a9 * *(float *)(v22 + 20);
    float v52 = (float)v36;
    _S23 = *(float *)&a9 * *(float *)&a10;
    *(float *)&a9 = (float)v38;
    float v275 = (float)v38;
    float v54 = (float)v44;
    *(short float *)&a9 = (short float)v36;
    uint64_t v55 = v22 + 164;
    *(short float *)&a10 = (short float)v38;
    uint64_t v56 = v22 + 32932;
    int16x8_t v57 = vdupq_lane_s16(v11, 0);
    float16x8_t v269 = (float16x8_t)v57;
    *(short float *)v57.i16 = -v43;
    float32x4_t v58 = (float32x4_t)vdupq_lane_s16(*(int16x4_t *)v57.i8, 0);
    float16x8_t v229 = (float16x8_t)v58;
    *(float32x2_t *)v10.f32 = vmul_f32(v39, (float32x2_t)0x3F0000003F000000);
    float16x8_t v268 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    *(float32x2_t *)a7.f32 = vmul_f32(v41, (float32x2_t)0x3F0000003F000000);
    float16x8_t v266 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a7), 0);
    *(float32x2_t *)v58.f32 = vmul_f32(v40, (float32x2_t)0x3F0000003F000000);
    float16x8_t v263 = (float16x8_t)vdupq_lane_s16(a4, 0);
    float16x8_t v264 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v58), 0);
    int16x8_t v60 = vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    float16x8_t v261 = (float16x8_t)v60;
    float16x8_t v262 = (float16x8_t)vdupq_lane_s16(v12, 0);
    int16x8_t v59 = vdupq_lane_s16(*(int16x4_t *)&a10, 0);
    *(short float *)v60.i16 = (short float)v44;
    uint64_t v62 = *v25;
    uint64_t v61 = v25[1];
    char v63 = (unsigned char *)(v61 + v28 * v31 + v21);
    if (!v61) {
      char v63 = 0;
    }
    uint64_t v64 = (int8x8_t *)(v62 + v27 * v31 + v21);
    uint64_t v66 = *v23;
    uint64_t v65 = v23[1];
    float16x8_t v259 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    float16x8_t v260 = (float16x8_t)v59;
    uint64_t v67 = *v24;
    uint64_t v68 = v24[1];
    uint64_t v69 = v65 + v68 * v19 + v18;
    if (!v65) {
      uint64_t v69 = 0;
    }
    int16x8_t v70 = (int8x8_t *)(v66 + v67 * v19 + v18);
    size_t v71 = *(void *)(result + 20);
    uint64_t result = (v71 - 7);
    _S6 = *(float *)(v22 + 72);
    _S28 = *(float *)(v22 + 108);
    _S8 = *(float *)(v22 + 112);
    __asm { FCVT            H10, S14 }
    float v271 = _S23;
    __asm { FCVT            H11, S23 }
    short float v228 = _H11;
    float v273 = _S15;
    __asm { FCVT            H11, S15 }
    short float v227 = _H11;
    float v272 = _S19;
    __asm { FCVT            H11, S19 }
    short float v226 = _H11;
    float v274 = _S13;
    __asm { FCVT            H11, S13 }
    short float v225 = _H11;
    float v258 = *(float *)(v22 + 36);
    __asm { FCVT            H1, S1 }
    short float v247 = _H1;
    float v257 = *(float *)(v22 + 40);
    __asm { FCVT            H1, S5 }
    short float v246 = _H1;
    _S1 = *(_DWORD *)(v22 + 44);
    __asm { FCVT            H1, S1 }
    short float v245 = *(short float *)&_S1;
    __asm { FCVT            H1, S28 }
    short float v244 = *(short float *)&_S1;
    __asm { FCVT            H1, S8 }
    short float v243 = *(short float *)&_S1;
    float v277 = *(float *)(v22 + 116);
    __asm { FCVT            H1, S31 }
    short float v242 = *(short float *)&_S1;
    float v276 = *(float *)(v22 + 120);
    __asm { FCVT            H1, S9 }
    short float v241 = *(short float *)&_S1;
    float v256 = _S6;
    __asm { FCVT            H1, S6 }
    short float v240 = *(short float *)&_S1;
    float v255 = *(float *)(v22 + 76);
    __asm { FCVT            H1, S7 }
    short float v239 = *(short float *)&_S1;
    float v254 = *(float *)(v22 + 80);
    __asm { FCVT            H1, S17 }
    short float v238 = *(short float *)&_S1;
    float v253 = *(float *)(v22 + 84);
    __asm { FCVT            H1, S22 }
    short float v237 = *(short float *)&_S1;
    float v252 = *(float *)(v22 + 88);
    __asm { FCVT            H1, S25 }
    short float v236 = *(short float *)&_S1;
    float v251 = *(float *)(v22 + 92);
    __asm { FCVT            H1, S24 }
    short float v235 = *(short float *)&_S1;
    float v250 = *(float *)(v22 + 96);
    __asm { FCVT            H1, S27 }
    short float v234 = *(short float *)&_S1;
    float v249 = *(float *)(v22 + 100);
    __asm { FCVT            H1, S26 }
    short float v233 = *(short float *)&_S1;
    float v248 = *(float *)(v22 + 104);
    __asm { FCVT            H1, S29 }
    short float v232 = *(short float *)&_S1;
    uint64_t v87 = v10.i64[0];
    float v267 = a7.f32[0];
    v88.i32[0] = v58.i32[1];
    float v230 = v58.f32[1];
    float v265 = v58.f32[0];
    float v231 = a7.f32[1];
    v89.i64[0] = 0x9000900090009000;
    v89.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v71 < 8)
      {
        size_t v146 = 0;
        unsigned int v145 = v63;
        float v93 = v64;
        uint64_t v92 = v69;
        float v91 = v70;
      }
      else
      {
        uint64_t v90 = 0;
        float v91 = v70;
        uint64_t v92 = v69;
        float v93 = v64;
        do
        {
          if (v92)
          {
            float16x8_t v278 = (float16x8_t)vld2_s8((const char *)v92);
            v92 += 16;
            *(int8x8_t *)v94.i8 = vzip1_s8(*(int8x8_t *)v278.i8, 0);
            v94.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v278.i8, 0);
            *(int8x8_t *)v95.i8 = vzip1_s8((int8x8_t)v278.u64[1], 0);
            v95.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v278.u64[1], 0);
            float16x8_t v278 = vcvtq_f16_u16(v95);
            float16x8_t v96 = vaddq_f16(v229, vcvtq_f16_u16(v94));
            float16x8_t v278 = vaddq_f16(v229, v278);
            float16x8_t v97 = vmulq_n_f16(v278, v225);
            float16x8_t v98 = vmlaq_n_f16(vmulq_n_f16(v96, v227), v278, v226);
            float16x8_t v99 = vmulq_n_f16(v96, v228);
          }
          else
          {
            float16x8_t v99 = 0uLL;
            float16x8_t v98 = 0uLL;
            float16x8_t v97 = 0uLL;
          }
          int8x8_t v100 = *v91++;
          *(int8x8_t *)v101.i8 = vzip1_s8(v100, 0);
          v101.u64[1] = (unint64_t)vzip2_s8(v100, 0);
          float16x8_t v102 = vsubq_f16(vcvtq_f16_u16(v101), v269);
          float16x8_t v103 = vmlaq_n_f16(v98, v102, _H10);
          float16x8_t v104 = vmlaq_n_f16(v99, v102, _H10);
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v97, v102, _H10), (float16x8_t)0), v89));
          uint32x4_t v106 = vmovl_high_u16(v105);
          uint32x4_t v107 = vmovl_u16(*(uint16x4_t *)v105.i8);
          v108.i16[0] = *(_WORD *)(v55 + 2 * v107.u32[0]);
          v108.i16[1] = *(_WORD *)(v55 + 2 * v107.u32[1]);
          v108.i16[2] = *(_WORD *)(v55 + 2 * v107.u32[2]);
          v108.i16[3] = *(_WORD *)(v55 + 2 * v107.u32[3]);
          v108.i16[4] = *(_WORD *)(v55 + 2 * v106.u32[0]);
          v108.i16[5] = *(_WORD *)(v55 + 2 * v106.u32[1]);
          v108.i16[6] = *(_WORD *)(v55 + 2 * v106.u32[2]);
          v108.i16[7] = *(_WORD *)(v55 + 2 * v106.u32[3]);
          uint16x8_t v109 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v103, (float16x8_t)0), v89));
          uint32x4_t v110 = vmovl_high_u16(v109);
          uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v109.i8);
          v103.i16[0] = *(_WORD *)(v55 + 2 * v111.u32[0]);
          v103.i16[1] = *(_WORD *)(v55 + 2 * v111.u32[1]);
          v103.i16[2] = *(_WORD *)(v55 + 2 * v111.u32[2]);
          v103.i16[3] = *(_WORD *)(v55 + 2 * v111.u32[3]);
          v103.i16[4] = *(_WORD *)(v55 + 2 * v110.u32[0]);
          v103.i16[5] = *(_WORD *)(v55 + 2 * v110.u32[1]);
          v103.i16[6] = *(_WORD *)(v55 + 2 * v110.u32[2]);
          v103.i16[7] = *(_WORD *)(v55 + 2 * v110.u32[3]);
          uint16x8_t v112 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v104, (float16x8_t)0), v89));
          uint32x4_t v113 = vmovl_high_u16(v112);
          uint32x4_t v114 = vmovl_u16(*(uint16x4_t *)v112.i8);
          v104.i16[0] = *(_WORD *)(v55 + 2 * v114.u32[0]);
          v104.i16[1] = *(_WORD *)(v55 + 2 * v114.u32[1]);
          v104.i16[2] = *(_WORD *)(v55 + 2 * v114.u32[2]);
          v104.i16[3] = *(_WORD *)(v55 + 2 * v114.u32[3]);
          v104.i16[4] = *(_WORD *)(v55 + 2 * v113.u32[0]);
          v104.i16[5] = *(_WORD *)(v55 + 2 * v113.u32[1]);
          v104.i16[6] = *(_WORD *)(v55 + 2 * v113.u32[2]);
          v104.i16[7] = *(_WORD *)(v55 + 2 * v113.u32[3]);
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v108, v244), v103, v243), v104, v242), vmaxq_f16(vmaxq_f16(v108, v103), v104), v241), (float16x8_t)0), v89));
          uint32x4_t v116 = vmovl_high_u16(v115);
          float16x8_t v117 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v115.i8);
          v117.i16[0] = *(_WORD *)(v46 + 2 * v117.u32[0]);
          v117.i16[1] = *(_WORD *)(v46 + 2 * v117.u32[1]);
          v117.i16[2] = *(_WORD *)(v46 + 2 * v117.u32[2]);
          v117.i16[3] = *(_WORD *)(v46 + 2 * v117.u32[3]);
          v117.i16[4] = *(_WORD *)(v46 + 2 * v116.u32[0]);
          v117.i16[5] = *(_WORD *)(v46 + 2 * v116.u32[1]);
          v117.i16[6] = *(_WORD *)(v46 + 2 * v116.u32[2]);
          v117.i16[7] = *(_WORD *)(v46 + 2 * v116.u32[3]);
          float16x8_t v118 = vmulq_f16(v108, v117);
          float16x8_t v119 = vmulq_f16(v103, v117);
          float16x8_t v120 = vmulq_f16(v104, v117);
          float16x8_t v121 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v118, v237), v119, v236), v120, v235);
          float16x8_t v122 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v120, v232), v119, v233), v118, v234);
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v118, v240), v119, v239), v120, v238), (float16x8_t)0), v89));
          uint32x4_t v124 = vmovl_high_u16(v123);
          uint32x4_t v125 = vmovl_u16(*(uint16x4_t *)v123.i8);
          v108.i16[0] = *(_WORD *)(v56 + 2 * v125.u32[0]);
          v108.i16[1] = *(_WORD *)(v56 + 2 * v125.u32[1]);
          v108.i16[2] = *(_WORD *)(v56 + 2 * v125.u32[2]);
          v108.i16[3] = *(_WORD *)(v56 + 2 * v125.u32[3]);
          v108.i16[4] = *(_WORD *)(v56 + 2 * v124.u32[0]);
          v108.i16[5] = *(_WORD *)(v56 + 2 * v124.u32[1]);
          v108.i16[6] = *(_WORD *)(v56 + 2 * v124.u32[2]);
          float16x8_t v126 = v108;
          v126.i16[7] = *(_WORD *)(v56 + 2 * v124.u32[3]);
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v89));
          uint32x4_t v128 = vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v121.i16[0] = *(_WORD *)(v56 + 2 * v129.u32[0]);
          uint64_t v130 = v128.u32[3];
          v121.i16[1] = *(_WORD *)(v56 + 2 * v129.u32[1]);
          v121.i16[2] = *(_WORD *)(v56 + 2 * v129.u32[2]);
          v121.i16[3] = *(_WORD *)(v56 + 2 * v129.u32[3]);
          v121.i16[4] = *(_WORD *)(v56 + 2 * v128.u32[0]);
          v121.i16[5] = *(_WORD *)(v56 + 2 * v128.u32[1]);
          v121.i16[6] = *(_WORD *)(v56 + 2 * v128.u32[2]);
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v89));
          uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v131.i8);
          uint64_t v133 = v132.u32[1];
          uint64_t v134 = v132.u32[0];
          float16x8_t v135 = v121;
          v135.i16[7] = *(_WORD *)(v56 + 2 * v130);
          int16x8_t v136 = (int16x8_t)vmovl_high_u16(v131);
          uint64_t v137 = v132.u32[3];
          uint64_t v138 = v132.u32[2];
          *(void *)&long long v139 = v136.u32[2];
          *((void *)&v139 + 1) = v136.u32[3];
          long long v140 = v139;
          *(void *)&long long v139 = v136.u32[0];
          v136.i16[7] = (unint64_t)v136.u32[1] >> 48;
          v136.i16[0] = *(_WORD *)(v56 + 2 * v134);
          unsigned int v141 = (__int16 *)(v56 + 2 * v136.u32[1]);
          v136.i16[1] = *(_WORD *)(v56 + 2 * v133);
          v136.i16[2] = *(_WORD *)(v56 + 2 * v138);
          v136.i16[3] = *(_WORD *)(v56 + 2 * v137);
          v136.i16[4] = *(_WORD *)(v56 + 2 * v139);
          v136.i16[5] = *v141;
          v136.i16[6] = *(_WORD *)(v56 + 2 * v140);
          float v142 = (unsigned __int16 *)(v56 + 2 * *((void *)&v140 + 1));
          a7 = (float32x4_t)v136;
          a7.i16[7] = *v142;
          *v93++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v263, v126, v247), v135, v246), (float16x8_t)a7, v245), v263), v261)));
          int16x8_t v143 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v108, (int16x8_t)v121), (float16x8_t)vuzp2q_s16((int16x8_t)v126, (int16x8_t)v135));
          _S6 = *(float *)v266.i32;
          float16x8_t v144 = vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v262, v268, (float16x8_t)vzip1q_s16(v143, v143)), v266, (float16x8_t)vzip2q_s16(v143, v143)), v264, vaddq_f16((float16x8_t)vtrn1q_s16(v136, v136), (float16x8_t)vtrn2q_s16((int16x8_t)a7, (int16x8_t)a7))), v260);
          a7.i32[0] = v259.i32[0];
          int8x8_t v88 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(v144, v259)));
          *(int8x8_t *)&v63[v90] = v88;
          v90 += 8;
        }
        while ((int)v90 < (int)result);
        unsigned int v145 = &v63[v90];
        size_t v146 = v71 & 0xFFFFFFF8;
      }
      for (; v71 > v146; float v93 = (int8x8_t *)((char *)v93 + 2))
      {
        if (v92)
        {
          v88.i8[0] = *(unsigned char *)v92;
          float v147 = (float)v88.u32[0] - v42;
          a7.i8[0] = *(unsigned char *)(v92 + 1);
          float v148 = (float)a7.u32[0] - v42;
          v92 += 2;
          float v149 = v274 * v148;
          a7.f32[0] = (float)(v272 * v148) + (float)(v147 * v273);
          _S6 = v271;
          *(float *)v88.i32 = v271 * v147;
        }
        else
        {
          v88.i32[0] = 0;
          a7.i32[0] = 0;
          float v149 = 0.0;
        }
        LOBYTE(_S6) = v91->i8[0];
        float v150 = _S14 * (float)((float)LODWORD(_S6) - v37);
        float v151 = v149 + v150;
        BOOL v152 = (float)(v149 + v150) <= 8191.0;
        float v153 = 8191.0;
        if (v152)
        {
          float v153 = v151;
          if (v151 < 0.0) {
            float v153 = 0.0;
          }
        }
        float v154 = a7.f32[0] + v150;
        float v155 = 8191.0;
        if (v154 <= 8191.0)
        {
          float v155 = v154;
          if (v154 < 0.0) {
            float v155 = 0.0;
          }
        }
        float v156 = *(float *)v88.i32 + v150;
        float v157 = 8191.0;
        if (v156 <= 8191.0)
        {
          float v157 = v156;
          if (v156 < 0.0) {
            float v157 = 0.0;
          }
        }
        if (v92)
        {
          LOBYTE(v156) = *(unsigned char *)v92;
          *(float *)&unsigned int v158 = (float)LODWORD(v156);
          float v159 = *(float *)&v158 - v42;
          LOBYTE(v158) = *(unsigned char *)(v92 + 1);
          float v160 = (float)v158 - v42;
          v92 += 2;
          float v161 = v274 * v160;
          float v162 = (float)(v272 * v160) + (float)(v159 * v273);
          float v151 = v271;
          float v163 = v271 * v159;
        }
        else
        {
          float v163 = 0.0;
          float v162 = 0.0;
          float v161 = 0.0;
        }
        LOBYTE(v151) = v91->i8[1];
        float v164 = v37;
        float v165 = _S14 * (float)((float)LODWORD(v151) - v37);
        float v166 = v161 + v165;
        BOOL v152 = (float)(v161 + v165) <= 8191.0;
        float v167 = 8191.0;
        if (v152)
        {
          float v167 = v166;
          if (v166 < 0.0) {
            float v167 = 0.0;
          }
        }
        float v168 = v162 + v165;
        BOOL v152 = (float)(v162 + v165) <= 8191.0;
        float v169 = 8191.0;
        if (v152)
        {
          float v169 = v168;
          if (v168 < 0.0) {
            float v169 = 0.0;
          }
        }
        float v170 = _S14;
        float v171 = v163 + v165;
        float v172 = 8191.0;
        if (v171 <= 8191.0)
        {
          float v172 = v171;
          if (v171 < 0.0) {
            float v172 = 0.0;
          }
        }
        float v173 = v47;
        _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H20 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        _H23 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
        __asm { FCVT            S23, H23 }
        _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
        _H6 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
        _H30 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0)));
        float v183 = (float)((float)((float)(_S8 * _S20) + (float)(_S28 * _S5)) + (float)(v277 * _S23))
             + (float)(v276 * fmaxf(_S5, fmaxf(_S20, _S23)));
        float v184 = 8191.0;
        if (v183 <= 8191.0)
        {
          float v184 = v183;
          if (v183 < 0.0) {
            float v184 = 0.0;
          }
        }
        __asm
        {
          FCVT            S1, H1
          FCVT            S4, H6
          FCVT            S6, H30
        }
        _H30 = *(_WORD *)(v46 + 2 * llroundf(v184));
        float v189 = (float)((float)((float)(_S8 * _S4) + (float)(_S28 * _S1)) + (float)(v277 * _S6))
             + (float)(v276 * fmaxf(_S1, fmaxf(_S4, _S6)));
        float v190 = 8191.0;
        if (v189 <= 8191.0)
        {
          float v190 = v189;
          if (v189 < 0.0) {
            float v190 = 0.0;
          }
        }
        __asm { FCVT            S30, H30 }
        float v192 = _S5 * _S30;
        float v193 = _S20 * _S30;
        float v194 = _S23 * _S30;
        LOWORD(_S30) = *(_WORD *)(v46 + 2 * llroundf(v190));
        __asm { FCVT            S30, H30 }
        float v196 = _S1 * _S30;
        _S4 = _S4 * _S30;
        _S6 = _S6 * _S30;
        float v199 = (float)((float)(v255 * v193) + (float)(v192 * v256)) + (float)(v194 * v254);
        float v200 = (float)((float)(v252 * v193) + (float)(v192 * v253)) + (float)(v194 * v251);
        _S5 = (float)((float)(v249 * v193) + (float)(v192 * v250)) + (float)(v194 * v248);
        _S20 = (float)((float)(v255 * _S4) + (float)(v196 * v256)) + (float)(_S6 * v254);
        _S23 = (float)((float)(v252 * _S4) + (float)(v196 * v253)) + (float)(_S6 * v251);
        _S1 = (float)((float)(v249 * _S4) + (float)(v196 * v250)) + (float)(_S6 * v248);
        LOWORD(_S4) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v199, 0.0), 8191.0)));
        LOWORD(_S6) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v200, 0.0), 8191.0)));
        __asm
        {
          FCVT            S4, H4
          FCVT            S6, H6
        }
        LOWORD(_S5) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        LOWORD(_S20) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        LOWORD(_S23) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
        __asm { FCVT            S23, H23 }
        LOWORD(_S1) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
        __asm { FCVT            S19, H1 }
        float v211 = (float)((float)((float)(v257 * _S6) + (float)(v258 * _S4)) + (float)(v270 * _S5)) + v45;
        float v212 = (float)((float)((float)(v257 * _S23) + (float)(v258 * _S20)) + (float)(v270 * _S19)) + v45;
        if (v211 < v45) {
          float v213 = v45;
        }
        else {
          float v213 = (float)((float)((float)(v257 * _S6) + (float)(v258 * _S4)) + (float)(v270 * _S5)) + v45;
        }
        if (v211 <= v52) {
          float v214 = v213;
        }
        else {
          float v214 = v52;
        }
        v93->i8[0] = llroundf(v214);
        if (v212 < v45) {
          float v215 = v45;
        }
        else {
          float v215 = (float)((float)((float)(v257 * _S23) + (float)(v258 * _S20)) + (float)(v270 * _S19)) + v45;
        }
        if (v212 > v52) {
          float v215 = v52;
        }
        v93->i8[1] = llroundf(v215);
        float v216 = _S4 + _S20;
        float v47 = v173;
        float v217 = v173 + (float)((float)(_S4 + _S20) * *(float *)&v87);
        float v218 = _S6 + _S23;
        float v219 = _S5 + _S19;
        float v220 = (float)(v217 + (float)((float)(_S6 + _S23) * v267)) + (float)(v219 * v265);
        _S6 = v54;
        if (v220 <= v54)
        {
          _S6 = v220;
          if (v220 < v275) {
            _S6 = v275;
          }
        }
        *(float *)v88.i32 = (float)((float)(v173 + (float)(v216 * *((float *)&v87 + 1))) + (float)(v218 * v231))
                          + (float)(v219 * v230);
        *unsigned int v145 = llroundf(_S6);
        a7.f32[0] = v54;
        float v37 = v164;
        _S14 = v170;
        if (*(float *)v88.i32 <= v54)
        {
          a7.i32[0] = v88.i32[0];
          if (*(float *)v88.i32 < v275) {
            a7.f32[0] = v275;
          }
        }
        v145[1] = llroundf(a7.f32[0]);
        v145 += 2;
        v146 += 2;
        float v91 = (int8x8_t *)((char *)v91 + 2);
      }
      int16x8_t v70 = (int8x8_t *)((char *)v70 + v67);
      v69 += v68;
      uint64_t v64 = (int8x8_t *)((char *)v64 + v27);
      v63 += v28;
      ++v17;
    }
    while (v17 != v20);
    if (v224 && v223)
    {
      do
      {
        uint64_t result = (unint64_t)memcpy(v33, v32, v71);
        v32 += v221;
        v33 += v222;
        --v20;
      }
      while (v20);
    }
    else if (v223)
    {
      do
      {
        if (v71) {
          uint64_t result = (unint64_t)memset(v33, 255, v71);
        }
        v33 += v222;
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (void *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = (char *)(v24 + v23 * v12 + v11);
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (char *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a4);
    float v33 = (float)LODWORD(a5);
    float v34 = v31 * *(float *)v17;
    float v165 = v31 * *(float *)(v17 + 16);
    float v166 = v31 * *(float *)(v17 + 8);
    float v35 = v31 * *(float *)(v17 + 20);
    *(float *)&unsigned int v36 = v31 * *(float *)(v17 + 28);
    float v163 = *(float *)&v36;
    float v164 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    *(float *)&unsigned int v40 = (float)v36;
    float v167 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v17 + 152);
    float v41 = (float)v40;
    float v161 = *(float *)(v17 + 36);
    float v162 = v38;
    float v42 = *(float *)(v17 + 44);
    float v43 = 0.5;
    float v159 = *(float *)(v17 + 48) * 0.5;
    float v160 = *(float *)(v17 + 40);
    float v157 = *(float *)(v17 + 56) * 0.5;
    float v158 = *(float *)(v17 + 52) * 0.5;
    float v155 = *(float *)(v17 + 64) * 0.5;
    float v156 = *(float *)(v17 + 60) * 0.5;
    float v44 = *(float *)(v17 + 72);
    float v45 = *(float *)(v17 + 68) * 0.5;
    float v154 = v45;
    float v47 = *(float *)(v17 + 76);
    float v46 = *(float *)(v17 + 80);
    float v48 = *(float *)(v17 + 84);
    float v49 = *(float *)(v17 + 88);
    float v50 = *(float *)(v17 + 92);
    float v51 = *(float *)(v17 + 96);
    float v52 = *(float *)(v17 + 100);
    float v53 = *(float *)(v17 + 104);
    uint64_t v54 = v17 + 164;
    uint64_t v55 = v17 + 16548;
    uint64_t v56 = v15[1];
    _ZF = v56 == 0;
    uint64_t v58 = v56 + v27 * v16;
    uint64_t v59 = *v15 + v26 * v16;
    uint64_t result = (void *)(v17 + 32932);
    uint64_t v60 = v58 + v14;
    if (_ZF) {
      uint64_t v60 = 0;
    }
    uint64_t v61 = (unsigned char *)(v59 + v14);
    uint64_t v63 = *v18;
    uint64_t v62 = v18[1];
    uint64_t v64 = (unsigned char *)(v62 + v22 * v12 + v11);
    if (!v62) {
      uint64_t v64 = 0;
    }
    uint64_t v65 = (unsigned char *)(v63 + v21 * v12 + v11);
    float v66 = *(float *)(v17 + 108);
    float v67 = *(float *)(v17 + 112);
    float v68 = *(float *)(v17 + 116);
    float v69 = *(float *)(v17 + 120);
    do
    {
      if (v10)
      {
        size_t v70 = 0;
        size_t v71 = v65;
        float v72 = v64;
        float v73 = v61;
        do
        {
          if (v72)
          {
            LOBYTE(v45) = *v72;
            *(float *)&unsigned int v74 = (float)LODWORD(v45);
            float v43 = *(float *)&v74 - v33;
            LOBYTE(v74) = v72[1];
            float v75 = (float)v74 - v33;
            v72 += 2;
            float v76 = v166 * v75;
            float v77 = (float)(v164 * v75) + (float)(v43 * v165);
            float v78 = v163 * v43;
          }
          else
          {
            float v78 = 0.0;
            float v77 = 0.0;
            float v76 = 0.0;
          }
          LOBYTE(v43) = *v71;
          float v79 = v34 * (float)((float)LODWORD(v43) - v32);
          float v80 = v76 + v79;
          BOOL v81 = (float)(v76 + v79) <= 8191.0;
          float v82 = 8191.0;
          if (v81)
          {
            float v82 = v80;
            if (v80 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v77 + v79;
          float v84 = 8191.0;
          if ((float)(v77 + v79) <= 8191.0)
          {
            float v84 = v77 + v79;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v78 + v79;
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          if (v72)
          {
            LOBYTE(v85) = *v72;
            float v85 = (float)LODWORD(v85) - v33;
            LOBYTE(v83) = v72[1];
            float v87 = (float)LODWORD(v83) - v33;
            v72 += 2;
            float v88 = v166 * v87;
            float v89 = (float)(v164 * v87) + (float)(v85 * v165);
            float v90 = v163 * v85;
          }
          else
          {
            float v90 = 0.0;
            float v89 = 0.0;
            float v88 = 0.0;
          }
          LOBYTE(v85) = v71[1];
          float v91 = v34 * (float)((float)LODWORD(v85) - v32);
          float v92 = v88 + v91;
          BOOL v81 = (float)(v88 + v91) <= 8191.0;
          float v93 = 8191.0;
          if (v81)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v89 + v91;
          BOOL v81 = (float)(v89 + v91) <= 8191.0;
          float v95 = 8191.0;
          if (v81)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          float v96 = v32;
          float v97 = v90 + v91;
          float v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          unsigned int v105 = llroundf(fminf(fmaxf(v86, 0.0), 8191.0));
          __asm { FCVT            S4, H1 }
          _H1 = *(_WORD *)(v54 + 2 * v105);
          __asm { FCVT            S30, H1 }
          _H1 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          float v112 = fmaxf(_S0, fmaxf(_S4, _S30));
          float v113 = (float)((float)((float)(v67 * _S4) + (float)(v66 * _S0)) + (float)(v68 * _S30)) + (float)(v69 * v112);
          float v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            float v114 = (float)((float)((float)(v67 * _S4) + (float)(v66 * _S0)) + (float)(v68 * _S30)) + (float)(v69 * v112);
            if (v113 < 0.0) {
              float v114 = 0.0;
            }
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S6, H6
            FCVT            S7, H7
          }
          _H19 = *(_WORD *)(v55 + 2 * llroundf(v114));
          float v119 = (float)((float)((float)(v67 * _S6) + (float)(v66 * _S1)) + (float)(v68 * _S7))
               + (float)(v69 * fmaxf(_S1, fmaxf(_S6, _S7)));
          float v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            float v120 = v119;
            if (v119 < 0.0) {
              float v120 = 0.0;
            }
          }
          __asm { FCVT            S3, H19 }
          float v122 = _S0 * _S3;
          float v123 = _S4 * _S3;
          float v124 = _S30 * _S3;
          _H17 = *(_WORD *)(v55 + 2 * llroundf(v120));
          __asm { FCVT            S17, H17 }
          float v127 = _S1 * _S17;
          _S6 = _S6 * _S17;
          _S7 = _S7 * _S17;
          float v130 = (float)((float)(v47 * v123) + (float)(v122 * v44)) + (float)(v124 * v46);
          float v131 = (float)((float)(v49 * v123) + (float)(v122 * v48)) + (float)(v124 * v50);
          _S0 = (float)((float)(v52 * v123) + (float)(v122 * v51)) + (float)(v124 * v53);
          float v133 = (float)((float)(v47 * _S6) + (float)(v127 * v44)) + (float)(_S7 * v46);
          _S4 = (float)((float)(v49 * _S6) + (float)(v127 * v48)) + (float)(_S7 * v50);
          _S1 = (float)((float)(v52 * _S6) + (float)(v127 * v51)) + (float)(_S7 * v53);
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S7, H7
          }
          LOWORD(_S0) = *((_WORD *)result + llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          unsigned int v138 = llroundf(fminf(fmaxf(v133, 0.0), 8191.0));
          __asm { FCVT            S3, H0 }
          LOWORD(_S0) = *((_WORD *)result + v138);
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S17, H1 }
          float v143 = (float)((float)((float)(v160 * _S7) + (float)(v161 * _S6)) + (float)(v42 * _S3)) + v37;
          float v144 = (float)((float)((float)(v160 * _S4) + (float)(v161 * _S0)) + (float)(v42 * _S17)) + v37;
          if (v143 < v37) {
            float v145 = v37;
          }
          else {
            float v145 = (float)((float)((float)(v160 * _S7) + (float)(v161 * _S6)) + (float)(v42 * _S3)) + v37;
          }
          if (v143 <= v39) {
            float v146 = v145;
          }
          else {
            float v146 = v39;
          }
          *float v73 = llroundf(v146);
          if (v144 < v37) {
            float v147 = v37;
          }
          else {
            float v147 = (float)((float)((float)(v160 * _S4) + (float)(v161 * _S0)) + (float)(v42 * _S17)) + v37;
          }
          if (v144 > v39) {
            float v147 = v39;
          }
          v73[1] = llroundf(v147);
          float v148 = _S6 + _S0;
          float v149 = _S7 + _S4;
          float v150 = (float)(v162 + (float)(v148 * v159)) + (float)((float)(_S7 + _S4) * v158);
          float v151 = _S3 + _S17;
          float v152 = v150 + (float)((float)(_S3 + _S17) * v157);
          float v153 = v41;
          if (v152 <= v41)
          {
            float v153 = v152;
            if (v152 < v167) {
              float v153 = v167;
            }
          }
          float v45 = (float)((float)(v162 + (float)(v148 * v156)) + (float)(v149 * v155)) + (float)(v151 * v154);
          *(unsigned char *)(v60 + v70) = llroundf(v153);
          float v43 = v41;
          float v32 = v96;
          if (v45 <= v41)
          {
            float v43 = v45;
            if (v45 < v167) {
              float v43 = v167;
            }
          }
          *(unsigned char *)(v60 + v70 + 1) = llroundf(v43);
          v70 += 2;
          v71 += 2;
          v73 += 2;
        }
        while (v10 > v70);
      }
      v65 += v21;
      v64 += v22;
      v61 += v26;
      v60 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      do
      {
        uint64_t result = memcpy(v30, v25, v10);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v30, 255, v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_444vf_TRC_Mat_TRC_422vf_neon_fp16_GCD(unint64_t result, uint64_t a2, double a3, int16x4_t a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v12 = *(void *)(result + 28);
  unint64_t v13 = *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(result + 36);
    unint64_t v18 = v14 + *(void *)(result + 44);
    unint64_t v19 = v15 - v14;
    uint64_t v20 = *(void *)(result + 112);
    unint64_t v21 = *(void *)(result + 104) * a2;
    uint64_t v22 = *(void *)(result + 152);
    uint64_t v23 = *(uint64_t **)(result + 56);
    uint64_t v24 = *(uint64_t **)(result + 64);
    uint64_t v25 = *(uint64_t **)(result + 128);
    uint64_t v26 = *(uint64_t **)(result + 136);
    uint64_t v27 = v24[2];
    unint64_t v28 = v21 / v13 + *(void *)(result + 120);
    uint64_t v218 = v23[2];
    uint64_t v29 = (char *)(v218 + v27 * v18 + v17);
    uint64_t v30 = *v26;
    uint64_t v31 = v26[1];
    uint64_t v216 = v26[2];
    uint64_t v217 = v25[2];
    uint64_t v32 = (char *)(v217 + v216 * v28 + v20);
    unsigned int v33 = *(unsigned __int16 *)(v22 + 140);
    unsigned int v34 = *(unsigned __int16 *)(v22 + 142);
    unsigned int v35 = *(unsigned __int16 *)(v22 + 144);
    LODWORD(v26) = *(unsigned __int16 *)(v22 + 146);
    *(float *)&a3 = (float)v33;
    float v253 = (float)v33;
    *(short float *)v10.i16 = (short float)v33;
    unsigned int v36 = *(unsigned __int16 *)(v22 + 148);
    _S28 = *(float *)(v22 + 44);
    v37.i32[0] = *(_DWORD *)(v22 + 48);
    v40.i32[0] = *(_DWORD *)(v22 + 52);
    v39.i32[0] = *(_DWORD *)(v22 + 56);
    float v41 = (float)v34;
    short float v42 = (short float)v34;
    v37.i32[1] = *(_DWORD *)(v22 + 60);
    v40.i32[1] = *(_DWORD *)(v22 + 64);
    v39.i32[1] = *(_DWORD *)(v22 + 68);
    unsigned int v43 = *(unsigned __int16 *)(v22 + 150);
    float v44 = (float)v35;
    *(short float *)&a3 = (short float)v35;
    unsigned int v45 = *(unsigned __int16 *)(v22 + 152);
    float v46 = (float)v26;
    *(short float *)a4.i16 = (short float)v26;
    uint64_t v47 = v22 + 164;
    float v48 = (float)v36;
    *(short float *)v11.i16 = (short float)v36;
    float v49 = 8191.0 / (float)*(unsigned int *)(v22 + 128);
    _S7 = v49 * *(float *)v22;
    _S31 = v49 * *(float *)(v22 + 8);
    _S9 = v49 * *(float *)(v22 + 16);
    _S19 = v49 * *(float *)(v22 + 20);
    *(float *)&a9 = (float)v43;
    float v252 = (float)v43;
    _S20 = v49 * *(float *)(v22 + 28);
    float v55 = (float)v45;
    *(short float *)&a9 = (short float)v43;
    uint64_t v56 = v22 + 16548;
    int16x8_t v57 = vdupq_lane_s16(*(int16x4_t *)v10.f32, 0);
    float16x8_t v247 = (float16x8_t)v57;
    *(short float *)v57.i16 = -v42;
    float16x8_t v223 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v57.i8, 0);
    *(float32x2_t *)v10.f32 = vmul_f32(v37, (float32x2_t)0x3F0000003F000000);
    float16x8_t v245 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    *(float32x2_t *)v9.f32 = vmul_f32(v40, (float32x2_t)0x3F0000003F000000);
    float32x4_t v58 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    float16x8_t v244 = (float16x8_t)v58;
    *(float32x2_t *)v58.f32 = vmul_f32(v39, (float32x2_t)0x3F0000003F000000);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float16x8_t v241 = (float16x8_t)vdupq_lane_s16(a4, 0);
    float16x8_t v242 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v58), 0);
    int16x8_t v60 = vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    float16x8_t v239 = (float16x8_t)v60;
    float16x8_t v240 = (float16x8_t)vdupq_lane_s16(v11, 0);
    *(short float *)v60.i16 = (short float)v45;
    uint64_t v62 = *v25;
    uint64_t v61 = v25[1];
    uint64_t v63 = (unsigned char *)(v61 + v31 * v28 + v20);
    if (!v61) {
      uint64_t v63 = 0;
    }
    uint64_t v64 = (int8x8_t *)(v62 + v30 * v28 + v20);
    uint64_t v66 = *v23;
    uint64_t v65 = v23[1];
    _ZF = v65 == 0;
    uint64_t v68 = *v24;
    uint64_t v69 = v24[1];
    uint64_t v70 = v65 + v69 * v18 + v17;
    if (_ZF) {
      uint64_t v70 = 0;
    }
    size_t v71 = (int8x8_t *)(v66 + v68 * v18 + v17);
    size_t v72 = *(void *)(result + 20);
    uint64_t result = (v72 - 7);
    _S10 = *(float *)(v22 + 36);
    _S11 = *(float *)(v22 + 40);
    _S12 = *(float *)(v22 + 72);
    _S13 = *(float *)(v22 + 76);
    float16x8_t v238 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    _S15 = *(float *)(v22 + 80);
    _S22 = *(float *)(v22 + 84);
    _S25 = *(float *)(v22 + 88);
    _S24 = *(float *)(v22 + 92);
    _S27 = *(float *)(v22 + 96);
    _S26 = *(float *)(v22 + 100);
    _S29 = *(float *)(v22 + 104);
    __asm { FCVT            H8, S7 }
    float v248 = _S20;
    __asm { FCVT            H0, S20 }
    short float v222 = _H0;
    float v250 = _S9;
    __asm { FCVT            H0, S9 }
    short float v221 = _H0;
    float v249 = _S19;
    __asm { FCVT            H0, S19 }
    short float v220 = _H0;
    float v251 = _S31;
    __asm { FCVT            H0, S31 }
    short float v219 = _H0;
    __asm { FCVT            H0, S10 }
    short float v237 = _H0;
    __asm { FCVT            H0, S11 }
    short float v236 = _H0;
    __asm { FCVT            H0, S28 }
    short float v235 = _H0;
    __asm { FCVT            H0, S12 }
    short float v234 = _H0;
    __asm { FCVT            H0, S13 }
    short float v233 = _H0;
    __asm { FCVT            H0, S15 }
    short float v231 = _H0;
    __asm { FCVT            H0, S22 }
    short float v230 = _H0;
    __asm { FCVT            H0, S25 }
    short float v229 = _H0;
    __asm { FCVT            H0, S24 }
    short float v228 = _H0;
    __asm { FCVT            H0, S27 }
    short float v227 = _H0;
    __asm { FCVT            H0, S26 }
    short float v226 = _H0;
    __asm { FCVT            H0, S29 }
    short float v225 = _H0;
    float v246 = v10.f32[0];
    unsigned int v104 = v9.u32[1];
    v105.i32[0] = v58.i32[1];
    float v224 = v58.f32[1];
    float v243 = v58.f32[0];
    v106.i64[0] = 0x9000900090009000;
    v106.i64[1] = 0x9000900090009000;
    float v232 = v46;
    do
    {
      if ((int)v72 < 8)
      {
        size_t v157 = 0;
        float v156 = v63;
        uint32x4_t v110 = v64;
        uint64_t v109 = v70;
        float16x8_t v108 = v71;
      }
      else
      {
        uint64_t v107 = 0;
        float16x8_t v108 = v71;
        uint64_t v109 = v70;
        uint32x4_t v110 = v64;
        do
        {
          if (v109)
          {
            float16x8_t v254 = (float16x8_t)vld2_s8((const char *)v109);
            v109 += 16;
            *(int8x8_t *)v111.i8 = vzip1_s8(*(int8x8_t *)v254.i8, 0);
            v111.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v254.i8, 0);
            *(int8x8_t *)v112.i8 = vzip1_s8((int8x8_t)v254.u64[1], 0);
            v112.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v254.u64[1], 0);
            *(float16x8_t *)((char *)&v254 + 8) = vaddq_f16(v223, vcvtq_f16_u16(v111));
            float16x8_t v254 = vaddq_f16(v223, vcvtq_f16_u16(v112));
            float16x8_t v113 = vmulq_n_f16(v254, v219);
            float16x8_t v114 = vmlaq_n_f16(vmulq_n_f16(*(float16x8_t *)((char *)&v254 + 8), v221), v254, v220);
            float16x8_t v115 = vmulq_n_f16(*(float16x8_t *)((char *)&v254 + 8), v222);
          }
          else
          {
            float16x8_t v115 = 0uLL;
            float16x8_t v114 = 0uLL;
            float16x8_t v113 = 0uLL;
          }
          int8x8_t v116 = *v108++;
          *(int8x8_t *)v117.i8 = vzip1_s8(v116, 0);
          v117.u64[1] = (unint64_t)vzip2_s8(v116, 0);
          float16x8_t v118 = vsubq_f16(vcvtq_f16_u16(v117), v247);
          float16x8_t v119 = vmlaq_n_f16(v114, v118, _H8);
          float16x8_t v120 = vmlaq_n_f16(v115, v118, _H8);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v113, v118, _H8), (float16x8_t)0), v106));
          uint32x4_t v122 = vmovl_high_u16(v121);
          uint32x4_t v123 = vmovl_u16(*(uint16x4_t *)v121.i8);
          v124.i16[0] = *(_WORD *)(v47 + 2 * v123.u32[0]);
          v124.i16[1] = *(_WORD *)(v47 + 2 * v123.u32[1]);
          v124.i16[2] = *(_WORD *)(v47 + 2 * v123.u32[2]);
          v124.i16[3] = *(_WORD *)(v47 + 2 * v123.u32[3]);
          v124.i16[4] = *(_WORD *)(v47 + 2 * v122.u32[0]);
          v124.i16[5] = *(_WORD *)(v47 + 2 * v122.u32[1]);
          v124.i16[6] = *(_WORD *)(v47 + 2 * v122.u32[2]);
          v124.i16[7] = *(_WORD *)(v47 + 2 * v122.u32[3]);
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v106));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          v119.i16[0] = *(_WORD *)(v47 + 2 * v127.u32[0]);
          v119.i16[1] = *(_WORD *)(v47 + 2 * v127.u32[1]);
          v119.i16[2] = *(_WORD *)(v47 + 2 * v127.u32[2]);
          v119.i16[3] = *(_WORD *)(v47 + 2 * v127.u32[3]);
          v119.i16[4] = *(_WORD *)(v47 + 2 * v126.u32[0]);
          v119.i16[5] = *(_WORD *)(v47 + 2 * v126.u32[1]);
          v119.i16[6] = *(_WORD *)(v47 + 2 * v126.u32[2]);
          v119.i16[7] = *(_WORD *)(v47 + 2 * v126.u32[3]);
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v106));
          uint32x4_t v129 = vmovl_high_u16(v128);
          float16x8_t v130 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v128.i8);
          v130.i16[0] = *(_WORD *)(v47 + 2 * v130.u32[0]);
          v130.i16[1] = *(_WORD *)(v47 + 2 * v130.u32[1]);
          v130.i16[2] = *(_WORD *)(v47 + 2 * v130.u32[2]);
          v130.i16[3] = *(_WORD *)(v47 + 2 * v130.u32[3]);
          v130.i16[4] = *(_WORD *)(v47 + 2 * v129.u32[0]);
          v130.i16[5] = *(_WORD *)(v47 + 2 * v129.u32[1]);
          v130.i16[6] = *(_WORD *)(v47 + 2 * v129.u32[2]);
          v130.i16[7] = *(_WORD *)(v47 + 2 * v129.u32[3]);
          float16x8_t v131 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v230), v119, v229), v130, v228);
          float16x8_t v132 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, v225), v119, v226), v124, v227);
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v234), v119, v233), v130, v231), (float16x8_t)0), v106));
          uint32x4_t v134 = vmovl_high_u16(v133);
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v133.i8);
          v124.i16[0] = *(_WORD *)(v56 + 2 * v135.u32[0]);
          v124.i16[1] = *(_WORD *)(v56 + 2 * v135.u32[1]);
          v124.i16[2] = *(_WORD *)(v56 + 2 * v135.u32[2]);
          v124.i16[3] = *(_WORD *)(v56 + 2 * v135.u32[3]);
          v124.i16[4] = *(_WORD *)(v56 + 2 * v134.u32[0]);
          v124.i16[5] = *(_WORD *)(v56 + 2 * v134.u32[1]);
          v124.i16[6] = *(_WORD *)(v56 + 2 * v134.u32[2]);
          float16x8_t v136 = v124;
          v136.i16[7] = *(_WORD *)(v56 + 2 * v134.u32[3]);
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v106));
          uint32x4_t v138 = vmovl_high_u16(v137);
          uint32x4_t v139 = vmovl_u16(*(uint16x4_t *)v137.i8);
          v131.i16[7] = (unint64_t)v139.u32[1] >> 48;
          v131.i16[0] = *(_WORD *)(v56 + 2 * v139.u32[0]);
          uint64_t v140 = v138.u32[3];
          v131.i16[1] = *(_WORD *)(v56 + 2 * v139.u32[1]);
          v131.i16[2] = *(_WORD *)(v56 + 2 * v139.u32[2]);
          v131.i16[3] = *(_WORD *)(v56 + 2 * v139.u32[3]);
          v131.i16[4] = *(_WORD *)(v56 + 2 * v138.u32[0]);
          v131.i16[5] = *(_WORD *)(v56 + 2 * v138.u32[1]);
          v131.i16[6] = *(_WORD *)(v56 + 2 * v138.u32[2]);
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v106));
          uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v141.i8);
          uint64_t v143 = v142.u32[1];
          uint64_t v144 = v142.u32[0];
          float16x8_t v145 = v131;
          v145.i16[7] = *(_WORD *)(v56 + 2 * v140);
          int16x8_t v146 = (int16x8_t)vmovl_high_u16(v141);
          uint64_t v147 = v142.u32[3];
          uint64_t v148 = v142.u32[2];
          *(void *)&long long v149 = v146.u32[2];
          *((void *)&v149 + 1) = v146.u32[3];
          long long v150 = v149;
          *(void *)&long long v149 = v146.u32[0];
          v146.i16[7] = (unint64_t)v146.u32[1] >> 48;
          v146.i16[0] = *(_WORD *)(v56 + 2 * v144);
          float v151 = (__int16 *)(v56 + 2 * v146.u32[1]);
          v146.i16[1] = *(_WORD *)(v56 + 2 * v143);
          v146.i16[2] = *(_WORD *)(v56 + 2 * v148);
          v146.i16[3] = *(_WORD *)(v56 + 2 * v147);
          v146.i16[4] = *(_WORD *)(v56 + 2 * v149);
          v146.i16[5] = *v151;
          v146.i16[6] = *(_WORD *)(v56 + 2 * v150);
          float v152 = (__int16 *)(v56 + 2 * *((void *)&v150 + 1));
          float16x8_t v153 = (float16x8_t)v146;
          v153.i16[7] = *v152;
          *v110++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v136, v237), v145, v236), v153, v235), v59), v240)));
          int16x8_t v154 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v124, (int16x8_t)v131), (float16x8_t)vuzp2q_s16((int16x8_t)v136, (int16x8_t)v145));
          float16x8_t v155 = vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v241, v245, (float16x8_t)vzip1q_s16(v154, v154)), v244, (float16x8_t)vzip2q_s16(v154, v154)), v242, vaddq_f16((float16x8_t)vtrn1q_s16(v146, v146), (float16x8_t)vtrn2q_s16((int16x8_t)v153, (int16x8_t)v153))), v239);
          unsigned int v104 = v238.i32[0];
          int8x8_t v105 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(v155, v238)));
          *(int8x8_t *)&v63[v107] = v105;
          v107 += 8;
          float v46 = v232;
        }
        while ((int)v107 < (int)result);
        float v156 = &v63[v107];
        size_t v157 = v72 & 0xFFFFFFF8;
      }
      while (v72 > v157)
      {
        if (v109)
        {
          v105.i8[0] = *(unsigned char *)v109;
          *(float *)v105.i32 = (float)v105.u32[0] - v41;
          LOBYTE(v104) = *(unsigned char *)(v109 + 1);
          float v158 = (float)v104 - v41;
          v109 += 2;
          float v159 = v251 * v158;
          float v160 = (float)(v249 * v158) + (float)(*(float *)v105.i32 * v250);
          float v161 = v248 * *(float *)v105.i32;
        }
        else
        {
          float v161 = 0.0;
          float v160 = 0.0;
          float v159 = 0.0;
        }
        v105.i8[0] = v108->i8[0];
        *(float *)v105.i32 = _S7 * (float)((float)v105.u32[0] - v253);
        float v162 = 8191.0;
        if ((float)(v159 + *(float *)v105.i32) <= 8191.0)
        {
          float v162 = v159 + *(float *)v105.i32;
          if ((float)(v159 + *(float *)v105.i32) < 0.0) {
            float v162 = 0.0;
          }
        }
        float v163 = v160 + *(float *)v105.i32;
        BOOL v164 = (float)(v160 + *(float *)v105.i32) <= 8191.0;
        float v165 = 8191.0;
        if (v164)
        {
          float v165 = v163;
          if (v163 < 0.0) {
            float v165 = 0.0;
          }
        }
        float v166 = v161 + *(float *)v105.i32;
        float v167 = 8191.0;
        if (v166 <= 8191.0)
        {
          float v167 = v166;
          if (v166 < 0.0) {
            float v167 = 0.0;
          }
        }
        if (v109)
        {
          LOBYTE(v166) = *(unsigned char *)v109;
          float v166 = (float)LODWORD(v166) - v41;
          LOBYTE(v163) = *(unsigned char *)(v109 + 1);
          float v168 = (float)LODWORD(v163) - v41;
          v109 += 2;
          float v169 = v251 * v168;
          float v170 = (float)(v249 * v168) + (float)(v166 * v250);
          float v171 = v248 * v166;
        }
        else
        {
          float v171 = 0.0;
          float v170 = 0.0;
          float v169 = 0.0;
        }
        LOBYTE(v166) = v108->i8[1];
        float v172 = _S7 * (float)((float)LODWORD(v166) - v253);
        float v173 = 8191.0;
        if ((float)(v169 + v172) <= 8191.0)
        {
          float v173 = v169 + v172;
          if ((float)(v169 + v172) < 0.0) {
            float v173 = 0.0;
          }
        }
        float v174 = v170 + v172;
        BOOL v164 = (float)(v170 + v172) <= 8191.0;
        float v175 = 8191.0;
        if (v164)
        {
          float v175 = v174;
          if (v174 < 0.0) {
            float v175 = 0.0;
          }
        }
        float v176 = v171 + v172;
        float v177 = 8191.0;
        if (v176 <= 8191.0)
        {
          float v177 = v176;
          if (v176 < 0.0) {
            float v177 = 0.0;
          }
        }
        _H0 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
        _H6 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
        __asm
        {
          FCVT            S0, H0
          FCVT            S6, H6
        }
        _H17 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
        unsigned int v183 = llroundf(fminf(fmaxf(v173, 0.0), 8191.0));
        __asm { FCVT            S1, H17 }
        _H17 = *(_WORD *)(v47 + 2 * v183);
        __asm { FCVT            S17, H17 }
        _H19 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0)));
        __asm { FCVT            S19, H19 }
        _H20 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v177, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        float v191 = (float)((float)(_S13 * _S6) + (float)(_S0 * _S12)) + (float)(_S1 * _S15);
        float v192 = (float)((float)(_S25 * _S6) + (float)(_S0 * _S22)) + (float)(_S1 * _S24);
        _S0 = (float)((float)(_S26 * _S6) + (float)(_S0 * _S27)) + (float)(_S1 * _S29);
        float v194 = (float)((float)(_S13 * _S19) + (float)(_S17 * _S12)) + (float)(_S20 * _S15);
        _S6 = (float)((float)(_S25 * _S19) + (float)(_S17 * _S22)) + (float)(_S20 * _S24);
        float v196 = (float)((float)(_S26 * _S19) + (float)(_S17 * _S27)) + (float)(_S20 * _S29);
        LOWORD(_S19) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v191, 0.0), 8191.0)));
        LOWORD(_S20) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v192, 0.0), 8191.0)));
        __asm
        {
          FCVT            S19, H19
          FCVT            S20, H20
        }
        LOWORD(_S0) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        unsigned int v199 = llroundf(fminf(fmaxf(v194, 0.0), 8191.0));
        __asm { FCVT            S1, H0 }
        LOWORD(_S0) = *(_WORD *)(v56 + 2 * v199);
        __asm { FCVT            S0, H0 }
        LOWORD(_S6) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
        __asm { FCVT            S6, H6 }
        _H16 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v196, 0.0), 8191.0)));
        __asm { FCVT            S16, H16 }
        float v205 = (float)((float)((float)(_S11 * _S20) + (float)(_S10 * _S19)) + (float)(_S28 * _S1)) + v44;
        float v206 = (float)((float)((float)(_S11 * _S6) + (float)(_S10 * _S0)) + (float)(_S28 * _S16)) + v44;
        if (v205 < v44) {
          float v207 = (float)v35;
        }
        else {
          float v207 = (float)((float)((float)(_S11 * _S20) + (float)(_S10 * _S19)) + (float)(_S28 * _S1)) + v44;
        }
        if (v205 <= v48) {
          float v208 = v207;
        }
        else {
          float v208 = v48;
        }
        v110->i8[0] = llroundf(v208);
        if (v206 < v44) {
          float v209 = (float)v35;
        }
        else {
          float v209 = (float)((float)((float)(_S11 * _S6) + (float)(_S10 * _S0)) + (float)(_S28 * _S16)) + v44;
        }
        if (v206 > v48) {
          float v209 = v48;
        }
        v110->i8[1] = llroundf(v209);
        float v210 = _S19 + _S0;
        float v211 = _S20 + _S6;
        float v212 = _S1 + _S16;
        float v213 = (float)((float)(v46 + (float)(v210 * v246)) + (float)(v211 * v9.f32[0])) + (float)(v212 * v243);
        float v214 = v55;
        if (v213 <= v55)
        {
          float v214 = (float)((float)(v46 + (float)(v210 * v246)) + (float)(v211 * v9.f32[0])) + (float)(v212 * v243);
          if (v213 < v252) {
            float v214 = v252;
          }
        }
        unsigned int v104 = LODWORD(v224);
        *(float *)v105.i32 = (float)((float)(v46 + (float)(v210 * v10.f32[1])) + (float)(v211 * v9.f32[1]))
                           + (float)(v212 * v224);
        *float v156 = llroundf(v214);
        float v215 = v55;
        if (*(float *)v105.i32 <= v55)
        {
          unsigned int v104 = LODWORD(v252);
          float v215 = *(float *)v105.i32;
          if (*(float *)v105.i32 < v252) {
            float v215 = v252;
          }
        }
        v156[1] = llroundf(v215);
        v156 += 2;
        v157 += 2;
        float16x8_t v108 = (int8x8_t *)((char *)v108 + 2);
        uint32x4_t v110 = (int8x8_t *)((char *)v110 + 2);
      }
      size_t v71 = (int8x8_t *)((char *)v71 + v68);
      v70 += v69;
      uint64_t v64 = (int8x8_t *)((char *)v64 + v30);
      v63 += v31;
      ++v16;
    }
    while (v16 != v19);
    if (v218 && v217)
    {
      do
      {
        uint64_t result = (unint64_t)memcpy(v32, v29, v72);
        v29 += v27;
        v32 += v216;
        --v19;
      }
      while (v19);
    }
    else if (v217)
    {
      do
      {
        if (v72) {
          uint64_t result = (unint64_t)memset(v32, 255, v72);
        }
        v32 += v216;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_422vf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (uint64_t *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (void *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = (char *)(v24 + v23 * v12 + v11);
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (char *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    *(float *)&unsigned int v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a4);
    float v33 = (float)LODWORD(a5);
    float v34 = *(float *)&v31 * *(float *)v17;
    float v141 = *(float *)&v31 * *(float *)(v17 + 16);
    float v142 = *(float *)&v31 * *(float *)(v17 + 8);
    float v35 = *(float *)&v31 * *(float *)(v17 + 20);
    float v36 = *(float *)&v31 * *(float *)(v17 + 28);
    LOWORD(v31) = *(_WORD *)(v17 + 144);
    float v37 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 146);
    float v38 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 148);
    float v39 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 150);
    float v40 = (float)v31;
    LOWORD(v31) = *(_WORD *)(v17 + 152);
    float v41 = (float)v31;
    float v42 = *(float *)(v17 + 36);
    float v43 = *(float *)(v17 + 40);
    float v44 = *(float *)(v17 + 44);
    float v139 = *(float *)(v17 + 48) * 0.5;
    float v140 = v35;
    float v137 = *(float *)(v17 + 56) * 0.5;
    float v138 = *(float *)(v17 + 52) * 0.5;
    float v45 = *(float *)(v17 + 64);
    float v135 = v45 * 0.5;
    float v136 = *(float *)(v17 + 60) * 0.5;
    float v46 = *(float *)(v17 + 72);
    float v47 = *(float *)(v17 + 68) * 0.5;
    float v134 = v47;
    float v49 = *(float *)(v17 + 76);
    float v48 = *(float *)(v17 + 80);
    float v50 = *(float *)(v17 + 84);
    float v51 = *(float *)(v17 + 88);
    float v52 = *(float *)(v17 + 92);
    float v53 = *(float *)(v17 + 96);
    float v54 = *(float *)(v17 + 100);
    float v55 = *(float *)(v17 + 104);
    uint64_t v56 = v17 + 164;
    uint64_t v57 = v17 + 16548;
    uint64_t v59 = *v15;
    uint64_t v58 = *(void *)(result[16] + 8);
    _ZF = v58 == 0;
    uint64_t result = (void *)(v58 + v27 * v16 + v14);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v61 = (unsigned char *)(v59 + v26 * v16 + v14);
    uint64_t v64 = v18;
    uint64_t v63 = *v18;
    uint64_t v62 = v64[1];
    if (v62) {
      uint64_t v65 = (unsigned char *)(v62 + v22 * v12 + v11);
    }
    else {
      uint64_t v65 = 0;
    }
    uint64_t v66 = (unsigned char *)(v63 + v21 * v12 + v11);
    do
    {
      if (v10)
      {
        size_t v67 = 0;
        uint64_t v68 = v66;
        uint64_t v69 = v65;
        uint64_t v70 = v61;
        do
        {
          if (v69)
          {
            LOBYTE(v47) = *v69;
            *(float *)&unsigned int v71 = (float)LODWORD(v47);
            float v45 = *(float *)&v71 - v33;
            LOBYTE(v71) = v69[1];
            float v72 = (float)v71 - v33;
            v69 += 2;
            float v73 = v142 * v72;
            float v74 = (float)(v140 * v72) + (float)(v45 * v141);
            float v75 = v36 * v45;
          }
          else
          {
            float v75 = 0.0;
            float v74 = 0.0;
            float v73 = 0.0;
          }
          LOBYTE(v45) = *v68;
          float v76 = v34 * (float)((float)LODWORD(v45) - v32);
          float v77 = v73 + v76;
          BOOL v78 = (float)(v73 + v76) <= 8191.0;
          float v79 = 8191.0;
          if (v78)
          {
            float v79 = v77;
            if (v77 < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v74 + v76;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v75 + v76;
          float v83 = 8191.0;
          if ((float)(v75 + v76) <= 8191.0)
          {
            float v83 = v75 + v76;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          if (v69)
          {
            LOBYTE(v82) = *v69;
            *(float *)&unsigned int v84 = (float)LODWORD(v82);
            float v76 = *(float *)&v84 - v33;
            LOBYTE(v84) = v69[1];
            float v85 = (float)v84 - v33;
            v69 += 2;
            float v86 = v142 * v85;
            float v87 = (float)(v140 * v85) + (float)(v76 * v141);
            float v88 = v36 * v76;
          }
          else
          {
            float v88 = 0.0;
            float v87 = 0.0;
            float v86 = 0.0;
          }
          LOBYTE(v76) = v68[1];
          float v89 = v34 * (float)((float)LODWORD(v76) - v32);
          float v90 = 8191.0;
          if ((float)(v86 + v89) <= 8191.0)
          {
            float v90 = v86 + v89;
            if ((float)(v86 + v89) < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v87 + v89;
          BOOL v78 = (float)(v87 + v89) <= 8191.0;
          float v92 = 8191.0;
          if (v78)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v88 + v89;
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm
          {
            FCVT            S0, H0
            FCVT            S5, H5
          }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          unsigned int v103 = llroundf(fminf(fmaxf(v90, 0.0), 8191.0));
          __asm { FCVT            S6, H24 }
          _H24 = *(_WORD *)(v56 + 2 * v103);
          __asm { FCVT            S24, H24 }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H26 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          float v111 = (float)((float)(v49 * _S5) + (float)(_S0 * v46)) + (float)(_S6 * v48);
          float v112 = (float)((float)(v51 * _S5) + (float)(_S0 * v50)) + (float)(_S6 * v52);
          _S0 = (float)((float)(v54 * _S5) + (float)(_S0 * v53)) + (float)(_S6 * v55);
          float v114 = (float)((float)(v49 * _S4) + (float)(_S24 * v46)) + (float)(_S26 * v48);
          _S6 = (float)((float)(v51 * _S4) + (float)(_S24 * v50)) + (float)(_S26 * v52);
          _S4 = (float)((float)(v54 * _S4) + (float)(_S24 * v53)) + (float)(_S26 * v55);
          LOWORD(_S24) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S26, H26
          }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          unsigned int v119 = llroundf(fminf(fmaxf(v114, 0.0), 8191.0));
          __asm { FCVT            S5, H0 }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * v119);
          __asm { FCVT            S0, H0 }
          LOWORD(_S6) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S25, H4 }
          float v124 = (float)((float)((float)(v43 * _S26) + (float)(v42 * _S24)) + (float)(v44 * _S5)) + v37;
          float v125 = (float)((float)((float)(v43 * _S6) + (float)(v42 * _S0)) + (float)(v44 * _S25)) + v37;
          if (v124 < v37) {
            float v126 = v37;
          }
          else {
            float v126 = (float)((float)((float)(v43 * _S26) + (float)(v42 * _S24)) + (float)(v44 * _S5)) + v37;
          }
          if (v124 <= v39) {
            float v127 = v126;
          }
          else {
            float v127 = v39;
          }
          *uint64_t v70 = llroundf(v127);
          if (v125 < v37) {
            float v128 = v37;
          }
          else {
            float v128 = (float)((float)((float)(v43 * _S6) + (float)(v42 * _S0)) + (float)(v44 * _S25)) + v37;
          }
          if (v125 > v39) {
            float v128 = v39;
          }
          v70[1] = llroundf(v128);
          float v129 = _S24 + _S0;
          float v130 = _S26 + _S6;
          float v45 = _S5 + _S25;
          float v131 = (float)((float)(v38 + (float)(v129 * v139)) + (float)((float)(_S26 + _S6) * v138))
               + (float)(v45 * v137);
          float v132 = v41;
          if (v131 <= v41)
          {
            float v132 = v131;
            if (v131 < v40) {
              float v132 = v40;
            }
          }
          float v47 = (float)((float)(v38 + (float)(v129 * v136)) + (float)(v130 * v135)) + (float)(v45 * v134);
          *((unsigned char *)result + v67) = llroundf(v132);
          float v133 = v41;
          if (v47 <= v41)
          {
            float v133 = v47;
            if (v47 < v40) {
              float v133 = v40;
            }
          }
          *((unsigned char *)result + v67 + 1) = llroundf(v133);
          v67 += 2;
          v68 += 2;
          v70 += 2;
        }
        while (v10 > v67);
      }
      v66 += v21;
      v65 += v22;
      v61 += v26;
      uint64_t result = (void *)((char *)result + v27);
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      do
      {
        uint64_t result = memcpy(v30, v25, v10);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v30, 255, v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_422vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_rgb_422vf_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t _Q6)
{
  uint64_t v14 = *(void *)((char *)result + 28);
  unint64_t v15 = *(unsigned __int8 *)result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (v17 == v16) {
    return result;
  }
  uint64_t v18 = 0;
  size_t v19 = *(void *)((char *)result + 20);
  uint64_t v20 = *(void *)((char *)result + 36);
  unint64_t v21 = v16 + *(void *)((char *)result + 44);
  unint64_t v22 = v17 - v16;
  uint64_t v23 = result[14];
  uint64_t v24 = (uint64_t *)result[16];
  unint64_t v25 = result[13] * a2 / v15 + result[15];
  uint64_t v26 = result[19];
  uint64_t v28 = (uint64_t *)result[7];
  uint64_t v27 = (uint64_t *)result[8];
  uint64_t v29 = (uint64_t *)result[17];
  uint64_t v30 = *v27;
  uint64_t v31 = v27[1];
  uint64_t v32 = v27[2];
  uint64_t v33 = v28[2];
  uint64_t v34 = (char *)(v33 + v32 * v21 + v20);
  uint64_t v35 = *v29;
  uint64_t v36 = v29[1];
  uint64_t v37 = v29[2];
  uint64_t v38 = v24[2];
  uint64_t v39 = (char *)(v38 + v37 * v25 + v23);
  unsigned int v40 = *(unsigned __int16 *)(v26 + 140);
  unsigned int v41 = *(unsigned __int16 *)(v26 + 142);
  unsigned int v42 = *(unsigned __int16 *)(v26 + 144);
  unsigned int v43 = *(unsigned __int16 *)(v26 + 146);
  unsigned int v44 = *(unsigned __int16 *)(v26 + 148);
  unsigned int v45 = *(unsigned __int16 *)(v26 + 150);
  unsigned int v46 = *(unsigned __int16 *)(v26 + 152);
  _S0 = *(float *)(v26 + 36);
  _S1 = *(float *)(v26 + 40);
  _S2 = *(float *)(v26 + 44);
  v50.i32[0] = *(_DWORD *)(v26 + 48);
  v11.i32[0] = *(_DWORD *)(v26 + 52);
  v51.i32[0] = *(_DWORD *)(v26 + 56);
  float v52 = (float)*(unsigned int *)(v26 + 136) / (float)*(unsigned int *)(v26 + 128);
  float v53 = (float)v40;
  float v54 = (float)v41;
  _S5 = v52 * *(float *)v26;
  _Q6.f32[0] = v52 * *(float *)(v26 + 8);
  _S7 = v52 * *(float *)(v26 + 16);
  _S25 = v52 * *(float *)(v26 + 20);
  float v58 = (float)v42;
  float v59 = (float)v43;
  _S16 = v52 * *(float *)(v26 + 28);
  float v61 = (float)v44;
  *(short float *)v10.i16 = (short float)v40;
  float16x8_t v148 = (float16x8_t)vdupq_lane_s16(v10, 0);
  __asm { FCVT            H8, S5 }
  *(short float *)v10.i16 = -(short float)v41;
  int16x8_t v67 = vdupq_lane_s16(v10, 0);
  float v68 = _S16;
  __asm { FCVT            H10, S16 }
  float v70 = _S7;
  __asm { FCVT            H7, S7 }
  short float v137 = *(short float *)&_S7;
  short float v138 = _H10;
  float v71 = _S25;
  __asm { FCVT            H7, S25 }
  short float v136 = *(short float *)&_S7;
  float v72 = _Q6.f32[0];
  __asm { FCVT            H6, S6 }
  float16x8_t v134 = (float16x8_t)v67;
  short float v135 = *(short float *)_Q6.i16;
  v50.i32[1] = *(_DWORD *)(v26 + 60);
  *(float32x2_t *)_Q6.f32 = vmul_f32(v50, (float32x2_t)0x3F0000003F000000);
  float16x8_t v147 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q6), 0);
  v11.i32[1] = *(_DWORD *)(v26 + 64);
  *(float32x2_t *)v11.f32 = vmul_f32(*(float32x2_t *)v11.f32, (float32x2_t)0x3F0000003F000000);
  __asm { FCVT            H10, S0 }
  float32x4_t v74 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
  float16x8_t v144 = (float16x8_t)v74;
  short float v145 = _H10;
  v51.i32[1] = *(_DWORD *)(v26 + 68);
  *(float32x2_t *)v74.f32 = vmul_f32(v51, (float32x2_t)0x3F0000003F000000);
  int16x4_t v75 = (int16x4_t)vcvt_f16_f32(v74);
  int32x4_t v76 = vdupq_lane_s32((int32x2_t)v75, 0);
  *(short float *)v75.i16 = (short float)v42;
  float16x8_t v77 = (float16x8_t)vdupq_lane_s16(v75, 0);
  *(short float *)v75.i16 = (short float)v43;
  int16x8_t v78 = vdupq_lane_s16(v75, 0);
  float16x8_t v142 = (float16x8_t)v78;
  float16x8_t v143 = (float16x8_t)v76;
  *(short float *)v78.i16 = (short float)v44;
  int16x8_t v79 = vdupq_lane_s16(*(int16x4_t *)v78.i8, 0);
  *(short float *)v78.i16 = (short float)v45;
  int16x8_t v80 = vdupq_lane_s16(*(int16x4_t *)v78.i8, 0);
  float16x8_t v140 = (float16x8_t)v80;
  float16x8_t v141 = (float16x8_t)v79;
  *(short float *)v80.i16 = (short float)v46;
  float16x8_t v81 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v80.i8, 0);
  uint64_t v83 = *v24;
  uint64_t v82 = v24[1];
  unsigned int v84 = (unsigned char *)(v82 + v36 * v25 + v23);
  if (!v82) {
    unsigned int v84 = 0;
  }
  float v85 = (int8x8_t *)(v83 + v35 * v25 + v23);
  uint64_t v87 = *v28;
  uint64_t v86 = v28[1];
  uint64_t v88 = v86 + v31 * v21 + v20;
  if (!v86) {
    uint64_t v88 = 0;
  }
  uint64_t result = (void *)(v87 + v30 * v21 + v20);
  __asm { FCVT            H10, S1 }
  short float v139 = _H10;
  __asm { FCVT            H10, S2 }
  float v146 = _Q6.f32[0];
  float v91 = v74.f32[0];
  v74.f32[0] = (float)v45;
  float v92 = (float)v46;
  do
  {
    if ((int)v19 < 8)
    {
      size_t v111 = 0;
      uint32x4_t v110 = v84;
      float v96 = v85;
      uint64_t v95 = v88;
      float v94 = (int8x8_t *)result;
    }
    else
    {
      uint64_t v93 = 0;
      float v94 = (int8x8_t *)result;
      uint64_t v95 = v88;
      float v96 = v85;
      do
      {
        if (v95)
        {
          int8x8x2_t v149 = vld2_s8((const char *)v95);
          v95 += 16;
          *(int8x8_t *)v97.i8 = vzip1_s8(v149.val[0], 0);
          v97.u64[1] = (unint64_t)vzip2_s8(v149.val[0], 0);
          *(int8x8_t *)v98.i8 = vzip1_s8(v149.val[1], 0);
          v98.u64[1] = (unint64_t)vzip2_s8(v149.val[1], 0);
          float16x8_t v99 = vaddq_f16(v134, vcvtq_f16_u16(v97));
          float16x8_t v100 = vaddq_f16(v134, vcvtq_f16_u16(v98));
          float16x8_t v101 = vmulq_n_f16(v100, v135);
          float16x8_t v102 = vmlaq_n_f16(vmulq_n_f16(v99, v137), v100, v136);
          float16x8_t v103 = vmulq_n_f16(v99, v138);
        }
        else
        {
          float16x8_t v103 = 0uLL;
          float16x8_t v102 = 0uLL;
          float16x8_t v101 = 0uLL;
        }
        int8x8_t v104 = *v94++;
        *(int8x8_t *)v105.i8 = vzip1_s8(v104, 0);
        v105.u64[1] = (unint64_t)vzip2_s8(v104, 0);
        float16x8_t v106 = vsubq_f16(vcvtq_f16_u16(v105), v148);
        float16x8_t v107 = vmlaq_n_f16(v101, v106, _H8);
        float16x8_t v108 = vmlaq_n_f16(v102, v106, _H8);
        float16x8_t v109 = vmlaq_n_f16(v103, v106, _H8);
        *v96++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v77, v107, v145), v108, v139), v109, _H10), v77), v141)));
        int16x8_t v67 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v107, (int16x8_t)v108), (float16x8_t)vuzp2q_s16((int16x8_t)v107, (int16x8_t)v108));
        float16x8_t v12 = (float16x8_t)vzip1q_s16(v67, v67);
        float16x8_t v13 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v142, v147, v12), v144, (float16x8_t)vzip2q_s16(v67, v67)), v143, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v109, (int16x8_t)v109), (float16x8_t)vtrn2q_s16((int16x8_t)v109, (int16x8_t)v109)));
        *(int8x8_t *)v67.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v13, v140), v81)));
        *(void *)&v84[v93] = v67.i64[0];
        v93 += 8;
      }
      while ((int)v93 < (int)v19 - 7);
      uint32x4_t v110 = &v84[v93];
      size_t v111 = v19 & 0xFFFFFFF8;
    }
    while (v19 > v111)
    {
      float v112 = 0.0;
      if (v95)
      {
        v67.i8[0] = *(unsigned char *)v95;
        float v113 = (float)v67.u32[0] - v54;
        v12.i8[0] = *(unsigned char *)(v95 + 1);
        float v114 = (float)v12.u32[0] - v54;
        v95 += 2;
        float v115 = v72 * v114;
        *(float *)v12.i32 = (float)(v71 * v114) + (float)(v113 * v70);
        *(float *)v67.i32 = v68 * v113;
        if (v95)
        {
          v13.i8[0] = *(unsigned char *)v95;
          *(float *)&unsigned int v116 = (float)v13.u32[0];
          float v117 = *(float *)&v116 - v54;
          LOBYTE(v116) = *(unsigned char *)(v95 + 1);
          float v118 = (float)v116 - v54;
          v95 += 2;
          *(float *)v13.i32 = v72 * v118;
          float v119 = (float)(v71 * v118) + (float)(v117 * v70);
          float v112 = v68 * v117;
          goto LABEL_20;
        }
      }
      else
      {
        v67.i32[0] = 0;
        v12.i32[0] = 0;
        float v115 = 0.0;
      }
      float v119 = 0.0;
      v13.i32[0] = 0;
LABEL_20:
      LOBYTE(v9) = v94->i8[0];
      float v120 = _S5 * (float)((float)LODWORD(v9) - v53);
      float v121 = v115 + v120;
      float v122 = *(float *)v12.i32 + v120;
      float v9 = *(float *)v67.i32 + v120;
      v67.i8[0] = v94->i8[1];
      float v123 = _S5 * (float)((float)v67.u32[0] - v53);
      float v124 = *(float *)v13.i32 + v123;
      float v125 = v119 + v123;
      float v126 = v112 + v123;
      *(float *)v67.i32 = (float)((float)((float)(_S1 * v122) + (float)(_S0 * v121)) + (float)(_S2 * v9)) + v58;
      float v127 = (float)((float)((float)(_S1 * v125) + (float)(_S0 * v124)) + (float)(_S2 * v126)) + v58;
      if (*(float *)v67.i32 < v58) {
        float v128 = v58;
      }
      else {
        float v128 = (float)((float)((float)(_S1 * v122) + (float)(_S0 * v121)) + (float)(_S2 * v9)) + v58;
      }
      if (*(float *)v67.i32 > v61) {
        float v128 = v61;
      }
      v96->i8[0] = llroundf(v128);
      if (v127 < v58) {
        float v129 = v58;
      }
      else {
        float v129 = (float)((float)((float)(_S1 * v125) + (float)(_S0 * v124)) + (float)(_S2 * v126)) + v58;
      }
      if (v127 > v61) {
        float v129 = v61;
      }
      v96->i8[1] = llroundf(v129);
      float v130 = v121 + v124;
      float v131 = v122 + v125;
      float v132 = (float)((float)(v59 + (float)((float)(v121 + v124) * v146)) + (float)(v131 * v11.f32[0]))
           + (float)((float)(v9 + v126) * v91);
      *(float *)v13.i32 = v92;
      if (v132 <= v92)
      {
        *(float *)v13.i32 = v132;
        if (v132 < v74.f32[0]) {
          v13.i32[0] = v74.i32[0];
        }
      }
      float v133 = (float)(v59 + (float)(v130 * _Q6.f32[1])) + (float)(v131 * v11.f32[1]);
      *(float *)v67.i32 = v133 + (float)((float)(v9 + v126) * v74.f32[1]);
      *uint32x4_t v110 = llroundf(*(float *)v13.i32);
      *(float *)v12.i32 = v92;
      if (*(float *)v67.i32 <= v92)
      {
        *(float *)v12.i32 = v133 + (float)((float)(v9 + v126) * v74.f32[1]);
        if (*(float *)v67.i32 < v74.f32[0]) {
          v12.i32[0] = v74.i32[0];
        }
      }
      v110[1] = llroundf(*(float *)v12.i32);
      v110 += 2;
      v111 += 2;
      float v94 = (int8x8_t *)((char *)v94 + 2);
      float v96 = (int8x8_t *)((char *)v96 + 2);
    }
    uint64_t result = (void *)((char *)result + v30);
    v88 += v31;
    float v85 = (int8x8_t *)((char *)v85 + v35);
    v84 += v36;
    ++v18;
  }
  while (v18 != v22);
  if (v33 && v38)
  {
    do
    {
      uint64_t result = memcpy(v39, v34, v19);
      v34 += v32;
      v39 += v37;
      --v22;
    }
    while (v22);
  }
  else if (v38)
  {
    do
    {
      if (v19) {
        uint64_t result = memset(v39, 255, v19);
      }
      v39 += v37;
      --v22;
    }
    while (v22);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_422vf_GCD);
  return 0;
}

void *vt_Copy_444vf_rgb_422vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v13 = *(void *)((char *)result + 28);
  unint64_t v14 = *(unsigned __int8 *)result;
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (v16 == v15) {
    return result;
  }
  uint64_t v17 = 0;
  size_t v18 = *(void *)((char *)result + 20);
  uint64_t v19 = *(void *)((char *)result + 36);
  unint64_t v20 = v15 + *(void *)((char *)result + 44);
  unint64_t v21 = v16 - v15;
  uint64_t v22 = result[14];
  uint64_t v23 = (uint64_t *)result[16];
  unint64_t v24 = result[13] * a2 / v14 + result[15];
  uint64_t v25 = result[19];
  uint64_t v27 = (uint64_t *)result[7];
  uint64_t v26 = (uint64_t *)result[8];
  uint64_t v28 = (uint64_t *)result[17];
  uint64_t v29 = *v26;
  uint64_t v30 = v26[1];
  uint64_t v31 = v26[2];
  uint64_t v32 = v27[2];
  uint64_t v33 = (char *)(v32 + v31 * v20 + v19);
  uint64_t v34 = *v28;
  uint64_t v35 = v28[1];
  uint64_t v36 = v28[2];
  uint64_t v37 = v23[2];
  uint64_t v38 = (char *)(v37 + v36 * v24 + v22);
  *(float *)&unsigned int v39 = (float)*(unsigned int *)(v25 + 136);
  LOWORD(a5) = *(_WORD *)(v25 + 140);
  float v40 = *(float *)&v39 / (float)*(unsigned int *)(v25 + 128);
  float v41 = (float)LODWORD(a5);
  LOWORD(v39) = *(_WORD *)(v25 + 142);
  float v42 = (float)v39;
  float v43 = v40 * *(float *)v25;
  float v44 = v40 * *(float *)(v25 + 8);
  float v45 = v40 * *(float *)(v25 + 16);
  float v46 = v40 * *(float *)(v25 + 20);
  float v47 = *(float *)(v25 + 28);
  float v48 = v40 * v47;
  LOWORD(v47) = *(_WORD *)(v25 + 144);
  float v49 = (float)LODWORD(v47);
  LOWORD(v7) = *(_WORD *)(v25 + 146);
  float v50 = (float)v7;
  LOWORD(v8) = *(_WORD *)(v25 + 148);
  float v51 = (float)v8;
  LOWORD(v9) = *(_WORD *)(v25 + 150);
  float v52 = (float)v9;
  LOWORD(v10) = *(_WORD *)(v25 + 152);
  float v53 = (float)v10;
  float v54 = *(float *)(v25 + 36);
  float v55 = *(float *)(v25 + 40);
  float v56 = *(float *)(v25 + 44);
  float v57 = *(float *)(v25 + 48) * 0.5;
  float v58 = *(float *)(v25 + 52) * 0.5;
  float v59 = *(float *)(v25 + 56) * 0.5;
  float v60 = *(float *)(v25 + 60) * 0.5;
  float v61 = *(float *)(v25 + 64) * 0.5;
  float v62 = *(float *)(v25 + 68) * 0.5;
  uint64_t v64 = *v23;
  uint64_t v63 = v23[1];
  uint64_t v65 = v63 + v35 * v24 + v22;
  if (!v63) {
    uint64_t v65 = 0;
  }
  uint64_t v66 = (unsigned char *)(v64 + v34 * v24 + v22);
  uint64_t v68 = *v27;
  uint64_t v67 = v27[1];
  uint64_t v69 = (unsigned char *)(v67 + v30 * v20 + v19);
  if (!v67) {
    uint64_t v69 = 0;
  }
  uint64_t result = (void *)(v68 + v29 * v20 + v19);
  do
  {
    if (v18)
    {
      size_t v70 = 0;
      float v71 = result;
      float v72 = v69;
      float v73 = v66;
      while (1)
      {
        float v74 = 0.0;
        if (!v72) {
          break;
        }
        LOBYTE(v11) = *v72;
        float v75 = (float)LODWORD(v11) - v42;
        LOBYTE(v12) = v72[1];
        float v76 = (float)LODWORD(v12) - v42;
        v72 += 2;
        float v77 = v44 * v76;
        float v78 = (float)(v46 * v76) + (float)(v75 * v45);
        float v79 = v48 * v75;
        if (!v72) {
          goto LABEL_13;
        }
        LOBYTE(v74) = *v72;
        float v80 = (float)LODWORD(v74) - v42;
        LOBYTE(v5) = v72[1];
        float v81 = (float)LODWORD(v5) - v42;
        v72 += 2;
        float v82 = v44 * v81;
        float v83 = (float)(v46 * v81) + (float)(v80 * v45);
        float v74 = v48 * v80;
LABEL_14:
        LOBYTE(v6) = *v71;
        float v84 = v43 * (float)((float)LODWORD(v6) - v41);
        float v85 = v77 + v84;
        float v86 = v78 + v84;
        float v6 = v79 + v84;
        LOBYTE(v79) = v71[1];
        float v87 = v43 * (float)((float)LODWORD(v79) - v41);
        float v88 = v82 + v87;
        float v89 = v83 + v87;
        float v90 = v74 + v87;
        float v91 = (float)((float)((float)(v55 * v86) + (float)(v54 * v85)) + (float)(v56 * v6)) + v49;
        float v92 = (float)((float)((float)(v55 * v89) + (float)(v54 * v88)) + (float)(v56 * v90)) + v49;
        if (v91 < v49) {
          float v93 = v49;
        }
        else {
          float v93 = (float)((float)((float)(v55 * v86) + (float)(v54 * v85)) + (float)(v56 * v6)) + v49;
        }
        if (v91 <= v51) {
          float v94 = v93;
        }
        else {
          float v94 = v51;
        }
        *float v73 = llroundf(v94);
        if (v92 < v49) {
          float v95 = v49;
        }
        else {
          float v95 = (float)((float)((float)(v55 * v89) + (float)(v54 * v88)) + (float)(v56 * v90)) + v49;
        }
        if (v92 > v51) {
          float v95 = v51;
        }
        v73[1] = llroundf(v95);
        float v96 = v85 + v88;
        float v97 = v86 + v89;
        float v98 = (float)(v50 + (float)((float)(v85 + v88) * v57)) + (float)((float)(v86 + v89) * v58);
        float v12 = v6 + v90;
        float v5 = v98 + (float)((float)(v6 + v90) * v59);
        float v99 = v53;
        if (v5 <= v53)
        {
          float v99 = v5;
          if (v5 < v52) {
            float v99 = v52;
          }
        }
        float v100 = (float)((float)(v50 + (float)(v96 * v60)) + (float)(v97 * v61)) + (float)(v12 * v62);
        *(unsigned char *)(v65 + v70) = llroundf(v99);
        float v11 = v53;
        if (v100 <= v53)
        {
          float v11 = v100;
          if (v100 < v52) {
            float v11 = v52;
          }
        }
        *(unsigned char *)(v65 + v70 + 1) = llroundf(v11);
        v70 += 2;
        v71 += 2;
        v73 += 2;
        if (v18 <= v70) {
          goto LABEL_32;
        }
      }
      float v79 = 0.0;
      float v78 = 0.0;
      float v77 = 0.0;
LABEL_13:
      float v83 = 0.0;
      float v82 = 0.0;
      goto LABEL_14;
    }
LABEL_32:
    uint64_t result = (void *)((char *)result + v29);
    v69 += v30;
    v66 += v34;
    v65 += v35;
    ++v17;
  }
  while (v17 != v21);
  if (v32 && v37)
  {
    do
    {
      uint64_t result = memcpy(v38, v33, v18);
      v33 += v31;
      v38 += v36;
      --v21;
    }
    while (v21);
  }
  else if (v37)
  {
    do
    {
      if (v18) {
        uint64_t result = memset(v38, 255, v18);
      }
      v38 += v36;
      --v21;
    }
    while (v21);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_2vuyf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  unint64_t v10 = result[13] * a2 / v6;
  int64x2_t v11 = (void *)result[16];
  unint64_t v12 = v10 + result[15];
  int64x2_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  unint64_t v16 = (char *)(v15 + v14 * v12 + v9);
  unint64_t v17 = v8 / v6;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v9);
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v7)
  {
    uint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    unint64_t v22 = v7 + *(void *)((char *)result + 44);
    unint64_t v23 = v17 - v7;
    uint64_t v24 = result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = (char *)(v30 + v29 * v22 + v21);
    uint64_t v32 = *v13;
    LOWORD(a4) = *(_WORD *)(v24 + 140);
    LOWORD(a5) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a4);
    float v35 = v33 * *(float *)v24;
    float v171 = v33 * *(float *)(v24 + 16);
    float v172 = v33 * *(float *)(v24 + 8);
    float v170 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v36 = v33 * *(float *)(v24 + 28);
    float v168 = (float)LODWORD(a5);
    float v169 = *(float *)&v36;
    LOWORD(v36) = *(_WORD *)(v24 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 150);
    float v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v24 + 152);
    float v41 = (float)v36;
    float v42 = *(float *)(v24 + 36);
    float v43 = *(float *)(v24 + 40);
    float v44 = *(float *)(v24 + 44);
    float v167 = *(float *)(v24 + 48) * 0.5;
    float v165 = *(float *)(v24 + 56) * 0.5;
    float v166 = *(float *)(v24 + 52) * 0.5;
    float v163 = *(float *)(v24 + 64) * 0.5;
    float v164 = *(float *)(v24 + 60) * 0.5;
    float v45 = *(float *)(v24 + 72);
    float v161 = *(float *)(v24 + 68) * 0.5;
    float v162 = v45;
    float v159 = *(float *)(v24 + 80);
    float v160 = *(float *)(v24 + 76);
    float v157 = *(float *)(v24 + 88);
    float v158 = *(float *)(v24 + 84);
    float v155 = *(float *)(v24 + 96);
    float v156 = *(float *)(v24 + 92);
    float v46 = *(float *)(v24 + 104);
    float v47 = *(float *)(v24 + 108);
    float v153 = v46;
    float v154 = *(float *)(v24 + 100);
    uint64_t v48 = v24 + 164;
    uint64_t v49 = v24 + 16548;
    uint64_t v50 = *v11 + v32 * v12;
    uint64_t v51 = v24 + 32932;
    uint64_t result = (void *)(v50 + v9);
    uint64_t v52 = v25[1];
    _ZF = v52 == 0;
    float v54 = (unsigned char *)(v52 + v28 * v22 + v21);
    if (_ZF) {
      float v54 = 0;
    }
    float v55 = (unsigned char *)(*v25 + v27 * v22 + v21);
    float v57 = *(float *)(v24 + 112);
    float v56 = *(float *)(v24 + 116);
    float v58 = *(float *)(v24 + 120);
    float v152 = v40;
    do
    {
      if (v20)
      {
        size_t v59 = 0;
        float v60 = v55;
        float v61 = v54;
        float v62 = v18;
        uint64_t v63 = result;
        do
        {
          if (v61)
          {
            LOBYTE(v46) = *v61;
            *(float *)&unsigned int v64 = (float)LODWORD(v46);
            float v45 = *(float *)&v64 - v168;
            LOBYTE(v64) = v61[1];
            float v65 = (float)v64 - v168;
            v61 += 2;
            float v66 = v172 * v65;
            float v67 = (float)(v170 * v65) + (float)(v45 * v171);
            float v68 = v169 * v45;
          }
          else
          {
            float v68 = 0.0;
            float v67 = 0.0;
            float v66 = 0.0;
          }
          LOBYTE(v45) = *v60;
          float v69 = v35 * (float)((float)LODWORD(v45) - v34);
          float v70 = v66 + v69;
          BOOL v71 = (float)(v66 + v69) <= 8191.0;
          float v72 = 8191.0;
          if (v71)
          {
            float v72 = v70;
            if (v70 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v67 + v69;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v68 + v69;
          BOOL v71 = (float)(v68 + v69) <= 8191.0;
          float v76 = 8191.0;
          if (v71)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          if (v61)
          {
            LOBYTE(v75) = *v61;
            *(float *)&unsigned int v77 = (float)LODWORD(v75);
            float v69 = *(float *)&v77 - v168;
            LOBYTE(v77) = v61[1];
            float v78 = (float)v77 - v168;
            v61 += 2;
            float v79 = v172 * v78;
            float v80 = (float)(v170 * v78) + (float)(v69 * v171);
            float v81 = v169 * v69;
          }
          else
          {
            float v81 = 0.0;
            float v80 = 0.0;
            float v79 = 0.0;
          }
          LOBYTE(v69) = v60[1];
          float v82 = v34;
          float v83 = v35;
          float v84 = v35 * (float)((float)LODWORD(v69) - v34);
          float v85 = v79 + v84;
          BOOL v71 = (float)(v79 + v84) <= 8191.0;
          float v86 = 8191.0;
          if (v71)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v80 + v84;
          BOOL v71 = (float)(v80 + v84) <= 8191.0;
          float v88 = 8191.0;
          if (v71)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v81 + v84;
          float v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H7 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          unsigned int v97 = llroundf(fminf(fmaxf(v76, 0.0), 8191.0));
          __asm { FCVT            S4, H7 }
          _H7 = *(_WORD *)(v48 + 2 * v97);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          float v104 = (float)((float)((float)(v57 * _S4) + (float)(v47 * _S0)) + (float)(v56 * _S7))
               + (float)(v58 * fmaxf(_S0, fmaxf(_S4, _S7)));
          float v105 = 8191.0;
          if (v104 <= 8191.0)
          {
            float v105 = v104;
            if (v104 < 0.0) {
              float v105 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H6
            FCVT            S6, H1
            FCVT            S30, H30
          }
          _H1 = *(_WORD *)(v49 + 2 * llroundf(v105));
          __asm { FCVT            S1, H1 }
          float v111 = _S0 * _S1;
          float v112 = _S4 * _S1;
          float v113 = _S7 * _S1;
          float v114 = (float)((float)((float)(v57 * _S6) + (float)(v47 * _S3)) + (float)(v56 * _S30))
               + (float)(v58 * fmaxf(_S3, fmaxf(_S6, _S30)));
          float v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            float v115 = v114;
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          _H7 = *(_WORD *)(v49 + 2 * llroundf(v115));
          __asm { FCVT            S7, H7 }
          float v118 = _S3 * _S7;
          _S6 = _S6 * _S7;
          _S7 = _S30 * _S7;
          float v121 = (float)((float)(v160 * v112) + (float)(v111 * v162)) + (float)(v113 * v159);
          float v122 = (float)((float)(v157 * v112) + (float)(v111 * v158)) + (float)(v113 * v156);
          _S0 = (float)((float)(v154 * v112) + (float)(v111 * v155)) + (float)(v113 * v153);
          float v124 = (float)(v160 * _S6) + (float)(v118 * v162);
          float v125 = (float)(v157 * _S6) + (float)(v118 * v158);
          float v126 = (float)(v154 * _S6) + (float)(v118 * v155);
          _S1 = v124 + (float)(_S7 * v159);
          float v128 = v125 + (float)(_S7 * v156);
          LOWORD(_S6) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          float v129 = v126 + (float)(_S7 * v153);
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S0) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S17, H0 }
          LOWORD(_S0) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          unsigned int v135 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          float v136 = (float)(v43 * _S7) + (float)(v42 * _S6);
          _S1 = _S6 + _S0;
          float v138 = _S7 + _S4;
          float v139 = (float)(v38 + (float)((float)(_S6 + _S0) * v167)) + (float)(v138 * v166);
          float v140 = (float)(v38 + (float)(_S1 * v164)) + (float)(v138 * v163);
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * v135);
          __asm { FCVT            S1, H1 }
          float v142 = v136 + (float)(v44 * _S17);
          float v143 = v139 + (float)((float)(_S17 + _S1) * v165);
          float v144 = v140 + (float)((float)(_S17 + _S1) * v161);
          if (v143 < v152) {
            float v145 = v152;
          }
          else {
            float v145 = v143;
          }
          BOOL v71 = v143 <= v41;
          float v146 = v142 + v37;
          if (!v71) {
            float v145 = v41;
          }
          char v147 = llroundf(v145);
          if (v146 < v37) {
            float v148 = v37;
          }
          else {
            float v148 = v142 + v37;
          }
          *uint64_t v63 = v147;
          if (v146 <= v39) {
            float v149 = v148;
          }
          else {
            float v149 = v39;
          }
          v63[1] = llroundf(v149);
          float v150 = v41;
          if (v144 <= v41)
          {
            float v150 = v144;
            if (v144 < v152) {
              float v150 = v152;
            }
          }
          float v45 = v43 * _S4;
          float v46 = (float)((float)((float)(v43 * _S4) + (float)(v42 * _S0)) + (float)(v44 * _S1)) + v37;
          v63[2] = llroundf(v150);
          float v151 = v39;
          float v34 = v82;
          float v35 = v83;
          if (v46 <= v39)
          {
            float v151 = v46;
            if (v46 < v37) {
              float v151 = v37;
            }
          }
          v63[3] = llroundf(v151);
          if (v62) {
            *v62++ = 0;
          }
          v59 += 2;
          v60 += 2;
          v63 += 4;
        }
        while (v20 > v59);
      }
      v55 += v27;
      v54 += v28;
      uint64_t result = (void *)((char *)result + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      do
      {
        uint64_t result = memcpy(v16, v31, v20);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_2vuyf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  int64x2_t v10 = (void *)result[16];
  unint64_t v11 = result[13] * a2 / v6 + result[15];
  int64x2_t v12 = (uint64_t *)result[17];
  uint64_t v13 = v12[1];
  uint64_t v14 = v10[1];
  uint64_t v15 = (char *)(v14 + v13 * v11 + v9);
  unint64_t v16 = v8 / v6;
  if (v14) {
    uint64_t v17 = (_WORD *)(v14 + v13 * v11 + v9);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16 != v7)
  {
    uint64_t v18 = 0;
    size_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v7 + *(void *)((char *)result + 44);
    unint64_t v22 = v16 - v7;
    uint64_t v23 = result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = (char *)(v29 + v28 * v21 + v20);
    uint64_t v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    *(float *)&unsigned int v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = (float)LODWORD(a5);
    float v35 = *(float *)&v32 * *(float *)v23;
    float v138 = *(float *)&v32 * *(float *)(v23 + 16);
    float v139 = *(float *)&v32 * *(float *)(v23 + 8);
    float v36 = *(float *)&v32 * *(float *)(v23 + 20);
    float v37 = *(float *)&v32 * *(float *)(v23 + 28);
    LOWORD(v32) = *(_WORD *)(v23 + 144);
    float v38 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 146);
    float v39 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 148);
    float v40 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 150);
    float v41 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 152);
    float v42 = (float)v32;
    float v43 = *(float *)(v23 + 36);
    float v44 = *(float *)(v23 + 40);
    float v45 = *(float *)(v23 + 44);
    float v136 = *(float *)(v23 + 48) * 0.5;
    float v137 = v36;
    float v134 = *(float *)(v23 + 56) * 0.5;
    float v135 = *(float *)(v23 + 52) * 0.5;
    _S5 = *(float *)(v23 + 64);
    float v132 = _S5 * 0.5;
    float v133 = *(float *)(v23 + 60) * 0.5;
    float v47 = *(float *)(v23 + 72);
    float v48 = *(float *)(v23 + 68) * 0.5;
    float v131 = v48;
    float v50 = *(float *)(v23 + 76);
    float v49 = *(float *)(v23 + 80);
    float v51 = *(float *)(v23 + 84);
    float v52 = *(float *)(v23 + 88);
    float v53 = *(float *)(v23 + 92);
    float v54 = *(float *)(v23 + 96);
    float v55 = *(float *)(v23 + 100);
    float v56 = *(float *)(v23 + 104);
    uint64_t v57 = v23 + 16548;
    uint64_t v58 = v23 + 164;
    size_t v59 = (unsigned char *)(*v10 + v31 * v11 + v9);
    uint64_t v60 = v24[1];
    if (v60) {
      uint64_t result = (void *)(v60 + v27 * v21 + v20);
    }
    else {
      uint64_t result = 0;
    }
    float v61 = (unsigned char *)(*v24 + v26 * v21 + v20);
    do
    {
      if (v19)
      {
        size_t v62 = 0;
        uint64_t v63 = v61;
        unsigned int v64 = result;
        float v65 = v17;
        float v66 = v59;
        do
        {
          if (v64)
          {
            LOBYTE(v48) = *v64;
            *(float *)&unsigned int v67 = (float)LODWORD(v48);
            _S5 = *(float *)&v67 - v34;
            LOBYTE(v67) = v64[1];
            float v68 = (float)v67 - v34;
            v64 += 2;
            float v69 = v139 * v68;
            float v70 = (float)(v137 * v68) + (float)(_S5 * v138);
            float v71 = v37 * _S5;
          }
          else
          {
            float v71 = 0.0;
            float v70 = 0.0;
            float v69 = 0.0;
          }
          LOBYTE(_S5) = *v63;
          float v72 = v35 * (float)((float)LODWORD(_S5) - v33);
          float v73 = v69 + v72;
          BOOL v74 = (float)(v69 + v72) <= 8191.0;
          float v75 = 8191.0;
          if (v74)
          {
            float v75 = v73;
            if (v73 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v70 + v72;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v71 + v72;
          float v79 = 8191.0;
          if ((float)(v71 + v72) <= 8191.0)
          {
            float v79 = v71 + v72;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          if (v64)
          {
            LOBYTE(v78) = *v64;
            *(float *)&unsigned int v80 = (float)LODWORD(v78);
            float v72 = *(float *)&v80 - v34;
            LOBYTE(v80) = v64[1];
            float v81 = (float)v80 - v34;
            v64 += 2;
            float v82 = v139 * v81;
            float v83 = (float)(v137 * v81) + (float)(v72 * v138);
            float v84 = v37 * v72;
          }
          else
          {
            float v84 = 0.0;
            float v83 = 0.0;
            float v82 = 0.0;
          }
          LOBYTE(v72) = v63[1];
          float v85 = v35 * (float)((float)LODWORD(v72) - v33);
          float v86 = 8191.0;
          if ((float)(v82 + v85) <= 8191.0)
          {
            float v86 = v82 + v85;
            if ((float)(v82 + v85) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v83 + v85;
          BOOL v74 = (float)(v83 + v85) <= 8191.0;
          float v88 = 8191.0;
          if (v74)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v84 + v85;
          float v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H4 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _S26 = (float)((float)(v50 * _S5) + (float)(_S0 * v47)) + (float)(_S24 * v49);
          float v106 = (float)((float)(v52 * _S5) + (float)(_S0 * v51)) + (float)(_S24 * v53);
          _S0 = (float)((float)(v55 * _S5) + (float)(_S0 * v54)) + (float)(_S24 * v56);
          float v108 = (float)(v50 * _S4) + (float)(_S6 * v47);
          float v109 = (float)(v52 * _S4) + (float)(_S6 * v51);
          _S4 = (float)(v55 * _S4) + (float)(_S6 * v54);
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _S5 = v108 + (float)(_S6 * v49);
          float v113 = v109 + (float)(_S6 * v53);
          LOWORD(_S26) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          float v114 = _S4 + (float)(_S6 * v56);
          __asm { FCVT            S26, H26 }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S28, H4 }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S30, H0 }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          float v120 = (float)(v39 + (float)((float)(_S26 + _S0) * v133)) + (float)((float)(_S28 + _S4) * v132);
          LOWORD(_S5) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          float v121 = (float)((float)(v44 * _S28) + (float)(v43 * _S26)) + (float)(v45 * _S30);
          float v122 = (float)((float)(v39 + (float)((float)(_S26 + _S0) * v136)) + (float)((float)(_S28 + _S4) * v135))
               + (float)((float)(_S30 + _S5) * v134);
          float v123 = v120 + (float)((float)(_S30 + _S5) * v131);
          if (v122 < v41) {
            float v124 = v41;
          }
          else {
            float v124 = v122;
          }
          float v125 = v121 + v38;
          if (v122 > v42) {
            float v124 = v42;
          }
          char v126 = llroundf(v124);
          if (v125 < v38) {
            float v127 = v38;
          }
          else {
            float v127 = v125;
          }
          *float v66 = v126;
          if (v125 <= v40) {
            float v128 = v127;
          }
          else {
            float v128 = v40;
          }
          v66[1] = llroundf(v128);
          float v129 = v42;
          if (v123 <= v42)
          {
            float v129 = v123;
            if (v123 < v41) {
              float v129 = v41;
            }
          }
          float v48 = (float)((float)((float)(v44 * _S4) + (float)(v43 * _S0)) + (float)(v45 * _S5)) + v38;
          v66[2] = llroundf(v129);
          float v130 = v40;
          if (v48 <= v40)
          {
            float v130 = v48;
            if (v48 < v38) {
              float v130 = v38;
            }
          }
          v66[3] = llroundf(v130);
          if (v65) {
            *v65++ = 0;
          }
          v62 += 2;
          v63 += 2;
          v66 += 4;
        }
        while (v19 > v62);
      }
      v61 += v26;
      uint64_t result = (void *)((char *)result + v27);
      v59 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      do
      {
        uint64_t result = memcpy(v15, v30, v19);
        v30 += v28;
        v15 += v13;
        --v22;
      }
      while (v22);
    }
    else if (v17)
    {
      do
      {
        if (v19) {
          uint64_t result = memset(v15, 255, v19);
        }
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_2vuyf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v15 = *(void *)(result + 28);
  unint64_t v16 = *result;
  unint64_t v17 = v15 * a2 / v16;
  uint64_t v18 = *((void *)result + 14);
  uint64_t v19 = (void *)*((void *)result + 16);
  unint64_t v20 = *((void *)result + 13) * a2 / v16 + *((void *)result + 15);
  long long v21 = (uint64_t *)*((void *)result + 17);
  uint64_t v22 = v21[1];
  uint64_t v23 = v19[1];
  uint64_t v24 = (char *)(v23 + v22 * v20 + v18);
  unint64_t v25 = (v15 + v15 * a2) / v16;
  if (v23) {
    uint64_t v26 = (_WORD *)(v23 + v22 * v20 + v18);
  }
  else {
    uint64_t v26 = 0;
  }
  if (v25 == v17) {
    return result;
  }
  uint64_t v27 = 0;
  size_t v28 = *(void *)(result + 20);
  uint64_t v29 = *(void *)(result + 36);
  unint64_t v30 = v17 + *(void *)(result + 44);
  unint64_t v31 = v25 - v17;
  uint64_t v32 = *((void *)result + 19);
  float v33 = (void *)*((void *)result + 7);
  float v34 = (uint64_t *)*((void *)result + 8);
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  uint64_t v37 = v34[2];
  uint64_t v38 = v33[2];
  LOWORD(a6) = *(_WORD *)(v32 + 140);
  LOWORD(a7) = *(_WORD *)(v32 + 142);
  float v39 = (float)*(unsigned int *)(v32 + 136) / (float)*(unsigned int *)(v32 + 128);
  LOWORD(v9) = *(_WORD *)(v32 + 144);
  LOWORD(v10) = *(_WORD *)(v32 + 146);
  LOWORD(v11) = *(_WORD *)(v32 + 148);
  LOWORD(v12) = *(_WORD *)(v32 + 150);
  LOWORD(v13) = *(_WORD *)(v32 + 152);
  float v40 = *(float *)(v32 + 36);
  float v41 = *(float *)(v32 + 40);
  float v42 = *(float *)(v32 + 44);
  float v43 = (char *)(v38 + v37 * v30 + v29);
  uint64_t v44 = *v21;
  float v45 = (float)LODWORD(a6);
  float v46 = (float)LODWORD(a7);
  float v47 = v39 * *(float *)v32;
  float v48 = v39 * *(float *)(v32 + 8);
  float v49 = v39 * *(float *)(v32 + 16);
  float v50 = v39 * *(float *)(v32 + 20);
  float v51 = v39 * *(float *)(v32 + 28);
  float v52 = (float)v9;
  float v53 = (float)v10;
  float v54 = (float)v11;
  float v55 = (float)v12;
  float v56 = (float)v13;
  float v57 = 0.5;
  float v58 = *(float *)(v32 + 48) * 0.5;
  float v59 = *(float *)(v32 + 52) * 0.5;
  float v60 = *(float *)(v32 + 56) * 0.5;
  float v61 = *(float *)(v32 + 60) * 0.5;
  float v62 = *(float *)(v32 + 64) * 0.5;
  float v63 = *(float *)(v32 + 68) * 0.5;
  unsigned int v64 = (unsigned char *)(*v19 + v44 * v20 + v18);
  uint64_t v65 = v33[1];
  uint64_t result = (unsigned __int8 *)(v65 + v36 * v30 + v29);
  if (v65) {
    float v66 = (unsigned char *)(v65 + v36 * v30 + v29);
  }
  else {
    float v66 = 0;
  }
  unsigned int v67 = (unsigned __int8 *)(*v33 + v35 * v30 + v29);
  do
  {
    if (v28)
    {
      size_t v68 = 0;
      uint64_t result = v67;
      float v69 = v66;
      float v70 = v26;
      float v71 = v64;
      while (1)
      {
        float v72 = 0.0;
        if (!v69) {
          break;
        }
        LOBYTE(v57) = *v69;
        float v73 = (float)LODWORD(v57) - v46;
        LOBYTE(v14) = v69[1];
        float v74 = (float)LODWORD(v14) - v46;
        v69 += 2;
        float v75 = v48 * v74;
        float v76 = (float)(v50 * v74) + (float)(v73 * v49);
        float v77 = v51 * v73;
        if (!v69) {
          goto LABEL_15;
        }
        LOBYTE(v72) = *v69;
        float v78 = (float)LODWORD(v72) - v46;
        LOBYTE(v7) = v69[1];
        float v79 = (float)LODWORD(v7) - v46;
        v69 += 2;
        float v80 = v48 * v79;
        float v81 = (float)(v50 * v79) + (float)(v78 * v49);
        float v72 = v51 * v78;
LABEL_16:
        LOBYTE(v8) = *result;
        float v82 = v47 * (float)((float)v8 - v45);
        float v83 = v75 + v82;
        float v84 = v76 + v82;
        float v85 = v77 + v82;
        LOBYTE(v77) = result[1];
        float v86 = v47 * (float)((float)LODWORD(v77) - v45);
        float v87 = v80 + v86;
        float v88 = v81 + v86;
        float v89 = v72 + v86;
        float v90 = (float)((float)((float)(v41 * v84) + (float)(v40 * v83)) + (float)(v42 * v85)) + v52;
        float v91 = v83 + (float)(v80 + v86);
        float v92 = v84 + v88;
        float v93 = v85 + v89;
        float v94 = (float)((float)(v53 + (float)(v91 * v58)) + (float)(v92 * v59)) + (float)(v93 * v60);
        float v95 = (float)((float)(v53 + (float)(v91 * v61)) + (float)(v92 * v62)) + (float)(v93 * v63);
        if (v94 < v55) {
          *(float *)&unsigned int v8 = v55;
        }
        else {
          *(float *)&unsigned int v8 = v94;
        }
        if (v94 <= v56) {
          float v96 = *(float *)&v8;
        }
        else {
          float v96 = v56;
        }
        *float v71 = llroundf(v96);
        if (v90 < v52) {
          float v97 = v52;
        }
        else {
          float v97 = v90;
        }
        if (v90 <= v54) {
          float v98 = v97;
        }
        else {
          float v98 = v54;
        }
        v71[1] = llroundf(v98);
        float v7 = v56;
        if (v95 <= v56)
        {
          float v7 = v95;
          if (v95 < v55) {
            float v7 = v55;
          }
        }
        float v14 = v41 * v88;
        float v99 = (float)((float)(v14 + (float)(v40 * v87)) + (float)(v42 * v89)) + v52;
        v71[2] = llroundf(v7);
        float v57 = v54;
        if (v99 <= v54)
        {
          float v57 = v99;
          if (v99 < v52) {
            float v57 = v52;
          }
        }
        v71[3] = llroundf(v57);
        if (v70) {
          *v70++ = 0;
        }
        v68 += 2;
        result += 2;
        v71 += 4;
        if (v28 <= v68) {
          goto LABEL_37;
        }
      }
      float v77 = 0.0;
      float v76 = 0.0;
      float v75 = 0.0;
LABEL_15:
      float v81 = 0.0;
      float v80 = 0.0;
      goto LABEL_16;
    }
LABEL_37:
    v67 += v35;
    v66 += v36;
    v64 += v44;
    ++v27;
  }
  while (v27 != v31);
  if (v38 && v26)
  {
    do
    {
      uint64_t result = (unsigned __int8 *)memcpy(v24, v43, v28);
      v43 += v37;
      v24 += v22;
      --v31;
    }
    while (v31);
  }
  else if (v26)
  {
    do
    {
      if (v28) {
        uint64_t result = (unsigned __int8 *)memset(v24, 255, v28);
      }
      v24 += v22;
      --v31;
    }
    while (v31);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_yuvsf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  unint64_t v10 = result[13] * a2 / v6;
  int64x2_t v11 = (void *)result[16];
  unint64_t v12 = v10 + result[15];
  int64x2_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  unint64_t v16 = (char *)(v15 + v14 * v12 + v9);
  unint64_t v17 = v8 / v6;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v9);
  }
  else {
    uint64_t v18 = 0;
  }
  if (v17 != v7)
  {
    uint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    unint64_t v22 = v7 + *(void *)((char *)result + 44);
    unint64_t v23 = v17 - v7;
    uint64_t v24 = result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    unint64_t v31 = (char *)(v30 + v29 * v22 + v21);
    uint64_t v32 = *v13;
    LOWORD(a4) = *(_WORD *)(v24 + 140);
    LOWORD(a5) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a4);
    float v35 = (float)LODWORD(a5);
    float v36 = v33 * *(float *)v24;
    float v170 = v33 * *(float *)(v24 + 16);
    float v171 = v33 * *(float *)(v24 + 8);
    float v37 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v24 + 28);
    float v168 = *(float *)&v38;
    float v169 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    float v43 = (float)v38;
    float v166 = *(float *)(v24 + 36);
    float v167 = v40;
    float v44 = *(float *)(v24 + 44);
    float v164 = *(float *)(v24 + 48) * 0.5;
    float v165 = *(float *)(v24 + 40);
    float v162 = *(float *)(v24 + 56) * 0.5;
    float v163 = *(float *)(v24 + 52) * 0.5;
    float v45 = *(float *)(v24 + 64);
    float v160 = v45 * 0.5;
    float v161 = *(float *)(v24 + 60) * 0.5;
    float v46 = *(float *)(v24 + 72);
    float v47 = *(float *)(v24 + 68) * 0.5;
    float v159 = v47;
    float v49 = *(float *)(v24 + 76);
    float v48 = *(float *)(v24 + 80);
    float v50 = *(float *)(v24 + 84);
    float v51 = *(float *)(v24 + 88);
    float v52 = *(float *)(v24 + 92);
    float v53 = *(float *)(v24 + 96);
    float v54 = *(float *)(v24 + 100);
    float v55 = *(float *)(v24 + 104);
    uint64_t v56 = v24 + 164;
    uint64_t v57 = v24 + 16548;
    uint64_t v58 = *v11 + v32 * v12;
    uint64_t v59 = v24 + 32932;
    uint64_t result = (void *)(v58 + v9);
    uint64_t v60 = v25[1];
    _ZF = v60 == 0;
    float v62 = (unsigned char *)(v60 + v28 * v22 + v21);
    if (_ZF) {
      float v62 = 0;
    }
    float v63 = (unsigned char *)(*v25 + v27 * v22 + v21);
    float v64 = *(float *)(v24 + 108);
    float v65 = *(float *)(v24 + 112);
    float v66 = *(float *)(v24 + 116);
    float v67 = *(float *)(v24 + 120);
    do
    {
      if (v20)
      {
        size_t v68 = 0;
        float v69 = v63;
        float v70 = v62;
        float v71 = v18;
        float v72 = result;
        do
        {
          if (v70)
          {
            LOBYTE(v47) = *v70;
            *(float *)&unsigned int v73 = (float)LODWORD(v47);
            float v45 = *(float *)&v73 - v35;
            LOBYTE(v73) = v70[1];
            float v74 = (float)v73 - v35;
            v70 += 2;
            float v75 = v171 * v74;
            float v76 = (float)(v169 * v74) + (float)(v45 * v170);
            float v77 = v168 * v45;
          }
          else
          {
            float v77 = 0.0;
            float v76 = 0.0;
            float v75 = 0.0;
          }
          LOBYTE(v45) = *v69;
          float v78 = v36 * (float)((float)LODWORD(v45) - v34);
          float v79 = v75 + v78;
          BOOL v80 = (float)(v75 + v78) <= 8191.0;
          float v81 = 8191.0;
          if (v80)
          {
            float v81 = v79;
            if (v79 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v76 + v78;
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v77 + v78;
          BOOL v80 = (float)(v77 + v78) <= 8191.0;
          float v85 = 8191.0;
          if (v80)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          if (v70)
          {
            LOBYTE(v84) = *v70;
            *(float *)&unsigned int v86 = (float)LODWORD(v84);
            float v78 = *(float *)&v86 - v35;
            LOBYTE(v86) = v70[1];
            float v87 = (float)v86 - v35;
            v70 += 2;
            float v88 = v171 * v87;
            float v89 = (float)(v169 * v87) + (float)(v78 * v170);
            float v90 = v168 * v78;
          }
          else
          {
            float v90 = 0.0;
            float v89 = 0.0;
            float v88 = 0.0;
          }
          LOBYTE(v78) = v69[1];
          float v91 = v34;
          float v92 = v36 * (float)((float)LODWORD(v78) - v34);
          float v93 = v88 + v92;
          BOOL v80 = (float)(v88 + v92) <= 8191.0;
          float v94 = 8191.0;
          if (v80)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v89 + v92;
          BOOL v80 = (float)(v89 + v92) <= 8191.0;
          float v96 = 8191.0;
          if (v80)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v90 + v92;
          float v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          unsigned int v105 = llroundf(fminf(fmaxf(v85, 0.0), 8191.0));
          __asm { FCVT            S4, H7 }
          _H7 = *(_WORD *)(v56 + 2 * v105);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          float v112 = (float)((float)((float)(v65 * _S4) + (float)(v64 * _S0)) + (float)(v66 * _S7))
               + (float)(v67 * fmaxf(_S0, fmaxf(_S4, _S7)));
          float v113 = 8191.0;
          if (v112 <= 8191.0)
          {
            float v113 = v112;
            if (v112 < 0.0) {
              float v113 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H6
            FCVT            S6, H1
            FCVT            S30, H30
          }
          _H1 = *(_WORD *)(v57 + 2 * llroundf(v113));
          __asm { FCVT            S1, H1 }
          float v119 = _S0 * _S1;
          float v120 = _S4 * _S1;
          float v121 = _S7 * _S1;
          float v122 = (float)((float)((float)(v65 * _S6) + (float)(v64 * _S3)) + (float)(v66 * _S30))
               + (float)(v67 * fmaxf(_S3, fmaxf(_S6, _S30)));
          float v123 = 8191.0;
          if (v122 <= 8191.0)
          {
            float v123 = v122;
            if (v122 < 0.0) {
              float v123 = 0.0;
            }
          }
          _H7 = *(_WORD *)(v57 + 2 * llroundf(v123));
          __asm { FCVT            S7, H7 }
          float v126 = _S3 * _S7;
          _S6 = _S6 * _S7;
          float v128 = _S30 * _S7;
          float v129 = (float)((float)(v49 * v120) + (float)(v119 * v46)) + (float)(v121 * v48);
          float v130 = (float)((float)(v51 * v120) + (float)(v119 * v50)) + (float)(v121 * v52);
          _S0 = (float)((float)(v54 * v120) + (float)(v119 * v53)) + (float)(v121 * v55);
          _S1 = (float)(v49 * _S6) + (float)(v126 * v46);
          _S4 = (float)(v51 * _S6) + (float)(v126 * v50);
          float v134 = (float)((float)(v54 * _S6) + (float)(v126 * v53)) + (float)(v128 * v55);
          LOWORD(_S6) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          unsigned int v135 = llroundf(fminf(fmaxf(_S0, 0.0), 8191.0));
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S0, H0
          }
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S1 + (float)(v128 * v48), 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(_S4 + (float)(v128 * v52), 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          unsigned int v140 = llroundf(fminf(fmaxf(v134, 0.0), 8191.0));
          float v141 = (float)(v165 * _S0) + (float)(v166 * _S6);
          float v142 = (float)(v165 * _S4) + (float)(v166 * _S1);
          float v143 = _S6 + _S1;
          LOWORD(_S6) = *(_WORD *)(v59 + 2 * v135);
          float v144 = _S0 + _S4;
          LOWORD(_S4) = *(_WORD *)(v59 + 2 * v140);
          __asm
          {
            FCVT            S6, H6
            FCVT            S4, H4
          }
          float v147 = (float)(v141 + (float)(v44 * _S6)) + v39;
          float v148 = v142 + (float)(v44 * _S4);
          float v149 = _S6 + _S4;
          float v150 = (float)(v167 + (float)(v143 * v164)) + (float)(v144 * v163);
          float v151 = (float)(v167 + (float)(v143 * v161)) + (float)(v144 * v160);
          if (v147 < v39) {
            float v152 = v39;
          }
          else {
            float v152 = v147;
          }
          BOOL v80 = v147 <= v41;
          float v153 = v150 + (float)(v149 * v162);
          if (!v80) {
            float v152 = v41;
          }
          char v154 = llroundf(v152);
          if (v153 < v42) {
            float v155 = v42;
          }
          else {
            float v155 = v150 + (float)(v149 * v162);
          }
          if (v153 > v43) {
            float v155 = v43;
          }
          char v156 = llroundf(v155);
          float v47 = v151 + (float)(v149 * v159);
          if ((float)(v148 + v39) < v39) {
            float v45 = v39;
          }
          else {
            float v45 = v148 + v39;
          }
          *float v72 = v154;
          v72[1] = v156;
          if ((float)(v148 + v39) <= v41) {
            float v157 = v45;
          }
          else {
            float v157 = v41;
          }
          v72[2] = llroundf(v157);
          float v158 = v43;
          if (v47 <= v43)
          {
            float v158 = v47;
            if (v47 < v42) {
              float v158 = v42;
            }
          }
          v72[3] = llroundf(v158);
          float v34 = v91;
          if (v71) {
            *v71++ = 0;
          }
          v68 += 2;
          v69 += 2;
          v72 += 4;
        }
        while (v20 > v68);
      }
      v63 += v27;
      v62 += v28;
      uint64_t result = (void *)((char *)result + v32);
      ++v19;
    }
    while (v19 != v23);
    if (v30 && v18)
    {
      do
      {
        uint64_t result = memcpy(v16, v31, v20);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_yuvsf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  int64x2_t v10 = (void *)result[16];
  unint64_t v11 = result[13] * a2 / v6 + result[15];
  int64x2_t v12 = (uint64_t *)result[17];
  uint64_t v13 = v12[1];
  uint64_t v14 = v10[1];
  uint64_t v15 = (char *)(v14 + v13 * v11 + v9);
  unint64_t v16 = v8 / v6;
  if (v14) {
    uint64_t v17 = (_WORD *)(v14 + v13 * v11 + v9);
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16 != v7)
  {
    uint64_t v18 = 0;
    size_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v7 + *(void *)((char *)result + 44);
    unint64_t v22 = v16 - v7;
    uint64_t v23 = result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = (char *)(v29 + v28 * v21 + v20);
    uint64_t v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    *(float *)&unsigned int v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = (float)LODWORD(a5);
    float v35 = *(float *)&v32 * *(float *)v23;
    float v147 = *(float *)&v32 * *(float *)(v23 + 16);
    float v148 = *(float *)&v32 * *(float *)(v23 + 8);
    float v36 = *(float *)&v32 * *(float *)(v23 + 20);
    float v37 = *(float *)&v32 * *(float *)(v23 + 28);
    LOWORD(v32) = *(_WORD *)(v23 + 144);
    float v38 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 146);
    float v39 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 148);
    float v40 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 150);
    float v41 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 152);
    float v42 = (float)v32;
    float v43 = *(float *)(v23 + 36);
    float v44 = *(float *)(v23 + 40);
    float v45 = *(float *)(v23 + 44);
    float v145 = *(float *)(v23 + 48) * 0.5;
    float v146 = v36;
    float v143 = *(float *)(v23 + 56) * 0.5;
    float v144 = *(float *)(v23 + 52) * 0.5;
    float v46 = *(float *)(v23 + 64);
    float v141 = v46 * 0.5;
    float v142 = *(float *)(v23 + 60) * 0.5;
    float v47 = *(float *)(v23 + 72);
    float v48 = *(float *)(v23 + 68) * 0.5;
    float v140 = v48;
    float v50 = *(float *)(v23 + 76);
    float v49 = *(float *)(v23 + 80);
    float v51 = *(float *)(v23 + 84);
    float v52 = *(float *)(v23 + 88);
    float v53 = *(float *)(v23 + 92);
    float v54 = *(float *)(v23 + 96);
    float v55 = *(float *)(v23 + 100);
    float v56 = *(float *)(v23 + 104);
    uint64_t v57 = v23 + 16548;
    uint64_t v58 = v23 + 164;
    uint64_t v59 = (unsigned char *)(*v10 + v31 * v11 + v9);
    uint64_t v60 = v24[1];
    if (v60) {
      uint64_t result = (void *)(v60 + v27 * v21 + v20);
    }
    else {
      uint64_t result = 0;
    }
    float v61 = (unsigned char *)(*v24 + v26 * v21 + v20);
    do
    {
      if (v19)
      {
        size_t v62 = 0;
        float v63 = v61;
        float v64 = result;
        float v65 = v17;
        float v66 = v59;
        do
        {
          if (v64)
          {
            LOBYTE(v48) = *v64;
            *(float *)&unsigned int v67 = (float)LODWORD(v48);
            float v46 = *(float *)&v67 - v34;
            LOBYTE(v67) = v64[1];
            float v68 = (float)v67 - v34;
            v64 += 2;
            float v69 = v148 * v68;
            float v70 = (float)(v146 * v68) + (float)(v46 * v147);
            float v71 = v37 * v46;
          }
          else
          {
            float v71 = 0.0;
            float v70 = 0.0;
            float v69 = 0.0;
          }
          LOBYTE(v46) = *v63;
          float v72 = v35 * (float)((float)LODWORD(v46) - v33);
          float v73 = v69 + v72;
          BOOL v74 = (float)(v69 + v72) <= 8191.0;
          float v75 = 8191.0;
          if (v74)
          {
            float v75 = v73;
            if (v73 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v70 + v72;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v71 + v72;
          float v79 = 8191.0;
          if ((float)(v71 + v72) <= 8191.0)
          {
            float v79 = v71 + v72;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          if (v64)
          {
            LOBYTE(v78) = *v64;
            *(float *)&unsigned int v80 = (float)LODWORD(v78);
            float v72 = *(float *)&v80 - v34;
            LOBYTE(v80) = v64[1];
            float v81 = (float)v80 - v34;
            v64 += 2;
            float v82 = v148 * v81;
            float v83 = (float)(v146 * v81) + (float)(v72 * v147);
            float v84 = v37 * v72;
          }
          else
          {
            float v84 = 0.0;
            float v83 = 0.0;
            float v82 = 0.0;
          }
          LOBYTE(v72) = v63[1];
          float v85 = v35 * (float)((float)LODWORD(v72) - v33);
          float v86 = 8191.0;
          if ((float)(v82 + v85) <= 8191.0)
          {
            float v86 = v82 + v85;
            if ((float)(v82 + v85) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v83 + v85;
          BOOL v74 = (float)(v83 + v85) <= 8191.0;
          float v88 = 8191.0;
          if (v74)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v84 + v85;
          float v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H4 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          float v105 = (float)((float)(v50 * _S5) + (float)(_S0 * v47)) + (float)(_S24 * v49);
          float v106 = (float)((float)(v52 * _S5) + (float)(_S0 * v51)) + (float)(_S24 * v53);
          _S0 = (float)((float)(v55 * _S5) + (float)(_S0 * v54)) + (float)(_S24 * v56);
          float v108 = (float)(v50 * _S4) + (float)(_S6 * v47);
          float v109 = (float)(v52 * _S4) + (float)(_S6 * v51);
          float v110 = (float)(v55 * _S4) + (float)(_S6 * v54);
          LOWORD(_S6) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _S5 = v108 + (float)(_S6 * v49);
          _S24 = v109 + (float)(_S6 * v53);
          float v114 = v110 + (float)(_S6 * v56);
          LOWORD(_S6) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v105, 0.0), 8191.0)));
          unsigned int v115 = llroundf(fminf(fmaxf(_S0, 0.0), 8191.0));
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S0, H0
          }
          LOWORD(_S5) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S24) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S24, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v120 = llroundf(fminf(fmaxf(v114, 0.0), 8191.0));
          float v121 = (float)(v44 * _S0) + (float)(v43 * _S6);
          float v122 = (float)(v44 * _S24) + (float)(v43 * _S5);
          float v123 = _S6 + _S5;
          LOWORD(_S6) = *(_WORD *)(v57 + 2 * v115);
          float v124 = _S0 + _S24;
          LOWORD(_S24) = *(_WORD *)(v57 + 2 * v120);
          __asm
          {
            FCVT            S6, H6
            FCVT            S24, H24
          }
          float v127 = (float)(v121 + (float)(v45 * _S6)) + v38;
          float v128 = v122 + (float)(v45 * _S24);
          float v129 = _S6 + _S24;
          float v130 = (float)(v39 + (float)(v123 * v145)) + (float)(v124 * v144);
          float v131 = (float)(v39 + (float)(v123 * v142)) + (float)(v124 * v141);
          if (v127 < v38) {
            float v132 = v38;
          }
          else {
            float v132 = v127;
          }
          BOOL v74 = v127 <= v40;
          float v133 = v130 + (float)(v129 * v143);
          if (!v74) {
            float v132 = v40;
          }
          char v134 = llroundf(v132);
          if (v133 < v41) {
            float v135 = v41;
          }
          else {
            float v135 = v130 + (float)(v129 * v143);
          }
          if (v133 <= v42) {
            float v136 = v135;
          }
          else {
            float v136 = v42;
          }
          char v137 = llroundf(v136);
          float v48 = v131 + (float)(v129 * v140);
          if ((float)(v128 + v38) < v38) {
            float v46 = v38;
          }
          else {
            float v46 = v128 + v38;
          }
          *float v66 = v134;
          v66[1] = v137;
          if ((float)(v128 + v38) <= v40) {
            float v138 = v46;
          }
          else {
            float v138 = v40;
          }
          v66[2] = llroundf(v138);
          float v139 = v42;
          if (v48 <= v42)
          {
            float v139 = v48;
            if (v48 < v41) {
              float v139 = v41;
            }
          }
          v66[3] = llroundf(v139);
          if (v65) {
            *v65++ = 0;
          }
          v62 += 2;
          v63 += 2;
          v66 += 4;
        }
        while (v19 > v62);
      }
      v61 += v26;
      uint64_t result = (void *)((char *)result + v27);
      v59 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      do
      {
        uint64_t result = memcpy(v15, v30, v19);
        v30 += v28;
        v15 += v13;
        --v22;
      }
      while (v22);
    }
    else if (v17)
    {
      do
      {
        if (v19) {
          uint64_t result = memset(v15, 255, v19);
        }
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_yuvsf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v15 = *(void *)(result + 28);
  unint64_t v16 = *result;
  unint64_t v17 = v15 * a2 / v16;
  uint64_t v18 = *((void *)result + 14);
  uint64_t v19 = (void *)*((void *)result + 16);
  unint64_t v20 = *((void *)result + 13) * a2 / v16 + *((void *)result + 15);
  long long v21 = (uint64_t *)*((void *)result + 17);
  uint64_t v22 = v21[1];
  uint64_t v23 = v19[1];
  uint64_t v24 = (char *)(v23 + v22 * v20 + v18);
  unint64_t v25 = (v15 + v15 * a2) / v16;
  if (v23) {
    uint64_t v26 = (_WORD *)(v23 + v22 * v20 + v18);
  }
  else {
    uint64_t v26 = 0;
  }
  if (v25 == v17) {
    return result;
  }
  uint64_t v27 = 0;
  size_t v28 = *(void *)(result + 20);
  uint64_t v29 = *(void *)(result + 36);
  unint64_t v30 = v17 + *(void *)(result + 44);
  unint64_t v31 = v25 - v17;
  uint64_t v32 = *((void *)result + 19);
  float v33 = (void *)*((void *)result + 7);
  float v34 = (uint64_t *)*((void *)result + 8);
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  uint64_t v37 = v34[2];
  uint64_t v38 = v33[2];
  LOWORD(a6) = *(_WORD *)(v32 + 140);
  LOWORD(a7) = *(_WORD *)(v32 + 142);
  float v39 = (float)*(unsigned int *)(v32 + 136) / (float)*(unsigned int *)(v32 + 128);
  LOWORD(v9) = *(_WORD *)(v32 + 144);
  LOWORD(v10) = *(_WORD *)(v32 + 146);
  LOWORD(v11) = *(_WORD *)(v32 + 148);
  LOWORD(v12) = *(_WORD *)(v32 + 150);
  LOWORD(v13) = *(_WORD *)(v32 + 152);
  float v40 = *(float *)(v32 + 36);
  float v41 = *(float *)(v32 + 40);
  float v42 = *(float *)(v32 + 44);
  float v43 = (char *)(v38 + v37 * v30 + v29);
  uint64_t v44 = *v21;
  float v45 = (float)LODWORD(a6);
  float v46 = (float)LODWORD(a7);
  float v47 = v39 * *(float *)v32;
  float v48 = v39 * *(float *)(v32 + 8);
  float v49 = v39 * *(float *)(v32 + 16);
  float v50 = v39 * *(float *)(v32 + 20);
  float v51 = v39 * *(float *)(v32 + 28);
  float v52 = (float)v9;
  float v53 = (float)v10;
  float v54 = (float)v11;
  float v55 = (float)v12;
  float v56 = (float)v13;
  float v57 = 0.5;
  float v58 = *(float *)(v32 + 48) * 0.5;
  float v59 = *(float *)(v32 + 52) * 0.5;
  float v60 = *(float *)(v32 + 56) * 0.5;
  float v61 = *(float *)(v32 + 60) * 0.5;
  float v62 = *(float *)(v32 + 64) * 0.5;
  float v63 = *(float *)(v32 + 68) * 0.5;
  float v64 = (unsigned char *)(*v19 + v44 * v20 + v18);
  uint64_t v65 = v33[1];
  uint64_t result = (unsigned __int8 *)(v65 + v36 * v30 + v29);
  if (v65) {
    float v66 = (unsigned char *)(v65 + v36 * v30 + v29);
  }
  else {
    float v66 = 0;
  }
  unsigned int v67 = (unsigned __int8 *)(*v33 + v35 * v30 + v29);
  do
  {
    if (v28)
    {
      size_t v68 = 0;
      uint64_t result = v67;
      float v69 = v66;
      float v70 = v26;
      float v71 = v64;
      while (1)
      {
        float v72 = 0.0;
        if (!v69) {
          break;
        }
        LOBYTE(v57) = *v69;
        float v73 = (float)LODWORD(v57) - v46;
        LOBYTE(v14) = v69[1];
        float v74 = (float)v14 - v46;
        v69 += 2;
        float v75 = v48 * v74;
        float v76 = (float)(v50 * v74) + (float)(v73 * v49);
        float v77 = v51 * v73;
        if (!v69) {
          goto LABEL_15;
        }
        LOBYTE(v72) = *v69;
        float v78 = (float)LODWORD(v72) - v46;
        LOBYTE(v7) = v69[1];
        float v79 = (float)LODWORD(v7) - v46;
        v69 += 2;
        float v80 = v48 * v79;
        float v81 = (float)(v50 * v79) + (float)(v78 * v49);
        float v72 = v51 * v78;
LABEL_16:
        LOBYTE(v8) = *result;
        *(float *)&unsigned int v82 = v47 * (float)((float)LODWORD(v8) - v45);
        float v83 = v75 + *(float *)&v82;
        float v84 = v76 + *(float *)&v82;
        float v85 = v77 + *(float *)&v82;
        LOBYTE(v82) = result[1];
        float v86 = v47 * (float)((float)v82 - v45);
        float v87 = v80 + v86;
        float v88 = v81 + v86;
        float v89 = v72 + v86;
        float v8 = (float)((float)((float)(v41 * v84) + (float)(v40 * v83)) + (float)(v42 * v85)) + v52;
        float v90 = (float)((float)((float)(v41 * v88) + (float)(v40 * v87)) + (float)(v42 * v89)) + v52;
        float v91 = v83 + v87;
        float v92 = v84 + v88;
        float v7 = (float)(v53 + (float)(v91 * v58)) + (float)(v92 * v59);
        float v93 = v85 + v89;
        float v94 = v7 + (float)(v93 * v60);
        float v95 = (float)(v53 + (float)(v91 * v61)) + (float)(v92 * v62);
        if (v8 < v52) {
          float v96 = v52;
        }
        else {
          float v96 = v8;
        }
        if (v8 > v54) {
          float v96 = v54;
        }
        float v97 = v95 + (float)(v93 * v63);
        *float v71 = llroundf(v96);
        if (v94 < v55) {
          *(float *)&unsigned int v14 = v55;
        }
        else {
          *(float *)&unsigned int v14 = v94;
        }
        if (v94 <= v56) {
          float v98 = *(float *)&v14;
        }
        else {
          float v98 = v56;
        }
        v71[1] = llroundf(v98);
        if (v90 < v52) {
          float v99 = v52;
        }
        else {
          float v99 = v90;
        }
        if (v90 > v54) {
          float v99 = v54;
        }
        v71[2] = llroundf(v99);
        float v57 = v56;
        if (v97 <= v56)
        {
          float v57 = v97;
          if (v97 < v55) {
            float v57 = v55;
          }
        }
        v71[3] = llroundf(v57);
        if (v70) {
          *v70++ = 0;
        }
        v68 += 2;
        result += 2;
        v71 += 4;
        if (v28 <= v68) {
          goto LABEL_38;
        }
      }
      float v77 = 0.0;
      float v76 = 0.0;
      float v75 = 0.0;
LABEL_15:
      float v81 = 0.0;
      float v80 = 0.0;
      goto LABEL_16;
    }
LABEL_38:
    v67 += v35;
    v66 += v36;
    v64 += v44;
    ++v27;
  }
  while (v27 != v31);
  if (v38 && v26)
  {
    do
    {
      uint64_t result = (unsigned __int8 *)memcpy(v24, v43, v28);
      v43 += v37;
      v24 += v22;
      --v31;
    }
    while (v31);
  }
  else if (v26)
  {
    do
    {
      if (v28) {
        uint64_t result = (unsigned __int8 *)memset(v24, 255, v28);
      }
      v24 += v22;
      --v31;
    }
    while (v31);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD(unint64_t result, uint64_t a2, double a3, double a4, double a5, double a6, int16x4_t a7, double a8, double a9)
{
  uint64_t v12 = *(void *)(result + 28);
  unint64_t v13 = *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(result + 36);
    unint64_t v18 = v14 + *(void *)(result + 44);
    unint64_t v19 = v15 - v14;
    uint64_t v20 = *(void *)(result + 112);
    uint64_t v21 = *(void *)(result + 152);
    size_t v22 = *(uint64_t **)(result + 56);
    uint64_t v23 = *(uint64_t **)(result + 64);
    uint64_t v24 = *(void **)(result + 128);
    unint64_t v25 = *(uint64_t **)(result + 136);
    unsigned int v26 = *(unsigned __int16 *)(v21 + 140);
    unsigned int v27 = *(unsigned __int16 *)(v21 + 142);
    unint64_t v28 = *(void *)(result + 104) * a2 / v13 + *(void *)(result + 120);
    uint64_t v253 = v23[2];
    uint64_t v254 = v25[2];
    uint64_t v255 = v24[2];
    uint64_t v256 = v22[2];
    uint64_t v29 = (unsigned __int8 *)(v256 + v253 * v18 + v17);
    uint64_t v30 = (char *)(v255 + v254 * v28 + 2 * v20);
    v9.i32[0] = *(_DWORD *)v21;
    unsigned int v31 = *(unsigned __int16 *)(v21 + 144);
    unsigned int v32 = *(unsigned __int16 *)(v21 + 146);
    unsigned int v33 = *(unsigned __int16 *)(v21 + 148);
    float v34 = (float)v26;
    *(short float *)v10.i16 = (short float)v26;
    unsigned int v35 = *(unsigned __int16 *)(v21 + 150);
    _S30 = *(float *)(v21 + 44);
    float v37 = (float)v27;
    short float v38 = (short float)v27;
    unsigned int v42 = *(unsigned __int16 *)(v21 + 152);
    float v43 = (float)v31;
    *(short float *)a7.i16 = (short float)v31;
    uint64_t v44 = v21 + 16548;
    float v298 = (float)v32;
    float v299 = _S30;
    float v45 = 8191.0 / (float)*(unsigned int *)(v21 + 128);
    _S12 = v45 * *(float *)v21;
    _S31 = v45 * *(float *)(v21 + 8);
    _S13 = v45 * *(float *)(v21 + 16);
    _S14 = v45 * *(float *)(v21 + 20);
    float v50 = (float)v33;
    _S15 = v45 * *(float *)(v21 + 28);
    *(float *)&a9 = (float)v35;
    float v303 = (float)v35;
    float v52 = (float)v42;
    *(short float *)&a9 = (short float)v33;
    uint64_t v53 = v21 + 164;
    int16x8_t v54 = vdupq_lane_s16(*(int16x4_t *)v10.f32, 0);
    float16x8_t v297 = (float16x8_t)v54;
    *(short float *)v54.i16 = -v38;
    int16x8_t v55 = vdupq_lane_s16(*(int16x4_t *)v54.i8, 0);
    float16x8_t v263 = (float16x8_t)v55;
    *(short float *)v55.i16 = (short float)v35;
    *(short float *)v9.i16 = (short float)v42;
    unsigned int v56 = *(unsigned __int8 *)(v21 + 132);
    unsigned __int8 v57 = 16 - v56;
    if (v56 >= 0x11) {
      unsigned __int8 v57 = 0;
    }
    uint64_t v58 = v24[1];
    uint64_t v257 = v25[1];
    uint64_t v258 = *v25;
    uint64_t v59 = *v24 + *v25 * v28;
    v39.i32[1] = *(_DWORD *)(v21 + 60);
    v39.i32[0] = *(_DWORD *)(v21 + 48);
    *(float32x2_t *)v10.f32 = vmul_f32(v39, (float32x2_t)0x3F0000003F000000);
    float32x4_t v60 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v296 = (float16x8_t)v60;
    v40.i32[1] = *(_DWORD *)(v21 + 64);
    v40.i32[0] = *(_DWORD *)(v21 + 52);
    *(float32x2_t *)v60.f32 = vmul_f32(v40, (float32x2_t)0x3F0000003F000000);
    float32x4_t v61 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v60), 0);
    float16x8_t v294 = (float16x8_t)v61;
    v41.i32[1] = *(_DWORD *)(v21 + 68);
    v41.i32[0] = *(_DWORD *)(v21 + 56);
    *(float32x2_t *)v61.f32 = vmul_f32(v41, (float32x2_t)0x3F0000003F000000);
    float16x8_t v292 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v61), 0);
    float16x8_t v291 = (float16x8_t)vdupq_lane_s16(a7, 0);
    float16x8_t v289 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    *(short float *)v11.i16 = (short float)v32;
    float16x8_t v290 = (float16x8_t)vdupq_lane_s16(v11, 0);
    float16x8_t v287 = (float16x8_t)vdupq_lane_s16(v9, 0);
    float16x8_t v288 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v55.i8, 0);
    uint64_t v62 = v21 + 32932;
    uint64_t v63 = v58 + v257 * v28 + 2 * v20;
    if (!v58) {
      uint64_t v63 = 0;
    }
    float v64 = (uint16x8_t *)(v59 + 2 * v20);
    uint64_t v66 = *v22;
    uint64_t v65 = v22[1];
    uint64_t v67 = v23[1];
    uint64_t v68 = v65 + v67 * v18 + v17;
    if (!v65) {
      uint64_t v68 = 0;
    }
    uint64_t v69 = *v23;
    float v70 = (int8x8_t *)(v66 + *v23 * v18 + v17);
    unint64_t v71 = *(void *)(result + 20);
    uint64_t result = (v71 - 7);
    _S6 = *(float *)(v21 + 72);
    _S22 = *(float *)(v21 + 80);
    _S17 = *(float *)(v21 + 84);
    _Q23.i32[0] = *(_DWORD *)(v21 + 88);
    _S24 = *(float *)(v21 + 92);
    _S8 = *(float *)(v21 + 108);
    _S9 = *(float *)(v21 + 112);
    __asm { FCVT            H7, S12 }
    float v300 = _S15;
    __asm { FCVT            H15, S15 }
    short float v262 = _H15;
    float v302 = _S13;
    __asm { FCVT            H13, S13 }
    short float v261 = _H13;
    float v301 = _S14;
    __asm { FCVT            H13, S14 }
    short float v260 = _H13;
    __asm { FCVT            H13, S31 }
    short float v259 = _H13;
    float v306 = *(float *)(v21 + 36);
    __asm { FCVT            H0, S0 }
    short float v281 = _H0;
    float v305 = *(float *)(v21 + 40);
    __asm { FCVT            H0, S4 }
    short float v280 = _H0;
    __asm { FCVT            H0, S30 }
    short float v279 = _H0;
    __asm { FCVT            H0, S8 }
    short float v278 = _H0;
    __asm { FCVT            H0, S9 }
    short float v277 = _H0;
    float v304 = *(float *)(v21 + 116);
    __asm { FCVT            H0, S25 }
    short float v276 = _H0;
    _S27 = *(float *)(v21 + 120);
    __asm { FCVT            H0, S10 }
    short float v275 = _H0;
    float v286 = _S6;
    __asm { FCVT            H0, S6 }
    short float v274 = _H0;
    float v285 = *(float *)(v21 + 76);
    __asm { FCVT            H0, S16 }
    short float v273 = _H0;
    __asm { FCVT            H0, S22 }
    short float v272 = _H0;
    __asm { FCVT            H0, S17 }
    short float v271 = _H0;
    __asm { FCVT            H0, S23 }
    short float v270 = _H0;
    __asm { FCVT            H0, S24 }
    short float v269 = _H0;
    float v284 = *(float *)(v21 + 96);
    __asm { FCVT            H0, S26 }
    short float v268 = _H0;
    float v283 = *(float *)(v21 + 100);
    __asm { FCVT            H0, S29 }
    short float v267 = _H0;
    float v282 = *(float *)(v21 + 104);
    __asm { FCVT            H0, S28 }
    short float v266 = _H0;
    uint64_t v105 = v10.i64[0];
    float v295 = v60.f32[0];
    v106.i32[0] = v61.i32[1];
    float v264 = v61.f32[1];
    float v293 = v61.f32[0];
    float v265 = v60.f32[1];
    v107.i64[0] = 0x9000900090009000;
    v107.i64[1] = 0x9000900090009000;
    uint16x8_t v108 = (uint16x8_t)vdupq_n_s16(v57);
    float v109 = _S22;
    float v110 = *(float *)_Q23.i32;
    do
    {
      if ((int)v71 < 8)
      {
        unint64_t v170 = 0;
        unsigned int v115 = (uint16x8_t *)v63;
        float v114 = v64;
        uint64_t v113 = v68;
        float v112 = v70;
      }
      else
      {
        int v111 = 0;
        float v112 = v70;
        uint64_t v113 = v68;
        float v114 = v64;
        unsigned int v115 = (uint16x8_t *)v63;
        do
        {
          if (v113)
          {
            int8x8x2_t v307 = vld2_s8((const char *)v113);
            v113 += 16;
            *(int8x8_t *)v116.i8 = vzip1_s8(v307.val[0], 0);
            v116.u64[1] = (unint64_t)vzip2_s8(v307.val[0], 0);
            *(int8x8_t *)v117.i8 = vzip1_s8(v307.val[1], 0);
            v117.u64[1] = (unint64_t)vzip2_s8(v307.val[1], 0);
            float16x8_t v118 = vaddq_f16(v263, vcvtq_f16_u16(v116));
            float16x8_t v119 = vaddq_f16(v263, vcvtq_f16_u16(v117));
            float16x8_t v120 = vmulq_n_f16(v119, v259);
            float16x8_t v121 = vmlaq_n_f16(vmulq_n_f16(v118, v261), v119, v260);
            float16x8_t v122 = vmulq_n_f16(v118, v262);
          }
          else
          {
            float16x8_t v122 = 0uLL;
            float16x8_t v121 = 0uLL;
            float16x8_t v120 = 0uLL;
          }
          int8x8_t v123 = *v112++;
          *(int8x8_t *)v124.i8 = vzip1_s8(v123, 0);
          v124.u64[1] = (unint64_t)vzip2_s8(v123, 0);
          float16x8_t v125 = vsubq_f16(vcvtq_f16_u16(v124), v297);
          float16x8_t v126 = vmlaq_n_f16(v121, v125, _H7);
          float16x8_t v127 = vmlaq_n_f16(v122, v125, _H7);
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v120, v125, _H7), (float16x8_t)0), v107));
          uint32x4_t v129 = vmovl_high_u16(v128);
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v128.i8);
          v131.i16[0] = *(_WORD *)(v53 + 2 * v130.u32[0]);
          v131.i16[1] = *(_WORD *)(v53 + 2 * v130.u32[1]);
          v131.i16[2] = *(_WORD *)(v53 + 2 * v130.u32[2]);
          v131.i16[3] = *(_WORD *)(v53 + 2 * v130.u32[3]);
          v131.i16[4] = *(_WORD *)(v53 + 2 * v129.u32[0]);
          v131.i16[5] = *(_WORD *)(v53 + 2 * v129.u32[1]);
          v131.i16[6] = *(_WORD *)(v53 + 2 * v129.u32[2]);
          v131.i16[7] = *(_WORD *)(v53 + 2 * v129.u32[3]);
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, (float16x8_t)0), v107));
          float16x8_t v133 = (float16x8_t)vmovl_high_u16(v132);
          *(void *)&long long v134 = v133.u32[2];
          *((void *)&v134 + 1) = v133.u32[3];
          long long v135 = v134;
          *(void *)&long long v134 = v133.u32[0];
          *((void *)&v134 + 1) = v133.u32[1];
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v132.i8);
          v133.i16[0] = *(_WORD *)(v53 + 2 * v136.u32[0]);
          v133.i16[1] = *(_WORD *)(v53 + 2 * v136.u32[1]);
          v133.i16[2] = *(_WORD *)(v53 + 2 * v136.u32[2]);
          v133.i16[3] = *(_WORD *)(v53 + 2 * v136.u32[3]);
          v133.i16[4] = *(_WORD *)(v53 + 2 * v134);
          v133.i16[5] = *(_WORD *)(v53 + 2 * *((void *)&v134 + 1));
          v133.i16[6] = *(_WORD *)(v53 + 2 * v135);
          v133.i16[7] = *(_WORD *)(v53 + 2 * *((void *)&v135 + 1));
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, (float16x8_t)0), v107));
          uint32x4_t v138 = vmovl_high_u16(v137);
          float16x8_t v139 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v137.i8);
          v139.i16[0] = *(_WORD *)(v53 + 2 * v139.u32[0]);
          v139.i16[1] = *(_WORD *)(v53 + 2 * v139.u32[1]);
          v139.i16[2] = *(_WORD *)(v53 + 2 * v139.u32[2]);
          v139.i16[3] = *(_WORD *)(v53 + 2 * v139.u32[3]);
          v139.i16[4] = *(_WORD *)(v53 + 2 * v138.u32[0]);
          v139.i16[5] = *(_WORD *)(v53 + 2 * v138.u32[1]);
          v139.i16[6] = *(_WORD *)(v53 + 2 * v138.u32[2]);
          v139.i16[7] = *(_WORD *)(v53 + 2 * v138.u32[3]);
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v131, v278), v133, v277), v139, v276), vmaxq_f16(vmaxq_f16(v131, v133), v139), v275), (float16x8_t)0), v107));
          uint32x4_t v141 = vmovl_high_u16(v140);
          float16x8_t v142 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v140.i8);
          v142.i16[0] = *(_WORD *)(v44 + 2 * v142.u32[0]);
          v142.i16[1] = *(_WORD *)(v44 + 2 * v142.u32[1]);
          v142.i16[2] = *(_WORD *)(v44 + 2 * v142.u32[2]);
          v142.i16[3] = *(_WORD *)(v44 + 2 * v142.u32[3]);
          v142.i16[4] = *(_WORD *)(v44 + 2 * v141.u32[0]);
          v142.i16[5] = *(_WORD *)(v44 + 2 * v141.u32[1]);
          v142.i16[6] = *(_WORD *)(v44 + 2 * v141.u32[2]);
          v142.i16[7] = *(_WORD *)(v44 + 2 * v141.u32[3]);
          float16x8_t v143 = vmulq_f16(v131, v142);
          float16x8_t v144 = vmulq_f16(v133, v142);
          float16x8_t v145 = vmulq_f16(v139, v142);
          float16x8_t v146 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v143, v271), v144, v270), v145, v269);
          float16x8_t v147 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v145, v266), v144, v267), v143, v268);
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v143, v274), v144, v273), v145, v272), (float16x8_t)0), v107));
          uint32x4_t v149 = vmovl_high_u16(v148);
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v148.i8);
          v131.i16[0] = *(_WORD *)(v62 + 2 * v150.u32[0]);
          v131.i16[1] = *(_WORD *)(v62 + 2 * v150.u32[1]);
          v131.i16[2] = *(_WORD *)(v62 + 2 * v150.u32[2]);
          v131.i16[3] = *(_WORD *)(v62 + 2 * v150.u32[3]);
          v131.i16[4] = *(_WORD *)(v62 + 2 * v149.u32[0]);
          v131.i16[5] = *(_WORD *)(v62 + 2 * v149.u32[1]);
          v131.i16[6] = *(_WORD *)(v62 + 2 * v149.u32[2]);
          float16x8_t v151 = v131;
          v151.i16[7] = *(_WORD *)(v62 + 2 * v149.u32[3]);
          uint16x8_t v152 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v146, (float16x8_t)0), v107));
          uint32x4_t v153 = vmovl_high_u16(v152);
          uint32x4_t v154 = vmovl_u16(*(uint16x4_t *)v152.i8);
          v144.i16[7] = (unint64_t)v154.u32[1] >> 48;
          v144.i16[0] = *(_WORD *)(v62 + 2 * v154.u32[0]);
          uint64_t v155 = v153.u32[3];
          v144.i16[1] = *(_WORD *)(v62 + 2 * v154.u32[1]);
          v144.i16[2] = *(_WORD *)(v62 + 2 * v154.u32[2]);
          v144.i16[3] = *(_WORD *)(v62 + 2 * v154.u32[3]);
          v144.i16[4] = *(_WORD *)(v62 + 2 * v153.u32[0]);
          v144.i16[5] = *(_WORD *)(v62 + 2 * v153.u32[1]);
          v144.i16[6] = *(_WORD *)(v62 + 2 * v153.u32[2]);
          uint16x8_t v156 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v147, (float16x8_t)0), v107));
          uint32x4_t v157 = vmovl_u16(*(uint16x4_t *)v156.i8);
          uint64_t v158 = v157.u32[1];
          uint64_t v159 = v157.u32[0];
          float16x8_t v160 = v144;
          v160.i16[7] = *(_WORD *)(v62 + 2 * v155);
          int16x8_t v161 = (int16x8_t)vmovl_high_u16(v156);
          uint64_t v162 = v157.u32[3];
          uint64_t v163 = v157.u32[2];
          *(void *)&long long v134 = v161.u32[2];
          *((void *)&v134 + 1) = v161.u32[3];
          long long v164 = v134;
          *(void *)&long long v134 = v161.u32[0];
          v161.i16[7] = (unint64_t)v161.u32[1] >> 48;
          v161.i16[0] = *(_WORD *)(v62 + 2 * v159);
          float v165 = (__int16 *)(v62 + 2 * v161.u32[1]);
          v161.i16[1] = *(_WORD *)(v62 + 2 * v158);
          v161.i16[2] = *(_WORD *)(v62 + 2 * v163);
          v161.i16[3] = *(_WORD *)(v62 + 2 * v162);
          v161.i16[4] = *(_WORD *)(v62 + 2 * v134);
          v161.i16[5] = *v165;
          v161.i16[6] = *(_WORD *)(v62 + 2 * v164);
          float v166 = (__int16 *)(v62 + 2 * *((void *)&v164 + 1));
          float16x8_t v167 = (float16x8_t)v161;
          v167.i16[7] = *v166;
          float16x8_t v168 = (float16x8_t)vuzp1q_s16((int16x8_t)v131, (int16x8_t)v144);
          _Q23 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v291, v151, v281), v160, v280), v167, v279), v291), v289)), v108);
          *v114++ = _Q23;
          int16x8_t v169 = (int16x8_t)vaddq_f16(v168, (float16x8_t)vuzp2q_s16((int16x8_t)v151, (int16x8_t)v160));
          _S6 = *(float *)v294.i32;
          uint16x8_t v106 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v290, v296, (float16x8_t)vzip1q_s16(v169, v169)), v294, (float16x8_t)vzip2q_s16(v169, v169)), v292, vaddq_f16((float16x8_t)vtrn1q_s16(v161, v161), (float16x8_t)vtrn2q_s16((int16x8_t)v167, (int16x8_t)v167))), v288), v287)), v108);
          *v115++ = v106;
          v111 += 8;
        }
        while (v111 < (int)result);
        unint64_t v170 = v71 & 0xFFFFFFF8;
      }
      while (v71 > v170)
      {
        if (v113)
        {
          v106.i8[0] = *(unsigned char *)v113;
          *(float *)&unsigned int v171 = (float)v106.u32[0];
          float v172 = *(float *)&v171 - v37;
          LOBYTE(v171) = *(unsigned char *)(v113 + 1);
          float v173 = (float)v171 - v37;
          v113 += 2;
          float v174 = _S31 * v173;
          *(float *)v106.i32 = (float)(v301 * v173) + (float)(v172 * v302);
          _S6 = v300;
          float v175 = v300 * v172;
        }
        else
        {
          float v175 = 0.0;
          v106.i32[0] = 0;
          float v174 = 0.0;
        }
        LOBYTE(_S6) = v112->i8[0];
        float v176 = _S12 * (float)((float)LODWORD(_S6) - v34);
        float v177 = v174 + v176;
        BOOL v178 = (float)(v174 + v176) <= 8191.0;
        float v179 = 8191.0;
        if (v178)
        {
          float v179 = v177;
          if (v177 < 0.0) {
            float v179 = 0.0;
          }
        }
        float v180 = *(float *)v106.i32 + v176;
        BOOL v178 = (float)(*(float *)v106.i32 + v176) <= 8191.0;
        float v181 = 8191.0;
        if (v178)
        {
          float v181 = v180;
          if (v180 < 0.0) {
            float v181 = 0.0;
          }
        }
        float v182 = v175 + v176;
        float v183 = 8191.0;
        if (v182 <= 8191.0)
        {
          float v183 = v182;
          if (v182 < 0.0) {
            float v183 = 0.0;
          }
        }
        if (v113)
        {
          LOBYTE(v182) = *(unsigned char *)v113;
          *(float *)&unsigned int v184 = (float)LODWORD(v182);
          float v185 = *(float *)&v184 - v37;
          LOBYTE(v184) = *(unsigned char *)(v113 + 1);
          float v186 = (float)v184 - v37;
          v113 += 2;
          float v187 = _S31 * v186;
          *(float *)_Q23.i32 = v301 * v186;
          float v188 = *(float *)_Q23.i32 + (float)(v185 * v302);
          float v189 = v300 * v185;
        }
        else
        {
          float v189 = 0.0;
          float v188 = 0.0;
          float v187 = 0.0;
        }
        _Q23.i8[0] = v112->i8[1];
        float v190 = v34;
        float v191 = _S12;
        float v192 = _S12 * (float)((float)_Q23.u32[0] - v34);
        float v193 = v187 + v192;
        BOOL v178 = (float)(v187 + v192) <= 8191.0;
        float v194 = 8191.0;
        if (v178)
        {
          float v194 = v193;
          if (v193 < 0.0) {
            float v194 = 0.0;
          }
        }
        float v195 = v188 + v192;
        BOOL v178 = (float)(v188 + v192) <= 8191.0;
        float v196 = 8191.0;
        if (v178)
        {
          float v196 = v195;
          if (v195 < 0.0) {
            float v196 = 0.0;
          }
        }
        float v197 = v189 + v192;
        float v198 = 8191.0;
        if (v197 <= 8191.0)
        {
          float v198 = v197;
          if (v197 < 0.0) {
            float v198 = 0.0;
          }
        }
        _H5 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H0 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v181, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H20 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v183, 0.0), 8191.0)));
        __asm { FCVT            S20, H20 }
        _H4 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0)));
        _H30 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v196, 0.0), 8191.0)));
        _H11 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v198, 0.0), 8191.0)));
        float v208 = (float)((float)((float)(_S9 * _S0) + (float)(_S8 * _S5)) + (float)(v304 * _S20))
             + (float)(_S27 * fmaxf(_S5, fmaxf(_S0, _S20)));
        float v209 = 8191.0;
        if (v208 <= 8191.0)
        {
          float v209 = v208;
          if (v208 < 0.0) {
            float v209 = 0.0;
          }
        }
        __asm
        {
          FCVT            S4, H4
          FCVT            S6, H30
          FCVT            S30, H11
        }
        _H11 = *(_WORD *)(v44 + 2 * llroundf(v209));
        float v214 = (float)((float)((float)(_S9 * _S6) + (float)(_S8 * _S4)) + (float)(v304 * _S30))
             + (float)(_S27 * fmaxf(_S4, fmaxf(_S6, _S30)));
        float v215 = 8191.0;
        if (v214 <= 8191.0)
        {
          float v215 = v214;
          if (v214 < 0.0) {
            float v215 = 0.0;
          }
        }
        __asm { FCVT            S11, H11 }
        float v217 = _S5 * _S11;
        _S0 = _S0 * _S11;
        float v219 = _S20 * _S11;
        LOWORD(_S11) = *(_WORD *)(v44 + 2 * llroundf(v215));
        __asm { FCVT            S11, H11 }
        _S4 = _S4 * _S11;
        float v222 = _S6 * _S11;
        float v223 = _S30 * _S11;
        float v224 = (float)((float)(v285 * _S0) + (float)(v217 * v286)) + (float)(v219 * v109);
        float v225 = (float)((float)(v110 * _S0) + (float)(v217 * _S17)) + (float)(v219 * _S24);
        float v226 = (float)((float)(v283 * _S0) + (float)(v217 * v284)) + (float)(v219 * v282);
        float v227 = (float)((float)(v285 * v222) + (float)(_S4 * v286)) + (float)(v223 * v109);
        float v228 = (float)((float)(v110 * v222) + (float)(_S4 * _S17)) + (float)(v223 * _S24);
        float v229 = (float)((float)(v283 * v222) + (float)(_S4 * v284)) + (float)(v223 * v282);
        LOWORD(_S0) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v224, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        LOWORD(_S4) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0)));
        __asm { FCVT            S5, H4 }
        LOWORD(_S4) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v226, 0.0), 8191.0)));
        __asm { FCVT            S20, H4 }
        _H4 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v227, 0.0), 8191.0)));
        _H6 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0)));
        _H30 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0)));
        float v236 = (float)((float)((float)(v305 * _S5) + (float)(v306 * _S0)) + (float)(v299 * _S20)) + v43;
        float v237 = v50;
        if (v236 <= v50)
        {
          float v237 = (float)((float)((float)(v305 * _S5) + (float)(v306 * _S0)) + (float)(v299 * _S20)) + v43;
          if (v236 < v43) {
            float v237 = v43;
          }
        }
        __asm
        {
          FCVT            S23, H4
          FCVT            S6, H6
          FCVT            S4, H30
        }
        float v241 = (float)((float)((float)(v305 * _S6) + (float)(v306 * _S23)) + (float)(v299 * _S4)) + v43;
        v114->i16[0] = llroundf(v237) << v57;
        float v242 = v50;
        if (v241 <= v50)
        {
          float v242 = (float)((float)((float)(v305 * _S6) + (float)(v306 * _S23)) + (float)(v299 * _S4)) + v43;
          if (v241 < v43) {
            float v242 = v43;
          }
        }
        v114->i16[1] = llroundf(v242) << v57;
        float v243 = _S0 + _S23;
        *(float *)_Q23.i32 = v298 + (float)(v243 * *(float *)&v105);
        float v244 = _S5 + _S6;
        float v245 = _S20 + _S4;
        float v246 = (float)(*(float *)_Q23.i32 + (float)(v244 * v295)) + (float)(v245 * v293);
        _S6 = v52;
        _S12 = v191;
        if (v246 <= v52)
        {
          _S6 = (float)(*(float *)_Q23.i32 + (float)(v244 * v295)) + (float)(v245 * v293);
          if (v246 < v303) {
            _S6 = v303;
          }
        }
        *(float *)v106.i32 = (float)((float)(v298 + (float)(v243 * *((float *)&v105 + 1))) + (float)(v244 * v265))
                           + (float)(v245 * v264);
        v115->i16[0] = llroundf(_S6) << v57;
        float v247 = v52;
        float v34 = v190;
        if (*(float *)v106.i32 <= v52)
        {
          float v247 = *(float *)v106.i32;
          if (*(float *)v106.i32 < v303) {
            float v247 = v303;
          }
        }
        v170 += 2;
        v115->i16[1] = llroundf(v247) << v57;
        float v112 = (int8x8_t *)((char *)v112 + 2);
        float v114 = (uint16x8_t *)((char *)v114 + 4);
        unsigned int v115 = (uint16x8_t *)((char *)v115 + 4);
      }
      float v70 = (int8x8_t *)((char *)v70 + v69);
      v68 += v67;
      float v64 = (uint16x8_t *)((char *)v64 + v258);
      v63 += v257;
      ++v16;
    }
    while (v16 != v19);
    if (v256 && v255)
    {
      uint64_t v248 = 0;
      do
      {
        if (v71)
        {
          unint64_t v249 = v71;
          float v250 = v30;
          float v251 = v29;
          do
          {
            __int16 v252 = *v251++;
            *v250++ = v252 | (v252 << 8);
            --v249;
          }
          while (v249);
        }
        v29 += v253;
        v30 += v254;
        ++v248;
      }
      while (v248 != v19);
    }
    else if (v255)
    {
      do
      {
        if (v71) {
          uint64_t result = (unint64_t)memset(v30, 255, 2 * v71);
        }
        v30 += v254;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (void *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    unint64_t v25 = (unsigned __int8 *)(v24 + v23 * v12 + v11);
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (char *)(v29 + v28 * v16 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a4);
    float v33 = (float)LODWORD(a5);
    float v34 = v31 * *(float *)v17;
    float v173 = v31 * *(float *)(v17 + 16);
    float v174 = v31 * *(float *)(v17 + 8);
    float v35 = v31 * *(float *)(v17 + 20);
    *(float *)&unsigned int v36 = v31 * *(float *)(v17 + 28);
    float v171 = *(float *)&v36;
    float v172 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    float v40 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 152);
    float v41 = (float)v36;
    float v42 = *(float *)(v17 + 36);
    float v175 = v40;
    float v176 = *(float *)(v17 + 40);
    float v43 = *(float *)(v17 + 44);
    float v169 = *(float *)(v17 + 48) * 0.5;
    float v170 = v38;
    float v167 = *(float *)(v17 + 56) * 0.5;
    float v168 = *(float *)(v17 + 52) * 0.5;
    float v165 = *(float *)(v17 + 64) * 0.5;
    float v166 = *(float *)(v17 + 60) * 0.5;
    float v163 = *(float *)(v17 + 68) * 0.5;
    float v164 = *(float *)(v17 + 72);
    float v44 = *(float *)(v17 + 76);
    float v45 = *(float *)(v17 + 80);
    float v46 = *(float *)(v17 + 84);
    float v161 = v45;
    float v162 = v44;
    float v47 = *(float *)(v17 + 88);
    float v48 = *(float *)(v17 + 92);
    float v49 = *(float *)(v17 + 96);
    float v50 = *(float *)(v17 + 100);
    float v51 = *(float *)(v17 + 104);
    uint64_t result = (void *)(v17 + 164);
    uint64_t v52 = v17 + 16548;
    unsigned int v53 = *(unsigned __int8 *)(v17 + 132);
    if (v53 >= 0x11) {
      char v54 = 0;
    }
    else {
      char v54 = 16 - v53;
    }
    uint64_t v55 = v15[1];
    _ZF = v55 == 0;
    uint64_t v57 = v55 + v27 * v16;
    uint64_t v58 = *v15 + v26 * v16;
    uint64_t v59 = v17 + 32932;
    uint64_t v60 = v57 + 2 * v14;
    if (_ZF) {
      uint64_t v60 = 0;
    }
    float32x4_t v61 = (_WORD *)(v58 + 2 * v14);
    uint64_t v63 = *v18;
    uint64_t v62 = v18[1];
    float v64 = (unsigned char *)(v62 + v22 * v12 + v11);
    if (!v62) {
      float v64 = 0;
    }
    uint64_t v65 = (unsigned char *)(v63 + v21 * v12 + v11);
    char v66 = v54;
    float v67 = *(float *)(v17 + 108);
    float v68 = *(float *)(v17 + 112);
    float v69 = *(float *)(v17 + 116);
    float v70 = *(float *)(v17 + 120);
    do
    {
      if (v10)
      {
        unint64_t v71 = 0;
        float v72 = v65;
        float v73 = v64;
        float v74 = v61;
        do
        {
          if (v73)
          {
            LOBYTE(v45) = *v73;
            *(float *)&unsigned int v75 = (float)LODWORD(v45);
            float v44 = *(float *)&v75 - v33;
            LOBYTE(v75) = v73[1];
            float v76 = (float)v75 - v33;
            v73 += 2;
            float v77 = v174 * v76;
            float v78 = (float)(v172 * v76) + (float)(v44 * v173);
            float v79 = v171 * v44;
          }
          else
          {
            float v79 = 0.0;
            float v78 = 0.0;
            float v77 = 0.0;
          }
          LOBYTE(v44) = *v72;
          float v80 = v34 * (float)((float)LODWORD(v44) - v32);
          float v81 = v77 + v80;
          BOOL v82 = (float)(v77 + v80) <= 8191.0;
          float v83 = 8191.0;
          if (v82)
          {
            float v83 = v81;
            if (v81 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v78 + v80;
          float v85 = 8191.0;
          if ((float)(v78 + v80) <= 8191.0)
          {
            float v85 = v78 + v80;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v79 + v80;
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          if (v73)
          {
            LOBYTE(v86) = *v73;
            float v86 = (float)LODWORD(v86) - v33;
            LOBYTE(v84) = v73[1];
            float v88 = (float)LODWORD(v84) - v33;
            v73 += 2;
            float v89 = v174 * v88;
            float v90 = (float)(v172 * v88) + (float)(v86 * v173);
            float v91 = v171 * v86;
          }
          else
          {
            float v91 = 0.0;
            float v90 = 0.0;
            float v89 = 0.0;
          }
          LOBYTE(v86) = v72[1];
          float v92 = v34 * (float)((float)LODWORD(v86) - v32);
          float v93 = v89 + v92;
          BOOL v82 = (float)(v89 + v92) <= 8191.0;
          float v94 = 8191.0;
          if (v82)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v90 + v92;
          BOOL v82 = (float)(v90 + v92) <= 8191.0;
          float v96 = 8191.0;
          if (v82)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v91 + v92;
          float v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          unsigned int v105 = llroundf(fminf(fmaxf(v87, 0.0), 8191.0));
          __asm { FCVT            S4, H1 }
          _H1 = *((_WORD *)result + v105);
          __asm { FCVT            S30, H1 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          float v112 = fmaxf(_S0, fmaxf(_S4, _S30));
          float v113 = (float)((float)((float)(v68 * _S4) + (float)(v67 * _S0)) + (float)(v69 * _S30)) + (float)(v70 * v112);
          float v114 = 8191.0;
          if (v113 <= 8191.0)
          {
            float v114 = (float)((float)((float)(v68 * _S4) + (float)(v67 * _S0)) + (float)(v69 * _S30)) + (float)(v70 * v112);
            if (v113 < 0.0) {
              float v114 = 0.0;
            }
          }
          float v115 = v42;
          __asm
          {
            FCVT            S1, H1
            FCVT            S6, H6
            FCVT            S7, H7
          }
          _H19 = *(_WORD *)(v52 + 2 * llroundf(v114));
          float v120 = (float)((float)((float)(v68 * _S6) + (float)(v67 * _S1)) + (float)(v69 * _S7))
               + (float)(v70 * fmaxf(_S1, fmaxf(_S6, _S7)));
          float v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            float v121 = v120;
            if (v120 < 0.0) {
              float v121 = 0.0;
            }
          }
          __asm { FCVT            S3, H19 }
          _S0 = _S0 * _S3;
          float v124 = _S4 * _S3;
          float v125 = _S30 * _S3;
          _H17 = *(_WORD *)(v52 + 2 * llroundf(v121));
          __asm { FCVT            S17, H17 }
          _S1 = _S1 * _S17;
          float v129 = _S6 * _S17;
          float v130 = _S7 * _S17;
          float v131 = (float)((float)(v162 * v124) + (float)(_S0 * v164)) + (float)(v125 * v161);
          float v132 = (float)((float)(v47 * v124) + (float)(_S0 * v46)) + (float)(v125 * v48);
          float v133 = (float)((float)(v50 * v124) + (float)(_S0 * v49)) + (float)(v125 * v51);
          float v134 = (float)((float)(v162 * v129) + (float)(_S1 * v164)) + (float)(v130 * v161);
          float v135 = (float)((float)(v47 * v129) + (float)(_S1 * v46)) + (float)(v130 * v48);
          float v136 = (float)((float)(v50 * v129) + (float)(_S1 * v49)) + (float)(v130 * v51);
          LOWORD(_S0) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          LOWORD(_S1) = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __asm { FCVT            S30, H1 }
          _H1 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v59 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          float v42 = v115;
          float v143 = (float)((float)((float)(v176 * _S4) + (float)(v115 * _S0)) + (float)(v43 * _S30)) + v37;
          float v144 = v39;
          if (v143 <= v39)
          {
            float v144 = (float)((float)((float)(v176 * _S4) + (float)(v115 * _S0)) + (float)(v43 * _S30)) + v37;
            if (v143 < v37) {
              float v144 = v37;
            }
          }
          __asm
          {
            FCVT            S7, H1
            FCVT            S6, H6
            FCVT            S1, H19
          }
          float v148 = (float)((float)((float)(v176 * _S6) + (float)(v115 * _S7)) + (float)(v43 * _S1)) + v37;
          *float v74 = llroundf(v144) << v66;
          float v149 = v39;
          if (v148 <= v39)
          {
            float v149 = (float)((float)((float)(v176 * _S6) + (float)(v115 * _S7)) + (float)(v43 * _S1)) + v37;
            if (v148 < v37) {
              float v149 = v37;
            }
          }
          v74[1] = llroundf(v149) << v66;
          float v150 = _S0 + _S7;
          float v151 = _S4 + _S6;
          float v152 = _S30 + _S1;
          float v153 = (float)((float)(v170 + (float)(v150 * v169)) + (float)(v151 * v168)) + (float)(v152 * v167);
          float v154 = v41;
          if (v153 <= v41)
          {
            float v154 = (float)((float)(v170 + (float)(v150 * v169)) + (float)(v151 * v168)) + (float)(v152 * v167);
            if (v153 < v175) {
              float v154 = v175;
            }
          }
          uint64_t v155 = (_WORD *)(v60 + 2 * v71);
          float v45 = (float)((float)(v170 + (float)(v150 * v166)) + (float)(v151 * v165)) + (float)(v152 * v163);
          _WORD *v155 = llroundf(v154) << v66;
          float v44 = v41;
          if (v45 <= v41)
          {
            float v44 = v45;
            if (v45 < v175) {
              float v44 = v175;
            }
          }
          v155[1] = llroundf(v44) << v66;
          v71 += 2;
          v72 += 2;
          v74 += 2;
        }
        while (v10 > v71);
      }
      v65 += v21;
      v64 += v22;
      float32x4_t v61 = (_WORD *)((char *)v61 + v26);
      v60 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      uint64_t v156 = 0;
      do
      {
        if (v10)
        {
          unint64_t v157 = v10;
          uint64_t v158 = v30;
          uint64_t v159 = v25;
          do
          {
            __int16 v160 = *v159++;
            *v158++ = v160 | (v160 << 8);
            --v157;
          }
          while (v157);
        }
        v25 += v23;
        v30 += v28;
        ++v156;
      }
      while (v156 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v30, 255, 2 * v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_444vf_TRC_Mat_TRC_xf422_neon_fp16_GCD(unint64_t result, uint64_t a2, int16x4_t a3, double a4, double a5, double a6, int16x4_t a7, double a8, double a9)
{
  uint64_t v12 = *(void *)(result + 28);
  unint64_t v13 = *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (v15 != v14)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(result + 36);
    unint64_t v18 = v14 + *(void *)(result + 44);
    unint64_t v19 = v15 - v14;
    uint64_t v20 = *(void *)(result + 112);
    uint64_t v21 = *(void *)(result + 152);
    size_t v22 = *(uint64_t **)(result + 56);
    uint64_t v23 = *(uint64_t **)(result + 64);
    uint64_t v24 = *(void **)(result + 128);
    unint64_t v25 = *(uint64_t **)(result + 136);
    unint64_t v26 = *(void *)(result + 104) * a2 / v13 + *(void *)(result + 120);
    uint64_t v221 = v23[2];
    uint64_t v224 = v22[2];
    uint64_t v27 = (unsigned __int8 *)(v224 + v221 * v18 + v17);
    uint64_t v28 = *v25;
    uint64_t v29 = v25[1];
    uint64_t v222 = v25[2];
    uint64_t v223 = v24[2];
    uint64_t v30 = (char *)(v223 + v222 * v26 + 2 * v20);
    a3.i32[0] = *(_DWORD *)(v21 + 128);
    float v31 = (float)a3.u32[0];
    unsigned int v32 = *(unsigned __int16 *)(v21 + 140);
    unsigned int v33 = *(unsigned __int16 *)(v21 + 142);
    v10.i32[0] = *(_DWORD *)v21;
    unsigned int v34 = *(unsigned __int16 *)(v21 + 144);
    LODWORD(v25) = *(unsigned __int16 *)(v21 + 146);
    float v35 = (float)v32;
    *(short float *)v11.i16 = (short float)v32;
    unsigned int v36 = *(unsigned __int16 *)(v21 + 148);
    _S28 = *(_DWORD *)(v21 + 44);
    float v38 = (float)v33;
    short float v39 = (short float)v33;
    unsigned int v43 = *(unsigned __int16 *)(v21 + 150);
    float v44 = (float)v34;
    unsigned int v45 = *(unsigned __int16 *)(v21 + 152);
    *(float *)&a4 = (float)v25;
    float v266 = (float)v25;
    *(short float *)&a4 = (short float)v25;
    uint64_t v46 = v21 + 164;
    float v47 = (float)v36;
    *(short float *)a7.i16 = (short float)v36;
    _S13 = (float)(8191.0 / (float)a3.u32[0]) * *(float *)v21;
    _S31 = (float)(8191.0 / (float)a3.u32[0]) * *(float *)(v21 + 8);
    _S9 = (float)(8191.0 / (float)a3.u32[0]) * *(float *)(v21 + 16);
    _S19 = (float)(8191.0 / (float)a3.u32[0]) * *(float *)(v21 + 20);
    *(float *)&a9 = (float)v43;
    float v264 = (float)v43;
    _S10 = (float)(8191.0 / (float)a3.u32[0]) * *(float *)(v21 + 28);
    float v53 = (float)v45;
    *(short float *)&a9 = (short float)v43;
    *(short float *)v10.i16 = (short float)v45;
    unsigned int v54 = *(unsigned __int8 *)(v21 + 132);
    if (v54 >= 0x11) {
      unsigned __int8 v55 = 0;
    }
    else {
      unsigned __int8 v55 = 16 - v54;
    }
    uint64_t v56 = v24[1];
    uint64_t v225 = v29;
    uint64_t v57 = v28;
    uint64_t v58 = *v24 + v28 * v26;
    int16x8_t v59 = vdupq_lane_s16(*(int16x4_t *)v11.f32, 0);
    float16x8_t v260 = (float16x8_t)v59;
    *(short float *)v59.i16 = -v39;
    float16x8_t v229 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v59.i8, 0);
    v40.i32[1] = *(_DWORD *)(v21 + 60);
    v40.i32[0] = *(_DWORD *)(v21 + 48);
    *(float32x2_t *)v11.f32 = vmul_f32(v40, (float32x2_t)0x3F0000003F000000);
    float16x8_t v258 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    v41.i32[1] = *(_DWORD *)(v21 + 64);
    v41.i32[0] = *(_DWORD *)(v21 + 52);
    *(float32x2_t *)v9.f32 = vmul_f32(v41, (float32x2_t)0x3F0000003F000000);
    float32x4_t v60 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    float16x8_t v256 = (float16x8_t)v60;
    v42.i32[1] = *(_DWORD *)(v21 + 68);
    v42.i32[0] = *(_DWORD *)(v21 + 56);
    *(float32x2_t *)v60.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    *(short float *)a3.i16 = (short float)v34;
    float16x8_t v253 = (float16x8_t)vdupq_lane_s16(a3, 0);
    float16x8_t v254 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v60), 0);
    float16x8_t v251 = (float16x8_t)vdupq_lane_s16(a7, 0);
    float16x8_t v252 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a4, 0);
    uint64_t v61 = v21 + 16548;
    float16x8_t v249 = (float16x8_t)vdupq_lane_s16(v10, 0);
    float16x8_t v250 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a9, 0);
    uint64_t v62 = v56 + v29 * v26 + 2 * v20;
    if (!v56) {
      uint64_t v62 = 0;
    }
    uint64_t v63 = (uint16x8_t *)(v58 + 2 * v20);
    uint64_t v65 = *v22;
    uint64_t v64 = v22[1];
    uint64_t v66 = v23[1];
    uint64_t v67 = v64 + v66 * v18 + v17;
    if (!v64) {
      uint64_t v67 = 0;
    }
    uint64_t v68 = *v23;
    float v69 = (int8x8_t *)(v65 + *v23 * v18 + v17);
    unint64_t v70 = *(void *)(result + 20);
    uint64_t result = (v70 - 7);
    unsigned __int8 v71 = v55;
    _S16 = *(float *)(v21 + 80);
    _S17 = *(float *)(v21 + 84);
    _S26 = *(float *)(v21 + 100);
    __asm { FCVT            H8, S13 }
    float v261 = (float)(8191.0 / v31) * *(float *)(v21 + 28);
    __asm { FCVT            H10, S10 }
    float v263 = (float)(8191.0 / v31) * *(float *)(v21 + 16);
    __asm { FCVT            H9, S9 }
    short float v228 = _H9;
    float v262 = (float)(8191.0 / v31) * *(float *)(v21 + 20);
    __asm { FCVT            H9, S19 }
    short float v227 = _H9;
    __asm { FCVT            H9, S31 }
    short float v226 = _H9;
    float v265 = *(float *)(v21 + 36);
    __asm { FCVT            H0, S0 }
    short float v242 = _H0;
    _S15 = *(float *)(v21 + 40);
    __asm { FCVT            H0, S1 }
    short float v241 = _H0;
    float v87 = *(float *)(v21 + 44);
    __asm { FCVT            H0, S28 }
    short float v240 = _H0;
    float v248 = *(float *)(v21 + 72);
    __asm { FCVT            H0, S4 }
    short float v239 = _H0;
    float v247 = *(float *)(v21 + 76);
    __asm { FCVT            H0, S6 }
    short float v238 = _H0;
    __asm { FCVT            H0, S16 }
    short float v237 = _H0;
    __asm { FCVT            H0, S17 }
    short float v236 = _H0;
    float v246 = *(float *)(v21 + 88);
    __asm { FCVT            H0, S22 }
    short float v235 = _H0;
    float v245 = *(float *)(v21 + 92);
    __asm { FCVT            H0, S24 }
    short float v234 = _H0;
    float v244 = *(float *)(v21 + 96);
    __asm { FCVT            H0, S25 }
    short float v233 = _H0;
    __asm { FCVT            H0, S26 }
    short float v232 = _H0;
    float v243 = *(float *)(v21 + 104);
    __asm { FCVT            H0, S27 }
    short float v231 = _H0;
    float v259 = v11.f32[0];
    float v98 = v9.f32[1];
    float v257 = v9.f32[0];
    v99.i32[0] = v60.i32[1];
    float v230 = v60.f32[1];
    float v255 = v60.f32[0];
    v100.i64[0] = 0x9000900090009000;
    v100.i64[1] = 0x9000900090009000;
    uint16x8_t v101 = (uint16x8_t)vdupq_n_s16(v55);
    float v102 = _S16;
    float v103 = _S17;
    do
    {
      if ((int)v70 < 8)
      {
        unint64_t v156 = 0;
        uint16x8_t v108 = (uint16x8_t *)v62;
        float16x8_t v107 = v63;
        uint64_t v106 = v67;
        unsigned int v105 = v69;
      }
      else
      {
        int v104 = 0;
        unsigned int v105 = v69;
        uint64_t v106 = v67;
        float16x8_t v107 = v63;
        uint16x8_t v108 = (uint16x8_t *)v62;
        do
        {
          if (v106)
          {
            int8x8x2_t v267 = vld2_s8((const char *)v106);
            v106 += 16;
            *(int8x8_t *)v109.i8 = vzip1_s8(v267.val[0], 0);
            v109.u64[1] = (unint64_t)vzip2_s8(v267.val[0], 0);
            *(int8x8_t *)v110.i8 = vzip1_s8(v267.val[1], 0);
            v110.u64[1] = (unint64_t)vzip2_s8(v267.val[1], 0);
            *(int8x8x2_t *)((char *)&v267 + 8) = (int8x8x2_t)vaddq_f16(v229, vcvtq_f16_u16(v109));
            float16x8_t v111 = vaddq_f16(v229, vcvtq_f16_u16(v110));
            float16x8_t v112 = vmulq_n_f16(v111, v226);
            float16x8_t v113 = vmlaq_n_f16(vmulq_n_f16(*(float16x8_t *)((char *)&v267 + 8), v228), v111, v227);
            float16x8_t v114 = vmulq_n_f16(*(float16x8_t *)((char *)&v267 + 8), _H10);
          }
          else
          {
            float16x8_t v114 = 0uLL;
            float16x8_t v113 = 0uLL;
            float16x8_t v112 = 0uLL;
          }
          int8x8_t v115 = *v105++;
          *(int8x8_t *)v116.i8 = vzip1_s8(v115, 0);
          v116.u64[1] = (unint64_t)vzip2_s8(v115, 0);
          float16x8_t v117 = vsubq_f16(vcvtq_f16_u16(v116), v260);
          float16x8_t v118 = vmlaq_n_f16(v113, v117, _H8);
          float16x8_t v119 = vmlaq_n_f16(v114, v117, _H8);
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v112, v117, _H8), (float16x8_t)0), v100));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          v123.i16[0] = *(_WORD *)(v46 + 2 * v122.u32[0]);
          v123.i16[1] = *(_WORD *)(v46 + 2 * v122.u32[1]);
          v123.i16[2] = *(_WORD *)(v46 + 2 * v122.u32[2]);
          v123.i16[3] = *(_WORD *)(v46 + 2 * v122.u32[3]);
          v123.i16[4] = *(_WORD *)(v46 + 2 * v121.u32[0]);
          v123.i16[5] = *(_WORD *)(v46 + 2 * v121.u32[1]);
          v123.i16[6] = *(_WORD *)(v46 + 2 * v121.u32[2]);
          v123.i16[7] = *(_WORD *)(v46 + 2 * v121.u32[3]);
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v100));
          uint32x4_t v125 = vmovl_high_u16(v124);
          uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v124.i8);
          v118.i16[0] = *(_WORD *)(v46 + 2 * v126.u32[0]);
          v118.i16[1] = *(_WORD *)(v46 + 2 * v126.u32[1]);
          v118.i16[2] = *(_WORD *)(v46 + 2 * v126.u32[2]);
          v118.i16[3] = *(_WORD *)(v46 + 2 * v126.u32[3]);
          v118.i16[4] = *(_WORD *)(v46 + 2 * v125.u32[0]);
          v118.i16[5] = *(_WORD *)(v46 + 2 * v125.u32[1]);
          v118.i16[6] = *(_WORD *)(v46 + 2 * v125.u32[2]);
          v118.i16[7] = *(_WORD *)(v46 + 2 * v125.u32[3]);
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v100));
          uint32x4_t v128 = vmovl_high_u16(v127);
          float16x8_t v129 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v127.i8);
          v129.i16[0] = *(_WORD *)(v46 + 2 * v129.u32[0]);
          v129.i16[1] = *(_WORD *)(v46 + 2 * v129.u32[1]);
          v129.i16[2] = *(_WORD *)(v46 + 2 * v129.u32[2]);
          v129.i16[3] = *(_WORD *)(v46 + 2 * v129.u32[3]);
          v129.i16[4] = *(_WORD *)(v46 + 2 * v128.u32[0]);
          v129.i16[5] = *(_WORD *)(v46 + 2 * v128.u32[1]);
          v129.i16[6] = *(_WORD *)(v46 + 2 * v128.u32[2]);
          v129.i16[7] = *(_WORD *)(v46 + 2 * v128.u32[3]);
          float16x8_t v130 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v123, v236), v118, v235), v129, v234);
          float16x8_t v131 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v231), v118, v232), v123, v233);
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v123, v239), v118, v238), v129, v237), (float16x8_t)0), v100));
          uint32x4_t v133 = vmovl_high_u16(v132);
          uint32x4_t v134 = vmovl_u16(*(uint16x4_t *)v132.i8);
          v135.i16[7] = (unint64_t)v134.u32[3] >> 48;
          v123.i16[0] = *(_WORD *)(v61 + 2 * v134.u32[0]);
          v123.i16[1] = *(_WORD *)(v61 + 2 * v134.u32[1]);
          v123.i16[2] = *(_WORD *)(v61 + 2 * v134.u32[2]);
          v123.i16[3] = *(_WORD *)(v61 + 2 * v134.u32[3]);
          v123.i16[4] = *(_WORD *)(v61 + 2 * v133.u32[0]);
          v123.i16[5] = *(_WORD *)(v61 + 2 * v133.u32[1]);
          v123.i16[6] = *(_WORD *)(v61 + 2 * v133.u32[2]);
          float16x8_t v136 = v123;
          v136.i16[7] = *(_WORD *)(v61 + 2 * v133.u32[3]);
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, (float16x8_t)0), v100));
          uint32x4_t v138 = vmovl_high_u16(v137);
          uint32x4_t v139 = vmovl_u16(*(uint16x4_t *)v137.i8);
          v135.i16[0] = *(_WORD *)(v61 + 2 * v139.u32[0]);
          uint64_t v140 = v138.u32[3];
          v135.i16[1] = *(_WORD *)(v61 + 2 * v139.u32[1]);
          v135.i16[2] = *(_WORD *)(v61 + 2 * v139.u32[2]);
          v135.i16[3] = *(_WORD *)(v61 + 2 * v139.u32[3]);
          v135.i16[4] = *(_WORD *)(v61 + 2 * v138.u32[0]);
          v135.i16[5] = *(_WORD *)(v61 + 2 * v138.u32[1]);
          v135.i16[6] = *(_WORD *)(v61 + 2 * v138.u32[2]);
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v100));
          uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v141.i8);
          uint64_t v143 = v142.u32[1];
          uint64_t v144 = v142.u32[0];
          float16x8_t v145 = (float16x8_t)v135;
          v145.i16[7] = *(_WORD *)(v61 + 2 * v140);
          int16x8_t v146 = (int16x8_t)vmovl_high_u16(v141);
          uint64_t v147 = v142.u32[3];
          uint64_t v148 = v142.u32[2];
          *(void *)&long long v149 = v146.u32[2];
          *((void *)&v149 + 1) = v146.u32[3];
          long long v150 = v149;
          *(void *)&long long v149 = v146.u32[0];
          v146.i16[7] = (unint64_t)v146.u32[1] >> 48;
          v146.i16[0] = *(_WORD *)(v61 + 2 * v144);
          float v151 = (__int16 *)(v61 + 2 * v146.u32[1]);
          v146.i16[1] = *(_WORD *)(v61 + 2 * v143);
          v146.i16[2] = *(_WORD *)(v61 + 2 * v148);
          v146.i16[3] = *(_WORD *)(v61 + 2 * v147);
          v146.i16[4] = *(_WORD *)(v61 + 2 * v149);
          v146.i16[5] = *v151;
          v146.i16[6] = *(_WORD *)(v61 + 2 * v150);
          float v152 = (__int16 *)(v61 + 2 * *((void *)&v150 + 1));
          float16x8_t v153 = (float16x8_t)v146;
          v153.i16[7] = *v152;
          *v107++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v253, v136, v242), v145, v241), v153, v240), v253), v251)), v101);
          int16x8_t v154 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v123, v135), (float16x8_t)vuzp2q_s16((int16x8_t)v136, (int16x8_t)v145));
          float16x8_t v155 = vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v252, v258, (float16x8_t)vzip1q_s16(v154, v154)), v256, (float16x8_t)vzip2q_s16(v154, v154)), v254, vaddq_f16((float16x8_t)vtrn1q_s16(v146, v146), (float16x8_t)vtrn2q_s16((int16x8_t)v153, (int16x8_t)v153))), v250);
          float v98 = *(float *)v249.i32;
          uint16x8_t v99 = vshlq_u16(vcvtq_u16_f16(vminq_f16(v155, v249)), v101);
          *v108++ = v99;
          v104 += 8;
        }
        while (v104 < (int)result);
        unint64_t v156 = v70 & 0xFFFFFFF8;
      }
      while (v70 > v156)
      {
        if (v106)
        {
          v99.i8[0] = *(unsigned char *)v106;
          *(float *)&unsigned int v157 = (float)v99.u32[0];
          float v98 = *(float *)&v157 - v38;
          LOBYTE(v157) = *(unsigned char *)(v106 + 1);
          float v158 = (float)v157 - v38;
          v106 += 2;
          float v159 = _S31 * v158;
          *(float *)v99.i32 = (float)(v262 * v158) + (float)(v98 * v263);
          float v160 = v261 * v98;
        }
        else
        {
          float v160 = 0.0;
          v99.i32[0] = 0;
          float v159 = 0.0;
        }
        LOBYTE(v98) = v105->i8[0];
        float v161 = _S13 * (float)((float)LODWORD(v98) - v35);
        float v162 = 8191.0;
        if ((float)(v159 + v161) <= 8191.0)
        {
          float v162 = v159 + v161;
          if ((float)(v159 + v161) < 0.0) {
            float v162 = 0.0;
          }
        }
        float v163 = *(float *)v99.i32 + v161;
        float v164 = 8191.0;
        if (v163 <= 8191.0)
        {
          float v164 = v163;
          if (v163 < 0.0) {
            float v164 = 0.0;
          }
        }
        float v165 = v160 + v161;
        float v166 = 8191.0;
        if ((float)(v160 + v161) <= 8191.0)
        {
          float v166 = v160 + v161;
          if (v165 < 0.0) {
            float v166 = 0.0;
          }
        }
        if (v106)
        {
          LOBYTE(v165) = *(unsigned char *)v106;
          *(float *)&unsigned int v167 = (float)LODWORD(v165);
          float v161 = *(float *)&v167 - v38;
          LOBYTE(v167) = *(unsigned char *)(v106 + 1);
          float v168 = (float)v167 - v38;
          v106 += 2;
          float v169 = _S31 * v168;
          float v170 = (float)(v262 * v168) + (float)(v161 * v263);
          float v171 = v261 * v161;
        }
        else
        {
          float v171 = 0.0;
          float v170 = 0.0;
          float v169 = 0.0;
        }
        LOBYTE(v161) = v105->i8[1];
        float v172 = _S13 * (float)((float)LODWORD(v161) - v35);
        float v173 = 8191.0;
        if ((float)(v169 + v172) <= 8191.0)
        {
          float v173 = v169 + v172;
          if ((float)(v169 + v172) < 0.0) {
            float v173 = 0.0;
          }
        }
        float v174 = v170 + v172;
        BOOL v175 = (float)(v170 + v172) <= 8191.0;
        float v176 = 8191.0;
        if (v175)
        {
          float v176 = v174;
          if (v174 < 0.0) {
            float v176 = 0.0;
          }
        }
        float v177 = v35;
        float v178 = v171 + v172;
        float v179 = 8191.0;
        if (v178 <= 8191.0)
        {
          float v179 = v178;
          if (v178 < 0.0) {
            float v179 = 0.0;
          }
        }
        _H1 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
        __asm { FCVT            S1, H1 }
        _H6 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
        __asm { FCVT            S6, H6 }
        _H16 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
        __asm { FCVT            S16, H16 }
        _H4 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0)));
        _H0 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
        __asm
        {
          FCVT            S4, H4
          FCVT            S0, H0
        }
        _H18 = *(_WORD *)(v46 + 2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0)));
        __asm { FCVT            S18, H18 }
        float v192 = (float)((float)(v247 * _S6) + (float)(_S1 * v248)) + (float)(_S16 * v102);
        float v193 = (float)((float)(v246 * _S6) + (float)(_S1 * v103)) + (float)(_S16 * v245);
        float v194 = (float)((float)(_S26 * _S6) + (float)(_S1 * v244)) + (float)(_S16 * v243);
        float v195 = (float)((float)(v247 * _S0) + (float)(_S4 * v248)) + (float)(_S18 * v102);
        float v196 = (float)((float)(v246 * _S0) + (float)(_S4 * v103)) + (float)(_S18 * v245);
        float v197 = (float)((float)(_S26 * _S0) + (float)(_S4 * v244)) + (float)(_S18 * v243);
        LOWORD(_S0) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v192, 0.0), 8191.0)));
        __asm { FCVT            S6, H0 }
        LOWORD(_S0) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v193, 0.0), 8191.0)));
        __asm { FCVT            S16, H0 }
        LOWORD(_S0) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0)));
        __asm { FCVT            S18, H0 }
        _H0 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v195, 0.0), 8191.0)));
        _H1 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v196, 0.0), 8191.0)));
        _H19 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v197, 0.0), 8191.0)));
        float v204 = (float)((float)((float)(_S15 * _S16) + (float)(v265 * _S6)) + (float)(v87 * _S18)) + v44;
        float v205 = v47;
        if (v204 <= v47)
        {
          float v205 = (float)((float)((float)(_S15 * _S16) + (float)(v265 * _S6)) + (float)(v87 * _S18)) + v44;
          if (v204 < v44) {
            float v205 = (float)v34;
          }
        }
        __asm
        {
          FCVT            S17, H0
          FCVT            S1, H1
          FCVT            S0, H19
        }
        float v209 = (float)((float)((float)(_S15 * _S1) + (float)(v265 * _S17)) + (float)(v87 * _S0)) + v44;
        v107->i16[0] = llroundf(v205) << v71;
        float v210 = v47;
        if (v209 <= v47)
        {
          float v210 = (float)((float)((float)(_S15 * _S1) + (float)(v265 * _S17)) + (float)(v87 * _S0)) + v44;
          if (v209 < v44) {
            float v210 = (float)v34;
          }
        }
        v107->i16[1] = llroundf(v210) << v71;
        float v211 = _S6 + _S17;
        float v212 = _S16 + _S1;
        float v213 = _S18 + _S0;
        float v214 = (float)((float)(v266 + (float)(v211 * v259)) + (float)(v212 * v257)) + (float)(v213 * v255);
        float v215 = v53;
        float v35 = v177;
        if (v214 <= v53)
        {
          float v215 = (float)((float)(v266 + (float)(v211 * v259)) + (float)(v212 * v257)) + (float)(v213 * v255);
          if (v214 < v264) {
            float v215 = v264;
          }
        }
        *(float *)v99.i32 = (float)((float)(v266 + (float)(v211 * v11.f32[1])) + (float)(v212 * v9.f32[1]))
                          + (float)(v213 * v230);
        v108->i16[0] = llroundf(v215) << v71;
        float v98 = v53;
        if (*(float *)v99.i32 <= v53)
        {
          float v98 = *(float *)v99.i32;
          if (*(float *)v99.i32 < v264) {
            float v98 = v264;
          }
        }
        v156 += 2;
        v108->i16[1] = llroundf(v98) << v71;
        unsigned int v105 = (int8x8_t *)((char *)v105 + 2);
        float16x8_t v107 = (uint16x8_t *)((char *)v107 + 4);
        uint16x8_t v108 = (uint16x8_t *)((char *)v108 + 4);
      }
      float v69 = (int8x8_t *)((char *)v69 + v68);
      v67 += v66;
      uint64_t v63 = (uint16x8_t *)((char *)v63 + v57);
      v62 += v225;
      ++v16;
    }
    while (v16 != v19);
    if (v224 && v223)
    {
      uint64_t v216 = 0;
      do
      {
        if (v70)
        {
          unint64_t v217 = v70;
          uint64_t v218 = v30;
          float v219 = v27;
          do
          {
            __int16 v220 = *v219++;
            *v218++ = v220 | (v220 << 8);
            --v217;
          }
          while (v217);
        }
        v27 += v221;
        v30 += v222;
        ++v216;
      }
      while (v216 != v19);
    }
    else if (v223)
    {
      do
      {
        if (v70) {
          uint64_t result = (unint64_t)memset(v30, 255, 2 * v70);
        }
        v30 += v222;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_xf422_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (uint64_t *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    uint64_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    unint64_t v25 = (unsigned __int8 *)(v24 + v23 * v12 + v11);
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (char *)(v29 + v28 * v16 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a4);
    float v33 = (float)LODWORD(a5);
    float v34 = v31 * *(float *)v17;
    float v152 = v31 * *(float *)(v17 + 16);
    float v153 = v31 * *(float *)(v17 + 8);
    float v35 = v31 * *(float *)(v17 + 20);
    *(float *)&unsigned int v36 = v31 * *(float *)(v17 + 28);
    float v150 = *(float *)&v36;
    float v151 = v35;
    LOWORD(v36) = *(_WORD *)(v17 + 144);
    float v37 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 146);
    float v38 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 148);
    float v39 = (float)v36;
    LOWORD(v36) = *(_WORD *)(v17 + 150);
    *(float *)&unsigned int v40 = (float)v36;
    float v154 = *(float *)&v40;
    LOWORD(v40) = *(_WORD *)(v17 + 152);
    float v41 = (float)v40;
    float v42 = *(float *)(v17 + 36);
    float v43 = *(float *)(v17 + 40);
    float v44 = *(float *)(v17 + 44);
    float v148 = *(float *)(v17 + 52) * 0.5;
    float v149 = *(float *)(v17 + 48) * 0.5;
    float v45 = *(float *)(v17 + 64);
    float v146 = *(float *)(v17 + 60) * 0.5;
    float v147 = *(float *)(v17 + 56) * 0.5;
    float v46 = *(float *)(v17 + 72);
    float v47 = *(float *)(v17 + 68) * 0.5;
    float v144 = v47;
    float v145 = v45 * 0.5;
    float v49 = *(float *)(v17 + 76);
    float v48 = *(float *)(v17 + 80);
    float v50 = *(float *)(v17 + 84);
    float v51 = *(float *)(v17 + 88);
    float v52 = *(float *)(v17 + 92);
    float v53 = *(float *)(v17 + 96);
    float v54 = *(float *)(v17 + 100);
    float v55 = *(float *)(v17 + 104);
    uint64_t result = (void *)(v17 + 164);
    uint64_t v56 = v17 + 16548;
    unsigned int v57 = *(unsigned __int8 *)(v17 + 132);
    if (v57 >= 0x11) {
      char v58 = 0;
    }
    else {
      char v58 = 16 - v57;
    }
    uint64_t v60 = *v15;
    uint64_t v59 = v15[1];
    uint64_t v61 = v59 + v27 * v16 + 2 * v14;
    if (!v59) {
      uint64_t v61 = 0;
    }
    uint64_t v62 = v60 + v26 * v16 + 2 * v14;
    uint64_t v64 = *v18;
    uint64_t v63 = v18[1];
    uint64_t v65 = (unsigned char *)(v63 + v22 * v12 + v11);
    if (!v63) {
      uint64_t v65 = 0;
    }
    uint64_t v66 = (unsigned char *)(v64 + v21 * v12 + v11);
    char v67 = v58;
    do
    {
      if (v10)
      {
        unint64_t v68 = 0;
        float v69 = v66;
        unint64_t v70 = v65;
        unsigned __int8 v71 = (_WORD *)v62;
        do
        {
          if (v70)
          {
            LOBYTE(v47) = *v70;
            *(float *)&unsigned int v72 = (float)LODWORD(v47);
            float v45 = *(float *)&v72 - v33;
            LOBYTE(v72) = v70[1];
            float v73 = (float)v72 - v33;
            v70 += 2;
            float v74 = v153 * v73;
            float v75 = (float)(v151 * v73) + (float)(v45 * v152);
            float v76 = v150 * v45;
          }
          else
          {
            float v76 = 0.0;
            float v75 = 0.0;
            float v74 = 0.0;
          }
          LOBYTE(v45) = *v69;
          float v77 = v34 * (float)((float)LODWORD(v45) - v32);
          float v78 = v74 + v77;
          BOOL v79 = (float)(v74 + v77) <= 8191.0;
          float v80 = 8191.0;
          if (v79)
          {
            float v80 = v78;
            if (v78 < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v75 + v77;
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v76 + v77;
          float v84 = 8191.0;
          if ((float)(v76 + v77) <= 8191.0)
          {
            float v84 = v76 + v77;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          if (v70)
          {
            LOBYTE(v83) = *v70;
            *(float *)&unsigned int v85 = (float)LODWORD(v83);
            float v77 = *(float *)&v85 - v33;
            LOBYTE(v85) = v70[1];
            float v86 = (float)v85 - v33;
            v70 += 2;
            float v87 = v153 * v86;
            float v88 = (float)(v151 * v86) + (float)(v77 * v152);
            float v89 = v150 * v77;
          }
          else
          {
            float v89 = 0.0;
            float v88 = 0.0;
            float v87 = 0.0;
          }
          LOBYTE(v77) = v69[1];
          float v90 = v34 * (float)((float)LODWORD(v77) - v32);
          float v91 = 8191.0;
          if ((float)(v87 + v90) <= 8191.0)
          {
            float v91 = v87 + v90;
            if ((float)(v87 + v90) < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v88 + v90;
          BOOL v79 = (float)(v88 + v90) <= 8191.0;
          float v93 = 8191.0;
          if (v79)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v89 + v90;
          float v95 = 8191.0;
          if (v94 <= 8191.0)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S4, H4
          }
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          float v112 = (float)((float)(v49 * _S5) + (float)(_S0 * v46)) + (float)(_S24 * v48);
          float v113 = (float)((float)(v51 * _S5) + (float)(_S0 * v50)) + (float)(_S24 * v52);
          float v114 = (float)((float)(v54 * _S5) + (float)(_S0 * v53)) + (float)(_S24 * v55);
          float v115 = (float)((float)(v49 * _S4) + (float)(_S6 * v46)) + (float)(_S26 * v48);
          float v116 = (float)((float)(v51 * _S4) + (float)(_S6 * v50)) + (float)(_S26 * v52);
          float v117 = (float)((float)(v54 * _S4) + (float)(_S6 * v53)) + (float)(_S26 * v55);
          LOWORD(_S0) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S24, H4 }
          LOWORD(_S4) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S26, H4 }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v115, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v116, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v117, 0.0), 8191.0)));
          float v124 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S0)) + (float)(v44 * _S26)) + v37;
          float v125 = v39;
          if (v124 <= v39)
          {
            float v125 = (float)((float)((float)(v43 * _S24) + (float)(v42 * _S0)) + (float)(v44 * _S26)) + v37;
            if (v124 < v37) {
              float v125 = v37;
            }
          }
          __asm
          {
            FCVT            S25, H4
            FCVT            S5, H5
            FCVT            S4, H28
          }
          float v129 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S25)) + (float)(v44 * _S4)) + v37;
          *unsigned __int8 v71 = llroundf(v125) << v67;
          float v130 = v39;
          if (v129 <= v39)
          {
            float v130 = (float)((float)((float)(v43 * _S5) + (float)(v42 * _S25)) + (float)(v44 * _S4)) + v37;
            if (v129 < v37) {
              float v130 = v37;
            }
          }
          v71[1] = llroundf(v130) << v67;
          float v131 = _S0 + _S25;
          float v132 = _S24 + _S5;
          float v133 = _S26 + _S4;
          float v134 = (float)((float)(v38 + (float)(v131 * v149)) + (float)(v132 * v148)) + (float)(v133 * v147);
          float v135 = v41;
          if (v134 <= v41)
          {
            float v135 = (float)((float)(v38 + (float)(v131 * v149)) + (float)(v132 * v148)) + (float)(v133 * v147);
            if (v134 < v154) {
              float v135 = v154;
            }
          }
          float16x8_t v136 = (_WORD *)(v61 + 2 * v68);
          float v137 = (float)(v38 + (float)(v131 * v146)) + (float)(v132 * v145);
          float v45 = v144;
          float v47 = v137 + (float)(v133 * v144);
          *float16x8_t v136 = llroundf(v135) << v67;
          float v138 = v41;
          if (v47 <= v41)
          {
            float v138 = v47;
            if (v47 < v154) {
              float v138 = v154;
            }
          }
          v136[1] = llroundf(v138) << v67;
          v68 += 2;
          v69 += 2;
          v71 += 2;
        }
        while (v10 > v68);
      }
      v66 += v21;
      v65 += v22;
      v62 += v26;
      v61 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      uint64_t v139 = 0;
      do
      {
        if (v10)
        {
          unint64_t v140 = v10;
          uint16x8_t v141 = v30;
          uint32x4_t v142 = v25;
          do
          {
            __int16 v143 = *v142++;
            *v141++ = v143 | (v143 << 8);
            --v140;
          }
          while (v140);
        }
        v25 += v23;
        v30 += v28;
        ++v139;
      }
      while (v139 != v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v30, 255, 2 * v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_xf422_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_rgb_xf422_neon_fp16_GCD(void *result, uint64_t a2, double _D0)
{
  uint64_t v8 = *(void *)((char *)result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 == v10) {
    return result;
  }
  uint64_t v12 = 0;
  unint64_t v13 = *(void *)((char *)result + 20);
  uint64_t v14 = *(void *)((char *)result + 36);
  unint64_t v15 = v10 + *(void *)((char *)result + 44);
  unint64_t v16 = v11 - v10;
  uint64_t v17 = result[14];
  uint64_t v18 = (uint64_t *)result[16];
  unint64_t v19 = result[13] * a2 / v9 + result[15];
  uint64_t v20 = result[19];
  uint64_t v21 = (uint64_t *)result[7];
  size_t v22 = (uint64_t *)result[8];
  uint64_t v23 = (uint64_t *)result[17];
  uint64_t v24 = *v22;
  uint64_t v25 = v22[1];
  uint64_t v26 = v22[2];
  uint64_t v27 = v21[2];
  uint64_t v28 = (unsigned __int8 *)(v27 + v26 * v15 + v14);
  uint64_t v29 = *v23;
  uint64_t v30 = v23[1];
  uint64_t v31 = v23[2];
  uint64_t v32 = v18[2];
  uint64_t v33 = (char *)(v32 + v31 * v19 + 2 * v17);
  unsigned int v34 = *(unsigned __int16 *)(v20 + 140);
  unsigned int v35 = *(unsigned __int16 *)(v20 + 142);
  unsigned int v36 = *(unsigned __int16 *)(v20 + 144);
  unsigned int v37 = *(unsigned __int16 *)(v20 + 146);
  unsigned int v38 = *(unsigned __int16 *)(v20 + 148);
  unsigned int v39 = *(unsigned __int16 *)(v20 + 150);
  unsigned int v40 = *(unsigned __int16 *)(v20 + 152);
  LODWORD(_D0) = *(_DWORD *)(v20 + 36);
  _S1 = *(float *)(v20 + 40);
  _S2 = *(float *)(v20 + 44);
  v43.i32[0] = *(_DWORD *)(v20 + 48);
  v4.i32[0] = *(_DWORD *)(v20 + 52);
  v44.i32[0] = *(_DWORD *)(v20 + 56);
  float v45 = (float)v34;
  *(short float *)v3.i16 = (short float)v34;
  float v46 = (float)*(unsigned int *)(v20 + 136) / (float)*(unsigned int *)(v20 + 128);
  float v47 = (float)v35;
  _S5 = v46 * *(float *)v20;
  _Q25.f32[0] = v46 * *(float *)(v20 + 8);
  _S7 = v46 * *(float *)(v20 + 16);
  _S24 = v46 * *(float *)(v20 + 20);
  _S16 = v46 * *(float *)(v20 + 28);
  float v52 = (float)v36;
  float v53 = (float)v37;
  int16x8_t v54 = vdupq_lane_s16(v3, 0);
  float16x8_t v157 = (float16x8_t)v54;
  *(short float *)v54.i16 = -(short float)v35;
  float16x8_t v143 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v54.i8, 0);
  __asm { FCVT            H8, S5 }
  float v60 = _S16;
  __asm { FCVT            H9, S16 }
  short float v147 = _H9;
  float v62 = _S7;
  __asm { FCVT            H9, S7 }
  short float v146 = _H9;
  float v64 = _S24;
  __asm { FCVT            H9, S24 }
  short float v145 = _H9;
  float v66 = _Q25.f32[0];
  __asm { FCVT            H9, S25 }
  short float v144 = _H9;
  __asm { FCVT            H9, S0 }
  short float v156 = _H9;
  __asm { FCVT            H9, S1 }
  short float v155 = _H9;
  v43.i32[1] = *(_DWORD *)(v20 + 60);
  *(float32x2_t *)_Q25.f32 = vmul_f32(v43, (float32x2_t)0x3F0000003F000000);
  float16x8_t v70 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q25), 0);
  v4.i32[1] = *(_DWORD *)(v20 + 64);
  *(float32x2_t *)v4.f32 = vmul_f32(*(float32x2_t *)v4.f32, (float32x2_t)0x3F0000003F000000);
  *(double *)&v71.i64[1] = _D0;
  float16x8_t v153 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
  float16x8_t v154 = v70;
  v44.i32[1] = *(_DWORD *)(v20 + 68);
  *(float32x2_t *)v71.f32 = vmul_f32(v44, (float32x2_t)0x3F0000003F000000);
  int16x4_t v72 = (int16x4_t)vcvt_f16_f32(v71);
  int32x4_t v73 = vdupq_lane_s32((int32x2_t)v72, 0);
  *(short float *)v72.i16 = (short float)v36;
  float16x8_t v74 = (float16x8_t)vdupq_lane_s16(v72, 0);
  *(short float *)v72.i16 = (short float)v37;
  int16x8_t v75 = vdupq_lane_s16(v72, 0);
  float16x8_t v151 = (float16x8_t)v75;
  float16x8_t v152 = (float16x8_t)v73;
  *(short float *)v75.i16 = (short float)v38;
  float16x8_t v76 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v75.i8, 0);
  *(short float *)v75.i16 = (short float)v39;
  int16x8_t v77 = vdupq_lane_s16(*(int16x4_t *)v75.i8, 0);
  float16x8_t v150 = (float16x8_t)v77;
  *(short float *)v77.i16 = (short float)v40;
  float16x8_t v149 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v77.i8, 0);
  unsigned int v78 = *(unsigned __int8 *)(v20 + 132);
  unsigned __int8 v79 = 16 - v78;
  if (v78 >= 0x11) {
    unsigned __int8 v79 = 0;
  }
  uint64_t v81 = *v18;
  uint64_t v80 = v18[1];
  uint64_t v82 = v80 + v30 * v19 + 2 * v17;
  if (!v80) {
    uint64_t v82 = 0;
  }
  uint64_t result = (void *)(v81 + v29 * v19 + 2 * v17);
  uint64_t v84 = *v21;
  uint64_t v83 = v21[1];
  uint64_t v85 = v83 + v25 * v15 + v14;
  if (!v83) {
    uint64_t v85 = 0;
  }
  float v86 = (int8x8_t *)(v84 + v24 * v15 + v14);
  unsigned __int8 v87 = v79;
  __asm { FCVT            H9, S2 }
  short float v148 = _H9;
  uint64_t v89 = _Q25.i64[0];
  uint64_t v90 = v4.i64[0];
  float v91 = (float)v38;
  float v92 = (float)v39;
  float v93 = (float)v40;
  uint16x8_t v94 = (uint16x8_t)vdupq_n_s16(v79);
  do
  {
    if ((int)v13 < 8)
    {
      unint64_t v112 = 0;
      uint16x8_t v99 = (uint16x8_t *)v82;
      float v98 = (uint16x8_t *)result;
      uint64_t v97 = v85;
      float v96 = v86;
    }
    else
    {
      int v95 = 0;
      float v96 = v86;
      uint64_t v97 = v85;
      float v98 = (uint16x8_t *)result;
      uint16x8_t v99 = (uint16x8_t *)v82;
      do
      {
        if (v97)
        {
          float16x8_t v158 = (float16x8_t)vld2_s8((const char *)v97);
          v97 += 16;
          *(int8x8_t *)v100.i8 = vzip1_s8(*(int8x8_t *)v158.i8, 0);
          v100.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v158.i8, 0);
          *(int8x8_t *)v101.i8 = vzip1_s8((int8x8_t)v158.u64[1], 0);
          v101.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v158.u64[1], 0);
          float16x8_t v158 = vcvtq_f16_u16(v101);
          float16x8_t v102 = vaddq_f16(v143, vcvtq_f16_u16(v100));
          float16x8_t v158 = vaddq_f16(v143, v158);
          float16x8_t v103 = vmulq_n_f16(v158, v144);
          float16x8_t v104 = vmlaq_n_f16(vmulq_n_f16(v102, v146), v158, v145);
          float16x8_t v105 = vmulq_n_f16(v102, v147);
        }
        else
        {
          float16x8_t v105 = 0uLL;
          float16x8_t v104 = 0uLL;
          float16x8_t v103 = 0uLL;
        }
        int8x8_t v106 = *v96++;
        *(int8x8_t *)v107.i8 = vzip1_s8(v106, 0);
        v107.u64[1] = (unint64_t)vzip2_s8(v106, 0);
        float16x8_t v108 = vsubq_f16(vcvtq_f16_u16(v107), v157);
        float16x8_t v70 = vmlaq_n_f16(v103, v108, _H8);
        float16x8_t v109 = vmlaq_n_f16(v104, v108, _H8);
        float16x8_t v110 = vmlaq_n_f16(v105, v108, _H8);
        *v98++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v74, v70, v156), v109, v155), v110, v148), v74), v76)), v94);
        _Q25 = (float32x4_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v70, (int16x8_t)v109), (float16x8_t)vuzp2q_s16((int16x8_t)v70, (int16x8_t)v109));
        unsigned int v6 = v154.i32[0];
        v70.i32[0] = v153.i32[0];
        float16x8_t v111 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v151, v154, (float16x8_t)vzip1q_s16((int16x8_t)_Q25, (int16x8_t)_Q25)), v153, (float16x8_t)vzip2q_s16((int16x8_t)_Q25, (int16x8_t)_Q25)), v152, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v110, (int16x8_t)v110), (float16x8_t)vtrn2q_s16((int16x8_t)v110, (int16x8_t)v110)));
        _Q25.i32[0] = v149.i32[0];
        *v99++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, v150), v149)), v94);
        v95 += 8;
      }
      while (v95 < (int)v13 - 7);
      unint64_t v112 = v13 & 0xFFFFFFF8;
    }
    while (v13 > v112)
    {
      float v113 = 0.0;
      if (!v97)
      {
        _Q25.i32[0] = 0;
        v70.i32[0] = 0;
        float v116 = 0.0;
LABEL_21:
        float v120 = 0.0;
        float v119 = 0.0;
        goto LABEL_22;
      }
      _Q25.i8[0] = *(unsigned char *)v97;
      float v114 = (float)_Q25.u32[0] - v47;
      v70.i8[0] = *(unsigned char *)(v97 + 1);
      float v115 = (float)v70.u32[0] - v47;
      v97 += 2;
      float v116 = v66 * v115;
      *(float *)v70.i32 = (float)(v64 * v115) + (float)(v114 * v62);
      _Q25.f32[0] = v60 * v114;
      if (!v97) {
        goto LABEL_21;
      }
      LOBYTE(v113) = *(unsigned char *)v97;
      float v117 = (float)LODWORD(v113) - v47;
      LOBYTE(v6) = *(unsigned char *)(v97 + 1);
      float v118 = (float)v6 - v47;
      v97 += 2;
      float v119 = v66 * v118;
      float v120 = (float)(v64 * v118) + (float)(v117 * v62);
      float v113 = v60 * v117;
LABEL_22:
      LOBYTE(v7) = v96->i8[0];
      float v121 = _S5 * (float)((float)LODWORD(v7) - v45);
      float v122 = v116 + v121;
      float v123 = *(float *)v70.i32 + v121;
      float v124 = _Q25.f32[0] + v121;
      float v125 = (float)((float)((float)(_S1 * v123) + (float)(*(float *)&_D0 * v122)) + (float)(_S2 * v124)) + v52;
      float v126 = v91;
      if (v125 <= v91)
      {
        float v126 = (float)((float)((float)(_S1 * v123) + (float)(*(float *)&_D0 * v122)) + (float)(_S2 * v124)) + v52;
        if (v125 < v52) {
          float v126 = v52;
        }
      }
      LOBYTE(v125) = v96->i8[1];
      float v127 = _S5 * (float)((float)LODWORD(v125) - v45);
      float v7 = v119 + v127;
      float v128 = v120 + v127;
      float v129 = v113 + v127;
      float v130 = (float)((float)((float)(_S1 * (float)(v120 + v127)) + (float)(*(float *)&_D0 * v7)) + (float)(_S2 * v129))
           + v52;
      v98->i16[0] = llroundf(v126) << v87;
      float v131 = v91;
      if (v130 <= v91)
      {
        float v131 = v130;
        if (v130 < v52) {
          float v131 = v52;
        }
      }
      v98->i16[1] = llroundf(v131) << v87;
      float v132 = v122 + v7;
      float v133 = v123 + v128;
      float v134 = v124 + v129;
      float v135 = (float)((float)(v53 + (float)(v132 * *(float *)&v89)) + (float)(v133 * *(float *)&v90))
           + (float)(v134 * v71.f32[0]);
      float v136 = v93;
      if (v135 <= v93)
      {
        float v136 = (float)((float)(v53 + (float)(v132 * *(float *)&v89)) + (float)(v133 * *(float *)&v90))
             + (float)(v134 * v71.f32[0]);
        if (v135 < v92) {
          float v136 = v92;
        }
      }
      unsigned int v6 = HIDWORD(v89);
      *(float *)v70.i32 = (float)(v53 + (float)(v132 * *((float *)&v89 + 1))) + (float)(v133 * *((float *)&v90 + 1));
      float v137 = *(float *)v70.i32 + (float)(v134 * v71.f32[1]);
      v99->i16[0] = llroundf(v136) << v87;
      _Q25.f32[0] = v93;
      if (v137 <= v93)
      {
        _Q25.f32[0] = v137;
        if (v137 < v92) {
          _Q25.f32[0] = v92;
        }
      }
      v112 += 2;
      v99->i16[1] = llroundf(_Q25.f32[0]) << v87;
      float v96 = (int8x8_t *)((char *)v96 + 2);
      float v98 = (uint16x8_t *)((char *)v98 + 4);
      uint16x8_t v99 = (uint16x8_t *)((char *)v99 + 4);
    }
    float v86 = (int8x8_t *)((char *)v86 + v24);
    v85 += v25;
    uint64_t result = (void *)((char *)result + v29);
    v82 += v30;
    ++v12;
  }
  while (v12 != v16);
  if (v27 && v32)
  {
    uint64_t v138 = 0;
    do
    {
      if (v13)
      {
        unint64_t v139 = v13;
        unint64_t v140 = v33;
        uint16x8_t v141 = v28;
        do
        {
          __int16 v142 = *v141++;
          *v140++ = v142 | (v142 << 8);
          --v139;
        }
        while (v139);
      }
      v28 += v26;
      v33 += v31;
      ++v138;
    }
    while (v138 != v16);
  }
  else if (v32)
  {
    do
    {
      if (v13) {
        uint64_t result = memset(v33, 255, 2 * v13);
      }
      v33 += v31;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v18 = a6[2];
  uint64_t v17 = a6[3];
  uint64_t v20 = a6[4];
  uint64_t v19 = a6[5];
  if (v20)
  {
    ++v20;
    ++v13;
    if (v18)
    {
      --v18;
      --v12;
    }
    else
    {
      v18 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 <= v9) {
    uint64_t v21 = v12;
  }
  else {
    uint64_t v21 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v18 > v15) {
    uint64_t v18 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v19 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v19;
  }
  if (v21 >= v18) {
    uint64_t v24 = v18;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v19;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_xf422_GCD);
  return 0;
}

void *vt_Copy_444vf_rgb_xf422_GCD(void *result, uint64_t a2)
{
  uint64_t v10 = *(void *)((char *)result + 28);
  unint64_t v11 = *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (v13 == v12) {
    return result;
  }
  uint64_t v14 = 0;
  unint64_t v15 = *(void *)((char *)result + 20);
  uint64_t v16 = *(void *)((char *)result + 36);
  unint64_t v17 = v12 + *(void *)((char *)result + 44);
  unint64_t v18 = v13 - v12;
  uint64_t v19 = result[14];
  uint64_t v20 = (uint64_t *)result[16];
  unint64_t v21 = result[13] * a2 / v11 + result[15];
  uint64_t v22 = result[19];
  uint64_t v23 = (uint64_t *)result[7];
  uint64_t v24 = (uint64_t *)result[8];
  uint64_t v25 = (uint64_t *)result[17];
  uint64_t v26 = *v24;
  uint64_t v27 = v24[1];
  uint64_t v28 = v24[2];
  uint64_t v29 = v23[2];
  uint64_t v30 = (unsigned __int8 *)(v29 + v28 * v17 + v16);
  uint64_t v31 = *v25;
  uint64_t v32 = v25[1];
  uint64_t v33 = v25[2];
  uint64_t v34 = v20[2];
  uint64_t v35 = (char *)(v34 + v33 * v21 + 2 * v19);
  *(float *)&unsigned int v36 = (float)*(unsigned int *)(v22 + 128);
  *(float *)&unsigned int v37 = (float)*(unsigned int *)(v22 + 136);
  float v38 = *(float *)&v37 / *(float *)&v36;
  LOWORD(v36) = *(_WORD *)(v22 + 140);
  float v39 = (float)v36;
  LOWORD(v37) = *(_WORD *)(v22 + 142);
  float v40 = (float)v37;
  float v41 = v38 * *(float *)v22;
  float v42 = v38 * *(float *)(v22 + 8);
  float v43 = v38 * *(float *)(v22 + 16);
  float v44 = v38 * *(float *)(v22 + 20);
  float v45 = *(float *)(v22 + 28);
  float v46 = v38 * v45;
  LOWORD(v45) = *(_WORD *)(v22 + 144);
  float v47 = (float)LODWORD(v45);
  LOWORD(v4) = *(_WORD *)(v22 + 146);
  float v48 = (float)v4;
  LOWORD(v5) = *(_WORD *)(v22 + 148);
  float v49 = (float)v5;
  LOWORD(v6) = *(_WORD *)(v22 + 150);
  float v50 = (float)v6;
  LOWORD(v7) = *(_WORD *)(v22 + 152);
  float v51 = (float)v7;
  float v52 = *(float *)(v22 + 36);
  float v53 = *(float *)(v22 + 40);
  float v54 = *(float *)(v22 + 44);
  float v55 = *(float *)(v22 + 48) * 0.5;
  float v56 = *(float *)(v22 + 52) * 0.5;
  float v57 = *(float *)(v22 + 56) * 0.5;
  float v58 = *(float *)(v22 + 60) * 0.5;
  float v59 = *(float *)(v22 + 64) * 0.5;
  float v60 = *(float *)(v22 + 68) * 0.5;
  unsigned int v61 = *(unsigned __int8 *)(v22 + 132);
  char v62 = 16 - v61;
  if (v61 >= 0x11) {
    char v62 = 0;
  }
  uint64_t v64 = *v20;
  uint64_t v63 = v20[1];
  uint64_t v65 = v63 + v32 * v21 + 2 * v19;
  if (!v63) {
    uint64_t v65 = 0;
  }
  uint64_t result = (void *)(v64 + v31 * v21 + 2 * v19);
  uint64_t v67 = *v23;
  uint64_t v66 = v23[1];
  unint64_t v68 = (unsigned char *)(v66 + v27 * v17 + v16);
  if (!v66) {
    unint64_t v68 = 0;
  }
  float v69 = (unsigned char *)(v67 + v26 * v17 + v16);
  char v70 = v62;
  do
  {
    if (v15)
    {
      unint64_t v71 = 0;
      int16x4_t v72 = v69;
      int32x4_t v73 = v68;
      float16x8_t v74 = result;
      do
      {
        float v75 = 0.0;
        if (v73)
        {
          LOBYTE(v8) = *v73;
          float v76 = (float)LODWORD(v8) - v40;
          LOBYTE(v9) = v73[1];
          float v77 = (float)LODWORD(v9) - v40;
          v73 += 2;
          float v78 = v42 * v77;
          float v79 = (float)(v44 * v77) + (float)(v76 * v43);
          float v80 = v46 * v76;
          if (v73)
          {
            LOBYTE(v75) = *v73;
            float v81 = (float)LODWORD(v75) - v40;
            LOBYTE(v2) = v73[1];
            float v82 = (float)LODWORD(v2) - v40;
            v73 += 2;
            float v83 = v42 * v82;
            float v84 = (float)(v44 * v82) + (float)(v81 * v43);
            float v75 = v46 * v81;
            goto LABEL_16;
          }
        }
        else
        {
          float v80 = 0.0;
          float v79 = 0.0;
          float v78 = 0.0;
        }
        float v84 = 0.0;
        float v83 = 0.0;
LABEL_16:
        LOBYTE(v3) = *v72;
        float v85 = v41 * (float)((float)LODWORD(v3) - v39);
        float v86 = v78 + v85;
        float v87 = v79 + v85;
        float v88 = v80 + v85;
        float v89 = (float)((float)((float)(v53 * v87) + (float)(v52 * v86)) + (float)(v54 * v88)) + v47;
        float v90 = v49;
        if (v89 <= v49)
        {
          float v90 = (float)((float)((float)(v53 * v87) + (float)(v52 * v86)) + (float)(v54 * v88)) + v47;
          if (v89 < v47) {
            float v90 = v47;
          }
        }
        LOBYTE(v89) = v72[1];
        float v91 = v41 * (float)((float)LODWORD(v89) - v39);
        float v92 = v83 + v91;
        float v93 = v84 + v91;
        float v94 = v75 + v91;
        float v95 = (float)((float)((float)(v53 * v93) + (float)(v52 * v92)) + (float)(v54 * v94)) + v47;
        *float16x8_t v74 = llroundf(v90) << v70;
        float v3 = v49;
        if (v95 <= v49)
        {
          float v3 = (float)((float)((float)(v53 * v93) + (float)(v52 * v92)) + (float)(v54 * v94)) + v47;
          if (v95 < v47) {
            float v3 = v47;
          }
        }
        v74[1] = llroundf(v3) << v70;
        float v96 = v86 + v92;
        float v97 = v87 + v93;
        float v98 = v88 + v94;
        float v2 = (float)((float)(v48 + (float)(v96 * v55)) + (float)(v97 * v56)) + (float)(v98 * v57);
        float v99 = v51;
        if (v2 <= v51)
        {
          float v99 = (float)((float)(v48 + (float)(v96 * v55)) + (float)(v97 * v56)) + (float)(v98 * v57);
          if (v2 < v50) {
            float v99 = v50;
          }
        }
        uint16x8_t v100 = (_WORD *)(v65 + 2 * v71);
        float v9 = (float)(v48 + (float)(v96 * v58)) + (float)(v97 * v59);
        float v101 = v9 + (float)(v98 * v60);
        *uint16x8_t v100 = llroundf(v99) << v70;
        float v8 = v51;
        if (v101 <= v51)
        {
          float v8 = v101;
          if (v101 < v50) {
            float v8 = v50;
          }
        }
        v100[1] = llroundf(v8) << v70;
        v71 += 2;
        v72 += 2;
        v74 += 2;
      }
      while (v15 > v71);
    }
    v69 += v26;
    v68 += v27;
    uint64_t result = (void *)((char *)result + v31);
    v65 += v32;
    ++v14;
  }
  while (v14 != v18);
  if (v29 && v34)
  {
    uint64_t v102 = 0;
    do
    {
      if (v15)
      {
        unint64_t v103 = v15;
        float16x8_t v104 = v35;
        float16x8_t v105 = v30;
        do
        {
          __int16 v106 = *v105++;
          *v104++ = v106 | (v106 << 8);
          --v103;
        }
        while (v103);
      }
      v30 += v28;
      v35 += v33;
      ++v102;
    }
    while (v102 != v18);
  }
  else if (v34)
  {
    do
    {
      if (v15) {
        uint64_t result = memset(v35, 255, 2 * v15);
      }
      v35 += v33;
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_v216_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  int64x2_t v10 = (void *)result[16];
  unint64_t v11 = result[13] * a2 / v6 + result[15];
  int64x2_t v12 = (uint64_t *)result[17];
  uint64_t v13 = v12[1];
  uint64_t v14 = v10[1];
  unint64_t v15 = (char *)(v14 + v13 * v11 + 2 * v9);
  unint64_t v16 = v8 / v6;
  if (v14) {
    uint64_t v17 = v14 + v13 * v11 + 2 * v9;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16 != v7)
  {
    uint64_t v18 = 0;
    unint64_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v7 + *(void *)((char *)result + 44);
    unint64_t v22 = v16 - v7;
    uint64_t v23 = result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = (unsigned __int8 *)(v29 + v28 * v21 + v20);
    uint64_t v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = v32 * *(float *)v23;
    float v176 = v32 * *(float *)(v23 + 16);
    float v177 = v32 * *(float *)(v23 + 8);
    float v175 = v32 * *(float *)(v23 + 20);
    *(float *)&unsigned int v35 = v32 * *(float *)(v23 + 28);
    float v173 = (float)LODWORD(a5);
    float v174 = *(float *)&v35;
    LOWORD(v35) = *(_WORD *)(v23 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v23 + 150);
    *(float *)&unsigned int v39 = (float)v35;
    float v178 = *(float *)&v39;
    LOWORD(v39) = *(_WORD *)(v23 + 152);
    float v40 = (float)v39;
    float v41 = *(float *)(v23 + 36);
    float v42 = *(float *)(v23 + 40);
    float v43 = *(float *)(v23 + 44);
    float v172 = *(float *)(v23 + 48) * 0.5;
    float v170 = *(float *)(v23 + 56) * 0.5;
    float v171 = *(float *)(v23 + 52) * 0.5;
    float v168 = *(float *)(v23 + 64) * 0.5;
    float v169 = *(float *)(v23 + 60) * 0.5;
    float v44 = *(float *)(v23 + 72);
    float v166 = *(float *)(v23 + 68) * 0.5;
    float v167 = v44;
    float v164 = *(float *)(v23 + 80);
    float v165 = *(float *)(v23 + 76);
    float v162 = *(float *)(v23 + 88);
    float v163 = *(float *)(v23 + 84);
    float v160 = *(float *)(v23 + 96);
    float v161 = *(float *)(v23 + 92);
    float v45 = *(float *)(v23 + 104);
    float v46 = *(float *)(v23 + 108);
    float v158 = v45;
    float v159 = *(float *)(v23 + 100);
    uint64_t v47 = v23 + 164;
    uint64_t result = (void *)(v23 + 16548);
    uint64_t v48 = *v10 + v31 * v11;
    uint64_t v49 = v23 + 32932;
    float v50 = (_WORD *)(v48 + 2 * v9);
    float v53 = v24;
    uint64_t v52 = *v24;
    uint64_t v51 = v53[1];
    _ZF = v51 == 0;
    float v55 = (unsigned char *)(v51 + v27 * v21 + v20);
    if (_ZF) {
      float v55 = 0;
    }
    float v56 = (unsigned char *)(v52 + v26 * v21 + v20);
    float v58 = *(float *)(v23 + 112);
    float v57 = *(float *)(v23 + 116);
    float v59 = *(float *)(v23 + 120);
    do
    {
      if (v19)
      {
        unint64_t v60 = 0;
        unsigned int v61 = v56;
        char v62 = v55;
        uint64_t v63 = (_DWORD *)v17;
        uint64_t v64 = v50;
        do
        {
          if (v62)
          {
            LOBYTE(v45) = *v62;
            *(float *)&unsigned int v65 = (float)LODWORD(v45);
            float v44 = *(float *)&v65 - v173;
            LOBYTE(v65) = v62[1];
            float v66 = (float)v65 - v173;
            v62 += 2;
            float v67 = v177 * v66;
            float v68 = (float)(v175 * v66) + (float)(v44 * v176);
            float v69 = v174 * v44;
          }
          else
          {
            float v69 = 0.0;
            float v68 = 0.0;
            float v67 = 0.0;
          }
          LOBYTE(v44) = *v61;
          float v70 = v34 * (float)((float)LODWORD(v44) - v33);
          float v71 = v67 + v70;
          BOOL v72 = (float)(v67 + v70) <= 8191.0;
          float v73 = 8191.0;
          if (v72)
          {
            float v73 = v71;
            if (v71 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v68 + v70;
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v69 + v70;
          BOOL v72 = (float)(v69 + v70) <= 8191.0;
          float v77 = 8191.0;
          if (v72)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          if (v62)
          {
            LOBYTE(v76) = *v62;
            *(float *)&unsigned int v78 = (float)LODWORD(v76);
            float v70 = *(float *)&v78 - v173;
            LOBYTE(v78) = v62[1];
            float v79 = (float)v78 - v173;
            v62 += 2;
            float v80 = v177 * v79;
            float v81 = (float)(v175 * v79) + (float)(v70 * v176);
            float v82 = v174 * v70;
          }
          else
          {
            float v82 = 0.0;
            float v81 = 0.0;
            float v80 = 0.0;
          }
          LOBYTE(v70) = v61[1];
          float v83 = v33;
          float v84 = v34;
          float v85 = v34 * (float)((float)LODWORD(v70) - v33);
          float v86 = v80 + v85;
          BOOL v72 = (float)(v80 + v85) <= 8191.0;
          float v87 = 8191.0;
          if (v72)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v81 + v85;
          BOOL v72 = (float)(v81 + v85) <= 8191.0;
          float v89 = 8191.0;
          if (v72)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v82 + v85;
          float v91 = 8191.0;
          if (v90 <= 8191.0)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H7 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          unsigned int v98 = llroundf(fminf(fmaxf(v77, 0.0), 8191.0));
          __asm { FCVT            S4, H7 }
          _H7 = *(_WORD *)(v47 + 2 * v98);
          __asm { FCVT            S7, H7 }
          _H6 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          float v105 = (float)((float)((float)(v58 * _S4) + (float)(v46 * _S0)) + (float)(v57 * _S7))
               + (float)(v59 * fmaxf(_S0, fmaxf(_S4, _S7)));
          float v106 = 8191.0;
          if (v105 <= 8191.0)
          {
            float v106 = v105;
            if (v105 < 0.0) {
              float v106 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H6
            FCVT            S6, H1
            FCVT            S30, H30
          }
          _H1 = *((_WORD *)result + llroundf(v106));
          __asm { FCVT            S1, H1 }
          float v112 = _S0 * _S1;
          float v113 = _S4 * _S1;
          float v114 = _S7 * _S1;
          float v115 = (float)((float)((float)(v58 * _S6) + (float)(v46 * _S3)) + (float)(v57 * _S30))
               + (float)(v59 * fmaxf(_S3, fmaxf(_S6, _S30)));
          float v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            float v116 = v115;
            if (v115 < 0.0) {
              float v116 = 0.0;
            }
          }
          _H7 = *((_WORD *)result + llroundf(v116));
          __asm { FCVT            S7, H7 }
          float v119 = _S3 * _S7;
          _S6 = _S6 * _S7;
          _S7 = _S30 * _S7;
          float v122 = (float)((float)(v165 * v113) + (float)(v112 * v167)) + (float)(v114 * v164);
          float v123 = (float)((float)(v162 * v113) + (float)(v112 * v163)) + (float)(v114 * v161);
          _S0 = (float)((float)(v159 * v113) + (float)(v112 * v160)) + (float)(v114 * v158);
          float v125 = (float)(v165 * _S6) + (float)(v119 * v167);
          float v126 = (float)(v162 * _S6) + (float)(v119 * v163);
          float v127 = (float)(v159 * _S6) + (float)(v119 * v160);
          _S1 = v125 + (float)(_S7 * v164);
          float v129 = v126 + (float)(_S7 * v161);
          LOWORD(_S6) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          float v130 = v127 + (float)(_S7 * v158);
          __asm { FCVT            S6, H6 }
          LOWORD(_S7) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S17, H0 }
          LOWORD(_S0) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S4, H1 }
          unsigned int v136 = llroundf(fminf(fmaxf(v130, 0.0), 8191.0));
          float v137 = (float)(v42 * _S7) + (float)(v41 * _S6);
          _S1 = _S6 + _S0;
          float v139 = _S7 + _S4;
          float v140 = (float)(v37 + (float)((float)(_S6 + _S0) * v172)) + (float)(v139 * v171);
          float v141 = (float)(v37 + (float)(_S1 * v169)) + (float)(v139 * v168);
          LOWORD(_S1) = *(_WORD *)(v49 + 2 * v136);
          __asm { FCVT            S1, H1 }
          float v143 = v137 + (float)(v43 * _S17);
          float v144 = v140 + (float)((float)(_S17 + _S1) * v170);
          float v145 = v141 + (float)((float)(_S17 + _S1) * v166);
          if (v144 < v36) {
            float v146 = v36;
          }
          else {
            float v146 = v144;
          }
          BOOL v72 = v144 <= v38;
          float v147 = v143 + v36;
          if (!v72) {
            float v146 = v38;
          }
          __int16 v148 = llroundf(v146);
          float v149 = v178;
          if (v147 >= v178) {
            float v149 = v143 + v36;
          }
          *uint64_t v64 = v148;
          if (v147 <= v40) {
            float v150 = v149;
          }
          else {
            float v150 = v40;
          }
          v64[1] = llroundf(v150);
          float v151 = v38;
          if (v145 <= v38)
          {
            float v151 = v145;
            if (v145 < v36) {
              float v151 = v36;
            }
          }
          float v44 = v42 * _S4;
          float v45 = (float)((float)((float)(v42 * _S4) + (float)(v41 * _S0)) + (float)(v43 * _S1)) + v36;
          v64[2] = llroundf(v151);
          float v152 = v40;
          float v33 = v83;
          float v34 = v84;
          if (v45 <= v40)
          {
            float v152 = v45;
            if (v45 < v178) {
              float v152 = v178;
            }
          }
          v64[3] = llroundf(v152);
          if (v63) {
            *v63++ = 0;
          }
          v60 += 2;
          v61 += 2;
          v64 += 4;
        }
        while (v19 > v60);
      }
      v56 += v26;
      v55 += v27;
      float v50 = (_WORD *)((char *)v50 + v31);
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      uint64_t v153 = 0;
      do
      {
        if (v19)
        {
          unint64_t v154 = v19;
          short float v155 = v15;
          short float v156 = v30;
          do
          {
            __int16 v157 = *v156++;
            *v155++ = v157 | (v157 << 8);
            --v154;
          }
          while (v154);
        }
        v30 += v28;
        v15 += v13;
        ++v153;
      }
      while (v153 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19) {
          uint64_t result = memset(v15, 255, 2 * v19);
        }
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_v216_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_v216_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = v5 + v5 * a2;
  uint64_t v9 = result[14];
  int64x2_t v10 = (void *)result[16];
  unint64_t v11 = result[13] * a2 / v6 + result[15];
  int64x2_t v12 = (uint64_t *)result[17];
  uint64_t v13 = v12[1];
  uint64_t v14 = v10[1];
  unint64_t v15 = (char *)(v14 + v13 * v11 + 2 * v9);
  unint64_t v16 = v8 / v6;
  if (v14) {
    uint64_t v17 = v14 + v13 * v11 + 2 * v9;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16 != v7)
  {
    uint64_t v18 = 0;
    unint64_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    unint64_t v21 = v7 + *(void *)((char *)result + 44);
    unint64_t v22 = v16 - v7;
    uint64_t v23 = result[19];
    uint64_t v24 = (void *)result[7];
    uint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = (unsigned __int8 *)(v29 + v28 * v21 + v20);
    uint64_t v31 = *v12;
    LOWORD(a4) = *(_WORD *)(v23 + 140);
    LOWORD(a5) = *(_WORD *)(v23 + 142);
    *(float *)&unsigned int v32 = 8191.0 / (float)*(unsigned int *)(v23 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = (float)LODWORD(a5);
    float v35 = *(float *)&v32 * *(float *)v23;
    float v143 = *(float *)&v32 * *(float *)(v23 + 16);
    float v144 = *(float *)&v32 * *(float *)(v23 + 8);
    float v36 = *(float *)&v32 * *(float *)(v23 + 20);
    float v37 = *(float *)&v32 * *(float *)(v23 + 28);
    LOWORD(v32) = *(_WORD *)(v23 + 144);
    float v38 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 146);
    float v39 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 148);
    float v40 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 150);
    float v41 = (float)v32;
    LOWORD(v32) = *(_WORD *)(v23 + 152);
    float v42 = (float)v32;
    float v43 = *(float *)(v23 + 36);
    float v44 = *(float *)(v23 + 40);
    float v45 = *(float *)(v23 + 44);
    float v141 = *(float *)(v23 + 48) * 0.5;
    float v142 = v36;
    float v139 = *(float *)(v23 + 56) * 0.5;
    float v140 = *(float *)(v23 + 52) * 0.5;
    _S5 = *(float *)(v23 + 64);
    float v137 = _S5 * 0.5;
    float v138 = *(float *)(v23 + 60) * 0.5;
    float v47 = *(float *)(v23 + 72);
    float v48 = *(float *)(v23 + 68) * 0.5;
    float v136 = v48;
    float v50 = *(float *)(v23 + 76);
    float v49 = *(float *)(v23 + 80);
    float v51 = *(float *)(v23 + 84);
    float v52 = *(float *)(v23 + 88);
    float v53 = *(float *)(v23 + 92);
    float v54 = *(float *)(v23 + 96);
    float v55 = *(float *)(v23 + 100);
    float v56 = *(float *)(v23 + 104);
    uint64_t v57 = v23 + 16548;
    uint64_t result = (void *)(v23 + 164);
    uint64_t v58 = *v10 + v31 * v11 + 2 * v9;
    uint64_t v59 = v24[1];
    if (v59) {
      unint64_t v60 = (unsigned char *)(v59 + v27 * v21 + v20);
    }
    else {
      unint64_t v60 = 0;
    }
    unsigned int v61 = (unsigned char *)(*v24 + v26 * v21 + v20);
    do
    {
      if (v19)
      {
        unint64_t v62 = 0;
        uint64_t v63 = v61;
        uint64_t v64 = v60;
        unsigned int v65 = (_DWORD *)v17;
        float v66 = (_WORD *)v58;
        do
        {
          if (v64)
          {
            LOBYTE(v48) = *v64;
            *(float *)&unsigned int v67 = (float)LODWORD(v48);
            _S5 = *(float *)&v67 - v34;
            LOBYTE(v67) = v64[1];
            float v68 = (float)v67 - v34;
            v64 += 2;
            float v69 = v144 * v68;
            float v70 = (float)(v142 * v68) + (float)(_S5 * v143);
            float v71 = v37 * _S5;
          }
          else
          {
            float v71 = 0.0;
            float v70 = 0.0;
            float v69 = 0.0;
          }
          LOBYTE(_S5) = *v63;
          float v72 = v35 * (float)((float)LODWORD(_S5) - v33);
          float v73 = v69 + v72;
          BOOL v74 = (float)(v69 + v72) <= 8191.0;
          float v75 = 8191.0;
          if (v74)
          {
            float v75 = v73;
            if (v73 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v70 + v72;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v71 + v72;
          float v79 = 8191.0;
          if ((float)(v71 + v72) <= 8191.0)
          {
            float v79 = v71 + v72;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          if (v64)
          {
            LOBYTE(v78) = *v64;
            *(float *)&unsigned int v80 = (float)LODWORD(v78);
            float v72 = *(float *)&v80 - v34;
            LOBYTE(v80) = v64[1];
            float v81 = (float)v80 - v34;
            v64 += 2;
            float v82 = v144 * v81;
            float v83 = (float)(v142 * v81) + (float)(v72 * v143);
            float v84 = v37 * v72;
          }
          else
          {
            float v84 = 0.0;
            float v83 = 0.0;
            float v82 = 0.0;
          }
          LOBYTE(v72) = v63[1];
          float v85 = v35 * (float)((float)LODWORD(v72) - v33);
          float v86 = 8191.0;
          if ((float)(v82 + v85) <= 8191.0)
          {
            float v86 = v82 + v85;
            if ((float)(v82 + v85) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v83 + v85;
          BOOL v74 = (float)(v83 + v85) <= 8191.0;
          float v88 = 8191.0;
          if (v74)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v84 + v85;
          float v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          _H0 = *((_WORD *)result + llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _S26 = (float)((float)(v50 * _S5) + (float)(_S0 * v47)) + (float)(_S24 * v49);
          float v106 = (float)((float)(v52 * _S5) + (float)(_S0 * v51)) + (float)(_S24 * v53);
          _S0 = (float)((float)(v55 * _S5) + (float)(_S0 * v54)) + (float)(_S24 * v56);
          float v108 = (float)(v50 * _S4) + (float)(_S6 * v47);
          float v109 = (float)(v52 * _S4) + (float)(_S6 * v51);
          _S4 = (float)(v55 * _S4) + (float)(_S6 * v54);
          LOWORD(_S6) = *((_WORD *)result + llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _S5 = v108 + (float)(_S6 * v49);
          float v113 = v109 + (float)(_S6 * v53);
          LOWORD(_S26) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          float v114 = _S4 + (float)(_S6 * v56);
          __asm { FCVT            S26, H26 }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v106, 0.0), 8191.0)));
          __asm { FCVT            S28, H4 }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
          __asm { FCVT            S30, H0 }
          LOWORD(_S0) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          LOWORD(_S4) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v113, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          float v120 = (float)(v39 + (float)((float)(_S26 + _S0) * v138)) + (float)((float)(_S28 + _S4) * v137);
          LOWORD(_S5) = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v114, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          float v121 = (float)((float)(v44 * _S28) + (float)(v43 * _S26)) + (float)(v45 * _S30);
          float v122 = (float)((float)(v39 + (float)((float)(_S26 + _S0) * v141)) + (float)((float)(_S28 + _S4) * v140))
               + (float)((float)(_S30 + _S5) * v139);
          float v123 = v120 + (float)((float)(_S30 + _S5) * v136);
          if (v122 < v38) {
            float v124 = v38;
          }
          else {
            float v124 = v122;
          }
          float v125 = v121 + v38;
          if (v122 > v40) {
            float v124 = v40;
          }
          __int16 v126 = llroundf(v124);
          if (v125 < v41) {
            float v127 = v41;
          }
          else {
            float v127 = v125;
          }
          *float v66 = v126;
          if (v125 <= v42) {
            float v128 = v127;
          }
          else {
            float v128 = v42;
          }
          v66[1] = llroundf(v128);
          float v129 = v40;
          if (v123 <= v40)
          {
            float v129 = v123;
            if (v123 < v38) {
              float v129 = v38;
            }
          }
          float v48 = (float)((float)((float)(v44 * _S4) + (float)(v43 * _S0)) + (float)(v45 * _S5)) + v38;
          v66[2] = llroundf(v129);
          float v130 = v42;
          if (v48 <= v42)
          {
            float v130 = v48;
            if (v48 < v41) {
              float v130 = v41;
            }
          }
          v66[3] = llroundf(v130);
          if (v65) {
            *v65++ = 0;
          }
          v62 += 2;
          v63 += 2;
          v66 += 4;
        }
        while (v19 > v62);
      }
      v61 += v26;
      v60 += v27;
      v58 += v31;
      ++v18;
    }
    while (v18 != v22);
    if (v29 && v17)
    {
      uint64_t v131 = 0;
      do
      {
        if (v19)
        {
          unint64_t v132 = v19;
          float v133 = v15;
          float v134 = v30;
          do
          {
            __int16 v135 = *v134++;
            *v133++ = v135 | (v135 << 8);
            --v132;
          }
          while (v132);
        }
        v30 += v28;
        v15 += v13;
        ++v131;
      }
      while (v131 != v22);
    }
    else if (v17)
    {
      do
      {
        if (v19) {
          uint64_t result = memset(v15, 255, 2 * v19);
        }
        v15 += v13;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_v216(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_v216_GCD);
  return 0;
}

void *vt_Copy_444vf_rgb_v216_GCD(void *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v15 = *(void *)((char *)result + 28);
  unint64_t v16 = *(unsigned __int8 *)result;
  unint64_t v17 = v15 * a2 / v16;
  unint64_t v18 = v15 + v15 * a2;
  uint64_t v19 = result[14];
  int64x2_t v20 = (void *)result[16];
  unint64_t v21 = result[13] * a2 / v16 + result[15];
  int64x2_t v22 = (uint64_t *)result[17];
  uint64_t v23 = v22[1];
  uint64_t v24 = v20[1];
  uint64_t v25 = (char *)(v24 + v23 * v21 + 2 * v19);
  unint64_t v26 = v18 / v16;
  if (v24) {
    uint64_t v27 = v24 + v23 * v21 + 2 * v19;
  }
  else {
    uint64_t v27 = 0;
  }
  if (v26 == v17) {
    return result;
  }
  uint64_t v28 = 0;
  unint64_t v29 = *(void *)((char *)result + 20);
  uint64_t v30 = *(void *)((char *)result + 36);
  unint64_t v31 = v17 + *(void *)((char *)result + 44);
  unint64_t v32 = v26 - v17;
  uint64_t v33 = result[19];
  float v34 = (void *)result[7];
  float v35 = (uint64_t *)result[8];
  uint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  uint64_t v38 = v35[2];
  uint64_t v39 = v34[2];
  LOWORD(a6) = *(_WORD *)(v33 + 140);
  LOWORD(a7) = *(_WORD *)(v33 + 142);
  float v40 = *(float *)v33;
  float v41 = (float)*(unsigned int *)(v33 + 136) / (float)*(unsigned int *)(v33 + 128);
  float v42 = *(float *)(v33 + 8);
  float v43 = *(float *)(v33 + 16);
  float v44 = *(float *)(v33 + 20);
  float v45 = *(float *)(v33 + 28);
  LOWORD(v9) = *(_WORD *)(v33 + 144);
  LOWORD(v10) = *(_WORD *)(v33 + 146);
  LOWORD(v11) = *(_WORD *)(v33 + 148);
  LOWORD(v12) = *(_WORD *)(v33 + 150);
  LOWORD(v13) = *(_WORD *)(v33 + 152);
  float v46 = *(float *)(v33 + 36);
  float v47 = *(float *)(v33 + 40);
  float v48 = *(float *)(v33 + 44);
  float v49 = *(float *)(v33 + 48);
  float v50 = *(float *)(v33 + 52);
  float v51 = *(float *)(v33 + 56);
  float v52 = *(float *)(v33 + 60);
  float v53 = *(float *)(v33 + 64);
  float v54 = *(float *)(v33 + 68);
  float v55 = (unsigned __int8 *)(v39 + v38 * v31 + v30);
  uint64_t v56 = *v22;
  float v57 = (float)LODWORD(a6);
  float v58 = (float)LODWORD(a7);
  float v59 = v41 * v40;
  float v60 = v41 * v42;
  float v61 = v41 * v43;
  float v62 = v41 * v44;
  float v63 = v41 * v45;
  float v64 = (float)v9;
  float v65 = (float)v10;
  float v66 = (float)v11;
  float v67 = (float)v12;
  float v68 = (float)v13;
  float v69 = 0.5;
  float v70 = v49 * 0.5;
  float v71 = v50 * 0.5;
  float v72 = v51 * 0.5;
  float v73 = v52 * 0.5;
  float v74 = v53 * 0.5;
  float v75 = v54 * 0.5;
  uint64_t v76 = *v20 + v56 * v21 + 2 * v19;
  uint64_t v77 = v34[1];
  if (v77) {
    float v78 = (unsigned char *)(v77 + v37 * v31 + v30);
  }
  else {
    float v78 = 0;
  }
  uint64_t result = (void *)(*v34 + v36 * v31 + v30);
  do
  {
    if (v29)
    {
      unint64_t v79 = 0;
      unsigned int v80 = result;
      float v81 = v78;
      float v82 = (_DWORD *)v27;
      float v83 = (_WORD *)v76;
      while (1)
      {
        float v84 = 0.0;
        if (!v81) {
          break;
        }
        LOBYTE(v69) = *v81;
        float v85 = (float)LODWORD(v69) - v58;
        LOBYTE(v14) = v81[1];
        float v86 = (float)LODWORD(v14) - v58;
        v81 += 2;
        float v87 = v60 * v86;
        float v88 = (float)(v62 * v86) + (float)(v85 * v61);
        float v89 = v63 * v85;
        if (!v81) {
          goto LABEL_15;
        }
        LOBYTE(v84) = *v81;
        float v90 = (float)LODWORD(v84) - v58;
        LOBYTE(v7) = v81[1];
        float v91 = (float)LODWORD(v7) - v58;
        v81 += 2;
        float v92 = v60 * v91;
        float v93 = (float)(v62 * v91) + (float)(v90 * v61);
        float v84 = v63 * v90;
LABEL_16:
        LOBYTE(v8) = *v80;
        float v94 = v59 * (float)((float)v8 - v57);
        float v95 = v87 + v94;
        float v96 = v88 + v94;
        float v97 = v89 + v94;
        LOBYTE(v89) = v80[1];
        float v98 = v59 * (float)((float)LODWORD(v89) - v57);
        float v99 = v92 + v98;
        float v100 = v93 + v98;
        float v101 = v84 + v98;
        float v102 = (float)((float)((float)(v47 * v96) + (float)(v46 * v95)) + (float)(v48 * v97)) + v64;
        float v103 = v95 + (float)(v92 + v98);
        float v104 = v96 + v100;
        float v105 = v97 + v101;
        float v106 = (float)((float)(v65 + (float)(v103 * v70)) + (float)(v104 * v71)) + (float)(v105 * v72);
        float v107 = (float)((float)(v65 + (float)(v103 * v73)) + (float)(v104 * v74)) + (float)(v105 * v75);
        if (v106 < v64) {
          *(float *)&unsigned int v8 = v64;
        }
        else {
          *(float *)&unsigned int v8 = v106;
        }
        if (v106 <= v66) {
          float v108 = *(float *)&v8;
        }
        else {
          float v108 = v66;
        }
        *float v83 = llroundf(v108);
        if (v102 < v67) {
          float v109 = v67;
        }
        else {
          float v109 = v102;
        }
        if (v102 <= v68) {
          float v110 = v109;
        }
        else {
          float v110 = v68;
        }
        v83[1] = llroundf(v110);
        float v7 = v66;
        if (v107 <= v66)
        {
          float v7 = v107;
          if (v107 < v64) {
            float v7 = v64;
          }
        }
        float v14 = v47 * v100;
        float v111 = (float)((float)(v14 + (float)(v46 * v99)) + (float)(v48 * v101)) + v64;
        v83[2] = llroundf(v7);
        float v69 = v68;
        if (v111 <= v68)
        {
          float v69 = v111;
          if (v111 < v67) {
            float v69 = v67;
          }
        }
        v83[3] = llroundf(v69);
        if (v82) {
          *v82++ = 0;
        }
        v79 += 2;
        v80 += 2;
        v83 += 4;
        if (v29 <= v79) {
          goto LABEL_37;
        }
      }
      float v89 = 0.0;
      float v88 = 0.0;
      float v87 = 0.0;
LABEL_15:
      float v93 = 0.0;
      float v92 = 0.0;
      goto LABEL_16;
    }
LABEL_37:
    uint64_t result = (void *)((char *)result + v36);
    v78 += v37;
    v76 += v56;
    ++v28;
  }
  while (v28 != v32);
  if (v39 && v27)
  {
    uint64_t v112 = 0;
    do
    {
      if (v29)
      {
        unint64_t v113 = v29;
        float v114 = v25;
        float v115 = v55;
        do
        {
          __int16 v116 = *v115++;
          *v114++ = v116 | (v116 << 8);
          --v113;
        }
        while (v113);
      }
      v55 += v38;
      v25 += v23;
      ++v112;
    }
    while (v112 != v32);
  }
  else if (v27)
  {
    do
    {
      if (v29) {
        uint64_t result = memset(v25, 255, 2 * v29);
      }
      v25 += v23;
      --v32;
    }
    while (v32);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD(void *result, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)((char *)result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    size_t v8 = *(void *)((char *)result + 20);
    uint64_t v9 = *(void *)((char *)result + 36);
    unint64_t v10 = v5 + *(void *)((char *)result + 44);
    unint64_t v11 = v6 - v5;
    uint64_t v12 = result[14];
    unint64_t v13 = result[13] * a2;
    uint64_t v14 = result[19];
    uint64_t v15 = (uint64_t *)result[7];
    unint64_t v16 = (uint64_t *)result[8];
    uint64_t v17 = (uint64_t *)result[16];
    uint64_t v18 = (uint64_t *)result[17];
    unint64_t v19 = v13 / v4 + result[15];
    uint64_t v20 = *v16;
    uint64_t v21 = v16[1];
    uint64_t v188 = v16[2];
    uint64_t v191 = v15[2];
    int64x2_t v22 = (char *)(v191 + v188 * v10 + v9);
    uint64_t v23 = *v18;
    uint64_t v24 = v18[1];
    uint64_t v189 = v18[2];
    uint64_t v190 = v17[2];
    uint64_t v25 = (char *)(v190 + v189 * v19 + v12);
    unsigned int v26 = *(unsigned __int16 *)(v14 + 140);
    LODWORD(v18) = *(unsigned __int16 *)(v14 + 142);
    unsigned int v27 = *(unsigned __int16 *)(v14 + 144);
    unsigned int v28 = *(unsigned __int16 *)(v14 + 146);
    unsigned int v29 = *(unsigned __int16 *)(v14 + 148);
    unsigned int v30 = *(unsigned __int16 *)(v14 + 150);
    unsigned int v31 = *(unsigned __int16 *)(v14 + 152);
    _S16 = *(_DWORD *)(v14 + 36);
    _S17 = *(_DWORD *)(v14 + 40);
    *(float *)&a3 = 8191.0 / (float)*(unsigned int *)(v14 + 128);
    float v235 = (float)v26;
    float v34 = (float)v18;
    _S18 = *(_DWORD *)(v14 + 44);
    _S19 = *(_DWORD *)(v14 + 48);
    _S20 = *(_DWORD *)(v14 + 52);
    _S21 = *(_DWORD *)(v14 + 56);
    _S2 = *(float *)&a3 * *(float *)(v14 + 8);
    _S3 = *(float *)&a3 * *(float *)(v14 + 16);
    _S6 = *(float *)&a3 * *(float *)(v14 + 20);
    _S22 = *(_DWORD *)(v14 + 60);
    _S23 = *(_DWORD *)(v14 + 64);
    _S7 = *(float *)&a3 * *(float *)(v14 + 28);
    float v234 = *(float *)&a3 * *(float *)v14;
    __asm { FCVT            H8, S1 }
    *(short float *)&a3 = (short float)v26;
    _S1 = *(_DWORD *)(v14 + 68);
    _S24 = *(_DWORD *)(v14 + 72);
    _Q0 = vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float16x8_t v232 = (float16x8_t)_Q0;
    *(short float *)_Q0.i16 = -(short float)v18;
    _S25 = *(_DWORD *)(v14 + 76);
    _S26 = *(float *)(v14 + 80);
    float16x8_t v55 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float v203 = _S7;
    __asm { FCVT            H0, S7 }
    short float v201 = *(short float *)_Q0.i16;
    float v206 = _S6;
    float v207 = _S3;
    __asm { FCVT            H0, S3 }
    short float v200 = *(short float *)_Q0.i16;
    uint64_t v56 = v14 + 16548;
    uint64_t v57 = v14 + 164;
    __asm { FCVT            H0, S6 }
    short float v199 = *(short float *)_Q0.i16;
    float v208 = _S2;
    __asm { FCVT            H0, S2 }
    short float v198 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v27;
    uint64_t v58 = v14 + 32932;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v28;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v29;
    int16x8_t v61 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v230 = (float16x8_t)v61;
    *(short float *)v61.i16 = (short float)v30;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    *(short float *)v61.i16 = (short float)v31;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    uint64_t v65 = *v17;
    uint64_t v64 = *(void *)(result[16] + 8);
    _ZF = v64 == 0;
    uint64_t result = (void *)(v64 + v24 * v19 + v12);
    if (_ZF) {
      uint64_t result = 0;
    }
    float v66 = (void *)(v65 + v23 * v19 + v12);
    uint64_t v68 = *v15;
    uint64_t v67 = v15[1];
    uint64_t v69 = v67 + v21 * v10 + v9;
    if (!v67) {
      uint64_t v69 = 0;
    }
    float v70 = (int8x8_t *)(v68 + v20 * v10 + v9);
    _Q2.i32[0] = *(_DWORD *)(v14 + 88);
    float v237 = *(float *)(v14 + 36);
    __asm { FCVT            H9, S16 }
    short float v225 = _H9;
    float v236 = *(float *)(v14 + 40);
    __asm { FCVT            H9, S17 }
    short float v224 = _H9;
    float v233 = *(float *)(v14 + 44);
    __asm { FCVT            H9, S18 }
    short float v223 = _H9;
    float v210 = *(float *)(v14 + 52);
    float v211 = *(float *)(v14 + 48);
    __asm { FCVT            H9, S19 }
    short float v197 = _H9;
    __asm { FCVT            H9, S20 }
    short float v196 = _H9;
    float v209 = *(float *)(v14 + 56);
    __asm { FCVT            H9, S21 }
    short float v195 = _H9;
    float v204 = *(float *)(v14 + 64);
    float v205 = *(float *)(v14 + 60);
    __asm { FCVT            H9, S22 }
    short float v194 = _H9;
    __asm { FCVT            H9, S23 }
    float v202 = *(float *)(v14 + 68);
    __asm { FCVT            H1, S1 }
    short float v192 = _H1;
    short float v193 = _H9;
    float v228 = *(float *)(v14 + 108);
    __asm { FCVT            H1, S3 }
    short float v222 = _H1;
    float v227 = *(float *)(v14 + 112);
    __asm { FCVT            H1, S6 }
    short float v221 = _H1;
    float v226 = *(float *)(v14 + 116);
    __asm { FCVT            H1, S7 }
    short float v220 = _H1;
    float v214 = *(float *)(v14 + 120);
    __asm { FCVT            H1, S27 }
    short float v219 = _H1;
    float v231 = *(float *)(v14 + 72);
    __asm { FCVT            H1, S24 }
    short float v218 = _H1;
    float v229 = *(float *)(v14 + 76);
    __asm { FCVT            H1, S25 }
    short float v217 = _H1;
    __asm { FCVT            H1, S26 }
    float v88 = (float)v27;
    _S7 = *(float *)(v14 + 84);
    __asm { FCVT            H0, S0 }
    short float v215 = _H0;
    short float v216 = _H1;
    float v91 = (float)v28;
    v92.i64[0] = 0x9000900090009000;
    v92.i64[1] = 0x9000900090009000;
    _Q3.i32[0] = *(_DWORD *)(v14 + 96);
    float v212 = (float)v30;
    float v94 = (float)v31;
    _S17 = *(float *)(v14 + 100);
    _S9 = *(float *)(v14 + 104);
    float v97 = *(float *)_Q2.i32;
    __asm { FCVT            H1, S2 }
    short float v213 = _H1;
    _S10 = *(float *)(v14 + 92);
    __asm { FCVT            H11, S0 }
    float v101 = *(float *)_Q3.i32;
    __asm
    {
      FCVT            H12, S3
      FCVT            H0, S17
      FCVT            H1, S9
    }
    do
    {
      if ((int)v8 < 8)
      {
        size_t v148 = 0;
        float v109 = (char *)result;
        float v108 = v66;
        uint64_t v107 = v69;
        float v106 = v70;
      }
      else
      {
        int v105 = 0;
        float v106 = v70;
        uint64_t v107 = v69;
        float v108 = v66;
        float v109 = (char *)result;
        do
        {
          if (v107)
          {
            float16x8_t v238 = (float16x8_t)vld2_s8((const char *)v107);
            v107 += 16;
            *(int8x8_t *)v110.i8 = vzip1_s8(*(int8x8_t *)v238.i8, 0);
            v110.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v238.i8, 0);
            *(int8x8_t *)v111.i8 = vzip1_s8((int8x8_t)v238.u64[1], 0);
            v111.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v238.u64[1], 0);
            *(float16x8_t *)((char *)&v238 + 8) = vaddq_f16(v55, vcvtq_f16_u16(v110));
            float16x8_t v238 = vaddq_f16(v55, vcvtq_f16_u16(v111));
            float16x8_t v112 = vmulq_n_f16(v238, v198);
            float16x8_t v113 = vmlaq_n_f16(vmulq_n_f16(*(float16x8_t *)((char *)&v238 + 8), v200), v238, v199);
            float16x8_t v114 = vmulq_n_f16(*(float16x8_t *)((char *)&v238 + 8), v201);
          }
          else
          {
            float16x8_t v114 = 0uLL;
            float16x8_t v113 = 0uLL;
            float16x8_t v112 = 0uLL;
          }
          int8x8_t v115 = *v106++;
          *(int8x8_t *)v116.i8 = vzip1_s8(v115, 0);
          v116.u64[1] = (unint64_t)vzip2_s8(v115, 0);
          float16x8_t v117 = vsubq_f16(vcvtq_f16_u16(v116), v232);
          float16x8_t v118 = vmlaq_n_f16(v113, v117, _H8);
          float16x8_t v119 = vmlaq_n_f16(v114, v117, _H8);
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v112, v117, _H8), (float16x8_t)0), v92));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          v123.i16[0] = *(_WORD *)(v57 + 2 * v122.u32[0]);
          v123.i16[1] = *(_WORD *)(v57 + 2 * v122.u32[1]);
          v123.i16[2] = *(_WORD *)(v57 + 2 * v122.u32[2]);
          v123.i16[3] = *(_WORD *)(v57 + 2 * v122.u32[3]);
          v123.i16[4] = *(_WORD *)(v57 + 2 * v121.u32[0]);
          v123.i16[5] = *(_WORD *)(v57 + 2 * v121.u32[1]);
          v123.i16[6] = *(_WORD *)(v57 + 2 * v121.u32[2]);
          v123.i16[7] = *(_WORD *)(v57 + 2 * v121.u32[3]);
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v92));
          uint32x4_t v125 = vmovl_high_u16(v124);
          uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v124.i8);
          v118.i16[0] = *(_WORD *)(v57 + 2 * v126.u32[0]);
          v118.i16[1] = *(_WORD *)(v57 + 2 * v126.u32[1]);
          v118.i16[2] = *(_WORD *)(v57 + 2 * v126.u32[2]);
          v118.i16[3] = *(_WORD *)(v57 + 2 * v126.u32[3]);
          v118.i16[4] = *(_WORD *)(v57 + 2 * v125.u32[0]);
          v118.i16[5] = *(_WORD *)(v57 + 2 * v125.u32[1]);
          v118.i16[6] = *(_WORD *)(v57 + 2 * v125.u32[2]);
          v118.i16[7] = *(_WORD *)(v57 + 2 * v125.u32[3]);
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v92));
          uint32x4_t v128 = vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v119.i16[0] = *(_WORD *)(v57 + 2 * v129.u32[0]);
          v119.i16[1] = *(_WORD *)(v57 + 2 * v129.u32[1]);
          v119.i16[2] = *(_WORD *)(v57 + 2 * v129.u32[2]);
          v119.i16[3] = *(_WORD *)(v57 + 2 * v129.u32[3]);
          v119.i16[4] = *(_WORD *)(v57 + 2 * v128.u32[0]);
          v119.i16[5] = *(_WORD *)(v57 + 2 * v128.u32[1]);
          v119.i16[6] = *(_WORD *)(v57 + 2 * v128.u32[2]);
          v119.i16[7] = *(_WORD *)(v57 + 2 * v128.u32[3]);
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v123, v222), v118, v221), v119, v220), vmaxq_f16(vmaxq_f16(v123, v118), v119), v219), (float16x8_t)0), v92));
          uint32x4_t v131 = vmovl_high_u16(v130);
          float16x8_t v132 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v130.i8);
          v132.i16[0] = *(_WORD *)(v56 + 2 * v132.u32[0]);
          v132.i16[1] = *(_WORD *)(v56 + 2 * v132.u32[1]);
          v132.i16[2] = *(_WORD *)(v56 + 2 * v132.u32[2]);
          v132.i16[3] = *(_WORD *)(v56 + 2 * v132.u32[3]);
          v132.i16[4] = *(_WORD *)(v56 + 2 * v131.u32[0]);
          v132.i16[5] = *(_WORD *)(v56 + 2 * v131.u32[1]);
          v132.i16[6] = *(_WORD *)(v56 + 2 * v131.u32[2]);
          v132.i16[7] = *(_WORD *)(v56 + 2 * v131.u32[3]);
          float16x8_t v133 = vmulq_f16(v123, v132);
          float16x8_t v134 = vmulq_f16(v118, v132);
          float16x8_t v135 = vmulq_f16(v119, v132);
          float16x8_t v136 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, v215), v134, v213), v135, _H11);
          float16x8_t v137 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v135, _H1), v134, _H0), v133, _H12);
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, v218), v134, v217), v135, v216), (float16x8_t)0), v92));
          uint32x4_t v139 = vmovl_high_u16(v138);
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v138.i8);
          v141.i16[0] = *(_WORD *)(v58 + 2 * v140.u32[0]);
          v141.i16[1] = *(_WORD *)(v58 + 2 * v140.u32[1]);
          v141.i16[2] = *(_WORD *)(v58 + 2 * v140.u32[2]);
          v141.i16[3] = *(_WORD *)(v58 + 2 * v140.u32[3]);
          v141.i16[4] = *(_WORD *)(v58 + 2 * v139.u32[0]);
          v141.i16[5] = *(_WORD *)(v58 + 2 * v139.u32[1]);
          v141.i16[6] = *(_WORD *)(v58 + 2 * v139.u32[2]);
          v141.i16[7] = *(_WORD *)(v58 + 2 * v139.u32[3]);
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v136, (float16x8_t)0), v92));
          uint32x4_t v143 = vmovl_high_u16(v142);
          uint32x4_t v144 = vmovl_u16(*(uint16x4_t *)v142.i8);
          v145.i16[0] = *(_WORD *)(v58 + 2 * v144.u32[0]);
          v145.i16[1] = *(_WORD *)(v58 + 2 * v144.u32[1]);
          v145.i16[2] = *(_WORD *)(v58 + 2 * v144.u32[2]);
          v145.i16[3] = *(_WORD *)(v58 + 2 * v144.u32[3]);
          v145.i16[4] = *(_WORD *)(v58 + 2 * v143.u32[0]);
          v145.i16[5] = *(_WORD *)(v58 + 2 * v143.u32[1]);
          v145.i16[6] = *(_WORD *)(v58 + 2 * v143.u32[2]);
          v145.i16[7] = *(_WORD *)(v58 + 2 * v143.u32[3]);
          uint16x8_t v146 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v137, (float16x8_t)0), v92));
          _Q3 = (float16x8_t)vmovl_high_u16(v146);
          _Q2 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v146.i8);
          v147.i16[0] = *(_WORD *)(v58 + 2 * _Q2.u32[0]);
          v147.i16[1] = *(_WORD *)(v58 + 2 * _Q2.u32[1]);
          v147.i16[2] = *(_WORD *)(v58 + 2 * _Q2.u32[2]);
          v147.i16[3] = *(_WORD *)(v58 + 2 * _Q2.u32[3]);
          v147.i16[4] = *(_WORD *)(v58 + 2 * _Q3.u32[0]);
          v147.i16[5] = *(_WORD *)(v58 + 2 * _Q3.u32[1]);
          v147.i16[6] = *(_WORD *)(v58 + 2 * _Q3.u32[2]);
          v147.i16[7] = *(_WORD *)(v58 + 2 * _Q3.u32[3]);
          _Q3.i32[0] = v230.i32[0];
          *(int8x8_t *)_Q2.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, v141, v225), v145, v224), v147, v223), v59), v230)));
          *v108++ = _Q2.i64[0];
          if (v109)
          {
            _Q3 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v141, v194), v145, v193), v147, v192);
            v239.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v60, v141, v197), v145, v196), v147, v195), v62), v63), v62), v63)));
            _Q2 = (int16x8_t)vcvtq_u16_f16(_Q3);
            v239.val[1] = vmovn_s16(_Q2);
            vst2_s8(v109, v239);
            v109 += 16;
          }
          v105 += 8;
        }
        while (v105 < (int)v8 - 7);
        size_t v148 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v148;
      size_t v149 = v8 - v148;
      if (v149 != 0 && _CF)
      {
        do
        {
          if (v107)
          {
            _Q2.i8[0] = *(unsigned char *)v107;
            float v150 = (float)_Q2.u32[0] - v34;
            _Q3.i8[0] = *(unsigned char *)(v107 + 1);
            float v151 = (float)_Q3.u32[0] - v34;
            v107 += 2;
            float v152 = v208 * v151;
            float v153 = (float)(v206 * v151) + (float)(v150 * v207);
            float v154 = v203 * v150;
          }
          else
          {
            float v154 = 0.0;
            float v153 = 0.0;
            float v152 = 0.0;
          }
          unsigned int v155 = v106->u8[0];
          float v106 = (int8x8_t *)((char *)v106 + 1);
          float v156 = v234 * (float)((float)v155 - v235);
          float v157 = v152 + v156;
          float v158 = 8191.0;
          if (v157 <= 8191.0)
          {
            float v158 = v157;
            if (v157 < 0.0) {
              float v158 = 0.0;
            }
          }
          float v159 = v153 + v156;
          BOOL v160 = (float)(v153 + v156) <= 8191.0;
          float v161 = 8191.0;
          if (v160)
          {
            float v161 = v159;
            if (v159 < 0.0) {
              float v161 = 0.0;
            }
          }
          float v162 = v154 + v156;
          float v163 = 8191.0;
          if (v162 <= 8191.0)
          {
            float v163 = v162;
            if (v162 < 0.0) {
              float v163 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S18, H2 }
          _H2 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          unsigned int v167 = llroundf(fminf(fmaxf(v163, 0.0), 8191.0));
          __asm { FCVT            S3, H2 }
          _H2 = *(_WORD *)(v57 + 2 * v167);
          __asm { FCVT            S19, H2 }
          float v171 = fmaxf(_S18, fmaxf(_S3, _S19));
          float v172 = (float)((float)((float)(v227 * _S3) + (float)(v228 * _S18)) + (float)(v226 * _S19))
               + (float)(v214 * v171);
          float v173 = 8191.0;
          if (v172 <= 8191.0)
          {
            float v173 = (float)((float)((float)(v227 * _S3) + (float)(v228 * _S18)) + (float)(v226 * _S19))
                 + (float)(v214 * v171);
            if (v172 < 0.0) {
              float v173 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v56 + 2 * llroundf(v173));
          __asm { FCVT            S2, H2 }
          float v176 = _S18 * _S2;
          _S3 = _S3 * _S2;
          float v178 = _S19 * _S2;
          float v179 = (float)((float)(v229 * _S3) + (float)(v176 * v231)) + (float)(v178 * _S26);
          float v180 = (float)((float)(v97 * _S3) + (float)(v176 * _S7)) + (float)(v178 * _S10);
          _S2 = (float)((float)(_S17 * _S3) + (float)(v176 * v101)) + (float)(v178 * _S9);
          LOWORD(_S3) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v179, 0.0), 8191.0)));
          __asm { FCVT            S18, H3 }
          LOWORD(_S3) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v180, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S2) = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S20, H2 }
          *(float *)_Q2.i32 = (float)((float)((float)(v236 * _S19) + (float)(v237 * _S18)) + (float)(v233 * _S20)) + v88;
          *(float *)_Q3.i32 = (float)v29;
          if (*(float *)_Q2.i32 <= (float)v29)
          {
            *(float *)_Q3.i32 = (float)((float)((float)(v236 * _S19) + (float)(v237 * _S18)) + (float)(v233 * _S20))
                              + v88;
            if (*(float *)_Q2.i32 < v88) {
              *(float *)_Q3.i32 = v88;
            }
          }
          *(unsigned char *)float v108 = llroundf(*(float *)_Q3.i32);
          float v108 = (void *)((char *)v108 + 1);
          if (v109)
          {
            float v185 = (float)((float)(v91 + (float)(_S18 * v211)) + (float)(_S19 * v210)) + (float)(_S20 * v209);
            float v186 = v94;
            if (v185 <= v94)
            {
              float v186 = (float)((float)(v91 + (float)(_S18 * v211)) + (float)(_S19 * v210)) + (float)(_S20 * v209);
              if (v185 < v212) {
                float v186 = v212;
              }
            }
            *(float *)_Q2.i32 = (float)(v91 + (float)(_S18 * v205)) + (float)(_S19 * v204);
            float v187 = *(float *)_Q2.i32 + (float)(_S20 * v202);
            *float v109 = llroundf(v186);
            *(float *)_Q3.i32 = v94;
            if (v187 <= v94)
            {
              *(float *)_Q2.i32 = v212;
              *(float *)_Q3.i32 = v187;
              if (v187 < v212) {
                *(float *)_Q3.i32 = v212;
              }
            }
            v109[1] = llroundf(*(float *)_Q3.i32);
            v109 += 2;
          }
          --v149;
        }
        while (v149);
      }
      float v70 = (int8x8_t *)((char *)v70 + v20);
      v69 += v21;
      float v66 = (void *)((char *)v66 + v23);
      uint64_t result = (void *)((char *)result + v24);
      ++v7;
    }
    while (v7 != v11);
    if (v191 && v190)
    {
      do
      {
        uint64_t result = memcpy(v25, v22, v8);
        v22 += v188;
        v25 += v189;
        --v11;
      }
      while (v11);
    }
    else if (v190)
    {
      do
      {
        if (v8) {
          uint64_t result = memset(v25, 255, v8);
        }
        v25 += v189;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    unint64_t v16 = result[13] * a2 / v7;
    uint64_t v17 = (void *)result[16];
    unint64_t v18 = v16 + result[15];
    uint64_t v19 = result[19];
    int64x2_t v20 = (void *)result[7];
    long long v21 = (uint64_t *)result[8];
    int64x2_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    unsigned int v27 = (char *)(v26 + v25 * v13 + v12);
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    unint64_t v32 = (char *)(v31 + v30 * v18 + v15);
    LOWORD(a4) = *(_WORD *)(v19 + 140);
    LOWORD(a5) = *(_WORD *)(v19 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    float v34 = (float)LODWORD(a4);
    float v35 = (float)LODWORD(a5);
    float v36 = v33 * *(float *)v19;
    float v126 = v33 * *(float *)(v19 + 16);
    float v127 = v33 * *(float *)(v19 + 8);
    float v37 = v33 * *(float *)(v19 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v19 + 28);
    float v124 = *(float *)&v38;
    float v125 = v37;
    LOWORD(v38) = *(_WORD *)(v19 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 152);
    float v43 = (float)v38;
    float v44 = *(float *)(v19 + 36);
    float v45 = *(float *)(v19 + 40);
    float v46 = *(float *)(v19 + 44);
    float v122 = *(float *)(v19 + 52);
    float v123 = *(float *)(v19 + 48);
    float v120 = *(float *)(v19 + 60);
    float v121 = *(float *)(v19 + 56);
    float v47 = *(float *)(v19 + 64);
    float v48 = *(float *)(v19 + 68);
    float v119 = v47;
    float v49 = *(float *)(v19 + 72);
    float v50 = *(float *)(v19 + 76);
    float v51 = *(float *)(v19 + 80);
    float v52 = *(float *)(v19 + 84);
    float v53 = *(float *)(v19 + 88);
    float v54 = *(float *)(v19 + 92);
    float v55 = *(float *)(v19 + 96);
    float v56 = *(float *)(v19 + 100);
    float v57 = *(float *)(v19 + 104);
    uint64_t v58 = v19 + 164;
    uint64_t v59 = v19 + 16548;
    uint64_t v60 = v17[1];
    _ZF = v60 == 0;
    uint64_t v62 = v60 + v29 * v18;
    uint64_t v63 = *v17 + v28 * v18;
    uint64_t v64 = v19 + 32932;
    uint64_t result = (void *)(v62 + v15);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v65 = (unsigned char *)(v63 + v15);
    uint64_t v68 = v20;
    uint64_t v67 = *v20;
    uint64_t v66 = v68[1];
    _ZF = v66 == 0;
    uint64_t v69 = (unsigned char *)(v66 + v24 * v13 + v12);
    if (_ZF) {
      uint64_t v69 = 0;
    }
    float v70 = (unsigned __int8 *)(v67 + v23 * v13 + v12);
    float v72 = *(float *)(v19 + 108);
    float v71 = *(float *)(v19 + 112);
    float v73 = *(float *)(v19 + 116);
    float v74 = *(float *)(v19 + 120);
    do
    {
      size_t v75 = v11;
      uint64_t v76 = v70;
      uint64_t v77 = v69;
      float v78 = result;
      for (uint64_t i = v65; v75; --v75)
      {
        if (v77)
        {
          LOBYTE(v47) = *v77;
          float v80 = (float)LODWORD(v47) - v35;
          LOBYTE(_S24) = v77[1];
          float v81 = (float)LODWORD(_S24) - v35;
          v77 += 2;
          float v82 = v127 * v81;
          float v83 = (float)(v125 * v81) + (float)(v80 * v126);
          float v84 = v124 * v80;
        }
        else
        {
          float v84 = 0.0;
          float v83 = 0.0;
          float v82 = 0.0;
        }
        unsigned int v85 = *v76++;
        float v86 = v36 * (float)((float)v85 - v34);
        float v87 = v82 + v86;
        float v88 = 8191.0;
        if (v87 <= 8191.0)
        {
          float v88 = v87;
          if (v87 < 0.0) {
            float v88 = 0.0;
          }
        }
        float v89 = v83 + v86;
        BOOL v90 = (float)(v83 + v86) <= 8191.0;
        float v91 = 8191.0;
        if (v90)
        {
          float v91 = v89;
          if (v89 < 0.0) {
            float v91 = 0.0;
          }
        }
        float v92 = v84 + v86;
        float v93 = 8191.0;
        if (v92 <= 8191.0)
        {
          float v93 = v92;
          if (v92 < 0.0) {
            float v93 = 0.0;
          }
        }
        _H0 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
        __asm { FCVT            S24, H0 }
        _H0 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
        __asm { FCVT            S25, H0 }
        _H0 = *(_WORD *)(v58 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        float v103 = (float)((float)((float)(v71 * _S25) + (float)(v72 * _S24)) + (float)(v73 * _S26))
             + (float)(v74 * fmaxf(_S24, fmaxf(_S25, _S26)));
        float v104 = 8191.0;
        if (v103 <= 8191.0)
        {
          float v104 = v103;
          if (v103 < 0.0) {
            float v104 = 0.0;
          }
        }
        _H0 = *(_WORD *)(v59 + 2 * llroundf(v104));
        __asm { FCVT            S0, H0 }
        _S24 = _S24 * _S0;
        _S25 = _S25 * _S0;
        float v109 = _S26 * _S0;
        float v110 = (float)((float)(v50 * _S25) + (float)(_S24 * v49)) + (float)(v109 * v51);
        float v111 = (float)((float)(v53 * _S25) + (float)(_S24 * v52)) + (float)(v109 * v54);
        _S0 = (float)((float)(v56 * _S25) + (float)(_S24 * v55)) + (float)(v109 * v57);
        LOWORD(_S24) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v110, 0.0), 8191.0)));
        __asm { FCVT            S24, H24 }
        LOWORD(_S25) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
        __asm { FCVT            S25, H25 }
        LOWORD(_S0) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        float v47 = (float)((float)((float)(v45 * _S25) + (float)(v44 * _S24)) + (float)(v46 * _S26)) + v39;
        float v115 = v41;
        if (v47 <= v41)
        {
          float v115 = (float)((float)((float)(v45 * _S25) + (float)(v44 * _S24)) + (float)(v46 * _S26)) + v39;
          if (v47 < v39) {
            float v115 = v39;
          }
        }
        *i++ = llroundf(v115);
        if (v78)
        {
          float v116 = (float)((float)(v40 + (float)(_S24 * v123)) + (float)(_S25 * v122)) + (float)(_S26 * v121);
          float v117 = v43;
          if (v116 <= v43)
          {
            float v117 = (float)((float)(v40 + (float)(_S24 * v123)) + (float)(_S25 * v122)) + (float)(_S26 * v121);
            if (v116 < v42) {
              float v117 = v42;
            }
          }
          float v47 = (float)(v40 + (float)(_S24 * v120)) + (float)(_S25 * v119);
          _S24 = v47 + (float)(_S26 * v48);
          *float v78 = llroundf(v117);
          float v118 = v43;
          if (_S24 <= v43)
          {
            float v118 = v47 + (float)(_S26 * v48);
            if (_S24 < v42) {
              float v118 = v42;
            }
          }
          v78[1] = llroundf(v118);
          v78 += 2;
        }
      }
      v70 += v23;
      v69 += v24;
      v65 += v28;
      uint64_t result = (void *)((char *)result + v29);
      ++v10;
    }
    while (v10 != v14);
    if (v26 && v31)
    {
      do
      {
        uint64_t result = memcpy(v32, v27, v11);
        v27 += v25;
        v32 += v30;
        --v14;
      }
      while (v14);
    }
    else if (v31)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v32, 255, v11);
        }
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_444vf_neon_fp16_GCD(void *result, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)((char *)result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    size_t v8 = *(void *)((char *)result + 20);
    uint64_t v9 = *(void *)((char *)result + 36);
    unint64_t v10 = v5 + *(void *)((char *)result + 44);
    unint64_t v11 = v6 - v5;
    uint64_t v12 = result[14];
    int64x2_t v13 = (uint64_t *)result[16];
    unint64_t v14 = result[13] * a2 / v4 + result[15];
    uint64_t v15 = result[19];
    unint64_t v16 = (uint64_t *)result[7];
    uint64_t v17 = (uint64_t *)result[8];
    uint64_t v18 = (uint64_t *)result[17];
    uint64_t v19 = *v17;
    uint64_t v20 = v17[1];
    uint64_t v179 = v17[2];
    uint64_t v181 = v16[2];
    long long v21 = (char *)(v181 + v179 * v10 + v9);
    uint64_t v22 = *v18;
    uint64_t v23 = v18[1];
    uint64_t v24 = v18[2];
    uint64_t v180 = v13[2];
    uint64_t v25 = (char *)(v180 + v24 * v14 + v12);
    unsigned int v26 = *(unsigned __int16 *)(v15 + 140);
    unsigned int v27 = *(unsigned __int16 *)(v15 + 142);
    unsigned int v28 = *(unsigned __int16 *)(v15 + 144);
    unsigned int v29 = *(unsigned __int16 *)(v15 + 146);
    unsigned int v30 = *(unsigned __int16 *)(v15 + 148);
    unsigned int v31 = *(unsigned __int16 *)(v15 + 150);
    unsigned int v32 = *(unsigned __int16 *)(v15 + 152);
    *(float *)&a3 = 8191.0 / (float)*(unsigned int *)(v15 + 128);
    float v221 = (float)v26;
    float v33 = (float)v27;
    _S7 = *(_DWORD *)(v15 + 36);
    _S9 = *(_DWORD *)(v15 + 40);
    *(float *)_Q3.i32 = *(float *)&a3 * *(float *)(v15 + 8);
    _S4 = *(float *)&a3 * *(float *)(v15 + 16);
    _S17 = *(_DWORD *)(v15 + 44);
    _S10 = *(_DWORD *)(v15 + 48);
    _S20 = *(_DWORD *)(v15 + 52);
    _S11 = *(_DWORD *)(v15 + 56);
    _S5 = *(float *)&a3 * *(float *)(v15 + 20);
    _S6 = *(float *)&a3 * *(float *)(v15 + 28);
    float v220 = *(float *)&a3 * *(float *)v15;
    __asm { FCVT            H8, S1 }
    _S1 = *(_DWORD *)(v15 + 60);
    _S22 = *(_DWORD *)(v15 + 64);
    *(short float *)&a3 = (short float)v26;
    int16x8_t v51 = vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float16x8_t v219 = (float16x8_t)v51;
    _S23 = *(_DWORD *)(v15 + 68);
    _S24 = *(_DWORD *)(v15 + 72);
    *(short float *)v51.i16 = -(short float)v27;
    float16x8_t v54 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v51.i8, 0);
    *(short float *)v51.i16 = (short float)v28;
    float16x8_t v55 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v51.i8, 0);
    *(short float *)v51.i16 = (short float)v29;
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v51.i8, 0);
    _S25 = *(_DWORD *)(v15 + 76);
    _S26 = *(_DWORD *)(v15 + 80);
    _S30 = *(_DWORD *)(v15 + 84);
    _S31 = *(float *)(v15 + 88);
    _S16 = *(_DWORD *)(v15 + 92);
    _S19 = *(_DWORD *)(v15 + 96);
    uint64_t v63 = v15 + 164;
    uint64_t v64 = v15 + 16548;
    *(short float *)v51.i16 = (short float)v30;
    int16x8_t v65 = vdupq_lane_s16(*(int16x4_t *)v51.i8, 0);
    float16x8_t v215 = (float16x8_t)v65;
    *(short float *)v65.i16 = (short float)v31;
    float16x8_t v66 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v65.i8, 0);
    *(short float *)v65.i16 = (short float)v32;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v65.i8, 0);
    uint64_t v69 = *v13;
    uint64_t v68 = v13[1];
    float v70 = (char *)(v68 + v23 * v14 + v12);
    if (!v68) {
      float v70 = 0;
    }
    uint64_t result = (void *)(v69 + v22 * v14 + v12);
    uint64_t v72 = *v16;
    uint64_t v71 = v16[1];
    uint64_t v73 = v71 + v20 * v10 + v9;
    if (!v71) {
      uint64_t v73 = 0;
    }
    float v74 = (int8x8_t *)(v72 + v19 * v10 + v9);
    float v194 = _S6;
    float v195 = _S5;
    __asm { FCVT            H6, S6 }
    float v199 = _S4;
    float v200 = *(float *)_Q3.i32;
    __asm { FCVT            H4, S4 }
    short float v190 = _H4;
    __asm
    {
      FCVT            H4, S5
      FCVT            H3, S3
    }
    short float v188 = _H3;
    short float v189 = _H4;
    float v217 = *(float *)(v15 + 40);
    float v218 = *(float *)(v15 + 36);
    __asm { FCVT            H3, S7 }
    short float v212 = _H3;
    __asm { FCVT            H3, S9 }
    short float v211 = _H3;
    float v216 = *(float *)(v15 + 44);
    __asm { FCVT            H3, S17 }
    short float v210 = _H3;
    float v197 = *(float *)(v15 + 52);
    float v198 = *(float *)(v15 + 48);
    __asm { FCVT            H3, S10 }
    short float v187 = _H3;
    __asm { FCVT            H3, S20 }
    short float v186 = _H3;
    float v196 = *(float *)(v15 + 56);
    __asm { FCVT            H3, S11 }
    float v192 = *(float *)(v15 + 64);
    float v193 = *(float *)(v15 + 60);
    __asm { FCVT            H1, S1 }
    short float v184 = _H1;
    short float v185 = *(short float *)_Q3.i16;
    __asm { FCVT            H1, S22 }
    short float v183 = _H1;
    float v191 = *(float *)(v15 + 68);
    __asm { FCVT            H1, S23 }
    short float v182 = _H1;
    float v214 = *(float *)(v15 + 72);
    __asm { FCVT            H1, S24 }
    short float v209 = _H1;
    float v213 = *(float *)(v15 + 76);
    __asm { FCVT            H1, S25 }
    short float v208 = _H1;
    float v89 = *(float *)(v15 + 80);
    __asm { FCVT            H1, S26 }
    short float v207 = _H1;
    float v91 = *(float *)(v15 + 84);
    __asm { FCVT            H1, S30 }
    short float v206 = _H1;
    __asm { FCVT            H1, S31 }
    short float v205 = _H1;
    float v94 = *(float *)(v15 + 92);
    __asm { FCVT            H1, S16 }
    short float v204 = _H1;
    float v96 = *(float *)(v15 + 96);
    __asm { FCVT            H1, S19 }
    _S12 = *(float *)(v15 + 100);
    __asm { FCVT            H0, S0 }
    short float v202 = _H0;
    short float v203 = _H1;
    float v100 = (float)v28;
    v101.i64[0] = 0x9000900090009000;
    v101.i64[1] = 0x9000900090009000;
    float v102 = (float)v29;
    float v103 = (float)v30;
    *(float *)v104.i32 = (float)v31;
    float v201 = (float)v31;
    float v105 = (float)v32;
    _S9 = *(float *)(v15 + 104);
    __asm { FCVT            H1, S21 }
    do
    {
      if ((int)v8 < 8)
      {
        size_t v146 = 0;
        float16x8_t v112 = v70;
        float v111 = result;
        uint64_t v110 = v73;
        float v109 = v74;
      }
      else
      {
        int v108 = 0;
        float v109 = v74;
        uint64_t v110 = v73;
        float v111 = result;
        float16x8_t v112 = v70;
        do
        {
          if (v110)
          {
            float16x8_t v222 = (float16x8_t)vld2_s8((const char *)v110);
            v110 += 16;
            *(int8x8_t *)v113.i8 = vzip1_s8(*(int8x8_t *)v222.i8, 0);
            v113.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v222.i8, 0);
            *(int8x8_t *)v114.i8 = vzip1_s8((int8x8_t)v222.u64[1], 0);
            v114.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v222.u64[1], 0);
            float16x8_t v115 = vaddq_f16(v54, vcvtq_f16_u16(v113));
            float16x8_t v222 = vaddq_f16(v54, vcvtq_f16_u16(v114));
            float16x8_t v116 = vmulq_n_f16(v222, v188);
            float16x8_t v117 = vmlaq_n_f16(vmulq_n_f16(v115, v190), v222, v189);
            float16x8_t v118 = vmulq_n_f16(v115, _H6);
          }
          else
          {
            float16x8_t v118 = 0uLL;
            float16x8_t v117 = 0uLL;
            float16x8_t v116 = 0uLL;
          }
          int8x8_t v119 = *v109++;
          *(int8x8_t *)v120.i8 = vzip1_s8(v119, 0);
          v120.u64[1] = (unint64_t)vzip2_s8(v119, 0);
          float16x8_t v121 = vsubq_f16(vcvtq_f16_u16(v120), v219);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v116, v121, _H8), (float16x8_t)0), v101));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v125.i16[0] = *(_WORD *)(v63 + 2 * v124.u32[0]);
          v125.i16[1] = *(_WORD *)(v63 + 2 * v124.u32[1]);
          v125.i16[2] = *(_WORD *)(v63 + 2 * v124.u32[2]);
          v125.i16[3] = *(_WORD *)(v63 + 2 * v124.u32[3]);
          v125.i16[4] = *(_WORD *)(v63 + 2 * v123.u32[0]);
          v125.i16[5] = *(_WORD *)(v63 + 2 * v123.u32[1]);
          v125.i16[6] = *(_WORD *)(v63 + 2 * v123.u32[2]);
          v125.i16[7] = *(_WORD *)(v63 + 2 * v123.u32[3]);
          float16x8_t v126 = vmlaq_n_f16(v118, v121, _H8);
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v117, v121, _H8), (float16x8_t)0), v101));
          uint32x4_t v128 = vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v130.i16[0] = *(_WORD *)(v63 + 2 * v129.u32[0]);
          v130.i16[1] = *(_WORD *)(v63 + 2 * v129.u32[1]);
          v130.i16[2] = *(_WORD *)(v63 + 2 * v129.u32[2]);
          v130.i16[3] = *(_WORD *)(v63 + 2 * v129.u32[3]);
          v130.i16[4] = *(_WORD *)(v63 + 2 * v128.u32[0]);
          v130.i16[5] = *(_WORD *)(v63 + 2 * v128.u32[1]);
          v130.i16[6] = *(_WORD *)(v63 + 2 * v128.u32[2]);
          v130.i16[7] = *(_WORD *)(v63 + 2 * v128.u32[3]);
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, (float16x8_t)0), v101));
          uint32x4_t v132 = vmovl_high_u16(v131);
          float16x8_t v133 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v131.i8);
          v133.i16[0] = *(_WORD *)(v63 + 2 * v133.u32[0]);
          v133.i16[1] = *(_WORD *)(v63 + 2 * v133.u32[1]);
          v133.i16[2] = *(_WORD *)(v63 + 2 * v133.u32[2]);
          v133.i16[3] = *(_WORD *)(v63 + 2 * v133.u32[3]);
          v133.i16[4] = *(_WORD *)(v63 + 2 * v132.u32[0]);
          v133.i16[5] = *(_WORD *)(v63 + 2 * v132.u32[1]);
          v133.i16[6] = *(_WORD *)(v63 + 2 * v132.u32[2]);
          v133.i16[7] = *(_WORD *)(v63 + 2 * v132.u32[3]);
          float16x8_t v134 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v206), v130, v205), v133, v204);
          float16x8_t v135 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, _H1), v130, v202), v125, v203);
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v209), v130, v208), v133, v207), (float16x8_t)0), v101));
          uint32x4_t v137 = vmovl_high_u16(v136);
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v136.i8);
          v139.i16[0] = *(_WORD *)(v64 + 2 * v138.u32[0]);
          v139.i16[1] = *(_WORD *)(v64 + 2 * v138.u32[1]);
          v139.i16[2] = *(_WORD *)(v64 + 2 * v138.u32[2]);
          v139.i16[3] = *(_WORD *)(v64 + 2 * v138.u32[3]);
          v139.i16[4] = *(_WORD *)(v64 + 2 * v137.u32[0]);
          v139.i16[5] = *(_WORD *)(v64 + 2 * v137.u32[1]);
          v139.i16[6] = *(_WORD *)(v64 + 2 * v137.u32[2]);
          v139.i16[7] = *(_WORD *)(v64 + 2 * v137.u32[3]);
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v101));
          uint32x4_t v141 = vmovl_high_u16(v140);
          uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v140.i8);
          v143.i16[0] = *(_WORD *)(v64 + 2 * v142.u32[0]);
          v143.i16[1] = *(_WORD *)(v64 + 2 * v142.u32[1]);
          v143.i16[2] = *(_WORD *)(v64 + 2 * v142.u32[2]);
          v143.i16[3] = *(_WORD *)(v64 + 2 * v142.u32[3]);
          v143.i16[4] = *(_WORD *)(v64 + 2 * v141.u32[0]);
          v143.i16[5] = *(_WORD *)(v64 + 2 * v141.u32[1]);
          v143.i16[6] = *(_WORD *)(v64 + 2 * v141.u32[2]);
          v143.i16[7] = *(_WORD *)(v64 + 2 * v141.u32[3]);
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v135, (float16x8_t)0), v101));
          _Q3 = (float16x8_t)vmovl_high_u16(v144);
          int16x8_t v104 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v144.i8);
          v145.i16[0] = *(_WORD *)(v64 + 2 * v104.u32[0]);
          v145.i16[1] = *(_WORD *)(v64 + 2 * v104.u32[1]);
          v145.i16[2] = *(_WORD *)(v64 + 2 * v104.u32[2]);
          v145.i16[3] = *(_WORD *)(v64 + 2 * v104.u32[3]);
          v145.i16[4] = *(_WORD *)(v64 + 2 * _Q3.u32[0]);
          v145.i16[5] = *(_WORD *)(v64 + 2 * _Q3.u32[1]);
          v145.i16[6] = *(_WORD *)(v64 + 2 * _Q3.u32[2]);
          v145.i16[7] = *(_WORD *)(v64 + 2 * _Q3.u32[3]);
          _Q3.i32[0] = v215.i32[0];
          *(int8x8_t *)v104.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v55, v139, v212), v143, v211), v145, v210), v55), v215)));
          *v111++ = v104.i64[0];
          if (v112)
          {
            _Q3 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v56, v139, v184), v143, v183), v145, v182);
            v223.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v56, v139, v187), v143, v186), v145, v185), v66), v67), v66), v67)));
            int16x8_t v104 = (int16x8_t)vcvtq_u16_f16(_Q3);
            v223.val[1] = vmovn_s16(v104);
            vst2_s8(v112, v223);
            v112 += 16;
          }
          v108 += 8;
        }
        while (v108 < (int)v8 - 7);
        size_t v146 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v146;
      size_t v147 = v8 - v146;
      if (v147 != 0 && _CF)
      {
        do
        {
          if (v110)
          {
            v104.i8[0] = *(unsigned char *)v110;
            float v148 = (float)v104.u32[0] - v33;
            _Q3.i8[0] = *(unsigned char *)(v110 + 1);
            float v149 = (float)_Q3.u32[0] - v33;
            v110 += 2;
            float v150 = v200 * v149;
            float v151 = (float)(v195 * v149) + (float)(v148 * v199);
            float v152 = v194 * v148;
          }
          else
          {
            float v152 = 0.0;
            float v151 = 0.0;
            float v150 = 0.0;
          }
          unsigned int v153 = v109->u8[0];
          float v109 = (int8x8_t *)((char *)v109 + 1);
          float v154 = v220 * (float)((float)v153 - v221);
          float v155 = v150 + v154;
          float v156 = 8191.0;
          if (v155 <= 8191.0)
          {
            float v156 = v155;
            if (v155 < 0.0) {
              float v156 = 0.0;
            }
          }
          float v157 = v151 + v154;
          BOOL v158 = (float)(v151 + v154) <= 8191.0;
          float v159 = 8191.0;
          if (v158)
          {
            float v159 = v157;
            if (v157 < 0.0) {
              float v159 = 0.0;
            }
          }
          float v160 = v152 + v154;
          BOOL v158 = (float)(v152 + v154) <= 8191.0;
          float v161 = 8191.0;
          if (v158)
          {
            float v161 = v160;
            if (v160 < 0.0) {
              float v161 = 0.0;
            }
          }
          _H0 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm { FCVT            S0, H0 }
          _H3 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          float v168 = (float)((float)(v213 * _S3) + (float)(_S0 * v214)) + (float)(_S4 * v89);
          float v169 = (float)((float)(_S31 * _S3) + (float)(_S0 * v91)) + (float)(_S4 * v94);
          _S0 = (float)(_S12 * _S3) + (float)(_S0 * v96);
          LOWORD(_S3) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          __asm { FCVT            S17, H3 }
          LOWORD(_S3) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          __asm { FCVT            S21, H3 }
          LOWORD(_S0) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S0 + (float)(_S4 * _S9), 0.0), 8191.0)));
          __asm { FCVT            S23, H0 }
          *(float *)_Q3.i32 = v216;
          *(float *)v104.i32 = (float)((float)((float)(v217 * _S21) + (float)(v218 * _S17)) + (float)(v216 * _S23))
                             + v100;
          float v174 = v103;
          if (*(float *)v104.i32 <= v103)
          {
            float v174 = (float)((float)((float)(v217 * _S21) + (float)(v218 * _S17)) + (float)(v216 * _S23)) + v100;
            if (*(float *)v104.i32 < v100) {
              float v174 = (float)v28;
            }
          }
          *(unsigned char *)float v111 = llroundf(v174);
          float v111 = (void *)((char *)v111 + 1);
          if (v112)
          {
            float v175 = (float)((float)(v102 + (float)(_S17 * v198)) + (float)(_S21 * v197)) + (float)(_S23 * v196);
            float v176 = (float)v32;
            if (v175 <= v105)
            {
              float v176 = (float)((float)(v102 + (float)(_S17 * v198)) + (float)(_S21 * v197)) + (float)(_S23 * v196);
              if (v175 < v201) {
                float v176 = v201;
              }
            }
            *(float *)v104.i32 = (float)(v102 + (float)(_S17 * v193)) + (float)(_S21 * v192);
            *(float *)_Q3.i32 = v191;
            float v177 = *(float *)v104.i32 + (float)(_S23 * v191);
            *float16x8_t v112 = llroundf(v176);
            float v178 = (float)v32;
            if (v177 <= v105)
            {
              *(float *)v104.i32 = v201;
              float v178 = v177;
              if (v177 < v201) {
                float v178 = v201;
              }
            }
            v112[1] = llroundf(v178);
            v112 += 2;
          }
          --v147;
        }
        while (v147);
      }
      float v74 = (int8x8_t *)((char *)v74 + v19);
      v73 += v20;
      uint64_t result = (void *)((char *)result + v22);
      v70 += v23;
      ++v7;
    }
    while (v7 != v11);
    if (v181 && v180)
    {
      do
      {
        uint64_t result = memcpy(v25, v21, v8);
        v21 += v179;
        v25 += v24;
        --v11;
      }
      while (v11);
    }
    else if (v180)
    {
      do
      {
        if (v8) {
          uint64_t result = memset(v25, 255, v8);
        }
        v25 += v24;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_444vf_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    size_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    uint64_t v15 = (uint64_t *)result[16];
    unint64_t v16 = result[13] * a2 / v6 + result[15];
    uint64_t v17 = result[19];
    uint64_t v18 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    int64x2_t v20 = (uint64_t *)result[17];
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = (char *)(v24 + v23 * v12 + v11);
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    unsigned int v30 = (char *)(v29 + v28 * v16 + v14);
    LOWORD(a4) = *(_WORD *)(v17 + 140);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    float v32 = (float)LODWORD(a4);
    float v33 = (float)LODWORD(a5);
    float v34 = v31 * *(float *)v17;
    float v111 = v31 * *(float *)(v17 + 16);
    float v112 = v31 * *(float *)(v17 + 8);
    float v35 = v31 * *(float *)(v17 + 20);
    _S4 = *(float *)(v17 + 28);
    *(float *)&unsigned int v37 = v31 * _S4;
    float v109 = *(float *)&v37;
    float v110 = v35;
    LOWORD(v37) = *(_WORD *)(v17 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v17 + 36);
    float v44 = *(float *)(v17 + 40);
    float v46 = *(float *)(v17 + 44);
    float v45 = *(float *)(v17 + 48);
    float v108 = v45;
    float v47 = *(float *)(v17 + 52);
    float v48 = *(float *)(v17 + 56);
    float v49 = *(float *)(v17 + 60);
    float v50 = *(float *)(v17 + 64);
    float v51 = *(float *)(v17 + 68);
    float v52 = *(float *)(v17 + 72);
    float v54 = *(float *)(v17 + 76);
    float v53 = *(float *)(v17 + 80);
    float v55 = *(float *)(v17 + 84);
    float v56 = *(float *)(v17 + 88);
    float v57 = *(float *)(v17 + 92);
    float v58 = *(float *)(v17 + 96);
    float v59 = *(float *)(v17 + 100);
    float v60 = *(float *)(v17 + 104);
    uint64_t v61 = v17 + 164;
    uint64_t v62 = v17 + 16548;
    uint64_t v64 = *v15;
    uint64_t v63 = v15[1];
    int16x8_t v65 = (unsigned char *)(v63 + v27 * v16 + v14);
    if (!v63) {
      int16x8_t v65 = 0;
    }
    uint64_t result = (void *)(v64 + v26 * v16 + v14);
    uint64_t v67 = *v18;
    uint64_t v66 = v18[1];
    uint64_t v68 = (unsigned char *)(v66 + v22 * v12 + v11);
    if (!v66) {
      uint64_t v68 = 0;
    }
    uint64_t v69 = (unsigned __int8 *)(v67 + v21 * v12 + v11);
    do
    {
      size_t v70 = v10;
      uint64_t v71 = v69;
      uint64_t v72 = v68;
      uint64_t v73 = v65;
      for (uint64_t i = result; v70; --v70)
      {
        if (v72)
        {
          LOBYTE(v45) = *v72;
          float v75 = (float)LODWORD(v45) - v33;
          LOBYTE(_S4) = v72[1];
          float v76 = (float)LODWORD(_S4) - v33;
          v72 += 2;
          float v77 = v112 * v76;
          float v78 = (float)(v110 * v76) + (float)(v75 * v111);
          float v79 = v109 * v75;
        }
        else
        {
          float v79 = 0.0;
          float v78 = 0.0;
          float v77 = 0.0;
        }
        unsigned int v80 = *v71++;
        float v81 = v34 * (float)((float)v80 - v32);
        float v82 = v77 + v81;
        float v83 = 8191.0;
        if (v82 <= 8191.0)
        {
          float v83 = v82;
          if (v82 < 0.0) {
            float v83 = 0.0;
          }
        }
        float v84 = v78 + v81;
        BOOL v85 = (float)(v78 + v81) <= 8191.0;
        float v86 = 8191.0;
        if (v85)
        {
          float v86 = v84;
          if (v84 < 0.0) {
            float v86 = 0.0;
          }
        }
        float v87 = v79 + v81;
        BOOL v85 = (float)(v79 + v81) <= 8191.0;
        float v88 = 8191.0;
        if (v85)
        {
          float v88 = v87;
          if (v87 < 0.0) {
            float v88 = 0.0;
          }
        }
        _H0 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H5 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H4 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        float v99 = (float)((float)(v54 * _S5) + (float)(_S0 * v52)) + (float)(_S4 * v53);
        float v100 = (float)((float)(v56 * _S5) + (float)(_S0 * v55)) + (float)(_S4 * v57);
        _S0 = (float)((float)(v59 * _S5) + (float)(_S0 * v58)) + (float)(_S4 * v60);
        LOWORD(_S4) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        LOWORD(_S5) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        LOWORD(_S0) = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S6, H0 }
        float v45 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v46 * _S6)) + v38;
        float v104 = v40;
        if (v45 <= v40)
        {
          float v104 = (float)((float)((float)(v44 * _S5) + (float)(v43 * _S4)) + (float)(v46 * _S6)) + v38;
          if (v45 < v38) {
            float v104 = v38;
          }
        }
        *i++ = llroundf(v104);
        if (v73)
        {
          float v105 = (float)((float)(v39 + (float)(_S4 * v108)) + (float)(_S5 * v47)) + (float)(_S6 * v48);
          float v106 = v42;
          if (v105 <= v42)
          {
            float v106 = (float)((float)(v39 + (float)(_S4 * v108)) + (float)(_S5 * v47)) + (float)(_S6 * v48);
            if (v105 < v41) {
              float v106 = v41;
            }
          }
          float v45 = (float)(v39 + (float)(_S4 * v49)) + (float)(_S5 * v50);
          _S4 = v45 + (float)(_S6 * v51);
          *uint64_t v73 = llroundf(v106);
          float v107 = v42;
          if (_S4 <= v42)
          {
            float v107 = v45 + (float)(_S6 * v51);
            if (_S4 < v41) {
              float v107 = v41;
            }
          }
          v73[1] = llroundf(v107);
          v73 += 2;
        }
      }
      v69 += v21;
      v68 += v22;
      uint64_t result = (void *)((char *)result + v26);
      v65 += v27;
      ++v9;
    }
    while (v9 != v13);
    if (v24 && v29)
    {
      do
      {
        uint64_t result = memcpy(v30, v25, v10);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v30, 255, v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_444vf_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_rgb_444vf_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double _D3)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    unint64_t v16 = (uint64_t *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = result[19];
    int64x2_t v20 = (uint64_t *)result[7];
    uint64_t v19 = (uint64_t *)result[8];
    long long v21 = (uint64_t *)result[17];
    uint64_t v22 = *v19;
    uint64_t v23 = v19[1];
    uint64_t v24 = v19[2];
    uint64_t v25 = v20[2];
    uint64_t v26 = (char *)(v25 + v24 * v13 + v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    float v31 = (char *)(v30 + v29 * v17 + v15);
    unsigned int v32 = *(unsigned __int16 *)(v18 + 140);
    unsigned int v33 = *(unsigned __int16 *)(v18 + 142);
    float v34 = *(float *)(v18 + 8);
    float v35 = *(float *)(v18 + 16);
    float v36 = *(float *)(v18 + 20);
    float v37 = *(float *)(v18 + 28);
    unsigned int v38 = *(unsigned __int16 *)(v18 + 144);
    unsigned int v39 = *(unsigned __int16 *)(v18 + 146);
    unsigned int v40 = *(unsigned __int16 *)(v18 + 148);
    unsigned int v41 = *(unsigned __int16 *)(v18 + 150);
    _S0 = *(float *)(v18 + 36);
    _S1 = *(float *)(v18 + 40);
    _S2 = *(float *)(v18 + 44);
    _S10 = *(float *)(v18 + 48);
    _S21 = *(float *)(v18 + 52);
    _S22 = *(float *)(v18 + 56);
    _S25 = *(float *)(v18 + 60);
    _S28 = *(float *)(v18 + 64);
    _Q20.i32[0] = *(_DWORD *)(v18 + 68);
    float v51 = (float)v33;
    *(float *)&_D3 = (float)*(unsigned int *)(v18 + 136) / (float)*(unsigned int *)(v18 + 128);
    _S19 = *(float *)&_D3 * *(float *)v18;
    LODWORD(v18) = *(unsigned __int16 *)(v18 + 152);
    _S4 = *(float *)&_D3 * v34;
    _S5 = *(float *)&_D3 * v35;
    _S6 = *(float *)&_D3 * v36;
    float v56 = (float)v38;
    float v57 = (float)v39;
    float v58 = (float)v40;
    _S7 = *(float *)&_D3 * v37;
    float v60 = (float)v41;
    float v61 = (float)v18;
    *(short float *)&_D3 = (short float)v32;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D3, 0);
    *(short float *)&_D3 = -(short float)v33;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D3, 0);
    __asm { FCVT            H8, S19 }
    float v139 = _S7;
    __asm { FCVT            H3, S7 }
    short float v138 = *(short float *)&_D3;
    float v141 = _S5;
    __asm { FCVT            H3, S5 }
    short float v136 = *(short float *)&_D3;
    *(short float *)&_D3 = (short float)v38;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D3, 0);
    *(short float *)&_D3 = (short float)v39;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D3, 0);
    *(short float *)&_D3 = (short float)v40;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D3, 0);
    *(short float *)&_D3 = (short float)v41;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D3, 0);
    *(short float *)&_D3 = (short float)v18;
    float16x8_t v73 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D3, 0);
    float v140 = _S6;
    __asm { FCVT            H3, S6 }
    short float v135 = _H3;
    uint64_t v76 = *v16;
    uint64_t v75 = v16[1];
    float v77 = (char *)(v75 + v28 * v17 + v15);
    if (!v75) {
      float v77 = 0;
    }
    float v78 = (int8x8_t *)(v76 + v27 * v17 + v15);
    uint64_t v80 = *v20;
    uint64_t v79 = v20[1];
    uint64_t v81 = v79 + v23 * v13 + v12;
    if (!v79) {
      uint64_t v81 = 0;
    }
    uint64_t result = (void *)(v80 + v22 * v13 + v12);
    float v142 = _S4;
    __asm { FCVT            H3, S4 }
    short float v134 = _H3;
    __asm
    {
      FCVT            H4, S0
      FCVT            H5, S1
      FCVT            H6, S2
    }
    float v144 = _S10;
    __asm { FCVT            H3, S10 }
    short float v133 = _H3;
    float v143 = _S21;
    __asm { FCVT            H3, S21 }
    short float v132 = _H3;
    float v137 = _S22;
    __asm { FCVT            H3, S22 }
    short float v131 = _H3;
    float v89 = _S25;
    __asm { FCVT            H3, S25 }
    short float v130 = _H3;
    float v91 = _S28;
    __asm { FCVT            H3, S28 }
    short float v129 = _H3;
    float v93 = *(float *)_Q20.i32;
    __asm { FCVT            H3, S20 }
    do
    {
      if ((int)v11 < 8)
      {
        size_t v113 = 0;
        float v99 = v77;
        float v98 = v78;
        uint64_t v97 = v81;
        float v96 = (int8x8_t *)result;
      }
      else
      {
        int v95 = 0;
        float v96 = (int8x8_t *)result;
        uint64_t v97 = v81;
        float v98 = v78;
        float v99 = v77;
        do
        {
          if (v97)
          {
            float16x8_t v145 = (float16x8_t)vld2_s8((const char *)v97);
            v97 += 16;
            *(int8x8_t *)v100.i8 = vzip1_s8(*(int8x8_t *)v145.i8, 0);
            v100.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v145.i8, 0);
            *(int8x8_t *)v101.i8 = vzip1_s8((int8x8_t)v145.u64[1], 0);
            v101.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v145.u64[1], 0);
            float16x8_t v145 = vcvtq_f16_u16(v101);
            float16x8_t v102 = vaddq_f16(v63, vcvtq_f16_u16(v100));
            float16x8_t v145 = vaddq_f16(v63, v145);
            float16x8_t v103 = vmulq_n_f16(v145, v134);
            float16x8_t v104 = vmlaq_n_f16(vmulq_n_f16(v102, v136), v145, v135);
            float16x8_t v105 = vmulq_n_f16(v102, v138);
          }
          else
          {
            float16x8_t v105 = 0uLL;
            float16x8_t v104 = 0uLL;
            float16x8_t v103 = 0uLL;
          }
          int8x8_t v106 = *v96++;
          *(int8x8_t *)v107.i8 = vzip1_s8(v106, 0);
          v107.u64[1] = (unint64_t)vzip2_s8(v106, 0);
          float16x8_t v108 = vsubq_f16(vcvtq_f16_u16(v107), v62);
          float16x8_t v109 = vmlaq_n_f16(v103, v108, _H8);
          float16x8_t v110 = vmlaq_n_f16(v104, v108, _H8);
          _Q20 = vmlaq_n_f16(v105, v108, _H8);
          *v98++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, v109, _H4), v110, _H5), _Q20, _H6), v69), v71)));
          if (v99)
          {
            float16x8_t v111 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v109, v130), v110, v129), _Q20, _H3);
            *(int8x8_t *)_Q20.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v70, v109, v133), v110, v132), _Q20, v131), v72), v73), v72), v73)));
            int8x8_t v112 = vmovn_s16((int16x8_t)vcvtq_u16_f16(v111));
            vst2_s8(v99, (int8x8x2_t)_Q20);
            v99 += 16;
          }
          v95 += 8;
        }
        while (v95 < (int)v11 - 7);
        size_t v113 = v11 & 0xFFFFFFF8;
      }
      _CF = v11 >= v113;
      size_t v114 = v11 - v113;
      if (v114 != 0 && _CF)
      {
        do
        {
          if (v97)
          {
            _Q20.i8[0] = *(unsigned char *)v97;
            *(float *)&unsigned int v115 = (float)_Q20.u32[0];
            float v116 = *(float *)&v115 - v51;
            LOBYTE(v115) = *(unsigned char *)(v97 + 1);
            float v117 = (float)v115 - v51;
            v97 += 2;
            *(float *)_Q20.i32 = v142 * v117;
            float v118 = (float)(v140 * v117) + (float)(v116 * v141);
            float v119 = v139 * v116;
          }
          else
          {
            float v119 = 0.0;
            float v118 = 0.0;
            _Q20.i32[0] = 0;
          }
          unsigned int v120 = v96->u8[0];
          float v96 = (int8x8_t *)((char *)v96 + 1);
          float v121 = _S19 * (float)((float)v120 - (float)v32);
          *(float *)_Q20.i32 = *(float *)_Q20.i32 + v121;
          float v122 = v118 + v121;
          float v123 = v119 + v121;
          float v124 = (float)((float)((float)(_S1 * v122) + (float)(_S0 * *(float *)_Q20.i32)) + (float)(_S2 * v123)) + v56;
          float v125 = v58;
          if (v124 <= v58)
          {
            float v125 = (float)((float)((float)(_S1 * v122) + (float)(_S0 * *(float *)_Q20.i32)) + (float)(_S2 * v123)) + v56;
            if (v124 < v56) {
              float v125 = v56;
            }
          }
          v98->i8[0] = llroundf(v125);
          float v98 = (int8x8_t *)((char *)v98 + 1);
          if (v99)
          {
            float v126 = (float)((float)(v57 + (float)(*(float *)_Q20.i32 * v144)) + (float)(v122 * v143))
                 + (float)(v123 * v137);
            float v127 = v61;
            if (v126 <= v61)
            {
              float v127 = (float)((float)(v57 + (float)(*(float *)_Q20.i32 * v144)) + (float)(v122 * v143))
                   + (float)(v123 * v137);
              if (v126 < v60) {
                float v127 = v60;
              }
            }
            *(float *)_Q20.i32 = (float)((float)(v57 + (float)(*(float *)_Q20.i32 * v89)) + (float)(v122 * v91))
                               + (float)(v123 * v93);
            *float v99 = llroundf(v127);
            float v128 = v61;
            if (*(float *)_Q20.i32 <= v61)
            {
              float v128 = *(float *)_Q20.i32;
              if (*(float *)_Q20.i32 < v60) {
                float v128 = v60;
              }
            }
            v99[1] = llroundf(v128);
            v99 += 2;
          }
          --v114;
        }
        while (v114);
      }
      uint64_t result = (void *)((char *)result + v22);
      v81 += v23;
      float v78 = (int8x8_t *)((char *)v78 + v27);
      v77 += v28;
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      do
      {
        uint64_t result = memcpy(v31, v26, v11);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_444vf(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_444vf_GCD);
  return 0;
}

void *vt_Copy_444vf_rgb_444vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v10 = *(void *)((char *)result + 28);
  unint64_t v11 = *(unsigned __int8 *)result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (v13 != v12)
  {
    uint64_t v14 = 0;
    size_t v15 = *(void *)((char *)result + 20);
    uint64_t v16 = *(void *)((char *)result + 36);
    unint64_t v17 = v12 + *(void *)((char *)result + 44);
    unint64_t v18 = v13 - v12;
    uint64_t v19 = result[14];
    int64x2_t v20 = (uint64_t *)result[16];
    unint64_t v21 = result[13] * a2 / v11 + result[15];
    uint64_t v22 = result[19];
    uint64_t v24 = (uint64_t *)result[7];
    uint64_t v23 = (uint64_t *)result[8];
    uint64_t v25 = (uint64_t *)result[17];
    uint64_t v26 = *v23;
    uint64_t v27 = v23[1];
    uint64_t v28 = v23[2];
    uint64_t v29 = v24[2];
    uint64_t v30 = (char *)(v29 + v28 * v17 + v16);
    uint64_t v31 = *v25;
    uint64_t v32 = v25[1];
    uint64_t v33 = v25[2];
    uint64_t v34 = v20[2];
    float v35 = (char *)(v34 + v33 * v21 + v19);
    *(float *)&unsigned int v36 = (float)*(unsigned int *)(v22 + 136);
    LOWORD(a5) = *(_WORD *)(v22 + 140);
    float v37 = *(float *)&v36 / (float)*(unsigned int *)(v22 + 128);
    float v38 = (float)LODWORD(a5);
    LOWORD(v36) = *(_WORD *)(v22 + 142);
    float v39 = (float)v36;
    float v40 = v37 * *(float *)v22;
    float v41 = v37 * *(float *)(v22 + 8);
    float v42 = v37 * *(float *)(v22 + 16);
    float v43 = v37 * *(float *)(v22 + 20);
    float v44 = *(float *)(v22 + 28);
    float v45 = v37 * v44;
    LOWORD(v44) = *(_WORD *)(v22 + 144);
    float v46 = (float)LODWORD(v44);
    LOWORD(v5) = *(_WORD *)(v22 + 146);
    float v47 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v22 + 148);
    float v48 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v22 + 150);
    float v49 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v22 + 152);
    float v50 = (float)v8;
    float v51 = *(float *)(v22 + 36);
    float v52 = *(float *)(v22 + 40);
    float v53 = *(float *)(v22 + 44);
    float v54 = *(float *)(v22 + 48);
    float v55 = *(float *)(v22 + 52);
    float v56 = *(float *)(v22 + 56);
    float v57 = *(float *)(v22 + 60);
    float v58 = *(float *)(v22 + 64);
    float v59 = *(float *)(v22 + 68);
    uint64_t v61 = *v20;
    uint64_t v60 = v20[1];
    float16x8_t v62 = (unsigned char *)(v60 + v32 * v21 + v19);
    if (!v60) {
      float16x8_t v62 = 0;
    }
    float16x8_t v63 = (unsigned char *)(v61 + v31 * v21 + v19);
    uint64_t v65 = *v24;
    uint64_t v64 = v24[1];
    uint64_t v66 = (unsigned char *)(v64 + v27 * v17 + v16);
    if (!v64) {
      uint64_t v66 = 0;
    }
    uint64_t result = (void *)(v65 + v26 * v17 + v16);
    do
    {
      size_t v67 = v15;
      uint64_t v68 = (unsigned __int8 *)result;
      float16x8_t v69 = v66;
      float16x8_t v70 = v62;
      for (uint64_t i = v63; v67; --v67)
      {
        if (v69)
        {
          LOBYTE(v9) = *v69;
          *(float *)&unsigned int v72 = (float)LODWORD(v9);
          float v73 = *(float *)&v72 - v39;
          LOBYTE(v72) = v69[1];
          float v74 = (float)v72 - v39;
          v69 += 2;
          float v75 = v41 * v74;
          float v76 = (float)(v43 * v74) + (float)(v73 * v42);
          float v77 = v45 * v73;
        }
        else
        {
          float v77 = 0.0;
          float v76 = 0.0;
          float v75 = 0.0;
        }
        unsigned int v78 = *v68++;
        float v79 = v40 * (float)((float)v78 - v38);
        float v9 = v75 + v79;
        float v80 = v76 + v79;
        float v81 = v77 + v79;
        float v82 = (float)((float)((float)(v52 * v80) + (float)(v51 * v9)) + (float)(v53 * v81)) + v46;
        float v83 = v48;
        if (v82 <= v48)
        {
          float v83 = (float)((float)((float)(v52 * v80) + (float)(v51 * v9)) + (float)(v53 * v81)) + v46;
          if (v82 < v46) {
            float v83 = v46;
          }
        }
        *i++ = llroundf(v83);
        if (v70)
        {
          float v84 = (float)((float)(v47 + (float)(v9 * v54)) + (float)(v80 * v55)) + (float)(v81 * v56);
          float v85 = v50;
          if (v84 <= v50)
          {
            float v85 = (float)((float)(v47 + (float)(v9 * v54)) + (float)(v80 * v55)) + (float)(v81 * v56);
            if (v84 < v49) {
              float v85 = v49;
            }
          }
          float v9 = (float)((float)(v47 + (float)(v9 * v57)) + (float)(v80 * v58)) + (float)(v81 * v59);
          *float16x8_t v70 = llroundf(v85);
          float v86 = v50;
          if (v9 <= v50)
          {
            float v86 = v9;
            if (v9 < v49) {
              float v86 = v49;
            }
          }
          v70[1] = llroundf(v86);
          v70 += 2;
        }
      }
      uint64_t result = (void *)((char *)result + v26);
      v66 += v27;
      v63 += v31;
      v62 += v32;
      ++v14;
    }
    while (v14 != v18);
    if (v29 && v34)
    {
      do
      {
        uint64_t result = memcpy(v35, v30, v15);
        v30 += v28;
        v35 += v33;
        --v18;
      }
      while (v18);
    }
    else if (v34)
    {
      do
      {
        if (v15) {
          uint64_t result = memset(v35, 255, v15);
        }
        v35 += v33;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD(void *result, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)((char *)result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)((char *)result + 20);
    uint64_t v9 = *(void *)((char *)result + 36);
    unint64_t v10 = v5 + *(void *)((char *)result + 44);
    unint64_t v11 = v6 - v5;
    uint64_t v12 = result[14];
    uint64_t v13 = result[19];
    uint64_t v14 = (uint64_t *)result[7];
    size_t v15 = (uint64_t *)result[8];
    uint64_t v16 = (uint64_t *)result[16];
    uint64_t v17 = (uint64_t *)result[17];
    uint64_t v18 = *v15;
    uint64_t v19 = v15[1];
    unint64_t v20 = result[13] * a2 / v4 + result[15];
    uint64_t v194 = v15[2];
    uint64_t v197 = v14[2];
    long long v21 = (unsigned __int8 *)(v197 + v194 * v10 + v9);
    uint64_t v22 = *v17;
    uint64_t v23 = v17[1];
    uint64_t v195 = v17[2];
    uint64_t v196 = v16[2];
    uint64_t v24 = (char *)(v196 + v195 * v20 + 2 * v12);
    unsigned int v25 = *(unsigned __int16 *)(v13 + 140);
    unsigned int v26 = *(unsigned __int16 *)(v13 + 142);
    unsigned int v27 = *(unsigned __int16 *)(v13 + 144);
    unsigned int v28 = *(unsigned __int16 *)(v13 + 146);
    unsigned int v29 = *(unsigned __int16 *)(v13 + 148);
    unsigned int v30 = *(unsigned __int16 *)(v13 + 150);
    unsigned int v31 = *(unsigned __int16 *)(v13 + 152);
    _S6 = *(_DWORD *)(v13 + 36);
    _S7 = *(_DWORD *)(v13 + 40);
    _S16 = *(_DWORD *)(v13 + 44);
    _S17 = *(_DWORD *)(v13 + 48);
    _S18 = *(_DWORD *)(v13 + 52);
    _S19 = *(_DWORD *)(v13 + 56);
    _S21 = *(float *)(v13 + 60);
    _S23 = *(_DWORD *)(v13 + 64);
    *(float *)&a3 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    float v241 = (float)v25;
    _S24 = *(_DWORD *)(v13 + 68);
    _S26 = *(_DWORD *)(v13 + 72);
    float v42 = (float)v26;
    _S1 = *(float *)&a3 * *(float *)v13;
    _S2 = *(float *)&a3 * *(float *)(v13 + 8);
    uint64_t v45 = v13 + 16548;
    _S3 = *(float *)&a3 * *(float *)(v13 + 16);
    _S4 = *(float *)&a3 * *(float *)(v13 + 20);
    float v48 = (float)v27;
    _S5 = *(float *)&a3 * *(float *)(v13 + 28);
    uint64_t result = (void *)(v13 + 164);
    *(short float *)&a3 = (short float)v25;
    uint64_t v50 = v13 + 32932;
    float v239 = _S1;
    __asm { FCVT            H8, S1 }
    _Q0 = vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float16x8_t v238 = (float16x8_t)_Q0;
    *(short float *)_Q0.i16 = -(short float)v26;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float v208 = _S5;
    float v209 = _S4;
    __asm { FCVT            H0, S5 }
    short float v207 = *(short float *)_Q0.i16;
    float v210 = _S3;
    __asm { FCVT            H0, S3 }
    short float v206 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S4 }
    short float v205 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v27;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v28;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v29;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v237 = (float16x8_t)_Q0;
    *(short float *)_Q0.i16 = (short float)v30;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v31;
    float16x8_t v62 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float v211 = _S2;
    __asm { FCVT            H0, S2 }
    short float v204 = *(short float *)_Q0.i16;
    unsigned int v63 = *(unsigned __int8 *)(v13 + 132);
    if (v63 >= 0x11) {
      unsigned __int8 v64 = 0;
    }
    else {
      unsigned __int8 v64 = 16 - v63;
    }
    uint64_t v65 = *v16;
    uint64_t v66 = v16[1];
    uint64_t v67 = v66 + v23 * v20 + 2 * v12;
    if (!v66) {
      uint64_t v67 = 0;
    }
    uint64_t v68 = v65 + v22 * v20 + 2 * v12;
    uint64_t v69 = *v14;
    uint64_t v70 = v14[1];
    uint64_t v71 = v70 + v19 * v10 + v9;
    if (!v70) {
      uint64_t v71 = 0;
    }
    unsigned int v72 = (int8x8_t *)(v69 + v18 * v10 + v9);
    float v243 = *(float *)(v13 + 40);
    float v244 = *(float *)(v13 + 36);
    __asm { FCVT            H6, S6 }
    short float v232 = _H6;
    __asm { FCVT            H6, S7 }
    short float v231 = _H6;
    float v242 = *(float *)(v13 + 44);
    __asm { FCVT            H6, S16 }
    short float v230 = _H6;
    float v215 = *(float *)(v13 + 52);
    float v216 = *(float *)(v13 + 48);
    __asm { FCVT            H6, S17 }
    short float v203 = _H6;
    __asm { FCVT            H6, S18 }
    short float v202 = _H6;
    float v214 = *(float *)(v13 + 56);
    __asm { FCVT            H6, S19 }
    short float v201 = _H6;
    __asm { FCVT            H6, S21 }
    short float v200 = _H6;
    float v212 = *(float *)(v13 + 68);
    float v213 = *(float *)(v13 + 64);
    __asm { FCVT            H6, S23 }
    short float v199 = _H6;
    __asm { FCVT            H6, S24 }
    short float v198 = _H6;
    float v236 = *(float *)(v13 + 108);
    __asm { FCVT            H2, S2 }
    short float v229 = _H2;
    float v235 = *(float *)(v13 + 112);
    __asm { FCVT            H2, S3 }
    short float v228 = _H2;
    float v234 = *(float *)(v13 + 116);
    __asm { FCVT            H2, S4 }
    short float v227 = _H2;
    float v233 = *(float *)(v13 + 120);
    __asm { FCVT            H2, S5 }
    short float v226 = _H2;
    float v240 = *(float *)(v13 + 72);
    __asm { FCVT            H2, S26 }
    float v222 = *(float *)(v13 + 76);
    __asm { FCVT            H0, S0 }
    short float v224 = _H0;
    short float v225 = _H2;
    float v221 = *(float *)(v13 + 80);
    __asm { FCVT            H0, S1 }
    short float v223 = _H0;
    float v89 = (float)v28;
    _S24 = *(float *)(v13 + 84);
    __asm { FCVT            H0, S0 }
    short float v220 = _H0;
    float v92 = (float)v29;
    float v217 = (float)v30;
    v93.i64[0] = 0x9000900090009000;
    v93.i64[1] = 0x9000900090009000;
    _Q2.i32[0] = *(_DWORD *)(v13 + 96);
    float v95 = (float)v31;
    uint16x8_t v96 = (uint16x8_t)vdupq_n_s16(v64);
    _Q3.i32[0] = *(_DWORD *)(v13 + 100);
    _S6 = *(float *)(v13 + 104);
    _S26 = *(float *)(v13 + 88);
    __asm { FCVT            H1, S1 }
    _S11 = *(float *)(v13 + 92);
    __asm { FCVT            H0, S0 }
    short float v218 = _H0;
    short float v219 = _H1;
    float v103 = *(float *)_Q2.i32;
    __asm { FCVT            H14, S2 }
    float v105 = *(float *)_Q3.i32;
    __asm
    {
      FCVT            H0, S3
      FCVT            H1, S6
    }
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v152 = 0;
        int8x8_t v112 = (__int16 *)v67;
        float16x8_t v111 = (uint16x8_t *)v68;
        uint64_t v110 = v71;
        float16x8_t v109 = v72;
      }
      else
      {
        int v108 = 0;
        float16x8_t v109 = v72;
        uint64_t v110 = v71;
        float16x8_t v111 = (uint16x8_t *)v68;
        int8x8_t v112 = (__int16 *)v67;
        do
        {
          if (v110)
          {
            int8x8x2_t v245 = vld2_s8((const char *)v110);
            v110 += 16;
            *(int8x8_t *)v113.i8 = vzip1_s8(v245.val[0], 0);
            v113.u64[1] = (unint64_t)vzip2_s8(v245.val[0], 0);
            *(int8x8_t *)v114.i8 = vzip1_s8(v245.val[1], 0);
            v114.u64[1] = (unint64_t)vzip2_s8(v245.val[1], 0);
            *(int8x8x2_t *)((char *)&v245 + 8) = (int8x8x2_t)vaddq_f16(v57, vcvtq_f16_u16(v113));
            float16x8_t v115 = vaddq_f16(v57, vcvtq_f16_u16(v114));
            float16x8_t v116 = vmulq_n_f16(v115, v204);
            float16x8_t v117 = vmlaq_n_f16(vmulq_n_f16(*(float16x8_t *)((char *)&v245 + 8), v206), v115, v205);
            float16x8_t v118 = vmulq_n_f16(*(float16x8_t *)((char *)&v245 + 8), v207);
          }
          else
          {
            float16x8_t v118 = 0uLL;
            float16x8_t v117 = 0uLL;
            float16x8_t v116 = 0uLL;
          }
          int8x8_t v119 = *v109++;
          *(int8x8_t *)v120.i8 = vzip1_s8(v119, 0);
          v120.u64[1] = (unint64_t)vzip2_s8(v119, 0);
          float16x8_t v121 = vsubq_f16(vcvtq_f16_u16(v120), v238);
          float16x8_t v122 = vmlaq_n_f16(v117, v121, _H8);
          float16x8_t v123 = vmlaq_n_f16(v118, v121, _H8);
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v116, v121, _H8), (float16x8_t)0), v93));
          uint32x4_t v125 = vmovl_high_u16(v124);
          float16x8_t v126 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v124.i8);
          v126.i16[0] = *((_WORD *)result + v126.u32[0]);
          v126.i16[1] = *((_WORD *)result + v126.u32[1]);
          v126.i16[2] = *((_WORD *)result + v126.u32[2]);
          v126.i16[3] = *((_WORD *)result + v126.u32[3]);
          v126.i16[4] = *((_WORD *)result + v125.u32[0]);
          v126.i16[5] = *((_WORD *)result + v125.u32[1]);
          v126.i16[6] = *((_WORD *)result + v125.u32[2]);
          v126.i16[7] = *((_WORD *)result + v125.u32[3]);
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v93));
          uint32x4_t v128 = vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v122.i16[0] = *((_WORD *)result + v129.u32[0]);
          v122.i16[1] = *((_WORD *)result + v129.u32[1]);
          v122.i16[2] = *((_WORD *)result + v129.u32[2]);
          v122.i16[3] = *((_WORD *)result + v129.u32[3]);
          v122.i16[4] = *((_WORD *)result + v128.u32[0]);
          v122.i16[5] = *((_WORD *)result + v128.u32[1]);
          v122.i16[6] = *((_WORD *)result + v128.u32[2]);
          v122.i16[7] = *((_WORD *)result + v128.u32[3]);
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v93));
          uint32x4_t v131 = vmovl_high_u16(v130);
          float16x8_t v132 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v130.i8);
          v132.i16[0] = *((_WORD *)result + v132.u32[0]);
          v132.i16[1] = *((_WORD *)result + v132.u32[1]);
          v132.i16[2] = *((_WORD *)result + v132.u32[2]);
          v132.i16[3] = *((_WORD *)result + v132.u32[3]);
          v132.i16[4] = *((_WORD *)result + v131.u32[0]);
          v132.i16[5] = *((_WORD *)result + v131.u32[1]);
          v132.i16[6] = *((_WORD *)result + v131.u32[2]);
          v132.i16[7] = *((_WORD *)result + v131.u32[3]);
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v126, v229), v122, v228), v132, v227), vmaxq_f16(vmaxq_f16(v126, v122), v132), v226), (float16x8_t)0), v93));
          uint32x4_t v134 = vmovl_high_u16(v133);
          float16x8_t v135 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v133.i8);
          v135.i16[0] = *(_WORD *)(v45 + 2 * v135.u32[0]);
          v135.i16[1] = *(_WORD *)(v45 + 2 * v135.u32[1]);
          v135.i16[2] = *(_WORD *)(v45 + 2 * v135.u32[2]);
          v135.i16[3] = *(_WORD *)(v45 + 2 * v135.u32[3]);
          v135.i16[4] = *(_WORD *)(v45 + 2 * v134.u32[0]);
          v135.i16[5] = *(_WORD *)(v45 + 2 * v134.u32[1]);
          v135.i16[6] = *(_WORD *)(v45 + 2 * v134.u32[2]);
          v135.i16[7] = *(_WORD *)(v45 + 2 * v134.u32[3]);
          float16x8_t v136 = vmulq_f16(v126, v135);
          float16x8_t v137 = vmulq_f16(v122, v135);
          float16x8_t v138 = vmulq_f16(v132, v135);
          float16x8_t v139 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v136, v220), v137, v219), v138, v218);
          float16x8_t v140 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, _H1), v137, _H0), v136, _H14);
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v136, v225), v137, v224), v138, v223), (float16x8_t)0), v93));
          uint32x4_t v142 = vmovl_high_u16(v141);
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v141.i8);
          _Q2.i16[0] = *(_WORD *)(v50 + 2 * v143.u32[0]);
          _Q2.i16[1] = *(_WORD *)(v50 + 2 * v143.u32[1]);
          _Q2.i16[2] = *(_WORD *)(v50 + 2 * v143.u32[2]);
          _Q2.i16[3] = *(_WORD *)(v50 + 2 * v143.u32[3]);
          _Q2.i16[4] = *(_WORD *)(v50 + 2 * v142.u32[0]);
          _Q2.i16[5] = *(_WORD *)(v50 + 2 * v142.u32[1]);
          _Q2.i16[6] = *(_WORD *)(v50 + 2 * v142.u32[2]);
          _Q2.i16[7] = *(_WORD *)(v50 + 2 * v142.u32[3]);
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v139, (float16x8_t)0), v93));
          uint32x4_t v145 = vmovl_high_u16(v144);
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v144.i8);
          _Q3.i16[0] = *(_WORD *)(v50 + 2 * v146.u32[0]);
          _Q3.i16[1] = *(_WORD *)(v50 + 2 * v146.u32[1]);
          _Q3.i16[2] = *(_WORD *)(v50 + 2 * v146.u32[2]);
          _Q3.i16[3] = *(_WORD *)(v50 + 2 * v146.u32[3]);
          _Q3.i16[4] = *(_WORD *)(v50 + 2 * v145.u32[0]);
          _Q3.i16[5] = *(_WORD *)(v50 + 2 * v145.u32[1]);
          _Q3.i16[6] = *(_WORD *)(v50 + 2 * v145.u32[2]);
          _Q3.i16[7] = *(_WORD *)(v50 + 2 * v145.u32[3]);
          uint16x8_t v147 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v140, (float16x8_t)0), v93));
          uint32x4_t v148 = vmovl_high_u16(v147);
          uint32x4_t v149 = vmovl_u16(*(uint16x4_t *)v147.i8);
          v150.i16[0] = *(_WORD *)(v50 + 2 * v149.u32[0]);
          v150.i16[1] = *(_WORD *)(v50 + 2 * v149.u32[1]);
          v150.i16[2] = *(_WORD *)(v50 + 2 * v149.u32[2]);
          v150.i16[3] = *(_WORD *)(v50 + 2 * v149.u32[3]);
          v150.i16[4] = *(_WORD *)(v50 + 2 * v148.u32[0]);
          v150.i16[5] = *(_WORD *)(v50 + 2 * v148.u32[1]);
          v150.i16[6] = *(_WORD *)(v50 + 2 * v148.u32[2]);
          v150.i16[7] = *(_WORD *)(v50 + 2 * v148.u32[3]);
          *v111++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v58, _Q2, v232), _Q3, v231), v150, v230), v58), v237)), v96);
          if (v112)
          {
            float16x8_t v151 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, _Q2, v200), _Q3, v199), v150, v198);
            _Q2 = (float16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v59, _Q2, v203), _Q3, v202), v150, v201), v61), v62), v61), v62)), v96);
            _Q3 = (float16x8_t)vshlq_u16(vcvtq_u16_f16(v151), v96);
            vst2q_s16(v112, *(int16x8x2_t *)_Q2.i8);
            v112 += 16;
          }
          v108 += 8;
        }
        while (v108 < (int)v8 - 7);
        unint64_t v152 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v152;
      unint64_t v153 = v8 - v152;
      if (v153 != 0 && _CF)
      {
        do
        {
          if (v110)
          {
            _Q2.i8[0] = *(unsigned char *)v110;
            float v154 = (float)_Q2.u32[0] - v42;
            _Q3.i8[0] = *(unsigned char *)(v110 + 1);
            float v155 = (float)_Q3.u32[0] - v42;
            v110 += 2;
            float v156 = v211 * v155;
            float v157 = (float)(v209 * v155) + (float)(v154 * v210);
            *(float *)_Q2.i32 = v208 * v154;
          }
          else
          {
            _Q2.i32[0] = 0;
            float v157 = 0.0;
            float v156 = 0.0;
          }
          unsigned int v158 = v109->u8[0];
          float16x8_t v109 = (int8x8_t *)((char *)v109 + 1);
          float v159 = v239 * (float)((float)v158 - v241);
          float v160 = v156 + v159;
          float v161 = 8191.0;
          if (v160 <= 8191.0)
          {
            float v161 = v160;
            if (v160 < 0.0) {
              float v161 = 0.0;
            }
          }
          float v162 = v157 + v159;
          BOOL v163 = (float)(v157 + v159) <= 8191.0;
          float v164 = 8191.0;
          if (v163)
          {
            float v164 = v162;
            if (v162 < 0.0) {
              float v164 = 0.0;
            }
          }
          float v165 = *(float *)_Q2.i32 + v159;
          float v166 = 8191.0;
          if (v165 <= 8191.0)
          {
            float v166 = v165;
            if (v165 < 0.0) {
              float v166 = 0.0;
            }
          }
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          float v173 = fmaxf(_S2, fmaxf(_S3, _S4));
          float v174 = (float)((float)((float)(v235 * _S3) + (float)(v236 * _S2)) + (float)(v234 * _S4))
               + (float)(v233 * v173);
          float v175 = 8191.0;
          if (v174 <= 8191.0)
          {
            float v175 = (float)((float)((float)(v235 * _S3) + (float)(v236 * _S2)) + (float)(v234 * _S4))
                 + (float)(v233 * v173);
            if (v174 < 0.0) {
              float v175 = 0.0;
            }
          }
          _H16 = *(_WORD *)(v45 + 2 * llroundf(v175));
          __asm { FCVT            S16, H16 }
          _S2 = _S2 * _S16;
          _S3 = _S3 * _S16;
          float v180 = _S4 * _S16;
          float v181 = (float)((float)(v222 * _S3) + (float)(_S2 * v240)) + (float)(v180 * v221);
          float v182 = (float)((float)(_S26 * _S3) + (float)(_S2 * _S24)) + (float)(v180 * _S11);
          _S4 = (float)((float)(v105 * _S3) + (float)(_S2 * v103)) + (float)(v180 * _S6);
          LOWORD(_S2) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v181, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S3) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v182, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S4) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S15, H4 }
          float v185 = (float)((float)((float)(v243 * *(float *)_Q3.i32) + (float)(v244 * *(float *)_Q2.i32))
                       + (float)(v242 * _S15))
               + v48;
          float v186 = v92;
          if (v185 <= v92)
          {
            float v186 = (float)((float)((float)(v243 * *(float *)_Q3.i32) + (float)(v244 * *(float *)_Q2.i32))
                         + (float)(v242 * _S15))
                 + v48;
            if (v185 < v48) {
              float v186 = v48;
            }
          }
          v111->i16[0] = llroundf(v186) << v64;
          float16x8_t v111 = (uint16x8_t *)((char *)v111 + 2);
          if (v112)
          {
            float v187 = (float)((float)(v89 + (float)(*(float *)_Q2.i32 * v216)) + (float)(*(float *)_Q3.i32 * v215))
                 + (float)(_S15 * v214);
            float v188 = v95;
            if (v187 <= v95)
            {
              float v188 = (float)((float)(v89 + (float)(*(float *)_Q2.i32 * v216)) + (float)(*(float *)_Q3.i32 * v215))
                   + (float)(_S15 * v214);
              if (v187 < v217) {
                float v188 = v217;
              }
            }
            *(float *)_Q2.i32 = (float)((float)(v89 + (float)(*(float *)_Q2.i32 * _S21))
                                      + (float)(*(float *)_Q3.i32 * v213))
                              + (float)(_S15 * v212);
            *int8x8_t v112 = llroundf(v188) << v64;
            *(float *)_Q3.i32 = v95;
            if (*(float *)_Q2.i32 <= v95)
            {
              _Q3.i32[0] = _Q2.i32[0];
              if (*(float *)_Q2.i32 < v217) {
                *(float *)_Q3.i32 = v217;
              }
            }
            v112[1] = llroundf(*(float *)_Q3.i32) << v64;
            v112 += 2;
          }
          --v153;
        }
        while (v153);
      }
      unsigned int v72 = (int8x8_t *)((char *)v72 + v18);
      v71 += v19;
      v68 += v22;
      v67 += v23;
      ++v7;
    }
    while (v7 != v11);
    if (v197 && v196)
    {
      uint64_t v189 = 0;
      do
      {
        if (v8)
        {
          unint64_t v190 = v8;
          float v191 = v24;
          float v192 = v21;
          do
          {
            __int16 v193 = *v192++;
            *v191++ = v193 | (v193 << 8);
            --v190;
          }
          while (v190);
        }
        v21 += v194;
        v24 += v195;
        ++v189;
      }
      while (v189 != v11);
    }
    else if (v196)
    {
      do
      {
        if (v8) {
          uint64_t result = memset(v24, 255, 2 * v8);
        }
        v24 += v195;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    unint64_t v13 = v8 + *(void *)((char *)result + 44);
    unint64_t v14 = v9 - v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (void *)result[16];
    unint64_t v17 = result[13] * a2 / v7 + result[15];
    uint64_t v18 = result[19];
    uint64_t v19 = (uint64_t *)result[7];
    int64x2_t v20 = (uint64_t *)result[8];
    long long v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = (unsigned __int8 *)(v25 + v24 * v13 + v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    unsigned int v31 = (char *)(v30 + v29 * v17 + 2 * v15);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = (float)LODWORD(a5);
    float v35 = v32 * *(float *)v18;
    float v132 = v32 * *(float *)(v18 + 16);
    float v133 = v32 * *(float *)(v18 + 8);
    float v36 = v32 * *(float *)(v18 + 20);
    *(float *)&unsigned int v37 = v32 * *(float *)(v18 + 28);
    float v130 = *(float *)&v37;
    float v131 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v18 + 36);
    float v44 = *(float *)(v18 + 40);
    float v45 = *(float *)(v18 + 44);
    float v128 = *(float *)(v18 + 52);
    float v129 = *(float *)(v18 + 48);
    float v126 = *(float *)(v18 + 60);
    float v127 = *(float *)(v18 + 56);
    float v46 = *(float *)(v18 + 64);
    float v47 = *(float *)(v18 + 68);
    float v125 = v46;
    float v48 = *(float *)(v18 + 72);
    float v49 = *(float *)(v18 + 76);
    float v50 = *(float *)(v18 + 80);
    float v51 = *(float *)(v18 + 84);
    float v52 = *(float *)(v18 + 88);
    float v53 = *(float *)(v18 + 92);
    float v54 = *(float *)(v18 + 96);
    float v55 = *(float *)(v18 + 100);
    float v56 = *(float *)(v18 + 104);
    uint64_t v57 = v18 + 164;
    uint64_t result = (void *)(v18 + 16548);
    unsigned int v58 = *(unsigned __int8 *)(v18 + 132);
    if (v58 >= 0x11) {
      char v59 = 0;
    }
    else {
      char v59 = 16 - v58;
    }
    uint64_t v60 = v16[1];
    _ZF = v60 == 0;
    uint64_t v62 = v60 + v28 * v17;
    uint64_t v63 = *v16 + v27 * v17;
    uint64_t v64 = v18 + 32932;
    uint64_t v65 = (_WORD *)(v62 + 2 * v15);
    if (_ZF) {
      uint64_t v65 = 0;
    }
    uint64_t v66 = (_WORD *)(v63 + 2 * v15);
    uint64_t v68 = *v19;
    uint64_t v67 = v19[1];
    uint64_t v69 = (unsigned char *)(v67 + v23 * v13 + v12);
    if (!v67) {
      uint64_t v69 = 0;
    }
    uint64_t v70 = (unsigned __int8 *)(v68 + v22 * v13 + v12);
    char v71 = v59;
    float v73 = *(float *)(v18 + 108);
    float v72 = *(float *)(v18 + 112);
    float v74 = *(float *)(v18 + 116);
    float v75 = *(float *)(v18 + 120);
    do
    {
      uint64_t v76 = v11;
      float v77 = v70;
      unsigned int v78 = v69;
      float v79 = v65;
      for (uint64_t i = v66; v76; --v76)
      {
        if (v78)
        {
          LOBYTE(v46) = *v78;
          float v81 = (float)LODWORD(v46) - v34;
          LOBYTE(_S24) = v78[1];
          float v82 = (float)LODWORD(_S24) - v34;
          v78 += 2;
          float v83 = v133 * v82;
          float v84 = (float)(v131 * v82) + (float)(v81 * v132);
          float v85 = v130 * v81;
        }
        else
        {
          float v85 = 0.0;
          float v84 = 0.0;
          float v83 = 0.0;
        }
        unsigned int v86 = *v77++;
        float v87 = v35 * (float)((float)v86 - v33);
        float v88 = v83 + v87;
        float v89 = 8191.0;
        if (v88 <= 8191.0)
        {
          float v89 = v88;
          if (v88 < 0.0) {
            float v89 = 0.0;
          }
        }
        float v90 = v84 + v87;
        BOOL v91 = (float)(v84 + v87) <= 8191.0;
        float v92 = 8191.0;
        if (v91)
        {
          float v92 = v90;
          if (v90 < 0.0) {
            float v92 = 0.0;
          }
        }
        float v93 = v85 + v87;
        float v94 = 8191.0;
        if (v93 <= 8191.0)
        {
          float v94 = v93;
          if (v93 < 0.0) {
            float v94 = 0.0;
          }
        }
        _H0 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
        __asm { FCVT            S24, H0 }
        _H0 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
        __asm { FCVT            S25, H0 }
        _H0 = *(_WORD *)(v57 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        float v104 = (float)((float)((float)(v72 * _S25) + (float)(v73 * _S24)) + (float)(v74 * _S26))
             + (float)(v75 * fmaxf(_S24, fmaxf(_S25, _S26)));
        float v105 = 8191.0;
        if (v104 <= 8191.0)
        {
          float v105 = v104;
          if (v104 < 0.0) {
            float v105 = 0.0;
          }
        }
        _H0 = *((_WORD *)result + llroundf(v105));
        __asm { FCVT            S0, H0 }
        _S24 = _S24 * _S0;
        _S25 = _S25 * _S0;
        float v110 = _S26 * _S0;
        float v111 = (float)((float)(v49 * _S25) + (float)(_S24 * v48)) + (float)(v110 * v50);
        float v112 = (float)((float)(v52 * _S25) + (float)(_S24 * v51)) + (float)(v110 * v53);
        _S0 = (float)((float)(v55 * _S25) + (float)(_S24 * v54)) + (float)(v110 * v56);
        LOWORD(_S24) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v111, 0.0), 8191.0)));
        __asm { FCVT            S24, H24 }
        LOWORD(_S25) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(v112, 0.0), 8191.0)));
        __asm { FCVT            S25, H25 }
        LOWORD(_S0) = *(_WORD *)(v64 + 2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S26, H0 }
        float v46 = (float)((float)((float)(v44 * _S25) + (float)(v43 * _S24)) + (float)(v45 * _S26)) + v38;
        float v116 = v40;
        if (v46 <= v40)
        {
          float v116 = (float)((float)((float)(v44 * _S25) + (float)(v43 * _S24)) + (float)(v45 * _S26)) + v38;
          if (v46 < v38) {
            float v116 = v38;
          }
        }
        *i++ = llroundf(v116) << v71;
        if (v79)
        {
          float v117 = (float)((float)(v39 + (float)(_S24 * v129)) + (float)(_S25 * v128)) + (float)(_S26 * v127);
          float v118 = v42;
          if (v117 <= v42)
          {
            float v118 = (float)((float)(v39 + (float)(_S24 * v129)) + (float)(_S25 * v128)) + (float)(_S26 * v127);
            if (v117 < v41) {
              float v118 = v41;
            }
          }
          float v46 = (float)(v39 + (float)(_S24 * v126)) + (float)(_S25 * v125);
          _S24 = v46 + (float)(_S26 * v47);
          *float v79 = llroundf(v118) << v71;
          float v119 = v42;
          if (_S24 <= v42)
          {
            float v119 = v46 + (float)(_S26 * v47);
            if (_S24 < v41) {
              float v119 = v41;
            }
          }
          v79[1] = llroundf(v119) << v71;
          v79 += 2;
        }
      }
      v70 += v22;
      v69 += v23;
      uint64_t v66 = (_WORD *)((char *)v66 + v27);
      uint64_t v65 = (_WORD *)((char *)v65 + v28);
      ++v10;
    }
    while (v10 != v14);
    if (v25 && v30)
    {
      uint64_t v120 = 0;
      do
      {
        if (v11)
        {
          uint64_t v121 = v11;
          float16x8_t v122 = v31;
          float16x8_t v123 = v26;
          do
          {
            __int16 v124 = *v123++;
            *v122++ = v124 | (v124 << 8);
            --v121;
          }
          while (v121);
        }
        v26 += v24;
        v31 += v29;
        ++v120;
      }
      while (v120 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, 2 * v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_xf444_neon_fp16_GCD(void *result, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)((char *)result + 28);
  unint64_t v4 = *(unsigned __int8 *)result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)((char *)result + 20);
    uint64_t v9 = *(void *)((char *)result + 36);
    unint64_t v10 = v5 + *(void *)((char *)result + 44);
    unint64_t v11 = v6 - v5;
    uint64_t v12 = result[14];
    uint64_t v13 = result[19];
    unint64_t v14 = (uint64_t *)result[16];
    unint64_t v15 = result[13] * a2 / v4 + result[15];
    uint64_t v16 = (uint64_t *)result[7];
    uint64_t v17 = (uint64_t *)result[8];
    uint64_t v18 = (uint64_t *)result[17];
    uint64_t v190 = v17[2];
    uint64_t v193 = v16[2];
    uint64_t v19 = (unsigned __int8 *)(v193 + v190 * v10 + v9);
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    uint64_t v191 = v18[2];
    uint64_t v192 = v14[2];
    int64x2_t v22 = (char *)(v192 + v191 * v15 + 2 * v12);
    unsigned int v23 = *(unsigned __int16 *)(v13 + 140);
    unsigned int v24 = *(unsigned __int16 *)(v13 + 142);
    unsigned int v25 = *(unsigned __int16 *)(v13 + 144);
    unsigned int v26 = *(unsigned __int16 *)(v13 + 146);
    unsigned int v27 = *(unsigned __int16 *)(v13 + 148);
    unsigned int v28 = *(unsigned __int16 *)(v13 + 150);
    unsigned int v29 = *(unsigned __int16 *)(v13 + 152);
    _S9 = *(float *)(v13 + 36);
    _S10 = *(float *)(v13 + 40);
    _S16 = *(float *)(v13 + 44);
    _S18 = *(float *)(v13 + 48);
    _S19 = *(float *)(v13 + 52);
    _S20 = *(float *)(v13 + 56);
    _S21 = *(float *)(v13 + 60);
    _S22 = *(float *)(v13 + 64);
    *(float *)&a3 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    _S23 = *(float *)(v13 + 68);
    _S24 = *(float *)(v13 + 72);
    float v232 = (float)v23;
    _S1 = *(float *)&a3 * *(float *)v13;
    _S2 = *(float *)&a3 * *(float *)(v13 + 8);
    _S25 = *(float *)(v13 + 76);
    _S26 = *(float *)(v13 + 80);
    _S27 = *(float *)&a3 * *(float *)(v13 + 16);
    _S4 = *(float *)&a3 * *(float *)(v13 + 20);
    _S5 = *(float *)&a3 * *(float *)(v13 + 28);
    _S28 = *(float *)(v13 + 84);
    _S29 = *(float *)(v13 + 88);
    *(short float *)&a3 = (short float)v23;
    int16x8_t v49 = vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    float16x8_t v229 = (float16x8_t)v49;
    _S30 = *(float *)(v13 + 92);
    _S31 = *(float *)(v13 + 96);
    *(short float *)v49.i16 = -(short float)v24;
    float16x8_t v52 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v49.i8, 0);
    *(short float *)v49.i16 = (short float)v25;
    _Q6.i32[0] = *(_DWORD *)(v13 + 100);
    _Q7.i32[0] = *(_DWORD *)(v13 + 104);
    uint64_t v55 = v13 + 164;
    uint64_t v56 = v13 + 16548;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v49.i8, 0);
    *(short float *)v49.i16 = (short float)v26;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v49.i8, 0);
    *(short float *)v49.i16 = (short float)v27;
    int16x8_t v59 = vdupq_lane_s16(*(int16x4_t *)v49.i8, 0);
    float16x8_t v225 = (float16x8_t)v59;
    *(short float *)v59.i16 = (short float)v28;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v59.i8, 0);
    *(short float *)v59.i16 = (short float)v29;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v59.i8, 0);
    unsigned int v62 = *(unsigned __int8 *)(v13 + 132);
    unsigned __int8 v63 = 16 - v62;
    if (v62 >= 0x11) {
      unsigned __int8 v63 = 0;
    }
    uint64_t v65 = *v14;
    uint64_t v64 = v14[1];
    uint64_t v66 = v64 + v21 * v15 + 2 * v12;
    if (!v64) {
      uint64_t v66 = 0;
    }
    uint64_t result = (void *)(v65 + v20 * v15 + 2 * v12);
    uint64_t v68 = *v16;
    uint64_t v67 = v16[1];
    uint64_t v69 = *v17;
    uint64_t v70 = v17[1];
    uint64_t v71 = v67 + v70 * v10 + v9;
    if (!v67) {
      uint64_t v71 = 0;
    }
    float v72 = (int8x8_t *)(v68 + v69 * v10 + v9);
    float v231 = _S1;
    __asm { FCVT            H3, S1 }
    float v204 = _S5;
    float v205 = _S4;
    __asm { FCVT            H0, S5 }
    short float v203 = _H0;
    float v206 = _S2;
    __asm { FCVT            H0, S27 }
    short float v202 = _H0;
    __asm { FCVT            H0, S4 }
    short float v201 = _H0;
    __asm { FCVT            H0, S2 }
    short float v200 = _H0;
    float v230 = _S9;
    __asm { FCVT            H0, S9 }
    short float v224 = _H0;
    __asm { FCVT            H0, S10 }
    short float v223 = _H0;
    float v228 = _S16;
    __asm { FCVT            H0, S16 }
    short float v222 = _H0;
    float v211 = _S19;
    __asm { FCVT            H0, S18 }
    short float v199 = _H0;
    __asm { FCVT            H0, S19 }
    short float v198 = _H0;
    float v209 = _S21;
    float v210 = _S20;
    __asm { FCVT            H0, S20 }
    short float v197 = _H0;
    __asm { FCVT            H0, S21 }
    short float v196 = _H0;
    float v207 = _S23;
    float v208 = _S22;
    __asm { FCVT            H0, S22 }
    short float v195 = _H0;
    __asm { FCVT            H0, S23 }
    short float v194 = _H0;
    float v227 = _S24;
    __asm { FCVT            H0, S24 }
    short float v220 = _H0;
    float v226 = _S25;
    __asm { FCVT            H0, S25 }
    short float v219 = _H0;
    float v221 = _S26;
    __asm { FCVT            H0, S26 }
    short float v218 = _H0;
    float v94 = _S28;
    __asm { FCVT            H0, S28 }
    short float v217 = _H0;
    float v96 = _S29;
    __asm { FCVT            H0, S29 }
    short float v216 = _H0;
    float v98 = _S30;
    __asm { FCVT            H0, S30 }
    short float v215 = _H0;
    float v100 = _S31;
    __asm { FCVT            H0, S31 }
    short float v214 = _H0;
    float v102 = *(float *)_Q6.i32;
    __asm { FCVT            H0, S6 }
    short float v213 = _H0;
    float v104 = (float)v24;
    float v105 = (float)v25;
    float v106 = (float)v26;
    v107.i64[0] = 0x9000900090009000;
    v107.i64[1] = 0x9000900090009000;
    float v108 = (float)v27;
    float v212 = (float)v28;
    float v109 = (float)v29;
    uint16x8_t v110 = (uint16x8_t)vdupq_n_s16(v63);
    float v111 = *(float *)_Q7.i32;
    __asm { FCVT            H5, S7 }
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v152 = 0;
        float v117 = (__int16 *)v66;
        float v116 = (uint16x8_t *)result;
        uint64_t v115 = v71;
        uint16x8_t v114 = v72;
      }
      else
      {
        int v113 = 0;
        uint16x8_t v114 = v72;
        uint64_t v115 = v71;
        float v116 = (uint16x8_t *)result;
        float v117 = (__int16 *)v66;
        do
        {
          if (v115)
          {
            int8x8x2_t v233 = vld2_s8((const char *)v115);
            v115 += 16;
            *(int8x8_t *)v118.i8 = vzip1_s8(v233.val[0], 0);
            v118.u64[1] = (unint64_t)vzip2_s8(v233.val[0], 0);
            *(int8x8_t *)v119.i8 = vzip1_s8(v233.val[1], 0);
            v119.u64[1] = (unint64_t)vzip2_s8(v233.val[1], 0);
            float16x8_t v120 = vaddq_f16(v52, vcvtq_f16_u16(v118));
            float16x8_t v121 = vaddq_f16(v52, vcvtq_f16_u16(v119));
            float16x8_t v122 = vmulq_n_f16(v121, v200);
            float16x8_t v123 = vmlaq_n_f16(vmulq_n_f16(v120, v202), v121, v201);
            float16x8_t v124 = vmulq_n_f16(v120, v203);
          }
          else
          {
            float16x8_t v124 = 0uLL;
            float16x8_t v123 = 0uLL;
            float16x8_t v122 = 0uLL;
          }
          int8x8_t v125 = *v114++;
          *(int8x8_t *)v126.i8 = vzip1_s8(v125, 0);
          v126.u64[1] = (unint64_t)vzip2_s8(v125, 0);
          float16x8_t v127 = vsubq_f16(vcvtq_f16_u16(v126), v229);
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v122, v127, _H3), (float16x8_t)0), v107));
          float16x8_t v129 = (float16x8_t)vmovl_high_u16(v128);
          *(void *)&long long v130 = v129.u32[2];
          *((void *)&v130 + 1) = v129.u32[3];
          long long v131 = v130;
          *(void *)&long long v130 = v129.u32[0];
          *((void *)&v130 + 1) = v129.u32[1];
          float16x8_t v132 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v128.i8);
          v129.i16[0] = *(_WORD *)(v55 + 2 * v132.u32[0]);
          v129.i16[1] = *(_WORD *)(v55 + 2 * v132.u32[1]);
          v129.i16[2] = *(_WORD *)(v55 + 2 * v132.u32[2]);
          v129.i16[3] = *(_WORD *)(v55 + 2 * v132.u32[3]);
          v129.i16[4] = *(_WORD *)(v55 + 2 * v130);
          v129.i16[5] = *(_WORD *)(v55 + 2 * *((void *)&v130 + 1));
          v129.i16[6] = *(_WORD *)(v55 + 2 * v131);
          v129.i16[7] = *(_WORD *)(v55 + 2 * *((void *)&v131 + 1));
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v123, v127, _H3), (float16x8_t)0), v107));
          uint32x4_t v134 = vmovl_high_u16(v133);
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v133.i8);
          v132.i16[0] = *(_WORD *)(v55 + 2 * v135.u32[0]);
          v132.i16[1] = *(_WORD *)(v55 + 2 * v135.u32[1]);
          v132.i16[2] = *(_WORD *)(v55 + 2 * v135.u32[2]);
          v132.i16[3] = *(_WORD *)(v55 + 2 * v135.u32[3]);
          v132.i16[4] = *(_WORD *)(v55 + 2 * v134.u32[0]);
          v132.i16[5] = *(_WORD *)(v55 + 2 * v134.u32[1]);
          v132.i16[6] = *(_WORD *)(v55 + 2 * v134.u32[2]);
          v132.i16[7] = *(_WORD *)(v55 + 2 * v134.u32[3]);
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v124, v127, _H3), (float16x8_t)0), v107));
          uint32x4_t v137 = vmovl_high_u16(v136);
          float16x8_t v138 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v136.i8);
          v138.i16[0] = *(_WORD *)(v55 + 2 * v138.u32[0]);
          v138.i16[1] = *(_WORD *)(v55 + 2 * v138.u32[1]);
          v138.i16[2] = *(_WORD *)(v55 + 2 * v138.u32[2]);
          v138.i16[3] = *(_WORD *)(v55 + 2 * v138.u32[3]);
          v138.i16[4] = *(_WORD *)(v55 + 2 * v137.u32[0]);
          v138.i16[5] = *(_WORD *)(v55 + 2 * v137.u32[1]);
          v138.i16[6] = *(_WORD *)(v55 + 2 * v137.u32[2]);
          v138.i16[7] = *(_WORD *)(v55 + 2 * v137.u32[3]);
          float16x8_t v139 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v217), v132, v216), v138, v215);
          float16x8_t v140 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, _H5), v132, v213), v129, v214);
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v220), v132, v219), v138, v218), (float16x8_t)0), v107));
          uint32x4_t v142 = vmovl_high_u16(v141);
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v141.i8);
          v144.i16[0] = *(_WORD *)(v56 + 2 * v143.u32[0]);
          v144.i16[1] = *(_WORD *)(v56 + 2 * v143.u32[1]);
          v144.i16[2] = *(_WORD *)(v56 + 2 * v143.u32[2]);
          v144.i16[3] = *(_WORD *)(v56 + 2 * v143.u32[3]);
          v144.i16[4] = *(_WORD *)(v56 + 2 * v142.u32[0]);
          v144.i16[5] = *(_WORD *)(v56 + 2 * v142.u32[1]);
          v144.i16[6] = *(_WORD *)(v56 + 2 * v142.u32[2]);
          v144.i16[7] = *(_WORD *)(v56 + 2 * v142.u32[3]);
          uint16x8_t v145 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v139, (float16x8_t)0), v107));
          uint32x4_t v146 = vmovl_high_u16(v145);
          uint32x4_t v147 = vmovl_u16(*(uint16x4_t *)v145.i8);
          v148.i16[0] = *(_WORD *)(v56 + 2 * v147.u32[0]);
          v148.i16[1] = *(_WORD *)(v56 + 2 * v147.u32[1]);
          v148.i16[2] = *(_WORD *)(v56 + 2 * v147.u32[2]);
          v148.i16[3] = *(_WORD *)(v56 + 2 * v147.u32[3]);
          v148.i16[4] = *(_WORD *)(v56 + 2 * v146.u32[0]);
          v148.i16[5] = *(_WORD *)(v56 + 2 * v146.u32[1]);
          v148.i16[6] = *(_WORD *)(v56 + 2 * v146.u32[2]);
          v148.i16[7] = *(_WORD *)(v56 + 2 * v146.u32[3]);
          uint16x8_t v149 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v140, (float16x8_t)0), v107));
          _Q7 = (float16x8_t)vmovl_high_u16(v149);
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v149.i8);
          v151.i16[0] = *(_WORD *)(v56 + 2 * v150.u32[0]);
          v151.i16[1] = *(_WORD *)(v56 + 2 * v150.u32[1]);
          v151.i16[2] = *(_WORD *)(v56 + 2 * v150.u32[2]);
          v151.i16[3] = *(_WORD *)(v56 + 2 * v150.u32[3]);
          v151.i16[4] = *(_WORD *)(v56 + 2 * _Q7.u32[0]);
          v151.i16[5] = *(_WORD *)(v56 + 2 * _Q7.u32[1]);
          v151.i16[6] = *(_WORD *)(v56 + 2 * _Q7.u32[2]);
          v151.i16[7] = *(_WORD *)(v56 + 2 * _Q7.u32[3]);
          _Q7.i32[0] = v225.i32[0];
          _Q6 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v57, v144, v224), v148, v223), v151, v222), v57), v225)), v110);
          *v116++ = _Q6;
          if (v117)
          {
            _Q7 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v58, v144, v196), v148, v195), v151, v194);
            v234.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v58, v144, v199), v148, v198), v151, v197), v60), v61), v60), v61)), v110);
            _Q6 = vcvtq_u16_f16(_Q7);
            v234.val[1] = (int16x8_t)vshlq_u16(_Q6, v110);
            vst2q_s16(v117, v234);
            v117 += 16;
          }
          v113 += 8;
        }
        while (v113 < (int)v8 - 7);
        unint64_t v152 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v152;
      unint64_t v153 = v8 - v152;
      if (v153 != 0 && _CF)
      {
        do
        {
          if (v115)
          {
            _Q6.i8[0] = *(unsigned char *)v115;
            float v154 = (float)_Q6.u32[0] - v104;
            _Q7.i8[0] = *(unsigned char *)(v115 + 1);
            float v155 = (float)_Q7.u32[0] - v104;
            v115 += 2;
            float v156 = v206 * v155;
            float v157 = (float)(v205 * v155) + (float)(v154 * _S27);
            float v158 = v204 * v154;
          }
          else
          {
            float v158 = 0.0;
            float v157 = 0.0;
            float v156 = 0.0;
          }
          unsigned int v159 = v114->u8[0];
          uint16x8_t v114 = (int8x8_t *)((char *)v114 + 1);
          float v160 = v231 * (float)((float)v159 - v232);
          float v161 = v156 + v160;
          float v162 = 8191.0;
          if (v161 <= 8191.0)
          {
            float v162 = v161;
            if (v161 < 0.0) {
              float v162 = 0.0;
            }
          }
          float v163 = v157 + v160;
          BOOL v164 = (float)(v157 + v160) <= 8191.0;
          float v165 = 8191.0;
          if (v164)
          {
            float v165 = v163;
            if (v163 < 0.0) {
              float v165 = 0.0;
            }
          }
          float v166 = v158 + v160;
          BOOL v164 = (float)(v158 + v160) <= 8191.0;
          float v167 = 8191.0;
          if (v164)
          {
            float v167 = v166;
            if (v166 < 0.0) {
              float v167 = 0.0;
            }
          }
          _H6 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H7 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H16 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          float v174 = (float)((float)(v226 * _S7) + (float)(_S6 * v227)) + (float)(_S16 * v221);
          float v175 = (float)((float)(v96 * _S7) + (float)(_S6 * v94)) + (float)(_S16 * v98);
          _S6 = (float)(v102 * _S7) + (float)(_S6 * v100);
          LOWORD(_S7) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0)));
          __asm { FCVT            S25, H7 }
          LOWORD(_S7) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0)));
          __asm { FCVT            S26, H7 }
          LOWORD(_S6) = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(_S6 + (float)(_S16 * v111), 0.0), 8191.0)));
          __asm { FCVT            S30, H6 }
          *(float *)_Q7.i32 = v228;
          *(float *)_Q6.i32 = (float)((float)(_S10 * _S26) + (float)(v230 * _S25)) + (float)(v228 * _S30);
          float v180 = v108;
          if ((float)(*(float *)_Q6.i32 + v105) <= v108)
          {
            float v180 = *(float *)_Q6.i32 + v105;
            if ((float)(*(float *)_Q6.i32 + v105) < v105) {
              float v180 = v105;
            }
          }
          v116->i16[0] = llroundf(v180) << v63;
          float v116 = (uint16x8_t *)((char *)v116 + 2);
          if (v117)
          {
            float v181 = (float)((float)(v106 + (float)(_S25 * _S18)) + (float)(_S26 * v211)) + (float)(_S30 * v210);
            float v182 = v109;
            if (v181 <= v109)
            {
              float v182 = (float)((float)(v106 + (float)(_S25 * _S18)) + (float)(_S26 * v211)) + (float)(_S30 * v210);
              if (v181 < v212) {
                float v182 = v212;
              }
            }
            *(float *)_Q6.i32 = (float)(v106 + (float)(_S25 * v209)) + (float)(_S26 * v208);
            *(float *)_Q7.i32 = v207;
            float v183 = *(float *)_Q6.i32 + (float)(_S30 * v207);
            *float v117 = llroundf(v182) << v63;
            float v184 = v109;
            if (v183 <= v109)
            {
              *(float *)_Q6.i32 = v212;
              float v184 = v183;
              if (v183 < v212) {
                float v184 = v212;
              }
            }
            v117[1] = llroundf(v184) << v63;
            v117 += 2;
          }
          --v153;
        }
        while (v153);
      }
      float v72 = (int8x8_t *)((char *)v72 + v69);
      v71 += v70;
      uint64_t result = (void *)((char *)result + v20);
      v66 += v21;
      ++v7;
    }
    while (v7 != v11);
    if (v193 && v192)
    {
      uint64_t v185 = 0;
      do
      {
        if (v8)
        {
          unint64_t v186 = v8;
          float v187 = v22;
          float v188 = v19;
          do
          {
            __int16 v189 = *v188++;
            *v187++ = v189 | (v189 << 8);
            --v186;
          }
          while (v186);
        }
        v19 += v190;
        v22 += v191;
        ++v185;
      }
      while (v185 != v11);
    }
    else if (v192)
    {
      do
      {
        if (v8) {
          uint64_t result = memset(v22, 255, 2 * v8);
        }
        v22 += v191;
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Mat_TRC_xf444_GCD(void *result, uint64_t a2, double a3, float a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    unint64_t v12 = v7 + *(void *)((char *)result + 44);
    unint64_t v13 = v8 - v7;
    uint64_t v14 = result[14];
    unint64_t v15 = result[13] * a2 / v6;
    uint64_t v16 = (uint64_t *)result[16];
    unint64_t v17 = v15 + result[15];
    uint64_t v18 = result[19];
    uint64_t v19 = (uint64_t *)result[7];
    int64x2_t v20 = (uint64_t *)result[8];
    long long v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = (unsigned __int8 *)(v25 + v24 * v12 + v11);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    unsigned int v31 = (char *)(v30 + v29 * v17 + 2 * v14);
    LOWORD(a4) = *(_WORD *)(v18 + 140);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a4);
    float v34 = (float)LODWORD(a5);
    float v35 = v32 * *(float *)v18;
    float v120 = v32 * *(float *)(v18 + 16);
    float v121 = v32 * *(float *)(v18 + 8);
    float v36 = v32 * *(float *)(v18 + 20);
    _S4 = *(float *)(v18 + 28);
    *(float *)&unsigned int v38 = v32 * _S4;
    float v118 = *(float *)&v38;
    float v119 = v36;
    LOWORD(v38) = *(_WORD *)(v18 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 152);
    float v43 = (float)v38;
    float v44 = *(float *)(v18 + 36);
    float v45 = *(float *)(v18 + 40);
    float v47 = *(float *)(v18 + 44);
    float v46 = *(float *)(v18 + 48);
    float v117 = v46;
    float v48 = *(float *)(v18 + 52);
    float v49 = *(float *)(v18 + 56);
    float v50 = *(float *)(v18 + 60);
    float v51 = *(float *)(v18 + 64);
    float v52 = *(float *)(v18 + 68);
    float v53 = *(float *)(v18 + 72);
    float v55 = *(float *)(v18 + 76);
    float v54 = *(float *)(v18 + 80);
    float v56 = *(float *)(v18 + 84);
    float v57 = *(float *)(v18 + 88);
    float v58 = *(float *)(v18 + 92);
    float v59 = *(float *)(v18 + 96);
    float v60 = *(float *)(v18 + 100);
    float v61 = *(float *)(v18 + 104);
    uint64_t v62 = v18 + 164;
    uint64_t result = (void *)(v18 + 16548);
    unsigned int v63 = *(unsigned __int8 *)(v18 + 132);
    if (v63 >= 0x11) {
      char v64 = 0;
    }
    else {
      char v64 = 16 - v63;
    }
    uint64_t v66 = *v16;
    uint64_t v65 = v16[1];
    uint64_t v67 = v65 + v28 * v17 + 2 * v14;
    if (!v65) {
      uint64_t v67 = 0;
    }
    uint64_t v68 = v66 + v27 * v17 + 2 * v14;
    uint64_t v70 = *v19;
    uint64_t v69 = v19[1];
    uint64_t v71 = (unsigned char *)(v69 + v23 * v12 + v11);
    if (!v69) {
      uint64_t v71 = 0;
    }
    float v72 = (unsigned __int8 *)(v70 + v22 * v12 + v11);
    char v73 = v64;
    do
    {
      uint64_t v74 = v10;
      float v75 = v72;
      uint64_t v76 = v71;
      float v77 = (_WORD *)v67;
      for (uint64_t i = (_WORD *)v68; v74; --v74)
      {
        if (v76)
        {
          LOBYTE(v46) = *v76;
          float v79 = (float)LODWORD(v46) - v34;
          LOBYTE(_S4) = v76[1];
          float v80 = (float)LODWORD(_S4) - v34;
          v76 += 2;
          float v81 = v121 * v80;
          float v82 = (float)(v119 * v80) + (float)(v79 * v120);
          float v83 = v118 * v79;
        }
        else
        {
          float v83 = 0.0;
          float v82 = 0.0;
          float v81 = 0.0;
        }
        unsigned int v84 = *v75++;
        float v85 = v35 * (float)((float)v84 - v33);
        float v86 = v81 + v85;
        float v87 = 8191.0;
        if (v86 <= 8191.0)
        {
          float v87 = v86;
          if (v86 < 0.0) {
            float v87 = 0.0;
          }
        }
        float v88 = v82 + v85;
        BOOL v89 = (float)(v82 + v85) <= 8191.0;
        float v90 = 8191.0;
        if (v89)
        {
          float v90 = v88;
          if (v88 < 0.0) {
            float v90 = 0.0;
          }
        }
        float v91 = v83 + v85;
        BOOL v89 = (float)(v83 + v85) <= 8191.0;
        float v92 = 8191.0;
        if (v89)
        {
          float v92 = v91;
          if (v91 < 0.0) {
            float v92 = 0.0;
          }
        }
        _H0 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
        __asm { FCVT            S0, H0 }
        _H5 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        _H4 = *(_WORD *)(v62 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        float v103 = (float)((float)(v55 * _S5) + (float)(_S0 * v53)) + (float)(_S4 * v54);
        float v104 = (float)((float)(v57 * _S5) + (float)(_S0 * v56)) + (float)(_S4 * v58);
        _S0 = (float)((float)(v60 * _S5) + (float)(_S0 * v59)) + (float)(_S4 * v61);
        LOWORD(_S4) = *((_WORD *)result + llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
        __asm { FCVT            S4, H4 }
        LOWORD(_S5) = *((_WORD *)result + llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
        __asm { FCVT            S5, H5 }
        LOWORD(_S0) = *((_WORD *)result + llroundf(fminf(fmaxf(_S0, 0.0), 8191.0)));
        __asm { FCVT            S6, H0 }
        float v46 = (float)((float)((float)(v45 * _S5) + (float)(v44 * _S4)) + (float)(v47 * _S6)) + v39;
        float v108 = v41;
        if (v46 <= v41)
        {
          float v108 = (float)((float)((float)(v45 * _S5) + (float)(v44 * _S4)) + (float)(v47 * _S6)) + v39;
          if (v46 < v39) {
            float v108 = v39;
          }
        }
        *i++ = llroundf(v108) << v73;
        if (v77)
        {
          float v109 = (float)((float)(v40 + (float)(_S4 * v117)) + (float)(_S5 * v48)) + (float)(_S6 * v49);
          float v110 = v43;
          if (v109 <= v43)
          {
            float v110 = (float)((float)(v40 + (float)(_S4 * v117)) + (float)(_S5 * v48)) + (float)(_S6 * v49);
            if (v109 < v42) {
              float v110 = v42;
            }
          }
          float v46 = (float)(v40 + (float)(_S4 * v50)) + (float)(_S5 * v51);
          _S4 = v46 + (float)(_S6 * v52);
          *float v77 = llroundf(v110) << v73;
          float v111 = v43;
          if (_S4 <= v43)
          {
            float v111 = v46 + (float)(_S6 * v52);
            if (_S4 < v42) {
              float v111 = v42;
            }
          }
          v77[1] = llroundf(v111) << v73;
          v77 += 2;
        }
      }
      v72 += v22;
      v71 += v23;
      v68 += v27;
      v67 += v28;
      ++v9;
    }
    while (v9 != v13);
    if (v25 && v30)
    {
      uint64_t v112 = 0;
      do
      {
        if (v10)
        {
          uint64_t v113 = v10;
          uint16x8_t v114 = v31;
          uint64_t v115 = v26;
          do
          {
            __int16 v116 = *v115++;
            *v114++ = v116 | (v116 << 8);
            --v113;
          }
          while (v113);
        }
        v26 += v24;
        v31 += v29;
        ++v112;
      }
      while (v112 != v13);
    }
    else if (v30)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v31, 255, 2 * v10);
        }
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_xf444_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_xf444_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_rgb_xf444_neon_fp16_GCD(void *result, uint64_t a2, double a3, double a4, double a5, double a6, double _D4)
{
  uint64_t v8 = *(void *)((char *)result + 28);
  unint64_t v9 = *(unsigned __int8 *)result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (v11 != v10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(void *)((char *)result + 20);
    uint64_t v14 = *(void *)((char *)result + 36);
    unint64_t v15 = v10 + *(void *)((char *)result + 44);
    unint64_t v16 = v11 - v10;
    uint64_t v17 = result[14];
    uint64_t v18 = (uint64_t *)result[16];
    unint64_t v19 = result[13] * a2 / v9 + result[15];
    uint64_t v20 = result[19];
    long long v21 = (uint64_t *)result[7];
    int64x2_t v22 = (uint64_t *)result[8];
    uint64_t v23 = (uint64_t *)result[17];
    uint64_t v24 = *v22;
    uint64_t v25 = v22[1];
    uint64_t v26 = v22[2];
    uint64_t v27 = v21[2];
    uint64_t v28 = (unsigned __int8 *)(v27 + v26 * v15 + v14);
    uint64_t v29 = *v23;
    uint64_t v30 = v23[1];
    uint64_t v31 = v23[2];
    uint64_t v32 = v18[2];
    float v33 = (char *)(v32 + v31 * v19 + 2 * v17);
    unsigned int v34 = *(unsigned __int16 *)(v20 + 140);
    unsigned int v35 = *(unsigned __int16 *)(v20 + 142);
    unsigned int v36 = *(unsigned __int16 *)(v20 + 144);
    unsigned int v37 = *(unsigned __int16 *)(v20 + 146);
    unsigned int v38 = *(unsigned __int16 *)(v20 + 148);
    unsigned int v39 = *(unsigned __int16 *)(v20 + 150);
    float v40 = (float)v34;
    *(short float *)v7.i16 = (short float)v34;
    unsigned int v41 = *(unsigned __int16 *)(v20 + 152);
    _S1 = *(float *)(v20 + 36);
    _S2 = *(float *)(v20 + 40);
    _S3 = *(float *)(v20 + 44);
    _S21 = *(float *)(v20 + 48);
    _S22 = *(float *)(v20 + 52);
    _S26 = *(float *)(v20 + 56);
    _S28 = *(float *)(v20 + 60);
    _S10 = *(float *)(v20 + 64);
    float v135 = *(float *)(v20 + 68);
    float v50 = (float)v35;
    *(float *)&_D4 = (float)*(unsigned int *)(v20 + 136) / (float)*(unsigned int *)(v20 + 128);
    _S19 = *(float *)&_D4 * *(float *)v20;
    _S5 = *(float *)&_D4 * *(float *)(v20 + 8);
    _S6 = *(float *)&_D4 * *(float *)(v20 + 16);
    _S7 = *(float *)&_D4 * *(float *)(v20 + 20);
    _S16 = *(float *)&_D4 * *(float *)(v20 + 28);
    float v56 = (float)v36;
    float v57 = (float)v37;
    float v58 = (float)v38;
    float v59 = (float)v39;
    float v60 = (float)v41;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v7.i8, 0);
    __asm { FCVT            H8, S19 }
    *(short float *)&_D4 = -(short float)v35;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D4, 0);
    float v146 = _S16;
    __asm { FCVT            H4, S16 }
    short float v145 = *(short float *)&_D4;
    float v148 = _S6;
    __asm { FCVT            H4, S6 }
    short float v143 = *(short float *)&_D4;
    float v147 = _S7;
    __asm { FCVT            H4, S7 }
    short float v142 = *(short float *)&_D4;
    *(short float *)&_D4 = (short float)v36;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D4, 0);
    *(short float *)&_D4 = (short float)v37;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D4, 0);
    *(short float *)&_D4 = (short float)v38;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D4, 0);
    *(short float *)&_D4 = (short float)v39;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D4, 0);
    *(short float *)&_D4 = (short float)v41;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D4, 0);
    unsigned int v73 = *(unsigned __int8 *)(v20 + 132);
    unsigned __int8 v74 = 16 - v73;
    if (v73 >= 0x11) {
      unsigned __int8 v74 = 0;
    }
    uint64_t v76 = *v18;
    uint64_t v75 = v18[1];
    uint64_t v77 = v75 + v30 * v19 + 2 * v17;
    if (!v75) {
      uint64_t v77 = 0;
    }
    uint64_t result = (void *)(v76 + v29 * v19 + 2 * v17);
    uint64_t v79 = *v21;
    uint64_t v78 = v21[1];
    uint64_t v80 = v78 + v25 * v15 + v14;
    if (!v78) {
      uint64_t v80 = 0;
    }
    float v81 = (int8x8_t *)(v79 + v24 * v15 + v14);
    unsigned __int8 v82 = v74;
    float v149 = _S5;
    __asm { FCVT            H4, S5 }
    short float v141 = _H4;
    __asm
    {
      FCVT            H5, S1
      FCVT            H6, S2
      FCVT            H7, S3
    }
    float v152 = _S21;
    __asm { FCVT            H4, S21 }
    short float v140 = _H4;
    float v151 = _S22;
    __asm { FCVT            H4, S22 }
    short float v139 = _H4;
    float v150 = _S26;
    __asm { FCVT            H4, S26 }
    short float v138 = _H4;
    float v144 = _S28;
    __asm { FCVT            H4, S28 }
    short float v137 = _H4;
    float v91 = _S10;
    __asm { FCVT            H4, S10 }
    short float v136 = _H4;
    _S10 = v135;
    __asm { FCVT            H4, S4 }
    uint16x8_t v95 = (uint16x8_t)vdupq_n_s16(v74);
    do
    {
      if ((int)v13 < 8)
      {
        unint64_t v114 = 0;
        float v100 = (__int16 *)v77;
        float v99 = (uint16x8_t *)result;
        uint64_t v98 = v80;
        uint64_t v97 = v81;
      }
      else
      {
        int v96 = 0;
        uint64_t v97 = v81;
        uint64_t v98 = v80;
        float v99 = (uint16x8_t *)result;
        float v100 = (__int16 *)v77;
        do
        {
          if (v98)
          {
            float16x8_t v153 = (float16x8_t)vld2_s8((const char *)v98);
            v98 += 16;
            *(int8x8_t *)v101.i8 = vzip1_s8(*(int8x8_t *)v153.i8, 0);
            v101.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v153.i8, 0);
            *(int8x8_t *)v102.i8 = vzip1_s8((int8x8_t)v153.u64[1], 0);
            v102.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v153.u64[1], 0);
            float16x8_t v153 = vcvtq_f16_u16(v102);
            float16x8_t v103 = vaddq_f16(v67, vcvtq_f16_u16(v101));
            float16x8_t v153 = vaddq_f16(v67, v153);
            float16x8_t v104 = vmulq_n_f16(v153, v141);
            float16x8_t v105 = vmlaq_n_f16(vmulq_n_f16(v103, v143), v153, v142);
            float16x8_t v106 = vmulq_n_f16(v103, v145);
          }
          else
          {
            float16x8_t v106 = 0uLL;
            float16x8_t v105 = 0uLL;
            float16x8_t v104 = 0uLL;
          }
          int8x8_t v107 = *v97++;
          *(int8x8_t *)v108.i8 = vzip1_s8(v107, 0);
          v108.u64[1] = (unint64_t)vzip2_s8(v107, 0);
          float16x8_t v109 = vsubq_f16(vcvtq_f16_u16(v108), v61);
          float16x8_t v110 = vmlaq_n_f16(v104, v109, _H8);
          float16x8_t v111 = vmlaq_n_f16(v105, v109, _H8);
          float16x8_t v7 = vmlaq_n_f16(v106, v109, _H8);
          *v99++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v68, v110, _H5), v111, _H6), v7, _H7), v68), v70)), v95);
          if (v100)
          {
            float16x8_t v112 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, v110, v137), v111, v136), v7, _H4);
            float16x8_t v7 = (float16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v69, v110, v140), v111, v139), v7, v138), v71), v72), v71), v72)), v95);
            uint16x8_t v113 = vshlq_u16(vcvtq_u16_f16(v112), v95);
            vst2q_s16(v100, *(int16x8x2_t *)v7.i8);
            v100 += 16;
          }
          v96 += 8;
        }
        while (v96 < (int)v13 - 7);
        unint64_t v114 = v13 & 0xFFFFFFF8;
      }
      _CF = v13 >= v114;
      unint64_t v115 = v13 - v114;
      if (v115 != 0 && _CF)
      {
        do
        {
          if (v98)
          {
            v7.i8[0] = *(unsigned char *)v98;
            *(float *)&unsigned int v116 = (float)v7.u32[0];
            float v117 = *(float *)&v116 - v50;
            LOBYTE(v116) = *(unsigned char *)(v98 + 1);
            float v118 = (float)v116 - v50;
            v98 += 2;
            *(float *)v7.i32 = v149 * v118;
            float v119 = (float)(v147 * v118) + (float)(v117 * v148);
            float v120 = v146 * v117;
          }
          else
          {
            float v120 = 0.0;
            float v119 = 0.0;
            v7.i32[0] = 0;
          }
          unsigned int v121 = v97->u8[0];
          uint64_t v97 = (int8x8_t *)((char *)v97 + 1);
          float v122 = _S19 * (float)((float)v121 - v40);
          *(float *)v7.i32 = *(float *)v7.i32 + v122;
          float v123 = v119 + v122;
          float v124 = v120 + v122;
          float v125 = (float)((float)((float)(_S2 * v123) + (float)(_S1 * *(float *)v7.i32)) + (float)(_S3 * v124)) + v56;
          float v126 = v58;
          if (v125 <= v58)
          {
            float v126 = (float)((float)((float)(_S2 * v123) + (float)(_S1 * *(float *)v7.i32)) + (float)(_S3 * v124)) + v56;
            if (v125 < v56) {
              float v126 = v56;
            }
          }
          v99->i16[0] = llroundf(v126) << v82;
          float v99 = (uint16x8_t *)((char *)v99 + 2);
          if (v100)
          {
            float v127 = (float)((float)(v57 + (float)(*(float *)v7.i32 * v152)) + (float)(v123 * v151))
                 + (float)(v124 * v150);
            float v128 = v60;
            if (v127 <= v60)
            {
              float v128 = (float)((float)(v57 + (float)(*(float *)v7.i32 * v152)) + (float)(v123 * v151))
                   + (float)(v124 * v150);
              if (v127 < v59) {
                float v128 = v59;
              }
            }
            *(float *)v7.i32 = (float)((float)(v57 + (float)(*(float *)v7.i32 * v144)) + (float)(v123 * v91))
                             + (float)(v124 * v135);
            *float v100 = llroundf(v128) << v82;
            float v129 = v60;
            if (*(float *)v7.i32 <= v60)
            {
              float v129 = *(float *)v7.i32;
              if (*(float *)v7.i32 < v59) {
                float v129 = v59;
              }
            }
            v100[1] = llroundf(v129) << v82;
            v100 += 2;
          }
          --v115;
        }
        while (v115);
      }
      float v81 = (int8x8_t *)((char *)v81 + v24);
      v80 += v25;
      uint64_t result = (void *)((char *)result + v29);
      v77 += v30;
      ++v12;
    }
    while (v12 != v16);
    if (v27 && v32)
    {
      uint64_t v130 = 0;
      do
      {
        if (v13)
        {
          unint64_t v131 = v13;
          float16x8_t v132 = v33;
          uint16x8_t v133 = v28;
          do
          {
            __int16 v134 = *v133++;
            *v132++ = v134 | (v134 << 8);
            --v131;
          }
          while (v131);
        }
        v28 += v26;
        v33 += v31;
        ++v130;
      }
      while (v130 != v16);
    }
    else if (v32)
    {
      do
      {
        if (v13) {
          uint64_t result = memset(v33, 255, 2 * v13);
        }
        v33 += v31;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_xf444(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_xf444_GCD);
  return 0;
}

void *vt_Copy_444vf_rgb_xf444_GCD(void *result, uint64_t a2)
{
  uint64_t v7 = *(void *)((char *)result + 28);
  unint64_t v8 = *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)((char *)result + 20);
    uint64_t v13 = *(void *)((char *)result + 36);
    unint64_t v14 = v9 + *(void *)((char *)result + 44);
    unint64_t v15 = v10 - v9;
    uint64_t v16 = result[14];
    uint64_t v17 = (uint64_t *)result[16];
    unint64_t v18 = result[13] * a2 / v8 + result[15];
    uint64_t v19 = result[19];
    int64x2_t v20 = (uint64_t *)result[7];
    long long v21 = (uint64_t *)result[8];
    int64x2_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    uint64_t v27 = (unsigned __int8 *)(v26 + v25 * v14 + v13);
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    uint64_t v32 = (char *)(v31 + v30 * v18 + 2 * v16);
    *(float *)&unsigned int v33 = (float)*(unsigned int *)(v19 + 128);
    *(float *)&unsigned int v34 = (float)*(unsigned int *)(v19 + 136);
    float v35 = *(float *)&v34 / *(float *)&v33;
    LOWORD(v33) = *(_WORD *)(v19 + 140);
    float v36 = (float)v33;
    LOWORD(v34) = *(_WORD *)(v19 + 142);
    float v37 = (float)v34;
    float v38 = v35 * *(float *)v19;
    float v39 = v35 * *(float *)(v19 + 8);
    float v40 = v35 * *(float *)(v19 + 16);
    float v41 = v35 * *(float *)(v19 + 20);
    float v42 = *(float *)(v19 + 28);
    float v43 = v35 * v42;
    LOWORD(v42) = *(_WORD *)(v19 + 144);
    float v44 = (float)LODWORD(v42);
    LOWORD(v2) = *(_WORD *)(v19 + 146);
    float v45 = (float)v2;
    LOWORD(v3) = *(_WORD *)(v19 + 148);
    float v46 = (float)v3;
    LOWORD(v4) = *(_WORD *)(v19 + 150);
    float v47 = (float)v4;
    LOWORD(v5) = *(_WORD *)(v19 + 152);
    float v48 = (float)v5;
    float v49 = *(float *)(v19 + 36);
    float v50 = *(float *)(v19 + 40);
    float v51 = *(float *)(v19 + 44);
    float v52 = *(float *)(v19 + 48);
    float v53 = *(float *)(v19 + 52);
    float v54 = *(float *)(v19 + 56);
    float v55 = *(float *)(v19 + 60);
    float v56 = *(float *)(v19 + 64);
    float v57 = *(float *)(v19 + 68);
    unsigned int v58 = *(unsigned __int8 *)(v19 + 132);
    char v59 = 16 - v58;
    if (v58 >= 0x11) {
      char v59 = 0;
    }
    uint64_t v61 = *v17;
    uint64_t v60 = v17[1];
    uint64_t v62 = v60 + v29 * v18 + 2 * v16;
    if (!v60) {
      uint64_t v62 = 0;
    }
    uint64_t result = (void *)(v61 + v28 * v18 + 2 * v16);
    uint64_t v64 = *v20;
    uint64_t v63 = v20[1];
    uint64_t v65 = (unsigned char *)(v63 + v24 * v14 + v13);
    if (!v63) {
      uint64_t v65 = 0;
    }
    uint64_t v66 = (unsigned __int8 *)(v64 + v23 * v14 + v13);
    char v67 = v59;
    do
    {
      uint64_t v68 = v12;
      float16x8_t v69 = v66;
      float16x8_t v70 = v65;
      float16x8_t v71 = (_WORD *)v62;
      for (uint64_t i = result; v68; --v68)
      {
        if (v70)
        {
          LOBYTE(v6) = *v70;
          *(float *)&unsigned int v73 = (float)LODWORD(v6);
          float v74 = *(float *)&v73 - v37;
          LOBYTE(v73) = v70[1];
          float v75 = (float)v73 - v37;
          v70 += 2;
          float v76 = v39 * v75;
          float v77 = (float)(v41 * v75) + (float)(v74 * v40);
          float v78 = v43 * v74;
        }
        else
        {
          float v78 = 0.0;
          float v77 = 0.0;
          float v76 = 0.0;
        }
        unsigned int v79 = *v69++;
        float v80 = v38 * (float)((float)v79 - v36);
        float v6 = v76 + v80;
        float v81 = v77 + v80;
        float v82 = v78 + v80;
        float v83 = (float)((float)((float)(v50 * v81) + (float)(v49 * v6)) + (float)(v51 * v82)) + v44;
        float v84 = v46;
        if (v83 <= v46)
        {
          float v84 = (float)((float)((float)(v50 * v81) + (float)(v49 * v6)) + (float)(v51 * v82)) + v44;
          if (v83 < v44) {
            float v84 = v44;
          }
        }
        *i++ = llroundf(v84) << v67;
        if (v71)
        {
          float v85 = (float)((float)(v45 + (float)(v6 * v52)) + (float)(v81 * v53)) + (float)(v82 * v54);
          float v86 = v48;
          if (v85 <= v48)
          {
            float v86 = (float)((float)(v45 + (float)(v6 * v52)) + (float)(v81 * v53)) + (float)(v82 * v54);
            if (v85 < v47) {
              float v86 = v47;
            }
          }
          float v6 = (float)((float)(v45 + (float)(v6 * v55)) + (float)(v81 * v56)) + (float)(v82 * v57);
          *float16x8_t v71 = llroundf(v86) << v67;
          float v87 = v48;
          if (v6 <= v48)
          {
            float v87 = v6;
            if (v6 < v47) {
              float v87 = v47;
            }
          }
          v71[1] = llroundf(v87) << v67;
          v71 += 2;
        }
      }
      v66 += v23;
      v65 += v24;
      uint64_t result = (void *)((char *)result + v28);
      v62 += v29;
      ++v11;
    }
    while (v11 != v15);
    if (v26 && v31)
    {
      uint64_t v88 = 0;
      do
      {
        if (v12)
        {
          uint64_t v89 = v12;
          float v90 = v32;
          float v91 = v27;
          do
          {
            __int16 v92 = *v91++;
            *v90++ = v92 | (v92 << 8);
            --v89;
          }
          while (v89);
        }
        v27 += v25;
        v32 += v30;
        ++v88;
      }
      while (v88 != v15);
    }
    else if (v31)
    {
      do
      {
        if (v12) {
          uint64_t result = memset(v32, 255, 2 * v12);
        }
        v32 += v30;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double _D0)
{
  char v3 = 0;
  uint64_t v4 = 0;
  unint64_t v5 = *(void *)(a1 + 20);
  uint64_t v6 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v195 = v12 + v7;
  uint64_t v13 = *((void *)a1 + 15);
  uint64_t v176 = *((void *)a1 + 14);
  uint64_t v14 = *((void *)a1 + 19);
  uint64_t v16 = (uint64_t *)*((void *)a1 + 7);
  unint64_t v15 = (uint64_t *)*((void *)a1 + 8);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *v15;
  uint64_t v19 = v15[1];
  uint64_t v20 = v15[2];
  uint64_t v21 = v16[1];
  uint64_t v175 = *v16;
  uint64_t v22 = v16[2];
  uint64_t v23 = **((void **)a1 + 17);
  uint64_t v24 = **((void **)a1 + 16);
  uint64_t result = (void *)*(unsigned int *)(v14 + 128);
  uint64_t v185 = *(unsigned __int8 *)(v14 + 158);
  v210[0] = *(unsigned char *)(v14 + 158);
  uint64_t v184 = *(unsigned __int8 *)(v14 + 159);
  v210[1] = *(unsigned char *)(v14 + 159);
  uint64_t v183 = *(unsigned __int8 *)(v14 + 160);
  v210[2] = *(unsigned char *)(v14 + 160);
  uint64_t v182 = *(unsigned __int8 *)(v14 + 161);
  v210[3] = *(unsigned char *)(v14 + 161);
  unsigned int v26 = *(unsigned __int16 *)(v14 + 140);
  unsigned int v27 = *(unsigned __int16 *)(v14 + 142);
  LODWORD(_D0) = *(_DWORD *)v14;
  float v28 = *(float *)(v14 + 8);
  float v29 = *(float *)(v14 + 16);
  float v30 = *(float *)(v14 + 20);
  float v31 = *(float *)(v14 + 28);
  _S22 = *(float *)(v14 + 72);
  _S24 = *(float *)(v14 + 76);
  _S28 = *(float *)(v14 + 80);
  _S29 = *(float *)(v14 + 84);
  _S31 = *(float *)(v14 + 88);
  unint64_t v37 = v23 * (v17 / v9 + v13);
  float v206 = *(float *)(v14 + 96);
  float v207 = *(float *)(v14 + 92);
  float v204 = *(float *)(v14 + 104);
  float v205 = *(float *)(v14 + 100);
  float v202 = *(float *)(v14 + 112);
  float v203 = *(float *)(v14 + 108);
  float v200 = *(float *)(v14 + 120);
  float v201 = *(float *)(v14 + 116);
  long long v208 = 0u;
  long long v209 = 0u;
  do
  {
    int v38 = 0;
    char v39 = v210[v4];
    do
    {
      *(unsigned char *)(((unint64_t)&v208 + ((v39 + 4 * v38) & 0xF8)) | (v39 + 4 * (_BYTE)v38) & 7) = v3 + v38;
      ++v38;
    }
    while (v38 != 8);
    ++v4;
    v3 += 8;
  }
  while (v4 != 4);
  if (v12 != v10)
  {
    uint64_t v40 = 0;
    float v41 = (float)result;
    uint64_t result = &unk_193E7D000;
    float v42 = 8191.0 / v41;
    *(float *)_D6.i32 = (float)v26;
    float v44 = (float)v27;
    *(float *)&_D0 = v42 * *(float *)&_D0;
    float v198 = *(float *)&_D0;
    float v199 = (float)v26;
    __asm { FCVT            H8, S0 }
    *(short float *)&_D0 = (short float)v26;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    float16x8_t v197 = (float16x8_t)_Q0;
    *(short float *)_Q0.i16 = -(short float)v27;
    uint64_t v51 = v195 - v11;
    float16x8_t v52 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float v190 = v42 * v31;
    float v191 = v42 * v30;
    __asm { FCVT            H0, S4 }
    short float v189 = *(short float *)_Q0.i16;
    float v192 = v42 * v29;
    float v193 = v42 * v28;
    __asm { FCVT            H0, S2 }
    short float v188 = *(short float *)_Q0.i16;
    uint64_t v53 = v14 + 16548;
    uint64_t v54 = v14 + 164;
    uint64_t v55 = v14 + 32932;
    __asm { FCVT            H0, S3 }
    short float v187 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S1 }
    short float v186 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v203;
    __asm { FCVT            H0, S0 }
    short float v196 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v202;
    __asm { FCVT            H0, S0 }
    short float v194 = *(short float *)_Q0.i16;
    *(float *)_Q0.i32 = v201;
    __asm { FCVT            H15, S0 }
    *(float *)_Q0.i32 = v200;
    __asm
    {
      FCVT            H9, S0
      FCVT            H10, S22
      FCVT            H11, S24
      FCVT            H12, S28
      FCVT            H0, S29
      FCVT            H1, S31
    }
    _S3 = v206;
    _S2 = v207;
    __asm
    {
      FCVT            H2, S2
      FCVT            H3, S3
    }
    _S5 = v204;
    _S4 = v205;
    __asm
    {
      FCVT            H4, S4
      FCVT            H5, S5
    }
    uint64_t v71 = v24 + v37 + 4 * v176;
    if (v22) {
      float16x8_t v72 = (char *)(v22 + v20 * v11 + v6);
    }
    else {
      float16x8_t v72 = 0;
    }
    if (v21) {
      uint64_t v73 = v21 + v19 * v11 + v6;
    }
    else {
      uint64_t v73 = 0;
    }
    float v74 = (int8x8_t *)(v175 + v18 * v11 + v6);
    v75.i64[0] = 0x9000900090009000;
    v75.i64[1] = 0x9000900090009000;
    float v180 = _S24;
    float v181 = _S22;
    float v178 = _S29;
    float v179 = _S28;
    float v177 = _S31;
    do
    {
      if ((int)v5 < 8)
      {
        unint64_t v129 = 0;
        uint64_t v82 = v73;
        float v81 = v72;
        float v80 = (_OWORD *)v71;
        unsigned int v79 = v74;
      }
      else
      {
        int v76 = 0;
        int8x8_t v78 = *(int8x8_t *)((char *)&v208 + 8);
        int8x8_t v77 = (int8x8_t)v208;
        unsigned int v79 = v74;
        float v80 = (_OWORD *)v71;
        float v81 = v72;
        uint64_t v82 = v73;
        int8x8_t v83 = *(int8x8_t *)((char *)&v209 + 8);
        _D6 = (int8x8_t)v209;
        do
        {
          if (v82)
          {
            float16x8_t v211 = (float16x8_t)vld2_s8((const char *)v82);
            v82 += 16;
            *(int8x8_t *)v84.i8 = vzip1_s8(*(int8x8_t *)v211.i8, 0);
            v84.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v211.i8, 0);
            *(int8x8_t *)v85.i8 = vzip1_s8((int8x8_t)v211.u64[1], 0);
            v85.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v211.u64[1], 0);
            *(float16x8_t *)((char *)&v211 + 8) = vaddq_f16(v52, vcvtq_f16_u16(v84));
            float16x8_t v211 = vaddq_f16(v52, vcvtq_f16_u16(v85));
            float16x8_t v86 = vmulq_n_f16(v211, v186);
            float16x8_t v87 = vmlaq_n_f16(vmulq_n_f16(*(float16x8_t *)((char *)&v211 + 8), v188), v211, v187);
            float16x8_t v88 = vmulq_n_f16(*(float16x8_t *)((char *)&v211 + 8), v189);
          }
          else
          {
            float16x8_t v88 = 0uLL;
            float16x8_t v87 = 0uLL;
            float16x8_t v86 = 0uLL;
          }
          int8x8_t v89 = *v79++;
          int8x8_t v90 = 0;
          *(int8x8_t *)v91.i8 = vzip1_s8(v89, 0);
          v91.u64[1] = (unint64_t)vzip2_s8(v89, 0);
          float16x8_t v92 = vsubq_f16(vcvtq_f16_u16(v91), v197);
          float16x8_t v93 = vmlaq_n_f16(v86, v92, _H8);
          float16x8_t v94 = vmlaq_n_f16(v87, v92, _H8);
          float16x8_t v95 = vmlaq_n_f16(v88, v92, _H8);
          if (v81)
          {
            int8x8_t v96 = *(int8x8_t *)v81;
            v81 += 8;
            int8x8_t v90 = v96;
          }
          uint16x8_t v97 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v93, (float16x8_t)0), v75));
          uint32x4_t v98 = vmovl_high_u16(v97);
          float16x8_t v99 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v97.i8);
          v99.i16[0] = *(_WORD *)(v54 + 2 * v99.u32[0]);
          v99.i16[1] = *(_WORD *)(v54 + 2 * v99.u32[1]);
          v99.i16[2] = *(_WORD *)(v54 + 2 * v99.u32[2]);
          v99.i16[3] = *(_WORD *)(v54 + 2 * v99.u32[3]);
          v99.i16[4] = *(_WORD *)(v54 + 2 * v98.u32[0]);
          v99.i16[5] = *(_WORD *)(v54 + 2 * v98.u32[1]);
          v99.i16[6] = *(_WORD *)(v54 + 2 * v98.u32[2]);
          v99.i16[7] = *(_WORD *)(v54 + 2 * v98.u32[3]);
          uint16x8_t v100 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v94, (float16x8_t)0), v75));
          uint32x4_t v101 = vmovl_high_u16(v100);
          float16x8_t v102 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v100.i8);
          v102.i16[0] = *(_WORD *)(v54 + 2 * v102.u32[0]);
          v102.i16[1] = *(_WORD *)(v54 + 2 * v102.u32[1]);
          v102.i16[2] = *(_WORD *)(v54 + 2 * v102.u32[2]);
          v102.i16[3] = *(_WORD *)(v54 + 2 * v102.u32[3]);
          v102.i16[4] = *(_WORD *)(v54 + 2 * v101.u32[0]);
          v102.i16[5] = *(_WORD *)(v54 + 2 * v101.u32[1]);
          v102.i16[6] = *(_WORD *)(v54 + 2 * v101.u32[2]);
          v102.i16[7] = *(_WORD *)(v54 + 2 * v101.u32[3]);
          uint16x8_t v103 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v95, (float16x8_t)0), v75));
          uint32x4_t v104 = vmovl_high_u16(v103);
          float16x8_t v105 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v103.i8);
          v105.i16[0] = *(_WORD *)(v54 + 2 * v105.u32[0]);
          v105.i16[1] = *(_WORD *)(v54 + 2 * v105.u32[1]);
          v105.i16[2] = *(_WORD *)(v54 + 2 * v105.u32[2]);
          v105.i16[3] = *(_WORD *)(v54 + 2 * v105.u32[3]);
          v105.i16[4] = *(_WORD *)(v54 + 2 * v104.u32[0]);
          v105.i16[5] = *(_WORD *)(v54 + 2 * v104.u32[1]);
          v105.i16[6] = *(_WORD *)(v54 + 2 * v104.u32[2]);
          v105.i16[7] = *(_WORD *)(v54 + 2 * v104.u32[3]);
          uint16x8_t v106 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v99, v196), v102, v194), v105, _H15), vmaxq_f16(vmaxq_f16(v99, v102), v105), _H9), (float16x8_t)0), v75));
          uint32x4_t v107 = vmovl_high_u16(v106);
          uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v106.i8);
          v109.i16[0] = *(_WORD *)(v53 + 2 * v108.u32[0]);
          v109.i16[1] = *(_WORD *)(v53 + 2 * v108.u32[1]);
          v109.i16[2] = *(_WORD *)(v53 + 2 * v108.u32[2]);
          v109.i16[3] = *(_WORD *)(v53 + 2 * v108.u32[3]);
          v109.i16[4] = *(_WORD *)(v53 + 2 * v107.u32[0]);
          v109.i16[5] = *(_WORD *)(v53 + 2 * v107.u32[1]);
          v109.i16[6] = *(_WORD *)(v53 + 2 * v107.u32[2]);
          v109.i16[7] = *(_WORD *)(v53 + 2 * v107.u32[3]);
          float16x8_t v110 = vmulq_f16(v99, v109);
          float16x8_t v111 = vmulq_f16(v102, v109);
          float16x8_t v112 = vmulq_f16(v105, v109);
          float16x8_t v113 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v110, _H10), v111, _H11), v112, _H12);
          float16x8_t v114 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v110, _H0), v111, _H1), v112, _H2);
          float16x8_t v115 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v112, _H5), v111, _H4), v110, _H3);
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v75));
          uint32x4_t v117 = vmovl_high_u16(v116);
          float16x8_t v118 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v116.i8);
          v118.i16[0] = *(_WORD *)(v55 + 2 * v118.u32[0]);
          v118.i16[1] = *(_WORD *)(v55 + 2 * v118.u32[1]);
          v118.i16[2] = *(_WORD *)(v55 + 2 * v118.u32[2]);
          v118.i16[3] = *(_WORD *)(v55 + 2 * v118.u32[3]);
          v118.i16[4] = *(_WORD *)(v55 + 2 * v117.u32[0]);
          v118.i16[5] = *(_WORD *)(v55 + 2 * v117.u32[1]);
          v118.i16[6] = *(_WORD *)(v55 + 2 * v117.u32[2]);
          v118.i16[7] = *(_WORD *)(v55 + 2 * v117.u32[3]);
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v75));
          uint32x4_t v120 = vmovl_high_u16(v119);
          float16x8_t v121 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v119.i8);
          v121.i16[0] = *(_WORD *)(v55 + 2 * v121.u32[0]);
          v121.i16[1] = *(_WORD *)(v55 + 2 * v121.u32[1]);
          v121.i16[2] = *(_WORD *)(v55 + 2 * v121.u32[2]);
          v121.i16[3] = *(_WORD *)(v55 + 2 * v121.u32[3]);
          v121.i16[4] = *(_WORD *)(v55 + 2 * v120.u32[0]);
          v121.i16[5] = *(_WORD *)(v55 + 2 * v120.u32[1]);
          v121.i16[6] = *(_WORD *)(v55 + 2 * v120.u32[2]);
          v121.i16[7] = *(_WORD *)(v55 + 2 * v120.u32[3]);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v75));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v125.i16[0] = *(_WORD *)(v55 + 2 * v124.u32[0]);
          v125.i16[1] = *(_WORD *)(v55 + 2 * v124.u32[1]);
          v125.i16[2] = *(_WORD *)(v55 + 2 * v124.u32[2]);
          v125.i16[3] = *(_WORD *)(v55 + 2 * v124.u32[3]);
          v125.i16[4] = *(_WORD *)(v55 + 2 * v123.u32[0]);
          v125.i16[5] = *(_WORD *)(v55 + 2 * v123.u32[1]);
          v125.i16[6] = *(_WORD *)(v55 + 2 * v123.u32[2]);
          v125.i16[7] = *(_WORD *)(v55 + 2 * v123.u32[3]);
          float16x8_t v126 = vmaxq_f16(v118, (float16x8_t)0);
          float16x8_t v127 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v212.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v127)));
          v212.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(v126, v127)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v127)));
          v212.val[1].u64[1] = (unint64_t)vorr_s8(v90, (int8x8_t)vceqd_s64((uint64_t)v81, 0));
          *(int8x8_t *)&long long v128 = vqtbl2_s8(v212, v77);
          *((int8x8_t *)&v128 + 1) = vqtbl2_s8(v212, v78);
          *(int8x8_t *)v126.i8 = vqtbl2_s8(v212, _D6);
          v126.u64[1] = (unint64_t)vqtbl2_s8(v212, v83);
          *float v80 = v128;
          v80[1] = v126;
          v80 += 2;
          v76 += 8;
        }
        while (v76 < (int)v5 - 7);
        unint64_t v129 = v5 & 0xFFFFFFF8;
        _S24 = v180;
        _S22 = v181;
        _S29 = v178;
        _S28 = v179;
        _S31 = v177;
      }
      unint64_t v130 = v5 - v129;
      if (v5 > v129)
      {
        unint64_t v131 = (char *)v80 + v182;
        float16x8_t v132 = (char *)v80 + v183;
        uint16x8_t v133 = (char *)v80 + v184;
        __int16 v134 = (char *)v80 + v185;
        do
        {
          if (v82)
          {
            _D6.i8[0] = *(unsigned char *)v82;
            *(float *)&unsigned int v135 = (float)_D6.u32[0];
            float v136 = *(float *)&v135 - v44;
            LOBYTE(v135) = *(unsigned char *)(v82 + 1);
            float v137 = (float)v135 - v44;
            v82 += 2;
            *(float *)_D6.i32 = v193 * v137;
            float v138 = (float)(v191 * v137) + (float)(v136 * v192);
            float v139 = v190 * v136;
          }
          else
          {
            float v139 = 0.0;
            float v138 = 0.0;
            _D6.i32[0] = 0;
          }
          unsigned int v140 = v79->u8[0];
          unsigned int v79 = (int8x8_t *)((char *)v79 + 1);
          float v141 = v198 * (float)((float)v140 - v199);
          float v142 = *(float *)_D6.i32 + v141;
          BOOL v143 = (float)(*(float *)_D6.i32 + v141) <= 8191.0;
          float v144 = 8191.0;
          if (v143)
          {
            float v144 = v142;
            if (v142 < 0.0) {
              float v144 = 0.0;
            }
          }
          float v145 = v138 + v141;
          BOOL v143 = (float)(v138 + v141) <= 8191.0;
          float v146 = 8191.0;
          if (v143)
          {
            float v146 = v145;
            if (v145 < 0.0) {
              float v146 = 0.0;
            }
          }
          float v147 = v139 + v141;
          float v148 = 8191.0;
          if (v147 <= 8191.0)
          {
            float v148 = v147;
            if (v147 < 0.0) {
              float v148 = 0.0;
            }
          }
          if (v81)
          {
            char v150 = *v81++;
            char v149 = v150;
          }
          else
          {
            char v149 = 0;
          }
          _H17 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H16 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          unsigned int v154 = llroundf(fminf(fmaxf(v148, 0.0), 8191.0));
          __asm { FCVT            S7, H16 }
          _H16 = *(_WORD *)(v54 + 2 * v154);
          __asm { FCVT            S19, H16 }
          float v158 = (float)((float)((float)(v202 * _S7) + (float)(v203 * _S17)) + (float)(v201 * _S19))
               + (float)(v200 * fmaxf(_S17, fmaxf(_S7, _S19)));
          float v159 = 8191.0;
          if (v158 <= 8191.0)
          {
            float v159 = v158;
            if (v158 < 0.0) {
              float v159 = 0.0;
            }
          }
          _H16 = *(_WORD *)(v53 + 2 * llroundf(v159));
          __asm { FCVT            S20, H16 }
          float v162 = _S17 * _S20;
          float v163 = _S7 * _S20;
          float v164 = _S19 * _S20;
          short float v165 = *(short float *)(v55
                                + 2
                                * llroundf(fminf(fmaxf((float)((float)(_S24 * (float)(_S7 * _S20)) + (float)(v162 * _S22))+ (float)((float)(_S19 * _S20) * _S28), 0.0), 8191.0)));
          if (!v81) {
            char v149 = -1;
          }
          if (v165 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H19, #0 }
            if (_NF) {
              _S19 = 0.0;
            }
            else {
              __asm { FCVT            S19, H19 }
            }
          }
          else
          {
            _S19 = 255.0;
          }
          float v168 = (float)((float)(_S31 * v163) + (float)(v162 * _S29)) + (float)(v164 * v207);
          float v169 = (float)((float)(v205 * v163) + (float)(v162 * v206)) + (float)(v164 * v204);
          short float v170 = *(short float *)(v55 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          short float v171 = *(short float *)(v55 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          *__int16 v134 = llroundf(_S19);
          if (v170 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H16, #0 }
            if (_NF) {
              _S16 = 0.0;
            }
            else {
              __asm { FCVT            S16, H16 }
            }
          }
          else
          {
            _S16 = 255.0;
          }
          *uint16x8_t v133 = llroundf(_S16);
          if (v171 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H6, #0 }
            if (_NF) {
              _D6.i32[0] = 0;
            }
            else {
              __asm { FCVT            S6, H6 }
            }
          }
          else
          {
            _D6.i32[0] = 1132396544;
          }
          *float16x8_t v132 = llroundf(*(float *)_D6.i32);
          v132 += 4;
          *unint64_t v131 = v149;
          v131 += 4;
          v133 += 4;
          v134 += 4;
          --v130;
        }
        while (v130);
      }
      float v74 = (int8x8_t *)((char *)v74 + v18);
      v73 += v19;
      v72 += v20;
      v71 += v23;
      ++v40;
    }
    while (v40 != v51);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    unint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    uint64_t v38 = v14 + 164;
    uint64_t v39 = v14 + 16548;
    uint64_t v40 = v14 + 32932;
    float v41 = *(float *)(v14 + 104);
    float v42 = *(float *)(v14 + 108);
    float v43 = *(float *)(v14 + 112);
    float v44 = *(float *)(v14 + 116);
    float v45 = *(float *)(v14 + 120);
    float v46 = (void *)*((void *)result + 16);
    uint64_t v47 = *((void *)result + 14);
    unint64_t v48 = *((void *)result + 13) * a2 / v7 + *((void *)result + 15);
    uint64_t v49 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 161);
    uint64_t v50 = *(unsigned __int8 *)(v14 + 160);
    uint64_t v51 = *(unsigned __int8 *)(v14 + 159);
    uint64_t v52 = *(unsigned __int8 *)(v14 + 158);
    uint64_t v53 = *v46 + v48 * v20 + 4 * v47;
    uint64_t v54 = v15[2];
    if (v54) {
      uint64_t v55 = (char *)(v54 + v19 * v12 + v49);
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v57 = *v15;
    uint64_t v56 = v15[1];
    unsigned int v58 = (unsigned char *)(v56 + v18 * v12 + v49);
    if (!v56) {
      unsigned int v58 = 0;
    }
    char v59 = (unsigned __int8 *)(v57 + v17 * v12 + v49);
    do
    {
      if (v11)
      {
        uint64_t v60 = v11;
        uint64_t v61 = v59;
        uint64_t v62 = v53;
        uint64_t v63 = v55;
        uint64_t v64 = v58;
        do
        {
          if (v64)
          {
            LOBYTE(_S31) = *v64;
            *(float *)&unsigned int v65 = (float)LODWORD(_S31);
            float v66 = *(float *)&v65 - v24;
            LOBYTE(v65) = v64[1];
            float v67 = (float)v65 - v24;
            v64 += 2;
            float v68 = v26 * v67;
            float v69 = (float)(v28 * v67) + (float)(v66 * v27);
            float v70 = v29 * v66;
          }
          else
          {
            float v70 = 0.0;
            float v69 = 0.0;
            float v68 = 0.0;
          }
          unsigned int v71 = *v61++;
          float v72 = v25 * (float)((float)v71 - v23);
          float v73 = v68 + v72;
          BOOL v74 = (float)(v68 + v72) <= 8191.0;
          float v75 = 8191.0;
          if (v74)
          {
            float v75 = v73;
            if (v73 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v69 + v72;
          BOOL v74 = (float)(v69 + v72) <= 8191.0;
          float v77 = 8191.0;
          if (v74)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v70 + v72;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          if (v63)
          {
            char v81 = *v63++;
            char v80 = v81;
          }
          else
          {
            char v80 = 0;
          }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          unsigned int v89 = llroundf(fminf(fmaxf(v79, 0.0), 8191.0));
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v38 + 2 * v89);
          __asm { FCVT            S10, H9 }
          float v93 = (float)((float)((float)(v43 * _S8) + (float)(v42 * _S31)) + (float)(v44 * _S10))
              + (float)(v45 * fmaxf(_S31, fmaxf(_S8, _S10)));
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          _H9 = *(_WORD *)(v39 + 2 * llroundf(v94));
          __asm { FCVT            S11, H9 }
          float v97 = _S31 * _S11;
          float v98 = _S8 * _S11;
          float v99 = _S10 * _S11;
          short float v100 = *(short float *)(v40
                                + 2
                                * llroundf(fminf(fmaxf((float)((float)(v31 * v98) + (float)(v97 * v30))+ (float)((float)(_S10 * _S11) * v32), 0.0), 8191.0)));
          if (!v63) {
            char v80 = -1;
          }
          if (v100 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H10, #0 }
            if (_NF) {
              _S10 = 0.0;
            }
            else {
              __asm { FCVT            S10, H10 }
            }
          }
          else
          {
            _S10 = 255.0;
          }
          float v103 = (float)((float)(v34 * v98) + (float)(v97 * v33)) + (float)(v99 * v35);
          float v104 = (float)((float)(v37 * v98) + (float)(v97 * v36)) + (float)(v99 * v41);
          short float v105 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v103, 0.0), 8191.0)));
          short float v106 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          *(unsigned char *)(v62 + v52) = llroundf(_S10);
          if (v105 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H8, #0 }
            if (_NF) {
              _S8 = 0.0;
            }
            else {
              __asm { FCVT            S8, H8 }
            }
          }
          else
          {
            _S8 = 255.0;
          }
          *(unsigned char *)(v62 + v51) = llroundf(_S8);
          if (v106 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H31, #0 }
            if (_NF) {
              _S31 = 0.0;
            }
            else {
              __asm { FCVT            S31, H31 }
            }
          }
          else
          {
            _S31 = 255.0;
          }
          *(unsigned char *)(v62 + v50) = llroundf(_S31);
          result[v62] = v80;
          v62 += 4;
          --v60;
        }
        while (v60);
      }
      v59 += v17;
      v58 += v18;
      v55 += v19;
      v53 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

long long *vt_Copy_444vf_TRC_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3)
{
  char v3 = 0;
  uint64_t v4 = 0;
  unint64_t v5 = *(void *)(a1 + 20);
  uint64_t v6 = *(void *)(a1 + 36);
  uint64_t v7 = *(void *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 28);
  unint64_t v9 = *a1;
  unint64_t v10 = v8 * a2 / v9;
  uint64_t v11 = v10 + v7;
  unint64_t v12 = (v8 + v8 * a2) / v9;
  uint64_t v13 = v12 + v7;
  uint64_t v14 = *((void *)a1 + 14);
  uint64_t v15 = *((void *)a1 + 19);
  uint64_t v17 = (uint64_t *)*((void *)a1 + 7);
  uint64_t v16 = (uint64_t *)*((void *)a1 + 8);
  unint64_t v18 = *((void *)a1 + 13) * a2;
  uint64_t v19 = *((void *)a1 + 15);
  uint64_t v20 = *v16;
  uint64_t v21 = v16[1];
  uint64_t v22 = v16[2];
  uint64_t v23 = v17[1];
  uint64_t v165 = *v17;
  uint64_t v24 = v17[2];
  uint64_t v25 = **((void **)a1 + 17);
  uint64_t v26 = **((void **)a1 + 16);
  unsigned int v27 = *(_DWORD *)(v15 + 128);
  uint64_t v171 = *(unsigned __int8 *)(v15 + 158);
  v188[0] = *(unsigned char *)(v15 + 158);
  uint64_t v170 = *(unsigned __int8 *)(v15 + 159);
  v188[1] = *(unsigned char *)(v15 + 159);
  uint64_t v169 = *(unsigned __int8 *)(v15 + 160);
  v188[2] = *(unsigned char *)(v15 + 160);
  uint64_t v168 = *(unsigned __int8 *)(v15 + 161);
  v188[3] = *(unsigned char *)(v15 + 161);
  unsigned int v28 = *(unsigned __int16 *)(v15 + 140);
  unsigned int v29 = *(unsigned __int16 *)(v15 + 142);
  LODWORD(a3) = *(_DWORD *)v15;
  float v30 = *(float *)(v15 + 8);
  float v31 = *(float *)(v15 + 16);
  float v32 = *(float *)(v15 + 20);
  float v33 = *(float *)(v15 + 28);
  _S23 = *(float *)(v15 + 72);
  _S24 = *(float *)(v15 + 76);
  unint64_t v36 = v25 * (v18 / v9 + v19);
  float v184 = *(float *)(v15 + 84);
  float v185 = *(float *)(v15 + 80);
  float v182 = *(float *)(v15 + 92);
  float v183 = *(float *)(v15 + 88);
  _S16 = *(float *)(v15 + 104);
  float v180 = *(float *)(v15 + 100);
  float v181 = *(float *)(v15 + 96);
  long long v186 = 0u;
  long long v187 = 0u;
  uint64_t result = &v186;
  do
  {
    int v39 = 0;
    char v40 = v188[v4];
    do
    {
      *(unsigned char *)(((unint64_t)&v186 + ((v40 + 4 * v39) & 0xF8)) | (v40 + 4 * (_BYTE)v39) & 7) = v3 + v39;
      ++v39;
    }
    while (v39 != 8);
    ++v4;
    v3 += 8;
  }
  while (v4 != 4);
  if (v12 != v10)
  {
    float v41 = 0;
    uint64_t result = (long long *)(v13 - v11);
    float v42 = (float)v27;
    uint64_t v43 = v15 + 164;
    uint64_t v44 = v15 + 16548;
    float v45 = 8191.0 / v42;
    float v46 = (float)v28;
    float v47 = (float)v29;
    _S20 = v45 * *(float *)&a3;
    *(float *)&_Q2 = v45 * v31;
    *(short float *)&a3 = (short float)v28;
    float16x8_t v50 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    *(short float *)&a3 = -(short float)v29;
    float16x8_t v51 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    __asm { FCVT            H8, S20 }
    float v176 = v45 * v33;
    float v177 = v45 * v32;
    __asm { FCVT            H0, S4 }
    short float v175 = _H0;
    float v178 = *(float *)&_Q2;
    float v179 = v45 * v30;
    __asm { FCVT            H0, S2 }
    short float v174 = _H0;
    __asm { FCVT            H0, S3 }
    short float v173 = _H0;
    __asm { FCVT            H0, S1 }
    short float v172 = _H0;
    __asm
    {
      FCVT            H13, S23
      FCVT            H14, S24
    }
    _S0 = v185;
    __asm { FCVT            H15, S0 }
    _S0 = v184;
    __asm { FCVT            H9, S0 }
    _S0 = v183;
    __asm { FCVT            H10, S0 }
    _S0 = v182;
    __asm { FCVT            H11, S0 }
    _S0 = v181;
    __asm { FCVT            H12, S0 }
    _S0 = v180;
    __asm
    {
      FCVT            H0, S0
      FCVT            H1, S16
    }
    uint64_t v76 = v26 + v36 + 4 * v14;
    if (v24) {
      float v77 = (char *)(v24 + v22 * v11 + v6);
    }
    else {
      float v77 = 0;
    }
    if (v23) {
      uint64_t v78 = v23 + v21 * v11 + v6;
    }
    else {
      uint64_t v78 = 0;
    }
    float v79 = (int8x8_t *)(v165 + v20 * v11 + v6);
    v80.i64[0] = 0x9000900090009000;
    v80.i64[1] = 0x9000900090009000;
    float v166 = _S24;
    float v167 = _S23;
    do
    {
      if ((int)v5 < 8)
      {
        unint64_t v126 = 0;
        uint64_t v87 = v78;
        float16x8_t v86 = v77;
        uint16x8_t v85 = (_OWORD *)v76;
        uint16x8_t v84 = v79;
      }
      else
      {
        int v81 = 0;
        int8x8_t v83 = *(int8x8_t *)((char *)&v186 + 8);
        int8x8_t v82 = (int8x8_t)v186;
        uint16x8_t v84 = v79;
        uint16x8_t v85 = (_OWORD *)v76;
        float16x8_t v86 = v77;
        uint64_t v87 = v78;
        int8x8_t v89 = *(int8x8_t *)((char *)&v187 + 8);
        int8x8_t v88 = (int8x8_t)v187;
        do
        {
          if (v87)
          {
            float16x8_t v189 = (float16x8_t)vld2_s8((const char *)v87);
            v87 += 16;
            *(int8x8_t *)v90.i8 = vzip1_s8(*(int8x8_t *)v189.i8, 0);
            v90.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v189.i8, 0);
            *(int8x8_t *)v91.i8 = vzip1_s8((int8x8_t)v189.u64[1], 0);
            v91.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v189.u64[1], 0);
            float16x8_t v189 = vcvtq_f16_u16(v91);
            float16x8_t v92 = vaddq_f16(v51, vcvtq_f16_u16(v90));
            float16x8_t v189 = vaddq_f16(v51, v189);
            float16x8_t v93 = vmulq_n_f16(v189, v172);
            float16x8_t v94 = vmlaq_n_f16(vmulq_n_f16(v92, v174), v189, v173);
            float16x8_t v95 = vmulq_n_f16(v92, v175);
          }
          else
          {
            float16x8_t v95 = 0uLL;
            float16x8_t v94 = 0uLL;
            float16x8_t v93 = 0uLL;
          }
          int8x8_t v96 = *v84++;
          int8x8_t v97 = 0;
          *(int8x8_t *)v98.i8 = vzip1_s8(v96, 0);
          v98.u64[1] = (unint64_t)vzip2_s8(v96, 0);
          float16x8_t v99 = vsubq_f16(vcvtq_f16_u16(v98), v50);
          float16x8_t v100 = vmlaq_n_f16(v93, v99, _H8);
          float16x8_t v101 = vmlaq_n_f16(v94, v99, _H8);
          float16x8_t v102 = vmlaq_n_f16(v95, v99, _H8);
          if (v86)
          {
            int8x8_t v103 = *(int8x8_t *)v86;
            v86 += 8;
            int8x8_t v97 = v103;
          }
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v100, (float16x8_t)0), v80));
          uint32x4_t v105 = vmovl_high_u16(v104);
          float16x8_t v106 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v104.i8);
          v106.i16[0] = *(_WORD *)(v43 + 2 * v106.u32[0]);
          v106.i16[1] = *(_WORD *)(v43 + 2 * v106.u32[1]);
          v106.i16[2] = *(_WORD *)(v43 + 2 * v106.u32[2]);
          v106.i16[3] = *(_WORD *)(v43 + 2 * v106.u32[3]);
          v106.i16[4] = *(_WORD *)(v43 + 2 * v105.u32[0]);
          v106.i16[5] = *(_WORD *)(v43 + 2 * v105.u32[1]);
          v106.i16[6] = *(_WORD *)(v43 + 2 * v105.u32[2]);
          v106.i16[7] = *(_WORD *)(v43 + 2 * v105.u32[3]);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v101, (float16x8_t)0), v80));
          float16x8_t v108 = (float16x8_t)vmovl_high_u16(v107);
          v109.i64[0] = v108.u32[2];
          v109.i64[1] = v108.u32[3];
          v190.val[1] = v109;
          v109.i64[0] = v108.u32[0];
          v109.i64[1] = v108.u32[1];
          uint32x4_t v110 = vmovl_u16(*(uint16x4_t *)v107.i8);
          v108.i16[0] = *(_WORD *)(v43 + 2 * v110.u32[0]);
          v108.i16[1] = *(_WORD *)(v43 + 2 * v110.u32[1]);
          v108.i16[2] = *(_WORD *)(v43 + 2 * v110.u32[2]);
          v108.i16[3] = *(_WORD *)(v43 + 2 * v110.u32[3]);
          v108.i16[4] = *(_WORD *)(v43 + 2 * v109.i64[0]);
          v108.i16[5] = *(_WORD *)(v43 + 2 * v109.i64[1]);
          v108.i16[6] = *(_WORD *)(v43 + 2 * v190.val[1].i64[0]);
          v108.i16[7] = *(_WORD *)(v43 + 2 * v190.val[1].i64[1]);
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v102, (float16x8_t)0), v80));
          uint32x4_t v112 = vmovl_high_u16(v111);
          float16x8_t v113 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v111.i8);
          v113.i16[0] = *(_WORD *)(v43 + 2 * v113.u32[0]);
          v113.i16[1] = *(_WORD *)(v43 + 2 * v113.u32[1]);
          v113.i16[2] = *(_WORD *)(v43 + 2 * v113.u32[2]);
          v113.i16[3] = *(_WORD *)(v43 + 2 * v113.u32[3]);
          v113.i16[4] = *(_WORD *)(v43 + 2 * v112.u32[0]);
          v113.i16[5] = *(_WORD *)(v43 + 2 * v112.u32[1]);
          v113.i16[6] = *(_WORD *)(v43 + 2 * v112.u32[2]);
          v113.i16[7] = *(_WORD *)(v43 + 2 * v112.u32[3]);
          float16x8_t v114 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v106, _H9), v108, _H10), v113, _H11);
          float16x8_t v115 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v113, _H1), v108, _H0), v106, _H12);
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v106, _H13), v108, _H14), v113, _H15), (float16x8_t)0), v80));
          uint32x4_t v117 = vmovl_high_u16(v116);
          float16x8_t v118 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v116.i8);
          v118.i16[0] = *(_WORD *)(v44 + 2 * v118.u32[0]);
          v118.i16[1] = *(_WORD *)(v44 + 2 * v118.u32[1]);
          v118.i16[2] = *(_WORD *)(v44 + 2 * v118.u32[2]);
          v118.i16[3] = *(_WORD *)(v44 + 2 * v118.u32[3]);
          v118.i16[4] = *(_WORD *)(v44 + 2 * v117.u32[0]);
          v118.i16[5] = *(_WORD *)(v44 + 2 * v117.u32[1]);
          v118.i16[6] = *(_WORD *)(v44 + 2 * v117.u32[2]);
          v118.i16[7] = *(_WORD *)(v44 + 2 * v117.u32[3]);
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v80));
          uint32x4_t v120 = vmovl_high_u16(v119);
          float16x8_t v121 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v119.i8);
          v121.i16[0] = *(_WORD *)(v44 + 2 * v121.u32[0]);
          v121.i16[1] = *(_WORD *)(v44 + 2 * v121.u32[1]);
          v121.i16[2] = *(_WORD *)(v44 + 2 * v121.u32[2]);
          v121.i16[3] = *(_WORD *)(v44 + 2 * v121.u32[3]);
          v121.i16[4] = *(_WORD *)(v44 + 2 * v120.u32[0]);
          v121.i16[5] = *(_WORD *)(v44 + 2 * v120.u32[1]);
          v121.i16[6] = *(_WORD *)(v44 + 2 * v120.u32[2]);
          v121.i16[7] = *(_WORD *)(v44 + 2 * v120.u32[3]);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v80));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v114.i16[0] = *(_WORD *)(v44 + 2 * v124.u32[0]);
          v114.i16[1] = *(_WORD *)(v44 + 2 * v124.u32[1]);
          v114.i16[2] = *(_WORD *)(v44 + 2 * v124.u32[2]);
          v114.i16[3] = *(_WORD *)(v44 + 2 * v124.u32[3]);
          v114.i16[4] = *(_WORD *)(v44 + 2 * v123.u32[0]);
          v114.i16[5] = *(_WORD *)(v44 + 2 * v123.u32[1]);
          v114.i16[6] = *(_WORD *)(v44 + 2 * v123.u32[2]);
          v114.i16[7] = *(_WORD *)(v44 + 2 * v123.u32[3]);
          float16x8_t v125 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v190.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v125)));
          v190.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v125)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v125)));
          v190.val[1].u64[1] = (unint64_t)vorr_s8(v97, (int8x8_t)vceqd_s64((uint64_t)v86, 0));
          *(int8x8_t *)&_Q2 = vqtbl2_s8(v190, v82);
          *((int8x8_t *)&_Q2 + 1) = vqtbl2_s8(v190, v83);
          *(int8x8_t *)v121.i8 = vqtbl2_s8(v190, v88);
          v121.u64[1] = (unint64_t)vqtbl2_s8(v190, v89);
          *uint16x8_t v85 = _Q2;
          v85[1] = v121;
          v85 += 2;
          v81 += 8;
        }
        while (v81 < (int)v5 - 7);
        unint64_t v126 = v5 & 0xFFFFFFF8;
        _S24 = v166;
        _S23 = v167;
      }
      unint64_t v127 = v5 - v126;
      if (v5 > v126)
      {
        long long v128 = (char *)v85 + v168;
        unint64_t v129 = (char *)v85 + v169;
        unint64_t v130 = (char *)v85 + v170;
        unint64_t v131 = (char *)v85 + v171;
        do
        {
          if (v87)
          {
            LOBYTE(_Q2) = *(unsigned char *)v87;
            *(float *)&unsigned int v132 = (float)_Q2;
            float v133 = *(float *)&v132 - v47;
            LOBYTE(v132) = *(unsigned char *)(v87 + 1);
            float v134 = (float)v132 - v47;
            v87 += 2;
            *(float *)&_Q2 = v179 * v134;
            float v135 = (float)(v177 * v134) + (float)(v133 * v178);
            float v136 = v176 * v133;
          }
          else
          {
            float v136 = 0.0;
            float v135 = 0.0;
            LODWORD(_Q2) = 0;
          }
          unsigned int v137 = v84->u8[0];
          uint16x8_t v84 = (int8x8_t *)((char *)v84 + 1);
          float v138 = _S20 * (float)((float)v137 - v46);
          float v139 = *(float *)&_Q2 + v138;
          BOOL v140 = (float)(*(float *)&_Q2 + v138) <= 8191.0;
          float v141 = 8191.0;
          if (v140)
          {
            float v141 = v139;
            if (v139 < 0.0) {
              float v141 = 0.0;
            }
          }
          float v142 = v135 + v138;
          BOOL v140 = (float)(v135 + v138) <= 8191.0;
          float v143 = 8191.0;
          if (v140)
          {
            float v143 = v142;
            if (v142 < 0.0) {
              float v143 = 0.0;
            }
          }
          float v144 = v136 + v138;
          float v145 = 8191.0;
          if (v144 <= 8191.0)
          {
            float v145 = v144;
            if (v144 < 0.0) {
              float v145 = 0.0;
            }
          }
          if (v86)
          {
            char v147 = *v86++;
            char v146 = v147;
          }
          else
          {
            char v146 = 0;
          }
          _H2 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          unsigned int v149 = llroundf(fminf(fmaxf(v143, 0.0), 8191.0));
          __asm { FCVT            S4, H2 }
          _H2 = *(_WORD *)(v43 + 2 * v149);
          __asm { FCVT            S21, H2 }
          _H2 = *(_WORD *)(v43 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          short float v155 = *(short float *)(v44
                                + 2
                                * llroundf(fminf(fmaxf((float)((float)(_S24 * _S21) + (float)(_S4 * _S23)) + (float)(_S5 * v185), 0.0), 8191.0)));
          if (!v86) {
            char v146 = -1;
          }
          if (v155 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H22, #0 }
            if (_NF) {
              _S22 = 0.0;
            }
            else {
              __asm { FCVT            S22, H22 }
            }
          }
          else
          {
            _S22 = 255.0;
          }
          float v158 = (float)((float)(v183 * _S21) + (float)(_S4 * v184)) + (float)(_S5 * v182);
          float v159 = (float)((float)(v180 * _S21) + (float)(_S4 * v181)) + (float)(_S5 * _S16);
          short float v160 = *(short float *)(v44 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          short float v161 = *(short float *)(v44 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          *unint64_t v131 = llroundf(_S22);
          if (v160 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H4, #0 }
            if (_NF) {
              _S4 = 0.0;
            }
            else {
              __asm { FCVT            S4, H4 }
            }
          }
          else
          {
            _S4 = 255.0;
          }
          *unint64_t v130 = llroundf(_S4);
          if (v161 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H3, #0 }
            if (_NF) {
              LODWORD(_Q2) = 0;
            }
            else {
              __asm { FCVT            S2, H3 }
            }
          }
          else
          {
            LODWORD(_Q2) = 1132396544;
          }
          *unint64_t v129 = llroundf(*(float *)&_Q2);
          v129 += 4;
          *long long v128 = v146;
          v128 += 4;
          v130 += 4;
          v131 += 4;
          --v127;
        }
        while (v127);
      }
      float v79 = (int8x8_t *)((char *)v79 + v20);
      v78 += v21;
      v77 += v22;
      v76 += v25;
      float v41 = (long long *)((char *)v41 + 1);
    }
    while (v41 != result);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    float v38 = *(float *)(v14 + 104);
    uint64_t v39 = v14 + 164;
    uint64_t v40 = v14 + 16548;
    float v41 = (void *)*((void *)result + 16);
    uint64_t v42 = *((void *)result + 14);
    unint64_t v43 = *((void *)result + 13) * a2 / v7 + *((void *)result + 15);
    uint64_t v44 = *(void *)(result + 36);
    uint64_t v45 = *(unsigned __int8 *)(v14 + 161);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 160);
    uint64_t v46 = *(unsigned __int8 *)(v14 + 159);
    uint64_t v47 = *(unsigned __int8 *)(v14 + 158);
    uint64_t v48 = *v41 + v43 * v20 + 4 * v42;
    uint64_t v49 = v15[2];
    if (v49) {
      float16x8_t v50 = (char *)(v49 + v19 * v12 + v44);
    }
    else {
      float16x8_t v50 = 0;
    }
    uint64_t v52 = *v15;
    uint64_t v51 = v15[1];
    uint64_t v53 = (unsigned char *)(v51 + v18 * v12 + v44);
    if (!v51) {
      uint64_t v53 = 0;
    }
    uint64_t v54 = (unsigned __int8 *)(v52 + v17 * v12 + v44);
    do
    {
      if (v11)
      {
        uint64_t v55 = v11;
        uint64_t v56 = v54;
        uint64_t v57 = v48;
        unsigned int v58 = v50;
        char v59 = v53;
        do
        {
          if (v59)
          {
            LOBYTE(_S27) = *v59;
            *(float *)&unsigned int v60 = (float)LODWORD(_S27);
            float v61 = *(float *)&v60 - v24;
            LOBYTE(v60) = v59[1];
            float v62 = (float)v60 - v24;
            v59 += 2;
            float v63 = v26 * v62;
            float v64 = (float)(v28 * v62) + (float)(v61 * v27);
            float v65 = v29 * v61;
          }
          else
          {
            float v65 = 0.0;
            float v64 = 0.0;
            float v63 = 0.0;
          }
          unsigned int v66 = *v56++;
          float v67 = v25 * (float)((float)v66 - v23);
          float v68 = v63 + v67;
          BOOL v69 = (float)(v63 + v67) <= 8191.0;
          float v70 = 8191.0;
          if (v69)
          {
            float v70 = v68;
            if (v68 < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v64 + v67;
          BOOL v69 = (float)(v64 + v67) <= 8191.0;
          float v72 = 8191.0;
          if (v69)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v65 + v67;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          if (v58)
          {
            char v76 = *v58++;
            char v75 = v76;
          }
          else
          {
            char v75 = 0;
          }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          short float v87 = *(short float *)(v40
                               + 2
                               * llroundf(fminf(fmaxf((float)((float)(v31 * _S29) + (float)(_S27 * v30)) + (float)(_S28 * v32), 0.0), 8191.0)));
          if (!v58) {
            char v75 = -1;
          }
          if (v87 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H30, #0 }
            if (_NF) {
              _S30 = 0.0;
            }
            else {
              __asm { FCVT            S30, H30 }
            }
          }
          else
          {
            _S30 = 255.0;
          }
          float v90 = (float)((float)(v34 * _S29) + (float)(_S27 * v33)) + (float)(_S28 * v35);
          float v91 = (float)((float)(v37 * _S29) + (float)(_S27 * v36)) + (float)(_S28 * v38);
          short float v92 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          short float v93 = *(short float *)(v40 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          *(unsigned char *)(v57 + v47) = llroundf(_S30);
          if (v92 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H28, #0 }
            if (_NF) {
              _S28 = 0.0;
            }
            else {
              __asm { FCVT            S28, H28 }
            }
          }
          else
          {
            _S28 = 255.0;
          }
          *(unsigned char *)(v57 + v46) = llroundf(_S28);
          if (v93 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H27, #0 }
            if (_NF) {
              _S27 = 0.0;
            }
            else {
              __asm { FCVT            S27, H27 }
            }
          }
          else
          {
            _S27 = 255.0;
          }
          result[v57] = llroundf(_S27);
          *(unsigned char *)(v57 + v45) = v75;
          v57 += 4;
          --v55;
        }
        while (v55);
      }
      v54 += v17;
      v53 += v18;
      v50 += v19;
      v48 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_BGRA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_BGRA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_444vf_rgb_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2)
{
  char v6 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = *(void *)(a1 + 20);
  uint64_t v9 = *(void *)(a1 + 36);
  uint64_t v10 = *(void *)(a1 + 44);
  uint64_t v11 = *(void *)(a1 + 28);
  unint64_t v12 = *a1;
  unint64_t v13 = v11 * a2 / v12;
  uint64_t v14 = v13 + v10;
  unint64_t v15 = (v11 + v11 * a2) / v12;
  uint64_t v107 = v15 + v10;
  uint64_t v16 = *((void *)a1 + 15);
  uint64_t v110 = *((void *)a1 + 14);
  unint64_t v17 = *((void *)a1 + 13) * a2;
  uint64_t v18 = *((void *)a1 + 19);
  int64x2_t v20 = (uint64_t *)*((void *)a1 + 7);
  uint64_t v19 = (uint64_t *)*((void *)a1 + 8);
  uint64_t v21 = *v19;
  uint64_t v22 = v19[1];
  uint64_t v23 = v19[2];
  uint64_t v25 = *v20;
  uint64_t v24 = v20[1];
  uint64_t v26 = v20[2];
  uint64_t v27 = **((void **)a1 + 17);
  uint64_t v108 = **((void **)a1 + 16);
  uint64_t v109 = v25;
  unsigned int v28 = *(_DWORD *)(v18 + 128);
  uint64_t result = *(unsigned int *)(v18 + 136);
  uint64_t v30 = *(unsigned __int8 *)(v18 + 158);
  v113[0] = *(unsigned char *)(v18 + 158);
  uint64_t v31 = *(unsigned __int8 *)(v18 + 159);
  v113[1] = *(unsigned char *)(v18 + 159);
  uint64_t v32 = *(unsigned __int8 *)(v18 + 160);
  _OWORD v113[2] = *(unsigned char *)(v18 + 160);
  uint64_t v33 = *(unsigned __int8 *)(v18 + 161);
  v113[3] = *(unsigned char *)(v18 + 161);
  unsigned int v34 = *(unsigned __int16 *)(v18 + 140);
  unint64_t v35 = v27 * (v17 / v12 + v16);
  unsigned int v36 = *(unsigned __int16 *)(v18 + 142);
  float v37 = *(float *)v18;
  float v38 = *(float *)(v18 + 8);
  float v39 = *(float *)(v18 + 16);
  float v40 = *(float *)(v18 + 20);
  float v41 = *(float *)(v18 + 28);
  long long v111 = 0u;
  long long v112 = 0u;
  do
  {
    int v42 = 0;
    char v43 = v113[v7];
    do
    {
      *(unsigned char *)(((unint64_t)&v111 + ((v43 + 4 * v42) & 0xF8)) | (v43 + 4 * (_BYTE)v42) & 7) = v6 + v42;
      ++v42;
    }
    while (v42 != 8);
    ++v7;
    v6 += 8;
  }
  while (v7 != 4);
  if (v15 != v13)
  {
    uint64_t v44 = 0;
    float v45 = (float)result;
    uint64_t result = v107 - v14;
    float v46 = v45 / (float)v28;
    float v47 = (float)v36;
    _S2 = v46 * v37;
    _S3 = v46 * v38;
    _S4 = v46 * v39;
    _S5 = v46 * v40;
    _S6 = v46 * v41;
    __asm { FCVT            H7, S2 }
    *(short float *)v2.i16 = (short float)v34;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(v2, 0);
    *(short float *)v3.i16 = -(short float)v36;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(v3, 0);
    __asm
    {
      FCVT            H8, S6
      FCVT            H9, S4
      FCVT            H10, S5
      FCVT            H11, S3
    }
    float v64 = (char *)(v26 + v23 * v14 + v9);
    uint64_t v65 = v108 + v35 + 4 * v110;
    if (!v26) {
      float v64 = 0;
    }
    if (v24) {
      uint64_t v66 = v24 + v22 * v14 + v9;
    }
    else {
      uint64_t v66 = 0;
    }
    float v67 = (int8x8_t *)(v109 + v21 * v14 + v9);
    float16x8_t v68 = (float16x8_t)vdupq_n_s16(0x5BF8u);
    while (1)
    {
      if ((int)v8 < 8)
      {
        unint64_t v90 = 0;
        uint64_t v73 = v66;
        float v72 = v64;
        float v71 = (_OWORD *)v65;
        float v70 = v67;
      }
      else
      {
        int v69 = 0;
        int8x8_t v5 = *(int8x8_t *)((char *)&v111 + 8);
        int8x8_t v4 = (int8x8_t)v111;
        float v70 = v67;
        float v71 = (_OWORD *)v65;
        float v72 = v64;
        uint64_t v73 = v66;
        int8x8_t v75 = *(int8x8_t *)((char *)&v112 + 8);
        int8x8_t v74 = (int8x8_t)v112;
        do
        {
          if (v73)
          {
            float16x8_t v114 = (float16x8_t)vld2_s8((const char *)v73);
            v73 += 16;
            *(int8x8_t *)v76.i8 = vzip1_s8(*(int8x8_t *)v114.i8, 0);
            v76.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v114.i8, 0);
            *(int8x8_t *)v77.i8 = vzip1_s8((int8x8_t)v114.u64[1], 0);
            v77.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v114.u64[1], 0);
            float16x8_t v114 = vcvtq_f16_u16(v77);
            float16x8_t v78 = vaddq_f16(v59, vcvtq_f16_u16(v76));
            float16x8_t v114 = vaddq_f16(v59, v114);
            float16x8_t v79 = vmulq_n_f16(v114, _H11);
            float16x8_t v80 = vmlaq_n_f16(vmulq_n_f16(v78, _H9), v114, _H10);
            float16x8_t v81 = vmulq_n_f16(v78, _H8);
          }
          else
          {
            float16x8_t v81 = 0uLL;
            float16x8_t v80 = 0uLL;
            float16x8_t v79 = 0uLL;
          }
          int8x8_t v82 = *v70++;
          int8x8_t v83 = v82;
          if (v72)
          {
            int8x8_t v84 = *(int8x8_t *)v72;
            v72 += 8;
            int8x8_t v85 = v84;
          }
          else
          {
            int8x8_t v85 = 0;
          }
          *(int8x8_t *)v86.i8 = vzip1_s8(v83, 0);
          v86.u64[1] = (unint64_t)vzip2_s8(v83, 0);
          float16x8_t v87 = vsubq_f16(vcvtq_f16_u16(v86), v58);
          *(int8x8_t *)v115.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v81, v87, _H7), (float16x8_t)0), v68)));
          v115.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v79, v87, _H7), (float16x8_t)0), v68)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v80, v87, _H7), (float16x8_t)0), v68)));
          v115.val[1].u64[1] = (unint64_t)vorr_s8(v85, (int8x8_t)vceqd_s64((uint64_t)v72, 0));
          *(int8x8_t *)&long long v88 = vqtbl2_s8(v115, v4);
          *((int8x8_t *)&v88 + 1) = vqtbl2_s8(v115, v5);
          *(int8x8_t *)&long long v89 = vqtbl2_s8(v115, v74);
          *((int8x8_t *)&v89 + 1) = vqtbl2_s8(v115, v75);
          *float v71 = v88;
          v71[1] = v89;
          v71 += 2;
          v69 += 8;
        }
        while (v69 < (int)v8 - 7);
        unint64_t v90 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v90;
      unint64_t v91 = v8 - v90;
      if (v91 != 0 && _CF) {
        break;
      }
LABEL_43:
      float v67 = (int8x8_t *)((char *)v67 + v21);
      v66 += v22;
      v64 += v23;
      v65 += v27;
      if (++v44 == result) {
        return result;
      }
    }
    short float v92 = (char *)v71 + v33;
    short float v93 = (char *)v71 + v32;
    float16x8_t v94 = (char *)v71 + v31;
    float16x8_t v95 = (char *)v71 + v30;
    while (1)
    {
      if (v73)
      {
        v4.i8[0] = *(unsigned char *)v73;
        float v96 = (float)v4.u32[0] - v47;
        v5.i8[0] = *(unsigned char *)(v73 + 1);
        float v97 = (float)v5.u32[0] - v47;
        v73 += 2;
        float v98 = _S3 * v97;
        *(float *)v5.i32 = (float)(_S5 * v97) + (float)(v96 * _S4);
        *(float *)v4.i32 = _S6 * v96;
        if (!v72) {
          goto LABEL_30;
        }
      }
      else
      {
        v4.i32[0] = 0;
        v5.i32[0] = 0;
        float v98 = 0.0;
        if (!v72)
        {
LABEL_30:
          char v99 = 0;
          goto LABEL_31;
        }
      }
      char v100 = *v72++;
      char v99 = v100;
LABEL_31:
      unsigned int v101 = v70->u8[0];
      float v70 = (int8x8_t *)((char *)v70 + 1);
      float v102 = _S2 * (float)((float)v101 - (float)v34);
      float v103 = v98 + v102;
      if (!v72) {
        char v99 = -1;
      }
      float v104 = 255.0;
      if (v103 <= 255.0)
      {
        float v104 = v103;
        if (v103 < 0.0) {
          float v104 = 0.0;
        }
      }
      float v105 = *(float *)v5.i32 + v102;
      *float16x8_t v95 = llroundf(v104);
      v5.i32[0] = 1132396544;
      if (v105 <= 255.0)
      {
        *(float *)v5.i32 = v105;
        if (v105 < 0.0) {
          v5.i32[0] = 0;
        }
      }
      float v106 = *(float *)v4.i32 + v102;
      *float16x8_t v94 = llroundf(*(float *)v5.i32);
      v4.i32[0] = 1132396544;
      if (v106 <= 255.0)
      {
        *(float *)v4.i32 = v106;
        if (v106 < 0.0) {
          v4.i32[0] = 0;
        }
      }
      *short float v93 = llroundf(*(float *)v4.i32);
      v93 += 4;
      *short float v92 = v99;
      v92 += 4;
      v94 += 4;
      v95 += 4;
      if (!--v91) {
        goto LABEL_43;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_BGRA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *((void *)result + 19);
    int64x2_t v12 = (uint64_t *)*((void *)result + 7);
    int64x2_t v13 = (uint64_t *)*((void *)result + 8);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = v13[2];
    uint64_t v17 = **((void **)result + 17);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v11 + 128);
    *(float *)&unsigned int v19 = (float)*(unsigned int *)(v11 + 136);
    float v20 = *(float *)&v19 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 140);
    float v21 = (float)v18;
    LOWORD(v19) = *(_WORD *)(v11 + 142);
    float v22 = (float)v19;
    float v23 = v20 * *(float *)v11;
    float v24 = v20 * *(float *)(v11 + 8);
    float v25 = v20 * *(float *)(v11 + 16);
    float v26 = v20 * *(float *)(v11 + 20);
    float v27 = *(float *)(v11 + 28);
    float v28 = v20 * v27;
    float v29 = (void *)*((void *)result + 16);
    uint64_t v30 = *((void *)result + 14);
    unint64_t v31 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *(unsigned __int8 *)(v11 + 161);
    uint64_t v34 = *(unsigned __int8 *)(v11 + 160);
    uint64_t v35 = *(unsigned __int8 *)(v11 + 159);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 158);
    uint64_t v36 = *v29 + v31 * v17 + 4 * v30;
    uint64_t v37 = v12[2];
    if (v37) {
      float v38 = (char *)(v37 + v16 * v9 + v32);
    }
    else {
      float v38 = 0;
    }
    uint64_t v40 = *v12;
    uint64_t v39 = v12[1];
    float v41 = (unsigned char *)(v39 + v15 * v9 + v32);
    if (!v39) {
      float v41 = 0;
    }
    int v42 = (unsigned __int8 *)(v40 + v14 * v9 + v32);
    while (!v8)
    {
LABEL_27:
      v42 += v14;
      v41 += v15;
      v38 += v16;
      v36 += v17;
      if (++v7 == v10) {
        return result;
      }
    }
    uint64_t v43 = v8;
    uint64_t v44 = v42;
    uint64_t v45 = v36;
    float v46 = v38;
    float v47 = v41;
    while (1)
    {
      if (v47)
      {
        LOBYTE(v27) = *v47;
        float v48 = (float)LODWORD(v27) - v22;
        LOBYTE(v2) = v47[1];
        float v49 = (float)LODWORD(v2) - v22;
        v47 += 2;
        float v50 = v24 * v49;
        float v51 = (float)(v26 * v49) + (float)(v48 * v25);
        float v52 = v28 * v48;
        if (!v46) {
          goto LABEL_14;
        }
      }
      else
      {
        float v52 = 0.0;
        float v51 = 0.0;
        float v50 = 0.0;
        if (!v46)
        {
LABEL_14:
          char v53 = 0;
          goto LABEL_15;
        }
      }
      char v54 = *v46++;
      char v53 = v54;
LABEL_15:
      unsigned int v55 = *v44++;
      float v56 = v23 * (float)((float)v55 - v21);
      float v57 = v50 + v56;
      if (!v46) {
        char v53 = -1;
      }
      float v58 = 255.0;
      if (v57 <= 255.0)
      {
        float v58 = v57;
        if (v57 < 0.0) {
          float v58 = 0.0;
        }
      }
      unsigned __int8 v59 = llroundf(v58);
      float v60 = v51 + v56;
      result[v45] = v59;
      float v61 = 255.0;
      if (v60 <= 255.0)
      {
        float v61 = v60;
        if (v60 < 0.0) {
          float v61 = 0.0;
        }
      }
      char v62 = llroundf(v61);
      float v2 = v52 + v56;
      *(unsigned char *)(v45 + v35) = v62;
      float v27 = 255.0;
      if (v2 <= 255.0)
      {
        float v27 = v2;
        if (v2 < 0.0) {
          float v27 = 0.0;
        }
      }
      *(unsigned char *)(v45 + v34) = llroundf(v27);
      *(unsigned char *)(v45 + v33) = v53;
      v45 += 4;
      if (!--v43) {
        goto LABEL_27;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = *(float *)(v14 + 28);
    float v30 = v22 * v29;
    LOWORD(v29) = *(_WORD *)(v14 + 144);
    float v31 = (float)LODWORD(v29);
    float v32 = *(float *)(v14 + 72);
    float v33 = *(float *)(v14 + 76);
    float v34 = *(float *)(v14 + 80);
    float v35 = *(float *)(v14 + 84);
    float v36 = *(float *)(v14 + 88);
    float v37 = *(float *)(v14 + 92);
    float v38 = *(float *)(v14 + 96);
    float v39 = *(float *)(v14 + 100);
    uint64_t v40 = v14 + 164;
    uint64_t v41 = v14 + 16548;
    uint64_t v42 = v14 + 32932;
    float v43 = *(float *)(v14 + 104);
    float v44 = *(float *)(v14 + 108);
    float v45 = *(float *)(v14 + 112);
    float v46 = *(float *)(v14 + 116);
    float v47 = *(float *)(v14 + 120);
    uint64_t v48 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
                               + 16 * *((void *)result + 14));
    uint64_t v49 = v15[2];
    if (v49) {
      float v50 = (unsigned __int8 *)(v49 + v19 * v12 + v48);
    }
    else {
      float v50 = 0;
    }
    char v53 = v15;
    uint64_t v52 = *v15;
    uint64_t v51 = v53[1];
    if (v51) {
      char v54 = (unsigned char *)(v51 + v18 * v12 + v48);
    }
    else {
      char v54 = 0;
    }
    unsigned int v55 = (unsigned __int8 *)(v52 + v17 * v12 + v48);
    do
    {
      if (v11)
      {
        uint64_t v56 = v11;
        float v57 = v55;
        float v58 = (unsigned int *)result;
        unsigned __int8 v59 = v50;
        float v60 = v54;
        do
        {
          if (v60)
          {
            LOBYTE(v5) = *v60;
            *(float *)&unsigned int v61 = (float)LODWORD(v5);
            float v62 = *(float *)&v61 - v24;
            LOBYTE(v61) = v60[1];
            float v63 = (float)v61 - v24;
            v60 += 2;
            float v64 = v26 * v63;
            float v65 = (float)(v28 * v63) + (float)(v62 * v27);
            float v66 = v30 * v62;
          }
          else
          {
            float v66 = 0.0;
            float v65 = 0.0;
            float v64 = 0.0;
          }
          unsigned int v67 = *v57++;
          float v68 = v25 * (float)((float)v67 - v23);
          float v69 = v64 + v68;
          BOOL v70 = (float)(v64 + v68) <= 8191.0;
          float v71 = 8191.0;
          if (v70)
          {
            float v71 = v69;
            if (v69 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v65 + v68;
          BOOL v70 = (float)(v65 + v68) <= 8191.0;
          float v73 = 8191.0;
          if (v70)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v66 + v68;
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v74;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          if (v59)
          {
            unsigned int v77 = *v59++;
            unsigned int v76 = v77;
          }
          else
          {
            unsigned int v76 = 0;
          }
          _H10 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H12 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          unsigned int v85 = llroundf(fminf(fmaxf(v75, 0.0), 8191.0));
          __asm { FCVT            S11, H12 }
          _H12 = *(_WORD *)(v40 + 2 * v85);
          __asm { FCVT            S12, H12 }
          float v89 = (float)((float)((float)(v45 * _S11) + (float)(v44 * _S10)) + (float)(v46 * _S12))
              + (float)(v47 * fmaxf(_S10, fmaxf(_S11, _S12)));
          float v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          if (v59)
          {
            float v91 = (double)v76 * 3.0 / 255.0;
            unsigned int v92 = llroundf(v91);
          }
          else
          {
            unsigned int v92 = 3;
          }
          _H13 = *(_WORD *)(v41 + 2 * llroundf(v90));
          __asm { FCVT            S13, H13 }
          float v95 = _S10 * _S13;
          float v96 = _S11 * _S13;
          float v97 = _S12 * _S13;
          float v98 = (float)((float)(v33 * v96) + (float)(v95 * v32)) + (float)(v97 * v34);
          float v99 = (float)((float)(v36 * v96) + (float)(v95 * v35)) + (float)(v97 * v37);
          _S10 = (float)((float)(v39 * v96) + (float)(v95 * v38)) + (float)(v97 * v43);
          _H11 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          float v104 = v31 + _S10;
          BOOL v70 = (float)(v31 + _S10) <= 1023.0;
          float v105 = 1023.0;
          if (v70)
          {
            float v105 = v104;
            if (v104 < 0.0) {
              float v105 = 0.0;
            }
          }
          __asm { FCVT            S12, H12 }
          float v107 = v31 + _S12;
          BOOL v70 = (float)(v31 + _S12) <= 1023.0;
          float v108 = 1023.0;
          if (v70)
          {
            float v108 = v107;
            if (v107 < 0.0) {
              float v108 = 0.0;
            }
          }
          __asm { FCVT            S11, H11 }
          float v110 = v31 + _S11;
          BOOL v70 = (float)(v31 + _S11) <= 1023.0;
          float v111 = 1023.0;
          if (v70)
          {
            float v111 = v110;
            if (v110 < 0.0) {
              float v111 = 0.0;
            }
          }
          unsigned int v112 = llroundf(v105);
          unsigned int v113 = llroundf(v108) << 10;
          unsigned int v114 = llroundf(v111);
          float v5 = (float)v92;
          if ((float)v92 > 3.0) {
            float v5 = 3.0;
          }
          *v58++ = v113 | v112 | (llroundf(v5) << 30) | (v114 << 20);
          --v56;
        }
        while (v56);
      }
      v55 += v17;
      v54 += v18;
      v50 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = *(float *)(v14 + 28);
    float v30 = v22 * v29;
    LOWORD(v29) = *(_WORD *)(v14 + 144);
    float v31 = (float)LODWORD(v29);
    float v32 = *(float *)(v14 + 72);
    float v33 = *(float *)(v14 + 76);
    float v34 = *(float *)(v14 + 80);
    float v35 = *(float *)(v14 + 84);
    float v36 = *(float *)(v14 + 88);
    float v37 = *(float *)(v14 + 92);
    float v38 = *(float *)(v14 + 96);
    float v39 = *(float *)(v14 + 100);
    float v40 = *(float *)(v14 + 104);
    uint64_t v41 = v14 + 164;
    uint64_t v42 = v14 + 16548;
    uint64_t v43 = *(void *)(result + 36);
    uint64_t v44 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
        + 16 * *((void *)result + 14);
    uint64_t v45 = v15[2];
    if (v45) {
      uint64_t result = (unsigned __int8 *)(v45 + v19 * v12 + v43);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v48 = v15;
    uint64_t v47 = *v15;
    uint64_t v46 = v48[1];
    if (v46) {
      uint64_t v49 = (unsigned char *)(v46 + v18 * v12 + v43);
    }
    else {
      uint64_t v49 = 0;
    }
    float v50 = (unsigned __int8 *)(v47 + v17 * v12 + v43);
    do
    {
      if (v11)
      {
        uint64_t v51 = v11;
        uint64_t v52 = v50;
        char v53 = (unsigned int *)v44;
        char v54 = result;
        unsigned int v55 = v49;
        do
        {
          if (v55)
          {
            LOBYTE(v5) = *v55;
            *(float *)&unsigned int v56 = (float)LODWORD(v5);
            float v57 = *(float *)&v56 - v24;
            LOBYTE(v56) = v55[1];
            float v58 = (float)v56 - v24;
            v55 += 2;
            float v59 = v26 * v58;
            float v60 = (float)(v28 * v58) + (float)(v57 * v27);
            float v61 = v30 * v57;
          }
          else
          {
            float v61 = 0.0;
            float v60 = 0.0;
            float v59 = 0.0;
          }
          unsigned int v62 = *v52++;
          float v63 = v25 * (float)((float)v62 - v23);
          float v64 = v59 + v63;
          BOOL v65 = (float)(v59 + v63) <= 8191.0;
          float v66 = 8191.0;
          if (v65)
          {
            float v66 = v64;
            if (v64 < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v60 + v63;
          BOOL v65 = (float)(v60 + v63) <= 8191.0;
          float v68 = 8191.0;
          if (v65)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v61 + v63;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          if (v54 && (v72 = *v54, ++v54, unsigned int v71 = v72, v54))
          {
            float v73 = (double)v71 * 3.0 / 255.0;
            unsigned int v74 = llroundf(v73);
          }
          else
          {
            unsigned int v74 = 3;
          }
          _H31 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          unsigned int v76 = llroundf(fminf(fmaxf(v68, 0.0), 8191.0));
          __asm { FCVT            S8, H31 }
          _H31 = *(_WORD *)(v41 + 2 * v76);
          __asm { FCVT            S10, H31 }
          _H31 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S9, H31 }
          _H31 = *(_WORD *)(v42
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v39 * _S10) + (float)(_S8 * v38)) + (float)(_S9 * v40), 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          float v88 = v31 + _S31;
          BOOL v65 = (float)(v31 + _S31) <= 1023.0;
          float v89 = 1023.0;
          if (v65)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = (float)((float)(v33 * _S10) + (float)(_S8 * v32)) + (float)(_S9 * v34);
          _S8 = (float)((float)(v36 * _S10) + (float)(_S8 * v35)) + (float)(_S9 * v37);
          _H9 = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v42 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          float v94 = v31 + _S8;
          BOOL v65 = (float)(v31 + _S8) <= 1023.0;
          float v95 = 1023.0;
          if (v65)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          __asm { FCVT            S9, H9 }
          float v97 = v31 + _S9;
          BOOL v65 = (float)(v31 + _S9) <= 1023.0;
          float v98 = 1023.0;
          if (v65)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          unsigned int v99 = llroundf(v89);
          unsigned int v100 = llroundf(v95) << 10;
          unsigned int v101 = llroundf(v98);
          float v5 = (float)v74;
          if ((float)v74 > 3.0) {
            float v5 = 3.0;
          }
          *v53++ = v100 | v99 | (llroundf(v5) << 30) | (v101 << 20);
          --v51;
        }
        while (v51);
      }
      v50 += v17;
      v49 += v18;
      result += v19;
      v44 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_l10r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 20);
    unint64_t v9 = v5 + *(void *)(result + 44);
    unint64_t v10 = v6 - v5;
    uint64_t v11 = *((void *)result + 19);
    int64x2_t v13 = (uint64_t *)*((void *)result + 7);
    int64x2_t v12 = (uint64_t *)*((void *)result + 8);
    uint64_t v14 = *v12;
    uint64_t v15 = v12[1];
    uint64_t v16 = v12[2];
    uint64_t v17 = **((void **)result + 17);
    *(float *)&unsigned int v18 = (float)*(unsigned int *)(v11 + 128);
    *(float *)&unsigned int v19 = (float)*(unsigned int *)(v11 + 136);
    float v20 = *(float *)&v19 / *(float *)&v18;
    LOWORD(v18) = *(_WORD *)(v11 + 140);
    float v21 = (float)v18;
    LOWORD(v19) = *(_WORD *)(v11 + 142);
    float v22 = (float)v19;
    float v23 = v20 * *(float *)v11;
    float v24 = v20 * *(float *)(v11 + 8);
    float v25 = v20 * *(float *)(v11 + 16);
    float v26 = v20 * *(float *)(v11 + 20);
    float v27 = *(float *)(v11 + 28);
    float v28 = v20 * v27;
    LOWORD(v27) = *(_WORD *)(v11 + 144);
    float v29 = (float)LODWORD(v27);
    uint64_t v30 = *((void *)result + 14);
    float v31 = (void *)*((void *)result + 16);
    unint64_t v32 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v33 = *(void *)(result + 36);
    uint64_t v34 = *v31 + v32 * v17 + 16 * v30;
    uint64_t v35 = v13[2];
    if (v35) {
      float v36 = (unsigned __int8 *)(v35 + v16 * v9 + v33);
    }
    else {
      float v36 = 0;
    }
    uint64_t v38 = *v13;
    uint64_t v37 = v13[1];
    float v39 = (unsigned char *)(v37 + v15 * v9 + v33);
    if (!v37) {
      float v39 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v38 + v14 * v9 + v33);
    while (!v8)
    {
LABEL_27:
      result += v14;
      v39 += v15;
      v36 += v16;
      v34 += v17;
      if (++v7 == v10) {
        return result;
      }
    }
    uint64_t v40 = v8;
    uint64_t v41 = result;
    uint64_t v42 = (unsigned int *)v34;
    uint64_t v43 = v36;
    uint64_t v44 = v39;
    while (1)
    {
      if (v44)
      {
        LOBYTE(v2) = *v44;
        *(float *)&unsigned int v45 = (float)LODWORD(v2);
        float v46 = *(float *)&v45 - v22;
        LOBYTE(v45) = v44[1];
        float v47 = (float)v45 - v22;
        v44 += 2;
        float v48 = v24 * v47;
        float v49 = (float)(v26 * v47) + (float)(v46 * v25);
        float v50 = v28 * v46;
        if (v43) {
          goto LABEL_12;
        }
      }
      else
      {
        float v50 = 0.0;
        float v49 = 0.0;
        float v48 = 0.0;
        if (v43)
        {
LABEL_12:
          unsigned int v51 = *v43++;
          float v52 = (double)v51 * 3.0 / 255.0;
          unsigned int v53 = llroundf(v52);
          goto LABEL_15;
        }
      }
      unsigned int v53 = 3;
LABEL_15:
      unsigned int v54 = *v41++;
      float v55 = v23 * (float)((float)v54 - v21);
      float v56 = (float)(v50 + v55) + v29;
      float v57 = 1023.0;
      if (v56 <= 1023.0)
      {
        float v57 = v56;
        if (v56 < 0.0) {
          float v57 = 0.0;
        }
      }
      float v58 = (float)(v49 + v55) + v29;
      float v59 = 1023.0;
      if (v58 <= 1023.0)
      {
        float v59 = v58;
        if (v58 < 0.0) {
          float v59 = 0.0;
        }
      }
      float v60 = (float)(v48 + v55) + v29;
      float v61 = 1023.0;
      if (v60 <= 1023.0)
      {
        float v61 = v60;
        if (v60 < 0.0) {
          float v61 = 0.0;
        }
      }
      unsigned int v62 = llroundf(v57);
      unsigned int v63 = llroundf(v59) << 10;
      unsigned int v64 = llroundf(v61);
      float v2 = (float)v53;
      if ((float)v53 > 3.0) {
        float v2 = 3.0;
      }
      *v42++ = v63 | v62 | (llroundf(v2) << 30) | (v64 << 20);
      if (!--v40) {
        goto LABEL_27;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    uint64_t v38 = v14 + 164;
    uint64_t v39 = v14 + 16548;
    uint64_t v40 = v14 + 32932;
    float v41 = *(float *)(v14 + 104);
    float v42 = *(float *)(v14 + 108);
    float v43 = *(float *)(v14 + 112);
    float v44 = *(float *)(v14 + 116);
    float v45 = *(float *)(v14 + 120);
    uint64_t v46 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
                               + 8 * *((void *)result + 14));
    uint64_t v47 = v15[2];
    if (v47) {
      float v48 = (unsigned __int8 *)(v47 + v19 * v12 + v46);
    }
    else {
      float v48 = 0;
    }
    unsigned int v51 = v15;
    uint64_t v50 = *v15;
    uint64_t v49 = v51[1];
    if (v49) {
      float v52 = (unsigned char *)(v49 + v18 * v12 + v46);
    }
    else {
      float v52 = 0;
    }
    unsigned int v53 = (unsigned __int8 *)(v50 + v17 * v12 + v46);
    do
    {
      if (v11)
      {
        uint64_t v54 = v11;
        float v55 = v53;
        float v56 = result;
        float v57 = v48;
        float v58 = v52;
        do
        {
          if (v58)
          {
            LOBYTE(_S31) = *v58;
            *(float *)&unsigned int v59 = (float)LODWORD(_S31);
            float v60 = *(float *)&v59 - v24;
            LOBYTE(v59) = v58[1];
            float v61 = (float)v59 - v24;
            v58 += 2;
            float v62 = v26 * v61;
            float v63 = (float)(v28 * v61) + (float)(v60 * v27);
            float v64 = v29 * v60;
          }
          else
          {
            float v64 = 0.0;
            float v63 = 0.0;
            float v62 = 0.0;
          }
          unsigned int v65 = *v55++;
          float v66 = v25 * (float)((float)v65 - v23);
          float v67 = v62 + v66;
          BOOL v68 = (float)(v62 + v66) <= 8191.0;
          float v69 = 8191.0;
          if (v68)
          {
            float v69 = v67;
            if (v67 < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v63 + v66;
          BOOL v68 = (float)(v63 + v66) <= 8191.0;
          float v71 = 8191.0;
          if (v68)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v64 + v66;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          if (v57)
          {
            __int16 v75 = *v57++;
            __int16 v74 = v75;
          }
          else
          {
            __int16 v74 = 0;
          }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          unsigned int v83 = llroundf(fminf(fmaxf(v73, 0.0), 8191.0));
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v38 + 2 * v83);
          __asm { FCVT            S10, H9 }
          float v87 = (float)((float)((float)(v43 * _S8) + (float)(v42 * _S31)) + (float)(v44 * _S10))
              + (float)(v45 * fmaxf(_S31, fmaxf(_S8, _S10)));
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          _H9 = *(_WORD *)(v39 + 2 * llroundf(v88));
          __asm { FCVT            S11, H9 }
          float v91 = _S31 * _S11;
          float v92 = _S8 * _S11;
          float v93 = _S10 * _S11;
          LOWORD(_S11) = *(_WORD *)(v40
                                  + 2
                                  * llroundf(fminf(fmaxf((float)((float)(v31 * v92) + (float)(v91 * v30))+ (float)((float)(_S10 * _S11) * v32), 0.0), 8191.0)));
          __asm { FCVT            S12, H11 }
          __int16 v95 = v74 | (v74 << 8);
          if (!v57) {
            __int16 v95 = -1;
          }
          float v96 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v96 = _S12;
            if (_NF) {
              float v96 = 0.0;
            }
          }
          float v98 = (float)((float)(v34 * v92) + (float)(v91 * v33)) + (float)(v93 * v35);
          float v99 = (float)((float)(v37 * v92) + (float)(v91 * v36)) + (float)(v93 * v41);
          _H8 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _S31 = fminf(fmaxf(v99, 0.0), 8191.0);
          LOWORD(_S31) = *(_WORD *)(v40 + 2 * llroundf(_S31));
          __asm { FCVT            S11, H8 }
          _WORD *v56 = llroundf(v96);
          float v102 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v102 = _S11;
            if (_NF) {
              float v102 = 0.0;
            }
          }
          __asm { FCVT            S10, H31 }
          v56[1] = llroundf(v102);
          float v105 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v105 = _S10;
            if (_NF) {
              float v105 = 0.0;
            }
          }
          v56[2] = llroundf(v105);
          v56[3] = v95;
          v56 += 4;
          --v54;
        }
        while (v54);
      }
      v53 += v17;
      v52 += v18;
      v48 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    float v38 = *(float *)(v14 + 104);
    uint64_t v39 = v14 + 164;
    uint64_t v40 = v14 + 16548;
    uint64_t v41 = *(void *)(result + 36);
    uint64_t v42 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
        + 8 * *((void *)result + 14);
    uint64_t v43 = v15[2];
    if (v43) {
      uint64_t result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v46 = v15;
    uint64_t v45 = *v15;
    uint64_t v44 = v46[1];
    if (v44) {
      uint64_t v47 = (unsigned char *)(v44 + v18 * v12 + v41);
    }
    else {
      uint64_t v47 = 0;
    }
    float v48 = (unsigned __int8 *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        uint64_t v49 = v11;
        uint64_t v50 = v48;
        unsigned int v51 = (_WORD *)v42;
        float v52 = result;
        unsigned int v53 = v47;
        do
        {
          if (v53)
          {
            LOBYTE(_S27) = *v53;
            *(float *)&unsigned int v54 = (float)LODWORD(_S27);
            float v55 = *(float *)&v54 - v24;
            LOBYTE(v54) = v53[1];
            float v56 = (float)v54 - v24;
            v53 += 2;
            float v57 = v26 * v56;
            float v58 = (float)(v28 * v56) + (float)(v55 * v27);
            float v59 = v29 * v55;
          }
          else
          {
            float v59 = 0.0;
            float v58 = 0.0;
            float v57 = 0.0;
          }
          unsigned int v60 = *v50++;
          float v61 = v25 * (float)((float)v60 - v23);
          float v62 = v57 + v61;
          BOOL v63 = (float)(v57 + v61) <= 8191.0;
          float v64 = 8191.0;
          if (v63)
          {
            float v64 = v62;
            if (v62 < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = v58 + v61;
          BOOL v63 = (float)(v58 + v61) <= 8191.0;
          float v66 = 8191.0;
          if (v63)
          {
            float v66 = v65;
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v59 + v61;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          if (v52)
          {
            __int16 v70 = *v52++;
            __int16 v69 = v70;
          }
          else
          {
            __int16 v69 = 0;
          }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S29, H29
          }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H31 = *(_WORD *)(v40
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v31 * _S29) + (float)(_S27 * v30)) + (float)(_S28 * v32), 0.0), 8191.0)));
          __asm { FCVT            S8, H31 }
          __int16 v83 = v69 | (v69 << 8);
          if (!v52) {
            __int16 v83 = -1;
          }
          float v84 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v84 = _S8;
            if (_NF) {
              float v84 = 0.0;
            }
          }
          float v86 = (float)((float)(v34 * _S29) + (float)(_S27 * v33)) + (float)(_S28 * v35);
          float v87 = (float)((float)(v37 * _S29) + (float)(_S27 * v36)) + (float)(_S28 * v38);
          _H28 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _S27 = fminf(fmaxf(v87, 0.0), 8191.0);
          LOWORD(_S27) = *(_WORD *)(v40 + 2 * llroundf(_S27));
          __asm { FCVT            S31, H28 }
          *unsigned int v51 = llroundf(v84);
          float v90 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v90 = _S31;
            if (_NF) {
              float v90 = 0.0;
            }
          }
          __asm { FCVT            S30, H27 }
          v51[1] = llroundf(v90);
          float v93 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v93 = _S30;
            if (_NF) {
              float v93 = 0.0;
            }
          }
          v51[2] = llroundf(v93);
          v51[3] = v83;
          v51 += 4;
          --v49;
        }
        while (v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_l64r(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(result + 20);
    unint64_t v10 = v6 + *(void *)(result + 44);
    unint64_t v11 = v7 - v6;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v14 = (uint64_t *)*((void *)result + 7);
    int64x2_t v13 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v13;
    uint64_t v16 = v13[1];
    uint64_t v17 = v13[2];
    uint64_t v18 = **((void **)result + 17);
    *(float *)&unsigned int v19 = (float)*(unsigned int *)(v12 + 128);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v12 + 136);
    float v21 = *(float *)&v20 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    float v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    float v23 = (float)v20;
    float v24 = v21 * *(float *)v12;
    float v25 = v21 * *(float *)(v12 + 8);
    float v26 = v21 * *(float *)(v12 + 16);
    float v27 = v21 * *(float *)(v12 + 20);
    float v28 = v21 * *(float *)(v12 + 28);
    uint64_t v29 = *((void *)result + 14);
    float v30 = (void *)*((void *)result + 16);
    unint64_t v31 = *((void *)result + 13) * a2 / v5 + *((void *)result + 15);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *v30 + v31 * v18 + 8 * v29;
    uint64_t v34 = v14[2];
    if (v34) {
      float v35 = (unsigned __int8 *)(v34 + v17 * v10 + v32);
    }
    else {
      float v35 = 0;
    }
    uint64_t v37 = *v14;
    uint64_t v36 = v14[1];
    float v38 = (unsigned char *)(v36 + v16 * v10 + v32);
    if (!v36) {
      float v38 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v37 + v15 * v10 + v32);
    while (!v9)
    {
LABEL_29:
      result += v15;
      v38 += v16;
      v35 += v17;
      v33 += v18;
      if (++v8 == v11) {
        return result;
      }
    }
    uint64_t v39 = v9;
    uint64_t v40 = result;
    uint64_t v41 = (_WORD *)v33;
    uint64_t v42 = v35;
    uint64_t v43 = v38;
    while (1)
    {
      if (v43)
      {
        LOBYTE(v2) = *v43;
        float v44 = (float)LODWORD(v2) - v23;
        LOBYTE(v3) = v43[1];
        float v45 = (float)LODWORD(v3) - v23;
        v43 += 2;
        float v46 = v25 * v45;
        float v47 = (float)(v27 * v45) + (float)(v44 * v26);
        float v48 = v28 * v44;
        if (!v42) {
          goto LABEL_14;
        }
      }
      else
      {
        float v48 = 0.0;
        float v47 = 0.0;
        float v46 = 0.0;
        if (!v42)
        {
LABEL_14:
          __int16 v49 = 0;
          goto LABEL_15;
        }
      }
      __int16 v50 = *v42++;
      __int16 v49 = v50;
LABEL_15:
      unsigned int v51 = *v40++;
      float v52 = v24 * (float)((float)v51 - v22);
      float v53 = v46 + v52;
      __int16 v54 = v49 | (v49 << 8);
      if (!v42) {
        __int16 v54 = -1;
      }
      float v55 = 65535.0;
      if (v53 <= 65535.0)
      {
        float v55 = v53;
        if (v53 < 0.0) {
          float v55 = 0.0;
        }
      }
      float v56 = v47 + v52;
      *uint64_t v41 = llroundf(v55);
      BOOL v57 = (float)(v47 + v52) <= 65535.0;
      float v3 = 65535.0;
      if (v57)
      {
        float v3 = v56;
        if (v56 < 0.0) {
          float v3 = 0.0;
        }
      }
      float v58 = v48 + v52;
      v41[1] = llroundf(v3);
      BOOL v57 = (float)(v48 + v52) <= 65535.0;
      float v2 = 65535.0;
      if (v57)
      {
        float v2 = v58;
        if (v58 < 0.0) {
          float v2 = 0.0;
        }
      }
      v41[2] = llroundf(v2);
      v41[3] = v54;
      v41 += 4;
      if (!--v39) {
        goto LABEL_29;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    uint64_t v38 = v14 + 164;
    uint64_t v39 = v14 + 16548;
    uint64_t v40 = v14 + 32932;
    float v41 = *(float *)(v14 + 104);
    float v42 = *(float *)(v14 + 108);
    float v43 = *(float *)(v14 + 112);
    float v44 = *(float *)(v14 + 116);
    float v45 = *(float *)(v14 + 120);
    uint64_t v46 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
                               + 8 * *((void *)result + 14));
    uint64_t v47 = v15[2];
    if (v47) {
      float v48 = (unsigned __int8 *)(v47 + v19 * v12 + v46);
    }
    else {
      float v48 = 0;
    }
    unsigned int v51 = v15;
    uint64_t v50 = *v15;
    uint64_t v49 = v51[1];
    if (v49) {
      float v52 = (unsigned char *)(v49 + v18 * v12 + v46);
    }
    else {
      float v52 = 0;
    }
    float v53 = (unsigned __int8 *)(v50 + v17 * v12 + v46);
    do
    {
      if (v11)
      {
        uint64_t v54 = v11;
        float v55 = v53;
        float v56 = result;
        BOOL v57 = v48;
        float v58 = v52;
        do
        {
          if (v58)
          {
            LOBYTE(v5) = *v58;
            *(float *)&unsigned int v59 = (float)LODWORD(v5);
            float v60 = *(float *)&v59 - v24;
            LOBYTE(v59) = v58[1];
            float v61 = (float)v59 - v24;
            v58 += 2;
            float v62 = v26 * v61;
            float v63 = (float)(v28 * v61) + (float)(v60 * v27);
            float v64 = v29 * v60;
          }
          else
          {
            float v64 = 0.0;
            float v63 = 0.0;
            float v62 = 0.0;
          }
          unsigned int v65 = *v55++;
          float v66 = v25 * (float)((float)v65 - v23);
          float v67 = v62 + v66;
          BOOL v68 = (float)(v62 + v66) <= 8191.0;
          float v69 = 8191.0;
          if (v68)
          {
            float v69 = v67;
            if (v67 < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v63 + v66;
          BOOL v68 = (float)(v63 + v66) <= 8191.0;
          float v71 = 8191.0;
          if (v68)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v64 + v66;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          if (v57)
          {
            int v75 = *v57++;
            int v74 = v75;
          }
          else
          {
            int v74 = 0;
          }
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          unsigned int v83 = llroundf(fminf(fmaxf(v73, 0.0), 8191.0));
          __asm { FCVT            S8, H9 }
          _H9 = *(_WORD *)(v38 + 2 * v83);
          __asm { FCVT            S11, H9 }
          float v87 = (float)((float)((float)(v43 * _S8) + (float)(v42 * _S31)) + (float)(v44 * _S11))
              + (float)(v45 * fmaxf(_S31, fmaxf(_S8, _S11)));
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          _H9 = *(_WORD *)(v39 + 2 * llroundf(v88));
          __asm { FCVT            S12, H9 }
          float v91 = _S31 * _S12;
          float v92 = _S8 * _S12;
          float v93 = _S11 * _S12;
          _H11 = *(_WORD *)(v40
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v31 * v92) + (float)((float)(_S31 * _S12) * v30))+ (float)((float)(_S11 * _S12) * v32), 0.0), 8191.0)));
          __asm { FCVT            S12, H11 }
          unsigned int v96 = v74 | (v74 << 8);
          if (!v57) {
            unsigned int v96 = -1;
          }
          float v5 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v5 = _S12;
            if (_NF) {
              float v5 = 0.0;
            }
          }
          float v98 = (float)((float)(v34 * v92) + (float)(v91 * v33)) + (float)(v93 * v35);
          float v99 = (float)(v37 * v92) + (float)(v91 * v36);
          _H10 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S11, H10 }
          _H9 = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v99 + (float)(v93 * v41), 0.0), 8191.0)));
          float v103 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v103 = _S11;
            if (_NF) {
              float v103 = 0.0;
            }
          }
          __asm { FCVT            S11, H9 }
          float v106 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v106 = _S11;
            if (_NF) {
              float v106 = 0.0;
            }
          }
          _WORD *v56 = bswap32(v96) >> 16;
          v56[1] = __rev16(llroundf(v5));
          v56[2] = __rev16(llroundf(v103));
          v56[3] = __rev16(llroundf(v106));
          v56 += 4;
          --v54;
        }
        while (v54);
      }
      v53 += v17;
      v52 += v18;
      v48 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    float v38 = *(float *)(v14 + 104);
    uint64_t v39 = v14 + 164;
    uint64_t v40 = v14 + 16548;
    uint64_t v41 = *(void *)(result + 36);
    uint64_t v42 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
        + 8 * *((void *)result + 14);
    uint64_t v43 = v15[2];
    if (v43) {
      uint64_t result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v46 = v15;
    uint64_t v45 = *v15;
    uint64_t v44 = v46[1];
    if (v44) {
      uint64_t v47 = (unsigned char *)(v44 + v18 * v12 + v41);
    }
    else {
      uint64_t v47 = 0;
    }
    float v48 = (unsigned __int8 *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        uint64_t v49 = v11;
        uint64_t v50 = v48;
        unsigned int v51 = (_WORD *)v42;
        float v52 = result;
        float v53 = v47;
        do
        {
          if (v53)
          {
            LOBYTE(v5) = *v53;
            *(float *)&unsigned int v54 = (float)LODWORD(v5);
            float v55 = *(float *)&v54 - v24;
            LOBYTE(v54) = v53[1];
            float v56 = (float)v54 - v24;
            v53 += 2;
            float v57 = v26 * v56;
            float v58 = (float)(v28 * v56) + (float)(v55 * v27);
            float v59 = v29 * v55;
          }
          else
          {
            float v59 = 0.0;
            float v58 = 0.0;
            float v57 = 0.0;
          }
          unsigned int v60 = *v50++;
          float v61 = v25 * (float)((float)v60 - v23);
          float v62 = v57 + v61;
          BOOL v63 = (float)(v57 + v61) <= 8191.0;
          float v64 = 8191.0;
          if (v63)
          {
            float v64 = v62;
            if (v62 < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = v58 + v61;
          BOOL v63 = (float)(v58 + v61) <= 8191.0;
          float v66 = 8191.0;
          if (v63)
          {
            float v66 = v65;
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v59 + v61;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          if (v52)
          {
            int v70 = *v52++;
            int v69 = v70;
          }
          else
          {
            int v69 = 0;
          }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H27
            FCVT            S29, H29
          }
          _H27 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S30, H27 }
          _H31 = *(_WORD *)(v40
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v31 * _S29) + (float)(_S28 * v30)) + (float)(_S30 * v32), 0.0), 8191.0)));
          __asm { FCVT            S8, H31 }
          unsigned int v83 = v69 | (v69 << 8);
          if (!v52) {
            unsigned int v83 = -1;
          }
          float v5 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v5 = _S8;
            if (_NF) {
              float v5 = 0.0;
            }
          }
          _H8 = *(_WORD *)(v40
                         + 2
                         * llroundf(fminf(fmaxf((float)((float)(v34 * _S29) + (float)(_S28 * v33)) + (float)(_S30 * v35), 0.0), 8191.0)));
          __asm { FCVT            S9, H8 }
          float v87 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v87 = _S9;
            if (_NF) {
              float v87 = 0.0;
            }
          }
          _H29 = *(_WORD *)(v40
                          + 2
                          * llroundf(fminf(fmaxf((float)((float)(v37 * _S29) + (float)(_S28 * v36)) + (float)(_S30 * v38), 0.0), 8191.0)));
          __asm { FCVT            S30, H29 }
          float v91 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v91 = _S30;
            if (_NF) {
              float v91 = 0.0;
            }
          }
          *unsigned int v51 = bswap32(v83) >> 16;
          v51[1] = __rev16(llroundf(v5));
          v51[2] = __rev16(llroundf(v87));
          v51[3] = __rev16(llroundf(v91));
          v51 += 4;
          --v49;
        }
        while (v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_b64a(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(result + 20);
    unint64_t v10 = v6 + *(void *)(result + 44);
    unint64_t v11 = v7 - v6;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v14 = (uint64_t *)*((void *)result + 7);
    int64x2_t v13 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v13;
    uint64_t v16 = v13[1];
    uint64_t v17 = v13[2];
    uint64_t v18 = **((void **)result + 17);
    *(float *)&unsigned int v19 = (float)*(unsigned int *)(v12 + 128);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v12 + 136);
    float v21 = *(float *)&v20 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    float v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    float v23 = (float)v20;
    float v24 = v21 * *(float *)v12;
    float v25 = v21 * *(float *)(v12 + 8);
    float v26 = v21 * *(float *)(v12 + 16);
    float v27 = v21 * *(float *)(v12 + 20);
    float v28 = v21 * *(float *)(v12 + 28);
    uint64_t v29 = *((void *)result + 14);
    float v30 = (void *)*((void *)result + 16);
    unint64_t v31 = *((void *)result + 13) * a2 / v5 + *((void *)result + 15);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *v30 + v31 * v18 + 8 * v29;
    uint64_t v34 = v14[2];
    if (v34) {
      float v35 = (unsigned __int8 *)(v34 + v17 * v10 + v32);
    }
    else {
      float v35 = 0;
    }
    uint64_t v37 = *v14;
    uint64_t v36 = v14[1];
    float v38 = (unsigned char *)(v36 + v16 * v10 + v32);
    if (!v36) {
      float v38 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v37 + v15 * v10 + v32);
    while (!v9)
    {
LABEL_28:
      result += v15;
      v38 += v16;
      v35 += v17;
      v33 += v18;
      if (++v8 == v11) {
        return result;
      }
    }
    uint64_t v39 = v9;
    uint64_t v40 = result;
    uint64_t v41 = (_WORD *)v33;
    uint64_t v42 = v35;
    uint64_t v43 = v38;
    while (1)
    {
      if (v43)
      {
        LOBYTE(v2) = *v43;
        float v44 = (float)LODWORD(v2) - v23;
        LOBYTE(v3) = v43[1];
        float v45 = (float)LODWORD(v3) - v23;
        v43 += 2;
        float v46 = v25 * v45;
        float v47 = (float)(v27 * v45) + (float)(v44 * v26);
        float v48 = v28 * v44;
        if (!v42) {
          goto LABEL_14;
        }
      }
      else
      {
        float v48 = 0.0;
        float v47 = 0.0;
        float v46 = 0.0;
        if (!v42)
        {
LABEL_14:
          int v49 = 0;
          goto LABEL_15;
        }
      }
      int v50 = *v42++;
      int v49 = v50;
LABEL_15:
      unsigned int v51 = *v40++;
      float v52 = v24 * (float)((float)v51 - v22);
      float v53 = v46 + v52;
      unsigned int v54 = v49 | (v49 << 8);
      if (!v42) {
        unsigned int v54 = -1;
      }
      float v55 = 65535.0;
      if (v53 <= 65535.0)
      {
        float v55 = v53;
        if (v53 < 0.0) {
          float v55 = 0.0;
        }
      }
      float v56 = v47 + v52;
      BOOL v57 = (float)(v47 + v52) <= 65535.0;
      float v3 = 65535.0;
      if (v57)
      {
        float v3 = v56;
        if (v56 < 0.0) {
          float v3 = 0.0;
        }
      }
      float v58 = v48 + v52;
      float v2 = 65535.0;
      if (v58 <= 65535.0)
      {
        float v2 = v58;
        if (v58 < 0.0) {
          float v2 = 0.0;
        }
      }
      *uint64_t v41 = bswap32(v54) >> 16;
      v41[1] = __rev16(llroundf(v55));
      v41[2] = __rev16(llroundf(v3));
      v41[3] = __rev16(llroundf(v2));
      v41 += 4;
      if (!--v39) {
        goto LABEL_28;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(result + 20);
    uint64_t v9 = *(void *)(result + 44);
    uint64_t v10 = v5 + v9;
    uint64_t v11 = v6 + v9;
    uint64_t v12 = *((void *)result + 19);
    int64x2_t v13 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = **((void **)result + 17);
    unsigned int v19 = *(unsigned __int16 *)(v12 + 140);
    unsigned int v20 = *(unsigned __int16 *)(v12 + 142);
    _Q6.i32[0] = *(_DWORD *)(v12 + 72);
    _Q16.i32[0] = *(_DWORD *)(v12 + 76);
    _S17 = *(_DWORD *)(v12 + 80);
    _S18 = *(_DWORD *)(v12 + 84);
    _S20 = *(_DWORD *)(v12 + 88);
    _S22 = *(_DWORD *)(v12 + 92);
    _S23 = *(_DWORD *)(v12 + 104);
    uint64_t v170 = v11 - v10;
    uint64_t v28 = v12 + 16548;
    float v29 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    float v30 = (float)v20;
    *(float *)&_D0 = v29 * *(float *)v12;
    _S1 = v29 * *(float *)(v12 + 8);
    _S2 = v29 * *(float *)(v12 + 16);
    _S3 = v29 * *(float *)(v12 + 20);
    _S4 = v29 * *(float *)(v12 + 28);
    uint64_t v35 = v12 + 164;
    uint64_t v36 = v12 + 32932;
    float v187 = *(float *)&_D0;
    float v188 = (float)v19;
    __asm { FCVT            H8, S0 }
    *(short float *)&_D0 = (short float)v19;
    int16x8_t v42 = vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    *(short float *)&_D0 = -(short float)v20;
    float16x8_t v43 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    float v175 = _S4;
    float v176 = _S3;
    __asm { FCVT            H0, S4 }
    short float v174 = _H0;
    float v177 = _S2;
    float v178 = _S1;
    __asm { FCVT            H0, S2 }
    short float v173 = _H0;
    __asm { FCVT            H0, S3 }
    short float v172 = _H0;
    __asm { FCVT            H0, S1 }
    short float v171 = _H0;
    float v192 = *(float *)(v12 + 108);
    __asm { FCVT            H0, S7 }
    short float v185 = _H0;
    float16x8_t v186 = (float16x8_t)v42;
    float v191 = *(float *)(v12 + 112);
    __asm { FCVT            H0, S24 }
    short float v184 = _H0;
    float v189 = *(float *)(v12 + 120);
    float v190 = *(float *)(v12 + 116);
    __asm { FCVT            H0, S25 }
    short float v183 = _H0;
    __asm { FCVT            H0, S26 }
    short float v182 = _H0;
    float v193 = *(float *)_Q6.i32;
    __asm { FCVT            H0, S6 }
    short float v181 = _H0;
    uint64_t v53 = v13[2];
    uint64_t v54 = *(void *)(result + 36);
    unint64_t v55 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v57 = *v13;
    uint64_t v56 = *(void *)(*((void *)result + 7) + 8);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16) + v18 * v55 + 8 * *((void *)result + 14));
    if (v53) {
      float v58 = (int8x8_t *)(v53 + v17 * v10 + v54);
    }
    else {
      float v58 = 0;
    }
    if (v56) {
      uint64_t v59 = v56 + v16 * v10 + v54;
    }
    else {
      uint64_t v59 = 0;
    }
    unsigned int v60 = (int8x8_t *)(v57 + v15 * v10 + v54);
    _S30 = *(float *)(v12 + 100);
    float v62 = *(float *)(v12 + 76);
    __asm { FCVT            H0, S16 }
    short float v180 = _H0;
    float v64 = *(float *)(v12 + 80);
    __asm { FCVT            H0, S17 }
    short float v179 = _H0;
    float v66 = *(float *)(v12 + 84);
    __asm { FCVT            H0, S18 }
    float v68 = *(float *)(v12 + 88);
    __asm { FCVT            H1, S20 }
    float v70 = *(float *)(v12 + 92);
    __asm { FCVT            H2, S22 }
    _S12 = *(float *)(v12 + 96);
    __asm
    {
      FCVT            H3, S3
      FCVT            H4, S30
    }
    float v75 = *(float *)(v12 + 104);
    __asm { FCVT            H5, S23 }
    v77.i64[0] = 0x9000900090009000;
    v77.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v134 = 0;
        uint64_t v82 = v59;
        float16x8_t v81 = v58;
        float16x8_t v80 = (__int16 *)result;
        float16x8_t v79 = v60;
      }
      else
      {
        int v78 = 0;
        float16x8_t v79 = v60;
        float16x8_t v80 = (__int16 *)result;
        float16x8_t v81 = v58;
        uint64_t v82 = v59;
        do
        {
          if (v82)
          {
            int8x8x2_t v194 = vld2_s8((const char *)v82);
            v82 += 16;
            *(int8x8_t *)v83.i8 = vzip1_s8(v194.val[0], 0);
            v83.u64[1] = (unint64_t)vzip2_s8(v194.val[0], 0);
            *(int8x8_t *)v84.i8 = vzip1_s8(v194.val[1], 0);
            v84.u64[1] = (unint64_t)vzip2_s8(v194.val[1], 0);
            float16x8_t v85 = vaddq_f16(v43, vcvtq_f16_u16(v83));
            float16x8_t v86 = vaddq_f16(v43, vcvtq_f16_u16(v84));
            float16x8_t v87 = vmulq_n_f16(v86, v171);
            float16x8_t v88 = vmlaq_n_f16(vmulq_n_f16(v85, v173), v86, v172);
            float16x8_t v89 = vmulq_n_f16(v85, v174);
          }
          else
          {
            float16x8_t v89 = 0uLL;
            float16x8_t v88 = 0uLL;
            float16x8_t v87 = 0uLL;
          }
          int8x8_t v90 = *v79++;
          int8x8_t v91 = v90;
          if (v81)
          {
            int8x8_t v92 = *v81++;
            int8x8_t v93 = v92;
          }
          else
          {
            int8x8_t v93 = 0;
          }
          *(int8x8_t *)v94.i8 = vzip1_s8(v91, 0);
          v94.u64[1] = (unint64_t)vzip2_s8(v91, 0);
          float16x8_t v95 = vsubq_f16(vcvtq_f16_u16(v94), v186);
          float16x8_t v96 = vmlaq_n_f16(v88, v95, _H8);
          float16x8_t v97 = vmlaq_n_f16(v89, v95, _H8);
          uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v87, v95, _H8), (float16x8_t)0), v77));
          float16x8_t v99 = (float16x8_t)vmovl_high_u16(v98);
          *(void *)&long long v100 = v99.u32[2];
          *((void *)&v100 + 1) = v99.u32[3];
          long long v101 = v100;
          *(void *)&long long v100 = v99.u32[0];
          *((void *)&v100 + 1) = v99.u32[1];
          uint32x4_t v102 = vmovl_u16(*(uint16x4_t *)v98.i8);
          v99.i16[0] = *(_WORD *)(v35 + 2 * v102.u32[0]);
          v99.i16[1] = *(_WORD *)(v35 + 2 * v102.u32[1]);
          v99.i16[2] = *(_WORD *)(v35 + 2 * v102.u32[2]);
          v99.i16[3] = *(_WORD *)(v35 + 2 * v102.u32[3]);
          v99.i16[4] = *(_WORD *)(v35 + 2 * v100);
          v99.i16[5] = *(_WORD *)(v35 + 2 * *((void *)&v100 + 1));
          v99.i16[6] = *(_WORD *)(v35 + 2 * v101);
          v99.i16[7] = *(_WORD *)(v35 + 2 * *((void *)&v101 + 1));
          uint16x8_t v103 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v96, (float16x8_t)0), v77));
          uint32x4_t v104 = vmovl_high_u16(v103);
          uint32x4_t v105 = vmovl_u16(*(uint16x4_t *)v103.i8);
          v96.i16[0] = *(_WORD *)(v35 + 2 * v105.u32[0]);
          v96.i16[1] = *(_WORD *)(v35 + 2 * v105.u32[1]);
          v96.i16[2] = *(_WORD *)(v35 + 2 * v105.u32[2]);
          v96.i16[3] = *(_WORD *)(v35 + 2 * v105.u32[3]);
          v96.i16[4] = *(_WORD *)(v35 + 2 * v104.u32[0]);
          v96.i16[5] = *(_WORD *)(v35 + 2 * v104.u32[1]);
          v96.i16[6] = *(_WORD *)(v35 + 2 * v104.u32[2]);
          v96.i16[7] = *(_WORD *)(v35 + 2 * v104.u32[3]);
          uint16x8_t v106 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v97, (float16x8_t)0), v77));
          float16x8_t v107 = (float16x8_t)vmovl_high_u16(v106);
          *(void *)&long long v100 = v107.u32[2];
          *((void *)&v100 + 1) = v107.u32[3];
          long long v108 = v100;
          *(void *)&long long v100 = v107.u32[0];
          *((void *)&v100 + 1) = v107.u32[1];
          uint32x4_t v109 = vmovl_u16(*(uint16x4_t *)v106.i8);
          v107.i16[0] = *(_WORD *)(v35 + 2 * v109.u32[0]);
          v107.i16[1] = *(_WORD *)(v35 + 2 * v109.u32[1]);
          v107.i16[2] = *(_WORD *)(v35 + 2 * v109.u32[2]);
          v107.i16[3] = *(_WORD *)(v35 + 2 * v109.u32[3]);
          v107.i16[4] = *(_WORD *)(v35 + 2 * v100);
          v107.i16[5] = *(_WORD *)(v35 + 2 * *((void *)&v100 + 1));
          v107.i16[6] = *(_WORD *)(v35 + 2 * v108);
          v107.i16[7] = *(_WORD *)(v35 + 2 * *((void *)&v108 + 1));
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v99, v185), v96, v184), v107, v183), vmaxq_f16(vmaxq_f16(v99, v96), v107), v182), (float16x8_t)0), v77));
          uint32x4_t v111 = vmovl_high_u16(v110);
          float16x8_t v112 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v110.i8);
          v112.i16[0] = *(_WORD *)(v28 + 2 * v112.u32[0]);
          v112.i16[1] = *(_WORD *)(v28 + 2 * v112.u32[1]);
          v112.i16[2] = *(_WORD *)(v28 + 2 * v112.u32[2]);
          v112.i16[3] = *(_WORD *)(v28 + 2 * v112.u32[3]);
          v112.i16[4] = *(_WORD *)(v28 + 2 * v111.u32[0]);
          v112.i16[5] = *(_WORD *)(v28 + 2 * v111.u32[1]);
          v112.i16[6] = *(_WORD *)(v28 + 2 * v111.u32[2]);
          v112.i16[7] = *(_WORD *)(v28 + 2 * v111.u32[3]);
          float16x8_t v113 = vmulq_f16(v99, v112);
          float16x8_t v114 = vmulq_f16(v96, v112);
          float16x8_t v115 = vmulq_f16(v107, v112);
          float16x8_t v116 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v113, _H0), v114, _H1), v115, _H2);
          float16x8_t v117 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v115, _H5), v114, _H4), v113, _H3);
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v113, v181), v114, v180), v115, v179), (float16x8_t)0), v77));
          uint32x4_t v119 = vmovl_high_u16(v118);
          uint32x4_t v120 = vmovl_u16(*(uint16x4_t *)v118.i8);
          LOWORD(v121) = *(_WORD *)(v36 + 2 * v120.u32[0]);
          WORD1(v121) = *(_WORD *)(v36 + 2 * v120.u32[1]);
          WORD2(v121) = *(_WORD *)(v36 + 2 * v120.u32[2]);
          WORD3(v121) = *(_WORD *)(v36 + 2 * v120.u32[3]);
          WORD4(v121) = *(_WORD *)(v36 + 2 * v119.u32[0]);
          WORD5(v121) = *(_WORD *)(v36 + 2 * v119.u32[1]);
          WORD6(v121) = *(_WORD *)(v36 + 2 * v119.u32[2]);
          HIWORD(v121) = *(_WORD *)(v36 + 2 * v119.u32[3]);
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v77));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          LOWORD(v125) = *(_WORD *)(v36 + 2 * v124.u32[0]);
          WORD1(v125) = *(_WORD *)(v36 + 2 * v124.u32[1]);
          WORD2(v125) = *(_WORD *)(v36 + 2 * v124.u32[2]);
          WORD3(v125) = *(_WORD *)(v36 + 2 * v124.u32[3]);
          WORD4(v125) = *(_WORD *)(v36 + 2 * v123.u32[0]);
          WORD5(v125) = *(_WORD *)(v36 + 2 * v123.u32[1]);
          WORD6(v125) = *(_WORD *)(v36 + 2 * v123.u32[2]);
          HIWORD(v125) = *(_WORD *)(v36 + 2 * v123.u32[3]);
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), v77));
          uint32x4_t v127 = vmovl_high_u16(v126);
          _Q6 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v126.i8);
          LOWORD(v128) = *(_WORD *)(v36 + 2 * _Q6.u32[0]);
          WORD1(v128) = *(_WORD *)(v36 + 2 * _Q6.u32[1]);
          WORD2(v128) = *(_WORD *)(v36 + 2 * _Q6.u32[2]);
          HIWORD(v128) = *(_WORD *)(v36 + 2 * _Q6.u32[3]);
          if (v81)
          {
            *(int8x8_t *)v133.i8 = vzip1_s8(v93, 0);
            v133.u64[1] = (unint64_t)vzip2_s8(v93, 0);
            _Q6 = vcvtq_f16_u16(v133);
            _Q16 = vmulq_f16(_Q6, (float16x8_t)vdupq_n_s16(0x1C04u));
          }
          else
          {
            _Q16.i64[0] = 0x3C003C003C003C00;
            _Q16.i64[1] = 0x3C003C003C003C00;
          }
          __int16 v132 = *(_WORD *)(v36 + 2 * v127.u32[3]);
          __int16 v131 = *(_WORD *)(v36 + 2 * v127.u32[2]);
          __int16 v130 = *(_WORD *)(v36 + 2 * v127.u32[1]);
          __int16 v129 = *(_WORD *)(v36 + 2 * v127.u32[0]);
          vst4q_s16(v80, *(int16x8x4_t *)(&_Q16 - 3));
          v80 += 32;
          v78 += 8;
        }
        while (v78 < (int)v8 - 7);
        unint64_t v134 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v134;
      unint64_t v135 = v8 - v134;
      if (v135 != 0 && _CF)
      {
        do
        {
          if (v82)
          {
            _Q6.i8[0] = *(unsigned char *)v82;
            float v136 = (float)_Q6.u32[0] - v30;
            _Q16.i8[0] = *(unsigned char *)(v82 + 1);
            float v137 = (float)_Q16.u32[0] - v30;
            v82 += 2;
            float v138 = v178 * v137;
            float v139 = (float)(v176 * v137) + (float)(v136 * v177);
            float v140 = v175 * v136;
          }
          else
          {
            float v140 = 0.0;
            float v139 = 0.0;
            float v138 = 0.0;
          }
          unsigned int v141 = v79->u8[0];
          float16x8_t v79 = (int8x8_t *)((char *)v79 + 1);
          float v142 = v187 * (float)((float)v141 - v188);
          float v143 = v138 + v142;
          float v144 = 8191.0;
          if (v143 <= 8191.0)
          {
            float v144 = v143;
            if (v143 < 0.0) {
              float v144 = 0.0;
            }
          }
          float v145 = v139 + v142;
          BOOL v146 = (float)(v139 + v142) <= 8191.0;
          float v147 = 8191.0;
          if (v146)
          {
            float v147 = v145;
            if (v145 < 0.0) {
              float v147 = 0.0;
            }
          }
          float v148 = v140 + v142;
          float v149 = 8191.0;
          if (v148 <= 8191.0)
          {
            float v149 = v148;
            if (v148 < 0.0) {
              float v149 = 0.0;
            }
          }
          if (v81)
          {
            unsigned int v151 = v81->u8[0];
            float16x8_t v81 = (int8x8_t *)((char *)v81 + 1);
            unsigned int v150 = v151;
          }
          else
          {
            unsigned int v150 = 0;
          }
          _H6 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          __asm { FCVT            S13, H6 }
          _H6 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          unsigned int v155 = llroundf(fminf(fmaxf(v149, 0.0), 8191.0));
          __asm { FCVT            S26, H6 }
          _H6 = *(_WORD *)(v35 + 2 * v155);
          __asm { FCVT            S31, H6 }
          float v159 = fmaxf(_S13, fmaxf(_S26, _S31));
          float v160 = (float)((float)((float)(v191 * _S26) + (float)(v192 * _S13)) + (float)(v190 * _S31))
               + (float)(v189 * v159);
          float v161 = 8191.0;
          if (v160 <= 8191.0)
          {
            float v161 = (float)((float)((float)(v191 * _S26) + (float)(v192 * _S13)) + (float)(v190 * _S31))
                 + (float)(v189 * v159);
            if (v160 < 0.0) {
              float v161 = 0.0;
            }
          }
          _H6 = *(_WORD *)(v28 + 2 * llroundf(v161));
          __asm { FCVT            S6, H6 }
          float v164 = _S13 * _S6;
          float v165 = _S26 * _S6;
          float v166 = _S31 * _S6;
          float v167 = (float)((float)(v62 * v165) + (float)(v164 * v193)) + (float)(v166 * v64);
          float v168 = (float)((float)(v68 * v165) + (float)(v164 * v66)) + (float)(v166 * v70);
          float v169 = (float)((float)(_S30 * v165) + (float)(v164 * _S12)) + (float)(v166 * v75);
          LOWORD(v165) = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          *(float *)_Q6.i32 = fminf(fmaxf(v169, 0.0), 8191.0);
          _Q6.i16[0] = *(_WORD *)(v36 + 2 * llroundf(*(float *)_Q6.i32));
          *(float *)_Q16.i32 = (float)v150 * 0.0039216;
          __asm { FCVT            H16, S16 }
          *float16x8_t v80 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          v80[1] = LOWORD(v165);
          v80[2] = _Q6.i16[0];
          _Q6.i16[0] = COERCE_UNSIGNED_INT(1.0);
          if (v81) {
            _Q6.i16[0] = _Q16.i16[0];
          }
          v80[3] = _Q6.i16[0];
          v80 += 4;
          --v135;
        }
        while (v135);
      }
      unsigned int v60 = (int8x8_t *)((char *)v60 + v15);
      v59 += v16;
      float v58 = (int8x8_t *)((char *)v58 + v17);
      result += v18;
      ++v7;
    }
    while (v7 != v170);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    uint64_t v38 = v14 + 164;
    uint64_t v39 = v14 + 16548;
    uint64_t v40 = v14 + 32932;
    float v41 = *(float *)(v14 + 104);
    float v42 = *(float *)(v14 + 108);
    float v43 = *(float *)(v14 + 112);
    float v44 = *(float *)(v14 + 116);
    float v45 = *(float *)(v14 + 120);
    uint64_t v46 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
                               + 8 * *((void *)result + 14));
    uint64_t v47 = v15[2];
    if (v47) {
      float v48 = (unsigned __int8 *)(v47 + v19 * v12 + v46);
    }
    else {
      float v48 = 0;
    }
    unsigned int v51 = v15;
    uint64_t v50 = *v15;
    uint64_t v49 = v51[1];
    if (v49) {
      float v52 = (unsigned char *)(v49 + v18 * v12 + v46);
    }
    else {
      float v52 = 0;
    }
    uint64_t v53 = (unsigned __int8 *)(v50 + v17 * v12 + v46);
    do
    {
      if (v11)
      {
        uint64_t v54 = v11;
        unint64_t v55 = v53;
        uint64_t v56 = result;
        uint64_t v57 = v48;
        float v58 = v52;
        do
        {
          if (v58)
          {
            LOBYTE(v5) = *v58;
            *(float *)&unsigned int v59 = (float)LODWORD(v5);
            float v60 = *(float *)&v59 - v24;
            LOBYTE(v59) = v58[1];
            float v61 = (float)v59 - v24;
            v58 += 2;
            float v62 = v26 * v61;
            float v63 = (float)(v28 * v61) + (float)(v60 * v27);
            float v64 = v29 * v60;
          }
          else
          {
            float v64 = 0.0;
            float v63 = 0.0;
            float v62 = 0.0;
          }
          unsigned int v65 = *v55++;
          float v66 = v25 * (float)((float)v65 - v23);
          float v67 = v62 + v66;
          BOOL v68 = (float)(v62 + v66) <= 8191.0;
          float v69 = 8191.0;
          if (v68)
          {
            float v69 = v67;
            if (v67 < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v63 + v66;
          BOOL v68 = (float)(v63 + v66) <= 8191.0;
          float v71 = 8191.0;
          if (v68)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v64 + v66;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          if (v57)
          {
            unsigned int v75 = *v57++;
            unsigned int v74 = v75;
          }
          else
          {
            unsigned int v74 = 0;
          }
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          unsigned int v83 = llroundf(fminf(fmaxf(v73, 0.0), 8191.0));
          __asm { FCVT            S9, H10 }
          _H10 = *(_WORD *)(v38 + 2 * v83);
          __asm { FCVT            S10, H10 }
          float v87 = (float)((float)((float)(v43 * _S9) + (float)(v42 * _S8)) + (float)(v44 * _S10))
              + (float)(v45 * fmaxf(_S8, fmaxf(_S9, _S10)));
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          _H11 = *(_WORD *)(v39 + 2 * llroundf(v88));
          __asm { FCVT            S11, H11 }
          float v91 = _S8 * _S11;
          float v92 = _S9 * _S11;
          float v93 = _S10 * _S11;
          float v94 = (float)((float)(v31 * v92) + (float)(v91 * v30)) + (float)(v93 * v32);
          float v95 = (float)((float)(v34 * v92) + (float)(v91 * v33)) + (float)(v93 * v35);
          float v96 = (float)((float)(v37 * v92) + (float)(v91 * v36)) + (float)(v93 * v41);
          LOWORD(v92) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          LOWORD(v93) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          float v5 = fminf(fmaxf(v96, 0.0), 8191.0);
          LOWORD(v5) = *(_WORD *)(v40 + 2 * llroundf(v5));
          _S11 = (float)v74 * 0.0039216;
          __asm { FCVT            H11, S11 }
          _WORD *v56 = LOWORD(v92);
          v56[1] = LOWORD(v93);
          v56[2] = LOWORD(v5);
          if (v57) {
            *(short float *)&float v5 = _H11;
          }
          else {
            LOWORD(v5) = COERCE_UNSIGNED_INT(1.0);
          }
          v56[3] = LOWORD(v5);
          v56 += 4;
          --v54;
        }
        while (v54);
      }
      v53 += v17;
      v52 += v18;
      v48 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(result + 20);
    uint64_t v9 = *(void *)(result + 44);
    uint64_t v10 = v5 + v9;
    uint64_t v11 = v6 + v9;
    uint64_t v12 = *((void *)result + 19);
    int64x2_t v13 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = **((void **)result + 17);
    unsigned int v19 = *(unsigned __int16 *)(v12 + 140);
    unsigned int v20 = *(unsigned __int16 *)(v12 + 142);
    float v21 = *(float *)(v12 + 8);
    float v22 = *(float *)(v12 + 20);
    float v23 = *(float *)(v12 + 28);
    _S21 = *(float *)(v12 + 72);
    _S22 = *(float *)(v12 + 76);
    _S23 = *(float *)(v12 + 80);
    _S24 = *(float *)(v12 + 84);
    _S27 = *(float *)(v12 + 88);
    _S28 = *(float *)(v12 + 92);
    _S29 = *(float *)(v12 + 96);
    _S30 = *(float *)(v12 + 100);
    _S31 = *(float *)(v12 + 104);
    uint64_t v33 = v11 - v10;
    uint64_t v34 = v12 + 164;
    float v35 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    float v160 = (float)v19;
    float v36 = (float)v20;
    *(float *)&_D0 = v35 * *(float *)v12;
    *(float *)&_Q2 = v35 * *(float *)(v12 + 16);
    uint64_t v38 = v12 + 16548;
    float v158 = *(float *)&_D0;
    __asm { FCVT            H8, S0 }
    *(short float *)&_D0 = (short float)v19;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    float16x8_t v159 = (float16x8_t)_Q0;
    *(short float *)_Q0.i16 = -(short float)v20;
    float16x8_t v45 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float v150 = v35 * v23;
    float v151 = v35 * v22;
    __asm { FCVT            H0, S4 }
    short float v149 = *(short float *)_Q0.i16;
    float v152 = *(float *)&_Q2;
    float v153 = v35 * v21;
    __asm { FCVT            H0, S2 }
    short float v148 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S3 }
    short float v147 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S1 }
    short float v146 = *(short float *)_Q0.i16;
    float v46 = _S21;
    __asm { FCVT            H0, S21 }
    short float v157 = *(short float *)_Q0.i16;
    float v47 = _S22;
    __asm { FCVT            H0, S22 }
    short float v156 = *(short float *)_Q0.i16;
    float v48 = _S23;
    __asm { FCVT            H0, S23 }
    short float v155 = *(short float *)_Q0.i16;
    float v49 = _S24;
    __asm { FCVT            H0, S24 }
    short float v154 = *(short float *)_Q0.i16;
    float v50 = _S27;
    __asm { FCVT            H10, S27 }
    float v52 = _S28;
    __asm
    {
      FCVT            H11, S28
      FCVT            H12, S29
    }
    float v55 = _S30;
    __asm { FCVT            H0, S30 }
    uint64_t v57 = v13[2];
    uint64_t v58 = *(void *)(result + 36);
    uint64_t v59 = *v13;
    uint64_t v60 = *(void *)(*((void *)result + 7) + 8);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + v18 * (*((void *)result + 13) * a2 / v4 + *((void *)result + 15))
                               + 8 * *((void *)result + 14));
    if (v57) {
      float v61 = (int8x8_t *)(v57 + v17 * v10 + v58);
    }
    else {
      float v61 = 0;
    }
    if (v60) {
      uint64_t v62 = v60 + v16 * v10 + v58;
    }
    else {
      uint64_t v62 = 0;
    }
    float v63 = (int8x8_t *)(v59 + v15 * v10 + v58);
    __asm { FCVT            H1, S31 }
    v65.i64[0] = 0x9000900090009000;
    v65.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v117 = 0;
        uint64_t v70 = v62;
        float v69 = v61;
        BOOL v68 = (__int16 *)result;
        float v67 = v63;
      }
      else
      {
        int v66 = 0;
        float v67 = v63;
        BOOL v68 = (__int16 *)result;
        float v69 = v61;
        uint64_t v70 = v62;
        do
        {
          if (v70)
          {
            float16x8_t v161 = (float16x8_t)vld2_s8((const char *)v70);
            v70 += 16;
            *(int8x8_t *)v71.i8 = vzip1_s8(*(int8x8_t *)v161.i8, 0);
            v71.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v161.i8, 0);
            *(int8x8_t *)v72.i8 = vzip1_s8((int8x8_t)v161.u64[1], 0);
            v72.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v161.u64[1], 0);
            float16x8_t v161 = vcvtq_f16_u16(v72);
            float16x8_t v73 = vaddq_f16(v45, vcvtq_f16_u16(v71));
            float16x8_t v161 = vaddq_f16(v45, v161);
            float16x8_t v74 = vmulq_n_f16(v161, v146);
            float16x8_t v75 = vmlaq_n_f16(vmulq_n_f16(v73, v148), v161, v147);
            float16x8_t v76 = vmulq_n_f16(v73, v149);
          }
          else
          {
            float16x8_t v76 = 0uLL;
            float16x8_t v75 = 0uLL;
            float16x8_t v74 = 0uLL;
          }
          int8x8_t v77 = *v67++;
          int8x8_t v78 = v77;
          if (v69)
          {
            int8x8_t v79 = *v69++;
            int8x8_t v80 = v79;
          }
          else
          {
            int8x8_t v80 = 0;
          }
          *(int8x8_t *)v81.i8 = vzip1_s8(v78, 0);
          v81.u64[1] = (unint64_t)vzip2_s8(v78, 0);
          float16x8_t v82 = vsubq_f16(vcvtq_f16_u16(v81), v159);
          uint16x8_t v83 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v74, v82, _H8), (float16x8_t)0), v65));
          uint32x4_t v84 = vmovl_high_u16(v83);
          float16x8_t v85 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v83.i8);
          v85.i16[0] = *(_WORD *)(v34 + 2 * v85.u32[0]);
          v85.i16[1] = *(_WORD *)(v34 + 2 * v85.u32[1]);
          v85.i16[2] = *(_WORD *)(v34 + 2 * v85.u32[2]);
          v85.i16[3] = *(_WORD *)(v34 + 2 * v85.u32[3]);
          v85.i16[4] = *(_WORD *)(v34 + 2 * v84.u32[0]);
          v85.i16[5] = *(_WORD *)(v34 + 2 * v84.u32[1]);
          v85.i16[6] = *(_WORD *)(v34 + 2 * v84.u32[2]);
          v85.i16[7] = *(_WORD *)(v34 + 2 * v84.u32[3]);
          uint16x8_t v86 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v75, v82, _H8), (float16x8_t)0), v65));
          uint32x4_t v87 = vmovl_high_u16(v86);
          float16x8_t v88 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v86.i8);
          v88.i16[0] = *(_WORD *)(v34 + 2 * v88.u32[0]);
          v88.i16[1] = *(_WORD *)(v34 + 2 * v88.u32[1]);
          v88.i16[2] = *(_WORD *)(v34 + 2 * v88.u32[2]);
          v88.i16[3] = *(_WORD *)(v34 + 2 * v88.u32[3]);
          v88.i16[4] = *(_WORD *)(v34 + 2 * v87.u32[0]);
          v88.i16[5] = *(_WORD *)(v34 + 2 * v87.u32[1]);
          v88.i16[6] = *(_WORD *)(v34 + 2 * v87.u32[2]);
          v88.i16[7] = *(_WORD *)(v34 + 2 * v87.u32[3]);
          uint16x8_t v89 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v76, v82, _H8), (float16x8_t)0), v65));
          uint32x4_t v90 = vmovl_high_u16(v89);
          float16x8_t v91 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v89.i8);
          v91.i16[0] = *(_WORD *)(v34 + 2 * v91.u32[0]);
          v91.i16[1] = *(_WORD *)(v34 + 2 * v91.u32[1]);
          v91.i16[2] = *(_WORD *)(v34 + 2 * v91.u32[2]);
          v91.i16[3] = *(_WORD *)(v34 + 2 * v91.u32[3]);
          v91.i16[4] = *(_WORD *)(v34 + 2 * v90.u32[0]);
          v91.i16[5] = *(_WORD *)(v34 + 2 * v90.u32[1]);
          v91.i16[6] = *(_WORD *)(v34 + 2 * v90.u32[2]);
          v91.i16[7] = *(_WORD *)(v34 + 2 * v90.u32[3]);
          float16x8_t v92 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v85, v154), v88, _H10), v91, _H11);
          float16x8_t v93 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v91, _H1), v88, _H0), v85, _H12);
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v85, v157), v88, v156), v91, v155), (float16x8_t)0), v65));
          uint32x4_t v95 = vmovl_high_u16(v94);
          uint32x4_t v96 = vmovl_u16(*(uint16x4_t *)v94.i8);
          LOWORD(_Q2) = *(_WORD *)(v38 + 2 * v96.u32[0]);
          WORD1(_Q2) = *(_WORD *)(v38 + 2 * v96.u32[1]);
          WORD2(_Q2) = *(_WORD *)(v38 + 2 * v96.u32[2]);
          WORD3(_Q2) = *(_WORD *)(v38 + 2 * v96.u32[3]);
          WORD4(_Q2) = *(_WORD *)(v38 + 2 * v95.u32[0]);
          WORD5(_Q2) = *(_WORD *)(v38 + 2 * v95.u32[1]);
          WORD6(_Q2) = *(_WORD *)(v38 + 2 * v95.u32[2]);
          HIWORD(_Q2) = *(_WORD *)(v38 + 2 * v95.u32[3]);
          uint16x8_t v97 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v92, (float16x8_t)0), v65));
          uint32x4_t v98 = vmovl_high_u16(v97);
          uint32x4_t v99 = vmovl_u16(*(uint16x4_t *)v97.i8);
          LOWORD(v100) = *(_WORD *)(v38 + 2 * v99.u32[0]);
          WORD1(v100) = *(_WORD *)(v38 + 2 * v99.u32[1]);
          WORD2(v100) = *(_WORD *)(v38 + 2 * v99.u32[2]);
          WORD3(v100) = *(_WORD *)(v38 + 2 * v99.u32[3]);
          WORD4(v100) = *(_WORD *)(v38 + 2 * v98.u32[0]);
          WORD5(v100) = *(_WORD *)(v38 + 2 * v98.u32[1]);
          WORD6(v100) = *(_WORD *)(v38 + 2 * v98.u32[2]);
          HIWORD(v100) = *(_WORD *)(v38 + 2 * v98.u32[3]);
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v93, (float16x8_t)0), v65));
          uint32x4_t v102 = vmovl_high_u16(v101);
          *(void *)&long long v103 = v102.u32[2];
          *((void *)&v103 + 1) = v102.u32[3];
          long long v104 = v103;
          *(void *)&long long v103 = v102.u32[0];
          *((void *)&v103 + 1) = v102.u32[1];
          long long v105 = v103;
          uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v101.i8);
          *(void *)&long long v103 = v106.u32[2];
          *((void *)&v103 + 1) = v106.u32[3];
          long long v107 = v103;
          LOWORD(v108) = *(_WORD *)(v38 + 2 * v106.u32[0]);
          HIWORD(v108) = *(_WORD *)(v38 + 2 * v106.u32[1]);
          if (v69)
          {
            *(int8x8_t *)v115.i8 = vzip1_s8(v80, 0);
            v115.u64[1] = (unint64_t)vzip2_s8(v80, 0);
            float16x8_t v116 = vmulq_f16(vcvtq_f16_u16(v115), (float16x8_t)vdupq_n_s16(0x1C04u));
          }
          else
          {
            v116.i64[0] = 0x3C003C003C003C00;
            v116.i64[1] = 0x3C003C003C003C00;
          }
          __int16 v114 = *(_WORD *)(v38 + 2 * *((void *)&v104 + 1));
          __int16 v113 = *(_WORD *)(v38 + 2 * v104);
          __int16 v112 = *(_WORD *)(v38 + 2 * *((void *)&v105 + 1));
          __int16 v111 = *(_WORD *)(v38 + 2 * v105);
          __int16 v110 = *(_WORD *)(v38 + 2 * *((void *)&v107 + 1));
          __int16 v109 = *(_WORD *)(v38 + 2 * v107);
          vst4q_s16(v68, *(int16x8x4_t *)&_Q2);
          v68 += 32;
          v66 += 8;
        }
        while (v66 < (int)v8 - 7);
        unint64_t v117 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v117;
      unint64_t v118 = v8 - v117;
      if (v118 != 0 && _CF)
      {
        do
        {
          if (v70)
          {
            LOBYTE(_Q2) = *(unsigned char *)v70;
            *(float *)&unsigned int v119 = (float)_Q2;
            float v120 = *(float *)&v119 - v36;
            LOBYTE(v119) = *(unsigned char *)(v70 + 1);
            float v121 = (float)v119 - v36;
            v70 += 2;
            *(float *)&_Q2 = v153 * v121;
            float v122 = (float)(v151 * v121) + (float)(v120 * v152);
            float v123 = v150 * v120;
          }
          else
          {
            float v123 = 0.0;
            float v122 = 0.0;
            LODWORD(_Q2) = 0;
          }
          unsigned int v124 = v67->u8[0];
          float v67 = (int8x8_t *)((char *)v67 + 1);
          float v125 = v158 * (float)((float)v124 - v160);
          float v126 = *(float *)&_Q2 + v125;
          BOOL v127 = (float)(*(float *)&_Q2 + v125) <= 8191.0;
          float v128 = 8191.0;
          if (v127)
          {
            float v128 = v126;
            if (v126 < 0.0) {
              float v128 = 0.0;
            }
          }
          float v129 = v122 + v125;
          BOOL v127 = (float)(v122 + v125) <= 8191.0;
          float v130 = 8191.0;
          if (v127)
          {
            float v130 = v129;
            if (v129 < 0.0) {
              float v130 = 0.0;
            }
          }
          float v131 = v123 + v125;
          float v132 = 8191.0;
          if (v131 <= 8191.0)
          {
            float v132 = v131;
            if (v131 < 0.0) {
              float v132 = 0.0;
            }
          }
          if (v69)
          {
            unsigned int v134 = v69->u8[0];
            float v69 = (int8x8_t *)((char *)v69 + 1);
            unsigned int v133 = v134;
          }
          else
          {
            unsigned int v133 = 0;
          }
          _H2 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H4 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H3 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          float v141 = (float)((float)(v47 * _S4) + (float)(_S2 * v46)) + (float)(_S3 * v48);
          float v142 = (float)((float)(v50 * _S4) + (float)(_S2 * v49)) + (float)(_S3 * v52);
          float v143 = (float)((float)(v55 * _S4) + (float)(_S2 * _S29)) + (float)(_S3 * _S31);
          LOWORD(_S4) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          *(float *)&_Q2 = fminf(fmaxf(v143, 0.0), 8191.0);
          LOWORD(_Q2) = *(_WORD *)(v38 + 2 * llroundf(*(float *)&_Q2));
          _S5 = (float)v133 * 0.0039216;
          __asm { FCVT            H5, S5 }
          *BOOL v68 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          v68[1] = LOWORD(_S4);
          v68[2] = _Q2;
          LOWORD(_Q2) = COERCE_UNSIGNED_INT(1.0);
          if (v69) {
            *(short float *)&_Q2 = _H5;
          }
          v68[3] = _Q2;
          v68 += 4;
          --v118;
        }
        while (v118);
      }
      float v63 = (int8x8_t *)((char *)v63 + v15);
      v62 += v16;
      float v61 = (int8x8_t *)((char *)v61 + v17);
      result += v18;
      ++v7;
    }
    while (v7 != v33);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    float v38 = *(float *)(v14 + 104);
    uint64_t v39 = v14 + 164;
    uint64_t v40 = v14 + 16548;
    uint64_t v41 = *(void *)(result + 36);
    uint64_t v42 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
        + 8 * *((void *)result + 14);
    uint64_t v43 = v15[2];
    if (v43) {
      uint64_t result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    }
    else {
      uint64_t result = 0;
    }
    float v46 = v15;
    uint64_t v45 = *v15;
    uint64_t v44 = v46[1];
    if (v44) {
      float v47 = (unsigned char *)(v44 + v18 * v12 + v41);
    }
    else {
      float v47 = 0;
    }
    float v48 = (unsigned __int8 *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        uint64_t v49 = v11;
        float v50 = v48;
        unsigned int v51 = (_WORD *)v42;
        float v52 = result;
        uint64_t v53 = v47;
        do
        {
          if (v53)
          {
            LOBYTE(v5) = *v53;
            *(float *)&unsigned int v54 = (float)LODWORD(v5);
            float v55 = *(float *)&v54 - v24;
            LOBYTE(v54) = v53[1];
            float v56 = (float)v54 - v24;
            v53 += 2;
            float v57 = v26 * v56;
            float v58 = (float)(v28 * v56) + (float)(v55 * v27);
            float v59 = v29 * v55;
          }
          else
          {
            float v59 = 0.0;
            float v58 = 0.0;
            float v57 = 0.0;
          }
          unsigned int v60 = *v50++;
          float v61 = v25 * (float)((float)v60 - v23);
          float v62 = v57 + v61;
          BOOL v63 = (float)(v57 + v61) <= 8191.0;
          float v64 = 8191.0;
          if (v63)
          {
            float v64 = v62;
            if (v62 < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = v58 + v61;
          BOOL v63 = (float)(v58 + v61) <= 8191.0;
          float v66 = 8191.0;
          if (v63)
          {
            float v66 = v65;
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v59 + v61;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          if (v52)
          {
            unsigned int v70 = *v52++;
            unsigned int v69 = v70;
          }
          else
          {
            unsigned int v69 = 0;
          }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H28
            FCVT            S30, H30
          }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v81 = (float)((float)(v31 * _S30) + (float)(_S28 * v30)) + (float)(_S29 * v32);
          float v82 = (float)((float)(v34 * _S30) + (float)(_S28 * v33)) + (float)(_S29 * v35);
          float v83 = (float)((float)(v37 * _S30) + (float)(_S28 * v36)) + (float)(_S29 * v38);
          LOWORD(_S29) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          float v5 = fminf(fmaxf(v83, 0.0), 8191.0);
          LOWORD(v5) = *(_WORD *)(v40 + 2 * llroundf(v5));
          _S31 = (float)v69 * 0.0039216;
          __asm { FCVT            H31, S31 }
          *unsigned int v51 = LOWORD(_S29);
          v51[1] = LOWORD(_S30);
          v51[2] = LOWORD(v5);
          if (v52) {
            *(short float *)&float v5 = _H31;
          }
          else {
            LOWORD(v5) = COERCE_UNSIGNED_INT(1.0);
          }
          v51[3] = LOWORD(v5);
          v51 += 4;
          --v49;
        }
        while (v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_RGhA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44);
    uint64_t v13 = v8 + v12;
    uint64_t v14 = v9 + v12;
    uint64_t v15 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v18 = *v16;
    uint64_t v19 = v16[1];
    uint64_t v20 = v16[2];
    uint64_t v21 = **((void **)result + 17);
    unsigned int v22 = *(unsigned __int16 *)(v15 + 140);
    unsigned int v23 = *(unsigned __int16 *)(v15 + 142);
    uint64_t v24 = v14 - v13;
    float v25 = 1.0 / (float)*(unsigned int *)(v15 + 128);
    float v26 = (float)v23;
    _S2 = v25 * *(float *)v15;
    _S3 = v25 * *(float *)(v15 + 8);
    _S4 = v25 * *(float *)(v15 + 16);
    _S5 = v25 * *(float *)(v15 + 20);
    _S6 = v25 * *(float *)(v15 + 28);
    __asm { FCVT            H7, S2 }
    *(short float *)v2.i16 = (short float)v22;
    float16x8_t v37 = (float16x8_t)vdupq_lane_s16(v2, 0);
    *(short float *)v3.i16 = -(short float)v23;
    float16x8_t v38 = (float16x8_t)vdupq_lane_s16(v3, 0);
    __asm
    {
      FCVT            H8, S6
      FCVT            H9, S4
      FCVT            H10, S5
      FCVT            H11, S3
    }
    uint64_t v43 = v17[2];
    uint64_t v44 = *(void *)(result + 36);
    uint64_t v46 = *v17;
    uint64_t v45 = v17[1];
    uint64_t v47 = v45 + v19 * v13 + v44;
    uint64_t v48 = **((void **)result + 16)
        + v21 * (*((void *)result + 13) * a2 / v7 + *((void *)result + 15))
        + 8 * *((void *)result + 14);
    if (v43) {
      uint64_t v49 = (int8x8_t *)(v43 + v20 * v13 + v44);
    }
    else {
      uint64_t v49 = 0;
    }
    if (!v45) {
      uint64_t v47 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v46 + v18 * v13 + v44);
    float16x8_t v50 = (float16x8_t)vdupq_n_s16(0x1C04u);
    while (1)
    {
      if ((int)v11 < 8)
      {
        unint64_t v72 = 0;
        uint64_t v55 = v47;
        unsigned int v54 = v49;
        uint64_t v53 = (__int16 *)v48;
        float v52 = (int8x8_t *)result;
      }
      else
      {
        int v51 = 0;
        float v52 = (int8x8_t *)result;
        uint64_t v53 = (__int16 *)v48;
        unsigned int v54 = v49;
        uint64_t v55 = v47;
        do
        {
          if (v55)
          {
            int8x8x2_t v84 = vld2_s8((const char *)v55);
            v55 += 16;
            *(int8x8_t *)v56.i8 = vzip1_s8(v84.val[0], 0);
            v56.u64[1] = (unint64_t)vzip2_s8(v84.val[0], 0);
            *(int8x8_t *)v57.i8 = vzip1_s8(v84.val[1], 0);
            v57.u64[1] = (unint64_t)vzip2_s8(v84.val[1], 0);
            float16x8_t v58 = vaddq_f16(v38, vcvtq_f16_u16(v56));
            float16x8_t v59 = vaddq_f16(v38, vcvtq_f16_u16(v57));
            float16x8_t v60 = vmulq_n_f16(v59, _H11);
            float16x8_t v61 = vmlaq_n_f16(vmulq_n_f16(v58, _H9), v59, _H10);
            float16x8_t v62 = vmulq_n_f16(v58, _H8);
          }
          else
          {
            float16x8_t v62 = 0uLL;
            float16x8_t v61 = 0u;
            float16x8_t v60 = 0u;
          }
          int8x8_t v63 = *v52++;
          int8x8_t v64 = v63;
          if (v54)
          {
            int8x8_t v65 = *v54++;
            *(int8x8_t *)v66.i8 = vzip1_s8(v65, 0);
            v66.u64[1] = (unint64_t)vzip2_s8(v65, 0);
            float16x8_t v67 = vmulq_f16(vcvtq_f16_u16(v66), v50);
          }
          else
          {
            v67.i64[0] = 0x3C003C003C003C00;
            v67.i64[1] = 0x3C003C003C003C00;
          }
          *(int8x8_t *)v68.i8 = vzip1_s8(v64, 0);
          v68.u64[1] = (unint64_t)vzip2_s8(v64, 0);
          float16x8_t v69 = vsubq_f16(vcvtq_f16_u16(v68), v37);
          _Q21 = vmlaq_n_f16(v60, v69, _H7);
          _Q22 = vmlaq_n_f16(v61, v69, _H7);
          float16x8_t v70 = vmlaq_n_f16(v62, v69, _H7);
          float16x8_t v71 = v67;
          vst4q_s16(v53, *(int16x8x4_t *)_Q21.i8);
          v53 += 32;
          v51 += 8;
        }
        while (v51 < (int)v11 - 7);
        unint64_t v72 = v11 & 0xFFFFFFF8;
      }
      _CF = v11 >= v72;
      unint64_t v73 = v11 - v72;
      if (v73 != 0 && _CF) {
        break;
      }
LABEL_30:
      result += v18;
      v47 += v19;
      uint64_t v49 = (int8x8_t *)((char *)v49 + v20);
      v48 += v21;
      if (++v10 == v24) {
        return result;
      }
    }
    while (1)
    {
      if (v55)
      {
        _Q21.i8[0] = *(unsigned char *)v55;
        float v74 = (float)_Q21.u32[0] - v26;
        _Q22.i8[0] = *(unsigned char *)(v55 + 1);
        float v75 = (float)_Q22.u32[0] - v26;
        v55 += 2;
        float v76 = _S3 * v75;
        *(float *)_Q22.i32 = (float)(_S5 * v75) + (float)(v74 * _S4);
        *(float *)_Q21.i32 = _S6 * v74;
        if (!v54) {
          goto LABEL_25;
        }
      }
      else
      {
        _Q21.i32[0] = 0;
        _Q22.i32[0] = 0;
        float v76 = 0.0;
        if (!v54)
        {
LABEL_25:
          unsigned int v77 = 0;
          goto LABEL_26;
        }
      }
      unsigned int v78 = v54->u8[0];
      unsigned int v54 = (int8x8_t *)((char *)v54 + 1);
      unsigned int v77 = v78;
LABEL_26:
      unsigned int v79 = v52->u8[0];
      float v52 = (int8x8_t *)((char *)v52 + 1);
      float v80 = _S2 * (float)((float)v79 - (float)v22);
      _S23 = v76 + v80;
      *(float *)_Q22.i32 = *(float *)_Q22.i32 + v80;
      *(float *)_Q21.i32 = *(float *)_Q21.i32 + v80;
      _S24 = (float)v77 * 0.0039216;
      __asm
      {
        FCVT            H24, S24
        FCVT            H23, S23
      }
      *uint64_t v53 = LOWORD(_S23);
      __asm { FCVT            H22, S22 }
      v53[1] = _Q22.i16[0];
      __asm { FCVT            H21, S21 }
      v53[2] = _Q21.i16[0];
      if (v54) {
        *(short float *)_Q21.i16 = _H24;
      }
      else {
        _Q21.i16[0] = COERCE_UNSIGNED_INT(1.0);
      }
      v53[3] = _Q21.i16[0];
      v53 += 4;
      if (!--v73) {
        goto LABEL_30;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_RGhA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (v7 != v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(result + 20);
    unint64_t v10 = v6 + *(void *)(result + 44);
    unint64_t v11 = v7 - v6;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v14 = (uint64_t *)*((void *)result + 7);
    int64x2_t v13 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v13;
    uint64_t v16 = v13[1];
    uint64_t v17 = v13[2];
    uint64_t v18 = **((void **)result + 17);
    *(float *)&unsigned int v19 = (float)*(unsigned int *)(v12 + 128);
    unsigned int v20 = 1.0;
    float v21 = 1.0 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    float v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    float v23 = (float)v20;
    float v24 = v21 * *(float *)v12;
    float v25 = v21 * *(float *)(v12 + 8);
    float v26 = v21 * *(float *)(v12 + 16);
    float v27 = v21 * *(float *)(v12 + 20);
    float v28 = v21 * *(float *)(v12 + 28);
    uint64_t v29 = *((void *)result + 14);
    float v30 = (void *)*((void *)result + 16);
    unint64_t v31 = *((void *)result + 13) * a2 / v5 + *((void *)result + 15);
    uint64_t v32 = *(void *)(result + 36);
    uint64_t v33 = *v30 + v31 * v18 + 8 * v29;
    uint64_t v34 = v14[2];
    if (v34) {
      float v35 = (unsigned __int8 *)(v34 + v17 * v10 + v32);
    }
    else {
      float v35 = 0;
    }
    uint64_t v37 = *v14;
    uint64_t v36 = v14[1];
    float16x8_t v38 = (unsigned char *)(v36 + v16 * v10 + v32);
    if (!v36) {
      float16x8_t v38 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v37 + v15 * v10 + v32);
    while (!v9)
    {
LABEL_19:
      result += v15;
      v38 += v16;
      v35 += v17;
      v33 += v18;
      if (++v8 == v11) {
        return result;
      }
    }
    uint64_t v39 = v9;
    uint64_t v40 = result;
    uint64_t v41 = (_WORD *)v33;
    uint64_t v42 = v35;
    uint64_t v43 = v38;
    while (1)
    {
      if (v43)
      {
        LOBYTE(_S17) = *v43;
        float v44 = (float)LODWORD(_S17) - v23;
        LOBYTE(_S18) = v43[1];
        float v45 = (float)LODWORD(_S18) - v23;
        v43 += 2;
        float v46 = v25 * v45;
        float v47 = (float)(v27 * v45) + (float)(v44 * v26);
        float v48 = v28 * v44;
        if (!v42) {
          goto LABEL_14;
        }
      }
      else
      {
        float v48 = 0.0;
        float v47 = 0.0;
        float v46 = 0.0;
        if (!v42)
        {
LABEL_14:
          unsigned int v49 = 0;
          goto LABEL_15;
        }
      }
      unsigned int v50 = *v42++;
      unsigned int v49 = v50;
LABEL_15:
      unsigned int v51 = *v40++;
      float v52 = v24 * (float)((float)v51 - v22);
      _S19 = v46 + v52;
      _S18 = v47 + v52;
      _S17 = v48 + v52;
      _S20 = (float)v49 * 0.0039216;
      __asm
      {
        FCVT            H20, S20
        FCVT            H19, S19
      }
      *uint64_t v41 = LOWORD(_S19);
      __asm { FCVT            H18, S18 }
      v41[1] = LOWORD(_S18);
      __asm { FCVT            H17, S17 }
      v41[2] = LOWORD(_S17);
      if (v42) {
        *(short float *)&_S17 = _H20;
      }
      else {
        LOWORD(_S17) = COERCE_UNSIGNED_INT(1.0);
      }
      v41[3] = LOWORD(_S17);
      v41 += 4;
      if (!--v39) {
        goto LABEL_19;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(result + 20);
    uint64_t v9 = *(void *)(result + 44);
    uint64_t v10 = v5 + v9;
    uint64_t v11 = v6 + v9;
    uint64_t v12 = *((void *)result + 19);
    int64x2_t v13 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = **((void **)result + 17);
    unsigned int v19 = *(unsigned __int16 *)(v12 + 140);
    unsigned int v20 = *(unsigned __int16 *)(v12 + 142);
    _D6.i32[0] = *(_DWORD *)(v12 + 72);
    _S7 = *(_DWORD *)(v12 + 76);
    _S16 = *(_DWORD *)(v12 + 80);
    _S23 = *(_DWORD *)(v12 + 84);
    _S24 = *(_DWORD *)(v12 + 88);
    _S25 = *(float *)(v12 + 92);
    _S26 = *(_DWORD *)(v12 + 104);
    uint64_t v178 = v11 - v10;
    uint64_t v28 = v12 + 16548;
    float v29 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    float v197 = (float)v19;
    float v30 = (float)v20;
    *(float *)&_D0 = v29 * *(float *)v12;
    _S1 = v29 * *(float *)(v12 + 8);
    _S2 = v29 * *(float *)(v12 + 16);
    _S3 = v29 * *(float *)(v12 + 20);
    _S4 = v29 * *(float *)(v12 + 28);
    uint64_t v35 = v12 + 164;
    uint64_t v36 = v12 + 32932;
    float v196 = *(float *)&_D0;
    __asm { FCVT            H8, S0 }
    *(short float *)&_D0 = (short float)v19;
    int16x8_t v42 = vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    *(short float *)&_D0 = -(short float)v20;
    float16x8_t v43 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    float v183 = _S4;
    float v184 = _S3;
    __asm { FCVT            H0, S4 }
    short float v182 = _H0;
    float v185 = _S2;
    float v186 = _S1;
    __asm { FCVT            H0, S2 }
    short float v181 = _H0;
    __asm { FCVT            H0, S3 }
    short float v180 = _H0;
    __asm { FCVT            H0, S1 }
    short float v179 = _H0;
    float v201 = *(float *)(v12 + 108);
    __asm { FCVT            H0, S17 }
    short float v194 = _H0;
    float16x8_t v195 = (float16x8_t)v42;
    float v200 = *(float *)(v12 + 112);
    __asm { FCVT            H0, S18 }
    short float v193 = _H0;
    float v199 = *(float *)(v12 + 116);
    __asm { FCVT            H0, S20 }
    short float v192 = _H0;
    float v198 = *(float *)(v12 + 120);
    __asm { FCVT            H0, S22 }
    short float v191 = _H0;
    float v202 = *(float *)_D6.i32;
    __asm { FCVT            H0, S6 }
    short float v190 = _H0;
    uint64_t v53 = v13[2];
    uint64_t v54 = *(void *)(result + 36);
    unint64_t v55 = *((void *)result + 13) * a2 / v4 + *((void *)result + 15);
    uint64_t v57 = *v13;
    uint64_t v56 = *(void *)(*((void *)result + 7) + 8);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16) + v18 * v55 + 16 * *((void *)result + 14));
    if (v53) {
      float16x8_t v58 = (int8x8_t *)(v53 + v17 * v10 + v54);
    }
    else {
      float16x8_t v58 = 0;
    }
    if (v56) {
      uint64_t v59 = v56 + v16 * v10 + v54;
    }
    else {
      uint64_t v59 = 0;
    }
    float16x8_t v60 = (int8x8_t *)(v57 + v15 * v10 + v54);
    float v61 = *(float *)(v12 + 76);
    __asm { FCVT            H0, S7 }
    short float v189 = _H0;
    float v63 = *(float *)(v12 + 80);
    __asm { FCVT            H0, S16 }
    short float v188 = _H0;
    float v65 = *(float *)(v12 + 84);
    __asm { FCVT            H0, S23 }
    short float v187 = _H0;
    float v67 = *(float *)(v12 + 88);
    __asm
    {
      FCVT            H1, S24
      FCVT            H2, S25
    }
    _S30 = *(float *)(v12 + 96);
    __asm { FCVT            H3, S3 }
    _S0 = *(float *)(v12 + 100);
    __asm { FCVT            H4, S4 }
    float v74 = *(float *)(v12 + 104);
    __asm { FCVT            H5, S26 }
    v76.i64[0] = 0x9000900090009000;
    v76.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v139 = 0;
        uint64_t v81 = v59;
        float v80 = v58;
        float v137 = (float *)result;
        unsigned int v78 = v60;
      }
      else
      {
        int v77 = 0;
        unsigned int v78 = v60;
        unsigned int v79 = (float *)result;
        float v80 = v58;
        uint64_t v81 = v59;
        do
        {
          if (v81)
          {
            float16x8_t v203 = (float16x8_t)vld2_s8((const char *)v81);
            v81 += 16;
            *(int8x8_t *)v82.i8 = vzip1_s8(*(int8x8_t *)v203.i8, 0);
            v82.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v203.i8, 0);
            *(int8x8_t *)v83.i8 = vzip1_s8((int8x8_t)v203.u64[1], 0);
            v83.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v203.u64[1], 0);
            float16x8_t v84 = vaddq_f16(v43, vcvtq_f16_u16(v82));
            float16x8_t v203 = vaddq_f16(v43, vcvtq_f16_u16(v83));
            float16x8_t v85 = vmulq_n_f16(v203, v179);
            float16x8_t v86 = vmlaq_n_f16(vmulq_n_f16(v84, v181), v203, v180);
            float16x8_t v87 = vmulq_n_f16(v84, v182);
          }
          else
          {
            float16x8_t v87 = 0uLL;
            float16x8_t v86 = 0uLL;
            float16x8_t v85 = 0uLL;
          }
          int8x8_t v88 = *v78++;
          int8x8_t v89 = v88;
          if (v80)
          {
            int8x8_t v90 = *v80++;
            int8x8_t v91 = v90;
          }
          else
          {
            int8x8_t v91 = 0;
          }
          *(int8x8_t *)v92.i8 = vzip1_s8(v89, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v89, 0);
          float16x8_t v93 = vsubq_f16(vcvtq_f16_u16(v92), v195);
          float16x8_t v94 = vmlaq_n_f16(v86, v93, _H8);
          float16x8_t v95 = vmlaq_n_f16(v87, v93, _H8);
          uint16x8_t v96 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v85, v93, _H8), (float16x8_t)0), v76));
          float16x8_t v97 = (float16x8_t)vmovl_high_u16(v96);
          *(void *)&long long v98 = v97.u32[2];
          *((void *)&v98 + 1) = v97.u32[3];
          long long v99 = v98;
          *(void *)&long long v98 = v97.u32[0];
          *((void *)&v98 + 1) = v97.u32[1];
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v96.i8);
          v97.i16[0] = *(_WORD *)(v35 + 2 * v100.u32[0]);
          v97.i16[1] = *(_WORD *)(v35 + 2 * v100.u32[1]);
          v97.i16[2] = *(_WORD *)(v35 + 2 * v100.u32[2]);
          v97.i16[3] = *(_WORD *)(v35 + 2 * v100.u32[3]);
          v97.i16[4] = *(_WORD *)(v35 + 2 * v98);
          v97.i16[5] = *(_WORD *)(v35 + 2 * *((void *)&v98 + 1));
          v97.i16[6] = *(_WORD *)(v35 + 2 * v99);
          v97.i16[7] = *(_WORD *)(v35 + 2 * *((void *)&v99 + 1));
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v94, (float16x8_t)0), v76));
          uint32x4_t v102 = vmovl_high_u16(v101);
          float16x8_t v103 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v101.i8);
          v103.i16[0] = *(_WORD *)(v35 + 2 * v103.u32[0]);
          v103.i16[1] = *(_WORD *)(v35 + 2 * v103.u32[1]);
          v103.i16[2] = *(_WORD *)(v35 + 2 * v103.u32[2]);
          v103.i16[3] = *(_WORD *)(v35 + 2 * v103.u32[3]);
          v103.i16[4] = *(_WORD *)(v35 + 2 * v102.u32[0]);
          v103.i16[5] = *(_WORD *)(v35 + 2 * v102.u32[1]);
          v103.i16[6] = *(_WORD *)(v35 + 2 * v102.u32[2]);
          v103.i16[7] = *(_WORD *)(v35 + 2 * v102.u32[3]);
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v95, (float16x8_t)0), v76));
          uint32x4_t v105 = vmovl_high_u16(v104);
          float16x8_t v106 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v104.i8);
          v106.i16[0] = *(_WORD *)(v35 + 2 * v106.u32[0]);
          v106.i16[1] = *(_WORD *)(v35 + 2 * v106.u32[1]);
          v106.i16[2] = *(_WORD *)(v35 + 2 * v106.u32[2]);
          v106.i16[3] = *(_WORD *)(v35 + 2 * v106.u32[3]);
          v106.i16[4] = *(_WORD *)(v35 + 2 * v105.u32[0]);
          v106.i16[5] = *(_WORD *)(v35 + 2 * v105.u32[1]);
          v106.i16[6] = *(_WORD *)(v35 + 2 * v105.u32[2]);
          v106.i16[7] = *(_WORD *)(v35 + 2 * v105.u32[3]);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v97, v194), v103, v193), v106, v192), vmaxq_f16(vmaxq_f16(v97, v103), v106), v191), (float16x8_t)0), v76));
          uint32x4_t v108 = vmovl_high_u16(v107);
          float16x8_t v109 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v107.i8);
          v109.i16[0] = *(_WORD *)(v28 + 2 * v109.u32[0]);
          v109.i16[1] = *(_WORD *)(v28 + 2 * v109.u32[1]);
          v109.i16[2] = *(_WORD *)(v28 + 2 * v109.u32[2]);
          v109.i16[3] = *(_WORD *)(v28 + 2 * v109.u32[3]);
          v109.i16[4] = *(_WORD *)(v28 + 2 * v108.u32[0]);
          v109.i16[5] = *(_WORD *)(v28 + 2 * v108.u32[1]);
          v109.i16[6] = *(_WORD *)(v28 + 2 * v108.u32[2]);
          v109.i16[7] = *(_WORD *)(v28 + 2 * v108.u32[3]);
          float16x8_t v110 = vmulq_f16(v97, v109);
          float16x8_t v111 = vmulq_f16(v103, v109);
          float16x8_t v112 = vmulq_f16(v106, v109);
          float16x8_t v113 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v110, v187), v111, _H1), v112, _H2);
          float16x8_t v114 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v112, _H5), v111, _H4), v110, _H3);
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v110, v190), v111, v189), v112, v188), (float16x8_t)0), v76));
          uint32x4_t v116 = vmovl_high_u16(v115);
          uint32x4_t v117 = vmovl_u16(*(uint16x4_t *)v115.i8);
          v118.i16[0] = *(_WORD *)(v36 + 2 * v117.u32[0]);
          v118.i16[1] = *(_WORD *)(v36 + 2 * v117.u32[1]);
          v118.i16[2] = *(_WORD *)(v36 + 2 * v117.u32[2]);
          v118.i16[3] = *(_WORD *)(v36 + 2 * v117.u32[3]);
          v118.i16[4] = *(_WORD *)(v36 + 2 * v116.u32[0]);
          v118.i16[5] = *(_WORD *)(v36 + 2 * v116.u32[1]);
          v118.i16[6] = *(_WORD *)(v36 + 2 * v116.u32[2]);
          v118.i16[7] = *(_WORD *)(v36 + 2 * v116.u32[3]);
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v76));
          uint32x4_t v120 = vmovl_high_u16(v119);
          uint32x4_t v121 = vmovl_u16(*(uint16x4_t *)v119.i8);
          v122.i16[0] = *(_WORD *)(v36 + 2 * v121.u32[0]);
          v122.i16[1] = *(_WORD *)(v36 + 2 * v121.u32[1]);
          v122.i16[2] = *(_WORD *)(v36 + 2 * v121.u32[2]);
          v122.i16[3] = *(_WORD *)(v36 + 2 * v121.u32[3]);
          v122.i16[4] = *(_WORD *)(v36 + 2 * v120.u32[0]);
          v122.i16[5] = *(_WORD *)(v36 + 2 * v120.u32[1]);
          v122.i16[6] = *(_WORD *)(v36 + 2 * v120.u32[2]);
          v122.i16[7] = *(_WORD *)(v36 + 2 * v120.u32[3]);
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v76));
          uint32x4_t v124 = vmovl_high_u16(v123);
          int8x16_t v126 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v123.i8);
          v126.i16[0] = *(_WORD *)(v36 + 2 * v126.u32[0]);
          float v125 = (__int16 *)(v36 + 2 * v124.u32[3]);
          v126.i16[1] = *(_WORD *)(v36 + 2 * v126.u32[1]);
          v126.i16[2] = *(_WORD *)(v36 + 2 * v126.u32[2]);
          v126.i16[3] = *(_WORD *)(v36 + 2 * v126.u32[3]);
          v126.i16[4] = *(_WORD *)(v36 + 2 * v124.u32[0]);
          v126.i16[5] = *(_WORD *)(v36 + 2 * v124.u32[1]);
          v126.i16[6] = *(_WORD *)(v36 + 2 * v124.u32[2]);
          if (v80)
          {
            *(int8x8_t *)v127.i8 = vzip1_s8(v91, 0);
            v127.u64[1] = (unint64_t)vzip2_s8(v91, 0);
            int8x16_t v128 = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v127), (float16x8_t)vdupq_n_s16(0x1C04u));
            _Q12 = vcvtq_f32_f16(*(float16x4_t *)v128.i8);
            float32x4_t v130 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL));
          }
          else
          {
            __asm { FMOV            V12.4S, #1.0 }
            float32x4_t v130 = _Q12;
          }
          float32x4_t v131 = vcvtq_f32_f16(*(float16x4_t *)v118.i8);
          float32x4_t v132 = vcvtq_f32_f16(*(float16x4_t *)v122.i8);
          v126.i16[7] = *v125;
          float32x4_t v133 = vcvtq_f32_f16(*(float16x4_t *)v126.i8);
          float32x4_t v134 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
          float32x4_t v135 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL));
          _D6 = (float16x4_t)vextq_s8(v126, v126, 8uLL).u64[0];
          float32x4_t v136 = vcvtq_f32_f16(_D6);
          float v137 = v79 + 32;
          vst4q_f32(v79, *(float32x4x4_t *)(&_Q12 - 3));
          float v138 = v79 + 16;
          vst4q_f32(v138, *(float32x4x4_t *)(&v130 - 3));
          v77 += 8;
          unsigned int v79 = v137;
        }
        while (v77 < (int)v8 - 7);
        unint64_t v139 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v139;
      unint64_t v140 = v8 - v139;
      if (v140 != 0 && _CF)
      {
        do
        {
          if (v81)
          {
            _D6.i8[0] = *(unsigned char *)v81;
            *(float *)&unsigned int v141 = (float)_D6.u32[0];
            float v142 = *(float *)&v141 - v30;
            LOBYTE(v141) = *(unsigned char *)(v81 + 1);
            float v143 = (float)v141 - v30;
            v81 += 2;
            *(float *)_D6.i32 = v186 * v143;
            float v144 = (float)(v184 * v143) + (float)(v142 * v185);
            float v145 = v183 * v142;
          }
          else
          {
            float v145 = 0.0;
            float v144 = 0.0;
            _D6.i32[0] = 0;
          }
          unsigned int v146 = v78->u8[0];
          unsigned int v78 = (int8x8_t *)((char *)v78 + 1);
          float v147 = v196 * (float)((float)v146 - v197);
          float v148 = *(float *)_D6.i32 + v147;
          BOOL v149 = (float)(*(float *)_D6.i32 + v147) <= 8191.0;
          float v150 = 8191.0;
          if (v149)
          {
            float v150 = v148;
            if (v148 < 0.0) {
              float v150 = 0.0;
            }
          }
          float v151 = v144 + v147;
          float v152 = 8191.0;
          if (v151 <= 8191.0)
          {
            float v152 = v151;
            if (v151 < 0.0) {
              float v152 = 0.0;
            }
          }
          float v153 = v145 + v147;
          BOOL v149 = (float)(v145 + v147) <= 8191.0;
          float v154 = 8191.0;
          if (v149)
          {
            float v154 = v153;
            if (v153 < 0.0) {
              float v154 = 0.0;
            }
          }
          if (v80)
          {
            unsigned int v156 = v80->u8[0];
            float v80 = (int8x8_t *)((char *)v80 + 1);
            unsigned int v155 = v156;
          }
          else
          {
            unsigned int v155 = 0;
          }
          _H16 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          _H26 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          unsigned int v160 = llroundf(fminf(fmaxf(v154, 0.0), 8191.0));
          __asm { FCVT            S7, H26 }
          _H26 = *(_WORD *)(v35 + 2 * v160);
          __asm { FCVT            S26, H26 }
          float v164 = (float)((float)((float)(v200 * _S7) + (float)(v201 * _S16)) + (float)(v199 * _S26))
               + (float)(v198 * fmaxf(_S16, fmaxf(_S7, _S26)));
          float v165 = 8191.0;
          if (v164 <= 8191.0)
          {
            float v165 = v164;
            if (v164 < 0.0) {
              float v165 = 0.0;
            }
          }
          _H31 = *(_WORD *)(v28 + 2 * llroundf(v165));
          __asm { FCVT            S31, H31 }
          _S16 = _S16 * _S31;
          float v169 = _S7 * _S31;
          _S26 = _S26 * _S31;
          float v171 = (float)((float)(v61 * v169) + (float)(_S16 * v202)) + (float)(_S26 * v63);
          float v172 = (float)((float)(v67 * v169) + (float)(_S16 * v65)) + (float)(_S26 * _S25);
          float v173 = (float)((float)(_S0 * v169) + (float)(_S16 * _S30)) + (float)(_S26 * v74);
          LOWORD(_S16) = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          __asm { FCVT            S16, H16 }
          LOWORD(_S26) = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H6 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          float v177 = (float)v155 * 0.0039216;
          *(_DWORD *)float v137 = _S16;
          *((_DWORD *)v137 + 1) = _S26;
          if (!v80) {
            float v177 = 1.0;
          }
          v137[2] = *(float *)_D6.i32;
          v137[3] = v177;
          v137 += 4;
          --v140;
        }
        while (v140);
      }
      float16x8_t v60 = (int8x8_t *)((char *)v60 + v15);
      v59 += v16;
      float16x8_t v58 = (int8x8_t *)((char *)v58 + v17);
      result += v18;
      ++v7;
    }
    while (v7 != v178);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    uint64_t v38 = v14 + 164;
    uint64_t v39 = v14 + 16548;
    uint64_t v40 = v14 + 32932;
    float v41 = *(float *)(v14 + 104);
    float v42 = *(float *)(v14 + 108);
    float v43 = *(float *)(v14 + 112);
    float v44 = *(float *)(v14 + 116);
    float v45 = *(float *)(v14 + 120);
    uint64_t v46 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
                               + 16 * *((void *)result + 14));
    uint64_t v47 = v15[2];
    if (v47) {
      float v48 = (unsigned __int8 *)(v47 + v19 * v12 + v46);
    }
    else {
      float v48 = 0;
    }
    unsigned int v51 = v15;
    uint64_t v50 = *v15;
    uint64_t v49 = v51[1];
    if (v49) {
      float v52 = (unsigned char *)(v49 + v18 * v12 + v46);
    }
    else {
      float v52 = 0;
    }
    uint64_t v53 = (unsigned __int8 *)(v50 + v17 * v12 + v46);
    do
    {
      if (v11)
      {
        uint64_t v54 = v11;
        unint64_t v55 = v53;
        uint64_t v56 = result;
        uint64_t v57 = v48;
        float16x8_t v58 = v52;
        do
        {
          if (v58)
          {
            LOBYTE(_S8) = *v58;
            *(float *)&unsigned int v59 = (float)_S8;
            float v60 = *(float *)&v59 - v24;
            LOBYTE(v59) = v58[1];
            float v61 = (float)v59 - v24;
            v58 += 2;
            float v62 = v26 * v61;
            float v63 = (float)(v28 * v61) + (float)(v60 * v27);
            float v64 = v29 * v60;
          }
          else
          {
            float v64 = 0.0;
            float v63 = 0.0;
            float v62 = 0.0;
          }
          unsigned int v65 = *v55++;
          float v66 = v25 * (float)((float)v65 - v23);
          float v67 = v62 + v66;
          BOOL v68 = (float)(v62 + v66) <= 8191.0;
          float v69 = 8191.0;
          if (v68)
          {
            float v69 = v67;
            if (v67 < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v63 + v66;
          BOOL v68 = (float)(v63 + v66) <= 8191.0;
          float v71 = 8191.0;
          if (v68)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v64 + v66;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          if (v57)
          {
            unsigned int v75 = *v57++;
            unsigned int v74 = v75;
          }
          else
          {
            unsigned int v74 = 0;
          }
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          unsigned int v83 = llroundf(fminf(fmaxf(v73, 0.0), 8191.0));
          __asm { FCVT            S9, H10 }
          _H10 = *(_WORD *)(v38 + 2 * v83);
          __asm { FCVT            S10, H10 }
          float v87 = (float)((float)((float)(v43 * _S9) + (float)(v42 * _S8)) + (float)(v44 * _S10))
              + (float)(v45 * fmaxf(_S8, fmaxf(_S9, _S10)));
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          _H11 = *(_WORD *)(v39 + 2 * llroundf(v88));
          __asm { FCVT            S11, H11 }
          float v91 = _S8 * _S11;
          _S9 = _S9 * _S11;
          _S10 = _S10 * _S11;
          float v94 = (float)((float)(v31 * _S9) + (float)(v91 * v30)) + (float)(_S10 * v32);
          float v95 = (float)((float)(v34 * _S9) + (float)(v91 * v33)) + (float)(_S10 * v35);
          _S8 = (float)((float)(v37 * _S9) + (float)(v91 * v36)) + (float)(_S10 * v41);
          LOWORD(_S9) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          LOWORD(_S10) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          LOWORD(_S8) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          *(_DWORD *)uint64_t v56 = _S9;
          *((_DWORD *)v56 + 1) = _S10;
          if (v57) {
            float v99 = (float)v74 * 0.0039216;
          }
          else {
            float v99 = 1.0;
          }
          *((_DWORD *)v56 + 2) = _S8;
          *((float *)v56 + 3) = v99;
          v56 += 16;
          --v54;
        }
        while (v54);
      }
      v53 += v17;
      v52 += v18;
      v48 += v19;
      result += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v3 = *(void *)(result + 28);
  unint64_t v4 = *result;
  unint64_t v5 = v3 * a2 / v4;
  unint64_t v6 = (v3 + v3 * a2) / v4;
  if (v6 != v5)
  {
    uint64_t v7 = 0;
    unint64_t v8 = *(void *)(result + 20);
    uint64_t v9 = *(void *)(result + 44);
    uint64_t v10 = v5 + v9;
    uint64_t v11 = v6 + v9;
    uint64_t v12 = *((void *)result + 19);
    int64x2_t v13 = (uint64_t *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = **((void **)result + 17);
    unsigned int v19 = *(unsigned __int16 *)(v12 + 140);
    unsigned int v20 = *(unsigned __int16 *)(v12 + 142);
    _S7 = *(float *)(v12 + 72);
    _S16 = *(float *)(v12 + 76);
    _S21 = *(float *)(v12 + 80);
    _S22 = *(float *)(v12 + 84);
    _S23 = *(float *)(v12 + 88);
    _S24 = *(float *)(v12 + 92);
    _S27 = *(float *)(v12 + 96);
    _S28 = *(float *)(v12 + 100);
    _S29 = *(float *)(v12 + 104);
    uint64_t v30 = v11 - v10;
    uint64_t v31 = v12 + 164;
    float v32 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    float v33 = (float)v20;
    *(float *)&_D0 = v32 * *(float *)v12;
    _S1 = v32 * *(float *)(v12 + 8);
    _Q2.f32[0] = v32 * *(float *)(v12 + 16);
    _S3 = v32 * *(float *)(v12 + 20);
    _S4 = v32 * *(float *)(v12 + 28);
    uint64_t v38 = v12 + 16548;
    float v174 = *(float *)&_D0;
    float v175 = (float)v19;
    __asm { FCVT            H8, S0 }
    *(short float *)&_D0 = (short float)v19;
    int16x8_t v44 = vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    *(short float *)&_D0 = -(short float)v20;
    float16x8_t v45 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&_D0, 0);
    float v162 = _S4;
    float v163 = _S3;
    __asm { FCVT            H0, S4 }
    short float v161 = _H0;
    float v164 = _Q2.f32[0];
    float v165 = _S1;
    __asm { FCVT            H0, S2 }
    short float v160 = _H0;
    __asm { FCVT            H0, S3 }
    short float v159 = _H0;
    __asm { FCVT            H0, S1 }
    short float v158 = _H0;
    float v50 = _S7;
    __asm { FCVT            H0, S7 }
    short float v172 = _H0;
    float16x8_t v173 = (float16x8_t)v44;
    float v52 = _S16;
    __asm { FCVT            H0, S16 }
    short float v171 = _H0;
    float v54 = _S21;
    __asm { FCVT            H0, S21 }
    short float v170 = _H0;
    float v56 = _S22;
    __asm { FCVT            H0, S22 }
    short float v169 = _H0;
    float v58 = _S23;
    __asm { FCVT            H0, S23 }
    short float v168 = _H0;
    float v60 = _S24;
    __asm { FCVT            H0, S24 }
    short float v167 = _H0;
    float v62 = _S27;
    __asm { FCVT            H0, S27 }
    short float v166 = _H0;
    float v64 = _S28;
    __asm { FCVT            H0, S28 }
    uint64_t v66 = v13[2];
    uint64_t v67 = *(void *)(result + 36);
    uint64_t v68 = *v13;
    uint64_t v69 = *(void *)(*((void *)result + 7) + 8);
    uint64_t result = (unsigned __int8 *)(**((void **)result + 16)
                               + v18 * (*((void *)result + 13) * a2 / v4 + *((void *)result + 15))
                               + 16 * *((void *)result + 14));
    if (v66) {
      float v70 = (int8x8_t *)(v66 + v17 * v10 + v67);
    }
    else {
      float v70 = 0;
    }
    if (v69) {
      uint64_t v71 = v69 + v16 * v10 + v67;
    }
    else {
      uint64_t v71 = 0;
    }
    float v72 = (int8x8_t *)(v68 + v15 * v10 + v67);
    __asm { FCVT            H1, S29 }
    v74.i64[0] = 0x9000900090009000;
    v74.i64[1] = 0x9000900090009000;
    do
    {
      if ((int)v8 < 8)
      {
        unint64_t v128 = 0;
        uint64_t v79 = v71;
        unsigned int v78 = v70;
        int8x16_t v126 = (float *)result;
        float16x8_t v76 = v72;
      }
      else
      {
        int v75 = 0;
        float16x8_t v76 = v72;
        int v77 = (float *)result;
        unsigned int v78 = v70;
        uint64_t v79 = v71;
        do
        {
          if (v79)
          {
            float16x8_t v176 = (float16x8_t)vld2_s8((const char *)v79);
            v79 += 16;
            *(int8x8_t *)v80.i8 = vzip1_s8(*(int8x8_t *)v176.i8, 0);
            v80.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v176.i8, 0);
            *(int8x8_t *)v81.i8 = vzip1_s8((int8x8_t)v176.u64[1], 0);
            v81.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v176.u64[1], 0);
            *(float16x8_t *)((char *)&v176 + 8) = vaddq_f16(v45, vcvtq_f16_u16(v80));
            float16x8_t v176 = vaddq_f16(v45, vcvtq_f16_u16(v81));
            float16x8_t v82 = vmulq_n_f16(v176, v158);
            float16x8_t v83 = vmlaq_n_f16(vmulq_n_f16(*(float16x8_t *)((char *)&v176 + 8), v160), v176, v159);
            float16x8_t v84 = vmulq_n_f16(*(float16x8_t *)((char *)&v176 + 8), v161);
          }
          else
          {
            float16x8_t v84 = 0uLL;
            float16x8_t v83 = 0uLL;
            float16x8_t v82 = 0uLL;
          }
          int8x8_t v85 = *v76++;
          int8x8_t v86 = v85;
          if (v78)
          {
            int8x8_t v87 = *v78++;
            int8x8_t v88 = v87;
          }
          else
          {
            int8x8_t v88 = 0;
          }
          *(int8x8_t *)v89.i8 = vzip1_s8(v86, 0);
          v89.u64[1] = (unint64_t)vzip2_s8(v86, 0);
          float16x8_t v90 = vsubq_f16(vcvtq_f16_u16(v89), v173);
          uint16x8_t v91 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v82, v90, _H8), (float16x8_t)0), v74));
          uint32x4_t v92 = vmovl_high_u16(v91);
          uint32x4_t v93 = vmovl_u16(*(uint16x4_t *)v91.i8);
          v94.i16[0] = *(_WORD *)(v31 + 2 * v93.u32[0]);
          v94.i16[1] = *(_WORD *)(v31 + 2 * v93.u32[1]);
          v94.i16[2] = *(_WORD *)(v31 + 2 * v93.u32[2]);
          v94.i16[3] = *(_WORD *)(v31 + 2 * v93.u32[3]);
          v94.i16[4] = *(_WORD *)(v31 + 2 * v92.u32[0]);
          v94.i16[5] = *(_WORD *)(v31 + 2 * v92.u32[1]);
          v94.i16[6] = *(_WORD *)(v31 + 2 * v92.u32[2]);
          v94.i16[7] = *(_WORD *)(v31 + 2 * v92.u32[3]);
          uint16x8_t v95 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v83, v90, _H8), (float16x8_t)0), v74));
          uint32x4_t v96 = vmovl_high_u16(v95);
          uint32x4_t v97 = vmovl_u16(*(uint16x4_t *)v95.i8);
          v98.i16[0] = *(_WORD *)(v31 + 2 * v97.u32[0]);
          v98.i16[1] = *(_WORD *)(v31 + 2 * v97.u32[1]);
          v98.i16[2] = *(_WORD *)(v31 + 2 * v97.u32[2]);
          v98.i16[3] = *(_WORD *)(v31 + 2 * v97.u32[3]);
          v98.i16[4] = *(_WORD *)(v31 + 2 * v96.u32[0]);
          v98.i16[5] = *(_WORD *)(v31 + 2 * v96.u32[1]);
          v98.i16[6] = *(_WORD *)(v31 + 2 * v96.u32[2]);
          v98.i16[7] = *(_WORD *)(v31 + 2 * v96.u32[3]);
          uint16x8_t v99 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v84, v90, _H8), (float16x8_t)0), v74));
          uint32x4_t v100 = vmovl_high_u16(v99);
          float16x8_t v101 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v99.i8);
          v101.i16[0] = *(_WORD *)(v31 + 2 * v101.u32[0]);
          v101.i16[1] = *(_WORD *)(v31 + 2 * v101.u32[1]);
          v101.i16[2] = *(_WORD *)(v31 + 2 * v101.u32[2]);
          v101.i16[3] = *(_WORD *)(v31 + 2 * v101.u32[3]);
          v101.i16[4] = *(_WORD *)(v31 + 2 * v100.u32[0]);
          v101.i16[5] = *(_WORD *)(v31 + 2 * v100.u32[1]);
          v101.i16[6] = *(_WORD *)(v31 + 2 * v100.u32[2]);
          v101.i16[7] = *(_WORD *)(v31 + 2 * v100.u32[3]);
          float16x8_t v102 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v94, v169), v98, v168), v101, v167);
          float16x8_t v116 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v101, _H1), v98, _H0), v94, v166);
          uint16x8_t v103 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v94, v172), v98, v171), v101, v170), (float16x8_t)0), v74));
          uint32x4_t v104 = vmovl_high_u16(v103);
          uint32x4_t v105 = vmovl_u16(*(uint16x4_t *)v103.i8);
          v106.i16[0] = *(_WORD *)(v38 + 2 * v105.u32[0]);
          v106.i16[1] = *(_WORD *)(v38 + 2 * v105.u32[1]);
          v106.i16[2] = *(_WORD *)(v38 + 2 * v105.u32[2]);
          v106.i16[3] = *(_WORD *)(v38 + 2 * v105.u32[3]);
          v106.i16[4] = *(_WORD *)(v38 + 2 * v104.u32[0]);
          v106.i16[5] = *(_WORD *)(v38 + 2 * v104.u32[1]);
          v106.i16[6] = *(_WORD *)(v38 + 2 * v104.u32[2]);
          v106.i16[7] = *(_WORD *)(v38 + 2 * v104.u32[3]);
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v102, (float16x8_t)0), v74));
          uint32x4_t v108 = vmovl_high_u16(v107);
          uint32x4_t v109 = vmovl_u16(*(uint16x4_t *)v107.i8);
          v110.i16[0] = *(_WORD *)(v38 + 2 * v109.u32[0]);
          v110.i16[1] = *(_WORD *)(v38 + 2 * v109.u32[1]);
          v110.i16[2] = *(_WORD *)(v38 + 2 * v109.u32[2]);
          v110.i16[3] = *(_WORD *)(v38 + 2 * v109.u32[3]);
          v110.i16[4] = *(_WORD *)(v38 + 2 * v108.u32[0]);
          v110.i16[5] = *(_WORD *)(v38 + 2 * v108.u32[1]);
          v110.i16[6] = *(_WORD *)(v38 + 2 * v108.u32[2]);
          v110.i16[7] = *(_WORD *)(v38 + 2 * v108.u32[3]);
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v74));
          uint32x4_t v112 = vmovl_high_u16(v111);
          *(void *)&long long v113 = v112.u32[2];
          *((void *)&v113 + 1) = v112.u32[3];
          long long v114 = v113;
          uint32x4_t v115 = vmovl_u16(*(uint16x4_t *)v111.i8);
          v116.i16[0] = *(_WORD *)(v38 + 2 * v115.u32[0]);
          v116.i16[1] = *(_WORD *)(v38 + 2 * v115.u32[1]);
          v116.i16[2] = *(_WORD *)(v38 + 2 * v115.u32[2]);
          v116.i16[3] = *(_WORD *)(v38 + 2 * v115.u32[3]);
          if (v78)
          {
            *(int8x8_t *)v117.i8 = vzip1_s8(v88, 0);
            v117.u64[1] = (unint64_t)vzip2_s8(v88, 0);
            int8x16_t v118 = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v117), (float16x8_t)vdupq_n_s16(0x1C04u));
            _Q16 = vcvtq_f32_f16(*(float16x4_t *)v118.i8);
            float32x4_t v120 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
          }
          else
          {
            __asm { FMOV            V16.4S, #1.0 }
            float32x4_t v120 = _Q16;
          }
          float32x4_t v121 = vcvtq_f32_f16(*(float16x4_t *)v106.i8);
          float32x4_t v122 = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
          v116.i16[7] = *(_WORD *)(v38 + 2 * *((void *)&v114 + 1));
          v116.i16[6] = *(_WORD *)(v38 + 2 * v114);
          v116.i16[5] = *(_WORD *)(v38 + 2 * v112.u32[1]);
          v116.i16[4] = *(_WORD *)(v38 + 2 * v112.u32[0]);
          float32x4_t v123 = vcvtq_f32_f16(*(float16x4_t *)v116.i8);
          _Q2 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL));
          float32x4_t v124 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL));
          float32x4_t v125 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL));
          int8x16_t v126 = v77 + 32;
          vst4q_f32(v77, *(float32x4x4_t *)(&_Q16 - 3));
          uint16x8_t v127 = v77 + 16;
          vst4q_f32(v127, *(float32x4x4_t *)_Q2.f32);
          v75 += 8;
          int v77 = v126;
        }
        while (v75 < (int)v8 - 7);
        unint64_t v128 = v8 & 0xFFFFFFF8;
      }
      _CF = v8 >= v128;
      unint64_t v129 = v8 - v128;
      if (v129 != 0 && _CF)
      {
        do
        {
          if (v79)
          {
            _Q2.i8[0] = *(unsigned char *)v79;
            *(float *)&unsigned int v130 = (float)_Q2.u32[0];
            float v131 = *(float *)&v130 - v33;
            LOBYTE(v130) = *(unsigned char *)(v79 + 1);
            float v132 = (float)v130 - v33;
            v79 += 2;
            float v133 = v165 * v132;
            _Q2.f32[0] = (float)(v163 * v132) + (float)(v131 * v164);
            float v134 = v162 * v131;
          }
          else
          {
            float v134 = 0.0;
            _Q2.i32[0] = 0;
            float v133 = 0.0;
          }
          unsigned int v135 = v76->u8[0];
          float16x8_t v76 = (int8x8_t *)((char *)v76 + 1);
          float v136 = v174 * (float)((float)v135 - v175);
          float v137 = v133 + v136;
          float v138 = 8191.0;
          if (v137 <= 8191.0)
          {
            float v138 = v137;
            if (v137 < 0.0) {
              float v138 = 0.0;
            }
          }
          float v139 = _Q2.f32[0] + v136;
          float v140 = 8191.0;
          if (v139 <= 8191.0)
          {
            float v140 = v139;
            if (v139 < 0.0) {
              float v140 = 0.0;
            }
          }
          float v141 = v134 + v136;
          BOOL v142 = (float)(v134 + v136) <= 8191.0;
          float v143 = 8191.0;
          if (v142)
          {
            float v143 = v141;
            if (v141 < 0.0) {
              float v143 = 0.0;
            }
          }
          if (v78)
          {
            unsigned int v145 = v78->u8[0];
            unsigned int v78 = (int8x8_t *)((char *)v78 + 1);
            unsigned int v144 = v145;
          }
          else
          {
            unsigned int v144 = 0;
          }
          _H2 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H4 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v140, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          float v152 = (float)((float)(v52 * _S4) + (float)(_S2 * v50)) + (float)(_S5 * v54);
          float v153 = (float)((float)(v58 * _S4) + (float)(_S2 * v56)) + (float)(_S5 * v60);
          _S2 = (float)((float)(v64 * _S4) + (float)(_S2 * v62)) + (float)(_S5 * _S29);
          LOWORD(_S4) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          LOWORD(_S2) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          float v157 = (float)v144 * 0.0039216;
          *(_DWORD *)int8x16_t v126 = _S4;
          *((_DWORD *)v126 + 1) = _S5;
          if (!v78) {
            float v157 = 1.0;
          }
          v126[2] = _Q2.f32[0];
          v126[3] = v157;
          v126 += 4;
          --v129;
        }
        while (v129);
      }
      float v72 = (int8x8_t *)((char *)v72 + v15);
      v71 += v16;
      float v70 = (int8x8_t *)((char *)v70 + v17);
      result += v18;
      ++v7;
    }
    while (v7 != v30);
  }
  return result;
}

uint64_t vt_Copy_444vf_TRC_Mat_TRC_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(result + 20);
    unint64_t v12 = v8 + *(void *)(result + 44);
    unint64_t v13 = v9 - v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v26 = v22 * *(float *)(v14 + 8);
    float v27 = v22 * *(float *)(v14 + 16);
    float v28 = v22 * *(float *)(v14 + 20);
    float v29 = v22 * *(float *)(v14 + 28);
    float v30 = *(float *)(v14 + 72);
    float v31 = *(float *)(v14 + 76);
    float v32 = *(float *)(v14 + 80);
    float v33 = *(float *)(v14 + 84);
    float v34 = *(float *)(v14 + 88);
    float v35 = *(float *)(v14 + 92);
    float v36 = *(float *)(v14 + 96);
    float v37 = *(float *)(v14 + 100);
    float v38 = *(float *)(v14 + 104);
    uint64_t v39 = v14 + 164;
    uint64_t v40 = v14 + 16548;
    uint64_t v41 = *(void *)(result + 36);
    uint64_t v42 = **((void **)result + 16)
        + (*((void *)result + 13) * a2 / v7 + *((void *)result + 15)) * v20
        + 16 * *((void *)result + 14);
    uint64_t v43 = v15[2];
    if (v43) {
      uint64_t result = (unsigned __int8 *)(v43 + v19 * v12 + v41);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v46 = v15;
    uint64_t v45 = *v15;
    uint64_t v44 = v46[1];
    if (v44) {
      uint64_t v47 = (unsigned char *)(v44 + v18 * v12 + v41);
    }
    else {
      uint64_t v47 = 0;
    }
    float v48 = (unsigned __int8 *)(v45 + v17 * v12 + v41);
    do
    {
      if (v11)
      {
        uint64_t v49 = v11;
        float v50 = v48;
        uint64_t v51 = v42;
        float v52 = result;
        uint64_t v53 = v47;
        do
        {
          if (v53)
          {
            LOBYTE(_S28) = *v53;
            *(float *)&unsigned int v54 = (float)_S28;
            float v55 = *(float *)&v54 - v24;
            LOBYTE(v54) = v53[1];
            float v56 = (float)v54 - v24;
            v53 += 2;
            float v57 = v26 * v56;
            float v58 = (float)(v28 * v56) + (float)(v55 * v27);
            float v59 = v29 * v55;
          }
          else
          {
            float v59 = 0.0;
            float v58 = 0.0;
            float v57 = 0.0;
          }
          unsigned int v60 = *v50++;
          float v61 = v25 * (float)((float)v60 - v23);
          float v62 = v57 + v61;
          BOOL v63 = (float)(v57 + v61) <= 8191.0;
          float v64 = 8191.0;
          if (v63)
          {
            float v64 = v62;
            if (v62 < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = v58 + v61;
          BOOL v63 = (float)(v58 + v61) <= 8191.0;
          float v66 = 8191.0;
          if (v63)
          {
            float v66 = v65;
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v59 + v61;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          if (v52)
          {
            unsigned int v70 = *v52++;
            unsigned int v69 = v70;
          }
          else
          {
            unsigned int v69 = 0;
          }
          _H28 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H30 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H29 = *(_WORD *)(v39 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          float v81 = (float)((float)(v31 * _S30) + (float)(_S28 * v30)) + (float)(_S29 * v32);
          float v82 = (float)((float)(v34 * _S30) + (float)(_S28 * v33)) + (float)(_S29 * v35);
          _S28 = (float)((float)(v37 * _S30) + (float)(_S28 * v36)) + (float)(_S29 * v38);
          LOWORD(_S29) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          LOWORD(_S30) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          LOWORD(_S28) = *(_WORD *)(v40 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          *(_DWORD *)uint64_t v51 = _S29;
          *(_DWORD *)(v51 + 4) = _S30;
          if (v52) {
            float v86 = (float)v69 * 0.0039216;
          }
          else {
            float v86 = 1.0;
          }
          *(_DWORD *)(v51 + 8) = _S28;
          *(float *)(v51 + 12) = v86;
          v51 += 16;
          --v49;
        }
        while (v49);
      }
      v48 += v17;
      v47 += v18;
      result += v19;
      v42 += v20;
      ++v10;
    }
    while (v10 != v13);
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_RGfA_neon_fp16(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44);
    uint64_t v13 = v8 + v12;
    uint64_t v14 = v9 + v12;
    uint64_t v15 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v18 = *v16;
    uint64_t v19 = v16[1];
    uint64_t v20 = v16[2];
    uint64_t v21 = **((void **)result + 17);
    unsigned int v22 = *(unsigned __int16 *)(v15 + 140);
    unsigned int v23 = *(unsigned __int16 *)(v15 + 142);
    uint64_t v24 = v14 - v13;
    *(float *)v2.i32 = 1.0 / (float)*(unsigned int *)(v15 + 128);
    float v25 = (float)v23;
    _S3 = *(float *)v2.i32 * *(float *)v15;
    _S4 = *(float *)v2.i32 * *(float *)(v15 + 8);
    _S5 = *(float *)v2.i32 * *(float *)(v15 + 16);
    _S6 = *(float *)v2.i32 * *(float *)(v15 + 20);
    _S7 = *(float *)v2.i32 * *(float *)(v15 + 28);
    __asm { FCVT            H8, S3 }
    *(short float *)v2.i16 = (short float)v22;
    float16x8_t v36 = (float16x8_t)vdupq_lane_s16(v2, 0);
    *(short float *)v3.i16 = -(short float)v23;
    float16x8_t v37 = (float16x8_t)vdupq_lane_s16(v3, 0);
    __asm
    {
      FCVT            H9, S7
      FCVT            H10, S5
      FCVT            H11, S6
      FCVT            H12, S4
    }
    uint64_t v42 = v17[2];
    uint64_t v43 = *(void *)(result + 36);
    uint64_t v45 = *v17;
    uint64_t v44 = v17[1];
    uint64_t v46 = v44 + v19 * v13 + v43;
    uint64_t v47 = **((void **)result + 16)
        + v21 * (*((void *)result + 13) * a2 / v7 + *((void *)result + 15))
        + 16 * *((void *)result + 14);
    if (v42) {
      float v48 = (int8x8_t *)(v42 + v20 * v13 + v43);
    }
    else {
      float v48 = 0;
    }
    if (!v44) {
      uint64_t v46 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v45 + v18 * v13 + v43);
    __asm { FMOV            V19.4S, #1.0 }
    float16x8_t v50 = (float16x8_t)vdupq_n_s16(0x1C04u);
    while (1)
    {
      if ((int)v11 < 8)
      {
        unint64_t v82 = 0;
        uint64_t v55 = v46;
        unsigned int v54 = v48;
        uint16x8_t v80 = (float *)v47;
        float v52 = (int8x8_t *)result;
      }
      else
      {
        int v51 = 0;
        float v52 = (int8x8_t *)result;
        uint64_t v53 = (float *)v47;
        unsigned int v54 = v48;
        uint64_t v55 = v46;
        do
        {
          if (v55)
          {
            float16x8_t v93 = (float16x8_t)vld2_s8((const char *)v55);
            v55 += 16;
            *(int8x8_t *)v56.i8 = vzip1_s8(*(int8x8_t *)v93.i8, 0);
            v56.u64[1] = (unint64_t)vzip2_s8(*(int8x8_t *)v93.i8, 0);
            *(int8x8_t *)v57.i8 = vzip1_s8((int8x8_t)v93.u64[1], 0);
            v57.u64[1] = (unint64_t)vzip2_s8((int8x8_t)v93.u64[1], 0);
            float16x8_t v93 = vcvtq_f16_u16(v57);
            float16x8_t v58 = vaddq_f16(v37, vcvtq_f16_u16(v56));
            float16x8_t v93 = vaddq_f16(v37, v93);
            float16x8_t v59 = vmulq_n_f16(v93, _H12);
            float16x8_t v60 = vmlaq_n_f16(vmulq_n_f16(v58, _H10), v93, _H11);
            float16x8_t v61 = vmulq_n_f16(v58, _H9);
          }
          else
          {
            float16x8_t v61 = 0uLL;
            float16x8_t v60 = 0uLL;
            float16x8_t v59 = 0uLL;
          }
          int8x8_t v62 = *v52++;
          int8x8_t v63 = v62;
          if (v54)
          {
            int8x8_t v64 = *v54++;
            *(int8x8_t *)v65.i8 = vzip1_s8(v64, 0);
            v65.u64[1] = (unint64_t)vzip2_s8(v64, 0);
            int8x16_t v66 = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v65), v50);
            float32x4_t v67 = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
            float32x4_t v68 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
          }
          else
          {
            float32x4_t v67 = _Q19;
            float32x4_t v68 = _Q19;
          }
          *(int8x8_t *)v69.i8 = vzip1_s8(v63, 0);
          v69.u64[1] = (unint64_t)vzip2_s8(v63, 0);
          float16x8_t v70 = vsubq_f16(vcvtq_f16_u16(v69), v36);
          int8x16_t v71 = (int8x16_t)vmlaq_n_f16(v59, v70, _H8);
          int8x16_t v72 = (int8x16_t)vmlaq_n_f16(v60, v70, _H8);
          int8x16_t v73 = (int8x16_t)vmlaq_n_f16(v61, v70, _H8);
          float32x4_t v74 = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
          float32x4_t v75 = vcvtq_f32_f16(*(float16x4_t *)v72.i8);
          float32x4_t v76 = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
          float32x4_t v77 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL));
          float16x4_t v5 = (float16x4_t)vextq_s8(v72, v72, 8uLL).u64[0];
          float32x4_t v78 = vcvtq_f32_f16(v5);
          float16x4_t v4 = (float16x4_t)vextq_s8(v73, v73, 8uLL).u64[0];
          float32x4_t v79 = vcvtq_f32_f16(v4);
          uint16x8_t v80 = v53 + 32;
          vst4q_f32(v53, *(float32x4x4_t *)(&v67 - 3));
          float v81 = v53 + 16;
          vst4q_f32(v81, *(float32x4x4_t *)(&v68 - 3));
          v51 += 8;
          uint64_t v53 = v80;
        }
        while (v51 < (int)v11 - 7);
        unint64_t v82 = v11 & 0xFFFFFFF8;
      }
      _CF = v11 >= v82;
      unint64_t v83 = v11 - v82;
      if (v83 != 0 && _CF) {
        break;
      }
LABEL_29:
      result += v18;
      v46 += v19;
      float v48 = (int8x8_t *)((char *)v48 + v20);
      v47 += v21;
      if (++v10 == v24) {
        return result;
      }
    }
    while (1)
    {
      if (v55)
      {
        v4.i8[0] = *(unsigned char *)v55;
        float v84 = (float)v4.u32[0] - v25;
        v5.i8[0] = *(unsigned char *)(v55 + 1);
        float v85 = (float)v5.u32[0] - v25;
        v55 += 2;
        float v86 = _S4 * v85;
        *(float *)v5.i32 = (float)(_S6 * v85) + (float)(v84 * _S5);
        *(float *)v4.i32 = _S7 * v84;
        if (!v54) {
          goto LABEL_25;
        }
      }
      else
      {
        v4.i32[0] = 0;
        v5.i32[0] = 0;
        float v86 = 0.0;
        if (!v54)
        {
LABEL_25:
          unsigned int v87 = 0;
          goto LABEL_26;
        }
      }
      unsigned int v88 = v54->u8[0];
      unsigned int v54 = (int8x8_t *)((char *)v54 + 1);
      unsigned int v87 = v88;
LABEL_26:
      unsigned int v89 = v52->u8[0];
      float v52 = (int8x8_t *)((char *)v52 + 1);
      float v90 = _S3 * (float)((float)v89 - (float)v22);
      float v91 = v86 + v90;
      *(float *)v5.i32 = *(float *)v5.i32 + v90;
      *(float *)v4.i32 = *(float *)v4.i32 + v90;
      float v92 = (float)v87 * 0.0039216;
      if (!v54) {
        float v92 = 1.0;
      }
      *uint16x8_t v80 = v91;
      v80[1] = *(float *)v5.i32;
      v80[2] = *(float *)v4.i32;
      v80[3] = v92;
      v80 += 4;
      if (!--v83) {
        goto LABEL_29;
      }
    }
  }
  return result;
}

uint64_t vt_Copy_444vf_rgb_RGfA(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  memset(v16, 0, sizeof(v16));
  v16[0] = *(unsigned char *)(a1 + 162);
  int64x2_t v9 = a2[2];
  int64x2_t v10 = *a6;
  int64x2_t v11 = a6[2];
  int64x2_t v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v9, a2[1]), *a2), (int8x16_t)vsubq_s64(*a2, v9), (int8x16_t)a2[1]);
  int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(vaddq_s64(v11, a6[1]), *a6), (int8x16_t)vsubq_s64(*a6, v11), (int8x16_t)a6[1]);
  *(int64x2_t *)&v16[4] = *a2;
  *(int8x16_t *)&v16[20] = vbslq_s8((int8x16_t)vcgtq_s64(v13, v12), (int8x16_t)v12, (int8x16_t)v13);
  *(int64x2_t *)&v16[36] = v9;
  int64x2_t v20 = v10;
  long long v21 = *(_OWORD *)&v16[20];
  int64x2_t v22 = v11;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v26 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v16[0], global_queue, v16, (void (__cdecl *)(void *, size_t))vt_Copy_444vf_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_444vf_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = *result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (v10 != v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(result + 20);
    unint64_t v13 = v9 + *(void *)(result + 44);
    unint64_t v14 = v10 - v9;
    uint64_t v15 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v18 = *v16;
    uint64_t v19 = v16[1];
    uint64_t v20 = v16[2];
    uint64_t v21 = **((void **)result + 17);
    *(float *)&unsigned int v22 = (float)*(unsigned int *)(v15 + 128);
    float v23 = 1.0 / *(float *)&v22;
    LOWORD(v22) = *(_WORD *)(v15 + 140);
    float v24 = (float)v22;
    LOWORD(a5) = *(_WORD *)(v15 + 142);
    float v25 = (float)LODWORD(a5);
    float v26 = v23 * *(float *)v15;
    float v27 = v23 * *(float *)(v15 + 8);
    float v28 = v23 * *(float *)(v15 + 16);
    float v29 = v23 * *(float *)(v15 + 20);
    float v30 = v23 * *(float *)(v15 + 28);
    uint64_t v31 = *((void *)result + 14);
    float v32 = (void *)*((void *)result + 16);
    unint64_t v33 = *((void *)result + 13) * a2 / v8 + *((void *)result + 15);
    uint64_t v34 = *(void *)(result + 36);
    uint64_t v35 = *v32 + v33 * v21 + 16 * v31;
    uint64_t v36 = v17[2];
    if (v36) {
      float16x8_t v37 = (unsigned __int8 *)(v36 + v20 * v13 + v34);
    }
    else {
      float16x8_t v37 = 0;
    }
    uint64_t v39 = *v17;
    uint64_t v38 = v17[1];
    uint64_t v40 = (unsigned char *)(v38 + v19 * v13 + v34);
    if (!v38) {
      uint64_t v40 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v39 + v18 * v13 + v34);
    while (!v12)
    {
LABEL_19:
      result += v18;
      v40 += v19;
      v37 += v20;
      v35 += v21;
      if (++v11 == v14) {
        return result;
      }
    }
    uint64_t v41 = v12;
    uint64_t v42 = result;
    uint64_t v43 = (float *)v35;
    uint64_t v44 = v37;
    uint64_t v45 = v40;
    while (1)
    {
      if (v45)
      {
        LOBYTE(v5) = *v45;
        float v46 = (float)LODWORD(v5) - v25;
        LOBYTE(v6) = v45[1];
        float v47 = (float)LODWORD(v6) - v25;
        v45 += 2;
        float v48 = v27 * v47;
        float v49 = (float)(v29 * v47) + (float)(v46 * v28);
        float v50 = v30 * v46;
        if (!v44) {
          goto LABEL_14;
        }
      }
      else
      {
        float v50 = 0.0;
        float v49 = 0.0;
        float v48 = 0.0;
        if (!v44)
        {
LABEL_14:
          unsigned int v51 = 0;
          goto LABEL_15;
        }
      }
      unsigned int v52 = *v44++;
      unsigned int v51 = v52;
LABEL_15:
      unsigned int v53 = *v42++;
      float v54 = v26 * (float)((float)v53 - v24);
      float v5 = v50 + v54;
      *uint64_t v43 = v48 + v54;
      v43[1] = v49 + v54;
      if (v44) {
        float v6 = (float)v51 * 0.0039216;
      }
      else {
        float v6 = 1.0;
      }
      v43[2] = v5;
      v43[3] = v6;
      v43 += 4;
      if (!--v41) {
        goto LABEL_19;
      }
    }
  }
  return result;
}

uint64_t jpeg_predecompress(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5, int a6)
{
  uint64_t v10 = 0;
  LODWORD(result) = marker_detect(a1, a2, (_DWORD *)&v10 + 1, &v10, a5, a6);
  if (a3 && SHIDWORD(v10) < *a3) {
    *a3 = HIDWORD(v10);
  }
  if (a4 && (int)v10 < *a4) {
    *a4 = v10;
  }
  if (result == -12904 || result == 0) {
    return result;
  }
  else {
    return 4294954387;
  }
}

uint64_t jpeg_decompress(uint64_t a1, uint64_t a2, CVPixelBufferRef pixelBuffer, int a4, int a5, int a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  size_t v14 = BytesPerRow;
  if (a6 == 2) {
    size_t v15 = BytesPerRow;
  }
  else {
    size_t v15 = 0;
  }
  char v16 = (a6 - 1) < 2;
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  size_t extraRowsOnBottom = 0;
  CVPixelBufferGetExtendedPixels(pixelBuffer, 0, 0, 0, &extraRowsOnBottom);
  int v18 = *(__int16 *)(a1 + 4096);
  uint64_t result = 4294954394;
  if (v18 > 32)
  {
    if (v18 == 34)
    {
      int v25 = a4;
      int v26 = a5;
      int v21 = 16;
      unsigned int v20 = 16;
    }
    else
    {
      if (v18 != 33) {
        return result;
      }
      int v25 = a4;
      int v26 = a5;
      unsigned int v20 = 8;
      int v21 = 16;
    }
  }
  else if (v18 == 17)
  {
    int v25 = a4;
    int v26 = a5;
    int v21 = 8;
    unsigned int v20 = 8;
  }
  else
  {
    if (v18 != 18) {
      return result;
    }
    int v25 = a4;
    int v26 = a5;
    unsigned int v20 = 16;
    int v21 = 8;
  }
  uint64_t result = GetConversionRoutine(a1, (void *)(a1 + 3192), a1 + 3200, (uint64_t)BaseAddress + v15, v14 << v16, *(__int16 *)(a1 + 3274), (unsigned __int8 *)(a1 + 3405), *(_DWORD *)(a1 + 3276), PixelFormatType, 1);
  if (!result)
  {
    int v22 = (v26 + v20 - 1) & -v20;
    jpegPlanarOutput_setup(PixelFormatType, v21, v20, pixelBuffer, v28);
    if (v22 < 1)
    {
      return 0;
    }
    else
    {
      LOWORD(v23) = 0;
      while (!getyuvMB(a1, a2, a1 + 3176, (uint64_t)v28, PixelFormatType, (__int16)(((v25 + v21 - 1) & -v21) / v21)))
      {
        for (uint64_t i = 0; i != 15; i += 5)
          *(int64x2_t *)((char *)&v28[i] + 8) = vdupq_n_s64(*((void *)&v28[i] + 1) + *((void *)&v28[i + 2] + 1));
        int v23 = (__int16)(v23 + v20);
        if (v23 >= v22) {
          return 0;
        }
      }
      return 4294954387;
    }
  }
  return result;
}

void jpegPlanarOutput_setup(signed int a1, unint64_t a2, uint64_t a3, CVPixelBufferRef pixelBuffer, _OWORD *a5)
{
  size_t extraRowsOnBottom = 0;
  *a5 = 0u;
  a5[1] = 0u;
  a5[2] = 0u;
  a5[3] = 0u;
  a5[4] = 0u;
  a5[5] = 0u;
  a5[6] = 0u;
  a5[7] = 0u;
  a5[8] = 0u;
  a5[9] = 0u;
  a5[10] = 0u;
  a5[11] = 0u;
  a5[12] = 0u;
  a5[13] = 0u;
  a5[14] = 0u;
  if (CVPixelBufferIsPlanar(pixelBuffer))
  {
    Planeint64_t Count = CVPixelBufferGetPlaneCount(pixelBuffer);
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
  }
  else
  {
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(pixelBuffer);
    size_t HeightOfPlane = CVPixelBufferGetHeight(pixelBuffer);
    Planeint64_t Count = 1;
  }
  CVPixelBufferGetExtendedPixels(pixelBuffer, 0, 0, 0, &extraRowsOnBottom);
  if (a1 <= 1278555700)
  {
    if (a1 == 32)
    {
LABEL_12:
      uint64_t v13 = 4 * a2;
LABEL_14:
      a2 = v13;
      goto LABEL_15;
    }
    if (a1 != 846624121)
    {
      int v12 = 1111970369;
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v13 = 2 * a2;
    goto LABEL_14;
  }
  if (a1 == 1278555701 || a1 == 2037741171) {
    goto LABEL_13;
  }
  int v12 = 1983131704;
LABEL_11:
  if (a1 == v12) {
    goto LABEL_12;
  }
LABEL_15:
  CFDictionaryRef v14 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1);
  size_t v15 = 0;
  key = (void *)*MEMORY[0x1E4F24EE0];
  if (PlaneCount <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = PlaneCount;
  }
  uint64_t v22 = v16;
  uint64_t v17 = (int64x2_t *)((char *)a5 + 40);
  do
  {
    char v18 = a1 == 2033463856;
    char v19 = v15 != 0;
    if (!v15) {
      char v18 = 0;
    }
    v17[-3].i64[1] = (uint64_t)BaseAddressOfPlane;
    v17[-1].i64[1] = BytesPerRowOfPlane;
    v17->i64[0] = (BytesPerRowOfPlane * a3) >> v19;
    v17->i64[1] = a2 >> v18;
    if (CVPixelBufferIsPlanar(pixelBuffer))
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v14, key);
      CFArrayGetValueAtIndex(Value, v15);
      FigCFDictionaryGetInt32IfPresent();
    }
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    v17[1].i64[0] = 0;
    v17[1].i64[1] = (8 * BytesPerRowOfPlane) >> v19;
    v17[-2] = vdupq_n_s64((unint64_t)BaseAddressOfPlane);
    v17[-1].i64[0] = (uint64_t)&BaseAddressOfPlane[((extraRowsOnBottom >> v19) + HeightOfPlane) * BytesPerRowOfPlane];
    v17[2].i8[0] = v15++ != 0;
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v15);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v15);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, v15);
    v17 += 5;
  }
  while (v22 != v15);
  if (v14) {
    CFRelease(v14);
  }
}

uint64_t jpeg_decompressProgressive(uint64_t a1, uint64_t a2, CVPixelBufferRef pixelBuffer, int a4, int a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  size_t extraRowsOnBottom = 0;
  CVPixelBufferGetExtendedPixels(pixelBuffer, 0, 0, 0, &extraRowsOnBottom);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  *(void *)(a1 + 5984) = &BaseAddress[(extraRowsOnBottom + Height) * BytesPerRow];
  int v13 = *(__int16 *)(a1 + 4096);
  __int16 v14 = -12902;
  if (v13 > 32)
  {
    if (v13 == 34)
    {
      int v16 = 16;
      int v15 = 16;
    }
    else
    {
      if (v13 != 33) {
        goto LABEL_44;
      }
      int v15 = 8;
      int v16 = 16;
    }
  }
  else if (v13 == 17)
  {
    int v16 = 8;
    int v15 = 8;
  }
  else
  {
    if (v13 != 18) {
      goto LABEL_44;
    }
    int v15 = 16;
    int v16 = 8;
  }
  int ConversionRoutine = GetConversionRoutine(a1, (void *)(a1 + 3192), a1 + 3200, (uint64_t)BaseAddress, BytesPerRow, *(__int16 *)(a1 + 3274), (unsigned __int8 *)(a1 + 3405), *(_DWORD *)(a1 + 3276), PixelFormatType, 1);
  __int16 v14 = ConversionRoutine;
  if (ConversionRoutine) {
    return v14;
  }
  int v18 = (a4 + v16 - 1) & -v16;
  int v19 = (a5 + v15 - 1) & -v15;
  jpegPlanarOutput_setup(PixelFormatType, v16, v15, pixelBuffer, v46);
  *(_OWORD *)(a1 + 4200) = 0u;
  *(void *)(a1 + 4216) = 0;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 4280) = 0u;
  *(_DWORD *)(a1 + 4136) = *(char *)(a1 + 3400);
  *(_DWORD *)(a1 + 4140) = *(char *)(a1 + 3401);
  *(_DWORD *)(a1 + 4144) = *(char *)(a1 + 3402);
  *(_DWORD *)(a1 + 4148) = *(char *)(a1 + 3405);
  *(_DWORD *)(a1 + 4152) = *(char *)(a1 + 3406);
  *(_DWORD *)(a1 + 4156) = *(char *)(a1 + 3407);
  *(_DWORD *)(a1 + 4384) = (v16 + v18 - 1) / v16;
  *(_DWORD *)(a1 + 4388) = (v15 + v19 - 1) / v15;
  if (*(int *)(a1 + 4132) >= 1)
  {
    __int16 v20 = 0;
    int v21 = v18 | 7;
    if (v18 < 0) {
      int v21 = (v18 | 7) + 7;
    }
    int v22 = v21 >> 3;
    if (v22 >= 0) {
      int v23 = v22 & 1;
    }
    else {
      int v23 = -(v22 & 1);
    }
    int v24 = v19 | 7;
    if (v19 < 0) {
      int v24 = (v19 | 7) + 7;
    }
    int v25 = v24 >> 3;
    if (v25 >= 0) {
      int v26 = v25 & 1;
    }
    else {
      int v26 = -(v25 & 1);
    }
    do
    {
      uint64_t v27 = a1 + 4 * v20;
      *(_DWORD *)(v27 + 4160) = 0;
      int v28 = *(_DWORD *)(v27 + 4148);
      if (v28 >> 4 != 1)
      {
        if (v28 >> 4 != 2) {
          goto LABEL_43;
        }
        *(_DWORD *)(v27 + 4160) = v23;
      }
      uint64_t v29 = a1 + 4 * v20;
      *(_DWORD *)(v29 + 4172) = 0;
      int v30 = v28 & 0xF;
      if (v30 != 1)
      {
        if (v30 != 2) {
          goto LABEL_43;
        }
        *(_DWORD *)(v29 + 4172) = v26;
      }
      ++v20;
      int v31 = *(_DWORD *)(a1 + 4132);
    }
    while (v31 > v20);
    if (v31 >= 1)
    {
      __int16 v32 = 0;
      do
      {
        uint64_t v33 = v32;
        uint64_t v34 = *(unsigned int *)(a1 + 4 * v32 + 4136);
        if ((int)v34 >= 1)
        {
          uint64_t v35 = v34 * *(int *)(a1 + 4384) * *(int *)(a1 + 4388);
          uint64_t v36 = (void *)(a1 + 8 * v33);
          v36[534] = 0;
          v36[525] = 0;
          v36[528] = v35 << 7;
          float16x8_t v37 = malloc_type_calloc(1uLL, v35 << 7, 0x2000F8EBuLL);
          v36[525] = v37;
          if (!v37)
          {
            __int16 v14 = -12904;
            goto LABEL_44;
          }
          v36[531] = v37;
          int v31 = *(_DWORD *)(a1 + 4132);
        }
        __int16 v32 = v33 + 1;
      }
      while (v31 > (__int16)(v33 + 1));
    }
  }
  __int16 v14 = consume_progressive_mode_markers(a1, a2);
  if (!v14)
  {
    *(_OWORD *)(a1 + 4360) = *(_OWORD *)(a1 + 3280);
    *(void *)(a1 + 4376) = *(void *)(a1 + 3296);
    if (v19 < 1)
    {
LABEL_42:
      __int16 v14 = 0;
    }
    else
    {
      LOWORD(v38) = 0;
      while (!getyuvMB(a1, a2, a1 + 3176, (uint64_t)v46, PixelFormatType, (__int16)(v18 / v16)))
      {
        for (uint64_t i = 0; i != 15; i += 5)
          *(int64x2_t *)((char *)&v46[i] + 8) = vdupq_n_s64(*((void *)&v46[i] + 1) + *((void *)&v46[i + 2] + 1));
        int v38 = (__int16)(v38 + v15);
        if (v38 >= v19) {
          goto LABEL_42;
        }
      }
LABEL_43:
      __int16 v14 = -12909;
    }
  }
LABEL_44:
  uint64_t v40 = 0;
  uint64_t v41 = a1 + 4200;
  do
  {
    uint64_t v42 = *(void **)(v41 + v40);
    if (v42)
    {
      free(v42);
      *(void *)(v41 + v40) = 0;
    }
    v40 += 8;
  }
  while (v40 != 24);
  return v14;
}

intptr_t VTMotionEstimationSessionCompleteFrames(unsigned char *a1)
{
  if (a1
    && (CFTypeID v2 = CFGetTypeID(a1),
        MEMORY[0x199705810](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession), v2 == sVTMotionEstimationSessionID)&& !a1[16])
  {
    return vtMotionEstimationSessionCompleteFramesInternal((uint64_t)a1);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTMotionEstimationSessionGetTypeID()
{
  return sVTMotionEstimationSessionID;
}

intptr_t vtMotionEstimationSessionCompleteFramesInternal(uint64_t a1)
{
  if (a1)
  {
    CFTypeID v2 = CFGetTypeID((CFTypeRef)a1);
    MEMORY[0x199705810](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
    if (v2 == sVTMotionEstimationSessionID)
    {
      if (*(unsigned char *)(a1 + 16)) {
        return 0;
      }
      uint64_t v3 = *(void *)(a1 + 152);
      if (v3)
      {
        return VTCompressionSessionRemote_CompleteMotionVectors(v3);
      }
      uint64_t v5 = *(void *)(a1 + 48);
      if (v5)
      {
        uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v6) {
          uint64_t v7 = v6;
        }
        else {
          uint64_t v7 = 0;
        }
        unint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 24);
        if (!v8) {
          return 4294954514;
        }
        intptr_t result = v8(v5);
        if (result) {
          return result;
        }
        if (*(void *)(a1 + 128))
        {
          uint64_t v9 = 5;
          do
          {
            uint64_t v10 = *(NSObject **)(a1 + 128);
            dispatch_time_t v11 = dispatch_time(0, 1000000000 * v9);
            intptr_t result = dispatch_group_wait(v10, v11);
            v9 *= 2;
          }
          while (result);
          return result;
        }
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

void RegisterVTMotionEstimationSession()
{
  uint64_t v0 = (const void *)_CFRuntimeRegisterClass();
  sVTMotionEstimationSessionID = (uint64_t)v0;
  sVTMotionEstimationSessionPropertyCallbacks = 0;
  unk_1E9334710 = VTMotionEstimationSessionCopySupportedPropertyDictionary;
  qword_1E9334718 = (uint64_t)VTMotionEstimationSessionSetProperty;
  qword_1E9334720 = (uint64_t)VTMotionEstimationSessionCopyProperty;
  qword_1E9334728 = (uint64_t)VTMotionEstimationSessionSetProperties;
  qword_1E9334730 = (uint64_t)VTMotionEstimationSessionCopySerializableProperties;

  VTSessionRegisterCallbacksForTypeID(&sVTMotionEstimationSessionPropertyCallbacks, v0);
}

uint64_t VTMotionEstimationSessionCreate(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  MEMORY[0x199705810](&sCreateRegistryOnce, vtCreateMotionEstimationProcessorRegistry);
  if (a5)
  {
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    MEMORY[0x199705810](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (!Instance)
    {
      uint64_t v17 = 4294954392;
LABEL_22:
      if (Instance) {
        CFRelease((CFTypeRef)Instance);
      }
      return v17;
    }
    if (VTMotionEstimationSession_ShouldUseSeparateProcess_onceToken != -1) {
      dispatch_once(&VTMotionEstimationSession_ShouldUseSeparateProcess_onceToken, &__block_literal_global_7);
    }
    if (!VTMotionEstimationSession_ShouldUseSeparateProcess_featureEnabled) {
      goto LABEL_11;
    }
    if (VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
    {
      if (FigServer_IsVideocodecd()) {
        goto LABEL_11;
      }
    }
    else if (FigServer_IsServerProcess())
    {
      goto LABEL_11;
    }
    if (!VTShouldRunVideoEncodersInProcess())
    {
      uint64_t v16 = VTMotionEstimationSessionRemote_Create(Instance, a1, a3, a4, (uint64_t)a2, (uint64_t *)(Instance + 152));
      if (!v16)
      {
        uint64_t v17 = 0;
        *a5 = Instance;
        uint64_t Instance = 0;
        goto LABEL_22;
      }
      goto LABEL_19;
    }
LABEL_11:
    *(_DWORD *)(Instance + 40) = 16;
    *(unsigned char *)(Instance + 16) = 0;
    *(_DWORD *)(Instance + 32) = a3;
    *(_DWORD *)(Instance + 36) = a4;
    *(_WORD *)(Instance + 44) = 0;
    if (a2)
    {
      CFTypeID v12 = CFGetTypeID(a2);
      if (v12 == CFDictionaryGetTypeID())
      {
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetBooleanIfPresent();
        CFStringRef Value = (const __CFString *)FigCFDictionaryGetValue();
        if (Value)
        {
          CFStringRef v14 = Value;
          CFTypeID v15 = CFGetTypeID(Value);
          if (v15 == CFStringGetTypeID()) {
            *(void *)(Instance + 24) = CFStringCreateCopy(v10, v14);
          }
        }
      }
    }
    uint64_t v16 = FigRegistryCopyFilteredItemList();
    if (!v16) {
      uint64_t v16 = FigSignalErrorAt();
    }
LABEL_19:
    uint64_t v17 = v16;
    goto LABEL_22;
  }

  return FigSignalErrorAt();
}

void vtCreateMotionEstimationProcessorRegistry()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!FigRegistryCreate() && access("/System/Library/Video/Plug-Ins/", 4) != -1)
  {
    CFURLRef v1 = CFURLCreateWithFileSystemPath(v0, @"/System/Library/Video/Plug-Ins/", kCFURLPOSIXPathStyle, 1u);
    if (v1)
    {
      CFURLRef v2 = v1;
      if (!FigRegistryAddSearchPathWithOptions())
      {
        uint64_t v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
        float16x4_t v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(Mutable, @"CMClassID", @"com.apple.videotoolbox.motionestimationprocessor");
        CFDictionarySetValue(Mutable, @"CMClassImplementationName", @"VTTestMotionEstimationProcessor");
        CFDictionarySetValue(Mutable, @"CMFactoryFunction", @"VTTestMotionEstimationProcessor_CreateInstance");
        FigCFDictionarySetInt32();
        uint64_t v6 = CFDictionaryCreateMutable(v0, 0, v3, v4);
        CFDictionarySetValue(v6, @"VTIsHardwareAccelerated", (const void *)*MEMORY[0x1E4F1CFC8]);
        CFDictionarySetValue(Mutable, @"CMMatchingInfo", v6);
        FigRegistryAddItem();
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      CFRelease(v2);
    }
  }
}

BOOL vtMotionEstimationSessionRegistryFilter(uint64_t a1)
{
  return !FigRegistryItemCopyDescription()
      && vtDoesKeyMatch(a1, 0, @"CMClassImplementationName", 0)
      && (uint64_t Value = FigCFDictionaryGetValue()) != 0
      && vtDoesKeyMatch(a1, Value, @"VTIsHardwareAccelerated", *MEMORY[0x1E4F1CFD0]);
}

uint64_t VTMotionEstimationSessionCopySourcePixelBufferAttributes(void *a1, CFDictionaryRef *a2)
{
  if (a1
    && (CFTypeID v4 = CFGetTypeID(a1),
        MEMORY[0x199705810](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession), v4 == sVTMotionEstimationSessionID)&& a2)
  {
    uint64_t v5 = a1[19];
    if (v5)
    {
      return VTCompressionSessionRemote_CopySourcePixelBufferAttributes(v5);
    }
    else
    {
      MEMORY[0x1997056B0](a1[18]);
      CFDictionaryRef v7 = (const __CFDictionary *)a1[9];
      if (v7) {
        CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v7);
      }
      else {
        CFDictionaryRef Copy = 0;
      }
      *a2 = Copy;
      MEMORY[0x1997056C0](a1[18]);
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void *VTMotionEstimationSessionInvalidate(uint64_t a1)
{
  if (a1
    && (CFTypeID v2 = CFGetTypeID((CFTypeRef)a1),
        MEMORY[0x199705810](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession), v2 == sVTMotionEstimationSessionID))
  {
    intptr_t result = *(void **)(a1 + 152);
    if (result)
    {
      intptr_t result = VTCompressionSessionRemote_Invalidate(result);
    }
    else
    {
      uint64_t v4 = *(void *)(a1 + 48);
      if (v4)
      {
        uint64_t VTable = CMBaseObjectGetVTable();
        uint64_t v7 = *(void *)(VTable + 8);
        intptr_t result = (void *)(VTable + 8);
        uint64_t v6 = v7;
        if (v7) {
          uint64_t v8 = v6;
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *(uint64_t (**)(uint64_t))(v8 + 24);
        if (v9) {
          intptr_t result = (void *)v9(v4);
        }
      }
    }
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    return (void *)FigSignalErrorAt();
  }
  return result;
}

uint64_t VTMotionEstimationSessionEstimateMotionVectors(char *cf, void *a2, void *a3, uint64_t a4, uint64_t a5, const void *a6)
{
  if (a2)
  {
    uint64_t v11 = *((void *)cf + 19);
    if (v11)
    {
      return VTCompressionSessionRemote_EstimateMotionVectors(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
    }
    unsigned int v34 = a4;
    CVPixelBufferRef v36 = 0;
    CVPixelBufferRef pixelBufferOut = 0;
    long long value = 0u;
    long long v39 = 0u;
    uint64_t v40 = 0;
    CFTypeID v13 = CFGetTypeID(cf);
    MEMORY[0x199705810](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
    if (v13 == sVTMotionEstimationSessionID
      && !cf[16]
      && *((void *)cf + 6)
      && (CFTypeID v14 = CFGetTypeID(a2), v14 == CVPixelBufferGetTypeID())
      && a3
      && (CFTypeID v15 = CFGetTypeID(a3), v15 == CVPixelBufferGetTypeID())
      && a6)
    {
      uint64_t v16 = *((void *)cf + 18);
      uint64_t v17 = *((void *)cf + 17) + 1;
      *((void *)cf + 17) = v17;
      MEMORY[0x1997056B0](v16);
      if (CVPixelBufferIsCompatibleWithAttributes())
      {
        int v18 = (__CVBuffer *)CFRetain(a2);
        CVPixelBufferRef pixelBufferOut = v18;
      }
      else
      {
        int v18 = 0;
      }
      uint64_t v33 = (const void *)v17;
      if (CVPixelBufferIsCompatibleWithAttributes())
      {
        int v19 = (__CVBuffer *)CFRetain(a3);
        CVPixelBufferRef v36 = v19;
        if (v19 && v18)
        {
LABEL_33:
          int v23 = (__CFDictionary *)*((void *)cf + 8);
          if (!v23)
          {
            valueCallBacks.version = 0;
            valueCallBacks.retain = (CFDictionaryRetainCallBack)vtCloneFrameTrackingInfo;
            valueCallBacks.copyDescription = 0;
            valueCallBacks.equal = 0;
            valueCallBacks.release = (CFDictionaryReleaseCallBack)vtFreeFrameTrackingInfo;
            int v23 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &valueCallBacks);
            *((void *)cf + 8) = v23;
          }
          int v24 = (const void *)*((void *)cf + 17);
          *((void *)&v39 + 1) = a5;
          uint64_t v40 = a6;
          *(void *)&long long value = v24;
          *((void *)&value + 1) = pixelBufferOut;
          *(void *)&long long v39 = v36;
          CFDictionarySetValue(v23, v24, &value);
          MEMORY[0x1997056C0](*((void *)cf + 18));
          dispatch_group_enter(*((dispatch_group_t *)cf + 16));
          uint64_t v25 = *((void *)cf + 6);
          CVPixelBufferRef v27 = v36;
          CVPixelBufferRef v26 = pixelBufferOut;
          uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v28) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = 0;
          }
          int v30 = *(uint64_t (**)(uint64_t, const void *, CVPixelBufferRef, CVPixelBufferRef, void, uint64_t))(v29 + 16);
          if (v30) {
            return v30(v25, v33, v26, v27, v34, a5);
          }
          else {
            return 4294954514;
          }
        }
      }
      else
      {
        int v19 = 0;
      }
      __int16 v20 = (CVPixelBufferPoolRef *)(cf + 88);
      if (*((void *)cf + 11)
        || (uint64_t v21 = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *((CFDictionaryRef *)cf + 9), (CVPixelBufferPoolRef *)cf + 11), !v21))
      {
        int v22 = (VTPixelTransferSessionRef *)(cf + 96);
        if (*((void *)cf + 12)
          || (uint64_t v21 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (VTPixelTransferSessionRef *)cf + 12), !v21))
        {
          if (v18
            || (uint64_t v21 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *v20, &pixelBufferOut),
                !v21))
          {
            if (v19
              || (uint64_t v21 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *v20, &v36),
                  !v21))
            {
              if (pixelBufferOut
                || (uint64_t v21 = VTPixelTransferSessionTransferImage(*v22, (CVPixelBufferRef)a2, 0), !v21))
              {
                if (v36) {
                  goto LABEL_33;
                }
                uint64_t v21 = VTPixelTransferSessionTransferImage(*v22, (CVPixelBufferRef)a3, 0);
                if (!v21) {
                  goto LABEL_33;
                }
              }
            }
          }
        }
      }
      uint64_t v31 = v21;
      FigSignalErrorAt();
      __int16 v32 = v33;
      MEMORY[0x1997056C0](*((void *)cf + 18));
    }
    else
    {
      uint64_t v31 = FigSignalErrorAt();
      __int16 v32 = 0;
    }
    VTMotionEstimationProcessorSessionEmitMotionVectors((uint64_t)(cf + 64), v32);
    if (pixelBufferOut) {
      CFRelease(pixelBufferOut);
    }
    if (v36) {
      CFRelease(v36);
    }
    return v31;
  }

  return FigSignalErrorAt();
}

uint64_t VTMotionEstimationProcessorSessionSetSourcePixelBufferAttributes(void *a1, CFTypeRef cf)
{
  if (a1 && cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
  {
    MEMORY[0x1997056B0](a1[10]);
    if (!FigCFEqual())
    {
      uint64_t v5 = (const void *)a1[1];
      a1[1] = cf;
      CFRetain(cf);
      if (v5) {
        CFRelease(v5);
      }
      uint64_t v6 = (const void *)a1[3];
      if (v6)
      {
        CFRelease(v6);
        a1[3] = 0;
      }
    }
    MEMORY[0x1997056C0](a1[10]);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t VTMotionEstimationProcessorSessionSetMotionVectorPixelBufferAttributes(uint64_t a1, CFTypeRef cf)
{
  if (a1 && cf && (CFTypeID v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
  {
    MEMORY[0x1997056B0](*(void *)(a1 + 80));
    if (!FigCFEqual())
    {
      uint64_t v5 = *(const void **)(a1 + 40);
      *(void *)(a1 + 40) = cf;
      CFRetain(cf);
      if (v5) {
        CFRelease(v5);
      }
      uint64_t v6 = *(const void **)(a1 + 56);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(a1 + 56) = 0;
      }
      if (CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFDictionaryRef *)(a1 + 48), (CFDictionaryRef)cf, (CVPixelBufferPoolRef *)(a1 + 56)))
      {
        FigSignalErrorAt();
      }
    }
    MEMORY[0x1997056C0](*(void *)(a1 + 80));
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t VTMotionEstimationProcessorSessionCreateMotionVectorPixelBuffer(uint64_t a1, CVPixelBufferRef *a2)
{
  CVPixelBufferRef pixelBufferOut = 0;
  if (a1)
  {
    MEMORY[0x1997056B0](*(void *)(a1 + 80));
    uint64_t v4 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CVPixelBufferPoolRef *)(a1 + 56), &pixelBufferOut);
    if (v4)
    {
      uint64_t v5 = v4;
      FigSignalErrorAt();
    }
    else if (pixelBufferOut)
    {
      uint64_t v5 = 0;
      *a2 = pixelBufferOut;
    }
    else
    {
      uint64_t v5 = FigSignalErrorAt();
    }
    MEMORY[0x1997056C0](*(void *)(a1 + 80));
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTMotionEstimationProcessorSessionEmitMotionVectors(uint64_t a1, const void *a2)
{
  if (a1)
  {
    if (*(void *)a1)
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 80));
      uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)a1, a2);
      uint64_t v6 = MEMORY[0x1997056C0](*(void *)(a1 + 80));
      if (Value)
      {
        uint64_t v7 = (void *)MEMORY[0x199706500](v6);
        (*(void (**)(void))(Value[4] + 16))();
        uint64_t v8 = (const void *)Value[1];
        if (v8) {
          CFRelease(v8);
        }
        uint64_t v9 = (const void *)Value[2];
        if (v9) {
          CFRelease(v9);
        }
        MEMORY[0x1997056B0](*(void *)(a1 + 80));
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)a1, a2);
        MEMORY[0x1997056C0](*(void *)(a1 + 80));
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTMotionEstimationProcessorGetClassID()
{
  return sVTMotionEstimationProcessorClassID;
}

uint64_t RegisterVTMotionEstimationProcessorType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t VTMotionEstimationProcessorGetTypeID()
{
  MEMORY[0x199705810](&VTMotionEstimationProcessorGetClassID_sRegisterVTMotionEstimationProcessorTypeOnce, RegisterVTMotionEstimationProcessorType);

  return CMBaseClassGetCFTypeID();
}

uint64_t VTMotionEstimationSessionCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  v17[0] = 0;
  v17[1] = 0;
  if (!a1) {
    goto LABEL_25;
  }
  CFTypeID v4 = CFGetTypeID((CFTypeRef)a1);
  MEMORY[0x199705810](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
  if (v4 != sVTMotionEstimationSessionID || *(unsigned char *)(a1 + 16) || !a2) {
    goto LABEL_25;
  }
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5)
  {
    return VTCompressionSessionRemote_CopySupportedPropertyDictionary(v5);
  }
  MEMORY[0x199705810](&sCreateSupportedPropertyDictionaryOnce_0, vtMotionEstimationSessionCreateSupportedPropertyDictionary);
  if (!sVTMotionEstimationSessionSupportedPropertyDictionary) {
    goto LABEL_25;
  }
  uint64_t v8 = (CFTypeRef *)(a1 + 56);
  CFTypeRef v7 = *(CFTypeRef *)(a1 + 56);
  if (!v7)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFTypeID v13 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v12 + 32);
    if (v13 && !v13(v10, &cf))
    {
      int v14 = sVTMotionEstimationSessionSupportedPropertyDictionary;
      if (sVTMotionEstimationSessionSupportedPropertyDictionary)
      {
        v17[0] = sVTMotionEstimationSessionSupportedPropertyDictionary;
        int v14 = 1;
      }
      if (cf) {
        v17[v14] = cf;
      }
      uint64_t v15 = FigCFCreateCombinedDictionary();
      if (v15)
      {
        uint64_t v9 = v15;
        FigSignalErrorAt();
        goto LABEL_26;
      }
      CFTypeRef v7 = *v8;
      if (!*v8) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
LABEL_25:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_26;
  }
LABEL_11:
  CFTypeRef v7 = CFRetain(v7);
LABEL_12:
  uint64_t v9 = 0;
  *a2 = v7;
LABEL_26:
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

uint64_t VTMotionEstimationSessionSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID((CFTypeRef)a1);
    MEMORY[0x199705810](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession);
    if (v6 == sVTMotionEstimationSessionID && !*(unsigned char *)(a1 + 16) && a2)
    {
      uint64_t v7 = *(void *)(a1 + 152);
      if (v7)
      {
        return VTCompressionSessionRemote_SetProperty(v7, a2, (uint64_t)a3);
      }
      MEMORY[0x199705810](&sCreateSupportedPropertyDictionaryOnce_0, vtMotionEstimationSessionCreateSupportedPropertyDictionary);
      if (sVTMotionEstimationSessionSupportedPropertyDictionary)
      {
        if (!CFDictionaryContainsKey((CFDictionaryRef)sVTMotionEstimationSessionSupportedPropertyDictionary, a2)) {
          goto LABEL_15;
        }
        if (!CFEqual(a2, @"ClientPID")) {
          return 4294954396;
        }
        if (!a3 || (CFTypeID v9 = CFGetTypeID(a3), v9 == CFNumberGetTypeID()))
        {
          CFNumberGetValue(a3, kCFNumberSInt32Type, (void *)(a1 + 160));
LABEL_15:
          uint64_t v10 = *(void *)(a1 + 48);
          if (v10)
          {
            uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v12 = v11 ? v11 : 0;
            CFTypeID v13 = *(void (**)(uint64_t, const void *, const __CFNumber *))(v12 + 56);
            if (v13) {
              v13(v10, a2, a3);
            }
          }
          return 0;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t VTMotionEstimationSessionCopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, void *a4)
{
  if (a1
    && (CFTypeID v8 = CFGetTypeID((CFTypeRef)a1),
        MEMORY[0x199705810](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession), v8 == sVTMotionEstimationSessionID)&& !*(unsigned char *)(a1 + 16)&& a2&& a4)
  {
    uint64_t v9 = *(void *)(a1 + 152);
    if (v9)
    {
      return VTCompressionSessionRemote_CopyProperty(v9);
    }
    if (FigCFEqual())
    {
      int v12 = *(_DWORD *)(a1 + 40);
      uint64_t v11 = (const void *)(a1 + 40);
      if (v12)
      {
        CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        int v14 = v11;
LABEL_13:
        CFDictionaryRef Copy = CFNumberCreate(v13, kCFNumberSInt32Type, v14);
LABEL_14:
        uint64_t v16 = Copy;
        uint64_t result = 0;
LABEL_23:
        *a4 = v16;
        return result;
      }
      goto LABEL_27;
    }
    if (FigCFEqual())
    {
      uint64_t result = 0;
      if (*(unsigned char *)(a1 + 44)) {
        uint64_t v17 = (void **)MEMORY[0x1E4F1CFD0];
      }
      else {
        uint64_t v17 = (void **)MEMORY[0x1E4F1CFC8];
      }
      uint64_t v16 = *v17;
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      CFStringRef v18 = *(const __CFString **)(a1 + 24);
      if (v18)
      {
        CFDictionaryRef Copy = (void *)CFStringCreateCopy(a3, v18);
        goto LABEL_14;
      }
      goto LABEL_27;
    }
    if (FigCFEqual())
    {
      if (*(void *)(a1 + 24))
      {
        CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        int v14 = (const void *)(a1 + 160);
        goto LABEL_13;
      }
LABEL_27:
      uint64_t result = 0;
      *a4 = 0;
      return result;
    }
    uint64_t v19 = *(void *)(a1 + 48);
    if (v19)
    {
      return VTVideoEncoderCopyProperty(v19, a2, (uint64_t)a3, (uint64_t)a4);
    }
    else
    {
      return 4294954396;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTMotionEstimationSessionSetProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v8 = a1;
  if (a1
    && (CFTypeID v4 = CFGetTypeID((CFTypeRef)a1),
        MEMORY[0x199705810](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession), v4 == sVTMotionEstimationSessionID)&& !*(unsigned char *)(a1 + 16)&& a2&& (CFTypeID v5 = CFGetTypeID(a2), v5 == CFDictionaryGetTypeID()))
  {
    uint64_t v6 = *(void *)(a1 + 152);
    if (v6)
    {
      return VTCompressionSessionRemote_SetProperties(v6, a2);
    }
    else
    {
      uint64_t v9 = 0;
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)vtMotionEstimationSessionSetOneProperty, &v8);
      return v9;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTMotionEstimationSessionCopySerializableProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1
    && (CFTypeID v5 = CFGetTypeID((CFTypeRef)a1),
        MEMORY[0x199705810](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession), v5 == sVTMotionEstimationSessionID)&& !*(unsigned char *)(a1 + 16)&& a3)
  {
    uint64_t v6 = *(void *)(a1 + 152);
    if (v6)
    {
      return VTCompressionSessionRemote_CopySerializableProperties(v6);
    }
  }
  else
  {
    FigSignalErrorAt();
  }

  return FigSignalErrorAt();
}

double vtMotionEstimationSessionInit(uint64_t a1)
{
  if (a1)
  {
    *(void *)(a1 + 160) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t vtMotionEstimationSessionFinalize(uint64_t a1)
{
  if (a1
    && (CFTypeID v2 = CFGetTypeID((CFTypeRef)a1),
        MEMORY[0x199705810](&VTMotionEstimationSessionGetTypeID_sVTMotionEstimationSessionOnce, RegisterVTMotionEstimationSession), v2 == sVTMotionEstimationSessionID))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v5 = v4 ? v4 : 0;
      uint64_t v6 = *(void (**)(uint64_t))(v5 + 24);
      if (v6) {
        v6(v3);
      }
    }
    vtMotionEstimationSessionCompleteFramesInternal(a1);
    VTMotionEstimationSessionInvalidate(a1);
    uint64_t v7 = *(const void **)(a1 + 24);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 24) = 0;
    }
    uint64_t v8 = *(const void **)(a1 + 48);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 48) = 0;
    }
    uint64_t v9 = *(const void **)(a1 + 64);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 64) = 0;
    }
    uint64_t v10 = *(const void **)(a1 + 72);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 72) = 0;
    }
    uint64_t v11 = *(const void **)(a1 + 88);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 88) = 0;
    }
    int v12 = *(const void **)(a1 + 96);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a1 + 96) = 0;
    }
    CFAllocatorRef v13 = *(const void **)(a1 + 104);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a1 + 104) = 0;
    }
    int v14 = *(const void **)(a1 + 120);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(a1 + 120) = 0;
    }
    uint64_t v15 = *(NSObject **)(a1 + 128);
    if (v15)
    {
      dispatch_release(v15);
      *(void *)(a1 + 128) = 0;
    }
    uint64_t v16 = *(const void **)(a1 + 152);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(a1 + 152) = 0;
    }
    uint64_t result = *(void *)(a1 + 144);
    if (result) {
      uint64_t result = FigSimpleMutexDestroy();
    }
    *(void *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t vtMotionEstimationSessionCopyDebugDesc()
{
  return 0;
}

void vtMotionEstimationSessionCreateSupportedPropertyDictionary()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFTypeID v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v4 = CFDictionaryCreateMutable(v0, 0, v1, v2);
  sVTMotionEstimationSessionSupportedPropertyDictionary = (uint64_t)CFDictionaryCreateMutable(v0, 0, v1, v2);
  CFDictionarySetValue(Mutable, @"ReadWriteStatus", @"ReadOnly");
  CFDictionarySetValue(v4, @"ReadWriteStatus", @"ReadWrite");
  CFDictionarySetValue((CFMutableDictionaryRef)sVTMotionEstimationSessionSupportedPropertyDictionary, @"MotionVectorSize", Mutable);
  CFDictionarySetValue((CFMutableDictionaryRef)sVTMotionEstimationSessionSupportedPropertyDictionary, @"TrueMotion", Mutable);
  CFDictionarySetValue((CFMutableDictionaryRef)sVTMotionEstimationSessionSupportedPropertyDictionary, @"Label", Mutable);
  CFDictionarySetValue((CFMutableDictionaryRef)sVTMotionEstimationSessionSupportedPropertyDictionary, @"ClientPID", v4);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

uint64_t vtMotionEstimationSessionSetOneProperty(const void *a1, const __CFNumber *a2, uint64_t a3)
{
  uint64_t result = VTMotionEstimationSessionSetProperty(*(void *)a3, a1, a2);
  if (!*(_DWORD *)(a3 + 8)) {
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

BOOL vtDoesKeyMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FigCFDictionaryGetValueIfPresent()
      || !a4
      || !FigCFDictionaryGetValueIfPresent()
      || FigCFEqual() != 0;
}

void *vtCloneFrameTrackingInfo(const __CFAllocator *a1, long long *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = CFAllocatorAllocate(a1, 40, 0);
  long long v5 = *a2;
  long long v4 = a2[1];
  v3[4] = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v3 = v5;
  *((_OWORD *)v3 + 1) = v4;
  v3[4] = _Block_copy(*((const void **)a2 + 4));
  CFDictionaryRef v6 = (const __CFDictionary *)*((void *)a2 + 3);
  if (v6) {
    v3[3] = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6);
  }
  return v3;
}

void vtFreeFrameTrackingInfo(const __CFAllocator *a1, uint64_t a2)
{
  if (a2)
  {
    _Block_release(*(const void **)(a2 + 32));
    long long v4 = *(const void **)(a2 + 24);
    if (v4) {
      CFRelease(v4);
    }
    CFAllocatorDeallocate(a1, (void *)a2);
  }
}

CFTypeRef VTMotionEstimationProcessorCopyFormattingDesc()
{
  return CFRetain(@"[VTMotionEstimationProcessor]");
}

uint64_t init_decode_table(_WORD *a1, int a2, int a3, uint64_t a4, uint64_t a5, __int16 a6, __int16 a7, _WORD *a8, _WORD *a9)
{
  uint64_t v10 = 1 << a7;
  int v11 = (1 << a7) - 1;
  int v12 = (unsigned __int16)*a9;
  if (a2 > a3)
  {
    int v13 = 0;
LABEL_3:
    *a9 = v12;
    if (((unsigned __int16)v10 & (unsigned __int16)v12) != 0)
    {
      __int16 v14 = 0;
      uint64_t v15 = 1 << a7;
      do
      {
        int v16 = v15 << 16;
        LODWORD(v15) = (__int16)v15 >> 1;
        ++v14;
      }
      while (((unsigned __int16)v12 & (v16 >> 17)) != 0);
      if (!a8)
      {
LABEL_8:
        if (v13 < (int)v10) {
          memset_pattern16(a1, &unk_193E7F170, 2 * (v11 - v13) + 2);
        }
        return a6;
      }
    }
    else
    {
      __int16 v14 = 0;
      if (!a8) {
        goto LABEL_8;
      }
    }
    *a8 = v14;
    goto LABEL_8;
  }
  char v18 = 0;
  int v13 = 0;
  uint64_t v19 = &a1[v10];
  uint64_t v40 = a8;
  while (1)
  {
    int v20 = *(unsigned __int8 *)(a4 + (__int16)a2);
    if (*(unsigned char *)(a4 + (__int16)a2)) {
      break;
    }
LABEL_41:
    v12 *= 2;
    a2 = (__int16)(a2 + 1);
    a8 = v40;
    if (a2 > a3) {
      goto LABEL_3;
    }
  }
  char v21 = a3 - a2;
  __int16 v22 = a7 - (a3 - a2);
  while (1)
  {
    BOOL v23 = a3 == 12;
    int v24 = *(char *)(a5 + a6);
    __int16 v25 = *(unsigned __int8 *)(a5 + a6);
    int v26 = v24 & 0xF;
    if ((v24 & 0xF) == 0) {
      BOOL v23 = 0;
    }
    if (v26 >= 8) {
      BOOL v23 = 0;
    }
    if (v24 < 0) {
      BOOL v23 = 0;
    }
    BOOL v27 = 13 - (__int16)a2 > v26 && v23;
    if (v27)
    {
      unsigned int v28 = (v13 >> (12 - (v26 + v22))) & ~(-1 << v26);
      int v29 = 1 << (v26 - 1);
      char v30 = v28 >= (unsigned __int16)v29 ? 0 : 2 * v29 - 1;
      __int16 v31 = (16 * v25) & 0xF00 | (((_WORD)v26 + v22) << 11) | (v28 - v30) | 0x8000;
      char v18 = a7 - v21;
    }
    else
    {
      __int16 v31 = ((a7 - ((_WORD)a3 - (_WORD)a2)) << 8) | v25;
    }
    if (a1 >= v19) {
      return 4294954387;
    }
    *a1++ = v31;
    int v32 = ((unsigned __int16)++v12 << v21) & v11;
    if (++v13 < v32)
    {
      char v33 = a7 - (v26 + v18);
      int v34 = ~(-1 << v26);
      unsigned int v35 = (0x8000 << v26) >> 16;
      int v36 = (0x7FFFFFFF << v26) | 1;
      while (1)
      {
        if (v27)
        {
          unsigned int v37 = (v13 >> v33) & v34;
          if (v35 <= v37) {
            char v38 = 0;
          }
          else {
            char v38 = v36;
          }
          __int16 v31 = v31 & 0xFF00 | (v38 + v37);
        }
        if (a1 >= v19) {
          return 4294954387;
        }
        *a1++ = v31;
        if (v32 == ++v13)
        {
          int v13 = ((unsigned __int16)v12 << v21) & v11;
          break;
        }
      }
    }
    ++a6;
    int v39 = (__int16)v20--;
    if (v39 <= 1) {
      goto LABEL_41;
    }
  }
}

uint64_t MakeDecodeTable(_WORD *a1, uint64_t a2, uint64_t a3, __int16 *a4)
{
  __int16 v19 = 0;
  a4[3] = 1;
  *a4 = (__int16)a1;
  uint64_t v7 = 16;
  do
  {
    __int16 v8 = v7 - 1;
    if (v7 < 0) {
      break;
    }
  }
  while (!*(unsigned __int8 *)(a2 + v7--));
  int v10 = (__int16)(v8 + 1);
  if (v10 < 1) {
    return -12909;
  }
  if (v10 < (int)a1)
  {
    *a4 = v8 + 1;
    LOWORD(a1) = v8 + 1;
  }
  int v11 = (_WORD *)*((void *)a4 + 1);
  if (!v11)
  {
    a1 = malloc_type_malloc(2 * (1 << (char)a1), 0x1000040BDFB0063uLL);
    *((void *)a4 + 1) = a1;
    if (!a1) {
      return -12904;
    }
    int v11 = a1;
    LOWORD(a1) = *a4;
  }
  __int16 inited = init_decode_table(v11, 1, (__int16)a1, a2, a3, 0, (__int16)a1, a4 + 2, &v19);
  if ((inited & 0x8000) == 0)
  {
    __int16 v13 = inited;
    __int16 v14 = v10 - a4[2];
    int v15 = *a4;
    if (v15 >= v10) {
      __int16 v14 = 1;
    }
    a4[1] = v14;
    int v16 = (_WORD *)*((void *)a4 + 2);
    if (v16)
    {
LABEL_16:
      if (v10 <= (__int16)v15)
      {
        *(_DWORD *)int v16 = -2147450880;
      }
      else if ((init_decode_table(v16, (__int16)(v15 + 1), v10, a2, a3, v13, a4[1], 0, &v19) & 0x80000000) != 0)
      {
        return -12909;
      }
      return 0;
    }
    int v16 = malloc_type_malloc(2 * (1 << v14), 0x1000040BDFB0063uLL);
    *((void *)a4 + 2) = v16;
    if (v16)
    {
      LOWORD(v15) = *a4;
      goto LABEL_16;
    }
    free(*((void **)a4 + 1));
    *((void *)a4 + 1) = 0;
    return -12904;
  }
  return -12909;
}

uint64_t InitDecodeTables(__int16 *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 24);
  uint64_t DecodeTable = MakeDecodeTable((_WORD *)0xC, (uint64_t)&unk_193E7F008, (uint64_t)&byte_193E7F02A, a1 + 24);
  if (DecodeTable
    || (uint64_t DecodeTable = MakeDecodeTable((_WORD *)0xC, (uint64_t)&unk_193E7F019, (uint64_t)&byte_193E7F0CC, a1 + 36),
        DecodeTable)
    || (uint64_t DecodeTable = MakeDecodeTable((_WORD *)5, (uint64_t)&unk_193E7EFE6, (uint64_t)&unk_193E7EFDA, a1),
        DecodeTable)
    || (uint64_t DecodeTable = MakeDecodeTable((_WORD *)5, (uint64_t)&unk_193E7EFF7, (uint64_t)&unk_193E7EFDA, a1 + 12),
        DecodeTable))
  {
    DisposeDecodeTable(v2);
    DisposeDecodeTable((uint64_t)(a1 + 36));
    DisposeDecodeTable((uint64_t)a1);
    DisposeDecodeTable((uint64_t)(a1 + 12));
  }
  else
  {
    a1[3] = 0;
    a1[39] = 0;
    a1[27] = 0;
    a1[15] = 0;
  }
  return DecodeTable;
}

void DisposeDecodeTable(uint64_t a1)
{
  if (*(_WORD *)(a1 + 6))
  {
    free(*(void **)(a1 + 8));
    *(void *)(a1 + 8) = 0;
    free(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
}

uint64_t MuxedAlphaDecoder_CreateInstance()
{
  VTVideoDecoderGetClassID();
  uint64_t v0 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v0;
}

uint64_t MuxedAlphaDecoder_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 1;
    VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(DerivedStorage + 40));
    VTDecompressionSessionInvalidate(*(VTDecompressionSessionRef *)(v1 + 72));
  }
  return 0;
}

void MuxedAlphaDecoder_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  uint64_t v1 = (const void *)DerivedStorage[2];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[2] = 0;
  }
  uint64_t v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  long long v4 = (const void *)DerivedStorage[6];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[6] = 0;
  }
  long long v5 = (const void *)DerivedStorage[7];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[7] = 0;
  }
  CFDictionaryRef v6 = (const void *)DerivedStorage[3];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[3] = 0;
  }
  uint64_t v7 = (const void *)DerivedStorage[8];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[8] = 0;
  }
  __int16 v8 = (const void *)DerivedStorage[9];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[9] = 0;
  }
  uint64_t v9 = (const void *)DerivedStorage[10];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[10] = 0;
  }
  int v10 = (const void *)DerivedStorage[11];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[11] = 0;
  }
  int v11 = (const void *)DerivedStorage[16];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[16] = 0;
  }
  int v12 = (const void *)DerivedStorage[18];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[18] = 0;
  }
  __int16 v13 = DerivedStorage[13];
  if (v13)
  {
    dispatch_release(v13);
    DerivedStorage[13] = 0;
  }
  __int16 v14 = DerivedStorage[14];
  if (v14)
  {
    dispatch_release(v14);
    DerivedStorage[14] = 0;
  }
  int v15 = DerivedStorage[12];
  if (v15)
  {
    dispatch_release(v15);
    DerivedStorage[12] = 0;
  }
}

__CFString *MuxedAlphaDecoder_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<MuxedAlphaDecoder %p>", a1);
  return Mutable;
}

uint64_t MuxedAlphaDecoder_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"SublayerDecoderSpecification"))
  {
    __int16 v8 = *(const void **)(DerivedStorage + 24);
    if (v8) {
      CFTypeRef v9 = CFRetain(v8);
    }
    else {
      CFTypeRef v9 = 0;
    }
    uint64_t result = 0;
    *a4 = v9;
  }
  else
  {
    int v10 = *(const void **)(DerivedStorage + 40);
    if (v10)
    {
      return VTSessionCopyProperty(v10, a2, a3, a4);
    }
    else
    {
      return 4294954393;
    }
  }
  return result;
}

uint64_t MuxedAlphaDecoder_SetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"SublayerDecoderSpecification"))
  {
    if (CFEqual(a2, @"RequestedMVHEVCVideoLayerIDs"))
    {
      if ((_os_feature_enabled_impl() & 1) == 0) {
        goto LABEL_22;
      }
      if (!FigVideoFormatDescriptionContainsStereoMultiviewVideo())
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        return FigSignalErrorAt();
      }
      CFTypeRef v9 = *(const void **)(DerivedStorage + 56);
      *(void *)(DerivedStorage + 56) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v9) {
        CFRelease(v9);
      }
      int v10 = *(const void **)(DerivedStorage + 40);
      if (v10 && *(void *)(DerivedStorage + 72))
      {
        uint64_t v11 = VTSessionSetProperty(v10, a2, a3);
        VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 72), a2, a3);
        *(unsigned char *)(DerivedStorage + 136) = 1;
        return v11;
      }
    }
    else
    {
      int v12 = *(const void **)(DerivedStorage + 40);
      if (v12 && *(void *)(DerivedStorage + 72))
      {
        uint64_t v11 = VTSessionSetProperty(v12, a2, a3);
        VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 72), a2, a3);
        return v11;
      }
    }
    return 4294954393;
  }
  if (a3)
  {
    CFTypeID v6 = CFGetTypeID(a3);
    if (v6 == CFDictionaryGetTypeID())
    {
      uint64_t v7 = *(const void **)(DerivedStorage + 24);
      *(void *)(DerivedStorage + 24) = a3;
      CFRetain(a3);
      if (v7) {
        CFRelease(v7);
      }
      return 0;
    }
  }
LABEL_22:

  return FigSignalErrorAt();
}

uint64_t MuxedAlphaDecoder_StartSession(uint64_t a1, uint64_t a2, const void *a3)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  unint64_t v47 = 0;
  float v48 = 0;
  __int16 v46 = 0;
  uint64_t v7 = *(const void **)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 8) = a2;
  *(void *)(DerivedStorage + 16) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v7) {
    CFRelease(v7);
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 48) = Mutable;
  if (Mutable)
  {
    CFMutableArrayRef v10 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
    *(void *)(DerivedStorage + 80) = v10;
    if (v10)
    {
      FigVideoFormatDescriptionDetermineCompatibilityWithCoreMediaRequirementsForHEVCWithAlpha();
      if (FigVideoFormatDescriptionContainsStereoMultiviewVideo())
      {
        if ((_os_feature_enabled_impl() & 1) == 0) {
          return FigSignalErrorAt();
        }
        uint64_t v51 = 0;
        VTVideoDecoderGetCMBaseObject(a1);
        CMBaseObjectGetDerivedStorage();
        uint64_t v11 = FigVideoFormatDescriptionCopyFigTagCollectionArrayWithExtraChannels();
        if (!v11) {
          uint64_t v11 = FigSignalErrorAt();
        }
        uint64_t v18 = v11;
        if (v11) {
          return v18;
        }
        uint64_t FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription = FigHEVCBridge_CreateFormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription();
        if (FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription) {
          return FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
        }
        uint64_t FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription = FigHEVCBridge_CreateFormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription();
        if (FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription) {
          return FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
        }
      }
      else
      {
        LODWORD(numberOfTagsCopied) = 0;
        *(void *)&tagBuffer.CMTagCategory category = 0;
        uint64_t v51 = 0;
        VTVideoDecoderGetCMBaseObject(a1);
        uint64_t v12 = CMBaseObjectGetDerivedStorage();
        CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(v12 + 16));
        if (Extensions
          && (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F1EE20])) != 0
          && (int v15 = CFDictionaryGetValue(Value, @"hvcC")) != 0
          && (CFTypeID v16 = CFGetTypeID(v15), v16 == CFDataGetTypeID()))
        {
          uint64_t HEVCParameterSetAtIndex = FigHEVCBridge_GetHEVCParameterSetAtIndex();
          if (!HEVCParameterSetAtIndex) {
            uint64_t HEVCParameterSetAtIndex = FigHEVCBridge_GetVPSAlphaChannelNuhLayerId();
          }
          uint64_t v18 = HEVCParameterSetAtIndex;
        }
        else
        {
          uint64_t v18 = 4294954586;
        }
        LODWORD(numberOfTagsCopied) = 1;
        if (v18) {
          return v18;
        }
        FigCFArrayAppendInt32();
        FigCFArrayAppendInt32();
        uint64_t FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription = FigHEVCBridge_CreateSelectedLayerFormatDescriptionFromMuxedAlphaFormatDescription();
        if (FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription) {
          return FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
        }
        uint64_t FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription = FigHEVCBridge_CreateSelectedLayerFormatDescriptionFromMuxedAlphaFormatDescription();
        if (FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription) {
          return FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
        }
      }
      FigCFArrayGetInt32AtIndex();
      int v20 = (uint64_t *)(DerivedStorage + 40);
      uint64_t FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription = alphadecoder_createSubLayerVTDecompressionSession(a1, 0, *(const void **)(DerivedStorage + 24), *(const opaqueCMFormatDescription **)(DerivedStorage + 32), (uint64_t)&kSupportedBaseLayerPixelFormats, 18, (VTSessionRef *)(DerivedStorage + 40), (BOOL *)&v46 + 1);
      if (!FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription)
      {
        uint64_t v21 = *v20;
        tagBuffer.CMTagCategory category = kCMTagCategory_Undefined;
        CFDictionaryRef v22 = alphadecoder_copyPixelBufferAttributesFromDecompressionSession(v21);
        if (v22)
        {
          CFDictionaryRef v23 = v22;
          CFArrayRef v24 = (const __CFArray *)CFDictionaryGetValue(v22, (const void *)*MEMORY[0x1E4F24D70]);
          if (v24
            && ((ValueAtIndex = v24, CFTypeID v26 = CFGetTypeID(v24), v26 != CFArrayGetTypeID())
             || CFArrayGetCount(ValueAtIndex) >= 1
             && (CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0)) != 0)
            && (CFTypeID v27 = CFGetTypeID(ValueAtIndex), v27 == CFNumberGetTypeID())
            && (CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &tagBuffer),
                (CMTagCategory category = tagBuffer.category) != kCMTagCategory_Undefined))
          {
            uint64_t v18 = 0;
          }
          else
          {
            uint64_t v18 = FigSignalErrorAt();
            CMTagCategory category = kCMTagCategory_Undefined;
          }
          CFRelease(v23);
          if (v18) {
            return v18;
          }
        }
        else
        {
          uint64_t v18 = FigSignalErrorAt();
          CMTagCategory category = kCMTagCategory_Undefined;
          if (v18) {
            return v18;
          }
        }
        int v29 = 875704422;
        int v30 = 1982882104;
        if ((int)category > 1982882103)
        {
          if ((int)category > 2016567607)
          {
            if ((int)category > 2016686641)
            {
              if (category == 2016686642)
              {
                int v29 = 1278226488;
                int v30 = 2016567608;
              }
              else
              {
                if (category != 2016687156)
                {
                  int v31 = 2016698680;
                  goto LABEL_59;
                }
                int v29 = 1278226488;
                int v30 = 2016698680;
              }
LABEL_61:
              unint64_t v47 = __PAIR64__(v30, v29);
              if (HIBYTE(v46)) {
                char v33 = (BOOL *)&v46;
              }
              else {
                char v33 = 0;
              }
              uint64_t FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription = alphadecoder_createSubLayerVTDecompressionSession(a1, 1, *(const void **)(DerivedStorage + 24), *(const opaqueCMFormatDescription **)(DerivedStorage + 64), (uint64_t)&v47, 1, (VTSessionRef *)(DerivedStorage + 72), v33);
              if (!FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription)
              {
                unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(DerivedStorage + 16));
                uint64_t v35 = alphadecoder_createPixelBufferAttributesDictionary(Dimensions, HIDWORD(Dimensions), (uint64_t)&v47 + 4, 1, &v48);
                int v36 = v48;
                if (!v35)
                {
                  VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 8), v48);
                  if (HIBYTE(v46)) {
                    BOOL v37 = v46 == 0;
                  }
                  else {
                    BOOL v37 = 1;
                  }
                  char v38 = !v37;
                  *(unsigned char *)(DerivedStorage + 124) = v38;
                  if (!v37)
                  {
                    CFDictionaryRef v39 = alphadecoder_copyPixelBufferAttributesFromDecompressionSession(*v20);
                    if (v39) {
                      VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 8), v39);
                    }
                    VTDecompressionSessionSetDecoderSessionAsPixelBufferSource(*v20, a2);
                    VTDecompressionSessionSetDecoderSessionAsPixelBufferSource(*(void *)(DerivedStorage + 72), a2);
                    CFMutableDictionaryRef v40 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                    if (!v40)
                    {
                      uint64_t v18 = FigSignalErrorAt();
                      if (v36) {
                        goto LABEL_86;
                      }
                      goto LABEL_87;
                    }
                    CFMutableDictionaryRef v41 = v40;
                    FigCFDictionarySetBoolean();
                    CFMutableArrayRef v42 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
                    *(void *)(DerivedStorage + 128) = v42;
                    if (v42)
                    {
                      if (!FigVideoFormatDescriptionContainsStereoMultiviewVideo())
                      {
                        CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 128), v41);
                        uint64_t v18 = 0;
                        goto LABEL_91;
                      }
                      tagBuffer.CMTagCategory category = kCMTagCategory_Undefined;
                      FigCFArrayGetInt32AtIndex();
                      FigCFDictionarySetInt32();
                      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 128), v41);
                      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v8, 0, v41);
                      if (MutableCopy)
                      {
                        CFMutableDictionaryRef v44 = MutableCopy;
                        FigCFArrayGetInt32AtIndex();
                        FigCFDictionarySetInt32();
                        CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 128), v44);
                        CFRelease(v41);
                        CFRelease(v44);
                        uint64_t v18 = 0;
                        if (!v36) {
                          goto LABEL_87;
                        }
LABEL_86:
                        CFRelease(v36);
                        goto LABEL_87;
                      }
                    }
                    uint64_t v18 = FigSignalErrorAt();
LABEL_91:
                    CFRelease(v41);
                    if (v36) {
                      goto LABEL_86;
                    }
LABEL_87:
                    if (v39) {
                      CFRelease(v39);
                    }
                    return v18;
                  }
                  if (CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(DerivedStorage + 32)) == 1752589105)
                  {
                    uint64_t v18 = 0;
                    goto LABEL_85;
                  }
                  uint64_t v35 = FigSignalErrorAt();
                }
                uint64_t v18 = v35;
LABEL_85:
                CFDictionaryRef v39 = 0;
                if (!v36) {
                  goto LABEL_87;
                }
                goto LABEL_86;
              }
              return FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
            }
            if (category != 2016567608)
            {
              if (category == 2016686640)
              {
                int v30 = 2016436536;
                int v29 = 1278226488;
              }
              goto LABEL_61;
            }
            goto LABEL_60;
          }
          if ((int)category > 1983144247)
          {
            if (category == 1983144248) {
              goto LABEL_60;
            }
            int v31 = 2016436536;
          }
          else
          {
            if (category == 1982882104) {
              goto LABEL_60;
            }
            int v31 = 1983013176;
          }
LABEL_59:
          if (category != v31) {
            goto LABEL_61;
          }
          goto LABEL_60;
        }
        if ((int)category > 645411383)
        {
          if ((int)category > 875704949)
          {
            if (category == 875704950)
            {
              int v29 = 1278226488;
              int v30 = 1983013176;
            }
            else if (category == 875836534)
            {
              int v29 = 1278226488;
              int v30 = 1983144248;
            }
            goto LABEL_61;
          }
          if (category == 645411384)
          {
LABEL_60:
            int v30 = category;
            int v29 = category;
            goto LABEL_61;
          }
          unsigned __int16 v32 = 13368;
        }
        else
        {
          if ((int)category <= 645280823)
          {
            if (category == 645279800) {
              goto LABEL_60;
            }
            int v31 = 645280312;
            goto LABEL_59;
          }
          if (category == 645280824) {
            goto LABEL_60;
          }
          unsigned __int16 v32 = 12344;
        }
        int v31 = v32 | 0x26780000;
        goto LABEL_59;
      }
      return FormatDescriptionWithSelectedLayersFromMultiviewMuxedAlphaFormatDescription;
    }
  }

  return FigSignalErrorAt();
}

uint64_t MuxedAlphaDecoder_DecodeFrame(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3, int a4, int *a5)
{
  LODWORD(v6) = a4;
  uint64_t v9 = a1;
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v108 = 0;
  uint32x4_t v109 = (CMSampleBufferRef *)&v108;
  uint64_t v110 = 0x4000000000;
  long long v111 = 0u;
  long long v112 = 0u;
  uint64_t v113 = 0;
  uint64_t v102 = 0;
  uint16x8_t v103 = (CMSampleBufferRef *)&v102;
  uint64_t v104 = 0x4000000000;
  long long v105 = 0u;
  long long v106 = 0u;
  uint64_t v107 = 0;
  CFAllocatorRef blockAllocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  v100[0] = 0;
  v100[1] = v100;
  v100[2] = 0x2000000000;
  int v101 = 0;
  uint64_t v96 = 0;
  uint32x4_t v97 = (CVPixelBufferRef *)&v96;
  uint64_t v98 = 0x2000000000;
  uint64_t v99 = 0;
  uint64_t v92 = 0;
  float16x8_t v93 = &v92;
  uint64_t v94 = 0x2000000000;
  uint64_t v95 = 0;
  v90[0] = 0;
  v90[1] = v90;
  v90[2] = 0x2000000000;
  int v91 = 0;
  FigCFDictionarySetInt64();
  if (!*(unsigned char *)(DerivedStorage + 124)
    || (Decryptor = (const void *)FigSampleBufferGetDecryptor()) == 0
    || (__int16 v13 = Decryptor, v14 = *(const void **)(DerivedStorage + 144), Decryptor == v14))
  {
    CFDictionaryRef cf = 0;
    goto LABEL_9;
  }
  *(void *)(DerivedStorage + 144) = Decryptor;
  CFRetain(Decryptor);
  if (v14) {
    CFRelease(v14);
  }
  LODWORD(blockBufferOut[0]) = 0;
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  float v50 = *(uint64_t (**)(const void *, CMBlockBufferRef *))(v16 + 16);
  if (!v50)
  {
    uint64_t PixelBufferWithOptions = 4294954514;
LABEL_89:
    CFDictionaryRef cf = 0;
LABEL_90:
    CFDictionaryRef v23 = 0;
    goto LABEL_91;
  }
  uint64_t v51 = v50(v13, blockBufferOut);
  if (v51)
  {
    uint64_t PixelBufferWithOptions = v51;
    goto LABEL_89;
  }
  uint64_t v52 = 3;
  if (((uint64_t)blockBufferOut[0] & 1) == 0) {
    uint64_t v52 = 1;
  }
  uint64_t v53 = 7;
  if (((uint64_t)blockBufferOut[0] & 2) == 0) {
    uint64_t v53 = v52;
  }
  if (*(void *)(DerivedStorage + 152) == v53
    || (*(void *)(DerivedStorage + 152) = v53,
        VTVideoDecoderGetCMBaseObject(v9),
        (uint64_t v54 = CMBaseObjectGetDerivedStorage()) == 0))
  {
    CFDictionaryRef v55 = 0;
  }
  else
  {
    float32x4_t v67 = a5;
    int v69 = v6;
    CFDictionaryRef v55 = alphadecoder_copyPixelBufferAttributesFromDecompressionSession(*(void *)(v54 + 40));
    if (v55)
    {
      CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
      uint16x8_t v57 = (const void *)*MEMORY[0x1E4F24D20];
      CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D20]);
      float16x8_t v58 = (const void *)FigCFDictionaryCreateMutableCopy();
      FigCFDictionarySetInt64();
      CFDictionarySetValue(MutableCopy, v57, v58);
      CFRelease(v55);
      if (v58) {
        CFRelease(v58);
      }
      CFDictionaryRef v55 = MutableCopy;
      a5 = v67;
      if (MutableCopy) {
        VTDecoderSessionSetPixelBufferAttributes(*(uint64_t **)(DerivedStorage + 8), MutableCopy);
      }
      LODWORD(v6) = v69;
    }
  }
  CFDictionaryRef cf = v55;
LABEL_9:
  dispatch_group_enter(*(dispatch_group_t *)(DerivedStorage + 104));
  ++*(_DWORD *)(DerivedStorage + 120);
  uint64_t v17 = *(NSObject **)(DerivedStorage + 112);
  dispatch_time_t v18 = dispatch_time(0, 10000000000);
  if (dispatch_semaphore_wait(v17, v18) || !CMSampleBufferDataIsReady(a3))
  {
    uint64_t DerivedSampleBuffer = FigSignalErrorAt();
LABEL_104:
    uint64_t PixelBufferWithOptions = DerivedSampleBuffer;
    goto LABEL_90;
  }
  int8x16_t v66 = a5;
  unsigned int v68 = v6;
  CMSampleBufferGetDataBuffer(a3);
  __int16 v19 = v109;
  int v20 = v103;
  VTVideoDecoderGetCMBaseObject(v9);
  CMBaseObjectGetDerivedStorage();
  CVPixelBufferRef v118 = 0;
  blockBufferOut[0] = 0;
  CMBlockBufferRef v116 = 0;
  dataPointerOut = 0;
  long long v114 = 0;
  size_t v115 = 0;
  uint64_t DataPointer = FigHEVCBridge_ParseMuxedAlphaFrameAndWriteSelectedLayerIDsNALUnitsToBuffer();
  if (DataPointer
    || (uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock(blockAllocator, 0, (size_t)v118, blockAllocator, 0, 0, (size_t)v118, 1u, blockBufferOut), DataPointer)|| (uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut[0], 0, 0, 0, &dataPointerOut), DataPointer)|| (uint64_t DataPointer = FigHEVCBridge_ParseMuxedAlphaFrameAndWriteSelectedLayerIDsNALUnitsToBuffer(), DataPointer)|| (uint64_t DataPointer = FigHEVCBridge_ParseMuxedAlphaFrameAndWriteSelectedLayerIDsNALUnitsToBuffer(), DataPointer)|| (uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock(blockAllocator, 0, v115, blockAllocator, 0,
                        0,
                        v115,
                        1u,
                        &v116),
        DataPointer)
    || (uint64_t DataPointer = CMBlockBufferGetDataPointer(v116, 0, 0, 0, &v114), DataPointer)
    || (uint64_t DataPointer = FigHEVCBridge_ParseMuxedAlphaFrameAndWriteSelectedLayerIDsNALUnitsToBuffer(), DataPointer))
  {
    uint64_t PixelBufferWithOptions = DataPointer;
    if (blockBufferOut[0]) {
      CFRelease(blockBufferOut[0]);
    }
    if (v116) {
      CFRelease(v116);
    }
    goto LABEL_90;
  }
  v19[3] = blockBufferOut[0];
  v20[3] = v116;
  uint64_t DerivedSampleBuffer = alphadecoder_createDerivedSampleBuffer(a3, v109[3], *(const opaqueCMFormatDescription **)(DerivedStorage + 32), v109 + 4);
  if (DerivedSampleBuffer) {
    goto LABEL_104;
  }
  uint64_t DerivedSampleBuffer = alphadecoder_createDerivedSampleBuffer(a3, v103[3], *(const opaqueCMFormatDescription **)(DerivedStorage + 64), v103 + 4);
  if (DerivedSampleBuffer) {
    goto LABEL_104;
  }
  CFDictionaryRef v23 = dispatch_group_create();
  uint64_t v6 = v6;
  CFArrayRef v24 = v66;
  if ((v6 & 2) == 0)
  {
    if (*(unsigned char *)(DerivedStorage + 136))
    {
      uint64_t v25 = v9;
      CFTypeID v26 = a2;
      uint64_t v63 = v25;
      int8x8_t v64 = Mutable;
      int8x8_t v62 = v93;
      VTVideoDecoderGetCMBaseObject(v25);
      uint64_t v27 = CMBaseObjectGetDerivedStorage();
      dataPointerOut = 0;
      CVPixelBufferRef v118 = 0;
      CMBlockBufferRef v116 = 0;
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v27 + 48));
      int v29 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
      int v30 = CFArrayCreateMutable(blockAllocator, 0, MEMORY[0x1E4F1D510]);
      int v31 = CFArrayCreateMutable(blockAllocator, 0, v29);
      if (Count < 1)
      {
LABEL_37:
        uint64_t PixelBufferWithOptions = MEMORY[0x1997042B0](blockAllocator, v30, v31, &v116);
        if (!PixelBufferWithOptions)
        {
          v62[3] = (uint64_t)v116;
          CMBlockBufferRef v116 = 0;
        }
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t ValueAtIndex = 0;
        long long v70 = *MEMORY[0x1E4F1F3D8];
        while (1)
        {
          size_t v115 = 0;
          *(_OWORD *)blockBufferOut = v70;
          long long v120 = v70;
          FigCFArrayGetInt64AtIndex();
          *(CMTag *)blockBufferOut = CMTagMakeWithSInt64Value(kCMTagCategory_VideoLayerID, v115);
          int v34 = (long long *)(v32 ? MEMORY[0x1E4F1F428] : MEMORY[0x1E4F1F418]);
          long long v120 = *v34;
          uint64_t v35 = CMTagCollectionCreate(blockAllocator, (const CMTag *)blockBufferOut, 2, (CMTagCollectionRef *)&dataPointerOut);
          if (v35) {
            break;
          }
          if (*(unsigned char *)(v27 + 124)) {
            uint64_t ValueAtIndex = FigCFArrayGetValueAtIndex();
          }
          uint64_t v35 = VTDecoderSessionCreatePixelBufferWithOptions(*(uint64_t **)(v27 + 8), v26, ValueAtIndex, &v118);
          if (v35) {
            break;
          }
          CFArrayAppendValue(v31, v118);
          if (v118)
          {
            CFRelease(v118);
            CVPixelBufferRef v118 = 0;
          }
          CFArrayAppendValue(v30, dataPointerOut);
          if (dataPointerOut)
          {
            CFRelease(dataPointerOut);
            dataPointerOut = 0;
          }
          if (Count == ++v32) {
            goto LABEL_37;
          }
        }
        uint64_t PixelBufferWithOptions = v35;
      }
      uint64_t v6 = v68;
      if (v118) {
        CFRelease(v118);
      }
      CFMutableDictionaryRef Mutable = v64;
      if (v30) {
        CFRelease(v30);
      }
      if (v31) {
        CFRelease(v31);
      }
      CFArrayRef v24 = v66;
      if (dataPointerOut) {
        CFRelease(dataPointerOut);
      }
      a2 = v26;
      if (v116) {
        CFRelease(v116);
      }
      uint64_t v9 = v63;
      if (PixelBufferWithOptions) {
        goto LABEL_91;
      }
    }
    else
    {
      FirstCFDictionaryRef Value = FigCFArrayGetFirstValue();
      uint64_t PixelBufferWithOptions = VTDecoderSessionCreatePixelBufferWithOptions(*(uint64_t **)(DerivedStorage + 8), a2, FirstValue, v97 + 3);
      if (PixelBufferWithOptions) {
        goto LABEL_91;
      }
    }
  }
  int v38 = *(unsigned __int8 *)(DerivedStorage + 136);
  dispatch_retain(v23);
  dispatch_group_enter(v23);
  uint64_t v39 = *(void *)(DerivedStorage + 40);
  CFMutableDictionaryRef v40 = v109[4];
  if (v38)
  {
    v89[0] = MEMORY[0x1E4F143A8];
    v89[1] = 0x40000000;
    v89[2] = __MuxedAlphaDecoder_DecodeFrame_block_invoke;
    v89[3] = &unk_1E57855E0;
    v89[4] = &v108;
    v89[5] = v23;
    uint64_t v41 = VTDecompressionSessionDecodeFrameWithOptionsAndMultiImageCapableOutputHandler(v39, v40, v6, (uint64_t)Mutable, v24, (unint64_t)v89);
    if (!v41)
    {
      dispatch_retain(v23);
      dispatch_group_enter(v23);
      uint64_t v42 = *(void *)(DerivedStorage + 72);
      uint64_t v43 = v103[4];
      v88[0] = MEMORY[0x1E4F143A8];
      v88[1] = 0x40000000;
      v88[2] = __MuxedAlphaDecoder_DecodeFrame_block_invoke_2;
      v88[3] = &unk_1E5785608;
      v88[4] = &v102;
      v88[5] = v23;
      uint64_t v44 = VTDecompressionSessionDecodeFrameWithOptionsAndMultiImageCapableOutputHandler(v42, v43, v6, (uint64_t)Mutable, v24, (unint64_t)v88);
      if (!v44)
      {
LABEL_55:
        dispatch_retain(v23);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        int8x16_t v73 = __MuxedAlphaDecoder_DecodeFrame_block_invoke_5;
        float32x4_t v74 = &unk_1E5785680;
        float32x4_t v75 = v100;
        float32x4_t v76 = &v108;
        float32x4_t v77 = &v102;
        float32x4_t v78 = v90;
        char v85 = v6 & 1;
        uint64_t v81 = DerivedStorage;
        uint64_t v82 = v9;
        float32x4_t v79 = &v92;
        uint16x8_t v80 = &v96;
        unint64_t v83 = a2;
        float v84 = v23;
        if (v6)
        {
          dispatch_group_notify(v23, *(dispatch_queue_t *)(DerivedStorage + 96), block);
        }
        else
        {
          dispatch_group_wait(v23, 0xFFFFFFFFFFFFFFFFLL);
          v73((uint64_t)block);
        }
        uint64_t PixelBufferWithOptions = 0;
        goto LABEL_59;
      }
LABEL_72:
      uint64_t PixelBufferWithOptions = v44;
      goto LABEL_59;
    }
  }
  else
  {
    v87[0] = MEMORY[0x1E4F143A8];
    v87[1] = 0x40000000;
    v87[2] = __MuxedAlphaDecoder_DecodeFrame_block_invoke_3;
    v87[3] = &unk_1E5785630;
    v87[4] = &v108;
    v87[5] = v23;
    uint64_t v41 = VTDecompressionSessionDecodeFrameWithOptionsAndOutputHandler(v39, v40, v6, (uint64_t)Mutable, v24, (unint64_t)v87);
    if (!v41)
    {
      dispatch_retain(v23);
      dispatch_group_enter(v23);
      uint64_t v48 = *(void *)(DerivedStorage + 72);
      float v49 = v103[4];
      v86[0] = MEMORY[0x1E4F143A8];
      v86[1] = 0x40000000;
      v86[2] = __MuxedAlphaDecoder_DecodeFrame_block_invoke_4;
      v86[3] = &unk_1E5785658;
      unsigned char v86[4] = &v102;
      v86[5] = v23;
      uint64_t v44 = VTDecompressionSessionDecodeFrameWithOptionsAndOutputHandler(v48, v49, v6, (uint64_t)Mutable, v24, (unint64_t)v86);
      if (!v44) {
        goto LABEL_55;
      }
      goto LABEL_72;
    }
  }
  uint64_t PixelBufferWithOptions = v41;
LABEL_91:
  alphadecoder_emitDecodedFrame(v9, a2, PixelBufferWithOptions, 0, 0);
  for (uint64_t i = 0; ; ++i)
  {
    CFArrayRef v60 = *(const __CFArray **)(DerivedStorage + 128);
    if (v60) {
      CFArrayRef v60 = (const __CFArray *)CFArrayGetCount(v60);
    }
    if (i >= (uint64_t)v60) {
      break;
    }
    uint64_t v61 = FigCFArrayGetValueAtIndex();
    VTDecoderSessionForgetPixelBufferForFrame(*(uint64_t **)(DerivedStorage + 8), (uint64_t)a2, v61);
  }
LABEL_59:
  CMSampleBufferRef v45 = v109[3];
  if (v45) {
    CFRelease(v45);
  }
  CMSampleBufferRef v46 = v103[3];
  if (v46) {
    CFRelease(v46);
  }
  if (v23) {
    dispatch_release(v23);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(v90, 8);
  _Block_object_dispose(&v92, 8);
  _Block_object_dispose(&v96, 8);
  _Block_object_dispose(v100, 8);
  _Block_object_dispose(&v102, 8);
  _Block_object_dispose(&v108, 8);
  return PixelBufferWithOptions;
}

uint64_t MuxedAlphaDecoder_CopySupportedPropertyDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v12 = 0;
  __int16 v13 = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v7 = *(const void **)(DerivedStorage + 40);
    if (v7)
    {
      uint64_t v8 = VTSessionCopySupportedPropertyDictionary(v7, (CFDictionaryRef *)&cf);
      if (v8)
      {
        CFMutableDictionaryRef Mutable = 0;
      }
      else
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(Mutable, @"SublayerDecoderSpecification", v5);
        CFTypeRef v12 = cf;
        __int16 v13 = Mutable;
        FigCFCreateCombinedDictionary();
      }
    }
    else
    {
      CFMutableDictionaryRef Mutable = 0;
      uint64_t v8 = 4294954393;
    }
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
    uint64_t v8 = 4294954394;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v8;
}

uint64_t MuxedAlphaDecoder_FinishDelayedFrames(uint64_t a1)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = VTDecompressionSessionFinishDelayedFrames(*(VTDecompressionSessionRef *)(DerivedStorage + 40));
  VTDecompressionSessionFinishDelayedFrames(*(VTDecompressionSessionRef *)(DerivedStorage + 72));
  if (*(void *)(DerivedStorage + 104))
  {
    uint64_t v3 = 2;
    do
    {
      CFAllocatorRef v4 = *(NSObject **)(DerivedStorage + 104);
      dispatch_time_t v5 = dispatch_time(0, 1000000000 * v3);
      v3 *= 2;
    }
    while (dispatch_group_wait(v4, v5));
  }
  return v2;
}

uint64_t alphadecoder_createSubLayerVTDecompressionSession(uint64_t a1, int a2, const void *a3, const opaqueCMFormatDescription *a4, uint64_t a5, int a6, VTSessionRef *a7, BOOL *a8)
{
  BOOL v14 = a2 != 0;
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTSessionRef session = 0;
  CFTypeRef cf = 0;
  CFTypeRef propertyValueOut = 0;
  int valuePtr = -1;
  unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(DerivedStorage + 16));
  uint64_t PixelBufferAttributesDictionary = alphadecoder_createPixelBufferAttributesDictionary(Dimensions, HIDWORD(Dimensions), a5, a6, (__CFDictionary **)&cf);
  if (PixelBufferAttributesDictionary)
  {
    uint64_t v25 = PixelBufferAttributesDictionary;
    CFDictionaryRef Mutable = 0;
    goto LABEL_15;
  }
  int v18 = 2 * v14;
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a8)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable)
    {
      uint64_t v25 = FigSignalErrorAt();
      goto LABEL_15;
    }
    FigCFDictionarySetInt32();
    FigCFDictionarySetBoolean();
  }
  else
  {
    CFDictionaryRef Mutable = 0;
  }
  CFTypeRef v21 = cf;
  uint64_t v22 = VTDecompressionSessionCreateWithOptions((uint64_t)v19, a4, a3, (const __CFDictionary *)cf, 0, Mutable, (uint64_t *)&session);
  if (!v22)
  {
    if (VTSessionCopyProperty(session, @"WriteDirectlyToPlanesOfTargetCVPixelBuffer", v19, &propertyValueOut)) {
      BOOL v23 = 1;
    }
    else {
      BOOL v23 = propertyValueOut == 0;
    }
    if (!v23)
    {
      CFTypeID v24 = CFGetTypeID(propertyValueOut);
      if (v24 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)propertyValueOut, kCFNumberSInt32Type, &valuePtr);
        if (a8) {
          *a8 = v18 == valuePtr;
        }
      }
    }
    uint64_t v25 = 0;
    *a7 = session;
    VTSessionRef session = 0;
LABEL_15:
    CFTypeRef v21 = cf;
    if (!cf) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v25 = v22;
  if (v21) {
LABEL_16:
  }
    CFRelease(v21);
LABEL_17:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (session) {
    CFRelease(session);
  }
  if (propertyValueOut) {
    CFRelease(propertyValueOut);
  }
  return v25;
}

uint64_t alphadecoder_createPixelBufferAttributesDictionary(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __CFDictionary **a5)
{
  LODWORD(v6) = a4;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFMutableArrayRef v10 = Mutable;
    CFMutableArrayRef v11 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
    if (v11)
    {
      CFMutableArrayRef v12 = v11;
      if ((int)v6 >= 1)
      {
        uint64_t v6 = v6;
        do
        {
          a3 += 4;
          FigCFArrayAppendInt32();
          --v6;
        }
        while (v6);
      }
      CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E4F24D70], v12);
      CFRelease(v12);
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      CFDictionaryRef v13 = CFDictionaryCreate(v8, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E4F24D20], v13);
      *a5 = v10;
      if (v13) {
        CFRelease(v13);
      }
      return 0;
    }
    else
    {
      uint64_t v15 = FigSignalErrorAt();
      CFRelease(v10);
      return v15;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFDictionaryRef alphadecoder_copyPixelBufferAttributesFromDecompressionSession(uint64_t a1)
{
  CVPixelBufferPoolRef pool = 0;
  if (VTDecompressionSessionCopyProperty(a1, @"PixelBufferPool", (const __CFAllocator *)*MEMORY[0x1E4F1CF80], &pool))
  {
    CFDictionaryRef v2 = 0;
  }
  else
  {
    CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(pool);
    CFDictionaryRef v2 = PixelBufferAttributes;
    if (PixelBufferAttributes) {
      CFRetain(PixelBufferAttributes);
    }
    else {
      FigSignalErrorAt();
    }
  }
  if (pool) {
    CFRelease(pool);
  }
  return v2;
}

uint64_t alphadecoder_createDerivedSampleBuffer(opaqueCMSampleBuffer *a1, CMBlockBufferRef theBuffer, const opaqueCMFormatDescription *a3, CMSampleBufferRef *a4)
{
  CMSampleBufferRef sampleBufferOut = 0;
  *(_OWORD *)&timingInfoOut.duration.long long value = *MEMORY[0x1E4F1F9F8];
  timingInfoOut.duration.epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  timingInfoOut.presentationTimeStamp = timingInfoOut.duration;
  timingInfoOut.decodeTimeStamp = timingInfoOut.duration;
  size_t sampleSizeArray = CMBlockBufferGetDataLength(theBuffer);
  uint64_t result = CMSampleBufferGetSampleTimingInfo(a1, 0, &timingInfoOut);
  if (result)
  {
    if (result != -12736) {
      return result;
    }
    uint64_t v9 = CMSampleBufferCreateReady((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theBuffer, a3, 1, 0, 0, 1, &sampleSizeArray, &sampleBufferOut);
  }
  else
  {
    uint64_t v9 = CMSampleBufferCreateReady((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theBuffer, a3, 1, 1, &timingInfoOut, 1, &sampleSizeArray, &sampleBufferOut);
  }
  if (v9)
  {
    uint64_t v14 = v9;
    if (sampleBufferOut) {
      CFRelease(sampleBufferOut);
    }
    return v14;
  }
  else
  {
    CMPropagateAttachments(a1, sampleBufferOut);
    CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
    if (SampleAttachmentsArray)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
      CFArrayRef v12 = CMSampleBufferGetSampleAttachmentsArray(sampleBufferOut, 1u);
      CFDictionaryRef v13 = (void *)CFArrayGetValueAtIndex(v12, 0);
      CFDictionaryApplyFunction(ValueAtIndex, (CFDictionaryApplierFunction)alphadecoder_dictionarySetValue, v13);
    }
    FigSampleBufferGetDecryptor();
    FigSampleBufferSetDecryptor();
    uint64_t result = 0;
    *a4 = sampleBufferOut;
  }
  return result;
}

uint64_t alphadecoder_mergeBaseAndAlpha(__CVBuffer *a1, int a2, CVPixelBufferRef pixelBuffer)
{
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) == 1982882104
    || CVPixelBufferGetPixelFormatType(pixelBuffer) == 2016436536
    || CVPixelBufferGetPixelFormatType(pixelBuffer) == 1983013176
    || CVPixelBufferGetPixelFormatType(pixelBuffer) == 2016567608
    || CVPixelBufferGetPixelFormatType(pixelBuffer) == 1983144248
    || CVPixelBufferGetPixelFormatType(pixelBuffer) == 2016698680)
  {
    CVPixelBufferGetWidth(pixelBuffer);
    CVPixelBufferGetHeight(pixelBuffer);
    CVPixelBufferGetPixelFormatType(a1);
    DescriptionWithuint64_t PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
    if (DescriptionWithPixelFormatType
      && (Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24EE0])) != 0&& (v7 = Value, CFTypeID v8 = CFGetTypeID(Value), v8 == CFArrayGetTypeID())&& CFArrayGetCount(v7) > 1)
    {
      CFArrayGetValueAtIndex(v7, 0);
      FigCFDictionaryGetInt32IfPresent();
      CFArrayGetValueAtIndex(v7, 1);
      FigCFDictionaryGetInt32IfPresent();
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
      if (v11) {
        return v11;
      }
    }
    return FigSignalErrorAt();
  }
  return 4294954394;
}

void alphadecoder_emitDecodedFrame(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5)
{
  VTVideoDecoderGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  VTDecoderSessionEmitDecodedFrame(*(uint64_t **)(DerivedStorage + 8), a2, a3, a4, a5);
  --*(_DWORD *)(DerivedStorage + 120);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(DerivedStorage + 112));
  CFMutableArrayRef v10 = *(NSObject **)(DerivedStorage + 104);

  dispatch_group_leave(v10);
}

void alphadecoder_dictionarySetValue(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

uint64_t alphadecoder_transferPlane(__CVBuffer *a1, size_t a2, __CVBuffer *a3, size_t a4, uint64_t a5)
{
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, a2);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, a2);
  if (CVPixelBufferGetWidthOfPlane(a3, a4) == WidthOfPlane
    && CVPixelBufferGetHeightOfPlane(a3, a4) == HeightOfPlane
    && (BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, a2),
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, a2),
        uint64_t v14 = (char *)CVPixelBufferGetBaseAddressOfPlane(a3, a4),
        size_t v15 = CVPixelBufferGetBytesPerRowOfPlane(a3, a4),
        size_t v16 = WidthOfPlane * a5,
        v16 <= BytesPerRowOfPlane)
    && (size_t v17 = v15, v16 <= v15))
  {
    for (; HeightOfPlane; --HeightOfPlane)
    {
      memcpy(v14, BaseAddressOfPlane, v16);
      BaseAddressOfPlane += BytesPerRowOfPlane;
      v14 += v17;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTHDRImageStatisticsGenerationSessionGetTypeID()
{
  return sVTHDRImageStatisticsGenerationSessionID;
}

uint64_t registerVTHDRImageStatisticsGenerationSession()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVTHDRImageStatisticsGenerationSessionID = result;
  return result;
}

uint64_t VTHDRImageStatisticsGenerationSessionCreate(uint64_t a1, const void *a2, uint64_t *a3)
{
  if (a3)
  {
    MEMORY[0x199705810](&VTHDRImageStatisticsGenerationSessionGetTypeID_sRegisterVTHDRImageStatisticsGenerationSessionOnce, registerVTHDRImageStatisticsGenerationSession);
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v6 = Instance;
      id v7 = MTLCreateSystemDefaultDevice();
      *(void *)(v6 + 200) = v7;
      if (!v7 || (uint64_t v8 = [v7 newCommandQueue], (*(void *)(v6 + 208) = v8) == 0))
      {
LABEL_14:
        uint64_t v12 = FigSignalErrorAt();
        CFRelease((CFTypeRef)v6);
        return v12;
      }
      *(_DWORD *)(v6 + 184) = 0;
      if (a2)
      {
        CFTypeID v9 = CFGetTypeID(a2);
        if (v9 == CFDictionaryGetTypeID())
        {
          FigCFDictionaryGetValue();
          if (FigCFEqual())
          {
            int v10 = 1;
          }
          else
          {
            if (!FigCFEqual()) {
              goto LABEL_12;
            }
            int v10 = 2;
          }
          *(_DWORD *)(v6 + 184) = v10;
        }
      }
LABEL_12:
      CVMetalTextureCacheCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(id *)(v6 + 200), 0, (CVMetalTextureCacheRef *)(v6 + 32));
      if (*(void *)(v6 + 32))
      {
        *a3 = v6;
        return 0;
      }
      goto LABEL_14;
    }
  }

  return FigSignalErrorAt();
}

uint64_t VTHDRImageStatisticsGenerationSessionCreateStatistics(uint64_t a1, void *a2, float *a3, float *a4, float *a5, float *a6)
{
  CFDataRef theData = 0;
  if (!a1
    || (CFTypeID v12 = CFGetTypeID((CFTypeRef)a1),
        MEMORY[0x199705810](&VTHDRImageStatisticsGenerationSessionGetTypeID_sRegisterVTHDRImageStatisticsGenerationSessionOnce, registerVTHDRImageStatisticsGenerationSession), v12 != sVTHDRImageStatisticsGenerationSessionID)|| !a2|| (CFTypeID v13 = CFGetTypeID(a2), v13 != CVPixelBufferGetTypeID())|| !a3|| !a4|| !a5|| !a6)
  {
    uint64_t v30 = FigSignalErrorAt();
    CFDictionaryRef v18 = 0;
    CFTypeRef v14 = 0;
    goto LABEL_179;
  }
  CFTypeRef v14 = CVBufferCopyAttachment((CVBufferRef)a2, (CFStringRef)*MEMORY[0x1E4F24BC8], 0);
  int v15 = FigCFEqual();
  int v16 = FigCFEqual();
  if (!(v16 | v15))
  {
    uint64_t v30 = FigSignalErrorAt();
    CFDictionaryRef v18 = 0;
    goto LABEL_179;
  }
  int v17 = v16;
  uint16x8_t v127 = a3;
  CFDictionaryRef v18 = (const __CFDictionary *)CVBufferCopyAttachment((CVBufferRef)a2, (CFStringRef)*MEMORY[0x1E4F24BB0], 0);
  double Width = (double)CVPixelBufferGetWidth((CVPixelBufferRef)a2);
  double Height = (double)CVPixelBufferGetHeight((CVPixelBufferRef)a2);
  rect.origin.double x = 0.0;
  rect.origin.double y = 0.0;
  rect.size.width = Width;
  rect.size.height = Height;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a2);
  if (v18)
  {
    if (!CGRectMakeWithDictionaryRepresentation(v18, &rect)) {
      goto LABEL_33;
    }
    CGRect rect = CGRectStandardize(rect);
    CGRect v136 = CGRectIntegral(rect);
    double Width = v136.size.width;
    double Height = v136.size.height;
    CGRect rect = v136;
  }
  else
  {
    v136.origin.double y = 0.0;
    v136.origin.double x = 0.0;
  }
  float32x4_t v125 = a5;
  int8x16_t v126 = a6;
  float32x4_t v124 = a4;
  if (*(_DWORD *)(a1 + 184) == 2)
  {
    unsigned int v22 = 0;
    BOOL v23 = (__CVBuffer *)a2;
    goto LABEL_35;
  }
  if (vthisgsPixelTransferToIntermediateBuffer((VTPixelTransferSessionRef *)a1, (CVPixelBufferRef)a2, v18, &theData, v136.origin.x, v136.origin.y, Width, Height))
  {
    unsigned int v22 = 0;
    BOOL v23 = (__CVBuffer *)a2;
    goto LABEL_32;
  }
  if (!theData || (Length = CFDataGetLength(theData), CFIndex v25 = Length, Length != 768) && Length != 3072 && Length != 1536)
  {
    unsigned int v22 = 0;
LABEL_31:
    BOOL v23 = *(__CVBuffer **)(a1 + 24);
    OSType PixelFormatType = 1111970369;
LABEL_32:
    if (*(_DWORD *)(a1 + 184) != 1)
    {
LABEL_35:
      if (PixelFormatType != 1111970369)
      {
        if (PixelFormatType == 1815162994)
        {
          MTLPixelFormat v31 = MTLPixelFormatRGB10A2Unorm;
          goto LABEL_43;
        }
        if (PixelFormatType == 1380411457)
        {
          MTLPixelFormat v31 = MTLPixelFormatRGBA16Float;
LABEL_43:
          if (!objc_opt_class())
          {
            uint64_t v29 = FigSignalErrorAt();
            if (v29) {
              goto LABEL_34;
            }
          }
          uint64_t v32 = *(void **)(a1 + 216);
          CFDictionaryRef v123 = v18;
          if (*(void *)(a1 + 192) != v31 || !v32 || !*(void *)(a1 + 224))
          {

            *(void *)(a1 + 216) = 0;
            *(void *)(a1 + 224) = 0;
            unint64_t v130 = 256;
            unint64_t v131 = 0;
            uint64_t v132 = 0;
            unint64_t v133 = 0;
            __asm { FMOV            V0.4S, #1.0 }
            long long v134 = _Q0;
            int v38 = (void *)[objc_alloc(MEMORY[0x1E4F355A8]) initWithDevice:*(void *)(a1 + 200) histogramInfo:&v130];
            *(void *)(a1 + 224) = v38;
            if (!v38) {
              goto LABEL_190;
            }
            if ([v38 histogramSizeForSourceFormat:v31] != 3072)
            {
              CFTypeRef v40 = v14;
              uint64_t v122 = FigSignalErrorAt();
              if (v122)
              {
                uint64_t v30 = v122;
                goto LABEL_195;
              }
LABEL_52:
              double x = rect.origin.x;
              double y = rect.origin.y;
              double v43 = rect.size.width;
              double v44 = rect.size.height;
              CVMetalTextureRef textureOut = 0;
              CMSampleBufferRef v45 = (void *)MEMORY[0x199706500]();
              CFAllocatorRef v46 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              unint64_t v47 = *(__CVMetalTextureCache **)(a1 + 32);
              size_t v48 = CVPixelBufferGetWidth(v23);
              size_t v49 = CVPixelBufferGetHeight(v23);
              CVMetalTextureCacheCreateTextureFromImage(v46, v47, v23, 0, v31, v48, v49, 0, &textureOut);
              if (textureOut
                && (id Texture = CVMetalTextureGetTexture(textureOut)) != 0
                && (id v51 = Texture, (v52 = [*(id *)(a1 + 208) commandBuffer]) != 0))
              {
                uint64_t v53 = (void *)v52;
                uint64_t v54 = *(void **)(a1 + 224);
                unint64_t v130 = (unint64_t)x;
                unint64_t v131 = (unint64_t)y;
                uint64_t v132 = 0;
                unint64_t v133 = (unint64_t)v43;
                int v55 = 1;
                *(void *)&long long v134 = (unint64_t)v44;
                *((void *)&v134 + 1) = 1;
                [v54 setClipRectSource:&v130];
                [*(id *)(a1 + 224) encodeToCommandBuffer:v53 sourceTexture:v51 histogram:*(void *)(a1 + 216) histogramOffset:0];
                [v53 commit];
                [v53 waitUntilCompleted];
                uint64_t v27 = [*(id *)(a1 + 216) contents];
                uint64_t v30 = 0;
                unsigned int v22 = 256;
              }
              else
              {
                uint64_t v27 = 0;
                int v55 = 0;
                uint64_t v30 = 4294954392;
              }
              if (textureOut) {
                CFRelease(textureOut);
              }
              if (v55)
              {
                CFTypeRef v14 = v40;
                CFDictionaryRef v18 = v123;
                if (v27) {
                  goto LABEL_60;
                }
                goto LABEL_33;
              }
LABEL_195:
              CFTypeRef v14 = v40;
              CFDictionaryRef v18 = v123;
              goto LABEL_179;
            }
            uint64_t v39 = [*(id *)(a1 + 200) newBufferWithLength:3072 options:0];
            *(void *)(a1 + 216) = v39;
            if (!v39)
            {
LABEL_190:
              uint64_t v30 = 4294954392;
              goto LABEL_179;
            }
            *(void *)(a1 + 192) = v31;
          }
          CFTypeRef v40 = v14;
          goto LABEL_52;
        }
        uint64_t v29 = vthisgsPixelTransferToIntermediateBuffer((VTPixelTransferSessionRef *)a1, (CVPixelBufferRef)a2, v18, 0, rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
        if (v29) {
          goto LABEL_34;
        }
        BOOL v23 = *(__CVBuffer **)(a1 + 24);
      }
      MTLPixelFormat v31 = MTLPixelFormatBGRA8Unorm;
      goto LABEL_43;
    }
LABEL_33:
    uint64_t v29 = FigSignalErrorAt();
LABEL_34:
    uint64_t v30 = v29;
    goto LABEL_179;
  }
  BytePtr = CFDataGetBytePtr(theData);
  uint64_t v27 = (uint64_t)BytePtr;
  if (v25 == 1536) {
    int v28 = 128;
  }
  else {
    int v28 = 256;
  }
  if (v25 == 768) {
    unsigned int v22 = 64;
  }
  else {
    unsigned int v22 = v28;
  }
  if (!BytePtr) {
    goto LABEL_31;
  }
LABEL_60:
  uint64_t v56 = v22;
  if (v22 == 64)
  {
    if (v17)
    {
      if (!*(void *)(a1 + 56)) {
        goto LABEL_76;
      }
    }
    else if (!*(void *)(a1 + 40))
    {
      goto LABEL_76;
    }
LABEL_115:
    uint64_t v72 = v27 + 4 * v56;
    uint64_t v73 = v27 + 4 * (2 * v56);
    unint64_t v74 = (unint64_t)(rect.size.width * rect.size.height);
    goto LABEL_116;
  }
  if (v22 == 128)
  {
    if (v17)
    {
      if (!*(void *)(a1 + 104)) {
        goto LABEL_76;
      }
    }
    else if (!*(void *)(a1 + 88))
    {
      goto LABEL_76;
    }
LABEL_125:
    uint64_t v72 = v27 + 4 * v56;
    uint64_t v73 = v27 + 1024;
    unint64_t v74 = (unint64_t)(rect.size.width * rect.size.height);
    float v90 = (float **)(a1 + 88);
    if (v17) {
      float v90 = (float **)(a1 + 104);
    }
    float32x4_t v77 = (float **)(a1 + 96);
    if (v17) {
      float32x4_t v77 = (float **)(a1 + 112);
    }
    float32x4_t v78 = (float **)(a1 + 120);
    if (v17) {
      float32x4_t v78 = (float **)(a1 + 128);
    }
    uint64_t v79 = 128;
    goto LABEL_132;
  }
  if (v17)
  {
    if (*(void *)(a1 + 152)) {
      goto LABEL_103;
    }
  }
  else if (*(void *)(a1 + 136))
  {
    goto LABEL_103;
  }
LABEL_76:
  uint16x8_t v57 = malloc_type_calloc(v22, 4uLL, 0x100004052888210uLL);
  float16x8_t v58 = malloc_type_calloc(v22, 4uLL, 0x100004052888210uLL);
  float16x8_t v59 = malloc_type_calloc(v22, 4uLL, 0x100004052888210uLL);
  CFArrayRef v60 = v59;
  if (!v57 || !v58 || !v59)
  {
    free(v57);
    free(v58);
    free(v60);
    goto LABEL_190;
  }
  if (v22)
  {
    uint64_t v61 = 0;
    do
    {
      float v62 = (float)(int)v61 / (float)(v56 - 1);
      if (v17)
      {
        double v63 = v62 + 0.0;
        if (v63 < 0.0) {
          double v63 = 0.0;
        }
        if (v63 <= 0.5)
        {
          double v64 = v63 * v63;
          double v65 = 3.0;
        }
        else
        {
          double v64 = exp((v63 + -0.55991073) / 0.17883277) + 0.28466892;
          double v65 = 12.0;
        }
        long double v66 = v64 / v65 * (pow(v64 / v65, 0.2) * 1000.0) / 10000.0;
        if (v66 < 0.0) {
          long double v66 = 0.0;
        }
        long double v67 = pow(v66, 0.159301758);
        double v68 = (v67 * 18.8515625 + 0.8359375) / (v67 * 18.6875 + 1.0);
        if (v68 < 0.0) {
          double v68 = 0.0;
        }
        float v62 = pow(v68, 78.84375);
      }
      *((float *)v57 + v61) = v62;
      *((float *)v58 + v61++) = v62 * v62;
    }
    while (v56 != v61);
    if (v56 == 64)
    {
      if (v17)
      {
        *(void *)(a1 + 56) = v57;
        *(void *)(a1 + 64) = v58;
        int v69 = (void *)(a1 + 80);
      }
      else
      {
        *(void *)(a1 + 40) = v57;
        *(void *)(a1 + 48) = v58;
        int v69 = (void *)(a1 + 72);
      }
      *int v69 = v60;
      goto LABEL_115;
    }
    if (v56 == 128)
    {
      if (v17)
      {
        *(void *)(a1 + 104) = v57;
        *(void *)(a1 + 112) = v58;
        long long v70 = (void *)(a1 + 128);
      }
      else
      {
        *(void *)(a1 + 88) = v57;
        *(void *)(a1 + 96) = v58;
        long long v70 = (void *)(a1 + 120);
      }
      *long long v70 = v60;
      goto LABEL_125;
    }
  }
  if (v17)
  {
    *(void *)(a1 + 152) = v57;
    *(void *)(a1 + 160) = v58;
    int8x16_t v71 = (void *)(a1 + 176);
  }
  else
  {
    *(void *)(a1 + 136) = v57;
    *(void *)(a1 + 144) = v58;
    int8x16_t v71 = (void *)(a1 + 168);
  }
  *int8x16_t v71 = v60;
LABEL_103:
  uint64_t v72 = v27 + 4 * v56;
  uint64_t v73 = v27 + 4 * (2 * v56);
  unint64_t v74 = (unint64_t)(rect.size.width * rect.size.height);
  if (v56 == 64)
  {
LABEL_116:
    float v90 = (float **)(a1 + 40);
    if (v17) {
      float v90 = (float **)(a1 + 56);
    }
    float32x4_t v77 = (float **)(a1 + 48);
    if (v17) {
      float32x4_t v77 = (float **)(a1 + 64);
    }
    float32x4_t v78 = (float **)(a1 + 72);
    if (v17) {
      float32x4_t v78 = (float **)(a1 + 80);
    }
    uint64_t v79 = 64;
LABEL_132:
    float32x4_t v76 = *v90;
LABEL_133:
    uint64_t v91 = 0;
    uint64_t v92 = *v77;
    float16x8_t v93 = *v78;
    float v94 = 0.0;
    do
    {
      float v94 = v94 + (float)((float)*(unsigned int *)(v27 + 4 * v91) * v76[v91]);
      ++v91;
    }
    while (v79 != v91);
    uint64_t v95 = 0;
    float v96 = 0.0;
    do
    {
      float v96 = v96 + (float)((float)*(unsigned int *)(v72 + 4 * v95) * v76[v95]);
      ++v95;
    }
    while (v79 != v95);
    uint64_t v97 = 0;
    float v98 = (float)v74;
    float v99 = 0.0;
    do
    {
      float v99 = v99 + (float)((float)*(unsigned int *)(v73 + 4 * v97) * v76[v97]);
      ++v97;
    }
    while (v79 != v97);
    if (v56)
    {
      uint64_t v100 = 0;
      int v101 = -1;
      int v102 = -1;
      do
      {
        unsigned int v103 = *(_DWORD *)(v27 + 4 * v100);
        unsigned int v104 = *(_DWORD *)(v72 + 4 * v100);
        unsigned int v105 = *(_DWORD *)(v73 + 4 * v100);
        float v106 = ((float)((float)v103 / v98) + (float)((float)v104 / v98) + (float)((float)v105 / v98)) / 3.0;
        v93[v100] = v106;
        if (v103 > v104) {
          unsigned int v104 = 1;
        }
        else {
          unsigned int v103 = v104;
        }
        if (v103 <= v105) {
          unsigned int v107 = v105;
        }
        else {
          unsigned int v107 = v104;
        }
        if (v102 == -1) {
          int v108 = v100;
        }
        else {
          int v108 = v102;
        }
        if (v107)
        {
          int v102 = v108;
          int v101 = v100;
        }
        ++v100;
      }
      while (v79 != v100);
      unsigned int v88 = v125;
      unsigned int v87 = v126;
      unsigned int v89 = v124;
      if (v102 == -1)
      {
        float v83 = *v76;
        if (v101 == -1) {
          uint64_t v110 = v76;
        }
        else {
          uint64_t v110 = &v76[v101];
        }
      }
      else
      {
        if (v101 == -1) {
          int v109 = 0;
        }
        else {
          int v109 = v101;
        }
        float v83 = v76[v102];
        uint64_t v110 = &v76[v109];
      }
    }
    else
    {
      float v83 = *v76;
      uint64_t v110 = v76;
      unsigned int v88 = v125;
      unsigned int v87 = v126;
      unsigned int v89 = v124;
    }
    float v84 = v94 / v98;
    float v82 = *v110;
    float v80 = 0.0;
    long long v111 = v93;
    uint64_t v112 = v79;
    float v85 = v96 / v98;
    do
    {
      float v113 = *v111++;
      float v114 = v113;
      float v115 = *v76++;
      float v80 = v80 + (float)(v114 * v115);
      --v112;
    }
    while (v112);
    float v86 = 0.0;
    do
    {
      float v116 = *v93++;
      float v117 = v116;
      float v118 = *v92++;
      float v86 = v86 + (float)(v117 * v118);
      --v79;
    }
    while (v79);
    float v81 = v99 / v98;
    goto LABEL_167;
  }
  uint64_t v75 = 152;
  if (!v17) {
    uint64_t v75 = 136;
  }
  float32x4_t v76 = *(float **)(a1 + v75);
  float32x4_t v77 = (float **)(a1 + 144);
  if (v17) {
    float32x4_t v77 = (float **)(a1 + 160);
  }
  float32x4_t v78 = (float **)(a1 + 168);
  if (v17) {
    float32x4_t v78 = (float **)(a1 + 176);
  }
  if (v56)
  {
    uint64_t v79 = v56;
    goto LABEL_133;
  }
  float v80 = 0.0;
  float v81 = 0.0 / (float)v74;
  float v82 = *v76;
  float v83 = *v76;
  float v84 = v81;
  float v85 = v81;
  float v86 = 0.0;
  unsigned int v88 = v125;
  unsigned int v87 = v126;
  unsigned int v89 = v124;
LABEL_167:
  uint64_t v30 = 0;
  if (v84 <= v85) {
    float v119 = v85;
  }
  else {
    float v119 = v84;
  }
  if (v119 > v81) {
    float v81 = v119;
  }
  float v120 = v86 - (float)(v80 * v80);
  if (v120 <= 0.0) {
    float v120 = 0.0;
  }
  if (v81 >= v82) {
    float v81 = v82;
  }
  if (v83 > v81) {
    float v81 = v83;
  }
  *uint16x8_t v127 = v81;
  *unsigned int v89 = v83;
  *unsigned int v88 = v82;
  *unsigned int v87 = sqrtf(v120);
LABEL_179:
  if (theData) {
    CFRelease(theData);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v30;
}

uint64_t vthisgsPixelTransferToIntermediateBuffer(VTPixelTransferSessionRef *pixelTransferSessionOut, CVPixelBufferRef pixelBuffer, CFDictionaryRef a3, void *a4, double a5, double a6, double a7, double a8)
{
  int v15 = pixelTransferSessionOut + 2;
  int v16 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (!pixelTransferSessionOut[2])
  {
    uint64_t v17 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v15);
    if (v17) {
      return v17;
    }
  }
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  VTPixelTransferSessionRef v22 = pixelTransferSessionOut[3];
  CFTypeRef v21 = (CFTypeRef *)(pixelTransferSessionOut + 3);
  int v20 = v22;
  if (v22)
  {
    if (Width == CVPixelBufferGetWidth(v20) && Height == CVPixelBufferGetHeight((CVPixelBufferRef)*v21))
    {
      if (*v21)
      {
        CFMutableDictionaryRef Mutable = 0;
        CFMutableDictionaryRef v24 = 0;
        goto LABEL_11;
      }
    }
    else if (*v21)
    {
      CFRelease(*v21);
      *CFTypeRef v21 = 0;
    }
  }
  CFAllocatorRef v25 = *v16;
  CFTypeID v26 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v27 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v24 = CFDictionaryCreateMutable(v25, 0, v26, v27);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v24);
  uint64_t v28 = CVPixelBufferCreate(v25, Width, Height, 0x42475241u, Mutable, (CVPixelBufferRef *)v21);
  if (v28)
  {
    uint64_t v37 = v28;
    CFDictionaryRef DictionaryRepresentation = 0;
    CFDictionaryRef v32 = 0;
    if (!Mutable) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_11:
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) == 1882468912 && (int v29 = (int)a5 % 6, v29 >= 1))
  {
    v40.origin.double x = (double)((int)a5 - v29);
    v40.origin.double y = (double)(int)a6;
    v40.size.width = (double)(v29 + (int)a7);
    double v30 = (double)(int)a8;
    v40.size.height = v30;
    CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v40);
    if (a4)
    {
      v41.origin.double x = (double)v29;
      v41.size.width = (double)(int)a7;
      v41.origin.double y = 0.0;
      v41.size.height = v30;
      CFDictionaryRef v32 = CGRectCreateDictionaryRepresentation(v41);
    }
    else
    {
      CFDictionaryRef v32 = 0;
    }
    a3 = DictionaryRepresentation;
  }
  else
  {
    CFDictionaryRef DictionaryRepresentation = 0;
    CFDictionaryRef v32 = 0;
  }
  VTSessionSetProperty(*v15, @"SourceCropRectangle", a3);
  VTSessionSetProperty(*v15, @"DestinationRectangle", a3);
  VTPixelTransferSessionRef v33 = *v15;
  CFStringRef v34 = @"EnableHistogram";
  if (a4)
  {
    VTSessionSetProperty(v33, @"EnableHistogram", (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    VTPixelTransferSessionRef v33 = *v15;
    CFStringRef v34 = @"HistogramRectangle";
    CFDictionaryRef v35 = v32;
  }
  else
  {
    CFDictionaryRef v35 = (CFDictionaryRef)*MEMORY[0x1E4F1CFC8];
  }
  VTSessionSetProperty(v33, v34, v35);
  CVBufferPropagateAttachments(pixelBuffer, (CVBufferRef)*v21);
  uint64_t v36 = VTPixelTransferSessionTransferImage(*v15, pixelBuffer, (CVPixelBufferRef)*v21);
  uint64_t v37 = v36;
  if (a4 && !v36) {
    VTSessionCopyProperty(*v15, @"HistogramData", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4);
  }
  if (!Mutable) {
    goto LABEL_26;
  }
LABEL_25:
  CFRelease(Mutable);
LABEL_26:
  if (v24) {
    CFRelease(v24);
  }
  if (DictionaryRepresentation) {
    CFRelease(DictionaryRepresentation);
  }
  if (v32) {
    CFRelease(v32);
  }
  return v37;
}

double vtHDRImageStatisticsGenerationSessionInit(uint64_t a1)
{
  *(void *)(a1 + 224) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void vtHDRImageStatisticsGenerationSessionFinalize(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    CFRelease(v3);
  }
  CFAllocatorRef v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
  free(*(void **)(a1 + 40));
  free(*(void **)(a1 + 56));
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 64));
  free(*(void **)(a1 + 72));
  free(*(void **)(a1 + 80));
  free(*(void **)(a1 + 88));
  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 96));
  free(*(void **)(a1 + 112));
  free(*(void **)(a1 + 120));
  free(*(void **)(a1 + 128));
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 152));
  free(*(void **)(a1 + 144));
  free(*(void **)(a1 + 160));
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 176));

  dispatch_time_t v5 = *(void **)(a1 + 224);
}

CFTypeRef vtHDRImageStatisticsGenerationSessionCopyFormattingDesc()
{
  return CFRetain(@"[VTHDRImageStatisticsGenerationSession]");
}

__CFString *vtHDRImageStatisticsGenerationSessionCopyDebugDesc(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<VTHDRImageStatisticsGenerationSession %p [%p]>{}", a1, v4);
  return Mutable;
}

uint64_t VTPixelBlitterColorHandlingOptimized_setup(int a1, CFDictionaryRef theDict, int a3, const __CFDictionary *a4, const __CFDictionary *a5, int a6, int a7, void *a8, void *a9, uint64_t a10, void (__cdecl **a11)(void *))
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v18 = (const void **)MEMORY[0x1E4F24C18];
  if (theDict) {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F24C18]);
  }
  else {
    CFStringRef Value = 0;
  }
  if (a4) {
    CFStringRef v107 = (const __CFString *)CFDictionaryGetValue(a4, *v18);
  }
  else {
    CFStringRef v107 = 0;
  }
  uint64_t v20 = 0;
  uint64_t v140 = 0;
  CGColorSpaceRef v139 = 0;
  CFTypeRef cf = 0;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  long long v158 = 0u;
  long long v159 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v154 = 0u;
  long long v155 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v150 = 0u;
  long long v151 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  long long v146 = 0u;
  long long v147 = 0u;
  long long v144 = 0u;
  long long v145 = 0u;
  BOOL v142 = 0;
  float v141 = 0;
  float v143 = 0;
  uint64_t v134 = 0;
  unsigned int v135 = &v134;
  uint64_t v136 = 0x2000000000;
  char v137 = 0;
  uint64_t v130 = 0;
  unint64_t v131 = &v130;
  uint64_t v132 = 0x2000000000;
  char v133 = 0;
  uint64_t v126 = 0;
  uint16x8_t v127 = &v126;
  uint64_t v128 = 0x2000000000;
  char v129 = 0;
  uint64_t v122 = 0;
  CFDictionaryRef v123 = &v122;
  uint64_t v124 = 0x2000000000;
  char v125 = 0;
  uint64_t v118 = 0;
  float v119 = &v118;
  uint64_t v120 = 0x2000000000;
  char v121 = 0;
  uint64_t v114 = 0;
  float v115 = &v114;
  uint64_t v116 = 0x2000000000;
  char v117 = 0;
  uint64_t v110 = 0;
  long long v111 = &v110;
  uint64_t v112 = 0x2000000000;
  char v113 = 0;
  v109[0] = 0;
  v109[1] = v109;
  v109[2] = 0x2000000000;
  v109[3] = 0;
  do
  {
    CFTypeRef v21 = (char *)&v144 + v20;
    *(void *)CFTypeRef v21 = 0;
    *(_OWORD *)(v21 + 8) = xmmword_193E7F2D0;
    *((_DWORD *)v21 + 6) = 1065353216;
    *(_OWORD *)(v21 + 28) = 0uLL;
    *(_OWORD *)(v21 + 44) = 0uLL;
    *(_OWORD *)(v21 + 60) = 0uLL;
    *(_OWORD *)(v21 + 76) = 0uLL;
    *(_OWORD *)(v21 + 92) = 0uLL;
    v20 += 128;
    *(_OWORD *)(v21 + 108) = 0uLL;
  }
  while (v20 != 384);
  unsigned int VectorCapabilities = getVectorCapabilities();
  if (a8)
  {
    uint64_t v23 = 0x4000;
    if (VectorCapabilities < 2) {
      uint64_t v23 = 0x8000;
    }
    CFMutableDictionaryRef v24 = (char *)malloc_type_calloc(1uLL, (3 * v23) | 0xA4, 0xDA67D0BBuLL);
    CFAllocatorRef v25 = v24;
    if (!v24)
    {
      uint64_t v33 = FigSignalErrorAt();
      uint64_t v27 = 0;
      CGColorConversionInfoRef v28 = 0;
      goto LABEL_28;
    }
    float v141 = v24 + 164;
    BOOL v142 = v24 + 16548;
    float v143 = v24 + 32932;
    if (a7) {
      MaxLogicalCoreCFIndex Count = 1;
    }
    else {
      MaxLogicalCoreCFIndex Count = FigThreadGetMaxLogicalCoreCount();
    }
    v25[162] = MaxLogicalCoreCount;
  }
  else
  {
    CFAllocatorRef v25 = 0;
  }
  uint64_t v27 = 0;
  CGColorConversionInfoRef v28 = 0;
  if (theDict && a4)
  {
    uint64_t v29 = VTCreateColorSpacesFromDictionaries(theDict, a4, &v139, &cf);
    if (v29)
    {
      uint64_t v27 = 0;
      CGColorConversionInfoRef v28 = 0;
      uint64_t v33 = v29;
      goto LABEL_28;
    }
    CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (a5) {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v30, 0, a5);
    }
    else {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutable(v30, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    uint64_t v27 = MutableCopy;
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F1DE90], (const void *)*MEMORY[0x1E4F1CFD0]);
    CFDictionaryRef v32 = (const void *)*MEMORY[0x1E4F1CFC8];
    CFDictionarySetValue(v27, @"kCGPQEETF3DLut", (const void *)*MEMORY[0x1E4F1CFC8]);
    CFDictionarySetValue(v27, @"kCGHLGSceneMapping3DLut", v32);
    CGColorConversionInfoRef v28 = CGColorConversionInfoCreateFromList(v27, v139, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, cf, 1, 0, 0);
    CGColorConversionInfoIterateFunctionsWithCallbacks();
  }
  if (*((unsigned char *)v115 + 24) || *((unsigned char *)v119 + 24))
  {
    uint64_t v33 = 4294954396;
    goto LABEL_28;
  }
  CFDictionaryRef v35 = v127;
  int v36 = *((unsigned __int8 *)v127 + 24);
  if (v25 && !*((unsigned char *)v127 + 24))
  {
    *(_OWORD *)(v25 + 72) = xmmword_193E7F2E0;
    *(_OWORD *)(v25 + 88) = xmmword_193E7F2E0;
    *((_DWORD *)v25 + 26) = 1065353216;
    int v36 = *((unsigned __int8 *)v35 + 24);
  }
  uint64_t v37 = VTPixelBlitterSetupAssignBlitter(a1, a3, *((unsigned __int8 *)v135 + 24), *((unsigned __int8 *)v131 + 24), v36, *((unsigned __int8 *)v123 + 24), a6, &v140);
  uint64_t v33 = v37;
  if (a8)
  {
    if (a1 > 1936077875)
    {
      if (a1 <= 1982882103)
      {
        if (a1 <= 1952854575)
        {
          if (a1 <= 1937126451)
          {
            if (a1 != 1936077876)
            {
              if (a1 != 1937125936)
              {
                int v40 = 1937125938;
                goto LABEL_74;
              }
LABEL_112:
              char v46 = 0;
              char v47 = 0;
              v25[124] = 16;
              *((_DWORD *)v25 + 32) = 0xFFFF;
              int v48 = -2147479552;
              goto LABEL_113;
            }
            goto LABEL_111;
          }
          if (a1 == 1937126452) {
            goto LABEL_112;
          }
          if (a1 == 1949458803) {
            goto LABEL_107;
          }
          int v49 = 1949589875;
          goto LABEL_106;
        }
        if (a1 > 1953903151)
        {
          if (a1 == 1953903152 || a1 == 1953903154) {
            goto LABEL_107;
          }
          int v49 = 1953903668;
LABEL_106:
          if (a1 == v49)
          {
LABEL_107:
            char v46 = 0;
            char v47 = 0;
            v25[124] = 12;
            *((_DWORD *)v25 + 32) = 4095;
            int v48 = 134217984;
            goto LABEL_113;
          }
LABEL_132:
          char v47 = 0;
          v25[124] = 0;
          *((_DWORD *)v25 + 32) = 0;
          *((_DWORD *)v25 + 35) = 0;
          goto LABEL_122;
        }
        if (a1 == 1952854576 || a1 == 1952854578)
        {
LABEL_102:
          char v47 = 0;
          v25[124] = 12;
          *((_DWORD *)v25 + 32) = 4095;
          unsigned int v51 = 0x8000000;
LABEL_121:
          *((_DWORD *)v25 + 35) = v51;
LABEL_122:
          uint64_t v52 = 956302336;
          char v46 = 1;
          goto LABEL_137;
        }
        int v44 = 1952855092;
LABEL_101:
        if (a1 != v44) {
          goto LABEL_132;
        }
        goto LABEL_102;
      }
      if (a1 <= 2016686641)
      {
        if (a1 <= 1999843441)
        {
          if (a1 != 1982882104 && a1 != 1983013176)
          {
            int v42 = 1983144248;
            goto LABEL_84;
          }
LABEL_85:
          char v46 = 0;
          char v47 = 0;
          v25[124] = 8;
          *((_DWORD *)v25 + 32) = 255;
          int v48 = 8388624;
LABEL_113:
          *((_DWORD *)v25 + 35) = v48;
          uint64_t v52 = 956302336;
          goto LABEL_137;
        }
        if (a1 != 1999843442)
        {
          if (a1 != 2016567667)
          {
            unsigned __int16 v45 = 12848;
LABEL_96:
            if (a1 != (v45 | 0x78340000)) {
              goto LABEL_132;
            }
            goto LABEL_97;
          }
          goto LABEL_97;
        }
        goto LABEL_124;
      }
      if (a1 <= 2019963439)
      {
        if (a1 != 2016686642 && a1 != 2016687156)
        {
          unsigned __int16 v45 = 24947;
          goto LABEL_96;
        }
LABEL_97:
        char v46 = 0;
        char v47 = 0;
        v25[124] = 10;
        *((_DWORD *)v25 + 32) = 1023;
        int v48 = 33554496;
        goto LABEL_113;
      }
      if (a1 != 2019963440 && a1 != 2019963442 && a1 != 2019963956) {
        goto LABEL_132;
      }
LABEL_117:
      char v47 = 0;
      v25[124] = 10;
      *((_DWORD *)v25 + 32) = 1023;
      unsigned int v51 = 0x2000000;
      goto LABEL_121;
    }
    if (a1 > 1278226741)
    {
      if (a1 > 1815162993)
      {
        if (a1 > 1932812658)
        {
          if (a1 == 1932812659) {
            goto LABEL_112;
          }
          if (a1 != 1936077360 && a1 != 1936077362) {
            goto LABEL_132;
          }
          goto LABEL_111;
        }
        if (a1 == 1815162994)
        {
          *((_WORD *)v25 + 70) = 0;
          v25[124] = 10;
          int v53 = 1023;
LABEL_134:
          *((_DWORD *)v25 + 32) = v53;
          goto LABEL_135;
        }
        if (a1 != 1815491698)
        {
          int v40 = 1932681587;
LABEL_74:
          if (a1 != v40) {
            goto LABEL_132;
          }
          goto LABEL_112;
        }
      }
      else
      {
        if (a1 <= 1380411456)
        {
          if (a1 != 1278226742)
          {
            if (a1 == 1380401729)
            {
              v25[124] = 8;
              int v41 = 255;
            }
            else
            {
              if (a1 != 1380410945) {
                goto LABEL_132;
              }
              v25[124] = 32;
              int v41 = -1;
            }
            goto LABEL_127;
          }
LABEL_111:
          char v47 = 0;
          v25[124] = 16;
          *((_DWORD *)v25 + 32) = 0xFFFF;
          unsigned int v51 = 0x80000000;
          goto LABEL_121;
        }
        if (a1 != 1380411457)
        {
          if (a1 == 1647534392)
          {
LABEL_124:
            v25[124] = 10;
            if (*((unsigned char *)v135 + 24))
            {
              *((_WORD *)v25 + 70) = 0;
              *((_DWORD *)v25 + 32) = 1023;
              uint64_t v52 = 0x3F40603039802411;
LABEL_136:
              char v46 = 1;
              char v47 = 1;
LABEL_137:
              char v104 = v47;
              unsigned int v105 = v37;
              char v102 = v46;
              if (a3 > 1936077875)
              {
                if (a3 > 1983000885)
                {
                  if (a3 <= 2016687155)
                  {
                    if (a3 > 1999843441)
                    {
                      if (a3 > 2016686639)
                      {
                        if (a3 == 2016686640)
                        {
LABEL_221:
                          char v101 = 0;
                          char v103 = 0;
                          v25[132] = 10;
                          *((_DWORD *)v25 + 34) = 1023;
                          *((void *)v25 + 18) = 0x4003AC02000040;
                          *((_WORD *)v25 + 76) = 960;
                          int8x8_t v63 = (int8x8_t)1149222912;
                          goto LABEL_251;
                        }
                        int v54 = 2016686642;
                        goto LABEL_220;
                      }
                      if (a3 != 1999843442)
                      {
                        int v54 = 2016567667;
LABEL_220:
                        if (a3 == v54) {
                          goto LABEL_221;
                        }
                        goto LABEL_249;
                      }
                      goto LABEL_211;
                    }
                    if (a3 != 1983000886)
                    {
                      if (a3 != 1983013176)
                      {
                        int v59 = 1983144248;
                        goto LABEL_235;
                      }
LABEL_236:
                      char v101 = 0;
                      char v103 = 0;
                      v25[132] = 8;
                      *((_DWORD *)v25 + 34) = 255;
                      *((void *)v25 + 18) = 0x1000EB00800010;
                      *((_WORD *)v25 + 76) = 240;
                      int8x8_t v63 = (int8x8_t)1132396544;
                      goto LABEL_251;
                    }
LABEL_207:
                    char v101 = 0;
                    char v103 = 0;
                    v25[132] = 16;
                    *((_DWORD *)v25 + 34) = 0xFFFF;
                    *((void *)v25 + 18) = 0x1000EB0080001000;
                    *((_WORD *)v25 + 76) = -4096;
                    int8x8_t v63 = (int8x8_t)1199570688;
                    goto LABEL_251;
                  }
                  if (a3 <= 2019963441)
                  {
                    if (a3 == 2016687156 || a3 == 2016698739) {
                      goto LABEL_221;
                    }
                    unsigned __int16 v58 = 12848;
LABEL_195:
                    if (a3 != (v58 | 0x78660000)) {
                      goto LABEL_249;
                    }
                    goto LABEL_226;
                  }
                  if (a3 <= 2037741157)
                  {
                    if (a3 != 2019963442)
                    {
                      unsigned __int16 v58 = 13364;
                      goto LABEL_195;
                    }
LABEL_226:
                    char v103 = 0;
                    v25[132] = 10;
                    *((_DWORD *)v25 + 34) = 1023;
                    *((void *)v25 + 18) = 0x3FF02000000;
                    *((_WORD *)v25 + 76) = 1023;
                    int8x8_t v63 = (int8x8_t)1149222912;
                    goto LABEL_238;
                  }
                  if (a3 != 2037741158)
                  {
                    int v59 = 2037741171;
LABEL_235:
                    if (a3 == v59) {
                      goto LABEL_236;
                    }
LABEL_249:
                    char v101 = 0;
                    char v103 = 0;
                    v25[132] = 0;
                    *((_DWORD *)v25 + 34) = 0;
                    *((void *)v25 + 18) = 0;
                    *((_WORD *)v25 + 76) = 0;
                    goto LABEL_250;
                  }
LABEL_237:
                  char v103 = 0;
                  v25[132] = 8;
                  *((_DWORD *)v25 + 34) = 255;
                  *((void *)v25 + 18) = 0xFF00800000;
                  *((_WORD *)v25 + 76) = 255;
                  int8x8_t v63 = (int8x8_t)1132396544;
                  goto LABEL_238;
                }
                if (a3 > 1952854575)
                {
                  if (a3 > 1953903151)
                  {
                    if (a3 <= 1953903667)
                    {
                      if (a3 == 1953903152) {
                        goto LABEL_229;
                      }
                      int v56 = 1953903154;
                      goto LABEL_205;
                    }
                    if (a3 != 1953903668)
                    {
                      int v59 = 1982882104;
                      goto LABEL_235;
                    }
                    goto LABEL_229;
                  }
                  if (a3 == 1952854576 || a3 == 1952854578)
                  {
LABEL_225:
                    char v103 = 0;
                    v25[132] = 12;
                    *((_DWORD *)v25 + 34) = 4095;
                    *((void *)v25 + 18) = 0xFFF08000000;
                    *((_WORD *)v25 + 76) = 4095;
                    int8x8_t v63 = (int8x8_t)1166012416;
LABEL_238:
                    char v101 = 1;
                    goto LABEL_251;
                  }
                  int v61 = 1952855092;
LABEL_224:
                  if (a3 != v61) {
                    goto LABEL_249;
                  }
                  goto LABEL_225;
                }
                if (a3 > 1937126451)
                {
                  if (a3 == 1937126452) {
                    goto LABEL_207;
                  }
                  if (a3 != 1949458803)
                  {
                    int v56 = 1949589875;
LABEL_205:
                    if (a3 != v56) {
                      goto LABEL_249;
                    }
                  }
LABEL_229:
                  char v101 = 0;
                  char v103 = 0;
                  v25[132] = 12;
                  *((_DWORD *)v25 + 34) = 4095;
                  *((void *)v25 + 18) = 0x1000EB008000100;
                  *((_WORD *)v25 + 76) = 3840;
                  int8x8_t v63 = (int8x8_t)1166012416;
                  goto LABEL_251;
                }
                if (a3 != 1936077876)
                {
                  if (a3 == 1937125936) {
                    goto LABEL_207;
                  }
                  int v57 = 1937125938;
LABEL_172:
                  if (a3 != v57) {
                    goto LABEL_249;
                  }
                  goto LABEL_207;
                }
                goto LABEL_232;
              }
              if (a3 <= 1278226741)
              {
                if (a3 <= 875704949)
                {
                  if (a3 > 875704421)
                  {
                    if (a3 == 875704422) {
                      goto LABEL_237;
                    }
                    if (a3 == 875704438) {
                      goto LABEL_236;
                    }
                    int v55 = 875704934;
LABEL_200:
                    if (a3 != v55) {
                      goto LABEL_249;
                    }
                    goto LABEL_237;
                  }
                  if (a3 != 32)
                  {
                    if (a3 != 846624102)
                    {
                      int v59 = 846624121;
                      goto LABEL_235;
                    }
                    goto LABEL_237;
                  }
                  char v101 = 0;
                  v25[132] = 8;
                  *((_DWORD *)v25 + 34) = 255;
                  int v66 = 197121;
                }
                else
                {
                  if (a3 <= 1111970368)
                  {
                    if (a3 == 875704950) {
                      goto LABEL_236;
                    }
                    if (a3 != 875836518)
                    {
                      int v59 = 875836534;
                      goto LABEL_235;
                    }
                    goto LABEL_237;
                  }
                  if (a3 > 1278226735)
                  {
                    if (a3 == 1278226736) {
                      goto LABEL_226;
                    }
                    int v61 = 1278226738;
                    goto LABEL_224;
                  }
                  if (a3 != 1111970369)
                  {
                    int v55 = 1278226488;
                    goto LABEL_200;
                  }
                  char v101 = 0;
                  v25[132] = 8;
                  *((_DWORD *)v25 + 34) = 255;
                  int v66 = 50331906;
                }
                goto LABEL_242;
              }
              if (a3 > 1647719520)
              {
                if (a3 > 1932681586)
                {
                  if (a3 <= 1936077359)
                  {
                    if (a3 == 1932681587) {
                      goto LABEL_207;
                    }
                    int v57 = 1932812659;
                    goto LABEL_172;
                  }
                  if (a3 != 1936077360 && a3 != 1936077362) {
                    goto LABEL_249;
                  }
LABEL_232:
                  char v103 = 0;
                  v25[132] = 16;
                  *((_DWORD *)v25 + 34) = 0xFFFF;
                  *((void *)v25 + 18) = 0xFFFF80000000;
                  *((_WORD *)v25 + 76) = -1;
                  int8x8_t v63 = (int8x8_t)1199570688;
                  goto LABEL_238;
                }
                switch(a3)
                {
                  case 1647719521:
                    char v101 = 0;
                    v25[132] = 16;
                    *((_DWORD *)v25 + 34) = 0xFFFF;
                    int v62 = 197121;
                    break;
                  case 1815162994:
                    char v101 = 0;
                    *((_WORD *)v25 + 72) = 0;
                    v25[132] = 10;
                    *((_DWORD *)v25 + 34) = 1023;
                    int8x8_t v63 = (int8x8_t)1149222912;
                    goto LABEL_246;
                  case 1815491698:
                    char v101 = 0;
                    v25[132] = 16;
                    *((_DWORD *)v25 + 34) = 0xFFFF;
                    int v62 = 50462976;
                    break;
                  default:
                    goto LABEL_249;
                }
                *(_DWORD *)(v25 + 158) = v62;
                int8x8_t v63 = (int8x8_t)1199570688;
LABEL_246:
                char v103 = 1;
                goto LABEL_251;
              }
              if (a3 > 1380411456)
              {
                if (a3 != 1380411457)
                {
                  if (a3 != 1630697081)
                  {
                    if (a3 == 1647534392)
                    {
LABEL_211:
                      v38.i32[0] = 0;
                      char v101 = 0;
                      v39.i32[0] = *((unsigned __int8 *)v123 + 24);
                      int8x8_t v63 = vbsl_s8(vdup_lane_s8(vceq_s8(v39, v38), 0), (int8x8_t)1149222912, (int8x8_t)0x43C0000043FF8000);
                      if (*((unsigned char *)v123 + 24)) {
                        int v64 = 1023;
                      }
                      else {
                        int v64 = 511;
                      }
                      if (*((unsigned char *)v123 + 24)) {
                        __int16 v65 = 0;
                      }
                      else {
                        __int16 v65 = 384;
                      }
                      *((_WORD *)v25 + 72) = v65;
                      *((_DWORD *)v25 + 34) = v64;
                      v25[132] = 10;
                      goto LABEL_246;
                    }
                    goto LABEL_249;
                  }
                  goto LABEL_236;
                }
                char v101 = 0;
                char v60 = 16;
              }
              else
              {
                if (a3 == 1278226742) {
                  goto LABEL_232;
                }
                if (a3 == 1380401729)
                {
                  char v101 = 0;
                  v25[132] = 8;
                  *((_DWORD *)v25 + 34) = 255;
                  int v66 = 50462976;
LABEL_242:
                  *(_DWORD *)(v25 + 158) = v66;
                  int8x8_t v63 = (int8x8_t)1132396544;
                  goto LABEL_246;
                }
                if (a3 != 1380410945) {
                  goto LABEL_249;
                }
                char v101 = 0;
                char v60 = 32;
              }
              v25[132] = v60;
              char v103 = 1;
              *((_DWORD *)v25 + 34) = 1;
              *(_DWORD *)(v25 + 158) = 50462976;
LABEL_250:
              int8x8_t v63 = (int8x8_t)1065353216;
LABEL_251:
              long double v67 = v111;
              LODWORD(v68) = *((unsigned __int8 *)v111 + 24);
              if (*((unsigned char *)v111 + 24))
              {
                unint64_t v69 = 0;
                do
                {
                  if (v69 == v68 - 1)
                  {
                    long long v70 = (int8x8_t *)(&v144 + 8 * v69);
                    v70[1].i32[0] = 956302336;
                    v70[2] = v63;
                  }
                  else if (v69)
                  {
                    if (v69 == 1)
                    {
                      *((void *)&v152 + 1) = 956302336;
                      LODWORD(v153) = 1065353216;
                    }
                  }
                  else
                  {
                    *((void *)&v144 + 1) = v52;
                    LODWORD(v145) = 1174403072;
                  }
                  int8x16_t v71 = (&v141)[v69];
                  uint64_t v72 = (float (*)(long long *, float))*((void *)&v144 + 16 * v69);
                  if (v72)
                  {
                    for (uint64_t i = 0; i != 0x2000; ++i)
                    {
                      _S0 = v72(&v144 + 8 * v69, (float)(int)i);
                      __asm { FCVT            H0, S0 }
                      *(_WORD *)&v71[2 * i] = LOWORD(_S0);
                    }
                    long double v67 = v111;
                  }
                  else
                  {
                    bzero((&v141)[v69], 0x4000uLL);
                  }
                  ++v69;
                  unint64_t v68 = *((unsigned __int8 *)v67 + 24);
                }
                while (v69 < v68);
              }
              uint64_t v33 = v105;
              if ((v104 & 1) == 0)
              {
                int v79 = v25[124];
                int v80 = FigCFEqual();
                v82.i64[0] = 0xBEB032983FB374BCLL;
                float v83 = 1.772;
                float v84 = -0.71414;
                if (!v80)
                {
                  int32x4_t v106 = v82;
                  int IntegerCodePointForString = CVYCbCrMatrixGetIntegerCodePointForString(Value);
                  int32x4_t v82 = v106;
                  if (IntegerCodePointForString != 5)
                  {
                    if (FigCFEqual())
                    {
                      v82.i64[0] = 0xBE2880953FBCBFB1;
                      float v83 = 1.8814;
                      float v84 = -0.57135;
                    }
                    else
                    {
                      if (!FigCFEqual()) {
                        goto LABEL_297;
                      }
                      v82.i64[0] = 0xBE3FD1DD3FC9930CLL;
                      float v83 = 1.8556;
                      float v84 = -0.46812;
                    }
                  }
                }
                uint64_t v33 = 0;
                v81.i32[1] = 0;
                *(void *)CFAllocatorRef v25 = 1065353216;
                *((_DWORD *)v25 + 2) = v82.i32[0];
                *((_DWORD *)v25 + 3) = 1065353216;
                *((_DWORD *)v25 + 4) = v82.i32[1];
                *((float *)v25 + 5) = v84;
                *((_DWORD *)v25 + 6) = 1065353216;
                *((float *)v25 + 7) = v83;
                *((_DWORD *)v25 + 8) = 0;
                if ((v102 & 1) == 0)
                {
                  uint64_t v33 = 0;
                  if (v79 >= 16) {
                    int v86 = 16;
                  }
                  else {
                    int v86 = v79;
                  }
                  if (v86 <= 8) {
                    int v86 = 8;
                  }
                  *(float *)v81.i32 = (float)~(-1 << v86);
                  *(float32x2_t *)v81.i8 = vdiv_f32(vcvt_f32_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)0xDB000000E0, (uint32x2_t)vdup_n_s32(v86 - 8)), (int32x2_t)-1)), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.i8, 0));
                  float32x4_t v87 = vdivq_f32((float32x4_t)vtrn1q_s32((int32x4_t)xmmword_193E7F2F0, vzip1q_s32(v82, v81)), (float32x4_t)vzip1q_s32(v81, vdupq_lane_s32(*(int32x2_t *)v81.i8, 0)));
                  *(_DWORD *)CFAllocatorRef v25 = v87.i32[2];
                  *((_DWORD *)v25 + 6) = v87.i32[2];
                  *(float32x4_t *)(v25 + 4) = v87;
                  *((float *)v25 + 5) = v84 / *(float *)v81.i32;
                  *((float *)v25 + 7) = v83 / *(float *)v81.i32;
                  *((_DWORD *)v25 + 8) = v87.i32[0];
                }
              }
              if (v103)
              {
LABEL_294:
                uint64_t v100 = v140;
                if (v140)
                {
                  *a8 = v25;
                  CFAllocatorRef v25 = 0;
                  *a9 = v100;
                  *a11 = VTPixelBlitterColorHandlingOptimized_cleanup;
                }
                else
                {
                  uint64_t v33 = 4294954396;
                }
                goto LABEL_28;
              }
              int v88 = v25[132];
              float v89 = -0.081312;
              float v90 = -0.41869;
              float v91 = -0.33126;
              float v92 = -0.16874;
              float v93 = 0.114;
              float v94 = 0.587;
              float v95 = 0.299;
              if (FigCFEqual() || CVYCbCrMatrixGetIntegerCodePointForString(v107) == 5)
              {
LABEL_286:
                *((float *)v25 + 9) = v95;
                *((float *)v25 + 10) = v94;
                *((float *)v25 + 11) = v93;
                *((float *)v25 + 12) = v92;
                *((float *)v25 + 13) = v91;
                *((void *)v25 + 7) = 0x3F0000003F000000;
                *((float *)v25 + 16) = v90;
                *((float *)v25 + 17) = v89;
                if (v101)
                {
                  uint64_t v33 = 0;
                }
                else
                {
                  uint64_t v33 = 0;
                  if (v88 >= 16) {
                    int v96 = 16;
                  }
                  else {
                    int v96 = v88;
                  }
                  if (v96 <= 8) {
                    LOBYTE(v96) = 8;
                  }
                  float v97 = (float)~(-1 << v96);
                  float v98 = (float)((219 << (v96 - 8)) - 1) / v97;
                  float v99 = (float)((224 << (v96 - 8)) - 1) / v97;
                  *((float *)v25 + 9) = v98 * v95;
                  *((float *)v25 + 10) = v98 * v94;
                  *((float *)v25 + 15) = v99 * 0.5;
                  *((float *)v25 + 16) = v99 * v90;
                  *((float *)v25 + 11) = v98 * v93;
                  *((float *)v25 + 12) = v99 * v92;
                  *((float *)v25 + 13) = v99 * v91;
                  *((float *)v25 + 14) = v99 * 0.5;
                  *((float *)v25 + 17) = v99 * v89;
                }
                goto LABEL_294;
              }
              if (FigCFEqual())
              {
                float v89 = -0.040215;
                float v90 = -0.45979;
                float v91 = -0.36037;
                float v92 = -0.13963;
                float v93 = 0.059302;
                float v94 = 0.678;
                float v95 = 0.2627;
                goto LABEL_286;
              }
              if (FigCFEqual())
              {
                float v89 = -0.045847;
                float v90 = -0.45415;
                float v91 = -0.38543;
                float v92 = -0.11457;
                float v93 = 0.0722;
                float v94 = 0.7152;
                float v95 = 0.2126;
                goto LABEL_286;
              }
LABEL_297:
              uint64_t v33 = 4294954391;
              goto LABEL_28;
            }
            *((_WORD *)v25 + 70) = 384;
            int v53 = 511;
            goto LABEL_134;
          }
          if (a1 != 1647719521) {
            goto LABEL_132;
          }
          v25[124] = 16;
          int v50 = 0xFFFF;
          goto LABEL_130;
        }
      }
      v25[124] = 16;
      int v41 = 0xFFFF;
LABEL_127:
      *((_DWORD *)v25 + 32) = v41;
      int v43 = 50462976;
LABEL_131:
      *(_DWORD *)(v25 + 154) = v43;
LABEL_135:
      uint64_t v52 = 956302336;
      goto LABEL_136;
    }
    if (a1 <= 875836517)
    {
      if (a1 <= 875704437)
      {
        if (a1 == 32)
        {
          v25[124] = 8;
          int v50 = 255;
LABEL_130:
          *((_DWORD *)v25 + 32) = v50;
          int v43 = 197121;
          goto LABEL_131;
        }
        if (a1 != 875704422) {
          goto LABEL_132;
        }
      }
      else
      {
        if (a1 == 875704438) {
          goto LABEL_85;
        }
        if (a1 != 875704934)
        {
          int v42 = 875704950;
LABEL_84:
          if (a1 != v42) {
            goto LABEL_132;
          }
          goto LABEL_85;
        }
      }
    }
    else if (a1 > 1278226487)
    {
      if (a1 != 1278226488)
      {
        if (a1 != 1278226736)
        {
          int v44 = 1278226738;
          goto LABEL_101;
        }
        goto LABEL_117;
      }
    }
    else if (a1 != 875836518)
    {
      if (a1 == 875836534) {
        goto LABEL_85;
      }
      if (a1 != 1111970369) {
        goto LABEL_132;
      }
      v25[124] = 8;
      *((_DWORD *)v25 + 32) = 255;
      int v43 = 50331906;
      goto LABEL_131;
    }
    char v47 = 0;
    v25[124] = 8;
    *((_DWORD *)v25 + 32) = 255;
    unsigned int v51 = 0x800000;
    goto LABEL_121;
  }
LABEL_28:
  free(v25);
  if (v139) {
    CFRelease(v139);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (v27) {
    CFRelease(v27);
  }
  _Block_object_dispose(v109, 8);
  _Block_object_dispose(&v110, 8);
  _Block_object_dispose(&v114, 8);
  _Block_object_dispose(&v118, 8);
  _Block_object_dispose(&v122, 8);
  _Block_object_dispose(&v126, 8);
  _Block_object_dispose(&v130, 8);
  _Block_object_dispose(&v134, 8);
  return v33;
}

uint64_t getVectorCapabilities()
{
  if ((getVectorCapabilities_didCheck & 1) == 0)
  {
    size_t v2 = 0;
    int v1 = 0;
    sysctlbyname("hw.optional.neon_fp16", 0, &v2, 0, 0);
    if (v2 == 4)
    {
      sysctlbyname("hw.optional.neon_fp16", &v1, &v2, 0, 0);
      if (v1) {
        getVectorCapabilities_options |= 2u;
      }
    }
    getVectorCapabilities_didChecuint64_t k = 1;
  }
  return getVectorCapabilities_options;
}

float vtptsPixelOpTrcType0(float *a1, int8x16_t a2, int8x16_t a3)
{
  *(float *)a2.i32 = -(float)(a1[3] - (float)(*(float *)a2.i32 * a1[2]));
  a3.i32[0] = 1.0;
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  float v7 = *(float *)vbslq_s8(v4, a3, a2).i32;
  float v5 = pow(fabsf(*(float *)a2.i32), a1[6]);
  return a1[5] + (float)((float)(v7 * v5) * a1[4]);
}

float vtptsPixelOpTrcType1(float *a1, float a2, int8x16_t a3, double a4, int8x16_t a5)
{
  float v5 = a1[4];
  float v6 = a1[5];
  float v8 = a1[7];
  float v7 = a1[8];
  *(float *)a5.i32 = -(float)(a1[3] - (float)(a2 * a1[2]));
  float v9 = fabsf(*(float *)a5.i32);
  if (v9 >= (float)(v7 / v8))
  {
    int8x16_t v14 = a5;
    long double v11 = pow((float)(v7 + (float)(v8 * v9)), a1[6]);
    a5 = v14;
    float v10 = v11 + 0.0;
  }
  else
  {
    float v10 = (float)(v9 * 0.0) + 0.0;
  }
  a3.i64[0] = COERCE_UNSIGNED_INT(1.0);
  v12.i64[0] = 0x8000000080000000;
  v12.i64[1] = 0x8000000080000000;
  return v6 + (float)((float)(*(float *)vbslq_s8(v12, a3, a5).i32 * v10) * v5);
}

float vtptsPixelOpTrcType2(float *a1, float a2, int8x16_t a3, double a4, int8x16_t a5)
{
  float v5 = a1[4];
  float v6 = a1[5];
  float v8 = a1[7];
  float v7 = a1[8];
  *(float *)a5.i32 = -(float)(a1[3] - (float)(a2 * a1[2]));
  float v9 = fabsf(*(float *)a5.i32);
  if (v9 >= (float)(v7 / v8))
  {
    int8x16_t v14 = a5;
    long double v11 = pow((float)(v7 + (float)(v8 * v9)), a1[6]);
    a5 = v14;
    a3.i32[1] = 0;
    float v10 = v11 + 0.0;
  }
  else
  {
    float v10 = -(float)(a1[9] - (float)(v9 * 0.0));
  }
  a3.i32[0] = 1.0;
  v12.i64[0] = 0x8000000080000000;
  v12.i64[1] = 0x8000000080000000;
  return v6 + (float)((float)(*(float *)vbslq_s8(v12, a3, a5).i32 * v10) * v5);
}

float vtptsPixelOpTrcType3(float *a1, float a2, int8x16_t a3, double a4, double a5, int8x16_t a6)
{
  float v6 = a1[4];
  float v7 = a1[5];
  *(float *)a6.i32 = -(float)(a1[3] - (float)(a2 * a1[2]));
  float v8 = fabsf(*(float *)a6.i32);
  if (v8 >= a1[10])
  {
    int8x16_t v13 = a6;
    long double v10 = pow((float)(a1[8] + (float)(a1[7] * v8)), a1[6]);
    a6 = v13;
    a3.i32[1] = 0;
    float v9 = v10 + 0.0;
  }
  else
  {
    float v9 = (float)(a1[9] * v8) + 0.0;
  }
  a3.i32[0] = 1.0;
  v11.i64[0] = 0x8000000080000000;
  v11.i64[1] = 0x8000000080000000;
  return v7 + (float)((float)(*(float *)vbslq_s8(v11, a3, a6).i32 * v9) * v6);
}

float vtptsPixelOpTrcType4(float *a1, float a2, int8x16_t a3, double a4, int8x16_t a5)
{
  *(float *)a5.i32 = -(float)(a1[3] - (float)(a2 * a1[2]));
  float v6 = fabsf(*(float *)a5.i32);
  if (v6 >= a1[10])
  {
    int8x16_t v11 = a5;
    long double v8 = pow((float)(a1[8] + (float)(a1[7] * v6)), a1[6]);
    a5 = v11;
    *(double *)a3.i64 = a1[11];
    float v7 = v8 + *(double *)a3.i64;
  }
  else
  {
    float v7 = a1[12] + (float)(a1[9] * v6);
  }
  a3.i32[0] = 1.0;
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  return a1[5] + (float)((float)(*(float *)vbslq_s8(v9, a3, a5).i32 * v7) * a1[4]);
}

float vtptsPixelOpPQEOTF(float *a1, int8x16_t a2)
{
  *(float *)a2.i32 = -(float)(a1[3] - (float)(*(float *)a2.i32 * a1[2]));
  int8x16_t v7 = a2;
  float v3 = powf(fabsf(*(float *)a2.i32), a1[7]);
  v4.i64[0] = COERCE_UNSIGNED_INT(1.0);
  v5.i64[0] = 0x8000000080000000;
  v5.i64[1] = 0x8000000080000000;
  return a1[5]
       + (float)((float)(*(float *)vbslq_s8(v5, v4, v7).i32
                       * powf(fmaxf(v3 - a1[9], 0.0) / (float)(a1[10] - (float)(a1[11] * v3)), a1[8]))
               * a1[4]);
}

float vtptsPixelOpPQInvEOTF(float *a1, int8x16_t a2, int8x16_t a3)
{
  *(float *)a2.i32 = -(float)(a1[3] - (float)(*(float *)a2.i32 * a1[2]));
  a3.i32[0] = 1.0;
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  float v8 = *(float *)vbslq_s8(v4, a3, a2).i32;
  float v5 = powf(a1[12] * fabsf(*(float *)a2.i32), a1[7]);
  float v6 = (float)(a1[9] + (float)(a1[10] * v5)) / ((float)(v5 * a1[11]) + 1.0);
  return a1[5] + (float)((float)(v8 * powf(v6, a1[8])) * a1[4]);
}

float vtptsPixelOpHLGInvOETF(float *a1, float a2)
{
  float v3 = (float)(a1[2] * a2) - a1[3];
  if (v3 >= 0.5) {
    float v4 = (exp((float)((float)(v3 + -0.55991) / 0.17883)) + 0.284668922) * 0.0833333358;
  }
  else {
    float v4 = (float)(v3 * v3) * 0.33333;
  }
  return a1[5] + (float)(v4 * a1[4]);
}

float vtptsPixelOpHLGOETF(float *a1, float a2, int8x16_t a3, double a4, int8x16_t a5)
{
  *(float *)a5.i32 = -(float)(a1[3] - (float)(a2 * a1[2]));
  float v6 = a1[11] * fabsf(*(float *)a5.i32);
  if (v6 <= a1[10])
  {
    a3.i64[0] = 3.0;
    double v9 = sqrt(v6 * 3.0);
  }
  else
  {
    double v7 = a1[7];
    int8x16_t v13 = a5;
    long double v8 = log(-(a1[8] - v6 * 12.0));
    a5 = v13;
    *(double *)a3.i64 = a1[9];
    double v9 = *(double *)a3.i64 + v7 * v8;
  }
  float v10 = v9;
  a3.i32[0] = 1.0;
  v11.i64[0] = 0x8000000080000000;
  v11.i64[1] = 0x8000000080000000;
  return a1[5] + (float)((float)(*(float *)vbslq_s8(v11, a3, a5).i32 * v10) * a1[4]);
}

float vtptsLumaScalingPow(float *a1, float a2)
{
  float v2 = a1[2];
  float v3 = a1[3];
  float v4 = -(float)(v3 - (float)(a2 * v2));
  if (v4 == 0.0) {
    float v4 = -(v3 - v2 * 0.5);
  }
  double v5 = a1[7];
  return a1[5] + pow(v4, a1[6]) * v5 * a1[4];
}

float vtptsPQToneMappingPow(float *a1, float a2)
{
  float v3 = -(float)(a1[3] - (float)(a2 * a1[2]));
  float v4 = a1[14];
  float v6 = a1[15];
  float v5 = a1[16];
  float v7 = a1[18];
  float v8 = a1[19];
  float v9 = a1[17];
  float v10 = a1[22];
  float v19 = a1[21];
  float v18 = a1[13];
  float v11 = powf(v3 / 8191.0, v18);
  float v12 = (float)(powf((float)(v6 + (float)(v5 * v11)) / (float)((float)(v9 * v11) + 1.0), v4) - v8) / (float)(v7 - v8);
  if (v12 >= v10)
  {
    float v13 = (float)(v12 - v10) * a1[23];
    float v12 = (1.0 - v10) * (float)(v13 - (float)((float)(v13 * (float)(v13 + v13)) - (float)((float)(v13 * v13) * v13)))
        + ((float)-(float)((float)(v13 * (float)(v13 * 3.0)) - (float)((float)(v13 * (float)(v13 + v13)) * v13)) + 1.0)
        * v10
        + (float)(a1[20] * (float)((float)(v13 * (float)(v13 * 3.0)) + (float)((float)(v13 * (float)(v13 * -2.0)) * v13)));
  }
  if (v12 >= 0.0)
  {
    if (v12 >= 1.0) {
      float v14 = v12;
    }
    else {
      float v14 = v12
    }
          + (float)((float)((float)(1.0 - v12) * (float)((float)(1.0 - v12) * (float)(v19 * (float)(1.0 - v12))))
                  * (float)(1.0 - v12));
  }
  else
  {
    float v14 = v19;
  }
  float v15 = 0.0;
  if (v3 != 0.0)
  {
    float v16 = powf(v8 + (float)(v14 * (float)(v7 - v8)), 1.0 / v4);
    float v15 = (float)((float)(powf(fmaxf(v16 - v6, 0.0) / (float)(v5 - (float)(v9 * v16)), 1.0 / v18) * 10000.0) / v3)
        * 8191.0;
  }
  return a1[5] + (float)(v15 * a1[4]);
}

uint64_t VTPixelBlitterSetupAssignBlitter(int a1, int a2, int a3, int a4, int a5, int a6, int a7, void *a8)
{
  float v10 = 0;
  uint64_t result = 4294954396;
  if (a1 <= 1936077875)
  {
    if (a1 <= 1380401728)
    {
      if (a1 > 875836533)
      {
        if (a1 > 1278226735)
        {
          if ((a1 - 1278226736) > 6 || ((1 << (a1 - 48)) & 0x45) == 0) {
            goto LABEL_7023;
          }
          goto LABEL_82;
        }
        if (a1 == 875836534)
        {
LABEL_55:
          float v10 = 0;
          if (a2 > 1937125937)
          {
            if (a2 > 1983013175)
            {
              if (a2 > 2016687155)
              {
                if (a2 > 2019963441)
                {
                  if (a2 > 2037741157)
                  {
                    if (a2 == 2037741158 || a2 == 2037741171)
                    {
                      if (a3) {
                        BOOL v491 = a4 == 0;
                      }
                      else {
                        BOOL v491 = 1;
                      }
                      int v492 = !v491;
                      float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_yuvsf;
                      if (!v491 && a5 && a6) {
                        goto LABEL_7022;
                      }
                      if (a5) {
                        int v492 = 0;
                      }
                      float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_yuvsf;
                      if (v492 == 1)
                      {
                        if (a6) {
                          goto LABEL_7022;
                        }
                      }
                      BOOL v493 = a3 && a4 == 0;
                      BOOL v494 = !v493;
                      float v10 = vt_Copy_444vf_TRC_Mat_TRC_yuvsf;
                      if (a6)
                      {
                        if (!v494 && !a5) {
                          goto LABEL_7022;
                        }
                      }
                      float v10 = vt_Copy_444vf_TRC_Mat_TRC_yuvsf;
                      if (a5)
                      {
                        if (!v494 && a6) {
                          goto LABEL_7022;
                        }
                      }
                      uint64_t result = 0;
                      BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                      float v10 = vt_Copy_444vf_rgb_yuvsf;
                      goto LABEL_6592;
                    }
                    goto LABEL_7023;
                  }
                  if (a2 != 2019963442)
                  {
                    if (a2 != 2019963956) {
                      goto LABEL_7023;
                    }
                    goto LABEL_1853;
                  }
LABEL_1776:
                  if (a3) {
                    BOOL v252 = a4 == 0;
                  }
                  else {
                    BOOL v252 = 1;
                  }
                  int v253 = !v252;
                  if (!v252 && a5 && a6) {
                    goto LABEL_1789;
                  }
                  if (a5) {
                    int v253 = 0;
                  }
                  if (v253 == 1 && a6)
                  {
LABEL_1789:
                    float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422;
                    if (a7) {
                      goto LABEL_7022;
                    }
                    unsigned int VectorCapabilities = getVectorCapabilities();
                    uint64_t result = 0;
                    BOOL v29 = VectorCapabilities >= 2;
                    CFAllocatorRef v30 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422_neon_fp16;
                    float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422;
                    goto LABEL_7028;
                  }
                  if (a3) {
                    BOOL v526 = a4 == 0;
                  }
                  else {
                    BOOL v526 = 0;
                  }
                  int v527 = !v526;
                  if (a6 && !v527 && !a5 || a5 && v527 != 1 && a6)
                  {
                    float v10 = vt_Copy_444vf_TRC_Mat_TRC_xf422;
                    if (a7) {
                      goto LABEL_7022;
                    }
                    unsigned int v528 = getVectorCapabilities();
                    uint64_t result = 0;
                    BOOL v29 = v528 >= 2;
                    CFAllocatorRef v30 = vt_Copy_444vf_TRC_Mat_TRC_xf422_neon_fp16;
                    float v10 = vt_Copy_444vf_TRC_Mat_TRC_xf422;
                    goto LABEL_7028;
                  }
                  if (!(a4 | a3 | a5 | a6))
                  {
                    float v10 = vt_Copy_444vf_rgb_xf422;
                    if (a7) {
                      goto LABEL_7022;
                    }
                    unsigned int v967 = getVectorCapabilities();
                    uint64_t result = 0;
                    BOOL v29 = v967 >= 2;
                    CFAllocatorRef v30 = vt_Copy_444vf_rgb_xf422_neon_fp16;
                    float v10 = vt_Copy_444vf_rgb_xf422;
                    goto LABEL_7028;
                  }
                  goto LABEL_6900;
                }
                if (a2 != 2016687156 && a2 != 2016698739)
                {
                  if (a2 != 2019963440) {
                    goto LABEL_7023;
                  }
                  goto LABEL_1791;
                }
LABEL_1853:
                if (a3) {
                  BOOL v265 = a4 == 0;
                }
                else {
                  BOOL v265 = 1;
                }
                int v266 = !v265;
                if (!v265 && a5 && a6) {
                  goto LABEL_1866;
                }
                if (a5) {
                  int v266 = 0;
                }
                if (v266 == 1 && a6)
                {
LABEL_1866:
                  float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v267 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v267 >= 2;
                  CFAllocatorRef v30 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444_neon_fp16;
                  float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444;
                  goto LABEL_7028;
                }
                if (a3) {
                  BOOL v529 = a4 == 0;
                }
                else {
                  BOOL v529 = 0;
                }
                int v530 = !v529;
                if (a6 && !v530 && !a5 || a5 && v530 != 1 && a6)
                {
                  float v10 = vt_Copy_444vf_TRC_Mat_TRC_xf444;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v531 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v531 >= 2;
                  CFAllocatorRef v30 = vt_Copy_444vf_TRC_Mat_TRC_xf444_neon_fp16;
                  float v10 = vt_Copy_444vf_TRC_Mat_TRC_xf444;
                  goto LABEL_7028;
                }
                if (!(a4 | a3 | a5 | a6))
                {
                  float v10 = vt_Copy_444vf_rgb_xf444;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v968 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v968 >= 2;
                  CFAllocatorRef v30 = vt_Copy_444vf_rgb_xf444_neon_fp16;
                  float v10 = vt_Copy_444vf_rgb_xf444;
                  goto LABEL_7028;
                }
                goto LABEL_6900;
              }
              if (a2 <= 2016567666)
              {
                if (a2 != 1983013176)
                {
                  if (a2 != 1983144248)
                  {
                    int v40 = 1999843442;
LABEL_1078:
                    if (a2 != v40) {
                      goto LABEL_7023;
                    }
LABEL_1926:
                    if (a3) {
                      BOOL v276 = a4 == 0;
                    }
                    else {
                      BOOL v276 = 1;
                    }
                    int v277 = !v276;
                    float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_l10r;
                    if (!v276 && a5 && a6) {
                      goto LABEL_7022;
                    }
                    if (a5) {
                      int v277 = 0;
                    }
                    float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_l10r;
                    if (v277 == 1)
                    {
                      if (a6) {
                        goto LABEL_7022;
                      }
                    }
                    BOOL v278 = a3 && a4 == 0;
                    BOOL v279 = !v278;
                    float v10 = vt_Copy_444vf_TRC_Mat_TRC_l10r;
                    if (a6)
                    {
                      if (!v279 && !a5) {
                        goto LABEL_7022;
                      }
                    }
                    float v10 = vt_Copy_444vf_TRC_Mat_TRC_l10r;
                    if (a5)
                    {
                      if (!v279 && a6) {
                        goto LABEL_7022;
                      }
                    }
                    uint64_t result = 0;
                    BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                    float v10 = vt_Copy_444vf_rgb_l10r;
                    goto LABEL_6592;
                  }
LABEL_1084:
                  if (a3) {
                    BOOL v154 = a4 == 0;
                  }
                  else {
                    BOOL v154 = 1;
                  }
                  int v155 = !v154;
                  if (!v154 && a5 && a6) {
                    goto LABEL_1097;
                  }
                  if (a5) {
                    int v155 = 0;
                  }
                  if (v155 == 1 && a6)
                  {
LABEL_1097:
                    float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf;
                    if (a7) {
                      goto LABEL_7022;
                    }
                    unsigned int v156 = getVectorCapabilities();
                    uint64_t result = 0;
                    BOOL v29 = v156 >= 2;
                    CFAllocatorRef v30 = vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf_neon_fp16;
                    float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_444vf;
                    goto LABEL_7028;
                  }
                  if (a3) {
                    BOOL v649 = a4 == 0;
                  }
                  else {
                    BOOL v649 = 0;
                  }
                  int v650 = !v649;
                  if (a6 && !v650 && !a5 || a5 && v650 != 1 && a6)
                  {
                    float v10 = vt_Copy_444vf_TRC_Mat_TRC_444vf;
                    if (a7) {
                      goto LABEL_7022;
                    }
                    unsigned int v651 = getVectorCapabilities();
                    uint64_t result = 0;
                    BOOL v29 = v651 >= 2;
                    CFAllocatorRef v30 = vt_Copy_444vf_TRC_Mat_TRC_444vf_neon_fp16;
                    float v10 = vt_Copy_444vf_TRC_Mat_TRC_444vf;
                    goto LABEL_7028;
                  }
                  if (!(a4 | a3 | a5 | a6))
                  {
                    float v10 = vt_Copy_444vf_rgb_444vf;
                    if (a7) {
                      goto LABEL_7022;
                    }
                    unsigned int v1064 = getVectorCapabilities();
                    uint64_t result = 0;
                    BOOL v29 = v1064 >= 2;
                    CFAllocatorRef v30 = vt_Copy_444vf_rgb_444vf_neon_fp16;
                    float v10 = vt_Copy_444vf_rgb_444vf;
                    goto LABEL_7028;
                  }
LABEL_6900:
                  float v10 = 0;
                  goto LABEL_7022;
                }
                goto LABEL_1725;
              }
              if (a2 == 2016567667) {
                goto LABEL_1776;
              }
              if (a2 == 2016686640)
              {
LABEL_1791:
                if (a3) {
                  BOOL v255 = a4 == 0;
                }
                else {
                  BOOL v255 = 1;
                }
                int v256 = !v255;
                if (!v255 && a5 && a6) {
                  goto LABEL_1804;
                }
                if (a5) {
                  int v256 = 0;
                }
                if (v256 == 1 && a6)
                {
LABEL_1804:
                  float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v257 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v257 >= 2;
                  CFAllocatorRef v30 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420_neon_fp16;
                  float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420;
                  goto LABEL_7028;
                }
                if (a3) {
                  BOOL v635 = a4 == 0;
                }
                else {
                  BOOL v635 = 0;
                }
                int v636 = !v635;
                if (a6 && !v636 && !a5 || a5 && v636 != 1 && a6)
                {
                  float v10 = vt_Copy_444vf_TRC_Mat_TRC_xf420;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v637 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v637 >= 2;
                  CFAllocatorRef v30 = vt_Copy_444vf_TRC_Mat_TRC_xf420_neon_fp16;
                  float v10 = vt_Copy_444vf_TRC_Mat_TRC_xf420;
                  goto LABEL_7028;
                }
                if (!(a4 | a3 | a5 | a6))
                {
                  float v10 = vt_Copy_444vf_rgb_xf420;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v992 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v992 >= 2;
                  CFAllocatorRef v30 = vt_Copy_444vf_rgb_xf420_neon_fp16;
                  float v10 = vt_Copy_444vf_rgb_xf420;
                  goto LABEL_7028;
                }
                goto LABEL_6979;
              }
              int v39 = 2016686642;
LABEL_1775:
              if (a2 != v39) {
                goto LABEL_7023;
              }
              goto LABEL_1776;
            }
            if (a2 <= 1952855091)
            {
              if (a2 > 1949589874)
              {
                if (a2 == 1949589875) {
                  goto LABEL_1853;
                }
                if (a2 == 1952854576) {
                  goto LABEL_1791;
                }
                int v39 = 1952854578;
                goto LABEL_1775;
              }
              if (a2 != 1937125938)
              {
                if (a2 != 1937126452)
                {
                  int v39 = 1949458803;
                  goto LABEL_1775;
                }
LABEL_2089:
                if (a3) {
                  BOOL v304 = a4 == 0;
                }
                else {
                  BOOL v304 = 1;
                }
                int v305 = !v304;
                float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444;
                if (!v304 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v305 = 0;
                }
                float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf444;
                if (v305 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v306 = a3 && a4 == 0;
                BOOL v307 = !v306;
                float v10 = vt_Copy_444vf_TRC_Mat_TRC_xf444;
                if (a6)
                {
                  if (!v307 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_444vf_TRC_Mat_TRC_xf444;
                if (a5)
                {
                  if (!v307 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_444vf_rgb_xf444;
                goto LABEL_6592;
              }
LABEL_2063:
              if (a3) {
                BOOL v300 = a4 == 0;
              }
              else {
                BOOL v300 = 1;
              }
              int v301 = !v300;
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422;
              if (!v300 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v301 = 0;
              }
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf422;
              if (v301 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v302 = a3 && a4 == 0;
              BOOL v303 = !v302;
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_xf422;
              if (a6)
              {
                if (!v303 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_xf422;
              if (a5)
              {
                if (!v303 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_444vf_rgb_xf422;
              goto LABEL_6592;
            }
            if (a2 <= 1953903667)
            {
              if (a2 == 1952855092) {
                goto LABEL_1853;
              }
              if (a2 == 1953903152) {
                goto LABEL_1791;
              }
              int v39 = 1953903154;
              goto LABEL_1775;
            }
            if (a2 == 1953903668) {
              goto LABEL_1853;
            }
            if (a2 != 1982882104)
            {
              if (a2 != 1983000886) {
                goto LABEL_7023;
              }
              if (a3) {
                BOOL v261 = a4 == 0;
              }
              else {
                BOOL v261 = 1;
              }
              int v262 = !v261;
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_v216;
              if (!v261 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v262 = 0;
              }
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_v216;
              if (v262 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v263 = a3 && a4 == 0;
              BOOL v264 = !v263;
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_v216;
              if (a6)
              {
                if (!v264 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_v216;
              if (a5)
              {
                if (!v264 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_444vf_rgb_v216;
              goto LABEL_6592;
            }
LABEL_2048:
            if (a3) {
              BOOL v297 = a4 == 0;
            }
            else {
              BOOL v297 = 1;
            }
            int v298 = !v297;
            if (!v297 && a5 && a6) {
              goto LABEL_2061;
            }
            if (a5) {
              int v298 = 0;
            }
            if (v298 == 1 && a6)
            {
LABEL_2061:
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v299 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v299 >= 2;
              CFAllocatorRef v30 = vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf_neon_fp16;
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_420vf;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v662 = a4 == 0;
            }
            else {
              BOOL v662 = 0;
            }
            int v663 = !v662;
            if (a6 && !v663 && !a5 || a5 && v663 != 1 && a6)
            {
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_420vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v664 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v664 >= 2;
              CFAllocatorRef v30 = vt_Copy_444vf_TRC_Mat_TRC_420vf_neon_fp16;
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_420vf;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_444vf_rgb_420vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1068 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1068 >= 2;
              CFAllocatorRef v30 = vt_Copy_444vf_rgb_420vf_neon_fp16;
              float v10 = vt_Copy_444vf_rgb_420vf;
              goto LABEL_7028;
            }
            goto LABEL_6979;
          }
          if (a2 <= 1380411456)
          {
            if (a2 > 875704949)
            {
              if (a2 <= 1111970368)
              {
                if (a2 != 875704950)
                {
                  if (a2 != 875836518 && a2 != 875836534) {
                    goto LABEL_7023;
                  }
                  goto LABEL_1084;
                }
LABEL_1725:
                if (a3) {
                  BOOL v245 = a4 == 0;
                }
                else {
                  BOOL v245 = 1;
                }
                int v246 = !v245;
                if (!v245 && a5 && a6) {
                  goto LABEL_1738;
                }
                if (a5) {
                  int v246 = 0;
                }
                if (v246 == 1 && a6)
                {
LABEL_1738:
                  float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v247 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v247 >= 2;
                  CFAllocatorRef v30 = vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf_neon_fp16;
                  float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_422vf;
                  goto LABEL_7028;
                }
                if (a3) {
                  BOOL v652 = a4 == 0;
                }
                else {
                  BOOL v652 = 0;
                }
                int v653 = !v652;
                if (a6 && !v653 && !a5 || a5 && v653 != 1 && a6)
                {
                  float v10 = vt_Copy_444vf_TRC_Mat_TRC_422vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v654 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v654 >= 2;
                  CFAllocatorRef v30 = vt_Copy_444vf_TRC_Mat_TRC_422vf_neon_fp16;
                  float v10 = vt_Copy_444vf_TRC_Mat_TRC_422vf;
                  goto LABEL_7028;
                }
                if (!(a4 | a3 | a5 | a6))
                {
                  float v10 = vt_Copy_444vf_rgb_422vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v1065 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v1065 >= 2;
                  CFAllocatorRef v30 = vt_Copy_444vf_rgb_422vf_neon_fp16;
                  float v10 = vt_Copy_444vf_rgb_422vf;
                  goto LABEL_7028;
                }
                goto LABEL_6979;
              }
              if (a2 != 1111970369 && a2 != 1380401729)
              {
                if (a2 != 1380410945) {
                  goto LABEL_7023;
                }
                if (a3) {
                  BOOL v258 = a4 == 0;
                }
                else {
                  BOOL v258 = 1;
                }
                int v259 = !v258;
                if (!v258 && a5 && a6) {
                  goto LABEL_1822;
                }
                if (a5) {
                  int v259 = 0;
                }
                if (v259 == 1 && a6)
                {
LABEL_1822:
                  float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v260 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v260 >= 2;
                  CFAllocatorRef v30 = vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA_neon_fp16;
                  float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_RGfA;
                  goto LABEL_7028;
                }
                if (a3) {
                  BOOL v986 = a4 == 0;
                }
                else {
                  BOOL v986 = 0;
                }
                int v987 = !v986;
                if (a6 && !v987 && !a5 || a5 && v987 != 1 && a6)
                {
                  float v10 = vt_Copy_444vf_TRC_Mat_TRC_RGfA;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v988 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v988 >= 2;
                  CFAllocatorRef v30 = vt_Copy_444vf_TRC_Mat_TRC_RGfA_neon_fp16;
                  float v10 = vt_Copy_444vf_TRC_Mat_TRC_RGfA;
                  goto LABEL_7028;
                }
                if (!(a4 | a3 | a5 | a6))
                {
                  float v10 = vt_Copy_444vf_rgb_RGfA;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v1116 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v1116 >= 2;
                  CFAllocatorRef v30 = vt_Copy_444vf_rgb_RGfA_neon_fp16;
                  float v10 = vt_Copy_444vf_rgb_RGfA;
                  goto LABEL_7028;
                }
                goto LABEL_6900;
              }
            }
            else
            {
              if (a2 > 875704421)
              {
                if (a2 != 875704422 && a2 != 875704438)
                {
                  if (a2 != 875704934) {
                    goto LABEL_7023;
                  }
                  goto LABEL_1725;
                }
                goto LABEL_2048;
              }
              if (a2 != 32)
              {
                if (a2 != 846624102 && a2 != 846624121) {
                  goto LABEL_7023;
                }
                goto LABEL_1967;
              }
            }
            if (a3) {
              BOOL v294 = a4 == 0;
            }
            else {
              BOOL v294 = 1;
            }
            int v295 = !v294;
            if (!v294 && a5 && a6) {
              goto LABEL_2046;
            }
            if (a5) {
              int v295 = 0;
            }
            if (v295 == 1 && a6)
            {
LABEL_2046:
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v296 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v296 >= 2;
              CFAllocatorRef v30 = vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA_neon_fp16;
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_BGRA;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v659 = a4 == 0;
            }
            else {
              BOOL v659 = 0;
            }
            int v660 = !v659;
            if (a6 && !v660 && !a5 || a5 && v660 != 1 && a6)
            {
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_BGRA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v661 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v661 >= 2;
              CFAllocatorRef v30 = vt_Copy_444vf_TRC_Mat_TRC_BGRA_neon_fp16;
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_BGRA;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_444vf_rgb_BGRA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1067 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1067 >= 2;
              CFAllocatorRef v30 = vt_Copy_444vf_rgb_BGRA_neon_fp16;
              float v10 = vt_Copy_444vf_rgb_BGRA;
              goto LABEL_7028;
            }
            goto LABEL_6900;
          }
          if (a2 > 1932681586)
          {
            if (a2 > 1936077361)
            {
              if (a2 == 1936077362) {
                goto LABEL_2063;
              }
              if (a2 == 1936077876) {
                goto LABEL_2089;
              }
              int v157 = 1937125936;
            }
            else
            {
              if (a2 == 1932681587) {
                goto LABEL_2063;
              }
              if (a2 == 1932812659) {
                goto LABEL_2089;
              }
              int v157 = 1936077360;
            }
            if (a2 != v157) {
              goto LABEL_7023;
            }
            if (a3) {
              BOOL v268 = a4 == 0;
            }
            else {
              BOOL v268 = 1;
            }
            int v269 = !v268;
            float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420;
            if (!v268 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v269 = 0;
            }
            float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_xf420;
            if (v269 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v270 = a3 && a4 == 0;
            BOOL v271 = !v270;
            float v10 = vt_Copy_444vf_TRC_Mat_TRC_xf420;
            if (a6)
            {
              if (!v271 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_444vf_TRC_Mat_TRC_xf420;
            if (a5)
            {
              if (!v271 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_444vf_rgb_xf420;
            goto LABEL_6592;
          }
          if (a2 > 1647719520)
          {
            if (a2 == 1647719521)
            {
              if (a3) {
                BOOL v631 = a4 == 0;
              }
              else {
                BOOL v631 = 1;
              }
              int v632 = !v631;
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_b64a;
              if (!v631 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v632 = 0;
              }
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_b64a;
              if (v632 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v633 = a3 && a4 == 0;
              BOOL v634 = !v633;
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_b64a;
              if (a6)
              {
                if (!v634 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_b64a;
              if (a5)
              {
                if (!v634 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_444vf_rgb_b64a;
              goto LABEL_6592;
            }
            if (a2 != 1815162994)
            {
              if (a2 != 1815491698) {
                goto LABEL_7023;
              }
              if (a3) {
                BOOL v248 = a4 == 0;
              }
              else {
                BOOL v248 = 1;
              }
              int v249 = !v248;
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_l64r;
              if (!v248 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v249 = 0;
              }
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_l64r;
              if (v249 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v250 = a3 && a4 == 0;
              BOOL v251 = !v250;
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_l64r;
              if (a6)
              {
                if (!v251 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_l64r;
              if (a5)
              {
                if (!v251 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_444vf_rgb_l64r;
              goto LABEL_6592;
            }
            goto LABEL_1926;
          }
          if (a2 == 1380411457)
          {
            if (a3) {
              BOOL v628 = a4 == 0;
            }
            else {
              BOOL v628 = 1;
            }
            int v629 = !v628;
            if (!v628 && a5 && a6) {
              goto LABEL_4115;
            }
            if (a5) {
              int v629 = 0;
            }
            if (v629 == 1 && a6)
            {
LABEL_4115:
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v630 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v630 >= 2;
              CFAllocatorRef v30 = vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA_neon_fp16;
              float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_RGhA;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v989 = a4 == 0;
            }
            else {
              BOOL v989 = 0;
            }
            int v990 = !v989;
            if (a6 && !v990 && !a5 || a5 && v990 != 1 && a6)
            {
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_RGhA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v991 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v991 >= 2;
              CFAllocatorRef v30 = vt_Copy_444vf_TRC_Mat_TRC_RGhA_neon_fp16;
              float v10 = vt_Copy_444vf_TRC_Mat_TRC_RGhA;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_444vf_rgb_RGhA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1144 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1144 >= 2;
              CFAllocatorRef v30 = vt_Copy_444vf_rgb_RGhA_neon_fp16;
              float v10 = vt_Copy_444vf_rgb_RGhA;
              goto LABEL_7028;
            }
            goto LABEL_6900;
          }
          if (a2 != 1630697081)
          {
            int v40 = 1647534392;
            goto LABEL_1078;
          }
LABEL_1967:
          if (a3) {
            BOOL v283 = a4 == 0;
          }
          else {
            BOOL v283 = 1;
          }
          int v284 = !v283;
          float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_2vuyf;
          if (!v283 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v284 = 0;
          }
          float v10 = vt_Copy_444vf_TRC_Tone_Mat_TRC_2vuyf;
          if (v284 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v285 = a3 && a4 == 0;
          BOOL v286 = !v285;
          float v10 = vt_Copy_444vf_TRC_Mat_TRC_2vuyf;
          if (a6)
          {
            if (!v286 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_444vf_TRC_Mat_TRC_2vuyf;
          if (a5)
          {
            if (!v286 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_444vf_rgb_2vuyf;
          goto LABEL_6592;
        }
        if (a1 == 1111970369) {
          goto LABEL_179;
        }
        int v13 = 1278226488;
      }
      else
      {
        if (a1 <= 875704933)
        {
          if (a1 != 32)
          {
            if (a1 != 875704422 && a1 != 875704438) {
              goto LABEL_7023;
            }
            goto LABEL_120;
          }
LABEL_179:
          float v10 = 0;
          if (a2 > 1936077875)
          {
            if (a2 > 1983000885)
            {
              if (a2 <= 2016687155)
              {
                if (a2 > 1999843441)
                {
                  if (a2 <= 2016686639)
                  {
                    if (a2 != 1999843442)
                    {
                      int v22 = 2016567667;
                      goto LABEL_3653;
                    }
LABEL_3170:
                    if (a3) {
                      BOOL v472 = a4 == 0;
                    }
                    else {
                      BOOL v472 = 1;
                    }
                    int v473 = !v472;
                    float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_l10r;
                    if (!v472 && a5 && a6) {
                      goto LABEL_7022;
                    }
                    if (a5) {
                      int v473 = 0;
                    }
                    float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_l10r;
                    if (v473 == 1)
                    {
                      if (a6) {
                        goto LABEL_7022;
                      }
                    }
                    BOOL v474 = a3 && a4 == 0;
                    BOOL v475 = !v474;
                    float v10 = vt_Copy_BGRA_TRC_Mat_TRC_l10r;
                    if (a6)
                    {
                      if (!v475 && !a5) {
                        goto LABEL_7022;
                      }
                    }
                    float v10 = vt_Copy_BGRA_TRC_Mat_TRC_l10r;
                    if (a5)
                    {
                      if (!v475 && a6) {
                        goto LABEL_7022;
                      }
                    }
                    uint64_t result = 0;
                    BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                    float v10 = vt_Copy_BGRA_rgb_l10r;
                    goto LABEL_6592;
                  }
                  if (a2 != 2016686640)
                  {
                    int v22 = 2016686642;
LABEL_3653:
                    if (a2 != v22) {
                      goto LABEL_7023;
                    }
                    goto LABEL_3654;
                  }
                  goto LABEL_3669;
                }
                if (a2 == 1983000886)
                {
                  if (a3) {
                    BOOL v758 = a4 == 0;
                  }
                  else {
                    BOOL v758 = 1;
                  }
                  int v759 = !v758;
                  float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_v216;
                  if (!v758 && a5 && a6) {
                    goto LABEL_7022;
                  }
                  if (a5) {
                    int v759 = 0;
                  }
                  float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_v216;
                  if (v759 == 1)
                  {
                    if (a6) {
                      goto LABEL_7022;
                    }
                  }
                  BOOL v760 = a3 && a4 == 0;
                  BOOL v761 = !v760;
                  float v10 = vt_Copy_BGRA_TRC_Mat_TRC_v216;
                  if (a6)
                  {
                    if (!v761 && !a5) {
                      goto LABEL_7022;
                    }
                  }
                  float v10 = vt_Copy_BGRA_TRC_Mat_TRC_v216;
                  if (a5)
                  {
                    if (!v761 && a6) {
                      goto LABEL_7022;
                    }
                  }
                  uint64_t result = 0;
                  BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                  float v10 = vt_Copy_BGRA_rgb_v216;
                  goto LABEL_6592;
                }
                if (a2 != 1983013176)
                {
                  int v24 = 1983144248;
                  goto LABEL_2948;
                }
                goto LABEL_3068;
              }
              if (a2 > 2019963441)
              {
                if (a2 > 2037741157)
                {
                  if (a2 == 2037741158 || a2 == 2037741171)
                  {
                    if (a3) {
                      BOOL v585 = a4 == 0;
                    }
                    else {
                      BOOL v585 = 1;
                    }
                    int v586 = !v585;
                    float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_yuvsf;
                    if (!v585 && a5 && a6) {
                      goto LABEL_7022;
                    }
                    if (a5) {
                      int v586 = 0;
                    }
                    float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_yuvsf;
                    if (v586 == 1)
                    {
                      if (a6) {
                        goto LABEL_7022;
                      }
                    }
                    BOOL v587 = a3 && a4 == 0;
                    BOOL v588 = !v587;
                    float v10 = vt_Copy_BGRA_TRC_Mat_TRC_yuvsf;
                    if (a6)
                    {
                      if (!v588 && !a5) {
                        goto LABEL_7022;
                      }
                    }
                    float v10 = vt_Copy_BGRA_TRC_Mat_TRC_yuvsf;
                    if (a5)
                    {
                      if (!v588 && a6) {
                        goto LABEL_7022;
                      }
                    }
                    uint64_t result = 0;
                    BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                    float v10 = vt_Copy_BGRA_rgb_yuvsf;
                    goto LABEL_6592;
                  }
                  goto LABEL_7023;
                }
                if (a2 == 2019963442) {
                  goto LABEL_3654;
                }
                int v163 = 2019963956;
                goto LABEL_3715;
              }
              if (a2 != 2016687156 && a2 != 2016698739)
              {
                if (a2 != 2019963440) {
                  goto LABEL_7023;
                }
                goto LABEL_3669;
              }
LABEL_3716:
              if (a3) {
                BOOL v559 = a4 == 0;
              }
              else {
                BOOL v559 = 1;
              }
              int v560 = !v559;
              if (!v559 && a5 && a6) {
                goto LABEL_3729;
              }
              if (a5) {
                int v560 = 0;
              }
              if (v560 == 1 && a6)
              {
LABEL_3729:
                float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v561 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v561 >= 2;
                CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444_neon_fp16;
                float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444;
                goto LABEL_7028;
              }
              if (a3) {
                BOOL v589 = a4 == 0;
              }
              else {
                BOOL v589 = 0;
              }
              int v590 = !v589;
              if (a6 && !v590 && !a5 || a5 && v590 != 1 && a6)
              {
                float v10 = vt_Copy_BGRA_TRC_Mat_TRC_xf444;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v591 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v591 >= 2;
                CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Mat_TRC_xf444_neon_fp16;
                float v10 = vt_Copy_BGRA_TRC_Mat_TRC_xf444;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_BGRA_rgb_xf444;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v969 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v969 >= 2;
                CFAllocatorRef v30 = vt_Copy_BGRA_rgb_xf444_neon_fp16;
                float v10 = vt_Copy_BGRA_rgb_xf444;
                goto LABEL_7028;
              }
              goto LABEL_6990;
            }
            if (a2 > 1952854575)
            {
              if (a2 > 1953903151)
              {
                if (a2 <= 1953903667)
                {
                  if (a2 != 1953903152)
                  {
                    int v22 = 1953903154;
                    goto LABEL_3653;
                  }
LABEL_3669:
                  if (a3) {
                    BOOL v553 = a4 == 0;
                  }
                  else {
                    BOOL v553 = 1;
                  }
                  int v554 = !v553;
                  if (!v553 && a5 && a6) {
                    goto LABEL_3682;
                  }
                  if (a5) {
                    int v554 = 0;
                  }
                  if (v554 == 1 && a6)
                  {
LABEL_3682:
                    float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420;
                    if (a7) {
                      goto LABEL_7022;
                    }
                    unsigned int v555 = getVectorCapabilities();
                    uint64_t result = 0;
                    BOOL v29 = v555 >= 2;
                    CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420_neon_fp16;
                    float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420;
                    goto LABEL_7028;
                  }
                  if (a3) {
                    BOOL v791 = a4 == 0;
                  }
                  else {
                    BOOL v791 = 0;
                  }
                  int v792 = !v791;
                  if (a6 && !v792 && !a5 || a5 && v792 != 1 && a6)
                  {
                    float v10 = vt_Copy_BGRA_TRC_Mat_TRC_xf420;
                    if (a7) {
                      goto LABEL_7022;
                    }
                    unsigned int v793 = getVectorCapabilities();
                    uint64_t result = 0;
                    BOOL v29 = v793 >= 2;
                    CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Mat_TRC_xf420_neon_fp16;
                    float v10 = vt_Copy_BGRA_TRC_Mat_TRC_xf420;
                    goto LABEL_7028;
                  }
                  if (!(a4 | a3 | a5 | a6))
                  {
                    float v10 = vt_Copy_BGRA_rgb_xf420;
                    if (a7) {
                      goto LABEL_7022;
                    }
                    unsigned int v1090 = getVectorCapabilities();
                    uint64_t result = 0;
                    BOOL v29 = v1090 >= 2;
                    CFAllocatorRef v30 = vt_Copy_BGRA_rgb_xf420_neon_fp16;
                    float v10 = vt_Copy_BGRA_rgb_xf420;
                    goto LABEL_7028;
                  }
                  goto LABEL_6990;
                }
                if (a2 == 1953903668) {
                  goto LABEL_3716;
                }
                if (a2 != 1982882104) {
                  goto LABEL_7023;
                }
LABEL_3761:
                if (a3) {
                  BOOL v566 = a4 == 0;
                }
                else {
                  BOOL v566 = 1;
                }
                int v567 = !v566;
                if (!v566 && a5 && a6) {
                  goto LABEL_3774;
                }
                if (a5) {
                  int v567 = 0;
                }
                if (v567 == 1 && a6)
                {
LABEL_3774:
                  float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v568 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v568 >= 2;
                  CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf_neon_fp16;
                  float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_420vf;
                  goto LABEL_7028;
                }
                if (a3) {
                  BOOL v856 = a4 == 0;
                }
                else {
                  BOOL v856 = 0;
                }
                int v857 = !v856;
                if (a6 && !v857 && !a5 || a5 && v857 != 1 && a6)
                {
                  float v10 = vt_Copy_BGRA_TRC_Mat_TRC_420vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v858 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v858 >= 2;
                  CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Mat_TRC_420vf_neon_fp16;
                  float v10 = vt_Copy_BGRA_TRC_Mat_TRC_420vf;
                  goto LABEL_7028;
                }
                if (!(a4 | a3 | a5 | a6))
                {
                  float v10 = vt_Copy_BGRA_rgb_420vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v1109 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v1109 >= 2;
                  CFAllocatorRef v30 = vt_Copy_BGRA_rgb_420vf_neon_fp16;
                  float v10 = vt_Copy_BGRA_rgb_420vf;
                  goto LABEL_7028;
                }
                goto LABEL_6990;
              }
              if (a2 == 1952854576) {
                goto LABEL_3669;
              }
              if (a2 != 1952854578)
              {
                int v163 = 1952855092;
                goto LABEL_3715;
              }
LABEL_3654:
              if (a3) {
                BOOL v550 = a4 == 0;
              }
              else {
                BOOL v550 = 1;
              }
              int v551 = !v550;
              if (!v550 && a5 && a6) {
                goto LABEL_3667;
              }
              if (a5) {
                int v551 = 0;
              }
              if (v551 == 1 && a6)
              {
LABEL_3667:
                float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v552 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v552 >= 2;
                CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422_neon_fp16;
                float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422;
                goto LABEL_7028;
              }
              if (a3) {
                BOOL v625 = a4 == 0;
              }
              else {
                BOOL v625 = 0;
              }
              int v626 = !v625;
              if (a6 && !v626 && !a5 || a5 && v626 != 1 && a6)
              {
                float v10 = vt_Copy_BGRA_TRC_Mat_TRC_xf422;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v627 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v627 >= 2;
                CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Mat_TRC_xf422_neon_fp16;
                float v10 = vt_Copy_BGRA_TRC_Mat_TRC_xf422;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_BGRA_rgb_xf422;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v985 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v985 >= 2;
                CFAllocatorRef v30 = vt_Copy_BGRA_rgb_xf422_neon_fp16;
                float v10 = vt_Copy_BGRA_rgb_xf422;
                goto LABEL_7028;
              }
              goto LABEL_6990;
            }
            if (a2 <= 1937126451)
            {
              if (a2 != 1936077876)
              {
                if (a2 != 1937125936)
                {
                  int v231 = 1937125938;
                  goto LABEL_3833;
                }
                goto LABEL_3930;
              }
              goto LABEL_3112;
            }
            if (a2 == 1937126452) {
              goto LABEL_3112;
            }
            if (a2 == 1949458803) {
              goto LABEL_3654;
            }
            int v163 = 1949589875;
LABEL_3715:
            if (a2 != v163) {
              goto LABEL_7023;
            }
            goto LABEL_3716;
          }
          if (a2 > 1278226741)
          {
            if (a2 > 1647719520)
            {
              if (a2 <= 1932681586)
              {
                if (a2 == 1647719521)
                {
                  if (a3) {
                    BOOL v766 = a4 == 0;
                  }
                  else {
                    BOOL v766 = 1;
                  }
                  int v767 = !v766;
                  float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_b64a;
                  if (!v766 && a5 && a6) {
                    goto LABEL_7022;
                  }
                  if (a5) {
                    int v767 = 0;
                  }
                  float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_b64a;
                  if (v767 == 1)
                  {
                    if (a6) {
                      goto LABEL_7022;
                    }
                  }
                  BOOL v768 = a3 && a4 == 0;
                  BOOL v769 = !v768;
                  float v10 = vt_Copy_BGRA_TRC_Mat_TRC_b64a;
                  if (a6)
                  {
                    if (!v769 && !a5) {
                      goto LABEL_7022;
                    }
                  }
                  float v10 = vt_Copy_BGRA_TRC_Mat_TRC_b64a;
                  if (a5)
                  {
                    if (!v769 && a6) {
                      goto LABEL_7022;
                    }
                  }
                  uint64_t result = 0;
                  BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                  float v10 = vt_Copy_BGRA_rgb_b64a;
                  goto LABEL_6592;
                }
                if (a2 != 1815162994)
                {
                  if (a2 != 1815491698) {
                    goto LABEL_7023;
                  }
                  if (a3) {
                    BOOL v449 = a4 == 0;
                  }
                  else {
                    BOOL v449 = 1;
                  }
                  int v450 = !v449;
                  float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_l64r;
                  if (!v449 && a5 && a6) {
                    goto LABEL_7022;
                  }
                  if (a5) {
                    int v450 = 0;
                  }
                  float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_l64r;
                  if (v450 == 1)
                  {
                    if (a6) {
                      goto LABEL_7022;
                    }
                  }
                  BOOL v451 = a3 && a4 == 0;
                  BOOL v452 = !v451;
                  float v10 = vt_Copy_BGRA_TRC_Mat_TRC_l64r;
                  if (a6)
                  {
                    if (!v452 && !a5) {
                      goto LABEL_7022;
                    }
                  }
                  float v10 = vt_Copy_BGRA_TRC_Mat_TRC_l64r;
                  if (a5)
                  {
                    if (!v452 && a6) {
                      goto LABEL_7022;
                    }
                  }
                  uint64_t result = 0;
                  BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                  float v10 = vt_Copy_BGRA_rgb_l64r;
                  goto LABEL_6592;
                }
                goto LABEL_3170;
              }
              if (a2 > 1936077359)
              {
                if (a2 != 1936077360)
                {
                  int v231 = 1936077362;
LABEL_3833:
                  if (a2 != v231) {
                    goto LABEL_7023;
                  }
                  goto LABEL_3834;
                }
LABEL_3930:
                if (a3) {
                  BOOL v592 = a4 == 0;
                }
                else {
                  BOOL v592 = 1;
                }
                int v593 = !v592;
                float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420;
                if (!v592 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v593 = 0;
                }
                float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf420;
                if (v593 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v594 = a3 && a4 == 0;
                BOOL v595 = !v594;
                float v10 = vt_Copy_BGRA_TRC_Mat_TRC_xf420;
                if (a6)
                {
                  if (!v595 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_BGRA_TRC_Mat_TRC_xf420;
                if (a5)
                {
                  if (!v595 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_BGRA_rgb_xf420;
                goto LABEL_6592;
              }
              if (a2 == 1932681587)
              {
LABEL_3834:
                if (a3) {
                  BOOL v577 = a4 == 0;
                }
                else {
                  BOOL v577 = 1;
                }
                int v578 = !v577;
                float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422;
                if (!v577 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v578 = 0;
                }
                float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf422;
                if (v578 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v579 = a3 && a4 == 0;
                BOOL v580 = !v579;
                float v10 = vt_Copy_BGRA_TRC_Mat_TRC_xf422;
                if (a6)
                {
                  if (!v580 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_BGRA_TRC_Mat_TRC_xf422;
                if (a5)
                {
                  if (!v580 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_BGRA_rgb_xf422;
                goto LABEL_6592;
              }
              if (a2 != 1932812659) {
                goto LABEL_7023;
              }
LABEL_3112:
              if (a3) {
                BOOL v464 = a4 == 0;
              }
              else {
                BOOL v464 = 1;
              }
              int v465 = !v464;
              float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444;
              if (!v464 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v465 = 0;
              }
              float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_xf444;
              if (v465 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v466 = a3 && a4 == 0;
              BOOL v467 = !v466;
              float v10 = vt_Copy_BGRA_TRC_Mat_TRC_xf444;
              if (a6)
              {
                if (!v467 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_BGRA_TRC_Mat_TRC_xf444;
              if (a5)
              {
                if (!v467 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_BGRA_rgb_xf444;
              goto LABEL_6592;
            }
            if (a2 <= 1380411456)
            {
              if (a2 == 1278226742) {
                goto LABEL_3112;
              }
              if (a2 != 1380401729)
              {
                if (a2 != 1380410945) {
                  goto LABEL_7023;
                }
                if (a3) {
                  BOOL v236 = a4 == 0;
                }
                else {
                  BOOL v236 = 1;
                }
                int v237 = !v236;
                if (!v236 && a5 && a6) {
                  goto LABEL_1644;
                }
                if (a5) {
                  int v237 = 0;
                }
                if (v237 == 1 && a6)
                {
LABEL_1644:
                  float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v238 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v238 >= 2;
                  CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA_neon_fp16;
                  float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGfA;
                  goto LABEL_7028;
                }
                if (a3) {
                  BOOL v1071 = a4 == 0;
                }
                else {
                  BOOL v1071 = 0;
                }
                int v1072 = !v1071;
                if (a6 && !v1072 && !a5 || a5 && v1072 != 1 && a6)
                {
                  float v10 = vt_Copy_BGRA_TRC_Mat_TRC_RGfA;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v1073 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v1073 >= 2;
                  CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Mat_TRC_RGfA_neon_fp16;
                  float v10 = vt_Copy_BGRA_TRC_Mat_TRC_RGfA;
                  goto LABEL_7028;
                }
                if (!(a4 | a3 | a5 | a6))
                {
                  float v10 = vt_Copy_BGRA_rgb_RGfA;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v1136 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v1136 >= 2;
                  CFAllocatorRef v30 = vt_Copy_BGRA_rgb_RGfA_neon_fp16;
                  float v10 = vt_Copy_BGRA_rgb_RGfA;
                  goto LABEL_7028;
                }
                goto LABEL_6990;
              }
              goto LABEL_3222;
            }
            if (a2 == 1380411457)
            {
              if (a3) {
                BOOL v774 = a4 == 0;
              }
              else {
                BOOL v774 = 1;
              }
              int v775 = !v774;
              if (!v774 && a5 && a6) {
                goto LABEL_5065;
              }
              if (a5) {
                int v775 = 0;
              }
              if (v775 == 1 && a6)
              {
LABEL_5065:
                float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v776 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v776 >= 2;
                CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA_neon_fp16;
                float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_RGhA;
                goto LABEL_7028;
              }
              if (a3) {
                BOOL v1081 = a4 == 0;
              }
              else {
                BOOL v1081 = 0;
              }
              int v1082 = !v1081;
              if (a6 && !v1082 && !a5 || a5 && v1082 != 1 && a6)
              {
                float v10 = vt_Copy_BGRA_TRC_Mat_TRC_RGhA;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v1083 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v1083 >= 2;
                CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Mat_TRC_RGhA_neon_fp16;
                float v10 = vt_Copy_BGRA_TRC_Mat_TRC_RGhA;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_BGRA_rgb_RGhA;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v1146 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v1146 >= 2;
                CFAllocatorRef v30 = vt_Copy_BGRA_rgb_RGhA_neon_fp16;
                float v10 = vt_Copy_BGRA_rgb_RGhA;
                goto LABEL_7028;
              }
              goto LABEL_6990;
            }
            if (a2 != 1630697081)
            {
              if (a2 != 1647534392) {
                goto LABEL_7023;
              }
              goto LABEL_3170;
            }
          }
          else
          {
            if (a2 > 875704949)
            {
              if (a2 <= 1111970368)
              {
                if (a2 != 875704950)
                {
                  if (a2 == 875836518)
                  {
LABEL_2949:
                    if (a3) {
                      BOOL v442 = a4 == 0;
                    }
                    else {
                      BOOL v442 = 1;
                    }
                    int v443 = !v442;
                    if (!v442 && a5 && a6) {
                      goto LABEL_2962;
                    }
                    if (a5) {
                      int v443 = 0;
                    }
                    if (v443 == 1 && a6)
                    {
LABEL_2962:
                      float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf;
                      if (a7) {
                        goto LABEL_7022;
                      }
                      unsigned int v444 = getVectorCapabilities();
                      uint64_t result = 0;
                      BOOL v29 = v444 >= 2;
                      CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf_neon_fp16;
                      float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_444vf;
                      goto LABEL_7028;
                    }
                    if (a3) {
                      BOOL v751 = a4 == 0;
                    }
                    else {
                      BOOL v751 = 0;
                    }
                    int v752 = !v751;
                    if (a6 && !v752 && !a5 || a5 && v752 != 1 && a6)
                    {
                      float v10 = vt_Copy_BGRA_TRC_Mat_TRC_444vf;
                      if (a7) {
                        goto LABEL_7022;
                      }
                      unsigned int v753 = getVectorCapabilities();
                      uint64_t result = 0;
                      BOOL v29 = v753 >= 2;
                      CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Mat_TRC_444vf_neon_fp16;
                      float v10 = vt_Copy_BGRA_TRC_Mat_TRC_444vf;
                      goto LABEL_7028;
                    }
                    if (!(a4 | a3 | a5 | a6))
                    {
                      float v10 = vt_Copy_BGRA_rgb_444vf;
                      if (a7) {
                        goto LABEL_7022;
                      }
                      unsigned int v1080 = getVectorCapabilities();
                      uint64_t result = 0;
                      BOOL v29 = v1080 >= 2;
                      CFAllocatorRef v30 = vt_Copy_BGRA_rgb_444vf_neon_fp16;
                      float v10 = vt_Copy_BGRA_rgb_444vf;
                      goto LABEL_7028;
                    }
                    goto LABEL_6990;
                  }
                  int v24 = 875836534;
LABEL_2948:
                  if (a2 != v24) {
                    goto LABEL_7023;
                  }
                  goto LABEL_2949;
                }
LABEL_3068:
                if (a3) {
                  BOOL v457 = a4 == 0;
                }
                else {
                  BOOL v457 = 1;
                }
                int v458 = !v457;
                if (!v457 && a5 && a6) {
                  goto LABEL_3081;
                }
                if (a5) {
                  int v458 = 0;
                }
                if (v458 == 1 && a6)
                {
LABEL_3081:
                  float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v459 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v459 >= 2;
                  CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf_neon_fp16;
                  float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_422vf;
                  goto LABEL_7028;
                }
                if (a3) {
                  BOOL v850 = a4 == 0;
                }
                else {
                  BOOL v850 = 0;
                }
                int v851 = !v850;
                if (a6 && !v851 && !a5 || a5 && v851 != 1 && a6)
                {
                  float v10 = vt_Copy_BGRA_TRC_Mat_TRC_422vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v852 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v852 >= 2;
                  CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Mat_TRC_422vf_neon_fp16;
                  float v10 = vt_Copy_BGRA_TRC_Mat_TRC_422vf;
                  goto LABEL_7028;
                }
                if (!(a4 | a3 | a5 | a6))
                {
                  float v10 = vt_Copy_BGRA_rgb_422vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v1107 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v1107 >= 2;
                  CFAllocatorRef v30 = vt_Copy_BGRA_rgb_422vf_neon_fp16;
                  float v10 = vt_Copy_BGRA_rgb_422vf;
                  goto LABEL_7028;
                }
                goto LABEL_6990;
              }
              if (a2 > 1278226735)
              {
                if (a2 == 1278226736) {
                  goto LABEL_3716;
                }
                int v163 = 1278226738;
                goto LABEL_3715;
              }
              if (a2 != 1111970369)
              {
                int v24 = 1278226488;
                goto LABEL_2948;
              }
LABEL_3222:
              if (a3) {
                BOOL v480 = a4 == 0;
              }
              else {
                BOOL v480 = 1;
              }
              int v481 = !v480;
              if (!v480 && a5 && a6) {
                goto LABEL_3235;
              }
              if (a5) {
                int v481 = 0;
              }
              if (v481 == 1 && a6)
              {
LABEL_3235:
                float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v482 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v482 >= 2;
                CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA_neon_fp16;
                float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_BGRA;
                goto LABEL_7028;
              }
              if (a3) {
                BOOL v853 = a4 == 0;
              }
              else {
                BOOL v853 = 0;
              }
              int v854 = !v853;
              if (a6 && !v854 && !a5 || a5 && v854 != 1 && a6)
              {
                float v10 = vt_Copy_BGRA_TRC_Mat_TRC_BGRA;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v855 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v855 >= 2;
                CFAllocatorRef v30 = vt_Copy_BGRA_TRC_Mat_TRC_BGRA_neon_fp16;
                float v10 = vt_Copy_BGRA_TRC_Mat_TRC_BGRA;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_BGRA_rgb_BGRA;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v1108 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v1108 >= 2;
                CFAllocatorRef v30 = vt_Copy_BGRA_rgb_BGRA_neon_fp16;
                float v10 = vt_Copy_BGRA_rgb_BGRA;
                goto LABEL_7028;
              }
              goto LABEL_6990;
            }
            if (a2 > 875704421)
            {
              if (a2 != 875704422 && a2 != 875704438)
              {
                if (a2 != 875704934) {
                  goto LABEL_7023;
                }
                goto LABEL_3068;
              }
              goto LABEL_3761;
            }
            if (a2 == 32) {
              goto LABEL_3222;
            }
            if (a2 != 846624102 && a2 != 846624121) {
              goto LABEL_7023;
            }
          }
          if (a3) {
            BOOL v487 = a4 == 0;
          }
          else {
            BOOL v487 = 1;
          }
          int v488 = !v487;
          float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_2vuyf;
          if (!v487 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v488 = 0;
          }
          float v10 = vt_Copy_BGRA_TRC_Tone_Mat_TRC_2vuyf;
          if (v488 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v489 = a3 && a4 == 0;
          BOOL v490 = !v489;
          float v10 = vt_Copy_BGRA_TRC_Mat_TRC_2vuyf;
          if (a6)
          {
            if (!v490 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_BGRA_TRC_Mat_TRC_2vuyf;
          if (a5)
          {
            if (!v490 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_BGRA_rgb_2vuyf;
          goto LABEL_6592;
        }
        if (a1 == 875704934 || a1 == 875704950) {
          goto LABEL_128;
        }
        int v13 = 875836518;
      }
LABEL_54:
      if (a1 != v13) {
        goto LABEL_7023;
      }
      goto LABEL_55;
    }
    if (a1 > 1815162993)
    {
      if (a1 > 1932812658)
      {
        if (a1 == 1932812659) {
          goto LABEL_82;
        }
        if (a1 == 1936077360) {
          goto LABEL_98;
        }
        int v12 = 1936077362;
LABEL_70:
        if (a1 != v12) {
          goto LABEL_7023;
        }
        goto LABEL_90;
      }
      if (a1 == 1815162994) {
        goto LABEL_136;
      }
      if (a1 != 1815491698)
      {
        int v12 = 1932681587;
        goto LABEL_70;
      }
      float v10 = 0;
      if (a2 > 1936077875)
      {
        if (a2 > 1983000885)
        {
          if (a2 <= 2016687155)
          {
            if (a2 > 1999843441)
            {
              if (a2 <= 2016686639)
              {
                if (a2 != 1999843442)
                {
                  int v37 = 2016567667;
                  goto LABEL_5542;
                }
LABEL_4853:
                if (a3) {
                  BOOL v743 = a4 == 0;
                }
                else {
                  BOOL v743 = 1;
                }
                int v744 = !v743;
                float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_l10r;
                if (!v743 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v744 = 0;
                }
                float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_l10r;
                if (v744 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v745 = a3 && a4 == 0;
                BOOL v746 = !v745;
                float v10 = vt_Copy_l64r_TRC_Mat_TRC_l10r;
                if (a6)
                {
                  if (!v746 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_l64r_TRC_Mat_TRC_l10r;
                if (a5)
                {
                  if (!v746 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_l64r_rgb_l10r;
                goto LABEL_6592;
              }
              if (a2 != 2016686640)
              {
                int v37 = 2016686642;
LABEL_5542:
                if (a2 != v37) {
                  goto LABEL_7023;
                }
LABEL_5543:
                if (a3) {
                  BOOL v869 = a4 == 0;
                }
                else {
                  BOOL v869 = 1;
                }
                int v870 = !v869;
                float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_xf422;
                if (!v869 && a5 && a6) {
                  goto LABEL_7022;
                }
                goto LABEL_5850;
              }
              goto LABEL_5553;
            }
            if (a2 == 1983000886)
            {
              if (a3) {
                BOOL v1001 = a4 == 0;
              }
              else {
                BOOL v1001 = 1;
              }
              int v1002 = !v1001;
              float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_v216;
              if (!v1001 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v1002 = 0;
              }
              float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_v216;
              if (v1002 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v1003 = a3 && a4 == 0;
              BOOL v1004 = !v1003;
              float v10 = vt_Copy_l64r_TRC_Mat_TRC_v216;
              if (a6)
              {
                if (!v1004 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_l64r_TRC_Mat_TRC_v216;
              if (a5)
              {
                if (!v1004 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_l64r_rgb_v216;
              goto LABEL_6592;
            }
            if (a2 != 1983013176)
            {
              int v152 = 1983144248;
              goto LABEL_4424;
            }
            goto LABEL_4664;
          }
          if (a2 > 2019963441)
          {
            if (a2 > 2037741157)
            {
              if (a2 == 2037741158 || a2 == 2037741171)
              {
                if (a3) {
                  BOOL v927 = a4 == 0;
                }
                else {
                  BOOL v927 = 1;
                }
                int v928 = !v927;
                float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_yuvsf;
                if (!v927 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v928 = 0;
                }
                float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_yuvsf;
                if (v928 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v929 = a3 && a4 == 0;
                BOOL v930 = !v929;
                float v10 = vt_Copy_l64r_TRC_Mat_TRC_yuvsf;
                if (a6)
                {
                  if (!v930 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_l64r_TRC_Mat_TRC_yuvsf;
                if (a5)
                {
                  if (!v930 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_l64r_rgb_yuvsf;
                goto LABEL_6592;
              }
              goto LABEL_7023;
            }
            if (a2 == 2019963442) {
              goto LABEL_5543;
            }
            int v506 = 2019963956;
            goto LABEL_5645;
          }
          if (a2 == 2016687156 || a2 == 2016698739) {
            goto LABEL_5646;
          }
          if (a2 != 2019963440) {
            goto LABEL_7023;
          }
LABEL_5553:
          if (a3) {
            BOOL v871 = a4 == 0;
          }
          else {
            BOOL v871 = 1;
          }
          int v872 = !v871;
          float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_xf420;
          if (!v871 && a5 && a6) {
            goto LABEL_7022;
          }
          goto LABEL_6097;
        }
        if (a2 > 1952854575)
        {
          if (a2 <= 1953903151)
          {
            if (a2 != 1952854576)
            {
              if (a2 == 1952854578) {
                goto LABEL_5543;
              }
              int v506 = 1952855092;
              goto LABEL_5645;
            }
            goto LABEL_5553;
          }
          if (a2 <= 1953903667)
          {
            if (a2 != 1953903152)
            {
              int v37 = 1953903154;
              goto LABEL_5542;
            }
            goto LABEL_5553;
          }
          if (a2 == 1953903668) {
            goto LABEL_5646;
          }
          if (a2 != 1982882104) {
            goto LABEL_7023;
          }
LABEL_5737:
          if (a3) {
            BOOL v898 = a4 == 0;
          }
          else {
            BOOL v898 = 1;
          }
          int v899 = !v898;
          float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_420vf;
          if (!v898 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v899 = 0;
          }
          float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_420vf;
          if (v899 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v900 = a3 && a4 == 0;
          BOOL v901 = !v900;
          float v10 = vt_Copy_l64r_TRC_Mat_TRC_420vf;
          if (a6)
          {
            if (!v901 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_l64r_TRC_Mat_TRC_420vf;
          if (a5)
          {
            if (!v901 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_l64r_rgb_420vf;
          goto LABEL_6592;
        }
        if (a2 > 1937126451)
        {
          if (a2 != 1937126452)
          {
            if (a2 == 1949458803) {
              goto LABEL_5543;
            }
            int v506 = 1949589875;
            goto LABEL_5645;
          }
        }
        else if (a2 != 1936077876)
        {
          if (a2 != 1937125936)
          {
            int v534 = 1937125938;
            goto LABEL_5840;
          }
          goto LABEL_6088;
        }
        goto LABEL_4753;
      }
      if (a2 > 1278226741)
      {
        if (a2 > 1647719520)
        {
          if (a2 <= 1932681586)
          {
            if (a2 == 1647719521)
            {
              if (a3) {
                BOOL v1023 = a4 == 0;
              }
              else {
                BOOL v1023 = 1;
              }
              int v1024 = !v1023;
              float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_b64a;
              if (!v1023 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v1024 = 0;
              }
              float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_b64a;
              if (v1024 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v1025 = a3 && a4 == 0;
              BOOL v1026 = !v1025;
              float v10 = vt_Copy_l64r_TRC_Mat_TRC_b64a;
              if (a6)
              {
                if (!v1026 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_l64r_TRC_Mat_TRC_b64a;
              if (a5)
              {
                if (!v1026 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_l64r_rgb_b64a;
              goto LABEL_6592;
            }
            if (a2 != 1815162994)
            {
              if (a2 != 1815491698) {
                goto LABEL_7023;
              }
              if (a3) {
                BOOL v701 = a4 == 0;
              }
              else {
                BOOL v701 = 1;
              }
              int v702 = !v701;
              float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_l64r;
              if (!v701 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v702 = 0;
              }
              float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_l64r;
              if (v702 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v703 = a3 && a4 == 0;
              BOOL v704 = !v703;
              float v10 = vt_Copy_l64r_TRC_Mat_TRC_l64r;
              if (a6)
              {
                if (!v704 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_l64r_TRC_Mat_TRC_l64r;
              if (a5)
              {
                if (!v704 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_l64r_rgb_l64r;
              goto LABEL_6592;
            }
            goto LABEL_4853;
          }
          if (a2 > 1936077359)
          {
            if (a2 != 1936077360)
            {
              int v534 = 1936077362;
LABEL_5840:
              if (a2 != v534) {
                goto LABEL_7023;
              }
LABEL_5841:
              if (a3) {
                BOOL v912 = a4 == 0;
              }
              else {
                BOOL v912 = 1;
              }
              int v870 = !v912;
              float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_xf422;
              if (!v912 && a5 && a6) {
                goto LABEL_7022;
              }
LABEL_5850:
              if (a5) {
                int v870 = 0;
              }
              float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_xf422;
              if (v870 == 1 && a6) {
                goto LABEL_7022;
              }
              BOOL v913 = a3 && a4 == 0;
              BOOL v914 = !v913;
              float v10 = vt_Copy_l64r_TRC_Mat_TRC_xf422;
              if (a6)
              {
                if (!v914 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_l64r_TRC_Mat_TRC_xf422;
              if (a5)
              {
                if (!v914 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_l64r_rgb_xf422;
              goto LABEL_6592;
            }
LABEL_6088:
            if (a3) {
              BOOL v948 = a4 == 0;
            }
            else {
              BOOL v948 = 1;
            }
            int v872 = !v948;
            float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_xf420;
            if (!v948 && a5 && a6) {
              goto LABEL_7022;
            }
LABEL_6097:
            if (a5) {
              int v872 = 0;
            }
            float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_xf420;
            if (v872 == 1 && a6) {
              goto LABEL_7022;
            }
            BOOL v949 = a3 && a4 == 0;
            BOOL v950 = !v949;
            float v10 = vt_Copy_l64r_TRC_Mat_TRC_xf420;
            if (a6)
            {
              if (!v950 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_l64r_TRC_Mat_TRC_xf420;
            if (a5)
            {
              if (!v950 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_l64r_rgb_xf420;
            goto LABEL_6592;
          }
          if (a2 == 1932681587) {
            goto LABEL_5841;
          }
          if (a2 != 1932812659) {
            goto LABEL_7023;
          }
LABEL_4753:
          if (a3) {
            BOOL v729 = a4 == 0;
          }
          else {
            BOOL v729 = 1;
          }
          int v730 = !v729;
          float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_xf444;
          if (!v729 && a5 && a6) {
            goto LABEL_7022;
          }
LABEL_5655:
          if (a5) {
            int v730 = 0;
          }
          float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_xf444;
          if (v730 == 1 && a6) {
            goto LABEL_7022;
          }
          BOOL v886 = a3 && a4 == 0;
          BOOL v887 = !v886;
          float v10 = vt_Copy_l64r_TRC_Mat_TRC_xf444;
          if (a6)
          {
            if (!v887 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_l64r_TRC_Mat_TRC_xf444;
          if (a5)
          {
            if (!v887 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_l64r_rgb_xf444;
          goto LABEL_6592;
        }
        if (a2 > 1380411456)
        {
          if (a2 == 1380411457)
          {
            if (a3) {
              BOOL v1038 = a4 == 0;
            }
            else {
              BOOL v1038 = 1;
            }
            int v1039 = !v1038;
            float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_RGhA;
            if (!v1038 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v1039 = 0;
            }
            float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_RGhA;
            if (v1039 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v1040 = a3 && a4 == 0;
            BOOL v1041 = !v1040;
            float v10 = vt_Copy_l64r_TRC_Mat_TRC_RGhA;
            if (a6)
            {
              if (!v1041 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_l64r_TRC_Mat_TRC_RGhA;
            if (a5)
            {
              if (!v1041 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_l64r_rgb_RGhA;
            goto LABEL_6592;
          }
          if (a2 != 1630697081)
          {
            if (a2 != 1647534392) {
              goto LABEL_7023;
            }
            goto LABEL_4853;
          }
LABEL_5215:
          if (a3) {
            BOOL v802 = a4 == 0;
          }
          else {
            BOOL v802 = 1;
          }
          int v803 = !v802;
          float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_2vuyf;
          if (!v802 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v803 = 0;
          }
          float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_2vuyf;
          if (v803 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v804 = a3 && a4 == 0;
          BOOL v805 = !v804;
          float v10 = vt_Copy_l64r_TRC_Mat_TRC_2vuyf;
          if (a6)
          {
            if (!v805 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_l64r_TRC_Mat_TRC_2vuyf;
          if (a5)
          {
            if (!v805 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_l64r_rgb_2vuyf;
          goto LABEL_6592;
        }
        if (a2 == 1278226742) {
          goto LABEL_4753;
        }
        if (a2 != 1380401729)
        {
          if (a2 != 1380410945) {
            goto LABEL_7023;
          }
          if (a3) {
            BOOL v543 = a4 == 0;
          }
          else {
            BOOL v543 = 1;
          }
          int v544 = !v543;
          float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_RGfA;
          if (!v543 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v544 = 0;
          }
          float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_RGfA;
          if (v544 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v545 = a3 && a4 == 0;
          BOOL v546 = !v545;
          float v10 = vt_Copy_l64r_TRC_Mat_TRC_RGfA;
          if (a6)
          {
            if (!v546 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_l64r_TRC_Mat_TRC_RGfA;
          if (a5)
          {
            if (!v546 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_l64r_rgb_RGfA;
          goto LABEL_6592;
        }
      }
      else
      {
        if (a2 > 875704949)
        {
          if (a2 <= 1111970368)
          {
            if (a2 != 875704950)
            {
              if (a2 == 875836518)
              {
LABEL_4425:
                if (a3) {
                  BOOL v686 = a4 == 0;
                }
                else {
                  BOOL v686 = 1;
                }
                int v687 = !v686;
                float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_444vf;
                if (!v686 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v687 = 0;
                }
                float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_444vf;
                if (v687 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v688 = a3 && a4 == 0;
                BOOL v689 = !v688;
                float v10 = vt_Copy_l64r_TRC_Mat_TRC_444vf;
                if (a6)
                {
                  if (!v689 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_l64r_TRC_Mat_TRC_444vf;
                if (a5)
                {
                  if (!v689 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_l64r_rgb_444vf;
                goto LABEL_6592;
              }
              int v152 = 875836534;
LABEL_4424:
              if (a2 != v152) {
                goto LABEL_7023;
              }
              goto LABEL_4425;
            }
LABEL_4664:
            if (a3) {
              BOOL v716 = a4 == 0;
            }
            else {
              BOOL v716 = 1;
            }
            int v717 = !v716;
            float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_422vf;
            if (!v716 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v717 = 0;
            }
            float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_422vf;
            if (v717 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v718 = a3 && a4 == 0;
            BOOL v719 = !v718;
            float v10 = vt_Copy_l64r_TRC_Mat_TRC_422vf;
            if (a6)
            {
              if (!v719 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_l64r_TRC_Mat_TRC_422vf;
            if (a5)
            {
              if (!v719 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_l64r_rgb_422vf;
            goto LABEL_6592;
          }
          if (a2 > 1278226735)
          {
            if (a2 == 1278226736) {
              goto LABEL_5646;
            }
            int v506 = 1278226738;
LABEL_5645:
            if (a2 != v506) {
              goto LABEL_7023;
            }
LABEL_5646:
            if (a3) {
              BOOL v885 = a4 == 0;
            }
            else {
              BOOL v885 = 1;
            }
            int v730 = !v885;
            float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_xf444;
            if (!v885 && a5 && a6) {
              goto LABEL_7022;
            }
            goto LABEL_5655;
          }
          if (a2 != 1111970369)
          {
            int v152 = 1278226488;
            goto LABEL_4424;
          }
          goto LABEL_5108;
        }
        if (a2 > 875704421)
        {
          if (a2 != 875704422 && a2 != 875704438)
          {
            if (a2 != 875704934) {
              goto LABEL_7023;
            }
            goto LABEL_4664;
          }
          goto LABEL_5737;
        }
        if (a2 != 32)
        {
          if (a2 != 846624102 && a2 != 846624121) {
            goto LABEL_7023;
          }
          goto LABEL_5215;
        }
      }
LABEL_5108:
      if (a3) {
        BOOL v784 = a4 == 0;
      }
      else {
        BOOL v784 = 1;
      }
      int v785 = !v784;
      float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_BGRA;
      if (!v784 && a5 && a6) {
        goto LABEL_7022;
      }
      if (a5) {
        int v785 = 0;
      }
      float v10 = vt_Copy_l64r_TRC_Tone_Mat_TRC_BGRA;
      if (v785 == 1)
      {
        if (a6) {
          goto LABEL_7022;
        }
      }
      BOOL v786 = a3 && a4 == 0;
      BOOL v787 = !v786;
      float v10 = vt_Copy_l64r_TRC_Mat_TRC_BGRA;
      if (a6)
      {
        if (!v787 && !a5) {
          goto LABEL_7022;
        }
      }
      float v10 = vt_Copy_l64r_TRC_Mat_TRC_BGRA;
      if (a5)
      {
        if (!v787 && a6) {
          goto LABEL_7022;
        }
      }
      uint64_t result = 0;
      BOOL v50 = (a4 | a3 | a5 | a6) == 0;
      float v10 = vt_Copy_l64r_rgb_BGRA;
      goto LABEL_6592;
    }
    if (a1 > 1380411456)
    {
      if (a1 != 1380411457)
      {
        if (a1 == 1647534392) {
          goto LABEL_136;
        }
        if (a1 != 1647719521) {
          goto LABEL_7023;
        }
        float v10 = 0;
        if (a2 > 1936077875)
        {
          if (a2 > 1983000885)
          {
            if (a2 <= 2016687155)
            {
              if (a2 > 1999843441)
              {
                if (a2 <= 2016686639)
                {
                  if (a2 != 1999843442)
                  {
                    int v15 = 2016567667;
                    goto LABEL_5486;
                  }
LABEL_4795:
                  if (a3) {
                    BOOL v735 = a4 == 0;
                  }
                  else {
                    BOOL v735 = 1;
                  }
                  int v736 = !v735;
                  float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_l10r;
                  if (!v735 && a5 && a6) {
                    goto LABEL_7022;
                  }
                  if (a5) {
                    int v736 = 0;
                  }
                  float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_l10r;
                  if (v736 == 1)
                  {
                    if (a6) {
                      goto LABEL_7022;
                    }
                  }
                  BOOL v737 = a3 && a4 == 0;
                  BOOL v738 = !v737;
                  float v10 = vt_Copy_b64a_TRC_Mat_TRC_l10r;
                  if (a6)
                  {
                    if (!v738 && !a5) {
                      goto LABEL_7022;
                    }
                  }
                  float v10 = vt_Copy_b64a_TRC_Mat_TRC_l10r;
                  if (a5)
                  {
                    if (!v738 && a6) {
                      goto LABEL_7022;
                    }
                  }
                  uint64_t result = 0;
                  BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                  float v10 = vt_Copy_b64a_rgb_l10r;
                  goto LABEL_6592;
                }
                if (a2 != 2016686640)
                {
                  int v15 = 2016686642;
LABEL_5486:
                  if (a2 != v15) {
                    goto LABEL_7023;
                  }
LABEL_5487:
                  if (a3) {
                    BOOL v859 = a4 == 0;
                  }
                  else {
                    BOOL v859 = 1;
                  }
                  int v860 = !v859;
                  float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_xf422;
                  if (!v859 && a5 && a6) {
                    goto LABEL_7022;
                  }
                  goto LABEL_5792;
                }
                goto LABEL_5497;
              }
              if (a2 == 1983000886)
              {
                if (a3) {
                  BOOL v993 = a4 == 0;
                }
                else {
                  BOOL v993 = 1;
                }
                int v994 = !v993;
                float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_v216;
                if (!v993 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v994 = 0;
                }
                float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_v216;
                if (v994 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v995 = a3 && a4 == 0;
                BOOL v996 = !v995;
                float v10 = vt_Copy_b64a_TRC_Mat_TRC_v216;
                if (a6)
                {
                  if (!v996 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_b64a_TRC_Mat_TRC_v216;
                if (a5)
                {
                  if (!v996 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_b64a_rgb_v216;
                goto LABEL_6592;
              }
              if (a2 != 1983013176)
              {
                int v150 = 1983144248;
                goto LABEL_4375;
              }
              goto LABEL_4617;
            }
            if (a2 > 2019963441)
            {
              if (a2 > 2037741157)
              {
                if (a2 == 2037741158 || a2 == 2037741171)
                {
                  if (a3) {
                    BOOL v919 = a4 == 0;
                  }
                  else {
                    BOOL v919 = 1;
                  }
                  int v920 = !v919;
                  float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_yuvsf;
                  if (!v919 && a5 && a6) {
                    goto LABEL_7022;
                  }
                  if (a5) {
                    int v920 = 0;
                  }
                  float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_yuvsf;
                  if (v920 == 1)
                  {
                    if (a6) {
                      goto LABEL_7022;
                    }
                  }
                  BOOL v921 = a3 && a4 == 0;
                  BOOL v922 = !v921;
                  float v10 = vt_Copy_b64a_TRC_Mat_TRC_yuvsf;
                  if (a6)
                  {
                    if (!v922 && !a5) {
                      goto LABEL_7022;
                    }
                  }
                  float v10 = vt_Copy_b64a_TRC_Mat_TRC_yuvsf;
                  if (a5)
                  {
                    if (!v922 && a6) {
                      goto LABEL_7022;
                    }
                  }
                  uint64_t result = 0;
                  BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                  float v10 = vt_Copy_b64a_rgb_yuvsf;
                  goto LABEL_6592;
                }
                goto LABEL_7023;
              }
              if (a2 == 2019963442) {
                goto LABEL_5487;
              }
              int v504 = 2019963956;
              goto LABEL_5598;
            }
            if (a2 == 2016687156 || a2 == 2016698739) {
              goto LABEL_5599;
            }
            if (a2 != 2019963440) {
              goto LABEL_7023;
            }
LABEL_5497:
            if (a3) {
              BOOL v861 = a4 == 0;
            }
            else {
              BOOL v861 = 1;
            }
            int v862 = !v861;
            float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_xf420;
            if (!v861 && a5 && a6) {
              goto LABEL_7022;
            }
            goto LABEL_6045;
          }
          if (a2 > 1952854575)
          {
            if (a2 <= 1953903151)
            {
              if (a2 != 1952854576)
              {
                if (a2 == 1952854578) {
                  goto LABEL_5487;
                }
                int v504 = 1952855092;
                goto LABEL_5598;
              }
              goto LABEL_5497;
            }
            if (a2 <= 1953903667)
            {
              if (a2 != 1953903152)
              {
                int v15 = 1953903154;
                goto LABEL_5486;
              }
              goto LABEL_5497;
            }
            if (a2 == 1953903668) {
              goto LABEL_5599;
            }
            if (a2 != 1982882104) {
              goto LABEL_7023;
            }
LABEL_5692:
            if (a3) {
              BOOL v891 = a4 == 0;
            }
            else {
              BOOL v891 = 1;
            }
            int v892 = !v891;
            float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_420vf;
            if (!v891 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v892 = 0;
            }
            float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_420vf;
            if (v892 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v893 = a3 && a4 == 0;
            BOOL v894 = !v893;
            float v10 = vt_Copy_b64a_TRC_Mat_TRC_420vf;
            if (a6)
            {
              if (!v894 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_b64a_TRC_Mat_TRC_420vf;
            if (a5)
            {
              if (!v894 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_b64a_rgb_420vf;
            goto LABEL_6592;
          }
          if (a2 > 1937126451)
          {
            if (a2 != 1937126452)
            {
              if (a2 == 1949458803) {
                goto LABEL_5487;
              }
              int v504 = 1949589875;
              goto LABEL_5598;
            }
          }
          else if (a2 != 1936077876)
          {
            if (a2 != 1937125936)
            {
              int v532 = 1937125938;
              goto LABEL_5782;
            }
            goto LABEL_6036;
          }
          goto LABEL_4711;
        }
        if (a2 > 1278226741)
        {
          if (a2 > 1647719520)
          {
            if (a2 <= 1932681586)
            {
              if (a2 == 1647719521)
              {
                if (a3) {
                  BOOL v1015 = a4 == 0;
                }
                else {
                  BOOL v1015 = 1;
                }
                int v1016 = !v1015;
                float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_b64a;
                if (!v1015 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v1016 = 0;
                }
                float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_b64a;
                if (v1016 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v1017 = a3 && a4 == 0;
                BOOL v1018 = !v1017;
                float v10 = vt_Copy_b64a_TRC_Mat_TRC_b64a;
                if (a6)
                {
                  if (!v1018 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_b64a_TRC_Mat_TRC_b64a;
                if (a5)
                {
                  if (!v1018 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_b64a_rgb_b64a;
                goto LABEL_6592;
              }
              if (a2 != 1815162994)
              {
                if (a2 != 1815491698) {
                  goto LABEL_7023;
                }
                if (a3) {
                  BOOL v693 = a4 == 0;
                }
                else {
                  BOOL v693 = 1;
                }
                int v694 = !v693;
                float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_l64r;
                if (!v693 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v694 = 0;
                }
                float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_l64r;
                if (v694 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v695 = a3 && a4 == 0;
                BOOL v696 = !v695;
                float v10 = vt_Copy_b64a_TRC_Mat_TRC_l64r;
                if (a6)
                {
                  if (!v696 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_b64a_TRC_Mat_TRC_l64r;
                if (a5)
                {
                  if (!v696 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_b64a_rgb_l64r;
                goto LABEL_6592;
              }
              goto LABEL_4795;
            }
            if (a2 > 1936077359)
            {
              if (a2 != 1936077360)
              {
                int v532 = 1936077362;
LABEL_5782:
                if (a2 != v532) {
                  goto LABEL_7023;
                }
LABEL_5783:
                if (a3) {
                  BOOL v905 = a4 == 0;
                }
                else {
                  BOOL v905 = 1;
                }
                int v860 = !v905;
                float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_xf422;
                if (!v905 && a5 && a6) {
                  goto LABEL_7022;
                }
LABEL_5792:
                if (a5) {
                  int v860 = 0;
                }
                float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_xf422;
                if (v860 == 1 && a6) {
                  goto LABEL_7022;
                }
                BOOL v906 = a3 && a4 == 0;
                BOOL v907 = !v906;
                float v10 = vt_Copy_b64a_TRC_Mat_TRC_xf422;
                if (a6)
                {
                  if (!v907 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_b64a_TRC_Mat_TRC_xf422;
                if (a5)
                {
                  if (!v907 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_b64a_rgb_xf422;
                goto LABEL_6592;
              }
LABEL_6036:
              if (a3) {
                BOOL v941 = a4 == 0;
              }
              else {
                BOOL v941 = 1;
              }
              int v862 = !v941;
              float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_xf420;
              if (!v941 && a5 && a6) {
                goto LABEL_7022;
              }
LABEL_6045:
              if (a5) {
                int v862 = 0;
              }
              float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_xf420;
              if (v862 == 1 && a6) {
                goto LABEL_7022;
              }
              BOOL v942 = a3 && a4 == 0;
              BOOL v943 = !v942;
              float v10 = vt_Copy_b64a_TRC_Mat_TRC_xf420;
              if (a6)
              {
                if (!v943 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_b64a_TRC_Mat_TRC_xf420;
              if (a5)
              {
                if (!v943 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_b64a_rgb_xf420;
              goto LABEL_6592;
            }
            if (a2 == 1932681587) {
              goto LABEL_5783;
            }
            if (a2 != 1932812659) {
              goto LABEL_7023;
            }
LABEL_4711:
            if (a3) {
              BOOL v723 = a4 == 0;
            }
            else {
              BOOL v723 = 1;
            }
            int v724 = !v723;
            float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_xf444;
            if (!v723 && a5 && a6) {
              goto LABEL_7022;
            }
LABEL_5608:
            if (a5) {
              int v724 = 0;
            }
            float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_xf444;
            if (v724 == 1 && a6) {
              goto LABEL_7022;
            }
            BOOL v880 = a3 && a4 == 0;
            BOOL v881 = !v880;
            float v10 = vt_Copy_b64a_TRC_Mat_TRC_xf444;
            if (a6)
            {
              if (!v881 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_b64a_TRC_Mat_TRC_xf444;
            if (a5)
            {
              if (!v881 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_b64a_rgb_xf444;
            goto LABEL_6592;
          }
          if (a2 > 1380411456)
          {
            if (a2 == 1380411457)
            {
              if (a3) {
                BOOL v1031 = a4 == 0;
              }
              else {
                BOOL v1031 = 1;
              }
              int v1032 = !v1031;
              float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_RGhA;
              if (!v1031 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v1032 = 0;
              }
              float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_RGhA;
              if (v1032 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v1033 = a3 && a4 == 0;
              BOOL v1034 = !v1033;
              float v10 = vt_Copy_b64a_TRC_Mat_TRC_RGhA;
              if (a6)
              {
                if (!v1034 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_b64a_TRC_Mat_TRC_RGhA;
              if (a5)
              {
                if (!v1034 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_b64a_rgb_RGhA;
              goto LABEL_6592;
            }
            if (a2 != 1630697081)
            {
              if (a2 != 1647534392) {
                goto LABEL_7023;
              }
              goto LABEL_4795;
            }
LABEL_5163:
            if (a3) {
              BOOL v794 = a4 == 0;
            }
            else {
              BOOL v794 = 1;
            }
            int v795 = !v794;
            float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_2vuyf;
            if (!v794 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v795 = 0;
            }
            float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_2vuyf;
            if (v795 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v796 = a3 && a4 == 0;
            BOOL v797 = !v796;
            float v10 = vt_Copy_b64a_TRC_Mat_TRC_2vuyf;
            if (a6)
            {
              if (!v797 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_b64a_TRC_Mat_TRC_2vuyf;
            if (a5)
            {
              if (!v797 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_b64a_rgb_2vuyf;
            goto LABEL_6592;
          }
          if (a2 == 1278226742) {
            goto LABEL_4711;
          }
          if (a2 != 1380401729)
          {
            if (a2 != 1380410945) {
              goto LABEL_7023;
            }
            if (a3) {
              BOOL v536 = a4 == 0;
            }
            else {
              BOOL v536 = 1;
            }
            int v537 = !v536;
            float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_RGfA;
            if (!v536 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v537 = 0;
            }
            float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_RGfA;
            if (v537 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v538 = a3 && a4 == 0;
            BOOL v539 = !v538;
            float v10 = vt_Copy_b64a_TRC_Mat_TRC_RGfA;
            if (a6)
            {
              if (!v539 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_b64a_TRC_Mat_TRC_RGfA;
            if (a5)
            {
              if (!v539 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_b64a_rgb_RGfA;
            goto LABEL_6592;
          }
        }
        else
        {
          if (a2 > 875704949)
          {
            if (a2 <= 1111970368)
            {
              if (a2 != 875704950)
              {
                if (a2 == 875836518)
                {
LABEL_4376:
                  if (a3) {
                    BOOL v679 = a4 == 0;
                  }
                  else {
                    BOOL v679 = 1;
                  }
                  int v680 = !v679;
                  float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_444vf;
                  if (!v679 && a5 && a6) {
                    goto LABEL_7022;
                  }
                  if (a5) {
                    int v680 = 0;
                  }
                  float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_444vf;
                  if (v680 == 1)
                  {
                    if (a6) {
                      goto LABEL_7022;
                    }
                  }
                  BOOL v681 = a3 && a4 == 0;
                  BOOL v682 = !v681;
                  float v10 = vt_Copy_b64a_TRC_Mat_TRC_444vf;
                  if (a6)
                  {
                    if (!v682 && !a5) {
                      goto LABEL_7022;
                    }
                  }
                  float v10 = vt_Copy_b64a_TRC_Mat_TRC_444vf;
                  if (a5)
                  {
                    if (!v682 && a6) {
                      goto LABEL_7022;
                    }
                  }
                  uint64_t result = 0;
                  BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                  float v10 = vt_Copy_b64a_rgb_444vf;
                  goto LABEL_6592;
                }
                int v150 = 875836534;
LABEL_4375:
                if (a2 != v150) {
                  goto LABEL_7023;
                }
                goto LABEL_4376;
              }
LABEL_4617:
              if (a3) {
                BOOL v709 = a4 == 0;
              }
              else {
                BOOL v709 = 1;
              }
              int v710 = !v709;
              float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_422vf;
              if (!v709 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v710 = 0;
              }
              float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_422vf;
              if (v710 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v711 = a3 && a4 == 0;
              BOOL v712 = !v711;
              float v10 = vt_Copy_b64a_TRC_Mat_TRC_422vf;
              if (a6)
              {
                if (!v712 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_b64a_TRC_Mat_TRC_422vf;
              if (a5)
              {
                if (!v712 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_b64a_rgb_422vf;
              goto LABEL_6592;
            }
            if (a2 > 1278226735)
            {
              if (a2 == 1278226736) {
                goto LABEL_5599;
              }
              int v504 = 1278226738;
LABEL_5598:
              if (a2 != v504) {
                goto LABEL_7023;
              }
LABEL_5599:
              if (a3) {
                BOOL v879 = a4 == 0;
              }
              else {
                BOOL v879 = 1;
              }
              int v724 = !v879;
              float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_xf444;
              if (!v879 && a5 && a6) {
                goto LABEL_7022;
              }
              goto LABEL_5608;
            }
            if (a2 != 1111970369)
            {
              int v150 = 1278226488;
              goto LABEL_4375;
            }
            goto LABEL_5067;
          }
          if (a2 > 875704421)
          {
            if (a2 != 875704422 && a2 != 875704438)
            {
              if (a2 != 875704934) {
                goto LABEL_7023;
              }
              goto LABEL_4617;
            }
            goto LABEL_5692;
          }
          if (a2 != 32)
          {
            if (a2 != 846624102 && a2 != 846624121) {
              goto LABEL_7023;
            }
            goto LABEL_5163;
          }
        }
LABEL_5067:
        if (a3) {
          BOOL v777 = a4 == 0;
        }
        else {
          BOOL v777 = 1;
        }
        int v778 = !v777;
        float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_BGRA;
        if (!v777 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v778 = 0;
        }
        float v10 = vt_Copy_b64a_TRC_Tone_Mat_TRC_BGRA;
        if (v778 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v779 = a3 && a4 == 0;
        BOOL v780 = !v779;
        float v10 = vt_Copy_b64a_TRC_Mat_TRC_BGRA;
        if (a6)
        {
          if (!v780 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_b64a_TRC_Mat_TRC_BGRA;
        if (a5)
        {
          if (!v780 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_b64a_rgb_BGRA;
        goto LABEL_6592;
      }
      float v10 = 0;
      if (a2 > 1936077875)
      {
        if (a2 > 1983000885)
        {
          if (a2 <= 2016687155)
          {
            if (a2 > 1999843441)
            {
              if (a2 <= 2016686639)
              {
                if (a2 != 1999843442)
                {
                  int v38 = 2016567667;
                  goto LABEL_5565;
                }
LABEL_4882:
                if (a3) {
                  BOOL v747 = a4 == 0;
                }
                else {
                  BOOL v747 = 1;
                }
                int v748 = !v747;
                float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_l10r;
                if (!v747 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v748 = 0;
                }
                float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_l10r;
                if (v748 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v749 = a3 && a4 == 0;
                BOOL v750 = !v749;
                float v10 = vt_Copy_RGhA_TRC_Mat_TRC_l10r;
                if (a6)
                {
                  if (!v750 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_RGhA_TRC_Mat_TRC_l10r;
                if (a5)
                {
                  if (!v750 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_RGhA_rgb_l10r;
                goto LABEL_6592;
              }
              if (a2 != 2016686640)
              {
                int v38 = 2016686642;
LABEL_5565:
                if (a2 != v38) {
                  goto LABEL_7023;
                }
                goto LABEL_5566;
              }
              goto LABEL_5581;
            }
            if (a2 == 1983000886)
            {
              if (a3) {
                BOOL v1005 = a4 == 0;
              }
              else {
                BOOL v1005 = 1;
              }
              int v1006 = !v1005;
              float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_v216;
              if (!v1005 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v1006 = 0;
              }
              float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_v216;
              if (v1006 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v1007 = a3 && a4 == 0;
              BOOL v1008 = !v1007;
              float v10 = vt_Copy_RGhA_TRC_Mat_TRC_v216;
              if (a6)
              {
                if (!v1008 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_RGhA_TRC_Mat_TRC_v216;
              if (a5)
              {
                if (!v1008 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_RGhA_rgb_v216;
              goto LABEL_6592;
            }
            if (a2 != 1983013176)
            {
              int v153 = 1983144248;
              goto LABEL_4454;
            }
            goto LABEL_4693;
          }
          if (a2 > 2019963441)
          {
            if (a2 > 2037741157)
            {
              if (a2 == 2037741158 || a2 == 2037741171)
              {
                if (a3) {
                  BOOL v931 = a4 == 0;
                }
                else {
                  BOOL v931 = 1;
                }
                int v932 = !v931;
                float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_yuvsf;
                if (!v931 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v932 = 0;
                }
                float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_yuvsf;
                if (v932 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v933 = a3 && a4 == 0;
                BOOL v934 = !v933;
                float v10 = vt_Copy_RGhA_TRC_Mat_TRC_yuvsf;
                if (a6)
                {
                  if (!v934 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_RGhA_TRC_Mat_TRC_yuvsf;
                if (a5)
                {
                  if (!v934 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_RGhA_rgb_yuvsf;
                goto LABEL_6592;
              }
              goto LABEL_7023;
            }
            if (a2 == 2019963442) {
              goto LABEL_5566;
            }
            int v507 = 2019963956;
            goto LABEL_5674;
          }
          if (a2 != 2016687156 && a2 != 2016698739)
          {
            if (a2 != 2019963440) {
              goto LABEL_7023;
            }
            goto LABEL_5581;
          }
LABEL_5675:
          if (a3) {
            BOOL v888 = a4 == 0;
          }
          else {
            BOOL v888 = 1;
          }
          int v889 = !v888;
          if (!v888 && a5 && a6) {
            goto LABEL_5688;
          }
          if (a5) {
            int v889 = 0;
          }
          if (v889 == 1 && a6)
          {
LABEL_5688:
            float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v890 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v890 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444_neon_fp16;
            float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444;
            goto LABEL_7028;
          }
          if (a3) {
            BOOL v938 = a4 == 0;
          }
          else {
            BOOL v938 = 0;
          }
          int v939 = !v938;
          if (a6 && !v939 && !a5 || a5 && v939 != 1 && a6)
          {
            float v10 = vt_Copy_RGhA_TRC_Mat_TRC_xf444;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v940 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v940 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Mat_TRC_xf444_neon_fp16;
            float v10 = vt_Copy_RGhA_TRC_Mat_TRC_xf444;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_RGhA_rgb_xf444;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1111 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1111 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGhA_rgb_xf444_neon_fp16;
            float v10 = vt_Copy_RGhA_rgb_xf444;
            goto LABEL_7028;
          }
          goto LABEL_7021;
        }
        if (a2 > 1952854575)
        {
          if (a2 > 1953903151)
          {
            if (a2 <= 1953903667)
            {
              if (a2 != 1953903152)
              {
                int v38 = 1953903154;
                goto LABEL_5565;
              }
LABEL_5581:
              if (a3) {
                BOOL v876 = a4 == 0;
              }
              else {
                BOOL v876 = 1;
              }
              int v877 = !v876;
              if (!v876 && a5 && a6) {
                goto LABEL_5594;
              }
              if (a5) {
                int v877 = 0;
              }
              if (v877 == 1 && a6)
              {
LABEL_5594:
                float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v878 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v878 >= 2;
                CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420_neon_fp16;
                float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420;
                goto LABEL_7028;
              }
              if (a3) {
                BOOL v1048 = a4 == 0;
              }
              else {
                BOOL v1048 = 0;
              }
              int v1049 = !v1048;
              if (a6 && !v1049 && !a5 || a5 && v1049 != 1 && a6)
              {
                float v10 = vt_Copy_RGhA_TRC_Mat_TRC_xf420;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v1050 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v1050 >= 2;
                CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Mat_TRC_xf420_neon_fp16;
                float v10 = vt_Copy_RGhA_TRC_Mat_TRC_xf420;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_RGhA_rgb_xf420;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v1132 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v1132 >= 2;
                CFAllocatorRef v30 = vt_Copy_RGhA_rgb_xf420_neon_fp16;
                float v10 = vt_Copy_RGhA_rgb_xf420;
                goto LABEL_7028;
              }
              goto LABEL_7021;
            }
            if (a2 == 1953903668) {
              goto LABEL_5675;
            }
            if (a2 != 1982882104) {
              goto LABEL_7023;
            }
LABEL_5765:
            if (a3) {
              BOOL v902 = a4 == 0;
            }
            else {
              BOOL v902 = 1;
            }
            int v903 = !v902;
            if (!v902 && a5 && a6) {
              goto LABEL_5778;
            }
            if (a5) {
              int v903 = 0;
            }
            if (v903 == 1 && a6)
            {
LABEL_5778:
              float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v904 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v904 >= 2;
              CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf_neon_fp16;
              float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_420vf;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v1094 = a4 == 0;
            }
            else {
              BOOL v1094 = 0;
            }
            int v1095 = !v1094;
            if (a6 && !v1095 && !a5 || a5 && v1095 != 1 && a6)
            {
              float v10 = vt_Copy_RGhA_TRC_Mat_TRC_420vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1096 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1096 >= 2;
              CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Mat_TRC_420vf_neon_fp16;
              float v10 = vt_Copy_RGhA_TRC_Mat_TRC_420vf;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_RGhA_rgb_420vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1142 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1142 >= 2;
              CFAllocatorRef v30 = vt_Copy_RGhA_rgb_420vf_neon_fp16;
              float v10 = vt_Copy_RGhA_rgb_420vf;
              goto LABEL_7028;
            }
            goto LABEL_7021;
          }
          if (a2 == 1952854576) {
            goto LABEL_5581;
          }
          if (a2 != 1952854578)
          {
            int v507 = 1952855092;
            goto LABEL_5674;
          }
LABEL_5566:
          if (a3) {
            BOOL v873 = a4 == 0;
          }
          else {
            BOOL v873 = 1;
          }
          int v874 = !v873;
          if (!v873 && a5 && a6) {
            goto LABEL_5579;
          }
          if (a5) {
            int v874 = 0;
          }
          if (v874 == 1 && a6)
          {
LABEL_5579:
            float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v875 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v875 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422_neon_fp16;
            float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422;
            goto LABEL_7028;
          }
          if (a3) {
            BOOL v973 = a4 == 0;
          }
          else {
            BOOL v973 = 0;
          }
          int v974 = !v973;
          if (a6 && !v974 && !a5 || a5 && v974 != 1 && a6)
          {
            float v10 = vt_Copy_RGhA_TRC_Mat_TRC_xf422;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v975 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v975 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Mat_TRC_xf422_neon_fp16;
            float v10 = vt_Copy_RGhA_TRC_Mat_TRC_xf422;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_RGhA_rgb_xf422;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1115 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1115 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGhA_rgb_xf422_neon_fp16;
            float v10 = vt_Copy_RGhA_rgb_xf422;
            goto LABEL_7028;
          }
          goto LABEL_7021;
        }
        if (a2 <= 1937126451)
        {
          if (a2 != 1936077876)
          {
            if (a2 != 1937125936)
            {
              int v535 = 1937125938;
              goto LABEL_5869;
            }
            goto LABEL_6114;
          }
          goto LABEL_4766;
        }
        if (a2 == 1937126452) {
          goto LABEL_4766;
        }
        if (a2 == 1949458803) {
          goto LABEL_5566;
        }
        int v507 = 1949589875;
LABEL_5674:
        if (a2 != v507) {
          goto LABEL_7023;
        }
        goto LABEL_5675;
      }
      if (a2 <= 1278226741)
      {
        if (a2 > 875704949)
        {
          if (a2 <= 1111970368)
          {
            if (a2 != 875704950)
            {
              if (a2 == 875836518)
              {
LABEL_4455:
                if (a3) {
                  BOOL v690 = a4 == 0;
                }
                else {
                  BOOL v690 = 1;
                }
                int v691 = !v690;
                if (!v690 && a5 && a6) {
                  goto LABEL_4468;
                }
                if (a5) {
                  int v691 = 0;
                }
                if (v691 == 1 && a6)
                {
LABEL_4468:
                  float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v692 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v692 >= 2;
                  CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf_neon_fp16;
                  float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_444vf;
                  goto LABEL_7028;
                }
                if (a3) {
                  BOOL v1012 = a4 == 0;
                }
                else {
                  BOOL v1012 = 0;
                }
                int v1013 = !v1012;
                if (a6 && !v1013 && !a5 || a5 && v1013 != 1 && a6)
                {
                  float v10 = vt_Copy_RGhA_TRC_Mat_TRC_444vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v1014 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v1014 >= 2;
                  CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Mat_TRC_444vf_neon_fp16;
                  float v10 = vt_Copy_RGhA_TRC_Mat_TRC_444vf;
                  goto LABEL_7028;
                }
                if (!(a4 | a3 | a5 | a6))
                {
                  float v10 = vt_Copy_RGhA_rgb_444vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v1124 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v1124 >= 2;
                  CFAllocatorRef v30 = vt_Copy_RGhA_rgb_444vf_neon_fp16;
                  float v10 = vt_Copy_RGhA_rgb_444vf;
                  goto LABEL_7028;
                }
                goto LABEL_7021;
              }
              int v153 = 875836534;
LABEL_4454:
              if (a2 != v153) {
                goto LABEL_7023;
              }
              goto LABEL_4455;
            }
LABEL_4693:
            if (a3) {
              BOOL v720 = a4 == 0;
            }
            else {
              BOOL v720 = 1;
            }
            int v721 = !v720;
            if (!v720 && a5 && a6) {
              goto LABEL_4706;
            }
            if (a5) {
              int v721 = 0;
            }
            if (v721 == 1 && a6)
            {
LABEL_4706:
              float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v722 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v722 >= 2;
              CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf_neon_fp16;
              float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_422vf;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v1077 = a4 == 0;
            }
            else {
              BOOL v1077 = 0;
            }
            int v1078 = !v1077;
            if (a6 && !v1078 && !a5 || a5 && v1078 != 1 && a6)
            {
              float v10 = vt_Copy_RGhA_TRC_Mat_TRC_422vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1079 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1079 >= 2;
              CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Mat_TRC_422vf_neon_fp16;
              float v10 = vt_Copy_RGhA_TRC_Mat_TRC_422vf;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_RGhA_rgb_422vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1138 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1138 >= 2;
              CFAllocatorRef v30 = vt_Copy_RGhA_rgb_422vf_neon_fp16;
              float v10 = vt_Copy_RGhA_rgb_422vf;
              goto LABEL_7028;
            }
            goto LABEL_7021;
          }
          if (a2 > 1278226735)
          {
            if (a2 == 1278226736) {
              goto LABEL_5675;
            }
            int v507 = 1278226738;
            goto LABEL_5674;
          }
          if (a2 != 1111970369)
          {
            int v153 = 1278226488;
            goto LABEL_4454;
          }
LABEL_5134:
          if (a3) {
            BOOL v788 = a4 == 0;
          }
          else {
            BOOL v788 = 1;
          }
          int v789 = !v788;
          if (!v788 && a5 && a6) {
            goto LABEL_5147;
          }
          if (a5) {
            int v789 = 0;
          }
          if (v789 == 1 && a6)
          {
LABEL_5147:
            float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v790 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v790 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA_neon_fp16;
            float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_BGRA;
            goto LABEL_7028;
          }
          if (a3) {
            BOOL v1087 = a4 == 0;
          }
          else {
            BOOL v1087 = 0;
          }
          int v1088 = !v1087;
          if (a6 && !v1088 && !a5 || a5 && v1088 != 1 && a6)
          {
            float v10 = vt_Copy_RGhA_TRC_Mat_TRC_BGRA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1089 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1089 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Mat_TRC_BGRA_neon_fp16;
            float v10 = vt_Copy_RGhA_TRC_Mat_TRC_BGRA;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_RGhA_rgb_BGRA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1140 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1140 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGhA_rgb_BGRA_neon_fp16;
            float v10 = vt_Copy_RGhA_rgb_BGRA;
            goto LABEL_7028;
          }
          goto LABEL_7021;
        }
        if (a2 > 875704421)
        {
          if (a2 != 875704422 && a2 != 875704438)
          {
            if (a2 != 875704934) {
              goto LABEL_7023;
            }
            goto LABEL_4693;
          }
          goto LABEL_5765;
        }
        if (a2 == 32) {
          goto LABEL_5134;
        }
        if (a2 != 846624102 && a2 != 846624121) {
          goto LABEL_7023;
        }
LABEL_5241:
        if (a3) {
          BOOL v806 = a4 == 0;
        }
        else {
          BOOL v806 = 1;
        }
        int v807 = !v806;
        float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_2vuyf;
        if (!v806 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v807 = 0;
        }
        float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_2vuyf;
        if (v807 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v808 = a3 && a4 == 0;
        BOOL v809 = !v808;
        float v10 = vt_Copy_RGhA_TRC_Mat_TRC_2vuyf;
        if (a6)
        {
          if (!v809 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_RGhA_TRC_Mat_TRC_2vuyf;
        if (a5)
        {
          if (!v809 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_RGhA_rgb_2vuyf;
        goto LABEL_6592;
      }
      if (a2 > 1647719520)
      {
        if (a2 <= 1932681586)
        {
          if (a2 == 1647719521)
          {
            if (a3) {
              BOOL v1027 = a4 == 0;
            }
            else {
              BOOL v1027 = 1;
            }
            int v1028 = !v1027;
            float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_b64a;
            if (!v1027 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v1028 = 0;
            }
            float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_b64a;
            if (v1028 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v1029 = a3 && a4 == 0;
            BOOL v1030 = !v1029;
            float v10 = vt_Copy_RGhA_TRC_Mat_TRC_b64a;
            if (a6)
            {
              if (!v1030 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_RGhA_TRC_Mat_TRC_b64a;
            if (a5)
            {
              if (!v1030 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_RGhA_rgb_b64a;
            goto LABEL_6592;
          }
          if (a2 != 1815162994)
          {
            if (a2 != 1815491698) {
              goto LABEL_7023;
            }
            if (a3) {
              BOOL v705 = a4 == 0;
            }
            else {
              BOOL v705 = 1;
            }
            int v706 = !v705;
            float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_l64r;
            if (!v705 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v706 = 0;
            }
            float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_l64r;
            if (v706 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v707 = a3 && a4 == 0;
            BOOL v708 = !v707;
            float v10 = vt_Copy_RGhA_TRC_Mat_TRC_l64r;
            if (a6)
            {
              if (!v708 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_RGhA_TRC_Mat_TRC_l64r;
            if (a5)
            {
              if (!v708 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_RGhA_rgb_l64r;
            goto LABEL_6592;
          }
          goto LABEL_4882;
        }
        if (a2 > 1936077359)
        {
          if (a2 != 1936077360)
          {
            int v535 = 1936077362;
LABEL_5869:
            if (a2 != v535) {
              goto LABEL_7023;
            }
            goto LABEL_5870;
          }
LABEL_6114:
          if (a3) {
            BOOL v951 = a4 == 0;
          }
          else {
            BOOL v951 = 1;
          }
          int v952 = !v951;
          float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420;
          if (!v951 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v952 = 0;
          }
          float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf420;
          if (v952 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v953 = a3 && a4 == 0;
          BOOL v954 = !v953;
          float v10 = vt_Copy_RGhA_TRC_Mat_TRC_xf420;
          if (a6)
          {
            if (!v954 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_RGhA_TRC_Mat_TRC_xf420;
          if (a5)
          {
            if (!v954 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_RGhA_rgb_xf420;
          goto LABEL_6592;
        }
        if (a2 == 1932681587)
        {
LABEL_5870:
          if (a3) {
            BOOL v915 = a4 == 0;
          }
          else {
            BOOL v915 = 1;
          }
          int v916 = !v915;
          float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422;
          if (!v915 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v916 = 0;
          }
          float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf422;
          if (v916 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v917 = a3 && a4 == 0;
          BOOL v918 = !v917;
          float v10 = vt_Copy_RGhA_TRC_Mat_TRC_xf422;
          if (a6)
          {
            if (!v918 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_RGhA_TRC_Mat_TRC_xf422;
          if (a5)
          {
            if (!v918 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_RGhA_rgb_xf422;
          goto LABEL_6592;
        }
        if (a2 != 1932812659) {
          goto LABEL_7023;
        }
LABEL_4766:
        if (a3) {
          BOOL v731 = a4 == 0;
        }
        else {
          BOOL v731 = 1;
        }
        int v732 = !v731;
        float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444;
        if (!v731 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v732 = 0;
        }
        float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_xf444;
        if (v732 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v733 = a3 && a4 == 0;
        BOOL v734 = !v733;
        float v10 = vt_Copy_RGhA_TRC_Mat_TRC_xf444;
        if (a6)
        {
          if (!v734 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_RGhA_TRC_Mat_TRC_xf444;
        if (a5)
        {
          if (!v734 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_RGhA_rgb_xf444;
        goto LABEL_6592;
      }
      if (a2 > 1380411456)
      {
        if (a2 == 1380411457)
        {
          if (a3) {
            BOOL v1042 = a4 == 0;
          }
          else {
            BOOL v1042 = 1;
          }
          int v1043 = !v1042;
          if (!v1042 && a5 && a6) {
            goto LABEL_6609;
          }
          if (a5) {
            int v1043 = 0;
          }
          if (v1043 == 1 && a6)
          {
LABEL_6609:
            float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1044 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1044 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA_neon_fp16;
            float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGhA;
            goto LABEL_7028;
          }
          if (a3) {
            BOOL v1128 = a4 == 0;
          }
          else {
            BOOL v1128 = 0;
          }
          int v1129 = !v1128;
          if (a6 && !v1129 && !a5 || a5 && v1129 != 1 && a6)
          {
            float v10 = vt_Copy_RGhA_TRC_Mat_TRC_RGhA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1130 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1130 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Mat_TRC_RGhA_neon_fp16;
            float v10 = vt_Copy_RGhA_TRC_Mat_TRC_RGhA;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_RGhA_rgb_RGhA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1150 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1150 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGhA_rgb_RGhA_neon_fp16;
            float v10 = vt_Copy_RGhA_rgb_RGhA;
            goto LABEL_7028;
          }
          goto LABEL_7021;
        }
        if (a2 != 1630697081)
        {
          if (a2 != 1647534392) {
            goto LABEL_7023;
          }
          goto LABEL_4882;
        }
        goto LABEL_5241;
      }
      if (a2 == 1278226742) {
        goto LABEL_4766;
      }
      if (a2 == 1380401729) {
        goto LABEL_5134;
      }
      if (a2 != 1380410945) {
        goto LABEL_7023;
      }
      if (a3) {
        BOOL v547 = a4 == 0;
      }
      else {
        BOOL v547 = 1;
      }
      int v548 = !v547;
      if (!v547 && a5 && a6) {
        goto LABEL_3647;
      }
      if (a5) {
        int v548 = 0;
      }
      if (v548 == 1 && a6)
      {
LABEL_3647:
        float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v549 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v549 >= 2;
        CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA_neon_fp16;
        float v10 = vt_Copy_RGhA_TRC_Tone_Mat_TRC_RGfA;
        goto LABEL_7028;
      }
      if (a3) {
        BOOL v1120 = a4 == 0;
      }
      else {
        BOOL v1120 = 0;
      }
      int v1121 = !v1120;
      if (a6 && !v1121 && !a5 || a5 && v1121 != 1 && a6)
      {
        float v10 = vt_Copy_RGhA_TRC_Mat_TRC_RGfA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v1122 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v1122 >= 2;
        CFAllocatorRef v30 = vt_Copy_RGhA_TRC_Mat_TRC_RGfA_neon_fp16;
        float v10 = vt_Copy_RGhA_TRC_Mat_TRC_RGfA;
        goto LABEL_7028;
      }
      if (!(a4 | a3 | a5 | a6))
      {
        float v10 = vt_Copy_RGhA_rgb_RGfA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v1148 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v1148 >= 2;
        CFAllocatorRef v30 = vt_Copy_RGhA_rgb_RGfA_neon_fp16;
        float v10 = vt_Copy_RGhA_rgb_RGfA;
        goto LABEL_7028;
      }
LABEL_7021:
      float v10 = 0;
      goto LABEL_7022;
    }
    if (a1 == 1380401729) {
      goto LABEL_179;
    }
    if (a1 != 1380410945) {
      goto LABEL_7023;
    }
    float v10 = 0;
    if (a2 > 1936077875)
    {
      if (a2 > 1983000885)
      {
        if (a2 <= 2016687155)
        {
          if (a2 > 1999843441)
          {
            if (a2 <= 2016686639)
            {
              if (a2 != 1999843442)
              {
                int v21 = 2016567667;
                goto LABEL_5509;
              }
LABEL_4824:
              if (a3) {
                BOOL v739 = a4 == 0;
              }
              else {
                BOOL v739 = 1;
              }
              int v740 = !v739;
              float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_l10r;
              if (!v739 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v740 = 0;
              }
              float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_l10r;
              if (v740 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v741 = a3 && a4 == 0;
              BOOL v742 = !v741;
              float v10 = vt_Copy_RGfA_TRC_Mat_TRC_l10r;
              if (a6)
              {
                if (!v742 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_RGfA_TRC_Mat_TRC_l10r;
              if (a5)
              {
                if (!v742 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_RGfA_rgb_l10r;
              goto LABEL_6592;
            }
            if (a2 != 2016686640)
            {
              int v21 = 2016686642;
LABEL_5509:
              if (a2 != v21) {
                goto LABEL_7023;
              }
              goto LABEL_5510;
            }
            goto LABEL_5525;
          }
          if (a2 == 1983000886)
          {
            if (a3) {
              BOOL v997 = a4 == 0;
            }
            else {
              BOOL v997 = 1;
            }
            int v998 = !v997;
            float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_v216;
            if (!v997 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v998 = 0;
            }
            float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_v216;
            if (v998 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v999 = a3 && a4 == 0;
            BOOL v1000 = !v999;
            float v10 = vt_Copy_RGfA_TRC_Mat_TRC_v216;
            if (a6)
            {
              if (!v1000 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_RGfA_TRC_Mat_TRC_v216;
            if (a5)
            {
              if (!v1000 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_RGfA_rgb_v216;
            goto LABEL_6592;
          }
          if (a2 != 1983013176)
          {
            int v151 = 1983144248;
            goto LABEL_4405;
          }
          goto LABEL_4646;
        }
        if (a2 > 2019963441)
        {
          if (a2 > 2037741157)
          {
            if (a2 == 2037741158 || a2 == 2037741171)
            {
              if (a3) {
                BOOL v923 = a4 == 0;
              }
              else {
                BOOL v923 = 1;
              }
              int v924 = !v923;
              float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_yuvsf;
              if (!v923 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v924 = 0;
              }
              float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_yuvsf;
              if (v924 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v925 = a3 && a4 == 0;
              BOOL v926 = !v925;
              float v10 = vt_Copy_RGfA_TRC_Mat_TRC_yuvsf;
              if (a6)
              {
                if (!v926 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_RGfA_TRC_Mat_TRC_yuvsf;
              if (a5)
              {
                if (!v926 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_RGfA_rgb_yuvsf;
              goto LABEL_6592;
            }
            goto LABEL_7023;
          }
          if (a2 == 2019963442) {
            goto LABEL_5510;
          }
          int v505 = 2019963956;
          goto LABEL_5627;
        }
        if (a2 != 2016687156 && a2 != 2016698739)
        {
          if (a2 != 2019963440) {
            goto LABEL_7023;
          }
          goto LABEL_5525;
        }
LABEL_5628:
        if (a3) {
          BOOL v882 = a4 == 0;
        }
        else {
          BOOL v882 = 1;
        }
        int v883 = !v882;
        if (!v882 && a5 && a6) {
          goto LABEL_5641;
        }
        if (a5) {
          int v883 = 0;
        }
        if (v883 == 1 && a6)
        {
LABEL_5641:
          float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v884 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v884 >= 2;
          CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444_neon_fp16;
          float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444;
          goto LABEL_7028;
        }
        if (a3) {
          BOOL v935 = a4 == 0;
        }
        else {
          BOOL v935 = 0;
        }
        int v936 = !v935;
        if (a6 && !v936 && !a5 || a5 && v936 != 1 && a6)
        {
          float v10 = vt_Copy_RGfA_TRC_Mat_TRC_xf444;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v937 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v937 >= 2;
          CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Mat_TRC_xf444_neon_fp16;
          float v10 = vt_Copy_RGfA_TRC_Mat_TRC_xf444;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_RGfA_rgb_xf444;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v1110 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v1110 >= 2;
          CFAllocatorRef v30 = vt_Copy_RGfA_rgb_xf444_neon_fp16;
          float v10 = vt_Copy_RGfA_rgb_xf444;
          goto LABEL_7028;
        }
        goto LABEL_7021;
      }
      if (a2 > 1952854575)
      {
        if (a2 > 1953903151)
        {
          if (a2 <= 1953903667)
          {
            if (a2 != 1953903152)
            {
              int v21 = 1953903154;
              goto LABEL_5509;
            }
LABEL_5525:
            if (a3) {
              BOOL v866 = a4 == 0;
            }
            else {
              BOOL v866 = 1;
            }
            int v867 = !v866;
            if (!v866 && a5 && a6) {
              goto LABEL_5538;
            }
            if (a5) {
              int v867 = 0;
            }
            if (v867 == 1 && a6)
            {
LABEL_5538:
              float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v868 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v868 >= 2;
              CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420_neon_fp16;
              float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v1045 = a4 == 0;
            }
            else {
              BOOL v1045 = 0;
            }
            int v1046 = !v1045;
            if (a6 && !v1046 && !a5 || a5 && v1046 != 1 && a6)
            {
              float v10 = vt_Copy_RGfA_TRC_Mat_TRC_xf420;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1047 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1047 >= 2;
              CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Mat_TRC_xf420_neon_fp16;
              float v10 = vt_Copy_RGfA_TRC_Mat_TRC_xf420;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_RGfA_rgb_xf420;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1131 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1131 >= 2;
              CFAllocatorRef v30 = vt_Copy_RGfA_rgb_xf420_neon_fp16;
              float v10 = vt_Copy_RGfA_rgb_xf420;
              goto LABEL_7028;
            }
            goto LABEL_7021;
          }
          if (a2 == 1953903668) {
            goto LABEL_5628;
          }
          if (a2 != 1982882104) {
            goto LABEL_7023;
          }
LABEL_5720:
          if (a3) {
            BOOL v895 = a4 == 0;
          }
          else {
            BOOL v895 = 1;
          }
          int v896 = !v895;
          if (!v895 && a5 && a6) {
            goto LABEL_5733;
          }
          if (a5) {
            int v896 = 0;
          }
          if (v896 == 1 && a6)
          {
LABEL_5733:
            float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v897 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v897 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf_neon_fp16;
            float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_420vf;
            goto LABEL_7028;
          }
          if (a3) {
            BOOL v1091 = a4 == 0;
          }
          else {
            BOOL v1091 = 0;
          }
          int v1092 = !v1091;
          if (a6 && !v1092 && !a5 || a5 && v1092 != 1 && a6)
          {
            float v10 = vt_Copy_RGfA_TRC_Mat_TRC_420vf;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1093 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1093 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Mat_TRC_420vf_neon_fp16;
            float v10 = vt_Copy_RGfA_TRC_Mat_TRC_420vf;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_RGfA_rgb_420vf;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1141 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1141 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGfA_rgb_420vf_neon_fp16;
            float v10 = vt_Copy_RGfA_rgb_420vf;
            goto LABEL_7028;
          }
          goto LABEL_7021;
        }
        if (a2 == 1952854576) {
          goto LABEL_5525;
        }
        if (a2 != 1952854578)
        {
          int v505 = 1952855092;
          goto LABEL_5627;
        }
LABEL_5510:
        if (a3) {
          BOOL v863 = a4 == 0;
        }
        else {
          BOOL v863 = 1;
        }
        int v864 = !v863;
        if (!v863 && a5 && a6) {
          goto LABEL_5523;
        }
        if (a5) {
          int v864 = 0;
        }
        if (v864 == 1 && a6)
        {
LABEL_5523:
          float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v865 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v865 >= 2;
          CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422_neon_fp16;
          float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422;
          goto LABEL_7028;
        }
        if (a3) {
          BOOL v970 = a4 == 0;
        }
        else {
          BOOL v970 = 0;
        }
        int v971 = !v970;
        if (a6 && !v971 && !a5 || a5 && v971 != 1 && a6)
        {
          float v10 = vt_Copy_RGfA_TRC_Mat_TRC_xf422;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v972 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v972 >= 2;
          CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Mat_TRC_xf422_neon_fp16;
          float v10 = vt_Copy_RGfA_TRC_Mat_TRC_xf422;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_RGfA_rgb_xf422;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v1114 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v1114 >= 2;
          CFAllocatorRef v30 = vt_Copy_RGfA_rgb_xf422_neon_fp16;
          float v10 = vt_Copy_RGfA_rgb_xf422;
          goto LABEL_7028;
        }
        goto LABEL_7021;
      }
      if (a2 <= 1937126451)
      {
        if (a2 != 1936077876)
        {
          if (a2 != 1937125936)
          {
            int v533 = 1937125938;
            goto LABEL_5811;
          }
          goto LABEL_6062;
        }
        goto LABEL_4724;
      }
      if (a2 == 1937126452) {
        goto LABEL_4724;
      }
      if (a2 == 1949458803) {
        goto LABEL_5510;
      }
      int v505 = 1949589875;
LABEL_5627:
      if (a2 != v505) {
        goto LABEL_7023;
      }
      goto LABEL_5628;
    }
    if (a2 > 1278226741)
    {
      if (a2 > 1647719520)
      {
        if (a2 <= 1932681586)
        {
          if (a2 == 1647719521)
          {
            if (a3) {
              BOOL v1019 = a4 == 0;
            }
            else {
              BOOL v1019 = 1;
            }
            int v1020 = !v1019;
            float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_b64a;
            if (!v1019 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v1020 = 0;
            }
            float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_b64a;
            if (v1020 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v1021 = a3 && a4 == 0;
            BOOL v1022 = !v1021;
            float v10 = vt_Copy_RGfA_TRC_Mat_TRC_b64a;
            if (a6)
            {
              if (!v1022 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_RGfA_TRC_Mat_TRC_b64a;
            if (a5)
            {
              if (!v1022 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_RGfA_rgb_b64a;
            goto LABEL_6592;
          }
          if (a2 != 1815162994)
          {
            if (a2 != 1815491698) {
              goto LABEL_7023;
            }
            if (a3) {
              BOOL v697 = a4 == 0;
            }
            else {
              BOOL v697 = 1;
            }
            int v698 = !v697;
            float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_l64r;
            if (!v697 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v698 = 0;
            }
            float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_l64r;
            if (v698 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v699 = a3 && a4 == 0;
            BOOL v700 = !v699;
            float v10 = vt_Copy_RGfA_TRC_Mat_TRC_l64r;
            if (a6)
            {
              if (!v700 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_RGfA_TRC_Mat_TRC_l64r;
            if (a5)
            {
              if (!v700 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_RGfA_rgb_l64r;
            goto LABEL_6592;
          }
          goto LABEL_4824;
        }
        if (a2 > 1936077359)
        {
          if (a2 != 1936077360)
          {
            int v533 = 1936077362;
LABEL_5811:
            if (a2 != v533) {
              goto LABEL_7023;
            }
            goto LABEL_5812;
          }
LABEL_6062:
          if (a3) {
            BOOL v944 = a4 == 0;
          }
          else {
            BOOL v944 = 1;
          }
          int v945 = !v944;
          float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420;
          if (!v944 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v945 = 0;
          }
          float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf420;
          if (v945 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v946 = a3 && a4 == 0;
          BOOL v947 = !v946;
          float v10 = vt_Copy_RGfA_TRC_Mat_TRC_xf420;
          if (a6)
          {
            if (!v947 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_RGfA_TRC_Mat_TRC_xf420;
          if (a5)
          {
            if (!v947 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_RGfA_rgb_xf420;
          goto LABEL_6592;
        }
        if (a2 == 1932681587)
        {
LABEL_5812:
          if (a3) {
            BOOL v908 = a4 == 0;
          }
          else {
            BOOL v908 = 1;
          }
          int v909 = !v908;
          float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422;
          if (!v908 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v909 = 0;
          }
          float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf422;
          if (v909 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v910 = a3 && a4 == 0;
          BOOL v911 = !v910;
          float v10 = vt_Copy_RGfA_TRC_Mat_TRC_xf422;
          if (a6)
          {
            if (!v911 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_RGfA_TRC_Mat_TRC_xf422;
          if (a5)
          {
            if (!v911 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_RGfA_rgb_xf422;
          goto LABEL_6592;
        }
        if (a2 != 1932812659) {
          goto LABEL_7023;
        }
LABEL_4724:
        if (a3) {
          BOOL v725 = a4 == 0;
        }
        else {
          BOOL v725 = 1;
        }
        int v726 = !v725;
        float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444;
        if (!v725 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v726 = 0;
        }
        float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_xf444;
        if (v726 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v727 = a3 && a4 == 0;
        BOOL v728 = !v727;
        float v10 = vt_Copy_RGfA_TRC_Mat_TRC_xf444;
        if (a6)
        {
          if (!v728 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_RGfA_TRC_Mat_TRC_xf444;
        if (a5)
        {
          if (!v728 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_RGfA_rgb_xf444;
        goto LABEL_6592;
      }
      if (a2 <= 1380411456)
      {
        if (a2 == 1278226742) {
          goto LABEL_4724;
        }
        if (a2 != 1380401729)
        {
          if (a2 != 1380410945) {
            goto LABEL_7023;
          }
          if (a3) {
            BOOL v540 = a4 == 0;
          }
          else {
            BOOL v540 = 1;
          }
          int v541 = !v540;
          if (!v540 && a5 && a6) {
            goto LABEL_3598;
          }
          if (a5) {
            int v541 = 0;
          }
          if (v541 == 1 && a6)
          {
LABEL_3598:
            float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v542 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v542 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA_neon_fp16;
            float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGfA;
            goto LABEL_7028;
          }
          if (a3) {
            BOOL v1117 = a4 == 0;
          }
          else {
            BOOL v1117 = 0;
          }
          int v1118 = !v1117;
          if (a6 && !v1118 && !a5 || a5 && v1118 != 1 && a6)
          {
            float v10 = vt_Copy_RGfA_TRC_Mat_TRC_RGfA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1119 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1119 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Mat_TRC_RGfA_neon_fp16;
            float v10 = vt_Copy_RGfA_TRC_Mat_TRC_RGfA;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_RGfA_rgb_RGfA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1147 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1147 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGfA_rgb_RGfA_neon_fp16;
            float v10 = vt_Copy_RGfA_rgb_RGfA;
            goto LABEL_7028;
          }
          goto LABEL_7021;
        }
        goto LABEL_5093;
      }
      if (a2 == 1380411457)
      {
        if (a3) {
          BOOL v1035 = a4 == 0;
        }
        else {
          BOOL v1035 = 1;
        }
        int v1036 = !v1035;
        if (!v1035 && a5 && a6) {
          goto LABEL_6564;
        }
        if (a5) {
          int v1036 = 0;
        }
        if (v1036 == 1 && a6)
        {
LABEL_6564:
          float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v1037 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v1037 >= 2;
          CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA_neon_fp16;
          float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_RGhA;
          goto LABEL_7028;
        }
        if (a3) {
          BOOL v1125 = a4 == 0;
        }
        else {
          BOOL v1125 = 0;
        }
        int v1126 = !v1125;
        if (a6 && !v1126 && !a5 || a5 && v1126 != 1 && a6)
        {
          float v10 = vt_Copy_RGfA_TRC_Mat_TRC_RGhA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v1127 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v1127 >= 2;
          CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Mat_TRC_RGhA_neon_fp16;
          float v10 = vt_Copy_RGfA_TRC_Mat_TRC_RGhA;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_RGfA_rgb_RGhA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v1149 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v1149 >= 2;
          CFAllocatorRef v30 = vt_Copy_RGfA_rgb_RGhA_neon_fp16;
          float v10 = vt_Copy_RGfA_rgb_RGhA;
          goto LABEL_7028;
        }
        goto LABEL_7021;
      }
      if (a2 != 1630697081)
      {
        if (a2 != 1647534392) {
          goto LABEL_7023;
        }
        goto LABEL_4824;
      }
    }
    else
    {
      if (a2 > 875704949)
      {
        if (a2 <= 1111970368)
        {
          if (a2 != 875704950)
          {
            if (a2 == 875836518)
            {
LABEL_4406:
              if (a3) {
                BOOL v683 = a4 == 0;
              }
              else {
                BOOL v683 = 1;
              }
              int v684 = !v683;
              if (!v683 && a5 && a6) {
                goto LABEL_4419;
              }
              if (a5) {
                int v684 = 0;
              }
              if (v684 == 1 && a6)
              {
LABEL_4419:
                float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v685 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v685 >= 2;
                CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf_neon_fp16;
                float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_444vf;
                goto LABEL_7028;
              }
              if (a3) {
                BOOL v1009 = a4 == 0;
              }
              else {
                BOOL v1009 = 0;
              }
              int v1010 = !v1009;
              if (a6 && !v1010 && !a5 || a5 && v1010 != 1 && a6)
              {
                float v10 = vt_Copy_RGfA_TRC_Mat_TRC_444vf;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v1011 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v1011 >= 2;
                CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Mat_TRC_444vf_neon_fp16;
                float v10 = vt_Copy_RGfA_TRC_Mat_TRC_444vf;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_RGfA_rgb_444vf;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v1123 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v1123 >= 2;
                CFAllocatorRef v30 = vt_Copy_RGfA_rgb_444vf_neon_fp16;
                float v10 = vt_Copy_RGfA_rgb_444vf;
                goto LABEL_7028;
              }
              goto LABEL_7021;
            }
            int v151 = 875836534;
LABEL_4405:
            if (a2 != v151) {
              goto LABEL_7023;
            }
            goto LABEL_4406;
          }
LABEL_4646:
          if (a3) {
            BOOL v713 = a4 == 0;
          }
          else {
            BOOL v713 = 1;
          }
          int v714 = !v713;
          if (!v713 && a5 && a6) {
            goto LABEL_4659;
          }
          if (a5) {
            int v714 = 0;
          }
          if (v714 == 1 && a6)
          {
LABEL_4659:
            float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v715 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v715 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf_neon_fp16;
            float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_422vf;
            goto LABEL_7028;
          }
          if (a3) {
            BOOL v1074 = a4 == 0;
          }
          else {
            BOOL v1074 = 0;
          }
          int v1075 = !v1074;
          if (a6 && !v1075 && !a5 || a5 && v1075 != 1 && a6)
          {
            float v10 = vt_Copy_RGfA_TRC_Mat_TRC_422vf;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1076 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1076 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Mat_TRC_422vf_neon_fp16;
            float v10 = vt_Copy_RGfA_TRC_Mat_TRC_422vf;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_RGfA_rgb_422vf;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1137 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1137 >= 2;
            CFAllocatorRef v30 = vt_Copy_RGfA_rgb_422vf_neon_fp16;
            float v10 = vt_Copy_RGfA_rgb_422vf;
            goto LABEL_7028;
          }
          goto LABEL_7021;
        }
        if (a2 > 1278226735)
        {
          if (a2 == 1278226736) {
            goto LABEL_5628;
          }
          int v505 = 1278226738;
          goto LABEL_5627;
        }
        if (a2 != 1111970369)
        {
          int v151 = 1278226488;
          goto LABEL_4405;
        }
LABEL_5093:
        if (a3) {
          BOOL v781 = a4 == 0;
        }
        else {
          BOOL v781 = 1;
        }
        int v782 = !v781;
        if (!v781 && a5 && a6) {
          goto LABEL_5106;
        }
        if (a5) {
          int v782 = 0;
        }
        if (v782 == 1 && a6)
        {
LABEL_5106:
          float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v783 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v783 >= 2;
          CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA_neon_fp16;
          float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_BGRA;
          goto LABEL_7028;
        }
        if (a3) {
          BOOL v1084 = a4 == 0;
        }
        else {
          BOOL v1084 = 0;
        }
        int v1085 = !v1084;
        if (a6 && !v1085 && !a5 || a5 && v1085 != 1 && a6)
        {
          float v10 = vt_Copy_RGfA_TRC_Mat_TRC_BGRA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v1086 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v1086 >= 2;
          CFAllocatorRef v30 = vt_Copy_RGfA_TRC_Mat_TRC_BGRA_neon_fp16;
          float v10 = vt_Copy_RGfA_TRC_Mat_TRC_BGRA;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_RGfA_rgb_BGRA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v1139 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v1139 >= 2;
          CFAllocatorRef v30 = vt_Copy_RGfA_rgb_BGRA_neon_fp16;
          float v10 = vt_Copy_RGfA_rgb_BGRA;
          goto LABEL_7028;
        }
        goto LABEL_7021;
      }
      if (a2 > 875704421)
      {
        if (a2 != 875704422 && a2 != 875704438)
        {
          if (a2 != 875704934) {
            goto LABEL_7023;
          }
          goto LABEL_4646;
        }
        goto LABEL_5720;
      }
      if (a2 == 32) {
        goto LABEL_5093;
      }
      if (a2 != 846624102 && a2 != 846624121) {
        goto LABEL_7023;
      }
    }
    if (a3) {
      BOOL v798 = a4 == 0;
    }
    else {
      BOOL v798 = 1;
    }
    int v799 = !v798;
    float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_2vuyf;
    if (!v798 && a5 && a6) {
      goto LABEL_7022;
    }
    if (a5) {
      int v799 = 0;
    }
    float v10 = vt_Copy_RGfA_TRC_Tone_Mat_TRC_2vuyf;
    if (v799 == 1)
    {
      if (a6) {
        goto LABEL_7022;
      }
    }
    BOOL v800 = a3 && a4 == 0;
    BOOL v801 = !v800;
    float v10 = vt_Copy_RGfA_TRC_Mat_TRC_2vuyf;
    if (a6)
    {
      if (!v801 && !a5) {
        goto LABEL_7022;
      }
    }
    float v10 = vt_Copy_RGfA_TRC_Mat_TRC_2vuyf;
    if (a5)
    {
      if (!v801 && a6) {
        goto LABEL_7022;
      }
    }
    uint64_t result = 0;
    BOOL v50 = (a4 | a3 | a5 | a6) == 0;
    float v10 = vt_Copy_RGfA_rgb_2vuyf;
    goto LABEL_6592;
  }
  if (a1 > 1982882103)
  {
    if (a1 > 2016686641)
    {
      if (a1 <= 2019963439)
      {
        if (a1 != 2016686642)
        {
          if (a1 == 2016687156) {
            goto LABEL_82;
          }
          int v14 = 2016698739;
          goto LABEL_81;
        }
        goto LABEL_90;
      }
      if (a1 == 2019963440) {
        goto LABEL_98;
      }
      if (a1 == 2019963442) {
        goto LABEL_90;
      }
      int v14 = 2019963956;
      goto LABEL_81;
    }
    if (a1 <= 1999843441)
    {
      if (a1 != 1982882104)
      {
        if (a1 != 1983013176)
        {
          int v13 = 1983144248;
          goto LABEL_54;
        }
LABEL_128:
        float v10 = 0;
        if (a2 > 1937125937)
        {
          if (a2 > 1983013175)
          {
            if (a2 > 2016687155)
            {
              if (a2 > 2019963441)
              {
                if (a2 > 2037741157)
                {
                  if (a2 == 2037741158 || a2 == 2037741171)
                  {
                    if (a3) {
                      BOOL v512 = a4 == 0;
                    }
                    else {
                      BOOL v512 = 1;
                    }
                    int v513 = !v512;
                    float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_yuvsf;
                    if (!v512 && a5 && a6) {
                      goto LABEL_7022;
                    }
                    if (a5) {
                      int v513 = 0;
                    }
                    float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_yuvsf;
                    if (v513 == 1)
                    {
                      if (a6) {
                        goto LABEL_7022;
                      }
                    }
                    BOOL v514 = a3 && a4 == 0;
                    BOOL v515 = !v514;
                    float v10 = vt_Copy_422vf_TRC_Mat_TRC_yuvsf;
                    if (a6)
                    {
                      if (!v515 && !a5) {
                        goto LABEL_7022;
                      }
                    }
                    float v10 = vt_Copy_422vf_TRC_Mat_TRC_yuvsf;
                    if (a5)
                    {
                      if (!v515 && a6) {
                        goto LABEL_7022;
                      }
                    }
                    uint64_t result = 0;
                    BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                    float v10 = vt_Copy_422vf_rgb_yuvsf;
                    goto LABEL_6592;
                  }
                  goto LABEL_7023;
                }
                if (a2 != 2019963442)
                {
                  if (a2 != 2019963956) {
                    goto LABEL_7023;
                  }
                  goto LABEL_2400;
                }
LABEL_2261:
                if (a3) {
                  BOOL v328 = a4 == 0;
                }
                else {
                  BOOL v328 = 1;
                }
                int v329 = !v328;
                if (!v328 && a5 && a6) {
                  goto LABEL_2274;
                }
                if (a5) {
                  int v329 = 0;
                }
                if (v329 == 1 && a6)
                {
LABEL_2274:
                  float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v330 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v330 >= 2;
                  CFAllocatorRef v30 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422_neon_fp16;
                  float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422;
                  goto LABEL_7028;
                }
                if (a3) {
                  BOOL v616 = a4 == 0;
                }
                else {
                  BOOL v616 = 0;
                }
                int v617 = !v616;
                if (a6 && !v617 && !a5 || a5 && v617 != 1 && a6)
                {
                  float v10 = vt_Copy_422vf_TRC_Mat_TRC_xf422;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v618 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v618 >= 2;
                  CFAllocatorRef v30 = vt_Copy_422vf_TRC_Mat_TRC_xf422_neon_fp16;
                  float v10 = vt_Copy_422vf_TRC_Mat_TRC_xf422;
                  goto LABEL_7028;
                }
                if (!(a4 | a3 | a5 | a6))
                {
                  float v10 = vt_Copy_422vf_rgb_xf422;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v982 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v982 >= 2;
                  CFAllocatorRef v30 = vt_Copy_422vf_rgb_xf422_neon_fp16;
                  float v10 = vt_Copy_422vf_rgb_xf422;
                  goto LABEL_7028;
                }
                goto LABEL_6889;
              }
              if (a2 != 2016687156 && a2 != 2016698739)
              {
                if (a2 != 2019963440) {
                  goto LABEL_7023;
                }
                goto LABEL_2276;
              }
LABEL_2400:
              if (a3) {
                BOOL v351 = a4 == 0;
              }
              else {
                BOOL v351 = 1;
              }
              int v352 = !v351;
              if (!v351 && a5 && a6) {
                goto LABEL_2413;
              }
              if (a5) {
                int v352 = 0;
              }
              if (v352 == 1 && a6)
              {
LABEL_2413:
                float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v353 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v353 >= 2;
                CFAllocatorRef v30 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444_neon_fp16;
                float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444;
                goto LABEL_7028;
              }
              if (a3) {
                BOOL v622 = a4 == 0;
              }
              else {
                BOOL v622 = 0;
              }
              int v623 = !v622;
              if (a6 && !v623 && !a5 || a5 && v623 != 1 && a6)
              {
                float v10 = vt_Copy_422vf_TRC_Mat_TRC_xf444;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v624 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v624 >= 2;
                CFAllocatorRef v30 = vt_Copy_422vf_TRC_Mat_TRC_xf444_neon_fp16;
                float v10 = vt_Copy_422vf_TRC_Mat_TRC_xf444;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_422vf_rgb_xf444;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v984 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v984 >= 2;
                CFAllocatorRef v30 = vt_Copy_422vf_rgb_xf444_neon_fp16;
                float v10 = vt_Copy_422vf_rgb_xf444;
                goto LABEL_7028;
              }
              goto LABEL_6889;
            }
            if (a2 <= 2016567666)
            {
              if (a2 != 1983013176)
              {
                if (a2 != 1983144248)
                {
                  int v64 = 1999843442;
LABEL_1157:
                  if (a2 != v64) {
                    goto LABEL_7023;
                  }
LABEL_2719:
                  if (a3) {
                    BOOL v406 = a4 == 0;
                  }
                  else {
                    BOOL v406 = 1;
                  }
                  int v407 = !v406;
                  float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_l10r;
                  if (!v406 && a5 && a6) {
                    goto LABEL_7022;
                  }
                  if (a5) {
                    int v407 = 0;
                  }
                  float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_l10r;
                  if (v407 == 1)
                  {
                    if (a6) {
                      goto LABEL_7022;
                    }
                  }
                  BOOL v408 = a3 && a4 == 0;
                  BOOL v409 = !v408;
                  float v10 = vt_Copy_422vf_TRC_Mat_TRC_l10r;
                  if (a6)
                  {
                    if (!v409 && !a5) {
                      goto LABEL_7022;
                    }
                  }
                  float v10 = vt_Copy_422vf_TRC_Mat_TRC_l10r;
                  if (a5)
                  {
                    if (!v409 && a6) {
                      goto LABEL_7022;
                    }
                  }
                  uint64_t result = 0;
                  BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                  float v10 = vt_Copy_422vf_rgb_l10r;
                  goto LABEL_6592;
                }
LABEL_1203:
                if (a3) {
                  BOOL v170 = a4 == 0;
                }
                else {
                  BOOL v170 = 1;
                }
                int v171 = !v170;
                if (!v170 && a5 && a6) {
                  goto LABEL_1216;
                }
                if (a5) {
                  int v171 = 0;
                }
                if (v171 == 1 && a6)
                {
LABEL_1216:
                  float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v172 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v172 >= 2;
                  CFAllocatorRef v30 = vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf_neon_fp16;
                  float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_444vf;
                  goto LABEL_7028;
                }
                if (a3) {
                  BOOL v816 = a4 == 0;
                }
                else {
                  BOOL v816 = 0;
                }
                int v817 = !v816;
                if (a6 && !v817 && !a5 || a5 && v817 != 1 && a6)
                {
                  float v10 = vt_Copy_422vf_TRC_Mat_TRC_444vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v818 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v818 >= 2;
                  CFAllocatorRef v30 = vt_Copy_422vf_TRC_Mat_TRC_444vf_neon_fp16;
                  float v10 = vt_Copy_422vf_TRC_Mat_TRC_444vf;
                  goto LABEL_7028;
                }
                if (!(a4 | a3 | a5 | a6))
                {
                  float v10 = vt_Copy_422vf_rgb_444vf;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v1099 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v1099 >= 2;
                  CFAllocatorRef v30 = vt_Copy_422vf_rgb_444vf_neon_fp16;
                  float v10 = vt_Copy_422vf_rgb_444vf;
                  goto LABEL_7028;
                }
                goto LABEL_6889;
              }
              goto LABEL_2144;
            }
            if (a2 == 2016567667) {
              goto LABEL_2261;
            }
            if (a2 != 2016686640)
            {
              int v45 = 2016686642;
LABEL_2260:
              if (a2 != v45) {
                goto LABEL_7023;
              }
              goto LABEL_2261;
            }
            goto LABEL_2276;
          }
          if (a2 <= 1952855091)
          {
            if (a2 > 1949589874)
            {
              if (a2 == 1949589875) {
                goto LABEL_2400;
              }
              if (a2 != 1952854576)
              {
                int v45 = 1952854578;
                goto LABEL_2260;
              }
LABEL_2276:
              if (a3) {
                BOOL v331 = a4 == 0;
              }
              else {
                BOOL v331 = 1;
              }
              int v332 = !v331;
              if (!v331 && a5 && a6) {
                goto LABEL_2289;
              }
              if (a5) {
                int v332 = 0;
              }
              if (v332 == 1 && a6)
              {
LABEL_2289:
                float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v333 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v333 >= 2;
                CFAllocatorRef v30 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420_neon_fp16;
                float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420;
                goto LABEL_7028;
              }
              if (a3) {
                BOOL v676 = a4 == 0;
              }
              else {
                BOOL v676 = 0;
              }
              int v677 = !v676;
              if (a6 && !v677 && !a5 || a5 && v677 != 1 && a6)
              {
                float v10 = vt_Copy_422vf_TRC_Mat_TRC_xf420;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v678 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v678 >= 2;
                CFAllocatorRef v30 = vt_Copy_422vf_TRC_Mat_TRC_xf420_neon_fp16;
                float v10 = vt_Copy_422vf_TRC_Mat_TRC_xf420;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_422vf_rgb_xf420;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v1070 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v1070 >= 2;
                CFAllocatorRef v30 = vt_Copy_422vf_rgb_xf420_neon_fp16;
                float v10 = vt_Copy_422vf_rgb_xf420;
                goto LABEL_7028;
              }
              goto LABEL_6889;
            }
            if (a2 != 1937125938)
            {
              if (a2 != 1937126452)
              {
                int v45 = 1949458803;
                goto LABEL_2260;
              }
LABEL_2883:
              if (a3) {
                BOOL v434 = a4 == 0;
              }
              else {
                BOOL v434 = 1;
              }
              int v435 = !v434;
              float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444;
              if (!v434 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v435 = 0;
              }
              float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf444;
              if (v435 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v436 = a3 && a4 == 0;
              BOOL v437 = !v436;
              float v10 = vt_Copy_422vf_TRC_Mat_TRC_xf444;
              if (a6)
              {
                if (!v437 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_422vf_TRC_Mat_TRC_xf444;
              if (a5)
              {
                if (!v437 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_422vf_rgb_xf444;
              goto LABEL_6592;
            }
LABEL_2857:
            if (a3) {
              BOOL v430 = a4 == 0;
            }
            else {
              BOOL v430 = 1;
            }
            int v431 = !v430;
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422;
            if (!v430 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v431 = 0;
            }
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf422;
            if (v431 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v432 = a3 && a4 == 0;
            BOOL v433 = !v432;
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_xf422;
            if (a6)
            {
              if (!v433 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_xf422;
            if (a5)
            {
              if (!v433 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_422vf_rgb_xf422;
            goto LABEL_6592;
          }
          if (a2 <= 1953903667)
          {
            if (a2 == 1952855092) {
              goto LABEL_2400;
            }
            if (a2 != 1953903152)
            {
              int v45 = 1953903154;
              goto LABEL_2260;
            }
            goto LABEL_2276;
          }
          if (a2 == 1953903668) {
            goto LABEL_2400;
          }
          if (a2 != 1982882104)
          {
            if (a2 != 1983000886) {
              goto LABEL_7023;
            }
            if (a3) {
              BOOL v347 = a4 == 0;
            }
            else {
              BOOL v347 = 1;
            }
            int v348 = !v347;
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_v216;
            if (!v347 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v348 = 0;
            }
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_v216;
            if (v348 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v349 = a3 && a4 == 0;
            BOOL v350 = !v349;
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_v216;
            if (a6)
            {
              if (!v350 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_v216;
            if (a5)
            {
              if (!v350 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_422vf_rgb_v216;
            goto LABEL_6592;
          }
LABEL_2790:
          if (a3) {
            BOOL v419 = a4 == 0;
          }
          else {
            BOOL v419 = 1;
          }
          int v420 = !v419;
          if (!v419 && a5 && a6) {
            goto LABEL_2803;
          }
          if (a5) {
            int v420 = 0;
          }
          if (v420 == 1 && a6)
          {
LABEL_2803:
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v421 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v421 >= 2;
            CFAllocatorRef v30 = vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf_neon_fp16;
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_420vf;
            goto LABEL_7028;
          }
          if (a3) {
            BOOL v846 = a4 == 0;
          }
          else {
            BOOL v846 = 0;
          }
          int v847 = !v846;
          if (a6 && !v847 && !a5 || a5 && v847 != 1 && a6)
          {
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_420vf;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v848 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v848 >= 2;
            CFAllocatorRef v30 = vt_Copy_422vf_TRC_Mat_TRC_420vf_neon_fp16;
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_420vf;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_422vf_rgb_420vf;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1106 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1106 >= 2;
            CFAllocatorRef v30 = vt_Copy_422vf_rgb_420vf_neon_fp16;
            float v10 = vt_Copy_422vf_rgb_420vf;
            goto LABEL_7028;
          }
          goto LABEL_6889;
        }
        if (a2 <= 1380411456)
        {
          if (a2 > 875704949)
          {
            if (a2 <= 1111970368)
            {
              if (a2 != 875704950)
              {
                if (a2 != 875836518 && a2 != 875836534) {
                  goto LABEL_7023;
                }
                goto LABEL_1203;
              }
LABEL_2144:
              if (a3) {
                BOOL v311 = a4 == 0;
              }
              else {
                BOOL v311 = 1;
              }
              int v312 = !v311;
              if (!v311 && a5 && a6) {
                goto LABEL_2157;
              }
              if (a5) {
                int v312 = 0;
              }
              if (v312 == 1 && a6)
              {
LABEL_2157:
                float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v313 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v313 >= 2;
                CFAllocatorRef v30 = vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf_neon_fp16;
                float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_422vf;
                goto LABEL_7028;
              }
              if (a3) {
                BOOL v822 = a4 == 0;
              }
              else {
                BOOL v822 = 0;
              }
              int v823 = !v822;
              if (a6 && !v823 && !a5 || a5 && v823 != 1 && a6)
              {
                float v10 = vt_Copy_422vf_TRC_Mat_TRC_422vf;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v824 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v824 >= 2;
                CFAllocatorRef v30 = vt_Copy_422vf_TRC_Mat_TRC_422vf_neon_fp16;
                float v10 = vt_Copy_422vf_TRC_Mat_TRC_422vf;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_422vf_rgb_422vf;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v1101 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v1101 >= 2;
                CFAllocatorRef v30 = vt_Copy_422vf_rgb_422vf_neon_fp16;
                float v10 = vt_Copy_422vf_rgb_422vf;
                goto LABEL_7028;
              }
              goto LABEL_6889;
            }
            if (a2 != 1111970369 && a2 != 1380401729)
            {
              if (a2 != 1380410945) {
                goto LABEL_7023;
              }
              if (a3) {
                BOOL v337 = a4 == 0;
              }
              else {
                BOOL v337 = 1;
              }
              int v338 = !v337;
              if (!v337 && a5 && a6) {
                goto LABEL_2325;
              }
              if (a5) {
                int v338 = 0;
              }
              if (v338 == 1 && a6)
              {
LABEL_2325:
                float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v339 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v339 >= 2;
                CFAllocatorRef v30 = vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA_neon_fp16;
                float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_RGfA;
                goto LABEL_7028;
              }
              if (a3) {
                BOOL v1054 = a4 == 0;
              }
              else {
                BOOL v1054 = 0;
              }
              int v1055 = !v1054;
              if (a6 && !v1055 && !a5 || a5 && v1055 != 1 && a6)
              {
                float v10 = vt_Copy_422vf_TRC_Mat_TRC_RGfA;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v1056 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v1056 >= 2;
                CFAllocatorRef v30 = vt_Copy_422vf_TRC_Mat_TRC_RGfA_neon_fp16;
                float v10 = vt_Copy_422vf_TRC_Mat_TRC_RGfA;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_422vf_rgb_RGfA;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v1134 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v1134 >= 2;
                CFAllocatorRef v30 = vt_Copy_422vf_rgb_RGfA_neon_fp16;
                float v10 = vt_Copy_422vf_rgb_RGfA;
                goto LABEL_7028;
              }
              goto LABEL_6979;
            }
          }
          else
          {
            if (a2 > 875704421)
            {
              if (a2 != 875704422 && a2 != 875704438)
              {
                if (a2 != 875704934) {
                  goto LABEL_7023;
                }
                goto LABEL_2144;
              }
              goto LABEL_2790;
            }
            if (a2 != 32)
            {
              if (a2 != 846624102 && a2 != 846624121) {
                goto LABEL_7023;
              }
              goto LABEL_2570;
            }
          }
          if (a3) {
            BOOL v413 = a4 == 0;
          }
          else {
            BOOL v413 = 1;
          }
          int v414 = !v413;
          if (!v413 && a5 && a6) {
            goto LABEL_2773;
          }
          if (a5) {
            int v414 = 0;
          }
          if (v414 == 1 && a6)
          {
LABEL_2773:
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v415 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v415 >= 2;
            CFAllocatorRef v30 = vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA_neon_fp16;
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_BGRA;
            goto LABEL_7028;
          }
          if (a3) {
            BOOL v840 = a4 == 0;
          }
          else {
            BOOL v840 = 0;
          }
          int v841 = !v840;
          if (a6 && !v841 && !a5 || a5 && v841 != 1 && a6)
          {
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_BGRA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v842 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v842 >= 2;
            CFAllocatorRef v30 = vt_Copy_422vf_TRC_Mat_TRC_BGRA_neon_fp16;
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_BGRA;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_422vf_rgb_BGRA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1104 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1104 >= 2;
            CFAllocatorRef v30 = vt_Copy_422vf_rgb_BGRA_neon_fp16;
            float v10 = vt_Copy_422vf_rgb_BGRA;
            goto LABEL_7028;
          }
          goto LABEL_6979;
        }
        if (a2 > 1932681586)
        {
          if (a2 > 1936077361)
          {
            if (a2 == 1936077362) {
              goto LABEL_2857;
            }
            if (a2 == 1936077876) {
              goto LABEL_2883;
            }
            int v194 = 1937125936;
          }
          else
          {
            if (a2 == 1932681587) {
              goto LABEL_2857;
            }
            if (a2 == 1932812659) {
              goto LABEL_2883;
            }
            int v194 = 1936077360;
          }
          if (a2 != v194) {
            goto LABEL_7023;
          }
          if (a3) {
            BOOL v358 = a4 == 0;
          }
          else {
            BOOL v358 = 1;
          }
          int v359 = !v358;
          float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420;
          if (!v358 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v359 = 0;
          }
          float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_xf420;
          if (v359 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v360 = a3 && a4 == 0;
          BOOL v361 = !v360;
          float v10 = vt_Copy_422vf_TRC_Mat_TRC_xf420;
          if (a6)
          {
            if (!v361 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_422vf_TRC_Mat_TRC_xf420;
          if (a5)
          {
            if (!v361 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_422vf_rgb_xf420;
          goto LABEL_6592;
        }
        if (a2 > 1647719520)
        {
          if (a2 == 1647719521)
          {
            if (a3) {
              BOOL v669 = a4 == 0;
            }
            else {
              BOOL v669 = 1;
            }
            int v670 = !v669;
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_b64a;
            if (!v669 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v670 = 0;
            }
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_b64a;
            if (v670 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v671 = a3 && a4 == 0;
            BOOL v672 = !v671;
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_b64a;
            if (a6)
            {
              if (!v672 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_b64a;
            if (a5)
            {
              if (!v672 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_422vf_rgb_b64a;
            goto LABEL_6592;
          }
          if (a2 != 1815162994)
          {
            if (a2 != 1815491698) {
              goto LABEL_7023;
            }
            if (a3) {
              BOOL v318 = a4 == 0;
            }
            else {
              BOOL v318 = 1;
            }
            int v319 = !v318;
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_l64r;
            if (!v318 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v319 = 0;
            }
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_l64r;
            if (v319 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v320 = a3 && a4 == 0;
            BOOL v321 = !v320;
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_l64r;
            if (a6)
            {
              if (!v321 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_l64r;
            if (a5)
            {
              if (!v321 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_422vf_rgb_l64r;
            goto LABEL_6592;
          }
          goto LABEL_2719;
        }
        if (a2 == 1380411457)
        {
          if (a3) {
            BOOL v646 = a4 == 0;
          }
          else {
            BOOL v646 = 1;
          }
          int v647 = !v646;
          if (!v646 && a5 && a6) {
            goto LABEL_4205;
          }
          if (a5) {
            int v647 = 0;
          }
          if (v647 == 1 && a6)
          {
LABEL_4205:
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v648 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v648 >= 2;
            CFAllocatorRef v30 = vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA_neon_fp16;
            float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_RGhA;
            goto LABEL_7028;
          }
          if (a3) {
            BOOL v1061 = a4 == 0;
          }
          else {
            BOOL v1061 = 0;
          }
          int v1062 = !v1061;
          if (a6 && !v1062 && !a5 || a5 && v1062 != 1 && a6)
          {
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_RGhA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1063 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1063 >= 2;
            CFAllocatorRef v30 = vt_Copy_422vf_TRC_Mat_TRC_RGhA_neon_fp16;
            float v10 = vt_Copy_422vf_TRC_Mat_TRC_RGhA;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_422vf_rgb_RGhA;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v1145 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v1145 >= 2;
            CFAllocatorRef v30 = vt_Copy_422vf_rgb_RGhA_neon_fp16;
            float v10 = vt_Copy_422vf_rgb_RGhA;
            goto LABEL_7028;
          }
          goto LABEL_6979;
        }
        if (a2 != 1630697081)
        {
          int v64 = 1647534392;
          goto LABEL_1157;
        }
LABEL_2570:
        if (a3) {
          BOOL v379 = a4 == 0;
        }
        else {
          BOOL v379 = 1;
        }
        int v380 = !v379;
        float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_2vuyf;
        if (!v379 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v380 = 0;
        }
        float v10 = vt_Copy_422vf_TRC_Tone_Mat_TRC_2vuyf;
        if (v380 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v381 = a3 && a4 == 0;
        BOOL v382 = !v381;
        float v10 = vt_Copy_422vf_TRC_Mat_TRC_2vuyf;
        if (a6)
        {
          if (!v382 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_422vf_TRC_Mat_TRC_2vuyf;
        if (a5)
        {
          if (!v382 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_422vf_rgb_2vuyf;
        goto LABEL_6592;
      }
LABEL_120:
      float v10 = 0;
      if (a2 > 1937125937)
      {
        if (a2 > 1983013175)
        {
          if (a2 > 2016687155)
          {
            if (a2 > 2019963441)
            {
              if (a2 > 2037741157)
              {
                if (a2 == 2037741158 || a2 == 2037741171)
                {
                  if (a3) {
                    BOOL v508 = a4 == 0;
                  }
                  else {
                    BOOL v508 = 1;
                  }
                  int v509 = !v508;
                  float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_yuvsf;
                  if (!v508 && a5 && a6) {
                    goto LABEL_7022;
                  }
                  if (a5) {
                    int v509 = 0;
                  }
                  float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_yuvsf;
                  if (v509 == 1)
                  {
                    if (a6) {
                      goto LABEL_7022;
                    }
                  }
                  BOOL v510 = a3 && a4 == 0;
                  BOOL v511 = !v510;
                  float v10 = vt_Copy_420vf_TRC_Mat_TRC_yuvsf;
                  if (a6)
                  {
                    if (!v511 && !a5) {
                      goto LABEL_7022;
                    }
                  }
                  float v10 = vt_Copy_420vf_TRC_Mat_TRC_yuvsf;
                  if (a5)
                  {
                    if (!v511 && a6) {
                      goto LABEL_7022;
                    }
                  }
                  uint64_t result = 0;
                  BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                  float v10 = vt_Copy_420vf_rgb_yuvsf;
                  goto LABEL_6592;
                }
                goto LABEL_7023;
              }
              if (a2 != 2019963442)
              {
                if (a2 != 2019963956) {
                  goto LABEL_7023;
                }
LABEL_2356:
                if (a3) {
                  BOOL v344 = a4 == 0;
                }
                else {
                  BOOL v344 = 1;
                }
                int v345 = !v344;
                if (!v344 && a5 && a6) {
                  goto LABEL_2369;
                }
                if (a5) {
                  int v345 = 0;
                }
                if (v345 == 1 && a6)
                {
LABEL_2369:
                  float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v346 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v346 >= 2;
                  CFAllocatorRef v30 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444_neon_fp16;
                  float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444;
                  goto LABEL_7028;
                }
                if (a3) {
                  BOOL v619 = a4 == 0;
                }
                else {
                  BOOL v619 = 0;
                }
                int v620 = !v619;
                if (a6 && !v620 && !a5 || a5 && v620 != 1 && a6)
                {
                  float v10 = vt_Copy_420vf_TRC_Mat_TRC_xf444;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v621 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v621 >= 2;
                  CFAllocatorRef v30 = vt_Copy_420vf_TRC_Mat_TRC_xf444_neon_fp16;
                  float v10 = vt_Copy_420vf_TRC_Mat_TRC_xf444;
                  goto LABEL_7028;
                }
                if (!(a4 | a3 | a5 | a6))
                {
                  float v10 = vt_Copy_420vf_rgb_xf444;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v983 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v983 >= 2;
                  CFAllocatorRef v30 = vt_Copy_420vf_rgb_xf444_neon_fp16;
                  float v10 = vt_Copy_420vf_rgb_xf444;
                  goto LABEL_7028;
                }
                goto LABEL_6979;
              }
LABEL_2227:
              if (a3) {
                BOOL v322 = a4 == 0;
              }
              else {
                BOOL v322 = 1;
              }
              int v323 = !v322;
              if (!v322 && a5 && a6) {
                goto LABEL_2240;
              }
              if (a5) {
                int v323 = 0;
              }
              if (v323 == 1 && a6)
              {
LABEL_2240:
                float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v324 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v324 >= 2;
                CFAllocatorRef v30 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422_neon_fp16;
                float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422;
                goto LABEL_7028;
              }
              if (a3) {
                BOOL v613 = a4 == 0;
              }
              else {
                BOOL v613 = 0;
              }
              int v614 = !v613;
              if (a6 && !v614 && !a5 || a5 && v614 != 1 && a6)
              {
                float v10 = vt_Copy_420vf_TRC_Mat_TRC_xf422;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v615 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v615 >= 2;
                CFAllocatorRef v30 = vt_Copy_420vf_TRC_Mat_TRC_xf422_neon_fp16;
                float v10 = vt_Copy_420vf_TRC_Mat_TRC_xf422;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_420vf_rgb_xf422;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v981 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v981 >= 2;
                CFAllocatorRef v30 = vt_Copy_420vf_rgb_xf422_neon_fp16;
                float v10 = vt_Copy_420vf_rgb_xf422;
                goto LABEL_7028;
              }
              goto LABEL_6979;
            }
            if (a2 == 2016687156 || a2 == 2016698739) {
              goto LABEL_2356;
            }
            if (a2 != 2019963440) {
              goto LABEL_7023;
            }
LABEL_2242:
            if (a3) {
              BOOL v325 = a4 == 0;
            }
            else {
              BOOL v325 = 1;
            }
            int v326 = !v325;
            if (!v325 && a5 && a6) {
              goto LABEL_2255;
            }
            if (a5) {
              int v326 = 0;
            }
            if (v326 == 1 && a6)
            {
LABEL_2255:
              float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v327 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v327 >= 2;
              CFAllocatorRef v30 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420_neon_fp16;
              float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v673 = a4 == 0;
            }
            else {
              BOOL v673 = 0;
            }
            int v674 = !v673;
            if (a6 && !v674 && !a5 || a5 && v674 != 1 && a6)
            {
              float v10 = vt_Copy_420vf_TRC_Mat_TRC_xf420;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v675 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v675 >= 2;
              CFAllocatorRef v30 = vt_Copy_420vf_TRC_Mat_TRC_xf420_neon_fp16;
              float v10 = vt_Copy_420vf_TRC_Mat_TRC_xf420;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_420vf_rgb_xf420;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1069 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1069 >= 2;
              CFAllocatorRef v30 = vt_Copy_420vf_rgb_xf420_neon_fp16;
              float v10 = vt_Copy_420vf_rgb_xf420;
              goto LABEL_7028;
            }
            goto LABEL_6979;
          }
          if (a2 <= 2016567666)
          {
            if (a2 != 1983013176)
            {
              if (a2 != 1983144248)
              {
                int v63 = 1999843442;
LABEL_1151:
                if (a2 != v63) {
                  goto LABEL_7023;
                }
LABEL_2693:
                if (a3) {
                  BOOL v402 = a4 == 0;
                }
                else {
                  BOOL v402 = 1;
                }
                int v403 = !v402;
                float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_l10r;
                if (!v402 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v403 = 0;
                }
                float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_l10r;
                if (v403 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v404 = a3 && a4 == 0;
                BOOL v405 = !v404;
                float v10 = vt_Copy_420vf_TRC_Mat_TRC_l10r;
                if (a6)
                {
                  if (!v405 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_420vf_TRC_Mat_TRC_l10r;
                if (a5)
                {
                  if (!v405 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_420vf_rgb_l10r;
                goto LABEL_6592;
              }
LABEL_1184:
              if (a3) {
                BOOL v167 = a4 == 0;
              }
              else {
                BOOL v167 = 1;
              }
              int v168 = !v167;
              if (v167 || !a5 || !a6)
              {
                if (a5) {
                  int v168 = 0;
                }
                if (v168 != 1 || !a6)
                {
                  if (a3) {
                    BOOL v813 = a4 == 0;
                  }
                  else {
                    BOOL v813 = 0;
                  }
                  int v814 = !v813;
                  if (a6 && !v814 && !a5 || a5 && v814 != 1 && a6)
                  {
                    float v10 = vt_Copy_420vf_TRC_Mat_TRC_444vf;
                    if (a7) {
                      goto LABEL_7022;
                    }
                    unsigned int v815 = getVectorCapabilities();
                    uint64_t result = 0;
                    BOOL v29 = v815 >= 2;
                    CFAllocatorRef v30 = vt_Copy_420vf_TRC_Mat_TRC_444vf_neon_fp16;
                    float v10 = vt_Copy_420vf_TRC_Mat_TRC_444vf;
                    goto LABEL_7028;
                  }
                  if (!(a4 | a3 | a5 | a6))
                  {
                    float v10 = vt_Copy_420vf_rgb_444vf;
                    if (a7) {
                      goto LABEL_7022;
                    }
                    unsigned int v1098 = getVectorCapabilities();
                    uint64_t result = 0;
                    BOOL v29 = v1098 >= 2;
                    CFAllocatorRef v30 = vt_Copy_420vf_rgb_444vf_neon_fp16;
                    float v10 = vt_Copy_420vf_rgb_444vf;
                    goto LABEL_7028;
                  }
                  goto LABEL_6979;
                }
              }
              float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v169 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v169 >= 2;
              CFAllocatorRef v30 = vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf_neon_fp16;
              float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf;
              goto LABEL_7028;
            }
            goto LABEL_2126;
          }
          if (a2 == 2016567667) {
            goto LABEL_2227;
          }
          if (a2 == 2016686640) {
            goto LABEL_2242;
          }
          int v44 = 2016686642;
LABEL_2226:
          if (a2 != v44) {
            goto LABEL_7023;
          }
          goto LABEL_2227;
        }
        if (a2 <= 1952855091)
        {
          if (a2 > 1949589874)
          {
            if (a2 == 1949589875) {
              goto LABEL_2356;
            }
            if (a2 == 1952854576) {
              goto LABEL_2242;
            }
            int v44 = 1952854578;
            goto LABEL_2226;
          }
          if (a2 != 1937125938)
          {
            if (a2 != 1937126452)
            {
              int v44 = 1949458803;
              goto LABEL_2226;
            }
LABEL_2831:
            if (a3) {
              BOOL v426 = a4 == 0;
            }
            else {
              BOOL v426 = 1;
            }
            int v427 = !v426;
            float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444;
            if (!v426 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v427 = 0;
            }
            float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444;
            if (v427 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v428 = a3 && a4 == 0;
            BOOL v429 = !v428;
            float v10 = vt_Copy_420vf_TRC_Mat_TRC_xf444;
            if (a6)
            {
              if (!v429 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_420vf_TRC_Mat_TRC_xf444;
            if (a5)
            {
              if (!v429 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_420vf_rgb_xf444;
            goto LABEL_6592;
          }
LABEL_2805:
          if (a3) {
            BOOL v422 = a4 == 0;
          }
          else {
            BOOL v422 = 1;
          }
          int v423 = !v422;
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422;
          if (!v422 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v423 = 0;
          }
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422;
          if (v423 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v424 = a3 && a4 == 0;
          BOOL v425 = !v424;
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_xf422;
          if (a6)
          {
            if (!v425 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_xf422;
          if (a5)
          {
            if (!v425 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_420vf_rgb_xf422;
          goto LABEL_6592;
        }
        if (a2 <= 1953903667)
        {
          if (a2 == 1952855092) {
            goto LABEL_2356;
          }
          if (a2 == 1953903152) {
            goto LABEL_2242;
          }
          int v44 = 1953903154;
          goto LABEL_2226;
        }
        if (a2 == 1953903668) {
          goto LABEL_2356;
        }
        if (a2 != 1982882104)
        {
          if (a2 != 1983000886) {
            goto LABEL_7023;
          }
          if (a3) {
            BOOL v340 = a4 == 0;
          }
          else {
            BOOL v340 = 1;
          }
          int v341 = !v340;
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_v216;
          if (!v340 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v341 = 0;
          }
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_v216;
          if (v341 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v342 = a3 && a4 == 0;
          BOOL v343 = !v342;
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_v216;
          if (a6)
          {
            if (!v343 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_v216;
          if (a5)
          {
            if (!v343 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_420vf_rgb_v216;
          goto LABEL_6592;
        }
LABEL_2775:
        if (a3) {
          BOOL v416 = a4 == 0;
        }
        else {
          BOOL v416 = 1;
        }
        int v417 = !v416;
        if (!v416 && a5 && a6) {
          goto LABEL_2788;
        }
        if (a5) {
          int v417 = 0;
        }
        if (v417 == 1 && a6)
        {
LABEL_2788:
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v418 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v418 >= 2;
          CFAllocatorRef v30 = vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf_neon_fp16;
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf;
          goto LABEL_7028;
        }
        if (a3) {
          BOOL v843 = a4 == 0;
        }
        else {
          BOOL v843 = 0;
        }
        int v844 = !v843;
        if (a6 && !v844 && !a5 || a5 && v844 != 1 && a6)
        {
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_420vf;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v845 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v845 >= 2;
          CFAllocatorRef v30 = vt_Copy_420vf_TRC_Mat_TRC_420vf_neon_fp16;
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_420vf;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_420vf_rgb_420vf;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v1105 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v1105 >= 2;
          CFAllocatorRef v30 = vt_Copy_420vf_rgb_420vf_neon_fp16;
          float v10 = vt_Copy_420vf_rgb_420vf;
          goto LABEL_7028;
        }
        goto LABEL_6979;
      }
      if (a2 <= 1380411456)
      {
        if (a2 > 875704949)
        {
          if (a2 <= 1111970368)
          {
            if (a2 != 875704950)
            {
              if (a2 != 875836518 && a2 != 875836534) {
                goto LABEL_7023;
              }
              goto LABEL_1184;
            }
LABEL_2126:
            if (a3) {
              BOOL v308 = a4 == 0;
            }
            else {
              BOOL v308 = 1;
            }
            int v309 = !v308;
            if (!v308 && a5 && a6) {
              goto LABEL_2139;
            }
            if (a5) {
              int v309 = 0;
            }
            if (v309 == 1 && a6)
            {
LABEL_2139:
              float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v310 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v310 >= 2;
              CFAllocatorRef v30 = vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf_neon_fp16;
              float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v819 = a4 == 0;
            }
            else {
              BOOL v819 = 0;
            }
            int v820 = !v819;
            if (a6 && !v820 && !a5 || a5 && v820 != 1 && a6)
            {
              float v10 = vt_Copy_420vf_TRC_Mat_TRC_422vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v821 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v821 >= 2;
              CFAllocatorRef v30 = vt_Copy_420vf_TRC_Mat_TRC_422vf_neon_fp16;
              float v10 = vt_Copy_420vf_TRC_Mat_TRC_422vf;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_420vf_rgb_422vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1100 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1100 >= 2;
              CFAllocatorRef v30 = vt_Copy_420vf_rgb_422vf_neon_fp16;
              float v10 = vt_Copy_420vf_rgb_422vf;
              goto LABEL_7028;
            }
            goto LABEL_6979;
          }
          if (a2 != 1111970369 && a2 != 1380401729)
          {
            if (a2 != 1380410945) {
              goto LABEL_7023;
            }
            if (a3) {
              BOOL v334 = a4 == 0;
            }
            else {
              BOOL v334 = 1;
            }
            int v335 = !v334;
            if (!v334 && a5 && a6) {
              goto LABEL_2307;
            }
            if (a5) {
              int v335 = 0;
            }
            if (v335 == 1 && a6)
            {
LABEL_2307:
              float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v336 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v336 >= 2;
              CFAllocatorRef v30 = vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA_neon_fp16;
              float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v1051 = a4 == 0;
            }
            else {
              BOOL v1051 = 0;
            }
            int v1052 = !v1051;
            if (a6 && !v1052 && !a5 || a5 && v1052 != 1 && a6)
            {
              float v10 = vt_Copy_420vf_TRC_Mat_TRC_RGfA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1053 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1053 >= 2;
              CFAllocatorRef v30 = vt_Copy_420vf_TRC_Mat_TRC_RGfA_neon_fp16;
              float v10 = vt_Copy_420vf_TRC_Mat_TRC_RGfA;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_420vf_rgb_RGfA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1133 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1133 >= 2;
              CFAllocatorRef v30 = vt_Copy_420vf_rgb_RGfA_neon_fp16;
              float v10 = vt_Copy_420vf_rgb_RGfA;
              goto LABEL_7028;
            }
            goto LABEL_6979;
          }
        }
        else
        {
          if (a2 > 875704421)
          {
            if (a2 != 875704422 && a2 != 875704438)
            {
              if (a2 != 875704934) {
                goto LABEL_7023;
              }
              goto LABEL_2126;
            }
            goto LABEL_2775;
          }
          if (a2 != 32)
          {
            if (a2 != 846624102 && a2 != 846624121) {
              goto LABEL_7023;
            }
            goto LABEL_2544;
          }
        }
        if (a3) {
          BOOL v410 = a4 == 0;
        }
        else {
          BOOL v410 = 1;
        }
        int v411 = !v410;
        if (!v410 && a5 && a6) {
          goto LABEL_2758;
        }
        if (a5) {
          int v411 = 0;
        }
        if (v411 == 1 && a6)
        {
LABEL_2758:
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v412 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v412 >= 2;
          CFAllocatorRef v30 = vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA_neon_fp16;
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA;
          goto LABEL_7028;
        }
        if (a3) {
          BOOL v837 = a4 == 0;
        }
        else {
          BOOL v837 = 0;
        }
        int v838 = !v837;
        if (a6 && !v838 && !a5 || a5 && v838 != 1 && a6)
        {
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_BGRA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v839 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v839 >= 2;
          CFAllocatorRef v30 = vt_Copy_420vf_TRC_Mat_TRC_BGRA_neon_fp16;
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_BGRA;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_420vf_rgb_BGRA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v1103 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v1103 >= 2;
          CFAllocatorRef v30 = vt_Copy_420vf_rgb_BGRA_neon_fp16;
          float v10 = vt_Copy_420vf_rgb_BGRA;
          goto LABEL_7028;
        }
        goto LABEL_6979;
      }
      if (a2 > 1932681586)
      {
        if (a2 > 1936077361)
        {
          if (a2 == 1936077362) {
            goto LABEL_2805;
          }
          if (a2 == 1936077876) {
            goto LABEL_2831;
          }
          int v193 = 1937125936;
        }
        else
        {
          if (a2 == 1932681587) {
            goto LABEL_2805;
          }
          if (a2 == 1932812659) {
            goto LABEL_2831;
          }
          int v193 = 1936077360;
        }
        if (a2 != v193) {
          goto LABEL_7023;
        }
        if (a3) {
          BOOL v354 = a4 == 0;
        }
        else {
          BOOL v354 = 1;
        }
        int v355 = !v354;
        float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420;
        if (!v354 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v355 = 0;
        }
        float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420;
        if (v355 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v356 = a3 && a4 == 0;
        BOOL v357 = !v356;
        float v10 = vt_Copy_420vf_TRC_Mat_TRC_xf420;
        if (a6)
        {
          if (!v357 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_420vf_TRC_Mat_TRC_xf420;
        if (a5)
        {
          if (!v357 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_420vf_rgb_xf420;
        goto LABEL_6592;
      }
      if (a2 > 1647719520)
      {
        if (a2 == 1647719521)
        {
          if (a3) {
            BOOL v665 = a4 == 0;
          }
          else {
            BOOL v665 = 1;
          }
          int v666 = !v665;
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_b64a;
          if (!v665 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v666 = 0;
          }
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_b64a;
          if (v666 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v667 = a3 && a4 == 0;
          BOOL v668 = !v667;
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_b64a;
          if (a6)
          {
            if (!v668 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_b64a;
          if (a5)
          {
            if (!v668 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_420vf_rgb_b64a;
          goto LABEL_6592;
        }
        if (a2 != 1815162994)
        {
          if (a2 != 1815491698) {
            goto LABEL_7023;
          }
          if (a3) {
            BOOL v314 = a4 == 0;
          }
          else {
            BOOL v314 = 1;
          }
          int v315 = !v314;
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_l64r;
          if (!v314 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v315 = 0;
          }
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_l64r;
          if (v315 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v316 = a3 && a4 == 0;
          BOOL v317 = !v316;
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_l64r;
          if (a6)
          {
            if (!v317 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_l64r;
          if (a5)
          {
            if (!v317 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_420vf_rgb_l64r;
          goto LABEL_6592;
        }
        goto LABEL_2693;
      }
      if (a2 == 1380411457)
      {
        if (a3) {
          BOOL v643 = a4 == 0;
        }
        else {
          BOOL v643 = 1;
        }
        int v644 = !v643;
        if (!v643 && a5 && a6) {
          goto LABEL_4190;
        }
        if (a5) {
          int v644 = 0;
        }
        if (v644 == 1 && a6)
        {
LABEL_4190:
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v645 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v645 >= 2;
          CFAllocatorRef v30 = vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA_neon_fp16;
          float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA;
          goto LABEL_7028;
        }
        if (a3) {
          BOOL v1058 = a4 == 0;
        }
        else {
          BOOL v1058 = 0;
        }
        int v1059 = !v1058;
        if (a6 && !v1059 && !a5 || a5 && v1059 != 1 && a6)
        {
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_RGhA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v1060 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v1060 >= 2;
          CFAllocatorRef v30 = vt_Copy_420vf_TRC_Mat_TRC_RGhA_neon_fp16;
          float v10 = vt_Copy_420vf_TRC_Mat_TRC_RGhA;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_420vf_rgb_RGhA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v1135 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v1135 >= 2;
          CFAllocatorRef v30 = vt_Copy_420vf_rgb_RGhA_neon_fp16;
          float v10 = vt_Copy_420vf_rgb_RGhA;
          goto LABEL_7028;
        }
        goto LABEL_6979;
      }
      if (a2 != 1630697081)
      {
        int v63 = 1647534392;
        goto LABEL_1151;
      }
LABEL_2544:
      if (a3) {
        BOOL v375 = a4 == 0;
      }
      else {
        BOOL v375 = 1;
      }
      int v376 = !v375;
      float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_2vuyf;
      if (!v375 && a5 && a6) {
        goto LABEL_7022;
      }
      if (a5) {
        int v376 = 0;
      }
      float v10 = vt_Copy_420vf_TRC_Tone_Mat_TRC_2vuyf;
      if (v376 == 1)
      {
        if (a6) {
          goto LABEL_7022;
        }
      }
      BOOL v377 = a3 && a4 == 0;
      BOOL v378 = !v377;
      float v10 = vt_Copy_420vf_TRC_Mat_TRC_2vuyf;
      if (a6)
      {
        if (!v378 && !a5) {
          goto LABEL_7022;
        }
      }
      float v10 = vt_Copy_420vf_TRC_Mat_TRC_2vuyf;
      if (a5)
      {
        if (!v378 && a6) {
          goto LABEL_7022;
        }
      }
      uint64_t result = 0;
      BOOL v50 = (a4 | a3 | a5 | a6) == 0;
      float v10 = vt_Copy_420vf_rgb_2vuyf;
      goto LABEL_6592;
    }
    if (a1 != 1999843442)
    {
      if (a1 != 2016567667)
      {
        if (a1 != 2016686640) {
          goto LABEL_7023;
        }
        goto LABEL_98;
      }
      goto LABEL_90;
    }
LABEL_136:
    float v10 = 0;
    if (a2 > 1936077875)
    {
      if (a2 > 1983000885)
      {
        if (a2 <= 2016687155)
        {
          if (a2 > 1999843441)
          {
            if (a2 <= 2016686639)
            {
              if (a2 != 1999843442)
              {
                int v16 = 2016567667;
                goto LABEL_3778;
              }
LABEL_3141:
              if (a3) {
                BOOL v468 = a4 == 0;
              }
              else {
                BOOL v468 = 1;
              }
              int v469 = !v468;
              float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_l10r;
              if (!v468 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v469 = 0;
              }
              float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_l10r;
              if (v469 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v470 = a3 && a4 == 0;
              BOOL v471 = !v470;
              float v10 = vt_Copy_l10r_TRC_Mat_TRC_l10r;
              if (a6)
              {
                if (!v471 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_l10r_TRC_Mat_TRC_l10r;
              if (a5)
              {
                if (!v471 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_l10r_rgb_l10r;
              goto LABEL_6592;
            }
            if (a2 != 2016686640)
            {
              int v16 = 2016686642;
              goto LABEL_3778;
            }
            goto LABEL_3805;
          }
          if (a2 == 1983000886)
          {
            if (a3) {
              BOOL v754 = a4 == 0;
            }
            else {
              BOOL v754 = 1;
            }
            int v755 = !v754;
            float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_v216;
            if (!v754 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v755 = 0;
            }
            float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_v216;
            if (v755 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v756 = a3 && a4 == 0;
            BOOL v757 = !v756;
            float v10 = vt_Copy_l10r_TRC_Mat_TRC_v216;
            if (a6)
            {
              if (!v757 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_l10r_TRC_Mat_TRC_v216;
            if (a5)
            {
              if (!v757 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_l10r_rgb_v216;
            goto LABEL_6592;
          }
          if (a2 != 1983013176)
          {
            int v23 = 1983144248;
            goto LABEL_2918;
          }
          goto LABEL_3039;
        }
        if (a2 <= 2019963441)
        {
          if (a2 != 2016687156 && a2 != 2016698739)
          {
            if (a2 != 2019963440) {
              goto LABEL_7023;
            }
            goto LABEL_3805;
          }
          goto LABEL_3687;
        }
        if (a2 > 2037741157)
        {
          if (a2 == 2037741158 || a2 == 2037741171)
          {
            if (a3) {
              BOOL v581 = a4 == 0;
            }
            else {
              BOOL v581 = 1;
            }
            int v582 = !v581;
            float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_yuvsf;
            if (!v581 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v582 = 0;
            }
            float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_yuvsf;
            if (v582 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v583 = a3 && a4 == 0;
            BOOL v584 = !v583;
            float v10 = vt_Copy_l10r_TRC_Mat_TRC_yuvsf;
            if (a6)
            {
              if (!v584 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_l10r_TRC_Mat_TRC_yuvsf;
            if (a5)
            {
              if (!v584 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_l10r_rgb_yuvsf;
            goto LABEL_6592;
          }
          goto LABEL_7023;
        }
        if (a2 != 2019963442)
        {
          int v162 = 2019963956;
          goto LABEL_3686;
        }
LABEL_3779:
        if (a3) {
          BOOL v569 = a4 == 0;
        }
        else {
          BOOL v569 = 1;
        }
        int v570 = !v569;
        float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_xf422;
        if (!v569 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v570 = 0;
        }
        float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_xf422;
        if (v570 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v571 = a3 && a4 == 0;
        BOOL v572 = !v571;
        float v10 = vt_Copy_l10r_TRC_Mat_TRC_xf422;
        if (a6)
        {
          if (!v572 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_l10r_TRC_Mat_TRC_xf422;
        if (a5)
        {
          if (!v572 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_l10r_rgb_xf422;
        goto LABEL_6592;
      }
      if (a2 > 1952854575)
      {
        if (a2 > 1953903151)
        {
          if (a2 <= 1953903667)
          {
            if (a2 != 1953903152)
            {
              int v16 = 1953903154;
              goto LABEL_3778;
            }
            goto LABEL_3805;
          }
          if (a2 == 1953903668) {
            goto LABEL_3687;
          }
          if (a2 != 1982882104) {
            goto LABEL_7023;
          }
LABEL_3733:
          if (a3) {
            BOOL v562 = a4 == 0;
          }
          else {
            BOOL v562 = 1;
          }
          int v563 = !v562;
          float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_420vf;
          if (!v562 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v563 = 0;
          }
          float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_420vf;
          if (v563 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v564 = a3 && a4 == 0;
          BOOL v565 = !v564;
          float v10 = vt_Copy_l10r_TRC_Mat_TRC_420vf;
          if (a6)
          {
            if (!v565 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_l10r_TRC_Mat_TRC_420vf;
          if (a5)
          {
            if (!v565 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_l10r_rgb_420vf;
          goto LABEL_6592;
        }
        if (a2 == 1952854576) {
          goto LABEL_3805;
        }
        if (a2 == 1952854578) {
          goto LABEL_3779;
        }
        int v162 = 1952855092;
LABEL_3686:
        if (a2 != v162) {
          goto LABEL_7023;
        }
LABEL_3687:
        if (a3) {
          BOOL v556 = a4 == 0;
        }
        else {
          BOOL v556 = 1;
        }
        int v557 = !v556;
        float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_xf444;
        if (!v556 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v557 = 0;
        }
        float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_xf444;
        if (v557 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v558 = a3 && a4 == 0;
        BOOL v463 = !v558;
        float v10 = vt_Copy_l10r_TRC_Mat_TRC_xf444;
        if (a6)
        {
          if (!v463 && !a5) {
            goto LABEL_7022;
          }
        }
        goto LABEL_3709;
      }
      if (a2 > 1937126451)
      {
        if (a2 != 1937126452)
        {
          if (a2 == 1949458803) {
            goto LABEL_3779;
          }
          int v162 = 1949589875;
          goto LABEL_3686;
        }
      }
      else if (a2 != 1936077876)
      {
        if (a2 != 1937125936)
        {
          int v16 = 1937125938;
          goto LABEL_3778;
        }
        goto LABEL_3805;
      }
LABEL_3086:
      if (a3) {
        BOOL v460 = a4 == 0;
      }
      else {
        BOOL v460 = 1;
      }
      int v461 = !v460;
      float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_xf444;
      if (!v460 && a5 && a6) {
        goto LABEL_7022;
      }
      if (a5) {
        int v461 = 0;
      }
      float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_xf444;
      if (v461 == 1)
      {
        if (a6) {
          goto LABEL_7022;
        }
      }
      BOOL v462 = a3 && a4 == 0;
      BOOL v463 = !v462;
      float v10 = vt_Copy_l10r_TRC_Mat_TRC_xf444;
      if (a6)
      {
        if (!v463 && !a5) {
          goto LABEL_7022;
        }
      }
LABEL_3709:
      float v10 = vt_Copy_l10r_TRC_Mat_TRC_xf444;
      if (a5 && !v463 && a6) {
        goto LABEL_7022;
      }
      uint64_t result = 0;
      BOOL v50 = (a4 | a3 | a5 | a6) == 0;
      float v10 = vt_Copy_l10r_rgb_xf444;
      goto LABEL_6592;
    }
    if (a2 > 1278226741)
    {
      if (a2 > 1647719520)
      {
        if (a2 <= 1932681586)
        {
          if (a2 == 1647719521)
          {
            if (a3) {
              BOOL v762 = a4 == 0;
            }
            else {
              BOOL v762 = 1;
            }
            int v763 = !v762;
            float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_b64a;
            if (!v762 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v763 = 0;
            }
            float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_b64a;
            if (v763 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v764 = a3 && a4 == 0;
            BOOL v765 = !v764;
            float v10 = vt_Copy_l10r_TRC_Mat_TRC_b64a;
            if (a6)
            {
              if (!v765 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_l10r_TRC_Mat_TRC_b64a;
            if (a5)
            {
              if (!v765 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_l10r_rgb_b64a;
            goto LABEL_6592;
          }
          if (a2 != 1815162994)
          {
            if (a2 != 1815491698) {
              goto LABEL_7023;
            }
            if (a3) {
              BOOL v445 = a4 == 0;
            }
            else {
              BOOL v445 = 1;
            }
            int v446 = !v445;
            float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_l64r;
            if (!v445 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v446 = 0;
            }
            float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_l64r;
            if (v446 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v447 = a3 && a4 == 0;
            BOOL v448 = !v447;
            float v10 = vt_Copy_l10r_TRC_Mat_TRC_l64r;
            if (a6)
            {
              if (!v448 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_l10r_TRC_Mat_TRC_l64r;
            if (a5)
            {
              if (!v448 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_l10r_rgb_l64r;
            goto LABEL_6592;
          }
          goto LABEL_3141;
        }
        if (a2 > 1936077359)
        {
          if (a2 != 1936077360)
          {
            int v16 = 1936077362;
LABEL_3778:
            if (a2 != v16) {
              goto LABEL_7023;
            }
            goto LABEL_3779;
          }
LABEL_3805:
          if (a3) {
            BOOL v573 = a4 == 0;
          }
          else {
            BOOL v573 = 1;
          }
          int v574 = !v573;
          float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_xf420;
          if (!v573 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v574 = 0;
          }
          float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_xf420;
          if (v574 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v575 = a3 && a4 == 0;
          BOOL v576 = !v575;
          float v10 = vt_Copy_l10r_TRC_Mat_TRC_xf420;
          if (a6)
          {
            if (!v576 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_l10r_TRC_Mat_TRC_xf420;
          if (a5)
          {
            if (!v576 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_l10r_rgb_xf420;
          goto LABEL_6592;
        }
        if (a2 == 1932681587) {
          goto LABEL_3779;
        }
        if (a2 != 1932812659) {
          goto LABEL_7023;
        }
        goto LABEL_3086;
      }
      if (a2 <= 1380411456)
      {
        if (a2 == 1278226742) {
          goto LABEL_3086;
        }
        if (a2 != 1380401729)
        {
          if (a2 != 1380410945) {
            goto LABEL_7023;
          }
          if (a3) {
            BOOL v232 = a4 == 0;
          }
          else {
            BOOL v232 = 1;
          }
          int v233 = !v232;
          float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_RGfA;
          if (!v232 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v233 = 0;
          }
          float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_RGfA;
          if (v233 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v234 = a3 && a4 == 0;
          BOOL v235 = !v234;
          float v10 = vt_Copy_l10r_TRC_Mat_TRC_RGfA;
          if (a6)
          {
            if (!v235 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_l10r_TRC_Mat_TRC_RGfA;
          if (a5)
          {
            if (!v235 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_l10r_rgb_RGfA;
          goto LABEL_6592;
        }
LABEL_3196:
        if (a3) {
          BOOL v476 = a4 == 0;
        }
        else {
          BOOL v476 = 1;
        }
        int v477 = !v476;
        float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_BGRA;
        if (!v476 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v477 = 0;
        }
        float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_BGRA;
        if (v477 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v478 = a3 && a4 == 0;
        BOOL v479 = !v478;
        float v10 = vt_Copy_l10r_TRC_Mat_TRC_BGRA;
        if (a6)
        {
          if (!v479 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_l10r_TRC_Mat_TRC_BGRA;
        if (a5)
        {
          if (!v479 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_l10r_rgb_BGRA;
        goto LABEL_6592;
      }
      if (a2 == 1380411457)
      {
        if (a3) {
          BOOL v770 = a4 == 0;
        }
        else {
          BOOL v770 = 1;
        }
        int v771 = !v770;
        float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_RGhA;
        if (!v770 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v771 = 0;
        }
        float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_RGhA;
        if (v771 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v772 = a3 && a4 == 0;
        BOOL v773 = !v772;
        float v10 = vt_Copy_l10r_TRC_Mat_TRC_RGhA;
        if (a6)
        {
          if (!v773 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_l10r_TRC_Mat_TRC_RGhA;
        if (a5)
        {
          if (!v773 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_l10r_rgb_RGhA;
        goto LABEL_6592;
      }
      if (a2 != 1630697081)
      {
        if (a2 != 1647534392) {
          goto LABEL_7023;
        }
        goto LABEL_3141;
      }
    }
    else
    {
      if (a2 > 875704949)
      {
        if (a2 <= 1111970368)
        {
          if (a2 != 875704950)
          {
            if (a2 == 875836518)
            {
LABEL_2919:
              if (a3) {
                BOOL v438 = a4 == 0;
              }
              else {
                BOOL v438 = 1;
              }
              int v439 = !v438;
              float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_444vf;
              if (!v438 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v439 = 0;
              }
              float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_444vf;
              if (v439 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v440 = a3 && a4 == 0;
              BOOL v441 = !v440;
              float v10 = vt_Copy_l10r_TRC_Mat_TRC_444vf;
              if (a6)
              {
                if (!v441 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_l10r_TRC_Mat_TRC_444vf;
              if (a5)
              {
                if (!v441 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_l10r_rgb_444vf;
              goto LABEL_6592;
            }
            int v23 = 875836534;
LABEL_2918:
            if (a2 != v23) {
              goto LABEL_7023;
            }
            goto LABEL_2919;
          }
LABEL_3039:
          if (a3) {
            BOOL v453 = a4 == 0;
          }
          else {
            BOOL v453 = 1;
          }
          int v454 = !v453;
          float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_422vf;
          if (!v453 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v454 = 0;
          }
          float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_422vf;
          if (v454 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v455 = a3 && a4 == 0;
          BOOL v456 = !v455;
          float v10 = vt_Copy_l10r_TRC_Mat_TRC_422vf;
          if (a6)
          {
            if (!v456 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_l10r_TRC_Mat_TRC_422vf;
          if (a5)
          {
            if (!v456 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_l10r_rgb_422vf;
          goto LABEL_6592;
        }
        if (a2 > 1278226735)
        {
          if (a2 == 1278226736) {
            goto LABEL_3687;
          }
          int v162 = 1278226738;
          goto LABEL_3686;
        }
        if (a2 != 1111970369)
        {
          int v23 = 1278226488;
          goto LABEL_2918;
        }
        goto LABEL_3196;
      }
      if (a2 > 875704421)
      {
        if (a2 != 875704422 && a2 != 875704438)
        {
          if (a2 != 875704934) {
            goto LABEL_7023;
          }
          goto LABEL_3039;
        }
        goto LABEL_3733;
      }
      if (a2 == 32) {
        goto LABEL_3196;
      }
      if (a2 != 846624102 && a2 != 846624121) {
        goto LABEL_7023;
      }
    }
    if (a3) {
      BOOL v483 = a4 == 0;
    }
    else {
      BOOL v483 = 1;
    }
    int v484 = !v483;
    float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_2vuyf;
    if (!v483 && a5 && a6) {
      goto LABEL_7022;
    }
    if (a5) {
      int v484 = 0;
    }
    float v10 = vt_Copy_l10r_TRC_Tone_Mat_TRC_2vuyf;
    if (v484 == 1)
    {
      if (a6) {
        goto LABEL_7022;
      }
    }
    BOOL v485 = a3 && a4 == 0;
    BOOL v486 = !v485;
    float v10 = vt_Copy_l10r_TRC_Mat_TRC_2vuyf;
    if (a6)
    {
      if (!v486 && !a5) {
        goto LABEL_7022;
      }
    }
    float v10 = vt_Copy_l10r_TRC_Mat_TRC_2vuyf;
    if (a5)
    {
      if (!v486 && a6) {
        goto LABEL_7022;
      }
    }
    uint64_t result = 0;
    BOOL v50 = (a4 | a3 | a5 | a6) == 0;
    float v10 = vt_Copy_l10r_rgb_2vuyf;
    goto LABEL_6592;
  }
  if (a1 > 1952854575)
  {
    if (a1 <= 1953903151)
    {
      if (a1 == 1952854576) {
        goto LABEL_98;
      }
      if (a1 != 1952854578)
      {
        int v14 = 1952855092;
        goto LABEL_81;
      }
      goto LABEL_90;
    }
    if (a1 == 1953903152) {
      goto LABEL_98;
    }
    if (a1 == 1953903154) {
      goto LABEL_90;
    }
    int v14 = 1953903668;
LABEL_81:
    if (a1 != v14) {
      goto LABEL_7023;
    }
    goto LABEL_82;
  }
  if (a1 <= 1937126451)
  {
    if (a1 != 1936077876)
    {
      if (a1 != 1937125936)
      {
        int v12 = 1937125938;
        goto LABEL_70;
      }
LABEL_98:
      float v10 = 0;
      if (a2 > 1937125937)
      {
        if (a2 > 1983013175)
        {
          if (a2 > 2016687155)
          {
            if (a2 > 2019963441)
            {
              if (a2 > 2037741157)
              {
                if (a2 == 2037741158 || a2 == 2037741171)
                {
                  if (a3) {
                    BOOL v272 = a4 == 0;
                  }
                  else {
                    BOOL v272 = 1;
                  }
                  int v273 = !v272;
                  float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_yuvsf;
                  if (!v272 && a5 && a6) {
                    goto LABEL_7022;
                  }
                  if (a5) {
                    int v273 = 0;
                  }
                  float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_yuvsf;
                  if (v273 == 1)
                  {
                    if (a6) {
                      goto LABEL_7022;
                    }
                  }
                  BOOL v274 = a3 && a4 == 0;
                  BOOL v275 = !v274;
                  float v10 = vt_Copy_xf420_TRC_Mat_TRC_yuvsf;
                  if (a6)
                  {
                    if (!v275 && !a5) {
                      goto LABEL_7022;
                    }
                  }
                  float v10 = vt_Copy_xf420_TRC_Mat_TRC_yuvsf;
                  if (a5)
                  {
                    if (!v275 && a6) {
                      goto LABEL_7022;
                    }
                  }
                  uint64_t result = 0;
                  BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                  float v10 = vt_Copy_xf420_rgb_yuvsf;
                  goto LABEL_6592;
                }
                goto LABEL_7023;
              }
              if (a2 != 2019963442)
              {
                if (a2 != 2019963956) {
                  goto LABEL_7023;
                }
                goto LABEL_1336;
              }
              goto LABEL_1251;
            }
            if (a2 != 2016687156 && a2 != 2016698739)
            {
              if (a2 != 2019963440) {
                goto LABEL_7023;
              }
              goto LABEL_1266;
            }
LABEL_1336:
            if (a3) {
              BOOL v190 = a4 == 0;
            }
            else {
              BOOL v190 = 1;
            }
            int v191 = !v190;
            if (!v190 && a5 && a6) {
              goto LABEL_1349;
            }
            if (a5) {
              int v191 = 0;
            }
            if (v191 == 1 && a6)
            {
LABEL_1349:
              float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v192 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v192 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444_neon_fp16;
              float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v399 = a4 == 0;
            }
            else {
              BOOL v399 = 0;
            }
            int v400 = !v399;
            if (a6 && !v400 && !a5 || a5 && v400 != 1 && a6)
            {
              float v10 = vt_Copy_xf420_TRC_Mat_TRC_xf444;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v401 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v401 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf420_TRC_Mat_TRC_xf444_neon_fp16;
              float v10 = vt_Copy_xf420_TRC_Mat_TRC_xf444;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_xf420_rgb_xf444;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v836 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v836 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf420_rgb_xf444_neon_fp16;
              float v10 = vt_Copy_xf420_rgb_xf444;
              goto LABEL_7028;
            }
            goto LABEL_6889;
          }
          if (a2 <= 2016567666)
          {
            if (a2 != 1983013176)
            {
              if (a2 != 1983144248)
              {
                int v32 = 1999843442;
LABEL_349:
                if (a2 != v32) {
                  goto LABEL_7023;
                }
LABEL_1431:
                if (a3) {
                  BOOL v206 = a4 == 0;
                }
                else {
                  BOOL v206 = 1;
                }
                int v207 = !v206;
                float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_l10r;
                if (!v206 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v207 = 0;
                }
                float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_l10r;
                if (v207 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v208 = a3 && a4 == 0;
                BOOL v209 = !v208;
                float v10 = vt_Copy_xf420_TRC_Mat_TRC_l10r;
                if (a6)
                {
                  if (!v209 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_xf420_TRC_Mat_TRC_l10r;
                if (a5)
                {
                  if (!v209 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_xf420_rgb_l10r;
                goto LABEL_6592;
              }
LABEL_415:
              if (a3) {
                BOOL v51 = a4 == 0;
              }
              else {
                BOOL v51 = 1;
              }
              int v52 = !v51;
              if (!v51 && a5 && a6) {
                goto LABEL_428;
              }
              if (a5) {
                int v52 = 0;
              }
              if (v52 == 1 && a6)
              {
LABEL_428:
                float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf;
                if (!a7)
                {
                  unsigned int v53 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v53 >= 2;
                  CFAllocatorRef v30 = vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf_neon_fp16;
                  float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_444vf;
                  goto LABEL_7028;
                }
                goto LABEL_7022;
              }
              if (a3) {
                BOOL v599 = a4 == 0;
              }
              else {
                BOOL v599 = 0;
              }
              int v600 = !v599;
              if (a6 && !v600 && !a5 || a5 && v600 != 1 && a6)
              {
                float v10 = vt_Copy_xf420_TRC_Mat_TRC_444vf;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v601 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v601 >= 2;
                CFAllocatorRef v30 = vt_Copy_xf420_TRC_Mat_TRC_444vf_neon_fp16;
                float v10 = vt_Copy_xf420_TRC_Mat_TRC_444vf;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_xf420_rgb_444vf;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v977 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v977 >= 2;
                CFAllocatorRef v30 = vt_Copy_xf420_rgb_444vf_neon_fp16;
                float v10 = vt_Copy_xf420_rgb_444vf;
                goto LABEL_7028;
              }
              goto LABEL_6889;
            }
            goto LABEL_1162;
          }
          if (a2 == 2016567667)
          {
LABEL_1251:
            if (a3) {
              BOOL v177 = a4 == 0;
            }
            else {
              BOOL v177 = 1;
            }
            int v178 = !v177;
            if (!v177 && a5 && a6) {
              goto LABEL_1264;
            }
            if (a5) {
              int v178 = 0;
            }
            if (v178 == 1 && a6)
            {
LABEL_1264:
              float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v179 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v179 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422_neon_fp16;
              float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v396 = a4 == 0;
            }
            else {
              BOOL v396 = 0;
            }
            int v397 = !v396;
            if (a6 && !v397 && !a5 || a5 && v397 != 1 && a6)
            {
              float v10 = vt_Copy_xf420_TRC_Mat_TRC_xf422;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v398 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v398 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf420_TRC_Mat_TRC_xf422_neon_fp16;
              float v10 = vt_Copy_xf420_TRC_Mat_TRC_xf422;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_xf420_rgb_xf422;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v835 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v835 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf420_rgb_xf422_neon_fp16;
              float v10 = vt_Copy_xf420_rgb_xf422;
              goto LABEL_7028;
            }
            goto LABEL_6889;
          }
          if (a2 != 2016686640)
          {
            int v25 = 2016686642;
LABEL_1250:
            if (a2 != v25) {
              goto LABEL_7023;
            }
            goto LABEL_1251;
          }
          goto LABEL_1266;
        }
        if (a2 <= 1952855091)
        {
          if (a2 > 1949589874)
          {
            if (a2 == 1949589875) {
              goto LABEL_1336;
            }
            if (a2 != 1952854576)
            {
              int v25 = 1952854578;
              goto LABEL_1250;
            }
LABEL_1266:
            if (a3) {
              BOOL v180 = a4 == 0;
            }
            else {
              BOOL v180 = 1;
            }
            int v181 = !v180;
            if (!v180 && a5 && a6) {
              goto LABEL_1279;
            }
            if (a5) {
              int v181 = 0;
            }
            if (v181 == 1 && a6)
            {
LABEL_1279:
              float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v182 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v182 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420_neon_fp16;
              float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v523 = a4 == 0;
            }
            else {
              BOOL v523 = 0;
            }
            int v524 = !v523;
            if (a6 && !v524 && !a5 || a5 && v524 != 1 && a6)
            {
              float v10 = vt_Copy_xf420_TRC_Mat_TRC_xf420;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v525 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v525 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf420_TRC_Mat_TRC_xf420_neon_fp16;
              float v10 = vt_Copy_xf420_TRC_Mat_TRC_xf420;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_xf420_rgb_xf420;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v966 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v966 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf420_rgb_xf420_neon_fp16;
              float v10 = vt_Copy_xf420_rgb_xf420;
              goto LABEL_7028;
            }
            goto LABEL_6889;
          }
          if (a2 != 1937125938)
          {
            if (a2 != 1937126452)
            {
              int v25 = 1949458803;
              goto LABEL_1250;
            }
LABEL_1553:
            if (a3) {
              BOOL v227 = a4 == 0;
            }
            else {
              BOOL v227 = 1;
            }
            int v228 = !v227;
            float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444;
            if (!v227 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v228 = 0;
            }
            float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf444;
            if (v228 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v229 = a3 && a4 == 0;
            BOOL v230 = !v229;
            float v10 = vt_Copy_xf420_TRC_Mat_TRC_xf444;
            if (a6)
            {
              if (!v230 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_xf420_TRC_Mat_TRC_xf444;
            if (a5)
            {
              if (!v230 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_xf420_rgb_xf444;
            goto LABEL_6592;
          }
LABEL_1527:
          if (a3) {
            BOOL v223 = a4 == 0;
          }
          else {
            BOOL v223 = 1;
          }
          int v224 = !v223;
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422;
          if (!v223 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v224 = 0;
          }
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf422;
          if (v224 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v225 = a3 && a4 == 0;
          BOOL v226 = !v225;
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_xf422;
          if (a6)
          {
            if (!v226 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_xf422;
          if (a5)
          {
            if (!v226 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_xf420_rgb_xf422;
          goto LABEL_6592;
        }
        if (a2 <= 1953903667)
        {
          if (a2 == 1952855092) {
            goto LABEL_1336;
          }
          if (a2 != 1953903152)
          {
            int v25 = 1953903154;
            goto LABEL_1250;
          }
          goto LABEL_1266;
        }
        if (a2 == 1953903668) {
          goto LABEL_1336;
        }
        if (a2 != 1982882104)
        {
          if (a2 != 1983000886) {
            goto LABEL_7023;
          }
          if (a3) {
            BOOL v186 = a4 == 0;
          }
          else {
            BOOL v186 = 1;
          }
          int v187 = !v186;
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_v216;
          if (!v186 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v187 = 0;
          }
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_v216;
          if (v187 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v188 = a3 && a4 == 0;
          BOOL v189 = !v188;
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_v216;
          if (a6)
          {
            if (!v189 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_v216;
          if (a5)
          {
            if (!v189 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_xf420_rgb_v216;
          goto LABEL_6592;
        }
LABEL_1512:
        if (a3) {
          BOOL v220 = a4 == 0;
        }
        else {
          BOOL v220 = 1;
        }
        int v221 = !v220;
        if (!v220 && a5 && a6) {
          goto LABEL_1525;
        }
        if (a5) {
          int v221 = 0;
        }
        if (v221 == 1 && a6)
        {
LABEL_1525:
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v222 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v222 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf_neon_fp16;
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_420vf;
          goto LABEL_7028;
        }
        if (a3) {
          BOOL v610 = a4 == 0;
        }
        else {
          BOOL v610 = 0;
        }
        int v611 = !v610;
        if (a6 && !v611 && !a5 || a5 && v611 != 1 && a6)
        {
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_420vf;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v612 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v612 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf420_TRC_Mat_TRC_420vf_neon_fp16;
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_420vf;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_xf420_rgb_420vf;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v980 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v980 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf420_rgb_420vf_neon_fp16;
          float v10 = vt_Copy_xf420_rgb_420vf;
          goto LABEL_7028;
        }
        goto LABEL_6889;
      }
      if (a2 <= 1380411456)
      {
        if (a2 > 875704949)
        {
          if (a2 <= 1111970368)
          {
            if (a2 != 875704950)
            {
              if (a2 != 875836518 && a2 != 875836534) {
                goto LABEL_7023;
              }
              goto LABEL_415;
            }
            goto LABEL_1162;
          }
          if (a2 != 1111970369 && a2 != 1380401729)
          {
            if (a2 != 1380410945) {
              goto LABEL_7023;
            }
            if (a3) {
              BOOL v183 = a4 == 0;
            }
            else {
              BOOL v183 = 1;
            }
            int v184 = !v183;
            if (!v183 && a5 && a6) {
              goto LABEL_1305;
            }
            if (a5) {
              int v184 = 0;
            }
            if (v184 == 1 && a6)
            {
LABEL_1305:
              float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v185 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v185 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA_neon_fp16;
              float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_RGfA;
              goto LABEL_7028;
            }
            if (a3) {
              BOOL v960 = a4 == 0;
            }
            else {
              BOOL v960 = 0;
            }
            int v961 = !v960;
            if (a6 && !v961 && !a5 || a5 && v961 != 1 && a6)
            {
              float v10 = vt_Copy_xf420_TRC_Mat_TRC_RGfA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v962 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v962 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf420_TRC_Mat_TRC_RGfA_neon_fp16;
              float v10 = vt_Copy_xf420_TRC_Mat_TRC_RGfA;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_xf420_rgb_RGfA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v1113 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v1113 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf420_rgb_RGfA_neon_fp16;
              float v10 = vt_Copy_xf420_rgb_RGfA;
              goto LABEL_7028;
            }
            goto LABEL_6889;
          }
        }
        else
        {
          if (a2 > 875704421)
          {
            if (a2 != 875704422 && a2 != 875704438)
            {
              if (a2 != 875704934) {
                goto LABEL_7023;
              }
LABEL_1162:
              if (a3) {
                BOOL v164 = a4 == 0;
              }
              else {
                BOOL v164 = 1;
              }
              int v165 = !v164;
              if (!v164 && a5 && a6) {
                goto LABEL_1175;
              }
              if (a5) {
                int v165 = 0;
              }
              if (v165 == 1 && a6)
              {
LABEL_1175:
                float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v166 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v166 >= 2;
                CFAllocatorRef v30 = vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf_neon_fp16;
                float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_422vf;
                goto LABEL_7028;
              }
              if (a3) {
                BOOL v602 = a4 == 0;
              }
              else {
                BOOL v602 = 0;
              }
              int v603 = !v602;
              if (a6 && !v603 && !a5 || a5 && v603 != 1 && a6)
              {
                float v10 = vt_Copy_xf420_TRC_Mat_TRC_422vf;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v604 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v604 >= 2;
                CFAllocatorRef v30 = vt_Copy_xf420_TRC_Mat_TRC_422vf_neon_fp16;
                float v10 = vt_Copy_xf420_TRC_Mat_TRC_422vf;
                goto LABEL_7028;
              }
              if (!(a4 | a3 | a5 | a6))
              {
                float v10 = vt_Copy_xf420_rgb_422vf;
                if (a7) {
                  goto LABEL_7022;
                }
                unsigned int v978 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v978 >= 2;
                CFAllocatorRef v30 = vt_Copy_xf420_rgb_422vf_neon_fp16;
                float v10 = vt_Copy_xf420_rgb_422vf;
                goto LABEL_7028;
              }
LABEL_6889:
              float v10 = 0;
              goto LABEL_7022;
            }
            goto LABEL_1512;
          }
          if (a2 != 32)
          {
            if (a2 != 846624102 && a2 != 846624121) {
              goto LABEL_7023;
            }
            goto LABEL_1457;
          }
        }
        if (a3) {
          BOOL v217 = a4 == 0;
        }
        else {
          BOOL v217 = 1;
        }
        int v218 = !v217;
        if (!v217 && a5 && a6) {
          goto LABEL_1510;
        }
        if (a5) {
          int v218 = 0;
        }
        if (v218 == 1 && a6)
        {
LABEL_1510:
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v219 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v219 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA_neon_fp16;
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_BGRA;
          goto LABEL_7028;
        }
        if (a3) {
          BOOL v607 = a4 == 0;
        }
        else {
          BOOL v607 = 0;
        }
        int v608 = !v607;
        if (a6 && !v608 && !a5 || a5 && v608 != 1 && a6)
        {
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_BGRA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v609 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v609 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf420_TRC_Mat_TRC_BGRA_neon_fp16;
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_BGRA;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_xf420_rgb_BGRA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v979 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v979 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf420_rgb_BGRA_neon_fp16;
          float v10 = vt_Copy_xf420_rgb_BGRA;
          goto LABEL_7028;
        }
        goto LABEL_6889;
      }
      if (a2 > 1932681586)
      {
        if (a2 > 1936077361)
        {
          if (a2 == 1936077362) {
            goto LABEL_1527;
          }
          if (a2 == 1936077876) {
            goto LABEL_1553;
          }
          int v76 = 1937125936;
        }
        else
        {
          if (a2 == 1932681587) {
            goto LABEL_1527;
          }
          if (a2 == 1932812659) {
            goto LABEL_1553;
          }
          int v76 = 1936077360;
        }
        if (a2 != v76) {
          goto LABEL_7023;
        }
        if (a3) {
          BOOL v195 = a4 == 0;
        }
        else {
          BOOL v195 = 1;
        }
        int v196 = !v195;
        float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420;
        if (!v195 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v196 = 0;
        }
        float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_xf420;
        if (v196 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v197 = a3 && a4 == 0;
        BOOL v198 = !v197;
        float v10 = vt_Copy_xf420_TRC_Mat_TRC_xf420;
        if (a6)
        {
          if (!v198 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_xf420_TRC_Mat_TRC_xf420;
        if (a5)
        {
          if (!v198 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_xf420_rgb_xf420;
        goto LABEL_6592;
      }
      if (a2 > 1647719520)
      {
        if (a2 == 1647719521)
        {
          if (a3) {
            BOOL v519 = a4 == 0;
          }
          else {
            BOOL v519 = 1;
          }
          int v520 = !v519;
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_b64a;
          if (!v519 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v520 = 0;
          }
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_b64a;
          if (v520 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v521 = a3 && a4 == 0;
          BOOL v522 = !v521;
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_b64a;
          if (a6)
          {
            if (!v522 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_b64a;
          if (a5)
          {
            if (!v522 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_xf420_rgb_b64a;
          goto LABEL_6592;
        }
        if (a2 != 1815162994)
        {
          if (a2 != 1815491698) {
            goto LABEL_7023;
          }
          if (a3) {
            BOOL v173 = a4 == 0;
          }
          else {
            BOOL v173 = 1;
          }
          int v174 = !v173;
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_l64r;
          if (!v173 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v174 = 0;
          }
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_l64r;
          if (v174 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v175 = a3 && a4 == 0;
          BOOL v176 = !v175;
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_l64r;
          if (a6)
          {
            if (!v176 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_l64r;
          if (a5)
          {
            if (!v176 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_xf420_rgb_l64r;
          goto LABEL_6592;
        }
        goto LABEL_1431;
      }
      if (a2 == 1380411457)
      {
        if (a3) {
          BOOL v516 = a4 == 0;
        }
        else {
          BOOL v516 = 1;
        }
        int v517 = !v516;
        if (!v516 && a5 && a6) {
          goto LABEL_3445;
        }
        if (a5) {
          int v517 = 0;
        }
        if (v517 == 1 && a6)
        {
LABEL_3445:
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v518 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v518 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA_neon_fp16;
          float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_RGhA;
          goto LABEL_7028;
        }
        if (a3) {
          BOOL v963 = a4 == 0;
        }
        else {
          BOOL v963 = 0;
        }
        int v964 = !v963;
        if (a6 && !v964 && !a5 || a5 && v964 != 1 && a6)
        {
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_RGhA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v965 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v965 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf420_TRC_Mat_TRC_RGhA_neon_fp16;
          float v10 = vt_Copy_xf420_TRC_Mat_TRC_RGhA;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_xf420_rgb_RGhA;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v1143 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v1143 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf420_rgb_RGhA_neon_fp16;
          float v10 = vt_Copy_xf420_rgb_RGhA;
          goto LABEL_7028;
        }
        goto LABEL_6889;
      }
      if (a2 != 1630697081)
      {
        int v32 = 1647534392;
        goto LABEL_349;
      }
LABEL_1457:
      if (a3) {
        BOOL v210 = a4 == 0;
      }
      else {
        BOOL v210 = 1;
      }
      int v211 = !v210;
      float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_2vuyf;
      if (!v210 && a5 && a6) {
        goto LABEL_7022;
      }
      if (a5) {
        int v211 = 0;
      }
      float v10 = vt_Copy_xf420_TRC_Tone_Mat_TRC_2vuyf;
      if (v211 == 1)
      {
        if (a6) {
          goto LABEL_7022;
        }
      }
      BOOL v212 = a3 && a4 == 0;
      BOOL v213 = !v212;
      float v10 = vt_Copy_xf420_TRC_Mat_TRC_2vuyf;
      if (a6)
      {
        if (!v213 && !a5) {
          goto LABEL_7022;
        }
      }
      float v10 = vt_Copy_xf420_TRC_Mat_TRC_2vuyf;
      if (a5)
      {
        if (!v213 && a6) {
          goto LABEL_7022;
        }
      }
      uint64_t result = 0;
      BOOL v50 = (a4 | a3 | a5 | a6) == 0;
      float v10 = vt_Copy_xf420_rgb_2vuyf;
      goto LABEL_6592;
    }
LABEL_82:
    float v10 = 0;
    if (a2 > 1937125937)
    {
      if (a2 > 1983013175)
      {
        if (a2 > 2016687155)
        {
          if (a2 > 2019963441)
          {
            if (a2 > 2037741157)
            {
              if (a2 == 2037741158 || a2 == 2037741171)
              {
                if (a3) {
                  BOOL v158 = a4 == 0;
                }
                else {
                  BOOL v158 = 1;
                }
                int v159 = !v158;
                float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_yuvsf;
                if (!v158 && a5 && a6) {
                  goto LABEL_7022;
                }
                if (a5) {
                  int v159 = 0;
                }
                float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_yuvsf;
                if (v159 == 1)
                {
                  if (a6) {
                    goto LABEL_7022;
                  }
                }
                BOOL v160 = a3 && a4 == 0;
                BOOL v161 = !v160;
                float v10 = vt_Copy_xf444_TRC_Mat_TRC_yuvsf;
                if (a6)
                {
                  if (!v161 && !a5) {
                    goto LABEL_7022;
                  }
                }
                float v10 = vt_Copy_xf444_TRC_Mat_TRC_yuvsf;
                if (a5)
                {
                  if (!v161 && a6) {
                    goto LABEL_7022;
                  }
                }
                uint64_t result = 0;
                BOOL v50 = (a4 | a3 | a5 | a6) == 0;
                float v10 = vt_Copy_xf444_rgb_yuvsf;
                goto LABEL_6592;
              }
              goto LABEL_7023;
            }
            if (a2 != 2019963442)
            {
              if (a2 != 2019963956) {
                goto LABEL_7023;
              }
              goto LABEL_525;
            }
            goto LABEL_434;
          }
          if (a2 != 2016687156 && a2 != 2016698739)
          {
            if (a2 != 2019963440) {
              goto LABEL_7023;
            }
            goto LABEL_449;
          }
LABEL_525:
          if (a3) {
            BOOL v69 = a4 == 0;
          }
          else {
            BOOL v69 = 1;
          }
          int v70 = !v69;
          if (!v69 && a5 && a6) {
            goto LABEL_538;
          }
          if (a5) {
            int v70 = 0;
          }
          if (v70 == 1 && a6)
          {
LABEL_538:
            float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444;
            if (!a7)
            {
              unsigned int v71 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v71 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444_neon_fp16;
              float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444;
              goto LABEL_7028;
            }
            goto LABEL_7022;
          }
          if (a3) {
            BOOL v214 = a4 == 0;
          }
          else {
            BOOL v214 = 0;
          }
          int v215 = !v214;
          if (a6 && !v215 && !a5 || a5 && v215 != 1 && a6)
          {
            float v10 = vt_Copy_xf444_TRC_Mat_TRC_xf444;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v216 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v216 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf444_TRC_Mat_TRC_xf444_neon_fp16;
            float v10 = vt_Copy_xf444_TRC_Mat_TRC_xf444;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_xf444_rgb_xf444;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v606 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v606 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf444_rgb_xf444_neon_fp16;
            float v10 = vt_Copy_xf444_rgb_xf444;
            goto LABEL_7028;
          }
          goto LABEL_6900;
        }
        if (a2 <= 2016567666)
        {
          if (a2 != 1983013176)
          {
            if (a2 != 1983144248)
            {
              int v18 = 1999843442;
LABEL_209:
              if (a2 != v18) {
                goto LABEL_7023;
              }
LABEL_574:
              if (a3) {
                BOOL v77 = a4 == 0;
              }
              else {
                BOOL v77 = 1;
              }
              int v78 = !v77;
              float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_l10r;
              if (!v77 && a5 && a6) {
                goto LABEL_7022;
              }
              if (a5) {
                int v78 = 0;
              }
              float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_l10r;
              if (v78 == 1)
              {
                if (a6) {
                  goto LABEL_7022;
                }
              }
              BOOL v79 = a3 && a4 == 0;
              BOOL v80 = !v79;
              float v10 = vt_Copy_xf444_TRC_Mat_TRC_l10r;
              if (a6)
              {
                if (!v80 && !a5) {
                  goto LABEL_7022;
                }
              }
              float v10 = vt_Copy_xf444_TRC_Mat_TRC_l10r;
              if (a5)
              {
                if (!v80 && a6) {
                  goto LABEL_7022;
                }
              }
              uint64_t result = 0;
              BOOL v50 = (a4 | a3 | a5 | a6) == 0;
              float v10 = vt_Copy_xf444_rgb_l10r;
              goto LABEL_6592;
            }
LABEL_220:
            if (a3) {
              BOOL v26 = a4 == 0;
            }
            else {
              BOOL v26 = 1;
            }
            int v27 = !v26;
            if (!v26 && a5 && a6) {
              goto LABEL_233;
            }
            if (a5) {
              int v27 = 0;
            }
            if (v27 == 1 && a6)
            {
LABEL_233:
              float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf;
              if (!a7)
              {
                unsigned int v28 = getVectorCapabilities();
                uint64_t result = 0;
                BOOL v29 = v28 >= 2;
                CFAllocatorRef v30 = vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf_neon_fp16;
                float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_444vf;
                goto LABEL_7028;
              }
              goto LABEL_7022;
            }
            if (a3) {
              BOOL v365 = a4 == 0;
            }
            else {
              BOOL v365 = 0;
            }
            int v366 = !v365;
            if (a6 && !v366 && !a5 || a5 && v366 != 1 && a6)
            {
              float v10 = vt_Copy_xf444_TRC_Mat_TRC_444vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v367 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v367 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf444_TRC_Mat_TRC_444vf_neon_fp16;
              float v10 = vt_Copy_xf444_TRC_Mat_TRC_444vf;
              goto LABEL_7028;
            }
            if (!(a4 | a3 | a5 | a6))
            {
              float v10 = vt_Copy_xf444_rgb_444vf;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v828 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v828 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf444_rgb_444vf_neon_fp16;
              float v10 = vt_Copy_xf444_rgb_444vf;
              goto LABEL_7028;
            }
            goto LABEL_6900;
          }
          goto LABEL_354;
        }
        if (a2 == 2016567667)
        {
LABEL_434:
          if (a3) {
            BOOL v54 = a4 == 0;
          }
          else {
            BOOL v54 = 1;
          }
          int v55 = !v54;
          if (!v54 && a5 && a6) {
            goto LABEL_447;
          }
          if (a5) {
            int v55 = 0;
          }
          if (v55 == 1 && a6)
          {
LABEL_447:
            float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422;
            if (!a7)
            {
              unsigned int v56 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v56 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422_neon_fp16;
              float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422;
              goto LABEL_7028;
            }
            goto LABEL_7022;
          }
          if (a3) {
            BOOL v203 = a4 == 0;
          }
          else {
            BOOL v203 = 0;
          }
          int v204 = !v203;
          if (a6 && !v204 && !a5 || a5 && v204 != 1 && a6)
          {
            float v10 = vt_Copy_xf444_TRC_Mat_TRC_xf422;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v205 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v205 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf444_TRC_Mat_TRC_xf422_neon_fp16;
            float v10 = vt_Copy_xf444_TRC_Mat_TRC_xf422;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_xf444_rgb_xf422;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v605 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v605 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf444_rgb_xf422_neon_fp16;
            float v10 = vt_Copy_xf444_rgb_xf422;
            goto LABEL_7028;
          }
          goto LABEL_6900;
        }
        if (a2 != 2016686640)
        {
          int v17 = 2016686642;
LABEL_433:
          if (a2 != v17) {
            goto LABEL_7023;
          }
          goto LABEL_434;
        }
        goto LABEL_449;
      }
      if (a2 <= 1952855091)
      {
        if (a2 > 1949589874)
        {
          if (a2 == 1949589875) {
            goto LABEL_525;
          }
          if (a2 != 1952854576)
          {
            int v17 = 1952854578;
            goto LABEL_433;
          }
LABEL_449:
          if (a3) {
            BOOL v57 = a4 == 0;
          }
          else {
            BOOL v57 = 1;
          }
          int v58 = !v57;
          if (!v57 && a5 && a6) {
            goto LABEL_462;
          }
          if (a5) {
            int v58 = 0;
          }
          if (v58 == 1 && a6)
          {
LABEL_462:
            float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420;
            if (!a7)
            {
              unsigned int v59 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v59 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420_neon_fp16;
              float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420;
              goto LABEL_7028;
            }
            goto LABEL_7022;
          }
          if (a3) {
            BOOL v291 = a4 == 0;
          }
          else {
            BOOL v291 = 0;
          }
          int v292 = !v291;
          if (a6 && !v292 && !a5 || a5 && v292 != 1 && a6)
          {
            float v10 = vt_Copy_xf444_TRC_Mat_TRC_xf420;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v293 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v293 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf444_TRC_Mat_TRC_xf420_neon_fp16;
            float v10 = vt_Copy_xf444_TRC_Mat_TRC_xf420;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_xf444_rgb_xf420;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v658 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v658 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf444_rgb_xf420_neon_fp16;
            float v10 = vt_Copy_xf444_rgb_xf420;
            goto LABEL_7028;
          }
          goto LABEL_6900;
        }
        if (a2 != 1937125938)
        {
          if (a2 != 1937126452)
          {
            int v17 = 1949458803;
            goto LABEL_433;
          }
LABEL_696:
          if (a3) {
            BOOL v96 = a4 == 0;
          }
          else {
            BOOL v96 = 1;
          }
          int v97 = !v96;
          float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444;
          if (!v96 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v97 = 0;
          }
          float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf444;
          if (v97 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v98 = a3 && a4 == 0;
          BOOL v99 = !v98;
          float v10 = vt_Copy_xf444_TRC_Mat_TRC_xf444;
          if (a6)
          {
            if (!v99 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_xf444_TRC_Mat_TRC_xf444;
          if (a5)
          {
            if (!v99 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_xf444_rgb_xf444;
          goto LABEL_6592;
        }
LABEL_670:
        if (a3) {
          BOOL v92 = a4 == 0;
        }
        else {
          BOOL v92 = 1;
        }
        int v93 = !v92;
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422;
        if (!v92 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v93 = 0;
        }
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf422;
        if (v93 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v94 = a3 && a4 == 0;
        BOOL v95 = !v94;
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_xf422;
        if (a6)
        {
          if (!v95 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_xf422;
        if (a5)
        {
          if (!v95 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_xf444_rgb_xf422;
        goto LABEL_6592;
      }
      if (a2 <= 1953903667)
      {
        if (a2 == 1952855092) {
          goto LABEL_525;
        }
        if (a2 != 1953903152)
        {
          int v17 = 1953903154;
          goto LABEL_433;
        }
        goto LABEL_449;
      }
      if (a2 == 1953903668) {
        goto LABEL_525;
      }
      if (a2 != 1982882104)
      {
        if (a2 != 1983000886) {
          goto LABEL_7023;
        }
        if (a3) {
          BOOL v65 = a4 == 0;
        }
        else {
          BOOL v65 = 1;
        }
        int v66 = !v65;
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_v216;
        if (!v65 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v66 = 0;
        }
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_v216;
        if (v66 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v67 = a3 && a4 == 0;
        BOOL v68 = !v67;
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_v216;
        if (a6)
        {
          if (!v68 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_v216;
        if (a5)
        {
          if (!v68 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_xf444_rgb_v216;
        goto LABEL_6592;
      }
LABEL_655:
      if (a3) {
        BOOL v89 = a4 == 0;
      }
      else {
        BOOL v89 = 1;
      }
      int v90 = !v89;
      if (!v89 && a5 && a6) {
        goto LABEL_668;
      }
      if (a5) {
        int v90 = 0;
      }
      if (v90 == 1 && a6)
      {
LABEL_668:
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf;
        if (!a7)
        {
          unsigned int v91 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v91 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf_neon_fp16;
          float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_420vf;
          goto LABEL_7028;
        }
        goto LABEL_7022;
      }
      if (a3) {
        BOOL v386 = a4 == 0;
      }
      else {
        BOOL v386 = 0;
      }
      int v387 = !v386;
      if (a6 && !v387 && !a5 || a5 && v387 != 1 && a6)
      {
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_420vf;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v388 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v388 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf444_TRC_Mat_TRC_420vf_neon_fp16;
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_420vf;
        goto LABEL_7028;
      }
      if (!(a4 | a3 | a5 | a6))
      {
        float v10 = vt_Copy_xf444_rgb_420vf;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v833 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v833 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf444_rgb_420vf_neon_fp16;
        float v10 = vt_Copy_xf444_rgb_420vf;
        goto LABEL_7028;
      }
      goto LABEL_6900;
    }
    if (a2 > 1380411456)
    {
      if (a2 > 1932681586)
      {
        if (a2 > 1936077361)
        {
          if (a2 == 1936077362) {
            goto LABEL_670;
          }
          if (a2 == 1936077876) {
            goto LABEL_696;
          }
          int v31 = 1937125936;
        }
        else
        {
          if (a2 == 1932681587) {
            goto LABEL_670;
          }
          if (a2 == 1932812659) {
            goto LABEL_696;
          }
          int v31 = 1936077360;
        }
        if (a2 != v31) {
          goto LABEL_7023;
        }
        if (a3) {
          BOOL v72 = a4 == 0;
        }
        else {
          BOOL v72 = 1;
        }
        int v73 = !v72;
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420;
        if (!v72 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v73 = 0;
        }
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_xf420;
        if (v73 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v74 = a3 && a4 == 0;
        BOOL v75 = !v74;
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_xf420;
        if (a6)
        {
          if (!v75 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_xf420;
        if (a5)
        {
          if (!v75 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_xf444_rgb_xf420;
        goto LABEL_6592;
      }
      if (a2 > 1647719520)
      {
        if (a2 == 1647719521)
        {
          if (a3) {
            BOOL v287 = a4 == 0;
          }
          else {
            BOOL v287 = 1;
          }
          int v288 = !v287;
          float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_b64a;
          if (!v287 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v288 = 0;
          }
          float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_b64a;
          if (v288 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v289 = a3 && a4 == 0;
          BOOL v290 = !v289;
          float v10 = vt_Copy_xf444_TRC_Mat_TRC_b64a;
          if (a6)
          {
            if (!v290 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_xf444_TRC_Mat_TRC_b64a;
          if (a5)
          {
            if (!v290 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_xf444_rgb_b64a;
          goto LABEL_6592;
        }
        if (a2 != 1815162994)
        {
          if (a2 != 1815491698) {
            goto LABEL_7023;
          }
          if (a3) {
            BOOL v46 = a4 == 0;
          }
          else {
            BOOL v46 = 1;
          }
          int v47 = !v46;
          float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_l64r;
          if (!v46 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v47 = 0;
          }
          float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_l64r;
          if (v47 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v48 = a3 && a4 == 0;
          BOOL v49 = !v48;
          float v10 = vt_Copy_xf444_TRC_Mat_TRC_l64r;
          if (a6)
          {
            if (!v49 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_xf444_TRC_Mat_TRC_l64r;
          if (a5)
          {
            if (!v49 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_xf444_rgb_l64r;
          goto LABEL_6592;
        }
        goto LABEL_574;
      }
      if (a2 != 1380411457)
      {
        if (a2 != 1630697081)
        {
          int v18 = 1647534392;
          goto LABEL_209;
        }
LABEL_600:
        if (a3) {
          BOOL v81 = a4 == 0;
        }
        else {
          BOOL v81 = 1;
        }
        int v82 = !v81;
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_2vuyf;
        if (!v81 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v82 = 0;
        }
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_2vuyf;
        if (v82 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v83 = a3 && a4 == 0;
        BOOL v84 = !v83;
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_2vuyf;
        if (a6)
        {
          if (!v84 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_2vuyf;
        if (a5)
        {
          if (!v84 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_xf444_rgb_2vuyf;
        goto LABEL_6592;
      }
      if (a3) {
        BOOL v280 = a4 == 0;
      }
      else {
        BOOL v280 = 1;
      }
      int v281 = !v280;
      if (!v280 && a5 && a6) {
        goto LABEL_1965;
      }
      if (a5) {
        int v281 = 0;
      }
      if (v281 == 1 && a6)
      {
LABEL_1965:
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v282 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v282 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA_neon_fp16;
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_RGhA;
        goto LABEL_7028;
      }
      if (a3) {
        BOOL v655 = a4 == 0;
      }
      else {
        BOOL v655 = 0;
      }
      int v656 = !v655;
      if (a6 && !v656 && !a5 || a5 && v656 != 1 && a6)
      {
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_RGhA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v657 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v657 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf444_TRC_Mat_TRC_RGhA_neon_fp16;
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_RGhA;
        goto LABEL_7028;
      }
      if (!(a4 | a3 | a5 | a6))
      {
        float v10 = vt_Copy_xf444_rgb_RGhA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v1066 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v1066 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf444_rgb_RGhA_neon_fp16;
        float v10 = vt_Copy_xf444_rgb_RGhA;
        goto LABEL_7028;
      }
    }
    else
    {
      if (a2 <= 875704949)
      {
        if (a2 > 875704421)
        {
          if (a2 != 875704422 && a2 != 875704438)
          {
            if (a2 != 875704934) {
              goto LABEL_7023;
            }
            goto LABEL_354;
          }
          goto LABEL_655;
        }
        if (a2 != 32)
        {
          if (a2 != 846624102 && a2 != 846624121) {
            goto LABEL_7023;
          }
          goto LABEL_600;
        }
LABEL_626:
        if (a1 == 1932812659 || a1 == 2016698739 || a1 == 1949589875)
        {
          if (a3) {
            BOOL v85 = a4 == 0;
          }
          else {
            BOOL v85 = 1;
          }
          int v86 = !v85;
          if (v85 || !a5 || !a6)
          {
            if (a5) {
              int v86 = 0;
            }
            if (v86 != 1 || !a6)
            {
              if (a3) {
                BOOL v87 = a4 == 0;
              }
              else {
                BOOL v87 = 0;
              }
              int v88 = !v87;
              if ((!a6 || v88 || a5) && (!a5 || v88 == 1 || !a6)) {
                goto LABEL_5439;
              }
              goto LABEL_5369;
            }
          }
        }
        else
        {
          if (a3) {
            BOOL v383 = a4 == 0;
          }
          else {
            BOOL v383 = 1;
          }
          int v384 = !v383;
          if (v383 || !a5 || !a6)
          {
            if (a5) {
              int v384 = 0;
            }
            if (v384 != 1 || !a6)
            {
              if (a3) {
                BOOL v830 = a4 == 0;
              }
              else {
                BOOL v830 = 0;
              }
              int v831 = !v830;
              if ((!a6 || v831 || a5) && (!a5 || v831 == 1 || !a6))
              {
LABEL_5439:
                if (!(a4 | a3 | a5 | a6))
                {
                  float v10 = vt_Copy_xf444_rgb_BGRA;
                  if (a7) {
                    goto LABEL_7022;
                  }
                  unsigned int v849 = getVectorCapabilities();
                  uint64_t result = 0;
                  BOOL v29 = v849 >= 2;
                  CFAllocatorRef v30 = vt_Copy_xf444_rgb_BGRA_neon_fp16;
                  float v10 = vt_Copy_xf444_rgb_BGRA;
                  goto LABEL_7028;
                }
                goto LABEL_6900;
              }
LABEL_5369:
              float v10 = vt_Copy_xf444_TRC_Mat_TRC_BGRA;
              if (a7) {
                goto LABEL_7022;
              }
              unsigned int v832 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v832 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf444_TRC_Mat_TRC_BGRA_neon_fp16;
              float v10 = vt_Copy_xf444_TRC_Mat_TRC_BGRA;
              goto LABEL_7028;
            }
          }
        }
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v385 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v385 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA_neon_fp16;
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_BGRA;
        goto LABEL_7028;
      }
      if (a2 <= 1111970368)
      {
        if (a2 != 875704950)
        {
          if (a2 != 875836518 && a2 != 875836534) {
            goto LABEL_7023;
          }
          goto LABEL_220;
        }
LABEL_354:
        if (a3) {
          BOOL v41 = a4 == 0;
        }
        else {
          BOOL v41 = 1;
        }
        int v42 = !v41;
        if (!v41 && a5 && a6) {
          goto LABEL_367;
        }
        if (a5) {
          int v42 = 0;
        }
        if (v42 == 1 && a6)
        {
LABEL_367:
          float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf;
          if (!a7)
          {
            unsigned int v43 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v43 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf_neon_fp16;
            float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_422vf;
            goto LABEL_7028;
          }
          goto LABEL_7022;
        }
        if (a3) {
          BOOL v372 = a4 == 0;
        }
        else {
          BOOL v372 = 0;
        }
        int v373 = !v372;
        if (a6 && !v373 && !a5 || a5 && v373 != 1 && a6)
        {
          float v10 = vt_Copy_xf444_TRC_Mat_TRC_422vf;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v374 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v374 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf444_TRC_Mat_TRC_422vf_neon_fp16;
          float v10 = vt_Copy_xf444_TRC_Mat_TRC_422vf;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_xf444_rgb_422vf;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v829 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v829 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf444_rgb_422vf_neon_fp16;
          float v10 = vt_Copy_xf444_rgb_422vf;
          goto LABEL_7028;
        }
        goto LABEL_6900;
      }
      if (a2 == 1111970369 || a2 == 1380401729) {
        goto LABEL_626;
      }
      if (a2 != 1380410945) {
        goto LABEL_7023;
      }
      if (a3) {
        BOOL v60 = a4 == 0;
      }
      else {
        BOOL v60 = 1;
      }
      int v61 = !v60;
      if (!v60 && a5 && a6) {
        goto LABEL_484;
      }
      if (a5) {
        int v61 = 0;
      }
      if (v61 == 1 && a6)
      {
LABEL_484:
        float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA;
        if (!a7)
        {
          unsigned int v62 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v62 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA_neon_fp16;
          float v10 = vt_Copy_xf444_TRC_Tone_Mat_TRC_RGfA;
          goto LABEL_7028;
        }
        goto LABEL_7022;
      }
      if (a3) {
        BOOL v640 = a4 == 0;
      }
      else {
        BOOL v640 = 0;
      }
      int v641 = !v640;
      if (a6 && !v641 && !a5 || a5 && v641 != 1 && a6)
      {
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_RGfA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v642 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v642 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf444_TRC_Mat_TRC_RGfA_neon_fp16;
        float v10 = vt_Copy_xf444_TRC_Mat_TRC_RGfA;
        goto LABEL_7028;
      }
      if (!(a4 | a3 | a5 | a6))
      {
        float v10 = vt_Copy_xf444_rgb_RGfA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v1057 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v1057 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf444_rgb_RGfA_neon_fp16;
        float v10 = vt_Copy_xf444_rgb_RGfA;
        goto LABEL_7028;
      }
    }
LABEL_6990:
    float v10 = 0;
    goto LABEL_7022;
  }
  if (a1 == 1937126452) {
    goto LABEL_82;
  }
  if (a1 != 1949458803)
  {
    int v14 = 1949589875;
    goto LABEL_81;
  }
LABEL_90:
  float v10 = 0;
  if (a2 > 1937125937)
  {
    if (a2 > 1983013175)
    {
      if (a2 > 2016687155)
      {
        if (a2 > 2019963441)
        {
          if (a2 <= 2037741157)
          {
            if (a2 != 2019963442)
            {
              if (a2 != 2019963956) {
                goto LABEL_7023;
              }
              goto LABEL_857;
            }
            goto LABEL_780;
          }
          if (a2 == 2037741158 || a2 == 2037741171)
          {
            if (a3) {
              BOOL v199 = a4 == 0;
            }
            else {
              BOOL v199 = 1;
            }
            int v200 = !v199;
            float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_yuvsf;
            if (!v199 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v200 = 0;
            }
            float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_yuvsf;
            if (v200 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v201 = a3 && a4 == 0;
            BOOL v202 = !v201;
            float v10 = vt_Copy_xf422_TRC_Mat_TRC_yuvsf;
            if (a6)
            {
              if (!v202 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_xf422_TRC_Mat_TRC_yuvsf;
            if (a5)
            {
              if (!v202 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_xf422_rgb_yuvsf;
            goto LABEL_6592;
          }
LABEL_7023:
          if (!a8) {
            return result;
          }
          goto LABEL_7024;
        }
        if (a2 != 2016687156 && a2 != 2016698739)
        {
          if (a2 != 2019963440) {
            goto LABEL_7023;
          }
LABEL_795:
          if (a3) {
            BOOL v110 = a4 == 0;
          }
          else {
            BOOL v110 = 1;
          }
          int v111 = !v110;
          if (!v110 && a5 && a6) {
            goto LABEL_808;
          }
          if (a5) {
            int v111 = 0;
          }
          if (v111 == 1 && a6)
          {
LABEL_808:
            float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420;
            if (!a7)
            {
              unsigned int v112 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v112 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420_neon_fp16;
              float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420;
              goto LABEL_7028;
            }
            goto LABEL_7022;
          }
          if (a3) {
            BOOL v393 = a4 == 0;
          }
          else {
            BOOL v393 = 0;
          }
          int v394 = !v393;
          if (a6 && !v394 && !a5 || a5 && v394 != 1 && a6)
          {
            float v10 = vt_Copy_xf422_TRC_Mat_TRC_xf420;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v395 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v395 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf422_TRC_Mat_TRC_xf420_neon_fp16;
            float v10 = vt_Copy_xf422_TRC_Mat_TRC_xf420;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_xf422_rgb_xf420;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v834 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v834 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf422_rgb_xf420_neon_fp16;
            float v10 = vt_Copy_xf422_rgb_xf420;
            goto LABEL_7028;
          }
          goto LABEL_6979;
        }
LABEL_857:
        if (a3) {
          BOOL v120 = a4 == 0;
        }
        else {
          BOOL v120 = 1;
        }
        int v121 = !v120;
        if (!v120 && a5 && a6) {
          goto LABEL_870;
        }
        if (a5) {
          int v121 = 0;
        }
        if (v121 == 1 && a6)
        {
LABEL_870:
          float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444;
          if (!a7)
          {
            unsigned int v122 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v122 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444_neon_fp16;
            float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444;
            goto LABEL_7028;
          }
LABEL_7022:
          uint64_t result = 0;
          goto LABEL_7023;
        }
        if (a3) {
          BOOL v242 = a4 == 0;
        }
        else {
          BOOL v242 = 0;
        }
        int v243 = !v242;
        if (a6 && !v243 && !a5 || a5 && v243 != 1 && a6)
        {
          float v10 = vt_Copy_xf422_TRC_Mat_TRC_xf444;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v244 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v244 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf422_TRC_Mat_TRC_xf444_neon_fp16;
          float v10 = vt_Copy_xf422_TRC_Mat_TRC_xf444;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_xf422_rgb_xf444;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v639 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v639 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf422_rgb_xf444_neon_fp16;
          float v10 = vt_Copy_xf422_rgb_xf444;
          goto LABEL_7028;
        }
LABEL_6979:
        float v10 = 0;
        goto LABEL_7022;
      }
      if (a2 <= 2016567666)
      {
        if (a2 != 1983013176)
        {
          if (a2 == 1983144248)
          {
            if (a3) {
              BOOL v368 = a4 == 0;
            }
            else {
              BOOL v368 = 1;
            }
            int v369 = !v368;
            float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf;
            if (!v368 && a5 && a6) {
              goto LABEL_7022;
            }
            if (a5) {
              int v369 = 0;
            }
            float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf;
            if (v369 == 1)
            {
              if (a6) {
                goto LABEL_7022;
              }
            }
            BOOL v370 = a3 && a4 == 0;
            BOOL v371 = !v370;
            float v10 = vt_Copy_xf422_TRC_Mat_TRC_444vf;
            if (a6)
            {
              if (!v371 && !a5) {
                goto LABEL_7022;
              }
            }
            float v10 = vt_Copy_xf422_TRC_Mat_TRC_444vf;
            if (a5)
            {
              if (!v371 && a6) {
                goto LABEL_7022;
              }
            }
            uint64_t result = 0;
            BOOL v50 = (a4 | a3 | a5 | a6) == 0;
            float v10 = vt_Copy_xf422_rgb_444vf;
            goto LABEL_6592;
          }
          int v20 = 1999843442;
LABEL_266:
          if (a2 != v20) {
            goto LABEL_7023;
          }
LABEL_902:
          if (a3) {
            BOOL v127 = a4 == 0;
          }
          else {
            BOOL v127 = 1;
          }
          int v128 = !v127;
          float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_l10r;
          if (!v127 && a5 && a6) {
            goto LABEL_7022;
          }
          if (a5) {
            int v128 = 0;
          }
          float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_l10r;
          if (v128 == 1)
          {
            if (a6) {
              goto LABEL_7022;
            }
          }
          BOOL v129 = a3 && a4 == 0;
          BOOL v130 = !v129;
          float v10 = vt_Copy_xf422_TRC_Mat_TRC_l10r;
          if (a6)
          {
            if (!v130 && !a5) {
              goto LABEL_7022;
            }
          }
          float v10 = vt_Copy_xf422_TRC_Mat_TRC_l10r;
          if (a5)
          {
            if (!v130 && a6) {
              goto LABEL_7022;
            }
          }
          uint64_t result = 0;
          BOOL v50 = (a4 | a3 | a5 | a6) == 0;
          float v10 = vt_Copy_xf422_rgb_l10r;
          goto LABEL_6592;
        }
LABEL_729:
        if (a3) {
          BOOL v100 = a4 == 0;
        }
        else {
          BOOL v100 = 1;
        }
        int v101 = !v100;
        if (!v100 && a5 && a6) {
          goto LABEL_742;
        }
        if (a5) {
          int v101 = 0;
        }
        if (v101 == 1 && a6)
        {
LABEL_742:
          float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf;
          if (!a7)
          {
            unsigned int v102 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v102 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf_neon_fp16;
            float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_422vf;
            goto LABEL_7028;
          }
          goto LABEL_7022;
        }
        if (a3) {
          BOOL v495 = a4 == 0;
        }
        else {
          BOOL v495 = 0;
        }
        int v496 = !v495;
        if (a6 && !v496 && !a5 || a5 && v496 != 1 && a6)
        {
          float v10 = vt_Copy_xf422_TRC_Mat_TRC_422vf;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v497 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v497 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf422_TRC_Mat_TRC_422vf_neon_fp16;
          float v10 = vt_Copy_xf422_TRC_Mat_TRC_422vf;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_xf422_rgb_422vf;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v955 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v955 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf422_rgb_422vf_neon_fp16;
          float v10 = vt_Copy_xf422_rgb_422vf;
          goto LABEL_7028;
        }
        goto LABEL_6979;
      }
      if (a2 == 2016567667)
      {
LABEL_780:
        if (a3) {
          BOOL v107 = a4 == 0;
        }
        else {
          BOOL v107 = 1;
        }
        int v108 = !v107;
        if (!v107 && a5 && a6) {
          goto LABEL_793;
        }
        if (a5) {
          int v108 = 0;
        }
        if (v108 == 1 && a6)
        {
LABEL_793:
          float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422;
          if (!a7)
          {
            unsigned int v109 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v109 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422_neon_fp16;
            float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422;
            goto LABEL_7028;
          }
          goto LABEL_7022;
        }
        if (a3) {
          BOOL v239 = a4 == 0;
        }
        else {
          BOOL v239 = 0;
        }
        int v240 = !v239;
        if ((!a6 || v240 || a5) && (!a5 || v240 == 1 || !a6))
        {
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_xf422_rgb_xf422;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v638 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v638 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf422_rgb_xf422_neon_fp16;
            float v10 = vt_Copy_xf422_rgb_xf422;
            goto LABEL_7028;
          }
          goto LABEL_6979;
        }
        float v10 = vt_Copy_xf422_TRC_Mat_TRC_xf422;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v241 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v241 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf422_TRC_Mat_TRC_xf422_neon_fp16;
        float v10 = vt_Copy_xf422_TRC_Mat_TRC_xf422;
        goto LABEL_7028;
      }
      if (a2 == 2016686640) {
        goto LABEL_795;
      }
      int v19 = 2016686642;
LABEL_779:
      if (a2 != v19) {
        goto LABEL_7023;
      }
      goto LABEL_780;
    }
    if (a2 <= 1952855091)
    {
      if (a2 > 1949589874)
      {
        if (a2 == 1949589875) {
          goto LABEL_857;
        }
        if (a2 == 1952854576) {
          goto LABEL_795;
        }
        int v19 = 1952854578;
        goto LABEL_779;
      }
      if (a2 != 1937125938)
      {
        if (a2 != 1937126452)
        {
          int v19 = 1949458803;
          goto LABEL_779;
        }
LABEL_1024:
        if (a3) {
          BOOL v146 = a4 == 0;
        }
        else {
          BOOL v146 = 1;
        }
        int v147 = !v146;
        float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444;
        if (!v146 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v147 = 0;
        }
        float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf444;
        if (v147 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v148 = a3 && a4 == 0;
        BOOL v149 = !v148;
        float v10 = vt_Copy_xf422_TRC_Mat_TRC_xf444;
        if (a6)
        {
          if (!v149 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_xf422_TRC_Mat_TRC_xf444;
        if (a5)
        {
          if (!v149 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_xf422_rgb_xf444;
        goto LABEL_6592;
      }
LABEL_998:
      if (a3) {
        BOOL v142 = a4 == 0;
      }
      else {
        BOOL v142 = 1;
      }
      int v143 = !v142;
      float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422;
      if (!v142 && a5 && a6) {
        goto LABEL_7022;
      }
      if (a5) {
        int v143 = 0;
      }
      float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf422;
      if (v143 == 1)
      {
        if (a6) {
          goto LABEL_7022;
        }
      }
      BOOL v144 = a3 && a4 == 0;
      BOOL v145 = !v144;
      float v10 = vt_Copy_xf422_TRC_Mat_TRC_xf422;
      if (a6)
      {
        if (!v145 && !a5) {
          goto LABEL_7022;
        }
      }
      float v10 = vt_Copy_xf422_TRC_Mat_TRC_xf422;
      if (a5)
      {
        if (!v145 && a6) {
          goto LABEL_7022;
        }
      }
      uint64_t result = 0;
      BOOL v50 = (a4 | a3 | a5 | a6) == 0;
      float v10 = vt_Copy_xf422_rgb_xf422;
      goto LABEL_6592;
    }
    if (a2 <= 1953903667)
    {
      if (a2 == 1952855092) {
        goto LABEL_857;
      }
      if (a2 == 1953903152) {
        goto LABEL_795;
      }
      int v19 = 1953903154;
      goto LABEL_779;
    }
    if (a2 == 1953903668) {
      goto LABEL_857;
    }
    if (a2 != 1982882104)
    {
      if (a2 != 1983000886) {
        goto LABEL_7023;
      }
      if (a3) {
        BOOL v116 = a4 == 0;
      }
      else {
        BOOL v116 = 1;
      }
      int v117 = !v116;
      float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_v216;
      if (!v116 && a5 && a6) {
        goto LABEL_7022;
      }
      if (a5) {
        int v117 = 0;
      }
      float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_v216;
      if (v117 == 1)
      {
        if (a6) {
          goto LABEL_7022;
        }
      }
      BOOL v118 = a3 && a4 == 0;
      BOOL v119 = !v118;
      float v10 = vt_Copy_xf422_TRC_Mat_TRC_v216;
      if (a6)
      {
        if (!v119 && !a5) {
          goto LABEL_7022;
        }
      }
      float v10 = vt_Copy_xf422_TRC_Mat_TRC_v216;
      if (a5)
      {
        if (!v119 && a6) {
          goto LABEL_7022;
        }
      }
      uint64_t result = 0;
      BOOL v50 = (a4 | a3 | a5 | a6) == 0;
      float v10 = vt_Copy_xf422_rgb_v216;
      goto LABEL_6592;
    }
LABEL_983:
    if (a3) {
      BOOL v139 = a4 == 0;
    }
    else {
      BOOL v139 = 1;
    }
    int v140 = !v139;
    if (v139 || !a5 || !a6)
    {
      if (a5) {
        int v140 = 0;
      }
      if (v140 != 1 || !a6)
      {
        if (a3) {
          BOOL v501 = a4 == 0;
        }
        else {
          BOOL v501 = 0;
        }
        int v502 = !v501;
        if (a6 && !v502 && !a5 || a5 && v502 != 1 && a6)
        {
          float v10 = vt_Copy_xf422_TRC_Mat_TRC_420vf;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v503 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v503 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf422_TRC_Mat_TRC_420vf_neon_fp16;
          float v10 = vt_Copy_xf422_TRC_Mat_TRC_420vf;
          goto LABEL_7028;
        }
        if (!(a4 | a3 | a5 | a6))
        {
          float v10 = vt_Copy_xf422_rgb_420vf;
          if (a7) {
            goto LABEL_7022;
          }
          unsigned int v959 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v959 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf422_rgb_420vf_neon_fp16;
          float v10 = vt_Copy_xf422_rgb_420vf;
          goto LABEL_7028;
        }
        goto LABEL_6979;
      }
    }
    float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf;
    if (a7) {
      goto LABEL_7022;
    }
    unsigned int v141 = getVectorCapabilities();
    uint64_t result = 0;
    BOOL v29 = v141 >= 2;
    CFAllocatorRef v30 = vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf_neon_fp16;
    float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_420vf;
LABEL_7028:
    if (v29) {
      float v10 = v30;
    }
    if (!a8) {
      return result;
    }
LABEL_7024:
    *a8 = v10;
    return result;
  }
  if (a2 > 1380411456)
  {
    if (a2 > 1932681586)
    {
      if (a2 > 1936077361)
      {
        if (a2 == 1936077362) {
          goto LABEL_998;
        }
        if (a2 == 1936077876) {
          goto LABEL_1024;
        }
        int v36 = 1937125936;
      }
      else
      {
        if (a2 == 1932681587) {
          goto LABEL_998;
        }
        if (a2 == 1932812659) {
          goto LABEL_1024;
        }
        int v36 = 1936077360;
      }
      if (a2 != v36) {
        goto LABEL_7023;
      }
      if (a3) {
        BOOL v123 = a4 == 0;
      }
      else {
        BOOL v123 = 1;
      }
      int v124 = !v123;
      float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420;
      if (!v123 && a5 && a6) {
        goto LABEL_7022;
      }
      if (a5) {
        int v124 = 0;
      }
      float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_xf420;
      if (v124 == 1)
      {
        if (a6) {
          goto LABEL_7022;
        }
      }
      BOOL v125 = a3 && a4 == 0;
      BOOL v126 = !v125;
      float v10 = vt_Copy_xf422_TRC_Mat_TRC_xf420;
      if (a6)
      {
        if (!v126 && !a5) {
          goto LABEL_7022;
        }
      }
      float v10 = vt_Copy_xf422_TRC_Mat_TRC_xf420;
      if (a5)
      {
        if (!v126 && a6) {
          goto LABEL_7022;
        }
      }
      uint64_t result = 0;
      BOOL v50 = (a4 | a3 | a5 | a6) == 0;
      float v10 = vt_Copy_xf422_rgb_xf420;
      goto LABEL_6592;
    }
    if (a2 > 1647719520)
    {
      if (a2 == 1647719521)
      {
        if (a3) {
          BOOL v389 = a4 == 0;
        }
        else {
          BOOL v389 = 1;
        }
        int v390 = !v389;
        float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_b64a;
        if (!v389 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v390 = 0;
        }
        float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_b64a;
        if (v390 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v391 = a3 && a4 == 0;
        BOOL v392 = !v391;
        float v10 = vt_Copy_xf422_TRC_Mat_TRC_b64a;
        if (a6)
        {
          if (!v392 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_xf422_TRC_Mat_TRC_b64a;
        if (a5)
        {
          if (!v392 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_xf422_rgb_b64a;
        goto LABEL_6592;
      }
      if (a2 != 1815162994)
      {
        if (a2 != 1815491698) {
          goto LABEL_7023;
        }
        if (a3) {
          BOOL v103 = a4 == 0;
        }
        else {
          BOOL v103 = 1;
        }
        int v104 = !v103;
        float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_l64r;
        if (!v103 && a5 && a6) {
          goto LABEL_7022;
        }
        if (a5) {
          int v104 = 0;
        }
        float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_l64r;
        if (v104 == 1)
        {
          if (a6) {
            goto LABEL_7022;
          }
        }
        BOOL v105 = a3 && a4 == 0;
        BOOL v106 = !v105;
        float v10 = vt_Copy_xf422_TRC_Mat_TRC_l64r;
        if (a6)
        {
          if (!v106 && !a5) {
            goto LABEL_7022;
          }
        }
        float v10 = vt_Copy_xf422_TRC_Mat_TRC_l64r;
        if (a5)
        {
          if (!v106 && a6) {
            goto LABEL_7022;
          }
        }
        uint64_t result = 0;
        BOOL v50 = (a4 | a3 | a5 | a6) == 0;
        float v10 = vt_Copy_xf422_rgb_l64r;
        goto LABEL_6592;
      }
      goto LABEL_902;
    }
    if (a2 == 1380411457)
    {
      if (a3) {
        BOOL v362 = a4 == 0;
      }
      else {
        BOOL v362 = 1;
      }
      int v363 = !v362;
      if (!v362 && a5 && a6) {
        goto LABEL_2488;
      }
      if (a5) {
        int v363 = 0;
      }
      if (v363 == 1 && a6)
      {
LABEL_2488:
        float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v364 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v364 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA_neon_fp16;
        float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_RGhA;
        goto LABEL_7028;
      }
      if (a3) {
        BOOL v825 = a4 == 0;
      }
      else {
        BOOL v825 = 0;
      }
      int v826 = !v825;
      if (a6 && !v826 && !a5 || a5 && v826 != 1 && a6)
      {
        float v10 = vt_Copy_xf422_TRC_Mat_TRC_RGhA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v827 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v827 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf422_TRC_Mat_TRC_RGhA_neon_fp16;
        float v10 = vt_Copy_xf422_TRC_Mat_TRC_RGhA;
        goto LABEL_7028;
      }
      if (!(a4 | a3 | a5 | a6))
      {
        float v10 = vt_Copy_xf422_rgb_RGhA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v1102 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v1102 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf422_rgb_RGhA_neon_fp16;
        float v10 = vt_Copy_xf422_rgb_RGhA;
        goto LABEL_7028;
      }
      goto LABEL_6979;
    }
    if (a2 != 1630697081)
    {
      int v20 = 1647534392;
      goto LABEL_266;
    }
LABEL_928:
    if (a3) {
      BOOL v131 = a4 == 0;
    }
    else {
      BOOL v131 = 1;
    }
    int v132 = !v131;
    float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_2vuyf;
    if (!v131 && a5 && a6) {
      goto LABEL_7022;
    }
    if (a5) {
      int v132 = 0;
    }
    float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_2vuyf;
    if (v132 == 1)
    {
      if (a6) {
        goto LABEL_7022;
      }
    }
    BOOL v133 = a3 && a4 == 0;
    BOOL v134 = !v133;
    float v10 = vt_Copy_xf422_TRC_Mat_TRC_2vuyf;
    if (a6)
    {
      if (!v134 && !a5) {
        goto LABEL_7022;
      }
    }
    float v10 = vt_Copy_xf422_TRC_Mat_TRC_2vuyf;
    if (a5)
    {
      if (!v134 && a6) {
        goto LABEL_7022;
      }
    }
    uint64_t result = 0;
    BOOL v50 = (a4 | a3 | a5 | a6) == 0;
    float v10 = vt_Copy_xf422_rgb_2vuyf;
    goto LABEL_6592;
  }
  if (a2 > 875704949)
  {
    if (a2 <= 1111970368)
    {
      if (a2 != 875704950)
      {
        if (a2 == 875836518 || a2 == 875836534)
        {
          if (a3) {
            BOOL v33 = a4 == 0;
          }
          else {
            BOOL v33 = 1;
          }
          int v34 = !v33;
          if (!v33 && a5 && a6) {
            goto LABEL_285;
          }
          if (a5) {
            int v34 = 0;
          }
          if (v34 == 1 && a6)
          {
LABEL_285:
            float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf;
            if (!a7)
            {
              unsigned int v35 = getVectorCapabilities();
              uint64_t result = 0;
              BOOL v29 = v35 >= 2;
              CFAllocatorRef v30 = vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf_neon_fp16;
              float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_444vf;
              goto LABEL_7028;
            }
            goto LABEL_7022;
          }
          if (a3) {
            BOOL v596 = a4 == 0;
          }
          else {
            BOOL v596 = 0;
          }
          int v597 = !v596;
          if (a6 && !v597 && !a5 || a5 && v597 != 1 && a6)
          {
            float v10 = vt_Copy_xf422_TRC_Mat_TRC_444vf;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v598 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v598 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf422_TRC_Mat_TRC_444vf_neon_fp16;
            float v10 = vt_Copy_xf422_TRC_Mat_TRC_444vf;
            goto LABEL_7028;
          }
          if (!(a4 | a3 | a5 | a6))
          {
            float v10 = vt_Copy_xf422_rgb_444vf;
            if (a7) {
              goto LABEL_7022;
            }
            unsigned int v976 = getVectorCapabilities();
            uint64_t result = 0;
            BOOL v29 = v976 >= 2;
            CFAllocatorRef v30 = vt_Copy_xf422_rgb_444vf_neon_fp16;
            float v10 = vt_Copy_xf422_rgb_444vf;
            goto LABEL_7028;
          }
          goto LABEL_6979;
        }
        goto LABEL_7023;
      }
      goto LABEL_729;
    }
    if (a2 != 1111970369 && a2 != 1380401729)
    {
      if (a2 != 1380410945) {
        goto LABEL_7023;
      }
      if (a3) {
        BOOL v113 = a4 == 0;
      }
      else {
        BOOL v113 = 1;
      }
      int v114 = !v113;
      if (!v113 && a5 && a6) {
        goto LABEL_826;
      }
      if (a5) {
        int v114 = 0;
      }
      if (v114 == 1 && a6)
      {
LABEL_826:
        float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA;
        if (!a7)
        {
          unsigned int v115 = getVectorCapabilities();
          uint64_t result = 0;
          BOOL v29 = v115 >= 2;
          CFAllocatorRef v30 = vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA_neon_fp16;
          float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_RGfA;
          goto LABEL_7028;
        }
        goto LABEL_7022;
      }
      if (a3) {
        BOOL v810 = a4 == 0;
      }
      else {
        BOOL v810 = 0;
      }
      int v811 = !v810;
      if (a6 && !v811 && !a5 || a5 && v811 != 1 && a6)
      {
        float v10 = vt_Copy_xf422_TRC_Mat_TRC_RGfA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v812 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v812 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf422_TRC_Mat_TRC_RGfA_neon_fp16;
        float v10 = vt_Copy_xf422_TRC_Mat_TRC_RGfA;
        goto LABEL_7028;
      }
      if (!(a4 | a3 | a5 | a6))
      {
        float v10 = vt_Copy_xf422_rgb_RGfA;
        if (a7) {
          goto LABEL_7022;
        }
        unsigned int v1097 = getVectorCapabilities();
        uint64_t result = 0;
        BOOL v29 = v1097 >= 2;
        CFAllocatorRef v30 = vt_Copy_xf422_rgb_RGfA_neon_fp16;
        float v10 = vt_Copy_xf422_rgb_RGfA;
        goto LABEL_7028;
      }
      goto LABEL_6979;
    }
  }
  else
  {
    if (a2 > 875704421)
    {
      if (a2 != 875704422 && a2 != 875704438)
      {
        if (a2 != 875704934) {
          goto LABEL_7023;
        }
        goto LABEL_729;
      }
      goto LABEL_983;
    }
    if (a2 != 32)
    {
      if (a2 != 846624102 && a2 != 846624121) {
        goto LABEL_7023;
      }
      goto LABEL_928;
    }
  }
  if (a1 != 1932681587 && a1 != 2016567667 && a1 != 1949458803)
  {
    if (a3) {
      BOOL v498 = a4 == 0;
    }
    else {
      BOOL v498 = 1;
    }
    int v499 = !v498;
    if (!v498 && a5 && a6) {
      goto LABEL_3344;
    }
    if (a5) {
      int v499 = 0;
    }
    if (v499 == 1 && a6)
    {
LABEL_3344:
      float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA;
      if (a7) {
        goto LABEL_7022;
      }
      unsigned int v500 = getVectorCapabilities();
      uint64_t result = 0;
      BOOL v29 = v500 >= 2;
      CFAllocatorRef v30 = vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA_neon_fp16;
      float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA;
      goto LABEL_7028;
    }
    if (a3) {
      BOOL v956 = a4 == 0;
    }
    else {
      BOOL v956 = 0;
    }
    int v957 = !v956;
    if (a6 && !v957 && !a5 || a5 && v957 != 1 && a6)
    {
      float v10 = vt_Copy_xf422_TRC_Mat_TRC_BGRA;
      if (a7) {
        goto LABEL_7022;
      }
      unsigned int v958 = getVectorCapabilities();
      uint64_t result = 0;
      BOOL v29 = v958 >= 2;
      CFAllocatorRef v30 = vt_Copy_xf422_TRC_Mat_TRC_BGRA_neon_fp16;
      float v10 = vt_Copy_xf422_TRC_Mat_TRC_BGRA;
      goto LABEL_7028;
    }
    if (!(a4 | a3 | a5 | a6))
    {
      float v10 = vt_Copy_xf422_rgb_BGRA;
      if (a7) {
        goto LABEL_7022;
      }
      unsigned int v1112 = getVectorCapabilities();
      uint64_t result = 0;
      BOOL v29 = v1112 >= 2;
      CFAllocatorRef v30 = vt_Copy_xf422_rgb_BGRA_neon_fp16;
      float v10 = vt_Copy_xf422_rgb_BGRA;
      goto LABEL_7028;
    }
    goto LABEL_6979;
  }
  if (a3) {
    BOOL v135 = a4 == 0;
  }
  else {
    BOOL v135 = 1;
  }
  int v136 = !v135;
  float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA;
  if (!v135 && a5 && a6) {
    goto LABEL_7022;
  }
  if (a5) {
    int v136 = 0;
  }
  float v10 = vt_Copy_xf422_TRC_Tone_Mat_TRC_BGRA;
  if (v136 == 1)
  {
    if (a6) {
      goto LABEL_7022;
    }
  }
  BOOL v137 = a3 && a4 == 0;
  BOOL v138 = !v137;
  float v10 = vt_Copy_xf422_TRC_Mat_TRC_BGRA;
  if (a6)
  {
    if (!v138 && !a5) {
      goto LABEL_7022;
    }
  }
  float v10 = vt_Copy_xf422_TRC_Mat_TRC_BGRA;
  if (a5)
  {
    if (!v138 && a6) {
      goto LABEL_7022;
    }
  }
  uint64_t result = 0;
  BOOL v50 = (a4 | a3 | a5 | a6) == 0;
  float v10 = vt_Copy_xf422_rgb_BGRA;
LABEL_6592:
  if (!v50) {
    float v10 = 0;
  }
  if (a8) {
    goto LABEL_7024;
  }
  return result;
}

uint64_t yuvto32ARGB2111(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a3 + 16);
  int v8 = 7;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t result = 25231;
  do
  {
    int v11 = v8;
    int v12 = 1;
    uint64_t v13 = v4;
    uint64_t v14 = v6;
    do
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      int v17 = v12;
      uint64_t v4 = v13 - 128;
      do
      {
        int v18 = (__int16 *)(v13 + 2 * v16);
        int v19 = (int *)(v14 + 4 * v16);
        int v20 = *(__int16 *)(v3 + v16);
        int v21 = *(__int16 *)(v5 + v16);
        int v22 = (-11262 * v20 - 23406 * v21) >> 15;
        int v23 = v20 + ((25231 * v20) >> 15);
        int v24 = v21 + ((13173 * v21) >> 15);
        int v25 = *v18;
        BOOL v26 = (unsigned __int8 *)(v7 + ((v24 + v25) >> 4));
        if (v24 + v25 < -10240) {
          BOOL v26 = (unsigned __int8 *)(v7 - 256);
        }
        if (v24 + v25 <= 10240) {
          int v27 = v26;
        }
        else {
          int v27 = (unsigned __int8 *)(v7 + 256);
        }
        int v28 = *v27;
        BOOL v29 = (unsigned __int8 *)(v7 + ((v22 + v25) >> 4));
        if (v22 + v25 < -10240) {
          BOOL v29 = (unsigned __int8 *)(v7 - 256);
        }
        if (v22 + v25 <= 10240) {
          CFAllocatorRef v30 = v29;
        }
        else {
          CFAllocatorRef v30 = (unsigned __int8 *)(v7 + 256);
        }
        int v31 = *v30;
        int v32 = v23 + v25;
        BOOL v33 = (unsigned __int8 *)(v7 + (v32 >> 4));
        if (v32 < -10240) {
          BOOL v33 = (unsigned __int8 *)(v7 - 256);
        }
        if (v32 <= 10240) {
          int v34 = v33;
        }
        else {
          int v34 = (unsigned __int8 *)(v7 + 256);
        }
        *int v19 = (v31 << 16) | (v28 << 8) | (*v34 << 24) | 0xFF;
        int v35 = v18[1];
        int v36 = v24 + v35;
        int v37 = (unsigned __int8 *)(v7 + (v36 >> 4));
        if (v36 < -10240) {
          int v37 = (unsigned __int8 *)(v7 - 256);
        }
        if (v36 <= 10240) {
          int v38 = v37;
        }
        else {
          int v38 = (unsigned __int8 *)(v7 + 256);
        }
        int v39 = v22 + v35;
        int v40 = (unsigned __int8 *)(v7 + 256);
        if (v39 <= 10240)
        {
          int v40 = (unsigned __int8 *)(v7 - 256);
          if (v39 >= -10240) {
            int v40 = (unsigned __int8 *)(v7 + (v39 >> 4));
          }
        }
        int v41 = *v38;
        int v42 = *v40;
        int v43 = v23 + v35;
        int v44 = (unsigned __int8 *)(v7 + 256);
        if (v43 <= 10240)
        {
          int v44 = (unsigned __int8 *)(v7 - 256);
          if (v43 >= -10240) {
            int v44 = (unsigned __int8 *)(v7 + (v43 >> 4));
          }
        }
        v19[1] = (v42 << 16) | (v41 << 8) | (*v44 << 24) | 0xFF;
        v4 += 4;
        v16 += 2;
        v15 -= 8;
      }
      while (v16 != 8);
      uint64_t v13 = v4 + 240;
      int v12 = v17 - 1;
      v3 += v16;
      v14 -= v15;
      v5 += v16;
    }
    while (v17);
    v6 += v9;
    int v8 = v11 - 1;
  }
  while (v11);
  return result;
}

uint64_t yto32ARGBOne(uint64_t a1, __int16 **a2, uint64_t a3)
{
  int v3 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  do
  {
    uint64_t result = 0;
    do
    {
      int v10 = *v4++;
      int v9 = v10;
      int v11 = (unsigned __int8 *)(v6 + 256);
      if (v10 <= 10240)
      {
        int v11 = (unsigned __int8 *)(v6 + (v9 >> 4));
        if (v9 < -10240) {
          int v11 = (unsigned __int8 *)(v6 - 256);
        }
      }
      *(_DWORD *)(v5 + result) = (16843008 * *v11) | 0xFF;
      result += 4;
    }
    while (result != 32);
    v5 += v7;
    ++v3;
  }
  while (v3 != 8);
  return result;
}

uint64_t yuvto32ARGBOne(uint64_t a1, __int16 **a2, uint64_t a3)
{
  int v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a3 + 16);
  int v8 = 7;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t result = 25231;
  do
  {
    uint64_t v11 = 0;
    int v12 = v8;
    do
    {
      int v14 = *v3++;
      int v13 = v14;
      int v16 = *v4++;
      int v15 = v16;
      int v17 = *v5++;
      int v18 = (-11262 * v15 - 23406 * v17) >> 15;
      int v19 = v17 + v13 + ((13173 * v17) >> 15);
      int v20 = (unsigned __int8 *)(v7 + (v19 >> 4));
      if (v19 < -10240) {
        int v20 = (unsigned __int8 *)(v7 - 256);
      }
      if (v19 <= 10240) {
        int v21 = v20;
      }
      else {
        int v21 = (unsigned __int8 *)(v7 + 256);
      }
      int v22 = v18 + v13;
      int v23 = (unsigned __int8 *)(v7 + 256);
      if (v22 <= 10240)
      {
        int v23 = (unsigned __int8 *)(v7 - 256);
        if (v22 >= -10240) {
          int v23 = (unsigned __int8 *)(v7 + (v22 >> 4));
        }
      }
      int v24 = v15 + v13 + ((25231 * v15) >> 15);
      int v25 = (unsigned __int8 *)(v7 + 256);
      if (v24 <= 10240)
      {
        int v25 = (unsigned __int8 *)(v7 - 256);
        if (v24 >= -10240) {
          int v25 = (unsigned __int8 *)(v7 + (v24 >> 4));
        }
      }
      *(_DWORD *)(v6 + v11) = (*v23 << 16) | (*v21 << 8) | (*v25 << 24) | 0xFF;
      v11 += 4;
    }
    while (v11 != 32);
    v6 += v9;
    int v8 = v12 - 1;
  }
  while (v12);
  return result;
}

uint64_t yuvto32ARGB(uint64_t a1, __int16 **a2, uint64_t a3)
{
  int v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a3 + 16);
  int v7 = 7;
  int v8 = *(int **)(a1 + 16);
  uint64_t result = 13173;
  int v10 = *a2;
  do
  {
    int v11 = v7;
    v3 += 16;
    int v12 = (int *)((char *)v8 + v5);
    int v13 = 7;
    int v14 = v8;
    do
    {
      unsigned int v15 = 0;
      int v16 = v4;
      int v17 = v13;
      int v18 = *v4;
      int v19 = v4[8];
      int v20 = (-11262 * v18 - 23406 * v19) >> 15;
      int v21 = v18 + ((25231 * v18) >> 15);
      int v22 = v19 + ((13173 * v19) >> 15);
      do
      {
        if (v15 >= 2) {
          int v23 = v3;
        }
        else {
          int v23 = v10;
        }
        int v24 = *v23;
        int v25 = v22 + v24;
        BOOL v26 = (unsigned __int8 *)(v6 + 256);
        if (v22 + v24 <= 10240)
        {
          BOOL v26 = (unsigned __int8 *)(v6 - 256);
          if (v25 >= -10240) {
            BOOL v26 = (unsigned __int8 *)(v6 + (v25 >> 4));
          }
        }
        int v27 = v20 + v24;
        int v28 = (unsigned __int8 *)(v6 + 256);
        if (v20 + v24 <= 10240)
        {
          int v28 = (unsigned __int8 *)(v6 - 256);
          if (v27 >= -10240) {
            int v28 = (unsigned __int8 *)(v6 + (v27 >> 4));
          }
        }
        int v29 = v21 + v24;
        CFAllocatorRef v30 = (unsigned __int8 *)(v6 + 256);
        if (v29 <= 10240)
        {
          CFAllocatorRef v30 = (unsigned __int8 *)(v6 + (v29 >> 4));
          if (v29 < -10240) {
            CFAllocatorRef v30 = (unsigned __int8 *)(v6 - 256);
          }
        }
        int v31 = (*v28 << 16) | (*v26 << 8) | (*v30 << 24) | 0xFF;
        if (v15 > 1) {
          *v12++ = v31;
        }
        else {
          *v14++ = v31;
        }
        v10 += v15 < 2;
        v3 += v15++ > 1;
      }
      while (v15 != 4);
      uint64_t v4 = v16 + 1;
      int v13 = v17 - 1;
    }
    while (v17);
    uint64_t v4 = v16 + 9;
    v10 += 16;
    int v8 = (int *)((char *)v8 + 2 * v5);
    int v7 = v11 - 1;
  }
  while (v11);
  return result;
}

__int16 *yuvto32ARGBTab(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = a3[2];
  uint64_t v5 = *a3;
  uint64_t v6 = *a3 + 1024;
  uint64_t v7 = *a3 + 2048;
  uint64_t v8 = *a3 + 3072;
  uint64_t v9 = *(void *)(a1 + 16) + 4;
  uint64_t v11 = *a2;
  uint64_t result = (__int16 *)a2[1];
  int v12 = 7;
  uint64_t v13 = *a2;
  do
  {
    uint64_t v14 = 0;
    int v15 = v12;
    uint64_t v16 = v11 + 32;
    result += 8;
    int v17 = (_DWORD *)v9;
    do
    {
      int v18 = (*result + 16) >> 5;
      int v19 = *(__int16 *)(v8 + 2 * v18);
      int v20 = *(__int16 *)(v13 + v14);
      int v21 = v20 + v19;
      int v22 = (unsigned __int8 *)(v4 + 256);
      if (v20 + v19 <= 10240)
      {
        int v22 = (unsigned __int8 *)(v4 - 256);
        if (v21 >= -10240) {
          int v22 = (unsigned __int8 *)(v4 + (v21 >> 4));
        }
      }
      int v23 = (*(result - 8) + 16) >> 5;
      int v24 = *(__int16 *)(v6 + 2 * v18) + *(__int16 *)(v5 + 2 * v23);
      int v25 = v24 + v20;
      BOOL v26 = (unsigned __int8 *)(v4 + 256);
      if (v24 + v20 <= 10240)
      {
        BOOL v26 = (unsigned __int8 *)(v4 - 256);
        if (v25 >= -10240) {
          BOOL v26 = (unsigned __int8 *)(v4 + (v25 >> 4));
        }
      }
      int v27 = *(__int16 *)(v7 + 2 * v23);
      int v28 = v20 + v27;
      int v29 = (unsigned __int8 *)(v4 + 256);
      if (v28 <= 10240)
      {
        int v29 = (unsigned __int8 *)(v4 - 256);
        if (v28 >= -10240) {
          int v29 = (unsigned __int8 *)(v4 + (v28 >> 4));
        }
      }
      *(v17 - 1) = (*v26 << 16) | (*v22 << 8) | (*v29 << 24) | 0xFF;
      int v30 = *(__int16 *)(v13 + v14 + 2);
      int v31 = v30 + v19;
      int v32 = (unsigned __int8 *)(v4 + 256);
      if (v30 + v19 <= 10240)
      {
        int v32 = (unsigned __int8 *)(v4 - 256);
        if (v31 >= -10240) {
          int v32 = (unsigned __int8 *)(v4 + (v31 >> 4));
        }
      }
      int v33 = *v32;
      int v34 = v24 + v30;
      int v35 = (unsigned __int8 *)(v4 + 256);
      if (v24 + v30 <= 10240)
      {
        int v35 = (unsigned __int8 *)(v4 - 256);
        if (v34 >= -10240) {
          int v35 = (unsigned __int8 *)(v4 + (v34 >> 4));
        }
      }
      int v36 = *v35;
      int v37 = v30 + v27;
      int v38 = (unsigned __int8 *)(v4 + 256);
      if (v37 <= 10240)
      {
        int v38 = (unsigned __int8 *)(v4 - 256);
        if (v37 >= -10240) {
          int v38 = (unsigned __int8 *)(v4 + (v37 >> 4));
        }
      }
      _DWORD *v17 = (v36 << 16) | (v33 << 8) | (*v38 << 24) | 0xFF;
      int v39 = *(__int16 *)(v16 + v14);
      int v40 = v39 + v19;
      int v41 = (unsigned __int8 *)(v4 + 256);
      if (v39 + v19 <= 10240)
      {
        int v41 = (unsigned __int8 *)(v4 - 256);
        if (v40 >= -10240) {
          int v41 = (unsigned __int8 *)(v4 + (v40 >> 4));
        }
      }
      int v42 = *v41;
      int v43 = v24 + v39;
      int v44 = (unsigned __int8 *)(v4 + 256);
      if (v24 + v39 <= 10240)
      {
        int v44 = (unsigned __int8 *)(v4 - 256);
        if (v43 >= -10240) {
          int v44 = (unsigned __int8 *)(v4 + (v43 >> 4));
        }
      }
      int v45 = *v44;
      int v46 = v39 + v27;
      int v47 = (unsigned __int8 *)(v4 + 256);
      if (v46 <= 10240)
      {
        int v47 = (unsigned __int8 *)(v4 - 256);
        if (v46 >= -10240) {
          int v47 = (unsigned __int8 *)(v4 + (v46 >> 4));
        }
      }
      *(_DWORD *)((char *)v17 + v3 - 4) = (v45 << 16) | (v42 << 8) | (*v47 << 24) | 0xFF;
      int v48 = *(__int16 *)(v16 + v14 + 2);
      int v49 = v48 + v19;
      BOOL v50 = (unsigned __int8 *)(v4 + 256);
      if (v49 <= 10240)
      {
        BOOL v50 = (unsigned __int8 *)(v4 - 256);
        if (v49 >= -10240) {
          BOOL v50 = (unsigned __int8 *)(v4 + (v49 >> 4));
        }
      }
      int v51 = *v50;
      int v52 = v24 + v48;
      unsigned int v53 = (unsigned __int8 *)(v4 + 256);
      if (v52 <= 10240)
      {
        unsigned int v53 = (unsigned __int8 *)(v4 - 256);
        if (v52 >= -10240) {
          unsigned int v53 = (unsigned __int8 *)(v4 + (v52 >> 4));
        }
      }
      int v54 = v48 + v27;
      int v55 = (unsigned __int8 *)(v4 + 256);
      if (v54 <= 10240)
      {
        int v55 = (unsigned __int8 *)(v4 - 256);
        if (v54 >= -10240) {
          int v55 = (unsigned __int8 *)(v4 + (v54 >> 4));
        }
      }
      *(_DWORD *)((char *)v17 + v3) = (*v53 << 16) | (v51 << 8) | (*v55 << 24) | 0xFF;
      v14 += 4;
      v17 += 2;
      ++result;
    }
    while (v14 != 32);
    v13 += v14 + 32;
    int v12 = v15 - 1;
    v9 += 2 * v3;
    uint64_t v11 = v16 + v14;
  }
  while (v15);
  return result;
}

uint64_t yuvto32BGRA2111(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a3 + 16);
  int v8 = 7;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t result = 25231;
  do
  {
    int v11 = v8;
    int v12 = 1;
    uint64_t v13 = v4;
    uint64_t v14 = v6;
    do
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      int v17 = v12;
      uint64_t v4 = v13 - 128;
      do
      {
        int v18 = (__int16 *)(v13 + 2 * v16);
        int v19 = (unsigned int *)(v14 + 4 * v16);
        int v20 = *(__int16 *)(v3 + v16);
        int v21 = *(__int16 *)(v5 + v16);
        int v22 = (-11262 * v20 - 23406 * v21) >> 15;
        int v23 = v20 + ((25231 * v20) >> 15);
        int v24 = v21 + ((13173 * v21) >> 15);
        int v25 = *v18;
        BOOL v26 = (unsigned __int8 *)(v7 + ((v24 + v25) >> 4));
        if (v24 + v25 < -10240) {
          BOOL v26 = (unsigned __int8 *)(v7 - 256);
        }
        if (v24 + v25 <= 10240) {
          int v27 = v26;
        }
        else {
          int v27 = (unsigned __int8 *)(v7 + 256);
        }
        int v28 = *v27;
        int v29 = (unsigned __int8 *)(v7 + ((v22 + v25) >> 4));
        if (v22 + v25 < -10240) {
          int v29 = (unsigned __int8 *)(v7 - 256);
        }
        if (v22 + v25 <= 10240) {
          int v30 = v29;
        }
        else {
          int v30 = (unsigned __int8 *)(v7 + 256);
        }
        int v31 = *v30;
        int v32 = v23 + v25;
        int v33 = (unsigned __int8 *)(v7 + (v32 >> 4));
        if (v32 < -10240) {
          int v33 = (unsigned __int8 *)(v7 - 256);
        }
        if (v32 <= 10240) {
          int v34 = v33;
        }
        else {
          int v34 = (unsigned __int8 *)(v7 + 256);
        }
        *int v19 = (v31 << 8) | (v28 << 16) | *v34 | 0xFF000000;
        int v35 = v18[1];
        int v36 = v24 + v35;
        int v37 = (unsigned __int8 *)(v7 + (v36 >> 4));
        if (v36 < -10240) {
          int v37 = (unsigned __int8 *)(v7 - 256);
        }
        if (v36 <= 10240) {
          int v38 = v37;
        }
        else {
          int v38 = (unsigned __int8 *)(v7 + 256);
        }
        int v39 = v22 + v35;
        int v40 = (unsigned __int8 *)(v7 + 256);
        if (v39 <= 10240)
        {
          int v40 = (unsigned __int8 *)(v7 - 256);
          if (v39 >= -10240) {
            int v40 = (unsigned __int8 *)(v7 + (v39 >> 4));
          }
        }
        int v41 = *v38;
        int v42 = *v40;
        int v43 = v23 + v35;
        int v44 = (unsigned __int8 *)(v7 + 256);
        if (v43 <= 10240)
        {
          int v44 = (unsigned __int8 *)(v7 - 256);
          if (v43 >= -10240) {
            int v44 = (unsigned __int8 *)(v7 + (v43 >> 4));
          }
        }
        v19[1] = (v42 << 8) | (v41 << 16) | *v44 | 0xFF000000;
        v4 += 4;
        v16 += 2;
        v15 -= 8;
      }
      while (v16 != 8);
      uint64_t v13 = v4 + 240;
      int v12 = v17 - 1;
      v3 += v16;
      v14 -= v15;
      v5 += v16;
    }
    while (v17);
    v6 += v9;
    int v8 = v11 - 1;
  }
  while (v11);
  return result;
}

uint64_t yto32BGRAOne(uint64_t a1, __int16 **a2, uint64_t a3)
{
  int v3 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  do
  {
    uint64_t result = 0;
    do
    {
      int v10 = *v4++;
      int v9 = v10;
      int v11 = (unsigned __int8 *)(v6 + 256);
      if (v10 <= 10240)
      {
        int v11 = (unsigned __int8 *)(v6 + (v9 >> 4));
        if (v9 < -10240) {
          int v11 = (unsigned __int8 *)(v6 - 256);
        }
      }
      *(_DWORD *)(v5 + result) = (65793 * *v11) | 0xFF000000;
      result += 4;
    }
    while (result != 32);
    v5 += v7;
    ++v3;
  }
  while (v3 != 8);
  return result;
}

uint64_t yuvto32BGRAOne(uint64_t a1, __int16 **a2, uint64_t a3)
{
  int v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a3 + 16);
  int v8 = 7;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t result = 25231;
  do
  {
    uint64_t v11 = 0;
    int v12 = v8;
    do
    {
      int v14 = *v3++;
      int v13 = v14;
      int v16 = *v4++;
      int v15 = v16;
      int v17 = *v5++;
      int v18 = (-11262 * v15 - 23406 * v17) >> 15;
      int v19 = v17 + v13 + ((13173 * v17) >> 15);
      int v20 = (unsigned __int8 *)(v7 + (v19 >> 4));
      if (v19 < -10240) {
        int v20 = (unsigned __int8 *)(v7 - 256);
      }
      if (v19 <= 10240) {
        int v21 = v20;
      }
      else {
        int v21 = (unsigned __int8 *)(v7 + 256);
      }
      int v22 = v18 + v13;
      int v23 = (unsigned __int8 *)(v7 + 256);
      if (v22 <= 10240)
      {
        int v23 = (unsigned __int8 *)(v7 - 256);
        if (v22 >= -10240) {
          int v23 = (unsigned __int8 *)(v7 + (v22 >> 4));
        }
      }
      int v24 = v15 + v13 + ((25231 * v15) >> 15);
      int v25 = (unsigned __int8 *)(v7 + 256);
      if (v24 <= 10240)
      {
        int v25 = (unsigned __int8 *)(v7 - 256);
        if (v24 >= -10240) {
          int v25 = (unsigned __int8 *)(v7 + (v24 >> 4));
        }
      }
      *(_DWORD *)(v6 + v11) = (*v23 << 8) | (*v21 << 16) | *v25 | 0xFF000000;
      v11 += 4;
    }
    while (v11 != 32);
    v6 += v9;
    int v8 = v12 - 1;
  }
  while (v12);
  return result;
}

uint64_t yuvto32BGRA(uint64_t a1, __int16 **a2, uint64_t a3)
{
  int v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a3 + 16);
  int v7 = 7;
  int v8 = *(unsigned int **)(a1 + 16);
  uint64_t result = 13173;
  int v10 = *a2;
  do
  {
    int v11 = v7;
    v3 += 16;
    int v12 = (unsigned int *)((char *)v8 + v5);
    int v13 = 7;
    int v14 = v8;
    do
    {
      unsigned int v15 = 0;
      int v16 = v4;
      int v17 = v13;
      int v18 = *v4;
      int v19 = v4[8];
      int v20 = (-11262 * v18 - 23406 * v19) >> 15;
      int v21 = v18 + ((25231 * v18) >> 15);
      int v22 = v19 + ((13173 * v19) >> 15);
      do
      {
        if (v15 >= 2) {
          int v23 = v3;
        }
        else {
          int v23 = v10;
        }
        int v24 = *v23;
        int v25 = v22 + v24;
        BOOL v26 = (unsigned __int8 *)(v6 + 256);
        if (v22 + v24 <= 10240)
        {
          BOOL v26 = (unsigned __int8 *)(v6 - 256);
          if (v25 >= -10240) {
            BOOL v26 = (unsigned __int8 *)(v6 + (v25 >> 4));
          }
        }
        int v27 = v20 + v24;
        int v28 = (unsigned __int8 *)(v6 + 256);
        if (v20 + v24 <= 10240)
        {
          int v28 = (unsigned __int8 *)(v6 - 256);
          if (v27 >= -10240) {
            int v28 = (unsigned __int8 *)(v6 + (v27 >> 4));
          }
        }
        int v29 = v21 + v24;
        int v30 = (unsigned __int8 *)(v6 + 256);
        if (v29 <= 10240)
        {
          int v30 = (unsigned __int8 *)(v6 + (v29 >> 4));
          if (v29 < -10240) {
            int v30 = (unsigned __int8 *)(v6 - 256);
          }
        }
        unsigned int v31 = (*v28 << 8) | (*v26 << 16) | *v30 | 0xFF000000;
        if (v15 > 1) {
          *v12++ = v31;
        }
        else {
          *v14++ = v31;
        }
        v10 += v15 < 2;
        v3 += v15++ > 1;
      }
      while (v15 != 4);
      uint64_t v4 = v16 + 1;
      int v13 = v17 - 1;
    }
    while (v17);
    uint64_t v4 = v16 + 9;
    v10 += 16;
    int v8 = (unsigned int *)((char *)v8 + 2 * v5);
    int v7 = v11 - 1;
  }
  while (v11);
  return result;
}

__int16 *yuvto32BGRATab(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = a3[2];
  uint64_t v5 = *a3;
  uint64_t v6 = *a3 + 1024;
  uint64_t v7 = *a3 + 2048;
  uint64_t v8 = *a3 + 3072;
  uint64_t v9 = *(void *)(a1 + 16) + 4;
  uint64_t v11 = *a2;
  uint64_t result = (__int16 *)a2[1];
  int v12 = 7;
  uint64_t v13 = *a2;
  do
  {
    uint64_t v14 = 0;
    int v15 = v12;
    uint64_t v16 = v11 + 32;
    result += 8;
    int v17 = (_DWORD *)v9;
    do
    {
      int v18 = (*result + 16) >> 5;
      int v19 = *(__int16 *)(v8 + 2 * v18);
      int v20 = *(__int16 *)(v13 + v14);
      int v21 = v20 + v19;
      int v22 = (unsigned __int8 *)(v4 + 256);
      if (v20 + v19 <= 10240)
      {
        int v22 = (unsigned __int8 *)(v4 - 256);
        if (v21 >= -10240) {
          int v22 = (unsigned __int8 *)(v4 + (v21 >> 4));
        }
      }
      int v23 = (*(result - 8) + 16) >> 5;
      int v24 = *(__int16 *)(v6 + 2 * v18) + *(__int16 *)(v5 + 2 * v23);
      int v25 = v24 + v20;
      BOOL v26 = (unsigned __int8 *)(v4 + 256);
      if (v24 + v20 <= 10240)
      {
        BOOL v26 = (unsigned __int8 *)(v4 - 256);
        if (v25 >= -10240) {
          BOOL v26 = (unsigned __int8 *)(v4 + (v25 >> 4));
        }
      }
      int v27 = *(__int16 *)(v7 + 2 * v23);
      int v28 = v20 + v27;
      int v29 = (unsigned __int8 *)(v4 + 256);
      if (v28 <= 10240)
      {
        int v29 = (unsigned __int8 *)(v4 - 256);
        if (v28 >= -10240) {
          int v29 = (unsigned __int8 *)(v4 + (v28 >> 4));
        }
      }
      *(v17 - 1) = (*v26 << 8) | (*v22 << 16) | *v29 | 0xFF000000;
      int v30 = *(__int16 *)(v13 + v14 + 2);
      int v31 = v30 + v19;
      int v32 = (unsigned __int8 *)(v4 + 256);
      if (v30 + v19 <= 10240)
      {
        int v32 = (unsigned __int8 *)(v4 - 256);
        if (v31 >= -10240) {
          int v32 = (unsigned __int8 *)(v4 + (v31 >> 4));
        }
      }
      int v33 = *v32;
      int v34 = v24 + v30;
      int v35 = (unsigned __int8 *)(v4 + 256);
      if (v24 + v30 <= 10240)
      {
        int v35 = (unsigned __int8 *)(v4 - 256);
        if (v34 >= -10240) {
          int v35 = (unsigned __int8 *)(v4 + (v34 >> 4));
        }
      }
      int v36 = *v35;
      int v37 = v30 + v27;
      int v38 = (unsigned __int8 *)(v4 + 256);
      if (v37 <= 10240)
      {
        int v38 = (unsigned __int8 *)(v4 - 256);
        if (v37 >= -10240) {
          int v38 = (unsigned __int8 *)(v4 + (v37 >> 4));
        }
      }
      _DWORD *v17 = (v36 << 8) | (v33 << 16) | *v38 | 0xFF000000;
      int v39 = *(__int16 *)(v16 + v14);
      int v40 = v39 + v19;
      int v41 = (unsigned __int8 *)(v4 + 256);
      if (v39 + v19 <= 10240)
      {
        int v41 = (unsigned __int8 *)(v4 - 256);
        if (v40 >= -10240) {
          int v41 = (unsigned __int8 *)(v4 + (v40 >> 4));
        }
      }
      int v42 = *v41;
      int v43 = v24 + v39;
      int v44 = (unsigned __int8 *)(v4 + 256);
      if (v24 + v39 <= 10240)
      {
        int v44 = (unsigned __int8 *)(v4 - 256);
        if (v43 >= -10240) {
          int v44 = (unsigned __int8 *)(v4 + (v43 >> 4));
        }
      }
      int v45 = *v44;
      int v46 = v39 + v27;
      int v47 = (unsigned __int8 *)(v4 + 256);
      if (v46 <= 10240)
      {
        int v47 = (unsigned __int8 *)(v4 - 256);
        if (v46 >= -10240) {
          int v47 = (unsigned __int8 *)(v4 + (v46 >> 4));
        }
      }
      *(_DWORD *)((char *)v17 + v3 - 4) = (v45 << 8) | (v42 << 16) | *v47 | 0xFF000000;
      int v48 = *(__int16 *)(v16 + v14 + 2);
      int v49 = v48 + v19;
      BOOL v50 = (unsigned __int8 *)(v4 + 256);
      if (v49 <= 10240)
      {
        BOOL v50 = (unsigned __int8 *)(v4 - 256);
        if (v49 >= -10240) {
          BOOL v50 = (unsigned __int8 *)(v4 + (v49 >> 4));
        }
      }
      int v51 = *v50;
      int v52 = v24 + v48;
      unsigned int v53 = (unsigned __int8 *)(v4 + 256);
      if (v52 <= 10240)
      {
        unsigned int v53 = (unsigned __int8 *)(v4 - 256);
        if (v52 >= -10240) {
          unsigned int v53 = (unsigned __int8 *)(v4 + (v52 >> 4));
        }
      }
      int v54 = v48 + v27;
      int v55 = (unsigned __int8 *)(v4 + 256);
      if (v54 <= 10240)
      {
        int v55 = (unsigned __int8 *)(v4 - 256);
        if (v54 >= -10240) {
          int v55 = (unsigned __int8 *)(v4 + (v54 >> 4));
        }
      }
      *(_DWORD *)((char *)v17 + v3) = (*v53 << 8) | (v51 << 16) | *v55 | 0xFF000000;
      v14 += 4;
      v17 += 2;
      ++result;
    }
    while (v14 != 32);
    v13 += v14 + 32;
    int v12 = v15 - 1;
    v9 += 2 * v3;
    uint64_t v11 = v16 + v14;
  }
  while (v15);
  return result;
}

void UpdatePinAndGammaTables(uint64_t a1, int a2)
{
  uint64_t v4 = (unsigned char *)(a1 + 4440);
  float v5 = *(float *)(a1 + 4424) / *(float *)(a1 + 4428);
  float v6 = 0.0;
  if (v5 >= 0.0)
  {
    float v6 = *(float *)(a1 + 4424) / *(float *)(a1 + 4428);
    if (v5 > 4.0) {
      float v6 = 4.0;
    }
  }
  if (*(float *)(a1 + 4432) == v6)
  {
    int v10 = *(_DWORD *)(a1 + 4436);
  }
  else
  {
    if (v6 == 1.0)
    {
      uint64_t v7 = 0;
      int8x16_t v8 = (int8x16_t)xmmword_193E7F390;
      v9.i64[0] = 0x1010101010101010;
      v9.i64[1] = 0x1010101010101010;
      do
      {
        *(int8x16_t *)&v4[v7] = v8;
        v7 += 16;
        int8x16_t v8 = vaddq_s8(v8, v9);
      }
      while (v7 != 256);
    }
    else
    {
      uint64_t v11 = 0;
      float v12 = pow(0.200000003, v6);
      float v13 = v12 / 0.2;
      do
      {
        float v14 = (float)(int)v11 / 255.0;
        if (v14 <= 0.2) {
          float v15 = v13 * v14;
        }
        else {
          float v15 = pow(v14, v6);
        }
        v4[v11++] = (v15 * 255.0);
      }
      while (v11 != 255);
      v4[255] = -1;
    }
    int v10 = 0;
    *(float *)(a1 + 4432) = v6;
    *(_DWORD *)(a1 + 4436) = 0;
  }
  *(void *)(a1 + 3208) = &unk_193E7F620;
  if (v10 != a2)
  {
    if (a2 == 1)
    {
      *(void *)(a1 + 3216) = a1 + 5336;
      uint64_t v16 = a1 + 4697;
      int v17 = 384;
      do
      {
        *(unsigned char *)(v16++ - 1) = *v4;
        --v17;
      }
      while (v17);
      for (unsigned int i = 1; i != 512; ++i)
        *(unsigned char *)(v16++ - 1) = v4[(unint64_t)i >> 1];
      uint64_t v19 = 0;
      *(unsigned char *)(v16 - 1) = v4[255];
      do
        *(unsigned char *)(v16 + v19++) = v4[255];
      while (v19 != 384);
    }
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      int v20 = (unsigned char *)(a1 + 4696);
      *(void *)(a1 + 3232) = a1 + 5336;
      *(void *)(a1 + 3240) = a1 + 5336;
      *(void *)(a1 + 3224) = &unk_193E7FB21;
      if (a2 == 3) {
        unsigned int v21 = 239;
      }
      else {
        unsigned int v21 = 255;
      }
      for (int j = -639; j != 641; ++j)
      {
        int v23 = 16 * (a2 != 3) + ((28142 * (j >> 1) + 3618560) >> 15);
        unsigned int v24 = v23 & ~(v23 >> 31);
        if (v24 >= v21) {
          unsigned int v24 = v21;
        }
        if (v23 > v21) {
          int v23 = v24;
        }
        *v20++ = v4[v23];
      }
    }
    *(_DWORD *)(a1 + 4436) = a2;
  }
}

uint64_t yto2vuyOne(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  do
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = *(__int16 *)(v5 + v8);
      int v10 = (unsigned __int8 *)(v6 + 256);
      if (v9 <= 10240)
      {
        int v10 = (unsigned __int8 *)(v6 - 256);
        if (v9 >= -10240) {
          int v10 = (unsigned __int8 *)(v6 + (v9 >> 4));
        }
      }
      int v11 = *(__int16 *)(v5 + v8 + 2);
      float v12 = (unsigned __int8 *)(v6 + 256);
      if (v11 <= 10240)
      {
        float v12 = (unsigned __int8 *)(v6 - 256);
        if (v11 >= -10240) {
          float v12 = (unsigned __int8 *)(v6 + (v11 >> 4));
        }
      }
      uint64_t result = (*v12 << 24) | (*v10 << 8) | 0x800080u;
      *(_DWORD *)(v4 + v8) = result;
      v8 += 4;
    }
    while (v8 != 16);
    v4 += v7;
    ++v3;
    v5 += v8;
  }
  while (v3 != 8);
  return result;
}

uint64_t yuv411to2vuy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = 2 * v6;
  uint64_t v8 = v3 + v6;
  uint64_t v9 = *a2;
  int v10 = (__int16 *)a2[1];
  int v11 = 7;
  uint64_t result = 10240;
  uint64_t v13 = *a2;
  do
  {
    uint64_t v14 = 0;
    int v15 = v11;
    uint64_t v16 = v9 + 32;
    v10 += 8;
    do
    {
      int v17 = *(v10 - 8);
      int v18 = (unsigned __int8 *)(v4 + 256);
      if (v17 <= 10240)
      {
        int v18 = (unsigned __int8 *)(v4 + (v17 >> 4));
        if (v17 < -10240) {
          int v18 = (unsigned __int8 *)(v4 - 256);
        }
      }
      int v19 = *v10;
      int v20 = (unsigned __int8 *)(v4 + 256);
      if (v19 <= 10240)
      {
        int v20 = (unsigned __int8 *)(v4 + (v19 >> 4));
        if (v19 < -10240) {
          int v20 = (unsigned __int8 *)(v4 - 256);
        }
      }
      int v21 = *(__int16 *)(v13 + v14);
      int v22 = (unsigned __int8 *)(v5 + 256);
      if (v21 <= 10240)
      {
        int v22 = (unsigned __int8 *)(v5 - 256);
        if (v21 >= -10240) {
          int v22 = (unsigned __int8 *)(v5 + (v21 >> 4));
        }
      }
      int v23 = *(__int16 *)(v13 + v14 + 2);
      unsigned int v24 = (unsigned __int8 *)(v5 + 256);
      if (v23 <= 10240)
      {
        unsigned int v24 = (unsigned __int8 *)(v5 - 256);
        if (v23 >= -10240) {
          unsigned int v24 = (unsigned __int8 *)(v5 + (v23 >> 4));
        }
      }
      int v25 = *v18 | (*v20 << 16);
      *(_DWORD *)(v3 + v14) = (*v24 << 24) | (*v22 << 8) | v25;
      int v26 = *(__int16 *)(v16 + v14);
      int v27 = (unsigned __int8 *)(v5 + 256);
      if (v26 <= 10240)
      {
        int v27 = (unsigned __int8 *)(v5 - 256);
        if (v26 >= -10240) {
          int v27 = (unsigned __int8 *)(v5 + (v26 >> 4));
        }
      }
      int v28 = *v27;
      int v29 = *(__int16 *)(v16 + v14 + 2);
      int v30 = (unsigned __int8 *)(v5 + 256);
      if (v29 <= 10240)
      {
        int v30 = (unsigned __int8 *)(v5 - 256);
        if (v29 >= -10240) {
          int v30 = (unsigned __int8 *)(v5 + (v29 >> 4));
        }
      }
      *(_DWORD *)(v8 + v14) = (*v30 << 24) | (v28 << 8) | v25;
      v14 += 4;
      ++v10;
    }
    while (v14 != 32);
    v3 += v7;
    v13 += v14 + 32;
    int v11 = v15 - 1;
    v8 += v7;
    uint64_t v9 = v16 + v14;
  }
  while (v15);
  return result;
}

uint64_t yuv422to2vuy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (__int16 *)a2[1];
  uint64_t v5 = (__int16 *)a2[2];
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(a3 + 32);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t result = v7 + 256;
  int v11 = 7;
  do
  {
    int v12 = v11;
    int v13 = 1;
    uint64_t v14 = v8;
    do
    {
      uint64_t v15 = 0;
      int v16 = v13;
      do
      {
        int v18 = *v3++;
        int v17 = v18;
        int v19 = (__int16 *)(v4 + v15);
        int v20 = (unsigned __int8 *)(v6 + (v18 >> 4));
        if (v18 < -10240) {
          int v20 = (unsigned __int8 *)(v6 - 256);
        }
        if (v17 <= 10240) {
          int v21 = v20;
        }
        else {
          int v21 = (unsigned __int8 *)(v6 + 256);
        }
        int v22 = *v21;
        int v24 = *v5++;
        int v23 = v24;
        int v25 = (unsigned __int8 *)(v6 + (v24 >> 4));
        if (v24 < -10240) {
          int v25 = (unsigned __int8 *)(v6 - 256);
        }
        if (v23 <= 10240) {
          int v26 = v25;
        }
        else {
          int v26 = (unsigned __int8 *)(v6 + 256);
        }
        int v27 = *v26;
        int v28 = *v19;
        int v29 = (unsigned __int8 *)(v7 + (v28 >> 4));
        if (v28 < -10240) {
          int v29 = (unsigned __int8 *)(v7 - 256);
        }
        if (v28 <= 10240) {
          int v30 = v29;
        }
        else {
          int v30 = (unsigned __int8 *)(v7 + 256);
        }
        int v31 = *v30;
        int v32 = v19[1];
        int v33 = (unsigned __int8 *)(v7 + (v32 >> 4));
        if (v32 < -10240) {
          int v33 = (unsigned __int8 *)(v7 - 256);
        }
        if (v32 <= 10240) {
          int v34 = v33;
        }
        else {
          int v34 = (unsigned __int8 *)(v7 + 256);
        }
        *(_DWORD *)(v14 + v15) = v22 | (v27 << 16) | (v31 << 8) | (*v34 << 24);
        v15 += 4;
      }
      while (v15 != 16);
      uint64_t v35 = v4 + v15;
      v4 += v15 + 112;
      int v13 = v16 - 1;
      v14 += v15;
    }
    while (v16);
    uint64_t v4 = v35 - 128;
    v8 += v9;
    int v11 = v12 - 1;
  }
  while (v12);
  return result;
}

uint64_t yuvto2vuyOne(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t result = *(void *)(a1 + 32);
  do
  {
    uint64_t v11 = 0;
    do
    {
      int v12 = *(__int16 *)(v4 + v11);
      int v13 = (unsigned __int8 *)(v8 + (v12 >> 4));
      if (v12 < -10240) {
        int v13 = (unsigned __int8 *)(v8 - 256);
      }
      if (v12 <= 10240) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = (unsigned __int8 *)(v8 + 256);
      }
      int v15 = *v14;
      int v16 = *(__int16 *)(v4 + v11 + 2);
      int v17 = (unsigned __int8 *)(v8 + (v16 >> 4));
      if (v16 < -10240) {
        int v17 = (unsigned __int8 *)(v8 - 256);
      }
      if (v16 <= 10240) {
        int v18 = v17;
      }
      else {
        int v18 = (unsigned __int8 *)(v8 + 256);
      }
      int v19 = *v18;
      int v20 = *(__int16 *)(v5 + v11 + 2) + *(__int16 *)(v5 + v11);
      int v21 = (unsigned __int8 *)(v7 + (v20 >> 5));
      if (v20 < -20480) {
        int v21 = (unsigned __int8 *)(v7 - 256);
      }
      if (v20 <= 20481) {
        int v22 = v21;
      }
      else {
        int v22 = (unsigned __int8 *)(v7 + 256);
      }
      int v23 = *v22;
      int v24 = *(__int16 *)(v6 + v11 + 2) + *(__int16 *)(v6 + v11);
      int v25 = (unsigned __int8 *)(v7 + (v24 >> 5));
      if (v24 < -20480) {
        int v25 = (unsigned __int8 *)(v7 - 256);
      }
      if (v24 <= 20481) {
        int v26 = v25;
      }
      else {
        int v26 = (unsigned __int8 *)(v7 + 256);
      }
      *(_DWORD *)(v9 + v11) = (v15 << 8) | (v19 << 24) | v23 | (*v26 << 16);
      v11 += 4;
    }
    while (v11 != 16);
    v9 += result;
    ++v3;
    v6 += v11;
    v5 += v11;
    v4 += v11;
  }
  while (v3 != 8);
  return result;
}

uint64_t ytoY420One(void *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v8 = (_DWORD *)a1[12];
  uint64_t v9 = (_DWORD *)a1[22];
  uint64_t v10 = a1[14];
  uint64_t v11 = a1[24];
  uint64_t result = v5 + 256;
  do
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      int v15 = (__int16 *)(v4 + 2 * v14);
      int v16 = *v15;
      int v17 = (unsigned char *)(v5 + (v16 >> 4));
      if (v16 < -10240) {
        int v17 = (unsigned char *)(v5 - 256);
      }
      if (v16 <= 10240) {
        int v18 = v17;
      }
      else {
        int v18 = (unsigned char *)(v5 + 256);
      }
      int v19 = v15[1];
      int v20 = (char *)(v5 + 256);
      if (v19 <= 10240)
      {
        int v20 = (char *)(v5 - 256);
        if (v19 >= -10240) {
          int v20 = (char *)(v5 + (v19 >> 4));
        }
      }
      int v21 = (unsigned char *)(v6 + v14);
      char v22 = *v20;
      *int v21 = *v18;
      v21[1] = v22;
      v14 += 2;
      v13 -= 4;
    }
    while (v14 != 8);
    v6 += v7;
    ++v3;
    v4 -= v13;
  }
  while (v3 != 8);
  int v23 = 4;
  do
  {
    *uint64_t v8 = -2139062144;
    *uint64_t v9 = -2139062144;
    uint64_t v8 = (_DWORD *)((char *)v8 + v10);
    uint64_t v9 = (_DWORD *)((char *)v9 + v11);
    --v23;
  }
  while (v23);
  return result;
}

uint64_t yuv411toY420(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[12];
  uint64_t v10 = a1[22];
  uint64_t v11 = a1[14];
  uint64_t v12 = 2 * v8;
  uint64_t v13 = v7 + v8;
  uint64_t result = a1[24];
  int v15 = 7;
  uint64_t v16 = *a2;
  do
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = v15;
    uint64_t v21 = v4 + 32;
    do
    {
      char v22 = (__int16 *)(v16 + 2 * v19);
      int v23 = *(__int16 *)(v3 + v19);
      int v24 = *(__int16 *)(v3 + v19 + 16);
      int v25 = (char *)(v5 + (v23 >> 4));
      if (v23 < -10240) {
        int v25 = (char *)(v5 - 256);
      }
      if (v23 <= 10240) {
        int v26 = v25;
      }
      else {
        int v26 = (char *)(v5 + 256);
      }
      char v27 = *v26;
      int v28 = (char *)(v5 + (v24 >> 4));
      if (v24 < -10240) {
        int v28 = (char *)(v5 - 256);
      }
      if (v24 <= 10240) {
        int v29 = v28;
      }
      else {
        int v29 = (char *)(v5 + 256);
      }
      char v30 = *v29;
      *(unsigned char *)(v9 + v18) = v27;
      *(unsigned char *)(v10 + v18) = v30;
      int v31 = (__int16 *)(v21 + 2 * v19);
      int v32 = *v22;
      int v33 = (char *)(v6 + (v32 >> 4));
      if (v32 < -10240) {
        int v33 = (char *)(v6 - 256);
      }
      if (v32 <= 10240) {
        int v34 = v33;
      }
      else {
        int v34 = (char *)(v6 + 256);
      }
      char v35 = *v34;
      int v36 = v22[1];
      int v37 = (char *)(v6 + (v36 >> 4));
      if (v36 < -10240) {
        int v37 = (char *)(v6 - 256);
      }
      if (v36 <= 10240) {
        int v38 = v37;
      }
      else {
        int v38 = (char *)(v6 + 256);
      }
      char v39 = *v38;
      int v40 = (unsigned char *)(v7 + v19);
      *int v40 = v35;
      v40[1] = v39;
      int v41 = *v31;
      int v42 = (unsigned char *)(v6 + (v41 >> 4));
      if (v41 < -10240) {
        int v42 = (unsigned char *)(v6 - 256);
      }
      if (v41 <= 10240) {
        int v43 = v42;
      }
      else {
        int v43 = (unsigned char *)(v6 + 256);
      }
      int v44 = v31[1];
      int v45 = (char *)(v6 + 256);
      if (v44 <= 10240)
      {
        int v45 = (char *)(v6 - 256);
        if (v44 >= -10240) {
          int v45 = (char *)(v6 + (v44 >> 4));
        }
      }
      char v46 = *v45;
      int v47 = (unsigned char *)(v13 + v19);
      *int v47 = *v43;
      v47[1] = v46;
      v19 += 2;
      ++v18;
      v17 -= 4;
    }
    while (v19 != 16);
    v3 += v19 + 16;
    uint64_t v16 = v16 - v17 + 32;
    v7 += v12;
    v9 += v11;
    v10 += result;
    int v15 = v20 - 1;
    v13 += v12;
    uint64_t v4 = v21 - v17;
  }
  while (v20);
  return result;
}