uint64_t VTSelectAndCreateVideoDecoderInstance(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, void *a4)
{
  return VTSelectAndCreateVideoDecoderInstanceInternal(a1, a2, (int)theDict, theDict, 0, a4, 0, 0);
}

uint64_t VTSelectAndCreateVideoDecoderInstanceInternal(uint64_t a1, uint64_t a2, int a3, CFDictionaryRef theDict, CFIndex a5, void *a6, unsigned char *a7, CFIndex *a8)
{
  LOBYTE(v57) = 0;
  LOBYTE(v63) = 0;
  v12 = (const void **)MEMORY[0x1E4F1CFD0];
  if (!theDict) {
    goto LABEL_5;
  }
  v13 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (v13 != CFDictionaryGetValue(theDict, @"EnableHardwareAcceleratedVideoDecoder"))
  {
    if (CFDictionaryGetValue(theDict, @"EnableHardwareAcceleratedVideoDecoder"))
    {
      v14 = 0;
      goto LABEL_10;
    }
LABEL_5:
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    v14 = MutableCopy;
    if (!MutableCopy) {
      goto LABEL_23;
    }
    CFDictionarySetValue(MutableCopy, @"EnableHardwareAcceleratedVideoDecoder", *v12);
    if (!theDict) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  v16 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  v14 = v16;
  if (!v16) {
    goto LABEL_23;
  }
  CFDictionaryRemoveValue(v16, @"EnableHardwareAcceleratedVideoDecoder");
LABEL_10:
  v17 = *v12;
  if (v17 == CFDictionaryGetValue(theDict, @"RequireHardwareAcceleratedVideoDecoder")
    && !CFDictionaryGetValue(theDict, @"EnableHardwareAcceleratedVideoDecoder"))
  {
    v18 = a6;
    if (!v14)
    {
      v14 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
      if (!v14) {
        goto LABEL_23;
      }
    }
    CFDictionarySetValue(v14, @"EnableHardwareAcceleratedVideoDecoder", v17);
    goto LABEL_13;
  }
LABEL_12:
  v18 = a6;
LABEL_13:
  if (a1 == 1635135537)
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    BOOL v19 = (_BYTE)v63 != 0;
  }
  else
  {
    BOOL v19 = 0;
  }
  if (v19)
  {
    if (!v14) {
      v14 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    }
    FigCFDictionarySetValue();
  }
  a6 = v18;
  if (theDict && !v14) {
    v14 = (__CFDictionary *)CFRetain(theDict);
  }
LABEL_23:
  v60 = 0;
  CFArrayRef v61 = 0;
  vtPopulateVideoDecoderRegistry();
  if (v14) {
    v20 = CFDictionaryGetValue(v14, @"DecoderID");
  }
  else {
    v20 = 0;
  }
  BOOL v21 = a1 == 1987063865 || a1 == 1903587385;
  if (v21 && !gVTAlreadyInDecodeServer)
  {
    LOBYTE(v57) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    CFArrayRef v30 = 0;
    uint64_t v31 = 4294954390;
    goto LABEL_92;
  }
  unsigned int v53 = a1;
  if (!sVideoDecoderRegistry)
  {
    uint64_t v31 = FigSignalErrorAt();
    CFStringRef v24 = 0;
    goto LABEL_89;
  }
  uint64_t v59 = 0;
  FigCFDictionaryGetInt64IfPresent();
  long long v57 = 0uLL;
  uint64_t v58 = 0;
  if (v14)
  {
    v22 = (const void *)*MEMORY[0x1E4F1CFD0];
    BOOL v23 = v22 == CFDictionaryGetValue(v14, @"RequireHardwareAcceleratedVideoDecoder");
  }
  else
  {
    BOOL v23 = 0;
  }
  *(_DWORD *)bytes = bswap32(a1);
  CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v26 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 4, 0x600u, 0);
  CFStringRef v24 = v26;
  if (!v26)
  {
    uint64_t v29 = FigSignalErrorAt();
    goto LABEL_42;
  }
  *(void *)&long long v57 = v26;
  *((void *)&v57 + 1) = v14;
  LOBYTE(v58) = v23;
  unsigned int v27 = FigRegistryCopyFilteredItemList();
  if (v27) {
    goto LABEL_40;
  }
  uint64_t v29 = vtCopyExpandedDecoderListForWrappers(v61, &v57, &v60, 0);
  if (v29)
  {
LABEL_42:
    uint64_t v31 = v29;
    goto LABEL_43;
  }
  CFArrayRef v28 = v60;
  if (v60)
  {
    if (v61)
    {
      CFRelease(v61);
      CFArrayRef v28 = v60;
    }
    v60 = 0;
    CFArrayRef v61 = v28;
    goto LABEL_50;
  }
LABEL_40:
  CFArrayRef v28 = v61;
LABEL_50:
  uint64_t v31 = 4294954390;
  if (!v28) {
    goto LABEL_89;
  }
  CFIndex Count = CFArrayGetCount(v28);
  uint64_t v31 = Count ? v27 : 4294954390;
  if (v27 || !Count) {
    goto LABEL_89;
  }
  if (!v20) {
    goto LABEL_85;
  }
  key = a6;
  CFArrayRef v33 = v61;
  CFTypeRef v62 = 0;
  CFDictionaryRef v63 = 0;
  CFIndex v34 = CFArrayGetCount(v61);
  CFAllocatorRef allocator = v25;
  theArray = CFArrayCreateMutable(v25, 0, MEMORY[0x1E4F1D510]);
  if (v34 < 1)
  {
LABEL_73:
    uint64_t v31 = 0;
    v60 = theArray;
    v39 = 0;
    goto LABEL_74;
  }
  CFIndex v35 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v33, v35);
    if (!ValueAtIndex) {
      goto LABEL_67;
    }
    v37 = ValueAtIndex;
    uint64_t v38 = FigRegistryItemCopyDescription();
    if (v38) {
      break;
    }
    uint64_t v38 = FigRegistryItemCopyMatchingInfo();
    if (v38) {
      break;
    }
    CFDictionaryGetValue(v63, @"CMClassImplementationID");
    if (FigCFEqual())
    {
      CFArrayAppendValue(theArray, v37);
      goto LABEL_73;
    }
    if (v63)
    {
      CFRelease(v63);
      CFDictionaryRef v63 = 0;
    }
    if (v62)
    {
      CFRelease(v62);
      CFTypeRef v62 = 0;
    }
LABEL_67:
    if (v34 == ++v35) {
      goto LABEL_73;
    }
  }
  uint64_t v31 = v38;
  v39 = theArray;
LABEL_74:
  a6 = key;
  if (v63) {
    CFRelease(v63);
  }
  if (v62) {
    CFRelease(v62);
  }
  CFAllocatorRef v25 = allocator;
  if (v39) {
    CFRelease(v39);
  }
  if (v31)
  {
LABEL_43:
    CFArrayRef v30 = 0;
    if (v24) {
      goto LABEL_90;
    }
    goto LABEL_91;
  }
  if (v61) {
    CFRelease(v61);
  }
  CFArrayRef v40 = v60;
  v60 = 0;
  CFArrayRef v61 = v40;
  if (v40 && CFArrayGetCount(v40))
  {
LABEL_85:
    CFIndex v41 = CFArrayGetCount(v61);
    CFArrayRef v42 = CFArrayCreateMutableCopy(v25, v41, v61);
    if (v42)
    {
      v43 = v42;
      v64.length = CFArrayGetCount(v42);
      v64.location = 0;
      CFArraySortValues(v43, v64, (CFComparatorFunction)vtSortRegistryItemsByRating, v14);
      CFRelease(v61);
      uint64_t v31 = 0;
      CFArrayRef v61 = v43;
    }
    else
    {
      uint64_t v31 = 0;
    }
  }
  else
  {
    uint64_t v31 = 4294954390;
  }
LABEL_89:
  CFArrayRef v30 = v61;
  CFArrayRef v61 = 0;
  if (v24) {
LABEL_90:
  }
    CFRelease(v24);
LABEL_91:
  a1 = v53;
LABEL_92:
  if (v60) {
    CFRelease(v60);
  }
  if (v61) {
    CFRelease(v61);
  }
  if (!v31)
  {
    if (a7) {
      *a7 = 0;
    }
    if (!a6) {
      goto LABEL_123;
    }
    if (v30)
    {
      CFIndex v44 = CFArrayGetCount(v30);
      LODWORD(v45) = v44 > a5;
      if (v44)
      {
        unsigned int v46 = 0;
        goto LABEL_105;
      }
    }
    else
    {
      CFIndex v44 = 0;
      unint64_t v45 = (unint64_t)a5 >> 63;
    }
    unsigned int v46 = -12906;
LABEL_105:
    if (v45) {
      uint64_t v31 = v46;
    }
    else {
      uint64_t v31 = 4294954390;
    }
    if (v31)
    {
      FigSignalErrorAt();
      goto LABEL_124;
    }
    if (!v45)
    {
LABEL_123:
      uint64_t v31 = 0;
      goto LABEL_124;
    }
    while (2)
    {
      *(void *)&long long v57 = 0;
      CFDictionaryRef v63 = 0;
      CFArrayGetValueAtIndex(v30, a5);
      FigRegistryItemCopyMatchingInfo();
      FigRegistryItemCopyDescription();
      if (FigRegistryItemGetFactory())
      {
        *(void *)&long long v57 = 0;
LABEL_115:
        if (v63) {
          uint64_t v47 = ((uint64_t (*)(uint64_t, void, void, uint64_t, void *))v63)(a1, 0, 0, a2, a6);
        }
        else {
          uint64_t v47 = FigSignalErrorAt();
        }
      }
      else
      {
        if (!(void)v57) {
          goto LABEL_115;
        }
        uint64_t v47 = ((uint64_t (*)(uint64_t, uint64_t, void *))v57)(a1, a2, a6);
      }
      uint64_t v31 = v47;
      if (!v47)
      {
        if (*a6 || (uint64_t v31 = FigSignalErrorAt(), !v31))
        {
          if (a8) {
            *a8 = a5;
          }
          uint64_t v31 = 0;
          break;
        }
      }
      if (v44 == ++a5) {
        break;
      }
      continue;
    }
  }
LABEL_124:
  if (v30) {
    CFRelease(v30);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v31;
}

uint64_t VTLoadVideoDecoders()
{
  return vtLoadVideoDecodersGuts(0);
}

uint64_t VTRegisterVideoDecoder(unsigned int a1, uint64_t a2)
{
  return VTRegisterVideoDecoderWithInfo(a1, 0, a2);
}

uint64_t VTRegisterVideoDecoderWithInfo(unsigned int a1, const __CFDictionary *a2, uint64_t a3)
{
  int valuePtr = 0;
  MEMORY[0x199705810](&sCreateVideoDecoderRegistryOnce, vtCreateVideoDecoderRegistry);
  *(_DWORD *)bytes = bswap32(a1);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v7 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 4, 0x600u, 0);
  if (!v7) {
    return FigSignalErrorAt();
  }
  CFStringRef v8 = v7;
  if (!a2)
  {
    Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t v13 = FigSignalErrorAt();
    CFNumberRef v18 = (CFNumberRef)v8;
LABEL_19:
    CFRelease(v18);
    return v13;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, @"CMClassImplementationID");
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v6, 0, a2);
  if (!MutableCopy) {
    goto LABEL_11;
  }
  Mutable = MutableCopy;
  if (Value)
  {
    v12 = CFStringCreateMutableCopy(v6, 0, Value);
    CFStringAppendFormat(v12, 0, @".%@", v8);
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v14 = FigAtomicIncrement32();
  v12 = CFStringCreateMutable(v6, 0);
  CFStringAppendFormat(v12, 0, @"com.apple.videotoolbox.videodecoder.anon-%d", v14);
LABEL_9:
  CFDictionarySetValue(Mutable, @"VTCodecType", v8);
  CFStringRef v15 = CFStringCreateWithFormat(v6, 0, @"Dynamically Registered %@ Video Decoder", v8);
  CFNumberRef v16 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
  if (v16)
  {
    CFDictionaryAddValue(Mutable, @"VTRating", v16);
    CFDictionarySetValue(Mutable, @"VTAllowSandboxedDecode", (const void *)*MEMORY[0x1E4F1CFC8]);
    uint64_t v17 = vtRegisterVideoDecoderInternal(v15, v12, Mutable, a3, 0);
  }
  else
  {
    uint64_t v17 = FigSignalErrorAt();
  }
  uint64_t v13 = v17;
  if (v12) {
    CFRelease(v12);
  }
  CFRelease(Mutable);
  CFRelease(v8);
  if (v15) {
    CFRelease(v15);
  }
  if (v16)
  {
    CFNumberRef v18 = v16;
    goto LABEL_19;
  }
  return v13;
}

CFDictionaryRef FigCreateIOSurfacePropertiesDictionary()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  keys[0] = 0;
  keys[1] = 0;
  values[0] = 0;
  values[1] = 0;
  v0 = (mach_port_t *)MEMORY[0x1E4F2EEF0];
  if ((hasMMU_checked & 1) == 0)
  {
    int v13 = 16;
    uint64_t v1 = IORegistryEntryFromPath(*MEMORY[0x1E4F2EEF0], "IODeviceTree:/arm-io");
    if (v1)
    {
      io_object_t v2 = v1;
      hasMMU_hasMMU = MEMORY[0x199705C00](v1, "iommu-present", valuePtr, &v13) == 0;
      IOObjectRelease(v2);
    }
    hasMMU_checked = 1;
  }
  int v3 = hasMMU_hasMMU;
  if ((hasVXD_checked & 1) == 0)
  {
    uint64_t v4 = 0;
    mach_port_t v5 = *v0;
    while (1)
    {
      CFDictionaryRef v6 = IOServiceMatching(hasVXD_vxdNames[v4]);
      io_service_t MatchingService = IOServiceGetMatchingService(v5, v6);
      if (MatchingService) {
        break;
      }
      if (++v4 == 3) {
        goto LABEL_11;
      }
    }
    IOObjectRelease(MatchingService);
    hasVXD_hasSupport = 1;
LABEL_11:
    hasVXD_checked = 1;
  }
  char v8 = hasVXD_hasSupport;
  MEMORY[0x199705810](&FigRegisterIOSurfacePixelTransferCapability_sOnlyRegisterOnce, FigRegisterIOSurfacePixelTransferCapabilityOnce);
  if (!v3)
  {
    keys[0] = *(void **)MEMORY[0x1E4F2F120];
    values[0] = @"PurpleGfxMem";
    CFIndex v11 = 1;
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v11, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  if ((v8 & 1) == 0)
  {
    CFIndex v11 = 0;
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v11, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  valuePtr[0] = 1024;
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
  keys[0] = *(void **)MEMORY[0x1E4F2EFE8];
  values[0] = v9;
  CFDictionaryRef v10 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v9) {
    CFRelease(v9);
  }
  return v10;
}

uint64_t FigRegisterIOSurfacePixelTransferCapabilityOnce()
{
  v48[5] = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  memset(v36, 0, sizeof(v36));
  sUnsetYCbCrMatrix = CVYCbCrMatrixGetIntegerCodePointForString(0);
  sUnsetColorPrimaryMatrix = CVColorPrimariesGetIntegerCodePointForString(0);
  sUnsetTransferFunction = CVTransferFunctionGetIntegerCodePointForString(0);
  uint64_t result = VTAvoidHardwarePixelTransfer();
  if (!result)
  {
    scalerCapabilities((uint64_t)v36);
    int v1 = LOBYTE(v36[0]) ? 15 : 13;
    int v2 = BYTE1(v36[0]) ? v1 | 0x10 : v1;
    uint64_t result = IOSurfaceAcceleratorCreate();
    if (!result)
    {
      CFRelease(0);
      if ((hasH1CLCD_checked & 1) == 0)
      {
        mach_port_t v3 = *MEMORY[0x1E4F2EEF0];
        CFDictionaryRef v4 = IOServiceMatching("AppleH1CLCD");
        io_service_t MatchingService = IOServiceGetMatchingService(v3, v4);
        hasH1CLCD_hasH1CLCDService = MatchingService != 0;
        if (MatchingService) {
          IOObjectRelease(MatchingService);
        }
        hasH1CLCD_checked = 1;
      }
      if (hasH1CLCD_hasH1CLCDService)
      {
        VTRegisterPixelTransferCapability(2033463856, 0x32767579u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2033463856, 0x4C353635u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741171, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x79343230u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x66343230u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1111970369, 0x79757673u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1111970369, 0x79757666u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2033463856, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704438, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704422, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704422, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1111970369, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741171, 0x79757673u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x79757666u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        return VTRegisterPixelTransferCapability(2037741158, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Validate, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Transfer, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      VTRegisterPixelTransferCapability(875704438, 0x34323076u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875704422, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875704438, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875704422, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x34323076u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875704950, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875704934, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x34323276u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x34323266u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875836534, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875836518, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x34343476u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1111970369, 0x34343466u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(875704422, 0x4C353635u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1278555701, 0x4C353635u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1815162994, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1380411457, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      VTRegisterPixelTransferCapability(1380411457, 0x52476841u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      if (BYTE2(v36[0]))
      {
        VTRegisterPixelTransferCapability(1111970369, 0x79757673u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1111970369, 0x79757666u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741171, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x4C353635u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741158, 0x79757666u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2037741171, 0x79757673u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704438, 0x34323276u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704422, 0x34323266u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (HIBYTE(v36[0]))
      {
        VTRegisterPixelTransferCapability(875704422, 0x34323076u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704438, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704438, 0x34323266u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704422, 0x34323276u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE6(v36[0]))
      {
        VTRegisterPixelTransferCapability(1278226488, 0x4C303038u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1278226488, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE8(v36[0])) {
        VTRegisterPixelTransferCapability(1278226742, 0x4C303136u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE3(v36[0]))
      {
        VTRegisterPixelTransferCapability(875704422, 0x52474241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875836518, 0x52474241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE4(v36[0]))
      {
        VTRegisterPixelTransferCapability(1999843442, 0x77333072u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1999843442, 0x42475241u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1999843442, 0x34323076u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1999843442, 0x34323066u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(1111970369, 0x77333072u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704438, 0x77333072u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(875704422, 0x77333072u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE5(v36[0])) {
        VTRegisterPixelTransferCapability(1647534392, 0x62336138u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE11(v36[0]))
      {
        VTRegisterPixelTransferCapability(2016686642, 0x78343232u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapability(2019963442, 0x78663232u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE4(v36[0]))
      {
        v45[0] = 1815162994;
        memset(&v46[3], 0, 64);
        int v6 = BYTE14(v36[0]);
        if (BYTE14(v36[0]))
        {
          HIDWORD(v45[0]) = 644624754;
          uint64_t v7 = 2;
        }
        else
        {
          uint64_t v7 = 1;
        }
        qmemcpy(v46, "v024f024v224f224v444f444", 24);
        int v8 = BYTE11(v36[0]);
        if (BYTE11(v36[0]))
        {
          v46[3] = 0x7866323278343232;
          uint64_t v9 = 8;
        }
        else
        {
          uint64_t v9 = 6;
        }
        if (BYTE12(v36[0]))
        {
          *(void *)((char *)v46 + 4 * v9) = 0x7866343478343434;
          v9 += 2;
        }
        if (BYTE9(v36[0]))
        {
          *(void *)((char *)v46 + 4 * v9) = 0x7866347078343470;
          v9 += 2;
        }
        if (v6)
        {
          qmemcpy((char *)v46 + 4 * v9, "0v8&0f8&2v8&2f8&4v8&4f8&", 24);
          if (v8)
          {
            *((_DWORD *)&v46[3] + v9) = 645428786;
            v9 += 7;
          }
          else
          {
            v9 += 6;
          }
        }
        VTRegisterPixelTransferCapabilityMxN(v45, v7, (unsigned int *)v46, v9, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE13(v36[0]))
      {
        VTRegisterPixelTransferCapabilityMxN(FigRegisterIOSurfacePixelTransferCapabilityOnce_compressedHTPCPixelFormatTypes, 18, FigRegisterIOSurfacePixelTransferCapabilityOnce_uncompressedPixelFormatTypes, 52, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapabilityMxN(FigRegisterIOSurfacePixelTransferCapabilityOnce_uncompressedPixelFormatTypes, 52, FigRegisterIOSurfacePixelTransferCapabilityOnce_compressedHTPCPixelFormatTypes, 18, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapabilityMxN(FigRegisterIOSurfacePixelTransferCapabilityOnce_compressedHTPCPixelFormatTypes, 18, FigRegisterIOSurfacePixelTransferCapabilityOnce_compressedHTPCPixelFormatTypes, 18, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE14(v36[0]))
      {
        qmemcpy(v46, "0v8&2v8&4v8&0f8&2f8&4f8&0vx&2vx&4vx&0fx&2fx&4fx&0wx&2wx&4wx&p44&p4f&0vs&2vs&4vs&0vt&2vt&4vt&s4x&s4t&s4s&s2x&s2t&s2s&80v&82v&84v&0fh&2fh&4fh&80x&82x&84x&r3w&AGB&AhR&83b&h0L&80L&01L&61L&", sizeof(v46));
        if (BYTE12(v37))
        {
          qmemcpy(v47, "0v8-0f8-0v8/0f8/0v8|0f8|0vx-0fx-0vx/0fx/0vx|0fx|2vx-2fx-2vx/2fx/2vx|2fx|h0L-h0L/h0L|AhR-AhR/AhR|AGB-AGB/AGB|0fh-0fh/0fh|", sizeof(v47));
          uint64_t v10 = 76;
        }
        else
        {
          uint64_t v10 = 46;
        }
        VTRegisterPixelTransferCapabilityMxN(v46, v10, FigRegisterIOSurfacePixelTransferCapabilityOnce_uncompressedPixelFormatTypes, 52, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapabilityMxN(FigRegisterIOSurfacePixelTransferCapabilityOnce_uncompressedPixelFormatTypes, 52, (unsigned int *)v46, v10, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        VTRegisterPixelTransferCapabilityMxN(v46, v10, (unsigned int *)v46, v10, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      qmemcpy(v46, "v024v224v444f024f224f444024p224p444p02fp22fp44fp02wp22wp44wp024x02fx02wx444x44fx44wxp44xp4fxr03wARGB8a3b", 104);
      int v11 = HIBYTE(v37);
      if (HIBYTE(v37))
      {
        LODWORD(v46[15]) = 2016698739;
        *(_OWORD *)&v46[13] = *(_OWORD *)"8a0v8a2v8a4vsa2xsa4x";
        if (BYTE13(v37))
        {
          qmemcpy((char *)&v46[15] + 4, "02vt22vt44vtsa2tsa4t", 20);
          uint64_t v12 = 36;
        }
        else
        {
          uint64_t v12 = 31;
        }
      }
      else if (BYTE13(v37))
      {
        qmemcpy(&v46[13], "02vt22vt44vt", 12);
        uint64_t v12 = 29;
      }
      else
      {
        uint64_t v12 = 26;
      }
      if (BYTE14(v37))
      {
        qmemcpy((char *)v46 + 4 * v12, "02vs22vs44vs", 12);
        if (v11)
        {
          *(void *)((char *)&v46[1] + 4 * v12 + 4) = 0x7334617373326173;
          v12 += 5;
        }
        else
        {
          v12 += 3;
        }
      }
      uint64_t result = VTRegisterPixelTransferCapabilityMxN(v46, v12, (unsigned int *)v46, v12, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      if (BYTE7(v36[0])) {
        uint64_t result = VTRegisterPixelTransferCapability(1278226736, 0x4C303130u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      if (BYTE10(v36[0]) && BYTE11(v36[0])) {
        uint64_t result = VTRegisterPixelTransferCapability(1882468912, 0x70343232u, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
      }
      int v13 = BYTE9(v36[0]);
      if (BYTE9(v36[0]))
      {
        qmemcpy(v45, "p44xp4fxp4wx", 12);
        __int16 v43 = 257;
        char v44 = 1;
        __int16 v41 = 0;
        char v42 = 0;
        unsigned int v14 = 3;
      }
      else
      {
        unsigned int v14 = 0;
      }
      int v15 = BYTE12(v36[0]);
      if (BYTE12(v36[0]))
      {
        *(_OWORD *)((char *)v45 + 4 * v14) = xmmword_193E80170;
        uint64_t v16 = v14 | 4;
        *(void *)((char *)v45 + 4 * v16) = 0x7077343470663434;
        *(_DWORD *)((char *)&v43 + v14) = 16843009;
        *((unsigned char *)&v43 + v16) = 1;
        uint64_t v17 = v14 + 5;
        *((unsigned char *)&v43 + v17) = 1;
        *(_DWORD *)((char *)&v41 + v14) = 0;
        *((unsigned char *)&v41 + v16) = 0;
        *((unsigned char *)&v41 + v17) = 0;
        v14 += 6;
      }
      if (BYTE11(v36[0]))
      {
        *(_OWORD *)((char *)v45 + 4 * v14) = xmmword_193E80180;
        uint64_t v18 = v14 + 4;
        *(void *)((char *)v45 + 4 * v18) = 0x7077323270663232;
        *(_DWORD *)((char *)&v43 + v14) = 0;
        *(__int16 *)((char *)&v43 + v18) = 0;
        *(_DWORD *)((char *)&v41 + v14) = 16843009;
        *(__int16 *)((char *)&v41 + v18) = 257;
        v14 += 6;
      }
      if (BYTE10(v36[0]))
      {
        *(_OWORD *)((char *)v45 + 4 * v14) = xmmword_193E80190;
        uint64_t v19 = v14 + 4;
        *(void *)((char *)v45 + 4 * v19) = 0x7077323070663230;
        *(_DWORD *)((char *)&v43 + v14) = 0;
        *(__int16 *)((char *)&v43 + v19) = 0;
        *(_DWORD *)((char *)&v41 + v14) = 0;
        *(__int16 *)((char *)&v41 + v19) = 0;
        v14 += 6;
      }
      else if (!v14)
      {
LABEL_92:
        if (v13 && v15)
        {
          uint64_t v31 = 0;
          qmemcpy(v48, "p44xp4fxp4wx024p02fp02wp", 24);
          qmemcpy(v40, "444x44fx44wx024x02fx02wx", sizeof(v40));
          do
          {
            unsigned int v32 = *(_DWORD *)((char *)v48 + v31);
            unsigned int v33 = *(_DWORD *)&v40[v31];
            VTRegisterPixelTransferCapability(v32, v33, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
            uint64_t result = VTRegisterPixelTransferCapability(v33, v32, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
            v31 += 4;
          }
          while (v31 != 24);
        }
        return result;
      }
      uint64_t v20 = 0;
      uint64_t v34 = v14;
      do
      {
        if (BYTE4(v36[0]))
        {
          LODWORD(v48[0]) = 1999843442;
          uint64_t v21 = 1;
        }
        else
        {
          uint64_t v21 = 0;
        }
        unsigned int v22 = *((_DWORD *)v45 + v20);
        int v23 = *((unsigned __int8 *)&v43 + v20);
        int v24 = *((unsigned __int8 *)&v41 + v20);
        qmemcpy((char *)v48 + 4 * v21, "ARGBv024f024", 12);
        uint64_t v25 = v21 + 3;
        if (v24)
        {
          uint64_t v26 = 4 * v25;
          uint64_t v25 = v21 + 5;
          *(void *)((char *)v48 + v26) = 0x3432326634323276;
        }
        uint64_t v35 = v20;
        if (v23)
        {
          uint64_t v27 = 4 * v25;
          v25 += 2;
          *(void *)((char *)v48 + v27) = 0x3434346634343476;
        }
        uint64_t v28 = 0;
        uint64_t v29 = 4 * v25;
        do
        {
          unsigned int v30 = *(_DWORD *)((char *)v48 + v28);
          VTRegisterPixelTransferCapability(v22, v30, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
          VTRegisterPixelTransferCapability(v30, v22, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
          v28 += 4;
        }
        while (v29 != v28);
        uint64_t result = VTRegisterPixelTransferCapability(v22, v22, v2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_ValidateM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Open, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_TransferM2, (uint64_t)figIOSurfaceAcceleratedPixelTransfer_Close);
        uint64_t v20 = v35 + 1;
      }
      while (v35 + 1 != v34);
      int v13 = BYTE9(v36[0]);
      int v15 = BYTE12(v36[0]);
      goto LABEL_92;
    }
  }
  return result;
}

uint64_t VTRegisterPixelTransferCapability(int a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v9 = a1;
  unsigned int v8 = a2;
  return VTRegisterPixelTransferCapabilityMxN(&v9, 1, &v8, 1, a3, a4, a5, a6, a7);
}

OSStatus VTDecompressionSessionCreate(CFAllocatorRef allocator, CMVideoFormatDescriptionRef videoFormatDescription, CFDictionaryRef videoDecoderSpecification, CFDictionaryRef destinationImageBufferAttributes, const VTDecompressionOutputCallbackRecord *outputCallback, VTDecompressionSessionRef *decompressionSessionOut)
{
  return VTDecompressionSessionCreateWithOptions((uint64_t)allocator, videoFormatDescription, videoDecoderSpecification, destinationImageBufferAttributes, outputCallback, 0, (uint64_t *)decompressionSessionOut);
}

void RegisterVTDecompressionSession()
{
  v0 = (const void *)_CFRuntimeRegisterClass();
  sVTDecompressionSessionID = (uint64_t)v0;
  sVTDecompressionSessionPropertyCallbacks = 0;
  unk_1EB3B89A0 = VTDecompressionSessionCopySupportedPropertyDictionary;
  qword_1EB3B89A8 = (uint64_t)VTDecompressionSessionSetProperty;
  qword_1EB3B89B0 = (uint64_t)VTDecompressionSessionCopyProperty;
  qword_1EB3B89B8 = (uint64_t)VTDecompressionSessionSetProperties;
  qword_1EB3B89C0 = (uint64_t)VTDecompressionSessionCopySerializableProperties;

  VTSessionRegisterCallbacksForTypeID(&sVTDecompressionSessionPropertyCallbacks, v0);
}

void VTSessionRegisterCallbacksForTypeID(void *a1, const void *a2)
{
  MEMORY[0x199705810](&sVTSessionCallbacksMutexCreateOnce, vtCreateSessionCallbacksMutexOnce);
  MEMORY[0x1997056B0](sVTSessionCallbacksMutex);
  if (!*a1
    && a1[1]
    && a1[2]
    && a1[3]
    && a1[4]
    && a1[5]
    && ((CFDictionaryRef Mutable = (const __CFDictionary *)sVTSessionCallbacksPerTypeID) != 0
     || (CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0),
         (sVTSessionCallbacksPerTypeID = (uint64_t)Mutable) != 0))
    && !CFDictionaryGetCountOfKey(Mutable, a2))
  {
    CFDictionarySetValue((CFMutableDictionaryRef)sVTSessionCallbacksPerTypeID, a2, a1);
  }
  else
  {
    FigSignalErrorAt();
  }

  JUMPOUT(0x1997056C0);
}

uint64_t vtCreateSessionCallbacksMutexOnce()
{
  uint64_t result = FigSimpleMutexCreate();
  sVTSessionCallbacksMutex = result;
  return result;
}

double vtDecompressionSessionInit(uint64_t a1)
{
  *(void *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t VTVideoDecoderGetClassID()
{
  return sVTVideoDecoderClassID;
}

uint64_t RegisterVTVideoDecoderType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t vtDecompressionSubDuctAllocate(const __CFAllocator *a1, void *a2)
{
  *a2 = 0;
  mach_port_t v3 = CFAllocatorAllocate(a1, 304, 0);
  if (!v3) {
    return 4294954392;
  }
  CFDictionaryRef v4 = v3;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[15] = 0u;
  v3[16] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  *mach_port_t v3 = 0u;
  uint64_t v5 = FigSimpleMutexCreate();
  uint64_t result = 0;
  *((void *)v4 + 13) = v5;
  *((_DWORD *)v4 + 19) = 1;
  *((unsigned char *)v4 + 144) = 1;
  *a2 = v4;
  return result;
}

uint64_t VTDecoderSessionSetPixelBufferAttributes(uint64_t *a1, const void *a2)
{
  if (a1 && (uint64_t v2 = *a1) != 0)
  {
    MEMORY[0x1997056B0](*(void *)(v2 + 104));
    if (a2) {
      CFRetain(a2);
    }
    CFDictionaryRef v4 = *(const void **)(v2 + 56);
    if (v4) {
      CFRelease(v4);
    }
    *(void *)(v2 + 56) = a2;
    ++*(_DWORD *)(v2 + 76);
    MEMORY[0x1997056C0](*(void *)(v2 + 104));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTDecoderSessionGetPixelBufferPool(uint64_t *a1)
{
  return vtDecoderSessionGetSubDuctPixelBufferPool(a1, 1);
}

CVPixelBufferPoolRef *VTBuildPixelBufferPools(const __CFAllocator *a1, const __CFDictionary *a2, const __CFDictionary *a3, uint64_t a4, CVPixelBufferPoolRef *a5, CVPixelBufferPoolRef *a6)
{
  return vtBuildPixelBufferPoolsCommon(a1, a2, a3, 0, a4, 0, 0, 0, 0, 0, a5, a6, 0, 0);
}

uint64_t vtCreateUsablePixelBufferAttributes(const __CFAllocator *a1, uint64_t a2, CFDictionaryRef theDict, const __CFDictionary *a4, int a5, __CFDictionary **a6, char *a7)
{
  if (theDict)
  {
    CFTypeRef cf = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F24D70]);
    CFStringRef Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F24E10]);
    int v11 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F24D08]);
  }
  else
  {
    CFTypeRef cf = 0;
    CFStringRef Value = 0;
    int v11 = 0;
  }
  if (a4)
  {
    uint64_t v12 = (const void *)*MEMORY[0x1E4F24D20];
    v84 = Value;
    BOOL v13 = CFDictionaryContainsKey(a4, (const void *)*MEMORY[0x1E4F24D20])
       && (!theDict || !CFDictionaryContainsKey(theDict, v12));
    uint64_t v17 = v11;
    if (CFDictionaryContainsKey(a4, v12))
    {
      uint64_t v92 = 0;
      CFDictionaryGetValue(a4, v12);
      if (theDict) {
        CFDictionaryGetValue(theDict, v12);
      }
      int IntIfPresent = FigCFDictionaryGetIntIfPresent();
      int v19 = FigCFDictionaryGetIntIfPresent();
      if (IntIfPresent) {
        BOOL v20 = HIDWORD(v92) == 0;
      }
      else {
        BOOL v20 = 1;
      }
      int v15 = !v20 && v19 == 0 && v92 == 0;
    }
    else
    {
      int v15 = 0;
    }
    int v23 = (const void *)*MEMORY[0x1E4F24CB0];
    int v24 = CFDictionaryContainsKey(a4, (const void *)*MEMORY[0x1E4F24CB0]);
    BOOL v14 = v24 != 0;
    if (theDict && v24)
    {
      if (CFDictionaryContainsKey(theDict, v23))
      {
        BOOL v14 = 0;
      }
      else
      {
        CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v12);
        if (v25) {
          BOOL v14 = CFDictionaryContainsKey(v25, (const void *)*MEMORY[0x1E4F2EFE8]) == 0;
        }
        else {
          BOOL v14 = 1;
        }
      }
    }
    BOOL v16 = CFDictionaryContainsKey(a4, (const void *)*MEMORY[0x1E4F24D30]) != 0;
    int v11 = v17;
    CFStringRef Value = v84;
    if (v13) {
      goto LABEL_45;
    }
  }
  else
  {
    BOOL v14 = 0;
    BOOL v13 = 0;
    int v15 = 0;
    BOOL v16 = 0;
  }
  if (theDict && cf && Value && v11)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, theDict);
    if (MutableCopy)
    {
      if (a5)
      {
        CFTypeID TypeID = CFArrayGetTypeID();
        CFTypeID v28 = CFGetTypeID(cf);
        char v29 = 0;
        unsigned int v30 = 0;
        if (!a4 || TypeID != v28)
        {
          CFMutableArrayRef ReorderedPixelFormatArray = 0;
          goto LABEL_131;
        }
        uint64_t v31 = (const void *)*MEMORY[0x1E4F24D70];
        unsigned int v32 = (__CFArray *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24D70]);
        CFMutableArrayRef ReorderedPixelFormatArray = vtCreateReorderedPixelFormatArray(a1, (CFArrayRef)cf, v32);
        if (ReorderedPixelFormatArray)
        {
          CFDictionarySetValue(MutableCopy, v31, ReorderedPixelFormatArray);
          unsigned int v30 = 0;
          char v29 = 1;
LABEL_131:
          if (VTAvoidIOSurfaceBackings()) {
            CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D20]);
          }
          uint64_t v51 = 0;
          *a6 = MutableCopy;
          CFMutableDictionaryRef MutableCopy = 0;
LABEL_134:
          if (!a7) {
            goto LABEL_136;
          }
          goto LABEL_135;
        }
        unsigned int v30 = 0;
      }
      else
      {
        unsigned int v30 = 0;
        CFMutableArrayRef ReorderedPixelFormatArray = 0;
      }
      char v29 = 0;
      goto LABEL_131;
    }
LABEL_70:
    unsigned int v30 = 0;
    CFMutableArrayRef ReorderedPixelFormatArray = 0;
    char v29 = 0;
    uint64_t v51 = 4294954392;
    if (!a7) {
      goto LABEL_136;
    }
LABEL_135:
    *a7 = v29;
    goto LABEL_136;
  }
LABEL_45:
  if (theDict) {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutableCopy(a1, 0, theDict);
  }
  else {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFMutableDictionaryRef MutableCopy = Mutable;
  if (!Mutable) {
    goto LABEL_70;
  }
  v82 = v11;
  char v35 = !v13;
  if (!a4) {
    char v35 = 1;
  }
  if ((v35 & 1) == 0)
  {
    v36 = (const void *)*MEMORY[0x1E4F24D20];
    long long v37 = CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24D20]);
    CFDictionarySetValue(MutableCopy, v36, v37);
  }
  if (a4 && v15)
  {
    long long v38 = a7;
    uint64_t v39 = (const void *)*MEMORY[0x1E4F24D20];
    CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24D20]);
    CFDictionaryGetValue(MutableCopy, v39);
    uint64_t v40 = FigCFDictionaryCreateMutableCopy();
    if (!v40)
    {
      uint64_t v51 = FigSignalErrorAt();
      unsigned int v30 = 0;
      CFMutableArrayRef ReorderedPixelFormatArray = 0;
      char v29 = 0;
      if (a7) {
        goto LABEL_135;
      }
      goto LABEL_136;
    }
    __int16 v41 = (const void *)v40;
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValue();
    CFRelease(v41);
    a7 = v38;
  }
  if (a4 && v14)
  {
    char v42 = (const void *)*MEMORY[0x1E4F24CB0];
    __int16 v43 = CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24CB0]);
    CFDictionarySetValue(MutableCopy, v42, v43);
  }
  char v44 = !v16;
  if (!a4) {
    char v44 = 1;
  }
  if ((v44 & 1) == 0)
  {
    unint64_t v45 = (const void *)*MEMORY[0x1E4F24D30];
    unsigned int v46 = CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24D30]);
    CFDictionarySetValue(MutableCopy, v45, v46);
  }
  if (!cf)
  {
    v85 = Value;
    cfa = a7;
    if (a4)
    {
      v52 = (const void *)*MEMORY[0x1E4F24D70];
      unsigned int v53 = (void *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24D70]);
      if (v53)
      {
        v54 = v53;
        CFTypeID v55 = CFNumberGetTypeID();
        if (v55 == CFGetTypeID(v54))
        {
          if (vtIsPixelFormatCompatibleWithAttributes(v54, (uint64_t)theDict))
          {
            unsigned int v30 = (void *)CFRetain(v54);
LABEL_93:
            if (v30)
            {
              CFDictionaryAddValue(MutableCopy, v52, v30);
LABEL_110:
              CFMutableArrayRef ReorderedPixelFormatArray = 0;
              char v29 = 0;
              a7 = cfa;
              CFStringRef Value = v85;
              goto LABEL_117;
            }
          }
        }
        else
        {
          CFTypeID v56 = CFArrayGetTypeID();
          if (v56 == CFGetTypeID(v54))
          {
            CFIndex Count = CFArrayGetCount((CFArrayRef)v54);
            if (Count >= 1)
            {
              CFIndex v58 = Count;
              CFIndex v59 = 0;
              unsigned int v30 = 0;
              while (1)
              {
                ValueAtIndex = (void *)CFArrayGetValueAtIndex((CFArrayRef)v54, v59);
                CFTypeID v61 = CFNumberGetTypeID();
                if (v61 == CFGetTypeID(ValueAtIndex)
                  && vtIsPixelFormatCompatibleWithAttributes(ValueAtIndex, (uint64_t)theDict))
                {
                  if (!v30)
                  {
                    unsigned int v30 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
                    if (!v30) {
                      goto LABEL_111;
                    }
                  }
                  CFArrayAppendValue((CFMutableArrayRef)v30, ValueAtIndex);
                }
                if (v58 == ++v59) {
                  goto LABEL_93;
                }
              }
            }
          }
        }
        CFTypeID v62 = CFGetTypeID(v54);
        if (v62 == CFNumberGetTypeID())
        {
          if (vtPixelFormatRequiresRGhAFallback(v54)) {
            goto LABEL_97;
          }
        }
        else
        {
          CFTypeID v66 = CFGetTypeID(v54);
          if (v66 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)v54) >= 1)
          {
            CFIndex v67 = 0;
            while (1)
            {
              v68 = CFArrayGetValueAtIndex((CFArrayRef)v54, v67);
              if (vtPixelFormatRequiresRGhAFallback(v68)) {
                break;
              }
              if (CFArrayGetCount((CFArrayRef)v54) <= ++v67) {
                goto LABEL_103;
              }
            }
LABEL_97:
            CFDictionaryRef v63 = MutableCopy;
            CFRange v64 = v52;
            int v65 = 1380411457;
LABEL_114:
            uint64_t v75 = vtAddNumberToCFDictionary(v63, v64, v65);
            char v29 = 0;
            unsigned int v30 = 0;
            CFMutableArrayRef ReorderedPixelFormatArray = 0;
            a7 = cfa;
            CFStringRef Value = v85;
            if (v75)
            {
              uint64_t v51 = v75;
              CFMutableArrayRef ReorderedPixelFormatArray = 0;
              if (cfa) {
                goto LABEL_135;
              }
              goto LABEL_136;
            }
            goto LABEL_117;
          }
        }
      }
    }
LABEL_103:
    uint64_t v69 = 0;
    v70 = (const void *)*MEMORY[0x1E4F24D70];
    char v71 = 1;
    while (1)
    {
      int valuePtr = dword_193E7DB00[v69];
      CFNumberRef v72 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      unsigned int v30 = v72;
      if (!v72) {
        break;
      }
      BOOL IsPixelFormatCompatibleWithAttributes = vtIsPixelFormatCompatibleWithAttributes(v72, (uint64_t)theDict);
      if (IsPixelFormatCompatibleWithAttributes) {
        CFDictionaryAddValue(MutableCopy, v70, v30);
      }
      CFRelease(v30);
      char v74 = !IsPixelFormatCompatibleWithAttributes & v71;
      uint64_t v69 = 1;
      char v71 = 0;
      if ((v74 & 1) == 0)
      {
        if (IsPixelFormatCompatibleWithAttributes)
        {
          unsigned int v30 = 0;
          goto LABEL_110;
        }
        CFDictionaryRef v63 = MutableCopy;
        CFRange v64 = v70;
        int v65 = 32;
        goto LABEL_114;
      }
    }
LABEL_111:
    CFMutableArrayRef ReorderedPixelFormatArray = 0;
    char v29 = 0;
    uint64_t v51 = 4294954392;
    a7 = cfa;
    if (cfa) {
      goto LABEL_135;
    }
    goto LABEL_136;
  }
  if (!a5)
  {
    unsigned int v30 = 0;
    CFMutableArrayRef ReorderedPixelFormatArray = 0;
LABEL_83:
    char v29 = 0;
    goto LABEL_117;
  }
  CFTypeID v47 = CFArrayGetTypeID();
  CFTypeID v48 = CFGetTypeID(cf);
  char v29 = 0;
  unsigned int v30 = 0;
  CFMutableArrayRef ReorderedPixelFormatArray = 0;
  if (a4 && v47 == v48)
  {
    v49 = (const void *)*MEMORY[0x1E4F24D70];
    v50 = (__CFArray *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24D70]);
    CFMutableArrayRef ReorderedPixelFormatArray = vtCreateReorderedPixelFormatArray(a1, (CFArrayRef)cf, v50);
    if (ReorderedPixelFormatArray)
    {
      CFDictionarySetValue(MutableCopy, v49, ReorderedPixelFormatArray);
      unsigned int v30 = 0;
      char v29 = 1;
      goto LABEL_117;
    }
    unsigned int v30 = 0;
    goto LABEL_83;
  }
LABEL_117:
  if (Value) {
    goto LABEL_118;
  }
  v77 = (const void *)*MEMORY[0x1E4F24E10];
  if (a4)
  {
    v78 = CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24E10]);
    if (v78)
    {
      CFDictionaryAddValue(MutableCopy, v77, v78);
      if (v82) {
        goto LABEL_131;
      }
      v76 = (const void *)*MEMORY[0x1E4F24D08];
      goto LABEL_125;
    }
  }
  uint64_t v80 = vtAddNumberToCFDictionary(MutableCopy, v77, a2);
  if (!v80)
  {
LABEL_118:
    if (v82) {
      goto LABEL_131;
    }
    v76 = (const void *)*MEMORY[0x1E4F24D08];
    if (!a4)
    {
LABEL_130:
      uint64_t v51 = vtAddNumberToCFDictionary(MutableCopy, v76, SHIDWORD(a2));
      if (v51) {
        goto LABEL_134;
      }
      goto LABEL_131;
    }
LABEL_125:
    v79 = CFDictionaryGetValue(a4, v76);
    if (v79)
    {
      CFDictionaryAddValue(MutableCopy, v76, v79);
      goto LABEL_131;
    }
    goto LABEL_130;
  }
  uint64_t v51 = v80;
  if (a7) {
    goto LABEL_135;
  }
LABEL_136:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (ReorderedPixelFormatArray) {
    CFRelease(ReorderedPixelFormatArray);
  }
  return v51;
}

void vtDecompressionDuctFinalize(CFAllocatorRef allocator, void *ptr)
{
  if (ptr)
  {
    uint64_t v4 = *((void *)ptr + 1);
    if (v4)
    {
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(void (**)(uint64_t))(v6 + 24);
      if (v7) {
        v7(v4);
      }
      CFRelease(*((CFTypeRef *)ptr + 1));
      *((void *)ptr + 1) = 0;
    }
    unsigned int v8 = (const void *)*((void *)ptr + 6);
    if (v8)
    {
      CFRelease(v8);
      *((void *)ptr + 6) = 0;
    }
    int v9 = (const void *)*((void *)ptr + 8);
    if (v9)
    {
      CFRelease(v9);
      *((void *)ptr + 8) = 0;
    }
    if (*((void *)ptr + 9))
    {
      FigSimpleMutexDestroy();
      *((void *)ptr + 9) = 0;
    }
    uint64_t v10 = (const void *)*((void *)ptr + 10);
    if (v10)
    {
      CFRelease(v10);
      *((void *)ptr + 10) = 0;
    }
    *((void *)ptr + 12) = 0;
    int v11 = (const void *)*((void *)ptr + 11);
    if (v11)
    {
      CFRelease(v11);
      *((void *)ptr + 11) = 0;
    }
    uint64_t v12 = (const void *)*((void *)ptr + 22);
    if (v12)
    {
      CFRelease(v12);
      *((void *)ptr + 22) = 0;
    }
    CFAllocatorDeallocate(allocator, ptr);
  }
}

void vtDecompressionSubDuctFinalize(const __CFAllocator *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(void (**)(uint64_t))(v6 + 24);
      if (v7) {
        v7(v4);
      }
      CFRelease(*(CFTypeRef *)(a2 + 8));
      *(void *)(a2 + 8) = 0;
    }
    vtDecompressionSubDuctFinishAsynchronousTransfers(a2);
    unsigned int v8 = *(const void **)(a2 + 112);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a2 + 112) = 0;
    }
    int v9 = *(const void **)(a2 + 120);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a2 + 120) = 0;
    }
    uint64_t v10 = *(const void **)(a2 + 16);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a2 + 16) = 0;
    }
    int v11 = *(const void **)(a2 + 296);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a2 + 296) = 0;
    }
    uint64_t v12 = *(const void **)(a2 + 264);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a2 + 264) = 0;
    }
    BOOL v13 = *(const void **)(a2 + 64);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a2 + 64) = 0;
    }
    BOOL v14 = *(const void **)(a2 + 136);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(a2 + 136) = 0;
    }
    *(void *)(a2 + 192) = 0;
    CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(a2 + 88));
    *(void *)(a2 + 88) = 0;
    CVPixelBufferPoolRelease(*(CVPixelBufferPoolRef *)(a2 + 96));
    *(void *)(a2 + 96) = 0;
    int v15 = *(const void **)(a2 + 128);
    if (v15) {
      CFRelease(v15);
    }
    *(void *)(a2 + 128) = 0;
    BOOL v16 = *(const void **)(a2 + 56);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(a2 + 56) = 0;
    }
    if (*(void *)(a2 + 104))
    {
      FigSimpleMutexDestroy();
      *(void *)(a2 + 104) = 0;
    }
    uint64_t v17 = *(const void **)(a2 + 176);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a2 + 176) = 0;
    }
    uint64_t v18 = *(const void **)(a2 + 184);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(a2 + 184) = 0;
    }
    int v19 = *(const void **)(a2 + 248);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(a2 + 248) = 0;
    }
    BOOL v20 = *(const void **)(a2 + 200);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(a2 + 200) = 0;
    }
    uint64_t v21 = *(const void **)(a2 + 208);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(a2 + 208) = 0;
    }
    unsigned int v22 = *(const void **)(a2 + 216);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(a2 + 216) = 0;
    }
    int v23 = *(const void **)(a2 + 224);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(a2 + 224) = 0;
    }
    int v24 = *(const void **)(a2 + 232);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(a2 + 232) = 0;
    }
    CFDictionaryRef v25 = *(const void **)(a2 + 280);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(a2 + 280) = 0;
    }
    uint64_t v26 = *(const void **)(a2 + 288);
    if (v26)
    {
      CFRelease(v26);
      *(void *)(a2 + 288) = 0;
    }
    CFAllocatorDeallocate(a1, (void *)a2);
  }
}

OSStatus VTSessionCopyProperty(VTSessionRef session, CFStringRef propertyKey, CFAllocatorRef allocator, void *propertyValueOut)
{
  if (session
    && (unsigned int v8 = (const void *)CFGetTypeID(session), CallbacksWithTypeID = VTSessionGetCallbacksWithTypeID(v8), propertyKey)
    && propertyValueOut
    && CallbacksWithTypeID)
  {
    uint64_t v10 = (uint64_t (*)(VTSessionRef, CFStringRef, CFAllocatorRef, void *))CallbacksWithTypeID[3];
    return v10(session, propertyKey, allocator, propertyValueOut);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

const void *VTSessionGetCallbacksWithTypeID(const void *a1)
{
  MEMORY[0x199705810](&sVTSessionCallbacksMutexCreateOnce, vtCreateSessionCallbacksMutexOnce);
  MEMORY[0x1997056B0](sVTSessionCallbacksMutex);
  if (sVTSessionCallbacksPerTypeID) {
    CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)sVTSessionCallbacksPerTypeID, a1);
  }
  else {
    CFStringRef Value = 0;
  }
  MEMORY[0x1997056C0](sVTSessionCallbacksMutex);
  return Value;
}

uint64_t VTDecompressionSessionCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  *a4 = 0;
  if (*(unsigned char *)(a1 + 16))
  {
LABEL_2:
    return FigSignalErrorAt();
  }
  uint64_t v9 = *(void *)(a1 + 24);
  if (v9)
  {
    return VTDecompressionSessionRemoteBridge_CopyProperty(v9, a2, a3, a4);
  }
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  if (!vtDecompressionSessionIsPropertyHandledByVideoToolbox(a2)) {
    goto LABEL_48;
  }
  if (!vtDecompressionSessionIsPropertySupportedBySubDuct(a2))
  {
    if (CFEqual(@"NumberOfFramesBeingDecoded", a2))
    {
      LODWORD(valuePtr.value) = *(_DWORD *)(*(void *)v10 + 64);
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_CMTime valuePtr = &valuePtr;
      CFNumberType v14 = kCFNumberIntType;
LABEL_17:
      int v15 = CFNumberCreate(v12, v14, p_valuePtr);
LABEL_30:
      BOOL v20 = v15;
LABEL_31:
      uint64_t result = 0;
      *a4 = v20;
      return result;
    }
    if (CFEqual(@"MinOutputPresentationTimeStampOfFramesBeingDecoded", a2))
    {
      CMTime valuePtr = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      vtDecompressionDuctGetMinOutputPresentationTimeStampOfFramesBeingDecoded(v10, &valuePtr);
LABEL_29:
      CMTime v28 = valuePtr;
      int v15 = CMTimeCopyAsDictionary(&v28, a3);
      goto LABEL_30;
    }
    if (CFEqual(@"MaxOutputPresentationTimeStampOfFramesBeingDecoded", a2))
    {
      CMTime valuePtr = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      vtDecompressionDuctGetMaxOutputPresentationTimeStampOfFramesBeingDecoded(v10, &valuePtr);
      goto LABEL_29;
    }
    if (CFEqual(@"UsingSandboxedVideoDecoder", a2))
    {
      uint64_t v21 = (const CFStringRef *)MEMORY[0x1E4F1CFC8];
      if (!v11) {
        uint64_t v21 = (const CFStringRef *)MEMORY[0x1E4F1CFD0];
      }
LABEL_35:
      CFStringRef v22 = *v21;
LABEL_36:
      int v15 = (void *)CFRetain(v22);
      goto LABEL_30;
    }
    if (CFEqual(@"OnlyTheseFrames", a2))
    {
      if (*(unsigned char *)(v10 + 104))
      {
        switch(*(_DWORD *)(v10 + 108))
        {
          case 0:
            uint64_t v21 = &kVTDecompressionProperty_OnlyTheseFrames_AllFrames;
            goto LABEL_35;
          case 1:
            uint64_t v21 = &kVTDecompressionProperty_OnlyTheseFrames_NonDroppableFrames;
            goto LABEL_35;
          case 2:
            uint64_t v21 = &kVTDecompressionProperty_OnlyTheseFrames_IFrames;
            goto LABEL_35;
          case 3:
            uint64_t v21 = &kVTDecompressionProperty_OnlyTheseFrames_KeyFrames;
            goto LABEL_35;
          default:
            goto LABEL_2;
        }
      }
    }
    else if (CFEqual(@"ReducedFrameDelivery", a2))
    {
      if (*(unsigned char *)(v10 + 104))
      {
        CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        p_CMTime valuePtr = (CMTime *)(v10 + 120);
        CFNumberType v14 = kCFNumberDoubleType;
        goto LABEL_17;
      }
    }
    else
    {
      if (!CFEqual(@"SuggestedQualityOfServiceTiers", a2))
      {
        uint64_t result = CFEqual(@"PowerLogSessionID", a2);
        if (!result) {
          return result;
        }
        CFStringRef v22 = *(CFStringRef *)(v10 + 176);
        if (!v22)
        {
          BOOL v20 = 0;
          goto LABEL_31;
        }
        goto LABEL_36;
      }
      if (*(unsigned char *)(v10 + 104))
      {
        MEMORY[0x199705810](&sVTCreateSuggestedQualityOfServiceTiersOnce, vtCreateSuggestedQualityOfServiceTiers);
        CFStringRef v22 = (CFStringRef)sVTVideoDecoderSuggestedQualityOfServiceTiers;
        if (!sVTVideoDecoderSuggestedQualityOfServiceTiers) {
          goto LABEL_2;
        }
        goto LABEL_36;
      }
    }
LABEL_48:
    valuePtr.value = 0;
    VTDecompressionSessionCopySupportedPropertyDictionary(a1, &valuePtr);
    if (!valuePtr.value) {
      return 4294954396;
    }
    int v23 = CFDictionaryContainsKey((CFDictionaryRef)valuePtr.value, a2);
    CFRelease((CFTypeRef)valuePtr.value);
    if (!v23) {
      return 4294954396;
    }
    uint64_t v24 = *(void *)(v10 + 8);
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, void *))(v26 + 48);
    if (v27) {
      return v27(v24, a2, a3, a4);
    }
    return 4294954514;
  }
  if (v11)
  {
    return vtDecompressionSubDuctCopyProperty(v11, a2, (uint64_t)a3, a4);
  }
  uint64_t v16 = *(void *)(v10 + 8);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  int v19 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, void *))(v18 + 48);
  if (!v19) {
    return 4294954514;
  }

  return v19(v16, a2, a3, a4);
}

BOOL vtDecompressionSessionIsPropertyHandledByVideoToolbox(const void *a1)
{
  return sVTDecompressionSessionPropertiesHandledByVideoToolbox
      && CFDictionaryContainsKey((CFDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolbox, a1);
}

void vtDecompressionSessionCreatePropertiesHandledByVideoToolbox()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct = (uint64_t)Mutable;
    if (!Mutable) {
      goto LABEL_18;
    }
    CFDictionarySetValue(Mutable, @"NumberOfFramesBeingDecoded", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, @"MinOutputPresentationTimeStampOfFramesBeingDecoded", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, @"MaxOutputPresentationTimeStampOfFramesBeingDecoded", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, @"UsingSandboxedVideoDecoder", v2);
    values = vtCreateFrameTypesArrayElement(@"AllFrames");
    CFDictionaryRef FrameTypesArrayElement = vtCreateFrameTypesArrayElement(@"NonDroppableFrames");
    CFDictionaryRef v11 = vtCreateFrameTypesArrayElement(@"IFrames");
    CFDictionaryRef v12 = vtCreateFrameTypesArrayElement(@"KeyFrames");
    CFArrayRef v4 = CFArrayCreate(v0, (const void **)&values, 4, MEMORY[0x1E4F1D510]);
    if (!v4) {
      FigSignalErrorAt();
    }
    for (uint64_t i = 0; i != 32; i += 8)
    {
      uint64_t v6 = *(void **)((char *)&values + i);
      if (v6) {
        CFRelease(v6);
      }
    }
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, @"OnlyTheseFrames", v4);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, @"ReducedFrameDelivery", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, @"SuggestedQualityOfServiceTiers", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, @"PowerLogSessionID", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct, @"TemporalLevelLimit", v2);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v7 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct = (uint64_t)v7;
    if (!v7) {
      goto LABEL_18;
    }
    CFDictionarySetValue(v7, @"PixelBufferPool", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"OutputPoolRequestedMinimumBufferCount", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"PixelBufferPoolIsShared", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"MaxAgeForOutputPixelBufferPool", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"PixelTransferProperties", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"PoolPixelBufferAttributesSeed", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"PoolPixelBufferAttributes", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"ClientPID", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"ThrottleForBackground", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"RealTime", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"ColorPrimaries", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"TransferFunction", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"YCbCrMatrix", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"ICCProfile", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"MaximizePowerEfficiency", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"GeneratePerFrameHDRDisplayMetadata", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"NumberOfFramesInDecoder", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"MinFrameIDOfFramesInDecoder", v2);
    CFDictionarySetValue((CFMutableDictionaryRef)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct, @"MaxFrameIDOfFramesInDecoder", v2);
    values = 0;
    CFDictionaryRef FrameTypesArrayElement = 0;
    if (sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct)
    {
      values = (void *)sVTDecompressionSessionPropertiesHandledByVideoToolboxDuct;
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct) {
      *(&values + v8) = (void *)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct;
    }
    if (FigCFCreateCombinedDictionary()) {
LABEL_18:
    }
      FigSignalErrorAt();
    CFRelease(v2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t VTDecompressionSessionCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef v12 = 0;
  CFTypeRef cf = 0;
  v14[0] = 0;
  v14[1] = 0;
  *a2 = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else if (*(void *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    return VTDecompressionSessionRemoteBridge_CopySupportedPropertyDictionary(v3);
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v6 + 24);
    if (!v7 || ((uint64_t v8 = v7(v4, &cf), v8 != -12782) ? (v9 = v8 == 0) : (v9 = 1), v9))
    {
      uint64_t v11 = vtDecompressionSessionCopyPropertiesHandledByVideoToolbox(&v12);
      if (!v11)
      {
        if (cf)
        {
          v14[0] = cf;
          uint64_t v10 = 1;
        }
        else
        {
          uint64_t v10 = 0;
        }
        if (v12) {
          v14[v10] = v12;
        }
        uint64_t v11 = FigCFCreateCombinedDictionary();
      }
    }
    else
    {
      uint64_t v11 = v8;
      FigSignalErrorAt();
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v12) {
      CFRelease(v12);
    }
    return v11;
  }
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  FigKTraceInit();
  if (!pixelTransferSessionOut) {
    return -12902;
  }
  MEMORY[0x199705810](&VTPixelTransferSessionGetTypeID_sRegisterVTPixelTransferSessionOnce, RegisterVTPixelTransferSession);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return -12904;
  }
  uint64_t v5 = Instance;
  *(void *)(Instance + 32) = 0;
  uint64_t v6 = (uint64_t *)(Instance + 32);
  if (initDefaultsCommon_onceToken != -1) {
    dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
  }
  if (sAllowPixelTransferChain)
  {
    OSStatus v7 = VTPixelTransferChainCreate((uint64_t)allocator, v6);
    if (initDefaultsCommon_onceToken != -1) {
      dispatch_once_f(&initDefaultsCommon_onceToken, 0, (dispatch_function_t)vtAllowTransferCapabilityCommonOnce);
    }
  }
  else
  {
    OSStatus v7 = 0;
  }
  *(unsigned char *)(v5 + 40) = sAllowPixelTransferGraph;
  *(unsigned char *)(v5 + 41) = sAllowPixelTransferFallbacks;
  int64x2_t v8 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(v5 + 72) = v8;
  *(int64x2_t *)(v5 + 120) = v8;
  *(unsigned char *)(v5 + 769) = 1;
  *(unsigned char *)(v5 + 787) = 0;
  *(_WORD *)(v5 + 785) = 256;
  *(unsigned char *)(v5 + 788) = sAllowSoftwareTransferSession;
  uint64_t v9 = *MEMORY[0x1E4F1CF80];
  *(void *)(v5 + 1176) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(_OWORD *)(v5 + 1224) = 0u;
  if (!VTAvoidHardwarePixelTransfer()) {
    OSStatus v7 = VTMetalTransferSessionCreate(v9, 0, v5 + 1160);
  }
  *pixelTransferSessionOut = (VTPixelTransferSessionRef)v5;
  return v7;
}

void RegisterVTPixelTransferSession()
{
  CFAllocatorRef v0 = (const void *)_CFRuntimeRegisterClass();
  sVTPixelTransferSessionID = (uint64_t)v0;
  sVTPixelTransferSessionPropertyCallbacks = 0;
  unk_1EB3B89E0 = VTPixelTransferSessionCopySupportedPropertyDictionary;
  qword_1EB3B89E8 = (uint64_t)VTPixelTransferSessionSetProperty;
  qword_1EB3B89F0 = (uint64_t)VTPixelTransferSessionCopyProperty;
  qword_1EB3B89F8 = (uint64_t)VTPixelTransferSessionSetProperties;
  qword_1EB3B8A00 = (uint64_t)VTPixelTransferSessionCopySerializableProperties;

  VTSessionRegisterCallbacksForTypeID(&sVTPixelTransferSessionPropertyCallbacks, v0);
}

void vtPixelTransferSessionInit(uint64_t a1)
{
}

OSStatus VTDecompressionSessionDecodeFrame(VTDecompressionSessionRef session, CMSampleBufferRef sampleBuffer, VTDecodeFrameFlags decodeFlags, void *sourceFrameRefCon, VTDecodeInfoFlags *infoFlagsOut)
{
  return VTDecompressionSessionDecodeFrameWithOptions((uint64_t)session, sampleBuffer, *(uint64_t *)&decodeFlags, 0, (uint64_t)sourceFrameRefCon, (int *)infoFlagsOut);
}

uint64_t vtDecompressionDuctDecodeSingleFrame(uint64_t a1, CMSampleBufferRef sbuf, uint64_t a3, uint64_t a4, uint64_t a5, CMTimeEpoch a6, CMTimeValue a7, uint64_t a8)
{
  uint64_t v15 = *(void *)(*(void *)a1 + 40);
  CFArrayRef SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (!SampleAttachmentsArray) {
    goto LABEL_5;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
  CFDictionaryRef v18 = ValueAtIndex;
  if (!ValueAtIndex) {
    goto LABEL_6;
  }
  CFTypeID v19 = CFGetTypeID(ValueAtIndex);
  if (v19 == CFDictionaryGetTypeID()) {
    CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(v18, (const void *)*MEMORY[0x1E4F1F1C8]);
  }
  else {
LABEL_5:
  }
    CFDictionaryRef v18 = 0;
LABEL_6:
  uint64_t v52 = 0;
  if ((a3 & 2) == 0) {
    ++*(_DWORD *)(a1 + 184);
  }
  FigCFDictionaryGetInt64IfPresent();
  MEMORY[0x1997056B0](*(void *)(a1 + 72));
  CMSampleBufferGetOutputPresentationTimeStamp(&v51, sbuf);
  CMSampleBufferGetOutputDuration(&v50, sbuf);
  uint64_t v56 = 0;
  if (FigAtomicIncrement32() == 1) {
    FigSemaphoreWaitRelative();
  }
  BOOL v20 = *(__CFDictionary **)(a1 + 48);
  if (v20) {
    goto LABEL_12;
  }
  valueCallBacks.version = 0;
  valueCallBacks.retain = (CFDictionaryRetainCallBack)vtCloneDuctFrameTrackingInfo;
  valueCallBacks.copyDescription = 0;
  valueCallBacks.equal = 0;
  valueCallBacks.release = (CFDictionaryReleaseCallBack)vtFreeDuctFrameTrackingInfo;
  CFAllocatorRef v21 = CFGetAllocator(*(CFTypeRef *)a1);
  BOOL v20 = CFDictionaryCreateMutable(v21, 0, 0, &valueCallBacks);
  *(void *)(a1 + 48) = v20;
  if (v20)
  {
LABEL_12:
    CFStringRef v22 = *(char **)(a1 + 56);
    *(void *)(a1 + 56) = v22 + 1;
    value[1] = v51;
    value[2] = v50;
    CFDictionaryRef v55 = v18;
    LOBYTE(v56) = 0;
    value[0].value = a7;
    *(void *)&value[0].timescale = a5;
    value[0].epoch = a6;
    CFDictionaryAddValue(v20, v22, value);
    uint64_t v23 = 0;
  }
  else
  {
    CFStringRef v22 = 0;
    uint64_t v23 = 4294954392;
  }
  MEMORY[0x1997056C0](*(void *)(a1 + 72));
  if (*(unsigned char *)(a1 + 104))
  {
    int v63 = 0;
    CFArrayRef v24 = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
    if (!v24 || (CFDictionaryRef v25 = (const __CFDictionary *)CFArrayGetValueAtIndex(v24, 0)) == 0)
    {
      *(unsigned char *)(a1 + 136) = 0;
      *(_DWORD *)(a1 + 140) = 0x7FFFFFFF;
      CMSampleBufferGetPresentationTimeStamp(value, sbuf);
      *(CMTime *)(a1 + 148) = value[0];
      goto LABEL_60;
    }
    CFDictionaryRef v26 = v25;
    unsigned __int8 v62 = 1;
    __int16 v61 = 0;
    v60 = 0;
    int v59 = 0;
    __int16 v58 = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    int v27 = HIBYTE(v61);
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetIntIfPresent();
    CFDictionaryGetValueIfPresent(v26, (const void *)*MEMORY[0x1E4F1F1E0], (const void **)&v60);
    if (v60) {
      FigCFDictionaryGetIntIfPresent();
    }
    int v28 = v61;
    if (v27 && !(_BYTE)v61 || (*(unsigned char *)(a1 + 144) = 0, v27))
    {
      int v29 = 0;
    }
    else
    {
      int v29 = 1;
      if (v59 == 21 || v59 == 16)
      {
        LOBYTE(v61) = 1;
        int v29 = 0;
        int v28 = 1;
        if (*(unsigned char *)(a1 + 136)) {
          *(unsigned char *)(a1 + 144) = 1;
        }
      }
    }
    if (v63 > *(_DWORD *)(a1 + 112)) {
      goto LABEL_41;
    }
    int v30 = *(_DWORD *)(a1 + 108);
    switch(v30)
    {
      case 3:
        int v31 = v29;
        break;
      case 2:
        if (v28) {
          int v31 = 1;
        }
        else {
          int v31 = v29;
        }
        break;
      case 1:
        int v31 = v62;
        break;
      default:
        int v31 = 1;
        goto LABEL_40;
    }
    if (!v31) {
      goto LABEL_42;
    }
LABEL_40:
    double v32 = *(double *)(a1 + 120) + *(double *)(a1 + 128);
    *(double *)(a1 + 128) = v32;
    if (v32 >= 1.0)
    {
      double v46 = v32 + -1.0;
      if (v46 >= 1.0) {
        double v46 = 1.0;
      }
      *(double *)(a1 + 128) = v46;
      if (*(unsigned char *)(a1 + 144))
      {
        memset(value, 0, 24);
        CMSampleBufferGetPresentationTimeStamp(value, sbuf);
        *(_OWORD *)&valueCallBacks.version = *(_OWORD *)&value[0].value;
        valueCallBacks.release = (CFDictionaryReleaseCallBack)value[0].epoch;
        CMTime time2 = *(CMTime *)(a1 + 148);
        if (CMTimeCompare((CMTime *)&valueCallBacks, &time2) < 1) {
          int v31 = 0;
        }
      }
      if (v31 && HIBYTE(v58) && v63 <= *(_DWORD *)(a1 + 140)) {
        *(_DWORD *)(a1 + 140) = 0x7FFFFFFF;
      }
      if (v31)
      {
        if ((_BYTE)v58)
        {
          int v47 = *(_DWORD *)(a1 + 140);
          if (v63 == v47 && v47 != 0x7FFFFFFF) {
            *(_DWORD *)(a1 + 140) = v63 + 1;
          }
        }
      }
LABEL_42:
      if (*(unsigned char *)(a1 + 136)) {
        char v33 = v29;
      }
      else {
        char v33 = 1;
      }
      if ((v33 & 1) == 0 && !(_BYTE)v61 && v63 >= *(_DWORD *)(a1 + 140)) {
        int v31 = 0;
      }
      if ((_BYTE)v61) {
        int v34 = 1;
      }
      else {
        int v34 = v29;
      }
      if (v34 == 1)
      {
        *(unsigned char *)(a1 + 136) = 0;
        *(_DWORD *)(a1 + 140) = 0x7FFFFFFF;
        CMSampleBufferGetPresentationTimeStamp(value, sbuf);
        *(CMTime *)(a1 + 148) = value[0];
      }
      else if (!v31 && v62)
      {
        *(unsigned char *)(a1 + 136) = 1;
        int v35 = *(_DWORD *)(a1 + 140);
        if (v35 >= v63) {
          int v35 = v63;
        }
        *(_DWORD *)(a1 + 140) = v35;
        goto LABEL_87;
      }
      if (v31) {
        goto LABEL_60;
      }
LABEL_87:
      vtDecompressionDuctEmitDecodedFrame((uint64_t *)a1, v22, v23, 2, 0, 0);
      return v23;
    }
LABEL_41:
    int v31 = 0;
    goto LABEL_42;
  }
LABEL_60:
  if (v15)
  {
    MEMORY[0x1997056B0](*(void *)(v15 + 104));
    if (vtDecompressionSubDuctTrackFrameEnteringCodec(v15, v22, a3, v52)) {
      FigSignalErrorAt();
    }
    MEMORY[0x1997056C0](*(void *)(v15 + 104));
  }
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v49, sbuf);
    value[0] = v49;
    CMTimeGetSeconds(value);
    kdebug_trace();
  }
  if (!a4
    || ((v36 = *(void *)(a1 + 8), (long long v37 = *(void **)(CMBaseObjectGetVTable() + 16)) == 0)
      ? (long long v38 = 0)
      : (long long v38 = v37),
        *v38 < 4uLL
     || (uint64_t v39 = (uint64_t (*)(uint64_t, char *, CMSampleBufferRef, uint64_t, uint64_t, uint64_t))v38[11]) == 0
     || (uint64_t v23 = v39(v36, v22, sbuf, a3, a4, a8), v23 == -12782)))
  {
    uint64_t v40 = *(void *)(a1 + 8);
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v41) {
      uint64_t v42 = v41;
    }
    else {
      uint64_t v42 = 0;
    }
    __int16 v43 = *(uint64_t (**)(uint64_t, char *, CMSampleBufferRef, uint64_t, uint64_t))(v42 + 16);
    if (!v43) {
      goto LABEL_82;
    }
    uint64_t v23 = v43(v40, v22, sbuf, a3, a8);
  }
  if (v23 != -17690)
  {
    if (!v23)
    {
      if ((a3 & 9) != 0) {
        return 0;
      }
LABEL_83:
      CFDictionaryRef v44 = *(const __CFDictionary **)(a1 + 48);
      if (v44) {
        CFDictionaryGetValue(v44, v22);
      }
      return 0;
    }
LABEL_82:
    FigSignalErrorAt();
    goto LABEL_83;
  }
  return v23;
}

_OWORD *vtCloneDuctFrameTrackingInfo(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v3 = CFAllocatorAllocate(a1, 88, 0);
  long long v4 = *(_OWORD *)(a2 + 16);
  *uint64_t v3 = *(_OWORD *)a2;
  v3[1] = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  *((void *)v3 + 10) = *(void *)(a2 + 80);
  v3[3] = v6;
  v3[4] = v7;
  v3[2] = v5;
  CFTypeRef v8 = *(CFTypeRef *)(a2 + 72);
  if (v8) {
    CFTypeRef v8 = CFRetain(v8);
  }
  *((void *)v3 + 9) = v8;
  *((void *)v3 + 1) = _Block_copy(*(const void **)(a2 + 8));
  *((void *)v3 + 2) = _Block_copy(*(const void **)(a2 + 16));
  return v3;
}

uint64_t vtDecompressionSubDuctTrackFrameEnteringCodec(uint64_t a1, void *key, int a3, uint64_t a4)
{
  value[0] = 0;
  CFTypeRef v8 = *(__CFDictionary **)(a1 + 112);
  if (!v8)
  {
    v11.version = 0;
    v11.retain = (CFDictionaryRetainCallBack)vtCloneSubDuctFrameTrackingInfo;
    v11.copyDescription = 0;
    v11.equal = 0;
    v11.release = (CFDictionaryReleaseCallBack)vtFreeSubDuctFrameTrackingInfo;
    CFAllocatorRef v9 = CFGetAllocator(*(CFTypeRef *)a1);
    CFTypeRef v8 = CFDictionaryCreateMutable(v9, 0, 0, &v11);
    *(void *)(a1 + 112) = v8;
    if (!v8) {
      return 4294954392;
    }
  }
  if (*(unsigned char *)(a1 + 257))
  {
    if (!*(unsigned char *)(a1 + 258))
    {
      FigPowerReduceUtilitySFI();
      CFTypeRef v8 = *(__CFDictionary **)(a1 + 112);
    }
  }
  LODWORD(value[0]) = a3;
  value[1] = *(void *)(a1 + 16);
  value[2] = a4;
  CFDictionaryAddValue(v8, key, value);
  return 0;
}

void *vtCloneSubDuctFrameTrackingInfo(const __CFAllocator *a1, long long *a2)
{
  uint64_t v3 = CFAllocatorAllocate(a1, 24, 0);
  long long v4 = *a2;
  v3[2] = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v3 = v4;
  CFTypeRef v5 = (CFTypeRef)*((void *)a2 + 1);
  if (v5) {
    CFTypeRef v5 = CFRetain(v5);
  }
  v3[1] = v5;
  return v3;
}

uint64_t VTDecoderSessionEmitDecodedFrame(uint64_t *a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5)
{
  return vtDecoderSessionEmitDecodedFrameCommon(a1, a2, a3, a4, a5, 0);
}

void vtCopyAttachments(CFDictionaryRef theDict, __CVBuffer *a2, __CFDictionary *a3, void *key, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = (const __CFString **)&a9;
  if (key)
  {
    do
    {
      CFTypeRef v12 = v17;
      CFDictionaryRef v18 = v17 + 1;
      CFStringRef v13 = *v12;
      CFStringRef Value = CFDictionaryGetValue(theDict, key);
      if (Value)
      {
        uint64_t v15 = Value;
        if (vtCVBufferAttachmentEmpty(a2, v13)) {
          CFDictionarySetValue(a3, v13, v15);
        }
      }
      uint64_t v16 = (void **)v18;
      uint64_t v17 = (const __CFString **)(v18 + 1);
      key = *v16;
    }
    while (*v16);
  }
}

void vtFreeSubDuctFrameTrackingInfo(CFAllocatorRef allocator, void *ptr)
{
  long long v4 = (const void *)ptr[1];
  if (v4)
  {
    CFRelease(v4);
    ptr[1] = 0;
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t vtDecompressionSubDuctEmitTransferredFrame(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5, uint64_t a6)
{
  if (*(void *)a1 && (long long v6 = *(uint64_t **)(*(void *)a1 + 32)) != 0) {
    return vtDecompressionDuctEmitDecodedFrame(v6, a2, a3, a4, a5, a6);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t vtDecompressionDuctEmitDecodedFrame(uint64_t *a1, const void *a2, uint64_t a3, uint64_t a4, __CVBuffer *a5, uint64_t a6)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1997056B0](a1[9]);
  CFDictionaryRef v12 = (const __CFDictionary *)a1[6];
  if (!v12 || (CFStringRef Value = (char *)CFDictionaryGetValue(v12, a2)) == 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return MEMORY[0x1997056C0](a1[9]);
  }
  if (Value[80]) {
    return MEMORY[0x1997056C0](a1[9]);
  }
  Value[80] = 1;
  uint64_t v14 = *(void *)Value;
  long long v37 = *(_OWORD *)(Value + 24);
  uint64_t v38 = *((void *)Value + 5);
  *(_OWORD *)type = *((_OWORD *)Value + 3);
  uint64_t v15 = (const void *)*((void *)Value + 9);
  uint64_t v36 = *((void *)Value + 8);
  uint64_t v16 = *((void *)Value + 1);
  uint64_t v17 = *((void *)Value + 2);
  MEMORY[0x1997056C0](a1[9]);
  if (v15) {
    CVBufferSetAttachment(a5, (CFStringRef)*MEMORY[0x1E4F24B30], v15, kCVAttachmentMode_ShouldPropagate);
  }
  uint64_t v18 = *a1;
  BOOL v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, long long *))(*a1 + 112);
  uint64_t v19 = *(void *)(*a1 + 120);
  if (!v17 && a6 && !v20)
  {
    CFAllocatorRef v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __CVBuffer *, long long *, long long *))(v18 + 96);
    if (!v21)
    {
      if (v16)
      {
        int v30 = *(void (**)(uint64_t, uint64_t, uint64_t, void, long long *, long long *))(v16 + 16);
        long long v41 = *MEMORY[0x1E4F1F9F8];
        uint64_t v42 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        long long v39 = v41;
        uint64_t v40 = v42;
        v30(v16, 4294949597, a4, 0, &v41, &v39);
      }
      goto LABEL_23;
    }
    uint64_t v22 = *(void *)(v18 + 104);
    long long v41 = *MEMORY[0x1E4F1F9F8];
    uint64_t v42 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    long long v39 = v41;
    uint64_t v40 = v42;
    uint64_t v23 = v14;
    uint64_t v24 = 4294949597;
    uint64_t v25 = a4;
    CFDictionaryRef v26 = 0;
LABEL_11:
    v21(v22, v23, v24, v25, v26, &v41, &v39);
LABEL_23:
    if (a5) {
      ++*((_DWORD *)a1 + 47);
    }
    goto LABEL_25;
  }
  if (a5 || !v20)
  {
    if (a5 || !v17)
    {
      CFAllocatorRef v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __CVBuffer *, long long *, long long *))(v18 + 96);
      if (!v21)
      {
        if (v17)
        {
          char v33 = *(void (**)(uint64_t, uint64_t, uint64_t, __CVBuffer *, void, long long *, long long *))(v17 + 16);
          long long v41 = v37;
          uint64_t v42 = v38;
          long long v39 = *(_OWORD *)type;
          uint64_t v40 = v36;
          v33(v17, a3, a4, a5, 0, &v41, &v39);
        }
        else if (v16)
        {
          int v34 = *(void (**)(uint64_t, uint64_t, uint64_t, __CVBuffer *, long long *, long long *))(v16 + 16);
          long long v41 = v37;
          uint64_t v42 = v38;
          long long v39 = *(_OWORD *)type;
          uint64_t v40 = v36;
          v34(v16, a3, a4, a5, &v41, &v39);
        }
        goto LABEL_23;
      }
      uint64_t v22 = *(void *)(v18 + 104);
      long long v41 = v37;
      uint64_t v42 = v38;
      long long v39 = *(_OWORD *)type;
      uint64_t v40 = v36;
      uint64_t v23 = v14;
      uint64_t v24 = a3;
      uint64_t v25 = a4;
      CFDictionaryRef v26 = a5;
      goto LABEL_11;
    }
    int v29 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, long long *, long long *))(v17 + 16);
    long long v41 = v37;
    uint64_t v42 = v38;
    long long v39 = *(_OWORD *)type;
    uint64_t v40 = v36;
    v29(v17, a3, a4, 0, a6, &v41, &v39);
  }
  else
  {
    long long v41 = v37;
    uint64_t v42 = v38;
    long long v39 = *(_OWORD *)type;
    uint64_t v40 = v36;
    v20(v19, v14, a3, a4, a6, &v41, &v39);
  }
LABEL_25:
  MEMORY[0x1997056B0](a1[9]);
  CFDictionaryRef v31 = (const __CFDictionary *)a1[6];
  if (v31 && CFDictionaryGetValue(v31, a2))
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)a1[6], a2);
    if (!FigAtomicDecrement32()) {
      FigSemaphoreSignal();
    }
  }
  else
  {
    double v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = MEMORY[0x1997056C0](a1[9]);
  if (!*((unsigned char *)a1 + 172))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

void vtFreeDuctFrameTrackingInfo(const __CFAllocator *a1, uint64_t a2)
{
  long long v4 = *(const void **)(a2 + 72);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a2 + 72) = 0;
  }
  _Block_release(*(const void **)(a2 + 8));
  _Block_release(*(const void **)(a2 + 16));

  CFAllocatorDeallocate(a1, (void *)a2);
}

CFDictionaryRef vtDecompressionSessionIsPropertySupportedBySubDuct(const void *a1)
{
  MEMORY[0x199705810](&sCreatePropertiesHandledByVideoToolboxOnce_0, vtDecompressionSessionCreatePropertiesHandledByVideoToolbox);
  CFDictionaryRef result = (const __CFDictionary *)sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct;
  if (sVTDecompressionSessionPropertiesHandledByVideoToolboxSubDuct)
  {
    return (const __CFDictionary *)CFDictionaryContainsKey(result, a1);
  }
  return result;
}

void vtDecompressionDuctGetMinOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  a2[2] = *(void *)(v4 + 16);
  MEMORY[0x1997056B0](*(void *)(a1 + 72));
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 48);
  if (v5) {
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)vtDuctFrameTrackingInfoFindMinPTS, a2);
  }

  JUMPOUT(0x1997056C0);
}

void VTDecompressionSessionInvalidate(VTDecompressionSessionRef session)
{
  if (session && !*((unsigned char *)session + 16))
  {
    if (*((void *)session + 3))
    {
      FigStopForwardingMediaServicesProcessDeathNotification();
      VTDecompressionSessionRemoteBridge_Invalidate(*((void *)session + 3));
    }
    else
    {
      uint64_t v2 = *((void *)session + 4);
      if (v2 && *(void *)(v2 + 8))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        uint64_t v3 = *(void *)(*((void *)session + 4) + 8);
        if (v3)
        {
          uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v5 = v4 ? v4 : 0;
          long long v6 = *(void (**)(uint64_t))(v5 + 24);
          if (v6) {
            v6(v3);
          }
        }
        VTDecompressionSessionWaitForAsynchronousFrames(session);
        CFRelease(*(CFTypeRef *)(*((void *)session + 4) + 8));
        *(void *)(*((void *)session + 4) + 8) = 0;
      }
      uint64_t v7 = *((void *)session + 5);
      if (v7)
      {
        vtDecompressionSubDuctFinishAsynchronousTransfers(v7);
        uint64_t v8 = *((void *)session + 5);
        *(void *)uint64_t v8 = 0;
        if (*(_DWORD *)(v8 + 240))
        {
          if (*((void *)session + 4))
          {
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (Mutable)
            {
              CFMutableDictionaryRef v10 = Mutable;
              CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(*((void *)session + 4) + 80));
              FigVideoFormatDescriptionContainsHDR();
              CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(*((void *)session + 4) + 80));
              CFAbsoluteTimeGetCurrent();
              if (*(void *)(*((void *)session + 4) + 176)) {
                FigCFDictionarySetValue();
              }
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              if (*(_DWORD *)(*((void *)session + 4) + 192)) {
                FigCFDictionarySetInt32();
              }
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt32();
              FigPlaybackLogPowerEvent();
              CFRelease(v10);
            }
          }
        }
      }
      CFAllocatorRef v11 = CFGetAllocator(session);
      vtDecompressionDuctFinalize(v11, *((void **)session + 4));
      *((void *)session + 4) = 0;
      CFAllocatorRef v12 = CFGetAllocator(session);
      vtDecompressionSubDuctFinalize(v12, *((void *)session + 5));
      *((void *)session + 5) = 0;
    }
    *((unsigned char *)session + 16) = 1;
  }
}

void vtDecompressionSessionFinalize(OpaqueVTDecompressionSession *a1)
{
  VTDecompressionSessionInvalidate(a1);
  uint64_t v2 = (const void *)*((void *)a1 + 3);
  if (v2)
  {
    CFRelease(v2);
    *((void *)a1 + 3) = 0;
  }
  uint64_t v3 = (const void *)*((void *)a1 + 10);
  if (v3)
  {
    CFRelease(v3);
    *((void *)a1 + 10) = 0;
  }
  uint64_t v4 = (const void *)*((void *)a1 + 11);
  if (v4)
  {
    CFRelease(v4);
    *((void *)a1 + 11) = 0;
  }
  uint64_t v5 = (const void *)*((void *)a1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *((void *)a1 + 16) = 0;
  }
  long long v6 = (const void *)*((void *)a1 + 17);
  if (v6)
  {
    CFRelease(v6);
    *((void *)a1 + 17) = 0;
  }
  if (*((void *)a1 + 9))
  {
    FigSemaphoreDestroy();
    *((void *)a1 + 9) = 0;
  }
  uint64_t v7 = (void *)*((void *)a1 + 19);
  if (v7)
  {
    os_release(v7);
    *((void *)a1 + 19) = 0;
  }
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
  if (session && !*((unsigned char *)session + 16))
  {
    uint64_t v2 = (const void *)*((void *)session + 3);
    if (v2)
    {
      CFRelease(v2);
      *((void *)session + 3) = 0;
    }
    uint64_t v3 = (const void *)*((void *)session + 4);
    if (v3)
    {
      CFRelease(v3);
      *((void *)session + 4) = 0;
    }
    uint64_t v4 = *((void *)session + 94);
    if (v4)
    {
      uint64_t v5 = *(void (**)(void))(v4 + 64);
      if (v5) {
        v5(*((void *)session + 95));
      }
      *((void *)session + 94) = 0;
      *((void *)session + 95) = 0;
    }
    long long v6 = (const void *)*((void *)session + 102);
    if (v6)
    {
      CFRelease(v6);
      *((void *)session + 102) = 0;
    }
    uint64_t v7 = (const void *)*((void *)session + 103);
    if (v7)
    {
      CFRelease(v7);
      *((void *)session + 103) = 0;
    }
    uint64_t v8 = (const void *)*((void *)session + 19);
    if (v8)
    {
      CFRelease(v8);
      *((void *)session + 19) = 0;
    }
    CFAllocatorRef v9 = (const void *)*((void *)session + 20);
    if (v9)
    {
      CFRelease(v9);
      *((void *)session + 20) = 0;
    }
    CFMutableDictionaryRef v10 = (const void *)*((void *)session + 24);
    if (v10)
    {
      CFRelease(v10);
      *((void *)session + 24) = 0;
    }
    CFAllocatorRef v11 = (const void *)*((void *)session + 25);
    if (v11)
    {
      CFRelease(v11);
      *((void *)session + 25) = 0;
    }
    CFAllocatorRef v12 = (const void *)*((void *)session + 6);
    if (v12)
    {
      CFRelease(v12);
      *((void *)session + 6) = 0;
    }
    CFStringRef v13 = (const void *)*((void *)session + 101);
    if (v13)
    {
      CFRelease(v13);
      *((void *)session + 101) = 0;
    }
    uint64_t v14 = (void *)*((void *)session + 91);
    if (v14)
    {
      free(v14);
      *((void *)session + 91) = 0;
    }
    uint64_t v15 = (void *)*((void *)session + 92);
    if (v15)
    {
      free(v15);
      *((void *)session + 92) = 0;
    }
    uint64_t v16 = (__CVBuffer *)*((void *)session + 29);
    if (v16)
    {
      CVPixelBufferRelease(v16);
      *((void *)session + 29) = 0;
    }
    uint64_t v17 = 0;
    uint64_t v18 = (char *)session + 288;
    do
    {
      uint64_t v19 = *(void **)&v18[v17];
      if (v19)
      {
        free(v19);
        *(void *)&v18[v17] = 0;
      }
      v17 += 32;
    }
    while (v17 != 128);
    uint64_t v20 = 0;
    CFAllocatorRef v21 = (char *)session + 416;
    do
    {
      uint64_t v22 = *(void **)&v21[v20];
      if (v22)
      {
        free(v22);
        *(void *)&v21[v20] = 0;
      }
      v20 += 32;
    }
    while (v20 != 128);
    uint64_t v23 = (void *)*((void *)session + 68);
    if (v23)
    {
      free(v23);
      *((void *)session + 68) = 0;
    }
    uint64_t v24 = (void *)*((void *)session + 69);
    if (v24)
    {
      free(v24);
      *((void *)session + 69) = 0;
    }
    uint64_t v25 = (void *)*((void *)session + 70);
    if (v25)
    {
      free(v25);
      *((void *)session + 70) = 0;
    }
    CFDictionaryRef v26 = (const void *)*((void *)session + 122);
    if (v26)
    {
      CFRelease(v26);
      *((void *)session + 122) = 0;
    }
    int v27 = (const void *)*((void *)session + 125);
    if (v27)
    {
      CFRelease(v27);
      *((void *)session + 125) = 0;
    }
    int v28 = (const void *)*((void *)session + 116);
    if (v28)
    {
      CFRelease(v28);
      *((void *)session + 116) = 0;
    }
    int v29 = (const void *)*((void *)session + 117);
    if (v29)
    {
      CFRelease(v29);
      *((void *)session + 117) = 0;
    }
    int v30 = (const void *)*((void *)session + 126);
    if (v30)
    {
      CFRelease(v30);
      *((void *)session + 126) = 0;
    }
    VTPixelTransferSessionInvalidate(*((VTPixelTransferSessionRef *)session + 128));
    VTPixelTransferSessionInvalidate(*((VTPixelTransferSessionRef *)session + 129));
    CFDictionaryRef v31 = (const void *)*((void *)session + 118);
    if (v31)
    {
      CFRelease(v31);
      *((void *)session + 118) = 0;
    }
    double v32 = (const void *)*((void *)session + 128);
    if (v32)
    {
      CFRelease(v32);
      *((void *)session + 128) = 0;
    }
    char v33 = (const void *)*((void *)session + 129);
    if (v33)
    {
      CFRelease(v33);
      *((void *)session + 129) = 0;
    }
    int v34 = (const void *)*((void *)session + 130);
    if (v34)
    {
      CFRelease(v34);
      *((void *)session + 130) = 0;
    }
    int v35 = (const void *)*((void *)session + 131);
    if (v35)
    {
      CFRelease(v35);
      *((void *)session + 131) = 0;
    }
    uint64_t v36 = (const void *)*((void *)session + 132);
    if (v36)
    {
      CFRelease(v36);
      *((void *)session + 132) = 0;
    }
    long long v37 = (const void *)*((void *)session + 133);
    if (v37)
    {
      CFRelease(v37);
      *((void *)session + 133) = 0;
    }
    *((_DWORD *)session + 254) = 0;
    uint64_t v38 = (const void *)*((void *)session + 123);
    if (v38)
    {
      CFRelease(v38);
      *((void *)session + 123) = 0;
    }
    long long v39 = (const void *)*((void *)session + 124);
    if (v39)
    {
      CFRelease(v39);
      *((void *)session + 124) = 0;
    }
    uint64_t v40 = (const void *)*((void *)session + 119);
    if (v40)
    {
      CFRelease(v40);
      *((void *)session + 119) = 0;
    }
    long long v41 = (const void *)*((void *)session + 120);
    if (v41)
    {
      CFRelease(v41);
      *((void *)session + 120) = 0;
    }
    uint64_t v42 = (const void *)*((void *)session + 121);
    if (v42)
    {
      CFRelease(v42);
      *((void *)session + 121) = 0;
    }
    uint64_t v43 = (const void *)*((void *)session + 135);
    if (v43)
    {
      CFRelease(v43);
      *((void *)session + 135) = 0;
    }
    CFDictionaryRef v44 = (const void *)*((void *)session + 136);
    if (v44)
    {
      CFRelease(v44);
      *((void *)session + 136) = 0;
    }
    unint64_t v45 = (const void *)*((void *)session + 134);
    if (v45)
    {
      CFRelease(v45);
      *((void *)session + 134) = 0;
    }
    double v46 = (const void *)*((void *)session + 137);
    if (v46)
    {
      CFRelease(v46);
      *((void *)session + 137) = 0;
    }
    int v47 = (const void *)*((void *)session + 138);
    if (v47)
    {
      CFRelease(v47);
      *((void *)session + 138) = 0;
    }
    CFTypeID v48 = (const void *)*((void *)session + 139);
    if (v48)
    {
      CFRelease(v48);
      *((void *)session + 139) = 0;
    }
    CMTime v49 = (const void *)*((void *)session + 99);
    if (v49)
    {
      CFRelease(v49);
      *((void *)session + 99) = 0;
    }
    CMTime v50 = (const void *)*((void *)session + 100);
    if (v50)
    {
      CFRelease(v50);
      *((void *)session + 100) = 0;
    }
    CMTime v51 = (const void *)*((void *)session + 149);
    if (v51)
    {
      CFRelease(v51);
      *((void *)session + 149) = 0;
    }
    uint64_t v52 = (const void *)*((void *)session + 150);
    if (v52)
    {
      CFRelease(v52);
      *((void *)session + 150) = 0;
    }
    unsigned int v53 = (const void *)*((void *)session + 151);
    if (v53)
    {
      CFRelease(v53);
      *((void *)session + 151) = 0;
    }
    v54 = (const void *)*((void *)session + 152);
    if (v54)
    {
      CFRelease(v54);
      *((void *)session + 152) = 0;
    }
    CFDictionaryRef v55 = (const void *)*((void *)session + 97);
    if (v55)
    {
      CFRelease(v55);
      *((void *)session + 97) = 0;
    }
    uint64_t v56 = (const void *)*((void *)session + 146);
    if (v56)
    {
      CFRelease(v56);
      *((void *)session + 146) = 0;
    }
    long long v57 = (const void *)*((void *)session + 147);
    if (v57)
    {
      CFRelease(v57);
      *((void *)session + 147) = 0;
    }
    __int16 v58 = (void (*)(void))*((void *)session + 90);
    if (v58)
    {
      v58(*((void *)session + 89));
      *(_OWORD *)((char *)session + 712) = 0u;
    }
    *((void *)session + 144) = 0;
    *((unsigned char *)session + 16) = 1;
  }
}

void vtPixelTransferSessionFinalize(OpaqueVTPixelTransferSession *a1)
{
  VTPixelTransferSessionInvalidate(a1);
  uint64_t v2 = (const void *)*((void *)a1 + 145);
  if (v2)
  {
    CFRelease(v2);
    *((void *)a1 + 145) = 0;
  }
}

uint64_t VTSelectAndCreateVideoEncoderInstance(unsigned int a1, uint64_t a2, CFTypeRef cf, void *a4)
{
  return VTSelectAndCreateVideoEncoderInstanceInternal(a1, a2, (int)cf, cf, 0, a4, 0, 0, 0);
}

uint64_t VTLoadVideoEncoders()
{
  return vtLoadVideoEncodersGuts(0);
}

uint64_t VTRegisterVideoEncoder(unsigned int a1, uint64_t a2)
{
  return VTRegisterVideoEncoderWithInfo(a1, 0, a2);
}

uint64_t VTVideoEncoderGetClassID()
{
  return sVTVideoEncoderClassID;
}

uint64_t RegisterVTVideoEncoderType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigCreateIOSurfaceBackedCVPixelBuffer(int a1, int a2, OSType a3, CVPixelBufferRef *a4)
{
  return FigCreateIOSurfaceBackedCVPixelBufferWithAttributes(a1, a2, a3, 0, a4);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  OSStatus v4 = 0;
  if (sourceBuffer && destinationBuffer)
  {
    CVPixelBufferGetWidth(sourceBuffer);
    CVPixelBufferGetWidth(destinationBuffer);
    CVPixelBufferGetHeight(sourceBuffer);
    CVPixelBufferGetHeight(destinationBuffer);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(sourceBuffer);
    printable4CC(PixelFormatType);
    OSType v8 = CVPixelBufferGetPixelFormatType(destinationBuffer);
    printable4CC(v8);
    if (session && FigAtomicIncrement32() != 1)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFMutableDictionaryRef v10 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    OSStatus v4 = _VTPixelTransferSessionTransferImage((uint64_t)session, sourceBuffer, destinationBuffer);
    if (*v10 == 1) {
      kdebug_trace();
    }
  }
  if (session) {
    FigAtomicDecrement32();
  }
  return v4;
}

void FigRegisterIOSurfacePixelTransferCapability()
{
}

uint64_t vtBufferGetCleanRect(int a1, int a2, const void *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9)
{
  if (!a3) {
    goto LABEL_22;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a3)) {
    goto LABEL_22;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24A88]);
  if (!Value) {
    goto LABEL_22;
  }
  CFNumberRef v18 = Value;
  CFTypeID v19 = CFGetTypeID(Value);
  if (v19 != CFNumberGetTypeID()) {
    goto LABEL_22;
  }
  uint64_t v36 = 0;
  uint64_t valuePtr = 0;
  CFNumberGetValue(v18, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24A68]);
  if (!v20) {
    goto LABEL_22;
  }
  CFNumberRef v21 = v20;
  CFTypeID v22 = CFGetTypeID(v20);
  if (v22 != CFNumberGetTypeID()) {
    goto LABEL_22;
  }
  CFNumberGetValue(v21, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24A70]);
  if (v23 && (CFNumberRef v24 = v23, v25 = CFGetTypeID(v23), v25 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(v24, kCFNumberFloatType, (char *)&v36 + 4);
    float v26 = *((float *)&v36 + 1);
  }
  else
  {
    HIDWORD(v36) = 0;
    float v26 = 0.0;
  }
  int v27 = (int)(float)(v26 + (float)((float)(a1 - HIDWORD(valuePtr)) * 0.5));
  CFNumberRef v28 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E4F24A80]);
  if (v28 && (CFNumberRef v29 = v28, v30 = CFGetTypeID(v28), v30 == CFNumberGetTypeID())) {
    CFNumberGetValue(v29, kCFNumberFloatType, &v36);
  }
  else {
    LODWORD(v36) = 0;
  }
  if ((v27 & 0x80000000) == 0
    && (int v31 = HIDWORD(valuePtr), SHIDWORD(valuePtr) >= 1)
    && HIDWORD(valuePtr) + v27 <= a1
    && (int v32 = valuePtr,
        int v33 = (int)(float)(*(float *)&v36 + (float)((float)(a2 - valuePtr) * 0.5)),
        (v33 & 0x80000000) == 0)
    && (int)valuePtr >= 1
    && (int)valuePtr + v33 <= a2)
  {
    uint64_t result = 1;
  }
  else
  {
LABEL_22:
    int v27 = 0;
    int v33 = 0;
    uint64_t result = 0;
    int v32 = a2;
    int v31 = a1;
  }
  *a4 = a1;
  *a5 = a2;
  *a6 = v27;
  *a7 = v33;
  *a8 = v31;
  *a9 = v32;
  return result;
}

uint64_t vtRoundCleanRectToPixelBlockBoundary(uint64_t result, int a2, int a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7)
{
  if ((int)result <= 1983000879)
  {
    if ((int)result <= 875704437)
    {
      if (result == 846624121) {
        goto LABEL_16;
      }
      int v7 = 875704422;
    }
    else
    {
      if (result == 875704438 || result == 1630697081) {
        goto LABEL_16;
      }
      int v7 = 1714696752;
    }
    goto LABEL_15;
  }
  if ((int)result <= 2037741157)
  {
    if (result == 1983000880 || result == 1983000886) {
      goto LABEL_16;
    }
    int v7 = 2033463856;
LABEL_15:
    if (result != v7) {
      return result;
    }
    goto LABEL_16;
  }
  if ((result - 2037741158) > 0xF || ((1 << (result - 102)) & 0xA001) == 0) {
    return result;
  }
LABEL_16:
  if (*a4)
  {
    --*a4;
    uint64_t v8 = *a6 + 1;
    *a6 = v8;
    if ((v8 & 1) == 0) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v8 = *a6;
    if ((*a6 & 1) == 0) {
      goto LABEL_24;
    }
  }
  if (v8 < a2) {
    uint64_t v9 = v8 + 1;
  }
  else {
    uint64_t v9 = a2;
  }
  *a6 = v9;
LABEL_24:
  if ((int)result > 1714696751)
  {
    if (result != 2033463856)
    {
      int v10 = 1714696752;
LABEL_29:
      if (result != v10) {
        return result;
      }
    }
  }
  else if (result != 875704422)
  {
    int v10 = 875704438;
    goto LABEL_29;
  }
  if (*a5)
  {
    --*a5;
    uint64_t v11 = *a7 + 1;
    *a7 = v11;
    if ((v11 & 1) == 0) {
      return result;
    }
  }
  else
  {
    uint64_t v11 = *a7;
    if ((*a7 & 1) == 0) {
      return result;
    }
  }
  if (v11 < a3) {
    uint64_t v12 = v11 + 1;
  }
  else {
    uint64_t v12 = a3;
  }
  *a7 = v12;
  return result;
}

IOSurfaceRef figIOSurfaceAcceleratedPixelTransfer_Validate(__CVBuffer *a1, __CVBuffer *a2)
{
  IOSurfaceRef result = CVPixelBufferGetIOSurface(a1);
  if (result)
  {
    IOSurfaceRef result = CVPixelBufferGetIOSurface(a2);
    if (result)
    {
      if (CVPixelBufferGetWidth(a1) > 0x1000
        || CVPixelBufferGetHeight(a1) > 0x1000
        || CVPixelBufferGetWidth(a2) > 0x1000)
      {
        return 0;
      }
      else
      {
        return (IOSurfaceRef)(CVPixelBufferGetHeight(a2) <= 0x1000);
      }
    }
  }
  return result;
}

uint64_t figIOSurfaceAcceleratedPixelTransfer_Open(uint64_t a1, const __CFDictionary *a2, __CVBuffer *a3, uint64_t a4, __CVBuffer *a5, uint64_t a6, OSType **a7)
{
  uint64_t v11 = (OSType *)malloc_type_calloc(1uLL, 0xF8uLL, 0x10200400C9AEB86uLL);
  if (v11)
  {
    uint64_t v12 = v11;
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v14 = IOSurfaceAcceleratorCreate();
    if (v14)
    {
      uint64_t v15 = v14;
      FigSignalErrorAt();
      free(v12);
      return v15;
    }
    v12[43] = CVPixelBufferGetPixelFormatType(a3);
    v12[44] = CVPixelBufferGetPixelFormatType(a5);
    *((void *)v12 + 23) = getSubSampling(v12[43]);
    *((void *)v12 + 24) = getSubSampling(v12[43]);
    *((void *)v12 + 25) = getSubSampling(v12[44]);
    *((void *)v12 + 26) = getSubSampling(v12[44]);
    if (a2)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a2, @"DestinationYCbCrMatrix");
      CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(a2, @"DestinationColorPrimaries");
      CFStringRef v19 = (const __CFString *)CFDictionaryGetValue(a2, @"DestinationTransferFunction");
      BOOL v20 = Value == 0;
      if (Value) {
        uint64_t IntegerCodePointForString = CVYCbCrMatrixGetIntegerCodePointForString(Value);
      }
      else {
        uint64_t IntegerCodePointForString = 0;
      }
      *((void *)v12 + 27) = IntegerCodePointForString;
      if (v18) {
        uint64_t v23 = CVColorPrimariesGetIntegerCodePointForString(v18);
      }
      else {
        uint64_t v23 = 0;
      }
      *((void *)v12 + 28) = v23;
      if (v19) {
        uint64_t v22 = CVTransferFunctionGetIntegerCodePointForString(v19);
      }
      else {
        uint64_t v22 = 0;
      }
    }
    else
    {
      uint64_t v22 = 0;
      *((void *)v12 + 27) = 0;
      *((void *)v12 + 28) = 0;
      BOOL v20 = 1;
    }
    *((void *)v12 + 29) = v22;
    *((unsigned char *)v12 + 240) = figPixelFormatTypeContainsYCbCr(v12[43]);
    *((unsigned char *)v12 + 241) = figPixelFormatTypeContainsYCbCr(v12[44]);
    CFDictionaryRef v24 = CVPixelFormatDescriptionCreateWithPixelFormatType(v13, v12[44]);
    if (v24)
    {
      CFDictionaryRef v25 = v24;
      float v26 = (const void *)*MEMORY[0x1E4F1CFD0];
      BOOL v27 = v26 == CFDictionaryGetValue(v24, (const void *)*MEMORY[0x1E4F24EA8]);
      CFRelease(v25);
    }
    else
    {
      BOOL v27 = 0;
    }
    *((unsigned char *)v12 + 242) = v27;
    if (v20 && *((unsigned char *)v12 + 241) && *((unsigned char *)v12 + 240))
    {
      CFStringRef v28 = (const __CFString *)CVBufferCopyAttachment(a3, (CFStringRef)*MEMORY[0x1E4F24C18], 0);
      if (v28)
      {
        CFStringRef v29 = v28;
        *((void *)v12 + 27) = CVYCbCrMatrixGetIntegerCodePointForString(v28);
        *a7 = v12;
        CFRelease(v29);
        return 0;
      }
      uint64_t v15 = 0;
      *((void *)v12 + 27) = 0;
    }
    else
    {
      uint64_t v15 = 0;
    }
    *a7 = v12;
    return v15;
  }

  return FigSignalErrorAt();
}

uint64_t figIOSurfaceAcceleratedPixelTransfer_TransferM2(uint64_t a1, const __CFDictionary *a2, CVPixelBufferRef texture, double *a4, void *a5, double *a6)
{
  uint64_t v264 = 0;
  long long v262 = 0u;
  long long v263 = 0u;
  long long v260 = 0u;
  long long v261 = 0u;
  long long v258 = 0u;
  long long v259 = 0u;
  int v257 = 0;
  long long v256 = 0u;
  long long v255 = 0u;
  long long v254 = 0u;
  long long v253 = 0u;
  long long v252 = 0u;
  long long v251 = 0u;
  long long v250 = 0u;
  int v249 = 0;
  long long v248 = 0u;
  long long v247 = 0u;
  long long v246 = 0u;
  long long v245 = 0u;
  long long v244 = 0u;
  long long v243 = 0u;
  long long v242 = 0u;
  int v241 = 0;
  long long v240 = 0u;
  long long v239 = 0u;
  long long v238 = 0u;
  long long v237 = 0u;
  long long v236 = 0u;
  long long v235 = 0u;
  long long v234 = 0u;
  uint64_t v233 = 116;
  uint64_t v11 = CVPixelBufferRetain(texture);
  long long v232 = 0u;
  long long v231 = 0u;
  uint64x2_t v230 = 0u;
  __int16 v229 = 0;
  if (!texture) {
    goto LABEL_273;
  }
  CFTypeID v12 = CFGetTypeID(texture);
  if (v12 != CVPixelBufferGetTypeID()) {
    goto LABEL_273;
  }
  if (!a5) {
    goto LABEL_273;
  }
  CFTypeID v13 = CFGetTypeID(a5);
  if (v13 != CVPixelBufferGetTypeID()
    || (v205 = a6, CVPixelBufferGetPixelFormatType(texture) != *(_DWORD *)(a1 + 172))
    || CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a5) != *(_DWORD *)(a1 + 176)
    || (double v14 = a4[2], v14 < 0.0)
    || a4[3] < 0.0
    || (double v15 = v14 + a4[4], v15 > (double)CVPixelBufferGetWidth(texture))
    || (double v16 = a4[3] + a4[5], v16 > (double)CVPixelBufferGetHeight(texture))
    || (double v17 = a6[2], v17 < 0.0)
    || a6[3] < 0.0
    || (double v18 = v17 + a6[4], v18 > (double)CVPixelBufferGetWidth((CVPixelBufferRef)a5))
    || (double v19 = a6[3] + a6[5], v19 > (double)CVPixelBufferGetHeight((CVPixelBufferRef)a5)))
  {
LABEL_273:
    uint64_t v135 = FigSignalErrorAt();
    CFMutableDictionaryRef Mutable = 0;
    if (v11) {
      goto LABEL_214;
    }
    goto LABEL_215;
  }
  v197 = (float64x2_t *)a4;
  BOOL v20 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFNumberRef v21 = (const void *)*MEMORY[0x1E4F1CFC8];
  scalerCapabilities((uint64_t)&v258);
  CVPixelBufferGetIOSurface(texture);
  IOSurfaceGetBulkAttachments();
  unsigned __int8 v204 = BYTE10(v253);
  uint64_t v207 = BYTE11(v253);
  uint64_t v206 = BYTE12(v253);
  CVPixelBufferGetIOSurface((CVPixelBufferRef)a5);
  IOSurfaceGetBulkAttachments();
  uint64_t v22 = BYTE11(v245);
  uint64_t v23 = BYTE12(v245);
  CFTypeRef v24 = CVBufferCopyAttachment(v11, (CFStringRef)*MEMORY[0x1E4F24B78], 0);
  pixelBuffer = (__CVBuffer *)a5;
  CFTypeRef v190 = v24;
  if (!a2)
  {
    CFStringRef v28 = 0;
    v188 = 0;
    CFDictionaryRef dict = 0;
    int v198 = 0;
    CFStringRef Value = v20;
    uint64_t v27 = a1;
    goto LABEL_34;
  }
  CFDictionaryRef v25 = v21;
  CFStringRef Value = v20;
  uint64_t v27 = a1;
  if (CFDictionaryContainsKey(a2, @"ServiceEnableHighSpeedTransfer")) {
    CFStringRef Value = CFDictionaryGetValue(a2, @"ServiceEnableHighSpeedTransfer");
  }
  if (CFDictionaryContainsKey(a2, @"ServiceDisableDither")) {
    CFDictionaryRef v25 = CFDictionaryGetValue(a2, @"ServiceDisableDither");
  }
  FigCFDictionaryGetBooleanIfPresent();
  if (CFDictionaryContainsKey(a2, @"ServiceHistogramData")) {
    v188 = (__CFData *)CFDictionaryGetValue(a2, @"ServiceHistogramData");
  }
  else {
    v188 = 0;
  }
  BOOL v29 = FigCFDictionaryGetBooleanValue() == (void)v20;
  int v198 = (FigCFDictionaryGetBooleanValue() == (void)v20) | (2 * v29);
  if (CFDictionaryContainsKey(a2, @"Rotation"))
  {
    CFDictionaryGetValue(a2, @"Rotation");
    if (FigCFEqual())
    {
      int v30 = v198 | 4;
    }
    else
    {
      if (!FigCFEqual())
      {
        int v145 = FigCFEqual();
        int v146 = v198;
        if (v145) {
          int v146 = v198 ^ 7;
        }
        int v198 = v146;
        goto LABEL_30;
      }
      int v30 = v198 ^ 3;
    }
    int v198 = v30;
  }
LABEL_30:
  if (CFDictionaryContainsKey(a2, @"ServiceHistogramRectangle")) {
    CFDictionaryRef dict = (const __CFDictionary *)CFDictionaryGetValue(a2, @"ServiceHistogramRectangle");
  }
  else {
    CFDictionaryRef dict = 0;
  }
  CFNumberRef v21 = v25;
  FigCFDictionaryGetBooleanIfPresent();
  CFStringRef v28 = CFDictionaryGetValue(a2, @"ReducedPrecisionFractionalOffsets");
  CFTypeRef v24 = v190;
LABEL_34:
  uint64_t v31 = *(void *)(v27 + 224);
  uint64_t v196 = *(void *)(v27 + 216);
  BYTE10(v245) = v196;
  if (v24
    || !v31
    || v31 == sUnsetColorPrimaryMatrix
    || (uint64_t v34 = *(void *)(v27 + 232)) == 0
    || (uint64_t v33 = sUnsetTransferFunction, v34 == sUnsetTransferFunction))
  {
    if (!v31 || v31 == sUnsetColorPrimaryMatrix)
    {
      BYTE11(v245) = 0;
      uint64_t v31 = BYTE11(v253);
    }
    else
    {
      uint64_t v31 = 0;
    }
    uint64_t v32 = *(void *)(v27 + 232);
    uint64_t v33 = sUnsetTransferFunction;
    if (!v32 || v32 == sUnsetTransferFunction)
    {
      BYTE12(v245) = 0;
      uint64_t v34 = BYTE12(v253);
    }
    else
    {
      uint64_t v34 = 0;
    }
  }
  if (!*(unsigned char *)(v27 + 242) || v31 && v31 != sUnsetColorPrimaryMatrix || v34 && v34 != v33)
  {
    uint64_t v189 = 0;
LABEL_49:
    int v35 = v197;
    goto LABEL_50;
  }
  uint64_t v189 = 0;
  if (v22 && sUnsetColorPrimaryMatrix != v22)
  {
    BYTE11(v237) = v22;
    BYTE11(v245) = 0;
    uint64_t v189 = 64;
  }
  if (!v23) {
    goto LABEL_49;
  }
  int v35 = v197;
  if (v33 != v23)
  {
    v189 |= 0x80uLL;
    BYTE12(v237) = v23;
    BYTE12(v245) = 0;
  }
LABEL_50:
  uint64_t v194 = v34;
  uint64_t v195 = v31;
  uint64_t v36 = (void **)MEMORY[0x1E4F6ED70];
  if (Value != v20)
  {
    if (v21 != v20)
    {
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_62;
    }
LABEL_60:
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    goto LABEL_61;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6EC80], v20);
  if (v21 != v20) {
    goto LABEL_62;
  }
  if (!Mutable) {
    goto LABEL_60;
  }
LABEL_61:
  FigCFDictionarySetInt32();
LABEL_62:
  if (BYTE1(v259))
  {
    if (v28)
    {
      CFTypeID v38 = CFGetTypeID(v28);
      if (v38 == CFBooleanGetTypeID())
      {
        if (!Mutable) {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        CFDictionarySetValue(Mutable, @"ReducedPrecisionFractionalOffsets", v28);
      }
    }
  }
  if (v188 && !Mutable) {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CVPixelBufferGetIOSurface(texture);
  IOSurfaceBindAccel();
  size_t v39 = CVPixelBufferGetWidth(pixelBuffer) & -*(void *)(v27 + 200);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  char v41 = 0;
  key = (void *)*MEMORY[0x1E4F6ED68];
  unint64_t v200 = Height & -*(void *)(v27 + 208);
  unint64_t v201 = v39;
  double v42 = (double)v39;
  v191 = *v36;
  v185 = (void *)*MEMORY[0x1E4F24EE0];
  uint64_t v192 = v27 + 24;
  char v43 = 1;
  while (1)
  {
    CFDictionaryRef v44 = v205;
    if (HIBYTE(v229))
    {
      size_t Width = CVPixelBufferGetWidth(v11);
      size_t v46 = CVPixelBufferGetHeight(v11);
      if (!Width) {
        goto LABEL_205;
      }
    }
    else
    {
      if (v41)
      {
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v11);
        unsigned __int8 SubSampling = getSubSampling(PixelFormatType);
        LOBYTE(PixelFormatType) = getSubSampling(PixelFormatType);
        size_t Width = CVPixelBufferGetWidth(v11) & -(uint64_t)SubSampling;
        size_t v49 = CVPixelBufferGetHeight(v11);
        uint64_t v50 = PixelFormatType;
      }
      else
      {
        size_t Width = CVPixelBufferGetWidth(v11) & -*(void *)(v27 + 184);
        size_t v49 = CVPixelBufferGetHeight(v11);
        uint64_t v50 = *(void *)(v27 + 192);
      }
      size_t v46 = v49 & -v50;
      if (!Width) {
        goto LABEL_205;
      }
    }
    if (!v46 || !v201 || !v200) {
      goto LABEL_205;
    }
    uint64x2_t v230 = 0uLL;
    *(void *)&long long v231 = Width << 16;
    *((void *)&v231 + 1) = v46 << 16;
    if (v43)
    {
      double v51 = v35[1].f64[0];
      if (v51 > 0.0 || v35[2].f64[0] < (double)Width || v35[1].f64[1] > 0.0 || v35[2].f64[1] < (double)v46)
      {
        double v52 = v35[2].f64[0];
        float v53 = v52;
        size_t Width = vcvtas_u32_f32(v53);
        if (HIBYTE(v229))
        {
          double v54 = v35[2].f64[1];
          float v55 = v54;
          size_t v46 = vcvtas_u32_f32(v55);
          uint64x2_t v230 = vcvtq_n_u64_f64(v35[1], 0x10uLL);
          *(void *)&long long v231 = vcvtd_n_u64_f64(v52, 0x10uLL);
          unint64_t v56 = vcvtd_n_u64_f64(v54, 0x10uLL);
        }
        else
        {
          double v58 = v35[2].f64[1];
          uint64_t v60 = *(void *)(v27 + 184);
          uint64_t v59 = *(void *)(v27 + 192);
          isH3Platform();
          isH3Platform();
          int v61 = *(_DWORD *)(v27 + 172);
          uint64_t v62 = *(void *)(v27 + 184);
          float v63 = v35[1].f64[0];
          unint64_t v64 = vcvtas_u32_f32(v63);
          if (isH3Platform() || v61 == 2037741171 || v61 == 2037741158) {
            v64 &= -v62;
          }
          v230.i64[0] = (unint64_t)v64 << 16;
          int v65 = *(_DWORD *)(a1 + 172);
          uint64_t v66 = *(void *)(a1 + 192);
          float v67 = v35[1].f64[1];
          unint64_t v68 = vcvtas_u32_f32(v67);
          if (isH3Platform())
          {
            if (v65 == 2037741171 || v65 == 2037741158) {
              LODWORD(v68) = v68 & 0xFFFFFFFE;
            }
            else {
              v68 &= -v66;
            }
          }
          Width &= -v60;
          float v69 = v58;
          size_t v46 = vcvtas_u32_f32(v69) & -v59;
          v230.i64[1] = (unint64_t)v68 << 16;
          *(void *)&long long v231 = Width << 16;
          unint64_t v56 = v46 << 16;
          double v51 = v35[1].f64[0];
          double v52 = v35[2].f64[0];
          uint64_t v27 = a1;
          CFDictionaryRef v44 = v205;
        }
        *((void *)&v231 + 1) = v56;
        if (v51 + v52 > (double)CVPixelBufferGetWidth(v11)
          || (float64_t v70 = v35[1].f64[1] + v35[2].f64[1], v70 > (double)CVPixelBufferGetHeight(v11)))
        {
LABEL_205:
          uint64_t v135 = FigSignalErrorAt();
          v106 = pixelBuffer;
LABEL_209:
          uint64_t v137 = v189;
          v136 = v190;
          if (!v190) {
            goto LABEL_211;
          }
LABEL_210:
          CFRelease(v136);
          goto LABEL_211;
        }
      }
      BOOL v57 = v198 != 0;
    }
    else
    {
      BOOL v57 = 0;
    }
    v203 = v11;
    if (v57)
    {
      if (!Mutable) {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      FigCFDictionarySetInt32();
    }
    else if (v198 && Mutable)
    {
      CFDictionaryRemoveValue(Mutable, key);
    }
    char v202 = v43;
    float v71 = v44[4];
    uint64_t v72 = -*(void *)(v27 + 200);
    unint64_t v73 = vcvtas_u32_f32(v71) & v72;
    float v74 = v44[5];
    unint64_t v75 = vcvtas_u32_f32(v74) & -*(void *)(v27 + 208);
    BOOL v76 = Width == v73 && v46 == v75;
    theDict = Mutable;
    if (v76)
    {
      *(void *)&long long v232 = 0;
      unint64_t v80 = Width;
      unint64_t v75 = v46;
      int v86 = Width;
      int v87 = v46;
      *((void *)&v232 + 1) = __PAIR64__(v46, Width);
    }
    else
    {
      float v77 = (float)v73 / (float)Width;
      BOOL v78 = v77 > *((float *)&v261 + 2);
      unint64_t v79 = v72 & (unint64_t)(float)(*((float *)&v261 + 2) * (float)Width);
      if (v77 <= *((float *)&v261 + 2)) {
        unint64_t v80 = v73;
      }
      else {
        unint64_t v80 = v79;
      }
      if (v77 < *((float *)&v261 + 3))
      {
        unint64_t v80 = (vcvtps_u32_f32(*((float *)&v261 + 3) * (float)Width) + *(void *)(v27 + 200) - 1) & -*(void *)(v27 + 200);
        BOOL v78 = 1;
      }
      float v81 = (float)v46;
      float v82 = (float)v75 / (float)v46;
      if (v82 > *(float *)&v262)
      {
        unint64_t v75 = -*(void *)(v27 + 208) & (unint64_t)(float)(*(float *)&v262 * v81);
        BOOL v78 = 1;
      }
      if (v82 < *((float *)&v262 + 1))
      {
        uint64_t v83 = *(void *)(v27 + 208);
        unint64_t v84 = vcvtps_u32_f32(*((float *)&v262 + 1) * v81) + v83 - 1;
        uint64_t v85 = -v83;
        unint64_t v75 = v84 & v85;
        *(void *)&long long v232 = 0;
        DWORD2(v232) = v80;
        HIDWORD(v232) = v84 & v85;
LABEL_139:
        int v103 = 1;
        unsigned int v98 = v80;
        unsigned int v100 = v75;
LABEL_141:
        if (v80 < v98) {
          goto LABEL_206;
        }
        int v87 = v100;
        int v86 = v98;
        if (v75 < v100) {
          goto LABEL_206;
        }
        goto LABEL_143;
      }
      *(void *)&long long v232 = 0;
      *((void *)&v232 + 1) = __PAIR64__(v75, v80);
      if (v78) {
        goto LABEL_139;
      }
      int v86 = v80;
      int v87 = v75;
    }
    double v88 = v44[2];
    double v89 = v44[3];
    if (v88 <= 0.0 && v89 >= v42 && v44[5] >= (double)v200)
    {
      int v103 = 0;
      unsigned int v98 = v86;
      unsigned int v100 = v87;
      goto LABEL_141;
    }
    float v90 = v88;
    LODWORD(v232) = -*(_DWORD *)(v27 + 200) & vcvtas_u32_f32(v90);
    int v91 = *(_DWORD *)(v27 + 176);
    uint64_t v92 = *(void *)(v27 + 208);
    if (!isH3Platform() || (LODWORD(v93) = -2, v91 != 2037741158) && v91 != 2037741171) {
      uint64_t v93 = -v92;
    }
    float v94 = v89;
    int v95 = vcvtas_u32_f32(v94);
    double v96 = v205[5];
    float v97 = v205[4];
    unsigned int v98 = vcvtas_u32_f32(v97) & -*(_DWORD *)(v27 + 200);
    DWORD1(v232) = v93 & v95;
    DWORD2(v232) = v98;
    float v99 = v96;
    unsigned int v100 = vcvtas_u32_f32(v99) & -*(_DWORD *)(v27 + 208);
    HIDWORD(v232) = v100;
    unint64_t v101 = v100 + (v93 & v95);
    if (v201 < v232 + v98 || v200 < v101)
    {
LABEL_206:
      uint64_t v135 = FigSignalErrorAt();
      uint64_t v11 = v203;
      v106 = pixelBuffer;
      goto LABEL_219;
    }
    int v103 = 0;
LABEL_143:
    if ((_BYTE)v229)
    {
      *(void *)&long long v215 = 0;
      long long v213 = 0u;
      long long v214 = 0u;
      long long v211 = 0u;
      long long v212 = 0u;
      memset(&rect, 0, sizeof(rect));
      scalerCapabilities((uint64_t)&rect);
      if ((v214 & 1) == 0) {
        goto LABEL_145;
      }
      if (SDWORD1(v214) < (int)v214) {
        goto LABEL_145;
      }
      if ((BYTE4(v214) & 1) == 0) {
        goto LABEL_145;
      }
      v124 = (unsigned int *)malloc_type_calloc(2 * (DWORD2(v214) * (int)v214 + HIDWORD(v214) * DWORD1(v214)), 4uLL, 0x100004052888210uLL);
      if (!v124) {
        goto LABEL_145;
      }
      v125 = v124;
      double v126 = (double)v100 / (double)v46;
      double v127 = (double)v98;
      v128 = &v124[DWORD2(v214) * (int)v214];
      v129 = &v128[DWORD2(v214) * (int)v214];
      __dst = &v129[HIDWORD(v214) * DWORD1(v214)];
      double v130 = v127 / (double)Width;
      _initAsgFilter(SDWORD2(v214), v214, v215, SBYTE4(v215), v124, v126);
      memcpy(v128, v125, 4 * DWORD2(v214) * (int)v214);
      uint64_t v131 = SDWORD1(v214) >= (int)v214 ? v214 : DWORD1(v214);
      int v132 = SDWORD1(v214) >= (int)v214 ? DWORD1(v214) - v214 : DWORD1(v214) - (int)v214 + 1;
      _initAsgFilter(SHIDWORD(v214), v131, v215, SBYTE4(v215), &v129[(v132 >> 1) * HIDWORD(v214)], v130);
      memcpy(__dst, v129, 4 * HIDWORD(v214) * DWORD1(v214));
      int v133 = IOSurfaceAcceleratorSetCustomFilter();
      free(v125);
      if (v133) {
LABEL_145:
      }
        CFDictionaryRemoveValue(theDict, v191);
    }
    if ((v202 & 1) != 0
      && *(unsigned char *)(a1 + 240)
      && *(unsigned char *)(a1 + 241)
      && v204
      && sUnsetYCbCrMatrix != v204
      && v196 != v204
      && v195 == v207
      && v194 == v206)
    {
      OSType v104 = 1111970369;
      int v105 = 1;
      v106 = pixelBuffer;
      goto LABEL_157;
    }
    v106 = pixelBuffer;
    OSType v107 = CVPixelBufferGetPixelFormatType(pixelBuffer);
    if (!v103)
    {
      if (v196 == sUnsetYCbCrMatrix || v196 == 0) {
        unsigned __int8 v140 = v204;
      }
      else {
        unsigned __int8 v140 = v196;
      }
      BOOL v141 = v195 == sUnsetColorPrimaryMatrix || v195 == 0;
      char v142 = v207;
      if (!v141) {
        char v142 = v195;
      }
      BOOL v143 = v194 == sUnsetTransferFunction || v194 == 0;
      BYTE10(v245) = v140;
      BYTE11(v245) = v142;
      char v144 = v206;
      if (!v143) {
        char v144 = v194;
      }
      BYTE12(v245) = v144;
      CVPixelBufferGetIOSurface(pixelBuffer);
      IOSurfaceSetBulkAttachments2();
      uint64_t v11 = v203;
      CFMutableDictionaryRef Mutable = theDict;
      uint64_t v137 = v189;
      if (!v188) {
        goto LABEL_251;
      }
      if (!dict) {
        goto LABEL_250;
      }
      memset(&rect, 0, sizeof(rect));
      if (CGRectMakeWithDictionaryRepresentation(dict, &rect))
      {
        CGRect rect = CGRectStandardize(rect);
        CGRectIntegral(rect);
LABEL_250:
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
LABEL_251:
        CVPixelBufferGetIOSurface(v203);
        CVPixelBufferGetIOSurface(pixelBuffer);
        uint64_t v147 = IOSurfaceAcceleratorTransformSurface();
        if (v147)
        {
          uint64_t v135 = v147;
          int v216 = 0;
          long long v214 = 0u;
          long long v215 = 0u;
          long long v212 = 0u;
          long long v213 = 0u;
          long long v211 = 0u;
          memset(&rect, 0, sizeof(rect));
          CVPixelBufferGetIOSurface(v203);
          IOSurfaceGetBulkAttachments();
          FigSignalErrorAt();
          goto LABEL_345;
        }
        double v148 = v205[4];
        double v149 = v205[5];
        signed int v150 = CVPixelBufferGetPixelFormatType(pixelBuffer);
        PlaneCFIndex Count = CVPixelBufferGetPlaneCount(pixelBuffer);
        if (v150 <= 1952854577)
        {
          if (v150 <= 1936077359)
          {
            if (v150 <= 875704933)
            {
              if (v150 == 875704422) {
                goto LABEL_287;
              }
              int v152 = 875704438;
            }
            else
            {
              if (v150 == 875704934 || v150 == 875704950) {
                goto LABEL_287;
              }
              int v152 = 1932681587;
            }
          }
          else if (v150 > 1937125937)
          {
            if (v150 == 1937125938 || v150 == 1949458803) {
              goto LABEL_287;
            }
            int v152 = 1952854576;
          }
          else
          {
            if (v150 == 1936077360 || v150 == 1936077362) {
              goto LABEL_287;
            }
            int v152 = 1937125936;
          }
        }
        else if (v150 > 2016567607)
        {
          if (v150 > 2016686641)
          {
            if (v150 == 2016686642 || v150 == 2019963442) {
              goto LABEL_287;
            }
            int v152 = 2019963440;
          }
          else
          {
            if (v150 == 2016567608 || v150 == 2016567667) {
              goto LABEL_287;
            }
            int v152 = 2016686640;
          }
        }
        else
        {
          if (v150 <= 1982882103)
          {
            if (v150 != 1952854578 && v150 != 1953903152)
            {
              int v152 = 1953903154;
              goto LABEL_286;
            }
LABEL_287:
            DescriptionWithOSType PixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
            if (DescriptionWithPixelFormatType)
            {
              CFDictionaryRef v154 = (const __CFDictionary *)DescriptionWithPixelFormatType;
              LODWORD(rect.origin.x) = 1;
              LODWORD(v220) = 1;
              int IntIfPresent = FigCFDictionaryGetIntIfPresent();
              v156 = v185;
              if (!(IntIfPresent | FigCFDictionaryGetIntIfPresent())
                && (CFArrayRef v157 = (const __CFArray *)CFDictionaryGetValue(v154, v185)) != 0
                && (CFArrayRef v158 = v157, v159 = CFGetTypeID(v157), v159 == CFArrayGetTypeID())
                && CFArrayGetCount(v158) >= 1)
              {
                CFIndex v160 = 0;
                int v161 = 0;
                do
                {
                  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v158, v160);
                  if (ValueAtIndex)
                  {
                    CFTypeID v163 = CFGetTypeID(ValueAtIndex);
                    if (v163 == CFDictionaryGetTypeID())
                    {
                      LODWORD(texturea) = 0;
                      uint64_t v265 = 0;
                      FigCFDictionaryGetIntIfPresent();
                      FigCFDictionaryGetIntIfPresent();
                      if ((int)texturea > SLODWORD(rect.origin.x)) {
                        LODWORD(rect.origin.x) = texturea;
                      }
                      if (SHIDWORD(v265) > (int)v220) {
                        LODWORD(v220) = HIDWORD(v265);
                      }
                      LODWORD(v265) = 0;
                      FigCFDictionaryGetInt32IfPresent();
                      if ((int)v265 > v161) {
                        int v161 = v265;
                      }
                    }
                  }
                  ++v160;
                }
                while (CFArrayGetCount(v158) > v160);
                v106 = pixelBuffer;
                if (!v161)
                {
                  int x_low = LODWORD(rect.origin.x);
                  int v165 = v220;
                  v156 = v185;
                  goto LABEL_305;
                }
              }
              else
              {
                int x_low = LODWORD(rect.origin.x);
                int v165 = v220;
LABEL_305:
                CFDictionaryGetValue(v154, v156);
                if (PlaneCount)
                {
                  size_t v166 = 0;
                  char v167 = 0;
                  char v168 = 0;
                  do
                  {
                    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(v106, v166);
                    v170 = v106;
                    unint64_t v171 = WidthOfPlane;
                    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v170, v166);
                    if (x_low == 2 && ((v171 > 1) & v171 & (v148 == (double)v171)) != 0) {
                      char v168 = 1;
                    }
                    v106 = pixelBuffer;
                    if (v165 == 2
                      && ((HeightOfPlane > 1) & HeightOfPlane & (v149 == (double)HeightOfPlane)) != 0)
                    {
                      char v167 = 1;
                    }
                    ++v166;
                  }
                  while (PlaneCount != v166);
                }
                else
                {
                  char v168 = 0;
                  char v167 = 0;
                }
                if (v168 | v167)
                {
                  CVPixelBufferLockBaseAddress(v106, 0);
                  if (PlaneCount)
                  {
                    for (size_t i = 0; i != PlaneCount; ++i)
                    {
                      size_t v174 = CVPixelBufferGetWidthOfPlane(pixelBuffer, i);
                      size_t v175 = CVPixelBufferGetHeightOfPlane(pixelBuffer, i);
                      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, i);
                      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, i);
                      if (!BaseAddressOfPlane) {
                        break;
                      }
                      v178 = BaseAddressOfPlane;
                      if (v168 && v174 >= 2)
                      {
                        LODWORD(rect.origin.x) = 0;
                        FigCFArrayGetValueAtIndex();
                        FigCFDictionaryGetIntIfPresent();
                        if (LODWORD(rect.origin.x) == 32)
                        {
                          if (v175)
                          {
                            v181 = &v178[4 * v174 - 4];
                            size_t v182 = v175;
                            do
                            {
                              *(_DWORD *)v181 = *((_DWORD *)v181 - 1);
                              v181 += BytesPerRowOfPlane;
                              --v182;
                            }
                            while (v182);
                          }
                        }
                        else if (LODWORD(rect.origin.x) == 16)
                        {
                          if (v175)
                          {
                            v183 = &v178[2 * v174 - 2];
                            size_t v184 = v175;
                            do
                            {
                              *(_WORD *)v183 = *((_WORD *)v183 - 1);
                              v183 += BytesPerRowOfPlane;
                              --v184;
                            }
                            while (v184);
                          }
                        }
                        else if (LODWORD(rect.origin.x) == 8 && v175)
                        {
                          v179 = &v178[v174 - 1];
                          size_t v180 = v175;
                          do
                          {
                            char *v179 = *(v179 - 1);
                            v179 += BytesPerRowOfPlane;
                            --v180;
                          }
                          while (v180);
                        }
                      }
                      if (v167 && v175 >= 2) {
                        memcpy(&v178[(v175 - 1) * BytesPerRowOfPlane], &v178[(v175 - 2) * BytesPerRowOfPlane], BytesPerRowOfPlane);
                      }
                    }
                  }
                  v106 = pixelBuffer;
                  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
                  uint64_t v11 = v203;
                }
              }
            }
LABEL_341:
            if (!v188)
            {
              uint64_t v135 = 0;
              goto LABEL_209;
            }
            bzero(&rect, 0x620uLL);
            CFDataSetLength(v188, 0);
            uint64_t v137 = v189;
            if (!IOSurfaceAcceleratorGetHistogram())
            {
              CFDataAppendBytes(v188, bytes, 4 * LODWORD(rect.origin.x));
              CFDataAppendBytes(v188, v218, 4 * LODWORD(rect.origin.x));
              CFDataAppendBytes(v188, v219, 4 * LODWORD(rect.origin.x));
            }
            uint64_t v135 = 0;
LABEL_345:
            v136 = v190;
            if (v190) {
              goto LABEL_210;
            }
            goto LABEL_211;
          }
          if (v150 == 1982882104 || v150 == 1983013176) {
            goto LABEL_287;
          }
          int v152 = 2016436536;
        }
LABEL_286:
        if (v150 == v152) {
          goto LABEL_287;
        }
        goto LABEL_341;
      }
      uint64_t v135 = FigSignalErrorAt();
      goto LABEL_345;
    }
    OSType v104 = v107;
    int v105 = 0;
LABEL_157:
    int v216 = 0;
    long long v214 = 0u;
    long long v215 = 0u;
    long long v212 = 0u;
    long long v213 = 0u;
    long long v211 = 0u;
    memset(&rect, 0, sizeof(rect));
    CVPixelBufferGetIOSurface(v106);
    uint64_t ProtectionOptions = IOSurfaceGetProtectionOptions();
    uint64_t v109 = ProtectionOptions;
    uint64_t v110 = *(unsigned int *)(a1 + 168);
    if ((int)v110 < 1)
    {
LABEL_164:
      CVPixelBufferRef texturea = 0;
    }
    else
    {
      uint64_t v111 = v192;
      while (*(void *)(v111 - 8) != (int)v80
           || *(void *)v111 != (int)v75
           || *(_DWORD *)(v111 + 8) != v104
           || *(void *)(v111 + 16) != ProtectionOptions)
      {
        v111 += 40;
        if (!--v110) {
          goto LABEL_164;
        }
      }
      v134 = *(__CVBuffer **)(v111 - 16);
      CVPixelBufferRef texturea = v134;
      if (v134)
      {
        CVPixelBufferRetain(v134);
        uint64_t v11 = v203;
        CFMutableDictionaryRef Mutable = theDict;
        uint64_t v27 = a1;
        int v35 = v197;
        goto LABEL_188;
      }
    }
    uint64_t v112 = FigCreateProtectedIOSurfaceBackedCVPixelBufferWithAttributes(v86, v87, v104, 0, v109, &texturea);
    uint64_t v11 = v203;
    int v35 = v197;
    if (v112) {
      break;
    }
    if (v196) {
      BOOL v113 = v196 == sUnsetYCbCrMatrix;
    }
    else {
      BOOL v113 = 1;
    }
    if (v113) {
      int v114 = 1;
    }
    else {
      int v114 = v105;
    }
    if (v114) {
      unsigned __int8 v115 = v204;
    }
    else {
      unsigned __int8 v115 = v196;
    }
    BOOL v116 = v195 == sUnsetColorPrimaryMatrix || v195 == 0;
    char v117 = v207;
    if (!v116) {
      char v117 = v195;
    }
    BOOL v118 = v194 == sUnsetTransferFunction || v194 == 0;
    BYTE10(v212) = v115;
    BYTE11(v212) = v117;
    char v119 = v206;
    if (!v118) {
      char v119 = v194;
    }
    BYTE12(v212) = v119;
    CVPixelBufferGetIOSurface(texturea);
    IOSurfaceSetBulkAttachments2();
    v120 = texturea;
    CFMutableDictionaryRef Mutable = theDict;
    uint64_t v27 = a1;
    if (texturea)
    {
      int v121 = *(_DWORD *)(a1 + 168);
      if (v121 <= 3)
      {
        uint64_t v122 = a1 + 40 * v121;
        *(void *)(v122 + 8) = CVPixelBufferRetain(texturea);
        *(void *)(v122 + 16) = CVPixelBufferGetWidth(v120);
        *(void *)(v122 + 24) = CVPixelBufferGetHeight(v120);
        *(_DWORD *)(v122 + 32) = CVPixelBufferGetPixelFormatType(v120);
        CVPixelBufferGetIOSurface(v120);
        *(void *)(v122 + 40) = IOSurfaceGetProtectionOptions();
        ++*(_DWORD *)(a1 + 168);
      }
    }
LABEL_188:
    CVPixelBufferGetIOSurface(v11);
    CVPixelBufferGetIOSurface(texturea);
    uint64_t v123 = IOSurfaceAcceleratorTransformSurface();
    if (v123)
    {
      uint64_t v135 = v123;
      int v227 = 0;
      long long v226 = 0u;
      long long v225 = 0u;
      long long v224 = 0u;
      long long v223 = 0u;
      long long v222 = 0u;
      long long v221 = 0u;
      long long v220 = 0u;
      CVPixelBufferGetIOSurface(v11);
      IOSurfaceGetBulkAttachments();
      FigSignalErrorAt();
      if (texturea) {
        CFRelease(texturea);
      }
      goto LABEL_209;
    }
    CVPixelBufferRelease(v11);
    char v43 = 0;
    uint64_t v11 = texturea;
    unsigned __int8 v204 = BYTE10(v212);
    uint64_t v207 = BYTE11(v212);
    char v41 = 1;
    uint64_t v206 = BYTE12(v212);
  }
  uint64_t v135 = v112;
  FigSignalErrorAt();
LABEL_219:
  uint64_t v137 = v189;
  v136 = v190;
  CFMutableDictionaryRef Mutable = theDict;
  if (v190) {
    goto LABEL_210;
  }
LABEL_211:
  if (v137)
  {
    CVPixelBufferGetIOSurface(v106);
    IOSurfaceSetBulkAttachments2();
  }
  if (v11) {
LABEL_214:
  }
    CVPixelBufferRelease(v11);
LABEL_215:
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v135;
}

uint64_t vtPixelTransferSession_EnsurePixelFormatPixelBlockInfoArray(OSType a1, size_t count, void *a3)
{
  if (*a3) {
    return 0;
  }
  int v7 = (char *)malloc_type_calloc(count, 0x70uLL, 0x100004081F0E799uLL);
  uint64_t v8 = v7;
  if (count)
  {
    unint64_t v9 = 0;
    int v10 = v7;
    while (1)
    {
      uint64_t result = VTBlackFillGetPixelFormatPixelBlockInfo(a1, v9, v10, (void *)v10 + 1, (void *)v10 + 2, (void *)v10 + 3, (void *)v10 + 4, v10 + 105, v10 + 40, v10 + 104, v10 + 106, v10 + 110);
      if (result) {
        break;
      }
      ++v9;
      v10 += 112;
      if (count == v9) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t result = 0;
    *a3 = v8;
  }
  return result;
}

void figIOSurfaceAcceleratedPixelTransfer_Close(_DWORD *a1)
{
  if (a1)
  {
    uint64_t v2 = *(const void **)a1;
    if (v2)
    {
      CFRelease(v2);
      *(void *)a1 = 0;
    }
    int v3 = a1[42];
    if (v3 >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = (CVPixelBufferRef *)(a1 + 2);
      do
      {
        if (*v5)
        {
          CVPixelBufferRelease(*v5);
          *uint64_t v5 = 0;
          int v3 = a1[42];
        }
        ++v4;
        v5 += 5;
      }
      while (v4 < v3);
    }
    free(a1);
  }
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  if (session
    && (long long v6 = (const void *)CFGetTypeID(session), CallbacksWithTypeID = VTSessionGetCallbacksWithTypeID(v6), propertyKey)
    && CallbacksWithTypeID)
  {
    uint64_t v8 = (uint64_t (*)(VTSessionRef, CFStringRef, CFTypeRef))CallbacksWithTypeID[2];
    return v8(session, propertyKey, propertyValue);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTPixelTransferSessionSetProperty(uint64_t a1, const __CFString *a2, const void *a3)
{
  if (a1)
  {
    if (FigAtomicIncrement32() != 1)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v8 = _VTPixelTransferSessionSetProperty(a1, a2, a3);
    FigAtomicDecrement32();
    return v8;
  }
  else
  {
    return _VTPixelTransferSessionSetProperty(0, a2, a3);
  }
}

unint64_t *vt_Copy_yuvs_2vuy_arm(unint64_t *result, void *a2, uint64_t a3, uint64_t a4)
{
  if (a3 && a4)
  {
    do
    {
      uint64_t v4 = a3 >> 3;
      if (a3 >> 3)
      {
        do
        {
          unint64_t v6 = *result;
          unint64_t v7 = result[1];
          result += 2;
          *a2 = __rev16(v6);
          a2[1] = __rev16(v7);
          a2 += 2;
          --v4;
        }
        while (v4);
        uint64_t v5 = a3 & 7;
        if ((a3 & 7) == 0) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v5 = a3;
      }
      do
      {
        unsigned int v8 = *(_DWORD *)result;
        uint64_t result = (unint64_t *)((char *)result + 4);
        *(_DWORD *)a2 = __rev16(v8);
        a2 = (void *)((char *)a2 + 4);
        --v5;
      }
      while (v5);
LABEL_8:
      --a4;
    }
    while (a4);
  }
  return result;
}

const char *vt_Copy_yuvs_420v_arm(const char *result, int8x16_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  unint64_t v6 = a2[1];
  unint64_t v7 = *a2;
  int64_t v8 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (v8)
  {
    char v9 = a4;
    unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    if (v10)
    {
      uint64_t v11 = a6[1];
      uint64_t v12 = a5 - 2 * v8;
      int64_t v13 = *a6 - v8;
      uint64_t v14 = v11 - v8;
LABEL_4:
      uint64_t v15 = v8 >> 4;
      if (v8 >> 4)
      {
        do
        {
          int8x16x2_t v32 = vld2q_s8(result);
          result += 32;
          *v7++ = v32.val[0];
          *v6++ = v32.val[1];
          --v15;
        }
        while (v15);
        int64_t v16 = v8 & 0xF;
        if ((v8 & 0xF) == 0) {
          goto LABEL_9;
        }
      }
      else
      {
        int64_t v16 = v8;
      }
      do
      {
        char v18 = *result;
        double v17 = (__int8 *)(result + 1);
        v7->i8[0] = v18;
        double v19 = &v7->i8[1];
        __int8 v20 = *v17++;
        v6->i8[0] = v20;
        CFNumberRef v21 = &v6->i8[1];
        __int8 v22 = *v17++;
        *double v19 = v22;
        unint64_t v7 = (int8x16_t *)(v19 + 1);
        __int8 v23 = *v17;
        uint64_t result = v17 + 1;
        *CFNumberRef v21 = v23;
        unint64_t v6 = (int8x16_t *)(v21 + 1);
        v16 -= 2;
      }
      while (v16);
LABEL_9:
      result += v12;
      unint64_t v7 = (int8x16_t *)((char *)v7 + v13);
      unint64_t v6 = (int8x16_t *)((char *)v6 + v14);
      do
      {
        uint64_t v24 = v8 >> 4;
        if (v8 >> 4)
        {
          do
          {
            unsigned long long v26 = (unsigned __int128)vld2q_s8(result);
            result += 32;
            *v7++ = (int8x16_t)v26;
            --v24;
          }
          while (v24);
          int64_t v25 = v8 & 7;
          if ((v8 & 7) == 0) {
            goto LABEL_15;
          }
        }
        else
        {
          int64_t v25 = v8;
        }
        do
        {
          __int16 v28 = *(_WORD *)result;
          uint64_t v27 = result + 2;
          v7->i8[0] = v28;
          BOOL v29 = &v7->i8[1];
          __int16 v30 = *v27;
          uint64_t result = (const char *)(v27 + 1);
          *BOOL v29 = v30;
          unint64_t v7 = (int8x16_t *)(v29 + 1);
          v25 -= 2;
        }
        while (v25);
LABEL_15:
        result += v12;
        unint64_t v7 = (int8x16_t *)((char *)v7 + v13);
        v10 -= 2;
        if (v10) {
          goto LABEL_4;
        }
        BOOL v31 = (v9 & 1) == 0;
        char v9 = 0;
        unint64_t v10 = 2;
      }
      while (!v31);
    }
  }
  return result;
}

const char *vt_Copy_yuvs_420v_avg_arm(const char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v6 = *(uint8x16_t **)(a2 + 8);
  unint64_t v7 = *(int8x16_t **)a2;
  int64_t v8 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (!v8 || a4 < 2) {
    return result;
  }
  uint64_t v9 = a6[1];
  uint64_t v10 = *a6;
  uint64_t v11 = &result[a5];
  uint64_t v12 = (int8x16_t *)((char *)v7 + v10);
  uint64_t v13 = a5 - 2 * v8;
  uint64_t v14 = v10 - v8;
  uint64_t v15 = v9 - v8;
  do
  {
    uint64_t v16 = v8 >> 4;
    if (!(v8 >> 4))
    {
      int64_t v17 = v8;
      do
      {
LABEL_8:
        char v19 = *result;
        char v18 = (unsigned __int8 *)(result + 1);
        v7->i8[0] = v19;
        __int8 v20 = &v7->i8[1];
        char v22 = *v11;
        CFNumberRef v21 = (unsigned __int8 *)(v11 + 1);
        v12->i8[0] = v22;
        __int8 v23 = &v12->i8[1];
        int v25 = *v18++;
        int v24 = v25;
        int v26 = *v21++;
        v6->i8[0] = (v24 + v26) >> 1;
        uint64_t v27 = &v6->i8[1];
        LOBYTE(v26) = *v18++;
        __int8 *v20 = v26;
        unint64_t v7 = (int8x16_t *)(v20 + 1);
        LOBYTE(v26) = *v21++;
        *__int8 v23 = v26;
        uint64_t v12 = (int8x16_t *)(v23 + 1);
        int v29 = *v18;
        uint64_t result = (const char *)(v18 + 1);
        int v28 = v29;
        int v30 = *v21;
        uint64_t v11 = (const char *)(v21 + 1);
        *uint64_t v27 = (v28 + v30) >> 1;
        unint64_t v6 = (uint8x16_t *)(v27 + 1);
        v17 -= 2;
      }
      while (v17);
      goto LABEL_9;
    }
    do
    {
      int8x16x2_t v42 = vld2q_s8(result);
      result += 32;
      int8x16x2_t v44 = vld2q_s8(v11);
      v11 += 32;
      *v7++ = v42.val[0];
      *v12++ = v44.val[0];
      *v6++ = vhaddq_u8((uint8x16_t)v42.val[1], (uint8x16_t)v44.val[1]);
      --v16;
    }
    while (v16);
    int64_t v17 = v8 & 0xF;
    if ((v8 & 0xF) != 0) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v31 = v11 - result;
    uint64_t result = &v11[v13];
    v11 += v13 + v31;
    int64_t v32 = (char *)v12 - (char *)v7;
    unint64_t v7 = (int8x16_t *)((char *)v12 + v14);
    uint64_t v12 = (int8x16_t *)((char *)v12 + v14 + v32);
    unint64_t v6 = (uint8x16_t *)((char *)v6 + v15);
    a4 -= 2;
    if (!a4) {
      return result;
    }
  }
  while (a4 != 1);
  uint64_t v33 = v8 >> 4;
  if (!(v8 >> 4))
  {
    int64_t v34 = v8;
    goto LABEL_15;
  }
  do
  {
    int8x16x2_t v43 = vld2q_s8(result);
    result += 32;
    *v7++ = v43.val[0];
    *v6++ = (uint8x16_t)v43.val[1];
    --v33;
  }
  while (v33);
  int64_t v34 = v8 & 0xF;
  if ((v8 & 0xF) != 0)
  {
    do
    {
LABEL_15:
      char v36 = *result;
      int v35 = (__int8 *)(result + 1);
      v7->i8[0] = v36;
      long long v37 = &v7->i8[1];
      __int8 v38 = *v35++;
      v6->i8[0] = v38;
      size_t v39 = &v6->i8[1];
      __int8 v40 = *v35++;
      __int8 *v37 = v40;
      unint64_t v7 = (int8x16_t *)(v37 + 1);
      __int8 v41 = *v35;
      uint64_t result = v35 + 1;
      __int8 *v39 = v41;
      unint64_t v6 = (uint8x16_t *)(v39 + 1);
      v34 -= 2;
    }
    while (v34);
  }
  result += v13;
  return result;
}

uint64_t vt_Has_yuvs_420v_arm()
{
  return 1;
}

int8x16_t *vt_Copy_420v_yuvs_arm(int8x16_t **a1, char *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  unint64_t v6 = a1[1];
  uint64_t result = *a1;
  int64_t v8 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (v8)
  {
    unint64_t v9 = a4 & 0xFFFFFFFFFFFFFFFELL;
    if (v9)
    {
      uint64_t v10 = a5[1];
      int64_t v11 = *a5 - v8;
      uint64_t v12 = a6 - 2 * v8;
      while (1)
      {
        uint64_t v13 = v8 >> 4;
        if (!(v8 >> 4)) {
          break;
        }
        do
        {
          v35.val[0] = *result++;
          v35.val[1] = *v6++;
          vst2q_s8(a2, v35);
          a2 += 32;
          --v13;
        }
        while (v13);
        int64_t v14 = v8 & 0xF;
        if ((v8 & 0xF) != 0) {
          goto LABEL_8;
        }
LABEL_9:
        char v22 = (int8x16_t *)((char *)result + v11);
        __int8 v23 = (int8x16_t *)((char *)v6 - v8);
        int v24 = &a2[v12];
        unint64_t v25 = v9 - 1;
        uint64_t v26 = v8 >> 4;
        if (v8 >> 4)
        {
          do
          {
            v36.val[0] = *v22++;
            v36.val[1] = *v23++;
            vst2q_s8(v24, v36);
            v24 += 32;
            --v26;
          }
          while (v26);
          int64_t v27 = v8 & 0xF;
          if ((v8 & 0xF) == 0) {
            goto LABEL_14;
          }
        }
        else
        {
          int64_t v27 = v8;
        }
        do
        {
          char v29 = v22->i8[0];
          int v28 = &v22->i8[1];
          *int v24 = v29;
          int v30 = v24 + 1;
          __int8 v32 = v23->i8[0];
          int64_t v31 = &v23->i8[1];
          *v30++ = v32;
          __int8 v33 = *v28;
          char v22 = (int8x16_t *)(v28 + 1);
          *v30++ = v33;
          __int8 v34 = *v31;
          __int8 v23 = (int8x16_t *)(v31 + 1);
          *int v30 = v34;
          int v24 = v30 + 1;
          v27 -= 2;
        }
        while (v27);
LABEL_14:
        uint64_t result = (int8x16_t *)((char *)v22 + v11);
        unint64_t v6 = (int8x16_t *)((char *)v23 + v10 - v8);
        a2 = &v24[v12];
        unint64_t v9 = v25 - 1;
        if (!v9) {
          return result;
        }
      }
      int64_t v14 = v8;
      do
      {
LABEL_8:
        char v16 = result->i8[0];
        uint64_t v15 = &result->i8[1];
        *a2 = v16;
        int64_t v17 = a2 + 1;
        __int8 v19 = v6->i8[0];
        char v18 = &v6->i8[1];
        *v17++ = v19;
        __int8 v20 = *v15;
        uint64_t result = (int8x16_t *)(v15 + 1);
        *v17++ = v20;
        __int8 v21 = *v18;
        unint64_t v6 = (int8x16_t *)(v18 + 1);
        __int8 *v17 = v21;
        a2 = v17 + 1;
        v14 -= 2;
      }
      while (v14);
      goto LABEL_9;
    }
  }
  return result;
}

__n128 *vt_Copy_420v_yuvs_interp_arm(__n128 **a1, char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, __n128 a7)
{
  unint64_t v7 = (int8x16_t *)a1[1];
  uint64_t result = *a1;
  int64_t v9 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (v9)
  {
    unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    if (v10)
    {
      uint64_t v11 = a5[1];
      uint64_t v12 = *a5;
      uint64_t v13 = (int8x16_t *)((char *)result + v12);
      int64_t v14 = (int8x16_t *)((char *)v7 + v11);
      uint64_t v15 = &a2[a6];
      uint64_t v16 = v11 - v9;
      do
      {
        uint64_t v17 = v9 >> 4;
        if (v9 >> 4)
        {
          do
          {
            a7 = *result++;
            int8x16_t v19 = *v7++;
            int8x16_t v20 = *v14++;
            v34.val[1] = vrhaddq_s8(v19, v20);
            vst2q_s8(a2, *(int8x16x2_t *)a7.n128_u64);
            a2 += 32;
            v34.val[0] = *v13++;
            vst2q_s8(v15, v34);
            v15 += 32;
            --v17;
          }
          while (v17);
          int64_t v18 = v9 & 0xF;
          if ((v9 & 0xF) == 0) {
            goto LABEL_9;
          }
        }
        else
        {
          int64_t v18 = v9;
        }
        do
        {
          char v22 = result->n128_u8[0];
          __int8 v21 = &result->n128_u8[1];
          *a2 = v22;
          __int8 v23 = (unsigned __int8 *)(a2 + 1);
          char v25 = v13->i8[0];
          int v24 = &v13->i8[1];
          *uint64_t v15 = v25;
          uint64_t v26 = v15 + 1;
          a7.n128_u8[0] = v7->i8[0];
          int64_t v27 = &v7->i8[1];
          int8x8_t v28 = (int8x8_t)0x101010101010101;
          v28.i8[0] = v14->i8[0];
          char v29 = &v14->i8[1];
          int8x8_t v30 = vhadd_s8(vqadd_s8((int8x8_t)a7.n128_u64[0], (int8x8_t)0x101010101010101), v28);
          *v23++ = v30.i8[0];
          *v26++ = v30.i8[0];
          unsigned __int8 v31 = *v21;
          uint64_t result = (__n128 *)(v21 + 1);
          *v23++ = v31;
          __int8 v32 = *v24;
          uint64_t v13 = (int8x16_t *)(v24 + 1);
          *v26++ = v32;
          v30.i8[0] = *v27;
          unint64_t v7 = (int8x16_t *)(v27 + 1);
          int8x8_t v33 = (int8x8_t)0x101010101010101;
          v33.i8[0] = *v29;
          int64_t v14 = (int8x16_t *)(v29 + 1);
          a7.n128_u64[0] = (unint64_t)vhadd_s8(vqadd_s8(v30, (int8x8_t)0x101010101010101), v33);
          *__int8 v23 = a7.n128_u8[0];
          a2 = (char *)(v23 + 1);
          *uint64_t v26 = a7.n128_u8[0];
          uint64_t v15 = v26 + 1;
          v18 -= 2;
        }
        while (v18);
LABEL_9:
        uint64_t result = (__n128 *)((char *)result + 2 * v12 - v9);
        uint64_t v13 = (int8x16_t *)((char *)result + v12);
        unint64_t v7 = (int8x16_t *)((char *)v7 + v16);
        int64_t v14 = (int8x16_t *)((char *)v14 + v16);
        a2 = &a2[2 * a6 + -2 * v9];
        uint64_t v15 = &a2[a6];
        v10 -= 2;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t vt_Has_420v_yuvs_arm()
{
  return 1;
}

uint8x16_t *vt_Copy_420v_yuvf_arm(uint8x16_t **a1, int8x16_t *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, double a7, double a8, double a9, uint32x4_t a10, uint32x4_t a11)
{
  uint64_t v11 = a1[1];
  uint64_t result = *a1;
  int64_t v13 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (v13)
  {
    unint64_t v14 = a4 & 0xFFFFFFFFFFFFFFFELL;
    if (v14)
    {
      uint64_t v15 = a5[1];
      int64_t v16 = *a5 - v13;
      uint64_t v17 = a6 - 2 * v13;
      uint64_t v18 = 0;
      uint16x8_t v19 = (uint16x8_t)vdupq_n_s16(0x950Bu);
      uint16x8_t v20 = (uint16x8_t)vdupq_n_s16(0x91B7u);
      uint8x16_t v21 = (uint8x16_t)vdupq_n_s8(0x10u);
      do
      {
        uint64_t v22 = v13 >> 4;
        if (v13 >> 4)
        {
          do
          {
            uint8x16_t v24 = *result++;
            uint8x16_t v25 = *v11++;
            uint8x16_t v26 = vqsubq_u8(v24, v21);
            uint8x16_t v27 = vqsubq_u8(v25, v21);
            uint16x8_t v28 = vmovl_u8(*(uint8x8_t *)v26.i8);
            uint16x8_t v29 = vmovl_high_u8(v26);
            uint16x8_t v30 = vmovl_u8(*(uint8x8_t *)v27.i8);
            uint16x8_t v31 = vmovl_high_u8(v27);
            a10 = (uint32x4_t)vqmovn_high_u16(vqmovn_u16(vqrshrn_high_n_u32(vqrshrn_n_u32(vmull_u16(*(uint16x4_t *)v28.i8, *(uint16x4_t *)v19.i8), 0xFuLL), vmull_high_u16(v28, v19), 0xFuLL)), vqrshrn_high_n_u32(vqrshrn_n_u32(vmull_u16(*(uint16x4_t *)v29.i8, *(uint16x4_t *)v19.i8), 0xFuLL), vmull_high_u16(v29, v19), 0xFuLL));
            a11 = (uint32x4_t)vqmovn_high_u16(vqmovn_u16(vqrshrn_high_n_u32(vqrshrn_n_u32(vmull_u16(*(uint16x4_t *)v30.i8, *(uint16x4_t *)v20.i8), 0xFuLL), vmull_high_u16(v30, v20), 0xFuLL)), vqrshrn_high_n_u32(vqrshrn_n_u32(vmull_u16(*(uint16x4_t *)v31.i8, *(uint16x4_t *)v20.i8), 0xFuLL), vmull_high_u16(v31, v20), 0xFuLL));
            *a2 = vzip1q_s8((int8x16_t)a10, (int8x16_t)a11);
            a2[1] = vzip2q_s8((int8x16_t)a10, (int8x16_t)a11);
            a2 += 2;
            --v22;
          }
          while (v22);
          int64_t v23 = v13 & 0xF;
          if ((v13 & 0xF) == 0) {
            goto LABEL_9;
          }
        }
        else
        {
          int64_t v23 = v13;
        }
        do
        {
          a10.i16[0] = result->i16[0];
          uint64_t result = (uint8x16_t *)((char *)result + 2);
          a11.i16[0] = v11->i16[0];
          uint64_t v11 = (uint8x16_t *)((char *)v11 + 2);
          a10 = vmull_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(vqsub_u8(*(uint8x8_t *)a10.i8, *(uint8x8_t *)v21.i8)), *(uint16x4_t *)v19.i8);
          a11 = vmull_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(vqsub_u8(*(uint8x8_t *)a11.i8, *(uint8x8_t *)v21.i8)), *(uint16x4_t *)v20.i8);
          *(uint16x4_t *)a10.i8 = vqrshrn_n_u32(a10, 0xFuLL);
          *(uint16x4_t *)a11.i8 = vqrshrn_n_u32(a11, 0xFuLL);
          *(uint8x8_t *)a10.i8 = vqmovn_u16((uint16x8_t)a10);
          *(uint8x8_t *)a11.i8 = vqmovn_u16((uint16x8_t)a11);
          a2->i8[0] = a10.i8[0];
          a2->i8[1] = a11.i8[0];
          __int8 v32 = &a2->i8[2];
          *__int8 v32 = a10.i8[1];
          v32[1] = a11.i8[1];
          a2 = (int8x16_t *)(v32 + 2);
          v23 -= 2;
        }
        while (v23);
LABEL_9:
        uint64_t result = (uint8x16_t *)((char *)result + v16);
        v18 ^= v15;
        uint64_t v11 = (uint8x16_t *)((char *)v11 + v15 - v13 - v18);
        a2 = (int8x16_t *)((char *)a2 + v17);
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Has_420v_yuvf_arm()
{
  return 1;
}

_DWORD *vt_Copy_420v_y420_Chroma_arm(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a5 + 8);
  uint64_t v7 = *(void *)(a6 + 16);
  uint64_t v8 = *(void *)(a6 + 8);
  int64_t v9 = a3 & 0xFFFFFFFFFFFFFFFELL;
  if (v9)
  {
    int64_t v10 = a4 & 0xFFFFFFFFFFFFFFFELL;
    if (v10)
    {
      uint64_t result = (_DWORD *)*((void *)result + 1);
      uint64_t v11 = *(int8x8_t **)(a2 + 16);
      uint64_t v12 = *(int8x8_t **)(a2 + 8);
      uint64_t v13 = v6 - v9;
      uint64_t v14 = v8 - (v9 >> 1);
      uint64_t v15 = v7 - (v9 >> 1);
      for (uint64_t i = v10 >> 1; i; --i)
      {
        uint64_t v17 = v9 >> 4;
        if (v9 >> 4)
        {
          do
          {
            int8x8x2_t v25 = vld2_s8((const char *)result);
            result += 4;
            *v12++ = v25.val[0];
            *v11++ = v25.val[1];
            --v17;
          }
          while (v17);
          int64_t v18 = v9 & 0xF;
          if ((v9 & 0xF) == 0) {
            goto LABEL_13;
          }
          if ((v9 & 0xFu) >= 8uLL)
          {
            uint64_t v19 = 1;
            do
            {
              unsigned int v22 = *result;
              uint16x8_t v20 = result + 1;
              unsigned int v21 = v22;
              unsigned int v23 = *v20;
              uint64_t result = v20 + 1;
              v12->i32[0] = v21 | (BYTE2(v21) << 8) | (v23 << 16) | (BYTE2(v23) << 24);
              uint64_t v12 = (int8x8_t *)((char *)v12 + 4);
              v11->i32[0] = BYTE1(v21) | (HIBYTE(v21) << 8) | (BYTE1(v23) << 16) | (HIBYTE(v23) << 24);
              uint64_t v11 = (int8x8_t *)((char *)v11 + 4);
              --v19;
            }
            while (v19);
            int64_t v18 = v9 & 7;
            if ((v9 & 7) == 0) {
              goto LABEL_13;
            }
          }
        }
        else
        {
          int64_t v18 = v9;
        }
        do
        {
          __int16 v24 = *(_WORD *)result;
          uint64_t result = (_DWORD *)((char *)result + 2);
          v12->i8[0] = v24;
          uint64_t v12 = (int8x8_t *)((char *)v12 + 1);
          v11->i8[0] = HIBYTE(v24);
          uint64_t v11 = (int8x8_t *)((char *)v11 + 1);
          v18 -= 2;
        }
        while (v18);
LABEL_13:
        uint64_t result = (_DWORD *)((char *)result + v13);
        uint64_t v12 = (int8x8_t *)((char *)v12 + v14);
        uint64_t v11 = (int8x8_t *)((char *)v11 + v15);
      }
    }
  }
  return result;
}

uint64_t vt_Has_420v_y420_arm()
{
  return 1;
}

void *vt_Copy_420f_420v_arm(void *result, int8x16_t **a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint16x4_t a7)
{
  if (a4)
  {
    uint64_t v7 = a4;
    uint64_t v8 = (_OWORD *)*result;
    uint64_t v9 = *a5 - a3;
    int64_t v10 = *a2;
    uint64_t v11 = *a6 - a3;
    a7.i32[0] = 56284;
    int16x8_t v12 = vdupq_n_s16(0x1000u);
    do
    {
      for (uint64_t i = a3 >> 5; i; --i)
      {
        uint8x16_t v14 = *(uint8x16_t *)v8;
        uint8x16_t v15 = *((uint8x16_t *)v8 + 1);
        v8 += 2;
        uint16x8_t v16 = vmovl_u8(*(uint8x8_t *)v14.i8);
        uint16x8_t v17 = vmovl_high_u8(v14);
        uint16x8_t v18 = vmovl_u8(*(uint8x8_t *)v15.i8);
        uint16x8_t v19 = vmovl_high_u8(v15);
        *int64_t v10 = vaddhn_high_s16(vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v16.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v16, a7, 0), 8uLL), v12), vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v17.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v17, a7, 0), 8uLL), v12);
        v10[1] = vaddhn_high_s16(vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v18.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v18, a7, 0), 8uLL), v12), vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v19.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v19, a7, 0), 8uLL), v12);
        v10 += 2;
      }
      uint64_t v20 = a3 & 0x1F;
      if ((a3 & 0x1F) != 0)
      {
        do
        {
          int32x2_t v21 = (int32x2_t)*(unsigned __int8 *)v8;
          uint64_t v8 = (_OWORD *)((char *)v8 + 1);
          v10->i8[0] = vaddhn_s16((int16x8_t)*(unint64_t *)&vshrn_n_s64((int64x2_t)*(unint64_t *)&vmul_s32(v21, (int32x2_t)a7), 8uLL), v12).u8[0];
          int64_t v10 = (int8x16_t *)((char *)v10 + 1);
          --v20;
        }
        while (v20);
      }
      uint64_t v8 = (_OWORD *)((char *)v8 + v9);
      int64_t v10 = (int8x16_t *)((char *)v10 + v11);
      --v7;
    }
    while (v7);
    uint64_t v22 = a3 >> 1;
    unsigned int v23 = (uint8x16_t *)result[1];
    uint64_t v24 = a5[1] - 2 * v22;
    int8x8x2_t v25 = a2[1];
    uint64_t v26 = a6[1] - 2 * v22;
    a7.i32[0] = 57569;
    for (uint64_t j = a4 >> 1; j; --j)
    {
      for (uint64_t k = v22 >> 4; k; --k)
      {
        uint8x16_t v29 = *v23;
        uint8x16_t v30 = v23[1];
        v23 += 2;
        uint16x8_t v31 = vmovl_u8(*(uint8x8_t *)v29.i8);
        uint16x8_t v32 = vmovl_high_u8(v29);
        uint16x8_t v33 = vmovl_u8(*(uint8x8_t *)v30.i8);
        uint16x8_t v34 = vmovl_high_u8(v30);
        *int8x8x2_t v25 = vaddhn_high_s16(vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v31.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v31, a7, 0), 8uLL), v12), vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v32.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v32, a7, 0), 8uLL), v12);
        v25[1] = vaddhn_high_s16(vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v33.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v33, a7, 0), 8uLL), v12), vshrn_high_n_s32(vshrn_n_s32((int32x4_t)vmull_lane_u16(*(uint16x4_t *)v34.i8, a7, 0), 8uLL), (int32x4_t)vmull_high_lane_u16(v34, a7, 0), 8uLL), v12);
        v25 += 2;
      }
      uint64_t v35 = v22 & 0xF;
      if ((v22 & 0xF) != 0)
      {
        do
        {
          int32x2_t v36 = (int32x2_t)v23->u8[0];
          int32x2_t v37 = (int32x2_t)v23->u8[1];
          unsigned int v23 = (uint8x16_t *)((char *)v23 + 2);
          v25->i8[0] = vaddq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)(unint64_t)vmul_s32(v36, *(int32x2_t *)&a7), 8uLL), *(int32x4_t *)&v12).i8[1];
          v25->i8[1] = vaddq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)(unint64_t)vmul_s32(v37, *(int32x2_t *)&a7), 8uLL), *(int32x4_t *)&v12).i8[1];
          int8x8x2_t v25 = (int8x16_t *)((char *)v25 + 2);
          --v35;
        }
        while (v35);
      }
      unsigned int v23 = (uint8x16_t *)((char *)v23 + v24);
      int8x8x2_t v25 = (int8x16_t *)((char *)v25 + v26);
    }
  }
  return result;
}

uint64_t vt_Has_420f_420v_arm()
{
  return 1;
}

uint64_t vt_Copy_BGRA_yuvs_arm(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4, void *a5, char **a6, uint64_t a7, int32x2_t a8, double a9, int16x8_t a10, double a11, int16x4_t a12)
{
  if (a2)
  {
    uint64_t v12 = *a3 - 4 * a1;
    uint64_t v13 = *a4;
    uint64_t v14 = *a5 - 2 * a1;
    uint8x16_t v15 = *a6;
    uint16x8_t v16 = (__int32 *)(a7 + 4);
    a8.i32[1] = *v16;
    *(int32x2_t *)v17.i8 = vshl_n_s32(a8, 1uLL);
    v17.i32[0] = *--v16;
    v16 += 2;
    v17.i16[4] = *(_WORD *)v16;
    uint16x8_t v16 = (__int32 *)((char *)v16 + 2);
    v17.i16[5] = *(_WORD *)v16;
    uint16x8_t v16 = (__int32 *)((char *)v16 + 2);
    v17.i16[6] = *(_WORD *)v16;
    uint16x8_t v16 = (__int32 *)((char *)v16 + 2);
    v17.i16[7] = *(_WORD *)v16;
    uint16x8_t v16 = (__int32 *)((char *)v16 + 2);
    v18.i16[0] = *(_WORD *)v16;
    uint16x8_t v16 = (__int32 *)((char *)v16 + 2);
    v18.i16[1] = *(_WORD *)v16;
    v18.i32[1] = *(__int32 *)((char *)v16 + 2);
    do
    {
      for (uint64_t i = a1 >> 4; i; v15 += 32)
      {
        int8x8x4_t v31 = vld4_s8((const char *)v13);
        uint64_t v20 = (const char *)(v13 + 32);
        int8x8x4_t v32 = vld4_s8(v20);
        uint64_t v13 = (unsigned __int8 *)(v20 + 32);
        a10 = (int16x8_t)vmovl_u8((uint8x8_t)v31.val[0]);
        *(uint16x8_t *)v31.val[1].i8 = vmovl_u8((uint8x8_t)v31.val[1]);
        *(uint16x8_t *)v31.val[2].i8 = vmovl_u8((uint8x8_t)v31.val[2]);
        *(uint16x8_t *)v32.val[0].i8 = vmovl_u8((uint8x8_t)v32.val[0]);
        *(uint16x8_t *)v32.val[1].i8 = vmovl_u8((uint8x8_t)v32.val[1]);
        *(uint16x8_t *)v32.val[2].i8 = vmovl_u8((uint8x8_t)v32.val[2]);
        int8x8_t v21 = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), *(int16x4_t *)a10.i8, v17, 6), (int16x4_t)v31.val[1], v17, 5), (int16x4_t)v31.val[2], v17, 4), 0xFuLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), a10, v17, 6), *(int16x8_t *)v31.val[1].i8, v17, 5), *(int16x8_t *)v31.val[2].i8,
                    v17,
                    4),
                  0xFuLL));
        int8x8_t v22 = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_laneq_s16(vmlal_laneq_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), (int16x4_t)v32.val[0], v17, 6), (int16x4_t)v32.val[1], v17, 5), (int16x4_t)v32.val[2], v17, 4), 0xFuLL), vmlal_high_laneq_s16(vmlal_high_laneq_s16(vmlal_high_laneq_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), *(int16x8_t *)v32.val[0].i8, v17, 6), *(int16x8_t *)v32.val[1].i8, v17, 5), *(int16x8_t *)v32.val[2].i8,
                    v17,
                    4),
                  0xFuLL));
        v33.val[0] = vuzp1_s8(v21, v22);
        v33.val[2] = vuzp2_s8(v21, v22);
        a10.i64[0] = vpaddq_s16(a10, a10).u64[0];
        v32.val[0] = (int8x8_t)vpaddq_s16(*(int16x8_t *)v32.val[0].i8, *(int16x8_t *)v32.val[0].i8).u64[0];
        v31.val[1] = (int8x8_t)vpaddq_s16(*(int16x8_t *)v31.val[1].i8, *(int16x8_t *)v31.val[1].i8).u64[0];
        v32.val[1] = (int8x8_t)vpaddq_s16(*(int16x8_t *)v32.val[1].i8, *(int16x8_t *)v32.val[1].i8).u64[0];
        a12 = (int16x4_t)vpaddq_s16(*(int16x8_t *)v31.val[2].i8, *(int16x8_t *)v31.val[2].i8).u64[0];
        v32.val[2] = (int8x8_t)vpaddq_s16(*(int16x8_t *)v32.val[2].i8, *(int16x8_t *)v32.val[2].i8).u64[0];
        v33.val[1] = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32(vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 1), *(int16x4_t *)a10.i8, v18, 1), (int16x4_t)v31.val[1], v18, 0), a12, v17, 7), 0x10uLL), vmlal_laneq_s16(vmlal_lane_s16(vmlal_lane_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 1), (int16x4_t)v32.val[0], v18, 1), (int16x4_t)v32.val[1], v18, 0), (int16x4_t)v32.val[2],
                           v17,
                           7),
                         0x10uLL));
        v33.val[3] = vmovn_s16(vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 1), *(int16x4_t *)a10.i8, v18, 3), (int16x4_t)v31.val[1], v18, 2), a12, v18, 1), 0x10uLL), vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 1), (int16x4_t)v32.val[0], v18, 3), (int16x4_t)v32.val[1], v18, 2), (int16x4_t)v32.val[2],
                           v18,
                           1),
                         0x10uLL));
        --i;
        vst4_s8(v15, v33);
      }
      for (uint64_t j = (a1 >> 1) & 7; j; v15 += 4)
      {
        a10.i8[0] = *v13;
        LOBYTE(v25) = v13[1];
        a12.i8[0] = v13[2];
        LOBYTE(v26) = v13[3];
        uint64_t v24 = v13 + 4;
        a10.i8[1] = *v24;
        HIBYTE(v25) = v24[1];
        a12.i8[1] = v24[2];
        HIBYTE(v26) = v24[3];
        uint64_t v13 = v24 + 4;
        a10.i16[2] = v25;
        a12.i16[2] = v26;
        int16x8_t v27 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a10.i8);
        int16x8_t v28 = (int16x8_t)vmovl_u8((uint8x8_t)a12);
        int32x4_t v29 = vmlal_high_laneq_s16(vmlal_laneq_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), *(int16x4_t *)v27.i8, v17, 6), v27, v17, 5);
        a10 = (int16x8_t)vpaddlq_s16(v27);
        v29.i64[0] = vmlal_laneq_s16(v29, *(int16x4_t *)v28.i8, v17, 4).u64[0];
        a12 = (int16x4_t)vpaddlq_s16(v28).u64[0];
        *(int32x2_t *)v29.i8 = vshr_n_s32(*(int32x2_t *)v29.i8, 0xFuLL);
        --j;
        *uint8x16_t v15 = v29.i8[0];
        v15[1] = vshrn_n_s32(vmlal_laneq_s16(vmlal_high_lane_s16(vmlal_lane_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 1), *(int16x4_t *)a10.i8, v18, 1), a10, v18, 0), a12, v17, 7), 0x10uLL).u8[0];
        v15[2] = v29.i8[4];
        v15[3] = vshrn_n_s32(vmlal_lane_s16(vmlal_high_lane_s16(vmlal_lane_s16(vdupq_lane_s32(*(int32x2_t *)v17.i8, 1), *(int16x4_t *)a10.i8, v18, 3), a10, v18, 2), a12, v18, 1), 0x10uLL).u8[0];
      }
      v13 += v12;
      v15 += v14;
      --a2;
    }
    while (a2);
  }
  return 0;
}

uint64_t vt_Has_BGRA_yuvs_arm()
{
  return 1;
}

uint64_t vtPixelTransferSession_InvokeBlitter(unint64_t a1, unint64_t a2, uint64_t a3, void *a4, void *a5, CVPixelBufferRef pixelBuffer, __CVBuffer *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  memset(v31, 0, sizeof(v31));
  memset(v30, 0, sizeof(v30));
  memset(v29, 0, sizeof(v29));
  memset(v28, 0, sizeof(v28));
  memset(v27, 0, sizeof(v27));
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  PlaneCFIndex Count = 1;
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(a7, 0);
  if (CVPixelBufferIsPlanar(pixelBuffer)) {
    PlaneCFIndex Count = CVPixelBufferGetPlaneCount(pixelBuffer);
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  uint64_t v19 = vtPixelTransferSession_EnsurePixelFormatPixelBlockInfoArray(PixelFormatType, PlaneCount, a4);
  if (!v19)
  {
    uint64_t v19 = vtPixelTransferSession_PrepareBlitterParameters(pixelBuffer, PlaneCount, a8, a4, (uint64_t *)v30, v29, (uint64_t *)v31, (size_t *)v28);
    if (!v19)
    {
      size_t v20 = CVPixelBufferIsPlanar(a7) ? CVPixelBufferGetPlaneCount(a7) : 1;
      OSType v21 = CVPixelBufferGetPixelFormatType(a7);
      uint64_t v19 = vtPixelTransferSession_EnsurePixelFormatPixelBlockInfoArray(v21, v20, a5);
      if (!v19)
      {
        uint64_t v19 = vtPixelTransferSession_PrepareBlitterParameters(a7, v20, a9, a5, (uint64_t *)v26, v25, (uint64_t *)v27, (size_t *)v24);
        if (!v19)
        {
          if (a1 | a2)
          {
            if (a2) {
              uint64_t v22 = ((uint64_t (*)(uint64_t, uint64_t, _OWORD *, _OWORD *, _OWORD *, uint64_t, _OWORD *, _OWORD *, _OWORD *))a2)(a3, a8, v30, v31, v28, a9, v26, v27, v24);
            }
            else {
              uint64_t v22 = ((uint64_t (*)(void, void, _OWORD *, _OWORD *, _OWORD *, _OWORD *))a1)(*(void *)(a8 + 16), *(void *)(a8 + 24), v31, v29, v27, v25);
            }
            uint64_t v19 = v22;
          }
          else
          {
            uint64_t v19 = 4294954391;
          }
        }
      }
    }
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferUnlockBaseAddress(a7, 0);
  return v19;
}

uint64_t vtPixelTransferSession_PrepareBlitterParameters(__CVBuffer *a1, size_t a2, uint64_t a3, void *a4, uint64_t *a5, void *a6, uint64_t *a7, size_t *a8)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  uint64_t result = vtPixelTransferSession_EnsurePixelFormatPixelBlockInfoArray(PixelFormatType, a2, a4);
  if (result) {
    return result;
  }
  int16x4_t v18 = (void *)*a4;
  if (!CVPixelBufferIsPlanar(a1))
  {
    BaseAddress = CVPixelBufferGetBaseAddress(a1);
    *a5 = (uint64_t)BaseAddress;
    *a6 = BaseAddress;
    *a7 = CVPixelBufferGetBytesPerRow(a1);
    size_t DataSize = CVPixelBufferGetDataSize(a1);
    *a8 = DataSize;
    if (*a5)
    {
      size_t v28 = DataSize;
      uint64_t result = 4294954394;
      if (!*a7 || !v28) {
        return result;
      }
      goto LABEL_20;
    }
    return 4294954394;
  }
  uint64_t v34 = a3;
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  size_t v20 = (char *)((unsigned char *)CVPixelBufferGetBaseAddress(a1) - BaseAddressOfPlane);
  OSType v21 = &v20[CVPixelBufferGetDataSize(a1)];
  size_t v22 = a2 - 1;
  if (a2 == 1)
  {
    *a8 = (size_t)v21;
    a3 = v34;
    goto LABEL_13;
  }
  int8x8x4_t v33 = v18;
  size_t v23 = 0;
  do
  {
    uint64_t v24 = CVPixelBufferGetBaseAddressOfPlane(a1, v23 + 1);
    unsigned __int16 v25 = CVPixelBufferGetBaseAddressOfPlane(a1, v23);
    a8[v23] = v24 - v25;
    v21 -= v24 - v25;
    ++v23;
  }
  while (v22 != v23);
  a8[v22] = (size_t)v21;
  a3 = v34;
  int16x4_t v18 = v33;
  if (a2)
  {
LABEL_13:
    size_t v29 = 0;
    do
    {
      uint8x16_t v30 = CVPixelBufferGetBaseAddressOfPlane(a1, v29);
      a5[v29] = (uint64_t)v30;
      a6[v29] = v30;
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v29);
      a7[v29] = BytesPerRowOfPlane;
      BOOL v32 = !a5[v29] || BytesPerRowOfPlane == 0;
      if (v32 || !a8[v29]) {
        return 4294954394;
      }
    }
    while (a2 != ++v29);
  }
LABEL_20:
  if (*(void *)(a3 + 40) || *(void *)(a3 + 32)) {
    vtPixelTransferSession_PrepareOffsets(a2, a3, v18, a7, a5, a6);
  }
  return 0;
}

uint64_t vt_CopyAvg_yuvs_420v_vec(uint64_t a1, uint64_t a2, uint64_t *a3, const char **a4, uint64_t *a5, uint64_t a6)
{
  return 0;
}

OSStatus VTCompressionSessionCreate(CFAllocatorRef allocator, int32_t width, int32_t height, CMVideoCodecType codecType, CFDictionaryRef encoderSpecification, CFDictionaryRef sourceImageBufferAttributes, CFAllocatorRef compressedDataAllocator, VTCompressionOutputCallback outputCallback, void *outputCallbackRefCon, VTCompressionSessionRef *compressionSessionOut)
{
  return VTCompressionSessionCreateWithOptions((uint64_t)allocator, *(uint64_t *)&width, *(uint64_t *)&height, *(uint64_t *)&codecType, encoderSpecification, sourceImageBufferAttributes, (uint64_t)compressedDataAllocator, (uint64_t)outputCallback, (uint64_t)outputCallbackRefCon, 0, (uint64_t *)compressionSessionOut);
}

void RegisterVTCompressionSession()
{
  CFAllocatorRef v0 = (const void *)_CFRuntimeRegisterClass();
  sVTCompressionSessionID = (uint64_t)v0;
  sVTCompressionSessionPropertyCallbacks = 0;
  unk_1EB3B8960 = VTCompressionSessionCopySupportedPropertyDictionary;
  qword_1EB3B8968 = (uint64_t)VTCompressionSessionSetProperty;
  qword_1EB3B8970 = (uint64_t)VTCompressionSessionCopyProperty;
  qword_1EB3B8978 = (uint64_t)VTCompressionSessionSetProperties;
  qword_1EB3B8980 = (uint64_t)VTCompressionSessionCopySerializableProperties;

  VTSessionRegisterCallbacksForTypeID(&sVTCompressionSessionPropertyCallbacks, v0);
}

void vtCompressionSessionInit(uint64_t a1)
{
}

uint64_t VTEncoderSessionSetPixelBufferAttributes(uint64_t *a1, const void *a2)
{
  if (a1 && (uint64_t v2 = *a1) != 0 && *(_DWORD *)(v2 + 16) != 2)
  {
    MEMORY[0x1997056B0](*(void *)(v2 + 464));
    if (a2) {
      CFRetain(a2);
    }
    uint64_t v4 = *(const void **)(v2 + 472);
    if (v4) {
      CFRelease(v4);
    }
    *(void *)(v2 + 472) = a2;
    ++*(_DWORD *)(v2 + 480);
    MEMORY[0x1997056C0](*(void *)(v2 + 464));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

OSStatus VTSessionSetProperties(VTSessionRef session, CFDictionaryRef propertyDictionary)
{
  if (session
    && (uint64_t v4 = (const void *)CFGetTypeID(session),
        CallbacksWithCFTypeID TypeID = VTSessionGetCallbacksWithTypeID(v4),
        propertyDictionary)
    && (uint64_t v6 = CallbacksWithTypeID) != 0
    && (CFTypeID v7 = CFGetTypeID(propertyDictionary), v7 == CFDictionaryGetTypeID()))
  {
    uint64_t v8 = (uint64_t (*)(VTSessionRef, CFDictionaryRef))v6[4];
    return v8(session, propertyDictionary);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTCompressionSessionSetProperties(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v26 = a1;
  uint64_t v27 = 0;
  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
  {
    LODWORD(v27) = FigSignalErrorAt();
    return v27;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4)
  {
    if (theDict)
    {
      long long context = 0u;
      long long v29 = 0u;
      int v6 = vtCompressionSessionCopyPropertiesHandledByVideoToolbox((CFTypeRef *)&context);
      if (v6)
      {
        int v7 = v6;
      }
      else
      {
        uint64_t v10 = *(void *)(a1 + 432);
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = *(uint64_t (**)(uint64_t, char *))(v12 + 32);
        if (!v13 || (v14 = v13(v10, (char *)&context + 8), v14 == -12782) || (int v7 = v14) == 0)
        {
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)vtCompressionSessionAddPropertyToPartition, &context);
          int v7 = 0;
          CFDictionaryRef v9 = (const __CFDictionary *)*((void *)&v29 + 1);
          CFDictionaryRef v8 = (const __CFDictionary *)v29;
          goto LABEL_18;
        }
        FigSignalErrorAt();
      }
      CFDictionaryRef v8 = 0;
      CFDictionaryRef v9 = 0;
LABEL_18:
      if ((void)context) {
        CFRelease((CFTypeRef)context);
      }
      if (*((void *)&context + 1)) {
        CFRelease(*((CFTypeRef *)&context + 1));
      }
      LODWORD(v27) = v7;
      if (!v7)
      {
        if (v8) {
          CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)vtCompressionSessionSetOneProperty, &v26);
        }
        if (v9)
        {
          uint64_t v15 = *(void *)(a1 + 432);
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          int16x4_t v18 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(v17 + 40);
          if (v18 && (LODWORD(v27) = v18(v15, v9), v27 != -12782))
          {
            if (!*(unsigned char *)(a1 + 794) && *(unsigned char *)(a1 + 795)) {
              CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)vtCompressionSessionValidateOneProperty, &v26);
            }
            if (CFDictionaryContainsKey(v9, @"ProfileLevel"))
            {
              CFStringRef Value = CFDictionaryGetValue(v9, @"ProfileLevel");
              size_t v23 = *(const void **)(a1 + 560);
              if (v23 != Value)
              {
                *(void *)(a1 + 560) = Value;
                if (Value) {
                  CFRetain(Value);
                }
                if (v23) {
                  CFRelease(v23);
                }
              }
            }
            if (CFDictionaryContainsKey(v9, @"OutputBitDepth"))
            {
              CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v9, @"OutputBitDepth");
              unsigned __int16 v25 = (_DWORD *)(a1 + 568);
              if (v24) {
                CFNumberGetValue(v24, kCFNumberSInt32Type, v25);
              }
              else {
                *unsigned __int16 v25 = 0;
              }
            }
            FigCFDictionaryGetFloatIfPresent();
            uint64_t v19 = (void (__cdecl *)(const void *, const void *, void *))vtCoreAnalyticsSaveUserConfiguredCompressionProperty;
            CFDictionaryRef v21 = v9;
            size_t v20 = (uint64_t *)a1;
          }
          else
          {
            LODWORD(v27) = 0;
            uint64_t v19 = (void (__cdecl *)(const void *, const void *, void *))vtCompressionSessionSetOneProperty;
            size_t v20 = &v26;
            CFDictionaryRef v21 = v9;
          }
          CFDictionaryApplyFunction(v21, v19, v20);
        }
      }
      if (v8) {
        CFRelease(v8);
      }
      if (v9) {
        CFRelease(v9);
      }
    }
    return v27;
  }

  return VTCompressionSessionRemote_SetProperties(v4, theDict);
}

OSStatus VTCompressionSessionEncodeFrame(VTCompressionSessionRef session, CVImageBufferRef imageBuffer, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, void *sourceFrameRefcon, VTEncodeInfoFlags *infoFlagsOut)
{
  if (!session || !imageBuffer || *((_DWORD *)session + 4)) {
    goto LABEL_11;
  }
  if (!*((unsigned char *)session + 529)) {
    FigPowerReduceUtilitySFI();
  }
  uint64_t v14 = *((void *)session + 3);
  if (v14)
  {
    long long v18 = *(_OWORD *)&presentationTimeStamp->value;
    CMTimeEpoch epoch = presentationTimeStamp->epoch;
    long long v16 = *(_OWORD *)&duration->value;
    CMTimeEpoch v17 = duration->epoch;
    return VTCompressionSessionRemote_EncodeFrame(v14, (uint64_t)imageBuffer, 0, (uint64_t)&v18, &v16, (uint64_t)frameProperties, (uint64_t)sourceFrameRefcon, infoFlagsOut);
  }
  if (*((void *)session + 10))
  {
    long long v18 = *(_OWORD *)&presentationTimeStamp->value;
    CMTimeEpoch epoch = presentationTimeStamp->epoch;
    long long v16 = *(_OWORD *)&duration->value;
    CMTimeEpoch v17 = duration->epoch;
    return vtCompressionSessionEncodeFrameCommon((uint64_t)session, imageBuffer, 0, (uint64_t)&v18, &v16, frameProperties, 0, (uint64_t)sourceFrameRefcon, infoFlagsOut);
  }
  else
  {
LABEL_11:
    return FigSignalErrorAt();
  }
}

void vtCompressionSessionConfirmSpatialAndColorProperties(uint64_t a1)
{
  CFTypeRef v102 = 0;
  CFTypeRef v103 = 0;
  CFTypeRef cf = 0;
  CFTypeRef cf1 = 0;
  CFTypeRef v98 = 0;
  CFTypeRef v99 = 0;
  CFTypeRef v96 = 0;
  CFTypeRef v97 = 0;
  CFTypeRef v94 = 0;
  CFTypeRef v95 = 0;
  CFTypeRef v92 = 0;
  CFTypeRef v93 = 0;
  BOOL IsPropertyHandledByVideoEncoder = vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"PixelAspectRatio");
  int v3 = (void *)MEMORY[0x1E4F1CF80];
  if (!IsPropertyHandledByVideoEncoder) {
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(a1 + 432);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v6 = v5 ? v5 : 0;
  int v7 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (!v7) {
    goto LABEL_7;
  }
  if (v7(v4, @"PixelAspectRatio", *v3, &v103)) {
    goto LABEL_7;
  }
  CFTypeRef v51 = v103;
  CFTypeRef v52 = *(CFTypeRef *)(a1 + 136);
  if (v103 == v52) {
    goto LABEL_7;
  }
  if (!v103 || !v52) {
    goto LABEL_140;
  }
  if (CFEqual(v103, *(CFTypeRef *)(a1 + 136)))
  {
LABEL_7:
    int v8 = 0;
    goto LABEL_8;
  }
  CFTypeRef v52 = *(CFTypeRef *)(a1 + 136);
  CFTypeRef v51 = v103;
LABEL_140:
  *(void *)(a1 + 136) = v51;
  if (v51) {
    CFRetain(v51);
  }
  if (v52) {
    CFRelease(v52);
  }
  int v8 = 1;
LABEL_8:
  if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"CleanAperture"))
  {
    uint64_t v9 = *(void *)(a1 + 432);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v11 = v10 ? v10 : 0;
    uint64_t v12 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v11 + 48);
    if (v12)
    {
      if (!v12(v9, @"CleanAperture", *v3, &v102))
      {
        CFTypeRef v13 = v102;
        CFTypeRef v14 = *(CFTypeRef *)(a1 + 144);
        if (v102 != v14)
        {
          if (v102 && v14)
          {
            if (CFEqual(v102, *(CFTypeRef *)(a1 + 144))) {
              goto LABEL_24;
            }
            CFTypeRef v14 = *(CFTypeRef *)(a1 + 144);
            CFTypeRef v13 = v102;
          }
          *(void *)(a1 + 144) = v13;
          if (v13) {
            CFRetain(v13);
          }
          if (v14) {
            CFRelease(v14);
          }
          int v8 = 1;
        }
      }
    }
  }
LABEL_24:
  if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"FieldCount"))
  {
    uint64_t v15 = *(void *)(a1 + 432);
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v17 = v16 ? v16 : 0;
    long long v18 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v17 + 48);
    if (v18)
    {
      if (!v18(v15, @"FieldCount", *v3, &cf1))
      {
        CFTypeRef v19 = cf1;
        CFTypeRef v20 = *(CFTypeRef *)(a1 + 152);
        if (cf1 != v20)
        {
          if (cf1 && v20)
          {
            if (CFEqual(cf1, *(CFTypeRef *)(a1 + 152))) {
              goto LABEL_40;
            }
            CFTypeRef v20 = *(CFTypeRef *)(a1 + 152);
            CFTypeRef v19 = cf1;
          }
          *(void *)(a1 + 152) = v19;
          if (v19) {
            CFRetain(v19);
          }
          if (v20) {
            CFRelease(v20);
          }
          int v8 = 1;
        }
      }
    }
  }
LABEL_40:
  if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"FieldDetail"))
  {
    uint64_t v21 = *(void *)(a1 + 432);
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v23 = v22 ? v22 : 0;
    CFNumberRef v24 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v23 + 48);
    if (v24)
    {
      if (!v24(v21, @"FieldDetail", *v3, &cf))
      {
        CFTypeRef v25 = cf;
        CFTypeRef v26 = *(CFTypeRef *)(a1 + 160);
        if (cf != v26)
        {
          if (cf && v26)
          {
            if (CFEqual(cf, *(CFTypeRef *)(a1 + 160))) {
              goto LABEL_56;
            }
            CFTypeRef v26 = *(CFTypeRef *)(a1 + 160);
            CFTypeRef v25 = cf;
          }
          *(void *)(a1 + 160) = v25;
          if (v25) {
            CFRetain(v25);
          }
          if (v26) {
            CFRelease(v26);
          }
          int v8 = 1;
        }
      }
    }
  }
LABEL_56:
  if (!vtCompressionSessionIsIPT(a1))
  {
    if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"ColorPrimaries"))
    {
      uint64_t v30 = *(void *)(a1 + 432);
      uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v32 = v31 ? v31 : 0;
      float v55 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v32 + 48);
      if (v55)
      {
        if (!v55(v30, @"ColorPrimaries", *v3, &v99))
        {
          CFTypeRef v76 = v99;
          CFTypeRef v77 = *(CFTypeRef *)(a1 + 176);
          if (v99 != v77)
          {
            int v78 = 0;
            if (v99 && v77)
            {
              int v78 = CFEqual(v99, v77);
              CFTypeRef v76 = v99;
            }
            if (!v78 && v76)
            {
              unint64_t v79 = *(const void **)(a1 + 176);
              *(void *)(a1 + 176) = v76;
              CFRetain(v76);
              if (v79) {
                CFRelease(v79);
              }
              int v8 = 1;
            }
          }
        }
      }
    }
    if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"TransferFunction"))
    {
      uint64_t v56 = *(void *)(a1 + 432);
      uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v58 = v57 ? v57 : 0;
      uint64_t v59 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v58 + 48);
      if (v59)
      {
        if (!v59(v56, @"TransferFunction", *v3, &v98))
        {
          CFTypeRef v80 = v98;
          CFTypeRef v81 = *(CFTypeRef *)(a1 + 184);
          if (v98 != v81)
          {
            int v82 = 0;
            if (v98 && v81)
            {
              int v82 = CFEqual(v98, v81);
              CFTypeRef v80 = v98;
            }
            if (!v82 && v80)
            {
              uint64_t v83 = *(const void **)(a1 + 184);
              *(void *)(a1 + 184) = v80;
              CFRetain(v80);
              if (v83) {
                CFRelease(v83);
              }
              int v8 = 1;
            }
          }
        }
      }
    }
    if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"GammaLevel"))
    {
      uint64_t v60 = *(void *)(a1 + 432);
      uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v62 = v61 ? v61 : 0;
      float v63 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v62 + 48);
      if (v63)
      {
        if (!v63(v60, @"GammaLevel", *v3, &v92))
        {
          CFTypeRef v84 = v92;
          CFTypeRef v85 = *(CFTypeRef *)(a1 + 192);
          if (v92 != v85)
          {
            int v86 = 0;
            if (v92 && v85)
            {
              int v86 = CFEqual(v92, v85);
              CFTypeRef v84 = v92;
            }
            if (!v86 && v84)
            {
              int v87 = *(const void **)(a1 + 192);
              *(void *)(a1 + 192) = v84;
              CFRetain(v84);
              if (v87) {
                CFRelease(v87);
              }
              int v8 = 1;
            }
          }
        }
      }
    }
    if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"YCbCrMatrix"))
    {
      uint64_t v64 = *(void *)(a1 + 432);
      uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v66 = v65 ? v65 : 0;
      float v67 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v66 + 48);
      if (v67)
      {
        if (!v67(v64, @"YCbCrMatrix", *v3, &v97))
        {
          CFTypeRef v88 = v97;
          CFTypeRef v89 = *(CFTypeRef *)(a1 + 200);
          if (v97 != v89)
          {
            int v90 = 0;
            if (v97 && v89)
            {
              int v90 = CFEqual(v97, v89);
              CFTypeRef v88 = v97;
            }
            if (!v90 && v88)
            {
              int v91 = *(const void **)(a1 + 200);
              *(void *)(a1 + 200) = v88;
              CFRetain(v88);
              if (v91) {
                CFRelease(v91);
              }
              int v8 = 1;
            }
          }
        }
      }
    }
    if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"ICCProfile"))
    {
      uint64_t v68 = *(void *)(a1 + 432);
      uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v70 = v69 ? v69 : 0;
      float v71 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v70 + 48);
      if (v71)
      {
        if (!v71(v68, @"ICCProfile", *v3, &v96))
        {
          CFTypeRef v72 = v96;
          CFTypeRef v73 = *(CFTypeRef *)(a1 + 208);
          if (v96 != v73)
          {
            int v74 = 0;
            if (v96 && v73)
            {
              int v74 = CFEqual(v96, v73);
              CFTypeRef v72 = v96;
            }
            if (!v74 && v72)
            {
              unint64_t v75 = *(const void **)(a1 + 208);
              *(void *)(a1 + 208) = v72;
              CFRetain(v72);
              if (v75) {
                CFRelease(v75);
              }
              int v8 = 1;
            }
          }
        }
      }
    }
  }
  if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"MasteringDisplayColorVolume"))
  {
    uint64_t v27 = *(void *)(a1 + 432);
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v29 = v28 ? v28 : 0;
    int8x8x4_t v33 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v29 + 48);
    if (v33)
    {
      if (!v33(v27, @"MasteringDisplayColorVolume", *v3, &v95))
      {
        CFTypeRef v34 = v95;
        CFTypeRef v35 = *(CFTypeRef *)(a1 + 216);
        if (v95 != v35)
        {
          if (v95 && v35)
          {
            if (CFEqual(v95, *(CFTypeRef *)(a1 + 216))) {
              goto LABEL_76;
            }
            CFTypeRef v35 = *(CFTypeRef *)(a1 + 216);
            CFTypeRef v34 = v95;
          }
          *(void *)(a1 + 216) = v34;
          if (v34) {
            CFRetain(v34);
          }
          if (v35) {
            CFRelease(v35);
          }
          int v8 = 1;
        }
      }
    }
  }
LABEL_76:
  if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"ContentLightLevelInfo"))
  {
    uint64_t v36 = *(void *)(a1 + 432);
    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v38 = v37 ? v37 : 0;
    size_t v39 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v38 + 48);
    if (v39)
    {
      if (!v39(v36, @"ContentLightLevelInfo", *v3, &v94))
      {
        CFTypeRef v40 = v94;
        CFTypeRef v41 = *(CFTypeRef *)(a1 + 224);
        if (v94 != v41)
        {
          if (!v94 || !v41) {
            goto LABEL_87;
          }
          if (!CFEqual(v94, *(CFTypeRef *)(a1 + 224)))
          {
            CFTypeRef v41 = *(CFTypeRef *)(a1 + 224);
            CFTypeRef v40 = v94;
LABEL_87:
            *(void *)(a1 + 224) = v40;
            if (v40) {
              CFRetain(v40);
            }
            if (v41) {
              CFRelease(v41);
            }
            int v8 = 1;
          }
        }
      }
    }
  }
  if (!vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"AmbientViewingEnvironment")) {
    goto LABEL_98;
  }
  uint64_t v42 = *(void *)(a1 + 432);
  uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v44 = v43 ? v43 : 0;
  unint64_t v45 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v44 + 48);
  if (!v45) {
    goto LABEL_98;
  }
  if (v45(v42, @"AmbientViewingEnvironment", *v3, &v93)) {
    goto LABEL_98;
  }
  CFTypeRef v53 = v93;
  CFTypeRef v54 = *(CFTypeRef *)(a1 + 656);
  if (v93 == v54) {
    goto LABEL_98;
  }
  if (!v93 || !v54) {
    goto LABEL_150;
  }
  if (CFEqual(v93, *(CFTypeRef *)(a1 + 656)))
  {
LABEL_98:
    if (!v8) {
      goto LABEL_110;
    }
    goto LABEL_99;
  }
  CFTypeRef v54 = *(CFTypeRef *)(a1 + 656);
  CFTypeRef v53 = v93;
LABEL_150:
  *(void *)(a1 + 656) = v53;
  if (v53) {
    CFRetain(v53);
  }
  if (v54) {
    CFRelease(v54);
  }
LABEL_99:
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 272), 0xFFFFFFFFFFFFFFFFLL);
  size_t v46 = *(const void **)(a1 + 384);
  if (v46)
  {
    CFRelease(v46);
    *(void *)(a1 + 384) = 0;
  }
  int v47 = *(const void **)(a1 + 376);
  if (v47)
  {
    CFRelease(v47);
    *(void *)(a1 + 376) = 0;
  }
  CFTypeID v48 = *(NSObject **)(a1 + 344);
  if (v48)
  {
    dispatch_release(v48);
    *(void *)(a1 + 344) = 0;
  }
  *(void *)(a1 + 352) = 0;
  size_t v49 = *(const void **)(a1 + 504);
  if (v49)
  {
    CFRelease(v49);
    *(void *)(a1 + 504) = 0;
  }
  uint64_t v50 = *(NSObject **)(a1 + 312);
  if (v50)
  {
    dispatch_release(v50);
    *(void *)(a1 + 312) = 0;
  }
  *(void *)(a1 + 320) = 0;
LABEL_110:
  if (v103) {
    CFRelease(v103);
  }
  if (v102) {
    CFRelease(v102);
  }
  if (cf1) {
    CFRelease(cf1);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v99) {
    CFRelease(v99);
  }
  if (v98) {
    CFRelease(v98);
  }
  if (v92) {
    CFRelease(v92);
  }
  if (v97) {
    CFRelease(v97);
  }
  if (v96) {
    CFRelease(v96);
  }
  if (v95) {
    CFRelease(v95);
  }
  if (v94) {
    CFRelease(v94);
  }
  if (v93) {
    CFRelease(v93);
  }
  *(unsigned char *)(a1 + 256) = 0;
}

BOOL vtCompressionSessionIsPropertyHandledByVideoEncoder(uint64_t a1, const void *a2)
{
  CFDictionaryRef theDict = 0;
  uint64_t v3 = *(void *)(a1 + 432);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(uint64_t, CFDictionaryRef *))(v5 + 32);
  if (!v6) {
    return 0;
  }
  v6(v3, &theDict);
  if (!theDict) {
    return 0;
  }
  BOOL v7 = CFDictionaryContainsKey(theDict, a2) != 0;
  if (theDict) {
    CFRelease(theDict);
  }
  return v7;
}

void *vtCloneCompressionFrameTrackingInfo(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v3 = CFAllocatorAllocate(a1, 40, 0);
  CFTypeRef v4 = *(CFTypeRef *)(a2 + 8);
  *uint64_t v3 = *(void *)a2;
  if (v4) {
    CFTypeRef v4 = CFRetain(v4);
  }
  v3[1] = v4;
  v3[2] = _Block_copy(*(const void **)(a2 + 16));
  *((unsigned char *)v3 + 33) = *(unsigned char *)(a2 + 33);
  return v3;
}

uint64_t VTEncoderSessionCreateVideoFormatDescription(uint64_t *a1, CMVideoCodecType a2, unsigned int a3, int a4, const __CFDictionary *a5, CMVideoFormatDescriptionRef *a6)
{
  v26[0] = 0;
  if (a1)
  {
    uint64_t v6 = *a1;
    if (*a1)
    {
      if (*(_DWORD *)(v6 + 16) != 2)
      {
        CFDictionaryRef v8 = a5;
        vtCompressionSessionCopyFallbackVideoFormatDescriptionExtensions(*a1, a5, v26);
        if (*(unsigned char *)(v6 + 676))
        {
          CFDictionaryRef v12 = v26[0];
          uint64_t v13 = vtCompressionSessionAddDolbyVisionVideoFormatDescriptionExtensions(v6, a3, a4, v26[0]);
          if (v13) {
            goto LABEL_37;
          }
          if (*(unsigned char *)(v6 + 676) == 5) {
            a2 = 1685481521;
          }
        }
        if (*(unsigned char *)(v6 + 641))
        {
          CFDictionaryRef v12 = v26[0];
          if (*(unsigned char *)(v6 + 640))
          {
            if (!*(unsigned char *)(v6 + 642))
            {
              if (v26[0])
              {
                value = 0;
                CFDataRef v14 = *(const __CFData **)(v6 + 664);
                if (v14)
                {
                  v26[1] = 0;
                  _OWORD v26[2] = 0;
                  BytePtr = CFDataGetBytePtr(v14);
                  CFIndex Length = CFDataGetLength(*(CFDataRef *)(v6 + 664));
                  uint64_t v15 = (const void *)*MEMORY[0x1E4F1EE20];
                  CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(v12, (const void *)*MEMORY[0x1E4F1EE20]);
                  uint64_t Count = FigCFDictionaryGetCount();
                  if (v16)
                  {
                    CFIndex v18 = Count;
                    CFAllocatorRef v19 = CFGetAllocator((CFTypeRef)v6);
                    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v19, v18, v16);
                    if (CFDictionaryGetValue(MutableCopy, @"hvcC"))
                    {
                      CFGetAllocator((CFTypeRef)v6);
                      uint64_t UpdatedHVCCWithAdditionalHEVCParameterSets = FigVideoFormatDescriptionCreateUpdatedHVCCWithAdditionalHEVCParameterSets();
                      if (!UpdatedHVCCWithAdditionalHEVCParameterSets)
                      {
                        CFDictionarySetValue(MutableCopy, @"hvcC", value);
                        CFDictionarySetValue(v12, v15, MutableCopy);
                      }
                      if (MutableCopy) {
                        goto LABEL_18;
                      }
                    }
                    else
                    {
                      uint64_t UpdatedHVCCWithAdditionalHEVCParameterSets = FigSignalErrorAt();
                      if (MutableCopy) {
LABEL_18:
                      }
                        CFRelease(MutableCopy);
                    }
                  }
                  else
                  {
                    uint64_t UpdatedHVCCWithAdditionalHEVCParameterSets = 0;
                  }
                  if (value) {
                    CFRelease(value);
                  }
                  if (UpdatedHVCCWithAdditionalHEVCParameterSets)
                  {
LABEL_35:
                    CFRelease(v12);
                    return UpdatedHVCCWithAdditionalHEVCParameterSets;
                  }
                }
              }
            }
          }
        }
        else
        {
          CFDictionaryRef v12 = v26[0];
        }
        if (v12) {
          CFDictionaryRef v8 = v12;
        }
        CFAllocatorRef v23 = CFGetAllocator((CFTypeRef)v6);
        uint64_t v13 = CMVideoFormatDescriptionCreate(v23, a2, a3, a4, v8, a6);
        if (!v13)
        {
          CFNumberRef v24 = *(const void **)(v6 + 32);
          CMVideoFormatDescriptionRef v25 = *a6;
          *(void *)(v6 + 32) = *a6;
          if (v25) {
            CFRetain(v25);
          }
          if (v24) {
            CFRelease(v24);
          }
          uint64_t UpdatedHVCCWithAdditionalHEVCParameterSets = 0;
          if (!v12) {
            return UpdatedHVCCWithAdditionalHEVCParameterSets;
          }
          goto LABEL_35;
        }
LABEL_37:
        uint64_t UpdatedHVCCWithAdditionalHEVCParameterSets = v13;
        if (!v12) {
          return UpdatedHVCCWithAdditionalHEVCParameterSets;
        }
        goto LABEL_35;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t VTEncoderSessionEmitEncodedFrame(uint64_t *a1, const void *a2, uint64_t a3, unsigned int a4, opaqueCMSampleBuffer *a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unsigned int v25 = a4;
  CFTypeRef cf = 0;
  CMSampleBufferRef sbuf = a5;
  if (a1)
  {
    uint64_t v5 = *a1;
    if (*a1)
    {
      if (*(_DWORD *)(v5 + 16) != 2)
      {
        if (a3) {
          CMSampleBufferRef sbuf = 0;
        }
        if (*(unsigned char *)(v5 + 794))
        {
          MEMORY[0x1997056B0](*(void *)(v5 + 104));
          CFStringRef Value = (unsigned __int8 *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 128), a2);
          if (Value)
          {
            int v9 = Value[32];
            MEMORY[0x1997056C0](*(void *)(v5 + 104));
            if (v9) {
              VTRateControlSessionBeforeEmitEncodedFrame(*(void *)(v5 + 800));
            }
          }
          else
          {
            uint64_t v20 = FigSignalErrorAt();
            MEMORY[0x1997056C0](*(void *)(v5 + 104));
            if (v20) {
              return v20;
            }
          }
        }
        MEMORY[0x1997056B0](*(void *)(v5 + 104));
        uint64_t v10 = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 128), a2);
        if (v10)
        {
          if (!*((unsigned char *)v10 + 33))
          {
            *((unsigned char *)v10 + 33) = 1;
            uint64_t v11 = *v10;
            CFDataRef v12 = (const __CFData *)v10[1];
            uint64_t v13 = v10[2];
            MEMORY[0x1997056C0](*(void *)(v5 + 104));
            CMSampleBufferRef v14 = sbuf;
            if (!sbuf) {
              goto LABEL_24;
            }
            uint64_t v15 = 0;
            if (*MEMORY[0x1E4F1CFD0] != *(void *)(v5 + 576) || !v12)
            {
LABEL_25:
              if (v15) {
                CMSampleBufferRef v21 = v15;
              }
              else {
                CMSampleBufferRef v21 = v14;
              }
              uint64_t v22 = *(void (**)(void, uint64_t, uint64_t, void, CMSampleBufferRef))(v5 + 80);
              if (v22)
              {
                v22(*(void *)(v5 + 88), v11, a3, v25, v21);
              }
              else if (v13)
              {
                (*(void (**)(uint64_t, uint64_t, void, CMSampleBufferRef))(v13 + 16))(v13, a3, v25, v21);
              }
              ++*(_DWORD *)(v5 + 828);
              if (cf) {
                CFRelease(cf);
              }
              MEMORY[0x1997056B0](*(void *)(v5 + 104));
              if (CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 128), a2))
              {
                CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 128), a2);
                uint64_t v20 = 0;
                --*(_DWORD *)(v5 + 120);
              }
              else
              {
                uint64_t v20 = FigSignalErrorAt();
              }
              MEMORY[0x1997056C0](*(void *)(v5 + 104));
              return v20;
            }
            if (!*(unsigned char *)(v5 + 676) || (NumSamples = CMSampleBufferGetNumSamples(sbuf), CMSampleBufferRef v14 = sbuf, NumSamples != 1))
            {
LABEL_24:
              uint64_t v15 = 0;
              goto LABEL_25;
            }
            uint64_t inserted = VTHDRMetadataGenerationSessionInsertData(*(void *)(v5 + 616), sbuf, v12, &cf);
            if (!inserted)
            {
              uint64_t v15 = (opaqueCMSampleBuffer *)cf;
              CMSampleBufferRef v14 = sbuf;
              goto LABEL_25;
            }
            return inserted;
          }
        }
        else
        {
          int v27 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MEMORY[0x1997056C0](*(void *)(v5 + 104));
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

void vtFreeCompressionFrameTrackingInfo(const __CFAllocator *a1, uint64_t a2)
{
  CFTypeRef v4 = *(const void **)(a2 + 8);
  if (v4) {
    CFRelease(v4);
  }
  _Block_release(*(const void **)(a2 + 16));

  CFAllocatorDeallocate(a1, (void *)a2);
}

OSStatus VTCompressionSessionCompleteFrames(VTCompressionSessionRef session, CMTime *completeUntilPresentationTimeStamp)
{
  uint64_t v10 = 0;
  if (!session || *((_DWORD *)session + 4) == 2)
  {
    OSStatus v4 = FigSignalErrorAt();
LABEL_10:
    vtCompressionSessionPipelineContextInvalidate((uint64_t *)&v10);
    return v4;
  }
  uint64_t v3 = *((void *)session + 3);
  if (!v3)
  {
    CMTime v9 = *completeUntilPresentationTimeStamp;
    vtCompressionSessionPipelineCreateContext(session, 0, 0, 0, 0, 0, (long long *)&v9.value, MEMORY[0x1E4F1F9F8], 0, 0, &v10);
    uint64_t v5 = *((void *)session + 34);
    if (v5) {
      dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    }
    uint64_t v6 = *((void *)session + 36);
    BOOL v7 = v10;
    if (v6) {
      dispatch_sync_f(v6, v10, (dispatch_function_t)vtCompressionSessionCompleteFramesWork);
    }
    OSStatus v4 = v7[28];
    goto LABEL_10;
  }
  CMTime v9 = *completeUntilPresentationTimeStamp;
  return VTCompressionSessionRemote_CompleteFrames(v3, (uint64_t)&v9);
}

void VTCompressionSessionInvalidate(VTCompressionSessionRef session)
{
  if (session && !*((_DWORD *)session + 4))
  {
    *((_DWORD *)session + 4) = 1;
    uint64_t v2 = (const void *)*((void *)session + 101);
    if (v2)
    {
      CFRelease(v2);
      *((void *)session + 101) = 0;
    }
    uint64_t v3 = (void *)*((void *)session + 3);
    if (v3)
    {
      VTCompressionSessionRemote_Invalidate(v3);
    }
    else
    {
      if (*((unsigned char *)session + 794))
      {
        uint64_t v4 = *((void *)session + 100);
        if (v4) {
          VTRateControlSessionCompleteFrames(v4);
        }
      }
      uint64_t v5 = *((void *)session + 34);
      if (v5) {
        dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
      }
      if (*((void *)session + 54))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        uint64_t v6 = *((void *)session + 54);
        if (v6)
        {
          uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v8 = v7 ? v7 : 0;
          CMTime v9 = *(void (**)(uint64_t))(v8 + 24);
          if (v9) {
            v9(v6);
          }
        }
      }
      VTPixelTransferSessionInvalidate(*((VTPixelTransferSessionRef *)session + 63));
      VTPixelTransferSessionInvalidate(*((VTPixelTransferSessionRef *)session + 47));
      uint64_t v10 = (const void *)*((void *)session + 100);
      if (v10)
      {
        CFRelease(v10);
        *((void *)session + 100) = 0;
      }
      if (*((_DWORD *)session + 134))
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFMutableDictionaryRef v12 = Mutable;
          if (*((void *)session + 4)) {
            FigVideoFormatDescriptionContainsHDR();
          }
          CFAbsoluteTimeGetCurrent();
          if (*((void *)session + 102)) {
            FigCFDictionarySetValue();
          }
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          if (*((_DWORD *)session + 208)) {
            FigCFDictionarySetInt32();
          }
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          FigPlaybackLogPowerEvent();
          CFRelease(v12);
        }
      }
    }
    *((_DWORD *)session + 4) = 2;
  }
}

void vtCompressionSessionFinalize(uint64_t a1)
{
  VTCompressionSessionInvalidate((VTCompressionSessionRef)a1);
  uint64_t v2 = *(const void **)(a1 + 432);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 432) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 472);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 472) = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 488);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 488) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 496);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 496) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 376);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 376) = 0;
  }
  uint64_t v7 = *(const void **)(a1 + 504);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 504) = 0;
  }
  uint64_t v8 = *(const void **)(a1 + 520);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 520) = 0;
  }
  FigSimpleMutexDestroy();
  *(void *)(a1 + 464) = 0;
  CMTime v9 = *(const void **)(a1 + 128);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 128) = 0;
  }
  FigSimpleMutexDestroy();
  *(void *)(a1 + 104) = 0;
  uint64_t v10 = *(const void **)(a1 + 136);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 136) = 0;
  }
  uint64_t v11 = *(const void **)(a1 + 144);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 144) = 0;
  }
  CFMutableDictionaryRef v12 = *(const void **)(a1 + 152);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 152) = 0;
  }
  uint64_t v13 = *(const void **)(a1 + 160);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 160) = 0;
  }
  CMSampleBufferRef v14 = *(const void **)(a1 + 168);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 168) = 0;
  }
  uint64_t v15 = *(const void **)(a1 + 176);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 176) = 0;
  }
  CFDictionaryRef v16 = *(const void **)(a1 + 184);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 184) = 0;
  }
  uint64_t v17 = *(const void **)(a1 + 192);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 192) = 0;
  }
  CFIndex v18 = *(const void **)(a1 + 200);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 200) = 0;
  }
  CFAllocatorRef v19 = *(const void **)(a1 + 208);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 208) = 0;
  }
  uint64_t v20 = *(const void **)(a1 + 216);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 216) = 0;
  }
  CMSampleBufferRef v21 = *(const void **)(a1 + 224);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 224) = 0;
  }
  uint64_t v22 = *(const void **)(a1 + 384);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a1 + 384) = 0;
  }
  CFAllocatorRef v23 = *(const void **)(a1 + 232);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(a1 + 232) = 0;
  }
  CFNumberRef v24 = *(const void **)(a1 + 240);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a1 + 240) = 0;
  }
  unsigned int v25 = *(const void **)(a1 + 248);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(a1 + 248) = 0;
  }
  CFTypeRef v26 = *(const void **)(a1 + 616);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 616) = 0;
  }
  int v27 = *(const void **)(a1 + 632);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(a1 + 632) = 0;
  }
  uint64_t v28 = *(const void **)(a1 + 656);
  if (v28)
  {
    CFRelease(v28);
    *(void *)(a1 + 656) = 0;
  }
  uint64_t v29 = *(const void **)(a1 + 664);
  if (v29)
  {
    CFRelease(v29);
    *(void *)(a1 + 664) = 0;
  }
  uint64_t v30 = *(const void **)(a1 + 560);
  if (v30)
  {
    CFRelease(v30);
    *(void *)(a1 + 560) = 0;
  }
  uint64_t v31 = *(const void **)(a1 + 624);
  if (v31)
  {
    CFRelease(v31);
    *(void *)(a1 + 624) = 0;
  }
  uint64_t v32 = *(const void **)(a1 + 696);
  if (v32)
  {
    CFRelease(v32);
    *(void *)(a1 + 696) = 0;
  }
  int8x8x4_t v33 = *(const void **)(a1 + 704);
  if (v33)
  {
    CFRelease(v33);
    *(void *)(a1 + 704) = 0;
  }
  CFTypeRef v34 = *(const void **)(a1 + 712);
  if (v34)
  {
    CFRelease(v34);
    *(void *)(a1 + 712) = 0;
  }
  CFTypeRef v35 = *(const void **)(a1 + 728);
  if (v35)
  {
    CFRelease(v35);
    *(void *)(a1 + 728) = 0;
  }
  uint64_t v36 = *(const void **)(a1 + 264);
  if (v36)
  {
    CFRelease(v36);
    *(void *)(a1 + 264) = 0;
  }
  uint64_t v37 = *(const void **)(a1 + 32);
  if (v37)
  {
    CFRelease(v37);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v38 = *(const void **)(a1 + 56);
  if (v38)
  {
    CFRelease(v38);
    *(void *)(a1 + 56) = 0;
  }
  size_t v39 = *(const void **)(a1 + 64);
  if (v39)
  {
    CFRelease(v39);
    *(void *)(a1 + 64) = 0;
  }
  CFTypeRef v40 = *(const void **)(a1 + 72);
  if (v40)
  {
    CFRelease(v40);
    *(void *)(a1 + 72) = 0;
  }
  VTEncoderSessionTeardown(a1 + 392);
  FigSemaphoreDestroy();
  *(void *)(a1 + 304) = 0;
  FigSemaphoreDestroy();
  *(void *)(a1 + 336) = 0;
  FigSemaphoreDestroy();
  *(void *)(a1 + 360) = 0;
  CFTypeRef v41 = *(NSObject **)(a1 + 312);
  if (v41)
  {
    dispatch_release(v41);
    *(void *)(a1 + 312) = 0;
  }
  uint64_t v42 = *(NSObject **)(a1 + 288);
  if (v42)
  {
    dispatch_release(v42);
    *(void *)(a1 + 288) = 0;
  }
  uint64_t v43 = *(NSObject **)(a1 + 344);
  if (v43)
  {
    dispatch_release(v43);
    *(void *)(a1 + 344) = 0;
  }
  uint64_t v44 = *(NSObject **)(a1 + 272);
  if (v44)
  {
    dispatch_release(v44);
    *(void *)(a1 + 272) = 0;
  }
  unint64_t v45 = *(const void **)(a1 + 456);
  if (v45)
  {
    CFRelease(v45);
    *(void *)(a1 + 456) = 0;
  }
  free(*(void **)(a1 + 784));
  *(void *)(a1 + 784) = 0;
  size_t v46 = *(const void **)(a1 + 760);
  if (v46)
  {
    CFRelease(v46);
    *(void *)(a1 + 760) = 0;
  }
  int v47 = *(const void **)(a1 + 24);
  if (v47)
  {
    CFRelease(v47);
    *(void *)(a1 + 24) = 0;
  }
  CFTypeID v48 = *(const void **)(a1 + 816);
  if (v48)
  {
    CFRelease(v48);
    *(void *)(a1 + 816) = 0;
  }
  size_t v49 = *(const void **)(a1 + 848);
  if (v49)
  {
    CFRelease(v49);
    *(void *)(a1 + 848) = 0;
  }
  uint64_t v50 = *(const void **)(a1 + 856);
  if (v50)
  {
    CFRelease(v50);
    *(void *)(a1 + 856) = 0;
  }
  CFTypeRef v51 = *(const void **)(a1 + 864);
  if (v51)
  {
    CFRelease(v51);
    *(void *)(a1 + 864) = 0;
  }
  CFTypeRef v52 = *(const void **)(a1 + 872);
  if (v52)
  {
    CFRelease(v52);
    *(void *)(a1 + 872) = 0;
  }
  CFTypeRef v53 = *(const void **)(a1 + 880);
  if (v53)
  {
    CFRelease(v53);
    *(void *)(a1 + 880) = 0;
  }
}

CFTypeRef VTCopyRegistryKeyValueForDeviceIOService(const __CFString *a1, const __CFString *a2)
{
  io_iterator_t existing = 0;
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  MEMORY[0x199705810](&gInitializeDeviceGroupAndCacheOnce, vtInitializeDeviceGroupsAndCache);
  MEMORY[0x1997056B0](gVTIORegistryKeyServiceCache_1);
  CFStringRef Value = (__CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)gVTIORegistryKeyServiceCache_0, a1);
  if (Value)
  {
    CFMutableDictionaryRef Mutable = Value;
    CFRetain(Value);
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryAddValue((CFMutableDictionaryRef)gVTIORegistryKeyServiceCache_0, a1, Mutable);
    if (!Mutable)
    {
      io_object_t v10 = 0;
      CFTypeRef v8 = 0;
      char v9 = 1;
      goto LABEL_10;
    }
  }
  if (CFDictionaryContainsKey(Mutable, a2))
  {
    uint64_t v7 = CFDictionaryGetValue(Mutable, a2);
    if (v7)
    {
      CFTypeRef v8 = CFRetain(v7);
      char v9 = 0;
      io_object_t v10 = 0;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  mach_port_t v11 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v12 = IOServiceNameMatching(CStringPtr);
  if (IOServiceGetMatchingServices(v11, v12, &existing))
  {
LABEL_8:
    char v9 = 0;
    io_object_t v10 = 0;
LABEL_9:
    CFTypeRef v8 = 0;
    goto LABEL_10;
  }
  io_registry_entry_t v14 = IOIteratorNext(existing);
  io_object_t v10 = v14;
  if (!v14)
  {
    char v9 = 0;
    goto LABEL_9;
  }
  CFTypeRef v8 = IORegistryEntrySearchCFProperty(v14, "IOService", a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1u);
  if (!v8)
  {
    if (*MEMORY[0x1E4F1D260]) {
      CFTypeRef v8 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1D260]);
    }
    else {
      CFTypeRef v8 = 0;
    }
  }
  CFDictionaryAddValue(Mutable, a2, v8);
  char v9 = 0;
LABEL_10:
  if (existing) {
    IOObjectRelease(existing);
  }
  if (v10) {
    IOObjectRelease(v10);
  }
  MEMORY[0x1997056C0](gVTIORegistryKeyServiceCache_1);
  if ((v9 & 1) == 0) {
    CFRelease(Mutable);
  }
  return v8;
}

uint64_t vtInitializeDeviceGroupsAndCache()
{
  gVTIORegistryKeyServiceCache_0 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t result = FigSimpleMutexCreate();
  gVTIORegistryKeyServiceCache_1 = result;
  return result;
}

BOOL VTDoesIOServiceSupportRegistryKey(const __CFString *a1, const __CFString *a2)
{
  CFTypeRef v2 = VTCopyRegistryKeyValueForDeviceIOService(a1, a2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  BOOL v4 = FigCFEqual() == 0;
  CFRelease(v3);
  return v4;
}

uint64_t vt_Copy_x422_v210(unsigned char *a1, _OWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, long long *a6, uint64_t *a7, uint64_t *a8)
{
  if (a1)
  {
    MaxLogicalCoreuint64_t Count = FigThreadGetMaxLogicalCoreCount();
    long long v16 = a2[1];
    v27[0] = *a2;
    v27[1] = v16;
    long long v17 = *a6;
    long long v18 = a6[1];
    _OWORD v27[2] = a2[2];
    v27[3] = v17;
    long long v19 = a6[2];
    v27[4] = v18;
    v27[5] = v19;
    uint64_t v20 = a4[1];
    uint64_t v21 = *a3;
    uint64_t v22 = a3[1];
    uint64_t v28 = *a4;
    uint64_t v29 = v21;
    uint64_t v30 = v20;
    uint64_t v31 = v22;
    uint64_t v23 = *a7;
    uint64_t v32 = *a8;
    uint64_t v33 = v23;
    uint64_t v34 = 0;
    BYTE4(v34) = *a1;
    if (a1[1] && (size_t v24 = MaxLogicalCoreCount, MaxLogicalCoreCount >= 2))
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_apply_f(v24, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_x422_v210_internal);
    }
    else
    {
      vt_Copy_x422_v210_internal((uint64_t)v27);
    }
  }
  return 0;
}

uint64_t vt_Copy_x422_v210_internal(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  unint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v50 = *(void *)(a1 + 112);
  uint64_t v51 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v47 = *(void *)(a1 + 120);
  uint64_t v48 = *(void *)(a1 + 104);
  uint64_t v46 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 80);
  unint64_t v6 = v5 + 2;
  if (v5 + 1 >= 0) {
    uint64_t v7 = v5 + 1;
  }
  else {
    uint64_t v7 = v5 + 2;
  }
  int v49 = *(unsigned __int8 *)(a1 + 148);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v8 >= -1) {
    uint64_t v10 = v8 + 1;
  }
  else {
    uint64_t v10 = v8 + 2;
  }
  uint64_t result = FigAtomicIncrement32();
  unint64_t v16 = (result - 1);
  if (v2 > v16)
  {
    uint64_t v17 = v46 + v3 * v4;
    unint64_t v18 = (v7 & 0xFFFFFFFFFFFFFFFELL) / 6;
    unint64_t v19 = (2 * v10) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v20 = v48 + v9 * v51 + v19;
    unint64_t v21 = v47 + v50 * v9 + v19;
    uint64_t v22 = v17 + 24 * v18;
    unint64_t v23 = v5 - 1;
    int16x8_t v24 = 0uLL;
    do
    {
      unsigned int v25 = (const __int16 *)(v20 + v16 * v51);
      CFTypeRef v26 = (const __int16 *)(v21 + v16 * v50);
      uint64_t v27 = v22 + v16 * v4;
      if (v6 >= 3)
      {
        if (v23 >= 2)
        {
          unsigned int v33 = *(_DWORD *)(v27 + 8);
          unint64_t v28 = 2;
        }
        else
        {
          int v29 = *(unsigned __int16 *)v25 >> 6;
          int v30 = *((unsigned __int16 *)v25 + 1) >> 6;
          int v31 = *(unsigned __int16 *)v26;
          int v32 = *((unsigned __int16 *)v26 + 1) >> 6;
          v25 += 2;
          v26 += 2;
          *(_DWORD *)(v27 + 4) = (16 * v31) & 0xFFC00 | *(_DWORD *)(v27 + 4) & 0x3F | ((v29 & 0x3FF) << 20);
          unsigned int v33 = v32 & 0xFFF003FF | ((v30 & 0x3FF) << 10);
          unint64_t v28 = 4;
        }
        int v34 = *(unsigned __int16 *)v25 >> 6;
        int v35 = *((unsigned __int16 *)v25 + 1) >> 6;
        int v36 = *(unsigned __int16 *)v26;
        int v37 = *((unsigned __int16 *)v26 + 1) >> 6;
        v25 += 2;
        v26 += 2;
        *(_DWORD *)(v27 + 8) = (v36 << 14) & 0x3FF00000 | v33 & 0xFFFFF;
        *(_DWORD *)(v27 + 12) = v34 & 0xC00003FF | ((v37 & 0x3FF) << 10) & 0xC00FFFFF | ((v35 & 0x3FF) << 20);
        v27 += 16;
      }
      else
      {
        unint64_t v28 = 0;
      }
      if (v49)
      {
        while (v1 - 23 > v28)
        {
          int16x8x3_t v52 = vld3q_s16(v25);
          v25 += 24;
          *(int16x4_t *)v12.i8 = vmovn_s32((int32x4_t)v52.val[0]);
          int32x4_t v38 = (int32x4_t)vzip1q_s16(vuzp2q_s16(v52.val[0], v52.val[0]), v24);
          *(int16x4_t *)v13.i8 = vmovn_s32((int32x4_t)v52.val[1]);
          int16x8_t v39 = vzip1q_s16(vuzp2q_s16(v52.val[1], v52.val[0]), v24);
          *(int16x4_t *)v14.i8 = vmovn_s32((int32x4_t)v52.val[2]);
          v52.val[0] = vzip1q_s16(vuzp2q_s16(v52.val[2], v52.val[0]), v24);
          v52.val[2] = (int16x8_t)vshlq_n_s32((int32x4_t)vzip1q_s16(v12, v24), 4uLL);
          int16x8x3_t v53 = vld3q_s16(v26);
          v26 += 24;
          v52.val[1] = (int16x8_t)vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vzip1q_s16(v13, v24), 6uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vzip1q_s16(v14, v24), 0xEuLL));
          int16x8_t v12 = (int16x8_t)vshlq_n_s32(v38, 4uLL);
          int16x8_t v40 = (int16x8_t)vshrq_n_u32((uint32x4_t)v39, 6uLL);
          v52.val[0] = (int16x8_t)vorrq_s8((int8x16_t)v40, (int8x16_t)vshlq_n_s32((int32x4_t)v52.val[0], 0xEuLL));
          *(int16x4_t *)v40.i8 = vmovn_s32((int32x4_t)v53.val[0]);
          int16x8_t v13 = vzip1q_s16(vuzp2q_s16(v53.val[0], v52.val[0]), v24);
          *(int16x4_t *)v39.i8 = vmovn_s32((int32x4_t)v53.val[1]);
          int16x8_t v14 = vzip1q_s16(vuzp2q_s16(v53.val[1], v52.val[0]), v24);
          *(int16x4_t *)v15.i8 = vmovn_s32((int32x4_t)v53.val[2]);
          v53.val[0] = vzip1q_s16(vuzp2q_s16(v53.val[2], v52.val[0]), v24);
          v53.val[2] = (int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)vzip1q_s16(v40, v24), 6uLL), (int8x16_t)v52.val[2]), (int8x16_t)vshlq_n_s32((int32x4_t)vzip1q_s16(v39, v24), 0xEuLL));
          int16x8_t v15 = (int16x8_t)vorrq_s8((int8x16_t)v52.val[1], (int8x16_t)vshlq_n_s32((int32x4_t)vzip1q_s16(v15, v24), 4uLL));
          int8x16_t v41 = vorrq_s8(vorrq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v13, 6uLL), (int8x16_t)v12), (int8x16_t)vshlq_n_s32((int32x4_t)v14, 0xEuLL));
          int8x16_t v42 = vorrq_s8((int8x16_t)v52.val[0], (int8x16_t)vshlq_n_s32((int32x4_t)v53.val[0], 4uLL));
          vst4q_f32((float *)v27, *(float32x4x4_t *)(&v15 - 1));
          v27 += 64;
          v28 += 24;
        }
      }
      while (v28 < v1)
      {
        int v44 = *((unsigned __int16 *)v25 + 1) >> 6;
        *(_DWORD *)uint64_t v27 = (*(unsigned __int16 *)v26 >> 6) & 0xC00003FF | (((*(unsigned __int16 *)v25 >> 6) & 0x3FF) << 10) & 0xC00FFFFF | (((*((unsigned __int16 *)v26 + 1) >> 6) & 0x3FF) << 20);
        *(_DWORD *)(v27 + 4) = v44;
        if (v28 + 2 >= v1) {
          break;
        }
        unsigned int v45 = (*((unsigned __int16 *)v26 + 3) >> 6) & 0xFFF003FF | (((*((unsigned __int16 *)v25 + 3) >> 6) & 0x3FF) << 10);
        *(_DWORD *)(v27 + 4) = (*((unsigned __int16 *)v25 + 2) << 14) & 0x3FF00000 | (((*((unsigned __int16 *)v26 + 2) >> 6) & 0x3FF) << 10) | v44;
        *(_DWORD *)(v27 + 8) = v45;
        if (v28 + 4 >= v1) {
          break;
        }
        unsigned int v43 = (*((unsigned __int16 *)v25 + 4) >> 6) & 0xC00003FF | (((*((unsigned __int16 *)v26 + 5) >> 6) & 0x3FF) << 10) & 0xC00FFFFF | (((*((unsigned __int16 *)v25 + 5) >> 6) & 0x3FF) << 20);
        v28 += 6;
        *(_DWORD *)(v27 + 8) = v45 & 0xC00FFFFF | (((*((unsigned __int16 *)v26 + 4) >> 6) & 0x3FF) << 20);
        *(_DWORD *)(v27 + 12) = v43;
        v25 += 6;
        v26 += 6;
        v27 += 16;
      }
      uint64_t result = FigAtomicIncrement32();
      unint64_t v16 = (result - 1);
      int16x8_t v24 = 0uLL;
    }
    while (v2 > v16);
  }
  return result;
}

uint64_t vt_Copy_v210_x422(unsigned char *a1, _OWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, long long *a6, uint64_t *a7, uint64_t *a8)
{
  if (a1)
  {
    MaxLogicalCoreuint64_t Count = FigThreadGetMaxLogicalCoreCount();
    long long v16 = a2[1];
    v27[0] = *a2;
    v27[1] = v16;
    long long v17 = *a6;
    long long v18 = a6[1];
    _OWORD v27[2] = a2[2];
    v27[3] = v17;
    long long v19 = a6[2];
    v27[4] = v18;
    v27[5] = v19;
    uint64_t v20 = *a3;
    uint64_t v28 = *a4;
    uint64_t v29 = v20;
    uint64_t v21 = a8[1];
    uint64_t v22 = *a7;
    uint64_t v23 = a7[1];
    uint64_t v30 = *a8;
    uint64_t v31 = v22;
    uint64_t v32 = v21;
    uint64_t v33 = v23;
    uint64_t v34 = 0;
    BYTE4(v34) = *a1;
    if (a1[1] && (size_t v24 = MaxLogicalCoreCount, MaxLogicalCoreCount >= 2))
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_apply_f(v24, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_v210_x422_internal);
    }
    else
    {
      vt_Copy_v210_x422_internal((uint64_t)v27);
    }
  }
  return 0;
}

uint64_t vt_Copy_v210_x422_internal(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  unint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 88);
  uint64_t v33 = *(void *)(a1 + 112);
  uint64_t v34 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v30 = *(void *)(a1 + 120);
  uint64_t v31 = *(void *)(a1 + 104);
  uint64_t v29 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = v5 + 2;
  if (v5 + 1 >= 0) {
    uint64_t v8 = v5 + 1;
  }
  else {
    uint64_t v8 = v5 + 2;
  }
  int v32 = *(unsigned __int8 *)(a1 + 148);
  uint64_t v9 = *(void *)(a1 + 80);
  if (v9 >= -1) {
    uint64_t v10 = v9 + 1;
  }
  else {
    uint64_t v10 = v9 + 2;
  }
  uint64_t result = FigAtomicIncrement32();
  unint64_t v12 = (result - 1);
  if (v2 > v12)
  {
    unint64_t v13 = v31 + v6 * v34 + 24 * ((v8 & 0xFFFFFFFFFFFFFFFELL) / 6);
    unint64_t v14 = (2 * v10) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v15 = v30 + v3 * v33 + v14;
    unint64_t v16 = v29 + v4 * v3 + v14;
    unint64_t v17 = v5 - 1;
    do
    {
      unint64_t v18 = v13 + v12 * v34;
      long long v19 = (__int16 *)(v15 + v12 * v33);
      uint64_t v20 = (__int16 *)(v16 + v12 * v4);
      if (v7 >= 3)
      {
        unsigned int v23 = *(_DWORD *)(v18 + 8);
        unsigned int v22 = *(_DWORD *)(v18 + 12);
        if (v17 > 1)
        {
          unint64_t v21 = 2;
        }
        else
        {
          unsigned int v24 = *(_DWORD *)(v18 + 4);
          *long long v19 = (v24 >> 14) & 0xFFC0;
          __int16 *v20 = (v24 >> 4) & 0xFFC0;
          v19[1] = (v23 >> 4) & 0xFFC0;
          v20[1] = (_WORD)v23 << 6;
          v19 += 2;
          v20 += 2;
          unint64_t v21 = 4;
        }
        v18 += 16;
        *long long v19 = (_WORD)v22 << 6;
        __int16 *v20 = (v23 >> 14) & 0xFFC0;
        v19[1] = (v22 >> 14) & 0xFFC0;
        v20[1] = (v22 >> 4) & 0xFFC0;
        v19 += 2;
        v20 += 2;
      }
      else
      {
        unint64_t v21 = 0;
      }
      if (v32)
      {
        while (v1 - 23 > v21)
        {
          float32x4x4_t v36 = vld4q_f32((const float *)v18);
          v18 += 64;
          v35.val[0] = (int16x8_t)(*(_OWORD *)&vtrn1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[0], 4uLL), (int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[2], 4uLL)) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0));
          v35.val[1] = (int16x8_t)(*(_OWORD *)&vshlq_n_s32((int32x4_t)vtrn1q_s16((int16x8_t)v36.val[1], (int16x8_t)v36.val[3]), 6uLL) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0));
          v35.val[2] = (int16x8_t)(*(_OWORD *)&vtrn1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[1], 0xEuLL), (int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[3], 0xEuLL)) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0));
          vst3q_s16(v19, v35);
          v19 += 24;
          v35.val[0] = (int16x8_t)(*(_OWORD *)&vshlq_n_s32((int32x4_t)vtrn1q_s16((int16x8_t)v36.val[0], (int16x8_t)v36.val[2]), 6uLL) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0));
          v35.val[1] = (int16x8_t)(*(_OWORD *)&vtrn1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[0], 0xEuLL), (int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[2], 0xEuLL)) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0));
          v35.val[2] = (int16x8_t)(*(_OWORD *)&vtrn1q_s16((int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[1], 4uLL), (int16x8_t)vshrq_n_u32((uint32x4_t)v36.val[3], 4uLL)) & __PAIR128__(0xFFC0FFC0FFC0FFC0, 0xFFC0FFC0FFC0FFC0));
          vst3q_s16(v20, v35);
          v20 += 24;
          v21 += 24;
        }
      }
      while (v21 < v1)
      {
        float v27 = *(float *)v18;
        unsigned int v26 = *(_DWORD *)(v18 + 4);
        *long long v19 = (*(_DWORD *)v18 >> 4) & 0xFFC0;
        __int16 *v20 = LOWORD(v27) << 6;
        v19[1] = (_WORD)v26 << 6;
        v20[1] = (LODWORD(v27) >> 14) & 0xFFC0;
        if (v21 + 2 >= v1) {
          break;
        }
        unsigned int v28 = *(_DWORD *)(v18 + 8);
        v19[2] = (v26 >> 14) & 0xFFC0;
        v20[2] = (v26 >> 4) & 0xFFC0;
        v19[3] = (v28 >> 4) & 0xFFC0;
        v20[3] = (_WORD)v28 << 6;
        if (v21 + 4 >= v1) {
          break;
        }
        unsigned int v25 = *(_DWORD *)(v18 + 12);
        v19[4] = (_WORD)v25 << 6;
        v20[4] = (v28 >> 14) & 0xFFC0;
        v21 += 6;
        v19[5] = (v25 >> 14) & 0xFFC0;
        v20[5] = (v25 >> 4) & 0xFFC0;
        v18 += 16;
        v19 += 6;
        v20 += 6;
      }
      uint64_t result = FigAtomicIncrement32();
      unint64_t v12 = (result - 1);
    }
    while (v2 > v12);
  }
  return result;
}

uint64_t VTGetDefaultYCbCrMatrixWithNoHints()
{
  return *MEMORY[0x1E4F24C48];
}

uint64_t VTGetDefaultColorAttributesWithHints(int a1, uint64_t a2, unint64_t a3, unint64_t a4, void *a5, void *a6, void *a7)
{
  if (a1 == 1785750887 || a1 == 1246774599)
  {
    uint64_t v13 = *MEMORY[0x1E4F24AC8];
    uint64_t v14 = *MEMORY[0x1E4F24BE0];
    uint64_t v15 = *MEMORY[0x1E4F24C40];
    int v16 = 1;
    if (!a2) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = 0;
    if (!a2) {
      goto LABEL_11;
    }
  }
  if (a1 != 1246774599 && a1 != 1785750887)
  {
    if (FigCFEqual())
    {
      unint64_t v17 = (uint64_t *)MEMORY[0x1E4F24C48];
LABEL_19:
      unint64_t v18 = (uint64_t *)MEMORY[0x1E4F24BE0];
      long long v19 = (uint64_t *)MEMORY[0x1E4F24AB0];
LABEL_31:
      uint64_t v13 = *v19;
      uint64_t v14 = *v18;
      goto LABEL_46;
    }
    if (FigCFEqual())
    {
      unint64_t v17 = (uint64_t *)MEMORY[0x1E4F24C30];
      unint64_t v18 = (uint64_t *)MEMORY[0x1E4F24BD0];
LABEL_27:
      long long v19 = (uint64_t *)MEMORY[0x1E4F24AA8];
      goto LABEL_31;
    }
    if (FigCFEqual())
    {
      unint64_t v17 = (uint64_t *)MEMORY[0x1E4F24C40];
      unint64_t v18 = (uint64_t *)MEMORY[0x1E4F24BE0];
    }
    else
    {
      if (FigCFEqual())
      {
        unint64_t v17 = (uint64_t *)MEMORY[0x1E4F24C40];
        goto LABEL_19;
      }
      if (FigCFEqual())
      {
        unint64_t v17 = (uint64_t *)MEMORY[0x1E4F24C48];
        unint64_t v18 = (uint64_t *)MEMORY[0x1E4F24BF8];
      }
      else
      {
        if (!FigCFEqual())
        {
          if (FigCFEqual())
          {
            unint64_t v17 = (uint64_t *)MEMORY[0x1E4F24C30];
            unint64_t v18 = (uint64_t *)MEMORY[0x1E4F24BF8];
          }
          else
          {
            if (!FigCFEqual())
            {
              int v16 = 0;
              if (a3) {
                goto LABEL_12;
              }
LABEL_43:
              if (v16) {
                goto LABEL_47;
              }
              uint64_t v13 = *MEMORY[0x1E4F24AB0];
              uint64_t v14 = *MEMORY[0x1E4F24BE0];
              goto LABEL_45;
            }
            unint64_t v17 = (uint64_t *)MEMORY[0x1E4F24C30];
            unint64_t v18 = (uint64_t *)MEMORY[0x1E4F24BD8];
          }
          goto LABEL_27;
        }
        unint64_t v17 = (uint64_t *)MEMORY[0x1E4F24C48];
        unint64_t v18 = (uint64_t *)MEMORY[0x1E4F24BD8];
      }
    }
    long long v19 = (uint64_t *)MEMORY[0x1E4F24AC0];
    goto LABEL_31;
  }
LABEL_11:
  if (!a3) {
    goto LABEL_43;
  }
LABEL_12:
  if (!a4 || v16) {
    goto LABEL_43;
  }
  if (a3 != 704 || a4 != 576)
  {
    uint64_t v14 = *MEMORY[0x1E4F24BE0];
    if (a3 <= 0x2C0 && a4 <= 0x240)
    {
      uint64_t v13 = *MEMORY[0x1E4F24AC8];
      goto LABEL_23;
    }
    uint64_t v13 = *MEMORY[0x1E4F24AB0];
LABEL_45:
    unint64_t v17 = (uint64_t *)MEMORY[0x1E4F24C48];
    goto LABEL_46;
  }
  uint64_t v13 = *MEMORY[0x1E4F24AA0];
  uint64_t v14 = *MEMORY[0x1E4F24BE0];
LABEL_23:
  unint64_t v17 = (uint64_t *)MEMORY[0x1E4F24C40];
LABEL_46:
  uint64_t v15 = *v17;
LABEL_47:
  if (a5) {
    *a5 = v13;
  }
  if (a6) {
    *a6 = v14;
  }
  if (a7) {
    *a7 = v15;
  }
  return 0;
}

uint64_t VTGetDefaultYCbCrMatrixWithDimensionHints(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = MEMORY[0x1E4F24C48];
  if (a1)
  {
    if (a2)
    {
      uint64_t v2 = MEMORY[0x1E4F24C40];
      if ((a1 != 704 || a2 != 576) && (a2 >= 0x241 || a1 >= 0x2C1)) {
        uint64_t v2 = MEMORY[0x1E4F24C48];
      }
    }
  }
  return *(void *)v2;
}

uint64_t VTGetDefaultYCbCrMatrixWithColorSpaceNameAndDimensionHints(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v4 = 0;
  VTGetDefaultColorAttributesWithHints(0, a1, a2, a3, 0, 0, &v4);
  return v4;
}

uint64_t VTVPParavirtualizedHEVCVideoEncoder_CreateInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"VTHostEncoderID", @"com.apple.videotoolbox.videoencoder.ave.hevc");
  uint64_t InstanceWithSpecification = ParavirtualizedVideoEncoder_CreateInstanceWithSpecification(1752589105, @"paravirtualized:com.apple.videotoolbox.videoencoder.ave.hevc", (uint64_t)Mutable, a2, a3);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return InstanceWithSpecification;
}

uint64_t VTVPParavirtualizedH264VideoEncoder_CreateInstance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"VTHostEncoderID", @"com.apple.videotoolbox.videoencoder.ave.avc");
  uint64_t InstanceWithSpecification = ParavirtualizedVideoEncoder_CreateInstanceWithSpecification(1635148593, @"paravirtualized:com.apple.videotoolbox.videoencoder.ave.avc", (uint64_t)Mutable, a2, a3);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return InstanceWithSpecification;
}

uint64_t getPixelFormatCharacteristics(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t result = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (result)
  {
    CFDictionaryRef v6 = (const __CFDictionary *)result;
    if (a2)
    {
      FigCFDictionaryGetInt32IfPresent();
      *a2 = 0;
    }
    if (a3)
    {
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E4F24E50]);
      if (FigCFEqual())
      {
        char v7 = 8;
      }
      else if (FigCFEqual())
      {
        char v7 = 4;
      }
      else if (FigCFEqual())
      {
        char v7 = 12;
      }
      else
      {
        char v7 = 0;
      }
      if (!FigCFDictionaryGetInt16IfPresent() || !FigCFDictionaryGetInt16IfPresent())
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v6, (const void *)*MEMORY[0x1E4F24EE0]);
        if (Value)
        {
          CFArrayRef v9 = Value;
          CFTypeID v10 = CFGetTypeID(Value);
          if (v10 == CFArrayGetTypeID())
          {
            CFIndex Count = CFArrayGetCount(v9);
            if (Count >= 1)
            {
              CFIndex v12 = Count;
              for (CFIndex i = 0; i != v12; ++i)
              {
                CFArrayGetValueAtIndex(v9, i);
                if (FigCFDictionaryGetInt16IfPresent()
                  && FigCFDictionaryGetInt16IfPresent())
                {
                  break;
                }
              }
            }
          }
        }
      }
      FigCFDictionaryGetBooleanIfPresent();
      *a3 = v7 | 0x10;
    }
    return 1;
  }
  return result;
}

uint64_t VTPixelTransferGraphGetCurrentDimensions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  double v6 = *(double *)(a4 + 108);
  if ((*(unsigned char *)(a4 + 20) & 4) != 0) {
    double v7 = *(double *)(a4 + 108);
  }
  else {
    double v7 = *(double *)(a4 + 116);
  }
  if ((*(unsigned char *)(a4 + 20) & 4) != 0) {
    double v6 = *(double *)(a4 + 116);
  }
  double v8 = v7;
  double v9 = v6;
  if ((*(unsigned char *)(a1 + 4) & 1) == 0)
  {
    double v9 = *(double *)(a4 + 60);
    double v8 = *(double *)(a4 + 68);
  }
  if (*(unsigned char *)(a2 + 4)) {
    double v10 = v7;
  }
  else {
    double v10 = v8;
  }
  if ((*(unsigned char *)(a2 + 4) & 1) == 0) {
    double v6 = v9;
  }
  if ((*(unsigned char *)(a1 + 4) & 4) != 0) {
    double v11 = v9;
  }
  else {
    double v11 = v8;
  }
  if ((*(unsigned char *)(a1 + 4) & 4) == 0) {
    double v8 = v9;
  }
  if ((*(unsigned char *)(a2 + 4) & 4) != 0) {
    double v12 = v6;
  }
  else {
    double v12 = v10;
  }
  if ((*(unsigned char *)(a2 + 4) & 4) != 0) {
    double v6 = v10;
  }
  if (a5)
  {
    if ((*(unsigned char *)(a1 + 4) & 0x20) != 0)
    {
      long long v13 = *(_OWORD *)(a4 + 60);
      *(_OWORD *)a5 = *(_OWORD *)(a4 + 44);
      *(_OWORD *)(a5 + 16) = v13;
      if (!a6) {
        return 0;
      }
      goto LABEL_29;
    }
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(double *)(a5 + 16) = v8;
    *(double *)(a5 + 24) = v11;
  }
  if (!a6) {
    return 0;
  }
LABEL_29:
  if (*(void *)a2 == *(void *)(a4 + 16))
  {
    long long v14 = *(_OWORD *)(a4 + 108);
    *(_OWORD *)a6 = *(_OWORD *)(a4 + 92);
    *(_OWORD *)(a6 + 16) = v14;
  }
  else
  {
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(double *)(a6 + 16) = v6;
    *(double *)(a6 + 24) = v12;
  }
  return 0;
}

uint64_t VTPixelTransferGraphBuildChain(uint64_t a1, char a2, double *a3, unsigned int a4, char a5, double *a6, int a7, int a8, char a9, char a10, char a11, char a12, uint64_t a13, const void *a14, __int16 a15, uint64_t a16, uint64_t a17, char a18, char a19, unsigned __int16 a20,unsigned __int16 a21,uint64_t a22,CFTypeRef *a23)
{
  double v28 = a6[4];
  double v27 = a6[5];
  CFStringRef Value = (const __CFString *)FigCFDictionaryGetValue();
  CFStringRef v30 = (const __CFString *)FigCFDictionaryGetValue();
  LOBYTE(Value) = CVYCbCrMatrixGetIntegerCodePointForString(Value);
  unsigned __int8 IntegerCodePointForString = CVYCbCrMatrixGetIntegerCodePointForString(v30);
  CFTypeRef v143 = 0;
  int v32 = a1;
  uint64_t v142 = a1 | 0x2000000000;
  BYTE5(v142) = (_BYTE)Value;
  unint64_t v141 = a4;
  unsigned __int8 v119 = IntegerCodePointForString;
  BYTE5(v141) = IntegerCodePointForString;
  memset(&v133[16], 0, 96);
  long long v135 = 0u;
  long long v136 = 0u;
  *(_OWORD *)v134 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  *(_OWORD *)int v133 = 0u;
  v133[8] = a2;
  v133[9] = a5;
  v133[10] = (a10 != 0) | (2 * (a11 != 0)) | (4 * (a12 != 0));
  long long v33 = *((_OWORD *)a3 + 1);
  *(_OWORD *)&v133[12] = *(_OWORD *)a3;
  *(_OWORD *)&v133[28] = v33;
  uint64_t v122 = a3;
  *(_OWORD *)&v133[44] = *((_OWORD *)a3 + 2);
  long long v34 = *(_OWORD *)a6;
  long long v35 = *((_OWORD *)a6 + 1);
  *(_OWORD *)&v133[92] = *((_OWORD *)a6 + 2);
  *(_OWORD *)&v133[76] = v35;
  *(_OWORD *)&v133[60] = v34;
  BOOL v37 = a7 == 90 || a7 == 270;
  v133[108] = v37;
  v133[109] = a19;
  v134[1] = a14;
  LOWORD(v135) = a15;
  *((void *)&v135 + 1) = a16;
  *(void *)&long long v136 = a17;
  *(_DWORD *)((char *)&v136 + 9) = __PAIR32__(a21, a20);
  uint64_t v137 = a22;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v131 = 0;
  long long v129 = 0uLL;
  long long v130 = 0uLL;
  long long v128 = 0uLL;
  CFAllocatorRef v38 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int16x8_t v39 = (unint64_t *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 160176, 0);
  bzero(v39, 0x271B0uLL);
  if (!v39)
  {
    int8x16_t v42 = 0;
    uint64_t v43 = 4294954305;
    goto LABEL_28;
  }
  CFAbsoluteTimeGetCurrent();
  if (a13) {
    CFMutableDictionaryRef MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v38, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  v134[0] = MutableCopy;
  if (!MutableCopy)
  {
    int8x16_t v42 = 0;
    uint64_t v43 = 0;
    goto LABEL_20;
  }
  if (!getPixelFormatCharacteristics(a1, (unsigned char *)&v142 + 6, (unsigned char *)&v142 + 7)
    || !getPixelFormatCharacteristics(v141, (unsigned char *)&v141 + 6, (unsigned char *)&v141 + 7))
  {
    int8x16_t v42 = 0;
    goto LABEL_19;
  }
  if ((v142 & 0x200000000000000) == 0) {
    BYTE5(v142) = 0;
  }
  if ((v141 & 0x200000000000000) == 0)
  {
    char v41 = 0;
LABEL_40:
    BYTE5(v141) = v41;
    goto LABEL_41;
  }
  if (BYTE5(v142) && BYTE5(v141) && !a18 && BYTE5(v142) == v119)
  {
    char v41 = 1;
    BYTE5(v142) = 1;
    goto LABEL_40;
  }
LABEL_41:
  if (a7 == 90)
  {
    BYTE4(v141) |= 0xCu;
    double v27 = a6[4];
    double v28 = a6[5];
    uint64_t v48 = (const void **)&kVTRotation_CW90;
LABEL_45:
    int v49 = v122;
    int v50 = a8;
LABEL_46:
    CFDictionarySetValue((CFMutableDictionaryRef)v134[0], @"Rotation", *v48);
    goto LABEL_47;
  }
  if (a7 == 270)
  {
    BYTE4(v141) |= 0x14u;
    double v27 = a6[4];
    double v28 = a6[5];
    uint64_t v48 = (const void **)&kVTRotation_CCW90;
    goto LABEL_45;
  }
  int v49 = v122;
  int v50 = a8;
  if (a7 == 180)
  {
    BYTE4(v141) |= 0x18u;
    uint64_t v48 = (const void **)&kVTRotation_180;
    goto LABEL_46;
  }
LABEL_47:
  uint64_t v51 = (const void **)MEMORY[0x1E4F1CFD0];
  if (v50)
  {
    BYTE4(v141) ^= 0x10u;
    CFDictionarySetValue((CFMutableDictionaryRef)v134[0], @"FlipHorizontalOrientation", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  float v52 = v28;
  if (a9)
  {
    BYTE4(v141) ^= 8u;
    CFDictionarySetValue((CFMutableDictionaryRef)v134[0], @"FlipVerticalOrientation", *v51);
  }
  if (v49[4] != v52 || (float v53 = v27, v49[5] != v53)) {
    BYTE4(v141) |= 1u;
  }
  if (a18) {
    BYTE4(v141) |= 2u;
  }
  if ((v133[10] & 2) != 0)
  {
    LOBYTE(v131) = VTMetalTransferSessionCanAcceptSource1xWithSession(a22, v32);
    if ((v141 & 0x100000000) != 0) {
      BYTE1(v131) = VTMetalTransferSessionCanDoHighQualityScaling(a22, v32);
    }
  }
  unint64_t v54 = v141;
  uint64_t v55 = v142;
  cf[1] = (CFTypeRef)v142;
  *(void *)int v133 = v141;
  unint64_t v56 = (LODWORD(cf[1]) ^ BYTE4(cf[1]) ^ ((unint64_t)cf[1] >> 36) & 0xFF0) % 0x4E35;
  uint64_t v57 = v39[v56];
  if (v57)
  {
    while ((v142 & 0xFF00FFFFFFFFLL | ((unint64_t)BYTE4(v142) << 32)) != (*(void *)v57 & 0xFFFFFFFFFFFFLL))
    {
      if (v56 + 1 <= 0x4E34) {
        ++v56;
      }
      else {
        unint64_t v56 = 0;
      }
      uint64_t v57 = v39[v56];
      if (!v57) {
        goto LABEL_65;
      }
    }
  }
  else
  {
LABEL_65:
    unint64_t v58 = v39[20021] + 1;
    v39[20021] = v58;
    if (v58 > 0x4E34 || (uint64_t v59 = (char *)CFAllocatorAllocate(v38, 80, 0)) == 0)
    {
      int8x16_t v42 = 0;
      uint64_t v43 = 0;
      double v127 = 0;
      goto LABEL_20;
    }
    uint64_t v57 = (uint64_t)v59;
    *(void *)uint64_t v59 = v55;
    *(_OWORD *)(v59 + 24) = 0u;
    *(_OWORD *)(v59 + 40) = 0u;
    *((void *)v59 + 1) = -1;
    *((void *)v59 + 2) = 0;
    *((void *)v59 + 8) = 0;
    *((void *)v59 + 9) = 0;
    v39[v56] = (unint64_t)v59;
    unint64_t v54 = v141;
  }
  double v127 = (unsigned char *)v57;
  unint64_t v60 = (v54 ^ BYTE4(v54) ^ (v54 >> 36) & 0xFF0) % 0x4E35;
  uint64_t v61 = v39[v60];
  if (v61)
  {
    while ((v54 & 0xFF00FFFFFFFFLL | ((unint64_t)BYTE4(v54) << 32)) != (*(void *)v61 & 0xFFFFFFFFFFFFLL))
    {
      if (v60 + 1 <= 0x4E34) {
        ++v60;
      }
      else {
        unint64_t v60 = 0;
      }
      uint64_t v61 = v39[v60];
      if (!v61) {
        goto LABEL_74;
      }
    }
  }
  else
  {
LABEL_74:
    unint64_t v62 = v39[20021] + 1;
    v39[20021] = v62;
    if (v62 > 0x4E34 || (float v63 = (char *)CFAllocatorAllocate(v38, 80, 0)) == 0)
    {
      int8x16_t v42 = 0;
      uint64_t v43 = 0;
      goto LABEL_20;
    }
    uint64_t v61 = (uint64_t)v63;
    *(void *)float v63 = v54;
    *(_OWORD *)(v63 + 24) = 0u;
    *(_OWORD *)(v63 + 40) = 0u;
    *((void *)v63 + 1) = -1;
    *((void *)v63 + 2) = 0;
    *((void *)v63 + 8) = 0;
    *((void *)v63 + 9) = 0;
    v39[v60] = (unint64_t)v63;
  }
  if (a10
    && (memset(&v144[2], 0, 40), VTPixelTransferSessionGetDynamicServiceList())
    && (uint64_t DynamicServiceList = VTPixelTransferSessionGetDynamicServiceList()) != 0)
  {
    uint64_t v65 = DynamicServiceList;
    while (1)
    {
      uint64_t v66 = *(void *)v65;
      if (*(uint64_t *)v65 >= 1)
      {
        float v67 = *(int **)(v65 + 8);
        while (1)
        {
          int v68 = *v67++;
          if (v68 == *(_DWORD *)v57) {
            break;
          }
          if (!--v66) {
            goto LABEL_90;
          }
        }
        uint64_t v69 = *(void *)(v65 + 16);
        if (v69 >= 1) {
          break;
        }
      }
LABEL_90:
      uint64_t v65 = *(void *)(v65 + 72);
      if (!v65) {
        goto LABEL_91;
      }
    }
    uint64_t v70 = *(int **)(v65 + 24);
    while (1)
    {
      int v71 = *v70;
      v70 += 2;
      if (v71 == *(_DWORD *)v61) {
        break;
      }
      if (!--v69) {
        goto LABEL_90;
      }
    }
    if ((*(_DWORD *)(v65 + 32) & 8) != 0) {
      int v114 = 1;
    }
    else {
      int v114 = 4;
    }
    DWORD2(v144[2]) = v114;
    *(_OWORD *)allocatora = *(_OWORD *)(v65 + 48);
    *(_OWORD *)((char *)v144 + 8) = *(_OWORD *)allocatora;
    uint64_t v115 = *(void *)(v65 + 64);
    *(void *)&v144[0] = vtPixelTransferAppendDynamicNodeCallback;
    *((void *)&v144[1] + 1) = v115;
    v144[3] = vdupq_n_s64(0x64uLL);
    LOBYTE(v144[4]) = 0;
    uint64_t v116 = vtPixelTransferGraphEdgeCost(v57, v61, (uint64_t)v144, (uint64_t)cf);
    unint64_t v73 = v116;
    if (v116 == -1)
    {
      int v72 = 0;
    }
    else
    {
      *(void *)(v61 + 8) = v116;
      *(void *)(v61 + 16) = vtPixelTransferAppendDynamicNodeCallback;
      *(CFAllocatorRef *)(v61 + 24) = allocatora[0];
      *(void *)(v61 + 32) = *(void *)(v65 + 56);
      *(void *)(v61 + 40) = *(void *)(v65 + 64);
      *(unsigned char *)(v61 + 56) = 0;
      *(void *)(v61 + 64) = v57;
      int v72 = 1;
    }
  }
  else
  {
LABEL_91:
    int v72 = 0;
    unint64_t v73 = -1;
  }
  uint64_t allocator = (uint64_t)v38;
  if (!a11) {
    goto LABEL_102;
  }
  memset((char *)v144 + 8, 0, 64);
  int v74 = (double *)&v133[92];
  if ((*(unsigned char *)(v61 + 4) & 1) == 0) {
    int v74 = (double *)&v133[44];
  }
  unint64_t v75 = (unint64_t)*v74;
  CFTypeRef v76 = (double *)&v133[52];
  if (*(unsigned char *)(v61 + 4)) {
    CFTypeRef v76 = (double *)&v133[100];
  }
  if ((unint64_t)*v76 * v75 >= 0x9C41
    && VTMetalTransferSessionCanTransferWithSession(v137, *(_DWORD *)v57, *(_DWORD *)v61, *(unsigned char *)(v61 + 4) & 1, 0)
    && (*(void *)&v144[0] = vtPixelTransferAppendMetalNodeCallback,
        DWORD2(v144[2]) = 2,
        v144[3] = vdupq_n_s64(0xC8uLL),
        LOBYTE(v144[4]) = 0,
        unint64_t v77 = vtPixelTransferGraphEdgeCost(v57, v61, (uint64_t)v144, (uint64_t)cf),
        v77 != -1))
  {
    if (v77 < v73)
    {
      *(void *)(v61 + 8) = v77;
      *(void *)(v61 + 16) = vtPixelTransferAppendMetalNodeCallback;
      *(unsigned char *)(v61 + 56) = 0;
      *(void *)(v61 + 64) = v57;
    }
  }
  else
  {
LABEL_102:
    if (!v72)
    {
      if ((v133[10] & 2) != 0) {
        VTMetalTransferSessionInitializeDestinationArray(cf);
      }
      FigPriorityQueueCreate();
      if (!v143)
      {
        uint64_t v43 = FigSignalErrorAt();
        int8x16_t v42 = 0;
        goto LABEL_20;
      }
      char v95 = 0;
      *((void *)v127 + 1) = -1;
      CFTypeRef v96 = v39 + 20021;
      do
      {
        unint64_t v126 = 0;
        memset(v144, 0, 72);
        LOBYTE(v128) = 0;
        *((void *)&v128 + 1) = VTPixelTransferSessionGetDynamicServiceList();
        LODWORD(v129) = 0;
        WORD2(v129) = 0;
        long long v130 = 0uLL;
        *((void *)&v129 + 1) = 0;
        if ((v133[10] & 2) != 0)
        {
          LOBYTE(v131) = VTMetalTransferSessionCanAcceptSource1xWithSession(a22, *(_DWORD *)v127);
          if ((BYTE4(v141) ^ BYTE4(v126))) {
            BYTE1(v131) = VTMetalTransferSessionCanDoHighQualityScaling(a22, *(_DWORD *)v127);
          }
        }
        while (vtPixelTransferGraphNextEdgeIterator(v127, (uint64_t)&v126, (uint64_t)v144, (uint64_t)&v128, cf))
        {
          CFTypeRef v97 = v127;
          uint64_t v98 = vtPixelTransferGraphEdgeCost((uint64_t)v127, (uint64_t)&v126, (uint64_t)v144, (uint64_t)cf);
          unint64_t v99 = v98;
          if ((v95 & 1) == 0
            || ((uint64_t v100 = *((void *)v97 + 1), !__CFADD__(v98, v100)) ? (v101 = 0) : (v101 = 1),
                (v102 = __CFADD__(v100, v98), v103 = v100 + v98, v102) ? (unint64_t v99 = -1) : (unint64_t v99 = v103),
                (v101 & 1) == 0))
          {
            if (v99 != -1)
            {
              unint64_t v104 = v126;
              unint64_t v105 = (v126 ^ BYTE4(v126) ^ (v126 >> 36) & 0xFF0) % 0x4E35;
              v106 = (char *)v39[v105];
              if (v106)
              {
                while ((v126 & 0xFF00FFFFFFFFLL | ((unint64_t)BYTE4(v126) << 32)) != (*(void *)v106 & 0xFFFFFFFFFFFFLL))
                {
                  if (v105 + 1 <= 0x4E34) {
                    ++v105;
                  }
                  else {
                    unint64_t v105 = 0;
                  }
                  v106 = (char *)v39[v105];
                  if (!v106) {
                    goto LABEL_139;
                  }
                }
                unint64_t v109 = *((void *)v106 + 1);
              }
              else
              {
LABEL_139:
                unint64_t v107 = *v96 + 1;
                *CFTypeRef v96 = v107;
                if (v107 > 0x4E34 || (v108 = (char *)CFAllocatorAllocate(v38, 80, 0)) == 0)
                {
                  int8x16_t v42 = 0;
                  uint64_t v43 = 0;
                  goto LABEL_20;
                }
                v106 = v108;
                *(void *)v108 = v104;
                *(_OWORD *)(v108 + 24) = 0u;
                *(_OWORD *)(v108 + 40) = 0u;
                unint64_t v109 = -1;
                *((void *)v108 + 1) = -1;
                *((void *)v108 + 2) = 0;
                *((void *)v108 + 8) = 0;
                *((void *)v108 + 9) = 0;
                v39[v105] = (unint64_t)v108;
              }
              if (v99 < v109)
              {
                uint64_t v110 = *((void *)v106 + 9);
                uint64_t v111 = *(void *)&v144[0];
                *((void *)v106 + 1) = v99;
                *((void *)v106 + 2) = v111;
                long long v112 = *(_OWORD *)((char *)&v144[1] + 8);
                *(_OWORD *)(v106 + 24) = *(_OWORD *)((char *)v144 + 8);
                *(_OWORD *)(v106 + 40) = v112;
                v106[56] = v144[4] & 1;
                *((void *)v106 + 8) = v127;
                if (v110) {
                  FigPriorityQueueTokenUpdatePriority();
                }
                else {
                  FigPriorityQueueInsertItemAndCreateUpdateToken();
                }
              }
            }
          }
          memset(v144, 0, 72);
        }
        FigPriorityQueueGetItem();
        if (!v127 || v127 == (unsigned char *)v61) {
          break;
        }
        BOOL v113 = (const void *)*((void *)v127 + 9);
        if (v113)
        {
          CFRelease(v113);
          *((void *)v127 + 9) = 0;
        }
        FigPriorityQueueRemoveItem();
        char v95 = 1;
      }
      while (v127);
    }
  }
  CFAbsoluteTimeGetCurrent();
  if (!*(void *)(v61 + 64))
  {
    int8x16_t v42 = 0;
    goto LABEL_156;
  }
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = v61;
  do
  {
    uint64_t v80 = *(void *)(v80 + 64);
    ++v79;
    v78 += 7;
  }
  while (v80 != v57);
  CFTypeRef v81 = CFAllocatorAllocate(v38, v78 * 8 + 56, 0);
  if (v81)
  {
    *CFTypeRef v81 = &v142;
    int v82 = &v81[v78];
    v82[1] = *(void *)(v57 + 16);
    long long v83 = *(_OWORD *)(v57 + 40);
    *((_OWORD *)v82 + 1) = *(_OWORD *)(v57 + 24);
    *((_OWORD *)v82 + 2) = v83;
    *((unsigned char *)v82 + 48) = *(unsigned char *)(v57 + 56);
    uint64_t v84 = (int)v79;
    do
    {
      CFTypeRef v85 = &v81[7 * v84];
      uint64_t *v85 = v61;
      --v84;
      *(v85 - 6) = *(void *)(v61 + 16);
      long long v86 = *(_OWORD *)(v61 + 24);
      *(_OWORD *)(v85 - 3) = *(_OWORD *)(v61 + 40);
      *(_OWORD *)(v85 - 5) = v86;
      *((unsigned char *)v85 - 8) = *(unsigned char *)(v61 + 56);
      uint64_t v61 = *(void *)(v61 + 64);
    }
    while (v61 != v57);
    uint64_t v87 = 0;
    uint64_t v123 = v81;
    CFTypeRef v88 = v81;
    uint64_t v89 = v79;
    while (v89)
    {
      memset((char *)&v144[2] + 8, 0, 32);
      long long v90 = *((_OWORD *)v88 + 2);
      *(_OWORD *)((char *)v144 + 8) = *((_OWORD *)v88 + 1);
      *(_OWORD *)((char *)&v144[1] + 8) = v90;
      int v91 = (uint64_t (*)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, CFTypeRef *))v88[1];
      *(void *)&v144[0] = v91;
      LOBYTE(v144[4]) = *((unsigned char *)v88 + 48);
      uint64_t v92 = *v88;
      uint64_t v93 = v88[7];
      if (!cf[0])
      {
        uint64_t v94 = VTPixelTransferChainCreate(allocator, (uint64_t *)cf);
        if (v94) {
          goto LABEL_115;
        }
        int v91 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, CFTypeRef *))&v144[0];
      }
      uint64_t v94 = v91(v92, v93, v144, v87, v79, cf);
      --v89;
      v88 += 7;
      uint64_t v87 = (v87 + 1);
      if (v94)
      {
LABEL_115:
        uint64_t v43 = v94;
        int8x16_t v42 = v123;
        CFAllocatorRef v38 = (const __CFAllocator *)allocator;
        goto LABEL_20;
      }
    }
    int8x16_t v42 = v123;
    CFAllocatorRef v38 = (const __CFAllocator *)allocator;
LABEL_156:
    if (VTPixelTransferChainHasNodes((const __CFArray *)cf[0]))
    {
      uint64_t v43 = 0;
      *a23 = cf[0];
      cf[0] = 0;
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v43 = 4294954391;
    goto LABEL_20;
  }
  int8x16_t v42 = 0;
  uint64_t v43 = 4294954305;
LABEL_20:
  for (uint64_t i = 0; i != 20021; ++i)
  {
    unsigned int v45 = (void *)v39[i];
    if (v45)
    {
      uint64_t v46 = (const void *)v45[9];
      if (v46)
      {
        CFRelease(v46);
        *(void *)(v39[i] + 72) = 0;
        unsigned int v45 = (void *)v39[i];
      }
      CFAllocatorDeallocate(v38, v45);
    }
  }
  CFAllocatorDeallocate(v38, v39);
  if (v143) {
    CFRelease(v143);
  }
LABEL_28:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v134[0]) {
    CFRelease(v134[0]);
  }
  VTMetalTransferSessionCleanupDestinationArray((uint64_t)cf);
  if (v42) {
    CFAllocatorDeallocate(v38, v42);
  }
  return v43;
}

uint64_t nodeInfoCompare(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  BOOL v4 = v2 >= v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return v5;
  }
  else {
    return -1;
  }
}

uint64_t vtPixelTransferGraphNextEdgeIterator(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  char v10 = a5[26];
  if ((v10 & 1) != 0 && !*(unsigned char *)a4)
  {
    unint64_t v17 = *(unint64_t **)(a4 + 8);
    if (!v17)
    {
LABEL_32:
      *(unsigned char *)a4 = 1;
      *(void *)(a4 + 32) = 0;
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 24) = 0;
      char v10 = a5[26];
      if ((v10 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    unint64_t v18 = (unint64_t *)(a4 + 24);
    while (1)
    {
      unint64_t v19 = *v18;
      while (1)
      {
        unint64_t v20 = v17[1];
        if (*(_DWORD *)(v20 + 4 * v19) == *(_DWORD *)a1) {
          break;
        }
        unint64_t v21 = *v17;
        unint64_t v22 = v19 + 1;
        while (1)
        {
          unint64_t *v18 = v22;
          if (v22 >= v21) {
            break;
          }
          int v23 = *(_DWORD *)(v20 + 4 * v22++);
          if (v23 == *(_DWORD *)a1) {
            goto LABEL_25;
          }
        }
        unint64_t v19 = 0;
        unint64_t v17 = (unint64_t *)v17[9];
        *(void *)(a4 + 8) = v17;
        unint64_t *v18 = 0;
        *(void *)(a4 + 32) = 0;
        if (!v17) {
          goto LABEL_32;
        }
      }
LABEL_25:
      if (*(void *)(a4 + 40) <= 0x3FuLL) {
        break;
      }
LABEL_30:
      unint64_t v26 = *(void *)(a4 + 32) + 1;
      *(void *)(a4 + 32) = v26;
      *(void *)(a4 + 40) = 0;
      if (v26 >= v17[2])
      {
        unint64_t *v18 = 0;
        *(void *)(a4 + 32) = 0;
        unint64_t v17 = (unint64_t *)v17[9];
        *(void *)(a4 + 8) = v17;
        if (!v17) {
          goto LABEL_32;
        }
      }
    }
    while (1)
    {
      char v24 = a1[4] & 0x1F;
      *(unsigned char *)(a2 + 4) = v24;
      uint64_t v25 = *(void *)(a4 + 40);
      if ((v25 & ~a5[20] & 7) == 0 && (a1[4] & v25 & 7) == 0) {
        break;
      }
      *(void *)(a4 + 40) = v25 + 1;
      if ((unint64_t)(v25 + 1) >= 0x40)
      {
        unint64_t v17 = *(unint64_t **)(a4 + 8);
        goto LABEL_30;
      }
    }
    if (v25)
    {
      v24 |= 1u;
      *(unsigned char *)(a2 + 4) = v24;
      uint64_t v25 = *(void *)(a4 + 40);
      if ((v25 & 2) == 0)
      {
LABEL_42:
        if ((v25 & 4) == 0) {
          goto LABEL_43;
        }
        goto LABEL_50;
      }
    }
    else if ((v25 & 2) == 0)
    {
      goto LABEL_42;
    }
    v24 |= 2u;
    *(unsigned char *)(a2 + 4) = v24;
    uint64_t v25 = *(void *)(a4 + 40);
    if ((v25 & 4) == 0)
    {
LABEL_43:
      if ((v25 & 8) == 0) {
        goto LABEL_44;
      }
      goto LABEL_51;
    }
LABEL_50:
    v24 |= 4u;
    *(unsigned char *)(a2 + 4) = v24;
    uint64_t v25 = *(void *)(a4 + 40);
    if ((v25 & 8) == 0)
    {
LABEL_44:
      if ((v25 & 0x10) == 0) {
        goto LABEL_46;
      }
      goto LABEL_45;
    }
LABEL_51:
    v24 ^= 8u;
    *(unsigned char *)(a2 + 4) = v24;
    uint64_t v25 = *(void *)(a4 + 40);
    if ((v25 & 0x10) == 0)
    {
LABEL_46:
      *(void *)(a4 + 40) = v25 + 1;
      *(_DWORD *)a2 = *(_DWORD *)(*(void *)(*(void *)(a4 + 8) + 24) + 8 * *(void *)(a4 + 32));
      *(unsigned char *)(a2 + 6) = *(unsigned char *)(*(void *)(*(void *)(a4 + 8) + 24) + 8 * *(void *)(a4 + 32) + 4);
      char v27 = *(unsigned char *)(*(void *)(*(void *)(a4 + 8) + 24) + 8 * *(void *)(a4 + 32) + 5);
      *(unsigned char *)(a2 + 7) = v27;
      if ((v27 & 2) == 0)
      {
        char v28 = 0;
LABEL_104:
        *(unsigned char *)(a2 + 5) = v28;
        uint64_t v52 = *(void *)(a4 + 8);
        if ((*(_DWORD *)(v52 + 32) & 8) != 0) {
          int v53 = 1;
        }
        else {
          int v53 = 4;
        }
        *(_DWORD *)(a3 + 40) = v53;
        uint64_t v54 = *(void *)(v52 + 48);
        *(void *)a3 = vtPixelTransferAppendDynamicNodeCallback;
        *(void *)(a3 + 8) = v54;
        *(void *)(a3 + 16) = *(void *)(*(void *)(a4 + 8) + 56);
        *(void *)(a3 + 24) = *(void *)(*(void *)(a4 + 8) + 64);
        *(int64x2_t *)(a3 + 48) = vdupq_n_s64(0x64uLL);
        *(unsigned char *)(a3 + 64) = 0;
        return 1;
      }
      if ((a5[23] & 3) == 1)
      {
        if ((a1[7] & 2) == 0)
        {
          char v28 = 1;
          goto LABEL_104;
        }
        uint64_t v51 = a1 + 5;
      }
      else
      {
        uint64_t v51 = a5 + 21;
      }
      char v28 = *v51;
      goto LABEL_104;
    }
LABEL_45:
    *(unsigned char *)(a2 + 4) = v24 ^ 0x10;
    uint64_t v25 = *(void *)(a4 + 40);
    goto LABEL_46;
  }
  if ((a5[26] & 2) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  if (!*(unsigned char *)(a4 + 16))
  {
    uint64_t result = VTPixelTransferSessionGetNextMetalBlitter(a1, a2, a3, a4, (uint64_t)a5);
    if (result) {
      return result;
    }
    *(unsigned char *)(a4 + 16) = 1;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    *(void *)(a4 + 24) = 0;
    char v10 = a5[26];
  }
LABEL_5:
  if ((v10 & 4) == 0) {
    return 0;
  }
  if (!*(unsigned char *)(a4 + 17))
  {
    uint64_t result = VTPixelTransferSessionGetNextSoftwareBlitter((uint64_t)a1, a2, a3, a4);
    if (result) {
      return result;
    }
    *(unsigned char *)(a4 + 17) = 1;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    *(void *)(a4 + 24) = 0;
  }
  if (!*(unsigned char *)(a4 + 18))
  {
    uint64_t result = VTPixelTransferSessionGetNextVImageBlitter((uint64_t)a1, a2, a3, a4);
    if (result) {
      return result;
    }
    *(unsigned char *)(a4 + 18) = 1;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    *(void *)(a4 + 24) = 0;
  }
  if (!*(unsigned char *)(a4 + 19))
  {
    double v12 = (void *)(a4 + 24);
    unint64_t v13 = *(void *)(a4 + 24);
    if (v13 <= 0x2E)
    {
      unint64_t v14 = v13 + 1;
      uint64_t v15 = (int *)((char *)&sSrcColorOptimizedPixelFormatArray + 8 * v13);
      while (1)
      {
        int v16 = *v15;
        v15 += 2;
        if (v16 == *(_DWORD *)a1) {
          break;
        }
        void *v12 = v14++;
        if (v14 == 48) {
          goto LABEL_64;
        }
      }
      unint64_t v29 = *(void *)(a4 + 32);
      if (v29 <= 0x34)
      {
        BOOL v30 = *(void *)(a4 + 40) < 3uLL;
        while (!v30)
        {
LABEL_63:
          *(void *)(a4 + 32) = ++v29;
          *(void *)(a4 + 40) = 0;
          BOOL v30 = 1;
          if (v29 >= 0x35) {
            goto LABEL_64;
          }
        }
        while (1)
        {
          char v31 = a1[4] & 0x1F;
          *(unsigned char *)(a2 + 4) = v31;
          uint64_t v32 = *(void *)(a4 + 40);
          if ((v32 & ~(unint64_t)a5[20]) == 0 && (v32 & a1[4]) == 0) {
            break;
          }
          unint64_t v33 = v32 + 1;
          *(void *)(a4 + 40) = v33;
          if (v33 >= 3)
          {
            unint64_t v29 = *(void *)(a4 + 32);
            goto LABEL_63;
          }
        }
        if ((v32 & 2) != 0)
        {
          *(unsigned char *)(a2 + 4) = v31 | 2;
          uint64_t v32 = *(void *)(a4 + 40);
        }
        int v55 = *((_DWORD *)&sDstColorOptimizedPixelFormatArray + 2 * *(void *)(a4 + 32));
        *(void *)(a4 + 40) = v32 + 1;
        *(_DWORD *)a2 = v55;
        *(unsigned char *)(a2 + 6) = *((unsigned char *)&sDstColorOptimizedPixelFormatArray + 8 * *(void *)(a4 + 32) + 4);
        unint64_t v56 = *(void *)(a4 + 32);
        *(unsigned char *)(a2 + 7) = *((unsigned char *)&sDstColorOptimizedPixelFormatArray + 8 * v56 + 5);
        BOOL v57 = *(_DWORD *)a1 == v55 && ((a1[4] >> 5) & 1) == 0;
        if (v56 < 0xA)
        {
          char v58 = 0;
LABEL_123:
          *(unsigned char *)(a2 + 5) = v58;
          *(void *)a3 = vtPixelTransferAppendColorProcessingBlitterNodeCallback;
          *(_DWORD *)(a3 + 40) = 4;
          *(int64x2_t *)(a3 + 48) = vdupq_n_s64(0x136uLL);
          *(unsigned char *)(a3 + 64) |= v57;
          return 1;
        }
        if ((a5[23] & 3) == 1)
        {
          if ((a1[7] & 2) == 0)
          {
            char v58 = 1;
            goto LABEL_123;
          }
          uint64_t v59 = a1 + 5;
        }
        else
        {
          uint64_t v59 = a5 + 21;
        }
        char v58 = *v59;
        goto LABEL_123;
      }
    }
LABEL_64:
    *(_DWORD *)a2 = 0;
    *(void *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)(a4 + 19) = 1;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    void *v12 = 0;
  }
  if (*(unsigned char *)(a4 + 20)) {
    goto LABEL_79;
  }
  unint64_t v34 = *(void *)(a4 + 32);
  if (v34)
  {
    if (v34 > 0x66)
    {
LABEL_78:
      *(_DWORD *)a2 = 0;
      *(void *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(unsigned char *)(a4 + 20) = 1;
      *(void *)(a4 + 32) = 0;
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 24) = 0;
LABEL_79:
      if ((a5[20] & 0x1C) == 0 || *(unsigned char *)(a4 + 21)) {
        return 0;
      }
      unint64_t v41 = *(void *)(a4 + 32);
      if (v41 > 0xB3)
      {
LABEL_82:
        uint64_t result = 0;
        *(_DWORD *)a2 = 0;
        *(void *)(a3 + 64) = 0;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        *(unsigned char *)(a4 + 21) = 1;
        *(void *)(a4 + 32) = 0;
        *(void *)(a4 + 40) = 0;
        *(void *)(a4 + 24) = 0;
        return result;
      }
      unint64_t v42 = v41 + 1;
      uint64_t v43 = (char *)&vtRotationBlitterTable + 40 * v41;
      while (1)
      {
        int v44 = *(_DWORD *)v43;
        if (*(_DWORD *)v43 == *(_DWORD *)a1) {
          break;
        }
        *(void *)(a4 + 32) = v42++;
        v43 += 40;
        if (v42 == 181)
        {
          int v44 = 1983000886;
          if (*(_DWORD *)a1 != 1983000886) {
            goto LABEL_82;
          }
          uint64_t v43 = (char *)&unk_1EE4AFDB8;
          break;
        }
      }
      char v45 = v43[16];
      if (v45) {
        char v45 = ((a1[4] >> 5) & 1) == 0;
      }
      *(_DWORD *)a2 = v44;
      *(_WORD *)(a2 + 6) = *((_WORD *)v43 + 2);
      *(unsigned char *)(a2 + 5) = a1[5];
      unsigned int v46 = a1[4];
      LOBYTE(v47) = v46 & 0xDF;
      *(unsigned char *)(a2 + 4) = v46 & 0xDF;
      char v48 = v43[6];
      if ((v48 & 4) != 0)
      {
        unsigned int v47 = ((2 * v46) & 0x10 | v46 & 0xFFFFFFC7 | (v46 >> 1) & 8) ^ 4;
        *(unsigned char *)(a2 + 4) = ((2 * v46) & 0x10 | v46 & 0xC7 | (v46 >> 1) & 8) ^ 4;
      }
      if ((v48 & 0x18) != 0)
      {
        if ((v48 & 0x10) != 0) {
          LOBYTE(v47) = v47 ^ 0x10;
        }
        if ((v48 & 8) != 0) {
          char v49 = v47 ^ 8;
        }
        else {
          char v49 = v47;
        }
        *(unsigned char *)(a2 + 4) = v49;
      }
      uint64_t v50 = *((void *)v43 + 1);
      *(void *)a3 = VTPixelTransferAppendSoftwareRotationNodeCallback;
      *(void *)(a3 + 8) = v50;
      *(_DWORD *)(a3 + 40) = 4;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)(v43 + 24);
      *(unsigned char *)(a3 + 64) |= v45;
      goto LABEL_100;
    }
    long long v35 = &VTPixelGraphScalerTable[32 * v34];
  }
  else
  {
    long long v35 = VTPixelGraphScalerTable;
    uint64_t v36 = 1;
    while (*(_DWORD *)v35 != *(_DWORD *)a1)
    {
      *(void *)(a4 + 32) = v36++;
      v35 += 32;
      if (v36 == 104)
      {
        long long v35 = aAfgrafgr;
        break;
      }
    }
  }
  if (*(_DWORD *)v35 != *(_DWORD *)a1) {
    goto LABEL_78;
  }
  *(_DWORD *)a2 = *((_DWORD *)v35 + 1);
  *(unsigned char *)(a2 + 6) = v35[8];
  *(unsigned char *)(a2 + 7) = v35[10];
  if (a5[20]) {
    char v37 = a1[4] & 0x1E | 1;
  }
  else {
    char v37 = a1[4] & 0x1F;
  }
  *(unsigned char *)(a2 + 4) = v37;
  *(unsigned char *)(a2 + 5) = a1[5];
  uint64_t v38 = *((void *)v35 + 2);
  *(void *)a3 = vtPixelTransferAppendScalerNodeCallback;
  *(void *)(a3 + 8) = v38;
  *(_DWORD *)(a3 + 40) = 4;
  uint64_t v39 = *((void *)v35 + 3);
  *(void *)&long long v40 = v39;
  *((void *)&v40 + 1) = HIDWORD(v39);
  *(_OWORD *)(a3 + 48) = v40;
  *(unsigned char *)(a3 + 64) = 0;
LABEL_100:
  ++*(void *)(a4 + 32);
  return 1;
}

uint64_t vtPixelTransferGraphEdgeCost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(unsigned __int8 *)(a2 + 4);
  uint64_t v5 = 60;
  if (v4) {
    uint64_t v5 = 108;
  }
  uint64_t v6 = 68;
  if (v4) {
    uint64_t v6 = 116;
  }
  int v7 = *(_DWORD *)(a3 + 40);
  if ((v7 & *(unsigned char *)(a4 + 26)) == 0) {
    return -1;
  }
  unsigned int v8 = *(unsigned __int8 *)(a2 + 6);
  unint64_t v9 = (unint64_t)*(double *)(a4 + v5);
  unint64_t v10 = (unint64_t)*(double *)(a4 + v6);
  if ((v7 - 1) > 1) {
    goto LABEL_27;
  }
  if ((a4 + 8 == a1
     || *(_DWORD *)(a4 + 8) == *(_DWORD *)a1
     && *(unsigned __int8 *)(a4 + 12) == *(unsigned __int8 *)(a1 + 4)
     && *(unsigned __int8 *)(a4 + 13) == *(unsigned __int8 *)(a1 + 5))
    && !*(unsigned char *)(a4 + 24)
    || (a4 + 16 == a2
     || *(_DWORD *)(a4 + 16) == *(_DWORD *)a2
     && *(unsigned __int8 *)(a4 + 20) == v4
     && *(unsigned __int8 *)(a4 + 21) == *(unsigned __int8 *)(a2 + 5))
    && !*(unsigned char *)(a4 + 25))
  {
    return -1;
  }
  if (v7 == 1)
  {
    uint64_t v11 = 0;
    if ((v4 & 2) == 0 || (*(unsigned char *)(a1 + 4) & 2) != 0)
    {
LABEL_28:
      if (*(unsigned char *)(a1 + 6)) {
        goto LABEL_29;
      }
      goto LABEL_55;
    }
    if (!*(unsigned char *)(a4 + 125))
    {
LABEL_27:
      uint64_t v11 = 0;
      goto LABEL_28;
    }
    return -1;
  }
  if (!*(void *)(a4 + 176)) {
    return -1;
  }
  unint64_t v12 = v10 * v9;
  if (v10 * v9 > 0x9C40) {
    goto LABEL_27;
  }
  if (v4)
  {
    uint64_t v11 = 630 * v12;
    if (*(unsigned char *)(a1 + 6))
    {
LABEL_29:
      if (*(unsigned char *)(a2 + 6) && *(unsigned __int8 *)(a1 + 6) > v8)
      {
        unsigned int v13 = *(unsigned __int8 *)(a4 + 14);
        unsigned int v14 = *(unsigned __int8 *)(a4 + 22);
        if (*(unsigned char *)(a4 + 14)) {
          BOOL v15 = v14 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        int v16 = !v15;
        BOOL v17 = v13 > v14;
        BOOL v18 = (v16 & v17) == 0;
        if ((v16 & v17) != 0) {
          unsigned int v19 = *(unsigned __int8 *)(a4 + 22);
        }
        else {
          unsigned int v19 = *(unsigned __int8 *)(a4 + 14);
        }
        if (v18) {
          unsigned int v13 = *(unsigned __int8 *)(a4 + 22);
        }
        BOOL v20 = !v13 || v13 >= v8;
        BOOL v21 = !v20;
        BOOL v22 = v19 <= v8 || v19 == 0;
        uint64_t v23 = -1;
        if (!v22 || v21) {
          return v23;
        }
      }
    }
  }
  else
  {
    uint64_t v11 = 130 * v12;
    if (*(unsigned char *)(a1 + 6)) {
      goto LABEL_29;
    }
  }
LABEL_55:
  int v24 = *(unsigned __int8 *)(a2 + 7);
  if ((*(unsigned char *)(a1 + 7) & 0x30u) < (v24 & 0x30u) && (v24 & 0x30u) > (*(unsigned char *)(a4 + 23) & 0x30u)) {
    return -1;
  }
  int v25 = *(unsigned __int8 *)(a4 + 15);
  if ((v25 & 0x40) != 0 && (v24 & 0x40) == 0 && (*(unsigned char *)(a4 + 23) & 0x40) != 0) {
    return -1;
  }
  if ((~v25 & 3) != 0 && (~v24 & 3) == 0 && (*(unsigned char *)(a4 + 23) & 3) != 3) {
    return -1;
  }
  if (*(unsigned char *)(a3 + 64)) {
    uint64_t v26 = v11;
  }
  else {
    uint64_t v26 = v11 + 1000;
  }
  unint64_t v27 = v10 * v9;
  if (*(_DWORD *)a2 == *(_DWORD *)(a4 + 16)) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = 600 * v27;
  }
  unsigned int v29 = *(unsigned __int8 *)(a4 + 20) ^ v4;
  uint32x4_t v30 = vmovl_u16((uint16x4_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)vdup_n_s16(v29), (int8x8_t)0x8000400020001)));
  v31.i64[0] = v30.u32[0];
  v31.i64[1] = v30.u32[1];
  int8x16_t v32 = (int8x16_t)vshrq_n_s64(vshlq_n_s64(v31, 0x38uLL), 0x38uLL);
  v31.i64[0] = v30.u32[2];
  v31.i64[1] = v30.u32[3];
  int8x16_t v33 = (int8x16_t)vdupq_n_s64(600 * v27);
  int64x2_t v34 = (int64x2_t)vbicq_s8(v33, (int8x16_t)vshrq_n_s64(vshlq_n_s64(v31, 0x38uLL), 0x38uLL));
  int64x2_t v35 = (int64x2_t)vbicq_s8(v33, v32);
  if ((v29 & 0x10) != 0) {
    uint64_t v36 = 600 * v27;
  }
  else {
    uint64_t v36 = 0;
  }
  return vaddvq_s64(vaddq_s64(v35, v34)) + v26 + v28 + v36 + *(void *)(a3 + 48) + v27 * *(void *)(a3 + 56);
}

uint64_t vtPixelTransferAppendDynamicNodeCallback(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef cf = 0;
  unsigned int v7 = *((unsigned __int8 *)a2 + 4) ^ *(unsigned __int8 *)(a1 + 4);
  int v8 = (v7 >> 4) & 1;
  int v9 = v7 & 0x18;
  unint64_t v10 = &kVTRotation_180;
  if (v9 == 24) {
    int v11 = 0;
  }
  else {
    int v11 = (v7 >> 4) & 1;
  }
  if (v9 == 24) {
    int v12 = 0;
  }
  else {
    int v12 = (v7 >> 3) & 1;
  }
  if (v9 != 24) {
    unint64_t v10 = &kVTRotation_0;
  }
  BOOL v13 = (v7 & 8) == 0;
  if (v8) {
    BOOL v13 = 0;
  }
  unsigned int v14 = &kVTRotation_CCW90;
  if (!v8) {
    unsigned int v14 = &kVTRotation_CW90;
  }
  if (v9 == 24) {
    BOOL v13 = 0;
  }
  else {
    int v8 = 0;
  }
  if (v9 == 24) {
    BOOL v15 = &kVTRotation_CW90;
  }
  else {
    BOOL v15 = v14;
  }
  if ((v7 & 4) != 0) {
    int v16 = v8;
  }
  else {
    int v16 = v11;
  }
  if ((v7 & 4) != 0) {
    int v17 = v13;
  }
  else {
    int v17 = v12;
  }
  if ((v7 & 4) != 0) {
    BOOL v18 = (__CFString **)v15;
  }
  else {
    BOOL v18 = (__CFString **)v10;
  }
  long long v27 = 0u;
  *(_OWORD *)uint64_t v28 = 0u;
  unsigned int v19 = *v18;
  VTPixelTransferGraphGetCurrentDimensions(a1, (uint64_t)a2, a3, a6, 0, (uint64_t)&v27);
  CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy) {
    return 0;
  }
  BOOL v21 = MutableCopy;
  if (v19 == @"Rotation0") {
    CFDictionaryRemoveValue(MutableCopy, @"Rotation");
  }
  else {
    FigCFDictionarySetValue();
  }
  if (v16) {
    FigCFDictionarySetValue();
  }
  else {
    CFDictionaryRemoveValue(v21, @"FlipHorizontalOrientation");
  }
  if (v17)
  {
    FigCFDictionarySetValue();
    if ((v7 & 2) == 0)
    {
LABEL_37:
      CFDictionaryRemoveValue(v21, @"DestinationColorPrimaries");
      CFDictionaryRemoveValue(v21, @"DestinationTransferFunction");
      goto LABEL_40;
    }
  }
  else
  {
    CFDictionaryRemoveValue(v21, @"FlipVerticalOrientation");
    if ((v7 & 2) == 0) {
      goto LABEL_37;
    }
  }
  FigCFDictionaryGetValue();
  FigCFDictionaryGetValue();
  FigCFDictionarySetValue();
  FigCFDictionarySetValue();
LABEL_40:
  uint64_t PixelBufferPoolAttributes = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)v28[0], (unint64_t)v28[1], (CFMutableDictionaryRef *)&cf);
  CFTypeRef v23 = cf;
  if (PixelBufferPoolAttributes)
  {
    uint64_t appended = PixelBufferPoolAttributes;
    if (!cf) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  uint64_t appended = vtPixelTransferChainAppendDynamicNode();
  CFTypeRef v23 = cf;
  if (cf) {
LABEL_42:
  }
    CFRelease(v23);
LABEL_43:
  CFRelease(v21);
  return appended;
}

uint64_t vtPixelTransferAppendColorProcessingBlitterNodeCallback(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  int v24 = 0;
  CFStringRef StringForIntegerCodePoint = CVYCbCrMatrixGetStringForIntegerCodePoint(*(unsigned __int8 *)(a1 + 5));
  CFStringRef v11 = CVYCbCrMatrixGetStringForIntegerCodePoint(*((unsigned __int8 *)a2 + 5));
  CFTypeRef cf = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  VTPixelTransferGraphGetCurrentDimensions(a1, (uint64_t)a2, v12, a6, 0, (uint64_t)&v21);
  CFMutableDictionaryRef MutableCopy = 0;
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (((*((unsigned __int8 *)a2 + 4) ^ *(unsigned __int8 *)(a1 + 4)) & 2) == 0
    || (CFMutableDictionaryRef Mutable = (__CFDictionary *)FigCFDictionaryCreateMutableCopy(),
        CFMutableDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy(),
        !Mutable))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  if (!MutableCopy) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  if (Mutable) {
    BOOL v16 = MutableCopy == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    uint64_t appended = 4294954392;
  }
  else
  {
    int v17 = (const void **)MEMORY[0x1E4F24C18];
    if (StringForIntegerCodePoint) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24C18], StringForIntegerCodePoint);
    }
    if (v11) {
      CFDictionarySetValue(MutableCopy, *v17, v11);
    }
    uint64_t PixelBufferPoolAttributes = VTPixelBlitterColorHandlingOptimized_setup(*(_DWORD *)a1, Mutable, *a2, MutableCopy, 0, *(unsigned __int8 *)(a6 + 170), *(unsigned __int8 *)(a6 + 171), &v26, &v25, a3 + 32, (void (__cdecl **)(void *))&v24);
    if (PixelBufferPoolAttributes
      || (uint64_t PixelBufferPoolAttributes = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)*(double *)&v22, (unint64_t)*((double *)&v22 + 1), (CFMutableDictionaryRef *)&cf), PixelBufferPoolAttributes))
    {
      uint64_t appended = PixelBufferPoolAttributes;
    }
    else
    {
      uint64_t appended = VTPixelTransferChainAppendSoftwareNode(*(void *)a6, (uint64_t)cf, 0, v25, v26, v24);
      if (!appended) {
        uint64_t v26 = 0;
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v26) {
    ((void (*)(void))v24)();
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return appended;
}

uint64_t vtPixelTransferAppendScalerNodeCallback(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFMutableDictionaryRef v21 = 0;
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  float64x2_t v17 = 0u;
  memset(v18, 0, sizeof(v18));
  float64x2_t v16 = 0u;
  memset(v15, 0, sizeof(v15));
  int64x2_t v13 = 0u;
  int64x2_t v14 = 0u;
  long long v12 = 0u;
  VTPixelTransferGraphGetCurrentDimensions((uint64_t)a1, (uint64_t)a2, a3, a6, 0, (uint64_t)&v16);
  uint64_t appended = VTPixelTransferChainCreatePixelBufferPoolAttributes(*a2, (unint64_t)v17.f64[0], (unint64_t)v17.f64[1], &v21);
  if (!appended)
  {
    VTConvertFloatRectToIntRect(a6 + 28, (uint64_t)v15);
    VTConvertFloatRectToIntRect(a6 + 76, (uint64_t)&v12);
    int64x2_t v13 = vcvtq_s64_f64(vcvtq_f64_f32(vrnda_f32(vcvt_f32_f64(v17))));
    int64x2_t v14 = vcvtq_s64_f64(vcvtq_f64_f32(vrnda_f32(vcvt_f32_f64(v16))));
    vtAllocatePlanarBuffersCommon(*a1, (uint64_t)v15, (uint64_t)v18);
    vtAllocatePlanarBuffersCommon(*a2, (uint64_t)&v12, (uint64_t)v19);
    uint64_t appended = VTPixelTransferChainAppendScalerNode();
  }
  uint64_t v10 = appended;
  vtFreePlanarBuffers((uint64_t)v18);
  vtFreePlanarBuffers((uint64_t)v19);
  if (v21) {
    CFRelease(v21);
  }
  return v10;
}

uint64_t vtCompressionSession_handleSessionTerminatedNotification()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

CFTypeID VTCompressionSessionGetTypeID(void)
{
  return sVTCompressionSessionID;
}

uint64_t VTCompressionSessionCreateWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, const void *a6, uint64_t a7, uint64_t a8, uint64_t a9, const __CFDictionary *a10, uint64_t *a11)
{
  BOOL v11 = (int)a10;
  long long v12 = a11;
  v106[3] = *MEMORY[0x1E4F143B8];
  char v89 = 0;
  if (!a11
    || (int)a2 < 1
    || (int)a3 <= 0
    || (*a11 = 0,
        MEMORY[0x199705810](&VTCompressionSessionGetTypeID_sRegisterVTCompressionSessionOnce, RegisterVTCompressionSession), (uint64_t Instance = _CFRuntimeCreateInstance()) == 0))
  {
    return FigSignalErrorAt();
  }
  uint64_t v21 = Instance;
  CFStringRef Value = (const void *)FigCFDictionaryGetValue();
  uint64_t v87 = a7;
  uint64_t v86 = a8;
  if (Value)
  {
    CFTypeRef v23 = (void *)CFRetain(Value);
LABEL_13:
    uint64_t v28 = v23;
    goto LABEL_14;
  }
  pid_t v25 = getpid();
  proc_name(v25, buffer, 0x21u);
  LOBYTE(v91) = 0;
  if (LOBYTE(buffer[0]))
  {
    CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    size_t v27 = strnlen((const char *)buffer, 0x21uLL);
    CFTypeRef v23 = (void *)CFStringCreateWithBytes(v26, (const UInt8 *)buffer, v27, 0x8000100u, 0);
    goto LABEL_13;
  }
  uint64_t v28 = 0;
LABEL_14:
  CFTypeRef v85 = v28;
  if (a5)
  {
    CFBooleanRef v29 = (const __CFBoolean *)CFDictionaryGetValue(a5, @"RequiredLowLatency");
    if (v29)
    {
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(v29)) {
        LODWORD(v29) = CFBooleanGetValue(v29);
      }
      else {
        LODWORD(v29) = 0;
      }
    }
    CFBooleanRef v31 = (const __CFBoolean *)CFDictionaryGetValue(a5, @"EnableLowLatencyRateControl");
    if (v31)
    {
      CFBooleanRef v32 = v31;
      CFTypeID v33 = CFBooleanGetTypeID();
      if (v33 == CFGetTypeID(v32))
      {
        long long v12 = a11;
        if (v29) {
          LOBYTE(v29) = 1;
        }
        else {
          LODWORD(v29) = CFBooleanGetValue(v32) != 0;
        }
      }
      else
      {
        long long v12 = a11;
      }
      uint64_t v28 = v85;
    }
    else
    {
      uint64_t v28 = v85;
    }
  }
  else
  {
    LOBYTE(v29) = 0;
  }
  *(unsigned char *)(v21 + 794) = (_BYTE)v29;
  if (a10) {
    BOOL v11 = CFDictionaryGetValue(a10, @"AllowClientProcessEncode") == (const void *)*MEMORY[0x1E4F1CFD0];
  }
  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
  {
    if (FigServer_IsVideocodecd()) {
      goto LABEL_37;
    }
  }
  else if (FigServer_IsServerProcess())
  {
    goto LABEL_37;
  }
  if (!v11 && !VTShouldRunVideoEncodersInProcess())
  {
    int v68 = *(unsigned __int8 *)(v21 + 794);
    uint64_t v69 = VTCompressionSessionRemote_Create(v21, a1, a2, a3, a4, a5, (uint64_t)a6, v87, (uint64_t)v28, v86, a9, (uint64_t *)(v21 + 24));
    if (!v69)
    {
      if (v68)
      {
        CFDictionaryRef MutableCopy = 0;
        *(void *)(v21 + 808) = VTRateControlReactionObserverCreate(v21, (uint64_t)vtRateControlReactionObserverCallback);
      }
      else
      {
        CFDictionaryRef MutableCopy = 0;
      }
      goto LABEL_132;
    }
    uint64_t v48 = v69;
    CFDictionaryRef MutableCopy = 0;
    goto LABEL_135;
  }
LABEL_37:
  buffer[0] = 0;
  if (VTRateControlGetVersion((uint64_t *)buffer)) {
    BOOL v34 = 0;
  }
  else {
    BOOL v34 = buffer[0] > (CFTypeRef)0x6C;
  }
  int v35 = v34;
  *(unsigned char *)(v21 + 795) = v35;
  if (*(unsigned char *)(v21 + 794) || v35)
  {
    CFGetAllocator((CFTypeRef)*MEMORY[0x1E4F1CF80]);
    CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!MutableCopy)
    {
      FigSignalErrorAt();
      uint64_t v48 = 0;
      goto LABEL_135;
    }
    if (VTRateControlSessionCreate(a1, a2, a3, a4, (uint64_t)MutableCopy, (uint64_t)a6, 0, (uint64_t)vtRateControlSessionBeforeEncodeCallback, (uint64_t)vtCompressionSessionCompleteFramesCallback, (void *)(v21 + 800)))
    {
      uint64_t v82 = FigSignalErrorAt();
      goto LABEL_144;
    }
    *(void *)(*(void *)(v21 + 800) + 24) = v21;
    if (*(unsigned char *)(v21 + 794) && !CFDictionaryGetValue(MutableCopy, @"EncoderUsage")) {
      FigCFDictionarySetInt32();
    }
    CFDictionaryRef v38 = MutableCopy;
    goto LABEL_53;
  }
  CFDictionaryRef MutableCopy = 0;
  CFTypeRef v37 = 0;
  CFDictionaryRef v38 = a5;
  if (a5) {
LABEL_53:
  }
    CFTypeRef v37 = CFRetain(v38);
  *(void *)(v21 + 56) = v37;
  *(_DWORD *)(v21 + 40) = a2;
  *(_DWORD *)(v21 + 44) = a3;
  *(_DWORD *)(v21 + 48) = a4;
  CFTypeRef v39 = a6;
  if (a6) {
    CFTypeRef v39 = CFRetain(a6);
  }
  *(void *)(v21 + 64) = v39;
  *(void *)(v21 + 80) = v86;
  *(void *)(v21 + 88) = a9;
  *(void *)(v21 + 104) = FigSimpleMutexCreate();
  *(void *)(v21 + 112) = 1;
  *(_DWORD *)(v21 + 120) = 0;
  *(void *)(v21 + 464) = FigSimpleMutexCreate();
  *(_DWORD *)(v21 + 480) = 1;
  *(unsigned char *)(v21 + 256) = 1;
  CFIndex v40 = *(void *)(v21 + 440);
  VTEncoderSessionCreateTimeStampQueue(v21 + 392);
  *(void *)(v21 + 312) = 0;
  *(void *)(v21 + 320) = 0;
  *(void *)(v21 + 288) = 0;
  *(void *)(v21 + 296) = vtCompressionSessionCompressionWork;
  *(void *)(v21 + 272) = dispatch_group_create();
  *(void *)(v21 + 280) = 0;
  *(_WORD *)(v21 + 528) = 1;
  *(void *)(v21 + 532) = 0;
  *(_DWORD *)(v21 + 16) = 0;
  if (vtCompressionSessionStoreHDRDefaultWrites_onceToken != -1) {
    dispatch_once(&vtCompressionSessionStoreHDRDefaultWrites_onceToken, &__block_literal_global);
  }
  int v41 = vtCompressionSessionStoreHDRDefaultWrites_hdrEnabled;
  *(unsigned char *)(v21 + 552) = vtCompressionSessionStoreHDRDefaultWrites_hdrEnabled;
  *(unsigned char *)(v21 + 553) = vtCompressionSessionStoreHDRDefaultWrites_hdrAlwaysGenerateStats;
  *(unsigned char *)(v21 + 641) = vtCompressionSessionStoreHDRDefaultWrites_enableAmbientViewingEnvironment;
  *(unsigned char *)(v21 + 644) = vtCompressionSessionStoreHDRDefaultWrites_generateDM4;
  CFDictionaryRef v84 = MutableCopy;
  if ((int)a4 <= 1634743415)
  {
    if (a4 == 1634742376 || a4 == 1634742888) {
      goto LABEL_70;
    }
    unsigned __int16 v42 = 13416;
  }
  else
  {
    if ((a4 - 1634755432) <= 0xB && ((1 << (a4 - 104)) & 0x8C1) != 0
      || (a4 - 1634759272) <= 6 && ((1 << (a4 - 104)) & 0x51) != 0)
    {
      goto LABEL_70;
    }
    unsigned __int16 v42 = 13432;
  }
  if (a4 == (v42 | 0x61700000) || !v41)
  {
LABEL_70:
    uint64_t v43 = *MEMORY[0x1E4F1CFC8];
    goto LABEL_71;
  }
  uint64_t v43 = 0;
LABEL_71:
  *(void *)(v21 + 576) = v43;
  *(unsigned char *)(v21 + 608) = 0;
  *(void *)(v21 + 616) = 0;
  uint64_t v44 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(v21 + 584) = *MEMORY[0x1E4F1F9F8];
  *(void *)(v21 + 600) = *(void *)(v44 + 16);
  *(void *)(v21 + 560) = 0;
  *(_DWORD *)(v21 + 568) = 0;
  *(_WORD *)(v21 + 642) = 0;
  *(void *)(v21 + 680) = 0;
  *(_WORD *)(v21 + 792) = 256;
  *(_OWORD *)(v21 + 624) = 0u;
  *(_OWORD *)(v21 + 656) = 0u;
  *(void *)(v21 + 669) = 0;
  CFAllocatorRef v45 = CFGetAllocator((CFTypeRef)v21);
  unsigned int v46 = (CFTypeRef *)(v21 + 432);
  unsigned int v47 = (CFTypeRef *)(v21 + 456);
  uint64_t v48 = VTSelectAndCreateVideoEncoderInstanceInternal(a4, (uint64_t)v45, 0, *(CFTypeRef *)(v21 + 56), v40, (void *)(v21 + 432), &v89, (CFIndex *)(v21 + 440), (void *)(v21 + 456));
  if (v48)
  {
LABEL_102:
    FigSignalErrorAt();
    CFDictionaryRef MutableCopy = v84;
    goto LABEL_135;
  }
  long long v83 = v12;
  while (1)
  {
    *(void *)(v21 + 392) = v21;
    FigCFDictionaryGetBooleanIfPresent();
    CFDictionaryRef v49 = *(const __CFDictionary **)(v21 + 56);
    if (v49)
    {
      uint64_t v50 = CFDictionaryGetValue(v49, @"EncoderUsage");
      if (v50)
      {
        uint64_t v51 = v50;
        CFTypeRef v52 = *v46;
        uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v54 = v53 ? v53 : 0;
        int v55 = *(void (**)(CFTypeRef, __CFString *, const void *))(v54 + 56);
        if (v55) {
          v55(v52, @"EncoderUsage", v51);
        }
      }
    }
    uint64_t v56 = *(void *)(v21 + 432);
    uint64_t v57 = *(void *)(v21 + 40);
    uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v58) {
      uint64_t v59 = v58;
    }
    else {
      uint64_t v59 = 0;
    }
    unint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 8);
    if (!v60)
    {
      unsigned int v61 = -12782;
      goto LABEL_87;
    }
    unsigned int v61 = v60(v56, v21 + 392, v57, v87);
    if (!v61) {
      break;
    }
LABEL_87:
    if (v48) {
      uint64_t v48 = v48;
    }
    else {
      uint64_t v48 = v61;
    }
    uint64_t v62 = *(void *)(v21 + 440);
    CFTypeRef v63 = *v46;
    if (*v46)
    {
      uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v64) {
        uint64_t v65 = v64;
      }
      else {
        uint64_t v65 = 0;
      }
      uint64_t v66 = *(void (**)(CFTypeRef))(v65 + 24);
      if (v66) {
        v66(v63);
      }
      if (*v46)
      {
        CFRelease(*v46);
        *unsigned int v46 = 0;
      }
    }
    if (*v47)
    {
      CFRelease(*v47);
      *unsigned int v47 = 0;
    }
    CFAllocatorRef v67 = CFGetAllocator((CFTypeRef)v21);
    if (VTSelectAndCreateVideoEncoderInstanceInternal(a4, (uint64_t)v67, 0, *(CFTypeRef *)(v21 + 56), v62 + 1, (void *)(v21 + 432), &v89, (CFIndex *)(v21 + 440), (void *)(v21 + 456)))
    {
      uint64_t v28 = v85;
      goto LABEL_102;
    }
  }
  buffer[0] = 0;
  CFAllocatorRef v70 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (VTCompressionSessionCopyProperty(v21, @"UsingHardwareAcceleratedVideoEncoder", *MEMORY[0x1E4F1CF80], buffer))BOOL v72 = 1; {
  else
  }
    BOOL v72 = buffer[0] == 0;
  if (v72 || (CFTypeID v73 = CFGetTypeID(buffer[0]), v73 != CFBooleanGetTypeID()))
  {
    *(_DWORD *)(v21 + 832) = 0;
    long long v12 = v83;
    CFDictionaryRef v74 = a5;
    uint64_t v28 = v85;
  }
  else
  {
    long long v12 = v83;
    CFDictionaryRef v74 = a5;
    uint64_t v28 = v85;
    if (CFEqual((CFTypeRef)*MEMORY[0x1E4F1CFD0], buffer[0])) {
      int v75 = 1;
    }
    else {
      int v75 = 2;
    }
    *(_DWORD *)(v21 + 832) = v75;
  }
  if (buffer[0]) {
    CFRelease(buffer[0]);
  }
  *(void *)(v21 + 344) = 0;
  *(void *)(v21 + 352) = 0;
  *(void *)(v21 + 360) = FigSemaphoreCreate();
  *(void *)(v21 + 304) = FigSemaphoreCreate();
  *(void *)(v21 + 336) = FigSemaphoreCreate();
  if (v28) {
    CFTypeRef v76 = CFRetain(v28);
  }
  else {
    CFTypeRef v76 = 0;
  }
  *(void *)(v21 + 848) = v76;
  v106[1] = @"RequireHardwareAcceleratedVideoEncoder";
  v106[2] = @"EncoderID";
  buffer[0] = @"ProfileLevel";
  buffer[1] = @"ColorPrimaries";
  buffer[2] = @"TransferFunction";
  buffer[3] = @"YCbCrMatrix";
  int v91 = @"AverageBitRate";
  uint64_t v92 = @"ExpectedFrameRate";
  uint64_t v93 = @"Quality";
  uint64_t v94 = @"RealTime";
  char v95 = @"MaximizePowerEfficiency";
  CFTypeRef v96 = @"PrioritizeEncodingSpeedOverQuality";
  CFTypeRef v97 = @"ConstantBitRate";
  uint64_t v98 = @"AllowFrameReordering";
  unint64_t v99 = @"MaxKeyFrameIntervalDuration";
  uint64_t v100 = @"AllowTemporalCompression";
  char v101 = @"BaseLayerFrameRate";
  BOOL v102 = @"OutputBitDepth";
  unint64_t v103 = @"EncoderID";
  unint64_t v104 = @"DataRateLimits";
  unint64_t v105 = @"H264EntropyMode";
  v106[0] = @"EnableHardwareAcceleratedVideoEncoder";
  CFMutableSetRef Mutable = CFSetCreateMutable(v70, 3, MEMORY[0x1E4F1D548]);
  *(void *)(v21 + 856) = Mutable;
  if (!Mutable) {
    goto LABEL_145;
  }
  for (uint64_t i = 0; i != 3; ++i)
    CFSetAddValue(*(CFMutableSetRef *)(v21 + 856), (const void *)v106[i]);
  CFMutableSetRef v79 = CFSetCreateMutable(v70, 19, MEMORY[0x1E4F1D548]);
  *(void *)(v21 + 864) = v79;
  if (!v79) {
    goto LABEL_145;
  }
  for (uint64_t j = 0; j != 19; ++j)
    CFSetAddValue(*(CFMutableSetRef *)(v21 + 864), buffer[j]);
  CFMutableDictionaryRef v81 = CFDictionaryCreateMutable(v70, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(v21 + 872) = v81;
  if (v81)
  {
    if (v74) {
      goto LABEL_130;
    }
  }
  else
  {
LABEL_145:
    FigSignalErrorAt();
    if (v74) {
LABEL_130:
    }
      CFDictionaryApplyFunction(v74, (CFDictionaryApplierFunction)vtCoreAnalyticsSaveTrackedVideoEncoderSpecificationProperty, (void *)v21);
  }
  CFDictionaryRef MutableCopy = v84;
LABEL_132:
  if (!*(void *)(v21 + 432)
    || (CMNotificationCenterGetDefaultLocalCenter(), uint64_t v82 = FigNotificationCenterAddWeakListener(), !v82))
  {
    uint64_t v48 = 0;
    *(CFAbsoluteTime *)(v21 + 840) = CFAbsoluteTimeGetCurrent();
    uint64_t *v12 = v21;
    uint64_t v21 = 0;
    goto LABEL_135;
  }
LABEL_144:
  uint64_t v48 = v82;
LABEL_135:
  if (v28) {
    CFRelease(v28);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v21) {
    CFRelease((CFTypeRef)v21);
  }
  return v48;
}

void vtRateControlSessionBeforeEncodeCallback(uint64_t a1, const void *a2, uint64_t a3, long long *a4, long long *a5, uint64_t a6, const __CFDictionary *a7, uint64_t a8, char a9)
{
  int v34 = 0;
  uint64_t v33 = a1;
  uint64_t v10 = *(void *)a1;
  if (!*(void *)a1 || *(_DWORD *)(v10 + 16) == 2)
  {
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_19;
  }
  MEMORY[0x1997056B0](*(void *)(v10 + 104));
  CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v10 + 128), a2);
  if (Value)
  {
    Value[3] = a8;
    *((unsigned char *)Value + 32) = 1;
  }
  else
  {
    FigSignalErrorAt();
  }
  MEMORY[0x1997056C0](*(void *)(v10 + 104));
  if ((a9 & 1) == 0)
  {
    if (a7)
    {
      unint64_t v19 = *(void *)(v10 + 432);
      long long context = v19;
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v21 = v20 ? v20 : 0;
      long long v22 = *(unsigned int (**)(unint64_t, const __CFDictionary *))(v21 + 40);
      if (!v22 || v22(v19, a7) == -12782)
      {
        DWORD2(context) = 0;
        CFDictionaryApplyFunction(a7, (CFDictionaryApplierFunction)vtEncoderSetOneProperty, &context);
      }
    }
    uint64_t v23 = *(void *)(v10 + 432);
    long long v31 = *a4;
    uint64_t v32 = *((void *)a4 + 2);
    long long v29 = *a5;
    uint64_t v30 = *((void *)a5 + 2);
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    CFAllocatorRef v26 = *(uint64_t (**)(uint64_t, const void *, uint64_t, long long *, long long *, uint64_t, int *))(v25 + 16);
    if (!v26)
    {
      uint64_t v28 = 4294954514;
      goto LABEL_22;
    }
    long long context = v31;
    uint64_t v38 = v32;
    long long v35 = v29;
    uint64_t v36 = v30;
    uint64_t v27 = v26(v23, a2, a3, &context, &v35, a6, &v34);
LABEL_19:
    uint64_t v28 = v27;
    if (!v27)
    {
LABEL_23:
      if (!v10) {
        goto LABEL_26;
      }
      goto LABEL_24;
    }
LABEL_22:
    vtCompressionSessionPipelineContextHandleError((uint64_t *)a1, v28);
    goto LABEL_23;
  }
  VTEncoderSessionEmitEncodedFrame((uint64_t *)(v10 + 392), a2, 0, 2u, 0);
LABEL_24:
  if (*(unsigned char *)(a1 + 116)) {
    FigSemaphoreSignal();
  }
LABEL_26:
  vtCompressionSessionPipelineContextInvalidate(&v33);
}

uint64_t vtCompressionSessionCompleteFramesCallback(uint64_t *a1, long long *a2)
{
  uint64_t v2 = *a1;
  if (!*a1 || *(_DWORD *)(v2 + 16) == 2)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 432);
    long long v10 = *a2;
    uint64_t v11 = *((void *)a2 + 2);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v7 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v6 = v7;
    if (v7) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = 0;
    }
    int v9 = *(uint64_t (**)(uint64_t, long long *))(v8 + 24);
    if (v9)
    {
      long long v12 = v10;
      uint64_t v13 = v11;
      return v9(v3, &v12);
    }
  }
  return result;
}

uint64_t VTEncoderSessionCreateTimeStampQueue(uint64_t a1)
{
  callBacks.version = 0;
  callBacks.retain = (CFArrayRetainCallBack)vtTimeStampRetain;
  callBacks.release = (CFArrayReleaseCallBack)vtTimeStampRelease;
  callBacks.copyDescription = (CFArrayCopyDescriptionCallBack)vtTimeStampCopyDescription;
  callBacks.equal = 0;
  uint64_t v2 = *(const void **)a1;
  if (v2) {
    CFAllocatorRef v3 = CFGetAllocator(v2);
  }
  else {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  CFMutableArrayRef v4 = CFArrayCreateMutable(v3, 0, &callBacks);
  *(void *)(a1 + 16) = v4;
  if (!v4) {
    return FigSignalErrorAt();
  }
  uint64_t v5 = FigSimpleMutexCreate();
  uint64_t result = 0;
  *(void *)(a1 + 24) = v5;
  return result;
}

void vtCompressionSessionCompressionWork(uint64_t a1)
{
  *(void *)((char *)&v87[7] + 4) = *MEMORY[0x1E4F143B8];
  uint64_t v73 = a1;
  int v72 = 0;
  uint64_t v1 = *(void *)a1;
  if (!*(void *)a1) {
    goto LABEL_146;
  }
  if (*(_DWORD *)(v1 + 16) == 2) {
    goto LABEL_146;
  }
  uint64_t v2 = a1;
  CVPixelBufferAtIndex = *(__CVBuffer **)(a1 + 32);
  CFMutableArrayRef v4 = *(OpaqueCMTaggedBufferGroup **)(a1 + 40);
  if (*(_OWORD *)(a1 + 32) == 0) {
    goto LABEL_146;
  }
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 48);
  CGFloat v81 = *(double *)(a1 + 56);
  unsigned int v6 = *(_DWORD *)(a1 + 68);
  unsigned int v82 = *(_DWORD *)(a1 + 64);
  CGFloat v7 = *(double *)(a1 + 72);
  CGFloat v79 = *(double *)(a1 + 80);
  unsigned int v80 = *(_DWORD *)(a1 + 88);
  uint64_t v8 = *(const void **)(a1 + 104);
  if (!v8)
  {
LABEL_146:
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_42;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 92);
  CGFloat v69 = *(double *)(a1 + 96);
  CFDictionaryRef theDict = v5;
  uint64_t v10 = *(void *)(v1 + 576);
  uint64_t v11 = *MEMORY[0x1E4F1CFC8];
  long long v12 = (uint64_t *)MEMORY[0x1E4F1CFD0];
  if (v10 != *MEMORY[0x1E4F1CFC8])
  {
    if (vtCompressionSessionIsHLG())
    {
      if (vtCompressionSessionIsDolbyCompatible(v1))
      {
        uint64_t v10 = *v12;
        *(void *)(v1 + 576) = *v12;
      }
      else
      {
        *(void *)(v1 + 576) = v11;
        uint64_t v10 = v11;
      }
    }
    else
    {
      uint64_t v10 = *(void *)(v1 + 576);
    }
  }
  unsigned int v71 = v9;
  if (*v12 != v10)
  {
    CFTypeRef v13 = 0;
    goto LABEL_13;
  }
  MEMORY[0x1997056B0](*(void *)(v1 + 104));
  CFStringRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 128), v8);
  if (Value)
  {
    unint64_t v19 = (const void *)Value[1];
    MEMORY[0x1997056C0](*(void *)(v1 + 104));
    if (CVPixelBufferAtIndex) {
      goto LABEL_53;
    }
    goto LABEL_22;
  }
  unsigned int v61 = CVPixelBufferAtIndex;
  uint64_t v62 = v4;
  CFTypeRef v63 = v8;
  unsigned int v64 = v6;
  unsigned int v65 = v9;
  uint64_t v14 = FigSignalErrorAt();
  MEMORY[0x1997056C0](*(void *)(v1 + 104));
  if (v14) {
    goto LABEL_47;
  }
  unsigned int v9 = v65;
  unsigned int v6 = v64;
  uint64_t v8 = v63;
  CFMutableArrayRef v4 = v62;
  CVPixelBufferAtIndex = v61;
  unint64_t v19 = 0;
  if (!CVPixelBufferAtIndex)
  {
LABEL_22:
    if (v4)
    {
      if (CMTaggedBufferGroupGetCount(v4) < 1) {
        CVPixelBufferAtIndex = 0;
      }
      else {
        CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
      }
    }
  }
LABEL_53:
  CFTypeRef cf = 0;
  int v28 = *(_DWORD *)(v1 + 672);
  if (!v28)
  {
    vtCompressionSessionSetHDRFormat(v1);
    int v28 = *(_DWORD *)(v1 + 672);
  }
  if ((v28 - 1) >= 2)
  {
    if (v28 == 3)
    {
      if (!*(void *)(v1 + 216))
      {
        CFTypeRef v33 = CVBufferCopyAttachment(CVPixelBufferAtIndex, @"MasteringDisplayColorVolume", 0);
        *(void *)(v1 + 216) = v33;
        if (!v33)
        {
          *(_OWORD *)time1 = xmmword_193E7CF50;
          *(void *)&time1[16] = 0x500000080969800;
          *(void *)(v1 + 216) = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], time1, 24);
        }
      }
      if (!*(void *)(v1 + 224))
      {
        CFTypeRef v34 = CVBufferCopyAttachment(CVPixelBufferAtIndex, @"ContentLightLevelInfo", 0);
        CFTypeRef v30 = 0;
        *(void *)(v1 + 224) = v34;
        if (!v34)
        {
          *(_DWORD *)time1 = -1878923261;
          CFTypeRef v30 = 0;
          *(void *)(v1 + 224) = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], time1, 4);
        }
        goto LABEL_124;
      }
    }
    else if (v28 == 4 && !*(void *)(v1 + 656))
    {
      CFTypeRef v29 = CVBufferCopyAttachment(CVPixelBufferAtIndex, (CFStringRef)*MEMORY[0x1E4F249F0], 0);
      if (v29)
      {
        CFTypeRef v30 = 0;
        *(void *)(v1 + 656) = v29;
LABEL_124:
        uint64_t v14 = 0;
        CFTypeRef v13 = cf;
        CFTypeRef cf = 0;
        goto LABEL_125;
      }
    }
    CFTypeRef v30 = 0;
    goto LABEL_124;
  }
  CFTypeRef v67 = v19;
  if ((v9 & 1) != 0
    && (*(_OWORD *)time1 = *MEMORY[0x1E4F1FA48],
        *(void *)&time1[16] = *(void *)(MEMORY[0x1E4F1FA48] + 16),
        time2.origin.x = v79,
        *(void *)&time2.origin.y = __PAIR64__(v9, v80),
        time2.size.width = v69,
        CMTimeCompare((CMTime *)time1, (CMTime *)&time2) < 0))
  {
    *(CGFloat *)time1 = v79;
    *(void *)&time1[8] = __PAIR64__(v9, v80);
    *(CGFloat *)&time1[16] = v69;
    float v32 = 1.0 / CMTimeGetSeconds((CMTime *)time1);
    VTHDRMetadataGenerationSessionSetFramesPerSecond(*(void *)(v1 + 616), v32);
  }
  else
  {
    if ((v6 & 1) == 0) {
      goto LABEL_81;
    }
    long long v31 = (_OWORD *)(v1 + 584);
    float v32 = 0.0;
    if (*(unsigned char *)(v1 + 596))
    {
      memset(time1, 0, 24);
      time2.origin.x = v81;
      *(void *)&time2.origin.y = __PAIR64__(v6, v82);
      time2.size.width = v7;
      *(_OWORD *)&rhs.value = *v31;
      rhs.CMTimeEpoch epoch = *(void *)(v1 + 600);
      CMTimeSubtract((CMTime *)time1, (CMTime *)&time2, &rhs);
      time2.origin = (CGPoint)*MEMORY[0x1E4F1FA48];
      time2.size.width = *(CGFloat *)(MEMORY[0x1E4F1FA48] + 16);
      CMTime rhs = *(CMTime *)time1;
      if (CMTimeCompare((CMTime *)&time2, &rhs) < 0)
      {
        time2.origin = *(CGPoint *)time1;
        time2.size.width = *(CGFloat *)&time1[16];
        float v32 = 1.0 / CMTimeGetSeconds((CMTime *)&time2);
        VTHDRMetadataGenerationSessionSetFramesPerSecond(*(void *)(v1 + 616), v32);
      }
    }
    *(CGFloat *)long long v31 = v81;
    *(_DWORD *)(v1 + 592) = v82;
    *(_DWORD *)(v1 + 596) = v6;
    *(CGFloat *)(v1 + 600) = v7;
  }
  if (v32 > 0.0)
  {
    float v35 = *(float *)(v1 + 680);
    BOOL v36 = v35 == 0.0;
    if (v35 <= 0.0)
    {
      float v37 = -v32;
      if (!v36) {
        float v37 = v32;
      }
      *(float *)(v1 + 680) = v37;
    }
  }
LABEL_81:
  double v68 = v7;
  double Width = (double)CVPixelBufferGetWidth(CVPixelBufferAtIndex);
  double Height = (double)CVPixelBufferGetHeight(CVPixelBufferAtIndex);
  CFIndex v40 = (const void *)*MEMORY[0x1E4F24BB0];
  CFTypeRef v30 = CVBufferCopyAttachment(CVPixelBufferAtIndex, (CFStringRef)*MEMORY[0x1E4F24BB0], 0);
  if (*(unsigned char *)(v1 + 553)) {
    goto LABEL_82;
  }
  if (theDict)
  {
    CFAllocatorRef v45 = CFDictionaryGetValue(theDict, @"HDRImageStatistics");
    if (v45)
    {
      uint64_t DataFromStatisticsDictionary = VTHDRMetadataGenerationSessionCreateDataFromStatisticsDictionary(*(void *)(v1 + 616), *(_DWORD *)(v1 + 672) == 2, *(unsigned char *)(v1 + 644), (uint64_t)v45, 0, (uint64_t)&cf, Width, Height);
      if (DataFromStatisticsDictionary)
      {
        uint64_t v14 = DataFromStatisticsDictionary;
LABEL_153:
        CGFloat v7 = v68;
        goto LABEL_102;
      }
    }
  }
  if (*(unsigned char *)(v1 + 608))
  {
    if (cf)
    {
      CGFloat v7 = v68;
      goto LABEL_124;
    }
    CFMutableSetRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      unsigned int v47 = (const void *)*MEMORY[0x1E4F24B38];
      CFTypeRef v48 = CVBufferCopyAttachment(CVPixelBufferAtIndex, (CFStringRef)*MEMORY[0x1E4F24B38], 0);
      if (v48)
      {
        CFDictionaryRef v49 = v48;
        CFDictionarySetValue(Mutable, v47, v48);
        CFRelease(v49);
      }
      CFTypeRef v50 = CVBufferCopyAttachment(CVPixelBufferAtIndex, @"Filtered", 0);
      if (v50)
      {
        uint64_t v51 = v50;
        CFDictionarySetValue(Mutable, @"Filtered", v50);
        CFRelease(v51);
      }
      CFTypeRef v52 = (const void *)*MEMORY[0x1E4F24B40];
      CFTypeRef v53 = CVBufferCopyAttachment(CVPixelBufferAtIndex, (CFStringRef)*MEMORY[0x1E4F24B40], 0);
      if (v53)
      {
        uint64_t v54 = v53;
        CFDictionarySetValue(Mutable, v52, v53);
        CFRelease(v54);
      }
      CFTypeRef v55 = CVBufferCopyAttachment(CVPixelBufferAtIndex, @"Raw", 0);
      if (v55)
      {
        uint64_t v56 = v55;
        CFDictionarySetValue(Mutable, @"Raw", v55);
        CFRelease(v56);
      }
      if (CFDictionaryGetCount(Mutable))
      {
        if (v30) {
          CFDictionarySetValue(Mutable, v40, v30);
        }
        uint64_t v14 = VTHDRMetadataGenerationSessionCreateDataFromStatisticsDictionary(*(void *)(v1 + 616), *(_DWORD *)(v1 + 672) == 2, *(unsigned char *)(v1 + 644), (uint64_t)Mutable, 0, (uint64_t)&cf, Width, Height);
        CFRelease(Mutable);
        if (v14) {
          goto LABEL_153;
        }
      }
      else
      {
        CFRelease(Mutable);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    CGFloat v7 = v68;
    if (cf) {
      goto LABEL_124;
    }
    CFTypeRef v57 = v67;
    if (v67) {
      CFTypeRef v57 = CFRetain(v67);
    }
    CFTypeRef cf = v57;
    if (v57) {
      goto LABEL_124;
    }
    goto LABEL_83;
  }
LABEL_82:
  CGFloat v7 = v68;
  if (cf) {
    goto LABEL_124;
  }
LABEL_83:
  LODWORD(rhs.value) = 0;
  uint64_t v76 = 0;
  float v75 = 0.0;
  int v85 = 0;
  memset((char *)v87 + 4, 0, 44);
  long long v84 = 0u;
  memset(time1, 0, sizeof(time1));
  BYTE2(v87[5]) = 1;
  double v86 = Width;
  *(double *)uint64_t v87 = Height;
  LOBYTE(v87[5]) = *(unsigned char *)(v1 + 644);
  int v41 = *(_DWORD *)(v1 + 672);
  if (v41 == 2)
  {
    uint64_t v43 = *(void *)(v1 + 616);
    int v44 = 1;
    goto LABEL_98;
  }
  if (v41 == 1)
  {
    memset(&time2, 0, sizeof(time2));
    uint64_t DataFromStatistics = VTHDRImageStatisticsGenerationSessionCreateStatistics(*(void *)(v1 + 624), CVPixelBufferAtIndex, (float *)&v76, (float *)&rhs, (float *)&v76 + 1, &v75);
    if (!DataFromStatistics)
    {
      *(double *)time1 = *(float *)&rhs.value;
      *(double *)&time1[8] = *((float *)&v76 + 1);
      *(double *)&time1[16] = *(float *)&v76;
      if (*(unsigned char *)(v1 + 644))
      {
        *(double *)&time1[24] = v75;
        *(double *)&long long v84 = *(float *)&v76;
        BYTE4(v87[5]) = 1;
      }
      if (v30)
      {
        CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)v30, &time2);
        *(CGRect *)&v87[1] = time2;
        BYTE5(v87[5]) = 1;
      }
      BYTE2(v87[5]) = 1;
      uint64_t v43 = *(void *)(v1 + 616);
      int v44 = 0;
LABEL_98:
      uint64_t DataFromStatistics = VTHDRMetadataGenerationSessionCreateDataFromStatistics(v43, v44, 1, (uint64_t)time1, 0, (uint64_t)&cf);
      if (!DataFromStatistics) {
        goto LABEL_124;
      }
    }
  }
  else
  {
    uint64_t DataFromStatistics = FigSignalErrorAt();
  }
  uint64_t v14 = DataFromStatistics;
LABEL_102:
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef v13 = 0;
LABEL_125:
  if (v30) {
    CFRelease(v30);
  }
  if (v14) {
    goto LABEL_40;
  }
  MEMORY[0x1997056B0](*(void *)(v1 + 104));
  uint64_t v58 = CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 128), v8);
  if (v58)
  {
    CFTypeRef v59 = (CFTypeRef)v58[1];
    if (v59 != v13)
    {
      v58[1] = v13;
      if (v13) {
        CFRetain(v13);
      }
      if (v59) {
        CFRelease(v59);
      }
    }
    MEMORY[0x1997056C0](*(void *)(v1 + 104));
  }
  else
  {
    uint64_t v14 = FigSignalErrorAt();
    MEMORY[0x1997056C0](*(void *)(v1 + 104));
    if (v14) {
      goto LABEL_40;
    }
  }
  if (*(unsigned char *)(v1 + 641))
  {
    uint64_t v14 = 0;
    if (*(unsigned char *)(v1 + 640) && theDict)
    {
      if (CFDictionaryContainsKey(theDict, @"AmbientViewingEnvironment")
        && (unint64_t v60 = CFDictionaryGetValue(theDict, @"AmbientViewingEnvironment"), !FigCFEqual()))
      {
        uint64_t updated = vtCompressionSessionUpdateAmbientViewingEnvironment(v1, v60);
        if (updated) {
          goto LABEL_38;
        }
        if (*(unsigned char *)(v1 + 642)) {
          uint64_t v14 = VTVideoEncoderSetProperty(*(void *)(v1 + 432), @"AmbientViewingEnvironment", (uint64_t)v60);
        }
        else {
          uint64_t v14 = 0;
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v14 = 0;
LABEL_14:
  if (!*(void *)(v1 + 880)) {
    *(void *)(v1 + 880) = CVBufferCopyAttachment(CVPixelBufferAtIndex, @"LogTransferFunction", 0);
  }
  if (v4)
  {
    if (*(unsigned char *)(v1 + 794)) {
      goto LABEL_40;
    }
    uint64_t v15 = *(void *)(v1 + 432);
    float64x2_t v16 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v16) {
      float64x2_t v17 = v16;
    }
    else {
      float64x2_t v17 = 0;
    }
    if (*v17 >= 4uLL)
    {
      uint64_t v25 = (uint64_t (*)(uint64_t, const void *, OpaqueCMTaggedBufferGroup *, unsigned char *, CGRect *, const __CFDictionary *, int *))v17[21];
      if (v25)
      {
        *(CGFloat *)time1 = v81;
        *(void *)&time1[8] = __PAIR64__(v6, v82);
        *(CGFloat *)&time1[16] = v7;
        time2.origin.x = v79;
        *(void *)&time2.origin.y = __PAIR64__(v71, v80);
        time2.size.width = v69;
        uint64_t updated = v25(v15, v8, v4, time1, &time2, theDict, &v72);
        goto LABEL_38;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(v1 + 794))
    {
      uint64_t v20 = *(void *)(v1 + 800);
      *(void *)(v20 + 72) = v2;
      *(CGFloat *)time1 = v81;
      *(void *)&time1[8] = __PAIR64__(v6, v82);
      *(CGFloat *)&time1[16] = v7;
      time2.origin.x = v79;
      *(void *)&time2.origin.y = __PAIR64__(v71, v80);
      time2.size.width = v69;
      uint64_t updated = VTRateControlSessionBeforeEncodeFrame(v20, (uint64_t)v8, (uint64_t)CVPixelBufferAtIndex, (long long *)time1, (long long *)&time2);
      if (updated)
      {
LABEL_38:
        uint64_t v14 = updated;
        goto LABEL_40;
      }
      if (*(unsigned char *)(v1 + 794))
      {
        uint64_t v14 = 0;
        goto LABEL_40;
      }
    }
    uint64_t v22 = *(void *)(v1 + 432);
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    CFAllocatorRef v26 = *(uint64_t (**)(uint64_t, const void *, __CVBuffer *, unsigned char *, CGRect *, const __CFDictionary *, int *))(v24 + 16);
    if (v26)
    {
      *(CGFloat *)time1 = v81;
      *(void *)&time1[8] = __PAIR64__(v6, v82);
      *(CGFloat *)&time1[16] = v7;
      time2.origin.x = v79;
      *(void *)&time2.origin.y = __PAIR64__(v71, v80);
      time2.size.width = v69;
      uint64_t updated = v26(v22, v8, CVPixelBufferAtIndex, time1, &time2, theDict, &v72);
      goto LABEL_38;
    }
  }
  uint64_t v14 = 4294954514;
LABEL_40:
  if (v13) {
    CFRelease(v13);
  }
LABEL_42:
  if (*(unsigned char *)(v1 + 794)) {
    BOOL v27 = v14 == 0;
  }
  else {
    BOOL v27 = 0;
  }
  if (!v27)
  {
    uint64_t v2 = v73;
    if (!v14)
    {
LABEL_48:
      if (*(unsigned char *)(v2 + 116)) {
        FigSemaphoreSignal();
      }
      vtCompressionSessionPipelineContextInvalidate(&v73);
      return;
    }
LABEL_47:
    vtCompressionSessionPipelineContextHandleError((uint64_t *)v2, v14);
    goto LABEL_48;
  }
}

uint64_t VTVideoEncoderSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t VTCompressionSessionCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  *a4 = 0;
  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
  {
LABEL_52:
    return FigSignalErrorAt();
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8)
  {
    return VTCompressionSessionRemote_CopyProperty(v8);
  }
  if (*(unsigned char *)(a1 + 794) && vtCompressionSessionIsPropertyHandledByRateControl(a1, a2))
  {
    uint64_t v10 = *(void *)(a1 + 800);
    return VTRateControlSessionCopyProperty(v10, (uint64_t)a2, a3, a4);
  }
  if (vtCompressionSessionIsPropertyHandledByVideoToolbox(a2))
  {
    if (CFEqual(@"NumberOfPendingFrames", a2))
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 104));
      *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(a1 + 120));
      uint64_t v11 = *(void *)(a1 + 104);
LABEL_15:
      MEMORY[0x1997056C0](v11);
      return 0;
    }
    if (CFEqual(@"PixelBufferPoolIsShared", a2))
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 464));
      uint64_t v12 = vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate(a1, 0, 0);
      MEMORY[0x1997056C0](*(void *)(a1 + 464));
      if (v12) {
        return v12;
      }
      float64x2_t v16 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (*(void *)(a1 + 488) != *(void *)(a1 + 496)) {
        float64x2_t v16 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      float64x2_t v17 = CFRetain(*v16);
LABEL_25:
      *a4 = v17;
      return v12;
    }
    if (CFEqual(@"VideoEncoderPixelBufferAttributes", a2))
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 464));
      unint64_t v19 = *(const void **)(a1 + 472);
      if (!v19)
      {
LABEL_37:
        uint64_t v11 = *(void *)(a1 + 464);
        goto LABEL_15;
      }
LABEL_36:
      *a4 = CFRetain(v19);
      goto LABEL_37;
    }
    if (CFEqual(@"PoolPixelBufferAttributesSeed", a2))
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 464));
      uint64_t v12 = vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate(a1, 0, 0);
      if (v12)
      {
LABEL_44:
        MEMORY[0x1997056C0](*(void *)(a1 + 464));
        return v12;
      }
      PixelBufferAttributes = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, (const void *)(a1 + 484));
LABEL_41:
      *a4 = PixelBufferAttributes;
      goto LABEL_44;
    }
    if (CFEqual(@"PoolPixelBufferAttributes", a2))
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 464));
      uint64_t v12 = vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate(a1, 0, 0);
      if (v12) {
        goto LABEL_44;
      }
      uint64_t v21 = *(__CVPixelBufferPool **)(a1 + 496);
      if (!v21) {
        uint64_t v21 = *(__CVPixelBufferPool **)(a1 + 488);
      }
      PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(v21);
      if (PixelBufferAttributes) {
        PixelBufferAttributes = CFRetain(PixelBufferAttributes);
      }
      goto LABEL_41;
    }
    if (CFEqual(@"PixelTransferProperties", a2))
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 464));
      unint64_t v19 = *(const void **)(a1 + 520);
      if (!v19) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
    if (CFEqual(@"MaximizePowerEfficiency", a2))
    {
      uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
      if (*(unsigned char *)(a1 + 529) != 1) {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_64;
    }
    if (CFEqual(@"AllowCompressedPixelFormats", a2))
    {
      if (*(unsigned char *)(a1 + 792) == 1 || !*(unsigned char *)(a1 + 793)) {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      else {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
      }
LABEL_64:
      float64x2_t v17 = *v22;
LABEL_65:
      float64x2_t v17 = CFRetain(v17);
LABEL_66:
      uint64_t v12 = 0;
      goto LABEL_25;
    }
    if (!CFEqual(@"PixelAspectRatio", a2)
      && !CFEqual(@"CleanAperture", a2)
      && !CFEqual(@"FieldCount", a2)
      && !CFEqual(@"FieldDetail", a2)
      && !CFEqual(@"ComponentRange", a2)
      && !CFEqual(@"ColorPrimaries", a2)
      && !CFEqual(@"TransferFunction", a2)
      && !CFEqual(@"YCbCrMatrix", a2)
      && !CFEqual(@"ICCProfile", a2)
      && !CFEqual(@"MasteringDisplayColorVolume", a2)
      && !CFEqual(@"ContentLightLevelInfo", a2)
      && !CFEqual(@"MultiPassStorage", a2)
      && !CFEqual(@"AuxiliaryTypeInfo", a2)
      && !CFEqual(@"ChromaLocationTopField", a2)
      && !CFEqual(@"ChromaLocationBottomField", a2)
      && !CFEqual(@"HasLeftStereoEyeView", a2)
      && !CFEqual(@"HasRightStereoEyeView", a2)
      && !CFEqual(@"HasEyeViewsReversed", a2)
      && !CFEqual(@"HasAdditionalViews", a2)
      && !CFEqual(@"HeroEye", a2)
      && !CFEqual(@"ProjectionKind", a2)
      && !CFEqual(@"ViewPackingKind", a2)
      && !CFEqual(@"TransportIdentifier", a2)
      && !CFEqual(@"WarpKind", a2)
      && !CFEqual(@"StereoCameraBaseline", a2)
      && !CFEqual(@"HorizontalDisparityAdjustment", a2)
      && !CFEqual(@"HorizontalFieldOfView", a2)
      && !CFEqual(@"PowerLogSessionID", a2))
    {
      if (CFEqual(@"RealTime", a2))
      {
        float64x2_t v17 = *(const void **)(a1 + 544);
        if (!v17) {
          goto LABEL_66;
        }
      }
      else if (CFEqual(@"AllowPixelTransfer", a2))
      {
        if (*(unsigned char *)(a1 + 528)) {
          BOOL v27 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        else {
          BOOL v27 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        float64x2_t v17 = *v27;
        if (!*v27) {
          goto LABEL_66;
        }
      }
      else
      {
        if (!CFEqual(@"EncoderID", a2)) {
          return 0;
        }
        float64x2_t v17 = *(const void **)(a1 + 456);
        if (!v17) {
          goto LABEL_66;
        }
      }
      goto LABEL_65;
    }
    if (!*(unsigned char *)(a1 + 96)
      && FigVideoCodecTypeIsHEVCFlavor(*(_DWORD *)(a1 + 48))
      && (CFEqual(@"ColorPrimaries", a2)
       || CFEqual(@"TransferFunction", a2)
       || CFEqual(@"YCbCrMatrix", a2)))
    {
      if (!vtCompressionSessionIsIPT(a1))
      {
        if ((!CFEqual(@"ColorPrimaries", a2) || (float64x2_t v17 = *(const void **)(a1 + 176)) == 0)
          && (!CFEqual(@"TransferFunction", a2) || (float64x2_t v17 = *(const void **)(a1 + 184)) == 0))
        {
          if (!CFEqual(@"YCbCrMatrix", a2)) {
            return 0;
          }
          float64x2_t v17 = *(const void **)(a1 + 200);
          if (!v17) {
            return 0;
          }
        }
        goto LABEL_65;
      }
      goto LABEL_105;
    }
    if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, a2))
    {
      uint64_t v23 = *(void *)(a1 + 432);
      return VTVideoEncoderCopyProperty(v23, (uint64_t)a2, a3, (uint64_t)a4);
    }
    if (CFEqual(@"PixelAspectRatio", a2))
    {
      float64x2_t v17 = *(const void **)(a1 + 136);
      if (!v17) {
        return 0;
      }
      goto LABEL_65;
    }
    if (CFEqual(@"CleanAperture", a2))
    {
      float64x2_t v17 = *(const void **)(a1 + 144);
      if (!v17) {
        return 0;
      }
      goto LABEL_65;
    }
    if (CFEqual(@"FieldCount", a2))
    {
      float64x2_t v17 = *(const void **)(a1 + 152);
      if (!v17) {
        return 0;
      }
      goto LABEL_65;
    }
    if (CFEqual(@"FieldDetail", a2))
    {
      float64x2_t v17 = *(const void **)(a1 + 160);
      if (!v17) {
        return 0;
      }
      goto LABEL_65;
    }
    if (CFEqual(@"ComponentRange", a2))
    {
      float64x2_t v17 = *(const void **)(a1 + 168);
      if (!v17) {
        return 0;
      }
      goto LABEL_65;
    }
    if (CFEqual(@"ColorPrimaries", a2))
    {
      if (!*(void *)(a1 + 176)) {
        return 0;
      }
      if (!vtCompressionSessionIsIPT(a1))
      {
        float64x2_t v17 = *(const void **)(a1 + 176);
        goto LABEL_65;
      }
LABEL_105:
      uint64_t v12 = 0;
      *a4 = 0;
      return v12;
    }
    if (CFEqual(@"TransferFunction", a2))
    {
      if (!*(void *)(a1 + 184)) {
        return 0;
      }
      if (!vtCompressionSessionIsIPT(a1))
      {
        float64x2_t v17 = *(const void **)(a1 + 184);
        goto LABEL_65;
      }
      goto LABEL_105;
    }
    if (CFEqual(@"GammaLevel", a2))
    {
      float64x2_t v17 = *(const void **)(a1 + 192);
      if (!v17) {
        return 0;
      }
      goto LABEL_65;
    }
    if (CFEqual(@"YCbCrMatrix", a2))
    {
      if (!*(void *)(a1 + 200)) {
        return 0;
      }
      if (!vtCompressionSessionIsIPT(a1))
      {
        float64x2_t v17 = *(const void **)(a1 + 200);
        goto LABEL_65;
      }
      goto LABEL_105;
    }
    if (CFEqual(@"AmbientViewingEnvironment", a2))
    {
      float64x2_t v17 = *(const void **)(a1 + 656);
      if (!v17) {
        return 0;
      }
      goto LABEL_65;
    }
    if (CFEqual(@"ICCProfile", a2))
    {
      float64x2_t v17 = *(const void **)(a1 + 208);
      if (!v17) {
        return 0;
      }
      goto LABEL_65;
    }
    if (CFEqual(@"MasteringDisplayColorVolume", a2))
    {
      float64x2_t v17 = *(const void **)(a1 + 216);
      if (!v17) {
        return 0;
      }
      goto LABEL_65;
    }
    if (CFEqual(@"ContentLightLevelInfo", a2))
    {
      float64x2_t v17 = *(const void **)(a1 + 224);
      if (!v17) {
        return 0;
      }
      goto LABEL_65;
    }
    if (!CFEqual(@"MultiPassStorage", a2))
    {
      if (CFEqual(@"AuxiliaryTypeInfo", a2))
      {
        float64x2_t v17 = *(const void **)(a1 + 232);
        if (!v17) {
          return 0;
        }
        goto LABEL_65;
      }
      if (CFEqual(@"ChromaLocationTopField", a2))
      {
        float64x2_t v17 = *(const void **)(a1 + 240);
        if (!v17) {
          return 0;
        }
        goto LABEL_65;
      }
      if (CFEqual(@"ChromaLocationBottomField", a2))
      {
        float64x2_t v17 = *(const void **)(a1 + 248);
        if (!v17) {
          return 0;
        }
        goto LABEL_65;
      }
      if (CFEqual(@"HasLeftStereoEyeView", a2))
      {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
        int v24 = *(unsigned __int8 *)(a1 + 688);
      }
      else if (CFEqual(@"HasRightStereoEyeView", a2))
      {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
        int v24 = *(unsigned __int8 *)(a1 + 689);
      }
      else if (CFEqual(@"HasEyeViewsReversed", a2))
      {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
        int v24 = *(unsigned __int8 *)(a1 + 690);
      }
      else
      {
        if (!CFEqual(@"HasAdditionalViews", a2))
        {
          if (CFEqual(@"HeroEye", a2))
          {
            float64x2_t v17 = *(const void **)(a1 + 696);
            if (!v17) {
              goto LABEL_66;
            }
            goto LABEL_65;
          }
          if (CFEqual(@"ProjectionKind", a2))
          {
            float64x2_t v17 = *(const void **)(a1 + 704);
            if (!v17) {
              goto LABEL_66;
            }
            goto LABEL_65;
          }
          if (CFEqual(@"ViewPackingKind", a2))
          {
            float64x2_t v17 = *(const void **)(a1 + 712);
            if (!v17) {
              goto LABEL_66;
            }
            goto LABEL_65;
          }
          if (CFEqual(@"TransportIdentifier", a2))
          {
            if (!*(unsigned char *)(a1 + 720)) {
              return 0;
            }
            CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFAllocatorRef v26 = (const void *)(a1 + 724);
          }
          else
          {
            if (CFEqual(@"WarpKind", a2))
            {
              float64x2_t v17 = *(const void **)(a1 + 728);
              if (!v17) {
                goto LABEL_66;
              }
              goto LABEL_65;
            }
            if (CFEqual(@"StereoCameraBaseline", a2))
            {
              if (!*(unsigned char *)(a1 + 736)) {
                return 0;
              }
              CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFAllocatorRef v26 = (const void *)(a1 + 740);
            }
            else
            {
              if (!CFEqual(@"HorizontalDisparityAdjustment", a2))
              {
                if (CFEqual(@"HorizontalFieldOfView", a2))
                {
                  float64x2_t v17 = *(const void **)(a1 + 264);
                  if (!v17) {
                    return 0;
                  }
                }
                else
                {
                  if (!CFEqual(@"PowerLogSessionID", a2)) {
                    return 0;
                  }
                  float64x2_t v17 = *(const void **)(a1 + 816);
                  if (!v17) {
                    goto LABEL_66;
                  }
                }
                goto LABEL_65;
              }
              if (!*(unsigned char *)(a1 + 744)) {
                return 0;
              }
              CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFAllocatorRef v26 = (const void *)(a1 + 748);
            }
          }
          float64x2_t v17 = CFNumberCreate(v25, kCFNumberSInt32Type, v26);
          goto LABEL_66;
        }
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFD0];
        int v24 = *(unsigned __int8 *)(a1 + 691);
      }
      if (!v24) {
        uint64_t v22 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      goto LABEL_64;
    }
    goto LABEL_52;
  }
  if (!vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, a2)) {
    return 4294954396;
  }
  uint64_t v13 = *(void *)(a1 + 432);
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  BOOL v18 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v15 + 48);
  if (!v18) {
    return 4294954514;
  }

  return v18(v13, a2, a3, a4);
}

uint64_t vtRateControlReactionObserverCallback(uint64_t a1, int a2)
{
  if (!a1 || *(_DWORD *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  uint64_t v2 = (const __CFNumber **)MEMORY[0x1E4F1CFD0];
  if (!a2) {
    uint64_t v2 = (const __CFNumber **)MEMORY[0x1E4F1CFC8];
  }
  return VTCompressionSessionSetProperty(a1, @"AVCaptureDeviceReactionEffectsInProgress", *v2);
}

uint64_t VTCompressionSessionCopySupportedPropertyDictionary(uint64_t a1, void *a2)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  CFTypeRef v16 = 0;
  CFTypeRef v17 = 0;
  CFTypeRef cf = 0;
  memset(v18, 0, 24);
  *a2 = 0;
  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
  {
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_35;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    return VTCompressionSessionRemote_CopySupportedPropertyDictionary(v4);
  }
  uint64_t v6 = *(void *)(a1 + 432);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  unsigned int v9 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v8 + 32);
  if (v9)
  {
    uint64_t v10 = v9(v6, &v17);
    if (v10 != -12782)
    {
      uint64_t v11 = v10;
      if (v10) {
        goto LABEL_16;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 794)) {
    goto LABEL_19;
  }
  uint64_t v12 = VTRateControlSessionCopySupportedPropertyDictionary(*(void *)(a1 + 800), &cf);
  if (!v12)
  {
    if (cf)
    {
      v18[0] = cf;
      uint64_t v13 = 1;
LABEL_20:
      uint64_t v14 = vtCompressionSessionCopyPropertiesHandledByVideoToolbox(&v16);
      if (!v14)
      {
        if (v17) {
          v18[v13++] = v17;
        }
        if (v16) {
          v18[v13] = v16;
        }
        uint64_t v14 = FigCFCreateCombinedDictionary();
        if (!v14)
        {
          uint64_t v11 = 0;
          *a2 = 0;
          goto LABEL_27;
        }
      }
LABEL_35:
      uint64_t v11 = v14;
      goto LABEL_27;
    }
LABEL_19:
    uint64_t v13 = 0;
    goto LABEL_20;
  }
  uint64_t v11 = v12;
LABEL_16:
  FigSignalErrorAt();
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v11;
}

uint64_t vtCompressionSessionCopyPropertiesHandledByVideoToolbox(CFTypeRef *a1)
{
  MEMORY[0x199705810](&sCreatePropertiesHandledByVideoToolboxOnce, vtCompressionSessionCreatePropertiesHandledByVideoToolbox);
  if (a1 && sVTCompressionSessionPropertiesHandledByVideoToolbox)
  {
    *a1 = CFRetain((CFTypeRef)sVTCompressionSessionPropertiesHandledByVideoToolbox);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtCompressionSessionIsPropertySupported(uint64_t a1, const void *a2)
{
  CFDictionaryRef theDict = 0;
  VTCompressionSessionCopySupportedPropertyDictionary(a1, &theDict);
  if (!theDict) {
    return 0;
  }
  uint64_t v3 = CFDictionaryContainsKey(theDict, a2);
  CFRelease(theDict);
  return v3;
}

uint64_t VTCompressionSessionSetProperty(uint64_t a1, void *value, const __CFNumber *a3)
{
  if (!a1 || *(_DWORD *)(a1 + 16) == 2) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    return VTCompressionSessionRemote_SetProperty(v6, value, (uint64_t)a3);
  }
  vtCoreAnalyticsSaveUserConfiguredCompressionProperty(value, (uint64_t)a3, a1);
  if (*(unsigned char *)(a1 + 794) && vtCompressionSessionIsPropertyHandledByRateControl(a1, value))
  {
    uint64_t v8 = *(void *)(a1 + 800);
    return VTRateControlSessionSetProperty(v8);
  }
  if (!vtCompressionSessionIsPropertyHandledByVideoToolbox(value))
  {
    if (!vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, value)) {
      goto LABEL_18;
    }
    if (!*(unsigned char *)(a1 + 794) && *(unsigned char *)(a1 + 795) && vtCompressionSessionIsPropertyHandledByRateControl(a1, value)) {
      VTRateControlSessionSetProperty(*(void *)(a1 + 800));
    }
    uint64_t v9 = *(void *)(a1 + 432);
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, void *, const __CFNumber *))(v11 + 56);
    if (v12) {
      uint64_t v13 = v12(v9, value, a3);
    }
    else {
      uint64_t v13 = 4294954514;
    }
    if (!CFEqual(@"AverageDataRate", value)
      && !CFEqual(@"AverageBitRate", value)
      && !CFEqual(@"ConvergenceDurationForAverageDataRate", value)
      && !CFEqual(@"DataRateLimits", value)
      && !CFEqual(@"MoreFramesBeforeStart", value)
      && !CFEqual(@"MoreFramesAfterEnd", value)
      && !CFEqual(@"RequestedMaxEncoderLatency", value)
      && !CFEqual(@"SourceFrameCount", value)
      && !CFEqual(@"ExpectedFrameRate", value)
      && !CFEqual(@"ExpectedDuration", value))
    {
      *(unsigned char *)(a1 + 256) = 1;
    }
    if (CFEqual(@"ProfileLevel", value))
    {
      CFNumberRef v14 = *(const __CFNumber **)(a1 + 560);
      if (v14 == a3) {
        return v13;
      }
      *(void *)(a1 + 560) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (!v14) {
        return v13;
      }
      CFNumberRef v15 = v14;
      goto LABEL_46;
    }
    if (CFEqual(@"ExpectedFrameRate", value))
    {
      CFTypeRef v16 = (_DWORD *)(a1 + 680);
      if (a3)
      {
        CFNumberRef v17 = a3;
        CFNumberType v18 = kCFNumberFloat32Type;
LABEL_56:
        CFNumberGetValue(v17, v18, v16);
        return v13;
      }
    }
    else
    {
      if (!CFEqual(@"OutputBitDepth", value)) {
        return v13;
      }
      CFTypeRef v16 = (_DWORD *)(a1 + 568);
      if (a3)
      {
        CFNumberRef v17 = a3;
        CFNumberType v18 = kCFNumberSInt32Type;
        goto LABEL_56;
      }
    }
    _DWORD *v16 = 0;
    return v13;
  }
  if (CFEqual(@"PixelBufferPoolIsShared", value)
    || CFEqual(@"VideoEncoderPixelBufferAttributes", value)
    || CFEqual(@"PoolPixelBufferAttributesSeed", value)
    || CFEqual(@"PoolPixelBufferAttributes", value)
    || CFEqual(@"NumberOfPendingFrames", value))
  {
    goto LABEL_18;
  }
  if (!CFEqual(@"PixelTransferProperties", value))
  {
    if (CFEqual(@"PixelAspectRatio", value)
      || CFEqual(@"CleanAperture", value)
      || CFEqual(@"FieldCount", value)
      || CFEqual(@"FieldDetail", value)
      || CFEqual(@"ComponentRange", value)
      || CFEqual(@"ColorPrimaries", value)
      || CFEqual(@"TransferFunction", value)
      || CFEqual(@"GammaLevel", value)
      || CFEqual(@"YCbCrMatrix", value)
      || CFEqual(@"ICCProfile", value)
      || CFEqual(@"MasteringDisplayColorVolume", value)
      || CFEqual(@"ContentLightLevelInfo", value)
      || CFEqual(@"MultiPassStorage", value)
      || CFEqual(@"AuxiliaryTypeInfo", value)
      || CFEqual(@"ChromaLocationTopField", value)
      || CFEqual(@"ChromaLocationBottomField", value)
      || CFEqual(@"AmbientViewingEnvironment", value)
      || CFEqual(@"PrepareEncodedSampleBuffersForPaddedWrites", value)
      || CFEqual(@"HasLeftStereoEyeView", value)
      || CFEqual(@"HasRightStereoEyeView", value)
      || CFEqual(@"HasEyeViewsReversed", value)
      || CFEqual(@"HasAdditionalViews", value)
      || CFEqual(@"HeroEye", value)
      || CFEqual(@"ProjectionKind", value)
      || CFEqual(@"ViewPackingKind", value)
      || CFEqual(@"TransportIdentifier", value)
      || CFEqual(@"WarpKind", value)
      || CFEqual(@"StereoCameraBaseline", value)
      || CFEqual(@"HorizontalDisparityAdjustment", value)
      || CFEqual(@"HorizontalFieldOfView", value)
      || CFEqual(@"PowerLogSessionID", value))
    {
      if (CFEqual(@"PixelAspectRatio", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidatePixelAspectRatio((uint64_t)a3);
        goto LABEL_122;
      }
      if (CFEqual(@"CleanAperture", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidateCleanAperture(a1, a3);
        goto LABEL_122;
      }
      if (CFEqual(@"FieldCount", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidateFieldCount((uint64_t)a3);
        goto LABEL_122;
      }
      if (CFEqual(@"FieldDetail", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidateFieldDetail(a3);
        goto LABEL_122;
      }
      if (CFEqual(@"ComponentRange", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidatePixelFormatComponentRange(a3);
        goto LABEL_122;
      }
      if (CFEqual(@"ColorPrimaries", value))
      {
        uint64_t v13 = vtCompressionSessionValidateColorPrimaries(a3);
        if (v13) {
          return v13;
        }
        CFNumberRef v30 = *(const __CFNumber **)(a1 + 176);
        if (v30 == a3) {
          goto LABEL_123;
        }
        *(void *)(a1 + 176) = a3;
        if (!a3) {
          goto LABEL_154;
        }
        goto LABEL_153;
      }
      if (CFEqual(@"TransferFunction", value))
      {
        uint64_t v13 = vtCompressionSessionValidateTransferFunction(a3);
        if (v13) {
          return v13;
        }
        CFNumberRef v30 = *(const __CFNumber **)(a1 + 184);
        if (v30 == a3) {
          goto LABEL_123;
        }
        *(void *)(a1 + 184) = a3;
        if (!a3) {
          goto LABEL_154;
        }
        goto LABEL_153;
      }
      if (CFEqual(@"GammaLevel", value))
      {
        uint64_t v13 = vtCompressionSessionValidateGammaLevel((uint64_t)a3);
        if (v13) {
          return v13;
        }
        CFNumberRef v30 = *(const __CFNumber **)(a1 + 192);
        if (v30 == a3) {
          goto LABEL_123;
        }
        *(void *)(a1 + 192) = a3;
        if (!a3) {
          goto LABEL_154;
        }
        goto LABEL_153;
      }
      if (CFEqual(@"YCbCrMatrix", value))
      {
        uint64_t v13 = vtCompressionSessionValidateYCbCrMatrix(a3);
        if (v13) {
          return v13;
        }
        CFNumberRef v30 = *(const __CFNumber **)(a1 + 200);
        if (v30 == a3) {
          goto LABEL_123;
        }
        *(void *)(a1 + 200) = a3;
        if (!a3) {
          goto LABEL_154;
        }
        goto LABEL_153;
      }
      if (CFEqual(@"ICCProfile", value))
      {
        uint64_t v13 = vtCompressionSessionValidateICCProfile(a3);
        if (v13) {
          return v13;
        }
        CFNumberRef v30 = *(const __CFNumber **)(a1 + 208);
        if (v30 == a3) {
          goto LABEL_123;
        }
        *(void *)(a1 + 208) = a3;
        if (!a3) {
          goto LABEL_154;
        }
LABEL_153:
        CFRetain(a3);
LABEL_154:
        if (v30) {
          CFRelease(v30);
        }
        long long v31 = *(const void **)(a1 + 384);
        if (v31)
        {
          CFRelease(v31);
          *(void *)(a1 + 384) = 0;
        }
        goto LABEL_123;
      }
      if (CFEqual(@"MasteringDisplayColorVolume", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidateMasteringDisplayColorVolume(a3);
        goto LABEL_122;
      }
      if (CFEqual(@"ContentLightLevelInfo", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidateContentLightLevelInfo(a3);
        goto LABEL_122;
      }
      if (CFEqual(@"AmbientViewingEnvironment", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidateAmbientViewingEnvironment(a3);
        goto LABEL_122;
      }
      if (CFEqual(@"MultiPassStorage", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidateMultiPassStorage(a3);
        goto LABEL_122;
      }
      if (CFEqual(@"AuxiliaryTypeInfo", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidateAuxiliaryTypeInfo(a3);
        goto LABEL_122;
      }
      if (CFEqual(@"ChromaLocationTopField", value) || CFEqual(@"ChromaLocationBottomField", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidateChromaLocation(a3);
        goto LABEL_122;
      }
      if (CFEqual(@"PrepareEncodedSampleBuffersForPaddedWrites", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidatePrepareEncodedSampleBuffersForPaddedWrites(a3);
        goto LABEL_122;
      }
      if (CFEqual(@"HasLeftStereoEyeView", value)
        || CFEqual(@"HasRightStereoEyeView", value)
        || CFEqual(@"HasEyeViewsReversed", value)
        || CFEqual(@"HasAdditionalViews", value))
      {
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidateHasLeftStereoEyeView(a3);
        goto LABEL_122;
      }
      if (CFEqual(@"HeroEye", value)
        || CFEqual(@"ProjectionKind", value)
        || CFEqual(@"ViewPackingKind", value))
      {
        goto LABEL_271;
      }
      if (CFEqual(@"TransportIdentifier", value)) {
        goto LABEL_288;
      }
      if (CFEqual(@"WarpKind", value))
      {
LABEL_271:
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidateHeroEye(a3);
        goto LABEL_122;
      }
      if (CFEqual(@"StereoCameraBaseline", value)
        || CFEqual(@"HorizontalDisparityAdjustment", value)
        || CFEqual(@"HorizontalFieldOfView", value))
      {
LABEL_288:
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidateTransportIdentifier(a3);
      }
      else
      {
        if (!CFEqual(@"PowerLogSessionID", value)) {
          goto LABEL_123;
        }
        uint64_t HasLeftStereoEyeView = vtCompressionSessionValidatePowerLogSessionID(a3);
      }
LABEL_122:
      uint64_t v13 = HasLeftStereoEyeView;
      if (!HasLeftStereoEyeView)
      {
LABEL_123:
        if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, value))
        {
          if (*(unsigned char *)(a1 + 96) == 1
            || !FigVideoCodecTypeIsHEVCFlavor(*(_DWORD *)(a1 + 48))
            || !CFEqual(@"ColorPrimaries", value)
            && !CFEqual(@"TransferFunction", value)
            && !CFEqual(@"YCbCrMatrix", value))
          {
            uint64_t v13 = VTVideoEncoderSetProperty(*(void *)(a1 + 432), (uint64_t)value, (uint64_t)a3);
            if (v13)
            {
LABEL_139:
              *(unsigned char *)(a1 + 256) = 1;
              return v13;
            }
            if (CFEqual(@"MultiPassStorage", value))
            {
              CFTypeRef v29 = *(const void **)(a1 + 760);
              *(void *)(a1 + 760) = a3;
              if (!a3) {
                goto LABEL_136;
              }
LABEL_135:
              CFRetain(a3);
              goto LABEL_136;
            }
          }
LABEL_138:
          uint64_t v13 = 0;
          goto LABEL_139;
        }
        if (CFEqual(@"PixelAspectRatio", value))
        {
          CFTypeRef v29 = *(const void **)(a1 + 136);
          *(void *)(a1 + 136) = a3;
          if (!a3) {
            goto LABEL_136;
          }
          goto LABEL_135;
        }
        if (CFEqual(@"CleanAperture", value))
        {
          CFTypeRef v29 = *(const void **)(a1 + 144);
          *(void *)(a1 + 144) = a3;
          if (a3) {
            goto LABEL_135;
          }
          goto LABEL_136;
        }
        if (CFEqual(@"FieldCount", value))
        {
          CFTypeRef v29 = *(const void **)(a1 + 152);
          *(void *)(a1 + 152) = a3;
          if (a3) {
            goto LABEL_135;
          }
          goto LABEL_136;
        }
        if (CFEqual(@"FieldDetail", value))
        {
          CFTypeRef v29 = *(const void **)(a1 + 160);
          *(void *)(a1 + 160) = a3;
          if (a3) {
            goto LABEL_135;
          }
          goto LABEL_136;
        }
        if (CFEqual(@"ComponentRange", value))
        {
          CFTypeRef v29 = *(const void **)(a1 + 168);
          *(void *)(a1 + 168) = a3;
          if (a3) {
            goto LABEL_135;
          }
          goto LABEL_136;
        }
        if (CFEqual(@"ColorPrimaries", value))
        {
          float v32 = *(const void **)(a1 + 176);
          *(void *)(a1 + 176) = a3;
          if (!a3) {
            goto LABEL_169;
          }
          goto LABEL_168;
        }
        if (CFEqual(@"TransferFunction", value))
        {
          float v32 = *(const void **)(a1 + 184);
          *(void *)(a1 + 184) = a3;
          if (!a3) {
            goto LABEL_169;
          }
LABEL_168:
          CFRetain(a3);
          goto LABEL_169;
        }
        if (CFEqual(@"GammaLevel", value))
        {
          float v32 = *(const void **)(a1 + 192);
          *(void *)(a1 + 192) = a3;
          if (a3) {
            goto LABEL_168;
          }
LABEL_169:
          if (v32) {
            CFRelease(v32);
          }
          CFTypeRef v33 = *(const void **)(a1 + 384);
          if (v33)
          {
            CFRelease(v33);
            uint64_t v13 = 0;
            *(void *)(a1 + 384) = 0;
            goto LABEL_139;
          }
          goto LABEL_138;
        }
        if (CFEqual(@"YCbCrMatrix", value))
        {
          float v32 = *(const void **)(a1 + 200);
          *(void *)(a1 + 200) = a3;
          if (a3) {
            goto LABEL_168;
          }
          goto LABEL_169;
        }
        if (CFEqual(@"ICCProfile", value))
        {
          float v32 = *(const void **)(a1 + 208);
          *(void *)(a1 + 208) = a3;
          if (a3) {
            goto LABEL_168;
          }
          goto LABEL_169;
        }
        if (CFEqual(@"MasteringDisplayColorVolume", value))
        {
          float v32 = *(const void **)(a1 + 216);
          *(void *)(a1 + 216) = a3;
          if (a3) {
            goto LABEL_168;
          }
          goto LABEL_169;
        }
        if (CFEqual(@"ContentLightLevelInfo", value))
        {
          float v32 = *(const void **)(a1 + 224);
          *(void *)(a1 + 224) = a3;
          if (a3) {
            goto LABEL_168;
          }
          goto LABEL_169;
        }
        if (CFEqual(@"AmbientViewingEnvironment", value))
        {
          CFTypeRef v29 = *(const void **)(a1 + 656);
          *(void *)(a1 + 656) = a3;
          if (a3) {
            goto LABEL_135;
          }
          goto LABEL_136;
        }
        if (!CFEqual(@"MultiPassStorage", value))
        {
          if (CFEqual(@"AuxiliaryTypeInfo", value))
          {
            CFTypeRef v29 = *(const void **)(a1 + 232);
            *(void *)(a1 + 232) = a3;
            if (a3) {
              goto LABEL_135;
            }
            goto LABEL_136;
          }
          if (CFEqual(@"ChromaLocationTopField", value))
          {
            CFTypeRef v29 = *(const void **)(a1 + 240);
            *(void *)(a1 + 240) = a3;
            if (a3) {
              goto LABEL_135;
            }
            goto LABEL_136;
          }
          if (CFEqual(@"ChromaLocationBottomField", value))
          {
            CFTypeRef v29 = *(const void **)(a1 + 248);
            *(void *)(a1 + 248) = a3;
            if (a3) {
              goto LABEL_135;
            }
            goto LABEL_136;
          }
          if (CFEqual(@"PrepareEncodedSampleBuffersForPaddedWrites", value))
          {
            if (a3 && (CFTypeID v34 = CFGetTypeID(a3), v34 == CFBooleanGetTypeID()))
            {
              uint64_t v13 = 0;
              *(unsigned char *)(a1 + 424) = CFBooleanGetValue(a3);
            }
            else
            {
              uint64_t v13 = FigSignalErrorAt();
            }
            goto LABEL_139;
          }
          if (CFEqual(@"HasLeftStereoEyeView", value))
          {
            uint64_t v13 = 0;
            *(unsigned char *)(a1 + 688) = *MEMORY[0x1E4F1CFD0] == (void)a3;
            goto LABEL_139;
          }
          if (CFEqual(@"HasRightStereoEyeView", value))
          {
            uint64_t v13 = 0;
            *(unsigned char *)(a1 + 689) = *MEMORY[0x1E4F1CFD0] == (void)a3;
            goto LABEL_139;
          }
          if (CFEqual(@"HasEyeViewsReversed", value))
          {
            uint64_t v13 = 0;
            *(unsigned char *)(a1 + 690) = *MEMORY[0x1E4F1CFD0] == (void)a3;
            goto LABEL_139;
          }
          if (CFEqual(@"HasAdditionalViews", value))
          {
            uint64_t v13 = 0;
            *(unsigned char *)(a1 + 691) = *MEMORY[0x1E4F1CFD0] == (void)a3;
            goto LABEL_139;
          }
          if (CFEqual(@"HeroEye", value))
          {
            CFTypeRef v29 = *(const void **)(a1 + 696);
            *(void *)(a1 + 696) = a3;
            if (a3) {
              goto LABEL_135;
            }
            goto LABEL_136;
          }
          if (CFEqual(@"ProjectionKind", value))
          {
            CFTypeRef v29 = *(const void **)(a1 + 704);
            *(void *)(a1 + 704) = a3;
            if (a3) {
              goto LABEL_135;
            }
            goto LABEL_136;
          }
          if (CFEqual(@"ViewPackingKind", value))
          {
            CFTypeRef v29 = *(const void **)(a1 + 712);
            *(void *)(a1 + 712) = a3;
            if (a3) {
              goto LABEL_135;
            }
            goto LABEL_136;
          }
          if (CFEqual(@"TransportIdentifier", value))
          {
            if (!a3)
            {
              uint64_t v13 = 0;
              *(unsigned char *)(a1 + 720) = 0;
              goto LABEL_139;
            }
            *(unsigned char *)(a1 + 720) = 1;
            float v35 = (void *)(a1 + 724);
          }
          else
          {
            if (CFEqual(@"WarpKind", value))
            {
              CFTypeRef v29 = *(const void **)(a1 + 728);
              *(void *)(a1 + 728) = a3;
              if (a3) {
                goto LABEL_135;
              }
              goto LABEL_136;
            }
            if (CFEqual(@"StereoCameraBaseline", value))
            {
              if (!a3)
              {
                uint64_t v13 = 0;
                *(unsigned char *)(a1 + 736) = 0;
                goto LABEL_139;
              }
              *(unsigned char *)(a1 + 736) = 1;
              float v35 = (void *)(a1 + 740);
            }
            else
            {
              if (!CFEqual(@"HorizontalDisparityAdjustment", value))
              {
                if (CFEqual(@"HorizontalFieldOfView", value))
                {
                  CFTypeRef v29 = *(const void **)(a1 + 264);
                  *(void *)(a1 + 264) = a3;
                  if (a3) {
                    goto LABEL_135;
                  }
                }
                else
                {
                  if (!CFEqual(@"PowerLogSessionID", value)) {
                    goto LABEL_138;
                  }
                  CFTypeRef v29 = *(const void **)(a1 + 816);
                  *(void *)(a1 + 816) = a3;
                  if (a3) {
                    goto LABEL_135;
                  }
                }
LABEL_136:
                if (v29) {
                  CFRelease(v29);
                }
                goto LABEL_138;
              }
              if (!a3)
              {
                uint64_t v13 = 0;
                *(unsigned char *)(a1 + 744) = 0;
                goto LABEL_139;
              }
              *(unsigned char *)(a1 + 744) = 1;
              float v35 = (void *)(a1 + 748);
            }
          }
          CFNumberGetValue(a3, kCFNumberSInt32Type, v35);
          goto LABEL_138;
        }
LABEL_18:
        return FigSignalErrorAt();
      }
      return v13;
    }
    if (CFEqual(@"MaximizePowerEfficiency", value))
    {
      if (a3)
      {
        CFTypeID v36 = CFGetTypeID(a3);
        if (v36 == CFBooleanGetTypeID())
        {
          *(unsigned char *)(a1 + 529) = CFBooleanGetValue(a3);
          goto LABEL_110;
        }
      }
      goto LABEL_18;
    }
    if (CFEqual(@"HDRMetadataInsertionMode", value))
    {
      if (!*(unsigned char *)(a1 + 552)) {
        return 0;
      }
      if (*(unsigned char *)(a1 + 96)) {
        goto LABEL_18;
      }
      uint64_t updated = vtCompressionSessionValidateHDRMetadata(a1, a3);
      if (!updated)
      {
        uint64_t v13 = 0;
        if (FigCFEqual()) {
          uint64_t v38 = (void *)MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v38 = (void *)MEMORY[0x1E4F1CFC8];
        }
        *(void *)(a1 + 576) = *v38;
        return v13;
      }
      return updated;
    }
    if (CFEqual(@"PreserveDynamicHDRMetadata", value))
    {
      uint64_t v13 = 0;
      if (!a3 || !*(unsigned char *)(a1 + 552)) {
        return v13;
      }
      CFTypeID v39 = CFGetTypeID(a3);
      if (v39 != CFBooleanGetTypeID()) {
        return 0;
      }
      uint64_t v13 = 0;
      *(unsigned char *)(a1 + 608) = CFBooleanGetValue(a3);
      return v13;
    }
    if (CFEqual(@"AmbientViewingEnvironment", value))
    {
      if (!*(unsigned char *)(a1 + 641)) {
        return 0;
      }
      *(unsigned char *)(a1 + 642) = vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, value);
      uint64_t updated = vtCompressionSessionUpdateAmbientViewingEnvironment(a1, a3);
      if (*(unsigned char *)(a1 + 642)) {
        goto LABEL_111;
      }
      return updated;
    }
    if (!CFEqual(@"FigThreadPriority", value)
      && !CFEqual(@"ClientPID", value)
      && !CFEqual(@"RealTime", value))
    {
      if (!CFEqual(@"AllowPixelTransfer", value)) {
        return 0;
      }
      if (a3)
      {
        CFTypeID v44 = CFGetTypeID(a3);
        if (v44 == CFBooleanGetTypeID())
        {
          uint64_t v13 = 0;
          *(unsigned char *)(a1 + 528) = (const __CFNumber *)*MEMORY[0x1E4F1CFD0] == a3;
          return v13;
        }
      }
      goto LABEL_18;
    }
    if (a3)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        if (CFEqual(@"FigThreadPriority", value))
        {
          int v41 = (void *)(a1 + 532);
        }
        else
        {
          if (!CFEqual(@"ClientPID", value))
          {
LABEL_344:
            if (*(void *)(a1 + 504))
            {
              if (CFEqual(@"ClientPID", value)) {
                VTSessionSetProperty(*(VTSessionRef *)(a1 + 504), @"ClientPID", a3);
              }
              if (CFEqual(@"RealTime", value)) {
                VTSessionSetProperty(*(VTSessionRef *)(a1 + 504), @"RealTime", a3);
              }
            }
            if (*(void *)(a1 + 376))
            {
              if (CFEqual(@"ClientPID", value)) {
                VTSessionSetProperty(*(VTSessionRef *)(a1 + 376), @"ClientPID", a3);
              }
              if (CFEqual(@"RealTime", value)) {
                VTSessionSetProperty(*(VTSessionRef *)(a1 + 376), @"RealTime", a3);
              }
            }
            uint64_t v13 = vtCompressionSessionDispatchQueuesUpdatePriorityAndClientPID((void *)a1);
            if (v13) {
              return v13;
            }
            uint64_t v13 = vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, value)
                ? VTVideoEncoderSetProperty(*(void *)(a1 + 432), (uint64_t)value, (uint64_t)a3)
                : 0;
            if (!CFEqual(@"RealTime", value)
              || !vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"FigThreadPriority")
              || *(_DWORD *)(a1 + 532))
            {
              return v13;
            }
            uint64_t v45 = *(void *)(a1 + 544);
            if (*MEMORY[0x1E4F1CFD0] == v45)
            {
              int valuePtr = 0;
            }
            else
            {
              BOOL v46 = *MEMORY[0x1E4F1CFC8] == v45;
              int valuePtr = 8 * v46;
              if (!v46) {
                return v13;
              }
            }
            CFNumberRef v47 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
            VTVideoEncoderSetProperty(*(void *)(a1 + 432), @"FigThreadPriority", (uint64_t)v47);
            if (!v47) {
              return v13;
            }
            CFNumberRef v15 = v47;
LABEL_46:
            CFRelease(v15);
            return v13;
          }
          int v41 = (void *)(a1 + 536);
        }
        CFNumberGetValue(a3, kCFNumberSInt32Type, v41);
        goto LABEL_344;
      }
      if (!CFEqual(@"RealTime", value)) {
        goto LABEL_18;
      }
      CFTypeID v43 = CFGetTypeID(a3);
      if (v43 != CFBooleanGetTypeID()) {
        goto LABEL_344;
      }
      unsigned __int16 v42 = *(const void **)(a1 + 544);
      *(void *)(a1 + 544) = a3;
      CFRetain(a3);
    }
    else
    {
      if (!CFEqual(@"RealTime", value)) {
        goto LABEL_18;
      }
      unsigned __int16 v42 = *(const void **)(a1 + 544);
      *(void *)(a1 + 544) = 0;
    }
    if (v42) {
      CFRelease(v42);
    }
    goto LABEL_344;
  }
  if (a3)
  {
    CFTypeID v19 = CFDictionaryGetTypeID();
    if (v19 != CFGetTypeID(a3)) {
      goto LABEL_18;
    }
  }
  MEMORY[0x1997056B0](*(void *)(a1 + 464));
  uint64_t v20 = *(const void **)(a1 + 520);
  if (v20) {
    CFRelease(v20);
  }
  if (a3)
  {
    CFAllocatorRef v21 = CFGetAllocator((CFTypeRef)a1);
    CFDictionaryRef Copy = CFDictionaryCreateCopy(v21, a3);
  }
  else
  {
    CFDictionaryRef Copy = 0;
  }
  *(void *)(a1 + 520) = Copy;
  FigCFDictionaryGetBooleanIfPresent();
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 272), 0xFFFFFFFFFFFFFFFFLL);
  int v24 = *(const void **)(a1 + 504);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(a1 + 504) = 0;
  }
  CFAllocatorRef v25 = *(NSObject **)(a1 + 312);
  if (v25)
  {
    dispatch_release(v25);
    *(void *)(a1 + 312) = 0;
  }
  *(void *)(a1 + 320) = 0;
  CFAllocatorRef v26 = *(const void **)(a1 + 376);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(a1 + 376) = 0;
  }
  BOOL v27 = *(NSObject **)(a1 + 344);
  if (v27)
  {
    dispatch_release(v27);
    *(void *)(a1 + 344) = 0;
  }
  *(void *)(a1 + 352) = 0;
  MEMORY[0x1997056C0](*(void *)(a1 + 464));
LABEL_110:
  if (!vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, value)) {
    return 0;
  }
LABEL_111:
  uint64_t v28 = *(void *)(a1 + 432);

  return VTVideoEncoderSetProperty(v28, (uint64_t)value, (uint64_t)a3);
}

uint64_t vtCoreAnalyticsSaveUserConfiguredCompressionProperty(void *value, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a3 + 864);
  if (result)
  {
    uint64_t result = CFSetContainsValue((CFSetRef)result, value);
    if (result)
    {
      return FigCFDictionarySetValue();
    }
  }
  return result;
}

BOOL vtCompressionSessionIsPropertyHandledByRateControl(uint64_t a1, const void *a2)
{
  CFDictionaryRef theDict = 0;
  VTRateControlSessionCopySupportedPropertyDictionary(*(void *)(a1 + 800), &theDict);
  if (!theDict) {
    return 0;
  }
  BOOL v3 = CFDictionaryContainsKey(theDict, a2) != 0;
  if (theDict) {
    CFRelease(theDict);
  }
  return v3;
}

BOOL vtCompressionSessionIsPropertyHandledByVideoToolbox(const void *a1)
{
  CFDictionaryRef theDict = 0;
  vtCompressionSessionCopyPropertiesHandledByVideoToolbox((CFTypeRef *)&theDict);
  if (!theDict) {
    return 0;
  }
  BOOL v2 = CFDictionaryContainsKey(theDict, a1) != 0;
  if (theDict) {
    CFRelease(theDict);
  }
  return v2;
}

uint64_t vtCompressionSessionValidatePixelAspectRatio(uint64_t result)
{
  if (result)
  {
    CFDictionaryRef v1 = (const __CFDictionary *)result;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      CFStringRef Value = CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E4F24B90]);
      uint64_t v4 = CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E4F24BA0]);
      uint64_t valuePtr = 0;
      if (Value
        && (v5 = v4, CFTypeID v6 = CFNumberGetTypeID(), v6 == CFGetTypeID(Value))
        && (CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, (char *)&valuePtr + 4), SHIDWORD(valuePtr) > 0)
        && v5
        && (CFTypeID v7 = CFNumberGetTypeID(), v7 == CFGetTypeID(v5))
        && (CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr), (int)valuePtr > 0))
      {
        return 0;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t vtCompressionSessionValidateCleanAperture(uint64_t a1, const __CFDictionary *a2)
{
  if (!a2) {
    return 0;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    vtReadRationalOrIntegerFromDictionary(a2, (const void *)*MEMORY[0x1E4F1EED8], (const void *)*MEMORY[0x1E4F24A88], (char *)&v13 + 4, &v13);
    vtReadRationalOrIntegerFromDictionary(a2, (const void *)*MEMORY[0x1E4F1EEA8], (const void *)*MEMORY[0x1E4F24A68], (char *)&v12 + 4, &v12);
    vtReadRationalOrIntegerFromDictionary(a2, (const void *)*MEMORY[0x1E4F1EEB8], (const void *)*MEMORY[0x1E4F24A70], (char *)&v11 + 4, &v11);
    vtReadRationalOrIntegerFromDictionary(a2, (const void *)*MEMORY[0x1E4F1EEC8], (const void *)*MEMORY[0x1E4F24A80], (char *)&v10 + 4, &v10);
    if (SHIDWORD(v13) >= 1 && SHIDWORD(v12) >= 1)
    {
      if (v13)
      {
        if (v12)
        {
          if (v11)
          {
            if (v10)
            {
              unsigned int v5 = *(_DWORD *)(a1 + 40) * v13 - HIDWORD(v13);
              int64_t v6 = SHIDWORD(v11) * (unint64_t)(2 * v13);
              if (v6 <= (uint64_t)(v11 * (unint64_t)v5)
                && v6 >= -(uint64_t)(v11 * (unint64_t)v5))
              {
                unsigned int v7 = *(_DWORD *)(a1 + 44) * v12 - HIDWORD(v12);
                int64_t v8 = SHIDWORD(v10) * (unint64_t)(2 * v12);
                if (v8 <= (uint64_t)(v10 * (unint64_t)v7)
                  && v8 >= -(uint64_t)(v10 * (unint64_t)v7))
                {
                  return 0;
                }
              }
            }
          }
        }
      }
    }
    return FigSignalErrorAt();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t vtCompressionSessionValidateFieldCount(uint64_t result)
{
  if (result)
  {
    CFNumberRef v1 = (const __CFNumber *)result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      int valuePtr = 0;
      CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
      uint64_t result = 0;
      if ((valuePtr - 3) <= 0xFFFFFFFD) {
        return FigSignalErrorAt();
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t vtCompressionSessionValidateFieldDetail(const void *a1)
{
  if (!a1
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24B20])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24B18])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24B08])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24B10]))
  {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidatePixelFormatComponentRange(const void *a1)
{
  if (!a1 || CFEqual(a1, @"FullRange") || CFEqual(a1, @"VideoRange") || CFEqual(a1, @"WideRange")) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateColorPrimaries(const void *a1)
{
  if (!a1
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24AB0])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24AA0])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24AC8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1ECF8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1ECE8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1ECD8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1ED00]))
  {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateTransferFunction(const void *a1)
{
  if (!a1
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24BE0])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24BF0])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24C08])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1EEF0])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1EF20])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1EF18])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1EEF8])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1EF08])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1EF30]))
  {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateGammaLevel(uint64_t result)
{
  if (result)
  {
    CFNumberRef v1 = (const __CFNumber *)result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      double valuePtr = 0.0;
      CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
      if (valuePtr <= 0.0) {
        return FigSignalErrorAt();
      }
      else {
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t vtCompressionSessionValidateYCbCrMatrix(const void *a1)
{
  if (!a1
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24C48])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24C40])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24C60])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F1EF40])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24C28]))
  {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateICCProfile(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID TypeID = CFDataGetTypeID();
  if (TypeID == CFGetTypeID(a1)) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateMasteringDisplayColorVolume(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID TypeID = CFDataGetTypeID();
  if (TypeID == CFGetTypeID(a1) && CFDataGetLength((CFDataRef)a1) == 24) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateContentLightLevelInfo(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID TypeID = CFDataGetTypeID();
  if (TypeID == CFGetTypeID(a1) && CFDataGetLength((CFDataRef)a1) == 4) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateAmbientViewingEnvironment(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID TypeID = CFDataGetTypeID();
  if (TypeID == CFGetTypeID(a1) && CFDataGetLength((CFDataRef)a1) == 8) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateMultiPassStorage(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID TypeID = VTMultiPassStorageGetTypeID();
  if (TypeID == CFGetTypeID(a1)) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateAuxiliaryTypeInfo(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID == CFGetTypeID(a1)) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateChromaLocation(const void *a1)
{
  if (!a1
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24A38])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24A28])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24A48])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24A40])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24A20])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24A18])
    || CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F24A30]))
  {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidatePrepareEncodedSampleBuffersForPaddedWrites(const void *a1)
{
  if (!a1) {
    return 4294954394;
  }
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(a1)) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateHasLeftStereoEyeView(const void *a1)
{
  if (!a1) {
    return 4294954394;
  }
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 == CFBooleanGetTypeID()) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateHeroEye(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 == CFStringGetTypeID()) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidateTransportIdentifier(const void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 == CFNumberGetTypeID()) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionValidatePowerLogSessionID(const void *a1)
{
  if (!a1) {
    return 4294954394;
  }
  CFTypeID v1 = CFGetTypeID(a1);
  if (v1 == CFStringGetTypeID()) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigVideoCodecTypeIsHEVCFlavor(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1836415072)
  {
    if (a1 > 1751479856)
    {
      if (a1 == 1751479857) {
        return result;
      }
      int v3 = 1752589105;
    }
    else
    {
      if (a1 == 1667790435) {
        return result;
      }
      int v3 = 1718908520;
    }
    goto LABEL_13;
  }
  if (a1 <= 1902667125)
  {
    if (a1 == 1836415073) {
      return result;
    }
    int v3 = 1869117027;
    goto LABEL_13;
  }
  if (a1 != 1902667126 && a1 != 1902671459)
  {
    int v3 = 1902998904;
LABEL_13:
    if (a1 != v3) {
      return 0;
    }
  }
  return result;
}

uint64_t vtCompressionSessionValidateHDRMetadata(uint64_t a1, const void *a2)
{
  if (!a2) {
    return 0;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a2) || !FigCFEqual() && !FigCFEqual()) {
    goto LABEL_41;
  }
  int v5 = *(_DWORD *)(a1 + 48);
  if (v5 > 1685481520)
  {
    if (v5 <= 1869117026)
    {
      if (v5 > 1751479856)
      {
        if (v5 == 1751479857 || v5 == 1752589105) {
          return 0;
        }
        int v7 = 1836415073;
      }
      else
      {
        if (v5 == 1685481521 || v5 == 1685481573) {
          return 0;
        }
        int v7 = 1718908520;
      }
    }
    else
    {
      if (v5 > 1902407031)
      {
        if (v5 > 1902671458)
        {
          if (v5 != 1902671459)
          {
            int v7 = 1902998904;
            goto LABEL_39;
          }
        }
        else if (v5 != 1902407032)
        {
          int v7 = 1902667126;
          goto LABEL_39;
        }
        return 0;
      }
      if (v5 == 1869117027 || v5 == 1902405681) {
        return 0;
      }
      int v7 = 1902405733;
    }
  }
  else if (v5 > 1634759271)
  {
    if (v5 <= 1667524656)
    {
      unsigned int v8 = v5 - 1634759272;
      if (v8 <= 6 && ((1 << v8) & 0x51) != 0) {
        return 0;
      }
      goto LABEL_41;
    }
    if (v5 == 1667524657 || v5 == 1667790435) {
      return 0;
    }
    int v7 = 1684895096;
  }
  else
  {
    if (v5 > 1634743415)
    {
      if ((v5 - 1634755432) <= 0xB && ((1 << (v5 - 104)) & 0x8C1) != 0) {
        return 0;
      }
      unsigned __int16 v6 = 13432;
    }
    else
    {
      if (v5 == 1634742376 || v5 == 1634742888) {
        return 0;
      }
      unsigned __int16 v6 = 13416;
    }
    int v7 = v6 | 0x61700000;
  }
LABEL_39:
  if (v5 == v7) {
    return 0;
  }
LABEL_41:

  return FigSignalErrorAt();
}

uint64_t vtCompressionSessionUpdateAmbientViewingEnvironment(uint64_t a1, CFTypeRef cf)
{
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFDataGetTypeID())
    {
      int v5 = *(const void **)(a1 + 656);
      *(void *)(a1 + 656) = cf;
      CFRetain(cf);
      if (v5) {
        CFRelease(v5);
      }
      CFIndex Length = CFDataGetLength((CFDataRef)cf);
      CFDataGetBytePtr((CFDataRef)cf);
      if (Length == 8 || (uint64_t result = FigSignalErrorAt(), !result))
      {
        int v7 = *(const void **)(a1 + 664);
        if (v7) {
          CFRelease(v7);
        }
        uint64_t result = FigHEVCBridge_CreateAmbientViewingEnvironmentSEINAL();
        if (!result) {
          *(unsigned char *)(a1 + 640) = 1;
        }
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v9 = *(const void **)(a1 + 656);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 656) = 0;
    }
    uint64_t v10 = *(const void **)(a1 + 664);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 664) = 0;
    }
    uint64_t result = 0;
    *(unsigned char *)(a1 + 640) = 0;
  }
  return result;
}

uint64_t vtCompressionSessionDispatchQueuesUpdatePriorityAndClientPID(void *a1)
{
  if (!a1[36] || (uint64_t result = FigDispatchQueueSetPriorityAndClientPID(), !result))
  {
    if (!a1[39] || (uint64_t result = FigDispatchQueueSetPriorityAndClientPID(), !result))
    {
      uint64_t result = a1[43];
      if (result)
      {
        return FigDispatchQueueSetPriorityAndClientPID();
      }
    }
  }
  return result;
}

uint64_t vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate(uint64_t a1, __CVBuffer *a2, CMTaggedBufferGroupRef group)
{
  CVPixelBufferAtIndex = a2;
  CFTypeRef cf = 0;
  if (!a2 && group)
  {
    if (CMTaggedBufferGroupGetCount(group) < 1)
    {
      CVPixelBufferAtIndex = 0;
      goto LABEL_12;
    }
    CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
  }
  if (CVPixelBufferAtIndex)
  {
    BOOL v5 = *(_OWORD *)(a1 + 64) == 0;
    if (*(void *)(a1 + 72) && !CVPixelBufferIsCompatibleWithAttributes()) {
      BOOL v5 = 1;
    }
    if (v5) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
LABEL_12:
  BOOL v5 = 0;
LABEL_13:
  if (*(_DWORD *)(a1 + 484) == *(_DWORD *)(a1 + 480))
  {
    uint64_t v6 = 0;
    CFDictionaryRef v7 = 0;
LABEL_15:
    unsigned int v8 = 0;
    goto LABEL_105;
  }
LABEL_16:
  uint64_t v9 = *(const void **)(a1 + 64);
  uint64_t v10 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  uint64_t v11 = (const void **)MEMORY[0x1E4F24D08];
  uint64_t v12 = (const void **)MEMORY[0x1E4F24E10];
  if (!v9 || (CFDictionaryRef v13 = (const __CFDictionary *)CFRetain(v9)) == 0)
  {
    if (CVPixelBufferAtIndex)
    {
      CFMutableDictionaryRef Mutable = *(CFMutableDictionaryRef *)(a1 + 72);
      if (v5)
      {
        if (Mutable)
        {
          CFRelease(*(CFTypeRef *)(a1 + 72));
          *(void *)(a1 + 72) = 0;
        }
      }
      else if (Mutable)
      {
LABEL_30:
        CFDictionaryRef v7 = (const __CFDictionary *)CFRetain(Mutable);
        goto LABEL_32;
      }
      CFAllocatorRef v16 = *v10;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      OSType valuePtr = CVPixelBufferGetPixelFormatType(CVPixelBufferAtIndex);
      CFNumberRef v17 = CFNumberCreate(v16, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D70], v17);
      CFRelease(v17);
      int Height = CVPixelBufferGetHeight(CVPixelBufferAtIndex);
      CFNumberRef v18 = CFNumberCreate(v16, kCFNumberSInt32Type, &Height);
      CFDictionarySetValue(Mutable, *v11, v18);
      CFRelease(v18);
      OSType Width = CVPixelBufferGetWidth(CVPixelBufferAtIndex);
      CFNumberRef v19 = CFNumberCreate(v16, kCFNumberSInt32Type, &Width);
      CFDictionarySetValue(Mutable, *v12, v19);
      CFRelease(v19);
      if (CVPixelBufferGetIOSurface(CVPixelBufferAtIndex))
      {
        CFDictionaryRef v20 = CFDictionaryCreate(v16, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v20);
        CFRelease(v20);
        CFDictionaryRef v21 = CVPixelBufferCopyCreationAttributes(CVPixelBufferAtIndex);
        uint64_t v22 = (const void *)*MEMORY[0x1E4F24D30];
        if (CFDictionaryGetValue(v21, (const void *)*MEMORY[0x1E4F24D30])) {
          CFDictionarySetValue(Mutable, v22, (const void *)*MEMORY[0x1E4F1CFD0]);
        }
        CFRelease(v21);
      }
      *(void *)(a1 + 72) = Mutable;
      if (Mutable) {
        goto LABEL_30;
      }
    }
    CFDictionaryRef v7 = 0;
    goto LABEL_32;
  }
  CFDictionaryRef v7 = v13;
  CFNumberRef v14 = *(const void **)(a1 + 72);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 72) = 0;
  }
LABEL_32:
  CFAllocatorRef v23 = *v10;
  uint64_t v24 = VTCreatePixelBufferPoolAttributesWithName(*v10, *(unsigned int *)(a1 + 536), @"encode", (__CFDictionary **)&cf);
  if (v24)
  {
    uint64_t v6 = v24;
    goto LABEL_15;
  }
  CFAllocatorRef allocator = v23;
  CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  unsigned int v8 = MutableCopy;
  if (*(void *)(a1 + 176)
    || *(void *)(a1 + 184)
    || *(void *)(a1 + 200)
    || *(void *)(a1 + 240)
    || *(void *)(a1 + 248))
  {
    CFAllocatorRef v26 = (const void *)*MEMORY[0x1E4F24990];
    CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24990]);
    BOOL v27 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!vtCompressionSessionIsIPT(a1))
    {
      uint64_t v28 = *(const void **)(a1 + 176);
      if (v28) {
        CFDictionarySetValue(v27, (const void *)*MEMORY[0x1E4F24A90], v28);
      }
      CFTypeRef v29 = *(const void **)(a1 + 184);
      if (v29) {
        CFDictionarySetValue(v27, (const void *)*MEMORY[0x1E4F24BC8], v29);
      }
      CFNumberRef v30 = *(const void **)(a1 + 200);
      if (v30) {
        CFDictionarySetValue(v27, (const void *)*MEMORY[0x1E4F24C18], v30);
      }
    }
    long long v31 = *(const void **)(a1 + 240);
    if (v31) {
      CFDictionarySetValue(v27, (const void *)*MEMORY[0x1E4F24A10], v31);
    }
    float v32 = *(const void **)(a1 + 248);
    if (v32) {
      CFDictionarySetValue(v27, (const void *)*MEMORY[0x1E4F24A08], v32);
    }
    CFDictionarySetValue(v8, v26, v27);
    if (v27) {
      CFRelease(v27);
    }
  }
  OSType valuePtr = 0;
  int Height = 0;
  uint64_t Count = FigCFDictionaryGetCount();
  if (!CVPixelBufferAtIndex) {
    goto LABEL_75;
  }
  if (!Count) {
    goto LABEL_75;
  }
  CFTypeID v34 = (void *)*MEMORY[0x1E4F24D70];
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v8, (const void *)*MEMORY[0x1E4F24D70]);
  if (!Value) {
    goto LABEL_75;
  }
  CFArrayRef v36 = Value;
  CFTypeID v37 = CFGetTypeID(Value);
  if (v37 != CFArrayGetTypeID()) {
    goto LABEL_75;
  }
  uint64_t v38 = CFDictionaryGetValue(v8, *v12);
  CFTypeID v39 = CFDictionaryGetValue(v8, *v11);
  if (!v38) {
    goto LABEL_60;
  }
  CFIndex v40 = v39;
  CFTypeID v41 = CFGetTypeID(v38);
  uint64_t v42 = 0;
  if (v41 == CFNumberGetTypeID() && v40)
  {
    CFTypeID v43 = CFGetTypeID(v40);
    if (v43 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)v38, kCFNumberIntType, &valuePtr);
      CFNumberGetValue((CFNumberRef)v40, kCFNumberIntType, &Height);
      uint64_t v42 = (int)valuePtr;
      goto LABEL_61;
    }
LABEL_60:
    uint64_t v42 = 0;
  }
LABEL_61:
  key = v34;
  char v45 = 1;
  if (CVPixelBufferGetWidth(CVPixelBufferAtIndex) == v42)
  {
    uint64_t v44 = Height;
    if (CVPixelBufferGetHeight(CVPixelBufferAtIndex) == v44) {
      char v45 = 0;
    }
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(CVPixelBufferAtIndex);
  CFIndex v47 = CFArrayGetCount(v36);
  CFMutableArrayRef v48 = CFArrayCreateMutable(allocator, v47, MEMORY[0x1E4F1D510]);
  if (v48)
  {
    CFDictionaryRef v49 = v48;
    CFDictionaryRef v74 = v7;
    if (CFArrayGetCount(v36) >= 1)
    {
      CFIndex v50 = 0;
      int v51 = 0;
      do
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v36, v50);
        if (ValueAtIndex)
        {
          CFNumberRef v53 = ValueAtIndex;
          CFTypeID v54 = CFGetTypeID(ValueAtIndex);
          if (v54 == CFNumberGetTypeID())
          {
            OSType Width = 0;
            CFNumberGetValue(v53, kCFNumberSInt32Type, &Width);
            if (VTPixelTransferSessionCanTransfer(PixelFormatType, Width, v45)) {
              CFArrayInsertValueAtIndex(v49, v51++, v53);
            }
            else {
              CFArrayAppendValue(v49, v53);
            }
          }
        }
        ++v50;
      }
      while (CFArrayGetCount(v36) > v50);
    }
    CFDictionarySetValue(v8, key, v49);
    CFRelease(v49);
    CFDictionaryRef v7 = v74;
  }
  else
  {
    uint64_t v73 = FigSignalErrorAt();
    if (v73)
    {
      uint64_t v6 = v73;
      goto LABEL_105;
    }
  }
LABEL_75:
  uint64_t v55 = *(void *)(a1 + 168);
  if (!v55) {
    goto LABEL_96;
  }
  if (!CFDictionaryGetCount(v8)) {
    goto LABEL_96;
  }
  uint64_t v56 = (const void *)*MEMORY[0x1E4F24D70];
  CFArrayRef v57 = (const __CFArray *)CFDictionaryGetValue(v8, (const void *)*MEMORY[0x1E4F24D70]);
  if (!v57) {
    goto LABEL_96;
  }
  CFArrayRef v58 = v57;
  CFTypeID v59 = CFGetTypeID(v57);
  if (v59 == CFArrayGetTypeID())
  {
    CFIndex v60 = CFArrayGetCount(v58);
    unsigned int v61 = CFArrayCreateMutableCopy(allocator, v60, v58);
    if (!v61) {
      goto LABEL_96;
    }
  }
  else
  {
    CFTypeID v62 = CFGetTypeID(v58);
    if (v62 != CFNumberGetTypeID()) {
      goto LABEL_96;
    }
    unsigned int v61 = CFArrayCreateMutable(allocator, 1, MEMORY[0x1E4F1D510]);
    CFArrayAppendValue(v61, v58);
    if (!v61) {
      goto LABEL_96;
    }
  }
  if (CFArrayGetCount(v61))
  {
    if (CFArrayGetCount(v61) >= 1)
    {
      CFIndex v63 = 0;
      do
      {
        CFNumberRef v64 = (const __CFNumber *)CFArrayGetValueAtIndex(v61, v63);
        if (v64
          && (CFNumberRef v65 = v64, v66 = CFGetTypeID(v64), v66 == CFNumberGetTypeID())
          && (OSType valuePtr = 0,
              CFNumberGetValue(v65, kCFNumberSInt32Type, &valuePtr),
              !vtCompressionSessionDoesPixelFormatHaveDesiredColorRange(valuePtr, v55)))
        {
          CFArrayRemoveValueAtIndex(v61, v63);
        }
        else
        {
          ++v63;
        }
      }
      while (v63 < CFArrayGetCount(v61));
    }
    if (!CFArrayGetCount(v61))
    {
      uint64_t v6 = FigSignalErrorAt();
      CFRelease(v61);
      if (v6) {
        goto LABEL_105;
      }
      goto LABEL_96;
    }
    CFDictionarySetValue(v8, v56, v61);
  }
  CFRelease(v61);
LABEL_96:
  CFAllocatorRef v67 = CFGetAllocator((CFTypeRef)a1);
  int v68 = *(unsigned __int8 *)(a1 + 792);
  if (v68 != 1) {
    LOBYTE(v68) = *(unsigned char *)(a1 + 793) == 0;
  }
  CGFloat v69 = (CFTypeRef *)(a1 + 496);
  CFAllocatorRef v70 = VTBuildPixelBufferPools2(v67, v7, v8, (const __CFDictionary *)cf, *(void *)(a1 + 40), 0, 0, 0, 0, v68, (CVPixelBufferPoolRef *)(a1 + 496), (CVPixelBufferPoolRef *)(a1 + 488), 0, 0);
  if (v70)
  {
    uint64_t v6 = (uint64_t)v70;
    FigSignalErrorAt();
  }
  else
  {
    *(_DWORD *)(a1 + 484) = *(_DWORD *)(a1 + 480);
    if (*(void *)(a1 + 488))
    {
      uint64_t v6 = 0;
    }
    else
    {
      CFTypeRef v71 = *v69;
      if (*v69) {
        CFTypeRef v71 = CFRetain(v71);
      }
      uint64_t v6 = 0;
      *(void *)(a1 + 488) = v71;
    }
  }
LABEL_105:
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v6;
}

BOOL vtCompressionSessionIsIPT(uint64_t a1)
{
  return !*(void *)(a1 + 176) && FigCFEqual() && FigCFEqual();
}

uint64_t VTVideoEncoderCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t vtCompressionSessionSetOneProperty(void *value, const __CFNumber *a2, uint64_t a3)
{
  uint64_t result = VTCompressionSessionSetProperty(*(void *)a3, value, a2);
  if (!*(_DWORD *)(a3 + 8)) {
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

uint64_t vtCompressionSessionValidateOneProperty(const void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = vtCompressionSessionIsPropertyHandledByRateControl(*a3, a1);
  if (result)
  {
    uint64_t v5 = *(void *)(*a3 + 800);
    return VTRateControlSessionSetProperty(v5);
  }
  return result;
}

uint64_t VTCompressionSessionCopySerializableProperties(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  if (!a1 || *(_DWORD *)(a1 + 16) == 2)
  {
    return FigSignalErrorAt();
  }
  else if (*(void *)(a1 + 24))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    return VTCompressionSessionRemote_CopySerializableProperties(v5);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 432);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v9 + 48);
    if (!v10) {
      return 0;
    }
    uint64_t result = v10(v7, a2, a3);
    if (result == -12782) {
      return 0;
    }
  }
  return result;
}

CVPixelBufferPoolRef VTCompressionSessionGetPixelBufferPool(VTCompressionSessionRef session)
{
  if (!session || *((_DWORD *)session + 4) == 2)
  {
    if (FigSignalErrorAt()) {
      return 0;
    }
    return (CVPixelBufferPoolRef)*((void *)session + 62);
  }
  BOOL v2 = (void *)*((void *)session + 3);
  if (!v2)
  {
    MEMORY[0x1997056B0](*((void *)session + 58));
    int v4 = vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate((uint64_t)session, 0, 0);
    MEMORY[0x1997056C0](*((void *)session + 58));
    if (v4) {
      return 0;
    }
    return (CVPixelBufferPoolRef)*((void *)session + 62);
  }

  return (CVPixelBufferPoolRef)VTCompressionSessionRemote_GetPixelBufferPool(v2);
}

OSStatus VTCompressionSessionPrepareToEncodeFrames(VTCompressionSessionRef session)
{
  if (!session) {
    return FigSignalErrorAt();
  }
  if (*((void *)session + 3)) {
    return VTCompressionSessionRemote_PrepareToEncodeFrames(*((void *)session + 3));
  }
  return vtCompressionSessionPrepareToEncodeFramesInternal((uint64_t)session);
}

uint64_t vtCompressionSessionPrepareToEncodeFramesInternal(uint64_t a1)
{
  uint64_t v1 = 0;
  CFNumberRef propertyValueOut = 0;
  int valuePtr = 0;
  if (*(unsigned char *)(a1 + 96)) {
    return v1;
  }
  if (!*(void *)(a1 + 576))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    if (v3 > 1836415072)
    {
      if (v3 > 1902407031)
      {
        if (v3 > 1902671458)
        {
          if (v3 == 1902998904) {
            goto LABEL_28;
          }
          unsigned __int16 v5 = 30307;
        }
        else
        {
          if (v3 == 1902407032) {
            goto LABEL_28;
          }
          unsigned __int16 v5 = 25974;
        }
        int v4 = v5 | 0x71680000;
      }
      else if (v3 > 1902405680)
      {
        if (v3 == 1902405681) {
          goto LABEL_28;
        }
        int v4 = 1902405733;
      }
      else
      {
        if (v3 == 1836415073) {
          goto LABEL_28;
        }
        int v4 = 1869117027;
      }
    }
    else if (v3 > 1685481572)
    {
      if (v3 > 1751479856)
      {
        if (v3 == 1751479857) {
          goto LABEL_28;
        }
        int v4 = 1752589105;
      }
      else
      {
        if (v3 == 1685481573) {
          goto LABEL_28;
        }
        int v4 = 1718908520;
      }
    }
    else if (v3 > 1684895095)
    {
      if (v3 == 1684895096) {
        goto LABEL_28;
      }
      int v4 = 1685481521;
    }
    else
    {
      if (v3 == 1667524657) {
        goto LABEL_28;
      }
      int v4 = 1667790435;
    }
    if (v3 != v4)
    {
LABEL_29:
      *(void *)(a1 + 576) = *MEMORY[0x1E4F1CFC8];
      goto LABEL_30;
    }
LABEL_28:
    if (vtCompressionSessionIsDolbyCompatible(a1)) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_30:
  if (!vtCompressionSessionIsIPT(a1))
  {
    if (*(void *)(a1 + 176) && vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"ColorPrimaries"))
    {
      uint64_t v9 = *(void *)(a1 + 432);
      uint64_t v10 = *(void *)(a1 + 176);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v12 = v11 ? v11 : 0;
      CFAllocatorRef v26 = *(void (**)(uint64_t, __CFString *, uint64_t))(v12 + 56);
      if (v26) {
        v26(v9, @"ColorPrimaries", v10);
      }
    }
    if (*(void *)(a1 + 184) && vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"TransferFunction"))
    {
      uint64_t v27 = *(void *)(a1 + 432);
      uint64_t v28 = *(void *)(a1 + 184);
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v30 = v29 ? v29 : 0;
      long long v31 = *(void (**)(uint64_t, __CFString *, uint64_t))(v30 + 56);
      if (v31) {
        v31(v27, @"TransferFunction", v28);
      }
    }
    if (*(void *)(a1 + 192) && vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"GammaLevel"))
    {
      uint64_t v32 = *(void *)(a1 + 432);
      uint64_t v33 = *(void *)(a1 + 192);
      uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v35 = v34 ? v34 : 0;
      CFArrayRef v36 = *(void (**)(uint64_t, __CFString *, uint64_t))(v35 + 56);
      if (v36) {
        v36(v32, @"GammaLevel", v33);
      }
    }
    if (*(void *)(a1 + 200) && vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"YCbCrMatrix"))
    {
      uint64_t v37 = *(void *)(a1 + 432);
      uint64_t v38 = *(void *)(a1 + 200);
      uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v40 = v39 ? v39 : 0;
      CFTypeID v41 = *(void (**)(uint64_t, __CFString *, uint64_t))(v40 + 56);
      if (v41) {
        v41(v37, @"YCbCrMatrix", v38);
      }
    }
    if (*(void *)(a1 + 208) && vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"ICCProfile"))
    {
      uint64_t v42 = *(void *)(a1 + 432);
      uint64_t v43 = *(void *)(a1 + 208);
      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v45 = v44 ? v44 : 0;
      BOOL v46 = *(void (**)(uint64_t, __CFString *, uint64_t))(v45 + 56);
      if (v46) {
        v46(v42, @"ICCProfile", v43);
      }
    }
  }
  int v6 = *(_DWORD *)(a1 + 48);
  uint64_t v7 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v6 <= 1836415072)
  {
    if (v6 > 1751479856)
    {
      if (v6 == 1751479857) {
        goto LABEL_48;
      }
      int v8 = 1752589105;
    }
    else
    {
      if (v6 == 1667790435) {
        goto LABEL_48;
      }
      int v8 = 1718908520;
    }
  }
  else if (v6 <= 1902667125)
  {
    if (v6 == 1836415073) {
      goto LABEL_48;
    }
    int v8 = 1869117027;
  }
  else
  {
    if (v6 == 1902667126 || v6 == 1902998904) {
      goto LABEL_48;
    }
    int v8 = 1902671459;
  }
  if (v6 == v8)
  {
LABEL_48:
    theArray[0] = 0;
    uint64_t v13 = *(void *)(a1 + 432);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    CFAllocatorRef v16 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, CFArrayRef *))(v15 + 48);
    if (v16 && (v16(v13, @"MVHEVCVideoLayerIDs", *v7, theArray), theArray[0]))
    {
      CFIndex Count = CFArrayGetCount(theArray[0]);
      CFArrayRef v18 = theArray[0];
      *(unsigned char *)(a1 + 752) = Count > 1;
      if (v18) {
        CFRelease(v18);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 752) = 0;
    }
  }
  if (*(unsigned char *)(a1 + 794) || *(unsigned char *)(a1 + 795))
  {
    uint64_t v19 = VTRateControlSessionBeforePrepareToEncodeFrames(*(void *)(a1 + 800));
    if (v19) {
      return v19;
    }
  }
  uint64_t v20 = *(void *)(a1 + 432);
  CFDictionaryRef v21 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  if (*v22 < 2uLL || (CFAllocatorRef v23 = (uint64_t (*)(uint64_t))v22[7]) == 0 || (v1 = v23(v20), v1 == -12782)) {
    uint64_t v1 = 0;
  }
  VTSessionCopyProperty((VTSessionRef)a1, @"AverageBitRate", *v7, &propertyValueOut);
  if (propertyValueOut && CFNumberGetValue(propertyValueOut, kCFNumberFloat32Type, &valuePtr)) {
    *(_DWORD *)(a1 + 684) = valuePtr;
  }
  CFStringRef v24 = *(const __CFString **)(a1 + 848);
  if (!v24
    || !CFStringHasPrefix(v24, @"VTEncoderXPCServ")
    && !CFStringHasPrefix(*(CFStringRef *)(a1 + 848), @"simpleVTCompress")
    && !CFStringHasPrefix(*(CFStringRef *)(a1 + 848), @"remakeMovie")
    && !CFStringHasPrefix(*(CFStringRef *)(a1 + 848), @"avexporttest"))
  {
    CFRetain((CFTypeRef)a1);
    theArray[0] = (CFArrayRef)MEMORY[0x1E4F143A8];
    theArray[1] = (CFArrayRef)0x40000000;
    theArray[2] = (CFArrayRef)__vtCompressionSessionSendConfigToCoreAnalytics_block_invoke;
    theArray[3] = (CFArrayRef)&__block_descriptor_tmp_87;
    theArray[4] = (CFArrayRef)a1;
    if ((analytics_send_event_lazy() & 1) == 0) {
      CFRelease((CFTypeRef)a1);
    }
  }
  *(unsigned char *)(a1 + 96) = 1;
  if (propertyValueOut) {
    CFRelease(propertyValueOut);
  }
  return v1;
}

uint64_t vtCompressionSessionEncodeFrameCommon(uint64_t a1, __CVBuffer *a2, OpaqueCMTaggedBufferGroup *a3, uint64_t a4, long long *a5, const void *a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  if (!a1 || *(_DWORD *)(a1 + 16))
  {
    uint64_t v25 = FigSignalErrorAt();
    if (!v25) {
      return v25;
    }
    goto LABEL_191;
  }
  if (a9) {
    *a9 = 0;
  }
  ++*(_DWORD *)(a1 + 824);
  uint64_t v17 = vtCompressionSessionPrepareToEncodeFramesInternal(a1);
  if (v17)
  {
    uint64_t v25 = v17;
LABEL_191:
    long long v112 = *(void (**)(void, uint64_t, uint64_t, void, void))(a1 + 80);
    if (v112)
    {
      v112(*(void *)(a1 + 88), a8, v25, 0, 0);
    }
    else if (a7)
    {
      (*(void (**)(uint64_t, uint64_t, void, void))(a7 + 16))(a7, v25, 0, 0);
    }
    ++*(_DWORD *)(a1 + 828);
    return v25;
  }
  if (a9) {
    *a9 |= 1u;
  }
  long long v129 = *(_OWORD *)a4;
  uint64_t v130 = *(void *)(a4 + 16);
  long long v127 = *a5;
  long long v128 = (void (__cdecl *)(CFAllocatorRef, const void *))*((void *)a5 + 2);
  long long context = 0;
  MEMORY[0x1997056B0](*(void *)(a1 + 464));
  if (!*(void *)(a1 + 288))
  {
    uint64_t v18 = FigDispatchQueueCreateWithPriorityAndClientPID();
    *(void *)(a1 + 288) = v18;
    if (!v18) {
      goto LABEL_25;
    }
  }
  if (*(unsigned char *)(a1 + 256)) {
    vtCompressionSessionConfirmSpatialAndColorProperties(a1);
  }
  if (!a3)
  {
    if (a2)
    {
      uint64_t v21 = *(void *)(a1 + 472);
      goto LABEL_20;
    }
LABEL_35:
    int v123 = 1;
    goto LABEL_36;
  }
  uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v19) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  if (!*(void *)(v20 + 168)) {
    goto LABEL_25;
  }
  uint64_t v21 = *(void *)(a1 + 472);
  if (a2)
  {
LABEL_20:
    int v123 = 0;
    if (!vtIsPixelBufferCompatibleWithAttributes((void *)a1, a2, v21)) {
      goto LABEL_21;
    }
LABEL_36:
    uint64_t v122 = a7;
    v125 = a2;
    char v117 = a6;
    uint64_t v115 = (NSObject **)(a1 + 288);
    if (!vtDoesFrameRequireIOSurfaceSynchronization(a2, a3))
    {
      char v118 = 0;
      CFDictionaryRef v119 = 0;
      CFMutableDictionaryRef Mutable = 0;
      uint64_t v32 = (void (**)(uint64_t))(a1 + 296);
      uint64_t v33 = (NSObject **)(a1 + 288);
      goto LABEL_78;
    }
    *(void *)(a1 + 328) = vtCompressionSessionIOSurfaceSynchronizationWork;
    if (*(void *)(a1 + 312)
      || (uint64_t v34 = FigDispatchQueueCreateWithPriorityAndClientPID(), (*(void *)(a1 + 312) = v34) != 0))
    {
      char v118 = 0;
      CFDictionaryRef v119 = 0;
      CFMutableDictionaryRef Mutable = 0;
      uint64_t v32 = (void (**)(uint64_t))(a1 + 328);
      uint64_t v33 = (NSObject **)(a1 + 312);
      goto LABEL_78;
    }
    goto LABEL_25;
  }
  CMItemCount Count = CMTaggedBufferGroupGetCount(a3);
  if (Count < 1) {
    goto LABEL_35;
  }
  CMItemCount v29 = Count;
  uint64_t v30 = 0;
  while (1)
  {
    CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
    if (CVPixelBufferAtIndex)
    {
      if (!vtIsPixelBufferCompatibleWithAttributes((void *)a1, CVPixelBufferAtIndex, v21)) {
        break;
      }
    }
    if (v29 == ++v30) {
      goto LABEL_35;
    }
  }
  int v123 = 1;
LABEL_21:
  uint64_t v115 = (NSObject **)(a1 + 288);
  if (*(unsigned char *)(a1 + 528) != 1) {
    goto LABEL_25;
  }
  uint64_t v22 = vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate(a1, a2, a3);
  if (v22) {
    goto LABEL_26;
  }
  v125 = a2;
  if (!*(void *)(a1 + 504))
  {
    *(void *)(a1 + 320) = vtCompressionSessionPixelTransferSessionWork;
    if (*(void *)(a1 + 312)
      || (uint64_t v35 = FigDispatchQueueCreateWithPriorityAndClientPID(), (*(void *)(a1 + 312) = v35) != 0))
    {
      CFAllocatorRef v36 = CFGetAllocator((CFTypeRef)a1);
      uint64_t v22 = VTPixelTransferSessionCreate(v36, (VTPixelTransferSessionRef *)(a1 + 504));
      if (v22) {
        goto LABEL_26;
      }
      LODWORD(valuePtr) = 0;
      CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(*(CVPixelBufferPoolRef *)(a1 + 488));
      char v38 = v123 ^ 1;
      if (!a3) {
        char v38 = 1;
      }
      uint64_t v39 = a2;
      if ((v38 & 1) == 0)
      {
        if (CMTaggedBufferGroupGetCount(a3) < 1) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
        }
      }
      if (PixelBufferAttributes)
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x1E4F24D70]);
        if (!Value) {
          goto LABEL_63;
        }
        CFArrayRef v41 = Value;
        CFTypeID v42 = CFGetTypeID(Value);
        if (v42 == CFArrayGetTypeID() && CFArrayGetCount(v41) > 0)
        {
          LODWORD(Value) = FigCFArrayGetInt32AtIndex();
          if (!Value)
          {
LABEL_63:
            *(unsigned char *)(a1 + 512) = (_BYTE)Value;
            uint64_t v45 = *(const void **)(a1 + 504);
            if (!v45) {
              goto LABEL_24;
            }
            CFDictionaryRef v46 = *(const __CFDictionary **)(a1 + 520);
            if (!v46 || (uint64_t v22 = VTSessionSetProperties(v45, v46), !v22))
            {
              CFAllocatorRef v47 = CFGetAllocator((CFTypeRef)a1);
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v47, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              FigCFDictionarySetInt32();
              CFMutableArrayRef v48 = *(const void **)(a1 + 544);
              if (v48) {
                CFDictionarySetValue(Mutable, @"RealTime", v48);
              }
              CFDictionaryRef v49 = *(const __CFDictionary **)(a1 + 136);
              if (v49)
              {
                CFDictionaryRef v23 = 0;
              }
              else
              {
                int v133 = 1;
                int v132 = 1;
                uint64_t v50 = *MEMORY[0x1E4F24BA0];
                *(void *)&long long valuePtr = *MEMORY[0x1E4F24B90];
                *((void *)&valuePtr + 1) = v50;
                CFAllocatorRef v51 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                values.version = (CFIndex)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &v133);
                values.retain = (CFDictionaryRetainCallBack)CFNumberCreate(v51, kCFNumberIntType, &v132);
                CFDictionaryRef v23 = CFDictionaryCreate(v51, (const void **)&valuePtr, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                CFRelease((CFTypeRef)values.version);
                CFRelease(values.retain);
                CFDictionaryRef v49 = *(const __CFDictionary **)(a1 + 136);
              }
              if (v49) {
                CFDictionaryRef v52 = v49;
              }
              else {
                CFDictionaryRef v52 = v23;
              }
              CFDictionarySetValue(Mutable, @"DestinationPixelAspectRatio", v52);
              CFNumberRef v53 = *(const void **)(a1 + 144);
              if (v53) {
                CFDictionarySetValue(Mutable, @"DestinationCleanAperture", v53);
              }
              uint64_t v54 = VTSessionSetProperties(*(VTSessionRef *)(a1 + 504), Mutable);
              if (!v54) {
                goto LABEL_77;
              }
              uint64_t v25 = v54;
LABEL_27:
              CFAllocatorRef v26 = 0;
              goto LABEL_28;
            }
LABEL_26:
            uint64_t v25 = v22;
            CFDictionaryRef v23 = 0;
            CFMutableDictionaryRef Mutable = 0;
            goto LABEL_27;
          }
LABEL_61:
          OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v39);
          LOBYTE(Value) = VTPixelTransferSessionCanTransfer(PixelFormatType, valuePtr, 0);
          goto LABEL_63;
        }
        CFTypeID v43 = CFGetTypeID(v41);
        if (v43 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v41, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_61;
        }
      }
      LOBYTE(Value) = 0;
      goto LABEL_63;
    }
LABEL_25:
    uint64_t v22 = FigSignalErrorAt();
    goto LABEL_26;
  }
LABEL_24:
  CFDictionaryRef v23 = 0;
  CFMutableDictionaryRef Mutable = 0;
LABEL_77:
  CFDictionaryRef v119 = v23;
  char v117 = a6;
  uint64_t v122 = a7;
  uint64_t v32 = (void (**)(uint64_t))(a1 + 320);
  uint64_t v33 = (NSObject **)(a1 + 312);
  char v118 = 1;
LABEL_78:
  v120 = Mutable;
  uint64_t v121 = a8;
  queue = *v33;
  uint64_t v116 = *v32;
  uint64_t v56 = *(const void **)(a1 + 176);
  uint64_t v55 = *(const void **)(a1 + 184);
  CFArrayRef v57 = *(const void **)(a1 + 200);
  CFArrayRef v58 = *(const void **)(a1 + 208);
  uint64_t v59 = *(void *)(a1 + 168);
  if (!v123)
  {
    if (!vtIsPixelBufferCompatibleWithColorPropertiesAndDoesPixelBufferHaveDesiredColorRange(v125, v56, v55, v57, v58, (CGColorSpaceRef *)(a1 + 384), v59))goto LABEL_91; {
LABEL_87:
    }
    if (v118)
    {
      CFAllocatorRef v26 = 0;
      CFNumberRef v64 = (void (**)(uint64_t))(a1 + 320);
      CFNumberRef v65 = (NSObject **)(a1 + 312);
      a8 = v121;
      a7 = v122;
      CFTypeID v66 = a3;
      CFAllocatorRef v67 = v125;
    }
    else
    {
      CFAllocatorRef v67 = v125;
      CFTypeID v66 = a3;
      a8 = v121;
      a7 = v122;
      CFAllocatorRef v26 = 0;
      if (vtDoesFrameRequireIOSurfaceSynchronization(v125, a3))
      {
        CFNumberRef v64 = (void (**)(uint64_t))(a1 + 328);
        CFNumberRef v65 = (NSObject **)(a1 + 312);
      }
      else
      {
        CFNumberRef v64 = (void (**)(uint64_t))(a1 + 296);
        CFNumberRef v65 = v115;
      }
    }
    goto LABEL_117;
  }
  if (!a3) {
    goto LABEL_87;
  }
  CMItemCount v60 = CMTaggedBufferGroupGetCount(a3);
  if (v60 < 1) {
    goto LABEL_87;
  }
  CMItemCount v61 = v60;
  uint64_t v62 = 0;
  while (1)
  {
    CFIndex v63 = (void *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
    if (v63)
    {
      if (!vtIsPixelBufferCompatibleWithColorPropertiesAndDoesPixelBufferHaveDesiredColorRange(v63, v56, v55, v57, v58, (CGColorSpaceRef *)(a1 + 384), v59))break; {
    }
      }
    if (v61 == ++v62) {
      goto LABEL_87;
    }
  }
LABEL_91:
  if (*(unsigned char *)(a1 + 528) != 1)
  {
    uint64_t v68 = FigSignalErrorAt();
    goto LABEL_207;
  }
  CFAllocatorRef v67 = v125;
  CFTypeID v66 = a3;
  uint64_t v68 = vtCompressionSessionEnsurePixelBufferPoolsAreUpToDate(a1, v125, a3);
  if (v68)
  {
LABEL_207:
    uint64_t v25 = v68;
    CFAllocatorRef v26 = 0;
    a7 = v122;
    goto LABEL_208;
  }
  a8 = v121;
  a7 = v122;
  CGFloat v69 = v116;
  if (!*(void *)(a1 + 376))
  {
    *(void *)&long long valuePtr = 0;
    char v70 = v118 ^ 1;
    if (!*(unsigned char *)(a1 + 512)) {
      char v70 = 1;
    }
    if ((v70 & 1) == 0)
    {
      uint64_t v71 = *(void *)(a1 + 504);
      *(void *)&long long valuePtr = v71;
LABEL_103:
      if (!v71) {
        goto LABEL_94;
      }
      CFAllocatorRef v75 = CFGetAllocator((CFTypeRef)a1);
      CFAllocatorRef v26 = CFDictionaryCreateMutable(v75, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetInt32();
      uint64_t v76 = *(const void **)(a1 + 544);
      if (v76) {
        CFDictionarySetValue(v26, @"RealTime", v76);
      }
      unint64_t v77 = *(const void **)(a1 + 176);
      if (v77) {
        CFDictionarySetValue(v26, @"DestinationColorPrimaries", v77);
      }
      uint64_t v78 = *(const void **)(a1 + 184);
      if (v78) {
        CFDictionarySetValue(v26, @"DestinationTransferFunction", v78);
      }
      CGFloat v79 = *(const void **)(a1 + 200);
      if (v79) {
        CFDictionarySetValue(v26, @"DestinationYCbCrMatrix", v79);
      }
      unsigned int v80 = *(const void **)(a1 + 208);
      if (v80) {
        CFDictionarySetValue(v26, @"DestinationICCProfile", v80);
      }
      uint64_t v81 = VTSessionSetProperties((VTSessionRef)valuePtr, v26);
      if (!v81) {
        goto LABEL_115;
      }
      uint64_t v25 = v81;
      goto LABEL_208;
    }
    *(void *)(a1 + 352) = vtCompressionSessionColorSyncWork;
    uint64_t v72 = FigDispatchQueueCreateWithPriorityAndClientPID();
    *(void *)(a1 + 344) = v72;
    if (v72)
    {
      CFAllocatorRef v73 = CFGetAllocator((CFTypeRef)a1);
      uint64_t v74 = VTPixelTransferSessionCreate(v73, (VTPixelTransferSessionRef *)&valuePtr);
      if (!v74)
      {
        uint64_t v71 = valuePtr;
        *(void *)(a1 + 376) = valuePtr;
        goto LABEL_103;
      }
    }
    else
    {
      uint64_t v74 = FigSignalErrorAt();
    }
    uint64_t v25 = v74;
    CFAllocatorRef v26 = 0;
LABEL_208:
    CFMutableDictionaryRef Mutable = v120;
    a8 = v121;
    CFDictionaryRef v23 = v119;
LABEL_28:
    MEMORY[0x1997056C0](*(void *)(a1 + 464));
    CFTypeRef v27 = 0;
    if (!v25) {
      goto LABEL_182;
    }
LABEL_181:
    vtCompressionSessionPipelineContextInvalidate((uint64_t *)&context);
    goto LABEL_182;
  }
LABEL_94:
  CFAllocatorRef v26 = 0;
LABEL_115:
  if (v118) {
    goto LABEL_118;
  }
  CFNumberRef v64 = (void (**)(uint64_t))(a1 + 352);
  CFNumberRef v65 = (NSObject **)(a1 + 344);
LABEL_117:
  queue = *v65;
  CGFloat v69 = *v64;
LABEL_118:
  MEMORY[0x1997056C0](*(void *)(a1 + 464));
  if (*MEMORY[0x1E4F1CFD0] == *(void *)(a1 + 576))
  {
    char v84 = v123 ^ 1;
    if (!v66) {
      char v84 = 1;
    }
    int v85 = v67;
    if ((v84 & 1) == 0)
    {
      if (CMTaggedBufferGroupGetCount(v66) < 1) {
        int v85 = 0;
      }
      else {
        int v85 = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
      }
    }
    int v97 = *(_DWORD *)(a1 + 672);
    if (!v97)
    {
      vtCompressionSessionSetHDRFormat(a1);
      int v97 = *(_DWORD *)(a1 + 672);
    }
    if ((v97 - 1) > 1 || *(unsigned char *)(a1 + 553) || *(unsigned char *)(a1 + 608) != 1)
    {
      CFTypeRef v27 = 0;
    }
    else
    {
      IOSurface = CVPixelBufferGetIOSurface(v85);
      CFTypeRef v27 = IOSurfaceCopyValue(IOSurface, @"DolbyVisionRPUData");
    }
    if (*(unsigned char *)(a1 + 641) && *(_DWORD *)(a1 + 672) == 1)
    {
      *(unsigned char *)(a1 + 640) = 1;
      if (!*(void *)(a1 + 656))
      {
        *(void *)&long long valuePtr = 0x4240133DA0E92F00;
        *(void *)(a1 + 656) = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)&valuePtr, 8);
      }
      if (!*(void *)(a1 + 664))
      {
        uint64_t AmbientViewingEnvironmentSEINAL = FigHEVCBridge_CreateAmbientViewingEnvironmentSEINAL();
        if (AmbientViewingEnvironmentSEINAL)
        {
          uint64_t v25 = AmbientViewingEnvironmentSEINAL;
          goto LABEL_180;
        }
      }
      if (*(unsigned char *)(a1 + 642) && !*(unsigned char *)(a1 + 643))
      {
        *(unsigned char *)(a1 + 643) = 1;
        uint64_t v100 = *(void *)(a1 + 432);
        uint64_t v101 = *(void *)(a1 + 656);
        uint64_t v102 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v103 = v102 ? v102 : 0;
        int v114 = *(void (**)(uint64_t, __CFString *, uint64_t))(v103 + 56);
        if (v114) {
          v114(v100, @"AmbientViewingEnvironment", v101);
        }
      }
    }
  }
  else
  {
    CFTypeRef v27 = 0;
  }
  int v82 = *(_DWORD *)(a1 + 48);
  if (v82 <= 1634743415)
  {
    if (v82 != 1634742376 && v82 != 1634742888)
    {
      unsigned __int16 v83 = 13416;
LABEL_133:
      if (v82 != (v83 | 0x61700000)) {
        goto LABEL_166;
      }
    }
  }
  else if (((v82 - 1634755432) > 0xB || ((1 << (v82 - 104)) & 0x8C1) == 0) {
         && ((v82 - 1634759272) > 6 || ((1 << (v82 - 104)) & 0x51) == 0))
  }
  {
    unsigned __int16 v83 = 13432;
    goto LABEL_133;
  }
  if (v67)
  {
    if (!*(unsigned char *)(a1 + 643))
    {
      CFTypeRef v86 = CVBufferCopyAttachment(v67, (CFStringRef)*MEMORY[0x1E4F249F0], 0);
      if (v86)
      {
        uint64_t v87 = v86;
        v124 = v26;
        uint64_t v88 = a7;
        uint64_t v89 = a8;
        long long v90 = v69;
        int v91 = v67;
        *(unsigned char *)(a1 + 643) = 1;
        *(unsigned char *)(a1 + 640) = 1;
        uint64_t v92 = *(const void **)(a1 + 656);
        *(void *)(a1 + 656) = v86;
        CFRetain(v86);
        if (v92) {
          CFRelease(v92);
        }
        if (*(unsigned char *)(a1 + 642))
        {
          uint64_t v93 = *(void *)(a1 + 432);
          uint64_t v94 = *(void *)(a1 + 656);
          uint64_t v95 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v96 = v95 ? v95 : 0;
          unint64_t v104 = *(void (**)(uint64_t, __CFString *, uint64_t))(v96 + 56);
          if (v104) {
            v104(v93, @"AmbientViewingEnvironment", v94);
          }
        }
        CFRelease(v87);
        CFAllocatorRef v67 = v91;
        CGFloat v69 = v90;
        a8 = v89;
        a7 = v88;
        CFAllocatorRef v26 = v124;
      }
    }
  }
LABEL_166:
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  MEMORY[0x1997056B0](*(void *)(a1 + 104));
  unint64_t v105 = *(__CFDictionary **)(a1 + 128);
  if (!v105)
  {
    values.version = 0;
    values.retain = (CFDictionaryRetainCallBack)vtCloneCompressionFrameTrackingInfo;
    values.copyDescription = 0;
    values.equal = 0;
    values.release = (CFDictionaryReleaseCallBack)vtFreeCompressionFrameTrackingInfo;
    CFAllocatorRef v106 = CFGetAllocator((CFTypeRef)a1);
    unint64_t v105 = CFDictionaryCreateMutable(v106, 0, 0, &values);
    *(void *)(a1 + 128) = v105;
    if (!v105)
    {
      MEMORY[0x1997056C0](*(void *)(a1 + 104));
      uint64_t v25 = 4294954392;
LABEL_180:
      CFDictionaryRef v23 = v119;
      CFMutableDictionaryRef Mutable = v120;
      goto LABEL_181;
    }
  }
  unint64_t v107 = *(char **)(a1 + 112);
  *(void *)(a1 + 112) = v107 + 1;
  LOWORD(v138) = 0;
  *(void *)&long long valuePtr = a8;
  *((void *)&valuePtr + 1) = v27;
  uint64_t v136 = a7;
  CFDictionaryAddValue(v105, v107, &valuePtr);
  ++*(_DWORD *)(a1 + 120);
  MEMORY[0x1997056C0](*(void *)(a1 + 104));
  v108 = *(const void **)(a1 + 504);
  unint64_t v109 = *(const void **)(a1 + 376);
  uint64_t v110 = *(const void **)(a1 + 488);
  long long valuePtr = v129;
  uint64_t v136 = v130;
  *(_OWORD *)&values.version = v127;
  values.release = v128;
  vtCompressionSessionPipelineCreateContext((const void *)a1, v67, v66, v108, v109, v110, &valuePtr, (long long *)&values.version, v117, (uint64_t)v107, &context);
  if (*(void (**)(uint64_t))(a1 + 280) != v69) {
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 272), 0xFFFFFFFFFFFFFFFFLL);
  }
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 272));
  CFDictionaryRef v23 = v119;
  CFMutableDictionaryRef Mutable = v120;
  if (!*(_DWORD *)(a1 + 16) && queue)
  {
    if (v69 == vtCompressionSessionCompressionWork)
    {
      uint64_t v111 = context;
      *((unsigned char *)context + 116) = 0;
      dispatch_sync_f(queue, v111, (dispatch_function_t)vtCompressionSessionCompressionWork);
      goto LABEL_176;
    }
    if (v69)
    {
      FigSemaphoreWaitRelative();
      dispatch_group_async_f(*(dispatch_group_t *)(a1 + 272), queue, context, (dispatch_function_t)v69);
LABEL_176:
      uint64_t v25 = 0;
      *(void *)(a1 + 280) = v69;
      goto LABEL_177;
    }
  }
  uint64_t v25 = FigSignalErrorAt();
LABEL_177:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 272));
  if (v25) {
    goto LABEL_181;
  }
LABEL_182:
  if (v27) {
    CFRelease(v27);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (v25) {
    goto LABEL_191;
  }
  return v25;
}

OSStatus VTCompressionSessionEncodeFrameWithOutputHandler(VTCompressionSessionRef session, CVImageBufferRef imageBuffer, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, VTEncodeInfoFlags *infoFlagsOut, VTCompressionOutputHandler outputHandler)
{
  if (!outputHandler || !session || !imageBuffer || *((_DWORD *)session + 4)) {
    goto LABEL_12;
  }
  if (!*((unsigned char *)session + 529)) {
    FigPowerReduceUtilitySFI();
  }
  uint64_t v14 = *((void *)session + 3);
  if (v14)
  {
    long long v18 = *(_OWORD *)&presentationTimeStamp->value;
    CMTimeEpoch epoch = presentationTimeStamp->epoch;
    long long v16 = *(_OWORD *)&duration->value;
    CMTimeEpoch v17 = duration->epoch;
    return VTCompressionSessionRemote_EncodeFrameWithOutputHandler(v14, (uint64_t)imageBuffer, 0, (uint64_t)&v18, &v16, (uint64_t)frameProperties, infoFlagsOut, outputHandler);
  }
  if (!*((void *)session + 10))
  {
    long long v18 = *(_OWORD *)&presentationTimeStamp->value;
    CMTimeEpoch epoch = presentationTimeStamp->epoch;
    long long v16 = *(_OWORD *)&duration->value;
    CMTimeEpoch v17 = duration->epoch;
    return vtCompressionSessionEncodeFrameCommon((uint64_t)session, imageBuffer, 0, (uint64_t)&v18, &v16, frameProperties, (uint64_t)outputHandler, 0, infoFlagsOut);
  }
  else
  {
LABEL_12:
    return FigSignalErrorAt();
  }
}

Boolean VTIsStereoMVHEVCEncodeSupported(void)
{
  return 1;
}

OSStatus VTCompressionSessionEncodeMultiImageFrame(VTCompressionSessionRef session, CMTaggedBufferGroupRef taggedBufferGroup, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, void *sourceFrameRefcon, VTEncodeInfoFlags *infoFlagsOut)
{
  if (!session || !taggedBufferGroup || !CMTaggedBufferGroupGetCount(taggedBufferGroup) || *((_DWORD *)session + 4)) {
    goto LABEL_12;
  }
  if (!*((unsigned char *)session + 529)) {
    FigPowerReduceUtilitySFI();
  }
  uint64_t v14 = *((void *)session + 3);
  if (v14)
  {
    long long v18 = *(_OWORD *)&presentationTimeStamp->value;
    CMTimeEpoch epoch = presentationTimeStamp->epoch;
    long long v16 = *(_OWORD *)&duration->value;
    CMTimeEpoch v17 = duration->epoch;
    return VTCompressionSessionRemote_EncodeFrame(v14, 0, taggedBufferGroup, (uint64_t)&v18, &v16, (uint64_t)frameProperties, (uint64_t)sourceFrameRefcon, infoFlagsOut);
  }
  if (*((void *)session + 10))
  {
    long long v18 = *(_OWORD *)&presentationTimeStamp->value;
    CMTimeEpoch epoch = presentationTimeStamp->epoch;
    long long v16 = *(_OWORD *)&duration->value;
    CMTimeEpoch v17 = duration->epoch;
    return vtCompressionSessionEncodeFrameCommon((uint64_t)session, 0, taggedBufferGroup, (uint64_t)&v18, &v16, frameProperties, 0, (uint64_t)sourceFrameRefcon, infoFlagsOut);
  }
  else
  {
LABEL_12:
    return FigSignalErrorAt();
  }
}

OSStatus VTCompressionSessionEncodeMultiImageFrameWithOutputHandler(VTCompressionSessionRef session, CMTaggedBufferGroupRef taggedBufferGroup, CMTime *presentationTimeStamp, CMTime *duration, CFDictionaryRef frameProperties, VTEncodeInfoFlags *infoFlagsOut, VTCompressionOutputHandler outputHandler)
{
  if (!outputHandler
    || !session
    || !taggedBufferGroup
    || !CMTaggedBufferGroupGetCount(taggedBufferGroup)
    || *((_DWORD *)session + 4))
  {
    goto LABEL_13;
  }
  if (!*((unsigned char *)session + 529)) {
    FigPowerReduceUtilitySFI();
  }
  uint64_t v14 = *((void *)session + 3);
  if (v14)
  {
    long long v18 = *(_OWORD *)&presentationTimeStamp->value;
    CMTimeEpoch epoch = presentationTimeStamp->epoch;
    long long v16 = *(_OWORD *)&duration->value;
    CMTimeEpoch v17 = duration->epoch;
    return VTCompressionSessionRemote_EncodeFrameWithOutputHandler(v14, 0, taggedBufferGroup, (uint64_t)&v18, &v16, (uint64_t)frameProperties, infoFlagsOut, outputHandler);
  }
  if (!*((void *)session + 10))
  {
    long long v18 = *(_OWORD *)&presentationTimeStamp->value;
    CMTimeEpoch epoch = presentationTimeStamp->epoch;
    long long v16 = *(_OWORD *)&duration->value;
    CMTimeEpoch v17 = duration->epoch;
    return vtCompressionSessionEncodeFrameCommon((uint64_t)session, 0, taggedBufferGroup, (uint64_t)&v18, &v16, frameProperties, (uint64_t)outputHandler, 0, infoFlagsOut);
  }
  else
  {
LABEL_13:
    return FigSignalErrorAt();
  }
}

uint64_t vtCompressionSessionPipelineCreateContext(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, long long *a7, long long *a8, const void *a9, uint64_t a10, void *a11)
{
  uint64_t v19 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x10600409A072D91uLL);
  if (v19)
  {
    if (a1) {
      CFTypeRef v20 = CFRetain(a1);
    }
    else {
      CFTypeRef v20 = 0;
    }
    *(void *)uint64_t v19 = v20;
    if (a2) {
      CFTypeRef v21 = CFRetain(a2);
    }
    else {
      CFTypeRef v21 = 0;
    }
    *((void *)v19 + 4) = v21;
    if (a3) {
      CFTypeRef v22 = CFRetain(a3);
    }
    else {
      CFTypeRef v22 = 0;
    }
    *((void *)v19 + 5) = v22;
    if (a4) {
      CFTypeRef v23 = CFRetain(a4);
    }
    else {
      CFTypeRef v23 = 0;
    }
    *((void *)v19 + 1) = v23;
    if (a5) {
      CFTypeRef v24 = CFRetain(a5);
    }
    else {
      CFTypeRef v24 = 0;
    }
    *((void *)v19 + 2) = v24;
    if (a6) {
      CFTypeRef v25 = CFRetain(a6);
    }
    else {
      CFTypeRef v25 = 0;
    }
    *((void *)v19 + 3) = v25;
    long long v26 = *a7;
    *((void *)v19 + 9) = *((void *)a7 + 2);
    *(_OWORD *)(v19 + 56) = v26;
    long long v27 = *a8;
    *((void *)v19 + 12) = *((void *)a8 + 2);
    *((_OWORD *)v19 + 5) = v27;
    if (a9) {
      uint64_t result = (uint64_t)CFRetain(a9);
    }
    else {
      uint64_t result = 0;
    }
    *((void *)v19 + 6) = result;
    *((void *)v19 + 13) = a10;
    *((_DWORD *)v19 + 28) = 0;
    v19[116] = 1;
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  *a11 = v19;
  return result;
}

uint64_t vtCompressionSessionCompleteFramesWork(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    if (!*a1 || *(_DWORD *)(v3 + 16) == 2)
    {
      uint64_t result = FigSignalErrorAt();
    }
    else
    {
      uint64_t v4 = *(void *)(v3 + 432);
      long long v9 = *(_OWORD *)(a1 + 7);
      uint64_t v10 = a1[9];
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(uint64_t (**)(uint64_t, long long *))(v6 + 24);
      if (v7)
      {
        long long v11 = v9;
        uint64_t v12 = v10;
        uint64_t result = v7(v4, &v11);
      }
      else
      {
        uint64_t result = 4294954514;
      }
    }
    *((_DWORD *)a1 + 28) = result;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void vtCompressionSessionPipelineContextInvalidate(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      if (*(void *)v2)
      {
        CFRelease(*(CFTypeRef *)v2);
        *(void *)uint64_t v2 = 0;
      }
      uint64_t v3 = *(const void **)(v2 + 32);
      if (v3)
      {
        CFRelease(v3);
        *(void *)(v2 + 32) = 0;
      }
      uint64_t v4 = *(const void **)(v2 + 40);
      if (v4)
      {
        CFRelease(v4);
        *(void *)(v2 + 40) = 0;
      }
      uint64_t v5 = *(const void **)(v2 + 8);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 8) = 0;
      }
      uint64_t v6 = *(const void **)(v2 + 16);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 16) = 0;
      }
      uint64_t v7 = *(const void **)(v2 + 24);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(v2 + 24) = 0;
      }
      uint64_t v8 = MEMORY[0x1E4F1F9F8];
      long long v9 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(v2 + 56) = *MEMORY[0x1E4F1F9F8];
      uint64_t v10 = *(void *)(v8 + 16);
      *(void *)(v2 + 72) = v10;
      *(_OWORD *)(v2 + 80) = v9;
      *(void *)(v2 + 96) = v10;
      long long v11 = *(const void **)(v2 + 48);
      if (v11) {
        CFRelease(v11);
      }
      free((void *)v2);
      *a1 = 0;
    }
  }
}

uint64_t VTVideoEncoderGetTypeID()
{
  MEMORY[0x199705810](&VTVideoEncoderGetClassID_sRegisterVTVideoEncoderTypeOnce, RegisterVTVideoEncoderType);

  return CMBaseClassGetCFTypeID();
}

void vtCompressionSessionCopyFallbackVideoFormatDescriptionExtensions(uint64_t cf, const __CFDictionary *a2, __CFDictionary **a3)
{
  if (*(unsigned char *)(cf + 256)) {
    vtCompressionSessionConfirmSpatialAndColorProperties(cf);
  }
  if (*(void *)(cf + 136)
    || *(void *)(cf + 144)
    || *(void *)(cf + 152)
    || *(void *)(cf + 160)
    || *(void *)(cf + 176)
    || *(void *)(cf + 184)
    || *(void *)(cf + 192)
    || *(void *)(cf + 200)
    || *(void *)(cf + 208)
    || *(void *)(cf + 216)
    || *(void *)(cf + 224)
    || *(void *)(cf + 232)
    || *(void *)(cf + 656)
    || *(unsigned char *)(cf + 688)
    || *(unsigned char *)(cf + 689)
    || *(unsigned char *)(cf + 690)
    || *(unsigned char *)(cf + 691)
    || *(void *)(cf + 696)
    || *(void *)(cf + 704)
    || *(void *)(cf + 712)
    || *(unsigned char *)(cf + 720)
    || *(void *)(cf + 728)
    || *(unsigned char *)(cf + 736)
    || *(unsigned char *)(cf + 744)
    || *(void *)(cf + 264)
    || *(void *)(cf + 880))
  {
    CFAllocatorRef v6 = CFGetAllocator((CFTypeRef)cf);
    if (a2) {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v6, 0, a2);
    }
    else {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    uint64_t v8 = MutableCopy;
    if (*(void *)(cf + 136))
    {
      long long v9 = (const void *)*MEMORY[0x1E4F24B98];
      if (!CFDictionaryContainsKey(MutableCopy, (const void *)*MEMORY[0x1E4F24B98])) {
        CFDictionarySetValue(v8, v9, *(const void **)(cf + 136));
      }
    }
    if (*(void *)(cf + 144))
    {
      uint64_t v10 = (const void *)*MEMORY[0x1E4F24A78];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F24A78])) {
        CFDictionarySetValue(v8, v10, *(const void **)(cf + 144));
      }
    }
    if (*(void *)(cf + 152))
    {
      long long v11 = (const void *)*MEMORY[0x1E4F24AF8];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F24AF8])) {
        CFDictionarySetValue(v8, v11, *(const void **)(cf + 152));
      }
    }
    if (*(void *)(cf + 160))
    {
      uint64_t v12 = (const void *)*MEMORY[0x1E4F24B00];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F24B00])) {
        CFDictionarySetValue(v8, v12, *(const void **)(cf + 160));
      }
    }
    if (!vtCompressionSessionIsIPT(cf))
    {
      if (*(void *)(cf + 176))
      {
        long long v31 = (const void *)*MEMORY[0x1E4F24A90];
        if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F24A90])) {
          CFDictionarySetValue(v8, v31, *(const void **)(cf + 176));
        }
      }
      if (*(void *)(cf + 184))
      {
        uint64_t v32 = (const void *)*MEMORY[0x1E4F24BC8];
        if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F24BC8])) {
          CFDictionarySetValue(v8, v32, *(const void **)(cf + 184));
        }
      }
      if (*(void *)(cf + 192))
      {
        uint64_t v33 = (const void *)*MEMORY[0x1E4F24B28];
        if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F24B28])) {
          CFDictionarySetValue(v8, v33, *(const void **)(cf + 192));
        }
      }
      if (*(void *)(cf + 200))
      {
        uint64_t v34 = (const void *)*MEMORY[0x1E4F24C18];
        if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F24C18])) {
          CFDictionarySetValue(v8, v34, *(const void **)(cf + 200));
        }
      }
      if (*(void *)(cf + 208))
      {
        uint64_t v35 = (const void *)*MEMORY[0x1E4F1EDF0];
        if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F1EDF0])) {
          CFDictionarySetValue(v8, v35, *(const void **)(cf + 208));
        }
      }
    }
    if (*(void *)(cf + 216))
    {
      uint64_t v13 = (const void *)*MEMORY[0x1E4F1EE00];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F1EE00])) {
        CFDictionarySetValue(v8, v13, *(const void **)(cf + 216));
      }
    }
    if (*(void *)(cf + 224))
    {
      uint64_t v14 = (const void *)*MEMORY[0x1E4F1ED88];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F1ED88])) {
        CFDictionarySetValue(v8, v14, *(const void **)(cf + 224));
      }
    }
    if (*(void *)(cf + 232))
    {
      uint64_t v15 = (const void *)*MEMORY[0x1E4F1ED38];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F1ED38])) {
        CFDictionarySetValue(v8, v15, *(const void **)(cf + 232));
      }
    }
    if (*(void *)(cf + 656))
    {
      long long v16 = (const void *)*MEMORY[0x1E4F1ED30];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F1ED30])) {
        CFDictionarySetValue(v8, v16, *(const void **)(cf + 656));
      }
    }
    if (*(unsigned char *)(cf + 688))
    {
      CMTimeEpoch v17 = (const void *)*MEMORY[0x1E4F21620];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F21620]))
      {
        long long v18 = (const void **)MEMORY[0x1E4F1CFD0];
        if (!*(unsigned char *)(cf + 688)) {
          long long v18 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v8, v17, *v18);
      }
    }
    if (*(unsigned char *)(cf + 689))
    {
      uint64_t v19 = (const void *)*MEMORY[0x1E4F21628];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F21628]))
      {
        CFTypeRef v20 = (const void **)MEMORY[0x1E4F1CFD0];
        if (!*(unsigned char *)(cf + 689)) {
          CFTypeRef v20 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v8, v19, *v20);
      }
    }
    if (*(unsigned char *)(cf + 690))
    {
      CFTypeRef v21 = (const void *)*MEMORY[0x1E4F21618];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F21618]))
      {
        CFTypeRef v22 = (const void **)MEMORY[0x1E4F1CFD0];
        if (!*(unsigned char *)(cf + 690)) {
          CFTypeRef v22 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v8, v21, *v22);
      }
    }
    if (*(unsigned char *)(cf + 691))
    {
      CFTypeRef v23 = (const void *)*MEMORY[0x1E4F21610];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F21610]))
      {
        CFTypeRef v24 = (const void **)MEMORY[0x1E4F1CFD0];
        if (!*(unsigned char *)(cf + 691)) {
          CFTypeRef v24 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v8, v23, *v24);
      }
    }
    if (*(void *)(cf + 696))
    {
      CFTypeRef v25 = (const void *)*MEMORY[0x1E4F21630];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F21630])) {
        CFDictionarySetValue(v8, v25, *(const void **)(cf + 696));
      }
    }
    if (*(void *)(cf + 704))
    {
      long long v26 = (const void *)*MEMORY[0x1E4F21648];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F21648])) {
        CFDictionarySetValue(v8, v26, *(const void **)(cf + 704));
      }
    }
    if (*(void *)(cf + 712))
    {
      long long v27 = (const void *)*MEMORY[0x1E4F21668];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F21668])) {
        CFDictionarySetValue(v8, v27, *(const void **)(cf + 712));
      }
    }
    if (*(unsigned char *)(cf + 720) && !CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F21658])) {
      FigCFDictionarySetInt32();
    }
    if (*(void *)(cf + 728))
    {
      uint64_t v28 = (const void *)*MEMORY[0x1E4F21670];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F21670])) {
        CFDictionarySetValue(v8, v28, *(const void **)(cf + 728));
      }
    }
    if (*(unsigned char *)(cf + 736) && !CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F215E0])) {
      FigCFDictionarySetInt32();
    }
    if (*(unsigned char *)(cf + 744) && !CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F21638])) {
      FigCFDictionarySetInt32();
    }
    if (*(void *)(cf + 264))
    {
      CMItemCount v29 = (const void *)*MEMORY[0x1E4F1EDE8];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F1EDE8])) {
        CFDictionarySetValue(v8, v29, *(const void **)(cf + 264));
      }
    }
    if (*(void *)(cf + 880))
    {
      uint64_t v30 = (const void *)*MEMORY[0x1E4F1EDF8];
      if (!CFDictionaryContainsKey(v8, (const void *)*MEMORY[0x1E4F1EDF8])) {
        CFDictionarySetValue(v8, v30, *(const void **)(cf + 880));
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  *a3 = v8;
}

uint64_t vtCompressionSessionAddDolbyVisionVideoFormatDescriptionExtensions(uint64_t a1, unsigned int a2, int a3, const __CFDictionary *a4)
{
  *(void *)((char *)&v36[1] + 3) = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    return FigSignalErrorAt();
  }
  int v4 = *(char *)(a1 + 676);
  if (v4 != 8 && v4 != 5) {
    return 0;
  }
  v36[0] = 0;
  uint64_t v35 = 0;
  *(_DWORD *)((char *)v36 + 7) = 0;
  if (v4 == 5)
  {
    char v7 = 0;
  }
  else
  {
    if (v4 != 8) {
      return 0;
    }
    char v7 = 64;
  }
  float v8 = *(float *)(a1 + 680);
  uint64_t v9 = *(void *)(a1 + 560);
  if (v8 != 0.0)
  {
    if (v8 < 0.0) {
      float v8 = -v8;
    }
    if (v9) {
      goto LABEL_13;
    }
LABEL_59:
    unsigned __int8 v17 = 13;
    goto LABEL_50;
  }
  *(_DWORD *)(a1 + 680) = 1106247680;
  float v8 = 30.0;
  if (!v9) {
    goto LABEL_59;
  }
LABEL_13:
  char v30 = v7;
  uint64_t v10 = 0;
  float v11 = *(float *)(a1 + 684);
  unint64_t v12 = vcvtps_u32_f32(v8 * (float)(a3 * a2));
  unint64_t v13 = a2;
  uint64_t v14 = &qword_193E7CF70;
  do
  {
    uint64_t v15 = v10;
    if (*(v14 - 1) >= v13 && *(v14 - 2) >= v12)
    {
      if (FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual()
        || FigCFEqual())
      {
        unint64_t v16 = *v14;
      }
      else
      {
        if (!FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual()
          && !FigCFEqual())
        {
          goto LABEL_33;
        }
        unint64_t v16 = v14[1];
      }
      if (v11 <= (float)v16) {
        break;
      }
    }
LABEL_33:
    uint64_t v10 = v15 + 1;
    v14 += 4;
  }
  while (v15 != 12);
  unsigned __int8 v17 = v15 + 1;
  char v7 = v30;
LABEL_50:
  *(_WORD *)bytes = 1;
  char v32 = (v17 >> 5) | (2 * v4);
  char v33 = (8 * v17) | 5;
  char v34 = v7;
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDataRef v19 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 24);
  if (v4 >= 8) {
    CFTypeRef v20 = @"dvvC";
  }
  else {
    CFTypeRef v20 = @"dvcC";
  }
  if (v19)
  {
    CFDataRef v21 = v19;
    CFTypeRef v22 = (const void *)*MEMORY[0x1E4F1EE20];
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F1EE20]);
    if (Value)
    {
      CFDictionaryRef v24 = Value;
      CFIndex Count = CFDictionaryGetCount(Value);
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v18, Count, v24);
    }
    else
    {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutable(v18, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    long long v27 = MutableCopy;
    if (MutableCopy)
    {
      CFDictionarySetValue(MutableCopy, v20, v21);
      CFDictionarySetValue(a4, v22, v27);
      CFRelease(v21);
      uint64_t v28 = v27;
    }
    else
    {
      uint64_t v28 = v21;
    }
    CFRelease(v28);
  }
  return 0;
}

uint64_t VTEncoderSessionCreateVideoFormatDescriptionFromHEVCParameterSets(uint64_t *a1, size_t a2, const void *a3, const void *a4, int a5, const __CFDictionary *a6, CMFormatDescriptionRef *a7)
{
  CMFormatDescriptionRef desc = 0;
  uint64_t v28 = 0;
  if (a1)
  {
    uint64_t v7 = *a1;
    if (!*a1 || *(_DWORD *)(v7 + 16) == 2)
    {
      uint64_t v24 = FigSignalErrorAt();
      CFMutableDictionaryRef Mutable = 0;
    }
    else
    {
      vtCompressionSessionCopyFallbackVideoFormatDescriptionExtensions(*a1, a6, &v28);
      CFMutableDictionaryRef Mutable = v28;
      if (v28) {
        CFDictionaryRef v15 = v28;
      }
      else {
        CFDictionaryRef v15 = a6;
      }
      uint64_t v16 = vtCreateVideoFomatDescriptionFromHEVCParameterSets((CFDataRef *)v7, a2, a3, a4, a5, v15, &desc);
      if (v16)
      {
LABEL_30:
        uint64_t v24 = v16;
        goto LABEL_31;
      }
      if (!*(unsigned char *)(v7 + 676)) {
        goto LABEL_17;
      }
      unsigned __int8 v17 = (const void *)*MEMORY[0x1E4F1EE20];
      CFPropertyListRef Extension = CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F1EE20]);
      if (Extension)
      {
        CFDataRef v19 = Extension;
        CFTypeID v20 = CFGetTypeID(Extension);
        if (v20 == CFDictionaryGetTypeID())
        {
          if (Mutable
            || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (uint64_t v28 = Mutable) != 0))
          {
            CFDictionarySetValue(Mutable, v17, v19);
            CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(desc);
            uint64_t v16 = vtCompressionSessionAddDolbyVisionVideoFormatDescriptionExtensions(v7, Dimensions.width, Dimensions.height, Mutable);
            if (!v16)
            {
              if (desc)
              {
                CFRelease(desc);
                CMFormatDescriptionRef desc = 0;
              }
              uint64_t v16 = vtCreateVideoFomatDescriptionFromHEVCParameterSets((CFDataRef *)v7, a2, a3, a4, a5, Mutable, &desc);
              if (!v16)
              {
LABEL_17:
                CFTypeRef v22 = *(const void **)(v7 + 32);
                CMFormatDescriptionRef v23 = desc;
                *(void *)(v7 + 32) = desc;
                if (v23) {
                  CFRetain(v23);
                }
                if (v22) {
                  CFRelease(v22);
                }
                uint64_t v24 = 0;
                CMFormatDescriptionRef v25 = desc;
                if (a7 && desc)
                {
                  uint64_t v24 = 0;
                  *a7 = desc;
                  CMFormatDescriptionRef desc = 0;
LABEL_34:
                  if (Mutable) {
                    CFRelease(Mutable);
                  }
                  return v24;
                }
LABEL_32:
                if (v25) {
                  CFRelease(v25);
                }
                goto LABEL_34;
              }
            }
          }
          else
          {
            uint64_t v16 = FigSignalErrorAt();
          }
          goto LABEL_30;
        }
      }
      uint64_t v24 = 4294954384;
    }
LABEL_31:
    CMFormatDescriptionRef v25 = desc;
    goto LABEL_32;
  }

  return FigSignalErrorAt();
}

uint64_t vtCreateVideoFomatDescriptionFromHEVCParameterSets(CFDataRef *cf, size_t a2, const void *a3, const void *a4, int a5, const __CFDictionary *a6, CMFormatDescriptionRef *a7)
{
  size_t v12 = a2;
  if (*((unsigned char *)cf + 641) && *((unsigned char *)cf + 640) && !*((unsigned char *)cf + 642) && cf[83])
  {
    if (a2 >> 61
      || a2 == 0x1FFFFFFFFFFFFFFFLL
      || 8 * a2 == -8
      || (CFTypeID v20 = malloc_type_malloc(8 * a2 + 8, 0x5CC9CBA6uLL)) == 0)
    {
      uint64_t v18 = FigSignalErrorAt();
      uint64_t v14 = 0;
      CFDictionaryRef v15 = 0;
      goto LABEL_7;
    }
    uint64_t v14 = v20;
    CFDictionaryRef v15 = malloc_type_malloc(8 * v12 + 8, 0x5CC9CBA6uLL);
    if (!v15)
    {
      uint64_t v17 = FigSignalErrorAt();
      goto LABEL_6;
    }
    memcpy(v14, a3, 8 * v12);
    memcpy(v15, a4, 8 * v12);
    *((void *)v14 + v12) = CFDataGetBytePtr(cf[83]);
    *((void *)v15 + v12++) = CFDataGetLength(cf[83]);
    a4 = v15;
    a3 = v14;
  }
  else
  {
    uint64_t v14 = 0;
    CFDictionaryRef v15 = 0;
  }
  CFAllocatorRef v16 = CFGetAllocator(cf);
  uint64_t v17 = CMVideoFormatDescriptionCreateFromHEVCParameterSets(v16, v12, (const uint8_t *const *)a3, (const size_t *)a4, a5, a6, a7);
LABEL_6:
  uint64_t v18 = v17;
LABEL_7:
  free(v15);
  free(v14);
  return v18;
}

uint64_t VTEncoderSessionCreateMVHEVCThreeDimensionalReferenceDisplaysInfoSEIWithDefaults(uint64_t a1, __int16 a2, __int16 a3)
{
  uint64_t v6 = FigHEVCBridge_AllocThreeDimensionalReferenceDisplaysInfo();
  uint64_t v7 = (void *)v6;
  if (!v6)
  {
    uint64_t ThreeDimensionalReferenceDisplaysInfoSEI = FigSignalErrorAt();
    goto LABEL_4;
  }
  if (a1)
  {
    *(unsigned char *)uint64_t v6 = 31;
    *(_WORD *)(v6 + 8) = a2;
    *(_WORD *)(v6 + 10) = a3;
    uint64_t ThreeDimensionalReferenceDisplaysInfoSEI = FigHEVCBridge_CreateThreeDimensionalReferenceDisplaysInfoSEI();
LABEL_4:
    uint64_t v9 = ThreeDimensionalReferenceDisplaysInfoSEI;
    free(v7);
    return v9;
  }

  return FigSignalErrorAt();
}

void *vtTimeStampRetain(uint64_t a1, long long *a2)
{
  uint64_t v3 = malloc_type_malloc(0x18uLL, 0x1000040504FFAC1uLL);
  int v4 = v3;
  if (v3)
  {
    long long v5 = *a2;
    v3[2] = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v5;
  }
  else
  {
    FigSignalErrorAt();
  }
  return v4;
}

void vtTimeStampRelease(int a1, void *a2)
{
}

CFStringRef vtTimeStampCopyDescription(CMTime *a1)
{
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime v3 = *a1;
  return CMTimeCopyDescription(v1, &v3);
}

uint64_t VTEncoderSessionTeardown(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
  FigSimpleMutexDestroy();
  *(void *)(a1 + 24) = 0;

  return MEMORY[0x1F40DCF38](a1 + 8);
}

uint64_t VTEncoderSessionEnqueuePresentationTimeStamp(uint64_t a1, _DWORD *a2)
{
  if (a1 && (a2[3] & 0x1D) == 1)
  {
    MEMORY[0x1997056B0](*(void *)(a1 + 24));
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), a2);
    MEMORY[0x1997056C0](*(void *)(a1 + 24));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTEncoderSessionCreateCMBlockBuffer(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    if ((*(void *)(a1 + 8) || (uint64_t v5 = FigCopyCommonMemoryPool(), (*(void *)(a1 + 8) = v5) != 0))
      && (uint64_t result = FigMemoryPoolCreateBlockBufferWithOptions(), result))
    {
      if (!a3) {
        return result;
      }
    }
    else
    {
      uint64_t result = FigSignalErrorAt();
      if (!a3) {
        return result;
      }
    }
    *a3 = 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t VTEncoderSessionDequeueDecodeTimeStamp(uint64_t a1, uint64_t a2)
{
  long long v8 = *MEMORY[0x1E4F1F9F8];
  uint64_t v9 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (a1)
  {
    MEMORY[0x1997056B0](*(void *)(a1 + 24));
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 16)) < 1)
    {
      uint64_t v7 = FigSignalErrorAt();
      MEMORY[0x1997056C0](*(void *)(a1 + 24));
      return v7;
    }
    else
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), 0);
      if (ValueAtIndex)
      {
        uint64_t v5 = 0;
        long long v8 = *(_OWORD *)ValueAtIndex;
        uint64_t v9 = ValueAtIndex[2];
      }
      else
      {
        uint64_t v5 = FigSignalErrorAt();
      }
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), 0);
      MEMORY[0x1997056C0](*(void *)(a1 + 24));
      if (a2)
      {
        *(_OWORD *)a2 = v8;
        *(void *)(a2 + 16) = v9;
      }
      return v5;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t VTEncoderSessionSetTimeRangesForNextPass(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CMTimeValue v28 = *MEMORY[0x1E4F1FA20];
  CMTimeScale v29 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 8);
  if (a1 && (uint64_t v3 = *a1) != 0 && *(_DWORD *)(v3 + 16) != 2 && (v4 = a2, a2 > 0))
  {
    CMTimeFlags v6 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 12);
    CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1FA20] + 16);
    CMTimeValue v7 = *(void *)(MEMORY[0x1E4F1FA20] + 24);
    CMTimeScale v9 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 32);
    CMTimeFlags v10 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 36);
    uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA20] + 40);
    size_t v12 = *(void **)(v3 + 784);
    if (v12)
    {
      *(void *)(v3 + 776) = 0;
      free(v12);
      *(void *)(v3 + 784) = 0;
    }
    unint64_t v21 = v4;
    uint64_t v22 = v3;
    __src = a3;
    unint64_t v13 = a3 + 5;
    do
    {
      CMTimeFlags v14 = v6;
      CMTimeValue v26 = *(v13 - 5);
      CMTimeFlags v6 = *((_DWORD *)v13 - 7);
      CMTimeScale v27 = *((_DWORD *)v13 - 8);
      if ((v6 & 1) == 0) {
        return FigSignalErrorAt();
      }
      CMTimeFlags v15 = v10;
      CMTimeFlags v10 = *((_DWORD *)v13 - 1);
      if ((v10 & 1) == 0) {
        return FigSignalErrorAt();
      }
      if (*v13) {
        return FigSignalErrorAt();
      }
      CMTimeValue v16 = v7;
      CMTimeValue v7 = *(v13 - 2);
      if (v7 < 0) {
        return FigSignalErrorAt();
      }
      if ((v6 & 0x1D) != 1) {
        return FigSignalErrorAt();
      }
      if (*(v13 - 3)) {
        return FigSignalErrorAt();
      }
      if ((*((_DWORD *)v13 - 1) & 0x1D) != 1) {
        return FigSignalErrorAt();
      }
      CMTimeScale v17 = *((_DWORD *)v13 - 2);
      if ((v14 & 1) != 0 && (v15 & 1) != 0 && !v11 && (v16 & 0x8000000000000000) == 0)
      {
        memset(&v25, 0, sizeof(v25));
        range.start.value = v28;
        range.start.timescale = v29;
        range.start.flags = v14;
        range.start.CMTimeEpoch epoch = v8;
        range.duration.value = v16;
        range.duration.timescale = v9;
        range.duration.flags = v15;
        range.duration.CMTimeEpoch epoch = 0;
        CMTimeRangeGetEnd(&v25, &range);
        range.start = v25;
        time2.value = v26;
        time2.timescale = v27;
        time2.flags = v6;
        time2.CMTimeEpoch epoch = 0;
        if (CMTimeCompare(&range.start, &time2) > 0) {
          return FigSignalErrorAt();
        }
      }
      uint64_t v11 = 0;
      CMTimeEpoch v8 = 0;
      v13 += 6;
      CMTimeValue v28 = v26;
      CMTimeScale v29 = v27;
      CMTimeScale v9 = v17;
      --v4;
    }
    while (v4);
    *(void *)(v22 + 776) = v21;
    if (v21 >= 0x555555555555556)
    {
      *(void *)(v22 + 784) = 0;
      return 4294954392;
    }
    CFDataRef v19 = malloc_type_malloc(48 * v21, 0x5CC9CBA6uLL);
    *(void *)(v22 + 784) = v19;
    if (!v19) {
      return 4294954392;
    }
    memcpy(v19, __src, 48 * *(void *)(v22 + 776));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

OSStatus VTCompressionSessionBeginPass(VTCompressionSessionRef session, VTCompressionSessionOptionFlags beginPassFlags, uint32_t *reserved)
{
  if (!session || *((_DWORD *)session + 4) == 2) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)&beginPassFlags;
  if (*((void *)session + 3))
  {
    uint64_t v5 = *((void *)session + 3);
    return VTCompressionSessionRemote_BeginPass(v5, beginPassFlags, reserved);
  }
  if (!*((void *)session + 95) || *((_DWORD *)session + 192))
  {
LABEL_18:
    return FigSignalErrorAt();
  }
  else
  {
    *((_DWORD *)session + 192) = 1;
    uint64_t v7 = *((void *)session + 54);
    CMTimeEpoch v8 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      CMTimeScale v9 = v8;
    }
    else {
      CMTimeScale v9 = 0;
    }
    if (*v9 >= 2uLL && (CMTimeFlags v10 = (uint64_t (*)(uint64_t, uint64_t, uint32_t *))v9[8]) != 0)
    {
      return v10(v7, v4, reserved);
    }
    else
    {
      return -12782;
    }
  }
}

OSStatus VTCompressionSessionEndPass(VTCompressionSessionRef session, Boolean *furtherPassesRequestedOut, uint32_t *reserved)
{
  if (!session || *((_DWORD *)session + 4) == 2) {
    goto LABEL_18;
  }
  if (*((void *)session + 3))
  {
    uint64_t v5 = *((void *)session + 3);
    return VTCompressionSessionRemote_EndPass(v5, (BOOL *)furtherPassesRequestedOut, reserved);
  }
  if (*((void *)session + 95) && *((_DWORD *)session + 192) == 1)
  {
    *((_DWORD *)session + 192) = 2;
    uint64_t v7 = *((void *)session + 54);
    CMTimeEpoch v8 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      CMTimeScale v9 = v8;
    }
    else {
      CMTimeScale v9 = 0;
    }
    if (*v9 >= 2uLL && (CMTimeFlags v10 = (uint64_t (*)(uint64_t, Boolean *, uint32_t *))v9[9]) != 0)
    {
      return v10(v7, furtherPassesRequestedOut, reserved);
    }
    else
    {
      return -12782;
    }
  }
  else
  {
LABEL_18:
    return FigSignalErrorAt();
  }
}

OSStatus VTCompressionSessionGetTimeRangesForNextPass(VTCompressionSessionRef session, CMItemCount *timeRangeCountOut, const CMTimeRange **timeRangeArrayOut)
{
  if (!session || *((_DWORD *)session + 4) == 2) {
    return FigSignalErrorAt();
  }
  if (*((void *)session + 3)) {
    return VTCompressionSessionRemote_GetTimeRangesForNextPass(*((void *)session + 3), timeRangeCountOut, timeRangeArrayOut);
  }
  if (!*((void *)session + 95)) {
    return FigSignalErrorAt();
  }
  uint64_t v4 = (const CMTimeRange *)*((void *)session + 98);
  if (!v4) {
    return FigSignalErrorAt();
  }
  CMItemCount v5 = *((void *)session + 97);
  if (v5 <= 0 || !timeRangeCountOut || !timeRangeArrayOut || *((_DWORD *)session + 192) != 2) {
    return FigSignalErrorAt();
  }
  *((_DWORD *)session + 192) = 0;
  *timeRangeCountOut = v5;
  *timeRangeArrayOut = v4;
  return 0;
}

uint64_t VTDistributedCompressionGetSegmentRanges(const void *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef cf = 0;
  if ((int)a4 > 0 && a5 && a6)
  {
    uint64_t v11 = VTCreateVideoEncoderInstanceFromEncoderID(a1, *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v12 = cf;
    if (v11)
    {
      uint64_t v16 = v11;
      if (!cf) {
        return v16;
      }
    }
    else
    {
      long long v18 = *a3;
      long long v19 = a3[1];
      long long v20 = a3[2];
      unint64_t v13 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        CMTimeFlags v14 = v13;
      }
      else {
        CMTimeFlags v14 = 0;
      }
      if (*v14 >= 2uLL
        && (CMTimeFlags v15 = (uint64_t (*)(CFTypeRef, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))v14[15]) != 0)
      {
        v22[0] = v18;
        v22[1] = v19;
        v22[2] = v20;
        uint64_t v16 = v15(v12, a2, v22, a4, a5, a6);
      }
      else
      {
        uint64_t v16 = 4294954514;
      }
      CFTypeRef v12 = cf;
      if (!cf) {
        return v16;
      }
    }
    CFRelease(v12);
    return v16;
  }

  return FigSignalErrorAt();
}

uint64_t VTDistributedCompressionGetSegmentsToReencode(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef cf = 0;
  if ((int)a3 > 0)
  {
    if (a4 && a5)
    {
      uint64_t v9 = VTCreateVideoEncoderInstanceFromEncoderID(a1, *MEMORY[0x1E4F1CF80], &cf);
      if (!v9)
      {
        CFTypeRef v10 = cf;
        uint64_t v11 = *(void **)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          CFTypeRef v12 = v11;
        }
        else {
          CFTypeRef v12 = 0;
        }
        if (*v12 < 2uLL
          || (unint64_t v13 = (uint64_t (*)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t))v12[16]) == 0)
        {
          uint64_t v14 = 4294954514;
          goto LABEL_13;
        }
        uint64_t v9 = v13(v10, a2, a3, a4, a5);
      }
    }
    else
    {
      uint64_t v9 = FigSignalErrorAt();
    }
    uint64_t v14 = v9;
LABEL_13:
    if (cf) {
      CFRelease(cf);
    }
    return v14;
  }

  return FigSignalErrorAt();
}

CFDictionaryRef VTCreateDictionaryRepresentationForMovedRect(double a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  double valuePtr = a1;
  double v12 = a2;
  double v13 = a3;
  double v14 = a4;
  double v9 = a6;
  double v10 = a5;
  *(_OWORD *)keys = xmmword_1E5783278;
  long long v22 = *(_OWORD *)&off_1E5783288;
  long long v23 = xmmword_1E5783298;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryValueCallBacks values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCGFloatType, &valuePtr);
  CFTypeRef cf = CFNumberCreate(v6, kCFNumberCGFloatType, &v12);
  CFTypeRef v17 = CFNumberCreate(v6, kCFNumberCGFloatType, &v13);
  CFTypeRef v18 = CFNumberCreate(v6, kCFNumberCGFloatType, &v14);
  CFTypeRef v19 = CFNumberCreate(v6, kCFNumberCGFloatType, &v10);
  CFTypeRef v20 = CFNumberCreate(v6, kCFNumberCGFloatType, &v9);
  CFDictionaryRef v7 = CFDictionaryCreate(v6, (const void **)keys, (const void **)&values, 6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFRelease(values);
  CFRelease(cf);
  CFRelease(v17);
  CFRelease(v18);
  CFRelease(v19);
  CFRelease(v20);
  return v7;
}

double VTMakeMovedRectWithDictionaryRepresentation(const __CFDictionary *a1, void *a2, void *a3)
{
  long long v20 = 0u;
  long long v21 = 0u;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"X");
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(a1, @"Y");
  CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(a1, @"Width");
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(a1, @"Height");
  CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a1, @"DX");
  CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a1, @"DY");
  if (Value)
  {
    CFNumberRef v12 = v11;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(Value))
    {
      if (v7)
      {
        CFTypeID v14 = CFNumberGetTypeID();
        if (v14 == CFGetTypeID(v7))
        {
          if (v8)
          {
            CFTypeID v15 = CFNumberGetTypeID();
            if (v15 == CFGetTypeID(v8))
            {
              if (v9)
              {
                CFTypeID v16 = CFNumberGetTypeID();
                if (v16 == CFGetTypeID(v9))
                {
                  if (v10)
                  {
                    CFTypeID v17 = CFNumberGetTypeID();
                    if (v17 == CFGetTypeID(v10))
                    {
                      if (v12)
                      {
                        CFTypeID v18 = CFNumberGetTypeID();
                        if (v18 == CFGetTypeID(v12))
                        {
                          CFNumberGetValue(Value, kCFNumberCGFloatType, &v20);
                          CFNumberGetValue(v7, kCFNumberCGFloatType, (char *)&v20 + 8);
                          CFNumberGetValue(v8, kCFNumberCGFloatType, &v21);
                          CFNumberGetValue(v9, kCFNumberCGFloatType, (char *)&v21 + 8);
                          if (a2) {
                            CFNumberGetValue(v10, kCFNumberCGFloatType, a2);
                          }
                          if (a3) {
                            CFNumberGetValue(v12, kCFNumberCGFloatType, a3);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return *(double *)&v20;
}

CFTypeRef vtCompressionSessionCopyFormattingDesc()
{
  return CFRetain(@"[VTCompressionSession]");
}

__CFString *vtCompressionSessionCopyDebugDesc(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 48);
  unsigned int v8 = v1;
  if (*(void *)(a1 + 24))
  {
    return (__CFString *)CFRetain(@"[VTCompressionSession]");
  }
  else
  {
    CFAllocatorRef v4 = CFGetAllocator((CFTypeRef)a1);
    CFMutableDictionaryRef Mutable = CFStringCreateMutable(v4, 0);
    if (v1 > 0xA)
    {
      if (v1 > 0x28)
      {
        unsigned int v8 = bswap32(v1);
      }
      else
      {
        unsigned int v6 = *(_DWORD *)(a1 + 48);
        LOBYTE(v8) = v6 / 0xA + 48;
        *(_WORD *)((char *)&v8 + 1) = (v6 % 0xA) | 0x30;
      }
    }
    else
    {
      LOWORD(v8) = (*(unsigned char *)(a1 + 48) + 48);
    }
    CFAllocatorRef v7 = CFGetAllocator((CFTypeRef)a1);
    CFStringAppendFormat(Mutable, 0, @"<VTCompressionSession %p [%p]>{%d x %d '%.4s', videoEncoder:%p, sourcePixelBufferAttributes:%p, encoderPixelBufferAttributes:%p, sourcePixelBufferPool:%p, pixelTransferBufferPool:%p, outputCallback:%p, outputCallbackRefCon:%p, pendingFrameCount:%d}", a1, v7, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), &v8, *(void *)(a1 + 432), *(void *)(a1 + 64), *(void *)(a1 + 472), *(void *)(a1 + 496), *(void *)(a1 + 488), *(void *)(a1 + 80), *(void *)(a1 + 88), *(unsigned int *)(a1 + 120));
    return Mutable;
  }
}

uint64_t __vtCompressionSessionStoreHDRDefaultWrites_block_invoke()
{
  vtCompressionSessionStoreHDRDefaultWrites_hdrEnabled = FigGetCFPreferenceNumberWithDefault();
  vtCompressionSessionStoreHDRDefaultWrites_hdrAlwaysGenerateStats = FigGetCFPreferenceNumberWithDefault();
  vtCompressionSessionStoreHDRDefaultWrites_enableAmbientViewingEnvironment = FigGetCFPreferenceNumberWithDefault();
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  vtCompressionSessionStoreHDRDefaultWrites_generateDM4 = result;
  return result;
}

uint64_t vtCoreAnalyticsSaveTrackedVideoEncoderSpecificationProperty(void *value, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a3 + 856);
  if (result)
  {
    uint64_t result = CFSetContainsValue((CFSetRef)result, value);
    if (result)
    {
      return FigCFDictionarySetValue();
    }
  }
  return result;
}

void vtCompressionSessionCreatePropertiesHandledByVideoToolbox()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v7 = 0;
  long long v6 = 0u;
  long long v5 = 0u;
  long long v4 = 0u;
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    keys[0] = @"PixelBufferPoolIsShared";
    keys[1] = @"VideoEncoderPixelBufferAttributes";
    values[0] = v1;
    values[1] = v1;
    keys[2] = @"PoolPixelBufferAttributesSeed";
    keys[3] = @"PoolPixelBufferAttributes";
    values[2] = v1;
    values[3] = v1;
    keys[4] = @"NumberOfPendingFrames";
    keys[5] = @"PixelTransferProperties";
    values[4] = v1;
    values[5] = v1;
    keys[6] = @"PixelAspectRatio";
    keys[7] = @"CleanAperture";
    values[6] = v1;
    values[7] = v1;
    keys[8] = @"FieldCount";
    keys[9] = @"FieldDetail";
    values[8] = v1;
    values[9] = v1;
    keys[10] = @"ComponentRange";
    keys[11] = @"ColorPrimaries";
    values[10] = v1;
    values[11] = v1;
    keys[12] = @"TransferFunction";
    keys[13] = @"GammaLevel";
    values[12] = v1;
    values[13] = v1;
    keys[14] = @"YCbCrMatrix";
    keys[15] = @"ICCProfile";
    values[14] = v1;
    values[15] = v1;
    keys[16] = @"MasteringDisplayColorVolume";
    keys[17] = @"ContentLightLevelInfo";
    values[16] = v1;
    values[17] = v1;
    keys[18] = @"FigThreadPriority";
    keys[19] = @"ClientPID";
    values[18] = v1;
    values[19] = v1;
    keys[20] = @"MultiPassStorage";
    keys[21] = @"RealTime";
    values[20] = v1;
    values[21] = v1;
    keys[22] = @"AllowPixelTransfer";
    keys[23] = @"EncoderID";
    values[22] = v1;
    values[23] = v1;
    keys[24] = @"MaximizePowerEfficiency";
    keys[25] = @"AuxiliaryTypeInfo";
    values[24] = v1;
    values[25] = v1;
    keys[26] = @"ChromaLocationTopField";
    keys[27] = @"ChromaLocationBottomField";
    values[26] = v1;
    values[27] = v1;
    keys[28] = @"HDRMetadataInsertionMode";
    keys[29] = @"PreserveDynamicHDRMetadata";
    values[28] = v1;
    values[29] = v1;
    keys[30] = @"AmbientViewingEnvironment";
    keys[31] = @"PrepareEncodedSampleBuffersForPaddedWrites";
    values[30] = v1;
    values[31] = v1;
    keys[32] = @"AllowCompressedPixelFormats";
    keys[33] = @"HasLeftStereoEyeView";
    values[32] = v1;
    values[33] = v1;
    keys[34] = @"HasRightStereoEyeView";
    *(void *)&long long v9 = @"HasEyeViewsReversed";
    values[34] = v1;
    values[35] = v1;
    *((void *)&v9 + 1) = @"HasAdditionalViews";
    *(void *)&long long v10 = @"HeroEye";
    values[36] = v1;
    values[37] = v1;
    *((void *)&v10 + 1) = @"ProjectionKind";
    *(void *)&long long v11 = @"ViewPackingKind";
    values[38] = v1;
    values[39] = v1;
    *((void *)&v11 + 1) = @"TransportIdentifier";
    *(void *)&long long v12 = @"WarpKind";
    *(void *)&long long v4 = v1;
    *((void *)&v4 + 1) = v1;
    *((void *)&v12 + 1) = @"StereoCameraBaseline";
    *(void *)&long long v13 = @"HorizontalDisparityAdjustment";
    *(void *)&long long v5 = v1;
    *((void *)&v5 + 1) = v1;
    *((void *)&v13 + 1) = @"HorizontalFieldOfView";
    *(void *)&long long v14 = @"PowerLogSessionID";
    *(void *)&long long v6 = v1;
    *((void *)&v6 + 1) = v1;
    sVTCompressionSessionPropertiesHandledByVideoToolbox = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 46, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!sVTCompressionSessionPropertiesHandledByVideoToolbox) {
      FigSignalErrorAt();
    }
    CFRelease(v2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

CFTypeID vtReadRationalOrIntegerFromDictionary(const __CFDictionary *a1, const void *a2, const void *a3, void *a4, _DWORD *a5)
{
  CFNumberRef Value = CFDictionaryGetValue(a1, a2);
  if (Value
    && (long long v10 = Value, v11 = CFArrayGetTypeID(), v11 == CFGetTypeID(v10))
    && CFArrayGetCount((CFArrayRef)v10) == 2
    && (CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v10, 0),
        CFNumberRef v13 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v10, 1),
        ValueAtIndex)
    && (CFNumberRef v14 = v13, v15 = CFNumberGetTypeID(), v15 == CFGetTypeID(ValueAtIndex))
    && v14
    && (CFTypeID v16 = CFNumberGetTypeID(), v16 == CFGetTypeID(v14)))
  {
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, a4);
    return CFNumberGetValue(v14, kCFNumberSInt32Type, a5);
  }
  else
  {
    CFTypeID result = (CFTypeID)CFDictionaryGetValue(a1, a3);
    if (result)
    {
      CFTypeID v18 = (const void *)result;
      CFTypeID TypeID = CFNumberGetTypeID();
      CFTypeID result = CFGetTypeID(v18);
      if (TypeID == result)
      {
        CFTypeID result = CFNumberGetValue((CFNumberRef)v18, kCFNumberSInt32Type, a4);
        *a5 = 1;
      }
    }
  }
  return result;
}

uint64_t vtCompressionSessionDoesPixelFormatHaveDesiredColorRange(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (!DescriptionWithPixelFormatType
    || !CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24E50]))
  {
    return 1;
  }

  return FigCFEqual();
}

void vtCompressionSessionAddPropertyToPartition(void *key, const void *a2, CFDictionaryRef *a3)
{
  if (CFDictionaryContainsKey(*a3, key))
  {
    CFMutableDictionaryRef Mutable = a3[2];
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      a3[2] = Mutable;
    }
  }
  else
  {
    CFDictionaryRef v7 = a3[1];
    if (!v7 || !CFDictionaryContainsKey(v7, key)) {
      return;
    }
    CFMutableDictionaryRef Mutable = a3[3];
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      a3[3] = Mutable;
    }
  }

  CFDictionarySetValue(Mutable, key, a2);
}

BOOL vtCompressionSessionIsHLG()
{
  return FigCFEqual() && FigCFEqual() && FigCFEqual();
}

uint64_t vtCompressionSessionIsDolbyCompatible(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 568);
  if (v1 != 10 && v1 != 0) {
    return 0;
  }
  uint64_t result = FigCFEqual();
  if (result) {
    return *(unsigned char *)(a1 + 752) == 0;
  }
  return result;
}

uint64_t vtCompressionSessionPipelineContextHandleError(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1 || *(_DWORD *)(v2 + 16) == 2) {
    return FigSignalErrorAt();
  }
  else {
    return VTEncoderSessionEmitEncodedFrame((uint64_t *)(v2 + 392), (const void *)a1[13], a2, 0, 0);
  }
}

uint64_t vtCompressionSessionSetHDRFormat(uint64_t a1)
{
  uint64_t result = vtCompressionSessionIsDolbyCompatible(a1);
  if (!result)
  {
    int v4 = *(_DWORD *)(a1 + 48);
    if (v4 <= 1634743415)
    {
      if (v4 != 1634742376 && v4 != 1634742888 && v4 != 1634743400) {
        return result;
      }
    }
    else
    {
      BOOL v5 = (v4 - 1634755432) > 0xB || ((1 << (v4 - 104)) & 0x8C1) == 0;
      if (v5 && ((v4 - 1634759272) > 6 || ((1 << (v4 - 104)) & 0x51) == 0) && v4 != 1634743416) {
        return result;
      }
    }
    uint64_t result = vtCompressionSessionIsPQ();
    if (!result)
    {
      uint64_t result = vtCompressionSessionIsHLG();
      if (!result) {
        return result;
      }
      int v8 = 4;
      goto LABEL_32;
    }
LABEL_29:
    int v8 = 3;
LABEL_32:
    *(_DWORD *)(a1 + 672) = v8;
    return result;
  }
  uint64_t result = vtCompressionSessionIsHLG();
  if (result)
  {
    *(_DWORD *)(a1 + 672) = 1;
    char v3 = 8;
    goto LABEL_16;
  }
  uint64_t result = vtCompressionSessionIsIPT(a1);
  if (!result)
  {
    uint64_t result = vtCompressionSessionIsPQ();
    if (!result) {
      return result;
    }
    goto LABEL_29;
  }
  *(_DWORD *)(a1 + 672) = 2;
  char v3 = 5;
LABEL_16:
  *(unsigned char *)(a1 + 676) = v3;
  if (*MEMORY[0x1E4F1CFD0] == *(void *)(a1 + 576))
  {
    return vtCompressionSessionInitializeDolbyHDRSessions(a1);
  }
  return result;
}

uint64_t vtCompressionSessionInitializeDolbyHDRSessions(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 576) = *MEMORY[0x1E4F1CFC8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  char v3 = (uint64_t *)(a1 + 616);
  uint64_t result = VTHDRMetadataGenerationSessionCreate(*MEMORY[0x1E4F1CF80], 4, 0, (uint64_t *)(a1 + 616));
  if (!result)
  {
    CFTypeRef cf = 0;
    uint64_t result = VTHDRMetadataGenerationSessionCreatePaddingNALUForEncoder(*v3, (const __CFData **)&cf);
    if (!result)
    {
      if (!cf) {
        goto LABEL_19;
      }
      if (vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"InsertTrailingBytes"))
      {
        uint64_t v5 = *(void *)(a1 + 432);
        CFTypeRef v6 = cf;
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v7) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        long long v9 = *(unsigned int (**)(uint64_t, __CFString *, CFTypeRef))(v8 + 56);
        if (v9 && !v9(v5, @"InsertTrailingBytes", v6)) {
          *(void *)(a1 + 632) = CFRetain(cf);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      if (!*(unsigned char *)(a1 + 641) || *(_DWORD *)(a1 + 672) != 1) {
        goto LABEL_19;
      }
      *(unsigned char *)(a1 + 640) = 1;
      *(unsigned char *)(a1 + 642) = vtCompressionSessionIsPropertyHandledByVideoEncoder(a1, @"AmbientViewingEnvironment");
      if (!*(void *)(a1 + 656))
      {
        *(void *)bytes = 0x4240133DA0E92F00;
        *(void *)(a1 + 656) = CFDataCreate(v2, bytes, 8);
      }
      if (*(void *)(a1 + 664) || (uint64_t result = FigHEVCBridge_CreateAmbientViewingEnvironmentSEINAL(), !result))
      {
LABEL_19:
        uint64_t result = VTHDRImageStatisticsGenerationSessionCreate(0, 0, (uint64_t *)(a1 + 624));
        if (!result) {
          *(void *)(a1 + 576) = *MEMORY[0x1E4F1CFD0];
        }
      }
    }
  }
  return result;
}

BOOL vtCompressionSessionIsPQ()
{
  return FigCFEqual() && FigCFEqual() && FigCFEqual();
}

uint64_t vtEncoderSetOneProperty(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  long long v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v9) {
    uint64_t result = v9(v6, a1, a2);
  }
  else {
    uint64_t result = 4294954514;
  }
  if (!*((_DWORD *)a3 + 2)) {
    *((_DWORD *)a3 + 2) = result;
  }
  return result;
}

void *__vtCompressionSessionSendConfigToCoreAnalytics_block_invoke(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 56);
  uint64_t v4 = *(unsigned int *)(v2 + 48);
  uint64_t v5 = *(int *)(v2 + 44);
  uint64_t v6 = *(int *)(v2 + 40);
  uint64_t v7 = *(void *)(v2 + 760);
  __int16 v27 = 0;
  CFTypeRef propertyValueOut = 0;
  xpc_object_t empty = xpc_dictionary_create_empty();
  long long v9 = empty;
  if (empty)
  {
    xpc_dictionary_set_uint64(empty, "CodecType", v4);
    xpc_dictionary_set_uint64(v9, "Width", v6);
    xpc_dictionary_set_uint64(v9, "Height", v5);
    if (v3)
    {
      if (FigCFDictionaryGetBooleanIfPresent()) {
        xpc_dictionary_set_BOOL(v9, "EnableHardware", HIBYTE(v27) != 0);
      }
      if (FigCFDictionaryGetBooleanIfPresent()) {
        xpc_dictionary_set_BOOL(v9, "RequireHardware", (_BYTE)v27 != 0);
      }
      if (FigCFDictionaryGetValue()) {
        xpc_dictionary_set_BOOL(v9, "RequireEncoderID", 1);
      }
    }
    if (FigCFDictionaryGetValue()) {
      FigXPCMessageSetCFString();
    }
    if (FigCFDictionaryGetValue()) {
      FigXPCMessageSetCFString();
    }
    if (FigCFDictionaryGetValue()) {
      FigXPCMessageSetCFString();
    }
    CFTypeRef propertyValueOut = (CFTypeRef)FigCFDictionaryGetValue();
    if (propertyValueOut) {
      FigXPCMessageSetCFString();
    }
    if (FigCFDictionaryGetInt32IfPresent()) {
      xpc_dictionary_set_uint64(v9, "AverageBitRate", 0);
    }
    if (FigCFDictionaryGetFloat32IfPresent()) {
      xpc_dictionary_set_double(v9, "ExpectedFrameRate", 0.0);
    }
    if (FigCFDictionaryGetFloat32IfPresent()) {
      xpc_dictionary_set_double(v9, "Quality", 0.0);
    }
    if (FigCFDictionaryGetBooleanIfPresent()) {
      xpc_dictionary_set_BOOL(v9, "RealTime", 0);
    }
    if (FigCFDictionaryGetBooleanIfPresent()) {
      xpc_dictionary_set_BOOL(v9, "MaximizePowerEfficiency", 0);
    }
    if (FigCFDictionaryGetBooleanIfPresent()) {
      xpc_dictionary_set_BOOL(v9, "PrioritizeEncodingSpeedOverQuality", 0);
    }
    if (FigCFDictionaryGetInt32IfPresent()) {
      xpc_dictionary_set_uint64(v9, "ConstantBitRate", 0);
    }
    if (FigCFDictionaryGetBooleanIfPresent()) {
      xpc_dictionary_set_BOOL(v9, "AllowFrameReordering", 0);
    }
    if (FigCFDictionaryGetFloat32IfPresent()) {
      xpc_dictionary_set_double(v9, "MaxKeyFrameIntervalDuration", 0.0);
    }
    if (FigCFDictionaryGetBooleanIfPresent()) {
      xpc_dictionary_set_BOOL(v9, "AllowTemporalCompression", 0);
    }
    if (FigCFDictionaryGetFloat32IfPresent()) {
      xpc_dictionary_set_double(v9, "BaseLayerFrameRate", 0.0);
    }
    if (FigCFDictionaryGetInt32IfPresent()) {
      xpc_dictionary_set_uint64(v9, "OutputBitDepth", 0);
    }
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (VTSessionCopyProperty(*(VTSessionRef *)(a1 + 32), @"EncoderID", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], &propertyValueOut)|| !propertyValueOut)
    {
      FigSignalErrorAt();
    }
    else
    {
      FigXPCMessageSetCFString();
      if (propertyValueOut) {
        CFRelease(propertyValueOut);
      }
    }
    CFArrayRef Value = (const __CFArray *)FigCFDictionaryGetValue();
    if (Value)
    {
      CFArrayRef v12 = Value;
      CFTypeID v13 = CFGetTypeID(Value);
      if (v13 == CFArrayGetTypeID())
      {
        CFIndex Count = CFArrayGetCount(v12);
        uint64_t v15 = Count >= 0 ? Count : Count + 1;
        if (Count >= 2)
        {
          uint64_t v16 = 0;
          uint64_t v17 = v15 >> 1;
          CFIndex v18 = 1;
          do
          {
            memset(&__str, 0, 64);
            snprintf((char *)&__str, 0x40uLL, "DataRateLimitsSize%d", v16);
            CFArrayGetValueAtIndex(v12, v18 - 1);
            FigCFNumberGetFloat32();
            xpc_dictionary_set_double(v9, (const char *)&__str, v19);
            snprintf((char *)&__str, 0x40uLL, "DataRateLimitsSeconds%d", v16);
            CFArrayGetValueAtIndex(v12, v18);
            FigCFNumberGetFloat32();
            xpc_dictionary_set_double(v9, (const char *)&__str, v20);
            ++v16;
            v18 += 2;
          }
          while (v17 != v16);
        }
      }
    }
    CFTypeRef propertyValueOut = (CFTypeRef)FigCFDictionaryGetValue();
    if (propertyValueOut) {
      FigXPCMessageSetCFString();
    }
    if (v7) {
      xpc_dictionary_set_BOOL(v9, "Multipass", 1);
    }
    long long v21 = *(CFStringRef **)(a1 + 32);
    if (!v21[106]) {
      goto LABEL_71;
    }
    if (CFStringGetLength(v21[106]))
    {
      if (vtCompressionSessionGetDeviceSerialNumber_sGetDeviceSerialNumberOnce != -1) {
        dispatch_once(&vtCompressionSessionGetDeviceSerialNumber_sGetDeviceSerialNumberOnce, &__block_literal_global_90);
      }
      if (vtCompressionSessionGetDeviceSerialNumber_sDeviceSerialNumber)
      {
        *(void *)len = 0;
        BytesFromCFString = (void *)FigCreateBytesFromCFString();
        if (*(void *)len)
        {
          v30.tv_sec = 0;
          *(void *)&v30.tv_usec = 0;
          memset(&v29, 0, sizeof(v29));
          gettimeofday(&v30, 0);
          localtime_r(&v30.tv_sec, &v29);
          int data = v29.tm_yday + 366 * v29.tm_year;
          memset(&__str, 0, sizeof(__str));
          CC_SHA256_Init(&__str);
          CC_SHA256_Update(&__str, BytesFromCFString, len[0]);
          CC_SHA256_Update(&__str, &data, 4u);
          long long v23 = (void *)FigCreateBytesFromCFString();
          if (v23)
          {
            uint64_t v24 = v23;
            CC_SHA256_Update(&__str, v23, len[0]);
            CFAllocatorDeallocate(v10, v24);
            CC_SHA256_Final(md, &__str);
            vtCompressionSessionCoreAnalyticsShouldReportBundleID_shouldReport = *(unsigned __int16 *)md < 0x290u;
          }
        }
        if (BytesFromCFString) {
          CFAllocatorDeallocate(v10, BytesFromCFString);
        }
      }
    }
    if (vtCompressionSessionCoreAnalyticsShouldReportBundleID_shouldReport) {
      FigXPCMessageSetCFString();
    }
  }
  long long v21 = *(CFStringRef **)(a1 + 32);
  if (v21) {
LABEL_71:
  }
    CFRelease(v21);
  return v9;
}

uint64_t __vtCompressionSessionGetDeviceSerialNumber_block_invoke()
{
  mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v1 = IOServiceMatching("IOPlatformExpertDevice");
  uint64_t result = IOServiceGetMatchingService(v0, v1);
  if (result)
  {
    io_object_t v3 = result;
    vtCompressionSessionGetDeviceSerialNumber_sDeviceSerialNumber = (uint64_t)IORegistryEntryCreateCFProperty(result, @"IOPlatformSerialNumber", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    return IOObjectRelease(v3);
  }
  return result;
}

BOOL vtDoesFrameRequireIOSurfaceSynchronization(__CVBuffer *a1, CMTaggedBufferGroupRef group)
{
  if (a1)
  {
    return vtDoesPixelBufferRequireIOSurfaceSynchronization(a1);
  }
  else if (group && (CMItemCount Count = CMTaggedBufferGroupGetCount(group), Count >= 1))
  {
    CMItemCount v5 = Count;
    uint64_t v6 = 0;
    while (1)
    {
      CVPixelBufferAtIndex = (__CVBuffer *)FigTaggedBufferGroupGetCVPixelBufferAtIndex();
      if (CVPixelBufferAtIndex)
      {
        if (vtDoesPixelBufferRequireIOSurfaceSynchronization(CVPixelBufferAtIndex)) {
          break;
        }
      }
      if (v5 == ++v6) {
        return 0;
      }
    }
    return 1;
  }
  else
  {
    return 0;
  }
}

void vtCompressionSessionIOSurfaceSynchronizationWork(uint64_t a1)
{
  uint64_t v10 = a1;
  if (!*(void *)a1)
  {
    uint64_t v9 = FigSignalErrorAt();
    if (v9)
    {
      vtCompressionSessionPipelineContextHandleError((uint64_t *)a1, v9);
      goto LABEL_11;
    }
    return;
  }
  if (*(_DWORD *)(*(void *)a1 + 16) == 2) {
    goto LABEL_25;
  }
  uint64_t v2 = *(__CVBuffer **)(a1 + 32);
  if (*(_OWORD *)(a1 + 32) == 0) {
    goto LABEL_25;
  }
  if (v2)
  {
    if (CVPixelBufferGetIOSurface(v2) && *(unsigned char *)(a1 + 116) == 1)
    {
      uint64_t v3 = IOSurfaceBindAccel();
      if (v3)
      {
LABEL_26:
        uint64_t v5 = v3;
        goto LABEL_10;
      }
      goto LABEL_8;
    }
LABEL_25:
    Woruint64_t k = FigSignalErrorAt();
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 116) != 1) {
    goto LABEL_25;
  }
  if (*(void *)(a1 + 40))
  {
    CMItemCount Count = CMTaggedBufferGroupGetCount(*(CMTaggedBufferGroupRef *)(a1 + 40));
    if (Count >= 1)
    {
      CMItemCount v7 = Count;
      uint64_t v8 = 0;
      while (FigTaggedBufferGroupGetCVPixelBufferAtIndex())
      {
        if (CVPixelBufferGetIOSurface(0))
        {
          uint64_t v3 = IOSurfaceBindAccel();
          if (v3) {
            goto LABEL_26;
          }
        }
        if (v7 == ++v8) {
          goto LABEL_8;
        }
      }
      goto LABEL_25;
    }
  }
LABEL_8:
  Woruint64_t k = vtCompressionSessionPipelineContextPerformNextWork((uint64_t *)a1, 1);
LABEL_9:
  uint64_t v5 = Work;
  if (Work)
  {
LABEL_10:
    vtCompressionSessionPipelineContextHandleError((uint64_t *)a1, v5);
    FigSemaphoreSignal();
LABEL_11:
    vtCompressionSessionPipelineContextInvalidate(&v10);
    return;
  }

  FigSemaphoreSignal();
}

void vtCompressionSessionPixelTransferSessionWork(uint64_t a1)
{
  CVPixelBufferRef pixelBufferOut = 0;
  timeval v30 = (uint64_t *)a1;
  CFTypeRef cf = 0;
  uint64_t v1 = *(void *)a1;
  if (!*(void *)a1
    || *(_DWORD *)(v1 + 16) == 2
    || (uint64_t v3 = *(__CVBuffer **)(a1 + 32), v4 = *(OpaqueCMTaggedBufferGroup **)(a1 + 40), *(_OWORD *)(a1 + 32) == 0)
    || (uint64_t v5 = *(__CVPixelBufferPool **)(a1 + 24)) == 0
    || (uint64_t v6 = *(OpaqueVTPixelTransferSession **)(a1 + 8)) == 0
    || *(unsigned char *)(a1 + 116) != 1)
  {
    Woruint64_t k = FigSignalErrorAt();
    CFMutableArrayRef v11 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_30;
  }
  MEMORY[0x1997056B0](*(void *)(v1 + 464));
  if (v3)
  {
    CFAllocatorRef v7 = CFGetAllocator((CFTypeRef)v1);
    uint64_t v8 = CVPixelBufferPoolCreatePixelBuffer(v7, v5, &pixelBufferOut);
    if (!v8)
    {
      uint64_t v9 = VTPixelTransferSessionTransferImage(v6, v3, pixelBufferOut);
      CFMutableDictionaryRef Mutable = 0;
      if (!v9)
      {
        CFMutableArrayRef v11 = 0;
LABEL_29:
        MEMORY[0x1997056C0](*(void *)(v1 + 464));
        vtCompressionSessionPipelineContextSetBuffer(a1, pixelBufferOut, cf);
        Woruint64_t k = vtCompressionSessionPipelineContextPerformNextWork((uint64_t *)a1, 1);
        goto LABEL_30;
      }
      Woruint64_t k = v9;
      CFMutableArrayRef v11 = 0;
      goto LABEL_48;
    }
    Woruint64_t k = v8;
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    if (!v4)
    {
      CFMutableDictionaryRef Mutable = 0;
      CFMutableArrayRef v11 = 0;
      goto LABEL_29;
    }
    CMItemCount Count = CMTaggedBufferGroupGetCount(v4);
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      if (Count < 1)
      {
        CFMutableArrayRef v11 = CFArrayCreateMutable(v13, Count, MEMORY[0x1E4F1D510]);
        if (v11)
        {
LABEL_28:
          uint64_t v24 = MEMORY[0x199705780](v13, Mutable, v11, &cf);
          if (!v24) {
            goto LABEL_29;
          }
          Woruint64_t k = v24;
          goto LABEL_48;
        }
      }
      else
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CMTagCollectionRef TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(v4, i);
          CFArrayAppendValue(Mutable, TagCollectionAtIndex);
        }
        CFMutableArrayRef v16 = CFArrayCreateMutable(v13, Count, MEMORY[0x1E4F1D510]);
        if (v16)
        {
          CFMutableArrayRef v11 = v16;
          CFAllocatorRef v26 = v13;
          __int16 v27 = Mutable;
          uint64_t v17 = (const void *)v1;
          uint64_t v18 = 0;
          while (1)
          {
            float v19 = v11;
            uint64_t CVPixelBufferAtIndex = FigTaggedBufferGroupGetCVPixelBufferAtIndex();
            if (!CVPixelBufferAtIndex) {
              break;
            }
            long long v21 = (__CVBuffer *)CVPixelBufferAtIndex;
            CFAllocatorRef v22 = CFGetAllocator(v17);
            uint64_t v23 = CVPixelBufferPoolCreatePixelBuffer(v22, v5, &pixelBufferOut);
            if (v23) {
              goto LABEL_47;
            }
            uint64_t v23 = VTPixelTransferSessionTransferImage(v6, v21, pixelBufferOut);
            if (v23) {
              goto LABEL_47;
            }
            CFMutableArrayRef v11 = v19;
            CFArrayAppendValue(v19, pixelBufferOut);
            if (pixelBufferOut)
            {
              CFRelease(pixelBufferOut);
              CVPixelBufferRef pixelBufferOut = 0;
            }
            if (Count == ++v18)
            {
              uint64_t v1 = (uint64_t)v17;
              CFAllocatorRef v13 = v26;
              CFMutableDictionaryRef Mutable = v27;
              goto LABEL_28;
            }
          }
          uint64_t v23 = FigSignalErrorAt();
LABEL_47:
          Woruint64_t k = v23;
          uint64_t v1 = (uint64_t)v17;
          CFMutableArrayRef v11 = v19;
          CFMutableDictionaryRef Mutable = v27;
          goto LABEL_48;
        }
      }
    }
    Woruint64_t k = FigSignalErrorAt();
  }
  CFMutableArrayRef v11 = 0;
LABEL_48:
  MEMORY[0x1997056C0](*(void *)(v1 + 464));
LABEL_30:
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (Work)
  {
    vtCompressionSessionPipelineContextHandleError(v30, Work);
    if (v1) {
      FigSemaphoreSignal();
    }
    vtCompressionSessionPipelineContextInvalidate((uint64_t *)&v30);
  }
  else if (v1)
  {
    FigSemaphoreSignal();
  }
}

void vtCompressionSessionColorSyncWork(uint64_t a1)
{
  CVPixelBufferRef pixelBufferOut = 0;
  timeval v30 = (uint64_t *)a1;
  CFTypeRef cf = 0;
  uint64_t v1 = *(void *)a1;
  if (!*(void *)a1
    || *(_DWORD *)(v1 + 16) == 2
    || (uint64_t v3 = *(__CVBuffer **)(a1 + 32), v4 = *(OpaqueCMTaggedBufferGroup **)(a1 + 40), *(_OWORD *)(a1 + 32) == 0)
    || (uint64_t v5 = *(__CVPixelBufferPool **)(a1 + 24)) == 0
    || (uint64_t v6 = *(OpaqueVTPixelTransferSession **)(a1 + 16)) == 0
    || *(unsigned char *)(a1 + 116) != 1)
  {
    Woruint64_t k = FigSignalErrorAt();
    CFMutableArrayRef v11 = 0;
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_30;
  }
  MEMORY[0x1997056B0](*(void *)(v1 + 464));
  if (v3)
  {
    CFAllocatorRef v7 = CFGetAllocator((CFTypeRef)v1);
    uint64_t v8 = CVPixelBufferPoolCreatePixelBuffer(v7, v5, &pixelBufferOut);
    if (!v8)
    {
      uint64_t v9 = VTPixelTransferSessionTransferImage(v6, v3, pixelBufferOut);
      CFMutableDictionaryRef Mutable = 0;
      if (!v9)
      {
        CFMutableArrayRef v11 = 0;
LABEL_29:
        MEMORY[0x1997056C0](*(void *)(v1 + 464));
        vtCompressionSessionPipelineContextSetBuffer(a1, pixelBufferOut, cf);
        Woruint64_t k = vtCompressionSessionPipelineContextPerformNextWork((uint64_t *)a1, 0);
        goto LABEL_30;
      }
      Woruint64_t k = v9;
      CFMutableArrayRef v11 = 0;
      goto LABEL_48;
    }
    Woruint64_t k = v8;
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    if (!v4)
    {
      CFMutableDictionaryRef Mutable = 0;
      CFMutableArrayRef v11 = 0;
      goto LABEL_29;
    }
    CMItemCount Count = CMTaggedBufferGroupGetCount(v4);
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      if (Count < 1)
      {
        CFMutableArrayRef v11 = CFArrayCreateMutable(v13, Count, MEMORY[0x1E4F1D510]);
        if (v11)
        {
LABEL_28:
          uint64_t v24 = MEMORY[0x199705780](v13, Mutable, v11, &cf);
          if (!v24) {
            goto LABEL_29;
          }
          Woruint64_t k = v24;
          goto LABEL_48;
        }
      }
      else
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CMTagCollectionRef TagCollectionAtIndex = CMTaggedBufferGroupGetTagCollectionAtIndex(v4, i);
          CFArrayAppendValue(Mutable, TagCollectionAtIndex);
        }
        CFMutableArrayRef v16 = CFArrayCreateMutable(v13, Count, MEMORY[0x1E4F1D510]);
        if (v16)
        {
          CFMutableArrayRef v11 = v16;
          CFAllocatorRef v26 = v13;
          __int16 v27 = Mutable;
          uint64_t v17 = (const void *)v1;
          uint64_t v18 = 0;
          while (1)
          {
            float v19 = v11;
            uint64_t CVPixelBufferAtIndex = FigTaggedBufferGroupGetCVPixelBufferAtIndex();
            if (!CVPixelBufferAtIndex) {
              break;
            }
            long long v21 = (__CVBuffer *)CVPixelBufferAtIndex;
            CFAllocatorRef v22 = CFGetAllocator(v17);
            uint64_t v23 = CVPixelBufferPoolCreatePixelBuffer(v22, v5, &pixelBufferOut);
            if (v23) {
              goto LABEL_47;
            }
            uint64_t v23 = VTPixelTransferSessionTransferImage(v6, v21, pixelBufferOut);
            if (v23) {
              goto LABEL_47;
            }
            CFMutableArrayRef v11 = v19;
            CFArrayAppendValue(v19, pixelBufferOut);
            if (pixelBufferOut)
            {
              CFRelease(pixelBufferOut);
              CVPixelBufferRef pixelBufferOut = 0;
            }
            if (Count == ++v18)
            {
              uint64_t v1 = (uint64_t)v17;
              CFAllocatorRef v13 = v26;
              CFMutableDictionaryRef Mutable = v27;
              goto LABEL_28;
            }
          }
          uint64_t v23 = FigSignalErrorAt();
LABEL_47:
          Woruint64_t k = v23;
          uint64_t v1 = (uint64_t)v17;
          CFMutableArrayRef v11 = v19;
          CFMutableDictionaryRef Mutable = v27;
          goto LABEL_48;
        }
      }
    }
    Woruint64_t k = FigSignalErrorAt();
  }
  CFMutableArrayRef v11 = 0;
LABEL_48:
  MEMORY[0x1997056C0](*(void *)(v1 + 464));
LABEL_30:
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (Work)
  {
    vtCompressionSessionPipelineContextHandleError(v30, Work);
    if (v1) {
      FigSemaphoreSignal();
    }
    vtCompressionSessionPipelineContextInvalidate((uint64_t *)&v30);
  }
  else if (v1)
  {
    FigSemaphoreSignal();
  }
}

uint64_t vtIsPixelBufferCompatibleWithAttributes(void *a1, __CVBuffer *a2, uint64_t a3)
{
  if (a3 && !CVPixelBufferIsCompatibleWithAttributes()) {
    return 0;
  }
  CFDictionaryRef v5 = (const __CFDictionary *)a1[65];
  if (!v5) {
    return 1;
  }
  CFArrayRef Value = CFDictionaryGetValue(v5, @"ScalingMode");
  if (Value && !CFEqual(Value, @"Normal"))
  {
    CFDictionaryRef v11 = (const __CFDictionary *)CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24B98], 0);
    CFDictionaryRef v7 = v11;
    CFDictionaryRef v12 = (const __CFDictionary *)a1[17];
    if (v11 != v12
      && (!vtIsPixelAspectRatioSquare(v11) || !vtIsPixelAspectRatioSquare(v12))
      && !FigCFEqual())
    {
      uint64_t v9 = 0;
      uint64_t v8 = 0;
      goto LABEL_8;
    }
    CFTypeRef v13 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E4F24A78], 0);
    uint64_t v8 = v13;
    CFTypeRef v14 = (CFTypeRef)a1[18];
    if (v13 != v14)
    {
      BOOL v15 = !v13 || v14 == 0;
      if (v15 || !CFEqual(v13, v14))
      {
        uint64_t v9 = 0;
        goto LABEL_8;
      }
    }
  }
  else
  {
    CFDictionaryRef v7 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = 1;
LABEL_8:
  if (v7) {
    CFRelease(v7);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v9;
}

uint64_t vtIsPixelAspectRatioSquare(const __CFDictionary *a1)
{
  if (!a1) {
    return 1;
  }
  CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24B90]);
  CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E4F24BA0]);

  return FigCFEqual();
}

BOOL vtDoesPixelBufferRequireIOSurfaceSynchronization(__CVBuffer *a1)
{
  return CVPixelBufferGetIOSurface(a1) && (IOSurfaceNeedsBindAccel() & 1) != 0;
}

uint64_t vtCompressionSessionPipelineContextPerformNextWork(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    CFDictionaryRef v5 = *(NSObject **)(v2 + 288);
    uint64_t v4 = *(void (__cdecl **)(void *))(v2 + 296);
    if (a2)
    {
      if (*(void *)(v2 + 344))
      {
        uint64_t v4 = *(void (__cdecl **)(void *))(v2 + 352);
        CFDictionaryRef v5 = *(NSObject **)(v2 + 344);
      }
    }
    FigSemaphoreWaitRelative();
    dispatch_group_async_f(*(dispatch_group_t *)(v2 + 272), v5, a1, v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void vtCompressionSessionPipelineContextSetBuffer(uint64_t a1, CFTypeRef cf, CFTypeRef a3)
{
  CFDictionaryRef v5 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v6)
  {
    CFRelease(v6);
  }
}

uint64_t vtIsPixelBufferCompatibleWithColorPropertiesAndDoesPixelBufferHaveDesiredColorRange(void *a1, const void *a2, const void *a3, const void *a4, const void *a5, CGColorSpaceRef *a6, uint64_t a7)
{
  uint64_t result = VTIsPixelBufferCompatibleWithColorProperties(a1, a2, a3, a4, a5, a6);
  if (result)
  {
    uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType((CVPixelBufferRef)a1);
    return vtCompressionSessionDoesPixelFormatHaveDesiredColorRange(PixelFormatType, a7) != 0;
  }
  return result;
}

CFTypeRef VTVideoEncoderCopyFormattingDesc()
{
  return CFRetain(@"[VTVideoEncoder]");
}

uint64_t VTCompressionSessionServerStart()
{
  int ShouldUseSeparateCodecProcessForEncode = VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode();
  BOOL v1 = ShouldUseSeparateCodecProcessForEncode != 0;
  if (ShouldUseSeparateCodecProcessForEncode) {
    uint64_t v2 = "com.apple.coremedia.videocodecd.compressionsession";
  }
  else {
    uint64_t v2 = "com.apple.coremedia.compressionsession";
  }

  return MEMORY[0x1F40DDF60](v2, 664, v1, &VTCompressionSessionServerStart_subsystems, 1, VTCompressionSessionRemoteServer_Destroy, 0, &gVTCompressionServerState);
}

uint64_t VTCompressionSessionRemoteServer_Destroy(uint64_t a1)
{
  uint64_t v2 = 0;
  vtcss_findClientFromCommandPort(a1, (uint64_t)&v2);
  vtcss_finalizeClient(v2);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_Create(uint64_t a1, int a2, long long *a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, int a9, uint64_t a10, unsigned int a11, const __CFDictionary *a12, unsigned int a13, const char *a14, _DWORD *a15, void *a16, uint64_t *a17, _DWORD *a18)
{
  CFDictionaryRef v22 = a12;
  uint64_t v23 = a11;
  long long v24 = a3[1];
  long long valuePtr = *a3;
  long long v51 = v24;
  uint64_t ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  CFTypeRef v49 = 0;
  CFAllocatorRef v26 = (void *)FigOSTransactionCreateWithProcessName();
  if (!v26)
  {
    int v39 = FigSignalErrorAt();
    char v33 = 0;
    goto LABEL_22;
  }
  uint64_t v42 = a4;
  CFTypeRef cf = 0;
  value = 0;
  *a15 = 0;
  *a16 = 0;
  *a17 = 0;
  CFAllocatorRef v27 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a14) {
    CFStringRef v28 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a14, 0x8000100u);
  }
  else {
    CFStringRef v28 = 0;
  }
  CFStringRef v45 = v28;
  FigProcessInfoCreateWithDetails();
  if (a9)
  {
    int CFPropertyListFromData = FigCreateCFPropertyListFromData();
    if (CFPropertyListFromData) {
      goto LABEL_45;
    }
  }
  if (a11)
  {
    int v30 = FigCreateCFPropertyListFromData();
    if (v30)
    {
      int v39 = v30;
      char v33 = 0;
      CFDictionaryRef v22 = 0;
      goto LABEL_22;
    }
  }
  if (!a13)
  {
    CFDictionaryRef v22 = 0;
    goto LABEL_14;
  }
  int CFPropertyListFromData = FigCreateCFPropertyListFromData();
  if (CFPropertyListFromData)
  {
LABEL_45:
    int v39 = CFPropertyListFromData;
    char v33 = 0;
    CFDictionaryRef v22 = 0;
    goto LABEL_50;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v27, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v22 = Mutable;
  if (!Mutable)
  {
    int v39 = 0;
    char v33 = 0;
    goto LABEL_50;
  }
  CFDictionaryAddValue(Mutable, @"ClientName", 0);
LABEL_14:
  char v32 = malloc_type_calloc(1uLL, 0xC8uLL, 0x10E0040B5F696F2uLL);
  char v33 = v32;
  if (!v32)
  {
    int v39 = FigSignalErrorAt();
    goto LABEL_50;
  }
  v32[24] = v26;
  uint64_t v34 = v32 + 10;
  long long v35 = a3[1];
  long long valuePtr = *a3;
  long long v51 = v35;
  int v36 = VTFigAudioSessionCreate(&valuePtr, ClientPIDFromAuditToken, @"VTCompressionSessionClient", (CFTypeRef *)v32 + 10);
  if (v36
    || (int v36 = VTCompressionSessionCreateWithOptions((uint64_t)v27, a5, a6, a7, 0, 0, (uint64_t)v27, (uint64_t)CompressionOutputCallback, (uint64_t)v33, v22, (uint64_t *)&v49)) != 0)
  {
    int v39 = v36;
    CFAllocatorRef v26 = 0;
LABEL_50:
    uint64_t v23 = a11;
    goto LABEL_22;
  }
  int v37 = vtcss_initializeClient((uint64_t)v33, v49, 0, 0, 0, a2, v42, ClientPIDFromAuditToken, 0, (uint64_t)"VTCompressionSession", (uint64_t)a15, a16);
  if (v37 || *v34 && (CMNotificationCenterGetDefaultLocalCenter(), (int v37 = CMNotificationCenterAddListener()) != 0))
  {
    int v39 = v37;
    CFAllocatorRef v26 = 0;
  }
  else
  {
    LODWORD(valuePtr) = ClientPIDFromAuditToken;
    CFNumberRef v38 = CFNumberCreate(v27, kCFNumberSInt32Type, &valuePtr);
    VTSessionSetProperty(v49, @"ClientPID", v38);
    CFRelease(v38);
    int v39 = 0;
    CFAllocatorRef v26 = 0;
    *a17 = FigRemote_GetServerTimeoutToken();
  }
  uint64_t v23 = a11;
LABEL_22:
  if (value) {
    CFRelease(value);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v26) {
    os_release(v26);
  }
  if (v49) {
    CFRelease(v49);
  }
  if (v39) {
    vtcss_finalizeClient(v33);
  }
  FigMachPortReleaseSendRight_();
  uint64_t v40 = (unsigned int *)MEMORY[0x1E4F14960];
  if (a9) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a8);
  }
  if (v23) {
    MEMORY[0x199706B20](*v40, a10, v23);
  }
  if (a13) {
    MEMORY[0x199706B20](*v40, a12, a13);
  }
  *a18 = v39;
  return 0;
}

void CompressionOutputCallback(uint64_t a1, uint64_t a2, int a3, int a4, const void *a5)
{
  if (!*(unsigned char *)(a1 + 176))
  {
    uint64_t v10 = malloc_type_calloc(1uLL, 0x30uLL, 0x10E00405F1B3371uLL);
    if (v10)
    {
      uint64_t v11 = (uint64_t)v10;
      v10[1] = a2;
      *((_DWORD *)v10 + 4) = a3;
      *((_DWORD *)v10 + 5) = a4;
      v10[3] = 0;
      if (a5) {
        CFTypeRef v12 = CFRetain(a5);
      }
      else {
        CFTypeRef v12 = 0;
      }
      *(void *)(v11 + 32) = v12;
      *(void *)(v11 + 40) = 0;
      vtcss_enqueueFrame(a1, v11);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t vtcss_initializeClient(uint64_t a1, CFTypeRef cf, const void *a3, const void *a4, const void *a5, int a6, uint64_t a7, int a8, CFTypeRef cfa, uint64_t a10, uint64_t a11, void *a12)
{
  CFTypeRef v19 = cfa;
  *(_DWORD *)(a1 + 64) = a8;
  if (cfa) {
    CFTypeRef v19 = CFRetain(cfa);
  }
  *(void *)(a1 + 72) = v19;
  if (cf) {
    CFTypeRef v20 = CFRetain(cf);
  }
  else {
    CFTypeRef v20 = 0;
  }
  *(void *)(a1 + 8) = v20;
  if (a3) {
    CFTypeRef v21 = CFRetain(a3);
  }
  else {
    CFTypeRef v21 = 0;
  }
  *(void *)(a1 + 16) = v21;
  if (a4) {
    CFTypeRef v22 = CFRetain(a4);
  }
  else {
    CFTypeRef v22 = 0;
  }
  *(void *)(a1 + 96) = v22;
  if (a5) {
    CFTypeRef v23 = CFRetain(a5);
  }
  else {
    CFTypeRef v23 = 0;
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 24) = v23;
  *(_DWORD *)(a1 + 40) = a6;
  *(void *)(a1 + 48) = a7;
  *(void *)(a1 + 120) = a1 + 112;
  *(void *)(a1 + 136) = dispatch_queue_create("CompressionSessionQueuedFrames", 0);
  *(void *)(a1 + 160) = dispatch_queue_create("CompressionSessionAsyncMessageHandlerQueue", 0);
  *(void *)(a1 + 168) = dispatch_group_create();
  *(unsigned char *)(a1 + 144) = 1;
  *(void *)(a1 + 152) = FigSemaphoreCreate();
  if (*(void *)(a1 + 192) || (uint64_t v24 = FigOSTransactionCreate(), (*(void *)(a1 + 192) = v24) != 0))
  {
    uint64_t v25 = FigRPCCreateClientConnection();
    if (v25)
    {
      uint64_t v26 = v25;
    }
    else
    {
      uint64_t v26 = FigRPCGetConnectionInfo();
      if (!v26) {
        *a12 = 0;
      }
    }
  }
  else
  {
    uint64_t v26 = FigSignalErrorAt();
  }
  FigMachPortReleaseSendRight_();
  return v26;
}

void vtcss_appStateChangeListener(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  unsigned int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F75C98]);
  if (!Value) {
    goto LABEL_7;
  }
  CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  int v7 = valuePtr;
  if (valuePtr > 8)
  {
LABEL_8:
    *(_DWORD *)(a2 + 88) = v7;
    return;
  }
  if (((1 << valuePtr) & 0x16) == 0)
  {
    if (((1 << valuePtr) & 0x101) != 0)
    {
LABEL_7:
      int v7 = 8;
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  uint64_t v8 = *(const void **)(a2 + 8);
  if (v8) {
    CFTypeRef v9 = CFRetain(v8);
  }
  else {
    CFTypeRef v9 = 0;
  }
  uint64_t v10 = *(const void **)(a2 + 16);
  if (v10)
  {
    CFTypeRef v11 = CFRetain(v10);
    if (!v9) {
      goto LABEL_14;
    }
LABEL_16:
    CFTypeRef v12 = *(NSObject **)(a2 + 160);
    dispatch_retain(*(dispatch_object_t *)(a2 + 168));
    dispatch_retain(v12);
    *(_DWORD *)(a2 + 88) = valuePtr;
    *(unsigned char *)(a2 + 177) = 1;
    FigRPCExecuteByServerAsync();
    return;
  }
  CFTypeRef v11 = 0;
  if (v9) {
    goto LABEL_16;
  }
LABEL_14:
  if (valuePtr == 1 && v11) {
    goto LABEL_16;
  }
  if (v11) {
    CFRelease(v11);
  }
}

void vtcss_finalizeClient(void *a1)
{
  if (a1)
  {
    uint64_t v3 = (OpaqueVTCompressionSession *)*((void *)a1 + 1);
    uint64_t v2 = *((void *)a1 + 2);
    uint64_t v4 = (OpaqueVTMultiPassStorage *)*((void *)a1 + 12);
    uint64_t v5 = *((void *)a1 + 3);
    *((unsigned char *)a1 + 176) = 1;
    if (*((void *)a1 + 19) && *((void *)a1 + 21))
    {
      FigSemaphoreSignal();
      FigSemaphoreSignal();
      dispatch_group_wait(*((dispatch_group_t *)a1 + 21), 0xFFFFFFFFFFFFFFFFLL);
    }
    if (*((void *)a1 + 10))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      uint64_t v6 = (const void *)*((void *)a1 + 10);
      if (v6)
      {
        CFRelease(v6);
        *((void *)a1 + 10) = 0;
      }
    }
    FigRPCDisposeClientConnection();
    if (v3)
    {
      VTCompressionSessionInvalidate(v3);
      int v7 = (const void *)*((void *)a1 + 1);
      if (v7)
      {
        CFRelease(v7);
        *((void *)a1 + 1) = 0;
      }
    }
    if (v4)
    {
      VTMultiPassStorageClose(v4);
      uint64_t v8 = (const void *)*((void *)a1 + 12);
      if (v8)
      {
        CFRelease(v8);
        *((void *)a1 + 12) = 0;
      }
    }
    if (v2)
    {
      VTTileCompressionSessionInvalidate(v2);
      CFTypeRef v9 = (const void *)*((void *)a1 + 2);
      if (v9)
      {
        CFRelease(v9);
        *((void *)a1 + 2) = 0;
      }
    }
    if (v5)
    {
      VTMotionEstimationSessionInvalidate(v5);
      uint64_t v10 = (const void *)*((void *)a1 + 3);
      if (v10)
      {
        CFRelease(v10);
        *((void *)a1 + 3) = 0;
      }
    }
    CFTypeRef v11 = *((void *)a1 + 17);
    if (v11)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __vtcss_finalizeClient_block_invoke;
      block[3] = &__block_descriptor_tmp_22;
      block[4] = a1;
      dispatch_sync(v11, block);
      dispatch_release(*((dispatch_object_t *)a1 + 17));
    }
    CFTypeRef v12 = *((void *)a1 + 21);
    if (v12) {
      dispatch_release(v12);
    }
    CFTypeRef v13 = *((void *)a1 + 20);
    if (v13) {
      dispatch_release(v13);
    }
    FigSemaphoreDestroy();
    CFTypeRef v14 = (const void *)*((void *)a1 + 4);
    if (v14)
    {
      CFRelease(v14);
      *((void *)a1 + 4) = 0;
    }
    BOOL v15 = (const void *)*((void *)a1 + 23);
    if (v15)
    {
      CFRelease(v15);
      *((void *)a1 + 23) = 0;
    }
    FigServer_RememberProcessInfoForAFewSeconds();
    CFMutableArrayRef v16 = (const void *)*((void *)a1 + 9);
    if (v16)
    {
      CFRelease(v16);
      *((void *)a1 + 9) = 0;
    }
    uint64_t v17 = (void *)*((void *)a1 + 24);
    if (v17) {
      os_release(v17);
    }
    *((void *)a1 + 24) = 0;
    *((_OWORD *)a1 + 10) = 0u;
    *((_OWORD *)a1 + 11) = 0u;
    *((_OWORD *)a1 + 8) = 0u;
    *((_OWORD *)a1 + 9) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    free(a1);
  }
}

uint64_t vtcss_findClientFromCommandPort(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigRPCLookupClientConnection();
  if (!result)
  {
    uint64_t result = FigRPCGetConnectionInfo();
    if (a2)
    {
      if (!result)
      {
        if (*(void *)a2)
        {
          if (*(unsigned char *)(*(void *)a2 + 177)) {
            return 4294954393;
          }
          else {
            return 0;
          }
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t VTCompressionSessionRemoteServer_PrepareToEncodeFrames(uint64_t a1)
{
  uint64_t v7 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v7);
  if (!ClientFromCommandPort)
  {
    if (v7)
    {
      uint64_t v2 = *(void *)(v7 + 8);
      uint64_t v4 = *(NSObject **)(v7 + 160);
      uint64_t v3 = *(NSObject **)(v7 + 168);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __VTCompressionSessionRemoteServer_PrepareToEncodeFrames_block_invoke;
      block[3] = &__block_descriptor_tmp_0;
      block[4] = v2;
      void block[5] = v7;
      dispatch_group_async(v3, v4, block);
      return 0;
    }
    int ClientFromCommandPort = FigSignalErrorAt();
  }
  if (ClientFromCommandPort && v7) {
    VTCompressionSessionRemoteCallbackClient_PrepareToEncodeFramesReturn(*(_DWORD *)(v7 + 40), *(void *)(v7 + 48), ClientFromCommandPort);
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_EncodeFrame(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12, uint64_t a13, int a14, int a15, uint64_t a16, int a17, uint64_t a18, int a19, int a20,uint64_t a21,int a22,uint64_t a23,int a24,int a25,uint64_t a26,int a27,uint64_t a28,unsigned int a29,long long *a30,long long *a31,uint64_t a32,int a33,uint64_t a34)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  int v119 = a4;
  int v91 = 0;
  int v94 = 0;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  int v100 = 0;
  int v103 = 0;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  int v109 = 0;
  int v112 = 0;
  int v90 = a5;
  uint64_t v92 = a6;
  int v93 = a7;
  uint64_t v95 = a8;
  LODWORD(v96) = a9;
  DWORD2(v96) = a10;
  *(void *)&long long v97 = a11;
  DWORD2(v97) = a12;
  *(void *)&long long v98 = a13;
  DWORD2(v98) = a14;
  int v99 = a15;
  uint64_t v101 = a16;
  int v102 = a17;
  uint64_t v104 = a18;
  LODWORD(v105) = a19;
  DWORD2(v105) = a20;
  *(void *)&long long v106 = a21;
  DWORD2(v106) = a22;
  uint64_t v120 = 0;
  uint64_t v121 = &v120;
  uint64_t v122 = 0x2000000000;
  uint64_t v123 = 0;
  *(void *)&long long v107 = a23;
  uint64_t v116 = 0;
  char v117 = &v116;
  uint64_t v118 = 0x2000000000;
  DWORD2(v107) = a24;
  v115[0] = 0;
  v115[1] = v115;
  v115[2] = 0x2000000000;
  v115[3] = 0;
  uint64_t v87 = 0;
  uint64_t v88 = &v87;
  uint64_t v89 = 0xE000000000;
  int v108 = a25;
  uint64_t v110 = a26;
  int v111 = a27;
  uint64_t v113 = a28;
  uint64_t v114 = a29;
  uint64_t v76 = 0;
  unint64_t v77 = &v76;
  uint64_t v78 = 0x9000000000;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  uint64_t v86 = 0;
  uint64_t v72 = 0;
  CFAllocatorRef v73 = &v72;
  uint64_t v74 = 0x2000000000;
  uint64_t v75 = 0;
  v71[0] = 0;
  v71[1] = v71;
  v71[2] = 0x2000000000;
  v71[3] = 0;
  v58[0] = MEMORY[0x1E4F143A8];
  v58[1] = 0x40000000;
  uint64_t v59 = __VTCompressionSessionRemoteServer_EncodeFrame_block_invoke;
  CMItemCount v60 = &unk_1E5784CF8;
  CMItemCount v61 = &v116;
  uint64_t v62 = v115;
  CFIndex v63 = v71;
  CFNumberRef v64 = &v87;
  CFNumberRef v65 = &v76;
  CFTypeID v66 = &v72;
  int v69 = a2;
  int v70 = a33;
  uint64_t v67 = a3;
  uint64_t v68 = a32;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v123);
  if (!ClientFromCommandPort)
  {
    uint64_t v36 = v121[3];
    if (!v36)
    {
      CFMutableDictionaryRef Mutable = 0;
      uint64_t v40 = 0;
      goto LABEL_37;
    }
    uint64_t v37 = *(void *)(v36 + 8);
    if (!(a2 | *((_DWORD *)v117 + 6)))
    {
LABEL_6:
      if (!*((_DWORD *)v88 + 6) && !*((_DWORD *)v88 + 10))
      {
        CFMutableDictionaryRef Mutable = 0;
        uint64_t v40 = 0;
        if (a33)
        {
LABEL_24:
          int CFPropertyListFromData = FigCreateCFPropertyListFromData();
          if (CFPropertyListFromData)
          {
LABEL_33:
            int v56 = CFPropertyListFromData;
            goto LABEL_38;
          }
        }
LABEL_25:
        uint64_t v51 = v121[3];
        CFNumberRef v53 = *(NSObject **)(v51 + 160);
        CFDictionaryRef v52 = *(NSObject **)(v51 + 168);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __VTCompressionSessionRemoteServer_EncodeFrame_block_invoke_2;
        block[3] = &unk_1E5784D20;
        long long v125 = *a30;
        uint64_t v54 = *((void *)a30 + 2);
        uint64_t v128 = *((void *)a31 + 2);
        long long v127 = *a31;
        void block[6] = &v72;
        block[7] = v71;
        uint64_t v126 = v54;
        block[9] = v37;
        block[10] = a34;
        block[8] = v115;
        block[4] = v58;
        void block[5] = &v120;
        dispatch_group_async(v52, v53, block);
        goto LABEL_26;
      }
      CFAllocatorRef v38 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 5, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        uint64_t v40 = CFArrayCreateMutable(v38, 5, MEMORY[0x1E4F1D510]);
        if (v40)
        {
          uint64_t v41 = 0;
          uint64_t v42 = 5;
          while (1)
          {
            CFTypeID v43 = v88;
            if (LODWORD(v88[v41 + 3]) | LODWORD(v88[v41 + 5]))
            {
              int CFPropertyListFromData = FigRemote_CreatePixelBufferFromSerializedAtomData();
              if (CFPropertyListFromData) {
                goto LABEL_33;
              }
              LODWORD(v88[v41 + 5]) = 0;
              CFTypeID v43 = v88;
            }
            CFStringRef v45 = &v43[v41];
            CFDictionaryRef v46 = (const UInt8 *)v45[6];
            if (v46)
            {
              CFIndex v47 = *((unsigned int *)v45 + 14);
              if (v47)
              {
                CFDataRef v48 = CFDataCreate(v38, v46, v47);
                v77[v42 - 2] = (uint64_t)v48;
                uint64_t v49 = v77[v42 - 2];
                if (!v49) {
                  break;
                }
                int CFPropertyListFromData = MEMORY[0x199705730](v49, v38, &v77[v42 - 1]);
                if (CFPropertyListFromData) {
                  goto LABEL_33;
                }
              }
            }
            uint64_t v50 = (const void *)v77[v42 - 1];
            if (v50 && v77[v42])
            {
              CFArrayAppendValue(Mutable, v50);
              CFArrayAppendValue(v40, (const void *)v77[v42]);
            }
            v42 += 3;
            v41 += 5;
            if (v42 == 20)
            {
              int CFPropertyListFromData = MEMORY[0x199705780](v38, Mutable, v40, v73 + 3);
              if (CFPropertyListFromData) {
                goto LABEL_33;
              }
              if (!a33) {
                goto LABEL_25;
              }
              goto LABEL_24;
            }
          }
        }
      }
      else
      {
        uint64_t v40 = 0;
      }
LABEL_37:
      int v56 = FigSignalErrorAt();
      if (!v56) {
        goto LABEL_26;
      }
      goto LABEL_38;
    }
    int ClientFromCommandPort = FigRemote_CreatePixelBufferFromSerializedAtomData();
    if (!ClientFromCommandPort)
    {
      *((_DWORD *)v117 + 6) = 0;
      goto LABEL_6;
    }
  }
  int v56 = ClientFromCommandPort;
  uint64_t v40 = 0;
  CFMutableDictionaryRef Mutable = 0;
LABEL_38:
  v59((uint64_t)v58);
  uint64_t v57 = v121[3];
  if (v57) {
    VTCompressionSessionRemoteCallbackClient_EncodeReturn(*(_DWORD *)(v57 + 40), *(void *)(v57 + 48), 0, 0, v56);
  }
LABEL_26:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v40) {
    CFRelease(v40);
  }
  _Block_object_dispose(v71, 8);
  _Block_object_dispose(&v72, 8);
  _Block_object_dispose(&v76, 8);
  _Block_object_dispose(&v87, 8);
  _Block_object_dispose(v115, 8);
  _Block_object_dispose(&v116, 8);
  _Block_object_dispose(&v120, 8);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_DequeueNextPendingEncodedFrame(uint64_t a1, _DWORD *a2, void *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, void *a7, _DWORD *a8, _DWORD *a9, int *a10, vm_address_t *a11, _DWORD *a12, _DWORD *a13)
{
  kern_return_t v29;
  void *v30;
  const UInt8 *BytePtr;
  _DWORD *v33;
  vm_address_t address;
  CFDataRef theData;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void block[7];
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;

  CFTypeRef v13 = a8;
  uint64_t v40 = 0;
  int v39 = 0;
  uint64_t v37 = 0;
  CFAllocatorRef v38 = 0;
  address = 0;
  theData = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  *a9 = 0;
  *a10 = 1;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v40);
  BOOL v20 = ClientFromCommandPort != -12903 || v40 == 0;
  if (!v20 || (int v21 = ClientFromCommandPort) == 0)
  {
    if (v40)
    {
      char v33 = v13;
      CFDictionaryRef v46 = 0;
      CFIndex v47 = &v46;
      CFDataRef v48 = 0x2000000000;
      uint64_t v49 = 0;
      uint64_t v42 = 0;
      CFTypeID v43 = &v42;
      uint64_t v44 = 0x2000000000;
      CFStringRef v45 = 0;
      CFTypeRef v22 = *(NSObject **)(v40 + 136);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __vtcss_dequeueFrame_block_invoke;
      block[3] = &unk_1E5784EA0;
      void block[5] = &v42;
      void block[6] = v40;
      block[4] = &v46;
      dispatch_sync(v22, block);
      int v23 = *((unsigned __int8 *)v43 + 24);
      uint64_t v24 = v47[3];
      _Block_object_dispose(&v42, 8);
      _Block_object_dispose(&v46, 8);
      if (!v24)
      {
        LODWORD(Length) = 0;
        *a2 = 0;
LABEL_21:
        int v21 = 0;
        *a9 = v23;
        goto LABEL_22;
      }
      if (*(void *)(v24 + 32))
      {
        int SerializedAtomDataForSampleBuffer = FigRemote_CreateSerializedAtomDataForSampleBuffer();
        if (!SerializedAtomDataForSampleBuffer)
        {
          int v26 = 1;
LABEL_17:
          *(void *)(v40 + 56) = (v37 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
          *a10 = v26;
          goto LABEL_18;
        }
      }
      else
      {
        if (!*(void *)(v24 + 40))
        {
LABEL_18:
          int CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
          if (CFDataFromCFPropertyList)
          {
            int v21 = CFDataFromCFPropertyList;
            LODWORD(Length) = 0;
            goto LABEL_22;
          }
          vm_size_t Length = CFDataGetLength(theData);
          tm v29 = vm_allocate(*MEMORY[0x1E4F14960], &address, Length, 1560281089);
          if (v29)
          {
            int v21 = v29;
            goto LABEL_22;
          }
          int v30 = (void *)address;
          BytePtr = CFDataGetBytePtr(theData);
          memcpy(v30, BytePtr, Length);
          *a2 = 1;
          *a3 = *(void *)(v24 + 8);
          *a4 = *(_DWORD *)(v24 + 16);
          *a5 = *(_DWORD *)(v24 + 20);
          goto LABEL_21;
        }
        int SerializedAtomDataForSampleBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
        if (!SerializedAtomDataForSampleBuffer)
        {
          int v26 = 0;
          goto LABEL_17;
        }
      }
      int v21 = SerializedAtomDataForSampleBuffer;
      LODWORD(Length) = 0;
      *(void *)(v40 + 56) = 0;
LABEL_22:
      CFTypeRef v13 = v33;
      goto LABEL_23;
    }
    int v21 = FigSignalErrorAt();
  }
  uint64_t v24 = 0;
  LODWORD(Length) = 0;
LABEL_23:
  vtcss_freeQueuedFrame((void *)v24);
  if (theData) {
    CFRelease(theData);
  }
  *a6 = v39;
  *a7 = v38;
  _DWORD *v13 = v37;
  if (a11) {
    *a11 = address;
  }
  if (a12) {
    *a12 = Length;
  }
  if (a13) {
    *a13 = v21;
  }
  return 0;
}

void vtcss_freeQueuedFrame(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[3];
    if (v2)
    {
      CFRelease(v2);
      a1[3] = 0;
    }
    uint64_t v3 = (const void *)a1[4];
    if (v3)
    {
      CFRelease(v3);
      a1[4] = 0;
    }
    uint64_t v4 = (const void *)a1[5];
    if (v4) {
      CFRelease(v4);
    }
    free(a1);
  }
}

uint64_t VTCompressionSessionRemoteServer_CopySupportedPropertyDictionary(uint64_t a1, void *a2, _DWORD *a3, kern_return_t *a4)
{
  kern_return_t ClientFromCommandPort;
  uint64_t v8;
  kern_return_t v9;
  uint64_t v10;
  const void *v11;
  kern_return_t v12;
  vm_size_t Length;
  kern_return_t v14;
  void *v15;
  const UInt8 *BytePtr;
  vm_address_t v18;
  CFDataRef theData;
  CFDictionaryRef supportedPropertyDictionaryOut;
  void *v21;

  supportedPropertyDictionaryOut = 0;
  int v21 = 0;
  uint64_t v18 = 0;
  theData = 0;
  *a2 = 0;
  *a3 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v21);
  if (ClientFromCommandPort) {
    goto LABEL_22;
  }
  if (!v21)
  {
    int ClientFromCommandPort = FigSignalErrorAt();
    goto LABEL_22;
  }
  uint64_t v8 = v21[1];
  if (v8)
  {
    CFTypeRef v9 = VTCompressionSessionCopySupportedPropertyDictionary(v8, &supportedPropertyDictionaryOut);
  }
  else
  {
    uint64_t v10 = v21[2];
    if (v10)
    {
      CFTypeRef v9 = VTTileCompressionSessionCopySupportedPropertyDictionary(v10, &supportedPropertyDictionaryOut);
    }
    else
    {
      CFTypeRef v11 = (const void *)v21[3];
      if (v11) {
        CFTypeRef v9 = VTSessionCopySupportedPropertyDictionary(v11, &supportedPropertyDictionaryOut);
      }
      else {
        CFTypeRef v9 = FigSignalErrorAt();
      }
    }
  }
  CFTypeRef v12 = v9;
  if (v9) {
    goto LABEL_23;
  }
  int ClientFromCommandPort = FigCreateCFDataFromCFPropertyList();
  if (ClientFromCommandPort)
  {
LABEL_22:
    CFTypeRef v12 = ClientFromCommandPort;
LABEL_23:
    LODWORD(Length) = 0;
    goto LABEL_14;
  }
  vm_size_t Length = CFDataGetLength(theData);
  CFTypeRef v14 = vm_allocate(*MEMORY[0x1E4F14960], &v18, Length, 1560281089);
  if (v14)
  {
    CFTypeRef v12 = v14;
  }
  else
  {
    BOOL v15 = (void *)v18;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v15, BytePtr, Length);
    CFTypeRef v12 = 0;
  }
LABEL_14:
  if (supportedPropertyDictionaryOut) {
    CFRelease(supportedPropertyDictionaryOut);
  }
  if (theData) {
    CFRelease(theData);
  }
  *a2 = v18;
  *a3 = Length;
  if (a4) {
    *a4 = v12;
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_CopySerializableProperties(uint64_t a1, void *a2, _DWORD *a3, kern_return_t *a4)
{
  kern_return_t ClientFromCommandPort;
  uint64_t v8;
  kern_return_t v9;
  uint64_t v10;
  const void *v11;
  kern_return_t v12;
  vm_size_t Length;
  kern_return_t v14;
  void *v15;
  const UInt8 *BytePtr;
  vm_address_t v18;
  CFDataRef theData;
  CFDictionaryRef dictionaryOut;
  void *v21;

  dictionaryOut = 0;
  int v21 = 0;
  uint64_t v18 = 0;
  theData = 0;
  *a2 = 0;
  *a3 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v21);
  if (ClientFromCommandPort) {
    goto LABEL_22;
  }
  if (!v21)
  {
    int ClientFromCommandPort = FigSignalErrorAt();
    goto LABEL_22;
  }
  uint64_t v8 = v21[1];
  if (v8)
  {
    CFTypeRef v9 = VTCompressionSessionCopySerializableProperties(v8, *MEMORY[0x1E4F1CF80], &dictionaryOut);
  }
  else
  {
    uint64_t v10 = v21[2];
    if (v10)
    {
      CFTypeRef v9 = VTTileCompressionSessionCopySerializableProperties(v10, *MEMORY[0x1E4F1CF80], &dictionaryOut);
    }
    else
    {
      CFTypeRef v11 = (const void *)v21[3];
      if (v11) {
        CFTypeRef v9 = VTSessionCopySerializableProperties(v11, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], &dictionaryOut);
      }
      else {
        CFTypeRef v9 = FigSignalErrorAt();
      }
    }
  }
  CFTypeRef v12 = v9;
  if (v9) {
    goto LABEL_23;
  }
  int ClientFromCommandPort = FigCreateCFDataFromCFPropertyList();
  if (ClientFromCommandPort)
  {
LABEL_22:
    CFTypeRef v12 = ClientFromCommandPort;
LABEL_23:
    LODWORD(Length) = 0;
    goto LABEL_14;
  }
  vm_size_t Length = CFDataGetLength(theData);
  CFTypeRef v14 = vm_allocate(*MEMORY[0x1E4F14960], &v18, Length, 1560281089);
  if (v14)
  {
    CFTypeRef v12 = v14;
  }
  else
  {
    BOOL v15 = (void *)v18;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v15, BytePtr, Length);
    CFTypeRef v12 = 0;
  }
LABEL_14:
  if (dictionaryOut) {
    CFRelease(dictionaryOut);
  }
  if (theData) {
    CFRelease(theData);
  }
  *a2 = v18;
  *a3 = Length;
  if (a4) {
    *a4 = v12;
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_CopyProperty(uint64_t a1, const char *a2, void *a3, _DWORD *a4, kern_return_t *a5)
{
  kern_return_t ClientFromCommandPort;
  CFAllocatorRef v10;
  CFStringRef v11;
  __CFString *v12;
  uint64_t v13;
  kern_return_t v14;
  uint64_t v15;
  const void *v16;
  kern_return_t v17;
  kern_return_t CFDataFromCFPropertyList;
  vm_size_t Length;
  kern_return_t v20;
  void *v21;
  const UInt8 *BytePtr;
  vm_address_t v24;
  CFDataRef theData;
  CFTypeRef propertyValueOut;
  void *v27;

  CFTypeRef propertyValueOut = 0;
  CFAllocatorRef v27 = 0;
  uint64_t v24 = 0;
  theData = 0;
  *a3 = 0;
  *a4 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v27);
  if (ClientFromCommandPort) {
    goto LABEL_23;
  }
  if (!v27
    || (uint64_t v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFTypeRef v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0)) == 0))
  {
    int ClientFromCommandPort = FigSignalErrorAt();
LABEL_23:
    uint64_t v17 = ClientFromCommandPort;
    LODWORD(Length) = 0;
    goto LABEL_17;
  }
  CFTypeRef v12 = (__CFString *)v11;
  CFTypeRef v13 = v27[1];
  if (v13)
  {
    CFTypeRef v14 = VTCompressionSessionCopyProperty(v13, v12, (uint64_t)v10, &propertyValueOut);
  }
  else
  {
    BOOL v15 = v27[2];
    if (v15)
    {
      CFTypeRef v14 = VTTileCompressionSessionCopyProperty(v15, v12, (uint64_t)v10, &propertyValueOut);
    }
    else
    {
      CFMutableArrayRef v16 = (const void *)v27[3];
      if (v16) {
        CFTypeRef v14 = VTSessionCopyProperty(v16, v12, v10, &propertyValueOut);
      }
      else {
        CFTypeRef v14 = FigSignalErrorAt();
      }
    }
  }
  uint64_t v17 = v14;
  if (v14) {
    goto LABEL_25;
  }
  int CFDataFromCFPropertyList = FigCreateCFDataFromCFPropertyList();
  if (CFDataFromCFPropertyList)
  {
    uint64_t v17 = CFDataFromCFPropertyList;
LABEL_25:
    LODWORD(Length) = 0;
    goto LABEL_15;
  }
  vm_size_t Length = CFDataGetLength(theData);
  BOOL v20 = vm_allocate(*MEMORY[0x1E4F14960], &v24, Length, 1560281089);
  if (v20)
  {
    uint64_t v17 = v20;
  }
  else
  {
    int v21 = (void *)v24;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v21, BytePtr, Length);
    uint64_t v17 = 0;
  }
LABEL_15:
  CFRelease(v12);
  if (propertyValueOut) {
    CFRelease(propertyValueOut);
  }
LABEL_17:
  if (theData) {
    CFRelease(theData);
  }
  *a3 = v24;
  *a4 = Length;
  if (a5) {
    *a5 = v17;
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_SetMultiPassStorage(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v11);
  if (!ClientFromCommandPort)
  {
    if (!v11) {
      goto LABEL_10;
    }
    uint64_t v6 = *(void *)(v11 + 8);
    if (!a2)
    {
      CFNumberRef v7 = 0;
      goto LABEL_8;
    }
    int ClientFromCommandPort = vtcss_findClientFromCommandPort(a2, (uint64_t)&v10);
    if (!ClientFromCommandPort)
    {
      if (v10)
      {
        CFNumberRef v7 = *(const __CFNumber **)(v10 + 96);
LABEL_8:
        int ClientFromCommandPort = VTCompressionSessionSetProperty(v6, @"MultiPassStorage", v7);
        goto LABEL_9;
      }
LABEL_10:
      int ClientFromCommandPort = FigSignalErrorAt();
    }
  }
LABEL_9:
  int v8 = ClientFromCommandPort;
  FigMachPortReleaseSendRight_();
  *a3 = v8;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_SetProperty(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4, _DWORD *a5)
{
  BOOL v20 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v20);
  if (!ClientFromCommandPort)
  {
    if (v20)
    {
      uint64_t v10 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0);
      if (!v10) {
        goto LABEL_14;
      }
      int CFPropertyListFromData = FigCreateCFPropertyListFromData();
      if (CFPropertyListFromData) {
        goto LABEL_15;
      }
      int v12 = FigCFEqual();
      CFTypeRef v13 = v20;
      if (v12)
      {
        CFTypeRef v14 = (const void *)v20[23];
        if (v14)
        {
          CFRelease(v14);
          CFTypeRef v13 = v20;
          v20[23] = 0;
        }
      }
      uint64_t v15 = v13[1];
      if (v15)
      {
        int CFPropertyListFromData = VTCompressionSessionSetProperty(v15, v10, 0);
        goto LABEL_15;
      }
      uint64_t v16 = v13[2];
      if (v16)
      {
        int CFPropertyListFromData = VTTileCompressionSessionSetProperty(v16, v10, 0);
        goto LABEL_15;
      }
      uint64_t v17 = (const void *)v13[3];
      if (v17) {
        int CFPropertyListFromData = VTSessionSetProperty(v17, v10, 0);
      }
      else {
LABEL_14:
      }
        int CFPropertyListFromData = FigSignalErrorAt();
LABEL_15:
      int v18 = CFPropertyListFromData;
      if (!a4) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
    int ClientFromCommandPort = FigSignalErrorAt();
  }
  int v18 = ClientFromCommandPort;
  uint64_t v10 = 0;
  if (a4) {
LABEL_16:
  }
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a3, a4);
LABEL_17:
  if (v10) {
    CFRelease(v10);
  }
  if (a5) {
    *a5 = v18;
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_SetProperties(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4)
{
  CFTypeRef v14 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v14);
  if (!ClientFromCommandPort)
  {
    if (!v14) {
      goto LABEL_11;
    }
    int ClientFromCommandPort = FigCreateCFPropertyListFromData();
    if (ClientFromCommandPort) {
      goto LABEL_12;
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(0)) {
      goto LABEL_11;
    }
    uint64_t v9 = v14[1];
    if (v9)
    {
      int ClientFromCommandPort = VTCompressionSessionSetProperties(v9, 0);
      goto LABEL_12;
    }
    uint64_t v10 = v14[2];
    if (v10)
    {
      int ClientFromCommandPort = VTTileCompressionSessionSetProperties(v10, 0);
      goto LABEL_12;
    }
    uint64_t v11 = (const void *)v14[3];
    if (v11) {
      int ClientFromCommandPort = VTSessionSetProperties(v11, 0);
    }
    else {
LABEL_11:
    }
      int ClientFromCommandPort = FigSignalErrorAt();
  }
LABEL_12:
  int v12 = ClientFromCommandPort;
  if (a3) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a2, a3);
  }
  if (a4) {
    *a4 = v12;
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_CompleteFrames(uint64_t a1, long long *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v8);
  if (!ClientFromCommandPort)
  {
    if (v8)
    {
      uint64_t v4 = *(void *)(v8 + 8);
      uint64_t v6 = *(NSObject **)(v8 + 160);
      uint64_t v5 = *(NSObject **)(v8 + 168);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __VTCompressionSessionRemoteServer_CompleteFrames_block_invoke;
      block[3] = &__block_descriptor_tmp_7;
      block[4] = v8;
      void block[5] = v4;
      long long v10 = *a2;
      uint64_t v11 = *((void *)a2 + 2);
      dispatch_group_async(v5, v6, block);
      return 0;
    }
    int ClientFromCommandPort = FigSignalErrorAt();
  }
  if (ClientFromCommandPort && v8) {
    VTCompressionSessionRemoteCallbackClient_CompleteFramesReturn(*(_DWORD *)(v8 + 40), *(void *)(v8 + 48), ClientFromCommandPort);
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_BeginPass(uint64_t a1, VTCompressionSessionOptionFlags a2, uint32_t *a3, _DWORD *a4)
{
  uint64_t v9 = 0;
  *a3 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v9);
  if (!ClientFromCommandPort)
  {
    if (!v9)
    {
      int ClientFromCommandPort = FigSignalErrorAt();
      if (!a4) {
        return 0;
      }
      goto LABEL_5;
    }
    int ClientFromCommandPort = VTCompressionSessionBeginPass(*(VTCompressionSessionRef *)(v9 + 8), a2, a3);
  }
  if (a4) {
LABEL_5:
  }
    *a4 = ClientFromCommandPort;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_EndPass(uint64_t a1, _DWORD *a2, uint32_t *a3, _DWORD *a4)
{
  uint64_t v10 = 0;
  Boolean furtherPassesRequestedOut = 0;
  *a2 = 0;
  *a3 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v10);
  if (!ClientFromCommandPort)
  {
    if (!v10)
    {
      int ClientFromCommandPort = FigSignalErrorAt();
      if (!a4) {
        return 0;
      }
      goto LABEL_6;
    }
    int ClientFromCommandPort = VTCompressionSessionEndPass(*(VTCompressionSessionRef *)(v10 + 8), &furtherPassesRequestedOut, a3);
    if (!ClientFromCommandPort) {
      *a2 = furtherPassesRequestedOut == 1;
    }
  }
  if (a4) {
LABEL_6:
  }
    *a4 = ClientFromCommandPort;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_GetTimeRangesForNextPass(uint64_t a1, CMItemCount *a2, void *a3, _DWORD *a4, _DWORD *a5)
{
  CMItemCount timeRangeCountOut = 0;
  uint64_t v16 = 0;
  CFTypeRef v13 = 0;
  timeRangeArrayOut = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v16);
  if (!ClientFromCommandPort)
  {
    if (!v16)
    {
      int ClientFromCommandPort = FigSignalErrorAt();
      if (!a5) {
        return 0;
      }
      goto LABEL_9;
    }
    int ClientFromCommandPort = VTCompressionSessionGetTimeRangesForNextPass(*(VTCompressionSessionRef *)(v16 + 8), &timeRangeCountOut, (const CMTimeRange **)&timeRangeArrayOut);
    if (!ClientFromCommandPort)
    {
      CMItemCount v10 = timeRangeCountOut;
      if (timeRangeCountOut >= 1)
      {
        vm_size_t v11 = (48 * timeRangeCountOut);
        int ClientFromCommandPort = vm_allocate(*MEMORY[0x1E4F14960], (vm_address_t *)&v13, v11, 1560281089);
        if (ClientFromCommandPort) {
          goto LABEL_8;
        }
        memcpy(v13, timeRangeArrayOut, v11);
        *a3 = v13;
        *a4 = v11;
        CMItemCount v10 = timeRangeCountOut;
      }
      int ClientFromCommandPort = 0;
      *a2 = v10;
    }
  }
LABEL_8:
  if (a5) {
LABEL_9:
  }
    *a5 = ClientFromCommandPort;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageCreate(uint64_t a1, int a2, _OWORD *a3, uint64_t a4, const char *a5, unsigned int a6, _OWORD *a7, uint64_t a8, unsigned int a9, const char *a10, _DWORD *a11, void *a12, uint64_t *a13, _DWORD *a14)
{
  long long v17 = a3[1];
  *(_OWORD *)&timeRange.start.value = *a3;
  *(_OWORD *)&timeRange.start.CMTimeEpoch epoch = v17;
  int ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  CFDictionaryRef v38 = 0;
  VTMultiPassStorageRef multiPassStorageOut = 0;
  CFTypeRef v37 = 0;
  *a11 = 0;
  *a12 = 0;
  *a13 = 0;
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a10) {
    CFStringRef v20 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a10, 0x8000100u);
  }
  else {
    CFStringRef v20 = 0;
  }
  FigProcessInfoCreateWithDetails();
  uint64_t v34 = a5;
  unsigned int v33 = a6;
  CFStringRef cf = v20;
  if (!a6)
  {
    CFStringRef v21 = 0;
    CFURLRef v22 = 0;
    if (!a9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (!a5 || a5[a6 - 1])
  {
    int v27 = FigSignalErrorAt();
    CFStringRef v21 = 0;
LABEL_37:
    CFURLRef v22 = 0;
LABEL_40:
    uint64_t v24 = 0;
    goto LABEL_17;
  }
  CFStringRef v21 = CFStringCreateWithFileSystemRepresentation(v19, a5);
  if (!v21)
  {
    int v27 = FigSignalErrorAt();
    goto LABEL_37;
  }
  CFURLRef v22 = CFURLCreateWithString(v19, v21, 0);
  if (!v22)
  {
    int CFPropertyListFromData = FigSignalErrorAt();
LABEL_39:
    int v27 = CFPropertyListFromData;
    goto LABEL_40;
  }
  if (a9)
  {
LABEL_12:
    int CFPropertyListFromData = FigCreateCFPropertyListFromData();
    if (!CFPropertyListFromData) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_13:
  uint64_t v24 = malloc_type_calloc(1uLL, 0xC8uLL, 0x10E0040B5F696F2uLL);
  if (!v24)
  {
    int v26 = FigSignalErrorAt();
    goto LABEL_34;
  }
  long long v25 = a7[1];
  *(_OWORD *)&timeRange.start.value = *a7;
  *(_OWORD *)&timeRange.start.CMTimeEpoch epoch = v25;
  *(_OWORD *)&timeRange.duration.timescale = a7[2];
  int v26 = VTMultiPassStorageCreate(v19, v22, &timeRange, v38, &multiPassStorageOut);
  if (v26)
  {
LABEL_34:
    int v27 = v26;
    goto LABEL_17;
  }
  int v27 = vtcss_initializeClient((uint64_t)v24, 0, 0, multiPassStorageOut, 0, a2, a4, ClientPIDFromAuditToken, v37, (uint64_t)"VTMultiPassStorage", (uint64_t)a11, a12);
  if (!v27) {
    *a13 = FigRemote_GetServerTimeoutToken();
  }
LABEL_17:
  if (multiPassStorageOut) {
    CFRelease(multiPassStorageOut);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v37) {
    CFRelease(v37);
  }
  if (v27) {
    vtcss_finalizeClient(v24);
  }
  FigMachPortReleaseSendRight_();
  CFStringRef v28 = (unsigned int *)MEMORY[0x1E4F14960];
  MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v34, v33);
  MEMORY[0x199706B20](*v28, a8, a9);
  *a14 = v27;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageDestroy(uint64_t a1)
{
  uint64_t v2 = 0;
  vtcss_findClientFromCommandPort(a1, (uint64_t)&v2);
  if (!v2) {
    return FigSignalErrorAt();
  }
  vtcss_finalizeClient(v2);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageSetIdentifier(uint64_t a1, const char *a2, _DWORD *a3)
{
  uint64_t v11 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v11);
  if (ClientFromCommandPort)
  {
LABEL_8:
    int v9 = ClientFromCommandPort;
    if (!a3) {
      return 0;
    }
    goto LABEL_5;
  }
  if (!v11
    || (uint64_t v6 = *(void *)(v11 + 96), (v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0)) == 0))
  {
    int ClientFromCommandPort = FigSignalErrorAt();
    goto LABEL_8;
  }
  CFStringRef v8 = v7;
  int v9 = VTMultiPassStorageSetIdentifier(v6, v7);
  CFRelease(v8);
  if (a3) {
LABEL_5:
  }
    *a3 = v9;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageCopyIdentifier(uint64_t a1, char *a2)
{
  uint64_t v6 = 0;
  *a2 = 0;
  if (!vtcss_findClientFromCommandPort(a1, (uint64_t)&v6))
  {
    if (v6)
    {
      CFStringRef v3 = VTMultiPassStorageCopyIdentifier(*(void *)(v6 + 96));
      if (v3)
      {
        CFStringRef v4 = v3;
        CFStringGetCString(v3, a2, 512, 0);
        CFRelease(v4);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageSetDataAtTimeStamp(uint64_t a1, uint64_t a2, int a3, const UInt8 *a4, unsigned int a5, _DWORD *a6)
{
  uint64_t v18 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v18);
  if (!ClientFromCommandPort)
  {
    if (v18)
    {
      uint64_t v12 = *(void *)(v18 + 96);
      if (a5) {
        CFDataRef v13 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4, a5);
      }
      else {
        CFDataRef v13 = 0;
      }
      long long v16 = *(_OWORD *)a2;
      uint64_t v17 = *(void *)(a2 + 16);
      int v14 = VTMultiPassStorageSetDataAtTimeStamp(v12, &v16, a3, v13);
      if (v13) {
        CFRelease(v13);
      }
      if (a5) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
    int ClientFromCommandPort = FigSignalErrorAt();
  }
  int v14 = ClientFromCommandPort;
  if (a5) {
LABEL_9:
  }
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a4, a5);
LABEL_10:
  if (a6) {
    *a6 = v14;
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageGetTimeStamp(uint64_t a1, uint64_t a2, const char *a3, void *a4, _DWORD *a5)
{
  uint64_t v15 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v15);
  if (ClientFromCommandPort)
  {
LABEL_11:
    int TimeStamp = ClientFromCommandPort;
    if (!a5) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v15
    || (uint64_t v10 = *(void *)(v15 + 96), a3)
    && (a3 = (const char *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, 0)) == 0)
  {
    int ClientFromCommandPort = FigSignalErrorAt();
    goto LABEL_11;
  }
  long long v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  int TimeStamp = VTMultiPassStorageGetTimeStamp(v10, &v13, a3, (uint64_t)a4);
  if (a3) {
    CFRelease(a3);
  }
  if (a5) {
LABEL_8:
  }
    *a5 = TimeStamp;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageGetTimeStampAndDuration(uint64_t a1, long long *a2, const char *a3, void *a4, void *a5, _DWORD *a6)
{
  uint64_t v17 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v17);
  if (ClientFromCommandPort)
  {
LABEL_11:
    int TimeStampAndDuration = ClientFromCommandPort;
    if (!a6) {
      return 0;
    }
    goto LABEL_8;
  }
  if (!v17
    || (uint64_t v12 = *(void *)(v17 + 96), a3)
    && (a3 = (const char *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, 0)) == 0)
  {
    int ClientFromCommandPort = FigSignalErrorAt();
    goto LABEL_11;
  }
  long long v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  int TimeStampAndDuration = VTMultiPassStorageGetTimeStampAndDuration(v12, (uint64_t)&v15, a3, (uint64_t)a4, (uint64_t)a5);
  if (a3) {
    CFRelease(a3);
  }
  if (a6) {
LABEL_8:
  }
    *a6 = TimeStampAndDuration;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MultiPassStorageCopyDataAtTimeStamp(uint64_t a1, uint64_t a2, int a3, void *a4, _DWORD *a5, _DWORD *a6)
{
  CFDataRef theData = 0;
  uint64_t v24 = 0;
  vm_address_t address = 0;
  *a4 = 0;
  *a5 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v24);
  if (ClientFromCommandPort)
  {
LABEL_17:
    int v13 = ClientFromCommandPort;
    *a4 = 0;
    *a5 = 0;
    if (!a6) {
      return 0;
    }
    goto LABEL_14;
  }
  if (!v24)
  {
    int ClientFromCommandPort = FigSignalErrorAt();
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(v24 + 96);
  long long v20 = *(_OWORD *)a2;
  uint64_t v21 = *(void *)(a2 + 16);
  int v13 = VTMultiPassStorageCopyDataAtTimeStamp(v12, &v20, a3, &theData);
  CFDataRef v14 = theData;
  if (v13) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = theData == 0;
  }
  if (v15)
  {
    uint64_t v16 = 0;
    LODWORD(Length) = 0;
  }
  else
  {
    vm_size_t Length = CFDataGetLength(theData);
    int v13 = vm_allocate(*MEMORY[0x1E4F14960], &address, Length, 1560281089);
    uint64_t v16 = (void *)address;
    CFDataRef v14 = theData;
    if (!v13)
    {
      BytePtr = CFDataGetBytePtr(theData);
      memcpy(v16, BytePtr, Length);
      uint64_t v16 = (void *)address;
      CFDataRef v14 = theData;
    }
  }
  *a4 = v16;
  *a5 = Length;
  if (v14) {
    CFRelease(v14);
  }
  if (a6) {
LABEL_14:
  }
    *a6 = v13;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_TileCreate(uint64_t a1, int a2, long long *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10, const char *a11, _DWORD *a12, void *a13, uint64_t *a14, _DWORD *a15)
{
  long long v20 = a3[1];
  long long valuePtr = *a3;
  long long v45 = v20;
  uint64_t ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  VTSessionRef session = 0;
  *a12 = 0;
  *a13 = 0;
  *a14 = 0;
  CFURLRef v22 = (uint64_t *)MEMORY[0x1E4F1CF80];
  if (a11) {
    CFStringRef v39 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a11, 0x8000100u);
  }
  else {
    CFStringRef v39 = 0;
  }
  uint64_t v42 = a7;
  unsigned int v41 = a8;
  if (a8)
  {
    int CFPropertyListFromData = FigCreateCFPropertyListFromData();
    if (CFPropertyListFromData)
    {
      int v35 = CFPropertyListFromData;
      int v27 = 0;
LABEL_26:
      uint64_t v24 = a10;
      goto LABEL_28;
    }
  }
  uint64_t v24 = a10;
  if (!a10 || (int v25 = FigCreateCFPropertyListFromData()) == 0)
  {
    int v26 = malloc_type_calloc(1uLL, 0xC8uLL, 0x10E0040B5F696F2uLL);
    int v27 = v26;
    if (!v26)
    {
      int v35 = FigSignalErrorAt();
      goto LABEL_28;
    }
    CFStringRef v28 = v26 + 10;
    long long v29 = a3[1];
    long long valuePtr = *a3;
    long long v45 = v29;
    int v30 = VTFigAudioSessionCreate(&valuePtr, ClientPIDFromAuditToken, @"VTCompressionSessionClient", (CFTypeRef *)v26 + 10);
    if (!v30)
    {
      CFAllocatorRef v31 = (const __CFAllocator *)*v22;
      int v30 = VTTileCompressionSessionCreate(*v22, a5, a6, 0, 0, *v22, (uint64_t)TileCompressionOutputCallback, (uint64_t)v27, (uint64_t *)&session);
      if (!v30)
      {
        CFStringRef v32 = v39;
        FigProcessInfoCreateWithDetails();
        int v33 = vtcss_initializeClient((uint64_t)v27, 0, session, 0, 0, a2, a4, ClientPIDFromAuditToken, 0, (uint64_t)"VTTileCompressionSession", (uint64_t)a12, a13);
        if (v33
          || *v28 && (CMNotificationCenterGetDefaultLocalCenter(), (int v33 = CMNotificationCenterAddListener()) != 0))
        {
          int v35 = v33;
        }
        else
        {
          LODWORD(valuePtr) = ClientPIDFromAuditToken;
          CFNumberRef v34 = CFNumberCreate(v31, kCFNumberSInt32Type, &valuePtr);
          VTSessionSetProperty(session, @"ClientPID", v34);
          CFRelease(v34);
          int v35 = 0;
          *a14 = FigRemote_GetServerTimeoutToken();
        }
        uint64_t v24 = a10;
        if (v39) {
          goto LABEL_16;
        }
        goto LABEL_17;
      }
    }
    int v35 = v30;
    goto LABEL_26;
  }
  int v35 = v25;
  int v27 = 0;
LABEL_28:
  CFStringRef v32 = v39;
  if (v39) {
LABEL_16:
  }
    CFRelease(v32);
LABEL_17:
  if (session) {
    CFRelease(session);
  }
  if (v35) {
    vtcss_finalizeClient(v27);
  }
  FigMachPortReleaseSendRight_();
  uint64_t v36 = (unsigned int *)MEMORY[0x1E4F14960];
  MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v42, v41);
  MEMORY[0x199706B20](*v36, a9, v24);
  *a15 = v35;
  return 0;
}

void TileCompressionOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, const void *a7)
{
  if (!*(unsigned char *)(a1 + 176))
  {
    uint64_t v12 = malloc_type_calloc(1uLL, 0x30uLL, 0x10E00405F1B3371uLL);
    if (v12)
    {
      uint64_t v13 = (uint64_t)v12;
      v12[1] = a2;
      *((_DWORD *)v12 + 4) = a5;
      *((_DWORD *)v12 + 5) = a6;
      v12[3] = 0;
      if (a7) {
        CFTypeRef v14 = CFRetain(a7);
      }
      else {
        CFTypeRef v14 = 0;
      }
      *(void *)(v13 + 32) = v14;
      *(void *)(v13 + 40) = 0;
      vtcss_enqueueFrame(a1, v13);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t VTCompressionSessionRemoteServer_PrepareToEncodeTiles(uint64_t a1, int a2)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  BOOL v2 = a2 != 0;
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v14);
  if (!ClientFromCommandPort)
  {
    if (v14)
    {
      uint64_t v4 = *(void *)(v14 + 16);
      uint64_t v6 = *(NSObject **)(v14 + 160);
      uint64_t v5 = *(NSObject **)(v14 + 168);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __VTCompressionSessionRemoteServer_PrepareToEncodeTiles_block_invoke;
      block[3] = &unk_1E5784D68;
      BOOL v9 = v2;
      block[4] = &v10;
      void block[5] = v4;
      void block[6] = v14;
      dispatch_group_async(v5, v6, block);
      goto LABEL_4;
    }
    int ClientFromCommandPort = FigSignalErrorAt();
  }
  if (ClientFromCommandPort && v14) {
    VTCompressionSessionRemoteCallbackClient_PrepareToEncodeTilesReturn(*(_DWORD *)(v14 + 40), *(void *)(v14 + 48), v11[3], ClientFromCommandPort);
  }
LABEL_4:
  _Block_object_dispose(&v10, 8);
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_EncodeTile(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  CFTypeRef v32 = 0;
  uint64_t v33 = 0;
  CFTypeRef v31 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v33);
  if (ClientFromCommandPort) {
    goto LABEL_18;
  }
  if (!v33) {
    goto LABEL_19;
  }
  uint64_t v17 = *(void *)(v33 + 16);
  if (!(a4 | a2))
  {
    CFTypeRef v19 = *(CFTypeRef *)(v33 + 184);
    if (v19) {
      CFTypeRef v19 = CFRetain(v19);
    }
    CFTypeRef v32 = v19;
    if (v19) {
      goto LABEL_8;
    }
LABEL_19:
    int v25 = FigSignalErrorAt();
    if (!v25) {
      return 0;
    }
    goto LABEL_22;
  }
  int ClientFromCommandPort = FigRemote_CreatePixelBufferFromSerializedAtomData();
  if (ClientFromCommandPort)
  {
LABEL_18:
    int v25 = ClientFromCommandPort;
    goto LABEL_22;
  }
  uint64_t v18 = *(const void **)(v33 + 184);
  *(void *)(v33 + 184) = v32;
  if (v18) {
    CFRelease(v18);
  }
  CFTypeRef v19 = v32;
  if (!v32) {
    goto LABEL_19;
  }
LABEL_8:
  if (!a8)
  {
    CFTypeRef v21 = 0;
    goto LABEL_16;
  }
  int CFPropertyListFromData = FigCreateCFPropertyListFromData();
  if (!CFPropertyListFromData)
  {
    CFTypeRef v21 = v31;
    CFTypeRef v19 = v32;
LABEL_16:
    CFURLRef v22 = *(NSObject **)(v33 + 160);
    int v23 = *(NSObject **)(v33 + 168);
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 0x40000000;
    _OWORD v27[2] = __VTCompressionSessionRemoteServer_EncodeTile_block_invoke;
    v27[3] = &__block_descriptor_tmp_11;
    v27[4] = v33;
    v27[5] = v17;
    v27[11] = a5;
    v27[12] = a6;
    _OWORD v27[6] = v19;
    v27[7] = v21;
    int v28 = a2;
    int v29 = 0;
    v27[8] = a9;
    v27[9] = a3;
    unsigned int v30 = a8;
    v27[10] = a7;
    dispatch_group_async(v23, v22, v27);
    return 0;
  }
  int v25 = CFPropertyListFromData;
  a4 = 0;
LABEL_22:
  if (a2) {
    FigMachPortReleaseSendRight_();
  }
  int v26 = (unsigned int *)MEMORY[0x1E4F14960];
  if (a4) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a3, a4);
  }
  if (a8) {
    MEMORY[0x199706B20](*v26, a7, a8);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v33) {
    VTCompressionSessionRemoteCallbackClient_EncodeReturn(*(_DWORD *)(v33 + 40), *(void *)(v33 + 48), 0, 0, v25);
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_CompleteTiles(uint64_t a1)
{
  uint64_t v7 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v7);
  if (!ClientFromCommandPort)
  {
    if (v7)
    {
      uint64_t v2 = *(void *)(v7 + 16);
      uint64_t v4 = *(NSObject **)(v7 + 160);
      CFStringRef v3 = *(NSObject **)(v7 + 168);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __VTCompressionSessionRemoteServer_CompleteTiles_block_invoke;
      block[3] = &__block_descriptor_tmp_12;
      block[4] = v7;
      void block[5] = v2;
      dispatch_group_async(v3, v4, block);
      return 0;
    }
    int ClientFromCommandPort = FigSignalErrorAt();
  }
  if (ClientFromCommandPort && v7) {
    VTCompressionSessionRemoteCallbackClient_CompleteFramesReturn(*(_DWORD *)(v7 + 40), *(void *)(v7 + 48), ClientFromCommandPort);
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MotionEstimationCreate(uint64_t a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, const char *a9, _DWORD *a10, void *a11, uint64_t *a12, _DWORD *a13)
{
  long long v17 = a3[1];
  *(_OWORD *)VTSessionRef session = *a3;
  long long v36 = v17;
  int ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  CFTypeRef cf = 0;
  session[0] = 0;
  CFTypeRef v33 = 0;
  *a10 = 0;
  *a11 = 0;
  *a12 = 0;
  CFTypeRef v19 = (uint64_t *)MEMORY[0x1E4F1CF80];
  if (a9) {
    CFStringRef v20 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a9, 0x8000100u);
  }
  else {
    CFStringRef v20 = 0;
  }
  uint64_t v31 = a7;
  unsigned int v30 = a8;
  if (a8)
  {
    int CFPropertyListFromData = FigCreateCFPropertyListFromData();
    if (CFPropertyListFromData)
    {
      int v25 = CFPropertyListFromData;
      CFURLRef v22 = 0;
      goto LABEL_10;
    }
  }
  CFURLRef v22 = malloc_type_calloc(1uLL, 0xC8uLL, 0x10E0040B5F696F2uLL);
  if (!v22)
  {
    int v24 = FigSignalErrorAt();
    goto LABEL_22;
  }
  CFAllocatorRef v23 = (const __CFAllocator *)*v19;
  int v24 = VTMotionEstimationSessionCreate(*v19, cf, a5, a6, (uint64_t *)session);
  if (v24)
  {
LABEL_22:
    int v25 = v24;
    goto LABEL_10;
  }
  FigProcessInfoCreateWithDetails();
  int v25 = vtcss_initializeClient((uint64_t)v22, 0, 0, 0, session[0], a2, a4, ClientPIDFromAuditToken, v33, (uint64_t)"VTMotionEstimationSession", (uint64_t)a10, a11);
  if (!v25)
  {
    int valuePtr = ClientPIDFromAuditToken;
    CFNumberRef v26 = CFNumberCreate(v23, kCFNumberSInt32Type, &valuePtr);
    VTSessionSetProperty(session[0], @"ClientPID", v26);
    CFRelease(v26);
    *a12 = FigRemote_GetServerTimeoutToken();
  }
LABEL_10:
  if (v20) {
    CFRelease(v20);
  }
  if (session[0]) {
    CFRelease(session[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v33) {
    CFRelease(v33);
  }
  if (v25) {
    vtcss_finalizeClient(v22);
  }
  FigMachPortReleaseSendRight_();
  MEMORY[0x199706B20](*MEMORY[0x1E4F14960], v31, v30);
  *a13 = v25;
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_MotionEstimationCopySourcePixelBufferAttributes(uint64_t a1, void *a2, _DWORD *a3, kern_return_t *a4)
{
  kern_return_t ClientFromCommandPort;
  vm_size_t Length;
  kern_return_t v9;
  void *v10;
  const UInt8 *BytePtr;
  kern_return_t v12;
  vm_address_t v14;
  CFDataRef theData;
  CFTypeRef cf;
  uint64_t v17;

  CFTypeRef cf = 0;
  long long v17 = 0;
  uint64_t v14 = 0;
  CFDataRef theData = 0;
  *a2 = 0;
  *a3 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v17);
  if (ClientFromCommandPort) {
    goto LABEL_15;
  }
  if (!v17)
  {
    int ClientFromCommandPort = FigSignalErrorAt();
LABEL_15:
    uint64_t v12 = ClientFromCommandPort;
    LODWORD(Length) = 0;
    goto LABEL_7;
  }
  int ClientFromCommandPort = VTMotionEstimationSessionCopySourcePixelBufferAttributes(*(void **)(v17 + 24), (CFDictionaryRef *)&cf);
  if (ClientFromCommandPort) {
    goto LABEL_15;
  }
  int ClientFromCommandPort = FigCreateCFDataFromCFPropertyList();
  if (ClientFromCommandPort) {
    goto LABEL_15;
  }
  vm_size_t Length = CFDataGetLength(theData);
  BOOL v9 = vm_allocate(*MEMORY[0x1E4F14960], &v14, Length, 1560281089);
  if (v9)
  {
    uint64_t v12 = v9;
  }
  else
  {
    uint64_t v10 = (void *)v14;
    BytePtr = CFDataGetBytePtr(theData);
    memcpy(v10, BytePtr, Length);
    uint64_t v12 = 0;
  }
LABEL_7:
  if (cf) {
    CFRelease(cf);
  }
  if (theData) {
    CFRelease(theData);
  }
  *a2 = v14;
  *a3 = Length;
  if (a4) {
    *a4 = v12;
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_EstimateMotion(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unsigned int a7)
{
  uint64_t v20 = 0;
  CFTypeRef v21 = &v20;
  uint64_t v22 = 0x2000000000;
  uint64_t v23 = 0;
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v23);
  if (ClientFromCommandPort
    || v21[3] && a4 | a2 && (int ClientFromCommandPort = FigRemote_CreatePixelBufferFromSerializedAtomData()) != 0)
  {
    int v15 = ClientFromCommandPort;
  }
  else
  {
    int v15 = FigSignalErrorAt();
    if (!v15) {
      goto LABEL_6;
    }
  }
  if (a2) {
    FigMachPortReleaseSendRight_();
  }
  uint64_t v16 = (unsigned int *)MEMORY[0x1E4F14960];
  if (a4) {
    MEMORY[0x199706B20](*MEMORY[0x1E4F14960], a3, a4);
  }
  if (a5) {
    FigMachPortReleaseSendRight_();
  }
  if (a7) {
    MEMORY[0x199706B20](*v16, a6, a7);
  }
  uint64_t v17 = v21[3];
  if (v17) {
    VTCompressionSessionRemoteCallbackClient_EncodeReturn(*(_DWORD *)(v17 + 40), *(void *)(v17 + 48), 0, 0, v15);
  }
LABEL_6:
  _Block_object_dispose(&v20, 8);
  return 0;
}

void vtcss_enqueueFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  CFStringRef v3 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __vtcss_enqueueFrame_block_invoke;
  block[3] = &unk_1E5784EC8;
  void block[5] = a2;
  void block[6] = a1;
  block[4] = &v5;
  dispatch_sync(v3, block);
  if (!*(unsigned char *)(a1 + 176))
  {
    if (*((unsigned char *)v6 + 24)) {
      VTCompressionSessionRemoteCallbackClient_FrameIsPending(*(_DWORD *)(a1 + 40), *(void *)(a1 + 48));
    }
    while (*(unsigned char *)(a1 + 144) && !*(unsigned char *)(a1 + 176) && FigSemaphoreWaitRelative() == -12792)
      ;
  }
  _Block_object_dispose(&v5, 8);
}

uint64_t VTCompressionSessionRemoteServer_CompleteMotionEstimation(uint64_t a1)
{
  uint64_t v7 = 0;
  int ClientFromCommandPort = vtcss_findClientFromCommandPort(a1, (uint64_t)&v7);
  if (!ClientFromCommandPort)
  {
    if (v7)
    {
      uint64_t v2 = *(void *)(v7 + 24);
      uint64_t v4 = *(NSObject **)(v7 + 160);
      CFStringRef v3 = *(NSObject **)(v7 + 168);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __VTCompressionSessionRemoteServer_CompleteMotionEstimation_block_invoke;
      block[3] = &__block_descriptor_tmp_17;
      block[4] = v7;
      void block[5] = v2;
      dispatch_group_async(v3, v4, block);
      return 0;
    }
    int ClientFromCommandPort = FigSignalErrorAt();
  }
  if (ClientFromCommandPort && v7) {
    VTCompressionSessionRemoteCallbackClient_CompleteFramesReturn(*(_DWORD *)(v7 + 40), *(void *)(v7 + 48), ClientFromCommandPort);
  }
  return 0;
}

uint64_t VTCompressionSessionRemoteServer_GetNextPendingNotification(uint64_t a1, _DWORD *a2, void *a3, char *a4, vm_address_t *a5, unsigned int *a6)
{
  uint64_t v16 = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  vtcss_findClientFromCommandPort(a1, (uint64_t)&v16);
  if (!v16) {
    return 0;
  }
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  uint64_t v17 = 0;
  CFDataRef theData = 0;
  uint64_t PendingNotification = FigRPCFetchNextPendingNotification();
  if (PendingNotification)
  {
    uint64_t v12 = PendingNotification;
  }
  else
  {
    FigCreateCFDataFromCFPropertyList();
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    if (CStringPtrAndBufferToFree) {
      strlcpy(a4, CStringPtrAndBufferToFree, 0x200uLL);
    }
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    if (v19)
    {
      CFRelease(v19);
      CFTypeRef v19 = 0;
    }
    if (theData)
    {
      unsigned int Length = CFDataGetLength(theData);
      *a6 = Length;
      uint64_t v12 = vm_allocate(*MEMORY[0x1E4F14960], a5, Length, 1560281089);
      if (!v12)
      {
        uint64_t v13 = (void *)*a5;
        BytePtr = CFDataGetBytePtr(theData);
        memcpy(v13, BytePtr, *a6);
      }
    }
    else
    {
      uint64_t v12 = 0;
      *a5 = 0;
      *a6 = 0;
    }
  }
  free(v17);
  if (theData) {
    CFRelease(theData);
  }
  return v12;
}

void __vtcss_appStateChangeListener_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  BOOL v1 = *(NSObject **)(a1 + 40);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = __vtcss_appStateChangeListener_block_invoke_2;
  v3[3] = &__block_descriptor_tmp_20;
  long long v4 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  dispatch_group_async(v2, v1, v3);
}

void __vtcss_appStateChangeListener_block_invoke_2(uint64_t a1)
{
  VTCompressionSessionInvalidate(*(VTCompressionSessionRef *)(a1 + 32));
  VTTileCompressionSessionInvalidate(*(void *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFStringRef v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  long long v4 = *(NSObject **)(a1 + 48);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(NSObject **)(a1 + 56);
  if (v5)
  {
    dispatch_release(v5);
  }
}

void __vtcss_finalizeClient_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v4 = *(uint64_t **)(v1 + 112);
  uint64_t v2 = (uint64_t *)(v1 + 112);
  CFStringRef v3 = v4;
  if (v4)
  {
    do
    {
      uint64_t v6 = *v3;
      *uint64_t v2 = *v3;
      if (!v6) {
        *(void *)(*(void *)(a1 + 32) + 120) = *(void *)(a1 + 32) + 112;
      }
      FigSemaphoreSignal();
      vtcss_freeQueuedFrame(v3);
      uint64_t v7 = *(void *)(a1 + 32);
      char v8 = *(uint64_t **)(v7 + 112);
      uint64_t v2 = (uint64_t *)(v7 + 112);
      CFStringRef v3 = v8;
    }
    while (v8);
  }
}

uint64_t __vtcss_dequeueFrame_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(*(void *)(result + 48) + 112);
  uint64_t v1 = *(uint64_t **)(*(void *)(*(void *)(result + 32) + 8) + 24);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(result + 48);
    long long v4 = *(uint64_t **)(v3 + 112);
    if (v4 == v1)
    {
      uint64_t v8 = *v1;
      *(void *)(v3 + 112) = v8;
      if (v8) {
        goto LABEL_9;
      }
      uint64_t v7 = *(void *)(result + 48);
      uint64_t v5 = (uint64_t *)(v7 + 112);
    }
    else
    {
      do
      {
        uint64_t v5 = v4;
        long long v4 = (uint64_t *)*v4;
      }
      while (v4 != v1);
      uint64_t v6 = *v1;
      *uint64_t v5 = v6;
      if (v6) {
        goto LABEL_9;
      }
      uint64_t v7 = *(void *)(result + 48);
    }
    *(void *)(v7 + 120) = v5;
LABEL_9:
    uint64_t result = FigSemaphoreSignal();
    *(unsigned char *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = *(void *)(*(void *)(v2 + 48) + 112) != 0;
    if (!*(unsigned char *)(*(void *)(*(void *)(v2 + 40) + 8) + 24)) {
      *(unsigned char *)(*(void *)(v2 + 48) + 128) = 0;
    }
  }
  return result;
}

uint64_t __vtcss_enqueueFrame_block_invoke(uint64_t result)
{
  **(void **)(result + 40) = 0;
  **(void **)(*(void *)(result + 48) + 120) = *(void *)(result + 40);
  *(void *)(*(void *)(result + 48) + 120) = *(void *)(result + 40);
  if (!*(unsigned char *)(*(void *)(result + 48) + 128))
  {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(result + 48) + 128) = 1;
  }
  return result;
}

uint64_t vt_Copy_32ARGB_2vuyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 1);
          int v15 = *v10;
          int v16 = v10[2];
          int v17 = v10[3];
          int v18 = v10[4];
          unsigned int v19 = (8414 * v13 + 540672 + 16519 * v14 + 3208 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = (8421376 - 9534 * v14 + 16767682 * v17 + 16772360 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 12051 * v14 - 2340 * v15 + 16765165 * v17 + 16774876 * v18 + 14392 * v20) >> 16;
          v12[3] = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v12 += 4;
          v10 += 8;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_2vuyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 3);
          int v15 = *(v10 - 4);
          int v16 = v10[2];
          int v17 = v10[1];
          int v18 = *v10;
          v10 += 8;
          unsigned int v19 = (8414 * v13 + 540672 + 16519 * v14 + 3208 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = (8421376 - 9534 * v14 + 16767682 * v17 + 16772360 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 12051 * v14 - 2340 * v15 + 16765165 * v17 + 16774876 * v18 + 14392 * v20) >> 16;
          v12[3] = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_2vuyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    uint64_t v8 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *v11;
          int v14 = v11[1];
          int v15 = v11[2];
          int v16 = v11[3];
          int v17 = v11[4];
          int v18 = v11[5];
          unsigned int v19 = (8414 * v13 + 540672 + 16519 * v14 + 3208 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = (8421376 - 9534 * v14 + 16767682 * v17 + 16772360 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 12051 * v14 - 2340 * v15 + 16765165 * v17 + 16774876 * v18 + 14392 * v20) >> 16;
          v12[3] = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v11 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v8 += v23;
      v7 += v22;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_2vuyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    uint64_t v11 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        int v13 = v10;
        int v14 = v11;
        do
        {
          unsigned int v15 = (28141 * (*v14 ^ 0xFFu) + 540672) >> 15;
          unsigned int v16 = 28141 * (v14[1] ^ 0xFF) + 540672;
          unsigned char *v13 = 0x80;
          v13[1] = v15;
          v13[2] = 0x80;
          v13[3] = v16 >> 15;
          v14 += 2;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_yuvsITU601(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 1);
          int v15 = *v10;
          int v16 = v10[2];
          int v17 = v10[3];
          int v18 = v10[4];
          unsigned int v19 = (8414 * v13 + 540672 + 16519 * v14 + 3208 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = v19;
          v12[1] = (8421376 - 9534 * v14 + 16767682 * v17 + 16772360 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[2] = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v12[3] = (8421376 - 12051 * v14 - 2340 * v15 + 16765165 * v17 + 16774876 * v18 + 14392 * v20) >> 16;
          v12 += 4;
          v10 += 8;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvsITU601(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 3);
          int v15 = *(v10 - 4);
          int v16 = v10[2];
          int v17 = v10[1];
          int v18 = *v10;
          v10 += 8;
          unsigned int v19 = (8414 * v13 + 540672 + 16519 * v14 + 3208 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = v19;
          v12[1] = (8421376 - 9534 * v14 + 16767682 * v17 + 16772360 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[2] = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v12[3] = (8421376 - 12051 * v14 - 2340 * v15 + 16765165 * v17 + 16774876 * v18 + 14392 * v20) >> 16;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_yuvsITU601(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    uint64_t v8 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *v11;
          int v14 = v11[1];
          int v15 = v11[2];
          int v16 = v11[3];
          int v17 = v11[4];
          int v18 = v11[5];
          unsigned int v19 = (8414 * v13 + 540672 + 16519 * v14 + 3208 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = v19;
          v12[1] = (8421376 - 9534 * v14 + 16767682 * v17 + 16772360 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[2] = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          v12[3] = (8421376 - 12051 * v14 - 2340 * v15 + 16765165 * v17 + 16774876 * v18 + 14392 * v20) >> 16;
          v11 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v8 += v23;
      v7 += v22;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_yuvsITU601(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    uint64_t v11 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        int v13 = v10;
        int v14 = v11;
        do
        {
          unsigned int v15 = 28141 * (v14[1] ^ 0xFF) + 540672;
          unsigned char *v13 = (28141 * (*v14 ^ 0xFFu) + 540672) >> 15;
          v13[1] = 0x80;
          v13[2] = v15 >> 15;
          v13[3] = 0x80;
          v14 += 2;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_a2vyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v26 = *a5;
    uint64_t v27 = *a3;
    uint64_t v7 = a5[1];
    uint64_t v9 = (unsigned char *)*a6;
    uint64_t v8 = (unsigned char *)a6[1];
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = a1 >> 1;
    }
    uint64_t v25 = v10;
    uint64_t v11 = (unsigned char *)*a4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v25;
        int v13 = v8;
        int v14 = v9;
        unsigned int v15 = v11;
        do
        {
          unsigned char *v13 = *v15;
          v13[1] = v15[4];
          int v16 = v15[1];
          int v17 = v15[2];
          int v18 = v15[3];
          int v19 = v15[5];
          int v20 = v15[6];
          int v21 = v15[7];
          unsigned int v22 = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          int v23 = v19 + v16;
          unsigned char *v14 = (8421376 - 9534 * v17 + 16767682 * v20 + 16772360 * v23 + 14392 * (v21 + v18)) >> 16;
          v14[1] = v22;
          v14[2] = (8421376 - 12051 * v17 - 2340 * v18 + 16765165 * v20 + 16774876 * v21 + 14392 * v23) >> 16;
          void v14[3] = (8414 * v19 + 540672 + 16519 * v20 + 3208 * v21) >> 15;
          v13 += 2;
          v15 += 8;
          v14 += 4;
          --v12;
        }
        while (v12);
      }
      v8 += v7;
      v11 += v27;
      v9 += v26;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_a2vyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v26 = *a5;
    uint64_t v27 = *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = a1 >> 1;
    }
    uint64_t v25 = a5[1];
    uint64_t v8 = *a4 + 3;
    uint64_t v10 = (unsigned char *)*a6;
    uint64_t v9 = (unsigned char *)a6[1];
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = (unsigned char *)v8;
        uint64_t v13 = v7;
        int v14 = v9;
        unsigned int v15 = v10;
        do
        {
          unsigned char *v14 = *v12;
          v14[1] = v12[4];
          int v16 = *(v12 - 1);
          int v17 = *(v12 - 2);
          int v18 = *(v12 - 3);
          int v19 = v12[3];
          int v20 = v12[2];
          int v21 = v12[1];
          unsigned int v22 = (8414 * v16 + 540672 + 16519 * v17 + 3208 * v18) >> 15;
          int v23 = v19 + v16;
          *unsigned int v15 = (8421376 - 9534 * v17 + 16767682 * v20 + 16772360 * v23 + 14392 * (v21 + v18)) >> 16;
          v15[1] = v22;
          v15[2] = (8421376 - 12051 * v17 - 2340 * v18 + 16765165 * v20 + 16774876 * v21 + 14392 * v23) >> 16;
          _OWORD v15[3] = (8414 * v19 + 540672 + 16519 * v20 + 3208 * v21) >> 15;
          v15 += 4;
          v12 += 8;
          v14 += 2;
          --v13;
        }
        while (v13);
      }
      v9 += v25;
      v10 += v26;
      ++v6;
      v8 += v27;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_a2vyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v25 = *a5;
    uint64_t v26 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    uint64_t v27 = (_WORD *)a6[1];
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v23 = v8;
    uint64_t v24 = a5[1];
    uint64_t v9 = *a4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = v23;
        uint64_t v11 = v27;
        uint64_t v12 = v7;
        uint64_t v13 = v9;
        do
        {
          *v11++ = -1;
          int v14 = *v13;
          int v15 = v13[1];
          int v16 = v13[2];
          int v17 = v13[3];
          int v18 = v13[4];
          int v19 = v13[5];
          unsigned int v20 = (8414 * v14 + 540672 + 16519 * v15 + 3208 * v16) >> 15;
          int v21 = v17 + v14;
          unsigned char *v12 = (8421376 - 9534 * v15 + 16767682 * v18 + 16772360 * v21 + 14392 * (v19 + v16)) >> 16;
          v12[1] = v20;
          v12[2] = (8421376 - 12051 * v15 - 2340 * v16 + 16765165 * v18 + 16774876 * v19 + 14392 * v21) >> 16;
          v12[3] = (8414 * v17 + 540672 + 16519 * v18 + 3208 * v19) >> 15;
          v13 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      uint64_t v27 = (_WORD *)((char *)v27 + v24);
      v9 += v26;
      v7 += v25;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_a2vyITU601(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    uint64_t v10 = a1 >> 1;
    uint64_t v12 = (unsigned char *)*a6;
    uint64_t v11 = a6[1];
    uint64_t v13 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v10;
        int v16 = v12;
        do
        {
          *(_WORD *)(v11 + v14) = -1;
          unsigned int v17 = (28141 * (*(unsigned __int8 *)(v13 + v14) ^ 0xFFu) + 540672) >> 15;
          unsigned int v18 = (28141 * (*(unsigned __int8 *)(v13 + v14 + 1) ^ 0xFFu) + 540672) >> 15;
          unsigned char *v16 = 0x80;
          v16[1] = v17;
          v16[2] = 0x80;
          v16[3] = v18;
          v14 += 2;
          v16 += 4;
          --v15;
        }
        while (v15);
      }
      v11 += v9;
      v13 += v7;
      v12 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvfITU601(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v20 = *a5;
    uint64_t v21 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 3);
          int v15 = *(v10 - 4);
          int v16 = v10[2];
          int v17 = v10[1];
          int v18 = *v10;
          v10 += 8;
          unsigned char *v12 = (19235 * v14 + 9798 * v13 + 3736 * v15 + 0x4000) >> 15;
          v12[1] = (8421376 - 10854 * v14 + 16766362 * v17 + 16771688 * (v16 + v13) + ((v18 + v15) << 14)) >> 16;
          v12[2] = (19235 * v17 + 9798 * v16 + 3736 * v18 + 0x4000) >> 15;
          v12[3] = ((v13 << 14)
                                + 8421376
                                - 13719 * v14
                                - 2663 * v15
                                + (v16 << 14)
                                + 16763497 * v17
                                + 16774553 * v18) >> 16;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v20;
      ++v6;
      v9 += v21;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_2vuyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 1);
          int v15 = *v10;
          int v16 = v10[2];
          int v17 = v10[3];
          int v18 = v10[4];
          unsigned int v19 = (5983 * v13 + 540672 + 20127 * v14 + 2032 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = (8421376 - 11093 * v14 + 16766123 * v17 + 16773919 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 13072 * v14 - 1319 * v15 + 16764144 * v17 + 16775897 * v18 + 14392 * v20) >> 16;
          v12[3] = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v12 += 4;
          v10 += 8;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_2vuyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 3);
          int v15 = *(v10 - 4);
          int v16 = v10[2];
          int v17 = v10[1];
          int v18 = *v10;
          v10 += 8;
          unsigned int v19 = (5983 * v13 + 540672 + 20127 * v14 + 2032 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = (8421376 - 11093 * v14 + 16766123 * v17 + 16773919 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 13072 * v14 - 1319 * v15 + 16764144 * v17 + 16775897 * v18 + 14392 * v20) >> 16;
          v12[3] = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_2vuyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    uint64_t v8 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *v11;
          int v14 = v11[1];
          int v15 = v11[2];
          int v16 = v11[3];
          int v17 = v11[4];
          int v18 = v11[5];
          unsigned int v19 = (5983 * v13 + 540672 + 20127 * v14 + 2032 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = (8421376 - 11093 * v14 + 16766123 * v17 + 16773919 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 13072 * v14 - 1319 * v15 + 16764144 * v17 + 16775897 * v18 + 14392 * v20) >> 16;
          v12[3] = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v11 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v8 += v23;
      v7 += v22;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_2vuyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    uint64_t v11 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        int v13 = v10;
        int v14 = v11;
        do
        {
          unsigned int v15 = (28142 * (*v14 ^ 0xFFu) + 540672) >> 15;
          unsigned int v16 = 28142 * (v14[1] ^ 0xFF) + 540672;
          unsigned char *v13 = 0x80;
          v13[1] = v15;
          v13[2] = 0x80;
          v13[3] = v16 >> 15;
          v14 += 2;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_yuvsITU709(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 1);
          int v15 = *v10;
          int v16 = v10[2];
          int v17 = v10[3];
          int v18 = v10[4];
          unsigned int v19 = (5983 * v13 + 540672 + 20127 * v14 + 2032 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = v19;
          v12[1] = (8421376 - 11093 * v14 + 16766123 * v17 + 16773919 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[2] = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v12[3] = (8421376 - 13072 * v14 - 1319 * v15 + 16764144 * v17 + 16775897 * v18 + 14392 * v20) >> 16;
          v12 += 4;
          v10 += 8;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvsITU709(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 3);
          int v15 = *(v10 - 4);
          int v16 = v10[2];
          int v17 = v10[1];
          int v18 = *v10;
          v10 += 8;
          unsigned int v19 = (5983 * v13 + 540672 + 20127 * v14 + 2032 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = v19;
          v12[1] = (8421376 - 11093 * v14 + 16766123 * v17 + 16773919 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[2] = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v12[3] = (8421376 - 13072 * v14 - 1319 * v15 + 16764144 * v17 + 16775897 * v18 + 14392 * v20) >> 16;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_yuvsITU709(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    uint64_t v8 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *v11;
          int v14 = v11[1];
          int v15 = v11[2];
          int v16 = v11[3];
          int v17 = v11[4];
          int v18 = v11[5];
          unsigned int v19 = (5983 * v13 + 540672 + 20127 * v14 + 2032 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = v19;
          v12[1] = (8421376 - 11093 * v14 + 16766123 * v17 + 16773919 * v20 + 14392 * (v18 + v15)) >> 16;
          v12[2] = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          v12[3] = (8421376 - 13072 * v14 - 1319 * v15 + 16764144 * v17 + 16775897 * v18 + 14392 * v20) >> 16;
          v11 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v8 += v23;
      v7 += v22;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_yuvsITU709(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    uint64_t v11 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        int v13 = v10;
        int v14 = v11;
        do
        {
          unsigned int v15 = 28142 * (v14[1] ^ 0xFF) + 540672;
          unsigned char *v13 = (28142 * (*v14 ^ 0xFFu) + 540672) >> 15;
          v13[1] = 0x80;
          v13[2] = v15 >> 15;
          v13[3] = 0x80;
          v14 += 2;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_a2vyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v26 = *a5;
    uint64_t v27 = *a3;
    uint64_t v7 = a5[1];
    uint64_t v9 = (unsigned char *)*a6;
    uint64_t v8 = (unsigned char *)a6[1];
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = a1 >> 1;
    }
    uint64_t v25 = v10;
    uint64_t v11 = (unsigned char *)*a4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v25;
        int v13 = v8;
        int v14 = v9;
        unsigned int v15 = v11;
        do
        {
          unsigned char *v13 = *v15;
          v13[1] = v15[4];
          int v16 = v15[1];
          int v17 = v15[2];
          int v18 = v15[3];
          int v19 = v15[5];
          int v20 = v15[6];
          int v21 = v15[7];
          unsigned int v22 = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          int v23 = v19 + v16;
          unsigned char *v14 = (8421376 - 11093 * v17 + 16766123 * v20 + 16773919 * v23 + 14392 * (v21 + v18)) >> 16;
          v14[1] = v22;
          v14[2] = (8421376 - 13072 * v17 - 1319 * v18 + 16764144 * v20 + 16775897 * v21 + 14392 * v23) >> 16;
          void v14[3] = (5983 * v19 + 540672 + 20127 * v20 + 2032 * v21) >> 15;
          v13 += 2;
          v15 += 8;
          v14 += 4;
          --v12;
        }
        while (v12);
      }
      v8 += v7;
      v11 += v27;
      v9 += v26;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_a2vyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v26 = *a5;
    uint64_t v27 = *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = a1 >> 1;
    }
    uint64_t v25 = a5[1];
    uint64_t v8 = *a4 + 3;
    uint64_t v10 = (unsigned char *)*a6;
    uint64_t v9 = (unsigned char *)a6[1];
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = (unsigned char *)v8;
        uint64_t v13 = v7;
        int v14 = v9;
        unsigned int v15 = v10;
        do
        {
          unsigned char *v14 = *v12;
          v14[1] = v12[4];
          int v16 = *(v12 - 1);
          int v17 = *(v12 - 2);
          int v18 = *(v12 - 3);
          int v19 = v12[3];
          int v20 = v12[2];
          int v21 = v12[1];
          unsigned int v22 = (5983 * v16 + 540672 + 20127 * v17 + 2032 * v18) >> 15;
          int v23 = v19 + v16;
          *unsigned int v15 = (8421376 - 11093 * v17 + 16766123 * v20 + 16773919 * v23 + 14392 * (v21 + v18)) >> 16;
          v15[1] = v22;
          v15[2] = (8421376 - 13072 * v17 - 1319 * v18 + 16764144 * v20 + 16775897 * v21 + 14392 * v23) >> 16;
          _OWORD v15[3] = (5983 * v19 + 540672 + 20127 * v20 + 2032 * v21) >> 15;
          v15 += 4;
          v12 += 8;
          v14 += 2;
          --v13;
        }
        while (v13);
      }
      v9 += v25;
      v10 += v26;
      ++v6;
      v8 += v27;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_a2vyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v25 = *a5;
    uint64_t v26 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    uint64_t v27 = (_WORD *)a6[1];
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v23 = v8;
    uint64_t v24 = a5[1];
    uint64_t v9 = *a4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = v23;
        uint64_t v11 = v27;
        uint64_t v12 = v7;
        uint64_t v13 = v9;
        do
        {
          *v11++ = -1;
          int v14 = *v13;
          int v15 = v13[1];
          int v16 = v13[2];
          int v17 = v13[3];
          int v18 = v13[4];
          int v19 = v13[5];
          unsigned int v20 = (5983 * v14 + 540672 + 20127 * v15 + 2032 * v16) >> 15;
          int v21 = v17 + v14;
          unsigned char *v12 = (8421376 - 11093 * v15 + 16766123 * v18 + 16773919 * v21 + 14392 * (v19 + v16)) >> 16;
          v12[1] = v20;
          v12[2] = (8421376 - 13072 * v15 - 1319 * v16 + 16764144 * v18 + 16775897 * v19 + 14392 * v21) >> 16;
          v12[3] = (5983 * v17 + 540672 + 20127 * v18 + 2032 * v19) >> 15;
          v13 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      uint64_t v27 = (_WORD *)((char *)v27 + v24);
      v9 += v26;
      v7 += v25;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_a2vyITU709(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    uint64_t v10 = a1 >> 1;
    uint64_t v12 = (unsigned char *)*a6;
    uint64_t v11 = a6[1];
    uint64_t v13 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v10;
        int v16 = v12;
        do
        {
          *(_WORD *)(v11 + v14) = -1;
          unsigned int v17 = (28142 * (*(unsigned __int8 *)(v13 + v14) ^ 0xFFu) + 540672) >> 15;
          unsigned int v18 = (28142 * (*(unsigned __int8 *)(v13 + v14 + 1) ^ 0xFFu) + 540672) >> 15;
          unsigned char *v16 = 0x80;
          v16[1] = v17;
          v16[2] = 0x80;
          v16[3] = v18;
          v14 += 2;
          v16 += 4;
          --v15;
        }
        while (v15);
      }
      v11 += v9;
      v13 += v7;
      v12 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvfITU709(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v20 = *a5;
    uint64_t v21 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 3);
          int v15 = *(v10 - 4);
          int v16 = v10[2];
          int v17 = v10[1];
          int v18 = *v10;
          v10 += 8;
          unsigned char *v12 = (23436 * v14 + 6966 * v13 + 2366 * v15 + 0x4000) >> 15;
          v12[1] = (8421376 - 12629 * v14 + 16764587 * v17 + 16773463 * (v16 + v13) + ((v18 + v15) << 14)) >> 16;
          v12[2] = (23436 * v17 + 6966 * v16 + 2366 * v18 + 0x4000) >> 15;
          v12[3] = ((v13 << 14)
                                + 8421376
                                - 14881 * v14
                                - 1501 * v15
                                + (v16 << 14)
                                + 16762335 * v17
                                + 16775715 * v18) >> 16;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v20;
      ++v6;
      v9 += v21;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_2vuyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 1);
          int v15 = *v10;
          int v16 = v10[2];
          int v17 = v10[3];
          int v18 = v10[4];
          unsigned int v19 = (7371 * v13 + 540672 + 19024 * v14 + 1664 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = (8421376 - 10342 * v14 + 16766874 * v17 + 16773210 * v20 + 14350 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 13195 * v14 - 1153 * v15 + 16764021 * v17 + 16776063 * v18 + 14350 * v20) >> 16;
          v12[3] = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v12 += 4;
          v10 += 8;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_2vuyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 3);
          int v15 = *(v10 - 4);
          int v16 = v10[2];
          int v17 = v10[1];
          int v18 = *v10;
          v10 += 8;
          unsigned int v19 = (7371 * v13 + 540672 + 19024 * v14 + 1664 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = (8421376 - 10342 * v14 + 16766874 * v17 + 16773210 * v20 + 14350 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 13195 * v14 - 1153 * v15 + 16764021 * v17 + 16776063 * v18 + 14350 * v20) >> 16;
          v12[3] = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_2vuyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    uint64_t v8 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *v11;
          int v14 = v11[1];
          int v15 = v11[2];
          int v16 = v11[3];
          int v17 = v11[4];
          int v18 = v11[5];
          unsigned int v19 = (7371 * v13 + 540672 + 19024 * v14 + 1664 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = (8421376 - 10342 * v14 + 16766874 * v17 + 16773210 * v20 + 14350 * (v18 + v15)) >> 16;
          v12[1] = v19;
          v12[2] = (8421376 - 13195 * v14 - 1153 * v15 + 16764021 * v17 + 16776063 * v18 + 14350 * v20) >> 16;
          v12[3] = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v11 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v8 += v23;
      v7 += v22;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_2vuyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    uint64_t v11 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        int v13 = v10;
        int v14 = v11;
        do
        {
          unsigned int v15 = (28059 * (*v14 ^ 0xFFu) + 540672) >> 15;
          unsigned int v16 = 28059 * (v14[1] ^ 0xFF) + 540672;
          unsigned char *v13 = 0x80;
          v13[1] = v15;
          v13[2] = 0x80;
          v13[3] = v16 >> 15;
          v14 += 2;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_yuvsITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 3;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 1);
          int v15 = *v10;
          int v16 = v10[2];
          int v17 = v10[3];
          int v18 = v10[4];
          unsigned int v19 = (7371 * v13 + 540672 + 19024 * v14 + 1664 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = v19;
          v12[1] = (8421376 - 10342 * v14 + 16766874 * v17 + 16773210 * v20 + 14350 * (v18 + v15)) >> 16;
          v12[2] = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v12[3] = (8421376 - 13195 * v14 - 1153 * v15 + 16764021 * v17 + 16776063 * v18 + 14350 * v20) >> 16;
          v12 += 4;
          v10 += 8;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvsITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 3);
          int v15 = *(v10 - 4);
          int v16 = v10[2];
          int v17 = v10[1];
          int v18 = *v10;
          v10 += 8;
          unsigned int v19 = (7371 * v13 + 540672 + 19024 * v14 + 1664 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = v19;
          v12[1] = (8421376 - 10342 * v14 + 16766874 * v17 + 16773210 * v20 + 14350 * (v18 + v15)) >> 16;
          v12[2] = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v12[3] = (8421376 - 13195 * v14 - 1153 * v15 + 16764021 * v17 + 16776063 * v18 + 14350 * v20) >> 16;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v22;
      ++v6;
      v9 += v23;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_yuvsITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v22 = *a5;
    uint64_t v23 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    uint64_t v8 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = a1 >> 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *v11;
          int v14 = v11[1];
          int v15 = v11[2];
          int v16 = v11[3];
          int v17 = v11[4];
          int v18 = v11[5];
          unsigned int v19 = (7371 * v13 + 540672 + 19024 * v14 + 1664 * v15) >> 15;
          int v20 = v16 + v13;
          unsigned char *v12 = v19;
          v12[1] = (8421376 - 10342 * v14 + 16766874 * v17 + 16773210 * v20 + 14350 * (v18 + v15)) >> 16;
          v12[2] = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          v12[3] = (8421376 - 13195 * v14 - 1153 * v15 + 16764021 * v17 + 16776063 * v18 + 14350 * v20) >> 16;
          v11 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      v8 += v23;
      v7 += v22;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_yuvsITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a1 >> 1;
    uint64_t v10 = (unsigned char *)*a6;
    uint64_t v11 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v9 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v9;
        int v13 = v10;
        int v14 = v11;
        do
        {
          unsigned int v15 = 28059 * (v14[1] ^ 0xFF) + 540672;
          unsigned char *v13 = (28059 * (*v14 ^ 0xFFu) + 540672) >> 15;
          v13[1] = 0x80;
          v13[2] = v15 >> 15;
          v13[3] = 0x80;
          v14 += 2;
          v13 += 4;
          --v12;
        }
        while (v12);
      }
      v11 += v7;
      v10 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32ARGB_a2vyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v26 = *a5;
    uint64_t v27 = *a3;
    uint64_t v7 = a5[1];
    uint64_t v9 = (unsigned char *)*a6;
    uint64_t v8 = (unsigned char *)a6[1];
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = a1 >> 1;
    }
    uint64_t v25 = v10;
    uint64_t v11 = (unsigned char *)*a4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = v25;
        int v13 = v8;
        int v14 = v9;
        unsigned int v15 = v11;
        do
        {
          unsigned char *v13 = *v15;
          v13[1] = v15[4];
          int v16 = v15[1];
          int v17 = v15[2];
          int v18 = v15[3];
          int v19 = v15[5];
          int v20 = v15[6];
          int v21 = v15[7];
          unsigned int v22 = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          int v23 = v19 + v16;
          unsigned char *v14 = (8421376 - 10342 * v17 + 16766874 * v20 + 16773210 * v23 + 14350 * (v21 + v18)) >> 16;
          v14[1] = v22;
          v14[2] = (8421376 - 13195 * v17 - 1153 * v18 + 16764021 * v20 + 16776063 * v21 + 14350 * v23) >> 16;
          void v14[3] = (7371 * v19 + 540672 + 19024 * v20 + 1664 * v21) >> 15;
          v13 += 2;
          v15 += 8;
          v14 += 4;
          --v12;
        }
        while (v12);
      }
      v8 += v7;
      v11 += v27;
      v9 += v26;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_a2vyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v26 = *a5;
    uint64_t v27 = *a3;
    if (a1 >> 1 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = a1 >> 1;
    }
    uint64_t v25 = a5[1];
    uint64_t v8 = *a4 + 3;
    uint64_t v10 = (unsigned char *)*a6;
    uint64_t v9 = (unsigned char *)a6[1];
    do
    {
      if (a1 >= 2)
      {
        uint64_t v12 = (unsigned char *)v8;
        uint64_t v13 = v7;
        int v14 = v9;
        unsigned int v15 = v10;
        do
        {
          unsigned char *v14 = *v12;
          v14[1] = v12[4];
          int v16 = *(v12 - 1);
          int v17 = *(v12 - 2);
          int v18 = *(v12 - 3);
          int v19 = v12[3];
          int v20 = v12[2];
          int v21 = v12[1];
          unsigned int v22 = (7371 * v16 + 540672 + 19024 * v17 + 1664 * v18) >> 15;
          int v23 = v19 + v16;
          *unsigned int v15 = (8421376 - 10342 * v17 + 16766874 * v20 + 16773210 * v23 + 14350 * (v21 + v18)) >> 16;
          v15[1] = v22;
          v15[2] = (8421376 - 13195 * v17 - 1153 * v18 + 16764021 * v20 + 16776063 * v21 + 14350 * v23) >> 16;
          _OWORD v15[3] = (7371 * v19 + 540672 + 19024 * v20 + 1664 * v21) >> 15;
          v15 += 4;
          v12 += 8;
          v14 += 2;
          --v13;
        }
        while (v13);
      }
      v9 += v25;
      v10 += v26;
      ++v6;
      v8 += v27;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_24RGB_a2vyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 **a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v25 = *a5;
    uint64_t v26 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    uint64_t v27 = (_WORD *)a6[1];
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v23 = v8;
    uint64_t v24 = a5[1];
    uint64_t v9 = *a4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = v23;
        uint64_t v11 = v27;
        uint64_t v12 = v7;
        uint64_t v13 = v9;
        do
        {
          *v11++ = -1;
          int v14 = *v13;
          int v15 = v13[1];
          int v16 = v13[2];
          int v17 = v13[3];
          int v18 = v13[4];
          int v19 = v13[5];
          unsigned int v20 = (7371 * v14 + 540672 + 19024 * v15 + 1664 * v16) >> 15;
          int v21 = v17 + v14;
          unsigned char *v12 = (8421376 - 10342 * v15 + 16766874 * v18 + 16773210 * v21 + 14350 * (v19 + v16)) >> 16;
          v12[1] = v20;
          v12[2] = (8421376 - 13195 * v15 - 1153 * v16 + 16764021 * v18 + 16776063 * v19 + 14350 * v21) >> 16;
          v12[3] = (7371 * v17 + 540672 + 19024 * v18 + 1664 * v19) >> 15;
          v13 += 6;
          v12 += 4;
          --v10;
        }
        while (v10);
      }
      uint64_t v27 = (_WORD *)((char *)v27 + v24);
      v9 += v26;
      v7 += v25;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_8GRAYSCALE_a2vyITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a3;
    uint64_t v8 = *a5;
    uint64_t v9 = a5[1];
    uint64_t v10 = a1 >> 1;
    uint64_t v12 = (unsigned char *)*a6;
    uint64_t v11 = a6[1];
    uint64_t v13 = *a4;
    if (a1 >> 1 <= 1) {
      uint64_t v10 = 1;
    }
    do
    {
      if (a1 >= 2)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v10;
        int v16 = v12;
        do
        {
          *(_WORD *)(v11 + v14) = -1;
          unsigned int v17 = (28059 * (*(unsigned __int8 *)(v13 + v14) ^ 0xFFu) + 540672) >> 15;
          unsigned int v18 = (28059 * (*(unsigned __int8 *)(v13 + v14 + 1) ^ 0xFFu) + 540672) >> 15;
          unsigned char *v16 = 0x80;
          v16[1] = v17;
          v16[2] = 0x80;
          v16[3] = v18;
          v14 += 2;
          v16 += 4;
          --v15;
        }
        while (v15);
      }
      v11 += v9;
      v13 += v7;
      v12 += v8;
      ++v6;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_32BGRA_yuvfITU2020(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t *a5, void *a6)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v20 = *a5;
    uint64_t v21 = *a3;
    uint64_t v7 = (unsigned char *)*a6;
    if (a1 >> 1 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = a1 >> 1;
    }
    uint64_t v9 = *a4 + 4;
    do
    {
      if (a1 >= 2)
      {
        uint64_t v10 = (unsigned __int8 *)v9;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        do
        {
          int v13 = *(v10 - 2);
          int v14 = *(v10 - 3);
          int v15 = *(v10 - 4);
          int v16 = v10[2];
          int v17 = v10[1];
          int v18 = *v10;
          v10 += 8;
          unsigned char *v12 = (22217 * v14 + 8608 * v13 + 1943 * v15 + 0x4000) >> 15;
          v12[1] = (8421376 - 11808 * v14 + 16765408 * v17 + 16772642 * (v16 + v13) + ((v18 + v15) << 14)) >> 16;
          v12[2] = (22217 * v17 + 8608 * v16 + 1943 * v18 + 0x4000) >> 15;
          v12[3] = ((v13 << 14)
                                + 8421376
                                - 15065 * v14
                                - 1317 * v15
                                + (v16 << 14)
                                + 16762151 * v17
                                + 16775899 * v18) >> 16;
          v12 += 4;
          --v11;
        }
        while (v11);
      }
      v7 += v20;
      ++v6;
      v9 += v21;
    }
    while (v6 != a2);
  }
  return 0;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5)
{
  uint64_t v13 = *(void *)(result + 28);
  unint64_t v14 = 2 * *result;
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (2 * v16 != 2 * v15)
  {
    unint64_t v17 = 0;
    size_t v18 = *(void *)(result + 20);
    uint64_t v19 = *(void *)(result + 36);
    uint64_t v20 = *(void *)(result + 44) + 2 * v15;
    unint64_t v21 = 2 * v16 - 2 * v15;
    uint64_t v22 = *((void *)result + 14);
    uint64_t v23 = (uint64_t *)*((void *)result + 16);
    uint64_t v24 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v14);
    uint64_t v25 = (float32x2_t *)*((void *)result + 19);
    uint64_t v26 = (uint64_t *)*((void *)result + 7);
    uint64_t v27 = (uint64_t *)*((void *)result + 8);
    uint64_t v28 = (uint64_t *)*((void *)result + 17);
    uint64_t v29 = *v27;
    uint64_t v30 = v27[1];
    uint64_t v347 = v27[2];
    uint64_t v350 = v26[2];
    uint64_t v31 = *v28;
    uint64_t v32 = v28[1];
    uint64_t v348 = v28[2];
    uint64_t v349 = v23[2];
    unsigned int v33 = v25[17].u16[2];
    unsigned int v34 = v25[17].u16[3];
    float v35 = (float)v33;
    *(short float *)v12.i16 = (short float)v33;
    unsigned int v36 = v25[18].u16[0];
    LODWORD(a3) = v25[5].i32[1];
    float v401 = *(float *)&a3;
    unsigned int v39 = v25[18].u16[1];
    float v40 = (float)v34;
    short float v41 = (short float)v34;
    float v42 = (float)v36;
    unsigned int v44 = v25[18].u16[2];
    *(short float *)&a3 = (short float)v36;
    unsigned int v45 = v25[18].u16[3];
    float v352 = (float)v39;
    *(short float *)v6.i16 = (short float)v39;
    unsigned int v46 = v25[19].u16[0];
    _S26 = v25[4].i32[1];
    _S29 = v25[5].i32[0];
    float v389 = (float)v44;
    _S25 = v25[9].i32[0];
    float v400 = v25[9].f32[1];
    *(short float *)v7.i16 = (short float)v44;
    uint64_t v50 = (char *)&v25[2068] + 4;
    uint64_t v51 = (char *)(v350 + v347 * v20 + v19);
    CFDictionaryRef v52 = (char *)(v349 + v348 * v24 + v22);
    float v53 = 8191.0 / (float)v25[16].u32[0];
    _S30 = v53 * v25->f32[0];
    *(float *)&a5 = (float)v45;
    float v403 = (float)v45;
    *(short float *)&a5 = (short float)v45;
    if (v24 >= 0) {
      uint64_t v55 = v24;
    }
    else {
      uint64_t v55 = v24 + 1;
    }
    uint64_t v56 = *v23;
    uint64_t v57 = v23[1] + v32 * (v55 >> 1);
    CFArrayRef v58 = (char *)&v25[20] + 4;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(v12, 0);
    v37.i32[1] = v25[1].i32[0];
    v37.i32[0] = v25[3].i32[1];
    *(float32x2_t *)v9.f32 = vmul_n_f32(v37, v53);
    *(double *)&v60.i64[1] = a3;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    *(float32x2_t *)v5.f32 = vmul_n_f32(v25[2], v53);
    float16x8_t v62 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v63 = vmulq_n_f16(v61, -v41);
    float16x8_t v64 = vmulq_n_f16(v62, -v41);
    __asm { FMOV            V1.2S, #0.25 }
    v38.i32[1] = v25[7].i32[1];
    v38.i32[0] = v25[6].i32[0];
    *(float32x2_t *)v60.f32 = vmul_f32(v38, _D1);
    uint64_t v399 = v60.i64[0];
    int32x4_t v398 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v60), 0);
    v10.i32[1] = v25[8].i32[0];
    v10.i32[0] = v25[6].i32[1];
    *(float32x2_t *)v11.f32 = vmul_f32(*(float32x2_t *)v10.f32, _D1);
    float16x8_t v70 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    v43.i32[1] = v25[8].i32[1];
    v43.i32[0] = v25[7].i32[0];
    *(float32x2_t *)v10.f32 = vmul_f32(v43, _D1);
    int16x8_t v396 = vdupq_lane_s16(*(int16x4_t *)&a3, 0);
    int32x4_t v397 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v386 = (float16x8_t)vdupq_lane_s16(v7, 0);
    float16x8_t v387 = (float16x8_t)vdupq_lane_s16(v6, 0);
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)&a5, 0);
    *(short float *)v8.i16 = (short float)v46;
    float16x8_t v384 = (float16x8_t)vdupq_lane_s16(v8, 0);
    uint64_t v72 = (unsigned char *)(v57 + v22);
    uint64_t result = (unsigned __int8 *)(v56 + v31 * v24 + v22);
    if (v20 >= 0) {
      uint64_t v73 = v20;
    }
    else {
      uint64_t v73 = v20 + 1;
    }
    uint64_t v75 = *v26;
    uint64_t v74 = v26[1];
    uint64_t v76 = (char *)&v25[4116] + 4;
    unint64_t v77 = (unsigned char *)(v74 + v30 * (v73 >> 1) + v19);
    uint64_t v78 = (int8x8_t *)(v75 + v29 * v20 + v19);
    _D0.i32[0] = v25[13].i32[1];
    __asm { FCVT            H9, S30 }
    short float v369 = _H9;
    float v395 = v25[4].f32[1];
    __asm { FCVT            H9, S26 }
    float16x8_t v81 = v64;
    float v394 = v25[5].f32[0];
    __asm { FCVT            H8, S29 }
    short float v368 = _H8;
    _S29 = v25[5].i32[1];
    __asm { FCVT            H8, S29 }
    short float v367 = _H8;
    float v373 = *(float *)_D0.i32;
    __asm { FCVT            H0, S0 }
    float v372 = v25[14].f32[0];
    __asm { FCVT            H1, S1 }
    float v371 = v25[14].f32[1];
    __asm { FCVT            H3, S3 }
    float v370 = v25[15].f32[0];
    __asm { FCVT            H5, S5 }
    float v393 = v25[9].f32[0];
    __asm { FCVT            H8, S25 }
    short float v362 = _H8;
    _S25 = v25[9].i32[1];
    __asm { FCVT            H8, S25 }
    short float v361 = _H8;
    float16x8_t v92 = (float16x8_t)v397;
    float v383 = v25[10].f32[0];
    __asm { FCVT            H8, S17 }
    short float v360 = _H8;
    float v382 = v25[10].f32[1];
    __asm { FCVT            H8, S18 }
    short float v359 = _H8;
    float v381 = v25[11].f32[0];
    __asm { FCVT            H12, S12 }
    float v379 = v25[11].f32[1];
    __asm { FCVT            H13, S13 }
    float v377 = v25[12].f32[0];
    __asm { FCVT            H8, S16 }
    short float v357 = _H8;
    float v375 = v25[12].f32[1];
    __asm { FCVT            H6, S6 }
    float v374 = v25[13].f32[0];
    __asm { FCVT            H7, S7 }
    float v391 = v5.f32[0];
    float v392 = v9.f32[0];
    float16x8_t v100 = (float16x8_t)v396;
    float v354 = v9.f32[1];
    float16x8_t v101 = (float16x8_t)v398;
    uint64_t v102 = v10.i64[0];
    float16x8_t v103 = 0uLL;
    v104.i64[0] = 0x9000900090009000;
    v104.i64[1] = 0x9000900090009000;
    float16x8_t v385 = (float16x8_t)v71;
    short float v365 = _H1;
    short float v366 = *(short float *)_D0.i16;
    short float v364 = _H3;
    short float v406 = _H13;
    float v402 = v40;
    float16x8_t v390 = v62;
    float16x8_t v405 = v63;
    float16x8_t v388 = v70;
    float16x8_t v404 = v61;
    float v380 = v35;
    float16x8_t v378 = v59;
    float v376 = (float)v46;
    short float v363 = _H5;
    short float v358 = _H12;
    short float v355 = _H7;
    short float v356 = _H6;
    float16x8_t v353 = v81;
    float v351 = v42;
    do
    {
      long long v105 = (char *)v78 + v29;
      long long v106 = &result[v31];
      if ((int)v18 < 8)
      {
        size_t v214 = 0;
        long long v213 = v72;
        int v109 = (int8x8_t *)&result[v31];
        long long v212 = v77;
        int v108 = (int8x8_t *)((char *)v78 + v29);
      }
      else
      {
        uint64_t v107 = 0;
        int v108 = (int8x8_t *)((char *)v78 + v29);
        int v109 = (int8x8_t *)&result[v31];
        do
        {
          int8x8_t v110 = *(int8x8_t *)&v77[v107];
          *(int8x8_t *)v111.i8 = vzip1_s8(v110, *(int8x8_t *)v103.i8);
          v111.u64[1] = (unint64_t)vzip2_s8(v110, *(int8x8_t *)v103.i8);
          float16x8_t v112 = vcvtq_f16_u16(v111);
          int8x16_t v113 = (int8x16_t)vmlaq_f16(v63, v61, v112);
          int8x16_t v114 = (int8x16_t)vmlaq_f16(v81, v62, v112);
          v112.i64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
          *(int16x4_t *)v115.i8 = vuzp1_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8);
          *(int16x4_t *)v112.i8 = vuzp2_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8);
          v112.i64[1] = v112.i64[0];
          float16x8_t v116 = (float16x8_t)vzip1q_s16((int16x8_t)v112, (int16x8_t)v112);
          v115.i64[1] = v112.i64[0];
          float16x8_t v117 = (float16x8_t)vzip1q_s16(v115, v115);
          v112.i64[0] = vextq_s8(v114, v114, 8uLL).u64[0];
          *(float16x4_t *)v112.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v112.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v112.i8));
          v112.i64[1] = v112.i64[0];
          int8x8_t v118 = *v78++;
          *(int8x8_t *)v115.i8 = vzip1_s8(v118, *(int8x8_t *)v103.i8);
          v115.u64[1] = (unint64_t)vzip2_s8(v118, *(int8x8_t *)v103.i8);
          float16x8_t v119 = (float16x8_t)vzip1q_s16((int16x8_t)v112, (int16x8_t)v112);
          float16x8_t v120 = vcvtq_f16_u16((uint16x8_t)v115);
          int8x8_t v121 = *v108++;
          *(int8x8_t *)v115.i8 = vzip1_s8(v121, *(int8x8_t *)v103.i8);
          v115.u64[1] = (unint64_t)vzip2_s8(v121, *(int8x8_t *)v103.i8);
          float16x8_t v122 = vsubq_f16(v120, v59);
          float16x8_t v123 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v115), v59);
          float16x8_t v124 = vmlaq_n_f16(v116, v122, v369);
          float16x8_t v125 = vmlaq_n_f16(v116, v123, v369);
          float16x8_t v126 = vmlaq_n_f16(v119, v122, v369);
          float16x8_t v127 = vmlaq_n_f16(v119, v123, v369);
          float16x8_t v128 = vmlaq_n_f16(v117, v122, v369);
          float16x8_t v129 = vmlaq_n_f16(v117, v123, v369);
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, v103), v104));
          float16x8_t v131 = (float16x8_t)vmovl_high_u16(v130);
          *(void *)&long long v132 = v131.u32[2];
          *((void *)&v132 + 1) = v131.u32[3];
          long long v133 = v132;
          v134.i64[0] = 0x9000900090009000;
          v134.i64[1] = 0x9000900090009000;
          *(void *)&long long v132 = v131.u32[0];
          *((void *)&v132 + 1) = v131.u32[1];
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v130.i8);
          v131.i16[0] = *(_WORD *)&v58[2 * v135.u32[0]];
          v131.i16[1] = *(_WORD *)&v58[2 * v135.u32[1]];
          v131.i16[2] = *(_WORD *)&v58[2 * v135.u32[2]];
          v131.i16[3] = *(_WORD *)&v58[2 * v135.u32[3]];
          v131.i16[4] = *(_WORD *)&v58[2 * v132];
          v131.i16[5] = *(_WORD *)&v58[2 * *((void *)&v132 + 1)];
          v131.i16[6] = *(_WORD *)&v58[2 * v133];
          v131.i16[7] = *(_WORD *)&v58[2 * *((void *)&v133 + 1)];
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, v103), v134));
          float16x8_t v137 = (float16x8_t)vmovl_high_u16(v136);
          *(void *)&long long v132 = v137.u32[2];
          *((void *)&v132 + 1) = v137.u32[3];
          long long v138 = v132;
          *(void *)&long long v132 = v137.u32[0];
          *((void *)&v132 + 1) = v137.u32[1];
          uint32x4_t v139 = vmovl_u16(*(uint16x4_t *)v136.i8);
          v137.i16[0] = *(_WORD *)&v58[2 * v139.u32[0]];
          v137.i16[1] = *(_WORD *)&v58[2 * v139.u32[1]];
          v137.i16[2] = *(_WORD *)&v58[2 * v139.u32[2]];
          v137.i16[3] = *(_WORD *)&v58[2 * v139.u32[3]];
          v137.i16[4] = *(_WORD *)&v58[2 * v132];
          v137.i16[5] = *(_WORD *)&v58[2 * *((void *)&v132 + 1)];
          v137.i16[6] = *(_WORD *)&v58[2 * v138];
          v137.i16[7] = *(_WORD *)&v58[2 * *((void *)&v138 + 1)];
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v134));
          uint32x4_t v141 = vmovl_high_u16(v140);
          uint32x4_t v142 = vmovl_u16(*(uint16x4_t *)v140.i8);
          v143.i16[0] = *(_WORD *)&v58[2 * v142.u32[0]];
          v143.i16[1] = *(_WORD *)&v58[2 * v142.u32[1]];
          v143.i16[2] = *(_WORD *)&v58[2 * v142.u32[2]];
          v143.i16[3] = *(_WORD *)&v58[2 * v142.u32[3]];
          v143.i16[4] = *(_WORD *)&v58[2 * v141.u32[0]];
          v143.i16[5] = *(_WORD *)&v58[2 * v141.u32[1]];
          v143.i16[6] = *(_WORD *)&v58[2 * v141.u32[2]];
          v143.i16[7] = *(_WORD *)&v58[2 * v141.u32[3]];
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v125, (float16x8_t)0), v134));
          float16x8_t v145 = (float16x8_t)vmovl_high_u16(v144);
          *(void *)&long long v132 = v145.u32[2];
          *((void *)&v132 + 1) = v145.u32[3];
          long long v146 = v132;
          *(void *)&long long v132 = v145.u32[0];
          *((void *)&v132 + 1) = v145.u32[1];
          uint32x4_t v147 = vmovl_u16(*(uint16x4_t *)v144.i8);
          v145.i16[0] = *(_WORD *)&v58[2 * v147.u32[0]];
          v145.i16[1] = *(_WORD *)&v58[2 * v147.u32[1]];
          v145.i16[2] = *(_WORD *)&v58[2 * v147.u32[2]];
          v145.i16[3] = *(_WORD *)&v58[2 * v147.u32[3]];
          v145.i16[4] = *(_WORD *)&v58[2 * v132];
          v145.i16[5] = *(_WORD *)&v58[2 * *((void *)&v132 + 1)];
          v145.i16[6] = *(_WORD *)&v58[2 * v146];
          v145.i16[7] = *(_WORD *)&v58[2 * *((void *)&v146 + 1)];
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, (float16x8_t)0), v134));
          uint32x4_t v149 = vmovl_high_u16(v148);
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v148.i8);
          v127.i16[0] = *(_WORD *)&v58[2 * v150.u32[0]];
          v127.i16[1] = *(_WORD *)&v58[2 * v150.u32[1]];
          v127.i16[2] = *(_WORD *)&v58[2 * v150.u32[2]];
          v127.i16[3] = *(_WORD *)&v58[2 * v150.u32[3]];
          v127.i16[4] = *(_WORD *)&v58[2 * v149.u32[0]];
          v127.i16[5] = *(_WORD *)&v58[2 * v149.u32[1]];
          v127.i16[6] = *(_WORD *)&v58[2 * v149.u32[2]];
          v127.i16[7] = *(_WORD *)&v58[2 * v149.u32[3]];
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v134));
          float16x8_t v152 = (float16x8_t)vmovl_high_u16(v151);
          *(void *)&long long v132 = v152.u32[2];
          *((void *)&v132 + 1) = v152.u32[3];
          long long v153 = v132;
          *(void *)&long long v132 = v152.u32[0];
          *((void *)&v132 + 1) = v152.u32[1];
          uint32x4_t v154 = vmovl_u16(*(uint16x4_t *)v151.i8);
          v152.i16[0] = *(_WORD *)&v58[2 * v154.u32[0]];
          v152.i16[1] = *(_WORD *)&v58[2 * v154.u32[1]];
          v152.i16[2] = *(_WORD *)&v58[2 * v154.u32[2]];
          v152.i16[3] = *(_WORD *)&v58[2 * v154.u32[3]];
          v152.i16[4] = *(_WORD *)&v58[2 * v132];
          v152.i16[5] = *(_WORD *)&v58[2 * *((void *)&v132 + 1)];
          v152.i16[6] = *(_WORD *)&v58[2 * v153];
          v152.i16[7] = *(_WORD *)&v58[2 * *((void *)&v153 + 1)];
          uint16x8_t v155 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v131, v366), v137, v365), v143, v364), vmaxq_f16(vmaxq_f16(v131, v137), v143), v363), (float16x8_t)0), v134));
          uint32x4_t v156 = vmovl_high_u16(v155);
          uint32x4_t v157 = vmovl_u16(*(uint16x4_t *)v155.i8);
          v158.i16[0] = *(_WORD *)&v50[2 * v157.u32[0]];
          v158.i16[1] = *(_WORD *)&v50[2 * v157.u32[1]];
          v158.i16[2] = *(_WORD *)&v50[2 * v157.u32[2]];
          v158.i16[3] = *(_WORD *)&v50[2 * v157.u32[3]];
          v158.i16[4] = *(_WORD *)&v50[2 * v156.u32[0]];
          v158.i16[5] = *(_WORD *)&v50[2 * v156.u32[1]];
          v158.i16[6] = *(_WORD *)&v50[2 * v156.u32[2]];
          v158.i16[7] = *(_WORD *)&v50[2 * v156.u32[3]];
          float16x8_t v159 = vmulq_f16(v131, v158);
          float16x8_t v160 = vmulq_f16(v137, v158);
          float16x8_t v161 = vmulq_f16(v143, v158);
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v145, v366), v127, v365), v152, v364), vmaxq_f16(vmaxq_f16(v145, v127), v152), v363), (float16x8_t)0), v134));
          uint32x4_t v163 = vmovl_high_u16(v162);
          float16x8_t v164 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v162.i8);
          v164.i16[0] = *(_WORD *)&v50[2 * v164.u32[0]];
          v164.i16[1] = *(_WORD *)&v50[2 * v164.u32[1]];
          v164.i16[2] = *(_WORD *)&v50[2 * v164.u32[2]];
          v164.i16[3] = *(_WORD *)&v50[2 * v164.u32[3]];
          v164.i16[4] = *(_WORD *)&v50[2 * v163.u32[0]];
          v164.i16[5] = *(_WORD *)&v50[2 * v163.u32[1]];
          v164.i16[6] = *(_WORD *)&v50[2 * v163.u32[2]];
          v164.i16[7] = *(_WORD *)&v50[2 * v163.u32[3]];
          float16x8_t v165 = vmulq_f16(v145, v164);
          float16x8_t v166 = vmulq_f16(v127, v164);
          float16x8_t v167 = vmulq_f16(v152, v164);
          float16x8_t v168 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v159, v362), v160, v361), v161, v360);
          float16x8_t v169 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v159, v359), v160, v358), v161, _H13);
          float16x8_t v170 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v161, v355), v160, v356), v159, v357);
          float16x8_t v171 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v165, v362), v166, v361), v167, v360);
          float16x8_t v172 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v165, v359), v166, v358), v167, v406);
          float16x8_t v173 = vmlaq_n_f16(vmulq_n_f16(v167, v355), v166, v356);
          uint16x8_t v174 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v168, (float16x8_t)0), v134));
          float16x8_t v175 = (float16x8_t)vmovl_high_u16(v174);
          *(void *)&long long v132 = v175.u32[2];
          *((void *)&v132 + 1) = v175.u32[3];
          long long v176 = v132;
          *(void *)&long long v132 = v175.u32[0];
          *((void *)&v132 + 1) = v175.u32[1];
          uint32x4_t v177 = vmovl_u16(*(uint16x4_t *)v174.i8);
          v175.i16[7] = (unint64_t)v177.u32[1] >> 48;
          v175.i16[0] = *(_WORD *)&v76[2 * v177.u32[0]];
          v175.i16[1] = *(_WORD *)&v76[2 * v177.u32[1]];
          v175.i16[2] = *(_WORD *)&v76[2 * v177.u32[2]];
          v175.i16[3] = *(_WORD *)&v76[2 * v177.u32[3]];
          v175.i16[4] = *(_WORD *)&v76[2 * v132];
          v175.i16[5] = *(_WORD *)&v76[2 * *((void *)&v132 + 1)];
          v175.i16[6] = *(_WORD *)&v76[2 * v176];
          v178 = (__int16 *)&v76[2 * *((void *)&v176 + 1)];
          uint16x8_t v179 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v169, (float16x8_t)0), v134));
          float16x8_t v180 = (float16x8_t)vmovl_high_u16(v179);
          *(void *)&long long v132 = v180.u32[2];
          *((void *)&v132 + 1) = v180.u32[3];
          long long v181 = v132;
          *(void *)&long long v132 = v180.u32[0];
          *((void *)&v132 + 1) = v180.u32[1];
          uint32x4_t v182 = vmovl_u16(*(uint16x4_t *)v179.i8);
          v180.i16[7] = (unint64_t)v182.u32[1] >> 48;
          v180.i16[0] = *(_WORD *)&v76[2 * v182.u32[0]];
          v180.i16[1] = *(_WORD *)&v76[2 * v182.u32[1]];
          uint64_t v183 = *((void *)&v181 + 1);
          v180.i16[2] = *(_WORD *)&v76[2 * v182.u32[2]];
          v180.i16[3] = *(_WORD *)&v76[2 * v182.u32[3]];
          v180.i16[4] = *(_WORD *)&v76[2 * v132];
          v180.i16[5] = *(_WORD *)&v76[2 * *((void *)&v132 + 1)];
          v180.i16[6] = *(_WORD *)&v76[2 * v181];
          float16x8_t v184 = (float16x8_t)vuzp1q_s16((int16x8_t)v175, (int16x8_t)v180);
          v175.i16[7] = *v178;
          v180.i16[7] = *(_WORD *)&v76[2 * v183];
          _H13 = v406;
          uint16x8_t v185 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v170, (float16x8_t)0), v134));
          int16x8_t v186 = (int16x8_t)vmovl_high_u16(v185);
          *(void *)&long long v132 = v186.u32[2];
          *((void *)&v132 + 1) = v186.u32[3];
          long long v187 = v132;
          *(void *)&long long v132 = v186.u32[0];
          *((void *)&v132 + 1) = v186.u32[1];
          uint32x4_t v188 = vmovl_u16(*(uint16x4_t *)v185.i8);
          v186.i16[0] = *(_WORD *)&v76[2 * v188.u32[0]];
          v186.i16[1] = *(_WORD *)&v76[2 * v188.u32[1]];
          v186.i16[2] = *(_WORD *)&v76[2 * v188.u32[2]];
          v186.i16[3] = *(_WORD *)&v76[2 * v188.u32[3]];
          v186.i16[4] = *(_WORD *)&v76[2 * v132];
          v186.i16[5] = *(_WORD *)&v76[2 * *((void *)&v132 + 1)];
          v186.i16[6] = *(_WORD *)&v76[2 * v187];
          uint64_t v189 = (__int16 *)&v76[2 * *((void *)&v187 + 1)];
          float16x8_t v190 = (float16x8_t)v186;
          v190.i16[7] = *v189;
          uint16x8_t v191 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v171, (float16x8_t)0), v134));
          uint32x4_t v192 = vmovl_high_u16(v191);
          float16x8_t v193 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v191.i8);
          *(void *)&long long v132 = v192.u32[2];
          *((void *)&v132 + 1) = v192.u32[3];
          long long v194 = v132;
          *(void *)&long long v132 = v192.u32[0];
          *((void *)&v132 + 1) = v192.u32[1];
          long long v195 = v132;
          *((void *)&v132 + 1) = v193.u32[3];
          v193.i16[7] = (unint64_t)v193.u32[3] >> 48;
          v193.i16[0] = *(_WORD *)&v76[2 * v193.u32[0]];
          v193.i16[1] = *(_WORD *)&v76[2 * v193.u32[1]];
          v193.i16[2] = *(_WORD *)&v76[2 * v193.u32[2]];
          v193.i16[3] = *(_WORD *)&v76[2 * *((void *)&v132 + 1)];
          v193.i16[4] = *(_WORD *)&v76[2 * v195];
          v193.i16[5] = *(_WORD *)&v76[2 * *((void *)&v195 + 1)];
          v193.i16[6] = *(_WORD *)&v76[2 * v194];
          uint64_t v196 = (__int16 *)&v76[2 * *((void *)&v194 + 1)];
          uint16x8_t v197 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v172, (float16x8_t)0), v134));
          uint32x4_t v198 = vmovl_high_u16(v197);
          float16x8_t v199 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v197.i8);
          *(void *)&long long v132 = v198.u32[2];
          *((void *)&v132 + 1) = v198.u32[3];
          long long v200 = v132;
          *(void *)&long long v132 = v198.u32[0];
          *((void *)&v132 + 1) = v198.u32[1];
          long long v201 = v132;
          *((void *)&v132 + 1) = v199.u32[3];
          v199.i16[7] = (unint64_t)v199.u32[3] >> 48;
          v199.i16[0] = *(_WORD *)&v76[2 * v199.u32[0]];
          v199.i16[1] = *(_WORD *)&v76[2 * v199.u32[1]];
          v199.i16[2] = *(_WORD *)&v76[2 * v199.u32[2]];
          v199.i16[3] = *(_WORD *)&v76[2 * *((void *)&v132 + 1)];
          v199.i16[4] = *(_WORD *)&v76[2 * v201];
          v199.i16[5] = *(_WORD *)&v76[2 * *((void *)&v201 + 1)];
          v199.i16[6] = *(_WORD *)&v76[2 * v200];
          float16x8_t v202 = (float16x8_t)vuzp1q_s16((int16x8_t)v193, (int16x8_t)v199);
          v193.i16[7] = *v196;
          v199.i16[7] = *(_WORD *)&v76[2 * *((void *)&v200 + 1)];
          float16x8_t v61 = v404;
          float16x8_t v203 = vminq_f16(vmaxq_f16(vmlaq_n_f16(v173, v165, v357), (float16x8_t)0), v134);
          float16x8_t v81 = v353;
          uint16x8_t v204 = vcvtq_u16_f16(v203);
          int16x8_t v205 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v204.i8);
          uint32x4_t v206 = vmovl_high_u16(v204);
          *(void *)&long long v132 = v206.u32[2];
          *((void *)&v132 + 1) = v206.u32[3];
          long long v207 = v132;
          *((void *)&v132 + 1) = v205.u32[3];
          v205.i16[7] = (unint64_t)v205.u32[3] >> 48;
          v205.i16[0] = *(_WORD *)&v76[2 * v205.u32[0]];
          v205.i16[1] = *(_WORD *)&v76[2 * v205.u32[1]];
          v205.i16[2] = *(_WORD *)&v76[2 * v205.u32[2]];
          v205.i16[3] = *(_WORD *)&v76[2 * *((void *)&v132 + 1)];
          v205.i16[4] = *(_WORD *)&v76[2 * v206.u32[0]];
          v205.i16[5] = *(_WORD *)&v76[2 * v206.u32[1]];
          v205.i16[6] = *(_WORD *)&v76[2 * v207];
          float16x8_t v208 = (float16x8_t)v205;
          v208.i16[7] = *(_WORD *)&v76[2 * *((void *)&v207 + 1)];
          *(int8x8_t *)uint64_t result = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v100, v175, _H9), v180, v368), v190, v367), v100), v386)));
          result += 8;
          float16x8_t v63 = v405;
          *v109++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v100, v193, _H9), v199, v368), v208, v367), v100), v386)));
          int16x8_t v209 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v184, (float16x8_t)vuzp2q_s16((int16x8_t)v175, (int16x8_t)v180)), v202), (float16x8_t)vuzp2q_s16((int16x8_t)v193, (int16x8_t)v199));
          float16x8_t v210 = (float16x8_t)vtrn2q_s16((int16x8_t)v190, (int16x8_t)v190);
          v104.i64[0] = 0x9000900090009000;
          v104.i64[1] = 0x9000900090009000;
          float16x8_t v211 = (float16x8_t)vtrn2q_s16((int16x8_t)v208, (int16x8_t)v208);
          float16x8_t v103 = 0uLL;
          _D0 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v387, v101, (float16x8_t)vzip1q_s16(v209, v209)), v70, (float16x8_t)vzip2q_s16(v209, v209)), v92, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v186, v186), v210), (float16x8_t)vtrn1q_s16(v205, v205)), v211)), v385), v384)));
          *(int8x8_t *)&v72[v107] = _D0;
          v107 += 8;
        }
        while ((int)v107 < (int)v18 - 7);
        long long v212 = &v77[v107];
        long long v213 = &v72[v107];
        size_t v214 = v18 & 0xFFFFFFF8;
        float v40 = v402;
        float v42 = v351;
      }
      for (; v18 > v214; float16x8_t v92 = (float16x8_t)v397)
      {
        _D0.i8[0] = v212[1];
        float v215 = (float)_D0.u32[0] - v40;
        unsigned int v216 = LODWORD(v354);
        float v217 = v354 * v215;
        LOBYTE(v216) = v78->i8[0];
        float v218 = _S30 * (float)((float)v216 - v35);
        float v219 = (float)(v354 * v215) + v218;
        float v220 = 8191.0;
        if (v219 <= 8191.0)
        {
          float v220 = (float)(v354 * v215) + v218;
          if (v219 < 0.0) {
            float v220 = 0.0;
          }
        }
        LOBYTE(v219) = *v212;
        float v221 = (float)LODWORD(v219) - v40;
        float v222 = (float)(v5.f32[1] * v215) + (float)(v221 * v391);
        float v223 = 8191.0;
        if ((float)(v218 + v222) <= 8191.0)
        {
          float v223 = v218 + v222;
          if ((float)(v218 + v222) < 0.0) {
            float v223 = 0.0;
          }
        }
        float v224 = v392 * v221;
        float v225 = (float)(v392 * v221) + v218;
        float v226 = 8191.0;
        if (v225 <= 8191.0)
        {
          float v226 = v225;
          if (v225 < 0.0) {
            float v226 = 0.0;
          }
        }
        LOBYTE(v225) = v78->i8[1];
        float v227 = _S30 * (float)((float)LODWORD(v225) - v35);
        float v228 = 8191.0;
        if ((float)(v217 + v227) <= 8191.0)
        {
          float v228 = v217 + v227;
          if ((float)(v217 + v227) < 0.0) {
            float v228 = 0.0;
          }
        }
        float v229 = 8191.0;
        if ((float)(v222 + v227) <= 8191.0)
        {
          float v229 = v222 + v227;
          if ((float)(v222 + v227) < 0.0) {
            float v229 = 0.0;
          }
        }
        float v230 = v224 + v227;
        float v231 = 8191.0;
        if (v230 <= 8191.0)
        {
          float v231 = v230;
          if (v230 < 0.0) {
            float v231 = 0.0;
          }
        }
        LOBYTE(v230) = v108->i8[0];
        float v232 = _S30 * (float)((float)LODWORD(v230) - v35);
        float v233 = 8191.0;
        if ((float)(v217 + v232) <= 8191.0)
        {
          float v233 = v217 + v232;
          if ((float)(v217 + v232) < 0.0) {
            float v233 = 0.0;
          }
        }
        float v234 = 8191.0;
        if ((float)(v222 + v232) <= 8191.0)
        {
          float v234 = v222 + v232;
          if ((float)(v222 + v232) < 0.0) {
            float v234 = 0.0;
          }
        }
        float v235 = v224 + v232;
        BOOL v236 = (float)(v224 + v232) <= 8191.0;
        float v237 = 8191.0;
        if (v236)
        {
          float v237 = v235;
          if (v235 < 0.0) {
            float v237 = 0.0;
          }
        }
        LOBYTE(v40) = v108->i8[1];
        float v238 = _S30 * (float)((float)LODWORD(v40) - v35);
        float v239 = v217 + v238;
        BOOL v236 = (float)(v217 + v238) <= 8191.0;
        float v240 = 8191.0;
        if (v236)
        {
          float v240 = v239;
          if (v239 < 0.0) {
            float v240 = 0.0;
          }
        }
        float v241 = v222 + v238;
        BOOL v236 = (float)(v222 + v238) <= 8191.0;
        float v242 = 8191.0;
        if (v236)
        {
          float v242 = v241;
          if (v241 < 0.0) {
            float v242 = 0.0;
          }
        }
        float v243 = v224 + v238;
        BOOL v236 = (float)(v224 + v238) <= 8191.0;
        float v244 = 8191.0;
        if (v236)
        {
          float v244 = v243;
          if (v243 < 0.0) {
            float v244 = 0.0;
          }
        }
        _H0 = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0))];
        __asm { FCVT            S1, H0 }
        _H0 = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        __asm { FCVT            S2, H0 }
        _H0 = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v226, 0.0), 8191.0))];
        __asm { FCVT            S3, H0 }
        _H21 = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0))];
        _H24 = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0))];
        _H11 = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v231, 0.0), 8191.0))];
        _H20 = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v233, 0.0), 8191.0))];
        _H18 = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v234, 0.0), 8191.0))];
        _H19 = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v237, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v240, 0.0), 8191.0))];
        _H6 = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v242, 0.0), 8191.0))];
        _H7 = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v244, 0.0), 8191.0))];
        float v260 = (float)((float)((float)(v372 * _S2) + (float)(v373 * _S1)) + (float)(v371 * _S3))
             + (float)(v370 * fmaxf(_S1, fmaxf(_S2, _S3)));
        float v261 = 8191.0;
        if (v260 <= 8191.0)
        {
          float v261 = v260;
          if (v260 < 0.0) {
            float v261 = 0.0;
          }
        }
        float16x8_t v262 = v81;
        float v263 = _S30;
        __asm
        {
          FCVT            S17, H21
          FCVT            S12, H24
          FCVT            S13, H11
        }
        _H21 = *(_WORD *)&v50[2 * llroundf(v261)];
        float v268 = (float)((float)((float)(v372 * _S12) + (float)(v373 * _S17)) + (float)(v371 * _S13))
             + (float)(v370 * fmaxf(_S17, fmaxf(_S12, _S13)));
        float v269 = 8191.0;
        if (v268 <= 8191.0)
        {
          float v269 = v268;
          if (v268 < 0.0) {
            float v269 = 0.0;
          }
        }
        __asm
        {
          FCVT            S26, H20
          FCVT            S30, H18
          FCVT            S25, H19
        }
        _H8 = *(_WORD *)&v50[2 * llroundf(v269)];
        float v274 = (float)((float)((float)(v372 * _S30) + (float)(v373 * _S26)) + (float)(v371 * _S25))
             + (float)(v370 * fmaxf(_S26, fmaxf(_S30, _S25)));
        float v275 = 8191.0;
        if (v274 <= 8191.0)
        {
          float v275 = v274;
          if (v274 < 0.0) {
            float v275 = 0.0;
          }
        }
        __asm
        {
          FCVT            S24, H5
          FCVT            S11, H6
          FCVT            S23, H7
          FCVT            S5, H21
        }
        float v280 = _S1 * _S5;
        float v281 = _S2 * _S5;
        float v282 = _S3 * _S5;
        __asm { FCVT            S1, H8 }
        float v284 = _S17 * _S1;
        float v285 = _S12 * _S1;
        float v286 = _S13 * _S1;
        _H0 = *(_WORD *)&v50[2 * llroundf(v275)];
        __asm { FCVT            S0, H0 }
        float v289 = _S26 * _S0;
        float v290 = _S30 * _S0;
        float v291 = _S25 * _S0;
        float v292 = (float)((float)((float)(v372 * _S11) + (float)(v373 * _S24)) + (float)(v371 * _S23))
             + (float)(v370 * fmaxf(_S24, fmaxf(_S11, _S23)));
        float v293 = 8191.0;
        if (v292 <= 8191.0)
        {
          float v293 = v292;
          if (v292 < 0.0) {
            float v293 = 0.0;
          }
        }
        _H0 = *(_WORD *)&v50[2 * llroundf(v293)];
        __asm { FCVT            S0, H0 }
        _S17 = _S24 * _S0;
        _S21 = _S11 * _S0;
        float v298 = _S23 * _S0;
        float v299 = (float)((float)(v400 * v281) + (float)(v280 * v393)) + (float)(v282 * v383);
        float v300 = (float)((float)(v381 * v281) + (float)(v280 * v382)) + (float)(v282 * v379);
        _S18 = (float)((float)(v375 * v281) + (float)(v280 * v377)) + (float)(v282 * v374);
        float v302 = (float)((float)(v400 * v285) + (float)(v284 * v393)) + (float)(v286 * v383);
        _S20 = (float)((float)(v381 * v285) + (float)(v284 * v382)) + (float)(v286 * v379);
        _S6 = (float)((float)(v375 * v285) + (float)(v284 * v377)) + (float)(v286 * v374);
        float v305 = (float)((float)(v400 * v290) + (float)(v289 * v393)) + (float)(v291 * v383);
        float v306 = (float)((float)(v381 * v290) + (float)(v289 * v382)) + (float)(v291 * v379);
        float v307 = (float)((float)(v375 * v290) + (float)(v289 * v377)) + (float)(v291 * v374);
        float v308 = (float)((float)(v400 * _S21) + (float)(_S17 * v393)) + (float)(v298 * v383);
        float v309 = (float)((float)(v381 * _S21) + (float)(_S17 * v382)) + (float)(v298 * v379);
        _S0 = (float)((float)(v375 * _S21) + (float)(_S17 * v377)) + (float)(v298 * v374);
        _H1 = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v299, 0.0), 8191.0))];
        __asm { FCVT            S3, H1 }
        _H1 = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v300, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H5 = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v302, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        _H7 = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
        LOWORD(_S6) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0))];
        __asm
        {
          FCVT            S7, H7
          FCVT            S6, H6
        }
        LOWORD(_S17) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v305, 0.0), 8191.0))];
        __asm { FCVT            S19, H17 }
        LOWORD(_S17) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v306, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        LOWORD(_S18) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v307, 0.0), 8191.0))];
        __asm { FCVT            S18, H18 }
        LOWORD(_S20) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v308, 0.0), 8191.0))];
        __asm { FCVT            S20, H20 }
        LOWORD(_S21) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v309, 0.0), 8191.0))];
        LOWORD(_S0) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm
        {
          FCVT            S21, H21
          FCVT            S23, H0
        }
        float v328 = (float)((float)((float)(v394 * _S1) + (float)(v395 * _S3)) + (float)(v401 * _S2)) + v42;
        if (v328 < v42) {
          float v329 = v42;
        }
        else {
          float v329 = (float)((float)((float)(v394 * _S1) + (float)(v395 * _S3)) + (float)(v401 * _S2)) + v42;
        }
        BOOL v236 = v328 <= v389;
        float v330 = (float)((float)((float)(v394 * _S7) + (float)(v395 * _S5)) + (float)(v401 * _S6)) + v42;
        if (!v236) {
          float v329 = v389;
        }
        unsigned __int8 v331 = llroundf(v329);
        if (v330 < v42) {
          float v332 = v42;
        }
        else {
          float v332 = (float)((float)((float)(v394 * _S7) + (float)(v395 * _S5)) + (float)(v401 * _S6)) + v42;
        }
        BOOL v236 = v330 <= v389;
        float v333 = (float)((float)((float)(v394 * _S17) + (float)(v395 * _S19)) + (float)(v401 * _S18)) + v42;
        if (!v236) {
          float v332 = v389;
        }
        unsigned __int8 v334 = llroundf(v332);
        if (v333 < v42) {
          float v335 = v42;
        }
        else {
          float v335 = (float)((float)((float)(v394 * _S17) + (float)(v395 * _S19)) + (float)(v401 * _S18)) + v42;
        }
        BOOL v236 = v333 <= v389;
        float v336 = (float)((float)((float)(v394 * _S21) + (float)(v395 * _S20)) + (float)(v401 * _S23)) + v42;
        if (!v236) {
          float v335 = v389;
        }
        __int8 v337 = llroundf(v335);
        if (v336 < v42) {
          float v338 = v42;
        }
        else {
          float v338 = (float)((float)((float)(v394 * _S21) + (float)(v395 * _S20)) + (float)(v401 * _S23)) + v42;
        }
        if (v336 <= v389) {
          float v339 = v338;
        }
        else {
          float v339 = v389;
        }
        __int8 v340 = llroundf(v339);
        float v341 = (float)((float)(_S3 + _S5) + _S19) + _S20;
        float v342 = (float)((float)(_S1 + _S7) + _S17) + _S21;
        *uint64_t result = v331;
        result[1] = v334;
        v109->i8[0] = v337;
        v109->i8[1] = v340;
        float v343 = (float)((float)(_S2 + _S6) + _S18) + _S23;
        float v344 = (float)((float)(v352 + (float)(v341 * *(float *)&v399)) + (float)(v342 * v11.f32[0]))
             + (float)(v343 * *(float *)&v102);
        float v345 = v376;
        if (v344 <= v376)
        {
          float v345 = (float)((float)(v352 + (float)(v341 * *(float *)&v399)) + (float)(v342 * v11.f32[0]))
               + (float)(v343 * *(float *)&v102);
          if (v344 < v403) {
            float v345 = v403;
          }
        }
        *(float *)_D0.i32 = (float)((float)(v352 + (float)(v341 * *((float *)&v399 + 1))) + (float)(v342 * v11.f32[1]))
                          + (float)(v343 * *((float *)&v102 + 1));
        *long long v213 = llroundf(v345);
        float v346 = v376;
        float v35 = v380;
        float v40 = v402;
        _S30 = v263;
        float16x8_t v59 = v378;
        float16x8_t v61 = v404;
        float16x8_t v81 = v262;
        float16x8_t v100 = (float16x8_t)v396;
        _H13 = v406;
        v104.i64[0] = 0x9000900090009000;
        v104.i64[1] = 0x9000900090009000;
        float16x8_t v103 = 0uLL;
        if (*(float *)_D0.i32 <= v376)
        {
          float v346 = *(float *)_D0.i32;
          if (*(float *)_D0.i32 < v403) {
            float v346 = v403;
          }
        }
        v214 += 2;
        v212 += 2;
        uint64_t v78 = (int8x8_t *)((char *)v78 + 2);
        int v108 = (int8x8_t *)((char *)v108 + 2);
        v213[1] = llroundf(v346);
        result += 2;
        int v109 = (int8x8_t *)((char *)v109 + 2);
        v213 += 2;
        float16x8_t v62 = v390;
        float16x8_t v63 = v405;
        float16x8_t v101 = (float16x8_t)v398;
        float16x8_t v70 = v388;
      }
      uint64_t v78 = (int8x8_t *)&v105[v29];
      v77 += v30;
      uint64_t result = &v106[v31];
      v72 += v32;
      v17 += 2;
    }
    while (v21 > v17);
    if (v350 && v349)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v52, v51, v18);
        v51 += v347;
        v52 += v348;
        --v21;
      }
      while (v21);
    }
    else if (v349)
    {
      do
      {
        if (v18) {
          uint64_t result = (unsigned __int8 *)memset(v52, 255, v18);
        }
        v52 += v348;
        --v21;
      }
      while (v21);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Tone_Mat_TRC_420vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v7 = *(void *)((char *)result + 28);
  unint64_t v8 = 2 * *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    size_t v12 = *(void *)((char *)result + 20);
    uint64_t v13 = *(void *)((char *)result + 36);
    uint64_t v14 = *(void *)((char *)result + 44) + 2 * v9;
    unint64_t v15 = 2 * v10 - 2 * v9;
    uint64_t v16 = result[14];
    uint64_t v17 = (void *)result[16];
    uint64_t v18 = result[15] + 2 * (result[13] * a2 / v8);
    uint64_t v19 = result[19];
    uint64_t v20 = (void *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    uint64_t v27 = (char *)(v26 + v25 * v14 + v13);
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    uint64_t v32 = (char *)(v31 + v30 * v18 + v16);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v19;
    float v219 = v33 * *(float *)(v19 + 16);
    float v220 = v33 * *(float *)(v19 + 8);
    float v37 = v33 * *(float *)(v19 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v19 + 28);
    float v217 = *(float *)&v38;
    float v218 = v37;
    LOWORD(v38) = *(_WORD *)(v19 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 150);
    *(float *)&unsigned int v42 = (float)v38;
    float v223 = *(float *)&v42;
    LOWORD(v42) = *(_WORD *)(v19 + 152);
    float v43 = (float)v42;
    float v213 = *(float *)(v19 + 40);
    float v214 = *(float *)(v19 + 36);
    float v211 = *(float *)(v19 + 48) * 0.25;
    float v212 = *(float *)(v19 + 44);
    float v209 = *(float *)(v19 + 56) * 0.25;
    float v210 = *(float *)(v19 + 52) * 0.25;
    float v207 = *(float *)(v19 + 64) * 0.25;
    float v208 = *(float *)(v19 + 60) * 0.25;
    float v205 = *(float *)(v19 + 68) * 0.25;
    float v206 = *(float *)(v19 + 72);
    float v203 = *(float *)(v19 + 80);
    float v204 = *(float *)(v19 + 76);
    float v201 = *(float *)(v19 + 88);
    float v202 = *(float *)(v19 + 84);
    float v199 = *(float *)(v19 + 96);
    float v200 = *(float *)(v19 + 92);
    float v44 = *(float *)(v19 + 104);
    float v197 = v44;
    float v198 = *(float *)(v19 + 100);
    uint64_t v45 = v19 + 164;
    uint64_t v46 = v19 + 16548;
    uint64_t v47 = *v17 + v28 * v18;
    uint64_t v48 = v17[1] + v29 * (v18 / 2);
    uint64_t v49 = v19 + 32932;
    uint64_t v50 = (unsigned char *)(v47 + v16);
    uint64_t result = (void *)(v48 + v16);
    uint64_t v51 = v20[1];
    CFDictionaryRef v52 = (unsigned char *)(*v20 + v23 * v14 + v13);
    uint64_t v53 = v51 + v24 * (v14 / 2) + v13;
    float v54 = *(float *)(v19 + 108);
    float v55 = *(float *)(v19 + 112);
    float v56 = *(float *)(v19 + 116);
    float v57 = *(float *)(v19 + 120);
    float v221 = (float)LODWORD(a6);
    float v222 = (float)LODWORD(a5);
    float v215 = v43;
    float v216 = v40;
    float v195 = v55;
    float v196 = v36;
    float v194 = v54;
    do
    {
      CFArrayRef v58 = &v52[v23];
      float16x8_t v59 = &v50[v28];
      if (v12)
      {
        size_t v60 = 0;
        float16x8_t v61 = &v52[v23];
        float16x8_t v62 = &v50[v28];
        do
        {
          LOBYTE(v44) = *(unsigned char *)(v53 + v60 + 1);
          float v63 = (float)LODWORD(v44) - v35;
          unsigned int v64 = LODWORD(v220);
          float v65 = v220 * v63;
          LOBYTE(v64) = *v52;
          float v66 = v36 * (float)((float)v64 - v34);
          float v67 = (float)(v220 * v63) + v66;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = (float)(v220 * v63) + v66;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          LOBYTE(v67) = *(unsigned char *)(v53 + v60);
          float v69 = (float)LODWORD(v67) - v35;
          float v70 = (float)(v218 * v63) + (float)(v69 * v219);
          float v71 = 8191.0;
          if ((float)(v66 + v70) <= 8191.0)
          {
            float v71 = v66 + v70;
            if ((float)(v66 + v70) < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v217 * v69;
          float v73 = (float)(v217 * v69) + v66;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          LOBYTE(v73) = v52[1];
          float v75 = v36 * (float)((float)LODWORD(v73) - v34);
          float v76 = 8191.0;
          if ((float)(v65 + v75) <= 8191.0)
          {
            float v76 = v65 + v75;
            if ((float)(v65 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = 8191.0;
          if ((float)(v70 + v75) <= 8191.0)
          {
            float v77 = v70 + v75;
            if ((float)(v70 + v75) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v72 + v75;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          LOBYTE(v78) = *v61;
          float v80 = v36 * (float)((float)LODWORD(v78) - v34);
          float v81 = 8191.0;
          if ((float)(v65 + v80) <= 8191.0)
          {
            float v81 = v65 + v80;
            if ((float)(v65 + v80) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = 8191.0;
          if ((float)(v70 + v80) <= 8191.0)
          {
            float v82 = v70 + v80;
            if ((float)(v70 + v80) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v72 + v80;
          float v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          LOBYTE(_S22) = v61[1];
          float v85 = v36 * (float)((float)LODWORD(_S22) - v34);
          float v86 = v65 + v85;
          BOOL v87 = (float)(v65 + v85) <= 8191.0;
          float v88 = 8191.0;
          if (v87)
          {
            float v88 = v86;
            if (v86 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v70 + v85;
          BOOL v87 = (float)(v70 + v85) <= 8191.0;
          float v90 = 8191.0;
          if (v87)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v72 + v85;
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          _H19 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S24, H20 }
          _H20 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S25, H20 }
          _H28 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          float v112 = (float)((float)((float)(v55 * _S24) + (float)(v54 * _S19)) + (float)(v56 * _S25))
               + (float)(v57 * fmaxf(_S19, fmaxf(_S24, _S25)));
          float v113 = 8191.0;
          if (v112 <= 8191.0)
          {
            float v113 = v112;
            if (v112 < 0.0) {
              float v113 = 0.0;
            }
          }
          __asm
          {
            FCVT            S27, H28
            FCVT            S28, H23
            FCVT            S30, H20
          }
          _H22 = *(_WORD *)(v46 + 2 * llroundf(v113));
          float v118 = (float)((float)((float)(v55 * _S28) + (float)(v54 * _S27)) + (float)(v56 * _S30))
               + (float)(v57 * fmaxf(_S27, fmaxf(_S28, _S30)));
          float v119 = 8191.0;
          if (v118 <= 8191.0)
          {
            float v119 = v118;
            if (v118 < 0.0) {
              float v119 = 0.0;
            }
          }
          __asm
          {
            FCVT            S8, H17
            FCVT            S9, H26
            FCVT            S10, H21
          }
          _H17 = *(_WORD *)(v46 + 2 * llroundf(v119));
          float v124 = fmaxf(_S8, fmaxf(_S9, _S10));
          float v125 = (float)((float)((float)(v55 * _S9) + (float)(v54 * _S8)) + (float)(v56 * _S10)) + (float)(v57 * v124);
          float v126 = 8191.0;
          if (v125 <= 8191.0)
          {
            float v126 = (float)((float)((float)(v55 * _S9) + (float)(v54 * _S8)) + (float)(v56 * _S10)) + (float)(v57 * v124);
            if (v125 < 0.0) {
              float v126 = 0.0;
            }
          }
          __asm
          {
            FCVT            S26, H1
            FCVT            S29, H2
            FCVT            S31, H3
            FCVT            S1, H22
          }
          float v131 = _S19 * _S1;
          float v132 = _S24 * _S1;
          float v133 = _S25 * _S1;
          __asm { FCVT            S1, H17 }
          float v135 = _S27 * _S1;
          float v136 = _S28 * _S1;
          float v137 = _S30 * _S1;
          LOWORD(_S1) = *(_WORD *)(v46 + 2 * llroundf(v126));
          __asm { FCVT            S2, H1 }
          float v139 = _S8 * _S2;
          float v140 = _S9 * _S2;
          float v141 = _S10 * _S2;
          float v142 = (float)((float)((float)(v55 * _S29) + (float)(v54 * _S26)) + (float)(v56 * _S31))
               + (float)(v57 * fmaxf(_S26, fmaxf(_S29, _S31)));
          float v143 = 8191.0;
          if (v142 <= 8191.0)
          {
            float v143 = v142;
            if (v142 < 0.0) {
              float v143 = 0.0;
            }
          }
          _H24 = *(_WORD *)(v46 + 2 * llroundf(v143));
          __asm { FCVT            S24, H24 }
          float v146 = _S26 * _S24;
          float v147 = _S29 * _S24;
          float v148 = _S31 * _S24;
          float v149 = (float)((float)(v204 * v132) + (float)(v131 * v206)) + (float)(v133 * v203);
          float v150 = (float)((float)(v201 * v132) + (float)(v131 * v202)) + (float)(v133 * v200);
          _S20 = (float)((float)(v198 * v132) + (float)(v131 * v199)) + (float)(v133 * v197);
          _S22 = (float)((float)(v204 * v136) + (float)(v135 * v206)) + (float)(v137 * v203);
          _S23 = (float)((float)(v201 * v136) + (float)(v135 * v202)) + (float)(v137 * v200);
          _S19 = (float)((float)(v198 * v136) + (float)(v135 * v199)) + (float)(v137 * v197);
          float v155 = (float)((float)(v204 * v140) + (float)(v139 * v206)) + (float)(v141 * v203);
          float v156 = (float)((float)(v201 * v140) + (float)(v139 * v202)) + (float)(v141 * v200);
          float v157 = (float)((float)(v198 * v140) + (float)(v139 * v199)) + (float)(v141 * v197);
          float v158 = (float)((float)(v204 * v147) + (float)(v146 * v206)) + (float)(v148 * v203);
          float v159 = (float)((float)(v201 * v147) + (float)(v146 * v202)) + (float)(v148 * v200);
          _S26 = (float)((float)(v198 * v147) + (float)(v146 * v199)) + (float)(v148 * v197);
          _H1 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          __asm { FCVT            S3, H1 }
          _H1 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H17 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          LOWORD(_S20) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          LOWORD(_S19) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm
          {
            FCVT            S21, H20
            FCVT            S19, H19
          }
          LOWORD(_S20) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          LOWORD(_S22) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm { FCVT            S24, H22 }
          LOWORD(_S22) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          LOWORD(_S22) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          LOWORD(_S26) = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(_S26, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S26, H26
          }
          float v176 = (float)((float)((float)(v213 * _S1) + (float)(v214 * _S3)) + (float)(v212 * _S2)) + v39;
          if (v176 < v39) {
            float v177 = v39;
          }
          else {
            float v177 = (float)((float)((float)(v213 * _S1) + (float)(v214 * _S3)) + (float)(v212 * _S2)) + v39;
          }
          BOOL v87 = v176 <= v41;
          float v178 = (float)((float)((float)(v213 * _S21) + (float)(v214 * _S17)) + (float)(v212 * _S19)) + v39;
          if (!v87) {
            float v177 = v41;
          }
          char v179 = llroundf(v177);
          if (v178 < v39) {
            float v180 = v39;
          }
          else {
            float v180 = (float)((float)((float)(v213 * _S21) + (float)(v214 * _S17)) + (float)(v212 * _S19)) + v39;
          }
          BOOL v87 = v178 <= v41;
          float v181 = (float)((float)((float)(v213 * _S24) + (float)(v214 * _S20)) + (float)(v212 * _S25)) + v39;
          if (!v87) {
            float v180 = v41;
          }
          char v182 = llroundf(v180);
          if (v181 < v39) {
            float v183 = v39;
          }
          else {
            float v183 = (float)((float)((float)(v213 * _S24) + (float)(v214 * _S20)) + (float)(v212 * _S25)) + v39;
          }
          BOOL v87 = v181 <= v41;
          float v184 = (float)((float)((float)(v213 * _S23) + (float)(v214 * _S22)) + (float)(v212 * _S26)) + v39;
          if (!v87) {
            float v183 = v41;
          }
          char v185 = llroundf(v183);
          if (v184 < v39) {
            float v186 = v39;
          }
          else {
            float v186 = (float)((float)((float)(v213 * _S23) + (float)(v214 * _S22)) + (float)(v212 * _S26)) + v39;
          }
          if (v184 <= v41) {
            float v187 = v186;
          }
          else {
            float v187 = v41;
          }
          float v188 = (float)((float)(_S3 + _S17) + _S20) + _S22;
          float v189 = (float)((float)(_S1 + _S21) + _S24) + _S23;
          unsigned char *v50 = v179;
          v50[1] = v182;
          *float16x8_t v62 = v185;
          v62[1] = llroundf(v187);
          float v190 = (float)((float)(_S2 + _S19) + _S25) + _S26;
          float v191 = (float)((float)(v216 + (float)(v188 * v211)) + (float)(v189 * v210)) + (float)(v190 * v209);
          float v192 = v215;
          if (v191 <= v215)
          {
            float v192 = (float)((float)(v216 + (float)(v188 * v211)) + (float)(v189 * v210)) + (float)(v190 * v209);
            if (v191 < v223) {
              float v192 = v223;
            }
          }
          float v193 = (float)((float)(v216 + (float)(v188 * v208)) + (float)(v189 * v207)) + (float)(v190 * v205);
          *((unsigned char *)result + v60) = llroundf(v192);
          float v44 = v215;
          float v34 = v222;
          float v36 = v196;
          if (v193 <= v215)
          {
            float v44 = v193;
            if (v193 < v223) {
              float v44 = v223;
            }
          }
          v52 += 2;
          v61 += 2;
          v50 += 2;
          v62 += 2;
          *((unsigned char *)result + v60 + 1) = llroundf(v44);
          v60 += 2;
          float v35 = v221;
          float v54 = v194;
          float v55 = v195;
        }
        while (v12 > v60);
      }
      CFDictionaryRef v52 = &v58[v23];
      v53 += v24;
      uint64_t v50 = &v59[v28];
      uint64_t result = (void *)((char *)result + v29);
      v11 += 2;
    }
    while (v15 > v11);
    if (v26 && v31)
    {
      do
      {
        uint64_t result = memcpy(v32, v27, v12);
        v27 += v25;
        v32 += v30;
        --v15;
      }
      while (v15);
    }
    else if (v31)
    {
      do
      {
        if (v12) {
          uint64_t result = memset(v32, 255, v12);
        }
        v32 += v30;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_420vf_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_420vf_TRC_Mat_TRC_420vf_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, double a4, int16x4_t a5, double a6, double a7, double a8, double a9, int16x4_t a10)
{
  uint64_t v19 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v20 = 2 * result->u8[0];
  unint64_t v21 = v19 * a2 / v20;
  unint64_t v22 = (v19 + v19 * a2) / v20;
  if (2 * v22 != 2 * v21)
  {
    unint64_t v23 = 0;
    size_t v24 = *(size_t *)((char *)&result[2] + 4);
    uint64_t v25 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v26 = *(void *)((char *)&result[5] + 4) + 2 * v21;
    unint64_t v27 = 2 * v22 - 2 * v21;
    float32x2_t v28 = result[14];
    uint64_t v29 = (uint64_t *)result[16];
    uint64_t v30 = *(void *)&result[15] + 2 * (*(void *)&result[13] * a2 / v20);
    uint64_t v31 = (float32x2_t *)result[19];
    uint64_t v32 = (uint64_t *)result[7];
    uint64_t v33 = (uint64_t *)result[8];
    uint64_t v34 = (uint64_t *)result[17];
    uint64_t v35 = *v33;
    uint64_t v36 = v33[1];
    uint64_t v300 = v33[2];
    uint64_t v303 = v32[2];
    uint64_t v37 = *v34;
    uint64_t v38 = v34[1];
    uint64_t v39 = v34[2];
    uint64_t v40 = v29[2];
    uint64_t v302 = v40;
    unsigned int v41 = v31[17].u16[2];
    unsigned int v42 = v31[17].u16[3];
    float v43 = (float)v41;
    *(short float *)v17.i16 = (short float)v41;
    LODWORD(_Q12) = v31[5].i32[1];
    unsigned int v46 = v31[18].u16[0];
    float v305 = (float)v42;
    short float v47 = (short float)v42;
    unsigned int v48 = v31[18].u16[1];
    float v49 = (float)v46;
    *(short float *)a5.i16 = (short float)v46;
    unsigned int v50 = v31[18].u16[2];
    float v335 = (float)v48;
    *(short float *)a10.i16 = (short float)v48;
    unsigned int v51 = v31[18].u16[3];
    float v334 = (float)v50;
    *(short float *)v13.i16 = (short float)v50;
    unsigned int v52 = v31[19].u16[0];
    _S20 = v31[4].i32[1];
    _S29 = v31[5].i32[0];
    _S31 = v31[9].f32[0];
    float v343 = v31[9].f32[1];
    float v346 = (float)v51;
    *(float *)v14.i32 = (float)v52;
    float v349 = (float)v52;
    *(short float *)v14.i16 = (short float)v51;
    if (v30 >= 0) {
      uint64_t v56 = v30;
    }
    else {
      uint64_t v56 = v30 + 1;
    }
    uint64_t v57 = *v29;
    uint64_t v58 = v29[1] + v38 * (v56 >> 1);
    float16x8_t v59 = (char *)&v31[20] + 4;
    size_t v60 = (char *)(v303 + v300 * v26 + v25);
    float16x8_t v61 = (char *)(v40 + v39 * v30 + *(void *)&v28);
    float v62 = 8191.0 / (float)v31[16].u32[0];
    float32x4_t v65 = (float32x4_t)vdupq_lane_s16(v17, 0);
    float16x8_t v301 = (float16x8_t)v65;
    v44.i32[1] = v31[1].i32[0];
    v44.i32[0] = v31[3].i32[1];
    *(float32x2_t *)v11.f32 = vmul_n_f32(v44, v62);
    float16x8_t v63 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    _S27 = v62 * v31->f32[0];
    *(float32x2_t *)v65.f32 = vmul_n_f32(v31[2], v62);
    short float v66 = -v47;
    __asm { FMOV            V3.2S, #0.25 }
    v45.i32[1] = v31[7].i32[1];
    v45.i32[0] = v31[6].i32[0];
    *(float32x2_t *)v10.f32 = vmul_f32(v45, _D3);
    float16x8_t v72 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v65), 0);
    int32x4_t v341 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    v16.i32[1] = v31[8].i32[0];
    v16.i32[0] = v31[6].i32[1];
    *(float32x2_t *)v16.f32 = vmul_f32(*(float32x2_t *)v16.f32, _D3);
    int32x4_t v73 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v16), 0);
    v15.i32[1] = v31[8].i32[1];
    v15.i32[0] = v31[7].i32[0];
    *(float32x2_t *)v15.f32 = vmul_f32(*(float32x2_t *)v15.f32, _D3);
    float16x8_t v74 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v15), 0);
    float16x8_t v75 = (float16x8_t)vdupq_lane_s16(a5, 0);
    _Q2 = vmulq_n_f16(v63, v66);
    float16x8_t v342 = _Q2;
    float16x8_t v77 = (float16x8_t)vdupq_lane_s16(a10, 0);
    int16x8_t v78 = vdupq_lane_s16(v13, 0);
    float v79 = (unsigned char *)(v58 + *(void *)&v28);
    float v80 = (int8x8_t *)(v57 + v37 * v30 + *(void *)&v28);
    if (v26 >= 0) {
      uint64_t v81 = v26;
    }
    else {
      uint64_t v81 = v26 + 1;
    }
    uint64_t v82 = *v32;
    uint64_t v83 = v32[1] + v36 * (v81 >> 1);
    uint64_t result = (float32x2_t *)((char *)v31 + 16548);
    int16x8_t v84 = (int16x8_t)vmulq_n_f16(v72, v66);
    *(short float *)v18.i16 = (short float)v52;
    float16x8_t v328 = (float16x8_t)vdupq_lane_s16(v18, 0);
    float16x8_t v85 = (float16x8_t)v73;
    float v86 = (unsigned char *)(v83 + v25);
    BOOL v87 = (int8x8_t *)(v82 + v35 * v26 + v25);
    _Q2.i32[0] = v31[12].i32[0];
    __asm { FCVT            H9, S27 }
    float v339 = v31[4].f32[1];
    __asm { FCVT            H6, S20 }
    short float v317 = _H9;
    float v338 = v31[5].f32[0];
    __asm { FCVT            H10, S29 }
    short float v316 = _H10;
    float v340 = v31[5].f32[1];
    __asm
    {
      FCVT            H10, S12
      FCVT            H12, S31
    }
    long long v314 = _Q12;
    float16x8_t v92 = (float16x8_t)v78;
    _S16 = v31[9].i32[1];
    __asm { FCVT            H12, S16 }
    float v327 = v31[10].f32[0];
    __asm { FCVT            H5, S5 }
    float v325 = v31[10].f32[1];
    __asm { FCVT            H13, S13 }
    float v323 = v31[11].f32[0];
    __asm { FCVT            H14, S14 }
    float v321 = v31[11].f32[1];
    __asm { FCVT            H9, S15 }
    float v320 = *(float *)_Q2.i32;
    __asm { FCVT            H2, S2 }
    float v319 = v31[12].f32[1];
    __asm { FCVT            H3, S3 }
    float v318 = v31[13].f32[0];
    __asm { FCVT            H7, S7 }
    float v336 = v65.f32[0];
    float32_t v101 = v11.f32[1];
    float v337 = v11.f32[0];
    float16x8_t v102 = (float16x8_t)v341;
    float32_t v103 = v65.f32[1];
    float16x8_t v104 = v85;
    float v306 = v103;
    float v307 = v101;
    float16x8_t v105 = v342;
    float16x8_t v106 = (float16x8_t)vdupq_lane_s16(v14, 0);
    uint64_t v107 = v15.i64[0];
    float16x8_t v329 = (float16x8_t)v84;
    short float v312 = _H5;
    float16x8_t v347 = _Q2;
    short float v348 = _H9;
    short float v308 = _H7;
    short float v309 = _H3;
    float16x8_t v332 = v77;
    float16x8_t v333 = v75;
    float16x8_t v330 = v106;
    float16x8_t v331 = v92;
    float16x8_t v326 = v74;
    float16x8_t v324 = v104;
    float16x8_t v322 = v72;
    float v345 = _S27;
    short float v315 = _H10;
    short float v313 = _H12;
    short float v310 = _H14;
    short float v311 = _H13;
    float16x8_t v344 = v63;
    float v304 = v43;
    do
    {
      int v108 = (char *)v87 + v35;
      int v109 = (char *)v80 + v37;
      if ((int)v24 < 8)
      {
        size_t v199 = 0;
        float v198 = v79;
        float v112 = (int8x8_t *)((char *)v80 + v37);
        float v197 = v86;
        uint16x8_t v111 = (int8x8_t *)((char *)v87 + v35);
      }
      else
      {
        uint64_t v110 = 0;
        uint16x8_t v111 = (int8x8_t *)((char *)v87 + v35);
        float v112 = (int8x8_t *)((char *)v80 + v37);
        v113.i64[0] = 0x9000900090009000;
        v113.i64[1] = 0x9000900090009000;
        do
        {
          int8x8_t v114 = *(int8x8_t *)&v86[v110];
          *(int8x8_t *)v115.i8 = vzip1_s8(v114, 0);
          v115.u64[1] = (unint64_t)vzip2_s8(v114, 0);
          float16x8_t v116 = vcvtq_f16_u16(v115);
          int8x16_t v117 = (int8x16_t)vmlaq_f16(v105, v344, v116);
          int8x16_t v118 = (int8x16_t)vmlaq_f16(v329, v72, v116);
          v116.i64[0] = vextq_s8(v117, v117, 8uLL).u64[0];
          *(int16x4_t *)v119.i8 = vuzp1_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v116.i8);
          *(int16x4_t *)v116.i8 = vuzp2_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v116.i8);
          v116.i64[1] = v104.i64[0];
          float16x8_t v120 = (float16x8_t)vzip1q_s16((int16x8_t)v116, (int16x8_t)v116);
          v119.i64[1] = v104.i64[0];
          float16x8_t v121 = (float16x8_t)vzip1q_s16(v119, v119);
          v116.i64[0] = vextq_s8(v118, v118, 8uLL).u64[0];
          *(float16x4_t *)v116.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v116.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v116.i8));
          v116.i64[1] = v104.i64[0];
          int8x8_t v122 = *v87++;
          float16x8_t v123 = (float16x8_t)vzip1q_s16((int16x8_t)v116, (int16x8_t)v116);
          *(int8x8_t *)v116.i8 = vzip1_s8(v122, 0);
          v116.u64[1] = (unint64_t)vzip2_s8(v122, 0);
          int8x8_t v124 = *v111++;
          *(int8x8_t *)v118.i8 = vzip1_s8(v124, 0);
          v118.u64[1] = (unint64_t)vzip2_s8(v124, 0);
          float16x8_t v125 = vcvtq_f16_u16((uint16x8_t)v118);
          float16x8_t v126 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v116), v301);
          float16x8_t v127 = vsubq_f16(v125, v301);
          float16x8_t v128 = vmlaq_n_f16(v120, v126, v317);
          float16x8_t v129 = vmlaq_n_f16(v120, v127, v317);
          float16x8_t v130 = vmlaq_n_f16(v123, v126, v317);
          float16x8_t v131 = vmlaq_n_f16(v123, v127, v317);
          float16x8_t v132 = vmlaq_n_f16(v121, v126, v317);
          float16x8_t v133 = vmlaq_n_f16(v121, v127, v317);
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v113));
          float16x8_t v135 = (float16x8_t)vmovl_high_u16(v134);
          *(void *)&long long v136 = v135.u32[2];
          *((void *)&v136 + 1) = v135.u32[3];
          long long v137 = v136;
          *(void *)&long long v136 = v135.u32[0];
          *((void *)&v136 + 1) = v135.u32[1];
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v134.i8);
          v135.i16[0] = *(_WORD *)&v59[2 * v138.u32[0]];
          v135.i16[1] = *(_WORD *)&v59[2 * v138.u32[1]];
          v135.i16[2] = *(_WORD *)&v59[2 * v138.u32[2]];
          v135.i16[3] = *(_WORD *)&v59[2 * v138.u32[3]];
          v135.i16[4] = *(_WORD *)&v59[2 * v136];
          v135.i16[5] = *(_WORD *)&v59[2 * *((void *)&v136 + 1)];
          v135.i16[6] = *(_WORD *)&v59[2 * v137];
          v135.i16[7] = *(_WORD *)&v59[2 * *((void *)&v137 + 1)];
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, (float16x8_t)0), v113));
          uint32x4_t v140 = vmovl_high_u16(v139);
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v139.i8);
          v142.i16[0] = *(_WORD *)&v59[2 * v141.u32[0]];
          v142.i16[1] = *(_WORD *)&v59[2 * v141.u32[1]];
          v142.i16[2] = *(_WORD *)&v59[2 * v141.u32[2]];
          v142.i16[3] = *(_WORD *)&v59[2 * v141.u32[3]];
          v142.i16[4] = *(_WORD *)&v59[2 * v140.u32[0]];
          v142.i16[5] = *(_WORD *)&v59[2 * v140.u32[1]];
          v142.i16[6] = *(_WORD *)&v59[2 * v140.u32[2]];
          v142.i16[7] = *(_WORD *)&v59[2 * v140.u32[3]];
          uint16x8_t v143 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v113));
          uint32x4_t v144 = vmovl_high_u16(v143);
          uint32x4_t v145 = vmovl_u16(*(uint16x4_t *)v143.i8);
          v146.i64[0] = 0x9000900090009000;
          v146.i64[1] = 0x9000900090009000;
          v147.i16[0] = *(_WORD *)&v59[2 * v145.u32[0]];
          v147.i16[1] = *(_WORD *)&v59[2 * v145.u32[1]];
          v147.i16[2] = *(_WORD *)&v59[2 * v145.u32[2]];
          v147.i16[3] = *(_WORD *)&v59[2 * v145.u32[3]];
          v147.i16[4] = *(_WORD *)&v59[2 * v144.u32[0]];
          v147.i16[5] = *(_WORD *)&v59[2 * v144.u32[1]];
          v147.i16[6] = *(_WORD *)&v59[2 * v144.u32[2]];
          v147.i16[7] = *(_WORD *)&v59[2 * v144.u32[3]];
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v146));
          uint32x4_t v149 = vmovl_high_u16(v148);
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v148.i8);
          v129.i16[0] = *(_WORD *)&v59[2 * v150.u32[0]];
          v129.i16[1] = *(_WORD *)&v59[2 * v150.u32[1]];
          v129.i16[2] = *(_WORD *)&v59[2 * v150.u32[2]];
          v129.i16[3] = *(_WORD *)&v59[2 * v150.u32[3]];
          v129.i16[4] = *(_WORD *)&v59[2 * v149.u32[0]];
          v129.i16[5] = *(_WORD *)&v59[2 * v149.u32[1]];
          v129.i16[6] = *(_WORD *)&v59[2 * v149.u32[2]];
          v129.i16[7] = *(_WORD *)&v59[2 * v149.u32[3]];
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v146));
          uint32x4_t v152 = vmovl_high_u16(v151);
          float16x8_t v153 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v151.i8);
          v153.i16[0] = *(_WORD *)&v59[2 * v153.u32[0]];
          v153.i16[1] = *(_WORD *)&v59[2 * v153.u32[1]];
          v153.i16[2] = *(_WORD *)&v59[2 * v153.u32[2]];
          v153.i16[3] = *(_WORD *)&v59[2 * v153.u32[3]];
          v153.i16[4] = *(_WORD *)&v59[2 * v152.u32[0]];
          v153.i16[5] = *(_WORD *)&v59[2 * v152.u32[1]];
          v153.i16[6] = *(_WORD *)&v59[2 * v152.u32[2]];
          v153.i16[7] = *(_WORD *)&v59[2 * v152.u32[3]];
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v133, (float16x8_t)0), v146));
          uint32x4_t v155 = vmovl_high_u16(v154);
          uint32x4_t v156 = vmovl_u16(*(uint16x4_t *)v154.i8);
          v157.i16[0] = *(_WORD *)&v59[2 * v156.u32[0]];
          v157.i16[1] = *(_WORD *)&v59[2 * v156.u32[1]];
          v157.i16[2] = *(_WORD *)&v59[2 * v156.u32[2]];
          v157.i16[3] = *(_WORD *)&v59[2 * v156.u32[3]];
          v157.i16[4] = *(_WORD *)&v59[2 * v155.u32[0]];
          v157.i16[5] = *(_WORD *)&v59[2 * v155.u32[1]];
          v157.i16[6] = *(_WORD *)&v59[2 * v155.u32[2]];
          v157.i16[7] = *(_WORD *)&v59[2 * v155.u32[3]];
          v158.i16[7] = HIWORD(v314);
          float16x8_t v159 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v135, *(short float *)&v314), v142, v313), v147, v312);
          float16x8_t v160 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v135, v311), v142, v310), v147, _H9);
          float16x8_t v161 = vmlaq_n_f16(vmulq_n_f16(v147, v308), v142, v309);
          v142.i16[7] = v347.i16[7];
          float16x8_t v162 = vmlaq_n_f16(v161, v135, *(short float *)v347.i16);
          float16x8_t v163 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, *(short float *)&v314), v153, v313), v157, v312);
          float16x8_t v164 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v311), v153, v310), v157, _H9);
          float16x8_t v165 = vmlaq_n_f16(vmulq_n_f16(v157, v308), v153, v309);
          uint16x8_t v166 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v159, (float16x8_t)0), v146));
          uint32x4_t v167 = vmovl_high_u16(v166);
          uint32x4_t v168 = vmovl_u16(*(uint16x4_t *)v166.i8);
          v142.i16[0] = result->i16[v168.u32[0]];
          v142.i16[1] = result->i16[v168.u32[1]];
          v142.i16[2] = result->i16[v168.u32[2]];
          v142.i16[3] = result->i16[v168.u32[3]];
          v142.i16[4] = result->i16[v167.u32[0]];
          v142.i16[5] = result->i16[v167.u32[1]];
          v142.i16[6] = result->i16[v167.u32[2]];
          uint16x8_t v169 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v160, (float16x8_t)0), v146));
          uint32x4_t v170 = vmovl_high_u16(v169);
          uint32x4_t v171 = vmovl_u16(*(uint16x4_t *)v169.i8);
          v158.i16[0] = result->i16[v171.u32[0]];
          v158.i16[1] = result->i16[v171.u32[1]];
          v158.i16[2] = result->i16[v171.u32[2]];
          v158.i16[3] = result->i16[v171.u32[3]];
          v158.i16[4] = result->i16[v170.u32[0]];
          v158.i16[5] = result->i16[v170.u32[1]];
          v158.i16[6] = result->i16[v170.u32[2]];
          float16x8_t v172 = (float16x8_t)vuzp1q_s16((int16x8_t)v142, v158);
          v142.i16[7] = result->i16[v167.u32[3]];
          v158.i16[7] = result->i16[v170.u32[3]];
          uint16x8_t v173 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v162, (float16x8_t)0), v146));
          uint32x4_t v174 = vmovl_high_u16(v173);
          *(void *)&long long v136 = v174.u32[2];
          *((void *)&v136 + 1) = v174.u32[3];
          long long v175 = v136;
          *(void *)&long long v136 = v174.u32[0];
          *((void *)&v136 + 1) = v174.u32[1];
          long long v176 = v136;
          int16x8_t v177 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v173.i8);
          *((void *)&v136 + 1) = v177.u32[3];
          v177.i16[7] = (unint64_t)v177.u32[1] >> 48;
          v177.i16[0] = result->i16[v177.u32[0]];
          v177.i16[1] = result->i16[v177.u32[1]];
          v177.i16[2] = result->i16[v177.u32[2]];
          v177.i16[3] = result->i16[*((void *)&v136 + 1)];
          v177.i16[4] = result->i16[v176];
          v177.i16[5] = result->i16[*((void *)&v176 + 1)];
          v177.i16[6] = result->i16[v175];
          float16x8_t v178 = (float16x8_t)v177;
          v178.i16[7] = result->i16[*((void *)&v175 + 1)];
          uint16x8_t v179 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v163, (float16x8_t)0), v146));
          uint32x4_t v180 = vmovl_high_u16(v179);
          float16x8_t v181 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v179.i8);
          *(void *)&long long v136 = v180.u32[2];
          *((void *)&v136 + 1) = v180.u32[3];
          long long v182 = v136;
          *(void *)&long long v136 = v180.u32[0];
          *((void *)&v136 + 1) = v180.u32[1];
          long long v183 = v136;
          *((void *)&v136 + 1) = v181.u32[3];
          v181.i16[7] = (unint64_t)v181.u32[3] >> 48;
          v181.i16[0] = result->i16[v181.u32[0]];
          v181.i16[1] = result->i16[v181.u32[1]];
          v181.i16[2] = result->i16[v181.u32[2]];
          v181.i16[3] = result->i16[*((void *)&v136 + 1)];
          v181.i16[4] = result->i16[v183];
          v181.i16[5] = result->i16[*((void *)&v183 + 1)];
          v181.i16[6] = result->i16[v182];
          float v184 = (__int16 *)result + *((void *)&v182 + 1);
          uint16x8_t v185 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v164, (float16x8_t)0), v146));
          uint32x4_t v186 = vmovl_high_u16(v185);
          float16x8_t v187 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v185.i8);
          *(void *)&long long v136 = v186.u32[2];
          *((void *)&v136 + 1) = v186.u32[3];
          long long v188 = v136;
          *(void *)&long long v136 = v186.u32[0];
          *((void *)&v136 + 1) = v186.u32[1];
          long long v189 = v136;
          *((void *)&v136 + 1) = v187.u32[3];
          v187.i16[7] = (unint64_t)v187.u32[3] >> 48;
          v187.i16[0] = result->i16[v187.u32[0]];
          v187.i16[1] = result->i16[v187.u32[1]];
          v187.i16[2] = result->i16[v187.u32[2]];
          v187.i16[3] = result->i16[*((void *)&v136 + 1)];
          v187.i16[4] = result->i16[v189];
          v187.i16[5] = result->i16[*((void *)&v189 + 1)];
          v187.i16[6] = result->i16[v188];
          float16x8_t v190 = (float16x8_t)vuzp1q_s16((int16x8_t)v181, (int16x8_t)v187);
          v181.i16[7] = *v184;
          v187.i16[7] = result->i16[*((void *)&v188 + 1)];
          float16x8_t v191 = vmaxq_f16(vmlaq_n_f16(v165, v129, *(short float *)v347.i16), (float16x8_t)0);
          v113.i64[0] = 0x9000900090009000;
          v113.i64[1] = 0x9000900090009000;
          uint16x8_t v192 = vcvtq_u16_f16(vminq_f16(v191, v113));
          int16x8_t v193 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v192.i8);
          uint32x4_t v194 = vmovl_high_u16(v192);
          *(void *)&long long v136 = v194.u32[2];
          *((void *)&v136 + 1) = v194.u32[3];
          long long v195 = v136;
          *((void *)&v136 + 1) = v193.u32[3];
          v193.i16[7] = (unint64_t)v193.u32[3] >> 48;
          v193.i16[0] = result->i16[v193.u32[0]];
          v193.i16[1] = result->i16[v193.u32[1]];
          v193.i16[2] = result->i16[v193.u32[2]];
          v193.i16[3] = result->i16[*((void *)&v136 + 1)];
          v193.i16[4] = result->i16[v194.u32[0]];
          v193.i16[5] = result->i16[v194.u32[1]];
          v193.i16[6] = result->i16[v195];
          float16x8_t v196 = (float16x8_t)v193;
          v196.i16[7] = result->i16[*((void *)&v195 + 1)];
          *v80++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v75, v142, _H6), (float16x8_t)v158, v316), v178, v315), v75), v92)));
          *v112++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v75, v181, _H6), v187, v316), v196, v315), v75), v92)));
          _H9 = v348;
          int16x8_t v84 = (int16x8_t)vaddq_f16(vaddq_f16(vaddq_f16(v172, (float16x8_t)vuzp2q_s16((int16x8_t)v142, v158)), v190), (float16x8_t)vuzp2q_s16((int16x8_t)v181, (int16x8_t)v187));
          *(int8x8_t *)v84.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v77, v102, (float16x8_t)vzip1q_s16(v84, v84)), v104, (float16x8_t)vzip2q_s16(v84, v84)), v74, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16(v177, v177), (float16x8_t)vtrn2q_s16((int16x8_t)v178, (int16x8_t)v178)), (float16x8_t)vtrn1q_s16(v193, v193)), (float16x8_t)vtrn2q_s16((int16x8_t)v196, (int16x8_t)v196))), v106), v328)));
          *(void *)&v79[v110] = v84.i64[0];
          v110 += 8;
        }
        while ((int)v110 < (int)v24 - 7);
        float v197 = &v86[v110];
        float v198 = &v79[v110];
        size_t v199 = v24 & 0xFFFFFFF8;
        float16x8_t v63 = v344;
        float v43 = v304;
        _S27 = v345;
      }
      for (; v24 > v199; float16x8_t v92 = v331)
      {
        v84.i8[0] = v197[1];
        float v200 = (float)v84.u32[0] - v305;
        unsigned int v201 = LODWORD(v307);
        float v202 = v307 * v200;
        LOBYTE(v201) = v87->i8[0];
        float v203 = _S27 * (float)((float)v201 - v43);
        float v204 = (float)(v307 * v200) + v203;
        float v205 = 8191.0;
        if (v204 <= 8191.0)
        {
          float v205 = (float)(v307 * v200) + v203;
          if (v204 < 0.0) {
            float v205 = 0.0;
          }
        }
        LOBYTE(v204) = *v197;
        float v206 = (float)LODWORD(v204) - v305;
        float v207 = (float)(v306 * v200) + (float)(v206 * v336);
        float v208 = 8191.0;
        if ((float)(v203 + v207) <= 8191.0)
        {
          float v208 = v203 + v207;
          if ((float)(v203 + v207) < 0.0) {
            float v208 = 0.0;
          }
        }
        unsigned int v209 = LODWORD(v337);
        float v210 = v337 * v206;
        float v211 = (float)(v337 * v206) + v203;
        float v212 = 8191.0;
        if (v211 <= 8191.0)
        {
          float v212 = v211;
          if (v211 < 0.0) {
            float v212 = 0.0;
          }
        }
        LOBYTE(v211) = v87->i8[1];
        float v213 = _S27 * (float)((float)LODWORD(v211) - v43);
        float v214 = 8191.0;
        if ((float)(v202 + v213) <= 8191.0)
        {
          float v214 = v202 + v213;
          if ((float)(v202 + v213) < 0.0) {
            float v214 = 0.0;
          }
        }
        float v215 = 8191.0;
        if ((float)(v207 + v213) <= 8191.0)
        {
          float v215 = v207 + v213;
          if ((float)(v207 + v213) < 0.0) {
            float v215 = 0.0;
          }
        }
        float v216 = v210 + v213;
        float v217 = 8191.0;
        if (v216 <= 8191.0)
        {
          float v217 = v216;
          if (v216 < 0.0) {
            float v217 = 0.0;
          }
        }
        LOBYTE(v216) = v111->i8[0];
        float v218 = _S27 * (float)((float)LODWORD(v216) - v43);
        float v219 = 8191.0;
        if ((float)(v202 + v218) <= 8191.0)
        {
          float v219 = v202 + v218;
          if ((float)(v202 + v218) < 0.0) {
            float v219 = 0.0;
          }
        }
        float v220 = 8191.0;
        if ((float)(v207 + v218) <= 8191.0)
        {
          float v220 = v207 + v218;
          if ((float)(v207 + v218) < 0.0) {
            float v220 = 0.0;
          }
        }
        float v221 = v210 + v218;
        BOOL v222 = (float)(v210 + v218) <= 8191.0;
        float v223 = 8191.0;
        if (v222)
        {
          float v223 = v221;
          if (v221 < 0.0) {
            float v223 = 0.0;
          }
        }
        LOBYTE(v209) = v111->i8[1];
        float v224 = _S27 * (float)((float)v209 - v43);
        float v225 = v202 + v224;
        BOOL v222 = (float)(v202 + v224) <= 8191.0;
        float v226 = 8191.0;
        if (v222)
        {
          float v226 = v225;
          if (v225 < 0.0) {
            float v226 = 0.0;
          }
        }
        float v227 = v207 + v224;
        BOOL v222 = (float)(v207 + v224) <= 8191.0;
        float v228 = 8191.0;
        if (v222)
        {
          float v228 = v227;
          if (v227 < 0.0) {
            float v228 = 0.0;
          }
        }
        float16x8_t v229 = v63;
        float v230 = v43;
        float v231 = v210 + v224;
        BOOL v222 = (float)(v210 + v224) <= 8191.0;
        float v232 = 8191.0;
        if (v222)
        {
          float v232 = v231;
          if (v231 < 0.0) {
            float v232 = 0.0;
          }
        }
        _H1 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v205, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H3 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v208, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H5 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        _H16 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v214, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        _H19 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v215, 0.0), 8191.0))];
        _H12 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v217, 0.0), 8191.0))];
        __asm
        {
          FCVT            S19, H19
          FCVT            S12, H12
        }
        _H13 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v219, 0.0), 8191.0))];
        unsigned int v246 = llroundf(fminf(fmaxf(v220, 0.0), 8191.0));
        __asm { FCVT            S17, H13 }
        _H13 = *(_WORD *)&v59[2 * v246];
        __asm { FCVT            S13, H13 }
        _H7 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H2 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v226, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H11 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0))];
        _H10 = *(_WORD *)&v59[2 * llroundf(fminf(fmaxf(v232, 0.0), 8191.0))];
        __asm
        {
          FCVT            S11, H11
          FCVT            S10, H10
        }
        float v258 = (float)((float)(v343 * _S3) + (float)(_S1 * _S31)) + (float)(_S5 * v327);
        float v259 = (float)((float)(v323 * _S3) + (float)(_S1 * v325)) + (float)(_S5 * v321);
        _S5 = (float)((float)(v319 * _S3) + (float)(_S1 * v320)) + (float)(_S5 * v318);
        _S18 = (float)((float)(v343 * _S19) + (float)(_S16 * _S31)) + (float)(_S12 * v327);
        _S20 = (float)((float)(v323 * _S19) + (float)(_S16 * v325)) + (float)(_S12 * v321);
        _S16 = (float)((float)(v319 * _S19) + (float)(_S16 * v320)) + (float)(_S12 * v318);
        float v264 = (float)((float)(v343 * _S13) + (float)(_S17 * _S31)) + (float)(_S7 * v327);
        float v265 = (float)((float)(v323 * _S13) + (float)(_S17 * v325)) + (float)(_S7 * v321);
        _S17 = (float)((float)(v319 * _S13) + (float)(_S17 * v320)) + (float)(_S7 * v318);
        float v267 = (float)((float)(v343 * _S11) + (float)(_S2 * _S31)) + (float)(_S10 * v327);
        float v268 = (float)((float)(v323 * _S11) + (float)(_S2 * v325)) + (float)(_S10 * v321);
        float v269 = (float)((float)(v319 * _S11) + (float)(_S2 * v320)) + (float)(_S10 * v318);
        LOWORD(_S1) = result->i16[llroundf(fminf(fmaxf(v258, 0.0), 8191.0))];
        __asm { FCVT            S3, H1 }
        LOWORD(_S1) = result->i16[llroundf(fminf(fmaxf(v259, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        LOWORD(_S2) = result->i16[llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        LOWORD(_S5) = result->i16[llroundf(fminf(fmaxf(_S18, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        LOWORD(_S7) = result->i16[llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
        LOWORD(_S16) = result->i16[llroundf(fminf(fmaxf(_S16, 0.0), 8191.0))];
        __asm
        {
          FCVT            S19, H7
          FCVT            S7, H16
        }
        LOWORD(_S16) = result->i16[llroundf(fminf(fmaxf(v264, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        LOWORD(_S18) = result->i16[llroundf(fminf(fmaxf(v265, 0.0), 8191.0))];
        __asm { FCVT            S10, H18 }
        LOWORD(_S17) = result->i16[llroundf(fminf(fmaxf(_S17, 0.0), 8191.0))];
        __asm { FCVT            S11, H17 }
        LOWORD(_S17) = result->i16[llroundf(fminf(fmaxf(v267, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        LOWORD(_S18) = result->i16[llroundf(fminf(fmaxf(v268, 0.0), 8191.0))];
        LOWORD(_S20) = result->i16[llroundf(fminf(fmaxf(v269, 0.0), 8191.0))];
        __asm
        {
          FCVT            S18, H18
          FCVT            S20, H20
        }
        float v282 = (float)((float)((float)(v338 * _S1) + (float)(v339 * _S3)) + (float)(v340 * _S2)) + v49;
        if (v282 < v49) {
          float v283 = v49;
        }
        else {
          float v283 = (float)((float)((float)(v338 * _S1) + (float)(v339 * _S3)) + (float)(v340 * _S2)) + v49;
        }
        BOOL v222 = v282 <= v334;
        float v284 = (float)((float)((float)(v338 * _S19) + (float)(v339 * _S5)) + (float)(v340 * _S7)) + v49;
        if (!v222) {
          float v283 = v334;
        }
        __int8 v285 = llroundf(v283);
        if (v284 < v49) {
          float v286 = v49;
        }
        else {
          float v286 = (float)((float)((float)(v338 * _S19) + (float)(v339 * _S5)) + (float)(v340 * _S7)) + v49;
        }
        BOOL v222 = v284 <= v334;
        float v287 = (float)((float)((float)(v338 * _S10) + (float)(v339 * _S16)) + (float)(v340 * _S11)) + v49;
        if (!v222) {
          float v286 = v334;
        }
        __int8 v288 = llroundf(v286);
        if (v287 < v49) {
          float v289 = v49;
        }
        else {
          float v289 = (float)((float)((float)(v338 * _S10) + (float)(v339 * _S16)) + (float)(v340 * _S11)) + v49;
        }
        BOOL v222 = v287 <= v334;
        float v290 = (float)((float)((float)(v338 * _S18) + (float)(v339 * _S17)) + (float)(v340 * _S20)) + v49;
        if (!v222) {
          float v289 = v334;
        }
        __int8 v291 = llroundf(v289);
        if (v290 < v49) {
          float v292 = v49;
        }
        else {
          float v292 = (float)((float)((float)(v338 * _S18) + (float)(v339 * _S17)) + (float)(v340 * _S20)) + v49;
        }
        if (v290 <= v334) {
          float v293 = v292;
        }
        else {
          float v293 = v334;
        }
        float v294 = (float)((float)(_S3 + _S5) + _S16) + _S17;
        float v295 = (float)((float)(_S1 + _S19) + _S10) + _S18;
        v80->i8[0] = v285;
        v80->i8[1] = v288;
        v112->i8[0] = v291;
        v112->i8[1] = llroundf(v293);
        float v296 = (float)((float)(_S2 + _S7) + _S11) + _S20;
        float v297 = (float)((float)(v335 + (float)(v294 * v10.f32[0])) + (float)(v295 * v16.f32[0]))
             + (float)(v296 * *(float *)&v107);
        float v298 = v349;
        if (v297 <= v349)
        {
          float v298 = (float)((float)(v335 + (float)(v294 * v10.f32[0])) + (float)(v295 * v16.f32[0]))
               + (float)(v296 * *(float *)&v107);
          if (v297 < v346) {
            float v298 = v346;
          }
        }
        *(float *)v84.i32 = (float)((float)(v335 + (float)(v294 * v10.f32[1])) + (float)(v295 * v16.f32[1]))
                          + (float)(v296 * *((float *)&v107 + 1));
        *float v198 = llroundf(v298);
        float v299 = v349;
        float v43 = v230;
        float16x8_t v63 = v229;
        float16x8_t v102 = (float16x8_t)v341;
        _H9 = v348;
        if (*(float *)v84.i32 <= v349)
        {
          float v299 = *(float *)v84.i32;
          if (*(float *)v84.i32 < v346) {
            float v299 = v346;
          }
        }
        v199 += 2;
        v197 += 2;
        BOOL v87 = (int8x8_t *)((char *)v87 + 2);
        uint16x8_t v111 = (int8x8_t *)((char *)v111 + 2);
        v198[1] = llroundf(v299);
        float v80 = (int8x8_t *)((char *)v80 + 2);
        float v112 = (int8x8_t *)((char *)v112 + 2);
        v198 += 2;
        _S27 = v345;
        float16x8_t v72 = v322;
        float16x8_t v104 = v324;
        float16x8_t v74 = v326;
        float16x8_t v77 = v332;
        float16x8_t v75 = v333;
        float16x8_t v105 = v342;
        float16x8_t v106 = v330;
      }
      BOOL v87 = (int8x8_t *)&v108[v35];
      v86 += v36;
      float v80 = (int8x8_t *)&v109[v37];
      v79 += v38;
      v23 += 2;
    }
    while (v27 > v23);
    if (v303 && v302)
    {
      do
      {
        uint64_t result = (float32x2_t *)memcpy(v61, v60, v24);
        v60 += v300;
        v61 += v39;
        --v27;
      }
      while (v27);
    }
    else if (v302)
    {
      do
      {
        if (v24) {
          uint64_t result = (float32x2_t *)memset(v61, 255, v24);
        }
        v61 += v39;
        --v27;
      }
      while (v27);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_420vf_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Mat_TRC_420vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    uint64_t v13 = *(void *)((char *)result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (void *)result[16];
    uint64_t v17 = result[15] + 2 * (result[13] * a2 / v7);
    uint64_t v18 = result[19];
    uint64_t v19 = (void *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = (char *)(v25 + v24 * v13 + v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + v15);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    LOWORD(a6) = *(_WORD *)(v18 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a6);
    float v35 = v32 * *(float *)v18;
    float v188 = v32 * *(float *)(v18 + 16);
    float v189 = v32 * *(float *)(v18 + 8);
    float v36 = v32 * *(float *)(v18 + 20);
    *(float *)&unsigned int v37 = v32 * *(float *)(v18 + 28);
    float v186 = *(float *)&v37;
    float v187 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    *(float *)&unsigned int v41 = (float)v37;
    float v191 = *(float *)&v41;
    LOWORD(v41) = *(_WORD *)(v18 + 152);
    float v42 = (float)v41;
    float v182 = *(float *)(v18 + 40);
    float v183 = *(float *)(v18 + 36);
    float v180 = *(float *)(v18 + 48) * 0.25;
    float v181 = *(float *)(v18 + 44);
    float v178 = *(float *)(v18 + 56) * 0.25;
    float v179 = *(float *)(v18 + 52) * 0.25;
    float v176 = *(float *)(v18 + 64) * 0.25;
    float v177 = *(float *)(v18 + 60) * 0.25;
    float v43 = *(float *)(v18 + 72);
    float v44 = *(float *)(v18 + 68) * 0.25;
    float v175 = v44;
    float v46 = *(float *)(v18 + 76);
    float v45 = *(float *)(v18 + 80);
    float v47 = *(float *)(v18 + 84);
    float v48 = *(float *)(v18 + 88);
    float v49 = *(float *)(v18 + 92);
    float v50 = *(float *)(v18 + 96);
    float v51 = *(float *)(v18 + 100);
    float v52 = *(float *)(v18 + 104);
    uint64_t v53 = v18 + 164;
    uint64_t v54 = v18 + 16548;
    uint64_t v55 = v16[1];
    uint64_t v56 = (unsigned char *)(*v16 + v27 * v17 + v15);
    if (v17 >= 0) {
      uint64_t v57 = v17;
    }
    else {
      uint64_t v57 = v17 + 1;
    }
    uint64_t v58 = v55 + v28 * (v57 >> 1);
    uint64_t v59 = v19[1];
    size_t v60 = (unsigned char *)(*v19 + v22 * v13 + v12);
    uint64_t result = (void *)(v58 + v15);
    uint64_t v61 = v59 + v23 * (v13 / 2) + v12;
    float v190 = v35;
    float v184 = v42;
    float v185 = v39;
    do
    {
      float v62 = &v60[v22];
      float16x8_t v63 = &v56[v27];
      if (v11)
      {
        size_t v64 = 0;
        float32x4_t v65 = &v60[v22];
        short float v66 = &v56[v27];
        do
        {
          LOBYTE(v44) = *(unsigned char *)(v61 + v64 + 1);
          float v67 = (float)LODWORD(v44) - v34;
          unsigned int v68 = LODWORD(v189);
          float v69 = v189 * v67;
          LOBYTE(v68) = *v60;
          float v70 = (float)v68 - v33;
          float v71 = v35 * v70;
          float v72 = (float)(v189 * v67) + (float)(v35 * v70);
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = (float)(v189 * v67) + (float)(v35 * v70);
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          LOBYTE(v70) = *(unsigned char *)(v61 + v64);
          float v74 = (float)LODWORD(v70) - v34;
          float v75 = (float)(v187 * v67) + (float)(v74 * v188);
          float v76 = 8191.0;
          if ((float)(v71 + v75) <= 8191.0)
          {
            float v76 = v71 + v75;
            if ((float)(v71 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          unsigned int v77 = LODWORD(v186);
          float v78 = v186 * v74;
          float v79 = (float)(v186 * v74) + v71;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          LOBYTE(v77) = v60[1];
          float v81 = (float)v77 - v33;
          float v82 = v35 * v81;
          float v83 = v69 + (float)(v35 * v81);
          float v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v84 = v69 + (float)(v35 * v81);
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v75 + v82;
          float v86 = 8191.0;
          if ((float)(v75 + v82) <= 8191.0)
          {
            float v86 = v75 + v82;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v78 + v82;
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          LOBYTE(v81) = *v65;
          float v89 = v35 * (float)((float)LODWORD(v81) - v33);
          float v90 = 8191.0;
          if ((float)(v69 + v89) <= 8191.0)
          {
            float v90 = v69 + v89;
            if ((float)(v69 + v89) < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = 8191.0;
          if ((float)(v75 + v89) <= 8191.0)
          {
            float v91 = v75 + v89;
            if ((float)(v75 + v89) < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v78 + v89;
          BOOL v93 = (float)(v78 + v89) <= 8191.0;
          float v94 = 8191.0;
          if (v93)
          {
            float v94 = v92;
            if (v92 < 0.0) {
              float v94 = 0.0;
            }
          }
          LOBYTE(v85) = v65[1];
          float v95 = v35 * (float)((float)LODWORD(v85) - v33);
          float v96 = v69 + v95;
          BOOL v93 = (float)(v69 + v95) <= 8191.0;
          float v97 = 8191.0;
          if (v93)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          float v98 = v75 + v95;
          BOOL v93 = (float)(v75 + v95) <= 8191.0;
          float v99 = 8191.0;
          if (v93)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          float v100 = v34;
          float v101 = v78 + v95;
          float v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            float v102 = v101;
            if (v101 < 0.0) {
              float v102 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H17 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          _H19 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H19
            FCVT            S24, H24
          }
          _H27 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          unsigned int v120 = llroundf(fminf(fmaxf(v91, 0.0), 8191.0));
          __asm { FCVT            S1, H27 }
          _H27 = *(_WORD *)(v53 + 2 * v120);
          __asm { FCVT            S27, H27 }
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H7 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H25 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          __asm
          {
            FCVT            S25, H25
            FCVT            S26, H26
          }
          float v132 = (float)((float)(v46 * _S5) + (float)(_S4 * v43)) + (float)(_S6 * v45);
          float v133 = (float)((float)(v48 * _S5) + (float)(_S4 * v47)) + (float)(_S6 * v49);
          _S4 = (float)((float)(v51 * _S5) + (float)(_S4 * v50)) + (float)(_S6 * v52);
          _S6 = (float)((float)(v46 * _S19) + (float)(_S17 * v43)) + (float)(_S24 * v45);
          _S3 = (float)((float)(v48 * _S19) + (float)(_S17 * v47)) + (float)(_S24 * v49);
          _S17 = (float)((float)(v51 * _S19) + (float)(_S17 * v50)) + (float)(_S24 * v52);
          float v138 = (float)((float)(v46 * _S27) + (float)(_S1 * v43)) + (float)(_S2 * v45);
          _S21 = (float)((float)(v48 * _S27) + (float)(_S1 * v47)) + (float)(_S2 * v49);
          _S1 = (float)((float)(v51 * _S27) + (float)(_S1 * v50)) + (float)(_S2 * v52);
          float v141 = (float)((float)(v46 * _S25) + (float)(_S7 * v43)) + (float)(_S26 * v45);
          float v142 = (float)((float)(v48 * _S25) + (float)(_S7 * v47)) + (float)(_S26 * v49);
          float v143 = (float)((float)(v51 * _S25) + (float)(_S7 * v50)) + (float)(_S26 * v52);
          LOWORD(_S2) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          LOWORD(_S2) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          LOWORD(_S4) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          LOWORD(_S6) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          LOWORD(_S3) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm
          {
            FCVT            S19, H3
            FCVT            S7, H7
          }
          LOWORD(_S3) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0)));
          __asm { FCVT            S24, H17 }
          LOWORD(_S1) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S25, H1 }
          LOWORD(_S1) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v141, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          LOWORD(_S17) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          LOWORD(_S21) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S21, H21
          }
          float v156 = (float)((float)((float)(v182 * _S2) + (float)(v183 * _S5)) + (float)(v181 * _S4)) + v38;
          if (v156 < v38) {
            float v157 = v38;
          }
          else {
            float v157 = (float)((float)((float)(v182 * _S2) + (float)(v183 * _S5)) + (float)(v181 * _S4)) + v38;
          }
          BOOL v93 = v156 <= v40;
          float v158 = (float)((float)((float)(v182 * _S19) + (float)(v183 * _S6)) + (float)(v181 * _S7)) + v38;
          if (!v93) {
            float v157 = v40;
          }
          char v159 = llroundf(v157);
          if (v158 < v38) {
            float v160 = v38;
          }
          else {
            float v160 = (float)((float)((float)(v182 * _S19) + (float)(v183 * _S6)) + (float)(v181 * _S7)) + v38;
          }
          BOOL v93 = v158 <= v40;
          float v161 = (float)((float)((float)(v182 * _S24) + (float)(v183 * _S3)) + (float)(v181 * _S25)) + v38;
          if (!v93) {
            float v160 = v40;
          }
          char v162 = llroundf(v160);
          if (v161 < v38) {
            float v163 = v38;
          }
          else {
            float v163 = (float)((float)((float)(v182 * _S24) + (float)(v183 * _S3)) + (float)(v181 * _S25)) + v38;
          }
          BOOL v93 = v161 <= v40;
          float v164 = (float)((float)((float)(v182 * _S17) + (float)(v183 * _S1)) + (float)(v181 * _S21)) + v38;
          if (!v93) {
            float v163 = v40;
          }
          char v165 = llroundf(v163);
          if (v164 < v38) {
            float v166 = v38;
          }
          else {
            float v166 = (float)((float)((float)(v182 * _S17) + (float)(v183 * _S1)) + (float)(v181 * _S21)) + v38;
          }
          if (v164 <= v40) {
            float v167 = v166;
          }
          else {
            float v167 = v40;
          }
          float v168 = (float)((float)(_S5 + _S6) + _S3) + _S1;
          float v169 = (float)((float)(_S2 + _S19) + _S24) + _S17;
          *uint64_t v56 = v159;
          v56[1] = v162;
          *short float v66 = v165;
          v66[1] = llroundf(v167);
          float v170 = (float)((float)(_S4 + _S7) + _S25) + _S21;
          float v171 = (float)((float)(v185 + (float)(v168 * v180)) + (float)(v169 * v179)) + (float)(v170 * v178);
          float v172 = v184;
          if (v171 <= v184)
          {
            float v172 = (float)((float)(v185 + (float)(v168 * v180)) + (float)(v169 * v179)) + (float)(v170 * v178);
            if (v171 < v191) {
              float v172 = v191;
            }
          }
          float v44 = (float)(v185 + (float)(v168 * v177)) + (float)(v169 * v176);
          float v173 = v44 + (float)(v170 * v175);
          *((unsigned char *)result + v64) = llroundf(v172);
          float v174 = v184;
          float v34 = v100;
          if (v173 <= v184)
          {
            float v44 = v191;
            float v174 = v173;
            if (v173 < v191) {
              float v174 = v191;
            }
          }
          v60 += 2;
          v65 += 2;
          v56 += 2;
          v66 += 2;
          *((unsigned char *)result + v64 + 1) = llroundf(v174);
          v64 += 2;
          float v35 = v190;
        }
        while (v11 > v64);
      }
      size_t v60 = &v62[v22];
      v61 += v23;
      uint64_t v56 = &v63[v27];
      uint64_t result = (void *)((char *)result + v28);
      v10 += 2;
    }
    while (v14 > v10);
    if (v25 && v30)
    {
      do
      {
        uint64_t result = memcpy(v31, v26, v11);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_420vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_420vf_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_420vf_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double _D0)
{
  uint64_t v12 = *(void *)(result + 28);
  unint64_t v13 = 2 * *result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (2 * v15 != 2 * v14)
  {
    unint64_t v16 = 0;
    size_t v17 = *(void *)(result + 20);
    uint64_t v18 = *(void *)(result + 36);
    uint64_t v19 = *(void *)(result + 44) + 2 * v14;
    unint64_t v20 = 2 * v15 - 2 * v14;
    uint64_t v21 = *((void *)result + 14);
    size_t v22 = (uint64_t *)*((void *)result + 16);
    uint64_t v23 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v13);
    uint64_t v24 = (float32x2_t *)*((void *)result + 19);
    uint64_t v26 = (uint64_t *)*((void *)result + 7);
    uint64_t v25 = (uint64_t *)*((void *)result + 8);
    uint64_t v27 = (uint64_t *)*((void *)result + 17);
    uint64_t v28 = *v25;
    uint64_t v29 = v25[1];
    uint64_t v30 = v25[2];
    uint64_t v146 = v26[2];
    uint64_t v31 = *v27;
    uint64_t v32 = v27[1];
    uint64_t v33 = v27[2];
    uint64_t v145 = v22[2];
    unsigned int v34 = v24[17].u16[2];
    unsigned int v35 = v24[17].u16[3];
    v36.i32[0] = v24[3].i32[1];
    unsigned int v37 = v24[18].u16[0];
    unsigned int v38 = v24[18].u16[1];
    unsigned int v39 = v24[18].u16[2];
    unsigned int v40 = v24[18].u16[3];
    unsigned int v41 = v24[19].u16[0];
    LODWORD(_D0) = v24[4].i32[1];
    _S1 = v24[5].f32[0];
    _S2 = v24[5].f32[1];
    v44.i32[0] = v24[6].i32[0];
    v45.i32[0] = v24[6].i32[1];
    v8.i32[0] = v24[7].i32[0];
    float v46 = (float)v34;
    *(short float *)v7.i16 = (short float)v34;
    float v47 = (char *)(v146 + v30 * v19 + v18);
    float v48 = (char *)(v145 + v33 * v23 + v21);
    v9.f32[0] = (float)v24[17].u32[0] / (float)v24[16].u32[0];
    float v49 = (float)v37;
    float v152 = (float)v38;
    float v50 = (float)v39;
    _S16 = v9.f32[0] * v24->f32[0];
    float v163 = (float)v40;
    float v52 = (float)v41;
    __asm { FCVT            H8, S16 }
    int16x8_t v58 = vdupq_lane_s16(v7, 0);
    v36.i32[1] = v24[1].i32[0];
    *(float32x2_t *)v6.f32 = vmul_n_f32(v36, v9.f32[0]);
    *(float32x2_t *)v9.f32 = vmul_n_f32(v24[2], v9.f32[0]);
    short float v59 = -(short float)v35;
    float16x8_t v150 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v9), 0);
    float16x8_t v151 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    float32x4_t v61 = (float32x4_t)vmulq_n_f16(v151, v59);
    float16x8_t v148 = vmulq_n_f16(v150, v59);
    float16x8_t v149 = (float16x8_t)v61;
    __asm { FCVT            H9, S0 }
    v44.i32[1] = v24[7].i32[1];
    __asm
    {
      FCVT            H10, S1
      FMOV            V18.2S, #0.25
    }
    *(float32x2_t *)v61.f32 = vmul_f32(v44, _D18);
    float32x4_t v62 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v61), 0);
    float16x8_t v147 = (float16x8_t)v62;
    v45.i32[1] = v24[8].i32[0];
    *(float32x2_t *)v62.f32 = vmul_f32(v45, _D18);
    int32x4_t v63 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v62), 0);
    v8.i32[1] = v24[8].i32[1];
    *(float32x2_t *)v8.i8 = vmul_f32(*(float32x2_t *)v8.i8, _D18);
    int16x4_t v69 = (int16x4_t)vcvt_f16_f32((float32x4_t)v8);
    int32x4_t v64 = vdupq_lane_s32((int32x2_t)v69, 0);
    *(short float *)v69.i16 = (short float)v37;
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16(v69, 0);
    *(short float *)v69.i16 = (short float)v38;
    int16x8_t v66 = vdupq_lane_s16(v69, 0);
    *(short float *)v69.i16 = (short float)v39;
    int16x8_t v67 = vdupq_lane_s16(v69, 0);
    *(short float *)v69.i16 = (short float)v40;
    int16x8_t v68 = vdupq_lane_s16(v69, 0);
    *(short float *)v69.i16 = (short float)v41;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(v69, 0);
    if (v23 >= 0) {
      uint64_t v71 = v23;
    }
    else {
      uint64_t v71 = v23 + 1;
    }
    uint64_t v72 = *v22;
    float v73 = (unsigned char *)(v22[1] + v32 * (v71 >> 1) + v21);
    float v74 = (int8x8_t *)(v72 + v31 * v23 + v21);
    if (v19 >= 0) {
      uint64_t v75 = v19;
    }
    else {
      uint64_t v75 = v19 + 1;
    }
    uint64_t v76 = *v26;
    unsigned int v77 = (__int8 *)(v26[1] + v29 * (v75 >> 1) + v18);
    uint64_t result = (unsigned __int8 *)(v76 + v28 * v19 + v18);
    __asm { FCVT            H14, S2 }
    uint64_t v78 = v6.i64[0];
    float v162 = v9.f32[0];
    float v161 = v61.f32[0];
    float v160 = v62.f32[0];
    float16x8_t v159 = (float16x8_t)v64;
    uint64_t v79 = v8.i64[0];
    int16x8_t v156 = v66;
    int32x4_t v157 = v63;
    float16x8_t v158 = (float16x8_t)v68;
    float16x8_t v154 = v70;
    int16x8_t v155 = v58;
    __int32 v153 = _Q14.i32[0];
    do
    {
      float v80 = &result[v28];
      float v81 = (char *)v74 + v31;
      if ((int)v17 < 8)
      {
        size_t v113 = 0;
        float v112 = v73;
        float v84 = (int8x8_t *)((char *)v74 + v31);
        uint16x8_t v111 = v77;
        float v83 = (int8x8_t *)&result[v28];
        float v115 = v152;
        float v114 = (float)v35;
      }
      else
      {
        uint64_t v82 = 0;
        float v83 = (int8x8_t *)&result[v28];
        float v84 = (int8x8_t *)((char *)v74 + v31);
        float16x8_t v85 = (float16x8_t)v66;
        float16x8_t v86 = (float16x8_t)v67;
        long long v87 = _Q10;
        long long v88 = _Q9;
        float16x8_t v89 = (float16x8_t)v58;
        short float v90 = *(short float *)_Q14.i16;
        do
        {
          int8x8_t v91 = *(int8x8_t *)&v77[v82];
          *(int8x8_t *)v92.i8 = vzip1_s8(v91, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v91, 0);
          float16x8_t v93 = vcvtq_f16_u16(v92);
          int8x16_t v94 = (int8x16_t)vmlaq_f16(v149, v151, v93);
          float16x8_t v95 = (float16x8_t)v63;
          int8x16_t v96 = (int8x16_t)vmlaq_f16(v148, v150, v93);
          v93.i64[0] = vextq_s8(v94, v94, 8uLL).u64[0];
          *(int16x4_t *)v97.i8 = vuzp1_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v93.i8);
          *(int16x4_t *)v93.i8 = vuzp2_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v93.i8);
          *(double *)&v93.i64[1] = _D0;
          float16x8_t v98 = (float16x8_t)vzip1q_s16((int16x8_t)v93, (int16x8_t)v93);
          *(double *)&v97.i64[1] = _D0;
          float16x8_t v99 = (float16x8_t)vzip1q_s16(v97, v97);
          v93.i64[0] = vextq_s8(v96, v96, 8uLL).u64[0];
          *(float16x4_t *)v93.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v93.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v93.i8));
          *(double *)&v93.i64[1] = _D0;
          int8x8_t v100 = *(int8x8_t *)result;
          result += 8;
          float16x8_t v101 = (float16x8_t)vzip1q_s16((int16x8_t)v93, (int16x8_t)v93);
          *(int8x8_t *)v97.i8 = vzip1_s8(v100, 0);
          v97.u64[1] = (unint64_t)vzip2_s8(v100, 0);
          int8x8_t v102 = *v83++;
          *(int8x8_t *)v103.i8 = vzip1_s8(v102, 0);
          v103.u64[1] = (unint64_t)vzip2_s8(v102, 0);
          float16x8_t v104 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v97), v89);
          float16x8_t v105 = vsubq_f16(vcvtq_f16_u16(v103), v89);
          float16x8_t v11 = vmlaq_n_f16(v98, v104, _H8);
          float16x8_t v106 = vmlaq_n_f16(v98, v105, _H8);
          float16x8_t v107 = vmlaq_n_f16(v101, v104, _H8);
          _Q14 = vmlaq_n_f16(v101, v105, _H8);
          float16x8_t v108 = vmlaq_n_f16(v99, v104, _H8);
          float16x8_t v109 = vmlaq_n_f16(v99, v105, _H8);
          *v74++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v11, *(short float *)&v88), v107, *(short float *)&v87), v108, v90), v65), v86)));
          *v84++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v106, *(short float *)&v88), _Q14, *(short float *)&v87), v109, v90), v65), v86)));
          int32x4_t v63 = (int32x4_t)v95;
          int16x8_t v110 = (int16x8_t)vaddq_f16((float16x8_t)vuzp2q_s16((int16x8_t)v106, (int16x8_t)_Q14), vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v106, (int16x8_t)_Q14), vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v11, (int16x8_t)v107), (float16x8_t)vuzp2q_s16((int16x8_t)v11, (int16x8_t)v107))));
          float16x8_t v8 = (float16x8_t)vzip1q_s16(v110, v110);
          float16x8_t v10 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v85, v147, v8), v95, (float16x8_t)vzip2q_s16(v110, v110)), v159, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v109, (int16x8_t)v109), vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v109, (int16x8_t)v109), vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v108, (int16x8_t)v108), (float16x8_t)vtrn2q_s16((int16x8_t)v108, (int16x8_t)v108)))));
          int16x4_t v69 = (int16x4_t)vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v10, v158), v70)));
          *(int16x4_t *)&v73[v82] = v69;
          v82 += 8;
        }
        while ((int)v82 < (int)v17 - 7);
        uint16x8_t v111 = &v77[v82];
        float v112 = &v73[v82];
        size_t v113 = v17 & 0xFFFFFFF8;
        float v115 = v152;
        float v114 = (float)v35;
        _Q9 = v88;
        _Q10 = v87;
        int16x8_t v67 = (int16x8_t)v86;
      }
      while (v17 > v113)
      {
        v69.i8[0] = *v111;
        float v116 = (float)v69.u32[0] - v114;
        v8.i8[0] = v111[1];
        float v117 = (float)v8.u32[0] - v114;
        float v118 = *((float *)&v78 + 1) * v117;
        float v119 = (float)(v9.f32[1] * v117) + (float)(v116 * v162);
        float v120 = *(float *)&v78 * v116;
        v10.i8[0] = *result;
        float v121 = _S16 * (float)((float)v10.u32[0] - v46);
        v63.i8[0] = result[1];
        float v122 = _S16 * (float)((float)v63.u32[0] - v46);
        v11.i8[0] = v83->i8[0];
        float v123 = _S16 * (float)((float)v11.u32[0] - v46);
        _Q14.i8[0] = v83->i8[1];
        float v124 = _S16 * (float)((float)_Q14.u32[0] - v46);
        float v125 = v118 + v121;
        float v126 = v121 + v119;
        float v127 = v120 + v121;
        *(float *)v10.i32 = v118 + v122;
        float v128 = v119 + v122;
        *(float *)v63.i32 = v120 + v122;
        float v129 = v118 + v123;
        float v130 = v119 + v123;
        *(float *)v11.i32 = v120 + v123;
        float v131 = v118 + v124;
        *(float *)v8.i32 = v119 + v124;
        *(float *)v69.i32 = v120 + v124;
        *(float *)_Q14.i32 = (float)((float)((float)(_S1 * v126) + (float)(*(float *)&_D0 * v125)) + (float)(_S2 * v127))
                           + v49;
        if (*(float *)_Q14.i32 < v49) {
          float v132 = v49;
        }
        else {
          float v132 = (float)((float)((float)(_S1 * v126) + (float)(*(float *)&_D0 * v125)) + (float)(_S2 * v127)) + v49;
        }
        BOOL v133 = *(float *)_Q14.i32 <= v50;
        float v134 = (float)((float)((float)(_S1 * v128) + (float)(*(float *)&_D0 * *(float *)v10.i32))
                     + (float)(_S2 * *(float *)v63.i32))
             + v49;
        if (!v133) {
          float v132 = v50;
        }
        __int8 v135 = llroundf(v132);
        if (v134 < v49) {
          float v136 = v49;
        }
        else {
          float v136 = (float)((float)((float)(_S1 * v128) + (float)(*(float *)&_D0 * *(float *)v10.i32))
        }
                       + (float)(_S2 * *(float *)v63.i32))
               + v49;
        BOOL v133 = v134 <= v50;
        float v137 = (float)((float)((float)(_S1 * v130) + (float)(*(float *)&_D0 * v129)) + (float)(_S2 * *(float *)v11.i32))
             + v49;
        if (!v133) {
          float v136 = v50;
        }
        __int8 v138 = llroundf(v136);
        if (v137 < v49) {
          float v139 = v49;
        }
        else {
          float v139 = (float)((float)((float)(_S1 * v130) + (float)(*(float *)&_D0 * v129)) + (float)(_S2 * *(float *)v11.i32))
        }
               + v49;
        BOOL v133 = v137 <= v50;
        *(float *)_Q14.i32 = (float)((float)((float)(_S1 * *(float *)v8.i32) + (float)(*(float *)&_D0 * v131))
                                   + (float)(_S2 * *(float *)v69.i32))
                           + v49;
        if (!v133) {
          float v139 = v50;
        }
        __int8 v140 = llroundf(v139);
        if (*(float *)_Q14.i32 < v49) {
          float v141 = v49;
        }
        else {
          float v141 = (float)((float)((float)(_S1 * *(float *)v8.i32) + (float)(*(float *)&_D0 * v131))
        }
                       + (float)(_S2 * *(float *)v69.i32))
               + v49;
        if (*(float *)_Q14.i32 > v50) {
          float v141 = v50;
        }
        float v142 = (float)((float)(v125 + *(float *)v10.i32) + v129) + v131;
        *(float *)v10.i32 = (float)((float)(v126 + v128) + v130) + *(float *)v8.i32;
        v74->i8[0] = v135;
        v74->i8[1] = v138;
        v84->i8[0] = v140;
        v84->i8[1] = llroundf(v141);
        *(float *)v8.i32 = (float)(v115 + (float)(v142 * v161)) + (float)(*(float *)v10.i32 * v160);
        *(float *)v63.i32 = (float)((float)(v127 + *(float *)v63.i32) + *(float *)v11.i32) + *(float *)v69.i32;
        float v143 = *(float *)v8.i32 + (float)(*(float *)v63.i32 * *(float *)&v79);
        *(float *)v11.i32 = v52;
        if (v143 <= v52)
        {
          *(float *)v11.i32 = *(float *)v8.i32 + (float)(*(float *)v63.i32 * *(float *)&v79);
          if (v143 < v163) {
            *(float *)v11.i32 = v163;
          }
        }
        float v144 = (float)((float)(v115 + (float)(v142 * v61.f32[1])) + (float)(*(float *)v10.i32 * v62.f32[1]))
             + (float)(*(float *)v63.i32 * *((float *)&v79 + 1));
        *float v112 = llroundf(*(float *)v11.i32);
        *(float *)v69.i32 = v52;
        if (v144 <= v52)
        {
          *(float *)v69.i32 = v144;
          if (v144 < v163) {
            *(float *)v69.i32 = v163;
          }
        }
        v113 += 2;
        v111 += 2;
        result += 2;
        float v83 = (int8x8_t *)((char *)v83 + 2);
        v112[1] = llroundf(*(float *)v69.i32);
        float v74 = (int8x8_t *)((char *)v74 + 2);
        float v84 = (int8x8_t *)((char *)v84 + 2);
        v112 += 2;
      }
      uint64_t result = &v80[v28];
      v77 += v29;
      float v74 = (int8x8_t *)&v81[v31];
      v73 += v32;
      v16 += 2;
      int16x8_t v66 = v156;
      int32x4_t v63 = v157;
      float16x8_t v70 = v154;
      int16x8_t v58 = v155;
      _Q14.i32[0] = v153;
    }
    while (v20 > v16);
    if (v146 && v145)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v48, v47, v17);
        v47 += v30;
        v48 += v33;
        --v20;
      }
      while (v20);
    }
    else if (v145)
    {
      do
      {
        if (v17) {
          uint64_t result = (unsigned __int8 *)memset(v48, 255, v17);
        }
        v48 += v33;
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_420vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_420vf_GCD);
  return 0;
}

void *vt_Copy_420vf_rgb_420vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v15 = *(void *)((char *)result + 28);
  unint64_t v16 = 2 * *(unsigned __int8 *)result;
  unint64_t v17 = v15 * a2 / v16;
  unint64_t v18 = (v15 + v15 * a2) / v16;
  if (2 * v18 != 2 * v17)
  {
    unint64_t v19 = 0;
    size_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    uint64_t v22 = *(void *)((char *)result + 44) + 2 * v17;
    unint64_t v23 = 2 * v18 - 2 * v17;
    uint64_t v24 = result[14];
    uint64_t v25 = (void *)result[16];
    uint64_t v26 = result[15] + 2 * (result[13] * a2 / v16);
    uint64_t v27 = result[19];
    uint64_t v29 = (void *)result[7];
    uint64_t v28 = (uint64_t *)result[8];
    uint64_t v30 = (uint64_t *)result[17];
    uint64_t v31 = *v28;
    uint64_t v32 = v28[1];
    uint64_t v33 = v28[2];
    uint64_t v34 = v29[2];
    uint64_t v35 = (char *)(v34 + v33 * v22 + v21);
    uint64_t v36 = *v30;
    uint64_t v37 = v30[1];
    uint64_t v38 = v30[2];
    uint64_t v39 = v25[2];
    uint64_t v40 = (char *)(v39 + v38 * v26 + v24);
    LOWORD(a5) = *(_WORD *)(v27 + 140);
    LOWORD(a6) = *(_WORD *)(v27 + 142);
    float v41 = (float)*(unsigned int *)(v27 + 136) / (float)*(unsigned int *)(v27 + 128);
    float v42 = (float)LODWORD(a5);
    float v43 = (float)LODWORD(a6);
    float v44 = v41 * *(float *)v27;
    float v112 = v41 * *(float *)(v27 + 16);
    float v113 = v41 * *(float *)(v27 + 8);
    float v111 = v41 * *(float *)(v27 + 20);
    float v45 = *(float *)(v27 + 28);
    float v46 = v41 * v45;
    LOWORD(v45) = *(_WORD *)(v27 + 144);
    float v47 = (float)LODWORD(v45);
    LOWORD(v10) = *(_WORD *)(v27 + 146);
    float v48 = (float)v10;
    LOWORD(v11) = *(_WORD *)(v27 + 148);
    float v49 = (float)v11;
    LOWORD(v12) = *(_WORD *)(v27 + 150);
    float v50 = (float)v12;
    LOWORD(v13) = *(_WORD *)(v27 + 152);
    float v51 = (float)v13;
    float v52 = *(float *)(v27 + 36);
    float v53 = *(float *)(v27 + 40);
    float v54 = *(float *)(v27 + 44);
    float v55 = *(float *)(v27 + 48) * 0.25;
    float v56 = *(float *)(v27 + 52) * 0.25;
    float v57 = *(float *)(v27 + 56) * 0.25;
    float v58 = *(float *)(v27 + 60) * 0.25;
    float v59 = *(float *)(v27 + 64) * 0.25;
    float v60 = *(float *)(v27 + 68);
    float v61 = v60 * 0.25;
    uint64_t v62 = v25[1];
    int32x4_t v63 = (unsigned char *)(*v25 + v36 * v26 + v24);
    if (v26 >= 0) {
      uint64_t v64 = v26;
    }
    else {
      uint64_t v64 = v26 + 1;
    }
    uint64_t v65 = v62 + v37 * (v64 >> 1);
    uint64_t v66 = v29[1];
    int16x8_t v67 = (unsigned char *)(*v29 + v31 * v22 + v21);
    uint64_t v68 = v65 + v24;
    if (v22 >= 0) {
      uint64_t v69 = v22;
    }
    else {
      uint64_t v69 = v22 + 1;
    }
    uint64_t result = (void *)(v66 + v32 * (v69 >> 1) + v21);
    do
    {
      float16x8_t v70 = &v67[v31];
      uint64_t v71 = &v63[v36];
      if (v20)
      {
        size_t v72 = 0;
        float v73 = &v67[v31];
        float v74 = &v63[v36];
        do
        {
          LOBYTE(v60) = *((unsigned char *)result + v72);
          float v75 = (float)LODWORD(v60) - v43;
          LOBYTE(v14) = *((unsigned char *)result + v72 + 1);
          float v76 = (float)LODWORD(v14) - v43;
          float v77 = v113 * v76;
          float v78 = (float)(v111 * v76) + (float)(v75 * v112);
          float v79 = v46 * v75;
          LOBYTE(v6) = *v67;
          float v80 = v44 * (float)((float)LODWORD(v6) - v42);
          LOBYTE(v7) = v67[1];
          float v81 = v44 * (float)((float)LODWORD(v7) - v42);
          LOBYTE(v8) = *v73;
          float v82 = v44 * (float)((float)LODWORD(v8) - v42);
          LOBYTE(v9) = v73[1];
          float v83 = v44 * (float)((float)LODWORD(v9) - v42);
          float v84 = v77 + v80;
          float v85 = v80 + v78;
          float v86 = v79 + v80;
          float v87 = v77 + v81;
          float v88 = v78 + v81;
          float v89 = v79 + v81;
          float v90 = v77 + v82;
          float v91 = v78 + v82;
          float v8 = v79 + v82;
          float v92 = v77 + v83;
          float v93 = v78 + v83;
          float v9 = v79 + v83;
          float v94 = (float)((float)((float)(v53 * v85) + (float)(v52 * v84)) + (float)(v54 * v86)) + v47;
          if (v94 < v47) {
            float v95 = v47;
          }
          else {
            float v95 = (float)((float)((float)(v53 * v85) + (float)(v52 * v84)) + (float)(v54 * v86)) + v47;
          }
          BOOL v96 = v94 <= v49;
          float v97 = (float)((float)((float)(v53 * v88) + (float)(v52 * v87)) + (float)(v54 * v89)) + v47;
          if (!v96) {
            float v95 = v49;
          }
          char v98 = llroundf(v95);
          if (v97 < v47) {
            float v99 = v47;
          }
          else {
            float v99 = (float)((float)((float)(v53 * v88) + (float)(v52 * v87)) + (float)(v54 * v89)) + v47;
          }
          BOOL v96 = v97 <= v49;
          float v100 = (float)((float)((float)(v53 * v91) + (float)(v52 * v90)) + (float)(v54 * v8)) + v47;
          if (!v96) {
            float v99 = v49;
          }
          char v101 = llroundf(v99);
          if (v100 < v47) {
            float v102 = v47;
          }
          else {
            float v102 = (float)((float)((float)(v53 * v91) + (float)(v52 * v90)) + (float)(v54 * v8)) + v47;
          }
          BOOL v96 = v100 <= v49;
          float v103 = (float)((float)((float)(v53 * v93) + (float)(v52 * v92)) + (float)(v54 * v9)) + v47;
          if (!v96) {
            float v102 = v49;
          }
          char v104 = llroundf(v102);
          if (v103 < v47) {
            float v105 = v47;
          }
          else {
            float v105 = (float)((float)((float)(v53 * v93) + (float)(v52 * v92)) + (float)(v54 * v9)) + v47;
          }
          if (v103 > v49) {
            float v105 = v49;
          }
          float v106 = (float)((float)(v84 + v87) + v90) + v92;
          float v107 = (float)((float)(v85 + v88) + v91) + v93;
          *int32x4_t v63 = v98;
          v63[1] = v101;
          *float v74 = v104;
          v74[1] = llroundf(v105);
          float v108 = (float)(v48 + (float)(v106 * v55)) + (float)(v107 * v56);
          float v109 = (float)((float)(v86 + v89) + v8) + v9;
          float v7 = v108 + (float)(v109 * v57);
          float v6 = v51;
          if (v7 <= v51)
          {
            float v6 = v108 + (float)(v109 * v57);
            if (v7 < v50) {
              float v6 = v50;
            }
          }
          float v110 = (float)(v48 + (float)(v106 * v58)) + (float)(v107 * v59);
          float v14 = v110 + (float)(v109 * v61);
          *(unsigned char *)(v68 + v72) = llroundf(v6);
          float v60 = v51;
          if (v14 <= v51)
          {
            float v60 = v110 + (float)(v109 * v61);
            if (v14 < v50) {
              float v60 = v50;
            }
          }
          v67 += 2;
          v73 += 2;
          v63 += 2;
          v74 += 2;
          *(unsigned char *)(v68 + v72 + 1) = llroundf(v60);
          v72 += 2;
        }
        while (v20 > v72);
      }
      int16x8_t v67 = &v70[v31];
      uint64_t result = (void *)((char *)result + v32);
      int32x4_t v63 = &v71[v36];
      v68 += v37;
      v19 += 2;
    }
    while (v23 > v19);
    if (v34 && v39)
    {
      do
      {
        uint64_t result = memcpy(v40, v35, v20);
        v35 += v33;
        v40 += v38;
        --v23;
      }
      while (v23);
    }
    else if (v39)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v40, 255, v20);
        }
        v40 += v38;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420_neon_fp16_GCD(float32x2_t *result, uint64_t a2, float32x4_t a3, float32x4_t a4, double a5, double a6, double a7, double a8, int16x4_t a9, int16x4_t a10)
{
  uint64_t v14 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v15 = 2 * result->u8[0];
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (2 * v17 != 2 * v16)
  {
    unint64_t v18 = 0;
    size_t v19 = *(size_t *)((char *)&result[2] + 4);
    uint64_t v20 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v21 = *(void *)((char *)&result[5] + 4) + 2 * v16;
    unint64_t v22 = 2 * v17 - 2 * v16;
    float32x2_t v23 = result[14];
    unint64_t v24 = *(void *)&result[13] * a2 / v15;
    uint64_t v25 = (void *)result[16];
    uint64_t v26 = *(void *)&result[15] + 2 * v24;
    uint64_t v27 = (float32x2_t *)result[19];
    uint64_t v28 = (uint64_t *)result[7];
    uint64_t v29 = (uint64_t *)result[8];
    uint64_t v30 = (uint64_t *)result[17];
    uint64_t v32 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v415 = v29[2];
    uint64_t v33 = *v30;
    uint64_t v34 = v30[1];
    uint64_t v418 = v28[2];
    uint64_t v419 = v30[2];
    uint64_t v417 = v25[2];
    unsigned int v35 = v27[17].u16[2];
    unsigned int v36 = v27[17].u16[3];
    LODWORD(v29) = v27[18].u16[0];
    float v37 = (float)v35;
    *(short float *)v12.i16 = (short float)v35;
    unsigned int v38 = v27[18].u16[1];
    float v39 = (float)v36;
    short float v40 = (short float)v36;
    unsigned int v41 = v27[18].u16[2];
    _S13 = v27[5].i32[0];
    LODWORD(a8) = v27[5].i32[1];
    a3.i32[0] = v27[6].i32[0];
    a3.i32[1] = v27[7].i32[1];
    LODWORD(v30) = v27[18].u16[3];
    float v45 = (float)v29;
    *(short float *)a9.i16 = (short float)v29;
    LODWORD(v29) = v27[19].u16[0];
    LODWORD(_Q11) = v27[4].i32[1];
    _S12 = v27[9].i32[1];
    float v483 = v27[9].f32[0];
    float v484 = *(float *)&a8;
    float v47 = (float)v38;
    float v48 = (char *)&v27[2068] + 4;
    v414 = (unsigned __int8 *)(v418 + v415 * v21 + v20);
    __b = (_WORD *)(v417 + v419 * v26 + 2 * *(void *)&v23);
    float v49 = 8191.0 / (float)v27[16].u32[0];
    float v462 = (float)v41;
    *(float *)v11.i32 = (float)v30;
    float v488 = (float)v30;
    _S30 = v49 * v27->f32[0];
    float v456 = (float)v29;
    *(short float *)&a8 = (short float)v30;
    *(short float *)v13.i16 = (short float)v29;
    unsigned int v51 = v27[16].u8[4];
    if (v51 >= 0x11) {
      unsigned __int8 v52 = 0;
    }
    else {
      unsigned __int8 v52 = 16 - v51;
    }
    if (v26 >= 0) {
      uint64_t v53 = v26;
    }
    else {
      uint64_t v53 = v26 + 1;
    }
    uint64_t result = (float32x2_t *)((char *)v27 + 164);
    float16x8_t v54 = (float16x8_t)vdupq_lane_s16(v12, 0);
    a4.i32[1] = v27[1].i32[0];
    a4.i32[0] = v27[3].i32[1];
    *(float32x2_t *)a4.f32 = vmul_n_f32(*(float32x2_t *)a4.f32, v49);
    unint64_t v482 = a4.i64[0];
    int32x2_t v55 = (int32x2_t)vcvt_f16_f32(a4);
    _Q1.i64[1] = a3.i64[0];
    short float v57 = -v40;
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32(v55, 0);
    *(float32x2_t *)_Q1.f32 = vmul_n_f32(v27[2], v49);
    uint64_t v481 = _Q1.i64[0];
    float16x8_t v492 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q1), 0);
    float16x8_t v59 = vmulq_n_f16(v58, -v40);
    __asm { FMOV            V1.2S, #0.25 }
    *(float32x2_t *)a3.f32 = vmul_f32(*(float32x2_t *)a3.f32, *(float32x2_t *)_Q1.f32);
    unint64_t v480 = a3.i64[0];
    *(float16x4_t *)&v64.u32[2] = vcvt_f16_f32(a3);
    int32x4_t v65 = vdupq_lane_s32(*(int32x2_t *)&v64.u32[2], 0);
    v43.i32[1] = v27[8].i32[0];
    v43.i32[0] = v27[6].i32[1];
    *(float32x2_t *)v64.f32 = vmul_f32(v43, *(float32x2_t *)_Q1.f32);
    uint64_t v479 = v64.i64[0];
    *(float16x4_t *)&v64.u32[2] = vcvt_f16_f32(v64);
    int32x4_t v66 = vdupq_lane_s32(*(int32x2_t *)&v64.u32[2], 0);
    v44.i32[1] = v27[8].i32[1];
    v44.i32[0] = v27[7].i32[0];
    *(float32x2_t *)v64.f32 = vmul_f32(v44, *(float32x2_t *)_Q1.f32);
    uint64_t v478 = v64.i64[0];
    int32x4_t v477 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v64), 0);
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(a9, 0);
    *(short float *)a10.i16 = (short float)v38;
    float16x8_t v469 = (float16x8_t)vdupq_lane_s16(a10, 0);
    *(short float *)v11.i16 = (short float)v41;
    int16x8_t v68 = vdupq_lane_s16(v11, 0);
    float16x8_t v69 = vmulq_n_f16(v492, v57);
    _Q23 = vdupq_lane_s16(*(int16x4_t *)&a8, 0);
    float16x8_t v466 = (float16x8_t)vdupq_lane_s16(v13, 0);
    uint64_t v71 = v25[1] + v34 * (v53 >> 1) + 2 * *(void *)&v23;
    size_t v72 = (uint16x8_t *)(*v25 + v33 * v26 + 2 * *(void *)&v23);
    if (v21 >= 0) {
      uint64_t v73 = v21;
    }
    else {
      uint64_t v73 = v21 + 1;
    }
    uint64_t v74 = *v28;
    uint64_t v75 = v28[1] + v31 * (v73 >> 1);
    float v76 = (char *)&v27[4116] + 4;
    float v77 = (unsigned char *)(v75 + v20);
    float v78 = (int8x8_t *)(v74 + v32 * v21 + v20);
    unsigned __int8 v79 = v52;
    size_t __len = v19 & 0xFFFFFFF8;
    __asm { FCVT            H15, S30 }
    short float v450 = _H15;
    float v476 = v27[4].f32[1];
    __asm { FCVT            H15, S11 }
    float v475 = v27[5].f32[0];
    __asm { FCVT            H13, S13 }
    short float v448 = _H13;
    _S4 = v27[5].i32[1];
    __asm { FCVT            H13, S4 }
    float v454 = v27[13].f32[1];
    __asm { FCVT            H0, S0 }
    short float v446 = _H0;
    short float v447 = _H13;
    float v453 = v27[14].f32[0];
    __asm { FCVT            H1, S1 }
    float v452 = v27[14].f32[1];
    __asm { FCVT            H2, S2 }
    float v451 = v27[15].f32[0];
    __asm { FCVT            H5, S5 }
    _Q0.i32[0] = v27[9].i32[0];
    __asm { FCVT            H13, S0 }
    float v474 = v27[9].f32[1];
    __asm { FCVT            H12, S12 }
    short float v441 = _H12;
    float16x8_t v91 = (float16x8_t)v477;
    float v464 = v27[10].f32[0];
    __asm { FCVT            H12, S16 }
    float v463 = v27[10].f32[1];
    __asm { FCVT            H11, S27 }
    short float v439 = *(short float *)&_Q11;
    float v461 = v27[11].f32[0];
    __asm { FCVT            H11, S3 }
    float v460 = v27[11].f32[1];
    __asm { FCVT            H3, S20 }
    short float v437 = _H3;
    float v459 = v27[12].f32[0];
    __asm { FCVT            H3, S25 }
    float16x8_t v95 = (float16x8_t)v65;
    float16x8_t v96 = (float16x8_t)v66;
    float16x8_t v97 = v492;
    float v457 = v27[12].f32[1];
    __asm { FCVT            H0, S19 }
    short float v435 = *(short float *)_Q0.i16;
    float v455 = v27[13].f32[0];
    __asm { FCVT            H0, S21 }
    uint16x8_t v421 = (uint16x8_t)vdupq_n_s16(v52);
    float16x8_t v491 = v69;
    float16x8_t v467 = (float16x8_t)_Q23;
    short float v444 = _H2;
    short float v445 = _H1;
    short float v436 = _H3;
    short float v434 = *(short float *)_Q0.i16;
    unint64_t v428 = v22;
    size_t v429 = v19;
    uint64_t v426 = v31;
    uint64_t v427 = v32;
    uint64_t v424 = v34;
    uint64_t v425 = v33;
    float v487 = v39;
    float16x8_t v472 = v54;
    float16x8_t v473 = v59;
    float16x8_t v470 = v67;
    float16x8_t v471 = v58;
    float16x8_t v468 = (float16x8_t)v68;
    int v465 = v19 - 7;
    unsigned __int8 v423 = v52;
    float v486 = v37;
    float v458 = _S30;
    float16x8_t v449 = v95;
    short float v442 = _H13;
    short float v443 = _H5;
    short float v440 = _H12;
    long long v438 = _Q11;
    float v420 = v47;
    do
    {
      float v99 = (char *)v78 + v32;
      float v100 = &v72->i8[v33];
      if ((int)v19 < 8)
      {
        size_t v272 = 0;
        char v104 = (uint16x8_t *)v71;
        float v103 = (uint16x8_t *)((char *)v72 + v33);
        v271 = v77;
        float v102 = (int8x8_t *)((char *)v78 + v32);
      }
      else
      {
        uint64_t v432 = v71;
        unint64_t v433 = v18;
        uint64_t v101 = 0;
        v430 = (char *)v78 + v32;
        v431 = &v72->i8[v33];
        float v102 = (int8x8_t *)((char *)v78 + v32);
        float v103 = (uint16x8_t *)((char *)v72 + v33);
        char v104 = (uint16x8_t *)v71;
        _Q23.i32[0] = v421.i32[0];
        v105.i64[0] = 0x9000900090009000;
        v105.i64[1] = 0x9000900090009000;
        float16x8_t v106 = 0uLL;
        v485 = v77;
        do
        {
          int8x8_t v107 = *(int8x8_t *)&v77[v101];
          *(int8x8_t *)v108.i8 = vzip1_s8(v107, *(int8x8_t *)v106.i8);
          v108.u64[1] = (unint64_t)vzip2_s8(v107, *(int8x8_t *)v106.i8);
          float16x8_t v109 = vcvtq_f16_u16(v108);
          int16x8_t v110 = (int16x8_t)vmlaq_f16(v59, v58, v109);
          int8x16_t v111 = (int8x16_t)vmlaq_f16(v69, v97, v109);
          v109.i64[0] = vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL).u64[0];
          *(int16x4_t *)v112.i8 = vuzp1_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v109.i8);
          *(int16x4_t *)v109.i8 = vuzp2_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v109.i8);
          v109.i64[1] = v109.i64[0];
          v110.i64[0] = vextq_s8(v111, v111, 8uLL).u64[0];
          v112.i64[1] = v109.i64[0];
          *(float16x4_t *)v110.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v110.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v110.i8));
          v489 = v78 + 1;
          v490 = v72;
          v110.i64[1] = v109.i64[0];
          float16x8_t v113 = (float16x8_t)vzip1q_s16((int16x8_t)v109, (int16x8_t)v109);
          *(int8x8_t *)v109.i8 = vzip1_s8(*v78, *(int8x8_t *)v106.i8);
          v109.u64[1] = (unint64_t)vzip2_s8(*v78, *(int8x8_t *)v106.i8);
          float16x8_t v114 = (float16x8_t)vzip1q_s16(v112, v112);
          int8x8_t v115 = *v102++;
          *(int8x8_t *)v112.i8 = vzip1_s8(v115, *(int8x8_t *)v106.i8);
          float16x8_t v116 = (float16x8_t)vzip1q_s16(v110, v110);
          v112.u64[1] = (unint64_t)vzip2_s8(v115, *(int8x8_t *)v106.i8);
          float16x8_t v117 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v109), v54);
          float16x8_t v118 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v112), v54);
          float16x8_t v119 = vmlaq_n_f16(v113, v117, v450);
          float16x8_t v120 = vmlaq_n_f16(v113, v118, v450);
          float16x8_t v121 = vmlaq_n_f16(v116, v117, v450);
          float16x8_t v122 = vmlaq_n_f16(v116, v118, v450);
          float16x8_t v123 = vmlaq_n_f16(v114, v117, v450);
          float16x8_t v124 = vmlaq_n_f16(v114, v118, v450);
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, v106), v105));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          uint64_t v128 = v127.u32[1];
          uint64_t v129 = v127.u32[3];
          float16x8_t v130 = v96;
          v131.i64[0] = 0x9000900090009000;
          v131.i64[1] = 0x9000900090009000;
          v132.i16[0] = result->i16[v127.u32[0]];
          uint64_t v133 = v126.u32[1];
          uint64_t v134 = v126.u32[3];
          __int8 v135 = (__int16 *)result + v127.u32[2];
          uint64_t v136 = v126.u32[2];
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v131));
          __int8 v138 = (__int16 *)result + v126.u32[0];
          uint32x4_t v139 = vmovl_high_u16(v137);
          v140.i64[0] = v139.u32[2];
          v140.i64[1] = v139.u32[3];
          float16x8_t v141 = v140;
          v140.i64[0] = v139.u32[0];
          v140.i64[1] = v139.u32[1];
          float16x8_t v142 = v140;
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v137.i8);
          v140.i64[0] = v143.u32[2];
          v140.i64[1] = v143.u32[3];
          float16x8_t v144 = v140;
          uint64_t v145 = (__int16 *)result + v136;
          uint64_t v146 = v143.u32[1];
          v147.i16[0] = result->i16[v143.u32[0]];
          uint64_t v148 = v142.i64[1];
          float16x8_t v149 = (__int16 *)result + v142.i64[0];
          uint64_t v150 = v141.i64[1];
          float16x8_t v151 = (__int16 *)result + v141.i64[0];
          uint16x8_t v152 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v131));
          float16x8_t v153 = (float16x8_t)vmovl_high_u16(v152);
          float16x8_t v154 = (__int16 *)result + v129;
          v140.i64[0] = v153.u32[2];
          v140.i64[1] = v153.u32[3];
          float16x8_t v155 = v140;
          v140.i64[0] = v153.u32[0];
          uint32x4_t v156 = vmovl_u16(*(uint16x4_t *)v152.i8);
          int32x4_t v157 = (__int16 *)result + v133;
          v153.i16[0] = result->i16[v156.u32[0]];
          float16x8_t v158 = (__int16 *)result + v134;
          float16x8_t v159 = (__int16 *)result + v156.u32[1];
          v132.i16[1] = result->i16[v128];
          float v160 = (__int16 *)result + v156.u32[2];
          float v161 = (__int16 *)result + v156.u32[3];
          float v162 = (__int16 *)result + v140.i64[0];
          float v163 = (__int16 *)result + v153.u32[1];
          float v164 = (__int16 *)result + v155.i64[0];
          char v165 = (__int16 *)result + v155.i64[1];
          uint16x8_t v166 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v131));
          uint32x4_t v167 = vmovl_high_u16(v166);
          uint32x4_t v168 = vmovl_u16(*(uint16x4_t *)v166.i8);
          v153.i16[1] = *v159;
          v120.i16[0] = result->i16[v168.u32[0]];
          v132.i16[2] = *v135;
          v147.i16[1] = result->i16[v146];
          v153.i16[2] = *v160;
          v120.i16[1] = result->i16[v168.u32[1]];
          v132.i16[3] = *v154;
          float v169 = (__int16 *)result + v167.u32[1];
          float v170 = (__int16 *)result + v167.u32[2];
          float v171 = (__int16 *)result + v167.u32[3];
          v147.i16[2] = result->i16[v144.i64[0]];
          v120.i16[2] = result->i16[v168.u32[2]];
          v120.i16[3] = result->i16[v168.u32[3]];
          v153.i16[3] = *v161;
          uint16x8_t v172 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v131));
          float16x8_t v173 = (float16x8_t)vmovl_high_u16(v172);
          v120.i16[4] = result->i16[v167.u32[0]];
          v140.i64[0] = v173.u32[2];
          v140.i64[1] = v173.u32[3];
          float16x8_t v174 = v140;
          v140.i64[0] = v173.u32[0];
          v140.i64[1] = v173.u32[1];
          uint32x4_t v175 = vmovl_u16(*(uint16x4_t *)v172.i8);
          v132.i16[4] = *v138;
          v147.i16[3] = result->i16[v144.i64[1]];
          v173.i16[0] = result->i16[v175.u32[0]];
          v153.i16[4] = *v162;
          v120.i16[5] = *v169;
          v132.i16[5] = *v157;
          v147.i16[4] = *v149;
          float v176 = (__int16 *)result + v174.i64[0];
          float v177 = (__int16 *)result + v174.i64[1];
          v173.i16[1] = result->i16[v175.u32[1]];
          v153.i16[5] = *v163;
          v173.i16[2] = result->i16[v175.u32[2]];
          v173.i16[3] = result->i16[v175.u32[3]];
          v120.i16[6] = *v170;
          v173.i16[4] = result->i16[v140.i64[0]];
          v173.i16[5] = result->i16[v140.i64[1]];
          v132.i16[6] = *v145;
          uint16x8_t v178 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v131));
          float16x8_t v179 = (float16x8_t)vmovl_high_u16(v178);
          v147.i16[5] = result->i16[v148];
          v140.i64[0] = v179.u32[2];
          v140.i64[1] = v179.u32[3];
          float16x8_t v180 = v140;
          v140.i64[0] = v179.u32[0];
          v140.i64[1] = v179.u32[1];
          uint32x4_t v181 = vmovl_u16(*(uint16x4_t *)v178.i8);
          v153.i16[6] = *v164;
          v120.i16[7] = *v171;
          v179.i16[0] = result->i16[v181.u32[0]];
          v173.i16[6] = *v176;
          v132.i16[7] = *v158;
          v147.i16[6] = *v151;
          v153.i16[7] = *v165;
          v179.i16[1] = result->i16[v181.u32[1]];
          v147.i16[7] = result->i16[v150];
          v179.i16[2] = result->i16[v181.u32[2]];
          v179.i16[3] = result->i16[v181.u32[3]];
          v173.i16[7] = *v177;
          v179.i16[4] = result->i16[v140.i64[0]];
          v179.i16[5] = result->i16[v140.i64[1]];
          v179.i16[6] = result->i16[v180.i64[0]];
          v179.i16[7] = result->i16[v180.i64[1]];
          uint16x8_t v182 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v132, v446), v147, v445), v153, v444), vmaxq_f16(vmaxq_f16(v132, v147), v153), v443), (float16x8_t)0), v131));
          uint32x4_t v183 = vmovl_high_u16(v182);
          uint32x4_t v184 = vmovl_u16(*(uint16x4_t *)v182.i8);
          uint64_t v185 = v184.u32[1];
          uint64_t v186 = v184.u32[0];
          v140.i64[0] = v183.u32[2];
          v140.i64[1] = v183.u32[3];
          uint64_t v187 = v184.u32[3];
          uint64_t v188 = v183.u32[1];
          uint64_t v189 = v184.u32[2];
          uint64_t v190 = v183.u32[0];
          uint16x8_t v191 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v120, v446), v173, v445), v179, v444), vmaxq_f16(vmaxq_f16(v120, v173), v179), v443), (float16x8_t)0), v131));
          float16x8_t v192 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v191.i8);
          v144.i16[0] = *(_WORD *)&v48[2 * v186];
          int16x8_t v193 = (__int16 *)&v48[2 * v140.i64[1]];
          v144.i16[1] = *(_WORD *)&v48[2 * v185];
          uint32x4_t v194 = vmovl_high_u16(v191);
          v144.i16[2] = *(_WORD *)&v48[2 * v189];
          uint64_t v195 = v194.u32[1];
          v144.i16[3] = *(_WORD *)&v48[2 * v187];
          v140.i64[1] = v194.u32[3];
          v192.i16[0] = *(_WORD *)&v48[2 * v192.u32[0]];
          v144.i16[4] = *(_WORD *)&v48[2 * v190];
          v144.i16[5] = *(_WORD *)&v48[2 * v188];
          v144.i16[6] = *(_WORD *)&v48[2 * v140.i64[0]];
          v192.i16[1] = *(_WORD *)&v48[2 * v192.u32[1]];
          v192.i16[2] = *(_WORD *)&v48[2 * v192.u32[2]];
          v144.i16[7] = *v193;
          float16x8_t v196 = (__int16 *)&v48[2 * v194.u32[2]];
          v192.i16[3] = *(_WORD *)&v48[2 * v192.u32[3]];
          v192.i16[4] = *(_WORD *)&v48[2 * v194.u32[0]];
          float16x8_t v197 = vmulq_f16(v132, v144);
          v192.i16[5] = *(_WORD *)&v48[2 * v195];
          v192.i16[6] = *v196;
          float16x8_t v198 = vmulq_f16(v147, v144);
          v192.i16[7] = *(_WORD *)&v48[2 * v140.i64[1]];
          float16x8_t v199 = vmulq_f16(v120, v192);
          float16x8_t v200 = vmulq_f16(v173, v192);
          float16x8_t v201 = vmulq_f16(v179, v192);
          float16x8_t v202 = vmulq_f16(v153, v144);
          float16x8_t v203 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v197, v442), v198, v441), v202, v440);
          v124.i16[7] = HIWORD(v438);
          v120.i16[7] = v91.i16[7];
          float16x8_t v204 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v197, v439), v198, *(short float *)&v438), v202, v437);
          float16x8_t v205 = vmlaq_n_f16(vmulq_n_f16(v202, v434), v198, v435);
          float16x8_t v206 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v199, v442), v200, v441), v201, v440);
          float16x8_t v207 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v199, v439), v200, *(short float *)&v438), v201, v437);
          float16x8_t v208 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v201, v434), v200, v435), v199, v436);
          float16x8_t v209 = vmlaq_n_f16(v205, v197, v436);
          uint16x8_t v210 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v203, (float16x8_t)0), v131));
          uint32x4_t v211 = vmovl_high_u16(v210);
          v198.i64[0] = v211.u32[2];
          uint32x4_t v212 = vmovl_u16(*(uint16x4_t *)v210.i8);
          uint64_t v213 = v212.u32[1];
          uint64_t v214 = v212.u32[0];
          uint64_t v215 = v212.u32[3];
          uint64_t v216 = v212.u32[2];
          uint64_t v217 = v211.u32[1];
          uint64_t v218 = v211.u32[0];
          uint16x8_t v219 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v204, (float16x8_t)0), v131));
          float16x8_t v220 = (float16x8_t)vmovl_high_u16(v219);
          uint64_t v221 = v211.u32[3];
          v140.i64[0] = v220.u32[2];
          v140.i64[1] = v220.u32[3];
          float16x8_t v222 = v140;
          v140.i64[0] = v220.u32[0];
          v140.i64[1] = v220.u32[1];
          float16x8_t v223 = v140;
          uint32x4_t v224 = vmovl_u16(*(uint16x4_t *)v219.i8);
          v140.i64[0] = v224.u32[2];
          v140.i64[1] = v224.u32[3];
          float16x8_t v225 = v140;
          uint64_t v226 = v198.i64[0];
          uint64_t v227 = v224.u32[1];
          v220.i16[0] = *(_WORD *)&v76[2 * v214];
          float v228 = (__int16 *)&v76[2 * v216];
          uint64_t v229 = v222.i64[1];
          uint64_t v230 = v222.i64[0];
          v124.i16[0] = *(_WORD *)&v76[2 * v224.u32[0]];
          uint16x8_t v231 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v209, (float16x8_t)0), v131));
          uint32x4_t v232 = vmovl_high_u16(v231);
          v140.i64[0] = v232.u32[2];
          v140.i64[1] = v232.u32[3];
          float16x8_t v233 = v140;
          v140.i64[0] = v232.u32[0];
          v140.i64[1] = v232.u32[1];
          float16x8_t v234 = v140;
          uint32x4_t v235 = vmovl_u16(*(uint16x4_t *)v231.i8);
          v140.i64[0] = v235.u32[2];
          v140.i64[1] = v235.u32[3];
          float16x8_t v236 = v140;
          v140.i64[1] = v235.u32[1];
          float v237 = (__int16 *)&v76[2 * v213];
          v120.i16[0] = *(_WORD *)&v76[2 * v235.u32[0]];
          float v238 = (__int16 *)&v76[2 * v215];
          uint64_t v239 = v234.i64[1];
          uint64_t v240 = v234.i64[0];
          uint64_t v241 = v233.i64[1];
          uint64_t v242 = v233.i64[0];
          uint16x8_t v243 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v206, (float16x8_t)0), v131));
          uint32x4_t v244 = vmovl_high_u16(v243);
          uint32x4_t v245 = vmovl_u16(*(uint16x4_t *)v243.i8);
          v220.i16[1] = *v237;
          v124.i16[1] = *(_WORD *)&v76[2 * v227];
          v206.i16[0] = *(_WORD *)&v76[2 * v245.u32[0]];
          v120.i16[1] = *(_WORD *)&v76[2 * v140.i64[1]];
          v220.i16[2] = *v228;
          v206.i16[1] = *(_WORD *)&v76[2 * v245.u32[1]];
          v124.i16[2] = *(_WORD *)&v76[2 * v225.i64[0]];
          unsigned int v246 = (__int16 *)&v76[2 * v245.u32[3]];
          v206.i16[2] = *(_WORD *)&v76[2 * v245.u32[2]];
          v120.i16[2] = *(_WORD *)&v76[2 * v236.i64[0]];
          float16x8_t v247 = vminq_f16(vmaxq_f16(v207, (float16x8_t)0), v131);
          float16x8_t v96 = v130;
          uint16x8_t v248 = vcvtq_u16_f16(v247);
          uint32x4_t v249 = vmovl_u16(*(uint16x4_t *)v248.i8);
          v206.i16[3] = *v246;
          v207.i16[7] = (unint64_t)v249.u32[1] >> 48;
          v220.i16[3] = *v238;
          v207.i16[0] = *(_WORD *)&v76[2 * v249.u32[0]];
          v124.i16[3] = *(_WORD *)&v76[2 * v225.i64[1]];
          v120.i16[3] = *(_WORD *)&v76[2 * v236.i64[1]];
          v206.i16[4] = *(_WORD *)&v76[2 * v244.u32[0]];
          v140.i64[1] = v244.u32[3];
          v220.i16[4] = *(_WORD *)&v76[2 * v218];
          uint32x4_t v250 = vmovl_high_u16(v248);
          v124.i16[4] = *(_WORD *)&v76[2 * v223.i64[0]];
          v207.i16[1] = *(_WORD *)&v76[2 * v249.u32[1]];
          float v77 = v485;
          v120.i16[4] = *(_WORD *)&v76[2 * v240];
          v206.i16[5] = *(_WORD *)&v76[2 * v244.u32[1]];
          v207.i16[2] = *(_WORD *)&v76[2 * v249.u32[2]];
          v220.i16[5] = *(_WORD *)&v76[2 * v217];
          v207.i16[3] = *(_WORD *)&v76[2 * v249.u32[3]];
          v124.i16[5] = *(_WORD *)&v76[2 * v223.i64[1]];
          v207.i16[4] = *(_WORD *)&v76[2 * v250.u32[0]];
          v120.i16[5] = *(_WORD *)&v76[2 * v239];
          v206.i16[6] = *(_WORD *)&v76[2 * v244.u32[2]];
          v207.i16[5] = *(_WORD *)&v76[2 * v250.u32[1]];
          v220.i16[6] = *(_WORD *)&v76[2 * v226];
          v124.i16[6] = *(_WORD *)&v76[2 * v230];
          v207.i16[6] = *(_WORD *)&v76[2 * v250.u32[2]];
          long long v251 = (__int16 *)&v76[2 * v250.u32[3]];
          float16x8_t v97 = v492;
          float16x8_t v106 = 0uLL;
          v105.i64[0] = 0x9000900090009000;
          v105.i64[1] = 0x9000900090009000;
          v120.i16[6] = *(_WORD *)&v76[2 * v242];
          uint16x8_t v252 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v208, (float16x8_t)0), v105));
          uint32x4_t v253 = vmovl_high_u16(v252);
          int16x8_t v254 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v252.i8);
          float16x8_t v255 = (float16x8_t)vuzp1q_s16((int16x8_t)v206, (int16x8_t)v207);
          v206.i16[7] = *(_WORD *)&v76[2 * v140.i64[1]];
          v140.i64[0] = v253.u32[0];
          v140.i64[1] = v253.u32[1];
          float16x8_t v256 = v140;
          v140.i64[1] = v254.u32[3];
          v254.i16[7] = (unint64_t)v254.u32[3] >> 48;
          v254.i16[0] = *(_WORD *)&v76[2 * v254.u32[0]];
          uint64_t v257 = v256.i64[1];
          v207.i16[7] = *v251;
          v254.i16[1] = *(_WORD *)&v76[2 * v254.u32[1]];
          uint64_t v258 = v256.i64[0];
          float16x8_t v259 = (float16x8_t)vuzp1q_s16((int16x8_t)v220, (int16x8_t)v124);
          v220.i16[7] = *(_WORD *)&v76[2 * v221];
          float v260 = (__int16 *)&v76[2 * v258];
          v254.i16[2] = *(_WORD *)&v76[2 * v254.u32[2]];
          uint64_t v261 = v253.u32[3];
          v254.i16[3] = *(_WORD *)&v76[2 * v140.i64[1]];
          v124.i16[7] = *(_WORD *)&v76[2 * v229];
          float16x8_t v262 = (__int16 *)&v76[2 * v253.u32[2]];
          v254.i16[4] = *v260;
          float16x8_t v263 = vmlaq_n_f16(vmlaq_n_f16(v67, v220, _H15), v124, v448);
          float16x8_t v264 = vmlaq_n_f16(vmlaq_n_f16(v67, v206, _H15), v207, v448);
          float16x8_t v265 = (float16x8_t)vuzp2q_s16((int16x8_t)v206, (int16x8_t)v207);
          float16x8_t v266 = v120;
          v254.i16[5] = *(_WORD *)&v76[2 * v257];
          v254.i16[6] = *v262;
          v266.i16[7] = *(_WORD *)&v76[2 * v241];
          float v78 = v489;
          float16x8_t v267 = vaddq_f16(v259, (float16x8_t)vuzp2q_s16((int16x8_t)v220, (int16x8_t)v124));
          float16x8_t v268 = (float16x8_t)v254;
          v268.i16[7] = *(_WORD *)&v76[2 * v261];
          uint16x8_t *v490 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v263, v266, v447), v67), v468)), v421);
          size_t v72 = v490 + 1;
          float16x8_t v269 = vaddq_f16(v267, v255);
          float16x8_t v69 = v491;
          int16x8_t v270 = (int16x8_t)vaddq_f16(v269, v265);
          *v103++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v264, v268, v447), v67), v468)), v421);
          _Q0 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v469, v95, (float16x8_t)vzip1q_s16(v270, v270)), v130, (float16x8_t)vzip2q_s16(v270, v270)), v91, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v120, (int16x8_t)v120), (float16x8_t)vtrn2q_s16((int16x8_t)v266, (int16x8_t)v266)), (float16x8_t)vtrn1q_s16(v254, v254)), (float16x8_t)vtrn2q_s16((int16x8_t)v268, (int16x8_t)v268))), v467), v466)), v421);
          *v104++ = _Q0;
          v101 += 8;
        }
        while ((int)v101 < v465);
        v271 = &v485[v101];
        size_t v272 = __len;
        unint64_t v22 = v428;
        size_t v19 = v429;
        uint64_t v71 = v432;
        unint64_t v18 = v433;
        uint64_t v31 = v426;
        uint64_t v32 = v427;
        uint64_t v34 = v424;
        uint64_t v33 = v425;
        unsigned __int8 v79 = v423;
        float v99 = v430;
        float v100 = v431;
        float v47 = v420;
        float v37 = v486;
        float v39 = v487;
      }
      for (; v19 > v272; float16x8_t v67 = v470)
      {
        _Q0.i8[0] = v271[1];
        float v273 = (float)_Q0.u32[0] - v39;
        unsigned int v274 = HIDWORD(v482);
        float v275 = *((float *)&v482 + 1) * v273;
        LOBYTE(v274) = v78->i8[0];
        float v276 = _S30 * (float)((float)v274 - v37);
        float v277 = (float)(*((float *)&v482 + 1) * v273) + v276;
        float v278 = 8191.0;
        if (v277 <= 8191.0)
        {
          float v278 = (float)(*((float *)&v482 + 1) * v273) + v276;
          if (v277 < 0.0) {
            float v278 = 0.0;
          }
        }
        LOBYTE(v277) = *v271;
        float v279 = (float)LODWORD(v277) - v39;
        float v280 = (float)(*((float *)&v481 + 1) * v273) + (float)(v279 * *(float *)&v481);
        float v281 = 8191.0;
        if ((float)(v276 + v280) <= 8191.0)
        {
          float v281 = v276 + v280;
          if ((float)(v276 + v280) < 0.0) {
            float v281 = 0.0;
          }
        }
        float v282 = *(float *)&v482 * v279;
        float v283 = v282 + v276;
        float v284 = 8191.0;
        if (v283 <= 8191.0)
        {
          float v284 = v283;
          if (v283 < 0.0) {
            float v284 = 0.0;
          }
        }
        LOBYTE(v283) = v78->i8[1];
        float v285 = _S30 * (float)((float)LODWORD(v283) - v37);
        float v286 = 8191.0;
        if ((float)(v275 + v285) <= 8191.0)
        {
          float v286 = v275 + v285;
          if ((float)(v275 + v285) < 0.0) {
            float v286 = 0.0;
          }
        }
        float v287 = 8191.0;
        if ((float)(v280 + v285) <= 8191.0)
        {
          float v287 = v280 + v285;
          if ((float)(v280 + v285) < 0.0) {
            float v287 = 0.0;
          }
        }
        float v288 = v282 + v285;
        float v289 = 8191.0;
        if (v288 <= 8191.0)
        {
          float v289 = v288;
          if (v288 < 0.0) {
            float v289 = 0.0;
          }
        }
        LOBYTE(v288) = v102->i8[0];
        float v290 = _S30 * (float)((float)LODWORD(v288) - v37);
        float v291 = 8191.0;
        if ((float)(v275 + v290) <= 8191.0)
        {
          float v291 = v275 + v290;
          if ((float)(v275 + v290) < 0.0) {
            float v291 = 0.0;
          }
        }
        float v292 = 8191.0;
        if ((float)(v280 + v290) <= 8191.0)
        {
          float v292 = v280 + v290;
          if ((float)(v280 + v290) < 0.0) {
            float v292 = 0.0;
          }
        }
        float v293 = v282 + v290;
        float v294 = 8191.0;
        if (v293 <= 8191.0)
        {
          float v294 = v293;
          if (v293 < 0.0) {
            float v294 = 0.0;
          }
        }
        _Q23.i8[0] = v102->i8[1];
        float v295 = _S30 * (float)((float)_Q23.u32[0] - v37);
        float v296 = v275 + v295;
        BOOL v297 = (float)(v275 + v295) <= 8191.0;
        float v298 = 8191.0;
        if (v297)
        {
          float v298 = v296;
          if (v296 < 0.0) {
            float v298 = 0.0;
          }
        }
        float v299 = v280 + v295;
        BOOL v297 = (float)(v280 + v295) <= 8191.0;
        float v300 = 8191.0;
        if (v297)
        {
          float v300 = v299;
          if (v299 < 0.0) {
            float v300 = 0.0;
          }
        }
        float v301 = v282 + v295;
        float v302 = 8191.0;
        if (v301 <= 8191.0)
        {
          float v302 = v301;
          if (v301 < 0.0) {
            float v302 = 0.0;
          }
        }
        _H2 = result->i16[llroundf(fminf(fmaxf(v278, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H1 = result->i16[llroundf(fminf(fmaxf(v281, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H3 = result->i16[llroundf(fminf(fmaxf(v284, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H12 = result->i16[llroundf(fminf(fmaxf(v286, 0.0), 8191.0))];
        _H10 = result->i16[llroundf(fminf(fmaxf(v287, 0.0), 8191.0))];
        _H24 = result->i16[llroundf(fminf(fmaxf(v289, 0.0), 8191.0))];
        _H27 = result->i16[llroundf(fminf(fmaxf(v291, 0.0), 8191.0))];
        _H16 = result->i16[llroundf(fminf(fmaxf(v292, 0.0), 8191.0))];
        _H20 = result->i16[llroundf(fminf(fmaxf(v294, 0.0), 8191.0))];
        _H5 = result->i16[llroundf(fminf(fmaxf(v298, 0.0), 8191.0))];
        _H21 = result->i16[llroundf(fminf(fmaxf(v300, 0.0), 8191.0))];
        _H7 = result->i16[llroundf(fminf(fmaxf(v302, 0.0), 8191.0))];
        float v318 = (float)((float)((float)(v453 * _S1) + (float)(v454 * _S2)) + (float)(v452 * _S3))
             + (float)(v451 * fmaxf(_S2, fmaxf(_S1, _S3)));
        float v319 = 8191.0;
        if (v318 <= 8191.0)
        {
          float v319 = v318;
          if (v318 < 0.0) {
            float v319 = 0.0;
          }
        }
        float16x8_t v320 = v96;
        float v321 = v47;
        __asm
        {
          FCVT            S11, H12
          FCVT            S12, H10
          FCVT            S13, H24
        }
        _H0 = *(_WORD *)&v48[2 * llroundf(v319)];
        float v326 = (float)((float)((float)(v453 * _S12) + (float)(v454 * _S11)) + (float)(v452 * _S13))
             + (float)(v451 * fmaxf(_S11, fmaxf(_S12, _S13)));
        float v327 = 8191.0;
        if (v326 <= 8191.0)
        {
          float v327 = v326;
          if (v326 < 0.0) {
            float v327 = 0.0;
          }
        }
        __asm
        {
          FCVT            S23, H27
          FCVT            S26, H16
          FCVT            S29, H20
        }
        _H25 = *(_WORD *)&v48[2 * llroundf(v327)];
        float v332 = (float)((float)((float)(v453 * _S26) + (float)(v454 * _S23)) + (float)(v452 * _S29))
             + (float)(v451 * fmaxf(_S23, fmaxf(_S26, _S29)));
        float v333 = 8191.0;
        if (v332 <= 8191.0)
        {
          float v333 = v332;
          if (v332 < 0.0) {
            float v333 = 0.0;
          }
        }
        __asm
        {
          FCVT            S24, H5
          FCVT            S27, H21
          FCVT            S10, H7
          FCVT            S0, H0
        }
        float v338 = _S2 * _S0;
        float v339 = _S1 * _S0;
        float v340 = _S3 * _S0;
        __asm { FCVT            S0, H25 }
        float v342 = _S11 * _S0;
        float v343 = _S12 * _S0;
        float v344 = _S13 * _S0;
        LOWORD(_S0) = *(_WORD *)&v48[2 * llroundf(v333)];
        __asm { FCVT            S1, H0 }
        float v346 = _S23 * _S1;
        float v347 = _S26 * _S1;
        float v348 = _S29 * _S1;
        float v349 = (float)((float)((float)(v453 * _S27) + (float)(v454 * _S24)) + (float)(v452 * _S10))
             + (float)(v451 * fmaxf(_S24, fmaxf(_S27, _S10)));
        float v350 = 8191.0;
        if (v349 <= 8191.0)
        {
          float v350 = v349;
          if (v349 < 0.0) {
            float v350 = 0.0;
          }
        }
        _H6 = *(_WORD *)&v48[2 * llroundf(v350)];
        __asm { FCVT            S6, H6 }
        _S23 = _S24 * _S6;
        float v354 = _S27 * _S6;
        float v355 = _S10 * _S6;
        float v356 = (float)((float)(v474 * v339) + (float)(v338 * v483)) + (float)(v340 * v464);
        float v357 = (float)((float)(v461 * v339) + (float)(v338 * v463)) + (float)(v340 * v460);
        _S16 = (float)((float)(v457 * v339) + (float)(v338 * v459)) + (float)(v340 * v455);
        _S20 = (float)((float)(v474 * v343) + (float)(v342 * v483)) + (float)(v344 * v464);
        _S21 = (float)((float)(v461 * v343) + (float)(v342 * v463)) + (float)(v344 * v460);
        float v361 = (float)((float)(v457 * v343) + (float)(v342 * v459)) + (float)(v344 * v455);
        float v362 = (float)((float)(v474 * v347) + (float)(v346 * v483)) + (float)(v348 * v464);
        float v363 = (float)((float)(v461 * v347) + (float)(v346 * v463)) + (float)(v348 * v460);
        float v364 = (float)((float)(v457 * v347) + (float)(v346 * v459)) + (float)(v348 * v455);
        float v365 = (float)((float)(v474 * v354) + (float)(_S23 * v483)) + (float)(v355 * v464);
        float v366 = (float)((float)(v461 * v354) + (float)(_S23 * v463)) + (float)(v355 * v460);
        float v367 = (float)((float)(v457 * v354) + (float)(_S23 * v459)) + (float)(v355 * v455);
        _H0 = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v356, 0.0), 8191.0))];
        __asm { FCVT            S1, H0 }
        _H0 = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v357, 0.0), 8191.0))];
        __asm { FCVT            S2, H0 }
        _H0 = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
        __asm
        {
          FCVT            S3, H0
          FCVT            S5, H5
        }
        _H0 = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S21, 0.0), 8191.0))];
        unsigned int v377 = llroundf(fminf(fmaxf(v361, 0.0), 8191.0));
        __asm { FCVT            S7, H0 }
        _H0 = *(_WORD *)&v76[2 * v377];
        __asm { FCVT            S0, H0 }
        LOWORD(_S16) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v362, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        LOWORD(_S20) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v363, 0.0), 8191.0))];
        __asm { FCVT            S20, H20 }
        LOWORD(_S21) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v364, 0.0), 8191.0))];
        LOWORD(_S23) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v365, 0.0), 8191.0))];
        __asm
        {
          FCVT            S27, H21
          FCVT            S21, H23
        }
        LOWORD(_S23) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v366, 0.0), 8191.0))];
        unsigned int v385 = llroundf(fminf(fmaxf(v367, 0.0), 8191.0));
        __asm { FCVT            S6, H23 }
        LOWORD(_S23) = *(_WORD *)&v76[2 * v385];
        __asm { FCVT            S23, H23 }
        float v387 = (float)((float)((float)(v475 * _S2) + (float)(v476 * _S1)) + (float)(v484 * _S3)) + v45;
        if (v387 < v45) {
          float v388 = v45;
        }
        else {
          float v388 = (float)((float)((float)(v475 * _S2) + (float)(v476 * _S1)) + (float)(v484 * _S3)) + v45;
        }
        BOOL v297 = v387 <= v462;
        float v389 = (float)((float)((float)(v475 * _S7) + (float)(v476 * _S5)) + (float)(v484 * _S0)) + v45;
        if (!v297) {
          float v388 = v462;
        }
        unsigned int v390 = llroundf(v388);
        if (v389 < v45) {
          float v391 = v45;
        }
        else {
          float v391 = (float)((float)((float)(v475 * _S7) + (float)(v476 * _S5)) + (float)(v484 * _S0)) + v45;
        }
        BOOL v297 = v389 <= v462;
        float v392 = (float)((float)((float)(v475 * _S20) + (float)(v476 * _S16)) + (float)(v484 * _S27)) + v45;
        if (!v297) {
          float v391 = v462;
        }
        unsigned int v393 = llroundf(v391);
        if (v392 < v45) {
          float v394 = v45;
        }
        else {
          float v394 = (float)((float)((float)(v475 * _S20) + (float)(v476 * _S16)) + (float)(v484 * _S27)) + v45;
        }
        BOOL v297 = v392 <= v462;
        float v395 = (float)((float)((float)(v475 * _S6) + (float)(v476 * _S21)) + (float)(v484 * *(float *)_Q23.i32)) + v45;
        if (!v297) {
          float v394 = v462;
        }
        unsigned int v396 = llroundf(v394);
        if (v395 < v45) {
          float v397 = v45;
        }
        else {
          float v397 = (float)((float)((float)(v475 * _S6) + (float)(v476 * _S21)) + (float)(v484 * *(float *)_Q23.i32)) + v45;
        }
        if (v395 <= v462) {
          float v398 = v397;
        }
        else {
          float v398 = v462;
        }
        float v399 = (float)((float)(_S1 + _S5) + _S16) + _S21;
        float v400 = (float)((float)(_S2 + _S7) + _S20) + _S6;
        v72->i16[0] = v390 << v79;
        v72->i16[1] = v393 << v79;
        v103->i16[0] = v396 << v79;
        v103->i16[1] = llroundf(v398) << v79;
        float v47 = v321;
        float v401 = (float)((float)(_S3 + _S0) + _S27) + *(float *)_Q23.i32;
        float v402 = (float)((float)(v321 + (float)(v399 * *(float *)&v480)) + (float)(v400 * *(float *)&v479))
             + (float)(v401 * *(float *)&v478);
        float v403 = v456;
        if (v402 <= v456)
        {
          float v403 = (float)((float)(v321 + (float)(v399 * *(float *)&v480)) + (float)(v400 * *(float *)&v479))
               + (float)(v401 * *(float *)&v478);
          if (v402 < v488) {
            float v403 = v488;
          }
        }
        *(float *)_Q0.i32 = (float)((float)(v321 + (float)(v399 * *((float *)&v480 + 1)))
                                  + (float)(v400 * *((float *)&v479 + 1)))
                          + (float)(v401 * *((float *)&v478 + 1));
        v104->i16[0] = llroundf(v403) << v79;
        float v404 = v456;
        float v37 = v486;
        float v39 = v487;
        _S30 = v458;
        float16x8_t v69 = v491;
        float16x8_t v97 = v492;
        float16x8_t v95 = v449;
        float16x8_t v96 = v320;
        if (*(float *)_Q0.i32 <= v456)
        {
          float v404 = *(float *)_Q0.i32;
          if (*(float *)_Q0.i32 < v488) {
            float v404 = v488;
          }
        }
        v272 += 2;
        v271 += 2;
        float v78 = (int8x8_t *)((char *)v78 + 2);
        float v102 = (int8x8_t *)((char *)v102 + 2);
        v104->i16[1] = llroundf(v404) << v79;
        size_t v72 = (uint16x8_t *)((char *)v72 + 4);
        float v103 = (uint16x8_t *)((char *)v103 + 4);
        char v104 = (uint16x8_t *)((char *)v104 + 4);
        float16x8_t v58 = v471;
        float16x8_t v54 = v472;
        float16x8_t v59 = v473;
        float16x8_t v91 = (float16x8_t)v477;
      }
      float v78 = (int8x8_t *)&v99[v32];
      v77 += v31;
      size_t v72 = (uint16x8_t *)&v100[v33];
      v71 += v34;
      v18 += 2;
    }
    while (v22 > v18);
    if (v418 && v417)
    {
      uint64_t v405 = 0;
      short float v406 = __b;
      v407 = v414;
      do
      {
        if (v19)
        {
          size_t v408 = v19;
          v409 = v406;
          v410 = v407;
          do
          {
            __int16 v411 = *v410++;
            *v409++ = v411 | (v411 << 8);
            --v408;
          }
          while (v408);
        }
        v407 += v415;
        short float v406 = (_WORD *)((char *)v406 + v419);
        ++v405;
      }
      while (v405 != v22);
    }
    else
    {
      uint64_t v412 = v419;
      v413 = (char *)__b;
      if (v417)
      {
        do
        {
          if (v19)
          {
            uint64_t result = (float32x2_t *)memset(v413, 255, 2 * v19);
            uint64_t v412 = v419;
          }
          v413 += v412;
          --v22;
        }
        while (v22);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Tone_Mat_TRC_xf420_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v7 = *(void *)((char *)result + 28);
  unint64_t v8 = 2 * *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    unint64_t v12 = *(void *)((char *)result + 20);
    uint64_t v13 = *(void *)((char *)result + 36);
    uint64_t v14 = *(void *)((char *)result + 44) + 2 * v9;
    unint64_t v15 = 2 * v10 - 2 * v9;
    uint64_t v16 = result[14];
    uint64_t v17 = (void *)result[16];
    uint64_t v18 = result[15] + 2 * (result[13] * a2 / v8);
    uint64_t v19 = result[19];
    uint64_t v20 = (void *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v202 = v20[2];
    uint64_t v26 = (unsigned __int8 *)(v202 + v25 * v14 + v13);
    uint64_t v27 = *v22;
    uint64_t v28 = v22[1];
    uint64_t v29 = v22[2];
    uint64_t v30 = v17[2];
    uint64_t v31 = (char *)(v30 + v29 * v18 + 2 * v16);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    float v32 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    float v33 = (float)LODWORD(a5);
    float v34 = (float)LODWORD(a6);
    float v35 = v32 * *(float *)v19;
    float v228 = v32 * *(float *)(v19 + 16);
    float v229 = v32 * *(float *)(v19 + 8);
    float v36 = v32 * *(float *)(v19 + 20);
    *(float *)&unsigned int v37 = v32 * *(float *)(v19 + 28);
    float v226 = *(float *)&v37;
    float v227 = v36;
    LOWORD(v37) = *(_WORD *)(v19 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 150);
    *(float *)&unsigned int v41 = (float)v37;
    float v232 = *(float *)&v41;
    LOWORD(v41) = *(_WORD *)(v19 + 152);
    float v42 = (float)v41;
    float v222 = *(float *)(v19 + 40);
    float v223 = *(float *)(v19 + 36);
    float v220 = *(float *)(v19 + 48) * 0.25;
    float v221 = *(float *)(v19 + 44);
    float v218 = *(float *)(v19 + 56) * 0.25;
    float v219 = *(float *)(v19 + 52) * 0.25;
    float v216 = *(float *)(v19 + 64) * 0.25;
    float v217 = *(float *)(v19 + 60) * 0.25;
    float v214 = *(float *)(v19 + 68) * 0.25;
    float v215 = *(float *)(v19 + 72);
    float v212 = *(float *)(v19 + 80);
    float v213 = *(float *)(v19 + 76);
    float v210 = *(float *)(v19 + 88);
    float v211 = *(float *)(v19 + 84);
    float v208 = *(float *)(v19 + 96);
    float v209 = *(float *)(v19 + 92);
    float v43 = *(float *)(v19 + 104);
    float v206 = v43;
    float v207 = *(float *)(v19 + 100);
    uint64_t v44 = v19 + 164;
    uint64_t result = (void *)(v19 + 16548);
    uint64_t v45 = v19 + 32932;
    unsigned int v46 = *(unsigned __int8 *)(v19 + 132);
    uint64_t v47 = v17[1];
    float v48 = (char *)(*v17 + v27 * v18 + 2 * v16);
    if (v46 >= 0x11) {
      char v49 = 0;
    }
    else {
      char v49 = 16 - v46;
    }
    uint64_t v50 = v47 + v28 * (v18 / 2);
    uint64_t v51 = v20[1];
    unsigned __int8 v52 = (unsigned char *)(*v20 + v23 * v14 + v13);
    uint64_t v53 = v50 + 2 * v16;
    uint64_t v54 = v51 + v24 * (v14 / 2) + v13;
    char v55 = v49;
    float v56 = *(float *)(v19 + 108);
    float v57 = *(float *)(v19 + 112);
    float v58 = *(float *)(v19 + 116);
    float v59 = *(float *)(v19 + 120);
    float v230 = (float)LODWORD(a6);
    float v231 = (float)LODWORD(a5);
    float v224 = v42;
    float v225 = v39;
    float v204 = v57;
    float v205 = v35;
    float v203 = v56;
    do
    {
      float v60 = &v52[v23];
      float v61 = &v48[v27];
      if (v12)
      {
        unint64_t v62 = 0;
        int32x4_t v63 = &v52[v23];
        float32x4_t v64 = &v48[v27];
        do
        {
          LOBYTE(v43) = *(unsigned char *)(v54 + v62 + 1);
          float v65 = (float)LODWORD(v43) - v34;
          unsigned int v66 = LODWORD(v229);
          float v67 = v229 * v65;
          LOBYTE(v66) = *v52;
          float v68 = v35 * (float)((float)v66 - v33);
          float v69 = (float)(v229 * v65) + v68;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = (float)(v229 * v65) + v68;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          LOBYTE(v69) = *(unsigned char *)(v54 + v62);
          float v71 = (float)LODWORD(v69) - v34;
          float v72 = (float)(v227 * v65) + (float)(v71 * v228);
          float v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            float v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v226 * v71;
          float v75 = (float)(v226 * v71) + v68;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          LOBYTE(v75) = v52[1];
          float v77 = v35 * (float)((float)LODWORD(v75) - v33);
          float v78 = 8191.0;
          if ((float)(v67 + v77) <= 8191.0)
          {
            float v78 = v67 + v77;
            if ((float)(v67 + v77) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            float v79 = v72 + v77;
            if ((float)(v72 + v77) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v74 + v77;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          LOBYTE(v80) = *v63;
          float v82 = v35 * (float)((float)LODWORD(v80) - v33);
          float v83 = 8191.0;
          if ((float)(v67 + v82) <= 8191.0)
          {
            float v83 = v67 + v82;
            if ((float)(v67 + v82) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = 8191.0;
          if ((float)(v72 + v82) <= 8191.0)
          {
            float v84 = v72 + v82;
            if ((float)(v72 + v82) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v74 + v82;
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          LOBYTE(_S22) = v63[1];
          float v87 = v35 * (float)((float)LODWORD(_S22) - v33);
          float v88 = v67 + v87;
          BOOL v89 = (float)(v67 + v87) <= 8191.0;
          float v90 = 8191.0;
          if (v89)
          {
            float v90 = v88;
            if (v88 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v72 + v87;
          BOOL v89 = (float)(v72 + v87) <= 8191.0;
          float v92 = 8191.0;
          if (v89)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v74 + v87;
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          _H19 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S24, H20 }
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S25, H20 }
          _H28 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H20 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v44 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          float v114 = (float)((float)((float)(v57 * _S24) + (float)(v56 * _S19)) + (float)(v58 * _S25))
               + (float)(v59 * fmaxf(_S19, fmaxf(_S24, _S25)));
          float v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            float v115 = v114;
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          __asm
          {
            FCVT            S27, H28
            FCVT            S28, H23
            FCVT            S30, H20
          }
          _H22 = *((_WORD *)result + llroundf(v115));
          float v120 = (float)((float)((float)(v57 * _S28) + (float)(v56 * _S27)) + (float)(v58 * _S30))
               + (float)(v59 * fmaxf(_S27, fmaxf(_S28, _S30)));
          float v121 = 8191.0;
          if (v120 <= 8191.0)
          {
            float v121 = v120;
            if (v120 < 0.0) {
              float v121 = 0.0;
            }
          }
          __asm
          {
            FCVT            S8, H17
            FCVT            S9, H26
            FCVT            S10, H21
          }
          _H17 = *((_WORD *)result + llroundf(v121));
          float v126 = fmaxf(_S8, fmaxf(_S9, _S10));
          float v127 = (float)((float)((float)(v57 * _S9) + (float)(v56 * _S8)) + (float)(v58 * _S10)) + (float)(v59 * v126);
          float v128 = 8191.0;
          if (v127 <= 8191.0)
          {
            float v128 = (float)((float)((float)(v57 * _S9) + (float)(v56 * _S8)) + (float)(v58 * _S10)) + (float)(v59 * v126);
            if (v127 < 0.0) {
              float v128 = 0.0;
            }
          }
          __asm
          {
            FCVT            S26, H1
            FCVT            S29, H2
            FCVT            S31, H3
            FCVT            S1, H22
          }
          float v133 = _S19 * _S1;
          float v134 = _S24 * _S1;
          float v135 = _S25 * _S1;
          __asm { FCVT            S1, H17 }
          float v137 = _S27 * _S1;
          float v138 = _S28 * _S1;
          float v139 = _S30 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v128));
          __asm { FCVT            S2, H1 }
          float v141 = _S8 * _S2;
          float v142 = _S9 * _S2;
          float v143 = _S10 * _S2;
          float v144 = (float)((float)((float)(v57 * _S29) + (float)(v56 * _S26)) + (float)(v58 * _S31))
               + (float)(v59 * fmaxf(_S26, fmaxf(_S29, _S31)));
          float v145 = 8191.0;
          if (v144 <= 8191.0)
          {
            float v145 = v144;
            if (v144 < 0.0) {
              float v145 = 0.0;
            }
          }
          _H24 = *((_WORD *)result + llroundf(v145));
          __asm { FCVT            S24, H24 }
          float v148 = _S26 * _S24;
          float v149 = _S29 * _S24;
          float v150 = _S31 * _S24;
          float v151 = (float)((float)(v213 * v134) + (float)(v133 * v215)) + (float)(v135 * v212);
          float v152 = (float)((float)(v210 * v134) + (float)(v133 * v211)) + (float)(v135 * v209);
          _S20 = (float)((float)(v207 * v134) + (float)(v133 * v208)) + (float)(v135 * v206);
          _S22 = (float)((float)(v213 * v138) + (float)(v137 * v215)) + (float)(v139 * v212);
          _S23 = (float)((float)(v210 * v138) + (float)(v137 * v211)) + (float)(v139 * v209);
          _S19 = (float)((float)(v207 * v138) + (float)(v137 * v208)) + (float)(v139 * v206);
          float v157 = (float)((float)(v213 * v142) + (float)(v141 * v215)) + (float)(v143 * v212);
          float v158 = (float)((float)(v210 * v142) + (float)(v141 * v211)) + (float)(v143 * v209);
          float v159 = (float)((float)(v207 * v142) + (float)(v141 * v208)) + (float)(v143 * v206);
          float v160 = (float)((float)(v213 * v149) + (float)(v148 * v215)) + (float)(v150 * v212);
          float v161 = (float)((float)(v210 * v149) + (float)(v148 * v211)) + (float)(v150 * v209);
          float v162 = (float)((float)(v207 * v149) + (float)(v148 * v208)) + (float)(v150 * v206);
          _H1 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H3 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S22, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S17, H17
          }
          LOWORD(_S20) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S23, 0.0), 8191.0)));
          __asm { FCVT            S21, H20 }
          LOWORD(_S19) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          LOWORD(_S20) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          __asm { FCVT            S24, H20 }
          LOWORD(_S20) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S25, H20 }
          LOWORD(_S20) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          LOWORD(_S22) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H20
            FCVT            S20, H22
          }
          LOWORD(_S22) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          LOWORD(_S23) = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S23, H23 }
          float v178 = (float)((float)((float)(v222 * _S2) + (float)(v223 * _S1)) + (float)(v221 * _S3)) + v38;
          if (v178 < v38) {
            float v179 = v38;
          }
          else {
            float v179 = (float)((float)((float)(v222 * _S2) + (float)(v223 * _S1)) + (float)(v221 * _S3)) + v38;
          }
          BOOL v89 = v178 <= v40;
          float v180 = (float)((float)((float)(v222 * _S21) + (float)(v223 * _S17)) + (float)(v221 * _S19)) + v38;
          if (!v89) {
            float v179 = v40;
          }
          unsigned int v181 = llroundf(v179);
          if (v180 < v38) {
            float v182 = v38;
          }
          else {
            float v182 = (float)((float)((float)(v222 * _S21) + (float)(v223 * _S17)) + (float)(v221 * _S19)) + v38;
          }
          BOOL v89 = v180 <= v40;
          float v183 = (float)((float)((float)(v222 * _S25) + (float)(v223 * _S24)) + (float)(v221 * _S26)) + v38;
          if (!v89) {
            float v182 = v40;
          }
          unsigned int v184 = llroundf(v182);
          if (v183 < v38) {
            float v185 = v38;
          }
          else {
            float v185 = (float)((float)((float)(v222 * _S25) + (float)(v223 * _S24)) + (float)(v221 * _S26)) + v38;
          }
          BOOL v89 = v183 <= v40;
          float v186 = (float)((float)((float)(v222 * _S22) + (float)(v223 * _S20)) + (float)(v221 * _S23)) + v38;
          if (!v89) {
            float v185 = v40;
          }
          unsigned int v187 = llroundf(v185);
          if (v186 < v38) {
            float v188 = v38;
          }
          else {
            float v188 = (float)((float)((float)(v222 * _S22) + (float)(v223 * _S20)) + (float)(v221 * _S23)) + v38;
          }
          if (v186 <= v40) {
            float v189 = v188;
          }
          else {
            float v189 = v40;
          }
          float v190 = (float)((float)(_S1 + _S17) + _S24) + _S20;
          float v191 = (float)((float)(_S2 + _S21) + _S25) + _S22;
          *(_WORD *)float v48 = v181 << v55;
          *((_WORD *)v48 + 1) = v184 << v55;
          *(_WORD *)float32x4_t v64 = v187 << v55;
          *((_WORD *)v64 + 1) = llroundf(v189) << v55;
          float v192 = (float)((float)(_S3 + _S19) + _S26) + _S23;
          float v193 = (float)((float)(v225 + (float)(v190 * v220)) + (float)(v191 * v219)) + (float)(v192 * v218);
          float v194 = v224;
          if (v193 <= v224)
          {
            float v194 = (float)((float)(v225 + (float)(v190 * v220)) + (float)(v191 * v219)) + (float)(v192 * v218);
            if (v193 < v232) {
              float v194 = v232;
            }
          }
          uint64_t v195 = (_WORD *)(v53 + 2 * v62);
          float v196 = (float)((float)(v225 + (float)(v190 * v217)) + (float)(v191 * v216)) + (float)(v192 * v214);
          *uint64_t v195 = llroundf(v194) << v55;
          float v43 = v224;
          float v33 = v231;
          float v35 = v205;
          if (v196 <= v224)
          {
            float v43 = v196;
            if (v196 < v232) {
              float v43 = v232;
            }
          }
          v52 += 2;
          v63 += 2;
          v48 += 4;
          v64 += 4;
          v195[1] = llroundf(v43) << v55;
          v62 += 2;
          float v34 = v230;
          float v56 = v203;
          float v57 = v204;
        }
        while (v12 > v62);
      }
      unsigned __int8 v52 = &v60[v23];
      v54 += v24;
      float v48 = &v61[v27];
      v53 += v28;
      v11 += 2;
    }
    while (v15 > v11);
    if (v202 && v30)
    {
      uint64_t v197 = 0;
      do
      {
        if (v12)
        {
          unint64_t v198 = v12;
          float16x8_t v199 = v31;
          float16x8_t v200 = v26;
          do
          {
            __int16 v201 = *v200++;
            *v199++ = v201 | (v201 << 8);
            --v198;
          }
          while (v198);
        }
        v26 += v25;
        v31 += v29;
        ++v197;
      }
      while (v197 != v15);
    }
    else if (v30)
    {
      do
      {
        if (v12) {
          uint64_t result = memset(v31, 255, 2 * v12);
        }
        v31 += v29;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_xf420_neon_fp16_GCD);
  return 0;
}

uint16x8_t *vt_Copy_420vf_TRC_Mat_TRC_xf420_neon_fp16_GCD(uint16x8_t *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, int16x4_t a10)
{
  uint64_t v19 = *(uint64_t *)((char *)&result[1].i64[1] + 4);
  unint64_t v20 = 2 * result->u8[0];
  unint64_t v21 = v19 * a2 / v20;
  unint64_t v22 = (v19 + v19 * a2) / v20;
  if (2 * v22 != 2 * v21)
  {
    unint64_t v23 = 0;
    unint64_t v24 = *(unint64_t *)((char *)result[1].u64 + 4);
    uint64_t v25 = *(uint64_t *)((char *)result[2].i64 + 4);
    uint64_t v26 = *(uint64_t *)((char *)&result[2].i64[1] + 4) + 2 * v21;
    unint64_t v27 = 2 * v22 - 2 * v21;
    uint64_t v28 = result[7].i64[0];
    uint64_t v29 = (uint64_t *)result[8].i64[0];
    uint64_t v30 = result[7].i64[1] + 2 * (result[6].i64[1] * a2 / v20);
    uint64_t v31 = (float32x2_t *)result[9].i64[1];
    uint64_t v32 = (void *)result[3].i64[1];
    uint64_t v33 = (uint64_t *)result[4].i64[0];
    uint64_t v34 = (uint64_t *)result[8].i64[1];
    uint64_t v35 = *v33;
    uint64_t v36 = v33[1];
    uint64_t v350 = v33[2];
    uint64_t v38 = *v34;
    uint64_t v37 = v34[1];
    uint64_t v353 = v32[2];
    uint64_t v354 = v34[2];
    uint64_t v352 = v29[2];
    LODWORD(v33) = v31[17].u16[2];
    LODWORD(v34) = v31[17].u16[3];
    float v39 = (float)v33;
    float v40 = (float)v34;
    *(short float *)v16.i16 = (short float)v33;
    LODWORD(v33) = v31[18].u16[0];
    short float v41 = (short float)v34;
    unsigned int v42 = v31[18].u16[1];
    float v411 = v31[5].f32[1];
    LODWORD(v34) = v31[18].u16[2];
    float v46 = (float)v33;
    *(float *)&a6 = (float)v42;
    float v370 = (float)v42;
    *(short float *)&a6 = (short float)v33;
    LODWORD(v33) = v31[18].u16[3];
    *(short float *)a10.i16 = (short float)v42;
    unsigned int v47 = v31[19].u16[0];
    float v391 = (float)v34;
    _S13 = v31[4].i32[1];
    float v410 = v31[5].f32[0];
    *(float *)v13.i32 = (float)v33;
    float v414 = (float)v33;
    _S15 = v31[9].i32[0];
    _S14 = v31[9].i32[1];
    *(short float *)v13.i16 = (short float)v34;
    *(short float *)v15.i16 = (short float)v33;
    unsigned int v51 = v31[16].u8[4];
    if (v51 >= 0x11) {
      unsigned __int8 v52 = 0;
    }
    else {
      unsigned __int8 v52 = 16 - v51;
    }
    if (v30 >= 0) {
      uint64_t v53 = v30;
    }
    else {
      uint64_t v53 = v30 + 1;
    }
    uint64_t v54 = *v29;
    char v55 = (char *)&v31[20] + 4;
    float v349 = (unsigned __int8 *)(v32[2] + v350 * v26 + v25);
    __b = (uint16x8_t *)(v352 + v354 * v30 + 2 * v28);
    float v56 = 8191.0 / (float)v31[16].u32[0];
    _S28 = v56 * v31->f32[0];
    float16x8_t v58 = (float16x8_t)vdupq_lane_s16(v16, 0);
    short float v59 = -v41;
    v14.i32[1] = v31[1].i32[0];
    v14.i32[0] = v31[3].i32[1];
    *(float32x2_t *)v14.f32 = vmul_n_f32(*(float32x2_t *)v14.f32, v56);
    float16x8_t v60 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v14), 0);
    *(float32x2_t *)v11.f32 = vmul_n_f32(v31[2], v56);
    float16x8_t v61 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    float16x8_t v62 = vmulq_n_f16(v60, v59);
    __asm { FMOV            V2.2S, #0.25 }
    v43.i32[1] = v31[7].i32[1];
    v43.i32[0] = v31[6].i32[0];
    *(float32x2_t *)v12.f32 = vmul_f32(v43, _D2);
    float16x8_t v369 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v12), 0);
    v44.i32[1] = v31[8].i32[0];
    v44.i32[0] = v31[6].i32[1];
    *(float32x2_t *)v18.f32 = vmul_f32(v44, _D2);
    float16x8_t v68 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v18), 0);
    v45.i32[1] = v31[8].i32[1];
    v45.i32[0] = v31[7].i32[0];
    *(float32x2_t *)v10.f32 = vmul_f32(v45, _D2);
    float16x8_t v69 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    int16x8_t v70 = vdupq_lane_s16(*(int16x4_t *)&a6, 0);
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(a10, 0);
    float16x8_t v72 = vmulq_n_f16(v61, v59);
    int16x8_t v73 = vdupq_lane_s16(v13, 0);
    uint64_t v74 = v29[1] + v37 * (v53 >> 1) + 2 * v28;
    uint64_t result = (uint16x8_t *)(v54 + v38 * v30 + 2 * v28);
    if (v26 >= 0) {
      uint64_t v75 = v26;
    }
    else {
      uint64_t v75 = v26 + 1;
    }
    float v76 = (char *)&v31[2068] + 4;
    *(short float *)v17.i16 = (short float)v47;
    _Q7 = vdupq_lane_s16(v17, 0);
    float16x8_t v396 = (float16x8_t)_Q7;
    float16x8_t v397 = (float16x8_t)vdupq_lane_s16(v15, 0);
    float16x8_t v78 = (float16x8_t)v70;
    float v79 = (unsigned char *)(v32[1] + v36 * (v75 >> 1) + v25);
    float v80 = (int8x8_t *)(*v32 + v35 * v26 + v25);
    unsigned __int8 v81 = v52;
    unint64_t v357 = v24 & 0xFFFFFFF8;
    _Q7.i32[0] = v31[10].i32[1];
    __asm { FCVT            H8, S28 }
    short float v409 = _H8;
    float v408 = v31[4].f32[1];
    __asm { FCVT            H13, S13 }
    short float v382 = _H13;
    _S8 = v31[5].i32[0];
    __asm { FCVT            H13, S8 }
    short float v418 = _H13;
    _S8 = v31[5].i32[1];
    __asm { FCVT            H13, S8 }
    short float v381 = _H13;
    float v407 = v31[9].f32[0];
    __asm { FCVT            H13, S15 }
    float v406 = v31[9].f32[1];
    __asm { FCVT            H8, S14 }
    short float v379 = *(short float *)&_S8;
    float v394 = v31[10].f32[0];
    __asm { FCVT            H2, S2 }
    float v392 = *(float *)_Q7.i32;
    __asm { FCVT            H7, S7 }
    float v390 = v31[11].f32[0];
    __asm { FCVT            H8, S6 }
    short float v90 = v409;
    float v388 = v31[11].f32[1];
    __asm { FCVT            H14, S16 }
    short float v375 = _H14;
    float v386 = v31[12].f32[0];
    __asm { FCVT            H14, S19 }
    short float v417 = _H14;
    float v385 = v31[12].f32[1];
    __asm { FCVT            H3, S3 }
    float v383 = v31[13].f32[0];
    __asm { FCVT            H5, S5 }
    _Q16 = (float16x8_t)vdupq_n_s16(v52);
    uint64_t v96 = v11.i64[0];
    float v405 = v12.f32[0];
    float16x8_t v403 = v68;
    uint64_t v97 = v18.i64[0];
    float v371 = v12.f32[1];
    float16x8_t v402 = v69;
    uint64_t v98 = v10.i64[0];
    uint16x8_t v99 = (uint16x8_t)_Q16;
    *(void *)&v100[2] = 0;
    float16x8_t v398 = (float16x8_t)v73;
    float16x8_t v399 = v72;
    short float v378 = _H2;
    short float v373 = _H5;
    short float v374 = _H3;
    unint64_t v363 = v27;
    unint64_t v364 = v24;
    uint64_t v361 = v36;
    uint64_t v362 = v35;
    uint64_t v359 = v37;
    uint64_t v360 = v38;
    float v404 = (float)v47;
    float16x8_t v400 = v62;
    float16x8_t v401 = v60;
    int v395 = v24 - 7;
    unsigned __int8 v358 = v52;
    float16x8_t v393 = v58;
    float16x8_t v389 = v71;
    float16x8_t v387 = v61;
    float v413 = _S28;
    float16x8_t v384 = v78;
    short float v380 = _H13;
    short float v376 = *(short float *)&_S8;
    int16x8_t v377 = _Q7;
    float16x8_t v372 = _Q16;
    float v355 = v39;
    float v356 = v40;
    do
    {
      uint64_t v101 = (char *)v80 + v35;
      float v102 = &result->u8[v38];
      if ((int)v24 < 8)
      {
        unint64_t v243 = 0;
        float16x8_t v106 = (int16x8_t *)v74;
        float16x8_t v105 = (uint16x8_t *)((char *)result + v38);
        uint64_t v242 = v79;
        char v104 = (int8x8_t *)((char *)v80 + v35);
      }
      else
      {
        uint64_t v367 = v74;
        unint64_t v368 = v23;
        uint64_t v103 = 0;
        float v365 = (char *)v80 + v35;
        float v366 = &result->u8[v38];
        char v104 = (int8x8_t *)((char *)v80 + v35);
        float16x8_t v105 = (uint16x8_t *)((char *)result + v38);
        float16x8_t v106 = (int16x8_t *)v74;
        v107.i64[0] = 0x9000900090009000;
        v107.i64[1] = 0x9000900090009000;
        uint64_t v412 = v79;
        do
        {
          v416 = result;
          int8x8_t v108 = *(int8x8_t *)&v79[v103];
          *(int8x8_t *)v109.i8 = vzip1_s8(v108, *(int8x8_t *)&v100[2]);
          v109.u64[1] = (unint64_t)vzip2_s8(v108, *(int8x8_t *)&v100[2]);
          float16x8_t v110 = vcvtq_f16_u16(v109);
          int8x16_t v111 = (int8x16_t)vmlaq_f16(v62, v60, v110);
          int16x8_t v112 = (int16x8_t)vmlaq_f16(v72, v61, v110);
          v110.i64[0] = vextq_s8(v111, v111, 8uLL).u64[0];
          *(int16x4_t *)v113.i8 = vuzp1_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v110.i8);
          *(int16x4_t *)v110.i8 = vuzp2_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v110.i8);
          v110.i64[1] = v72.i64[0];
          v113.i64[1] = v72.i64[0];
          v111.i64[0] = vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL).u64[0];
          *(float16x4_t *)v112.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v111.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v111.i8));
          v112.i64[1] = v72.i64[0];
          int8x8_t v114 = *v80++;
          *(int8x8_t *)v115.i8 = vzip1_s8(v114, *(int8x8_t *)&v100[2]);
          float16x8_t v116 = (float16x8_t)vzip1q_s16((int16x8_t)v110, (int16x8_t)v110);
          v115.u64[1] = (unint64_t)vzip2_s8(v114, 0);
          int8x8_t v117 = *v104++;
          float16x8_t v118 = (float16x8_t)vzip1q_s16(v113, v113);
          float16x8_t v119 = vcvtq_f16_u16(v115);
          *(int8x8_t *)v115.i8 = vzip1_s8(v117, 0);
          v115.u64[1] = (unint64_t)vzip2_s8(v117, 0);
          float16x8_t v120 = (float16x8_t)vzip1q_s16(v112, v112);
          float16x8_t v121 = vsubq_f16(v119, v58);
          float16x8_t v122 = vsubq_f16(vcvtq_f16_u16(v115), v58);
          float16x8_t v123 = vmlaq_n_f16(v116, v121, v90);
          float16x8_t v124 = vmlaq_n_f16(v116, v122, v90);
          float16x8_t v125 = v120;
          float16x8_t v126 = vmlaq_n_f16(v120, v122, v90);
          float16x8_t v127 = vmlaq_n_f16(v118, v121, v90);
          float16x8_t v128 = vmlaq_n_f16(v118, v122, v90);
          float16x8_t v129 = vmlaq_n_f16(v125, v121, v90);
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v107));
          uint32x4_t v131 = vmovl_high_u16(v130);
          *(void *)&long long v132 = v131.u32[2];
          *((void *)&v132 + 1) = v131.u32[3];
          long long v133 = v132;
          *(void *)&long long v132 = v131.u32[0];
          *((void *)&v132 + 1) = v131.u32[1];
          long long v134 = v132;
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v130.i8);
          *(void *)&long long v132 = v135.u32[2];
          *((void *)&v132 + 1) = v135.u32[3];
          long long v136 = v132;
          uint64_t v137 = v135.u32[1];
          v138.i16[0] = *(_WORD *)&v55[2 * v135.u32[0]];
          uint64_t v139 = *((void *)&v134 + 1);
          uint64_t v140 = *((void *)&v133 + 1);
          float v141 = (__int16 *)&v55[2 * v134];
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v107));
          float16x8_t v143 = (float16x8_t)vmovl_high_u16(v142);
          float v144 = (__int16 *)&v55[2 * v133];
          *(void *)&long long v132 = v143.u32[2];
          *((void *)&v132 + 1) = v143.u32[3];
          long long v145 = v132;
          *(void *)&long long v132 = v143.u32[0];
          v129.i64[1] = v143.u32[1];
          uint32x4_t v146 = vmovl_u16(*(uint16x4_t *)v142.i8);
          uint64_t v147 = v146.u32[1];
          uint64_t v148 = v146.u32[3];
          v143.i16[0] = *(_WORD *)&v55[2 * v146.u32[0]];
          float v149 = (__int16 *)&v55[2 * v146.u32[2]];
          float v150 = (__int16 *)&v55[2 * v132];
          uint64_t v151 = *((void *)&v145 + 1);
          uint64_t v415 = (__int16 *)&v55[2 * v145];
          uint16x8_t v152 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, (float16x8_t)0), v107));
          uint32x4_t v153 = vmovl_high_u16(v152);
          uint32x4_t v154 = vmovl_u16(*(uint16x4_t *)v152.i8);
          v155.i16[0] = *(_WORD *)&v55[2 * v154.u32[0]];
          uint32x4_t v156 = (__int16 *)&v55[2 * v154.u32[1]];
          float v157 = (__int16 *)&v55[2 * v154.u32[2]];
          float v158 = (__int16 *)&v55[2 * v154.u32[3]];
          v138.i16[1] = *(_WORD *)&v55[2 * v137];
          float v159 = (__int16 *)&v55[2 * v153.u32[0]];
          float v160 = (__int16 *)&v55[2 * v153.u32[1]];
          float v161 = (__int16 *)&v55[2 * v147];
          float v162 = (__int16 *)&v55[2 * v153.u32[2]];
          float v163 = (__int16 *)&v55[2 * v153.u32[3]];
          uint16x8_t v164 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v107));
          uint32x4_t v165 = vmovl_high_u16(v164);
          uint32x4_t v166 = vmovl_u16(*(uint16x4_t *)v164.i8);
          v124.i16[0] = *(_WORD *)&v55[2 * v166.u32[0]];
          v155.i16[1] = *v156;
          v138.i16[2] = *(_WORD *)&v55[2 * v136];
          v143.i16[1] = *v161;
          uint32x4_t v167 = (__int16 *)&v55[2 * v165.u32[0]];
          v155.i16[2] = *v157;
          uint32x4_t v168 = (__int16 *)&v55[2 * v165.u32[1]];
          v124.i16[1] = *(_WORD *)&v55[2 * v166.u32[1]];
          v138.i16[3] = *(_WORD *)&v55[2 * *((void *)&v136 + 1)];
          float v169 = (__int16 *)&v55[2 * v165.u32[2]];
          float v170 = (__int16 *)&v55[2 * v165.u32[3]];
          v124.i16[2] = *(_WORD *)&v55[2 * v166.u32[2]];
          v143.i16[2] = *v149;
          v124.i16[3] = *(_WORD *)&v55[2 * v166.u32[3]];
          v155.i16[3] = *v158;
          uint16x8_t v171 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, (float16x8_t)0), v107));
          float16x8_t v172 = (float16x8_t)vmovl_high_u16(v171);
          *(void *)&long long v132 = v172.u32[2];
          *((void *)&v132 + 1) = v172.u32[3];
          long long v173 = v132;
          *(void *)&long long v132 = v172.u32[0];
          *((void *)&v132 + 1) = v172.u32[1];
          v124.i16[4] = *v167;
          uint32x4_t v174 = vmovl_u16(*(uint16x4_t *)v171.i8);
          v138.i16[4] = *v141;
          v172.i16[0] = *(_WORD *)&v55[2 * v174.u32[0]];
          v143.i16[3] = *(_WORD *)&v55[2 * v148];
          v155.i16[4] = *v159;
          v124.i16[5] = *v168;
          v138.i16[5] = *(_WORD *)&v55[2 * v139];
          v143.i16[4] = *v150;
          v172.i16[1] = *(_WORD *)&v55[2 * v174.u32[1]];
          v172.i16[2] = *(_WORD *)&v55[2 * v174.u32[2]];
          v155.i16[5] = *v160;
          v172.i16[3] = *(_WORD *)&v55[2 * v174.u32[3]];
          v172.i16[4] = *(_WORD *)&v55[2 * v132];
          v124.i16[6] = *v169;
          v172.i16[5] = *(_WORD *)&v55[2 * *((void *)&v132 + 1)];
          v138.i16[6] = *v144;
          uint16x8_t v175 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v107));
          uint32x4_t v176 = vmovl_high_u16(v175);
          v143.i16[5] = *(_WORD *)&v55[2 * v129.i64[1]];
          uint32x4_t v177 = vmovl_u16(*(uint16x4_t *)v175.i8);
          v155.i16[6] = *v162;
          v129.i16[0] = *(_WORD *)&v55[2 * v177.u32[0]];
          v124.i16[7] = *v170;
          v172.i16[6] = *(_WORD *)&v55[2 * v173];
          v138.i16[7] = *(_WORD *)&v55[2 * v140];
          v143.i16[6] = *v415;
          v155.i16[7] = *v163;
          v129.i16[1] = *(_WORD *)&v55[2 * v177.u32[1]];
          v129.i16[2] = *(_WORD *)&v55[2 * v177.u32[2]];
          v143.i16[7] = *(_WORD *)&v55[2 * v151];
          v129.i16[3] = *(_WORD *)&v55[2 * v177.u32[3]];
          v129.i16[4] = *(_WORD *)&v55[2 * v176.u32[0]];
          v172.i16[7] = *(_WORD *)&v55[2 * *((void *)&v173 + 1)];
          v129.i16[5] = *(_WORD *)&v55[2 * v176.u32[1]];
          v129.i16[6] = *(_WORD *)&v55[2 * v176.u32[2]];
          v129.i16[7] = *(_WORD *)&v55[2 * v176.u32[3]];
          float16x8_t v178 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, v380), v143, v379), v155, v378);
          v126.i16[7] = v377.i16[7];
          float16x8_t v179 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, *(short float *)v377.i16), v143, v376), v155, v375);
          float16x8_t v180 = vmlaq_n_f16(vmulq_n_f16(v155, v373), v143, v374);
          float16x8_t v181 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v380), v172, v379), v129, v378);
          float16x8_t v182 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, *(short float *)v377.i16), v172, v376), v129, v375);
          float16x8_t v183 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v373), v172, v374), v124, v417);
          *(_WORD *)&v100[8] = 0;
          uint16x8_t v184 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v178, (float16x8_t)0), v107));
          uint32x4_t v185 = vmovl_high_u16(v184);
          v129.i64[0] = v185.u32[2];
          uint32x4_t v186 = vmovl_u16(*(uint16x4_t *)v184.i8);
          uint64_t v187 = v186.u32[1];
          uint64_t v188 = v186.u32[0];
          uint64_t v189 = v186.u32[3];
          uint64_t v190 = v186.u32[2];
          uint64_t v191 = v185.u32[1];
          uint64_t v192 = v185.u32[0];
          uint16x8_t v193 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v179, (float16x8_t)0), v107));
          uint32x4_t v194 = vmovl_high_u16(v193);
          uint64_t v195 = v185.u32[3];
          *(void *)&long long v132 = v194.u32[2];
          *((void *)&v132 + 1) = v194.u32[3];
          long long v196 = v132;
          *(void *)&long long v132 = v194.u32[0];
          *((void *)&v132 + 1) = v194.u32[1];
          long long v197 = v132;
          float16x8_t v198 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v193.i8);
          *(void *)&long long v132 = v198.u32[2];
          *((void *)&v132 + 1) = v198.u32[3];
          long long v199 = v132;
          *(void *)&long long v132 = v198.u32[0];
          uint64_t v200 = v129.i64[0];
          v198.i16[0] = *(_WORD *)&v76[2 * v188];
          uint64_t v201 = *((void *)&v197 + 1);
          uint64_t v202 = v197;
          float v203 = (__int16 *)&v76[2 * v190];
          uint64_t v204 = *((void *)&v196 + 1);
          uint64_t v205 = v196;
          v126.i16[0] = *(_WORD *)&v76[2 * v132];
          uint16x8_t v206 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v180, v138, v417), (float16x8_t)0), v107));
          uint32x4_t v207 = vmovl_high_u16(v206);
          *(void *)&long long v132 = v207.u32[2];
          *((void *)&v132 + 1) = v207.u32[3];
          long long v208 = v132;
          *(void *)&long long v132 = v207.u32[0];
          *((void *)&v132 + 1) = v207.u32[1];
          long long v209 = v132;
          uint32x4_t v210 = vmovl_u16(*(uint16x4_t *)v206.i8);
          *(void *)&long long v132 = v210.u32[2];
          *((void *)&v132 + 1) = v210.u32[3];
          long long v211 = v132;
          *((void *)&v132 + 1) = v210.u32[1];
          float v212 = (__int16 *)&v76[2 * v187];
          v138.i16[0] = *(_WORD *)&v76[2 * v210.u32[0]];
          uint64_t v213 = *((void *)&v211 + 1);
          float v214 = (__int16 *)&v76[2 * v189];
          uint64_t v215 = *((void *)&v209 + 1);
          uint64_t v216 = v209;
          uint64_t v217 = *((void *)&v208 + 1);
          uint64_t v218 = v208;
          uint16x8_t v219 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v181, (float16x8_t)0), v107));
          uint32x4_t v220 = vmovl_high_u16(v219);
          float16x8_t v221 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v219.i8);
          v198.i16[1] = *v212;
          v126.i16[1] = *(_WORD *)&v76[2 * v198.u32[1]];
          v181.i16[0] = *(_WORD *)&v76[2 * v221.u32[0]];
          v138.i16[1] = *(_WORD *)&v76[2 * *((void *)&v132 + 1)];
          v198.i16[2] = *v203;
          v181.i16[1] = *(_WORD *)&v76[2 * v221.u32[1]];
          v126.i16[2] = *(_WORD *)&v76[2 * v199];
          v181.i16[2] = *(_WORD *)&v76[2 * v221.u32[2]];
          v138.i16[2] = *(_WORD *)&v76[2 * v211];
          uint16x8_t v222 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v182, (float16x8_t)0), v107));
          uint32x4_t v223 = vmovl_u16(*(uint16x4_t *)v222.i8);
          v181.i16[3] = *(_WORD *)&v76[2 * v221.u32[3]];
          v221.i16[7] = (unint64_t)v223.u32[1] >> 48;
          v198.i16[3] = *v214;
          v221.i16[0] = *(_WORD *)&v76[2 * v223.u32[0]];
          v126.i16[3] = *(_WORD *)&v76[2 * *((void *)&v199 + 1)];
          v138.i16[3] = *(_WORD *)&v76[2 * v213];
          v181.i16[4] = *(_WORD *)&v76[2 * v220.u32[0]];
          *((void *)&v132 + 1) = v220.u32[3];
          v198.i16[4] = *(_WORD *)&v76[2 * v192];
          uint32x4_t v224 = vmovl_high_u16(v222);
          v126.i16[4] = *(_WORD *)&v76[2 * v202];
          v221.i16[1] = *(_WORD *)&v76[2 * v223.u32[1]];
          v138.i16[4] = *(_WORD *)&v76[2 * v216];
          v181.i16[5] = *(_WORD *)&v76[2 * v220.u32[1]];
          v221.i16[2] = *(_WORD *)&v76[2 * v223.u32[2]];
          v198.i16[5] = *(_WORD *)&v76[2 * v191];
          v221.i16[3] = *(_WORD *)&v76[2 * v223.u32[3]];
          v126.i16[5] = *(_WORD *)&v76[2 * v201];
          v221.i16[4] = *(_WORD *)&v76[2 * v224.u32[0]];
          v138.i16[5] = *(_WORD *)&v76[2 * v215];
          v181.i16[6] = *(_WORD *)&v76[2 * v220.u32[2]];
          v221.i16[5] = *(_WORD *)&v76[2 * v224.u32[1]];
          v198.i16[6] = *(_WORD *)&v76[2 * v200];
          float v79 = v412;
          v126.i16[6] = *(_WORD *)&v76[2 * v205];
          v221.i16[6] = *(_WORD *)&v76[2 * v224.u32[2]];
          float v225 = (__int16 *)&v76[2 * v224.u32[3]];
          v138.i16[6] = *(_WORD *)&v76[2 * v218];
          uint16x8_t v226 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v183, (float16x8_t)0), v107));
          uint32x4_t v227 = vmovl_high_u16(v226);
          int16x8_t v228 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v226.i8);
          float16x8_t v229 = (float16x8_t)vuzp1q_s16((int16x8_t)v181, (int16x8_t)v221);
          v181.i16[7] = *(_WORD *)&v76[2 * *((void *)&v132 + 1)];
          *(void *)&long long v132 = v227.u32[0];
          *((void *)&v132 + 1) = v227.u32[1];
          long long v230 = v132;
          *((void *)&v132 + 1) = v228.u32[3];
          v228.i16[7] = (unint64_t)v228.u32[3] >> 48;
          v228.i16[0] = *(_WORD *)&v76[2 * v228.u32[0]];
          uint64_t v231 = *((void *)&v230 + 1);
          v221.i16[7] = *v225;
          v228.i16[1] = *(_WORD *)&v76[2 * v228.u32[1]];
          uint64_t v232 = v230;
          float16x8_t v233 = (float16x8_t)vuzp1q_s16((int16x8_t)v198, *(int16x8_t *)&v100[-14]);
          v198.i16[7] = *(_WORD *)&v76[2 * v195];
          float16x8_t v234 = (__int16 *)&v76[2 * v232];
          v228.i16[2] = *(_WORD *)&v76[2 * v228.u32[2]];
          uint64_t v235 = v227.u32[3];
          v228.i16[3] = *(_WORD *)&v76[2 * *((void *)&v132 + 1)];
          *(void *)float v100 = *(unsigned __int16 *)&v76[2 * v204];
          float16x8_t v236 = (__int16 *)&v76[2 * v227.u32[2]];
          v228.i16[4] = *v234;
          float16x8_t v237 = vmlaq_n_f16(vmlaq_n_f16(v78, v198, v382), *(float16x8_t *)&v100[-14], v418);
          float16x8_t v238 = vmlaq_n_f16(vmlaq_n_f16(v78, v181, v382), v221, v418);
          float16x8_t v239 = v138;
          v228.i16[5] = *(_WORD *)&v76[2 * v231];
          v228.i16[6] = *v236;
          v239.i16[7] = *(_WORD *)&v76[2 * v217];
          float16x8_t v240 = vaddq_f16(v233, (float16x8_t)vuzp2q_s16((int16x8_t)v198, *(int16x8_t *)&v100[-14]));
          _Q16 = (float16x8_t)v228;
          _Q16.i16[7] = *(_WORD *)&v76[2 * v235];
          uint16x8_t *v416 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v237, v239, v381), v78), v398)), v99);
          uint64_t result = v416 + 1;
          int16x8_t v241 = (int16x8_t)vaddq_f16(vaddq_f16(v240, v229), (float16x8_t)vuzp2q_s16((int16x8_t)v181, (int16x8_t)v221));
          *v105++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v238, _Q16, v381), v78), v398)), v99);
          int16x8_t v73 = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v71, v369, (float16x8_t)vzip1q_s16(v241, v241)), v68, (float16x8_t)vzip2q_s16(v241, v241)), v69, vaddq_f16(vaddq_f16(vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v138, (int16x8_t)v138), (float16x8_t)vtrn2q_s16((int16x8_t)v239, (int16x8_t)v239)), (float16x8_t)vtrn1q_s16(v228, v228)), (float16x8_t)vtrn2q_s16((int16x8_t)_Q16, (int16x8_t)_Q16))), v397), v396)), v99);
          *v106++ = v73;
          v103 += 8;
        }
        while ((int)v103 < v395);
        uint64_t v242 = &v412[v103];
        unint64_t v243 = v357;
        unint64_t v27 = v363;
        unint64_t v24 = v364;
        uint64_t v74 = v367;
        unint64_t v23 = v368;
        uint64_t v36 = v361;
        uint64_t v35 = v362;
        uint64_t v37 = v359;
        uint64_t v38 = v360;
        unsigned __int8 v81 = v358;
        uint64_t v101 = v365;
        float v102 = v366;
        float v39 = v355;
        float v40 = v356;
        _S28 = v413;
      }
      for (; v24 > v243; float16x8_t v72 = v399)
      {
        v73.i8[0] = v242[1];
        float v244 = (float)v73.u32[0] - v40;
        unsigned int v245 = v14.u32[1];
        float v246 = v14.f32[1] * v244;
        LOBYTE(v245) = v80->i8[0];
        float v247 = _S28 * (float)((float)v245 - v39);
        float v248 = (float)(v14.f32[1] * v244) + v247;
        float v249 = 8191.0;
        if (v248 <= 8191.0)
        {
          float v249 = (float)(v14.f32[1] * v244) + v247;
          if (v248 < 0.0) {
            float v249 = 0.0;
          }
        }
        LOBYTE(v248) = *v242;
        float v250 = (float)LODWORD(v248) - v40;
        float v251 = (float)(*((float *)&v96 + 1) * v244) + (float)(v250 * *(float *)&v96);
        float v252 = 8191.0;
        if ((float)(v247 + v251) <= 8191.0)
        {
          float v252 = v247 + v251;
          if ((float)(v247 + v251) < 0.0) {
            float v252 = 0.0;
          }
        }
        float v253 = v14.f32[0] * v250;
        float v254 = (float)(v14.f32[0] * v250) + v247;
        float v255 = 8191.0;
        if (v254 <= 8191.0)
        {
          float v255 = v254;
          if (v254 < 0.0) {
            float v255 = 0.0;
          }
        }
        LOBYTE(v254) = v80->i8[1];
        float v256 = _S28 * (float)((float)LODWORD(v254) - v39);
        float v257 = 8191.0;
        if ((float)(v246 + v256) <= 8191.0)
        {
          float v257 = v246 + v256;
          if ((float)(v246 + v256) < 0.0) {
            float v257 = 0.0;
          }
        }
        float v258 = 8191.0;
        if ((float)(v251 + v256) <= 8191.0)
        {
          float v258 = v251 + v256;
          if ((float)(v251 + v256) < 0.0) {
            float v258 = 0.0;
          }
        }
        float v259 = v253 + v256;
        float v260 = 8191.0;
        if (v259 <= 8191.0)
        {
          float v260 = v259;
          if (v259 < 0.0) {
            float v260 = 0.0;
          }
        }
        LOBYTE(v259) = v104->i8[0];
        float v261 = _S28 * (float)((float)LODWORD(v259) - v39);
        float v262 = 8191.0;
        if ((float)(v246 + v261) <= 8191.0)
        {
          float v262 = v246 + v261;
          if ((float)(v246 + v261) < 0.0) {
            float v262 = 0.0;
          }
        }
        float v263 = 8191.0;
        if ((float)(v251 + v261) <= 8191.0)
        {
          float v263 = v251 + v261;
          if ((float)(v251 + v261) < 0.0) {
            float v263 = 0.0;
          }
        }
        float v264 = v253 + v261;
        BOOL v265 = (float)(v253 + v261) <= 8191.0;
        float v266 = 8191.0;
        if (v265)
        {
          float v266 = v264;
          if (v264 < 0.0) {
            float v266 = 0.0;
          }
        }
        _Q16.i8[0] = v104->i8[1];
        *(float *)_Q16.i32 = _S28 * (float)((float)_Q16.u32[0] - v39);
        float v267 = v246 + *(float *)_Q16.i32;
        BOOL v265 = (float)(v246 + *(float *)_Q16.i32) <= 8191.0;
        float v268 = 8191.0;
        if (v265)
        {
          float v268 = v267;
          if (v267 < 0.0) {
            float v268 = 0.0;
          }
        }
        float v269 = v251 + *(float *)_Q16.i32;
        BOOL v265 = (float)(v251 + *(float *)_Q16.i32) <= 8191.0;
        float v270 = 8191.0;
        if (v265)
        {
          float v270 = v269;
          if (v269 < 0.0) {
            float v270 = 0.0;
          }
        }
        float v271 = v40;
        float v272 = v253 + *(float *)_Q16.i32;
        BOOL v265 = (float)(v253 + *(float *)_Q16.i32) <= 8191.0;
        float v273 = 8191.0;
        if (v265)
        {
          float v273 = v272;
          if (v272 < 0.0) {
            float v273 = 0.0;
          }
        }
        _H2 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v249, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v252, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H5 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v255, 0.0), 8191.0))];
        _H16 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v257, 0.0), 8191.0))];
        __asm
        {
          FCVT            S5, H5
          FCVT            S16, H16
        }
        _H8 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v258, 0.0), 8191.0))];
        unsigned int v283 = llroundf(fminf(fmaxf(v260, 0.0), 8191.0));
        __asm { FCVT            S30, H8 }
        _H8 = *(_WORD *)&v55[2 * v283];
        __asm { FCVT            S8, H8 }
        _H1 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v262, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H19 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v263, 0.0), 8191.0))];
        __asm { FCVT            S19, H19 }
        _H7 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v266, 0.0), 8191.0))];
        _H11 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v268, 0.0), 8191.0))];
        __asm
        {
          FCVT            S7, H7
          FCVT            S11, H11
        }
        _H12 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v270, 0.0), 8191.0))];
        __asm { FCVT            S12, H12 }
        _H13 = *(_WORD *)&v55[2 * llroundf(fminf(fmaxf(v273, 0.0), 8191.0))];
        __asm { FCVT            S13, H13 }
        float v299 = (float)((float)(v406 * _S3) + (float)(_S2 * v407)) + (float)(_S5 * v394);
        float v300 = (float)((float)(v390 * _S3) + (float)(_S2 * v392)) + (float)(_S5 * v388);
        _S3 = (float)((float)(v385 * _S3) + (float)(_S2 * v386)) + (float)(_S5 * v383);
        _S5 = (float)((float)(v406 * _S30) + (float)(_S16 * v407)) + (float)(_S8 * v394);
        float v303 = (float)((float)(v390 * _S30) + (float)(_S16 * v392)) + (float)(_S8 * v388);
        _S16 = (float)((float)(v385 * _S30) + (float)(_S16 * v386)) + (float)(_S8 * v383);
        float v305 = (float)((float)(v406 * _S19) + (float)(_S1 * v407)) + (float)(_S7 * v394);
        _S18 = (float)((float)(v390 * _S19) + (float)(_S1 * v392)) + (float)(_S7 * v388);
        _S19 = (float)((float)(v385 * _S19) + (float)(_S1 * v386)) + (float)(_S7 * v383);
        float v308 = (float)((float)(v406 * _S12) + (float)(_S11 * v407)) + (float)(_S13 * v394);
        float v309 = (float)((float)(v390 * _S12) + (float)(_S11 * v392)) + (float)(_S13 * v388);
        float v310 = (float)((float)(v385 * _S12) + (float)(_S11 * v386)) + (float)(_S13 * v383);
        LOWORD(_S1) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v299, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        LOWORD(_S2) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v300, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        LOWORD(_S3) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
        LOWORD(_S5) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
        __asm
        {
          FCVT            S3, H3
          FCVT            S5, H5
        }
        LOWORD(_S7) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v303, 0.0), 8191.0))];
        __asm { FCVT            S30, H7 }
        LOWORD(_S7) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        LOWORD(_S16) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v305, 0.0), 8191.0))];
        __asm { FCVT            S8, H16 }
        LOWORD(_S16) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0))];
        __asm { FCVT            S11, H16 }
        LOWORD(_S16) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0))];
        LOWORD(_S18) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v308, 0.0), 8191.0))];
        __asm
        {
          FCVT            S12, H16
          FCVT            S16, H18
        }
        LOWORD(_S18) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v309, 0.0), 8191.0))];
        __asm { FCVT            S18, H18 }
        LOWORD(_S19) = *(_WORD *)&v76[2 * llroundf(fminf(fmaxf(v310, 0.0), 8191.0))];
        __asm { FCVT            S19, H19 }
        float v322 = (float)((float)((float)(v410 * _S2) + (float)(v408 * _S1)) + (float)(v411 * _S3)) + v46;
        if (v322 < v46) {
          float v323 = v46;
        }
        else {
          float v323 = (float)((float)((float)(v410 * _S2) + (float)(v408 * _S1)) + (float)(v411 * _S3)) + v46;
        }
        BOOL v265 = v322 <= v391;
        float v324 = (float)((float)((float)(v410 * _S30) + (float)(v408 * _S5)) + (float)(v411 * _S7)) + v46;
        if (!v265) {
          float v323 = v391;
        }
        unsigned int v325 = llroundf(v323);
        if (v324 < v46) {
          float v326 = v46;
        }
        else {
          float v326 = (float)((float)((float)(v410 * _S30) + (float)(v408 * _S5)) + (float)(v411 * _S7)) + v46;
        }
        BOOL v265 = v324 <= v391;
        float v327 = (float)((float)((float)(v410 * _S11) + (float)(v408 * _S8)) + (float)(v411 * _S12)) + v46;
        if (!v265) {
          float v326 = v391;
        }
        unsigned int v328 = llroundf(v326);
        if (v327 < v46) {
          float v329 = v46;
        }
        else {
          float v329 = (float)((float)((float)(v410 * _S11) + (float)(v408 * _S8)) + (float)(v411 * _S12)) + v46;
        }
        BOOL v265 = v327 <= v391;
        float v330 = (float)((float)((float)(v410 * _S18) + (float)(v408 * *(float *)_Q16.i32)) + (float)(v411 * _S19)) + v46;
        if (!v265) {
          float v329 = v391;
        }
        unsigned int v331 = llroundf(v329);
        if (v330 < v46) {
          float v332 = v46;
        }
        else {
          float v332 = (float)((float)((float)(v410 * _S18) + (float)(v408 * *(float *)_Q16.i32)) + (float)(v411 * _S19))
        }
               + v46;
        if (v330 <= v391) {
          float v333 = v332;
        }
        else {
          float v333 = v391;
        }
        float v334 = (float)((float)(_S1 + _S5) + _S8) + *(float *)_Q16.i32;
        float v335 = (float)((float)(_S2 + _S30) + _S11) + _S18;
        result->i16[0] = v325 << v81;
        result->i16[1] = v328 << v81;
        v105->i16[0] = v331 << v81;
        v105->i16[1] = llroundf(v333) << v81;
        float v336 = (float)((float)(_S3 + _S7) + _S12) + _S19;
        float v337 = (float)((float)(v370 + (float)(v334 * v405)) + (float)(v335 * *(float *)&v97))
             + (float)(v336 * *(float *)&v98);
        float v338 = v404;
        if (v337 <= v404)
        {
          float v338 = (float)((float)(v370 + (float)(v334 * v405)) + (float)(v335 * *(float *)&v97))
               + (float)(v336 * *(float *)&v98);
          if (v337 < v414) {
            float v338 = v414;
          }
        }
        *(float *)v73.i32 = (float)((float)(v370 + (float)(v334 * v371)) + (float)(v335 * *((float *)&v97 + 1)))
                          + (float)(v336 * *((float *)&v98 + 1));
        v106->i16[0] = llroundf(v338) << v81;
        float v339 = v404;
        float v40 = v271;
        float16x8_t v78 = v384;
        short float v90 = v409;
        uint16x8_t v99 = (uint16x8_t)v372;
        *(void *)&v100[2] = 0;
        if (*(float *)v73.i32 <= v404)
        {
          float v339 = *(float *)v73.i32;
          if (*(float *)v73.i32 < v414) {
            float v339 = v414;
          }
        }
        v243 += 2;
        v242 += 2;
        float v80 = (int8x8_t *)((char *)v80 + 2);
        char v104 = (int8x8_t *)((char *)v104 + 2);
        v106->i16[1] = llroundf(v339) << v81;
        uint64_t result = (uint16x8_t *)((char *)result + 4);
        float16x8_t v105 = (uint16x8_t *)((char *)v105 + 4);
        float16x8_t v106 = (int16x8_t *)((char *)v106 + 4);
        _S28 = v413;
        float16x8_t v58 = v393;
        float16x8_t v62 = v400;
        float16x8_t v60 = v401;
        float16x8_t v61 = v387;
        float16x8_t v68 = v403;
        float16x8_t v69 = v402;
        float16x8_t v71 = v389;
      }
      float v80 = (int8x8_t *)&v101[v35];
      v79 += v36;
      uint64_t result = (uint16x8_t *)&v102[v38];
      v74 += v37;
      v23 += 2;
    }
    while (v27 > v23);
    if (v353 && v352)
    {
      uint64_t v340 = 0;
      int32x4_t v341 = __b;
      float v342 = v349;
      do
      {
        if (v24)
        {
          unint64_t v343 = v24;
          float v344 = v341;
          float v345 = v342;
          do
          {
            __int16 v346 = *v345++;
            v344->i16[0] = v346 | (v346 << 8);
            float v344 = (uint16x8_t *)((char *)v344 + 2);
            --v343;
          }
          while (v343);
        }
        v342 += v350;
        int32x4_t v341 = (uint16x8_t *)((char *)v341 + v354);
        ++v340;
      }
      while (v340 != v27);
    }
    else
    {
      uint64_t v347 = v354;
      uint64_t result = __b;
      if (v352)
      {
        do
        {
          if (v24)
          {
            float v348 = result;
            memset(result, 255, 2 * v24);
            uint64_t result = v348;
            uint64_t v347 = v354;
          }
          uint64_t result = (uint16x8_t *)((char *)result + v347);
          --v27;
        }
        while (v27);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_xf420_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Mat_TRC_xf420_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    uint64_t v13 = *(void *)((char *)result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = result[14];
    unint64_t v16 = result[13] * a2 / v7;
    uint64_t v17 = (void *)result[16];
    uint64_t v18 = result[15] + 2 * v16;
    uint64_t v19 = result[19];
    uint64_t v20 = (void *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    unint64_t v27 = (unsigned __int8 *)(v26 + v25 * v13 + v12);
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    uint64_t v32 = (char *)(v31 + v30 * v18 + 2 * v15);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    LOWORD(a6) = *(_WORD *)(v19 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v19;
    float v194 = v33 * *(float *)(v19 + 16);
    float v195 = v33 * *(float *)(v19 + 8);
    float v37 = v33 * *(float *)(v19 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v19 + 28);
    float v192 = *(float *)&v38;
    float v193 = v37;
    LOWORD(v38) = *(_WORD *)(v19 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 150);
    *(float *)&unsigned int v42 = (float)v38;
    float v196 = *(float *)&v42;
    LOWORD(v42) = *(_WORD *)(v19 + 152);
    float v43 = (float)v42;
    float v188 = *(float *)(v19 + 40);
    float v189 = *(float *)(v19 + 36);
    float v186 = *(float *)(v19 + 48) * 0.25;
    float v187 = *(float *)(v19 + 44);
    float v184 = *(float *)(v19 + 56) * 0.25;
    float v185 = *(float *)(v19 + 52) * 0.25;
    float v182 = *(float *)(v19 + 64) * 0.25;
    float v183 = *(float *)(v19 + 60) * 0.25;
    float v180 = *(float *)(v19 + 68) * 0.25;
    float v181 = *(float *)(v19 + 72);
    float v178 = *(float *)(v19 + 80);
    float v179 = *(float *)(v19 + 76);
    float v176 = *(float *)(v19 + 88);
    float v177 = *(float *)(v19 + 84);
    float v174 = *(float *)(v19 + 96);
    float v175 = *(float *)(v19 + 92);
    float v44 = *(float *)(v19 + 104);
    float v172 = v44;
    float v173 = *(float *)(v19 + 100);
    uint64_t v45 = v19 + 164;
    uint64_t result = (void *)(v19 + 16548);
    uint64_t v46 = v17[1];
    unsigned int v47 = (char *)(*v17 + v28 * v18 + 2 * v15);
    unsigned int v48 = *(unsigned __int8 *)(v19 + 132);
    uint64_t v49 = v20[1];
    uint64_t v50 = (unsigned char *)(*v20 + v23 * v13 + v12);
    if (v48 >= 0x11) {
      char v51 = 0;
    }
    else {
      char v51 = 16 - v48;
    }
    uint64_t v52 = v46 + v29 * (v18 / 2) + 2 * v15;
    uint64_t v53 = v49 + v24 * (v13 / 2) + v12;
    char v54 = v51;
    float v190 = v43;
    float v191 = v40;
    do
    {
      char v55 = &v50[v23];
      float v56 = &v47[v28];
      if (v11)
      {
        unint64_t v57 = 0;
        float16x8_t v58 = &v50[v23];
        short float v59 = &v47[v28];
        do
        {
          LOBYTE(v44) = *(unsigned char *)(v53 + v57 + 1);
          float v60 = (float)LODWORD(v44) - v35;
          unsigned int v61 = LODWORD(v195);
          float v62 = v195 * v60;
          LOBYTE(v61) = *v50;
          float v63 = (float)v61 - v34;
          float v64 = v36 * v63;
          float v65 = (float)(v195 * v60) + (float)(v36 * v63);
          float v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            float v66 = (float)(v195 * v60) + (float)(v36 * v63);
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          LOBYTE(v63) = *(unsigned char *)(v53 + v57);
          float v67 = (float)LODWORD(v63) - v35;
          float v68 = (float)(v193 * v60) + (float)(v67 * v194);
          float v69 = 8191.0;
          if ((float)(v64 + v68) <= 8191.0)
          {
            float v69 = v64 + v68;
            if ((float)(v64 + v68) < 0.0) {
              float v69 = 0.0;
            }
          }
          unsigned int v70 = LODWORD(v192);
          float v71 = v192 * v67;
          float v72 = (float)(v192 * v67) + v64;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          LOBYTE(v70) = v50[1];
          float v74 = (float)v70 - v34;
          float v75 = v36 * v74;
          float v76 = v62 + (float)(v36 * v74);
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v62 + (float)(v36 * v74);
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v68 + v75;
          float v79 = 8191.0;
          if ((float)(v68 + v75) <= 8191.0)
          {
            float v79 = v68 + v75;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v71 + v75;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          LOBYTE(v74) = *v58;
          float v82 = v36 * (float)((float)LODWORD(v74) - v34);
          float v83 = 8191.0;
          if ((float)(v62 + v82) <= 8191.0)
          {
            float v83 = v62 + v82;
            if ((float)(v62 + v82) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = 8191.0;
          if ((float)(v68 + v82) <= 8191.0)
          {
            float v84 = v68 + v82;
            if ((float)(v68 + v82) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v71 + v82;
          BOOL v86 = (float)(v71 + v82) <= 8191.0;
          float v87 = 8191.0;
          if (v86)
          {
            float v87 = v85;
            if (v85 < 0.0) {
              float v87 = 0.0;
            }
          }
          LOBYTE(v78) = v58[1];
          float v88 = v36 * (float)((float)LODWORD(v78) - v34);
          float v89 = v62 + v88;
          BOOL v86 = (float)(v62 + v88) <= 8191.0;
          float v90 = 8191.0;
          if (v86)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v68 + v88;
          BOOL v86 = (float)(v68 + v88) <= 8191.0;
          float v92 = 8191.0;
          if (v86)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v71 + v88;
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          _H4 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm
          {
            FCVT            S6, H6
            FCVT            S17, H17
          }
          _H19 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H24 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H27 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H1 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S7, H7
          }
          _H25 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v45 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          float v123 = (float)((float)(v179 * _S5) + (float)(_S4 * v181)) + (float)(_S6 * v178);
          float v124 = (float)((float)(v176 * _S5) + (float)(_S4 * v177)) + (float)(_S6 * v175);
          float v125 = (float)((float)(v173 * _S5) + (float)(_S4 * v174)) + (float)(_S6 * v172);
          _S3 = (float)((float)(v179 * _S19) + (float)(_S17 * v181)) + (float)(_S24 * v178);
          float v127 = (float)((float)(v176 * _S19) + (float)(_S17 * v177)) + (float)(_S24 * v175);
          _S17 = (float)((float)(v173 * _S19) + (float)(_S17 * v174)) + (float)(_S24 * v172);
          float v129 = (float)((float)(v179 * _S1) + (float)(_S27 * v181)) + (float)(_S2 * v178);
          float v130 = (float)((float)(v176 * _S1) + (float)(_S27 * v177)) + (float)(_S2 * v175);
          _S1 = (float)((float)(v173 * _S1) + (float)(_S27 * v174)) + (float)(_S2 * v172);
          float v132 = (float)((float)(v179 * _S25) + (float)(_S7 * v181)) + (float)(_S26 * v178);
          float v133 = (float)((float)(v176 * _S25) + (float)(_S7 * v177)) + (float)(_S26 * v175);
          float v134 = (float)((float)(v173 * _S25) + (float)(_S7 * v174)) + (float)(_S26 * v172);
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm { FCVT            S4, H2 }
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          __asm { FCVT            S5, H2 }
          LOWORD(_S2) = *((_WORD *)result + llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S6, H3
          }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S19, H3 }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(_S17, 0.0), 8191.0)));
          __asm { FCVT            S7, H3 }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S24, H3 }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S25, H3 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H1
            FCVT            S1, H3
          }
          LOWORD(_S3) = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          LOWORD(_S17) = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          __asm { FCVT            S17, H17 }
          float v147 = (float)((float)((float)(v188 * _S5) + (float)(v189 * _S4)) + (float)(v187 * _S2)) + v39;
          if (v147 < v39) {
            float v148 = v39;
          }
          else {
            float v148 = (float)((float)((float)(v188 * _S5) + (float)(v189 * _S4)) + (float)(v187 * _S2)) + v39;
          }
          BOOL v86 = v147 <= v41;
          float v149 = (float)((float)((float)(v188 * _S19) + (float)(v189 * _S6)) + (float)(v187 * _S7)) + v39;
          if (!v86) {
            float v148 = v41;
          }
          unsigned int v150 = llroundf(v148);
          if (v149 < v39) {
            float v151 = v39;
          }
          else {
            float v151 = (float)((float)((float)(v188 * _S19) + (float)(v189 * _S6)) + (float)(v187 * _S7)) + v39;
          }
          BOOL v86 = v149 <= v41;
          float v152 = (float)((float)((float)(v188 * _S25) + (float)(v189 * _S24)) + (float)(v187 * _S26)) + v39;
          if (!v86) {
            float v151 = v41;
          }
          unsigned int v153 = llroundf(v151);
          if (v152 < v39) {
            float v154 = v39;
          }
          else {
            float v154 = (float)((float)((float)(v188 * _S25) + (float)(v189 * _S24)) + (float)(v187 * _S26)) + v39;
          }
          BOOL v86 = v152 <= v41;
          float v155 = (float)((float)((float)(v188 * _S3) + (float)(v189 * _S1)) + (float)(v187 * _S17)) + v39;
          if (!v86) {
            float v154 = v41;
          }
          unsigned int v156 = llroundf(v154);
          if (v155 < v39) {
            float v157 = v39;
          }
          else {
            float v157 = (float)((float)((float)(v188 * _S3) + (float)(v189 * _S1)) + (float)(v187 * _S17)) + v39;
          }
          if (v155 <= v41) {
            float v158 = v157;
          }
          else {
            float v158 = v41;
          }
          float v159 = (float)((float)(_S4 + _S6) + _S24) + _S1;
          float v160 = (float)((float)(_S5 + _S19) + _S25) + _S3;
          *(_WORD *)unsigned int v47 = v150 << v54;
          *((_WORD *)v47 + 1) = v153 << v54;
          *(_WORD *)short float v59 = v156 << v54;
          *((_WORD *)v59 + 1) = llroundf(v158) << v54;
          float v161 = (float)((float)(_S2 + _S7) + _S26) + _S17;
          float v162 = (float)((float)(v191 + (float)(v159 * v186)) + (float)(v160 * v185)) + (float)(v161 * v184);
          float v163 = v190;
          if (v162 <= v190)
          {
            float v163 = (float)((float)(v191 + (float)(v159 * v186)) + (float)(v160 * v185)) + (float)(v161 * v184);
            if (v162 < v196) {
              float v163 = v196;
            }
          }
          uint16x8_t v164 = (_WORD *)(v52 + 2 * v57);
          float v44 = (float)(v191 + (float)(v159 * v183)) + (float)(v160 * v182);
          float v165 = v44 + (float)(v161 * v180);
          *uint16x8_t v164 = llroundf(v163) << v54;
          float v166 = v190;
          if (v165 <= v190)
          {
            float v44 = v196;
            float v166 = v165;
            if (v165 < v196) {
              float v166 = v196;
            }
          }
          v50 += 2;
          v58 += 2;
          v47 += 4;
          v59 += 4;
          v164[1] = llroundf(v166) << v54;
          v57 += 2;
        }
        while (v11 > v57);
      }
      uint64_t v50 = &v55[v23];
      v53 += v24;
      unsigned int v47 = &v56[v28];
      v52 += v29;
      v10 += 2;
    }
    while (v14 > v10);
    if (v26 && v31)
    {
      uint64_t v167 = 0;
      do
      {
        if (v11)
        {
          unint64_t v168 = v11;
          float v169 = v32;
          float v170 = v27;
          do
          {
            __int16 v171 = *v170++;
            *v169++ = v171 | (v171 << 8);
            --v168;
          }
          while (v168);
        }
        v27 += v25;
        v32 += v30;
        ++v167;
      }
      while (v167 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v32, 255, 2 * v11);
        }
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_xf420_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_xf420_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_xf420_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, uint16x8_t _Q0)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = 2 * *result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    unint64_t v12 = *(void *)(result + 20);
    uint64_t v13 = *(void *)(result + 36);
    uint64_t v14 = *(void *)(result + 44) + 2 * v9;
    unint64_t v15 = 2 * v10 - 2 * v9;
    uint64_t v16 = *((void *)result + 14);
    uint64_t v17 = (uint64_t *)*((void *)result + 16);
    uint64_t v18 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v8);
    uint64_t v19 = (float32x2_t *)*((void *)result + 19);
    uint64_t v20 = (uint64_t *)*((void *)result + 7);
    uint64_t v21 = (uint64_t *)*((void *)result + 8);
    size_t v22 = (uint64_t *)*((void *)result + 17);
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = *v22;
    uint64_t v27 = v22[1];
    uint64_t v28 = v22[2];
    uint64_t v178 = v17[2];
    uint64_t v179 = v20[2];
    LODWORD(v22) = v19[17].u16[2];
    unsigned int v29 = v19[17].u16[3];
    v30.i32[0] = v19[3].i32[1];
    unsigned int v31 = v19[18].u16[0];
    unsigned int v32 = v19[18].u16[1];
    unsigned int v33 = v19[18].u16[2];
    unsigned int v34 = v19[18].u16[3];
    unsigned int v35 = v19[19].u16[0];
    _Q0.i32[0] = v19[4].i32[1];
    _S15 = v19[5].i32[1];
    v4.i32[0] = v19[6].i32[0];
    v38.i32[0] = v19[6].i32[1];
    v37.i32[0] = v19[7].i32[0];
    float v39 = (float)v22;
    *(short float *)v3.i16 = (short float)v22;
    uint64_t v40 = (unsigned __int8 *)(v179 + v25 * v14 + v13);
    float v41 = (char *)(v178 + v28 * v18 + 2 * v16);
    float v42 = (float)v19[17].u32[0] / (float)v19[16].u32[0];
    float v43 = (float)v31;
    float v44 = (float)v32;
    float v45 = (float)v33;
    float v198 = (float)v29;
    float v199 = (float)v34;
    _S17 = v42 * v19->f32[0];
    float v47 = (float)v35;
    __asm { FCVT            H8, S17 }
    float16x8_t v53 = (float16x8_t)vdupq_lane_s16(v3, 0);
    short float v54 = -(short float)v29;
    v30.i32[1] = v19[1].i32[0];
    *(float32x2_t *)v5.f32 = vmul_n_f32(v30, v42);
    v56.i64[1] = _Q0.i64[0];
    float16x8_t v55 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    *(float32x2_t *)v56.f32 = vmul_n_f32(v19[2], v42);
    float16x8_t v57 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v56), 0);
    float16x8_t v58 = vmulq_n_f16(v55, v54);
    float16x8_t v59 = vmulq_n_f16(v57, v54);
    v4.i32[1] = v19[7].i32[1];
    __asm { FMOV            V4.2S, #0.25 }
    *(float32x2_t *)v4.f32 = vmul_f32(*(float32x2_t *)v4.f32, _D4);
    float16x8_t v61 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    v38.i32[1] = v19[8].i32[0];
    *(float32x2_t *)v6.i8 = vmul_f32(v38, _D4);
    v63.i64[1] = _Q0.i64[0];
    float16x8_t v62 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v6), 0);
    v37.i32[1] = v19[8].i32[1];
    *(float32x2_t *)v63.f32 = vmul_f32(v37, _D4);
    int16x4_t v64 = (int16x4_t)vcvt_f16_f32(v63);
    __asm { FCVT            H14, S0 }
    int32x4_t v66 = vdupq_lane_s32((int32x2_t)v64, 0);
    *(short float *)v64.i16 = (short float)v31;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(v64, 0);
    *(short float *)v64.i16 = (short float)v32;
    int16x8_t v68 = vdupq_lane_s16(v64, 0);
    *(short float *)v64.i16 = (short float)v33;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(v64, 0);
    *(short float *)v64.i16 = (short float)v34;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(v64, 0);
    *(short float *)v64.i16 = (short float)v35;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(v64, 0);
    float32_t v183 = v19[5].f32[0];
    __asm { FCVT            H11, S27 }
    unsigned int v73 = v19[16].u8[4];
    if (v73 >= 0x11) {
      unsigned __int8 v74 = 0;
    }
    else {
      unsigned __int8 v74 = 16 - v73;
    }
    if (v18 >= 0) {
      uint64_t v75 = v18;
    }
    else {
      uint64_t v75 = v18 + 1;
    }
    uint64_t v76 = *v17;
    uint64_t v77 = v17[1] + v27 * (v75 >> 1) + 2 * v16;
    uint64_t result = (unsigned __int8 *)(v76 + v26 * v18 + 2 * v16);
    if (v14 >= 0) {
      uint64_t v78 = v14;
    }
    else {
      uint64_t v78 = v14 + 1;
    }
    uint64_t v79 = *v20;
    float v80 = (__int8 *)(v20[1] + v24 * (v78 >> 1) + v13);
    float v81 = (int8x8_t *)(v79 + v23 * v14 + v13);
    float v182 = *(float *)&_S15;
    __asm { FCVT            H15, S15 }
    int16x8_t v83 = vdupq_n_s16(v74);
    uint64_t v84 = v5.i64[0];
    uint64_t v85 = v56.i64[0];
    uint64_t v86 = v4.i64[0];
    uint64_t v87 = v6.i64[0];
    v88.i32[0] = v63.i32[1];
    float v197 = v63.f32[0];
    float16x8_t v89 = (float16x8_t)v66;
    float v195 = v63.f32[1];
    float16x8_t v193 = v57;
    float16x8_t v194 = v55;
    float16x8_t v191 = v59;
    float16x8_t v192 = v58;
    float16x8_t v189 = (float16x8_t)v66;
    short float v190 = _H14;
    float16x8_t v196 = (float16x8_t)v68;
    float16x8_t v187 = v70;
    float16x8_t v188 = v69;
    short float v185 = _H11;
    float16x8_t v186 = v71;
    short float v184 = _H15;
    float v180 = v39;
    unsigned __int32 v181 = _Q0.i32[0];
    do
    {
      float v90 = (char *)v81 + v23;
      float v91 = &result[v26];
      if ((int)v12 < 8)
      {
        unint64_t v133 = 0;
        float16x8_t v95 = (uint16x8_t *)v77;
        float v94 = (uint16x8_t *)&result[v26];
        float v132 = v80;
        float v93 = (int8x8_t *)((char *)v81 + v23);
        float v134 = v183;
        float v135 = *((float *)&v84 + 1);
        float v136 = v182;
      }
      else
      {
        uint64_t v92 = 0;
        float v93 = (int8x8_t *)((char *)v81 + v23);
        float v94 = (uint16x8_t *)&result[v26];
        float16x8_t v95 = (uint16x8_t *)v77;
        do
        {
          int8x8_t v96 = *(int8x8_t *)&v80[v92];
          *(int8x8_t *)v97.i8 = vzip1_s8(v96, 0);
          v97.u64[1] = (unint64_t)vzip2_s8(v96, 0);
          float16x8_t v98 = vcvtq_f16_u16(v97);
          int16x8_t v99 = (int16x8_t)vmlaq_f16(v58, v55, v98);
          int8x16_t v100 = (int8x16_t)vmlaq_f16(v59, v57, v98);
          v98.i64[0] = vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL).u64[0];
          *(int16x4_t *)v101.i8 = vuzp1_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v98.i8);
          *(int16x4_t *)v98.i8 = vuzp2_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v98.i8);
          v98.i64[1] = _Q0.i64[0];
          v101.i64[1] = _Q0.i64[0];
          v99.i64[0] = vextq_s8(v100, v100, 8uLL).u64[0];
          *(float16x4_t *)v99.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8));
          v99.i64[1] = _Q0.i64[0];
          int8x8_t v102 = *v81++;
          *(int8x8_t *)v103.i8 = vzip1_s8(v102, 0);
          v103.u64[1] = (unint64_t)vzip2_s8(v102, 0);
          int8x8_t v104 = *v93++;
          float16x8_t v105 = (float16x8_t)vzip1q_s16(v99, v99);
          *(int8x8_t *)v106.i8 = vzip1_s8(v104, 0);
          v106.u64[1] = (unint64_t)vzip2_s8(v104, 0);
          float16x8_t v107 = (float16x8_t)vzip1q_s16(v101, v101);
          float16x8_t v108 = vsubq_f16(vcvtq_f16_u16(v103), v53);
          float16x8_t v109 = vsubq_f16(vcvtq_f16_u16(v106), v53);
          float16x8_t v110 = (float16x8_t)vzip1q_s16((int16x8_t)v98, (int16x8_t)v98);
          float16x8_t v111 = vmlaq_n_f16(v110, v109, _H8);
          float16x8_t v112 = vmlaq_n_f16(v110, v108, _H8);
          float16x8_t v113 = vmlaq_n_f16(v105, v108, _H8);
          float16x8_t v114 = v55;
          float16x8_t v115 = vmlaq_n_f16(v107, v108, _H8);
          float16x8_t v116 = vmlaq_n_f16(v107, v109, _H8);
          float16x8_t v117 = vmlaq_n_f16(v105, v109, _H8);
          float16x8_t v118 = vmlaq_n_f16(vmlaq_n_f16(v67, v111, _H14), v117, _H11);
          float16x8_t v119 = vmlaq_n_f16(vmlaq_n_f16(v67, v112, _H14), v113, _H11);
          _Q0 = (uint16x8_t)v83;
          float16x8_t v120 = v57;
          float16x8_t v121 = (float16x8_t)vuzp1q_s16((int16x8_t)v112, (int16x8_t)v113);
          float16x8_t v122 = (float16x8_t)vuzp2q_s16((int16x8_t)v112, (int16x8_t)v113);
          float16x8_t v123 = (float16x8_t)vuzp1q_s16((int16x8_t)v111, (int16x8_t)v117);
          float16x8_t v124 = (float16x8_t)vuzp2q_s16((int16x8_t)v111, (int16x8_t)v117);
          float16x8_t v125 = vminq_f16(vmaxq_f16(vmlaq_n_f16(v119, v115, _H15), v67), v69);
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v118, v116, _H15), v67), v69));
          float16x8_t v127 = vaddq_f16(v121, v122);
          float16x8_t v57 = v120;
          int16x8_t v83 = (int16x8_t)_Q0;
          int16x8_t v128 = (int16x8_t)vaddq_f16(v124, vaddq_f16(v123, v127));
          float16x8_t v129 = (float16x8_t)vtrn2q_s16((int16x8_t)v115, (int16x8_t)v115);
          float16x8_t v130 = (float16x8_t)vtrn1q_s16((int16x8_t)v115, (int16x8_t)v115);
          float16x8_t v55 = v114;
          float16x8_t v131 = vaddq_f16(v130, v129);
          float16x8_t v6 = (float16x8_t)vtrn1q_s16((int16x8_t)v116, (int16x8_t)v116);
          float32x4_t v63 = (float32x4_t)vshlq_u16(vcvtq_u16_f16(v125), _Q0);
          *(float32x4_t *)uint64_t result = v63;
          result += 16;
          *v94++ = vshlq_u16(v126, _Q0);
          uint16x8_t v88 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v196, v61, (float16x8_t)vzip1q_s16(v128, v128)), v62, (float16x8_t)vzip2q_s16(v128, v128)), v89, vaddq_f16((float16x8_t)vtrn2q_s16((int16x8_t)v116, (int16x8_t)v116), vaddq_f16(v6, v131))), v70), v71)), _Q0);
          *v95++ = v88;
          v92 += 8;
        }
        while ((int)v92 < (int)v12 - 7);
        float v132 = &v80[v92];
        unint64_t v133 = v12 & 0xFFFFFFF8;
        float v134 = v183;
        float v135 = *((float *)&v84 + 1);
        _Q0.i32[0] = v181;
        float v136 = v182;
        float v39 = v180;
      }
      while (v12 > v133)
      {
        float16x8_t v137 = v62;
        float16x8_t v138 = v61;
        float16x8_t v139 = v53;
        float v140 = v44;
        v88.i8[0] = *v132;
        *(float *)&unsigned int v141 = (float)v88.u32[0] - v198;
        v63.i8[0] = v132[1];
        float v142 = (float)v63.u32[0] - v198;
        float v143 = v135 * v142;
        unsigned int v144 = v85;
        float v145 = (float)(*((float *)&v85 + 1) * v142) + (float)(*(float *)&v141 * *(float *)&v85);
        float v146 = *(float *)&v84 * *(float *)&v141;
        LOBYTE(v141) = v81->i8[0];
        float v147 = _S17 * (float)((float)v141 - v39);
        float v148 = (float)(v135 * v142) + v147;
        float v149 = v147 + v145;
        float v150 = v146 + v147;
        *(float *)v88.i32 = (float)((float)((float)(v134 * (float)(v147 + v145)) + (float)(*(float *)_Q0.i32 * v148))
                                  + (float)(v136 * (float)(v146 + v147)))
                          + v43;
        float v151 = v45;
        if (*(float *)v88.i32 <= v45)
        {
          float v151 = *(float *)v88.i32;
          if (*(float *)v88.i32 < v43) {
            float v151 = v43;
          }
        }
        v88.i8[0] = v81->i8[1];
        float v152 = _S17 * (float)((float)v88.u32[0] - v39);
        v6.i8[0] = v93->i8[0];
        LOBYTE(v144) = v93->i8[1];
        float v153 = v143 + v152;
        float v154 = v145 + v152;
        float v155 = v146 + v152;
        float v156 = (float)((float)((float)(v134 * (float)(v145 + v152)) + (float)(*(float *)_Q0.i32 * (float)(v143 + v152)))
                     + (float)(v136 * (float)(v146 + v152)))
             + v43;
        *(_WORD *)uint64_t result = llroundf(v151) << v74;
        *(float *)v88.i32 = v45;
        if (v156 <= v45)
        {
          *(float *)v88.i32 = v156;
          if (v156 < v43) {
            *(float *)v88.i32 = v43;
          }
        }
        float v157 = _S17 * (float)((float)v6.u32[0] - v39);
        float v158 = v143 + v157;
        float v159 = v145 + v157;
        *(float *)v6.i32 = v146 + v157;
        float v160 = (float)((float)((float)(v134 * (float)(v145 + v157)) + (float)(*(float *)_Q0.i32 * (float)(v143 + v157)))
                     + (float)(v136 * (float)(v146 + v157)))
             + v43;
        *((_WORD *)result + 1) = llroundf(*(float *)v88.i32) << v74;
        float v161 = v45;
        if (v160 <= v45)
        {
          float v161 = v160;
          if (v160 < v43) {
            float v161 = v43;
          }
        }
        float v162 = _S17 * (float)((float)v144 - v39);
        float v163 = v143 + v162;
        float v164 = v145 + v162;
        float v165 = v146 + v162;
        float v166 = (float)((float)((float)(v134 * v164) + (float)(*(float *)_Q0.i32 * v163))
                     + (float)(v136 * (float)(v146 + v162)))
             + v43;
        v94->i16[0] = llroundf(v161) << v74;
        float v167 = v45;
        if (v166 <= v45)
        {
          float v167 = v166;
          if (v166 < v43) {
            float v167 = v43;
          }
        }
        v94->i16[1] = llroundf(v167) << v74;
        float v168 = (float)((float)(v148 + v153) + v158) + v163;
        float v44 = v140;
        float v169 = (float)((float)(v149 + v154) + v159) + v164;
        float v170 = (float)((float)(v150 + v155) + *(float *)v6.i32) + v165;
        float v171 = (float)((float)(v140 + (float)(v168 * *(float *)&v86)) + (float)(v169 * *(float *)&v87))
             + (float)(v170 * v197);
        float v172 = v47;
        float16x8_t v61 = v138;
        if (v171 <= v47)
        {
          float v172 = (float)((float)(v140 + (float)(v168 * *(float *)&v86)) + (float)(v169 * *(float *)&v87))
               + (float)(v170 * v197);
          if (v171 < v199) {
            float v172 = v199;
          }
        }
        *(float *)v88.i32 = (float)((float)(v140 + (float)(v168 * *((float *)&v86 + 1)))
                                  + (float)(v169 * *((float *)&v87 + 1)))
                          + (float)(v170 * v195);
        v95->i16[0] = llroundf(v172) << v74;
        v63.f32[0] = v47;
        float16x8_t v53 = v139;
        float16x8_t v62 = v137;
        if (*(float *)v88.i32 <= v47)
        {
          v63.i32[0] = v88.i32[0];
          if (*(float *)v88.i32 < v199) {
            v63.f32[0] = v199;
          }
        }
        v133 += 2;
        v132 += 2;
        float v81 = (int8x8_t *)((char *)v81 + 2);
        float v93 = (int8x8_t *)((char *)v93 + 2);
        v95->i16[1] = llroundf(v63.f32[0]) << v74;
        result += 4;
        float v94 = (uint16x8_t *)((char *)v94 + 4);
        float16x8_t v95 = (uint16x8_t *)((char *)v95 + 4);
      }
      float v81 = (int8x8_t *)&v90[v23];
      v80 += v24;
      uint64_t result = &v91[v26];
      v77 += v27;
      v11 += 2;
      float16x8_t v57 = v193;
      float16x8_t v55 = v194;
      float16x8_t v59 = v191;
      float16x8_t v58 = v192;
      float16x8_t v89 = v189;
      _H14 = v190;
      float16x8_t v70 = v187;
      float16x8_t v69 = v188;
      _H11 = v185;
      float16x8_t v71 = v186;
      _H15 = v184;
    }
    while (v15 > v11);
    if (v179 && v178)
    {
      uint64_t v173 = 0;
      do
      {
        if (v12)
        {
          unint64_t v174 = v12;
          float v175 = v41;
          float v176 = v40;
          do
          {
            __int16 v177 = *v176++;
            *v175++ = v177 | (v177 << 8);
            --v174;
          }
          while (v174);
        }
        v40 += v25;
        v41 += v28;
        ++v173;
      }
      while (v173 != v15);
    }
    else if (v178)
    {
      do
      {
        if (v12) {
          uint64_t result = (unsigned __int8 *)memset(v41, 255, 2 * v12);
        }
        v41 += v28;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_xf420(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v18)
  {
    ++v18;
    ++v12;
    if (v15)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_xf420_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_xf420_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 28);
  unint64_t v3 = 2 * *result;
  unint64_t v4 = v2 * a2 / v3;
  unint64_t v5 = (v2 + v2 * a2) / v3;
  if (2 * v5 != 2 * v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = *(void *)(result + 20);
    uint64_t v8 = *(void *)(result + 36);
    uint64_t v9 = *(void *)(result + 44) + 2 * v4;
    unint64_t v10 = 2 * v5 - 2 * v4;
    uint64_t v11 = *((void *)result + 14);
    uint64_t v12 = (void *)*((void *)result + 16);
    uint64_t v13 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v3);
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = (uint64_t *)*((void *)result + 17);
    uint64_t v18 = *v16;
    uint64_t v19 = v16[1];
    uint64_t v20 = v16[2];
    uint64_t v21 = v15[2];
    size_t v22 = (unsigned __int8 *)(v21 + v20 * v9 + v8);
    uint64_t v23 = *v17;
    uint64_t v24 = v17[1];
    uint64_t v25 = v17[2];
    uint64_t v26 = v12[2];
    uint64_t v27 = (char *)(v26 + v25 * v13 + 2 * v11);
    *(float *)&unsigned int v28 = (float)*(unsigned int *)(v14 + 128);
    *(float *)&unsigned int v29 = (float)*(unsigned int *)(v14 + 136);
    float v30 = *(float *)&v29 / *(float *)&v28;
    LOWORD(v28) = *(_WORD *)(v14 + 140);
    float v31 = (float)v28;
    LOWORD(v29) = *(_WORD *)(v14 + 142);
    float v32 = (float)v29;
    float v33 = v30 * *(float *)v14;
    float v111 = v30 * *(float *)(v14 + 16);
    float v112 = v30 * *(float *)(v14 + 8);
    float v34 = v30 * *(float *)(v14 + 20);
    *(float *)&unsigned int v35 = v30 * *(float *)(v14 + 28);
    float v109 = *(float *)&v35;
    float v110 = v34;
    LOWORD(v35) = *(_WORD *)(v14 + 144);
    float v36 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 146);
    float v37 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 148);
    float v38 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 150);
    float v39 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v14 + 152);
    float v40 = (float)v35;
    float v41 = *(float *)(v14 + 36);
    float v42 = *(float *)(v14 + 40);
    float v43 = *(float *)(v14 + 44);
    float v44 = 0.25;
    float v108 = *(float *)(v14 + 48) * 0.25;
    float v45 = *(float *)(v14 + 52) * 0.25;
    float v46 = *(float *)(v14 + 56) * 0.25;
    float v47 = *(float *)(v14 + 60) * 0.25;
    float v48 = *(float *)(v14 + 64) * 0.25;
    float v49 = *(float *)(v14 + 68);
    float v50 = v49 * 0.25;
    uint64_t v51 = v12[1];
    uint64_t v52 = (char *)(*v12 + v23 * v13 + 2 * v11);
    unsigned int v53 = *(unsigned __int8 *)(v14 + 132);
    char v54 = 16 - v53;
    BOOL v55 = v53 >= 0x11;
    uint64_t v56 = *v15;
    uint64_t v57 = v15[1];
    uint64_t result = (unsigned __int8 *)(v56 + v18 * v9 + v8);
    if (v55) {
      char v54 = 0;
    }
    uint64_t v58 = v51 + v24 * (v13 / 2) + 2 * v11;
    uint64_t v59 = v57 + v19 * (v9 / 2) + v8;
    char v60 = v54;
    do
    {
      float16x8_t v61 = &result[v18];
      float16x8_t v62 = &v52[v23];
      if (v7)
      {
        unint64_t v63 = 0;
        int16x4_t v64 = &result[v18];
        float v65 = &v52[v23];
        do
        {
          LOBYTE(v49) = *(unsigned char *)(v59 + v63);
          *(float *)&unsigned int v66 = (float)LODWORD(v49) - v32;
          LOBYTE(v44) = *(unsigned char *)(v59 + v63 + 1);
          float v67 = (float)LODWORD(v44) - v32;
          float v68 = v112 * v67;
          float v69 = (float)(v110 * v67) + (float)(*(float *)&v66 * v111);
          unsigned int v70 = LODWORD(v109);
          float v71 = v109 * *(float *)&v66;
          LOBYTE(v66) = *result;
          float v72 = v33 * (float)((float)v66 - v31);
          float v73 = v68 + v72;
          float v74 = v72 + v69;
          float v75 = v71 + v72;
          float v76 = (float)((float)((float)(v42 * (float)(v72 + v69)) + (float)(v41 * (float)(v68 + v72)))
                      + (float)(v43 * (float)(v71 + v72)))
              + v36;
          float v77 = v38;
          if (v76 <= v38)
          {
            float v77 = v76;
            if (v76 < v36) {
              float v77 = v36;
            }
          }
          LOBYTE(v76) = result[1];
          float v79 = (float)LODWORD(v76) - v31;
          float v78 = v33 * v79;
          LOBYTE(v79) = *v64;
          LOBYTE(v70) = v64[1];
          float v80 = v68 + v78;
          float v81 = v69 + v78;
          float v82 = v71 + v78;
          float v83 = (float)((float)((float)(v42 * (float)(v69 + v78)) + (float)(v41 * (float)(v68 + v78)))
                      + (float)(v43 * (float)(v71 + v78)))
              + v36;
          *(_WORD *)uint64_t v52 = llroundf(v77) << v60;
          float v84 = v38;
          if (v83 <= v38)
          {
            float v84 = (float)((float)((float)(v42 * (float)(v69 + v78)) + (float)(v41 * (float)(v68 + v78)))
                        + (float)(v43 * (float)(v71 + v78)))
                + v36;
            if (v83 < v36) {
              float v84 = v36;
            }
          }
          float v85 = v33 * (float)((float)LODWORD(v79) - v31);
          float v86 = v68 + v85;
          float v87 = v69 + v85;
          float v88 = v71 + v85;
          float v89 = (float)((float)((float)(v42 * (float)(v69 + v85)) + (float)(v41 * (float)(v68 + v85)))
                      + (float)(v43 * (float)(v71 + v85)))
              + v36;
          *((_WORD *)v52 + 1) = llroundf(v84) << v60;
          float v90 = v38;
          if (v89 <= v38)
          {
            float v90 = v89;
            if (v89 < v36) {
              float v90 = v36;
            }
          }
          float v91 = v33 * (float)((float)v70 - v31);
          float v92 = v68 + v91;
          float v93 = v69 + v91;
          float v94 = v71 + v91;
          float v95 = (float)((float)((float)(v42 * v93) + (float)(v41 * v92)) + (float)(v43 * v94)) + v36;
          *(_WORD *)float v65 = llroundf(v90) << v60;
          float v96 = v38;
          if (v95 <= v38)
          {
            float v96 = (float)((float)((float)(v42 * v93) + (float)(v41 * v92)) + (float)(v43 * v94)) + v36;
            if (v95 < v36) {
              float v96 = v36;
            }
          }
          *((_WORD *)v65 + 1) = llroundf(v96) << v60;
          float v97 = (float)((float)(v73 + v80) + v86) + v92;
          float v98 = (float)((float)(v74 + v81) + v87) + v93;
          float v99 = (float)((float)(v75 + v82) + v88) + v94;
          float v100 = (float)((float)(v37 + (float)(v97 * v108)) + (float)(v98 * v45)) + (float)(v99 * v46);
          float v101 = v40;
          if (v100 <= v40)
          {
            float v101 = (float)((float)(v37 + (float)(v97 * v108)) + (float)(v98 * v45)) + (float)(v99 * v46);
            if (v100 < v39) {
              float v101 = v39;
            }
          }
          int8x8_t v102 = (_WORD *)(v58 + 2 * v63);
          float v44 = (float)((float)(v37 + (float)(v97 * v47)) + (float)(v98 * v48)) + (float)(v99 * v50);
          *int8x8_t v102 = llroundf(v101) << v60;
          float v49 = v40;
          if (v44 <= v40)
          {
            float v49 = v44;
            if (v44 < v39) {
              float v49 = v39;
            }
          }
          result += 2;
          v64 += 2;
          v52 += 4;
          v65 += 4;
          v102[1] = llroundf(v49) << v60;
          v63 += 2;
        }
        while (v7 > v63);
      }
      uint64_t result = &v61[v18];
      v59 += v19;
      uint64_t v52 = &v62[v23];
      v58 += v24;
      v6 += 2;
    }
    while (v10 > v6);
    if (v21 && v26)
    {
      uint64_t v103 = 0;
      do
      {
        if (v7)
        {
          unint64_t v104 = v7;
          float16x8_t v105 = v27;
          uint16x8_t v106 = v22;
          do
          {
            __int16 v107 = *v106++;
            *v105++ = v107 | (v107 << 8);
            --v104;
          }
          while (v104);
        }
        v22 += v20;
        v27 += v25;
        ++v103;
      }
      while (v103 != v10);
    }
    else if (v26)
    {
      do
      {
        if (v7) {
          uint64_t result = (unsigned __int8 *)memset(v27, 255, 2 * v7);
        }
        v27 += v25;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

int vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf_neon_fp16_GCD(char *a1, uint64_t a2, int16x4_t a3, float32x4_t a4, float32x4_t a5, int16x4_t a6)
{
  uint64_t v11 = *(void *)(a1 + 28);
  unint64_t v12 = 2 * *a1;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (2 * v14 != 2 * v13)
  {
    unint64_t v15 = 0;
    size_t v16 = *(void *)(a1 + 20);
    uint64_t v17 = *(void *)(a1 + 36);
    uint64_t v18 = *(void *)(a1 + 44) + 2 * v13;
    unint64_t v19 = 2 * v14 - 2 * v13;
    uint64_t v20 = *((void *)a1 + 14);
    uint64_t v21 = (void *)*((void *)a1 + 16);
    uint64_t v22 = *((void *)a1 + 15) + 2 * (*((void *)a1 + 13) * a2 / v12);
    uint64_t v23 = (float32x2_t *)*((void *)a1 + 19);
    uint64_t v24 = (void *)*((void *)a1 + 7);
    uint64_t v25 = (uint64_t *)*((void *)a1 + 8);
    uint64_t v26 = (uint64_t *)*((void *)a1 + 17);
    uint64_t v27 = *v25;
    uint64_t v28 = v25[1];
    uint64_t v29 = v25[2];
    uint64_t v408 = v24[2];
    uint64_t v30 = *v26;
    uint64_t v31 = v26[1];
    uint64_t v32 = v26[2];
    uint64_t v407 = v21[2];
    uint64_t v33 = (char *)(v407 + v32 * v22 + v20);
    a3.i32[0] = v23[16].i32[0];
    a5.f32[0] = (float)a3.u32[0];
    unsigned int v34 = v23[17].u16[2];
    unsigned int v35 = v23[17].u16[3];
    a6.i32[0] = v23->i32[0];
    a4.i32[0] = v23[3].i32[1];
    unsigned int v36 = v23[18].u16[0];
    LODWORD(v26) = v23[18].u16[1];
    float v37 = (float)v34;
    float v38 = (float)v35;
    *(short float *)a3.i16 = (short float)v34;
    unsigned int v39 = v23[18].u16[2];
    short float v40 = (short float)v35;
    unsigned int v41 = v23[18].u16[3];
    _S26 = v23[5].i32[1];
    v42.i32[0] = v23[6].i32[0];
    v45.i32[0] = v23[6].i32[1];
    v44.i32[0] = v23[7].i32[0];
    a4.i32[1] = v23[1].i32[0];
    v42.i32[1] = v23[7].i32[1];
    v45.i32[1] = v23[8].i32[0];
    v44.i32[1] = v23[8].i32[1];
    LODWORD(v25) = v23[19].u16[0];
    float v468 = v23[4].f32[1];
    float v467 = v23[5].f32[0];
    float v46 = (float)v36;
    float v466 = v23[9].f32[0];
    float v465 = v23[9].f32[1];
    *(short float *)v7.i16 = (short float)v36;
    float v47 = (char *)&v23[2068] + 4;
    __src = (char *)(v408 + v29 * v18 + v17);
    a5.f32[0] = 8191.0 / a5.f32[0];
    float v48 = (float)v26;
    float v458 = (float)v39;
    float v49 = (float)v41;
    _S19 = a5.f32[0] * v23->f32[0];
    float v51 = (float)v25;
    *(short float *)a6.i16 = (short float)v26;
    uint64_t v52 = (char *)&v23[20] + 4;
    *(short float *)v9.i16 = (short float)v39;
    unsigned int v53 = (char *)&v23[4116] + 4;
    float16x8_t v54 = (float16x8_t)vdupq_lane_s16(a3, 0);
    *(short float *)a3.i16 = -v40;
    *(float32x2_t *)a4.f32 = vmul_n_f32(*(float32x2_t *)a4.f32, a5.f32[0]);
    unint64_t v464 = a4.i64[0];
    int32x2_t v55 = (int32x2_t)vcvt_f16_f32(a4);
    *(int16x4_t *)&v56.u32[2] = a3;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s32(v55, 0);
    *(float32x2_t *)v56.f32 = vmul_n_f32(v23[2], a5.f32[0]);
    uint64_t v463 = v56.i64[0];
    float16x8_t v472 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v56), 0);
    float16x8_t v442 = vmulq_n_f16(v57, -v40);
    *(float32x2_t *)a5.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    unint64_t v462 = a5.i64[0];
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    *(float32x2_t *)v8.f32 = vmul_f32(v45, (float32x2_t)0x3F0000003F000000);
    int32x4_t v59 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v8), 0);
    *(float32x2_t *)v10.f32 = vmul_f32(v44, (float32x2_t)0x3F0000003F000000);
    int32x4_t v461 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    int16x8_t v60 = vdupq_lane_s16(v7, 0);
    int16x8_t v61 = vdupq_lane_s16(a6, 0);
    float16x8_t v62 = vmulq_n_f16(v472, -v40);
    *(short float *)a3.i16 = (short float)v41;
    int16x8_t v63 = vdupq_lane_s16(a3, 0);
    float16x8_t v454 = (float16x8_t)v63;
    float16x8_t v455 = (float16x8_t)vdupq_lane_s16(v9, 0);
    *(short float *)v63.i16 = (short float)v25;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    uint64_t v65 = v21[1];
    if (v65) {
      unsigned int v66 = (unsigned char *)(v65 + v31 * v22 + v20);
    }
    else {
      unsigned int v66 = 0;
    }
    float v67 = (int8x8_t *)(*v21 + v30 * v22 + v20);
    if (v18 >= 0) {
      uint64_t v68 = v18;
    }
    else {
      uint64_t v68 = v18 + 1;
    }
    float v69 = (unsigned char *)(v24[1] + v28 * (v68 >> 1) + v17);
    unsigned int v70 = (int8x8_t *)(*v24 + v27 * v18 + v17);
    float v71 = v66;
    uint64_t v409 = *(void *)(a1 + 20) & 0xFFFFFFF8;
    float v72 = &v66[v31];
    uint64_t v420 = 2 * v31;
    __asm { FCVT            H8, S19 }
    short float v439 = _H8;
    LODWORD(_Q8) = v23[4].i32[1];
    __asm { FCVT            H8, S8 }
    short float v438 = *(short float *)&_Q8;
    _S18 = v23[5].i32[0];
    __asm { FCVT            H8, S18 }
    short float v437 = *(short float *)&_Q8;
    float16x8_t v79 = (float16x8_t)v59;
    float v460 = v23[5].f32[1];
    __asm { FCVT            H8, S26 }
    short float v436 = *(short float *)&_Q8;
    float v441 = v23[13].f32[1];
    __asm { FCVT            H1, S1 }
    float v440 = v23[14].f32[0];
    __asm { FCVT            H2, S2 }
    float v477 = v23[15].f32[0];
    float v478 = v23[14].f32[1];
    __asm
    {
      FCVT            H4, S4
      FCVT            H5, S5
    }
    _S26 = v23[9].i32[0];
    __asm { FCVT            H8, S26 }
    short float v431 = *(short float *)&_Q8;
    float16x8_t v85 = (float16x8_t)v60;
    _S29 = v23[9].i32[1];
    __asm { FCVT            H8, S29 }
    short float v430 = *(short float *)&_Q8;
    float16x8_t v87 = (float16x8_t)v461;
    float v451 = v23[10].f32[0];
    __asm { FCVT            H8, S20 }
    short float v429 = *(short float *)&_Q8;
    float v450 = v23[10].f32[1];
    __asm { FCVT            H14, S14 }
    float v449 = v23[11].f32[0];
    __asm { FCVT            H8, S15 }
    short float v427 = *(short float *)&_Q8;
    float v448 = v23[11].f32[1];
    __asm { FCVT            H7, S7 }
    float v447 = v23[12].f32[0];
    __asm { FCVT            H8, S16 }
    short float v425 = *(short float *)&_Q8;
    float v445 = v23[12].f32[1];
    __asm { FCVT            H8, S17 }
    short float v424 = *(short float *)&_Q8;
    float v443 = v23[13].f32[0];
    __asm { FCVT            H8, S23 }
    uint64_t v90 = v10.i64[0];
    float16x8_t v91 = 0uLL;
    v92.i64[0] = 0x9000900090009000;
    v92.i64[1] = 0x9000900090009000;
    float16x8_t v456 = (float16x8_t)v61;
    float16x8_t v476 = v62;
    float16x8_t v453 = v64;
    int v452 = v16 - 7;
    short float v434 = _H2;
    short float v435 = _H1;
    unint64_t v417 = v19;
    size_t v418 = *(void *)(a1 + 20);
    uint64_t v415 = (char *)(v407 + v32 * v22 + v20);
    uint64_t v416 = v32;
    uint64_t v413 = v27;
    uint64_t v414 = v29;
    uint64_t v411 = v30;
    uint64_t v412 = v28;
    uint64_t v410 = v31;
    float v471 = v38;
    float16x8_t v459 = v57;
    float16x8_t v457 = v79;
    float16x8_t v446 = v54;
    float v444 = v48;
    short float v432 = _H5;
    short float v433 = _H4;
    short float v428 = _H14;
    short float v426 = _H7;
    do
    {
      float16x8_t v473 = v72;
      float v93 = (int8x8_t *)((char *)v70 + v27);
      float v94 = (int8x8_t *)((char *)v67 + v30);
      float v95 = &v71[v31];
      v422 = (char *)v67 + v30;
      unsigned __int8 v423 = &v71[v31];
      uint16x8_t v421 = (char *)v70 + v27;
      if ((int)v16 < 8)
      {
        size_t v255 = 0;
        float v254 = v69;
      }
      else
      {
        unint64_t v419 = v15;
        uint64_t v96 = 0;
        float16x8_t v470 = v69;
        float16x8_t v469 = v71;
        do
        {
          float v475 = v67;
          int8x8_t v97 = *(int8x8_t *)&v69[v96];
          *(int8x8_t *)v98.i8 = vzip1_s8(v97, *(int8x8_t *)v91.i8);
          v98.u64[1] = (unint64_t)vzip2_s8(v97, *(int8x8_t *)v91.i8);
          float16x8_t v99 = vcvtq_f16_u16(v98);
          int16x8_t v100 = (int16x8_t)vmlaq_f16(v442, v57, v99);
          int8x16_t v101 = (int8x16_t)vmlaq_f16(v62, v472, v99);
          v99.i64[0] = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u64[0];
          *(int16x4_t *)v102.i8 = vuzp1_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          *(int16x4_t *)v99.i8 = vuzp2_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          v99.i64[1] = v99.i64[0];
          v102.i64[1] = v99.i64[0];
          v100.i64[0] = vextq_s8(v101, v101, 8uLL).u64[0];
          float v474 = v70 + 1;
          *(float16x4_t *)v100.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8));
          *(int8x8_t *)v103.i8 = vzip1_s8(*v70, *(int8x8_t *)v91.i8);
          v103.u64[1] = (unint64_t)vzip2_s8(*v70, *(int8x8_t *)v91.i8);
          v100.i64[1] = v99.i64[0];
          float16x8_t v104 = (float16x8_t)vzip1q_s16((int16x8_t)v99, (int16x8_t)v99);
          float16x8_t v105 = vcvtq_f16_u16(v103);
          int8x8_t v106 = *v93++;
          *(int8x8_t *)v107.i8 = vzip1_s8(v106, *(int8x8_t *)v91.i8);
          float16x8_t v108 = (float16x8_t)vzip1q_s16(v100, v100);
          v107.u64[1] = (unint64_t)vzip2_s8(v106, *(int8x8_t *)v91.i8);
          float16x8_t v109 = vsubq_f16(v105, v54);
          float16x8_t v110 = (float16x8_t)vzip1q_s16(v102, v102);
          float16x8_t v111 = vsubq_f16(vcvtq_f16_u16(v107), v54);
          float16x8_t v112 = vmlaq_n_f16(v104, v109, v439);
          float16x8_t v113 = vmlaq_n_f16(v108, v109, v439);
          float16x8_t v114 = vmlaq_n_f16(v104, v111, v439);
          float16x8_t v115 = vmlaq_n_f16(v108, v111, v439);
          float16x8_t v116 = vmlaq_n_f16(v110, v109, v439);
          float16x8_t v117 = vmlaq_n_f16(v110, v111, v439);
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, v91), v92));
          uint32x4_t v119 = vmovl_high_u16(v118);
          v120.i64[0] = v119.u32[2];
          v120.i64[1] = v119.u32[3];
          float16x8_t v121 = v120;
          v120.i64[0] = v119.u32[0];
          v120.i64[1] = v119.u32[1];
          float16x8_t v122 = v120;
          uint32x4_t v123 = vmovl_u16(*(uint16x4_t *)v118.i8);
          v120.i64[0] = v123.u32[2];
          v120.i64[1] = v123.u32[3];
          float16x8_t v124 = v120;
          uint64_t v125 = v123.u32[1];
          v126.i16[0] = *(_WORD *)&v52[2 * v123.u32[0]];
          uint64_t v127 = v122.i64[1];
          uint64_t v128 = v121.i64[1];
          uint64_t v129 = v121.i64[0];
          float16x8_t v130 = (__int16 *)&v52[2 * v122.i64[0]];
          uint16x8_t v131 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, v91), v92));
          uint32x4_t v132 = vmovl_high_u16(v131);
          v120.i64[0] = v132.u32[2];
          v120.i64[1] = v132.u32[3];
          float16x8_t v133 = v120;
          v120.i64[0] = v132.u32[0];
          v120.i64[1] = v132.u32[1];
          float16x8_t v134 = v120;
          float v135 = (__int16 *)&v52[2 * v129];
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v131.i8);
          v120.i64[0] = v136.u32[2];
          v113.i64[1] = v136.u32[3];
          uint64_t v137 = v136.u32[1];
          v138.i16[0] = *(_WORD *)&v52[2 * v136.u32[0]];
          uint64_t v139 = v134.i64[1];
          float v140 = (__int16 *)&v52[2 * v125];
          unsigned int v141 = (__int16 *)&v52[2 * v134.i64[0]];
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, v91), v92));
          uint32x4_t v143 = vmovl_high_u16(v142);
          uint32x4_t v144 = vmovl_u16(*(uint16x4_t *)v142.i8);
          float v145 = (__int16 *)&v52[2 * v127];
          float v146 = (__int16 *)&v52[2 * v128];
          v147.i16[0] = *(_WORD *)&v52[2 * v144.u32[0]];
          v126.i16[1] = *v140;
          float v148 = (__int16 *)&v52[2 * v144.u32[1]];
          float v149 = (__int16 *)&v52[2 * v144.u32[2]];
          float v150 = (__int16 *)&v52[2 * v144.u32[3]];
          float v151 = (__int16 *)&v52[2 * v143.u32[0]];
          float v152 = (__int16 *)&v52[2 * v143.u32[1]];
          float v153 = (__int16 *)&v52[2 * v143.u32[2]];
          float v154 = (__int16 *)&v52[2 * v143.u32[3]];
          uint16x8_t v155 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, v91), v92));
          uint32x4_t v156 = vmovl_high_u16(v155);
          uint32x4_t v157 = vmovl_u16(*(uint16x4_t *)v155.i8);
          v147.i16[1] = *v148;
          v114.i16[0] = *(_WORD *)&v52[2 * v157.u32[0]];
          v126.i16[2] = *(_WORD *)&v52[2 * v124.i64[0]];
          v138.i16[1] = *(_WORD *)&v52[2 * v137];
          v147.i16[2] = *v149;
          v126.i16[3] = *(_WORD *)&v52[2 * v124.i64[1]];
          float v158 = (__int16 *)&v52[2 * v156.u32[1]];
          float v159 = (__int16 *)&v52[2 * v156.u32[2]];
          float v160 = (__int16 *)&v52[2 * v156.u32[3]];
          v138.i16[2] = *(_WORD *)&v52[2 * v120.i64[0]];
          v114.i16[1] = *(_WORD *)&v52[2 * v157.u32[1]];
          v114.i16[2] = *(_WORD *)&v52[2 * v157.u32[2]];
          v147.i16[3] = *v150;
          v114.i16[3] = *(_WORD *)&v52[2 * v157.u32[3]];
          v114.i16[4] = *(_WORD *)&v52[2 * v156.u32[0]];
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, v91), v92));
          uint32x4_t v162 = vmovl_high_u16(v161);
          v120.i64[0] = v162.u32[2];
          v120.i64[1] = v162.u32[3];
          float16x8_t v163 = v120;
          v126.i16[4] = *v130;
          uint32x4_t v164 = vmovl_u16(*(uint16x4_t *)v161.i8);
          v138.i16[3] = *(_WORD *)&v52[2 * v113.i64[1]];
          v115.i16[0] = *(_WORD *)&v52[2 * v164.u32[0]];
          v147.i16[4] = *v151;
          v114.i16[5] = *v158;
          v126.i16[5] = *v145;
          v138.i16[4] = *v141;
          v147.i16[5] = *v152;
          v115.i16[1] = *(_WORD *)&v52[2 * v164.u32[1]];
          v115.i16[2] = *(_WORD *)&v52[2 * v164.u32[2]];
          v114.i16[6] = *v159;
          v115.i16[3] = *(_WORD *)&v52[2 * v164.u32[3]];
          v115.i16[4] = *(_WORD *)&v52[2 * v162.u32[0]];
          v115.i16[5] = *(_WORD *)&v52[2 * v162.u32[1]];
          uint16x8_t v165 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, v91), v92));
          float16x8_t v166 = (float16x8_t)vmovl_high_u16(v165);
          v126.i16[6] = *v135;
          v120.i64[0] = v166.u32[2];
          v120.i64[1] = v166.u32[3];
          float16x8_t v167 = v120;
          v120.i64[0] = v166.u32[0];
          v120.i64[1] = v166.u32[1];
          uint32x4_t v168 = vmovl_u16(*(uint16x4_t *)v165.i8);
          v138.i16[5] = *(_WORD *)&v52[2 * v139];
          v147.i16[6] = *v153;
          v166.i16[0] = *(_WORD *)&v52[2 * v168.u32[0]];
          v114.i16[7] = *v160;
          v115.i16[6] = *(_WORD *)&v52[2 * v163.i64[0]];
          v126.i16[7] = *v146;
          v138.i16[6] = *(_WORD *)&v52[2 * v133.i64[0]];
          v166.i16[1] = *(_WORD *)&v52[2 * v168.u32[1]];
          v115.i16[7] = *(_WORD *)&v52[2 * v163.i64[1]];
          v166.i16[2] = *(_WORD *)&v52[2 * v168.u32[2]];
          v166.i16[3] = *(_WORD *)&v52[2 * v168.u32[3]];
          v138.i16[7] = *(_WORD *)&v52[2 * v133.i64[1]];
          v166.i16[4] = *(_WORD *)&v52[2 * v120.i64[0]];
          v166.i16[5] = *(_WORD *)&v52[2 * v120.i64[1]];
          v147.i16[7] = *v154;
          v166.i16[6] = *(_WORD *)&v52[2 * v167.i64[0]];
          v166.i16[7] = *(_WORD *)&v52[2 * v167.i64[1]];
          uint16x8_t v169 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v126, v435), v138, v434), v147, v433), vmaxq_f16(vmaxq_f16(v126, v138), v147), v432), v91), v92));
          uint32x4_t v170 = vmovl_high_u16(v169);
          v120.i64[0] = v170.u32[2];
          v120.i64[1] = v170.u32[3];
          float16x8_t v171 = v120;
          uint32x4_t v172 = vmovl_u16(*(uint16x4_t *)v169.i8);
          v163.i16[0] = *(_WORD *)&v47[2 * v172.u32[0]];
          uint64_t v173 = v170.u32[1];
          unint64_t v174 = (__int16 *)&v47[2 * v172.u32[1]];
          float v175 = (__int16 *)&v47[2 * v172.u32[2]];
          float v176 = (__int16 *)&v47[2 * v170.u32[0]];
          __int16 v177 = (__int16 *)&v47[2 * v172.u32[3]];
          uint16x8_t v178 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v435), v115, v434), v166, v433), vmaxq_f16(vmaxq_f16(v114, v115), v166), v432), v91), v92));
          uint32x4_t v179 = vmovl_high_u16(v178);
          float16x8_t v180 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v178.i8);
          v163.i16[1] = *v174;
          v120.i64[1] = v179.u32[3];
          v163.i16[2] = *v175;
          v163.i16[3] = *v177;
          v180.i16[0] = *(_WORD *)&v47[2 * v180.u32[0]];
          v163.i16[4] = *v176;
          v163.i16[5] = *(_WORD *)&v47[2 * v173];
          unsigned __int32 v181 = (__int16 *)&v47[2 * v179.u32[0]];
          v163.i16[6] = *(_WORD *)&v47[2 * v171.i64[0]];
          float v182 = (__int16 *)&v47[2 * v179.u32[1]];
          v180.i16[1] = *(_WORD *)&v47[2 * v180.u32[1]];
          v163.i16[7] = *(_WORD *)&v47[2 * v171.i64[1]];
          float32_t v183 = (__int16 *)&v47[2 * v179.u32[2]];
          v180.i16[2] = *(_WORD *)&v47[2 * v180.u32[2]];
          v180.i16[3] = *(_WORD *)&v47[2 * v180.u32[3]];
          float16x8_t v184 = vmulq_f16(v126, v163);
          v180.i16[4] = *v181;
          v180.i16[5] = *v182;
          float16x8_t v185 = vmulq_f16(v138, v163);
          v180.i16[6] = *v183;
          v180.i16[7] = *(_WORD *)&v47[2 * v120.i64[1]];
          float16x8_t v186 = vmulq_f16(v114, v180);
          float16x8_t v187 = vmulq_f16(v147, v163);
          float16x8_t v188 = vmulq_f16(v115, v180);
          float16x8_t v189 = vmulq_f16(v166, v180);
          v138.i16[7] = HIWORD(_Q8);
          float16x8_t v190 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v184, v428), v185, v427), v187, v426);
          float16x8_t v191 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v186, v431), v188, v430), v189, v429);
          float16x8_t v192 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v186, v428), v188, v427), v189, v426);
          float16x8_t v193 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v187, *(short float *)&_Q8), v185, v424), v184, v425);
          float16x8_t v194 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v189, *(short float *)&_Q8), v188, v424), v186, v425);
          v92.i64[0] = 0x9000900090009000;
          v92.i64[1] = 0x9000900090009000;
          uint16x8_t v195 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v184, v431), v185, v430), v187, v429), v91), v92));
          uint32x4_t v196 = vmovl_high_u16(v195);
          v185.i64[0] = v196.u32[2];
          uint32x4_t v197 = vmovl_u16(*(uint16x4_t *)v195.i8);
          uint64_t v198 = v197.u32[1];
          uint64_t v199 = v197.u32[0];
          uint64_t v200 = v197.u32[3];
          uint64_t v201 = v196.u32[1];
          uint64_t v202 = v197.u32[2];
          uint64_t v203 = v196.u32[0];
          uint64_t v204 = v196.u32[3];
          uint16x8_t v205 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v190, v91), v92));
          int16x8_t v206 = (int16x8_t)vmovl_high_u16(v205);
          v120.i64[0] = v206.u32[2];
          v120.i64[1] = v206.u32[3];
          float16x8_t v207 = v120;
          v120.i64[0] = v206.u32[0];
          uint32x4_t v208 = vmovl_u16(*(uint16x4_t *)v205.i8);
          uint64_t v209 = v185.i64[0];
          v206.i64[1] = v208.u32[3];
          uint64_t v210 = v208.u32[1];
          uint64_t v211 = v208.u32[0];
          uint64_t v212 = v208.u32[2];
          uint64_t v213 = v206.u32[1];
          v206.i16[0] = *(_WORD *)&v53[2 * v199];
          uint64_t v214 = v120.i64[0];
          uint64_t v215 = v207.i64[1];
          uint64_t v216 = v207.i64[0];
          uint16x8_t v217 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v193, v91), v92));
          uint32x4_t v218 = vmovl_high_u16(v217);
          v120.i64[0] = v218.u32[2];
          v120.i64[1] = v218.u32[3];
          v193.i16[0] = *(_WORD *)&v53[2 * v211];
          uint32x4_t v219 = vmovl_u16(*(uint16x4_t *)v217.i8);
          v186.i64[1] = v219.u32[3];
          uint64_t v220 = v219.u32[1];
          v138.i16[0] = *(_WORD *)&v53[2 * v219.u32[0]];
          float16x8_t v221 = (__int16 *)&v53[2 * v219.u32[2]];
          uint64_t v222 = v218.u32[1];
          uint64_t v223 = v218.u32[0];
          uint16x8_t v224 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v191, v91), v92));
          uint32x4_t v225 = vmovl_u16(*(uint16x4_t *)v224.i8);
          v206.i16[1] = *(_WORD *)&v53[2 * v198];
          v147.i16[0] = *(_WORD *)&v53[2 * v225.u32[0]];
          uint64_t v226 = v120.i64[1];
          v193.i16[1] = *(_WORD *)&v53[2 * v210];
          v138.i16[1] = *(_WORD *)&v53[2 * v220];
          v147.i16[1] = *(_WORD *)&v53[2 * v225.u32[1]];
          v147.i16[2] = *(_WORD *)&v53[2 * v225.u32[2]];
          uint32x4_t v227 = vmovl_high_u16(v224);
          v206.i16[2] = *(_WORD *)&v53[2 * v202];
          int16x8_t v228 = (int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v192, v91), v92));
          uint32x4_t v229 = vmovl_u16(*(uint16x4_t *)v228.i8);
          v193.i16[2] = *(_WORD *)&v53[2 * v212];
          v192.i16[7] = (unint64_t)v229.u32[1] >> 48;
          v138.i16[2] = *v221;
          v192.i16[0] = *(_WORD *)&v53[2 * v229.u32[0]];
          v147.i16[3] = *(_WORD *)&v53[2 * v225.u32[3]];
          v206.i16[3] = *(_WORD *)&v53[2 * v200];
          v193.i16[3] = *(_WORD *)&v53[2 * v206.i64[1]];
          float v69 = v470;
          v138.i16[3] = *(_WORD *)&v53[2 * v186.i64[1]];
          v147.i16[4] = *(_WORD *)&v53[2 * v227.u32[0]];
          uint32x4_t v230 = vmovl_high_u16((uint16x8_t)v228);
          v206.i16[4] = *(_WORD *)&v53[2 * v203];
          unsigned int v70 = v474;
          v192.i16[1] = *(_WORD *)&v53[2 * v229.u32[1]];
          v193.i16[4] = *(_WORD *)&v53[2 * v214];
          v138.i16[4] = *(_WORD *)&v53[2 * v223];
          v192.i16[2] = *(_WORD *)&v53[2 * v229.u32[2]];
          v147.i16[5] = *(_WORD *)&v53[2 * v227.u32[1]];
          v192.i16[3] = *(_WORD *)&v53[2 * v229.u32[3]];
          *(__int32 *)((char *)&v206.i32[2] + 2) = *(unsigned __int16 *)&v53[2 * v201];
          v192.i16[4] = *(_WORD *)&v53[2 * v230.u32[0]];
          v193.i16[5] = *(_WORD *)&v53[2 * v213];
          v138.i16[5] = *(_WORD *)&v53[2 * v222];
          v192.i16[5] = *(_WORD *)&v53[2 * v230.u32[1]];
          uint64_t v231 = v230.u32[3];
          v147.i16[6] = *(_WORD *)&v53[2 * v227.u32[2]];
          v192.i16[6] = *(_WORD *)&v53[2 * v230.u32[2]];
          v206.i16[6] = *(_WORD *)&v53[2 * v209];
          uint64_t v232 = (__int16 *)&v53[2 * v227.u32[3]];
          uint16x8_t v233 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v194, v91), v92));
          v193.i16[6] = *(_WORD *)&v53[2 * v216];
          uint32x4_t v234 = vmovl_high_u16(v233);
          uint32x4_t v235 = vmovl_u16(*(uint16x4_t *)v233.i8);
          v120.i64[1] = v235.u32[3];
          v228.i16[7] = (unint64_t)v235.u32[3] >> 48;
          v138.i16[6] = *(_WORD *)&v53[2 * v120.i64[0]];
          uint64_t v236 = v235.u32[1];
          float16x8_t v237 = v147;
          uint64_t v238 = v235.u32[2];
          v228.i16[0] = *(_WORD *)&v53[2 * v235.u32[0]];
          v237.i16[7] = *v232;
          uint64_t v239 = v234.u32[1];
          uint64_t v240 = v234.u32[0];
          float16x8_t v241 = (float16x8_t)v206;
          v241.i16[7] = *(_WORD *)&v53[2 * v204];
          float16x8_t v242 = (float16x8_t)vuzp1q_s16(v206, (int16x8_t)v193);
          v228.i16[1] = *(_WORD *)&v53[2 * v236];
          uint64_t v243 = v234.u32[3];
          v193.i16[7] = *(_WORD *)&v53[2 * v215];
          uint64_t v244 = v234.u32[2];
          float16x8_t v245 = vmlaq_n_f16(vmlaq_n_f16(v85, v241, v438), v193, v437);
          float16x8_t v246 = (float16x8_t)vuzp2q_s16((int16x8_t)v241, (int16x8_t)v193);
          float16x8_t v247 = (float16x8_t)vtrn1q_s16((int16x8_t)v138, (int16x8_t)v138);
          a1 = &v53[2 * v238];
          v138.i16[7] = *(_WORD *)&v53[2 * v226];
          v228.i16[2] = *(_WORD *)a1;
          int16x8_t v248 = (int16x8_t)vaddq_f16(v242, v246);
          float16x8_t v249 = vmlaq_n_f16(v245, v138, v436);
          float16x8_t v250 = (float16x8_t)vtrn2q_s16((int16x8_t)v138, (int16x8_t)v138);
          float16x8_t v62 = v476;
          float16x8_t v251 = v192;
          v228.i16[3] = *(_WORD *)&v53[2 * v120.i64[1]];
          v228.i16[4] = *(_WORD *)&v53[2 * v240];
          v251.i16[7] = *(_WORD *)&v53[2 * v231];
          v228.i16[5] = *(_WORD *)&v53[2 * v239];
          v228.i16[6] = *(_WORD *)&v53[2 * v244];
          float16x8_t v252 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v456, v58, (float16x8_t)vzip1q_s16(v248, v248)), v79, (float16x8_t)vzip2q_s16(v248, v248)), v87, vaddq_f16(v247, v250));
          float16x8_t v64 = (float16x8_t)v228;
          v64.i16[7] = *(_WORD *)&v53[2 * v243];
          *float v475 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v249, v85), v455)));
          float v67 = v475 + 1;
          *(int8x8_t *)&v469[v96] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v252, v454), v453)));
          float16x8_t v91 = 0uLL;
          *v94++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v85, v237, v438), v251, v437), v64, v436), v85), v455)));
          int16x8_t v253 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v147, (int16x8_t)v192), (float16x8_t)vuzp2q_s16((int16x8_t)v237, (int16x8_t)v251));
          *(int8x8_t *)v64.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v456, v58, (float16x8_t)vzip1q_s16(v253, v253)), v79, (float16x8_t)vzip2q_s16(v253, v253)), v87, vaddq_f16((float16x8_t)vtrn1q_s16(v228, v228), (float16x8_t)vtrn2q_s16((int16x8_t)v64, (int16x8_t)v64))), v454), v453)));
          *(void *)&v473[v96] = v64.i64[0];
          v96 += 8;
        }
        while ((int)v96 < v452);
        float v254 = &v470[v96];
        float v71 = &v469[v96];
        float v95 = &v473[v96];
        size_t v255 = v409;
        uint64_t v31 = v410;
        unint64_t v19 = v417;
        size_t v16 = v418;
        uint64_t v33 = v415;
        uint64_t v32 = v416;
        uint64_t v27 = v413;
        uint64_t v29 = v414;
        unint64_t v15 = v419;
        uint64_t v30 = v411;
        uint64_t v28 = v412;
        float v38 = v471;
      }
      for (; v16 > v255; float16x8_t v85 = (float16x8_t)v60)
      {
        v64.i8[0] = v254[1];
        float v256 = (float)v64.u32[0] - v38;
        unsigned int v257 = HIDWORD(v464);
        float v258 = *((float *)&v464 + 1) * v256;
        LOBYTE(v257) = v70->i8[0];
        float v259 = _S19 * (float)((float)v257 - v37);
        float v260 = (float)(*((float *)&v464 + 1) * v256) + v259;
        float v261 = 8191.0;
        if (v260 <= 8191.0)
        {
          float v261 = (float)(*((float *)&v464 + 1) * v256) + v259;
          if (v260 < 0.0) {
            float v261 = 0.0;
          }
        }
        LOBYTE(v260) = *v254;
        float v262 = (float)LODWORD(v260) - v38;
        float v263 = (float)(*((float *)&v463 + 1) * v256) + (float)(v262 * *(float *)&v463);
        float v264 = 8191.0;
        if ((float)(v259 + v263) <= 8191.0)
        {
          float v264 = v259 + v263;
          if ((float)(v259 + v263) < 0.0) {
            float v264 = 0.0;
          }
        }
        float v265 = *(float *)&v464 * v262;
        float v266 = (float)(*(float *)&v464 * v262) + v259;
        float v267 = 8191.0;
        if (v266 <= 8191.0)
        {
          float v267 = v266;
          if (v266 < 0.0) {
            float v267 = 0.0;
          }
        }
        LOBYTE(v266) = v70->i8[1];
        float v268 = _S19 * (float)((float)LODWORD(v266) - v37);
        float v269 = 8191.0;
        if ((float)(v258 + v268) <= 8191.0)
        {
          float v269 = v258 + v268;
          if ((float)(v258 + v268) < 0.0) {
            float v269 = 0.0;
          }
        }
        float v270 = 8191.0;
        if ((float)(v263 + v268) <= 8191.0)
        {
          float v270 = v263 + v268;
          if ((float)(v263 + v268) < 0.0) {
            float v270 = 0.0;
          }
        }
        float v271 = v265 + v268;
        float v272 = 8191.0;
        if (v271 <= 8191.0)
        {
          float v272 = v271;
          if (v271 < 0.0) {
            float v272 = 0.0;
          }
        }
        LOBYTE(v271) = v93->i8[0];
        float v273 = _S19 * (float)((float)LODWORD(v271) - v37);
        float v274 = 8191.0;
        if ((float)(v258 + v273) <= 8191.0)
        {
          float v274 = v258 + v273;
          if ((float)(v258 + v273) < 0.0) {
            float v274 = 0.0;
          }
        }
        float v275 = 8191.0;
        if ((float)(v263 + v273) <= 8191.0)
        {
          float v275 = v263 + v273;
          if ((float)(v263 + v273) < 0.0) {
            float v275 = 0.0;
          }
        }
        float v276 = v265 + v273;
        float v277 = 8191.0;
        if (v276 <= 8191.0)
        {
          float v277 = v276;
          if (v276 < 0.0) {
            float v277 = 0.0;
          }
        }
        v92.i8[0] = v93->i8[1];
        float v278 = _S19 * (float)((float)v92.u32[0] - v37);
        float v279 = v258 + v278;
        BOOL v280 = (float)(v258 + v278) <= 8191.0;
        float v281 = 8191.0;
        if (v280)
        {
          float v281 = v279;
          if (v279 < 0.0) {
            float v281 = 0.0;
          }
        }
        float v282 = v263 + v278;
        BOOL v280 = (float)(v263 + v278) <= 8191.0;
        float v283 = 8191.0;
        if (v280)
        {
          float v283 = v282;
          if (v282 < 0.0) {
            float v283 = 0.0;
          }
        }
        float v284 = v265 + v278;
        BOOL v280 = (float)(v265 + v278) <= 8191.0;
        float v285 = 8191.0;
        if (v280)
        {
          float v285 = v284;
          if (v284 < 0.0) {
            float v285 = 0.0;
          }
        }
        _H1 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v261, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v264, 0.0), 8191.0))];
        __asm { FCVT            S3, H2 }
        _H2 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v267, 0.0), 8191.0))];
        __asm { FCVT            S4, H2 }
        _H13 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v269, 0.0), 8191.0))];
        _H23 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v270, 0.0), 8191.0))];
        _H24 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v272, 0.0), 8191.0))];
        _H17 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v274, 0.0), 8191.0))];
        _H20 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v275, 0.0), 8191.0))];
        _H10 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v277, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v281, 0.0), 8191.0))];
        _H7 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v283, 0.0), 8191.0))];
        _H0 = *(_WORD *)&v52[2 * llroundf(fminf(fmaxf(v285, 0.0), 8191.0))];
        float v301 = (float)((float)((float)(v440 * _S3) + (float)(v441 * _S1)) + (float)(v478 * _S4))
             + (float)(v477 * fmaxf(_S1, fmaxf(_S3, _S4)));
        float v302 = 8191.0;
        if (v301 <= 8191.0)
        {
          float v302 = v301;
          if (v301 < 0.0) {
            float v302 = 0.0;
          }
        }
        float16x8_t v303 = v58;
        float v304 = v37;
        __asm
        {
          FCVT            S30, H13
          FCVT            S13, H23
          FCVT            S14, H24
        }
        _H23 = *(_WORD *)&v47[2 * llroundf(v302)];
        float v309 = (float)((float)((float)(v440 * _S13) + (float)(v441 * _S30)) + (float)(v478 * _S14))
             + (float)(v477 * fmaxf(_S30, fmaxf(_S13, _S14)));
        float v310 = 8191.0;
        if (v309 <= 8191.0)
        {
          float v310 = v309;
          if (v309 < 0.0) {
            float v310 = 0.0;
          }
        }
        __asm
        {
          FCVT            S25, H17
          FCVT            S27, H20
          FCVT            S12, H10
        }
        _H2 = *(_WORD *)&v47[2 * llroundf(v310)];
        float v315 = (float)((float)((float)(v440 * _S27) + (float)(v441 * _S25)) + (float)(v478 * _S12))
             + (float)(v477 * fmaxf(_S25, fmaxf(_S27, _S12)));
        float v316 = 8191.0;
        if (v315 <= 8191.0)
        {
          float v316 = v315;
          if (v315 < 0.0) {
            float v316 = 0.0;
          }
        }
        __asm
        {
          FCVT            S24, H5
          FCVT            S10, H7
          FCVT            S26, H0
          FCVT            S0, H23
        }
        float v321 = _S1 * _S0;
        float v322 = _S3 * _S0;
        float v323 = _S4 * _S0;
        __asm { FCVT            S0, H2 }
        float v325 = _S30 * _S0;
        float v326 = _S13 * _S0;
        float v327 = _S14 * _S0;
        LOWORD(_S0) = *(_WORD *)&v47[2 * llroundf(v316)];
        __asm { FCVT            S1, H0 }
        float v329 = _S25 * _S1;
        float v330 = _S27 * _S1;
        float v331 = _S12 * _S1;
        float v332 = (float)((float)((float)(v440 * _S10) + (float)(v441 * _S24)) + (float)(v478 * _S26))
             + (float)(v477 * fmaxf(_S24, fmaxf(_S10, _S26)));
        float v333 = 8191.0;
        if (v332 <= 8191.0)
        {
          float v333 = v332;
          if (v332 < 0.0) {
            float v333 = 0.0;
          }
        }
        _H2 = *(_WORD *)&v47[2 * llroundf(v333)];
        __asm { FCVT            S2, H2 }
        _S16 = _S24 * _S2;
        float v337 = _S10 * _S2;
        float v338 = _S26 * _S2;
        float v339 = (float)((float)(v465 * v322) + (float)(v321 * v466)) + (float)(v323 * v451);
        float v340 = (float)((float)(v449 * v322) + (float)(v321 * v450)) + (float)(v323 * v448);
        float v341 = (float)((float)(v445 * v322) + (float)(v321 * v447)) + (float)(v323 * v443);
        float v342 = (float)((float)(v465 * v326) + (float)(v325 * v466)) + (float)(v327 * v451);
        float v343 = (float)((float)(v449 * v326) + (float)(v325 * v450)) + (float)(v327 * v448);
        _S4 = (float)((float)(v445 * v326) + (float)(v325 * v447)) + (float)(v327 * v443);
        _S5 = (float)((float)(v465 * v330) + (float)(v329 * v466)) + (float)(v331 * v451);
        _S7 = (float)((float)(v449 * v330) + (float)(v329 * v450)) + (float)(v331 * v448);
        _S0 = (float)((float)(v445 * v330) + (float)(v329 * v447)) + (float)(v331 * v443);
        _S1 = (float)((float)(v465 * v337) + (float)(_S16 * v466)) + (float)(v338 * v451);
        float v349 = (float)((float)(v449 * v337) + (float)(_S16 * v450)) + (float)(v338 * v448);
        float v350 = (float)((float)(v445 * v337) + (float)(_S16 * v447)) + (float)(v338 * v443);
        LOWORD(_S16) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v339, 0.0), 8191.0))];
        unsigned int v351 = llroundf(fminf(fmaxf(_S4, 0.0), 8191.0));
        LOWORD(_S4) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v340, 0.0), 8191.0))];
        __asm
        {
          FCVT            S16, H16
          FCVT            S4, H4
        }
        unsigned int v354 = llroundf(fminf(fmaxf(_S5, 0.0), 8191.0));
        LOWORD(_S5) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v341, 0.0), 8191.0))];
        unsigned int v355 = llroundf(fminf(fmaxf(_S7, 0.0), 8191.0));
        __asm { FCVT            S5, H5 }
        LOWORD(_S7) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v342, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        unsigned int v358 = llroundf(fminf(fmaxf(_S0, 0.0), 8191.0));
        LOWORD(_S0) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v343, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        unsigned int v360 = llroundf(fminf(fmaxf(_S1, 0.0), 8191.0));
        LOWORD(_S1) = *(_WORD *)&v53[2 * v351];
        __asm { FCVT            S1, H1 }
        unsigned int v362 = llroundf(fminf(fmaxf(v349, 0.0), 8191.0));
        unsigned int v363 = llroundf(fminf(fmaxf(v350, 0.0), 8191.0));
        float v364 = (float)((float)((float)(v467 * _S4) + (float)(v468 * _S16)) + (float)(v460 * _S5)) + v46;
        if (v364 < v46) {
          float v365 = v46;
        }
        else {
          float v365 = (float)((float)((float)(v467 * _S4) + (float)(v468 * _S16)) + (float)(v460 * _S5)) + v46;
        }
        BOOL v280 = v364 <= v458;
        float v366 = (float)((float)((float)(v467 * _S0) + (float)(v468 * _S7)) + (float)(v460 * _S1)) + v46;
        if (!v280) {
          float v365 = v458;
        }
        LODWORD(a1) = llroundf(v365);
        if (v366 < v46) {
          float v367 = v46;
        }
        else {
          float v367 = (float)((float)((float)(v467 * _S0) + (float)(v468 * _S7)) + (float)(v460 * _S1)) + v46;
        }
        BOOL v280 = v366 <= v458;
        _H2 = *(_WORD *)&v53[2 * v354];
        if (!v280) {
          float v367 = v458;
        }
        __int8 v369 = llroundf(v367);
        _H3 = *(_WORD *)&v53[2 * v355];
        __asm
        {
          FCVT            S2, H2
          FCVT            S3, H3
        }
        _S7 = _S16 + _S7;
        _H16 = *(_WORD *)&v53[2 * v358];
        __asm { FCVT            S16, H16 }
        float v376 = _S4 + _S0;
        _H4 = *(_WORD *)&v53[2 * v360];
        __asm { FCVT            S4, H4 }
        float v379 = _S5 + _S1;
        float v380 = (float)(v444 + (float)(_S7 * *(float *)&v462)) + (float)(v376 * v8.f32[0]);
        float v381 = (float)(v444 + (float)(_S7 * *((float *)&v462 + 1))) + (float)(v376 * v8.f32[1]);
        LOWORD(_S7) = *(_WORD *)&v53[2 * v362];
        __asm { FCVT            S7, H7 }
        float v383 = v380 + (float)(v379 * *(float *)&v90);
        float v384 = v381 + (float)(v379 * *((float *)&v90 + 1));
        if (v383 < v49) {
          float v385 = v49;
        }
        else {
          float v385 = v383;
        }
        _H5 = *(_WORD *)&v53[2 * v363];
        __asm { FCVT            S5, H5 }
        if (!(_NF ^ _VF | _ZF)) {
          float v385 = v51;
        }
        char v388 = llroundf(v385);
        if (v384 < v49) {
          float v389 = v49;
        }
        else {
          float v389 = v384;
        }
        if (v384 <= v51) {
          float v390 = v389;
        }
        else {
          float v390 = v51;
        }
        char v391 = llroundf(v390);
        float v392 = (float)((float)((float)(v467 * _S3) + (float)(v468 * _S2)) + (float)(v460 * _S16)) + v46;
        if (v392 < v46) {
          float v393 = v46;
        }
        else {
          float v393 = (float)((float)((float)(v467 * _S3) + (float)(v468 * _S2)) + (float)(v460 * _S16)) + v46;
        }
        BOOL v280 = v392 <= v458;
        float v394 = (float)((float)((float)(v467 * _S7) + (float)(v468 * _S4)) + (float)(v460 * _S5)) + v46;
        if (!v280) {
          float v393 = v458;
        }
        __int8 v395 = llroundf(v393);
        if (v394 < v46) {
          float v396 = v46;
        }
        else {
          float v396 = (float)((float)((float)(v467 * _S7) + (float)(v468 * _S4)) + (float)(v460 * _S5)) + v46;
        }
        if (v394 <= v458) {
          float v397 = v396;
        }
        else {
          float v397 = v458;
        }
        __int8 v398 = llroundf(v397);
        float v399 = _S2 + _S4;
        v67->i8[0] = (char)a1;
        v67->i8[1] = v369;
        *float v71 = v388;
        v71[1] = v391;
        v94->i8[0] = v395;
        v94->i8[1] = v398;
        float v400 = _S3 + _S7;
        float v401 = (float)((float)(v444 + (float)((float)(_S2 + _S4) * *(float *)&v462))
                     + (float)((float)(_S3 + _S7) * v8.f32[0]))
             + (float)((float)(_S16 + _S5) * *(float *)&v90);
        float v402 = v51;
        float16x8_t v62 = v476;
        if (v401 <= v51)
        {
          float v402 = v401;
          if (v401 < v49) {
            float v402 = v49;
          }
        }
        float v403 = (float)((float)(v444 + (float)(v399 * *((float *)&v462 + 1))) + (float)(v400 * v8.f32[1]))
             + (float)((float)(_S16 + _S5) * *((float *)&v90 + 1));
        *float v95 = llroundf(v402);
        *(float *)v64.i32 = v51;
        float v37 = v304;
        float v38 = v471;
        float16x8_t v54 = v446;
        float16x8_t v57 = v459;
        float16x8_t v58 = v303;
        v92.i64[0] = 0x9000900090009000;
        v92.i64[1] = 0x9000900090009000;
        if (v403 <= v51)
        {
          *(float *)v64.i32 = v403;
          if (v403 < v49) {
            *(float *)v64.i32 = v49;
          }
        }
        v255 += 2;
        v254 += 2;
        unsigned int v70 = (int8x8_t *)((char *)v70 + 2);
        float v93 = (int8x8_t *)((char *)v93 + 2);
        float v67 = (int8x8_t *)((char *)v67 + 2);
        v95[1] = llroundf(*(float *)v64.i32);
        v71 += 2;
        float v94 = (int8x8_t *)((char *)v94 + 2);
        v95 += 2;
        float16x8_t v79 = v457;
        float16x8_t v87 = (float16x8_t)v461;
      }
      unsigned int v70 = (int8x8_t *)&v421[v27];
      v69 += v28;
      float v67 = (int8x8_t *)&v422[v30];
      float v71 = &v423[v31];
      v15 += 2;
      float v72 = &v473[v420];
    }
    while (v19 > v15);
    if (v408 && v407)
    {
      float v404 = __src;
      do
      {
        LODWORD(a1) = memcpy(v33, v404, v16);
        v404 += v29;
        v33 += v32;
        --v19;
      }
      while (v19);
    }
    else if (v407)
    {
      do
      {
        if (v16) {
          LODWORD(a1) = memset(v33, 255, v16);
        }
        v33 += v32;
        --v19;
      }
      while (v19);
    }
  }
  return (int)a1;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf_GCD);
  return 0;
}

char *vt_Copy_420vf_TRC_Tone_Mat_TRC_422vf_GCD(char *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    size_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 36);
    uint64_t v13 = *(void *)(result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = *((void *)result + 14);
    uint64_t v16 = (void *)*((void *)result + 16);
    uint64_t v17 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7);
    uint64_t v18 = *((void *)result + 19);
    uint64_t v19 = (void *)*((void *)result + 7);
    uint64_t v20 = (uint64_t *)*((void *)result + 8);
    uint64_t v21 = (uint64_t *)*((void *)result + 17);
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v214 = v20[2];
    uint64_t v217 = v19[2];
    uint64_t v24 = (char *)(v217 + v214 * v13 + v12);
    uint64_t v25 = *v21;
    uint64_t v26 = v21[1];
    uint64_t v215 = v21[2];
    uint64_t v216 = v16[2];
    uint64_t v27 = (char *)(v216 + v215 * v17 + v15);
    float v28 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    float v29 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v30 = (float)LODWORD(a5);
    float v31 = v28 * *(float *)v18;
    float v240 = v28 * *(float *)(v18 + 16);
    float v241 = v28 * *(float *)(v18 + 8);
    float v32 = v28 * *(float *)(v18 + 20);
    *(float *)&unsigned int v33 = v28 * *(float *)(v18 + 28);
    float v238 = *(float *)&v33;
    float v239 = v32;
    LOWORD(v33) = *(_WORD *)(v18 + 144);
    float v34 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 146);
    float v35 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 148);
    float v36 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 150);
    float v37 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v18 + 152);
    float v38 = (float)v33;
    float v235 = *(float *)(v18 + 40);
    float v236 = *(float *)(v18 + 36);
    float v233 = *(float *)(v18 + 48) * 0.5;
    float v234 = *(float *)(v18 + 44);
    float v231 = *(float *)(v18 + 56) * 0.5;
    float v232 = *(float *)(v18 + 52) * 0.5;
    float v39 = *(float *)(v18 + 60) * 0.5;
    float v229 = *(float *)(v18 + 76);
    float v230 = *(float *)(v18 + 72);
    float v227 = *(float *)(v18 + 84);
    float v228 = *(float *)(v18 + 80);
    float v225 = *(float *)(v18 + 92);
    float v226 = *(float *)(v18 + 88);
    float v223 = *(float *)(v18 + 100);
    float v224 = *(float *)(v18 + 96);
    float v40 = *(float *)(v18 + 104);
    float v222 = v40;
    uint64_t v41 = v18 + 164;
    uint64_t v42 = v16[1];
    float v43 = (unsigned char *)(*v16 + *v21 * v17 + v15);
    uint64_t result = (char *)(v42 + v26 * v17 + v15);
    uint64_t v44 = v18 + 16548;
    if (!v42) {
      uint64_t result = 0;
    }
    uint64_t v45 = *v19 + v22 * v13;
    uint64_t v46 = v19[1] + v20[1] * (v13 / 2);
    uint64_t v47 = v18 + 32932;
    float v48 = (unsigned char *)(v45 + v12);
    uint64_t v49 = v46 + v12;
    float v50 = *(float *)(v18 + 108);
    float v51 = *(float *)(v18 + 112);
    float v53 = *(float *)(v18 + 116);
    float v52 = *(float *)(v18 + 120);
    float v243 = (float)LODWORD(a5);
    float v244 = v29;
    float v242 = v31;
    float v237 = v35;
    float v220 = v51;
    float v221 = v50;
    float v218 = *(float *)(v18 + 64) * 0.5;
    float v219 = *(float *)(v18 + 68) * 0.5;
    do
    {
      float16x8_t v54 = &v48[v22];
      int32x2_t v55 = &result[v26];
      float32x4_t v56 = &v43[v25];
      if (v11)
      {
        size_t v57 = 0;
        float16x8_t v58 = &v48[v22];
        int32x4_t v59 = &v43[v25];
        do
        {
          LOBYTE(v40) = *(unsigned char *)(v49 + v57 + 1);
          float v60 = (float)LODWORD(v40) - v30;
          unsigned int v61 = LODWORD(v241);
          float v62 = v241 * v60;
          LOBYTE(v61) = *v48;
          float v63 = v31 * (float)((float)v61 - v29);
          float v64 = (float)(v241 * v60) + v63;
          float v65 = 8191.0;
          if (v64 <= 8191.0)
          {
            float v65 = (float)(v241 * v60) + v63;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          LOBYTE(v64) = *(unsigned char *)(v49 + v57);
          float v66 = (float)LODWORD(v64) - v30;
          float v67 = (float)(v239 * v60) + (float)(v66 * v240);
          float v68 = 8191.0;
          if ((float)(v63 + v67) <= 8191.0)
          {
            float v68 = v63 + v67;
            if ((float)(v63 + v67) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v238 * v66;
          float v70 = (float)(v238 * v66) + v63;
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          LOBYTE(v70) = v48[1];
          float v72 = v31 * (float)((float)LODWORD(v70) - v29);
          float v73 = 8191.0;
          if ((float)(v62 + v72) <= 8191.0)
          {
            float v73 = v62 + v72;
            if ((float)(v62 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = 8191.0;
          if ((float)(v67 + v72) <= 8191.0)
          {
            float v74 = v67 + v72;
            if ((float)(v67 + v72) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v69 + v72;
          BOOL v76 = (float)(v69 + v72) <= 8191.0;
          float v77 = 8191.0;
          if (v76)
          {
            float v77 = v75;
            if (v75 < 0.0) {
              float v77 = 0.0;
            }
          }
          LOBYTE(v75) = *v58;
          float v78 = v31 * (float)((float)LODWORD(v75) - v29);
          float v79 = 8191.0;
          if ((float)(v62 + v78) <= 8191.0)
          {
            float v79 = v62 + v78;
            if ((float)(v62 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = 8191.0;
          if ((float)(v67 + v78) <= 8191.0)
          {
            float v80 = v67 + v78;
            if ((float)(v67 + v78) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v69 + v78;
          BOOL v76 = (float)(v69 + v78) <= 8191.0;
          float v82 = 8191.0;
          if (v76)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          LOBYTE(_S23) = v58[1];
          float v83 = v31 * (float)((float)LODWORD(_S23) - v29);
          float v84 = v62 + v83;
          BOOL v76 = (float)(v62 + v83) <= 8191.0;
          float v85 = 8191.0;
          if (v76)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v67 + v83;
          BOOL v76 = (float)(v67 + v83) <= 8191.0;
          float v87 = 8191.0;
          if (v76)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v69 + v83;
          float v89 = 8191.0;
          if (v88 <= 8191.0)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v41 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          float v109 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v110 = (float)((float)((float)(v51 * _S24) + (float)(v50 * _S2)) + (float)(v53 * _S25)) + (float)(v52 * v109);
          float v111 = 8191.0;
          if (v110 <= 8191.0)
          {
            float v111 = (float)((float)((float)(v51 * _S24) + (float)(v50 * _S2)) + (float)(v53 * _S25))
                 + (float)(v52 * v109);
            if (v110 < 0.0) {
              float v111 = 0.0;
            }
          }
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *(_WORD *)(v44 + 2 * llroundf(v111));
          float v116 = (float)((float)((float)(v51 * _S28) + (float)(v50 * _S26)) + (float)(v53 * _S30))
               + (float)(v52 * fmaxf(_S26, fmaxf(_S28, _S30)));
          float v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            float v117 = v116;
            if (v116 < 0.0) {
              float v117 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *(_WORD *)(v44 + 2 * llroundf(v117));
          float v122 = v52;
          float v123 = (float)((float)((float)(v51 * _S10) + (float)(v50 * _S9)) + (float)(v53 * _S11))
               + (float)(v52 * fmaxf(_S9, fmaxf(_S10, _S11)));
          float v124 = 8191.0;
          if (v123 <= 8191.0)
          {
            float v124 = v123;
            if (v123 < 0.0) {
              float v124 = 0.0;
            }
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          float v129 = _S2 * _S1;
          float v130 = _S24 * _S1;
          float v131 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          float v133 = _S26 * _S1;
          float v134 = _S28 * _S1;
          float v135 = _S30 * _S1;
          LOWORD(_S1) = *(_WORD *)(v44 + 2 * llroundf(v124));
          __asm { FCVT            S2, H1 }
          float v137 = _S9 * _S2;
          float v138 = _S10 * _S2;
          float v139 = _S11 * _S2;
          float v140 = (float)((float)((float)(v51 * _S31) + (float)(v50 * _S29)) + (float)(v53 * _S8))
               + (float)(v122 * fmaxf(_S29, fmaxf(_S31, _S8)));
          float v141 = 8191.0;
          if (v140 <= 8191.0)
          {
            float v141 = v140;
            if (v140 < 0.0) {
              float v141 = 0.0;
            }
          }
          _H25 = *(_WORD *)(v44 + 2 * llroundf(v141));
          __asm { FCVT            S25, H25 }
          float v144 = _S29 * _S25;
          float v145 = _S31 * _S25;
          float v146 = _S8 * _S25;
          float v147 = (float)((float)(v229 * v130) + (float)(v129 * v230)) + (float)(v131 * v228);
          float v148 = (float)((float)(v226 * v130) + (float)(v129 * v227)) + (float)(v131 * v225);
          _S23 = (float)((float)(v223 * v130) + (float)(v129 * v224)) + (float)(v131 * v222);
          float v150 = (float)((float)(v226 * v134) + (float)(v133 * v227)) + (float)(v135 * v225);
          unsigned int v151 = llroundf(fminf(fmaxf(_S23, 0.0), 8191.0));
          unsigned int v152 = llroundf(fminf(fmaxf((float)((float)(v229 * v134) + (float)(v133 * v230)) + (float)(v135 * v228), 0.0), 8191.0));
          LOWORD(_S23) = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          __asm
          {
            FCVT            S23, H23
            FCVT            S24, H24
          }
          unsigned int v156 = llroundf(fminf(fmaxf((float)((float)(v223 * v134) + (float)(v133 * v224)) + (float)(v135 * v222), 0.0), 8191.0));
          _H17 = *(_WORD *)(v47 + 2 * v151);
          unsigned int v158 = llroundf(fminf(fmaxf((float)((float)(v229 * v138) + (float)(v137 * v230)) + (float)(v139 * v228), 0.0), 8191.0));
          __asm { FCVT            S17, H17 }
          _H21 = *(_WORD *)(v47 + 2 * v152);
          __asm { FCVT            S21, H21 }
          unsigned int v162 = llroundf(fminf(fmaxf((float)((float)(v226 * v138) + (float)(v137 * v227)) + (float)(v139 * v225), 0.0), 8191.0));
          _H22 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          __asm { FCVT            S22, H22 }
          unsigned int v165 = llroundf(fminf(fmaxf((float)((float)(v223 * v138) + (float)(v137 * v224)) + (float)(v139 * v222), 0.0), 8191.0));
          _H1 = *(_WORD *)(v47 + 2 * v156);
          __asm { FCVT            S1, H1 }
          unsigned int v168 = llroundf(fminf(fmaxf((float)((float)(v229 * v145) + (float)(v144 * v230)) + (float)(v146 * v228), 0.0), 8191.0));
          _H2 = *(_WORD *)(v47 + 2 * v158);
          unsigned int v170 = llroundf(fminf(fmaxf((float)((float)(v226 * v145) + (float)(v144 * v227)) + (float)(v146 * v225), 0.0), 8191.0));
          unsigned int v171 = llroundf(fminf(fmaxf((float)((float)(v223 * v145) + (float)(v144 * v224)) + (float)(v146 * v222), 0.0), 8191.0));
          float v172 = (float)((float)((float)(v235 * _S24) + (float)(v236 * _S23)) + (float)(v234 * _S17)) + v34;
          if (v172 < v34) {
            float v173 = v34;
          }
          else {
            float v173 = (float)((float)((float)(v235 * _S24) + (float)(v236 * _S23)) + (float)(v234 * _S17)) + v34;
          }
          BOOL v76 = v172 <= v36;
          float v174 = (float)((float)((float)(v235 * _S22) + (float)(v236 * _S21)) + (float)(v234 * _S1)) + v34;
          if (!v76) {
            float v173 = v36;
          }
          char v175 = llroundf(v173);
          if (v174 < v34) {
            float v176 = v34;
          }
          else {
            float v176 = (float)((float)((float)(v235 * _S22) + (float)(v236 * _S21)) + (float)(v234 * _S1)) + v34;
          }
          if (v174 <= v36) {
            float v177 = v176;
          }
          else {
            float v177 = v36;
          }
          char v178 = llroundf(v177);
          _H3 = *(_WORD *)(v47 + 2 * v162);
          __asm
          {
            FCVT            S2, H2
            FCVT            S3, H3
          }
          float v182 = _S23 + _S21;
          _H23 = *(_WORD *)(v47 + 2 * v165);
          __asm { FCVT            S23, H23 }
          _S22 = _S24 + _S22;
          _H24 = *(_WORD *)(v47 + 2 * v168);
          __asm { FCVT            S24, H24 }
          float v187 = _S17 + _S1;
          float v188 = (float)(v237 + (float)(v182 * v233)) + (float)(_S22 * v232);
          float v189 = (float)(v237 + (float)(v182 * v39)) + (float)(_S22 * v218);
          LOWORD(_S22) = *(_WORD *)(v47 + 2 * v170);
          __asm { FCVT            S22, H22 }
          float v191 = v188 + (float)(v187 * v231);
          float v192 = v189 + (float)(v187 * v219);
          if (v191 < v37) {
            float v193 = v37;
          }
          else {
            float v193 = v191;
          }
          _H17 = *(_WORD *)(v47 + 2 * v171);
          __asm { FCVT            S17, H17 }
          if (!(_NF ^ _VF | _ZF)) {
            float v193 = v38;
          }
          char v196 = llroundf(v193);
          if (v192 < v37) {
            float v197 = v37;
          }
          else {
            float v197 = v192;
          }
          if (v192 <= v38) {
            float v198 = v197;
          }
          else {
            float v198 = v38;
          }
          char v199 = llroundf(v198);
          float v200 = (float)((float)((float)(v235 * _S3) + (float)(v236 * _S2)) + (float)(v234 * _S23)) + v34;
          if (v200 < v34) {
            float v201 = v34;
          }
          else {
            float v201 = (float)((float)((float)(v235 * _S3) + (float)(v236 * _S2)) + (float)(v234 * _S23)) + v34;
          }
          BOOL v76 = v200 <= v36;
          float v202 = (float)((float)((float)(v235 * _S22) + (float)(v236 * _S24)) + (float)(v234 * _S17)) + v34;
          if (!v76) {
            float v201 = v36;
          }
          char v203 = llroundf(v201);
          if (v202 < v34) {
            float v204 = v34;
          }
          else {
            float v204 = (float)((float)((float)(v235 * _S22) + (float)(v236 * _S24)) + (float)(v234 * _S17)) + v34;
          }
          if (v202 <= v36) {
            float v205 = v204;
          }
          else {
            float v205 = v36;
          }
          char v206 = llroundf(v205);
          float v207 = _S2 + _S24;
          unsigned char *v43 = v175;
          v43[1] = v178;
          result[v57 + 1] = v199;
          result[v57] = v196;
          *int32x4_t v59 = v203;
          v59[1] = v206;
          float v208 = _S3 + _S22;
          float v209 = (float)(v237 + (float)(v207 * v233)) + (float)((float)(_S3 + _S22) * v232);
          float v210 = _S23 + _S17;
          float v211 = v209 + (float)((float)(_S23 + _S17) * v231);
          float v212 = v38;
          if (v211 <= v38)
          {
            float v212 = v211;
            if (v211 < v37) {
              float v212 = v37;
            }
          }
          float v213 = (float)((float)(v237 + (float)(v207 * v39)) + (float)(v208 * v218)) + (float)(v210 * v219);
          v55[v57] = llroundf(v212);
          float v40 = v38;
          float v29 = v244;
          float v31 = v242;
          if (v213 <= v38)
          {
            float v40 = v213;
            if (v213 < v37) {
              float v40 = v37;
            }
          }
          v48 += 2;
          v58 += 2;
          v43 += 2;
          v59 += 2;
          v55[v57 + 1] = llroundf(v40);
          v57 += 2;
          float v30 = v243;
          float v51 = v220;
          float v50 = v221;
          float v52 = v122;
        }
        while (v11 > v57);
      }
      float v48 = &v54[v22];
      v49 += v23;
      float v43 = &v56[v25];
      uint64_t result = &v55[v26];
      v10 += 2;
    }
    while (v14 > v10);
    if (v217 && v216)
    {
      do
      {
        uint64_t result = (char *)memcpy(v27, v24, v11);
        v24 += v214;
        v27 += v215;
        --v14;
      }
      while (v14);
    }
    else if (v216)
    {
      do
      {
        if (v11) {
          uint64_t result = (char *)memset(v27, 255, v11);
        }
        v27 += v215;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_422vf_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_422vf_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, __n128 _Q6, double a10)
{
  uint64_t v17 = *(void *)(result + 28);
  unint64_t v18 = 2 * *result;
  unint64_t v19 = v17 * a2 / v18;
  unint64_t v20 = (v17 + v17 * a2) / v18;
  if (2 * v20 != 2 * v19)
  {
    unint64_t v21 = 0;
    size_t v22 = *(void *)(result + 20);
    uint64_t v23 = *(void *)(result + 36);
    uint64_t v24 = *(void *)(result + 44) + 2 * v19;
    unint64_t v25 = 2 * v20 - 2 * v19;
    uint64_t v26 = *((void *)result + 14);
    unint64_t v27 = *((void *)result + 13) * a2 / v18;
    uint64_t v28 = (void *)*((void *)result + 16);
    uint64_t v29 = *((void *)result + 15) + 2 * v27;
    uint64_t v30 = (float32x2_t *)*((void *)result + 19);
    uint64_t v31 = (void *)*((void *)result + 7);
    uint64_t v32 = (uint64_t *)*((void *)result + 8);
    uint64_t v33 = (uint64_t *)*((void *)result + 17);
    uint64_t v34 = *v32;
    uint64_t v35 = v32[1];
    uint64_t v36 = v32[2];
    uint64_t v368 = v31[2];
    uint64_t v37 = *v33;
    uint64_t v38 = v33[1];
    uint64_t v39 = v33[2];
    uint64_t v367 = v28[2];
    uint64_t v40 = (char *)(v367 + v39 * v29 + v26);
    LODWORD(v32) = v30[17].u16[2];
    unsigned int v41 = v30[17].u16[3];
    v42.i32[0] = v30[3].i32[1];
    LODWORD(a3) = 1174403072;
    LODWORD(v33) = v30[18].u16[0];
    *(short float *)v13.i16 = (short float)v32;
    unsigned int v43 = v30[18].u16[1];
    float v433 = (float)v41;
    float v434 = (float)v32;
    short float v44 = (short float)v41;
    unsigned int v45 = v30[18].u16[2];
    v46.i32[0] = v30[6].i32[0];
    float v426 = v30[5].f32[1];
    v48.i32[0] = v30[6].i32[1];
    v47.i32[0] = v30[7].i32[0];
    v42.i32[1] = v30[1].i32[0];
    v46.i32[1] = v30[7].i32[1];
    v48.i32[1] = v30[8].i32[0];
    v47.i32[1] = v30[8].i32[1];
    LODWORD(v32) = v30[18].u16[3];
    float v49 = (float)v33;
    *(short float *)_Q6.n128_u16 = (short float)v33;
    unsigned int v50 = v30[19].u16[0];
    _S8 = v30[4].i32[1];
    _S30 = v30[5].i32[0];
    LODWORD(_Q12) = v30[9].i32[0];
    float v425 = v30[9].f32[1];
    *(float *)&a10 = (float)v43;
    float v432 = (float)v43;
    *(short float *)&a10 = (short float)v43;
    float v53 = (char *)&v30[20] + 4;
    __src = (char *)(v368 + v36 * v24 + v23);
    float v54 = 8191.0 / (float)v30[16].u32[0];
    float v55 = (float)v45;
    *(float *)v12.i32 = (float)v32;
    float v417 = (float)v32;
    float v56 = (float)v50;
    _S21 = v54 * v30->f32[0];
    *(short float *)v12.i16 = (short float)v45;
    float16x8_t v58 = (char *)&v30[2068] + 4;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(v13, 0);
    *(float32x2_t *)v10.f32 = vmul_n_f32(v42, v54);
    float16x8_t v60 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    *(short float *)v42.i16 = -v44;
    *(float32x2_t *)v16.f32 = vmul_n_f32(v30[2], v54);
    *(double *)&v63.i64[1] = a3;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v16), 0);
    float16x8_t v62 = vmulq_n_f16(v60, -v44);
    *(float32x2_t *)v14.f32 = vmul_f32(v46, (float32x2_t)0x3F0000003F000000);
    int32x4_t v423 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v14), 0);
    *(float32x2_t *)v15.f32 = vmul_f32(v48, (float32x2_t)0x3F0000003F000000);
    int32x4_t v424 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v15), 0);
    *(float32x2_t *)v63.f32 = vmul_f32(v47, (float32x2_t)0x3F0000003F000000);
    float16x8_t v64 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v63), 0);
    float16x8_t v65 = (float16x8_t)vdupq_lane_s16((int16x4_t)_Q6.n128_u64[0], 0);
    float16x8_t v66 = vmulq_n_f16(v61, *(short float *)v42.i16);
    float16x8_t v67 = v62;
    int16x8_t v68 = vdupq_lane_s16(v12, 0);
    float16x8_t v413 = (float16x8_t)v68;
    float16x8_t v414 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)&a10, 0);
    *(short float *)v68.i16 = (short float)v32;
    int16x8_t v69 = vdupq_lane_s16(*(int16x4_t *)v68.i8, 0);
    float16x8_t v412 = (float16x8_t)v69;
    *(short float *)v69.i16 = (short float)v50;
    float16x8_t v70 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v69.i8, 0);
    uint64_t v71 = v28[1];
    if (v71) {
      float v72 = (unsigned char *)(v71 + v38 * v29 + v26);
    }
    else {
      float v72 = 0;
    }
    float v73 = (int8x8_t *)(*v28 + v37 * v29 + v26);
    if (v24 >= 0) {
      uint64_t v74 = v24;
    }
    else {
      uint64_t v74 = v24 + 1;
    }
    float v75 = (unsigned __int8 *)(v31[1] + v35 * (v74 >> 1) + v23);
    BOOL v76 = (int8x8_t *)(*v31 + v34 * v24 + v23);
    uint64_t v372 = *(void *)(result + 20) & 0xFFFFFFF8;
    float v77 = &v72[v38];
    uint64_t v383 = 2 * v38;
    _D1.i32[0] = v30[10].i32[0];
    _Q6.n128_u32[0] = v30[10].u32[1];
    __asm { FCVT            H14, S21 }
    float v422 = v30[4].f32[1];
    __asm { FCVT            H5, S8 }
    short float v401 = _H5;
    float v421 = v30[5].f32[0];
    __asm { FCVT            H5, S30 }
    _S3 = v30[5].i32[1];
    __asm { FCVT            H3, S3 }
    short float v399 = *(short float *)&_S3;
    float v420 = v30[9].f32[0];
    __asm { FCVT            H3, S12 }
    _S22 = v30[9].i32[1];
    __asm { FCVT            H8, S22 }
    float v410 = *(float *)_D1.i32;
    __asm { FCVT            H1, S1 }
    float v409 = _Q6.n128_f32[0];
    __asm { FCVT            H6, S6 }
    float v408 = v30[11].f32[0];
    __asm { FCVT            H7, S7 }
    float v407 = v30[11].f32[1];
    __asm { FCVT            H12, S17 }
    long long v393 = _Q12;
    float v406 = v30[12].f32[0];
    __asm { FCVT            H12, S9 }
    short float v91 = _H14;
    float v405 = v30[12].f32[1];
    __asm { FCVT            H13, S13 }
    float v403 = v30[13].f32[0];
    __asm { FCVT            H15, S15 }
    float v419 = v16.f32[0];
    float16x8_t v94 = v60;
    float v389 = v16.f32[1];
    float v418 = v15.f32[0];
    uint64_t v95 = v14.i64[0];
    float16x8_t v96 = (float16x8_t)v423;
    float v431 = v15.f32[1];
    float16x8_t v97 = (float16x8_t)v424;
    uint64_t v98 = v63.i64[0];
    v99.i64[0] = 0x9000900090009000;
    v99.i64[1] = 0x9000900090009000;
    float16x8_t v384 = v70;
    short float v400 = _H5;
    short float v397 = _H8;
    short float v398 = *(short float *)&_S3;
    __n128 v395 = _Q6;
    short float v396 = *(short float *)_D1.i16;
    unint64_t v380 = v25;
    size_t v381 = *(void *)(result + 20);
    short float v378 = v40;
    uint64_t v379 = v39;
    uint64_t v376 = v34;
    uint64_t v377 = v36;
    uint64_t v374 = v37;
    uint64_t v375 = v35;
    uint64_t v373 = v38;
    float16x8_t v415 = v64;
    float16x8_t v416 = v65;
    int v411 = v22 - 7;
    float16x8_t v404 = v67;
    float16x8_t v402 = v61;
    short float v394 = _H7;
    short float v391 = _H13;
    short float v392 = _H12;
    short float v390 = _H15;
    float16x8_t v388 = v60;
    float v371 = (float)v45;
    float16x8_t v429 = v66;
    float v369 = (float)v50;
    float v370 = _S21;
    do
    {
      short float v430 = v77;
      int16x8_t v100 = (int8x8_t *)((char *)v76 + v34);
      int8x16_t v101 = (int8x8_t *)((char *)v73 + v37);
      int16x8_t v102 = &v72[v38];
      float v386 = (char *)v73 + v37;
      float16x8_t v387 = &v72[v38];
      float v385 = (char *)v76 + v34;
      if ((int)v22 < 8)
      {
        size_t v240 = 0;
        uint64_t result = v75;
        float16x8_t v241 = v66;
      }
      else
      {
        unint64_t v382 = v21;
        uint64_t v103 = 0;
        short float v427 = v72;
        short float v428 = v75;
        do
        {
          int8x8_t v104 = *(int8x8_t *)&v75[v103];
          *(int8x8_t *)v105.i8 = vzip1_s8(v104, 0);
          v105.u64[1] = (unint64_t)vzip2_s8(v104, 0);
          float16x8_t v106 = vcvtq_f16_u16(v105);
          int16x8_t v107 = (int16x8_t)vmlaq_f16(v67, v94, v106);
          int8x16_t v108 = (int8x16_t)vmlaq_f16(v429, v61, v106);
          v106.i64[0] = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u64[0];
          *(int16x4_t *)v109.i8 = vuzp1_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v106.i8);
          *(int16x4_t *)v106.i8 = vuzp2_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v106.i8);
          *(double *)&v106.i64[1] = a3;
          v107.i64[0] = vextq_s8(v108, v108, 8uLL).u64[0];
          *(double *)&v109.i64[1] = a3;
          int8x8_t v110 = *v76++;
          *(int8x8_t *)v111.i8 = vzip1_s8(v110, 0);
          *(float16x4_t *)v107.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v107.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v107.i8));
          v111.u64[1] = (unint64_t)vzip2_s8(v110, 0);
          int8x8_t v112 = *v100++;
          *(double *)&v107.i64[1] = a3;
          float16x8_t v113 = (float16x8_t)vzip1q_s16((int16x8_t)v106, (int16x8_t)v106);
          *(int8x8_t *)v106.i8 = vzip1_s8(v112, 0);
          v106.u64[1] = (unint64_t)vzip2_s8(v112, 0);
          float16x8_t v114 = (float16x8_t)vzip1q_s16(v107, v107);
          float16x8_t v115 = vsubq_f16(vcvtq_f16_u16(v111), v59);
          float16x8_t v116 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v106), v59);
          float16x8_t v117 = (float16x8_t)vzip1q_s16(v109, v109);
          float16x8_t v118 = vmlaq_n_f16(v113, v115, v91);
          float16x8_t v119 = vmlaq_n_f16(v113, v116, v91);
          float16x8_t v120 = v114;
          float16x8_t v121 = vmlaq_n_f16(v114, v116, v91);
          float16x8_t v122 = vmlaq_n_f16(v120, v115, v91);
          float16x8_t v123 = vmlaq_n_f16(v117, v115, v91);
          float16x8_t v124 = vmlaq_n_f16(v117, v116, v91);
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v99));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          uint64_t v128 = v127.u32[1];
          uint64_t v129 = v127.u32[3];
          v130.i16[0] = *(_WORD *)&v53[2 * v127.u32[0]];
          uint64_t v131 = v126.u32[1];
          uint64_t v132 = v126.u32[3];
          float v133 = (__int16 *)&v53[2 * v127.u32[2]];
          uint64_t v134 = v126.u32[2];
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v99));
          uint32x4_t v136 = (__int16 *)&v53[2 * v126.u32[0]];
          uint32x4_t v137 = vmovl_high_u16(v135);
          v138.i64[0] = v137.u32[2];
          v138.i64[1] = v137.u32[3];
          float16x8_t v139 = v138;
          v138.i64[0] = v137.u32[0];
          v138.i64[1] = v137.u32[1];
          float16x8_t v140 = v138;
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v135.i8);
          v138.i64[0] = v141.u32[2];
          v138.i64[1] = v141.u32[3];
          float16x8_t v142 = v138;
          uint64_t v143 = v141.u32[1];
          v144.i16[0] = *(_WORD *)&v53[2 * v141.u32[0]];
          uint64_t v145 = v140.i64[1];
          float v146 = (__int16 *)&v53[2 * v140.i64[0]];
          uint16x8_t v147 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, (float16x8_t)0), v99));
          uint32x4_t v148 = vmovl_high_u16(v147);
          uint32x4_t v149 = vmovl_u16(*(uint16x4_t *)v147.i8);
          float v150 = (__int16 *)&v53[2 * v131];
          v151.i16[0] = *(_WORD *)&v53[2 * v149.u32[0]];
          unsigned int v152 = (__int16 *)&v53[2 * v132];
          float v153 = (__int16 *)&v53[2 * v149.u32[1]];
          v130.i16[1] = *(_WORD *)&v53[2 * v128];
          float v154 = (__int16 *)&v53[2 * v149.u32[2]];
          uint16x8_t v155 = (__int16 *)&v53[2 * v149.u32[3]];
          unsigned int v156 = (__int16 *)&v53[2 * v143];
          uint32x4_t v157 = (__int16 *)&v53[2 * v148.u32[0]];
          unsigned int v158 = (__int16 *)&v53[2 * v148.u32[1]];
          float v159 = (__int16 *)&v53[2 * v148.u32[2]];
          float v160 = (__int16 *)&v53[2 * v148.u32[3]];
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v99));
          uint32x4_t v162 = vmovl_high_u16(v161);
          v138.i64[0] = v162.u32[2];
          v138.i64[1] = v162.u32[3];
          float16x8_t v163 = v138;
          v138.i64[0] = v162.u32[0];
          uint32x4_t v164 = vmovl_u16(*(uint16x4_t *)v161.i8);
          v151.i16[1] = *v153;
          v165.i16[0] = *(_WORD *)&v53[2 * v164.u32[0]];
          v130.i16[2] = *v133;
          v144.i16[1] = *v156;
          v151.i16[2] = *v154;
          v165.i16[1] = *(_WORD *)&v53[2 * v164.u32[1]];
          v130.i16[3] = *(_WORD *)&v53[2 * v129];
          float16x8_t v166 = (__int16 *)&v53[2 * v162.u32[1]];
          float16x8_t v167 = (__int16 *)&v53[2 * v163.i64[0]];
          unsigned int v168 = (__int16 *)&v53[2 * v163.i64[1]];
          v144.i16[2] = *(_WORD *)&v53[2 * v142.i64[0]];
          v165.i16[2] = *(_WORD *)&v53[2 * v164.u32[2]];
          v165.i16[3] = *(_WORD *)&v53[2 * v164.u32[3]];
          v151.i16[3] = *v155;
          uint16x8_t v169 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v99));
          float16x8_t v170 = (float16x8_t)vmovl_high_u16(v169);
          v165.i16[4] = *(_WORD *)&v53[2 * v138.i64[0]];
          v138.i64[0] = v170.u32[2];
          v138.i64[1] = v170.u32[3];
          float16x8_t v171 = v138;
          v138.i64[0] = v170.u32[0];
          v138.i64[1] = v170.u32[1];
          uint32x4_t v172 = vmovl_u16(*(uint16x4_t *)v169.i8);
          v130.i16[4] = *v136;
          v144.i16[3] = *(_WORD *)&v53[2 * v142.i64[1]];
          v170.i16[0] = *(_WORD *)&v53[2 * v172.u32[0]];
          v151.i16[4] = *v157;
          v165.i16[5] = *v166;
          v130.i16[5] = *v150;
          v144.i16[4] = *v146;
          float v173 = (__int16 *)&v53[2 * v171.i64[0]];
          float v174 = (__int16 *)&v53[2 * v171.i64[1]];
          v170.i16[1] = *(_WORD *)&v53[2 * v172.u32[1]];
          v151.i16[5] = *v158;
          v170.i16[2] = *(_WORD *)&v53[2 * v172.u32[2]];
          v170.i16[3] = *(_WORD *)&v53[2 * v172.u32[3]];
          v165.i16[6] = *v167;
          v170.i16[4] = *(_WORD *)&v53[2 * v138.i64[0]];
          v170.i16[5] = *(_WORD *)&v53[2 * v138.i64[1]];
          uint16x8_t v175 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v99));
          uint32x4_t v176 = vmovl_high_u16(v175);
          v130.i16[6] = *(_WORD *)&v53[2 * v134];
          uint32x4_t v177 = vmovl_u16(*(uint16x4_t *)v175.i8);
          v144.i16[5] = *(_WORD *)&v53[2 * v145];
          v142.i16[0] = *(_WORD *)&v53[2 * v177.u32[0]];
          v151.i16[6] = *v159;
          v165.i16[7] = *v168;
          v170.i16[6] = *v173;
          v130.i16[7] = *v152;
          v144.i16[6] = *(_WORD *)&v53[2 * v139.i64[0]];
          v142.i16[1] = *(_WORD *)&v53[2 * v177.u32[1]];
          v142.i16[2] = *(_WORD *)&v53[2 * v177.u32[2]];
          v151.i16[7] = *v160;
          v142.i16[3] = *(_WORD *)&v53[2 * v177.u32[3]];
          v142.i16[4] = *(_WORD *)&v53[2 * v176.u32[0]];
          v144.i16[7] = *(_WORD *)&v53[2 * v139.i64[1]];
          v142.i16[5] = *(_WORD *)&v53[2 * v176.u32[1]];
          v142.i16[6] = *(_WORD *)&v53[2 * v176.u32[2]];
          v170.i16[7] = *v174;
          v142.i16[7] = *(_WORD *)&v53[2 * v176.u32[3]];
          v121.i16[7] = v395.n128_i16[7];
          float16x8_t v178 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v130, v398), v144, v397), v151, v396);
          float16x8_t v179 = vmlaq_n_f16(vmulq_n_f16(v130, *(short float *)v395.n128_u16), v144, v394);
          float16x8_t v180 = vmlaq_n_f16(vmulq_n_f16(v151, v390), v144, v391);
          v144.i16[7] = HIWORD(v393);
          float16x8_t v181 = vmlaq_n_f16(v179, v151, *(short float *)&v393);
          float16x8_t v182 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v165, v398), v170, v397), v142, v396);
          float16x8_t v183 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v165, *(short float *)v395.n128_u16), v170, v394), v142, *(short float *)&v393);
          float16x8_t v184 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v142, v390), v170, v391), v165, v392);
          uint16x8_t v185 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v178, (float16x8_t)0), v99));
          uint32x4_t v186 = vmovl_high_u16(v185);
          uint32x4_t v187 = vmovl_u16(*(uint16x4_t *)v185.i8);
          v111.i64[0] = v187.u32[0];
          uint64_t v188 = v187.u32[1];
          uint64_t v189 = v187.u32[3];
          uint64_t v190 = v186.u32[1];
          uint64_t v191 = v187.u32[2];
          uint64_t v192 = v186.u32[0];
          uint64_t v193 = v186.u32[3];
          uint16x8_t v194 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v181, (float16x8_t)0), v99));
          uint32x4_t v195 = vmovl_high_u16(v194);
          uint32x4_t v196 = vmovl_u16(*(uint16x4_t *)v194.i8);
          uint64_t v197 = v186.u32[2];
          v142.i64[0] = v196.u32[2];
          uint64_t v198 = v196.u32[1];
          uint64_t v199 = v196.u32[3];
          uint64_t v200 = v196.u32[0];
          uint64_t v201 = v195.u32[1];
          v144.i16[0] = *(_WORD *)&v58[2 * v111.i64[0]];
          uint64_t v202 = v195.u32[0];
          uint64_t v203 = v195.u32[3];
          uint64_t v204 = v195.u32[2];
          uint16x8_t v205 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v180, v130, v392), (float16x8_t)0), v99));
          uint32x4_t v206 = vmovl_high_u16(v205);
          v138.i64[0] = v206.u32[2];
          v138.i64[1] = v206.u32[3];
          v121.i16[0] = *(_WORD *)&v58[2 * v200];
          uint32x4_t v207 = vmovl_u16(*(uint16x4_t *)v205.i8);
          uint64_t v208 = v207.u32[1];
          float v209 = (__int16 *)&v58[2 * v142.i64[0]];
          v130.i16[0] = *(_WORD *)&v58[2 * v207.u32[0]];
          uint64_t v210 = v207.u32[3];
          float v211 = (__int16 *)&v58[2 * v207.u32[2]];
          uint64_t v212 = v206.u32[1];
          uint64_t v213 = v206.u32[0];
          uint16x8_t v214 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v182, (float16x8_t)0), v99));
          uint32x4_t v215 = vmovl_u16(*(uint16x4_t *)v214.i8);
          v144.i16[1] = *(_WORD *)&v58[2 * v188];
          v182.i16[0] = *(_WORD *)&v58[2 * v215.u32[0]];
          uint64_t v216 = v138.i64[1];
          v121.i16[1] = *(_WORD *)&v58[2 * v198];
          v130.i16[1] = *(_WORD *)&v58[2 * v208];
          v182.i16[1] = *(_WORD *)&v58[2 * v215.u32[1]];
          v182.i16[2] = *(_WORD *)&v58[2 * v215.u32[2]];
          uint32x4_t v217 = vmovl_high_u16(v214);
          v144.i16[2] = *(_WORD *)&v58[2 * v191];
          uint16x8_t v218 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v183, (float16x8_t)0), v99));
          uint32x4_t v219 = vmovl_u16(*(uint16x4_t *)v218.i8);
          v121.i16[2] = *v209;
          v180.i16[7] = (unint64_t)v219.u32[1] >> 48;
          v130.i16[2] = *v211;
          v180.i16[0] = *(_WORD *)&v58[2 * v219.u32[0]];
          v182.i16[3] = *(_WORD *)&v58[2 * v215.u32[3]];
          v144.i16[3] = *(_WORD *)&v58[2 * v189];
          v121.i16[3] = *(_WORD *)&v58[2 * v199];
          v130.i16[3] = *(_WORD *)&v58[2 * v210];
          v182.i16[4] = *(_WORD *)&v58[2 * v217.u32[0]];
          uint32x4_t v220 = vmovl_high_u16(v218);
          v144.i16[4] = *(_WORD *)&v58[2 * v192];
          v180.i16[1] = *(_WORD *)&v58[2 * v219.u32[1]];
          v121.i16[4] = *(_WORD *)&v58[2 * v202];
          v130.i16[4] = *(_WORD *)&v58[2 * v213];
          v180.i16[2] = *(_WORD *)&v58[2 * v219.u32[2]];
          v182.i16[5] = *(_WORD *)&v58[2 * v217.u32[1]];
          float v75 = v428;
          v180.i16[3] = *(_WORD *)&v58[2 * v219.u32[3]];
          v144.i16[5] = *(_WORD *)&v58[2 * v190];
          v180.i16[4] = *(_WORD *)&v58[2 * v220.u32[0]];
          v121.i16[5] = *(_WORD *)&v58[2 * v201];
          v130.i16[5] = *(_WORD *)&v58[2 * v212];
          v180.i16[5] = *(_WORD *)&v58[2 * v220.u32[1]];
          uint64_t v221 = v220.u32[3];
          v182.i16[6] = *(_WORD *)&v58[2 * v217.u32[2]];
          v180.i16[6] = *(_WORD *)&v58[2 * v220.u32[2]];
          v144.i16[6] = *(_WORD *)&v58[2 * v197];
          float v222 = (__int16 *)&v58[2 * v217.u32[3]];
          uint16x8_t v223 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v184, (float16x8_t)0), v99));
          v121.i16[6] = *(_WORD *)&v58[2 * v204];
          uint32x4_t v224 = vmovl_high_u16(v223);
          int16x8_t v225 = (int16x8_t)vmovl_u16(*(uint16x4_t *)v223.i8);
          v138.i64[1] = v225.u32[3];
          v225.i16[7] = (unint64_t)v225.u32[1] >> 48;
          v130.i16[6] = *(_WORD *)&v58[2 * v138.i64[0]];
          float16x8_t v226 = v182;
          v225.i16[0] = *(_WORD *)&v58[2 * v225.u32[0]];
          v226.i16[7] = *v222;
          uint64_t v227 = v224.u32[1];
          uint64_t v228 = v224.u32[0];
          float16x8_t v229 = v144;
          v229.i16[7] = *(_WORD *)&v58[2 * v193];
          float16x8_t v230 = (float16x8_t)vuzp1q_s16((int16x8_t)v144, (int16x8_t)v121);
          v225.i16[1] = *(_WORD *)&v58[2 * v225.u32[1]];
          uint64_t v231 = v224.u32[3];
          v121.i16[7] = *(_WORD *)&v58[2 * v203];
          uint64_t v232 = v224.u32[2];
          float16x8_t v233 = vmlaq_n_f16(vmlaq_n_f16(v65, v229, v401), v121, v400);
          float16x8_t v234 = (float16x8_t)vtrn1q_s16((int16x8_t)v130, (int16x8_t)v130);
          v130.i16[7] = *(_WORD *)&v58[2 * v216];
          v225.i16[2] = *(_WORD *)&v58[2 * v225.u32[2]];
          int16x8_t v235 = (int16x8_t)vaddq_f16(v230, (float16x8_t)vuzp2q_s16((int16x8_t)v229, (int16x8_t)v121));
          float16x8_t v236 = v180;
          v225.i16[3] = *(_WORD *)&v58[2 * v138.i64[1]];
          v225.i16[4] = *(_WORD *)&v58[2 * v228];
          v236.i16[7] = *(_WORD *)&v58[2 * v221];
          v225.i16[5] = *(_WORD *)&v58[2 * v227];
          v225.i16[6] = *(_WORD *)&v58[2 * v232];
          float16x8_t v237 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v414, v96, (float16x8_t)vzip1q_s16(v235, v235)), v97, (float16x8_t)vzip2q_s16(v235, v235)), v64, vaddq_f16(v234, (float16x8_t)vtrn2q_s16((int16x8_t)v130, (int16x8_t)v130)));
          float16x8_t v238 = (float16x8_t)v225;
          v238.i16[7] = *(_WORD *)&v58[2 * v231];
          *v73++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v233, v130, v399), v65), v413)));
          *(int8x8_t *)&v427[v103] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v237, v412), v70)));
          v99.i64[0] = 0x9000900090009000;
          v99.i64[1] = 0x9000900090009000;
          *v101++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v65, v226, v401), v236, v400), v238, v399), v65), v413)));
          int16x8_t v239 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v182, (int16x8_t)v180), (float16x8_t)vuzp2q_s16((int16x8_t)v226, (int16x8_t)v236));
          _D1 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v414, v96, (float16x8_t)vzip1q_s16(v239, v239)), v97, (float16x8_t)vzip2q_s16(v239, v239)), v64, vaddq_f16((float16x8_t)vtrn1q_s16(v225, v225), (float16x8_t)vtrn2q_s16((int16x8_t)v238, (int16x8_t)v238))), v412), v70)));
          *(int8x8_t *)&v430[v103] = _D1;
          v103 += 8;
        }
        while ((int)v103 < v411);
        uint64_t result = &v428[v103];
        float v72 = &v427[v103];
        int16x8_t v102 = &v430[v103];
        size_t v240 = v372;
        uint64_t v38 = v373;
        unint64_t v25 = v380;
        size_t v22 = v381;
        uint64_t v40 = v378;
        uint64_t v39 = v379;
        uint64_t v34 = v376;
        uint64_t v36 = v377;
        unint64_t v21 = v382;
        uint64_t v37 = v374;
        uint64_t v35 = v375;
        float16x8_t v241 = v429;
        _S21 = v370;
        float v55 = v371;
        float v56 = v369;
      }
      for (; v22 > v240; float16x8_t v65 = v416)
      {
        _D1.i8[0] = result[1];
        float v242 = (float)_D1.u32[0] - v433;
        unsigned int v243 = v10.u32[1];
        float v244 = v10.f32[1] * v242;
        LOBYTE(v243) = v76->i8[0];
        float v245 = _S21 * (float)((float)v243 - v434);
        float v246 = (float)(v10.f32[1] * v242) + v245;
        float v247 = 8191.0;
        if (v246 <= 8191.0)
        {
          float v247 = (float)(v10.f32[1] * v242) + v245;
          if (v246 < 0.0) {
            float v247 = 0.0;
          }
        }
        LOBYTE(v246) = *result;
        float v248 = (float)LODWORD(v246) - v433;
        float v249 = (float)(v389 * v242) + (float)(v248 * v419);
        float v250 = 8191.0;
        if ((float)(v245 + v249) <= 8191.0)
        {
          float v250 = v245 + v249;
          if ((float)(v245 + v249) < 0.0) {
            float v250 = 0.0;
          }
        }
        float v251 = v10.f32[0] * v248;
        float v252 = (float)(v10.f32[0] * v248) + v245;
        float v253 = 8191.0;
        if (v252 <= 8191.0)
        {
          float v253 = v252;
          if (v252 < 0.0) {
            float v253 = 0.0;
          }
        }
        LOBYTE(v252) = v76->i8[1];
        float v254 = _S21 * (float)((float)LODWORD(v252) - v434);
        float v255 = 8191.0;
        if ((float)(v244 + v254) <= 8191.0)
        {
          float v255 = v244 + v254;
          if ((float)(v244 + v254) < 0.0) {
            float v255 = 0.0;
          }
        }
        float v256 = 8191.0;
        if ((float)(v249 + v254) <= 8191.0)
        {
          float v256 = v249 + v254;
          if ((float)(v249 + v254) < 0.0) {
            float v256 = 0.0;
          }
        }
        float v257 = v251 + v254;
        BOOL v258 = (float)(v251 + v254) <= 8191.0;
        float v259 = 8191.0;
        if (v258)
        {
          float v259 = v257;
          if (v257 < 0.0) {
            float v259 = 0.0;
          }
        }
        LOBYTE(v257) = v100->i8[0];
        float v260 = _S21 * (float)((float)LODWORD(v257) - v434);
        float v261 = 8191.0;
        if ((float)(v244 + v260) <= 8191.0)
        {
          float v261 = v244 + v260;
          if ((float)(v244 + v260) < 0.0) {
            float v261 = 0.0;
          }
        }
        float v262 = 8191.0;
        if ((float)(v249 + v260) <= 8191.0)
        {
          float v262 = v249 + v260;
          if ((float)(v249 + v260) < 0.0) {
            float v262 = 0.0;
          }
        }
        float v263 = v251 + v260;
        BOOL v258 = (float)(v251 + v260) <= 8191.0;
        float v264 = 8191.0;
        if (v258)
        {
          float v264 = v263;
          if (v263 < 0.0) {
            float v264 = 0.0;
          }
        }
        v99.i8[0] = v100->i8[1];
        *(float *)v99.i32 = _S21 * (float)((float)v99.u32[0] - v434);
        float v265 = v244 + *(float *)v99.i32;
        BOOL v258 = (float)(v244 + *(float *)v99.i32) <= 8191.0;
        float v266 = 8191.0;
        if (v258)
        {
          float v266 = v265;
          if (v265 < 0.0) {
            float v266 = 0.0;
          }
        }
        float16x8_t v267 = v241;
        float v268 = v249 + *(float *)v99.i32;
        BOOL v258 = (float)(v249 + *(float *)v99.i32) <= 8191.0;
        float v269 = 8191.0;
        if (v258)
        {
          float v269 = v268;
          if (v268 < 0.0) {
            float v269 = 0.0;
          }
        }
        float v270 = v251 + *(float *)v99.i32;
        if ((float)(v251 + *(float *)v99.i32) < 0.0) {
          float v271 = 0.0;
        }
        else {
          float v271 = v251 + *(float *)v99.i32;
        }
        if (v270 <= 8191.0) {
          float v272 = v271;
        }
        else {
          float v272 = 8191.0;
        }
        _H17 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v247, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        _H29 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v250, 0.0), 8191.0))];
        __asm { FCVT            S29, H29 }
        _H28 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v253, 0.0), 8191.0))];
        __asm { FCVT            S28, H28 }
        _H31 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v255, 0.0), 8191.0))];
        __asm { FCVT            S31, H31 }
        _H1 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v256, 0.0), 8191.0))];
        _H3 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v259, 0.0), 8191.0))];
        __asm
        {
          FCVT            S1, H1
          FCVT            S3, H3
        }
        _H5 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v261, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        _H16 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v262, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        _H7 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v264, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H8 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v266, 0.0), 8191.0))];
        __asm { FCVT            S8, H8 }
        _H12 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v269, 0.0), 8191.0))];
        __asm { FCVT            S12, H12 }
        unsigned int v295 = llroundf(fminf(fmaxf(v272, 0.0), 8191.0));
        _S6 = (float)((float)(v425 * _S29) + (float)(_S17 * v420)) + (float)(_S28 * v410);
        float v297 = (float)((float)(v408 * _S29) + (float)(_S17 * v409)) + (float)(_S28 * v407);
        _S17 = (float)((float)(v405 * _S29) + (float)(_S17 * v406)) + (float)(_S28 * v403);
        float v299 = (float)((float)(v425 * _S1) + (float)(_S31 * v420)) + (float)(_S3 * v410);
        float v300 = (float)((float)(v408 * _S1) + (float)(_S31 * v409)) + (float)(_S3 * v407);
        _S1 = (float)((float)(v405 * _S1) + (float)(_S31 * v406)) + (float)(_S3 * v403);
        _S3 = (float)((float)(v425 * _S16) + (float)(_S5 * v420)) + (float)(_S7 * v410);
        float v303 = (float)((float)(v408 * _S16) + (float)(_S5 * v409)) + (float)(_S7 * v407);
        _S5 = (float)((float)(v405 * _S16) + (float)(_S5 * v406)) + (float)(_S7 * v403);
        _S7 = (float)(v425 * _S12) + (float)(_S8 * v420);
        float v306 = (float)(v408 * _S12) + (float)(_S8 * v409);
        float v307 = (float)(v405 * _S12) + (float)(_S8 * v406);
        LOWORD(_S12) = *(_WORD *)&v53[2 * v295];
        __asm { FCVT            S12, H12 }
        LOWORD(_S6) = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0))];
        unsigned int v309 = llroundf(fminf(fmaxf(_S1, 0.0), 8191.0));
        LOWORD(_S1) = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v297, 0.0), 8191.0))];
        __asm
        {
          FCVT            S6, H6
          FCVT            S1, H1
        }
        unsigned int v312 = llroundf(fminf(fmaxf(_S3, 0.0), 8191.0));
        LOWORD(_S3) = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(_S17, 0.0), 8191.0))];
        unsigned int v313 = llroundf(fminf(fmaxf(v303, 0.0), 8191.0));
        __asm { FCVT            S3, H3 }
        LOWORD(_S17) = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v299, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        unsigned int v316 = llroundf(fminf(fmaxf(_S5, 0.0), 8191.0));
        LOWORD(_S5) = *(_WORD *)&v58[2 * llroundf(fminf(fmaxf(v300, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        unsigned int v318 = llroundf(fminf(fmaxf(_S7 + (float)(_S12 * v410), 0.0), 8191.0));
        LOWORD(_S7) = *(_WORD *)&v58[2 * v309];
        __asm { FCVT            S7, H7 }
        unsigned int v320 = llroundf(fminf(fmaxf(v306 + (float)(_S12 * v407), 0.0), 8191.0));
        unsigned int v321 = llroundf(fminf(fmaxf(v307 + (float)(_S12 * v403), 0.0), 8191.0));
        float v322 = (float)((float)((float)(v421 * _S1) + (float)(v422 * _S6)) + (float)(v426 * _S3)) + v49;
        if (v322 < v49) {
          float v323 = v49;
        }
        else {
          float v323 = (float)((float)((float)(v421 * _S1) + (float)(v422 * _S6)) + (float)(v426 * _S3)) + v49;
        }
        BOOL v258 = v322 <= v55;
        float v324 = (float)((float)((float)(v421 * _S5) + (float)(v422 * _S17)) + (float)(v426 * _S7)) + v49;
        if (!v258) {
          float v323 = v55;
        }
        __int8 v325 = llroundf(v323);
        if (v324 < v49) {
          float v326 = v49;
        }
        else {
          float v326 = (float)((float)((float)(v421 * _S5) + (float)(v422 * _S17)) + (float)(v426 * _S7)) + v49;
        }
        BOOL v258 = v324 <= v55;
        _H16 = *(_WORD *)&v58[2 * v312];
        if (!v258) {
          float v326 = v55;
        }
        __int8 v328 = llroundf(v326);
        _H28 = *(_WORD *)&v58[2 * v313];
        __asm
        {
          FCVT            S19, H16
          FCVT            S28, H28
        }
        _S6 = _S6 + _S17;
        _H17 = *(_WORD *)&v58[2 * v316];
        __asm { FCVT            S17, H17 }
        float v335 = _S1 + _S5;
        _H5 = *(_WORD *)&v58[2 * v318];
        __asm { FCVT            S5, H5 }
        float v338 = _S3 + _S7;
        float v339 = (float)(v432 + (float)(_S6 * *(float *)&v95)) + (float)(v335 * v418);
        float v340 = (float)(v432 + (float)(_S6 * *((float *)&v95 + 1))) + (float)(v335 * v431);
        LOWORD(_S6) = *(_WORD *)&v58[2 * v320];
        __asm { FCVT            S6, H6 }
        float v342 = v339 + (float)(v338 * *(float *)&v98);
        float v343 = v340 + (float)(v338 * *((float *)&v98 + 1));
        if (v342 < v417) {
          float v344 = v417;
        }
        else {
          float v344 = v342;
        }
        _H7 = *(_WORD *)&v58[2 * v321];
        __asm { FCVT            S7, H7 }
        if (!(_NF ^ _VF | _ZF)) {
          float v344 = v56;
        }
        char v347 = llroundf(v344);
        if (v343 < v417) {
          float v348 = v417;
        }
        else {
          float v348 = v343;
        }
        if (v343 <= v56) {
          float v349 = v348;
        }
        else {
          float v349 = v56;
        }
        char v350 = llroundf(v349);
        float v351 = (float)((float)((float)(v421 * _S28) + (float)(v422 * _S19)) + (float)(v426 * _S17)) + v49;
        if (v351 < v49) {
          float v352 = v49;
        }
        else {
          float v352 = (float)((float)((float)(v421 * _S28) + (float)(v422 * _S19)) + (float)(v426 * _S17)) + v49;
        }
        BOOL v258 = v351 <= v55;
        float v353 = (float)((float)((float)(v421 * _S6) + (float)(v422 * _S5)) + (float)(v426 * _S7)) + v49;
        if (!v258) {
          float v352 = v55;
        }
        __int8 v354 = llroundf(v352);
        if (v353 < v49) {
          float v355 = v49;
        }
        else {
          float v355 = (float)((float)((float)(v421 * _S6) + (float)(v422 * _S5)) + (float)(v426 * _S7)) + v49;
        }
        if (v353 <= v55) {
          float v356 = v355;
        }
        else {
          float v356 = v55;
        }
        __int8 v357 = llroundf(v356);
        float v358 = _S19 + _S5;
        v73->i8[0] = v325;
        v73->i8[1] = v328;
        *float v72 = v347;
        v72[1] = v350;
        v101->i8[0] = v354;
        v101->i8[1] = v357;
        float v359 = _S28 + _S6;
        float v360 = (float)(v432 + (float)((float)(_S19 + _S5) * *(float *)&v95)) + (float)((float)(_S28 + _S6) * v418);
        float v361 = _S17 + _S7;
        float v362 = v360 + (float)((float)(_S17 + _S7) * *(float *)&v98);
        float v363 = v56;
        if (v362 <= v56)
        {
          float v363 = v362;
          if (v362 < v417) {
            float v363 = v417;
          }
        }
        float v364 = (float)((float)(v432 + (float)(v358 * *((float *)&v95 + 1))) + (float)(v359 * v431))
             + (float)(v361 * *((float *)&v98 + 1));
        *int16x8_t v102 = llroundf(v363);
        *(float *)_D1.i32 = v56;
        float16x8_t v241 = v267;
        short float v91 = _H14;
        v99.i64[0] = 0x9000900090009000;
        v99.i64[1] = 0x9000900090009000;
        if (v364 <= v56)
        {
          *(float *)_D1.i32 = v364;
          if (v364 < v417) {
            *(float *)_D1.i32 = v417;
          }
        }
        v240 += 2;
        result += 2;
        BOOL v76 = (int8x8_t *)((char *)v76 + 2);
        int16x8_t v100 = (int8x8_t *)((char *)v100 + 2);
        float v73 = (int8x8_t *)((char *)v73 + 2);
        v102[1] = llroundf(*(float *)_D1.i32);
        v72 += 2;
        int8x16_t v101 = (int8x8_t *)((char *)v101 + 2);
        v102 += 2;
        float16x8_t v94 = v388;
        float16x8_t v61 = v402;
        float16x8_t v67 = v404;
        float16x8_t v96 = (float16x8_t)v423;
        float16x8_t v97 = (float16x8_t)v424;
        float16x8_t v64 = v415;
      }
      float16x8_t v66 = v241;
      BOOL v76 = (int8x8_t *)&v385[v34];
      v75 += v35;
      float v73 = (int8x8_t *)&v386[v37];
      float v72 = &v387[v38];
      v21 += 2;
      float v77 = &v430[v383];
      float16x8_t v70 = v384;
    }
    while (v25 > v21);
    if (v368 && v367)
    {
      float v365 = __src;
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v40, v365, v22);
        v365 += v36;
        v40 += v39;
        --v25;
      }
      while (v25);
    }
    else if (v367)
    {
      do
      {
        if (v22) {
          uint64_t result = (unsigned __int8 *)memset(v40, 255, v22);
        }
        v40 += v39;
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_422vf_GCD);
  return 0;
}

char *vt_Copy_420vf_TRC_Mat_TRC_422vf_GCD(char *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (void *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v19 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v192 = v19[2];
    uint64_t v194 = v18[2];
    uint64_t v23 = (char *)(v194 + v192 * v12 + v11);
    uint64_t v24 = *v20;
    uint64_t v25 = v20[1];
    uint64_t v26 = v20[2];
    uint64_t v193 = v15[2];
    unint64_t v27 = (char *)(v193 + v26 * v16 + v14);
    float v28 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    float v29 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v30 = (float)LODWORD(a5);
    float v31 = v28 * *(float *)v17;
    float v205 = v28 * *(float *)(v17 + 16);
    float v206 = v28 * *(float *)(v17 + 8);
    float v32 = v28 * *(float *)(v17 + 20);
    *(float *)&unsigned int v33 = v28 * *(float *)(v17 + 28);
    float v203 = *(float *)&v33;
    float v204 = v32;
    LOWORD(v33) = *(_WORD *)(v17 + 144);
    float v34 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v17 + 146);
    float v35 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v17 + 148);
    float v36 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v17 + 150);
    float v37 = (float)v33;
    LOWORD(v33) = *(_WORD *)(v17 + 152);
    float v38 = (float)v33;
    float v200 = *(float *)(v17 + 40);
    float v201 = *(float *)(v17 + 36);
    float v198 = *(float *)(v17 + 52) * 0.5;
    float v199 = *(float *)(v17 + 48) * 0.5;
    float v196 = *(float *)(v17 + 44);
    float v197 = *(float *)(v17 + 56) * 0.5;
    float v209 = *(float *)(v17 + 64) * 0.5;
    float v210 = *(float *)(v17 + 60) * 0.5;
    float v195 = *(float *)(v17 + 72);
    float v39 = *(float *)(v17 + 68) * 0.5;
    float v208 = v39;
    float v41 = *(float *)(v17 + 76);
    float v40 = *(float *)(v17 + 80);
    float v42 = *(float *)(v17 + 84);
    float v43 = *(float *)(v17 + 88);
    float v44 = *(float *)(v17 + 92);
    float v45 = *(float *)(v17 + 96);
    float v46 = *(float *)(v17 + 100);
    float v47 = *(float *)(v17 + 104);
    uint64_t v48 = v15[1];
    float v49 = (unsigned char *)(*v15 + *v20 * v16 + v14);
    uint64_t result = (char *)(v48 + v25 * v16 + v14);
    uint64_t v50 = v17 + 16548;
    uint64_t v51 = v17 + 164;
    if (!v48) {
      uint64_t result = 0;
    }
    uint64_t v52 = v18[1];
    float v53 = (unsigned char *)(*v18 + v21 * v12 + v11);
    uint64_t v54 = v52 + v19[1] * (v12 / 2) + v11;
    float v207 = (float)LODWORD(a5);
    float v202 = v35;
    do
    {
      float v55 = &v53[v21];
      float v56 = &result[v25];
      size_t v57 = &v49[v24];
      if (v10)
      {
        size_t v58 = 0;
        float16x8_t v59 = &v53[v21];
        float16x8_t v60 = &v49[v24];
        do
        {
          LOBYTE(v39) = *(unsigned char *)(v54 + v58 + 1);
          float v61 = (float)LODWORD(v39) - v30;
          unsigned int v62 = LODWORD(v206);
          float v63 = v206 * v61;
          LOBYTE(v62) = *v53;
          float v64 = v31 * (float)((float)v62 - v29);
          float v65 = (float)(v206 * v61) + v64;
          float v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            float v66 = (float)(v206 * v61) + v64;
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          LOBYTE(v65) = *(unsigned char *)(v54 + v58);
          float v67 = (float)LODWORD(v65) - v30;
          float v68 = (float)(v204 * v61) + (float)(v67 * v205);
          float v69 = 8191.0;
          if ((float)(v64 + v68) <= 8191.0)
          {
            float v69 = v64 + v68;
            if ((float)(v64 + v68) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v203 * v67;
          float v71 = (float)(v203 * v67) + v64;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          LOBYTE(v71) = v53[1];
          float v73 = v31 * (float)((float)LODWORD(v71) - v29);
          float v74 = 8191.0;
          if ((float)(v63 + v73) <= 8191.0)
          {
            float v74 = v63 + v73;
            if ((float)(v63 + v73) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v68 + v73;
          float v76 = 8191.0;
          if ((float)(v68 + v73) <= 8191.0)
          {
            float v76 = v68 + v73;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v70 + v73;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          LOBYTE(v77) = *v59;
          float v79 = v29;
          float v80 = v31;
          float v81 = v31 * (float)((float)LODWORD(v77) - v29);
          float v82 = 8191.0;
          if ((float)(v63 + v81) <= 8191.0)
          {
            float v82 = v63 + v81;
            if ((float)(v63 + v81) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = 8191.0;
          if ((float)(v68 + v81) <= 8191.0)
          {
            float v83 = v68 + v81;
            if ((float)(v68 + v81) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v70 + v81;
          BOOL v85 = (float)(v70 + v81) <= 8191.0;
          float v86 = 8191.0;
          if (v85)
          {
            float v86 = v84;
            if (v84 < 0.0) {
              float v86 = 0.0;
            }
          }
          LOBYTE(v75) = v59[1];
          float v87 = v80 * (float)((float)LODWORD(v75) - v79);
          float v88 = v63 + v87;
          BOOL v85 = (float)(v63 + v87) <= 8191.0;
          float v89 = 8191.0;
          if (v85)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v68 + v87;
          BOOL v85 = (float)(v68 + v87) <= 8191.0;
          float v91 = 8191.0;
          if (v85)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v70 + v87;
          if (v92 < 0.0) {
            float v93 = 0.0;
          }
          else {
            float v93 = v92;
          }
          if (v92 <= 8191.0) {
            float v94 = v93;
          }
          else {
            float v94 = 8191.0;
          }
          _H4 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S5, H5
          }
          _H7 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S17, H17
          }
          _H1 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H6 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          unsigned int v121 = llroundf(fminf(fmaxf(v94, 0.0), 8191.0));
          _S3 = (float)((float)(v41 * _S5) + (float)(_S4 * v195)) + (float)(_S7 * v40);
          float v123 = (float)((float)(v43 * _S5) + (float)(_S4 * v42)) + (float)(_S7 * v44);
          _S4 = (float)((float)(v46 * _S5) + (float)(_S4 * v45)) + (float)(_S7 * v47);
          _S5 = (float)((float)(v41 * _S25) + (float)(_S24 * v195)) + (float)(_S26 * v40);
          _S7 = (float)((float)(v43 * _S25) + (float)(_S24 * v42)) + (float)(_S26 * v44);
          float v127 = (float)((float)(v46 * _S25) + (float)(_S24 * v45)) + (float)(_S26 * v47);
          float v128 = (float)((float)(v41 * _S17) + (float)(_S27 * v195)) + (float)(_S1 * v40);
          float v129 = (float)((float)(v43 * _S17) + (float)(_S27 * v42)) + (float)(_S1 * v44);
          _S1 = (float)((float)(v46 * _S17) + (float)(_S27 * v45)) + (float)(_S1 * v47);
          float v131 = (float)(v41 * _S2) + (float)(_S6 * v195);
          float v132 = (float)(v43 * _S2) + (float)(_S6 * v42);
          float v133 = (float)(v46 * _S2) + (float)(_S6 * v45);
          LOWORD(_S6) = *(_WORD *)(v51 + 2 * v121);
          __asm { FCVT            S6, H6 }
          float v135 = v131 + (float)(_S6 * v40);
          float v136 = v132 + (float)(_S6 * v44);
          float v137 = v133 + (float)(_S6 * v47);
          unsigned int v138 = llroundf(fminf(fmaxf(_S4, 0.0), 8191.0));
          unsigned int v139 = llroundf(fminf(fmaxf(_S5, 0.0), 8191.0));
          LOWORD(_S3) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          __asm
          {
            FCVT            S3, H3
            FCVT            S4, H4
          }
          LOWORD(_S5) = *(_WORD *)(v50 + 2 * v138);
          __asm { FCVT            S5, H5 }
          LOWORD(_S6) = *(_WORD *)(v50 + 2 * v139);
          __asm { FCVT            S6, H6 }
          unsigned int v144 = llroundf(fminf(fmaxf(v129, 0.0), 8191.0));
          LOWORD(_S7) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          unsigned int v146 = llroundf(fminf(fmaxf(_S1, 0.0), 8191.0));
          LOWORD(_S1) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          unsigned int v148 = llroundf(fminf(fmaxf(v135, 0.0), 8191.0));
          _H17 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          unsigned int v150 = llroundf(fminf(fmaxf(v136, 0.0), 8191.0));
          unsigned int v151 = llroundf(fminf(fmaxf(v137, 0.0), 8191.0));
          float v152 = (float)((float)((float)(v200 * _S4) + (float)(v201 * _S3)) + (float)(v196 * _S5)) + v34;
          if (v152 < v34) {
            float v153 = v34;
          }
          else {
            float v153 = (float)((float)((float)(v200 * _S4) + (float)(v201 * _S3)) + (float)(v196 * _S5)) + v34;
          }
          BOOL v85 = v152 <= v36;
          float v154 = (float)((float)((float)(v200 * _S7) + (float)(v201 * _S6)) + (float)(v196 * _S1)) + v34;
          if (!v85) {
            float v153 = v36;
          }
          char v155 = llroundf(v153);
          if (v154 < v34) {
            float v156 = v34;
          }
          else {
            float v156 = (float)((float)((float)(v200 * _S7) + (float)(v201 * _S6)) + (float)(v196 * _S1)) + v34;
          }
          if (v154 <= v36) {
            float v157 = v156;
          }
          else {
            float v157 = v36;
          }
          char v158 = llroundf(v157);
          _H2 = *(_WORD *)(v50 + 2 * v144);
          __asm
          {
            FCVT            S17, H17
            FCVT            S2, H2
          }
          float v162 = _S3 + _S6;
          _H6 = *(_WORD *)(v50 + 2 * v146);
          __asm { FCVT            S6, H6 }
          _S4 = _S4 + _S7;
          _H7 = *(_WORD *)(v50 + 2 * v148);
          __asm { FCVT            S7, H7 }
          float v168 = _S5 + _S1;
          float v169 = (float)(v202 + (float)(v162 * v199)) + (float)(_S4 * v198);
          float v170 = (float)(v202 + (float)(v162 * v210)) + (float)(_S4 * v209);
          LOWORD(_S4) = *(_WORD *)(v50 + 2 * v150);
          __asm { FCVT            S4, H4 }
          float v172 = v169 + (float)(v168 * v197);
          float v173 = v170 + (float)(v168 * v208);
          if (v172 < v37) {
            float v174 = v37;
          }
          else {
            float v174 = v172;
          }
          _H5 = *(_WORD *)(v50 + 2 * v151);
          __asm { FCVT            S5, H5 }
          if (!(_NF ^ _VF | _ZF)) {
            float v174 = v38;
          }
          char v177 = llroundf(v174);
          if (v173 < v37) {
            float v178 = v37;
          }
          else {
            float v178 = v173;
          }
          if (v173 <= v38) {
            float v179 = v178;
          }
          else {
            float v179 = v38;
          }
          char v180 = llroundf(v179);
          float v181 = (float)((float)((float)(v200 * _S2) + (float)(v201 * _S17)) + (float)(v196 * _S6)) + v34;
          if (v181 < v34) {
            float v182 = v34;
          }
          else {
            float v182 = (float)((float)((float)(v200 * _S2) + (float)(v201 * _S17)) + (float)(v196 * _S6)) + v34;
          }
          BOOL v85 = v181 <= v36;
          float v183 = (float)((float)((float)(v200 * _S4) + (float)(v201 * _S7)) + (float)(v196 * _S5)) + v34;
          if (!v85) {
            float v182 = v36;
          }
          char v184 = llroundf(v182);
          if (v183 < v34) {
            float v185 = v34;
          }
          else {
            float v185 = (float)((float)((float)(v200 * _S4) + (float)(v201 * _S7)) + (float)(v196 * _S5)) + v34;
          }
          if (v183 <= v36) {
            float v186 = v185;
          }
          else {
            float v186 = v36;
          }
          unsigned char *v49 = v155;
          v49[1] = v158;
          result[v58 + 1] = v180;
          result[v58] = v177;
          unsigned char *v60 = v184;
          v60[1] = llroundf(v186);
          float v187 = _S2 + _S4;
          float v188 = _S6 + _S5;
          float v189 = (float)((float)(v202 + (float)((float)(_S17 + _S7) * v199)) + (float)(v187 * v198))
               + (float)((float)(_S6 + _S5) * v197);
          float v190 = v38;
          if (v189 <= v38)
          {
            float v190 = v189;
            if (v189 < v37) {
              float v190 = v37;
            }
          }
          float v191 = (float)((float)(v202 + (float)((float)(_S17 + _S7) * v210)) + (float)(v187 * v209))
               + (float)(v188 * v208);
          v56[v58] = llroundf(v190);
          float v39 = v38;
          float v29 = v79;
          float v31 = v80;
          if (v191 <= v38)
          {
            float v39 = v191;
            if (v191 < v37) {
              float v39 = v37;
            }
          }
          v53 += 2;
          v59 += 2;
          v49 += 2;
          v60 += 2;
          v56[v58 + 1] = llroundf(v39);
          v58 += 2;
          float v30 = v207;
        }
        while (v10 > v58);
      }
      float v53 = &v55[v21];
      v54 += v22;
      float v49 = &v57[v24];
      uint64_t result = &v56[v25];
      v9 += 2;
    }
    while (v13 > v9);
    if (v194 && v193)
    {
      do
      {
        uint64_t result = (char *)memcpy(v27, v23, v10);
        v23 += v192;
        v27 += v26;
        --v13;
      }
      while (v13);
    }
    else if (v193)
    {
      do
      {
        if (v10) {
          uint64_t result = (char *)memset(v27, 255, v10);
        }
        v27 += v26;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_422vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_422vf_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_422vf_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = 2 * *result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    size_t v12 = *(void *)(result + 20);
    uint64_t v13 = *(void *)(result + 36);
    uint64_t v14 = *(void *)(result + 44) + 2 * v9;
    unint64_t v15 = 2 * v10 - 2 * v9;
    uint64_t v16 = *((void *)result + 14);
    uint64_t v17 = (uint64_t *)*((void *)result + 16);
    uint64_t v18 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v8);
    uint64_t v19 = (float32x2_t *)*((void *)result + 19);
    uint64_t v21 = (uint64_t *)*((void *)result + 7);
    uint64_t v20 = (uint64_t *)*((void *)result + 8);
    size_t v22 = (uint64_t *)*((void *)result + 17);
    uint64_t v23 = *v20;
    uint64_t v24 = v20[1];
    uint64_t v25 = v20[2];
    uint64_t v171 = v21[2];
    uint64_t v26 = *v22;
    uint64_t v27 = v22[1];
    uint64_t v28 = v22[2];
    uint64_t v170 = v17[2];
    uint64_t v29 = (char *)(v170 + v28 * v18 + v16);
    LODWORD(a3) = v19[17].i32[0];
    unsigned int v30 = v19[17].u16[2];
    unsigned int v31 = v19[17].u16[3];
    v32.i32[0] = v19[3].i32[1];
    unsigned int v33 = v19[18].u16[0];
    unsigned int v34 = v19[18].u16[1];
    unsigned int v35 = v19[18].u16[2];
    unsigned int v36 = v19[18].u16[3];
    unsigned int v37 = v19[19].u16[0];
    _S24 = v19[4].i32[1];
    _S1 = v19[5].f32[0];
    _S2 = v19[5].f32[1];
    v41.i32[0] = v19[6].i32[0];
    v43.i32[0] = v19[6].i32[1];
    v42.i32[0] = v19[7].i32[0];
    float v44 = (float)v30;
    *(short float *)v4.i16 = (short float)v30;
    float v45 = (char *)(v171 + v25 * v14 + v13);
    v5.f32[0] = (float)LODWORD(a3) / (float)v19[16].u32[0];
    float v187 = (float)v31;
    _S5 = v5.f32[0] * v19->f32[0];
    float v47 = (float)v33;
    float v48 = (float)v34;
    float v49 = (float)v35;
    float v50 = (float)v36;
    float v51 = (float)v37;
    float16x8_t v52 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v4.i8, 0);
    __asm { FCVT            H8, S5 }
    short float v58 = -(short float)v31;
    v32.i32[1] = v19[1].i32[0];
    *(float32x2_t *)v4.i8 = vmul_n_f32(v32, v5.f32[0]);
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)v4), 0);
    *(float32x2_t *)v5.f32 = vmul_n_f32(v19[2], v5.f32[0]);
    *(double *)&v68.i64[1] = a3;
    float16x8_t v60 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v61 = vmulq_n_f16(v59, v58);
    float16x8_t v62 = vmulq_n_f16(v60, v58);
    __asm { FCVT            H14, S24 }
    v41.i32[1] = v19[7].i32[1];
    *(float32x2_t *)v6.f32 = vmul_f32(v41, (float32x2_t)0x3F0000003F000000);
    *(double *)&v65.i64[1] = a3;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    v43.i32[1] = v19[8].i32[0];
    *(float32x2_t *)v65.f32 = vmul_f32(v43, (float32x2_t)0x3F0000003F000000);
    __asm { FCVT            H0, S1 }
    short float v190 = _H0;
    LODWORD(a3) = _S24;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v65), 0);
    v42.i32[1] = v19[8].i32[1];
    *(float32x2_t *)v68.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    int16x4_t v69 = (int16x4_t)vcvt_f16_f32(v68);
    float16x8_t v70 = (float16x8_t)vdupq_lane_s32((int32x2_t)v69, 0);
    *(short float *)v69.i16 = (short float)v33;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(v69, 0);
    *(short float *)v69.i16 = (short float)v34;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(v69, 0);
    *(short float *)v69.i16 = (short float)v35;
    float16x8_t v73 = (float16x8_t)vdupq_lane_s16(v69, 0);
    *(short float *)v69.i16 = (short float)v36;
    float16x8_t v74 = (float16x8_t)vdupq_lane_s16(v69, 0);
    *(short float *)v69.i16 = (short float)v37;
    int16x8_t v75 = vdupq_lane_s16(v69, 0);
    uint64_t v76 = *v17;
    uint64_t v77 = v17[1];
    float v78 = (unsigned char *)(v77 + v27 * v18 + v16);
    if (!v77) {
      float v78 = 0;
    }
    float v79 = (int8x8_t *)(v76 + v26 * v18 + v16);
    if (v14 >= 0) {
      uint64_t v80 = v14;
    }
    else {
      uint64_t v80 = v14 + 1;
    }
    uint64_t v81 = *v21;
    float v82 = (__int8 *)(v21[1] + v24 * (v80 >> 1) + v13);
    uint64_t result = (unsigned __int8 *)(v81 + v23 * v14 + v13);
    float v83 = &v78[v27];
    __asm { FCVT            H9, S2 }
    double v189 = _D9;
    float v185 = v5.f32[0];
    float v186 = *(float *)v4.i32;
    v4.i32[0] = v4.i32[1];
    float32_t v176 = v5.f32[1];
    uint64_t v84 = v6.i64[0];
    uint64_t v85 = v65.i64[0];
    float v191 = v68.f32[0];
    v68.i32[0] = v68.i32[1];
    float v188 = v68.f32[1];
    short float v183 = _H14;
    float16x8_t v184 = v62;
    float16x8_t v181 = v67;
    float16x8_t v182 = v64;
    float16x8_t v179 = v72;
    float16x8_t v180 = v70;
    float16x8_t v177 = v74;
    float16x8_t v178 = v73;
    __int32 v174 = v4.i32[1];
    __int32 v175 = v19[4].i32[1];
    float32_t v172 = v19[5].f32[1];
    float32_t v173 = v19[5].f32[0];
    do
    {
      float v87 = &result[v23];
      float v88 = (char *)v79 + v26;
      float v89 = &v78[v27];
      if ((int)v12 < 8)
      {
        size_t v119 = 0;
        float16x8_t v118 = &v78[v27];
        float v92 = (int8x8_t *)((char *)v79 + v26);
        float16x8_t v117 = v82;
        float v91 = (int8x8_t *)&result[v23];
        float v120 = v176;
      }
      else
      {
        uint64_t v90 = 0;
        float v91 = (int8x8_t *)&result[v23];
        float v92 = (int8x8_t *)((char *)v79 + v26);
        float16x8_t v93 = v72;
        float16x8_t v4 = (float16x8_t)v75;
        float16x8_t v94 = v74;
        do
        {
          int8x8_t v95 = *(int8x8_t *)&v82[v90];
          *(int8x8_t *)v96.i8 = vzip1_s8(v95, 0);
          v96.u64[1] = (unint64_t)vzip2_s8(v95, 0);
          float16x8_t v97 = vcvtq_f16_u16(v96);
          int8x16_t v98 = (int8x16_t)vmlaq_f16(v61, v59, v97);
          int8x16_t v99 = (int8x16_t)vmlaq_f16(v62, v60, v97);
          v97.i64[0] = vextq_s8(v98, v98, 8uLL).u64[0];
          *(int16x4_t *)v100.i8 = vuzp1_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v97.i8);
          *(int16x4_t *)v97.i8 = vuzp2_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v97.i8);
          *(double *)&v97.i64[1] = a3;
          float16x8_t v101 = (float16x8_t)vzip1q_s16((int16x8_t)v97, (int16x8_t)v97);
          *(double *)&v100.i64[1] = a3;
          float16x8_t v102 = (float16x8_t)vzip1q_s16(v100, v100);
          v97.i64[0] = vextq_s8(v99, v99, 8uLL).u64[0];
          *(float16x4_t *)v97.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v97.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v97.i8));
          *(double *)&v97.i64[1] = a3;
          int8x8_t v103 = *(int8x8_t *)result;
          result += 8;
          *(int8x8_t *)v99.i8 = vzip1_s8(v103, 0);
          v99.u64[1] = (unint64_t)vzip2_s8(v103, 0);
          float16x8_t v104 = (float16x8_t)vzip1q_s16((int16x8_t)v97, (int16x8_t)v97);
          int8x8_t v105 = *v91++;
          float16x8_t v106 = v62;
          *(int8x8_t *)v107.i8 = vzip1_s8(v105, 0);
          v107.u64[1] = (unint64_t)vzip2_s8(v105, 0);
          float16x8_t v108 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v99), v52);
          float16x8_t v109 = vsubq_f16(vcvtq_f16_u16(v107), v52);
          float16x8_t v110 = vmlaq_n_f16(v101, v108, _H8);
          float16x8_t v111 = vmlaq_n_f16(v101, v109, _H8);
          float16x8_t v112 = vmlaq_n_f16(v104, v108, _H8);
          float16x8_t v113 = vmlaq_n_f16(v104, v109, _H8);
          float16x8_t v114 = vmlaq_n_f16(v102, v108, _H8);
          float16x8_t v115 = vmlaq_n_f16(v102, v109, _H8);
          *v79++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v71, v110, _H14), v112, v190), v114, *(short float *)&v189), v71), v73)));
          int16x8_t v116 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v110, (int16x8_t)v112), (float16x8_t)vuzp2q_s16((int16x8_t)v110, (int16x8_t)v112));
          float16x8_t v74 = (float16x8_t)vzip1q_s16(v116, v116);
          float16x8_t v62 = v106;
          *(int8x8_t *)&v78[v90] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v93, v64, v74), v67, (float16x8_t)vzip2q_s16(v116, v116)), v70, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v114, (int16x8_t)v114), (float16x8_t)vtrn2q_s16((int16x8_t)v114, (int16x8_t)v114))), v94), v4)));
          a3 = v189;
          *v92++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v71, v111, _H14), v113, v190), v115, *(short float *)&v189), v71), v73)));
          float32x4_t v68 = (float32x4_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v111, (int16x8_t)v113), (float16x8_t)vuzp2q_s16((int16x8_t)v111, (int16x8_t)v113));
          float16x8_t v72 = (float16x8_t)vzip1q_s16((int16x8_t)v68, (int16x8_t)v68);
          *(int8x8_t *)v68.f32 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v93, v64, v72), v67, (float16x8_t)vzip2q_s16((int16x8_t)v68, (int16x8_t)v68)), v70, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v115, (int16x8_t)v115), (float16x8_t)vtrn2q_s16((int16x8_t)v115, (int16x8_t)v115))), v94), v4)));
          *(void *)&v83[v90] = v68.i64[0];
          v90 += 8;
        }
        while ((int)v90 < (int)v12 - 7);
        float16x8_t v117 = &v82[v90];
        v78 += v90;
        float16x8_t v118 = &v83[v90];
        size_t v119 = v12 & 0xFFFFFFF8;
        int16x8_t v75 = (int16x8_t)v4;
        v4.i32[0] = v174;
        LODWORD(a3) = v175;
        float v120 = v176;
        _S2 = v172;
        _S1 = v173;
      }
      while (v12 > v119)
      {
        float16x8_t v121 = v61;
        float16x8_t v122 = v60;
        float16x8_t v123 = v59;
        float16x8_t v124 = v52;
        v68.i8[0] = *v117;
        *(float *)&unsigned int v125 = (float)v68.u32[0] - v187;
        v72.i8[0] = v117[1];
        float v126 = (float)v72.u32[0] - v187;
        float v127 = *(float *)v4.i32 * v126;
        float v128 = (float)(v120 * v126) + (float)(*(float *)&v125 * v185);
        *(float *)v72.i32 = v186 * *(float *)&v125;
        LOBYTE(v125) = *result;
        float v129 = _S5 * (float)((float)v125 - v44);
        v74.i8[0] = result[1];
        float v130 = _S5 * (float)((float)v74.u32[0] - v44);
        float v131 = v127 + v129;
        float v132 = v129 + v128;
        v68.f32[0] = *(float *)v72.i32 + v129;
        float v133 = v127 + v130;
        float v134 = v128 + v130;
        *(float *)v74.i32 = *(float *)v72.i32 + v130;
        float v135 = (float)((float)((float)(_S1 * v132) + (float)(*(float *)&a3 * v131)) + (float)(_S2 * v68.f32[0])) + v47;
        if (v135 < v47) {
          float v136 = v47;
        }
        else {
          float v136 = (float)((float)((float)(_S1 * v132) + (float)(*(float *)&a3 * v131)) + (float)(_S2 * v68.f32[0])) + v47;
        }
        BOOL v137 = v135 <= v49;
        float v138 = (float)((float)((float)(_S1 * v134) + (float)(*(float *)&a3 * v133)) + (float)(_S2 * *(float *)v74.i32))
             + v47;
        if (!v137) {
          float v136 = v49;
        }
        __int8 v139 = llroundf(v136);
        if (v138 < v47) {
          float v140 = v47;
        }
        else {
          float v140 = (float)((float)((float)(_S1 * v134) + (float)(*(float *)&a3 * v133)) + (float)(_S2 * *(float *)v74.i32))
        }
               + v47;
        if (v138 <= v49) {
          float v141 = v140;
        }
        else {
          float v141 = v49;
        }
        __int8 v142 = llroundf(v141);
        float v143 = v131 + v133;
        LOBYTE(v141) = v91->i8[0];
        float v144 = v132 + v134;
        LOBYTE(v132) = v91->i8[1];
        v79->i8[0] = v139;
        float v145 = _S5 * (float)((float)LODWORD(v141) - v44);
        float v146 = v68.f32[0] + *(float *)v74.i32;
        float v147 = (float)(v48 + (float)(v143 * *(float *)&v84)) + (float)(v144 * *(float *)&v85);
        float v148 = (float)(v48 + (float)(v143 * *((float *)&v84 + 1))) + (float)(v144 * *((float *)&v85 + 1));
        float v149 = v127 + v145;
        float v150 = v147 + (float)(v146 * v191);
        float v151 = v148 + (float)(v146 * v188);
        if (v150 < v50) {
          float v152 = (float)v36;
        }
        else {
          float v152 = v150;
        }
        float v153 = v128 + v145;
        float v154 = *(float *)v72.i32 + v145;
        v79->i8[1] = v142;
        if (v150 <= v51) {
          float v155 = v152;
        }
        else {
          float v155 = v51;
        }
        unsigned char *v78 = llroundf(v155);
        if (v151 < v50) {
          float v156 = (float)v36;
        }
        else {
          float v156 = v151;
        }
        if (v151 <= v51) {
          float v157 = v156;
        }
        else {
          float v157 = v51;
        }
        v78[1] = llroundf(v157);
        float v158 = (float)((float)((float)(_S1 * v153) + (float)(*(float *)&a3 * v149)) + (float)(_S2 * v154)) + v47;
        float v159 = v49;
        if (v158 <= v49)
        {
          float v159 = (float)((float)((float)(_S1 * v153) + (float)(*(float *)&a3 * v149)) + (float)(_S2 * v154)) + v47;
          if (v158 < v47) {
            float v159 = v47;
          }
        }
        float v160 = _S5 * (float)((float)LODWORD(v132) - v44);
        float v161 = v127 + v160;
        float v162 = v128 + v160;
        float v163 = *(float *)v72.i32 + v160;
        float v164 = (float)((float)((float)(_S1 * (float)(v128 + v160)) + (float)(*(float *)&a3 * v161)) + (float)(_S2 * v163))
             + v47;
        v92->i8[0] = llroundf(v159);
        float v165 = v49;
        if (v164 <= v49)
        {
          float v165 = v164;
          if (v164 < v47) {
            float v165 = v47;
          }
        }
        v92->i8[1] = llroundf(v165);
        float v166 = v149 + v161;
        float v167 = v153 + v162;
        float v168 = v154 + v163;
        *(float *)v74.i32 = (float)((float)(v48 + (float)((float)(v149 + v161) * *(float *)&v84))
                                  + (float)(v167 * *(float *)&v85))
                          + (float)(v168 * v191);
        float v169 = v51;
        float16x8_t v52 = v124;
        float16x8_t v59 = v123;
        float16x8_t v60 = v122;
        if (*(float *)v74.i32 <= v51)
        {
          float v169 = *(float *)v74.i32;
          if (*(float *)v74.i32 < v50) {
            float v169 = (float)v36;
          }
        }
        *(float *)v72.i32 = (float)((float)(v48 + (float)(v166 * *((float *)&v84 + 1)))
                                  + (float)(v167 * *((float *)&v85 + 1)))
                          + (float)(v168 * v188);
        *float16x8_t v118 = llroundf(v169);
        v68.f32[0] = v51;
        float16x8_t v61 = v121;
        if (*(float *)v72.i32 <= v51)
        {
          v68.i32[0] = v72.i32[0];
          if (*(float *)v72.i32 < v50) {
            v68.f32[0] = (float)v36;
          }
        }
        v119 += 2;
        v117 += 2;
        result += 2;
        float v91 = (int8x8_t *)((char *)v91 + 2);
        float v79 = (int8x8_t *)((char *)v79 + 2);
        v118[1] = llroundf(v68.f32[0]);
        v78 += 2;
        float v92 = (int8x8_t *)((char *)v92 + 2);
        v118 += 2;
      }
      uint64_t result = &v87[v23];
      v82 += v24;
      float v79 = (int8x8_t *)&v88[v26];
      float v78 = &v89[v27];
      v11 += 2;
      v83 += 2 * v27;
      _H14 = v183;
      float16x8_t v62 = v184;
      float16x8_t v67 = v181;
      float16x8_t v64 = v182;
      float16x8_t v72 = v179;
      float16x8_t v70 = v180;
      float16x8_t v74 = v177;
      float16x8_t v73 = v178;
    }
    while (v15 > v11);
    if (v171 && v170)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v29, v45, v12);
        v45 += v25;
        v29 += v28;
        --v15;
      }
      while (v15);
    }
    else if (v170)
    {
      do
      {
        if (v12) {
          uint64_t result = (unsigned __int8 *)memset(v29, 255, v12);
        }
        v29 += v28;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_422vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_422vf_GCD);
  return 0;
}

void *vt_Copy_420vf_rgb_422vf_GCD(void *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v14 = *(void *)((char *)result + 28);
  unint64_t v15 = 2 * *(unsigned __int8 *)result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (2 * v17 != 2 * v16)
  {
    unint64_t v18 = 0;
    size_t v19 = *(void *)((char *)result + 20);
    uint64_t v20 = *(void *)((char *)result + 36);
    uint64_t v21 = *(void *)((char *)result + 44) + 2 * v16;
    unint64_t v22 = 2 * v17 - 2 * v16;
    uint64_t v23 = result[14];
    uint64_t v24 = (void *)result[16];
    uint64_t v25 = result[15] + 2 * (result[13] * a2 / v15);
    uint64_t v26 = result[19];
    uint64_t v28 = (void *)result[7];
    uint64_t v27 = (uint64_t *)result[8];
    uint64_t v29 = (uint64_t *)result[17];
    uint64_t v30 = *v27;
    uint64_t v31 = v27[1];
    uint64_t v32 = v27[2];
    uint64_t v33 = v28[2];
    uint64_t v34 = *v29;
    uint64_t v35 = v29[1];
    uint64_t v36 = v29[2];
    uint64_t v37 = v24[2];
    uint64_t v38 = (char *)(v37 + v36 * v25 + v23);
    float v39 = (float)*(unsigned int *)(v26 + 136) / (float)*(unsigned int *)(v26 + 128);
    LOWORD(a6) = *(_WORD *)(v26 + 140);
    LOWORD(a7) = *(_WORD *)(v26 + 142);
    float v40 = *(float *)v26;
    float v41 = *(float *)(v26 + 8);
    float v42 = *(float *)(v26 + 16);
    float v43 = *(float *)(v26 + 20);
    float v44 = *(float *)(v26 + 28);
    LOWORD(v9) = *(_WORD *)(v26 + 144);
    LOWORD(v10) = *(_WORD *)(v26 + 146);
    LOWORD(v11) = *(_WORD *)(v26 + 148);
    LOWORD(v12) = *(_WORD *)(v26 + 150);
    LOWORD(v13) = *(_WORD *)(v26 + 152);
    float v45 = *(float *)(v26 + 36);
    float v46 = *(float *)(v26 + 40);
    float v47 = *(float *)(v26 + 44);
    float v48 = *(float *)(v26 + 48);
    float v49 = *(float *)(v26 + 52);
    float v50 = *(float *)(v26 + 56);
    float v51 = *(float *)(v26 + 60);
    float v52 = *(float *)(v26 + 64);
    float v53 = *(float *)(v26 + 68);
    uint64_t v54 = v24[1];
    float v55 = (unsigned char *)(*v24 + v34 * v25 + v23);
    uint64_t result = (void *)(v54 + v35 * v25 + v23);
    float v56 = (char *)(v33 + v32 * v21 + v20);
    float v57 = (float)LODWORD(a6);
    float v58 = (float)LODWORD(a7);
    float v59 = v39 * v40;
    float v60 = v39 * v41;
    float v61 = v39 * v42;
    float v62 = v39 * v43;
    float v63 = v39 * v44;
    float v64 = (float)v9;
    float v65 = (float)v10;
    float v66 = (float)v11;
    float v67 = (float)v12;
    float v68 = (float)v13;
    float v69 = v48 * 0.5;
    float v70 = v49 * 0.5;
    float v71 = v50 * 0.5;
    float v72 = v51 * 0.5;
    float v73 = v52 * 0.5;
    float v74 = v53 * 0.5;
    if (!v54) {
      uint64_t result = 0;
    }
    uint64_t v75 = v28[1];
    uint64_t v76 = (unsigned char *)(*v28 + v30 * v21 + v20);
    if (v21 >= 0) {
      uint64_t v77 = v21;
    }
    else {
      uint64_t v77 = v21 + 1;
    }
    uint64_t v78 = v75 + v31 * (v77 >> 1) + v20;
    uint64_t v79 = (uint64_t)result + v35 + 1;
    do
    {
      uint64_t v80 = &v76[v30];
      uint64_t v81 = &v55[v34];
      if (v19)
      {
        size_t v82 = 0;
        float v83 = &v76[v30];
        uint64_t v84 = &v55[v34];
        do
        {
          LOBYTE(v53) = *(unsigned char *)(v78 + v82);
          *(float *)&unsigned int v85 = (float)LODWORD(v53);
          float v86 = *(float *)&v85 - v58;
          LOBYTE(v85) = *(unsigned char *)(v78 + v82 + 1);
          float v87 = (float)v85 - v58;
          float v88 = v60 * v87;
          float v89 = (float)(v62 * v87) + (float)(v86 * v61);
          float v90 = v63 * v86;
          LOBYTE(v7) = *v76;
          float v91 = v59 * (float)((float)LODWORD(v7) - v57);
          LOBYTE(v8) = v76[1];
          float v92 = v59 * (float)((float)LODWORD(v8) - v57);
          float v93 = v88 + v91;
          float v94 = v91 + v89;
          float v95 = v90 + v91;
          float v96 = v88 + v92;
          float v97 = v89 + v92;
          float v98 = v90 + v92;
          float v99 = (float)((float)((float)(v46 * v94) + (float)(v45 * v93)) + (float)(v47 * v95)) + v64;
          if (v99 < v64) {
            float v100 = v64;
          }
          else {
            float v100 = (float)((float)((float)(v46 * v94) + (float)(v45 * v93)) + (float)(v47 * v95)) + v64;
          }
          BOOL v101 = v99 <= v66;
          float v102 = (float)((float)((float)(v46 * v97) + (float)(v45 * v96)) + (float)(v47 * v98)) + v64;
          if (!v101) {
            float v100 = v66;
          }
          char v103 = llroundf(v100);
          if (v102 < v64) {
            float v104 = v64;
          }
          else {
            float v104 = (float)((float)((float)(v46 * v97) + (float)(v45 * v96)) + (float)(v47 * v98)) + v64;
          }
          if (v102 <= v66) {
            float v105 = v104;
          }
          else {
            float v105 = v66;
          }
          char v106 = llroundf(v105);
          float v107 = v93 + v96;
          LOBYTE(v96) = *v83;
          float v108 = v59 * (float)((float)LODWORD(v96) - v57);
          float v109 = v94 + v97;
          LOBYTE(v94) = v83[1];
          float v110 = v95 + v98;
          float v111 = (float)(v65 + (float)(v107 * v69)) + (float)(v109 * v70);
          float v112 = (float)(v65 + (float)(v107 * v72)) + (float)(v109 * v73);
          float v113 = v88 + v108;
          float v114 = v111 + (float)(v110 * v71);
          float v115 = v112 + (float)(v110 * v74);
          if (v114 < v67) {
            float v116 = v67;
          }
          else {
            float v116 = v114;
          }
          float v117 = v89 + v108;
          float v118 = v90 + v108;
          *float v55 = v103;
          v55[1] = v106;
          if (v114 <= v68) {
            float v119 = v116;
          }
          else {
            float v119 = v68;
          }
          *((unsigned char *)result + v82) = llroundf(v119);
          if (v115 < v67) {
            float v120 = v67;
          }
          else {
            float v120 = v115;
          }
          if (v115 > v68) {
            float v120 = v68;
          }
          *((unsigned char *)result + v82 + 1) = llroundf(v120);
          float v121 = (float)((float)((float)(v46 * v117) + (float)(v45 * v113)) + (float)(v47 * v118)) + v64;
          float v122 = v66;
          if (v121 <= v66)
          {
            float v122 = (float)((float)((float)(v46 * v117) + (float)(v45 * v113)) + (float)(v47 * v118)) + v64;
            if (v121 < v64) {
              float v122 = v64;
            }
          }
          float v123 = v59 * (float)((float)LODWORD(v94) - v57);
          float v124 = v88 + v123;
          float v125 = v89 + v123;
          float v126 = v90 + v123;
          float v127 = (float)((float)((float)(v46 * v125) + (float)(v45 * v124)) + (float)(v47 * (float)(v90 + v123))) + v64;
          unsigned char *v84 = llroundf(v122);
          float v128 = v66;
          if (v127 <= v66)
          {
            float v128 = v127;
            if (v127 < v64) {
              float v128 = v64;
            }
          }
          v84[1] = llroundf(v128);
          float v129 = v113 + v124;
          float v130 = v117 + v125;
          float v131 = v118 + v126;
          float v8 = (float)((float)(v65 + (float)((float)(v113 + v124) * v69)) + (float)(v130 * v70)) + (float)(v131 * v71);
          float v7 = v68;
          if (v8 <= v68)
          {
            float v7 = v8;
            if (v8 < v67) {
              float v7 = v67;
            }
          }
          float v132 = (float)((float)(v65 + (float)(v129 * v72)) + (float)(v130 * v73)) + (float)(v131 * v74);
          *(unsigned char *)(v79 + v82 - 1) = llroundf(v7);
          float v53 = v68;
          if (v132 <= v68)
          {
            float v53 = v132;
            if (v132 < v67) {
              float v53 = v67;
            }
          }
          v76 += 2;
          v83 += 2;
          v55 += 2;
          v84 += 2;
          *(unsigned char *)(v79 + v82) = llroundf(v53);
          v82 += 2;
        }
        while (v19 > v82);
      }
      uint64_t v76 = &v80[v30];
      v78 += v31;
      float v55 = &v81[v34];
      uint64_t result = (void *)((char *)result + v35 + v35);
      v18 += 2;
      v79 += 2 * v35;
    }
    while (v22 > v18);
    if (v33 && v37)
    {
      do
      {
        uint64_t result = memcpy(v38, v56, v19);
        v56 += v32;
        v38 += v36;
        --v22;
      }
      while (v22);
    }
    else if (v37)
    {
      do
      {
        if (v19) {
          uint64_t result = memset(v38, 255, v19);
        }
        v38 += v36;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = v7 * a2;
  unint64_t v9 = 2 * *result;
  unint64_t v10 = (v7 + v7 * a2) / v9;
  uint64_t v11 = *((void *)result + 14);
  unint64_t v12 = *((void *)result + 13) * a2 / v9;
  uint64_t v13 = (void *)*((void *)result + 16);
  uint64_t v14 = *((void *)result + 15) + 2 * v12;
  uint64_t v15 = (uint64_t *)*((void *)result + 17);
  uint64_t v16 = v15[1];
  uint64_t v17 = v13[1];
  uint64_t v18 = (char *)(v17 + v16 * v14 + v11);
  unint64_t v19 = v8 / v9;
  if (v17) {
    uint64_t v20 = (_WORD *)(v17 + v16 * v14 + v11);
  }
  else {
    uint64_t v20 = 0;
  }
  if (2 * v10 != 2 * v19)
  {
    unint64_t v21 = 0;
    size_t v22 = *(void *)(result + 20);
    uint64_t v23 = *(void *)(result + 36);
    uint64_t v24 = *(void *)(result + 44) + 2 * v19;
    unint64_t v25 = 2 * v10 - 2 * v19;
    uint64_t v26 = *((void *)result + 19);
    uint64_t v27 = (void *)*((void *)result + 7);
    uint64_t v28 = (uint64_t *)*((void *)result + 8);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = v28[2];
    uint64_t v32 = v27[2];
    uint64_t v33 = (char *)(v32 + v31 * v24 + v23);
    uint64_t v34 = *v15;
    LOWORD(a5) = *(_WORD *)(v26 + 140);
    LOWORD(a6) = *(_WORD *)(v26 + 142);
    float v35 = 8191.0 / (float)*(unsigned int *)(v26 + 128);
    float v36 = (float)LODWORD(a5);
    float v37 = (float)LODWORD(a6);
    float v38 = v35 * *(float *)v26;
    float v243 = v35 * *(float *)(v26 + 16);
    float v244 = v35 * *(float *)(v26 + 8);
    float v39 = v35 * *(float *)(v26 + 20);
    *(float *)&unsigned int v40 = v35 * *(float *)(v26 + 28);
    float v241 = *(float *)&v40;
    float v242 = v39;
    LOWORD(v40) = *(_WORD *)(v26 + 144);
    float v41 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 146);
    float v42 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 148);
    float v43 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 150);
    float v44 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 152);
    float v45 = (float)v40;
    float v46 = *(float *)(v26 + 40);
    float v47 = *(float *)(v26 + 48) * 0.5;
    float v48 = *(float *)(v26 + 52) * 0.5;
    float v49 = *(float *)(v26 + 56) * 0.5;
    float v50 = *(float *)(v26 + 64) * 0.5;
    float v236 = *(float *)(v26 + 72);
    float v233 = *(float *)(v26 + 80);
    float v234 = *(float *)(v26 + 76);
    float v231 = *(float *)(v26 + 88);
    float v232 = *(float *)(v26 + 84);
    float v230 = *(float *)(v26 + 92);
    float v229 = *(float *)(v26 + 96);
    float v228 = *(float *)(v26 + 100);
    float v226 = *(float *)(v26 + 104);
    uint64_t v51 = v26 + 164;
    uint64_t v52 = v26 + 16548;
    uint64_t v53 = *v13 + v34 * v14;
    uint64_t v54 = v26 + 32932;
    uint64_t result = (unsigned __int8 *)(v53 + v11);
    float v55 = (unsigned char *)(*v27 + v29 * v24 + v23);
    uint64_t v56 = v27[1] + v30 * (v24 / 2) + v23;
    float v224 = *(float *)(v26 + 112);
    float v225 = *(float *)(v26 + 108);
    float v57 = *(float *)(v26 + 116);
    float v58 = *(float *)(v26 + 120);
    float v222 = *(float *)(v26 + 36);
    float v223 = v57;
    float v245 = (float)LODWORD(a6);
    float v239 = v38;
    float v240 = v42;
    float v238 = (float)LODWORD(a5);
    float v237 = *(float *)(v26 + 44);
    float v235 = *(float *)(v26 + 68) * 0.5;
    float v227 = *(float *)(v26 + 60) * 0.5;
    float v221 = v43;
    do
    {
      float v59 = &v55[v29];
      float v60 = &result[v34];
      if (v22)
      {
        size_t v61 = 0;
        float v62 = &v55[v29];
        float v63 = (_WORD *)((char *)v20 + v16);
        float v64 = &result[v34];
        float v65 = v20;
        do
        {
          LOBYTE(v57) = *(unsigned char *)(v56 + v61 + 1);
          float v66 = (float)LODWORD(v57) - v37;
          unsigned int v67 = LODWORD(v244);
          float v68 = v244 * v66;
          LOBYTE(v67) = *v55;
          float v69 = v38 * (float)((float)v67 - v36);
          float v70 = (float)(v244 * v66) + v69;
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = (float)(v244 * v66) + v69;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          LOBYTE(v70) = *(unsigned char *)(v56 + v61);
          float v72 = (float)LODWORD(v70) - v37;
          float v73 = (float)(v242 * v66) + (float)(v72 * v243);
          float v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            float v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v241 * v72;
          float v76 = (float)(v241 * v72) + v69;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          LOBYTE(v76) = v55[1];
          float v78 = v38 * (float)((float)LODWORD(v76) - v36);
          float v79 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            float v79 = v68 + v78;
            if ((float)(v68 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = 8191.0;
          if ((float)(v73 + v78) <= 8191.0)
          {
            float v80 = v73 + v78;
            if ((float)(v73 + v78) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v75 + v78;
          BOOL v82 = (float)(v75 + v78) <= 8191.0;
          float v83 = 8191.0;
          if (v82)
          {
            float v83 = v81;
            if (v81 < 0.0) {
              float v83 = 0.0;
            }
          }
          LOBYTE(v81) = *v62;
          float v84 = v38 * (float)((float)LODWORD(v81) - v36);
          float v85 = 8191.0;
          if ((float)(v68 + v84) <= 8191.0)
          {
            float v85 = v68 + v84;
            if ((float)(v68 + v84) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = 8191.0;
          if ((float)(v73 + v84) <= 8191.0)
          {
            float v86 = v73 + v84;
            if ((float)(v73 + v84) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v75 + v84;
          BOOL v82 = (float)(v75 + v84) <= 8191.0;
          float v88 = 8191.0;
          if (v82)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          LOBYTE(v6) = v62[1];
          float v89 = v38 * (float)((float)v6 - v36);
          float v90 = v68 + v89;
          BOOL v82 = (float)(v68 + v89) <= 8191.0;
          float v91 = 8191.0;
          if (v82)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v73 + v89;
          BOOL v82 = (float)(v73 + v89) <= 8191.0;
          float v93 = 8191.0;
          if (v82)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v75 + v89;
          float v95 = 8191.0;
          if (v94 <= 8191.0)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          float v115 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v116 = (float)((float)((float)(v224 * _S24) + (float)(v225 * _S2)) + (float)(v223 * _S25))
               + (float)(v58 * v115);
          float v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            float v117 = (float)((float)((float)(v224 * _S24) + (float)(v225 * _S2)) + (float)(v223 * _S25))
                 + (float)(v58 * v115);
            if (v116 < 0.0) {
              float v117 = 0.0;
            }
          }
          float v118 = v46;
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *(_WORD *)(v52 + 2 * llroundf(v117));
          float v123 = (float)((float)((float)(v224 * _S28) + (float)(v225 * _S26)) + (float)(v223 * _S30))
               + (float)(v58 * fmaxf(_S26, fmaxf(_S28, _S30)));
          float v124 = 8191.0;
          if (v123 <= 8191.0)
          {
            float v124 = v123;
            if (v123 < 0.0) {
              float v124 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *(_WORD *)(v52 + 2 * llroundf(v124));
          float v129 = v58;
          float v130 = (float)((float)((float)(v224 * _S10) + (float)(v225 * _S9)) + (float)(v223 * _S11))
               + (float)(v58 * fmaxf(_S9, fmaxf(_S10, _S11)));
          float v131 = 8191.0;
          if (v130 <= 8191.0)
          {
            float v131 = v130;
            if (v130 < 0.0) {
              float v131 = 0.0;
            }
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          float v136 = _S2 * _S1;
          float v137 = _S24 * _S1;
          float v138 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          float v140 = _S26 * _S1;
          float v141 = _S28 * _S1;
          float v142 = _S30 * _S1;
          LOWORD(_S1) = *(_WORD *)(v52 + 2 * llroundf(v131));
          __asm { FCVT            S2, H1 }
          float v144 = _S9 * _S2;
          float v145 = _S10 * _S2;
          float v146 = _S11 * _S2;
          float v147 = (float)((float)((float)(v224 * _S31) + (float)(v225 * _S29)) + (float)(v223 * _S8))
               + (float)(v129 * fmaxf(_S29, fmaxf(_S31, _S8)));
          float v148 = 8191.0;
          if (v147 <= 8191.0)
          {
            float v148 = v147;
            if (v147 < 0.0) {
              float v148 = 0.0;
            }
          }
          _H25 = *(_WORD *)(v52 + 2 * llroundf(v148));
          __asm { FCVT            S25, H25 }
          float v151 = _S29 * _S25;
          float v152 = _S31 * _S25;
          float v153 = _S8 * _S25;
          float v154 = (float)((float)(v234 * v137) + (float)(v136 * v236)) + (float)(v138 * v233);
          float v155 = (float)((float)(v231 * v137) + (float)(v136 * v232)) + (float)(v138 * v230);
          float v156 = (float)((float)(v228 * v137) + (float)(v136 * v229)) + (float)(v138 * v226);
          _S24 = (float)((float)(v234 * v141) + (float)(v140 * v236)) + (float)(v142 * v233);
          float v158 = (float)((float)(v231 * v141) + (float)(v140 * v232)) + (float)(v142 * v230);
          _S21 = (float)((float)(v228 * v141) + (float)(v140 * v229)) + (float)(v142 * v226);
          _S22 = (float)((float)(v234 * v145) + (float)(v144 * v236)) + (float)(v146 * v233);
          float v161 = (float)((float)(v231 * v145) + (float)(v144 * v232)) + (float)(v146 * v230);
          float v162 = (float)((float)(v228 * v145) + (float)(v144 * v229)) + (float)(v146 * v226);
          _S3 = (float)(v231 * v152) + (float)(v151 * v232);
          float v164 = (float)(v228 * v152) + (float)(v151 * v229);
          float v165 = (float)((float)(v234 * v152) + (float)(v151 * v236)) + (float)(v153 * v233);
          float v166 = _S3 + (float)(v153 * v230);
          float v167 = v164 + (float)(v153 * v226);
          _H1 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          unsigned int v171 = llroundf(fminf(fmaxf(_S24, 0.0), 8191.0));
          LOWORD(_S24) = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          unsigned int v172 = llroundf(fminf(fmaxf(v158, 0.0), 8191.0));
          LOWORD(_S3) = *(_WORD *)(v54 + 2 * v171);
          __asm
          {
            FCVT            S27, H1
            FCVT            S17, H3
          }
          unsigned int v175 = llroundf(fminf(fmaxf(_S21, 0.0), 8191.0));
          LOWORD(_S21) = *(_WORD *)(v54 + 2 * v172);
          unsigned int v176 = llroundf(fminf(fmaxf(_S22, 0.0), 8191.0));
          LOWORD(_S22) = *(_WORD *)(v54 + 2 * v175);
          _H1 = *(_WORD *)(v54 + 2 * v176);
          unsigned int v178 = llroundf(fminf(fmaxf(v162, 0.0), 8191.0));
          _H2 = *(_WORD *)(v54 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          unsigned int v180 = llroundf(fminf(fmaxf(v165, 0.0), 8191.0));
          _H3 = *(_WORD *)(v54 + 2 * v178);
          unsigned int v182 = llroundf(fminf(fmaxf(v166, 0.0), 8191.0));
          __asm { FCVT            S23, H21 }
          unsigned int v184 = llroundf(fminf(fmaxf(v167, 0.0), 8191.0));
          float v46 = v118;
          float v185 = (float)(v118 * _S27) + (float)(v222 * _S29);
          float v186 = _S27 + _S23;
          float v187 = (float)(v240 + (float)((float)(_S29 + _S17) * v47)) + (float)(v186 * v48);
          float v188 = (float)(v240 + (float)((float)(_S29 + _S17) * v227)) + (float)(v186 * v50);
          _H21 = *(_WORD *)(v54 + 2 * v180);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H22
          }
          float v192 = v185 + (float)(v237 * _S24);
          float v193 = _S24 + _S25;
          float v194 = v187 + (float)((float)(_S24 + _S25) * v49);
          float v195 = v188 + (float)(v193 * v235);
          if (v194 < v44) {
            float v196 = v44;
          }
          else {
            float v196 = v194;
          }
          BOOL v82 = v194 <= v45;
          _H22 = *(_WORD *)(v54 + 2 * v182);
          float v198 = v192 + v41;
          if (!v82) {
            float v196 = v45;
          }
          unsigned __int8 v199 = llroundf(v196);
          if (v198 < v41) {
            float v200 = v41;
          }
          else {
            float v200 = v192 + v41;
          }
          BOOL v82 = v198 <= v221;
          _H24 = *(_WORD *)(v54 + 2 * v184);
          *uint64_t result = v199;
          if (!v82) {
            float v200 = v221;
          }
          result[1] = llroundf(v200);
          float v202 = v45;
          if (v195 <= v45)
          {
            float v202 = v195;
            if (v195 < v44) {
              float v202 = v44;
            }
          }
          float v203 = (float)((float)((float)(v118 * _S23) + (float)(v222 * _S17)) + (float)(v237 * _S25)) + v41;
          result[2] = llroundf(v202);
          float v204 = v221;
          float v36 = v238;
          float v38 = v239;
          float v58 = v129;
          if (v203 <= v221)
          {
            if (v203 < v41) {
              float v204 = v41;
            }
            else {
              float v204 = v203;
            }
          }
          result[3] = llroundf(v204);
          if (v65) {
            *v65++ = 0;
          }
          __asm
          {
            FCVT            S17, H1
            FCVT            S23, H2
            FCVT            S25, H3
            FCVT            S1, H21
            FCVT            S3, H22
            FCVT            S2, H24
          }
          float v211 = (float)((float)((float)(v118 * _S23) + (float)(v222 * _S17)) + (float)(v237 * _S25)) + v41;
          float v212 = _S17 + _S1;
          float v213 = _S23 + _S3;
          float v214 = (float)((float)(v240 + (float)(v212 * v47)) + (float)(v213 * v48)) + (float)((float)(_S25 + _S2) * v49);
          float v215 = (float)((float)(v240 + (float)(v212 * v227)) + (float)(v213 * v50))
               + (float)((float)(_S25 + _S2) * v235);
          if (v214 < v44) {
            *(float *)&unsigned int v6 = v44;
          }
          else {
            *(float *)&unsigned int v6 = v214;
          }
          if (v214 <= v45) {
            float v216 = *(float *)&v6;
          }
          else {
            float v216 = v45;
          }
          *float v64 = llroundf(v216);
          if (v211 < v41) {
            float v217 = v41;
          }
          else {
            float v217 = v211;
          }
          if (v211 <= v221) {
            float v218 = v217;
          }
          else {
            float v218 = v221;
          }
          v64[1] = llroundf(v218);
          float v219 = v45;
          if (v215 <= v45)
          {
            float v219 = v215;
            if (v215 < v44) {
              float v219 = v44;
            }
          }
          float v57 = (float)((float)((float)(v118 * _S3) + (float)(v222 * _S1)) + (float)(v237 * _S2)) + v41;
          v64[2] = llroundf(v219);
          float v220 = v221;
          if (v57 <= v221)
          {
            float v220 = v57;
            if (v57 < v41) {
              float v220 = v41;
            }
          }
          v64[3] = llroundf(v220);
          float v37 = v245;
          if (v63) {
            *v63++ = 0;
          }
          v55 += 2;
          v62 += 2;
          result += 4;
          v64 += 4;
          v61 += 2;
        }
        while (v22 > v61);
      }
      float v55 = &v59[v29];
      v56 += v30;
      uint64_t result = &v60[v34];
      v21 += 2;
    }
    while (v25 > v21);
    if (v32 && v20)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v18, v33, v22);
        v33 += v31;
        v18 += v16;
        --v25;
      }
      while (v25);
    }
    else if (v20)
    {
      do
      {
        if (v22) {
          uint64_t result = (unsigned __int8 *)memset(v18, 255, v22);
        }
        v18 += v16;
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_2vuyf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_2vuyf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = v6 * a2;
  unint64_t v8 = 2 * *result;
  unint64_t v9 = (v6 + v6 * a2) / v8;
  uint64_t v10 = *((void *)result + 14);
  uint64_t v11 = (void *)*((void *)result + 16);
  uint64_t v12 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v8);
  uint64_t v13 = (uint64_t *)*((void *)result + 17);
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (char *)(v15 + v14 * v12 + v10);
  unint64_t v17 = v7 / v8;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v10);
  }
  else {
    uint64_t v18 = 0;
  }
  if (2 * v9 != 2 * v17)
  {
    unint64_t v19 = 0;
    size_t v20 = *(void *)(result + 20);
    uint64_t v21 = *(void *)(result + 36);
    uint64_t v22 = *(void *)(result + 44) + 2 * v17;
    unint64_t v23 = 2 * v9 - 2 * v17;
    uint64_t v24 = *((void *)result + 19);
    unint64_t v25 = (void *)*((void *)result + 7);
    uint64_t v26 = (uint64_t *)*((void *)result + 8);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = (char *)(v30 + v29 * v22 + v21);
    uint64_t v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v24;
    float v198 = v33 * *(float *)(v24 + 16);
    float v199 = v33 * *(float *)(v24 + 8);
    float v37 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v24 + 28);
    float v196 = *(float *)&v38;
    float v197 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    float v43 = (float)v38;
    float v44 = *(float *)(v24 + 36);
    float v45 = *(float *)(v24 + 40);
    float v46 = *(float *)(v24 + 44);
    float v47 = *(float *)(v24 + 48) * 0.5;
    float v48 = *(float *)(v24 + 52) * 0.5;
    float v49 = *(float *)(v24 + 56) * 0.5;
    float v201 = *(float *)(v24 + 64) * 0.5;
    float v202 = *(float *)(v24 + 60) * 0.5;
    float v200 = *(float *)(v24 + 68) * 0.5;
    float v194 = *(float *)(v24 + 76);
    float v195 = *(float *)(v24 + 72);
    float v192 = *(float *)(v24 + 84);
    float v193 = *(float *)(v24 + 80);
    float v190 = *(float *)(v24 + 92);
    float v191 = *(float *)(v24 + 88);
    float v189 = *(float *)(v24 + 96);
    float v187 = *(float *)(v24 + 100);
    float v50 = *(float *)(v24 + 104);
    float v185 = v50;
    uint64_t v51 = v24 + 16548;
    uint64_t v52 = v24 + 164;
    uint64_t v53 = (unsigned char *)(*v11 + v32 * v12 + v10);
    uint64_t result = (unsigned __int8 *)(*v25 + v27 * v22 + v21);
    if (v22 >= 0) {
      uint64_t v54 = v22;
    }
    else {
      uint64_t v54 = v22 + 1;
    }
    uint64_t v55 = v25[1] + v28 * (v54 >> 1) + v21;
    float v188 = v46;
    float v186 = v40;
    float v184 = v36;
    do
    {
      uint64_t v56 = &result[v27];
      float v57 = &v53[v32];
      if (v20)
      {
        size_t v58 = 0;
        float v59 = &result[v27];
        float v60 = (_WORD *)((char *)v18 + v14);
        size_t v61 = &v53[v32];
        float v62 = v18;
        do
        {
          LOBYTE(v50) = *(unsigned char *)(v55 + v58 + 1);
          float v63 = (float)LODWORD(v50) - v35;
          unsigned int v64 = LODWORD(v199);
          float v65 = v199 * v63;
          LOBYTE(v64) = *result;
          float v66 = v36 * (float)((float)v64 - v34);
          float v67 = (float)(v199 * v63) + v66;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = (float)(v199 * v63) + v66;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          LOBYTE(v67) = *(unsigned char *)(v55 + v58);
          float v69 = (float)LODWORD(v67) - v35;
          float v70 = (float)(v197 * v63) + (float)(v69 * v198);
          float v71 = 8191.0;
          if ((float)(v66 + v70) <= 8191.0)
          {
            float v71 = v66 + v70;
            if ((float)(v66 + v70) < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v196 * v69;
          float v73 = (float)(v196 * v69) + v66;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          LOBYTE(v73) = result[1];
          float v75 = v36 * (float)((float)LODWORD(v73) - v34);
          float v76 = 8191.0;
          if ((float)(v65 + v75) <= 8191.0)
          {
            float v76 = v65 + v75;
            if ((float)(v65 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v70 + v75;
          float v78 = 8191.0;
          if ((float)(v70 + v75) <= 8191.0)
          {
            float v78 = v70 + v75;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v72 + v75;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          LOBYTE(v79) = *v59;
          float v81 = v36 * (float)((float)LODWORD(v79) - v34);
          float v82 = 8191.0;
          if ((float)(v65 + v81) <= 8191.0)
          {
            float v82 = v65 + v81;
            if ((float)(v65 + v81) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = 8191.0;
          if ((float)(v70 + v81) <= 8191.0)
          {
            float v83 = v70 + v81;
            if ((float)(v70 + v81) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v72 + v81;
          BOOL v85 = (float)(v72 + v81) <= 8191.0;
          float v86 = 8191.0;
          if (v85)
          {
            float v86 = v84;
            if (v84 < 0.0) {
              float v86 = 0.0;
            }
          }
          LOBYTE(v77) = v59[1];
          float v87 = v36 * (float)((float)LODWORD(v77) - v34);
          float v88 = v65 + v87;
          BOOL v85 = (float)(v65 + v87) <= 8191.0;
          float v89 = 8191.0;
          if (v85)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v35;
          float v91 = v70 + v87;
          BOOL v85 = (float)(v70 + v87) <= 8191.0;
          float v92 = 8191.0;
          if (v85)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v34;
          float v94 = v72 + v87;
          float v95 = 8191.0;
          if (v94 <= 8191.0)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H6 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H26 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H17 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          unsigned int v115 = llroundf(fminf(fmaxf(v86, 0.0), 8191.0));
          __asm { FCVT            S1, H17 }
          _H17 = *(_WORD *)(v52 + 2 * v115);
          __asm { FCVT            S17, H17 }
          _H7 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v123 = llroundf(fminf(fmaxf(v95, 0.0), 8191.0));
          _S25 = (float)((float)(v194 * _S4) + (float)(_S3 * v195)) + (float)(_S5 * v193);
          float v125 = (float)((float)(v191 * _S4) + (float)(_S3 * v192)) + (float)(_S5 * v190);
          _S3 = (float)((float)(v187 * _S4) + (float)(_S3 * v189)) + (float)(_S5 * v185);
          float v127 = (float)((float)(v194 * _S6) + (float)(_S2 * v195)) + (float)(_S26 * v193);
          float v128 = (float)((float)(v191 * _S6) + (float)(_S2 * v192)) + (float)(_S26 * v190);
          float v129 = (float)((float)(v187 * _S6) + (float)(_S2 * v189)) + (float)(_S26 * v185);
          float v130 = (float)((float)(v194 * _S1) + (float)(_S27 * v195)) + (float)(_S17 * v193);
          float v131 = (float)((float)(v191 * _S1) + (float)(_S27 * v192)) + (float)(_S17 * v190);
          float v132 = (float)((float)(v187 * _S1) + (float)(_S27 * v189)) + (float)(_S17 * v185);
          _S1 = (float)(v194 * _S24) + (float)(_S7 * v195);
          float v134 = (float)(v191 * _S24) + (float)(_S7 * v192);
          float v135 = (float)(v187 * _S24) + (float)(_S7 * v189);
          LOWORD(_S24) = *(_WORD *)(v52 + 2 * v123);
          __asm { FCVT            S24, H24 }
          float v137 = _S1 + (float)(_S24 * v193);
          float v138 = v134 + (float)(_S24 * v190);
          float v139 = v135 + (float)(_S24 * v185);
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          LOWORD(_S25) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          unsigned int v141 = llroundf(fminf(fmaxf(v128, 0.0), 8191.0));
          LOWORD(_S3) = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H1
            FCVT            S5, H3
          }
          LOWORD(_S3) = *(_WORD *)(v51 + 2 * v141);
          _H21 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          unsigned int v148 = llroundf(fminf(fmaxf(v138, 0.0), 8191.0));
          __asm { FCVT            S3, H3 }
          unsigned int v150 = llroundf(fminf(fmaxf(v139, 0.0), 8191.0));
          _H6 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H25
            FCVT            S25, H21
          }
          float v154 = (float)((float)(v45 * _S28) + (float)(v44 * _S24)) + (float)(v188 * _S26);
          float v155 = (float)((float)(v186 + (float)((float)(_S24 + _S5) * v47)) + (float)((float)(_S28 + _S3) * v48))
               + (float)((float)(_S26 + _S25) * v49);
          float v156 = (float)((float)(v186 + (float)((float)(_S24 + _S5) * v202)) + (float)((float)(_S28 + _S3) * v201))
               + (float)((float)(_S26 + _S25) * v200);
          if (v155 < v42) {
            float v157 = v42;
          }
          else {
            float v157 = v155;
          }
          BOOL v85 = v155 <= v43;
          _H7 = *(_WORD *)(v51 + 2 * v148);
          float v159 = v154 + v39;
          if (v85) {
            float v160 = v157;
          }
          else {
            float v160 = v43;
          }
          char v161 = llroundf(v160);
          if (v159 < v39) {
            float v162 = v39;
          }
          else {
            float v162 = v159;
          }
          _H24 = *(_WORD *)(v51 + 2 * v150);
          *uint64_t v53 = v161;
          if (v159 <= v41) {
            float v164 = v162;
          }
          else {
            float v164 = v41;
          }
          v53[1] = llroundf(v164);
          float v165 = v43;
          if (v156 <= v43)
          {
            float v165 = v156;
            if (v156 < v42) {
              float v165 = v42;
            }
          }
          float v166 = (float)((float)((float)(v45 * _S3) + (float)(v44 * _S5)) + (float)(v188 * _S25)) + v39;
          v53[2] = llroundf(v165);
          float v167 = v41;
          if (v166 <= v41)
          {
            if (v166 < v39) {
              float v167 = v39;
            }
            else {
              float v167 = v166;
            }
          }
          v53[3] = llroundf(v167);
          float v34 = v93;
          if (v62) {
            *v62++ = 0;
          }
          float v35 = v90;
          float v36 = v184;
          __asm
          {
            FCVT            S5, H1
            FCVT            S17, H2
            FCVT            S4, H4
            FCVT            S1, H6
            FCVT            S3, H7
            FCVT            S2, H24
          }
          float v174 = (float)((float)((float)(v45 * _S17) + (float)(v44 * _S5)) + (float)(v188 * _S4)) + v39;
          float v175 = _S5 + _S1;
          float v176 = _S17 + _S3;
          float v177 = _S4 + _S2;
          float v178 = (float)((float)(v186 + (float)(v175 * v47)) + (float)(v176 * v48)) + (float)(v177 * v49);
          float v179 = (float)((float)(v186 + (float)(v175 * v202)) + (float)(v176 * v201)) + (float)(v177 * v200);
          if (v178 < v42) {
            float v180 = v42;
          }
          else {
            float v180 = v178;
          }
          if (v178 > v43) {
            float v180 = v43;
          }
          *size_t v61 = llroundf(v180);
          if (v174 < v39) {
            float v181 = v39;
          }
          else {
            float v181 = v174;
          }
          if (v174 > v41) {
            float v181 = v41;
          }
          v61[1] = llroundf(v181);
          float v182 = v43;
          if (v179 <= v43)
          {
            float v182 = v179;
            if (v179 < v42) {
              float v182 = v42;
            }
          }
          float v50 = (float)((float)((float)(v45 * _S3) + (float)(v44 * _S1)) + (float)(v188 * _S2)) + v39;
          v61[2] = llroundf(v182);
          float v183 = v41;
          if (v50 <= v41)
          {
            float v183 = v50;
            if (v50 < v39) {
              float v183 = v39;
            }
          }
          v61[3] = llroundf(v183);
          if (v60) {
            *v60++ = 0;
          }
          result += 2;
          v59 += 2;
          v53 += 4;
          v61 += 4;
          v58 += 2;
        }
        while (v20 > v58);
      }
      uint64_t result = &v56[v27];
      v55 += v28;
      uint64_t v53 = &v57[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v16, v31, v20);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          uint64_t result = (unsigned __int8 *)memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_2vuyf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_2vuyf_GCD);
  return 0;
}

void *vt_Copy_420vf_rgb_2vuyf_GCD(void *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v14 = *(void *)((char *)result + 28);
  unint64_t v15 = v14 * a2;
  unint64_t v16 = 2 * *(unsigned __int8 *)result;
  unint64_t v17 = (v14 + v14 * a2) / v16;
  uint64_t v18 = result[14];
  uint64_t v19 = (void *)result[16];
  uint64_t v20 = result[15] + 2 * (result[13] * a2 / v16);
  uint64_t v21 = (uint64_t *)result[17];
  uint64_t v22 = v21[1];
  uint64_t v23 = v19[1];
  uint64_t v24 = (char *)(v23 + v22 * v20 + v18);
  unint64_t v25 = v15 / v16;
  if (v23) {
    uint64_t v26 = (_WORD *)(v23 + v22 * v20 + v18);
  }
  else {
    uint64_t v26 = 0;
  }
  if (2 * v17 != 2 * v25)
  {
    unint64_t v27 = 0;
    size_t v28 = *(void *)((char *)result + 20);
    uint64_t v29 = *(void *)((char *)result + 36);
    uint64_t v30 = *(void *)((char *)result + 44) + 2 * v25;
    unint64_t v31 = 2 * v17 - 2 * v25;
    uint64_t v32 = result[19];
    uint64_t v33 = (void *)result[7];
    uint64_t v34 = (uint64_t *)result[8];
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    uint64_t v37 = v34[2];
    uint64_t v38 = v33[2];
    uint64_t v39 = (char *)(v38 + v37 * v30 + v29);
    uint64_t v40 = *v21;
    LOWORD(a6) = *(_WORD *)(v32 + 140);
    LOWORD(a7) = *(_WORD *)(v32 + 142);
    float v41 = (float)*(unsigned int *)(v32 + 136) / (float)*(unsigned int *)(v32 + 128);
    LOWORD(v9) = *(_WORD *)(v32 + 144);
    LOWORD(v10) = *(_WORD *)(v32 + 146);
    LOWORD(v11) = *(_WORD *)(v32 + 148);
    LOWORD(v12) = *(_WORD *)(v32 + 150);
    LOWORD(v13) = *(_WORD *)(v32 + 152);
    float v42 = *(float *)(v32 + 36);
    float v43 = *(float *)(v32 + 40);
    float v44 = *(float *)(v32 + 44);
    float v45 = (float)LODWORD(a6);
    float v46 = (float)LODWORD(a7);
    float v47 = v41 * *(float *)v32;
    float v118 = v41 * *(float *)(v32 + 8);
    float v117 = v41 * *(float *)(v32 + 16);
    float v116 = v41 * *(float *)(v32 + 20);
    float v48 = v41 * *(float *)(v32 + 28);
    float v49 = (float)v9;
    float v50 = (float)LODWORD(v10);
    float v51 = (float)v11;
    float v52 = (float)v12;
    float v53 = (float)v13;
    float v54 = 0.5;
    float v55 = *(float *)(v32 + 48) * 0.5;
    float v56 = *(float *)(v32 + 52) * 0.5;
    float v57 = *(float *)(v32 + 56) * 0.5;
    float v58 = *(float *)(v32 + 60) * 0.5;
    float v59 = *(float *)(v32 + 64) * 0.5;
    float v60 = *(float *)(v32 + 68) * 0.5;
    size_t v61 = (unsigned char *)(*v19 + v40 * v20 + v18);
    float v62 = (unsigned char *)(*v33 + v35 * v30 + v29);
    if (v30 >= 0) {
      uint64_t v63 = v30;
    }
    else {
      uint64_t v63 = v30 + 1;
    }
    uint64_t v64 = v33[1] + v36 * (v63 >> 1) + v29;
    do
    {
      float v65 = &v62[v35];
      uint64_t result = &v61[v40];
      if (v28)
      {
        size_t v66 = 0;
        float v67 = &v62[v35];
        float v68 = v26;
        float v69 = &v61[v40];
        float v70 = (_WORD *)((char *)v26 + v22);
        do
        {
          LOBYTE(v54) = *(unsigned char *)(v64 + v66);
          *(float *)&unsigned int v71 = (float)LODWORD(v54) - v46;
          LOBYTE(v10) = *(unsigned char *)(v64 + v66 + 1);
          float v72 = (float)LODWORD(v10) - v46;
          float v73 = v118 * v72;
          *(float *)&unsigned int v74 = v116 * v72;
          float v75 = *(float *)&v74 + (float)(*(float *)&v71 * v117);
          float v76 = v48 * *(float *)&v71;
          LOBYTE(v71) = *v62;
          float v77 = v47 * (float)((float)v71 - v45);
          LOBYTE(v74) = v62[1];
          float v78 = v47 * (float)((float)v74 - v45);
          LOBYTE(v8) = *v67;
          LOBYTE(v7) = v67[1];
          float v79 = v73 + v77;
          float v80 = v77 + v75;
          float v81 = v76 + v77;
          float v82 = v73 + v78;
          float v83 = v75 + v78;
          float v84 = v76 + v78;
          float v85 = (float)((float)((float)(v43 * (float)(v77 + v75)) + (float)(v42 * (float)(v73 + v77)))
                      + (float)(v44 * (float)(v76 + v77)))
              + v49;
          float v86 = v79 + (float)(v73 + v78);
          float v87 = v80 + (float)(v75 + v78);
          float v88 = v81 + (float)(v76 + v78);
          float v89 = (float)((float)(v50 + (float)(v86 * v55)) + (float)(v87 * v56)) + (float)(v88 * v57);
          if (v89 < v52) {
            float v90 = v52;
          }
          else {
            float v90 = (float)((float)(v50 + (float)(v86 * v55)) + (float)(v87 * v56)) + (float)(v88 * v57);
          }
          if (v89 > v53) {
            float v90 = v53;
          }
          *size_t v61 = llroundf(v90);
          float v91 = v51;
          if (v85 <= v51)
          {
            float v91 = v85;
            if (v85 < v49) {
              float v91 = v49;
            }
          }
          float v92 = (float)((float)(v50 + (float)(v86 * v58)) + (float)(v87 * v59)) + (float)(v88 * v60);
          v61[1] = llroundf(v91);
          float v93 = v53;
          if (v92 <= v53)
          {
            float v93 = v92;
            if (v92 < v52) {
              float v93 = v52;
            }
          }
          float v94 = (float)((float)((float)(v43 * v83) + (float)(v42 * v82)) + (float)(v44 * v84)) + v49;
          v61[2] = llroundf(v93);
          float v95 = v51;
          if (v94 <= v51)
          {
            if (v94 < v49) {
              float v95 = v49;
            }
            else {
              float v95 = (float)((float)((float)(v43 * v83) + (float)(v42 * v82)) + (float)(v44 * v84)) + v49;
            }
          }
          v61[3] = llroundf(v95);
          if (v68) {
            *v68++ = 0;
          }
          float v96 = v47 * (float)((float)LODWORD(v8) - v45);
          float v97 = v47 * (float)((float)LODWORD(v7) - v45);
          float v98 = v73 + v96;
          float v99 = v75 + v96;
          float v100 = v76 + v96;
          float v101 = v73 + v97;
          float v102 = v75 + v97;
          float v103 = v76 + v97;
          float v104 = (float)((float)((float)(v43 * v99) + (float)(v42 * v98)) + (float)(v44 * v100)) + v49;
          float v105 = (float)((float)((float)(v43 * v102) + (float)(v42 * v101)) + (float)(v44 * v103)) + v49;
          float v106 = v98 + v101;
          float v8 = v50 + (float)(v106 * v55);
          float v107 = v99 + v102;
          float v7 = v8 + (float)(v107 * v56);
          float v108 = v100 + v103;
          float v109 = v7 + (float)(v108 * v57);
          float v10 = (float)(v50 + (float)(v106 * v58)) + (float)(v107 * v59);
          if (v109 < v52) {
            float v110 = v52;
          }
          else {
            float v110 = v7 + (float)(v108 * v57);
          }
          if (v109 <= v53) {
            float v111 = v110;
          }
          else {
            float v111 = v53;
          }
          float v112 = v10 + (float)(v108 * v60);
          *float v69 = llroundf(v111);
          if (v104 < v49) {
            float v113 = v49;
          }
          else {
            float v113 = v104;
          }
          if (v104 > v51) {
            float v113 = v51;
          }
          v69[1] = llroundf(v113);
          if (v112 < v52) {
            float v114 = v52;
          }
          else {
            float v114 = v112;
          }
          if (v112 <= v53) {
            float v115 = v114;
          }
          else {
            float v115 = v53;
          }
          v69[2] = llroundf(v115);
          float v54 = v51;
          if (v105 <= v51)
          {
            float v54 = v105;
            if (v105 < v49) {
              float v54 = v49;
            }
          }
          v69[3] = llroundf(v54);
          if (v70) {
            *v70++ = 0;
          }
          v62 += 2;
          v67 += 2;
          v61 += 4;
          v69 += 4;
          v66 += 2;
        }
        while (v28 > v66);
      }
      float v62 = &v65[v35];
      v64 += v36;
      size_t v61 = (char *)result + v40;
      v27 += 2;
    }
    while (v31 > v27);
    if (v38 && v26)
    {
      do
      {
        uint64_t result = memcpy(v24, v39, v28);
        v39 += v37;
        v24 += v22;
        --v31;
      }
      while (v31);
    }
    else if (v26)
    {
      do
      {
        if (v28) {
          uint64_t result = memset(v24, 255, v28);
        }
        v24 += v22;
        --v31;
      }
      while (v31);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = v7 * a2;
  unint64_t v9 = 2 * *result;
  unint64_t v10 = (v7 + v7 * a2) / v9;
  uint64_t v11 = *((void *)result + 14);
  unint64_t v12 = *((void *)result + 13) * a2 / v9;
  uint64_t v13 = (void *)*((void *)result + 16);
  uint64_t v14 = *((void *)result + 15) + 2 * v12;
  uint64_t v15 = (uint64_t *)*((void *)result + 17);
  uint64_t v16 = v15[1];
  uint64_t v17 = v13[1];
  uint64_t v18 = (char *)(v17 + v16 * v14 + v11);
  unint64_t v19 = v8 / v9;
  if (v17) {
    uint64_t v20 = (_WORD *)(v17 + v16 * v14 + v11);
  }
  else {
    uint64_t v20 = 0;
  }
  if (2 * v10 != 2 * v19)
  {
    unint64_t v21 = 0;
    size_t v22 = *(void *)(result + 20);
    uint64_t v23 = *(void *)(result + 36);
    uint64_t v24 = *(void *)(result + 44) + 2 * v19;
    unint64_t v25 = 2 * v10 - 2 * v19;
    uint64_t v26 = *((void *)result + 19);
    unint64_t v27 = (void *)*((void *)result + 7);
    uint64_t v28 = (uint64_t *)*((void *)result + 8);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = v28[2];
    uint64_t v32 = v27[2];
    uint64_t v33 = (char *)(v32 + v31 * v24 + v23);
    uint64_t v34 = *v15;
    LOWORD(a5) = *(_WORD *)(v26 + 140);
    LOWORD(a6) = *(_WORD *)(v26 + 142);
    float v35 = 8191.0 / (float)*(unsigned int *)(v26 + 128);
    float v36 = (float)LODWORD(a5);
    float v37 = (float)LODWORD(a6);
    float v38 = v35 * *(float *)v26;
    float v232 = v35 * *(float *)(v26 + 16);
    float v233 = v35 * *(float *)(v26 + 8);
    float v39 = v35 * *(float *)(v26 + 20);
    *(float *)&unsigned int v40 = v35 * *(float *)(v26 + 28);
    float v230 = *(float *)&v40;
    float v231 = v39;
    LOWORD(v40) = *(_WORD *)(v26 + 144);
    float v41 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 146);
    float v42 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 148);
    float v43 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 150);
    float v44 = (float)v40;
    LOWORD(v40) = *(_WORD *)(v26 + 152);
    float v45 = (float)v40;
    float v46 = *(float *)(v26 + 36);
    float v47 = *(float *)(v26 + 40);
    float v48 = *(float *)(v26 + 52) * 0.5;
    float v225 = *(float *)(v26 + 72);
    float v222 = *(float *)(v26 + 80);
    float v223 = *(float *)(v26 + 76);
    float v220 = *(float *)(v26 + 88);
    float v221 = *(float *)(v26 + 84);
    float v218 = *(float *)(v26 + 96);
    float v219 = *(float *)(v26 + 92);
    float v217 = *(float *)(v26 + 100);
    float v49 = *(float *)(v26 + 108);
    float v215 = *(float *)(v26 + 104);
    uint64_t v50 = v26 + 164;
    uint64_t v51 = v26 + 16548;
    uint64_t v52 = *v13 + v34 * v14;
    uint64_t v53 = v26 + 32932;
    uint64_t result = (unsigned __int8 *)(v52 + v11);
    float v54 = (unsigned char *)(*v27 + v29 * v24 + v23);
    uint64_t v55 = v27[1] + v30 * (v24 / 2) + v23;
    float v56 = *(float *)(v26 + 112);
    float v57 = *(float *)(v26 + 120);
    float v210 = v57;
    float v211 = *(float *)(v26 + 116);
    float v234 = (float)LODWORD(a6);
    float v228 = (float)LODWORD(a5);
    float v229 = v38;
    float v227 = *(float *)(v26 + 60) * 0.5;
    float v226 = *(float *)(v26 + 64) * 0.5;
    float v224 = *(float *)(v26 + 68) * 0.5;
    float v216 = *(float *)(v26 + 48) * 0.5;
    float v213 = *(float *)(v26 + 56) * 0.5;
    float v214 = *(float *)(v26 + 44);
    float v212 = v42;
    do
    {
      float v58 = &v54[v29];
      float v59 = &result[v34];
      if (v22)
      {
        size_t v60 = 0;
        size_t v61 = &v54[v29];
        float v62 = (_WORD *)((char *)v20 + v16);
        uint64_t v63 = &result[v34];
        uint64_t v64 = v20;
        do
        {
          LOBYTE(v57) = *(unsigned char *)(v55 + v60 + 1);
          float v65 = (float)LODWORD(v57) - v37;
          unsigned int v66 = LODWORD(v233);
          float v67 = v233 * v65;
          LOBYTE(v66) = *v54;
          float v68 = v38 * (float)((float)v66 - v36);
          float v69 = (float)(v233 * v65) + v68;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = (float)(v233 * v65) + v68;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          LOBYTE(v69) = *(unsigned char *)(v55 + v60);
          float v71 = (float)LODWORD(v69) - v37;
          float v72 = (float)(v231 * v65) + (float)(v71 * v232);
          float v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            float v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v230 * v71;
          float v75 = (float)(v230 * v71) + v68;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          LOBYTE(v75) = v54[1];
          float v77 = v38 * (float)((float)LODWORD(v75) - v36);
          float v78 = 8191.0;
          if ((float)(v67 + v77) <= 8191.0)
          {
            float v78 = v67 + v77;
            if ((float)(v67 + v77) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            float v79 = v72 + v77;
            if ((float)(v72 + v77) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v74 + v77;
          BOOL v81 = (float)(v74 + v77) <= 8191.0;
          float v82 = 8191.0;
          if (v81)
          {
            float v82 = v80;
            if (v80 < 0.0) {
              float v82 = 0.0;
            }
          }
          LOBYTE(v80) = *v61;
          float v83 = v38 * (float)((float)LODWORD(v80) - v36);
          float v84 = 8191.0;
          if ((float)(v67 + v83) <= 8191.0)
          {
            float v84 = v67 + v83;
            if ((float)(v67 + v83) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = 8191.0;
          if ((float)(v72 + v83) <= 8191.0)
          {
            float v85 = v72 + v83;
            if ((float)(v72 + v83) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v74 + v83;
          BOOL v81 = (float)(v74 + v83) <= 8191.0;
          float v87 = 8191.0;
          if (v81)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          LOBYTE(v6) = v61[1];
          float v88 = v38 * (float)((float)LODWORD(v6) - v36);
          float v89 = v67 + v88;
          BOOL v81 = (float)(v67 + v88) <= 8191.0;
          float v90 = 8191.0;
          if (v81)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v72 + v88;
          BOOL v81 = (float)(v72 + v88) <= 8191.0;
          float v92 = 8191.0;
          if (v81)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v74 + v88;
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          float v114 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v115 = (float)((float)((float)(v56 * _S24) + (float)(v49 * _S2)) + (float)(v211 * _S25))
               + (float)(v210 * v114);
          float v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            float v116 = (float)((float)((float)(v56 * _S24) + (float)(v49 * _S2)) + (float)(v211 * _S25))
                 + (float)(v210 * v114);
            if (v115 < 0.0) {
              float v116 = 0.0;
            }
          }
          float v117 = v47;
          float v118 = v46;
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *(_WORD *)(v51 + 2 * llroundf(v116));
          float v123 = (float)((float)((float)(v56 * _S28) + (float)(v49 * _S26)) + (float)(v211 * _S30))
               + (float)(v210 * fmaxf(_S26, fmaxf(_S28, _S30)));
          float v124 = 8191.0;
          if (v123 <= 8191.0)
          {
            float v124 = v123;
            if (v123 < 0.0) {
              float v124 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *(_WORD *)(v51 + 2 * llroundf(v124));
          float v129 = fmaxf(_S9, fmaxf(_S10, _S11));
          float v130 = (float)((float)((float)(v56 * _S10) + (float)(v49 * _S9)) + (float)(v211 * _S11))
               + (float)(v210 * v129);
          float v131 = 8191.0;
          if (v130 <= 8191.0)
          {
            float v131 = (float)((float)((float)(v56 * _S10) + (float)(v49 * _S9)) + (float)(v211 * _S11))
                 + (float)(v210 * v129);
            if (v130 < 0.0) {
              float v131 = 0.0;
            }
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          float v136 = _S2 * _S1;
          float v137 = _S24 * _S1;
          float v138 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          float v140 = _S26 * _S1;
          float v141 = _S28 * _S1;
          float v142 = _S30 * _S1;
          LOWORD(_S1) = *(_WORD *)(v51 + 2 * llroundf(v131));
          __asm { FCVT            S2, H1 }
          float v144 = _S9 * _S2;
          float v145 = _S10 * _S2;
          float v146 = _S11 * _S2;
          float v147 = (float)((float)((float)(v56 * _S31) + (float)(v49 * _S29)) + (float)(v211 * _S8))
               + (float)(v210 * fmaxf(_S29, fmaxf(_S31, _S8)));
          float v148 = 8191.0;
          if (v147 <= 8191.0)
          {
            float v148 = v147;
            if (v147 < 0.0) {
              float v148 = 0.0;
            }
          }
          _H25 = *(_WORD *)(v51 + 2 * llroundf(v148));
          __asm { FCVT            S25, H25 }
          float v151 = _S29 * _S25;
          float v152 = _S31 * _S25;
          float v153 = _S8 * _S25;
          float v154 = (float)((float)(v223 * v137) + (float)(v136 * v225)) + (float)(v138 * v222);
          float v155 = (float)((float)(v220 * v137) + (float)(v136 * v221)) + (float)(v138 * v219);
          float v156 = (float)((float)(v217 * v137) + (float)(v136 * v218)) + (float)(v138 * v215);
          float v157 = (float)((float)(v223 * v141) + (float)(v140 * v225)) + (float)(v142 * v222);
          float v158 = (float)((float)(v220 * v141) + (float)(v140 * v221)) + (float)(v142 * v219);
          float v159 = (float)((float)(v217 * v141) + (float)(v140 * v218)) + (float)(v142 * v215);
          float v160 = (float)((float)(v223 * v145) + (float)(v144 * v225)) + (float)(v146 * v222);
          float v161 = (float)((float)(v220 * v145) + (float)(v144 * v221)) + (float)(v146 * v219);
          float v162 = (float)((float)(v217 * v145) + (float)(v144 * v218)) + (float)(v146 * v215);
          float v163 = (float)((float)(v223 * v152) + (float)(v151 * v225)) + (float)(v153 * v222);
          float v164 = (float)((float)(v220 * v152) + (float)(v151 * v221)) + (float)(v153 * v219);
          float v165 = (float)((float)(v217 * v152) + (float)(v151 * v218)) + (float)(v153 * v215);
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H1
            FCVT            S9, H2
          }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          __asm { FCVT            S25, H1 }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          _H1 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v53 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          float v47 = v117;
          float v46 = v118;
          float v184 = (float)((float)((float)(v117 * _S30) + (float)(v118 * _S29)) + (float)(v214 * _S9)) + v41;
          float v185 = _S29 + _S24;
          if (v184 < v41) {
            float v186 = v41;
          }
          else {
            float v186 = (float)((float)((float)(v117 * _S30) + (float)(v118 * _S29)) + (float)(v214 * _S9)) + v41;
          }
          BOOL v81 = v184 <= v43;
          float v187 = _S30 + _S25;
          float v188 = (float)((float)(v212 + (float)(v185 * v216)) + (float)((float)(_S30 + _S25) * v48))
               + (float)((float)(_S9 + _S26) * v213);
          if (!v81) {
            float v186 = v43;
          }
          *uint64_t result = llroundf(v186);
          float v189 = v45;
          if (v188 <= v45)
          {
            float v189 = v188;
            if (v188 < v44) {
              float v189 = v44;
            }
          }
          float v190 = (float)((float)((float)(v117 * _S25) + (float)(v118 * _S24)) + (float)(v214 * _S26)) + v41;
          result[1] = llroundf(v189);
          float v191 = v43;
          float v36 = v228;
          float v38 = v229;
          if (v190 <= v43)
          {
            float v191 = v190;
            if (v190 < v41) {
              float v191 = v41;
            }
          }
          float v192 = (float)((float)(v212 + (float)(v185 * v227)) + (float)(v187 * v226))
               + (float)((float)(_S9 + _S26) * v224);
          result[2] = llroundf(v191);
          float v193 = v45;
          if (v192 <= v45)
          {
            if (v192 < v44) {
              float v193 = v44;
            }
            else {
              float v193 = v192;
            }
          }
          result[3] = llroundf(v193);
          if (v64) {
            *v64++ = 0;
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S2, H2
            FCVT            S3, H3
            FCVT            S17, H17
            FCVT            S21, H21
            FCVT            S22, H22
          }
          float v6 = (float)((float)((float)(v117 * _S2) + (float)(v118 * _S1)) + (float)(v214 * _S3)) + v41;
          float v200 = (float)((float)((float)(v117 * _S21) + (float)(v118 * _S17)) + (float)(v214 * _S22)) + v41;
          float v201 = _S1 + _S17;
          float v202 = _S2 + _S21;
          float v203 = _S3 + _S22;
          float v204 = (float)((float)(v212 + (float)(v201 * v216)) + (float)(v202 * v48)) + (float)(v203 * v213);
          float v205 = (float)(v212 + (float)(v201 * v227)) + (float)(v202 * v226);
          if (v6 < v41) {
            float v206 = v41;
          }
          else {
            float v206 = v6;
          }
          if (v6 > v43) {
            float v206 = v43;
          }
          float v57 = v205 + (float)(v203 * v224);
          *uint64_t v63 = llroundf(v206);
          if (v204 < v44) {
            float v207 = v44;
          }
          else {
            float v207 = v204;
          }
          if (v204 > v45) {
            float v207 = v45;
          }
          v63[1] = llroundf(v207);
          if (v200 < v41) {
            float v208 = v41;
          }
          else {
            float v208 = v200;
          }
          if (v200 > v43) {
            float v208 = v43;
          }
          v63[2] = llroundf(v208);
          float v209 = v45;
          if (v57 <= v45)
          {
            float v209 = v57;
            if (v57 < v44) {
              float v209 = v44;
            }
          }
          v63[3] = llroundf(v209);
          float v37 = v234;
          if (v62) {
            *v62++ = 0;
          }
          v54 += 2;
          v61 += 2;
          result += 4;
          v63 += 4;
          v60 += 2;
        }
        while (v22 > v60);
      }
      float v54 = &v58[v29];
      v55 += v30;
      uint64_t result = &v59[v34];
      v21 += 2;
    }
    while (v25 > v21);
    if (v32 && v20)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v18, v33, v22);
        v33 += v31;
        v18 += v16;
        --v25;
      }
      while (v25);
    }
    else if (v20)
    {
      do
      {
        if (v22) {
          uint64_t result = (unsigned __int8 *)memset(v18, 255, v22);
        }
        v18 += v16;
        --v25;
      }
      while (v25);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_yuvsf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_yuvsf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = v6 * a2;
  unint64_t v8 = 2 * *result;
  unint64_t v9 = (v6 + v6 * a2) / v8;
  uint64_t v10 = *((void *)result + 14);
  uint64_t v11 = (void *)*((void *)result + 16);
  uint64_t v12 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v8);
  uint64_t v13 = (uint64_t *)*((void *)result + 17);
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (char *)(v15 + v14 * v12 + v10);
  unint64_t v17 = v7 / v8;
  if (v15) {
    uint64_t v18 = (_WORD *)(v15 + v14 * v12 + v10);
  }
  else {
    uint64_t v18 = 0;
  }
  if (2 * v9 != 2 * v17)
  {
    unint64_t v19 = 0;
    size_t v20 = *(void *)(result + 20);
    uint64_t v21 = *(void *)(result + 36);
    uint64_t v22 = *(void *)(result + 44) + 2 * v17;
    unint64_t v23 = 2 * v9 - 2 * v17;
    uint64_t v24 = *((void *)result + 19);
    unint64_t v25 = (void *)*((void *)result + 7);
    uint64_t v26 = (uint64_t *)*((void *)result + 8);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = (char *)(v30 + v29 * v22 + v21);
    uint64_t v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v24;
    float v186 = v33 * *(float *)(v24 + 16);
    float v187 = v33 * *(float *)(v24 + 8);
    float v37 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v24 + 28);
    float v184 = *(float *)&v38;
    float v185 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    float v43 = (float)v38;
    float v193 = *(float *)(v24 + 36);
    float v194 = v40;
    float v191 = *(float *)(v24 + 44);
    float v192 = *(float *)(v24 + 40);
    float v189 = *(float *)(v24 + 52) * 0.5;
    float v190 = *(float *)(v24 + 48) * 0.5;
    float v188 = *(float *)(v24 + 56) * 0.5;
    float v44 = *(float *)(v24 + 60) * 0.5;
    float v45 = *(float *)(v24 + 64) * 0.5;
    float v181 = *(float *)(v24 + 72);
    float v46 = *(float *)(v24 + 68) * 0.5;
    float v47 = *(float *)(v24 + 76);
    float v48 = *(float *)(v24 + 80);
    float v179 = v47;
    float v49 = *(float *)(v24 + 84);
    float v50 = *(float *)(v24 + 88);
    float v51 = *(float *)(v24 + 92);
    float v52 = *(float *)(v24 + 96);
    float v53 = *(float *)(v24 + 100);
    float v54 = *(float *)(v24 + 104);
    uint64_t v55 = v24 + 16548;
    uint64_t v56 = v24 + 164;
    float v57 = (unsigned char *)(*v11 + v32 * v12 + v10);
    uint64_t result = (unsigned __int8 *)(*v25 + v27 * v22 + v21);
    if (v22 >= 0) {
      uint64_t v58 = v22;
    }
    else {
      uint64_t v58 = v22 + 1;
    }
    uint64_t v59 = v25[1] + v28 * (v58 >> 1) + v21;
    float v178 = (float)LODWORD(a6);
    float v182 = v45;
    float v183 = v44;
    float v180 = v46;
    do
    {
      size_t v60 = &result[v27];
      size_t v61 = &v57[v32];
      if (v20)
      {
        size_t v62 = 0;
        uint64_t v63 = &result[v27];
        uint64_t v64 = (_WORD *)((char *)v18 + v14);
        float v65 = &v57[v32];
        unsigned int v66 = v18;
        do
        {
          LOBYTE(v47) = *(unsigned char *)(v59 + v62 + 1);
          float v67 = (float)LODWORD(v47) - v35;
          unsigned int v68 = LODWORD(v187);
          float v69 = v187 * v67;
          LOBYTE(v68) = *result;
          float v70 = v36 * (float)((float)v68 - v34);
          float v71 = (float)(v187 * v67) + v70;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = (float)(v187 * v67) + v70;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          LOBYTE(v71) = *(unsigned char *)(v59 + v62);
          float v73 = (float)LODWORD(v71) - v35;
          float v74 = (float)(v185 * v67) + (float)(v73 * v186);
          float v75 = 8191.0;
          if ((float)(v70 + v74) <= 8191.0)
          {
            float v75 = v70 + v74;
            if ((float)(v70 + v74) < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v184 * v73;
          float v77 = (float)(v184 * v73) + v70;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          LOBYTE(v77) = result[1];
          float v79 = v36 * (float)((float)LODWORD(v77) - v34);
          float v80 = 8191.0;
          if ((float)(v69 + v79) <= 8191.0)
          {
            float v80 = v69 + v79;
            if ((float)(v69 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v74 + v79;
          float v82 = 8191.0;
          if ((float)(v74 + v79) <= 8191.0)
          {
            float v82 = v74 + v79;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v76 + v79;
          float v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          LOBYTE(v83) = *v63;
          float v85 = v36 * (float)((float)LODWORD(v83) - v34);
          float v86 = 8191.0;
          if ((float)(v69 + v85) <= 8191.0)
          {
            float v86 = v69 + v85;
            if ((float)(v69 + v85) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = 8191.0;
          if ((float)(v74 + v85) <= 8191.0)
          {
            float v87 = v74 + v85;
            if ((float)(v74 + v85) < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v76 + v85;
          BOOL v89 = (float)(v76 + v85) <= 8191.0;
          float v90 = 8191.0;
          if (v89)
          {
            float v90 = v88;
            if (v88 < 0.0) {
              float v90 = 0.0;
            }
          }
          LOBYTE(v81) = v63[1];
          float v91 = v36 * (float)((float)LODWORD(v81) - v34);
          float v92 = v69 + v91;
          BOOL v89 = (float)(v69 + v91) <= 8191.0;
          float v93 = 8191.0;
          if (v89)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v74 + v91;
          BOOL v89 = (float)(v74 + v91) <= 8191.0;
          float v95 = 8191.0;
          if (v89)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          float v96 = v76 + v91;
          float v97 = 8191.0;
          if (v96 <= 8191.0)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          _H3 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S5, H5
          }
          _H2 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H20 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S20, H20 }
          _H26 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S1, H1
          }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v126 = (float)((float)(v179 * _S4) + (float)(_S3 * v181)) + (float)(_S5 * v48);
          float v127 = (float)((float)(v50 * _S4) + (float)(_S3 * v49)) + (float)(_S5 * v51);
          _S3 = (float)((float)(v53 * _S4) + (float)(_S3 * v52)) + (float)(_S5 * v54);
          float v129 = (float)((float)(v179 * _S6) + (float)(_S2 * v181)) + (float)(_S20 * v48);
          float v130 = (float)((float)(v50 * _S6) + (float)(_S2 * v49)) + (float)(_S20 * v51);
          float v131 = (float)((float)(v53 * _S6) + (float)(_S2 * v52)) + (float)(_S20 * v54);
          float v132 = (float)((float)(v179 * _S27) + (float)(_S26 * v181)) + (float)(_S1 * v48);
          float v133 = (float)((float)(v50 * _S27) + (float)(_S26 * v49)) + (float)(_S1 * v51);
          float v134 = (float)((float)(v53 * _S27) + (float)(_S26 * v52)) + (float)(_S1 * v54);
          float v135 = (float)((float)(v179 * _S24) + (float)(_S7 * v181)) + (float)(_S25 * v48);
          float v136 = (float)((float)(v50 * _S24) + (float)(_S7 * v49)) + (float)(_S25 * v51);
          float v137 = (float)((float)(v53 * _S24) + (float)(_S7 * v52)) + (float)(_S25 * v54);
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __asm { FCVT            S28, H1 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          LOWORD(_S3) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          __asm
          {
            FCVT            S30, H1
            FCVT            S23, H3
          }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __asm { FCVT            S25, H1 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          float v150 = (float)((float)((float)(v192 * _S30) + (float)(v193 * _S28)) + (float)(v191 * _S23)) + v39;
          float v151 = _S28 + _S24;
          if (v150 < v39) {
            float v152 = v39;
          }
          else {
            float v152 = (float)((float)((float)(v192 * _S30) + (float)(v193 * _S28)) + (float)(v191 * _S23)) + v39;
          }
          float v153 = _S30 + _S25;
          float v154 = (float)((float)(v194 + (float)(v151 * v190)) + (float)((float)(_S30 + _S25) * v189))
               + (float)((float)(_S23 + _S26) * v188);
          if (v150 <= v41) {
            float v155 = v152;
          }
          else {
            float v155 = v41;
          }
          *float v57 = llroundf(v155);
          float v156 = v43;
          if (v154 <= v43)
          {
            float v156 = v154;
            if (v154 < v42) {
              float v156 = v42;
            }
          }
          float v157 = (float)((float)((float)(v192 * _S25) + (float)(v193 * _S24)) + (float)(v191 * _S26)) + v39;
          v57[1] = llroundf(v156);
          float v158 = v41;
          if (v157 <= v41)
          {
            float v158 = v157;
            if (v157 < v39) {
              float v158 = v39;
            }
          }
          float v159 = (float)((float)(v194 + (float)(v151 * v183)) + (float)(v153 * v182))
               + (float)((float)(_S23 + _S26) * v180);
          v57[2] = llroundf(v158);
          float v160 = v43;
          if (v159 <= v43)
          {
            if (v159 < v42) {
              float v160 = v42;
            }
            else {
              float v160 = v159;
            }
          }
          v57[3] = llroundf(v160);
          if (v66) {
            *v66++ = 0;
          }
          float v35 = v178;
          __asm
          {
            FCVT            S2, H2
            FCVT            S1, H1
            FCVT            S3, H4
            FCVT            S4, H5
            FCVT            S5, H6
            FCVT            S6, H7
          }
          float v167 = (float)((float)((float)(v192 * _S1) + (float)(v193 * _S2)) + (float)(v191 * _S3)) + v39;
          float v168 = (float)((float)((float)(v192 * _S5) + (float)(v193 * _S4)) + (float)(v191 * _S6)) + v39;
          float v169 = _S2 + _S4;
          float v170 = _S1 + _S5;
          float v171 = _S3 + _S6;
          float v172 = (float)((float)(v194 + (float)(v169 * v190)) + (float)(v170 * v189)) + (float)(v171 * v188);
          float v173 = (float)(v194 + (float)(v169 * v183)) + (float)(v170 * v182);
          if (v167 < v39) {
            float v174 = v39;
          }
          else {
            float v174 = v167;
          }
          if (v167 > v41) {
            float v174 = v41;
          }
          float v47 = v173 + (float)(v171 * v180);
          *float v65 = llroundf(v174);
          if (v172 < v42) {
            float v175 = v42;
          }
          else {
            float v175 = v172;
          }
          if (v172 > v43) {
            float v175 = v43;
          }
          v65[1] = llroundf(v175);
          if (v168 < v39) {
            float v176 = v39;
          }
          else {
            float v176 = v168;
          }
          if (v168 > v41) {
            float v176 = v41;
          }
          v65[2] = llroundf(v176);
          float v177 = v43;
          if (v47 <= v43)
          {
            float v177 = v47;
            if (v47 < v42) {
              float v177 = v42;
            }
          }
          v65[3] = llroundf(v177);
          if (v64) {
            *v64++ = 0;
          }
          result += 2;
          v63 += 2;
          v57 += 4;
          v65 += 4;
          v62 += 2;
        }
        while (v20 > v62);
      }
      uint64_t result = &v60[v27];
      v59 += v28;
      float v57 = &v61[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v16, v31, v20);
        v31 += v29;
        v16 += v14;
        --v23;
      }
      while (v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          uint64_t result = (unsigned __int8 *)memset(v16, 255, v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_yuvsf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_yuvsf_GCD);
  return 0;
}

void *vt_Copy_420vf_rgb_yuvsf_GCD(void *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v14 = *(void *)((char *)result + 28);
  unint64_t v15 = v14 * a2;
  unint64_t v16 = 2 * *(unsigned __int8 *)result;
  unint64_t v17 = (v14 + v14 * a2) / v16;
  uint64_t v18 = result[14];
  uint64_t v19 = (void *)result[16];
  uint64_t v20 = result[15] + 2 * (result[13] * a2 / v16);
  uint64_t v21 = (uint64_t *)result[17];
  uint64_t v22 = v21[1];
  uint64_t v23 = v19[1];
  uint64_t v24 = (char *)(v23 + v22 * v20 + v18);
  unint64_t v25 = v15 / v16;
  if (v23) {
    uint64_t v26 = (_WORD *)(v23 + v22 * v20 + v18);
  }
  else {
    uint64_t v26 = 0;
  }
  if (2 * v17 != 2 * v25)
  {
    unint64_t v27 = 0;
    size_t v28 = *(void *)((char *)result + 20);
    uint64_t v29 = *(void *)((char *)result + 36);
    uint64_t v30 = *(void *)((char *)result + 44) + 2 * v25;
    unint64_t v31 = 2 * v17 - 2 * v25;
    uint64_t v32 = result[19];
    uint64_t v33 = (void *)result[7];
    uint64_t v34 = (uint64_t *)result[8];
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    uint64_t v37 = v34[2];
    uint64_t v38 = v33[2];
    uint64_t v39 = (char *)(v38 + v37 * v30 + v29);
    uint64_t v40 = *v21;
    LOWORD(a6) = *(_WORD *)(v32 + 140);
    LOWORD(a7) = *(_WORD *)(v32 + 142);
    float v41 = (float)*(unsigned int *)(v32 + 136) / (float)*(unsigned int *)(v32 + 128);
    LOWORD(v9) = *(_WORD *)(v32 + 144);
    LOWORD(v10) = *(_WORD *)(v32 + 146);
    LOWORD(v11) = *(_WORD *)(v32 + 148);
    LOWORD(v12) = *(_WORD *)(v32 + 150);
    LOWORD(v13) = *(_WORD *)(v32 + 152);
    float v42 = *(float *)(v32 + 36);
    float v43 = *(float *)(v32 + 40);
    float v44 = *(float *)(v32 + 44);
    float v45 = *(float *)(v32 + 68);
    float v46 = (float)LODWORD(a6);
    float v47 = (float)LODWORD(a7);
    float v48 = v41 * *(float *)v32;
    float v116 = v41 * *(float *)(v32 + 8);
    float v115 = v41 * *(float *)(v32 + 16);
    float v114 = v41 * *(float *)(v32 + 20);
    float v49 = v41 * *(float *)(v32 + 28);
    float v50 = (float)v9;
    float v51 = (float)v10;
    float v52 = (float)v11;
    float v53 = (float)v12;
    float v54 = (float)v13;
    float v55 = *(float *)(v32 + 48) * 0.5;
    float v56 = *(float *)(v32 + 52) * 0.5;
    float v57 = *(float *)(v32 + 56) * 0.5;
    float v58 = *(float *)(v32 + 60) * 0.5;
    float v59 = *(float *)(v32 + 64) * 0.5;
    float v60 = v45 * 0.5;
    size_t v61 = (unsigned char *)(*v19 + v40 * v20 + v18);
    size_t v62 = (unsigned char *)(*v33 + v35 * v30 + v29);
    if (v30 >= 0) {
      uint64_t v63 = v30;
    }
    else {
      uint64_t v63 = v30 + 1;
    }
    uint64_t v64 = v33[1] + v36 * (v63 >> 1) + v29;
    do
    {
      float v65 = &v62[v35];
      uint64_t result = &v61[v40];
      if (v28)
      {
        size_t v66 = 0;
        float v67 = &v62[v35];
        unsigned int v68 = v26;
        float v69 = &v61[v40];
        float v70 = (_WORD *)((char *)v26 + v22);
        do
        {
          LOBYTE(v45) = *(unsigned char *)(v64 + v66);
          *(float *)&unsigned int v71 = (float)LODWORD(v45);
          float v72 = *(float *)&v71 - v47;
          LOBYTE(v71) = *(unsigned char *)(v64 + v66 + 1);
          float v73 = (float)v71 - v47;
          float v74 = v116 * v73;
          float v75 = (float)(v114 * v73) + (float)(v72 * v115);
          float v76 = v49 * v72;
          LOBYTE(v7) = *v62;
          *(float *)&unsigned int v77 = (float)LODWORD(v7) - v46;
          float v78 = v48 * *(float *)&v77;
          LOBYTE(v77) = v62[1];
          float v80 = (float)v77 - v46;
          float v79 = v48 * v80;
          LOBYTE(v8) = *v67;
          LOBYTE(v80) = v67[1];
          float v81 = v78 + v75;
          float v82 = v76 + v78;
          float v83 = v76 + v79;
          float v84 = (float)((float)((float)(v43 * (float)(v78 + v75)) + (float)(v42 * (float)(v74 + v78)))
                      + (float)(v44 * (float)(v76 + v78)))
              + v50;
          float v85 = (float)((float)((float)(v43 * (float)(v75 + v79)) + (float)(v42 * (float)(v74 + v79)))
                      + (float)(v44 * (float)(v76 + v79)))
              + v50;
          float v86 = (float)(v74 + v78) + (float)(v74 + v79);
          float v87 = v81 + (float)(v75 + v79);
          float v88 = v82 + v83;
          float v89 = (float)((float)(v51 + (float)(v86 * v55)) + (float)(v87 * v56)) + (float)((float)(v82 + v83) * v57);
          if (v84 < v50) {
            float v90 = v50;
          }
          else {
            float v90 = v84;
          }
          if (v84 > v52) {
            float v90 = v52;
          }
          *size_t v61 = llroundf(v90);
          if (v89 < v53) {
            float v91 = v53;
          }
          else {
            float v91 = v89;
          }
          if (v89 <= v54) {
            float v92 = v91;
          }
          else {
            float v92 = v54;
          }
          v61[1] = llroundf(v92);
          float v93 = v52;
          if (v85 <= v52)
          {
            float v93 = v85;
            if (v85 < v50) {
              float v93 = v50;
            }
          }
          float v94 = (float)((float)(v51 + (float)(v86 * v58)) + (float)(v87 * v59)) + (float)(v88 * v60);
          v61[2] = llroundf(v93);
          float v95 = v54;
          if (v94 <= v54)
          {
            if (v94 < v53) {
              float v95 = v53;
            }
            else {
              float v95 = v94;
            }
          }
          v61[3] = llroundf(v95);
          if (v68) {
            *v68++ = 0;
          }
          float v96 = v48 * (float)((float)LODWORD(v8) - v46);
          float v97 = v48 * (float)((float)LODWORD(v80) - v46);
          float v98 = v74 + v96;
          float v99 = v75 + v96;
          float v100 = v76 + v96;
          float v101 = v74 + v97;
          float v102 = v75 + v97;
          float v103 = v76 + v97;
          float v104 = (float)((float)((float)(v43 * v99) + (float)(v42 * v98)) + (float)(v44 * v100)) + v50;
          float v7 = (float)((float)((float)(v43 * v102) + (float)(v42 * v101)) + (float)(v44 * v103)) + v50;
          float v105 = v98 + v101;
          float v106 = v99 + v102;
          float v107 = v100 + v103;
          float v108 = (float)((float)(v51 + (float)(v105 * v55)) + (float)(v106 * v56)) + (float)((float)(v100 + v103) * v57);
          if (v104 < v50) {
            float v109 = v50;
          }
          else {
            float v109 = v104;
          }
          if (v104 > v52) {
            float v109 = v52;
          }
          *float v69 = llroundf(v109);
          if (v108 < v53) {
            float v110 = v53;
          }
          else {
            float v110 = v108;
          }
          if (v108 <= v54) {
            float v111 = v110;
          }
          else {
            float v111 = v54;
          }
          v69[1] = llroundf(v111);
          float v8 = v52;
          if (v7 <= v52)
          {
            float v8 = v7;
            if (v7 < v50) {
              float v8 = v50;
            }
          }
          float v112 = (float)(v51 + (float)(v105 * v58)) + (float)(v106 * v59);
          float v45 = v112 + (float)(v107 * v60);
          v69[2] = llroundf(v8);
          float v113 = v54;
          if (v45 <= v54)
          {
            float v113 = v112 + (float)(v107 * v60);
            if (v45 < v53) {
              float v113 = v53;
            }
          }
          v69[3] = llroundf(v113);
          if (v70) {
            *v70++ = 0;
          }
          v62 += 2;
          v67 += 2;
          v61 += 4;
          v69 += 4;
          v66 += 2;
        }
        while (v28 > v66);
      }
      size_t v62 = &v65[v35];
      v64 += v36;
      size_t v61 = (char *)result + v40;
      v27 += 2;
    }
    while (v31 > v27);
    if (v38 && v26)
    {
      do
      {
        uint64_t result = memcpy(v24, v39, v28);
        v39 += v37;
        v24 += v22;
        --v31;
      }
      while (v31);
    }
    else if (v26)
    {
      do
      {
        if (v28) {
          uint64_t result = memset(v24, 255, v28);
        }
        v24 += v22;
        --v31;
      }
      while (v31);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, double a4, float32x4_t a5, double a6)
{
  uint64_t v11 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v12 = 2 * result->u8[0];
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (2 * v14 != 2 * v13)
  {
    unint64_t v15 = 0;
    unint64_t v16 = *(unint64_t *)((char *)&result[2] + 4);
    uint64_t v17 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v18 = *(void *)((char *)&result[5] + 4) + 2 * v13;
    unint64_t v19 = 2 * v14 - 2 * v13;
    float32x2_t v20 = result[14];
    uint64_t v21 = (void *)result[16];
    uint64_t v22 = *(void *)&result[15] + 2 * (*(void *)&result[13] * a2 / v12);
    uint64_t v23 = (float32x2_t *)result[19];
    uint64_t v24 = (uint64_t *)result[7];
    unint64_t v25 = (uint64_t *)result[8];
    uint64_t v26 = (uint64_t *)result[17];
    uint64_t v28 = *v25;
    uint64_t v27 = v25[1];
    uint64_t v423 = v25[2];
    uint64_t v29 = *v26;
    size_t v30 = v26[1];
    uint64_t v426 = v24[2];
    uint64_t v427 = v26[2];
    __b = (_WORD *)(v21[2] + v427 * v22 + 2 * *(void *)&v20);
    uint64_t v425 = v21[2];
    unsigned int v31 = v23[17].u16[2];
    unsigned int v32 = v23[17].u16[3];
    a5.i32[0] = v23[3].i32[1];
    LODWORD(v25) = v23[18].u16[0];
    float v487 = (float)v31;
    *(short float *)v8.i16 = (short float)v31;
    unsigned int v33 = v23[18].u16[1];
    *(float *)&a3 = (float)v32;
    float v488 = (float)v32;
    *(short float *)&a3 = (short float)v32;
    unsigned int v34 = v23[18].u16[2];
    v35.i32[0] = v23[6].i32[0];
    float32_t v435 = v23[5].f32[1];
    v37.i32[0] = v23[6].i32[1];
    v36.i32[0] = v23[7].i32[0];
    a5.i32[1] = v23[1].i32[0];
    v35.i32[1] = v23[7].i32[1];
    v37.i32[1] = v23[8].i32[0];
    v36.i32[1] = v23[8].i32[1];
    LODWORD(v26) = v23[18].u16[3];
    float v38 = (float)v25;
    *(short float *)v9.i16 = (short float)v25;
    LODWORD(v25) = v23[19].u16[0];
    _S22 = v23[4].f32[1];
    _S9 = v23[5].f32[0];
    float v480 = _S22;
    float v479 = _S9;
    _S25 = v23[9].i32[0];
    LODWORD(_Q12) = v23[9].i32[1];
    float v42 = (float)v33;
    *(short float *)v10.i16 = (short float)v33;
    float v43 = (char *)&v23[2068] + 4;
    float v422 = (unsigned __int8 *)(v426 + v423 * v18 + v17);
    float v44 = 8191.0 / (float)v23[16].u32[0];
    _S27 = v44 * v23->f32[0];
    float v46 = (float)v34;
    *(float *)&a6 = (float)v26;
    float v461 = (float)v26;
    float v47 = (float)v25;
    *(short float *)&a6 = (short float)v34;
    uint64_t result = (float32x2_t *)((char *)v23 + 164);
    float16x8_t v48 = (float16x8_t)vdupq_lane_s16(v8, 0);
    *(float32x2_t *)a5.f32 = vmul_n_f32(*(float32x2_t *)a5.f32, v44);
    unint64_t v485 = a5.i64[0];
    int32x2_t v49 = (int32x2_t)vcvt_f16_f32(a5);
    *(double *)&v50.i64[1] = a3;
    *(short float *)&a3 = -*(short float *)&a3;
    float16x8_t v484 = (float16x8_t)vdupq_lane_s32(v49, 0);
    *(float32x2_t *)v6.f32 = vmul_n_f32(v23[2], v44);
    *(double *)&v51.i64[1] = a3;
    float16x8_t v52 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    *(float32x2_t *)v50.f32 = vmul_f32(v35, (float32x2_t)0x3F0000003F000000);
    uint64_t v498 = v50.i64[0];
    float32x4_t v53 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v50), 0);
    float16x8_t v482 = (float16x8_t)v53;
    *(float32x2_t *)v53.f32 = vmul_f32(v37, (float32x2_t)0x3F0000003F000000);
    uint64_t v497 = v53.i64[0];
    int32x4_t v54 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v53), 0);
    float16x8_t v55 = vmulq_n_f16(v484, *(short float *)&a3);
    *(float32x2_t *)v51.f32 = vmul_f32(v36, (float32x2_t)0x3F0000003F000000);
    uint64_t v496 = v51.i64[0];
    int32x4_t v483 = vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v51), 0);
    float16x8_t v56 = (float16x8_t)vdupq_lane_s16(v9, 0);
    int16x8_t v57 = vdupq_lane_s16(v10, 0);
    float16x8_t v473 = (float16x8_t)v57;
    int16x8_t v58 = vdupq_lane_s16(*(int16x4_t *)&a6, 0);
    *(short float *)v57.i16 = (short float)v26;
    int16x8_t v59 = vdupq_lane_s16(*(int16x4_t *)v57.i8, 0);
    float16x8_t v471 = (float16x8_t)v59;
    *(short float *)v59.i16 = (short float)v25;
    int16x8_t v60 = vdupq_lane_s16(*(int16x4_t *)v59.i8, 0);
    float16x8_t v61 = vmulq_n_f16(v52, *(short float *)&a3);
    unsigned int v62 = v23[16].u8[4];
    if (v62 >= 0x11) {
      unsigned __int8 v63 = 0;
    }
    else {
      unsigned __int8 v63 = 16 - v62;
    }
    uint64_t v64 = v21[1];
    _ZF = v64 == 0;
    uint64_t v66 = v64 + v30 * v22 + 2 * *(void *)&v20;
    if (_ZF) {
      float v67 = 0;
    }
    else {
      float v67 = (uint16x8_t *)v66;
    }
    unsigned int v68 = (uint16x8_t *)(*v21 + v29 * v22 + 2 * *(void *)&v20);
    if (v18 >= 0) {
      uint64_t v69 = v18;
    }
    else {
      uint64_t v69 = v18 + 1;
    }
    uint64_t v70 = *v24;
    uint64_t v71 = v24[1] + v27 * (v69 >> 1);
    float v72 = (char *)&v23[4116] + 4;
    float v73 = (unsigned char *)(v71 + v17);
    float v74 = (int8x8_t *)(v70 + v28 * v18 + v17);
    unsigned __int8 v75 = v63;
    unint64_t v428 = v16 & 0xFFFFFFF8;
    float v494 = _S27;
    __asm { FCVT            H13, S27 }
    short float v490 = _H13;
    __asm { FCVT            H13, S22 }
    short float v453 = _H13;
    __asm { FCVT            H13, S9 }
    short float v452 = _H13;
    _S22 = v23[5].f32[1];
    __asm { FCVT            H9, S22 }
    short float v493 = _H9;
    float v457 = v23[13].f32[1];
    __asm { FCVT            H9, S4 }
    float v85 = v487;
    float v456 = v23[14].f32[0];
    __asm { FCVT            H5, S5 }
    float v455 = v23[14].f32[1];
    __asm { FCVT            H6, S6 }
    float v454 = v23[15].f32[0];
    __asm { FCVT            H7, S7 }
    float v478 = v23[9].f32[0];
    __asm { FCVT            H13, S25 }
    float16x8_t v90 = (float16x8_t)v54;
    float16x8_t v92 = v482;
    float16x8_t v91 = (float16x8_t)v483;
    float v477 = v23[9].f32[1];
    __asm { FCVT            H12, S12 }
    short float v447 = *(short float *)&_Q12;
    float v467 = v23[10].f32[0];
    __asm { FCVT            H12, S18 }
    short float v446 = *(short float *)&_Q12;
    float v465 = v23[10].f32[1];
    __asm { FCVT            H12, S20 }
    float16x8_t v93 = v52;
    long long v445 = _Q12;
    float v464 = v23[11].f32[0];
    __asm { FCVT            H14, S14 }
    float v462 = v23[11].f32[1];
    __asm { FCVT            H12, S23 }
    float v96 = v488;
    float v460 = v23[12].f32[0];
    __asm { FCVT            H8, S8 }
    short float v443 = _H8;
    short float v98 = v490;
    float v459 = v23[12].f32[1];
    __asm { FCVT            H11, S11 }
    short float v442 = _H11;
    float v458 = v23[13].f32[0];
    __asm { FCVT            H11, S16 }
    short float v441 = _H11;
    float v101 = _S22;
    uint16x8_t v440 = (uint16x8_t)vdupq_n_s16(v63);
    float16x8_t v102 = v484;
    float v476 = v6.f32[0];
    float16x8_t v472 = (float16x8_t)v58;
    float16x8_t v469 = v61;
    float16x8_t v470 = (float16x8_t)v60;
    short float v492 = _H9;
    short float v450 = _H6;
    short float v451 = _H5;
    unint64_t v433 = v19;
    unint64_t v434 = v16;
    uint64_t v431 = v27;
    uint64_t v432 = v28;
    uint64_t v430 = v29;
    size_t __len = v30;
    float16x8_t v495 = v93;
    float16x8_t v474 = v56;
    float16x8_t v475 = v55;
    int v468 = v16 - 7;
    unsigned __int8 v429 = v63;
    float16x8_t v466 = v48;
    float16x8_t v463 = v90;
    short float v448 = _H13;
    short float v449 = _H7;
    short float v444 = _H14;
    do
    {
      float v103 = (char *)v74 + v28;
      float v104 = &v68->i8[v29];
      float v105 = &v67->i8[v30];
      if ((int)v16 < 8)
      {
        unint64_t v275 = 0;
        float v274 = (__int16 *)((char *)v67->i16 + v30);
        float v108 = (uint16x8_t *)((char *)v68 + v29);
        float v273 = v73;
        float v107 = (int8x8_t *)((char *)v74 + v28);
      }
      else
      {
        short float v436 = (char *)v74 + v28;
        short float v437 = &v67->i8[v30];
        short float v438 = &v68->i8[v29];
        unint64_t v439 = v15;
        uint64_t v106 = 0;
        float v107 = (int8x8_t *)((char *)v74 + v28);
        float v108 = (uint16x8_t *)((char *)v68 + v29);
        v109.i64[0] = 0x9000900090009000;
        v109.i64[1] = 0x9000900090009000;
        float v486 = v73;
        do
        {
          v489 = v67;
          float16x8_t v491 = v68;
          int8x8_t v110 = *(int8x8_t *)&v73[v106];
          *(int8x8_t *)v111.i8 = vzip1_s8(v110, 0);
          v111.u64[1] = (unint64_t)vzip2_s8(v110, 0);
          float16x8_t v112 = vcvtq_f16_u16(v111);
          int16x8_t v113 = (int16x8_t)vmlaq_f16(v475, v102, v112);
          int8x16_t v114 = (int8x16_t)vmlaq_f16(v469, v93, v112);
          v112.i64[0] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u64[0];
          *(int16x4_t *)v115.i8 = vuzp1_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8);
          *(int16x4_t *)v112.i8 = vuzp2_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v112.i8);
          v112.i64[1] = v112.i64[0];
          v113.i64[0] = vextq_s8(v114, v114, 8uLL).u64[0];
          v115.i64[1] = v112.i64[0];
          *(float16x4_t *)v113.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8));
          int8x8_t v116 = *v74++;
          v113.i64[1] = v112.i64[0];
          *(int8x8_t *)v117.i8 = vzip1_s8(v116, 0);
          v117.u64[1] = (unint64_t)vzip2_s8(v116, 0);
          float16x8_t v118 = (float16x8_t)vzip1q_s16((int16x8_t)v112, (int16x8_t)v112);
          float16x8_t v119 = vcvtq_f16_u16(v117);
          int8x8_t v120 = *v107++;
          *(int8x8_t *)v121.i8 = vzip1_s8(v120, 0);
          float16x8_t v122 = (float16x8_t)vzip1q_s16(v113, v113);
          v121.u64[1] = (unint64_t)vzip2_s8(v120, 0);
          float16x8_t v123 = vsubq_f16(v119, v48);
          float16x8_t v124 = vsubq_f16(vcvtq_f16_u16(v121), v48);
          float16x8_t v125 = (float16x8_t)vzip1q_s16(v115, v115);
          float16x8_t v126 = vmlaq_n_f16(v118, v123, v98);
          float16x8_t v127 = vmlaq_n_f16(v118, v124, v98);
          float16x8_t v128 = vmlaq_n_f16(v122, v123, v98);
          float16x8_t v129 = vmlaq_n_f16(v122, v124, v98);
          float16x8_t v130 = vmlaq_n_f16(v125, v123, v98);
          float16x8_t v131 = vmlaq_n_f16(v125, v124, v98);
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v126, (float16x8_t)0), v109));
          uint32x4_t v133 = vmovl_high_u16(v132);
          uint32x4_t v134 = vmovl_u16(*(uint16x4_t *)v132.i8);
          uint64_t v135 = v134.u32[1];
          uint64_t v136 = v134.u32[3];
          v137.i16[0] = result->i16[v134.u32[0]];
          uint64_t v138 = v133.u32[1];
          float v139 = (__int16 *)result + v134.u32[2];
          uint64_t v140 = v133.u32[3];
          uint64_t v141 = v133.u32[2];
          float v142 = (__int16 *)result + v133.u32[0];
          uint16x8_t v143 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v109));
          uint32x4_t v144 = vmovl_high_u16(v143);
          v145.i64[0] = v144.u32[2];
          v145.i64[1] = v144.u32[3];
          float16x8_t v146 = v145;
          v145.i64[0] = v144.u32[0];
          v145.i64[1] = v144.u32[1];
          float16x8_t v147 = v145;
          uint32x4_t v148 = vmovl_u16(*(uint16x4_t *)v143.i8);
          v145.i64[0] = v148.u32[2];
          v145.i64[1] = v148.u32[3];
          float16x8_t v149 = v145;
          uint64_t v150 = v148.u32[1];
          v151.i16[0] = result->i16[v148.u32[0]];
          uint16x8_t v152 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, (float16x8_t)0), v109));
          uint32x4_t v153 = vmovl_high_u16(v152);
          uint32x4_t v154 = vmovl_u16(*(uint16x4_t *)v152.i8);
          float v155 = (__int16 *)result + v138;
          v156.i16[0] = result->i16[v154.u32[0]];
          float v157 = (__int16 *)result + v154.u32[1];
          v137.i16[1] = result->i16[v135];
          float v158 = (__int16 *)result + v154.u32[2];
          float v159 = (__int16 *)result + v154.u32[3];
          float v160 = (__int16 *)result + v150;
          float v161 = (__int16 *)result + v153.u32[0];
          float v162 = (__int16 *)result + v153.u32[1];
          float v163 = (__int16 *)result + v153.u32[2];
          float v164 = (__int16 *)result + v153.u32[3];
          uint16x8_t v165 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, (float16x8_t)0), v109));
          float16x8_t v166 = (float16x8_t)vmovl_high_u16(v165);
          v145.i64[0] = v166.u32[2];
          v145.i64[1] = v166.u32[3];
          float16x8_t v167 = v145;
          v145.i64[0] = v166.u32[0];
          uint32x4_t v168 = vmovl_u16(*(uint16x4_t *)v165.i8);
          v156.i16[1] = *v157;
          v166.i16[0] = result->i16[v168.u32[0]];
          v137.i16[2] = *v139;
          v151.i16[1] = *v160;
          v156.i16[2] = *v158;
          float v169 = (__int16 *)result + v166.u32[1];
          v137.i16[3] = result->i16[v136];
          float v170 = (__int16 *)result + v167.i64[0];
          v166.i16[1] = result->i16[v168.u32[1]];
          v151.i16[2] = result->i16[v149.i64[0]];
          v166.i16[2] = result->i16[v168.u32[2]];
          v166.i16[3] = result->i16[v168.u32[3]];
          v156.i16[3] = *v159;
          float v171 = (__int16 *)result + v167.i64[1];
          uint16x8_t v172 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v109));
          v166.i16[4] = result->i16[v145.i64[0]];
          float16x8_t v173 = (float16x8_t)vmovl_high_u16(v172);
          v145.i64[0] = v173.u32[2];
          v145.i64[1] = v173.u32[3];
          float16x8_t v174 = v145;
          v145.i64[0] = v173.u32[0];
          v145.i64[1] = v173.u32[1];
          uint32x4_t v175 = vmovl_u16(*(uint16x4_t *)v172.i8);
          v137.i16[4] = *v142;
          v151.i16[3] = result->i16[v149.i64[1]];
          v173.i16[0] = result->i16[v175.u32[0]];
          v156.i16[4] = *v161;
          v166.i16[5] = *v169;
          v137.i16[5] = *v155;
          v151.i16[4] = result->i16[v147.i64[0]];
          float v176 = (__int16 *)result + v174.i64[0];
          v173.i16[1] = result->i16[v175.u32[1]];
          v156.i16[5] = *v162;
          v173.i16[2] = result->i16[v175.u32[2]];
          v173.i16[3] = result->i16[v175.u32[3]];
          v166.i16[6] = *v170;
          v173.i16[4] = result->i16[v145.i64[0]];
          v173.i16[5] = result->i16[v145.i64[1]];
          v137.i16[6] = result->i16[v141];
          float v177 = (__int16 *)result + v174.i64[1];
          uint16x8_t v178 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v109));
          v151.i16[5] = result->i16[v147.i64[1]];
          float16x8_t v179 = (float16x8_t)vmovl_high_u16(v178);
          v145.i64[0] = v179.u32[2];
          v145.i64[1] = v179.u32[3];
          float16x8_t v180 = v145;
          v145.i64[0] = v179.u32[0];
          v145.i64[1] = v179.u32[1];
          uint32x4_t v181 = vmovl_u16(*(uint16x4_t *)v178.i8);
          v156.i16[6] = *v163;
          v166.i16[7] = *v171;
          v179.i16[0] = result->i16[v181.u32[0]];
          v173.i16[6] = *v176;
          v137.i16[7] = result->i16[v140];
          v151.i16[6] = result->i16[v146.i64[0]];
          v156.i16[7] = *v164;
          v179.i16[1] = result->i16[v181.u32[1]];
          v173.i16[7] = *v177;
          v179.i16[2] = result->i16[v181.u32[2]];
          v179.i16[3] = result->i16[v181.u32[3]];
          v151.i16[7] = result->i16[v146.i64[1]];
          v179.i16[4] = result->i16[v145.i64[0]];
          v179.i16[5] = result->i16[v145.i64[1]];
          v179.i16[6] = result->i16[v180.i64[0]];
          v179.i16[7] = result->i16[v180.i64[1]];
          uint16x8_t v182 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, _H9), v151, v451), v156, v450), vmaxq_f16(vmaxq_f16(v137, v151), v156), v449), (float16x8_t)0), v109));
          uint32x4_t v183 = vmovl_high_u16(v182);
          v145.i64[0] = v183.u32[2];
          v145.i64[1] = v183.u32[3];
          uint32x4_t v184 = vmovl_u16(*(uint16x4_t *)v182.i8);
          uint64_t v185 = v184.u32[1];
          uint64_t v186 = v184.u32[0];
          uint64_t v187 = v184.u32[3];
          uint64_t v188 = v184.u32[2];
          uint64_t v189 = v183.u32[1];
          uint16x8_t v190 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v166, _H9), v173, v451), v179, v450), vmaxq_f16(vmaxq_f16(v166, v173), v179), v449), (float16x8_t)0), v109));
          uint64_t v191 = v183.u32[0];
          float16x8_t v192 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v190.i8);
          v180.i16[0] = *(_WORD *)&v43[2 * v186];
          v180.i16[1] = *(_WORD *)&v43[2 * v185];
          uint32x4_t v193 = vmovl_high_u16(v190);
          v180.i16[2] = *(_WORD *)&v43[2 * v188];
          uint64_t v194 = v193.u32[1];
          v180.i16[3] = *(_WORD *)&v43[2 * v187];
          float v195 = (__int16 *)&v43[2 * v145.i64[1]];
          v192.i16[0] = *(_WORD *)&v43[2 * v192.u32[0]];
          v180.i16[4] = *(_WORD *)&v43[2 * v191];
          v145.i64[1] = v193.u32[3];
          v180.i16[5] = *(_WORD *)&v43[2 * v189];
          v180.i16[6] = *(_WORD *)&v43[2 * v145.i64[0]];
          v192.i16[1] = *(_WORD *)&v43[2 * v192.u32[1]];
          v192.i16[2] = *(_WORD *)&v43[2 * v192.u32[2]];
          v180.i16[7] = *v195;
          uint64_t v196 = v193.u32[2];
          v192.i16[3] = *(_WORD *)&v43[2 * v192.u32[3]];
          v192.i16[4] = *(_WORD *)&v43[2 * v193.u32[0]];
          float16x8_t v197 = vmulq_f16(v137, v180);
          v192.i16[5] = *(_WORD *)&v43[2 * v194];
          v192.i16[6] = *(_WORD *)&v43[2 * v196];
          float16x8_t v198 = vmulq_f16(v151, v180);
          v192.i16[7] = *(_WORD *)&v43[2 * v145.i64[1]];
          float16x8_t v199 = vmulq_f16(v166, v192);
          float16x8_t v200 = v102;
          float16x8_t v201 = vmulq_f16(v173, v192);
          float16x8_t v202 = vmulq_f16(v156, v180);
          float16x8_t v203 = vmulq_f16(v179, v192);
          v151.i16[7] = HIWORD(v445);
          float16x8_t v204 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v197, v448), v198, v447), v202, v446);
          float16x8_t v205 = vmlaq_n_f16(vmulq_n_f16(v202, v441), v198, v442);
          float16x8_t v206 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v199, v448), v201, v447), v203, v446);
          float16x8_t v207 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v197, *(short float *)&v445), v198, v444), v202, _H12);
          float16x8_t v208 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v199, *(short float *)&v445), v201, v444), v203, _H12);
          float16x8_t v209 = vmlaq_n_f16(v205, v197, v443);
          float16x8_t v210 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v203, v441), v201, v442), v199, v443);
          uint16x8_t v211 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v204, (float16x8_t)0), v109));
          uint32x4_t v212 = vmovl_high_u16(v211);
          uint32x4_t v213 = vmovl_u16(*(uint16x4_t *)v211.i8);
          uint64_t v214 = v213.u32[1];
          uint64_t v215 = v213.u32[0];
          uint64_t v216 = v213.u32[3];
          uint64_t v217 = v213.u32[2];
          uint64_t v218 = v212.u32[1];
          uint64_t v219 = v212.u32[0];
          uint16x8_t v220 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v207, (float16x8_t)0), v109));
          uint64_t v221 = v212.u32[3];
          float16x8_t v222 = (float16x8_t)vmovl_high_u16(v220);
          v145.i64[0] = v222.u32[2];
          v145.i64[1] = v222.u32[3];
          v222.i64[1] = v222.u32[1];
          uint32x4_t v223 = vmovl_u16(*(uint16x4_t *)v220.i8);
          uint64_t v224 = v212.u32[2];
          uint64_t v225 = v223.u32[1];
          uint64_t v226 = v223.u32[0];
          uint64_t v227 = v223.u32[3];
          uint64_t v228 = v223.u32[2];
          uint64_t v229 = v222.u32[0];
          v204.i16[0] = *(_WORD *)&v72[2 * v215];
          uint64_t v230 = v145.i64[1];
          uint64_t v231 = v145.i64[0];
          uint16x8_t v232 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v209, (float16x8_t)0), v109));
          float16x8_t v233 = (float16x8_t)vmovl_high_u16(v232);
          v145.i64[0] = v233.u32[2];
          v145.i64[1] = v233.u32[3];
          float16x8_t v234 = v145;
          v145.i64[0] = v233.u32[0];
          v145.i64[1] = v233.u32[1];
          float16x8_t v235 = v145;
          v233.i16[0] = *(_WORD *)&v72[2 * v226];
          uint32x4_t v236 = vmovl_u16(*(uint16x4_t *)v232.i8);
          v145.i64[0] = v236.u32[2];
          v145.i64[1] = v236.u32[3];
          float16x8_t v237 = v145;
          uint64_t v238 = v236.u32[1];
          float v239 = (__int16 *)&v72[2 * v228];
          v222.i16[0] = *(_WORD *)&v72[2 * v236.u32[0]];
          float v240 = (__int16 *)&v72[2 * v214];
          uint64_t v241 = v234.i64[1];
          uint64_t v242 = v234.i64[0];
          uint16x8_t v243 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v206, (float16x8_t)0), v109));
          uint32x4_t v244 = vmovl_high_u16(v243);
          v145.i64[0] = v244.u32[2];
          v145.i64[1] = v244.u32[3];
          float16x8_t v245 = v145;
          v145.i64[1] = v244.u32[1];
          uint32x4_t v246 = vmovl_u16(*(uint16x4_t *)v243.i8);
          v204.i16[1] = *v240;
          v151.i16[0] = *(_WORD *)&v72[2 * v246.u32[0]];
          v233.i16[1] = *(_WORD *)&v72[2 * v225];
          v222.i16[1] = *(_WORD *)&v72[2 * v238];
          v151.i16[1] = *(_WORD *)&v72[2 * v246.u32[1]];
          v204.i16[2] = *(_WORD *)&v72[2 * v217];
          float v247 = (__int16 *)&v72[2 * v246.u32[3]];
          v151.i16[2] = *(_WORD *)&v72[2 * v246.u32[2]];
          uint64_t v248 = v244.u32[0];
          v233.i16[2] = *v239;
          uint16x8_t v249 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v208, (float16x8_t)0), v109));
          uint32x4_t v250 = vmovl_u16(*(uint16x4_t *)v249.i8);
          v222.i16[2] = *(_WORD *)&v72[2 * v237.i64[0]];
          v208.i16[7] = (unint64_t)v250.u32[1] >> 48;
          v151.i16[3] = *v247;
          v208.i16[0] = *(_WORD *)&v72[2 * v250.u32[0]];
          v204.i16[3] = *(_WORD *)&v72[2 * v216];
          v233.i16[3] = *(_WORD *)&v72[2 * v227];
          float v251 = (__int16 *)&v72[2 * v224];
          v222.i16[3] = *(_WORD *)&v72[2 * v237.i64[1]];
          float v252 = (__int16 *)&v72[2 * v222.i64[1]];
          v151.i16[4] = *(_WORD *)&v72[2 * v248];
          v204.i16[4] = *(_WORD *)&v72[2 * v219];
          uint32x4_t v253 = vmovl_high_u16(v249);
          v233.i16[4] = *(_WORD *)&v72[2 * v229];
          v208.i16[1] = *(_WORD *)&v72[2 * v250.u32[1]];
          v222.i16[4] = *(_WORD *)&v72[2 * v235.i64[0]];
          v151.i16[5] = *(_WORD *)&v72[2 * v145.i64[1]];
          v208.i16[2] = *(_WORD *)&v72[2 * v250.u32[2]];
          v204.i16[5] = *(_WORD *)&v72[2 * v218];
          v208.i16[3] = *(_WORD *)&v72[2 * v250.u32[3]];
          v233.i16[5] = *v252;
          v208.i16[4] = *(_WORD *)&v72[2 * v253.u32[0]];
          v222.i16[5] = *(_WORD *)&v72[2 * v235.i64[1]];
          uint64_t v254 = v253.u32[3];
          v151.i16[6] = *(_WORD *)&v72[2 * v245.i64[0]];
          v208.i16[5] = *(_WORD *)&v72[2 * v253.u32[1]];
          v208.i16[6] = *(_WORD *)&v72[2 * v253.u32[2]];
          v204.i16[6] = *v251;
          size_t v30 = __len;
          uint16x8_t v255 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v210, (float16x8_t)0), v109));
          uint32x4_t v256 = vmovl_high_u16(v255);
          v233.i16[6] = *(_WORD *)&v72[2 * v231];
          uint32x4_t v257 = vmovl_u16(*(uint16x4_t *)v255.i8);
          uint64_t v258 = v257.u32[1];
          v222.i32[3] = *(unsigned __int16 *)&v72[2 * v242];
          v145.i64[0] = v257.u32[2];
          uint64_t v259 = v257.u32[0];
          uint64_t v260 = v257.u32[3];
          float16x8_t v261 = (float16x8_t)vuzp1q_s16((int16x8_t)v151, (int16x8_t)v208);
          uint64_t v262 = v256.u32[1];
          v151.i16[7] = *(_WORD *)&v72[2 * v245.i64[1]];
          uint64_t v263 = v256.u32[0];
          float16x8_t v264 = (float16x8_t)vuzp1q_s16((int16x8_t)v204, (int16x8_t)v233);
          v204.i16[7] = *(_WORD *)&v72[2 * v221];
          v145.i64[1] = v256.u32[3];
          v233.i16[7] = *(_WORD *)&v72[2 * v230];
          uint64_t v265 = v256.u32[2];
          float16x8_t v266 = (float16x8_t)vuzp2q_s16((int16x8_t)v204, (int16x8_t)v233);
          float16x8_t v267 = vmlaq_n_f16(vmlaq_n_f16(v56, v204, v453), v233, v452);
          float16x8_t v268 = (float16x8_t)vtrn1q_s16((int16x8_t)v222, (int16x8_t)v222);
          v222.i16[7] = *(_WORD *)&v72[2 * v241];
          v208.i16[7] = *(_WORD *)&v72[2 * v254];
          int16x8_t v269 = (int16x8_t)vaddq_f16(v264, v266);
          float16x8_t v270 = vmlaq_n_f16(vmlaq_n_f16(v56, v151, v453), v208, v452);
          v237.i16[0] = *(_WORD *)&v72[2 * v259];
          v237.i16[1] = *(_WORD *)&v72[2 * v258];
          v237.i16[2] = *(_WORD *)&v72[2 * v145.i64[0]];
          v237.i16[3] = *(_WORD *)&v72[2 * v260];
          v237.i16[4] = *(_WORD *)&v72[2 * v263];
          float v73 = v486;
          v237.i16[5] = *(_WORD *)&v72[2 * v262];
          v237.i16[6] = *(_WORD *)&v72[2 * v265];
          int16x8_t v271 = (int16x8_t)vaddq_f16(v261, (float16x8_t)vuzp2q_s16((int16x8_t)v151, (int16x8_t)v208));
          float16x8_t v272 = (float16x8_t)vtrn1q_s16((int16x8_t)v237, (int16x8_t)v237);
          v237.i16[7] = *(_WORD *)&v72[2 * v145.i64[1]];
          _H9 = v492;
          *float16x8_t v491 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v267, v222, v493), v56), v472)), v440);
          unsigned int v68 = v491 + 1;
          uint16x8_t *v489 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v473, v92, (float16x8_t)vzip1q_s16(v269, v269)), v90, (float16x8_t)vzip2q_s16(v269, v269)), v91, vaddq_f16(v268, (float16x8_t)vtrn2q_s16((int16x8_t)v222, (int16x8_t)v222))), v471), v470)), v440);
          *v108++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v270, v237, v493), v56), v472)), v440);
          float16x8_t v93 = v495;
          float16x8_t v61 = (float16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v473, v92, (float16x8_t)vzip1q_s16(v271, v271)), v90, (float16x8_t)vzip2q_s16(v271, v271)), v91, vaddq_f16(v272, (float16x8_t)vtrn2q_s16((int16x8_t)v237, (int16x8_t)v237))), v471), v470)), v440);
          float16x8_t v102 = v200;
          *(float16x8_t *)((char *)v489 + __len) = v61;
          float v67 = v489 + 1;
          v106 += 8;
        }
        while ((int)v106 < v468);
        float v273 = &v486[v106];
        float v274 = (__int16 *)((char *)v67->i16 + __len);
        unint64_t v275 = v428;
        unint64_t v19 = v433;
        unint64_t v16 = v434;
        float v104 = v438;
        unint64_t v15 = v439;
        uint64_t v27 = v431;
        uint64_t v28 = v432;
        uint64_t v29 = v430;
        unsigned __int8 v75 = v429;
        float v103 = v436;
        float v105 = v437;
        float v96 = v488;
        float v101 = v435;
        float v85 = v487;
      }
      while (v16 > v275)
      {
        v61.i8[0] = v273[1];
        float v276 = (float)v61.u32[0] - v96;
        unsigned int v277 = HIDWORD(v485);
        float v278 = *((float *)&v485 + 1) * v276;
        LOBYTE(v277) = v74->i8[0];
        float v279 = v494 * (float)((float)v277 - v85);
        float v280 = (float)(*((float *)&v485 + 1) * v276) + v279;
        float v281 = 8191.0;
        if (v280 <= 8191.0)
        {
          float v281 = (float)(*((float *)&v485 + 1) * v276) + v279;
          if (v280 < 0.0) {
            float v281 = 0.0;
          }
        }
        LOBYTE(v280) = *v273;
        float v282 = (float)LODWORD(v280) - v96;
        float v283 = (float)(v6.f32[1] * v276) + (float)(v282 * v476);
        float v284 = 8191.0;
        if ((float)(v279 + v283) <= 8191.0)
        {
          float v284 = v279 + v283;
          if ((float)(v279 + v283) < 0.0) {
            float v284 = 0.0;
          }
        }
        float v285 = *(float *)&v485 * v282;
        float v286 = (float)(*(float *)&v485 * v282) + v279;
        float v287 = 8191.0;
        if (v286 <= 8191.0)
        {
          float v287 = v286;
          if (v286 < 0.0) {
            float v287 = 0.0;
          }
        }
        LOBYTE(v286) = v74->i8[1];
        float v288 = v494 * (float)((float)LODWORD(v286) - v85);
        float v289 = 8191.0;
        if ((float)(v278 + v288) <= 8191.0)
        {
          float v289 = v278 + v288;
          if ((float)(v278 + v288) < 0.0) {
            float v289 = 0.0;
          }
        }
        float v290 = 8191.0;
        if ((float)(v283 + v288) <= 8191.0)
        {
          float v290 = v283 + v288;
          if ((float)(v283 + v288) < 0.0) {
            float v290 = 0.0;
          }
        }
        float v291 = v285 + v288;
        float v292 = 8191.0;
        if (v291 <= 8191.0)
        {
          float v292 = v291;
          if (v291 < 0.0) {
            float v292 = 0.0;
          }
        }
        LOBYTE(v291) = v107->i8[0];
        float v293 = v494 * (float)((float)LODWORD(v291) - v85);
        float v294 = 8191.0;
        if ((float)(v278 + v293) <= 8191.0)
        {
          float v294 = v278 + v293;
          if ((float)(v278 + v293) < 0.0) {
            float v294 = 0.0;
          }
        }
        float v295 = 8191.0;
        if ((float)(v283 + v293) <= 8191.0)
        {
          float v295 = v283 + v293;
          if ((float)(v283 + v293) < 0.0) {
            float v295 = 0.0;
          }
        }
        float v296 = v285 + v293;
        float v297 = 8191.0;
        if (v296 <= 8191.0)
        {
          float v297 = v296;
          if (v296 < 0.0) {
            float v297 = 0.0;
          }
        }
        LOBYTE(v96) = v107->i8[1];
        float v298 = v494 * (float)((float)LODWORD(v96) - v85);
        float v299 = v278 + v298;
        BOOL v300 = (float)(v278 + v298) <= 8191.0;
        float v301 = 8191.0;
        if (v300)
        {
          float v301 = v299;
          if (v299 < 0.0) {
            float v301 = 0.0;
          }
        }
        float v302 = v283 + v298;
        BOOL v300 = (float)(v283 + v298) <= 8191.0;
        float v303 = 8191.0;
        if (v300)
        {
          float v303 = v302;
          if (v302 < 0.0) {
            float v303 = 0.0;
          }
        }
        float v304 = v285 + v298;
        BOOL v300 = (float)(v285 + v298) <= 8191.0;
        float v305 = 8191.0;
        if (v300)
        {
          float v305 = v304;
          if (v304 < 0.0) {
            float v305 = 0.0;
          }
        }
        _H1 = result->i16[llroundf(fminf(fmaxf(v281, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H3 = result->i16[llroundf(fminf(fmaxf(v284, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H5 = result->i16[llroundf(fminf(fmaxf(v287, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        _H25 = result->i16[llroundf(fminf(fmaxf(v289, 0.0), 8191.0))];
        _H7 = result->i16[llroundf(fminf(fmaxf(v290, 0.0), 8191.0))];
        _H27 = result->i16[llroundf(fminf(fmaxf(v292, 0.0), 8191.0))];
        _H13 = result->i16[llroundf(fminf(fmaxf(v294, 0.0), 8191.0))];
        _H24 = result->i16[llroundf(fminf(fmaxf(v295, 0.0), 8191.0))];
        _H23 = result->i16[llroundf(fminf(fmaxf(v297, 0.0), 8191.0))];
        _H26 = result->i16[llroundf(fminf(fmaxf(v301, 0.0), 8191.0))];
        _H18 = result->i16[llroundf(fminf(fmaxf(v303, 0.0), 8191.0))];
        _H20 = result->i16[llroundf(fminf(fmaxf(v305, 0.0), 8191.0))];
        float v321 = (float)((float)((float)(v456 * _S3) + (float)(v457 * _S1)) + (float)(v455 * _S5))
             + (float)(v454 * fmaxf(_S1, fmaxf(_S3, _S5)));
        float v322 = 8191.0;
        if (v321 <= 8191.0)
        {
          float v322 = v321;
          if (v321 < 0.0) {
            float v322 = 0.0;
          }
        }
        __asm
        {
          FCVT            S6, H25
          FCVT            S7, H7
          FCVT            S16, H27
        }
        _H10 = *(_WORD *)&v43[2 * llroundf(v322)];
        float v327 = (float)((float)((float)(v456 * _S7) + (float)(v457 * _S6)) + (float)(v455 * _S16))
             + (float)(v454 * fmaxf(_S6, fmaxf(_S7, _S16)));
        float v328 = 8191.0;
        if (v327 <= 8191.0)
        {
          float v328 = v327;
          if (v327 < 0.0) {
            float v328 = 0.0;
          }
        }
        __asm
        {
          FCVT            S13, H13
          FCVT            S24, H24
          FCVT            S23, H23
        }
        _H0 = *(_WORD *)&v43[2 * llroundf(v328)];
        float v333 = (float)((float)((float)(v456 * _S24) + (float)(v457 * _S13)) + (float)(v455 * _S23))
             + (float)(v454 * fmaxf(_S13, fmaxf(_S24, _S23)));
        float v334 = 8191.0;
        if (v333 <= 8191.0)
        {
          float v334 = v333;
          if (v333 < 0.0) {
            float v334 = 0.0;
          }
        }
        __asm
        {
          FCVT            S25, H26
          FCVT            S18, H18
          FCVT            S20, H20
        }
        _H26 = *(_WORD *)&v43[2 * llroundf(v334)];
        float v339 = (float)((float)((float)(v456 * _S18) + (float)(v457 * _S25)) + (float)(v455 * _S20))
             + (float)(v454 * fmaxf(_S25, fmaxf(_S18, _S20)));
        float v340 = 8191.0;
        if (v339 <= 8191.0)
        {
          float v340 = v339;
          if (v339 < 0.0) {
            float v340 = 0.0;
          }
        }
        __asm { FCVT            S10, H10 }
        float v342 = _S1 * _S10;
        float v343 = _S3 * _S10;
        float v344 = _S5 * _S10;
        __asm { FCVT            S0, H0 }
        float v346 = _S6 * _S0;
        float v347 = _S7 * _S0;
        _S0 = _S16 * _S0;
        __asm { FCVT            S16, H26 }
        float v350 = _S13 * _S16;
        float v351 = _S24 * _S16;
        float v352 = _S23 * _S16;
        _H23 = *(_WORD *)&v43[2 * llroundf(v340)];
        __asm { FCVT            S23, H23 }
        float v355 = _S25 * _S23;
        _S18 = _S18 * _S23;
        float v357 = _S20 * _S23;
        float v358 = (float)((float)(v477 * v343) + (float)(v342 * v478)) + (float)(v344 * v467);
        float v359 = (float)((float)(v464 * v343) + (float)(v342 * v465)) + (float)(v344 * v462);
        _S1 = (float)((float)(v459 * v343) + (float)(v342 * v460)) + (float)(v344 * v458);
        float v361 = (float)((float)(v477 * v347) + (float)(v346 * v478)) + (float)(_S0 * v467);
        float v362 = (float)((float)(v464 * v347) + (float)(v346 * v465)) + (float)(_S0 * v462);
        float v363 = (float)((float)(v459 * v347) + (float)(v346 * v460)) + (float)(_S0 * v458);
        float v364 = (float)((float)(v477 * v351) + (float)(v350 * v478)) + (float)(v352 * v467);
        float v365 = (float)((float)(v464 * v351) + (float)(v350 * v465)) + (float)(v352 * v462);
        float v366 = (float)((float)(v459 * v351) + (float)(v350 * v460)) + (float)(v352 * v458);
        float v367 = (float)((float)(v477 * _S18) + (float)(v355 * v478)) + (float)(v357 * v467);
        float v368 = (float)((float)(v464 * _S18) + (float)(v355 * v465)) + (float)(v357 * v462);
        float v369 = (float)((float)(v459 * _S18) + (float)(v355 * v460)) + (float)(v357 * v458);
        LOWORD(_S0) = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v358, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        LOWORD(_S18) = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v359, 0.0), 8191.0))];
        __asm { FCVT            S18, H18 }
        LOWORD(_S1) = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0))];
        __asm { FCVT            S20, H1 }
        _H23 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v361, 0.0), 8191.0))];
        _H24 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v362, 0.0), 8191.0))];
        _H25 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v363, 0.0), 8191.0))];
        _H6 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v364, 0.0), 8191.0))];
        _H7 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v365, 0.0), 8191.0))];
        _H16 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v366, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v367, 0.0), 8191.0))];
        _H3 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v368, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v72[2 * llroundf(fminf(fmaxf(v369, 0.0), 8191.0))];
        float v382 = (float)((float)((float)(v479 * _S18) + (float)(v480 * _S0)) + (float)(v101 * _S20)) + v38;
        float v383 = v46;
        if (v382 <= v46)
        {
          float v383 = (float)((float)((float)(v479 * _S18) + (float)(v480 * _S0)) + (float)(v101 * _S20)) + v38;
          if (v382 < v38) {
            float v383 = v38;
          }
        }
        __asm
        {
          FCVT            S26, H23
          FCVT            S24, H24
          FCVT            S23, H25
        }
        float v387 = (float)((float)((float)(v479 * _S24) + (float)(v480 * _S26)) + (float)(v101 * _S23)) + v38;
        v68->i16[0] = llroundf(v383) << v75;
        float v388 = v46;
        _H9 = v492;
        if (v387 <= v46)
        {
          float v388 = (float)((float)((float)(v479 * _S24) + (float)(v480 * _S26)) + (float)(v101 * _S23)) + v38;
          if (v387 < v38) {
            float v388 = v38;
          }
        }
        v68->i16[1] = llroundf(v388) << v75;
        float v389 = _S0 + _S26;
        float v390 = _S18 + _S24;
        float v391 = _S20 + _S23;
        float v392 = (float)((float)(v42 + (float)(v389 * *(float *)&v498)) + (float)(v390 * *(float *)&v497))
             + (float)(v391 * *(float *)&v496);
        float v393 = v47;
        if (v392 <= v47)
        {
          float v393 = (float)((float)(v42 + (float)(v389 * *(float *)&v498)) + (float)(v390 * *(float *)&v497))
               + (float)(v391 * *(float *)&v496);
          if (v392 < v461) {
            float v393 = v461;
          }
        }
        float v394 = (float)((float)(v42 + (float)(v389 * *((float *)&v498 + 1))) + (float)(v390 * *((float *)&v497 + 1)))
             + (float)(v391 * *((float *)&v496 + 1));
        v67->i16[0] = llroundf(v393) << v75;
        float v395 = v47;
        float v85 = v487;
        float16x8_t v48 = v466;
        float16x8_t v92 = v482;
        if (v394 <= v47)
        {
          float v395 = v394;
          if (v394 < v461) {
            float v395 = v461;
          }
        }
        __asm
        {
          FCVT            S18, H6
          FCVT            S6, H7
          FCVT            S0, H16
        }
        v67->i16[1] = llroundf(v395) << v75;
        float v399 = (float)((float)((float)(v479 * _S6) + (float)(v480 * _S18)) + (float)(v101 * _S0)) + v38;
        float v400 = v46;
        float v96 = v488;
        float16x8_t v102 = v484;
        if (v399 <= v46)
        {
          float v400 = (float)((float)((float)(v479 * _S6) + (float)(v480 * _S18)) + (float)(v101 * _S0)) + v38;
          if (v399 < v38) {
            float v400 = v38;
          }
        }
        __asm
        {
          FCVT            S7, H1
          FCVT            S3, H3
          FCVT            S1, H5
        }
        float v404 = (float)((float)((float)(v479 * _S3) + (float)(v480 * _S7)) + (float)(v101 * _S1)) + v38;
        v108->i16[0] = llroundf(v400) << v75;
        float v405 = v46;
        float16x8_t v93 = v495;
        float16x8_t v90 = v463;
        if (v404 <= v46)
        {
          float v405 = (float)((float)((float)(v479 * _S3) + (float)(v480 * _S7)) + (float)(v101 * _S1)) + v38;
          if (v404 < v38) {
            float v405 = v38;
          }
        }
        v108->i16[1] = llroundf(v405) << v75;
        float v406 = _S18 + _S7;
        float v407 = v42 + (float)((float)(_S18 + _S7) * *(float *)&v498);
        float v408 = _S6 + _S3;
        float v409 = _S0 + _S1;
        float v410 = (float)(v407 + (float)(v408 * *(float *)&v497)) + (float)(v409 * *(float *)&v496);
        float v411 = v47;
        float16x8_t v91 = (float16x8_t)v483;
        if (v410 <= v47)
        {
          float v411 = (float)(v407 + (float)(v408 * *(float *)&v497)) + (float)(v409 * *(float *)&v496);
          if (v410 < v461) {
            float v411 = v461;
          }
        }
        *(float *)v61.i32 = (float)((float)(v42 + (float)(v406 * *((float *)&v498 + 1)))
                                  + (float)(v408 * *((float *)&v497 + 1)))
                          + (float)(v409 * *((float *)&v496 + 1));
        *float v274 = llroundf(v411) << v75;
        float v412 = v47;
        float16x8_t v56 = v474;
        if (*(float *)v61.i32 <= v47)
        {
          float v412 = *(float *)v61.i32;
          if (*(float *)v61.i32 < v461) {
            float v412 = v461;
          }
        }
        v275 += 2;
        v273 += 2;
        float v74 = (int8x8_t *)((char *)v74 + 2);
        float v107 = (int8x8_t *)((char *)v107 + 2);
        unsigned int v68 = (uint16x8_t *)((char *)v68 + 4);
        v274[1] = llroundf(v412) << v75;
        float v67 = (uint16x8_t *)((char *)v67 + 4);
        float v108 = (uint16x8_t *)((char *)v108 + 4);
        v274 += 2;
      }
      float v74 = (int8x8_t *)&v103[v28];
      v73 += v27;
      unsigned int v68 = (uint16x8_t *)&v104[v29];
      float v67 = (uint16x8_t *)&v105[v30];
      v15 += 2;
    }
    while (v19 > v15);
    if (v426 && v425)
    {
      uint64_t v413 = 0;
      float16x8_t v414 = __b;
      float16x8_t v415 = v422;
      do
      {
        if (v16)
        {
          unint64_t v416 = v16;
          float v417 = v414;
          float v418 = v415;
          do
          {
            __int16 v419 = *v418++;
            *v417++ = v419 | (v419 << 8);
            --v416;
          }
          while (v416);
        }
        v415 += v423;
        float16x8_t v414 = (_WORD *)((char *)v414 + v427);
        ++v413;
      }
      while (v413 != v19);
    }
    else
    {
      uint64_t v420 = v427;
      float v421 = (char *)__b;
      if (v425)
      {
        do
        {
          if (v16)
          {
            uint64_t result = (float32x2_t *)memset(v421, 255, 2 * v16);
            uint64_t v420 = v427;
          }
          v421 += v420;
          --v19;
        }
        while (v19);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Tone_Mat_TRC_xf422_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    uint64_t v13 = *(void *)((char *)result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = result[14];
    unint64_t v16 = result[13] * a2 / v7;
    uint64_t v17 = (void *)result[16];
    uint64_t v18 = result[15] + 2 * v16;
    uint64_t v19 = result[19];
    uint64_t v20 = (uint64_t *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v216 = v20[2];
    uint64_t v26 = (unsigned __int8 *)(v216 + v25 * v13 + v12);
    uint64_t v27 = *v22;
    uint64_t v28 = v22[1];
    uint64_t v29 = v22[2];
    uint64_t v30 = v17[2];
    uint64_t v31 = (char *)(v30 + v29 * v18 + 2 * v15);
    float v32 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    float v33 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v19 + 142);
    float v34 = (float)LODWORD(a5);
    float v35 = v32 * *(float *)v19;
    float v239 = v32 * *(float *)(v19 + 16);
    float v240 = v32 * *(float *)(v19 + 8);
    float v36 = v32 * *(float *)(v19 + 20);
    *(float *)&unsigned int v37 = v32 * *(float *)(v19 + 28);
    float v237 = *(float *)&v37;
    float v238 = v36;
    LOWORD(v37) = *(_WORD *)(v19 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v19 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v19 + 44);
    float v44 = *(float *)(v19 + 48) * 0.5;
    float v45 = *(float *)(v19 + 56) * 0.5;
    float v46 = *(float *)(v19 + 60) * 0.5;
    float v47 = *(float *)(v19 + 68) * 0.5;
    float v230 = *(float *)(v19 + 76);
    float v231 = *(float *)(v19 + 72);
    float v228 = *(float *)(v19 + 84);
    float v229 = *(float *)(v19 + 80);
    float v227 = *(float *)(v19 + 88);
    float v226 = *(float *)(v19 + 92);
    float v225 = *(float *)(v19 + 96);
    float v223 = *(float *)(v19 + 100);
    float v221 = *(float *)(v19 + 104);
    uint64_t v48 = v19 + 164;
    uint64_t result = (void *)(v19 + 16548);
    uint64_t v49 = v17[1];
    float32x4_t v50 = (char *)(*v17 + v27 * v18 + 2 * v15);
    uint64_t v51 = v49 + v28 * v18 + 2 * v15;
    if (v49) {
      uint64_t v52 = v51;
    }
    else {
      uint64_t v52 = 0;
    }
    unsigned int v53 = *(unsigned __int8 *)(v19 + 132);
    char v54 = 16 - v53;
    _CF = v53 >= 0x11;
    uint64_t v57 = *v20;
    uint64_t v56 = v20[1];
    uint64_t v58 = v57 + v23 * v13;
    if (_CF) {
      char v54 = 0;
    }
    uint64_t v59 = v56 + v24 * (v13 / 2);
    uint64_t v60 = v19 + 32932;
    float16x8_t v61 = (unsigned char *)(v58 + v12);
    uint64_t v62 = v59 + v12;
    unsigned __int8 v63 = (_WORD *)(v52 + 2);
    float v64 = *(float *)(v19 + 108);
    float v65 = *(float *)(v19 + 112);
    float v66 = *(float *)(v19 + 120);
    float v217 = v66;
    float v218 = *(float *)(v19 + 116);
    float v241 = (float)LODWORD(a5);
    float v235 = v41;
    float v236 = v39;
    float v233 = v33;
    float v234 = *(float *)(v19 + 36);
    float v232 = *(float *)(v19 + 64) * 0.5;
    float v224 = v35;
    float v222 = *(float *)(v19 + 40);
    float v220 = *(float *)(v19 + 52) * 0.5;
    float v219 = v65;
    do
    {
      float v67 = &v61[v23];
      unsigned int v68 = &v50[v27];
      if (v11)
      {
        unint64_t v69 = 0;
        uint64_t v70 = v63;
        uint64_t v71 = &v61[v23];
        float v72 = &v50[v27];
        do
        {
          LOBYTE(v66) = *(unsigned char *)(v62 + v69 + 1);
          float v73 = (float)LODWORD(v66) - v34;
          unsigned int v74 = LODWORD(v240);
          float v75 = v240 * v73;
          LOBYTE(v74) = *v61;
          float v76 = v35 * (float)((float)v74 - v33);
          float v77 = (float)(v240 * v73) + v76;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = (float)(v240 * v73) + v76;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          LOBYTE(v77) = *(unsigned char *)(v62 + v69);
          float v79 = (float)LODWORD(v77) - v34;
          float v80 = (float)(v238 * v73) + (float)(v79 * v239);
          float v81 = 8191.0;
          if ((float)(v76 + v80) <= 8191.0)
          {
            float v81 = v76 + v80;
            if ((float)(v76 + v80) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v237 * v79;
          float v83 = (float)(v237 * v79) + v76;
          float v84 = 8191.0;
          if (v83 <= 8191.0)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          LOBYTE(v83) = v61[1];
          float v85 = v35 * (float)((float)LODWORD(v83) - v33);
          float v86 = 8191.0;
          if ((float)(v75 + v85) <= 8191.0)
          {
            float v86 = v75 + v85;
            if ((float)(v75 + v85) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = 8191.0;
          if ((float)(v80 + v85) <= 8191.0)
          {
            float v87 = v80 + v85;
            if ((float)(v80 + v85) < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v82 + v85;
          BOOL v89 = (float)(v82 + v85) <= 8191.0;
          float v90 = 8191.0;
          if (v89)
          {
            float v90 = v88;
            if (v88 < 0.0) {
              float v90 = 0.0;
            }
          }
          LOBYTE(v88) = *v71;
          float v91 = v35 * (float)((float)LODWORD(v88) - v33);
          float v92 = 8191.0;
          if ((float)(v75 + v91) <= 8191.0)
          {
            float v92 = v75 + v91;
            if ((float)(v75 + v91) < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = 8191.0;
          if ((float)(v80 + v91) <= 8191.0)
          {
            float v93 = v80 + v91;
            if ((float)(v80 + v91) < 0.0) {
              float v93 = 0.0;
            }
          }
          float v94 = v82 + v91;
          BOOL v89 = (float)(v82 + v91) <= 8191.0;
          float v95 = 8191.0;
          if (v89)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          LOBYTE(_S22) = v71[1];
          float v96 = v35 * (float)((float)LODWORD(_S22) - v33);
          float v97 = v75 + v96;
          BOOL v89 = (float)(v75 + v96) <= 8191.0;
          float v98 = 8191.0;
          if (v89)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          float v99 = v80 + v96;
          BOOL v89 = (float)(v80 + v96) <= 8191.0;
          float v100 = 8191.0;
          if (v89)
          {
            float v100 = v99;
            if (v99 < 0.0) {
              float v100 = 0.0;
            }
          }
          float v101 = v82 + v96;
          float v102 = 8191.0;
          if (v101 <= 8191.0)
          {
            float v102 = v101;
            if (v101 < 0.0) {
              float v102 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H22 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S24, H22 }
          _H22 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S25, H22 }
          _H27 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          float v121 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v122 = (float)((float)((float)(v65 * _S24) + (float)(v64 * _S2)) + (float)(v218 * _S25))
               + (float)(v217 * v121);
          float v123 = 8191.0;
          if (v122 <= 8191.0)
          {
            float v123 = (float)((float)((float)(v65 * _S24) + (float)(v64 * _S2)) + (float)(v218 * _S25))
                 + (float)(v217 * v121);
            if (v122 < 0.0) {
              float v123 = 0.0;
            }
          }
          __asm
          {
            FCVT            S1, H27
            FCVT            S3, H31
            FCVT            S17, H8
          }
          _H27 = *((_WORD *)result + llroundf(v123));
          float v128 = (float)((float)((float)(v65 * _S3) + (float)(v64 * _S1)) + (float)(v218 * _S17))
               + (float)(v217 * fmaxf(_S1, fmaxf(_S3, _S17)));
          float v129 = 8191.0;
          if (v128 <= 8191.0)
          {
            float v129 = v128;
            if (v128 < 0.0) {
              float v129 = 0.0;
            }
          }
          __asm
          {
            FCVT            S28, H30
            FCVT            S22, H22
            FCVT            S23, H23
          }
          _H29 = *((_WORD *)result + llroundf(v129));
          float v134 = (float)((float)((float)(v65 * _S22) + (float)(v64 * _S28)) + (float)(v218 * _S23))
               + (float)(v217 * fmaxf(_S28, fmaxf(_S22, _S23)));
          float v135 = 8191.0;
          if (v134 <= 8191.0)
          {
            float v135 = v134;
            if (v134 < 0.0) {
              float v135 = 0.0;
            }
          }
          float v136 = v44;
          __asm
          {
            FCVT            S19, H19
            FCVT            S21, H21
            FCVT            S26, H26
          }
          _H30 = *((_WORD *)result + llroundf(v135));
          float v141 = (float)((float)((float)(v65 * _S21) + (float)(v64 * _S19)) + (float)(v218 * _S26))
               + (float)(v217 * fmaxf(_S19, fmaxf(_S21, _S26)));
          float v142 = 8191.0;
          if (v141 <= 8191.0)
          {
            float v142 = v141;
            if (v141 < 0.0) {
              float v142 = 0.0;
            }
          }
          __asm { FCVT            S27, H27 }
          float v144 = _S2 * _S27;
          float v145 = _S24 * _S27;
          float v146 = _S25 * _S27;
          __asm { FCVT            S27, H29 }
          float v148 = _S1 * _S27;
          float v149 = _S3 * _S27;
          _S17 = _S17 * _S27;
          __asm { FCVT            S27, H30 }
          float v152 = _S28 * _S27;
          float v153 = _S22 * _S27;
          float v154 = _S23 * _S27;
          LOWORD(_S27) = *((_WORD *)result + llroundf(v142));
          __asm { FCVT            S27, H27 }
          float v156 = _S19 * _S27;
          float v157 = _S21 * _S27;
          float v158 = _S26 * _S27;
          float v159 = (float)((float)(v230 * v145) + (float)(v144 * v231)) + (float)(v146 * v229);
          float v160 = (float)((float)(v227 * v145) + (float)(v144 * v228)) + (float)(v146 * v226);
          _S2 = (float)((float)(v223 * v145) + (float)(v144 * v225)) + (float)(v146 * v221);
          float v162 = (float)((float)(v230 * v149) + (float)(v148 * v231)) + (float)(_S17 * v229);
          float v163 = (float)((float)(v227 * v149) + (float)(v148 * v228)) + (float)(_S17 * v226);
          float v164 = (float)((float)(v223 * v149) + (float)(v148 * v225)) + (float)(_S17 * v221);
          float v165 = (float)((float)(v230 * v153) + (float)(v152 * v231)) + (float)(v154 * v229);
          float v166 = (float)((float)(v227 * v153) + (float)(v152 * v228)) + (float)(v154 * v226);
          float v167 = (float)((float)(v223 * v153) + (float)(v152 * v225)) + (float)(v154 * v221);
          float v168 = (float)((float)(v230 * v157) + (float)(v156 * v231)) + (float)(v158 * v229);
          float v169 = (float)((float)(v227 * v157) + (float)(v156 * v228)) + (float)(v158 * v226);
          float v170 = (float)((float)(v223 * v157) + (float)(v156 * v225)) + (float)(v158 * v221);
          LOWORD(_S17) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          __asm { FCVT            S21, H17 }
          LOWORD(_S17) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm { FCVT            S25, H17 }
          LOWORD(_S2) = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          __asm { FCVT            S26, H2 }
          _H22 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v60 + 2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
          float v183 = (float)((float)((float)(v222 * _S25) + (float)(v234 * _S21)) + (float)(v43 * _S26)) + v38;
          float v184 = v40;
          if (v183 <= v40)
          {
            float v184 = (float)((float)((float)(v222 * _S25) + (float)(v234 * _S21)) + (float)(v43 * _S26)) + v38;
            if (v183 < v38) {
              float v184 = v38;
            }
          }
          __asm
          {
            FCVT            S28, H22
            FCVT            S23, H23
            FCVT            S22, H27
          }
          float v188 = (float)((float)((float)(v222 * _S23) + (float)(v234 * _S28)) + (float)(v43 * _S22)) + v38;
          *(_WORD *)float32x4_t v50 = llroundf(v184) << v54;
          float v189 = v40;
          float v35 = v224;
          float v44 = v136;
          if (v188 <= v40)
          {
            float v189 = (float)((float)((float)(v222 * _S23) + (float)(v234 * _S28)) + (float)(v43 * _S22)) + v38;
            if (v188 < v38) {
              float v189 = v38;
            }
          }
          *((_WORD *)v50 + 1) = llroundf(v189) << v54;
          float v190 = _S21 + _S28;
          float v191 = _S25 + _S23;
          float v192 = _S26 + _S22;
          float v193 = (float)((float)(v236 + (float)(v190 * v136)) + (float)(v191 * v220)) + (float)(v192 * v45);
          float v194 = v42;
          if (v193 <= v42)
          {
            float v194 = (float)((float)(v236 + (float)(v190 * v136)) + (float)(v191 * v220)) + (float)(v192 * v45);
            if (v193 < v235) {
              float v194 = v235;
            }
          }
          float v195 = (float)((float)(v236 + (float)(v190 * v46)) + (float)(v191 * v232)) + (float)(v192 * v47);
          *(v70 - 1) = llroundf(v194) << v54;
          float v196 = v42;
          float v33 = v233;
          float v65 = v219;
          if (v195 <= v42)
          {
            float v196 = v195;
            if (v195 < v235) {
              float v196 = v235;
            }
          }
          __asm
          {
            FCVT            S21, H17
            FCVT            S19, H19
            FCVT            S17, H24
          }
          _WORD *v70 = llroundf(v196) << v54;
          float v200 = (float)((float)((float)(v222 * _S19) + (float)(v234 * _S21)) + (float)(v43 * _S17)) + v38;
          float v201 = v40;
          if (v200 <= v40)
          {
            float v201 = (float)((float)((float)(v222 * _S19) + (float)(v234 * _S21)) + (float)(v43 * _S17)) + v38;
            if (v200 < v38) {
              float v201 = v38;
            }
          }
          __asm
          {
            FCVT            S22, H1
            FCVT            S2, H2
            FCVT            S1, H3
          }
          float v204 = (float)((float)((float)(v222 * _S2) + (float)(v234 * _S22)) + (float)(v43 * _S1)) + v38;
          *(_WORD *)float v72 = llroundf(v201) << v54;
          float v205 = v40;
          if (v204 <= v40)
          {
            float v205 = (float)((float)((float)(v222 * _S2) + (float)(v234 * _S22)) + (float)(v43 * _S1)) + v38;
            if (v204 < v38) {
              float v205 = v38;
            }
          }
          *((_WORD *)v72 + 1) = llroundf(v205) << v54;
          float v206 = _S19 + _S2;
          float v207 = _S17 + _S1;
          float v208 = (float)((float)(v236 + (float)((float)(_S21 + _S22) * v136)) + (float)(v206 * v220))
               + (float)(v207 * v45);
          float v209 = v42;
          if (v208 <= v42)
          {
            float v209 = (float)((float)(v236 + (float)((float)(_S21 + _S22) * v136)) + (float)(v206 * v220))
                 + (float)(v207 * v45);
            if (v208 < v235) {
              float v209 = v235;
            }
          }
          float v210 = (float)((float)(v236 + (float)((float)(_S21 + _S22) * v46)) + (float)(v206 * v232))
               + (float)(v207 * v47);
          *(_WORD *)((char *)v70 + v28 - 2) = llroundf(v209) << v54;
          float v66 = v42;
          if (v210 <= v42)
          {
            float v66 = v210;
            if (v210 < v235) {
              float v66 = v235;
            }
          }
          v61 += 2;
          v71 += 2;
          v50 += 4;
          v72 += 4;
          *(_WORD *)((char *)v70 + v28) = llroundf(v66) << v54;
          v69 += 2;
          v70 += 2;
          float v34 = v241;
        }
        while (v11 > v69);
      }
      float16x8_t v61 = &v67[v23];
      v62 += v24;
      float32x4_t v50 = &v68[v27];
      v10 += 2;
      v63 += v28;
    }
    while (v14 > v10);
    if (v216 && v30)
    {
      uint64_t v211 = 0;
      do
      {
        if (v11)
        {
          unint64_t v212 = v11;
          uint32x4_t v213 = v31;
          uint64_t v214 = v26;
          do
          {
            __int16 v215 = *v214++;
            *v213++ = v215 | (v215 << 8);
            --v212;
          }
          while (v212);
        }
        v26 += v25;
        v31 += v29;
        ++v211;
      }
      while (v211 != v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, 2 * v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_xf422_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Mat_TRC_xf422_neon_fp16_GCD(void *result, uint64_t a2, double a3, float32x4_t a4, float32x4_t a5, __n128 _Q3)
{
  uint64_t v12 = *(void *)((char *)result + 28);
  unint64_t v13 = 2 * *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (2 * v15 != 2 * v14)
  {
    unint64_t v16 = 0;
    unint64_t v17 = *(void *)((char *)result + 20);
    uint64_t v18 = *(void *)((char *)result + 36);
    uint64_t v19 = *(void *)((char *)result + 44) + 2 * v14;
    unint64_t v20 = 2 * v15 - 2 * v14;
    uint64_t v21 = result[14];
    size_t v22 = (uint64_t *)result[16];
    uint64_t v23 = result[15] + 2 * (result[13] * a2 / v13);
    uint64_t v24 = (float32x2_t *)result[19];
    uint64_t v25 = (uint64_t *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = result[17];
    uint64_t v28 = *v26;
    uint64_t v29 = v26[1];
    uint64_t v368 = v26[2];
    uint64_t v371 = v25[2];
    uint64_t result = *(void **)v27;
    uint64_t v30 = *(void *)(v27 + 8);
    uint64_t v372 = *(void *)(v27 + 16);
    __b = (void *)(v22[2] + v372 * v23 + 2 * v21);
    uint64_t v370 = v22[2];
    LODWORD(v27) = v24[17].u16[2];
    unsigned int v31 = v24[17].u16[3];
    LODWORD(a3) = 1174403072;
    a4.i32[0] = v24[3].i32[1];
    float v32 = (float)v27;
    *(short float *)v8.i16 = (short float)v27;
    unsigned int v33 = v24[18].u16[0];
    float v386 = (float)v31;
    short float v34 = (short float)v31;
    unsigned int v35 = v24[18].u16[1];
    _S26 = v24[5].f32[1];
    v36.i32[0] = v24[6].i32[0];
    v38.i32[0] = v24[6].i32[1];
    _Q3.n128_u32[0] = v24[7].u32[0];
    a4.i32[1] = v24[1].i32[0];
    v36.i32[1] = v24[7].i32[1];
    v38.i32[1] = v24[8].i32[0];
    _Q3.n128_u32[1] = v24[8].u32[1];
    LODWORD(v27) = v24[18].u16[2];
    float v39 = (float)v33;
    *(short float *)v6.i16 = (short float)v33;
    unsigned int v40 = v24[18].u16[3];
    float v41 = (float)v35;
    *(short float *)v7.i16 = (short float)v35;
    unsigned int v42 = v24[19].u16[0];
    _S24 = v24[4].f32[1];
    _S10 = v24[5].f32[0];
    _S28 = v24[9].i32[0];
    _S13 = v24[9].i32[1];
    float v47 = (float)v27;
    *(short float *)v9.i16 = (short float)v27;
    uint64_t v48 = (char *)&v24[20] + 4;
    float v367 = (unsigned __int8 *)(v371 + v368 * v19 + v18);
    a5.f32[0] = 8191.0 / (float)v24[16].u32[0];
    _S29 = a5.f32[0] * v24->f32[0];
    float v50 = (float)v40;
    float v51 = (float)v42;
    float16x8_t v52 = (float16x8_t)vdupq_lane_s16(v8, 0);
    short float v53 = -v34;
    *(float32x2_t *)a4.f32 = vmul_n_f32(*(float32x2_t *)a4.f32, a5.f32[0]);
    unint64_t v423 = a4.i64[0];
    float16x8_t v54 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a4), 0);
    *(float32x2_t *)v11.f32 = vmul_n_f32(v24[2], a5.f32[0]);
    float16x8_t v417 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    float16x8_t v433 = vmulq_n_f16(v54, v53);
    *(float32x2_t *)a5.f32 = vmul_f32(v36, (float32x2_t)0x3F0000003F000000);
    unint64_t v432 = a5.i64[0];
    float32x4_t v55 = (float32x4_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v416 = (float16x8_t)v55;
    *(float32x2_t *)v55.f32 = vmul_f32(v38, (float32x2_t)0x3F0000003F000000);
    uint64_t v431 = v55.i64[0];
    *(float32x2_t *)v10.f32 = vmul_f32((float32x2_t)_Q3.n128_u64[0], (float32x2_t)0x3F0000003F000000);
    float16x8_t v414 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v415 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v55), 0);
    float16x8_t v434 = (float16x8_t)vdupq_lane_s16(v6, 0);
    int16x8_t v58 = vdupq_lane_s16(v7, 0);
    float16x8_t v56 = vmulq_n_f16(v417, v53);
    int16x8_t v57 = vdupq_lane_s16(v9, 0);
    float16x8_t v412 = (float16x8_t)v57;
    float16x8_t v413 = (float16x8_t)v58;
    *(short float *)v57.i16 = (short float)v40;
    *(short float *)v58.i16 = (short float)v42;
    unsigned int v59 = v24[16].u8[4];
    if (v59 >= 0x11) {
      unsigned __int8 v60 = 0;
    }
    else {
      unsigned __int8 v60 = 16 - v59;
    }
    uint64_t v62 = *v22;
    uint64_t v61 = v22[1];
    _ZF = v61 == 0;
    uint64_t v64 = v61 + v30 * v23 + 2 * v21;
    if (_ZF) {
      float v65 = 0;
    }
    else {
      float v65 = (uint16x8_t *)v64;
    }
    float v66 = (uint16x8_t *)(v62 + (void)result * v23 + 2 * v21);
    if (v19 >= 0) {
      uint64_t v67 = v19;
    }
    else {
      uint64_t v67 = v19 + 1;
    }
    uint64_t v68 = *v25;
    uint64_t v69 = v25[1] + v29 * (v67 >> 1);
    uint64_t v70 = (char *)&v24[2068] + 4;
    int16x8_t v71 = vdupq_lane_s16(*(int16x4_t *)v57.i8, 0);
    int16x8_t v72 = vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    float16x8_t v73 = v54;
    unsigned int v74 = (unsigned char *)(v69 + v18);
    float v75 = (int8x8_t *)(v68 + v28 * v19 + v18);
    unsigned __int8 v76 = v60;
    unint64_t v374 = v17 & 0xFFFFFFF8;
    __asm
    {
      FCVT            H2, S29
      FCVT            H8, S24
    }
    short float v399 = _H8;
    __asm
    {
      FCVT            H8, S10
      FCVT            H6, S26
    }
    short float v397 = _H6;
    float v421 = v24[9].f32[0];
    __asm { FCVT            H6, S28 }
    float16x8_t v85 = v433;
    float v420 = v24[9].f32[1];
    __asm { FCVT            H5, S13 }
    short float v395 = _H5;
    float v409 = v24[10].f32[0];
    __asm { FCVT            H5, S17 }
    float v408 = v24[10].f32[1];
    __asm { FCVT            H3, S18 }
    __n128 v393 = _Q3;
    float v407 = v24[11].f32[0];
    __asm { FCVT            H3, S20 }
    float v405 = v24[11].f32[1];
    __asm { FCVT            H13, S31 }
    short float v391 = _H13;
    float v404 = v24[12].f32[0];
    __asm { FCVT            H13, S16 }
    float v403 = v24[12].f32[1];
    __asm { FCVT            H14, S14 }
    float v401 = v24[13].f32[0];
    __asm { FCVT            H15, S15 }
    uint16x8_t v388 = (uint16x8_t)vdupq_n_s16(v60);
    uint64_t v93 = v11.i64[0];
    v94.i32[0] = v10.i32[1];
    float v428 = v10.f32[1];
    float v430 = v10.f32[0];
    float16x8_t v95 = 0uLL;
    float16x8_t v429 = v56;
    float16x8_t v411 = (float16x8_t)v71;
    int16x8_t v385 = v72;
    short float v394 = _H5;
    short float v392 = _H3;
    unint64_t v379 = v20;
    unint64_t v380 = v17;
    uint64_t v377 = v29;
    uint64_t v378 = v28;
    uint64_t v376 = result;
    uint64_t v422 = v30;
    float16x8_t v418 = v54;
    float16x8_t v419 = v52;
    int v410 = v17 - 7;
    unsigned __int8 v375 = v60;
    float v406 = v50;
    float v402 = v32;
    float v400 = _S29;
    short float v398 = _H8;
    short float v396 = _H6;
    short float v390 = _H13;
    short float v389 = _H15;
    float v387 = v47;
    float32_t v373 = v24[5].f32[0];
    do
    {
      float v96 = (char *)v75 + v28;
      float v97 = (char *)result + (void)v66;
      float v98 = &v65->i8[v30];
      if ((int)v17 < 8)
      {
        unint64_t v244 = 0;
        uint16x8_t v243 = (__int16 *)((char *)v65->i16 + v30);
        float v101 = (uint16x8_t *)((char *)result + (void)v66);
        uint64_t v242 = v74;
        float v100 = (int8x8_t *)((char *)v75 + v28);
        float16x8_t v245 = v85;
      }
      else
      {
        size_t v381 = (char *)v75 + v28;
        float v382 = &v65->i8[v30];
        float v383 = (char *)result + (void)v66;
        unint64_t v384 = v16;
        uint64_t v99 = 0;
        float v100 = (int8x8_t *)((char *)v75 + v28);
        float v101 = (uint16x8_t *)((char *)result + (void)v66);
        v102.i64[0] = 0x9000900090009000;
        v102.i64[1] = 0x9000900090009000;
        float16x8_t v103 = (float16x8_t)v72;
        int32x4_t v424 = v74;
        do
        {
          uint64_t v425 = v65;
          uint64_t v427 = v66;
          int8x8_t v104 = *(int8x8_t *)&v74[v99];
          *(int8x8_t *)v105.i8 = vzip1_s8(v104, *(int8x8_t *)v95.i8);
          v105.u64[1] = (unint64_t)vzip2_s8(v104, *(int8x8_t *)v95.i8);
          float16x8_t v106 = vcvtq_f16_u16(v105);
          int16x8_t v107 = (int16x8_t)vmlaq_f16(v433, v73, v106);
          int8x16_t v108 = (int8x16_t)vmlaq_f16(v56, v417, v106);
          v106.i64[0] = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u64[0];
          *(int16x4_t *)v109.i8 = vuzp1_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v106.i8);
          *(int16x4_t *)v106.i8 = vuzp2_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v106.i8);
          *(double *)&v106.i64[1] = a3;
          *(double *)&v109.i64[1] = a3;
          v107.i64[0] = vextq_s8(v108, v108, 8uLL).u64[0];
          *(float16x4_t *)v107.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v107.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v107.i8));
          *(double *)&v107.i64[1] = a3;
          uint64_t v426 = v75 + 1;
          *(int8x8_t *)v110.i8 = vzip1_s8(*v75, *(int8x8_t *)v95.i8);
          float16x8_t v111 = (float16x8_t)vzip1q_s16((int16x8_t)v106, (int16x8_t)v106);
          v110.u64[1] = (unint64_t)vzip2_s8(*v75, *(int8x8_t *)v95.i8);
          int8x8_t v112 = *v100++;
          float16x8_t v113 = (float16x8_t)vzip1q_s16(v109, v109);
          *(int8x8_t *)v109.i8 = vzip1_s8(v112, *(int8x8_t *)v95.i8);
          v109.u64[1] = (unint64_t)vzip2_s8(v112, *(int8x8_t *)v95.i8);
          float16x8_t v114 = (float16x8_t)vzip1q_s16(v107, v107);
          float16x8_t v115 = vsubq_f16(vcvtq_f16_u16(v110), v52);
          float16x8_t v116 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v109), v52);
          float16x8_t v117 = vmlaq_n_f16(v111, v115, _H2);
          float16x8_t v118 = vmlaq_n_f16(v111, v116, _H2);
          float16x8_t v119 = v114;
          float16x8_t v120 = vmlaq_n_f16(v114, v116, _H2);
          float16x8_t v121 = vmlaq_n_f16(v113, v115, _H2);
          float16x8_t v122 = vmlaq_n_f16(v113, v116, _H2);
          float16x8_t v123 = vmlaq_n_f16(v119, v115, _H2);
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, v95), v102));
          uint32x4_t v125 = vmovl_high_u16(v124);
          *(void *)&long long v126 = v125.u32[2];
          *((void *)&v126 + 1) = v125.u32[3];
          long long v127 = v126;
          *(void *)&long long v126 = v125.u32[0];
          *((void *)&v126 + 1) = v125.u32[1];
          long long v128 = v126;
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v124.i8);
          *(void *)&long long v126 = v129.u32[2];
          *((void *)&v126 + 1) = v129.u32[3];
          uint64_t v130 = v129.u32[1];
          v131.i16[0] = *(_WORD *)&v48[2 * v129.u32[0]];
          uint64_t v132 = *((void *)&v128 + 1);
          uint32x4_t v133 = (__int16 *)&v48[2 * v128];
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v123, v95), v102));
          float16x8_t v135 = (float16x8_t)vmovl_high_u16(v134);
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v134.i8);
          uint64_t v137 = v136.u32[1];
          uint64_t v138 = v136.u32[3];
          v139.i16[0] = *(_WORD *)&v48[2 * v136.u32[0]];
          uint64_t v140 = (__int16 *)&v48[2 * v136.u32[2]];
          float v141 = (__int16 *)&v48[2 * v135.u32[0]];
          float v142 = (__int16 *)&v48[2 * v135.u32[2]];
          uint16x8_t v143 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, v95), v102));
          uint32x4_t v144 = vmovl_high_u16(v143);
          uint32x4_t v145 = vmovl_u16(*(uint16x4_t *)v143.i8);
          float v146 = (__int16 *)&v48[2 * v132];
          v147.i16[0] = *(_WORD *)&v48[2 * v145.u32[0]];
          float v148 = (__int16 *)&v48[2 * v145.u32[1]];
          float v149 = (__int16 *)&v48[2 * v145.u32[2]];
          uint64_t v150 = (__int16 *)&v48[2 * v145.u32[3]];
          v131.i16[1] = *(_WORD *)&v48[2 * v130];
          float16x8_t v151 = (__int16 *)&v48[2 * v144.u32[0]];
          float v152 = (__int16 *)&v48[2 * v144.u32[1]];
          float v153 = (__int16 *)&v48[2 * v137];
          float v154 = (__int16 *)&v48[2 * v144.u32[2]];
          float v155 = (__int16 *)&v48[2 * v144.u32[3]];
          float v156 = (__int16 *)&v48[2 * v138];
          uint16x8_t v157 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, v95), v102));
          uint32x4_t v158 = vmovl_high_u16(v157);
          float v159 = (__int16 *)&v48[2 * v135.u32[1]];
          uint32x4_t v160 = vmovl_u16(*(uint16x4_t *)v157.i8);
          float v161 = (__int16 *)&v48[2 * v135.u32[3]];
          v162.i16[0] = *(_WORD *)&v48[2 * v160.u32[0]];
          v147.i16[1] = *v148;
          v131.i16[2] = *(_WORD *)&v48[2 * v126];
          v139.i16[1] = *v153;
          float v163 = (__int16 *)&v48[2 * v158.u32[0]];
          v147.i16[2] = *v149;
          float v164 = (__int16 *)&v48[2 * v158.u32[1]];
          float v165 = (__int16 *)&v48[2 * v158.u32[2]];
          float v166 = (__int16 *)&v48[2 * v158.u32[3]];
          v131.i16[3] = *(_WORD *)&v48[2 * *((void *)&v126 + 1)];
          v162.i16[1] = *(_WORD *)&v48[2 * v160.u32[1]];
          v162.i16[2] = *(_WORD *)&v48[2 * v160.u32[2]];
          v139.i16[2] = *v140;
          v162.i16[3] = *(_WORD *)&v48[2 * v160.u32[3]];
          v147.i16[3] = *v150;
          uint16x8_t v167 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, v95), v102));
          uint32x4_t v168 = vmovl_high_u16(v167);
          v162.i16[4] = *v163;
          uint32x4_t v169 = vmovl_u16(*(uint16x4_t *)v167.i8);
          v131.i16[4] = *v133;
          v135.i16[0] = *(_WORD *)&v48[2 * v169.u32[0]];
          v139.i16[3] = *v156;
          v147.i16[4] = *v151;
          v162.i16[5] = *v164;
          v131.i16[5] = *v146;
          float v170 = (__int16 *)&v48[2 * v168.u32[2]];
          float v171 = (__int16 *)&v48[2 * v168.u32[3]];
          v139.i16[4] = *v141;
          v135.i16[1] = *(_WORD *)&v48[2 * v169.u32[1]];
          v135.i16[2] = *(_WORD *)&v48[2 * v169.u32[2]];
          v147.i16[5] = *v152;
          v135.i16[3] = *(_WORD *)&v48[2 * v169.u32[3]];
          v135.i16[4] = *(_WORD *)&v48[2 * v168.u32[0]];
          v162.i16[6] = *v165;
          v135.i16[5] = *(_WORD *)&v48[2 * v168.u32[1]];
          v131.i16[6] = *(_WORD *)&v48[2 * v127];
          uint16x8_t v172 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, v95), v102));
          uint32x4_t v173 = vmovl_high_u16(v172);
          v139.i16[5] = *v159;
          uint32x4_t v174 = vmovl_u16(*(uint16x4_t *)v172.i8);
          v147.i16[6] = *v154;
          v123.i16[0] = *(_WORD *)&v48[2 * v174.u32[0]];
          v162.i16[7] = *v166;
          v135.i16[6] = *v170;
          v131.i16[7] = *(_WORD *)&v48[2 * *((void *)&v127 + 1)];
          v139.i16[6] = *v142;
          v147.i16[7] = *v155;
          v123.i16[1] = *(_WORD *)&v48[2 * v174.u32[1]];
          v123.i16[2] = *(_WORD *)&v48[2 * v174.u32[2]];
          v139.i16[7] = *v161;
          v123.i16[3] = *(_WORD *)&v48[2 * v174.u32[3]];
          v123.i16[4] = *(_WORD *)&v48[2 * v173.u32[0]];
          v135.i16[7] = *v171;
          v123.i16[5] = *(_WORD *)&v48[2 * v173.u32[1]];
          v123.i16[6] = *(_WORD *)&v48[2 * v173.u32[2]];
          v123.i16[7] = *(_WORD *)&v48[2 * v173.u32[3]];
          v120.i16[7] = v393.n128_i16[7];
          float16x8_t v175 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v131, v396), v139, v395), v147, v394);
          float16x8_t v176 = vmlaq_n_f16(vmulq_n_f16(v147, v389), v139, _H14);
          float16x8_t v177 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v162, v396), v135, v395), v123, v394);
          float16x8_t v178 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v131, *(short float *)v393.n128_u16), v139, v392), v147, v391);
          float16x8_t v179 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v162, *(short float *)v393.n128_u16), v135, v392), v123, v391);
          float16x8_t v180 = vmlaq_n_f16(v176, v131, v390);
          float16x8_t v181 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v123, v389), v135, _H14), v162, v390);
          uint16x8_t v182 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v175, v95), v102));
          uint32x4_t v183 = vmovl_high_u16(v182);
          *(void *)&long long v126 = v183.u32[2];
          *((void *)&v126 + 1) = v183.u32[3];
          long long v184 = v126;
          uint32x4_t v185 = vmovl_u16(*(uint16x4_t *)v182.i8);
          uint64_t v186 = v185.u32[1];
          uint64_t v187 = v185.u32[0];
          uint64_t v188 = v185.u32[3];
          uint64_t v189 = v185.u32[2];
          uint64_t v190 = v183.u32[1];
          uint64_t v191 = v183.u32[0];
          uint16x8_t v192 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v178, v95), v102));
          uint32x4_t v193 = vmovl_high_u16(v192);
          *(void *)&long long v126 = v193.u32[2];
          *((void *)&v126 + 1) = v193.u32[3];
          long long v194 = v126;
          *(void *)&long long v126 = v193.u32[0];
          *((void *)&v126 + 1) = v193.u32[1];
          long long v195 = v126;
          uint32x4_t v196 = vmovl_u16(*(uint16x4_t *)v192.i8);
          *(void *)&long long v126 = v196.u32[2];
          *((void *)&v126 + 1) = v196.u32[3];
          long long v197 = v126;
          uint64_t v198 = v196.u32[1];
          uint64_t v199 = v196.u32[0];
          uint64_t v200 = *((void *)&v195 + 1);
          uint64_t v201 = v195;
          v131.i16[0] = *(_WORD *)&v70[2 * v187];
          uint64_t v202 = *((void *)&v194 + 1);
          float16x8_t v203 = (__int16 *)&v70[2 * v189];
          uint16x8_t v204 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v180, v95), v102));
          uint32x4_t v205 = vmovl_high_u16(v204);
          v120.i16[0] = *(_WORD *)&v70[2 * v199];
          uint32x4_t v206 = vmovl_u16(*(uint16x4_t *)v204.i8);
          *((void *)&v194 + 1) = v206.u32[3];
          uint64_t v207 = v206.u32[1];
          v139.i16[0] = *(_WORD *)&v70[2 * v206.u32[0]];
          float v208 = (__int16 *)&v70[2 * v186];
          float v209 = (__int16 *)&v70[2 * v206.u32[2]];
          uint64_t v210 = v205.u32[1];
          uint64_t v211 = v205.u32[0];
          uint64_t v212 = v205.u32[3];
          uint64_t v213 = v205.u32[2];
          uint16x8_t v214 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v177, v95), v102));
          uint32x4_t v215 = vmovl_high_u16(v214);
          *(void *)&long long v126 = v215.u32[2];
          *((void *)&v126 + 1) = v215.u32[3];
          long long v216 = v126;
          *((void *)&v126 + 1) = v215.u32[1];
          float16x8_t v217 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v214.i8);
          v131.i16[1] = *v208;
          v118.i16[0] = *(_WORD *)&v70[2 * v217.u32[0]];
          v120.i16[1] = *(_WORD *)&v70[2 * v198];
          v139.i16[1] = *(_WORD *)&v70[2 * v207];
          v118.i16[1] = *(_WORD *)&v70[2 * v217.u32[1]];
          v131.i16[2] = *v203;
          float v218 = (__int16 *)&v70[2 * v217.u32[3]];
          v118.i16[2] = *(_WORD *)&v70[2 * v217.u32[2]];
          uint64_t v219 = v215.u32[0];
          v120.i16[2] = *(_WORD *)&v70[2 * v197];
          uint16x8_t v220 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v179, v95), v102));
          uint32x4_t v221 = vmovl_u16(*(uint16x4_t *)v220.i8);
          v139.i16[2] = *v209;
          v217.i16[7] = (unint64_t)v221.u32[1] >> 48;
          v118.i16[3] = *v218;
          v217.i16[0] = *(_WORD *)&v70[2 * v221.u32[0]];
          v131.i16[3] = *(_WORD *)&v70[2 * v188];
          v120.i16[3] = *(_WORD *)&v70[2 * *((void *)&v197 + 1)];
          v139.i16[3] = *(_WORD *)&v70[2 * *((void *)&v194 + 1)];
          float v222 = (__int16 *)&v70[2 * v200];
          v118.i16[4] = *(_WORD *)&v70[2 * v219];
          v131.i16[4] = *(_WORD *)&v70[2 * v191];
          float v223 = (__int16 *)&v70[2 * *((void *)&v216 + 1)];
          uint32x4_t v224 = vmovl_high_u16(v220);
          v120.i16[4] = *(_WORD *)&v70[2 * v201];
          v217.i16[1] = *(_WORD *)&v70[2 * v221.u32[1]];
          v139.i16[4] = *(_WORD *)&v70[2 * v211];
          v118.i16[5] = *(_WORD *)&v70[2 * *((void *)&v126 + 1)];
          v217.i16[2] = *(_WORD *)&v70[2 * v221.u32[2]];
          v131.i16[5] = *(_WORD *)&v70[2 * v190];
          v217.i16[3] = *(_WORD *)&v70[2 * v221.u32[3]];
          v120.i16[5] = *v222;
          v217.i16[4] = *(_WORD *)&v70[2 * v224.u32[0]];
          v139.i16[5] = *(_WORD *)&v70[2 * v210];
          uint64_t v225 = v224.u32[3];
          v118.i16[6] = *(_WORD *)&v70[2 * v216];
          v217.i16[5] = *(_WORD *)&v70[2 * v224.u32[1]];
          v217.i16[6] = *(_WORD *)&v70[2 * v224.u32[2]];
          v131.i16[6] = *(_WORD *)&v70[2 * v184];
          uint16x8_t v226 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v181, v95), v102));
          uint32x4_t v227 = vmovl_high_u16(v226);
          v120.i16[6] = *(_WORD *)&v70[2 * v194];
          uint32x4_t v228 = vmovl_u16(*(uint16x4_t *)v226.i8);
          uint64_t v229 = v228.u32[1];
          v139.i16[6] = *(_WORD *)&v70[2 * v213];
          uint64_t v30 = v422;
          uint64_t v230 = v228.u32[0];
          uint64_t v231 = v228.u32[3];
          float16x8_t v232 = (float16x8_t)vuzp1q_s16((int16x8_t)v118, (int16x8_t)v217);
          uint64_t v233 = v228.u32[2];
          v118.i16[7] = *v223;
          float16x8_t v234 = (float16x8_t)vuzp1q_s16((int16x8_t)v131, (int16x8_t)v120);
          v131.i16[7] = *(_WORD *)&v70[2 * *((void *)&v184 + 1)];
          v120.i16[7] = *(_WORD *)&v70[2 * v202];
          v235.i16[7] = v52.i16[7];
          float16x8_t v236 = (float16x8_t)vtrn1q_s16((int16x8_t)v139, (int16x8_t)v139);
          v139.i16[7] = *(_WORD *)&v70[2 * v212];
          v217.i16[7] = *(_WORD *)&v70[2 * v225];
          int16x8_t v237 = (int16x8_t)vaddq_f16(v234, (float16x8_t)vuzp2q_s16((int16x8_t)v131, (int16x8_t)v120));
          float16x8_t v238 = vmlaq_n_f16(vmlaq_n_f16(v434, v118, v399), v217, v398);
          v235.i16[0] = *(_WORD *)&v70[2 * v230];
          v235.i16[1] = *(_WORD *)&v70[2 * v229];
          v235.i16[2] = *(_WORD *)&v70[2 * v233];
          v235.i16[3] = *(_WORD *)&v70[2 * v231];
          v235.i16[4] = *(_WORD *)&v70[2 * v227.u32[0]];
          unsigned int v74 = v424;
          v235.i16[5] = *(_WORD *)&v70[2 * v227.u32[1]];
          v235.i16[6] = *(_WORD *)&v70[2 * v227.u32[2]];
          float v75 = v426;
          int16x8_t v239 = (int16x8_t)vaddq_f16(v232, (float16x8_t)vuzp2q_s16((int16x8_t)v118, (int16x8_t)v217));
          float16x8_t v240 = (float16x8_t)vtrn1q_s16(v235, v235);
          v235.i16[7] = *(_WORD *)&v70[2 * v227.u32[3]];
          float16x8_t v94 = vmlaq_f16(vmlaq_f16(vmlaq_f16(v413, v416, (float16x8_t)vzip1q_s16(v237, v237)), v415, (float16x8_t)vzip2q_s16(v237, v237)), v414, vaddq_f16(v236, (float16x8_t)vtrn2q_s16((int16x8_t)v139, (int16x8_t)v139)));
          float16x8_t v56 = v429;
          *uint64_t v427 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v434, v131, v399), v120, v398), v139, v397), v434), v412)), v388);
          float v66 = v427 + 1;
          *uint64_t v425 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(v94, v411), v103)), v388);
          *v101++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v238, (float16x8_t)v235, v397), v434), v412)), v388);
          float16x8_t v241 = vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v413, v416, (float16x8_t)vzip1q_s16(v239, v239)), v415, (float16x8_t)vzip2q_s16(v239, v239)), v414, vaddq_f16(v240, (float16x8_t)vtrn2q_s16(v235, v235))), v411);
          float16x8_t v95 = 0uLL;
          int16x8_t v72 = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(v241, v103)), v388);
          *(int16x8_t *)((char *)v425 + v422) = v72;
          float v65 = v425 + 1;
          v99 += 8;
        }
        while ((int)v99 < v410);
        uint64_t v242 = &v424[v99];
        uint16x8_t v243 = (__int16 *)((char *)v65->i16 + v422);
        unint64_t v244 = v374;
        unint64_t v20 = v379;
        unint64_t v17 = v380;
        float v97 = v383;
        unint64_t v16 = v384;
        uint64_t v29 = v377;
        uint64_t v28 = v378;
        uint64_t result = v376;
        unsigned __int8 v76 = v375;
        float v96 = v381;
        float v98 = v382;
        float16x8_t v245 = v433;
        _S10 = v373;
      }
      for (; v17 > v244; float16x8_t v56 = v429)
      {
        v72.i8[0] = v242[1];
        float v246 = (float)v72.u32[0] - v386;
        unsigned int v247 = HIDWORD(v423);
        float v248 = *((float *)&v423 + 1) * v246;
        LOBYTE(v247) = v75->i8[0];
        float v249 = _S29 * (float)((float)v247 - v32);
        float v250 = (float)(*((float *)&v423 + 1) * v246) + v249;
        float v251 = 8191.0;
        if (v250 <= 8191.0)
        {
          float v251 = (float)(*((float *)&v423 + 1) * v246) + v249;
          if (v250 < 0.0) {
            float v251 = 0.0;
          }
        }
        LOBYTE(v250) = *v242;
        float v252 = (float)LODWORD(v250) - v386;
        float v253 = (float)(*((float *)&v93 + 1) * v246) + (float)(v252 * *(float *)&v93);
        float v254 = 8191.0;
        if ((float)(v249 + v253) <= 8191.0)
        {
          float v254 = v249 + v253;
          if ((float)(v249 + v253) < 0.0) {
            float v254 = 0.0;
          }
        }
        float v255 = *(float *)&v423 * v252;
        float v256 = (float)(*(float *)&v423 * v252) + v249;
        float v257 = 8191.0;
        if (v256 <= 8191.0)
        {
          float v257 = v256;
          if (v256 < 0.0) {
            float v257 = 0.0;
          }
        }
        LOBYTE(v256) = v75->i8[1];
        float v258 = _S29 * (float)((float)LODWORD(v256) - v32);
        float v259 = 8191.0;
        if ((float)(v248 + v258) <= 8191.0)
        {
          float v259 = v248 + v258;
          if ((float)(v248 + v258) < 0.0) {
            float v259 = 0.0;
          }
        }
        float v260 = 8191.0;
        if ((float)(v253 + v258) <= 8191.0)
        {
          float v260 = v253 + v258;
          if ((float)(v253 + v258) < 0.0) {
            float v260 = 0.0;
          }
        }
        float v261 = v255 + v258;
        BOOL v262 = (float)(v255 + v258) <= 8191.0;
        float v263 = 8191.0;
        if (v262)
        {
          float v263 = v261;
          if (v261 < 0.0) {
            float v263 = 0.0;
          }
        }
        LOBYTE(v261) = v100->i8[0];
        float v264 = _S29 * (float)((float)LODWORD(v261) - v32);
        float v265 = 8191.0;
        if ((float)(v248 + v264) <= 8191.0)
        {
          float v265 = v248 + v264;
          if ((float)(v248 + v264) < 0.0) {
            float v265 = 0.0;
          }
        }
        float v266 = 8191.0;
        if ((float)(v253 + v264) <= 8191.0)
        {
          float v266 = v253 + v264;
          if ((float)(v253 + v264) < 0.0) {
            float v266 = 0.0;
          }
        }
        float v267 = v255 + v264;
        BOOL v262 = (float)(v255 + v264) <= 8191.0;
        float v268 = 8191.0;
        if (v262)
        {
          float v268 = v267;
          if (v267 < 0.0) {
            float v268 = 0.0;
          }
        }
        v94.i8[0] = v100->i8[1];
        *(float *)v94.i32 = _S29 * (float)((float)v94.u32[0] - v32);
        float v269 = v248 + *(float *)v94.i32;
        BOOL v262 = (float)(v248 + *(float *)v94.i32) <= 8191.0;
        float v270 = 8191.0;
        if (v262)
        {
          float v270 = v269;
          if (v269 < 0.0) {
            float v270 = 0.0;
          }
        }
        float v271 = v39;
        float v272 = _S10;
        float v273 = v253 + *(float *)v94.i32;
        BOOL v262 = (float)(v253 + *(float *)v94.i32) <= 8191.0;
        float v274 = 8191.0;
        if (v262)
        {
          float v274 = v273;
          if (v273 < 0.0) {
            float v274 = 0.0;
          }
        }
        float v275 = _S24;
        float v276 = _S26;
        float v277 = v255 + *(float *)v94.i32;
        float v278 = 8191.0;
        if (v277 <= 8191.0)
        {
          float v278 = v277;
          if (v277 < 0.0) {
            float v278 = 0.0;
          }
        }
        _H16 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v251, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        _H17 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v254, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        _H18 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v257, 0.0), 8191.0))];
        __asm { FCVT            S18, H18 }
        _H28 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v259, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v260, 0.0), 8191.0))];
        __asm
        {
          FCVT            S28, H28
          FCVT            S1, H1
        }
        _H3 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v263, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H5 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v265, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        _H6 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v266, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        _H7 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v268, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H20 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v270, 0.0), 8191.0))];
        _H30 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v274, 0.0), 8191.0))];
        __asm
        {
          FCVT            S20, H20
          FCVT            S30, H30
        }
        _H31 = *(_WORD *)&v48[2 * llroundf(fminf(fmaxf(v278, 0.0), 8191.0))];
        __asm { FCVT            S31, H31 }
        float v303 = (float)((float)(v420 * _S17) + (float)(_S16 * v421)) + (float)(_S18 * v409);
        float v304 = (float)((float)(v407 * _S17) + (float)(_S16 * v408)) + (float)(_S18 * v405);
        float v305 = (float)((float)(v403 * _S17) + (float)(_S16 * v404)) + (float)(_S18 * v401);
        float v306 = (float)((float)(v420 * _S1) + (float)(_S28 * v421)) + (float)(_S3 * v409);
        float v307 = (float)((float)(v407 * _S1) + (float)(_S28 * v408)) + (float)(_S3 * v405);
        float v308 = (float)((float)(v403 * _S1) + (float)(_S28 * v404)) + (float)(_S3 * v401);
        float v309 = (float)((float)(v420 * _S6) + (float)(_S5 * v421)) + (float)(_S7 * v409);
        float v310 = (float)((float)(v407 * _S6) + (float)(_S5 * v408)) + (float)(_S7 * v405);
        float v311 = (float)((float)(v403 * _S6) + (float)(_S5 * v404)) + (float)(_S7 * v401);
        float v312 = (float)((float)(v420 * _S30) + (float)(_S20 * v421)) + (float)(_S31 * v409);
        float v313 = (float)((float)(v407 * _S30) + (float)(_S20 * v408)) + (float)(_S31 * v405);
        float v314 = (float)((float)(v403 * _S30) + (float)(_S20 * v404)) + (float)(_S31 * v401);
        LOWORD(_S6) = *(_WORD *)&v70[2 * llroundf(fminf(fmaxf(v303, 0.0), 8191.0))];
        __asm { FCVT            S28, H6 }
        LOWORD(_S6) = *(_WORD *)&v70[2 * llroundf(fminf(fmaxf(v304, 0.0), 8191.0))];
        __asm { FCVT            S30, H6 }
        LOWORD(_S6) = *(_WORD *)&v70[2 * llroundf(fminf(fmaxf(v305, 0.0), 8191.0))];
        __asm { FCVT            S31, H6 }
        _H8 = *(_WORD *)&v70[2 * llroundf(fminf(fmaxf(v306, 0.0), 8191.0))];
        _H13 = *(_WORD *)&v70[2 * llroundf(fminf(fmaxf(v307, 0.0), 8191.0))];
        _H15 = *(_WORD *)&v70[2 * llroundf(fminf(fmaxf(v308, 0.0), 8191.0))];
        _H6 = *(_WORD *)&v70[2 * llroundf(fminf(fmaxf(v309, 0.0), 8191.0))];
        _H20 = *(_WORD *)&v70[2 * llroundf(fminf(fmaxf(v310, 0.0), 8191.0))];
        _H7 = *(_WORD *)&v70[2 * llroundf(fminf(fmaxf(v311, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v70[2 * llroundf(fminf(fmaxf(v312, 0.0), 8191.0))];
        _H3 = *(_WORD *)&v70[2 * llroundf(fminf(fmaxf(v313, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v70[2 * llroundf(fminf(fmaxf(v314, 0.0), 8191.0))];
        _S24 = v275;
        _S26 = v276;
        float v327 = (float)((float)(v272 * _S30) + (float)(v275 * _S28)) + (float)(v276 * _S31);
        float v39 = v271;
        float v328 = v327 + v271;
        float v329 = v387;
        if (v328 <= v387)
        {
          float v329 = v328;
          if (v328 < v271) {
            float v329 = v271;
          }
        }
        __asm
        {
          FCVT            S17, H8
          FCVT            S8, H13
          FCVT            S16, H15
        }
        _S10 = v272;
        float v333 = (float)((float)((float)(v272 * _S8) + (float)(v275 * _S17)) + (float)(_S26 * _S16)) + v271;
        v66->i16[0] = llroundf(v329) << v76;
        float v334 = v387;
        _S29 = v400;
        if (v333 <= v387)
        {
          float v334 = v333;
          if (v333 < v271) {
            float v334 = v271;
          }
        }
        v66->i16[1] = llroundf(v334) << v76;
        float v335 = _S28 + _S17;
        float v336 = _S30 + _S8;
        float v337 = _S31 + _S16;
        float v338 = (float)((float)(v41 + (float)(v335 * *(float *)&v432)) + (float)((float)(_S30 + _S8) * *(float *)&v431))
             + (float)(v337 * v430);
        float v339 = v51;
        float v32 = v402;
        if (v338 <= v51)
        {
          float v339 = v338;
          if (v338 < v406) {
            float v339 = v406;
          }
        }
        float v340 = (float)((float)(v41 + (float)(v335 * *((float *)&v432 + 1))) + (float)(v336 * *((float *)&v431 + 1)))
             + (float)(v337 * v428);
        v65->i16[0] = llroundf(v339) << v76;
        float v341 = v51;
        float16x8_t v73 = v418;
        float16x8_t v52 = v419;
        float16x8_t v245 = v433;
        if (v340 <= v51)
        {
          float v341 = v340;
          if (v340 < v406) {
            float v341 = v406;
          }
        }
        __asm
        {
          FCVT            S28, H6
          FCVT            S20, H20
          FCVT            S6, H7
        }
        v65->i16[1] = llroundf(v341) << v76;
        float v345 = (float)((float)((float)(_S10 * _S20) + (float)(v275 * _S28)) + (float)(_S26 * _S6)) + v271;
        float v346 = v387;
        float16x8_t v95 = 0uLL;
        if (v345 <= v387)
        {
          float v346 = (float)((float)((float)(_S10 * _S20) + (float)(v275 * _S28)) + (float)(_S26 * _S6)) + v271;
          if (v345 < v271) {
            float v346 = v271;
          }
        }
        __asm
        {
          FCVT            S7, H1
          FCVT            S3, H3
          FCVT            S1, H5
        }
        float v350 = (float)((float)((float)(_S10 * _S3) + (float)(v275 * _S7)) + (float)(_S26 * _S1)) + v271;
        v101->i16[0] = llroundf(v346) << v76;
        float v351 = v387;
        if (v350 <= v387)
        {
          float v351 = (float)((float)((float)(_S10 * _S3) + (float)(v275 * _S7)) + (float)(_S26 * _S1)) + v271;
          if (v350 < v271) {
            float v351 = v271;
          }
        }
        v101->i16[1] = llroundf(v351) << v76;
        float v352 = _S28 + _S7;
        v94.i32[0] = v431;
        float v353 = _S20 + _S3;
        float v354 = _S6 + _S1;
        float v355 = (float)((float)(v41 + (float)((float)(_S28 + _S7) * *(float *)&v432)) + (float)(v353 * *(float *)&v431))
             + (float)(v354 * v430);
        float v356 = v51;
        if (v355 <= v51)
        {
          float v356 = v355;
          if (v355 < v406) {
            float v356 = v406;
          }
        }
        *(float *)v72.i32 = (float)((float)(v41 + (float)(v352 * *((float *)&v432 + 1)))
                                  + (float)(v353 * *((float *)&v431 + 1)))
                          + (float)(v354 * v428);
        *uint16x8_t v243 = llroundf(v356) << v76;
        float v357 = v51;
        if (*(float *)v72.i32 <= v51)
        {
          float v357 = *(float *)v72.i32;
          if (*(float *)v72.i32 < v406) {
            float v357 = v406;
          }
        }
        v244 += 2;
        v242 += 2;
        float v75 = (int8x8_t *)((char *)v75 + 2);
        float v100 = (int8x8_t *)((char *)v100 + 2);
        float v66 = (uint16x8_t *)((char *)v66 + 4);
        v243[1] = llroundf(v357) << v76;
        float v65 = (uint16x8_t *)((char *)v65 + 4);
        float v101 = (uint16x8_t *)((char *)v101 + 4);
        v243 += 2;
      }
      float16x8_t v85 = v245;
      float v75 = (int8x8_t *)&v96[v28];
      v74 += v29;
      float v66 = (uint16x8_t *)((char *)result + (void)v97);
      float v65 = (uint16x8_t *)&v98[v30];
      v16 += 2;
      int16x8_t v72 = v385;
    }
    while (v20 > v16);
    if (v371 && v370)
    {
      uint64_t v358 = 0;
      float v359 = __b;
      float v360 = v367;
      do
      {
        if (v17)
        {
          unint64_t v361 = v17;
          float v362 = v359;
          float v363 = v360;
          do
          {
            __int16 v364 = *v363++;
            *v362++ = v364 | (v364 << 8);
            --v361;
          }
          while (v361);
        }
        v360 += v368;
        float v359 = (_WORD *)((char *)v359 + v372);
        ++v358;
      }
      while (v358 != v20);
    }
    else
    {
      uint64_t v365 = v372;
      uint64_t result = __b;
      if (v370)
      {
        do
        {
          if (v17)
          {
            float v366 = result;
            memset(result, 255, 2 * v17);
            uint64_t result = v366;
            uint64_t v365 = v372;
          }
          uint64_t result = (void *)((char *)result + v365);
          --v20;
        }
        while (v20);
      }
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_xf422_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Mat_TRC_xf422_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = 2 * *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    uint64_t v12 = *(void *)((char *)result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = result[14];
    unint64_t v15 = result[13] * a2 / v6;
    uint64_t v16 = (void *)result[16];
    uint64_t v17 = result[15] + 2 * v15;
    uint64_t v18 = result[19];
    uint64_t v19 = (void *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = (unsigned __int8 *)(v25 + v24 * v12 + v11);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + 2 * v14);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    float v33 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v34 = (float)LODWORD(a5);
    float v35 = v32 * *(float *)v18;
    float v202 = v32 * *(float *)(v18 + 16);
    float v203 = v32 * *(float *)(v18 + 8);
    float v36 = v32 * *(float *)(v18 + 20);
    *(float *)&unsigned int v37 = v32 * *(float *)(v18 + 28);
    float v200 = *(float *)&v37;
    float v201 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 152);
    float v42 = (float)v37;
    float v206 = *(float *)(v18 + 40);
    float v207 = *(float *)(v18 + 36);
    float v205 = *(float *)(v18 + 44);
    float v43 = *(float *)(v18 + 48) * 0.5;
    float v44 = *(float *)(v18 + 52) * 0.5;
    float v45 = *(float *)(v18 + 56) * 0.5;
    float v46 = *(float *)(v18 + 60) * 0.5;
    float v47 = *(float *)(v18 + 64) * 0.5;
    float v48 = *(float *)(v18 + 68) * 0.5;
    float v195 = *(float *)(v18 + 76);
    float v196 = *(float *)(v18 + 72);
    float v193 = *(float *)(v18 + 84);
    float v194 = *(float *)(v18 + 80);
    float v191 = *(float *)(v18 + 92);
    float v192 = *(float *)(v18 + 88);
    float v190 = *(float *)(v18 + 96);
    float v188 = *(float *)(v18 + 100);
    float v49 = *(float *)(v18 + 104);
    float v186 = v49;
    uint64_t v50 = v18 + 164;
    uint64_t v51 = v16[1];
    float16x8_t v52 = (char *)(*v16 + v27 * v17 + 2 * v14);
    uint64_t v53 = v51 + v28 * v17 + 2 * v14;
    uint64_t result = (void *)(v18 + 16548);
    if (!v51) {
      uint64_t v53 = 0;
    }
    unsigned int v54 = *(unsigned __int8 *)(v18 + 132);
    uint64_t v55 = v19[1];
    float16x8_t v56 = (unsigned char *)(*v19 + v22 * v12 + v11);
    if (v54 >= 0x11) {
      char v57 = 0;
    }
    else {
      char v57 = 16 - v54;
    }
    uint64_t v58 = v55 + v23 * (v12 / 2) + v11;
    unsigned int v59 = (_WORD *)(v53 + 2);
    float v204 = (float)LODWORD(a5);
    float v198 = v46;
    float v199 = v41;
    float v197 = v47;
    float v189 = v43;
    float v187 = v44;
    float v185 = v33;
    do
    {
      unsigned __int8 v60 = &v56[v22];
      uint64_t v61 = &v52[v27];
      if (v10)
      {
        unint64_t v62 = 0;
        unsigned __int8 v63 = v59;
        uint64_t v64 = &v56[v22];
        float v65 = &v52[v27];
        do
        {
          LOBYTE(v49) = *(unsigned char *)(v58 + v62 + 1);
          float v66 = (float)LODWORD(v49) - v34;
          unsigned int v67 = LODWORD(v203);
          float v68 = v203 * v66;
          LOBYTE(v67) = *v56;
          float v69 = v35 * (float)((float)v67 - v33);
          float v70 = (float)(v203 * v66) + v69;
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = (float)(v203 * v66) + v69;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          LOBYTE(v70) = *(unsigned char *)(v58 + v62);
          float v72 = (float)LODWORD(v70) - v34;
          float v73 = (float)(v201 * v66) + (float)(v72 * v202);
          float v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            float v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v200 * v72;
          float v76 = (float)(v200 * v72) + v69;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          LOBYTE(v76) = v56[1];
          float v78 = v35 * (float)((float)LODWORD(v76) - v33);
          float v79 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            float v79 = v68 + v78;
            if ((float)(v68 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = 8191.0;
          if ((float)(v73 + v78) <= 8191.0)
          {
            float v80 = v73 + v78;
            if ((float)(v73 + v78) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v75 + v78;
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          LOBYTE(v81) = *v64;
          float v83 = (float)LODWORD(v81) - v33;
          float v84 = v35 * v83;
          float v85 = 8191.0;
          if ((float)(v68 + (float)(v35 * v83)) <= 8191.0)
          {
            float v85 = v68 + (float)(v35 * v83);
            if (v85 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = 8191.0;
          if ((float)(v73 + v84) <= 8191.0)
          {
            float v86 = v73 + v84;
            if ((float)(v73 + v84) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v75 + v84;
          BOOL v88 = (float)(v75 + v84) <= 8191.0;
          float v89 = 8191.0;
          if (v88)
          {
            float v89 = v87;
            if (v87 < 0.0) {
              float v89 = 0.0;
            }
          }
          LOBYTE(v83) = v64[1];
          float v90 = v35 * (float)((float)LODWORD(v83) - v33);
          float v91 = v68 + v90;
          BOOL v88 = (float)(v68 + v90) <= 8191.0;
          float v92 = 8191.0;
          if (v88)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v73 + v90;
          BOOL v88 = (float)(v73 + v90) <= 8191.0;
          float v94 = 8191.0;
          if (v88)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v39;
          float v96 = v35;
          float v97 = v75 + v90;
          float v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S6, H6
          }
          _H18 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S18, H18 }
          _H26 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H19 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H7 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v127 = (float)((float)(v195 * _S4) + (float)(_S1 * v196)) + (float)(_S5 * v194);
          float v128 = (float)((float)(v192 * _S4) + (float)(_S1 * v193)) + (float)(_S5 * v191);
          _S1 = (float)((float)(v188 * _S4) + (float)(_S1 * v190)) + (float)(_S5 * v186);
          float v130 = (float)((float)(v195 * _S6) + (float)(_S2 * v196)) + (float)(_S18 * v194);
          float v131 = (float)((float)(v192 * _S6) + (float)(_S2 * v193)) + (float)(_S18 * v191);
          float v132 = (float)((float)(v188 * _S6) + (float)(_S2 * v190)) + (float)(_S18 * v186);
          float v133 = (float)((float)(v195 * _S27) + (float)(_S26 * v196)) + (float)(_S19 * v194);
          float v134 = (float)((float)(v192 * _S27) + (float)(_S26 * v193)) + (float)(_S19 * v191);
          float v135 = (float)((float)(v188 * _S27) + (float)(_S26 * v190)) + (float)(_S19 * v186);
          float v136 = (float)((float)(v195 * _S24) + (float)(_S7 * v196)) + (float)(_S25 * v194);
          float v137 = (float)((float)(v192 * _S24) + (float)(_S7 * v193)) + (float)(_S25 * v191);
          float v138 = (float)((float)(v188 * _S24) + (float)(_S7 * v190)) + (float)(_S25 * v186);
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S24, H7 }
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S25, H7 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S26, H1 }
          _H27 = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H28 = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H19 = *((_WORD *)result + llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          float v151 = (float)((float)((float)(v206 * _S25) + (float)(v207 * _S24)) + (float)(v205 * _S26)) + v38;
          float v152 = v40;
          if (v151 <= v40)
          {
            float v152 = (float)((float)((float)(v206 * _S25) + (float)(v207 * _S24)) + (float)(v205 * _S26)) + v38;
            if (v151 < v38) {
              float v152 = v38;
            }
          }
          __asm
          {
            FCVT            S30, H27
            FCVT            S27, H1
            FCVT            S1, H28
          }
          float v156 = (float)((float)((float)(v206 * _S27) + (float)(v207 * _S30)) + (float)(v205 * _S1)) + v38;
          *(_WORD *)float16x8_t v52 = llroundf(v152) << v57;
          float v157 = v40;
          float v39 = v95;
          if (v156 <= v40)
          {
            float v157 = (float)((float)((float)(v206 * _S27) + (float)(v207 * _S30)) + (float)(v205 * _S1)) + v38;
            if (v156 < v38) {
              float v157 = v38;
            }
          }
          *((_WORD *)v52 + 1) = llroundf(v157) << v57;
          float v158 = _S24 + _S30;
          float v159 = _S25 + _S27;
          float v160 = _S26 + _S1;
          float v161 = (float)((float)(v95 + (float)(v158 * v189)) + (float)(v159 * v187)) + (float)(v160 * v45);
          float v162 = v42;
          float v35 = v96;
          if (v161 <= v42)
          {
            float v162 = (float)((float)(v95 + (float)(v158 * v189)) + (float)(v159 * v187)) + (float)(v160 * v45);
            if (v161 < v199) {
              float v162 = v199;
            }
          }
          float v163 = (float)((float)(v95 + (float)(v158 * v198)) + (float)(v159 * v197)) + (float)(v160 * v48);
          *(v63 - 1) = llroundf(v162) << v57;
          float v164 = v42;
          if (v163 <= v42)
          {
            float v164 = v163;
            if (v163 < v199) {
              float v164 = v199;
            }
          }
          __asm
          {
            FCVT            S24, H6
            FCVT            S7, H7
            FCVT            S6, H19
          }
          *unsigned __int8 v63 = llroundf(v164) << v57;
          float v168 = (float)((float)((float)(v206 * _S7) + (float)(v207 * _S24)) + (float)(v205 * _S6)) + v38;
          float v169 = v40;
          float v33 = v185;
          if (v168 <= v40)
          {
            float v169 = (float)((float)((float)(v206 * _S7) + (float)(v207 * _S24)) + (float)(v205 * _S6)) + v38;
            if (v168 < v38) {
              float v169 = v38;
            }
          }
          __asm
          {
            FCVT            S19, H2
            FCVT            S2, H4
            FCVT            S1, H5
          }
          float v173 = (float)((float)((float)(v206 * _S2) + (float)(v207 * _S19)) + (float)(v205 * _S1)) + v38;
          *(_WORD *)float v65 = llroundf(v169) << v57;
          float v174 = v40;
          if (v173 <= v40)
          {
            float v174 = (float)((float)((float)(v206 * _S2) + (float)(v207 * _S19)) + (float)(v205 * _S1)) + v38;
            if (v173 < v38) {
              float v174 = v38;
            }
          }
          *((_WORD *)v65 + 1) = llroundf(v174) << v57;
          float v175 = _S7 + _S2;
          float v176 = _S6 + _S1;
          float v177 = (float)((float)(v95 + (float)((float)(_S24 + _S19) * v189)) + (float)(v175 * v187))
               + (float)(v176 * v45);
          float v178 = v42;
          if (v177 <= v42)
          {
            float v178 = (float)((float)(v95 + (float)((float)(_S24 + _S19) * v189)) + (float)(v175 * v187))
                 + (float)(v176 * v45);
            if (v177 < v199) {
              float v178 = v199;
            }
          }
          float v179 = (float)((float)(v95 + (float)((float)(_S24 + _S19) * v198)) + (float)(v175 * v197))
               + (float)(v176 * v48);
          *(_WORD *)((char *)v63 + v28 - 2) = llroundf(v178) << v57;
          float v49 = v42;
          if (v179 <= v42)
          {
            float v49 = v179;
            if (v179 < v199) {
              float v49 = v199;
            }
          }
          v56 += 2;
          v64 += 2;
          v52 += 4;
          v65 += 4;
          *(_WORD *)((char *)v63 + v28) = llroundf(v49) << v57;
          v62 += 2;
          v63 += 2;
          float v34 = v204;
        }
        while (v10 > v62);
      }
      float16x8_t v56 = &v60[v22];
      v58 += v23;
      float16x8_t v52 = &v61[v27];
      v9 += 2;
      v59 += v28;
    }
    while (v13 > v9);
    if (v25 && v30)
    {
      uint64_t v180 = 0;
      do
      {
        if (v10)
        {
          unint64_t v181 = v10;
          uint16x8_t v182 = v31;
          uint32x4_t v183 = v26;
          do
          {
            __int16 v184 = *v183++;
            *v182++ = v184 | (v184 << 8);
            --v181;
          }
          while (v181);
        }
        v26 += v24;
        v31 += v29;
        ++v180;
      }
      while (v180 != v13);
    }
    else if (v30)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v31, 255, 2 * v10);
        }
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_xf422_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_xf422_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_420vf_rgb_xf422_neon_fp16_GCD(void *result, uint64_t a2, float32x4_t _Q0, double a4, double a5, double a6, double a7, __n128 _Q5)
{
  uint64_t v12 = *(void *)((char *)result + 28);
  unint64_t v13 = 2 * *(unsigned __int8 *)result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (2 * v15 != 2 * v14)
  {
    unint64_t v16 = 0;
    unint64_t v17 = *(void *)((char *)result + 20);
    uint64_t v18 = *(void *)((char *)result + 36);
    uint64_t v19 = *(void *)((char *)result + 44) + 2 * v14;
    unint64_t v20 = 2 * v15 - 2 * v14;
    uint64_t v21 = result[14];
    size_t v22 = (void *)result[16];
    uint64_t v23 = result[15] + 2 * (result[13] * a2 / v13);
    uint64_t v24 = (float32x2_t *)result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = (uint64_t *)result[17];
    uint64_t v28 = *v26;
    uint64_t v29 = v26[1];
    uint64_t v30 = v26[2];
    uint64_t v31 = *v27;
    uint64_t v32 = v27[1];
    uint64_t v33 = v27[2];
    uint64_t v176 = v22[2];
    uint64_t v177 = v25[2];
    uint64_t v34 = (char *)(v176 + v33 * v23 + 2 * v21);
    LODWORD(v27) = v24[17].u16[2];
    unsigned int v35 = v24[17].u16[3];
    v36.i32[0] = v24[3].i32[1];
    unsigned int v37 = v24[18].u16[0];
    unsigned int v38 = v24[18].u16[1];
    unsigned int v39 = v24[18].u16[2];
    unsigned int v40 = v24[18].u16[3];
    unsigned int v41 = v24[19].u16[0];
    _Q0.i32[0] = v24[4].i32[1];
    _S26 = v24[5].i32[1];
    v42.i32[0] = v24[6].i32[0];
    v45.i32[0] = v24[6].i32[1];
    v44.i32[0] = v24[7].i32[0];
    float v195 = (float)v27;
    *(short float *)v9.i16 = (short float)v27;
    float v46 = (unsigned __int8 *)(v177 + v30 * v19 + v18);
    v10.f32[0] = (float)v24[17].u32[0] / (float)v24[16].u32[0];
    _Q5.n128_f32[0] = (float)v35;
    float v186 = (float)v35;
    float v47 = (float)v37;
    float v193 = v10.f32[0] * v24->f32[0];
    float v194 = (float)v38;
    float v48 = (float)v39;
    float v49 = (float)v40;
    float v50 = (float)v41;
    float16x8_t v51 = (float16x8_t)vdupq_lane_s16(v9, 0);
    __asm { FCVT            H8, S1 }
    short float v57 = -(short float)v35;
    v36.i32[1] = v24[1].i32[0];
    *(float32x2_t *)v11.f32 = vmul_n_f32(v36, v10.f32[0]);
    float16x8_t v58 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v11), 0);
    *(float32x2_t *)v10.f32 = vmul_n_f32(v24[2], v10.f32[0]);
    v65.i64[1] = _Q0.i64[0];
    float16x8_t v59 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    float16x8_t v60 = vmulq_n_f16(v58, v57);
    float16x8_t v61 = vmulq_n_f16(v59, v57);
    float v191 = v24[5].f32[0];
    float v192 = _Q0.f32[0];
    __asm { FCVT            H9, S0 }
    v42.i32[1] = v24[7].i32[1];
    *(float32x2_t *)_Q0.f32 = vmul_f32(v42, (float32x2_t)0x3F0000003F000000);
    v63.i64[1] = _Q0.i64[0];
    float16x8_t v62 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q0), 0);
    v45.i32[1] = v24[8].i32[0];
    *(float32x2_t *)v63.f32 = vmul_f32(v45, (float32x2_t)0x3F0000003F000000);
    *(float16x4_t *)v64.i8 = vcvt_f16_f32(v63);
    __asm { FCVT            H5, S17 }
    v44.i32[1] = v24[8].i32[1];
    *(float32x2_t *)v65.f32 = vmul_f32(v44, (float32x2_t)0x3F0000003F000000);
    int16x4_t v66 = (int16x4_t)vcvt_f16_f32(v65);
    float16x8_t v179 = (float16x8_t)vdupq_lane_s32((int32x2_t)v66, 0);
    float16x8_t v180 = (float16x8_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 0);
    *(short float *)v66.i16 = (short float)v37;
    float16x8_t v67 = (float16x8_t)vdupq_lane_s16(v66, 0);
    *(short float *)v66.i16 = (short float)v38;
    float16x8_t v68 = (float16x8_t)vdupq_lane_s16(v66, 0);
    *(short float *)v66.i16 = (short float)v39;
    float16x8_t v69 = (float16x8_t)vdupq_lane_s16(v66, 0);
    *(short float *)v66.i16 = (short float)v40;
    int16x8_t v70 = vdupq_lane_s16(v66, 0);
    *(short float *)v66.i16 = (short float)v41;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(v66, 0);
    unsigned int v72 = v24[16].u8[4];
    if (v72 >= 0x11) {
      unsigned __int8 v73 = 0;
    }
    else {
      unsigned __int8 v73 = 16 - v72;
    }
    uint64_t v74 = v22[1];
    if (v74) {
      float v75 = (uint16x8_t *)(v74 + v32 * v23 + 2 * v21);
    }
    else {
      float v75 = 0;
    }
    float v76 = (uint16x8_t *)(*v22 + v31 * v23 + 2 * v21);
    if (v19 >= 0) {
      uint64_t v77 = v19;
    }
    else {
      uint64_t v77 = v19 + 1;
    }
    uint64_t result = (void *)(v25[1] + v29 * (v77 >> 1) + v18);
    float v78 = (int8x8_t *)(*v25 + v28 * v19 + v18);
    float v190 = v24[5].f32[1];
    __asm { FCVT            H3, S26 }
    uint16x8_t v178 = (uint16x8_t)vdupq_n_s16(v73);
    float v184 = v10.f32[0];
    float v185 = v11.f32[0];
    float v183 = v10.f32[1];
    float16x8_t v80 = (float16x8_t)v70;
    short float v81 = _H3;
    float v188 = v63.f32[0];
    v11.i32[0] = _Q0.i32[1];
    float v189 = _Q0.f32[0];
    __n128 v82 = _Q5;
    uint64_t v83 = v65.i64[0];
    float v187 = v63.f32[1];
    float16x8_t v181 = v69;
    short float v182 = _H3;
    do
    {
      float v84 = (char *)v78 + v28;
      float v85 = &v76->i8[v31];
      float v86 = &v75->i8[v32];
      if ((int)v17 < 8)
      {
        unint64_t v118 = 0;
        float16x8_t v117 = (__int16 *)((char *)v75->i16 + v32);
        float v89 = (uint16x8_t *)((char *)v76 + v31);
        float16x8_t v116 = (__int8 *)result;
        BOOL v88 = (int8x8_t *)((char *)v78 + v28);
      }
      else
      {
        uint64_t v87 = 0;
        BOOL v88 = (int8x8_t *)((char *)v78 + v28);
        float v89 = (uint16x8_t *)((char *)v76 + v31);
        do
        {
          int8x8_t v90 = (int8x8_t)result[v87];
          *(int8x8_t *)v91.i8 = vzip1_s8(v90, 0);
          v91.u64[1] = (unint64_t)vzip2_s8(v90, 0);
          float16x8_t v92 = vcvtq_f16_u16(v91);
          int8x16_t v93 = (int8x16_t)vmlaq_f16(v60, v58, v92);
          int8x16_t v94 = (int8x16_t)vmlaq_f16(v61, v59, v92);
          v92.i64[0] = vextq_s8(v93, v93, 8uLL).u64[0];
          *(int16x4_t *)v95.i8 = vuzp1_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v92.i8);
          *(int16x4_t *)v92.i8 = vuzp2_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v92.i8);
          v92.i64[1] = v82.n128_u64[0];
          v93.i64[0] = vextq_s8(v94, v94, 8uLL).u64[0];
          v95.i64[1] = v82.n128_u64[0];
          *(float16x4_t *)v96.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v93.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v93.i8));
          int8x8_t v97 = *v78++;
          v96.i64[1] = v82.n128_u64[0];
          float16x8_t v98 = (float16x8_t)vzip1q_s16((int16x8_t)v92, (int16x8_t)v92);
          *(int8x8_t *)v92.i8 = vzip1_s8(v97, 0);
          v92.u64[1] = (unint64_t)vzip2_s8(v97, 0);
          float16x8_t v99 = (float16x8_t)vzip1q_s16(v95, v95);
          int8x8_t v100 = *v88++;
          *(int8x8_t *)v101.i8 = vzip1_s8(v100, 0);
          float16x8_t v102 = (float16x8_t)vzip1q_s16(v96, v96);
          v101.u64[1] = (unint64_t)vzip2_s8(v100, 0);
          float16x8_t v103 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v92), v51);
          float16x8_t v104 = vsubq_f16(vcvtq_f16_u16(v101), v51);
          float16x8_t v105 = vmlaq_n_f16(v98, v103, _H8);
          float16x8_t v106 = vmlaq_n_f16(v98, v104, _H8);
          float16x8_t v107 = vmlaq_n_f16(v102, v103, _H8);
          float16x8_t v108 = vmlaq_n_f16(v102, v104, _H8);
          float16x8_t v109 = vmlaq_n_f16(v99, v103, _H8);
          float16x8_t v110 = vmlaq_n_f16(v99, v104, _H8);
          int16x8_t v111 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v105, (int16x8_t)v107), (float16x8_t)vuzp2q_s16((int16x8_t)v105, (int16x8_t)v107));
          *v76++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v105, *(short float *)&_Q9), v107, *(short float *)v82.n128_u16), v109, v81), v67), v69)), v178);
          float16x8_t v112 = vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v68, v62, (float16x8_t)vzip1q_s16(v111, v111)), v180, (float16x8_t)vzip2q_s16(v111, v111)), v179, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v109, (int16x8_t)v109), (float16x8_t)vtrn2q_s16((int16x8_t)v109, (int16x8_t)v109))), v80);
          uint16x8_t v113 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v67, v106, *(short float *)&_Q9), v108, *(short float *)v82.n128_u16), v110, v81), v67), v69)), v178);
          int16x8_t v114 = (int16x8_t)vaddq_f16((float16x8_t)vuzp1q_s16((int16x8_t)v106, (int16x8_t)v108), (float16x8_t)vuzp2q_s16((int16x8_t)v106, (int16x8_t)v108));
          float16x8_t v115 = (float16x8_t)vzip1q_s16(v114, v114);
          float16x8_t v64 = (float16x8_t)vzip2q_s16(v114, v114);
          *float v75 = vshlq_u16(vcvtq_u16_f16(vminq_f16(v112, v71)), v178);
          *v89++ = v113;
          float32x4_t v65 = (float32x4_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_f16(vmlaq_f16(vmlaq_f16(v68, v62, v115), v180, v64), v179, vaddq_f16((float16x8_t)vtrn1q_s16((int16x8_t)v110, (int16x8_t)v110), (float16x8_t)vtrn2q_s16((int16x8_t)v110, (int16x8_t)v110))), v80), v71)), v178);
          *(float32x4_t *)((char *)v75++ + v32) = v65;
          ++v87;
        }
        while ((int)(v87 * 8) < (int)v17 - 7);
        float16x8_t v116 = (__int8 *)&result[v87];
        float16x8_t v117 = (__int16 *)((char *)v75->i16 + v32);
        unint64_t v118 = v17 & 0xFFFFFFF8;
      }
      while (v17 > v118)
      {
        float v119 = v11.f32[0];
        float16x8_t v120 = v80;
        float16x8_t v121 = v68;
        __n128 v122 = v82;
        float16x8_t v123 = v62;
        v11.f32[0] = v49;
        long long v124 = _Q9;
        float16x8_t v125 = v61;
        float16x8_t v126 = v60;
        float16x8_t v127 = v59;
        float16x8_t v128 = v58;
        float16x8_t v129 = v51;
        v65.i8[0] = *v116;
        *(float *)&unsigned int v130 = (float)v65.u32[0] - v186;
        v64.i8[0] = v116[1];
        float v131 = (float)v64.u32[0] - v186;
        float v132 = v11.f32[1] * v131;
        *(float *)v64.i32 = (float)(v183 * v131) + (float)(*(float *)&v130 * v184);
        float v133 = v185 * *(float *)&v130;
        LOBYTE(v130) = v78->i8[0];
        float v134 = v193 * (float)((float)v130 - v195);
        float v135 = v132 + v134;
        float v136 = v134 + *(float *)v64.i32;
        float v137 = v133 + v134;
        float v138 = (float)((float)((float)(v191 * (float)(v134 + *(float *)v64.i32)) + (float)(v192 * (float)(v132 + v134)))
                     + (float)(v190 * (float)(v133 + v134)))
             + v47;
        v65.f32[0] = v48;
        if (v138 <= v48)
        {
          v65.f32[0] = v138;
          if (v138 < v47) {
            v65.f32[0] = v47;
          }
        }
        LOBYTE(v138) = v78->i8[1];
        float v141 = (float)LODWORD(v138) - v195;
        unsigned int v140 = LODWORD(v193);
        float v139 = v193 * v141;
        LOBYTE(v140) = v88->i8[0];
        LOBYTE(v141) = v88->i8[1];
        float v142 = v132 + v139;
        float v143 = *(float *)v64.i32 + v139;
        float v144 = v133 + v139;
        float v145 = (float)((float)((float)(v191 * v143) + (float)(v192 * v142)) + (float)(v190 * v144)) + v47;
        v76->i16[0] = llroundf(v65.f32[0]) << v73;
        float v146 = v48;
        if (v145 <= v48)
        {
          float v146 = (float)((float)((float)(v191 * v143) + (float)(v192 * v142)) + (float)(v190 * v144)) + v47;
          if (v145 < v47) {
            float v146 = v47;
          }
        }
        v76->i16[1] = llroundf(v146) << v73;
        float v147 = v135 + v142;
        float v148 = v136 + v143;
        float v149 = v137 + v144;
        float v150 = (float)((float)(v194 + (float)(v147 * v189)) + (float)((float)(v136 + v143) * v188))
             + (float)(v149 * *(float *)&v83);
        float v151 = v50;
        float v49 = v11.f32[0];
        if (v150 <= v50)
        {
          float v151 = (float)((float)(v194 + (float)(v147 * v189)) + (float)(v148 * v188)) + (float)(v149 * *(float *)&v83);
          if (v150 < v11.f32[0]) {
            float v151 = v11.f32[0];
          }
        }
        v11.f32[0] = v119;
        float v152 = (float)((float)(v194 + (float)(v147 * v119)) + (float)(v148 * v187))
             + (float)(v149 * *((float *)&v83 + 1));
        v75->i16[0] = llroundf(v151) << v73;
        float v153 = v50;
        float16x8_t v58 = v128;
        float16x8_t v59 = v127;
        if (v152 <= v50)
        {
          float v153 = v152;
          if (v152 < v49) {
            float v153 = v49;
          }
        }
        float v154 = v193 * (float)((float)v140 - v195);
        float v155 = v132 + v154;
        float v156 = *(float *)v64.i32 + v154;
        float v157 = v133 + v154;
        v75->i16[1] = llroundf(v153) << v73;
        float v158 = (float)((float)((float)(v191 * v156) + (float)(v192 * v155)) + (float)(v190 * v157)) + v47;
        float v159 = v48;
        float16x8_t v51 = v129;
        float16x8_t v60 = v126;
        if (v158 <= v48)
        {
          float v159 = (float)((float)((float)(v191 * v156) + (float)(v192 * v155)) + (float)(v190 * v157)) + v47;
          if (v158 < v47) {
            float v159 = v47;
          }
        }
        float v160 = v193 * (float)((float)LODWORD(v141) - v195);
        float v161 = v132 + v160;
        float v162 = *(float *)v64.i32 + v160;
        float v163 = v133 + v160;
        float v164 = (float)((float)((float)(v191 * v162) + (float)(v192 * v161)) + (float)(v190 * (float)(v133 + v160)))
             + v47;
        v89->i16[0] = llroundf(v159) << v73;
        float v165 = v48;
        float16x8_t v61 = v125;
        float16x8_t v62 = v123;
        if (v164 <= v48)
        {
          float v165 = v164;
          if (v164 < v47) {
            float v165 = v47;
          }
        }
        v89->i16[1] = llroundf(v165) << v73;
        float v166 = v155 + v161;
        float v167 = v156 + v162;
        float v168 = v157 + v163;
        float v169 = (float)((float)(v194 + (float)((float)(v155 + v161) * v189)) + (float)(v167 * v188))
             + (float)(v168 * *(float *)&v83);
        float v170 = v50;
        _Q9 = v124;
        float16x8_t v80 = v120;
        if (v169 <= v50)
        {
          float v170 = v169;
          if (v169 < v49) {
            float v170 = v49;
          }
        }
        v65.f32[0] = (float)((float)(v194 + (float)(v166 * v119)) + (float)(v167 * v187))
                   + (float)(v168 * *((float *)&v83 + 1));
        *float16x8_t v117 = llroundf(v170) << v73;
        *(float *)v64.i32 = v50;
        __n128 v82 = v122;
        float16x8_t v68 = v121;
        short float v81 = v182;
        if (v65.f32[0] <= v50)
        {
          v64.i32[0] = v65.i32[0];
          if (v65.f32[0] < v49) {
            *(float *)v64.i32 = v49;
          }
        }
        v118 += 2;
        v116 += 2;
        float v78 = (int8x8_t *)((char *)v78 + 2);
        BOOL v88 = (int8x8_t *)((char *)v88 + 2);
        float v76 = (uint16x8_t *)((char *)v76 + 4);
        v117[1] = llroundf(*(float *)v64.i32) << v73;
        float v75 = (uint16x8_t *)((char *)v75 + 4);
        float v89 = (uint16x8_t *)((char *)v89 + 4);
        v117 += 2;
      }
      float v78 = (int8x8_t *)&v84[v28];
      uint64_t result = (void *)((char *)result + v29);
      float v76 = (uint16x8_t *)&v85[v31];
      float v75 = (uint16x8_t *)&v86[v32];
      v16 += 2;
      float16x8_t v69 = v181;
    }
    while (v20 > v16);
    if (v177 && v176)
    {
      uint64_t v171 = 0;
      do
      {
        if (v17)
        {
          unint64_t v172 = v17;
          float v173 = v34;
          float v174 = v46;
          do
          {
            __int16 v175 = *v174++;
            *v173++ = v175 | (v175 << 8);
            --v172;
          }
          while (v172);
        }
        v46 += v30;
        v34 += v33;
        ++v171;
      }
      while (v171 != v20);
    }
    else if (v176)
    {
      do
      {
        if (v17) {
          uint64_t result = memset(v34, 255, 2 * v17);
        }
        v34 += v33;
        --v20;
      }
      while (v20);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_xf422(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[5];
  uint64_t v13 = *a6;
  uint64_t v14 = a6[1];
  uint64_t v16 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v17 = a6[4];
  uint64_t v18 = a6[5];
  if (v12)
  {
    ++v18;
    ++v12;
    if (v11)
    {
      --v15;
      --v11;
    }
    else
    {
      v15 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a2[2];
  uint64_t v20 = a2[4];
  if (v17)
  {
    ++v17;
    ++v20;
    if (v16)
    {
      --v16;
      --v19;
    }
    else
    {
      v16 -= 2;
      v19 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v20 + v19 <= v9) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v9 - v20;
  }
  memset(&v27[32], 0, 24);
  if (v17 + v16 > v13) {
    uint64_t v16 = v13 - v17;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v12 + v11 > v10) {
    uint64_t v11 = v10 - v12;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v15 <= v14) {
    uint64_t v23 = v15;
  }
  else {
    uint64_t v23 = v14 - v18;
  }
  if (v21 >= v16) {
    uint64_t v24 = v16;
  }
  else {
    uint64_t v24 = v21;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v20;
  *(void *)&v27[44] = v12;
  uint64_t v31 = v13;
  uint64_t v32 = v14;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v17;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_xf422_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_xf422_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = 2 * *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 36);
    uint64_t v11 = *(void *)(result + 44) + 2 * v6;
    unint64_t v12 = 2 * v7 - 2 * v6;
    uint64_t v13 = *((void *)result + 14);
    uint64_t v14 = (void *)*((void *)result + 16);
    uint64_t v15 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v5);
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 7);
    uint64_t v18 = (uint64_t *)*((void *)result + 8);
    uint64_t v19 = (uint64_t *)*((void *)result + 17);
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    uint64_t v22 = v18[2];
    uint64_t v23 = v17[2];
    uint64_t v24 = *v19;
    uint64_t v25 = v19[1];
    uint64_t v26 = v19[2];
    uint64_t v27 = v14[1];
    uint64_t v28 = v14[2];
    uint64_t v29 = (char *)(v28 + v26 * v15 + 2 * v13);
    uint64_t v30 = (char *)(*v14 + v24 * v15 + 2 * v13);
    uint64_t v31 = v27 + v25 * v15 + 2 * v13;
    uint64_t v32 = (unsigned __int8 *)(v23 + v22 * v11 + v10);
    *(float *)&unsigned int v33 = (float)*(unsigned int *)(v16 + 128);
    *(float *)&unsigned int v34 = (float)*(unsigned int *)(v16 + 136);
    *(float *)&unsigned int v35 = *(float *)&v34 / *(float *)&v33;
    LOWORD(v33) = *(_WORD *)(v16 + 140);
    float v36 = (float)v33;
    LOWORD(v34) = *(_WORD *)(v16 + 142);
    float v37 = (float)v34;
    float v38 = *(float *)&v35 * *(float *)v16;
    float v115 = *(float *)&v35 * *(float *)(v16 + 16);
    float v116 = *(float *)&v35 * *(float *)(v16 + 8);
    float v39 = *(float *)&v35 * *(float *)(v16 + 20);
    float v40 = *(float *)(v16 + 28);
    float v41 = *(float *)&v35 * v40;
    LOWORD(v35) = *(_WORD *)(v16 + 144);
    float v42 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v16 + 146);
    float v43 = (float)v35;
    LOWORD(v35) = *(_WORD *)(v16 + 148);
    float v44 = (float)v35;
    LOWORD(v40) = *(_WORD *)(v16 + 150);
    float v45 = (float)LODWORD(v40);
    LOWORD(v40) = *(_WORD *)(v16 + 152);
    float v46 = (float)LODWORD(v40);
    float v47 = *(float *)(v16 + 36);
    float v48 = *(float *)(v16 + 40);
    float v49 = *(float *)(v16 + 44);
    float v50 = 0.5;
    float v51 = *(float *)(v16 + 48) * 0.5;
    float v52 = *(float *)(v16 + 52) * 0.5;
    float v53 = *(float *)(v16 + 56) * 0.5;
    float v54 = *(float *)(v16 + 60) * 0.5;
    float v55 = *(float *)(v16 + 64) * 0.5;
    float v56 = *(float *)(v16 + 68);
    if (v27) {
      uint64_t v57 = v31;
    }
    else {
      uint64_t v57 = 0;
    }
    unsigned int v58 = *(unsigned __int8 *)(v16 + 132);
    char v59 = 16 - v58;
    BOOL v60 = v58 >= 0x11;
    uint64_t v61 = *v17;
    uint64_t v62 = v17[1];
    uint64_t result = (unsigned __int8 *)(v61 + v20 * v11 + v10);
    if (v60) {
      char v59 = 0;
    }
    float v63 = v56 * 0.5;
    uint64_t v64 = v62 + v21 * (v11 / 2) + v10;
    float32x4_t v65 = (_WORD *)(v57 + 2);
    do
    {
      int16x4_t v66 = &result[v20];
      float16x8_t v67 = &v30[v24];
      if (v9)
      {
        unint64_t v68 = 0;
        float16x8_t v69 = v65;
        int16x8_t v70 = &result[v20];
        float16x8_t v71 = &v30[v24];
        do
        {
          LOBYTE(v56) = *(unsigned char *)(v64 + v68);
          *(float *)&unsigned int v72 = (float)LODWORD(v56) - v37;
          LOBYTE(v50) = *(unsigned char *)(v64 + v68 + 1);
          float v73 = (float)LODWORD(v50) - v37;
          float v74 = v116 * v73;
          float v75 = (float)(v39 * v73) + (float)(*(float *)&v72 * v115);
          float v76 = v41 * *(float *)&v72;
          LOBYTE(v72) = *result;
          float v77 = v38 * (float)((float)v72 - v36);
          float v78 = (float)(v116 * v73) + v77;
          float v79 = v77 + v75;
          float v80 = v76 + v77;
          float v81 = (float)((float)((float)(v48 * (float)(v77 + v75)) + (float)(v47 * v78))
                      + (float)(v49 * (float)(v76 + v77)))
              + v42;
          float v82 = v44;
          if (v81 <= v44)
          {
            float v82 = v81;
            if (v81 < v42) {
              float v82 = v42;
            }
          }
          LOBYTE(v81) = result[1];
          float v83 = v38 * (float)((float)LODWORD(v81) - v36);
          LOBYTE(v3) = *v70;
          LOBYTE(v2) = v70[1];
          float v84 = v74 + v83;
          float v85 = v75 + v83;
          float v86 = v76 + v83;
          float v87 = (float)((float)((float)(v48 * (float)(v75 + v83)) + (float)(v47 * (float)(v74 + v83)))
                      + (float)(v49 * (float)(v76 + v83)))
              + v42;
          *(_WORD *)uint64_t v30 = llroundf(v82) << v59;
          float v88 = v44;
          if (v87 <= v44)
          {
            float v88 = v87;
            if (v87 < v42) {
              float v88 = v42;
            }
          }
          *((_WORD *)v30 + 1) = llroundf(v88) << v59;
          float v89 = v78 + v84;
          float v90 = v79 + v85;
          float v91 = v80 + v86;
          float v92 = (float)((float)(v43 + (float)((float)(v78 + v84) * v51)) + (float)(v90 * v52)) + (float)(v91 * v53);
          float v93 = v46;
          if (v92 <= v46)
          {
            float v93 = v92;
            if (v92 < v45) {
              float v93 = v45;
            }
          }
          float v94 = (float)((float)(v43 + (float)(v89 * v54)) + (float)(v90 * v55)) + (float)(v91 * v63);
          *(v69 - 1) = llroundf(v93) << v59;
          float v95 = v46;
          if (v94 <= v46)
          {
            float v95 = v94;
            if (v94 < v45) {
              float v95 = v45;
            }
          }
          float v96 = v38 * (float)((float)LODWORD(v3) - v36);
          float v97 = v74 + v96;
          float v98 = v75 + v96;
          float v3 = v76 + v96;
          *float16x8_t v69 = llroundf(v95) << v59;
          float v99 = (float)((float)((float)(v48 * (float)(v75 + v96)) + (float)(v47 * (float)(v74 + v96)))
                      + (float)(v49 * (float)(v76 + v96)))
              + v42;
          float v100 = v44;
          if (v99 <= v44)
          {
            float v100 = v99;
            if (v99 < v42) {
              float v100 = v42;
            }
          }
          float v101 = v38 * (float)((float)LODWORD(v2) - v36);
          float v2 = v74 + v101;
          float v102 = v75 + v101;
          float v103 = v76 + v101;
          float v104 = (float)((float)((float)(v48 * v102) + (float)(v47 * v2)) + (float)(v49 * (float)(v76 + v101))) + v42;
          *(_WORD *)float16x8_t v71 = llroundf(v100) << v59;
          float v105 = v44;
          if (v104 <= v44)
          {
            float v105 = v104;
            if (v104 < v42) {
              float v105 = v42;
            }
          }
          *((_WORD *)v71 + 1) = llroundf(v105) << v59;
          float v106 = v98 + v102;
          float v107 = v3 + v103;
          float v108 = (float)((float)(v43 + (float)((float)(v97 + v2) * v51)) + (float)(v106 * v52)) + (float)(v107 * v53);
          float v109 = v46;
          if (v108 <= v46)
          {
            float v109 = (float)((float)(v43 + (float)((float)(v97 + v2) * v51)) + (float)(v106 * v52)) + (float)(v107 * v53);
            if (v108 < v45) {
              float v109 = v45;
            }
          }
          float v56 = (float)((float)(v43 + (float)((float)(v97 + v2) * v54)) + (float)(v106 * v55)) + (float)(v107 * v63);
          *(_WORD *)((char *)v69 + v25 - 2) = llroundf(v109) << v59;
          float v50 = v46;
          if (v56 <= v46)
          {
            float v50 = (float)((float)(v43 + (float)((float)(v97 + v2) * v54)) + (float)(v106 * v55)) + (float)(v107 * v63);
            if (v56 < v45) {
              float v50 = v45;
            }
          }
          result += 2;
          v70 += 2;
          v30 += 4;
          v71 += 4;
          *(_WORD *)((char *)v69 + v25) = llroundf(v50) << v59;
          v68 += 2;
          v69 += 2;
        }
        while (v9 > v68);
      }
      uint64_t result = &v66[v20];
      v64 += v21;
      uint64_t v30 = &v67[v24];
      v8 += 2;
      v65 += v25;
    }
    while (v12 > v8);
    if (v23 && v28)
    {
      uint64_t v110 = 0;
      do
      {
        if (v9)
        {
          unint64_t v111 = v9;
          float16x8_t v112 = v29;
          uint16x8_t v113 = v32;
          do
          {
            __int16 v114 = *v113++;
            *v112++ = v114 | (v114 << 8);
            --v111;
          }
          while (v111);
        }
        v32 += v22;
        v29 += v26;
        ++v110;
      }
      while (v110 != v12);
    }
    else if (v28)
    {
      do
      {
        if (v9) {
          uint64_t result = (unsigned __int8 *)memset(v29, 255, 2 * v9);
        }
        v29 += v26;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_v216_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Tone_Mat_TRC_v216_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v7 = *(void *)((char *)result + 28);
  unint64_t v8 = v7 * a2;
  unint64_t v9 = 2 * *(unsigned __int8 *)result;
  unint64_t v10 = (v7 + v7 * a2) / v9;
  uint64_t v11 = result[14];
  uint64_t v12 = (void *)result[16];
  uint64_t v13 = result[15] + 2 * (result[13] * a2 / v9);
  uint64_t v14 = (uint64_t *)result[17];
  uint64_t v15 = v14[1];
  uint64_t v16 = v12[1];
  uint64_t v17 = (char *)(v16 + v15 * v13 + 2 * v11);
  unint64_t v18 = v8 / v9;
  if (v16) {
    uint64_t v19 = v16 + v15 * v13 + 2 * v11;
  }
  else {
    uint64_t v19 = 0;
  }
  if (2 * v10 != 2 * v18)
  {
    unint64_t v20 = 0;
    unint64_t v21 = *(void *)((char *)result + 20);
    uint64_t v22 = *(void *)((char *)result + 36);
    uint64_t v23 = *(void *)((char *)result + 44) + 2 * v18;
    unint64_t v24 = 2 * v10 - 2 * v18;
    uint64_t v25 = result[19];
    uint64_t v26 = (void *)result[7];
    uint64_t v27 = (uint64_t *)result[8];
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = v27[2];
    uint64_t v31 = v26[2];
    uint64_t v32 = (unsigned __int8 *)(v31 + v30 * v23 + v22);
    uint64_t v33 = *v14;
    LOWORD(a5) = *(_WORD *)(v25 + 140);
    LOWORD(a6) = *(_WORD *)(v25 + 142);
    float v34 = 8191.0 / (float)*(unsigned int *)(v25 + 128);
    float v35 = (float)LODWORD(a5);
    float v36 = (float)LODWORD(a6);
    float v37 = v34 * *(float *)v25;
    float v246 = v34 * *(float *)(v25 + 16);
    float v247 = v34 * *(float *)(v25 + 8);
    float v38 = v34 * *(float *)(v25 + 20);
    *(float *)&unsigned int v39 = v34 * *(float *)(v25 + 28);
    float v244 = *(float *)&v39;
    float v245 = v38;
    LOWORD(v39) = *(_WORD *)(v25 + 144);
    float v40 = (float)v39;
    LOWORD(v39) = *(_WORD *)(v25 + 146);
    float v41 = (float)v39;
    LOWORD(v39) = *(_WORD *)(v25 + 148);
    *(float *)&unsigned int v42 = (float)v39;
    float v249 = *(float *)&v42;
    LOWORD(v42) = *(_WORD *)(v25 + 150);
    float v43 = (float)v42;
    LOWORD(v42) = *(_WORD *)(v25 + 152);
    float v44 = (float)v42;
    float v45 = *(float *)(v25 + 40);
    float v46 = *(float *)(v25 + 48) * 0.5;
    float v47 = *(float *)(v25 + 52) * 0.5;
    float v48 = *(float *)(v25 + 56) * 0.5;
    float v49 = *(float *)(v25 + 64) * 0.5;
    float v239 = *(float *)(v25 + 72);
    float v236 = *(float *)(v25 + 80);
    float v237 = *(float *)(v25 + 76);
    float v234 = *(float *)(v25 + 88);
    float v235 = *(float *)(v25 + 84);
    float v233 = *(float *)(v25 + 92);
    float v232 = *(float *)(v25 + 96);
    float v231 = *(float *)(v25 + 100);
    float v229 = *(float *)(v25 + 104);
    uint64_t v50 = v25 + 164;
    uint64_t result = (void *)(v25 + 16548);
    uint64_t v51 = *v12 + v33 * v13;
    uint64_t v52 = v25 + 32932;
    float v53 = (char *)(v51 + 2 * v11);
    float v54 = (unsigned char *)(*v26 + v28 * v23 + v22);
    uint64_t v55 = v26[1] + v29 * (v23 / 2) + v22;
    float v227 = *(float *)(v25 + 112);
    float v228 = *(float *)(v25 + 108);
    float v56 = *(float *)(v25 + 116);
    float v57 = *(float *)(v25 + 120);
    float v225 = *(float *)(v25 + 36);
    float v226 = v56;
    float v248 = (float)LODWORD(a6);
    float v242 = v37;
    float v243 = v41;
    float v241 = (float)LODWORD(a5);
    float v240 = *(float *)(v25 + 44);
    float v238 = *(float *)(v25 + 68) * 0.5;
    float v230 = *(float *)(v25 + 60) * 0.5;
    do
    {
      unsigned int v58 = &v54[v28];
      char v59 = &v53[v33];
      if (v21)
      {
        unint64_t v60 = 0;
        uint64_t v61 = &v54[v28];
        uint64_t v62 = (_DWORD *)(v19 + v15);
        float v63 = &v53[v33];
        uint64_t v64 = (_DWORD *)v19;
        do
        {
          LOBYTE(v56) = *(unsigned char *)(v55 + v60 + 1);
          float v65 = (float)LODWORD(v56) - v36;
          unsigned int v66 = LODWORD(v247);
          float v67 = v247 * v65;
          LOBYTE(v66) = *v54;
          float v68 = v37 * (float)((float)v66 - v35);
          float v69 = (float)(v247 * v65) + v68;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = (float)(v247 * v65) + v68;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          LOBYTE(v69) = *(unsigned char *)(v55 + v60);
          float v71 = (float)LODWORD(v69) - v36;
          float v72 = (float)(v245 * v65) + (float)(v71 * v246);
          float v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            float v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v244 * v71;
          float v75 = (float)(v244 * v71) + v68;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          LOBYTE(v75) = v54[1];
          float v77 = v37 * (float)((float)LODWORD(v75) - v35);
          float v78 = 8191.0;
          if ((float)(v67 + v77) <= 8191.0)
          {
            float v78 = v67 + v77;
            if ((float)(v67 + v77) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            float v79 = v72 + v77;
            if ((float)(v72 + v77) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v74 + v77;
          BOOL v81 = (float)(v74 + v77) <= 8191.0;
          float v82 = 8191.0;
          if (v81)
          {
            float v82 = v80;
            if (v80 < 0.0) {
              float v82 = 0.0;
            }
          }
          LOBYTE(v80) = *v61;
          float v83 = v37 * (float)((float)LODWORD(v80) - v35);
          float v84 = 8191.0;
          if ((float)(v67 + v83) <= 8191.0)
          {
            float v84 = v67 + v83;
            if ((float)(v67 + v83) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = 8191.0;
          if ((float)(v72 + v83) <= 8191.0)
          {
            float v85 = v72 + v83;
            if ((float)(v72 + v83) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v74 + v83;
          BOOL v81 = (float)(v74 + v83) <= 8191.0;
          float v87 = 8191.0;
          if (v81)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          LOBYTE(v6) = v61[1];
          float v88 = v37 * (float)((float)v6 - v35);
          float v89 = v67 + v88;
          BOOL v81 = (float)(v67 + v88) <= 8191.0;
          float v90 = 8191.0;
          if (v81)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v72 + v88;
          BOOL v81 = (float)(v72 + v88) <= 8191.0;
          float v92 = 8191.0;
          if (v81)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v74 + v88;
          float v94 = 8191.0;
          if (v93 <= 8191.0)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H23 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          float v114 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v115 = (float)((float)((float)(v227 * _S24) + (float)(v228 * _S2)) + (float)(v226 * _S25))
               + (float)(v57 * v114);
          float v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            float v116 = (float)((float)((float)(v227 * _S24) + (float)(v228 * _S2)) + (float)(v226 * _S25))
                 + (float)(v57 * v114);
            if (v115 < 0.0) {
              float v116 = 0.0;
            }
          }
          float v117 = v45;
          __asm
          {
            FCVT            S26, H23
            FCVT            S28, H29
            FCVT            S30, H31
          }
          _H23 = *((_WORD *)result + llroundf(v116));
          float v122 = (float)((float)((float)(v227 * _S28) + (float)(v228 * _S26)) + (float)(v226 * _S30))
               + (float)(v57 * fmaxf(_S26, fmaxf(_S28, _S30)));
          float v123 = 8191.0;
          if (v122 <= 8191.0)
          {
            float v123 = v122;
            if (v122 < 0.0) {
              float v123 = 0.0;
            }
          }
          __asm
          {
            FCVT            S9, H27
            FCVT            S10, H21
            FCVT            S11, H22
          }
          _H21 = *((_WORD *)result + llroundf(v123));
          float v128 = v57;
          float v129 = (float)((float)((float)(v227 * _S10) + (float)(v228 * _S9)) + (float)(v226 * _S11))
               + (float)(v57 * fmaxf(_S9, fmaxf(_S10, _S11)));
          float v130 = 8191.0;
          if (v129 <= 8191.0)
          {
            float v130 = v129;
            if (v129 < 0.0) {
              float v130 = 0.0;
            }
          }
          __asm
          {
            FCVT            S29, H1
            FCVT            S31, H3
            FCVT            S8, H17
            FCVT            S1, H23
          }
          float v135 = _S2 * _S1;
          float v136 = _S24 * _S1;
          float v137 = _S25 * _S1;
          __asm { FCVT            S1, H21 }
          float v139 = _S26 * _S1;
          float v140 = _S28 * _S1;
          float v141 = _S30 * _S1;
          LOWORD(_S1) = *((_WORD *)result + llroundf(v130));
          __asm { FCVT            S2, H1 }
          float v143 = _S9 * _S2;
          float v144 = _S10 * _S2;
          float v145 = _S11 * _S2;
          float v146 = (float)((float)((float)(v227 * _S31) + (float)(v228 * _S29)) + (float)(v226 * _S8))
               + (float)(v128 * fmaxf(_S29, fmaxf(_S31, _S8)));
          float v147 = 8191.0;
          if (v146 <= 8191.0)
          {
            float v147 = v146;
            if (v146 < 0.0) {
              float v147 = 0.0;
            }
          }
          _H25 = *((_WORD *)result + llroundf(v147));
          __asm { FCVT            S25, H25 }
          float v150 = _S29 * _S25;
          float v151 = _S31 * _S25;
          float v152 = _S8 * _S25;
          float v153 = (float)((float)(v237 * v136) + (float)(v135 * v239)) + (float)(v137 * v236);
          float v154 = (float)((float)(v234 * v136) + (float)(v135 * v235)) + (float)(v137 * v233);
          float v155 = (float)((float)(v231 * v136) + (float)(v135 * v232)) + (float)(v137 * v229);
          _S24 = (float)((float)(v237 * v140) + (float)(v139 * v239)) + (float)(v141 * v236);
          float v157 = (float)((float)(v234 * v140) + (float)(v139 * v235)) + (float)(v141 * v233);
          _S21 = (float)((float)(v231 * v140) + (float)(v139 * v232)) + (float)(v141 * v229);
          _S22 = (float)((float)(v237 * v144) + (float)(v143 * v239)) + (float)(v145 * v236);
          float v160 = (float)((float)(v234 * v144) + (float)(v143 * v235)) + (float)(v145 * v233);
          float v161 = (float)((float)(v231 * v144) + (float)(v143 * v232)) + (float)(v145 * v229);
          _S3 = (float)(v234 * v151) + (float)(v150 * v235);
          float v163 = (float)(v231 * v151) + (float)(v150 * v232);
          float v164 = (float)((float)(v237 * v151) + (float)(v150 * v239)) + (float)(v152 * v236);
          float v165 = _S3 + (float)(v152 * v233);
          float v166 = v163 + (float)(v152 * v229);
          _H1 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          unsigned int v170 = llroundf(fminf(fmaxf(_S24, 0.0), 8191.0));
          LOWORD(_S24) = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          unsigned int v171 = llroundf(fminf(fmaxf(v157, 0.0), 8191.0));
          LOWORD(_S3) = *(_WORD *)(v52 + 2 * v170);
          __asm
          {
            FCVT            S27, H1
            FCVT            S17, H3
          }
          unsigned int v174 = llroundf(fminf(fmaxf(_S21, 0.0), 8191.0));
          LOWORD(_S21) = *(_WORD *)(v52 + 2 * v171);
          unsigned int v175 = llroundf(fminf(fmaxf(_S22, 0.0), 8191.0));
          LOWORD(_S22) = *(_WORD *)(v52 + 2 * v174);
          _H1 = *(_WORD *)(v52 + 2 * v175);
          unsigned int v177 = llroundf(fminf(fmaxf(v161, 0.0), 8191.0));
          _H2 = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          unsigned int v179 = llroundf(fminf(fmaxf(v164, 0.0), 8191.0));
          _H3 = *(_WORD *)(v52 + 2 * v177);
          unsigned int v181 = llroundf(fminf(fmaxf(v165, 0.0), 8191.0));
          __asm { FCVT            S23, H21 }
          unsigned int v183 = llroundf(fminf(fmaxf(v166, 0.0), 8191.0));
          float v45 = v117;
          float v184 = (float)(v117 * _S27) + (float)(v225 * _S29);
          float v185 = _S27 + _S23;
          float v186 = (float)(v243 + (float)((float)(_S29 + _S17) * v46)) + (float)(v185 * v47);
          float v187 = (float)(v243 + (float)((float)(_S29 + _S17) * v230)) + (float)(v185 * v49);
          _H21 = *(_WORD *)(v52 + 2 * v179);
          __asm
          {
            FCVT            S24, H24
            FCVT            S25, H22
          }
          float v191 = v184 + (float)(v240 * _S24);
          float v192 = _S24 + _S25;
          float v193 = v186 + (float)((float)(_S24 + _S25) * v48);
          float v194 = v187 + (float)(v192 * v238);
          if (v193 < v40) {
            float v195 = v40;
          }
          else {
            float v195 = v193;
          }
          BOOL v81 = v193 <= v249;
          _H22 = *(_WORD *)(v52 + 2 * v181);
          float v197 = v191 + v40;
          if (!v81) {
            float v195 = v249;
          }
          __int16 v198 = llroundf(v195);
          if (v197 < v43) {
            float v199 = v43;
          }
          else {
            float v199 = v191 + v40;
          }
          BOOL v81 = v197 <= v44;
          _H24 = *(_WORD *)(v52 + 2 * v183);
          *(_WORD *)float v53 = v198;
          if (!v81) {
            float v199 = v44;
          }
          *((_WORD *)v53 + 1) = llroundf(v199);
          float v201 = v249;
          if (v194 <= v249)
          {
            float v201 = v194;
            if (v194 < v40) {
              float v201 = v40;
            }
          }
          float v202 = (float)((float)((float)(v117 * _S23) + (float)(v225 * _S17)) + (float)(v240 * _S25)) + v40;
          *((_WORD *)v53 + 2) = llroundf(v201);
          float v203 = v44;
          float v35 = v241;
          float v37 = v242;
          float v57 = v128;
          if (v202 <= v44)
          {
            if (v202 < v43) {
              float v203 = v43;
            }
            else {
              float v203 = v202;
            }
          }
          *((_WORD *)v53 + 3) = llroundf(v203);
          if (v64) {
            *v64++ = 0;
          }
          __asm
          {
            FCVT            S17, H1
            FCVT            S23, H2
            FCVT            S25, H3
            FCVT            S1, H21
            FCVT            S3, H22
            FCVT            S2, H24
          }
          float v210 = (float)((float)((float)(v117 * _S23) + (float)(v225 * _S17)) + (float)(v240 * _S25)) + v40;
          float v211 = _S17 + _S1;
          float v212 = _S23 + _S3;
          float v213 = (float)((float)(v243 + (float)(v211 * v46)) + (float)(v212 * v47)) + (float)((float)(_S25 + _S2) * v48);
          float v214 = (float)((float)(v243 + (float)(v211 * v230)) + (float)(v212 * v49))
               + (float)((float)(_S25 + _S2) * v238);
          if (v213 < v40) {
            *(float *)&unsigned int v6 = v40;
          }
          else {
            *(float *)&unsigned int v6 = v213;
          }
          if (v213 <= v249) {
            float v215 = *(float *)&v6;
          }
          else {
            float v215 = v249;
          }
          *(_WORD *)float v63 = llroundf(v215);
          if (v210 < v43) {
            float v216 = v43;
          }
          else {
            float v216 = v210;
          }
          if (v210 <= v44) {
            float v217 = v216;
          }
          else {
            float v217 = v44;
          }
          *((_WORD *)v63 + 1) = llroundf(v217);
          float v218 = v249;
          if (v214 <= v249)
          {
            float v218 = v214;
            if (v214 < v40) {
              float v218 = v40;
            }
          }
          float v56 = (float)((float)((float)(v117 * _S3) + (float)(v225 * _S1)) + (float)(v240 * _S2)) + v40;
          *((_WORD *)v63 + 2) = llroundf(v218);
          float v219 = v44;
          if (v56 <= v44)
          {
            float v219 = v56;
            if (v56 < v43) {
              float v219 = v43;
            }
          }
          *((_WORD *)v63 + 3) = llroundf(v219);
          float v36 = v248;
          if (v62) {
            *v62++ = 0;
          }
          v54 += 2;
          v61 += 2;
          v53 += 8;
          v63 += 8;
          v60 += 2;
        }
        while (v21 > v60);
      }
      float v54 = &v58[v28];
      v55 += v29;
      float v53 = &v59[v33];
      v20 += 2;
    }
    while (v24 > v20);
    if (v31 && v19)
    {
      uint64_t v220 = 0;
      do
      {
        if (v21)
        {
          unint64_t v221 = v21;
          float v222 = v17;
          float v223 = v32;
          do
          {
            __int16 v224 = *v223++;
            *v222++ = v224 | (v224 << 8);
            --v221;
          }
          while (v221);
        }
        v32 += v30;
        v17 += v15;
        ++v220;
      }
      while (v220 != v24);
    }
    else if (v19)
    {
      do
      {
        if (v21) {
          uint64_t result = memset(v17, 255, 2 * v21);
        }
        v17 += v15;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_v216_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Mat_TRC_v216_GCD(void *result, uint64_t a2, double a3, double a4, float a5, float a6)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = v6 * a2;
  unint64_t v8 = 2 * *(unsigned __int8 *)result;
  unint64_t v9 = (v6 + v6 * a2) / v8;
  uint64_t v10 = result[14];
  uint64_t v11 = (void *)result[16];
  uint64_t v12 = result[15] + 2 * (result[13] * a2 / v8);
  uint64_t v13 = (uint64_t *)result[17];
  uint64_t v14 = v13[1];
  uint64_t v15 = v11[1];
  uint64_t v16 = (char *)(v15 + v14 * v12 + 2 * v10);
  unint64_t v17 = v7 / v8;
  if (v15) {
    uint64_t v18 = v15 + v14 * v12 + 2 * v10;
  }
  else {
    uint64_t v18 = 0;
  }
  if (2 * v9 != 2 * v17)
  {
    unint64_t v19 = 0;
    unint64_t v20 = *(void *)((char *)result + 20);
    uint64_t v21 = *(void *)((char *)result + 36);
    uint64_t v22 = *(void *)((char *)result + 44) + 2 * v17;
    unint64_t v23 = 2 * v9 - 2 * v17;
    uint64_t v24 = result[19];
    uint64_t v25 = (void *)result[7];
    uint64_t v26 = (uint64_t *)result[8];
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = v26[2];
    uint64_t v30 = v25[2];
    uint64_t v31 = (unsigned __int8 *)(v30 + v29 * v22 + v21);
    uint64_t v32 = *v13;
    LOWORD(a5) = *(_WORD *)(v24 + 140);
    LOWORD(a6) = *(_WORD *)(v24 + 142);
    float v33 = 8191.0 / (float)*(unsigned int *)(v24 + 128);
    float v34 = (float)LODWORD(a5);
    float v35 = (float)LODWORD(a6);
    float v36 = v33 * *(float *)v24;
    float v201 = v33 * *(float *)(v24 + 16);
    float v202 = v33 * *(float *)(v24 + 8);
    float v37 = v33 * *(float *)(v24 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v24 + 28);
    float v199 = *(float *)&v38;
    float v200 = v37;
    LOWORD(v38) = *(_WORD *)(v24 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v24 + 152);
    float v43 = (float)v38;
    float v44 = *(float *)(v24 + 36);
    float v45 = *(float *)(v24 + 40);
    float v46 = *(float *)(v24 + 48) * 0.5;
    float v47 = *(float *)(v24 + 52) * 0.5;
    float v48 = *(float *)(v24 + 56) * 0.5;
    float v204 = *(float *)(v24 + 64) * 0.5;
    float v205 = *(float *)(v24 + 60) * 0.5;
    float v203 = *(float *)(v24 + 68) * 0.5;
    float v197 = *(float *)(v24 + 76);
    float v198 = *(float *)(v24 + 72);
    float v195 = *(float *)(v24 + 84);
    float v196 = *(float *)(v24 + 80);
    float v193 = *(float *)(v24 + 92);
    float v194 = *(float *)(v24 + 88);
    float v192 = *(float *)(v24 + 96);
    float v190 = *(float *)(v24 + 100);
    float v49 = *(float *)(v24 + 104);
    float v188 = v49;
    uint64_t v50 = v24 + 16548;
    uint64_t result = (void *)(v24 + 164);
    uint64_t v51 = (char *)(*v11 + v32 * v12 + 2 * v10);
    uint64_t v52 = (unsigned char *)(*v25 + v27 * v22 + v21);
    uint64_t v53 = v25[1] + v28 * (v22 / 2) + v21;
    float v191 = *(float *)(v24 + 44);
    float v189 = v40;
    float v187 = v36;
    do
    {
      float v54 = &v52[v27];
      uint64_t v55 = &v51[v32];
      if (v20)
      {
        unint64_t v56 = 0;
        float v57 = &v52[v27];
        unsigned int v58 = (_DWORD *)(v18 + v14);
        char v59 = &v51[v32];
        unint64_t v60 = (_DWORD *)v18;
        do
        {
          LOBYTE(v49) = *(unsigned char *)(v53 + v56 + 1);
          float v61 = (float)LODWORD(v49) - v35;
          unsigned int v62 = LODWORD(v202);
          float v63 = v202 * v61;
          LOBYTE(v62) = *v52;
          float v64 = v36 * (float)((float)v62 - v34);
          float v65 = (float)(v202 * v61) + v64;
          float v66 = 8191.0;
          if (v65 <= 8191.0)
          {
            float v66 = (float)(v202 * v61) + v64;
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          LOBYTE(v65) = *(unsigned char *)(v53 + v56);
          float v67 = (float)LODWORD(v65) - v35;
          float v68 = (float)(v200 * v61) + (float)(v67 * v201);
          float v69 = 8191.0;
          if ((float)(v64 + v68) <= 8191.0)
          {
            float v69 = v64 + v68;
            if ((float)(v64 + v68) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v199 * v67;
          float v71 = (float)(v199 * v67) + v64;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          LOBYTE(v71) = v52[1];
          float v73 = v36 * (float)((float)LODWORD(v71) - v34);
          float v74 = 8191.0;
          if ((float)(v63 + v73) <= 8191.0)
          {
            float v74 = v63 + v73;
            if ((float)(v63 + v73) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v68 + v73;
          float v76 = 8191.0;
          if ((float)(v68 + v73) <= 8191.0)
          {
            float v76 = v68 + v73;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v70 + v73;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          LOBYTE(v77) = *v57;
          float v79 = v36 * (float)((float)LODWORD(v77) - v34);
          float v80 = 8191.0;
          if ((float)(v63 + v79) <= 8191.0)
          {
            float v80 = v63 + v79;
            if ((float)(v63 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = 8191.0;
          if ((float)(v68 + v79) <= 8191.0)
          {
            float v81 = v68 + v79;
            if ((float)(v68 + v79) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v70 + v79;
          BOOL v83 = (float)(v70 + v79) <= 8191.0;
          float v84 = 8191.0;
          if (v83)
          {
            float v84 = v82;
            if (v82 < 0.0) {
              float v84 = 0.0;
            }
          }
          LOBYTE(v75) = v57[1];
          float v85 = v36 * (float)((float)LODWORD(v75) - v34);
          float v86 = v63 + v85;
          BOOL v83 = (float)(v63 + v85) <= 8191.0;
          float v87 = 8191.0;
          if (v83)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v35;
          float v89 = v68 + v85;
          BOOL v83 = (float)(v68 + v85) <= 8191.0;
          float v90 = 8191.0;
          if (v83)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v34;
          float v92 = v70 + v85;
          float v93 = 8191.0;
          if (v92 <= 8191.0)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H27 = *((_WORD *)result + llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H17 = *((_WORD *)result + llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          unsigned int v113 = llroundf(fminf(fmaxf(v84, 0.0), 8191.0));
          __asm { FCVT            S1, H17 }
          _H17 = *((_WORD *)result + v113);
          __asm { FCVT            S17, H17 }
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S7, H7 }
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S24, H24 }
          unsigned int v121 = llroundf(fminf(fmaxf(v93, 0.0), 8191.0));
          _S25 = (float)((float)(v197 * _S4) + (float)(_S3 * v198)) + (float)(_S5 * v196);
          float v123 = (float)((float)(v194 * _S4) + (float)(_S3 * v195)) + (float)(_S5 * v193);
          _S3 = (float)((float)(v190 * _S4) + (float)(_S3 * v192)) + (float)(_S5 * v188);
          float v125 = (float)((float)(v197 * _S6) + (float)(_S2 * v198)) + (float)(_S26 * v196);
          float v126 = (float)((float)(v194 * _S6) + (float)(_S2 * v195)) + (float)(_S26 * v193);
          float v127 = (float)((float)(v190 * _S6) + (float)(_S2 * v192)) + (float)(_S26 * v188);
          float v128 = (float)((float)(v197 * _S1) + (float)(_S27 * v198)) + (float)(_S17 * v196);
          float v129 = (float)((float)(v194 * _S1) + (float)(_S27 * v195)) + (float)(_S17 * v193);
          float v130 = (float)((float)(v190 * _S1) + (float)(_S27 * v192)) + (float)(_S17 * v188);
          _S1 = (float)(v197 * _S24) + (float)(_S7 * v198);
          float v132 = (float)(v194 * _S24) + (float)(_S7 * v195);
          float v133 = (float)(v190 * _S24) + (float)(_S7 * v192);
          LOWORD(_S24) = *((_WORD *)result + v121);
          __asm { FCVT            S24, H24 }
          float v135 = _S1 + (float)(_S24 * v196);
          float v136 = v132 + (float)(_S24 * v193);
          float v137 = v133 + (float)(_S24 * v188);
          LOWORD(_S1) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S25, 0.0), 8191.0)));
          __asm { FCVT            S24, H1 }
          LOWORD(_S1) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          LOWORD(_S25) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0)));
          unsigned int v139 = llroundf(fminf(fmaxf(v126, 0.0), 8191.0));
          LOWORD(_S3) = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __asm
          {
            FCVT            S28, H1
            FCVT            S5, H3
          }
          LOWORD(_S3) = *(_WORD *)(v50 + 2 * v139);
          _H21 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          unsigned int v146 = llroundf(fminf(fmaxf(v136, 0.0), 8191.0));
          __asm { FCVT            S3, H3 }
          unsigned int v148 = llroundf(fminf(fmaxf(v137, 0.0), 8191.0));
          _H6 = *(_WORD *)(v50 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H25
            FCVT            S25, H21
          }
          float v152 = (float)((float)(v45 * _S28) + (float)(v44 * _S24)) + (float)(v191 * _S26);
          float v153 = (float)((float)(v189 + (float)((float)(_S24 + _S5) * v46)) + (float)((float)(_S28 + _S3) * v47))
               + (float)((float)(_S26 + _S25) * v48);
          float v154 = (float)((float)(v189 + (float)((float)(_S24 + _S5) * v205)) + (float)((float)(_S28 + _S3) * v204))
               + (float)((float)(_S26 + _S25) * v203);
          if (v153 < v39) {
            float v155 = v39;
          }
          else {
            float v155 = v153;
          }
          BOOL v83 = v153 <= v41;
          _H7 = *(_WORD *)(v50 + 2 * v146);
          float v157 = v152 + v39;
          if (v83) {
            float v158 = v155;
          }
          else {
            float v158 = v41;
          }
          __int16 v159 = llroundf(v158);
          if (v157 < v42) {
            float v160 = v42;
          }
          else {
            float v160 = v157;
          }
          _H24 = *(_WORD *)(v50 + 2 * v148);
          *(_WORD *)uint64_t v51 = v159;
          if (v157 <= v43) {
            float v162 = v160;
          }
          else {
            float v162 = v43;
          }
          *((_WORD *)v51 + 1) = llroundf(v162);
          float v163 = v41;
          if (v154 <= v41)
          {
            float v163 = v154;
            if (v154 < v39) {
              float v163 = v39;
            }
          }
          float v164 = (float)((float)((float)(v45 * _S3) + (float)(v44 * _S5)) + (float)(v191 * _S25)) + v39;
          *((_WORD *)v51 + 2) = llroundf(v163);
          float v165 = v43;
          if (v164 <= v43)
          {
            if (v164 < v42) {
              float v165 = v42;
            }
            else {
              float v165 = v164;
            }
          }
          *((_WORD *)v51 + 3) = llroundf(v165);
          float v34 = v91;
          if (v60) {
            *v60++ = 0;
          }
          float v35 = v88;
          float v36 = v187;
          __asm
          {
            FCVT            S5, H1
            FCVT            S17, H2
            FCVT            S4, H4
            FCVT            S1, H6
            FCVT            S3, H7
            FCVT            S2, H24
          }
          float v172 = (float)((float)((float)(v45 * _S17) + (float)(v44 * _S5)) + (float)(v191 * _S4)) + v39;
          float v173 = _S5 + _S1;
          float v174 = _S17 + _S3;
          float v175 = _S4 + _S2;
          float v176 = (float)((float)(v189 + (float)(v173 * v46)) + (float)(v174 * v47)) + (float)(v175 * v48);
          float v177 = (float)((float)(v189 + (float)(v173 * v205)) + (float)(v174 * v204)) + (float)(v175 * v203);
          if (v176 < v39) {
            float v178 = v39;
          }
          else {
            float v178 = v176;
          }
          if (v176 > v41) {
            float v178 = v41;
          }
          *(_WORD *)char v59 = llroundf(v178);
          if (v172 < v42) {
            float v179 = v42;
          }
          else {
            float v179 = v172;
          }
          if (v172 > v43) {
            float v179 = v43;
          }
          *((_WORD *)v59 + 1) = llroundf(v179);
          float v180 = v41;
          if (v177 <= v41)
          {
            float v180 = v177;
            if (v177 < v39) {
              float v180 = v39;
            }
          }
          float v49 = (float)((float)((float)(v45 * _S3) + (float)(v44 * _S1)) + (float)(v191 * _S2)) + v39;
          *((_WORD *)v59 + 2) = llroundf(v180);
          float v181 = v43;
          if (v49 <= v43)
          {
            float v181 = v49;
            if (v49 < v42) {
              float v181 = v42;
            }
          }
          *((_WORD *)v59 + 3) = llroundf(v181);
          if (v58) {
            *v58++ = 0;
          }
          v52 += 2;
          v57 += 2;
          v51 += 8;
          v59 += 8;
          v56 += 2;
        }
        while (v20 > v56);
      }
      uint64_t v52 = &v54[v27];
      v53 += v28;
      uint64_t v51 = &v55[v32];
      v19 += 2;
    }
    while (v23 > v19);
    if (v30 && v18)
    {
      uint64_t v182 = 0;
      do
      {
        if (v20)
        {
          unint64_t v183 = v20;
          float v184 = v16;
          float v185 = v31;
          do
          {
            __int16 v186 = *v185++;
            *v184++ = v186 | (v186 << 8);
            --v183;
          }
          while (v183);
        }
        v31 += v29;
        v16 += v14;
        ++v182;
      }
      while (v182 != v23);
    }
    else if (v18)
    {
      do
      {
        if (v20) {
          uint64_t result = memset(v16, 255, 2 * v20);
        }
        v16 += v14;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_v216(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_v216_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_v216_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, float a6, float a7)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = v14 * a2;
  unint64_t v16 = 2 * *result;
  unint64_t v17 = (v14 + v14 * a2) / v16;
  uint64_t v18 = *((void *)result + 14);
  unint64_t v19 = *((void *)result + 13) * a2 / v16;
  uint64_t v20 = (void *)*((void *)result + 16);
  uint64_t v21 = *((void *)result + 15) + 2 * v19;
  size_t v22 = (uint64_t *)*((void *)result + 17);
  uint64_t v23 = v22[1];
  uint64_t v24 = v20[1];
  uint64_t v25 = (char *)(v24 + v23 * v21 + 2 * v18);
  unint64_t v26 = v15 / v16;
  if (v24) {
    uint64_t v27 = v24 + v23 * v21 + 2 * v18;
  }
  else {
    uint64_t v27 = 0;
  }
  if (2 * v17 != 2 * v26)
  {
    unint64_t v28 = 0;
    unint64_t v29 = *(void *)(result + 20);
    uint64_t v30 = *(void *)(result + 36);
    uint64_t v31 = *(void *)(result + 44) + 2 * v26;
    unint64_t v32 = 2 * v17 - 2 * v26;
    uint64_t v33 = *((void *)result + 19);
    uint64_t v34 = (void *)*((void *)result + 7);
    uint64_t v35 = (uint64_t *)*((void *)result + 8);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    uint64_t v38 = v35[2];
    uint64_t v39 = v34[2];
    uint64_t v40 = (unsigned __int8 *)(v39 + v38 * v31 + v30);
    uint64_t v41 = *v22;
    LOWORD(a6) = *(_WORD *)(v33 + 140);
    LOWORD(a7) = *(_WORD *)(v33 + 142);
    float v42 = (float)*(unsigned int *)(v33 + 136) / (float)*(unsigned int *)(v33 + 128);
    LOWORD(v9) = *(_WORD *)(v33 + 144);
    LOWORD(v10) = *(_WORD *)(v33 + 146);
    LOWORD(v11) = *(_WORD *)(v33 + 148);
    LOWORD(v12) = *(_WORD *)(v33 + 150);
    LOWORD(v13) = *(_WORD *)(v33 + 152);
    float v43 = *(float *)(v33 + 36);
    float v44 = *(float *)(v33 + 40);
    float v45 = *(float *)(v33 + 44);
    float v46 = (float)LODWORD(a6);
    float v47 = (float)LODWORD(a7);
    float v48 = v42 * *(float *)v33;
    float v124 = v42 * *(float *)(v33 + 8);
    float v123 = v42 * *(float *)(v33 + 16);
    float v122 = v42 * *(float *)(v33 + 20);
    float v49 = v42 * *(float *)(v33 + 28);
    float v50 = (float)v9;
    float v51 = (float)v10;
    float v52 = (float)v11;
    float v53 = (float)LODWORD(v12);
    float v54 = (float)v13;
    float v55 = 0.5;
    float v56 = *(float *)(v33 + 48) * 0.5;
    float v57 = *(float *)(v33 + 52) * 0.5;
    float v58 = *(float *)(v33 + 56) * 0.5;
    float v59 = *(float *)(v33 + 60) * 0.5;
    float v60 = *(float *)(v33 + 64) * 0.5;
    float v61 = *(float *)(v33 + 68) * 0.5;
    uint64_t result = (unsigned __int8 *)(*v20 + v41 * v21 + 2 * v18);
    unsigned int v62 = (unsigned char *)(*v34 + v36 * v31 + v30);
    if (v31 >= 0) {
      uint64_t v63 = v31;
    }
    else {
      uint64_t v63 = v31 + 1;
    }
    uint64_t v64 = v34[1] + v37 * (v63 >> 1) + v30;
    do
    {
      float v65 = &v62[v36];
      float v66 = &result[v41];
      if (v29)
      {
        unint64_t v67 = 0;
        float v68 = &v62[v36];
        float v69 = (_DWORD *)v27;
        float v70 = &result[v41];
        float v71 = (_DWORD *)(v27 + v23);
        do
        {
          LOBYTE(v55) = *(unsigned char *)(v64 + v67);
          *(float *)&unsigned int v72 = (float)LODWORD(v55) - v47;
          LOBYTE(v12) = *(unsigned char *)(v64 + v67 + 1);
          float v73 = (float)LODWORD(v12) - v47;
          float v74 = v124 * v73;
          *(float *)&unsigned int v75 = v122 * v73;
          float v76 = *(float *)&v75 + (float)(*(float *)&v72 * v123);
          float v77 = v49 * *(float *)&v72;
          LOBYTE(v72) = *v62;
          float v78 = v48 * (float)((float)v72 - v46);
          LOBYTE(v75) = v62[1];
          float v79 = v48 * (float)((float)v75 - v46);
          LOBYTE(v8) = *v68;
          LOBYTE(v7) = v68[1];
          float v80 = v74 + v78;
          float v81 = v78 + v76;
          float v82 = v77 + v78;
          float v83 = v74 + v79;
          float v84 = v76 + v79;
          float v85 = v77 + v79;
          float v86 = (float)((float)((float)(v44 * (float)(v78 + v76)) + (float)(v43 * (float)(v74 + v78)))
                      + (float)(v45 * (float)(v77 + v78)))
              + v50;
          float v87 = v80 + (float)(v74 + v79);
          float v88 = v81 + (float)(v76 + v79);
          float v89 = v82 + (float)(v77 + v79);
          float v90 = (float)((float)(v51 + (float)(v87 * v56)) + (float)(v88 * v57)) + (float)(v89 * v58);
          if (v90 < v50) {
            float v91 = v50;
          }
          else {
            float v91 = (float)((float)(v51 + (float)(v87 * v56)) + (float)(v88 * v57)) + (float)(v89 * v58);
          }
          if (v90 > v52) {
            float v91 = v52;
          }
          *(_WORD *)uint64_t result = llroundf(v91);
          float v92 = v54;
          if (v86 <= v54)
          {
            float v92 = v86;
            if (v86 < v53) {
              float v92 = v53;
            }
          }
          float v93 = (float)((float)(v51 + (float)(v87 * v59)) + (float)(v88 * v60)) + (float)(v89 * v61);
          *((_WORD *)result + 1) = llroundf(v92);
          float v94 = v52;
          if (v93 <= v52)
          {
            float v94 = v93;
            if (v93 < v50) {
              float v94 = v50;
            }
          }
          float v95 = (float)((float)((float)(v44 * v84) + (float)(v43 * v83)) + (float)(v45 * v85)) + v50;
          *((_WORD *)result + 2) = llroundf(v94);
          float v96 = v54;
          if (v95 <= v54)
          {
            if (v95 < v53) {
              float v96 = v53;
            }
            else {
              float v96 = (float)((float)((float)(v44 * v84) + (float)(v43 * v83)) + (float)(v45 * v85)) + v50;
            }
          }
          *((_WORD *)result + 3) = llroundf(v96);
          if (v69) {
            *v69++ = 0;
          }
          float v97 = v48 * (float)((float)LODWORD(v8) - v46);
          float v98 = v48 * (float)((float)LODWORD(v7) - v46);
          float v99 = v74 + v97;
          float v100 = v76 + v97;
          float v101 = v77 + v97;
          float v102 = v74 + v98;
          float v103 = v76 + v98;
          float v104 = v77 + v98;
          float v105 = (float)((float)((float)(v44 * v100) + (float)(v43 * v99)) + (float)(v45 * v101)) + v50;
          float v106 = (float)((float)((float)(v44 * v103) + (float)(v43 * v102)) + (float)(v45 * v104)) + v50;
          float v107 = v99 + v102;
          float v8 = v51 + (float)(v107 * v56);
          float v108 = v100 + v103;
          float v7 = v8 + (float)(v108 * v57);
          float v109 = v101 + v104;
          float v110 = v7 + (float)(v109 * v58);
          float v12 = (float)(v51 + (float)(v107 * v59)) + (float)(v108 * v60);
          if (v110 < v50) {
            float v111 = v50;
          }
          else {
            float v111 = v7 + (float)(v109 * v58);
          }
          if (v110 <= v52) {
            float v112 = v111;
          }
          else {
            float v112 = v52;
          }
          float v113 = v12 + (float)(v109 * v61);
          *(_WORD *)float v70 = llroundf(v112);
          if (v105 < v53) {
            float v114 = v53;
          }
          else {
            float v114 = v105;
          }
          if (v105 > v54) {
            float v114 = v54;
          }
          *((_WORD *)v70 + 1) = llroundf(v114);
          if (v113 < v50) {
            float v115 = v50;
          }
          else {
            float v115 = v113;
          }
          if (v113 <= v52) {
            float v116 = v115;
          }
          else {
            float v116 = v52;
          }
          *((_WORD *)v70 + 2) = llroundf(v116);
          float v55 = v54;
          if (v106 <= v54)
          {
            float v55 = v106;
            if (v106 < v53) {
              float v55 = v53;
            }
          }
          *((_WORD *)v70 + 3) = llroundf(v55);
          if (v71) {
            *v71++ = 0;
          }
          v62 += 2;
          v68 += 2;
          result += 8;
          v70 += 8;
          v67 += 2;
        }
        while (v29 > v67);
      }
      unsigned int v62 = &v65[v36];
      v64 += v37;
      uint64_t result = &v66[v41];
      v28 += 2;
    }
    while (v32 > v28);
    if (v39 && v27)
    {
      uint64_t v117 = 0;
      do
      {
        if (v29)
        {
          unint64_t v118 = v29;
          float v119 = v25;
          float16x8_t v120 = v40;
          do
          {
            __int16 v121 = *v120++;
            *v119++ = v121 | (v121 << 8);
            --v118;
          }
          while (v118);
        }
        v40 += v38;
        v25 += v23;
        ++v117;
      }
      while (v117 != v32);
    }
    else if (v27)
    {
      do
      {
        if (v29) {
          uint64_t result = (unsigned __int8 *)memset(v25, 255, 2 * v29);
        }
        v25 += v23;
        --v32;
      }
      while (v32);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, float32x4_t a3, int16x4_t a4, float32x4_t a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (void *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = (float32x2_t *)*((void *)result + 19);
    uint64_t v18 = (uint64_t *)*((void *)result + 7);
    uint64_t v19 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v348 = v19[2];
    uint64_t v351 = v18[2];
    uint64_t v23 = *v20;
    uint64_t v24 = v20[1];
    uint64_t v349 = v20[2];
    uint64_t v350 = v15[2];
    uint64_t v25 = (char *)(v350 + v349 * v16 + v14);
    unsigned int v26 = v17[17].u16[2];
    unsigned int v27 = v17[17].u16[3];
    a4.i32[0] = v17->i32[0];
    a5.i32[0] = v17[3].i32[1];
    unsigned int v28 = v17[18].u16[0];
    unsigned int v29 = v17[18].u16[1];
    unsigned int v30 = v17[18].u16[2];
    unsigned int v31 = v17[18].u16[3];
    unsigned int v32 = v17[19].u16[0];
    _S5 = v17[4].f32[1];
    _S28 = v17[5].i32[0];
    _S10 = v17[5].i32[1];
    _S8 = v17[6].f32[0];
    _S12 = v17[7].f32[0];
    float v397 = v17[6].f32[1];
    uint64_t v38 = (char *)&v17[2068] + 4;
    uint64_t v39 = (char *)(v351 + v348 * v12 + v11);
    a3.f32[0] = 8191.0 / (float)v17[16].u32[0];
    float v40 = (float)v26;
    float v41 = (float)v27;
    float v42 = (float)v28;
    float v43 = (float)v30;
    _S18 = a3.f32[0] * v17->f32[0];
    float v45 = (float)v32;
    float v46 = (char *)&v17[20] + 4;
    *(short float *)a4.i16 = (short float)v26;
    float v47 = (char *)&v17[4116] + 4;
    __asm { FCVT            H6, S18 }
    float16x8_t v394 = (float16x8_t)vdupq_lane_s16(a4, 0);
    short float v395 = _H6;
    short float v53 = -(short float)v27;
    a5.i32[1] = v17[1].i32[0];
    *(float32x2_t *)a5.f32 = vmul_n_f32(*(float32x2_t *)a5.f32, a3.f32[0]);
    unint64_t v399 = a5.i64[0];
    *(float32x2_t *)a3.f32 = vmul_n_f32(v17[2], a3.f32[0]);
    unint64_t v398 = a3.i64[0];
    float16x8_t v392 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a3), 0);
    float16x8_t v393 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    _Q0 = vmulq_n_f16(v392, v53);
    float16x8_t v390 = _Q0;
    float16x8_t v391 = vmulq_n_f16(v393, v53);
    __asm { FCVT            H0, S5 }
    short float v412 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S28 }
    short float v411 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v28;
    float16x8_t v55 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v29;
    int16x8_t v56 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v30;
    int16x8_t v57 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v31;
    _Q0 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v408 = (float16x8_t)_Q0;
    float16x8_t v409 = (float16x8_t)v56;
    *(short float *)_Q0.i16 = (short float)v32;
    float16x8_t v407 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    __asm { FCVT            H0, S10 }
    short float v410 = *(short float *)_Q0.i16;
    float v61 = v15;
    uint64_t v60 = *v15;
    uint64_t v59 = v61[1];
    if (v59) {
      unsigned int v62 = (char *)(v59 + v24 * v16 + v14);
    }
    else {
      unsigned int v62 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v60 + v23 * v16 + v14);
    if (v12 >= 0) {
      uint64_t v63 = v12;
    }
    else {
      uint64_t v63 = v12 + 1;
    }
    uint64_t v64 = *v18;
    float v65 = (unsigned char *)(v18[1] + v22 * (v63 >> 1) + v11);
    float v66 = (int8x8_t *)(v64 + v21 * v12 + v11);
    _S31 = v17[14].f32[0];
    __asm { FCVT            H6, S8 }
    short float v406 = _H6;
    _S2 = v17[6].i32[1];
    __asm { FCVT            H6, S2 }
    short float v405 = _H6;
    __asm { FCVT            H6, S12 }
    short float v404 = _H6;
    float v415 = v17[7].f32[1];
    __asm { FCVT            H0, S0 }
    short float v403 = _H0;
    float v414 = v17[8].f32[0];
    __asm { FCVT            H0, S1 }
    short float v402 = _H0;
    float v413 = v17[8].f32[1];
    __asm { FCVT            H0, S7 }
    short float v401 = _H0;
    float v364 = v17[13].f32[1];
    __asm { FCVT            H0, S3 }
    short float v379 = _H0;
    __asm { FCVT            H0, S31 }
    short float v378 = _H0;
    float v381 = v17[14].f32[1];
    __asm { FCVT            H0, S13 }
    short float v377 = _H0;
    float v380 = v17[15].f32[0];
    __asm { FCVT            H0, S15 }
    short float v376 = _H0;
    float v388 = v17[9].f32[0];
    __asm { FCVT            H0, S16 }
    short float v375 = _H0;
    float v387 = v17[9].f32[1];
    __asm { FCVT            H0, S20 }
    short float v374 = _H0;
    float v386 = v17[10].f32[0];
    __asm { FCVT            H3, S21 }
    short float v370 = _H3;
    float v385 = v17[10].f32[1];
    __asm { FCVT            H3, S23 }
    short float v369 = _H3;
    float v384 = v17[11].f32[0];
    __asm { FCVT            H3, S24 }
    short float v368 = _H3;
    float v383 = v17[11].f32[1];
    __asm { FCVT            H3, S25 }
    short float v367 = _H3;
    float v382 = v17[12].f32[0];
    __asm { FCVT            H3, S4 }
    float v373 = v17[12].f32[1];
    __asm { FCVT            H0, S0 }
    short float v366 = _H0;
    _Q0.i16[1] = HIWORD(v398);
    float v371 = v17[13].f32[0];
    __asm { FCVT            H0, S1 }
    short float v365 = *(short float *)_Q0.i16;
    uint64_t v354 = v23;
    uint64_t v355 = *v19;
    uint64_t v352 = v19[1];
    uint64_t v353 = v24;
    float v400 = (float)v27;
    float v396 = v17[5].f32[0];
    float v362 = v40;
    float v363 = _S18;
    float16x8_t v361 = v55;
    float16x8_t v389 = (float16x8_t)v57;
    float v359 = (float)v29;
    float v360 = (float)v31;
    float v372 = v17[5].f32[1];
    float32_t v357 = v17[4].f32[1];
    float v358 = _S31;
    do
    {
      float v88 = (char *)v66 + v21;
      float v89 = &result[v23];
      float v90 = &v62[v24];
      float v356 = &v62[v24];
      if ((int)v10 < 8)
      {
        size_t v203 = 0;
        float v93 = (int8x8_t *)&result[v23];
        float v202 = v65;
        float v92 = (int8x8_t *)((char *)v66 + v21);
      }
      else
      {
        uint64_t v91 = 0;
        float v92 = (int8x8_t *)((char *)v66 + v21);
        float v93 = (int8x8_t *)&result[v23];
        do
        {
          int8x8_t v94 = *(int8x8_t *)&v65[v91];
          *(int8x8_t *)v95.i8 = vzip1_s8(v94, 0);
          v95.u64[1] = (unint64_t)vzip2_s8(v94, 0);
          float16x8_t v96 = vcvtq_f16_u16(v95);
          int8x16_t v97 = (int8x16_t)vmlaq_f16(v391, v393, v96);
          int8x16_t v98 = (int8x16_t)vmlaq_f16(v390, v392, v96);
          v96.i64[0] = vextq_s8(v97, v97, 8uLL).u64[0];
          *(int16x4_t *)v99.i8 = vuzp1_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v96.i8);
          *(int16x4_t *)v96.i8 = vuzp2_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v96.i8);
          v96.i64[1] = v96.i64[0];
          v99.i64[1] = v96.i64[0];
          float16x8_t v100 = (float16x8_t)vzip1q_s16((int16x8_t)v96, (int16x8_t)v96);
          float16x8_t v101 = (float16x8_t)vzip1q_s16(v99, v99);
          v96.i64[0] = vextq_s8(v98, v98, 8uLL).u64[0];
          *(float16x4_t *)v96.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v96.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v96.i8));
          v96.i64[1] = v96.i64[0];
          float16x8_t v102 = (float16x8_t)vzip1q_s16((int16x8_t)v96, (int16x8_t)v96);
          int8x8_t v103 = *v66++;
          *(int8x8_t *)v98.i8 = vzip1_s8(v103, 0);
          v98.u64[1] = (unint64_t)vzip2_s8(v103, 0);
          float16x8_t v104 = vcvtq_f16_u16((uint16x8_t)v98);
          int8x8_t v105 = *v92++;
          *(int8x8_t *)v99.i8 = vzip1_s8(v105, 0);
          v99.u64[1] = (unint64_t)vzip2_s8(v105, 0);
          float16x8_t v106 = vcvtq_f16_u16((uint16x8_t)v99);
          float16x8_t v107 = vsubq_f16(v104, v394);
          float16x8_t v108 = vsubq_f16(v106, v394);
          float16x8_t v109 = vmlaq_n_f16(v100, v107, v395);
          float16x8_t v110 = vmlaq_n_f16(v100, v108, v395);
          float16x8_t v111 = vmlaq_n_f16(v102, v107, v395);
          float16x8_t v112 = vmlaq_n_f16(v102, v108, v395);
          float16x8_t v113 = vmlaq_n_f16(v101, v107, v395);
          float16x8_t v114 = vmlaq_n_f16(v101, v108, v395);
          v115.i64[0] = 0x9000900090009000;
          v115.i64[1] = 0x9000900090009000;
          uint16x8_t v116 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v109, (float16x8_t)0), v115));
          uint32x4_t v117 = vmovl_high_u16(v116);
          uint32x4_t v118 = vmovl_u16(*(uint16x4_t *)v116.i8);
          v119.i16[0] = *(_WORD *)&v46[2 * v118.u32[0]];
          v119.i16[1] = *(_WORD *)&v46[2 * v118.u32[1]];
          v119.i16[2] = *(_WORD *)&v46[2 * v118.u32[2]];
          v119.i16[3] = *(_WORD *)&v46[2 * v118.u32[3]];
          v119.i16[4] = *(_WORD *)&v46[2 * v117.u32[0]];
          v119.i16[5] = *(_WORD *)&v46[2 * v117.u32[1]];
          v119.i16[6] = *(_WORD *)&v46[2 * v117.u32[2]];
          v119.i16[7] = *(_WORD *)&v46[2 * v117.u32[3]];
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, (float16x8_t)0), v115));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          v123.i16[0] = *(_WORD *)&v46[2 * v122.u32[0]];
          v123.i16[1] = *(_WORD *)&v46[2 * v122.u32[1]];
          v123.i16[2] = *(_WORD *)&v46[2 * v122.u32[2]];
          v123.i16[3] = *(_WORD *)&v46[2 * v122.u32[3]];
          v123.i16[4] = *(_WORD *)&v46[2 * v121.u32[0]];
          v123.i16[5] = *(_WORD *)&v46[2 * v121.u32[1]];
          v123.i16[6] = *(_WORD *)&v46[2 * v121.u32[2]];
          v123.i16[7] = *(_WORD *)&v46[2 * v121.u32[3]];
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v115));
          uint32x4_t v125 = vmovl_high_u16(v124);
          float16x8_t v126 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v124.i8);
          v126.i16[0] = *(_WORD *)&v46[2 * v126.u32[0]];
          v126.i16[1] = *(_WORD *)&v46[2 * v126.u32[1]];
          v126.i16[2] = *(_WORD *)&v46[2 * v126.u32[2]];
          v126.i16[3] = *(_WORD *)&v46[2 * v126.u32[3]];
          v126.i16[4] = *(_WORD *)&v46[2 * v125.u32[0]];
          v126.i16[5] = *(_WORD *)&v46[2 * v125.u32[1]];
          v126.i16[6] = *(_WORD *)&v46[2 * v125.u32[2]];
          v126.i16[7] = *(_WORD *)&v46[2 * v125.u32[3]];
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v110, (float16x8_t)0), v115));
          uint32x4_t v128 = vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v110.i16[0] = *(_WORD *)&v46[2 * v129.u32[0]];
          v110.i16[1] = *(_WORD *)&v46[2 * v129.u32[1]];
          v110.i16[2] = *(_WORD *)&v46[2 * v129.u32[2]];
          v110.i16[3] = *(_WORD *)&v46[2 * v129.u32[3]];
          v110.i16[4] = *(_WORD *)&v46[2 * v128.u32[0]];
          v110.i16[5] = *(_WORD *)&v46[2 * v128.u32[1]];
          v110.i16[6] = *(_WORD *)&v46[2 * v128.u32[2]];
          v110.i16[7] = *(_WORD *)&v46[2 * v128.u32[3]];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, (float16x8_t)0), v115));
          uint32x4_t v131 = vmovl_high_u16(v130);
          float16x8_t v132 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v130.i8);
          v132.i16[0] = *(_WORD *)&v46[2 * v132.u32[0]];
          v132.i16[1] = *(_WORD *)&v46[2 * v132.u32[1]];
          v132.i16[2] = *(_WORD *)&v46[2 * v132.u32[2]];
          v132.i16[3] = *(_WORD *)&v46[2 * v132.u32[3]];
          v132.i16[4] = *(_WORD *)&v46[2 * v131.u32[0]];
          v132.i16[5] = *(_WORD *)&v46[2 * v131.u32[1]];
          v132.i16[6] = *(_WORD *)&v46[2 * v131.u32[2]];
          v132.i16[7] = *(_WORD *)&v46[2 * v131.u32[3]];
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v115));
          uint32x4_t v134 = vmovl_high_u16(v133);
          float16x8_t v135 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v133.i8);
          v135.i16[0] = *(_WORD *)&v46[2 * v135.u32[0]];
          v135.i16[1] = *(_WORD *)&v46[2 * v135.u32[1]];
          v135.i16[2] = *(_WORD *)&v46[2 * v135.u32[2]];
          v135.i16[3] = *(_WORD *)&v46[2 * v135.u32[3]];
          v135.i16[4] = *(_WORD *)&v46[2 * v134.u32[0]];
          v135.i16[5] = *(_WORD *)&v46[2 * v134.u32[1]];
          v135.i16[6] = *(_WORD *)&v46[2 * v134.u32[2]];
          v135.i16[7] = *(_WORD *)&v46[2 * v134.u32[3]];
          uint16x8_t v136 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v119, v379), v123, v378), v126, v377), vmaxq_f16(vmaxq_f16(v119, v123), v126), v376), (float16x8_t)0), v115));
          uint32x4_t v137 = vmovl_high_u16(v136);
          float16x8_t v138 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v136.i8);
          v138.i16[0] = *(_WORD *)&v38[2 * v138.u32[0]];
          v138.i16[1] = *(_WORD *)&v38[2 * v138.u32[1]];
          v138.i16[2] = *(_WORD *)&v38[2 * v138.u32[2]];
          v138.i16[3] = *(_WORD *)&v38[2 * v138.u32[3]];
          v138.i16[4] = *(_WORD *)&v38[2 * v137.u32[0]];
          v138.i16[5] = *(_WORD *)&v38[2 * v137.u32[1]];
          v138.i16[6] = *(_WORD *)&v38[2 * v137.u32[2]];
          v138.i16[7] = *(_WORD *)&v38[2 * v137.u32[3]];
          float16x8_t v139 = vmulq_f16(v119, v138);
          float16x8_t v140 = vmulq_f16(v123, v138);
          float16x8_t v141 = vmulq_f16(v126, v138);
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v110, v379), v132, v378), v135, v377), vmaxq_f16(vmaxq_f16(v110, v132), v135), v376), (float16x8_t)0), v115));
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v142.i8);
          float16x8_t v144 = (float16x8_t)vmovl_high_u16(v142);
          uint64_t v145 = v144.u32[0];
          v144.i16[0] = *(_WORD *)&v38[2 * v143.u32[0]];
          unsigned int v146 = (__int16 *)&v38[2 * v144.u32[1]];
          float v147 = (__int16 *)&v38[2 * v144.u32[2]];
          v144.i16[1] = *(_WORD *)&v38[2 * v143.u32[1]];
          v144.i16[2] = *(_WORD *)&v38[2 * v143.u32[2]];
          v144.i16[3] = *(_WORD *)&v38[2 * v143.u32[3]];
          v144.i16[4] = *(_WORD *)&v38[2 * v145];
          v144.i16[5] = *v146;
          unsigned int v148 = (__int16 *)&v38[2 * v144.u32[3]];
          v144.i16[6] = *v147;
          v144.i16[7] = *v148;
          float16x8_t v149 = vmulq_f16(v110, v144);
          float16x8_t v150 = vmulq_f16(v132, v144);
          float16x8_t v151 = vmulq_f16(v135, v144);
          float16x8_t v152 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v139, v375), v140, v374), v141, v370);
          float16x8_t v153 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v139, v369), v140, v368), v141, v367);
          float16x8_t v154 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v141, v365), v140, v366), v139, _H3);
          float16x8_t v155 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v149, v375), v150, v374), v151, v370);
          float16x8_t v156 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v149, v369), v150, v368), v151, v367);
          float16x8_t v157 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v151, v365), v150, v366), v149, _H3);
          uint16x8_t v158 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v152, (float16x8_t)0), v115));
          uint32x4_t v159 = vmovl_high_u16(v158);
          uint32x4_t v160 = vmovl_u16(*(uint16x4_t *)v158.i8);
          v161.i16[0] = *(_WORD *)&v47[2 * v160.u32[0]];
          v161.i16[1] = *(_WORD *)&v47[2 * v160.u32[1]];
          v161.i16[2] = *(_WORD *)&v47[2 * v160.u32[2]];
          v161.i16[3] = *(_WORD *)&v47[2 * v160.u32[3]];
          v161.i16[4] = *(_WORD *)&v47[2 * v159.u32[0]];
          v161.i16[5] = *(_WORD *)&v47[2 * v159.u32[1]];
          v161.i16[6] = *(_WORD *)&v47[2 * v159.u32[2]];
          v161.i16[7] = *(_WORD *)&v47[2 * v159.u32[3]];
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v153, (float16x8_t)0), v115));
          uint32x4_t v163 = vmovl_high_u16(v162);
          uint32x4_t v164 = vmovl_u16(*(uint16x4_t *)v162.i8);
          v165.i16[0] = *(_WORD *)&v47[2 * v164.u32[0]];
          v165.i16[1] = *(_WORD *)&v47[2 * v164.u32[1]];
          v165.i16[2] = *(_WORD *)&v47[2 * v164.u32[2]];
          v165.i16[3] = *(_WORD *)&v47[2 * v164.u32[3]];
          v165.i16[4] = *(_WORD *)&v47[2 * v163.u32[0]];
          v165.i16[5] = *(_WORD *)&v47[2 * v163.u32[1]];
          v165.i16[6] = *(_WORD *)&v47[2 * v163.u32[2]];
          v165.i16[7] = *(_WORD *)&v47[2 * v163.u32[3]];
          uint16x8_t v166 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v154, (float16x8_t)0), v115));
          uint32x4_t v167 = vmovl_high_u16(v166);
          uint32x4_t v168 = vmovl_u16(*(uint16x4_t *)v166.i8);
          v149.i64[0] = v167.u32[0];
          v176.i16[0] = *(_WORD *)&v47[2 * v168.u32[0]];
          uint64_t v169 = v167.u32[1];
          uint64_t v170 = v167.u32[3];
          uint64_t v171 = v167.u32[2];
          uint16x8_t v172 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v155, (float16x8_t)0), v115));
          uint32x4_t v173 = vmovl_u16(*(uint16x4_t *)v172.i8);
          uint64_t v174 = v173.u32[1];
          uint64_t v175 = v173.u32[0];
          v176.i16[1] = *(_WORD *)&v47[2 * v168.u32[1]];
          v176.i16[2] = *(_WORD *)&v47[2 * v168.u32[2]];
          v176.i16[3] = *(_WORD *)&v47[2 * v168.u32[3]];
          v176.i16[4] = *(_WORD *)&v47[2 * v149.i64[0]];
          v176.i16[5] = *(_WORD *)&v47[2 * v169];
          v176.i16[6] = *(_WORD *)&v47[2 * v171];
          v176.i16[7] = *(_WORD *)&v47[2 * v170];
          uint32x4_t v177 = vmovl_high_u16(v172);
          uint64_t v178 = v173.u32[3];
          uint64_t v179 = v173.u32[2];
          uint64_t v180 = v177.u32[1];
          uint64_t v181 = v177.u32[0];
          uint64_t v182 = v177.u32[3];
          uint64_t v183 = v177.u32[2];
          uint16x8_t v184 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v156, (float16x8_t)0), v115));
          uint32x4_t v185 = vmovl_u16(*(uint16x4_t *)v184.i8);
          uint64_t v186 = v185.u32[1];
          uint64_t v187 = v185.u32[0];
          _Q0.i16[0] = *(_WORD *)&v47[2 * v175];
          _Q0.i16[1] = *(_WORD *)&v47[2 * v174];
          _Q0.i16[2] = *(_WORD *)&v47[2 * v179];
          _Q0.i16[3] = *(_WORD *)&v47[2 * v178];
          _Q0.i16[4] = *(_WORD *)&v47[2 * v181];
          _Q0.i16[5] = *(_WORD *)&v47[2 * v180];
          _Q0.i16[6] = *(_WORD *)&v47[2 * v183];
          _Q0.i16[7] = *(_WORD *)&v47[2 * v182];
          uint32x4_t v188 = vmovl_high_u16(v184);
          uint64_t v189 = v185.u32[3];
          uint64_t v190 = v185.u32[2];
          uint64_t v191 = v188.u32[1];
          uint64_t v192 = v188.u32[0];
          uint64_t v193 = v188.u32[3];
          uint64_t v194 = v188.u32[2];
          uint16x8_t v195 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v157, (float16x8_t)0), v115));
          uint32x4_t v196 = vmovl_u16(*(uint16x4_t *)v195.i8);
          v197.i16[0] = *(_WORD *)&v47[2 * v187];
          v197.i16[1] = *(_WORD *)&v47[2 * v186];
          v197.i16[2] = *(_WORD *)&v47[2 * v190];
          v197.i16[3] = *(_WORD *)&v47[2 * v189];
          v197.i16[4] = *(_WORD *)&v47[2 * v192];
          v197.i16[5] = *(_WORD *)&v47[2 * v191];
          v197.i16[6] = *(_WORD *)&v47[2 * v194];
          v197.i16[7] = *(_WORD *)&v47[2 * v193];
          uint32x4_t v198 = vmovl_high_u16(v195);
          v199.i16[0] = *(_WORD *)&v47[2 * v196.u32[0]];
          v199.i16[1] = *(_WORD *)&v47[2 * v196.u32[1]];
          v199.i16[2] = *(_WORD *)&v47[2 * v196.u32[2]];
          v199.i16[3] = *(_WORD *)&v47[2 * v196.u32[3]];
          v199.i16[4] = *(_WORD *)&v47[2 * v198.u32[0]];
          v199.i16[5] = *(_WORD *)&v47[2 * v198.u32[1]];
          v199.i16[6] = *(_WORD *)&v47[2 * v198.u32[2]];
          v199.i16[7] = *(_WORD *)&v47[2 * v198.u32[3]];
          *(int8x8_t *)uint64_t result = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v55, v161, v412), v165, v411), v176, v410), v55), v389)));
          result += 8;
          if (v62)
          {
            v416.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v409, v161, v406), v165, v405), v176, v404), v408), v407), v408), v407)));
            v416.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v409, v161, v403), v165, v402), v176, v401)));
            vst2_s8(v62, v416);
            v62 += 16;
          }
          _S5 = v357;
          *v93++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v55, _Q0, v412), v197, v411), v199, v410), v55), v389)));
          if (v90)
          {
            float16x8_t v200 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v409, _Q0, v403), v197, v402), v199, v401);
            *(int8x8_t *)_Q0.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v409, _Q0, v406), v197, v405), v199, v404), v408), v407), v408), v407)));
            int8x8_t v201 = vmovn_s16((int16x8_t)vcvtq_u16_f16(v200));
            vst2_s8(v90, (int8x8x2_t)_Q0);
            v90 += 16;
          }
          v91 += 8;
        }
        while ((int)v91 < (int)v10 - 7);
        float v202 = &v65[v91];
        size_t v203 = v10 & 0xFFFFFFF8;
        uint64_t v22 = v352;
        float v41 = v400;
      }
      while (v10 > v203)
      {
        _Q0.i8[0] = v202[1];
        float v204 = (float)_Q0.u32[0] - v41;
        unsigned int v205 = HIDWORD(v399);
        float v206 = *((float *)&v399 + 1) * v204;
        LOBYTE(v205) = v66->i8[0];
        float v207 = _S18 * (float)((float)v205 - v40);
        float v208 = (float)(*((float *)&v399 + 1) * v204) + v207;
        float v209 = 8191.0;
        if (v208 <= 8191.0)
        {
          float v209 = (float)(*((float *)&v399 + 1) * v204) + v207;
          if (v208 < 0.0) {
            float v209 = 0.0;
          }
        }
        LOBYTE(v208) = *v202;
        float v210 = (float)LODWORD(v208) - v41;
        float v211 = (float)(*((float *)&v398 + 1) * v204) + (float)(v210 * *(float *)&v398);
        float v212 = 8191.0;
        if ((float)(v207 + v211) <= 8191.0)
        {
          float v212 = v207 + v211;
          if ((float)(v207 + v211) < 0.0) {
            float v212 = 0.0;
          }
        }
        float v213 = *(float *)&v399 * v210;
        float v214 = v213 + v207;
        float v215 = 8191.0;
        if (v214 <= 8191.0)
        {
          float v215 = v214;
          if (v214 < 0.0) {
            float v215 = 0.0;
          }
        }
        LOBYTE(v214) = v66->i8[1];
        float v216 = _S18 * (float)((float)LODWORD(v214) - v40);
        float v217 = 8191.0;
        if ((float)(v206 + v216) <= 8191.0)
        {
          float v217 = v206 + v216;
          if ((float)(v206 + v216) < 0.0) {
            float v217 = 0.0;
          }
        }
        float v218 = 8191.0;
        if ((float)(v211 + v216) <= 8191.0)
        {
          float v218 = v211 + v216;
          if ((float)(v211 + v216) < 0.0) {
            float v218 = 0.0;
          }
        }
        float v219 = v213 + v216;
        float v220 = 8191.0;
        if (v219 <= 8191.0)
        {
          float v220 = v219;
          if (v219 < 0.0) {
            float v220 = 0.0;
          }
        }
        LOBYTE(v219) = v92->i8[0];
        float v221 = _S18 * (float)((float)LODWORD(v219) - v40);
        float v222 = v206 + v221;
        float v223 = 8191.0;
        if ((float)(v206 + v221) <= 8191.0)
        {
          float v223 = v206 + v221;
          if (v222 < 0.0) {
            float v223 = 0.0;
          }
        }
        float v224 = 8191.0;
        if ((float)(v211 + v221) <= 8191.0)
        {
          float v224 = v211 + v221;
          if ((float)(v211 + v221) < 0.0) {
            float v224 = 0.0;
          }
        }
        float v225 = v213 + v221;
        float v226 = 8191.0;
        if (v225 <= 8191.0)
        {
          float v226 = v225;
          if (v225 < 0.0) {
            float v226 = 0.0;
          }
        }
        LOBYTE(v222) = v92->i8[1];
        float v227 = _S18 * (float)((float)LODWORD(v222) - v40);
        float v228 = v206 + v227;
        BOOL v229 = (float)(v206 + v227) <= 8191.0;
        float v230 = 8191.0;
        if (v229)
        {
          float v230 = v228;
          if (v228 < 0.0) {
            float v230 = 0.0;
          }
        }
        float v231 = v211 + v227;
        BOOL v229 = (float)(v211 + v227) <= 8191.0;
        float v232 = 8191.0;
        if (v229)
        {
          float v232 = v231;
          if (v231 < 0.0) {
            float v232 = 0.0;
          }
        }
        float v233 = v213 + v227;
        float v234 = 8191.0;
        if (v233 <= 8191.0)
        {
          float v234 = v233;
          if (v233 < 0.0) {
            float v234 = 0.0;
          }
        }
        _H0 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v209, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H1 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v212, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v215, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H21 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v217, 0.0), 8191.0))];
        _H16 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v218, 0.0), 8191.0))];
        _H23 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0))];
        _H30 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        _H28 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v224, 0.0), 8191.0))];
        _H29 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v226, 0.0), 8191.0))];
        _H24 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v230, 0.0), 8191.0))];
        _H25 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v232, 0.0), 8191.0))];
        _H6 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v234, 0.0), 8191.0))];
        float v250 = fmaxf(_S0, fmaxf(_S1, _S2));
        float v251 = (float)((float)((float)(_S31 * _S1) + (float)(v364 * _S0)) + (float)(v381 * _S2)) + (float)(v380 * v250);
        float v252 = 8191.0;
        if (v251 <= 8191.0)
        {
          float v252 = (float)((float)((float)(_S31 * _S1) + (float)(v364 * _S0)) + (float)(v381 * _S2))
               + (float)(v380 * v250);
          if (v251 < 0.0) {
            float v252 = 0.0;
          }
        }
        __asm
        {
          FCVT            S7, H21
          FCVT            S20, H16
          FCVT            S21, H23
        }
        _H27 = *(_WORD *)&v38[2 * llroundf(v252)];
        float v257 = (float)((float)((float)(_S31 * _S20) + (float)(v364 * _S7)) + (float)(v381 * _S21))
             + (float)(v380 * fmaxf(_S7, fmaxf(_S20, _S21)));
        float v258 = 8191.0;
        if (v257 <= 8191.0)
        {
          float v258 = v257;
          if (v257 < 0.0) {
            float v258 = 0.0;
          }
        }
        __asm
        {
          FCVT            S30, H30
          FCVT            S28, H28
          FCVT            S29, H29
        }
        _H16 = *(_WORD *)&v38[2 * llroundf(v258)];
        float v263 = fmaxf(_S30, fmaxf(_S28, _S29));
        float v264 = (float)((float)((float)(_S31 * _S28) + (float)(v364 * _S30)) + (float)(v381 * _S29))
             + (float)(v380 * v263);
        float v265 = 8191.0;
        if (v264 <= 8191.0)
        {
          float v265 = (float)((float)((float)(_S31 * _S28) + (float)(v364 * _S30)) + (float)(v381 * _S29))
               + (float)(v380 * v263);
          if (v264 < 0.0) {
            float v265 = 0.0;
          }
        }
        float v266 = v45;
        float v267 = v43;
        __asm
        {
          FCVT            S23, H24
          FCVT            S24, H25
          FCVT            S6, H6
        }
        _H25 = *(_WORD *)&v38[2 * llroundf(v265)];
        float v272 = (float)((float)((float)(_S31 * _S24) + (float)(v364 * _S23)) + (float)(v381 * _S6))
             + (float)(v380 * fmaxf(_S23, fmaxf(_S24, _S6)));
        float v273 = 8191.0;
        if (v272 <= 8191.0)
        {
          float v273 = v272;
          if (v272 < 0.0) {
            float v273 = 0.0;
          }
        }
        __asm { FCVT            S27, H27 }
        float v275 = _S0 * _S27;
        float v276 = _S1 * _S27;
        _S2 = _S2 * _S27;
        __asm { FCVT            S16, H16 }
        float v279 = _S7 * _S16;
        float v280 = _S20 * _S16;
        float v281 = _S21 * _S16;
        __asm { FCVT            S21, H25 }
        float v283 = _S30 * _S21;
        float v284 = _S28 * _S21;
        float v285 = _S29 * _S21;
        _H26 = *(_WORD *)&v38[2 * llroundf(v273)];
        __asm { FCVT            S26, H26 }
        float v288 = _S23 * _S26;
        float v289 = _S24 * _S26;
        float v290 = _S6 * _S26;
        float v291 = (float)((float)(v387 * v276) + (float)(v275 * v388)) + (float)(_S2 * v386);
        float v292 = (float)((float)(v384 * v276) + (float)(v275 * v385)) + (float)(_S2 * v383);
        _S0 = (float)((float)(v373 * v276) + (float)(v275 * v382)) + (float)(_S2 * v371);
        float v294 = (float)((float)(v387 * v280) + (float)(v279 * v388)) + (float)(v281 * v386);
        float v295 = (float)((float)(v384 * v280) + (float)(v279 * v385)) + (float)(v281 * v383);
        float v296 = (float)((float)(v373 * v280) + (float)(v279 * v382)) + (float)(v281 * v371);
        float v297 = (float)((float)(v387 * v284) + (float)(v283 * v388)) + (float)(v285 * v386);
        float v298 = (float)((float)(v384 * v284) + (float)(v283 * v385)) + (float)(v285 * v383);
        float v299 = (float)((float)(v373 * v284) + (float)(v283 * v382)) + (float)(v285 * v371);
        float v300 = (float)((float)(v387 * v289) + (float)(v288 * v388)) + (float)(v290 * v386);
        float v301 = (float)((float)(v384 * v289) + (float)(v288 * v385)) + (float)(v290 * v383);
        float v302 = (float)((float)(v373 * v289) + (float)(v288 * v382)) + (float)(v290 * v371);
        LOWORD(_S2) = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v291, 0.0), 8191.0))];
        __asm { FCVT            S6, H2 }
        LOWORD(_S2) = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v292, 0.0), 8191.0))];
        __asm { FCVT            S27, H2 }
        LOWORD(_S0) = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm { FCVT            S30, H0 }
        _H2 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v294, 0.0), 8191.0))];
        _H7 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v295, 0.0), 8191.0))];
        _H20 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v296, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v297, 0.0), 8191.0))];
        _H25 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v298, 0.0), 8191.0))];
        _H15 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v299, 0.0), 8191.0))];
        _H21 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v300, 0.0), 8191.0))];
        _H24 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v301, 0.0), 8191.0))];
        _H0 = *(_WORD *)&v47[2 * llroundf(fminf(fmaxf(v302, 0.0), 8191.0))];
        float v315 = (float)((float)((float)(v396 * _S27) + (float)(_S5 * _S6)) + (float)(v372 * _S30)) + v42;
        float v43 = v267;
        float v316 = v267;
        if (v315 <= v267)
        {
          float v316 = (float)((float)((float)(v396 * _S27) + (float)(_S5 * _S6)) + (float)(v372 * _S30)) + v42;
          if (v315 < v42) {
            float v316 = v42;
          }
        }
        *uint64_t result = llroundf(v316);
        float v45 = v266;
        if (v62)
        {
          float v318 = v359;
          float v317 = v360;
          float v319 = (float)((float)(v359 + (float)(_S6 * _S8)) + (float)(_S27 * v397)) + (float)(_S30 * _S12);
          float v320 = v266;
          if (v319 <= v266)
          {
            float v320 = (float)((float)(v359 + (float)(_S6 * _S8)) + (float)(_S27 * v397)) + (float)(_S30 * _S12);
            if (v319 < v360) {
              float v320 = v360;
            }
          }
          float v321 = (float)((float)(v359 + (float)(_S6 * v415)) + (float)(_S27 * v414)) + (float)(_S30 * v413);
          *unsigned int v62 = llroundf(v320);
          float v322 = v266;
          float v40 = v362;
          _S18 = v363;
          float v41 = v400;
          float16x8_t v55 = v361;
          if (v321 <= v266)
          {
            float v322 = v321;
            if (v321 < v360) {
              float v322 = v360;
            }
          }
          v62[1] = llroundf(v322);
          v62 += 2;
        }
        else
        {
          float v40 = v362;
          _S18 = v363;
          float v41 = v400;
          float v318 = v359;
          float v317 = v360;
          float16x8_t v55 = v361;
        }
        _S31 = v358;
        __asm
        {
          FCVT            S2, H2
          FCVT            S6, H7
          FCVT            S7, H20
        }
        float v326 = (float)((float)((float)(v396 * _S6) + (float)(_S5 * _S2)) + (float)(v372 * _S7)) + v42;
        float v327 = v267;
        if (v326 <= v267)
        {
          float v327 = (float)((float)((float)(v396 * _S6) + (float)(_S5 * _S2)) + (float)(v372 * _S7)) + v42;
          if (v326 < v42) {
            float v327 = v42;
          }
        }
        result[1] = llroundf(v327);
        if (v62)
        {
          float v328 = (float)((float)(v318 + (float)(_S2 * _S8)) + (float)(_S6 * v397)) + (float)(_S7 * _S12);
          float v329 = v266;
          if (v328 <= v266)
          {
            float v329 = (float)((float)(v318 + (float)(_S2 * _S8)) + (float)(_S6 * v397)) + (float)(_S7 * _S12);
            if (v328 < v317) {
              float v329 = v317;
            }
          }
          float v330 = (float)((float)(v318 + (float)(_S2 * v415)) + (float)(_S6 * v414)) + (float)(_S7 * v413);
          *unsigned int v62 = llroundf(v329);
          float v331 = v266;
          if (v330 <= v266)
          {
            float v331 = v330;
            if (v330 < v317) {
              float v331 = v317;
            }
          }
          v62[1] = llroundf(v331);
          v62 += 2;
        }
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H25
          FCVT            S6, H15
        }
        float v335 = (float)((float)((float)(v396 * _S2) + (float)(_S5 * _S1)) + (float)(v372 * _S6)) + v42;
        float v336 = v267;
        if (v335 <= v267)
        {
          float v336 = (float)((float)((float)(v396 * _S2) + (float)(_S5 * _S1)) + (float)(v372 * _S6)) + v42;
          if (v335 < v42) {
            float v336 = v42;
          }
        }
        v93->i8[0] = llroundf(v336);
        if (v90)
        {
          float v337 = (float)((float)(v318 + (float)(_S1 * _S8)) + (float)(_S2 * v397)) + (float)(_S6 * _S12);
          float v338 = v266;
          if (v337 <= v266)
          {
            float v338 = (float)((float)(v318 + (float)(_S1 * _S8)) + (float)(_S2 * v397)) + (float)(_S6 * _S12);
            if (v337 < v317) {
              float v338 = v317;
            }
          }
          float v339 = (float)((float)(v318 + (float)(_S1 * v415)) + (float)(_S2 * v414)) + (float)(_S6 * v413);
          *float v90 = llroundf(v338);
          float v340 = v266;
          if (v339 <= v266)
          {
            float v340 = v339;
            if (v339 < v317) {
              float v340 = v317;
            }
          }
          v90[1] = llroundf(v340);
          v90 += 2;
        }
        __asm
        {
          FCVT            S1, H21
          FCVT            S2, H24
          FCVT            S0, H0
        }
        float v343 = (float)((float)((float)(v396 * _S2) + (float)(_S5 * _S1)) + (float)(v372 * *(float *)_Q0.i32)) + v42;
        float v344 = v267;
        if (v343 <= v267)
        {
          float v344 = (float)((float)((float)(v396 * _S2) + (float)(_S5 * _S1)) + (float)(v372 * *(float *)_Q0.i32)) + v42;
          if (v343 < v42) {
            float v344 = v42;
          }
        }
        v93->i8[1] = llroundf(v344);
        if (v90)
        {
          float v345 = (float)((float)(v318 + (float)(_S1 * _S8)) + (float)(_S2 * v397)) + (float)(*(float *)_Q0.i32 * _S12);
          float v346 = v266;
          if (v345 <= v266)
          {
            float v346 = (float)((float)(v318 + (float)(_S1 * _S8)) + (float)(_S2 * v397)) + (float)(*(float *)_Q0.i32 * _S12);
            if (v345 < v317) {
              float v346 = v317;
            }
          }
          *(float *)_Q0.i32 = (float)((float)(v318 + (float)(_S1 * v415)) + (float)(_S2 * v414))
                            + (float)(*(float *)_Q0.i32 * v413);
          *float v90 = llroundf(v346);
          float v347 = v266;
          if (*(float *)_Q0.i32 <= v266)
          {
            float v347 = *(float *)_Q0.i32;
            if (*(float *)_Q0.i32 < v317) {
              float v347 = v317;
            }
          }
          v90[1] = llroundf(v347);
          v90 += 2;
        }
        v203 += 2;
        v202 += 2;
        float v66 = (int8x8_t *)((char *)v66 + 2);
        float v92 = (int8x8_t *)((char *)v92 + 2);
        result += 2;
        float v93 = (int8x8_t *)((char *)v93 + 2);
      }
      uint64_t v23 = v354;
      uint64_t v21 = v355;
      float v66 = (int8x8_t *)&v88[v355];
      v65 += v22;
      uint64_t result = &v89[v354];
      uint64_t v24 = v353;
      unsigned int v62 = &v356[v353];
      v9 += 2;
    }
    while (v13 > v9);
    if (v351 && v350)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v25, v39, v10);
        v39 += v348;
        v25 += v349;
        --v13;
      }
      while (v13);
    }
    else if (v350)
    {
      do
      {
        if (v10) {
          uint64_t result = (unsigned __int8 *)memset(v25, 255, v10);
        }
        v25 += v349;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Tone_Mat_TRC_444vf_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    size_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    uint64_t v13 = *(void *)((char *)result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (void *)result[16];
    uint64_t v17 = result[15] + 2 * (result[13] * a2 / v7);
    uint64_t v18 = result[19];
    uint64_t v19 = (uint64_t *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    unsigned int v26 = (char *)(v25 + v24 * v13 + v12);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + v15);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    float v33 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v34 = (float)LODWORD(a5);
    float v35 = v32 * *(float *)v18;
    float v241 = v32 * *(float *)(v18 + 16);
    float v242 = v32 * *(float *)(v18 + 8);
    float v36 = v32 * *(float *)(v18 + 20);
    *(float *)&unsigned int v37 = v32 * *(float *)(v18 + 28);
    float v239 = *(float *)&v37;
    float v240 = v36;
    LOWORD(v37) = *(_WORD *)(v18 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v18 + 152);
    float v42 = (float)v37;
    float v43 = *(float *)(v18 + 40);
    float v44 = *(float *)(v18 + 44);
    float v45 = *(float *)(v18 + 52);
    float v46 = *(float *)(v18 + 56);
    float v47 = *(float *)(v18 + 64);
    float v237 = *(float *)(v18 + 76);
    float v238 = *(float *)(v18 + 72);
    float v235 = *(float *)(v18 + 84);
    float v236 = *(float *)(v18 + 80);
    float v234 = *(float *)(v18 + 88);
    float v232 = *(float *)(v18 + 92);
    float v230 = *(float *)(v18 + 96);
    float v227 = *(float *)(v18 + 104);
    float v228 = *(float *)(v18 + 100);
    uint64_t v48 = v18 + 164;
    uint64_t v49 = v16[1];
    float v50 = (unsigned char *)(*v16 + v27 * v17 + v15);
    float v51 = (unsigned char *)(v49 + v28 * v17 + v15);
    uint64_t v52 = v18 + 16548;
    if (v49) {
      short float v53 = v51;
    }
    else {
      short float v53 = 0;
    }
    uint64_t v54 = *v19;
    uint64_t v55 = v19[1];
    uint64_t v56 = v54 + v22 * v13;
    if (v13 >= 0) {
      uint64_t v57 = v13;
    }
    else {
      uint64_t v57 = v13 + 1;
    }
    uint64_t v58 = v55 + v23 * (v57 >> 1);
    uint64_t result = (void *)(v18 + 32932);
    uint64_t v59 = (unsigned char *)(v56 + v12);
    uint64_t v60 = v58 + v12;
    float v61 = *(float *)(v18 + 108);
    float v62 = *(float *)(v18 + 112);
    _S1 = *(float *)(v18 + 120);
    float v225 = _S1;
    float v226 = *(float *)(v18 + 116);
    float v223 = v39;
    float v224 = (float)LODWORD(a5);
    float v221 = *(float *)(v18 + 68);
    float v222 = *(float *)(v18 + 60);
    float v233 = v41;
    float v231 = *(float *)(v18 + 36);
    float v229 = *(float *)(v18 + 48);
    float v219 = v33;
    float v220 = v35;
    float v217 = v62;
    float v218 = v61;
    do
    {
      uint64_t v64 = &v59[v22];
      float v65 = &v53[v28];
      float v66 = &v50[v27];
      if (v11)
      {
        size_t v67 = 0;
        float v68 = &v59[v22];
        float v69 = &v53[v28];
        float v70 = &v50[v27];
        do
        {
          LOBYTE(_S1) = *(unsigned char *)(v60 + v67 + 1);
          float v71 = (float)LODWORD(_S1) - v34;
          unsigned int v72 = LODWORD(v242);
          float v73 = v242 * v71;
          LOBYTE(v72) = *v59;
          float v74 = v35 * (float)((float)v72 - v33);
          float v75 = (float)(v242 * v71) + v74;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = (float)(v242 * v71) + v74;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          LOBYTE(v75) = *(unsigned char *)(v60 + v67);
          float v77 = (float)LODWORD(v75) - v34;
          float v78 = (float)(v240 * v71) + (float)(v77 * v241);
          float v79 = 8191.0;
          if ((float)(v74 + v78) <= 8191.0)
          {
            float v79 = v74 + v78;
            if ((float)(v74 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v239 * v77;
          float v81 = (float)(v239 * v77) + v74;
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          LOBYTE(v81) = v59[1];
          float v83 = v35 * (float)((float)LODWORD(v81) - v33);
          float v84 = 8191.0;
          if ((float)(v73 + v83) <= 8191.0)
          {
            float v84 = v73 + v83;
            if ((float)(v73 + v83) < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = 8191.0;
          if ((float)(v78 + v83) <= 8191.0)
          {
            float v85 = v78 + v83;
            if ((float)(v78 + v83) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v80 + v83;
          BOOL v87 = (float)(v80 + v83) <= 8191.0;
          float v88 = 8191.0;
          if (v87)
          {
            float v88 = v86;
            if (v86 < 0.0) {
              float v88 = 0.0;
            }
          }
          LOBYTE(v86) = *v68;
          float v89 = v35 * (float)((float)LODWORD(v86) - v33);
          float v90 = 8191.0;
          if ((float)(v73 + v89) <= 8191.0)
          {
            float v90 = v73 + v89;
            if ((float)(v73 + v89) < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = 8191.0;
          if ((float)(v78 + v89) <= 8191.0)
          {
            float v91 = v78 + v89;
            if ((float)(v78 + v89) < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v80 + v89;
          BOOL v87 = (float)(v80 + v89) <= 8191.0;
          float v93 = 8191.0;
          if (v87)
          {
            float v93 = v92;
            if (v92 < 0.0) {
              float v93 = 0.0;
            }
          }
          LOBYTE(v5) = v68[1];
          float v94 = v35 * (float)((float)LODWORD(v5) - v33);
          float v95 = v73 + v94;
          BOOL v87 = (float)(v73 + v94) <= 8191.0;
          float v96 = 8191.0;
          if (v87)
          {
            float v96 = v95;
            if (v95 < 0.0) {
              float v96 = 0.0;
            }
          }
          float v97 = v78 + v94;
          BOOL v87 = (float)(v78 + v94) <= 8191.0;
          float v98 = 8191.0;
          if (v87)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          float v99 = v80 + v94;
          float v100 = 8191.0;
          if (v99 <= 8191.0)
          {
            float v100 = v99;
            if (v99 < 0.0) {
              float v100 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H27 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v93, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v96, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v48 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          float v120 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v121 = (float)((float)((float)(v62 * _S24) + (float)(v61 * _S2)) + (float)(v226 * _S25))
               + (float)(v225 * v120);
          float v122 = 8191.0;
          if (v121 <= 8191.0)
          {
            float v122 = (float)((float)((float)(v62 * _S24) + (float)(v61 * _S2)) + (float)(v226 * _S25))
                 + (float)(v225 * v120);
            if (v121 < 0.0) {
              float v122 = 0.0;
            }
          }
          __asm
          {
            FCVT            S1, H27
            FCVT            S3, H19
            FCVT            S19, H8
          }
          _H27 = *(_WORD *)(v52 + 2 * llroundf(v122));
          float v127 = (float)((float)((float)(v62 * _S3) + (float)(v61 * _S1)) + (float)(v226 * _S19))
               + (float)(v225 * fmaxf(_S1, fmaxf(_S3, _S19)));
          float v128 = 8191.0;
          if (v127 <= 8191.0)
          {
            float v128 = v127;
            if (v127 < 0.0) {
              float v128 = 0.0;
            }
          }
          float v129 = v44;
          __asm
          {
            FCVT            S28, H29
            FCVT            S23, H23
            FCVT            S29, H30
          }
          _H30 = *(_WORD *)(v52 + 2 * llroundf(v128));
          float v134 = (float)((float)((float)(v62 * _S23) + (float)(v61 * _S28)) + (float)(v226 * _S29))
               + (float)(v225 * fmaxf(_S28, fmaxf(_S23, _S29)));
          float v135 = 8191.0;
          if (v134 <= 8191.0)
          {
            float v135 = v134;
            if (v134 < 0.0) {
              float v135 = 0.0;
            }
          }
          float v136 = v43;
          __asm
          {
            FCVT            S21, H21
            FCVT            S22, H22
            FCVT            S26, H26
          }
          _H31 = *(_WORD *)(v52 + 2 * llroundf(v135));
          float v141 = (float)((float)((float)(v62 * _S22) + (float)(v61 * _S21)) + (float)(v226 * _S26))
               + (float)(v225 * fmaxf(_S21, fmaxf(_S22, _S26)));
          float v142 = 8191.0;
          if (v141 <= 8191.0)
          {
            float v142 = v141;
            if (v141 < 0.0) {
              float v142 = 0.0;
            }
          }
          __asm { FCVT            S27, H27 }
          float v144 = _S2 * _S27;
          float v145 = _S24 * _S27;
          float v146 = _S25 * _S27;
          __asm { FCVT            S27, H30 }
          _S1 = _S1 * _S27;
          float v149 = _S3 * _S27;
          float v150 = _S19 * _S27;
          __asm { FCVT            S27, H31 }
          float v152 = _S28 * _S27;
          float v153 = _S23 * _S27;
          float v154 = _S29 * _S27;
          _H29 = *(_WORD *)(v52 + 2 * llroundf(v142));
          __asm { FCVT            S29, H29 }
          float v157 = _S21 * _S29;
          float v158 = _S22 * _S29;
          float v159 = _S26 * _S29;
          float v160 = (float)((float)(v237 * v145) + (float)(v144 * v238)) + (float)(v146 * v236);
          float v161 = (float)((float)(v234 * v145) + (float)(v144 * v235)) + (float)(v146 * v232);
          float v162 = (float)((float)(v228 * v145) + (float)(v144 * v230)) + (float)(v146 * v227);
          float v163 = (float)((float)(v237 * v149) + (float)(_S1 * v238)) + (float)(v150 * v236);
          float v164 = (float)((float)(v234 * v149) + (float)(_S1 * v235)) + (float)(v150 * v232);
          float v165 = (float)((float)(v228 * v149) + (float)(_S1 * v230)) + (float)(v150 * v227);
          float v166 = (float)((float)(v237 * v153) + (float)(v152 * v238)) + (float)(v154 * v236);
          float v167 = (float)((float)(v234 * v153) + (float)(v152 * v235)) + (float)(v154 * v232);
          float v168 = (float)((float)(v228 * v153) + (float)(v152 * v230)) + (float)(v154 * v227);
          float v169 = (float)((float)(v237 * v158) + (float)(v157 * v238)) + (float)(v159 * v236);
          float v170 = (float)((float)(v234 * v158) + (float)(v157 * v235)) + (float)(v159 * v232);
          float v171 = (float)((float)(v228 * v158) + (float)(v157 * v230)) + (float)(v159 * v227);
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          __asm { FCVT            S21, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          __asm { FCVT            S22, H1 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *((_WORD *)result + llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          _H3 = *((_WORD *)result + llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          _H19 = *((_WORD *)result + llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          _H27 = *((_WORD *)result + llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          _H28 = *((_WORD *)result + llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          float v43 = v136;
          float v184 = (float)(v136 * _S22) + (float)(v231 * _S21);
          float v44 = v129;
          float v185 = (float)(v184 + (float)(v129 * _S29)) + v38;
          float v5 = v40;
          if (v185 <= v40)
          {
            float v5 = v185;
            if (v185 < v38) {
              float v5 = v38;
            }
          }
          unsigned char *v50 = llroundf(v5);
          if (v53)
          {
            float v186 = v223;
            float v187 = (float)((float)(v223 + (float)(_S21 * v229)) + (float)(_S22 * v45)) + (float)(_S29 * v46);
            float v5 = v42;
            if (v187 <= v42)
            {
              float v5 = (float)((float)(v223 + (float)(_S21 * v229)) + (float)(_S22 * v45)) + (float)(_S29 * v46);
              if (v187 < v233) {
                float v5 = v233;
              }
            }
            float v188 = v222;
            float v35 = v220;
            float v189 = (float)((float)(v223 + (float)(_S21 * v222)) + (float)(_S22 * v47)) + (float)(_S29 * v221);
            float v190 = v221;
            *short float v53 = llroundf(v5);
            float v191 = v42;
            float v61 = v218;
            float v33 = v219;
            float v62 = v217;
            if (v189 <= v42)
            {
              float v191 = v189;
              if (v189 < v233) {
                float v191 = v233;
              }
            }
            v53[1] = llroundf(v191);
            v53 += 2;
          }
          else
          {
            float v33 = v219;
            float v35 = v220;
            float v188 = v222;
            float v186 = v223;
            float v190 = v221;
            float v62 = v217;
            float v61 = v218;
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S3, H3
            FCVT            S19, H19
          }
          float v195 = (float)((float)((float)(v43 * _S3) + (float)(v231 * _S1)) + (float)(v129 * _S19)) + v38;
          float v196 = v40;
          if (v195 <= v40)
          {
            float v196 = (float)((float)((float)(v43 * _S3) + (float)(v231 * _S1)) + (float)(v129 * _S19)) + v38;
            if (v195 < v38) {
              float v196 = v38;
            }
          }
          v50[1] = llroundf(v196);
          if (v53)
          {
            float v197 = (float)((float)(v186 + (float)(_S1 * v229)) + (float)(_S3 * v45)) + (float)(_S19 * v46);
            float v198 = v42;
            if (v197 <= v42)
            {
              float v198 = (float)((float)(v186 + (float)(_S1 * v229)) + (float)(_S3 * v45)) + (float)(_S19 * v46);
              if (v197 < v233) {
                float v198 = v233;
              }
            }
            float v199 = (float)((float)(v186 + (float)(_S1 * v188)) + (float)(_S3 * v47)) + (float)(_S19 * v190);
            *short float v53 = llroundf(v198);
            float v200 = v42;
            if (v199 <= v42)
            {
              float v200 = v199;
              if (v199 < v233) {
                float v200 = v233;
              }
            }
            v53[1] = llroundf(v200);
            v53 += 2;
          }
          __asm
          {
            FCVT            S1, H26
            FCVT            S3, H27
            FCVT            S19, H28
          }
          float v204 = (float)((float)((float)(v43 * _S3) + (float)(v231 * _S1)) + (float)(v129 * _S19)) + v38;
          float v205 = v40;
          if (v204 <= v40)
          {
            float v205 = (float)((float)((float)(v43 * _S3) + (float)(v231 * _S1)) + (float)(v129 * _S19)) + v38;
            if (v204 < v38) {
              float v205 = v38;
            }
          }
          unsigned char *v70 = llroundf(v205);
          if (v69)
          {
            float v206 = (float)((float)(v186 + (float)(_S1 * v229)) + (float)(_S3 * v45)) + (float)(_S19 * v46);
            float v207 = v42;
            if (v206 <= v42)
            {
              float v207 = (float)((float)(v186 + (float)(_S1 * v229)) + (float)(_S3 * v45)) + (float)(_S19 * v46);
              if (v206 < v233) {
                float v207 = v233;
              }
            }
            float v208 = (float)((float)(v186 + (float)(_S1 * v188)) + (float)(_S3 * v47)) + (float)(_S19 * v190);
            *float v69 = llroundf(v207);
            float v209 = v42;
            if (v208 <= v42)
            {
              float v209 = v208;
              if (v208 < v233) {
                float v209 = v233;
              }
            }
            v69[1] = llroundf(v209);
            v69 += 2;
          }
          __asm
          {
            FCVT            S1, H2
            FCVT            S2, H24
            FCVT            S3, H25
          }
          float v212 = (float)((float)((float)(v43 * _S2) + (float)(v231 * _S1)) + (float)(v129 * _S3)) + v38;
          float v213 = v40;
          if (v212 <= v40)
          {
            float v213 = (float)((float)((float)(v43 * _S2) + (float)(v231 * _S1)) + (float)(v129 * _S3)) + v38;
            if (v212 < v38) {
              float v213 = v38;
            }
          }
          v70[1] = llroundf(v213);
          if (v69)
          {
            float v214 = (float)((float)(v186 + (float)(_S1 * v229)) + (float)(_S2 * v45)) + (float)(_S3 * v46);
            float v215 = v42;
            if (v214 <= v42)
            {
              float v215 = (float)((float)(v186 + (float)(_S1 * v229)) + (float)(_S2 * v45)) + (float)(_S3 * v46);
              if (v214 < v233) {
                float v215 = v233;
              }
            }
            _S1 = (float)((float)(v186 + (float)(_S1 * v188)) + (float)(_S2 * v47)) + (float)(_S3 * v190);
            *float v69 = llroundf(v215);
            float v216 = v42;
            float v34 = v224;
            if (_S1 <= v42)
            {
              float v216 = _S1;
              if (_S1 < v233) {
                float v216 = v233;
              }
            }
            v69[1] = llroundf(v216);
            v69 += 2;
          }
          else
          {
            float v34 = v224;
          }
          v59 += 2;
          v68 += 2;
          v50 += 2;
          v70 += 2;
          v67 += 2;
        }
        while (v11 > v67);
      }
      uint64_t v59 = &v64[v22];
      v60 += v23;
      float v50 = &v66[v27];
      short float v53 = &v65[v28];
      v10 += 2;
    }
    while (v14 > v10);
    if (v25 && v30)
    {
      do
      {
        uint64_t result = memcpy(v31, v26, v11);
        v26 += v24;
        v31 += v29;
        --v14;
      }
      while (v14);
    }
    else if (v30)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v31, 255, v11);
        }
        v31 += v29;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_444vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_444vf_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Mat_TRC_444vf_neon_fp16_GCD(void *result, uint64_t a2, double a3, int16x4_t a4, double a5, float32x4_t a6)
{
  uint64_t v7 = *(void *)((char *)result + 28);
  unint64_t v8 = 2 * *(unsigned __int8 *)result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    size_t v12 = *(void *)((char *)result + 20);
    uint64_t v13 = *(void *)((char *)result + 36);
    uint64_t v14 = *(void *)((char *)result + 44) + 2 * v9;
    unint64_t v15 = 2 * v10 - 2 * v9;
    uint64_t v16 = result[14];
    uint64_t v17 = (void *)result[16];
    uint64_t v18 = result[15] + 2 * (result[13] * a2 / v8);
    uint64_t v19 = (float32x2_t *)result[19];
    uint64_t v20 = (void *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v288 = v21[2];
    uint64_t v291 = v20[2];
    uint64_t v25 = *v22;
    uint64_t v26 = v22[1];
    uint64_t v289 = v22[2];
    uint64_t v290 = v17[2];
    uint64_t v27 = (char *)(v290 + v289 * v18 + v16);
    unsigned int v28 = v19[17].u16[2];
    unsigned int v29 = v19[17].u16[3];
    a4.i32[0] = v19->i32[0];
    v30.i32[0] = v19[3].i32[1];
    unsigned int v31 = v19[18].u16[0];
    unsigned int v32 = v19[18].u16[1];
    unsigned int v33 = v19[18].u16[2];
    unsigned int v34 = v19[18].u16[3];
    unsigned int v35 = v19[19].u16[0];
    _S23 = v19[4].f32[1];
    _S29 = v19[5].f32[0];
    _S30 = v19[5].f32[1];
    _S26 = v19[6].f32[0];
    _S8 = v19[6].i32[1];
    _S9 = v19[7].f32[0];
    _S15 = v19[7].i32[1];
    _S10 = v19[8].i32[0];
    _S21 = v19[8].i32[1];
    _S4 = v19[9].i32[0];
    float v46 = (char *)&v19[20] + 4;
    float v47 = (char *)(v291 + v288 * v14 + v13);
    float v48 = (float)v28;
    *(float *)&a3 = 8191.0 / (float)v19[16].u32[0];
    _S24 = *(float *)&a3 * v19->f32[0];
    float v50 = (float)v32;
    float v51 = (float)v33;
    float v52 = (float)v35;
    *(short float *)a4.i16 = (short float)v28;
    short float v53 = (char *)&v19[2068] + 4;
    float16x8_t v328 = (float16x8_t)vdupq_lane_s16(a4, 0);
    v30.i32[1] = v19[1].i32[0];
    *(float32x2_t *)a6.f32 = vmul_n_f32(v30, *(float *)&a3);
    *(double *)&v55.i64[1] = a3;
    short float v54 = -(short float)v29;
    *(float32x2_t *)v55.f32 = vmul_n_f32(v19[2], *(float *)&a3);
    float16x8_t v326 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a6), 0);
    float16x8_t v323 = vmulq_n_f16(v326, v54);
    float16x8_t v324 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v55), 0);
    float16x8_t v56 = vmulq_n_f16(v324, v54);
    float16x8_t v322 = v56;
    *(short float *)v56.i16 = (short float)v31;
    int16x8_t v57 = vdupq_lane_s16(*(int16x4_t *)v56.i8, 0);
    float16x8_t v344 = (float16x8_t)v57;
    *(short float *)v57.i16 = (short float)v32;
    int16x8_t v58 = vdupq_lane_s16(*(int16x4_t *)v57.i8, 0);
    float16x8_t v338 = (float16x8_t)v58;
    *(short float *)v58.i16 = (short float)v33;
    int16x8_t v59 = vdupq_lane_s16(*(int16x4_t *)v58.i8, 0);
    float16x8_t v343 = (float16x8_t)v59;
    *(short float *)v59.i16 = (short float)v34;
    int16x8_t v60 = vdupq_lane_s16(*(int16x4_t *)v59.i8, 0);
    *(short float *)v59.i16 = (short float)v35;
    float16x8_t v336 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v59.i8, 0);
    float16x8_t v337 = (float16x8_t)v60;
    uint64_t v61 = v17[1];
    if (v61) {
      float v62 = (char *)(v61 + v26 * v18 + v16);
    }
    else {
      float v62 = 0;
    }
    uint64_t v63 = (int8x8_t *)(*v17 + v25 * v18 + v16);
    if (v14 >= 0) {
      uint64_t v64 = v14;
    }
    else {
      uint64_t v64 = v14 + 1;
    }
    uint64_t result = (void *)(v20[1] + v24 * (v64 >> 1) + v13);
    float v65 = (int8x8_t *)(*v20 + v23 * v14 + v13);
    __asm { FCVT            H11, S24 }
    short float v315 = _H11;
    __asm { FCVT            H11, S23 }
    short float v342 = _H11;
    __asm { FCVT            H11, S29 }
    short float v341 = _H11;
    __asm { FCVT            H11, S30 }
    short float v340 = _H11;
    __asm { FCVT            H11, S26 }
    short float v335 = _H11;
    __asm { FCVT            H11, S8 }
    short float v334 = _H11;
    __asm { FCVT            H11, S9 }
    short float v333 = _H11;
    __asm { FCVT            H11, S15 }
    short float v332 = _H11;
    __asm { FCVT            H11, S10 }
    short float v331 = _H11;
    __asm { FCVT            H11, S21 }
    short float v330 = _H11;
    float v329 = v19[9].f32[0];
    __asm { FCVT            H4, S4 }
    float v321 = v19[9].f32[1];
    __asm { FCVT            H0, S0 }
    short float v313 = _H0;
    short float v314 = _H4;
    float v320 = v19[10].f32[0];
    __asm { FCVT            H1, S1 }
    short float v309 = _H1;
    float v319 = v19[10].f32[1];
    __asm { FCVT            H1, S5 }
    short float v308 = _H1;
    float v318 = v19[11].f32[0];
    __asm { FCVT            H1, S6 }
    short float v307 = _H1;
    float v317 = v19[11].f32[1];
    __asm { FCVT            H1, S7 }
    short float v306 = _H1;
    float v316 = v19[12].f32[0];
    __asm { FCVT            H1, S16 }
    float v312 = v19[12].f32[1];
    __asm { FCVT            H0, S0 }
    short float v304 = _H0;
    short float v305 = _H1;
    float v310 = v19[13].f32[0];
    __asm { FCVT            H0, S4 }
    float v89 = (float)v29;
    short float v303 = _H0;
    float v327 = a6.f32[0];
    _Q0.i32[0] = v55.i32[1];
    float v301 = v55.f32[1];
    float v325 = v55.f32[0];
    float v302 = a6.f32[1];
    uint64_t v292 = v22[1];
    float v339 = (float)v29;
    float v298 = v19[8].f32[1];
    float v299 = v19[7].f32[1];
    float v296 = v19[8].f32[0];
    float v297 = (float)v34;
    float v294 = (float)v28;
    float v295 = _S24;
    float v311 = v19[6].f32[1];
    float v300 = (float)v31;
    float32_t v293 = v19[6].f32[0];
    do
    {
      float v91 = (char *)v65 + v23;
      float v92 = (char *)v63 + v25;
      float v93 = &v62[v26];
      if ((int)v12 < 8)
      {
        size_t v176 = 0;
        float v97 = &v62[v26];
        float v96 = (int8x8_t *)((char *)v63 + v25);
        uint64_t v175 = result;
        float v95 = (int8x8_t *)((char *)v65 + v23);
      }
      else
      {
        uint64_t v94 = 0;
        float v95 = (int8x8_t *)((char *)v65 + v23);
        float v96 = (int8x8_t *)((char *)v63 + v25);
        float v97 = &v62[v26];
        do
        {
          int8x8_t v98 = (int8x8_t)result[v94];
          *(int8x8_t *)v99.i8 = vzip1_s8(v98, 0);
          v99.u64[1] = (unint64_t)vzip2_s8(v98, 0);
          float16x8_t v100 = vcvtq_f16_u16(v99);
          int8x16_t v101 = (int8x16_t)vmlaq_f16(v323, v326, v100);
          int8x16_t v102 = (int8x16_t)vmlaq_f16(v322, v324, v100);
          v100.i64[0] = vextq_s8(v101, v101, 8uLL).u64[0];
          *(int16x4_t *)v103.i8 = vuzp1_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
          *(int16x4_t *)v100.i8 = vuzp2_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
          v100.i64[1] = v100.i64[0];
          float16x8_t v104 = (float16x8_t)vzip1q_s16((int16x8_t)v100, (int16x8_t)v100);
          v103.i64[1] = v100.i64[0];
          float16x8_t v105 = (float16x8_t)vzip1q_s16(v103, v103);
          v100.i64[0] = vextq_s8(v102, v102, 8uLL).u64[0];
          *(float16x4_t *)v100.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v100.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v100.i8));
          v100.i64[1] = v100.i64[0];
          int8x8_t v106 = *v65++;
          *(int8x8_t *)v102.i8 = vzip1_s8(v106, 0);
          v102.u64[1] = (unint64_t)vzip2_s8(v106, 0);
          float16x8_t v107 = (float16x8_t)vzip1q_s16((int16x8_t)v100, (int16x8_t)v100);
          float16x8_t v108 = vcvtq_f16_u16((uint16x8_t)v102);
          int8x8_t v109 = *v95++;
          *(int8x8_t *)v102.i8 = vzip1_s8(v109, 0);
          v102.u64[1] = (unint64_t)vzip2_s8(v109, 0);
          float16x8_t v110 = vcvtq_f16_u16((uint16x8_t)v102);
          float16x8_t v111 = vsubq_f16(v108, v328);
          float16x8_t v112 = vsubq_f16(v110, v328);
          float16x8_t v113 = vmlaq_n_f16(v104, v111, v315);
          float16x8_t v114 = vmlaq_n_f16(v104, v112, v315);
          float16x8_t v115 = vmlaq_n_f16(v107, v111, v315);
          float16x8_t v116 = vmlaq_n_f16(v107, v112, v315);
          float16x8_t v117 = vmlaq_n_f16(v105, v111, v315);
          float16x8_t v118 = vmlaq_n_f16(v105, v112, v315);
          v119.i64[0] = 0x9000900090009000;
          v119.i64[1] = 0x9000900090009000;
          uint16x8_t v120 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v119));
          uint32x4_t v121 = vmovl_high_u16(v120);
          uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v120.i8);
          v113.i16[0] = *(_WORD *)&v46[2 * v122.u32[0]];
          v113.i16[1] = *(_WORD *)&v46[2 * v122.u32[1]];
          v113.i16[2] = *(_WORD *)&v46[2 * v122.u32[2]];
          v113.i16[3] = *(_WORD *)&v46[2 * v122.u32[3]];
          v113.i16[4] = *(_WORD *)&v46[2 * v121.u32[0]];
          v113.i16[5] = *(_WORD *)&v46[2 * v121.u32[1]];
          v113.i16[6] = *(_WORD *)&v46[2 * v121.u32[2]];
          v113.i16[7] = *(_WORD *)&v46[2 * v121.u32[3]];
          uint16x8_t v123 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v119));
          uint32x4_t v124 = vmovl_high_u16(v123);
          uint32x4_t v125 = vmovl_u16(*(uint16x4_t *)v123.i8);
          v115.i16[0] = *(_WORD *)&v46[2 * v125.u32[0]];
          v115.i16[1] = *(_WORD *)&v46[2 * v125.u32[1]];
          v115.i16[2] = *(_WORD *)&v46[2 * v125.u32[2]];
          v115.i16[3] = *(_WORD *)&v46[2 * v125.u32[3]];
          v115.i16[4] = *(_WORD *)&v46[2 * v124.u32[0]];
          v115.i16[5] = *(_WORD *)&v46[2 * v124.u32[1]];
          v115.i16[6] = *(_WORD *)&v46[2 * v124.u32[2]];
          v115.i16[7] = *(_WORD *)&v46[2 * v124.u32[3]];
          uint16x8_t v126 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), v119));
          uint32x4_t v127 = vmovl_high_u16(v126);
          uint32x4_t v128 = vmovl_u16(*(uint16x4_t *)v126.i8);
          v129.i16[0] = *(_WORD *)&v46[2 * v128.u32[0]];
          v129.i16[1] = *(_WORD *)&v46[2 * v128.u32[1]];
          v129.i16[2] = *(_WORD *)&v46[2 * v128.u32[2]];
          v129.i16[3] = *(_WORD *)&v46[2 * v128.u32[3]];
          v129.i16[4] = *(_WORD *)&v46[2 * v127.u32[0]];
          v129.i16[5] = *(_WORD *)&v46[2 * v127.u32[1]];
          v129.i16[6] = *(_WORD *)&v46[2 * v127.u32[2]];
          v129.i16[7] = *(_WORD *)&v46[2 * v127.u32[3]];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v119));
          uint32x4_t v131 = vmovl_high_u16(v130);
          uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v130.i8);
          v133.i16[0] = *(_WORD *)&v46[2 * v132.u32[0]];
          v133.i16[1] = *(_WORD *)&v46[2 * v132.u32[1]];
          v133.i16[2] = *(_WORD *)&v46[2 * v132.u32[2]];
          v133.i16[3] = *(_WORD *)&v46[2 * v132.u32[3]];
          v133.i16[4] = *(_WORD *)&v46[2 * v131.u32[0]];
          v133.i16[5] = *(_WORD *)&v46[2 * v131.u32[1]];
          v133.i16[6] = *(_WORD *)&v46[2 * v131.u32[2]];
          v133.i16[7] = *(_WORD *)&v46[2 * v131.u32[3]];
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v119));
          float16x8_t v135 = (float16x8_t)vmovl_high_u16(v134);
          *(void *)&long long v136 = v135.u32[2];
          *((void *)&v136 + 1) = v135.u32[3];
          long long v137 = v136;
          *(void *)&long long v136 = v135.u32[0];
          *((void *)&v136 + 1) = v135.u32[1];
          uint32x4_t v138 = vmovl_u16(*(uint16x4_t *)v134.i8);
          v135.i16[0] = *(_WORD *)&v46[2 * v138.u32[0]];
          v135.i16[1] = *(_WORD *)&v46[2 * v138.u32[1]];
          v135.i16[2] = *(_WORD *)&v46[2 * v138.u32[2]];
          v135.i16[3] = *(_WORD *)&v46[2 * v138.u32[3]];
          v135.i16[4] = *(_WORD *)&v46[2 * v136];
          v135.i16[5] = *(_WORD *)&v46[2 * *((void *)&v136 + 1)];
          v135.i16[6] = *(_WORD *)&v46[2 * v137];
          v135.i16[7] = *(_WORD *)&v46[2 * *((void *)&v137 + 1)];
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v119));
          uint32x4_t v140 = vmovl_high_u16(v139);
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v139.i8);
          v142.i16[0] = *(_WORD *)&v46[2 * v141.u32[0]];
          v142.i16[1] = *(_WORD *)&v46[2 * v141.u32[1]];
          v142.i16[2] = *(_WORD *)&v46[2 * v141.u32[2]];
          v142.i16[3] = *(_WORD *)&v46[2 * v141.u32[3]];
          v142.i16[4] = *(_WORD *)&v46[2 * v140.u32[0]];
          v142.i16[5] = *(_WORD *)&v46[2 * v140.u32[1]];
          v142.i16[6] = *(_WORD *)&v46[2 * v140.u32[2]];
          v142.i16[7] = *(_WORD *)&v46[2 * v140.u32[3]];
          float16x8_t v143 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v113, v314), v115, v313), v129, v309);
          float16x8_t v144 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v113, v308), v115, v307), v129, v306);
          float16x8_t v6 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v129, v303), v115, v304), v113, v305);
          float16x8_t v145 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, v314), v135, v313), v142, v309);
          float16x8_t v146 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, v308), v135, v307), v142, v306);
          float16x8_t v147 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v142, v303), v135, v304), v133, v305);
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v143, (float16x8_t)0), v119));
          uint32x4_t v149 = vmovl_high_u16(v148);
          *(void *)&long long v136 = v149.u32[2];
          *((void *)&v136 + 1) = v149.u32[3];
          long long v150 = v136;
          *(void *)&long long v136 = v149.u32[0];
          *((void *)&v136 + 1) = v149.u32[1];
          uint32x4_t v151 = vmovl_u16(*(uint16x4_t *)v148.i8);
          v152.i16[0] = *(_WORD *)&v53[2 * v151.u32[0]];
          v152.i16[1] = *(_WORD *)&v53[2 * v151.u32[1]];
          v152.i16[2] = *(_WORD *)&v53[2 * v151.u32[2]];
          v152.i16[3] = *(_WORD *)&v53[2 * v151.u32[3]];
          v152.i16[4] = *(_WORD *)&v53[2 * v136];
          v152.i16[5] = *(_WORD *)&v53[2 * *((void *)&v136 + 1)];
          v152.i16[6] = *(_WORD *)&v53[2 * v150];
          v152.i16[7] = *(_WORD *)&v53[2 * *((void *)&v150 + 1)];
          uint16x8_t v153 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v144, (float16x8_t)0), v119));
          uint32x4_t v154 = vmovl_high_u16(v153);
          uint32x4_t v155 = vmovl_u16(*(uint16x4_t *)v153.i8);
          v156.i16[0] = *(_WORD *)&v53[2 * v155.u32[0]];
          v156.i16[1] = *(_WORD *)&v53[2 * v155.u32[1]];
          v156.i16[2] = *(_WORD *)&v53[2 * v155.u32[2]];
          v156.i16[3] = *(_WORD *)&v53[2 * v155.u32[3]];
          v156.i16[4] = *(_WORD *)&v53[2 * v154.u32[0]];
          v156.i16[5] = *(_WORD *)&v53[2 * v154.u32[1]];
          v156.i16[6] = *(_WORD *)&v53[2 * v154.u32[2]];
          v156.i16[7] = *(_WORD *)&v53[2 * v154.u32[3]];
          uint16x8_t v157 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v6, (float16x8_t)0), v119));
          uint32x4_t v158 = vmovl_high_u16(v157);
          uint32x4_t v159 = vmovl_u16(*(uint16x4_t *)v157.i8);
          v160.i16[0] = *(_WORD *)&v53[2 * v159.u32[0]];
          v160.i16[1] = *(_WORD *)&v53[2 * v159.u32[1]];
          v160.i16[2] = *(_WORD *)&v53[2 * v159.u32[2]];
          v160.i16[3] = *(_WORD *)&v53[2 * v159.u32[3]];
          v160.i16[4] = *(_WORD *)&v53[2 * v158.u32[0]];
          v160.i16[5] = *(_WORD *)&v53[2 * v158.u32[1]];
          v160.i16[6] = *(_WORD *)&v53[2 * v158.u32[2]];
          v160.i16[7] = *(_WORD *)&v53[2 * v158.u32[3]];
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v145, (float16x8_t)0), v119));
          uint32x4_t v162 = vmovl_high_u16(v161);
          uint32x4_t v163 = vmovl_u16(*(uint16x4_t *)v161.i8);
          v164.i16[0] = *(_WORD *)&v53[2 * v163.u32[0]];
          v164.i16[1] = *(_WORD *)&v53[2 * v163.u32[1]];
          v164.i16[2] = *(_WORD *)&v53[2 * v163.u32[2]];
          v164.i16[3] = *(_WORD *)&v53[2 * v163.u32[3]];
          v164.i16[4] = *(_WORD *)&v53[2 * v162.u32[0]];
          v164.i16[5] = *(_WORD *)&v53[2 * v162.u32[1]];
          v164.i16[6] = *(_WORD *)&v53[2 * v162.u32[2]];
          v164.i16[7] = *(_WORD *)&v53[2 * v162.u32[3]];
          uint16x8_t v165 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v146, (float16x8_t)0), v119));
          uint32x4_t v166 = vmovl_high_u16(v165);
          uint32x4_t v167 = vmovl_u16(*(uint16x4_t *)v165.i8);
          v168.i16[0] = *(_WORD *)&v53[2 * v167.u32[0]];
          v168.i16[1] = *(_WORD *)&v53[2 * v167.u32[1]];
          v168.i16[2] = *(_WORD *)&v53[2 * v167.u32[2]];
          v168.i16[3] = *(_WORD *)&v53[2 * v167.u32[3]];
          v168.i16[4] = *(_WORD *)&v53[2 * v166.u32[0]];
          v168.i16[5] = *(_WORD *)&v53[2 * v166.u32[1]];
          v168.i16[6] = *(_WORD *)&v53[2 * v166.u32[2]];
          v168.i16[7] = *(_WORD *)&v53[2 * v166.u32[3]];
          uint16x8_t v169 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v147, (float16x8_t)0), v119));
          uint32x4_t v170 = vmovl_high_u16(v169);
          uint32x4_t v171 = vmovl_u16(*(uint16x4_t *)v169.i8);
          _Q0.i16[0] = *(_WORD *)&v53[2 * v171.u32[0]];
          _Q0.i16[1] = *(_WORD *)&v53[2 * v171.u32[1]];
          _Q0.i16[2] = *(_WORD *)&v53[2 * v171.u32[2]];
          _Q0.i16[3] = *(_WORD *)&v53[2 * v171.u32[3]];
          _Q0.i16[4] = *(_WORD *)&v53[2 * v170.u32[0]];
          _Q0.i16[5] = *(_WORD *)&v53[2 * v170.u32[1]];
          _Q0.i16[6] = *(_WORD *)&v53[2 * v170.u32[2]];
          _Q0.i16[7] = *(_WORD *)&v53[2 * v170.u32[3]];
          *v63++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v344, v152, v342), v156, v341), v160, v340), v344), v343)));
          if (v62)
          {
            float16x8_t v172 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v338, v152, v332), v156, v331), v160, v330);
            v345.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v338, v152, v335), v156, v334), v160, v333), v337), v336), v337), v336)));
            v345.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(v172));
            vst2_s8(v62, v345);
            v62 += 16;
          }
          _S26 = v293;
          *v96++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v344, v164, v342), v168, v341), _Q0, v340), v344), v343)));
          if (v97)
          {
            float16x8_t v173 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v338, v164, v332), v168, v331), _Q0, v330);
            *(int8x8_t *)_Q0.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v338, v164, v335), v168, v334), _Q0, v333), v337), v336), v337), v336)));
            int8x8_t v174 = vmovn_s16((int16x8_t)vcvtq_u16_f16(v173));
            vst2_s8(v97, (int8x8x2_t)_Q0);
            v97 += 16;
          }
          float v89 = v339;
          ++v94;
        }
        while ((int)(v94 * 8) < (int)v12 - 7);
        uint64_t v175 = &result[v94];
        size_t v176 = v12 & 0xFFFFFFF8;
        uint64_t v26 = v292;
      }
      while (v12 > v176)
      {
        _Q0.i8[0] = v175[1];
        float v177 = (float)_Q0.u32[0] - v89;
        unsigned int v178 = LODWORD(v302);
        float v179 = v302 * v177;
        LOBYTE(v178) = v65->i8[0];
        float v180 = _S24 * (float)((float)v178 - v48);
        float v181 = (float)(v302 * v177) + v180;
        float v182 = 8191.0;
        if (v181 <= 8191.0)
        {
          float v182 = (float)(v302 * v177) + v180;
          if (v181 < 0.0) {
            float v182 = 0.0;
          }
        }
        LOBYTE(v181) = *v175;
        float v183 = (float)LODWORD(v181) - v89;
        float v184 = (float)(v301 * v177) + (float)(v183 * v325);
        float v185 = 8191.0;
        if ((float)(v180 + v184) <= 8191.0)
        {
          float v185 = v180 + v184;
          if ((float)(v180 + v184) < 0.0) {
            float v185 = 0.0;
          }
        }
        float v186 = v327 * v183;
        float v187 = (float)(v327 * v183) + v180;
        float v188 = 8191.0;
        if (v187 <= 8191.0)
        {
          float v188 = v187;
          if (v187 < 0.0) {
            float v188 = 0.0;
          }
        }
        LOBYTE(v187) = v65->i8[1];
        float v189 = _S24 * (float)((float)LODWORD(v187) - v48);
        float v190 = 8191.0;
        if ((float)(v179 + v189) <= 8191.0)
        {
          float v190 = v179 + v189;
          if ((float)(v179 + v189) < 0.0) {
            float v190 = 0.0;
          }
        }
        float v191 = 8191.0;
        if ((float)(v184 + v189) <= 8191.0)
        {
          float v191 = v184 + v189;
          if ((float)(v184 + v189) < 0.0) {
            float v191 = 0.0;
          }
        }
        float v192 = v186 + v189;
        BOOL v193 = (float)(v186 + v189) <= 8191.0;
        float v194 = 8191.0;
        if (v193)
        {
          float v194 = v192;
          if (v192 < 0.0) {
            float v194 = 0.0;
          }
        }
        LOBYTE(v192) = v95->i8[0];
        float v195 = _S24 * (float)((float)LODWORD(v192) - v48);
        float v196 = 8191.0;
        if ((float)(v179 + v195) <= 8191.0)
        {
          float v196 = v179 + v195;
          if ((float)(v179 + v195) < 0.0) {
            float v196 = 0.0;
          }
        }
        float v197 = 8191.0;
        if ((float)(v184 + v195) <= 8191.0)
        {
          float v197 = v184 + v195;
          if ((float)(v184 + v195) < 0.0) {
            float v197 = 0.0;
          }
        }
        float v198 = v186 + v195;
        BOOL v193 = (float)(v186 + v195) <= 8191.0;
        float v199 = 8191.0;
        if (v193)
        {
          float v199 = v198;
          if (v198 < 0.0) {
            float v199 = 0.0;
          }
        }
        v6.i8[0] = v95->i8[1];
        *(float *)v6.i32 = _S24 * (float)((float)v6.u32[0] - v48);
        float v200 = v179 + *(float *)v6.i32;
        BOOL v193 = (float)(v179 + *(float *)v6.i32) <= 8191.0;
        float v201 = 8191.0;
        if (v193)
        {
          float v201 = v200;
          if (v200 < 0.0) {
            float v201 = 0.0;
          }
        }
        float v202 = v184 + *(float *)v6.i32;
        BOOL v193 = (float)(v184 + *(float *)v6.i32) <= 8191.0;
        float v203 = 8191.0;
        if (v193)
        {
          float v203 = v202;
          if (v202 < 0.0) {
            float v203 = 0.0;
          }
        }
        float v204 = _S29;
        float v205 = v186 + *(float *)v6.i32;
        BOOL v193 = (float)(v186 + *(float *)v6.i32) <= 8191.0;
        float v206 = 8191.0;
        if (v193)
        {
          float v206 = v205;
          if (v205 < 0.0) {
            float v206 = 0.0;
          }
        }
        _H2 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v182, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H5 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v185, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        _H6 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v188, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        _H7 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v190, 0.0), 8191.0))];
        _H19 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v191, 0.0), 8191.0))];
        __asm
        {
          FCVT            S7, H7
          FCVT            S19, H19
        }
        _H0 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H1 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v196, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H21 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v197, 0.0), 8191.0))];
        __asm { FCVT            S21, H21 }
        _H17 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v199, 0.0), 8191.0))];
        __asm { FCVT            S17, H17 }
        _H16 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v201, 0.0), 8191.0))];
        _H25 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v203, 0.0), 8191.0))];
        __asm
        {
          FCVT            S16, H16
          FCVT            S25, H25
        }
        _H11 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0))];
        __asm { FCVT            S11, H11 }
        float v231 = (float)((float)(v321 * _S5) + (float)(_S2 * v329)) + (float)(_S6 * v320);
        float v232 = (float)((float)(v318 * _S5) + (float)(_S2 * v319)) + (float)(_S6 * v317);
        float v233 = (float)((float)(v312 * _S5) + (float)(_S2 * v316)) + (float)(_S6 * v310);
        float v234 = (float)((float)(v321 * _S19) + (float)(_S7 * v329)) + (float)(_S0 * v320);
        float v235 = (float)((float)(v318 * _S19) + (float)(_S7 * v319)) + (float)(_S0 * v317);
        float v236 = (float)((float)(v312 * _S19) + (float)(_S7 * v316)) + (float)(_S0 * v310);
        float v237 = (float)((float)(v321 * _S21) + (float)(_S1 * v329)) + (float)(_S17 * v320);
        float v238 = (float)((float)(v318 * _S21) + (float)(_S1 * v319)) + (float)(_S17 * v317);
        float v239 = (float)((float)(v312 * _S21) + (float)(_S1 * v316)) + (float)(_S17 * v310);
        float v240 = (float)((float)(v321 * _S25) + (float)(_S16 * v329)) + (float)(_S11 * v320);
        float v241 = (float)((float)(v318 * _S25) + (float)(_S16 * v319)) + (float)(_S11 * v317);
        float v242 = (float)((float)(v312 * _S25) + (float)(_S16 * v316)) + (float)(_S11 * v310);
        LOWORD(_S0) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v231, 0.0), 8191.0))];
        __asm { FCVT            S17, H0 }
        LOWORD(_S0) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v232, 0.0), 8191.0))];
        __asm { FCVT            S25, H0 }
        LOWORD(_S0) = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v233, 0.0), 8191.0))];
        __asm { FCVT            S11, H0 }
        _H0 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v234, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v235, 0.0), 8191.0))];
        _H2 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v236, 0.0), 8191.0))];
        _H16 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v237, 0.0), 8191.0))];
        _H13 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v238, 0.0), 8191.0))];
        _H14 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v239, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v240, 0.0), 8191.0))];
        _H6 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v241, 0.0), 8191.0))];
        _H7 = *(_WORD *)&v53[2 * llroundf(fminf(fmaxf(v242, 0.0), 8191.0))];
        _S29 = v204;
        float v255 = (float)((float)((float)(v204 * _S25) + (float)(_S23 * _S17)) + (float)(_S30 * _S11)) + v300;
        float v256 = v51;
        if (v255 <= v51)
        {
          float v256 = (float)((float)((float)(v204 * _S25) + (float)(_S23 * _S17)) + (float)(_S30 * _S11)) + v300;
          if (v255 < v300) {
            float v256 = v300;
          }
        }
        v63->i8[0] = llroundf(v256);
        if (v62)
        {
          float v257 = (float)((float)(v50 + (float)(_S17 * _S26)) + (float)(_S25 * v311)) + (float)(_S11 * _S9);
          float v258 = v52;
          float v259 = v297;
          if (v257 <= v52)
          {
            float v258 = (float)((float)(v50 + (float)(_S17 * _S26)) + (float)(_S25 * v311)) + (float)(_S11 * _S9);
            if (v257 < v297) {
              float v258 = v297;
            }
          }
          float v261 = v298;
          float v260 = v299;
          float v262 = v296;
          float v263 = (float)((float)(v50 + (float)(_S17 * v299)) + (float)(_S25 * v296)) + (float)(_S11 * v298);
          *float v62 = llroundf(v258);
          float v264 = v52;
          float v48 = v294;
          if (v263 <= v52)
          {
            float v264 = v263;
            if (v263 < v297) {
              float v264 = v297;
            }
          }
          v62[1] = llroundf(v264);
          v62 += 2;
          float v89 = v339;
          _S24 = v295;
        }
        else
        {
          float v261 = v298;
          float v260 = v299;
          _S24 = v295;
          float v262 = v296;
          float v48 = v294;
          float v89 = v339;
          float v259 = v297;
        }
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
          FCVT            S2, H2
        }
        *(float *)v6.i32 = (float)((float)((float)(_S29 * _S1) + (float)(_S23 * _S0)) + (float)(_S30 * _S2)) + v300;
        float v268 = v51;
        if (*(float *)v6.i32 <= v51)
        {
          float v268 = (float)((float)((float)(_S29 * _S1) + (float)(_S23 * _S0)) + (float)(_S30 * _S2)) + v300;
          if (*(float *)v6.i32 < v300) {
            float v268 = v300;
          }
        }
        v63->i8[1] = llroundf(v268);
        if (v62)
        {
          *(float *)v6.i32 = (float)((float)(v50 + (float)(_S0 * _S26)) + (float)(_S1 * v311)) + (float)(_S2 * _S9);
          float v269 = v52;
          if (*(float *)v6.i32 <= v52)
          {
            float v269 = (float)((float)(v50 + (float)(_S0 * _S26)) + (float)(_S1 * v311)) + (float)(_S2 * _S9);
            if (*(float *)v6.i32 < v259) {
              float v269 = v259;
            }
          }
          float v270 = (float)((float)(v50 + (float)(_S0 * v260)) + (float)(_S1 * v262)) + (float)(_S2 * v261);
          *float v62 = llroundf(v269);
          float v271 = v52;
          if (v270 <= v52)
          {
            float v271 = v270;
            if (v270 < v259) {
              float v271 = v259;
            }
          }
          v62[1] = llroundf(v271);
          v62 += 2;
        }
        __asm
        {
          FCVT            S0, H16
          FCVT            S1, H13
          FCVT            S2, H14
        }
        float v275 = (float)((float)((float)(_S29 * _S1) + (float)(_S23 * _S0)) + (float)(_S30 * _S2)) + v300;
        float v276 = v51;
        if (v275 <= v51)
        {
          float v276 = (float)((float)((float)(_S29 * _S1) + (float)(_S23 * _S0)) + (float)(_S30 * _S2)) + v300;
          if (v275 < v300) {
            float v276 = v300;
          }
        }
        v96->i8[0] = llroundf(v276);
        if (v97)
        {
          float v277 = (float)((float)(v50 + (float)(_S0 * _S26)) + (float)(_S1 * v311)) + (float)(_S2 * _S9);
          float v278 = v52;
          if (v277 <= v52)
          {
            float v278 = (float)((float)(v50 + (float)(_S0 * _S26)) + (float)(_S1 * v311)) + (float)(_S2 * _S9);
            if (v277 < v259) {
              float v278 = v259;
            }
          }
          float v279 = (float)((float)(v50 + (float)(_S0 * v260)) + (float)(_S1 * v262)) + (float)(_S2 * v261);
          *float v97 = llroundf(v278);
          float v280 = v52;
          if (v279 <= v52)
          {
            float v280 = v279;
            if (v279 < v259) {
              float v280 = v259;
            }
          }
          v97[1] = llroundf(v280);
          v97 += 2;
        }
        __asm
        {
          FCVT            S0, H5
          FCVT            S1, H6
          FCVT            S2, H7
        }
        float v283 = (float)((float)((float)(_S29 * _S1) + (float)(_S23 * *(float *)_Q0.i32)) + (float)(_S30 * _S2)) + v300;
        float v284 = v51;
        if (v283 <= v51)
        {
          float v284 = (float)((float)((float)(_S29 * _S1) + (float)(_S23 * *(float *)_Q0.i32)) + (float)(_S30 * _S2)) + v300;
          if (v283 < v300) {
            float v284 = v300;
          }
        }
        v96->i8[1] = llroundf(v284);
        if (v97)
        {
          float v285 = (float)((float)(v50 + (float)(*(float *)_Q0.i32 * _S26)) + (float)(_S1 * v311)) + (float)(_S2 * _S9);
          float v286 = v52;
          if (v285 <= v52)
          {
            float v286 = (float)((float)(v50 + (float)(*(float *)_Q0.i32 * _S26)) + (float)(_S1 * v311)) + (float)(_S2 * _S9);
            if (v285 < v259) {
              float v286 = v259;
            }
          }
          *(float *)_Q0.i32 = (float)((float)(v50 + (float)(*(float *)_Q0.i32 * v260)) + (float)(_S1 * v262))
                            + (float)(_S2 * v261);
          *float v97 = llroundf(v286);
          float v287 = v52;
          if (*(float *)_Q0.i32 <= v52)
          {
            float v287 = *(float *)_Q0.i32;
            if (*(float *)_Q0.i32 < v259) {
              float v287 = v259;
            }
          }
          v97[1] = llroundf(v287);
          v97 += 2;
        }
        v176 += 2;
        v175 += 2;
        float v65 = (int8x8_t *)((char *)v65 + 2);
        float v95 = (int8x8_t *)((char *)v95 + 2);
        uint64_t v63 = (int8x8_t *)((char *)v63 + 2);
        float v96 = (int8x8_t *)((char *)v96 + 2);
      }
      float v65 = (int8x8_t *)&v91[v23];
      uint64_t result = (void *)((char *)result + v24);
      uint64_t v63 = (int8x8_t *)&v92[v25];
      float v62 = &v93[v26];
      v11 += 2;
    }
    while (v15 > v11);
    if (v291 && v290)
    {
      do
      {
        uint64_t result = memcpy(v27, v47, v12);
        v47 += v288;
        v27 += v289;
        --v15;
      }
      while (v15);
    }
    else if (v290)
    {
      do
      {
        if (v12) {
          uint64_t result = memset(v27, 255, v12);
        }
        v27 += v289;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_444vf_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_444vf_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    size_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 36);
    uint64_t v12 = *(void *)(result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = *((void *)result + 14);
    uint64_t v15 = (void *)*((void *)result + 16);
    uint64_t v16 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v17 = *((void *)result + 19);
    uint64_t v18 = (void *)*((void *)result + 7);
    uint64_t v19 = (uint64_t *)*((void *)result + 8);
    uint64_t v20 = (uint64_t *)*((void *)result + 17);
    uint64_t v21 = *v19;
    uint64_t v22 = v19[1];
    uint64_t v23 = v19[2];
    uint64_t v24 = v18[2];
    uint64_t v25 = (char *)(v24 + v23 * v12 + v11);
    uint64_t v26 = *v20;
    uint64_t v27 = v20[1];
    uint64_t v28 = v20[2];
    uint64_t v29 = v15[2];
    uint64_t v30 = (char *)(v29 + v28 * v16 + v14);
    float v31 = 8191.0 / (float)*(unsigned int *)(v17 + 128);
    LOWORD(a5) = *(_WORD *)(v17 + 140);
    float v32 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v17 + 142);
    float v33 = (float)LODWORD(a5);
    float v34 = v31 * *(float *)v17;
    float v35 = *(float *)(v17 + 20);
    float v208 = v31 * *(float *)(v17 + 16);
    float v209 = v31 * *(float *)(v17 + 8);
    float v36 = v31 * v35;
    *(float *)&unsigned int v37 = v31 * *(float *)(v17 + 28);
    float v206 = *(float *)&v37;
    float v207 = v36;
    LOWORD(v37) = *(_WORD *)(v17 + 144);
    float v38 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 146);
    float v39 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 148);
    float v40 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 150);
    float v41 = (float)v37;
    LOWORD(v37) = *(_WORD *)(v17 + 152);
    float v42 = (float)v37;
    float v44 = *(float *)(v17 + 36);
    float v43 = *(float *)(v17 + 40);
    float v46 = *(float *)(v17 + 44);
    float v45 = *(float *)(v17 + 48);
    float v47 = *(float *)(v17 + 52);
    float v211 = *(float *)(v17 + 56);
    float v48 = *(float *)(v17 + 60);
    float v49 = *(float *)(v17 + 64);
    float v50 = *(float *)(v17 + 68);
    float v204 = *(float *)(v17 + 76);
    float v205 = *(float *)(v17 + 72);
    float v202 = *(float *)(v17 + 84);
    float v203 = *(float *)(v17 + 80);
    float v200 = *(float *)(v17 + 92);
    float v201 = *(float *)(v17 + 88);
    float v198 = *(float *)(v17 + 96);
    _S1 = *(float *)(v17 + 104);
    float v195 = _S1;
    float v196 = *(float *)(v17 + 100);
    uint64_t v52 = v15[1];
    short float v53 = (unsigned char *)(*v15 + v26 * v16 + v14);
    short float v54 = (unsigned char *)(v52 + v27 * v16 + v14);
    uint64_t v55 = v17 + 16548;
    uint64_t v56 = v17 + 164;
    if (v52) {
      int16x8_t v57 = v54;
    }
    else {
      int16x8_t v57 = 0;
    }
    uint64_t result = (unsigned __int8 *)(*v18 + v21 * v12 + v11);
    uint64_t v58 = v18[1] + v22 * (v12 / 2) + v11;
    float v193 = v48;
    float v194 = (float)LODWORD(a5);
    float v191 = v50;
    float v192 = v49;
    float v189 = v34;
    float v190 = v39;
    float v210 = v43;
    float v199 = v47;
    float v197 = v45;
    float v188 = v32;
    do
    {
      int16x8_t v59 = &result[v21];
      int16x8_t v60 = &v57[v27];
      uint64_t v61 = &v53[v26];
      if (v10)
      {
        size_t v62 = 0;
        uint64_t v63 = &result[v21];
        uint64_t v64 = &v57[v27];
        float v65 = &v53[v26];
        do
        {
          LOBYTE(_S1) = *(unsigned char *)(v58 + v62 + 1);
          float v66 = (float)LODWORD(_S1) - v33;
          unsigned int v67 = LODWORD(v209);
          float v68 = v209 * v66;
          LOBYTE(v67) = *result;
          float v69 = v34 * (float)((float)v67 - v32);
          float v70 = (float)(v209 * v66) + v69;
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = (float)(v209 * v66) + v69;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          LOBYTE(v35) = *(unsigned char *)(v58 + v62);
          float v72 = (float)LODWORD(v35) - v33;
          float v73 = (float)(v207 * v66) + (float)(v72 * v208);
          float v74 = 8191.0;
          if ((float)(v69 + v73) <= 8191.0)
          {
            float v74 = v69 + v73;
            if ((float)(v69 + v73) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v206 * v72;
          float v76 = (float)(v206 * v72) + v69;
          float v77 = 8191.0;
          if (v76 <= 8191.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          LOBYTE(v76) = result[1];
          float v78 = v34 * (float)((float)LODWORD(v76) - v32);
          float v79 = 8191.0;
          if ((float)(v68 + v78) <= 8191.0)
          {
            float v79 = v68 + v78;
            if ((float)(v68 + v78) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = 8191.0;
          if ((float)(v73 + v78) <= 8191.0)
          {
            float v80 = v73 + v78;
            if ((float)(v73 + v78) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v75 + v78;
          float v82 = 8191.0;
          if (v81 <= 8191.0)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          LOBYTE(v81) = *v63;
          float v83 = (float)LODWORD(v81) - v32;
          float v84 = v34 * v83;
          float v85 = 8191.0;
          if ((float)(v68 + (float)(v34 * v83)) <= 8191.0)
          {
            float v85 = v68 + (float)(v34 * v83);
            if (v85 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = 8191.0;
          if ((float)(v73 + v84) <= 8191.0)
          {
            float v86 = v73 + v84;
            if ((float)(v73 + v84) < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v75 + v84;
          BOOL v88 = (float)(v75 + v84) <= 8191.0;
          float v89 = 8191.0;
          if (v88)
          {
            float v89 = v87;
            if (v87 < 0.0) {
              float v89 = 0.0;
            }
          }
          LOBYTE(v83) = v63[1];
          float v90 = v34 * (float)((float)LODWORD(v83) - v32);
          float v91 = v68 + v90;
          BOOL v88 = (float)(v68 + v90) <= 8191.0;
          float v92 = 8191.0;
          if (v88)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          float v93 = v46;
          float v94 = v73 + v90;
          BOOL v88 = (float)(v73 + v90) <= 8191.0;
          float v95 = 8191.0;
          if (v88)
          {
            float v95 = v94;
            if (v94 < 0.0) {
              float v95 = 0.0;
            }
          }
          float v96 = v44;
          float v97 = v41;
          float v98 = v75 + v90;
          float v99 = 8191.0;
          if (v98 <= 8191.0)
          {
            float v99 = v98;
            if (v98 < 0.0) {
              float v99 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S6, H6
          }
          _H26 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H3 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H19 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H7 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v56 + 2 * llroundf(fminf(fmaxf(v99, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v128 = (float)((float)(v204 * _S4) + (float)(_S1 * v205)) + (float)(_S5 * v203);
          float v129 = (float)((float)(v201 * _S4) + (float)(_S1 * v202)) + (float)(_S5 * v200);
          _S1 = (float)((float)(v196 * _S4) + (float)(_S1 * v198)) + (float)(_S5 * v195);
          float v131 = (float)((float)(v204 * _S6) + (float)(_S2 * v205)) + (float)(_S26 * v203);
          float v132 = (float)((float)(v201 * _S6) + (float)(_S2 * v202)) + (float)(_S26 * v200);
          float v133 = (float)((float)(v196 * _S6) + (float)(_S2 * v198)) + (float)(_S26 * v195);
          float v134 = (float)((float)(v204 * _S3) + (float)(_S27 * v205)) + (float)(_S19 * v203);
          float v135 = (float)((float)(v201 * _S3) + (float)(_S27 * v202)) + (float)(_S19 * v200);
          float v136 = (float)((float)(v196 * _S3) + (float)(_S27 * v198)) + (float)(_S19 * v195);
          float v137 = (float)((float)(v204 * _S24) + (float)(_S7 * v205)) + (float)(_S25 * v203);
          float v138 = (float)((float)(v201 * _S24) + (float)(_S7 * v202)) + (float)(_S25 * v200);
          float v139 = (float)((float)(v196 * _S24) + (float)(_S7 * v198)) + (float)(_S25 * v195);
          LOWORD(_S7) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S27, H7 }
          LOWORD(_S7) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __asm { FCVT            S28, H7 }
          LOWORD(_S1) = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H25 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v55 + 2 * llroundf(fminf(fmaxf(v139, 0.0), 8191.0)));
          float v44 = v96;
          float v152 = (float)(v210 * _S28) + (float)(v96 * _S27);
          float v46 = v93;
          float v153 = (float)(v152 + (float)(v93 * _S29)) + v38;
          float v154 = v40;
          if (v153 <= v40)
          {
            float v154 = v153;
            if (v153 < v38) {
              float v154 = v38;
            }
          }
          *short float v53 = llroundf(v154);
          float v41 = v97;
          if (v57)
          {
            float v155 = v190;
            float v156 = (float)((float)(v190 + (float)(_S27 * v197)) + (float)(_S28 * v199)) + (float)(_S29 * v211);
            float v157 = v42;
            if (v156 <= v42)
            {
              float v157 = (float)((float)(v190 + (float)(_S27 * v197)) + (float)(_S28 * v199)) + (float)(_S29 * v211);
              if (v156 < v97) {
                float v157 = v97;
              }
            }
            float v159 = v192;
            float v158 = v193;
            float v160 = (float)(v190 + (float)(_S27 * v193)) + (float)(_S28 * v192);
            float v161 = v191;
            float v162 = v160 + (float)(_S29 * v191);
            *int16x8_t v57 = llroundf(v157);
            float v163 = v42;
            float v32 = v188;
            float v34 = v189;
            if (v162 <= v42)
            {
              float v163 = v160 + (float)(_S29 * v191);
              if (v162 < v97) {
                float v163 = v97;
              }
            }
            v57[1] = llroundf(v163);
            v57 += 2;
            float v164 = v210;
          }
          else
          {
            float v32 = v188;
            float v34 = v189;
            float v164 = v210;
            float v159 = v192;
            float v158 = v193;
            float v155 = v190;
            float v161 = v191;
          }
          __asm
          {
            FCVT            S1, H25
            FCVT            S19, H19
            FCVT            S25, H26
          }
          float v168 = (float)((float)((float)(v164 * _S19) + (float)(v44 * _S1)) + (float)(v93 * _S25)) + v38;
          float v169 = v40;
          if (v168 <= v40)
          {
            float v169 = (float)((float)((float)(v164 * _S19) + (float)(v44 * _S1)) + (float)(v93 * _S25)) + v38;
            if (v168 < v38) {
              float v169 = v38;
            }
          }
          v53[1] = llroundf(v169);
          if (v57)
          {
            float v170 = (float)((float)(v155 + (float)(_S1 * v197)) + (float)(_S19 * v199)) + (float)(_S25 * v211);
            float v171 = v42;
            if (v170 <= v42)
            {
              float v171 = (float)((float)(v155 + (float)(_S1 * v197)) + (float)(_S19 * v199)) + (float)(_S25 * v211);
              if (v170 < v97) {
                float v171 = v97;
              }
            }
            float v172 = (float)((float)(v155 + (float)(_S1 * v158)) + (float)(_S19 * v159)) + (float)(_S25 * v161);
            *int16x8_t v57 = llroundf(v171);
            float v173 = v42;
            if (v172 <= v42)
            {
              float v173 = v172;
              if (v172 < v97) {
                float v173 = v97;
              }
            }
            v57[1] = llroundf(v173);
            v57 += 2;
          }
          __asm
          {
            FCVT            S1, H7
            FCVT            S2, H2
            FCVT            S7, H24
          }
          float v177 = (float)((float)((float)(v164 * _S2) + (float)(v44 * _S1)) + (float)(v93 * _S7)) + v38;
          float v178 = v40;
          if (v177 <= v40)
          {
            float v178 = (float)((float)((float)(v164 * _S2) + (float)(v44 * _S1)) + (float)(v93 * _S7)) + v38;
            if (v177 < v38) {
              float v178 = v38;
            }
          }
          *float v65 = llroundf(v178);
          if (v64)
          {
            float v179 = (float)((float)(v155 + (float)(_S1 * v197)) + (float)(_S2 * v199)) + (float)(_S7 * v211);
            float v180 = v42;
            if (v179 <= v42)
            {
              float v180 = (float)((float)(v155 + (float)(_S1 * v197)) + (float)(_S2 * v199)) + (float)(_S7 * v211);
              if (v179 < v97) {
                float v180 = v97;
              }
            }
            float v181 = (float)((float)(v155 + (float)(_S1 * v158)) + (float)(_S2 * v159)) + (float)(_S7 * v161);
            *uint64_t v64 = llroundf(v180);
            float v182 = v42;
            if (v181 <= v42)
            {
              float v182 = v181;
              if (v181 < v97) {
                float v182 = v97;
              }
            }
            v64[1] = llroundf(v182);
            v64 += 2;
          }
          float v33 = v194;
          __asm
          {
            FCVT            S1, H4
            FCVT            S2, H5
            FCVT            S4, H6
          }
          float v35 = (float)((float)((float)(v164 * _S2) + (float)(v44 * _S1)) + (float)(v93 * _S4)) + v38;
          float v185 = v40;
          if (v35 <= v40)
          {
            float v185 = (float)((float)((float)(v164 * _S2) + (float)(v44 * _S1)) + (float)(v93 * _S4)) + v38;
            if (v35 < v38) {
              float v185 = v38;
            }
          }
          v65[1] = llroundf(v185);
          if (v64)
          {
            float v35 = (float)((float)(v155 + (float)(_S1 * v197)) + (float)(_S2 * v199)) + (float)(_S4 * v211);
            float v186 = v42;
            if (v35 <= v42)
            {
              float v186 = (float)((float)(v155 + (float)(_S1 * v197)) + (float)(_S2 * v199)) + (float)(_S4 * v211);
              if (v35 < v97) {
                float v186 = v97;
              }
            }
            _S1 = (float)((float)(v155 + (float)(_S1 * v158)) + (float)(_S2 * v159)) + (float)(_S4 * v161);
            *uint64_t v64 = llroundf(v186);
            float v187 = v42;
            if (_S1 <= v42)
            {
              float v187 = _S1;
              if (_S1 < v97) {
                float v187 = v97;
              }
            }
            v64[1] = llroundf(v187);
            v64 += 2;
          }
          result += 2;
          v63 += 2;
          v53 += 2;
          v65 += 2;
          v62 += 2;
        }
        while (v10 > v62);
      }
      uint64_t result = &v59[v21];
      v58 += v22;
      short float v53 = &v61[v26];
      int16x8_t v57 = &v60[v27];
      v9 += 2;
    }
    while (v13 > v9);
    if (v24 && v29)
    {
      do
      {
        uint64_t result = (unsigned __int8 *)memcpy(v30, v25, v10);
        v25 += v23;
        v30 += v28;
        --v13;
      }
      while (v13);
    }
    else if (v29)
    {
      do
      {
        if (v10) {
          uint64_t result = (unsigned __int8 *)memset(v30, 255, v10);
        }
        v30 += v28;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_444vf_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_444vf_neon_fp16_GCD);
  return 0;
}

unint64_t vt_Copy_420vf_rgb_444vf_neon_fp16_GCD(unint64_t result, uint64_t a2, double _D0, double a4, double a5, double a6, double a7, double a8, double a9, float32x4_t a10)
{
  uint64_t v14 = *(void *)(result + 28);
  unint64_t v15 = 2 * *(unsigned __int8 *)result;
  unint64_t v16 = v14 * a2 / v15;
  unint64_t v17 = (v14 + v14 * a2) / v15;
  if (2 * v17 != 2 * v16)
  {
    unint64_t v18 = 0;
    size_t v19 = *(void *)(result + 20);
    uint64_t v20 = *(void *)(result + 36);
    uint64_t v21 = *(void *)(result + 44) + 2 * v16;
    unint64_t v22 = 2 * v17 - 2 * v16;
    uint64_t v23 = *(void *)(result + 112);
    uint64_t v24 = *(void **)(result + 128);
    uint64_t v25 = *(void *)(result + 120) + 2 * (*(void *)(result + 104) * a2 / v15);
    uint64_t v26 = *(float32x2_t **)(result + 152);
    uint64_t v28 = *(uint64_t **)(result + 56);
    uint64_t v27 = *(uint64_t **)(result + 64);
    uint64_t v29 = *(uint64_t **)(result + 136);
    uint64_t v30 = *v27;
    uint64_t v31 = v27[1];
    uint64_t v32 = v27[2];
    uint64_t v33 = v28[2];
    uint64_t v34 = *v29;
    uint64_t v35 = v29[1];
    uint64_t v36 = v29[2];
    uint64_t v37 = v24[2];
    uint64_t v38 = (char *)(v37 + v36 * v25 + v23);
    unsigned int v39 = v26[17].u16[2];
    unsigned int v40 = v26[17].u16[3];
    v12.i32[0] = v26[3].i32[1];
    unsigned int v41 = v26[18].u16[0];
    unsigned int v42 = v26[18].u16[1];
    unsigned int v43 = v26[18].u16[2];
    unsigned int v44 = v26[18].u16[3];
    float v45 = (float)v39;
    *(short float *)v13.i16 = (short float)v39;
    unsigned int v46 = v26[19].u16[0];
    _S1 = v26[4].f32[1];
    _S2 = v26[5].f32[0];
    _S3 = v26[5].f32[1];
    _S5 = v26[6].f32[0];
    _Q6.i32[0] = v26[6].i32[1];
    _Q26.i32[0] = v26[7].i32[0];
    _Q27.i32[0] = v26[7].i32[1];
    LODWORD(_D0) = v26[8].i32[0];
    _S15 = v26[8].f32[1];
    uint64_t v55 = (char *)(v33 + v32 * v21 + v20);
    float v56 = (float)v26[17].u32[0] / (float)v26[16].u32[0];
    float v170 = (float)v40;
    _S19 = v56 * v26->f32[0];
    float v58 = (float)v41;
    float v59 = (float)v42;
    float v60 = (float)v43;
    float v61 = (float)v44;
    float v62 = (float)v46;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(v13, 0);
    __asm { FCVT            H8, S19 }
    short float v69 = -(short float)v40;
    v12.i32[1] = v26[1].i32[0];
    *(float32x2_t *)a10.f32 = vmul_n_f32(*(float32x2_t *)v12.f32, v56);
    *(float32x2_t *)v12.f32 = vmul_n_f32(v26[2], v56);
    int16x4_t v70 = (int16x4_t)vcvt_f16_f32(v12);
    float16x8_t v168 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    float16x8_t v165 = vmulq_n_f16(v168, v69);
    float16x8_t v166 = (float16x8_t)vdupq_lane_s32((int32x2_t)v70, 0);
    float16x8_t v164 = vmulq_n_f16(v166, v69);
    __asm { FCVT            H14, S1 }
    *(short float *)v70.i16 = (short float)v41;
    float16x8_t v71 = (float16x8_t)vdupq_lane_s16(v70, 0);
    *(short float *)v70.i16 = (short float)v42;
    float16x8_t v178 = (float16x8_t)vdupq_lane_s16(v70, 0);
    *(short float *)v70.i16 = (short float)v43;
    float16x8_t v72 = (float16x8_t)vdupq_lane_s16(v70, 0);
    *(short float *)v70.i16 = (short float)v44;
    int16x8_t v73 = vdupq_lane_s16(v70, 0);
    *(short float *)v70.i16 = (short float)v46;
    float16x8_t v176 = (float16x8_t)vdupq_lane_s16(v70, 0);
    float16x8_t v177 = (float16x8_t)v73;
    __asm { FCVT            H11, S2 }
    short float v180 = _H11;
    float v77 = v24;
    uint64_t v76 = *v24;
    uint64_t v75 = v77[1];
    if (v75) {
      float v78 = (char *)(v75 + v35 * v25 + v23);
    }
    else {
      float v78 = 0;
    }
    float v79 = (int8x8_t *)(v76 + v34 * v25 + v23);
    if (v21 >= 0) {
      uint64_t v80 = v21;
    }
    else {
      uint64_t v80 = v21 + 1;
    }
    uint64_t v81 = *v28;
    float v82 = (__int8 *)(v28[1] + v31 * (v80 >> 1) + v20);
    float v83 = (int8x8_t *)(v81 + v30 * v21 + v20);
    uint64_t result = (v19 - 7);
    __asm { FCVT            H11, S3 }
    __int32 v179 = _S11;
    float v185 = _S5;
    __asm { FCVT            H5, S5 }
    short float v175 = _H5;
    float v184 = *(float *)_Q6.i32;
    __asm { FCVT            H5, S6 }
    short float v174 = _H5;
    float v183 = *(float *)_Q26.i32;
    __asm { FCVT            H5, S26 }
    short float v173 = _H5;
    float v182 = *(float *)_Q27.i32;
    __asm { FCVT            H5, S27 }
    short float v172 = _H5;
    float v181 = *(float *)&_D0;
    __asm
    {
      FCVT            H11, S0
      FCVT            H0, S15
    }
    double v171 = _D0;
    v89.i32[0] = a10.i32[1];
    float v169 = a10.f32[0];
    LODWORD(_D0) = v12.i32[1];
    float v162 = v12.f32[1];
    float v167 = v12.f32[0];
    float v163 = a10.f32[1];
    do
    {
      float v90 = (char *)v83 + v30;
      float v91 = (char *)v79 + v34;
      float v92 = &v78[v35];
      if ((int)v19 < 8)
      {
        size_t v116 = 0;
        float v96 = &v78[v35];
        float v95 = (char *)v79 + v34;
        float16x8_t v115 = v82;
        float v94 = (int8x8_t *)((char *)v83 + v30);
      }
      else
      {
        uint64_t v93 = 0;
        float v94 = (int8x8_t *)((char *)v83 + v30);
        float v95 = (char *)v79 + v34;
        float v96 = &v78[v35];
        do
        {
          int8x8_t v97 = *(int8x8_t *)&v82[v93];
          *(int8x8_t *)v98.i8 = vzip1_s8(v97, 0);
          v98.u64[1] = (unint64_t)vzip2_s8(v97, 0);
          float16x8_t v99 = vcvtq_f16_u16(v98);
          int8x16_t v100 = (int8x16_t)vmlaq_f16(v165, v168, v99);
          int8x16_t v101 = (int8x16_t)vmlaq_f16(v164, v166, v99);
          v99.i64[0] = vextq_s8(v100, v100, 8uLL).u64[0];
          *(int16x4_t *)v102.i8 = vuzp1_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          *(int16x4_t *)v99.i8 = vuzp2_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
          *(double *)&v99.i64[1] = _D0;
          float16x8_t v103 = (float16x8_t)vzip1q_s16((int16x8_t)v99, (int16x8_t)v99);
          *(double *)&v102.i64[1] = _D0;
          float16x8_t v104 = (float16x8_t)vzip1q_s16(v102, v102);
          v99.i64[0] = vextq_s8(v101, v101, 8uLL).u64[0];
          *(float16x4_t *)v99.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v99.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v99.i8));
          *(double *)&v99.i64[1] = _D0;
          float16x8_t v105 = (float16x8_t)vzip1q_s16((int16x8_t)v99, (int16x8_t)v99);
          int8x8_t v106 = *v83++;
          *(int8x8_t *)v100.i8 = vzip1_s8(v106, 0);
          v100.u64[1] = (unint64_t)vzip2_s8(v106, 0);
          int8x8_t v107 = *v94++;
          int8x8_t v108 = v107;
          float16x8_t v109 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v100), v63);
          float16x8_t v110 = vmlaq_n_f16(v103, v109, _H8);
          float16x8_t v111 = vmlaq_n_f16(v105, v109, _H8);
          float16x8_t v112 = vmlaq_n_f16(v104, v109, _H8);
          *v79++ = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v71, v110, *(short float *)&_Q14), v111, v180), v112, *(short float *)&v179), v71), v72)));
          if (v78)
          {
            _D0 = v171;
            v186.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v178, v110, v175), v111, v174), v112, v173), v177), v176), v177), v176)));
            v186.val[1] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v178, v110, v172), v111, _H11), v112, *(short float *)&v171)));
            vst2_s8(v78, v186);
            v78 += 16;
          }
          *(int8x8_t *)v113.i8 = vzip1_s8(v108, 0);
          v113.u64[1] = (unint64_t)vzip2_s8(v108, 0);
          float16x8_t v89 = vsubq_f16(vcvtq_f16_u16(v113), v63);
          _Q26 = vmlaq_n_f16(v103, v89, _H8);
          float16x8_t v114 = vmlaq_n_f16(v105, v89, _H8);
          _Q27 = vmlaq_n_f16(v104, v89, _H8);
          _Q6.i32[0] = v179;
          *(int8x8_t *)v89.i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v71, _Q26, *(short float *)&_Q14), v114, v180), _Q27, *(short float *)&v179), v71), v72)));
          *(void *)float v95 = v89.i64[0];
          v95 += 8;
          if (v96)
          {
            _D0 = v171;
            _Q6 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v178, _Q26, v172), v114, _H11), _Q27, *(short float *)&v171);
            v187.val[0] = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v178, _Q26, v175), v114, v174), _Q27, v173), v177), v176), v177), v176)));
            float16x8_t v89 = (float16x8_t)vcvtq_u16_f16(_Q6);
            v187.val[1] = vmovn_s16((int16x8_t)v89);
            vst2_s8(v96, v187);
            v96 += 16;
          }
          v93 += 8;
        }
        while ((int)v93 < (int)result);
        float16x8_t v115 = &v82[v93];
        size_t v116 = v19 & 0xFFFFFFF8;
      }
      while (v19 > v116)
      {
        float16x8_t v117 = v72;
        long long v118 = _Q14;
        float16x8_t v119 = v63;
        float v120 = _S15;
        v89.i8[0] = *v115;
        *(float *)&unsigned int v121 = (float)v89.u32[0] - v170;
        _Q6.i8[0] = v115[1];
        float v122 = (float)_Q6.u32[0] - v170;
        float v123 = v163 * v122;
        *(float *)&_D0 = v162;
        float v124 = (float)(v162 * v122) + (float)(*(float *)&v121 * v167);
        *(float *)_Q6.i32 = v169;
        float v125 = v169 * *(float *)&v121;
        LOBYTE(v121) = v83->i8[0];
        *(float *)v89.i32 = _S19 * (float)((float)v121 - v45);
        float v126 = v123 + *(float *)v89.i32;
        float v127 = *(float *)v89.i32 + v124;
        float v128 = v125 + *(float *)v89.i32;
        float v129 = (float)((float)((float)(_S2 * (float)(*(float *)v89.i32 + v124))
                             + (float)(_S1 * (float)(v123 + *(float *)v89.i32)))
                     + (float)(_S3 * (float)(v125 + *(float *)v89.i32)))
             + v58;
        float v130 = v60;
        if (v129 <= v60)
        {
          float v130 = (float)((float)((float)(_S2 * (float)(*(float *)v89.i32 + v124))
                               + (float)(_S1 * (float)(v123 + *(float *)v89.i32)))
                       + (float)(_S3 * (float)(v125 + *(float *)v89.i32)))
               + v58;
          if (v129 < v58) {
            float v130 = v58;
          }
        }
        LOBYTE(v129) = v83->i8[1];
        _Q27.i8[0] = v94->i8[0];
        _Q26.i8[0] = v94->i8[1];
        v79->i8[0] = llroundf(v130);
        if (v78)
        {
          *(float *)_Q6.i32 = v183;
          float v131 = (float)((float)(v59 + (float)(v126 * v185)) + (float)(v127 * v184)) + (float)(v128 * v183);
          float v132 = v62;
          if (v131 <= v62)
          {
            float v132 = (float)((float)(v59 + (float)(v126 * v185)) + (float)(v127 * v184)) + (float)(v128 * v183);
            if (v131 < v61) {
              float v132 = v61;
            }
          }
          *(float *)&_D0 = v181;
          float v133 = (float)((float)(v59 + (float)(v126 * v182)) + (float)(v127 * v181)) + (float)(v128 * v120);
          _S15 = v120;
          char *v78 = llroundf(v132);
          float v134 = v62;
          if (v133 <= v62)
          {
            if (v133 < v61) {
              float v134 = v61;
            }
            else {
              float v134 = v133;
            }
          }
          v78[1] = llroundf(v134);
          v78 += 2;
        }
        else
        {
          _S15 = v120;
        }
        _Q14 = v118;
        float16x8_t v72 = v117;
        float v135 = _S19 * (float)((float)LODWORD(v129) - v45);
        float v136 = v123 + v135;
        float v137 = v124 + v135;
        float v138 = v125 + v135;
        float v139 = (float)((float)((float)(_S2 * (float)(v124 + v135)) + (float)(_S1 * (float)(v123 + v135)))
                     + (float)(_S3 * (float)(v125 + v135)))
             + v58;
        float v140 = v60;
        if (v139 <= v60)
        {
          float v140 = (float)((float)((float)(_S2 * (float)(v124 + v135)) + (float)(_S1 * (float)(v123 + v135)))
                       + (float)(_S3 * (float)(v125 + v135)))
               + v58;
          if (v139 < v58) {
            float v140 = v58;
          }
        }
        v79->i8[1] = llroundf(v140);
        if (v78)
        {
          *(float *)_Q6.i32 = v183;
          float v141 = (float)((float)(v59 + (float)(v136 * v185)) + (float)(v137 * v184)) + (float)(v138 * v183);
          float v142 = v62;
          if (v141 <= v62)
          {
            float v142 = (float)((float)(v59 + (float)(v136 * v185)) + (float)(v137 * v184)) + (float)(v138 * v183);
            if (v141 < v61) {
              float v142 = v61;
            }
          }
          *(float *)&_D0 = v181;
          float v143 = (float)((float)(v59 + (float)(v136 * v182)) + (float)(v137 * v181)) + (float)(v138 * _S15);
          char *v78 = llroundf(v142);
          float v144 = v62;
          if (v143 <= v62)
          {
            if (v143 < v61) {
              float v144 = v61;
            }
            else {
              float v144 = v143;
            }
          }
          v78[1] = llroundf(v144);
          v78 += 2;
        }
        float16x8_t v63 = v119;
        float v145 = _S19 * (float)((float)_Q27.u32[0] - v45);
        float v146 = v123 + v145;
        float v147 = v124 + v145;
        *(float *)_Q27.i32 = v125 + v145;
        float v148 = (float)((float)((float)(_S2 * (float)(v124 + v145)) + (float)(_S1 * (float)(v123 + v145)))
                     + (float)(_S3 * (float)(v125 + v145)))
             + v58;
        float v149 = v60;
        if (v148 <= v60)
        {
          float v149 = (float)((float)((float)(_S2 * (float)(v124 + v145)) + (float)(_S1 * (float)(v123 + v145)))
                       + (float)(_S3 * (float)(v125 + v145)))
               + v58;
          if (v148 < v58) {
            float v149 = v58;
          }
        }
        *float v95 = llroundf(v149);
        if (v96)
        {
          *(float *)_Q6.i32 = v183;
          float v150 = (float)((float)(v59 + (float)(v146 * v185)) + (float)(v147 * v184))
               + (float)(*(float *)_Q27.i32 * v183);
          float v151 = v62;
          if (v150 <= v62)
          {
            float v151 = (float)((float)(v59 + (float)(v146 * v185)) + (float)(v147 * v184))
                 + (float)(*(float *)_Q27.i32 * v183);
            if (v150 < v61) {
              float v151 = v61;
            }
          }
          *(float *)&_D0 = v181;
          float v152 = (float)((float)(v59 + (float)(v146 * v182)) + (float)(v147 * v181))
               + (float)(*(float *)_Q27.i32 * _S15);
          *float v96 = llroundf(v151);
          float v153 = v62;
          if (v152 <= v62)
          {
            if (v152 < v61) {
              float v153 = v61;
            }
            else {
              float v153 = v152;
            }
          }
          v96[1] = llroundf(v153);
          v96 += 2;
        }
        float v154 = _S19 * (float)((float)_Q26.u32[0] - v45);
        float v155 = v123 + v154;
        float v156 = v124 + v154;
        *(float *)_Q26.i32 = v125 + v154;
        *(float *)v89.i32 = (float)((float)(_S2 * (float)(v124 + v154)) + (float)(_S1 * (float)(v123 + v154)))
                          + (float)(_S3 * (float)(v125 + v154));
        float v157 = v60;
        if ((float)(*(float *)v89.i32 + v58) <= v60)
        {
          float v157 = *(float *)v89.i32 + v58;
          if ((float)(*(float *)v89.i32 + v58) < v58) {
            float v157 = v58;
          }
        }
        v95[1] = llroundf(v157);
        if (v96)
        {
          *(float *)_Q6.i32 = v183;
          float v158 = (float)((float)(v59 + (float)(v155 * v185)) + (float)(v156 * v184))
               + (float)(*(float *)_Q26.i32 * v183);
          float v159 = v62;
          if (v158 <= v62)
          {
            float v159 = (float)((float)(v59 + (float)(v155 * v185)) + (float)(v156 * v184))
                 + (float)(*(float *)_Q26.i32 * v183);
            if (v158 < v61) {
              float v159 = v61;
            }
          }
          *(float *)&_D0 = v181;
          *(float *)v89.i32 = (float)(v59 + (float)(v155 * v182)) + (float)(v156 * v181);
          float v160 = *(float *)v89.i32 + (float)(*(float *)_Q26.i32 * _S15);
          *float v96 = llroundf(v159);
          float v161 = v62;
          if (v160 <= v62)
          {
            float v161 = *(float *)v89.i32 + (float)(*(float *)_Q26.i32 * _S15);
            if (v160 < v61) {
              float v161 = v61;
            }
          }
          v96[1] = llroundf(v161);
          v96 += 2;
        }
        v116 += 2;
        v115 += 2;
        float v83 = (int8x8_t *)((char *)v83 + 2);
        float v94 = (int8x8_t *)((char *)v94 + 2);
        float v79 = (int8x8_t *)((char *)v79 + 2);
        v95 += 2;
      }
      float v83 = (int8x8_t *)&v90[v30];
      v82 += v31;
      float v79 = (int8x8_t *)&v91[v34];
      float v78 = &v92[v35];
      v18 += 2;
    }
    while (v22 > v18);
    if (v33 && v37)
    {
      do
      {
        uint64_t result = (unint64_t)memcpy(v38, v55, v19);
        v55 += v32;
        v38 += v36;
        --v22;
      }
      while (v22);
    }
    else if (v37)
    {
      do
      {
        if (v19) {
          uint64_t result = (unint64_t)memset(v38, 255, v19);
        }
        v38 += v36;
        --v22;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_444vf(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_444vf_GCD);
  return 0;
}

void *vt_Copy_420vf_rgb_444vf_GCD(void *result, uint64_t a2)
{
  uint64_t v13 = *(void *)((char *)result + 28);
  unint64_t v14 = 2 * *(unsigned __int8 *)result;
  unint64_t v15 = v13 * a2 / v14;
  unint64_t v16 = (v13 + v13 * a2) / v14;
  if (2 * v16 != 2 * v15)
  {
    unint64_t v17 = 0;
    size_t v18 = *(void *)((char *)result + 20);
    uint64_t v19 = *(void *)((char *)result + 36);
    uint64_t v20 = *(void *)((char *)result + 44) + 2 * v15;
    unint64_t v21 = 2 * v16 - 2 * v15;
    uint64_t v22 = result[14];
    uint64_t v23 = (void *)result[16];
    uint64_t v24 = result[15] + 2 * (result[13] * a2 / v14);
    uint64_t v25 = result[19];
    uint64_t v26 = (void *)result[7];
    uint64_t v27 = (uint64_t *)result[8];
    uint64_t v28 = (uint64_t *)result[17];
    uint64_t v29 = *v27;
    uint64_t v30 = v27[1];
    uint64_t v31 = v27[2];
    uint64_t v32 = v26[2];
    uint64_t v33 = *v28;
    uint64_t v34 = v28[1];
    uint64_t v35 = v28[2];
    uint64_t v36 = v23[2];
    uint64_t v37 = (char *)(v36 + v35 * v24 + v22);
    float v38 = (float)*(unsigned int *)(v25 + 136) / (float)*(unsigned int *)(v25 + 128);
    LOWORD(v5) = *(_WORD *)(v25 + 140);
    LOWORD(v6) = *(_WORD *)(v25 + 142);
    float v39 = v38 * *(float *)v25;
    float v40 = v38 * *(float *)(v25 + 8);
    float v41 = v38 * *(float *)(v25 + 16);
    float v42 = v38 * *(float *)(v25 + 20);
    float v43 = v38 * *(float *)(v25 + 28);
    LOWORD(v7) = *(_WORD *)(v25 + 144);
    LOWORD(v8) = *(_WORD *)(v25 + 146);
    LOWORD(v9) = *(_WORD *)(v25 + 148);
    LOWORD(v10) = *(_WORD *)(v25 + 150);
    LOWORD(v11) = *(_WORD *)(v25 + 152);
    float v44 = *(float *)(v25 + 36);
    float v45 = *(float *)(v25 + 40);
    float v46 = *(float *)(v25 + 44);
    float v47 = *(float *)(v25 + 48);
    float v48 = *(float *)(v25 + 52);
    float v49 = *(float *)(v25 + 56);
    float v50 = *(float *)(v25 + 60);
    float v51 = *(float *)(v25 + 64);
    float v52 = *(float *)(v25 + 68);
    uint64_t v53 = v23[1];
    short float v54 = (unsigned char *)(*v23 + v33 * v24 + v22);
    uint64_t v55 = (unsigned char *)(v53 + v34 * v24 + v22);
    float v56 = (char *)(v32 + v31 * v20 + v19);
    float v57 = (float)v5;
    float v58 = (float)v6;
    float v59 = (float)v7;
    float v60 = (float)v8;
    float v61 = (float)v9;
    float v62 = (float)v10;
    float v63 = (float)v11;
    if (v53) {
      uint64_t v64 = v55;
    }
    else {
      uint64_t v64 = 0;
    }
    uint64_t v65 = v26[1];
    float v66 = (unsigned char *)(*v26 + v29 * v20 + v19);
    if (v20 >= 0) {
      uint64_t v67 = v20;
    }
    else {
      uint64_t v67 = v20 + 1;
    }
    uint64_t v68 = v65 + v30 * (v67 >> 1) + v19;
    do
    {
      short float v69 = &v66[v29];
      uint64_t result = &v64[v34];
      int16x4_t v70 = &v54[v33];
      if (v18)
      {
        size_t v71 = 0;
        float16x8_t v72 = &v66[v29];
        int16x8_t v73 = &v54[v33];
        float v74 = &v64[v34];
        do
        {
          LOBYTE(v12) = *(unsigned char *)(v68 + v71);
          *(float *)&unsigned int v75 = (float)LODWORD(v12);
          float v76 = *(float *)&v75 - v58;
          LOBYTE(v75) = *(unsigned char *)(v68 + v71 + 1);
          float v77 = (float)v75 - v58;
          float v78 = v40 * v77;
          float v79 = (float)(v42 * v77) + (float)(v76 * v41);
          float v80 = v43 * v76;
          LOBYTE(v2) = *v66;
          float v81 = v39 * (float)((float)LODWORD(v2) - v57);
          float v82 = v78 + v81;
          float v83 = v81 + v79;
          float v84 = v80 + v81;
          float v85 = (float)((float)((float)(v45 * (float)(v81 + v79)) + (float)(v44 * (float)(v78 + v81)))
                      + (float)(v46 * (float)(v80 + v81)))
              + v59;
          float v86 = v61;
          if (v85 <= v61)
          {
            float v86 = v85;
            if (v85 < v59) {
              float v86 = v59;
            }
          }
          LOBYTE(v4) = v66[1];
          LOBYTE(v3) = *v72;
          LOBYTE(v85) = v72[1];
          unsigned char *v54 = llroundf(v86);
          if (v64)
          {
            float v87 = (float)((float)(v60 + (float)(v82 * v47)) + (float)(v83 * v48)) + (float)(v84 * v49);
            float v88 = v63;
            if (v87 <= v63)
            {
              float v88 = (float)((float)(v60 + (float)(v82 * v47)) + (float)(v83 * v48)) + (float)(v84 * v49);
              if (v87 < v62) {
                float v88 = v62;
              }
            }
            float v89 = (float)((float)(v60 + (float)(v82 * v50)) + (float)(v83 * v51)) + (float)(v84 * v52);
            *uint64_t v64 = llroundf(v88);
            float v90 = v63;
            if (v89 <= v63)
            {
              if (v89 < v62) {
                float v90 = v62;
              }
              else {
                float v90 = v89;
              }
            }
            v64[1] = llroundf(v90);
            v64 += 2;
          }
          float v91 = v39 * (float)((float)LODWORD(v4) - v57);
          float v92 = v78 + v91;
          float v93 = v79 + v91;
          float v94 = v80 + v91;
          float v95 = (float)((float)((float)(v45 * v93) + (float)(v44 * v92)) + (float)(v46 * v94)) + v59;
          float v96 = v61;
          if (v95 <= v61)
          {
            float v96 = (float)((float)((float)(v45 * v93) + (float)(v44 * v92)) + (float)(v46 * v94)) + v59;
            if (v95 < v59) {
              float v96 = v59;
            }
          }
          v54[1] = llroundf(v96);
          if (v64)
          {
            float v97 = (float)((float)(v60 + (float)(v92 * v47)) + (float)(v93 * v48)) + (float)(v94 * v49);
            float v98 = v63;
            if (v97 <= v63)
            {
              float v98 = (float)((float)(v60 + (float)(v92 * v47)) + (float)(v93 * v48)) + (float)(v94 * v49);
              if (v97 < v62) {
                float v98 = v62;
              }
            }
            float v99 = (float)((float)(v60 + (float)(v92 * v50)) + (float)(v93 * v51)) + (float)(v94 * v52);
            *uint64_t v64 = llroundf(v98);
            float v100 = v63;
            if (v99 <= v63)
            {
              if (v99 < v62) {
                float v100 = v62;
              }
              else {
                float v100 = v99;
              }
            }
            v64[1] = llroundf(v100);
            v64 += 2;
          }
          float v101 = v39 * (float)((float)LODWORD(v3) - v57);
          float v102 = v78 + v101;
          float v4 = v79 + v101;
          float v103 = v80 + v101;
          float v104 = (float)((float)((float)(v45 * v4) + (float)(v44 * v102)) + (float)(v46 * v103)) + v59;
          float v105 = v61;
          if (v104 <= v61)
          {
            float v105 = (float)((float)((float)(v45 * v4) + (float)(v44 * v102)) + (float)(v46 * v103)) + v59;
            if (v104 < v59) {
              float v105 = v59;
            }
          }
          *int16x8_t v73 = llroundf(v105);
          if (v74)
          {
            float v106 = (float)((float)(v60 + (float)(v102 * v47)) + (float)(v4 * v48)) + (float)(v103 * v49);
            float v107 = v63;
            if (v106 <= v63)
            {
              float v107 = (float)((float)(v60 + (float)(v102 * v47)) + (float)(v4 * v48)) + (float)(v103 * v49);
              if (v106 < v62) {
                float v107 = v62;
              }
            }
            float v108 = (float)((float)(v60 + (float)(v102 * v50)) + (float)(v4 * v51)) + (float)(v103 * v52);
            *float v74 = llroundf(v107);
            float v4 = v63;
            if (v108 <= v63)
            {
              if (v108 < v62) {
                float v4 = v62;
              }
              else {
                float v4 = v108;
              }
            }
            v74[1] = llroundf(v4);
            v74 += 2;
          }
          float v109 = v39 * (float)((float)LODWORD(v85) - v57);
          float v12 = v78 + v109;
          float v110 = v79 + v109;
          float v111 = v80 + v109;
          float v3 = (float)((float)((float)(v45 * v110) + (float)(v44 * v12)) + (float)(v46 * v111)) + v59;
          float v2 = v61;
          if (v3 <= v61)
          {
            float v2 = (float)((float)((float)(v45 * v110) + (float)(v44 * v12)) + (float)(v46 * v111)) + v59;
            if (v3 < v59) {
              float v2 = v59;
            }
          }
          v73[1] = llroundf(v2);
          if (v74)
          {
            float v3 = (float)((float)(v60 + (float)(v12 * v47)) + (float)(v110 * v48)) + (float)(v111 * v49);
            float v2 = v63;
            if (v3 <= v63)
            {
              float v2 = (float)((float)(v60 + (float)(v12 * v47)) + (float)(v110 * v48)) + (float)(v111 * v49);
              if (v3 < v62) {
                float v2 = v62;
              }
            }
            float v12 = (float)((float)(v60 + (float)(v12 * v50)) + (float)(v110 * v51)) + (float)(v111 * v52);
            *float v74 = llroundf(v2);
            float v112 = v63;
            if (v12 <= v63)
            {
              float v112 = v12;
              if (v12 < v62) {
                float v112 = v62;
              }
            }
            v74[1] = llroundf(v112);
            v74 += 2;
          }
          v66 += 2;
          v72 += 2;
          v54 += 2;
          v73 += 2;
          v71 += 2;
        }
        while (v18 > v71);
      }
      float v66 = &v69[v29];
      v68 += v30;
      short float v54 = &v70[v33];
      uint64_t v64 = (char *)result + v34;
      v17 += 2;
    }
    while (v21 > v17);
    if (v32 && v36)
    {
      do
      {
        uint64_t result = memcpy(v37, v56, v18);
        v56 += v31;
        v37 += v35;
        --v21;
      }
      while (v21);
    }
    else if (v36)
    {
      do
      {
        if (v18) {
          uint64_t result = memset(v37, 255, v18);
        }
        v37 += v35;
        --v21;
      }
      while (v21);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, int16x4_t a4, float32x4_t a5, double a6, double a7, double a8, float32x4_t _Q6)
{
  uint64_t v9 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v10 = 2 * result->u8[0];
  unint64_t v11 = v9 * a2 / v10;
  unint64_t v12 = (v9 + v9 * a2) / v10;
  if (2 * v12 != 2 * v11)
  {
    unint64_t v13 = 0;
    unint64_t v14 = *(unint64_t *)((char *)&result[2] + 4);
    uint64_t v15 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v16 = *(void *)((char *)&result[5] + 4) + 2 * v11;
    unint64_t v17 = 2 * v12 - 2 * v11;
    float32x2_t v18 = result[14];
    uint64_t v19 = (void *)result[16];
    uint64_t v20 = *(void *)&result[15] + 2 * (*(void *)&result[13] * a2 / v10);
    uint64_t v21 = (float32x2_t *)result[19];
    size_t v22 = (uint64_t *)result[7];
    uint64_t v23 = (uint64_t *)result[8];
    uint64_t v24 = (uint64_t *)result[17];
    uint64_t v25 = *v23;
    uint64_t v26 = v23[1];
    uint64_t v360 = v23[2];
    uint64_t v363 = v22[2];
    uint64_t v27 = *v24;
    uint64_t v28 = v24[1];
    uint64_t v361 = v24[2];
    uint64_t v362 = v19[2];
    uint64_t v29 = (char *)(v362 + v361 * v20 + 2 * *(void *)&v18);
    unsigned int v30 = v21[17].u16[2];
    unsigned int v31 = v21[17].u16[3];
    a4.i32[0] = v21->i32[0];
    a5.i32[0] = v21[3].i32[1];
    unsigned int v32 = v21[18].u16[0];
    unsigned int v33 = v21[18].u16[1];
    unsigned int v34 = v21[18].u16[2];
    unsigned int v35 = v21[18].u16[3];
    unsigned int v36 = v21[19].u16[0];
    _S3 = v21[4].f32[1];
    _S12 = v21[5].i32[0];
    _S9 = v21[5].f32[1];
    _S4 = v21[6].f32[0];
    float v408 = _S4;
    _S14 = v21[6].f32[1];
    _S30 = v21[7].f32[0];
    float v43 = (char *)&v21[2068] + 4;
    float v359 = (unsigned __int8 *)(v363 + v360 * v16 + v15);
    float v44 = 8191.0 / (float)v21[16].u32[0];
    float v45 = (float)v30;
    float v429 = (float)v31;
    float v46 = (float)v33;
    float v47 = (float)v35;
    _S11 = v44 * v21->f32[0];
    float v49 = (float)v36;
    uint64_t result = (float32x2_t *)((char *)v21 + 164);
    *(short float *)a4.i16 = (short float)v30;
    float v50 = (char *)&v21[4116] + 4;
    __asm { FCVT            H6, S11 }
    float16x8_t v415 = (float16x8_t)vdupq_lane_s16(a4, 0);
    short float v416 = *(short float *)_Q6.i16;
    a5.i32[1] = v21[1].i32[0];
    *(float32x2_t *)_Q6.f32 = vmul_n_f32(*(float32x2_t *)a5.f32, v44);
    *(float32x2_t *)a5.f32 = vmul_n_f32(v21[2], v44);
    short float v55 = -(short float)v31;
    float16x8_t v413 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q6), 0);
    float16x8_t v410 = vmulq_n_f16(v413, v55);
    float16x8_t v411 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    _Q0 = vmulq_n_f16(v411, v55);
    float16x8_t v409 = _Q0;
    __asm { FCVT            H0, S3 }
    short float v428 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S12 }
    short float v427 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S9 }
    short float v426 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S4 }
    short float v425 = *(short float *)_Q0.i16;
    *(short float *)_Q0.i16 = (short float)v32;
    float16x8_t v57 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v33;
    int16x8_t v58 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v34;
    float16x8_t v59 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    *(short float *)_Q0.i16 = (short float)v35;
    int16x8_t v60 = vdupq_lane_s16(*(int16x4_t *)_Q0.i8, 0);
    float16x8_t v423 = (float16x8_t)v60;
    float16x8_t v424 = (float16x8_t)v58;
    *(short float *)v60.i16 = (short float)v36;
    float16x8_t v422 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    unsigned int v61 = v21[16].u8[4];
    if (v61 >= 0x11) {
      unsigned __int8 v62 = 0;
    }
    else {
      unsigned __int8 v62 = 16 - v61;
    }
    uint64_t v65 = v19;
    uint64_t v63 = *v19;
    uint64_t v64 = v65[1];
    if (v64) {
      float v66 = (__int16 *)(v64 + v28 * v20 + 2 * *(void *)&v18);
    }
    else {
      float v66 = 0;
    }
    uint64_t v67 = (uint16x8_t *)(v63 + v27 * v20 + 2 * *(void *)&v18);
    if (v16 >= 0) {
      uint64_t v68 = v16;
    }
    else {
      uint64_t v68 = v16 + 1;
    }
    uint64_t v69 = *v22;
    int16x4_t v70 = (unsigned char *)(v22[1] + v26 * (v68 >> 1) + v15);
    size_t v71 = (int8x8_t *)(v69 + v25 * v16 + v15);
    _S8 = v21[8].f32[1];
    _Q23.i32[0] = v21[11].i32[1];
    _S24 = v21[13].f32[1];
    __asm { FCVT            H15, S14 }
    short float v421 = _H15;
    __asm { FCVT            H15, S30 }
    short float v420 = _H15;
    float v431 = v21[7].f32[1];
    __asm { FCVT            H0, S0 }
    short float v419 = _H0;
    float v430 = v21[8].f32[0];
    __asm { FCVT            H1, S1 }
    short float v418 = _H1;
    __asm { FCVT            H1, S8 }
    short float v417 = _H1;
    __asm { FCVT            H1, S24 }
    short float v392 = _H1;
    float v395 = v21[14].f32[0];
    __asm { FCVT            H1, S27 }
    float v394 = v21[14].f32[1];
    __asm { FCVT            H0, S0 }
    short float v390 = _H0;
    short float v391 = _H1;
    float v393 = v21[15].f32[0];
    __asm { FCVT            H0, S15 }
    float v84 = (float)v31;
    short float v389 = _H0;
    float v407 = v21[9].f32[0];
    __asm { FCVT            H0, S5 }
    short float v388 = _H0;
    float v406 = v21[9].f32[1];
    __asm { FCVT            H0, S7 }
    short float v387 = _H0;
    float v405 = v21[10].f32[0];
    __asm { FCVT            H0, S16 }
    short float v386 = _H0;
    float v404 = v21[10].f32[1];
    __asm { FCVT            H0, S20 }
    short float v385 = _H0;
    float v402 = v21[11].f32[0];
    __asm { FCVT            H0, S21 }
    short float v384 = _H0;
    float v401 = *(float *)_Q23.i32;
    __asm { FCVT            H0, S23 }
    short float v383 = _H0;
    float v399 = v21[12].f32[0];
    __asm { FCVT            H0, S4 }
    short float v382 = _H0;
    float v398 = v21[12].f32[1];
    __asm { FCVT            H0, S25 }
    short float v381 = _H0;
    uint16x8_t v432 = (uint16x8_t)vdupq_n_s16(v62);
    float v414 = _Q6.f32[0];
    float v412 = a5.f32[0];
    _Q0.i16[1] = a5.i16[3];
    float v379 = a5.f32[1];
    float v380 = _Q6.f32[1];
    float v396 = v21[13].f32[0];
    __asm { FCVT            H0, S26 }
    short float v378 = *(short float *)_Q0.i16;
    uint64_t v368 = *v24;
    uint64_t v369 = *v23;
    unint64_t v366 = v17;
    uint64_t v367 = v24[1];
    uint64_t v365 = v23[1];
    float v377 = v45;
    float16x8_t v376 = v59;
    float v375 = _S8;
    float v403 = (float)v34;
    float v400 = (float)v32;
    float v397 = v21[5].f32[0];
    float16x8_t v374 = v57;
    float32_t v372 = v21[5].f32[1];
    float v373 = v47;
    float32_t v370 = v21[7].f32[0];
    float32_t v371 = v21[4].f32[1];
    float v364 = _S11;
    do
    {
      float v94 = (char *)v71 + v25;
      float v95 = &v67->i8[v27];
      float v96 = (char *)v66 + v28;
      if ((int)v14 < 8)
      {
        unint64_t v211 = 0;
        float v100 = (__int16 *)((char *)v66 + v28);
        float v99 = (uint16x8_t *)((char *)v67 + v27);
        float v210 = v70;
        float v98 = (int8x8_t *)((char *)v71 + v25);
      }
      else
      {
        uint64_t v97 = 0;
        float v98 = (int8x8_t *)((char *)v71 + v25);
        float v99 = (uint16x8_t *)((char *)v67 + v27);
        float v100 = (__int16 *)((char *)v66 + v28);
        do
        {
          int8x8_t v101 = *(int8x8_t *)&v70[v97];
          *(int8x8_t *)v102.i8 = vzip1_s8(v101, 0);
          v102.u64[1] = (unint64_t)vzip2_s8(v101, 0);
          float16x8_t v103 = vcvtq_f16_u16(v102);
          int16x8_t v104 = (int16x8_t)vmlaq_f16(v410, v413, v103);
          int8x16_t v105 = (int8x16_t)vmlaq_f16(v409, v411, v103);
          v103.i64[0] = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
          *(int16x4_t *)v106.i8 = vuzp1_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v103.i8);
          *(int16x4_t *)v103.i8 = vuzp2_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v103.i8);
          v103.i64[1] = v103.i64[0];
          v106.i64[1] = v103.i64[0];
          float16x8_t v107 = (float16x8_t)vzip1q_s16((int16x8_t)v103, (int16x8_t)v103);
          float16x8_t v108 = (float16x8_t)vzip1q_s16(v106, v106);
          v104.i64[0] = vextq_s8(v105, v105, 8uLL).u64[0];
          *(float16x4_t *)v104.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v104.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v104.i8));
          v104.i64[1] = v107.i64[0];
          float16x8_t v109 = (float16x8_t)vzip1q_s16(v104, v104);
          int8x8_t v110 = *v71++;
          *(int8x8_t *)v106.i8 = vzip1_s8(v110, 0);
          v106.u64[1] = (unint64_t)vzip2_s8(v110, 0);
          float16x8_t v111 = vcvtq_f16_u16((uint16x8_t)v106);
          int8x8_t v112 = *v98++;
          *(int8x8_t *)v113.i8 = vzip1_s8(v112, 0);
          v113.u64[1] = (unint64_t)vzip2_s8(v112, 0);
          float16x8_t v114 = vcvtq_f16_u16(v113);
          float16x8_t v115 = vsubq_f16(v111, v415);
          float16x8_t v116 = vsubq_f16(v114, v415);
          float16x8_t v117 = vmlaq_n_f16(v107, v115, v416);
          float16x8_t v118 = vmlaq_n_f16(v107, v116, v416);
          float16x8_t v119 = vmlaq_n_f16(v109, v115, v416);
          float16x8_t v120 = vmlaq_n_f16(v109, v116, v416);
          float16x8_t v121 = vmlaq_n_f16(v108, v115, v416);
          float16x8_t v122 = vmlaq_n_f16(v108, v116, v416);
          float16x8_t v123 = v59;
          v124.i64[0] = 0x9000900090009000;
          v124.i64[1] = 0x9000900090009000;
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), v124));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          v128.i16[0] = result->i16[v127.u32[0]];
          v128.i16[1] = result->i16[v127.u32[1]];
          v128.i16[2] = result->i16[v127.u32[2]];
          v128.i16[3] = result->i16[v127.u32[3]];
          v128.i16[4] = result->i16[v126.u32[0]];
          v128.i16[5] = result->i16[v126.u32[1]];
          v128.i16[6] = result->i16[v126.u32[2]];
          v128.i16[7] = result->i16[v126.u32[3]];
          uint16x8_t v129 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v124));
          uint32x4_t v130 = vmovl_high_u16(v129);
          uint32x4_t v131 = vmovl_u16(*(uint16x4_t *)v129.i8);
          v119.i16[0] = result->i16[v131.u32[0]];
          v119.i16[1] = result->i16[v131.u32[1]];
          v119.i16[2] = result->i16[v131.u32[2]];
          v119.i16[3] = result->i16[v131.u32[3]];
          v119.i16[4] = result->i16[v130.u32[0]];
          v119.i16[5] = result->i16[v130.u32[1]];
          v119.i16[6] = result->i16[v130.u32[2]];
          v119.i16[7] = result->i16[v130.u32[3]];
          uint16x8_t v132 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v124));
          uint32x4_t v133 = vmovl_high_u16(v132);
          float16x8_t v134 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v132.i8);
          v134.i16[0] = result->i16[v134.u32[0]];
          v134.i16[1] = result->i16[v134.u32[1]];
          v134.i16[2] = result->i16[v134.u32[2]];
          v134.i16[3] = result->i16[v134.u32[3]];
          v134.i16[4] = result->i16[v133.u32[0]];
          v134.i16[5] = result->i16[v133.u32[1]];
          v134.i16[6] = result->i16[v133.u32[2]];
          v134.i16[7] = result->i16[v133.u32[3]];
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v124));
          uint32x4_t v136 = vmovl_high_u16(v135);
          float16x8_t v137 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v135.i8);
          v137.i16[0] = result->i16[v137.u32[0]];
          v137.i16[1] = result->i16[v137.u32[1]];
          v137.i16[2] = result->i16[v137.u32[2]];
          v137.i16[3] = result->i16[v137.u32[3]];
          v137.i16[4] = result->i16[v136.u32[0]];
          v137.i16[5] = result->i16[v136.u32[1]];
          v137.i16[6] = result->i16[v136.u32[2]];
          v137.i16[7] = result->i16[v136.u32[3]];
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v124));
          uint32x4_t v139 = vmovl_high_u16(v138);
          float16x8_t v140 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v138.i8);
          v140.i16[0] = result->i16[v140.u32[0]];
          v140.i16[1] = result->i16[v140.u32[1]];
          v140.i16[2] = result->i16[v140.u32[2]];
          v140.i16[3] = result->i16[v140.u32[3]];
          v140.i16[4] = result->i16[v139.u32[0]];
          v140.i16[5] = result->i16[v139.u32[1]];
          v140.i16[6] = result->i16[v139.u32[2]];
          v140.i16[7] = result->i16[v139.u32[3]];
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v124));
          float16x8_t v142 = (float16x8_t)vmovl_high_u16(v141);
          *(void *)&long long v143 = v142.u32[2];
          *((void *)&v143 + 1) = v142.u32[3];
          long long v144 = v143;
          *(void *)&long long v143 = v142.u32[0];
          *((void *)&v143 + 1) = v142.u32[1];
          uint32x4_t v145 = vmovl_u16(*(uint16x4_t *)v141.i8);
          v142.i16[0] = result->i16[v145.u32[0]];
          v142.i16[1] = result->i16[v145.u32[1]];
          v142.i16[2] = result->i16[v145.u32[2]];
          v142.i16[3] = result->i16[v145.u32[3]];
          v142.i16[4] = result->i16[v143];
          v142.i16[5] = result->i16[*((void *)&v143 + 1)];
          v142.i16[6] = result->i16[v144];
          v142.i16[7] = result->i16[*((void *)&v144 + 1)];
          uint16x8_t v146 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v128, v392), v119, v391), v134, v390), vmaxq_f16(vmaxq_f16(v128, v119), v134), v389), (float16x8_t)0), v124));
          uint32x4_t v147 = vmovl_high_u16(v146);
          float16x8_t v148 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v146.i8);
          v148.i16[0] = *(_WORD *)&v43[2 * v148.u32[0]];
          v148.i16[1] = *(_WORD *)&v43[2 * v148.u32[1]];
          v148.i16[2] = *(_WORD *)&v43[2 * v148.u32[2]];
          v148.i16[3] = *(_WORD *)&v43[2 * v148.u32[3]];
          v148.i16[4] = *(_WORD *)&v43[2 * v147.u32[0]];
          v148.i16[5] = *(_WORD *)&v43[2 * v147.u32[1]];
          v148.i16[6] = *(_WORD *)&v43[2 * v147.u32[2]];
          v148.i16[7] = *(_WORD *)&v43[2 * v147.u32[3]];
          float16x8_t v149 = vmulq_f16(v128, v148);
          float16x8_t v150 = vmulq_f16(v119, v148);
          float16x8_t v151 = vmulq_f16(v134, v148);
          uint16x8_t v152 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, v392), v140, v391), v142, v390), vmaxq_f16(vmaxq_f16(v137, v140), v142), v389), (float16x8_t)0), v124));
          uint32x4_t v153 = vmovl_u16(*(uint16x4_t *)v152.i8);
          float16x8_t v154 = (float16x8_t)vmovl_high_u16(v152);
          uint64_t v155 = v154.u32[0];
          v154.i16[0] = *(_WORD *)&v43[2 * v153.u32[0]];
          float v156 = (__int16 *)&v43[2 * v154.u32[1]];
          float v157 = (__int16 *)&v43[2 * v154.u32[2]];
          v154.i16[1] = *(_WORD *)&v43[2 * v153.u32[1]];
          v154.i16[2] = *(_WORD *)&v43[2 * v153.u32[2]];
          v154.i16[3] = *(_WORD *)&v43[2 * v153.u32[3]];
          v154.i16[4] = *(_WORD *)&v43[2 * v155];
          v154.i16[5] = *v156;
          float v158 = (__int16 *)&v43[2 * v154.u32[3]];
          v154.i16[6] = *v157;
          v154.i16[7] = *v158;
          float16x8_t v159 = vmulq_f16(v137, v154);
          _Q23 = vmulq_f16(v140, v154);
          float16x8_t v160 = vmulq_f16(v142, v154);
          float16x8_t v161 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v149, v388), v150, v387), v151, v386);
          float16x8_t v162 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v149, v385), v150, v384), v151, v383);
          float16x8_t v163 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v151, v378), v150, v381), v149, v382);
          float16x8_t v164 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v159, v388), _Q23, v387), v160, v386);
          float16x8_t v165 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v159, v385), _Q23, v384), v160, v383);
          float16x8_t v166 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v160, v378), _Q23, v381), v159, v382);
          uint16x8_t v167 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v161, (float16x8_t)0), v124));
          uint32x4_t v168 = vmovl_high_u16(v167);
          uint32x4_t v169 = vmovl_u16(*(uint16x4_t *)v167.i8);
          v170.i16[0] = *(_WORD *)&v50[2 * v169.u32[0]];
          v170.i16[1] = *(_WORD *)&v50[2 * v169.u32[1]];
          v170.i16[2] = *(_WORD *)&v50[2 * v169.u32[2]];
          v170.i16[3] = *(_WORD *)&v50[2 * v169.u32[3]];
          v170.i16[4] = *(_WORD *)&v50[2 * v168.u32[0]];
          v170.i16[5] = *(_WORD *)&v50[2 * v168.u32[1]];
          v170.i16[6] = *(_WORD *)&v50[2 * v168.u32[2]];
          v170.i16[7] = *(_WORD *)&v50[2 * v168.u32[3]];
          uint16x8_t v171 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v162, (float16x8_t)0), v124));
          uint32x4_t v172 = vmovl_high_u16(v171);
          uint32x4_t v173 = vmovl_u16(*(uint16x4_t *)v171.i8);
          v174.i16[0] = *(_WORD *)&v50[2 * v173.u32[0]];
          v174.i16[1] = *(_WORD *)&v50[2 * v173.u32[1]];
          v174.i16[2] = *(_WORD *)&v50[2 * v173.u32[2]];
          v174.i16[3] = *(_WORD *)&v50[2 * v173.u32[3]];
          v174.i16[4] = *(_WORD *)&v50[2 * v172.u32[0]];
          v174.i16[5] = *(_WORD *)&v50[2 * v172.u32[1]];
          v174.i16[6] = *(_WORD *)&v50[2 * v172.u32[2]];
          v174.i16[7] = *(_WORD *)&v50[2 * v172.u32[3]];
          uint16x8_t v175 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v163, (float16x8_t)0), v124));
          uint32x4_t v176 = vmovl_high_u16(v175);
          uint32x4_t v177 = vmovl_u16(*(uint16x4_t *)v175.i8);
          *(void *)&long long v143 = v177.u32[2];
          *((void *)&v143 + 1) = v177.u32[3];
          long long v178 = v143;
          *(void *)&long long v143 = v176.u32[0];
          v186.i16[0] = *(_WORD *)&v50[2 * v177.u32[0]];
          uint64_t v179 = v176.u32[1];
          uint64_t v180 = v176.u32[3];
          uint64_t v181 = v176.u32[2];
          uint16x8_t v182 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v164, (float16x8_t)0), v124));
          uint32x4_t v183 = vmovl_u16(*(uint16x4_t *)v182.i8);
          uint64_t v184 = v183.u32[1];
          uint64_t v185 = v183.u32[0];
          v186.i16[1] = *(_WORD *)&v50[2 * v177.u32[1]];
          v186.i16[2] = *(_WORD *)&v50[2 * v178];
          v186.i16[3] = *(_WORD *)&v50[2 * *((void *)&v178 + 1)];
          v186.i16[4] = *(_WORD *)&v50[2 * v143];
          v186.i16[5] = *(_WORD *)&v50[2 * v179];
          v186.i16[6] = *(_WORD *)&v50[2 * v181];
          v186.i16[7] = *(_WORD *)&v50[2 * v180];
          uint32x4_t v187 = vmovl_high_u16(v182);
          uint64_t v188 = v183.u32[3];
          uint64_t v189 = v183.u32[2];
          uint64_t v190 = v187.u32[1];
          uint64_t v191 = v187.u32[0];
          uint64_t v192 = v187.u32[3];
          uint64_t v193 = v187.u32[2];
          uint16x8_t v194 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v165, (float16x8_t)0), v124));
          uint32x4_t v195 = vmovl_u16(*(uint16x4_t *)v194.i8);
          v196.i16[0] = *(_WORD *)&v50[2 * v185];
          v196.i16[1] = *(_WORD *)&v50[2 * v184];
          v196.i16[2] = *(_WORD *)&v50[2 * v189];
          v196.i16[3] = *(_WORD *)&v50[2 * v188];
          v196.i16[4] = *(_WORD *)&v50[2 * v191];
          v196.i16[5] = *(_WORD *)&v50[2 * v190];
          v196.i16[6] = *(_WORD *)&v50[2 * v193];
          v196.i16[7] = *(_WORD *)&v50[2 * v192];
          uint32x4_t v197 = vmovl_high_u16(v194);
          *((void *)&v143 + 1) = v197.u32[3];
          uint64_t v198 = v197.u32[1];
          uint64_t v199 = v197.u32[0];
          uint64_t v200 = v197.u32[2];
          float16x8_t v201 = vminq_f16(vmaxq_f16(v166, (float16x8_t)0), v124);
          float16x8_t v59 = v123;
          uint16x8_t v202 = vcvtq_u16_f16(v201);
          uint32x4_t v203 = vmovl_u16(*(uint16x4_t *)v202.i8);
          v204.i16[0] = *(_WORD *)&v50[2 * v195.u32[0]];
          v204.i16[1] = *(_WORD *)&v50[2 * v195.u32[1]];
          v204.i16[2] = *(_WORD *)&v50[2 * v195.u32[2]];
          v204.i16[3] = *(_WORD *)&v50[2 * v195.u32[3]];
          v204.i16[4] = *(_WORD *)&v50[2 * v199];
          v204.i16[5] = *(_WORD *)&v50[2 * v198];
          v204.i16[6] = *(_WORD *)&v50[2 * v200];
          v204.i16[7] = *(_WORD *)&v50[2 * *((void *)&v143 + 1)];
          uint32x4_t v205 = vmovl_high_u16(v202);
          v206.i16[0] = *(_WORD *)&v50[2 * v203.u32[0]];
          v206.i16[1] = *(_WORD *)&v50[2 * v203.u32[1]];
          v206.i16[2] = *(_WORD *)&v50[2 * v203.u32[2]];
          v206.i16[3] = *(_WORD *)&v50[2 * v203.u32[3]];
          v206.i16[4] = *(_WORD *)&v50[2 * v205.u32[0]];
          v206.i16[5] = *(_WORD *)&v50[2 * v205.u32[1]];
          v206.i16[6] = *(_WORD *)&v50[2 * v205.u32[2]];
          v206.i16[7] = *(_WORD *)&v50[2 * v205.u32[3]];
          uint16x8_t v207 = v432;
          *v67++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v57, v170, v428), v174, v427), v186, v426), v57), v123)), v432);
          if (v66)
          {
            _Q23.i32[0] = v422.i32[0];
            float16x8_t v208 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v424, v170, v419), v174, v418), v186, v417);
            v433.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v424, v170, v425), v174, v421), v186, v420), v423), v422), v423), v422)), v432);
            v433.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(v208), v432);
            vst2q_s16(v66, v433);
            v66 += 16;
            uint16x8_t v207 = v432;
          }
          _S3 = v371;
          _S9 = v372;
          float v84 = v429;
          _S30 = v370;
          _Q0 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v57, v196, v428), v204, v427), v206, v426), v57), v59)), v207);
          *v99++ = _Q0;
          if (v100)
          {
            _Q0 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v424, v196, v425), v204, v421), v206, v420), v423), v422), v423), v422)), v207);
            uint16x8_t v209 = vshlq_u16(vcvtq_u16_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v424, v196, v419), v204, v418), v206, v417)), v207);
            vst2q_s16(v100, *(int16x8x2_t *)_Q0.i8);
            v100 += 16;
          }
          v97 += 8;
        }
        while ((int)v97 < (int)v14 - 7);
        float v210 = &v70[v97];
        unint64_t v211 = v14 & 0xFFFFFFF8;
        uint64_t v26 = v365;
        unint64_t v17 = v366;
        _S11 = v364;
      }
      while (v14 > v211)
      {
        _Q0.i8[0] = v210[1];
        float v212 = (float)_Q0.u32[0] - v84;
        unsigned int v213 = LODWORD(v380);
        float v214 = v380 * v212;
        LOBYTE(v213) = v71->i8[0];
        float v215 = _S11 * (float)((float)v213 - v45);
        float v216 = (float)(v380 * v212) + v215;
        float v217 = 8191.0;
        if (v216 <= 8191.0)
        {
          float v217 = (float)(v380 * v212) + v215;
          if (v216 < 0.0) {
            float v217 = 0.0;
          }
        }
        LOBYTE(v216) = *v210;
        float v218 = (float)LODWORD(v216) - v84;
        float v219 = (float)(v379 * v212) + (float)(v218 * v412);
        float v220 = 8191.0;
        if ((float)(v215 + v219) <= 8191.0)
        {
          float v220 = v215 + v219;
          if ((float)(v215 + v219) < 0.0) {
            float v220 = 0.0;
          }
        }
        float v221 = v414 * v218;
        float v222 = (float)(v414 * v218) + v215;
        float v223 = 8191.0;
        if (v222 <= 8191.0)
        {
          float v223 = v222;
          if (v222 < 0.0) {
            float v223 = 0.0;
          }
        }
        LOBYTE(v222) = v71->i8[1];
        float v224 = _S11 * (float)((float)LODWORD(v222) - v45);
        float v225 = 8191.0;
        if ((float)(v214 + v224) <= 8191.0)
        {
          float v225 = v214 + v224;
          if ((float)(v214 + v224) < 0.0) {
            float v225 = 0.0;
          }
        }
        float v226 = _S30;
        float v227 = 8191.0;
        if ((float)(v219 + v224) <= 8191.0)
        {
          float v227 = v219 + v224;
          if ((float)(v219 + v224) < 0.0) {
            float v227 = 0.0;
          }
        }
        float v228 = v221 + v224;
        float v229 = 8191.0;
        if ((float)(v221 + v224) <= 8191.0)
        {
          float v229 = v221 + v224;
          if (v228 < 0.0) {
            float v229 = 0.0;
          }
        }
        LOBYTE(v228) = v98->i8[0];
        float v230 = _S11 * (float)((float)LODWORD(v228) - v45);
        float v231 = 8191.0;
        if ((float)(v214 + v230) <= 8191.0)
        {
          float v231 = v214 + v230;
          if ((float)(v214 + v230) < 0.0) {
            float v231 = 0.0;
          }
        }
        float v232 = 8191.0;
        if ((float)(v219 + v230) <= 8191.0)
        {
          float v232 = v219 + v230;
          if ((float)(v219 + v230) < 0.0) {
            float v232 = 0.0;
          }
        }
        float v233 = v221 + v230;
        float v234 = 8191.0;
        if (v233 <= 8191.0)
        {
          float v234 = v233;
          if (v233 < 0.0) {
            float v234 = 0.0;
          }
        }
        _Q23.i8[0] = v98->i8[1];
        float v235 = _S11 * (float)((float)_Q23.u32[0] - v45);
        float v236 = v214 + v235;
        BOOL v237 = (float)(v214 + v235) <= 8191.0;
        float v238 = 8191.0;
        if (v237)
        {
          float v238 = v236;
          if (v236 < 0.0) {
            float v238 = 0.0;
          }
        }
        float v239 = v219 + v235;
        BOOL v237 = (float)(v219 + v235) <= 8191.0;
        float v240 = 8191.0;
        if (v237)
        {
          float v240 = v239;
          if (v239 < 0.0) {
            float v240 = 0.0;
          }
        }
        float v241 = v221 + v235;
        float v242 = 8191.0;
        if (v241 <= 8191.0)
        {
          float v242 = v241;
          if (v241 < 0.0) {
            float v242 = 0.0;
          }
        }
        _H0 = result->i16[llroundf(fminf(fmaxf(v217, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H1 = result->i16[llroundf(fminf(fmaxf(v220, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = result->i16[llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H16 = result->i16[llroundf(fminf(fmaxf(v225, 0.0), 8191.0))];
        _H21 = result->i16[llroundf(fminf(fmaxf(v227, 0.0), 8191.0))];
        _H23 = result->i16[llroundf(fminf(fmaxf(v229, 0.0), 8191.0))];
        _H30 = result->i16[llroundf(fminf(fmaxf(v231, 0.0), 8191.0))];
        _H12 = result->i16[llroundf(fminf(fmaxf(v232, 0.0), 8191.0))];
        _H29 = result->i16[llroundf(fminf(fmaxf(v234, 0.0), 8191.0))];
        _H25 = result->i16[llroundf(fminf(fmaxf(v238, 0.0), 8191.0))];
        _H26 = result->i16[llroundf(fminf(fmaxf(v240, 0.0), 8191.0))];
        _H27 = result->i16[llroundf(fminf(fmaxf(v242, 0.0), 8191.0))];
        float v258 = (float)((float)((float)(v395 * _S1) + (float)(_S24 * _S0)) + (float)(v394 * _S2))
             + (float)(v393 * fmaxf(_S0, fmaxf(_S1, _S2)));
        float v259 = 8191.0;
        if (v258 <= 8191.0)
        {
          float v259 = v258;
          if (v258 < 0.0) {
            float v259 = 0.0;
          }
        }
        float v260 = _S9;
        __asm
        {
          FCVT            S7, H16
          FCVT            S20, H21
          FCVT            S21, H23
        }
        _H9 = *(_WORD *)&v43[2 * llroundf(v259)];
        float v265 = (float)((float)((float)(v395 * _S20) + (float)(_S24 * _S7)) + (float)(v394 * _S21))
             + (float)(v393 * fmaxf(_S7, fmaxf(_S20, _S21)));
        float v266 = 8191.0;
        if (v265 <= 8191.0)
        {
          float v266 = v265;
          if (v265 < 0.0) {
            float v266 = 0.0;
          }
        }
        __asm
        {
          FCVT            S30, H30
          FCVT            S12, H12
          FCVT            S29, H29
        }
        _H16 = *(_WORD *)&v43[2 * llroundf(v266)];
        float v271 = (float)((float)((float)(v395 * _S12) + (float)(_S24 * _S30)) + (float)(v394 * _S29))
             + (float)(v393 * fmaxf(_S30, fmaxf(_S12, _S29)));
        float v272 = 8191.0;
        if (v271 <= 8191.0)
        {
          float v272 = v271;
          if (v271 < 0.0) {
            float v272 = 0.0;
          }
        }
        float v273 = _S11;
        __asm
        {
          FCVT            S23, H25
          FCVT            S25, H26
          FCVT            S26, H27
        }
        _H27 = *(_WORD *)&v43[2 * llroundf(v272)];
        float v278 = (float)((float)((float)(v395 * _S25) + (float)(_S24 * _S23)) + (float)(v394 * _S26))
             + (float)(v393 * fmaxf(_S23, fmaxf(_S25, _S26)));
        float v279 = 8191.0;
        if (v278 <= 8191.0)
        {
          float v279 = v278;
          if (v278 < 0.0) {
            float v279 = 0.0;
          }
        }
        __asm { FCVT            S6, H9 }
        float v281 = _S0 * _S6;
        float v282 = _S1 * _S6;
        float v283 = _S2 * _S6;
        __asm { FCVT            S6, H16 }
        _S7 = _S7 * _S6;
        float v286 = _S20 * _S6;
        _S6 = _S21 * _S6;
        __asm { FCVT            S20, H27 }
        float v289 = _S30 * _S20;
        float v290 = _S12 * _S20;
        float v291 = _S29 * _S20;
        _H28 = *(_WORD *)&v43[2 * llroundf(v279)];
        __asm { FCVT            S28, H28 }
        float v294 = _S23 * _S28;
        float v295 = _S25 * _S28;
        float v296 = _S26 * _S28;
        float v297 = (float)((float)(v406 * v282) + (float)(v281 * v407)) + (float)(v283 * v405);
        float v298 = (float)((float)(v402 * v282) + (float)(v281 * v404)) + (float)(v283 * v401);
        _S0 = (float)((float)(v398 * v282) + (float)(v281 * v399)) + (float)(v283 * v396);
        float v300 = (float)((float)(v406 * v286) + (float)(_S7 * v407)) + (float)(_S6 * v405);
        float v301 = (float)((float)(v402 * v286) + (float)(_S7 * v404)) + (float)(_S6 * v401);
        float v302 = (float)((float)(v398 * v286) + (float)(_S7 * v399)) + (float)(_S6 * v396);
        float v303 = (float)((float)(v406 * v290) + (float)(v289 * v407)) + (float)(v291 * v405);
        float v304 = (float)((float)(v402 * v290) + (float)(v289 * v404)) + (float)(v291 * v401);
        float v305 = (float)((float)(v398 * v290) + (float)(v289 * v399)) + (float)(v291 * v396);
        float v306 = (float)((float)(v406 * v295) + (float)(v294 * v407)) + (float)(v296 * v405);
        float v307 = (float)((float)(v402 * v295) + (float)(v294 * v404)) + (float)(v296 * v401);
        float v308 = (float)((float)(v398 * v295) + (float)(v294 * v399)) + (float)(v296 * v396);
        LOWORD(_S6) = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v297, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        LOWORD(_S7) = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v298, 0.0), 8191.0))];
        __asm { FCVT            S29, H7 }
        LOWORD(_S0) = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(_S0, 0.0), 8191.0))];
        __asm { FCVT            S30, H0 }
        _H7 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v300, 0.0), 8191.0))];
        _H21 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v301, 0.0), 8191.0))];
        _H27 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v302, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v303, 0.0), 8191.0))];
        _H2 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v304, 0.0), 8191.0))];
        _H26 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v305, 0.0), 8191.0))];
        _H20 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v306, 0.0), 8191.0))];
        _H25 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v307, 0.0), 8191.0))];
        _H0 = *(_WORD *)&v50[2 * llroundf(fminf(fmaxf(v308, 0.0), 8191.0))];
        _S9 = v260;
        float v321 = (float)((float)((float)(v397 * _S29) + (float)(_S3 * _S6)) + (float)(v260 * _S30)) + v400;
        float v322 = v403;
        if (v321 <= v403)
        {
          float v322 = (float)((float)((float)(v397 * _S29) + (float)(_S3 * _S6)) + (float)(v260 * _S30)) + v400;
          if (v321 < v400) {
            float v322 = v400;
          }
        }
        v67->i16[0] = llroundf(v322) << v62;
        if (v66)
        {
          float v323 = v226;
          float v324 = (float)((float)(v46 + (float)(_S6 * v408)) + (float)(_S29 * _S14)) + (float)(_S30 * v226);
          float v325 = v49;
          float v326 = v373;
          if (v324 <= v49)
          {
            float v325 = (float)((float)(v46 + (float)(_S6 * v408)) + (float)(_S29 * _S14)) + (float)(_S30 * v226);
            if (v324 < v373) {
              float v325 = v373;
            }
          }
          float v327 = v375;
          float v328 = (float)((float)(v46 + (float)(_S6 * v431)) + (float)(_S29 * v430)) + (float)(_S30 * v375);
          *float v66 = llroundf(v325) << v62;
          float v329 = v49;
          float v45 = v377;
          _S11 = v273;
          if (v328 <= v49)
          {
            float v329 = v328;
            if (v328 < v373) {
              float v329 = v373;
            }
          }
          v66[1] = llroundf(v329) << v62;
          v66 += 2;
          float v84 = v429;
          float16x8_t v57 = v374;
          float16x8_t v59 = v376;
          _S30 = v323;
        }
        else
        {
          float v45 = v377;
          float v326 = v373;
          _S11 = v273;
          float16x8_t v57 = v374;
          float16x8_t v59 = v376;
          _S30 = v226;
          float v327 = v375;
          float v84 = v429;
        }
        __asm
        {
          FCVT            S7, H7
          FCVT            S16, H21
          FCVT            S21, H27
        }
        *(float *)_Q23.i32 = (float)((float)((float)(v397 * _S16) + (float)(_S3 * _S7)) + (float)(_S9 * _S21)) + v400;
        float v333 = v403;
        if (*(float *)_Q23.i32 <= v403)
        {
          float v333 = (float)((float)((float)(v397 * _S16) + (float)(_S3 * _S7)) + (float)(_S9 * _S21)) + v400;
          if (*(float *)_Q23.i32 < v400) {
            float v333 = v400;
          }
        }
        v67->i16[1] = llroundf(v333) << v62;
        if (v66)
        {
          *(float *)_Q23.i32 = (float)((float)(v46 + (float)(_S7 * v408)) + (float)(_S16 * _S14)) + (float)(_S21 * _S30);
          float v334 = v49;
          if (*(float *)_Q23.i32 <= v49)
          {
            float v334 = (float)((float)(v46 + (float)(_S7 * v408)) + (float)(_S16 * _S14)) + (float)(_S21 * _S30);
            if (*(float *)_Q23.i32 < v326) {
              float v334 = v326;
            }
          }
          float v335 = (float)((float)(v46 + (float)(_S7 * v431)) + (float)(_S16 * v430)) + (float)(_S21 * v327);
          *float v66 = llroundf(v334) << v62;
          float v336 = v49;
          if (v335 <= v49)
          {
            float v336 = v335;
            if (v335 < v326) {
              float v336 = v326;
            }
          }
          v66[1] = llroundf(v336) << v62;
          v66 += 2;
        }
        __asm
        {
          FCVT            S1, H1
          FCVT            S2, H2
          FCVT            S7, H26
        }
        float v340 = (float)((float)((float)(v397 * _S2) + (float)(_S3 * _S1)) + (float)(_S9 * _S7)) + v400;
        float v341 = v403;
        if (v340 <= v403)
        {
          float v341 = (float)((float)((float)(v397 * _S2) + (float)(_S3 * _S1)) + (float)(_S9 * _S7)) + v400;
          if (v340 < v400) {
            float v341 = v400;
          }
        }
        v99->i16[0] = llroundf(v341) << v62;
        if (v100)
        {
          float v342 = (float)((float)(v46 + (float)(_S1 * v408)) + (float)(_S2 * _S14)) + (float)(_S7 * _S30);
          float v343 = v49;
          if (v342 <= v49)
          {
            float v343 = (float)((float)(v46 + (float)(_S1 * v408)) + (float)(_S2 * _S14)) + (float)(_S7 * _S30);
            if (v342 < v326) {
              float v343 = v326;
            }
          }
          float v344 = (float)((float)(v46 + (float)(_S1 * v431)) + (float)(_S2 * v430)) + (float)(_S7 * v327);
          *float v100 = llroundf(v343) << v62;
          float v345 = v49;
          if (v344 <= v49)
          {
            float v345 = v344;
            if (v344 < v326) {
              float v345 = v326;
            }
          }
          v100[1] = llroundf(v345) << v62;
          v100 += 2;
        }
        __asm
        {
          FCVT            S1, H20
          FCVT            S2, H25
          FCVT            S0, H0
        }
        float v348 = (float)((float)((float)(v397 * _S2) + (float)(_S3 * _S1)) + (float)(_S9 * *(float *)_Q0.i32)) + v400;
        float v349 = v403;
        if (v348 <= v403)
        {
          float v349 = (float)((float)((float)(v397 * _S2) + (float)(_S3 * _S1)) + (float)(_S9 * *(float *)_Q0.i32)) + v400;
          if (v348 < v400) {
            float v349 = v400;
          }
        }
        v99->i16[1] = llroundf(v349) << v62;
        if (v100)
        {
          float v350 = (float)((float)(v46 + (float)(_S1 * v408)) + (float)(_S2 * _S14)) + (float)(*(float *)_Q0.i32 * _S30);
          float v351 = v49;
          if (v350 <= v49)
          {
            float v351 = (float)((float)(v46 + (float)(_S1 * v408)) + (float)(_S2 * _S14)) + (float)(*(float *)_Q0.i32 * _S30);
            if (v350 < v326) {
              float v351 = v326;
            }
          }
          *(float *)_Q0.i32 = (float)((float)(v46 + (float)(_S1 * v431)) + (float)(_S2 * v430))
                            + (float)(*(float *)_Q0.i32 * v327);
          *float v100 = llroundf(v351) << v62;
          float v352 = v49;
          if (*(float *)_Q0.i32 <= v49)
          {
            float v352 = *(float *)_Q0.i32;
            if (*(float *)_Q0.i32 < v326) {
              float v352 = v326;
            }
          }
          v100[1] = llroundf(v352) << v62;
          v100 += 2;
        }
        v211 += 2;
        v210 += 2;
        size_t v71 = (int8x8_t *)((char *)v71 + 2);
        float v98 = (int8x8_t *)((char *)v98 + 2);
        uint64_t v67 = (uint16x8_t *)((char *)v67 + 4);
        float v99 = (uint16x8_t *)((char *)v99 + 4);
      }
      uint64_t v27 = v368;
      uint64_t v25 = v369;
      size_t v71 = (int8x8_t *)&v94[v369];
      v70 += v26;
      uint64_t v67 = (uint16x8_t *)&v95[v368];
      uint64_t v28 = v367;
      float v66 = (__int16 *)&v96[v367];
      v13 += 2;
    }
    while (v17 > v13);
    if (v363 && v362)
    {
      uint64_t v353 = 0;
      uint64_t v354 = v359;
      do
      {
        if (v14)
        {
          unint64_t v355 = v14;
          float v356 = v29;
          float32_t v357 = v354;
          do
          {
            __int16 v358 = *v357++;
            *v356++ = v358 | (v358 << 8);
            --v355;
          }
          while (v355);
        }
        v354 += v360;
        v29 += v361;
        ++v353;
      }
      while (v353 != v17);
    }
    else if (v362)
    {
      do
      {
        if (v14) {
          uint64_t result = (float32x2_t *)memset(v29, 255, 2 * v14);
        }
        v29 += v361;
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Tone_Mat_TRC_xf444_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    uint64_t v13 = *(void *)((char *)result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = result[14];
    unint64_t v16 = result[13] * a2 / v7;
    uint64_t v17 = (void *)result[16];
    uint64_t v18 = result[15] + 2 * v16;
    uint64_t v19 = result[19];
    uint64_t v20 = (uint64_t *)result[7];
    uint64_t v21 = (uint64_t *)result[8];
    size_t v22 = (uint64_t *)result[17];
    uint64_t v23 = *v21;
    uint64_t v24 = v21[1];
    uint64_t v25 = v21[2];
    uint64_t v26 = v20[2];
    uint64_t v27 = (unsigned __int8 *)(v26 + v25 * v13 + v12);
    uint64_t v28 = *v22;
    uint64_t v29 = v22[1];
    uint64_t v30 = v22[2];
    uint64_t v31 = v17[2];
    uint64_t v32 = (char *)(v31 + v30 * v18 + 2 * v15);
    float v33 = 8191.0 / (float)*(unsigned int *)(v19 + 128);
    LOWORD(a5) = *(_WORD *)(v19 + 140);
    float v34 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v19 + 142);
    float v35 = (float)LODWORD(a5);
    float v36 = v33 * *(float *)v19;
    float v249 = v33 * *(float *)(v19 + 16);
    float v250 = v33 * *(float *)(v19 + 8);
    float v37 = v33 * *(float *)(v19 + 20);
    *(float *)&unsigned int v38 = v33 * *(float *)(v19 + 28);
    float v247 = *(float *)&v38;
    float v248 = v37;
    LOWORD(v38) = *(_WORD *)(v19 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v19 + 152);
    float v43 = (float)v38;
    float v44 = *(float *)(v19 + 40);
    float v45 = *(float *)(v19 + 44);
    float v46 = *(float *)(v19 + 52);
    float v47 = *(float *)(v19 + 56);
    float v48 = *(float *)(v19 + 64);
    float v245 = *(float *)(v19 + 76);
    float v246 = *(float *)(v19 + 72);
    float v243 = *(float *)(v19 + 84);
    float v244 = *(float *)(v19 + 80);
    float v242 = *(float *)(v19 + 88);
    float v240 = *(float *)(v19 + 92);
    float v238 = *(float *)(v19 + 96);
    float v235 = *(float *)(v19 + 104);
    float v236 = *(float *)(v19 + 100);
    uint64_t v49 = v19 + 164;
    uint64_t result = (void *)(v19 + 16548);
    uint64_t v50 = v17[1];
    float v51 = (char *)(*v17 + v28 * v18 + 2 * v15);
    uint64_t v52 = v50 + v29 * v18 + 2 * v15;
    if (v50) {
      uint64_t v53 = (char *)v52;
    }
    else {
      uint64_t v53 = 0;
    }
    unsigned int v54 = *(unsigned __int8 *)(v19 + 132);
    char v55 = 16 - v54;
    _CF = v54 >= 0x11;
    uint64_t v58 = *v20;
    uint64_t v57 = v20[1];
    uint64_t v59 = v58 + v23 * v13;
    if (_CF) {
      char v55 = 0;
    }
    uint64_t v60 = v57 + v24 * (v13 / 2);
    uint64_t v61 = v19 + 32932;
    unsigned __int8 v62 = (unsigned char *)(v59 + v12);
    uint64_t v63 = v60 + v12;
    char v64 = v55;
    float v65 = *(float *)(v19 + 108);
    float v66 = *(float *)(v19 + 112);
    _S1 = *(float *)(v19 + 120);
    float v233 = _S1;
    float v234 = *(float *)(v19 + 116);
    float v231 = v40;
    float v232 = (float)LODWORD(a5);
    float v229 = *(float *)(v19 + 68);
    float v230 = *(float *)(v19 + 60);
    float v241 = v42;
    float v239 = *(float *)(v19 + 36);
    float v237 = *(float *)(v19 + 48);
    float v227 = v34;
    float v228 = v36;
    float v225 = v66;
    float v226 = v65;
    do
    {
      uint64_t v68 = &v62[v23];
      uint64_t v69 = &v53[v29];
      int16x4_t v70 = &v51[v28];
      if (v11)
      {
        unint64_t v71 = 0;
        float16x8_t v72 = &v62[v23];
        int16x8_t v73 = &v53[v29];
        float v74 = &v51[v28];
        do
        {
          LOBYTE(_S1) = *(unsigned char *)(v63 + v71 + 1);
          float v75 = (float)LODWORD(_S1) - v35;
          unsigned int v76 = LODWORD(v250);
          float v77 = v250 * v75;
          LOBYTE(v76) = *v62;
          float v78 = v36 * (float)((float)v76 - v34);
          float v79 = (float)(v250 * v75) + v78;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = (float)(v250 * v75) + v78;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          LOBYTE(v79) = *(unsigned char *)(v63 + v71);
          float v81 = (float)LODWORD(v79) - v35;
          float v82 = (float)(v248 * v75) + (float)(v81 * v249);
          float v83 = 8191.0;
          if ((float)(v78 + v82) <= 8191.0)
          {
            float v83 = v78 + v82;
            if ((float)(v78 + v82) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v247 * v81;
          float v85 = (float)(v247 * v81) + v78;
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          LOBYTE(v85) = v62[1];
          float v87 = v36 * (float)((float)LODWORD(v85) - v34);
          float v88 = 8191.0;
          if ((float)(v77 + v87) <= 8191.0)
          {
            float v88 = v77 + v87;
            if ((float)(v77 + v87) < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = 8191.0;
          if ((float)(v82 + v87) <= 8191.0)
          {
            float v89 = v82 + v87;
            if ((float)(v82 + v87) < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v84 + v87;
          BOOL v91 = (float)(v84 + v87) <= 8191.0;
          float v92 = 8191.0;
          if (v91)
          {
            float v92 = v90;
            if (v90 < 0.0) {
              float v92 = 0.0;
            }
          }
          LOBYTE(v90) = *v72;
          float v93 = v36 * (float)((float)LODWORD(v90) - v34);
          float v94 = 8191.0;
          if ((float)(v77 + v93) <= 8191.0)
          {
            float v94 = v77 + v93;
            if ((float)(v77 + v93) < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = 8191.0;
          if ((float)(v82 + v93) <= 8191.0)
          {
            float v95 = v82 + v93;
            if ((float)(v82 + v93) < 0.0) {
              float v95 = 0.0;
            }
          }
          float v96 = v84 + v93;
          BOOL v91 = (float)(v84 + v93) <= 8191.0;
          float v97 = 8191.0;
          if (v91)
          {
            float v97 = v96;
            if (v96 < 0.0) {
              float v97 = 0.0;
            }
          }
          LOBYTE(v5) = v72[1];
          float v98 = v36 * (float)((float)LODWORD(v5) - v34);
          float v99 = v77 + v98;
          BOOL v91 = (float)(v77 + v98) <= 8191.0;
          float v100 = 8191.0;
          if (v91)
          {
            float v100 = v99;
            if (v99 < 0.0) {
              float v100 = 0.0;
            }
          }
          float v101 = v82 + v98;
          BOOL v91 = (float)(v82 + v98) <= 8191.0;
          float v102 = 8191.0;
          if (v91)
          {
            float v102 = v101;
            if (v101 < 0.0) {
              float v102 = 0.0;
            }
          }
          float v103 = v84 + v98;
          float v104 = 8191.0;
          if (v103 <= 8191.0)
          {
            float v104 = v103;
            if (v103 < 0.0) {
              float v104 = 0.0;
            }
          }
          _H2 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S2, H2 }
          _H23 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S24, H23 }
          _H23 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S25, H23 }
          _H27 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v95, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v97, 0.0), 8191.0)));
          _H21 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v100, 0.0), 8191.0)));
          _H22 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v102, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v49 + 2 * llroundf(fminf(fmaxf(v104, 0.0), 8191.0)));
          float v123 = fmaxf(_S2, fmaxf(_S24, _S25));
          float v124 = (float)((float)((float)(v66 * _S24) + (float)(v65 * _S2)) + (float)(v234 * _S25))
               + (float)(v233 * v123);
          float v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            float v125 = (float)((float)((float)(v66 * _S24) + (float)(v65 * _S2)) + (float)(v234 * _S25))
                 + (float)(v233 * v123);
            if (v124 < 0.0) {
              float v125 = 0.0;
            }
          }
          __asm
          {
            FCVT            S1, H27
            FCVT            S3, H19
            FCVT            S19, H8
          }
          _H27 = *((_WORD *)result + llroundf(v125));
          float v130 = (float)((float)((float)(v66 * _S3) + (float)(v65 * _S1)) + (float)(v234 * _S19))
               + (float)(v233 * fmaxf(_S1, fmaxf(_S3, _S19)));
          float v131 = 8191.0;
          if (v130 <= 8191.0)
          {
            float v131 = v130;
            if (v130 < 0.0) {
              float v131 = 0.0;
            }
          }
          float v132 = v45;
          __asm
          {
            FCVT            S28, H29
            FCVT            S23, H23
            FCVT            S29, H30
          }
          _H30 = *((_WORD *)result + llroundf(v131));
          float v137 = (float)((float)((float)(v66 * _S23) + (float)(v65 * _S28)) + (float)(v234 * _S29))
               + (float)(v233 * fmaxf(_S28, fmaxf(_S23, _S29)));
          float v138 = 8191.0;
          if (v137 <= 8191.0)
          {
            float v138 = v137;
            if (v137 < 0.0) {
              float v138 = 0.0;
            }
          }
          float v139 = v44;
          __asm
          {
            FCVT            S21, H21
            FCVT            S22, H22
            FCVT            S26, H26
          }
          _H31 = *((_WORD *)result + llroundf(v138));
          float v144 = (float)((float)((float)(v66 * _S22) + (float)(v65 * _S21)) + (float)(v234 * _S26))
               + (float)(v233 * fmaxf(_S21, fmaxf(_S22, _S26)));
          float v145 = 8191.0;
          if (v144 <= 8191.0)
          {
            float v145 = v144;
            if (v144 < 0.0) {
              float v145 = 0.0;
            }
          }
          __asm { FCVT            S27, H27 }
          float v147 = _S2 * _S27;
          float v148 = _S24 * _S27;
          float v149 = _S25 * _S27;
          __asm { FCVT            S27, H30 }
          _S1 = _S1 * _S27;
          float v152 = _S3 * _S27;
          float v153 = _S19 * _S27;
          __asm { FCVT            S27, H31 }
          float v155 = _S28 * _S27;
          float v156 = _S23 * _S27;
          float v157 = _S29 * _S27;
          _H29 = *((_WORD *)result + llroundf(v145));
          __asm { FCVT            S29, H29 }
          float v160 = _S21 * _S29;
          float v161 = _S22 * _S29;
          float v162 = _S26 * _S29;
          float v163 = (float)((float)(v245 * v148) + (float)(v147 * v246)) + (float)(v149 * v244);
          float v164 = (float)((float)(v242 * v148) + (float)(v147 * v243)) + (float)(v149 * v240);
          float v165 = (float)((float)(v236 * v148) + (float)(v147 * v238)) + (float)(v149 * v235);
          float v166 = (float)((float)(v245 * v152) + (float)(_S1 * v246)) + (float)(v153 * v244);
          float v167 = (float)((float)(v242 * v152) + (float)(_S1 * v243)) + (float)(v153 * v240);
          float v168 = (float)((float)(v236 * v152) + (float)(_S1 * v238)) + (float)(v153 * v235);
          float v169 = (float)((float)(v245 * v156) + (float)(v155 * v246)) + (float)(v157 * v244);
          float v170 = (float)((float)(v242 * v156) + (float)(v155 * v243)) + (float)(v157 * v240);
          float v171 = (float)((float)(v236 * v156) + (float)(v155 * v238)) + (float)(v157 * v235);
          float v172 = (float)((float)(v245 * v161) + (float)(v160 * v246)) + (float)(v162 * v244);
          float v173 = (float)((float)(v242 * v161) + (float)(v160 * v243)) + (float)(v162 * v240);
          float v174 = (float)((float)(v236 * v161) + (float)(v160 * v238)) + (float)(v162 * v235);
          LOWORD(_S1) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          __asm { FCVT            S21, H1 }
          LOWORD(_S1) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v164, 0.0), 8191.0)));
          __asm { FCVT            S22, H1 }
          LOWORD(_S1) = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v165, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H1 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v166, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v168, 0.0), 8191.0)));
          _H26 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v169, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v171, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0)));
          _H25 = *(_WORD *)(v61 + 2 * llroundf(fminf(fmaxf(v174, 0.0), 8191.0)));
          float v44 = v139;
          float v187 = (float)(v139 * _S22) + (float)(v239 * _S21);
          float v45 = v132;
          float v188 = (float)(v187 + (float)(v132 * _S29)) + v39;
          float v5 = v41;
          if (v188 <= v41)
          {
            float v5 = v188;
            if (v188 < v39) {
              float v5 = v39;
            }
          }
          *(_WORD *)float v51 = llroundf(v5) << v64;
          if (v53)
          {
            float v189 = v231;
            float v190 = (float)((float)(v231 + (float)(_S21 * v237)) + (float)(_S22 * v46)) + (float)(_S29 * v47);
            float v5 = v43;
            if (v190 <= v43)
            {
              float v5 = (float)((float)(v231 + (float)(_S21 * v237)) + (float)(_S22 * v46)) + (float)(_S29 * v47);
              if (v190 < v241) {
                float v5 = v241;
              }
            }
            float v191 = v230;
            float v36 = v228;
            float v192 = (float)((float)(v231 + (float)(_S21 * v230)) + (float)(_S22 * v48)) + (float)(_S29 * v229);
            float v193 = v229;
            *(_WORD *)uint64_t v53 = llroundf(v5) << v64;
            float v194 = v43;
            float v65 = v226;
            float v34 = v227;
            float v66 = v225;
            if (v192 <= v43)
            {
              float v194 = v192;
              if (v192 < v241) {
                float v194 = v241;
              }
            }
            *((_WORD *)v53 + 1) = llroundf(v194) << v64;
            v53 += 4;
          }
          else
          {
            float v34 = v227;
            float v36 = v228;
            float v191 = v230;
            float v189 = v231;
            float v193 = v229;
            float v66 = v225;
            float v65 = v226;
          }
          __asm
          {
            FCVT            S1, H1
            FCVT            S3, H3
            FCVT            S19, H19
          }
          float v198 = (float)((float)((float)(v44 * _S3) + (float)(v239 * _S1)) + (float)(v132 * _S19)) + v39;
          float v199 = v41;
          if (v198 <= v41)
          {
            float v199 = (float)((float)((float)(v44 * _S3) + (float)(v239 * _S1)) + (float)(v132 * _S19)) + v39;
            if (v198 < v39) {
              float v199 = v39;
            }
          }
          *((_WORD *)v51 + 1) = llroundf(v199) << v64;
          if (v53)
          {
            float v200 = (float)((float)(v189 + (float)(_S1 * v237)) + (float)(_S3 * v46)) + (float)(_S19 * v47);
            float v201 = v43;
            if (v200 <= v43)
            {
              float v201 = (float)((float)(v189 + (float)(_S1 * v237)) + (float)(_S3 * v46)) + (float)(_S19 * v47);
              if (v200 < v241) {
                float v201 = v241;
              }
            }
            float v202 = (float)((float)(v189 + (float)(_S1 * v191)) + (float)(_S3 * v48)) + (float)(_S19 * v193);
            *(_WORD *)uint64_t v53 = llroundf(v201) << v64;
            float v203 = v43;
            if (v202 <= v43)
            {
              float v203 = v202;
              if (v202 < v241) {
                float v203 = v241;
              }
            }
            *((_WORD *)v53 + 1) = llroundf(v203) << v64;
            v53 += 4;
          }
          __asm
          {
            FCVT            S1, H26
            FCVT            S3, H27
            FCVT            S19, H28
          }
          float v207 = (float)((float)((float)(v44 * _S3) + (float)(v239 * _S1)) + (float)(v132 * _S19)) + v39;
          float v208 = v41;
          if (v207 <= v41)
          {
            float v208 = (float)((float)((float)(v44 * _S3) + (float)(v239 * _S1)) + (float)(v132 * _S19)) + v39;
            if (v207 < v39) {
              float v208 = v39;
            }
          }
          *(_WORD *)float v74 = llroundf(v208) << v64;
          if (v73)
          {
            float v209 = (float)((float)(v189 + (float)(_S1 * v237)) + (float)(_S3 * v46)) + (float)(_S19 * v47);
            float v210 = v43;
            if (v209 <= v43)
            {
              float v210 = (float)((float)(v189 + (float)(_S1 * v237)) + (float)(_S3 * v46)) + (float)(_S19 * v47);
              if (v209 < v241) {
                float v210 = v241;
              }
            }
            float v211 = (float)((float)(v189 + (float)(_S1 * v191)) + (float)(_S3 * v48)) + (float)(_S19 * v193);
            *(_WORD *)int16x8_t v73 = llroundf(v210) << v64;
            float v212 = v43;
            if (v211 <= v43)
            {
              float v212 = v211;
              if (v211 < v241) {
                float v212 = v241;
              }
            }
            *((_WORD *)v73 + 1) = llroundf(v212) << v64;
            v73 += 4;
          }
          __asm
          {
            FCVT            S1, H2
            FCVT            S2, H24
            FCVT            S3, H25
          }
          float v215 = (float)((float)((float)(v44 * _S2) + (float)(v239 * _S1)) + (float)(v132 * _S3)) + v39;
          float v216 = v41;
          if (v215 <= v41)
          {
            float v216 = (float)((float)((float)(v44 * _S2) + (float)(v239 * _S1)) + (float)(v132 * _S3)) + v39;
            if (v215 < v39) {
              float v216 = v39;
            }
          }
          *((_WORD *)v74 + 1) = llroundf(v216) << v64;
          if (v73)
          {
            float v217 = (float)((float)(v189 + (float)(_S1 * v237)) + (float)(_S2 * v46)) + (float)(_S3 * v47);
            float v218 = v43;
            if (v217 <= v43)
            {
              float v218 = (float)((float)(v189 + (float)(_S1 * v237)) + (float)(_S2 * v46)) + (float)(_S3 * v47);
              if (v217 < v241) {
                float v218 = v241;
              }
            }
            _S1 = (float)((float)(v189 + (float)(_S1 * v191)) + (float)(_S2 * v48)) + (float)(_S3 * v193);
            *(_WORD *)int16x8_t v73 = llroundf(v218) << v64;
            float v219 = v43;
            float v35 = v232;
            if (_S1 <= v43)
            {
              float v219 = _S1;
              if (_S1 < v241) {
                float v219 = v241;
              }
            }
            *((_WORD *)v73 + 1) = llroundf(v219) << v64;
            v73 += 4;
          }
          else
          {
            float v35 = v232;
          }
          v62 += 2;
          v72 += 2;
          v51 += 4;
          v74 += 4;
          v71 += 2;
        }
        while (v11 > v71);
      }
      unsigned __int8 v62 = &v68[v23];
      v63 += v24;
      float v51 = &v70[v28];
      uint64_t v53 = &v69[v29];
      v10 += 2;
    }
    while (v14 > v10);
    if (v26 && v31)
    {
      uint64_t v220 = 0;
      do
      {
        if (v11)
        {
          unint64_t v221 = v11;
          float v222 = v32;
          float v223 = v27;
          do
          {
            __int16 v224 = *v223++;
            *v222++ = v224 | (v224 << 8);
            --v221;
          }
          while (v221);
        }
        v27 += v25;
        v32 += v30;
        ++v220;
      }
      while (v220 != v14);
    }
    else if (v31)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v32, 255, 2 * v11);
        }
        v32 += v30;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_xf444_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_xf444_neon_fp16_GCD);
  return 0;
}

float32x2_t *vt_Copy_420vf_TRC_Mat_TRC_xf444_neon_fp16_GCD(float32x2_t *result, uint64_t a2, double a3, int16x4_t a4, float32x4_t a5, double a6, double a7, float32x4_t _Q5)
{
  uint64_t v8 = *(uint64_t *)((char *)&result[3] + 4);
  unint64_t v9 = 2 * result->u8[0];
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(unint64_t *)((char *)&result[2] + 4);
    uint64_t v14 = *(uint64_t *)((char *)&result[4] + 4);
    uint64_t v15 = *(void *)((char *)&result[5] + 4) + 2 * v10;
    unint64_t v16 = 2 * v11 - 2 * v10;
    float32x2_t v17 = result[14];
    uint64_t v18 = (void *)result[16];
    uint64_t v19 = *(void *)&result[15] + 2 * (*(void *)&result[13] * a2 / v9);
    uint64_t v20 = (float32x2_t *)result[19];
    uint64_t v21 = (void *)result[7];
    size_t v22 = (uint64_t *)result[8];
    uint64_t v23 = (uint64_t *)result[17];
    uint64_t v24 = *v22;
    uint64_t v25 = v22[1];
    uint64_t v327 = v22[2];
    uint64_t v330 = v21[2];
    uint64_t v26 = *v23;
    uint64_t v27 = v23[1];
    uint64_t v328 = v23[2];
    uint64_t v329 = v18[2];
    uint64_t v28 = (char *)(v329 + v328 * v19 + 2 * *(void *)&v17);
    unsigned int v29 = v20[17].u16[2];
    unsigned int v30 = v20[17].u16[3];
    a4.i32[0] = v20->i32[0];
    a5.i32[0] = v20[3].i32[1];
    unsigned int v31 = v20[18].u16[0];
    unsigned int v32 = v20[18].u16[1];
    unsigned int v33 = v20[18].u16[2];
    unsigned int v34 = v20[18].u16[3];
    unsigned int v35 = v20[19].u16[0];
    _S28 = v20[4].f32[1];
    _S29 = v20[5].f32[0];
    _S27 = v20[5].f32[1];
    _S9 = v20[6].i32[0];
    _S4 = v20[6].f32[1];
    _S20 = v20[7].i32[0];
    _S13 = v20[7].i32[1];
    _S30 = v20[8].i32[0];
    _S23 = v20[8].i32[1];
    _S3 = v20[9].i32[0];
    float v46 = (char *)&v20[20] + 4;
    float v47 = (unsigned __int8 *)(v330 + v327 * v15 + v14);
    float v48 = 8191.0 / (float)v20[16].u32[0];
    float v49 = (float)v29;
    float v50 = (float)v30;
    _S31 = v48 * v20->f32[0];
    float v52 = (float)v33;
    float v53 = (float)v34;
    float v54 = (float)v35;
    *(short float *)a4.i16 = (short float)v29;
    uint64_t result = (float32x2_t *)((char *)v20 + 16548);
    __asm { FCVT            H5, S31 }
    float16x8_t v368 = (float16x8_t)vdupq_lane_s16(a4, 0);
    short float v369 = *(short float *)_Q5.i16;
    a5.i32[1] = v20[1].i32[0];
    *(float32x2_t *)_Q5.f32 = vmul_n_f32(*(float32x2_t *)a5.f32, v48);
    *(float32x2_t *)a5.f32 = vmul_n_f32(v20[2], v48);
    short float v59 = -(short float)v30;
    float16x8_t v367 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(_Q5), 0);
    float16x8_t v364 = vmulq_n_f16(v367, v59);
    float16x8_t v365 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v60 = vmulq_n_f16(v365, v59);
    float16x8_t v363 = v60;
    *(short float *)v60.i16 = (short float)v31;
    int16x8_t v61 = vdupq_lane_s16(*(int16x4_t *)v60.i8, 0);
    float16x8_t v387 = (float16x8_t)v61;
    *(short float *)v61.i16 = (short float)v32;
    int16x8_t v62 = vdupq_lane_s16(*(int16x4_t *)v61.i8, 0);
    float16x8_t v380 = (float16x8_t)v62;
    *(short float *)v62.i16 = (short float)v33;
    int16x8_t v63 = vdupq_lane_s16(*(int16x4_t *)v62.i8, 0);
    float16x8_t v386 = (float16x8_t)v63;
    *(short float *)v63.i16 = (short float)v34;
    int16x8_t v64 = vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    *(short float *)v63.i16 = (short float)v35;
    float16x8_t v378 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v63.i8, 0);
    float16x8_t v379 = (float16x8_t)v64;
    unsigned int v65 = v20[16].u8[4];
    if (v65 >= 0x11) {
      unsigned __int8 v66 = 0;
    }
    else {
      unsigned __int8 v66 = 16 - v65;
    }
    uint64_t v69 = v18;
    uint64_t v67 = *v18;
    uint64_t v68 = v69[1];
    if (v68) {
      int16x4_t v70 = (__int16 *)(v68 + v27 * v19 + 2 * *(void *)&v17);
    }
    else {
      int16x4_t v70 = 0;
    }
    unint64_t v71 = (uint16x8_t *)(v67 + v26 * v19 + 2 * *(void *)&v17);
    if (v15 >= 0) {
      uint64_t v72 = v15;
    }
    else {
      uint64_t v72 = v15 + 1;
    }
    int16x8_t v73 = (unsigned char *)(v21[1] + v25 * (v72 >> 1) + v14);
    float v74 = (int8x8_t *)(*v21 + v24 * v15 + v14);
    unsigned __int8 v75 = v66;
    __asm { FCVT            H12, S28 }
    short float v385 = _H12;
    __asm { FCVT            H12, S29 }
    short float v384 = _H12;
    __asm { FCVT            H12, S27 }
    short float v383 = _H12;
    __asm { FCVT            H12, S9 }
    short float v377 = _H12;
    __asm { FCVT            H12, S4 }
    short float v376 = _H12;
    __asm { FCVT            H12, S20 }
    short float v375 = _H12;
    __asm { FCVT            H12, S13 }
    short float v374 = _H12;
    __asm { FCVT            H12, S30 }
    short float v373 = _H12;
    __asm { FCVT            H12, S23 }
    short float v372 = _H12;
    float v370 = v20[9].f32[0];
    __asm { FCVT            H3, S3 }
    float v362 = v20[9].f32[1];
    __asm { FCVT            H0, S0 }
    short float v351 = _H0;
    float v361 = v20[10].f32[0];
    __asm { FCVT            H0, S1 }
    short float v350 = _H0;
    float v360 = v20[10].f32[1];
    __asm { FCVT            H0, S6 }
    short float v349 = _H0;
    float v359 = v20[11].f32[0];
    __asm { FCVT            H0, S7 }
    short float v348 = _H0;
    float v357 = v20[11].f32[1];
    __asm { FCVT            H0, S16 }
    short float v347 = _H0;
    float v356 = v20[12].f32[0];
    __asm { FCVT            H0, S17 }
    short float v346 = _H0;
    float v354 = v20[12].f32[1];
    __asm { FCVT            H0, S19 }
    short float v345 = _H0;
    float v353 = v20[13].f32[0];
    __asm { FCVT            H0, S25 }
    short float v343 = _H0;
    uint16x8_t v344 = (uint16x8_t)vdupq_n_s16(v66);
    _Q0.i32[0] = a5.i32[1];
    float v342 = a5.f32[1];
    float v366 = a5.f32[0];
    uint64_t v334 = v26;
    uint64_t v335 = *v22;
    unint64_t v332 = v16;
    uint64_t v333 = v27;
    uint64_t v331 = v22[1];
    float v371 = v50;
    float v340 = (float)v32;
    float v341 = v20[8].f32[1];
    float v338 = (float)v29;
    float v339 = v20[8].f32[0];
    float v382 = v54;
    float v336 = _S31;
    float v337 = v20[7].f32[1];
    float v358 = v20[6].f32[0];
    float v355 = v20[7].f32[0];
    float v352 = (float)v31;
    float v381 = v53;
    do
    {
      float v95 = (char *)v74 + v24;
      float v96 = &v71->i8[v26];
      float v97 = (char *)v70 + v27;
      if ((int)v13 < 8)
      {
        unint64_t v202 = 0;
        float v101 = (__int16 *)((char *)v70 + v27);
        float v100 = (uint16x8_t *)((char *)v71 + v26);
        float v201 = v73;
        float v99 = (int8x8_t *)((char *)v74 + v24);
      }
      else
      {
        uint64_t v98 = 0;
        float v99 = (int8x8_t *)((char *)v74 + v24);
        float v100 = (uint16x8_t *)((char *)v71 + v26);
        float v101 = (__int16 *)((char *)v70 + v27);
        do
        {
          int8x8_t v102 = *(int8x8_t *)&v73[v98];
          *(int8x8_t *)v103.i8 = vzip1_s8(v102, 0);
          v103.u64[1] = (unint64_t)vzip2_s8(v102, 0);
          float16x8_t v104 = vcvtq_f16_u16(v103);
          int8x16_t v105 = (int8x16_t)vmlaq_f16(v364, v367, v104);
          int8x16_t v106 = (int8x16_t)vmlaq_f16(v363, v365, v104);
          v104.i64[0] = vextq_s8(v105, v105, 8uLL).u64[0];
          *(int16x4_t *)v107.i8 = vuzp1_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v104.i8);
          *(int16x4_t *)v104.i8 = vuzp2_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v104.i8);
          v104.i64[1] = v104.i64[0];
          float16x8_t v108 = (float16x8_t)vzip1q_s16((int16x8_t)v104, (int16x8_t)v104);
          v107.i64[1] = v104.i64[0];
          float16x8_t v109 = (float16x8_t)vzip1q_s16(v107, v107);
          v104.i64[0] = vextq_s8(v106, v106, 8uLL).u64[0];
          *(float16x4_t *)v104.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v104.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v104.i8));
          v104.i64[1] = v104.i64[0];
          int8x8_t v110 = *v74++;
          *(int8x8_t *)v106.i8 = vzip1_s8(v110, 0);
          v106.u64[1] = (unint64_t)vzip2_s8(v110, 0);
          float16x8_t v111 = (float16x8_t)vzip1q_s16((int16x8_t)v104, (int16x8_t)v104);
          float16x8_t v112 = vcvtq_f16_u16((uint16x8_t)v106);
          int8x8_t v113 = *v99++;
          *(int8x8_t *)v106.i8 = vzip1_s8(v113, 0);
          v106.u64[1] = (unint64_t)vzip2_s8(v113, 0);
          float16x8_t v114 = vcvtq_f16_u16((uint16x8_t)v106);
          float16x8_t v115 = vsubq_f16(v112, v368);
          float16x8_t v116 = vsubq_f16(v114, v368);
          float16x8_t v117 = vmlaq_n_f16(v108, v115, v369);
          float16x8_t v118 = vmlaq_n_f16(v108, v116, v369);
          float16x8_t v119 = vmlaq_n_f16(v111, v115, v369);
          float16x8_t v120 = vmlaq_n_f16(v111, v116, v369);
          float16x8_t v121 = vmlaq_n_f16(v109, v115, v369);
          float16x8_t v122 = vmlaq_n_f16(v109, v116, v369);
          v123.i64[0] = 0x9000900090009000;
          v123.i64[1] = 0x9000900090009000;
          uint16x8_t v124 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), v123));
          uint32x4_t v125 = vmovl_high_u16(v124);
          uint32x4_t v126 = vmovl_u16(*(uint16x4_t *)v124.i8);
          v117.i16[0] = *(_WORD *)&v46[2 * v126.u32[0]];
          v117.i16[1] = *(_WORD *)&v46[2 * v126.u32[1]];
          v117.i16[2] = *(_WORD *)&v46[2 * v126.u32[2]];
          v117.i16[3] = *(_WORD *)&v46[2 * v126.u32[3]];
          v117.i16[4] = *(_WORD *)&v46[2 * v125.u32[0]];
          v117.i16[5] = *(_WORD *)&v46[2 * v125.u32[1]];
          v117.i16[6] = *(_WORD *)&v46[2 * v125.u32[2]];
          v117.i16[7] = *(_WORD *)&v46[2 * v125.u32[3]];
          uint16x8_t v127 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v119, (float16x8_t)0), v123));
          float16x8_t v128 = (float16x8_t)vmovl_high_u16(v127);
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v127.i8);
          v119.i16[0] = *(_WORD *)&v46[2 * v129.u32[0]];
          v119.i16[1] = *(_WORD *)&v46[2 * v129.u32[1]];
          v119.i16[2] = *(_WORD *)&v46[2 * v129.u32[2]];
          v119.i16[3] = *(_WORD *)&v46[2 * v129.u32[3]];
          v119.i16[4] = *(_WORD *)&v46[2 * v128.u32[0]];
          v119.i16[5] = *(_WORD *)&v46[2 * v128.u32[1]];
          v119.i16[6] = *(_WORD *)&v46[2 * v128.u32[2]];
          v119.i16[7] = *(_WORD *)&v46[2 * v128.u32[3]];
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v121, (float16x8_t)0), v123));
          uint32x4_t v131 = vmovl_high_u16(v130);
          uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v130.i8);
          v133.i16[0] = *(_WORD *)&v46[2 * v132.u32[0]];
          v133.i16[1] = *(_WORD *)&v46[2 * v132.u32[1]];
          v133.i16[2] = *(_WORD *)&v46[2 * v132.u32[2]];
          v133.i16[3] = *(_WORD *)&v46[2 * v132.u32[3]];
          v133.i16[4] = *(_WORD *)&v46[2 * v131.u32[0]];
          v133.i16[5] = *(_WORD *)&v46[2 * v131.u32[1]];
          v133.i16[6] = *(_WORD *)&v46[2 * v131.u32[2]];
          v133.i16[7] = *(_WORD *)&v46[2 * v131.u32[3]];
          uint16x8_t v134 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v123));
          uint32x4_t v135 = vmovl_high_u16(v134);
          uint32x4_t v136 = vmovl_u16(*(uint16x4_t *)v134.i8);
          v137.i16[0] = *(_WORD *)&v46[2 * v136.u32[0]];
          v137.i16[1] = *(_WORD *)&v46[2 * v136.u32[1]];
          v137.i16[2] = *(_WORD *)&v46[2 * v136.u32[2]];
          v137.i16[3] = *(_WORD *)&v46[2 * v136.u32[3]];
          v137.i16[4] = *(_WORD *)&v46[2 * v135.u32[0]];
          v137.i16[5] = *(_WORD *)&v46[2 * v135.u32[1]];
          v137.i16[6] = *(_WORD *)&v46[2 * v135.u32[2]];
          v137.i16[7] = *(_WORD *)&v46[2 * v135.u32[3]];
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v120, (float16x8_t)0), v123));
          uint32x4_t v139 = vmovl_high_u16(v138);
          uint32x4_t v140 = vmovl_u16(*(uint16x4_t *)v138.i8);
          v128.i16[0] = *(_WORD *)&v46[2 * v140.u32[0]];
          v128.i16[1] = *(_WORD *)&v46[2 * v140.u32[1]];
          v128.i16[2] = *(_WORD *)&v46[2 * v140.u32[2]];
          v128.i16[3] = *(_WORD *)&v46[2 * v140.u32[3]];
          v128.i16[4] = *(_WORD *)&v46[2 * v139.u32[0]];
          v128.i16[5] = *(_WORD *)&v46[2 * v139.u32[1]];
          v128.i16[6] = *(_WORD *)&v46[2 * v139.u32[2]];
          v128.i16[7] = *(_WORD *)&v46[2 * v139.u32[3]];
          uint16x8_t v141 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v122, (float16x8_t)0), v123));
          uint32x4_t v142 = vmovl_high_u16(v141);
          uint32x4_t v143 = vmovl_u16(*(uint16x4_t *)v141.i8);
          v144.i16[0] = *(_WORD *)&v46[2 * v143.u32[0]];
          v144.i16[1] = *(_WORD *)&v46[2 * v143.u32[1]];
          v144.i16[2] = *(_WORD *)&v46[2 * v143.u32[2]];
          v144.i16[3] = *(_WORD *)&v46[2 * v143.u32[3]];
          v144.i16[4] = *(_WORD *)&v46[2 * v142.u32[0]];
          v144.i16[5] = *(_WORD *)&v46[2 * v142.u32[1]];
          v144.i16[6] = *(_WORD *)&v46[2 * v142.u32[2]];
          v144.i16[7] = *(_WORD *)&v46[2 * v142.u32[3]];
          float16x8_t v145 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v117, _H3), v119, v351), v133, v350);
          float16x8_t v146 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v117, v349), v119, v348), v133, v347);
          float16x8_t v147 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v133, v343), v119, v345), v117, v346);
          float16x8_t v148 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, _H3), v128, v351), v144, v350);
          float16x8_t v149 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v137, v349), v128, v348), v144, v347);
          float16x8_t v150 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v144, v343), v128, v345), v137, v346);
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v145, (float16x8_t)0), v123));
          uint32x4_t v152 = vmovl_high_u16(v151);
          uint32x4_t v153 = vmovl_u16(*(uint16x4_t *)v151.i8);
          v154.i16[0] = result->i16[v153.u32[0]];
          v154.i16[1] = result->i16[v153.u32[1]];
          v154.i16[2] = result->i16[v153.u32[2]];
          v154.i16[3] = result->i16[v153.u32[3]];
          v154.i16[4] = result->i16[v152.u32[0]];
          v154.i16[5] = result->i16[v152.u32[1]];
          v154.i16[6] = result->i16[v152.u32[2]];
          v154.i16[7] = result->i16[v152.u32[3]];
          uint16x8_t v155 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v146, (float16x8_t)0), v123));
          uint32x4_t v156 = vmovl_high_u16(v155);
          uint32x4_t v157 = vmovl_u16(*(uint16x4_t *)v155.i8);
          *(void *)&long long v158 = v156.u32[2];
          *((void *)&v158 + 1) = v156.u32[3];
          long long v159 = v158;
          *(void *)&long long v158 = v156.u32[0];
          v161.i16[0] = result->i16[v157.u32[0]];
          float v160 = (__int16 *)result + v156.u32[1];
          v161.i16[1] = result->i16[v157.u32[1]];
          v161.i16[2] = result->i16[v157.u32[2]];
          v161.i16[3] = result->i16[v157.u32[3]];
          v161.i16[4] = result->i16[v158];
          v161.i16[5] = *v160;
          v161.i16[6] = result->i16[v159];
          v161.i16[7] = result->i16[*((void *)&v159 + 1)];
          uint16x8_t v162 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v147, (float16x8_t)0), v123));
          uint32x4_t v163 = vmovl_high_u16(v162);
          uint32x4_t v164 = vmovl_u16(*(uint16x4_t *)v162.i8);
          *(void *)&long long v158 = v164.u32[2];
          *((void *)&v158 + 1) = v164.u32[3];
          uint64_t v165 = v164.u32[1];
          v170.i16[0] = result->i16[v164.u32[0]];
          uint16x8_t v166 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v148, (float16x8_t)0), v123));
          uint32x4_t v167 = vmovl_u16(*(uint16x4_t *)v166.i8);
          uint64_t v168 = v167.u32[1];
          uint64_t v169 = v167.u32[0];
          v170.i16[1] = result->i16[v165];
          v170.i16[2] = result->i16[v158];
          v170.i16[3] = result->i16[*((void *)&v158 + 1)];
          v170.i16[4] = result->i16[v163.u32[0]];
          v170.i16[5] = result->i16[v163.u32[1]];
          v170.i16[6] = result->i16[v163.u32[2]];
          v170.i16[7] = result->i16[v163.u32[3]];
          uint32x4_t v171 = vmovl_high_u16(v166);
          uint64_t v172 = v167.u32[3];
          uint64_t v173 = v167.u32[2];
          uint64_t v174 = v171.u32[1];
          uint64_t v175 = v171.u32[0];
          uint64_t v176 = v171.u32[3];
          uint64_t v177 = v171.u32[2];
          uint16x8_t v178 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v149, (float16x8_t)0), v123));
          uint32x4_t v179 = vmovl_u16(*(uint16x4_t *)v178.i8);
          uint64_t v180 = v179.u32[1];
          uint64_t v181 = v179.u32[0];
          _Q0.i16[0] = result->i16[v169];
          _Q0.i16[1] = result->i16[v168];
          _Q0.i16[2] = result->i16[v173];
          _Q0.i16[3] = result->i16[v172];
          _Q0.i16[4] = result->i16[v175];
          _Q0.i16[5] = result->i16[v174];
          _Q0.i16[6] = result->i16[v177];
          _Q0.i16[7] = result->i16[v176];
          uint32x4_t v182 = vmovl_high_u16(v178);
          uint64_t v183 = v179.u32[3];
          uint64_t v184 = v179.u32[2];
          uint64_t v185 = v182.u32[1];
          uint64_t v186 = v182.u32[0];
          uint64_t v187 = v182.u32[3];
          uint64_t v188 = v182.u32[2];
          uint16x8_t v189 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v150, (float16x8_t)0), v123));
          uint32x4_t v190 = vmovl_u16(*(uint16x4_t *)v189.i8);
          v191.i16[0] = result->i16[v181];
          v191.i16[1] = result->i16[v180];
          v191.i16[2] = result->i16[v184];
          v191.i16[3] = result->i16[v183];
          v191.i16[4] = result->i16[v186];
          v191.i16[5] = result->i16[v185];
          v191.i16[6] = result->i16[v188];
          v191.i16[7] = result->i16[v187];
          uint32x4_t v192 = vmovl_high_u16(v189);
          uint64_t v193 = v192.u32[0];
          v197.i16[0] = result->i16[v190.u32[0]];
          float v194 = (__int16 *)result + v192.u32[1];
          uint32x4_t v195 = (__int16 *)result + v192.u32[2];
          float16x8_t v196 = (__int16 *)result + v192.u32[3];
          v197.i16[1] = result->i16[v190.u32[1]];
          v197.i16[2] = result->i16[v190.u32[2]];
          v197.i16[3] = result->i16[v190.u32[3]];
          v197.i16[4] = result->i16[v193];
          v197.i16[5] = *v194;
          v197.i16[6] = *v195;
          v197.i16[7] = *v196;
          *v71++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v387, v154, v385), v161, v384), v170, v383), v387), v386)), v344);
          if (v70)
          {
            float16x8_t v198 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v380, v154, v374), v161, v373), v170, v372);
            v388.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v380, v154, v377), v161, v376), v170, v375), v379), v378), v379), v378)), v344);
            v388.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(v198), v344);
            vst2q_s16(v70, v388);
            v70 += 16;
          }
          *v100++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v387, _Q0, v385), v191, v384), v197, v383), v387), v386)), v344);
          if (v101)
          {
            float16x8_t v199 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v380, _Q0, v374), v191, v373), v197, v372);
            _Q0 = (float16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v380, _Q0, v377), v191, v376), v197, v375), v379), v378), v379), v378)), v344);
            uint16x8_t v200 = vshlq_u16(vcvtq_u16_f16(v199), v344);
            vst2q_s16(v101, *(int16x8x2_t *)_Q0.i8);
            v101 += 16;
          }
          v98 += 8;
        }
        while ((int)v98 < (int)v13 - 7);
        float v201 = &v73[v98];
        unint64_t v202 = v13 & 0xFFFFFFF8;
        uint64_t v25 = v331;
        unint64_t v16 = v332;
        float v50 = v371;
      }
      while (v13 > v202)
      {
        _Q0.i8[0] = v201[1];
        float v203 = (float)_Q0.u32[0] - v50;
        unsigned int v204 = _Q5.u32[1];
        float v205 = _Q5.f32[1] * v203;
        LOBYTE(v204) = v74->i8[0];
        float v206 = _S31 * (float)((float)v204 - v49);
        float v207 = (float)(_Q5.f32[1] * v203) + v206;
        float v208 = 8191.0;
        if (v207 <= 8191.0)
        {
          float v208 = (float)(_Q5.f32[1] * v203) + v206;
          if (v207 < 0.0) {
            float v208 = 0.0;
          }
        }
        LOBYTE(v207) = *v201;
        float v209 = (float)LODWORD(v207) - v50;
        float v210 = (float)(v342 * v203) + (float)(v209 * v366);
        float v211 = 8191.0;
        if ((float)(v206 + v210) <= 8191.0)
        {
          float v211 = v206 + v210;
          if ((float)(v206 + v210) < 0.0) {
            float v211 = 0.0;
          }
        }
        float v212 = _Q5.f32[0] * v209;
        float v213 = (float)(_Q5.f32[0] * v209) + v206;
        float v214 = 8191.0;
        if (v213 <= 8191.0)
        {
          float v214 = v213;
          if (v213 < 0.0) {
            float v214 = 0.0;
          }
        }
        LOBYTE(v213) = v74->i8[1];
        float v215 = _S31 * (float)((float)LODWORD(v213) - v49);
        float v216 = 8191.0;
        if ((float)(v205 + v215) <= 8191.0)
        {
          float v216 = v205 + v215;
          if ((float)(v205 + v215) < 0.0) {
            float v216 = 0.0;
          }
        }
        float v217 = 8191.0;
        if ((float)(v210 + v215) <= 8191.0)
        {
          float v217 = v210 + v215;
          if ((float)(v210 + v215) < 0.0) {
            float v217 = 0.0;
          }
        }
        float v218 = v212 + v215;
        BOOL v219 = (float)(v212 + v215) <= 8191.0;
        float v220 = 8191.0;
        if (v219)
        {
          float v220 = v218;
          if (v218 < 0.0) {
            float v220 = 0.0;
          }
        }
        LOBYTE(v218) = v99->i8[0];
        float v221 = _S31 * (float)((float)LODWORD(v218) - v49);
        float v222 = 8191.0;
        if ((float)(v205 + v221) <= 8191.0)
        {
          float v222 = v205 + v221;
          if ((float)(v205 + v221) < 0.0) {
            float v222 = 0.0;
          }
        }
        float v223 = 8191.0;
        if ((float)(v210 + v221) <= 8191.0)
        {
          float v223 = v210 + v221;
          if ((float)(v210 + v221) < 0.0) {
            float v223 = 0.0;
          }
        }
        float v224 = v212 + v221;
        BOOL v219 = (float)(v212 + v221) <= 8191.0;
        float v225 = 8191.0;
        if (v219)
        {
          float v225 = v224;
          if (v224 < 0.0) {
            float v225 = 0.0;
          }
        }
        LOBYTE(v50) = v99->i8[1];
        float v226 = _S31 * (float)((float)LODWORD(v50) - v49);
        float v227 = v205 + v226;
        BOOL v219 = (float)(v205 + v226) <= 8191.0;
        float v228 = 8191.0;
        if (v219)
        {
          float v228 = v227;
          if (v227 < 0.0) {
            float v228 = 0.0;
          }
        }
        float v229 = _S27;
        float v230 = v210 + v226;
        BOOL v219 = (float)(v210 + v226) <= 8191.0;
        float v231 = 8191.0;
        if (v219)
        {
          float v231 = v230;
          if (v230 < 0.0) {
            float v231 = 0.0;
          }
        }
        float v232 = _S29;
        float v233 = _S28;
        float v234 = v212 + v226;
        BOOL v219 = (float)(v212 + v226) <= 8191.0;
        float v235 = 8191.0;
        if (v219)
        {
          float v235 = v234;
          if (v234 < 0.0) {
            float v235 = 0.0;
          }
        }
        _H6 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v208, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        _H7 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v211, 0.0), 8191.0))];
        __asm { FCVT            S7, H7 }
        _H16 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v214, 0.0), 8191.0))];
        __asm { FCVT            S16, H16 }
        _H17 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v216, 0.0), 8191.0))];
        _H0 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v217, 0.0), 8191.0))];
        __asm
        {
          FCVT            S17, H17
          FCVT            S0, H0
        }
        _H1 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v222, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H21 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0))];
        __asm { FCVT            S21, H21 }
        _H19 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0))];
        __asm { FCVT            S19, H19 }
        _H11 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0))];
        _H12 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v231, 0.0), 8191.0))];
        __asm
        {
          FCVT            S11, H11
          FCVT            S12, H12
        }
        _H25 = *(_WORD *)&v46[2 * llroundf(fminf(fmaxf(v235, 0.0), 8191.0))];
        __asm { FCVT            S25, H25 }
        float v260 = (float)((float)(v362 * _S7) + (float)(_S6 * v370)) + (float)(_S16 * v361);
        float v261 = (float)((float)(v359 * _S7) + (float)(_S6 * v360)) + (float)(_S16 * v357);
        float v262 = (float)((float)(v354 * _S7) + (float)(_S6 * v356)) + (float)(_S16 * v353);
        float v263 = (float)((float)(v362 * _S0) + (float)(_S17 * v370)) + (float)(_S1 * v361);
        float v264 = (float)((float)(v359 * _S0) + (float)(_S17 * v360)) + (float)(_S1 * v357);
        float v265 = (float)((float)(v354 * _S0) + (float)(_S17 * v356)) + (float)(_S1 * v353);
        float v266 = (float)((float)(v362 * _S21) + (float)(_S2 * v370)) + (float)(_S19 * v361);
        float v267 = (float)((float)(v359 * _S21) + (float)(_S2 * v360)) + (float)(_S19 * v357);
        float v268 = (float)((float)(v354 * _S21) + (float)(_S2 * v356)) + (float)(_S19 * v353);
        float v269 = (float)((float)(v362 * _S12) + (float)(_S11 * v370)) + (float)(_S25 * v361);
        float v270 = (float)((float)(v359 * _S12) + (float)(_S11 * v360)) + (float)(_S25 * v357);
        float v271 = (float)((float)(v354 * _S12) + (float)(_S11 * v356)) + (float)(_S25 * v353);
        LOWORD(_S0) = result->i16[llroundf(fminf(fmaxf(v260, 0.0), 8191.0))];
        __asm { FCVT            S17, H0 }
        LOWORD(_S0) = result->i16[llroundf(fminf(fmaxf(v261, 0.0), 8191.0))];
        __asm { FCVT            S19, H0 }
        LOWORD(_S0) = result->i16[llroundf(fminf(fmaxf(v262, 0.0), 8191.0))];
        __asm { FCVT            S25, H0 }
        _H0 = result->i16[llroundf(fminf(fmaxf(v263, 0.0), 8191.0))];
        _H1 = result->i16[llroundf(fminf(fmaxf(v264, 0.0), 8191.0))];
        _H2 = result->i16[llroundf(fminf(fmaxf(v265, 0.0), 8191.0))];
        _H14 = result->i16[llroundf(fminf(fmaxf(v266, 0.0), 8191.0))];
        _H12 = result->i16[llroundf(fminf(fmaxf(v267, 0.0), 8191.0))];
        _H15 = result->i16[llroundf(fminf(fmaxf(v268, 0.0), 8191.0))];
        _H6 = result->i16[llroundf(fminf(fmaxf(v269, 0.0), 8191.0))];
        _H7 = result->i16[llroundf(fminf(fmaxf(v270, 0.0), 8191.0))];
        _H16 = result->i16[llroundf(fminf(fmaxf(v271, 0.0), 8191.0))];
        _S29 = v232;
        _S28 = v233;
        float v284 = (float)(v232 * _S19) + (float)(v233 * _S17);
        _S27 = v229;
        float v285 = (float)(v284 + (float)(v229 * _S25)) + v352;
        float v286 = v52;
        if (v285 <= v52)
        {
          float v286 = v285;
          if (v285 < v352) {
            float v286 = v352;
          }
        }
        v71->i16[0] = llroundf(v286) << v75;
        if (v70)
        {
          float v287 = v340;
          float v288 = (float)((float)(v340 + (float)(_S17 * v358)) + (float)(_S19 * _S4)) + (float)(_S25 * v355);
          float v289 = v382;
          if (v288 <= v382)
          {
            float v289 = (float)((float)(v340 + (float)(_S17 * v358)) + (float)(_S19 * _S4)) + (float)(_S25 * v355);
            if (v288 < v381) {
              float v289 = v381;
            }
          }
          float v290 = v337;
          float v49 = v338;
          float v291 = v339;
          float v292 = v341;
          float v293 = (float)((float)(v340 + (float)(_S17 * v337)) + (float)(_S19 * v339)) + (float)(_S25 * v341);
          __int16 *v70 = llroundf(v289) << v75;
          float v295 = v381;
          float v294 = v382;
          float v296 = v382;
          _S31 = v336;
          if (v293 <= v382)
          {
            float v296 = v293;
            if (v293 < v381) {
              float v296 = v381;
            }
          }
          v70[1] = llroundf(v296) << v75;
          v70 += 2;
          float v50 = v371;
        }
        else
        {
          float v290 = v337;
          float v49 = v338;
          float v291 = v339;
          float v287 = v340;
          float v292 = v341;
          float v50 = v371;
          _S31 = v336;
          float v295 = v381;
          float v294 = v382;
        }
        __asm
        {
          FCVT            S0, H0
          FCVT            S1, H1
          FCVT            S2, H2
        }
        float v300 = (float)((float)((float)(_S29 * _S1) + (float)(v233 * _S0)) + (float)(_S27 * _S2)) + v352;
        float v301 = v52;
        if (v300 <= v52)
        {
          float v301 = (float)((float)((float)(_S29 * _S1) + (float)(v233 * _S0)) + (float)(_S27 * _S2)) + v352;
          if (v300 < v352) {
            float v301 = v352;
          }
        }
        v71->i16[1] = llroundf(v301) << v75;
        if (v70)
        {
          float v302 = (float)((float)(v287 + (float)(_S0 * v358)) + (float)(_S1 * _S4)) + (float)(_S2 * v355);
          float v303 = v294;
          if (v302 <= v294)
          {
            float v303 = (float)((float)(v287 + (float)(_S0 * v358)) + (float)(_S1 * _S4)) + (float)(_S2 * v355);
            if (v302 < v295) {
              float v303 = v295;
            }
          }
          float v304 = (float)((float)(v287 + (float)(_S0 * v290)) + (float)(_S1 * v291)) + (float)(_S2 * v292);
          __int16 *v70 = llroundf(v303) << v75;
          float v305 = v294;
          if (v304 <= v294)
          {
            float v305 = v304;
            if (v304 < v295) {
              float v305 = v295;
            }
          }
          v70[1] = llroundf(v305) << v75;
          v70 += 2;
        }
        __asm
        {
          FCVT            S0, H14
          FCVT            S1, H12
          FCVT            S2, H15
        }
        float v309 = (float)((float)((float)(_S29 * _S1) + (float)(v233 * _S0)) + (float)(_S27 * _S2)) + v352;
        float v310 = v52;
        if (v309 <= v52)
        {
          float v310 = (float)((float)((float)(_S29 * _S1) + (float)(v233 * _S0)) + (float)(_S27 * _S2)) + v352;
          if (v309 < v352) {
            float v310 = v352;
          }
        }
        v100->i16[0] = llroundf(v310) << v75;
        if (v101)
        {
          float v311 = (float)((float)(v287 + (float)(_S0 * v358)) + (float)(_S1 * _S4)) + (float)(_S2 * v355);
          float v312 = v294;
          if (v311 <= v294)
          {
            float v312 = (float)((float)(v287 + (float)(_S0 * v358)) + (float)(_S1 * _S4)) + (float)(_S2 * v355);
            if (v311 < v295) {
              float v312 = v295;
            }
          }
          float v313 = (float)((float)(v287 + (float)(_S0 * v290)) + (float)(_S1 * v291)) + (float)(_S2 * v292);
          *float v101 = llroundf(v312) << v75;
          float v314 = v294;
          if (v313 <= v294)
          {
            float v314 = v313;
            if (v313 < v295) {
              float v314 = v295;
            }
          }
          v101[1] = llroundf(v314) << v75;
          v101 += 2;
        }
        __asm
        {
          FCVT            S0, H6
          FCVT            S1, H7
          FCVT            S2, H16
        }
        float v317 = (float)((float)((float)(_S29 * _S1) + (float)(v233 * *(float *)_Q0.i32)) + (float)(_S27 * _S2)) + v352;
        float v318 = v52;
        if (v317 <= v52)
        {
          float v318 = (float)((float)((float)(_S29 * _S1) + (float)(v233 * *(float *)_Q0.i32)) + (float)(_S27 * _S2)) + v352;
          if (v317 < v352) {
            float v318 = v352;
          }
        }
        v100->i16[1] = llroundf(v318) << v75;
        if (v101)
        {
          float v319 = (float)((float)(v287 + (float)(*(float *)_Q0.i32 * v358)) + (float)(_S1 * _S4)) + (float)(_S2 * v355);
          float v320 = v294;
          if (v319 <= v294)
          {
            float v320 = (float)((float)(v287 + (float)(*(float *)_Q0.i32 * v358)) + (float)(_S1 * _S4)) + (float)(_S2 * v355);
            if (v319 < v295) {
              float v320 = v295;
            }
          }
          *(float *)_Q0.i32 = (float)((float)(v287 + (float)(*(float *)_Q0.i32 * v290)) + (float)(_S1 * v291))
                            + (float)(_S2 * v292);
          *float v101 = llroundf(v320) << v75;
          float v321 = v294;
          if (*(float *)_Q0.i32 <= v294)
          {
            float v321 = *(float *)_Q0.i32;
            if (*(float *)_Q0.i32 < v295) {
              float v321 = v295;
            }
          }
          v101[1] = llroundf(v321) << v75;
          v101 += 2;
        }
        v202 += 2;
        v201 += 2;
        float v74 = (int8x8_t *)((char *)v74 + 2);
        float v99 = (int8x8_t *)((char *)v99 + 2);
        unint64_t v71 = (uint16x8_t *)((char *)v71 + 4);
        float v100 = (uint16x8_t *)((char *)v100 + 4);
      }
      uint64_t v26 = v334;
      uint64_t v24 = v335;
      float v74 = (int8x8_t *)&v95[v335];
      v73 += v25;
      unint64_t v71 = (uint16x8_t *)&v96[v334];
      uint64_t v27 = v333;
      int16x4_t v70 = (__int16 *)&v97[v333];
      v12 += 2;
    }
    while (v16 > v12);
    if (v330 && v329)
    {
      uint64_t v322 = 0;
      do
      {
        if (v13)
        {
          unint64_t v323 = v13;
          float v324 = v28;
          float v325 = v47;
          do
          {
            __int16 v326 = *v325++;
            *v324++ = v326 | (v326 << 8);
            --v323;
          }
          while (v323);
        }
        v47 += v327;
        v28 += v328;
        ++v322;
      }
      while (v322 != v16);
    }
    else if (v329)
    {
      do
      {
        if (v13) {
          uint64_t result = (float32x2_t *)memset(v28, 255, 2 * v13);
        }
        v28 += v328;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_xf444_GCD);
  return 0;
}

void *vt_Copy_420vf_TRC_Mat_TRC_xf444_GCD(void *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)((char *)result + 28);
  unint64_t v6 = 2 * *(unsigned __int8 *)result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)((char *)result + 20);
    uint64_t v11 = *(void *)((char *)result + 36);
    uint64_t v12 = *(void *)((char *)result + 44) + 2 * v7;
    unint64_t v13 = 2 * v8 - 2 * v7;
    uint64_t v14 = result[14];
    unint64_t v15 = result[13] * a2 / v6;
    uint64_t v16 = (void *)result[16];
    uint64_t v17 = result[15] + 2 * v15;
    uint64_t v18 = result[19];
    uint64_t v19 = (void *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = (unsigned __int8 *)(v25 + v24 * v12 + v11);
    uint64_t v27 = *v21;
    uint64_t v28 = v21[1];
    uint64_t v29 = v21[2];
    uint64_t v30 = v16[2];
    uint64_t v31 = (char *)(v30 + v29 * v17 + 2 * v14);
    float v32 = 8191.0 / (float)*(unsigned int *)(v18 + 128);
    LOWORD(a5) = *(_WORD *)(v18 + 140);
    float v33 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v18 + 142);
    float v34 = (float)LODWORD(a5);
    float v35 = v32 * *(float *)v18;
    float v36 = *(float *)(v18 + 20);
    float v212 = v32 * *(float *)(v18 + 16);
    float v213 = v32 * *(float *)(v18 + 8);
    float v37 = v32 * v36;
    *(float *)&unsigned int v38 = v32 * *(float *)(v18 + 28);
    float v210 = *(float *)&v38;
    float v211 = v37;
    LOWORD(v38) = *(_WORD *)(v18 + 144);
    float v39 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 146);
    float v40 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 148);
    float v41 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 150);
    float v42 = (float)v38;
    LOWORD(v38) = *(_WORD *)(v18 + 152);
    float v43 = (float)v38;
    float v44 = *(float *)(v18 + 36);
    float v45 = *(float *)(v18 + 44);
    float v215 = *(float *)(v18 + 56);
    float v208 = *(float *)(v18 + 76);
    float v209 = *(float *)(v18 + 72);
    float v206 = *(float *)(v18 + 84);
    float v207 = *(float *)(v18 + 80);
    float v204 = *(float *)(v18 + 92);
    float v205 = *(float *)(v18 + 88);
    float v202 = *(float *)(v18 + 96);
    _S1 = *(float *)(v18 + 104);
    float v199 = _S1;
    float v200 = *(float *)(v18 + 100);
    uint64_t v47 = v18 + 164;
    uint64_t v48 = v16[1];
    float v49 = (char *)(*v16 + v27 * v17 + 2 * v14);
    uint64_t v50 = v48 + v28 * v17 + 2 * v14;
    uint64_t result = (void *)(v18 + 16548);
    if (v48) {
      float v51 = (char *)v50;
    }
    else {
      float v51 = 0;
    }
    unsigned int v52 = *(unsigned __int8 *)(v18 + 132);
    uint64_t v53 = v19[1];
    float v54 = (unsigned char *)(*v19 + v22 * v12 + v11);
    if (v52 >= 0x11) {
      char v55 = 0;
    }
    else {
      char v55 = 16 - v52;
    }
    uint64_t v56 = v53 + v23 * (v12 / 2) + v11;
    char v57 = v55;
    float v197 = *(float *)(v18 + 60);
    float v198 = (float)LODWORD(a5);
    float v195 = *(float *)(v18 + 68);
    float v196 = *(float *)(v18 + 64);
    float v193 = v35;
    float v194 = v40;
    float v214 = *(float *)(v18 + 40);
    float v203 = *(float *)(v18 + 52);
    float v201 = *(float *)(v18 + 48);
    float v192 = v33;
    do
    {
      uint64_t v58 = &v54[v22];
      short float v59 = &v51[v28];
      float16x8_t v60 = &v49[v27];
      if (v10)
      {
        unint64_t v61 = 0;
        int16x8_t v62 = &v54[v22];
        int16x8_t v63 = &v51[v28];
        int16x8_t v64 = &v49[v27];
        do
        {
          LOBYTE(_S1) = *(unsigned char *)(v56 + v61 + 1);
          float v65 = (float)LODWORD(_S1) - v34;
          unsigned int v66 = LODWORD(v213);
          float v67 = v213 * v65;
          LOBYTE(v66) = *v54;
          float v68 = v35 * (float)((float)v66 - v33);
          float v69 = (float)(v213 * v65) + v68;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = (float)(v213 * v65) + v68;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          LOBYTE(v36) = *(unsigned char *)(v56 + v61);
          float v71 = (float)LODWORD(v36) - v34;
          float v72 = (float)(v211 * v65) + (float)(v71 * v212);
          float v73 = 8191.0;
          if ((float)(v68 + v72) <= 8191.0)
          {
            float v73 = v68 + v72;
            if ((float)(v68 + v72) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v210 * v71;
          float v75 = (float)(v210 * v71) + v68;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          LOBYTE(v75) = v54[1];
          float v77 = v35 * (float)((float)LODWORD(v75) - v33);
          float v78 = 8191.0;
          if ((float)(v67 + v77) <= 8191.0)
          {
            float v78 = v67 + v77;
            if ((float)(v67 + v77) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = 8191.0;
          if ((float)(v72 + v77) <= 8191.0)
          {
            float v79 = v72 + v77;
            if ((float)(v72 + v77) < 0.0) {
              float v79 = 0.0;
            }
          }
          float v80 = v74 + v77;
          float v81 = 8191.0;
          if (v80 <= 8191.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          LOBYTE(v80) = *v62;
          float v82 = (float)LODWORD(v80) - v33;
          float v83 = v35 * v82;
          float v84 = 8191.0;
          if ((float)(v67 + (float)(v35 * v82)) <= 8191.0)
          {
            float v84 = v67 + (float)(v35 * v82);
            if (v84 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = 8191.0;
          if ((float)(v72 + v83) <= 8191.0)
          {
            float v85 = v72 + v83;
            if ((float)(v72 + v83) < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v74 + v83;
          BOOL v87 = (float)(v74 + v83) <= 8191.0;
          float v88 = 8191.0;
          if (v87)
          {
            float v88 = v86;
            if (v86 < 0.0) {
              float v88 = 0.0;
            }
          }
          LOBYTE(v82) = v62[1];
          float v89 = v35 * (float)((float)LODWORD(v82) - v33);
          float v90 = v67 + v89;
          BOOL v87 = (float)(v67 + v89) <= 8191.0;
          float v91 = 8191.0;
          if (v87)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          float v92 = v45;
          float v93 = v72 + v89;
          BOOL v87 = (float)(v72 + v89) <= 8191.0;
          float v94 = 8191.0;
          if (v87)
          {
            float v94 = v93;
            if (v93 < 0.0) {
              float v94 = 0.0;
            }
          }
          float v95 = v44;
          float v96 = v42;
          float v97 = v74 + v89;
          float v98 = 8191.0;
          if (v97 <= 8191.0)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          _H1 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S1, H1 }
          _H4 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H5 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H2 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm
          {
            FCVT            S2, H2
            FCVT            S6, H6
          }
          _H26 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H3 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S3, H3 }
          _H19 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S19, H19 }
          _H7 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          _H24 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v94, 0.0), 8191.0)));
          __asm
          {
            FCVT            S7, H7
            FCVT            S24, H24
          }
          _H25 = *(_WORD *)(v47 + 2 * llroundf(fminf(fmaxf(v98, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          float v127 = (float)((float)(v208 * _S4) + (float)(_S1 * v209)) + (float)(_S5 * v207);
          float v128 = (float)((float)(v205 * _S4) + (float)(_S1 * v206)) + (float)(_S5 * v204);
          _S1 = (float)((float)(v200 * _S4) + (float)(_S1 * v202)) + (float)(_S5 * v199);
          float v130 = (float)((float)(v208 * _S6) + (float)(_S2 * v209)) + (float)(_S26 * v207);
          float v131 = (float)((float)(v205 * _S6) + (float)(_S2 * v206)) + (float)(_S26 * v204);
          float v132 = (float)((float)(v200 * _S6) + (float)(_S2 * v202)) + (float)(_S26 * v199);
          float v133 = (float)((float)(v208 * _S3) + (float)(_S27 * v209)) + (float)(_S19 * v207);
          float v134 = (float)((float)(v205 * _S3) + (float)(_S27 * v206)) + (float)(_S19 * v204);
          float v135 = (float)((float)(v200 * _S3) + (float)(_S27 * v202)) + (float)(_S19 * v199);
          float v136 = (float)((float)(v208 * _S24) + (float)(_S7 * v209)) + (float)(_S25 * v207);
          float v137 = (float)((float)(v205 * _S24) + (float)(_S7 * v206)) + (float)(_S25 * v204);
          float v138 = (float)((float)(v200 * _S24) + (float)(_S7 * v202)) + (float)(_S25 * v199);
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __asm { FCVT            S27, H7 }
          LOWORD(_S7) = *((_WORD *)result + llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __asm { FCVT            S28, H7 }
          LOWORD(_S1) = *((_WORD *)result + llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm { FCVT            S29, H1 }
          _H25 = *((_WORD *)result + llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          _H26 = *((_WORD *)result + llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          _H19 = *((_WORD *)result + llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          _H7 = *((_WORD *)result + llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          _H2 = *((_WORD *)result + llroundf(fminf(fmaxf(v134, 0.0), 8191.0)));
          _H24 = *((_WORD *)result + llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          _H4 = *((_WORD *)result + llroundf(fminf(fmaxf(v136, 0.0), 8191.0)));
          _H5 = *((_WORD *)result + llroundf(fminf(fmaxf(v137, 0.0), 8191.0)));
          _H6 = *((_WORD *)result + llroundf(fminf(fmaxf(v138, 0.0), 8191.0)));
          float v44 = v95;
          float v151 = (float)(v214 * _S28) + (float)(v95 * _S27);
          float v45 = v92;
          float v152 = (float)(v151 + (float)(v92 * _S29)) + v39;
          float v153 = v41;
          if (v152 <= v41)
          {
            float v153 = v152;
            if (v152 < v39) {
              float v153 = v39;
            }
          }
          *(_WORD *)float v49 = llroundf(v153) << v57;
          float v42 = v96;
          if (v51)
          {
            float v154 = v194;
            float v155 = (float)((float)(v194 + (float)(_S27 * v201)) + (float)(_S28 * v203)) + (float)(_S29 * v215);
            float v156 = v43;
            if (v155 <= v43)
            {
              float v156 = (float)((float)(v194 + (float)(_S27 * v201)) + (float)(_S28 * v203)) + (float)(_S29 * v215);
              if (v155 < v96) {
                float v156 = v96;
              }
            }
            float v158 = v196;
            float v157 = v197;
            float v159 = (float)(v194 + (float)(_S27 * v197)) + (float)(_S28 * v196);
            float v160 = v195;
            float v161 = v159 + (float)(_S29 * v195);
            *(_WORD *)float v51 = llroundf(v156) << v57;
            float v162 = v43;
            float v33 = v192;
            float v35 = v193;
            if (v161 <= v43)
            {
              float v162 = v159 + (float)(_S29 * v195);
              if (v161 < v96) {
                float v162 = v96;
              }
            }
            *((_WORD *)v51 + 1) = llroundf(v162) << v57;
            v51 += 4;
            float v163 = v214;
          }
          else
          {
            float v33 = v192;
            float v35 = v193;
            float v163 = v214;
            float v158 = v196;
            float v157 = v197;
            float v154 = v194;
            float v160 = v195;
          }
          __asm
          {
            FCVT            S1, H25
            FCVT            S25, H26
            FCVT            S19, H19
          }
          float v167 = (float)((float)((float)(v163 * _S25) + (float)(v44 * _S1)) + (float)(v92 * _S19)) + v39;
          float v168 = v41;
          if (v167 <= v41)
          {
            float v168 = (float)((float)((float)(v163 * _S25) + (float)(v44 * _S1)) + (float)(v92 * _S19)) + v39;
            if (v167 < v39) {
              float v168 = v39;
            }
          }
          *((_WORD *)v49 + 1) = llroundf(v168) << v57;
          if (v51)
          {
            float v169 = (float)((float)(v154 + (float)(_S1 * v201)) + (float)(_S25 * v203)) + (float)(_S19 * v215);
            float v170 = v43;
            if (v169 <= v43)
            {
              float v170 = (float)((float)(v154 + (float)(_S1 * v201)) + (float)(_S25 * v203)) + (float)(_S19 * v215);
              if (v169 < v96) {
                float v170 = v96;
              }
            }
            float v171 = (float)((float)(v154 + (float)(_S1 * v157)) + (float)(_S25 * v158)) + (float)(_S19 * v160);
            *(_WORD *)float v51 = llroundf(v170) << v57;
            float v172 = v43;
            if (v171 <= v43)
            {
              float v172 = v171;
              if (v171 < v96) {
                float v172 = v96;
              }
            }
            *((_WORD *)v51 + 1) = llroundf(v172) << v57;
            v51 += 4;
          }
          __asm
          {
            FCVT            S1, H7
            FCVT            S2, H2
            FCVT            S7, H24
          }
          float v176 = (float)((float)((float)(v163 * _S2) + (float)(v44 * _S1)) + (float)(v92 * _S7)) + v39;
          float v177 = v41;
          if (v176 <= v41)
          {
            float v177 = (float)((float)((float)(v163 * _S2) + (float)(v44 * _S1)) + (float)(v92 * _S7)) + v39;
            if (v176 < v39) {
              float v177 = v39;
            }
          }
          *(_WORD *)int16x8_t v64 = llroundf(v177) << v57;
          if (v63)
          {
            float v178 = (float)((float)(v154 + (float)(_S1 * v201)) + (float)(_S2 * v203)) + (float)(_S7 * v215);
            float v179 = v43;
            if (v178 <= v43)
            {
              float v179 = (float)((float)(v154 + (float)(_S1 * v201)) + (float)(_S2 * v203)) + (float)(_S7 * v215);
              if (v178 < v96) {
                float v179 = v96;
              }
            }
            float v180 = (float)((float)(v154 + (float)(_S1 * v157)) + (float)(_S2 * v158)) + (float)(_S7 * v160);
            *(_WORD *)int16x8_t v63 = llroundf(v179) << v57;
            float v181 = v43;
            if (v180 <= v43)
            {
              float v181 = v180;
              if (v180 < v96) {
                float v181 = v96;
              }
            }
            *((_WORD *)v63 + 1) = llroundf(v181) << v57;
            v63 += 4;
          }
          float v34 = v198;
          __asm
          {
            FCVT            S1, H4
            FCVT            S2, H5
            FCVT            S4, H6
          }
          float v36 = (float)((float)((float)(v163 * _S2) + (float)(v44 * _S1)) + (float)(v92 * _S4)) + v39;
          float v184 = v41;
          if (v36 <= v41)
          {
            float v184 = (float)((float)((float)(v163 * _S2) + (float)(v44 * _S1)) + (float)(v92 * _S4)) + v39;
            if (v36 < v39) {
              float v184 = v39;
            }
          }
          *((_WORD *)v64 + 1) = llroundf(v184) << v57;
          if (v63)
          {
            float v36 = (float)((float)(v154 + (float)(_S1 * v201)) + (float)(_S2 * v203)) + (float)(_S4 * v215);
            float v185 = v43;
            if (v36 <= v43)
            {
              float v185 = (float)((float)(v154 + (float)(_S1 * v201)) + (float)(_S2 * v203)) + (float)(_S4 * v215);
              if (v36 < v96) {
                float v185 = v96;
              }
            }
            _S1 = (float)((float)(v154 + (float)(_S1 * v157)) + (float)(_S2 * v158)) + (float)(_S4 * v160);
            *(_WORD *)int16x8_t v63 = llroundf(v185) << v57;
            float v186 = v43;
            if (_S1 <= v43)
            {
              float v186 = _S1;
              if (_S1 < v96) {
                float v186 = v96;
              }
            }
            *((_WORD *)v63 + 1) = llroundf(v186) << v57;
            v63 += 4;
          }
          v54 += 2;
          v62 += 2;
          v49 += 4;
          v64 += 4;
          v61 += 2;
        }
        while (v10 > v61);
      }
      float v54 = &v58[v22];
      v56 += v23;
      float v49 = &v60[v27];
      float v51 = &v59[v28];
      v9 += 2;
    }
    while (v13 > v9);
    if (v25 && v30)
    {
      uint64_t v187 = 0;
      do
      {
        if (v10)
        {
          unint64_t v188 = v10;
          uint16x8_t v189 = v31;
          uint32x4_t v190 = v26;
          do
          {
            __int16 v191 = *v190++;
            *v189++ = v191 | (v191 << 8);
            --v188;
          }
          while (v188);
        }
        v26 += v24;
        v31 += v29;
        ++v187;
      }
      while (v187 != v13);
    }
    else if (v30)
    {
      do
      {
        if (v10) {
          uint64_t result = memset(v31, 255, 2 * v10);
        }
        v31 += v29;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_xf444_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_xf444_neon_fp16_GCD);
  return 0;
}

void *vt_Copy_420vf_rgb_xf444_neon_fp16_GCD(void *result, uint64_t a2, double a3)
{
  uint64_t v6 = *(void *)((char *)result + 28);
  unint64_t v7 = 2 * *(unsigned __int8 *)result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)((char *)result + 20);
    uint64_t v12 = *(void *)((char *)result + 36);
    uint64_t v13 = *(void *)((char *)result + 44) + 2 * v8;
    unint64_t v14 = 2 * v9 - 2 * v8;
    uint64_t v15 = result[14];
    uint64_t v16 = (void *)result[16];
    uint64_t v17 = result[15] + 2 * (result[13] * a2 / v7);
    uint64_t v18 = (float32x2_t *)result[19];
    uint64_t v19 = (void *)result[7];
    uint64_t v20 = (uint64_t *)result[8];
    uint64_t v21 = (uint64_t *)result[17];
    uint64_t v22 = *v20;
    uint64_t v23 = v20[1];
    uint64_t v24 = v20[2];
    uint64_t v25 = v19[2];
    uint64_t v26 = *v21;
    uint64_t v27 = v21[1];
    uint64_t v28 = v21[2];
    uint64_t v29 = v16[2];
    uint64_t v30 = (char *)(v29 + v28 * v17 + 2 * v15);
    LODWORD(v21) = v18[17].u16[2];
    unsigned int v31 = v18[17].u16[3];
    v32.i32[0] = v18[3].i32[1];
    unsigned int v33 = v18[18].u16[0];
    unsigned int v34 = v18[18].u16[1];
    unsigned int v35 = v18[18].u16[2];
    unsigned int v36 = v18[18].u16[3];
    *(float *)&a3 = (float)v21;
    *(short float *)v4.i16 = (short float)v21;
    unsigned int v37 = v18[19].u16[0];
    _S1 = v18[4].f32[1];
    _S2 = v18[5].f32[0];
    _S3 = v18[5].f32[1];
    _Q25.i32[0] = v18[6].i32[0];
    _S26 = v18[6].f32[1];
    _S27 = v18[7].f32[0];
    _Q28.i32[0] = v18[7].i32[1];
    _S13 = v18[8].f32[0];
    _S14 = v18[8].f32[1];
    uint64_t v47 = (unsigned __int8 *)(v25 + v24 * v13 + v12);
    float v48 = (float)v18[17].u32[0] / (float)v18[16].u32[0];
    float v169 = (float)v31;
    _S19 = v48 * v18->f32[0];
    float v50 = (float)v33;
    float v51 = (float)v34;
    float v52 = (float)v35;
    float v53 = (float)v36;
    float v54 = (float)v37;
    __asm { FCVT            H8, S19 }
    float16x8_t v60 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v4.i8, 0);
    v32.i32[1] = v18[1].i32[0];
    *(float32x2_t *)v5.f32 = vmul_n_f32(v32, v48);
    short float v61 = -(short float)v31;
    *(float32x2_t *)v4.i8 = vmul_n_f32(v18[2], v48);
    *(float16x4_t *)v65.i8 = vcvt_f16_f32((float32x4_t)v4);
    float16x8_t v168 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v166 = vmulq_n_f16(v168, v61);
    float16x8_t v167 = (float16x8_t)vdupq_lane_s32(*(int32x2_t *)v65.i8, 0);
    float16x8_t v165 = vmulq_n_f16(v167, v61);
    __asm
    {
      FCVT            H15, S1
      FCVT            H6, S2
    }
    short float v180 = _H6;
    *(short float *)v65.i16 = (short float)v33;
    float16x8_t v63 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v65.i8, 0);
    *(short float *)v65.i16 = (short float)v34;
    float16x8_t v177 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v65.i8, 0);
    *(short float *)v65.i16 = (short float)v35;
    float16x8_t v179 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v65.i8, 0);
    *(short float *)v65.i16 = (short float)v36;
    float16x8_t v64 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v65.i8, 0);
    *(short float *)v65.i16 = (short float)v37;
    float16x8_t v176 = (float16x8_t)vdupq_lane_s16(*(int16x4_t *)v65.i8, 0);
    unsigned int v66 = v18[16].u8[4];
    unsigned __int8 v67 = 16 - v66;
    if (v66 >= 0x11) {
      unsigned __int8 v67 = 0;
    }
    float v70 = v16;
    uint64_t v69 = *v16;
    uint64_t v68 = v70[1];
    if (v68) {
      float v71 = (__int16 *)(v68 + v27 * v17 + 2 * v15);
    }
    else {
      float v71 = 0;
    }
    float v72 = (uint16x8_t *)(v69 + v26 * v17 + 2 * v15);
    if (v13 >= 0) {
      uint64_t v73 = v13;
    }
    else {
      uint64_t v73 = v13 + 1;
    }
    uint64_t result = (void *)(v19[1] + v23 * (v73 >> 1) + v12);
    float v74 = (int8x8_t *)(*v19 + v22 * v13 + v12);
    unsigned __int8 v75 = v67;
    __asm { FCVT            H6, S3 }
    short float v178 = _H6;
    float v182 = *(float *)_Q25.i32;
    __asm { FCVT            H6, S25 }
    short float v175 = _H6;
    float v181 = _S26;
    __asm { FCVT            H6, S26 }
    short float v174 = _H6;
    float v79 = _S27;
    __asm { FCVT            H6, S27 }
    short float v173 = _H6;
    float v81 = *(float *)_Q28.i32;
    __asm { FCVT            H6, S28 }
    short float v172 = _H6;
    __asm { FCVT            H6, S13 }
    short float v171 = _H6;
    __asm { FCVT            H6, S14 }
    short float v170 = _H6;
    uint16x8_t v85 = (uint16x8_t)vdupq_n_s16(v67);
    uint64_t v86 = v4.i64[0];
    do
    {
      BOOL v87 = (char *)v74 + v22;
      float v88 = &v72->i8[v26];
      float v89 = (char *)v71 + v27;
      if ((int)v11 < 8)
      {
        unint64_t v116 = 0;
        float v93 = (__int16 *)((char *)v71 + v27);
        float v92 = (float16x8_t *)&v72->i8[v26];
        float16x8_t v115 = (__int8 *)result;
        float v91 = (int8x8_t *)((char *)v74 + v22);
      }
      else
      {
        uint64_t v90 = 0;
        float v91 = (int8x8_t *)((char *)v74 + v22);
        float v92 = (float16x8_t *)&v72->i8[v26];
        float v93 = (__int16 *)((char *)v71 + v27);
        do
        {
          int8x8_t v94 = (int8x8_t)result[v90];
          *(int8x8_t *)v95.i8 = vzip1_s8(v94, 0);
          v95.u64[1] = (unint64_t)vzip2_s8(v94, 0);
          float16x8_t v96 = vcvtq_f16_u16(v95);
          int16x8_t v97 = (int16x8_t)vmlaq_f16(v166, v168, v96);
          int8x16_t v98 = (int8x16_t)vmlaq_f16(v165, v167, v96);
          v96.i64[0] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u64[0];
          *(int16x4_t *)v99.i8 = vuzp1_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v96.i8);
          *(int16x4_t *)v96.i8 = vuzp2_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v96.i8);
          *(double *)&v96.i64[1] = a3;
          float16x8_t v100 = (float16x8_t)vzip1q_s16((int16x8_t)v96, (int16x8_t)v96);
          *(double *)&v99.i64[1] = a3;
          float16x8_t v101 = (float16x8_t)vzip1q_s16(v99, v99);
          v97.i64[0] = vextq_s8(v98, v98, 8uLL).u64[0];
          *(float16x4_t *)v97.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v97.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v97.i8));
          *(double *)&v97.i64[1] = a3;
          float16x8_t v102 = (float16x8_t)vzip1q_s16(v97, v97);
          int8x8_t v103 = *v74++;
          *(int8x8_t *)v98.i8 = vzip1_s8(v103, 0);
          v98.u64[1] = (unint64_t)vzip2_s8(v103, 0);
          int8x8_t v104 = *v91++;
          int8x8_t v105 = v104;
          float16x8_t v106 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v98), v60);
          _Q25 = vmlaq_n_f16(v100, v106, _H8);
          float16x8_t v107 = vmlaq_n_f16(v102, v106, _H8);
          float16x8_t v108 = vmlaq_n_f16(v101, v106, _H8);
          *v72++ = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v63, _Q25, *(short float *)&_Q15), v107, v180), v108, v178), v63), v179)), v85);
          if (v71)
          {
            float16x8_t v109 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v177, _Q25, v172), v107, v171), v108, v170);
            v183.val[0] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v177, _Q25, v175), v107, v174), v108, v173), v64), v176), v64), v176)), v85);
            v183.val[1] = (int16x8_t)vshlq_u16(vcvtq_u16_f16(v109), v85);
            vst2q_s16(v71, v183);
            v71 += 16;
          }
          *(int8x8_t *)v110.i8 = vzip1_s8(v105, 0);
          v110.u64[1] = (unint64_t)vzip2_s8(v105, 0);
          float16x8_t v111 = vsubq_f16(vcvtq_f16_u16(v110), v60);
          float16x8_t v65 = vmlaq_n_f16(v100, v111, _H8);
          _Q28 = vmlaq_n_f16(v102, v111, _H8);
          float16x8_t v112 = vmlaq_n_f16(v101, v111, _H8);
          float16x8_t v4 = (float16x8_t)vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v63, v65, *(short float *)&_Q15), _Q28, v180), v112, v178), v63), v179)), v85);
          *v92++ = v4;
          if (v93)
          {
            _Q25.i32[0] = v176.i32[0];
            float16x8_t v4 = vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v177, v65, v175), _Q28, v174), v112, v173), v64), v176);
            float16x8_t v113 = vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(v177, v65, v172), _Q28, v171), v112, v170);
            uint16x8_t v114 = vshlq_u16(vcvtq_u16_f16(vminq_f16(vmaxq_f16(v4, v64), v176)), v85);
            float16x8_t v65 = (float16x8_t)vcvtq_u16_f16(v113);
            _Q28 = (float16x8_t)vshlq_u16((uint16x8_t)v65, v85);
            vst2q_s16(v93, *(int16x8x2_t *)(&_Q28 - 1));
            v93 += 16;
          }
          ++v90;
        }
        while ((int)(v90 * 8) < (int)v11 - 7);
        float16x8_t v115 = (__int8 *)&result[v90];
        unint64_t v116 = v11 & 0xFFFFFFF8;
      }
      while (v11 > v116)
      {
        long long v117 = _Q15;
        float16x8_t v118 = v60;
        float v119 = _S14;
        float v120 = _S13;
        v65.i8[0] = *v115;
        *(float *)&unsigned int v121 = (float)v65.u32[0] - v169;
        v4.i8[0] = v115[1];
        float v122 = (float)v4.u32[0] - v169;
        float v123 = v5.f32[1] * v122;
        float v124 = (float)(*((float *)&v86 + 1) * v122) + (float)(*(float *)&v121 * *(float *)&v86);
        float v125 = v5.f32[0] * *(float *)&v121;
        LOBYTE(v121) = v74->i8[0];
        float v126 = _S19 * (float)((float)v121 - *(float *)&a3);
        float v127 = (float)(v5.f32[1] * v122) + v126;
        float v128 = v126 + v124;
        float v129 = v125 + v126;
        *(float *)v65.i32 = (float)((float)((float)(_S2 * (float)(v126 + v124)) + (float)(_S1 * v127))
                                  + (float)(_S3 * (float)(v125 + v126)))
                          + v50;
        *(float *)v4.i32 = v52;
        if (*(float *)v65.i32 <= v52)
        {
          v4.i32[0] = v65.i32[0];
          if (*(float *)v65.i32 < v50) {
            *(float *)v4.i32 = v50;
          }
        }
        _Q25.i8[0] = v74->i8[1];
        v65.i8[0] = v91->i8[0];
        _Q28.i8[0] = v91->i8[1];
        v72->i16[0] = llroundf(*(float *)v4.i32) << v75;
        if (v71)
        {
          float v130 = (float)((float)(v51 + (float)(v127 * v182)) + (float)(v128 * v181)) + (float)(v129 * v79);
          float v131 = v54;
          if (v130 <= v54)
          {
            float v131 = (float)((float)(v51 + (float)(v127 * v182)) + (float)(v128 * v181)) + (float)(v129 * v79);
            if (v130 < v53) {
              float v131 = v53;
            }
          }
          float v132 = (float)(v51 + (float)(v127 * v81)) + (float)(v128 * v120);
          _S13 = v120;
          _S14 = v119;
          float v133 = v132 + (float)(v129 * v119);
          *float v71 = llroundf(v131) << v75;
          float v134 = v54;
          if (v133 <= v54)
          {
            if (v133 < v53) {
              float v134 = v53;
            }
            else {
              float v134 = v133;
            }
          }
          v71[1] = llroundf(v134) << v75;
          v71 += 2;
        }
        else
        {
          _S13 = v120;
          _S14 = v119;
        }
        float16x8_t v60 = v118;
        _Q15 = v117;
        float v135 = _S19 * (float)((float)_Q25.u32[0] - *(float *)&a3);
        float v136 = v123 + v135;
        float v137 = v124 + v135;
        float v138 = v125 + v135;
        float v139 = (float)((float)((float)(_S2 * (float)(v124 + v135)) + (float)(_S1 * (float)(v123 + v135)))
                     + (float)(_S3 * (float)(v125 + v135)))
             + v50;
        float v140 = v52;
        if (v139 <= v52)
        {
          float v140 = v139;
          if (v139 < v50) {
            float v140 = v50;
          }
        }
        v72->i16[1] = llroundf(v140) << v75;
        if (v71)
        {
          float v141 = (float)((float)(v51 + (float)(v136 * v182)) + (float)(v137 * v181)) + (float)(v138 * v79);
          float v142 = v54;
          if (v141 <= v54)
          {
            float v142 = (float)((float)(v51 + (float)(v136 * v182)) + (float)(v137 * v181)) + (float)(v138 * v79);
            if (v141 < v53) {
              float v142 = v53;
            }
          }
          float v143 = (float)((float)(v51 + (float)(v136 * v81)) + (float)(v137 * _S13)) + (float)(v138 * _S14);
          *float v71 = llroundf(v142) << v75;
          float v144 = v54;
          if (v143 <= v54)
          {
            if (v143 < v53) {
              float v144 = v53;
            }
            else {
              float v144 = v143;
            }
          }
          v71[1] = llroundf(v144) << v75;
          v71 += 2;
        }
        float v145 = _S19 * (float)((float)v65.u32[0] - *(float *)&a3);
        float v146 = v123 + v145;
        float v147 = v124 + v145;
        float v148 = v125 + v145;
        float v149 = (float)((float)((float)(_S2 * (float)(v124 + v145)) + (float)(_S1 * (float)(v123 + v145)))
                     + (float)(_S3 * (float)(v125 + v145)))
             + v50;
        float v150 = v52;
        if (v149 <= v52)
        {
          float v150 = v149;
          if (v149 < v50) {
            float v150 = v50;
          }
        }
        v92->i16[0] = llroundf(v150) << v75;
        if (v93)
        {
          float v151 = (float)((float)(v51 + (float)(v146 * v182)) + (float)(v147 * v181)) + (float)(v148 * v79);
          float v152 = v54;
          if (v151 <= v54)
          {
            float v152 = (float)((float)(v51 + (float)(v146 * v182)) + (float)(v147 * v181)) + (float)(v148 * v79);
            if (v151 < v53) {
              float v152 = v53;
            }
          }
          float v153 = (float)((float)(v51 + (float)(v146 * v81)) + (float)(v147 * _S13)) + (float)(v148 * _S14);
          *float v93 = llroundf(v152) << v75;
          float v154 = v54;
          if (v153 <= v54)
          {
            if (v153 < v53) {
              float v154 = v53;
            }
            else {
              float v154 = v153;
            }
          }
          v93[1] = llroundf(v154) << v75;
          v93 += 2;
        }
        float v155 = _S19 * (float)((float)_Q28.u32[0] - *(float *)&a3);
        *(float *)v65.i32 = v123 + v155;
        *(float *)_Q25.i32 = v124 + v155;
        float v156 = v125 + v155;
        float v157 = (float)((float)((float)(_S2 * (float)(v124 + v155)) + (float)(_S1 * (float)(v123 + v155)))
                     + (float)(_S3 * v156))
             + v50;
        *(float *)v4.i32 = v52;
        if (v157 <= v52)
        {
          *(float *)v4.i32 = v157;
          if (v157 < v50) {
            *(float *)v4.i32 = v50;
          }
        }
        v92->i16[1] = llroundf(*(float *)v4.i32) << v75;
        if (v93)
        {
          float v158 = (float)((float)(v51 + (float)(*(float *)v65.i32 * v182)) + (float)(*(float *)_Q25.i32 * v181))
               + (float)(v156 * v79);
          float v159 = v54;
          if (v158 <= v54)
          {
            float v159 = (float)((float)(v51 + (float)(*(float *)v65.i32 * v182)) + (float)(*(float *)_Q25.i32 * v181))
                 + (float)(v156 * v79);
            if (v158 < v53) {
              float v159 = v53;
            }
          }
          *(float *)v65.i32 = (float)((float)(v51 + (float)(*(float *)v65.i32 * v81))
                                    + (float)(*(float *)_Q25.i32 * _S13))
                            + (float)(v156 * _S14);
          *float v93 = llroundf(v159) << v75;
          *(float *)v4.i32 = v54;
          if (*(float *)v65.i32 <= v54)
          {
            v4.i32[0] = v65.i32[0];
            if (*(float *)v65.i32 < v53) {
              *(float *)v4.i32 = v53;
            }
          }
          v93[1] = llroundf(*(float *)v4.i32) << v75;
          v93 += 2;
        }
        v116 += 2;
        v115 += 2;
        float v74 = (int8x8_t *)((char *)v74 + 2);
        float v91 = (int8x8_t *)((char *)v91 + 2);
        float v72 = (uint16x8_t *)((char *)v72 + 4);
        float v92 = (float16x8_t *)((char *)v92 + 4);
      }
      float v74 = (int8x8_t *)&v87[v22];
      uint64_t result = (void *)((char *)result + v23);
      float v72 = (uint16x8_t *)&v88[v26];
      float v71 = (__int16 *)&v89[v27];
      v10 += 2;
    }
    while (v14 > v10);
    if (v25 && v29)
    {
      uint64_t v160 = 0;
      do
      {
        if (v11)
        {
          unint64_t v161 = v11;
          float v162 = v30;
          float v163 = v47;
          do
          {
            __int16 v164 = *v163++;
            *v162++ = v164 | (v164 << 8);
            --v161;
          }
          while (v161);
        }
        v47 += v24;
        v30 += v28;
        ++v160;
      }
      while (v160 != v14);
    }
    else if (v29)
    {
      do
      {
        if (v11) {
          uint64_t result = memset(v30, 255, 2 * v11);
        }
        v30 += v28;
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_xf444(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_xf444_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_xf444_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v10 = *(void *)(result + 28);
  unint64_t v11 = 2 * *result;
  unint64_t v12 = v10 * a2 / v11;
  unint64_t v13 = (v10 + v10 * a2) / v11;
  if (2 * v13 != 2 * v12)
  {
    unint64_t v14 = 0;
    unint64_t v15 = *(void *)(result + 20);
    uint64_t v16 = *(void *)(result + 36);
    uint64_t v17 = *(void *)(result + 44) + 2 * v12;
    unint64_t v18 = 2 * v13 - 2 * v12;
    uint64_t v19 = *((void *)result + 14);
    uint64_t v20 = (void *)*((void *)result + 16);
    uint64_t v21 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v11);
    uint64_t v22 = *((void *)result + 19);
    uint64_t v23 = (uint64_t *)*((void *)result + 7);
    uint64_t v24 = (uint64_t *)*((void *)result + 8);
    uint64_t v25 = (uint64_t *)*((void *)result + 17);
    uint64_t v26 = *v24;
    uint64_t v27 = v24[1];
    uint64_t v28 = v24[2];
    uint64_t v29 = v23[2];
    uint64_t v30 = *v25;
    uint64_t v31 = v25[1];
    uint64_t v32 = v25[2];
    uint64_t v33 = v20[1];
    uint64_t v34 = v20[2];
    uint64_t v35 = (char *)(v34 + v32 * v21 + 2 * v19);
    uint64_t v36 = (char *)(*v20 + v30 * v21 + 2 * v19);
    uint64_t v37 = v33 + v31 * v21 + 2 * v19;
    uint64_t v38 = (unsigned __int8 *)(v29 + v28 * v17 + v16);
    *(float *)&unsigned int v39 = (float)*(unsigned int *)(v22 + 128);
    *(float *)&unsigned int v40 = (float)*(unsigned int *)(v22 + 136);
    float v41 = *(float *)&v40 / *(float *)&v39;
    LOWORD(v39) = *(_WORD *)(v22 + 140);
    float v42 = (float)v39;
    LOWORD(v40) = *(_WORD *)(v22 + 142);
    float v43 = (float)v40;
    float v44 = v41 * *(float *)v22;
    float v45 = v41 * *(float *)(v22 + 8);
    float v46 = v41 * *(float *)(v22 + 16);
    float v47 = v41 * *(float *)(v22 + 20);
    float v48 = *(float *)(v22 + 28);
    float v49 = v41 * v48;
    LOWORD(v48) = *(_WORD *)(v22 + 144);
    float v50 = (float)LODWORD(v48);
    LOWORD(v5) = *(_WORD *)(v22 + 146);
    float v51 = (float)v5;
    LOWORD(v6) = *(_WORD *)(v22 + 148);
    float v52 = (float)v6;
    LOWORD(v7) = *(_WORD *)(v22 + 150);
    float v53 = (float)v7;
    LOWORD(v8) = *(_WORD *)(v22 + 152);
    float v54 = (float)v8;
    float v55 = *(float *)(v22 + 36);
    float v56 = *(float *)(v22 + 40);
    float v57 = *(float *)(v22 + 44);
    float v58 = *(float *)(v22 + 48);
    float v59 = *(float *)(v22 + 52);
    float v60 = *(float *)(v22 + 56);
    float v61 = *(float *)(v22 + 60);
    float v62 = *(float *)(v22 + 64);
    float v63 = *(float *)(v22 + 68);
    if (v33) {
      float16x8_t v64 = (char *)v37;
    }
    else {
      float16x8_t v64 = 0;
    }
    unsigned int v65 = *(unsigned __int8 *)(v22 + 132);
    char v66 = 16 - v65;
    BOOL v67 = v65 >= 0x11;
    uint64_t v68 = *v23;
    uint64_t v69 = v23[1];
    uint64_t result = (unsigned __int8 *)(v68 + v26 * v17 + v16);
    if (v67) {
      char v66 = 0;
    }
    uint64_t v70 = v69 + v27 * (v17 / 2) + v16;
    char v71 = v66;
    do
    {
      float v72 = &result[v26];
      uint64_t v73 = &v64[v31];
      float v74 = &v36[v30];
      if (v15)
      {
        unint64_t v75 = 0;
        float v76 = &result[v26];
        float v77 = &v36[v30];
        float v78 = &v64[v31];
        do
        {
          LOBYTE(v9) = *(unsigned char *)(v70 + v75);
          *(float *)&unsigned int v79 = (float)LODWORD(v9);
          float v80 = *(float *)&v79 - v43;
          LOBYTE(v79) = *(unsigned char *)(v70 + v75 + 1);
          float v81 = (float)v79 - v43;
          float v82 = v45 * v81;
          float v83 = (float)(v47 * v81) + (float)(v80 * v46);
          float v84 = v49 * v80;
          LOBYTE(v2) = *result;
          float v85 = v44 * (float)((float)LODWORD(v2) - v42);
          float v86 = v82 + v85;
          float v87 = v85 + v83;
          float v88 = v84 + v85;
          float v89 = (float)((float)((float)(v56 * (float)(v85 + v83)) + (float)(v55 * (float)(v82 + v85)))
                      + (float)(v57 * (float)(v84 + v85)))
              + v50;
          float v90 = v52;
          if (v89 <= v52)
          {
            float v90 = v89;
            if (v89 < v50) {
              float v90 = v50;
            }
          }
          LOBYTE(v4) = result[1];
          LOBYTE(v3) = *v76;
          LOBYTE(v89) = v76[1];
          *(_WORD *)uint64_t v36 = llroundf(v90) << v71;
          if (v64)
          {
            float v91 = (float)((float)(v51 + (float)(v86 * v58)) + (float)(v87 * v59)) + (float)(v88 * v60);
            float v92 = v54;
            if (v91 <= v54)
            {
              float v92 = (float)((float)(v51 + (float)(v86 * v58)) + (float)(v87 * v59)) + (float)(v88 * v60);
              if (v91 < v53) {
                float v92 = v53;
              }
            }
            float v93 = (float)((float)(v51 + (float)(v86 * v61)) + (float)(v87 * v62)) + (float)(v88 * v63);
            *(_WORD *)float16x8_t v64 = llroundf(v92) << v71;
            float v94 = v54;
            if (v93 <= v54)
            {
              if (v93 < v53) {
                float v94 = v53;
              }
              else {
                float v94 = v93;
              }
            }
            *((_WORD *)v64 + 1) = llroundf(v94) << v71;
            v64 += 4;
          }
          float v95 = v44 * (float)((float)LODWORD(v4) - v42);
          float v96 = v82 + v95;
          float v97 = v83 + v95;
          float v98 = v84 + v95;
          float v99 = (float)((float)((float)(v56 * v97) + (float)(v55 * v96)) + (float)(v57 * v98)) + v50;
          float v100 = v52;
          if (v99 <= v52)
          {
            float v100 = (float)((float)((float)(v56 * v97) + (float)(v55 * v96)) + (float)(v57 * v98)) + v50;
            if (v99 < v50) {
              float v100 = v50;
            }
          }
          *((_WORD *)v36 + 1) = llroundf(v100) << v71;
          if (v64)
          {
            float v101 = (float)((float)(v51 + (float)(v96 * v58)) + (float)(v97 * v59)) + (float)(v98 * v60);
            float v102 = v54;
            if (v101 <= v54)
            {
              float v102 = (float)((float)(v51 + (float)(v96 * v58)) + (float)(v97 * v59)) + (float)(v98 * v60);
              if (v101 < v53) {
                float v102 = v53;
              }
            }
            float v103 = (float)((float)(v51 + (float)(v96 * v61)) + (float)(v97 * v62)) + (float)(v98 * v63);
            *(_WORD *)float16x8_t v64 = llroundf(v102) << v71;
            float v104 = v54;
            if (v103 <= v54)
            {
              if (v103 < v53) {
                float v104 = v53;
              }
              else {
                float v104 = v103;
              }
            }
            *((_WORD *)v64 + 1) = llroundf(v104) << v71;
            v64 += 4;
          }
          float v105 = v44 * (float)((float)LODWORD(v3) - v42);
          float v106 = v82 + v105;
          float v4 = v83 + v105;
          float v107 = v84 + v105;
          float v108 = (float)((float)((float)(v56 * v4) + (float)(v55 * v106)) + (float)(v57 * v107)) + v50;
          float v109 = v52;
          if (v108 <= v52)
          {
            float v109 = (float)((float)((float)(v56 * v4) + (float)(v55 * v106)) + (float)(v57 * v107)) + v50;
            if (v108 < v50) {
              float v109 = v50;
            }
          }
          *(_WORD *)float v77 = llroundf(v109) << v71;
          if (v78)
          {
            float v110 = (float)((float)(v51 + (float)(v106 * v58)) + (float)(v4 * v59)) + (float)(v107 * v60);
            float v111 = v54;
            if (v110 <= v54)
            {
              float v111 = (float)((float)(v51 + (float)(v106 * v58)) + (float)(v4 * v59)) + (float)(v107 * v60);
              if (v110 < v53) {
                float v111 = v53;
              }
            }
            float v112 = (float)((float)(v51 + (float)(v106 * v61)) + (float)(v4 * v62)) + (float)(v107 * v63);
            *(_WORD *)float v78 = llroundf(v111) << v71;
            float v4 = v54;
            if (v112 <= v54)
            {
              if (v112 < v53) {
                float v4 = v53;
              }
              else {
                float v4 = v112;
              }
            }
            *((_WORD *)v78 + 1) = llroundf(v4) << v71;
            v78 += 4;
          }
          float v113 = v44 * (float)((float)LODWORD(v89) - v42);
          float v9 = v82 + v113;
          float v114 = v83 + v113;
          float v115 = v84 + v113;
          float v3 = (float)((float)((float)(v56 * v114) + (float)(v55 * v9)) + (float)(v57 * v115)) + v50;
          float v2 = v52;
          if (v3 <= v52)
          {
            float v2 = (float)((float)((float)(v56 * v114) + (float)(v55 * v9)) + (float)(v57 * v115)) + v50;
            if (v3 < v50) {
              float v2 = v50;
            }
          }
          *((_WORD *)v77 + 1) = llroundf(v2) << v71;
          if (v78)
          {
            float v3 = (float)((float)(v51 + (float)(v9 * v58)) + (float)(v114 * v59)) + (float)(v115 * v60);
            float v2 = v54;
            if (v3 <= v54)
            {
              float v2 = (float)((float)(v51 + (float)(v9 * v58)) + (float)(v114 * v59)) + (float)(v115 * v60);
              if (v3 < v53) {
                float v2 = v53;
              }
            }
            float v9 = (float)((float)(v51 + (float)(v9 * v61)) + (float)(v114 * v62)) + (float)(v115 * v63);
            *(_WORD *)float v78 = llroundf(v2) << v71;
            float v116 = v54;
            if (v9 <= v54)
            {
              float v116 = v9;
              if (v9 < v53) {
                float v116 = v53;
              }
            }
            *((_WORD *)v78 + 1) = llroundf(v116) << v71;
            v78 += 4;
          }
          result += 2;
          v76 += 2;
          v36 += 4;
          v77 += 4;
          v75 += 2;
        }
        while (v15 > v75);
      }
      uint64_t result = &v72[v26];
      v70 += v27;
      uint64_t v36 = &v74[v30];
      float16x8_t v64 = &v73[v31];
      v14 += 2;
    }
    while (v18 > v14);
    if (v29 && v34)
    {
      uint64_t v117 = 0;
      do
      {
        if (v15)
        {
          unint64_t v118 = v15;
          float v119 = v35;
          float v120 = v38;
          do
          {
            __int16 v121 = *v120++;
            *v119++ = v121 | (v121 << 8);
            --v118;
          }
          while (v118);
        }
        v38 += v28;
        v35 += v32;
        ++v117;
      }
      while (v117 != v18);
    }
    else if (v34)
    {
      do
      {
        if (v15) {
          uint64_t result = (unsigned __int8 *)memset(v35, 255, 2 * v15);
        }
        v35 += v32;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA_neon_fp16_GCD(unsigned __int8 *a1, uint64_t a2, double a3, double a4, float32x4_t a5, int16x4_t _D3, double a7, float32x4_t a8)
{
  char v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = *(void *)(a1 + 20);
  uint64_t v11 = *(void *)(a1 + 36);
  uint64_t v12 = *(void *)(a1 + 44);
  uint64_t v13 = *(void *)(a1 + 28);
  unint64_t v14 = 2 * *a1;
  uint64_t v15 = 2 * (v13 * a2 / v14);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = 2 * ((v13 + v13 * a2) / v14);
  uint64_t v18 = v12 + v17;
  uint64_t v19 = *((void *)a1 + 14);
  unint64_t v20 = *((void *)a1 + 13) * a2;
  uint64_t v21 = *((void *)a1 + 19);
  size_t v22 = (uint64_t *)*((void *)a1 + 7);
  uint64_t v23 = (uint64_t *)*((void *)a1 + 8);
  uint64_t v24 = *((void *)a1 + 15);
  uint64_t v25 = v23[1];
  uint64_t v326 = *v23;
  uint64_t v27 = *v22;
  uint64_t v26 = v22[1];
  uint64_t v28 = v23[2];
  uint64_t v29 = v22[2];
  uint64_t v30 = **((void **)a1 + 17);
  uint64_t v31 = **((void **)a1 + 16);
  unsigned int v32 = *(_DWORD *)(v21 + 128);
  int v364 = *(_DWORD *)(v21 + 158);
  unsigned int v33 = *(unsigned __int16 *)(v21 + 140);
  uint64_t result = *(unsigned __int16 *)(v21 + 142);
  float v35 = *(float *)v21;
  __int32 v36 = *(_DWORD *)(v21 + 8);
  float32x2_t v37 = *(float32x2_t *)(v21 + 16);
  uint64_t v38 = v24 + 2 * (v20 / v14);
  v39.i32[0] = *(_DWORD *)(v21 + 28);
  float v361 = *(float *)(v21 + 72);
  float v360 = *(float *)(v21 + 76);
  if (v16 >= 0) {
    uint64_t v40 = v16;
  }
  else {
    uint64_t v40 = v16 + 1;
  }
  float v359 = *(float *)(v21 + 80);
  float v358 = *(float *)(v21 + 84);
  uint64_t v323 = v25;
  uint64_t v324 = v30;
  uint64_t v41 = v25 * (v40 >> 1);
  uint64_t v325 = v28;
  uint64_t v42 = v29 + v28 * v16;
  float v357 = *(float *)(v21 + 88);
  float v356 = *(float *)(v21 + 92);
  uint64_t v43 = v30 * v38;
  float v355 = *(float *)(v21 + 96);
  float v354 = *(float *)(v21 + 100);
  _S19 = *(float *)(v21 + 108);
  float v353 = *(float *)(v21 + 104);
  _S22 = *(float *)(v21 + 112);
  _S16 = *(float *)(v21 + 116);
  _S17 = *(float *)(v21 + 120);
  long long v362 = 0u;
  long long v363 = 0u;
  do
  {
    int v48 = 0;
    char v49 = *((unsigned char *)&v364 + v9);
    do
    {
      *(unsigned char *)(((unint64_t)&v362 + ((v49 + 4 * v48) & 0xF8)) | (v49 + 4 * (_BYTE)v48) & 7) = v8 + v48;
      ++v48;
    }
    while (v48 != 8);
    ++v9;
    v8 += 8;
  }
  while (v9 != 4);
  _ZF = v17 == v15;
  uint64_t v52 = v325;
  uint64_t v51 = v326;
  uint64_t v53 = v324;
  if (!_ZF)
  {
    unint64_t v54 = 0;
    float v55 = (float)v33;
    float v56 = (float)result;
    a5.f32[0] = 8191.0 / (float)v32;
    _S20 = a5.f32[0] * v35;
    __asm { FCVT            H3, S20 }
    short float v352 = *(short float *)_D3.i16;
    *(short float *)_D3.i16 = (short float)v33;
    float16x8_t v351 = (float16x8_t)vdupq_lane_s16(_D3, 0);
    short float v61 = -(short float)result;
    v39.i32[1] = v36;
    *(float32x2_t *)a8.f32 = vmul_n_f32(v39, a5.f32[0]);
    *(float32x2_t *)a5.f32 = vmul_n_f32(v37, a5.f32[0]);
    float16x8_t v349 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    float16x8_t v346 = vmulq_n_f16(v349, v61);
    float16x8_t v347 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    unint64_t v322 = v18 - v16;
    uint64_t v62 = v21 + 16548;
    uint64_t v63 = v21 + 164;
    uint64_t result = v21 + 32932;
    __asm { FCVT            H0, S19 }
    short float v344 = _H0;
    float16x8_t v345 = vmulq_n_f16(v347, v61);
    __asm { FCVT            H0, S22 }
    short float v343 = _H0;
    __asm { FCVT            H0, S16 }
    short float v342 = _H0;
    __asm { FCVT            H0, S17 }
    short float v341 = _H0;
    _S0 = v361;
    __asm { FCVT            H0, S0 }
    short float v340 = *(short float *)&_S0;
    _S0 = v360;
    __asm { FCVT            H0, S0 }
    short float v339 = *(short float *)&_S0;
    _S0 = v359;
    __asm { FCVT            H0, S0 }
    short float v338 = *(short float *)&_S0;
    _S0 = v358;
    __asm { FCVT            H0, S0 }
    short float v337 = *(short float *)&_S0;
    _S0 = v357;
    __asm { FCVT            H0, S0 }
    short float v336 = *(short float *)&_S0;
    _S0 = v356;
    __asm { FCVT            H0, S0 }
    short float v335 = *(short float *)&_S0;
    _S0 = v355;
    __asm { FCVT            H0, S0 }
    short float v334 = *(short float *)&_S0;
    _S0 = v354;
    __asm { FCVT            H0, S0 }
    short float v333 = *(short float *)&_S0;
    _S0 = v353;
    __asm { FCVT            H0, S0 }
    short float v332 = *(short float *)&_S0;
    float v77 = (uint32x4_t *)(v31 + v43 + 4 * v19);
    if (v29) {
      uint64_t v78 = v42 + v11;
    }
    else {
      uint64_t v78 = 0;
    }
    unsigned int v79 = (unsigned char *)(v26 + v41 + v11);
    float v80 = (int8x8_t *)(v27 + v326 * v16 + v11);
    float v350 = a8.f32[0];
    LODWORD(_Q0) = a5.i32[1];
    float v330 = a5.f32[1];
    float v348 = a5.f32[0];
    float v331 = a8.f32[1];
    float v329 = _S20;
    do
    {
      float v82 = (char *)v80 + v51;
      float v83 = &v77->i8[v53];
      float v84 = (char *)(v78 + v52);
      uint64_t v327 = v78 + v52;
      uint64_t v328 = &v77->i8[v53];
      if ((int)v10 < 8)
      {
        unint64_t v179 = 0;
        short float v178 = v79;
        float16x8_t v177 = (char *)v80 + v51;
        float v87 = (int8x8_t *)((char *)v80 + v51);
      }
      else
      {
        uint64_t v85 = 0;
        int8x8_t v86 = *(int8x8_t *)((char *)&v362 + 8);
        float v87 = (int8x8_t *)((char *)v80 + v51);
        do
        {
          int8x8_t v88 = *(int8x8_t *)&v79[v85];
          int8x8_t v89 = 0;
          *(int8x8_t *)v90.i8 = vzip1_s8(v88, 0);
          v90.u64[1] = (unint64_t)vzip2_s8(v88, 0);
          float16x8_t v91 = vcvtq_f16_u16(v90);
          int8x16_t v92 = (int8x16_t)vmlaq_f16(v346, v349, v91);
          int8x16_t v93 = (int8x16_t)vmlaq_f16(v345, v347, v91);
          v91.i64[0] = vextq_s8(v92, v92, 8uLL).u64[0];
          *(int16x4_t *)v94.i8 = vuzp1_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v91.i8);
          *(int16x4_t *)v91.i8 = vuzp2_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v91.i8);
          v91.i64[1] = v91.i64[0];
          float16x8_t v95 = (float16x8_t)vzip1q_s16((int16x8_t)v91, (int16x8_t)v91);
          v94.i64[1] = v91.i64[0];
          float16x8_t v96 = (float16x8_t)vzip1q_s16(v94, v94);
          v91.i64[0] = vextq_s8(v93, v93, 8uLL).u64[0];
          *(float16x4_t *)v91.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v91.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v91.i8));
          v91.i64[1] = v91.i64[0];
          int8x8_t v97 = *v80++;
          float16x8_t v98 = (float16x8_t)vzip1q_s16((int16x8_t)v91, (int16x8_t)v91);
          *(int8x8_t *)v91.i8 = vzip1_s8(v97, 0);
          v91.u64[1] = (unint64_t)vzip2_s8(v97, 0);
          int8x8_t v99 = *v87++;
          *(int8x8_t *)v93.i8 = vzip1_s8(v99, 0);
          v93.u64[1] = (unint64_t)vzip2_s8(v99, 0);
          float16x8_t v100 = vcvtq_f16_u16((uint16x8_t)v93);
          float16x8_t v101 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v91), v351);
          float16x8_t v102 = vsubq_f16(v100, v351);
          float16x8_t v103 = vmlaq_n_f16(v95, v101, v352);
          float16x8_t v104 = vmlaq_n_f16(v95, v102, v352);
          float16x8_t v105 = vmlaq_n_f16(v98, v101, v352);
          float16x8_t v106 = vmlaq_n_f16(v98, v102, v352);
          float16x8_t v107 = vmlaq_n_f16(v96, v101, v352);
          float16x8_t v108 = vmlaq_n_f16(v96, v102, v352);
          if (v78)
          {
            int8x8_t v109 = *(int8x8_t *)v78;
            v78 += 8;
            int8x8_t v89 = v109;
            int8x8_t v110 = *(int8x8_t *)v84;
            v84 += 8;
            int8x8_t v111 = v110;
          }
          else
          {
            int8x8_t v111 = 0;
          }
          v112.i64[0] = 0x9000900090009000;
          v112.i64[1] = 0x9000900090009000;
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v103, (float16x8_t)0), v112));
          uint32x4_t v114 = vmovl_high_u16(v113);
          uint32x4_t v115 = vmovl_u16(*(uint16x4_t *)v113.i8);
          v116.i16[0] = *(_WORD *)(v63 + 2 * v115.u32[0]);
          v116.i16[1] = *(_WORD *)(v63 + 2 * v115.u32[1]);
          v116.i16[2] = *(_WORD *)(v63 + 2 * v115.u32[2]);
          v116.i16[3] = *(_WORD *)(v63 + 2 * v115.u32[3]);
          v116.i16[4] = *(_WORD *)(v63 + 2 * v114.u32[0]);
          v116.i16[5] = *(_WORD *)(v63 + 2 * v114.u32[1]);
          v116.i16[6] = *(_WORD *)(v63 + 2 * v114.u32[2]);
          v116.i16[7] = *(_WORD *)(v63 + 2 * v114.u32[3]);
          uint16x8_t v117 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v105, (float16x8_t)0), v112));
          uint32x4_t v118 = vmovl_high_u16(v117);
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v117.i8);
          v120.i16[0] = *(_WORD *)(v63 + 2 * v119.u32[0]);
          v120.i16[1] = *(_WORD *)(v63 + 2 * v119.u32[1]);
          v120.i16[2] = *(_WORD *)(v63 + 2 * v119.u32[2]);
          v120.i16[3] = *(_WORD *)(v63 + 2 * v119.u32[3]);
          v120.i16[4] = *(_WORD *)(v63 + 2 * v118.u32[0]);
          v120.i16[5] = *(_WORD *)(v63 + 2 * v118.u32[1]);
          v120.i16[6] = *(_WORD *)(v63 + 2 * v118.u32[2]);
          v120.i16[7] = *(_WORD *)(v63 + 2 * v118.u32[3]);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v107, (float16x8_t)0), v112));
          uint32x4_t v122 = vmovl_high_u16(v121);
          uint32x4_t v123 = vmovl_u16(*(uint16x4_t *)v121.i8);
          v124.i16[0] = *(_WORD *)(v63 + 2 * v123.u32[0]);
          v124.i16[1] = *(_WORD *)(v63 + 2 * v123.u32[1]);
          v124.i16[2] = *(_WORD *)(v63 + 2 * v123.u32[2]);
          v124.i16[3] = *(_WORD *)(v63 + 2 * v123.u32[3]);
          v124.i16[4] = *(_WORD *)(v63 + 2 * v122.u32[0]);
          v124.i16[5] = *(_WORD *)(v63 + 2 * v122.u32[1]);
          v124.i16[6] = *(_WORD *)(v63 + 2 * v122.u32[2]);
          v124.i16[7] = *(_WORD *)(v63 + 2 * v122.u32[3]);
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v104, (float16x8_t)0), v112));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          v128.i16[0] = *(_WORD *)(v63 + 2 * v127.u32[0]);
          v128.i16[1] = *(_WORD *)(v63 + 2 * v127.u32[1]);
          v128.i16[2] = *(_WORD *)(v63 + 2 * v127.u32[2]);
          v128.i16[3] = *(_WORD *)(v63 + 2 * v127.u32[3]);
          v128.i16[4] = *(_WORD *)(v63 + 2 * v126.u32[0]);
          v128.i16[5] = *(_WORD *)(v63 + 2 * v126.u32[1]);
          v128.i16[6] = *(_WORD *)(v63 + 2 * v126.u32[2]);
          v128.i16[7] = *(_WORD *)(v63 + 2 * v126.u32[3]);
          uint16x8_t v129 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v106, (float16x8_t)0), v112));
          uint32x4_t v130 = vmovl_high_u16(v129);
          uint32x4_t v131 = vmovl_u16(*(uint16x4_t *)v129.i8);
          v132.i16[0] = *(_WORD *)(v63 + 2 * v131.u32[0]);
          v132.i16[1] = *(_WORD *)(v63 + 2 * v131.u32[1]);
          v132.i16[2] = *(_WORD *)(v63 + 2 * v131.u32[2]);
          v132.i16[3] = *(_WORD *)(v63 + 2 * v131.u32[3]);
          v132.i16[4] = *(_WORD *)(v63 + 2 * v130.u32[0]);
          v132.i16[5] = *(_WORD *)(v63 + 2 * v130.u32[1]);
          v132.i16[6] = *(_WORD *)(v63 + 2 * v130.u32[2]);
          v132.i16[7] = *(_WORD *)(v63 + 2 * v130.u32[3]);
          uint16x8_t v133 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v108, (float16x8_t)0), v112));
          uint32x4_t v134 = vmovl_high_u16(v133);
          uint32x4_t v135 = vmovl_u16(*(uint16x4_t *)v133.i8);
          v136.i16[0] = *(_WORD *)(v63 + 2 * v135.u32[0]);
          v136.i16[1] = *(_WORD *)(v63 + 2 * v135.u32[1]);
          v136.i16[2] = *(_WORD *)(v63 + 2 * v135.u32[2]);
          v136.i16[3] = *(_WORD *)(v63 + 2 * v135.u32[3]);
          v136.i16[4] = *(_WORD *)(v63 + 2 * v134.u32[0]);
          v136.i16[5] = *(_WORD *)(v63 + 2 * v134.u32[1]);
          v136.i16[6] = *(_WORD *)(v63 + 2 * v134.u32[2]);
          v136.i16[7] = *(_WORD *)(v63 + 2 * v134.u32[3]);
          uint16x8_t v137 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v116, v344), v120, v343), v124, v342), vmaxq_f16(vmaxq_f16(v116, v120), v124), v341), (float16x8_t)0), v112));
          uint32x4_t v138 = vmovl_high_u16(v137);
          uint32x4_t v139 = vmovl_u16(*(uint16x4_t *)v137.i8);
          v140.i16[0] = *(_WORD *)(v62 + 2 * v139.u32[0]);
          v140.i16[1] = *(_WORD *)(v62 + 2 * v139.u32[1]);
          v140.i16[2] = *(_WORD *)(v62 + 2 * v139.u32[2]);
          v140.i16[3] = *(_WORD *)(v62 + 2 * v139.u32[3]);
          v140.i16[4] = *(_WORD *)(v62 + 2 * v138.u32[0]);
          v140.i16[5] = *(_WORD *)(v62 + 2 * v138.u32[1]);
          v140.i16[6] = *(_WORD *)(v62 + 2 * v138.u32[2]);
          v140.i16[7] = *(_WORD *)(v62 + 2 * v138.u32[3]);
          float16x8_t v141 = vmulq_f16(v116, v140);
          float16x8_t v142 = vmulq_f16(v120, v140);
          float16x8_t v143 = vmulq_f16(v124, v140);
          uint16x8_t v144 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v128, v344), v132, v343), v136, v342), vmaxq_f16(vmaxq_f16(v128, v132), v136), v341), (float16x8_t)0), v112));
          uint32x4_t v145 = vmovl_high_u16(v144);
          float16x8_t v146 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v144.i8);
          v146.i16[0] = *(_WORD *)(v62 + 2 * v146.u32[0]);
          v146.i16[1] = *(_WORD *)(v62 + 2 * v146.u32[1]);
          v146.i16[2] = *(_WORD *)(v62 + 2 * v146.u32[2]);
          v146.i16[3] = *(_WORD *)(v62 + 2 * v146.u32[3]);
          v146.i16[4] = *(_WORD *)(v62 + 2 * v145.u32[0]);
          v146.i16[5] = *(_WORD *)(v62 + 2 * v145.u32[1]);
          v146.i16[6] = *(_WORD *)(v62 + 2 * v145.u32[2]);
          v146.i16[7] = *(_WORD *)(v62 + 2 * v145.u32[3]);
          float16x8_t v147 = vmulq_f16(v128, v146);
          float16x8_t v148 = vmulq_f16(v132, v146);
          float16x8_t v149 = vmulq_f16(v136, v146);
          float16x8_t v150 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v141, v340), v142, v339), v143, v338);
          v365.val[1] = (int8x16_t)vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v141, v337), v142, v336), v143, v335);
          float16x8_t v151 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v143, v332), v142, v333), v141, v334);
          float16x8_t v152 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v147, v340), v148, v339), v149, v338);
          float16x8_t v153 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v147, v337), v148, v336), v149, v335);
          float16x8_t v154 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v149, v332), v148, v333), v147, v334);
          uint16x8_t v155 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v150, (float16x8_t)0), v112));
          uint32x4_t v156 = vmovl_high_u16(v155);
          uint32x4_t v157 = vmovl_u16(*(uint16x4_t *)v155.i8);
          v141.i16[0] = *(_WORD *)(result + 2 * v157.u32[0]);
          v141.i16[1] = *(_WORD *)(result + 2 * v157.u32[1]);
          v141.i16[2] = *(_WORD *)(result + 2 * v157.u32[2]);
          v141.i16[3] = *(_WORD *)(result + 2 * v157.u32[3]);
          v141.i16[4] = *(_WORD *)(result + 2 * v156.u32[0]);
          v141.i16[5] = *(_WORD *)(result + 2 * v156.u32[1]);
          v141.i16[6] = *(_WORD *)(result + 2 * v156.u32[2]);
          v141.i16[7] = *(_WORD *)(result + 2 * v156.u32[3]);
          uint16x8_t v158 = vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v365.val[1], (float16x8_t)0), v112));
          uint32x4_t v159 = vmovl_high_u16(v158);
          uint32x4_t v160 = vmovl_u16(*(uint16x4_t *)v158.i8);
          v365.val[1].i16[0] = *(_WORD *)(result + 2 * v160.u32[0]);
          v365.val[1].i16[1] = *(_WORD *)(result + 2 * v160.u32[1]);
          v365.val[1].i16[2] = *(_WORD *)(result + 2 * v160.u32[2]);
          v365.val[1].i16[3] = *(_WORD *)(result + 2 * v160.u32[3]);
          v365.val[1].i16[4] = *(_WORD *)(result + 2 * v159.u32[0]);
          v365.val[1].i16[5] = *(_WORD *)(result + 2 * v159.u32[1]);
          v365.val[1].i16[6] = *(_WORD *)(result + 2 * v159.u32[2]);
          v365.val[1].i16[7] = *(_WORD *)(result + 2 * v159.u32[3]);
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v151, (float16x8_t)0), v112));
          uint32x4_t v162 = vmovl_high_u16(v161);
          uint32x4_t v163 = vmovl_u16(*(uint16x4_t *)v161.i8);
          v124.i16[0] = *(_WORD *)(result + 2 * v163.u32[0]);
          v124.i16[1] = *(_WORD *)(result + 2 * v163.u32[1]);
          v124.i16[2] = *(_WORD *)(result + 2 * v163.u32[2]);
          v124.i16[3] = *(_WORD *)(result + 2 * v163.u32[3]);
          v124.i16[4] = *(_WORD *)(result + 2 * v162.u32[0]);
          v124.i16[5] = *(_WORD *)(result + 2 * v162.u32[1]);
          v124.i16[6] = *(_WORD *)(result + 2 * v162.u32[2]);
          v124.i16[7] = *(_WORD *)(result + 2 * v162.u32[3]);
          uint16x8_t v164 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v152, (float16x8_t)0), v112));
          uint32x4_t v165 = vmovl_high_u16(v164);
          uint32x4_t v166 = vmovl_u16(*(uint16x4_t *)v164.i8);
          v167.i16[0] = *(_WORD *)(result + 2 * v166.u32[0]);
          v167.i16[1] = *(_WORD *)(result + 2 * v166.u32[1]);
          v167.i16[2] = *(_WORD *)(result + 2 * v166.u32[2]);
          v167.i16[3] = *(_WORD *)(result + 2 * v166.u32[3]);
          v167.i16[4] = *(_WORD *)(result + 2 * v165.u32[0]);
          v167.i16[5] = *(_WORD *)(result + 2 * v165.u32[1]);
          v167.i16[6] = *(_WORD *)(result + 2 * v165.u32[2]);
          v167.i16[7] = *(_WORD *)(result + 2 * v165.u32[3]);
          uint16x8_t v168 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v153, (float16x8_t)0), v112));
          uint32x4_t v169 = vmovl_high_u16(v168);
          float16x8_t v170 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v168.i8);
          v170.i16[0] = *(_WORD *)(result + 2 * v170.u32[0]);
          v170.i16[1] = *(_WORD *)(result + 2 * v170.u32[1]);
          v170.i16[2] = *(_WORD *)(result + 2 * v170.u32[2]);
          v170.i16[3] = *(_WORD *)(result + 2 * v170.u32[3]);
          v170.i16[4] = *(_WORD *)(result + 2 * v169.u32[0]);
          v170.i16[5] = *(_WORD *)(result + 2 * v169.u32[1]);
          v170.i16[6] = *(_WORD *)(result + 2 * v169.u32[2]);
          v170.i16[7] = *(_WORD *)(result + 2 * v169.u32[3]);
          uint16x8_t v171 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v154, (float16x8_t)0), v112));
          uint32x4_t v172 = vmovl_high_u16(v171);
          uint32x4_t v173 = vmovl_u16(*(uint16x4_t *)v171.i8);
          v142.i16[0] = *(_WORD *)(result + 2 * v173.u32[0]);
          v142.i16[1] = *(_WORD *)(result + 2 * v173.u32[1]);
          v142.i16[2] = *(_WORD *)(result + 2 * v173.u32[2]);
          v142.i16[3] = *(_WORD *)(result + 2 * v173.u32[3]);
          v142.i16[4] = *(_WORD *)(result + 2 * v172.u32[0]);
          v142.i16[5] = *(_WORD *)(result + 2 * v172.u32[1]);
          v142.i16[6] = *(_WORD *)(result + 2 * v172.u32[2]);
          v142.i16[7] = *(_WORD *)(result + 2 * v172.u32[3]);
          v173.i64[0] = vceqd_s64(v78, 0);
          *(int8x8_t *)v172.i8 = vorr_s8(v89, *(int8x8_t *)v173.i8);
          v148.i64[0] = v362;
          float16x8_t v174 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          int8x16_t v175 = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v141, (float16x8_t)0), v174));
          int8x16_t v176 = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v365.val[1], (float16x8_t)0), v174));
          *(int8x8_t *)v365.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v124, (float16x8_t)0), v174)));
          v365.val[0] = vuzp1q_s8(v175, v176);
          v175.i64[0] = *((void *)&v363 + 1);
          v150.i64[0] = v363;
          v365.val[1].i64[1] = v172.i64[0];
          *(int8x8_t *)v172.i8 = vqtbl2_s8(v365, *(int8x8_t *)&v362);
          v172.u64[1] = (unint64_t)vqtbl2_s8(v365, v86);
          *(int8x8_t *)v176.i8 = vqtbl2_s8(v365, *(int8x8_t *)&v363);
          v176.u64[1] = (unint64_t)vqtbl2_s8(v365, *(int8x8_t *)((char *)&v363 + 8));
          *(int8x8_t *)v173.i8 = vorr_s8(v111, *(int8x8_t *)v173.i8);
          uint32x4_t *v77 = v172;
          v77[1] = (uint32x4_t)v176;
          v77 += 2;
          *(int8x8_t *)v366.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v142, (float16x8_t)0), v174)));
          v366.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v167, (float16x8_t)0), v174)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v170, (float16x8_t)0), v174)));
          v366.val[1].i64[1] = v173.i64[0];
          *(int8x8_t *)&_Q0 = vqtbl2_s8(v366, *(int8x8_t *)v148.i8);
          *((int8x8_t *)&_Q0 + 1) = vqtbl2_s8(v366, v86);
          *(int8x8_t *)v173.i8 = vqtbl2_s8(v366, *(int8x8_t *)v150.i8);
          v173.u64[1] = (unint64_t)vqtbl2_s8(v366, *(int8x8_t *)v175.i8);
          *(_OWORD *)float v83 = _Q0;
          *((uint32x4_t *)v83 + 1) = v173;
          v83 += 32;
          v85 += 8;
        }
        while ((int)v85 < (int)v10 - 7);
        float16x8_t v177 = v82;
        short float v178 = &v79[v85];
        unint64_t v179 = v10 & 0xFFFFFFF8;
      }
      if (v10 > v179)
      {
        uint64_t v180 = 0;
        float v181 = &v77->i8[4];
        do
        {
          LOBYTE(_Q0) = v178[1];
          float v182 = (float)_Q0 - v56;
          unsigned int v183 = LODWORD(v331);
          float v184 = v331 * v182;
          LOBYTE(v183) = v80->i8[0];
          float v185 = _S20 * (float)((float)v183 - v55);
          float v186 = (float)(v331 * v182) + v185;
          float v187 = 8191.0;
          if (v186 <= 8191.0)
          {
            float v187 = (float)(v331 * v182) + v185;
            if (v186 < 0.0) {
              float v187 = 0.0;
            }
          }
          LOBYTE(v186) = *v178;
          float v188 = (float)LODWORD(v186) - v56;
          float v189 = (float)(v330 * v182) + (float)(v188 * v348);
          float v190 = 8191.0;
          if ((float)(v185 + v189) <= 8191.0)
          {
            float v190 = v185 + v189;
            if ((float)(v185 + v189) < 0.0) {
              float v190 = 0.0;
            }
          }
          float v191 = v350 * v188;
          float v192 = (float)(v350 * v188) + v185;
          float v193 = 8191.0;
          if (v192 <= 8191.0)
          {
            float v193 = v192;
            if (v192 < 0.0) {
              float v193 = 0.0;
            }
          }
          LOBYTE(v192) = v80->i8[1];
          float v194 = _S20 * (float)((float)LODWORD(v192) - v55);
          float v195 = 8191.0;
          if ((float)(v184 + v194) <= 8191.0)
          {
            float v195 = v184 + v194;
            if ((float)(v184 + v194) < 0.0) {
              float v195 = 0.0;
            }
          }
          float v196 = 8191.0;
          if ((float)(v189 + v194) <= 8191.0)
          {
            float v196 = v189 + v194;
            if ((float)(v189 + v194) < 0.0) {
              float v196 = 0.0;
            }
          }
          float v197 = v191 + v194;
          float v198 = 8191.0;
          if (v197 <= 8191.0)
          {
            float v198 = v197;
            if (v197 < 0.0) {
              float v198 = 0.0;
            }
          }
          LOBYTE(v197) = v87->i8[0];
          float v199 = (float)LODWORD(v197) - v55;
          float v200 = _S20 * v199;
          float v201 = 8191.0;
          if ((float)(v184 + (float)(_S20 * v199)) <= 8191.0)
          {
            float v201 = v184 + (float)(_S20 * v199);
            if (v201 < 0.0) {
              float v201 = 0.0;
            }
          }
          float v202 = 8191.0;
          if ((float)(v189 + v200) <= 8191.0)
          {
            float v202 = v189 + v200;
            if ((float)(v189 + v200) < 0.0) {
              float v202 = 0.0;
            }
          }
          float v203 = v191 + v200;
          float v204 = 8191.0;
          if (v203 <= 8191.0)
          {
            float v204 = v203;
            if (v203 < 0.0) {
              float v204 = 0.0;
            }
          }
          LOBYTE(v199) = v87->i8[1];
          float v205 = _S20 * (float)((float)LODWORD(v199) - v55);
          float v206 = 8191.0;
          if ((float)(v184 + v205) <= 8191.0)
          {
            float v206 = v184 + v205;
            if ((float)(v184 + v205) < 0.0) {
              float v206 = 0.0;
            }
          }
          float v207 = 8191.0;
          if ((float)(v189 + v205) <= 8191.0)
          {
            float v207 = v189 + v205;
            if ((float)(v189 + v205) < 0.0) {
              float v207 = 0.0;
            }
          }
          float v208 = v191 + v205;
          float v209 = 8191.0;
          if (v208 <= 8191.0)
          {
            float v209 = v208;
            if (v208 < 0.0) {
              float v209 = 0.0;
            }
          }
          if (v78)
          {
            char v210 = *(unsigned char *)v78;
            char v211 = *(unsigned char *)(v78 + 1);
            v78 += 2;
            char v212 = *v84;
            char v213 = v84[1];
            v84 += 2;
          }
          else
          {
            char v210 = 0;
            char v211 = 0;
            char v212 = 0;
            char v213 = 0;
          }
          _H2 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v187, 0.0), 8191.0)));
          __asm { FCVT            S10, H2 }
          _H2 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v190, 0.0), 8191.0)));
          __asm { FCVT            S25, H2 }
          _H2 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v193, 0.0), 8191.0)));
          __asm { FCVT            S12, H2 }
          _H0 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v195, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v196, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v198, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v201, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v202, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v204, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v207, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v63 + 2 * llroundf(fminf(fmaxf(v209, 0.0), 8191.0)));
          float v229 = fmaxf(_S10, fmaxf(_S25, _S12));
          float v230 = (float)((float)((float)(_S22 * _S25) + (float)(_S19 * _S10)) + (float)(_S16 * _S12))
               + (float)(_S17 * v229);
          float v231 = 8191.0;
          if (v230 <= 8191.0)
          {
            float v231 = (float)((float)((float)(_S22 * _S25) + (float)(_S19 * _S10)) + (float)(_S16 * _S12))
                 + (float)(_S17 * v229);
            if (v230 < 0.0) {
              float v231 = 0.0;
            }
          }
          __asm
          {
            FCVT            S0, H0
            FCVT            S21, H4
            FCVT            S26, H5
          }
          _H11 = *(_WORD *)(v62 + 2 * llroundf(v231));
          float v236 = (float)((float)((float)(_S22 * _S21) + (float)(_S19 * _S0)) + (float)(_S16 * _S26))
               + (float)(_S17 * fmaxf(_S0, fmaxf(_S21, _S26)));
          float v237 = 8191.0;
          if (v236 <= 8191.0)
          {
            float v237 = v236;
            if (v236 < 0.0) {
              float v237 = 0.0;
            }
          }
          __asm
          {
            FCVT            S13, H13
            FCVT            S14, H2
            FCVT            S2, H3
          }
          _H3 = *(_WORD *)(v62 + 2 * llroundf(v237));
          float v242 = fmaxf(_S13, fmaxf(_S14, _S2));
          float v243 = (float)((float)((float)(_S22 * _S14) + (float)(_S19 * _S13)) + (float)(_S16 * _S2))
               + (float)(_S17 * v242);
          float v244 = 8191.0;
          if (v243 <= 8191.0)
          {
            float v244 = (float)((float)((float)(_S22 * _S14) + (float)(_S19 * _S13)) + (float)(_S16 * _S2))
                 + (float)(_S17 * v242);
            if (v243 < 0.0) {
              float v244 = 0.0;
            }
          }
          __asm
          {
            FCVT            S4, H27
            FCVT            S5, H31
            FCVT            S27, H9
          }
          _H31 = *(_WORD *)(v62 + 2 * llroundf(v244));
          float v249 = (float)((float)((float)(_S22 * _S5) + (float)(_S19 * _S4)) + (float)(_S16 * _S27))
               + (float)(_S17 * fmaxf(_S4, fmaxf(_S5, _S27)));
          float v250 = 8191.0;
          if (v249 <= 8191.0)
          {
            float v250 = v249;
            if (v249 < 0.0) {
              float v250 = 0.0;
            }
          }
          __asm { FCVT            S11, H11 }
          float v252 = _S10 * _S11;
          float v253 = _S25 * _S11;
          float v254 = _S12 * _S11;
          __asm { FCVT            S3, H3 }
          float v256 = _S0 * _S3;
          float v257 = _S21 * _S3;
          float v258 = _S26 * _S3;
          __asm { FCVT            S26, H31 }
          float v260 = _S13 * _S26;
          float v261 = _S14 * _S26;
          _H9 = *(_WORD *)(v62 + 2 * llroundf(v250));
          float v263 = _S2 * _S26;
          __asm { FCVT            S26, H9 }
          float v265 = _S4 * _S26;
          float v266 = _S5 * _S26;
          float v267 = _S27 * _S26;
          float v268 = (float)((float)(v360 * v253) + (float)(v252 * v361)) + (float)(v254 * v359);
          float v269 = (float)((float)(v357 * v253) + (float)(v252 * v358)) + (float)(v254 * v356);
          float v270 = (float)((float)(v354 * v253) + (float)(v252 * v355)) + (float)(v254 * v353);
          float v271 = (float)((float)(v360 * v257) + (float)(v256 * v361)) + (float)(v258 * v359);
          float v272 = (float)((float)(v357 * v257) + (float)(v256 * v358)) + (float)(v258 * v356);
          float v273 = (float)((float)(v354 * v257) + (float)(v256 * v355)) + (float)(v258 * v353);
          float v274 = (float)((float)(v360 * v261) + (float)(v260 * v361)) + (float)(v263 * v359);
          float v275 = (float)((float)(v357 * v261) + (float)(v260 * v358)) + (float)(v263 * v356);
          float v276 = (float)((float)(v354 * v261) + (float)(v260 * v355)) + (float)(v263 * v353);
          float v277 = (float)((float)(v360 * v266) + (float)(v265 * v361)) + (float)(v267 * v359);
          float v278 = (float)((float)(v357 * v266) + (float)(v265 * v358)) + (float)(v267 * v356);
          float v279 = (float)((float)(v354 * v266) + (float)(v265 * v355)) + (float)(v267 * v353);
          short float v280 = *(short float *)(result + 2 * llroundf(fminf(fmaxf(v268, 0.0), 8191.0)));
          short float v281 = *(short float *)(result + 2 * llroundf(fminf(fmaxf(v269, 0.0), 8191.0)));
          short float v282 = *(short float *)(result + 2 * llroundf(fminf(fmaxf(v270, 0.0), 8191.0)));
          short float v283 = *(short float *)(result + 2 * llroundf(fminf(fmaxf(v271, 0.0), 8191.0)));
          short float v284 = *(short float *)(result + 2 * llroundf(fminf(fmaxf(v272, 0.0), 8191.0)));
          short float v285 = *(short float *)(result + 2 * llroundf(fminf(fmaxf(v273, 0.0), 8191.0)));
          short float v286 = *(short float *)(result + 2 * llroundf(fminf(fmaxf(v274, 0.0), 8191.0)));
          short float v287 = *(short float *)(result + 2 * llroundf(fminf(fmaxf(v275, 0.0), 8191.0)));
          short float v288 = *(short float *)(result + 2 * llroundf(fminf(fmaxf(v276, 0.0), 8191.0)));
          short float v289 = *(short float *)(result + 2 * llroundf(fminf(fmaxf(v277, 0.0), 8191.0)));
          short float v290 = *(short float *)(result + 2 * llroundf(fminf(fmaxf(v278, 0.0), 8191.0)));
          short float v291 = *(short float *)(result + 2 * llroundf(fminf(fmaxf(v279, 0.0), 8191.0)));
          if (v78) {
            char v292 = v210;
          }
          else {
            char v292 = -1;
          }
          if (v78)
          {
            char v293 = v213;
          }
          else
          {
            char v211 = -1;
            char v212 = -1;
            char v293 = -1;
          }
          if (v280 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H2, #0 }
            if (_NF) {
              _S2 = 0.0;
            }
            else {
              __asm { FCVT            S2, H2 }
            }
          }
          else
          {
            _S2 = 255.0;
          }
          _S20 = v329;
          uint64_t v296 = v364;
          v181[v180 - 4 + v364] = llroundf(_S2);
          if (v281 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H27, #0 }
            if (_NF) {
              _S2 = 0.0;
            }
            else {
              __asm { FCVT            S2, H27 }
            }
          }
          else
          {
            _S2 = 255.0;
          }
          uint64_t v299 = BYTE1(v364);
          v181[v180 - 4 + BYTE1(v364)] = llroundf(_S2);
          if (v282 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H0, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H0 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          uint64_t v302 = BYTE2(v364);
          v181[v180 - 4 + BYTE2(v364)] = llroundf(_S0);
          uint64_t v303 = HIBYTE(v364);
          v181[v180 - 4 + HIBYTE(v364)] = v292;
          if (v283 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H13, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H13 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v181[v180 + v296] = llroundf(_S0);
          if (v284 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H12 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v181[v180 + v299] = llroundf(_S0);
          if (v285 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H11 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v181[v180 + v302] = llroundf(_S0);
          v181[v180 + v303] = v211;
          if (v286 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H10, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H10 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v83[v296 + v180] = llroundf(_S0);
          if (v287 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H9, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H9 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v83[BYTE1(v364) + v180] = llroundf(_S0);
          if (v288 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H31, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H31 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v83[BYTE2(v364) + v180] = llroundf(_S0);
          v83[HIBYTE(v364) + v180] = v212;
          if (v289 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H26 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v83[v180 + 4 + v364] = llroundf(_S0);
          if (v290 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H21, #0 }
            if (_NF) {
              _S0 = 0.0;
            }
            else {
              __asm { FCVT            S0, H21 }
            }
          }
          else
          {
            _S0 = 255.0;
          }
          v83[v180 + 4 + BYTE1(v364)] = llroundf(_S0);
          if (v291 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H23, #0 }
            if (_NF) {
              LODWORD(_Q0) = 0;
            }
            else {
              __asm { FCVT            S0, H23 }
            }
          }
          else
          {
            LODWORD(_Q0) = 1132396544;
          }
          v83[v180 + 4 + BYTE2(v364)] = llroundf(*(float *)&_Q0);
          float v321 = &v83[v180 + HIBYTE(v364)];
          v179 += 2;
          v180 += 8;
          v321[4] = v293;
          v178 += 2;
          float v80 = (int8x8_t *)((char *)v80 + 2);
          float v87 = (int8x8_t *)((char *)v87 + 2);
        }
        while (v10 > v179);
      }
      uint64_t v52 = v325;
      uint64_t v51 = v326;
      float v80 = (int8x8_t *)&v177[v326];
      uint64_t v53 = v324;
      v79 += v323;
      uint64_t v78 = v327 + v325;
      float v77 = (uint32x4_t *)&v328[v324];
      v54 += 2;
    }
    while (v322 > v54);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44);
    uint64_t v12 = v11 + 2 * v7;
    unint64_t v205 = v11 + 2 * v8 - v12;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    float v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    float v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v22 = (float)LODWORD(a5);
    float v23 = v20 * *(float *)v13;
    float v214 = v20 * *(float *)(v13 + 16);
    float v215 = v20 * *(float *)(v13 + 8);
    float v212 = v20 * *(float *)(v13 + 28);
    float v213 = v20 * *(float *)(v13 + 20);
    float v210 = *(float *)(v13 + 76);
    float v211 = *(float *)(v13 + 72);
    _S1 = *(float *)(v13 + 80);
    float v25 = *(float *)(v13 + 84);
    float v209 = _S1;
    float v26 = *(float *)(v13 + 88);
    float v27 = *(float *)(v13 + 92);
    float v28 = *(float *)(v13 + 96);
    float v29 = *(float *)(v13 + 100);
    uint64_t v30 = v13 + 164;
    uint64_t v31 = v13 + 16548;
    uint64_t v32 = v13 + 32932;
    float v33 = *(float *)(v13 + 104);
    float v34 = *(float *)(v13 + 108);
    float v35 = *(float *)(v13 + 112);
    float v36 = *(float *)(v13 + 116);
    float v37 = *(float *)(v13 + 120);
    uint64_t v38 = *((void *)result + 14);
    unint64_t v39 = *((void *)result + 13) * a2;
    uint64_t v40 = (void *)*((void *)result + 16);
    uint64_t v41 = *((void *)result + 15) + 2 * (v39 / v6);
    uint64_t v42 = *(void *)(result + 36);
    uint64_t v43 = v14[1];
    uint64_t result = (unsigned __int8 *)(*v14 + v17 * v12 + v42);
    uint64_t v44 = v14[2];
    _ZF = v44 == 0;
    float v46 = (char *)(v44 + v18 * v12 + v42);
    if (_ZF) {
      float v47 = 0;
    }
    else {
      float v47 = v46;
    }
    uint64_t v48 = *v40 + v41 * v19 + 4 * v38;
    uint64_t v49 = *(unsigned __int8 *)(v13 + 161);
    uint64_t v50 = *(unsigned __int8 *)(v13 + 160);
    uint64_t v203 = v19;
    uint64_t v204 = v16;
    uint64_t v51 = *(unsigned __int8 *)(v13 + 159);
    uint64_t v52 = *(unsigned __int8 *)(v13 + 158);
    uint64_t v53 = v43 + v16 * (v12 / 2) + v42;
    float v207 = (float)LODWORD(a5);
    float v208 = v21;
    float v206 = v23;
    do
    {
      uint64_t v54 = v48 + v19;
      uint64_t v55 = v18;
      float v56 = &v47[v18];
      uint64_t v57 = v17;
      float v58 = &result[v17];
      if (v10)
      {
        unint64_t v59 = 0;
        uint64_t v60 = v54;
        short float v61 = v58;
        uint64_t v62 = v56;
        do
        {
          LOBYTE(_S1) = *(unsigned char *)(v53 + v59 + 1);
          float v63 = (float)LODWORD(_S1) - v22;
          unsigned int v64 = LODWORD(v215);
          float v65 = v215 * v63;
          LOBYTE(v64) = *result;
          float v66 = v23 * (float)((float)v64 - v21);
          float v67 = (float)(v215 * v63) + v66;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = (float)(v215 * v63) + v66;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          LOBYTE(v67) = *(unsigned char *)(v53 + v59);
          float v69 = (float)LODWORD(v67) - v22;
          float v70 = (float)(v213 * v63) + (float)(v69 * v214);
          float v71 = 8191.0;
          if ((float)(v66 + v70) <= 8191.0)
          {
            float v71 = v66 + v70;
            if ((float)(v66 + v70) < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v212 * v69;
          float v73 = (float)(v212 * v69) + v66;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          LOBYTE(v73) = result[1];
          float v75 = v23 * (float)((float)LODWORD(v73) - v21);
          float v76 = 8191.0;
          if ((float)(v65 + v75) <= 8191.0)
          {
            float v76 = v65 + v75;
            if ((float)(v65 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = 8191.0;
          if ((float)(v70 + v75) <= 8191.0)
          {
            float v77 = v70 + v75;
            if ((float)(v70 + v75) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v72 + v75;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          LOBYTE(v78) = *v61;
          float v80 = (float)LODWORD(v78) - v21;
          float v81 = v23 * v80;
          float v82 = 8191.0;
          if ((float)(v65 + (float)(v23 * v80)) <= 8191.0)
          {
            float v82 = v65 + (float)(v23 * v80);
            if (v82 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = 8191.0;
          if ((float)(v70 + v81) <= 8191.0)
          {
            float v83 = v70 + v81;
            if ((float)(v70 + v81) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v72 + v81;
          float v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          LOBYTE(v80) = v61[1];
          float v86 = v23 * (float)((float)LODWORD(v80) - v21);
          float v87 = 8191.0;
          if ((float)(v65 + v86) <= 8191.0)
          {
            float v87 = v65 + v86;
            if ((float)(v65 + v86) < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v70 + v86;
          BOOL v89 = (float)(v70 + v86) <= 8191.0;
          float v90 = 8191.0;
          if (v89)
          {
            float v90 = v88;
            if (v88 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v72 + v86;
          float v92 = 8191.0;
          if (v91 <= 8191.0)
          {
            float v92 = v91;
            if (v91 < 0.0) {
              float v92 = 0.0;
            }
          }
          if (v47)
          {
            char v93 = *v47;
            char v94 = v47[1];
            v47 += 2;
            char v95 = *v62;
            char v96 = v62[1];
            v62 += 2;
          }
          else
          {
            char v93 = 0;
            char v94 = 0;
            char v95 = 0;
            char v96 = 0;
          }
          _S1 = fmaxf(v68, 0.0);
          float v98 = 8191.0;
          LOWORD(_S1) = *(_WORD *)(v30 + 2 * llroundf(fminf(_S1, 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          LOWORD(_S1) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H16 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v92, 0.0), 8191.0)));
          float v114 = fmaxf(_S12, fmaxf(_S31, _S8));
          float v115 = (float)((float)((float)(v35 * _S31) + (float)(v34 * _S12)) + (float)(v36 * _S8)) + (float)(v37 * v114);
          float v116 = 8191.0;
          if (v115 <= 8191.0)
          {
            float v116 = (float)((float)((float)(v35 * _S31) + (float)(v34 * _S12)) + (float)(v36 * _S8))
                 + (float)(v37 * v114);
            if (v115 < 0.0) {
              float v116 = 0.0;
            }
          }
          __asm
          {
            FCVT            S4, H3
            FCVT            S5, H16
            FCVT            S6, H17
          }
          _H13 = *(_WORD *)(v31 + 2 * llroundf(v116));
          float v121 = (float)((float)((float)(v35 * _S5) + (float)(v34 * _S4)) + (float)(v36 * _S6))
               + (float)(v37 * fmaxf(_S4, fmaxf(_S5, _S6)));
          float v122 = 8191.0;
          if (v121 <= 8191.0)
          {
            float v122 = v121;
            if (v121 < 0.0) {
              float v122 = 0.0;
            }
          }
          __asm
          {
            FCVT            S7, H7
            FCVT            S14, H2
            FCVT            S2, H1
          }
          _H1 = *(_WORD *)(v31 + 2 * llroundf(v122));
          float v127 = fmaxf(_S7, fmaxf(_S14, _S2));
          float v128 = (float)((float)((float)(v35 * _S14) + (float)(v34 * _S7)) + (float)(v36 * _S2)) + (float)(v37 * v127);
          float v129 = 8191.0;
          if (v128 <= 8191.0)
          {
            float v129 = (float)((float)((float)(v35 * _S14) + (float)(v34 * _S7)) + (float)(v36 * _S2)) + (float)(v37 * v127);
            if (v128 < 0.0) {
              float v129 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H9
            FCVT            S16, H10
            FCVT            S17, H11
          }
          _H9 = *(_WORD *)(v31 + 2 * llroundf(v129));
          float v134 = fmaxf(_S3, fmaxf(_S16, _S17));
          float v135 = (float)((float)((float)(v35 * _S16) + (float)(v34 * _S3)) + (float)(v36 * _S17)) + (float)(v37 * v134);
          if (v135 <= 8191.0)
          {
            float v98 = (float)((float)((float)(v35 * _S16) + (float)(v34 * _S3)) + (float)(v36 * _S17)) + (float)(v37 * v134);
            if (v135 < 0.0) {
              float v98 = 0.0;
            }
          }
          __asm { FCVT            S10, H13 }
          float v137 = _S31 * _S10;
          float v138 = _S8 * _S10;
          __asm { FCVT            S1, H1 }
          float v140 = _S4 * _S1;
          float v141 = _S5 * _S1;
          float v142 = _S6 * _S1;
          __asm { FCVT            S6, H9 }
          float v144 = _S7 * _S6;
          float v145 = _S14 * _S6;
          _H30 = *(_WORD *)(v31 + 2 * llroundf(v98));
          float v147 = _S2 * _S6;
          __asm { FCVT            S6, H30 }
          float v149 = _S3 * _S6;
          float v150 = _S16 * _S6;
          float v151 = _S17 * _S6;
          float v152 = (float)((float)(v210 * v137) + (float)((float)(_S12 * _S10) * v211)) + (float)(v138 * v209);
          float v153 = (float)((float)(v26 * v137) + (float)((float)(_S12 * _S10) * v25)) + (float)(v138 * v27);
          float v154 = (float)((float)(v29 * v137) + (float)((float)(_S12 * _S10) * v28)) + (float)(v138 * v33);
          float v155 = (float)((float)(v210 * v141) + (float)(v140 * v211)) + (float)(v142 * v209);
          float v156 = (float)((float)(v26 * v141) + (float)(v140 * v25)) + (float)(v142 * v27);
          float v157 = (float)((float)(v29 * v141) + (float)(v140 * v28)) + (float)(v142 * v33);
          float v158 = (float)((float)(v210 * v145) + (float)(v144 * v211)) + (float)(v147 * v209);
          float v159 = (float)((float)(v26 * v145) + (float)(v144 * v25)) + (float)(v147 * v27);
          float v160 = (float)((float)(v29 * v145) + (float)(v144 * v28)) + (float)(v147 * v33);
          float v161 = (float)((float)(v210 * v150) + (float)(v149 * v211)) + (float)(v151 * v209);
          float v162 = (float)((float)(v26 * v150) + (float)(v149 * v25)) + (float)(v151 * v27);
          float v163 = (float)((float)(v29 * v150) + (float)(v149 * v28)) + (float)(v151 * v33);
          short float v164 = *(short float *)(v32 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          short float v165 = *(short float *)(v32 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          short float v166 = *(short float *)(v32 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          short float v167 = *(short float *)(v32 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          short float v168 = *(short float *)(v32 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          short float v169 = *(short float *)(v32 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          short float v170 = *(short float *)(v32 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          short float v171 = *(short float *)(v32 + 2 * llroundf(fminf(fmaxf(v159, 0.0), 8191.0)));
          short float v172 = *(short float *)(v32 + 2 * llroundf(fminf(fmaxf(v160, 0.0), 8191.0)));
          short float v173 = *(short float *)(v32 + 2 * llroundf(fminf(fmaxf(v161, 0.0), 8191.0)));
          short float v174 = *(short float *)(v32 + 2 * llroundf(fminf(fmaxf(v162, 0.0), 8191.0)));
          short float v175 = *(short float *)(v32 + 2 * llroundf(fminf(fmaxf(v163, 0.0), 8191.0)));
          if (v47) {
            char v176 = v93;
          }
          else {
            char v176 = -1;
          }
          if (v47)
          {
            char v177 = v96;
          }
          else
          {
            char v94 = -1;
            char v95 = -1;
            char v177 = -1;
          }
          if (v164 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H1, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H1 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          float v22 = v207;
          float v21 = v208;
          float v23 = v206;
          *(unsigned char *)(v48 + v52) = llroundf(_S1);
          if (v165 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H14, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H14 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v48 + v51) = llroundf(_S1);
          if (v166 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H6, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H6 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v48 + v50) = llroundf(_S1);
          *(unsigned char *)(v48 + v49) = v176;
          if (v167 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H5, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H5 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          uint64_t v186 = v48 + 4;
          *(unsigned char *)(v48 + 4 + v52) = llroundf(_S1);
          if (v168 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H4, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H4 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v186 + v51) = llroundf(_S1);
          if (v169 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H13, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H13 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v186 + v50) = llroundf(_S1);
          *(unsigned char *)(v186 + v49) = v94;
          if (v170 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H12 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v60 + v52) = llroundf(_S1);
          if (v171 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H11 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v60 + v51) = llroundf(_S1);
          if (v172 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H10, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H10 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v60 + v50) = llroundf(_S1);
          *(unsigned char *)(v60 + v49) = v95;
          if (v173 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H9, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H9 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          uint64_t v199 = v60 + 4;
          *(unsigned char *)(v60 + 4 + v52) = llroundf(_S1);
          if (v174 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H8, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H8 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          *(unsigned char *)(v199 + v51) = llroundf(_S1);
          if (v175 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H30, #0 }
            if (_NF) {
              _S1 = 0.0;
            }
            else {
              __asm { FCVT            S1, H30 }
            }
          }
          else
          {
            _S1 = 255.0;
          }
          result += 2;
          v61 += 2;
          *(unsigned char *)(v199 + v50) = llroundf(_S1);
          v48 += 8;
          *(unsigned char *)(v199 + v49) = v177;
          v60 += 8;
          v59 += 2;
        }
        while (v10 > v59);
      }
      uint64_t result = &v58[v57];
      uint64_t v17 = v57;
      v53 += v204;
      uint64_t v18 = v55;
      float v47 = &v56[v55];
      uint64_t v19 = v203;
      uint64_t v48 = v54 + v203;
      v9 += 2;
    }
    while (v205 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_BGRA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_BGRA_neon_fp16_GCD);
  return 0;
}

unsigned char *vt_Copy_420vf_TRC_Mat_TRC_BGRA_neon_fp16_GCD(void *a1, uint64_t a2)
{
  char v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = *(void *)((char *)a1 + 20);
  uint64_t v8 = *(void *)((char *)a1 + 36);
  uint64_t v9 = *(void *)((char *)a1 + 44);
  uint64_t v10 = *(void *)((char *)a1 + 28);
  unint64_t v11 = 2 * *(unsigned __int8 *)a1;
  uint64_t v12 = 2 * (v10 * a2 / v11);
  uint64_t v13 = v9 + v12;
  uint64_t v14 = 2 * ((v10 + v10 * a2) / v11);
  uint64_t v15 = v9 + v14;
  uint64_t v16 = a1[14];
  unint64_t v17 = a1[13] * a2;
  uint64_t v18 = a1[19];
  uint64_t v19 = (uint64_t *)a1[7];
  uint64_t v20 = (uint64_t *)a1[8];
  uint64_t v22 = a1[15];
  uint64_t v21 = (uint64_t *)a1[16];
  uint64_t v23 = (uint64_t *)a1[17];
  uint64_t v24 = v20[1];
  uint64_t v276 = *v20;
  uint64_t v25 = *v19;
  uint64_t v26 = v19[1];
  uint64_t v27 = v20[2];
  uint64_t result = (unsigned char *)v19[2];
  uint64_t v29 = *v23;
  uint64_t v30 = *v21;
  unsigned int v31 = *(_DWORD *)(v18 + 128);
  int v304 = *(_DWORD *)(v18 + 158);
  unsigned int v32 = *(unsigned __int16 *)(v18 + 140);
  uint64_t v33 = v22 + 2 * (v17 / v11);
  unsigned int v34 = *(unsigned __int16 *)(v18 + 142);
  float v35 = *(float *)v18;
  v3.i32[0] = *(_DWORD *)(v18 + 8);
  float32x2_t v36 = *(float32x2_t *)(v18 + 16);
  if (v13 >= 0) {
    uint64_t v37 = v13;
  }
  else {
    uint64_t v37 = v13 + 1;
  }
  v38.i32[0] = *(_DWORD *)(v18 + 28);
  uint64_t v273 = v24;
  uint64_t v274 = v29;
  uint64_t v39 = v24 * (v37 >> 1);
  uint64_t v275 = v27;
  uint64_t v40 = &result[v27 * v13];
  float v301 = *(float *)(v18 + 72);
  float v300 = *(float *)(v18 + 76);
  uint64_t v41 = v29 * v33;
  float v299 = *(float *)(v18 + 80);
  float v298 = *(float *)(v18 + 84);
  float v297 = *(float *)(v18 + 88);
  float v296 = *(float *)(v18 + 92);
  _S7 = *(float *)(v18 + 100);
  float v295 = *(float *)(v18 + 96);
  _S16 = *(float *)(v18 + 104);
  long long v302 = 0u;
  long long v303 = 0u;
  do
  {
    int v44 = 0;
    char v45 = *((unsigned char *)&v304 + v6);
    do
    {
      *(unsigned char *)(((unint64_t)&v302 + ((v45 + 4 * v44) & 0xF8)) | (v45 + 4 * (_BYTE)v44) & 7) = v5 + v44;
      ++v44;
    }
    while (v44 != 8);
    ++v6;
    v5 += 8;
  }
  while (v6 != 4);
  _ZF = v14 == v12;
  uint64_t v48 = v27;
  uint64_t v47 = v276;
  uint64_t v49 = v274;
  if (!_ZF)
  {
    unint64_t v50 = 0;
    unint64_t v272 = v15 - v13;
    uint64_t v51 = v18 + 164;
    uint64_t v52 = v18 + 16548;
    float v53 = 8191.0 / (float)v31;
    float v54 = (float)v32;
    float v55 = (float)v34;
    _S20 = v53 * v35;
    __asm { FCVT            H8, S20 }
    *(short float *)v4.i16 = (short float)v32;
    float16x8_t v294 = (float16x8_t)vdupq_lane_s16(v4, 0);
    short float v61 = -(short float)v34;
    v38.i32[1] = v3.i32[0];
    *(float32x2_t *)v3.f32 = vmul_n_f32(v38, v53);
    v62.i64[1] = v294.i64[0];
    *(float32x2_t *)v62.f32 = vmul_n_f32(v36, v53);
    _Q17 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v62), 0);
    float16x8_t v292 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float16x8_t v290 = vmulq_n_f16(v292, v61);
    float16x8_t v291 = _Q17;
    _S0 = v301;
    __asm { FCVT            H0, S0 }
    short float v288 = *(short float *)&_S0;
    float16x8_t v289 = vmulq_n_f16(_Q17, v61);
    _S0 = v300;
    __asm { FCVT            H0, S0 }
    short float v287 = *(short float *)&_S0;
    _S0 = v299;
    __asm { FCVT            H0, S0 }
    short float v286 = *(short float *)&_S0;
    _S0 = v298;
    __asm { FCVT            H0, S0 }
    short float v285 = *(short float *)&_S0;
    _S0 = v297;
    __asm { FCVT            H0, S0 }
    short float v284 = *(short float *)&_S0;
    _S0 = v296;
    __asm { FCVT            H0, S0 }
    short float v283 = *(short float *)&_S0;
    _S0 = v295;
    __asm { FCVT            H0, S0 }
    short float v282 = *(short float *)&_S0;
    __asm { FCVT            H0, S7 }
    short float v281 = *(short float *)&_S0;
    __asm { FCVT            H0, S16 }
    short float v280 = *(short float *)&_S0;
    uint64_t v71 = v30 + v41 + 4 * v16;
    if (result) {
      uint64_t v72 = (uint64_t)&v40[v8];
    }
    else {
      uint64_t v72 = 0;
    }
    uint64_t result = (unsigned char *)(v26 + v39 + v8);
    float v73 = (int8x8_t *)(v25 + v276 * v13 + v8);
    float v293 = v3.f32[0];
    uint64_t v74 = v62.i64[0];
    float v279 = v3.f32[1];
    v75.i64[0] = 0x9000900090009000;
    v75.i64[1] = 0x9000900090009000;
    float v278 = (float)v34;
    do
    {
      float v76 = (char *)v73 + v47;
      float v77 = (float16x8_t *)(v71 + v49);
      float v78 = (int8x8_t *)(v72 + v48);
      uint64_t v277 = v71 + v49;
      if ((int)v7 < 8)
      {
        unint64_t v160 = 0;
        float v159 = result;
        float v82 = (int8x8_t *)(v72 + v48);
        float v81 = (int8x8_t *)((char *)v73 + v47);
        float v80 = v77;
      }
      else
      {
        uint64_t v79 = 0;
        _Q17.i64[0] = *((void *)&v302 + 1);
        float v80 = (float16x8_t *)(v71 + v49);
        float v81 = (int8x8_t *)((char *)v73 + v47);
        float v82 = v78;
        do
        {
          int8x8_t v83 = *(int8x8_t *)&result[v79];
          int8x8_t v84 = 0;
          *(int8x8_t *)v85.i8 = vzip1_s8(v83, 0);
          v85.u64[1] = (unint64_t)vzip2_s8(v83, 0);
          float16x8_t v86 = vcvtq_f16_u16(v85);
          int8x16_t v87 = (int8x16_t)vmlaq_f16(v290, v292, v86);
          int8x16_t v88 = (int8x16_t)vmlaq_f16(v289, v291, v86);
          v86.i64[0] = vextq_s8(v87, v87, 8uLL).u64[0];
          *(int16x4_t *)v89.i8 = vuzp1_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v86.i8);
          *(int16x4_t *)v86.i8 = vuzp2_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v86.i8);
          v86.i64[1] = v291.i64[0];
          float16x8_t v90 = (float16x8_t)vzip1q_s16((int16x8_t)v86, (int16x8_t)v86);
          v89.i64[1] = v291.i64[0];
          float16x8_t v91 = (float16x8_t)vzip1q_s16(v89, v89);
          v86.i64[0] = vextq_s8(v88, v88, 8uLL).u64[0];
          *(float16x4_t *)v86.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v88.i8, *(int16x4_t *)v86.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v88.i8, *(int16x4_t *)v86.i8));
          int8x8_t v92 = *v73++;
          float16x8_t v93 = (float16x8_t)vzip1q_s16((int16x8_t)v86, (int16x8_t)v86);
          *(int8x8_t *)v86.i8 = vzip1_s8(v92, 0);
          v86.u64[1] = (unint64_t)vzip2_s8(v92, 0);
          int8x8_t v94 = *v81++;
          *(int8x8_t *)v89.i8 = vzip1_s8(v94, 0);
          v89.u64[1] = (unint64_t)vzip2_s8(v94, 0);
          float16x8_t v95 = vcvtq_f16_u16((uint16x8_t)v89);
          float16x8_t v96 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v86), v294);
          float16x8_t v97 = vsubq_f16(v95, v294);
          float16x8_t v98 = vmlaq_n_f16(v90, v96, _H8);
          float16x8_t v99 = vmlaq_n_f16(v90, v97, _H8);
          float16x8_t v100 = vmlaq_n_f16(v93, v96, _H8);
          float16x8_t v101 = vmlaq_n_f16(v93, v97, _H8);
          float16x8_t v102 = vmlaq_n_f16(v91, v96, _H8);
          float16x8_t v103 = vmlaq_n_f16(v91, v97, _H8);
          if (v72)
          {
            int8x8_t v104 = *(int8x8_t *)v72;
            v72 += 8;
            int8x8_t v84 = v104;
            int8x8_t v105 = *v82++;
            int8x8_t v106 = v105;
          }
          else
          {
            int8x8_t v106 = 0;
          }
          uint16x8_t v107 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v98, (float16x8_t)0), v75));
          uint32x4_t v108 = vmovl_high_u16(v107);
          float16x8_t v109 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v107.i8);
          v109.i16[0] = *(_WORD *)(v51 + 2 * v109.u32[0]);
          v109.i16[1] = *(_WORD *)(v51 + 2 * v109.u32[1]);
          v109.i16[2] = *(_WORD *)(v51 + 2 * v109.u32[2]);
          v109.i16[3] = *(_WORD *)(v51 + 2 * v109.u32[3]);
          v109.i16[4] = *(_WORD *)(v51 + 2 * v108.u32[0]);
          v109.i16[5] = *(_WORD *)(v51 + 2 * v108.u32[1]);
          v109.i16[6] = *(_WORD *)(v51 + 2 * v108.u32[2]);
          v109.i16[7] = *(_WORD *)(v51 + 2 * v108.u32[3]);
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v100, (float16x8_t)0), v75));
          uint32x4_t v111 = vmovl_high_u16(v110);
          float16x8_t v112 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v110.i8);
          v112.i16[0] = *(_WORD *)(v51 + 2 * v112.u32[0]);
          v112.i16[1] = *(_WORD *)(v51 + 2 * v112.u32[1]);
          v112.i16[2] = *(_WORD *)(v51 + 2 * v112.u32[2]);
          v112.i16[3] = *(_WORD *)(v51 + 2 * v112.u32[3]);
          v112.i16[4] = *(_WORD *)(v51 + 2 * v111.u32[0]);
          v112.i16[5] = *(_WORD *)(v51 + 2 * v111.u32[1]);
          v112.i16[6] = *(_WORD *)(v51 + 2 * v111.u32[2]);
          v112.i16[7] = *(_WORD *)(v51 + 2 * v111.u32[3]);
          uint16x8_t v113 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v102, (float16x8_t)0), v75));
          float16x8_t v114 = (float16x8_t)vmovl_high_u16(v113);
          *(void *)&long long v115 = v114.u32[2];
          *((void *)&v115 + 1) = v114.u32[3];
          long long v116 = v115;
          *(void *)&long long v115 = v114.u32[0];
          *((void *)&v115 + 1) = v114.u32[1];
          uint32x4_t v117 = vmovl_u16(*(uint16x4_t *)v113.i8);
          v114.i16[0] = *(_WORD *)(v51 + 2 * v117.u32[0]);
          v114.i16[1] = *(_WORD *)(v51 + 2 * v117.u32[1]);
          v114.i16[2] = *(_WORD *)(v51 + 2 * v117.u32[2]);
          v114.i16[3] = *(_WORD *)(v51 + 2 * v117.u32[3]);
          v114.i16[4] = *(_WORD *)(v51 + 2 * v115);
          v114.i16[5] = *(_WORD *)(v51 + 2 * *((void *)&v115 + 1));
          v114.i16[6] = *(_WORD *)(v51 + 2 * v116);
          v114.i16[7] = *(_WORD *)(v51 + 2 * *((void *)&v116 + 1));
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v99, (float16x8_t)0), v75));
          uint32x4_t v119 = vmovl_high_u16(v118);
          float16x8_t v120 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v118.i8);
          v120.i16[0] = *(_WORD *)(v51 + 2 * v120.u32[0]);
          v120.i16[1] = *(_WORD *)(v51 + 2 * v120.u32[1]);
          v120.i16[2] = *(_WORD *)(v51 + 2 * v120.u32[2]);
          v120.i16[3] = *(_WORD *)(v51 + 2 * v120.u32[3]);
          v120.i16[4] = *(_WORD *)(v51 + 2 * v119.u32[0]);
          v120.i16[5] = *(_WORD *)(v51 + 2 * v119.u32[1]);
          v120.i16[6] = *(_WORD *)(v51 + 2 * v119.u32[2]);
          v120.i16[7] = *(_WORD *)(v51 + 2 * v119.u32[3]);
          uint16x8_t v121 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v101, (float16x8_t)0), v75));
          float16x8_t v122 = (float16x8_t)vmovl_high_u16(v121);
          *(void *)&long long v115 = v122.u32[2];
          *((void *)&v115 + 1) = v122.u32[3];
          long long v123 = v115;
          *(void *)&long long v115 = v122.u32[0];
          *((void *)&v115 + 1) = v122.u32[1];
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v121.i8);
          v122.i16[0] = *(_WORD *)(v51 + 2 * v124.u32[0]);
          v122.i16[1] = *(_WORD *)(v51 + 2 * v124.u32[1]);
          v122.i16[2] = *(_WORD *)(v51 + 2 * v124.u32[2]);
          v122.i16[3] = *(_WORD *)(v51 + 2 * v124.u32[3]);
          v122.i16[4] = *(_WORD *)(v51 + 2 * v115);
          v122.i16[5] = *(_WORD *)(v51 + 2 * *((void *)&v115 + 1));
          v122.i16[6] = *(_WORD *)(v51 + 2 * v123);
          v122.i16[7] = *(_WORD *)(v51 + 2 * *((void *)&v123 + 1));
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v103, (float16x8_t)0), v75));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          v128.i16[0] = *(_WORD *)(v51 + 2 * v127.u32[0]);
          v128.i16[1] = *(_WORD *)(v51 + 2 * v127.u32[1]);
          v128.i16[2] = *(_WORD *)(v51 + 2 * v127.u32[2]);
          v128.i16[3] = *(_WORD *)(v51 + 2 * v127.u32[3]);
          v128.i16[4] = *(_WORD *)(v51 + 2 * v126.u32[0]);
          v128.i16[5] = *(_WORD *)(v51 + 2 * v126.u32[1]);
          v128.i16[6] = *(_WORD *)(v51 + 2 * v126.u32[2]);
          v128.i16[7] = *(_WORD *)(v51 + 2 * v126.u32[3]);
          float16x8_t v129 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v109, v288), v112, v287), v114, v286);
          float16x8_t v130 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v109, v285), v112, v284), v114, v283);
          float16x8_t v131 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v280), v112, v281), v109, v282);
          float16x8_t v132 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v120, v288), v122, v287), v128, v286);
          float16x8_t v133 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v120, v285), v122, v284), v128, v283);
          float16x8_t v134 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v128, v280), v122, v281), v120, v282);
          uint16x8_t v135 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v75));
          v306.val[1] = (int8x16_t)vmovl_high_u16(v135);
          *(void *)&long long v115 = v306.val[1].u32[2];
          *((void *)&v115 + 1) = v306.val[1].u32[3];
          long long v136 = v115;
          *(void *)&long long v115 = v306.val[1].u32[0];
          *((void *)&v115 + 1) = v306.val[1].u32[1];
          uint32x4_t v137 = vmovl_u16(*(uint16x4_t *)v135.i8);
          v306.val[1].i16[0] = *(_WORD *)(v52 + 2 * v137.u32[0]);
          v306.val[1].i16[1] = *(_WORD *)(v52 + 2 * v137.u32[1]);
          v306.val[1].i16[2] = *(_WORD *)(v52 + 2 * v137.u32[2]);
          v306.val[1].i16[3] = *(_WORD *)(v52 + 2 * v137.u32[3]);
          v306.val[1].i16[4] = *(_WORD *)(v52 + 2 * v115);
          v306.val[1].i16[5] = *(_WORD *)(v52 + 2 * *((void *)&v115 + 1));
          v306.val[1].i16[6] = *(_WORD *)(v52 + 2 * v136);
          v306.val[1].i16[7] = *(_WORD *)(v52 + 2 * *((void *)&v136 + 1));
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v130, (float16x8_t)0), v75));
          float16x8_t v139 = (float16x8_t)vmovl_high_u16(v138);
          *(void *)&long long v115 = v139.u32[2];
          *((void *)&v115 + 1) = v139.u32[3];
          long long v140 = v115;
          *(void *)&long long v115 = v139.u32[0];
          *((void *)&v115 + 1) = v139.u32[1];
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v138.i8);
          v139.i16[0] = *(_WORD *)(v52 + 2 * v141.u32[0]);
          v139.i16[1] = *(_WORD *)(v52 + 2 * v141.u32[1]);
          v139.i16[2] = *(_WORD *)(v52 + 2 * v141.u32[2]);
          v139.i16[3] = *(_WORD *)(v52 + 2 * v141.u32[3]);
          v139.i16[4] = *(_WORD *)(v52 + 2 * v115);
          v139.i16[5] = *(_WORD *)(v52 + 2 * *((void *)&v115 + 1));
          v139.i16[6] = *(_WORD *)(v52 + 2 * v140);
          v139.i16[7] = *(_WORD *)(v52 + 2 * *((void *)&v140 + 1));
          uint16x8_t v142 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v131, (float16x8_t)0), v75));
          uint32x4_t v143 = vmovl_high_u16(v142);
          float16x8_t v144 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v142.i8);
          v144.i16[0] = *(_WORD *)(v52 + 2 * v144.u32[0]);
          v144.i16[1] = *(_WORD *)(v52 + 2 * v144.u32[1]);
          v144.i16[2] = *(_WORD *)(v52 + 2 * v144.u32[2]);
          v144.i16[3] = *(_WORD *)(v52 + 2 * v144.u32[3]);
          v144.i16[4] = *(_WORD *)(v52 + 2 * v143.u32[0]);
          v144.i16[5] = *(_WORD *)(v52 + 2 * v143.u32[1]);
          v144.i16[6] = *(_WORD *)(v52 + 2 * v143.u32[2]);
          v144.i16[7] = *(_WORD *)(v52 + 2 * v143.u32[3]);
          uint16x8_t v145 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v132, (float16x8_t)0), v75));
          float16x8_t v146 = (float16x8_t)vmovl_high_u16(v145);
          *(void *)&long long v115 = v146.u32[2];
          *((void *)&v115 + 1) = v146.u32[3];
          long long v147 = v115;
          *(void *)&long long v115 = v146.u32[0];
          *((void *)&v115 + 1) = v146.u32[1];
          uint32x4_t v148 = vmovl_u16(*(uint16x4_t *)v145.i8);
          v146.i16[0] = *(_WORD *)(v52 + 2 * v148.u32[0]);
          v146.i16[1] = *(_WORD *)(v52 + 2 * v148.u32[1]);
          v146.i16[2] = *(_WORD *)(v52 + 2 * v148.u32[2]);
          v146.i16[3] = *(_WORD *)(v52 + 2 * v148.u32[3]);
          v146.i16[4] = *(_WORD *)(v52 + 2 * v115);
          v146.i16[5] = *(_WORD *)(v52 + 2 * *((void *)&v115 + 1));
          v146.i16[6] = *(_WORD *)(v52 + 2 * v147);
          v146.i16[7] = *(_WORD *)(v52 + 2 * *((void *)&v147 + 1));
          uint16x8_t v149 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v133, (float16x8_t)0), v75));
          uint32x4_t v150 = vmovl_high_u16(v149);
          float16x8_t v151 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v149.i8);
          v151.i16[0] = *(_WORD *)(v52 + 2 * v151.u32[0]);
          v151.i16[1] = *(_WORD *)(v52 + 2 * v151.u32[1]);
          v151.i16[2] = *(_WORD *)(v52 + 2 * v151.u32[2]);
          v151.i16[3] = *(_WORD *)(v52 + 2 * v151.u32[3]);
          v151.i16[4] = *(_WORD *)(v52 + 2 * v150.u32[0]);
          v151.i16[5] = *(_WORD *)(v52 + 2 * v150.u32[1]);
          v151.i16[6] = *(_WORD *)(v52 + 2 * v150.u32[2]);
          v151.i16[7] = *(_WORD *)(v52 + 2 * v150.u32[3]);
          uint16x8_t v152 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v134, (float16x8_t)0), v75));
          uint32x4_t v153 = vmovl_high_u16(v152);
          float16x8_t v154 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v152.i8);
          v154.i16[0] = *(_WORD *)(v52 + 2 * v154.u32[0]);
          v154.i16[1] = *(_WORD *)(v52 + 2 * v154.u32[1]);
          v154.i16[2] = *(_WORD *)(v52 + 2 * v154.u32[2]);
          v154.i16[3] = *(_WORD *)(v52 + 2 * v154.u32[3]);
          v154.i16[4] = *(_WORD *)(v52 + 2 * v153.u32[0]);
          v154.i16[5] = *(_WORD *)(v52 + 2 * v153.u32[1]);
          v154.i16[6] = *(_WORD *)(v52 + 2 * v153.u32[2]);
          v154.i16[7] = *(_WORD *)(v52 + 2 * v153.u32[3]);
          int8x8_t v155 = (int8x8_t)vceqd_s64(v72, 0);
          v153.i64[0] = v302;
          float16x8_t v156 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v305.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v144, (float16x8_t)0), v156)));
          v305.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16((float16x8_t)v306.val[1], (float16x8_t)0), v156)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v139, (float16x8_t)0), v156)));
          v144.i64[0] = *((void *)&v303 + 1);
          _D12 = (int8x8_t)v303;
          v305.val[1].u64[1] = (unint64_t)vorr_s8(v84, v155);
          *(int8x8_t *)&long long v157 = vqtbl2_s8(v305, *(int8x8_t *)&v302);
          *((int8x8_t *)&v157 + 1) = vqtbl2_s8(v305, *(int8x8_t *)_Q17.i8);
          *(int8x8_t *)v306.val[1].i8 = vqtbl2_s8(v305, *(int8x8_t *)&v303);
          v306.val[1].u64[1] = (unint64_t)vqtbl2_s8(v305, *(int8x8_t *)((char *)&v303 + 8));
          int8x8_t v158 = vorr_s8(v106, v155);
          *(_OWORD *)uint64_t v71 = v157;
          *(int8x16_t *)(v71 + 16) = v306.val[1];
          v71 += 32;
          *(int8x8_t *)v306.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v154, (float16x8_t)0), v156)));
          v306.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v146, (float16x8_t)0), v156)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v151, (float16x8_t)0), v156)));
          v306.val[1].u64[1] = (unint64_t)v158;
          *(int8x8_t *)v151.i8 = vqtbl2_s8(v306, *(int8x8_t *)v153.i8);
          v151.u64[1] = (unint64_t)vqtbl2_s8(v306, *(int8x8_t *)_Q17.i8);
          *(int8x8_t *)v154.i8 = vqtbl2_s8(v306, _D12);
          v154.u64[1] = (unint64_t)vqtbl2_s8(v306, *(int8x8_t *)v144.i8);
          *float v80 = v151;
          v80[1] = v154;
          v80 += 2;
          v79 += 8;
        }
        while ((int)v79 < (int)v7 - 7);
        float v159 = &result[v79];
        unint64_t v160 = v7 & 0xFFFFFFF8;
      }
      if (v7 > v160)
      {
        uint64_t v161 = 0;
        uint64_t v162 = v71 + 4;
        do
        {
          _Q17.i8[0] = v159[1];
          *(float *)&unsigned int v163 = (float)_Q17.u32[0];
          float v164 = *(float *)&v163 - v55;
          float v165 = v279 * (float)(*(float *)&v163 - v55);
          LOBYTE(v163) = v73->i8[0];
          *(float *)_Q17.i32 = _S20 * (float)((float)v163 - v54);
          float v166 = v165 + *(float *)_Q17.i32;
          float v167 = 8191.0;
          if ((float)(v165 + *(float *)_Q17.i32) <= 8191.0)
          {
            float v167 = v165 + *(float *)_Q17.i32;
            if (v166 < 0.0) {
              float v167 = 0.0;
            }
          }
          LOBYTE(v166) = *v159;
          float v168 = (float)LODWORD(v166) - v55;
          float v169 = (float)(*((float *)&v74 + 1) * v164) + (float)(v168 * *(float *)&v74);
          float v170 = 8191.0;
          if ((float)(*(float *)_Q17.i32 + v169) <= 8191.0)
          {
            float v170 = *(float *)_Q17.i32 + v169;
            if ((float)(*(float *)_Q17.i32 + v169) < 0.0) {
              float v170 = 0.0;
            }
          }
          float v171 = v293 * v168;
          float v172 = (float)(v293 * v168) + *(float *)_Q17.i32;
          float v173 = 8191.0;
          if (v172 <= 8191.0)
          {
            float v173 = v172;
            if (v172 < 0.0) {
              float v173 = 0.0;
            }
          }
          LOBYTE(v172) = v73->i8[1];
          float v174 = _S20 * (float)((float)LODWORD(v172) - v54);
          float v175 = 8191.0;
          if ((float)(v165 + v174) <= 8191.0)
          {
            float v175 = v165 + v174;
            if ((float)(v165 + v174) < 0.0) {
              float v175 = 0.0;
            }
          }
          float v176 = 8191.0;
          if ((float)(v169 + v174) <= 8191.0)
          {
            float v176 = v169 + v174;
            if ((float)(v169 + v174) < 0.0) {
              float v176 = 0.0;
            }
          }
          float v177 = v171 + v174;
          float v178 = 8191.0;
          if (v177 <= 8191.0)
          {
            float v178 = v177;
            if (v177 < 0.0) {
              float v178 = 0.0;
            }
          }
          LOBYTE(v177) = v81->i8[0];
          float v179 = _S20 * (float)((float)LODWORD(v177) - v54);
          float v180 = 8191.0;
          if ((float)(v165 + v179) <= 8191.0)
          {
            float v180 = v165 + v179;
            if ((float)(v165 + v179) < 0.0) {
              float v180 = 0.0;
            }
          }
          float v181 = 8191.0;
          if ((float)(v169 + v179) <= 8191.0)
          {
            float v181 = v169 + v179;
            if ((float)(v169 + v179) < 0.0) {
              float v181 = 0.0;
            }
          }
          float v182 = v171 + v179;
          BOOL v183 = (float)(v171 + v179) <= 8191.0;
          float v184 = 8191.0;
          if (v183)
          {
            float v184 = v182;
            if (v182 < 0.0) {
              float v184 = 0.0;
            }
          }
          _D12.i8[0] = v81->i8[1];
          *(float *)_D12.i32 = _S20 * (float)((float)_D12.u32[0] - v54);
          float v185 = v165 + *(float *)_D12.i32;
          float v186 = 8191.0;
          if (v185 <= 8191.0)
          {
            float v186 = v185;
            if (v185 < 0.0) {
              float v186 = 0.0;
            }
          }
          float v187 = v169 + *(float *)_D12.i32;
          BOOL v183 = (float)(v169 + *(float *)_D12.i32) <= 8191.0;
          float v188 = 8191.0;
          if (v183)
          {
            float v188 = v187;
            if (v187 < 0.0) {
              float v188 = 0.0;
            }
          }
          float v189 = v171 + *(float *)_D12.i32;
          float v190 = 8191.0;
          if (v189 <= 8191.0)
          {
            float v190 = v189;
            if (v189 < 0.0) {
              float v190 = 0.0;
            }
          }
          if (v72)
          {
            char v191 = *(unsigned char *)v72;
            char v192 = *(unsigned char *)(v72 + 1);
            v72 += 2;
            char v193 = v82->i8[0];
            char v194 = v82->i8[1];
            float v82 = (int8x8_t *)((char *)v82 + 2);
          }
          else
          {
            char v191 = 0;
            char v192 = 0;
            char v193 = 0;
            char v194 = 0;
          }
          _H9 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v167, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H24 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v170, 0.0), 8191.0)));
          _H19 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v173, 0.0), 8191.0)));
          __asm
          {
            FCVT            S24, H24
            FCVT            S19, H19
          }
          _H21 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0)));
          __asm { FCVT            S21, H21 }
          _H25 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v176, 0.0), 8191.0)));
          __asm { FCVT            S25, H25 }
          _H26 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H28 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v180, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H17 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v181, 0.0), 8191.0)));
          _H23 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v184, 0.0), 8191.0)));
          __asm
          {
            FCVT            S17, H17
            FCVT            S23, H23
          }
          _H27 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v186, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H29 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v188, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H10 = *(_WORD *)(v51 + 2 * llroundf(fminf(fmaxf(v190, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          *(float *)_D12.i32 = (float)((float)(v300 * _S24) + (float)(_S9 * v301)) + (float)(_S19 * v299);
          float v219 = (float)((float)(v297 * _S24) + (float)(_S9 * v298)) + (float)(_S19 * v296);
          float v220 = (float)((float)(_S7 * _S24) + (float)(_S9 * v295)) + (float)(_S19 * _S16);
          float v221 = (float)((float)(v300 * _S25) + (float)(_S21 * v301)) + (float)(_S26 * v299);
          float v222 = (float)((float)(v297 * _S25) + (float)(_S21 * v298)) + (float)(_S26 * v296);
          float v223 = (float)((float)(_S7 * _S25) + (float)(_S21 * v295)) + (float)(_S26 * _S16);
          float v224 = (float)((float)(v300 * _S17) + (float)(_S28 * v301)) + (float)(_S23 * v299);
          float v225 = (float)((float)(v297 * _S17) + (float)(_S28 * v298)) + (float)(_S23 * v296);
          float v226 = (float)((float)(_S7 * _S17) + (float)(_S28 * v295)) + (float)(_S23 * _S16);
          float v227 = (float)((float)(v300 * _S29) + (float)(_S27 * v301)) + (float)(_S10 * v299);
          float v228 = (float)((float)(v297 * _S29) + (float)(_S27 * v298)) + (float)(_S10 * v296);
          float v229 = (float)((float)(_S7 * _S29) + (float)(_S27 * v295)) + (float)(_S10 * _S16);
          short float v230 = *(short float *)(v52 + 2 * llroundf(fminf(fmaxf(*(float *)_D12.i32, 0.0), 8191.0)));
          short float v231 = *(short float *)(v52 + 2 * llroundf(fminf(fmaxf(v219, 0.0), 8191.0)));
          _D12.i16[0] = *(_WORD *)(v52 + 2 * llroundf(fminf(fmaxf(v220, 0.0), 8191.0)));
          short float v232 = *(short float *)(v52 + 2 * llroundf(fminf(fmaxf(v221, 0.0), 8191.0)));
          short float v233 = *(short float *)(v52 + 2 * llroundf(fminf(fmaxf(v222, 0.0), 8191.0)));
          short float v234 = *(short float *)(v52 + 2 * llroundf(fminf(fmaxf(v223, 0.0), 8191.0)));
          short float v235 = *(short float *)(v52 + 2 * llroundf(fminf(fmaxf(v224, 0.0), 8191.0)));
          short float v236 = *(short float *)(v52 + 2 * llroundf(fminf(fmaxf(v225, 0.0), 8191.0)));
          short float v237 = *(short float *)(v52 + 2 * llroundf(fminf(fmaxf(v226, 0.0), 8191.0)));
          short float v238 = *(short float *)(v52 + 2 * llroundf(fminf(fmaxf(v227, 0.0), 8191.0)));
          short float v239 = *(short float *)(v52 + 2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0)));
          short float v240 = *(short float *)(v52 + 2 * llroundf(fminf(fmaxf(v229, 0.0), 8191.0)));
          if (v72) {
            char v241 = v191;
          }
          else {
            char v241 = -1;
          }
          if (v72) {
            char v242 = v192;
          }
          else {
            char v242 = -1;
          }
          if (v72) {
            char v243 = v193;
          }
          else {
            char v243 = -1;
          }
          if (v72) {
            char v244 = v194;
          }
          else {
            char v244 = -1;
          }
          if (v230 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H15, #0 }
            if (_NF) {
              _S11 = 0.0;
            }
            else {
              __asm { FCVT            S11, H15 }
            }
          }
          else
          {
            _S11 = 255.0;
          }
          float v55 = v278;
          uint64_t v247 = v304;
          *(unsigned char *)(v162 + v161 + v304 - 4) = llroundf(_S11);
          if (v231 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H14, #0 }
            if (_NF) {
              _S11 = 0.0;
            }
            else {
              __asm { FCVT            S11, H14 }
            }
          }
          else
          {
            _S11 = 255.0;
          }
          uint64_t v250 = BYTE1(v304);
          *(unsigned char *)(v162 + v161 + BYTE1(v304) - 4) = llroundf(_S11);
          if (*(short float *)_D12.i16 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S11 = 0.0;
            }
            else {
              __asm { FCVT            S11, H12 }
            }
          }
          else
          {
            _S11 = 255.0;
          }
          uint64_t v252 = BYTE2(v304);
          *(unsigned char *)(v162 + v161 + BYTE2(v304) - 4) = llroundf(_S11);
          uint64_t v253 = HIBYTE(v304);
          *(unsigned char *)(v162 + v161 + HIBYTE(v304) - 4) = v241;
          if (v232 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H23, #0 }
            if (_NF) {
              _S23 = 0.0;
            }
            else {
              __asm { FCVT            S23, H23 }
            }
          }
          else
          {
            _S23 = 255.0;
          }
          *(unsigned char *)(v162 + v161 + v247) = llroundf(_S23);
          if (v233 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H29, #0 }
            if (_NF) {
              _S23 = 0.0;
            }
            else {
              __asm { FCVT            S23, H29 }
            }
          }
          else
          {
            _S23 = 255.0;
          }
          *(unsigned char *)(v162 + v161 + v250) = llroundf(_S23);
          if (v234 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H28, #0 }
            if (_NF) {
              _S23 = 0.0;
            }
            else {
              __asm { FCVT            S23, H28 }
            }
          }
          else
          {
            _S23 = 255.0;
          }
          *(unsigned char *)(v162 + v161 + v252) = llroundf(_S23);
          *(unsigned char *)(v162 + v161 + v253) = v242;
          if (v235 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H21, #0 }
            if (_NF) {
              _S21 = 0.0;
            }
            else {
              __asm { FCVT            S21, H21 }
            }
          }
          else
          {
            _S21 = 255.0;
          }
          v80->i8[v247 + v161] = llroundf(_S21);
          if (v236 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H19, #0 }
            if (_NF) {
              _S19 = 0.0;
            }
            else {
              __asm { FCVT            S19, H19 }
            }
          }
          else
          {
            _S19 = 255.0;
          }
          v80->i8[BYTE1(v304) + v161] = llroundf(_S19);
          if (v237 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H27, #0 }
            if (_NF) {
              _S19 = 0.0;
            }
            else {
              __asm { FCVT            S19, H27 }
            }
          }
          else
          {
            _S19 = 255.0;
          }
          v80->i8[BYTE2(v304) + v161] = llroundf(_S19);
          v80->i8[HIBYTE(v304) + v161] = v243;
          if (v238 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S19 = 0.0;
            }
            else {
              __asm { FCVT            S19, H26 }
            }
          }
          else
          {
            _S19 = 255.0;
          }
          v80->i8[v161 + 4 + v304] = llroundf(_S19);
          if (v239 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H25, #0 }
            if (_NF) {
              _S19 = 0.0;
            }
            else {
              __asm { FCVT            S19, H25 }
            }
          }
          else
          {
            _S19 = 255.0;
          }
          v80->i8[v161 + 4 + BYTE1(v304)] = llroundf(_S19);
          if (v240 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H17, #0 }
            if (_NF) {
              _Q17.i32[0] = 0;
            }
            else {
              __asm { FCVT            S17, H17 }
            }
          }
          else
          {
            _Q17.i32[0] = 1132396544;
          }
          v80->i8[v161 + 4 + BYTE2(v304)] = llroundf(*(float *)_Q17.i32);
          float v271 = &v80->i8[v161 + HIBYTE(v304)];
          v160 += 2;
          v161 += 8;
          v271[4] = v244;
          v159 += 2;
          float v73 = (int8x8_t *)((char *)v73 + 2);
          float v81 = (int8x8_t *)((char *)v81 + 2);
        }
        while (v7 > v160);
      }
      uint64_t v48 = v275;
      uint64_t v47 = v276;
      float v73 = (int8x8_t *)&v76[v276];
      uint64_t v49 = v274;
      result += v273;
      uint64_t v72 = (uint64_t)v78 + v275;
      uint64_t v71 = v277 + v274;
      v50 += 2;
    }
    while (v272 > v50);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_BGRA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = 2 * *result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    unint64_t v12 = *(void *)(result + 20);
    uint64_t v13 = *(void *)(result + 44);
    uint64_t v14 = v13 + 2 * v9;
    unint64_t v175 = v13 + 2 * v10 - v14;
    uint64_t v15 = *((void *)result + 19);
    uint64_t v16 = (void *)*((void *)result + 7);
    uint64_t v17 = (uint64_t *)*((void *)result + 8);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = **((void **)result + 17);
    *(float *)&unsigned int v22 = (float)*(unsigned int *)(v15 + 128);
    float v23 = 8191.0 / *(float *)&v22;
    LOWORD(v22) = *(_WORD *)(v15 + 140);
    float v24 = (float)v22;
    LOWORD(a5) = *(_WORD *)(v15 + 142);
    float v25 = (float)LODWORD(a5);
    float v26 = v23 * *(float *)v15;
    float v179 = v23 * *(float *)(v15 + 8);
    float v178 = v23 * *(float *)(v15 + 16);
    float v176 = v23 * *(float *)(v15 + 28);
    float v177 = v23 * *(float *)(v15 + 20);
    float v27 = *(float *)(v15 + 72);
    float v28 = *(float *)(v15 + 76);
    float v29 = *(float *)(v15 + 80);
    float v30 = *(float *)(v15 + 84);
    float v31 = *(float *)(v15 + 88);
    float v32 = *(float *)(v15 + 92);
    float v33 = *(float *)(v15 + 96);
    float v34 = *(float *)(v15 + 100);
    float v35 = *(float *)(v15 + 104);
    uint64_t v36 = v15 + 164;
    uint64_t v37 = v15 + 16548;
    uint64_t v38 = *((void *)result + 14);
    unint64_t v39 = *((void *)result + 13) * a2;
    uint64_t v40 = (void *)*((void *)result + 16);
    uint64_t v41 = *((void *)result + 15) + 2 * (v39 / v8);
    uint64_t v42 = *(void *)(result + 36);
    uint64_t v43 = v16[1];
    int v44 = (unsigned char *)(*v16 + v18 * v14 + v42);
    uint64_t v45 = v16[2];
    _ZF = v45 == 0;
    uint64_t v47 = (char *)(v45 + v20 * v14 + v42);
    if (_ZF) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = v47;
    }
    uint64_t v49 = *v40 + v41 * v21 + 4 * v38;
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v15 + 161);
    uint64_t v50 = *(unsigned __int8 *)(v15 + 160);
    uint64_t v174 = v19;
    uint64_t v51 = *(unsigned __int8 *)(v15 + 159);
    uint64_t v52 = *(unsigned __int8 *)(v15 + 158);
    uint64_t v53 = v43 + v19 * (v14 / 2) + v42;
    do
    {
      uint64_t v54 = v49 + v21;
      float v55 = &v48[v20];
      float v56 = &v44[v18];
      if (v12)
      {
        unint64_t v57 = 0;
        uint64_t v58 = v49 + v21;
        unint64_t v59 = &v44[v18];
        uint64_t v60 = &v48[v20];
        do
        {
          LOBYTE(_S26) = *(unsigned char *)(v53 + v57 + 1);
          *(float *)&unsigned int v61 = (float)LODWORD(_S26);
          float v62 = *(float *)&v61 - v25;
          float v63 = v179 * (float)(*(float *)&v61 - v25);
          LOBYTE(v61) = *v44;
          float v64 = v26 * (float)((float)v61 - v24);
          float v65 = v63 + v64;
          float v66 = 8191.0;
          if ((float)(v63 + v64) <= 8191.0)
          {
            float v66 = v63 + v64;
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          LOBYTE(v65) = *(unsigned char *)(v53 + v57);
          float v67 = (float)LODWORD(v65) - v25;
          float v68 = (float)(v177 * v62) + (float)(v67 * v178);
          float v69 = 8191.0;
          if ((float)(v64 + v68) <= 8191.0)
          {
            float v69 = v64 + v68;
            if ((float)(v64 + v68) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v176 * v67;
          float v71 = (float)(v176 * v67) + v64;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          LOBYTE(v71) = v44[1];
          float v73 = v26 * (float)((float)LODWORD(v71) - v24);
          float v74 = 8191.0;
          if ((float)(v63 + v73) <= 8191.0)
          {
            float v74 = v63 + v73;
            if ((float)(v63 + v73) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = 8191.0;
          if ((float)(v68 + v73) <= 8191.0)
          {
            float v75 = v68 + v73;
            if ((float)(v68 + v73) < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v70 + v73;
          BOOL v77 = (float)(v70 + v73) <= 8191.0;
          float v78 = 8191.0;
          if (v77)
          {
            float v78 = v76;
            if (v76 < 0.0) {
              float v78 = 0.0;
            }
          }
          LOBYTE(v76) = *v59;
          float v79 = v26 * (float)((float)LODWORD(v76) - v24);
          float v80 = 8191.0;
          if ((float)(v63 + v79) <= 8191.0)
          {
            float v80 = v63 + v79;
            if ((float)(v63 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = 8191.0;
          if ((float)(v68 + v79) <= 8191.0)
          {
            float v81 = v68 + v79;
            if ((float)(v68 + v79) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v70 + v79;
          BOOL v77 = (float)(v70 + v79) <= 8191.0;
          float v83 = 8191.0;
          if (v77)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          LOBYTE(_S14) = v59[1];
          float v84 = v26 * (float)((float)LODWORD(_S14) - v24);
          float v85 = v63 + v84;
          BOOL v77 = (float)(v63 + v84) <= 8191.0;
          float v86 = 8191.0;
          if (v77)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v68 + v84;
          BOOL v77 = (float)(v68 + v84) <= 8191.0;
          float v88 = 8191.0;
          if (v77)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v70 + v84;
          float v90 = 8191.0;
          if (v89 <= 8191.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          if (v48)
          {
            char v91 = *v48;
            char v92 = v48[1];
            v48 += 2;
            char v93 = *v60;
            char v94 = v60[1];
            v60 += 2;
          }
          else
          {
            char v91 = 0;
            char v92 = 0;
            char v93 = 0;
            char v94 = 0;
          }
          _H26 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S26, H26 }
          _H27 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S28, H28
          }
          _H29 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H12 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm
          {
            FCVT            S12, H12
            FCVT            S13, H13
          }
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          float v122 = (float)((float)(v28 * _S27) + (float)(_S26 * v27)) + (float)(_S28 * v29);
          float v123 = (float)((float)(v31 * _S27) + (float)(_S26 * v30)) + (float)(_S28 * v32);
          float v124 = (float)((float)(v34 * _S27) + (float)(_S26 * v33)) + (float)(_S28 * v35);
          float v125 = (float)((float)(v28 * _S30) + (float)(_S29 * v27)) + (float)(_S31 * v29);
          float v126 = (float)((float)(v31 * _S30) + (float)(_S29 * v30)) + (float)(_S31 * v32);
          float v127 = (float)((float)(v34 * _S30) + (float)(_S29 * v33)) + (float)(_S31 * v35);
          float v128 = (float)((float)(v28 * _S12) + (float)(_S9 * v27)) + (float)(_S13 * v29);
          float v129 = (float)((float)(v31 * _S12) + (float)(_S9 * v30)) + (float)(_S13 * v32);
          float v130 = (float)((float)(v34 * _S12) + (float)(_S9 * v33)) + (float)(_S13 * v35);
          float v131 = (float)((float)(v28 * _S10) + (float)(_S8 * v27)) + (float)(_S11 * v29);
          float v132 = (float)((float)(v31 * _S10) + (float)(_S8 * v30)) + (float)(_S11 * v32);
          float v133 = (float)((float)(v34 * _S10) + (float)(_S8 * v33)) + (float)(_S11 * v35);
          short float v134 = *(short float *)(v37 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          short float v135 = *(short float *)(v37 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          short float v136 = *(short float *)(v37 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          short float v137 = *(short float *)(v37 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          short float v138 = *(short float *)(v37 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          short float v139 = *(short float *)(v37 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          short float v140 = *(short float *)(v37 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          short float v141 = *(short float *)(v37 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          short float v142 = *(short float *)(v37 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          short float v143 = *(short float *)(v37 + 2 * llroundf(fminf(fmaxf(v131, 0.0), 8191.0)));
          short float v144 = *(short float *)(v37 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          short float v145 = *(short float *)(v37 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          if (v48) {
            char v146 = v91;
          }
          else {
            char v146 = -1;
          }
          if (v48) {
            char v147 = v92;
          }
          else {
            char v147 = -1;
          }
          if (v48) {
            char v148 = v93;
          }
          else {
            char v148 = -1;
          }
          if (v48) {
            char v149 = v94;
          }
          else {
            char v149 = -1;
          }
          if (v134 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H14, #0 }
            if (_NF) {
              _S14 = 0.0;
            }
            else {
              __asm { FCVT            S14, H14 }
            }
          }
          else
          {
            _S14 = 255.0;
          }
          *(unsigned char *)(v49 + v52) = llroundf(_S14);
          if (v135 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H13, #0 }
            if (_NF) {
              _S13 = 0.0;
            }
            else {
              __asm { FCVT            S13, H13 }
            }
          }
          else
          {
            _S13 = 255.0;
          }
          *(unsigned char *)(v49 + v51) = llroundf(_S13);
          if (v136 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H12, #0 }
            if (_NF) {
              _S12 = 0.0;
            }
            else {
              __asm { FCVT            S12, H12 }
            }
          }
          else
          {
            _S12 = 255.0;
          }
          *(unsigned char *)(v49 + v50) = llroundf(_S12);
          result[v49] = v146;
          if (v137 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H11, #0 }
            if (_NF) {
              _S11 = 0.0;
            }
            else {
              __asm { FCVT            S11, H11 }
            }
          }
          else
          {
            _S11 = 255.0;
          }
          uint64_t v157 = v49 + 4;
          *(unsigned char *)(v49 + 4 + v52) = llroundf(_S11);
          if (v138 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H10, #0 }
            if (_NF) {
              _S10 = 0.0;
            }
            else {
              __asm { FCVT            S10, H10 }
            }
          }
          else
          {
            _S10 = 255.0;
          }
          *(unsigned char *)(v157 + v51) = llroundf(_S10);
          if (v139 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H9, #0 }
            if (_NF) {
              _S9 = 0.0;
            }
            else {
              __asm { FCVT            S9, H9 }
            }
          }
          else
          {
            _S9 = 255.0;
          }
          *(unsigned char *)(v157 + v50) = llroundf(_S9);
          result[v157] = v147;
          if (v140 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H8, #0 }
            if (_NF) {
              _S8 = 0.0;
            }
            else {
              __asm { FCVT            S8, H8 }
            }
          }
          else
          {
            _S8 = 255.0;
          }
          *(unsigned char *)(v58 + v52) = llroundf(_S8);
          if (v141 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H31, #0 }
            if (_NF) {
              _S31 = 0.0;
            }
            else {
              __asm { FCVT            S31, H31 }
            }
          }
          else
          {
            _S31 = 255.0;
          }
          *(unsigned char *)(v58 + v51) = llroundf(_S31);
          if (v142 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H30, #0 }
            if (_NF) {
              _S30 = 0.0;
            }
            else {
              __asm { FCVT            S30, H30 }
            }
          }
          else
          {
            _S30 = 255.0;
          }
          *(unsigned char *)(v58 + v50) = llroundf(_S30);
          result[v58] = v148;
          if (v143 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H29, #0 }
            if (_NF) {
              _S29 = 0.0;
            }
            else {
              __asm { FCVT            S29, H29 }
            }
          }
          else
          {
            _S29 = 255.0;
          }
          uint64_t v170 = v58 + 4;
          *(unsigned char *)(v58 + 4 + v52) = llroundf(_S29);
          if (v144 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H28, #0 }
            if (_NF) {
              _S28 = 0.0;
            }
            else {
              __asm { FCVT            S28, H28 }
            }
          }
          else
          {
            _S28 = 255.0;
          }
          *(unsigned char *)(v170 + v51) = llroundf(_S28);
          if (v145 <= COERCE_SHORT_FLOAT(23544))
          {
            __asm { FCMP            H26, #0 }
            if (_NF) {
              _S26 = 0.0;
            }
            else {
              __asm { FCVT            S26, H26 }
            }
          }
          else
          {
            _S26 = 255.0;
          }
          v44 += 2;
          v59 += 2;
          *(unsigned char *)(v170 + v50) = llroundf(_S26);
          v49 += 8;
          result[v170] = v149;
          v58 += 8;
          v57 += 2;
        }
        while (v12 > v57);
      }
      int v44 = &v56[v18];
      v53 += v174;
      uint64_t v48 = &v55[v20];
      uint64_t v49 = v54 + v21;
      v11 += 2;
    }
    while (v175 > v11);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_BGRA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_BGRA_neon_fp16_GCD);
  return 0;
}

uint64_t vt_Copy_420vf_rgb_BGRA_neon_fp16_GCD(void *a1, uint64_t a2, double a3, double a4, double a5, double a6, int16x4_t a7, float32x4_t a8, double a9, float32x4_t a10)
{
  char v15 = 0;
  uint64_t v16 = 0;
  unint64_t v17 = *(void *)((char *)a1 + 20);
  uint64_t v18 = *(void *)((char *)a1 + 36);
  uint64_t v19 = *(void *)((char *)a1 + 44);
  uint64_t v20 = *(void *)((char *)a1 + 28);
  unint64_t v21 = 2 * *(unsigned __int8 *)a1;
  uint64_t v22 = 2 * (v20 * a2 / v21);
  uint64_t v23 = v19 + v22;
  uint64_t v24 = 2 * ((v20 + v20 * a2) / v21);
  uint64_t v25 = v19 + v24;
  uint64_t v150 = a1[14];
  uint64_t v26 = a1[19];
  float v27 = (uint64_t *)a1[7];
  uint64_t v28 = (uint64_t *)a1[8];
  uint64_t v29 = (uint64_t *)a1[16];
  uint64_t v30 = (uint64_t *)a1[17];
  uint64_t v153 = *v28;
  uint64_t v31 = v28[1];
  uint64_t v32 = v28[2];
  uint64_t v33 = a1[15] + 2 * (a1[13] * a2 / v21);
  uint64_t result = *v27;
  uint64_t v35 = v27[1];
  uint64_t v36 = v27[2];
  uint64_t v37 = *v30;
  uint64_t v38 = *v29;
  if (v23 >= 0) {
    uint64_t v39 = v23;
  }
  else {
    uint64_t v39 = v23 + 1;
  }
  unsigned int v40 = *(_DWORD *)(v26 + 128);
  unsigned int v41 = *(_DWORD *)(v26 + 136);
  uint64_t v152 = v31;
  uint64_t v42 = v31 * (v39 >> 1);
  int v156 = *(_DWORD *)(v26 + 158);
  uint64_t v43 = v37 * v33;
  unsigned int v44 = *(unsigned __int16 *)(v26 + 140);
  unsigned int v45 = *(unsigned __int16 *)(v26 + 142);
  float v46 = *(float *)v26;
  unsigned __int32 v47 = *(_DWORD *)(v26 + 8);
  a10.i64[0] = *(void *)(v26 + 16);
  a8.i32[0] = *(_DWORD *)(v26 + 28);
  HIDWORD(v48) = 0;
  long long v154 = 0u;
  long long v155 = 0u;
  do
  {
    int v49 = 0;
    char v50 = *((unsigned char *)&v156 + v16);
    do
    {
      *(unsigned char *)(((unint64_t)&v154 + ((v50 + 4 * v49) & 0xF8)) | (v50 + 4 * (_BYTE)v49) & 7) = v15 + v49;
      ++v49;
    }
    while (v49 != 8);
    ++v16;
    v15 += 8;
  }
  while (v16 != 4);
  uint64_t v51 = v153;
  if (v24 != v22)
  {
    unint64_t v52 = 0;
    unint64_t v151 = v25 - v23;
    float v53 = (float)v41 / (float)v40;
    *(float *)&uint64_t v48 = (float)v44;
    float v54 = (float)v45;
    _S2 = v53 * v46;
    __asm { FCVT            H3, S2 }
    *(short float *)a7.i16 = (short float)v44;
    float16x8_t v61 = (float16x8_t)vdupq_lane_s16(a7, 0);
    a8.i32[1] = v47;
    *(float32x2_t *)a8.f32 = vmul_n_f32(*(float32x2_t *)a8.f32, v53);
    float16x8_t v62 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    *(float32x2_t *)a10.f32 = vmul_n_f32(*(float32x2_t *)a10.f32, v53);
    float16x8_t v63 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    short float v64 = -(short float)v45;
    float16x8_t v65 = vmulq_n_f16(v62, v64);
    float16x8_t v66 = vmulq_n_f16(v63, v64);
    uint64_t v67 = v35 + v42;
    float v68 = (char *)(v38 + v43 + 4 * v150);
    if (v36) {
      uint64_t v69 = v36 + v32 * v23 + v18;
    }
    else {
      uint64_t v69 = 0;
    }
    float v70 = (unsigned char *)(v67 + v18);
    float v71 = (int8x8_t *)(result + v153 * v23 + v18);
    do
    {
      float v72 = &v68[v37];
      uint64_t v73 = v69 + v32;
      float v74 = (char *)v71 + v51;
      if ((int)v17 < 8)
      {
        unint64_t v112 = 0;
        uint32x4_t v111 = v70;
        float v78 = (int8x8_t *)(v69 + v32);
        BOOL v77 = (int8x8_t *)((char *)v71 + v51);
        float v76 = &v68[v37];
      }
      else
      {
        uint64_t v75 = 0;
        int8x8_t v10 = *(int8x8_t *)((char *)&v154 + 8);
        float v76 = &v68[v37];
        BOOL v77 = (int8x8_t *)((char *)v71 + v51);
        float v78 = (int8x8_t *)(v69 + v32);
        do
        {
          if (v69)
          {
            int8x8_t v79 = *(int8x8_t *)v69;
            v69 += 8;
            int8x8_t v80 = v79;
            int8x8_t v81 = *v78++;
            int8x8_t v82 = v81;
          }
          else
          {
            int8x8_t v80 = 0;
            int8x8_t v82 = 0;
          }
          int8x8_t v83 = *(int8x8_t *)&v70[v75];
          *(int8x8_t *)v84.i8 = vzip1_s8(v83, 0);
          v84.u64[1] = (unint64_t)vzip2_s8(v83, 0);
          float16x8_t v85 = vcvtq_f16_u16(v84);
          int8x16_t v86 = (int8x16_t)vmlaq_f16(v65, v62, v85);
          int16x8_t v87 = (int16x8_t)vmlaq_f16(v66, v63, v85);
          v85.i64[0] = vextq_s8(v86, v86, 8uLL).u64[0];
          *(int16x4_t *)v88.i8 = vuzp2_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v85.i8);
          v88.i64[1] = v48;
          *(int16x4_t *)v85.i8 = vuzp1_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v85.i8);
          float16x8_t v89 = (float16x8_t)vzip1q_s16(v88, v88);
          v85.i64[1] = v48;
          float16x8_t v90 = (float16x8_t)vzip1q_s16((int16x8_t)v85, (int16x8_t)v85);
          v88.i64[0] = vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
          *(float16x4_t *)v87.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v88.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v88.i8));
          v87.i64[1] = v48;
          float16x8_t v91 = (float16x8_t)vzip1q_s16(v87, v87);
          int8x8_t v92 = *v71++;
          *(int8x8_t *)v93.i8 = vzip1_s8(v92, 0);
          v93.u64[1] = (unint64_t)vzip2_s8(v92, 0);
          int8x8_t v94 = *v77++;
          *(int8x8_t *)v95.i8 = vzip1_s8(v94, 0);
          v95.u64[1] = (unint64_t)vzip2_s8(v94, 0);
          float16x8_t v96 = vsubq_f16(vcvtq_f16_u16(v93), v61);
          float16x8_t v97 = vsubq_f16(vcvtq_f16_u16(v95), v61);
          float16x8_t v98 = vmlaq_n_f16(v89, v96, _H3);
          float16x8_t v99 = vmlaq_n_f16(v89, v97, _H3);
          float16x8_t v100 = vmlaq_n_f16(v91, v96, _H3);
          float16x8_t v101 = vmlaq_n_f16(v91, v97, _H3);
          float16x8_t v102 = vmlaq_n_f16(v90, v96, _H3);
          float16x8_t v103 = vmlaq_n_f16(v90, v97, _H3);
          int8x8_t v104 = (int8x8_t)vceqd_s64(v69, 0);
          v96.i64[0] = v154;
          float16x8_t v105 = (float16x8_t)vdupq_n_s16(0x5BF8u);
          *(int8x8_t *)v157.val[1].i8 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v102, (float16x8_t)0), v105)));
          v157.val[0] = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v98, (float16x8_t)0), v105)), (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v100, (float16x8_t)0), v105)));
          v98.i64[0] = *((void *)&v155 + 1);
          v97.i64[0] = v155;
          v157.val[1].u64[1] = (unint64_t)vorr_s8(v80, v104);
          *(int8x8_t *)&long long v106 = vqtbl2_s8(v157, *(int8x8_t *)&v154);
          *((int8x8_t *)&v106 + 1) = vqtbl2_s8(v157, v10);
          *(int8x8_t *)v100.i8 = vqtbl2_s8(v157, *(int8x8_t *)&v155);
          v100.u64[1] = (unint64_t)vqtbl2_s8(v157, *(int8x8_t *)((char *)&v155 + 8));
          int8x8_t v107 = vorr_s8(v82, v104);
          *(_OWORD *)float v68 = v106;
          *((float16x8_t *)v68 + 1) = v100;
          v68 += 32;
          int8x16_t v13 = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v101, (float16x8_t)0), v105));
          int8x8_t v14 = vmovn_s16((int16x8_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v103, (float16x8_t)0), v105)));
          int8x16_t v108 = vuzp1q_s8((int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v99, (float16x8_t)0), v105)), v13);
          int8x8_t v109 = v107;
          *(int8x8_t *)&long long v110 = vqtbl2_s8(*(int8x16x2_t *)(&v14 - 2), *(int8x8_t *)v96.i8);
          *((int8x8_t *)&v110 + 1) = vqtbl2_s8(*(int8x16x2_t *)(&v14 - 2), v10);
          *(int8x8_t *)&long long v11 = vqtbl2_s8(*(int8x16x2_t *)(&v14 - 2), *(int8x8_t *)v97.i8);
          int8x8_t v12 = vqtbl2_s8(*(int8x16x2_t *)(&v14 - 2), *(int8x8_t *)v98.i8);
          *((int8x8_t *)&v11 + 1) = v12;
          *(_OWORD *)float v76 = v110;
          *((_OWORD *)v76 + 1) = v11;
          v76 += 32;
          v75 += 8;
        }
        while ((int)v75 < (int)v17 - 7);
        uint32x4_t v111 = &v70[v75];
        unint64_t v112 = v17 & 0xFFFFFFF8;
      }
      if (v17 > v112)
      {
        uint64_t v113 = 0;
        float16x8_t v114 = v68 + 4;
        do
        {
          if (v69)
          {
            char v115 = *(unsigned char *)v69;
            char v116 = *(unsigned char *)(v69 + 1);
            v69 += 2;
            char v117 = v78->i8[0];
            char v118 = v78->i8[1];
            float v78 = (int8x8_t *)((char *)v78 + 2);
          }
          else
          {
            char v115 = 0;
            char v116 = 0;
            char v117 = 0;
            char v118 = 0;
          }
          v10.i8[0] = v111[1];
          float v119 = (float)v10.u32[0] - v54;
          float v120 = a8.f32[1] * v119;
          LOBYTE(v11) = v71->i8[0];
          float v121 = _S2 * (float)((float)v11 - *(float *)&v48);
          float v122 = (float)(a8.f32[1] * v119) + v121;
          if (v69) {
            char v123 = v115;
          }
          else {
            char v123 = -1;
          }
          if (v69) {
            char v124 = v116;
          }
          else {
            char v124 = -1;
          }
          if (v69) {
            char v125 = v117;
          }
          else {
            char v125 = -1;
          }
          if (v69) {
            char v126 = v118;
          }
          else {
            char v126 = -1;
          }
          float v127 = 255.0;
          if (v122 <= 255.0)
          {
            float v127 = (float)(a8.f32[1] * v119) + v121;
            if (v122 < 0.0) {
              float v127 = 0.0;
            }
          }
          LOBYTE(v122) = *v111;
          float v128 = (float)LODWORD(v122) - v54;
          float v129 = (float)(a10.f32[1] * v119) + (float)(v128 * a10.f32[0]);
          v14.i8[0] = v71->i8[1];
          v13.i8[0] = v77->i8[0];
          v12.i8[0] = v77->i8[1];
          uint64_t v130 = v156;
          v114[v113 - 4 + v156] = llroundf(v127);
          float v131 = 255.0;
          if ((float)(v121 + v129) <= 255.0)
          {
            float v131 = v121 + v129;
            if ((float)(v121 + v129) < 0.0) {
              float v131 = 0.0;
            }
          }
          *(float *)&long long v11 = a8.f32[0] * v128;
          float v132 = *(float *)&v11 + v121;
          uint64_t v133 = BYTE1(v156);
          v114[v113 - 4 + BYTE1(v156)] = llroundf(v131);
          float v134 = 255.0;
          if (v132 <= 255.0)
          {
            float v134 = v132;
            if (v132 < 0.0) {
              float v134 = 0.0;
            }
          }
          float v135 = _S2 * (float)((float)v14.u32[0] - *(float *)&v48);
          uint64_t result = BYTE2(v156);
          v114[v113 - 4 + BYTE2(v156)] = llroundf(v134);
          uint64_t v136 = HIBYTE(v156);
          v114[v113 - 4 + HIBYTE(v156)] = v123;
          float v137 = 255.0;
          if ((float)(v120 + v135) <= 255.0)
          {
            float v137 = v120 + v135;
            if ((float)(v120 + v135) < 0.0) {
              float v137 = 0.0;
            }
          }
          v114[v113 + v130] = llroundf(v137);
          float v138 = 255.0;
          if ((float)(v129 + v135) <= 255.0)
          {
            float v138 = v129 + v135;
            if ((float)(v129 + v135) < 0.0) {
              float v138 = 0.0;
            }
          }
          float v139 = *(float *)&v11 + v135;
          v114[v113 + v133] = llroundf(v138);
          float v140 = 255.0;
          if (v139 <= 255.0)
          {
            float v140 = v139;
            if (v139 < 0.0) {
              float v140 = 0.0;
            }
          }
          float v141 = _S2 * (float)((float)v13.u32[0] - *(float *)&v48);
          v114[v113 + result] = llroundf(v140);
          v114[v113 + v136] = v124;
          float v142 = 255.0;
          if ((float)(v120 + v141) <= 255.0)
          {
            float v142 = v120 + v141;
            if ((float)(v120 + v141) < 0.0) {
              float v142 = 0.0;
            }
          }
          v76[v130 + v113] = llroundf(v142);
          v14.i32[0] = 1132396544;
          if ((float)(v129 + v141) <= 255.0)
          {
            *(float *)v14.i32 = v129 + v141;
            if ((float)(v129 + v141) < 0.0) {
              v14.i32[0] = 0;
            }
          }
          float v143 = *(float *)&v11 + v141;
          v76[BYTE1(v156) + v113] = llroundf(*(float *)v14.i32);
          float v144 = 255.0;
          if (v143 <= 255.0)
          {
            float v144 = v143;
            if (v143 < 0.0) {
              float v144 = 0.0;
            }
          }
          *(float *)v12.i32 = _S2 * (float)((float)v12.u32[0] - *(float *)&v48);
          float v145 = v120 + *(float *)v12.i32;
          v76[BYTE2(v156) + v113] = llroundf(v144);
          v76[HIBYTE(v156) + v113] = v125;
          v13.i32[0] = 1132396544;
          if (v145 <= 255.0)
          {
            *(float *)v13.i32 = v145;
            if (v145 < 0.0) {
              v13.i32[0] = 0;
            }
          }
          float v146 = v129 + *(float *)v12.i32;
          v76[v113 + 4 + v156] = llroundf(*(float *)v13.i32);
          float v147 = 255.0;
          if (v146 <= 255.0)
          {
            float v147 = v146;
            if (v146 < 0.0) {
              float v147 = 0.0;
            }
          }
          *(float *)v10.i32 = *(float *)&v11 + *(float *)v12.i32;
          v76[v113 + 4 + BYTE1(v156)] = llroundf(v147);
          float v148 = 255.0;
          if ((float)(*(float *)&v11 + *(float *)v12.i32) <= 255.0)
          {
            float v148 = *(float *)&v11 + *(float *)v12.i32;
            if (*(float *)v10.i32 < 0.0) {
              float v148 = 0.0;
            }
          }
          v76[v113 + 4 + BYTE2(v156)] = llroundf(v148);
          char v149 = &v76[v113 + HIBYTE(v156)];
          v112 += 2;
          v113 += 8;
          v149[4] = v126;
          v111 += 2;
          float v71 = (int8x8_t *)((char *)v71 + 2);
          BOOL v77 = (int8x8_t *)((char *)v77 + 2);
        }
        while (v17 > v112);
      }
      uint64_t v51 = v153;
      float v71 = (int8x8_t *)&v74[v153];
      v70 += v152;
      uint64_t v69 = v73 + v32;
      float v68 = &v72[v37];
      v52 += 2;
    }
    while (v151 > v52);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_BGRA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_BGRA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_BGRA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44) + 2 * v8;
    unint64_t v13 = 2 * v9 - 2 * v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v16 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v15;
    uint64_t v18 = v15[1];
    uint64_t v19 = v15[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    *(float *)&unsigned int v22 = (float)*(unsigned int *)(v14 + 136);
    float v23 = *(float *)&v22 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v24 = (float)v21;
    LOWORD(v22) = *(_WORD *)(v14 + 142);
    float v25 = (float)v22;
    float v26 = v23 * *(float *)v14;
    float v27 = v23 * *(float *)(v14 + 8);
    float v28 = v23 * *(float *)(v14 + 16);
    float v29 = v23 * *(float *)(v14 + 20);
    float v30 = *(float *)(v14 + 28);
    float v31 = v23 * v30;
    uint64_t v32 = *((void *)result + 14);
    unint64_t v33 = *((void *)result + 13) * a2;
    uint64_t v34 = (void *)*((void *)result + 16);
    uint64_t v35 = *((void *)result + 15) + 2 * (v33 / v7);
    uint64_t v36 = *(void *)(result + 36);
    uint64_t v37 = v16[1];
    uint64_t v38 = (unsigned char *)(*v16 + v17 * v12 + v36);
    uint64_t v39 = v16[2];
    BOOL v40 = v39 == 0;
    unsigned int v41 = (char *)(v39 + v19 * v12 + v36);
    if (v40) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = v41;
    }
    uint64_t v43 = *v34 + v35 * v20 + 4 * v32;
    uint64_t v44 = *(unsigned __int8 *)(v14 + 161);
    uint64_t v45 = *(unsigned __int8 *)(v14 + 160);
    if (v12 >= 0) {
      uint64_t v46 = v12;
    }
    else {
      uint64_t v46 = v12 + 1;
    }
    uint64_t v47 = v37 + v18 * (v46 >> 1);
    uint64_t result = (unsigned __int8 *)*(unsigned __int8 *)(v14 + 159);
    uint64_t v48 = *(unsigned __int8 *)(v14 + 158);
    uint64_t v49 = v47 + v36;
    do
    {
      uint64_t v50 = v43 + v20;
      uint64_t v51 = &v42[v19];
      unint64_t v52 = &v38[v17];
      if (v11)
      {
        unint64_t v53 = 0;
        uint64_t v54 = v43 + v20;
        float v55 = &v38[v17];
        float v56 = &v42[v19];
        do
        {
          if (v42)
          {
            char v57 = *v42;
            char v58 = v42[1];
            v42 += 2;
            char v59 = *v56;
            char v60 = v56[1];
            v56 += 2;
          }
          else
          {
            char v57 = 0;
            char v58 = 0;
            char v59 = 0;
            char v60 = 0;
          }
          LOBYTE(v30) = *(unsigned char *)(v49 + v53 + 1);
          float v61 = (float)LODWORD(v30) - v25;
          float v62 = v27 * v61;
          LOBYTE(v2) = *v38;
          float v63 = v26 * (float)((float)LODWORD(v2) - v24);
          float v64 = (float)(v27 * v61) + v63;
          if (v42) {
            char v65 = v57;
          }
          else {
            char v65 = -1;
          }
          if (v42) {
            char v66 = v58;
          }
          else {
            char v66 = -1;
          }
          if (v42) {
            char v67 = v59;
          }
          else {
            char v67 = -1;
          }
          if (v42) {
            char v68 = v60;
          }
          else {
            char v68 = -1;
          }
          float v69 = 255.0;
          if (v64 <= 255.0)
          {
            float v69 = (float)(v27 * v61) + v63;
            if (v64 < 0.0) {
              float v69 = 0.0;
            }
          }
          LOBYTE(v64) = *(unsigned char *)(v49 + v53);
          float v70 = (float)LODWORD(v64) - v25;
          float v71 = (float)(v29 * v61) + (float)(v70 * v28);
          LOBYTE(v5) = v38[1];
          LOBYTE(v4) = *v55;
          LOBYTE(v3) = v55[1];
          *(unsigned char *)(v43 + v48) = llroundf(v69);
          float v72 = 255.0;
          if ((float)(v63 + v71) <= 255.0)
          {
            float v72 = v63 + v71;
            if ((float)(v63 + v71) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v2 = v31 * v70;
          float v73 = v2 + v63;
          result[v43] = llroundf(v72);
          float v74 = 255.0;
          if (v73 <= 255.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v26 * (float)((float)LODWORD(v5) - v24);
          *(unsigned char *)(v43 + v45) = llroundf(v74);
          *(unsigned char *)(v43 + v44) = v65;
          float v76 = 255.0;
          if ((float)(v62 + v75) <= 255.0)
          {
            float v76 = v62 + v75;
            if ((float)(v62 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          uint64_t v77 = v43 + 4;
          *(unsigned char *)(v43 + 4 + v48) = llroundf(v76);
          float v78 = 255.0;
          if ((float)(v71 + v75) <= 255.0)
          {
            float v78 = v71 + v75;
            if ((float)(v71 + v75) < 0.0) {
              float v78 = 0.0;
            }
          }
          unsigned __int8 v79 = llroundf(v78);
          float v80 = v2 + v75;
          result[v77] = v79;
          float v81 = 255.0;
          if (v80 <= 255.0)
          {
            float v81 = v80;
            if (v80 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v26 * (float)((float)LODWORD(v4) - v24);
          *(unsigned char *)(v77 + v45) = llroundf(v81);
          *(unsigned char *)(v77 + v44) = v66;
          float v83 = 255.0;
          if ((float)(v62 + v82) <= 255.0)
          {
            float v83 = v62 + v82;
            if ((float)(v62 + v82) < 0.0) {
              float v83 = 0.0;
            }
          }
          float v5 = v71 + v82;
          *(unsigned char *)(v54 + v48) = llroundf(v83);
          float v84 = 255.0;
          if ((float)(v71 + v82) <= 255.0)
          {
            float v84 = v71 + v82;
            if (v5 < 0.0) {
              float v84 = 0.0;
            }
          }
          unsigned __int8 v85 = llroundf(v84);
          float v86 = v2 + v82;
          result[v54] = v85;
          float v87 = 255.0;
          if (v86 <= 255.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v3 = v26 * (float)((float)LODWORD(v3) - v24);
          *(unsigned char *)(v54 + v45) = llroundf(v87);
          float v4 = v62 + v3;
          *(unsigned char *)(v54 + v44) = v67;
          float v88 = 255.0;
          if (v4 <= 255.0)
          {
            float v88 = v4;
            if (v4 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v71 + v3;
          uint64_t v90 = v54 + 4;
          *(unsigned char *)(v54 + 4 + v48) = llroundf(v88);
          float v91 = 255.0;
          if (v89 <= 255.0)
          {
            float v91 = v89;
            if (v89 < 0.0) {
              float v91 = 0.0;
            }
          }
          result[v90] = llroundf(v91);
          float v30 = 255.0;
          if ((float)(v2 + v3) <= 255.0)
          {
            float v30 = v2 + v3;
            if ((float)(v2 + v3) < 0.0) {
              float v30 = 0.0;
            }
          }
          v38 += 2;
          v55 += 2;
          *(unsigned char *)(v90 + v45) = llroundf(v30);
          v43 += 8;
          *(unsigned char *)(v90 + v44) = v68;
          v54 += 8;
          v53 += 2;
        }
        while (v11 > v53);
      }
      uint64_t v38 = &v52[v17];
      v49 += v18;
      uint64_t v42 = &v51[v19];
      uint64_t v43 = v50 + v20;
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v225 = 2 * v8 - 2 * v7;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v13 = (void *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = **((void **)result + 17);
    float v19 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    LOWORD(a5) = *(_WORD *)(v12 + 140);
    float v20 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v12 + 142);
    float v21 = (float)LODWORD(a5);
    float v22 = v19 * *(float *)v12;
    float v241 = v19 * *(float *)(v12 + 16);
    float v242 = v19 * *(float *)(v12 + 8);
    float v23 = v19 * *(float *)(v12 + 20);
    *(float *)&unsigned int v24 = v19 * *(float *)(v12 + 28);
    float v239 = *(float *)&v24;
    float v240 = v23;
    LOWORD(v24) = *(_WORD *)(v12 + 144);
    float v25 = (float)v24;
    float v237 = *(float *)(v12 + 76);
    float v238 = *(float *)(v12 + 72);
    float v235 = *(float *)(v12 + 84);
    float v236 = *(float *)(v12 + 80);
    float v233 = *(float *)(v12 + 92);
    float v234 = *(float *)(v12 + 88);
    float v231 = *(float *)(v12 + 100);
    float v232 = *(float *)(v12 + 96);
    uint64_t v26 = v12 + 164;
    uint64_t v27 = v12 + 16548;
    uint64_t v28 = v12 + 32932;
    float v29 = *(float *)(v12 + 104);
    float v30 = *(float *)(v12 + 108);
    float v230 = v29;
    float v31 = *(float *)(v12 + 112);
    float v32 = *(float *)(v12 + 116);
    float v33 = *(float *)(v12 + 120);
    uint64_t v34 = *((void *)result + 14);
    uint64_t v35 = (void *)*((void *)result + 16);
    uint64_t v36 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v37 = *(void *)(result + 36);
    uint64_t v38 = v13[1];
    uint64_t result = (unsigned __int8 *)(*v13 + v16 * v11 + v37);
    uint64_t v39 = v13[2];
    _ZF = v39 == 0;
    unsigned int v41 = (unsigned __int8 *)(v39 + v17 * v11 + v37);
    if (_ZF) {
      unsigned int v41 = 0;
    }
    uint64_t v42 = (unsigned int *)(*v35 + v36 * v18 + 16 * v34);
    if (v11 >= 0) {
      uint64_t v43 = v11;
    }
    else {
      uint64_t v43 = v11 + 1;
    }
    uint64_t v224 = v15;
    uint64_t v44 = v38 + v15 * (v43 >> 1) + v37;
    float v228 = (float)LODWORD(a5);
    float v229 = v20;
    float v226 = v31;
    float v227 = v22;
    do
    {
      uint64_t v45 = (char *)v42 + v18;
      uint64_t v46 = &v41[v17];
      uint64_t v47 = &result[v16];
      if (v10)
      {
        unint64_t v48 = 0;
        uint64_t v49 = (unsigned int *)((char *)v42 + v18);
        uint64_t v50 = &result[v16];
        uint64_t v51 = &v41[v17];
        do
        {
          LOBYTE(v29) = *(unsigned char *)(v44 + v48 + 1);
          float v52 = (float)LODWORD(v29) - v21;
          unsigned int v53 = LODWORD(v242);
          float v54 = v242 * v52;
          LOBYTE(v53) = *result;
          float v55 = v22 * (float)((float)v53 - v20);
          float v56 = (float)(v242 * v52) + v55;
          float v57 = 8191.0;
          if (v56 <= 8191.0)
          {
            float v57 = (float)(v242 * v52) + v55;
            if (v56 < 0.0) {
              float v57 = 0.0;
            }
          }
          LOBYTE(v56) = *(unsigned char *)(v44 + v48);
          float v58 = (float)LODWORD(v56) - v21;
          float v59 = (float)(v240 * v52) + (float)(v58 * v241);
          float v60 = 8191.0;
          if ((float)(v55 + v59) <= 8191.0)
          {
            float v60 = v55 + v59;
            if ((float)(v55 + v59) < 0.0) {
              float v60 = 0.0;
            }
          }
          float v61 = v239 * v58;
          float v62 = (float)(v239 * v58) + v55;
          float v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            float v63 = v62;
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          LOBYTE(v62) = result[1];
          float v64 = v22 * (float)((float)LODWORD(v62) - v20);
          float v65 = 8191.0;
          if ((float)(v54 + v64) <= 8191.0)
          {
            float v65 = v54 + v64;
            if ((float)(v54 + v64) < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = 8191.0;
          if ((float)(v59 + v64) <= 8191.0)
          {
            float v66 = v59 + v64;
            if ((float)(v59 + v64) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v61 + v64;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          LOBYTE(v67) = *v50;
          float v69 = (float)LODWORD(v67) - v20;
          float v70 = v22 * v69;
          float v71 = 8191.0;
          if ((float)(v54 + (float)(v22 * v69)) <= 8191.0)
          {
            float v71 = v54 + (float)(v22 * v69);
            if (v71 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = 8191.0;
          if ((float)(v59 + v70) <= 8191.0)
          {
            float v72 = v59 + v70;
            if ((float)(v59 + v70) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v61 + v70;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          LOBYTE(v69) = v50[1];
          float v75 = v22 * (float)((float)LODWORD(v69) - v20);
          float v76 = 8191.0;
          if ((float)(v54 + v75) <= 8191.0)
          {
            float v76 = v54 + v75;
            if ((float)(v54 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = 8191.0;
          if ((float)(v59 + v75) <= 8191.0)
          {
            float v77 = v59 + v75;
            if ((float)(v59 + v75) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v61 + v75;
          BOOL v79 = (float)(v61 + v75) <= 8191.0;
          float v80 = 8191.0;
          if (v79)
          {
            float v80 = v78;
            if (v78 < 0.0) {
              float v80 = 0.0;
            }
          }
          if (v41)
          {
            unsigned int v81 = *v41;
            unsigned int v82 = v41[1];
            v41 += 2;
            unsigned int v83 = *v51;
            unsigned int v84 = v51[1];
            v51 += 2;
          }
          else
          {
            unsigned int v81 = 0;
            unsigned int v82 = 0;
            unsigned int v83 = 0;
            unsigned int v84 = 0;
          }
          float v85 = 8191.0;
          _H5 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v57, 0.0), 8191.0)));
          __asm { FCVT            S5, H5 }
          _H6 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v60, 0.0), 8191.0)));
          __asm { FCVT            S6, H6 }
          _H17 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S9, H17 }
          _H11 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H18 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v26 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          float v104 = fmaxf(_S5, fmaxf(_S6, _S9));
          float v105 = (float)((float)((float)(v31 * _S6) + (float)(v30 * _S5)) + (float)(v32 * _S9)) + (float)(v33 * v104);
          float v106 = 8191.0;
          if (v105 <= 8191.0)
          {
            float v106 = (float)((float)((float)(v31 * _S6) + (float)(v30 * _S5)) + (float)(v32 * _S9)) + (float)(v33 * v104);
            if (v105 < 0.0) {
              float v106 = 0.0;
            }
          }
          __asm
          {
            FCVT            S1, H11
            FCVT            S2, H17
            FCVT            S3, H18
          }
          _H11 = *(_WORD *)(v27 + 2 * llroundf(v106));
          float v111 = (float)((float)((float)(v31 * _S2) + (float)(v30 * _S1)) + (float)(v32 * _S3))
               + (float)(v33 * fmaxf(_S1, fmaxf(_S2, _S3)));
          float v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            float v112 = v111;
            if (v111 < 0.0) {
              float v112 = 0.0;
            }
          }
          __asm
          {
            FCVT            S12, H12
            FCVT            S13, H13
            FCVT            S14, H14
          }
          _H17 = *(_WORD *)(v27 + 2 * llroundf(v112));
          float v117 = (float)((float)((float)(v31 * _S13) + (float)(v30 * _S12)) + (float)(v32 * _S14))
               + (float)(v33 * fmaxf(_S12, fmaxf(_S13, _S14)));
          float v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            float v118 = v117;
            if (v117 < 0.0) {
              float v118 = 0.0;
            }
          }
          __asm
          {
            FCVT            S7, H7
            FCVT            S18, H8
            FCVT            S8, H10
          }
          _H10 = *(_WORD *)(v27 + 2 * llroundf(v118));
          float v123 = fmaxf(_S7, fmaxf(_S18, _S8));
          float v124 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S7)) + (float)(v32 * _S8)) + (float)(v33 * v123);
          if (v124 <= 8191.0)
          {
            float v85 = (float)((float)((float)(v31 * _S18) + (float)(v30 * _S7)) + (float)(v32 * _S8)) + (float)(v33 * v123);
            if (v124 < 0.0) {
              float v85 = 0.0;
            }
          }
          __asm { FCVT            S19, H11 }
          float v126 = _S5 * _S19;
          float v127 = _S6 * _S19;
          float v128 = _S9 * _S19;
          __asm { FCVT            S17, H17 }
          float v130 = _S1 * _S17;
          float v131 = _S2 * _S17;
          float v132 = _S3 * _S17;
          __asm { FCVT            S17, H10 }
          float v134 = _S12 * _S17;
          float v135 = _S13 * _S17;
          float v136 = _S14 * _S17;
          _H4 = *(_WORD *)(v27 + 2 * llroundf(v85));
          __asm { FCVT            S4, H4 }
          float v139 = _S7 * _S4;
          float v140 = _S18 * _S4;
          float v141 = _S8 * _S4;
          float v142 = (float)((float)(v237 * v127) + (float)(v126 * v238)) + (float)(v128 * v236);
          float v143 = (float)((float)(v234 * v127) + (float)(v126 * v235)) + (float)(v128 * v233);
          float v144 = (float)((float)(v231 * v127) + (float)(v126 * v232)) + (float)(v128 * v230);
          float v145 = (float)((float)(v237 * v131) + (float)(v130 * v238)) + (float)(v132 * v236);
          float v146 = (float)((float)(v234 * v131) + (float)(v130 * v235)) + (float)(v132 * v233);
          float v147 = (float)((float)(v231 * v131) + (float)(v130 * v232)) + (float)(v132 * v230);
          float v148 = (float)((float)(v237 * v135) + (float)(v134 * v238)) + (float)(v136 * v236);
          float v149 = (float)((float)(v234 * v135) + (float)(v134 * v235)) + (float)(v136 * v233);
          float v150 = (float)((float)(v231 * v135) + (float)(v134 * v232)) + (float)(v136 * v230);
          float v151 = (float)((float)(v237 * v140) + (float)(v139 * v238)) + (float)(v141 * v236);
          float v152 = (float)((float)(v234 * v140) + (float)(v139 * v235)) + (float)(v141 * v233);
          float v153 = (float)((float)(v231 * v140) + (float)(v139 * v232)) + (float)(v141 * v230);
          _H6 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v142, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v28 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          if (v41)
          {
            float v166 = (double)v81 * 3.0 / 255.0;
            unsigned int v167 = llroundf(v166);
            float v168 = (double)v82 * 3.0 / 255.0;
            unsigned int v169 = llroundf(v168);
            float v170 = (double)v83 * 3.0 / 255.0;
            unsigned int v171 = llroundf(v170);
            float v172 = (double)v84 * 3.0 / 255.0;
            unsigned int v173 = llroundf(v172);
          }
          else
          {
            unsigned int v171 = 3;
            unsigned int v167 = 3;
            unsigned int v169 = 3;
            unsigned int v173 = 3;
          }
          float v21 = v228;
          float v20 = v229;
          float v31 = v226;
          float v22 = v227;
          __asm { FCVT            S3, H3 }
          float v175 = v25 + _S3;
          float v176 = 1023.0;
          BOOL v79 = (float)(v25 + _S3) <= 1023.0;
          float v177 = 1023.0;
          if (v79)
          {
            float v177 = v175;
            if (v175 < 0.0) {
              float v177 = 0.0;
            }
          }
          __asm { FCVT            S1, H1 }
          float v179 = v25 + _S1;
          BOOL v79 = (float)(v25 + _S1) <= 1023.0;
          float v180 = 1023.0;
          if (v79)
          {
            float v180 = v179;
            if (v179 < 0.0) {
              float v180 = 0.0;
            }
          }
          __asm { FCVT            S6, H6 }
          float v182 = v25 + _S6;
          BOOL v79 = (float)(v25 + _S6) <= 1023.0;
          float v183 = 1023.0;
          if (v79)
          {
            float v183 = v182;
            if (v182 < 0.0) {
              float v183 = 0.0;
            }
          }
          __asm { FCVT            S2, H2 }
          unsigned int v185 = llroundf(v177);
          unsigned int v186 = llroundf(v180);
          unsigned int v187 = llroundf(v183);
          float v188 = (float)v167;
          unsigned int v189 = v186 << 10;
          if ((float)v167 > 3.0) {
            float v188 = 3.0;
          }
          *uint64_t v42 = v189 | v185 | (llroundf(v188) << 30) | (v187 << 20);
          float v190 = v25 + _S2;
          float v191 = 1023.0;
          if (v190 <= 1023.0)
          {
            float v191 = v190;
            if (v190 < 0.0) {
              float v191 = 0.0;
            }
          }
          __asm { FCVT            S2, H5 }
          float v193 = v25 + _S2;
          BOOL v79 = (float)(v25 + _S2) <= 1023.0;
          float v194 = 1023.0;
          if (v79)
          {
            float v194 = v193;
            if (v193 < 0.0) {
              float v194 = 0.0;
            }
          }
          __asm { FCVT            S3, H15 }
          float v196 = v25 + _S3;
          BOOL v79 = (float)(v25 + _S3) <= 1023.0;
          float v197 = 1023.0;
          if (v79)
          {
            float v197 = v196;
            if (v196 < 0.0) {
              float v197 = 0.0;
            }
          }
          __asm { FCVT            S4, H4 }
          unsigned int v199 = llroundf(v191);
          unsigned int v200 = llroundf(v197);
          float v201 = (float)v169;
          unsigned int v202 = llroundf(v194) << 10;
          if ((float)v169 > 3.0) {
            float v201 = 3.0;
          }
          v42[1] = v202 | v199 | (llroundf(v201) << 30) | (v200 << 20);
          float v203 = 1023.0;
          if ((float)(v25 + _S4) <= 1023.0)
          {
            float v203 = v25 + _S4;
            if ((float)(v25 + _S4) < 0.0) {
              float v203 = 0.0;
            }
          }
          __asm { FCVT            S2, H14 }
          float v205 = v25 + _S2;
          BOOL v79 = (float)(v25 + _S2) <= 1023.0;
          float v206 = 1023.0;
          if (v79)
          {
            float v206 = v205;
            if (v205 < 0.0) {
              float v206 = 0.0;
            }
          }
          __asm { FCVT            S3, H12 }
          float v208 = v25 + _S3;
          BOOL v79 = (float)(v25 + _S3) <= 1023.0;
          float v209 = 1023.0;
          if (v79)
          {
            float v209 = v208;
            if (v208 < 0.0) {
              float v209 = 0.0;
            }
          }
          __asm { FCVT            S4, H13 }
          unsigned int v211 = llroundf(v203);
          unsigned int v212 = llroundf(v209);
          float v213 = (float)v171;
          unsigned int v214 = llroundf(v206) << 10;
          if ((float)v171 > 3.0) {
            float v213 = 3.0;
          }
          unsigned int *v49 = v214 | v211 | (llroundf(v213) << 30) | (v212 << 20);
          float v215 = 1023.0;
          if ((float)(v25 + _S4) <= 1023.0)
          {
            float v215 = v25 + _S4;
            if ((float)(v25 + _S4) < 0.0) {
              float v215 = 0.0;
            }
          }
          __asm { FCVT            S2, H10 }
          float v217 = v25 + _S2;
          BOOL v79 = (float)(v25 + _S2) <= 1023.0;
          float v218 = 1023.0;
          if (v79)
          {
            float v218 = v217;
            if (v217 < 0.0) {
              float v218 = 0.0;
            }
          }
          __asm { FCVT            S3, H9 }
          float v220 = v25 + _S3;
          if (v220 <= 1023.0)
          {
            float v176 = v220;
            if (v220 < 0.0) {
              float v176 = 0.0;
            }
          }
          result += 2;
          v50 += 2;
          v42 += 2;
          unsigned int v221 = llroundf(v215);
          unsigned int v222 = llroundf(v176);
          float v29 = (float)v173;
          unsigned int v223 = llroundf(v218) << 10;
          if ((float)v173 > 3.0) {
            float v29 = 3.0;
          }
          v49[1] = v223 | v221 | (llroundf(v29) << 30) | (v222 << 20);
          v49 += 2;
          v48 += 2;
        }
        while (v10 > v48);
      }
      uint64_t result = &v47[v16];
      v44 += v224;
      unsigned int v41 = &v46[v17];
      uint64_t v42 = (unsigned int *)&v45[v18];
      v9 += 2;
    }
    while (v225 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_l10r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    float v20 = (float)*(unsigned int *)(v13 + 128);
    float v24 = 8191.0 / v20;
    LOWORD(v20) = *(_WORD *)(v13 + 140);
    float v21 = (float)LODWORD(v20);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v22 = (float)LODWORD(a5);
    float v23 = v24 * *(float *)v13;
    float v193 = v24 * *(float *)(v13 + 16);
    float v194 = v24 * *(float *)(v13 + 8);
    float v191 = v24 * *(float *)(v13 + 28);
    float v192 = v24 * *(float *)(v13 + 20);
    LOWORD(v24) = *(_WORD *)(v13 + 144);
    float v25 = (float)LODWORD(v24);
    float v26 = *(float *)(v13 + 72);
    float v27 = *(float *)(v13 + 76);
    float v28 = *(float *)(v13 + 80);
    float v29 = *(float *)(v13 + 84);
    float v30 = *(float *)(v13 + 88);
    float v31 = *(float *)(v13 + 92);
    float v32 = *(float *)(v13 + 96);
    float v33 = *(float *)(v13 + 100);
    float v34 = *(float *)(v13 + 104);
    uint64_t v35 = v13 + 164;
    uint64_t v36 = v13 + 16548;
    uint64_t v37 = *((void *)result + 14);
    uint64_t v38 = (void *)*((void *)result + 16);
    uint64_t v39 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v40 = *(void *)(result + 36);
    uint64_t v41 = v14[1];
    uint64_t v42 = (unsigned char *)(*v14 + v16 * v11 + v40);
    uint64_t v43 = v14[2];
    _ZF = v43 == 0;
    uint64_t v45 = (unsigned __int8 *)(v43 + v18 * v11 + v40);
    if (_ZF) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = v45;
    }
    uint64_t v47 = (unsigned int *)(*v38 + v39 * v19 + 16 * v37);
    if (v11 >= 0) {
      uint64_t v48 = v11;
    }
    else {
      uint64_t v48 = v11 + 1;
    }
    uint64_t result = (unsigned __int8 *)(v41 + v17 * (v48 >> 1) + v40);
    float v189 = (float)LODWORD(a5);
    float v190 = (float)LODWORD(v20);
    do
    {
      uint64_t v49 = (char *)v47 + v19;
      uint64_t v50 = &v46[v18];
      uint64_t v51 = &v42[v16];
      if (v10)
      {
        unint64_t v52 = 0;
        unsigned int v53 = (unsigned int *)((char *)v47 + v19);
        float v54 = &v42[v16];
        float v55 = &v46[v18];
        do
        {
          LOBYTE(v24) = result[v52 + 1];
          *(float *)&unsigned int v56 = (float)LODWORD(v24);
          float v57 = *(float *)&v56 - v22;
          float v58 = v194 * (float)(*(float *)&v56 - v22);
          LOBYTE(v56) = *v42;
          float v59 = v23 * (float)((float)v56 - v21);
          float v60 = v58 + v59;
          float v61 = 8191.0;
          if ((float)(v58 + v59) <= 8191.0)
          {
            float v61 = v58 + v59;
            if (v60 < 0.0) {
              float v61 = 0.0;
            }
          }
          LOBYTE(v60) = result[v52];
          float v62 = (float)LODWORD(v60) - v22;
          float v63 = (float)(v192 * v57) + (float)(v62 * v193);
          float v64 = 8191.0;
          if ((float)(v59 + v63) <= 8191.0)
          {
            float v64 = v59 + v63;
            if ((float)(v59 + v63) < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = v191 * v62;
          float v66 = (float)(v191 * v62) + v59;
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = v66;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          LOBYTE(v66) = v42[1];
          float v68 = v23 * (float)((float)LODWORD(v66) - v21);
          float v69 = 8191.0;
          if ((float)(v58 + v68) <= 8191.0)
          {
            float v69 = v58 + v68;
            if ((float)(v58 + v68) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = v63 + v68;
          float v71 = 8191.0;
          if ((float)(v63 + v68) <= 8191.0)
          {
            float v71 = v63 + v68;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v65 + v68;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          LOBYTE(v72) = *v54;
          float v74 = v23 * (float)((float)LODWORD(v72) - v21);
          float v75 = 8191.0;
          if ((float)(v58 + v74) <= 8191.0)
          {
            float v75 = v58 + v74;
            if ((float)(v58 + v74) < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = 8191.0;
          if ((float)(v63 + v74) <= 8191.0)
          {
            float v76 = v63 + v74;
            if ((float)(v63 + v74) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v65 + v74;
          BOOL v78 = (float)(v65 + v74) <= 8191.0;
          float v79 = 8191.0;
          if (v78)
          {
            float v79 = v77;
            if (v77 < 0.0) {
              float v79 = 0.0;
            }
          }
          LOBYTE(v70) = v54[1];
          float v80 = v23 * (float)((float)LODWORD(v70) - v21);
          float v81 = v58 + v80;
          BOOL v78 = (float)(v58 + v80) <= 8191.0;
          float v82 = 8191.0;
          if (v78)
          {
            float v82 = v81;
            if (v81 < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v63 + v80;
          BOOL v78 = (float)(v63 + v80) <= 8191.0;
          float v84 = 8191.0;
          if (v78)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v65 + v80;
          float v86 = 8191.0;
          if (v85 <= 8191.0)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          if (v46)
          {
            unsigned int v87 = *v46;
            unsigned int v88 = v46[1];
            v46 += 2;
            unsigned int v89 = *v55;
            unsigned int v90 = v55[1];
            v55 += 2;
          }
          else
          {
            unsigned int v87 = 0;
            unsigned int v88 = 0;
            unsigned int v89 = 0;
            unsigned int v90 = 0;
          }
          _H5 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v61, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm
          {
            FCVT            S5, H5
            FCVT            S6, H6
          }
          _H29 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H9 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm
          {
            FCVT            S9, H9
            FCVT            S10, H10
          }
          _H4 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H11 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v82, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H12 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H13 = *(_WORD *)(v35 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          float v118 = (float)((float)(v27 * _S6) + (float)(_S5 * v26)) + (float)(_S29 * v28);
          float v119 = (float)((float)(v30 * _S6) + (float)(_S5 * v29)) + (float)(_S29 * v31);
          float v120 = (float)((float)(v33 * _S6) + (float)(_S5 * v32)) + (float)(_S29 * v34);
          float v121 = (float)((float)(v27 * _S31) + (float)(_S30 * v26)) + (float)(_S8 * v28);
          float v122 = (float)((float)(v30 * _S31) + (float)(_S30 * v29)) + (float)(_S8 * v31);
          float v123 = (float)((float)(v33 * _S31) + (float)(_S30 * v32)) + (float)(_S8 * v34);
          float v124 = (float)((float)(v27 * _S10) + (float)(_S9 * v26)) + (float)(_S4 * v28);
          float v125 = (float)((float)(v30 * _S10) + (float)(_S9 * v29)) + (float)(_S4 * v31);
          float v126 = (float)((float)(v33 * _S10) + (float)(_S9 * v32)) + (float)(_S4 * v34);
          float v127 = (float)((float)(v27 * _S12) + (float)(_S11 * v26)) + (float)(_S13 * v28);
          float v128 = (float)((float)(v30 * _S12) + (float)(_S11 * v29)) + (float)(_S13 * v31);
          float v129 = (float)((float)(v33 * _S12) + (float)(_S11 * v32)) + (float)(_S13 * v34);
          _H4 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v118, 0.0), 8191.0)));
          _H15 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v36 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          if (v46)
          {
            float v142 = (double)v87 * 3.0 / 255.0;
            unsigned int v143 = llroundf(v142);
            float v144 = (double)v88 * 3.0 / 255.0;
            unsigned int v145 = llroundf(v144);
            float v146 = (double)v89 * 3.0 / 255.0;
            unsigned int v147 = llroundf(v146);
            float v148 = (double)v90 * 3.0 / 255.0;
            unsigned int v149 = llroundf(v148);
          }
          else
          {
            unsigned int v147 = 3;
            unsigned int v143 = 3;
            unsigned int v145 = 3;
            unsigned int v149 = 3;
          }
          float v22 = v189;
          float v21 = v190;
          __asm { FCVT            S1, H31 }
          float v151 = 1023.0;
          float v152 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            float v152 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0) {
              float v152 = 0.0;
            }
          }
          __asm { FCVT            S1, H15 }
          float v154 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            float v154 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0) {
              float v154 = 0.0;
            }
          }
          __asm { FCVT            S1, H4 }
          float v156 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            float v156 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0) {
              float v156 = 0.0;
            }
          }
          __asm { FCVT            S1, H14 }
          unsigned int v158 = llroundf(v152);
          unsigned int v159 = llroundf(v156);
          float v160 = (float)v143;
          unsigned int v161 = llroundf(v154) << 10;
          if (v160 > 3.0) {
            float v160 = 3.0;
          }
          *uint64_t v47 = v161 | v158 | (llroundf(v160) << 30) | (v159 << 20);
          float v162 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            float v162 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0) {
              float v162 = 0.0;
            }
          }
          __asm { FCVT            S1, H13 }
          float v164 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            float v164 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0) {
              float v164 = 0.0;
            }
          }
          __asm { FCVT            S1, H11 }
          float v166 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            float v166 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0) {
              float v166 = 0.0;
            }
          }
          __asm { FCVT            S1, H12 }
          unsigned int v168 = llroundf(v162);
          unsigned int v169 = llroundf(v166);
          float v170 = (float)v145;
          unsigned int v171 = llroundf(v164) << 10;
          if (v170 > 3.0) {
            float v170 = 3.0;
          }
          v47[1] = v171 | v168 | (llroundf(v170) << 30) | (v169 << 20);
          float v172 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            float v172 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0) {
              float v172 = 0.0;
            }
          }
          __asm { FCVT            S1, H10 }
          float v174 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            float v174 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0) {
              float v174 = 0.0;
            }
          }
          __asm { FCVT            S1, H8 }
          float v176 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            float v176 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0) {
              float v176 = 0.0;
            }
          }
          __asm { FCVT            S1, H9 }
          unsigned int v178 = llroundf(v172);
          unsigned int v179 = llroundf(v176);
          float v180 = (float)v147;
          unsigned int v181 = llroundf(v174) << 10;
          if (v180 > 3.0) {
            float v180 = 3.0;
          }
          *unsigned int v53 = v181 | v178 | (llroundf(v180) << 30) | (v179 << 20);
          float v24 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            float v24 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0) {
              float v24 = 0.0;
            }
          }
          __asm { FCVT            S1, H30 }
          float v183 = 1023.0;
          if ((float)(v25 + _S1) <= 1023.0)
          {
            float v183 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0) {
              float v183 = 0.0;
            }
          }
          __asm { FCVT            S1, H29 }
          if ((float)(v25 + _S1) <= 1023.0)
          {
            float v151 = v25 + _S1;
            if ((float)(v25 + _S1) < 0.0) {
              float v151 = 0.0;
            }
          }
          v42 += 2;
          v54 += 2;
          v47 += 2;
          unsigned int v185 = llroundf(v24);
          unsigned int v186 = llroundf(v151);
          float v187 = (float)v149;
          unsigned int v188 = llroundf(v183) << 10;
          if (v187 > 3.0) {
            float v187 = 3.0;
          }
          v53[1] = v188 | v185 | (llroundf(v187) << 30) | (v186 << 20);
          v53 += 2;
          v52 += 2;
        }
        while (v10 > v52);
      }
      uint64_t v42 = &v51[v16];
      result += v17;
      uint64_t v46 = &v50[v18];
      uint64_t v47 = (unsigned int *)&v49[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_l10r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_l10r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_l10r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = 2 * *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 44) + 2 * v6;
    unint64_t v11 = 2 * v7 - 2 * v6;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v13 = (void *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = **((void **)result + 17);
    *(float *)&unsigned int v19 = (float)*(unsigned int *)(v12 + 128);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v12 + 136);
    float v21 = *(float *)&v20 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    float v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    float v23 = (float)v20;
    float v24 = v21 * *(float *)v12;
    float v25 = v21 * *(float *)(v12 + 8);
    float v26 = v21 * *(float *)(v12 + 16);
    float v27 = v21 * *(float *)(v12 + 20);
    float v28 = *(float *)(v12 + 28);
    float v29 = v21 * v28;
    LOWORD(v28) = *(_WORD *)(v12 + 144);
    float v30 = (float)LODWORD(v28);
    uint64_t v31 = *((void *)result + 14);
    uint64_t v32 = (void *)*((void *)result + 16);
    uint64_t v33 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v5);
    uint64_t v34 = *(void *)(result + 36);
    uint64_t v35 = (unsigned char *)(*v13 + v15 * v10 + v34);
    uint64_t v36 = v13[2];
    BOOL v37 = v36 == 0;
    uint64_t v38 = (unsigned char *)(v36 + v17 * v10 + v34);
    if (v37) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = v38;
    }
    uint64_t result = (unsigned __int8 *)(*v32 + v33 * v18 + 16 * v31);
    uint64_t v40 = v13[1] + v16 * (v10 / 2) + v34;
    do
    {
      uint64_t v41 = &result[v18];
      uint64_t v42 = &v39[v17];
      uint64_t v43 = &v35[v15];
      if (v9)
      {
        unint64_t v44 = 0;
        uint64_t v45 = (unsigned int *)&result[v18];
        uint64_t v46 = &v35[v15];
        uint64_t v47 = &v39[v17];
        do
        {
          if (v39)
          {
            LOBYTE(v2) = *v39;
            float v3 = 0.0;
            double v48 = (double)*(unint64_t *)&v2 * 3.0 / 255.0;
            *(float *)&double v48 = v48;
            unsigned int v49 = llroundf(*(float *)&v48);
            LOBYTE(v48) = v39[1];
            double v50 = (double)*(unint64_t *)&v48 * 3.0 / 255.0;
            *(float *)&double v50 = v50;
            unsigned int v51 = llroundf(*(float *)&v50);
            v39 += 2;
            LOBYTE(v50) = *v47;
            double v52 = (double)*(unint64_t *)&v50 * 3.0 / 255.0;
            *(float *)&double v52 = v52;
            unsigned int v53 = llroundf(*(float *)&v52);
            LOBYTE(v52) = v47[1];
            v47 += 2;
            double v2 = (double)*(unint64_t *)&v52 * 3.0 / 255.0;
            *(float *)&double v2 = v2;
            unsigned int v54 = llroundf(*(float *)&v2);
          }
          else
          {
            unsigned int v53 = 3;
            unsigned int v49 = 3;
            unsigned int v51 = 3;
            unsigned int v54 = 3;
          }
          LOBYTE(v2) = *(unsigned char *)(v40 + v44);
          *(float *)&double v2 = (float)LODWORD(v2) - v23;
          float v55 = v29 * *(float *)&v2;
          LOBYTE(v3) = *v35;
          float v56 = v24 * (float)((float)LODWORD(v3) - v22);
          float v57 = (float)((float)(v29 * *(float *)&v2) + v56) + v30;
          float v58 = 1023.0;
          if (v57 <= 1023.0)
          {
            float v58 = (float)((float)(v29 * *(float *)&v2) + v56) + v30;
            if (v57 < 0.0) {
              float v58 = 0.0;
            }
          }
          LOBYTE(v57) = *(unsigned char *)(v40 + v44 + 1);
          float v59 = (float)LODWORD(v57) - v23;
          float v60 = (float)(v27 * v59) + (float)(*(float *)&v2 * v26);
          float v61 = (float)(v56 + v60) + v30;
          float v62 = 1023.0;
          if (v61 <= 1023.0)
          {
            float v62 = (float)(v56 + v60) + v30;
            if (v61 < 0.0) {
              float v62 = 0.0;
            }
          }
          float v63 = v25 * v59;
          float v64 = (float)(v63 + v56) + v30;
          float v65 = 1023.0;
          if (v64 <= 1023.0)
          {
            float v65 = v64;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          LOBYTE(v64) = v35[1];
          float v67 = (float)LODWORD(v64) - v22;
          float v66 = v24 * v67;
          LOBYTE(v61) = *v46;
          LOBYTE(v67) = v46[1];
          float v68 = v55 + v66;
          unsigned int v69 = llroundf(v58);
          unsigned int v70 = llroundf(v65);
          float v71 = (float)v49;
          unsigned int v72 = llroundf(v62) << 10;
          if (v71 > 3.0) {
            float v71 = 3.0;
          }
          *(_DWORD *)uint64_t result = v72 | v69 | (llroundf(v71) << 30) | (v70 << 20);
          float v73 = 1023.0;
          if ((float)(v68 + v30) <= 1023.0)
          {
            float v73 = v68 + v30;
            if ((float)(v68 + v30) < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = (float)(v60 + v66) + v30;
          float v75 = 1023.0;
          if (v74 <= 1023.0)
          {
            float v75 = (float)(v60 + v66) + v30;
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = (float)(v63 + v66) + v30;
          float v77 = 1023.0;
          if (v76 <= 1023.0)
          {
            float v77 = v76;
            if (v76 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v24 * (float)((float)LODWORD(v61) - v22);
          float v79 = v55 + v78;
          unsigned int v80 = llroundf(v73);
          unsigned int v81 = llroundf(v77);
          float v82 = (float)v51;
          unsigned int v83 = llroundf(v75) << 10;
          if (v82 > 3.0) {
            float v82 = 3.0;
          }
          *((_DWORD *)result + 1) = v83 | v80 | (llroundf(v82) << 30) | (v81 << 20);
          float v84 = v79 + v30;
          BOOL v85 = (float)(v79 + v30) <= 1023.0;
          float v86 = 1023.0;
          if (v85)
          {
            float v86 = v84;
            if (v84 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = (float)(v60 + v78) + v30;
          float v88 = 1023.0;
          if (v87 <= 1023.0)
          {
            float v88 = (float)(v60 + v78) + v30;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = (float)(v63 + v78) + v30;
          float v90 = 1023.0;
          if (v89 <= 1023.0)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          float v91 = v24 * (float)((float)LODWORD(v67) - v22);
          float v92 = v55 + v91;
          unsigned int v93 = llroundf(v86);
          unsigned int v94 = llroundf(v90);
          float v95 = (float)v53;
          unsigned int v96 = llroundf(v88) << 10;
          if (v95 > 3.0) {
            float v95 = 3.0;
          }
          *uint64_t v45 = v96 | v93 | (llroundf(v95) << 30) | (v94 << 20);
          float v97 = v92 + v30;
          BOOL v85 = (float)(v92 + v30) <= 1023.0;
          float v98 = 1023.0;
          if (v85)
          {
            float v98 = v97;
            if (v97 < 0.0) {
              float v98 = 0.0;
            }
          }
          float v99 = (float)(v60 + v91) + v30;
          LODWORD(v2) = 1149222912;
          if (v99 <= 1023.0)
          {
            *(float *)&double v2 = v99;
            if (v99 < 0.0) {
              double v2 = 0.0;
            }
          }
          float v100 = (float)(v63 + v91) + v30;
          float v3 = 1023.0;
          if (v100 <= 1023.0)
          {
            float v3 = v100;
            if (v100 < 0.0) {
              float v3 = 0.0;
            }
          }
          v35 += 2;
          v46 += 2;
          result += 8;
          unsigned int v101 = llroundf(v98);
          unsigned int v102 = llroundf(*(float *)&v2);
          unsigned int v103 = llroundf(v3);
          *(float *)&double v2 = (float)v54;
          if ((float)v54 > 3.0) {
            *(float *)&double v2 = 3.0;
          }
          v45[1] = (v102 << 10) | v101 | (llroundf(*(float *)&v2) << 30) | (v103 << 20);
          v45 += 2;
          v44 += 2;
        }
        while (v9 > v44);
      }
      uint64_t v35 = &v43[v15];
      v40 += v16;
      uint64_t v39 = &v42[v17];
      uint64_t result = &v41[v18];
      v8 += 2;
    }
    while (v11 > v8);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    float v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    float v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v22 = (float)LODWORD(a5);
    float v23 = v20 * *(float *)v13;
    float v213 = v20 * *(float *)(v13 + 16);
    float v214 = v20 * *(float *)(v13 + 8);
    float v211 = v20 * *(float *)(v13 + 28);
    float v212 = v20 * *(float *)(v13 + 20);
    float v209 = *(float *)(v13 + 76);
    float v210 = *(float *)(v13 + 72);
    float v24 = *(float *)(v13 + 80);
    float v25 = *(float *)(v13 + 84);
    float v208 = v24;
    float v26 = *(float *)(v13 + 88);
    float v27 = *(float *)(v13 + 92);
    float v28 = *(float *)(v13 + 96);
    float v29 = *(float *)(v13 + 100);
    uint64_t v30 = v13 + 164;
    uint64_t v31 = v13 + 16548;
    uint64_t v32 = v13 + 32932;
    float v33 = *(float *)(v13 + 104);
    float v34 = *(float *)(v13 + 108);
    float v35 = *(float *)(v13 + 112);
    float v36 = *(float *)(v13 + 116);
    float v37 = *(float *)(v13 + 120);
    uint64_t v38 = *((void *)result + 14);
    uint64_t v39 = (void *)*((void *)result + 16);
    uint64_t v40 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v41 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(*v14 + v16 * v11 + v41);
    uint64_t v42 = v14[2];
    _ZF = v42 == 0;
    unint64_t v44 = (unsigned __int8 *)(v42 + v18 * v11 + v41);
    if (_ZF) {
      uint64_t v45 = 0;
    }
    else {
      uint64_t v45 = v44;
    }
    uint64_t v46 = (char *)(*v39 + v40 * v19 + 8 * v38);
    if (v11 >= 0) {
      uint64_t v47 = v11;
    }
    else {
      uint64_t v47 = v11 + 1;
    }
    uint64_t v48 = v14[1] + v17 * (v47 >> 1) + v41;
    float v216 = (float)LODWORD(a5);
    float v217 = v21;
    float v215 = v23;
    do
    {
      unsigned int v49 = &v46[v19];
      double v50 = &v45[v18];
      unsigned int v51 = &result[v16];
      if (v10)
      {
        unint64_t v52 = 0;
        unsigned int v53 = &v46[v19];
        unsigned int v54 = &result[v16];
        float v55 = &v45[v18];
        do
        {
          LOBYTE(v24) = *(unsigned char *)(v48 + v52 + 1);
          float v56 = (float)LODWORD(v24) - v22;
          unsigned int v57 = LODWORD(v214);
          float v58 = v214 * v56;
          LOBYTE(v57) = *result;
          float v59 = v23 * (float)((float)v57 - v21);
          float v60 = (float)(v214 * v56) + v59;
          float v61 = 8191.0;
          if (v60 <= 8191.0)
          {
            float v61 = (float)(v214 * v56) + v59;
            if (v60 < 0.0) {
              float v61 = 0.0;
            }
          }
          LOBYTE(v60) = *(unsigned char *)(v48 + v52);
          float v62 = (float)LODWORD(v60) - v22;
          float v63 = (float)(v212 * v56) + (float)(v62 * v213);
          float v64 = 8191.0;
          if ((float)(v59 + v63) <= 8191.0)
          {
            float v64 = v59 + v63;
            if ((float)(v59 + v63) < 0.0) {
              float v64 = 0.0;
            }
          }
          float v65 = v211 * v62;
          float v66 = (float)(v211 * v62) + v59;
          float v67 = 8191.0;
          if (v66 <= 8191.0)
          {
            float v67 = v66;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          LOBYTE(v66) = result[1];
          float v68 = v23 * (float)((float)LODWORD(v66) - v21);
          float v69 = 8191.0;
          if ((float)(v58 + v68) <= 8191.0)
          {
            float v69 = v58 + v68;
            if ((float)(v58 + v68) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = 8191.0;
          if ((float)(v63 + v68) <= 8191.0)
          {
            float v70 = v63 + v68;
            if ((float)(v63 + v68) < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v65 + v68;
          float v72 = 8191.0;
          if (v71 <= 8191.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          LOBYTE(v71) = *v54;
          float v73 = (float)LODWORD(v71) - v21;
          float v74 = v23 * v73;
          float v75 = 8191.0;
          if ((float)(v58 + (float)(v23 * v73)) <= 8191.0)
          {
            float v75 = v58 + (float)(v23 * v73);
            if (v75 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = 8191.0;
          if ((float)(v63 + v74) <= 8191.0)
          {
            float v76 = v63 + v74;
            if ((float)(v63 + v74) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v65 + v74;
          float v78 = 8191.0;
          if (v77 <= 8191.0)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          LOBYTE(v73) = v54[1];
          float v79 = v23 * (float)((float)LODWORD(v73) - v21);
          float v80 = 8191.0;
          if ((float)(v58 + v79) <= 8191.0)
          {
            float v80 = v58 + v79;
            if ((float)(v58 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = v63 + v79;
          BOOL v82 = (float)(v63 + v79) <= 8191.0;
          float v83 = 8191.0;
          if (v82)
          {
            float v83 = v81;
            if (v81 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v65 + v79;
          float v85 = 8191.0;
          if (v84 <= 8191.0)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          if (v45)
          {
            __int16 v86 = *v45;
            __int16 v87 = v45[1];
            v45 += 2;
            __int16 v88 = *v55;
            __int16 v89 = v55[1];
            v55 += 2;
          }
          else
          {
            __int16 v86 = 0;
            __int16 v87 = 0;
            __int16 v88 = 0;
            __int16 v89 = 0;
          }
          _S1 = fmaxf(v61, 0.0);
          float v91 = 8191.0;
          LOWORD(_S1) = *(_WORD *)(v30 + 2 * llroundf(fminf(_S1, 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          LOWORD(_S1) = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H3 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          _H16 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v30 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          float v107 = fmaxf(_S12, fmaxf(_S31, _S8));
          float v108 = (float)((float)((float)(v35 * _S31) + (float)(v34 * _S12)) + (float)(v36 * _S8)) + (float)(v37 * v107);
          float v109 = 8191.0;
          if (v108 <= 8191.0)
          {
            float v109 = (float)((float)((float)(v35 * _S31) + (float)(v34 * _S12)) + (float)(v36 * _S8))
                 + (float)(v37 * v107);
            if (v108 < 0.0) {
              float v109 = 0.0;
            }
          }
          __asm
          {
            FCVT            S4, H3
            FCVT            S5, H16
            FCVT            S6, H17
          }
          _H13 = *(_WORD *)(v31 + 2 * llroundf(v109));
          float v114 = (float)((float)((float)(v35 * _S5) + (float)(v34 * _S4)) + (float)(v36 * _S6))
               + (float)(v37 * fmaxf(_S4, fmaxf(_S5, _S6)));
          float v115 = 8191.0;
          if (v114 <= 8191.0)
          {
            float v115 = v114;
            if (v114 < 0.0) {
              float v115 = 0.0;
            }
          }
          __asm
          {
            FCVT            S7, H7
            FCVT            S14, H2
            FCVT            S2, H1
          }
          _H1 = *(_WORD *)(v31 + 2 * llroundf(v115));
          float v120 = fmaxf(_S7, fmaxf(_S14, _S2));
          float v121 = (float)((float)((float)(v35 * _S14) + (float)(v34 * _S7)) + (float)(v36 * _S2)) + (float)(v37 * v120);
          float v122 = 8191.0;
          if (v121 <= 8191.0)
          {
            float v122 = (float)((float)((float)(v35 * _S14) + (float)(v34 * _S7)) + (float)(v36 * _S2)) + (float)(v37 * v120);
            if (v121 < 0.0) {
              float v122 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H9
            FCVT            S16, H10
            FCVT            S17, H11
          }
          _H9 = *(_WORD *)(v31 + 2 * llroundf(v122));
          float v127 = fmaxf(_S3, fmaxf(_S16, _S17));
          float v128 = (float)((float)((float)(v35 * _S16) + (float)(v34 * _S3)) + (float)(v36 * _S17)) + (float)(v37 * v127);
          if (v128 <= 8191.0)
          {
            float v91 = (float)((float)((float)(v35 * _S16) + (float)(v34 * _S3)) + (float)(v36 * _S17)) + (float)(v37 * v127);
            if (v128 < 0.0) {
              float v91 = 0.0;
            }
          }
          __asm { FCVT            S10, H13 }
          float v130 = _S31 * _S10;
          float v131 = _S8 * _S10;
          __asm { FCVT            S1, H1 }
          float v133 = _S4 * _S1;
          float v134 = _S5 * _S1;
          float v135 = _S6 * _S1;
          __asm { FCVT            S6, H9 }
          float v137 = _S7 * _S6;
          float v138 = _S14 * _S6;
          _H30 = *(_WORD *)(v31 + 2 * llroundf(v91));
          _S2 = _S2 * _S6;
          __asm { FCVT            S6, H30 }
          float v142 = _S3 * _S6;
          float v143 = _S16 * _S6;
          float v144 = _S17 * _S6;
          float v145 = (float)((float)(v209 * v130) + (float)((float)(_S12 * _S10) * v210)) + (float)(v131 * v208);
          float v146 = (float)((float)(v26 * v130) + (float)((float)(_S12 * _S10) * v25)) + (float)(v131 * v27);
          float v147 = (float)((float)(v29 * v130) + (float)((float)(_S12 * _S10) * v28)) + (float)(v131 * v33);
          float v148 = (float)((float)(v209 * v134) + (float)(v133 * v210)) + (float)(v135 * v208);
          float v149 = (float)((float)(v26 * v134) + (float)(v133 * v25)) + (float)(v135 * v27);
          float v150 = (float)((float)(v29 * v134) + (float)(v133 * v28)) + (float)(v135 * v33);
          float v151 = (float)((float)(v209 * v138) + (float)(v137 * v210)) + (float)(_S2 * v208);
          float v152 = (float)((float)(v26 * v138) + (float)(v137 * v25)) + (float)(_S2 * v27);
          float v153 = (float)((float)(v29 * v138) + (float)(v137 * v28)) + (float)(_S2 * v33);
          float v154 = (float)((float)(v209 * v143) + (float)(v142 * v210)) + (float)(v144 * v208);
          float v155 = (float)((float)(v26 * v143) + (float)(v142 * v25)) + (float)(v144 * v27);
          float v156 = (float)((float)(v29 * v143) + (float)(v142 * v28)) + (float)(v144 * v33);
          LOWORD(_S2) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          __asm { FCVT            S7, H2 }
          _H14 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __int16 v169 = v86 | (v86 << 8);
          if (v45) {
            __int16 v170 = v169;
          }
          else {
            __int16 v170 = -1;
          }
          if (v45) {
            __int16 v171 = v87 | (v87 << 8);
          }
          else {
            __int16 v171 = -1;
          }
          if (v45) {
            __int16 v172 = v88 | (v88 << 8);
          }
          else {
            __int16 v172 = -1;
          }
          __int16 v173 = v89 | (v89 << 8);
          if (!v45) {
            __int16 v173 = -1;
          }
          float v174 = 65535.0;
          float v175 = 65535.0;
          if (_S7 <= 65535.0)
          {
            __asm { FCMP            H2, #0 }
            float v175 = _S7;
            if (_NF) {
              float v175 = 0.0;
            }
          }
          __asm { FCVT            S2, H14 }
          *(_WORD *)uint64_t v46 = llroundf(v175);
          float v178 = 65535.0;
          float v23 = v215;
          float v22 = v216;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H14, #0 }
            float v178 = _S2;
            if (_NF) {
              float v178 = 0.0;
            }
          }
          __asm { FCVT            S2, H13 }
          *((_WORD *)v46 + 1) = llroundf(v178);
          float v181 = 65535.0;
          float v21 = v217;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H13, #0 }
            float v181 = _S2;
            if (_NF) {
              float v181 = 0.0;
            }
          }
          __asm { FCVT            S2, H12 }
          *((_WORD *)v46 + 2) = llroundf(v181);
          *((_WORD *)v46 + 3) = v170;
          float v184 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H12, #0 }
            float v184 = _S2;
            if (_NF) {
              float v184 = 0.0;
            }
          }
          __asm { FCVT            S2, H6 }
          *((_WORD *)v46 + 4) = llroundf(v184);
          float v187 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H6, #0 }
            float v187 = _S2;
            if (_NF) {
              float v187 = 0.0;
            }
          }
          __asm { FCVT            S2, H5 }
          *((_WORD *)v46 + 5) = llroundf(v187);
          float v190 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H5, #0 }
            float v190 = _S2;
            if (_NF) {
              float v190 = 0.0;
            }
          }
          __asm { FCVT            S2, H4 }
          *((_WORD *)v46 + 6) = llroundf(v190);
          *((_WORD *)v46 + 7) = v171;
          float v193 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H4, #0 }
            float v193 = _S2;
            if (_NF) {
              float v193 = 0.0;
            }
          }
          __asm { FCVT            S2, H11 }
          *(_WORD *)unsigned int v53 = llroundf(v193);
          float v196 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v196 = _S2;
            if (_NF) {
              float v196 = 0.0;
            }
          }
          __asm { FCVT            S2, H10 }
          *((_WORD *)v53 + 1) = llroundf(v196);
          float v199 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v199 = _S2;
            if (_NF) {
              float v199 = 0.0;
            }
          }
          __asm { FCVT            S2, H9 }
          *((_WORD *)v53 + 2) = llroundf(v199);
          *((_WORD *)v53 + 3) = v172;
          float v202 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v202 = _S2;
            if (_NF) {
              float v202 = 0.0;
            }
          }
          __asm { FCVT            S2, H8 }
          *((_WORD *)v53 + 4) = llroundf(v202);
          float v24 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v24 = _S2;
            if (_NF) {
              float v24 = 0.0;
            }
          }
          __asm { FCVT            S2, H31 }
          *((_WORD *)v53 + 5) = llroundf(v24);
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v174 = _S2;
            if (_NF) {
              float v174 = 0.0;
            }
          }
          result += 2;
          v54 += 2;
          v46 += 16;
          *((_WORD *)v53 + 6) = llroundf(v174);
          *((_WORD *)v53 + 7) = v173;
          v53 += 16;
          v52 += 2;
        }
        while (v10 > v52);
      }
      uint64_t result = &v51[v16];
      v48 += v17;
      uint64_t v45 = &v50[v18];
      uint64_t v46 = &v49[v19];
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_l64r_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44) + 2 * v8;
    unint64_t v13 = 2 * v9 - 2 * v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v184 = v22 * *(float *)(v14 + 16);
    float v185 = v22 * *(float *)(v14 + 8);
    float v26 = v22 * *(float *)(v14 + 20);
    float v27 = v22 * *(float *)(v14 + 28);
    float v182 = v27;
    float v183 = v26;
    float v28 = *(float *)(v14 + 72);
    float v29 = *(float *)(v14 + 76);
    float v30 = *(float *)(v14 + 80);
    float v31 = *(float *)(v14 + 84);
    float v32 = *(float *)(v14 + 88);
    float v33 = *(float *)(v14 + 92);
    float v34 = *(float *)(v14 + 96);
    float v35 = *(float *)(v14 + 100);
    float v36 = *(float *)(v14 + 104);
    uint64_t v37 = v14 + 164;
    uint64_t v38 = v14 + 16548;
    uint64_t v39 = *((void *)result + 14);
    uint64_t v40 = (void *)*((void *)result + 16);
    uint64_t v41 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7);
    uint64_t v42 = *(void *)(result + 36);
    uint64_t v43 = v15[1];
    unint64_t v44 = (unsigned char *)(*v15 + v17 * v12 + v42);
    uint64_t v45 = v15[2];
    _ZF = v45 == 0;
    uint64_t v47 = (unsigned __int8 *)(v45 + v19 * v12 + v42);
    if (_ZF) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = v47;
    }
    unsigned int v49 = (char *)(*v40 + v41 * v20 + 8 * v39);
    if (v12 >= 0) {
      uint64_t v50 = v12;
    }
    else {
      uint64_t v50 = v12 + 1;
    }
    uint64_t result = (unsigned __int8 *)(v43 + v18 * (v50 >> 1) + v42);
    float v186 = v24;
    float v187 = v23;
    do
    {
      unsigned int v51 = &v49[v20];
      unint64_t v52 = &v48[v19];
      unsigned int v53 = &v44[v17];
      if (v11)
      {
        unint64_t v54 = 0;
        float v55 = &v49[v20];
        float v56 = &v44[v17];
        unsigned int v57 = &v48[v19];
        do
        {
          LOBYTE(v27) = result[v54 + 1];
          float v58 = (float)LODWORD(v27) - v24;
          unsigned int v59 = LODWORD(v185);
          float v60 = v185 * v58;
          LOBYTE(v59) = *v44;
          float v61 = v25 * (float)((float)v59 - v23);
          float v62 = (float)(v185 * v58) + v61;
          float v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            float v63 = (float)(v185 * v58) + v61;
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          LOBYTE(v62) = result[v54];
          float v64 = (float)LODWORD(v62) - v24;
          float v65 = (float)(v183 * v58) + (float)(v64 * v184);
          float v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            float v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v182 * v64;
          float v68 = (float)(v182 * v64) + v61;
          float v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            float v69 = v68;
            if (v68 < 0.0) {
              float v69 = 0.0;
            }
          }
          LOBYTE(v68) = v44[1];
          float v70 = v25 * (float)((float)LODWORD(v68) - v23);
          float v71 = 8191.0;
          if ((float)(v60 + v70) <= 8191.0)
          {
            float v71 = v60 + v70;
            if ((float)(v60 + v70) < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = 8191.0;
          if ((float)(v65 + v70) <= 8191.0)
          {
            float v72 = v65 + v70;
            if ((float)(v65 + v70) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v67 + v70;
          BOOL v74 = (float)(v67 + v70) <= 8191.0;
          float v75 = 8191.0;
          if (v74)
          {
            float v75 = v73;
            if (v73 < 0.0) {
              float v75 = 0.0;
            }
          }
          LOBYTE(v73) = *v56;
          float v76 = v25 * (float)((float)LODWORD(v73) - v23);
          float v77 = 8191.0;
          if ((float)(v60 + v76) <= 8191.0)
          {
            float v77 = v60 + v76;
            if ((float)(v60 + v76) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = 8191.0;
          if ((float)(v65 + v76) <= 8191.0)
          {
            float v78 = v65 + v76;
            if ((float)(v65 + v76) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v67 + v76;
          BOOL v74 = (float)(v67 + v76) <= 8191.0;
          float v80 = 8191.0;
          if (v74)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          LOBYTE(_S14) = v56[1];
          float v81 = v25 * (float)((float)LODWORD(_S14) - v23);
          float v82 = v60 + v81;
          BOOL v74 = (float)(v60 + v81) <= 8191.0;
          float v83 = 8191.0;
          if (v74)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v65 + v81;
          BOOL v74 = (float)(v65 + v81) <= 8191.0;
          float v85 = 8191.0;
          if (v74)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v67 + v81;
          BOOL v74 = (float)(v67 + v81) <= 8191.0;
          float v87 = 8191.0;
          if (v74)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          if (v48)
          {
            __int16 v88 = *v48;
            __int16 v89 = v48[1];
            v48 += 2;
            __int16 v90 = *v57;
            __int16 v91 = v57[1];
            v57 += 2;
          }
          else
          {
            __int16 v88 = 0;
            __int16 v89 = 0;
            __int16 v90 = 0;
            __int16 v91 = 0;
          }
          _H4 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H26 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H28 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          __asm
          {
            FCVT            S9, H9
            FCVT            S12, H12
          }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          float v119 = (float)((float)(v29 * _S26) + (float)(_S4 * v28)) + (float)(_S27 * v30);
          float v120 = (float)((float)(v32 * _S26) + (float)(_S4 * v31)) + (float)(_S27 * v33);
          float v121 = (float)((float)(v35 * _S26) + (float)(_S4 * v34)) + (float)(_S27 * v36);
          float v122 = (float)((float)(v29 * _S29) + (float)(_S28 * v28)) + (float)(_S30 * v30);
          float v123 = (float)((float)(v32 * _S29) + (float)(_S28 * v31)) + (float)(_S30 * v33);
          float v124 = (float)((float)(v35 * _S29) + (float)(_S28 * v34)) + (float)(_S30 * v36);
          float v125 = (float)((float)(v29 * _S9) + (float)(_S31 * v28)) + (float)(_S12 * v30);
          float v126 = (float)((float)(v32 * _S9) + (float)(_S31 * v31)) + (float)(_S12 * v33);
          float v127 = (float)((float)(v35 * _S9) + (float)(_S31 * v34)) + (float)(_S12 * v36);
          float v128 = (float)((float)(v29 * _S10) + (float)(_S8 * v28)) + (float)(_S11 * v30);
          float v129 = (float)((float)(v32 * _S10) + (float)(_S8 * v31)) + (float)(_S11 * v33);
          float v130 = (float)((float)(v35 * _S10) + (float)(_S8 * v34)) + (float)(_S11 * v36);
          _H14 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          __asm { FCVT            S4, H14 }
          _H13 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          __int16 v144 = v88 | (v88 << 8);
          if (v48) {
            __int16 v145 = v144;
          }
          else {
            __int16 v145 = -1;
          }
          if (v48) {
            __int16 v146 = v89 | (v89 << 8);
          }
          else {
            __int16 v146 = -1;
          }
          if (v48) {
            __int16 v147 = v90 | (v90 << 8);
          }
          else {
            __int16 v147 = -1;
          }
          __int16 v148 = v91 | (v91 << 8);
          if (!v48) {
            __int16 v148 = -1;
          }
          float v149 = 65535.0;
          float v150 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H14, #0 }
            float v150 = _S4;
            if (_NF) {
              float v150 = 0.0;
            }
          }
          __asm { FCVT            S14, H13 }
          *(_WORD *)unsigned int v49 = llroundf(v150);
          float v152 = 65535.0;
          float v24 = v186;
          if (_S14 <= 65535.0)
          {
            __asm { FCMP            H13, #0 }
            float v152 = _S14;
            if (_NF) {
              float v152 = 0.0;
            }
          }
          __asm { FCVT            S13, H12 }
          *((_WORD *)v49 + 1) = llroundf(v152);
          float v155 = 65535.0;
          float v23 = v187;
          if (_S13 <= 65535.0)
          {
            __asm { FCMP            H12, #0 }
            float v155 = _S13;
            if (_NF) {
              float v155 = 0.0;
            }
          }
          __asm { FCVT            S12, H11 }
          *((_WORD *)v49 + 2) = llroundf(v155);
          *((_WORD *)v49 + 3) = v145;
          float v158 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v158 = _S12;
            if (_NF) {
              float v158 = 0.0;
            }
          }
          __asm { FCVT            S11, H10 }
          *((_WORD *)v49 + 4) = llroundf(v158);
          float v161 = 65535.0;
          if (_S11 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v161 = _S11;
            if (_NF) {
              float v161 = 0.0;
            }
          }
          __asm { FCVT            S10, H9 }
          *((_WORD *)v49 + 5) = llroundf(v161);
          float v164 = 65535.0;
          if (_S10 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v164 = _S10;
            if (_NF) {
              float v164 = 0.0;
            }
          }
          __asm { FCVT            S9, H8 }
          *((_WORD *)v49 + 6) = llroundf(v164);
          *((_WORD *)v49 + 7) = v146;
          float v167 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v167 = _S9;
            if (_NF) {
              float v167 = 0.0;
            }
          }
          __asm { FCVT            S8, H31 }
          *(_WORD *)float v55 = llroundf(v167);
          float v170 = 65535.0;
          if (_S8 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v170 = _S8;
            if (_NF) {
              float v170 = 0.0;
            }
          }
          __asm { FCVT            S31, H30 }
          *((_WORD *)v55 + 1) = llroundf(v170);
          float v173 = 65535.0;
          if (_S31 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v173 = _S31;
            if (_NF) {
              float v173 = 0.0;
            }
          }
          __asm { FCVT            S30, H29 }
          *((_WORD *)v55 + 2) = llroundf(v173);
          *((_WORD *)v55 + 3) = v147;
          float v176 = 65535.0;
          if (_S30 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v176 = _S30;
            if (_NF) {
              float v176 = 0.0;
            }
          }
          __asm { FCVT            S29, H28 }
          *((_WORD *)v55 + 4) = llroundf(v176);
          float v27 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v27 = _S29;
            if (_NF) {
              float v27 = 0.0;
            }
          }
          __asm { FCVT            S28, H27 }
          *((_WORD *)v55 + 5) = llroundf(v27);
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v149 = _S28;
            if (_NF) {
              float v149 = 0.0;
            }
          }
          v44 += 2;
          v56 += 2;
          v49 += 16;
          *((_WORD *)v55 + 6) = llroundf(v149);
          *((_WORD *)v55 + 7) = v148;
          v55 += 16;
          v54 += 2;
        }
        while (v11 > v54);
      }
      unint64_t v44 = &v53[v17];
      result += v18;
      uint64_t v48 = &v52[v19];
      unsigned int v49 = &v51[v20];
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_l64r(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_l64r_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_l64r_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = 2 * *result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    unint64_t v11 = 0;
    unint64_t v12 = *(void *)(result + 20);
    uint64_t v13 = *(void *)(result + 44) + 2 * v9;
    unint64_t v14 = 2 * v10 - 2 * v9;
    uint64_t v15 = *((void *)result + 19);
    uint64_t v16 = (void *)*((void *)result + 7);
    uint64_t v17 = (uint64_t *)*((void *)result + 8);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = **((void **)result + 17);
    *(float *)&unsigned int v22 = (float)*(unsigned int *)(v15 + 128);
    *(float *)&unsigned int v23 = (float)*(unsigned int *)(v15 + 136);
    float v24 = *(float *)&v23 / *(float *)&v22;
    LOWORD(v22) = *(_WORD *)(v15 + 140);
    float v25 = (float)v22;
    LOWORD(v23) = *(_WORD *)(v15 + 142);
    float v26 = (float)v23;
    float v27 = v24 * *(float *)v15;
    float v28 = v24 * *(float *)(v15 + 8);
    float v29 = v24 * *(float *)(v15 + 16);
    float v30 = v24 * *(float *)(v15 + 20);
    float v31 = v24 * *(float *)(v15 + 28);
    uint64_t v32 = *((void *)result + 14);
    unint64_t v33 = *((void *)result + 13) * a2;
    uint64_t v34 = (void *)*((void *)result + 16);
    uint64_t v35 = *((void *)result + 15) + 2 * (v33 / v8);
    uint64_t v36 = *(void *)(result + 36);
    uint64_t v37 = (unsigned char *)(*v16 + v18 * v13 + v36);
    uint64_t v38 = v16[2];
    BOOL v39 = v38 == 0;
    uint64_t result = (unsigned __int8 *)(v38 + v20 * v13 + v36);
    if (v39) {
      uint64_t result = 0;
    }
    uint64_t v40 = (char *)(*v34 + v35 * v21 + 8 * v32);
    uint64_t v41 = v16[1] + v19 * (v13 / 2) + v36;
    do
    {
      uint64_t v42 = &v40[v21];
      uint64_t v43 = &result[v20];
      unint64_t v44 = &v37[v18];
      if (v12)
      {
        unint64_t v45 = 0;
        uint64_t v46 = &v40[v21];
        uint64_t v47 = &v37[v18];
        uint64_t v48 = &result[v20];
        do
        {
          if (result)
          {
            __int16 v49 = *result;
            __int16 v50 = result[1];
            result += 2;
            __int16 v51 = *v48;
            __int16 v52 = v48[1];
            v48 += 2;
          }
          else
          {
            __int16 v49 = 0;
            __int16 v50 = 0;
            __int16 v51 = 0;
            __int16 v52 = 0;
          }
          LOBYTE(v2) = *(unsigned char *)(v41 + v45 + 1);
          float v53 = (float)LODWORD(v2) - v26;
          float v54 = v28 * v53;
          LOBYTE(v3) = *v37;
          float v55 = v27 * (float)((float)LODWORD(v3) - v25);
          float v56 = (float)(v28 * v53) + v55;
          __int16 v57 = v49 | (v49 << 8);
          if (result) {
            __int16 v58 = v57;
          }
          else {
            __int16 v58 = -1;
          }
          if (result) {
            __int16 v59 = v50 | (v50 << 8);
          }
          else {
            __int16 v59 = -1;
          }
          if (result) {
            __int16 v60 = v51 | (v51 << 8);
          }
          else {
            __int16 v60 = -1;
          }
          __int16 v61 = v52 | (v52 << 8);
          if (!result) {
            __int16 v61 = -1;
          }
          float v62 = 65535.0;
          if (v56 <= 65535.0)
          {
            float v62 = (float)(v28 * v53) + v55;
            if (v56 < 0.0) {
              float v62 = 0.0;
            }
          }
          LOBYTE(v56) = *(unsigned char *)(v41 + v45);
          float v63 = (float)LODWORD(v56) - v26;
          float v64 = (float)(v30 * v53) + (float)(v63 * v29);
          LOBYTE(v6) = v37[1];
          LOBYTE(v5) = *v47;
          LOBYTE(v4) = v47[1];
          *(_WORD *)uint64_t v40 = llroundf(v62);
          float v65 = 65535.0;
          if ((float)(v55 + v64) <= 65535.0)
          {
            float v65 = v55 + v64;
            if ((float)(v55 + v64) < 0.0) {
              float v65 = 0.0;
            }
          }
          float v3 = v31 * v63;
          float v66 = v3 + v55;
          *((_WORD *)v40 + 1) = llroundf(v65);
          float v67 = 65535.0;
          if (v66 <= 65535.0)
          {
            float v67 = v66;
            if (v66 < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = v27 * (float)((float)LODWORD(v6) - v25);
          *((_WORD *)v40 + 2) = llroundf(v67);
          *((_WORD *)v40 + 3) = v58;
          float v69 = 65535.0;
          if ((float)(v54 + v68) <= 65535.0)
          {
            float v69 = v54 + v68;
            if ((float)(v54 + v68) < 0.0) {
              float v69 = 0.0;
            }
          }
          *((_WORD *)v40 + 4) = llroundf(v69);
          float v70 = 65535.0;
          if ((float)(v64 + v68) <= 65535.0)
          {
            float v70 = v64 + v68;
            if ((float)(v64 + v68) < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v3 + v68;
          *((_WORD *)v40 + 5) = llroundf(v70);
          BOOL v72 = (float)(v3 + v68) <= 65535.0;
          float v73 = 65535.0;
          if (v72)
          {
            float v73 = v71;
            if (v71 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = v27 * (float)((float)LODWORD(v5) - v25);
          *((_WORD *)v40 + 6) = llroundf(v73);
          *((_WORD *)v40 + 7) = v59;
          float v75 = 65535.0;
          if ((float)(v54 + v74) <= 65535.0)
          {
            float v75 = v54 + v74;
            if ((float)(v54 + v74) < 0.0) {
              float v75 = 0.0;
            }
          }
          *(_WORD *)uint64_t v46 = llroundf(v75);
          float v76 = 65535.0;
          if ((float)(v64 + v74) <= 65535.0)
          {
            float v76 = v64 + v74;
            if ((float)(v64 + v74) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v6 = v3 + v74;
          *((_WORD *)v46 + 1) = llroundf(v76);
          BOOL v72 = (float)(v3 + v74) <= 65535.0;
          float v5 = 65535.0;
          if (v72)
          {
            float v5 = v6;
            if (v6 < 0.0) {
              float v5 = 0.0;
            }
          }
          float v4 = v27 * (float)((float)LODWORD(v4) - v25);
          float v77 = v54 + v4;
          *((_WORD *)v46 + 2) = llroundf(v5);
          *((_WORD *)v46 + 3) = v60;
          BOOL v72 = (float)(v54 + v4) <= 65535.0;
          float v78 = 65535.0;
          if (v72)
          {
            float v78 = v77;
            if (v77 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v64 + v4;
          *((_WORD *)v46 + 4) = llroundf(v78);
          float v80 = 65535.0;
          if (v79 <= 65535.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          *((_WORD *)v46 + 5) = llroundf(v80);
          float v2 = 65535.0;
          if ((float)(v3 + v4) <= 65535.0)
          {
            float v2 = v3 + v4;
            if ((float)(v3 + v4) < 0.0) {
              float v2 = 0.0;
            }
          }
          v37 += 2;
          v47 += 2;
          v40 += 16;
          *((_WORD *)v46 + 6) = llroundf(v2);
          *((_WORD *)v46 + 7) = v61;
          v46 += 16;
          v45 += 2;
        }
        while (v12 > v45);
      }
      uint64_t v37 = &v44[v18];
      v41 += v19;
      uint64_t result = &v43[v20];
      uint64_t v40 = &v42[v21];
      v11 += 2;
    }
    while (v14 > v11);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v209 = 2 * v8 - 2 * v7;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v13 = (void *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = **((void **)result + 17);
    float v19 = 8191.0 / (float)*(unsigned int *)(v12 + 128);
    LOWORD(a5) = *(_WORD *)(v12 + 140);
    float v20 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v12 + 142);
    float v21 = (float)LODWORD(a5);
    float v22 = v19 * *(float *)v12;
    float v216 = v19 * *(float *)(v12 + 16);
    float v217 = v19 * *(float *)(v12 + 8);
    float v214 = v19 * *(float *)(v12 + 28);
    float v215 = v19 * *(float *)(v12 + 20);
    float v212 = *(float *)(v12 + 76);
    float v213 = *(float *)(v12 + 72);
    float v23 = *(float *)(v12 + 84);
    float v24 = *(float *)(v12 + 88);
    float v210 = v23;
    float v211 = *(float *)(v12 + 80);
    float v25 = *(float *)(v12 + 92);
    float v26 = *(float *)(v12 + 96);
    float v27 = *(float *)(v12 + 100);
    float v28 = *(float *)(v12 + 104);
    uint64_t v29 = v12 + 164;
    uint64_t v30 = v12 + 16548;
    uint64_t v31 = v12 + 32932;
    float v32 = *(float *)(v12 + 108);
    float v33 = *(float *)(v12 + 112);
    float v34 = *(float *)(v12 + 116);
    float v35 = *(float *)(v12 + 120);
    uint64_t v36 = *((void *)result + 14);
    uint64_t v37 = (void *)*((void *)result + 16);
    uint64_t v38 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v39 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(*v13 + v15 * v11 + v39);
    uint64_t v40 = v13[2];
    _ZF = v40 == 0;
    uint64_t v42 = (unsigned __int8 *)(v40 + v17 * v11 + v39);
    if (_ZF) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v43 = v42;
    }
    unint64_t v44 = (char *)(*v37 + v38 * v18 + 8 * v36);
    if (v11 >= 0) {
      uint64_t v45 = v11;
    }
    else {
      uint64_t v45 = v11 + 1;
    }
    uint64_t v46 = v13[1] + v16 * (v45 >> 1) + v39;
    float v219 = (float)LODWORD(a5);
    float v220 = v20;
    float v218 = v22;
    do
    {
      uint64_t v47 = &v44[v18];
      uint64_t v48 = &v43[v17];
      __int16 v49 = &result[v15];
      if (v10)
      {
        unint64_t v50 = 0;
        __int16 v51 = &v44[v18];
        __int16 v52 = &result[v15];
        float v53 = &v43[v17];
        do
        {
          LOBYTE(v23) = *(unsigned char *)(v46 + v50 + 1);
          float v54 = (float)LODWORD(v23) - v21;
          unsigned int v55 = LODWORD(v217);
          float v56 = v217 * v54;
          LOBYTE(v55) = *result;
          float v57 = v22 * (float)((float)v55 - v20);
          float v58 = (float)(v217 * v54) + v57;
          float v59 = 8191.0;
          if (v58 <= 8191.0)
          {
            float v59 = (float)(v217 * v54) + v57;
            if (v58 < 0.0) {
              float v59 = 0.0;
            }
          }
          LOBYTE(v58) = *(unsigned char *)(v46 + v50);
          float v60 = (float)LODWORD(v58) - v21;
          float v61 = (float)(v215 * v54) + (float)(v60 * v216);
          float v62 = 8191.0;
          if ((float)(v57 + v61) <= 8191.0)
          {
            float v62 = v57 + v61;
            if ((float)(v57 + v61) < 0.0) {
              float v62 = 0.0;
            }
          }
          float v63 = v214 * v60;
          float v64 = (float)(v214 * v60) + v57;
          float v65 = 8191.0;
          if (v64 <= 8191.0)
          {
            float v65 = v64;
            if (v64 < 0.0) {
              float v65 = 0.0;
            }
          }
          LOBYTE(v64) = result[1];
          float v66 = v22 * (float)((float)LODWORD(v64) - v20);
          float v67 = 8191.0;
          if ((float)(v56 + v66) <= 8191.0)
          {
            float v67 = v56 + v66;
            if ((float)(v56 + v66) < 0.0) {
              float v67 = 0.0;
            }
          }
          float v68 = 8191.0;
          if ((float)(v61 + v66) <= 8191.0)
          {
            float v68 = v61 + v66;
            if ((float)(v61 + v66) < 0.0) {
              float v68 = 0.0;
            }
          }
          float v69 = v63 + v66;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          LOBYTE(v69) = *v52;
          float v71 = (float)LODWORD(v69) - v20;
          float v72 = v22 * v71;
          float v73 = 8191.0;
          if ((float)(v56 + (float)(v22 * v71)) <= 8191.0)
          {
            float v73 = v56 + (float)(v22 * v71);
            if (v73 < 0.0) {
              float v73 = 0.0;
            }
          }
          float v74 = 8191.0;
          if ((float)(v61 + v72) <= 8191.0)
          {
            float v74 = v61 + v72;
            if ((float)(v61 + v72) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = v63 + v72;
          float v76 = 8191.0;
          if (v75 <= 8191.0)
          {
            float v76 = v75;
            if (v75 < 0.0) {
              float v76 = 0.0;
            }
          }
          LOBYTE(v71) = v52[1];
          float v77 = v22 * (float)((float)LODWORD(v71) - v20);
          float v78 = 8191.0;
          if ((float)(v56 + v77) <= 8191.0)
          {
            float v78 = v56 + v77;
            if ((float)(v56 + v77) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v61 + v77;
          BOOL v80 = (float)(v61 + v77) <= 8191.0;
          float v81 = 8191.0;
          if (v80)
          {
            float v81 = v79;
            if (v79 < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v63 + v77;
          float v83 = 8191.0;
          if (v82 <= 8191.0)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          if (v43)
          {
            int v84 = *v43;
            int v85 = v43[1];
            v43 += 2;
            int v86 = *v53;
            int v87 = v53[1];
            v53 += 2;
          }
          else
          {
            int v84 = 0;
            int v85 = 0;
            int v86 = 0;
            int v87 = 0;
          }
          _S1 = fmaxf(v59, 0.0);
          float v89 = 8191.0;
          LOWORD(_S1) = *(_WORD *)(v29 + 2 * llroundf(fminf(_S1, 8191.0)));
          __asm { FCVT            S12, H1 }
          LOWORD(_S1) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v62, 0.0), 8191.0)));
          __asm { FCVT            S31, H1 }
          LOWORD(_S1) = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          _H3 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          _H16 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          _H17 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H7 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H1 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v29 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          float v105 = fmaxf(_S12, fmaxf(_S31, _S8));
          float v106 = (float)((float)((float)(v33 * _S31) + (float)(v32 * _S12)) + (float)(v34 * _S8)) + (float)(v35 * v105);
          float v107 = 8191.0;
          if (v106 <= 8191.0)
          {
            float v107 = (float)((float)((float)(v33 * _S31) + (float)(v32 * _S12)) + (float)(v34 * _S8))
                 + (float)(v35 * v105);
            if (v106 < 0.0) {
              float v107 = 0.0;
            }
          }
          __asm
          {
            FCVT            S4, H3
            FCVT            S5, H16
            FCVT            S6, H17
          }
          _H13 = *(_WORD *)(v30 + 2 * llroundf(v107));
          float v112 = (float)((float)((float)(v33 * _S5) + (float)(v32 * _S4)) + (float)(v34 * _S6))
               + (float)(v35 * fmaxf(_S4, fmaxf(_S5, _S6)));
          float v113 = 8191.0;
          if (v112 <= 8191.0)
          {
            float v113 = v112;
            if (v112 < 0.0) {
              float v113 = 0.0;
            }
          }
          __asm
          {
            FCVT            S7, H7
            FCVT            S14, H2
            FCVT            S2, H1
          }
          _H1 = *(_WORD *)(v30 + 2 * llroundf(v113));
          float v118 = fmaxf(_S7, fmaxf(_S14, _S2));
          float v119 = (float)((float)((float)(v33 * _S14) + (float)(v32 * _S7)) + (float)(v34 * _S2)) + (float)(v35 * v118);
          float v120 = 8191.0;
          if (v119 <= 8191.0)
          {
            float v120 = (float)((float)((float)(v33 * _S14) + (float)(v32 * _S7)) + (float)(v34 * _S2)) + (float)(v35 * v118);
            if (v119 < 0.0) {
              float v120 = 0.0;
            }
          }
          __asm
          {
            FCVT            S3, H9
            FCVT            S16, H10
            FCVT            S17, H11
          }
          _H9 = *(_WORD *)(v30 + 2 * llroundf(v120));
          float v125 = fmaxf(_S3, fmaxf(_S16, _S17));
          float v126 = (float)((float)((float)(v33 * _S16) + (float)(v32 * _S3)) + (float)(v34 * _S17)) + (float)(v35 * v125);
          if (v126 <= 8191.0)
          {
            float v89 = (float)((float)((float)(v33 * _S16) + (float)(v32 * _S3)) + (float)(v34 * _S17)) + (float)(v35 * v125);
            if (v126 < 0.0) {
              float v89 = 0.0;
            }
          }
          __asm { FCVT            S10, H13 }
          float v128 = _S31 * _S10;
          float v129 = _S8 * _S10;
          __asm { FCVT            S1, H1 }
          float v131 = _S4 * _S1;
          float v132 = _S5 * _S1;
          float v133 = _S6 * _S1;
          __asm { FCVT            S6, H9 }
          float v135 = _S7 * _S6;
          float v136 = _S14 * _S6;
          _H30 = *(_WORD *)(v30 + 2 * llroundf(v89));
          _S2 = _S2 * _S6;
          __asm { FCVT            S6, H30 }
          float v140 = _S3 * _S6;
          float v141 = _S16 * _S6;
          float v142 = _S17 * _S6;
          float v143 = (float)((float)(v212 * v128) + (float)((float)(_S12 * _S10) * v213)) + (float)(v129 * v211);
          float v144 = (float)((float)(v24 * v128) + (float)((float)(_S12 * _S10) * v210)) + (float)(v129 * v25);
          float v145 = (float)((float)(v27 * v128) + (float)((float)(_S12 * _S10) * v26)) + (float)(v129 * v28);
          float v146 = (float)((float)(v212 * v132) + (float)(v131 * v213)) + (float)(v133 * v211);
          float v147 = (float)((float)(v24 * v132) + (float)(v131 * v210)) + (float)(v133 * v25);
          float v148 = (float)((float)(v27 * v132) + (float)(v131 * v26)) + (float)(v133 * v28);
          float v149 = (float)((float)(v212 * v136) + (float)(v135 * v213)) + (float)(_S2 * v211);
          float v150 = (float)((float)(v24 * v136) + (float)(v135 * v210)) + (float)(_S2 * v25);
          float v151 = (float)((float)(v27 * v136) + (float)(v135 * v26)) + (float)(_S2 * v28);
          float v152 = (float)((float)(v212 * v141) + (float)(v140 * v213)) + (float)(v142 * v211);
          float v153 = (float)((float)(v24 * v141) + (float)(v140 * v210)) + (float)(v142 * v25);
          float v154 = (float)((float)(v27 * v141) + (float)(v140 * v26)) + (float)(v142 * v28);
          LOWORD(_S2) = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v143, 0.0), 8191.0)));
          __asm { FCVT            S7, H2 }
          _H14 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v144, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v145, 0.0), 8191.0)));
          _H6 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v146, 0.0), 8191.0)));
          _H5 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v31 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          int v167 = v84 | (v84 << 8);
          if (v43) {
            unsigned int v168 = v167;
          }
          else {
            unsigned int v168 = -1;
          }
          if (v43) {
            unsigned int v169 = v85 | (v85 << 8);
          }
          else {
            unsigned int v169 = -1;
          }
          if (v43) {
            unsigned int v170 = v86 | (v86 << 8);
          }
          else {
            unsigned int v170 = -1;
          }
          unsigned int v171 = v87 | (v87 << 8);
          if (!v43) {
            unsigned int v171 = -1;
          }
          float v172 = 65535.0;
          float v173 = 65535.0;
          if (_S7 <= 65535.0)
          {
            __asm { FCMP            H2, #0 }
            float v173 = _S7;
            if (_NF) {
              float v173 = 0.0;
            }
          }
          __asm { FCVT            S3, H14 }
          float v176 = 65535.0;
          float v22 = v218;
          if (_S3 <= 65535.0)
          {
            __asm { FCMP            H14, #0 }
            float v176 = _S3;
            if (_NF) {
              float v176 = 0.0;
            }
          }
          __asm { FCVT            S7, H13 }
          float v179 = 65535.0;
          if (_S7 <= 65535.0)
          {
            __asm { FCMP            H13, #0 }
            float v179 = _S7;
            if (_NF) {
              float v179 = 0.0;
            }
          }
          unsigned int v181 = llroundf(v176);
          __asm { FCVT            S2, H6 }
          *(_WORD *)unint64_t v44 = bswap32(v168) >> 16;
          *((_WORD *)v44 + 1) = __rev16(llroundf(v173));
          *((_WORD *)v44 + 2) = __rev16(v181);
          *((_WORD *)v44 + 3) = __rev16(llroundf(v179));
          float v183 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H6, #0 }
            float v183 = _S2;
            if (_NF) {
              float v183 = 0.0;
            }
          }
          __asm { FCVT            S3, H5 }
          float v186 = 65535.0;
          float v21 = v219;
          float v20 = v220;
          if (_S3 <= 65535.0)
          {
            __asm { FCMP            H5, #0 }
            float v186 = _S3;
            if (_NF) {
              float v186 = 0.0;
            }
          }
          __asm { FCVT            S5, H4 }
          float v189 = 65535.0;
          if (_S5 <= 65535.0)
          {
            __asm { FCMP            H4, #0 }
            float v189 = _S5;
            if (_NF) {
              float v189 = 0.0;
            }
          }
          unsigned int v191 = llroundf(v186);
          __asm { FCVT            S2, H12 }
          *((_WORD *)v44 + 4) = bswap32(v169) >> 16;
          *((_WORD *)v44 + 5) = __rev16(llroundf(v183));
          *((_WORD *)v44 + 6) = __rev16(v191);
          *((_WORD *)v44 + 7) = __rev16(llroundf(v189));
          float v193 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H12, #0 }
            float v193 = _S2;
            if (_NF) {
              float v193 = 0.0;
            }
          }
          __asm { FCVT            S3, H11 }
          float v196 = 65535.0;
          if (_S3 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v196 = _S3;
            if (_NF) {
              float v196 = 0.0;
            }
          }
          __asm { FCVT            S4, H10 }
          float v199 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v199 = _S4;
            if (_NF) {
              float v199 = 0.0;
            }
          }
          unsigned int v201 = llroundf(v196);
          __asm { FCVT            S2, H9 }
          *(_WORD *)__int16 v51 = bswap32(v170) >> 16;
          *((_WORD *)v51 + 1) = __rev16(llroundf(v193));
          *((_WORD *)v51 + 2) = __rev16(v201);
          *((_WORD *)v51 + 3) = __rev16(llroundf(v199));
          float v23 = 65535.0;
          if (_S2 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v23 = _S2;
            if (_NF) {
              float v23 = 0.0;
            }
          }
          __asm { FCVT            S3, H8 }
          float v205 = 65535.0;
          if (_S3 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v205 = _S3;
            if (_NF) {
              float v205 = 0.0;
            }
          }
          __asm { FCVT            S3, H31 }
          if (_S3 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v172 = _S3;
            if (_NF) {
              float v172 = 0.0;
            }
          }
          result += 2;
          v52 += 2;
          v44 += 16;
          *((_WORD *)v51 + 4) = bswap32(v171) >> 16;
          *((_WORD *)v51 + 5) = __rev16(llroundf(v23));
          *((_WORD *)v51 + 6) = __rev16(llroundf(v205));
          *((_WORD *)v51 + 7) = __rev16(llroundf(v172));
          v51 += 16;
          v50 += 2;
        }
        while (v10 > v50);
      }
      uint64_t result = &v49[v15];
      v46 += v16;
      uint64_t v43 = &v48[v17];
      unint64_t v44 = &v47[v18];
      v9 += 2;
    }
    while (v209 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_b64a_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44) + 2 * v8;
    unint64_t v13 = 2 * v9 - 2 * v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v185 = v22 * *(float *)(v14 + 16);
    float v186 = v22 * *(float *)(v14 + 8);
    float v26 = v22 * *(float *)(v14 + 20);
    float v27 = v22 * *(float *)(v14 + 28);
    float v183 = v27;
    float v184 = v26;
    float v28 = *(float *)(v14 + 72);
    float v29 = *(float *)(v14 + 76);
    float v30 = *(float *)(v14 + 80);
    float v31 = *(float *)(v14 + 84);
    float v32 = *(float *)(v14 + 88);
    float v33 = *(float *)(v14 + 92);
    float v34 = *(float *)(v14 + 96);
    float v35 = *(float *)(v14 + 100);
    float v36 = *(float *)(v14 + 104);
    uint64_t v37 = v14 + 164;
    uint64_t v38 = v14 + 16548;
    uint64_t v39 = *((void *)result + 14);
    uint64_t v40 = (void *)*((void *)result + 16);
    uint64_t v41 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7);
    uint64_t v42 = *(void *)(result + 36);
    uint64_t v43 = v15[1];
    unint64_t v44 = (unsigned char *)(*v15 + v17 * v12 + v42);
    uint64_t v45 = v15[2];
    _ZF = v45 == 0;
    uint64_t v47 = (unsigned __int8 *)(v45 + v19 * v12 + v42);
    if (_ZF) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = v47;
    }
    __int16 v49 = (char *)(*v40 + v41 * v20 + 8 * v39);
    if (v12 >= 0) {
      uint64_t v50 = v12;
    }
    else {
      uint64_t v50 = v12 + 1;
    }
    uint64_t result = (unsigned __int8 *)(v43 + v18 * (v50 >> 1) + v42);
    float v187 = v24;
    float v188 = v23;
    do
    {
      __int16 v51 = &v49[v20];
      __int16 v52 = &v48[v19];
      float v53 = &v44[v17];
      if (v11)
      {
        unint64_t v54 = 0;
        unsigned int v55 = &v49[v20];
        float v56 = &v44[v17];
        float v57 = &v48[v19];
        do
        {
          LOBYTE(v27) = result[v54 + 1];
          float v58 = (float)LODWORD(v27) - v24;
          unsigned int v59 = LODWORD(v186);
          float v60 = v186 * v58;
          LOBYTE(v59) = *v44;
          float v61 = v25 * (float)((float)v59 - v23);
          float v62 = (float)(v186 * v58) + v61;
          float v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            float v63 = (float)(v186 * v58) + v61;
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          LOBYTE(v62) = result[v54];
          float v64 = (float)LODWORD(v62) - v24;
          float v65 = (float)(v184 * v58) + (float)(v64 * v185);
          float v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            float v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v183 * v64;
          float v68 = (float)(v183 * v64) + v61;
          float v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            float v69 = v68;
            if (v68 < 0.0) {
              float v69 = 0.0;
            }
          }
          LOBYTE(v68) = v44[1];
          float v70 = v25 * (float)((float)LODWORD(v68) - v23);
          float v71 = 8191.0;
          if ((float)(v60 + v70) <= 8191.0)
          {
            float v71 = v60 + v70;
            if ((float)(v60 + v70) < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = 8191.0;
          if ((float)(v65 + v70) <= 8191.0)
          {
            float v72 = v65 + v70;
            if ((float)(v65 + v70) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v67 + v70;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          LOBYTE(v73) = *v56;
          float v75 = v25 * (float)((float)LODWORD(v73) - v23);
          float v76 = 8191.0;
          if ((float)(v60 + v75) <= 8191.0)
          {
            float v76 = v60 + v75;
            if ((float)(v60 + v75) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = 8191.0;
          if ((float)(v65 + v75) <= 8191.0)
          {
            float v77 = v65 + v75;
            if ((float)(v65 + v75) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v67 + v75;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          LOBYTE(_S14) = v56[1];
          float v80 = v25 * (float)((float)LODWORD(_S14) - v23);
          float v81 = v60 + v80;
          BOOL v82 = (float)(v60 + v80) <= 8191.0;
          float v83 = 8191.0;
          if (v82)
          {
            float v83 = v81;
            if (v81 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v65 + v80;
          BOOL v82 = (float)(v65 + v80) <= 8191.0;
          float v85 = 8191.0;
          if (v82)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v67 + v80;
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          if (v48)
          {
            int v88 = *v48;
            int v89 = v48[1];
            v48 += 2;
            int v90 = *v57;
            int v91 = v57[1];
            v57 += 2;
          }
          else
          {
            int v88 = 0;
            int v89 = 0;
            int v90 = 0;
            int v91 = 0;
          }
          _H4 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          __asm { FCVT            S4, H4 }
          _H26 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm
          {
            FCVT            S26, H26
            FCVT            S27, H27
          }
          _H28 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm
          {
            FCVT            S9, H9
            FCVT            S12, H12
          }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          __asm { FCVT            S10, H10 }
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          float v119 = (float)((float)(v29 * _S26) + (float)(_S4 * v28)) + (float)(_S27 * v30);
          float v120 = (float)((float)(v32 * _S26) + (float)(_S4 * v31)) + (float)(_S27 * v33);
          float v121 = (float)((float)(v35 * _S26) + (float)(_S4 * v34)) + (float)(_S27 * v36);
          float v122 = (float)((float)(v29 * _S29) + (float)(_S28 * v28)) + (float)(_S30 * v30);
          float v123 = (float)((float)(v32 * _S29) + (float)(_S28 * v31)) + (float)(_S30 * v33);
          float v124 = (float)((float)(v35 * _S29) + (float)(_S28 * v34)) + (float)(_S30 * v36);
          float v125 = (float)((float)(v29 * _S9) + (float)(_S31 * v28)) + (float)(_S12 * v30);
          float v126 = (float)((float)(v32 * _S9) + (float)(_S31 * v31)) + (float)(_S12 * v33);
          float v127 = (float)((float)(v35 * _S9) + (float)(_S31 * v34)) + (float)(_S12 * v36);
          float v128 = (float)((float)(v29 * _S10) + (float)(_S8 * v28)) + (float)(_S11 * v30);
          float v129 = (float)((float)(v32 * _S10) + (float)(_S8 * v31)) + (float)(_S11 * v33);
          float v130 = (float)((float)(v35 * _S10) + (float)(_S8 * v34)) + (float)(_S11 * v36);
          _H14 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v119, 0.0), 8191.0)));
          __asm { FCVT            S4, H14 }
          _H13 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v120, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v121, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v122, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          _H9 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          _H31 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          _H29 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          _H27 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          int v144 = v88 | (v88 << 8);
          if (v48) {
            unsigned int v145 = v144;
          }
          else {
            unsigned int v145 = -1;
          }
          if (v48) {
            unsigned int v146 = v89 | (v89 << 8);
          }
          else {
            unsigned int v146 = -1;
          }
          if (v48) {
            unsigned int v147 = v90 | (v90 << 8);
          }
          else {
            unsigned int v147 = -1;
          }
          unsigned int v148 = v91 | (v91 << 8);
          if (!v48) {
            unsigned int v148 = -1;
          }
          float v149 = 65535.0;
          float v150 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H14, #0 }
            float v150 = _S4;
            if (_NF) {
              float v150 = 0.0;
            }
          }
          __asm { FCVT            S14, H13 }
          float v153 = 65535.0;
          float v24 = v187;
          if (_S14 <= 65535.0)
          {
            __asm { FCMP            H13, #0 }
            float v153 = _S14;
            if (_NF) {
              float v153 = 0.0;
            }
          }
          __asm { FCVT            S14, H12 }
          float v155 = 65535.0;
          float v23 = v188;
          if (_S14 <= 65535.0)
          {
            __asm { FCMP            H12, #0 }
            float v155 = _S14;
            if (_NF) {
              float v155 = 0.0;
            }
          }
          __asm { FCVT            S12, H11 }
          *(_WORD *)__int16 v49 = bswap32(v145) >> 16;
          *((_WORD *)v49 + 1) = __rev16(llroundf(v150));
          *((_WORD *)v49 + 2) = __rev16(llroundf(v153));
          *((_WORD *)v49 + 3) = __rev16(llroundf(v155));
          float v158 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCMP            H11, #0 }
            float v158 = _S12;
            if (_NF) {
              float v158 = 0.0;
            }
          }
          __asm { FCVT            S12, H10 }
          float v161 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCMP            H10, #0 }
            float v161 = _S12;
            if (_NF) {
              float v161 = 0.0;
            }
          }
          __asm { FCVT            S12, H9 }
          float v164 = 65535.0;
          if (_S12 <= 65535.0)
          {
            __asm { FCMP            H9, #0 }
            float v164 = _S12;
            if (_NF) {
              float v164 = 0.0;
            }
          }
          __asm { FCVT            S9, H8 }
          *((_WORD *)v49 + 4) = bswap32(v146) >> 16;
          *((_WORD *)v49 + 5) = __rev16(llroundf(v158));
          *((_WORD *)v49 + 6) = __rev16(llroundf(v161));
          *((_WORD *)v49 + 7) = __rev16(llroundf(v164));
          float v167 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCMP            H8, #0 }
            float v167 = _S9;
            if (_NF) {
              float v167 = 0.0;
            }
          }
          __asm { FCVT            S9, H31 }
          float v170 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCMP            H31, #0 }
            float v170 = _S9;
            if (_NF) {
              float v170 = 0.0;
            }
          }
          __asm { FCVT            S9, H30 }
          float v173 = 65535.0;
          if (_S9 <= 65535.0)
          {
            __asm { FCMP            H30, #0 }
            float v173 = _S9;
            if (_NF) {
              float v173 = 0.0;
            }
          }
          unsigned int v175 = llroundf(v167);
          __asm { FCVT            S4, H29 }
          *(_WORD *)unsigned int v55 = bswap32(v147) >> 16;
          *((_WORD *)v55 + 1) = __rev16(v175);
          *((_WORD *)v55 + 2) = __rev16(llroundf(v170));
          *((_WORD *)v55 + 3) = __rev16(llroundf(v173));
          float v177 = 65535.0;
          if (_S4 <= 65535.0)
          {
            __asm { FCMP            H29, #0 }
            float v177 = _S4;
            if (_NF) {
              float v177 = 0.0;
            }
          }
          __asm { FCVT            S29, H28 }
          float v27 = 65535.0;
          if (_S29 <= 65535.0)
          {
            __asm { FCMP            H28, #0 }
            float v27 = _S29;
            if (_NF) {
              float v27 = 0.0;
            }
          }
          __asm { FCVT            S28, H27 }
          if (_S28 <= 65535.0)
          {
            __asm { FCMP            H27, #0 }
            float v149 = _S28;
            if (_NF) {
              float v149 = 0.0;
            }
          }
          v44 += 2;
          v56 += 2;
          v49 += 16;
          *((_WORD *)v55 + 4) = bswap32(v148) >> 16;
          *((_WORD *)v55 + 5) = __rev16(llroundf(v177));
          *((_WORD *)v55 + 6) = __rev16(llroundf(v27));
          *((_WORD *)v55 + 7) = __rev16(llroundf(v149));
          v55 += 16;
          v54 += 2;
        }
        while (v11 > v54);
      }
      unint64_t v44 = &v53[v17];
      result += v18;
      uint64_t v48 = &v52[v19];
      __int16 v49 = &v51[v20];
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_b64a(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_b64a_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_b64a_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v4 = *(void *)(result + 28);
  unint64_t v5 = 2 * *result;
  unint64_t v6 = v4 * a2 / v5;
  unint64_t v7 = (v4 + v4 * a2) / v5;
  if (2 * v7 != 2 * v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)(result + 20);
    uint64_t v10 = *(void *)(result + 44) + 2 * v6;
    unint64_t v11 = 2 * v7 - 2 * v6;
    uint64_t v12 = *((void *)result + 19);
    uint64_t v13 = (void *)*((void *)result + 7);
    uint64_t v14 = (uint64_t *)*((void *)result + 8);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = v14[2];
    uint64_t v18 = **((void **)result + 17);
    *(float *)&unsigned int v19 = (float)*(unsigned int *)(v12 + 128);
    *(float *)&unsigned int v20 = (float)*(unsigned int *)(v12 + 136);
    float v21 = *(float *)&v20 / *(float *)&v19;
    LOWORD(v19) = *(_WORD *)(v12 + 140);
    float v22 = (float)v19;
    LOWORD(v20) = *(_WORD *)(v12 + 142);
    float v23 = (float)v20;
    float v24 = v21 * *(float *)v12;
    float v25 = v21 * *(float *)(v12 + 8);
    float v26 = v21 * *(float *)(v12 + 16);
    float v27 = v21 * *(float *)(v12 + 20);
    float v28 = v21 * *(float *)(v12 + 28);
    uint64_t v29 = *((void *)result + 14);
    unint64_t v30 = *((void *)result + 13) * a2;
    uint64_t v31 = (void *)*((void *)result + 16);
    uint64_t v32 = *((void *)result + 15) + 2 * (v30 / v5);
    uint64_t v33 = *(void *)(result + 36);
    uint64_t v34 = (unsigned char *)(*v13 + v15 * v10 + v33);
    uint64_t v35 = v13[2];
    BOOL v36 = v35 == 0;
    uint64_t result = (unsigned __int8 *)(v35 + v17 * v10 + v33);
    if (v36) {
      uint64_t result = 0;
    }
    uint64_t v37 = (char *)(*v31 + v32 * v18 + 8 * v29);
    uint64_t v38 = v13[1] + v16 * (v10 / 2) + v33;
    do
    {
      uint64_t v39 = &v37[v18];
      uint64_t v40 = &result[v17];
      uint64_t v41 = &v34[v15];
      if (v9)
      {
        unint64_t v42 = 0;
        uint64_t v43 = &v37[v18];
        unint64_t v44 = &v34[v15];
        uint64_t v45 = &result[v17];
        do
        {
          if (result)
          {
            int v46 = *result;
            int v47 = result[1];
            result += 2;
            int v48 = *v45;
            int v49 = v45[1];
            v45 += 2;
          }
          else
          {
            int v46 = 0;
            int v47 = 0;
            int v48 = 0;
            int v49 = 0;
          }
          LOBYTE(v2) = *(unsigned char *)(v38 + v42 + 1);
          float v50 = (float)LODWORD(v2) - v23;
          float v51 = v25 * v50;
          LOBYTE(v3) = *v34;
          float v52 = v24 * (float)((float)LODWORD(v3) - v22);
          float v53 = (float)(v25 * v50) + v52;
          int v54 = v46 | (v46 << 8);
          if (result) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = -1;
          }
          if (result) {
            unsigned int v56 = v47 | (v47 << 8);
          }
          else {
            unsigned int v56 = -1;
          }
          if (result) {
            unsigned int v57 = v48 | (v48 << 8);
          }
          else {
            unsigned int v57 = -1;
          }
          unsigned int v58 = v49 | (v49 << 8);
          if (!result) {
            unsigned int v58 = -1;
          }
          float v59 = 65535.0;
          if (v53 <= 65535.0)
          {
            float v59 = (float)(v25 * v50) + v52;
            if (v53 < 0.0) {
              float v59 = 0.0;
            }
          }
          LOBYTE(v53) = *(unsigned char *)(v38 + v42);
          float v60 = (float)LODWORD(v53) - v23;
          float v61 = (float)(v27 * v50) + (float)(v60 * v26);
          float v62 = v52 + v61;
          float v63 = 65535.0;
          if ((float)(v52 + v61) <= 65535.0)
          {
            float v63 = v52 + v61;
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          float v64 = v28 * v60;
          float v65 = v64 + v52;
          float v66 = 65535.0;
          if (v65 <= 65535.0)
          {
            float v66 = v65;
            if (v65 < 0.0) {
              float v66 = 0.0;
            }
          }
          LOBYTE(v65) = v34[1];
          float v68 = (float)LODWORD(v65) - v22;
          float v67 = v24 * v68;
          LOBYTE(v62) = *v44;
          LOBYTE(v68) = v44[1];
          *(_WORD *)uint64_t v37 = bswap32(v55) >> 16;
          *((_WORD *)v37 + 1) = __rev16(llroundf(v59));
          *((_WORD *)v37 + 2) = __rev16(llroundf(v63));
          *((_WORD *)v37 + 3) = __rev16(llroundf(v66));
          float v69 = 65535.0;
          if ((float)(v51 + v67) <= 65535.0)
          {
            float v69 = v51 + v67;
            if ((float)(v51 + v67) < 0.0) {
              float v69 = 0.0;
            }
          }
          float v70 = 65535.0;
          if ((float)(v61 + v67) <= 65535.0)
          {
            float v70 = v61 + v67;
            if ((float)(v61 + v67) < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = v64 + v67;
          float v72 = 65535.0;
          if (v71 <= 65535.0)
          {
            float v72 = v71;
            if (v71 < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v24 * (float)((float)LODWORD(v62) - v22);
          *((_WORD *)v37 + 4) = bswap32(v56) >> 16;
          *((_WORD *)v37 + 5) = __rev16(llroundf(v69));
          *((_WORD *)v37 + 6) = __rev16(llroundf(v70));
          *((_WORD *)v37 + 7) = __rev16(llroundf(v72));
          float v74 = 65535.0;
          if ((float)(v51 + v73) <= 65535.0)
          {
            float v74 = v51 + v73;
            if ((float)(v51 + v73) < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = 65535.0;
          if ((float)(v61 + v73) <= 65535.0)
          {
            float v75 = v61 + v73;
            if ((float)(v61 + v73) < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v64 + v73;
          BOOL v77 = (float)(v64 + v73) <= 65535.0;
          float v78 = 65535.0;
          if (v77)
          {
            float v78 = v76;
            if (v76 < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v24 * (float)((float)LODWORD(v68) - v22);
          unsigned int v80 = llroundf(v74);
          float v81 = v51 + v79;
          *(_WORD *)uint64_t v43 = bswap32(v57) >> 16;
          *((_WORD *)v43 + 1) = __rev16(v80);
          *((_WORD *)v43 + 2) = __rev16(llroundf(v75));
          *((_WORD *)v43 + 3) = __rev16(llroundf(v78));
          BOOL v77 = (float)(v51 + v79) <= 65535.0;
          float v2 = 65535.0;
          if (v77)
          {
            float v2 = v81;
            if (v81 < 0.0) {
              float v2 = 0.0;
            }
          }
          float v82 = v61 + v79;
          BOOL v77 = (float)(v61 + v79) <= 65535.0;
          float v83 = 65535.0;
          if (v77)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v64 + v79;
          float v3 = 65535.0;
          if (v84 <= 65535.0)
          {
            float v3 = v84;
            if (v84 < 0.0) {
              float v3 = 0.0;
            }
          }
          v34 += 2;
          v44 += 2;
          v37 += 16;
          *((_WORD *)v43 + 4) = bswap32(v58) >> 16;
          *((_WORD *)v43 + 5) = __rev16(llroundf(v2));
          *((_WORD *)v43 + 6) = __rev16(llroundf(v83));
          *((_WORD *)v43 + 7) = __rev16(llroundf(v3));
          v43 += 16;
          v42 += 2;
        }
        while (v9 > v42);
      }
      uint64_t v34 = &v41[v15];
      v38 += v16;
      uint64_t result = &v40[v17];
      uint64_t v37 = &v39[v18];
      v8 += 2;
    }
    while (v11 > v8);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, int16x4_t _D0, double a4, float32x4_t a5)
{
  uint64_t v7 = *(void *)(result + 28);
  unint64_t v8 = 2 * *result;
  unint64_t v9 = v7 * a2 / v8;
  unint64_t v10 = (v7 + v7 * a2) / v8;
  if (2 * v10 != 2 * v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(result + 44);
    uint64_t v13 = v12 + 2 * v9;
    uint64_t v14 = v12 + 2 * v10;
    uint64_t v15 = (float32x2_t *)*((void *)result + 19);
    uint64_t v17 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v18 = *v16;
    uint64_t v19 = v16[1];
    uint64_t v20 = v16[2];
    uint64_t v21 = **((void **)result + 17);
    LODWORD(v12) = v15[17].u16[2];
    LODWORD(v16) = v15[17].u16[3];
    _D0.i32[0] = v15->i32[0];
    v22.i32[0] = v15[3].i32[1];
    _S6 = v15[10].i32[1];
    _S7 = v15[11].i32[0];
    _S23 = v15[11].i32[1];
    _S16 = v15[12].i32[0];
    _S17 = v15[12].i32[1];
    _S18 = v15[13].i32[0];
    _S20 = v15[15].f32[0];
    unint64_t v351 = v14 - v13;
    uint64_t v30 = (char *)&v15[2068] + 4;
    float v31 = (float)v12;
    a5.f32[0] = 8191.0 / (float)v15[16].u32[0];
    float v407 = (float)v16;
    _S22 = a5.f32[0] * v15->f32[0];
    uint64_t v33 = (char *)&v15[20] + 4;
    uint64_t v34 = (char *)&v15[4116] + 4;
    __asm { FCVT            H0, S22 }
    short float v376 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v12;
    float16x8_t v386 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    v22.i32[1] = v15[1].i32[0];
    *(float32x2_t *)v6.f32 = vmul_n_f32(v22, a5.f32[0]);
    short float v38 = -(short float)v16;
    *(float32x2_t *)a5.f32 = vmul_n_f32(v15[2], a5.f32[0]);
    float16x8_t v384 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v6), 0);
    float16x8_t v381 = vmulq_n_f16(v384, v38);
    float16x8_t v382 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    _Q0 = vmulq_n_f16(v382, v38);
    float16x8_t v380 = _Q0;
    float v389 = v15[13].f32[1];
    __asm { FCVT            H0, S19 }
    short float v379 = *(short float *)_Q0.i16;
    float v388 = v15[14].f32[0];
    __asm { FCVT            H0, S25 }
    short float v378 = *(short float *)_Q0.i16;
    float v387 = v15[14].f32[1];
    __asm { FCVT            H0, S26 }
    short float v377 = *(short float *)_Q0.i16;
    __asm { FCVT            H0, S20 }
    short float v375 = *(short float *)_Q0.i16;
    float v398 = v15[9].f32[0];
    __asm { FCVT            H0, S3 }
    short float v374 = *(short float *)_Q0.i16;
    float v397 = v15[9].f32[1];
    __asm { FCVT            H0, S4 }
    short float v373 = *(short float *)_Q0.i16;
    float v396 = v15[10].f32[0];
    __asm { FCVT            H0, S5 }
    unsigned int v372 = _Q0.i32[0];
    uint64_t v41 = v17[1];
    uint64_t v40 = v17[2];
    if (v13 >= 0) {
      uint64_t v42 = v13;
    }
    else {
      uint64_t v42 = v13 + 1;
    }
    uint64_t v43 = *v17;
    uint64_t v354 = v19;
    uint64_t v44 = v41 + v19 * (v42 >> 1);
    uint64_t v45 = *(void *)(result + 36);
    uint64_t v46 = **((void **)result + 16)
        + v21 * (*((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v8))
        + 8 * *((void *)result + 14);
    if (v40) {
      int v47 = (int8x8_t *)(v40 + v20 * v13 + v45);
    }
    else {
      int v47 = 0;
    }
    float v399 = (unsigned char *)(v44 + v45);
    int v48 = (int8x8_t *)(v43 + v18 * v13 + v45);
    int v371 = *(void *)(result + 20) - 7;
    unint64_t v360 = *(void *)(result + 20);
    float v395 = v15[10].f32[1];
    __asm { FCVT            H0, S6 }
    short float v370 = _H0;
    float v394 = v15[11].f32[0];
    __asm { FCVT            H0, S7 }
    short float v369 = _H0;
    float v393 = v15[11].f32[1];
    __asm { FCVT            H0, S23 }
    short float v368 = _H0;
    float v392 = v15[12].f32[0];
    __asm { FCVT            H10, S16 }
    float v391 = v15[12].f32[1];
    __asm { FCVT            H0, S17 }
    short float v364 = _H0;
    float v390 = v15[13].f32[0];
    __asm { FCVT            H0, S18 }
    short float v363 = _H0;
    float v385 = v6.f32[0];
    float v55 = a5.f32[1];
    float v361 = a5.f32[1];
    float v383 = a5.f32[0];
    float v362 = v6.f32[1];
    v56.i64[0] = 0x9000900090009000;
    v56.i64[1] = 0x9000900090009000;
    uint64_t v355 = v18;
    uint64_t v352 = **((void **)result + 17);
    uint64_t v353 = v20;
    float v366 = v31;
    float32_t v367 = v15[15].f32[0];
    float v365 = _S22;
    short float v350 = _H10;
    do
    {
      uint64_t v57 = v46 + v21;
      uint64_t v358 = v46 + v21;
      uint64_t v359 = v11;
      float v356 = (char *)v48 + v18;
      float v357 = (unsigned __int8 *)v47 + v20;
      if ((int)v360 < 8)
      {
        unint64_t v233 = 0;
        float v232 = v399;
        uint64_t result = (unsigned __int8 *)v47 + v20;
        float v59 = (int8x8_t *)((char *)v48 + v18);
      }
      else
      {
        uint64_t v58 = 0;
        float v59 = (int8x8_t *)((char *)v48 + v18);
        uint64_t result = (unsigned __int8 *)v47 + v20;
        do
        {
          if (v47)
          {
            int8x8_t v60 = *v47++;
            int8x8_t v61 = v60;
            int8x8_t v62 = *(int8x8_t *)result;
            result += 8;
            int8x8_t v63 = v62;
          }
          else
          {
            int8x8_t v61 = 0;
            int8x8_t v63 = 0;
          }
          int8x8_t v64 = *(int8x8_t *)&v399[v58];
          *(int8x8_t *)v65.i8 = vzip1_s8(v64, 0);
          v65.u64[1] = (unint64_t)vzip2_s8(v64, 0);
          float16x8_t v66 = vcvtq_f16_u16(v65);
          int8x16_t v67 = (int8x16_t)vmlaq_f16(v381, v384, v66);
          int8x16_t v68 = (int8x16_t)vmlaq_f16(v380, v382, v66);
          v66.i64[0] = vextq_s8(v67, v67, 8uLL).u64[0];
          *(int16x4_t *)v69.i8 = vuzp1_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v66.i8);
          *(int16x4_t *)v66.i8 = vuzp2_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v66.i8);
          v66.u64[1] = (unint64_t)v63;
          float16x8_t v70 = (float16x8_t)vzip1q_s16((int16x8_t)v66, (int16x8_t)v66);
          v69.u64[1] = (unint64_t)v63;
          float16x8_t v71 = (float16x8_t)vzip1q_s16(v69, v69);
          v66.i64[0] = vextq_s8(v68, v68, 8uLL).u64[0];
          *(float16x4_t *)v66.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v66.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v66.i8));
          v66.u64[1] = (unint64_t)v63;
          float16x8_t v72 = (float16x8_t)vzip1q_s16((int16x8_t)v66, (int16x8_t)v66);
          *(int8x8_t *)v66.i8 = vzip1_s8(*v48, 0);
          v66.u64[1] = (unint64_t)vzip2_s8(*v48, 0);
          *(int8x8_t *)v68.i8 = vzip1_s8(*v59, 0);
          v68.u64[1] = (unint64_t)vzip2_s8(*v59, 0);
          float16x8_t v73 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v66), v386);
          float16x8_t v74 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v68), v386);
          float16x8_t v75 = vmlaq_n_f16(v70, v73, v376);
          float16x8_t v76 = vmlaq_n_f16(v70, v74, v376);
          float16x8_t v77 = vmlaq_n_f16(v72, v73, v376);
          float16x8_t v78 = vmlaq_n_f16(v72, v74, v376);
          float16x8_t v79 = vmlaq_n_f16(v71, v73, v376);
          float16x8_t v80 = vmlaq_n_f16(v71, v74, v376);
          float v406 = v48 + 1;
          float v405 = v47;
          float v404 = v59 + 1;
          float v403 = result;
          uint64_t v402 = v58;
          if (v47)
          {
            *(int8x8_t *)v81.i8 = vzip1_s8(v61, 0);
            v81.u64[1] = (unint64_t)vzip2_s8(v61, 0);
            float16x8_t v82 = vcvtq_f16_u16(v81);
            float16x8_t v83 = (float16x8_t)vdupq_n_s16(0x1C04u);
            float16x8_t v84 = vmulq_f16(v82, v83);
            *(int8x8_t *)v82.i8 = vzip1_s8(v63, 0);
            v82.u64[1] = (unint64_t)vzip2_s8(v63, 0);
            float16x8_t v85 = vmulq_f16(vcvtq_f16_u16((uint16x8_t)v82), v83);
          }
          else
          {
            v84.i64[0] = 0x3C003C003C003C00;
            v84.i64[1] = 0x3C003C003C003C00;
            v85.i64[0] = 0x3C003C003C003C00;
            v85.i64[1] = 0x3C003C003C003C00;
          }
          uint16x8_t v86 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v75, (float16x8_t)0), v56));
          uint32x4_t v87 = vmovl_high_u16(v86);
          uint32x4_t v88 = vmovl_u16(*(uint16x4_t *)v86.i8);
          v89.i16[0] = *(_WORD *)&v33[2 * v88.u32[0]];
          v89.i16[1] = *(_WORD *)&v33[2 * v88.u32[1]];
          v89.i16[2] = *(_WORD *)&v33[2 * v88.u32[2]];
          v89.i16[3] = *(_WORD *)&v33[2 * v88.u32[3]];
          v89.i16[4] = *(_WORD *)&v33[2 * v87.u32[0]];
          v89.i16[5] = *(_WORD *)&v33[2 * v87.u32[1]];
          v89.i16[6] = *(_WORD *)&v33[2 * v87.u32[2]];
          v89.i16[7] = *(_WORD *)&v33[2 * v87.u32[3]];
          uint16x8_t v90 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v77, (float16x8_t)0), v56));
          uint32x4_t v91 = vmovl_high_u16(v90);
          uint32x4_t v92 = vmovl_u16(*(uint16x4_t *)v90.i8);
          v93.i16[0] = *(_WORD *)&v33[2 * v92.u32[0]];
          v93.i16[1] = *(_WORD *)&v33[2 * v92.u32[1]];
          v93.i16[2] = *(_WORD *)&v33[2 * v92.u32[2]];
          v93.i16[3] = *(_WORD *)&v33[2 * v92.u32[3]];
          v93.i16[4] = *(_WORD *)&v33[2 * v91.u32[0]];
          v93.i16[5] = *(_WORD *)&v33[2 * v91.u32[1]];
          v93.i16[6] = *(_WORD *)&v33[2 * v91.u32[2]];
          v93.i16[7] = *(_WORD *)&v33[2 * v91.u32[3]];
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v79, (float16x8_t)0), v56));
          uint32x4_t v95 = vmovl_high_u16(v94);
          uint32x4_t v96 = vmovl_u16(*(uint16x4_t *)v94.i8);
          v97.i16[0] = *(_WORD *)&v33[2 * v96.u32[0]];
          v97.i16[1] = *(_WORD *)&v33[2 * v96.u32[1]];
          v97.i16[2] = *(_WORD *)&v33[2 * v96.u32[2]];
          v97.i16[3] = *(_WORD *)&v33[2 * v96.u32[3]];
          v97.i16[4] = *(_WORD *)&v33[2 * v95.u32[0]];
          v97.i16[5] = *(_WORD *)&v33[2 * v95.u32[1]];
          v97.i16[6] = *(_WORD *)&v33[2 * v95.u32[2]];
          v97.i16[7] = *(_WORD *)&v33[2 * v95.u32[3]];
          uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v76, (float16x8_t)0), v56));
          uint32x4_t v99 = vmovl_high_u16(v98);
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v98.i8);
          v101.i16[0] = *(_WORD *)&v33[2 * v100.u32[0]];
          v101.i16[1] = *(_WORD *)&v33[2 * v100.u32[1]];
          v101.i16[2] = *(_WORD *)&v33[2 * v100.u32[2]];
          v101.i16[3] = *(_WORD *)&v33[2 * v100.u32[3]];
          v101.i16[4] = *(_WORD *)&v33[2 * v99.u32[0]];
          v101.i16[5] = *(_WORD *)&v33[2 * v99.u32[1]];
          v101.i16[6] = *(_WORD *)&v33[2 * v99.u32[2]];
          v101.i16[7] = *(_WORD *)&v33[2 * v99.u32[3]];
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v78, (float16x8_t)0), v56));
          uint32x4_t v103 = vmovl_high_u16(v102);
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v102.i8);
          v105.i16[0] = *(_WORD *)&v33[2 * v104.u32[0]];
          v105.i16[1] = *(_WORD *)&v33[2 * v104.u32[1]];
          v105.i16[2] = *(_WORD *)&v33[2 * v104.u32[2]];
          v105.i16[3] = *(_WORD *)&v33[2 * v104.u32[3]];
          v105.i16[4] = *(_WORD *)&v33[2 * v103.u32[0]];
          v105.i16[5] = *(_WORD *)&v33[2 * v103.u32[1]];
          v105.i16[6] = *(_WORD *)&v33[2 * v103.u32[2]];
          v105.i16[7] = *(_WORD *)&v33[2 * v103.u32[3]];
          uint16x8_t v106 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v80, (float16x8_t)0), v56));
          uint32x4_t v107 = vmovl_high_u16(v106);
          uint32x4_t v108 = vmovl_u16(*(uint16x4_t *)v106.i8);
          v109.i16[0] = *(_WORD *)&v33[2 * v108.u32[0]];
          v109.i16[1] = *(_WORD *)&v33[2 * v108.u32[1]];
          v109.i16[2] = *(_WORD *)&v33[2 * v108.u32[2]];
          v109.i16[3] = *(_WORD *)&v33[2 * v108.u32[3]];
          v109.i16[4] = *(_WORD *)&v33[2 * v107.u32[0]];
          v109.i16[5] = *(_WORD *)&v33[2 * v107.u32[1]];
          v109.i16[6] = *(_WORD *)&v33[2 * v107.u32[2]];
          v109.i16[7] = *(_WORD *)&v33[2 * v107.u32[3]];
          uint16x8_t v110 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, v379), v93, v378), v97, v377), vmaxq_f16(vmaxq_f16(v89, v93), v97), v375), (float16x8_t)0), v56));
          uint32x4_t v111 = vmovl_high_u16(v110);
          float16x8_t v112 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v110.i8);
          v112.i16[0] = *(_WORD *)&v30[2 * v112.u32[0]];
          v112.i16[1] = *(_WORD *)&v30[2 * v112.u32[1]];
          v112.i16[2] = *(_WORD *)&v30[2 * v112.u32[2]];
          v112.i16[3] = *(_WORD *)&v30[2 * v112.u32[3]];
          v112.i16[4] = *(_WORD *)&v30[2 * v111.u32[0]];
          v112.i16[5] = *(_WORD *)&v30[2 * v111.u32[1]];
          v112.i16[6] = *(_WORD *)&v30[2 * v111.u32[2]];
          v112.i16[7] = *(_WORD *)&v30[2 * v111.u32[3]];
          float16x8_t v113 = vmulq_f16(v89, v112);
          float16x8_t v114 = vmulq_f16(v93, v112);
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v101, v379), v105, v378), v109, v377), vmaxq_f16(vmaxq_f16(v101, v105), v109), v375), (float16x8_t)0), v56));
          uint32x4_t v116 = vmovl_u16(*(uint16x4_t *)v115.i8);
          float16x8_t v117 = vmulq_f16(v97, v112);
          float16x8_t v118 = (float16x8_t)vmovl_high_u16(v115);
          uint64_t v119 = v118.u32[0];
          v118.i16[0] = *(_WORD *)&v30[2 * v116.u32[0]];
          float v120 = (__int16 *)&v30[2 * v119];
          float v121 = (__int16 *)&v30[2 * v118.u32[1]];
          float v122 = (__int16 *)&v30[2 * v118.u32[2]];
          float v123 = (__int16 *)&v30[2 * v118.u32[3]];
          v118.i16[1] = *(_WORD *)&v30[2 * v116.u32[1]];
          v118.i16[2] = *(_WORD *)&v30[2 * v116.u32[2]];
          v118.i16[3] = *(_WORD *)&v30[2 * v116.u32[3]];
          v118.i16[4] = *v120;
          v118.i16[5] = *v121;
          v118.i16[6] = *v122;
          v118.i16[7] = *v123;
          float16x8_t v124 = vmulq_f16(v101, v118);
          float16x8_t v125 = vmulq_f16(v105, v118);
          float16x8_t v126 = vmulq_f16(v109, v118);
          unsigned int v5 = v372;
          float16x8_t v127 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v374), v125, v373), v126, *(short float *)&v372);
          float16x8_t v128 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v124, v370), v125, v369), v126, v368);
          float16x8_t v129 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v126, v363), v125, v364), v124, _H10);
          uint16x8_t v130 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v113, v374), v114, v373), v117, *(short float *)&v372), (float16x8_t)0), v56));
          uint32x4_t v131 = vmovl_u16(*(uint16x4_t *)v130.i8);
          uint64_t v401 = v131.u32[1];
          uint64_t v132 = v131.u32[0];
          uint32x4_t v133 = vmovl_high_u16(v130);
          uint64_t v134 = v131.u32[3];
          uint64_t v135 = v131.u32[2];
          uint64_t v136 = v133.u32[1];
          uint64_t v137 = v133.u32[3];
          uint64_t v138 = v133.u32[0];
          uint64_t v139 = v133.u32[2];
          uint16x8_t v140 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v113, v370), v114, v369), v117, v368), (float16x8_t)0), v56));
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v140.i8);
          uint64_t v142 = v141.u32[1];
          uint64_t v143 = v141.u32[0];
          uint32x4_t v144 = vmovl_high_u16(v140);
          uint64_t v145 = v141.u32[3];
          uint64_t v146 = v141.u32[2];
          uint64_t v147 = v144.u32[1];
          uint64_t v148 = v144.u32[0];
          uint64_t v149 = v144.u32[3];
          uint64_t v150 = v144.u32[2];
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v117, v363), v114, v364), v113, _H10), (float16x8_t)0), v56));
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v151.i8);
          uint64_t v153 = v152.u32[1];
          uint64_t v154 = v152.u32[0];
          uint32x4_t v155 = vmovl_high_u16(v151);
          uint64_t v156 = v152.u32[3];
          uint64_t v157 = v152.u32[2];
          uint64_t v158 = v155.u32[1];
          uint64_t v400 = v155.u32[3];
          uint64_t v159 = v155.u32[0];
          uint64_t v160 = v155.u32[2];
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v127, (float16x8_t)0), v56));
          uint32x4_t v162 = vmovl_u16(*(uint16x4_t *)v161.i8);
          uint64_t v163 = v162.u32[1];
          uint64_t v164 = v162.u32[0];
          __int16 v165 = *(_WORD *)&v34[2 * v132];
          __int16 v166 = *(_WORD *)&v34[2 * v401];
          __int16 v167 = *(_WORD *)&v34[2 * v135];
          __int16 v168 = *(_WORD *)&v34[2 * v134];
          __int16 v169 = *(_WORD *)&v34[2 * v138];
          __int16 v170 = *(_WORD *)&v34[2 * v136];
          __int16 v171 = *(_WORD *)&v34[2 * v139];
          __int16 v172 = *(_WORD *)&v34[2 * v137];
          __int16 v173 = *(_WORD *)&v34[2 * v143];
          __int16 v174 = *(_WORD *)&v34[2 * v142];
          __int16 v175 = *(_WORD *)&v34[2 * v146];
          __int16 v176 = *(_WORD *)&v34[2 * v145];
          __int16 v177 = *(_WORD *)&v34[2 * v148];
          __int16 v178 = *(_WORD *)&v34[2 * v147];
          __int16 v179 = *(_WORD *)&v34[2 * v150];
          __int16 v180 = *(_WORD *)&v34[2 * v149];
          __int16 v181 = *(_WORD *)&v34[2 * v154];
          uint32x4_t v182 = vmovl_high_u16(v161);
          uint64_t v183 = v162.u32[3];
          uint64_t v184 = v162.u32[2];
          uint64_t v185 = v182.u32[1];
          uint64_t v186 = v182.u32[0];
          uint64_t v187 = v182.u32[3];
          uint64_t v188 = v182.u32[2];
          uint16x8_t v189 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v128, (float16x8_t)0), v56));
          uint32x4_t v190 = vmovl_u16(*(uint16x4_t *)v189.i8);
          uint64_t v191 = v190.u32[1];
          uint64_t v192 = v190.u32[0];
          __int16 v193 = *(_WORD *)&v34[2 * v153];
          uint32x4_t v194 = vmovl_high_u16(v189);
          uint64_t v195 = v190.u32[3];
          uint64_t v196 = v190.u32[2];
          uint64_t v197 = v194.u32[1];
          uint64_t v198 = v194.u32[0];
          uint64_t v199 = v194.u32[3];
          uint64_t v200 = v194.u32[2];
          uint16x8_t v201 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v129, (float16x8_t)0), v56));
          uint32x4_t v202 = vmovl_u16(*(uint16x4_t *)v201.i8);
          __int16 v203 = *(_WORD *)&v34[2 * v157];
          __int16 v204 = *(_WORD *)&v34[2 * v156];
          __int16 v205 = *(_WORD *)&v34[2 * v159];
          __int16 v206 = *(_WORD *)&v34[2 * v158];
          __int16 v207 = *(_WORD *)&v34[2 * v160];
          uint32x4_t v208 = vmovl_high_u16(v201);
          __int16 v209 = *(_WORD *)&v34[2 * v400];
          __int16 v210 = *(_WORD *)&v34[2 * v164];
          __int16 v211 = *(_WORD *)&v34[2 * v163];
          __int16 v212 = *(_WORD *)&v34[2 * v184];
          __int16 v213 = *(_WORD *)&v34[2 * v183];
          __int16 v214 = *(_WORD *)&v34[2 * v186];
          __int16 v215 = *(_WORD *)&v34[2 * v185];
          __int16 v216 = *(_WORD *)&v34[2 * v188];
          __int16 v217 = *(_WORD *)&v34[2 * v187];
          LOWORD(v55) = *(_WORD *)&v34[2 * v192];
          HIWORD(v55) = *(_WORD *)&v34[2 * v191];
          __int16 v218 = *(_WORD *)&v34[2 * v196];
          __int16 v219 = *(_WORD *)&v34[2 * v195];
          __int16 v220 = *(_WORD *)&v34[2 * v198];
          __int16 v221 = *(_WORD *)&v34[2 * v197];
          __int16 v222 = *(_WORD *)&v34[2 * v200];
          __int16 v223 = *(_WORD *)&v34[2 * v199];
          __int16 v224 = *(_WORD *)&v34[2 * v202.u32[0]];
          __int16 v225 = *(_WORD *)&v34[2 * v202.u32[1]];
          __int16 v226 = *(_WORD *)&v34[2 * v202.u32[2]];
          __int16 v227 = *(_WORD *)&v34[2 * v202.u32[3]];
          __int16 v228 = *(_WORD *)&v34[2 * v208.u32[0]];
          __int16 v229 = *(_WORD *)&v34[2 * v208.u32[1]];
          __int16 v230 = *(_WORD *)&v34[2 * v208.u32[2]];
          __int16 v231 = *(_WORD *)&v34[2 * v208.u32[3]];
          vst4q_s16((__int16 *)v46, *(int16x8x4_t *)(&v84 - 3));
          v46 += 64;
          vst4q_s16((__int16 *)v57, *(int16x8x4_t *)(&v55 - 4));
          v57 += 64;
          uint64_t v58 = v402 + 8;
          int v48 = v406;
          float v31 = v366;
          _S20 = v367;
          _S22 = v365;
          int v47 = v405;
          float v59 = v404;
          uint64_t result = v403;
        }
        while ((int)v402 + 8 < v371);
        float v232 = &v399[v58];
        unint64_t v233 = v360 & 0xFFFFFFF8;
      }
      while (v360 > v233)
      {
        LOBYTE(v55) = v232[1];
        float v234 = (float)LODWORD(v55) - v407;
        unsigned int v235 = LODWORD(v362);
        float v236 = v362 * v234;
        LOBYTE(v235) = v48->i8[0];
        float v237 = _S22 * (float)((float)v235 - v31);
        float v238 = (float)(v362 * v234) + v237;
        float v239 = 8191.0;
        if (v238 <= 8191.0)
        {
          float v239 = (float)(v362 * v234) + v237;
          if (v238 < 0.0) {
            float v239 = 0.0;
          }
        }
        LOBYTE(v238) = *v232;
        float v240 = (float)LODWORD(v238) - v407;
        float v241 = (float)(v361 * v234) + (float)(v240 * v383);
        float v242 = 8191.0;
        if ((float)(v237 + v241) <= 8191.0)
        {
          float v242 = v237 + v241;
          if ((float)(v237 + v241) < 0.0) {
            float v242 = 0.0;
          }
        }
        float v243 = v385 * v240;
        float v244 = (float)(v385 * v240) + v237;
        float v245 = 8191.0;
        if (v244 <= 8191.0)
        {
          float v245 = v244;
          if (v244 < 0.0) {
            float v245 = 0.0;
          }
        }
        LOBYTE(v244) = v48->i8[1];
        float v246 = _S22 * (float)((float)LODWORD(v244) - v31);
        float v247 = 8191.0;
        if ((float)(v236 + v246) <= 8191.0)
        {
          float v247 = v236 + v246;
          if ((float)(v236 + v246) < 0.0) {
            float v247 = 0.0;
          }
        }
        float v248 = 8191.0;
        if ((float)(v241 + v246) <= 8191.0)
        {
          float v248 = v241 + v246;
          if ((float)(v241 + v246) < 0.0) {
            float v248 = 0.0;
          }
        }
        float v249 = v243 + v246;
        float v250 = 8191.0;
        if ((float)(v243 + v246) <= 8191.0)
        {
          float v250 = v243 + v246;
          if (v249 < 0.0) {
            float v250 = 0.0;
          }
        }
        LOBYTE(v249) = v59->i8[0];
        float v251 = _S22 * (float)((float)LODWORD(v249) - v31);
        float v252 = 8191.0;
        if ((float)(v236 + v251) <= 8191.0)
        {
          float v252 = v236 + v251;
          if ((float)(v236 + v251) < 0.0) {
            float v252 = 0.0;
          }
        }
        float v253 = 8191.0;
        if ((float)(v241 + v251) <= 8191.0)
        {
          float v253 = v241 + v251;
          if ((float)(v241 + v251) < 0.0) {
            float v253 = 0.0;
          }
        }
        float v254 = 8191.0;
        if ((float)(v243 + v251) <= 8191.0)
        {
          float v254 = v243 + v251;
          if ((float)(v243 + v251) < 0.0) {
            float v254 = 0.0;
          }
        }
        LOBYTE(v5) = v59->i8[1];
        float v255 = _S22 * (float)((float)v5 - v31);
        float v256 = 8191.0;
        if ((float)(v236 + v255) <= 8191.0)
        {
          float v256 = v236 + v255;
          if ((float)(v236 + v255) < 0.0) {
            float v256 = 0.0;
          }
        }
        float v257 = v241 + v255;
        BOOL v258 = (float)(v241 + v255) <= 8191.0;
        float v259 = 8191.0;
        if (v258)
        {
          float v259 = v257;
          if (v257 < 0.0) {
            float v259 = 0.0;
          }
        }
        float v260 = v243 + v255;
        BOOL v258 = (float)(v243 + v255) <= 8191.0;
        float v261 = 8191.0;
        if (v258)
        {
          float v261 = v260;
          if (v260 < 0.0) {
            float v261 = 0.0;
          }
        }
        if (v47)
        {
          unsigned int v262 = v47->u8[0];
          unsigned int v263 = v47->u8[1];
          int v47 = (int8x8_t *)((char *)v47 + 2);
          unsigned int v264 = *result;
          unsigned int v265 = result[1];
          result += 2;
        }
        else
        {
          unsigned int v262 = 0;
          unsigned int v263 = 0;
          unsigned int v264 = 0;
          unsigned int v265 = 0;
        }
        _H3 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v239, 0.0), 8191.0))];
        __asm { FCVT            S31, H3 }
        _H1 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v242, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v245, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H25 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v247, 0.0), 8191.0))];
        _H26 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v248, 0.0), 8191.0))];
        _H27 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v250, 0.0), 8191.0))];
        _H23 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v252, 0.0), 8191.0))];
        _H15 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v253, 0.0), 8191.0))];
        _H13 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v254, 0.0), 8191.0))];
        _H9 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v256, 0.0), 8191.0))];
        _H10 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v259, 0.0), 8191.0))];
        _H11 = *(_WORD *)&v33[2 * llroundf(fminf(fmaxf(v261, 0.0), 8191.0))];
        float v281 = (float)((float)((float)(v388 * _S1) + (float)(v389 * _S31)) + (float)(v387 * _S2))
             + (float)(_S20 * fmaxf(_S31, fmaxf(_S1, _S2)));
        float v282 = 8191.0;
        if (v281 <= 8191.0)
        {
          float v282 = v281;
          if (v281 < 0.0) {
            float v282 = 0.0;
          }
        }
        __asm
        {
          FCVT            S25, H25
          FCVT            S26, H26
          FCVT            S27, H27
        }
        _H12 = *(_WORD *)&v30[2 * llroundf(v282)];
        float v287 = (float)((float)((float)(v388 * _S26) + (float)(v389 * _S25)) + (float)(v387 * _S27))
             + (float)(_S20 * fmaxf(_S25, fmaxf(_S26, _S27)));
        float v288 = 8191.0;
        if (v287 <= 8191.0)
        {
          float v288 = v287;
          if (v287 < 0.0) {
            float v288 = 0.0;
          }
        }
        __asm
        {
          FCVT            S23, H23
          FCVT            S14, H15
          FCVT            S13, H13
        }
        _H15 = *(_WORD *)&v30[2 * llroundf(v288)];
        float v293 = (float)((float)((float)(v388 * _S14) + (float)(v389 * _S23)) + (float)(v387 * _S13))
             + (float)(_S20 * fmaxf(_S23, fmaxf(_S14, _S13)));
        float v294 = 8191.0;
        if (v293 <= 8191.0)
        {
          float v294 = v293;
          if (v293 < 0.0) {
            float v294 = 0.0;
          }
        }
        __asm
        {
          FCVT            S9, H9
          FCVT            S10, H10
          FCVT            S11, H11
        }
        _H3 = *(_WORD *)&v30[2 * llroundf(v294)];
        float v299 = (float)((float)((float)(v388 * _S10) + (float)(v389 * _S9)) + (float)(v387 * _S11))
             + (float)(_S20 * fmaxf(_S9, fmaxf(_S10, _S11)));
        float v300 = 8191.0;
        if (v299 <= 8191.0)
        {
          float v300 = v299;
          if (v299 < 0.0) {
            float v300 = 0.0;
          }
        }
        __asm { FCVT            S4, H12 }
        float v302 = _S31 * _S4;
        float v303 = _S1 * _S4;
        float v304 = _S2 * _S4;
        __asm { FCVT            S4, H15 }
        float v306 = _S25 * _S4;
        float v307 = _S26 * _S4;
        float v308 = _S27 * _S4;
        __asm { FCVT            S3, H3 }
        float v310 = _S23 * _S3;
        float v311 = _S14 * _S3;
        float v312 = _S13 * _S3;
        _H5 = *(_WORD *)&v30[2 * llroundf(v300)];
        __asm { FCVT            S5, H5 }
        float v315 = _S9 * _S5;
        float v316 = _S10 * _S5;
        float v317 = _S11 * _S5;
        float v318 = (float)((float)(v397 * v303) + (float)(v302 * v398)) + (float)(v304 * v396);
        unsigned int v5 = LODWORD(v395);
        float v319 = (float)((float)(v394 * v303) + (float)(v302 * v395)) + (float)(v304 * v393);
        float v320 = (float)((float)(v391 * v303) + (float)(v302 * v392)) + (float)(v304 * v390);
        float v321 = (float)((float)(v397 * v307) + (float)(v306 * v398)) + (float)(v308 * v396);
        float v322 = (float)((float)(v394 * v307) + (float)(v306 * v395)) + (float)(v308 * v393);
        float v323 = (float)((float)(v391 * v307) + (float)(v306 * v392)) + (float)(v308 * v390);
        float v324 = (float)((float)(v397 * v311) + (float)(v310 * v398)) + (float)(v312 * v396);
        float v325 = (float)((float)(v394 * v311) + (float)(v310 * v395)) + (float)(v312 * v393);
        float v326 = (float)((float)(v391 * v311) + (float)(v310 * v392)) + (float)(v312 * v390);
        float v327 = (float)((float)(v397 * v316) + (float)(v315 * v398)) + (float)(v317 * v396);
        float v328 = (float)((float)(v394 * v316) + (float)(v315 * v395)) + (float)(v317 * v393);
        float v329 = (float)((float)(v391 * v316) + (float)(v315 * v392)) + (float)(v317 * v390);
        LOWORD(v315) = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v319, 0.0), 8191.0))];
        LOWORD(v320) = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v320, 0.0), 8191.0))];
        __int16 v330 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v321, 0.0), 8191.0))];
        __int16 v331 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v322, 0.0), 8191.0))];
        __int16 v332 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v323, 0.0), 8191.0))];
        __int16 v333 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v324, 0.0), 8191.0))];
        __int16 v334 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v325, 0.0), 8191.0))];
        __int16 v335 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v326, 0.0), 8191.0))];
        __int16 v336 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v327, 0.0), 8191.0))];
        __int16 v337 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v328, 0.0), 8191.0))];
        float v55 = fminf(fmaxf(v329, 0.0), 8191.0);
        LOWORD(v55) = *(_WORD *)&v34[2 * llroundf(v55)];
        _S5 = (float)v262 * 0.0039216;
        __asm { FCVT            H5, S5 }
        _S10 = (float)v263 * 0.0039216;
        __asm { FCVT            H10, S10 }
        _S11 = (float)v264 * 0.0039216;
        __asm { FCVT            H11, S11 }
        *(_WORD *)uint64_t v46 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v318, 0.0), 8191.0))];
        *(_WORD *)(v46 + 2) = LOWORD(v315);
        _S27 = (float)v265 * 0.0039216;
        *(_WORD *)(v46 + 4) = LOWORD(v320);
        if (v47) {
          short float v345 = _H5;
        }
        else {
          LOWORD(v345) = COERCE_UNSIGNED_INT(1.0);
        }
        *(short float *)(v46 + 6) = v345;
        *(_WORD *)(v46 + 8) = v330;
        *(_WORD *)(v46 + 10) = v331;
        *(_WORD *)(v46 + 12) = v332;
        if (v47) {
          short float v346 = _H10;
        }
        else {
          LOWORD(v346) = COERCE_UNSIGNED_INT(1.0);
        }
        *(short float *)(v46 + 14) = v346;
        *(_WORD *)uint64_t v57 = v333;
        *(_WORD *)(v57 + 2) = v334;
        __asm { FCVT            H1, S27 }
        *(_WORD *)(v57 + 4) = v335;
        if (_ZF) {
          LOWORD(v349) = COERCE_UNSIGNED_INT(1.0);
        }
        else {
          short float v349 = _H11;
        }
        *(short float *)(v57 + 6) = v349;
        *(_WORD *)(v57 + 8) = v336;
        *(_WORD *)(v57 + 10) = v337;
        *(_WORD *)(v57 + 12) = LOWORD(v55);
        v233 += 2;
        v232 += 2;
        int v48 = (int8x8_t *)((char *)v48 + 2);
        if (_ZF) {
          LOWORD(v55) = COERCE_UNSIGNED_INT(1.0);
        }
        else {
          *(short float *)&float v55 = _H1;
        }
        *(_WORD *)(v57 + 14) = LOWORD(v55);
        float v59 = (int8x8_t *)((char *)v59 + 2);
        v46 += 16;
        v57 += 16;
      }
      uint64_t v18 = v355;
      int v48 = (int8x8_t *)&v356[v355];
      uint64_t v20 = v353;
      v399 += v354;
      int v47 = (int8x8_t *)&v357[v353];
      uint64_t v21 = v352;
      uint64_t v46 = v358 + v352;
      uint64_t v11 = v359 + 2;
      _H10 = v350;
    }
    while (v351 > v359 + 2);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    float v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    float v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v22 = (float)LODWORD(a5);
    float v23 = v20 * *(float *)v13;
    float v183 = v20 * *(float *)(v13 + 16);
    float v184 = v20 * *(float *)(v13 + 8);
    float v181 = v20 * *(float *)(v13 + 28);
    float v182 = v20 * *(float *)(v13 + 20);
    float v24 = *(float *)(v13 + 72);
    float v25 = *(float *)(v13 + 76);
    float v180 = v24;
    float v26 = *(float *)(v13 + 80);
    float v27 = *(float *)(v13 + 84);
    float v28 = *(float *)(v13 + 88);
    float v29 = *(float *)(v13 + 92);
    float v30 = *(float *)(v13 + 96);
    float v31 = *(float *)(v13 + 100);
    uint64_t v32 = v13 + 164;
    uint64_t v33 = v13 + 16548;
    uint64_t v34 = v13 + 32932;
    float v35 = *(float *)(v13 + 104);
    float v36 = *(float *)(v13 + 108);
    float v37 = *(float *)(v13 + 112);
    float v38 = *(float *)(v13 + 116);
    float v39 = *(float *)(v13 + 120);
    uint64_t v40 = *((void *)result + 14);
    uint64_t v41 = (void *)*((void *)result + 16);
    uint64_t v42 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v43 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(*v14 + v16 * v11 + v43);
    uint64_t v44 = v14[2];
    _ZF = v44 == 0;
    uint64_t v45 = (unsigned __int8 *)(v44 + v18 * v11 + v43);
    if (_ZF) {
      uint64_t v46 = 0;
    }
    else {
      uint64_t v46 = v45;
    }
    uint64_t v47 = *v41 + v42 * v19 + 8 * v40;
    if (v11 >= 0) {
      uint64_t v48 = v11;
    }
    else {
      uint64_t v48 = v11 + 1;
    }
    uint64_t v49 = v14[1] + v17 * (v48 >> 1) + v43;
    float v186 = (float)LODWORD(a5);
    float v187 = v21;
    float v185 = v23;
    do
    {
      uint64_t v50 = v47 + v19;
      float v51 = &v46[v18];
      float v52 = &result[v16];
      if (v10)
      {
        unint64_t v53 = 0;
        uint64_t v54 = v47 + v19;
        float v55 = &result[v16];
        float16x8_t v56 = &v46[v18];
        do
        {
          LOBYTE(v24) = *(unsigned char *)(v49 + v53 + 1);
          float v57 = (float)LODWORD(v24) - v22;
          unsigned int v58 = LODWORD(v184);
          float v59 = v184 * v57;
          LOBYTE(v58) = *result;
          float v60 = v23 * (float)((float)v58 - v21);
          float v61 = (float)(v184 * v57) + v60;
          float v62 = 8191.0;
          if (v61 <= 8191.0)
          {
            float v62 = (float)(v184 * v57) + v60;
            if (v61 < 0.0) {
              float v62 = 0.0;
            }
          }
          LOBYTE(v61) = *(unsigned char *)(v49 + v53);
          float v63 = (float)LODWORD(v61) - v22;
          float v64 = (float)(v182 * v57) + (float)(v63 * v183);
          float v65 = 8191.0;
          if ((float)(v60 + v64) <= 8191.0)
          {
            float v65 = v60 + v64;
            if ((float)(v60 + v64) < 0.0) {
              float v65 = 0.0;
            }
          }
          float v66 = v181 * v63;
          float v67 = (float)(v181 * v63) + v60;
          float v68 = 8191.0;
          if (v67 <= 8191.0)
          {
            float v68 = v67;
            if (v67 < 0.0) {
              float v68 = 0.0;
            }
          }
          LOBYTE(v67) = result[1];
          float v69 = v23 * (float)((float)LODWORD(v67) - v21);
          float v70 = 8191.0;
          if ((float)(v59 + v69) <= 8191.0)
          {
            float v70 = v59 + v69;
            if ((float)(v59 + v69) < 0.0) {
              float v70 = 0.0;
            }
          }
          float v71 = 8191.0;
          if ((float)(v64 + v69) <= 8191.0)
          {
            float v71 = v64 + v69;
            if ((float)(v64 + v69) < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = v66 + v69;
          float v73 = 8191.0;
          if (v72 <= 8191.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }
          LOBYTE(v72) = *v55;
          float v74 = (float)LODWORD(v72) - v21;
          float v75 = v23 * v74;
          float v76 = 8191.0;
          if ((float)(v59 + (float)(v23 * v74)) <= 8191.0)
          {
            float v76 = v59 + (float)(v23 * v74);
            if (v76 < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = 8191.0;
          if ((float)(v64 + v75) <= 8191.0)
          {
            float v77 = v64 + v75;
            if ((float)(v64 + v75) < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = v66 + v75;
          float v79 = 8191.0;
          if (v78 <= 8191.0)
          {
            float v79 = v78;
            if (v78 < 0.0) {
              float v79 = 0.0;
            }
          }
          LOBYTE(v74) = v55[1];
          float v80 = v23 * (float)((float)LODWORD(v74) - v21);
          float v81 = v59 + v80;
          BOOL v82 = (float)(v59 + v80) <= 8191.0;
          float v83 = 8191.0;
          if (v82)
          {
            float v83 = v81;
            if (v81 < 0.0) {
              float v83 = 0.0;
            }
          }
          float v84 = v64 + v80;
          BOOL v82 = (float)(v64 + v80) <= 8191.0;
          float v85 = 8191.0;
          if (v82)
          {
            float v85 = v84;
            if (v84 < 0.0) {
              float v85 = 0.0;
            }
          }
          float v86 = v66 + v80;
          float v87 = 8191.0;
          if (v86 <= 8191.0)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          if (v46)
          {
            unsigned int v88 = *v46;
            unsigned int v89 = v46[1];
            v46 += 2;
            unsigned int v90 = *v56;
            unsigned int v91 = v56[1];
            v56 += 2;
          }
          else
          {
            unsigned int v88 = 0;
            unsigned int v89 = 0;
            unsigned int v90 = 0;
            unsigned int v91 = 0;
          }
          _S1 = fmaxf(v62, 0.0);
          float v93 = 8191.0;
          LOWORD(_S1) = *(_WORD *)(v32 + 2 * llroundf(fminf(_S1, 8191.0)));
          __asm { FCVT            S4, H1 }
          LOWORD(_S1) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v65, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          LOWORD(_S1) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v68, 0.0), 8191.0)));
          __asm { FCVT            S9, H1 }
          _H1 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v73, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v85, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          float v109 = fmaxf(_S4, fmaxf(_S8, _S9));
          float v110 = (float)((float)((float)(v37 * _S8) + (float)(v36 * _S4)) + (float)(v38 * _S9)) + (float)(v39 * v109);
          float v111 = 8191.0;
          if (v110 <= 8191.0)
          {
            float v111 = (float)((float)((float)(v37 * _S8) + (float)(v36 * _S4)) + (float)(v38 * _S9)) + (float)(v39 * v109);
            if (v110 < 0.0) {
              float v111 = 0.0;
            }
          }
          __asm
          {
            FCVT            S5, H1
            FCVT            S6, H3
            FCVT            S7, H12
          }
          _H12 = *(_WORD *)(v33 + 2 * llroundf(v111));
          float v116 = (float)((float)((float)(v37 * _S6) + (float)(v36 * _S5)) + (float)(v38 * _S7))
               + (float)(v39 * fmaxf(_S5, fmaxf(_S6, _S7)));
          float v117 = 8191.0;
          if (v116 <= 8191.0)
          {
            float v117 = v116;
            if (v116 < 0.0) {
              float v117 = 0.0;
            }
          }
          __asm
          {
            FCVT            S14, H14
            FCVT            S15, H2
            FCVT            S2, H30
          }
          _H30 = *(_WORD *)(v33 + 2 * llroundf(v117));
          float v122 = fmaxf(_S14, fmaxf(_S15, _S2));
          float v123 = (float)((float)((float)(v37 * _S15) + (float)(v36 * _S14)) + (float)(v38 * _S2)) + (float)(v39 * v122);
          float v124 = 8191.0;
          if (v123 <= 8191.0)
          {
            float v124 = (float)((float)((float)(v37 * _S15) + (float)(v36 * _S14)) + (float)(v38 * _S2))
                 + (float)(v39 * v122);
            if (v123 < 0.0) {
              float v124 = 0.0;
            }
          }
          __asm
          {
            FCVT            S1, H10
            FCVT            S3, H11
            FCVT            S10, H13
          }
          _H11 = *(_WORD *)(v33 + 2 * llroundf(v124));
          float v129 = fmaxf(_S1, fmaxf(_S3, _S10));
          float v130 = (float)((float)((float)(v37 * _S3) + (float)(v36 * _S1)) + (float)(v38 * _S10)) + (float)(v39 * v129);
          if (v130 <= 8191.0)
          {
            float v93 = (float)((float)((float)(v37 * _S3) + (float)(v36 * _S1)) + (float)(v38 * _S10)) + (float)(v39 * v129);
            if (v130 < 0.0) {
              float v93 = 0.0;
            }
          }
          result += 2;
          v55 += 2;
          __asm { FCVT            S16, H12 }
          float v132 = _S4 * _S16;
          float v133 = _S8 * _S16;
          float v134 = _S9 * _S16;
          __asm { FCVT            S30, H30 }
          float v136 = _S5 * _S30;
          float v137 = _S6 * _S30;
          float v138 = _S7 * _S30;
          __asm { FCVT            S30, H11 }
          float v140 = _S14 * _S30;
          float v141 = _S15 * _S30;
          float v142 = _S2 * _S30;
          LOWORD(_S30) = *(_WORD *)(v33 + 2 * llroundf(v93));
          __asm { FCVT            S30, H30 }
          float v144 = _S1 * _S30;
          float v145 = _S3 * _S30;
          float v146 = _S10 * _S30;
          float v147 = (float)((float)(v25 * v133) + (float)(v132 * v180)) + (float)(v134 * v26);
          float v148 = (float)((float)(v28 * v133) + (float)(v132 * v27)) + (float)(v134 * v29);
          float v149 = (float)((float)(v31 * v133) + (float)(v132 * v30)) + (float)(v134 * v35);
          float v150 = (float)((float)(v25 * v137) + (float)(v136 * v180)) + (float)(v138 * v26);
          float v151 = (float)((float)(v28 * v137) + (float)(v136 * v27)) + (float)(v138 * v29);
          float v152 = (float)((float)(v31 * v137) + (float)(v136 * v30)) + (float)(v138 * v35);
          float v153 = (float)((float)(v25 * v141) + (float)(v140 * v180)) + (float)(v142 * v26);
          float v154 = (float)((float)(v28 * v141) + (float)(v140 * v27)) + (float)(v142 * v29);
          float v155 = (float)((float)(v31 * v141) + (float)(v140 * v30)) + (float)(v142 * v35);
          float v156 = (float)((float)(v25 * v145) + (float)(v144 * v180)) + (float)(v146 * v26);
          float v157 = (float)((float)(v28 * v145) + (float)(v144 * v27)) + (float)(v146 * v29);
          float v158 = (float)(v31 * v145) + (float)(v144 * v30);
          LOWORD(v145) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v147, 0.0), 8191.0)));
          float v159 = v158 + (float)(v146 * v35);
          LOWORD(v146) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v148, 0.0), 8191.0)));
          LOWORD(v149) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          __int16 v160 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v150, 0.0), 8191.0)));
          __int16 v161 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v151, 0.0), 8191.0)));
          __int16 v162 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          __int16 v163 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v153, 0.0), 8191.0)));
          __int16 v164 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v154, 0.0), 8191.0)));
          __int16 v165 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v155, 0.0), 8191.0)));
          __int16 v166 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v156, 0.0), 8191.0)));
          __int16 v167 = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v157, 0.0), 8191.0)));
          float v24 = fminf(fmaxf(v159, 0.0), 8191.0);
          LOWORD(v24) = *(_WORD *)(v34 + 2 * llroundf(v24));
          _S10 = (float)v88 * 0.0039216;
          __asm { FCVT            H10, S10 }
          _S12 = (float)v89 * 0.0039216;
          __asm { FCVT            H12, S12 }
          _S13 = (float)v90 * 0.0039216;
          __asm { FCVT            H13, S13 }
          *(_WORD *)uint64_t v47 = LOWORD(v145);
          *(_WORD *)(v47 + 2) = LOWORD(v146);
          _S3 = (float)v91 * 0.0039216;
          *(_WORD *)(v47 + 4) = LOWORD(v149);
          if (v46) {
            short float v175 = _H10;
          }
          else {
            LOWORD(v175) = COERCE_UNSIGNED_INT(1.0);
          }
          *(short float *)(v47 + 6) = v175;
          *(_WORD *)(v47 + 8) = v160;
          *(_WORD *)(v47 + 10) = v161;
          *(_WORD *)(v47 + 12) = v162;
          if (v46) {
            short float v176 = _H12;
          }
          else {
            LOWORD(v176) = COERCE_UNSIGNED_INT(1.0);
          }
          *(short float *)(v47 + 14) = v176;
          *(_WORD *)uint64_t v54 = v163;
          *(_WORD *)(v54 + 2) = v164;
          __asm { FCVT            H3, S3 }
          v47 += 16;
          *(_WORD *)(v54 + 4) = v165;
          if (_ZF) {
            LOWORD(v179) = COERCE_UNSIGNED_INT(1.0);
          }
          else {
            short float v179 = _H13;
          }
          *(short float *)(v54 + 6) = v179;
          *(_WORD *)(v54 + 8) = v166;
          *(_WORD *)(v54 + 10) = v167;
          *(_WORD *)(v54 + 12) = LOWORD(v24);
          if (_ZF) {
            LOWORD(v24) = COERCE_UNSIGNED_INT(1.0);
          }
          else {
            *(short float *)&float v24 = _H3;
          }
          *(_WORD *)(v54 + 14) = LOWORD(v24);
          v54 += 16;
          v53 += 2;
          float v22 = v186;
          float v21 = v187;
          float v23 = v185;
        }
        while (v10 > v53);
      }
      uint64_t result = &v52[v16];
      v49 += v17;
      uint64_t v46 = &v51[v18];
      uint64_t v47 = v50 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_RGhA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44);
    uint64_t v12 = v11 + 2 * v7;
    uint64_t v13 = v11 + 2 * v8;
    uint64_t v14 = (float32x2_t *)*((void *)result + 19);
    uint64_t v15 = (uint64_t *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    unsigned int v21 = v14[17].u16[2];
    unsigned int v22 = v14[17].u16[3];
    v2.i32[0] = v14->i32[0];
    v23.i32[0] = v14[3].i32[1];
    unint64_t v279 = v13 - v12;
    uint64_t v24 = (char *)&v14[20] + 4;
    v3.f32[0] = 8191.0 / (float)v14[16].u32[0];
    float v25 = (float)v21;
    float v26 = (float)v22;
    _S20 = v3.f32[0] * v14->f32[0];
    uint64_t v28 = (char *)&v14[2068] + 4;
    __asm { FCVT            H8, S20 }
    *(short float *)v2.i16 = (short float)v21;
    float16x8_t v301 = (float16x8_t)vdupq_lane_s16(v2, 0);
    v23.i32[1] = v14[1].i32[0];
    *(float32x2_t *)v4.f32 = vmul_n_f32(v23, v3.f32[0]);
    short float v33 = -(short float)v22;
    *(float32x2_t *)v3.f32 = vmul_n_f32(v14[2], v3.f32[0]);
    float16x8_t v300 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v4), 0);
    float16x8_t v297 = vmulq_n_f16(v300, v33);
    float16x8_t v298 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v3), 0);
    float v304 = v14[9].f32[0];
    __asm { FCVT            H0, S0 }
    short float v295 = _H0;
    float16x8_t v296 = vmulq_n_f16(v298, v33);
    float v303 = v14[9].f32[1];
    __asm { FCVT            H0, S1 }
    short float v293 = _H0;
    float v294 = v14[10].f32[0];
    __asm { FCVT            H0, S2 }
    short float v291 = _H0;
    float v292 = v14[10].f32[1];
    __asm { FCVT            H0, S3 }
    short float v289 = _H0;
    float v290 = v14[11].f32[0];
    __asm { FCVT            H0, S4 }
    short float v287 = _H0;
    float v288 = v14[11].f32[1];
    __asm { FCVT            H0, S5 }
    short float v285 = _H0;
    float v286 = v14[12].f32[0];
    __asm { FCVT            H0, S6 }
    short float v305 = _H0;
    float v284 = v14[12].f32[1];
    __asm { FCVT            H0, S7 }
    short float v283 = _H0;
    float v280 = v14[13].f32[0];
    __asm { FCVT            H0, S16 }
    short float v282 = _H0;
    uint64_t v44 = v15[1];
    uint64_t v43 = v15[2];
    if (v12 >= 0) {
      uint64_t v45 = v12;
    }
    else {
      uint64_t v45 = v12 + 1;
    }
    uint64_t v46 = *v15;
    uint64_t v47 = v44 + v18 * (v45 >> 1);
    uint64_t v48 = *(void *)(result + 36);
    uint64_t v49 = **((void **)result + 16)
        + v20 * (*((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6))
        + 8 * *((void *)result + 14);
    if (v43) {
      uint64_t v50 = (int8x8_t *)(v43 + v19 * v12 + v48);
    }
    else {
      uint64_t v50 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v47 + v48);
    float v51 = (int8x8_t *)(v46 + v17 * v12 + v48);
    _Q0.i32[0] = v3.i32[1];
    float v281 = v3.f32[1];
    float v299 = v3.f32[0];
    v53.i64[0] = 0x9000900090009000;
    v53.i64[1] = 0x9000900090009000;
    float v302 = v26;
    do
    {
      uint64_t v54 = (char *)v51 + v17;
      uint64_t v55 = v49 + v20;
      float16x8_t v56 = (unsigned __int8 *)v50 + v19;
      if ((int)v10 < 8)
      {
        unint64_t v183 = 0;
        float v182 = result;
        float v60 = (unsigned __int8 *)v50 + v19;
        float v59 = (int8x8_t *)((char *)v51 + v17);
        uint64_t v58 = v49 + v20;
      }
      else
      {
        uint64_t v57 = 0;
        uint64_t v58 = v49 + v20;
        float v59 = (int8x8_t *)((char *)v51 + v17);
        float v60 = (unsigned __int8 *)v50 + v19;
        do
        {
          if (v50)
          {
            int8x8_t v61 = *v50++;
            int8x8_t v62 = v61;
            int8x8_t v63 = *(int8x8_t *)v60;
            v60 += 8;
            int8x8_t v64 = v63;
          }
          else
          {
            int8x8_t v62 = 0;
            int8x8_t v64 = 0;
          }
          int8x8_t v65 = *(int8x8_t *)&result[v57];
          *(int8x8_t *)v66.i8 = vzip1_s8(v65, 0);
          v66.u64[1] = (unint64_t)vzip2_s8(v65, 0);
          float16x8_t v67 = vcvtq_f16_u16(v66);
          int8x16_t v68 = (int8x16_t)vmlaq_f16(v297, v300, v67);
          int8x16_t v69 = (int8x16_t)vmlaq_f16(v296, v298, v67);
          v67.i64[0] = vextq_s8(v68, v68, 8uLL).u64[0];
          *(int16x4_t *)v70.i8 = vuzp1_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v67.i8);
          *(int16x4_t *)v67.i8 = vuzp2_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v67.i8);
          v67.i64[1] = v298.i64[0];
          float16x8_t v71 = (float16x8_t)vzip1q_s16((int16x8_t)v67, (int16x8_t)v67);
          v70.i64[1] = v298.i64[0];
          float16x8_t v72 = (float16x8_t)vzip1q_s16(v70, v70);
          v67.i64[0] = vextq_s8(v69, v69, 8uLL).u64[0];
          *(float16x4_t *)v67.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v67.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v67.i8));
          int8x8_t v73 = *v51++;
          float16x8_t v74 = (float16x8_t)vzip1q_s16((int16x8_t)v67, (int16x8_t)v67);
          *(int8x8_t *)v69.i8 = vzip1_s8(v73, 0);
          v69.u64[1] = (unint64_t)vzip2_s8(v73, 0);
          int8x8_t v75 = *v59++;
          *(int8x8_t *)v70.i8 = vzip1_s8(v75, 0);
          v70.u64[1] = (unint64_t)vzip2_s8(v75, 0);
          float16x8_t v76 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v69), v301);
          float16x8_t v77 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v70), v301);
          float16x8_t v78 = vmlaq_n_f16(v71, v76, _H8);
          float16x8_t v79 = vmlaq_n_f16(v71, v77, _H8);
          float16x8_t v80 = vmlaq_n_f16(v74, v76, _H8);
          float16x8_t v81 = vmlaq_n_f16(v74, v77, _H8);
          float16x8_t v82 = vmlaq_n_f16(v72, v76, _H8);
          float16x8_t v83 = vmlaq_n_f16(v72, v77, _H8);
          if (v50)
          {
            *(int8x8_t *)v84.i8 = vzip1_s8(v62, 0);
            v84.u64[1] = (unint64_t)vzip2_s8(v62, 0);
            float16x8_t v85 = (float16x8_t)vdupq_n_s16(0x1C04u);
            float16x8_t v86 = vmulq_f16(vcvtq_f16_u16(v84), v85);
            *(int8x8_t *)v87.i8 = vzip1_s8(v64, 0);
            v87.u64[1] = (unint64_t)vzip2_s8(v64, 0);
            float16x8_t v88 = vmulq_f16(vcvtq_f16_u16(v87), v85);
          }
          else
          {
            v86.i64[0] = 0x3C003C003C003C00;
            v86.i64[1] = 0x3C003C003C003C00;
            v88.i64[0] = 0x3C003C003C003C00;
            v88.i64[1] = 0x3C003C003C003C00;
          }
          uint16x8_t v89 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v78, (float16x8_t)0), v53));
          uint32x4_t v90 = vmovl_high_u16(v89);
          float16x8_t v91 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v89.i8);
          v91.i16[0] = *(_WORD *)&v24[2 * v91.u32[0]];
          v91.i16[1] = *(_WORD *)&v24[2 * v91.u32[1]];
          v91.i16[2] = *(_WORD *)&v24[2 * v91.u32[2]];
          v91.i16[3] = *(_WORD *)&v24[2 * v91.u32[3]];
          v91.i16[4] = *(_WORD *)&v24[2 * v90.u32[0]];
          v91.i16[5] = *(_WORD *)&v24[2 * v90.u32[1]];
          v91.i16[6] = *(_WORD *)&v24[2 * v90.u32[2]];
          v91.i16[7] = *(_WORD *)&v24[2 * v90.u32[3]];
          uint16x8_t v92 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v80, (float16x8_t)0), v53));
          uint32x4_t v93 = vmovl_high_u16(v92);
          uint32x4_t v94 = vmovl_u16(*(uint16x4_t *)v92.i8);
          v95.i16[0] = *(_WORD *)&v24[2 * v94.u32[0]];
          v95.i16[1] = *(_WORD *)&v24[2 * v94.u32[1]];
          v95.i16[2] = *(_WORD *)&v24[2 * v94.u32[2]];
          v95.i16[3] = *(_WORD *)&v24[2 * v94.u32[3]];
          v95.i16[4] = *(_WORD *)&v24[2 * v93.u32[0]];
          v95.i16[5] = *(_WORD *)&v24[2 * v93.u32[1]];
          v95.i16[6] = *(_WORD *)&v24[2 * v93.u32[2]];
          v95.i16[7] = *(_WORD *)&v24[2 * v93.u32[3]];
          uint16x8_t v96 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v82, (float16x8_t)0), v53));
          uint32x4_t v97 = vmovl_high_u16(v96);
          uint32x4_t v98 = vmovl_u16(*(uint16x4_t *)v96.i8);
          v99.i16[0] = *(_WORD *)&v24[2 * v98.u32[0]];
          v99.i16[1] = *(_WORD *)&v24[2 * v98.u32[1]];
          v99.i16[2] = *(_WORD *)&v24[2 * v98.u32[2]];
          v99.i16[3] = *(_WORD *)&v24[2 * v98.u32[3]];
          v99.i16[4] = *(_WORD *)&v24[2 * v97.u32[0]];
          v99.i16[5] = *(_WORD *)&v24[2 * v97.u32[1]];
          v99.i16[6] = *(_WORD *)&v24[2 * v97.u32[2]];
          v99.i16[7] = *(_WORD *)&v24[2 * v97.u32[3]];
          uint16x8_t v100 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v79, (float16x8_t)0), v53));
          uint32x4_t v101 = vmovl_high_u16(v100);
          uint32x4_t v102 = vmovl_u16(*(uint16x4_t *)v100.i8);
          v103.i16[0] = *(_WORD *)&v24[2 * v102.u32[0]];
          v103.i16[1] = *(_WORD *)&v24[2 * v102.u32[1]];
          v103.i16[2] = *(_WORD *)&v24[2 * v102.u32[2]];
          v103.i16[3] = *(_WORD *)&v24[2 * v102.u32[3]];
          v103.i16[4] = *(_WORD *)&v24[2 * v101.u32[0]];
          v103.i16[5] = *(_WORD *)&v24[2 * v101.u32[1]];
          v103.i16[6] = *(_WORD *)&v24[2 * v101.u32[2]];
          v103.i16[7] = *(_WORD *)&v24[2 * v101.u32[3]];
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v81, (float16x8_t)0), v53));
          uint32x4_t v105 = vmovl_high_u16(v104);
          uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v104.i8);
          v107.i16[0] = *(_WORD *)&v24[2 * v106.u32[0]];
          v107.i16[1] = *(_WORD *)&v24[2 * v106.u32[1]];
          v107.i16[2] = *(_WORD *)&v24[2 * v106.u32[2]];
          v107.i16[3] = *(_WORD *)&v24[2 * v106.u32[3]];
          v107.i16[4] = *(_WORD *)&v24[2 * v105.u32[0]];
          v107.i16[5] = *(_WORD *)&v24[2 * v105.u32[1]];
          v107.i16[6] = *(_WORD *)&v24[2 * v105.u32[2]];
          v107.i16[7] = *(_WORD *)&v24[2 * v105.u32[3]];
          uint16x8_t v108 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v83, (float16x8_t)0), v53));
          uint32x4_t v109 = vmovl_high_u16(v108);
          float16x8_t v110 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v108.i8);
          v110.i16[0] = *(_WORD *)&v24[2 * v110.u32[0]];
          v110.i16[1] = *(_WORD *)&v24[2 * v110.u32[1]];
          v110.i16[2] = *(_WORD *)&v24[2 * v110.u32[2]];
          v110.i16[3] = *(_WORD *)&v24[2 * v110.u32[3]];
          v110.i16[4] = *(_WORD *)&v24[2 * v109.u32[0]];
          v110.i16[5] = *(_WORD *)&v24[2 * v109.u32[1]];
          v110.i16[6] = *(_WORD *)&v24[2 * v109.u32[2]];
          v110.i16[7] = *(_WORD *)&v24[2 * v109.u32[3]];
          float16x8_t v111 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v91, v295), v95, v293), v99, v291);
          float16x8_t v112 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v91, v289), v95, v287), v99, v285);
          float16x8_t v113 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v99, v282), v95, v283), v91, v305);
          float16x8_t v114 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v103, v295), v107, v293), v110, v291);
          float16x8_t v115 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v103, v289), v107, v287), v110, v285);
          float16x8_t v116 = vmlaq_n_f16(vmulq_n_f16(v110, v282), v107, v283);
          uint16x8_t v117 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v111, (float16x8_t)0), v53));
          uint32x4_t v118 = vmovl_high_u16(v117);
          uint32x4_t v119 = vmovl_u16(*(uint16x4_t *)v117.i8);
          __int16 v120 = *(_WORD *)&v28[2 * v119.u32[0]];
          __int16 v121 = *(_WORD *)&v28[2 * v119.u32[1]];
          __int16 v122 = *(_WORD *)&v28[2 * v119.u32[2]];
          __int16 v123 = *(_WORD *)&v28[2 * v119.u32[3]];
          __int16 v124 = *(_WORD *)&v28[2 * v118.u32[0]];
          __int16 v125 = *(_WORD *)&v28[2 * v118.u32[1]];
          __int16 v126 = *(_WORD *)&v28[2 * v118.u32[2]];
          __int16 v127 = *(_WORD *)&v28[2 * v118.u32[3]];
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v112, (float16x8_t)0), v53));
          uint32x4_t v129 = vmovl_high_u16(v128);
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v128.i8);
          __int16 v131 = *(_WORD *)&v28[2 * v130.u32[0]];
          __int16 v132 = *(_WORD *)&v28[2 * v130.u32[1]];
          __int16 v133 = *(_WORD *)&v28[2 * v130.u32[2]];
          __int16 v134 = *(_WORD *)&v28[2 * v130.u32[3]];
          __int16 v135 = *(_WORD *)&v28[2 * v129.u32[0]];
          __int16 v136 = *(_WORD *)&v28[2 * v129.u32[1]];
          __int16 v137 = *(_WORD *)&v28[2 * v129.u32[2]];
          __int16 v138 = *(_WORD *)&v28[2 * v129.u32[3]];
          uint16x8_t v139 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v53));
          uint32x4_t v140 = vmovl_high_u16(v139);
          uint32x4_t v141 = vmovl_u16(*(uint16x4_t *)v139.i8);
          __int16 v142 = *(_WORD *)&v28[2 * v141.u32[0]];
          __int16 v143 = *(_WORD *)&v28[2 * v141.u32[1]];
          __int16 v144 = *(_WORD *)&v28[2 * v141.u32[2]];
          __int16 v145 = *(_WORD *)&v28[2 * v141.u32[3]];
          __int16 v146 = *(_WORD *)&v28[2 * v140.u32[0]];
          __int16 v147 = *(_WORD *)&v28[2 * v140.u32[1]];
          __int16 v148 = *(_WORD *)&v28[2 * v140.u32[2]];
          __int16 v149 = *(_WORD *)&v28[2 * v140.u32[3]];
          uint16x8_t v150 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v53));
          uint32x4_t v151 = vmovl_high_u16(v150);
          uint32x4_t v152 = vmovl_u16(*(uint16x4_t *)v150.i8);
          __int16 v153 = *(_WORD *)&v28[2 * v152.u32[0]];
          __int16 v154 = *(_WORD *)&v28[2 * v152.u32[1]];
          __int16 v155 = *(_WORD *)&v28[2 * v152.u32[2]];
          __int16 v156 = *(_WORD *)&v28[2 * v152.u32[3]];
          __int16 v157 = *(_WORD *)&v28[2 * v151.u32[0]];
          __int16 v158 = *(_WORD *)&v28[2 * v151.u32[1]];
          __int16 v159 = *(_WORD *)&v28[2 * v151.u32[2]];
          __int16 v160 = *(_WORD *)&v28[2 * v151.u32[3]];
          uint16x8_t v161 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v53));
          uint32x4_t v162 = vmovl_high_u16(v161);
          uint32x4_t v163 = vmovl_u16(*(uint16x4_t *)v161.i8);
          __int16 v164 = *(_WORD *)&v28[2 * v163.u32[0]];
          __int16 v165 = *(_WORD *)&v28[2 * v163.u32[1]];
          __int16 v166 = *(_WORD *)&v28[2 * v163.u32[2]];
          __int16 v167 = *(_WORD *)&v28[2 * v163.u32[3]];
          __int16 v168 = *(_WORD *)&v28[2 * v162.u32[0]];
          __int16 v169 = *(_WORD *)&v28[2 * v162.u32[1]];
          __int16 v170 = *(_WORD *)&v28[2 * v162.u32[2]];
          __int16 v171 = *(_WORD *)&v28[2 * v162.u32[3]];
          uint16x8_t v172 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(v116, v103, v305), (float16x8_t)0), v53));
          uint32x4_t v173 = vmovl_high_u16(v172);
          _Q0 = vmovl_u16(*(uint16x4_t *)v172.i8);
          __int16 v174 = *(_WORD *)&v28[2 * _Q0.u32[0]];
          __int16 v175 = *(_WORD *)&v28[2 * _Q0.u32[1]];
          __int16 v176 = *(_WORD *)&v28[2 * _Q0.u32[2]];
          __int16 v177 = *(_WORD *)&v28[2 * _Q0.u32[3]];
          __int16 v178 = *(_WORD *)&v28[2 * v173.u32[0]];
          __int16 v179 = *(_WORD *)&v28[2 * v173.u32[1]];
          __int16 v180 = *(_WORD *)&v28[2 * v173.u32[2]];
          __int16 v181 = *(_WORD *)&v28[2 * v173.u32[3]];
          vst4q_s16((__int16 *)v49, *(int16x8x4_t *)(&v86 - 3));
          v49 += 64;
          vst4q_s16((__int16 *)v58, *(int16x8x4_t *)(&v88 - 3));
          v58 += 64;
          v57 += 8;
          float v26 = v302;
        }
        while ((int)v57 < (int)v10 - 7);
        float v182 = &result[v57];
        unint64_t v183 = v10 & 0xFFFFFFF8;
      }
      while (v10 > v183)
      {
        _Q0.i8[0] = v182[1];
        float v184 = (float)_Q0.u32[0] - v26;
        unsigned int v185 = v4.u32[1];
        float v186 = v4.f32[1] * v184;
        LOBYTE(v185) = v51->i8[0];
        float v187 = (float)v185 - v25;
        float v188 = _S20 * v187;
        float v189 = (float)(v4.f32[1] * v184) + (float)(_S20 * v187);
        float v190 = 8191.0;
        if (v189 <= 8191.0)
        {
          float v190 = (float)(v4.f32[1] * v184) + (float)(_S20 * v187);
          if (v189 < 0.0) {
            float v190 = 0.0;
          }
        }
        LOBYTE(v187) = *v182;
        float v191 = (float)LODWORD(v187) - v26;
        float v192 = (float)(v281 * v184) + (float)(v191 * v299);
        float v193 = 8191.0;
        if ((float)(v188 + v192) <= 8191.0)
        {
          float v193 = v188 + v192;
          if ((float)(v188 + v192) < 0.0) {
            float v193 = 0.0;
          }
        }
        unsigned int v194 = v4.i32[0];
        float v195 = v4.f32[0] * v191;
        float v196 = (float)(v4.f32[0] * v191) + v188;
        float v197 = 8191.0;
        if (v196 <= 8191.0)
        {
          float v197 = v196;
          if (v196 < 0.0) {
            float v197 = 0.0;
          }
        }
        LOBYTE(v194) = v51->i8[1];
        float v198 = (float)v194 - v25;
        float v199 = _S20 * v198;
        float v200 = v186 + (float)(_S20 * v198);
        float v201 = 8191.0;
        if (v200 <= 8191.0)
        {
          float v201 = v186 + (float)(_S20 * v198);
          if (v200 < 0.0) {
            float v201 = 0.0;
          }
        }
        float v202 = 8191.0;
        if ((float)(v192 + v199) <= 8191.0)
        {
          float v202 = v192 + v199;
          if ((float)(v192 + v199) < 0.0) {
            float v202 = 0.0;
          }
        }
        float v203 = v195 + v199;
        float v204 = 8191.0;
        if (v203 <= 8191.0)
        {
          float v204 = v203;
          if (v203 < 0.0) {
            float v204 = 0.0;
          }
        }
        LOBYTE(v198) = v59->i8[0];
        float v205 = _S20 * (float)((float)LODWORD(v198) - v25);
        float v206 = v186 + v205;
        float v207 = 8191.0;
        if ((float)(v186 + v205) <= 8191.0)
        {
          float v207 = v186 + v205;
          if (v206 < 0.0) {
            float v207 = 0.0;
          }
        }
        float v208 = 8191.0;
        if ((float)(v192 + v205) <= 8191.0)
        {
          float v208 = v192 + v205;
          if ((float)(v192 + v205) < 0.0) {
            float v208 = 0.0;
          }
        }
        float v209 = v195 + v205;
        float v210 = 8191.0;
        if (v209 <= 8191.0)
        {
          float v210 = v209;
          if (v209 < 0.0) {
            float v210 = 0.0;
          }
        }
        LOBYTE(v206) = v59->i8[1];
        float v211 = _S20 * (float)((float)LODWORD(v206) - v25);
        float v212 = v186 + v211;
        float v213 = 8191.0;
        if (v212 <= 8191.0)
        {
          float v213 = v212;
          if (v212 < 0.0) {
            float v213 = 0.0;
          }
        }
        float v214 = v192 + v211;
        BOOL v215 = (float)(v192 + v211) <= 8191.0;
        float v216 = 8191.0;
        if (v215)
        {
          float v216 = v214;
          if (v214 < 0.0) {
            float v216 = 0.0;
          }
        }
        float v217 = v195 + v211;
        float v218 = 8191.0;
        if (v217 <= 8191.0)
        {
          float v218 = v217;
          if (v217 < 0.0) {
            float v218 = 0.0;
          }
        }
        if (v50)
        {
          unsigned int v219 = v50->u8[0];
          unsigned int v220 = v50->u8[1];
          uint64_t v50 = (int8x8_t *)((char *)v50 + 2);
          unsigned int v221 = *v60;
          unsigned int v222 = v60[1];
          v60 += 2;
        }
        else
        {
          unsigned int v219 = 0;
          unsigned int v220 = 0;
          unsigned int v221 = 0;
          unsigned int v222 = 0;
        }
        _H0 = *(_WORD *)&v24[2 * llroundf(fminf(fmaxf(v190, 0.0), 8191.0))];
        __asm { FCVT            S0, H0 }
        _H1 = *(_WORD *)&v24[2 * llroundf(fminf(fmaxf(v193, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H21 = *(_WORD *)&v24[2 * llroundf(fminf(fmaxf(v197, 0.0), 8191.0))];
        __asm { FCVT            S21, H21 }
        _H22 = *(_WORD *)&v24[2 * llroundf(fminf(fmaxf(v201, 0.0), 8191.0))];
        __asm { FCVT            S22, H22 }
        _H24 = *(_WORD *)&v24[2 * llroundf(fminf(fmaxf(v202, 0.0), 8191.0))];
        _H25 = *(_WORD *)&v24[2 * llroundf(fminf(fmaxf(v204, 0.0), 8191.0))];
        __asm
        {
          FCVT            S24, H24
          FCVT            S25, H25
        }
        _H26 = *(_WORD *)&v24[2 * llroundf(fminf(fmaxf(v207, 0.0), 8191.0))];
        __asm { FCVT            S26, H26 }
        _H27 = *(_WORD *)&v24[2 * llroundf(fminf(fmaxf(v208, 0.0), 8191.0))];
        __asm { FCVT            S27, H27 }
        _H29 = *(_WORD *)&v24[2 * llroundf(fminf(fmaxf(v210, 0.0), 8191.0))];
        __asm { FCVT            S29, H29 }
        _H28 = *(_WORD *)&v24[2 * llroundf(fminf(fmaxf(v213, 0.0), 8191.0))];
        __asm { FCVT            S28, H28 }
        _H9 = *(_WORD *)&v24[2 * llroundf(fminf(fmaxf(v216, 0.0), 8191.0))];
        _H10 = *(_WORD *)&v24[2 * llroundf(fminf(fmaxf(v218, 0.0), 8191.0))];
        __asm
        {
          FCVT            S9, H9
          FCVT            S10, H10
        }
        float v247 = (float)((float)(v303 * _S1) + (float)(_S0 * v304)) + (float)(_S21 * v294);
        float v248 = (float)((float)(v290 * _S1) + (float)(_S0 * v292)) + (float)(_S21 * v288);
        float v249 = (float)((float)(v284 * _S1) + (float)(_S0 * v286)) + (float)(_S21 * v280);
        float v250 = (float)((float)(v303 * _S24) + (float)(_S22 * v304)) + (float)(_S25 * v294);
        float v251 = (float)((float)(v290 * _S24) + (float)(_S22 * v292)) + (float)(_S25 * v288);
        float v252 = (float)((float)(v284 * _S24) + (float)(_S22 * v286)) + (float)(_S25 * v280);
        float v253 = (float)((float)(v303 * _S27) + (float)(_S26 * v304)) + (float)(_S29 * v294);
        float v254 = (float)((float)(v290 * _S27) + (float)(_S26 * v292)) + (float)(_S29 * v288);
        float v255 = (float)((float)(v284 * _S27) + (float)(_S26 * v286)) + (float)(_S29 * v280);
        float v256 = (float)((float)(v303 * _S9) + (float)(_S28 * v304)) + (float)(_S10 * v294);
        float v257 = (float)((float)(v290 * _S9) + (float)(_S28 * v292)) + (float)(_S10 * v288);
        float v258 = (float)(v284 * _S9) + (float)(_S28 * v286);
        LOWORD(_S9) = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v248, 0.0), 8191.0))];
        *(float *)_Q0.i32 = fminf(fmaxf(v249, 0.0), 8191.0);
        _Q0.i16[0] = *(_WORD *)&v28[2 * llroundf(*(float *)_Q0.i32)];
        __int16 v259 = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v250, 0.0), 8191.0))];
        __int16 v260 = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v251, 0.0), 8191.0))];
        __int16 v261 = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v252, 0.0), 8191.0))];
        __int16 v262 = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v253, 0.0), 8191.0))];
        __int16 v263 = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v254, 0.0), 8191.0))];
        __int16 v264 = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v255, 0.0), 8191.0))];
        __int16 v265 = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v256, 0.0), 8191.0))];
        __int16 v266 = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v257, 0.0), 8191.0))];
        __int16 v267 = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v258 + (float)(_S10 * v280), 0.0), 8191.0))];
        _S28 = (float)v219 * 0.0039216;
        __asm { FCVT            H28, S28 }
        _S12 = (float)v220 * 0.0039216;
        __asm { FCVT            H12, S12 }
        _S13 = (float)v221 * 0.0039216;
        __asm { FCVT            H13, S13 }
        *(_WORD *)uint64_t v49 = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v247, 0.0), 8191.0))];
        *(_WORD *)(v49 + 2) = LOWORD(_S9);
        _S9 = (float)v222 * 0.0039216;
        *(_WORD *)(v49 + 4) = _Q0.i16[0];
        if (v50) {
          short float v275 = _H28;
        }
        else {
          LOWORD(v275) = COERCE_UNSIGNED_INT(1.0);
        }
        *(short float *)(v49 + 6) = v275;
        *(_WORD *)(v49 + 8) = v259;
        *(_WORD *)(v49 + 10) = v260;
        *(_WORD *)(v49 + 12) = v261;
        if (v50) {
          short float v276 = _H12;
        }
        else {
          LOWORD(v276) = COERCE_UNSIGNED_INT(1.0);
        }
        *(short float *)(v49 + 14) = v276;
        *(_WORD *)uint64_t v58 = v262;
        *(_WORD *)(v58 + 2) = v263;
        __asm { FCVT            H0, S9 }
        *(_WORD *)(v58 + 4) = v264;
        if (_ZF) {
          LOWORD(v278) = COERCE_UNSIGNED_INT(1.0);
        }
        else {
          short float v278 = _H13;
        }
        *(short float *)(v58 + 6) = v278;
        *(_WORD *)(v58 + 8) = v265;
        *(_WORD *)(v58 + 10) = v266;
        *(_WORD *)(v58 + 12) = v267;
        v183 += 2;
        v182 += 2;
        float v51 = (int8x8_t *)((char *)v51 + 2);
        if (_ZF) {
          _Q0.i16[0] = COERCE_UNSIGNED_INT(1.0);
        }
        *(_WORD *)(v58 + 14) = _Q0.i16[0];
        float v59 = (int8x8_t *)((char *)v59 + 2);
        v49 += 16;
        v58 += 16;
      }
      float v51 = (int8x8_t *)&v54[v17];
      result += v18;
      uint64_t v50 = (int8x8_t *)&v56[v19];
      uint64_t v49 = v55 + v20;
      v9 += 2;
    }
    while (v279 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_RGhA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44) + 2 * v8;
    unint64_t v13 = 2 * v9 - 2 * v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v157 = v22 * *(float *)(v14 + 16);
    float v158 = v22 * *(float *)(v14 + 8);
    float v26 = v22 * *(float *)(v14 + 20);
    float v27 = v22 * *(float *)(v14 + 28);
    float v155 = v27;
    float v156 = v26;
    float v28 = *(float *)(v14 + 72);
    float v29 = *(float *)(v14 + 76);
    float v30 = *(float *)(v14 + 80);
    float v31 = *(float *)(v14 + 84);
    float v32 = *(float *)(v14 + 88);
    float v33 = *(float *)(v14 + 92);
    float v34 = *(float *)(v14 + 96);
    float v35 = *(float *)(v14 + 100);
    float v36 = *(float *)(v14 + 104);
    uint64_t v37 = v14 + 164;
    uint64_t v38 = v14 + 16548;
    uint64_t v39 = *((void *)result + 14);
    uint64_t v40 = (void *)*((void *)result + 16);
    uint64_t v41 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7);
    uint64_t v42 = *(void *)(result + 36);
    uint64_t v43 = v15[1];
    uint64_t v44 = (unsigned char *)(*v15 + v17 * v12 + v42);
    uint64_t v45 = v15[2];
    _ZF = v45 == 0;
    uint64_t v46 = (unsigned __int8 *)(v45 + v19 * v12 + v42);
    if (_ZF) {
      uint64_t v47 = 0;
    }
    else {
      uint64_t v47 = v46;
    }
    uint64_t v48 = *v40 + v41 * v20 + 8 * v39;
    if (v12 >= 0) {
      uint64_t v49 = v12;
    }
    else {
      uint64_t v49 = v12 + 1;
    }
    uint64_t result = (unsigned __int8 *)(v43 + v18 * (v49 >> 1) + v42);
    do
    {
      uint64_t v50 = v48 + v20;
      float v51 = &v47[v19];
      float v52 = &v44[v17];
      if (v11)
      {
        unint64_t v53 = 0;
        uint64_t v54 = v48 + v20;
        uint64_t v55 = &v44[v17];
        float16x8_t v56 = &v47[v19];
        do
        {
          LOBYTE(v27) = result[v53 + 1];
          float v57 = (float)LODWORD(v27) - v24;
          unsigned int v58 = LODWORD(v158);
          float v59 = v158 * v57;
          LOBYTE(v58) = *v44;
          float v60 = (float)v58 - v23;
          float v61 = v25 * v60;
          float v62 = (float)(v158 * v57) + (float)(v25 * v60);
          float v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            float v63 = (float)(v158 * v57) + (float)(v25 * v60);
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          LOBYTE(v60) = result[v53];
          float v64 = (float)LODWORD(v60) - v24;
          float v65 = (float)(v156 * v57) + (float)(v64 * v157);
          float v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            float v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0) {
              float v66 = 0.0;
            }
          }
          unsigned int v67 = LODWORD(v155);
          float v68 = v155 * v64;
          float v69 = (float)(v155 * v64) + v61;
          float v70 = 8191.0;
          if (v69 <= 8191.0)
          {
            float v70 = v69;
            if (v69 < 0.0) {
              float v70 = 0.0;
            }
          }
          LOBYTE(v67) = v44[1];
          float v71 = (float)v67 - v23;
          float v72 = v25 * v71;
          float v73 = v59 + (float)(v25 * v71);
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v59 + (float)(v25 * v71);
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          float v75 = 8191.0;
          if ((float)(v65 + v72) <= 8191.0)
          {
            float v75 = v65 + v72;
            if ((float)(v65 + v72) < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = v68 + v72;
          BOOL v77 = (float)(v68 + v72) <= 8191.0;
          float v78 = 8191.0;
          if (v77)
          {
            float v78 = v76;
            if (v76 < 0.0) {
              float v78 = 0.0;
            }
          }
          LOBYTE(v71) = *v55;
          float v79 = v25 * (float)((float)LODWORD(v71) - v23);
          float v80 = 8191.0;
          if ((float)(v59 + v79) <= 8191.0)
          {
            float v80 = v59 + v79;
            if ((float)(v59 + v79) < 0.0) {
              float v80 = 0.0;
            }
          }
          float v81 = 8191.0;
          if ((float)(v65 + v79) <= 8191.0)
          {
            float v81 = v65 + v79;
            if ((float)(v65 + v79) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = v68 + v79;
          BOOL v77 = (float)(v68 + v79) <= 8191.0;
          float v83 = 8191.0;
          if (v77)
          {
            float v83 = v82;
            if (v82 < 0.0) {
              float v83 = 0.0;
            }
          }
          LOBYTE(v5) = v55[1];
          float v84 = v25 * (float)((float)v5 - v23);
          float v85 = v59 + v84;
          BOOL v77 = (float)(v59 + v84) <= 8191.0;
          float v86 = 8191.0;
          if (v77)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v65 + v84;
          BOOL v77 = (float)(v65 + v84) <= 8191.0;
          float v88 = 8191.0;
          if (v77)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          float v89 = v68 + v84;
          BOOL v77 = (float)(v68 + v84) <= 8191.0;
          float v90 = 8191.0;
          if (v77)
          {
            float v90 = v89;
            if (v89 < 0.0) {
              float v90 = 0.0;
            }
          }
          if (v47)
          {
            unsigned int v91 = *v47;
            unsigned int v92 = v47[1];
            v47 += 2;
            unsigned int v93 = *v56;
            unsigned int v94 = v56[1];
            v56 += 2;
          }
          else
          {
            unsigned int v91 = 0;
            unsigned int v92 = 0;
            unsigned int v93 = 0;
            unsigned int v94 = 0;
          }
          v44 += 2;
          v55 += 2;
          _H27 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v63, 0.0), 8191.0)));
          _H28 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm
          {
            FCVT            S27, H27
            FCVT            S28, H28
          }
          _H29 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v70, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S31, H31 }
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          __asm { FCVT            S8, H8 }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H4 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          __asm
          {
            FCVT            S10, H10
            FCVT            S4, H4
          }
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v83, 0.0), 8191.0)));
          unsigned int v115 = llroundf(fminf(fmaxf(v86, 0.0), 8191.0));
          __asm { FCVT            S9, H12 }
          _H12 = *(_WORD *)(v37 + 2 * v115);
          __asm { FCVT            S12, H12 }
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          __asm { FCVT            S11, H11 }
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v90, 0.0), 8191.0)));
          __asm { FCVT            S13, H13 }
          float v123 = (float)((float)(v29 * _S28) + (float)(_S27 * v28)) + (float)(_S29 * v30);
          float v124 = (float)((float)(v32 * _S28) + (float)(_S27 * v31)) + (float)(_S29 * v33);
          float v125 = (float)((float)(v35 * _S28) + (float)(_S27 * v34)) + (float)(_S29 * v36);
          float v126 = (float)((float)(v29 * _S31) + (float)(_S30 * v28)) + (float)(_S8 * v30);
          float v127 = (float)((float)(v32 * _S31) + (float)(_S30 * v31)) + (float)(_S8 * v33);
          float v128 = (float)((float)(v35 * _S31) + (float)(_S30 * v34)) + (float)(_S8 * v36);
          float v129 = (float)((float)(v29 * _S4) + (float)(_S10 * v28)) + (float)(_S9 * v30);
          float v130 = (float)((float)(v32 * _S4) + (float)(_S10 * v31)) + (float)(_S9 * v33);
          float v131 = (float)((float)(v35 * _S4) + (float)(_S10 * v34)) + (float)(_S9 * v36);
          float v132 = (float)((float)(v29 * _S11) + (float)(_S12 * v28)) + (float)(_S13 * v30);
          float v133 = (float)((float)(v32 * _S11) + (float)(_S12 * v31)) + (float)(_S13 * v33);
          float v134 = (float)(v35 * _S11) + (float)(_S12 * v34);
          LOWORD(_S12) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v123, 0.0), 8191.0)));
          float v135 = v134 + (float)(_S13 * v36);
          LOWORD(_S13) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          LOWORD(v125) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          __int16 v136 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v126, 0.0), 8191.0)));
          __int16 v137 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v127, 0.0), 8191.0)));
          __int16 v138 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v128, 0.0), 8191.0)));
          __int16 v139 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v129, 0.0), 8191.0)));
          __int16 v140 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v130, 0.0), 8191.0)));
          float v27 = fminf(fmaxf(v131, 0.0), 8191.0);
          LOWORD(v27) = *(_WORD *)(v38 + 2 * llroundf(v27));
          __int16 v141 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v132, 0.0), 8191.0)));
          __int16 v142 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v133, 0.0), 8191.0)));
          __int16 v143 = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v135, 0.0), 8191.0)));
          unsigned int v5 = 998277249;
          _S14 = (float)v91 * 0.0039216;
          __asm { FCVT            H14, S14 }
          _S5 = (float)v92 * 0.0039216;
          __asm { FCVT            H5, S5 }
          _S6 = (float)v93 * 0.0039216;
          __asm { FCVT            H6, S6 }
          *(_WORD *)uint64_t v48 = LOWORD(_S12);
          *(_WORD *)(v48 + 2) = LOWORD(_S13);
          _S7 = (float)v94 * 0.0039216;
          *(_WORD *)(v48 + 4) = LOWORD(v125);
          if (v47) {
            short float v151 = _H14;
          }
          else {
            LOWORD(v151) = COERCE_UNSIGNED_INT(1.0);
          }
          *(short float *)(v48 + 6) = v151;
          *(_WORD *)(v48 + 8) = v136;
          *(_WORD *)(v48 + 10) = v137;
          *(_WORD *)(v48 + 12) = v138;
          if (!v47) {
            _H5 = COERCE_UNSIGNED_INT(1.0);
          }
          *(_WORD *)(v48 + 14) = _H5;
          *(_WORD *)uint64_t v54 = v139;
          *(_WORD *)(v54 + 2) = v140;
          __asm { FCVT            H5, S7 }
          v48 += 16;
          *(_WORD *)(v54 + 4) = LOWORD(v27);
          if (_ZF) {
            LOWORD(v154) = COERCE_UNSIGNED_INT(1.0);
          }
          else {
            short float v154 = _H6;
          }
          *(short float *)(v54 + 6) = v154;
          *(_WORD *)(v54 + 8) = v141;
          *(_WORD *)(v54 + 10) = v142;
          *(_WORD *)(v54 + 12) = v143;
          if (_ZF) {
            LOWORD(v27) = COERCE_UNSIGNED_INT(1.0);
          }
          else {
            *(short float *)&float v27 = _H5;
          }
          *(_WORD *)(v54 + 14) = LOWORD(v27);
          v54 += 16;
          v53 += 2;
        }
        while (v11 > v53);
      }
      uint64_t v44 = &v52[v17];
      result += v18;
      uint64_t v47 = &v51[v19];
      uint64_t v48 = v50 + v20;
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_RGhA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_RGhA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_RGhA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, int16x4_t a7, float32x4_t a8, double a9, float32x4_t a10)
{
  uint64_t v16 = *(void *)(result + 28);
  unint64_t v17 = 2 * *result;
  unint64_t v18 = v16 * a2 / v17;
  unint64_t v19 = (v16 + v16 * a2) / v17;
  if (2 * v19 != 2 * v18)
  {
    unint64_t v20 = 0;
    unint64_t v21 = *(void *)(result + 20);
    uint64_t v22 = *(void *)(result + 44);
    uint64_t v23 = v22 + 2 * v18;
    uint64_t v24 = v22 + 2 * v19;
    float v25 = (float32x2_t *)*((void *)result + 19);
    float v26 = (uint64_t *)*((void *)result + 7);
    float v27 = (uint64_t *)*((void *)result + 8);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = v27[2];
    uint64_t v31 = **((void **)result + 17);
    unsigned int v32 = v25[17].u16[2];
    unsigned int v33 = v25[17].u16[3];
    a8.i32[0] = v25[3].i32[1];
    unint64_t v34 = v24 - v23;
    *(float *)&a3 = (float)v32;
    a10.f32[0] = 1.0 / (float)v25[16].u32[0];
    float v35 = (float)v33;
    _S2 = a10.f32[0] * v25->f32[0];
    __asm { FCVT            H3, S2 }
    *(short float *)a7.i16 = (short float)v32;
    float16x8_t v42 = (float16x8_t)vdupq_lane_s16(a7, 0);
    a8.i32[1] = v25[1].i32[0];
    *(float32x2_t *)a8.f32 = vmul_n_f32(*(float32x2_t *)a8.f32, a10.f32[0]);
    float16x8_t v43 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a8), 0);
    *(float32x2_t *)a10.f32 = vmul_n_f32(v25[2], a10.f32[0]);
    float16x8_t v44 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a10), 0);
    short float v45 = -(short float)v33;
    float16x8_t v46 = vmulq_n_f16(v43, v45);
    float16x8_t v47 = vmulq_n_f16(v44, v45);
    uint64_t v48 = v26[1];
    uint64_t v49 = v26[2];
    if (v23 >= 0) {
      uint64_t v50 = v23;
    }
    else {
      uint64_t v50 = v23 + 1;
    }
    uint64_t v51 = *v26;
    uint64_t v52 = v48 + v29 * (v50 >> 1);
    uint64_t v53 = *(void *)(result + 36);
    uint64_t v54 = **((void **)result + 16)
        + v31 * (*((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v17))
        + 8 * *((void *)result + 14);
    if (v49) {
      uint64_t v55 = (int8x8_t *)(v49 + v30 * v23 + v53);
    }
    else {
      uint64_t v55 = 0;
    }
    float16x8_t v56 = (__int8 *)(v52 + v53);
    float v57 = (int8x8_t *)(v51 + v28 * v23 + v53);
    uint64_t result = (unsigned __int8 *)(*(void *)(result + 20) & 0xFFFFFFF8);
    do
    {
      uint64_t v58 = v54 + v31;
      float v59 = (unsigned __int8 *)v55 + v30;
      float v60 = (char *)v57 + v28;
      if ((int)v21 < 8)
      {
        unint64_t v87 = 0;
        float v86 = v56;
        float v64 = (int8x8_t *)((char *)v55 + v30);
        float v63 = (int8x8_t *)((char *)v57 + v28);
        float v62 = (__int16 *)(v54 + v31);
      }
      else
      {
        uint64_t v61 = 0;
        float v62 = (__int16 *)(v54 + v31);
        float v63 = (int8x8_t *)((char *)v57 + v28);
        float v64 = (int8x8_t *)((char *)v55 + v30);
        do
        {
          if (v55)
          {
            int8x8_t v65 = *v55++;
            int8x8_t v66 = v65;
            int8x8_t v67 = *v64++;
            *(int8x8_t *)v68.i8 = vzip1_s8(v66, 0);
            v68.u64[1] = (unint64_t)vzip2_s8(v66, 0);
            float16x8_t v69 = (float16x8_t)vdupq_n_s16(0x1C04u);
            _Q26 = vmulq_f16(vcvtq_f16_u16(v68), v69);
            *(int8x8_t *)v70.i8 = vzip1_s8(v67, 0);
            v70.u64[1] = (unint64_t)vzip2_s8(v67, 0);
            float16x8_t v71 = vmulq_f16(vcvtq_f16_u16(v70), v69);
          }
          else
          {
            _Q26.i32[0] = 1006648320;
            _Q26.i16[2] = 15360;
            _Q26.i16[3] = 15360;
            _Q26.i16[4] = 15360;
            _Q26.i16[5] = 15360;
            _Q26.i16[6] = 15360;
            _Q26.i16[7] = 15360;
            v71.i64[0] = 0x3C003C003C003C00;
            v71.i64[1] = 0x3C003C003C003C00;
          }
          int8x8_t v72 = *(int8x8_t *)&v56[v61];
          *(int8x8_t *)v73.i8 = vzip1_s8(v72, 0);
          v73.u64[1] = (unint64_t)vzip2_s8(v72, 0);
          float16x8_t v74 = vcvtq_f16_u16(v73);
          int8x16_t v75 = (int8x16_t)vmlaq_f16(v46, v43, v74);
          int8x16_t v76 = (int8x16_t)vmlaq_f16(v47, v44, v74);
          v74.i64[0] = vextq_s8(v75, v75, 8uLL).u64[0];
          *(int16x4_t *)v77.i8 = vuzp1_s16(*(int16x4_t *)v75.i8, *(int16x4_t *)v74.i8);
          *(int16x4_t *)v74.i8 = vuzp2_s16(*(int16x4_t *)v75.i8, *(int16x4_t *)v74.i8);
          *(double *)&v74.i64[1] = a3;
          float16x8_t v78 = (float16x8_t)vzip1q_s16((int16x8_t)v74, (int16x8_t)v74);
          *(double *)&v77.i64[1] = a3;
          float16x8_t v79 = (float16x8_t)vzip1q_s16(v77, v77);
          v74.i64[0] = vextq_s8(v76, v76, 8uLL).u64[0];
          *(float16x4_t *)v74.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v74.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v74.i8));
          *(double *)&v74.i64[1] = a3;
          int8x8_t v80 = *v57++;
          float16x8_t v81 = (float16x8_t)vzip1q_s16((int16x8_t)v74, (int16x8_t)v74);
          *(int8x8_t *)v74.i8 = vzip1_s8(v80, 0);
          v74.u64[1] = (unint64_t)vzip2_s8(v80, 0);
          int8x8_t v82 = *v63++;
          *(int8x8_t *)v76.i8 = vzip1_s8(v82, 0);
          v76.u64[1] = (unint64_t)vzip2_s8(v82, 0);
          float16x8_t v83 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v74), v42);
          float16x8_t v84 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v76), v42);
          _Q23 = vmlaq_n_f16(v78, v83, _H3);
          _Q27 = vmlaq_n_f16(v78, v84, _H3);
          _Q24 = vmlaq_n_f16(v81, v83, _H3);
          _Q28 = vmlaq_n_f16(v81, v84, _H3);
          float16x8_t v85 = vmlaq_n_f16(v79, v83, _H3);
          vst4q_s16((__int16 *)v54, *(int16x8x4_t *)_Q23.i8);
          v54 += 64;
          _Q29 = vmlaq_n_f16(v79, v84, _H3);
          vst4q_s16(v62, *(int16x8x4_t *)_Q27.i8);
          v62 += 32;
          v61 += 8;
        }
        while ((int)v61 < (int)v21 - 7);
        float v86 = &v56[v61];
        unint64_t v87 = v21 & 0xFFFFFFF8;
      }
      while (v21 > v87)
      {
        if (v55)
        {
          unsigned int v88 = v55->u8[0];
          unsigned int v89 = v55->u8[1];
          uint64_t v55 = (int8x8_t *)((char *)v55 + 2);
          unsigned int v90 = v64->u8[0];
          unsigned int v91 = v64->u8[1];
          float v64 = (int8x8_t *)((char *)v64 + 2);
        }
        else
        {
          unsigned int v88 = 0;
          unsigned int v89 = 0;
          unsigned int v90 = 0;
          unsigned int v91 = 0;
        }
        _Q23.i8[0] = *v86;
        float v92 = (float)_Q23.u32[0] - v35;
        _Q24.i8[0] = v86[1];
        float v93 = (float)_Q24.u32[0] - v35;
        float v94 = a8.f32[1] * v93;
        float v95 = (float)(a10.f32[1] * v93) + (float)(v92 * a10.f32[0]);
        float v96 = a8.f32[0] * v92;
        _Q26.i8[0] = v57->i8[0];
        float v97 = _S2 * (float)((float)_Q26.u32[0] - *(float *)&a3);
        _Q27.i8[0] = v57->i8[1];
        float v98 = _S2 * (float)((float)_Q27.u32[0] - *(float *)&a3);
        _Q28.i8[0] = v63->i8[0];
        float v99 = _S2 * (float)((float)_Q28.u32[0] - *(float *)&a3);
        _Q29.i8[0] = v63->i8[1];
        float v100 = _S2 * (float)((float)_Q29.u32[0] - *(float *)&a3);
        _S30 = v94 + v97;
        _S31 = v97 + v95;
        *(float *)_Q26.i32 = v96 + v97;
        _S8 = v94 + v98;
        _S9 = v95 + v98;
        *(float *)_Q27.i32 = v96 + v98;
        _S10 = v94 + v99;
        _S11 = v95 + v99;
        *(float *)_Q28.i32 = v96 + v99;
        _S25 = v94 + v100;
        *(float *)_Q24.i32 = v95 + v100;
        *(float *)_Q23.i32 = v96 + v100;
        *(float *)_Q29.i32 = (float)v88 * 0.0039216;
        __asm { FCVT            H29, S29 }
        _S13 = (float)v89 * 0.0039216;
        __asm { FCVT            H13, S13 }
        _S14 = (float)v90 * 0.0039216;
        __asm
        {
          FCVT            H14, S14
          FCVT            H30, S30
        }
        *(_WORD *)uint64_t v54 = LOWORD(_S30);
        __asm { FCVT            H30, S31 }
        *(_WORD *)(v54 + 2) = LOWORD(_S30);
        _S30 = (float)v91 * 0.0039216;
        __asm { FCVT            H26, S26 }
        *(_WORD *)(v54 + 4) = _Q26.i16[0];
        if (v55) {
          short float v113 = *(short float *)_Q29.i16;
        }
        else {
          LOWORD(v113) = COERCE_UNSIGNED_INT(1.0);
        }
        *(short float *)(v54 + 6) = v113;
        __asm { FCVT            H26, S8 }
        *(_WORD *)(v54 + 8) = _H26;
        __asm { FCVT            H26, S9 }
        *(_WORD *)(v54 + 10) = _H26;
        __asm
        {
          FCVT            H26, S30
          FCVT            H27, S27
        }
        *(_WORD *)(v54 + 12) = _H27;
        if (_ZF) {
          LOWORD(v117) = COERCE_UNSIGNED_INT(1.0);
        }
        else {
          short float v117 = _H13;
        }
        *(short float *)(v54 + 14) = v117;
        __asm { FCVT            H27, S10 }
        *float v62 = _H27;
        __asm { FCVT            H27, S11 }
        v62[1] = _H27;
        __asm { FCVT            H27, S28 }
        v62[2] = _H27;
        if (_ZF) {
          _Q27.i16[0] = COERCE_UNSIGNED_INT(1.0);
        }
        else {
          *(short float *)_Q27.i16 = _H14;
        }
        v62[3] = _Q27.i16[0];
        __asm { FCVT            H25, S25 }
        v62[4] = _H25;
        __asm { FCVT            H24, S24 }
        v62[5] = _Q24.i16[0];
        __asm { FCVT            H23, S23 }
        v62[6] = _H23;
        v87 += 2;
        v86 += 2;
        float v57 = (int8x8_t *)((char *)v57 + 2);
        if (_ZF) {
          _Q23.i16[0] = COERCE_UNSIGNED_INT(1.0);
        }
        else {
          _Q23.i16[0] = _Q26.i16[0];
        }
        v62[7] = _Q23.i16[0];
        float v63 = (int8x8_t *)((char *)v63 + 2);
        v54 += 16;
        v62 += 8;
      }
      float v57 = (int8x8_t *)&v60[v28];
      v56 += v29;
      uint64_t v55 = (int8x8_t *)&v59[v30];
      uint64_t v54 = v58 + v31;
      v20 += 2;
    }
    while (v34 > v20);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_RGhA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_RGhA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_RGhA_GCD(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v8 = *(void *)(result + 28);
  unint64_t v9 = 2 * *result;
  unint64_t v10 = v8 * a2 / v9;
  unint64_t v11 = (v8 + v8 * a2) / v9;
  if (2 * v11 != 2 * v10)
  {
    unint64_t v12 = 0;
    unint64_t v13 = *(void *)(result + 20);
    uint64_t v14 = *(void *)(result + 44) + 2 * v10;
    unint64_t v15 = 2 * v11 - 2 * v10;
    uint64_t v16 = *((void *)result + 19);
    uint64_t v17 = (void *)*((void *)result + 7);
    uint64_t v18 = (uint64_t *)*((void *)result + 8);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = v18[2];
    uint64_t v22 = **((void **)result + 17);
    *(float *)&unsigned int v23 = (float)*(unsigned int *)(v16 + 128);
    unsigned int v24 = 1.0;
    float v25 = 1.0 / *(float *)&v23;
    LOWORD(v23) = *(_WORD *)(v16 + 140);
    float v26 = (float)v23;
    LOWORD(v24) = *(_WORD *)(v16 + 142);
    float v27 = (float)v24;
    float v28 = v25 * *(float *)v16;
    float v29 = v25 * *(float *)(v16 + 8);
    float v30 = v25 * *(float *)(v16 + 16);
    float v31 = v25 * *(float *)(v16 + 20);
    float v32 = v25 * *(float *)(v16 + 28);
    uint64_t v33 = *((void *)result + 14);
    unint64_t v34 = *((void *)result + 13) * a2;
    uint64_t v35 = (void *)*((void *)result + 16);
    uint64_t v36 = *((void *)result + 15) + 2 * (v34 / v9);
    uint64_t v37 = *(void *)(result + 36);
    uint64_t v38 = (unsigned char *)(*v17 + v19 * v14 + v37);
    uint64_t v39 = v17[2];
    _ZF = v39 == 0;
    uint64_t result = (unsigned __int8 *)(v39 + v21 * v14 + v37);
    if (_ZF) {
      uint64_t result = 0;
    }
    uint64_t v41 = *v35 + v36 * v22 + 8 * v33;
    uint64_t v42 = v17[1] + v20 * (v14 / 2) + v37;
    do
    {
      uint64_t v43 = v41 + v22;
      float16x8_t v44 = &result[v21];
      short float v45 = &v38[v19];
      if (v13)
      {
        unint64_t v46 = 0;
        float16x8_t v47 = (_WORD *)(v41 + v22);
        uint64_t v48 = &v38[v19];
        uint64_t v49 = &result[v21];
        do
        {
          if (result)
          {
            unsigned int v50 = *result;
            unsigned int v51 = result[1];
            result += 2;
            unsigned int v52 = *v49;
            unsigned int v53 = v49[1];
            v49 += 2;
          }
          else
          {
            unsigned int v50 = 0;
            unsigned int v51 = 0;
            unsigned int v52 = 0;
            unsigned int v53 = 0;
          }
          LOBYTE(_S17) = *(unsigned char *)(v42 + v46);
          float v54 = (float)LODWORD(_S17) - v27;
          LOBYTE(_S18) = *(unsigned char *)(v42 + v46 + 1);
          float v55 = (float)LODWORD(_S18) - v27;
          float v56 = v29 * v55;
          float v57 = (float)(v31 * v55) + (float)(v54 * v30);
          float v58 = v32 * v54;
          LOBYTE(_S20) = *v38;
          float v59 = v28 * (float)((float)LODWORD(_S20) - v26);
          LOBYTE(_S21) = v38[1];
          float v60 = v28 * (float)((float)LODWORD(_S21) - v26);
          v38 += 2;
          LOBYTE(_S22) = *v48;
          float v61 = v28 * (float)((float)LODWORD(_S22) - v26);
          LOBYTE(_S23) = v48[1];
          float v62 = v28 * (float)((float)LODWORD(_S23) - v26);
          v48 += 2;
          _S24 = v56 + v59;
          _S25 = v59 + v57;
          _S20 = v58 + v59;
          _S26 = v56 + v60;
          _S27 = v57 + v60;
          _S21 = v58 + v60;
          _S28 = v56 + v61;
          _S29 = v57 + v61;
          _S22 = v58 + v61;
          _S19 = v56 + v62;
          _S18 = v57 + v62;
          _S17 = v58 + v62;
          _S23 = (float)v50 * 0.0039216;
          __asm { FCVT            H23, S23 }
          _S30 = (float)v51 * 0.0039216;
          __asm { FCVT            H30, S30 }
          _S31 = (float)v52 * 0.0039216;
          __asm
          {
            FCVT            H31, S31
            FCVT            H24, S24
          }
          *(_WORD *)uint64_t v41 = LOWORD(_S24);
          __asm { FCVT            H24, S25 }
          *(_WORD *)(v41 + 2) = LOWORD(_S24);
          _S24 = (float)v53 * 0.0039216;
          __asm { FCVT            H20, S20 }
          *(_WORD *)(v41 + 4) = LOWORD(_S20);
          if (result) {
            short float v78 = *(short float *)&_S23;
          }
          else {
            LOWORD(v78) = COERCE_UNSIGNED_INT(1.0);
          }
          *(short float *)(v41 + 6) = v78;
          __asm { FCVT            H20, S26 }
          *(_WORD *)(v41 + 8) = _H20;
          __asm { FCVT            H20, S27 }
          *(_WORD *)(v41 + 10) = _H20;
          __asm
          {
            FCVT            H20, S24
            FCVT            H21, S21
          }
          *(_WORD *)(v41 + 12) = _H21;
          if (_ZF) {
            LOWORD(v82) = COERCE_UNSIGNED_INT(1.0);
          }
          else {
            short float v82 = _H30;
          }
          *(short float *)(v41 + 14) = v82;
          v41 += 16;
          __asm { FCVT            H21, S28 }
          *float16x8_t v47 = _H21;
          __asm { FCVT            H21, S29 }
          v47[1] = _H21;
          __asm { FCVT            H21, S22 }
          v47[2] = _H21;
          if (_ZF) {
            LOWORD(_S21) = COERCE_UNSIGNED_INT(1.0);
          }
          else {
            *(short float *)&_S21 = _H31;
          }
          v47[3] = LOWORD(_S21);
          __asm { FCVT            H19, S19 }
          v47[4] = _H19;
          __asm { FCVT            H18, S18 }
          v47[5] = LOWORD(_S18);
          __asm { FCVT            H17, S17 }
          v47[6] = _H17;
          if (_ZF) {
            LOWORD(_S17) = COERCE_UNSIGNED_INT(1.0);
          }
          else {
            *(short float *)&_S17 = *(short float *)&_S20;
          }
          v47[7] = LOWORD(_S17);
          v47 += 8;
          v46 += 2;
        }
        while (v13 > v46);
      }
      uint64_t v38 = &v45[v19];
      v42 += v20;
      uint64_t result = &v44[v21];
      uint64_t v41 = v43 + v22;
      v12 += 2;
    }
    while (v15 > v12);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, int16x4_t _D0, double a4, float32x4_t a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    uint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44);
    uint64_t v13 = v12 + 2 * v8;
    uint64_t v14 = v12 + 2 * v9;
    uint64_t v15 = (float32x2_t *)*((void *)result + 19);
    uint64_t v16 = (uint64_t *)*((void *)result + 7);
    uint64_t v17 = (uint64_t *)*((void *)result + 8);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = **((void **)result + 17);
    unsigned int v22 = v15[17].u16[2];
    unsigned int v23 = v15[17].u16[3];
    _D0.i32[0] = v15->i32[0];
    v24.i32[0] = v15[3].i32[1];
    _S6 = v15[10].f32[1];
    _S7 = v15[11].f32[0];
    _S16 = v15[11].f32[1];
    _S17 = v15[12].f32[0];
    _S18 = v15[12].f32[1];
    _S19 = v15[13].f32[0];
    _S15 = v15[13].f32[1];
    float v343 = v15[14].f32[0];
    float v342 = v15[14].f32[1];
    float v341 = v15[15].f32[0];
    unint64_t v308 = v14 - v13;
    uint64_t v32 = (char *)&v15[2068] + 4;
    float v340 = (float)v22;
    a5.f32[0] = 8191.0 / (float)v15[16].u32[0];
    float v356 = (float)v23;
    _S28 = a5.f32[0] * v15->f32[0];
    uint64_t v34 = (char *)&v15[20] + 4;
    uint64_t v35 = (char *)&v15[4116] + 4;
    __asm { FCVT            H0, S28 }
    short float v331 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v22;
    float16x8_t v339 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    v24.i32[1] = v15[1].i32[0];
    *(float32x2_t *)v5.f32 = vmul_n_f32(v24, a5.f32[0]);
    short float v40 = -(short float)v23;
    *(float32x2_t *)a5.f32 = vmul_n_f32(v15[2], a5.f32[0]);
    float16x8_t v337 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    int8x16_t v41 = (int8x16_t)vmulq_n_f16(v337, v40);
    float16x8_t v334 = (float16x8_t)v41;
    float16x8_t v335 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v333 = vmulq_n_f16(v335, v40);
    __asm { FCVT            H0, S15 }
    short float v332 = _H0;
    __asm { FCVT            H0, S20 }
    short float v330 = _H0;
    __asm
    {
      FCVT            H14, S22
      FCVT            H0, S23
    }
    short float v329 = _H0;
    float v353 = v15[9].f32[0];
    __asm { FCVT            H0, S3 }
    short float v328 = _H0;
    float v352 = v15[9].f32[1];
    __asm { FCVT            H0, S4 }
    short float v327 = _H0;
    float v351 = v15[10].f32[0];
    __asm { FCVT            H0, S5 }
    short float v326 = _H0;
    uint64_t v50 = v16[1];
    uint64_t v49 = v16[2];
    if (v13 >= 0) {
      uint64_t v51 = v13;
    }
    else {
      uint64_t v51 = v13 + 1;
    }
    uint64_t v52 = *v16;
    uint64_t v311 = v19;
    uint64_t v53 = v50 + v19 * (v51 >> 1);
    uint64_t v54 = *(void *)(result + 36);
    uint64_t v55 = **((void **)result + 16)
        + v21 * (*((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7))
        + 16 * *((void *)result + 14);
    if (v49) {
      float v56 = (int8x8_t *)(v49 + v20 * v13 + v54);
    }
    else {
      float v56 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v53 + v54);
    float v57 = (int8x8_t *)(v52 + v18 * v13 + v54);
    float v350 = _S6;
    __asm { FCVT            H0, S6 }
    short float v325 = _H0;
    float v349 = _S7;
    __asm { FCVT            H0, S7 }
    short float v324 = _H0;
    float v348 = _S16;
    __asm { FCVT            H0, S16 }
    short float v323 = _H0;
    float v347 = _S17;
    __asm { FCVT            H0, S17 }
    short float v321 = _H0;
    float v346 = _S18;
    __asm { FCVT            H0, S18 }
    short float v320 = _H0;
    float v345 = _S19;
    __asm { FCVT            H0, S19 }
    short float v319 = _H0;
    float v338 = v5.f32[0];
    _Q0.i32[0] = a5.i32[1];
    float v317 = a5.f32[1];
    float v336 = a5.f32[0];
    float v318 = v5.f32[1];
    uint64_t v312 = v18;
    uint64_t v309 = v21;
    uint64_t v310 = v20;
    float v344 = _S15;
    short float v307 = _H14;
    float v322 = _S28;
    do
    {
      int8x8_t v65 = (int8x8_t *)((char *)v57 + v18);
      uint64_t v66 = v55 + v21;
      int8x8_t v67 = (unsigned __int8 *)v56 + v20;
      uint64_t v315 = v55 + v21;
      uint64_t v316 = v10;
      float v313 = (char *)v57 + v18;
      float v314 = (unsigned __int8 *)v56 + v20;
      if ((int)v11 < 8)
      {
        unint64_t v188 = 0;
        float v187 = result;
      }
      else
      {
        uint64_t v68 = 0;
        do
        {
          if (v56)
          {
            int8x8_t v69 = *v56++;
            int8x8_t v70 = v69;
            int8x8_t v71 = *(int8x8_t *)v67;
            v67 += 8;
            int8x8_t v72 = v71;
          }
          else
          {
            int8x8_t v70 = 0;
            int8x8_t v72 = 0;
          }
          int8x8_t v73 = *(int8x8_t *)&result[v68];
          *(int8x8_t *)v74.i8 = vzip1_s8(v73, 0);
          v74.u64[1] = (unint64_t)vzip2_s8(v73, 0);
          float16x8_t v75 = vcvtq_f16_u16(v74);
          int8x16_t v76 = (int8x16_t)vmlaq_f16(v334, v337, v75);
          int8x16_t v77 = (int8x16_t)vmlaq_f16(v333, v335, v75);
          v75.i64[0] = vextq_s8(v76, v76, 8uLL).u64[0];
          *(int16x4_t *)v78.i8 = vuzp1_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v75.i8);
          *(int16x4_t *)v75.i8 = vuzp2_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v75.i8);
          v75.u64[1] = (unint64_t)v72;
          float16x8_t v79 = (float16x8_t)vzip1q_s16((int16x8_t)v75, (int16x8_t)v75);
          v78.u64[1] = (unint64_t)v72;
          float16x8_t v80 = (float16x8_t)vzip1q_s16(v78, v78);
          v75.i64[0] = vextq_s8(v77, v77, 8uLL).u64[0];
          *(float16x4_t *)v75.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v75.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v75.i8));
          v75.u64[1] = (unint64_t)v72;
          int8x8_t v81 = *v57++;
          float16x8_t v82 = (float16x8_t)vzip1q_s16((int16x8_t)v75, (int16x8_t)v75);
          *(int8x8_t *)v75.i8 = vzip1_s8(v81, 0);
          v75.u64[1] = (unint64_t)vzip2_s8(v81, 0);
          int8x8_t v83 = *v65++;
          *(int8x8_t *)v77.i8 = vzip1_s8(v83, 0);
          v77.u64[1] = (unint64_t)vzip2_s8(v83, 0);
          float16x8_t v84 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v75), v339);
          float16x8_t v85 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v77), v339);
          float16x8_t v86 = vmlaq_n_f16(v79, v84, v331);
          float16x8_t v87 = vmlaq_n_f16(v79, v85, v331);
          float16x8_t v88 = vmlaq_n_f16(v82, v84, v331);
          float16x8_t v89 = vmlaq_n_f16(v82, v85, v331);
          float16x8_t v90 = vmlaq_n_f16(v80, v84, v331);
          float16x8_t v91 = vmlaq_n_f16(v80, v85, v331);
          if (v56)
          {
            *(int8x8_t *)v92.i8 = vzip1_s8(v70, 0);
            v92.u64[1] = (unint64_t)vzip2_s8(v70, 0);
            float16x8_t v93 = vcvtq_f16_u16(v92);
            float16x8_t v94 = (float16x8_t)vdupq_n_s16(0x1C04u);
            int8x16_t v95 = (int8x16_t)vmulq_f16(v93, v94);
            float32x4_t v354 = vcvtq_f32_f16(*(float16x4_t *)v95.i8);
            *(int8x8_t *)v96.i8 = vzip1_s8(v72, 0);
            v96.u64[1] = (unint64_t)vzip2_s8(v72, 0);
            _Q6 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL));
            int8x16_t v98 = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v96), v94);
            float32x4_t v355 = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
            float32x4_t v99 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL));
          }
          else
          {
            __asm { FMOV            V6.4S, #1.0 }
            float32x4_t v99 = _Q6;
            float32x4_t v354 = _Q6;
            float32x4_t v355 = _Q6;
          }
          v100.i64[0] = 0x9000900090009000;
          v100.i64[1] = 0x9000900090009000;
          uint16x8_t v101 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v86, (float16x8_t)0), v100));
          uint32x4_t v102 = vmovl_high_u16(v101);
          float16x8_t v103 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v101.i8);
          v103.i16[0] = *(_WORD *)&v34[2 * v103.u32[0]];
          v103.i16[1] = *(_WORD *)&v34[2 * v103.u32[1]];
          v103.i16[2] = *(_WORD *)&v34[2 * v103.u32[2]];
          v103.i16[3] = *(_WORD *)&v34[2 * v103.u32[3]];
          v103.i16[4] = *(_WORD *)&v34[2 * v102.u32[0]];
          v103.i16[5] = *(_WORD *)&v34[2 * v102.u32[1]];
          v103.i16[6] = *(_WORD *)&v34[2 * v102.u32[2]];
          v103.i16[7] = *(_WORD *)&v34[2 * v102.u32[3]];
          uint16x8_t v104 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v88, (float16x8_t)0), v100));
          uint32x4_t v105 = vmovl_high_u16(v104);
          uint32x4_t v106 = vmovl_u16(*(uint16x4_t *)v104.i8);
          v107.i16[0] = *(_WORD *)&v34[2 * v106.u32[0]];
          v107.i16[1] = *(_WORD *)&v34[2 * v106.u32[1]];
          v107.i16[2] = *(_WORD *)&v34[2 * v106.u32[2]];
          v107.i16[3] = *(_WORD *)&v34[2 * v106.u32[3]];
          v107.i16[4] = *(_WORD *)&v34[2 * v105.u32[0]];
          v107.i16[5] = *(_WORD *)&v34[2 * v105.u32[1]];
          v107.i16[6] = *(_WORD *)&v34[2 * v105.u32[2]];
          v107.i16[7] = *(_WORD *)&v34[2 * v105.u32[3]];
          uint16x8_t v108 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v90, (float16x8_t)0), v100));
          uint32x4_t v109 = vmovl_high_u16(v108);
          float16x8_t v110 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v108.i8);
          v110.i16[0] = *(_WORD *)&v34[2 * v110.u32[0]];
          v110.i16[1] = *(_WORD *)&v34[2 * v110.u32[1]];
          v110.i16[2] = *(_WORD *)&v34[2 * v110.u32[2]];
          v110.i16[3] = *(_WORD *)&v34[2 * v110.u32[3]];
          v110.i16[4] = *(_WORD *)&v34[2 * v109.u32[0]];
          v110.i16[5] = *(_WORD *)&v34[2 * v109.u32[1]];
          v110.i16[6] = *(_WORD *)&v34[2 * v109.u32[2]];
          v110.i16[7] = *(_WORD *)&v34[2 * v109.u32[3]];
          uint16x8_t v111 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v87, (float16x8_t)0), v100));
          uint32x4_t v112 = vmovl_high_u16(v111);
          uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v111.i8);
          v114.i16[0] = *(_WORD *)&v34[2 * v113.u32[0]];
          v114.i16[1] = *(_WORD *)&v34[2 * v113.u32[1]];
          v114.i16[2] = *(_WORD *)&v34[2 * v113.u32[2]];
          v114.i16[3] = *(_WORD *)&v34[2 * v113.u32[3]];
          v114.i16[4] = *(_WORD *)&v34[2 * v112.u32[0]];
          v114.i16[5] = *(_WORD *)&v34[2 * v112.u32[1]];
          v114.i16[6] = *(_WORD *)&v34[2 * v112.u32[2]];
          v114.i16[7] = *(_WORD *)&v34[2 * v112.u32[3]];
          uint16x8_t v115 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v89, (float16x8_t)0), v100));
          uint32x4_t v116 = vmovl_high_u16(v115);
          float16x8_t v117 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v115.i8);
          v117.i16[0] = *(_WORD *)&v34[2 * v117.u32[0]];
          v117.i16[1] = *(_WORD *)&v34[2 * v117.u32[1]];
          v117.i16[2] = *(_WORD *)&v34[2 * v117.u32[2]];
          v117.i16[3] = *(_WORD *)&v34[2 * v117.u32[3]];
          v117.i16[4] = *(_WORD *)&v34[2 * v116.u32[0]];
          v117.i16[5] = *(_WORD *)&v34[2 * v116.u32[1]];
          v117.i16[6] = *(_WORD *)&v34[2 * v116.u32[2]];
          v117.i16[7] = *(_WORD *)&v34[2 * v116.u32[3]];
          uint16x8_t v118 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v91, (float16x8_t)0), v100));
          uint32x4_t v119 = vmovl_high_u16(v118);
          uint32x4_t v120 = vmovl_u16(*(uint16x4_t *)v118.i8);
          v121.i16[0] = *(_WORD *)&v34[2 * v120.u32[0]];
          v121.i16[1] = *(_WORD *)&v34[2 * v120.u32[1]];
          v121.i16[2] = *(_WORD *)&v34[2 * v120.u32[2]];
          v121.i16[3] = *(_WORD *)&v34[2 * v120.u32[3]];
          v121.i16[4] = *(_WORD *)&v34[2 * v119.u32[0]];
          v121.i16[5] = *(_WORD *)&v34[2 * v119.u32[1]];
          v121.i16[6] = *(_WORD *)&v34[2 * v119.u32[2]];
          v121.i16[7] = *(_WORD *)&v34[2 * v119.u32[3]];
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v103, v332), v107, v330), v110, _H14), vmaxq_f16(vmaxq_f16(v103, v107), v110), v329), (float16x8_t)0), v100));
          uint32x4_t v123 = vmovl_high_u16(v122);
          float16x8_t v124 = (float16x8_t)vmovl_u16(*(uint16x4_t *)v122.i8);
          v124.i16[0] = *(_WORD *)&v32[2 * v124.u32[0]];
          v124.i16[1] = *(_WORD *)&v32[2 * v124.u32[1]];
          v124.i16[2] = *(_WORD *)&v32[2 * v124.u32[2]];
          v124.i16[3] = *(_WORD *)&v32[2 * v124.u32[3]];
          v124.i16[4] = *(_WORD *)&v32[2 * v123.u32[0]];
          v124.i16[5] = *(_WORD *)&v32[2 * v123.u32[1]];
          v124.i16[6] = *(_WORD *)&v32[2 * v123.u32[2]];
          v124.i16[7] = *(_WORD *)&v32[2 * v123.u32[3]];
          float16x8_t v125 = vmulq_f16(v103, v124);
          float16x8_t v126 = vmulq_f16(v107, v124);
          float16x8_t v127 = vmulq_f16(v110, v124);
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(vmlaq_n_f16(vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v114, v332), v117, v330), v121, _H14), vmaxq_f16(vmaxq_f16(v114, v117), v121), v329), (float16x8_t)0), v100));
          uint32x4_t v129 = vmovl_u16(*(uint16x4_t *)v128.i8);
          float16x8_t v130 = (float16x8_t)vmovl_high_u16(v128);
          uint64_t v131 = v130.u32[0];
          v130.i16[0] = *(_WORD *)&v32[2 * v129.u32[0]];
          float v132 = (__int16 *)&v32[2 * v131];
          float v133 = (__int16 *)&v32[2 * v130.u32[1]];
          uint64_t v134 = v130.u32[3];
          float v135 = (__int16 *)&v32[2 * v130.u32[2]];
          v130.i16[1] = *(_WORD *)&v32[2 * v129.u32[1]];
          v130.i16[2] = *(_WORD *)&v32[2 * v129.u32[2]];
          v130.i16[3] = *(_WORD *)&v32[2 * v129.u32[3]];
          v130.i16[4] = *v132;
          v130.i16[5] = *v133;
          v130.i16[6] = *v135;
          v130.i16[7] = *(_WORD *)&v32[2 * v134];
          float16x8_t v136 = vmulq_f16(v114, v130);
          float16x8_t v137 = vmulq_f16(v117, v130);
          float16x8_t v138 = vmulq_f16(v121, v130);
          float16x8_t v139 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v328), v126, v327), v127, v326);
          float16x8_t v140 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v125, v325), v126, v324), v127, v323);
          float16x8_t v141 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v127, v319), v126, v320), v125, v321);
          float16x8_t v142 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v136, v328), v137, v327), v138, v326);
          float16x8_t v143 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v136, v325), v137, v324), v138, v323);
          float16x8_t v144 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v138, v319), v137, v320), v136, v321);
          uint16x8_t v145 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v139, (float16x8_t)0), v100));
          uint32x4_t v146 = vmovl_high_u16(v145);
          uint32x4_t v147 = vmovl_u16(*(uint16x4_t *)v145.i8);
          v41.i16[0] = *(_WORD *)&v35[2 * v147.u32[0]];
          v41.i16[1] = *(_WORD *)&v35[2 * v147.u32[1]];
          v41.i16[2] = *(_WORD *)&v35[2 * v147.u32[2]];
          v41.i16[3] = *(_WORD *)&v35[2 * v147.u32[3]];
          v41.i16[4] = *(_WORD *)&v35[2 * v146.u32[0]];
          v41.i16[5] = *(_WORD *)&v35[2 * v146.u32[1]];
          v41.i16[6] = *(_WORD *)&v35[2 * v146.u32[2]];
          v41.i16[7] = *(_WORD *)&v35[2 * v146.u32[3]];
          uint16x8_t v148 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v140, (float16x8_t)0), v100));
          uint32x4_t v149 = vmovl_high_u16(v148);
          int8x16_t v150 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v148.i8);
          v150.i16[0] = *(_WORD *)&v35[2 * v150.u32[0]];
          v150.i16[1] = *(_WORD *)&v35[2 * v150.u32[1]];
          v150.i16[2] = *(_WORD *)&v35[2 * v150.u32[2]];
          v150.i16[3] = *(_WORD *)&v35[2 * v150.u32[3]];
          v150.i16[4] = *(_WORD *)&v35[2 * v149.u32[0]];
          v150.i16[5] = *(_WORD *)&v35[2 * v149.u32[1]];
          v150.i16[6] = *(_WORD *)&v35[2 * v149.u32[2]];
          v150.i16[7] = *(_WORD *)&v35[2 * v149.u32[3]];
          uint16x8_t v151 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v141, (float16x8_t)0), v100));
          uint32x4_t v152 = vmovl_high_u16(v151);
          uint32x4_t v153 = vmovl_u16(*(uint16x4_t *)v151.i8);
          v141.i16[0] = *(_WORD *)&v35[2 * v153.u32[0]];
          v141.i16[1] = *(_WORD *)&v35[2 * v153.u32[1]];
          v141.i16[2] = *(_WORD *)&v35[2 * v153.u32[2]];
          v141.i16[3] = *(_WORD *)&v35[2 * v153.u32[3]];
          v141.i16[4] = *(_WORD *)&v35[2 * v152.u32[0]];
          v141.i16[5] = *(_WORD *)&v35[2 * v152.u32[1]];
          v141.i16[6] = *(_WORD *)&v35[2 * v152.u32[2]];
          v141.i16[7] = *(_WORD *)&v35[2 * v152.u32[3]];
          uint16x8_t v154 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v142, (float16x8_t)0), v100));
          uint32x4_t v155 = vmovl_high_u16(v154);
          uint32x4_t v156 = vmovl_u16(*(uint16x4_t *)v154.i8);
          uint64_t v157 = v156.u32[2];
          uint64_t v158 = v156.u32[3];
          uint64_t v159 = v156.u32[1];
          v142.i16[0] = *(_WORD *)&v35[2 * v156.u32[0]];
          uint16x8_t v160 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v143, (float16x8_t)0), v100));
          uint32x4_t v161 = vmovl_u16(*(uint16x4_t *)v160.i8);
          uint64_t v162 = v161.u32[1];
          uint64_t v163 = v161.u32[0];
          v142.i16[1] = *(_WORD *)&v35[2 * v159];
          v142.i16[2] = *(_WORD *)&v35[2 * v157];
          v142.i16[3] = *(_WORD *)&v35[2 * v158];
          v142.i16[4] = *(_WORD *)&v35[2 * v155.u32[0]];
          v142.i16[5] = *(_WORD *)&v35[2 * v155.u32[1]];
          v142.i16[6] = *(_WORD *)&v35[2 * v155.u32[2]];
          v142.i16[7] = *(_WORD *)&v35[2 * v155.u32[3]];
          uint32x4_t v164 = vmovl_high_u16(v160);
          uint64_t v165 = v161.u32[3];
          uint64_t v166 = v161.u32[2];
          uint64_t v167 = v164.u32[1];
          uint64_t v168 = v164.u32[0];
          uint64_t v169 = v164.u32[3];
          uint64_t v170 = v164.u32[2];
          int8x16_t v171 = (int8x16_t)vcvtq_u16_f16(vminq_f16(vmaxq_f16(v144, (float16x8_t)0), v100));
          int8x16_t v172 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v171.i8);
          uint32x4_t v173 = vmovl_high_u16((uint16x8_t)v171);
          v171.i16[0] = *(_WORD *)&v35[2 * v163];
          v171.i16[1] = *(_WORD *)&v35[2 * v162];
          v171.i16[2] = *(_WORD *)&v35[2 * v166];
          v171.i16[3] = *(_WORD *)&v35[2 * v165];
          v171.i16[4] = *(_WORD *)&v35[2 * v168];
          v171.i16[5] = *(_WORD *)&v35[2 * v167];
          v171.i16[6] = *(_WORD *)&v35[2 * v170];
          v171.i16[7] = *(_WORD *)&v35[2 * v169];
          v172.i16[0] = *(_WORD *)&v35[2 * v172.u32[0]];
          v172.i16[1] = *(_WORD *)&v35[2 * v172.u32[1]];
          v172.i16[2] = *(_WORD *)&v35[2 * v172.u32[2]];
          v172.i16[3] = *(_WORD *)&v35[2 * v172.u32[3]];
          v172.i16[4] = *(_WORD *)&v35[2 * v173.u32[0]];
          v172.i16[5] = *(_WORD *)&v35[2 * v173.u32[1]];
          v172.i16[6] = *(_WORD *)&v35[2 * v173.u32[2]];
          v172.i16[7] = *(_WORD *)&v35[2 * v173.u32[3]];
          v357.val[3] = v354;
          v357.val[0] = vcvtq_f32_f16(*(float16x4_t *)v41.i8);
          v357.val[1] = vcvtq_f32_f16(*(float16x4_t *)v150.i8);
          v357.val[2] = vcvtq_f32_f16(*(float16x4_t *)v141.i8);
          uint64_t v174 = v55 + 128;
          vst4q_f32((float *)v55, v357);
          __int16 v175 = (float *)(v55 + 64);
          float32x4_t v176 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
          float32x4_t v177 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v150, v150, 8uLL));
          float32x4_t v178 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL));
          vst4q_f32(v175, *(float32x4x4_t *)(&_Q6 - 3));
          float32x4_t v179 = v355;
          _Q0 = vcvtq_f32_f16(*(float16x4_t *)v142.i8);
          float32x4_t v180 = vcvtq_f32_f16(*(float16x4_t *)v171.i8);
          float32x4_t v181 = vcvtq_f32_f16(*(float16x4_t *)v172.i8);
          uint64_t v182 = v66 + 128;
          vst4q_f32((float *)v66, *(float32x4x4_t *)_Q0.f32);
          unint64_t v183 = (float *)(v66 + 64);
          float32x4_t v184 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL));
          float32x4_t v185 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v171, v171, 8uLL));
          float32x4_t v186 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v172, v172, 8uLL));
          vst4q_f32(v183, *(float32x4x4_t *)(&v99 - 3));
          uint64_t v55 = v174;
          uint64_t v66 = v182;
          v68 += 8;
          _S15 = v344;
          _S28 = v322;
        }
        while ((int)v68 < (int)v11 - 7);
        float v187 = &result[v68];
        unint64_t v188 = v11 & 0xFFFFFFF8;
      }
      while (v11 > v188)
      {
        _Q0.i8[0] = v187[1];
        float v189 = (float)_Q0.u32[0] - v356;
        unsigned int v190 = LODWORD(v318);
        float v191 = v318 * v189;
        LOBYTE(v190) = v57->i8[0];
        float v192 = _S28 * (float)((float)v190 - v340);
        float v193 = (float)(v318 * v189) + v192;
        float v194 = 8191.0;
        if (v193 <= 8191.0)
        {
          float v194 = (float)(v318 * v189) + v192;
          if (v193 < 0.0) {
            float v194 = 0.0;
          }
        }
        LOBYTE(v193) = *v187;
        float v195 = (float)LODWORD(v193) - v356;
        float v196 = (float)(v317 * v189) + (float)(v195 * v336);
        float v197 = 8191.0;
        if ((float)(v192 + v196) <= 8191.0)
        {
          float v197 = v192 + v196;
          if ((float)(v192 + v196) < 0.0) {
            float v197 = 0.0;
          }
        }
        float v198 = v338 * v195;
        float v199 = (float)(v338 * v195) + v192;
        float v200 = 8191.0;
        if (v199 <= 8191.0)
        {
          float v200 = v199;
          if (v199 < 0.0) {
            float v200 = 0.0;
          }
        }
        LOBYTE(v199) = v57->i8[1];
        float v201 = _S28 * (float)((float)LODWORD(v199) - v340);
        float v202 = 8191.0;
        if ((float)(v191 + v201) <= 8191.0)
        {
          float v202 = v191 + v201;
          if ((float)(v191 + v201) < 0.0) {
            float v202 = 0.0;
          }
        }
        float v203 = 8191.0;
        if ((float)(v196 + v201) <= 8191.0)
        {
          float v203 = v196 + v201;
          if ((float)(v196 + v201) < 0.0) {
            float v203 = 0.0;
          }
        }
        float v204 = v198 + v201;
        BOOL v205 = (float)(v198 + v201) <= 8191.0;
        float v206 = 8191.0;
        if (v205)
        {
          float v206 = v204;
          if (v204 < 0.0) {
            float v206 = 0.0;
          }
        }
        LOBYTE(v204) = v65->i8[0];
        float v207 = _S28 * (float)((float)LODWORD(v204) - v340);
        float v208 = 8191.0;
        if ((float)(v191 + v207) <= 8191.0)
        {
          float v208 = v191 + v207;
          if ((float)(v191 + v207) < 0.0) {
            float v208 = 0.0;
          }
        }
        float v209 = 8191.0;
        if ((float)(v196 + v207) <= 8191.0)
        {
          float v209 = v196 + v207;
          if ((float)(v196 + v207) < 0.0) {
            float v209 = 0.0;
          }
        }
        float v210 = v198 + v207;
        BOOL v205 = (float)(v198 + v207) <= 8191.0;
        float v211 = 8191.0;
        if (v205)
        {
          float v211 = v210;
          if (v210 < 0.0) {
            float v211 = 0.0;
          }
        }
        v41.i8[0] = v65->i8[1];
        float v212 = _S28 * (float)((float)v41.u32[0] - v340);
        float v213 = v191 + v212;
        float v214 = 8191.0;
        if (v213 <= 8191.0)
        {
          float v214 = v213;
          if (v213 < 0.0) {
            float v214 = 0.0;
          }
        }
        float v215 = v196 + v212;
        BOOL v205 = (float)(v196 + v212) <= 8191.0;
        float v216 = 8191.0;
        if (v205)
        {
          float v216 = v215;
          if (v215 < 0.0) {
            float v216 = 0.0;
          }
        }
        float v217 = v198 + v212;
        BOOL v205 = (float)(v198 + v212) <= 8191.0;
        float v218 = 8191.0;
        if (v205)
        {
          float v218 = v217;
          if (v217 < 0.0) {
            float v218 = 0.0;
          }
        }
        if (v56)
        {
          unsigned int v219 = v56->u8[0];
          unsigned int v220 = v56->u8[1];
          float v56 = (int8x8_t *)((char *)v56 + 2);
          unsigned int v221 = *v67;
          unsigned int v222 = v67[1];
          v67 += 2;
        }
        else
        {
          unsigned int v219 = 0;
          unsigned int v220 = 0;
          unsigned int v221 = 0;
          unsigned int v222 = 0;
        }
        _H6 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v194, 0.0), 8191.0))];
        __asm { FCVT            S6, H6 }
        _H1 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v197, 0.0), 8191.0))];
        __asm { FCVT            S1, H1 }
        _H2 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v200, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v202, 0.0), 8191.0))];
        _H4 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v203, 0.0), 8191.0))];
        _H5 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v206, 0.0), 8191.0))];
        _H27 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v208, 0.0), 8191.0))];
        _H31 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v209, 0.0), 8191.0))];
        _H25 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v211, 0.0), 8191.0))];
        _H7 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v214, 0.0), 8191.0))];
        _H16 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v216, 0.0), 8191.0))];
        _H17 = *(_WORD *)&v34[2 * llroundf(fminf(fmaxf(v218, 0.0), 8191.0))];
        float v238 = fmaxf(_S6, fmaxf(_S1, _S2));
        float v239 = (float)((float)((float)(v343 * _S1) + (float)(_S15 * _S6)) + (float)(v342 * _S2)) + (float)(v341 * v238);
        float v240 = 8191.0;
        if (v239 <= 8191.0)
        {
          float v240 = (float)((float)((float)(v343 * _S1) + (float)(_S15 * _S6)) + (float)(v342 * _S2))
               + (float)(v341 * v238);
          if (v239 < 0.0) {
            float v240 = 0.0;
          }
        }
        __asm
        {
          FCVT            S3, H3
          FCVT            S4, H4
          FCVT            S5, H5
        }
        _H23 = *(_WORD *)&v32[2 * llroundf(v240)];
        float v245 = fmaxf(_S3, fmaxf(_S4, _S5));
        float v246 = (float)((float)((float)(v343 * _S4) + (float)(_S15 * _S3)) + (float)(v342 * _S5)) + (float)(v341 * v245);
        float v247 = 8191.0;
        if (v246 <= 8191.0)
        {
          float v247 = (float)((float)((float)(v343 * _S4) + (float)(_S15 * _S3)) + (float)(v342 * _S5))
               + (float)(v341 * v245);
          if (v246 < 0.0) {
            float v247 = 0.0;
          }
        }
        __asm
        {
          FCVT            S26, H27
          FCVT            S27, H31
          FCVT            S25, H25
        }
        _H31 = *(_WORD *)&v32[2 * llroundf(v247)];
        float v252 = fmaxf(_S26, fmaxf(_S27, _S25));
        float v253 = (float)((float)((float)(v343 * _S27) + (float)(_S15 * _S26)) + (float)(v342 * _S25))
             + (float)(v341 * v252);
        float v254 = 8191.0;
        if (v253 <= 8191.0)
        {
          float v254 = (float)((float)((float)(v343 * _S27) + (float)(_S15 * _S26)) + (float)(v342 * _S25))
               + (float)(v341 * v252);
          if (v253 < 0.0) {
            float v254 = 0.0;
          }
        }
        __asm
        {
          FCVT            S7, H7
          FCVT            S16, H16
          FCVT            S17, H17
        }
        _H9 = *(_WORD *)&v32[2 * llroundf(v254)];
        float v259 = fmaxf(_S7, fmaxf(_S16, _S17));
        float v260 = (float)((float)((float)(v343 * _S16) + (float)(_S15 * _S7)) + (float)(v342 * _S17))
             + (float)(v341 * v259);
        float v261 = 8191.0;
        if (v260 <= 8191.0)
        {
          float v261 = (float)((float)((float)(v343 * _S16) + (float)(_S15 * _S7)) + (float)(v342 * _S17))
               + (float)(v341 * v259);
          if (v260 < 0.0) {
            float v261 = 0.0;
          }
        }
        __asm { FCVT            S18, H23 }
        float v263 = _S6 * _S18;
        _S1 = _S1 * _S18;
        float v265 = _S2 * _S18;
        __asm { FCVT            S18, H31 }
        float v267 = _S3 * _S18;
        float v268 = _S4 * _S18;
        float v269 = _S5 * _S18;
        __asm { FCVT            S18, H9 }
        float v271 = _S26 * _S18;
        float v272 = _S27 * _S18;
        float v273 = _S25 * _S18;
        _H22 = *(_WORD *)&v32[2 * llroundf(v261)];
        __asm { FCVT            S22, H22 }
        float v276 = _S7 * _S22;
        _S16 = _S16 * _S22;
        _S17 = _S17 * _S22;
        float v279 = (float)((float)(v352 * _S1) + (float)(v263 * v353)) + (float)(v265 * v351);
        float v280 = (float)((float)(v349 * _S1) + (float)(v263 * v350)) + (float)(v265 * v348);
        _S2 = (float)((float)(v346 * _S1) + (float)(v263 * v347)) + (float)(v265 * v345);
        _S6 = (float)((float)(v352 * v268) + (float)(v267 * v353)) + (float)(v269 * v351);
        float v283 = (float)((float)(v349 * v268) + (float)(v267 * v350)) + (float)(v269 * v348);
        _S3 = (float)((float)(v346 * v268) + (float)(v267 * v347)) + (float)(v269 * v345);
        _S4 = (float)((float)(v352 * v272) + (float)(v271 * v353)) + (float)(v273 * v351);
        _S5 = (float)((float)(v349 * v272) + (float)(v271 * v350)) + (float)(v273 * v348);
        _S18 = (float)((float)(v346 * v272) + (float)(v271 * v347)) + (float)(v273 * v345);
        _S19 = (float)((float)(v352 * _S16) + (float)(v276 * v353)) + (float)(_S17 * v351);
        _S20 = (float)((float)(v349 * _S16) + (float)(v276 * v350)) + (float)(_S17 * v348);
        LOWORD(_S1) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v279, 0.0), 8191.0))];
        float v290 = (float)((float)(v346 * _S16) + (float)(v276 * v347)) + (float)(_S17 * v345);
        LOWORD(_S16) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v280, 0.0), 8191.0))];
        LOWORD(_S2) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0))];
        LOWORD(_S6) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0))];
        LOWORD(_S17) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v283, 0.0), 8191.0))];
        LOWORD(_S3) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
        LOWORD(_S4) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0))];
        LOWORD(_S5) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
        LOWORD(_S18) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0))];
        LOWORD(_S19) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S19, 0.0), 8191.0))];
        LOWORD(_S20) = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(_S20, 0.0), 8191.0))];
        _H0 = *(_WORD *)&v35[2 * llroundf(fminf(fmaxf(v290, 0.0), 8191.0))];
        *(float *)v41.i32 = (float)v222;
        __asm
        {
          FCVT            S1, H1
          FCVT            S16, H16
        }
        *(_DWORD *)uint64_t v55 = _S1;
        *(_DWORD *)(v55 + 4) = _S16;
        __asm
        {
          FCVT            S1, H2
          FCVT            S2, H6
          FCVT            S6, H17
          FCVT            S3, H3
          FCVT            S4, H4
          FCVT            S5, H5
          FCVT            S16, H18
          FCVT            S17, H19
          FCVT            S18, H20
          FCVT            S0, H0
        }
        float v303 = (float)v219 * 0.0039216;
        if (!v56) {
          float v303 = 1.0;
        }
        float v304 = (float)v220 * 0.0039216;
        if (!v56) {
          float v304 = 1.0;
        }
        float v305 = (float)v221 * 0.0039216;
        if (!v56) {
          float v305 = 1.0;
        }
        *(_DWORD *)(v55 + 8) = _S1;
        *(float *)(v55 + 12) = v303;
        *(_DWORD *)(v55 + 16) = _S2;
        *(_DWORD *)(v55 + 20) = _S6;
        *(_DWORD *)(v55 + 24) = _S3;
        *(float *)(v55 + 28) = v304;
        *(_DWORD *)uint64_t v66 = _S4;
        *(_DWORD *)(v66 + 4) = _S5;
        float v306 = *(float *)v41.i32 * 0.0039216;
        *(_DWORD *)(v66 + 8) = _S16;
        *(float *)(v66 + 12) = v305;
        if (!v56) {
          float v306 = 1.0;
        }
        *(_DWORD *)(v66 + 16) = _S17;
        *(_DWORD *)(v66 + 20) = _S18;
        v188 += 2;
        v187 += 2;
        float v57 = (int8x8_t *)((char *)v57 + 2);
        *(_DWORD *)(v66 + 24) = _Q0.i32[0];
        *(float *)(v66 + 28) = v306;
        int8x8_t v65 = (int8x8_t *)((char *)v65 + 2);
        v55 += 32;
        v66 += 32;
      }
      uint64_t v18 = v312;
      float v57 = (int8x8_t *)&v313[v312];
      uint64_t v20 = v310;
      result += v311;
      float v56 = (int8x8_t *)&v314[v310];
      uint64_t v21 = v309;
      uint64_t v55 = v315 + v309;
      uint64_t v10 = v316 + 2;
      _H14 = v307;
    }
    while (v308 > v316 + 2);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Tone_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v5 = *(void *)(result + 28);
  unint64_t v6 = 2 * *result;
  unint64_t v7 = v5 * a2 / v6;
  unint64_t v8 = (v5 + v5 * a2) / v6;
  if (2 * v8 != 2 * v7)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(result + 20);
    uint64_t v11 = *(void *)(result + 44) + 2 * v7;
    unint64_t v12 = 2 * v8 - 2 * v7;
    uint64_t v13 = *((void *)result + 19);
    uint64_t v14 = (void *)*((void *)result + 7);
    uint64_t v15 = (uint64_t *)*((void *)result + 8);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = v15[2];
    uint64_t v19 = **((void **)result + 17);
    float v20 = 8191.0 / (float)*(unsigned int *)(v13 + 128);
    LOWORD(a5) = *(_WORD *)(v13 + 140);
    float v21 = (float)LODWORD(a5);
    LOWORD(a5) = *(_WORD *)(v13 + 142);
    float v22 = (float)LODWORD(a5);
    float v23 = v20 * *(float *)v13;
    float v178 = v20 * *(float *)(v13 + 16);
    float v179 = v20 * *(float *)(v13 + 8);
    float v176 = v20 * *(float *)(v13 + 28);
    float v177 = v20 * *(float *)(v13 + 20);
    _S1 = *(unsigned int *)(v13 + 72);
    float v25 = *(float *)(v13 + 76);
    float v175 = *(float *)&_S1;
    float v26 = *(float *)(v13 + 80);
    float v27 = *(float *)(v13 + 84);
    float v28 = *(float *)(v13 + 88);
    float v29 = *(float *)(v13 + 92);
    float v30 = *(float *)(v13 + 96);
    float v31 = *(float *)(v13 + 100);
    uint64_t v32 = v13 + 164;
    uint64_t v33 = v13 + 16548;
    uint64_t v34 = v13 + 32932;
    float v35 = *(float *)(v13 + 104);
    float v36 = *(float *)(v13 + 108);
    float v37 = *(float *)(v13 + 112);
    float v38 = *(float *)(v13 + 116);
    float v39 = *(float *)(v13 + 120);
    uint64_t v40 = *((void *)result + 14);
    int8x16_t v41 = (void *)*((void *)result + 16);
    uint64_t v42 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v6);
    uint64_t v43 = *(void *)(result + 36);
    uint64_t result = (unsigned __int8 *)(*v14 + v16 * v11 + v43);
    uint64_t v44 = v14[2];
    _ZF = v44 == 0;
    unint64_t v46 = (unsigned __int8 *)(v44 + v18 * v11 + v43);
    if (_ZF) {
      float16x8_t v47 = 0;
    }
    else {
      float16x8_t v47 = v46;
    }
    uint64_t v48 = *v41 + v42 * v19 + 16 * v40;
    if (v11 >= 0) {
      uint64_t v49 = v11;
    }
    else {
      uint64_t v49 = v11 + 1;
    }
    uint64_t v50 = v14[1] + v17 * (v49 >> 1) + v43;
    float v181 = (float)LODWORD(a5);
    float v182 = v21;
    float v180 = v23;
    do
    {
      uint64_t v51 = v48 + v19;
      uint64_t v52 = &v47[v18];
      uint64_t v53 = &result[v16];
      if (v10)
      {
        unint64_t v54 = 0;
        uint64_t v55 = v48 + v19;
        float v56 = &result[v16];
        float v57 = &v47[v18];
        do
        {
          LOBYTE(_S1) = *(unsigned char *)(v50 + v54 + 1);
          float v58 = (float)_S1 - v22;
          unsigned int v59 = LODWORD(v179);
          float v60 = v179 * v58;
          LOBYTE(v59) = *result;
          float v61 = v23 * (float)((float)v59 - v21);
          float v62 = (float)(v179 * v58) + v61;
          float v63 = 8191.0;
          if (v62 <= 8191.0)
          {
            float v63 = (float)(v179 * v58) + v61;
            if (v62 < 0.0) {
              float v63 = 0.0;
            }
          }
          LOBYTE(v62) = *(unsigned char *)(v50 + v54);
          float v64 = (float)LODWORD(v62) - v22;
          float v65 = (float)(v177 * v58) + (float)(v64 * v178);
          float v66 = 8191.0;
          if ((float)(v61 + v65) <= 8191.0)
          {
            float v66 = v61 + v65;
            if ((float)(v61 + v65) < 0.0) {
              float v66 = 0.0;
            }
          }
          float v67 = v176 * v64;
          float v68 = (float)(v176 * v64) + v61;
          float v69 = 8191.0;
          if (v68 <= 8191.0)
          {
            float v69 = v68;
            if (v68 < 0.0) {
              float v69 = 0.0;
            }
          }
          LOBYTE(v68) = result[1];
          float v70 = v23 * (float)((float)LODWORD(v68) - v21);
          float v71 = 8191.0;
          if ((float)(v60 + v70) <= 8191.0)
          {
            float v71 = v60 + v70;
            if ((float)(v60 + v70) < 0.0) {
              float v71 = 0.0;
            }
          }
          float v72 = 8191.0;
          if ((float)(v65 + v70) <= 8191.0)
          {
            float v72 = v65 + v70;
            if ((float)(v65 + v70) < 0.0) {
              float v72 = 0.0;
            }
          }
          float v73 = v67 + v70;
          float v74 = 8191.0;
          if (v73 <= 8191.0)
          {
            float v74 = v73;
            if (v73 < 0.0) {
              float v74 = 0.0;
            }
          }
          LOBYTE(v73) = *v56;
          float v75 = (float)LODWORD(v73) - v21;
          float v76 = v23 * v75;
          float v77 = 8191.0;
          if ((float)(v60 + (float)(v23 * v75)) <= 8191.0)
          {
            float v77 = v60 + (float)(v23 * v75);
            if (v77 < 0.0) {
              float v77 = 0.0;
            }
          }
          float v78 = 8191.0;
          if ((float)(v65 + v76) <= 8191.0)
          {
            float v78 = v65 + v76;
            if ((float)(v65 + v76) < 0.0) {
              float v78 = 0.0;
            }
          }
          float v79 = v67 + v76;
          float v80 = 8191.0;
          if (v79 <= 8191.0)
          {
            float v80 = v79;
            if (v79 < 0.0) {
              float v80 = 0.0;
            }
          }
          LOBYTE(v75) = v56[1];
          float v81 = v23 * (float)((float)LODWORD(v75) - v21);
          float v82 = v60 + v81;
          BOOL v83 = (float)(v60 + v81) <= 8191.0;
          float v84 = 8191.0;
          if (v83)
          {
            float v84 = v82;
            if (v82 < 0.0) {
              float v84 = 0.0;
            }
          }
          float v85 = v65 + v81;
          BOOL v83 = (float)(v65 + v81) <= 8191.0;
          float v86 = 8191.0;
          if (v83)
          {
            float v86 = v85;
            if (v85 < 0.0) {
              float v86 = 0.0;
            }
          }
          float v87 = v67 + v81;
          float v88 = 8191.0;
          if (v87 <= 8191.0)
          {
            float v88 = v87;
            if (v87 < 0.0) {
              float v88 = 0.0;
            }
          }
          if (v47)
          {
            unsigned int v89 = *v47;
            unsigned int v90 = v47[1];
            v47 += 2;
            unsigned int v91 = *v57;
            unsigned int v92 = v57[1];
            v57 += 2;
          }
          else
          {
            unsigned int v89 = 0;
            unsigned int v90 = 0;
            unsigned int v91 = 0;
            unsigned int v92 = 0;
          }
          _S1 = fmaxf(v63, 0.0);
          float v94 = 8191.0;
          LOWORD(_S1) = *(_WORD *)(v32 + 2 * llroundf(fminf(_S1, 8191.0)));
          __asm { FCVT            S4, H1 }
          LOWORD(_S1) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v66, 0.0), 8191.0)));
          __asm { FCVT            S8, H1 }
          LOWORD(_S1) = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v69, 0.0), 8191.0)));
          __asm { FCVT            S9, H1 }
          _H1 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          _H3 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v72, 0.0), 8191.0)));
          _H12 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v74, 0.0), 8191.0)));
          _H14 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v77, 0.0), 8191.0)));
          _H2 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v78, 0.0), 8191.0)));
          _H30 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v80, 0.0), 8191.0)));
          _H10 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          _H11 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v86, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v32 + 2 * llroundf(fminf(fmaxf(v88, 0.0), 8191.0)));
          float v110 = fmaxf(_S4, fmaxf(_S8, _S9));
          float v111 = (float)((float)((float)(v37 * _S8) + (float)(v36 * _S4)) + (float)(v38 * _S9)) + (float)(v39 * v110);
          float v112 = 8191.0;
          if (v111 <= 8191.0)
          {
            float v112 = (float)((float)((float)(v37 * _S8) + (float)(v36 * _S4)) + (float)(v38 * _S9)) + (float)(v39 * v110);
            if (v111 < 0.0) {
              float v112 = 0.0;
            }
          }
          __asm
          {
            FCVT            S5, H1
            FCVT            S6, H3
            FCVT            S7, H12
          }
          _H12 = *(_WORD *)(v33 + 2 * llroundf(v112));
          float v117 = (float)((float)((float)(v37 * _S6) + (float)(v36 * _S5)) + (float)(v38 * _S7))
               + (float)(v39 * fmaxf(_S5, fmaxf(_S6, _S7)));
          float v118 = 8191.0;
          if (v117 <= 8191.0)
          {
            float v118 = v117;
            if (v117 < 0.0) {
              float v118 = 0.0;
            }
          }
          __asm
          {
            FCVT            S14, H14
            FCVT            S15, H2
            FCVT            S2, H30
          }
          _H30 = *(_WORD *)(v33 + 2 * llroundf(v118));
          float v123 = fmaxf(_S14, fmaxf(_S15, _S2));
          float v124 = (float)((float)((float)(v37 * _S15) + (float)(v36 * _S14)) + (float)(v38 * _S2)) + (float)(v39 * v123);
          float v125 = 8191.0;
          if (v124 <= 8191.0)
          {
            float v125 = (float)((float)((float)(v37 * _S15) + (float)(v36 * _S14)) + (float)(v38 * _S2))
                 + (float)(v39 * v123);
            if (v124 < 0.0) {
              float v125 = 0.0;
            }
          }
          __asm
          {
            FCVT            S1, H10
            FCVT            S3, H11
            FCVT            S10, H13
          }
          _H11 = *(_WORD *)(v33 + 2 * llroundf(v125));
          float v130 = fmaxf(_S1, fmaxf(_S3, _S10));
          float v131 = (float)((float)((float)(v37 * _S3) + (float)(v36 * _S1)) + (float)(v38 * _S10)) + (float)(v39 * v130);
          if (v131 <= 8191.0)
          {
            float v94 = (float)((float)((float)(v37 * _S3) + (float)(v36 * _S1)) + (float)(v38 * _S10)) + (float)(v39 * v130);
            if (v131 < 0.0) {
              float v94 = 0.0;
            }
          }
          __asm { FCVT            S16, H12 }
          _S4 = _S4 * _S16;
          float v134 = _S8 * _S16;
          float v135 = _S9 * _S16;
          __asm { FCVT            S30, H30 }
          float v137 = _S5 * _S30;
          float v138 = _S6 * _S30;
          float v139 = _S7 * _S30;
          __asm { FCVT            S30, H11 }
          float v141 = _S14 * _S30;
          float v142 = _S15 * _S30;
          float v143 = _S2 * _S30;
          LOWORD(_S30) = *(_WORD *)(v33 + 2 * llroundf(v94));
          __asm { FCVT            S30, H30 }
          float v145 = _S1 * _S30;
          _S3 = _S3 * _S30;
          _S30 = _S10 * _S30;
          _S31 = (float)((float)(v25 * v134) + (float)(_S4 * v175)) + (float)(v135 * v26);
          float v149 = (float)((float)(v28 * v134) + (float)(_S4 * v27)) + (float)(v135 * v29);
          _S16 = (float)((float)(v31 * v134) + (float)(_S4 * v30)) + (float)(v135 * v35);
          _S8 = (float)((float)(v25 * v138) + (float)(v137 * v175)) + (float)(v139 * v26);
          float v152 = (float)((float)(v28 * v138) + (float)(v137 * v27)) + (float)(v139 * v29);
          _S5 = (float)((float)(v31 * v138) + (float)(v137 * v30)) + (float)(v139 * v35);
          _S6 = (float)((float)(v25 * v142) + (float)(v141 * v175)) + (float)(v143 * v26);
          _S7 = (float)((float)(v28 * v142) + (float)(v141 * v27)) + (float)(v143 * v29);
          _S2 = (float)((float)(v31 * v142) + (float)(v141 * v30)) + (float)(v143 * v35);
          _S9 = (float)((float)(v25 * _S3) + (float)(v145 * v175)) + (float)(_S30 * v26);
          float v158 = (float)((float)(v28 * _S3) + (float)(v145 * v27)) + (float)(_S30 * v29);
          LOWORD(_S4) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          _S1 = (float)((float)(v31 * _S3) + (float)(v145 * v30)) + (float)(_S30 * v35);
          LOWORD(_S3) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v149, 0.0), 8191.0)));
          LOWORD(_S16) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v152, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          LOWORD(_S6) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0)));
          LOWORD(_S7) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0)));
          LOWORD(_S2) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S9, 0.0), 8191.0)));
          LOWORD(_S9) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(v158, 0.0), 8191.0)));
          LOWORD(_S1) = *(_WORD *)(v34 + 2 * llroundf(fminf(fmaxf(_S1, 0.0), 8191.0)));
          __asm
          {
            FCVT            S4, H4
            FCVT            S3, H3
          }
          *(_DWORD *)uint64_t v48 = _S4;
          *(_DWORD *)(v48 + 4) = _S3;
          result += 2;
          v56 += 2;
          __asm
          {
            FCVT            S3, H16
            FCVT            S4, H30
            FCVT            S16, H31
            FCVT            S5, H5
            FCVT            S6, H6
            FCVT            S7, H7
            FCVT            S2, H2
            FCVT            S30, H8
            FCVT            S31, H9
            FCVT            S1, H1
          }
          float v171 = (float)v89 * 0.0039216;
          if (!v47) {
            float v171 = 1.0;
          }
          float v172 = (float)v90 * 0.0039216;
          if (!v47) {
            float v172 = 1.0;
          }
          float v173 = (float)v91 * 0.0039216;
          if (!v47) {
            float v173 = 1.0;
          }
          *(_DWORD *)(v48 + 8) = _S3;
          *(float *)(v48 + 12) = v171;
          *(_DWORD *)(v48 + 16) = _S4;
          *(_DWORD *)(v48 + 20) = _S16;
          *(_DWORD *)(v48 + 24) = _S5;
          *(float *)(v48 + 28) = v172;
          *(_DWORD *)uint64_t v55 = _S6;
          *(_DWORD *)(v55 + 4) = _S7;
          *(_DWORD *)(v55 + 8) = _S2;
          *(float *)(v55 + 12) = v173;
          if (v47) {
            float v174 = (float)v92 * 0.0039216;
          }
          else {
            float v174 = 1.0;
          }
          v48 += 32;
          *(_DWORD *)(v55 + 16) = _S30;
          *(_DWORD *)(v55 + 20) = _S31;
          *(float *)(v55 + 24) = *(float *)&_S1;
          *(float *)(v55 + 28) = v174;
          v55 += 32;
          v54 += 2;
          float v22 = v181;
          float v21 = v182;
          float v23 = v180;
        }
        while (v10 > v54);
      }
      uint64_t result = &v53[v16];
      v50 += v17;
      float16x8_t v47 = &v52[v18];
      uint64_t v48 = v51 + v19;
      v9 += 2;
    }
    while (v12 > v9);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_RGfA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, int16x4_t _D0, double a4, float32x4_t a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44);
    uint64_t v13 = v12 + 2 * v8;
    uint64_t v14 = v12 + 2 * v9;
    uint64_t v15 = (float32x2_t *)*((void *)result + 19);
    uint64_t v16 = (uint64_t *)*((void *)result + 7);
    uint64_t v17 = (uint64_t *)*((void *)result + 8);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = **((void **)result + 17);
    unsigned int v22 = v15[17].u16[2];
    unsigned int v23 = v15[17].u16[3];
    _D0.i32[0] = v15->i32[0];
    v24.i32[0] = v15[3].i32[1];
    unint64_t v255 = v14 - v13;
    float v25 = (char *)&v15[20] + 4;
    a5.f32[0] = 8191.0 / (float)v15[16].u32[0];
    float v26 = (float)v22;
    float v283 = (float)v23;
    _S27 = a5.f32[0] * v15->f32[0];
    uint64_t v28 = (char *)&v15[2068] + 4;
    __asm { FCVT            H0, S27 }
    short float v274 = *(short float *)_D0.i16;
    *(short float *)_D0.i16 = (short float)v22;
    float16x8_t v282 = (float16x8_t)vdupq_lane_s16(_D0, 0);
    v24.i32[1] = v15[1].i32[0];
    *(float32x2_t *)v5.f32 = vmul_n_f32(v24, a5.f32[0]);
    short float v33 = -(short float)v23;
    *(float32x2_t *)a5.f32 = vmul_n_f32(v15[2], a5.f32[0]);
    float16x8_t v280 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v5), 0);
    float16x8_t v277 = vmulq_n_f16(v280, v33);
    float16x8_t v278 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(a5), 0);
    float16x8_t v276 = vmulq_n_f16(v278, v33);
    float v293 = v15[9].f32[0];
    __asm { FCVT            H0, S3 }
    short float v275 = _H0;
    float v292 = v15[9].f32[1];
    __asm { FCVT            H0, S4 }
    short float v273 = _H0;
    float v291 = v15[10].f32[0];
    __asm { FCVT            H0, S5 }
    short float v271 = _H0;
    float v290 = v15[10].f32[1];
    __asm { FCVT            H0, S6 }
    short float v270 = _H0;
    float v289 = v15[11].f32[0];
    __asm { FCVT            H0, S7 }
    short float v269 = _H0;
    float v288 = v15[11].f32[1];
    __asm { FCVT            H0, S16 }
    short float v268 = _H0;
    float v287 = v15[12].f32[0];
    __asm { FCVT            H0, S18 }
    short float v267 = _H0;
    float v286 = v15[12].f32[1];
    __asm { FCVT            H0, S19 }
    short float v266 = _H0;
    float v285 = v15[13].f32[0];
    __asm { FCVT            H0, S21 }
    short float v265 = _H0;
    uint64_t v44 = v16[1];
    uint64_t v43 = v16[2];
    if (v13 >= 0) {
      uint64_t v45 = v13;
    }
    else {
      uint64_t v45 = v13 + 1;
    }
    uint64_t v46 = *v16;
    uint64_t v258 = v19;
    uint64_t v47 = v44 + v19 * (v45 >> 1);
    uint64_t v48 = *(void *)(result + 36);
    uint64_t v49 = (int8x8_t *)(v43 + v20 * v13 + v48);
    uint64_t v50 = **((void **)result + 16)
        + v21 * (*((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7))
        + 16 * *((void *)result + 14);
    if (!v43) {
      uint64_t v49 = 0;
    }
    uint64_t result = (unsigned __int8 *)(v47 + v48);
    uint64_t v51 = (int8x8_t *)(v46 + v18 * v13 + v48);
    float v281 = v5.f32[0];
    _D0.i32[0] = a5.i32[1];
    float v263 = a5.f32[1];
    float v279 = a5.f32[0];
    float v264 = v5.f32[1];
    v53.i64[0] = 0x9000900090009000;
    v53.i64[1] = 0x9000900090009000;
    uint64_t v259 = v18;
    uint64_t v256 = v21;
    uint64_t v257 = v20;
    float v284 = v26;
    float v272 = _S27;
    do
    {
      unint64_t v54 = (int8x8_t *)((char *)v51 + v18);
      uint64_t v55 = v50 + v21;
      float v56 = (unsigned __int8 *)v49 + v20;
      float v261 = (unsigned __int8 *)v49 + v20;
      uint64_t v262 = v50 + v21;
      float v260 = (char *)v51 + v18;
      if ((int)v11 < 8)
      {
        unint64_t v166 = 0;
        uint64_t v165 = result;
      }
      else
      {
        uint64_t v57 = 0;
        do
        {
          if (v49)
          {
            int8x8_t v58 = *v49++;
            int8x8_t v59 = v58;
            int8x8_t v60 = *(int8x8_t *)v56;
            v56 += 8;
            int8x8_t v61 = v60;
          }
          else
          {
            int8x8_t v59 = 0;
            int8x8_t v61 = 0;
          }
          int8x8_t v62 = *(int8x8_t *)&result[v57];
          *(int8x8_t *)v63.i8 = vzip1_s8(v62, 0);
          v63.u64[1] = (unint64_t)vzip2_s8(v62, 0);
          float16x8_t v64 = vcvtq_f16_u16(v63);
          int8x16_t v65 = (int8x16_t)vmlaq_f16(v277, v280, v64);
          int8x16_t v66 = (int8x16_t)vmlaq_f16(v276, v278, v64);
          v64.i64[0] = vextq_s8(v65, v65, 8uLL).u64[0];
          *(int16x4_t *)v67.i8 = vuzp1_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v64.i8);
          *(int16x4_t *)v64.i8 = vuzp2_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v64.i8);
          v64.u64[1] = (unint64_t)v61;
          float16x8_t v68 = (float16x8_t)vzip1q_s16((int16x8_t)v64, (int16x8_t)v64);
          v67.u64[1] = (unint64_t)v61;
          float16x8_t v69 = (float16x8_t)vzip1q_s16(v67, v67);
          v64.i64[0] = vextq_s8(v66, v66, 8uLL).u64[0];
          *(float16x4_t *)v64.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v64.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v64.i8));
          v64.u64[1] = (unint64_t)v61;
          int8x8_t v70 = *v51++;
          float16x8_t v71 = (float16x8_t)vzip1q_s16((int16x8_t)v64, (int16x8_t)v64);
          *(int8x8_t *)v64.i8 = vzip1_s8(v70, 0);
          v64.u64[1] = (unint64_t)vzip2_s8(v70, 0);
          int8x8_t v72 = *v54++;
          *(int8x8_t *)v66.i8 = vzip1_s8(v72, 0);
          v66.u64[1] = (unint64_t)vzip2_s8(v72, 0);
          float16x8_t v73 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v64), v282);
          float16x8_t v74 = vsubq_f16(vcvtq_f16_u16((uint16x8_t)v66), v282);
          float16x8_t v75 = vmlaq_n_f16(v68, v73, v274);
          float16x8_t v76 = vmlaq_n_f16(v68, v74, v274);
          float16x8_t v77 = vmlaq_n_f16(v71, v73, v274);
          float16x8_t v78 = vmlaq_n_f16(v71, v74, v274);
          float16x8_t v79 = vmlaq_n_f16(v69, v73, v274);
          float16x8_t v80 = vmlaq_n_f16(v69, v74, v274);
          if (v49)
          {
            *(int8x8_t *)v81.i8 = vzip1_s8(v59, 0);
            v81.u64[1] = (unint64_t)vzip2_s8(v59, 0);
            float16x8_t v82 = (float16x8_t)vdupq_n_s16(0x1C04u);
            int8x16_t v83 = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v81), v82);
            float32x4_t v294 = vcvtq_f32_f16(*(float16x4_t *)v83.i8);
            *(int8x8_t *)v84.i8 = vzip1_s8(v61, 0);
            v84.u64[1] = (unint64_t)vzip2_s8(v61, 0);
            _Q3 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL));
            int8x16_t v86 = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v84), v82);
            float32x4_t v295 = vcvtq_f32_f16(*(float16x4_t *)v86.i8);
            float32x4_t v87 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL));
          }
          else
          {
            __asm { FMOV            V3.4S, #1.0 }
            float32x4_t v294 = _Q3;
            float32x4_t v295 = _Q3;
            float32x4_t v87 = _Q3;
          }
          uint16x8_t v88 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v75, (float16x8_t)0), v53));
          float16x8_t v89 = (float16x8_t)vmovl_high_u16(v88);
          uint32x4_t v90 = vmovl_u16(*(uint16x4_t *)v88.i8);
          v91.i64[0] = v89.u32[2];
          v91.i64[1] = v89.u32[3];
          float16x8_t v92 = v91;
          v91.i64[0] = v89.u32[0];
          v89.i16[0] = *(_WORD *)&v25[2 * v90.u32[0]];
          float16x8_t v93 = (__int16 *)&v25[2 * v89.u32[1]];
          v89.i16[1] = *(_WORD *)&v25[2 * v90.u32[1]];
          v89.i16[2] = *(_WORD *)&v25[2 * v90.u32[2]];
          v89.i16[3] = *(_WORD *)&v25[2 * v90.u32[3]];
          v89.i16[4] = *(_WORD *)&v25[2 * v91.i64[0]];
          v89.i16[5] = *v93;
          v89.i16[6] = *(_WORD *)&v25[2 * v92.i64[0]];
          v89.i16[7] = *(_WORD *)&v25[2 * v92.i64[1]];
          uint16x8_t v94 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v77, (float16x8_t)0), v53));
          uint32x4_t v95 = vmovl_high_u16(v94);
          uint32x4_t v96 = vmovl_u16(*(uint16x4_t *)v94.i8);
          v97.i16[0] = *(_WORD *)&v25[2 * v96.u32[0]];
          v97.i16[1] = *(_WORD *)&v25[2 * v96.u32[1]];
          v97.i16[2] = *(_WORD *)&v25[2 * v96.u32[2]];
          v97.i16[3] = *(_WORD *)&v25[2 * v96.u32[3]];
          v97.i16[4] = *(_WORD *)&v25[2 * v95.u32[0]];
          v97.i16[5] = *(_WORD *)&v25[2 * v95.u32[1]];
          v97.i16[6] = *(_WORD *)&v25[2 * v95.u32[2]];
          v97.i16[7] = *(_WORD *)&v25[2 * v95.u32[3]];
          uint16x8_t v98 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v79, (float16x8_t)0), v53));
          uint32x4_t v99 = vmovl_high_u16(v98);
          uint32x4_t v100 = vmovl_u16(*(uint16x4_t *)v98.i8);
          v101.i16[0] = *(_WORD *)&v25[2 * v100.u32[0]];
          v101.i16[1] = *(_WORD *)&v25[2 * v100.u32[1]];
          v101.i16[2] = *(_WORD *)&v25[2 * v100.u32[2]];
          v101.i16[3] = *(_WORD *)&v25[2 * v100.u32[3]];
          v101.i16[4] = *(_WORD *)&v25[2 * v99.u32[0]];
          v101.i16[5] = *(_WORD *)&v25[2 * v99.u32[1]];
          v101.i16[6] = *(_WORD *)&v25[2 * v99.u32[2]];
          v101.i16[7] = *(_WORD *)&v25[2 * v99.u32[3]];
          uint16x8_t v102 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v76, (float16x8_t)0), v53));
          uint32x4_t v103 = vmovl_high_u16(v102);
          uint32x4_t v104 = vmovl_u16(*(uint16x4_t *)v102.i8);
          v92.i16[0] = *(_WORD *)&v25[2 * v104.u32[0]];
          v92.i16[1] = *(_WORD *)&v25[2 * v104.u32[1]];
          v92.i16[2] = *(_WORD *)&v25[2 * v104.u32[2]];
          v92.i16[3] = *(_WORD *)&v25[2 * v104.u32[3]];
          v92.i16[4] = *(_WORD *)&v25[2 * v103.u32[0]];
          v92.i16[5] = *(_WORD *)&v25[2 * v103.u32[1]];
          v92.i16[6] = *(_WORD *)&v25[2 * v103.u32[2]];
          v92.i16[7] = *(_WORD *)&v25[2 * v103.u32[3]];
          uint16x8_t v105 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v78, (float16x8_t)0), v53));
          uint32x4_t v106 = vmovl_high_u16(v105);
          uint32x4_t v107 = vmovl_u16(*(uint16x4_t *)v105.i8);
          v108.i16[0] = *(_WORD *)&v25[2 * v107.u32[0]];
          v108.i16[1] = *(_WORD *)&v25[2 * v107.u32[1]];
          v108.i16[2] = *(_WORD *)&v25[2 * v107.u32[2]];
          v108.i16[3] = *(_WORD *)&v25[2 * v107.u32[3]];
          v108.i16[4] = *(_WORD *)&v25[2 * v106.u32[0]];
          v108.i16[5] = *(_WORD *)&v25[2 * v106.u32[1]];
          v108.i16[6] = *(_WORD *)&v25[2 * v106.u32[2]];
          v108.i16[7] = *(_WORD *)&v25[2 * v106.u32[3]];
          uint16x8_t v109 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v80, (float16x8_t)0), v53));
          uint32x4_t v110 = vmovl_high_u16(v109);
          uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v109.i8);
          v112.i16[0] = *(_WORD *)&v25[2 * v111.u32[0]];
          v112.i16[1] = *(_WORD *)&v25[2 * v111.u32[1]];
          v112.i16[2] = *(_WORD *)&v25[2 * v111.u32[2]];
          v112.i16[3] = *(_WORD *)&v25[2 * v111.u32[3]];
          v112.i16[4] = *(_WORD *)&v25[2 * v110.u32[0]];
          v112.i16[5] = *(_WORD *)&v25[2 * v110.u32[1]];
          v112.i16[6] = *(_WORD *)&v25[2 * v110.u32[2]];
          v112.i16[7] = *(_WORD *)&v25[2 * v110.u32[3]];
          float16x8_t v113 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, v275), v97, v273), v101, v271);
          float16x8_t v114 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v89, v270), v97, v269), v101, v268);
          float16x8_t v115 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v101, v265), v97, v266), v89, v267);
          float16x8_t v116 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v92, v275), v108, v273), v112, v271);
          float16x8_t v117 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v92, v270), v108, v269), v112, v268);
          float16x8_t v118 = vmlaq_n_f16(vmlaq_n_f16(vmulq_n_f16(v112, v265), v108, v266), v92, v267);
          uint16x8_t v119 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v113, (float16x8_t)0), v53));
          int8x16_t v120 = (int8x16_t)vmovl_high_u16(v119);
          uint32x4_t v121 = vmovl_u16(*(uint16x4_t *)v119.i8);
          v112.i16[0] = *(_WORD *)&v28[2 * v121.u32[0]];
          v112.i16[1] = *(_WORD *)&v28[2 * v121.u32[1]];
          v112.i16[2] = *(_WORD *)&v28[2 * v121.u32[2]];
          v112.i16[3] = *(_WORD *)&v28[2 * v121.u32[3]];
          v112.i16[4] = *(_WORD *)&v28[2 * v120.u32[0]];
          v112.i16[5] = *(_WORD *)&v28[2 * v120.u32[1]];
          v112.i16[6] = *(_WORD *)&v28[2 * v120.u32[2]];
          v112.i16[7] = *(_WORD *)&v28[2 * v120.u32[3]];
          uint16x8_t v122 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v114, (float16x8_t)0), v53));
          uint32x4_t v123 = vmovl_high_u16(v122);
          uint32x4_t v124 = vmovl_u16(*(uint16x4_t *)v122.i8);
          v120.i16[0] = *(_WORD *)&v28[2 * v124.u32[0]];
          v120.i16[1] = *(_WORD *)&v28[2 * v124.u32[1]];
          v120.i16[2] = *(_WORD *)&v28[2 * v124.u32[2]];
          v120.i16[3] = *(_WORD *)&v28[2 * v124.u32[3]];
          v120.i16[4] = *(_WORD *)&v28[2 * v123.u32[0]];
          v120.i16[5] = *(_WORD *)&v28[2 * v123.u32[1]];
          v120.i16[6] = *(_WORD *)&v28[2 * v123.u32[2]];
          v120.i16[7] = *(_WORD *)&v28[2 * v123.u32[3]];
          uint16x8_t v125 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v115, (float16x8_t)0), v53));
          uint32x4_t v126 = vmovl_high_u16(v125);
          uint32x4_t v127 = vmovl_u16(*(uint16x4_t *)v125.i8);
          v97.i16[0] = *(_WORD *)&v28[2 * v127.u32[0]];
          v97.i16[1] = *(_WORD *)&v28[2 * v127.u32[1]];
          v97.i16[2] = *(_WORD *)&v28[2 * v127.u32[2]];
          v97.i16[3] = *(_WORD *)&v28[2 * v127.u32[3]];
          v97.i16[4] = *(_WORD *)&v28[2 * v126.u32[0]];
          v97.i16[5] = *(_WORD *)&v28[2 * v126.u32[1]];
          v97.i16[6] = *(_WORD *)&v28[2 * v126.u32[2]];
          v97.i16[7] = *(_WORD *)&v28[2 * v126.u32[3]];
          uint16x8_t v128 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v116, (float16x8_t)0), v53));
          uint32x4_t v129 = vmovl_high_u16(v128);
          uint32x4_t v130 = vmovl_u16(*(uint16x4_t *)v128.i8);
          uint64_t v131 = v130.u32[1];
          uint64_t v132 = v130.u32[3];
          uint64_t v133 = v130.u32[2];
          v116.i16[0] = *(_WORD *)&v28[2 * v130.u32[0]];
          uint64_t v134 = v129.u32[1];
          uint64_t v135 = v129.u32[0];
          uint64_t v136 = v129.u32[3];
          uint64_t v137 = v129.u32[2];
          uint16x8_t v138 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v117, (float16x8_t)0), v53));
          uint32x4_t v139 = vmovl_u16(*(uint16x4_t *)v138.i8);
          uint64_t v140 = v139.u32[1];
          uint64_t v141 = v139.u32[0];
          v116.i16[1] = *(_WORD *)&v28[2 * v131];
          v116.i16[2] = *(_WORD *)&v28[2 * v133];
          v116.i16[3] = *(_WORD *)&v28[2 * v132];
          v116.i16[4] = *(_WORD *)&v28[2 * v135];
          v116.i16[5] = *(_WORD *)&v28[2 * v134];
          v116.i16[6] = *(_WORD *)&v28[2 * v137];
          v116.i16[7] = *(_WORD *)&v28[2 * v136];
          uint32x4_t v142 = vmovl_high_u16(v138);
          uint64_t v143 = v139.u32[3];
          uint64_t v144 = v139.u32[2];
          uint64_t v145 = v142.u32[1];
          uint64_t v146 = v142.u32[0];
          uint64_t v147 = v142.u32[3];
          uint64_t v148 = v142.u32[2];
          uint16x8_t v149 = vcvtq_u16_f16(vminq_f16(vmaxq_f16(v118, (float16x8_t)0), v53));
          uint32x4_t v150 = vmovl_u16(*(uint16x4_t *)v149.i8);
          int8x16_t v151 = (int8x16_t)vmovl_high_u16(v149);
          uint64_t v152 = v151.u32[1];
          uint64_t v153 = v151.u32[0];
          v118.i16[0] = *(_WORD *)&v28[2 * v141];
          v118.i16[1] = *(_WORD *)&v28[2 * v140];
          v118.i16[2] = *(_WORD *)&v28[2 * v144];
          v118.i16[3] = *(_WORD *)&v28[2 * v143];
          v118.i16[4] = *(_WORD *)&v28[2 * v146];
          v118.i16[5] = *(_WORD *)&v28[2 * v145];
          v118.i16[6] = *(_WORD *)&v28[2 * v148];
          v118.i16[7] = *(_WORD *)&v28[2 * v147];
          v91.i64[1] = v151.u32[3];
          uint64_t v154 = v151.u32[2];
          v151.i16[0] = *(_WORD *)&v28[2 * v150.u32[0]];
          v151.i16[1] = *(_WORD *)&v28[2 * v150.u32[1]];
          v151.i16[2] = *(_WORD *)&v28[2 * v150.u32[2]];
          v151.i16[3] = *(_WORD *)&v28[2 * v150.u32[3]];
          v151.i16[4] = *(_WORD *)&v28[2 * v153];
          v151.i16[5] = *(_WORD *)&v28[2 * v152];
          v151.i16[6] = *(_WORD *)&v28[2 * v154];
          v151.i16[7] = *(_WORD *)&v28[2 * v91.i64[1]];
          v297.val[3] = v294;
          v297.val[0] = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
          v297.val[1] = vcvtq_f32_f16(*(float16x4_t *)v120.i8);
          v297.val[2] = vcvtq_f32_f16(*(float16x4_t *)v97.i8);
          uint64_t v155 = v50 + 128;
          vst4q_f32((float *)v50, v297);
          uint32x4_t v156 = (float *)(v50 + 64);
          float32x4_t v157 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v112, (int8x16_t)v112, 8uLL));
          float32x4_t v158 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL));
          float32x4_t v159 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL));
          vst4q_f32(v156, *(float32x4x4_t *)(&_Q3 - 3));
          v296.val[3] = v295;
          v296.val[0] = vcvtq_f32_f16(*(float16x4_t *)v116.i8);
          v296.val[1] = vcvtq_f32_f16(*(float16x4_t *)v118.i8);
          v296.val[2] = vcvtq_f32_f16(*(float16x4_t *)v151.i8);
          uint64_t v160 = v55 + 128;
          vst4q_f32((float *)v55, v296);
          uint32x4_t v161 = (float *)(v55 + 64);
          float32x4_t v162 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v116, (int8x16_t)v116, 8uLL));
          float32x4_t v163 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL));
          _D0 = (float16x4_t)vextq_s8(v151, v151, 8uLL).u64[0];
          float32x4_t v164 = vcvtq_f32_f16(_D0);
          vst4q_f32(v161, *(float32x4x4_t *)(&v87 - 3));
          uint64_t v50 = v155;
          uint64_t v55 = v160;
          v57 += 8;
          float v26 = v284;
        }
        while ((int)v57 < (int)v11 - 7);
        uint64_t v165 = &result[v57];
        unint64_t v166 = v11 & 0xFFFFFFF8;
      }
      for (; v11 > v166; _S27 = v272)
      {
        _D0.i8[0] = v165[1];
        float v167 = (float)_D0.u32[0] - v283;
        unsigned int v168 = LODWORD(v264);
        float v169 = v264 * v167;
        LOBYTE(v168) = v51->i8[0];
        float v170 = _S27 * (float)((float)v168 - v26);
        float v171 = (float)(v264 * v167) + v170;
        float v172 = 8191.0;
        if (v171 <= 8191.0)
        {
          float v172 = (float)(v264 * v167) + v170;
          if (v171 < 0.0) {
            float v172 = 0.0;
          }
        }
        LOBYTE(v171) = *v165;
        float v173 = (float)LODWORD(v171) - v283;
        float v174 = (float)(v263 * v167) + (float)(v173 * v279);
        float v175 = 8191.0;
        if ((float)(v170 + v174) <= 8191.0)
        {
          float v175 = v170 + v174;
          if ((float)(v170 + v174) < 0.0) {
            float v175 = 0.0;
          }
        }
        float v176 = v281 * v173;
        float v177 = (float)(v281 * v173) + v170;
        float v178 = 8191.0;
        if (v177 <= 8191.0)
        {
          float v178 = v177;
          if (v177 < 0.0) {
            float v178 = 0.0;
          }
        }
        LOBYTE(v177) = v51->i8[1];
        float v179 = _S27 * (float)((float)LODWORD(v177) - v26);
        float v180 = 8191.0;
        if ((float)(v169 + v179) <= 8191.0)
        {
          float v180 = v169 + v179;
          if ((float)(v169 + v179) < 0.0) {
            float v180 = 0.0;
          }
        }
        float v181 = 8191.0;
        if ((float)(v174 + v179) <= 8191.0)
        {
          float v181 = v174 + v179;
          if ((float)(v174 + v179) < 0.0) {
            float v181 = 0.0;
          }
        }
        float v182 = v176 + v179;
        BOOL v183 = (float)(v176 + v179) <= 8191.0;
        float v184 = 8191.0;
        if (v183)
        {
          float v184 = v182;
          if (v182 < 0.0) {
            float v184 = 0.0;
          }
        }
        LOBYTE(v182) = v54->i8[0];
        float v185 = _S27 * (float)((float)LODWORD(v182) - v26);
        float v186 = v169 + v185;
        float v187 = 8191.0;
        if ((float)(v169 + v185) <= 8191.0)
        {
          float v187 = v169 + v185;
          if (v186 < 0.0) {
            float v187 = 0.0;
          }
        }
        float v188 = 8191.0;
        if ((float)(v174 + v185) <= 8191.0)
        {
          float v188 = v174 + v185;
          if ((float)(v174 + v185) < 0.0) {
            float v188 = 0.0;
          }
        }
        float v189 = v176 + v185;
        float v190 = 8191.0;
        if (v189 <= 8191.0)
        {
          float v190 = v189;
          if (v189 < 0.0) {
            float v190 = 0.0;
          }
        }
        LOBYTE(v186) = v54->i8[1];
        float v191 = _S27 * (float)((float)LODWORD(v186) - v26);
        float v192 = v169 + v191;
        BOOL v183 = (float)(v169 + v191) <= 8191.0;
        float v193 = 8191.0;
        if (v183)
        {
          float v193 = v192;
          if (v192 < 0.0) {
            float v193 = 0.0;
          }
        }
        float v194 = v174 + v191;
        BOOL v183 = (float)(v174 + v191) <= 8191.0;
        float v195 = 8191.0;
        if (v183)
        {
          float v195 = v194;
          if (v194 < 0.0) {
            float v195 = 0.0;
          }
        }
        float v196 = v176 + v191;
        float v197 = 8191.0;
        if (v196 <= 8191.0)
        {
          float v197 = v196;
          if (v196 < 0.0) {
            float v197 = 0.0;
          }
        }
        if (v49)
        {
          unsigned int v198 = v49->u8[0];
          unsigned int v199 = v49->u8[1];
          uint64_t v49 = (int8x8_t *)((char *)v49 + 2);
          unsigned int v200 = *v56;
          unsigned int v201 = v56[1];
          v56 += 2;
        }
        else
        {
          unsigned int v198 = 0;
          unsigned int v199 = 0;
          unsigned int v200 = 0;
          unsigned int v201 = 0;
        }
        _H16 = *(_WORD *)&v25[2 * llroundf(fminf(fmaxf(v172, 0.0), 8191.0))];
        _H1 = *(_WORD *)&v25[2 * llroundf(fminf(fmaxf(v175, 0.0), 8191.0))];
        __asm
        {
          FCVT            S16, H16
          FCVT            S1, H1
        }
        _H2 = *(_WORD *)&v25[2 * llroundf(fminf(fmaxf(v178, 0.0), 8191.0))];
        __asm { FCVT            S2, H2 }
        _H3 = *(_WORD *)&v25[2 * llroundf(fminf(fmaxf(v180, 0.0), 8191.0))];
        __asm { FCVT            S3, H3 }
        _H4 = *(_WORD *)&v25[2 * llroundf(fminf(fmaxf(v181, 0.0), 8191.0))];
        __asm { FCVT            S4, H4 }
        _H5 = *(_WORD *)&v25[2 * llroundf(fminf(fmaxf(v184, 0.0), 8191.0))];
        __asm { FCVT            S5, H5 }
        _H7 = *(_WORD *)&v25[2 * llroundf(fminf(fmaxf(v187, 0.0), 8191.0))];
        _H18 = *(_WORD *)&v25[2 * llroundf(fminf(fmaxf(v188, 0.0), 8191.0))];
        __asm
        {
          FCVT            S7, H7
          FCVT            S18, H18
        }
        _H22 = *(_WORD *)&v25[2 * llroundf(fminf(fmaxf(v190, 0.0), 8191.0))];
        unsigned int v219 = llroundf(fminf(fmaxf(v193, 0.0), 8191.0));
        __asm { FCVT            S6, H22 }
        _H22 = *(_WORD *)&v25[2 * v219];
        __asm { FCVT            S22, H22 }
        _H19 = *(_WORD *)&v25[2 * llroundf(fminf(fmaxf(v195, 0.0), 8191.0))];
        __asm { FCVT            S19, H19 }
        _H21 = *(_WORD *)&v25[2 * llroundf(fminf(fmaxf(v197, 0.0), 8191.0))];
        __asm { FCVT            S21, H21 }
        float v227 = (float)((float)(v292 * _S1) + (float)(_S16 * v293)) + (float)(_S2 * v291);
        float v228 = (float)((float)(v289 * _S1) + (float)(_S16 * v290)) + (float)(_S2 * v288);
        _S2 = (float)((float)(v286 * _S1) + (float)(_S16 * v287)) + (float)(_S2 * v285);
        _S16 = (float)((float)(v292 * _S4) + (float)(_S3 * v293)) + (float)(_S5 * v291);
        float v231 = (float)((float)(v289 * _S4) + (float)(_S3 * v290)) + (float)(_S5 * v288);
        _S3 = (float)((float)(v286 * _S4) + (float)(_S3 * v287)) + (float)(_S5 * v285);
        _S4 = (float)((float)(v292 * _S18) + (float)(_S7 * v293)) + (float)(_S6 * v291);
        _S5 = (float)((float)(v289 * _S18) + (float)(_S7 * v290)) + (float)(_S6 * v288);
        _S6 = (float)((float)(v286 * _S18) + (float)(_S7 * v287)) + (float)(_S6 * v285);
        _S7 = (float)((float)(v292 * _S19) + (float)(_S22 * v293)) + (float)(_S21 * v291);
        _S18 = (float)((float)(v289 * _S19) + (float)(_S22 * v290)) + (float)(_S21 * v288);
        LOWORD(_S1) = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v227, 0.0), 8191.0))];
        float v238 = (float)((float)(v286 * _S19) + (float)(_S22 * v287)) + (float)(_S21 * v285);
        LOWORD(_S21) = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v228, 0.0), 8191.0))];
        LOWORD(_S2) = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(_S2, 0.0), 8191.0))];
        LOWORD(_S16) = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(_S16, 0.0), 8191.0))];
        LOWORD(_S22) = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v231, 0.0), 8191.0))];
        LOWORD(_S3) = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(_S3, 0.0), 8191.0))];
        LOWORD(_S4) = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0))];
        LOWORD(_S5) = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0))];
        LOWORD(_S6) = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(_S6, 0.0), 8191.0))];
        LOWORD(_S7) = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(_S7, 0.0), 8191.0))];
        LOWORD(_S18) = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(_S18, 0.0), 8191.0))];
        _H0 = *(_WORD *)&v28[2 * llroundf(fminf(fmaxf(v238, 0.0), 8191.0))];
        __asm
        {
          FCVT            S1, H1
          FCVT            S21, H21
        }
        *(_DWORD *)uint64_t v50 = _S1;
        *(_DWORD *)(v50 + 4) = _S21;
        __asm
        {
          FCVT            S1, H2
          FCVT            S2, H16
          FCVT            S16, H22
          FCVT            S3, H3
          FCVT            S4, H4
          FCVT            S5, H5
          FCVT            S6, H6
          FCVT            S7, H7
          FCVT            S18, H18
          FCVT            S0, H0
        }
        float v251 = (float)v198 * 0.0039216;
        if (!v49) {
          float v251 = 1.0;
        }
        float v252 = (float)v199 * 0.0039216;
        if (!v49) {
          float v252 = 1.0;
        }
        float v253 = (float)v200 * 0.0039216;
        if (!v49) {
          float v253 = 1.0;
        }
        *(_DWORD *)(v50 + 8) = _S1;
        *(float *)(v50 + 12) = v251;
        *(_DWORD *)(v50 + 16) = _S2;
        *(_DWORD *)(v50 + 20) = _S16;
        *(_DWORD *)(v50 + 24) = _S3;
        *(float *)(v50 + 28) = v252;
        *(_DWORD *)uint64_t v55 = _S4;
        *(_DWORD *)(v55 + 4) = _S5;
        float v254 = (float)v201 * 0.0039216;
        *(_DWORD *)(v55 + 8) = _S6;
        *(float *)(v55 + 12) = v253;
        if (!v49) {
          float v254 = 1.0;
        }
        *(_DWORD *)(v55 + 16) = _S7;
        *(_DWORD *)(v55 + 20) = _S18;
        v166 += 2;
        v165 += 2;
        uint64_t v51 = (int8x8_t *)((char *)v51 + 2);
        *(_DWORD *)(v55 + 24) = _D0.i32[0];
        *(float *)(v55 + 28) = v254;
        unint64_t v54 = (int8x8_t *)((char *)v54 + 2);
        v50 += 32;
        v55 += 32;
      }
      uint64_t v18 = v259;
      uint64_t v51 = (int8x8_t *)&v260[v259];
      uint64_t v20 = v257;
      result += v258;
      uint64_t v49 = (int8x8_t *)&v261[v257];
      uint64_t v21 = v256;
      uint64_t v50 = v262 + v256;
      v10 += 2;
    }
    while (v255 > v10);
  }
  return result;
}

uint64_t vt_Copy_420vf_TRC_Mat_TRC_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_TRC_Mat_TRC_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_TRC_Mat_TRC_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v6 = *(void *)(result + 28);
  unint64_t v7 = 2 * *result;
  unint64_t v8 = v6 * a2 / v7;
  unint64_t v9 = (v6 + v6 * a2) / v7;
  if (2 * v9 != 2 * v8)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(result + 20);
    uint64_t v12 = *(void *)(result + 44) + 2 * v8;
    unint64_t v13 = 2 * v9 - 2 * v8;
    uint64_t v14 = *((void *)result + 19);
    uint64_t v15 = (void *)*((void *)result + 7);
    uint64_t v16 = (uint64_t *)*((void *)result + 8);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = **((void **)result + 17);
    *(float *)&unsigned int v21 = (float)*(unsigned int *)(v14 + 128);
    float v22 = 8191.0 / *(float *)&v21;
    LOWORD(v21) = *(_WORD *)(v14 + 140);
    float v23 = (float)v21;
    LOWORD(a5) = *(_WORD *)(v14 + 142);
    float v24 = (float)LODWORD(a5);
    float v25 = v22 * *(float *)v14;
    float v153 = v22 * *(float *)(v14 + 16);
    float v154 = v22 * *(float *)(v14 + 8);
    float v26 = v22 * *(float *)(v14 + 20);
    float v27 = v22 * *(float *)(v14 + 28);
    float v151 = v27;
    float v152 = v26;
    float v28 = *(float *)(v14 + 72);
    float v29 = *(float *)(v14 + 76);
    float v30 = *(float *)(v14 + 80);
    float v31 = *(float *)(v14 + 84);
    float v32 = *(float *)(v14 + 88);
    float v33 = *(float *)(v14 + 92);
    float v34 = *(float *)(v14 + 96);
    float v35 = *(float *)(v14 + 100);
    float v36 = *(float *)(v14 + 104);
    uint64_t v37 = v14 + 164;
    uint64_t v38 = v14 + 16548;
    uint64_t v39 = *((void *)result + 14);
    uint64_t v40 = (void *)*((void *)result + 16);
    uint64_t v41 = *((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v7);
    uint64_t v42 = *(void *)(result + 36);
    uint64_t v43 = v15[1];
    uint64_t v44 = (unsigned char *)(*v15 + v17 * v12 + v42);
    uint64_t v45 = v15[2];
    _ZF = v45 == 0;
    uint64_t v47 = (unsigned __int8 *)(v45 + v19 * v12 + v42);
    if (_ZF) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = v47;
    }
    uint64_t v49 = *v40 + v41 * v20 + 16 * v39;
    if (v12 >= 0) {
      uint64_t v50 = v12;
    }
    else {
      uint64_t v50 = v12 + 1;
    }
    uint64_t result = (unsigned __int8 *)(v43 + v18 * (v50 >> 1) + v42);
    do
    {
      uint64_t v51 = v49 + v20;
      uint64_t v52 = &v48[v19];
      float16x8_t v53 = &v44[v17];
      if (v11)
      {
        unint64_t v54 = 0;
        uint64_t v55 = v49 + v20;
        float v56 = &v44[v17];
        uint64_t v57 = &v48[v19];
        do
        {
          LOBYTE(v27) = result[v54 + 1];
          float v58 = (float)LODWORD(v27) - v24;
          unsigned int v59 = LODWORD(v154);
          float v60 = v154 * v58;
          LOBYTE(v59) = *v44;
          float v61 = (float)v59 - v23;
          float v62 = v25 * v61;
          float v63 = (float)(v154 * v58) + (float)(v25 * v61);
          float v64 = 8191.0;
          if (v63 <= 8191.0)
          {
            float v64 = (float)(v154 * v58) + (float)(v25 * v61);
            if (v63 < 0.0) {
              float v64 = 0.0;
            }
          }
          LOBYTE(v61) = result[v54];
          float v65 = (float)LODWORD(v61) - v24;
          float v66 = (float)(v152 * v58) + (float)(v65 * v153);
          float v67 = 8191.0;
          if ((float)(v62 + v66) <= 8191.0)
          {
            float v67 = v62 + v66;
            if ((float)(v62 + v66) < 0.0) {
              float v67 = 0.0;
            }
          }
          unsigned int v68 = LODWORD(v151);
          float v69 = v151 * v65;
          float v70 = (float)(v151 * v65) + v62;
          float v71 = 8191.0;
          if (v70 <= 8191.0)
          {
            float v71 = v70;
            if (v70 < 0.0) {
              float v71 = 0.0;
            }
          }
          LOBYTE(v68) = v44[1];
          float v72 = (float)v68 - v23;
          float v73 = v25 * v72;
          float v74 = v60 + (float)(v25 * v72);
          float v75 = 8191.0;
          if (v74 <= 8191.0)
          {
            float v75 = v60 + (float)(v25 * v72);
            if (v74 < 0.0) {
              float v75 = 0.0;
            }
          }
          float v76 = 8191.0;
          if ((float)(v66 + v73) <= 8191.0)
          {
            float v76 = v66 + v73;
            if ((float)(v66 + v73) < 0.0) {
              float v76 = 0.0;
            }
          }
          float v77 = v69 + v73;
          BOOL v78 = (float)(v69 + v73) <= 8191.0;
          float v79 = 8191.0;
          if (v78)
          {
            float v79 = v77;
            if (v77 < 0.0) {
              float v79 = 0.0;
            }
          }
          LOBYTE(v72) = *v56;
          float v80 = v25 * (float)((float)LODWORD(v72) - v23);
          float v81 = 8191.0;
          if ((float)(v60 + v80) <= 8191.0)
          {
            float v81 = v60 + v80;
            if ((float)(v60 + v80) < 0.0) {
              float v81 = 0.0;
            }
          }
          float v82 = 8191.0;
          if ((float)(v66 + v80) <= 8191.0)
          {
            float v82 = v66 + v80;
            if ((float)(v66 + v80) < 0.0) {
              float v82 = 0.0;
            }
          }
          float v83 = v69 + v80;
          BOOL v78 = (float)(v69 + v80) <= 8191.0;
          float v84 = 8191.0;
          if (v78)
          {
            float v84 = v83;
            if (v83 < 0.0) {
              float v84 = 0.0;
            }
          }
          LOBYTE(v5) = v56[1];
          float v85 = v25 * (float)((float)v5 - v23);
          float v86 = v60 + v85;
          BOOL v78 = (float)(v60 + v85) <= 8191.0;
          float v87 = 8191.0;
          if (v78)
          {
            float v87 = v86;
            if (v86 < 0.0) {
              float v87 = 0.0;
            }
          }
          float v88 = v66 + v85;
          BOOL v78 = (float)(v66 + v85) <= 8191.0;
          float v89 = 8191.0;
          if (v78)
          {
            float v89 = v88;
            if (v88 < 0.0) {
              float v89 = 0.0;
            }
          }
          float v90 = v69 + v85;
          BOOL v78 = (float)(v69 + v85) <= 8191.0;
          float v91 = 8191.0;
          if (v78)
          {
            float v91 = v90;
            if (v90 < 0.0) {
              float v91 = 0.0;
            }
          }
          if (v48)
          {
            unsigned int v92 = *v48;
            unsigned int v93 = v48[1];
            v48 += 2;
            unsigned int v94 = *v57;
            unsigned int v95 = v57[1];
            v57 += 2;
          }
          else
          {
            unsigned int v92 = 0;
            unsigned int v93 = 0;
            unsigned int v94 = 0;
            unsigned int v95 = 0;
          }
          _H27 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v64, 0.0), 8191.0)));
          __asm { FCVT            S27, H27 }
          _H28 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v67, 0.0), 8191.0)));
          __asm { FCVT            S28, H28 }
          _H29 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v71, 0.0), 8191.0)));
          __asm { FCVT            S29, H29 }
          _H30 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v75, 0.0), 8191.0)));
          __asm { FCVT            S30, H30 }
          _H31 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v76, 0.0), 8191.0)));
          _H8 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v79, 0.0), 8191.0)));
          __asm
          {
            FCVT            S31, H31
            FCVT            S8, H8
          }
          _H10 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v81, 0.0), 8191.0)));
          unsigned int v112 = llroundf(fminf(fmaxf(v82, 0.0), 8191.0));
          __asm { FCVT            S4, H10 }
          _H10 = *(_WORD *)(v37 + 2 * v112);
          __asm { FCVT            S10, H10 }
          _H12 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v84, 0.0), 8191.0)));
          __asm { FCVT            S12, H12 }
          _H9 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v87, 0.0), 8191.0)));
          __asm { FCVT            S9, H9 }
          _H11 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v89, 0.0), 8191.0)));
          _H13 = *(_WORD *)(v37 + 2 * llroundf(fminf(fmaxf(v91, 0.0), 8191.0)));
          __asm
          {
            FCVT            S11, H11
            FCVT            S13, H13
          }
          float v124 = (float)((float)(v29 * _S28) + (float)(_S27 * v28)) + (float)(_S29 * v30);
          float v125 = (float)((float)(v32 * _S28) + (float)(_S27 * v31)) + (float)(_S29 * v33);
          _S28 = (float)((float)(v35 * _S28) + (float)(_S27 * v34)) + (float)(_S29 * v36);
          _S29 = (float)((float)(v29 * _S31) + (float)(_S30 * v28)) + (float)(_S8 * v30);
          _S5 = (float)((float)(v32 * _S31) + (float)(_S30 * v31)) + (float)(_S8 * v33);
          _S30 = (float)((float)(v35 * _S31) + (float)(_S30 * v34)) + (float)(_S8 * v36);
          _S31 = (float)((float)(v29 * _S10) + (float)(_S4 * v28)) + (float)(_S12 * v30);
          _S8 = (float)((float)(v32 * _S10) + (float)(_S4 * v31)) + (float)(_S12 * v33);
          _S4 = (float)((float)(v35 * _S10) + (float)(_S4 * v34)) + (float)(_S12 * v36);
          _S10 = (float)((float)(v29 * _S11) + (float)(_S9 * v28)) + (float)(_S13 * v30);
          _S12 = (float)((float)(v32 * _S11) + (float)(_S9 * v31)) + (float)(_S13 * v33);
          LOWORD(_S27) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v124, 0.0), 8191.0)));
          _S9 = (float)(v35 * _S11) + (float)(_S9 * v34);
          LOWORD(_S11) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(v125, 0.0), 8191.0)));
          LOWORD(_S28) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S28, 0.0), 8191.0)));
          LOWORD(_S29) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S29, 0.0), 8191.0)));
          LOWORD(_S5) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S5, 0.0), 8191.0)));
          LOWORD(_S30) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S30, 0.0), 8191.0)));
          LOWORD(_S31) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S31, 0.0), 8191.0)));
          LOWORD(_S8) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S8, 0.0), 8191.0)));
          LOWORD(_S4) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S4, 0.0), 8191.0)));
          LOWORD(_S10) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S10, 0.0), 8191.0)));
          LOWORD(_S12) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S12, 0.0), 8191.0)));
          LOWORD(_S9) = *(_WORD *)(v38 + 2 * llroundf(fminf(fmaxf(_S9 + (float)(_S13 * v36), 0.0), 8191.0)));
          unsigned int v5 = 998277249;
          __asm
          {
            FCVT            S27, H27
            FCVT            S11, H11
          }
          *(_DWORD *)uint64_t v49 = _S27;
          *(_DWORD *)(v49 + 4) = _S11;
          v44 += 2;
          v56 += 2;
          __asm
          {
            FCVT            S27, H28
            FCVT            S28, H29
            FCVT            S5, H5
            FCVT            S29, H30
            FCVT            S30, H31
            FCVT            S31, H8
            FCVT            S4, H4
            FCVT            S8, H10
            FCVT            S10, H12
            FCVT            S9, H9
          }
          float v148 = (float)v92 * 0.0039216;
          if (!v48) {
            float v148 = 1.0;
          }
          float v149 = (float)v93 * 0.0039216;
          if (!v48) {
            float v149 = 1.0;
          }
          float v150 = (float)v94 * 0.0039216;
          if (!v48) {
            float v150 = 1.0;
          }
          *(_DWORD *)(v49 + 8) = _S27;
          *(float *)(v49 + 12) = v148;
          *(_DWORD *)(v49 + 16) = _S28;
          *(_DWORD *)(v49 + 20) = _S5;
          *(_DWORD *)(v49 + 24) = _S29;
          *(float *)(v49 + 28) = v149;
          *(_DWORD *)uint64_t v55 = _S30;
          *(_DWORD *)(v55 + 4) = _S31;
          *(_DWORD *)(v55 + 8) = _S4;
          *(float *)(v55 + 12) = v150;
          if (v48) {
            float v27 = (float)v95 * 0.0039216;
          }
          else {
            float v27 = 1.0;
          }
          v49 += 32;
          *(_DWORD *)(v55 + 16) = _S8;
          *(_DWORD *)(v55 + 20) = _S10;
          *(_DWORD *)(v55 + 24) = _S9;
          *(float *)(v55 + 28) = v27;
          v55 += 32;
          v54 += 2;
        }
        while (v11 > v54);
      }
      uint64_t v44 = &v53[v17];
      result += v18;
      uint64_t v48 = &v52[v19];
      uint64_t v49 = v51 + v20;
      v10 += 2;
    }
    while (v13 > v10);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_RGfA_neon_fp16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_RGfA_neon_fp16_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_RGfA_neon_fp16_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, double a5, double a6, double a7, int16x4_t a8, double a9, float16x8_t a10)
{
  uint64_t v12 = *(void *)(result + 28);
  unint64_t v13 = 2 * *result;
  unint64_t v14 = v12 * a2 / v13;
  unint64_t v15 = (v12 + v12 * a2) / v13;
  if (2 * v15 != 2 * v14)
  {
    unint64_t v16 = 0;
    unint64_t v17 = *(void *)(result + 20);
    uint64_t v18 = *(void *)(result + 44);
    uint64_t v19 = v18 + 2 * v14;
    uint64_t v20 = v18 + 2 * v15;
    uint64_t v21 = (float32x2_t *)*((void *)result + 19);
    size_t v22 = (uint64_t *)*((void *)result + 7);
    uint64_t v23 = (uint64_t *)*((void *)result + 8);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v26 = v23[2];
    uint64_t v27 = **((void **)result + 17);
    unsigned int v28 = v21[17].u16[2];
    unsigned int v29 = v21[17].u16[3];
    v30.i32[0] = v21[3].i32[1];
    unint64_t v31 = v20 - v19;
    LODWORD(a3) = 1.0;
    float v32 = (float)v28;
    *(float *)a10.i32 = 1.0 / (float)v21[16].u32[0];
    float v33 = (float)v29;
    _S3 = *(float *)a10.i32 * v21->f32[0];
    __asm { FCVT            H4, S3 }
    *(short float *)a8.i16 = (short float)v28;
    float16x8_t v40 = (float16x8_t)vdupq_lane_s16(a8, 0);
    v30.i32[1] = v21[1].i32[0];
    *(float32x2_t *)v10.f32 = vmul_n_f32(v30, *(float *)a10.i32);
    float16x8_t v41 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32(v10), 0);
    *(float32x2_t *)a10.i8 = vmul_n_f32(v21[2], *(float *)a10.i32);
    float16x8_t v42 = (float16x8_t)vdupq_lane_s32((int32x2_t)vcvt_f16_f32((float32x4_t)a10), 0);
    *(short float *)v30.i16 = -(short float)v29;
    float16x8_t v138 = v41;
    float16x8_t v135 = vmulq_n_f16(v41, *(short float *)v30.i16);
    float16x8_t v136 = v42;
    float16x8_t v134 = vmulq_n_f16(v42, *(short float *)v30.i16);
    uint64_t v43 = v22[2];
    if (v19 >= 0) {
      uint64_t v44 = v19;
    }
    else {
      uint64_t v44 = v19 + 1;
    }
    uint64_t v45 = *v22;
    uint64_t v46 = v22[1] + v25 * (v44 >> 1);
    uint64_t v47 = *(void *)(result + 36);
    uint64_t v48 = **((void **)result + 16)
        + v27 * (*((void *)result + 15) + 2 * (*((void *)result + 13) * a2 / v13))
        + 16 * *((void *)result + 14);
    if (v43) {
      uint64_t v49 = (int8x8_t *)(v43 + v26 * v19 + v47);
    }
    else {
      uint64_t v49 = 0;
    }
    uint64_t v50 = (__int8 *)(v46 + v47);
    uint64_t v51 = (int8x8_t *)(v45 + v24 * v19 + v47);
    uint64_t result = (unsigned __int8 *)(*(void *)(result + 20) & 0xFFFFFFF8);
    uint64_t v52 = v10.i64[0];
    v53.i32[0] = a10.i32[1];
    float v133 = *(float *)&a10.i32[1];
    float v137 = *(float *)a10.i32;
    __asm { FMOV            V23.4S, #1.0 }
    do
    {
      uint64_t v55 = v48 + v27;
      float v56 = (unsigned __int8 *)v49 + v26;
      uint64_t v57 = (char *)v51 + v24;
      if ((int)v17 < 8)
      {
        unint64_t v109 = 0;
        float16x8_t v108 = v50;
        float v61 = (int8x8_t *)((char *)v49 + v26);
        float v60 = (int8x8_t *)((char *)v51 + v24);
        uint64_t v59 = v48 + v27;
      }
      else
      {
        uint64_t v58 = 0;
        uint64_t v59 = v48 + v27;
        float v60 = (int8x8_t *)((char *)v51 + v24);
        float v61 = (int8x8_t *)((char *)v49 + v26);
        do
        {
          if (v49)
          {
            int8x8_t v62 = *v49++;
            int8x8_t v63 = v62;
            int8x8_t v64 = *v61++;
            *(int8x8_t *)v65.i8 = vzip1_s8(v63, 0);
            v65.u64[1] = (unint64_t)vzip2_s8(v63, 0);
            float16x8_t v66 = vcvtq_f16_u16(v65);
            float16x8_t v67 = (float16x8_t)vdupq_n_s16(0x1C04u);
            int8x16_t v68 = (int8x16_t)vmulq_f16(v66, v67);
            float32x4_t v69 = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
            *(int8x8_t *)v70.i8 = vzip1_s8(v64, 0);
            v70.u64[1] = (unint64_t)vzip2_s8(v64, 0);
            float32x4_t v71 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL));
            int8x16_t v72 = (int8x16_t)vmulq_f16(vcvtq_f16_u16(v70), v67);
            float32x4_t v73 = vcvtq_f32_f16(*(float16x4_t *)v72.i8);
            float32x4_t v74 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL));
          }
          else
          {
            float32x4_t v71 = _Q23;
            float32x4_t v69 = _Q23;
            float32x4_t v73 = _Q23;
            float32x4_t v74 = _Q23;
          }
          int8x8_t v75 = *(int8x8_t *)&v50[v58];
          *(int8x8_t *)v76.i8 = vzip1_s8(v75, 0);
          v76.u64[1] = (unint64_t)vzip2_s8(v75, 0);
          float16x8_t v77 = vcvtq_f16_u16(v76);
          int8x16_t v78 = (int8x16_t)vmlaq_f16(v135, v138, v77);
          int16x8_t v79 = (int16x8_t)vmlaq_f16(v134, v136, v77);
          v77.i64[0] = vextq_s8(v78, v78, 8uLL).u64[0];
          *(int16x4_t *)v80.i8 = vuzp1_s16(*(int16x4_t *)v78.i8, *(int16x4_t *)v77.i8);
          *(int16x4_t *)v77.i8 = vuzp2_s16(*(int16x4_t *)v78.i8, *(int16x4_t *)v77.i8);
          *(double *)&v77.i64[1] = a3;
          float16x8_t v81 = (float16x8_t)vzip1q_s16((int16x8_t)v77, (int16x8_t)v77);
          *(double *)&v80.i64[1] = a3;
          float16x8_t v82 = (float16x8_t)vzip1q_s16(v80, v80);
          v80.i64[0] = vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL).u64[0];
          *(float16x4_t *)v79.i8 = vadd_f16((float16x4_t)vuzp1_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v80.i8), (float16x4_t)vuzp2_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v80.i8));
          *(double *)&v79.i64[1] = a3;
          int8x8_t v83 = *v51++;
          *(int8x8_t *)v84.i8 = vzip1_s8(v83, 0);
          v84.u64[1] = (unint64_t)vzip2_s8(v83, 0);
          float16x8_t v85 = (float16x8_t)vzip1q_s16(v79, v79);
          int8x8_t v86 = *v60++;
          *(int8x8_t *)v87.i8 = vzip1_s8(v86, 0);
          v87.u64[1] = (unint64_t)vzip2_s8(v86, 0);
          float16x8_t v88 = vsubq_f16(vcvtq_f16_u16(v84), v40);
          float16x8_t v41 = vsubq_f16(vcvtq_f16_u16(v87), v40);
          float16x8_t v42 = vmlaq_n_f16(v81, v88, _H4);
          a10 = vmlaq_n_f16(v81, v41, _H4);
          int8x16_t v89 = (int8x16_t)vmlaq_n_f16(v85, v88, _H4);
          int8x16_t v11 = (int8x16_t)vmlaq_n_f16(v85, v41, _H4);
          int8x16_t v90 = (int8x16_t)vmlaq_n_f16(v82, v88, _H4);
          float32x4_t v91 = vcvtq_f32_f16(*(float16x4_t *)v42.i8);
          float32x4_t v92 = vcvtq_f32_f16(*(float16x4_t *)v89.i8);
          float32x4_t v93 = vcvtq_f32_f16(*(float16x4_t *)v90.i8);
          float32x4_t v94 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL));
          float32x4_t v95 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL));
          float32x4_t v96 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL));
          uint64_t v97 = v48 + 128;
          vst4q_f32((float *)v48, *(float32x4x4_t *)(&v69 - 3));
          uint16x8_t v98 = (float *)(v48 + 64);
          vst4q_f32(v98, *(float32x4x4_t *)(&v71 - 3));
          int8x16_t v99 = (int8x16_t)vmlaq_n_f16(v82, v41, _H4);
          float32x4_t v100 = vcvtq_f32_f16(*(float16x4_t *)a10.i8);
          float32x4_t v101 = vcvtq_f32_f16(*(float16x4_t *)v11.i8);
          float32x4_t v102 = vcvtq_f32_f16(*(float16x4_t *)v99.i8);
          float32x4_t v103 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL));
          float32x4_t v104 = vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
          float16x4_t v53 = (float16x4_t)vextq_s8(v99, v99, 8uLL).u64[0];
          float32x4_t v105 = vcvtq_f32_f16(v53);
          uint64_t v106 = v59 + 128;
          vst4q_f32((float *)v59, *(float32x4x4_t *)(&v73 - 3));
          uint32x4_t v107 = (float *)(v59 + 64);
          vst4q_f32(v107, *(float32x4x4_t *)(&v74 - 3));
          uint64_t v48 = v97;
          uint64_t v59 = v106;
          v58 += 8;
        }
        while ((int)v58 < (int)v17 - 7);
        float16x8_t v108 = &v50[v58];
        unint64_t v109 = v17 & 0xFFFFFFF8;
      }
      while (v17 > v109)
      {
        if (v49)
        {
          unsigned int v110 = v49->u8[0];
          unsigned int v111 = v49->u8[1];
          uint64_t v49 = (int8x8_t *)((char *)v49 + 2);
          unsigned int v112 = v61->u8[0];
          unsigned int v113 = v61->u8[1];
          float v61 = (int8x8_t *)((char *)v61 + 2);
        }
        else
        {
          unsigned int v110 = 0;
          unsigned int v111 = 0;
          unsigned int v112 = 0;
          unsigned int v113 = 0;
        }
        v53.i8[0] = *v108;
        float v114 = (float)v53.u32[0] - v33;
        a10.i8[0] = v108[1];
        float v115 = (float)a10.u32[0] - v33;
        float v116 = *((float *)&v52 + 1) * v115;
        float v117 = (float)(v133 * v115) + (float)(v114 * v137);
        unsigned int v118 = v52;
        float v119 = *(float *)&v52 * v114;
        LOBYTE(v118) = v51->i8[0];
        float v120 = _S3 * (float)((float)v118 - v32);
        v41.i8[0] = v51->i8[1];
        float v121 = _S3 * (float)((float)v41.u32[0] - v32);
        v42.i8[0] = v60->i8[0];
        float v122 = _S3 * (float)((float)v42.u32[0] - v32);
        v11.i8[0] = v60->i8[1];
        *(float *)uint64_t v48 = v116 + v120;
        *(float *)(v48 + 4) = v120 + v117;
        float v123 = _S3 * (float)((float)v11.u32[0] - v32);
        float v124 = v119 + v120;
        float v125 = v116 + v121;
        float v126 = v117 + v121;
        *(float *)v41.i32 = v119 + v121;
        float v127 = v116 + v122;
        float v128 = v117 + v122;
        *(float *)v42.i32 = v119 + v122;
        float v129 = v116 + v123;
        *(float *)a10.i32 = v117 + v123;
        *(float *)v53.i32 = v119 + v123;
        *(float *)v11.i32 = (float)v110 * 0.0039216;
        if (!v49) {
          *(float *)v11.i32 = 1.0;
        }
        float v130 = (float)v111 * 0.0039216;
        if (!v49) {
          float v130 = 1.0;
        }
        float v131 = (float)v112 * 0.0039216;
        if (!v49) {
          float v131 = 1.0;
        }
        *(float *)(v48 + 8) = v124;
        *(_DWORD *)(v48 + 12) = v11.i32[0];
        *(float *)(v48 + 16) = v125;
        *(float *)(v48 + 20) = v126;
        *(_DWORD *)(v48 + 24) = v41.i32[0];
        *(float *)(v48 + 28) = v130;
        *(float *)uint64_t v59 = v127;
        *(float *)(v59 + 4) = v128;
        float v132 = (float)v113 * 0.0039216;
        *(_DWORD *)(v59 + 8) = v42.i32[0];
        *(float *)(v59 + 12) = v131;
        if (!v49) {
          float v132 = 1.0;
        }
        *(float *)(v59 + 16) = v129;
        *(_DWORD *)(v59 + 20) = a10.i32[0];
        v109 += 2;
        v108 += 2;
        uint64_t v51 = (int8x8_t *)((char *)v51 + 2);
        *(_DWORD *)(v59 + 24) = v53.i32[0];
        *(float *)(v59 + 28) = v132;
        float v60 = (int8x8_t *)((char *)v60 + 2);
        v48 += 32;
        v59 += 32;
      }
      uint64_t v51 = (int8x8_t *)&v57[v24];
      v50 += v25;
      uint64_t v49 = (int8x8_t *)&v56[v26];
      uint64_t v48 = v55 + v27;
      v16 += 2;
    }
    while (v31 > v16);
  }
  return result;
}

uint64_t vt_Copy_420vf_rgb_RGfA(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v13 = a2[4];
  uint64_t v14 = a2[5];
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = a6[3];
  uint64_t v18 = a6[5];
  if (v14)
  {
    ++v18;
    ++v14;
    if (v11)
    {
      --v17;
      --v11;
    }
    else
    {
      v17 -= 2;
      v11 -= 2;
    }
  }
  uint64_t v19 = a6[2];
  uint64_t v20 = a6[4];
  if (v13)
  {
    ++v20;
    ++v13;
    if (v12)
    {
      --v19;
      --v12;
    }
    else
    {
      v19 -= 2;
      v12 -= 2;
    }
  }
  memset(v27, 0, 32);
  if (v13 + v12 > v9) {
    uint64_t v12 = v9 - v13;
  }
  memset(&v27[32], 0, 24);
  if (v20 + v19 <= v15) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v15 - v20;
  }
  size_t v22 = *(unsigned __int8 *)(a1 + 162);
  v27[0] = *(unsigned char *)(a1 + 162);
  if (v14 + v11 > v10) {
    uint64_t v11 = v10 - v14;
  }
  *(void *)&v27[4] = v9;
  *(void *)&v27[12] = v10;
  if (v18 + v17 <= v16) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v16 - v18;
  }
  if (v12 >= v21) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v12;
  }
  *(void *)&v27[20] = v24;
  if (v11 < v23) {
    uint64_t v23 = v11;
  }
  *(void *)&v27[28] = v23;
  *(void *)&v27[36] = v13;
  *(void *)&v27[44] = v14;
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v24;
  uint64_t v34 = v23;
  uint64_t v35 = v20;
  uint64_t v36 = v18;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a9;
  uint64_t v40 = a1;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_apply_f(v22, global_queue, v27, (void (__cdecl *)(void *, size_t))vt_Copy_420vf_rgb_RGfA_GCD);
  return 0;
}

unsigned __int8 *vt_Copy_420vf_rgb_RGfA_GCD(unsigned __int8 *result, uint64_t a2, double a3, double a4, float a5)
{
  uint64_t v11 = *(void *)(result + 28);
  unint64_t v12 = 2 * *result;
  unint64_t v13 = v11 * a2 / v12;
  unint64_t v14 = (v11 + v11 * a2) / v12;
  if (2 * v14 != 2 * v13)
  {
    unint64_t v15 = 0;
    unint64_t v16 = *(void *)(result + 20);
    uint64_t v17 = *(void *)(result + 44) + 2 * v13;
    unint64_t v18 = 2 * v14 - 2 * v13;
    uint64_t v19 = *((void *)result + 19);
    uint64_t v20 = (void *)*((void *)result + 7);
    uint64_t v21 = (uint64_t *)*((void *)result + 8);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = v21[2];
    uint64_t v25 = **((void **)result + 17);
    *(float *)&unsigned int v26 = (float)*(unsigned int *)(v19 + 128);
    float v27 = 1.0 / *(float *)&v26;
    LOWORD(v26) = *(_WORD *)(v19 + 140);
    float v28 = (float)v26;
    LOWORD(a5) = *(_WORD *)(v19 + 142);
    float v29 = (float)LODWORD(a5);
    float v30 = v27 * *(float *)v19;
    float v31 = v27 * *(float *)(v19 + 8);
    float v32 = v27 * *(float *)(v19 + 16);
    float v33 = v27 * *(float *)(v19 + 20);
    float v34 = v27 * *(float *)(v19 + 28);
    uint64_t v35 = *((void *)result + 14);
    unint64_t v36 = *((void *)result + 13) * a2;
    uint64_t v37 = (void *)*((void *)result + 16);
    uint64_t v38 = *((void *)result + 15) + 2 * (v36 / v12);
    uint64_t v39 = *(void *)(result + 36);
    uint64_t v40 = (unsigned char *)(*v20 + v22 * v17 + v39);
    uint64_t v41 = v20[2];
    BOOL v42 = v41 == 0;
    uint64_t result = (unsigned __int8 *)(v41 + v24 * v17 + v39);
    if (v42) {
      uint64_t result = 0;
    }
    uint64_t v43 = (float *)(*v37 + v38 * v25 + 16 * v35);
    uint64_t v44 = v20[1] + v23 * (v17 / 2) + v39;
    do
    {
      uint64_t v45 = (char *)v43 + v25;
      uint64_t v46 = &result[v24];
      uint64_t v47 = &v40[v22];
      if (v16)
      {
        unint64_t v48 = 0;
        uint64_t v49 = (float *)((char *)v43 + v25);
        uint64_t v50 = &v40[v22];
        uint64_t v51 = &result[v24];
        do
        {
          if (result)
          {
            unsigned int v52 = *result;
            unsigned int v53 = result[1];
            result += 2;
            unsigned int v54 = *v51;
            unsigned int v55 = v51[1];
            v51 += 2;
          }
          else
          {
            unsigned int v52 = 0;
            unsigned int v53 = 0;
            unsigned int v54 = 0;
            unsigned int v55 = 0;
          }
          LOBYTE(v5) = *(unsigned char *)(v44 + v48);
          float v56 = (float)LODWORD(v5) - v29;
          LOBYTE(v6) = *(unsigned char *)(v44 + v48 + 1);
          float v57 = (float)LODWORD(v6) - v29;
          float v58 = v31 * v57;
          float v59 = (float)(v33 * v57) + (float)(v56 * v32);
          float v60 = v34 * v56;
          LOBYTE(v7) = *v40;
          float v61 = v30 * (float)((float)LODWORD(v7) - v28);
          LOBYTE(v8) = v40[1];
          float v62 = v30 * (float)((float)LODWORD(v8) - v28);
          v40 += 2;
          LOBYTE(v9) = *v50;
          float v63 = v30 * (float)((float)LODWORD(v9) - v28);
          LOBYTE(v10) = v50[1];
          float *v43 = v58 + v61;
          v43[1] = v61 + v59;
          float v64 = v30 * (float)((float)LODWORD(v10) - v28);
          v50 += 2;
          float v65 = v60 + v61;
          float v66 = v58 + v62;
          float v67 = v59 + v62;
          float v8 = v60 + v62;
          float v68 = v58 + v63;
          float v69 = v59 + v63;
          float v9 = v60 + v63;
          float v70 = v58 + v64;
          float v6 = v59 + v64;
          float v5 = v60 + v64;
          float v10 = (float)v52 * 0.0039216;
          if (!result) {
            float v10 = 1.0;
          }
          float v71 = (float)v53 * 0.0039216;
          if (!result) {
            float v71 = 1.0;
          }
          float v72 = (float)v54 * 0.0039216;
          if (!result) {
            float v72 = 1.0;
          }
          v43[2] = v65;
          v43[3] = v10;
          v43[4] = v66;
          v43[5] = v67;
          v43[6] = v8;
          v43[7] = v71;
          float *v49 = v68;
          v49[1] = v69;
          float v7 = (float)v55 * 0.0039216;
          v49[2] = v9;
          v49[3] = v72;
          if (!result) {
            float v7 = 1.0;
          }
          v43 += 8;
          v49[4] = v70;
          v49[5] = v6;
          v49[6] = v5;
          v49[7] = v7;
          v49 += 8;
          v48 += 2;
        }
        while (v16 > v48);
      }
      uint64_t v40 = &v47[v22];
      v44 += v23;
      uint64_t result = &v46[v24];
      uint64_t v43 = (float *)&v45[v25];
      v15 += 2;
    }
    while (v18 > v15);
  }
  return result;
}

void vtDecompressionSubDuctFinishAsynchronousTransfers(uint64_t a1)
{
  if (*(void *)(a1 + 152))
  {
    dispatch_group_wait(*(dispatch_group_t *)(a1 + 160), 0xFFFFFFFFFFFFFFFFLL);
    int16x4_t v2 = *(NSObject **)(a1 + 152);
    if (v2)
    {
      dispatch_release(v2);
      *(void *)(a1 + 152) = 0;
    }
    float32x4_t v3 = *(NSObject **)(a1 + 160);
    if (v3)
    {
      dispatch_release(v3);
      *(void *)(a1 + 160) = 0;
    }
  }
  uint64_t v4 = *(void *)(a1 + 168);
  if (v4)
  {
    vtDecompressionSubDuctAsyncPixelTransfer_StopWorkerThreads(v4);
    *(void *)(a1 + 168) = 0;
  }
}

void vtDecompressionSubDuctAsyncPixelTransfer_StopWorkerThreads(uint64_t a1)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 32) = 1;
    FigMemoryBarrier();
    if (*(int *)(a1 + 8) >= 1)
    {
      int v2 = 0;
      do
      {
        FigSemaphoreSignal();
        ++v2;
        int v3 = *(_DWORD *)(a1 + 8);
      }
      while (v2 < v3);
      if (v3 >= 1)
      {
        uint64_t v4 = 0;
        do
        {
          FigThreadJoin();
          *(void *)(a1 + 16 + 8 * v4++) = 0;
        }
        while (v4 < *(int *)(a1 + 8));
      }
    }
    *(_DWORD *)(a1 + 8) = 0;
    FigSemaphoreDestroy();
    FigSimpleMutexDestroy();
    FigSemaphoreDestroy();
    free((void *)a1);
  }
}

uint64_t vtDecompressionSession_handleSessionTerminatedNotification()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

OSStatus VTDecompressionSessionWaitForAsynchronousFrames(VTDecompressionSessionRef session)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (session && !*((unsigned char *)session + 16))
  {
    uint64_t v3 = *((void *)session + 3);
    if (v3)
    {
      return VTDecompressionSessionRemoteBridge_WaitForAsynchronousFrames(v3);
    }
    else
    {
      uint64_t v4 = 5000000000;
      VTDecompressionSessionFinishDelayedFrames(session);
      for (; FigSemaphoreWaitRelative() == -12792; v4 *= 2)
      {
        float v5 = (uint64_t *)*((void *)session + 4);
        if (v5)
        {
          uint64_t v6 = *v5;
          if (v6)
          {
            snprintf(__str, 0x20uLL, "%d", *(_DWORD *)(v6 + 64));
            vtDecompressionDuctGetMinOutputPresentationTimeStampOfFramesBeingDecoded(*((void *)session + 4), v7);
            vtDecompressionDuctGetMaxOutputPresentationTimeStampOfFramesBeingDecoded(*((void *)session + 4), v7);
          }
        }
      }
      FigSemaphoreSignal();
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFTypeID VTDecompressionSessionGetTypeID(void)
{
  return sVTDecompressionSessionID;
}

uint64_t VTDecompressionSessionCreateWithOptions(uint64_t a1, CMFormatDescriptionRef desc, CFTypeRef a3, const __CFDictionary *a4, _OWORD *a5, const __CFDictionary *a6, uint64_t *a7)
{
  uint64_t v7 = 4294954394;
  if (!desc) {
    return v7;
  }
  float v8 = a7;
  if (!a7) {
    return v7;
  }
  CFArrayRef Extension = (const __CFArray *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F21650]);
  if (Extension)
  {
    CFArrayRef v16 = Extension;
    CFTypeID v17 = CFGetTypeID(Extension);
    if (v17 != CFArrayGetTypeID() || CFArrayGetCount(v16))
    {
      return FigSignalErrorAt();
    }
  }
  if (vtCheckTraceOnce_once != -1) {
    dispatch_once_f(&vtCheckTraceOnce_once, 0, (dispatch_function_t)checkDecompressionSessionTrace);
  }
  *float v8 = 0;
  if (a6 && (CFNumberRef Value = CFDictionaryGetValue(a6, @"AllowClientProcessDecode")) != 0) {
    int v19 = CFEqual(Value, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
  }
  else {
    int v19 = 0;
  }
  int v20 = VTShouldRunVideoDecodersInProcess();
  if (VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode())
  {
    if (FigServer_IsVideocodecd()) {
      BOOL v21 = 1;
    }
    else {
      BOOL v21 = FigServer_IsVideoDecodeService() != 0;
    }
    int IsServerProcess = v21;
    if (a3) {
      goto LABEL_22;
    }
  }
  else
  {
    int IsServerProcess = FigServer_IsServerProcess();
    if (a3) {
LABEL_22:
    }
      a3 = CFRetain(a3);
  }
  MEMORY[0x199705810](&VTDecompressionSessionGetTypeID_sRegisterVTDecompressionSessionOnce, RegisterVTDecompressionSession);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    goto LABEL_34;
  }
  uint64_t v24 = FigSemaphoreCreate();
  *(void *)(Instance + 72) = v24;
  if (!v24)
  {
    CFRelease((CFTypeRef)Instance);
    uint64_t Instance = 0;
LABEL_34:
    CFDictionaryRef MutableCopy = 0;
    uint64_t v7 = 4294954392;
    if (!a3) {
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  if (vtDecompressionSessionDeterminePolicyForPossibleHDR10PlusContent_onceToken != -1) {
    dispatch_once(&vtDecompressionSessionDeterminePolicyForPossibleHDR10PlusContent_onceToken, &__block_literal_global_0);
  }
  *(unsigned char *)(Instance + 144) = vtDecompressionSessionDeterminePolicyForPossibleHDR10PlusContent_hdr10PlusEnabled;
  if (vtDecompressionSessionSetupDolbyVision8p1_onceToken != -1) {
    dispatch_once(&vtDecompressionSessionSetupDolbyVision8p1_onceToken, &__block_literal_global_17);
  }
  *(unsigned char *)(Instance + 145) = vtDecompressionSessionSetupDolbyVision8p1_dolbyVision8p1Enabled;
  if (vtDecompressionSessionSetupDolbyVision10p4_onceToken != -1) {
    dispatch_once(&vtDecompressionSessionSetupDolbyVision10p4_onceToken, &__block_literal_global_23);
  }
  *(unsigned char *)(Instance + 146) = vtDecompressionSessionSetupDolbyVision10p4_dolbyVision10p4Enabled;
  LODWORD(v125[0]) = 0;
  if (a6) {
    FigCFDictionaryGetInt32IfPresent();
  }
  uint64_t v26 = FigOSTransactionCreate();
  *(void *)(Instance + 152) = v26;
  if (!v26)
  {
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_239;
  }
  if (!IsServerProcess && !v20 && !v19)
  {
    uint64_t v27 = VTDecompressionSessionRemoteBridge_Create(Instance, a1, desc, (const __CFDictionary *)a3, a4, a5, (uint64_t)a6, (uint64_t *)(Instance + 24));
    if (!v27)
    {
      FigStartForwardingMediaServicesProcessDeathNotification();
      CFDictionaryRef MutableCopy = 0;
      *(CFAbsoluteTime *)(Instance + 160) = CFAbsoluteTimeGetCurrent();
      goto LABEL_42;
    }
LABEL_239:
    uint64_t v7 = v27;
    CFDictionaryRef MutableCopy = 0;
    if (!a3) {
      goto LABEL_106;
    }
    goto LABEL_105;
  }
  int VideoDynamicRange = CMVideoFormatDescriptionGetVideoDynamicRange();
  CFDictionaryRef MutableCopy = 0;
  CFTypeRef v115 = a3;
  if (a4 && VideoDynamicRange >= 2)
  {
    if (CelestialShouldAllowHTPCIOSurfacesForHDRPlaybackToCA())
    {
      float v29 = (const void *)*MEMORY[0x1E4F1CFD0];
      float v30 = (const void *)*MEMORY[0x1E4F24D18];
      if (v29 == CFDictionaryGetValue(a4, (const void *)*MEMORY[0x1E4F24D18]))
      {
        CFDictionaryRef MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        CFDictionaryRemoveValue(MutableCopy, v30);
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D10], v29);
      }
      else
      {
        CFDictionaryRef MutableCopy = 0;
      }
      a3 = v115;
    }
    else
    {
      CFDictionaryRef MutableCopy = 0;
    }
  }
  if (MutableCopy) {
    float v31 = MutableCopy;
  }
  else {
    float v31 = a4;
  }
  *(void *)(Instance + 80) = v31;
  if (v31) {
    CFRetain(v31);
  }
  *(void *)(Instance + 88) = a3;
  if (a3) {
    CFRetain(a3);
  }
  *(void *)(Instance + 128) = a6;
  if (a6) {
    CFRetain(a6);
  }
  if (a5) {
    *(_OWORD *)(Instance + 96) = *a5;
  }
  uint64_t v120 = 0;
  float v121 = 0;
  float v33 = (CFIndex *)(Instance + 48);
  CFIndex v32 = *(void *)(Instance + 48);
  uint64_t v116 = Instance + 32;
  char v119 = 0;
  float v34 = *(const void **)(Instance + 88);
  if (v34)
  {
    CFDictionaryRef cf = (const __CFDictionary *)CFRetain(v34);
    if (cf)
    {
      char v114 = 0;
      goto LABEL_70;
    }
    if (*(void *)(Instance + 88))
    {
      uint64_t v7 = FigSignalErrorAt();
      CFDictionaryRef cf = 0;
      uint64_t v35 = 0;
      char v114 = 1;
      goto LABEL_102;
    }
  }
  CFDictionaryRef cf = 0;
  char v114 = 1;
LABEL_70:
  uint64_t MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  uint64_t v37 = MediaSubType;
  if ((int)MediaSubType <= 1836415072)
  {
    if ((int)MediaSubType <= 1718908519)
    {
      if (MediaSubType == 1635135537) {
        goto LABEL_88;
      }
      int v41 = 1667790435;
      goto LABEL_86;
    }
    if (MediaSubType == 1718908520 || MediaSubType == 1751479857) {
      goto LABEL_97;
    }
    unsigned int v38 = 1752589105;
    if (MediaSubType != 1752589105) {
      goto LABEL_99;
    }
    BOOL v39 = FigVideoFormatDescriptionContainsAlphaChannel() == 0;
    unsigned int v40 = 1836415073;
LABEL_94:
    if (v39) {
      uint64_t v37 = v38;
    }
    else {
      uint64_t v37 = v40;
    }
    goto LABEL_97;
  }
  if ((int)MediaSubType > 1902667125)
  {
    if (MediaSubType == 1902667126) {
      goto LABEL_97;
    }
    unsigned int v38 = 1902671459;
    if (MediaSubType != 1902671459)
    {
      int v41 = 1902998904;
LABEL_86:
      if (MediaSubType != v41) {
        goto LABEL_99;
      }
      goto LABEL_97;
    }
    BOOL v39 = FigVideoFormatDescriptionContainsAlphaChannel() == 0;
    unsigned int v40 = 1902998904;
    goto LABEL_94;
  }
  if (MediaSubType != 1836415073 && MediaSubType != 1869117027)
  {
    if (MediaSubType != 1902212657) {
      goto LABEL_99;
    }
LABEL_88:
    if (FigIsHDRAllowedOnDevice())
    {
      if ((LOBYTE(v125[0]) = 0,
            FigCFDictionaryGetBooleanIfPresent(),
            FigVideoFormatDescriptionConformsToDolbyVisionProfile10p0())
        || *(unsigned char *)(Instance + 146) && FigVideoFormatDescriptionConformsToDolbyVisionProfile10p4()
        || *(unsigned char *)(Instance + 144)
        && vtFormatDescriptionIsPQ(desc)
        && VTIsHardwareDecodeSupported(0x61763031u))
      {
        if (v37 == 1902212657)
        {
          uint64_t v37 = 1902403958;
        }
        else if (v37 == 1635135537)
        {
          uint64_t v37 = 1684108849;
        }
      }
    }
    goto LABEL_99;
  }
LABEL_97:
  if (!FigIsHDRAllowedOnDevice()) {
    goto LABEL_99;
  }
  FigCFDictionaryGetBooleanIfPresent();
  if (FigVideoFormatDescriptionConformsToDolbyVisionProfile84()) {
    goto LABEL_167;
  }
  int8x16_t v90 = v8;
  uint64_t v91 = v37;
  float32x4_t v92 = (CFStringRef *)MEMORY[0x1E4F24BC8];
  if (!*(unsigned char *)(Instance + 144)) {
    goto LABEL_227;
  }
  CFTypeRef v124 = 0;
  __int16 v123 = 0;
  char v122 = 0;
  CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F24BC8]);
  if (FigCFEqual())
  {
    CFDictionaryRef v93 = (const __CFDictionary *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F1EE20]);
    if (v93)
    {
      CFDictionaryRef v94 = v93;
      CFTypeID v95 = CFGetTypeID(v93);
      if (v95 == CFDictionaryGetTypeID())
      {
        CFArrayRef v96 = (const __CFArray *)CFDictionaryGetValue(v94, @"hvcC");
        if (v96)
        {
          CFArrayRef ValueAtIndex = v96;
          CFTypeID v98 = CFGetTypeID(v96);
          if (v98 == CFArrayGetTypeID())
          {
            CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
            if (!ValueAtIndex) {
              goto LABEL_226;
            }
LABEL_219:
            CFTypeID v111 = CFGetTypeID(ValueAtIndex);
            if (v111 == CFDataGetTypeID())
            {
              v125[0] = 0;
              if (!FigHEVCBridge_GetHEVCParameterSetAtIndex()
                && !FigHEVCBridge_GetSPSChromaFormatAndBitDepths()
                && HIBYTE(v123) == 1
                && v123 == 10
                && v122 == 10)
              {
                float v33 = (CFIndex *)(Instance + 48);
                uint64_t v37 = v91;
                float v8 = v90;
                goto LABEL_167;
              }
            }
            goto LABEL_226;
          }
          CFTypeID v110 = CFGetTypeID(ValueAtIndex);
          if (v110 == CFDataGetTypeID()) {
            goto LABEL_219;
          }
        }
      }
    }
  }
LABEL_226:
  float v33 = (CFIndex *)(Instance + 48);
LABEL_227:
  if (*(unsigned char *)(Instance + 145))
  {
    CMFormatDescriptionGetExtension(desc, *v92);
    if (FigCFEqual())
    {
      uint64_t v37 = v91;
      float v8 = v90;
      if (!FigVideoFormatDescriptionConformsToDolbyVisionProfile81()) {
        goto LABEL_99;
      }
LABEL_167:
      if ((int)v37 <= 1836415072)
      {
        switch(v37)
        {
          case 0x63687663:
            uint64_t v37 = 1667524657;
            break;
          case 0x68657631:
            uint64_t v37 = 1685481573;
            break;
          case 0x68766331:
            uint64_t v37 = 1685481521;
            break;
        }
      }
      else if ((int)v37 > 1902671458)
      {
        if (v37 == 1902671459)
        {
          uint64_t v37 = 1902405681;
        }
        else if (v37 == 1902998904)
        {
          uint64_t v37 = 1902407032;
        }
      }
      else if (v37 == 1836415073)
      {
        uint64_t v37 = 1684895096;
      }
      else if (v37 == 1902667126)
      {
        uint64_t v37 = 1902405733;
      }
      goto LABEL_99;
    }
  }
  uint64_t v37 = v91;
  float v8 = v90;
LABEL_99:
  *(void *)uint64_t v116 = 0;
  *(void *)(Instance + 40) = 0;
  CFAllocatorRef v42 = CFGetAllocator((CFTypeRef)Instance);
  uint64_t v7 = VTSelectAndCreateVideoDecoderInstanceInternal(v37, (uint64_t)v42, 0, cf, v32, &v120, &v119, v33);
  a3 = v115;
  if (v7)
  {
LABEL_100:
    FigSignalErrorAt();
    goto LABEL_101;
  }
  unsigned int v112 = MutableCopy;
  unsigned int v113 = v33;
  while (1)
  {
    CFAllocatorRef v46 = CFGetAllocator((CFTypeRef)Instance);
    uint64_t v47 = CFAllocatorAllocate(v46, 200, 0);
    uint64_t v35 = (uint64_t)v47;
    if (!v47)
    {
      uint64_t v7 = 4294954392;
LABEL_173:
      CFDictionaryRef MutableCopy = v112;
      goto LABEL_102;
    }
    v47[24] = 0;
    *((_OWORD *)v47 + 10) = 0u;
    *((_OWORD *)v47 + 11) = 0u;
    *((_OWORD *)v47 + 8) = 0u;
    *((_OWORD *)v47 + 9) = 0u;
    *((_OWORD *)v47 + 6) = 0u;
    *((_OWORD *)v47 + 7) = 0u;
    *((_OWORD *)v47 + 4) = 0u;
    *((_OWORD *)v47 + 5) = 0u;
    *((_OWORD *)v47 + 2) = 0u;
    *((_OWORD *)v47 + 3) = 0u;
    *(_OWORD *)uint64_t v47 = 0u;
    *((_OWORD *)v47 + 1) = 0u;
    unint64_t v48 = 0;
    v47[9] = FigSimpleMutexCreate();
    if (v119) {
      goto LABEL_129;
    }
    CFAllocatorRef v49 = CFGetAllocator((CFTypeRef)Instance);
    uint64_t v50 = vtDecompressionSubDuctAllocate(v49, &v121);
    if (v50)
    {
      uint64_t v7 = v50;
      goto LABEL_173;
    }
    unint64_t v48 = v121;
    *float v121 = Instance;
    v48[3] = (uint64_t)v48;
    v48[4] = v35;
    v48[2] = FigFormatDescriptionRetain();
    uint64_t v51 = *(const void **)(Instance + 80);
    if (v51) {
      void v48[8] = (uint64_t)CFRetain(v51);
    }
    CFDictionaryRef v52 = *(const __CFDictionary **)(Instance + 128);
    if (v52)
    {
      unsigned int v53 = CFDictionaryGetValue(v52, @"SharePixelBufferPool");
      v48[33] = (uint64_t)v53;
      if (v53) {
        CFRetain(v53);
      }
      FigCFDictionaryGetInt32IfPresent();
      unsigned int v54 = CFDictionaryGetValue(*(CFDictionaryRef *)(Instance + 128), @"LoggingIdentifier");
      v48[31] = (uint64_t)v54;
      if (v54) {
        CFRetain(v54);
      }
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
    }
LABEL_129:
    *(void *)uint64_t v35 = Instance;
    *(void *)(v35 + 56) = 1;
    *(void *)(v35 + 8) = v120;
    *(void *)(v35 + 24) = v35;
    *(void *)(v35 + 16) = v48;
    vtDecompressionDuctSetVideoFormatDescription(v35, desc);
    *(_DWORD *)(v35 + 112) = 0x7FFFFFFF;
    uint64_t v55 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v35 + 148) = *MEMORY[0x1E4F1F9F8];
    *(void *)(v35 + 164) = *(void *)(v55 + 16);
    *(_DWORD *)(v35 + 140) = 0x7FFFFFFF;
    *(void *)(Instance + 32) = v35;
    *(void *)(Instance + 40) = v48;
    if ((v114 & 1) == 0)
    {
      float v56 = CFDictionaryGetValue(cf, @"DecoderUsage");
      if (v56)
      {
        float v57 = v56;
        uint64_t v58 = *(void *)(v35 + 8);
        uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v60 = v59 ? v59 : 0;
        float v61 = *(void (**)(uint64_t, __CFString *, const void *))(v60 + 56);
        if (v61) {
          v61(v58, @"DecoderUsage", v57);
        }
      }
    }
    CFDictionaryRef v62 = *(const __CFDictionary **)(Instance + 128);
    if (v62)
    {
      float v63 = CFDictionaryGetValue(v62, @"SelectPixelFormatWithAlpha");
      if (v63)
      {
        float v64 = v63;
        uint64_t v65 = *(void *)(v35 + 8);
        uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v67 = v66 ? v66 : 0;
        float v68 = *(void (**)(uint64_t, __CFString *, const void *))(v67 + 56);
        if (v68) {
          v68(v65, @"SelectPixelFormatWithAlpha", v64);
        }
      }
      float v69 = CFDictionaryGetValue(*(CFDictionaryRef *)(Instance + 128), @"WriteDirectlyToPlanesOfTargetCVPixelBuffer");
      if (v69)
      {
        float v70 = v69;
        uint64_t v71 = *(void *)(v35 + 8);
        uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v73 = v72 ? v72 : 0;
        float32x4_t v74 = *(void (**)(uint64_t, __CFString *, const void *))(v73 + 56);
        if (v74) {
          v74(v71, @"WriteDirectlyToPlanesOfTargetCVPixelBuffer", v70);
        }
      }
      uint64_t v75 = *(void *)(v35 + 8);
      uint64_t v76 = *(void *)(Instance + 128);
      uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v77) {
        uint64_t v78 = v77;
      }
      else {
        uint64_t v78 = 0;
      }
      int16x8_t v79 = *(void (**)(uint64_t, __CFString *, uint64_t))(v78 + 56);
      if (v79) {
        v79(v75, @"DecompressionSessionOptions", v76);
      }
    }
    uint64_t v80 = *(void *)(v35 + 8);
    uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v81) {
      uint64_t v82 = v81;
    }
    else {
      uint64_t v82 = 0;
    }
    int8x8_t v83 = *(uint64_t (**)(uint64_t, uint64_t, CMFormatDescriptionRef))(v82 + 8);
    if (!v83)
    {
      unsigned int v84 = -12782;
      goto LABEL_161;
    }
    unsigned int v84 = v83(v80, v35 + 16, desc);
    if (!v84) {
      break;
    }
LABEL_161:
    if (v7) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v84;
    }
    CFIndex v85 = *(void *)(Instance + 48) + 1;
    CFAllocatorRef v86 = CFGetAllocator((CFTypeRef)Instance);
    vtDecompressionDuctFinalize(v86, (void *)v35);
    CFAllocatorRef v87 = CFGetAllocator((CFTypeRef)Instance);
    vtDecompressionSubDuctFinalize(v87, (uint64_t)v48);
    float v121 = 0;
    *(void *)uint64_t v116 = 0;
    *(void *)(Instance + 40) = 0;
    CFAllocatorRef v88 = CFGetAllocator((CFTypeRef)Instance);
    int v89 = VTSelectAndCreateVideoDecoderInstanceInternal(v37, (uint64_t)v88, 0, cf, v85, &v120, &v119, v113);
    a3 = v115;
    if (v89)
    {
      CFDictionaryRef MutableCopy = v112;
      goto LABEL_100;
    }
  }
  v125[0] = 0;
  int IsPropertySupportedByVideoDecoder = vtDecompressionSessionIsPropertySupportedByVideoDecoder(Instance, @"EnableVideoToolboxQoS");
  float32x4_t v100 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  CFDictionaryRef MutableCopy = v112;
  if (!IsPropertySupportedByVideoDecoder) {
    goto LABEL_209;
  }
  uint64_t v101 = *(void *)(v35 + 8);
  uint64_t v102 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v103 = v102 ? v102 : 0;
  float32x4_t v104 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v103 + 48);
  if (!v104) {
    goto LABEL_209;
  }
  int v105 = v104(v101, @"EnableVideoToolboxQoS", *v100, v125);
  CFTypeRef v106 = v125[0];
  if (!v105 && v125[0])
  {
    CFTypeID v107 = CFGetTypeID(v125[0]);
    if (v107 == CFBooleanGetTypeID() && CFEqual((CFTypeRef)*MEMORY[0x1E4F1CFD0], v125[0])) {
      *(unsigned char *)(v35 + 104) = 1;
    }
LABEL_209:
    CFTypeRef v106 = v125[0];
  }
  if (v106) {
    CFRelease(v106);
  }
  *(void *)(v35 + 120) = 0x3FF0000000000000;
  CFTypeRef v124 = 0;
  if (!VTDecompressionSessionCopyProperty(Instance, @"UsingHardwareAcceleratedVideoDecoder", *v100, &v124)&& v124&& (CFTypeID v108 = CFGetTypeID(v124), v108 == CFBooleanGetTypeID()))
  {
    a3 = v115;
    if (CFEqual((CFTypeRef)*MEMORY[0x1E4F1CFD0], v124)) {
      int v109 = 1;
    }
    else {
      int v109 = 2;
    }
    *(_DWORD *)(v35 + 192) = v109;
  }
  else
  {
    *(_DWORD *)(v35 + 192) = 0;
    a3 = v115;
  }
  if (v124) {
    CFRelease(v124);
  }
  uint64_t v7 = 0;
  *(void *)(Instance + 32) = v35;
  *(void *)(Instance + 40) = v48;
  float v121 = 0;
LABEL_101:
  uint64_t v35 = 0;
LABEL_102:
  CFAllocatorRef v43 = CFGetAllocator((CFTypeRef)Instance);
  vtDecompressionDuctFinalize(v43, (void *)v35);
  CFAllocatorRef v44 = CFGetAllocator((CFTypeRef)Instance);
  vtDecompressionSubDuctFinalize(v44, (uint64_t)v121);
  if ((v114 & 1) == 0)
  {
    CFRelease(cf);
    if (!v7) {
      goto LABEL_112;
    }
LABEL_104:
    if (!a3) {
      goto LABEL_106;
    }
LABEL_105:
    CFRelease(a3);
    goto LABEL_106;
  }
  if (v7) {
    goto LABEL_104;
  }
LABEL_112:
  if (*(void *)v116)
  {
    if (*(void *)(*(void *)v116 + 8))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v45 = FigNotificationCenterAddWeakListener();
      if (v45)
      {
        uint64_t v7 = v45;
        if (!a3) {
          goto LABEL_106;
        }
        goto LABEL_105;
      }
    }
  }
  *(CFAbsoluteTime *)(Instance + 160) = CFAbsoluteTimeGetCurrent();
  if (!IsServerProcess) {
LABEL_42:
  }
    vtDecompressionSetAllowBitstreamToChangeFrameDimensionsIfNecessary(desc, Instance);
  uint64_t v7 = 0;
  *float v8 = Instance;
  uint64_t Instance = 0;
  if (a3) {
    goto LABEL_105;
  }
LABEL_106:
  if (Instance) {
    CFRelease((CFTypeRef)Instance);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v7;
}

uint64_t vtDecompressionSetAllowBitstreamToChangeFrameDimensionsIfNecessary(const opaqueCMFormatDescription *a1, uint64_t a2)
{
  uint64_t result = CMFormatDescriptionGetMediaSubType(a1);
  if (result == 1902212657 || result == 1635135537)
  {
    uint64_t result = dyld_program_sdk_at_least();
    if ((result & 1) == 0)
    {
      uint64_t v4 = (const void *)*MEMORY[0x1E4F1CFC8];
      return VTDecompressionSessionSetProperty(a2, @"AllowBitstreamToChangeFrameDimensions", v4);
    }
  }
  return result;
}

Boolean VTIsStereoMVHEVCDecodeSupported(void)
{
  return 1;
}

OSStatus VTDecompressionSessionSetMultiImageCallback(VTDecompressionSessionRef decompressionSession, VTDecompressionOutputMultiImageCallback outputMultiImageCallback, void *outputMultiImageRefcon)
{
  if (!decompressionSession || !outputMultiImageCallback) {
    goto LABEL_14;
  }
  if (!*((void *)decompressionSession + 3))
  {
    float v5 = (void (__cdecl *)(void *, void *, OSStatus, VTDecodeInfoFlags, CMTaggedBufferGroupRef, CMTime, CMTime))*((void *)decompressionSession + 14);
    if (v5 == outputMultiImageCallback || v5 == 0)
    {
      *((void *)decompressionSession + 14) = outputMultiImageCallback;
      *((void *)decompressionSession + 15) = outputMultiImageRefcon;
      return 0;
    }
LABEL_14:
    FigSignalErrorAt();
    return 0;
  }
  uint64_t v3 = *((void *)decompressionSession + 3);

  return VTDecompressionSessionRemoteBridge_SetMultiImageCallback(v3, (uint64_t)outputMultiImageCallback, (uint64_t)outputMultiImageRefcon);
}

uint64_t vtDecompressionSessionCopyPropertiesHandledByVideoToolbox(CFTypeRef *a1)
{
  MEMORY[0x199705810](&sCreatePropertiesHandledByVideoToolboxOnce_0, vtDecompressionSessionCreatePropertiesHandledByVideoToolbox);
  if (sVTDecompressionSessionPropertiesHandledByVideoToolbox)
  {
    *a1 = CFRetain((CFTypeRef)sVTDecompressionSessionPropertiesHandledByVideoToolbox);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

const void *vtDecompressionSubDuctSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3, char *a4)
{
  if (CFEqual(@"PixelBufferPool", a2)
    || CFEqual(@"PixelBufferPoolIsShared", a2)
    || CFEqual(@"PoolPixelBufferAttributesSeed", a2)
    || CFEqual(@"PoolPixelBufferAttributes", a2)
    || CFEqual(@"NumberOfFramesInDecoder", a2)
    || CFEqual(@"MinFrameIDOfFramesInDecoder", a2)
    || CFEqual(@"MaxFrameIDOfFramesInDecoder", a2))
  {
    goto LABEL_8;
  }
  if (CFEqual(@"OutputPoolRequestedMinimumBufferCount", a2))
  {
    if (!a3)
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 104));
      int v16 = *(_DWORD *)(a1 + 76) + 1;
      *(_DWORD *)(a1 + 72) = 0;
      *(_DWORD *)(a1 + 76) = v16;
      goto LABEL_28;
    }
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(a3))
    {
      if (a1)
      {
        int valuePtr = -1;
        CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
        if ((valuePtr & 0x80000000) == 0)
        {
          MEMORY[0x1997056B0](*(void *)(a1 + 104));
          int v11 = *(_DWORD *)(a1 + 76) + 1;
          *(_DWORD *)(a1 + 72) = valuePtr;
          *(_DWORD *)(a1 + 76) = v11;
LABEL_28:
          MEMORY[0x1997056C0](*(void *)(a1 + 104));
          goto LABEL_29;
        }
      }
    }
LABEL_8:
    uint64_t result = (const void *)FigSignalErrorAt();
LABEL_9:
    char v9 = 0;
    goto LABEL_10;
  }
  if (CFEqual(@"PixelTransferProperties", a2))
  {
    if (a3)
    {
      CFTypeID v12 = CFDictionaryGetTypeID();
      if (v12 != CFGetTypeID(a3)) {
        goto LABEL_8;
      }
    }
    if (!a1)
    {
LABEL_29:
      uint64_t result = 0;
      goto LABEL_9;
    }
    vtDecompressionSubDuctFinishAsynchronousTransfers(a1);
    unint64_t v13 = *(const void **)(a1 + 136);
    if (v13) {
      CFRelease(v13);
    }
    if (a3)
    {
      CFAllocatorRef v14 = CFGetAllocator(*(CFTypeRef *)a1);
      CFDictionaryRef Copy = CFDictionaryCreateCopy(v14, a3);
    }
    else
    {
      CFDictionaryRef Copy = 0;
    }
    *(void *)(a1 + 136) = Copy;
    uint64_t result = *(const void **)(a1 + 128);
    if (result)
    {
      CFRelease(result);
      uint64_t result = 0;
      *(void *)(a1 + 128) = 0;
    }
    goto LABEL_45;
  }
  if (CFEqual(@"ClientPID", a2))
  {
    if (!a3) {
      goto LABEL_8;
    }
    CFTypeID v17 = CFNumberGetTypeID();
    if (v17 != CFGetTypeID(a3) || !a1) {
      goto LABEL_8;
    }
    MEMORY[0x1997056B0](*(void *)(a1 + 104));
    CFNumberGetValue(a3, kCFNumberSInt32Type, (void *)(a1 + 240));
    if (*(void *)(a1 + 152)) {
      uint64_t v18 = FigDispatchQueueSetPriorityAndClientPID();
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v23 = *(void *)(a1 + 168);
    if (v23) {
      uint64_t v18 = vtDecompressionSubDuctAsyncPixelTransfer_SetClientPIDOnWorkerThreads(v23, *(_DWORD *)(a1 + 240));
    }
    uint64_t v24 = *(const void **)(a1 + 128);
    if (v24) {
      uint64_t v18 = VTSessionSetProperty(v24, @"ClientPID", a3);
    }
    MEMORY[0x1997056C0](*(void *)(a1 + 104));
    char v9 = 0;
    goto LABEL_91;
  }
  if (CFEqual(@"ThrottleForBackground", a2))
  {
    if (!a3) {
      goto LABEL_8;
    }
    CFTypeID v19 = CFBooleanGetTypeID();
    if (v19 != CFGetTypeID(a3) || !a1) {
      goto LABEL_8;
    }
    MEMORY[0x1997056B0](*(void *)(a1 + 104));
    *(unsigned char *)(a1 + 256) = CFBooleanGetValue(a3);
    if (*(void *)(a1 + 152)) {
      uint64_t v20 = FigDispatchQueueSetPriorityAndClientPID();
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v27 = *(void *)(a1 + 168);
    if (v27)
    {
      if (*(unsigned char *)(a1 + 257)) {
        int v28 = 31;
      }
      else {
        int v28 = 3;
      }
      if (*(unsigned char *)(a1 + 256)) {
        int v29 = 16;
      }
      else {
        int v29 = v28;
      }
      uint64_t v20 = vtDecompressionSubDuctAsyncPixelTransfer_SetPriorityOnWorkerThreads(v27, v29);
    }
    MEMORY[0x1997056C0](*(void *)(a1 + 104));
    char v9 = 1;
    goto LABEL_78;
  }
  if (!CFEqual(@"RealTime", a2))
  {
    if (CFEqual(@"MaximizePowerEfficiency", a2))
    {
      if (a3)
      {
        CFTypeID v22 = CFGetTypeID(a3);
        if (v22 != CFBooleanGetTypeID()) {
          goto LABEL_8;
        }
      }
      if (!a1) {
        goto LABEL_8;
      }
      MEMORY[0x1997056B0](*(void *)(a1 + 104));
      *(unsigned char *)(a1 + 258) = FigCFEqual();
      MEMORY[0x1997056C0](*(void *)(a1 + 104));
      uint64_t result = 0;
LABEL_45:
      char v9 = 1;
      goto LABEL_10;
    }
    if (CFEqual(@"MaxAgeForOutputPixelBufferPool", a2))
    {
      if (!a3) {
        goto LABEL_8;
      }
      CFTypeID v25 = CFNumberGetTypeID();
      if (v25 != CFGetTypeID(a3)) {
        goto LABEL_8;
      }
      uint64_t v53 = 0;
      if (!a1)
      {
        uint64_t v20 = FigSignalErrorAt();
LABEL_136:
        char v9 = 0;
LABEL_78:
        uint64_t result = (const void *)v20;
        goto LABEL_10;
      }
      MEMORY[0x1997056B0](*(void *)(a1 + 104));
      CFNumberGetValue(a3, kCFNumberDoubleType, &v53);
      uint64_t v26 = CVPixelBufferPoolSetMaxBufferAge();
      goto LABEL_134;
    }
    if (CFEqual(@"ColorPrimaries", a2))
    {
      if (!a3) {
        goto LABEL_8;
      }
      CFTypeID v34 = CFGetTypeID(a3);
      if (v34 != CFStringGetTypeID() || !a1) {
        goto LABEL_8;
      }
      MEMORY[0x1997056B0](*(void *)(a1 + 104));
      uint64_t v35 = *(const void **)(a1 + 200);
      *(void *)(a1 + 200) = a3;
      CFRetain(a3);
      if (v35) {
        CFRelease(v35);
      }
      unint64_t v36 = *(const void **)(a1 + 232);
      if (v36)
      {
        CFRelease(v36);
        *(void *)(a1 + 232) = 0;
      }
      uint64_t v37 = *(const void **)(a1 + 128);
      if (v37)
      {
        CFStringRef v38 = @"DestinationColorPrimaries";
        BOOL v39 = *(const void **)(a1 + 200);
LABEL_133:
        uint64_t v26 = VTSessionSetProperty(v37, v38, v39);
LABEL_134:
        uint64_t v20 = v26;
LABEL_135:
        MEMORY[0x1997056C0](*(void *)(a1 + 104));
        goto LABEL_136;
      }
    }
    else if (CFEqual(@"TransferFunction", a2))
    {
      if (!a3) {
        goto LABEL_8;
      }
      CFTypeID v40 = CFGetTypeID(a3);
      if (v40 != CFStringGetTypeID() || !a1) {
        goto LABEL_8;
      }
      MEMORY[0x1997056B0](*(void *)(a1 + 104));
      int v41 = *(const void **)(a1 + 208);
      *(void *)(a1 + 208) = a3;
      CFRetain(a3);
      if (v41) {
        CFRelease(v41);
      }
      CFAllocatorRef v42 = *(const void **)(a1 + 232);
      if (v42)
      {
        CFRelease(v42);
        *(void *)(a1 + 232) = 0;
      }
      uint64_t v37 = *(const void **)(a1 + 128);
      if (v37)
      {
        CFStringRef v38 = @"DestinationTransferFunction";
        BOOL v39 = *(const void **)(a1 + 208);
        goto LABEL_133;
      }
    }
    else if (CFEqual(@"YCbCrMatrix", a2))
    {
      if (!a3) {
        goto LABEL_8;
      }
      CFTypeID v43 = CFGetTypeID(a3);
      if (v43 != CFStringGetTypeID() || !a1) {
        goto LABEL_8;
      }
      MEMORY[0x1997056B0](*(void *)(a1 + 104));
      CFAllocatorRef v44 = *(const void **)(a1 + 216);
      *(void *)(a1 + 216) = a3;
      CFRetain(a3);
      if (v44) {
        CFRelease(v44);
      }
      uint64_t v45 = *(const void **)(a1 + 232);
      if (v45)
      {
        CFRelease(v45);
        *(void *)(a1 + 232) = 0;
      }
      uint64_t v37 = *(const void **)(a1 + 128);
      if (v37)
      {
        CFStringRef v38 = @"DestinationYCbCrMatrix";
        BOOL v39 = *(const void **)(a1 + 216);
        goto LABEL_133;
      }
    }
    else
    {
      if (!CFEqual(@"ICCProfile", a2))
      {
        if (!CFEqual(@"GeneratePerFrameHDRDisplayMetadata", a2))
        {
          if (a1)
          {
            uint64_t result = (const void *)VTVideoEncoderSetProperty(*(void *)(a1 + 8), (uint64_t)a2, (uint64_t)a3);
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (a3)
        {
          CFTypeID v49 = CFGetTypeID(a3);
          if (v49 == CFBooleanGetTypeID())
          {
            if (a1)
            {
              CFNumberRef v50 = (const __CFNumber *)*MEMORY[0x1E4F1CFD0];
              MEMORY[0x1997056B0](*(void *)(a1 + 104));
              if (v50 == a3)
              {
                *(unsigned char *)(a1 + 272) = 1;
              }
              else
              {
                *(unsigned char *)(a1 + 272) = 0;
                uint64_t v51 = *(const void **)(a1 + 280);
                if (v51)
                {
                  CFRelease(v51);
                  *(void *)(a1 + 280) = 0;
                }
                CFDictionaryRef v52 = *(const void **)(a1 + 288);
                if (v52)
                {
                  CFRelease(v52);
                  *(void *)(a1 + 288) = 0;
                }
              }
              goto LABEL_28;
            }
          }
        }
        goto LABEL_8;
      }
      if (!a3) {
        goto LABEL_8;
      }
      CFTypeID v46 = CFGetTypeID(a3);
      if (v46 != CFDataGetTypeID() || !a1) {
        goto LABEL_8;
      }
      MEMORY[0x1997056B0](*(void *)(a1 + 104));
      uint64_t v47 = *(const void **)(a1 + 224);
      *(void *)(a1 + 224) = a3;
      CFRetain(a3);
      if (v47) {
        CFRelease(v47);
      }
      unint64_t v48 = *(const void **)(a1 + 232);
      if (v48)
      {
        CFRelease(v48);
        *(void *)(a1 + 232) = 0;
      }
      uint64_t v37 = *(const void **)(a1 + 128);
      if (v37)
      {
        CFStringRef v38 = @"DestinationICCProfile";
        BOOL v39 = *(const void **)(a1 + 224);
        goto LABEL_133;
      }
    }
    uint64_t v20 = 0;
    goto LABEL_135;
  }
  if (a3)
  {
    CFTypeID v21 = CFGetTypeID(a3);
    if (v21 != CFBooleanGetTypeID()) {
      goto LABEL_8;
    }
  }
  if (!a1) {
    goto LABEL_8;
  }
  MEMORY[0x1997056B0](*(void *)(a1 + 104));
  *(unsigned char *)(a1 + 257) = FigCFEqual();
  if (*(void *)(a1 + 152)) {
    uint64_t v18 = FigDispatchQueueSetPriorityAndClientPID();
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v30 = *(void *)(a1 + 168);
  if (v30)
  {
    if (*(unsigned char *)(a1 + 257)) {
      int v31 = 31;
    }
    else {
      int v31 = 3;
    }
    if (*(unsigned char *)(a1 + 256)) {
      int v32 = 16;
    }
    else {
      int v32 = v31;
    }
    uint64_t v18 = vtDecompressionSubDuctAsyncPixelTransfer_SetPriorityOnWorkerThreads(v30, v32);
  }
  float v33 = *(const void **)(a1 + 128);
  if (v33) {
    uint64_t v18 = VTSessionSetProperty(v33, @"RealTime", a3);
  }
  MEMORY[0x1997056C0](*(void *)(a1 + 104));
  char v9 = 1;
LABEL_91:
  uint64_t result = (const void *)v18;
LABEL_10:
  if (a4) {
    *a4 = v9;
  }
  return result;
}

uint64_t vtDecompressionSubDuctAsyncPixelTransfer_SetClientPIDOnWorkerThreads(uint64_t a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (*(int *)(a1 + 8) < 1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = FigThreadSetProperty();
      ++v4;
    }
    while (v4 < *(int *)(a1 + 8));
    uint64_t v6 = v5;
  }
  CFRelease(v3);
  return v6;
}

uint64_t vtDecompressionSubDuctAsyncPixelTransfer_SetPriorityOnWorkerThreads(uint64_t a1, int a2)
{
  if (*(int *)(a1 + 8) < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    int valuePtr = a2;
    CFNumberRef v6 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
    uint64_t v7 = FigThreadSetProperty();
    if (v6) {
      CFRelease(v6);
    }
    ++v4;
  }
  while (v4 < *(int *)(a1 + 8));
  return v7;
}

uint64_t VTDecompressionSessionSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  char v27 = 0;
  if (*(unsigned char *)(a1 + 16))
  {
LABEL_2:
    return FigSignalErrorAt();
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7)
  {
    return VTDecompressionSessionRemoteBridge_SetProperty(v7, (uint64_t)a2, (uint64_t)a3);
  }
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  if (!vtDecompressionSessionIsPropertyHandledByVideoToolbox(a2)) {
    goto LABEL_46;
  }
  if (!vtDecompressionSessionIsPropertySupportedBySubDuct(a2))
  {
    if (CFEqual(a2, @"OnlyTheseFrames"))
    {
      if (*(unsigned char *)(v9 + 104))
      {
        if (!a3) {
          goto LABEL_19;
        }
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID != CFGetTypeID(a3)) {
          goto LABEL_2;
        }
        if (!CFEqual(a3, @"AllFrames"))
        {
          if (CFEqual(a3, @"NonDroppableFrames"))
          {
            uint64_t v10 = 0;
            int v25 = 1;
          }
          else if (CFEqual(a3, @"IFrames"))
          {
            uint64_t v10 = 0;
            int v25 = 2;
          }
          else
          {
            if (!CFEqual(a3, @"KeyFrames")) {
              goto LABEL_2;
            }
            uint64_t v10 = 0;
            int v25 = 3;
          }
          *(_DWORD *)(v9 + 108) = v25;
        }
        else
        {
LABEL_19:
          uint64_t v10 = 0;
          *(_DWORD *)(v9 + 108) = 0;
        }
        return v10;
      }
      goto LABEL_46;
    }
    if (CFEqual(a2, @"ReducedFrameDelivery"))
    {
      if (*(unsigned char *)(v9 + 104))
      {
        if (!a3)
        {
          uint64_t v10 = 0;
          *(void *)(v9 + 120) = 0x3FF0000000000000;
          return v10;
        }
        CFTypeID v15 = CFNumberGetTypeID();
        if (v15 == CFGetTypeID(a3))
        {
          double v26 = 1.0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberDoubleType, &v26);
          if (v26 < 0.0 || v26 > 1.0) {
            return FigSignalErrorAt();
          }
          uint64_t v10 = 0;
          *(double *)(v9 + 120) = v26;
          return v10;
        }
        return 0;
      }
    }
    else
    {
      if (CFEqual(a2, @"PowerLogSessionID"))
      {
        if (!a3) {
          goto LABEL_2;
        }
        CFTypeID v17 = CFGetTypeID(a3);
        if (v17 != CFStringGetTypeID()) {
          goto LABEL_2;
        }
        uint64_t v18 = *(const void **)(v9 + 176);
        *(void *)(v9 + 176) = a3;
        CFRetain(a3);
        if (v18) {
          CFRelease(v18);
        }
        return 0;
      }
      if (!CFEqual(a2, @"TemporalLevelLimit"))
      {
        if (CFEqual(@"NumberOfFramesBeingDecoded", a2)
          || CFEqual(@"MinOutputPresentationTimeStampOfFramesBeingDecoded", a2)
          || CFEqual(@"MaxOutputPresentationTimeStampOfFramesBeingDecoded", a2)
          || CFEqual(@"UsingSandboxedVideoDecoder", a2)
          || CFEqual(@"SuggestedQualityOfServiceTiers", a2))
        {
          goto LABEL_2;
        }
        return 0;
      }
      if (*(unsigned char *)(v9 + 104))
      {
        if (!a3)
        {
          uint64_t v10 = 0;
          *(_DWORD *)(v9 + 112) = 0x7FFFFFFF;
          return v10;
        }
        CFTypeID v19 = CFNumberGetTypeID();
        if (v19 != CFGetTypeID(a3)) {
          goto LABEL_2;
        }
        CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, (void *)(v9 + 112));
        return 0;
      }
    }
LABEL_46:
    uint64_t v10 = 4294954396;
    goto LABEL_47;
  }
  if (v8)
  {
    uint64_t v10 = (uint64_t)vtDecompressionSubDuctSetProperty(v8, a2, (const __CFNumber *)a3, &v27);
    if (!v27) {
      return v10;
    }
LABEL_47:
    if (vtDecompressionSessionIsPropertySupportedByVideoDecoder(a1, a2))
    {
      uint64_t v20 = *(void *)(v9 + 8);
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v23 = *(uint64_t (**)(void, void, void))(v22 + 56);
      if (v23) {
        return v23(v20, a2, a3);
      }
      return 4294954514;
    }
    return v10;
  }
  uint64_t v12 = *(void *)(v9 + 8);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  int v16 = *(uint64_t (**)(void, void, void))(v14 + 56);
  if (!v16) {
    return 4294954514;
  }

  return v16(v12, a2, a3);
}

uint64_t vtDecompressionSessionIsPropertySupportedByVideoDecoder(uint64_t a1, const void *a2)
{
  CFDictionaryRef theDict = 0;
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v7 = v6 ? v6 : 0;
  uint64_t v8 = *(void (**)(uint64_t, CFDictionaryRef *))(v7 + 24);
  if (!v8) {
    return 0;
  }
  v8(v5, &theDict);
  if (!theDict) {
    return 0;
  }
  uint64_t v2 = CFDictionaryContainsKey(theDict, a2);
  if (theDict) {
    CFRelease(theDict);
  }
  return v2;
}

void VTDecompressionSessionGetMinOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    if (*(void *)(a1 + 24))
    {
      uint64_t v4 = *(void *)(a1 + 24);
      VTDecompressionSessionRemoteBridge_GetMinOutputPresentationTimeStampOfFramesBeingDecoded(v4, a2);
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 32);
      vtDecompressionDuctGetMinOutputPresentationTimeStampOfFramesBeingDecoded(v5, a2);
    }
  }
  else
  {
    FigSignalErrorAt();
    uint64_t v3 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
    a2[2] = *(void *)(v3 + 16);
  }
}

uint64_t vtDecompressionSubDuctCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (CFEqual(@"PixelBufferPool", a2))
  {
    *a4 = 0;
    if (a1)
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 104));
      vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(a1);
      MEMORY[0x1997056C0](*(void *)(a1 + 104));
      CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolRetain(*(CVPixelBufferPoolRef *)(a1 + 96));
LABEL_13:
      *a4 = PixelBufferAttributes;
    }
    return 0;
  }
  if (CFEqual(@"OutputPoolRequestedMinimumBufferCount", a2))
  {
    *a4 = 0;
    if (!a1) {
      return 0;
    }
    int v10 = *(_DWORD *)(a1 + 72);
    uint64_t v9 = (uint64_t *)(a1 + 72);
    if (!v10) {
      return 0;
    }
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberType v12 = kCFNumberSInt32Type;
    p_uint64_t Count = v9;
    goto LABEL_12;
  }
  if (CFEqual(@"PoolPixelBufferAttributesSeed", a2))
  {
    *a4 = 0;
    if (!a1) {
      return 0;
    }
    MEMORY[0x1997056B0](*(void *)(a1 + 104));
    vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(a1);
    MEMORY[0x1997056C0](*(void *)(a1 + 104));
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_uint64_t Count = (uint64_t *)(a1 + 80);
    goto LABEL_11;
  }
  if (CFEqual(@"PoolPixelBufferAttributes", a2))
  {
    *a4 = 0;
    if (!a1) {
      return 0;
    }
    MEMORY[0x1997056B0](*(void *)(a1 + 104));
    vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(a1);
    MEMORY[0x1997056C0](*(void *)(a1 + 104));
    CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(*(CVPixelBufferPoolRef *)(a1 + 96));
    if (!PixelBufferAttributes) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
  if (CFEqual(@"PixelBufferPoolIsShared", a2))
  {
    *a4 = 0;
    if (!a1) {
      return 0;
    }
    MEMORY[0x1997056B0](*(void *)(a1 + 104));
    vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(a1);
    MEMORY[0x1997056C0](*(void *)(a1 + 104));
    CFTypeID v15 = (const void **)MEMORY[0x1E4F1CFD0];
    if (*(void *)(a1 + 96) != *(void *)(a1 + 88)) {
      CFTypeID v15 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_23;
  }
  if (CFEqual(@"PixelTransferProperties", a2))
  {
    *a4 = 0;
    if (!a1 || !*(void *)(a1 + 128)) {
      return 0;
    }
    CFDictionaryRef PixelBufferAttributes = *(const void **)(a1 + 136);
    goto LABEL_24;
  }
  if (CFEqual(@"ClientPID", a2))
  {
    if (!a1) {
      return 0;
    }
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_uint64_t Count = (uint64_t *)(a1 + 240);
    CFNumberType v12 = kCFNumberSInt32Type;
    goto LABEL_12;
  }
  if (CFEqual(@"ThrottleForBackground", a2))
  {
    if (!a1) {
      return 0;
    }
    CFTypeID v15 = (const void **)MEMORY[0x1E4F1CFD0];
    int v16 = *(unsigned __int8 *)(a1 + 256);
    goto LABEL_35;
  }
  if (CFEqual(@"MaxAgeForOutputPixelBufferPool", a2))
  {
    if (!a1) {
      return 0;
    }
    MEMORY[0x1997056B0](*(void *)(a1 + 104));
    CVPixelBufferPoolGetMaxBufferAge();
    uint64_t Count = v18;
    MEMORY[0x1997056C0](*(void *)(a1 + 104));
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_uint64_t Count = &Count;
    CFNumberType v12 = kCFNumberDoubleType;
    goto LABEL_12;
  }
  if (CFEqual(@"ColorPrimaries", a2))
  {
    if (!a1) {
      return 0;
    }
    CFDictionaryRef PixelBufferAttributes = *(const void **)(a1 + 200);
    if (!PixelBufferAttributes) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
  if (CFEqual(@"TransferFunction", a2))
  {
    if (!a1) {
      return 0;
    }
    CFDictionaryRef PixelBufferAttributes = *(const void **)(a1 + 208);
    if (!PixelBufferAttributes) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
  if (CFEqual(@"YCbCrMatrix", a2))
  {
    if (!a1) {
      return 0;
    }
    CFDictionaryRef PixelBufferAttributes = *(const void **)(a1 + 216);
    if (!PixelBufferAttributes) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
  if (CFEqual(@"ICCProfile", a2))
  {
    if (!a1) {
      return 0;
    }
    CFDictionaryRef PixelBufferAttributes = *(const void **)(a1 + 224);
    if (!PixelBufferAttributes) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
  if (CFEqual(@"RealTime", a2))
  {
    if (!a1) {
      return 0;
    }
    CFTypeID v15 = (const void **)MEMORY[0x1E4F1CFC8];
    int v16 = *(unsigned __int8 *)(a1 + 257);
    CFTypeID v17 = (const void **)MEMORY[0x1E4F1CFD0];
    goto LABEL_36;
  }
  if (a1)
  {
    uint64_t v19 = *(void *)(a1 + 8);
    if (v19)
    {
      return VTVideoEncoderCopyProperty(v19, (uint64_t)a2, a3, (uint64_t)a4);
    }
    if (CFEqual(@"GeneratePerFrameHDRDisplayMetadata", a2))
    {
      CFTypeID v15 = (const void **)MEMORY[0x1E4F1CFD0];
      int v16 = *(unsigned __int8 *)(a1 + 272);
LABEL_35:
      CFTypeID v17 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_36:
      if (!v16) {
        CFTypeID v15 = v17;
      }
LABEL_23:
      CFDictionaryRef PixelBufferAttributes = *v15;
LABEL_24:
      CFDictionaryRef PixelBufferAttributes = CFRetain(PixelBufferAttributes);
      goto LABEL_13;
    }
    if (CFEqual(@"NumberOfFramesInDecoder", a2))
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 104));
      uint64_t Count = FigCFDictionaryGetCount();
      MEMORY[0x1997056C0](*(void *)(a1 + 104));
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_uint64_t Count = &Count;
LABEL_11:
      CFNumberType v12 = kCFNumberIntType;
LABEL_12:
      CFDictionaryRef PixelBufferAttributes = CFNumberCreate(v11, v12, p_Count);
      goto LABEL_13;
    }
    if (CFEqual(@"MinFrameIDOfFramesInDecoder", a2))
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 104));
      int64_t v20 = FigCFDictionaryGetCount();
      if (v20 >= 1)
      {
        int64_t v21 = v20;
        uint64_t v22 = (const void **)malloc_type_calloc(v20, 8uLL, 0x80040B8603338uLL);
        CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 112), v22, 0);
        uint64_t v23 = 0;
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (v23 >= v22[i]) {
            int v25 = v22[i];
          }
          else {
            int v25 = v23;
          }
          if (i) {
            uint64_t v23 = v25;
          }
          else {
            uint64_t v23 = *v22;
          }
        }
LABEL_92:
        free(v22);
        goto LABEL_96;
      }
      goto LABEL_96;
    }
    if (CFEqual(@"MaxFrameIDOfFramesInDecoder", a2))
    {
      MEMORY[0x1997056B0](*(void *)(a1 + 104));
      int64_t v26 = FigCFDictionaryGetCount();
      if (v26 >= 1)
      {
        int64_t v27 = v26;
        uint64_t v22 = (const void **)malloc_type_calloc(v26, 8uLL, 0x80040B8603338uLL);
        CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 112), v22, 0);
        int v28 = 0;
        for (uint64_t j = 0; j != v27; ++j)
        {
          if (v28 <= v22[j]) {
            int v28 = v22[j];
          }
        }
        goto LABEL_92;
      }
LABEL_96:
      MEMORY[0x1997056C0](*(void *)(a1 + 104));
      CFDictionaryRef PixelBufferAttributes = (const void *)FigCFNumberCreateUInt64();
      goto LABEL_13;
    }
  }
  else if (CFEqual(@"GeneratePerFrameHDRDisplayMetadata", a2) {
         || CFEqual(@"NumberOfFramesInDecoder", a2)
  }
         || CFEqual(@"MinFrameIDOfFramesInDecoder", a2)
         || CFEqual(@"MaxFrameIDOfFramesInDecoder", a2))
  {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(uint64_t a1)
{
  valuePtr[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef v32 = 0;
  CFTypeRef cf = 0;
  if (*(_DWORD *)(a1 + 80) == *(_DWORD *)(a1 + 76))
  {
    CFDictionaryRef MutableCopy = 0;
    CFStringRef v2 = 0;
LABEL_3:
    uint64_t v3 = 0;
    goto LABEL_45;
  }
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a1 + 16));
  uint64_t v6 = *(void *)(a1 + 248);
  uint64_t v7 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v6)
  {
    uint64_t v8 = *(const void **)(a1 + 264);
    if (!v8)
    {
LABEL_9:
      CFStringRef v2 = CFStringCreateWithFormat(*v7, 0, @"decode:%@", v6);
      goto LABEL_11;
    }
    CFTypeID v9 = CFGetTypeID(v8);
    if (v9 == CFBooleanGetTypeID() && CFEqual((CFTypeRef)*MEMORY[0x1E4F1CFC8], *(CFTypeRef *)(a1 + 264)))
    {
      uint64_t v6 = *(void *)(a1 + 248);
      goto LABEL_9;
    }
  }
  CFStringRef v2 = @"decode";
LABEL_11:
  CFAllocatorRef v10 = *v7;
  CFDictionaryRef MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_67;
  }
  uint64_t v11 = VTCreatePixelBufferPoolAttributesWithName(v10, *(unsigned int *)(a1 + 240), v2, (__CFDictionary **)&cf);
  if (v11)
  {
LABEL_67:
    uint64_t v3 = v11;
    goto LABEL_45;
  }
  if (*(_DWORD *)(a1 + 72)) {
    FigCFDictionarySetInt32();
  }
  CFNumberType v12 = (const void *)*MEMORY[0x1E4F1CFD0];
  unsigned int v13 = v12 == CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D10]);
  LODWORD(valuePtr[0]) = 0;
  CFNumberRef Value = CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D70]);
  if (Value)
  {
    CFTypeID v15 = Value;
    CFTypeID v16 = CFGetTypeID(Value);
    if (v16 == CFArrayGetTypeID())
    {
      FigCFArrayGetInt32AtIndex();
    }
    else
    {
      CFTypeID v17 = CFGetTypeID(v15);
      if (v17 == CFNumberGetTypeID()) {
        CFNumberGetValue((CFNumberRef)v15, kCFNumberSInt32Type, valuePtr);
      }
    }
  }
  if (LODWORD(valuePtr[0]) != 1751410032
    && LODWORD(valuePtr[0]) != 1751411059
    && !vtDecompressionAttributesHaveColorSpaceAttachments(*(const __CFDictionary **)(a1 + 64))
    && !vtDecompressionAttributesHaveColorSpaceAttachments(*(const __CFDictionary **)(a1 + 56))
    && !*(void *)(a1 + 224)
    && !*(void *)(a1 + 200)
    && !*(void *)(a1 + 208)
    && !*(void *)(a1 + 216)
    && MediaSubType != 1634759272)
  {
    uint64_t v11 = vtCopyGuessedMissingColorSpaceAttachmentsFromFormatDescription(*(const opaqueCMFormatDescription **)(a1 + 16), (__CFDictionary **)&v32);
    if (v11) {
      goto LABEL_67;
    }
    CFTypeRef v29 = v32;
    if (v32)
    {
      if (CFDictionaryGetCount((CFDictionaryRef)v32) >= 1)
      {
        uint64_t v30 = (const void *)*MEMORY[0x1E4F24990];
        int v31 = CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24990]);
        if (v31)
        {
          valuePtr[0] = v31;
          valuePtr[1] = v29;
          uint64_t v11 = FigCFCreateCombinedDictionary();
          if (!v11)
          {
            CFDictionarySetValue(MutableCopy, v30, 0);
            goto LABEL_27;
          }
          goto LABEL_67;
        }
        CFDictionarySetValue(MutableCopy, v30, v29);
      }
    }
  }
LABEL_27:
  if (!FigVideoFormatDescriptionContainsAlphaChannel())
  {
LABEL_42:
    unsigned int v19 = 0;
    goto LABEL_43;
  }
  signed int v18 = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a1 + 16));
  unsigned int v19 = 1;
  if (v18 <= 1634743415)
  {
    if (v18 == 1634742376 || v18 == 1634742888) {
      goto LABEL_39;
    }
    unsigned __int16 v20 = 13416;
  }
  else
  {
    if ((v18 - 1634755432) <= 0xB && ((1 << (v18 - 104)) & 0x8C1) != 0
      || (v18 - 1634759272) <= 6 && ((1 << (v18 - 104)) & 0x51) != 0)
    {
      goto LABEL_39;
    }
    unsigned __int16 v20 = 13432;
  }
  if (v18 != (v20 | 0x61700000)) {
    goto LABEL_43;
  }
LABEL_39:
  CMFormatDescriptionGetExtension(*(CMFormatDescriptionRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E4F1ED90]);
  if (FigCFNumberGetSInt32() != 32) {
    goto LABEL_42;
  }
  if (!FigCFDictionaryGetValue()) {
    FigCFDictionarySetInt32();
  }
LABEL_43:
  CFAllocatorRef v21 = CFGetAllocator(*(CFTypeRef *)a1);
  CFDictionaryRef v22 = *(const __CFDictionary **)(a1 + 56);
  CFDictionaryRef v23 = (const __CFDictionary *)cf;
  uint64_t Dimensions = (uint64_t)CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(a1 + 16));
  int v25 = (CFTypeRef *)(a1 + 96);
  int64_t v26 = VTBuildPixelBufferPools2(v21, MutableCopy, v22, v23, Dimensions, *(const __CFBoolean **)(a1 + 264), v13, v19, *(unsigned char *)(a1 + 259) != 0, *(unsigned char *)(a1 + 260), (CVPixelBufferPoolRef *)(a1 + 96), (CVPixelBufferPoolRef *)(a1 + 88), 0, 0);
  if (v26)
  {
    uint64_t v3 = (uint64_t)v26;
    FigSignalErrorAt();
  }
  else
  {
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 76);
    if (*(void *)(a1 + 88)) {
      goto LABEL_3;
    }
    CFTypeRef v28 = *v25;
    if (*v25) {
      CFTypeRef v28 = CFRetain(v28);
    }
    uint64_t v3 = 0;
    *(void *)(a1 + 88) = v28;
  }
LABEL_45:
  if (cf) {
    CFRelease(cf);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v3;
}

void vtDecompressionDuctGetMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1FA08];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1FA08];
  a2[2] = *(void *)(v4 + 16);
  MEMORY[0x1997056B0](*(void *)(a1 + 72));
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 48);
  if (v5) {
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)vtDuctFrameTrackingInfoFindMaxPTS, a2);
  }

  JUMPOUT(0x1997056C0);
}

void vtCreateSuggestedQualityOfServiceTiers()
{
  values[6] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = vtCreateQualityOfServiceTier(@"AllFrames", 1.0);
  values[1] = @"TemporalLevelLimit";
  values[2] = vtCreateQualityOfServiceTier(@"NonDroppableFrames", 1.0);
  values[3] = vtCreateQualityOfServiceTier(@"IFrames", 1.0);
  values[4] = vtCreateQualityOfServiceTier(@"KeyFrames", 1.0);
  values[5] = vtCreateQualityOfServiceTier(@"KeyFrames", 0.5);
  sVTVideoDecoderSuggestedQualityOfServiceTiers = (uint64_t)CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 6, MEMORY[0x1E4F1D510]);
  if (!sVTVideoDecoderSuggestedQualityOfServiceTiers) {
    FigSignalErrorAt();
  }
  for (uint64_t i = 0; i != 6; ++i)
  {
    uint64_t v1 = values[i];
    if (v1) {
      CFRelease(v1);
    }
  }
}

uint64_t VTDecompressionSessionSetProperties(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v21 = a1;
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5)
  {
    uint64_t v22 = 0;
    if (!a2) {
      return v22;
    }
    uint64_t v6 = *(void *)(a1 + 32);
    long long context = 0u;
    long long v24 = 0u;
    int v7 = vtDecompressionSessionCopyPropertiesHandledByVideoToolbox((CFTypeRef *)&context);
    if (v7)
    {
      int v8 = v7;
    }
    else
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(uint64_t (**)(uint64_t, char *))(v13 + 24);
      if (!v14 || ((int v15 = v14(v11, (char *)&context + 8), v15 != -12782) ? (v16 = v15 == 0) : (v16 = 1), v16))
      {
        CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)vtDecompressionSessionAddPropertyToPartition, &context);
        int v8 = 0;
        CFDictionaryRef v10 = (const __CFDictionary *)*((void *)&v24 + 1);
        CFDictionaryRef v9 = (const __CFDictionary *)v24;
        goto LABEL_23;
      }
      int v8 = v15;
      FigSignalErrorAt();
    }
    CFDictionaryRef v9 = 0;
    CFDictionaryRef v10 = 0;
LABEL_23:
    if ((void)context) {
      CFRelease((CFTypeRef)context);
    }
    if (*((void *)&context + 1)) {
      CFRelease(*((CFTypeRef *)&context + 1));
    }
    LODWORD(v22) = v8;
    if (!v8)
    {
      if (v9) {
        CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)vtDecompressionSessionSetOneProperty, &v21);
      }
      if (v10)
      {
        uint64_t v17 = *(void *)(v6 + 8);
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v19 = v18 ? v18 : 0;
        unsigned __int16 v20 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(v19 + 32);
        if (!v20 || (LODWORD(v22) = v20(v17, v10), v22 == -12782))
        {
          LODWORD(v22) = 0;
          CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)vtDecompressionSessionSetOneProperty, &v21);
        }
      }
    }
    if (v9) {
      CFRelease(v9);
    }
    if (v10) {
      CFRelease(v10);
    }
    return v22;
  }

  return VTDecompressionSessionRemoteBridge_SetProperties(v5, (uint64_t)a2);
}

uint64_t vtDecompressionSessionSetOneProperty(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t result = VTDecompressionSessionSetProperty(*(void *)a3, a1, a2);
  if (!*(_DWORD *)(a3 + 8)) {
    *(_DWORD *)(a3 + 8) = result;
  }
  return result;
}

uint64_t VTDecompressionSessionCopySerializableProperties(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else if (*(void *)(a1 + 24))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    return VTDecompressionSessionRemoteBridge_CopySerializableProperties(v6, a2, a3);
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFDictionaryRef v10 = *(uint64_t (**)(uint64_t, uint64_t, void *))(v9 + 40);
    if (!v10) {
      return 0;
    }
    uint64_t result = v10(v7, a2, a3);
    if (result == -12782) {
      return 0;
    }
  }
  return result;
}

OSStatus VTDecompressionSessionCopyBlackPixelBuffer(VTDecompressionSessionRef session, CVPixelBufferRef *pixelBufferOut)
{
  CVPixelBufferRef pixelBufferOuta = 0;
  CFTypeRef cf = 0;
  if (pixelBufferOut)
  {
    uint64_t v4 = *((void *)session + 3);
    if (v4)
    {
      return VTDecompressionSessionRemoteBridge_CopyBlackPixelBuffer(v4, (CFTypeRef *)pixelBufferOut);
    }
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    OSStatus v7 = VTDecompressionSessionCopyProperty((uint64_t)session, @"PixelBufferPool", (const __CFAllocator *)*MEMORY[0x1E4F1CF80], &cf);
    if (v7)
    {
LABEL_36:
      OSStatus v20 = v7;
LABEL_31:
      if (cf) {
        CFRelease(cf);
      }
      if (pixelBufferOuta) {
        CFRelease(pixelBufferOuta);
      }
      return v20;
    }
    uint64_t v9 = (__CVPixelBufferPool **)((char *)session + 136);
    uint64_t v8 = (__CVPixelBufferPool *)*((void *)session + 17);
    if (!v8)
    {
      CFDictionaryRef v10 = (void *)cf;
      int v23 = 0;
      if (!VTAvoidIOSurfaceBackings()
        && (CFDictionaryRef PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes((CVPixelBufferPoolRef)v10),
            CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x1E4F24D20]))
        && (FigCFDictionaryGetIntIfPresent(), v23))
      {
        uint64_t v8 = *v9;
        if (!*v9)
        {
          uint64_t MutableCopy = FigCFDictionaryCreateMutableCopy();
          if (!MutableCopy)
          {
            OSStatus v20 = -12904;
            goto LABEL_31;
          }
          CFDictionaryRef v13 = (const __CFDictionary *)MutableCopy;
          FigCFDictionarySetInt64();
          FigCFDictionarySetInt64();
          CFDictionaryRef IOSurfacePropertiesDictionary = FigCreateIOSurfacePropertiesDictionary();
          if (IOSurfacePropertiesDictionary)
          {
            CFDictionaryRef v15 = IOSurfacePropertiesDictionary;
            FigCFDictionarySetValue();
            CFRelease(v15);
            CVReturn v16 = CVPixelBufferPoolCreate(v6, 0, v13, (CVPixelBufferPoolRef *)session + 17);
            if (!v16)
            {
              CFRelease(v13);
              uint64_t v8 = *v9;
              goto LABEL_23;
            }
            OSStatus v20 = v16;
          }
          else
          {
            OSStatus v20 = -12904;
          }
          CFRelease(v13);
          goto LABEL_31;
        }
      }
      else
      {
        if (v10) {
          uint64_t v8 = (__CVPixelBufferPool *)CFRetain(v10);
        }
        else {
          uint64_t v8 = 0;
        }
        *uint64_t v9 = v8;
      }
    }
LABEL_23:
    OSStatus v7 = CVPixelBufferPoolCreatePixelBuffer(v6, v8, &pixelBufferOuta);
    if (!v7)
    {
      OSStatus v7 = VTFillPixelBufferWithBlack(pixelBufferOuta);
      if (!v7)
      {
        uint64_t v17 = *((void *)session + 4);
        MEMORY[0x1997056B0](*(void *)(v17 + 72));
        uint64_t v18 = *(const void **)(v17 + 80);
        if (v18) {
          uint64_t v19 = (const opaqueCMFormatDescription *)CFRetain(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        MEMORY[0x1997056C0](*(void *)(v17 + 72));
        vtTransferImageBufferAttachmentsFromVideoFormatDescription(v19, pixelBufferOuta);
        *CVPixelBufferRef pixelBufferOut = pixelBufferOuta;
        CVPixelBufferRef pixelBufferOuta = 0;
        if (v19) {
          CFRelease(v19);
        }
        OSStatus v20 = 0;
        goto LABEL_31;
      }
    }
    goto LABEL_36;
  }

  return FigSignalErrorAt();
}

void vtTransferImageBufferAttachmentsFromVideoFormatDescription(const opaqueCMFormatDescription *a1, __CVBuffer *a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(a1);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  OSStatus v7 = Mutable;
  if (!Extensions || !Mutable) {
    goto LABEL_111;
  }
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(a1);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  CFStringRef v10 = (const __CFString *)*MEMORY[0x1E4F24A90];
  uint64_t v91 = (__CFString *)*MEMORY[0x1E4F24C18];
  CFStringRef key = (const __CFString *)*MEMORY[0x1E4F24BC8];
  CFStringRef v90 = (const __CFString *)*MEMORY[0x1E4F24B28];
  vtCopyAttachments(Extensions, a2, v7, v91, *MEMORY[0x1E4F24B28], v11, v12, v13, (uint64_t)v91);
  unint64_t width = Dimensions.width;
  if (Dimensions.width != CVPixelBufferGetWidth(a2) || CVPixelBufferGetHeight(a2) != *(uint64_t *)&Dimensions >> 32)
  {
    CFAllocatorRef allocator = v5;
    CFStringRef v94 = v10;
    unint64_t v27 = HIDWORD(*(unint64_t *)&Dimensions);
    CFStringRef v28 = (const __CFString *)*MEMORY[0x1E4F24A78];
    FourCharCode v95 = MediaSubType;
    unint64_t v96 = HIDWORD(*(unint64_t *)&Dimensions);
    if (vtCVBufferAttachmentEmpty(a2, (const __CFString *)*MEMORY[0x1E4F24A78]))
    {
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, v28);
      if (Value)
      {
        CFDictionaryRef v30 = Value;
        CMVideoDimensions v89 = Dimensions;
        double v31 = (double)CVPixelBufferGetWidth(a2) / (double)Dimensions.width;
        size_t Height = CVPixelBufferGetHeight(a2);
        double v33 = (double)Dimensions.height;
        CFTypeID v34 = (const void *)*MEMORY[0x1E4F24A68];
        int valuePtr = (const void *)*MEMORY[0x1E4F24A88];
        CFTypeID v107 = v34;
        uint64_t v35 = (const void *)*MEMORY[0x1E4F24A80];
        double v36 = (double)Height / v33;
        CFTypeID v108 = (const void *)*MEMORY[0x1E4F24A70];
        int v109 = v35;
        ScaledCleanApertureCFDictionaryRef Value = vtCreateScaledCleanApertureValue(v30, valuePtr, v31);
        CFDictionaryValueCallBacks values = ScaledCleanApertureValue;
        CFNumberRef v38 = vtCreateScaledCleanApertureValue(v30, v34, v36);
        CFNumberRef v103 = v38;
        CFNumberRef v39 = vtCreateScaledCleanApertureValue(v30, v108, v31);
        CFNumberRef v104 = v39;
        CFNumberRef v40 = vtCreateScaledCleanApertureValue(v30, v35, v36);
        CFDictionaryRef v41 = 0;
        CFNumberRef v105 = v40;
        if (ScaledCleanApertureValue && v38)
        {
          LODWORD(v27) = v96;
          if (v39)
          {
            FourCharCode MediaSubType = v95;
            if (v40)
            {
              CFDictionaryRef v41 = CFDictionaryCreate(v5, &valuePtr, (const void **)&values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              ScaledCleanApertureCFDictionaryRef Value = values;
            }
          }
          else
          {
            FourCharCode MediaSubType = v95;
          }
        }
        else
        {
          FourCharCode MediaSubType = v95;
          LODWORD(v27) = v96;
        }
        CMVideoDimensions Dimensions = v89;
        if (ScaledCleanApertureValue) {
          CFRelease(ScaledCleanApertureValue);
        }
        if (v103) {
          CFRelease(v103);
        }
        if (v104) {
          CFRelease(v104);
        }
        if (v105) {
          CFRelease(v105);
        }
        if (v41)
        {
          CVBufferSetAttachment(a2, v28, v41, kCVAttachmentMode_ShouldPropagate);
          CFRelease(v41);
        }
      }
    }
    CFStringRef v42 = (const __CFString *)*MEMORY[0x1E4F24B98];
    if (vtCVBufferAttachmentEmpty(a2, (const __CFString *)*MEMORY[0x1E4F24B98]))
    {
      uint64_t v98 = 1;
      uint64_t v99 = 1;
      CMVideoDimensions v43 = Dimensions;
      size_t v44 = CVPixelBufferGetWidth(a2) * (*(uint64_t *)&Dimensions >> 32);
      size_t v45 = CVPixelBufferGetHeight(a2) * width;
      CFDictionaryRef v46 = (const __CFDictionary *)CFDictionaryGetValue(Extensions, v42);
      uint64_t v47 = (const void **)MEMORY[0x1E4F24B90];
      unint64_t v48 = (const void **)MEMORY[0x1E4F24BA0];
      if (v46)
      {
        CFDictionaryRef v49 = v46;
        CFNumberRef v50 = (const __CFNumber *)CFDictionaryGetValue(v46, (const void *)*MEMORY[0x1E4F24B90]);
        CFNumberGetValue(v50, kCFNumberSInt64Type, &v99);
        CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue(v49, *v48);
        CFNumberGetValue(v51, kCFNumberSInt64Type, &v98);
      }
      if (v44 != v45)
      {
        CFDictionaryRef v52 = *v48;
        int valuePtr = *v47;
        CFTypeID v107 = v52;
        int64_t v53 = v99 * v45;
        uint64_t v54 = v98 * v44;
        if (((v99 * v45) & 0x8000000000000000) == 0) {
          uint64_t v55 = v99 * v45;
        }
        else {
          uint64_t v55 = -v53;
        }
        if (v54 >= 0) {
          uint64_t v56 = v98 * v44;
        }
        else {
          uint64_t v56 = -v54;
        }
        if (v55 <= v56) {
          uint64_t v57 = v56;
        }
        else {
          uint64_t v57 = v55;
        }
        if (v55 >= v56) {
          uint64_t v55 = v56;
        }
        if (v55)
        {
          if (v55 < 1)
          {
            uint64_t v58 = v57;
          }
          else
          {
            do
            {
              uint64_t v58 = v55;
              uint64_t v55 = v57 % v55;
              uint64_t v57 = v58;
            }
            while (v55 > 0);
          }
        }
        else if ((unint64_t)v57 <= 1)
        {
          uint64_t v58 = 1;
        }
        else
        {
          uint64_t v58 = v57;
        }
        uint64_t v59 = v54 / v58;
        uint64_t v100 = v59;
        uint64_t v101 = v53 / v58;
        if (v53 / v58 && v59)
        {
          uint64_t v60 = CFNumberCreate(allocator, kCFNumberSInt64Type, &v101);
          CFDictionaryValueCallBacks values = v60;
          CFNumberRef v61 = CFNumberCreate(allocator, kCFNumberSInt64Type, &v100);
          CFDictionaryRef v62 = 0;
          CFNumberRef v103 = v61;
          if (v60 && v61)
          {
            CFDictionaryRef v62 = CFDictionaryCreate(allocator, &valuePtr, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            uint64_t v60 = values;
          }
          if (v60) {
            CFRelease(v60);
          }
          if (v103) {
            CFRelease(v103);
          }
          if (v62)
          {
            CVBufferSetAttachment(a2, v42, v62, kCVAttachmentMode_ShouldPropagate);
            CFRelease(v62);
          }
        }
      }
      CMVideoDimensions Dimensions = v43;
      FourCharCode MediaSubType = v95;
      LODWORD(v27) = v96;
    }
    CFStringRef v63 = (const __CFString *)*MEMORY[0x1E4F24AF8];
    if (vtCVBufferAttachmentEmpty(a2, (const __CFString *)*MEMORY[0x1E4F24AF8]))
    {
      size_t v68 = CVPixelBufferGetHeight(a2);
      if ((v27 & 0x80000000) == 0) {
        int v69 = v27;
      }
      else {
        int v69 = v27 + 1;
      }
      size_t v70 = (uint64_t)v69 >> 1;
      if (v68 <= v69 >> 1)
      {
        LOBYTE(valuePtr) = 1;
        CFNumberRef v76 = CFNumberCreate(allocator, kCFNumberSInt8Type, &valuePtr);
        CVBufferSetAttachment(a2, v63, v76, kCVAttachmentMode_ShouldPropagate);
        CFStringRef v10 = v94;
        if (v76) {
          CFRelease(v76);
        }
        goto LABEL_85;
      }
      uint64_t v71 = CFDictionaryGetValue(Extensions, v63);
      CFStringRef v72 = (const __CFString *)*MEMORY[0x1E4F24B00];
      uint64_t v73 = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F24B00]);
      if (v71)
      {
        float32x4_t v74 = v73;
        if (v73)
        {
          CVBufferSetAttachment(a2, v63, v71, kCVAttachmentMode_ShouldPropagate);
          CVBufferSetAttachment(a2, v72, v74, kCVAttachmentMode_ShouldPropagate);
        }
      }
    }
    else
    {
      if ((v27 & 0x80000000) == 0) {
        int v75 = v27;
      }
      else {
        int v75 = v27 + 1;
      }
      size_t v70 = (uint64_t)v75 >> 1;
    }
    CFStringRef v10 = v94;
LABEL_85:
    vtCopyAttachments(Extensions, a2, v7, (void *)*MEMORY[0x1E4F24A10], v64, v65, v66, v67, *MEMORY[0x1E4F24A10]);
    if (CVPixelBufferGetHeight(a2) > v70) {
      vtCopyAttachments(Extensions, a2, v7, (void *)*MEMORY[0x1E4F24A08], v77, v78, v79, v80, *MEMORY[0x1E4F24A08]);
    }
    goto LABEL_87;
  }
  LODWORD(valuePtr) = 1;
  CFStringRef v18 = (const __CFString *)*MEMORY[0x1E4F24A78];
  CFStringRef v19 = (const __CFString *)*MEMORY[0x1E4F24AF8];
  vtCopyAttachments(Extensions, a2, v7, (void *)*MEMORY[0x1E4F24A78], v14, v15, v16, v17, *MEMORY[0x1E4F24A78]);
  CFNumberRef v20 = (const __CFNumber *)CVBufferCopyAttachment(a2, v19, 0);
  CFNumberRef v21 = v20;
  if (v20)
  {
    CFNumberGetValue(v20, kCFNumberIntType, &valuePtr);
    if (valuePtr == 2) {
      vtCopyAttachments(Extensions, a2, v7, (void *)*MEMORY[0x1E4F24B00], v22, v23, v24, v25, *MEMORY[0x1E4F24B00]);
    }
  }
  if (MediaSubType == 1752589105 || MediaSubType == 1635148593)
  {
    int64_t v26 = CFDictionaryGetValue(Extensions, v18);
    if (!v26)
    {
      CVBufferRemoveAttachment(a2, v18);
      if (!v21) {
        goto LABEL_87;
      }
      goto LABEL_22;
    }
    CVBufferSetAttachment(a2, v18, v26, kCVAttachmentMode_ShouldPropagate);
  }
  if (v21) {
LABEL_22:
  }
    CFRelease(v21);
LABEL_87:
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  if (PixelFormatType != 1751410032
    && PixelFormatType != 1751411059
    && vtCVBufferAttachmentEmpty(a2, (const __CFString *)*MEMORY[0x1E4F24A00]))
  {
    if (MediaSubType == 1634759272)
    {
      CFDictionarySetValue(v7, key, (const void *)*MEMORY[0x1E4F24BE8]);
    }
    else
    {
      CFTypeRef v82 = CVBufferCopyAttachment(a2, v10, 0);
      CFTypeRef v83 = CVBufferCopyAttachment(a2, key, 0);
      CFTypeRef v84 = CVBufferCopyAttachment(a2, v91, 0);
      BOOL v85 = vtCVBufferAttachmentEmpty(a2, v90);
      if (!v82)
      {
        CFAllocatorRef v86 = CFDictionaryGetValue(v7, v10);
        if (v86) {
          CFTypeRef v82 = CFRetain(v86);
        }
        else {
          CFTypeRef v82 = 0;
        }
      }
      if (!v83)
      {
        CFAllocatorRef v87 = CFDictionaryGetValue(v7, key);
        if (v87) {
          CFTypeRef v83 = CFRetain(v87);
        }
        else {
          CFTypeRef v83 = 0;
        }
      }
      if (!v84)
      {
        CFAllocatorRef v88 = CFDictionaryGetValue(v7, v91);
        if (v88) {
          CFTypeRef v84 = CFRetain(v88);
        }
        else {
          CFTypeRef v84 = 0;
        }
      }
      vtGuessMissingColorSpaceAttachmentsGuts(MediaSubType, width, *(uint64_t *)&Dimensions >> 32, v82, v83, v84, !v85, v7);
      if (v82) {
        CFRelease(v82);
      }
      if (v83) {
        CFRelease(v83);
      }
      if (v84) {
        CFRelease(v84);
      }
    }
  }
  CVBufferSetAttachments(a2, v7, kCVAttachmentMode_ShouldPropagate);
LABEL_111:
  if (v7) {
    CFRelease(v7);
  }
}

Boolean VTIsHardwareDecodeSupported(CMVideoCodecType codecType)
{
  uint64_t v1 = *(void *)&codecType;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v4 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionarySetValue(Mutable, @"RequireHardwareAcceleratedVideoDecoder", (const void *)*MEMORY[0x1E4F1CFD0]);
  if (v1 == 1987063865)
  {
    if (FigServer_IsServerProcess()
      || (uint64_t v8 = SecTaskCreateFromSelf(v2)) != 0
      && (uint64_t v9 = v8, v10 = VTIsSecTaskEntitledForVP9Decode(v8), CFRelease(v9), v10))
    {
      CFDictionarySetValue(Mutable, @"AllowAlternateDecoderSelection", v4);
    }
  }
  VideoDecoderuint64_t Instance = VTSelectAndCreateVideoDecoderInstance(v1, (uint64_t)v2, Mutable, 0);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return VideoDecoderInstance == -12913 || VideoDecoderInstance == 0;
}

uint64_t VTDecompressionSessionGetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(uint64_t a1, CMTime *a2, CMTime *a3)
{
  long long v10 = *MEMORY[0x1E4F1FA10];
  CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
  long long v12 = *MEMORY[0x1E4F1FA08];
  CMTimeEpoch v13 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    uint64_t v7 = *(void *)(a1 + 24);
    if (v7)
    {
      return VTDecompressionSessionRemoteBridge_GetMinAndMaxOutputPresentationTimeStampOfFramesBeingDecoded(v7, a2, a3);
    }
    else
    {
      MEMORY[0x1997056B0](*(void *)(*(void *)(a1 + 32) + 72));
      uint64_t v8 = *(void *)(a1 + 32);
      CFDictionaryRef v9 = *(const __CFDictionary **)(v8 + 48);
      if (v9)
      {
        CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)vtDuctFrameTrackingInfoFindMinAndMaxPTS, &v10);
        uint64_t v8 = *(void *)(a1 + 32);
      }
      MEMORY[0x1997056C0](*(void *)(v8 + 72));
      if (a2)
      {
        *(_OWORD *)&a2->value = v10;
        a2->CMTimeEpoch epoch = v11;
      }
      if (a3)
      {
        *(_OWORD *)&a3->value = v12;
        a3->CMTimeEpoch epoch = v13;
      }
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

double vtDuctFrameTrackingInfoFindMinAndMaxPTS(uint64_t a1, uint64_t a2, CMTime *a3)
{
  CMTime time1 = *a3;
  CMTime v6 = *(CMTime *)(a2 + 24);
  CMTimeMinimum(&v8, &time1, &v6);
  *a3 = v8;
  CMTime time1 = a3[1];
  CMTime v6 = *(CMTime *)(a2 + 24);
  CMTimeMaximum(&v8, &time1, &v6);
  double result = *(double *)&v8.value;
  a3[1] = v8;
  return result;
}

uint64_t VTDecompressionSessionSetDecoderSessionAsPixelBufferSource(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (v2)
    {
      uint64_t v3 = 0;
      *(void *)(v2 + 40) = a2;
    }
    else
    {
      uint64_t v4 = *(void *)(a1 + 40);
      uint64_t v3 = 0;
      if (v4) {
        *(void *)(v4 + 48) = a2;
      }
    }
  }
  else
  {
    uint64_t v3 = 4294954394;
    FigSignalErrorAt();
  }
  return v3;
}

uint64_t vtDecoderSessionGetSubDuctPixelBufferPool(uint64_t *a1, int a2)
{
  if (!a1 || (uint64_t v2 = *a1) == 0)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (a2)
  {
    MEMORY[0x1997056B0](*(void *)(v2 + 104));
    int v3 = vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(v2);
    MEMORY[0x1997056C0](*(void *)(v2 + 104));
    if (!v3) {
      return *(void *)(v2 + 88);
    }
    return 0;
  }
  if (vtDecompressionSubDuctEnsurePixelBufferPoolsAreUpToDate(*a1)) {
    return 0;
  }
  return *(void *)(v2 + 88);
}

uint64_t VTDecoderSessionCreatePixelBuffer(uint64_t *a1, const void *a2, CVPixelBufferRef *a3)
{
  return VTDecoderSessionCreatePixelBufferWithOptions(a1, a2, 0, a3);
}

uint64_t VTDecoderSessionCreatePixelBufferWithOptions(uint64_t *a1, const void *a2, uint64_t a3, CVPixelBufferRef *a4)
{
  char v23 = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  if (!a1)
  {
    uint64_t v12 = 4294954394;
LABEL_9:
    FigSignalErrorAt();
    return v12;
  }
  uint64_t v5 = *a1;
  if (!*a1)
  {
    uint64_t v12 = 4294954393;
    goto LABEL_9;
  }
  CMTime v8 = (uint64_t *)a1[3];
  if (v8)
  {
    MEMORY[0x1997056B0](*(void *)(v5 + 104));
    CFDictionaryRef v9 = *(const __CFDictionary **)(*a1 + 112);
    if (v9 && (CFDictionaryRef Value = CFDictionaryGetValue(v9, a2)) != 0)
    {
      CMTimeEpoch v11 = (const void *)Value[2];
    }
    else
    {
      FigSignalErrorAt();
      CMTimeEpoch v11 = 0;
    }
    if (v11) {
      a2 = v11;
    }
    MEMORY[0x1997056C0](*(void *)(*a1 + 104));
    uint64_t v5 = *v8;
  }
  else
  {
    CMTime v8 = a1;
  }
  MEMORY[0x1997056B0](*(void *)(v5 + 104));
  FigCFDictionaryGetBooleanIfPresent();
  if (*(void *)(v5 + 120))
  {
    FigCFDictionaryGetInt32IfPresent();
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%p_%d", a2, 0);
    CFDictionaryRef v15 = *(const __CFDictionary **)(v5 + 120);
    if (v15)
    {
      uint64_t v16 = (__CVBuffer *)CFDictionaryGetValue(v15, v14);
      CVPixelBufferRef pixelBufferOut = v16;
      if (v16)
      {
        CVPixelBufferRef v17 = v16;
        CFRetain(v16);
        uint64_t v12 = 0;
        goto LABEL_28;
      }
    }
  }
  else
  {
    CFStringRef v14 = 0;
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  SubDuctPixelBufferPool = (__CVPixelBufferPool *)vtDecoderSessionGetSubDuctPixelBufferPool(v8, 0);
  uint64_t v19 = CVPixelBufferPoolCreatePixelBuffer(v13, SubDuctPixelBufferPool, &pixelBufferOut);
  uint64_t v12 = v19;
  CVPixelBufferRef v17 = pixelBufferOut;
  if (v23 && !v19 && pixelBufferOut)
  {
    CFMutableDictionaryRef Mutable = *(__CFDictionary **)(v5 + 120);
    if (!Mutable)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v13, 10, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)(v5 + 120) = Mutable;
      if (!Mutable)
      {
        uint64_t v12 = FigSignalErrorAt();
        goto LABEL_29;
      }
      CVPixelBufferRef v17 = pixelBufferOut;
    }
    CFDictionarySetValue(Mutable, v14, v17);
    uint64_t v12 = 0;
    CVPixelBufferRef v17 = pixelBufferOut;
  }
LABEL_28:
  *a4 = v17;
  CVPixelBufferRef pixelBufferOut = 0;
LABEL_29:
  MEMORY[0x1997056C0](*(void *)(v5 + 104));
  if (v14) {
    CFRelease(v14);
  }
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  return v12;
}

uint64_t VTDecoderSessionForgetPixelBufferForFrame(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    uint64_t v6 = 4294954394;
LABEL_15:
    FigSignalErrorAt();
    return v6;
  }
  if (!*a1)
  {
    uint64_t v6 = 4294954393;
    goto LABEL_15;
  }
  if (a3)
  {
    uint64_t v4 = (uint64_t *)a1[3];
    if (!v4) {
      uint64_t v4 = a1;
    }
    uint64_t v5 = *v4;
    FigCFDictionaryGetInt32IfPresent();
    uint64_t v6 = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%p_%d", a2, 0);
    MEMORY[0x1997056B0](*(void *)(v5 + 104));
    uint64_t v7 = *(__CFDictionary **)(v5 + 120);
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      MEMORY[0x1997056C0](*(void *)(v5 + 104));
      if (!v6) {
        return v6;
      }
    }
    else
    {
      CFDictionaryRemoveValue(v7, (const void *)v6);
      MEMORY[0x1997056C0](*(void *)(v5 + 104));
    }
    CFRelease((CFTypeRef)v6);
  }
  return 0;
}

uint64_t VTDecompressionSessionDecodeFrameWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (!a1 || !a2 || *(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  if (*(void *)(a1 + 24)) {
    return VTDecompressionSessionRemoteBridge_DecodeFrame(*(void *)(a1 + 24), a2, a3, a4, a5, a6);
  }
  if (*(void *)(a1 + 112) || *(void *)(a1 + 96)) {
    return vtDecompressionSessionDecodeFrameCommon(a1, a2, a3, a4, 0, 0, a5, a6);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t vtDecompressionSessionDecodeFrameCommon(uint64_t a1, CMSampleBufferRef sbuf, uint64_t a3, uint64_t a4, uint64_t a5, CMTimeEpoch a6, CMTimeValue a7, int *a8)
{
  if (a1 && !*(unsigned char *)(a1 + 16) && sbuf)
  {
    int v34 = 0;
    if (a8) {
      CFDictionaryRef v15 = a8;
    }
    else {
      CFDictionaryRef v15 = &v34;
    }
    *CFDictionaryRef v15 = 0;
    uint64_t v16 = *(void *)(a1 + 32);
    CMItemCount NumSamples = CMSampleBufferGetNumSamples(sbuf);
    if (NumSamples < 1) {
      return 4294954394;
    }
    CMItemCount v18 = NumSamples;
    uint64_t v30 = a5;
    CMTimeValue v31 = a7;
    CMTimeEpoch v32 = a6;
    CFRetain((CFTypeRef)a1);
    CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
    CMFormatDescriptionRef v20 = *(CMFormatDescriptionRef *)(v16 + 80);
    if (v20 == FormatDescription) {
      goto LABEL_24;
    }
    if (!FormatDescription) {
      goto LABEL_23;
    }
    uint64_t v21 = *(void *)(a1 + 40);
    if (CFEqual(v20, FormatDescription))
    {
LABEL_11:
      vtDecompressionDuctSetVideoFormatDescription(v16, FormatDescription);
      if (v21)
      {
        uint64_t v22 = *(const void **)(v21 + 16);
        *(void *)(v21 + 16) = FormatDescription;
        CFRetain(FormatDescription);
        if (v22) {
          CFRelease(v22);
        }
      }
      goto LABEL_24;
    }
    uint64_t v24 = *(void *)(v16 + 8);
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    int64_t v26 = v25 ? (void *)v25 : 0;
    if (*v26 >= 2uLL
      && (unint64_t v27 = (unsigned int (*)(uint64_t, CMFormatDescriptionRef))v26[6]) != 0
      && v27(v24, FormatDescription))
    {
      uint64_t v28 = VTDecompressionSessionWaitForAsynchronousFrames((VTDecompressionSessionRef)a1);
      if (!v28) {
        goto LABEL_11;
      }
    }
    else
    {
LABEL_23:
      uint64_t v28 = FigSignalErrorAt();
      if (!v28)
      {
LABEL_24:
        if (v18 == 1)
        {
          uint64_t v28 = vtDecompressionDuctDecodeSingleFrame(v16, sbuf, a3, a4, v30, v32, v31, (uint64_t)v15);
        }
        else
        {
          refcon[0] = v16;
          refcon[1] = a3;
          refcon[2] = a4;
          refcon[3] = v31;
          refcon[5] = v30;
          refcon[6] = v32;
          refcon[4] = v15;
          uint64_t v28 = CMSampleBufferCallForEachSample(sbuf, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))vtDecompressionDuctDecodeSingleFrame_iterator, refcon);
        }
      }
    }
    uint64_t v23 = v28;
    CFRelease((CFTypeRef)a1);
    return v23;
  }

  return FigSignalErrorAt();
}

uint64_t VTDecompressionSessionDecodeFrameWithOptionsAndOutputHandler(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, int *a5, unint64_t a6)
{
  if (!a1 || !a2 || *(unsigned char *)(a1 + 16) || !a6) {
    return FigSignalErrorAt();
  }
  if (*(void *)(a1 + 24)) {
    return VTDecompressionSessionRemoteBridge_DecodeFrameWithOutputHandler(*(void *)(a1 + 24), a2, a3, a4, a5, a6, 0);
  }
  if (!*(void *)(a1 + 96)) {
    return vtDecompressionSessionDecodeFrameCommon(a1, a2, a3, a4, a6, 0, 0, a5);
  }
  else {
    return FigSignalErrorAt();
  }
}

OSStatus VTDecompressionSessionDecodeFrameWithOutputHandler(VTDecompressionSessionRef session, CMSampleBufferRef sampleBuffer, VTDecodeFrameFlags decodeFlags, VTDecodeInfoFlags *infoFlagsOut, VTDecompressionOutputHandler outputHandler)
{
  return VTDecompressionSessionDecodeFrameWithOptionsAndOutputHandler((uint64_t)session, sampleBuffer, *(uint64_t *)&decodeFlags, 0, (int *)infoFlagsOut, (unint64_t)outputHandler);
}

uint64_t VTDecompressionSessionDecodeFrameWithOptionsAndMultiImageCapableOutputHandler(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, int *a5, unint64_t a6)
{
  if (!a1 || !a2 || *(unsigned char *)(a1 + 16) || !a6) {
    return FigSignalErrorAt();
  }
  if (*(void *)(a1 + 24)) {
    return VTDecompressionSessionRemoteBridge_DecodeFrameWithOutputHandler(*(void *)(a1 + 24), a2, a3, 0, a5, 0, a6);
  }
  if (*(void *)(a1 + 96) || *(void *)(a1 + 112)) {
    return FigSignalErrorAt();
  }
  else {
    return vtDecompressionSessionDecodeFrameCommon(a1, a2, a3, a4, 0, a6, 0, a5);
  }
}

OSStatus VTDecompressionSessionDecodeFrameWithMultiImageCapableOutputHandler(VTDecompressionSessionRef session, CMSampleBufferRef sampleBuffer, VTDecodeFrameFlags decodeFlags, VTDecodeInfoFlags *infoFlagsOut, VTDecompressionMultiImageCapableOutputHandler multiImageCapableOutputHandler)
{
  return VTDecompressionSessionDecodeFrameWithOptionsAndMultiImageCapableOutputHandler((uint64_t)session, sampleBuffer, *(uint64_t *)&decodeFlags, 0, (int *)infoFlagsOut, (unint64_t)multiImageCapableOutputHandler);
}

Boolean VTDecompressionSessionCanAcceptFormatDescription(VTDecompressionSessionRef session, CMFormatDescriptionRef newFormatDesc)
{
  LOBYTE(CanAcceptFormatDescription) = 0;
  if (!session || !newFormatDesc) {
    return CanAcceptFormatDescription;
  }
  if (*((unsigned char *)session + 16)) {
    goto LABEL_4;
  }
  uint64_t v6 = *((void *)session + 4);
  if (v6)
  {
    if (FigCFEqual())
    {
      LOBYTE(CanAcceptFormatDescription) = 1;
      return CanAcceptFormatDescription;
    }
    uint64_t v7 = *((void *)session + 3);
    if (!v7)
    {
      CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(*(CMVideoFormatDescriptionRef *)(v6 + 80));
      CMVideoDimensions v9 = CMVideoFormatDescriptionGetDimensions(newFormatDesc);
      FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(v6 + 80));
      LOBYTE(CanAcceptFormatDescription) = 0;
      if (MediaSubType == CMFormatDescriptionGetMediaSubType(newFormatDesc)
        && v9.width == Dimensions.width
        && v9.height == Dimensions.height)
      {
        CanAcceptCMFormatDescriptionRef FormatDescription = VTVideoDecoderCanAcceptFormatDescription(*(void *)(v6 + 8), (uint64_t)newFormatDesc);
        if (CanAcceptFormatDescription)
        {
          if (FigVideoCodecTypeIsHEVCFlavorOrDolbyVisionHEVCFlavor(MediaSubType))
          {
            BitsPerComponentFromCMFormatDescriptionRef FormatDescription = vtDecompressionSessionGetBitsPerComponentFromFormatDescription(*(const opaqueCMFormatDescription **)(v6 + 80));
            if (BitsPerComponentFromFormatDescription != vtDecompressionSessionGetBitsPerComponentFromFormatDescription(newFormatDesc)) {
              LOBYTE(CanAcceptFormatDescription) = 0;
            }
          }
        }
      }
      return CanAcceptFormatDescription;
    }
  }
  else
  {
    uint64_t v7 = *((void *)session + 3);
    if (!v7)
    {
LABEL_4:
      LOBYTE(CanAcceptFormatDescription) = 0;
      return CanAcceptFormatDescription;
    }
  }

  return VTDecompressionSessionRemoteBridge_CanAcceptFormatDescription(v7, newFormatDesc);
}

uint64_t VTVideoDecoderCanAcceptFormatDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (*v5 < 2uLL) {
    return 0;
  }
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))v5[6];
  if (!v6) {
    return 0;
  }

  return v6(a1, a2);
}

uint64_t FigVideoCodecTypeIsHEVCFlavorOrDolbyVisionHEVCFlavor(int a1)
{
  uint64_t result = 1;
  if (a1 > 1836415072)
  {
    if (a1 > 1902407031)
    {
      if (a1 > 1902671458)
      {
        if (a1 == 1902671459) {
          return result;
        }
        int v3 = 1902998904;
      }
      else
      {
        if (a1 == 1902407032) {
          return result;
        }
        int v3 = 1902667126;
      }
    }
    else if (a1 > 1902405680)
    {
      if (a1 == 1902405681) {
        return result;
      }
      int v3 = 1902405733;
    }
    else
    {
      if (a1 == 1836415073) {
        return result;
      }
      int v3 = 1869117027;
    }
  }
  else if (a1 > 1685481572)
  {
    if (a1 > 1751479856)
    {
      if (a1 == 1751479857) {
        return result;
      }
      int v3 = 1752589105;
    }
    else
    {
      if (a1 == 1685481573) {
        return result;
      }
      int v3 = 1718908520;
    }
  }
  else if (a1 > 1684895095)
  {
    if (a1 == 1684895096) {
      return result;
    }
    int v3 = 1685481521;
  }
  else
  {
    if (a1 == 1667524657) {
      return result;
    }
    int v3 = 1667790435;
  }
  if (a1 != v3) {
    return 0;
  }
  return result;
}